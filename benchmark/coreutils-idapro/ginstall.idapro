LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : C83B89E877C7B66CF71E831AC0D4A8A0E7DA0F3BD5793DED9B5B0AE48019580B
LOAD:0000000000000000 ; Input MD5    : 4E85068408E85BB760D9235D6469E188
LOAD:0000000000000000 ; Input CRC32  : 606F486F
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/ginstall
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'copy.c'
LOAD:0000000000000000 ; Source File : 'install.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'prog-fprintf.c'
LOAD:0000000000000000 ; Source File : 'cp-hash.c'
LOAD:0000000000000000 ; Source File : 'extent-scan.c'
LOAD:0000000000000000 ; Source File : 'force-link.c'
LOAD:0000000000000000 ; Source File : 'selinux.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'copy-acl.c'
LOAD:0000000000000000 ; Source File : 'set-acl.c'
LOAD:0000000000000000 ; Source File : 'areadlink-with-size.c'
LOAD:0000000000000000 ; Source File : 'backupfile.c'
LOAD:0000000000000000 ; Source File : 'backup-rename.c'
LOAD:0000000000000000 ; Source File : 'backup-find.c'
LOAD:0000000000000000 ; Source File : 'buffer-lcm.c'
LOAD:0000000000000000 ; Source File : 'closein.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'dirname.c'
LOAD:0000000000000000 ; Source File : 'dirname-lgpl.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'file-set.c'
LOAD:0000000000000000 ; Source File : 'filemode.c'
LOAD:0000000000000000 ; Source File : 'filenamecat.c'
LOAD:0000000000000000 ; Source File : 'filenamecat-lgpl.c'
LOAD:0000000000000000 ; Source File : 'full-read.c'
LOAD:0000000000000000 ; Source File : 'full-write.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'hash-triple.c'
LOAD:0000000000000000 ; Source File : 'mkancesdirs.c'
LOAD:0000000000000000 ; Source File : 'mkdir-p.c'
LOAD:0000000000000000 ; Source File : 'modechange.c'
LOAD:0000000000000000 ; Source File : 'opendirat.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'qcopy-acl.c'
LOAD:0000000000000000 ; Source File : 'qset-acl.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'renameatu.c'
LOAD:0000000000000000 ; Source File : 'safe-read.c'
LOAD:0000000000000000 ; Source File : 'safe-write.c'
LOAD:0000000000000000 ; Source File : 'same.c'
LOAD:0000000000000000 ; Source File : 'savedir.c'
LOAD:0000000000000000 ; Source File : 'savewd.c'
LOAD:0000000000000000 ; Source File : 'tempname.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'utimecmp.c'
LOAD:0000000000000000 ; Source File : 'utimens.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'write-any-file.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xstrtoul.c'
LOAD:0000000000000000 ; Source File : 'yesno.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'freadahead.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'vfprintf.c'
LOAD:0000000000000000 ; Source File : 'acl-internal.c'
LOAD:0000000000000000 ; Source File : 'get-permissions.c'
LOAD:0000000000000000 ; Source File : 'set-permissions.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'opendir-safer.c'
LOAD:0000000000000000 ; Source File : 'gettime.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'hash-pjw.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'dirchownmod.c'
LOAD:0000000000000000 ; Source File : 'openat-safer.c'
LOAD:0000000000000000 ; Source File : 'randint.c'
LOAD:0000000000000000 ; Source File : 'randread.c'
LOAD:0000000000000000 ; Source File : 'rand-isaac.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fseterr.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'fopen-safer.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 9EC90h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 1C498h               ; Size in file image
LOAD:00000000000000D8                 dq 1C498h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 1C6B0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 21C6B0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 0A18h                ; Size in file image
LOAD:0000000000000110                 dq 3088h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 1C9D8h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 21C9D8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 190DCh               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 190DCh               ; Physical address
LOAD:00000000000001B0                 dq 814h                 ; Size in file image
LOAD:00000000000001B8                 dq 814h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 1C6B0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 21C6B0h              ; Physical address
LOAD:0000000000000220                 dq 950h                 ; Size in file image
LOAD:0000000000000228                 dq 950h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0BEh, 0A3h, 1Ch, 0CBh, 0B3h, 0DBh, 72h, 41h, 81h, 4 ; Desc
LOAD:0000000000000284                 db 66h, 65h, 62h, 0DDh, 0ABh, 7Fh, 73h, 52h, 8Dh, 0A0h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 85h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 85h, 86h, 8Ch
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aEndgrent - offset byte_1030, 12h, 0, 0, \ ; "endgrent"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aGetenv - offset byte_1030, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aSnprintfChk - offset byte_1030, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aRaise - offset byte_1030, 12h, 0, 0, \ ; "raise"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aFree - offset byte_1030, 12h, 0, 0, offset dword_0,\ ; "free"
LOAD:0000000000000358                            0>
LOAD:0000000000000370                 Elf64_Sym <offset aUtimensat - offset byte_1030, 12h, 0, 0, \ ; "utimensat"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aAbort - offset byte_1030, 12h, 0, 0, \ ; "abort"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aErrnoLocation - offset byte_1030, 12h, 0, 0, \ ; "__errno_location"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aUnlink - offset byte_1030, 12h, 0, 0, \ ; "unlink"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aStrncmp - offset byte_1030, 12h, 0, 0, \ ; "strncmp"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aItmDeregistert - offset byte_1030, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aExit - offset byte_1030, 12h, 0, 0, offset dword_0,\ ; "_exit"
LOAD:0000000000000400                            0>
LOAD:0000000000000418                 Elf64_Sym <offset aStrcpy - offset byte_1030, 12h, 0, 0, \ ; "strcpy"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aFpending - offset byte_1030, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aReadChk - offset byte_1030, 12h, 0, 0, \ ; "__read_chk"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aMkdir - offset byte_1030, 12h, 0, 0, \ ; "mkdir"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aUnlinkat - offset byte_1030, 12h, 0, 0, \ ; "unlinkat"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aQsort - offset byte_1030, 12h, 0, 0, \ ; "qsort"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aReadlink - offset byte_1030, 12h, 0, 0, \ ; "readlink"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aFcntl - offset byte_1030, 12h, 0, 0, \ ; "fcntl"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aClockGettime - offset byte_1030, 12h, 0, 0, \ ; "clock_gettime"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aFwrite+1 - offset byte_1030, 12h, 0, 0, \ ; "write"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aGetpid - offset byte_1030, 12h, 0, 0, \ ; "getpid"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aFreadUnlocked - offset byte_1030, 12h, 0, 0, \ ; "fread_unlocked"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_1030, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aFpathconf+1 - offset byte_1030, 12h, 0, 0, \ ; "pathconf"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aOpen2 - offset byte_1030, 12h, 0, 0, \ ; "__open_2"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aFclose - offset byte_1030, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFdopendir+2 - offset byte_1030, 12h, 0, 0, \ ; "opendir"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aBindtextdomain - offset byte_1030, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aStpcpy - offset byte_1030, 12h, 0, 0, \ ; "stpcpy"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aRmdir - offset byte_1030, 12h, 0, 0, \ ; "rmdir"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aDcgettext - offset byte_1030, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_1030, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aStrlen - offset byte_1030, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aLxstat - offset byte_1030, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aOpenat - offset byte_1030, 12h, 0, 0, \ ; "openat"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFchdir+1 - offset byte_1030, 12h, 0, 0, \ ; "chdir"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aStackChkFail - offset byte_1030, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aGetuid - offset byte_1030, 12h, 0, 0, \ ; "getuid"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aGetoptLong - offset byte_1030, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aMbrtowc - offset byte_1030, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aStrchr - offset byte_1030, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFxstatat - offset byte_1030, 12h, 0, 0, \ ; "__fxstatat"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aOverflow - offset byte_1030, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aStrrchr - offset byte_1030, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFtruncate - offset byte_1030, 12h, 0, 0, \ ; "ftruncate"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aLseek - offset byte_1030, 12h, 0, 0, \ ; "lseek"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aGettimeofday - offset byte_1030, 12h, 0, 0, \ ; "gettimeofday"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aAssertFail - offset byte_1030, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aMemset - offset byte_1030, 12h, 0, 0, \ ; "memset"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aGeteuid - offset byte_1030, 12h, 0, 0, \ ; "geteuid"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aIoctl - offset byte_1030, 12h, 0, 0, \ ; "ioctl"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aCanonicalizeFi - offset byte_1030, 12h, 0, 0, \ ; "canonicalize_file_name"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFclose+1 - offset byte_1030, 12h, 0, 0, \ ; "close"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aRewinddir - offset byte_1030, 12h, 0, 0, \ ; "rewinddir"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aStrspn - offset byte_1030, 12h, 0, 0, \ ; "strspn"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aClosedir - offset byte_1030, 12h, 0, 0, \ ; "closedir"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aPosixFadvise - offset byte_1030, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aRead - offset byte_1030, 12h, 0, 0, offset dword_0,\ ; "read"
LOAD:0000000000000880                            0>
LOAD:0000000000000898                 Elf64_Sym <offset aLibcStartMain - offset byte_1030, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aMemcmp - offset byte_1030, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aFallocate - offset byte_1030, 12h, 0, 0, \ ; "fallocate"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aFputsUnlocked - offset byte_1030, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aUtimes - offset byte_1030, 12h, 0, 0, \ ; "utimes"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aCalloc - offset byte_1030, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aGetdelim - offset byte_1030, 12h, 0, 0, \ ; "__getdelim"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aStrcmp - offset byte_1030, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aSignal - offset byte_1030, 12h, 0, 0, \ ; "signal"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aDirfd - offset byte_1030, 12h, 0, 0, \ ; "dirfd"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aGetpwnam - offset byte_1030, 12h, 0, 0, \ ; "getpwnam"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aFpathconf - offset byte_1030, 12h, 0, 0, \ ; "fpathconf"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aRpmatch - offset byte_1030, 12h, 0, 0, \ ; "rpmatch"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aSyscall - offset byte_1030, 12h, 0, 0, \ ; "syscall"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aMkfifo - offset byte_1030, 12h, 0, 0, \ ; "mkfifo"
LOAD:00000000000009E8                            offset dword_0, 0>
LOAD:0000000000000A00                 Elf64_Sym <offset aGmonStart - offset byte_1030, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000A00                            offset dword_0, 0>
LOAD:0000000000000A18                 Elf64_Sym <offset aUmask - offset byte_1030, 12h, 0, 0, \ ; "umask"
LOAD:0000000000000A18                            offset dword_0, 0>
LOAD:0000000000000A30                 Elf64_Sym <offset aMemcpy - offset byte_1030, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000A30                            offset dword_0, 0>
LOAD:0000000000000A48                 Elf64_Sym <offset aGetgrnam - offset byte_1030, 12h, 0, 0, \ ; "getgrnam"
LOAD:0000000000000A48                            offset dword_0, 0>
LOAD:0000000000000A60                 Elf64_Sym <offset aXmknod - offset byte_1030, 12h, 0, 0, \ ; "__xmknod"
LOAD:0000000000000A60                            offset dword_0, 0>
LOAD:0000000000000A78                 Elf64_Sym <offset aFileno - offset byte_1030, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000A78                            offset dword_0, 0>
LOAD:0000000000000A90                 Elf64_Sym <offset aGetgid - offset byte_1030, 12h, 0, 0, \ ; "getgid"
LOAD:0000000000000A90                            offset dword_0, 0>
LOAD:0000000000000AA8                 Elf64_Sym <offset aXstat - offset byte_1030, 12h, 0, 0, \ ; "__xstat"
LOAD:0000000000000AA8                            offset dword_0, 0>
LOAD:0000000000000AC0                 Elf64_Sym <offset aReaddir - offset byte_1030, 12h, 0, 0, \ ; "readdir"
LOAD:0000000000000AC0                            offset dword_0, 0>
LOAD:0000000000000AD8                 Elf64_Sym <offset aMalloc - offset byte_1030, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000AD8                            offset dword_0, 0>
LOAD:0000000000000AF0                 Elf64_Sym <offset aFflush - offset byte_1030, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000AF0                            offset dword_0, 0>
LOAD:0000000000000B08                 Elf64_Sym <offset aNlLanginfo - offset byte_1030, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000B08                            offset dword_0, 0>
LOAD:0000000000000B20                 Elf64_Sym <offset aFxstat - offset byte_1030, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000B20                            offset dword_0, 0>
LOAD:0000000000000B38                 Elf64_Sym <offset aEndpwent - offset byte_1030, 12h, 0, 0, \ ; "endpwent"
LOAD:0000000000000B38                            offset dword_0, 0>
LOAD:0000000000000B50                 Elf64_Sym <offset aLchown - offset byte_1030, 12h, 0, 0, \ ; "lchown"
LOAD:0000000000000B50                            offset dword_0, 0>
LOAD:0000000000000B68                 Elf64_Sym <offset aFreading - offset byte_1030, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000B68                            offset dword_0, 0>
LOAD:0000000000000B80                 Elf64_Sym <offset aFchdir - offset byte_1030, 12h, 0, 0, \ ; "fchdir"
LOAD:0000000000000B80                            offset dword_0, 0>
LOAD:0000000000000B98                 Elf64_Sym <offset aFwriteUnlocked - offset byte_1030, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000B98                            offset dword_0, 0>
LOAD:0000000000000BB0                 Elf64_Sym <offset aFchown+1 - offset byte_1030, 12h, 0, 0, \ ; "chown"
LOAD:0000000000000BB0                            offset dword_0, 0>
LOAD:0000000000000BC8                 Elf64_Sym <offset aRealloc - offset byte_1030, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000BC8                            offset dword_0, 0>
LOAD:0000000000000BE0                 Elf64_Sym <offset aStpncpy - offset byte_1030, 12h, 0, 0, \ ; "stpncpy"
LOAD:0000000000000BE0                            offset dword_0, 0>
LOAD:0000000000000BF8                 Elf64_Sym <offset aFdopen - offset byte_1030, 12h, 0, 0, \ ; "fdopen"
LOAD:0000000000000BF8                            offset dword_0, 0>
LOAD:0000000000000C10                 Elf64_Sym <offset aSymlinkat+3 - offset byte_1030, 12h, 0, 0, \ ; "linkat"
LOAD:0000000000000C10                            offset dword_0, 0>
LOAD:0000000000000C28                 Elf64_Sym <offset aSetlocale - offset byte_1030, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000C28                            offset dword_0, 0>
LOAD:0000000000000C40                 Elf64_Sym <offset aPrintfChk - offset byte_1030, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000C40                            offset dword_0, 0>
LOAD:0000000000000C58                 Elf64_Sym <offset aFchmod - offset byte_1030, 12h, 0, 0, \ ; "fchmod"
LOAD:0000000000000C58                            offset dword_0, 0>
LOAD:0000000000000C70                 Elf64_Sym <offset aSetvbuf - offset byte_1030, 12h, 0, 0, \ ; "setvbuf"
LOAD:0000000000000C70                            offset dword_0, 0>
LOAD:0000000000000C88                 Elf64_Sym <offset aFchmod+1 - offset byte_1030, 12h, 0, 0, \ ; "chmod"
LOAD:0000000000000C88                            offset dword_0, 0>
LOAD:0000000000000CA0                 Elf64_Sym <offset aMempcpy - offset byte_1030, 12h, 0, 0, \ ; "mempcpy"
LOAD:0000000000000CA0                            offset dword_0, 0>
LOAD:0000000000000CB8                 Elf64_Sym <offset aError - offset byte_1030, 12h, 0, 0, \ ; "error"
LOAD:0000000000000CB8                            offset dword_0, 0>
LOAD:0000000000000CD0                 Elf64_Sym <offset aWaitpid - offset byte_1030, 12h, 0, 0, \ ; "waitpid"
LOAD:0000000000000CD0                            offset dword_0, 0>
LOAD:0000000000000CE8                 Elf64_Sym <offset aExplicitBzeroC - offset byte_1030, 12h, 0, 0, \ ; "__explicit_bzero_chk"
LOAD:0000000000000CE8                            offset dword_0, 0>
LOAD:0000000000000D00                 Elf64_Sym <offset aFdopen+2 - offset byte_1030, 12h, 0, 0, \ ; "open"
LOAD:0000000000000D00                            offset dword_0, 0>
LOAD:0000000000000D18                 Elf64_Sym <offset aFseeko - offset byte_1030, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000D18                            offset dword_0, 0>
LOAD:0000000000000D30                 Elf64_Sym <offset aFchown - offset byte_1030, 12h, 0, 0, \ ; "fchown"
LOAD:0000000000000D30                            offset dword_0, 0>
LOAD:0000000000000D48                 Elf64_Sym <offset aFopen - offset byte_1030, 12h, 0, 0, \ ; "fopen"
LOAD:0000000000000D48                            offset dword_0, 0>
LOAD:0000000000000D60                 Elf64_Sym <offset aRename - offset byte_1030, 12h, 0, 0, \ ; "rename"
LOAD:0000000000000D60                            offset dword_0, 0>
LOAD:0000000000000D78                 Elf64_Sym <offset aFdopendir - offset byte_1030, 12h, 0, 0, \ ; "fdopendir"
LOAD:0000000000000D78                            offset dword_0, 0>
LOAD:0000000000000D90                 Elf64_Sym <offset aFutimens - offset byte_1030, 12h, 0, 0, \ ; "futimens"
LOAD:0000000000000D90                            offset dword_0, 0>
LOAD:0000000000000DA8                 Elf64_Sym <offset aEuidaccess - offset byte_1030, 12h, 0, 0, \ ; "euidaccess"
LOAD:0000000000000DA8                            offset dword_0, 0>
LOAD:0000000000000DC0                 Elf64_Sym <offset aStrtoul - offset byte_1030, 12h, 0, 0, \ ; "strtoul"
LOAD:0000000000000DC0                            offset dword_0, 0>
LOAD:0000000000000DD8                 Elf64_Sym <offset aCxaAtexit - offset byte_1030, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000DD8                            offset dword_0, 0>
LOAD:0000000000000DF0                 Elf64_Sym <offset aRenameat - offset byte_1030, 12h, 0, 0, \ ; "renameat"
LOAD:0000000000000DF0                            offset dword_0, 0>
LOAD:0000000000000E08                 Elf64_Sym <offset aGetpagesize - offset byte_1030, 12h, 0, 0, \ ; "getpagesize"
LOAD:0000000000000E08                            offset dword_0, 0>
LOAD:0000000000000E20                 Elf64_Sym <offset aGetppid - offset byte_1030, 12h, 0, 0, \ ; "getppid"
LOAD:0000000000000E20                            offset dword_0, 0>
LOAD:0000000000000E38                 Elf64_Sym <offset aExit+1 - offset byte_1030, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000E38                            offset dword_0, 0>
LOAD:0000000000000E50                 Elf64_Sym <offset aFwrite - offset byte_1030, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000E50                            offset dword_0, 0>
LOAD:0000000000000E68                 Elf64_Sym <offset aFprintfChk - offset byte_1030, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000E68                            offset dword_0, 0>
LOAD:0000000000000E80                 Elf64_Sym <offset aItmRegistertmc - offset byte_1030, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000E80                            offset dword_0, 0>
LOAD:0000000000000E98                 Elf64_Sym <offset aMbsinit - offset byte_1030, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000E98                            offset dword_0, 0>
LOAD:0000000000000EB0                 Elf64_Sym <offset aSymlinkat - offset byte_1030, 12h, 0, 0, \ ; "symlinkat"
LOAD:0000000000000EB0                            offset dword_0, 0>
LOAD:0000000000000EC8                 Elf64_Sym <offset aExeclp - offset byte_1030, 12h, 0, 0, \ ; "execlp"
LOAD:0000000000000EC8                            offset dword_0, 0>
LOAD:0000000000000EE0                 Elf64_Sym <offset aIswprint - offset byte_1030, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000EE0                            offset dword_0, 0>
LOAD:0000000000000EF8                 Elf64_Sym <offset aCxaFinalize - offset byte_1030, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000EF8                            offset dword_0, 0>
LOAD:0000000000000F10                 Elf64_Sym <offset aFork - offset byte_1030, 12h, 0, 0, offset dword_0,\ ; "fork"
LOAD:0000000000000F10                            0>
LOAD:0000000000000F28                 Elf64_Sym <offset aFutimesat - offset byte_1030, 12h, 0, 0, \ ; "futimesat"
LOAD:0000000000000F28                            offset dword_0, 0>
LOAD:0000000000000F40                 Elf64_Sym <offset aCtypeBLoc - offset byte_1030, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000F40                            offset dword_0, 0>
LOAD:0000000000000F58                 Elf64_Sym <offset aStdout - offset byte_1030, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000F58                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000F70                 Elf64_Sym <offset aProgname - offset byte_1030, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000F70                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000F88                 Elf64_Sym <offset aStdin - offset byte_1030, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000F88                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000FA0                 Elf64_Sym <offset aProgramInvocat - offset byte_1030, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000FA0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000FB8                 Elf64_Sym <offset aPrognameFull - offset byte_1030, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000FB8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000FD0                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_1030, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000FD0                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000FE8                 Elf64_Sym <offset aStderr - offset byte_1030, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000FE8                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000001000                 Elf64_Sym <offset aOptind - offset byte_1030, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000001000                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000001018                 Elf64_Sym <offset aOptarg - offset byte_1030, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000001018                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000001030 ; ELF String Table
LOAD:0000000000001030 byte_1030       db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000001030                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000001031 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000000016D0↓o
LOAD:000000000000103B aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000AF0↑o
LOAD:0000000000001042 aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000001049 aFchmod         db 'fchmod',0           ; DATA XREF: LOAD:0000000000000C58↑o
LOAD:0000000000001049                                         ; LOAD:0000000000000C88↑o
LOAD:0000000000001050 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000C40↑o
LOAD:000000000000105D aReaddir        db 'readdir',0          ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:0000000000001065 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000C28↑o
LOAD:000000000000106F aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000001077 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000D48↑o
LOAD:000000000000107D aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000001085 aFtruncate      db 'ftruncate',0        ; DATA XREF: LOAD:0000000000000748↑o
LOAD:000000000000108F aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000001000↑o
LOAD:0000000000001096 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000730↑o
LOAD:000000000000109E aRpmatch        db 'rpmatch',0          ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:00000000000010A6 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:00000000000010B0 aStpncpy        db 'stpncpy',0          ; DATA XREF: LOAD:0000000000000BE0↑o
LOAD:00000000000010B8 aUnlinkat       db 'unlinkat',0         ; DATA XREF: LOAD:0000000000000478↑o
LOAD:00000000000010C1 aClosedir       db 'closedir',0         ; DATA XREF: LOAD:0000000000000850↑o
LOAD:00000000000010CA aFchdir         db 'fchdir',0           ; DATA XREF: LOAD:0000000000000B80↑o
LOAD:00000000000010CA                                         ; LOAD:0000000000000670↑o
LOAD:00000000000010D1 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000CB8↑o
LOAD:00000000000010D7 aReadChk        db '__read_chk',0       ; DATA XREF: LOAD:0000000000000448↑o
LOAD:00000000000010E2 aSignal         db 'signal',0           ; DATA XREF: LOAD:0000000000000958↑o
LOAD:00000000000010E9 aFork           db 'fork',0             ; DATA XREF: LOAD:0000000000000F10↑o
LOAD:00000000000010EE aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000688↑o
LOAD:00000000000010FF aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000001108 aUnlink         db 'unlink',0           ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:000000000000110F aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000EE0↑o
LOAD:0000000000001118 aMkdir          db 'mkdir',0            ; DATA XREF: LOAD:0000000000000460↑o
LOAD:000000000000111E aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000BC8↑o
LOAD:0000000000001126 aRewinddir      db 'rewinddir',0        ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000001130 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000001136 aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000F88↑o
LOAD:000000000000113C aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000400↑o
LOAD:000000000000113C                                         ; LOAD:0000000000000E38↑o
LOAD:0000000000001142 aGetpid         db 'getpid',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000001149 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000001150 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000001150                                         ; DATA XREF: LOAD:0000000000000FA0↑o
LOAD:0000000000001168 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000001176 aFallocate      db 'fallocate',0        ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000001180 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000001180                                         ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000001197 aEndpwent       db 'endpwent',0         ; DATA XREF: LOAD:0000000000000B38↑o
LOAD:00000000000011A0 aLchown         db 'lchown',0           ; DATA XREF: LOAD:0000000000000B50↑o
LOAD:00000000000011A7 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000868↑o
LOAD:00000000000011B5 aExeclp         db 'execlp',0           ; DATA XREF: LOAD:0000000000000EC8↑o
LOAD:00000000000011BC aGetpwnam       db 'getpwnam',0         ; DATA XREF: LOAD:0000000000000988↑o
LOAD:00000000000011C5 aGetppid        db 'getppid',0          ; DATA XREF: LOAD:0000000000000E20↑o
LOAD:00000000000011CD aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000910↑o
LOAD:00000000000011D4 aRenameat       db 'renameat',0         ; DATA XREF: LOAD:0000000000000DF0↑o
LOAD:00000000000011DD aFutimens       db 'futimens',0         ; DATA XREF: LOAD:0000000000000D90↑o
LOAD:00000000000011E6 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000011ED aFreadUnlocked  db 'fread_unlocked',0   ; DATA XREF: LOAD:0000000000000520↑o
LOAD:00000000000011FC aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000001203 aUtimensat      db 'utimensat',0        ; DATA XREF: LOAD:0000000000000370↑o
LOAD:000000000000120D aRmdir          db 'rmdir',0            ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000001213 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000001224 aRead           db 'read',0             ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000001229 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000001230 aGetpagesize    db 'getpagesize',0      ; DATA XREF: LOAD:0000000000000E08↑o
LOAD:000000000000123C aEndgrent       db 'endgrent',0         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000001245 aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:0000000000000CA0↑o
LOAD:000000000000124D aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000E68↑o
LOAD:000000000000125B aGetgrnam       db 'getgrnam',0         ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000001264 aFchown         db 'fchown',0           ; DATA XREF: LOAD:0000000000000D30↑o
LOAD:0000000000001264                                         ; LOAD:0000000000000BB0↑o
LOAD:000000000000126B aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000F58↑o
LOAD:0000000000001272 aFpathconf      db 'fpathconf',0        ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000001272                                         ; LOAD:0000000000000550↑o
LOAD:000000000000127C aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000001282 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000001289 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000001289                                         ; LOAD:0000000000000808↑o
LOAD:0000000000001290 aEuidaccess     db 'euidaccess',0       ; DATA XREF: LOAD:0000000000000DA8↑o
LOAD:000000000000129B aSymlinkat      db 'symlinkat',0        ; DATA XREF: LOAD:0000000000000EB0↑o
LOAD:000000000000129B                                         ; LOAD:0000000000000C10↑o
LOAD:00000000000012A5 aStrtoul        db 'strtoul',0          ; DATA XREF: LOAD:0000000000000DC0↑o
LOAD:00000000000012AD aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000AD8↑o
LOAD:00000000000012B4 aUmask          db 'umask',0            ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:00000000000012BA aFdopendir      db 'fdopendir',0        ; DATA XREF: LOAD:0000000000000D78↑o
LOAD:00000000000012BA                                         ; LOAD:0000000000000598↑o
LOAD:00000000000012C4 aRaise          db 'raise',0            ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000012CA aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000E98↑o
LOAD:00000000000012D2 aGetgid         db 'getgid',0           ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:00000000000012D9 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000B08↑o
LOAD:00000000000012E5 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000F40↑o
LOAD:00000000000012F3 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000310↑o
LOAD:00000000000012FA aOpen2          db '__open_2',0         ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000001303 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000001018↑o
LOAD:000000000000130A aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000B68↑o
LOAD:0000000000001315 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000FE8↑o
LOAD:000000000000131C aIoctl          db 'ioctl',0            ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000001322 aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000001331 aGetuid         db 'getuid',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000001338 aReadlink       db 'readlink',0         ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000001341 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:000000000000134D aXmknod         db '__xmknod',0         ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000001356 aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000B20↑o
LOAD:000000000000135F aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000001366 aUtimes         db 'utimes',0           ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:000000000000136D aGetdelim       db '__getdelim',0       ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000001378 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000E50↑o
LOAD:0000000000001378                                         ; LOAD:00000000000004F0↑o
LOAD:000000000000137F aGettimeofday   db 'gettimeofday',0     ; DATA XREF: LOAD:0000000000000778↑o
LOAD:000000000000138C aRename         db 'rename',0           ; DATA XREF: LOAD:0000000000000D60↑o
LOAD:0000000000001393 aExplicitBzeroC db '__explicit_bzero_chk',0
LOAD:0000000000001393                                         ; DATA XREF: LOAD:0000000000000CE8↑o
LOAD:00000000000013A8 aGeteuid        db 'geteuid',0          ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:00000000000013B0 aClockGettime   db 'clock_gettime',0    ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000013BE aWaitpid        db 'waitpid',0          ; DATA XREF: LOAD:0000000000000CD0↑o
LOAD:00000000000013C6 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000013D1 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:00000000000013D8 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:00000000000013D8                                         ; DATA XREF: LOAD:0000000000000FD0↑o
LOAD:00000000000013F6 aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:0000000000000BF8↑o
LOAD:00000000000013F6                                         ; LOAD:0000000000000D00↑o
LOAD:00000000000013FD aQsort          db 'qsort',0            ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000001403 aCanonicalizeFi db 'canonicalize_file_name',0
LOAD:0000000000001403                                         ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:000000000000141A aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000EF8↑o
LOAD:0000000000001429 aSyscall        db 'syscall',0          ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000001431 aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:0000000000000C70↑o
LOAD:0000000000001439 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:000000000000143F aOpenat         db 'openat',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000001446 aFutimesat      db 'futimesat',0        ; DATA XREF: LOAD:0000000000000F28↑o
LOAD:0000000000001450 aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000001458 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000001458                                         ; LOAD:0000000000000538↑o
LOAD:0000000000001467 aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000001472 aMkfifo         db 'mkfifo',0           ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000001479 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000B98↑o
LOAD:0000000000001489 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000001490 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000001490                                         ; DATA XREF: LOAD:0000000000000898↑o
LOAD:00000000000014A2 aDirfd          db 'dirfd',0            ; DATA XREF: LOAD:0000000000000970↑o
LOAD:00000000000014A8 aStpcpy         db 'stpcpy',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:00000000000014AF aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000D18↑o
LOAD:00000000000014B6 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000718↑o
LOAD:00000000000014C1 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:00000000000014D0 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000358↑o
LOAD:00000000000014D5 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000F70↑o
LOAD:00000000000014E0 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000FB8↑o
LOAD:00000000000014F0 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000DD8↑o
LOAD:00000000000014FD aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:00000000000016E0↓o
LOAD:0000000000001507 aGlibc225       db 'GLIBC_2.25',0       ; DATA XREF: LOAD:00000000000016F0↓o
LOAD:0000000000001512 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000001700↓o
LOAD:000000000000151D aGlibc210       db 'GLIBC_2.10',0       ; DATA XREF: LOAD:0000000000001710↓o
LOAD:0000000000001528 aGlibc27        db 'GLIBC_2.7',0        ; DATA XREF: LOAD:0000000000001720↓o
LOAD:0000000000001532 aGlibc217       db 'GLIBC_2.17',0       ; DATA XREF: LOAD:0000000000001730↓o
LOAD:000000000000153D aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000001740↓o
LOAD:0000000000001547 aGlibc26        db 'GLIBC_2.6',0        ; DATA XREF: LOAD:0000000000001750↓o
LOAD:0000000000001551 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000001760↓o
LOAD:000000000000155D aGlibc225_0     db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000001770↓o
LOAD:0000000000001569 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000001569                                         ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000001585 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000001594 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000001594                                         ; DATA XREF: LOAD:0000000000000E80↑o
LOAD:00000000000015AE ; ELF GNU Symbol Version Table
LOAD:00000000000015AE                 dw 0
LOAD:00000000000015B0                 dw 2                    ; endgrent@@GLIBC_2.2.5
LOAD:00000000000015B2                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:00000000000015B4                 dw 3                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:00000000000015B6                 dw 2                    ; raise@@GLIBC_2.2.5
LOAD:00000000000015B8                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:00000000000015BA                 dw 4                    ; utimensat@@GLIBC_2.6
LOAD:00000000000015BC                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:00000000000015BE                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:00000000000015C0                 dw 2                    ; unlink@@GLIBC_2.2.5
LOAD:00000000000015C2                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:00000000000015C4                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:00000000000015C6                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:00000000000015C8                 dw 2                    ; strcpy@@GLIBC_2.2.5
LOAD:00000000000015CA                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:00000000000015CC                 dw 5                    ; __read_chk@@GLIBC_2.4
LOAD:00000000000015CE                 dw 2                    ; mkdir@@GLIBC_2.2.5
LOAD:00000000000015D0                 dw 5                    ; unlinkat@@GLIBC_2.4
LOAD:00000000000015D2                 dw 2                    ; qsort@@GLIBC_2.2.5
LOAD:00000000000015D4                 dw 2                    ; readlink@@GLIBC_2.2.5
LOAD:00000000000015D6                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:00000000000015D8                 dw 6                    ; clock_gettime@@GLIBC_2.17
LOAD:00000000000015DA                 dw 2                    ; write@@GLIBC_2.2.5
LOAD:00000000000015DC                 dw 2                    ; getpid@@GLIBC_2.2.5
LOAD:00000000000015DE                 dw 2                    ; fread_unlocked@@GLIBC_2.2.5
LOAD:00000000000015E0                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:00000000000015E2                 dw 2                    ; pathconf@@GLIBC_2.2.5
LOAD:00000000000015E4                 dw 7                    ; __open_2@@GLIBC_2.7
LOAD:00000000000015E6                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:00000000000015E8                 dw 2                    ; opendir@@GLIBC_2.2.5
LOAD:00000000000015EA                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:00000000000015EC                 dw 2                    ; stpcpy@@GLIBC_2.2.5
LOAD:00000000000015EE                 dw 2                    ; rmdir@@GLIBC_2.2.5
LOAD:00000000000015F0                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:00000000000015F2                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:00000000000015F4                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:00000000000015F6                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:00000000000015F8                 dw 5                    ; openat@@GLIBC_2.4
LOAD:00000000000015FA                 dw 2                    ; chdir@@GLIBC_2.2.5
LOAD:00000000000015FC                 dw 5                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:00000000000015FE                 dw 2                    ; getuid@@GLIBC_2.2.5
LOAD:0000000000001600                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000001602                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000001604                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000001606                 dw 5                    ; __fxstatat@@GLIBC_2.4
LOAD:0000000000001608                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:000000000000160A                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:000000000000160C                 dw 2                    ; ftruncate@@GLIBC_2.2.5
LOAD:000000000000160E                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000001610                 dw 2                    ; gettimeofday@@GLIBC_2.2.5
LOAD:0000000000001612                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000001614                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000001616                 dw 2                    ; geteuid@@GLIBC_2.2.5
LOAD:0000000000001618                 dw 2                    ; ioctl@@GLIBC_2.2.5
LOAD:000000000000161A                 dw 2                    ; canonicalize_file_name@@GLIBC_2.2.5
LOAD:000000000000161C                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:000000000000161E                 dw 2                    ; rewinddir@@GLIBC_2.2.5
LOAD:0000000000001620                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000001622                 dw 2                    ; closedir@@GLIBC_2.2.5
LOAD:0000000000001624                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000001626                 dw 2                    ; read@@GLIBC_2.2.5
LOAD:0000000000001628                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:000000000000162A                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:000000000000162C                 dw 8                    ; fallocate@@GLIBC_2.10
LOAD:000000000000162E                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000001630                 dw 2                    ; utimes@@GLIBC_2.2.5
LOAD:0000000000001632                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000001634                 dw 2                    ; __getdelim@@GLIBC_2.2.5
LOAD:0000000000001636                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000001638                 dw 2                    ; signal@@GLIBC_2.2.5
LOAD:000000000000163A                 dw 2                    ; dirfd@@GLIBC_2.2.5
LOAD:000000000000163C                 dw 2                    ; getpwnam@@GLIBC_2.2.5
LOAD:000000000000163E                 dw 2                    ; fpathconf@@GLIBC_2.2.5
LOAD:0000000000001640                 dw 2                    ; rpmatch@@GLIBC_2.2.5
LOAD:0000000000001642                 dw 2                    ; syscall@@GLIBC_2.2.5
LOAD:0000000000001644                 dw 2                    ; mkfifo@@GLIBC_2.2.5
LOAD:0000000000001646                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000001648                 dw 2                    ; umask@@GLIBC_2.2.5
LOAD:000000000000164A                 dw 9                    ; memcpy@@GLIBC_2.14
LOAD:000000000000164C                 dw 2                    ; getgrnam@@GLIBC_2.2.5
LOAD:000000000000164E                 dw 2                    ; __xmknod@@GLIBC_2.2.5
LOAD:0000000000001650                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000001652                 dw 2                    ; getgid@@GLIBC_2.2.5
LOAD:0000000000001654                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000001656                 dw 2                    ; readdir@@GLIBC_2.2.5
LOAD:0000000000001658                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:000000000000165A                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:000000000000165C                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:000000000000165E                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000001660                 dw 2                    ; endpwent@@GLIBC_2.2.5
LOAD:0000000000001662                 dw 2                    ; lchown@@GLIBC_2.2.5
LOAD:0000000000001664                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000001666                 dw 2                    ; fchdir@@GLIBC_2.2.5
LOAD:0000000000001668                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:000000000000166A                 dw 2                    ; chown@@GLIBC_2.2.5
LOAD:000000000000166C                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:000000000000166E                 dw 2                    ; stpncpy@@GLIBC_2.2.5
LOAD:0000000000001670                 dw 2                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000001672                 dw 5                    ; linkat@@GLIBC_2.4
LOAD:0000000000001674                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000001676                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000001678                 dw 2                    ; fchmod@@GLIBC_2.2.5
LOAD:000000000000167A                 dw 2                    ; setvbuf@@GLIBC_2.2.5
LOAD:000000000000167C                 dw 2                    ; chmod@@GLIBC_2.2.5
LOAD:000000000000167E                 dw 2                    ; mempcpy@@GLIBC_2.2.5
LOAD:0000000000001680                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000001682                 dw 2                    ; waitpid@@GLIBC_2.2.5
LOAD:0000000000001684                 dw 0Ah                  ; __explicit_bzero_chk@@GLIBC_2.25
LOAD:0000000000001686                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000001688                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:000000000000168A                 dw 2                    ; fchown@@GLIBC_2.2.5
LOAD:000000000000168C                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:000000000000168E                 dw 2                    ; rename@@GLIBC_2.2.5
LOAD:0000000000001690                 dw 5                    ; fdopendir@@GLIBC_2.4
LOAD:0000000000001692                 dw 4                    ; futimens@@GLIBC_2.6
LOAD:0000000000001694                 dw 2                    ; euidaccess@@GLIBC_2.2.5
LOAD:0000000000001696                 dw 2                    ; strtoul@@GLIBC_2.2.5
LOAD:0000000000001698                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:000000000000169A                 dw 5                    ; renameat@@GLIBC_2.4
LOAD:000000000000169C                 dw 2                    ; getpagesize@@GLIBC_2.2.5
LOAD:000000000000169E                 dw 2                    ; getppid@@GLIBC_2.2.5
LOAD:00000000000016A0                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:00000000000016A2                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:00000000000016A4                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:00000000000016A6                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:00000000000016A8                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:00000000000016AA                 dw 5                    ; symlinkat@@GLIBC_2.4
LOAD:00000000000016AC                 dw 2                    ; execlp@@GLIBC_2.2.5
LOAD:00000000000016AE                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:00000000000016B0                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:00000000000016B2                 dw 2                    ; fork@@GLIBC_2.2.5
LOAD:00000000000016B4                 dw 5                    ; futimesat@@GLIBC_2.4
LOAD:00000000000016B6                 dw 0Bh                  ; __ctype_b_loc@@GLIBC_2.3
LOAD:00000000000016B8                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:00000000000016BA                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:00000000000016BC                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:00000000000016BE                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:00000000000016C0                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:00000000000016C2                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:00000000000016C4                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:00000000000016C6                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:00000000000016C8                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:00000000000016CA                 dw 0
LOAD:00000000000016CC                 dw 0
LOAD:00000000000016CE                 dw 0
LOAD:00000000000016D0 ; ELF GNU Symbol Version Requirements
LOAD:00000000000016D0                 Elf64_Verneed <1, 0Ah, offset aLibcSo6 - offset byte_1030, 10h, 0> ; "libc.so.6"
LOAD:00000000000016E0                 Elf64_Vernaux <0D696913h, 0, 0Bh, offset aGlibc23 - offset byte_1030, \ ; "GLIBC_2.3"
LOAD:00000000000016E0                                10h>
LOAD:00000000000016F0                 Elf64_Vernaux <6969185h, 0, 0Ah, offset aGlibc225 - offset byte_1030, \ ; "GLIBC_2.25"
LOAD:00000000000016F0                                10h>
LOAD:0000000000001700                 Elf64_Vernaux <6969194h, 0, 9, offset aGlibc214 - offset byte_1030, \ ; "GLIBC_2.14"
LOAD:0000000000001700                                10h>
LOAD:0000000000001710                 Elf64_Vernaux <6969190h, 0, 8, offset aGlibc210 - offset byte_1030, \ ; "GLIBC_2.10"
LOAD:0000000000001710                                10h>
LOAD:0000000000001720                 Elf64_Vernaux <0D696917h, 0, 7, offset aGlibc27 - offset byte_1030, \ ; "GLIBC_2.7"
LOAD:0000000000001720                                10h>
LOAD:0000000000001730                 Elf64_Vernaux <6969197h, 0, 6, offset aGlibc217 - offset byte_1030, \ ; "GLIBC_2.17"
LOAD:0000000000001730                                10h>
LOAD:0000000000001740                 Elf64_Vernaux <0D696914h, 0, 5, offset aGlibc24 - offset byte_1030, \ ; "GLIBC_2.4"
LOAD:0000000000001740                                10h>
LOAD:0000000000001750                 Elf64_Vernaux <0D696916h, 0, 4, offset aGlibc26 - offset byte_1030, \ ; "GLIBC_2.6"
LOAD:0000000000001750                                10h>
LOAD:0000000000001760                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_1030, \ ; "GLIBC_2.3.4"
LOAD:0000000000001760                                10h>
LOAD:0000000000001770                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225_0 - offset byte_1030, \ ; "GLIBC_2.2.5"
LOAD:0000000000001770                                0>
LOAD:0000000000001780 ; ELF RELA Relocation Table
LOAD:0000000000001780                 Elf64_Rela <21C6B0h, 8, 3F30h> ; R_X86_64_RELATIVE +3F30h
LOAD:0000000000001798                 Elf64_Rela <21C6B8h, 8, 3EF0h> ; R_X86_64_RELATIVE +3EF0h
LOAD:00000000000017B0                 Elf64_Rela <21C6C0h, 8, 16604h> ; R_X86_64_RELATIVE +16604h
LOAD:00000000000017C8                 Elf64_Rela <21C6E0h, 8, 1660Bh> ; R_X86_64_RELATIVE +1660Bh
LOAD:00000000000017E0                 Elf64_Rela <21C700h, 8, 16655h> ; R_X86_64_RELATIVE +16655h
LOAD:00000000000017F8                 Elf64_Rela <21C720h, 8, 16597h> ; R_X86_64_RELATIVE +16597h
LOAD:0000000000001810                 Elf64_Rela <21C740h, 8, 16613h> ; R_X86_64_RELATIVE +16613h
LOAD:0000000000001828                 Elf64_Rela <21C760h, 8, 16619h> ; R_X86_64_RELATIVE +16619h
LOAD:0000000000001840                 Elf64_Rela <21C780h, 8, 1661Eh> ; R_X86_64_RELATIVE +1661Eh
LOAD:0000000000001858                 Elf64_Rela <21C7A0h, 8, 16632h> ; R_X86_64_RELATIVE +16632h
LOAD:0000000000001870                 Elf64_Rela <21C7C0h, 8, 16638h> ; R_X86_64_RELATIVE +16638h
LOAD:0000000000001888                 Elf64_Rela <21C7E0h, 8, 1664Ch> ; R_X86_64_RELATIVE +1664Ch
LOAD:00000000000018A0                 Elf64_Rela <21C800h, 8, 16436h> ; R_X86_64_RELATIVE +16436h
LOAD:00000000000018B8                 Elf64_Rela <21C820h, 8, 1665Dh> ; R_X86_64_RELATIVE +1665Dh
LOAD:00000000000018D0                 Elf64_Rela <21C840h, 8, 1666Bh> ; R_X86_64_RELATIVE +1666Bh
LOAD:00000000000018E8                 Elf64_Rela <21C860h, 8, 16621h> ; R_X86_64_RELATIVE +16621h
LOAD:0000000000001900                 Elf64_Rela <21C880h, 8, 16672h> ; R_X86_64_RELATIVE +16672h
LOAD:0000000000001918                 Elf64_Rela <21C8A0h, 8, 1667Ah> ; R_X86_64_RELATIVE +1667Ah
LOAD:0000000000001930                 Elf64_Rela <21C8C0h, 8, 1667Fh> ; R_X86_64_RELATIVE +1667Fh
LOAD:0000000000001948                 Elf64_Rela <21C900h, 8, 180EEh> ; R_X86_64_RELATIVE +180EEh
LOAD:0000000000001960                 Elf64_Rela <21C908h, 8, 180F3h> ; R_X86_64_RELATIVE +180F3h
LOAD:0000000000001978                 Elf64_Rela <21C910h, 8, 180F7h> ; R_X86_64_RELATIVE +180F7h
LOAD:0000000000001990                 Elf64_Rela <21C918h, 8, 180FEh> ; R_X86_64_RELATIVE +180FEh
LOAD:00000000000019A8                 Elf64_Rela <21C920h, 8, 18104h> ; R_X86_64_RELATIVE +18104h
LOAD:00000000000019C0                 Elf64_Rela <21C928h, 8, 1810Dh> ; R_X86_64_RELATIVE +1810Dh
LOAD:00000000000019D8                 Elf64_Rela <21C930h, 8, 18111h> ; R_X86_64_RELATIVE +18111h
LOAD:00000000000019F0                 Elf64_Rela <21C938h, 8, 1665Bh> ; R_X86_64_RELATIVE +1665Bh
LOAD:0000000000001A08                 Elf64_Rela <21C960h, 8, 18329h> ; R_X86_64_RELATIVE +18329h
LOAD:0000000000001A20                 Elf64_Rela <21C968h, 8, 18331h> ; R_X86_64_RELATIVE +18331h
LOAD:0000000000001A38                 Elf64_Rela <21C970h, 8, 18337h> ; R_X86_64_RELATIVE +18337h
LOAD:0000000000001A50                 Elf64_Rela <21C978h, 8, 18344h> ; R_X86_64_RELATIVE +18344h
LOAD:0000000000001A68                 Elf64_Rela <21C980h, 8, 18351h> ; R_X86_64_RELATIVE +18351h
LOAD:0000000000001A80                 Elf64_Rela <21C988h, 8, 17FE5h> ; R_X86_64_RELATIVE +17FE5h
LOAD:0000000000001A98                 Elf64_Rela <21C990h, 8, 18365h> ; R_X86_64_RELATIVE +18365h
LOAD:0000000000001AB0                 Elf64_Rela <21C998h, 8, 1834Ah> ; R_X86_64_RELATIVE +1834Ah
LOAD:0000000000001AC8                 Elf64_Rela <21C9A0h, 8, 16544h> ; R_X86_64_RELATIVE +16544h
LOAD:0000000000001AE0                 Elf64_Rela <21C9A8h, 8, 1836Dh> ; R_X86_64_RELATIVE +1836Dh
LOAD:0000000000001AF8                 Elf64_Rela <21C9C8h, 8, 0FC20h> ; R_X86_64_RELATIVE +0FC20h
LOAD:0000000000001B10                 Elf64_Rela <21C9D0h, 8, 0FC00h> ; R_X86_64_RELATIVE +0FC00h
LOAD:0000000000001B28                 Elf64_Rela <21D008h, 8, 21D008h> ; R_X86_64_RELATIVE +21D008h
LOAD:0000000000001B40                 Elf64_Rela <21D028h, 8, 16436h> ; R_X86_64_RELATIVE +16436h
LOAD:0000000000001B58                 Elf64_Rela <21D040h, 8, 180C1h> ; R_X86_64_RELATIVE +180C1h
LOAD:0000000000001B70                 Elf64_Rela <21D0A0h, 8, 21D0B0h> ; R_X86_64_RELATIVE +21D0B0h
LOAD:0000000000001B88                 Elf64_Rela <21D0B8h, 8, 21F5E0h> ; R_X86_64_RELATIVE +21F5E0h
LOAD:0000000000001BA0                 Elf64_Rela <21D0C0h, 8, 12A30h> ; R_X86_64_RELATIVE +12A30h
LOAD:0000000000001BB8                 Elf64_Rela <21CFD0h, 500000006h, 0> ; R_X86_64_GLOB_DAT free
LOAD:0000000000001BD0                 Elf64_Rela <21CFD8h, 0B00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001BE8                 Elf64_Rela <21CFE0h, 3D00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001C00                 Elf64_Rela <21CFE8h, 4C00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001C18                 Elf64_Rela <21CFF0h, 7C00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001C30                 Elf64_Rela <21CFF8h, 8100000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001C48                 Elf64_Rela <21D0E0h, 8600000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001C60                 Elf64_Rela <21D0E8h, 8500000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001C78                 Elf64_Rela <21D0F0h, 8700000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000001C90                 Elf64_Rela <21D0F8h, 8C00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001CA8                 Elf64_Rela <21D100h, 8D00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001CC0                 Elf64_Rela <21D108h, 8900000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001CD8                 Elf64_Rela <21D120h, 8B00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001CF0 ; ELF JMPREL Relocation Table
LOAD:0000000000001CF0                 Elf64_Rela <21CBE0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT endgrent
LOAD:0000000000001D08                 Elf64_Rela <21CBE8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001D20                 Elf64_Rela <21CBF0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000001D38                 Elf64_Rela <21CBF8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT raise
LOAD:0000000000001D50                 Elf64_Rela <21CC00h, 600000007h, 0> ; R_X86_64_JUMP_SLOT utimensat
LOAD:0000000000001D68                 Elf64_Rela <21CC08h, 700000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001D80                 Elf64_Rela <21CC10h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001D98                 Elf64_Rela <21CC18h, 900000007h, 0> ; R_X86_64_JUMP_SLOT unlink
LOAD:0000000000001DB0                 Elf64_Rela <21CC20h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001DC8                 Elf64_Rela <21CC28h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001DE0                 Elf64_Rela <21CC30h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:0000000000001DF8                 Elf64_Rela <21CC38h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001E10                 Elf64_Rela <21CC40h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __read_chk
LOAD:0000000000001E28                 Elf64_Rela <21CC48h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT mkdir
LOAD:0000000000001E40                 Elf64_Rela <21CC50h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT unlinkat
LOAD:0000000000001E58                 Elf64_Rela <21CC58h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT qsort
LOAD:0000000000001E70                 Elf64_Rela <21CC60h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT readlink
LOAD:0000000000001E88                 Elf64_Rela <21CC68h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001EA0                 Elf64_Rela <21CC70h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT clock_gettime
LOAD:0000000000001EB8                 Elf64_Rela <21CC78h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT write
LOAD:0000000000001ED0                 Elf64_Rela <21CC80h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT getpid
LOAD:0000000000001EE8                 Elf64_Rela <21CC88h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT fread_unlocked
LOAD:0000000000001F00                 Elf64_Rela <21CC90h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001F18                 Elf64_Rela <21CC98h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT pathconf
LOAD:0000000000001F30                 Elf64_Rela <21CCA0h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT __open_2
LOAD:0000000000001F48                 Elf64_Rela <21CCA8h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001F60                 Elf64_Rela <21CCB0h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT opendir
LOAD:0000000000001F78                 Elf64_Rela <21CCB8h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001F90                 Elf64_Rela <21CCC0h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT stpcpy
LOAD:0000000000001FA8                 Elf64_Rela <21CCC8h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT rmdir
LOAD:0000000000001FC0                 Elf64_Rela <21CCD0h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001FD8                 Elf64_Rela <21CCD8h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001FF0                 Elf64_Rela <21CCE0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000002008                 Elf64_Rela <21CCE8h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000002020                 Elf64_Rela <21CCF0h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT openat
LOAD:0000000000002038                 Elf64_Rela <21CCF8h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT chdir
LOAD:0000000000002050                 Elf64_Rela <21CD00h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000002068                 Elf64_Rela <21CD08h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT getuid
LOAD:0000000000002080                 Elf64_Rela <21CD10h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000002098                 Elf64_Rela <21CD18h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000020B0                 Elf64_Rela <21CD20h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:00000000000020C8                 Elf64_Rela <21CD28h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:00000000000020E0                 Elf64_Rela <21CD30h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000020F8                 Elf64_Rela <21CD38h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000002110                 Elf64_Rela <21CD40h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT ftruncate
LOAD:0000000000002128                 Elf64_Rela <21CD48h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000002140                 Elf64_Rela <21CD50h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT gettimeofday
LOAD:0000000000002158                 Elf64_Rela <21CD58h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000002170                 Elf64_Rela <21CD60h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000002188                 Elf64_Rela <21CD68h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT geteuid
LOAD:00000000000021A0                 Elf64_Rela <21CD70h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT ioctl
LOAD:00000000000021B8                 Elf64_Rela <21CD78h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT canonicalize_file_name
LOAD:00000000000021D0                 Elf64_Rela <21CD80h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:00000000000021E8                 Elf64_Rela <21CD88h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT rewinddir
LOAD:0000000000002200                 Elf64_Rela <21CD90h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000002218                 Elf64_Rela <21CD98h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT closedir
LOAD:0000000000002230                 Elf64_Rela <21CDA0h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:0000000000002248                 Elf64_Rela <21CDA8h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT read
LOAD:0000000000002260                 Elf64_Rela <21CDB0h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000002278                 Elf64_Rela <21CDB8h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT fallocate
LOAD:0000000000002290                 Elf64_Rela <21CDC0h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000022A8                 Elf64_Rela <21CDC8h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT utimes
LOAD:00000000000022C0                 Elf64_Rela <21CDD0h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000022D8                 Elf64_Rela <21CDD8h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT __getdelim
LOAD:00000000000022F0                 Elf64_Rela <21CDE0h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000002308                 Elf64_Rela <21CDE8h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT signal
LOAD:0000000000002320                 Elf64_Rela <21CDF0h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT dirfd
LOAD:0000000000002338                 Elf64_Rela <21CDF8h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT getpwnam
LOAD:0000000000002350                 Elf64_Rela <21CE00h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT fpathconf
LOAD:0000000000002368                 Elf64_Rela <21CE08h, 4900000007h, 0> ; R_X86_64_JUMP_SLOT rpmatch
LOAD:0000000000002380                 Elf64_Rela <21CE10h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT syscall
LOAD:0000000000002398                 Elf64_Rela <21CE18h, 4B00000007h, 0> ; R_X86_64_JUMP_SLOT mkfifo
LOAD:00000000000023B0                 Elf64_Rela <21CE20h, 4D00000007h, 0> ; R_X86_64_JUMP_SLOT umask
LOAD:00000000000023C8                 Elf64_Rela <21CE28h, 4E00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000023E0                 Elf64_Rela <21CE30h, 4F00000007h, 0> ; R_X86_64_JUMP_SLOT getgrnam
LOAD:00000000000023F8                 Elf64_Rela <21CE38h, 5000000007h, 0> ; R_X86_64_JUMP_SLOT __xmknod
LOAD:0000000000002410                 Elf64_Rela <21CE40h, 5100000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000002428                 Elf64_Rela <21CE48h, 5200000007h, 0> ; R_X86_64_JUMP_SLOT getgid
LOAD:0000000000002440                 Elf64_Rela <21CE50h, 5300000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000002458                 Elf64_Rela <21CE58h, 5400000007h, 0> ; R_X86_64_JUMP_SLOT readdir
LOAD:0000000000002470                 Elf64_Rela <21CE60h, 5500000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000002488                 Elf64_Rela <21CE68h, 5600000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000024A0                 Elf64_Rela <21CE70h, 5700000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000024B8                 Elf64_Rela <21CE78h, 5800000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:00000000000024D0                 Elf64_Rela <21CE80h, 5900000007h, 0> ; R_X86_64_JUMP_SLOT endpwent
LOAD:00000000000024E8                 Elf64_Rela <21CE88h, 5A00000007h, 0> ; R_X86_64_JUMP_SLOT lchown
LOAD:0000000000002500                 Elf64_Rela <21CE90h, 5B00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000002518                 Elf64_Rela <21CE98h, 5C00000007h, 0> ; R_X86_64_JUMP_SLOT fchdir
LOAD:0000000000002530                 Elf64_Rela <21CEA0h, 5D00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000002548                 Elf64_Rela <21CEA8h, 5E00000007h, 0> ; R_X86_64_JUMP_SLOT chown
LOAD:0000000000002560                 Elf64_Rela <21CEB0h, 5F00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000002578                 Elf64_Rela <21CEB8h, 6000000007h, 0> ; R_X86_64_JUMP_SLOT stpncpy
LOAD:0000000000002590                 Elf64_Rela <21CEC0h, 6100000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:00000000000025A8                 Elf64_Rela <21CEC8h, 6200000007h, 0> ; R_X86_64_JUMP_SLOT linkat
LOAD:00000000000025C0                 Elf64_Rela <21CED0h, 6300000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000025D8                 Elf64_Rela <21CED8h, 6400000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000025F0                 Elf64_Rela <21CEE0h, 6500000007h, 0> ; R_X86_64_JUMP_SLOT fchmod
LOAD:0000000000002608                 Elf64_Rela <21CEE8h, 6600000007h, 0> ; R_X86_64_JUMP_SLOT setvbuf
LOAD:0000000000002620                 Elf64_Rela <21CEF0h, 6700000007h, 0> ; R_X86_64_JUMP_SLOT chmod
LOAD:0000000000002638                 Elf64_Rela <21CEF8h, 6800000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:0000000000002650                 Elf64_Rela <21CF00h, 6900000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000002668                 Elf64_Rela <21CF08h, 6A00000007h, 0> ; R_X86_64_JUMP_SLOT waitpid
LOAD:0000000000002680                 Elf64_Rela <21CF10h, 6B00000007h, 0> ; R_X86_64_JUMP_SLOT __explicit_bzero_chk
LOAD:0000000000002698                 Elf64_Rela <21CF18h, 6C00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:00000000000026B0                 Elf64_Rela <21CF20h, 6D00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000026C8                 Elf64_Rela <21CF28h, 6E00000007h, 0> ; R_X86_64_JUMP_SLOT fchown
LOAD:00000000000026E0                 Elf64_Rela <21CF30h, 6F00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:00000000000026F8                 Elf64_Rela <21CF38h, 7000000007h, 0> ; R_X86_64_JUMP_SLOT rename
LOAD:0000000000002710                 Elf64_Rela <21CF40h, 7100000007h, 0> ; R_X86_64_JUMP_SLOT fdopendir
LOAD:0000000000002728                 Elf64_Rela <21CF48h, 7200000007h, 0> ; R_X86_64_JUMP_SLOT futimens
LOAD:0000000000002740                 Elf64_Rela <21CF50h, 7300000007h, 0> ; R_X86_64_JUMP_SLOT euidaccess
LOAD:0000000000002758                 Elf64_Rela <21CF58h, 7400000007h, 0> ; R_X86_64_JUMP_SLOT strtoul
LOAD:0000000000002770                 Elf64_Rela <21CF60h, 7500000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000002788                 Elf64_Rela <21CF68h, 7600000007h, 0> ; R_X86_64_JUMP_SLOT renameat
LOAD:00000000000027A0                 Elf64_Rela <21CF70h, 7700000007h, 0> ; R_X86_64_JUMP_SLOT getpagesize
LOAD:00000000000027B8                 Elf64_Rela <21CF78h, 7800000007h, 0> ; R_X86_64_JUMP_SLOT getppid
LOAD:00000000000027D0                 Elf64_Rela <21CF80h, 7900000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000027E8                 Elf64_Rela <21CF88h, 7A00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000002800                 Elf64_Rela <21CF90h, 7B00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000002818                 Elf64_Rela <21CF98h, 7D00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000002830                 Elf64_Rela <21CFA0h, 7E00000007h, 0> ; R_X86_64_JUMP_SLOT symlinkat
LOAD:0000000000002848                 Elf64_Rela <21CFA8h, 7F00000007h, 0> ; R_X86_64_JUMP_SLOT execlp
LOAD:0000000000002860                 Elf64_Rela <21CFB0h, 8000000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000002878                 Elf64_Rela <21CFB8h, 8200000007h, 0> ; R_X86_64_JUMP_SLOT fork
LOAD:0000000000002890                 Elf64_Rela <21CFC0h, 8300000007h, 0> ; R_X86_64_JUMP_SLOT futimesat
LOAD:00000000000028A8                 Elf64_Rela <21CFC8h, 8400000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000028A8 LOAD            ends
LOAD:00000000000028A8
.init:00000000000028C0 ; ===========================================================================
.init:00000000000028C0
.init:00000000000028C0 ; Segment type: Pure code
.init:00000000000028C0 ; Segment permissions: Read/Execute
.init:00000000000028C0 _init           segment dword public 'CODE' use64
.init:00000000000028C0                 assume cs:_init
.init:00000000000028C0                 ;org 28C0h
.init:00000000000028C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000028C0
.init:00000000000028C0 ; =============== S U B R O U T I N E =======================================
.init:00000000000028C0
.init:00000000000028C0
.init:00000000000028C0                 public _init_proc
.init:00000000000028C0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000028C0                 sub     rsp, 8          ; _init
.init:00000000000028C4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000028CB                 test    rax, rax
.init:00000000000028CE                 jz      short loc_28D2
.init:00000000000028D0                 call    rax ; __gmon_start__
.init:00000000000028D2
.init:00000000000028D2 loc_28D2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000028D2                 add     rsp, 8
.init:00000000000028D6                 retn
.init:00000000000028D6 _init_proc      endp
.init:00000000000028D6
.init:00000000000028D6 _init           ends
.init:00000000000028D6
LOAD:00000000000028D7 ; ===========================================================================
LOAD:00000000000028D7
LOAD:00000000000028D7 ; Segment type: Pure code
LOAD:00000000000028D7 ; Segment permissions: Read/Execute
LOAD:00000000000028D7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000028D7                 assume cs:LOAD
LOAD:00000000000028D7                 ;org 28D7h
LOAD:00000000000028D7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000028D7                 align 20h
LOAD:00000000000028D7 LOAD            ends
LOAD:00000000000028D7
.plt:00000000000028E0 ; ===========================================================================
.plt:00000000000028E0
.plt:00000000000028E0 ; Segment type: Pure code
.plt:00000000000028E0 ; Segment permissions: Read/Execute
.plt:00000000000028E0 _plt            segment para public 'CODE' use64
.plt:00000000000028E0                 assume cs:_plt
.plt:00000000000028E0                 ;org 28E0h
.plt:00000000000028E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000028E0
.plt:00000000000028E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028E0
.plt:00000000000028E0
.plt:00000000000028E0 sub_28E0        proc near               ; CODE XREF: .plt:00000000000028FB↓j
.plt:00000000000028E0                                         ; .plt:000000000000290B↓j ...
.plt:00000000000028E0 ; __unwind {
.plt:00000000000028E0                 push    cs:qword_21CBD0
.plt:00000000000028E6                 jmp     cs:qword_21CBD8
.plt:00000000000028E6 sub_28E0        endp
.plt:00000000000028E6
.plt:00000000000028E6 ; ---------------------------------------------------------------------------
.plt:00000000000028EC                 align 10h
.plt:00000000000028F0
.plt:00000000000028F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028F0
.plt:00000000000028F0 ; Attributes: thunk
.plt:00000000000028F0
.plt:00000000000028F0 ; void endgrent(void)
.plt:00000000000028F0 _endgrent       proc near               ; CODE XREF: main+63C↓p
.plt:00000000000028F0                 jmp     cs:endgrent_ptr
.plt:00000000000028F0 _endgrent       endp
.plt:00000000000028F0
.plt:00000000000028F6 ; ---------------------------------------------------------------------------
.plt:00000000000028F6                 push    0
.plt:00000000000028FB                 jmp     sub_28E0
.plt:0000000000002900
.plt:0000000000002900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002900
.plt:0000000000002900 ; Attributes: thunk
.plt:0000000000002900
.plt:0000000000002900 ; char *getenv(const char *name)
.plt:0000000000002900 _getenv         proc near               ; CODE XREF: set_simple_backup_suffix+37↓p
.plt:0000000000002900                                         ; xget_version+15↓p
.plt:0000000000002900                 jmp     cs:getenv_ptr
.plt:0000000000002900 _getenv         endp
.plt:0000000000002900
.plt:0000000000002906 ; ---------------------------------------------------------------------------
.plt:0000000000002906                 push    1
.plt:000000000000290B                 jmp     sub_28E0
.plt:0000000000002910
.plt:0000000000002910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002910
.plt:0000000000002910 ; Attributes: thunk
.plt:0000000000002910
.plt:0000000000002910 ___snprintf_chk proc near               ; CODE XREF: vasnprintf+5B8↓p
.plt:0000000000002910                                         ; vasnprintf+6F0↓p ...
.plt:0000000000002910                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000002910 ___snprintf_chk endp
.plt:0000000000002910
.plt:0000000000002916 ; ---------------------------------------------------------------------------
.plt:0000000000002916                 push    2
.plt:000000000000291B                 jmp     sub_28E0
.plt:0000000000002920
.plt:0000000000002920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002920
.plt:0000000000002920 ; Attributes: thunk
.plt:0000000000002920
.plt:0000000000002920 ; int raise(int sig)
.plt:0000000000002920 _raise          proc near               ; CODE XREF: savewd_restore+BC↓p
.plt:0000000000002920                 jmp     cs:raise_ptr
.plt:0000000000002920 _raise          endp
.plt:0000000000002920
.plt:0000000000002926 ; ---------------------------------------------------------------------------
.plt:0000000000002926                 push    3
.plt:000000000000292B                 jmp     sub_28E0
.plt:0000000000002930
.plt:0000000000002930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002930
.plt:0000000000002930 ; Attributes: thunk
.plt:0000000000002930
.plt:0000000000002930 ; int utimensat(int fd, const char *path, const struct timespec times[2], int flags)
.plt:0000000000002930 _utimensat      proc near               ; CODE XREF: utimecmpat+4F9↓p
.plt:0000000000002930                                         ; utimecmpat+74F↓p ...
.plt:0000000000002930                 jmp     cs:utimensat_ptr
.plt:0000000000002930 _utimensat      endp
.plt:0000000000002930
.plt:0000000000002936 ; ---------------------------------------------------------------------------
.plt:0000000000002936                 push    4
.plt:000000000000293B                 jmp     sub_28E0
.plt:0000000000002940
.plt:0000000000002940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002940
.plt:0000000000002940 ; Attributes: noreturn thunk
.plt:0000000000002940
.plt:0000000000002940 ; void __noreturn abort(void)
.plt:0000000000002940 _abort          proc near               ; CODE XREF: safe_hasher:loc_BA8D↓p
.plt:0000000000002940                                         ; hash_get_first+3C↓p ...
.plt:0000000000002940                 jmp     cs:abort_ptr
.plt:0000000000002940 _abort          endp
.plt:0000000000002940
.plt:0000000000002946 ; ---------------------------------------------------------------------------
.plt:0000000000002946                 push    5
.plt:000000000000294B                 jmp     sub_28E0
.plt:0000000000002950
.plt:0000000000002950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002950
.plt:0000000000002950 ; Attributes: thunk
.plt:0000000000002950
.plt:0000000000002950 ; int *__errno_location(void)
.plt:0000000000002950 ___errno_location proc near             ; CODE XREF: restore_default_fscreatecon_or_die+1↓p
.plt:0000000000002950                                         ; main+796↓p ...
.plt:0000000000002950                 jmp     cs:__errno_location_ptr
.plt:0000000000002950 ___errno_location endp
.plt:0000000000002950
.plt:0000000000002956 ; ---------------------------------------------------------------------------
.plt:0000000000002956                 push    6
.plt:000000000000295B                 jmp     sub_28E0
.plt:0000000000002960
.plt:0000000000002960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002960
.plt:0000000000002960 ; Attributes: thunk
.plt:0000000000002960
.plt:0000000000002960 ; int unlink(const char *name)
.plt:0000000000002960 _unlink         proc near               ; CODE XREF: install_file_in_file+4EC↓p
.plt:0000000000002960                                         ; copy_internal+9C1↓p ...
.plt:0000000000002960                 jmp     cs:unlink_ptr
.plt:0000000000002960 _unlink         endp
.plt:0000000000002960
.plt:0000000000002966 ; ---------------------------------------------------------------------------
.plt:0000000000002966                 push    7
.plt:000000000000296B                 jmp     sub_28E0
.plt:0000000000002970
.plt:0000000000002970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002970
.plt:0000000000002970 ; Attributes: thunk
.plt:0000000000002970
.plt:0000000000002970 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000002970 _strncmp        proc near               ; CODE XREF: usage+30C↓p
.plt:0000000000002970                                         ; usage+3CD↓p ...
.plt:0000000000002970                 jmp     cs:strncmp_ptr
.plt:0000000000002970 _strncmp        endp
.plt:0000000000002970
.plt:0000000000002976 ; ---------------------------------------------------------------------------
.plt:0000000000002976                 push    8
.plt:000000000000297B                 jmp     sub_28E0
.plt:0000000000002980
.plt:0000000000002980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002980
.plt:0000000000002980 ; Attributes: noreturn thunk
.plt:0000000000002980
.plt:0000000000002980 ; void __noreturn _exit(int status)
.plt:0000000000002980 __exit          proc near               ; CODE XREF: close_stdin+AE↓p
.plt:0000000000002980                                         ; close_stdout+88↓p ...
.plt:0000000000002980                 jmp     cs:_exit_ptr
.plt:0000000000002980 __exit          endp
.plt:0000000000002980
.plt:0000000000002986 ; ---------------------------------------------------------------------------
.plt:0000000000002986                 push    9
.plt:000000000000298B                 jmp     sub_28E0
.plt:0000000000002990
.plt:0000000000002990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002990
.plt:0000000000002990 ; Attributes: thunk
.plt:0000000000002990
.plt:0000000000002990 ; char *strcpy(char *dest, const char *src)
.plt:0000000000002990 _strcpy         proc near               ; CODE XREF: copy_internal+28AD↓p
.plt:0000000000002990                 jmp     cs:strcpy_ptr
.plt:0000000000002990 _strcpy         endp
.plt:0000000000002990
.plt:0000000000002996 ; ---------------------------------------------------------------------------
.plt:0000000000002996                 push    0Ah
.plt:000000000000299B                 jmp     sub_28E0
.plt:00000000000029A0
.plt:00000000000029A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029A0
.plt:00000000000029A0 ; Attributes: thunk
.plt:00000000000029A0
.plt:00000000000029A0 ; size_t __fpending(FILE *fp)
.plt:00000000000029A0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000029A0                 jmp     cs:__fpending_ptr
.plt:00000000000029A0 ___fpending     endp
.plt:00000000000029A0
.plt:00000000000029A6 ; ---------------------------------------------------------------------------
.plt:00000000000029A6                 push    0Bh
.plt:00000000000029AB                 jmp     sub_28E0
.plt:00000000000029B0
.plt:00000000000029B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029B0
.plt:00000000000029B0 ; Attributes: thunk
.plt:00000000000029B0
.plt:00000000000029B0 ___read_chk     proc near               ; CODE XREF: randread_new+118↓p
.plt:00000000000029B0                 jmp     cs:__read_chk_ptr
.plt:00000000000029B0 ___read_chk     endp
.plt:00000000000029B0
.plt:00000000000029B6 ; ---------------------------------------------------------------------------
.plt:00000000000029B6                 push    0Ch
.plt:00000000000029BB                 jmp     sub_28E0
.plt:00000000000029C0
.plt:00000000000029C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029C0
.plt:00000000000029C0 ; Attributes: thunk
.plt:00000000000029C0
.plt:00000000000029C0 ; int mkdir(const char *path, __mode_t mode)
.plt:00000000000029C0 _mkdir          proc near               ; CODE XREF: make_ancestor+2A↓p
.plt:00000000000029C0                                         ; copy_internal+14B6↓p ...
.plt:00000000000029C0                 jmp     cs:mkdir_ptr
.plt:00000000000029C0 _mkdir          endp
.plt:00000000000029C0
.plt:00000000000029C6 ; ---------------------------------------------------------------------------
.plt:00000000000029C6                 push    0Dh
.plt:00000000000029CB                 jmp     sub_28E0
.plt:00000000000029D0
.plt:00000000000029D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029D0
.plt:00000000000029D0 ; Attributes: thunk
.plt:00000000000029D0
.plt:00000000000029D0 ; int unlinkat(int fd, const char *name, int flag)
.plt:00000000000029D0 _unlinkat       proc near               ; CODE XREF: force_linkat+142↓p
.plt:00000000000029D0                                         ; force_symlinkat+131↓p
.plt:00000000000029D0                 jmp     cs:unlinkat_ptr
.plt:00000000000029D0 _unlinkat       endp
.plt:00000000000029D0
.plt:00000000000029D6 ; ---------------------------------------------------------------------------
.plt:00000000000029D6                 push    0Eh
.plt:00000000000029DB                 jmp     sub_28E0
.plt:00000000000029E0
.plt:00000000000029E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029E0
.plt:00000000000029E0 ; Attributes: thunk
.plt:00000000000029E0
.plt:00000000000029E0 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
.plt:00000000000029E0 _qsort          proc near               ; CODE XREF: streamsavedir+18F↓p
.plt:00000000000029E0                 jmp     cs:qsort_ptr
.plt:00000000000029E0 _qsort          endp
.plt:00000000000029E0
.plt:00000000000029E6 ; ---------------------------------------------------------------------------
.plt:00000000000029E6                 push    0Fh
.plt:00000000000029EB                 jmp     sub_28E0
.plt:00000000000029F0
.plt:00000000000029F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029F0
.plt:00000000000029F0 ; Attributes: thunk
.plt:00000000000029F0
.plt:00000000000029F0 ; ssize_t readlink(const char *path, char *buf, size_t len)
.plt:00000000000029F0 _readlink       proc near               ; CODE XREF: areadlink_with_size+59↓p
.plt:00000000000029F0                 jmp     cs:readlink_ptr
.plt:00000000000029F0 _readlink       endp
.plt:00000000000029F0
.plt:00000000000029F6 ; ---------------------------------------------------------------------------
.plt:00000000000029F6                 push    10h
.plt:00000000000029FB                 jmp     sub_28E0
.plt:0000000000002A00
.plt:0000000000002A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A00
.plt:0000000000002A00 ; Attributes: thunk
.plt:0000000000002A00
.plt:0000000000002A00 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000002A00 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000002A00                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000002A00                 jmp     cs:fcntl_ptr
.plt:0000000000002A00 _fcntl          endp
.plt:0000000000002A00
.plt:0000000000002A06 ; ---------------------------------------------------------------------------
.plt:0000000000002A06                 push    11h
.plt:0000000000002A0B                 jmp     sub_28E0
.plt:0000000000002A10
.plt:0000000000002A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A10
.plt:0000000000002A10 ; Attributes: thunk
.plt:0000000000002A10
.plt:0000000000002A10 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
.plt:0000000000002A10 _clock_gettime  proc near               ; CODE XREF: gettime+5↓j
.plt:0000000000002A10                                         ; current_timespec+19↓p
.plt:0000000000002A10                 jmp     cs:clock_gettime_ptr
.plt:0000000000002A10 _clock_gettime  endp
.plt:0000000000002A10
.plt:0000000000002A16 ; ---------------------------------------------------------------------------
.plt:0000000000002A16                 push    12h
.plt:0000000000002A1B                 jmp     sub_28E0
.plt:0000000000002A20
.plt:0000000000002A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A20
.plt:0000000000002A20 ; Attributes: thunk
.plt:0000000000002A20
.plt:0000000000002A20 ; ssize_t write(int fd, const void *buf, size_t n)
.plt:0000000000002A20 _write          proc near               ; CODE XREF: safe_write+21↓p
.plt:0000000000002A20                 jmp     cs:write_ptr
.plt:0000000000002A20 _write          endp
.plt:0000000000002A20
.plt:0000000000002A26 ; ---------------------------------------------------------------------------
.plt:0000000000002A26                 push    13h
.plt:0000000000002A2B                 jmp     sub_28E0
.plt:0000000000002A30
.plt:0000000000002A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A30
.plt:0000000000002A30 ; Attributes: thunk
.plt:0000000000002A30
.plt:0000000000002A30 ; __pid_t getpid(void)
.plt:0000000000002A30 _getpid         proc near               ; CODE XREF: randread_new+197↓p
.plt:0000000000002A30                                         ; randread_new+2C2↓p
.plt:0000000000002A30                 jmp     cs:getpid_ptr
.plt:0000000000002A30 _getpid         endp
.plt:0000000000002A30
.plt:0000000000002A36 ; ---------------------------------------------------------------------------
.plt:0000000000002A36                 push    14h
.plt:0000000000002A3B                 jmp     sub_28E0
.plt:0000000000002A40
.plt:0000000000002A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A40
.plt:0000000000002A40 ; Attributes: thunk
.plt:0000000000002A40
.plt:0000000000002A40 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000002A40 _fread_unlocked proc near               ; CODE XREF: randread+61↓p
.plt:0000000000002A40                 jmp     cs:fread_unlocked_ptr
.plt:0000000000002A40 _fread_unlocked endp
.plt:0000000000002A40
.plt:0000000000002A46 ; ---------------------------------------------------------------------------
.plt:0000000000002A46                 push    15h
.plt:0000000000002A4B                 jmp     sub_28E0
.plt:0000000000002A50
.plt:0000000000002A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A50
.plt:0000000000002A50 ; Attributes: thunk
.plt:0000000000002A50
.plt:0000000000002A50 ; char *textdomain(const char *domainname)
.plt:0000000000002A50 _textdomain     proc near               ; CODE XREF: main+76↓p
.plt:0000000000002A50                 jmp     cs:textdomain_ptr
.plt:0000000000002A50 _textdomain     endp
.plt:0000000000002A50
.plt:0000000000002A56 ; ---------------------------------------------------------------------------
.plt:0000000000002A56                 push    16h
.plt:0000000000002A5B                 jmp     sub_28E0
.plt:0000000000002A60
.plt:0000000000002A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A60
.plt:0000000000002A60 ; Attributes: thunk
.plt:0000000000002A60
.plt:0000000000002A60 ; __int64 pathconf(const char *path, int name)
.plt:0000000000002A60 _pathconf       proc near               ; CODE XREF: backupfile_internal+5AF↓p
.plt:0000000000002A60                 jmp     cs:pathconf_ptr
.plt:0000000000002A60 _pathconf       endp
.plt:0000000000002A60
.plt:0000000000002A66 ; ---------------------------------------------------------------------------
.plt:0000000000002A66                 push    17h
.plt:0000000000002A6B                 jmp     sub_28E0
.plt:0000000000002A70
.plt:0000000000002A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A70
.plt:0000000000002A70 ; Attributes: thunk
.plt:0000000000002A70
.plt:0000000000002A70 ___open_2       proc near               ; CODE XREF: savewd_chdir+31↓p
.plt:0000000000002A70                                         ; savewd_chdir+15A↓p
.plt:0000000000002A70                 jmp     cs:__open_2_ptr
.plt:0000000000002A70 ___open_2       endp
.plt:0000000000002A70
.plt:0000000000002A76 ; ---------------------------------------------------------------------------
.plt:0000000000002A76                 push    18h
.plt:0000000000002A7B                 jmp     sub_28E0
.plt:0000000000002A80
.plt:0000000000002A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A80
.plt:0000000000002A80 ; Attributes: thunk
.plt:0000000000002A80
.plt:0000000000002A80 ; int fclose(FILE *stream)
.plt:0000000000002A80 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000002A80                                         ; rpl_fclose+6B↓j
.plt:0000000000002A80                 jmp     cs:fclose_ptr
.plt:0000000000002A80 _fclose         endp
.plt:0000000000002A80
.plt:0000000000002A86 ; ---------------------------------------------------------------------------
.plt:0000000000002A86                 push    19h
.plt:0000000000002A8B                 jmp     sub_28E0
.plt:0000000000002A90
.plt:0000000000002A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A90
.plt:0000000000002A90 ; Attributes: thunk
.plt:0000000000002A90
.plt:0000000000002A90 ; DIR *opendir(const char *name)
.plt:0000000000002A90 _opendir        proc near               ; CODE XREF: opendir_safer+8↓p
.plt:0000000000002A90                 jmp     cs:opendir_ptr
.plt:0000000000002A90 _opendir        endp
.plt:0000000000002A90
.plt:0000000000002A96 ; ---------------------------------------------------------------------------
.plt:0000000000002A96                 push    1Ah
.plt:0000000000002A9B                 jmp     sub_28E0
.plt:0000000000002AA0
.plt:0000000000002AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AA0
.plt:0000000000002AA0 ; Attributes: thunk
.plt:0000000000002AA0
.plt:0000000000002AA0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000002AA0 _bindtextdomain proc near               ; CODE XREF: main+6A↓p
.plt:0000000000002AA0                 jmp     cs:bindtextdomain_ptr
.plt:0000000000002AA0 _bindtextdomain endp
.plt:0000000000002AA0
.plt:0000000000002AA6 ; ---------------------------------------------------------------------------
.plt:0000000000002AA6                 push    1Bh
.plt:0000000000002AAB                 jmp     sub_28E0
.plt:0000000000002AB0
.plt:0000000000002AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AB0
.plt:0000000000002AB0 ; Attributes: thunk
.plt:0000000000002AB0
.plt:0000000000002AB0 ; char *stpcpy(char *dest, const char *src)
.plt:0000000000002AB0 _stpcpy         proc near               ; CODE XREF: streamsavedir+1B8↓p
.plt:0000000000002AB0                 jmp     cs:stpcpy_ptr
.plt:0000000000002AB0 _stpcpy         endp
.plt:0000000000002AB0
.plt:0000000000002AB6 ; ---------------------------------------------------------------------------
.plt:0000000000002AB6                 push    1Ch
.plt:0000000000002ABB                 jmp     sub_28E0
.plt:0000000000002AC0
.plt:0000000000002AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AC0
.plt:0000000000002AC0 ; Attributes: thunk
.plt:0000000000002AC0
.plt:0000000000002AC0 ; int rmdir(const char *path)
.plt:0000000000002AC0 _rmdir          proc near               ; CODE XREF: copy_internal:loc_7640↓p
.plt:0000000000002AC0                 jmp     cs:rmdir_ptr
.plt:0000000000002AC0 _rmdir          endp
.plt:0000000000002AC0
.plt:0000000000002AC6 ; ---------------------------------------------------------------------------
.plt:0000000000002AC6                 push    1Dh
.plt:0000000000002ACB                 jmp     sub_28E0
.plt:0000000000002AD0
.plt:0000000000002AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AD0
.plt:0000000000002AD0 ; Attributes: thunk
.plt:0000000000002AD0
.plt:0000000000002AD0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000002AD0 _dcgettext      proc near               ; CODE XREF: restore_default_fscreatecon_or_die+1D↓p
.plt:0000000000002AD0                                         ; main+44C↓p ...
.plt:0000000000002AD0                 jmp     cs:dcgettext_ptr
.plt:0000000000002AD0 _dcgettext      endp
.plt:0000000000002AD0
.plt:0000000000002AD6 ; ---------------------------------------------------------------------------
.plt:0000000000002AD6                 push    1Eh
.plt:0000000000002ADB                 jmp     sub_28E0
.plt:0000000000002AE0
.plt:0000000000002AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AE0
.plt:0000000000002AE0 ; Attributes: thunk
.plt:0000000000002AE0
.plt:0000000000002AE0 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000002AE0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000002AE0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000002AE0 ___ctype_get_mb_cur_max endp
.plt:0000000000002AE0
.plt:0000000000002AE6 ; ---------------------------------------------------------------------------
.plt:0000000000002AE6                 push    1Fh
.plt:0000000000002AEB                 jmp     sub_28E0
.plt:0000000000002AF0
.plt:0000000000002AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AF0
.plt:0000000000002AF0 ; Attributes: thunk
.plt:0000000000002AF0
.plt:0000000000002AF0 ; size_t strlen(const char *s)
.plt:0000000000002AF0 _strlen         proc near               ; CODE XREF: copy_internal+D6D↓p
.plt:0000000000002AF0                                         ; copy_internal+D8F↓p ...
.plt:0000000000002AF0                 jmp     cs:strlen_ptr
.plt:0000000000002AF0 _strlen         endp
.plt:0000000000002AF0
.plt:0000000000002AF6 ; ---------------------------------------------------------------------------
.plt:0000000000002AF6                 push    20h ; ' '
.plt:0000000000002AFB                 jmp     sub_28E0
.plt:0000000000002B00
.plt:0000000000002B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B00
.plt:0000000000002B00 ; Attributes: thunk
.plt:0000000000002B00
.plt:0000000000002B00 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000002B00 ___lxstat       proc near               ; CODE XREF: install_file_in_file+1EB↓p
.plt:0000000000002B00                                         ; install_file_in_file+238↓p ...
.plt:0000000000002B00                 jmp     cs:__lxstat_ptr
.plt:0000000000002B00 ___lxstat       endp
.plt:0000000000002B00
.plt:0000000000002B06 ; ---------------------------------------------------------------------------
.plt:0000000000002B06                 push    21h ; '!'
.plt:0000000000002B0B                 jmp     sub_28E0
.plt:0000000000002B10
.plt:0000000000002B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B10
.plt:0000000000002B10 ; Attributes: thunk
.plt:0000000000002B10
.plt:0000000000002B10 ; int openat(int fd, const char *file, int oflag, ...)
.plt:0000000000002B10 _openat         proc near               ; CODE XREF: openat_safer+22↓p
.plt:0000000000002B10                 jmp     cs:openat_ptr
.plt:0000000000002B10 _openat         endp
.plt:0000000000002B10
.plt:0000000000002B16 ; ---------------------------------------------------------------------------
.plt:0000000000002B16                 push    22h ; '"'
.plt:0000000000002B1B                 jmp     sub_28E0
.plt:0000000000002B20
.plt:0000000000002B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B20
.plt:0000000000002B20 ; Attributes: thunk
.plt:0000000000002B20
.plt:0000000000002B20 ; int chdir(const char *path)
.plt:0000000000002B20 _chdir          proc near               ; CODE XREF: savewd_chdir+11B↓p
.plt:0000000000002B20                 jmp     cs:chdir_ptr
.plt:0000000000002B20 _chdir          endp
.plt:0000000000002B20
.plt:0000000000002B26 ; ---------------------------------------------------------------------------
.plt:0000000000002B26                 push    23h ; '#'
.plt:0000000000002B2B                 jmp     sub_28E0
.plt:0000000000002B30
.plt:0000000000002B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B30
.plt:0000000000002B30 ; Attributes: noreturn thunk
.plt:0000000000002B30
.plt:0000000000002B30 ___stack_chk_fail proc near             ; CODE XREF: main:loc_3E04↓p
.plt:0000000000002B30                                         ; mkancesdirs_safe_wd:loc_40CA↓p ...
.plt:0000000000002B30                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000002B30 ___stack_chk_fail endp
.plt:0000000000002B30
.plt:0000000000002B36 ; ---------------------------------------------------------------------------
.plt:0000000000002B36                 push    24h ; '$'
.plt:0000000000002B3B                 jmp     sub_28E0
.plt:0000000000002B40
.plt:0000000000002B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B40
.plt:0000000000002B40 ; Attributes: thunk
.plt:0000000000002B40
.plt:0000000000002B40 ; __uid_t getuid(void)
.plt:0000000000002B40 _getuid         proc near               ; CODE XREF: install_file_in_file+68C↓p
.plt:0000000000002B40                                         ; randread_new+1C4↓p
.plt:0000000000002B40                 jmp     cs:getuid_ptr
.plt:0000000000002B40 _getuid         endp
.plt:0000000000002B40
.plt:0000000000002B46 ; ---------------------------------------------------------------------------
.plt:0000000000002B46                 push    25h ; '%'
.plt:0000000000002B4B                 jmp     sub_28E0
.plt:0000000000002B50
.plt:0000000000002B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B50
.plt:0000000000002B50 ; Attributes: thunk
.plt:0000000000002B50
.plt:0000000000002B50 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000002B50 _getopt_long    proc near               ; CODE XREF: main+1D2↓p
.plt:0000000000002B50                 jmp     cs:getopt_long_ptr
.plt:0000000000002B50 _getopt_long    endp
.plt:0000000000002B50
.plt:0000000000002B56 ; ---------------------------------------------------------------------------
.plt:0000000000002B56                 push    26h ; '&'
.plt:0000000000002B5B                 jmp     sub_28E0
.plt:0000000000002B60
.plt:0000000000002B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B60
.plt:0000000000002B60 ; Attributes: thunk
.plt:0000000000002B60
.plt:0000000000002B60 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000002B60 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000002B60                 jmp     cs:mbrtowc_ptr
.plt:0000000000002B60 _mbrtowc        endp
.plt:0000000000002B60
.plt:0000000000002B66 ; ---------------------------------------------------------------------------
.plt:0000000000002B66                 push    27h ; '''
.plt:0000000000002B6B                 jmp     sub_28E0
.plt:0000000000002B70
.plt:0000000000002B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B70
.plt:0000000000002B70 ; Attributes: thunk
.plt:0000000000002B70
.plt:0000000000002B70 ; char *strchr(const char *s, int c)
.plt:0000000000002B70 _strchr         proc near               ; CODE XREF: xstrtoul+123↓p
.plt:0000000000002B70                                         ; xstrtoul+143↓p ...
.plt:0000000000002B70                 jmp     cs:strchr_ptr
.plt:0000000000002B70 _strchr         endp
.plt:0000000000002B70
.plt:0000000000002B76 ; ---------------------------------------------------------------------------
.plt:0000000000002B76                 push    28h ; '('
.plt:0000000000002B7B                 jmp     sub_28E0
.plt:0000000000002B80
.plt:0000000000002B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B80
.plt:0000000000002B80 ; Attributes: thunk
.plt:0000000000002B80
.plt:0000000000002B80 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:0000000000002B80 ___fxstatat     proc near               ; CODE XREF: copy_internal+1E3↓p
.plt:0000000000002B80                                         ; renameat2+13C↓p ...
.plt:0000000000002B80                 jmp     cs:__fxstatat_ptr
.plt:0000000000002B80 ___fxstatat     endp
.plt:0000000000002B80
.plt:0000000000002B86 ; ---------------------------------------------------------------------------
.plt:0000000000002B86                 push    29h ; ')'
.plt:0000000000002B8B                 jmp     sub_28E0
.plt:0000000000002B90
.plt:0000000000002B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B90
.plt:0000000000002B90 ; Attributes: thunk
.plt:0000000000002B90
.plt:0000000000002B90 ; int __overflow(_IO_FILE *, int)
.plt:0000000000002B90 ___overflow     proc near               ; CODE XREF: prog_fprintf+108↓p
.plt:0000000000002B90                                         ; emit_verbose+B1↓j ...
.plt:0000000000002B90                 jmp     cs:__overflow_ptr
.plt:0000000000002B90 ___overflow     endp
.plt:0000000000002B90
.plt:0000000000002B96 ; ---------------------------------------------------------------------------
.plt:0000000000002B96                 push    2Ah ; '*'
.plt:0000000000002B9B                 jmp     sub_28E0
.plt:0000000000002BA0
.plt:0000000000002BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BA0
.plt:0000000000002BA0 ; Attributes: thunk
.plt:0000000000002BA0
.plt:0000000000002BA0 ; char *strrchr(const char *s, int c)
.plt:0000000000002BA0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000002BA0                 jmp     cs:strrchr_ptr
.plt:0000000000002BA0 _strrchr        endp
.plt:0000000000002BA0
.plt:0000000000002BA6 ; ---------------------------------------------------------------------------
.plt:0000000000002BA6                 push    2Bh ; '+'
.plt:0000000000002BAB                 jmp     sub_28E0
.plt:0000000000002BB0
.plt:0000000000002BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BB0
.plt:0000000000002BB0 ; Attributes: thunk
.plt:0000000000002BB0
.plt:0000000000002BB0 ; int ftruncate(int fd, __off_t length)
.plt:0000000000002BB0 _ftruncate      proc near               ; CODE XREF: copy_internal+3B6D↓p
.plt:0000000000002BB0                                         ; copy_internal+3C42↓p
.plt:0000000000002BB0                 jmp     cs:ftruncate_ptr
.plt:0000000000002BB0 _ftruncate      endp
.plt:0000000000002BB0
.plt:0000000000002BB6 ; ---------------------------------------------------------------------------
.plt:0000000000002BB6                 push    2Ch ; ','
.plt:0000000000002BBB                 jmp     sub_28E0
.plt:0000000000002BC0
.plt:0000000000002BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BC0
.plt:0000000000002BC0 ; Attributes: thunk
.plt:0000000000002BC0
.plt:0000000000002BC0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000002BC0 _lseek          proc near               ; CODE XREF: create_hole+1D↓p
.plt:0000000000002BC0                                         ; copy_internal+322B↓p ...
.plt:0000000000002BC0                 jmp     cs:lseek_ptr
.plt:0000000000002BC0 _lseek          endp
.plt:0000000000002BC0
.plt:0000000000002BC6 ; ---------------------------------------------------------------------------
.plt:0000000000002BC6                 push    2Dh ; '-'
.plt:0000000000002BCB                 jmp     sub_28E0
.plt:0000000000002BD0
.plt:0000000000002BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BD0
.plt:0000000000002BD0 ; Attributes: thunk
.plt:0000000000002BD0
.plt:0000000000002BD0 ; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
.plt:0000000000002BD0 _gettimeofday   proc near               ; CODE XREF: randread_new+188↓p
.plt:0000000000002BD0                                         ; randread_new+278↓p
.plt:0000000000002BD0                 jmp     cs:gettimeofday_ptr
.plt:0000000000002BD0 _gettimeofday   endp
.plt:0000000000002BD0
.plt:0000000000002BD6 ; ---------------------------------------------------------------------------
.plt:0000000000002BD6                 push    2Eh ; '.'
.plt:0000000000002BDB                 jmp     sub_28E0
.plt:0000000000002BE0
.plt:0000000000002BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BE0
.plt:0000000000002BE0 ; Attributes: noreturn thunk
.plt:0000000000002BE0
.plt:0000000000002BE0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000002BE0 ___assert_fail  proc near               ; CODE XREF: copy+C0↓p
.plt:0000000000002BE0                                         ; copy+DF↓p ...
.plt:0000000000002BE0                 jmp     cs:__assert_fail_ptr
.plt:0000000000002BE0 ___assert_fail  endp
.plt:0000000000002BE0
.plt:0000000000002BE6 ; ---------------------------------------------------------------------------
.plt:0000000000002BE6                 push    2Fh ; '/'
.plt:0000000000002BEB                 jmp     sub_28E0
.plt:0000000000002BF0
.plt:0000000000002BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BF0
.plt:0000000000002BF0 ; Attributes: thunk
.plt:0000000000002BF0
.plt:0000000000002BF0 ; void *memset(void *s, int c, size_t n)
.plt:0000000000002BF0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000002BF0                                         ; xzalloc+12↓j
.plt:0000000000002BF0                 jmp     cs:memset_ptr
.plt:0000000000002BF0 _memset         endp
.plt:0000000000002BF0
.plt:0000000000002BF6 ; ---------------------------------------------------------------------------
.plt:0000000000002BF6                 push    30h ; '0'
.plt:0000000000002BFB                 jmp     sub_28E0
.plt:0000000000002C00
.plt:0000000000002C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C00
.plt:0000000000002C00 ; Attributes: thunk
.plt:0000000000002C00
.plt:0000000000002C00 ; __uid_t geteuid(void)
.plt:0000000000002C00 _geteuid        proc near               ; CODE XREF: cp_options_default+1B↓p
.plt:0000000000002C00                                         ; copy_internal:loc_9C7E↓p ...
.plt:0000000000002C00                 jmp     cs:geteuid_ptr
.plt:0000000000002C00 _geteuid        endp
.plt:0000000000002C00
.plt:0000000000002C06 ; ---------------------------------------------------------------------------
.plt:0000000000002C06                 push    31h ; '1'
.plt:0000000000002C0B                 jmp     sub_28E0
.plt:0000000000002C10
.plt:0000000000002C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C10
.plt:0000000000002C10 ; Attributes: thunk
.plt:0000000000002C10
.plt:0000000000002C10 ; int ioctl(int fd, unsigned __int64 request, ...)
.plt:0000000000002C10 _ioctl          proc near               ; CODE XREF: copy_internal+3D57↓p
.plt:0000000000002C10                                         ; extent_scan_read+79↓p
.plt:0000000000002C10                 jmp     cs:ioctl_ptr
.plt:0000000000002C10 _ioctl          endp
.plt:0000000000002C10
.plt:0000000000002C16 ; ---------------------------------------------------------------------------
.plt:0000000000002C16                 push    32h ; '2'
.plt:0000000000002C1B                 jmp     sub_28E0
.plt:0000000000002C20
.plt:0000000000002C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C20
.plt:0000000000002C20 ; Attributes: thunk
.plt:0000000000002C20
.plt:0000000000002C20 ; char *canonicalize_file_name(const char *name)
.plt:0000000000002C20 _canonicalize_file_name proc near       ; CODE XREF: copy_internal+1717↓p
.plt:0000000000002C20                 jmp     cs:canonicalize_file_name_ptr
.plt:0000000000002C20 _canonicalize_file_name endp
.plt:0000000000002C20
.plt:0000000000002C26 ; ---------------------------------------------------------------------------
.plt:0000000000002C26                 push    33h ; '3'
.plt:0000000000002C2B                 jmp     sub_28E0
.plt:0000000000002C30
.plt:0000000000002C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C30
.plt:0000000000002C30 ; Attributes: thunk
.plt:0000000000002C30
.plt:0000000000002C30 ; int close(int fd)
.plt:0000000000002C30 _close          proc near               ; CODE XREF: install_file_in_file+B6↓p
.plt:0000000000002C30                                         ; install_file_in_file+BE↓p ...
.plt:0000000000002C30                 jmp     cs:close_ptr
.plt:0000000000002C30 _close          endp
.plt:0000000000002C30
.plt:0000000000002C36 ; ---------------------------------------------------------------------------
.plt:0000000000002C36                 push    34h ; '4'
.plt:0000000000002C3B                 jmp     sub_28E0
.plt:0000000000002C40
.plt:0000000000002C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C40
.plt:0000000000002C40 ; Attributes: thunk
.plt:0000000000002C40
.plt:0000000000002C40 ; void rewinddir(DIR *dirp)
.plt:0000000000002C40 _rewinddir      proc near               ; CODE XREF: backupfile_internal+101↓p
.plt:0000000000002C40                 jmp     cs:rewinddir_ptr
.plt:0000000000002C40 _rewinddir      endp
.plt:0000000000002C40
.plt:0000000000002C46 ; ---------------------------------------------------------------------------
.plt:0000000000002C46                 push    35h ; '5'
.plt:0000000000002C4B                 jmp     sub_28E0
.plt:0000000000002C50
.plt:0000000000002C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C50
.plt:0000000000002C50 ; Attributes: thunk
.plt:0000000000002C50
.plt:0000000000002C50 ; size_t strspn(const char *s, const char *accept)
.plt:0000000000002C50 _strspn         proc near               ; CODE XREF: try_tempname_len+68↓p
.plt:0000000000002C50                 jmp     cs:strspn_ptr
.plt:0000000000002C50 _strspn         endp
.plt:0000000000002C50
.plt:0000000000002C56 ; ---------------------------------------------------------------------------
.plt:0000000000002C56                 push    36h ; '6'
.plt:0000000000002C5B                 jmp     sub_28E0
.plt:0000000000002C60
.plt:0000000000002C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C60
.plt:0000000000002C60 ; Attributes: thunk
.plt:0000000000002C60
.plt:0000000000002C60 ; int closedir(DIR *dirp)
.plt:0000000000002C60 _closedir       proc near               ; CODE XREF: backupfile_internal+377↓p
.plt:0000000000002C60                                         ; backupfile_internal+5DA↓p ...
.plt:0000000000002C60                 jmp     cs:closedir_ptr
.plt:0000000000002C60 _closedir       endp
.plt:0000000000002C60
.plt:0000000000002C66 ; ---------------------------------------------------------------------------
.plt:0000000000002C66                 push    37h ; '7'
.plt:0000000000002C6B                 jmp     sub_28E0
.plt:0000000000002C70
.plt:0000000000002C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C70
.plt:0000000000002C70 ; Attributes: thunk
.plt:0000000000002C70
.plt:0000000000002C70 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000002C70 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000002C70                                         ; fadvise+16↓j
.plt:0000000000002C70                 jmp     cs:posix_fadvise_ptr
.plt:0000000000002C70 _posix_fadvise  endp
.plt:0000000000002C70
.plt:0000000000002C76 ; ---------------------------------------------------------------------------
.plt:0000000000002C76                 push    38h ; '8'
.plt:0000000000002C7B                 jmp     sub_28E0
.plt:0000000000002C80
.plt:0000000000002C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C80
.plt:0000000000002C80 ; Attributes: thunk
.plt:0000000000002C80
.plt:0000000000002C80 ; ssize_t read(int fd, void *buf, size_t nbytes)
.plt:0000000000002C80 _read           proc near               ; CODE XREF: sparse_copy+B0↓p
.plt:0000000000002C80                                         ; safe_read+21↓p
.plt:0000000000002C80                 jmp     cs:read_ptr
.plt:0000000000002C80 _read           endp
.plt:0000000000002C80
.plt:0000000000002C86 ; ---------------------------------------------------------------------------
.plt:0000000000002C86                 push    39h ; '9'
.plt:0000000000002C8B                 jmp     sub_28E0
.plt:0000000000002C90
.plt:0000000000002C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C90
.plt:0000000000002C90 ; Attributes: thunk
.plt:0000000000002C90
.plt:0000000000002C90 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000002C90 _memcmp         proc near               ; CODE XREF: install_file_in_file+3A0↓p
.plt:0000000000002C90                                         ; sparse_copy+1A2↓p ...
.plt:0000000000002C90                 jmp     cs:memcmp_ptr
.plt:0000000000002C90 _memcmp         endp
.plt:0000000000002C90
.plt:0000000000002C96 ; ---------------------------------------------------------------------------
.plt:0000000000002C96                 push    3Ah ; ':'
.plt:0000000000002C9B                 jmp     sub_28E0
.plt:0000000000002CA0
.plt:0000000000002CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002CA0
.plt:0000000000002CA0 ; Attributes: thunk
.plt:0000000000002CA0
.plt:0000000000002CA0 ; int fallocate(int fd, int mode, __off_t offset, __off_t len)
.plt:0000000000002CA0 _fallocate      proc near               ; CODE XREF: punch_hole+C↓p
.plt:0000000000002CA0                 jmp     cs:fallocate_ptr
.plt:0000000000002CA0 _fallocate      endp
.plt:0000000000002CA0
.plt:0000000000002CA6 ; ---------------------------------------------------------------------------
.plt:0000000000002CA6                 push    3Bh ; ';'
.plt:0000000000002CAB                 jmp     sub_28E0
.plt:0000000000002CB0
.plt:0000000000002CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002CB0
.plt:0000000000002CB0 ; Attributes: thunk
.plt:0000000000002CB0
.plt:0000000000002CB0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000002CB0 _fputs_unlocked proc near               ; CODE XREF: usage+A6↓p
.plt:0000000000002CB0                                         ; usage+CB↓p ...
.plt:0000000000002CB0                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000002CB0 _fputs_unlocked endp
.plt:0000000000002CB0
.plt:0000000000002CB6 ; ---------------------------------------------------------------------------
.plt:0000000000002CB6                 push    3Ch ; '<'
.plt:0000000000002CBB                 jmp     sub_28E0
.plt:0000000000002CC0
.plt:0000000000002CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002CC0
.plt:0000000000002CC0 ; Attributes: thunk
.plt:0000000000002CC0
.plt:0000000000002CC0 ; int utimes(const char *file, const struct timeval tvp[2])
.plt:0000000000002CC0 _utimes         proc near               ; CODE XREF: fdutimens+350↓p
.plt:0000000000002CC0                 jmp     cs:utimes_ptr
.plt:0000000000002CC0 _utimes         endp
.plt:0000000000002CC0
.plt:0000000000002CC6 ; ---------------------------------------------------------------------------
.plt:0000000000002CC6                 push    3Dh ; '='
.plt:0000000000002CCB                 jmp     sub_28E0
.plt:0000000000002CD0
.plt:0000000000002CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002CD0
.plt:0000000000002CD0 ; Attributes: thunk
.plt:0000000000002CD0
.plt:0000000000002CD0 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000002CD0 _calloc         proc near               ; CODE XREF: write_zeros+74↓p
.plt:0000000000002CD0                                         ; hash_initialize+B1↓p ...
.plt:0000000000002CD0                 jmp     cs:calloc_ptr
.plt:0000000000002CD0 _calloc         endp
.plt:0000000000002CD0
.plt:0000000000002CD6 ; ---------------------------------------------------------------------------
.plt:0000000000002CD6                 push    3Eh ; '>'
.plt:0000000000002CDB                 jmp     sub_28E0
.plt:0000000000002CE0
.plt:0000000000002CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002CE0
.plt:0000000000002CE0 ; Attributes: thunk
.plt:0000000000002CE0
.plt:0000000000002CE0 ; __ssize_t __getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:0000000000002CE0 ___getdelim     proc near               ; CODE XREF: yesno+3F↓p
.plt:0000000000002CE0                 jmp     cs:__getdelim_ptr
.plt:0000000000002CE0 ___getdelim     endp
.plt:0000000000002CE0
.plt:0000000000002CE6 ; ---------------------------------------------------------------------------
.plt:0000000000002CE6                 push    3Fh ; '?'
.plt:0000000000002CEB                 jmp     sub_28E0
.plt:0000000000002CF0
.plt:0000000000002CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002CF0
.plt:0000000000002CF0 ; Attributes: thunk
.plt:0000000000002CF0
.plt:0000000000002CF0 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000002CF0 _strcmp         proc near               ; CODE XREF: copy_internal+284E↓p
.plt:0000000000002CF0                                         ; copy_internal+38F4↓p ...
.plt:0000000000002CF0                 jmp     cs:strcmp_ptr
.plt:0000000000002CF0 _strcmp         endp
.plt:0000000000002CF0
.plt:0000000000002CF6 ; ---------------------------------------------------------------------------
.plt:0000000000002CF6                 push    40h ; '@'
.plt:0000000000002CFB                 jmp     sub_28E0
.plt:0000000000002D00
.plt:0000000000002D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D00
.plt:0000000000002D00 ; Attributes: thunk
.plt:0000000000002D00
.plt:0000000000002D00 ; __sighandler_t signal(int sig, __sighandler_t handler)
.plt:0000000000002D00 _signal         proc near               ; CODE XREF: main+3AB↓p
.plt:0000000000002D00                 jmp     cs:signal_ptr
.plt:0000000000002D00 _signal         endp
.plt:0000000000002D00
.plt:0000000000002D06 ; ---------------------------------------------------------------------------
.plt:0000000000002D06                 push    41h ; 'A'
.plt:0000000000002D0B                 jmp     sub_28E0
.plt:0000000000002D10
.plt:0000000000002D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D10
.plt:0000000000002D10 ; Attributes: thunk
.plt:0000000000002D10
.plt:0000000000002D10 ; int dirfd(DIR *dirp)
.plt:0000000000002D10 _dirfd          proc near               ; CODE XREF: opendir_safer+18↓p
.plt:0000000000002D10                 jmp     cs:dirfd_ptr
.plt:0000000000002D10 _dirfd          endp
.plt:0000000000002D10
.plt:0000000000002D16 ; ---------------------------------------------------------------------------
.plt:0000000000002D16                 push    42h ; 'B'
.plt:0000000000002D1B                 jmp     sub_28E0
.plt:0000000000002D20
.plt:0000000000002D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D20
.plt:0000000000002D20 ; Attributes: thunk
.plt:0000000000002D20
.plt:0000000000002D20 ; struct passwd *getpwnam(const char *name)
.plt:0000000000002D20 _getpwnam       proc near               ; CODE XREF: main+5F9↓p
.plt:0000000000002D20                 jmp     cs:getpwnam_ptr
.plt:0000000000002D20 _getpwnam       endp
.plt:0000000000002D20
.plt:0000000000002D26 ; ---------------------------------------------------------------------------
.plt:0000000000002D26                 push    43h ; 'C'
.plt:0000000000002D2B                 jmp     sub_28E0
.plt:0000000000002D30
.plt:0000000000002D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D30
.plt:0000000000002D30 ; Attributes: thunk
.plt:0000000000002D30
.plt:0000000000002D30 ; __int64 fpathconf(int fd, int name)
.plt:0000000000002D30 _fpathconf      proc near               ; CODE XREF: backupfile_internal+463↓p
.plt:0000000000002D30                 jmp     cs:fpathconf_ptr
.plt:0000000000002D30 _fpathconf      endp
.plt:0000000000002D30
.plt:0000000000002D36 ; ---------------------------------------------------------------------------
.plt:0000000000002D36                 push    44h ; 'D'
.plt:0000000000002D3B                 jmp     sub_28E0
.plt:0000000000002D40
.plt:0000000000002D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D40
.plt:0000000000002D40 ; Attributes: thunk
.plt:0000000000002D40
.plt:0000000000002D40 ; int rpmatch(const char *response)
.plt:0000000000002D40 _rpmatch        proc near               ; CODE XREF: yesno:loc_12718↓p
.plt:0000000000002D40                 jmp     cs:rpmatch_ptr
.plt:0000000000002D40 _rpmatch        endp
.plt:0000000000002D40
.plt:0000000000002D46 ; ---------------------------------------------------------------------------
.plt:0000000000002D46                 push    45h ; 'E'
.plt:0000000000002D4B                 jmp     sub_28E0
.plt:0000000000002D50
.plt:0000000000002D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D50
.plt:0000000000002D50 ; Attributes: thunk
.plt:0000000000002D50
.plt:0000000000002D50 ; __int64 syscall(__int64 sysno, ...)
.plt:0000000000002D50 _syscall        proc near               ; CODE XREF: renameat2+46↓p
.plt:0000000000002D50                 jmp     cs:syscall_ptr
.plt:0000000000002D50 _syscall        endp
.plt:0000000000002D50
.plt:0000000000002D56 ; ---------------------------------------------------------------------------
.plt:0000000000002D56                 push    46h ; 'F'
.plt:0000000000002D5B                 jmp     sub_28E0
.plt:0000000000002D60
.plt:0000000000002D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D60
.plt:0000000000002D60 ; Attributes: thunk
.plt:0000000000002D60
.plt:0000000000002D60 ; int mkfifo(const char *path, __mode_t mode)
.plt:0000000000002D60 _mkfifo         proc near               ; CODE XREF: copy_internal+29CD↓p
.plt:0000000000002D60                 jmp     cs:mkfifo_ptr
.plt:0000000000002D60 _mkfifo         endp
.plt:0000000000002D60
.plt:0000000000002D66 ; ---------------------------------------------------------------------------
.plt:0000000000002D66                 push    47h ; 'G'
.plt:0000000000002D6B                 jmp     sub_28E0
.plt:0000000000002D70
.plt:0000000000002D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D70
.plt:0000000000002D70 ; Attributes: thunk
.plt:0000000000002D70
.plt:0000000000002D70 ; __mode_t umask(__mode_t mask)
.plt:0000000000002D70 _umask          proc near               ; CODE XREF: main+18E↓p
.plt:0000000000002D70                                         ; cached_umask+12↓p ...
.plt:0000000000002D70                 jmp     cs:umask_ptr
.plt:0000000000002D70 _umask          endp
.plt:0000000000002D70
.plt:0000000000002D76 ; ---------------------------------------------------------------------------
.plt:0000000000002D76                 push    48h ; 'H'
.plt:0000000000002D7B                 jmp     sub_28E0
.plt:0000000000002D80
.plt:0000000000002D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D80
.plt:0000000000002D80 ; Attributes: thunk
.plt:0000000000002D80
.plt:0000000000002D80 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000002D80 _memcpy         proc near               ; CODE XREF: copy_internal+E2D↓p
.plt:0000000000002D80                                         ; backupfile_internal+D6↓p ...
.plt:0000000000002D80                 jmp     cs:memcpy_ptr
.plt:0000000000002D80 _memcpy         endp
.plt:0000000000002D80
.plt:0000000000002D86 ; ---------------------------------------------------------------------------
.plt:0000000000002D86                 push    49h ; 'I'
.plt:0000000000002D8B                 jmp     sub_28E0
.plt:0000000000002D90
.plt:0000000000002D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D90
.plt:0000000000002D90 ; Attributes: thunk
.plt:0000000000002D90
.plt:0000000000002D90 ; struct group *getgrnam(const char *name)
.plt:0000000000002D90 _getgrnam       proc near               ; CODE XREF: main+625↓p
.plt:0000000000002D90                 jmp     cs:getgrnam_ptr
.plt:0000000000002D90 _getgrnam       endp
.plt:0000000000002D90
.plt:0000000000002D96 ; ---------------------------------------------------------------------------
.plt:0000000000002D96                 push    4Ah ; 'J'
.plt:0000000000002D9B                 jmp     sub_28E0
.plt:0000000000002DA0
.plt:0000000000002DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002DA0
.plt:0000000000002DA0 ; Attributes: thunk
.plt:0000000000002DA0
.plt:0000000000002DA0 ; int __xmknod(int ver, const char *path, __mode_t mode, __dev_t *dev)
.plt:0000000000002DA0 ___xmknod       proc near               ; CODE XREF: copy_internal+25DF↓p
.plt:0000000000002DA0                                         ; copy_internal+29A8↓p
.plt:0000000000002DA0                 jmp     cs:__xmknod_ptr
.plt:0000000000002DA0 ___xmknod       endp
.plt:0000000000002DA0
.plt:0000000000002DA6 ; ---------------------------------------------------------------------------
.plt:0000000000002DA6                 push    4Bh ; 'K'
.plt:0000000000002DAB                 jmp     sub_28E0
.plt:0000000000002DB0
.plt:0000000000002DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002DB0
.plt:0000000000002DB0 ; Attributes: thunk
.plt:0000000000002DB0
.plt:0000000000002DB0 ; int fileno(FILE *stream)
.plt:0000000000002DB0 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000002DB0                                         ; rpl_fseeko+2E↓p ...
.plt:0000000000002DB0                 jmp     cs:fileno_ptr
.plt:0000000000002DB0 _fileno         endp
.plt:0000000000002DB0
.plt:0000000000002DB6 ; ---------------------------------------------------------------------------
.plt:0000000000002DB6                 push    4Ch ; 'L'
.plt:0000000000002DBB                 jmp     sub_28E0
.plt:0000000000002DC0
.plt:0000000000002DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002DC0
.plt:0000000000002DC0 ; Attributes: thunk
.plt:0000000000002DC0
.plt:0000000000002DC0 ; __gid_t getgid(void)
.plt:0000000000002DC0 _getgid         proc near               ; CODE XREF: install_file_in_file+653↓p
.plt:0000000000002DC0                                         ; randread_new+1FC↓p
.plt:0000000000002DC0                 jmp     cs:getgid_ptr
.plt:0000000000002DC0 _getgid         endp
.plt:0000000000002DC0
.plt:0000000000002DC6 ; ---------------------------------------------------------------------------
.plt:0000000000002DC6                 push    4Dh ; 'M'
.plt:0000000000002DCB                 jmp     sub_28E0
.plt:0000000000002DD0
.plt:0000000000002DD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002DD0
.plt:0000000000002DD0 ; Attributes: thunk
.plt:0000000000002DD0
.plt:0000000000002DD0 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000002DD0 ___xstat        proc near               ; CODE XREF: main+486↓p
.plt:0000000000002DD0                                         ; main+844↓p ...
.plt:0000000000002DD0                 jmp     cs:__xstat_ptr
.plt:0000000000002DD0 ___xstat        endp
.plt:0000000000002DD0
.plt:0000000000002DD6 ; ---------------------------------------------------------------------------
.plt:0000000000002DD6                 push    4Eh ; 'N'
.plt:0000000000002DDB                 jmp     sub_28E0
.plt:0000000000002DE0
.plt:0000000000002DE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002DE0
.plt:0000000000002DE0 ; Attributes: thunk
.plt:0000000000002DE0
.plt:0000000000002DE0 ; struct dirent *readdir(DIR *dirp)
.plt:0000000000002DE0 _readdir        proc near               ; CODE XREF: backupfile_internal+133↓p
.plt:0000000000002DE0                                         ; backupfile_internal+2DA↓p ...
.plt:0000000000002DE0                 jmp     cs:readdir_ptr
.plt:0000000000002DE0 _readdir        endp
.plt:0000000000002DE0
.plt:0000000000002DE6 ; ---------------------------------------------------------------------------
.plt:0000000000002DE6                 push    4Fh ; 'O'
.plt:0000000000002DEB                 jmp     sub_28E0
.plt:0000000000002DF0
.plt:0000000000002DF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002DF0
.plt:0000000000002DF0 ; Attributes: thunk
.plt:0000000000002DF0
.plt:0000000000002DF0 ; void *malloc(size_t size)
.plt:0000000000002DF0 _malloc         proc near               ; CODE XREF: install_file_in_file+5B7↓p
.plt:0000000000002DF0                                         ; samedir_template+22↓p ...
.plt:0000000000002DF0                 jmp     cs:malloc_ptr
.plt:0000000000002DF0 _malloc         endp
.plt:0000000000002DF0
.plt:0000000000002DF6 ; ---------------------------------------------------------------------------
.plt:0000000000002DF6                 push    50h ; 'P'
.plt:0000000000002DFB                 jmp     sub_28E0
.plt:0000000000002E00
.plt:0000000000002E00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002E00
.plt:0000000000002E00 ; Attributes: thunk
.plt:0000000000002E00
.plt:0000000000002E00 ; int fflush(FILE *stream)
.plt:0000000000002E00 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000002E00                                         ; rpl_fflush+3B↓j
.plt:0000000000002E00                 jmp     cs:fflush_ptr
.plt:0000000000002E00 _fflush         endp
.plt:0000000000002E00
.plt:0000000000002E06 ; ---------------------------------------------------------------------------
.plt:0000000000002E06                 push    51h ; 'Q'
.plt:0000000000002E0B                 jmp     sub_28E0
.plt:0000000000002E10
.plt:0000000000002E10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002E10
.plt:0000000000002E10 ; Attributes: thunk
.plt:0000000000002E10
.plt:0000000000002E10 ; char *nl_langinfo(nl_item item)
.plt:0000000000002E10 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000002E10                 jmp     cs:nl_langinfo_ptr
.plt:0000000000002E10 _nl_langinfo    endp
.plt:0000000000002E10
.plt:0000000000002E16 ; ---------------------------------------------------------------------------
.plt:0000000000002E16                 push    52h ; 'R'
.plt:0000000000002E1B                 jmp     sub_28E0
.plt:0000000000002E20
.plt:0000000000002E20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002E20
.plt:0000000000002E20 ; Attributes: thunk
.plt:0000000000002E20
.plt:0000000000002E20 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000002E20 ___fxstat       proc near               ; CODE XREF: copy_internal+20E1↓p
.plt:0000000000002E20                                         ; copy_internal+2EC2↓p ...
.plt:0000000000002E20                 jmp     cs:__fxstat_ptr
.plt:0000000000002E20 ___fxstat       endp
.plt:0000000000002E20
.plt:0000000000002E26 ; ---------------------------------------------------------------------------
.plt:0000000000002E26                 push    53h ; 'S'
.plt:0000000000002E2B                 jmp     sub_28E0
.plt:0000000000002E30
.plt:0000000000002E30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002E30
.plt:0000000000002E30 ; Attributes: thunk
.plt:0000000000002E30
.plt:0000000000002E30 ; void endpwent(void)
.plt:0000000000002E30 _endpwent       proc near               ; CODE XREF: main+610↓p
.plt:0000000000002E30                 jmp     cs:endpwent_ptr
.plt:0000000000002E30 _endpwent       endp
.plt:0000000000002E30
.plt:0000000000002E36 ; ---------------------------------------------------------------------------
.plt:0000000000002E36                 push    54h ; 'T'
.plt:0000000000002E3B                 jmp     sub_28E0
.plt:0000000000002E40
.plt:0000000000002E40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002E40
.plt:0000000000002E40 ; Attributes: thunk
.plt:0000000000002E40
.plt:0000000000002E40 ; int lchown(const char *file, __uid_t owner, __gid_t group)
.plt:0000000000002E40 _lchown         proc near               ; CODE XREF: install_file_in_file+199↓p
.plt:0000000000002E40                                         ; set_owner+B3↓p ...
.plt:0000000000002E40                 jmp     cs:lchown_ptr
.plt:0000000000002E40 _lchown         endp
.plt:0000000000002E40
.plt:0000000000002E46 ; ---------------------------------------------------------------------------
.plt:0000000000002E46                 push    55h ; 'U'
.plt:0000000000002E4B                 jmp     sub_28E0
.plt:0000000000002E50
.plt:0000000000002E50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002E50
.plt:0000000000002E50 ; Attributes: thunk
.plt:0000000000002E50
.plt:0000000000002E50 ; int __freading(FILE *fp)
.plt:0000000000002E50 ___freading     proc near               ; CODE XREF: rpl_fflush+9↓p
.plt:0000000000002E50                                         ; rpl_fclose+13↓p
.plt:0000000000002E50                 jmp     cs:__freading_ptr
.plt:0000000000002E50 ___freading     endp
.plt:0000000000002E50
.plt:0000000000002E56 ; ---------------------------------------------------------------------------
.plt:0000000000002E56                 push    56h ; 'V'
.plt:0000000000002E5B                 jmp     sub_28E0
.plt:0000000000002E60
.plt:0000000000002E60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002E60
.plt:0000000000002E60 ; Attributes: thunk
.plt:0000000000002E60
.plt:0000000000002E60 ; int fchdir(int fd)
.plt:0000000000002E60 _fchdir         proc near               ; CODE XREF: savewd_chdir+EA↓p
.plt:0000000000002E60                                         ; savewd_restore+D3↓p
.plt:0000000000002E60                 jmp     cs:fchdir_ptr
.plt:0000000000002E60 _fchdir         endp
.plt:0000000000002E60
.plt:0000000000002E66 ; ---------------------------------------------------------------------------
.plt:0000000000002E66                 push    57h ; 'W'
.plt:0000000000002E6B                 jmp     sub_28E0
.plt:0000000000002E70
.plt:0000000000002E70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002E70
.plt:0000000000002E70 ; Attributes: thunk
.plt:0000000000002E70
.plt:0000000000002E70 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000002E70 _fwrite_unlocked proc near              ; CODE XREF: prog_fprintf+91↓p
.plt:0000000000002E70                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000002E70 _fwrite_unlocked endp
.plt:0000000000002E70
.plt:0000000000002E76 ; ---------------------------------------------------------------------------
.plt:0000000000002E76                 push    58h ; 'X'
.plt:0000000000002E7B                 jmp     sub_28E0
.plt:0000000000002E80
.plt:0000000000002E80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002E80
.plt:0000000000002E80 ; Attributes: thunk
.plt:0000000000002E80
.plt:0000000000002E80 ; int chown(const char *file, __uid_t owner, __gid_t group)
.plt:0000000000002E80 _chown          proc near               ; CODE XREF: dirchownmod:loc_13200↓p
.plt:0000000000002E80                 jmp     cs:chown_ptr
.plt:0000000000002E80 _chown          endp
.plt:0000000000002E80
.plt:0000000000002E86 ; ---------------------------------------------------------------------------
.plt:0000000000002E86                 push    59h ; 'Y'
.plt:0000000000002E8B                 jmp     sub_28E0
.plt:0000000000002E90
.plt:0000000000002E90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002E90
.plt:0000000000002E90 ; Attributes: thunk
.plt:0000000000002E90
.plt:0000000000002E90 ; void *realloc(void *ptr, size_t size)
.plt:0000000000002E90 _realloc        proc near               ; CODE XREF: backupfile_internal+261↓p
.plt:0000000000002E90                                         ; xrealloc+11↓p ...
.plt:0000000000002E90                 jmp     cs:realloc_ptr
.plt:0000000000002E90 _realloc        endp
.plt:0000000000002E90
.plt:0000000000002E96 ; ---------------------------------------------------------------------------
.plt:0000000000002E96                 push    5Ah ; 'Z'
.plt:0000000000002E9B                 jmp     sub_28E0
.plt:0000000000002EA0
.plt:0000000000002EA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002EA0
.plt:0000000000002EA0 ; Attributes: thunk
.plt:0000000000002EA0
.plt:0000000000002EA0 ; char *stpncpy(char *dest, const char *src, size_t n)
.plt:0000000000002EA0 _stpncpy        proc near               ; CODE XREF: install_file_in_file+5D1↓p
.plt:0000000000002EA0                 jmp     cs:stpncpy_ptr
.plt:0000000000002EA0 _stpncpy        endp
.plt:0000000000002EA0
.plt:0000000000002EA6 ; ---------------------------------------------------------------------------
.plt:0000000000002EA6                 push    5Bh ; '['
.plt:0000000000002EAB                 jmp     sub_28E0
.plt:0000000000002EB0
.plt:0000000000002EB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002EB0
.plt:0000000000002EB0 ; Attributes: thunk
.plt:0000000000002EB0
.plt:0000000000002EB0 ; FILE *fdopen(int fd, const char *modes)
.plt:0000000000002EB0 _fdopen         proc near               ; CODE XREF: fopen_safer+50↓p
.plt:0000000000002EB0                 jmp     cs:fdopen_ptr
.plt:0000000000002EB0 _fdopen         endp
.plt:0000000000002EB0
.plt:0000000000002EB6 ; ---------------------------------------------------------------------------
.plt:0000000000002EB6                 push    5Ch ; '\'
.plt:0000000000002EBB                 jmp     sub_28E0
.plt:0000000000002EC0
.plt:0000000000002EC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002EC0
.plt:0000000000002EC0 ; Attributes: thunk
.plt:0000000000002EC0
.plt:0000000000002EC0 ; int linkat(int fromfd, const char *from, int tofd, const char *to, int flags)
.plt:0000000000002EC0 _linkat         proc near               ; CODE XREF: try_link+13↓j
.plt:0000000000002EC0                                         ; force_linkat+F7↓p
.plt:0000000000002EC0                 jmp     cs:linkat_ptr
.plt:0000000000002EC0 _linkat         endp
.plt:0000000000002EC0
.plt:0000000000002EC6 ; ---------------------------------------------------------------------------
.plt:0000000000002EC6                 push    5Dh ; ']'
.plt:0000000000002ECB                 jmp     sub_28E0
.plt:0000000000002ED0
.plt:0000000000002ED0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002ED0
.plt:0000000000002ED0 ; Attributes: thunk
.plt:0000000000002ED0
.plt:0000000000002ED0 ; char *setlocale(int category, const char *locale)
.plt:0000000000002ED0 _setlocale      proc near               ; CODE XREF: main+57↓p
.plt:0000000000002ED0                                         ; usage+2F3↓p ...
.plt:0000000000002ED0                 jmp     cs:setlocale_ptr
.plt:0000000000002ED0 _setlocale      endp
.plt:0000000000002ED0
.plt:0000000000002ED6 ; ---------------------------------------------------------------------------
.plt:0000000000002ED6                 push    5Eh ; '^'
.plt:0000000000002EDB                 jmp     sub_28E0
.plt:0000000000002EE0
.plt:0000000000002EE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002EE0
.plt:0000000000002EE0 ; Attributes: thunk
.plt:0000000000002EE0
.plt:0000000000002EE0 ___printf_chk   proc near               ; CODE XREF: usage+81↓p
.plt:0000000000002EE0                                         ; usage+2E7↓p ...
.plt:0000000000002EE0                 jmp     cs:__printf_chk_ptr
.plt:0000000000002EE0 ___printf_chk   endp
.plt:0000000000002EE0
.plt:0000000000002EE6 ; ---------------------------------------------------------------------------
.plt:0000000000002EE6                 push    5Fh ; '_'
.plt:0000000000002EEB                 jmp     sub_28E0
.plt:0000000000002EF0
.plt:0000000000002EF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002EF0
.plt:0000000000002EF0 ; Attributes: thunk
.plt:0000000000002EF0
.plt:0000000000002EF0 ; int fchmod(int fd, __mode_t mode)
.plt:0000000000002EF0 _fchmod         proc near               ; CODE XREF: fchmod_or_lchmod+9↓j
.plt:0000000000002EF0                                         ; chmod_or_fchmod+B↓j ...
.plt:0000000000002EF0                 jmp     cs:fchmod_ptr
.plt:0000000000002EF0 _fchmod         endp
.plt:0000000000002EF0
.plt:0000000000002EF6 ; ---------------------------------------------------------------------------
.plt:0000000000002EF6                 push    60h ; '`'
.plt:0000000000002EFB                 jmp     sub_28E0
.plt:0000000000002F00
.plt:0000000000002F00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002F00
.plt:0000000000002F00 ; Attributes: thunk
.plt:0000000000002F00
.plt:0000000000002F00 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
.plt:0000000000002F00 _setvbuf        proc near               ; CODE XREF: randread_new+82↓p
.plt:0000000000002F00                 jmp     cs:setvbuf_ptr
.plt:0000000000002F00 _setvbuf        endp
.plt:0000000000002F00
.plt:0000000000002F06 ; ---------------------------------------------------------------------------
.plt:0000000000002F06                 push    61h ; 'a'
.plt:0000000000002F0B                 jmp     sub_28E0
.plt:0000000000002F10
.plt:0000000000002F10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002F10
.plt:0000000000002F10 ; Attributes: thunk
.plt:0000000000002F10
.plt:0000000000002F10 ; int chmod(const char *file, __mode_t mode)
.plt:0000000000002F10 _chmod          proc near               ; CODE XREF: fchmod_or_lchmod+11↓j
.plt:0000000000002F10                                         ; install_file_in_file+1B4↓p ...
.plt:0000000000002F10                 jmp     cs:chmod_ptr
.plt:0000000000002F10 _chmod          endp
.plt:0000000000002F10
.plt:0000000000002F16 ; ---------------------------------------------------------------------------
.plt:0000000000002F16                 push    62h ; 'b'
.plt:0000000000002F1B                 jmp     sub_28E0
.plt:0000000000002F20
.plt:0000000000002F20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002F20
.plt:0000000000002F20 ; Attributes: thunk
.plt:0000000000002F20
.plt:0000000000002F20 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:0000000000002F20 _mempcpy        proc near               ; CODE XREF: copy_internal+28A2↓p
.plt:0000000000002F20                                         ; samedir_template+3A↓p ...
.plt:0000000000002F20                 jmp     cs:mempcpy_ptr
.plt:0000000000002F20 _mempcpy        endp
.plt:0000000000002F20
.plt:0000000000002F26 ; ---------------------------------------------------------------------------
.plt:0000000000002F26                 push    63h ; 'c'
.plt:0000000000002F2B                 jmp     sub_28E0
.plt:0000000000002F30
.plt:0000000000002F30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002F30
.plt:0000000000002F30 ; Attributes: thunk
.plt:0000000000002F30
.plt:0000000000002F30 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000002F30 _error          proc near               ; CODE XREF: restore_default_fscreatecon_or_die+2E↓p
.plt:0000000000002F30                                         ; main+45A↓p ...
.plt:0000000000002F30                 jmp     cs:error_ptr
.plt:0000000000002F30 _error          endp
.plt:0000000000002F30
.plt:0000000000002F36 ; ---------------------------------------------------------------------------
.plt:0000000000002F36                 push    64h ; 'd'
.plt:0000000000002F3B                 jmp     sub_28E0
.plt:0000000000002F40
.plt:0000000000002F40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002F40
.plt:0000000000002F40 ; Attributes: thunk
.plt:0000000000002F40
.plt:0000000000002F40 ; __pid_t waitpid(__pid_t pid, int *stat_loc, int options)
.plt:0000000000002F40 _waitpid        proc near               ; CODE XREF: install_file_in_file+47B↓p
.plt:0000000000002F40                                         ; savewd_restore+A1↓p
.plt:0000000000002F40                 jmp     cs:waitpid_ptr
.plt:0000000000002F40 _waitpid        endp
.plt:0000000000002F40
.plt:0000000000002F46 ; ---------------------------------------------------------------------------
.plt:0000000000002F46                 push    65h ; 'e'
.plt:0000000000002F4B                 jmp     sub_28E0
.plt:0000000000002F50
.plt:0000000000002F50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002F50
.plt:0000000000002F50 ; Attributes: thunk
.plt:0000000000002F50
.plt:0000000000002F50 ___explicit_bzero_chk proc near         ; CODE XREF: randint_free+10↓p
.plt:0000000000002F50                                         ; randint_all_free+32↓p ...
.plt:0000000000002F50                 jmp     cs:__explicit_bzero_chk_ptr
.plt:0000000000002F50 ___explicit_bzero_chk endp
.plt:0000000000002F50
.plt:0000000000002F56 ; ---------------------------------------------------------------------------
.plt:0000000000002F56                 push    66h ; 'f'
.plt:0000000000002F5B                 jmp     sub_28E0
.plt:0000000000002F60
.plt:0000000000002F60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002F60
.plt:0000000000002F60 ; Attributes: thunk
.plt:0000000000002F60
.plt:0000000000002F60 ; int open(const char *file, int oflag, ...)
.plt:0000000000002F60 _open           proc near               ; CODE XREF: install_file_in_file+326↓p
.plt:0000000000002F60                                         ; install_file_in_file+33D↓p ...
.plt:0000000000002F60                 jmp     cs:open_ptr
.plt:0000000000002F60 _open           endp
.plt:0000000000002F60
.plt:0000000000002F66 ; ---------------------------------------------------------------------------
.plt:0000000000002F66                 push    67h ; 'g'
.plt:0000000000002F6B                 jmp     sub_28E0
.plt:0000000000002F70
.plt:0000000000002F70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002F70
.plt:0000000000002F70 ; Attributes: thunk
.plt:0000000000002F70
.plt:0000000000002F70 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000002F70 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_127DA↓j
.plt:0000000000002F70                 jmp     cs:fseeko_ptr
.plt:0000000000002F70 _fseeko         endp
.plt:0000000000002F70
.plt:0000000000002F76 ; ---------------------------------------------------------------------------
.plt:0000000000002F76                 push    68h ; 'h'
.plt:0000000000002F7B                 jmp     sub_28E0
.plt:0000000000002F80
.plt:0000000000002F80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002F80
.plt:0000000000002F80 ; Attributes: thunk
.plt:0000000000002F80
.plt:0000000000002F80 ; int fchown(int fd, __uid_t owner, __gid_t group)
.plt:0000000000002F80 _fchown         proc near               ; CODE XREF: set_owner+62↓p
.plt:0000000000002F80                                         ; set_owner+1F2↓p ...
.plt:0000000000002F80                 jmp     cs:fchown_ptr
.plt:0000000000002F80 _fchown         endp
.plt:0000000000002F80
.plt:0000000000002F86 ; ---------------------------------------------------------------------------
.plt:0000000000002F86                 push    69h ; 'i'
.plt:0000000000002F8B                 jmp     sub_28E0
.plt:0000000000002F90
.plt:0000000000002F90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002F90
.plt:0000000000002F90 ; Attributes: thunk
.plt:0000000000002F90
.plt:0000000000002F90 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000002F90 _fopen          proc near               ; CODE XREF: fopen_safer+7↓p
.plt:0000000000002F90                 jmp     cs:fopen_ptr
.plt:0000000000002F90 _fopen          endp
.plt:0000000000002F90
.plt:0000000000002F96 ; ---------------------------------------------------------------------------
.plt:0000000000002F96                 push    6Ah ; 'j'
.plt:0000000000002F9B                 jmp     sub_28E0
.plt:0000000000002FA0
.plt:0000000000002FA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002FA0
.plt:0000000000002FA0 ; Attributes: thunk
.plt:0000000000002FA0
.plt:0000000000002FA0 ; int rename(const char *old, const char *new)
.plt:0000000000002FA0 _rename         proc near               ; CODE XREF: copy_internal+96D↓p
.plt:0000000000002FA0                                         ; copy_internal+FC2↓p
.plt:0000000000002FA0                 jmp     cs:rename_ptr
.plt:0000000000002FA0 _rename         endp
.plt:0000000000002FA0
.plt:0000000000002FA6 ; ---------------------------------------------------------------------------
.plt:0000000000002FA6                 push    6Bh ; 'k'
.plt:0000000000002FAB                 jmp     sub_28E0
.plt:0000000000002FB0
.plt:0000000000002FB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002FB0
.plt:0000000000002FB0 ; Attributes: thunk
.plt:0000000000002FB0
.plt:0000000000002FB0 ; DIR *fdopendir(int fd)
.plt:0000000000002FB0 _fdopendir      proc near               ; CODE XREF: opendirat+22↓p
.plt:0000000000002FB0                                         ; opendir_safer+7B↓p
.plt:0000000000002FB0                 jmp     cs:fdopendir_ptr
.plt:0000000000002FB0 _fdopendir      endp
.plt:0000000000002FB0
.plt:0000000000002FB6 ; ---------------------------------------------------------------------------
.plt:0000000000002FB6                 push    6Ch ; 'l'
.plt:0000000000002FBB                 jmp     sub_28E0
.plt:0000000000002FC0
.plt:0000000000002FC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002FC0
.plt:0000000000002FC0 ; Attributes: thunk
.plt:0000000000002FC0
.plt:0000000000002FC0 ; int futimens(int fd, const struct timespec times[2])
.plt:0000000000002FC0 _futimens       proc near               ; CODE XREF: fdutimens+8D↓p
.plt:0000000000002FC0                 jmp     cs:futimens_ptr
.plt:0000000000002FC0 _futimens       endp
.plt:0000000000002FC0
.plt:0000000000002FC6 ; ---------------------------------------------------------------------------
.plt:0000000000002FC6                 push    6Dh ; 'm'
.plt:0000000000002FCB                 jmp     sub_28E0
.plt:0000000000002FD0
.plt:0000000000002FD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002FD0
.plt:0000000000002FD0 ; Attributes: thunk
.plt:0000000000002FD0
.plt:0000000000002FD0 ; int euidaccess(const char *name, int type)
.plt:0000000000002FD0 _euidaccess     proc near               ; CODE XREF: writable_destination+38↓p
.plt:0000000000002FD0                 jmp     cs:euidaccess_ptr
.plt:0000000000002FD0 _euidaccess     endp
.plt:0000000000002FD0
.plt:0000000000002FD6 ; ---------------------------------------------------------------------------
.plt:0000000000002FD6                 push    6Eh ; 'n'
.plt:0000000000002FDB                 jmp     sub_28E0
.plt:0000000000002FE0
.plt:0000000000002FE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002FE0
.plt:0000000000002FE0 ; Attributes: thunk
.plt:0000000000002FE0
.plt:0000000000002FE0 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
.plt:0000000000002FE0 _strtoul        proc near               ; CODE XREF: xstrtoul+8C↓p
.plt:0000000000002FE0                 jmp     cs:strtoul_ptr
.plt:0000000000002FE0 _strtoul        endp
.plt:0000000000002FE0
.plt:0000000000002FE6 ; ---------------------------------------------------------------------------
.plt:0000000000002FE6                 push    6Fh ; 'o'
.plt:0000000000002FEB                 jmp     sub_28E0
.plt:0000000000002FF0
.plt:0000000000002FF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002FF0
.plt:0000000000002FF0 ; Attributes: thunk
.plt:0000000000002FF0
.plt:0000000000002FF0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000002FF0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000002FF0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000002FF0 ___cxa_atexit   endp
.plt:0000000000002FF0
.plt:0000000000002FF6 ; ---------------------------------------------------------------------------
.plt:0000000000002FF6                 push    70h ; 'p'
.plt:0000000000002FFB                 jmp     sub_28E0
.plt:0000000000003000
.plt:0000000000003000 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003000
.plt:0000000000003000 ; Attributes: thunk
.plt:0000000000003000
.plt:0000000000003000 ; int renameat(int oldfd, const char *old, int newfd, const char *new)
.plt:0000000000003000 _renameat       proc near               ; CODE XREF: force_linkat+122↓p
.plt:0000000000003000                                         ; force_symlinkat+10A↓p ...
.plt:0000000000003000                 jmp     cs:renameat_ptr
.plt:0000000000003000 _renameat       endp
.plt:0000000000003000
.plt:0000000000003006 ; ---------------------------------------------------------------------------
.plt:0000000000003006                 push    71h ; 'q'
.plt:000000000000300B                 jmp     sub_28E0
.plt:0000000000003010
.plt:0000000000003010 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003010
.plt:0000000000003010 ; Attributes: thunk
.plt:0000000000003010
.plt:0000000000003010 ; int getpagesize(void)
.plt:0000000000003010 _getpagesize    proc near               ; CODE XREF: copy_internal:loc_8B0C↓p
.plt:0000000000003010                 jmp     cs:getpagesize_ptr
.plt:0000000000003010 _getpagesize    endp
.plt:0000000000003010
.plt:0000000000003016 ; ---------------------------------------------------------------------------
.plt:0000000000003016                 push    72h ; 'r'
.plt:000000000000301B                 jmp     sub_28E0
.plt:0000000000003020
.plt:0000000000003020 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003020
.plt:0000000000003020 ; Attributes: thunk
.plt:0000000000003020
.plt:0000000000003020 ; __pid_t getppid(void)
.plt:0000000000003020 _getppid        proc near               ; CODE XREF: randread_new+1A3↓p
.plt:0000000000003020                                         ; randread_new+2F7↓p
.plt:0000000000003020                 jmp     cs:getppid_ptr
.plt:0000000000003020 _getppid        endp
.plt:0000000000003020
.plt:0000000000003026 ; ---------------------------------------------------------------------------
.plt:0000000000003026                 push    73h ; 's'
.plt:000000000000302B                 jmp     sub_28E0
.plt:0000000000003030
.plt:0000000000003030 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003030
.plt:0000000000003030 ; Attributes: noreturn thunk
.plt:0000000000003030
.plt:0000000000003030 ; void __noreturn exit(int status)
.plt:0000000000003030 _exit           proc near               ; CODE XREF: main+36B↓p
.plt:0000000000003030                                         ; usage+58↓p
.plt:0000000000003030                 jmp     cs:exit_ptr
.plt:0000000000003030 _exit           endp
.plt:0000000000003030
.plt:0000000000003036 ; ---------------------------------------------------------------------------
.plt:0000000000003036                 push    74h ; 't'
.plt:000000000000303B                 jmp     sub_28E0
.plt:0000000000003040
.plt:0000000000003040 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003040
.plt:0000000000003040 ; Attributes: thunk
.plt:0000000000003040
.plt:0000000000003040 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000003040 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000003040                                         ; rpl_vfprintf+66↓p
.plt:0000000000003040                 jmp     cs:fwrite_ptr
.plt:0000000000003040 _fwrite         endp
.plt:0000000000003040
.plt:0000000000003046 ; ---------------------------------------------------------------------------
.plt:0000000000003046                 push    75h ; 'u'
.plt:000000000000304B                 jmp     sub_28E0
.plt:0000000000003050
.plt:0000000000003050 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003050
.plt:0000000000003050 ; Attributes: thunk
.plt:0000000000003050
.plt:0000000000003050 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000003050                                         ; overwrite_ok_isra_12+B8↓p ...
.plt:0000000000003050                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000003050 ___fprintf_chk  endp
.plt:0000000000003050
.plt:0000000000003056 ; ---------------------------------------------------------------------------
.plt:0000000000003056                 push    76h ; 'v'
.plt:000000000000305B                 jmp     sub_28E0
.plt:0000000000003060
.plt:0000000000003060 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003060
.plt:0000000000003060 ; Attributes: thunk
.plt:0000000000003060
.plt:0000000000003060 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000003060 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000003060                 jmp     cs:mbsinit_ptr
.plt:0000000000003060 _mbsinit        endp
.plt:0000000000003060
.plt:0000000000003066 ; ---------------------------------------------------------------------------
.plt:0000000000003066                 push    77h ; 'w'
.plt:000000000000306B                 jmp     sub_28E0
.plt:0000000000003070
.plt:0000000000003070 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003070
.plt:0000000000003070 ; Attributes: thunk
.plt:0000000000003070
.plt:0000000000003070 ; int symlinkat(const char *from, int tofd, const char *to)
.plt:0000000000003070 _symlinkat      proc near               ; CODE XREF: try_symlink+C↓j
.plt:0000000000003070                                         ; force_symlinkat+DC↓p
.plt:0000000000003070                 jmp     cs:symlinkat_ptr
.plt:0000000000003070 _symlinkat      endp
.plt:0000000000003070
.plt:0000000000003076 ; ---------------------------------------------------------------------------
.plt:0000000000003076                 push    78h ; 'x'
.plt:000000000000307B                 jmp     sub_28E0
.plt:0000000000003080
.plt:0000000000003080 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003080
.plt:0000000000003080 ; Attributes: thunk
.plt:0000000000003080
.plt:0000000000003080 ; int execlp(const char *file, const char *arg, ...)
.plt:0000000000003080 _execlp         proc near               ; CODE XREF: install_file_in_file+601↓p
.plt:0000000000003080                 jmp     cs:execlp_ptr
.plt:0000000000003080 _execlp         endp
.plt:0000000000003080
.plt:0000000000003086 ; ---------------------------------------------------------------------------
.plt:0000000000003086                 push    79h ; 'y'
.plt:000000000000308B                 jmp     sub_28E0
.plt:0000000000003090
.plt:0000000000003090 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003090
.plt:0000000000003090 ; Attributes: thunk
.plt:0000000000003090
.plt:0000000000003090 ; int iswprint(wint_t wc)
.plt:0000000000003090 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000003090                 jmp     cs:iswprint_ptr
.plt:0000000000003090 _iswprint       endp
.plt:0000000000003090
.plt:0000000000003096 ; ---------------------------------------------------------------------------
.plt:0000000000003096                 push    7Ah ; 'z'
.plt:000000000000309B                 jmp     sub_28E0
.plt:00000000000030A0
.plt:00000000000030A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000030A0
.plt:00000000000030A0 ; Attributes: thunk
.plt:00000000000030A0
.plt:00000000000030A0 ; __pid_t fork(void)
.plt:00000000000030A0 _fork           proc near               ; CODE XREF: install_file_in_file:loc_46C0↓p
.plt:00000000000030A0                                         ; savewd_chdir:loc_10259↓p
.plt:00000000000030A0                 jmp     cs:fork_ptr
.plt:00000000000030A0 _fork           endp
.plt:00000000000030A0
.plt:00000000000030A6 ; ---------------------------------------------------------------------------
.plt:00000000000030A6                 push    7Bh ; '{'
.plt:00000000000030AB                 jmp     sub_28E0
.plt:00000000000030B0
.plt:00000000000030B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000030B0
.plt:00000000000030B0 ; Attributes: thunk
.plt:00000000000030B0
.plt:00000000000030B0 ; int futimesat(int fd, const char *file, const struct timeval tvp[2])
.plt:00000000000030B0 _futimesat      proc near               ; CODE XREF: fdutimens+139↓p
.plt:00000000000030B0                                         ; fdutimens+210↓p ...
.plt:00000000000030B0                 jmp     cs:futimesat_ptr
.plt:00000000000030B0 _futimesat      endp
.plt:00000000000030B0
.plt:00000000000030B6 ; ---------------------------------------------------------------------------
.plt:00000000000030B6                 push    7Ch ; '|'
.plt:00000000000030BB                 jmp     sub_28E0
.plt:00000000000030C0
.plt:00000000000030C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000030C0
.plt:00000000000030C0 ; Attributes: thunk
.plt:00000000000030C0
.plt:00000000000030C0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000030C0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000030C0                                         ; xstrtoul+55↓p
.plt:00000000000030C0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000030C0 ___ctype_b_loc  endp
.plt:00000000000030C0
.plt:00000000000030C6 ; ---------------------------------------------------------------------------
.plt:00000000000030C6                 push    7Dh ; '}'
.plt:00000000000030CB                 jmp     sub_28E0
.plt:00000000000030CB ; } // starts at 28E0
.plt:00000000000030CB _plt            ends
.plt:00000000000030CB
.plt.got:00000000000030D0 ; ===========================================================================
.plt.got:00000000000030D0
.plt.got:00000000000030D0 ; Segment type: Pure code
.plt.got:00000000000030D0 ; Segment permissions: Read/Execute
.plt.got:00000000000030D0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000030D0                 assume cs:_plt_got
.plt.got:00000000000030D0                 ;org 30D0h
.plt.got:00000000000030D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000030D0
.plt.got:00000000000030D0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000030D0
.plt.got:00000000000030D0 ; Attributes: thunk
.plt.got:00000000000030D0
.plt.got:00000000000030D0 ; void free(void *ptr)
.plt.got:00000000000030D0 free            proc near               ; CODE XREF: main+593↓p
.plt.got:00000000000030D0                                         ; main+67B↓p ...
.plt.got:00000000000030D0 ; __unwind {
.plt.got:00000000000030D0                 jmp     cs:free_ptr
.plt.got:00000000000030D0 free            endp
.plt.got:00000000000030D0
.plt.got:00000000000030D0 ; ---------------------------------------------------------------------------
.plt.got:00000000000030D6                 align 8
.plt.got:00000000000030D8
.plt.got:00000000000030D8 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000030D8
.plt.got:00000000000030D8 ; Attributes: thunk
.plt.got:00000000000030D8
.plt.got:00000000000030D8 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000030D8 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000030D8                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000030D8 __cxa_finalize  endp
.plt.got:00000000000030D8
.plt.got:00000000000030D8 ; ---------------------------------------------------------------------------
.plt.got:00000000000030DE                 align 20h
.plt.got:00000000000030DE ; } // starts at 30D0
.plt.got:00000000000030DE _plt_got        ends
.plt.got:00000000000030DE
.text:00000000000030E0 ; ===========================================================================
.text:00000000000030E0
.text:00000000000030E0 ; Segment type: Pure code
.text:00000000000030E0 ; Segment permissions: Read/Execute
.text:00000000000030E0 _text           segment para public 'CODE' use64
.text:00000000000030E0                 assume cs:_text
.text:00000000000030E0                 ;org 30E0h
.text:00000000000030E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000030E0
.text:00000000000030E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000030E0
.text:00000000000030E0
.text:00000000000030E0 fchmod_or_lchmod proc near              ; CODE XREF: copy_internal+36AA↓p
.text:00000000000030E0                                         ; copy_internal+407D↓p ...
.text:00000000000030E0 ; __unwind {
.text:00000000000030E0                 test    edi, edi
.text:00000000000030E2                 mov     rax, rsi
.text:00000000000030E5                 mov     esi, edx        ; mode
.text:00000000000030E7                 js      short loc_30EE
.text:00000000000030E9                 jmp     _fchmod
.text:00000000000030EE ; ---------------------------------------------------------------------------
.text:00000000000030EE
.text:00000000000030EE loc_30EE:                               ; CODE XREF: fchmod_or_lchmod+7↑j
.text:00000000000030EE                 mov     rdi, rax        ; file
.text:00000000000030F1                 jmp     _chmod
.text:00000000000030F1 ; } // starts at 30E0
.text:00000000000030F1 fchmod_or_lchmod endp
.text:00000000000030F1
.text:00000000000030F6
.text:00000000000030F6 ; =============== S U B R O U T I N E =======================================
.text:00000000000030F6
.text:00000000000030F6
.text:00000000000030F6 restore_default_fscreatecon_or_die proc near
.text:00000000000030F6                                         ; CODE XREF: copy_internal:loc_6D30↓p
.text:00000000000030F6 ; __unwind {
.text:00000000000030F6                 push    rbx
.text:00000000000030F7                 call    ___errno_location
.text:00000000000030FC                 lea     rsi, msgid      ; "failed to restore the default file crea"...
.text:0000000000003103                 mov     rbx, rax
.text:0000000000003106                 mov     edx, 5          ; category
.text:000000000000310B                 xor     edi, edi        ; domainname
.text:000000000000310D                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000003113                 call    _dcgettext
.text:0000000000003118                 mov     esi, [rbx]      ; errnum
.text:000000000000311A                 mov     rdx, rax        ; format
.text:000000000000311D                 mov     edi, 1          ; status
.text:0000000000003122                 xor     eax, eax
.text:0000000000003124                 call    _error
.text:0000000000003124 ; } // starts at 30F6
.text:0000000000003129                 nop     dword ptr [rax+00000000h]
.text:0000000000003129 restore_default_fscreatecon_or_die endp ; sp-analysis failed
.text:0000000000003129
.text:0000000000003130
.text:0000000000003130 ; =============== S U B R O U T I N E =======================================
.text:0000000000003130
.text:0000000000003130
.text:0000000000003130 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000003130                 public main
.text:0000000000003130 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000003130
.text:0000000000003130 var_160         = qword ptr -160h
.text:0000000000003130 var_158         = qword ptr -158h
.text:0000000000003130 var_150         = qword ptr -150h
.text:0000000000003130 var_143         = byte ptr -143h
.text:0000000000003130 var_142         = byte ptr -142h
.text:0000000000003130 var_141         = byte ptr -141h
.text:0000000000003130 var_140         = qword ptr -140h
.text:0000000000003130 var_130         = qword ptr -130h
.text:0000000000003130 var_128         = dword ptr -128h
.text:0000000000003130 var_124         = dword ptr -124h
.text:0000000000003130 var_120         = dword ptr -120h
.text:0000000000003130 var_11C         = dword ptr -11Ch
.text:0000000000003130 var_118         = dword ptr -118h
.text:0000000000003130 var_114         = byte ptr -114h
.text:0000000000003130 var_113         = byte ptr -113h
.text:0000000000003130 var_112         = byte ptr -112h
.text:0000000000003130 var_111         = byte ptr -111h
.text:0000000000003130 var_110         = byte ptr -110h
.text:0000000000003130 var_10F         = byte ptr -10Fh
.text:0000000000003130 var_10C         = byte ptr -10Ch
.text:0000000000003130 var_10B         = byte ptr -10Bh
.text:0000000000003130 var_10A         = byte ptr -10Ah
.text:0000000000003130 var_109         = byte ptr -109h
.text:0000000000003130 var_108         = byte ptr -108h
.text:0000000000003130 var_107         = byte ptr -107h
.text:0000000000003130 var_106         = byte ptr -106h
.text:0000000000003130 var_105         = byte ptr -105h
.text:0000000000003130 var_104         = byte ptr -104h
.text:0000000000003130 var_103         = byte ptr -103h
.text:0000000000003130 var_102         = byte ptr -102h
.text:0000000000003130 var_101         = byte ptr -101h
.text:0000000000003130 var_100         = byte ptr -100h
.text:0000000000003130 var_FF          = byte ptr -0FFh
.text:0000000000003130 var_FE          = byte ptr -0FEh
.text:0000000000003130 var_FD          = byte ptr -0FDh
.text:0000000000003130 var_FC          = byte ptr -0FCh
.text:0000000000003130 var_FB          = byte ptr -0FBh
.text:0000000000003130 var_FA          = byte ptr -0FAh
.text:0000000000003130 var_F9          = byte ptr -0F9h
.text:0000000000003130 var_F8          = byte ptr -0F8h
.text:0000000000003130 var_F0          = dword ptr -0F0h
.text:0000000000003130 var_E8          = qword ptr -0E8h
.text:0000000000003130 var_E0          = qword ptr -0E0h
.text:0000000000003130 stat_buf        = stat ptr -0D8h
.text:0000000000003130 var_40          = qword ptr -40h
.text:0000000000003130
.text:0000000000003130 ; __unwind {
.text:0000000000003130                 push    r15
.text:0000000000003132                 push    r14
.text:0000000000003134                 xor     r15d, r15d
.text:0000000000003137                 push    r13
.text:0000000000003139                 push    r12
.text:000000000000313B                 lea     r12, long_options
.text:0000000000003142                 push    rbp
.text:0000000000003143                 push    rbx
.text:0000000000003144                 mov     ebx, edi
.text:0000000000003146                 mov     rbp, rsi
.text:0000000000003149                 xor     r14d, r14d
.text:000000000000314C                 xor     r13d, r13d
.text:000000000000314F                 sub     rsp, 138h
.text:0000000000003156                 mov     rdi, [rsi]
.text:0000000000003159                 mov     cs:selinux_enabled, 0
.text:0000000000003163                 mov     rax, fs:28h
.text:000000000000316C                 mov     [rsp+168h+var_40], rax
.text:0000000000003174                 xor     eax, eax
.text:0000000000003176                 call    set_program_name
.text:000000000000317B                 lea     rsi, aSSUnbackup+14h ; locale
.text:0000000000003182                 mov     edi, 6          ; category
.text:0000000000003187                 call    _setlocale
.text:000000000000318C                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000003193                 lea     rdi, domainname ; "coreutils"
.text:000000000000319A                 call    _bindtextdomain
.text:000000000000319F                 lea     rdi, domainname ; "coreutils"
.text:00000000000031A6                 call    _textdomain
.text:00000000000031AB                 lea     rdi, close_stdin
.text:00000000000031B2                 call    atexit
.text:00000000000031B7                 lea     rax, [rsp+168h+var_128]
.text:00000000000031BC                 mov     rdi, rax
.text:00000000000031BF                 mov     [rsp+168h+var_160], rax
.text:00000000000031C4                 call    cp_options_default
.text:00000000000031C9                 xor     edi, edi        ; mask
.text:00000000000031CB                 mov     [rsp+168h+var_114], 1
.text:00000000000031D0                 mov     [rsp+168h+var_F0], 0
.text:00000000000031D8                 mov     [rsp+168h+var_124], 4
.text:00000000000031E0                 mov     [rsp+168h+var_113], 1
.text:00000000000031E5                 mov     [rsp+168h+var_112], 0
.text:00000000000031EA                 mov     [rsp+168h+var_111], 0
.text:00000000000031EF                 mov     [rsp+168h+var_120], 4
.text:00000000000031F7                 mov     [rsp+168h+var_110], 0
.text:00000000000031FC                 mov     [rsp+168h+var_10F], 1
.text:0000000000003201                 mov     [rsp+168h+var_10C], 0
.text:0000000000003206                 mov     [rsp+168h+var_10B], 0
.text:000000000000320B                 mov     [rsp+168h+var_106], 0
.text:0000000000003210                 mov     [rsp+168h+var_10A], 0
.text:0000000000003215                 mov     [rsp+168h+var_109], 0
.text:000000000000321A                 mov     [rsp+168h+var_108], 0
.text:000000000000321F                 mov     [rsp+168h+var_FF], 0
.text:0000000000003224                 mov     [rsp+168h+var_105], 1
.text:0000000000003229                 mov     [rsp+168h+var_104], 0
.text:000000000000322E                 mov     [rsp+168h+var_100], 0
.text:0000000000003233                 mov     [rsp+168h+var_FE], 0
.text:0000000000003238                 mov     [rsp+168h+var_11C], 2
.text:0000000000003240                 mov     [rsp+168h+var_FC], 0
.text:0000000000003245                 mov     [rsp+168h+var_128], 0
.text:000000000000324D                 mov     [rsp+168h+var_FD], 1
.text:0000000000003252                 mov     [rsp+168h+var_118], 180h
.text:000000000000325A                 mov     [rsp+168h+var_F9], 0
.text:000000000000325F                 mov     [rsp+168h+var_F8], 0
.text:0000000000003264                 mov     [rsp+168h+var_FB], 0
.text:0000000000003269                 mov     [rsp+168h+var_102], 0
.text:000000000000326E                 mov     [rsp+168h+var_103], 0
.text:0000000000003273                 mov     [rsp+168h+var_107], 0
.text:0000000000003278                 mov     [rsp+168h+var_101], 0
.text:000000000000327D                 mov     [rsp+168h+var_FA], 0
.text:0000000000003282                 mov     [rsp+168h+var_E8], 0
.text:000000000000328E                 mov     [rsp+168h+var_E0], 0
.text:000000000000329A                 mov     cs:owner_name, 0
.text:00000000000032A5                 mov     cs:group_name, 0
.text:00000000000032B0                 mov     cs:strip_files, 0
.text:00000000000032B7                 mov     cs:dir_arg, 0
.text:00000000000032BE                 call    _umask
.text:00000000000032C3                 mov     [rsp+168h+var_140], 0
.text:00000000000032CC                 mov     [rsp+168h+var_141], 0
.text:00000000000032D1                 mov     [rsp+168h+var_142], 0
.text:00000000000032D6                 mov     [rsp+168h+var_143], 0
.text:00000000000032DB                 mov     [rsp+168h+var_158], 0
.text:00000000000032E4                 mov     [rsp+168h+var_150], 0
.text:00000000000032ED                 nop     dword ptr [rax]
.text:00000000000032F0
.text:00000000000032F0 loc_32F0:                               ; CODE XREF: main+218↓j
.text:00000000000032F0                                         ; main+246↓j ...
.text:00000000000032F0                 lea     rdx, shortopts  ; "bcCsDdg:m:o:pt:TvS:Z"
.text:00000000000032F7                 xor     r8d, r8d        ; longind
.text:00000000000032FA                 mov     rcx, r12        ; longopts
.text:00000000000032FD                 mov     rsi, rbp        ; argv
.text:0000000000003300                 mov     edi, ebx        ; argc
.text:0000000000003302                 call    _getopt_long
.text:0000000000003307                 cmp     eax, 0FFFFFFFFh
.text:000000000000330A                 jz      loc_3594
.text:0000000000003310                 cmp     eax, 64h ; 'd'
.text:0000000000003313                 jz      loc_33F5
.text:0000000000003319                 jle     short loc_3350
.text:000000000000331B                 cmp     eax, 73h ; 's'
.text:000000000000331E                 jz      loc_34CD
.text:0000000000003324                 jg      short loc_3390
.text:0000000000003326                 cmp     eax, 6Dh ; 'm'
.text:0000000000003329                 jz      loc_34BC
.text:000000000000332F                 jle     loc_34A0
.text:0000000000003335                 cmp     eax, 6Fh ; 'o'
.text:0000000000003338                 jz      loc_3401
.text:000000000000333E                 cmp     eax, 70h ; 'p'
.text:0000000000003341                 jnz     short loc_337C
.text:0000000000003343                 mov     [rsp+168h+var_109], 1
.text:0000000000003348                 jmp     short loc_32F0
.text:0000000000003348 ; ---------------------------------------------------------------------------
.text:000000000000334A                 align 10h
.text:0000000000003350
.text:0000000000003350 loc_3350:                               ; CODE XREF: main+1E9↑j
.text:0000000000003350                 cmp     eax, 53h ; 'S'
.text:0000000000003353                 jz      loc_34FE
.text:0000000000003359                 jle     short loc_33D0
.text:000000000000335B                 cmp     eax, 5Ah ; 'Z'
.text:000000000000335E                 jz      loc_3427
.text:0000000000003364                 jle     loc_3414
.text:000000000000336A                 cmp     eax, 62h ; 'b'
.text:000000000000336D                 jz      loc_34E5
.text:0000000000003373                 cmp     eax, 63h ; 'c'
.text:0000000000003376                 jz      loc_32F0
.text:000000000000337C
.text:000000000000337C loc_337C:                               ; CODE XREF: main+211↑j
.text:000000000000337C                                         ; main+27F↓j ...
.text:000000000000337C                 mov     edi, 1          ; status
.text:0000000000003381                 call    usage
.text:0000000000003381 ; ---------------------------------------------------------------------------
.text:0000000000003386                 align 10h
.text:0000000000003390
.text:0000000000003390 loc_3390:                               ; CODE XREF: main+1F4↑j
.text:0000000000003390                 cmp     eax, 76h ; 'v'
.text:0000000000003393                 jz      loc_354D
.text:0000000000003399                 jle     loc_352F
.text:000000000000339F                 cmp     eax, 80h
.text:00000000000033A4                 jz      loc_3515
.text:00000000000033AA                 cmp     eax, 81h
.text:00000000000033AF                 jnz     short loc_337C
.text:00000000000033B1                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; src
.text:00000000000033B8                 call    xstrdup
.text:00000000000033BD                 mov     [rsp+168h+var_141], 1
.text:00000000000033C2                 mov     cs:strip_program, rax
.text:00000000000033C9                 jmp     loc_32F0
.text:00000000000033C9 ; ---------------------------------------------------------------------------
.text:00000000000033CE                 align 10h
.text:00000000000033D0
.text:00000000000033D0 loc_33D0:                               ; CODE XREF: main+229↑j
.text:00000000000033D0                 cmp     eax, 0FFFFFF7Eh
.text:00000000000033D5                 jz      loc_3BD5
.text:00000000000033DB                 jle     loc_3461
.text:00000000000033E1                 cmp     eax, 43h ; 'C'
.text:00000000000033E4                 jz      short loc_3455
.text:00000000000033E6                 cmp     eax, 44h ; 'D'
.text:00000000000033E9                 jnz     short loc_337C
.text:00000000000033EB                 mov     [rsp+168h+var_143], 1
.text:00000000000033F0                 jmp     loc_32F0
.text:00000000000033F5 ; ---------------------------------------------------------------------------
.text:00000000000033F5
.text:00000000000033F5 loc_33F5:                               ; CODE XREF: main+1E3↑j
.text:00000000000033F5                 mov     cs:dir_arg, 1
.text:00000000000033FC                 jmp     loc_32F0
.text:0000000000003401 ; ---------------------------------------------------------------------------
.text:0000000000003401
.text:0000000000003401 loc_3401:                               ; CODE XREF: main+208↑j
.text:0000000000003401                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000003408                 mov     cs:owner_name, rax
.text:000000000000340F                 jmp     loc_32F0
.text:0000000000003414 ; ---------------------------------------------------------------------------
.text:0000000000003414
.text:0000000000003414 loc_3414:                               ; CODE XREF: main+234↑j
.text:0000000000003414                 cmp     eax, 54h ; 'T'
.text:0000000000003417                 jnz     loc_337C
.text:000000000000341D                 mov     [rsp+168h+var_142], 1
.text:0000000000003422                 jmp     loc_32F0
.text:0000000000003427 ; ---------------------------------------------------------------------------
.text:0000000000003427
.text:0000000000003427 loc_3427:                               ; CODE XREF: main+22E↑j
.text:0000000000003427                 cmp     cs:selinux_enabled, 0
.text:000000000000342E                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000003435                 jz      loc_3557
.text:000000000000343B                 test    rax, rax
.text:000000000000343E                 mov     cs:use_default_selinux_context, 0
.text:0000000000003445                 jz      loc_3A4A
.text:000000000000344B                 mov     [rsp+168h+var_140], rax
.text:0000000000003450                 jmp     loc_32F0
.text:0000000000003455 ; ---------------------------------------------------------------------------
.text:0000000000003455
.text:0000000000003455 loc_3455:                               ; CODE XREF: main+2B4↑j
.text:0000000000003455                 mov     cs:copy_only_if_needed, 1
.text:000000000000345C                 jmp     loc_32F0
.text:0000000000003461 ; ---------------------------------------------------------------------------
.text:0000000000003461
.text:0000000000003461 loc_3461:                               ; CODE XREF: main+2AB↑j
.text:0000000000003461                 cmp     eax, 0FFFFFF7Dh
.text:0000000000003466                 jnz     loc_337C
.text:000000000000346C                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000003473                 mov     rcx, cs:Version
.text:000000000000347A                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:0000000000003481                 lea     rdx, unk_16506
.text:0000000000003488                 lea     rsi, aInstall   ; "install"
.text:000000000000348F                 xor     r9d, r9d
.text:0000000000003492                 xor     eax, eax
.text:0000000000003494                 call    version_etc
.text:0000000000003499                 xor     edi, edi        ; status
.text:000000000000349B                 call    _exit
.text:00000000000034A0 ; ---------------------------------------------------------------------------
.text:00000000000034A0
.text:00000000000034A0 loc_34A0:                               ; CODE XREF: main+1FF↑j
.text:00000000000034A0                 cmp     eax, 67h ; 'g'
.text:00000000000034A3                 jnz     loc_337C
.text:00000000000034A9                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:00000000000034B0                 mov     cs:group_name, rax
.text:00000000000034B7                 jmp     loc_32F0
.text:00000000000034BC ; ---------------------------------------------------------------------------
.text:00000000000034BC
.text:00000000000034BC loc_34BC:                               ; CODE XREF: main+1F9↑j
.text:00000000000034BC                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:00000000000034C3                 mov     [rsp+168h+var_150], rax
.text:00000000000034C8                 jmp     loc_32F0
.text:00000000000034CD ; ---------------------------------------------------------------------------
.text:00000000000034CD
.text:00000000000034CD loc_34CD:                               ; CODE XREF: main+1EE↑j
.text:00000000000034CD                 xor     esi, esi        ; handler
.text:00000000000034CF                 mov     edi, 11h        ; sig
.text:00000000000034D4                 mov     cs:strip_files, 1
.text:00000000000034DB                 call    _signal
.text:00000000000034E0                 jmp     loc_32F0
.text:00000000000034E5 ; ---------------------------------------------------------------------------
.text:00000000000034E5
.text:00000000000034E5 loc_34E5:                               ; CODE XREF: main+23D↑j
.text:00000000000034E5                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:00000000000034EC                 mov     r13d, 1
.text:00000000000034F2                 test    rax, rax
.text:00000000000034F5                 cmovnz  r14, rax
.text:00000000000034F9                 jmp     loc_32F0
.text:00000000000034FE ; ---------------------------------------------------------------------------
.text:00000000000034FE
.text:00000000000034FE loc_34FE:                               ; CODE XREF: main+223↑j
.text:00000000000034FE                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000003505                 mov     r13d, 1
.text:000000000000350B                 mov     [rsp+168h+var_158], rax
.text:0000000000003510                 jmp     loc_32F0
.text:0000000000003515 ; ---------------------------------------------------------------------------
.text:0000000000003515
.text:0000000000003515 loc_3515:                               ; CODE XREF: main+274↑j
.text:0000000000003515                 cmp     cs:selinux_enabled, 0
.text:000000000000351C                 jz      short loc_356E
.text:000000000000351E                 mov     [rsp+168h+var_103], 1
.text:0000000000003523                 mov     cs:use_default_selinux_context, 0
.text:000000000000352A                 jmp     loc_32F0
.text:000000000000352F ; ---------------------------------------------------------------------------
.text:000000000000352F
.text:000000000000352F loc_352F:                               ; CODE XREF: main+269↑j
.text:000000000000352F                 cmp     eax, 74h ; 't'
.text:0000000000003532                 jnz     loc_337C
.text:0000000000003538                 test    r15, r15
.text:000000000000353B                 jnz     loc_3C8B
.text:0000000000003541                 mov     r15, cs:optarg@@GLIBC_2_2_5
.text:0000000000003548                 jmp     loc_32F0
.text:000000000000354D ; ---------------------------------------------------------------------------
.text:000000000000354D
.text:000000000000354D loc_354D:                               ; CODE XREF: main+263↑j
.text:000000000000354D                 mov     [rsp+168h+var_FA], 1
.text:0000000000003552                 jmp     loc_32F0
.text:0000000000003557 ; ---------------------------------------------------------------------------
.text:0000000000003557
.text:0000000000003557 loc_3557:                               ; CODE XREF: main+305↑j
.text:0000000000003557                 test    rax, rax
.text:000000000000355A                 jz      loc_32F0
.text:0000000000003560                 mov     edx, 5
.text:0000000000003565                 lea     rsi, aWarningIgnorin ; "warning: ignoring --context; it require"...
.text:000000000000356C                 jmp     short loc_357A
.text:000000000000356E ; ---------------------------------------------------------------------------
.text:000000000000356E
.text:000000000000356E loc_356E:                               ; CODE XREF: main+3EC↑j
.text:000000000000356E                 lea     rsi, aWarningIgnorin_0 ; "WARNING: ignoring --preserve-context; t"...
.text:0000000000003575                 mov     edx, 5          ; category
.text:000000000000357A
.text:000000000000357A loc_357A:                               ; CODE XREF: main+43C↑j
.text:000000000000357A                 xor     edi, edi        ; domainname
.text:000000000000357C                 call    _dcgettext
.text:0000000000003581                 xor     esi, esi        ; errnum
.text:0000000000003583                 mov     rdx, rax        ; format
.text:0000000000003586                 xor     edi, edi        ; status
.text:0000000000003588                 xor     eax, eax
.text:000000000000358A                 call    _error
.text:000000000000358F                 jmp     loc_32F0
.text:0000000000003594 ; ---------------------------------------------------------------------------
.text:0000000000003594
.text:0000000000003594 loc_3594:                               ; CODE XREF: main+1DA↑j
.text:0000000000003594                 cmp     cs:dir_arg, 0
.text:000000000000359B                 jnz     loc_3826
.text:00000000000035A1                 test    r15, r15
.text:00000000000035A4                 jz      short loc_35E5
.text:00000000000035A6                 lea     rdx, [rsp+168h+stat_buf] ; stat_buf
.text:00000000000035AE                 mov     rsi, r15        ; filename
.text:00000000000035B1                 mov     edi, 1          ; ver
.text:00000000000035B6                 call    ___xstat
.text:00000000000035BB                 cmp     [rsp+168h+var_143], 0
.text:00000000000035C0                 jnz     short loc_35CA
.text:00000000000035C2                 test    eax, eax
.text:00000000000035C4                 jnz     loc_3C4C
.text:00000000000035CA
.text:00000000000035CA loc_35CA:                               ; CODE XREF: main+490↑j
.text:00000000000035CA                 test    eax, eax
.text:00000000000035CC                 jnz     short loc_35E5
.text:00000000000035CE                 mov     eax, [rsp+168h+stat_buf.st_mode]
.text:00000000000035D5                 and     eax, 0F000h
.text:00000000000035DA                 cmp     eax, 4000h
.text:00000000000035DF                 jnz     loc_3D3E
.text:00000000000035E5
.text:00000000000035E5 loc_35E5:                               ; CODE XREF: main+474↑j
.text:00000000000035E5                                         ; main+49C↑j ...
.text:00000000000035E5                 xor     eax, eax
.text:00000000000035E7                 test    r13b, r13b
.text:00000000000035EA                 jnz     loc_3A27
.text:00000000000035F0
.text:00000000000035F0 loc_35F0:                               ; CODE XREF: main+915↓j
.text:00000000000035F0                 mov     rdi, [rsp+168h+var_158]
.text:00000000000035F5                 mov     [rsp+168h+var_128], eax
.text:00000000000035F9                 call    set_simple_backup_suffix
.text:00000000000035FE                 cmp     [rsp+168h+var_103], 0
.text:0000000000003603                 jz      loc_38BA
.text:0000000000003609                 cmp     [rsp+168h+var_107], 0
.text:000000000000360E                 jnz     loc_3D1A
.text:0000000000003614                 cmp     [rsp+168h+var_140], 0
.text:000000000000361A                 jnz     loc_3D1A
.text:0000000000003620
.text:0000000000003620 loc_3620:                               ; CODE XREF: main+790↓j
.text:0000000000003620                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000003627                 sub     ebx, eax
.text:0000000000003629                 lea     rax, [rbp+rax*8+0]
.text:000000000000362E                 mov     [rsp+168h+var_158], rax
.text:0000000000003633                 movzx   eax, cs:dir_arg
.text:000000000000363A                 xor     eax, 1
.text:000000000000363D                 test    r15, r15
.text:0000000000003640                 setz    dl
.text:0000000000003643                 and     eax, edx
.text:0000000000003645                 movzx   edx, al
.text:0000000000003648                 cmp     edx, ebx
.text:000000000000364A                 jge     loc_3CD3
.text:0000000000003650                 cmp     [rsp+168h+var_142], 0
.text:0000000000003655                 jz      loc_3908
.text:000000000000365B                 test    r15, r15
.text:000000000000365E                 jnz     loc_3CAF
.text:0000000000003664                 cmp     ebx, 2
.text:0000000000003667                 jg      loc_3DDD
.text:000000000000366D
.text:000000000000366D loc_366D:                               ; CODE XREF: main+7DA↓j
.text:000000000000366D                                         ; main+7E6↓j ...
.text:000000000000366D                 mov     rax, [rsp+168h+var_150]
.text:0000000000003672                 test    rax, rax
.text:0000000000003675                 jz      short loc_36C8
.text:0000000000003677                 mov     rdi, rax
.text:000000000000367A                 call    mode_compile
.text:000000000000367F                 test    rax, rax
.text:0000000000003682                 mov     rbp, rax
.text:0000000000003685                 jz      loc_3DA9
.text:000000000000368B                 xor     r8d, r8d
.text:000000000000368E                 mov     rcx, rax
.text:0000000000003691                 xor     edx, edx
.text:0000000000003693                 xor     esi, esi
.text:0000000000003695                 xor     edi, edi
.text:0000000000003697                 call    mode_adjust
.text:000000000000369C                 lea     r8, dir_mode_bits
.text:00000000000036A3                 xor     edi, edi
.text:00000000000036A5                 mov     rcx, rbp
.text:00000000000036A8                 xor     edx, edx
.text:00000000000036AA                 mov     esi, 1
.text:00000000000036AF                 mov     cs:mode, eax
.text:00000000000036B5                 call    mode_adjust
.text:00000000000036BA                 mov     rdi, rbp        ; ptr
.text:00000000000036BD                 mov     cs:dir_mode, eax
.text:00000000000036C3                 call    free
.text:00000000000036C8
.text:00000000000036C8 loc_36C8:                               ; CODE XREF: main+545↑j
.text:00000000000036C8                 cmp     [rsp+168h+var_141], 0
.text:00000000000036CD                 jz      short loc_36DC
.text:00000000000036CF                 cmp     cs:strip_files, 0
.text:00000000000036D6                 jz      loc_3A54
.text:00000000000036DC
.text:00000000000036DC loc_36DC:                               ; CODE XREF: main+59D↑j
.text:00000000000036DC                                         ; main+945↓j
.text:00000000000036DC                 cmp     cs:copy_only_if_needed, 0
.text:00000000000036E3                 jz      short loc_3719
.text:00000000000036E5                 cmp     [rsp+168h+var_109], 0
.text:00000000000036EA                 jnz     loc_3D9B
.text:00000000000036F0                 cmp     cs:strip_files, 0
.text:00000000000036F7                 mov     edx, 5
.text:00000000000036FC                 lea     rsi, aOptionsCompare ; "options --compare (-C) and --strip are "...
.text:0000000000003703                 jnz     loc_3D81
.text:0000000000003709                 test    cs:mode, 0FFFF0E00h
.text:0000000000003713                 jnz     loc_3A7A
.text:0000000000003719
.text:0000000000003719 loc_3719:                               ; CODE XREF: main+5B3↑j
.text:0000000000003719                                         ; main+96B↓j
.text:0000000000003719                 mov     rdi, cs:owner_name ; name
.text:0000000000003720                 test    rdi, rdi
.text:0000000000003723                 jz      loc_39F8
.text:0000000000003729                 call    _getpwnam
.text:000000000000372E                 test    rax, rax
.text:0000000000003731                 jz      loc_3B41
.text:0000000000003737                 mov     eax, [rax+10h]
.text:000000000000373A
.text:000000000000373A loc_373A:                               ; CODE XREF: main+A3A↓j
.text:000000000000373A                 mov     cs:owner_id, eax
.text:0000000000003740                 call    _endpwent
.text:0000000000003745
.text:0000000000003745 loc_3745:                               ; CODE XREF: main+8D2↓j
.text:0000000000003745                 mov     rdi, cs:group_name ; name
.text:000000000000374C                 test    rdi, rdi
.text:000000000000374F                 jz      loc_39E9
.text:0000000000003755                 call    _getgrnam
.text:000000000000375A                 test    rax, rax
.text:000000000000375D                 jz      loc_3ADC
.text:0000000000003763                 mov     eax, [rax+10h]
.text:0000000000003766
.text:0000000000003766 loc_3766:                               ; CODE XREF: main+9D5↓j
.text:0000000000003766                 mov     cs:group_id, eax
.text:000000000000376C                 call    _endgrent
.text:0000000000003771
.text:0000000000003771 loc_3771:                               ; CODE XREF: main+8C3↓j
.text:0000000000003771                 cmp     cs:dir_arg, 0
.text:0000000000003778                 jnz     loc_3A07
.text:000000000000377E                 call    hash_init
.text:0000000000003783                 test    r15, r15
.text:0000000000003786                 jz      loc_3860
.text:000000000000378C                 mov     rdi, [rsp+168h+var_160]
.text:0000000000003791                 xor     ebp, ebp
.text:0000000000003793                 xor     r13d, r13d
.text:0000000000003796                 call    dest_info_init
.text:000000000000379B                 mov     [rsp+168h+var_150], r15
.text:00000000000037A0                 jmp     short loc_37BC
.text:00000000000037A2 ; ---------------------------------------------------------------------------
.text:00000000000037A2
.text:00000000000037A2 loc_37A2:                               ; CODE XREF: main+6D6↓j
.text:00000000000037A2                                         ; main+6EA↓j
.text:00000000000037A2                 mov     rdi, r15        ; ptr
.text:00000000000037A5                 mov     r13d, 1
.text:00000000000037AB                 call    free
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: main+6F4↓j
.text:00000000000037B0                 add     rbp, 1
.text:00000000000037B4                 cmp     ebx, ebp
.text:00000000000037B6                 jle     loc_388E
.text:00000000000037BC
.text:00000000000037BC loc_37BC:                               ; CODE XREF: main+670↑j
.text:00000000000037BC                 mov     rax, [rsp+168h+var_158]
.text:00000000000037C1                 test    ebp, ebp
.text:00000000000037C3                 setz    r12b
.text:00000000000037C7                 and     r12b, [rsp+168h+var_143]
.text:00000000000037CC                 mov     r14, [rax+rbp*8]
.text:00000000000037D0                 mov     rdi, r14
.text:00000000000037D3                 call    last_component
.text:00000000000037D8                 mov     rdi, [rsp+168h+var_150]
.text:00000000000037DD                 xor     edx, edx
.text:00000000000037DF                 mov     rsi, rax
.text:00000000000037E2                 call    file_name_concat
.text:00000000000037E7                 test    r12b, r12b
.text:00000000000037EA                 mov     r15, rax
.text:00000000000037ED                 jz      short loc_3808
.text:00000000000037EF                 mov     rdx, [rsp+168h+var_160]
.text:00000000000037F4                 mov     ecx, 1
.text:00000000000037F9                 mov     rsi, rax
.text:00000000000037FC                 mov     rdi, r14
.text:00000000000037FF                 call    mkancesdirs_safe_wd
.text:0000000000003804                 test    al, al
.text:0000000000003806                 jz      short loc_37A2
.text:0000000000003808
.text:0000000000003808 loc_3808:                               ; CODE XREF: main+6BD↑j
.text:0000000000003808                 mov     rdx, [rsp+168h+var_160]
.text:000000000000380D                 mov     rsi, r15        ; path
.text:0000000000003810                 mov     rdi, r14        ; file
.text:0000000000003813                 call    install_file_in_file
.text:0000000000003818                 test    al, al
.text:000000000000381A                 jz      short loc_37A2
.text:000000000000381C                 mov     rdi, r15        ; ptr
.text:000000000000381F                 call    free
.text:0000000000003824                 jmp     short loc_37B0
.text:0000000000003826 ; ---------------------------------------------------------------------------
.text:0000000000003826
.text:0000000000003826 loc_3826:                               ; CODE XREF: main+46B↑j
.text:0000000000003826                 cmp     cs:strip_files, 0
.text:000000000000382D                 jnz     loc_3E09
.text:0000000000003833                 test    r15, r15
.text:0000000000003836                 jz      loc_35E5
.text:000000000000383C                 lea     rsi, aTargetDirector ; "target directory not allowed when insta"...
.text:0000000000003843                 mov     edx, 5          ; category
.text:0000000000003848                 xor     edi, edi        ; domainname
.text:000000000000384A                 call    _dcgettext
.text:000000000000384F                 xor     esi, esi        ; errnum
.text:0000000000003851                 mov     rdx, rax        ; format
.text:0000000000003854                 mov     edi, 1          ; status
.text:0000000000003859                 xor     eax, eax
.text:000000000000385B                 call    _error
.text:0000000000003860
.text:0000000000003860 loc_3860:                               ; CODE XREF: main+656↑j
.text:0000000000003860                 cmp     [rsp+168h+var_143], 0
.text:0000000000003865                 mov     rax, [rsp+168h+var_158]
.text:000000000000386A                 mov     rbp, [rax+8]
.text:000000000000386E                 mov     rbx, [rax]
.text:0000000000003871                 jnz     loc_3AA0
.text:0000000000003877                 mov     rdx, [rsp+168h+var_160]
.text:000000000000387C                 mov     rsi, rbp        ; path
.text:000000000000387F                 mov     rdi, rbx        ; file
.text:0000000000003882                 call    install_file_in_file
.text:0000000000003887                 xor     eax, 1
.text:000000000000388A
.text:000000000000388A loc_388A:                               ; CODE XREF: main+9A7↓j
.text:000000000000388A                 movzx   r13d, al
.text:000000000000388E
.text:000000000000388E loc_388E:                               ; CODE XREF: main+686↑j
.text:000000000000388E                                         ; main+8F2↓j
.text:000000000000388E                 mov     rcx, [rsp+168h+var_40]
.text:0000000000003896                 xor     rcx, fs:28h
.text:000000000000389F                 mov     eax, r13d
.text:00000000000038A2                 jnz     loc_3E04
.text:00000000000038A8                 add     rsp, 138h
.text:00000000000038AF                 pop     rbx
.text:00000000000038B0                 pop     rbp
.text:00000000000038B1                 pop     r12
.text:00000000000038B3                 pop     r13
.text:00000000000038B5                 pop     r14
.text:00000000000038B7                 pop     r15
.text:00000000000038B9                 retn
.text:00000000000038BA ; ---------------------------------------------------------------------------
.text:00000000000038BA
.text:00000000000038BA loc_38BA:                               ; CODE XREF: main+4D3↑j
.text:00000000000038BA                 cmp     [rsp+168h+var_140], 0
.text:00000000000038C0                 jz      loc_3620
.text:00000000000038C6                 call    ___errno_location
.text:00000000000038CB                 mov     rdi, [rsp+168h+var_140]
.text:00000000000038D0                 mov     dword ptr [rax], 5Fh ; '_'
.text:00000000000038D6                 mov     rbx, rax
.text:00000000000038D9                 call    quote
.text:00000000000038DE                 lea     rsi, aFailedToSetDef ; "failed to set default file creation con"...
.text:00000000000038E5                 mov     edx, 5          ; category
.text:00000000000038EA                 xor     edi, edi        ; domainname
.text:00000000000038EC                 mov     rbp, rax
.text:00000000000038EF                 call    _dcgettext
.text:00000000000038F4                 mov     esi, [rbx]      ; errnum
.text:00000000000038F6                 mov     rdx, rax        ; format
.text:00000000000038F9                 mov     rcx, rbp
.text:00000000000038FC                 mov     edi, 1          ; status
.text:0000000000003901                 xor     eax, eax
.text:0000000000003903                 call    _error
.text:0000000000003908
.text:0000000000003908 loc_3908:                               ; CODE XREF: main+525↑j
.text:0000000000003908                 test    al, al
.text:000000000000390A                 jz      loc_366D
.text:0000000000003910                 xor     r15d, r15d
.text:0000000000003913                 cmp     ebx, 1
.text:0000000000003916                 jz      loc_366D
.text:000000000000391C                 mov     rcx, [rsp+168h+var_158]
.text:0000000000003921                 movsxd  rax, ebx
.text:0000000000003924                 mov     r12d, 1
.text:000000000000392A                 lea     r13, [rcx+rax*8-8]
.text:000000000000392F                 mov     rbp, [r13+0]
.text:0000000000003933                 mov     rdi, rbp
.text:0000000000003936                 call    last_component
.text:000000000000393B                 mov     rdi, rax
.text:000000000000393E                 mov     rdx, rax
.text:0000000000003941                 movzx   eax, [rsp+168h+var_142]
.text:0000000000003946                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000394A                 repne scasb
.text:000000000000394C                 mov     rax, rcx
.text:000000000000394F                 not     rax
.text:0000000000003952                 sub     rax, 1
.text:0000000000003956                 jz      short loc_3964
.text:0000000000003958                 xor     r12d, r12d
.text:000000000000395B                 cmp     byte ptr [rdx+rax-1], 2Fh ; '/'
.text:0000000000003960                 setz    r12b
.text:0000000000003964
.text:0000000000003964 loc_3964:                               ; CODE XREF: main+826↑j
.text:0000000000003964                 lea     rdx, [rsp+168h+stat_buf] ; stat_buf
.text:000000000000396C                 mov     rsi, rbp        ; filename
.text:000000000000396F                 mov     edi, 1          ; ver
.text:0000000000003974                 call    ___xstat
.text:0000000000003979                 test    eax, eax
.text:000000000000397B                 jz      loc_3BA6
.text:0000000000003981                 call    ___errno_location
.text:0000000000003986                 mov     r14d, [rax]
.text:0000000000003989                 test    r14d, r14d
.text:000000000000398C                 jz      loc_3BA6
.text:0000000000003992                 cmp     r14d, 2
.text:0000000000003996                 jnz     loc_3C14
.text:000000000000399C
.text:000000000000399C loc_399C:                               ; CODE XREF: main+A8C↓j
.text:000000000000399C                 test    r12d, r12d
.text:000000000000399F                 jnz     loc_3BDC
.text:00000000000039A5                 xor     r15d, r15d
.text:00000000000039A8                 cmp     ebx, 2
.text:00000000000039AB                 jz      loc_366D
.text:00000000000039B1                 mov     rsi, [r13+0]
.text:00000000000039B5                 mov     edi, 4
.text:00000000000039BA                 call    quotearg_style
.text:00000000000039BF                 lea     rsi, aTargetSIsNotAD ; "target %s is not a directory"
.text:00000000000039C6                 mov     rbx, rax
.text:00000000000039C9                 mov     edx, 5          ; category
.text:00000000000039CE                 xor     edi, edi        ; domainname
.text:00000000000039D0                 call    _dcgettext
.text:00000000000039D5                 mov     rcx, rbx
.text:00000000000039D8                 mov     rdx, rax        ; format
.text:00000000000039DB                 xor     esi, esi        ; errnum
.text:00000000000039DD                 mov     edi, 1          ; status
.text:00000000000039E2                 xor     eax, eax
.text:00000000000039E4                 call    _error
.text:00000000000039E9
.text:00000000000039E9 loc_39E9:                               ; CODE XREF: main+61F↑j
.text:00000000000039E9                 mov     cs:group_id, 0FFFFFFFFh
.text:00000000000039F3                 jmp     loc_3771
.text:00000000000039F8 ; ---------------------------------------------------------------------------
.text:00000000000039F8
.text:00000000000039F8 loc_39F8:                               ; CODE XREF: main+5F3↑j
.text:00000000000039F8                 mov     cs:owner_id, 0FFFFFFFFh
.text:0000000000003A02                 jmp     loc_3745
.text:0000000000003A07 ; ---------------------------------------------------------------------------
.text:0000000000003A07
.text:0000000000003A07 loc_3A07:                               ; CODE XREF: main+648↑j
.text:0000000000003A07                 mov     rcx, [rsp+168h+var_160]
.text:0000000000003A0C                 mov     rsi, [rsp+168h+var_158]
.text:0000000000003A11                 lea     rdx, process_dir
.text:0000000000003A18                 mov     edi, ebx
.text:0000000000003A1A                 call    savewd_process_files
.text:0000000000003A1F                 mov     r13d, eax
.text:0000000000003A22                 jmp     loc_388E
.text:0000000000003A27 ; ---------------------------------------------------------------------------
.text:0000000000003A27
.text:0000000000003A27 loc_3A27:                               ; CODE XREF: main+4BA↑j
.text:0000000000003A27                 lea     rsi, aBackupType ; "backup type"
.text:0000000000003A2E                 xor     edi, edi        ; domainname
.text:0000000000003A30                 mov     edx, 5          ; category
.text:0000000000003A35                 call    _dcgettext
.text:0000000000003A3A                 mov     rsi, r14
.text:0000000000003A3D                 mov     rdi, rax
.text:0000000000003A40                 call    xget_version
.text:0000000000003A45                 jmp     loc_35F0
.text:0000000000003A4A ; ---------------------------------------------------------------------------
.text:0000000000003A4A
.text:0000000000003A4A loc_3A4A:                               ; CODE XREF: main+315↑j
.text:0000000000003A4A                 mov     [rsp+168h+var_107], 1
.text:0000000000003A4F                 jmp     loc_32F0
.text:0000000000003A54 ; ---------------------------------------------------------------------------
.text:0000000000003A54
.text:0000000000003A54 loc_3A54:                               ; CODE XREF: main+5A6↑j
.text:0000000000003A54                 lea     rsi, aWarningIgnorin_1 ; "WARNING: ignoring --strip-program optio"...
.text:0000000000003A5B                 xor     edi, edi        ; domainname
.text:0000000000003A5D                 mov     edx, 5          ; category
.text:0000000000003A62                 call    _dcgettext
.text:0000000000003A67                 xor     esi, esi        ; errnum
.text:0000000000003A69                 mov     rdx, rax        ; format
.text:0000000000003A6C                 xor     edi, edi        ; status
.text:0000000000003A6E                 xor     eax, eax
.text:0000000000003A70                 call    _error
.text:0000000000003A75                 jmp     loc_36DC
.text:0000000000003A7A ; ---------------------------------------------------------------------------
.text:0000000000003A7A
.text:0000000000003A7A loc_3A7A:                               ; CODE XREF: main+5E3↑j
.text:0000000000003A7A                 lea     rsi, aTheCompareCOpt ; "the --compare (-C) option is ignored wh"...
.text:0000000000003A81                 xor     edi, edi        ; domainname
.text:0000000000003A83                 mov     edx, 5          ; category
.text:0000000000003A88                 call    _dcgettext
.text:0000000000003A8D                 xor     esi, esi        ; errnum
.text:0000000000003A8F                 mov     rdx, rax        ; format
.text:0000000000003A92                 xor     edi, edi        ; status
.text:0000000000003A94                 xor     eax, eax
.text:0000000000003A96                 call    _error
.text:0000000000003A9B                 jmp     loc_3719
.text:0000000000003AA0 ; ---------------------------------------------------------------------------
.text:0000000000003AA0
.text:0000000000003AA0 loc_3AA0:                               ; CODE XREF: main+741↑j
.text:0000000000003AA0                 mov     rdx, [rsp+168h+var_160]
.text:0000000000003AA5                 xor     ecx, ecx
.text:0000000000003AA7                 mov     rsi, rbp
.text:0000000000003AAA                 mov     rdi, rbx
.text:0000000000003AAD                 xor     r13d, r13d
.text:0000000000003AB0                 call    mkancesdirs_safe_wd
.text:0000000000003AB5                 test    al, al
.text:0000000000003AB7                 jz      short loc_3ACD
.text:0000000000003AB9                 mov     rdx, [rsp+168h+var_160]
.text:0000000000003ABE                 mov     rsi, rbp        ; path
.text:0000000000003AC1                 mov     rdi, rbx        ; file
.text:0000000000003AC4                 call    install_file_in_file
.text:0000000000003AC9                 movzx   r13d, al
.text:0000000000003ACD
.text:0000000000003ACD loc_3ACD:                               ; CODE XREF: main+987↑j
.text:0000000000003ACD                 and     r13d, 1
.text:0000000000003AD1                 mov     eax, r13d
.text:0000000000003AD4                 xor     eax, 1
.text:0000000000003AD7                 jmp     loc_388A
.text:0000000000003ADC ; ---------------------------------------------------------------------------
.text:0000000000003ADC
.text:0000000000003ADC loc_3ADC:                               ; CODE XREF: main+62D↑j
.text:0000000000003ADC                 mov     rdi, cs:group_name ; nptr
.text:0000000000003AE3                 lea     rcx, [rsp+168h+var_130]
.text:0000000000003AE8                 xor     r8d, r8d
.text:0000000000003AEB                 xor     edx, edx
.text:0000000000003AED                 xor     esi, esi
.text:0000000000003AEF                 call    xstrtoul
.text:0000000000003AF4                 test    eax, eax
.text:0000000000003AF6                 jnz     short loc_3B0B
.text:0000000000003AF8                 mov     rax, [rsp+168h+var_130]
.text:0000000000003AFD                 mov     edx, 0FFFFFFFFh
.text:0000000000003B02                 cmp     rax, rdx
.text:0000000000003B05                 jbe     loc_3766
.text:0000000000003B0B
.text:0000000000003B0B loc_3B0B:                               ; CODE XREF: main+9C6↑j
.text:0000000000003B0B                 mov     rdi, cs:group_name
.text:0000000000003B12                 call    quote
.text:0000000000003B17                 lea     rsi, aInvalidGroupS ; "invalid group %s"
.text:0000000000003B1E                 mov     rbx, rax
.text:0000000000003B21                 mov     edx, 5          ; category
.text:0000000000003B26                 xor     edi, edi        ; domainname
.text:0000000000003B28                 call    _dcgettext
.text:0000000000003B2D                 mov     rcx, rbx
.text:0000000000003B30                 mov     rdx, rax        ; format
.text:0000000000003B33                 xor     esi, esi        ; errnum
.text:0000000000003B35                 mov     edi, 1          ; status
.text:0000000000003B3A                 xor     eax, eax
.text:0000000000003B3C                 call    _error
.text:0000000000003B41
.text:0000000000003B41 loc_3B41:                               ; CODE XREF: main+601↑j
.text:0000000000003B41                 mov     rdi, cs:owner_name ; nptr
.text:0000000000003B48                 lea     rcx, [rsp+168h+var_130]
.text:0000000000003B4D                 xor     r8d, r8d
.text:0000000000003B50                 xor     edx, edx
.text:0000000000003B52                 xor     esi, esi
.text:0000000000003B54                 call    xstrtoul
.text:0000000000003B59                 test    eax, eax
.text:0000000000003B5B                 jnz     short loc_3B70
.text:0000000000003B5D                 mov     rax, [rsp+168h+var_130]
.text:0000000000003B62                 mov     edx, 0FFFFFFFFh
.text:0000000000003B67                 cmp     rax, rdx
.text:0000000000003B6A                 jbe     loc_373A
.text:0000000000003B70
.text:0000000000003B70 loc_3B70:                               ; CODE XREF: main+A2B↑j
.text:0000000000003B70                 mov     rdi, cs:owner_name
.text:0000000000003B77                 call    quote
.text:0000000000003B7C                 lea     rsi, aInvalidUserS ; "invalid user %s"
.text:0000000000003B83                 mov     rbx, rax
.text:0000000000003B86                 mov     edx, 5          ; category
.text:0000000000003B8B                 xor     edi, edi        ; domainname
.text:0000000000003B8D                 call    _dcgettext
.text:0000000000003B92                 mov     rcx, rbx
.text:0000000000003B95                 mov     rdx, rax        ; format
.text:0000000000003B98                 xor     esi, esi        ; errnum
.text:0000000000003B9A                 mov     edi, 1          ; status
.text:0000000000003B9F                 xor     eax, eax
.text:0000000000003BA1                 call    _error
.text:0000000000003BA6
.text:0000000000003BA6 loc_3BA6:                               ; CODE XREF: main+84B↑j
.text:0000000000003BA6                                         ; main+85C↑j
.text:0000000000003BA6                 mov     eax, [rsp+168h+stat_buf.st_mode]
.text:0000000000003BAD                 and     eax, 0F000h
.text:0000000000003BB2                 cmp     eax, 4000h
.text:0000000000003BB7                 jz      short loc_3BC1
.text:0000000000003BB9                 xor     r14d, r14d
.text:0000000000003BBC                 jmp     loc_399C
.text:0000000000003BC1 ; ---------------------------------------------------------------------------
.text:0000000000003BC1
.text:0000000000003BC1 loc_3BC1:                               ; CODE XREF: main+A87↑j
.text:0000000000003BC1                 mov     rcx, [rsp+168h+var_158]
.text:0000000000003BC6                 sub     ebx, 1
.text:0000000000003BC9                 movsxd  rax, ebx
.text:0000000000003BCC                 mov     r15, [rcx+rax*8]
.text:0000000000003BD0                 jmp     loc_366D
.text:0000000000003BD5 ; ---------------------------------------------------------------------------
.text:0000000000003BD5
.text:0000000000003BD5 loc_3BD5:                               ; CODE XREF: main+2A5↑j
.text:0000000000003BD5                 xor     edi, edi        ; status
.text:0000000000003BD7                 call    usage
.text:0000000000003BDC ; ---------------------------------------------------------------------------
.text:0000000000003BDC
.text:0000000000003BDC loc_3BDC:                               ; CODE XREF: main+86F↑j
.text:0000000000003BDC                 mov     rsi, rbp
.text:0000000000003BDF                 mov     edi, 4
.text:0000000000003BE4                 call    quotearg_style
.text:0000000000003BE9                 lea     rsi, aTargetSIsNotAD ; "target %s is not a directory"
.text:0000000000003BF0                 mov     rbx, rax
.text:0000000000003BF3                 mov     edx, 5          ; category
.text:0000000000003BF8                 xor     edi, edi        ; domainname
.text:0000000000003BFA                 call    _dcgettext
.text:0000000000003BFF                 mov     rcx, rbx
.text:0000000000003C02                 mov     rdx, rax        ; format
.text:0000000000003C05                 mov     esi, r14d       ; errnum
.text:0000000000003C08                 mov     edi, 1          ; status
.text:0000000000003C0D                 xor     eax, eax
.text:0000000000003C0F                 call    _error
.text:0000000000003C14
.text:0000000000003C14 loc_3C14:                               ; CODE XREF: main+866↑j
.text:0000000000003C14                 mov     rsi, rbp
.text:0000000000003C17                 mov     edi, 4
.text:0000000000003C1C                 call    quotearg_style
.text:0000000000003C21                 lea     rsi, aFailedToAccess ; "failed to access %s"
.text:0000000000003C28                 mov     rbx, rax
.text:0000000000003C2B                 mov     edx, 5          ; category
.text:0000000000003C30                 xor     edi, edi        ; domainname
.text:0000000000003C32                 call    _dcgettext
.text:0000000000003C37                 mov     rcx, rbx
.text:0000000000003C3A                 mov     rdx, rax        ; format
.text:0000000000003C3D                 mov     esi, r14d       ; errnum
.text:0000000000003C40                 mov     edi, 1          ; status
.text:0000000000003C45                 xor     eax, eax
.text:0000000000003C47                 call    _error
.text:0000000000003C4C
.text:0000000000003C4C loc_3C4C:                               ; CODE XREF: main+494↑j
.text:0000000000003C4C                 mov     rsi, r15
.text:0000000000003C4F                 mov     edi, 4
.text:0000000000003C54                 call    quotearg_style
.text:0000000000003C59                 lea     rsi, aFailedToAccess ; "failed to access %s"
.text:0000000000003C60                 mov     edx, 5          ; category
.text:0000000000003C65                 xor     edi, edi        ; domainname
.text:0000000000003C67                 mov     rbp, rax
.text:0000000000003C6A                 call    _dcgettext
.text:0000000000003C6F                 mov     rbx, rax
.text:0000000000003C72                 call    ___errno_location
.text:0000000000003C77                 mov     esi, [rax]      ; errnum
.text:0000000000003C79                 mov     rcx, rbp
.text:0000000000003C7C                 mov     rdx, rbx        ; format
.text:0000000000003C7F                 mov     edi, 1          ; status
.text:0000000000003C84                 xor     eax, eax
.text:0000000000003C86                 call    _error
.text:0000000000003C8B
.text:0000000000003C8B loc_3C8B:                               ; CODE XREF: main+40B↑j
.text:0000000000003C8B                 lea     rsi, aMultipleTarget ; "multiple target directories specified"
.text:0000000000003C92                 mov     edx, 5          ; category
.text:0000000000003C97                 xor     edi, edi        ; domainname
.text:0000000000003C99                 call    _dcgettext
.text:0000000000003C9E                 xor     esi, esi        ; errnum
.text:0000000000003CA0                 mov     rdx, rax        ; format
.text:0000000000003CA3                 mov     edi, 1          ; status
.text:0000000000003CA8                 xor     eax, eax
.text:0000000000003CAA                 call    _error
.text:0000000000003CAF
.text:0000000000003CAF loc_3CAF:                               ; CODE XREF: main+52E↑j
.text:0000000000003CAF                 lea     rsi, aCannotCombineT ; "cannot combine --target-directory (-t) "...
.text:0000000000003CB6                 mov     edx, 5          ; category
.text:0000000000003CBB                 xor     edi, edi        ; domainname
.text:0000000000003CBD                 call    _dcgettext
.text:0000000000003CC2                 xor     esi, esi        ; errnum
.text:0000000000003CC4                 mov     rdx, rax        ; format
.text:0000000000003CC7                 mov     edi, 1          ; status
.text:0000000000003CCC                 xor     eax, eax
.text:0000000000003CCE                 call    _error
.text:0000000000003CD3
.text:0000000000003CD3 loc_3CD3:                               ; CODE XREF: main+51A↑j
.text:0000000000003CD3                 sub     ebx, 1
.text:0000000000003CD6                 jnz     loc_3D75
.text:0000000000003CDC                 mov     rax, [rsp+168h+var_158]
.text:0000000000003CE1                 mov     edi, 4
.text:0000000000003CE6                 mov     rsi, [rax]
.text:0000000000003CE9                 call    quotearg_style
.text:0000000000003CEE                 lea     rsi, aMissingDestina ; "missing destination file operand after "...
.text:0000000000003CF5                 mov     rbx, rax
.text:0000000000003CF8                 mov     edx, 5          ; category
.text:0000000000003CFD
.text:0000000000003CFD loc_3CFD:                               ; CODE XREF: main+CCF↓j
.text:0000000000003CFD                 xor     edi, edi        ; domainname
.text:0000000000003CFF                 call    _dcgettext
.text:0000000000003D04                 mov     rcx, rbx
.text:0000000000003D07                 mov     rdx, rax        ; format
.text:0000000000003D0A                 xor     esi, esi        ; errnum
.text:0000000000003D0C                 xor     edi, edi        ; status
.text:0000000000003D0E                 xor     eax, eax
.text:0000000000003D10                 call    _error
.text:0000000000003D15                 jmp     loc_337C
.text:0000000000003D1A ; ---------------------------------------------------------------------------
.text:0000000000003D1A
.text:0000000000003D1A loc_3D1A:                               ; CODE XREF: main+4DE↑j
.text:0000000000003D1A                                         ; main+4EA↑j
.text:0000000000003D1A                 lea     rsi, aCannotSetTarge ; "cannot set target context and preserve "...
.text:0000000000003D21                 mov     edx, 5          ; category
.text:0000000000003D26                 xor     edi, edi        ; domainname
.text:0000000000003D28                 call    _dcgettext
.text:0000000000003D2D                 xor     esi, esi        ; errnum
.text:0000000000003D2F                 mov     rdx, rax        ; format
.text:0000000000003D32                 mov     edi, 1          ; status
.text:0000000000003D37                 xor     eax, eax
.text:0000000000003D39                 call    _error
.text:0000000000003D3E
.text:0000000000003D3E loc_3D3E:                               ; CODE XREF: main+4AF↑j
.text:0000000000003D3E                 mov     rsi, r15
.text:0000000000003D41                 mov     edi, 4
.text:0000000000003D46                 call    quotearg_style
.text:0000000000003D4B                 lea     rsi, aTargetSIsNotAD ; "target %s is not a directory"
.text:0000000000003D52                 mov     rbx, rax
.text:0000000000003D55                 mov     edx, 5          ; category
.text:0000000000003D5A                 xor     edi, edi        ; domainname
.text:0000000000003D5C                 call    _dcgettext
.text:0000000000003D61                 mov     rcx, rbx
.text:0000000000003D64                 mov     rdx, rax        ; format
.text:0000000000003D67                 xor     esi, esi        ; errnum
.text:0000000000003D69                 mov     edi, 1          ; status
.text:0000000000003D6E                 xor     eax, eax
.text:0000000000003D70                 call    _error
.text:0000000000003D75
.text:0000000000003D75 loc_3D75:                               ; CODE XREF: main+BA6↑j
.text:0000000000003D75                 lea     rsi, aMissingFileOpe ; "missing file operand"
.text:0000000000003D7C                 mov     edx, 5          ; category
.text:0000000000003D81
.text:0000000000003D81 loc_3D81:                               ; CODE XREF: main+5D3↑j
.text:0000000000003D81                                         ; main+C77↓j
.text:0000000000003D81                 xor     edi, edi        ; domainname
.text:0000000000003D83                 call    _dcgettext
.text:0000000000003D88                 xor     esi, esi        ; errnum
.text:0000000000003D8A                 mov     rdx, rax        ; format
.text:0000000000003D8D                 xor     edi, edi        ; status
.text:0000000000003D8F                 xor     eax, eax
.text:0000000000003D91                 call    _error
.text:0000000000003D96                 jmp     loc_337C
.text:0000000000003D9B ; ---------------------------------------------------------------------------
.text:0000000000003D9B
.text:0000000000003D9B loc_3D9B:                               ; CODE XREF: main+5BA↑j
.text:0000000000003D9B                 mov     edx, 5
.text:0000000000003DA0                 lea     rsi, aOptionsCompare_0 ; "options --compare (-C) and --preserve-t"...
.text:0000000000003DA7                 jmp     short loc_3D81
.text:0000000000003DA9 ; ---------------------------------------------------------------------------
.text:0000000000003DA9
.text:0000000000003DA9 loc_3DA9:                               ; CODE XREF: main+555↑j
.text:0000000000003DA9                 mov     rdi, [rsp+168h+var_150]
.text:0000000000003DAE                 call    quote
.text:0000000000003DB3                 lea     rsi, aInvalidModeS ; "invalid mode %s"
.text:0000000000003DBA                 mov     rbx, rax
.text:0000000000003DBD                 mov     edx, 5          ; category
.text:0000000000003DC2                 xor     edi, edi        ; domainname
.text:0000000000003DC4                 call    _dcgettext
.text:0000000000003DC9                 mov     rcx, rbx
.text:0000000000003DCC                 mov     rdx, rax        ; format
.text:0000000000003DCF                 xor     esi, esi        ; errnum
.text:0000000000003DD1                 mov     edi, 1          ; status
.text:0000000000003DD6                 xor     eax, eax
.text:0000000000003DD8                 call    _error
.text:0000000000003DDD
.text:0000000000003DDD loc_3DDD:                               ; CODE XREF: main+537↑j
.text:0000000000003DDD                 mov     rax, [rsp+168h+var_158]
.text:0000000000003DE2                 mov     edi, 4
.text:0000000000003DE7                 mov     rsi, [rax+10h]
.text:0000000000003DEB                 call    quotearg_style
.text:0000000000003DF0                 mov     edx, 5
.text:0000000000003DF5                 mov     rbx, rax
.text:0000000000003DF8                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000003DFF                 jmp     loc_3CFD
.text:0000000000003E04 ; ---------------------------------------------------------------------------
.text:0000000000003E04
.text:0000000000003E04 loc_3E04:                               ; CODE XREF: main+772↑j
.text:0000000000003E04                 call    ___stack_chk_fail
.text:0000000000003E09 ; ---------------------------------------------------------------------------
.text:0000000000003E09
.text:0000000000003E09 loc_3E09:                               ; CODE XREF: main+6FD↑j
.text:0000000000003E09                 lea     rsi, aTheStripOption ; "the strip option may not be used when i"...
.text:0000000000003E10                 mov     edx, 5          ; category
.text:0000000000003E15                 xor     edi, edi        ; domainname
.text:0000000000003E17                 call    _dcgettext
.text:0000000000003E1C                 xor     esi, esi        ; errnum
.text:0000000000003E1E                 mov     rdx, rax        ; format
.text:0000000000003E21                 mov     edi, 1          ; status
.text:0000000000003E26                 xor     eax, eax
.text:0000000000003E28                 call    _error
.text:0000000000003E28 ; } // starts at 3130
.text:0000000000003E2D                 nop     dword ptr [rax]
.text:0000000000003E2D main            endp ; sp-analysis failed
.text:0000000000003E2D
.text:0000000000003E30
.text:0000000000003E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E30
.text:0000000000003E30 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000003E30
.text:0000000000003E30 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000003E30                 public start
.text:0000000000003E30 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000003E30 ; __unwind {
.text:0000000000003E30                 xor     ebp, ebp
.text:0000000000003E32                 mov     r9, rdx         ; rtld_fini
.text:0000000000003E35                 pop     rsi             ; argc
.text:0000000000003E36                 mov     rdx, rsp        ; ubp_av
.text:0000000000003E39                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000003E3D                 push    rax
.text:0000000000003E3E                 push    rsp             ; stack_end
.text:0000000000003E3F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000003E46                 lea     rcx, __libc_csu_init ; init
.text:0000000000003E4D                 lea     rdi, main       ; main
.text:0000000000003E54                 call    cs:__libc_start_main_ptr
.text:0000000000003E5A                 hlt
.text:0000000000003E5A ; } // starts at 3E30
.text:0000000000003E5A start           endp
.text:0000000000003E5A
.text:0000000000003E5A ; ---------------------------------------------------------------------------
.text:0000000000003E5B                 align 20h
.text:0000000000003E60
.text:0000000000003E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E60
.text:0000000000003E60 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003E60
.text:0000000000003E60 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_3F13↓p
.text:0000000000003E60                 lea     rdi, __bss_start
.text:0000000000003E67                 push    rbp
.text:0000000000003E68                 lea     rax, __bss_start
.text:0000000000003E6F                 cmp     rax, rdi
.text:0000000000003E72                 mov     rbp, rsp
.text:0000000000003E75                 jz      short loc_3E90
.text:0000000000003E77                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000003E7E                 test    rax, rax
.text:0000000000003E81                 jz      short loc_3E90
.text:0000000000003E83                 pop     rbp
.text:0000000000003E84                 jmp     rax
.text:0000000000003E84 ; ---------------------------------------------------------------------------
.text:0000000000003E86                 align 10h
.text:0000000000003E90
.text:0000000000003E90 loc_3E90:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000003E90                                         ; deregister_tm_clones+21↑j
.text:0000000000003E90                 pop     rbp
.text:0000000000003E91                 retn
.text:0000000000003E91 deregister_tm_clones endp
.text:0000000000003E91
.text:0000000000003E91 ; ---------------------------------------------------------------------------
.text:0000000000003E92                 align 20h
.text:0000000000003EA0
.text:0000000000003EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EA0
.text:0000000000003EA0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003EA0
.text:0000000000003EA0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000003EA0                 lea     rdi, __bss_start
.text:0000000000003EA7                 lea     rsi, __bss_start
.text:0000000000003EAE                 push    rbp
.text:0000000000003EAF                 sub     rsi, rdi
.text:0000000000003EB2                 mov     rbp, rsp
.text:0000000000003EB5                 sar     rsi, 3
.text:0000000000003EB9                 mov     rax, rsi
.text:0000000000003EBC                 shr     rax, 3Fh
.text:0000000000003EC0                 add     rsi, rax
.text:0000000000003EC3                 sar     rsi, 1
.text:0000000000003EC6                 jz      short loc_3EE0
.text:0000000000003EC8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000003ECF                 test    rax, rax
.text:0000000000003ED2                 jz      short loc_3EE0
.text:0000000000003ED4                 pop     rbp
.text:0000000000003ED5                 jmp     rax
.text:0000000000003ED5 ; ---------------------------------------------------------------------------
.text:0000000000003ED7                 align 20h
.text:0000000000003EE0
.text:0000000000003EE0 loc_3EE0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000003EE0                                         ; register_tm_clones+32↑j
.text:0000000000003EE0                 pop     rbp
.text:0000000000003EE1                 retn
.text:0000000000003EE1 register_tm_clones endp
.text:0000000000003EE1
.text:0000000000003EE1 ; ---------------------------------------------------------------------------
.text:0000000000003EE2                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EF0
.text:0000000000003EF0 ; Attributes: info_from_lumina
.text:0000000000003EF0
.text:0000000000003EF0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000003EF0                 cmp     cs:completed_7697, 0
.text:0000000000003EF7                 jnz     short locret_3F28
.text:0000000000003EF9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000003F01                 push    rbp
.text:0000000000003F02                 mov     rbp, rsp
.text:0000000000003F05                 jz      short loc_3F13
.text:0000000000003F07                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000003F0E                 call    __cxa_finalize
.text:0000000000003F13
.text:0000000000003F13 loc_3F13:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000003F13                 call    deregister_tm_clones
.text:0000000000003F18                 mov     cs:completed_7697, 1
.text:0000000000003F1F                 pop     rbp
.text:0000000000003F20                 retn
.text:0000000000003F20 ; ---------------------------------------------------------------------------
.text:0000000000003F21                 align 8
.text:0000000000003F28
.text:0000000000003F28 locret_3F28:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000003F28                 rep retn
.text:0000000000003F28 __do_global_dtors_aux endp
.text:0000000000003F28
.text:0000000000003F28 ; ---------------------------------------------------------------------------
.text:0000000000003F2A                 align 10h
.text:0000000000003F30
.text:0000000000003F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F30
.text:0000000000003F30 ; Attributes: bp-based frame
.text:0000000000003F30
.text:0000000000003F30 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000003F30                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000003F30                 push    rbp
.text:0000000000003F31                 mov     rbp, rsp
.text:0000000000003F34                 pop     rbp
.text:0000000000003F35                 jmp     register_tm_clones
.text:0000000000003F35 frame_dummy     endp
.text:0000000000003F35
.text:0000000000003F35 ; ---------------------------------------------------------------------------
.text:0000000000003F3A                 align 20h
.text:0000000000003F40
.text:0000000000003F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F40
.text:0000000000003F40
.text:0000000000003F40 mkancesdirs_safe_wd proc near           ; CODE XREF: main+6CF↑p
.text:0000000000003F40                                         ; main+980↑p
.text:0000000000003F40
.text:0000000000003F40 var_40          = qword ptr -40h
.text:0000000000003F40 var_38          = dword ptr -38h
.text:0000000000003F40 var_30          = qword ptr -30h
.text:0000000000003F40
.text:0000000000003F40 ; __unwind {
.text:0000000000003F40                 push    r13
.text:0000000000003F42                 push    r12
.text:0000000000003F44                 push    rbp
.text:0000000000003F45                 push    rbx
.text:0000000000003F46                 mov     rbx, rsi
.text:0000000000003F49                 sub     rsp, 28h
.text:0000000000003F4D                 mov     rax, fs:28h
.text:0000000000003F56                 mov     [rsp+48h+var_30], rax
.text:0000000000003F5B                 xor     eax, eax
.text:0000000000003F5D                 test    cl, cl
.text:0000000000003F5F                 jnz     short loc_3F6A
.text:0000000000003F61                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:0000000000003F64                 jz      loc_4010
.text:0000000000003F6A
.text:0000000000003F6A loc_3F6A:                               ; CODE XREF: mkancesdirs_safe_wd+1F↑j
.text:0000000000003F6A                                         ; mkancesdirs_safe_wd+D3↓j
.text:0000000000003F6A                 lea     rbp, [rsp+48h+var_38]
.text:0000000000003F6F                 mov     rcx, rdx
.text:0000000000003F72                 lea     rdx, make_ancestor
.text:0000000000003F79                 mov     rdi, rbx
.text:0000000000003F7C                 mov     [rsp+48h+var_38], 0
.text:0000000000003F84                 mov     rsi, rbp
.text:0000000000003F87                 call    mkancesdirs
.text:0000000000003F8C                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003F90                 jnz     loc_405A
.text:0000000000003F96                 mov     rsi, rbx
.text:0000000000003F99                 mov     edi, 4
.text:0000000000003F9E                 call    quotearg_style
.text:0000000000003FA3                 lea     rsi, aCannotCreateDi ; "cannot create directory %s"
.text:0000000000003FAA                 mov     edx, 5          ; category
.text:0000000000003FAF                 xor     edi, edi        ; domainname
.text:0000000000003FB1                 mov     r12, rax
.text:0000000000003FB4                 call    _dcgettext
.text:0000000000003FB9                 mov     rbx, rax
.text:0000000000003FBC                 call    ___errno_location
.text:0000000000003FC1                 mov     esi, [rax]      ; errnum
.text:0000000000003FC3                 mov     rcx, r12
.text:0000000000003FC6                 mov     rdx, rbx        ; format
.text:0000000000003FC9                 xor     edi, edi        ; status
.text:0000000000003FCB                 xor     eax, eax
.text:0000000000003FCD                 call    _error
.text:0000000000003FD2                 mov     esi, 1
.text:0000000000003FD7                 mov     rdi, rbp
.text:0000000000003FDA                 call    savewd_restore
.text:0000000000003FDF                 mov     rdi, rbp
.text:0000000000003FE2                 call    savewd_finish
.text:0000000000003FE7                 xor     eax, eax
.text:0000000000003FE9
.text:0000000000003FE9 loc_3FE9:                               ; CODE XREF: mkancesdirs_safe_wd+118↓j
.text:0000000000003FE9                                         ; mkancesdirs_safe_wd+13D↓j ...
.text:0000000000003FE9                 mov     rbx, [rsp+48h+var_30]
.text:0000000000003FEE                 xor     rbx, fs:28h
.text:0000000000003FF7                 jnz     loc_40CA
.text:0000000000003FFD                 add     rsp, 28h
.text:0000000000004001                 pop     rbx
.text:0000000000004002                 pop     rbp
.text:0000000000004003                 pop     r12
.text:0000000000004005                 pop     r13
.text:0000000000004007                 retn
.text:0000000000004007 ; ---------------------------------------------------------------------------
.text:0000000000004008                 align 10h
.text:0000000000004010
.text:0000000000004010 loc_4010:                               ; CODE XREF: mkancesdirs_safe_wd+24↑j
.text:0000000000004010                 cmp     byte ptr [rsi], 2Fh ; '/'
.text:0000000000004013                 jnz     loc_3F6A
.text:0000000000004019                 lea     rbp, [rsp+48h+var_38]
.text:000000000000401E                 mov     [rsp+48h+var_40], rdx
.text:0000000000004023                 mov     [rsp+48h+var_38], 0
.text:000000000000402B                 mov     rdi, rbp
.text:000000000000402E                 call    savewd_finish
.text:0000000000004033                 mov     rdx, [rsp+48h+var_40]
.text:0000000000004038                 mov     rsi, rbp
.text:000000000000403B                 mov     rdi, rbx
.text:000000000000403E                 mov     rcx, rdx
.text:0000000000004041                 lea     rdx, make_ancestor
.text:0000000000004048                 call    mkancesdirs
.text:000000000000404D                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004051                 jz      short loc_40CF
.text:0000000000004053                 mov     eax, 1
.text:0000000000004058                 jmp     short loc_3FE9
.text:000000000000405A ; ---------------------------------------------------------------------------
.text:000000000000405A
.text:000000000000405A loc_405A:                               ; CODE XREF: mkancesdirs_safe_wd+50↑j
.text:000000000000405A                 xor     esi, esi
.text:000000000000405C                 mov     rdi, rbp
.text:000000000000405F                 call    savewd_restore
.text:0000000000004064                 mov     r13d, eax
.text:0000000000004067                 call    ___errno_location
.text:000000000000406C                 mov     rdi, rbp
.text:000000000000406F                 mov     r12d, [rax]
.text:0000000000004072                 call    savewd_finish
.text:0000000000004077                 xor     eax, eax
.text:0000000000004079                 cmp     r13d, 0
.text:000000000000407D                 jg      loc_3FE9
.text:0000000000004083                 mov     eax, 1
.text:0000000000004088                 jge     loc_3FE9
.text:000000000000408E                 mov     rsi, rbx
.text:0000000000004091                 mov     edi, 4
.text:0000000000004096                 call    quotearg_style
.text:000000000000409B                 lea     rsi, aCannotCreateDi ; "cannot create directory %s"
.text:00000000000040A2                 mov     rbx, rax
.text:00000000000040A5                 mov     edx, 5          ; category
.text:00000000000040AA                 xor     edi, edi        ; domainname
.text:00000000000040AC                 call    _dcgettext
.text:00000000000040B1                 mov     rcx, rbx
.text:00000000000040B4                 mov     rdx, rax        ; format
.text:00000000000040B7                 mov     esi, r12d       ; errnum
.text:00000000000040BA                 xor     eax, eax
.text:00000000000040BC                 xor     edi, edi        ; status
.text:00000000000040BE                 call    _error
.text:00000000000040C3                 xor     eax, eax
.text:00000000000040C5                 jmp     loc_3FE9
.text:00000000000040CA ; ---------------------------------------------------------------------------
.text:00000000000040CA
.text:00000000000040CA loc_40CA:                               ; CODE XREF: mkancesdirs_safe_wd+B7↑j
.text:00000000000040CA                 call    ___stack_chk_fail
.text:00000000000040CF ; ---------------------------------------------------------------------------
.text:00000000000040CF
.text:00000000000040CF loc_40CF:                               ; CODE XREF: mkancesdirs_safe_wd+111↑j
.text:00000000000040CF                 mov     rsi, rbx
.text:00000000000040D2                 mov     edi, 4
.text:00000000000040D7                 call    quotearg_style
.text:00000000000040DC                 lea     rsi, aCannotCreateDi ; "cannot create directory %s"
.text:00000000000040E3                 mov     edx, 5          ; category
.text:00000000000040E8                 xor     edi, edi        ; domainname
.text:00000000000040EA                 mov     rbp, rax
.text:00000000000040ED                 call    _dcgettext
.text:00000000000040F2                 mov     rbx, rax
.text:00000000000040F5                 call    ___errno_location
.text:00000000000040FA                 mov     esi, [rax]      ; errnum
.text:00000000000040FC                 mov     rcx, rbp
.text:00000000000040FF                 xor     eax, eax
.text:0000000000004101                 mov     rdx, rbx        ; format
.text:0000000000004104                 xor     edi, edi        ; status
.text:0000000000004106                 call    _error
.text:000000000000410B                 xor     eax, eax
.text:000000000000410D                 jmp     loc_3FE9
.text:000000000000410D ; } // starts at 3F40
.text:000000000000410D mkancesdirs_safe_wd endp
.text:000000000000410D
.text:000000000000410D ; ---------------------------------------------------------------------------
.text:0000000000004112                 align 20h
.text:0000000000004120
.text:0000000000004120 ; =============== S U B R O U T I N E =======================================
.text:0000000000004120
.text:0000000000004120
.text:0000000000004120 process_dir     proc near               ; DATA XREF: main+8E1↑o
.text:0000000000004120 ; __unwind {
.text:0000000000004120                 push    rbp
.text:0000000000004121                 push    rbx
.text:0000000000004122                 mov     rcx, rdx
.text:0000000000004125                 mov     rbx, rdx
.text:0000000000004128                 lea     r9, announce_mkdir
.text:000000000000412F                 lea     rdx, make_ancestor
.text:0000000000004136                 sub     rsp, 8
.text:000000000000413A                 mov     eax, cs:group_id
.text:0000000000004140                 mov     r8d, cs:dir_mode
.text:0000000000004147                 push    0
.text:0000000000004149                 push    rax
.text:000000000000414A                 mov     eax, cs:owner_id
.text:0000000000004150                 push    rax
.text:0000000000004151                 mov     eax, cs:dir_mode_bits
.text:0000000000004157                 push    rax
.text:0000000000004158                 call    make_dir_parents
.text:000000000000415D                 xor     eax, 1
.text:0000000000004160                 add     rsp, 20h
.text:0000000000004164                 test    al, al
.text:0000000000004166                 movzx   ebp, al
.text:0000000000004169                 jnz     short loc_417C
.text:000000000000416B                 cmp     byte ptr [rbx+21h], 0
.text:000000000000416F                 jz      short loc_417C
.text:0000000000004171                 call    ___errno_location
.text:0000000000004176                 mov     dword ptr [rax], 5Fh ; '_'
.text:000000000000417C
.text:000000000000417C loc_417C:                               ; CODE XREF: process_dir+49↑j
.text:000000000000417C                                         ; process_dir+4F↑j
.text:000000000000417C                 add     rsp, 8
.text:0000000000004180                 mov     eax, ebp
.text:0000000000004182                 pop     rbx
.text:0000000000004183                 pop     rbp
.text:0000000000004184                 retn
.text:0000000000004184 ; } // starts at 4120
.text:0000000000004184 process_dir     endp
.text:0000000000004184
.text:0000000000004184 ; ---------------------------------------------------------------------------
.text:0000000000004185                 align 10h
.text:0000000000004190
.text:0000000000004190 ; =============== S U B R O U T I N E =======================================
.text:0000000000004190
.text:0000000000004190
.text:0000000000004190 announce_mkdir_part_9 proc near         ; CODE XREF: announce_mkdir:loc_41E0↓j
.text:0000000000004190                                         ; make_ancestor+4F↓p
.text:0000000000004190 ; __unwind {
.text:0000000000004190                 push    rbx
.text:0000000000004191                 mov     rsi, rdi
.text:0000000000004194                 mov     edi, 4
.text:0000000000004199                 call    quotearg_style
.text:000000000000419E                 lea     rsi, aCreatingDirect ; "creating directory %s"
.text:00000000000041A5                 mov     rbx, rax
.text:00000000000041A8                 mov     edx, 5          ; category
.text:00000000000041AD                 xor     edi, edi        ; domainname
.text:00000000000041AF                 call    _dcgettext
.text:00000000000041B4                 mov     rdx, rbx
.text:00000000000041B7                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; s
.text:00000000000041BE                 mov     rsi, rax
.text:00000000000041C1                 pop     rbx
.text:00000000000041C2                 xor     eax, eax
.text:00000000000041C4                 jmp     prog_fprintf
.text:00000000000041C4 ; } // starts at 4190
.text:00000000000041C4 announce_mkdir_part_9 endp
.text:00000000000041C4
.text:00000000000041C4 ; ---------------------------------------------------------------------------
.text:00000000000041C9                 align 10h
.text:00000000000041D0
.text:00000000000041D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041D0
.text:00000000000041D0
.text:00000000000041D0 announce_mkdir  proc near               ; DATA XREF: process_dir+8↑o
.text:00000000000041D0 ; __unwind {
.text:00000000000041D0                 cmp     byte ptr [rsi+2Eh], 0
.text:00000000000041D4                 jnz     short loc_41E0
.text:00000000000041D6                 rep retn
.text:00000000000041D6 ; ---------------------------------------------------------------------------
.text:00000000000041D8                 align 20h
.text:00000000000041E0
.text:00000000000041E0 loc_41E0:                               ; CODE XREF: announce_mkdir+4↑j
.text:00000000000041E0                 jmp     short announce_mkdir_part_9
.text:00000000000041E0 ; } // starts at 41D0
.text:00000000000041E0 announce_mkdir  endp
.text:00000000000041E0
.text:00000000000041E0 ; ---------------------------------------------------------------------------
.text:00000000000041E2                 align 10h
.text:00000000000041F0
.text:00000000000041F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041F0
.text:00000000000041F0
.text:00000000000041F0 make_ancestor   proc near               ; DATA XREF: mkancesdirs_safe_wd+32↑o
.text:00000000000041F0                                         ; mkancesdirs_safe_wd+101↑o ...
.text:00000000000041F0
.text:00000000000041F0 var_1C          = dword ptr -1Ch
.text:00000000000041F0
.text:00000000000041F0 ; __unwind {
.text:00000000000041F0                 push    r12
.text:00000000000041F2                 push    rbp
.text:00000000000041F3                 mov     r12, rdi
.text:00000000000041F6                 push    rbx
.text:00000000000041F7                 mov     rbp, rsi
.text:00000000000041FA                 mov     rbx, rdx
.text:00000000000041FD                 sub     rsp, 10h
.text:0000000000004201                 cmp     byte ptr [rdx+21h], 0
.text:0000000000004205                 jz      short loc_4212
.text:0000000000004207                 call    ___errno_location
.text:000000000000420C                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000004212
.text:0000000000004212 loc_4212:                               ; CODE XREF: make_ancestor+15↑j
.text:0000000000004212                 mov     esi, 1EDh       ; mode
.text:0000000000004217                 mov     rdi, rbp        ; path
.text:000000000000421A                 call    _mkdir
.text:000000000000421F                 test    eax, eax
.text:0000000000004221                 jnz     short loc_4229
.text:0000000000004223                 cmp     byte ptr [rbx+2Eh], 0
.text:0000000000004227                 jnz     short loc_4238
.text:0000000000004229
.text:0000000000004229 loc_4229:                               ; CODE XREF: make_ancestor+31↑j
.text:0000000000004229                 add     rsp, 10h
.text:000000000000422D                 pop     rbx
.text:000000000000422E                 pop     rbp
.text:000000000000422F                 pop     r12
.text:0000000000004231                 retn
.text:0000000000004231 ; ---------------------------------------------------------------------------
.text:0000000000004232                 align 8
.text:0000000000004238
.text:0000000000004238 loc_4238:                               ; CODE XREF: make_ancestor+37↑j
.text:0000000000004238                 mov     rdi, r12
.text:000000000000423B                 mov     [rsp+28h+var_1C], eax
.text:000000000000423F                 call    announce_mkdir_part_9
.text:0000000000004244                 mov     eax, [rsp+28h+var_1C]
.text:0000000000004248                 add     rsp, 10h
.text:000000000000424C                 pop     rbx
.text:000000000000424D                 pop     rbp
.text:000000000000424E                 pop     r12
.text:0000000000004250                 retn
.text:0000000000004250 ; } // starts at 41F0
.text:0000000000004250 make_ancestor   endp
.text:0000000000004250
.text:0000000000004250 ; ---------------------------------------------------------------------------
.text:0000000000004251                 align 20h
.text:0000000000004260
.text:0000000000004260 ; =============== S U B R O U T I N E =======================================
.text:0000000000004260
.text:0000000000004260
.text:0000000000004260 ; __int64 __fastcall install_file_in_file(char *file, char *path)
.text:0000000000004260 install_file_in_file proc near          ; CODE XREF: main+6E3↑p
.text:0000000000004260                                         ; main+752↑p ...
.text:0000000000004260
.text:0000000000004260 var_210         = qword ptr -210h
.text:0000000000004260 stat_loc        = dword ptr -1FCh
.text:0000000000004260 stat_buf        = stat ptr -1F8h
.text:0000000000004260 var_168         = stat ptr -168h
.text:0000000000004260 var_D8          = stat ptr -0D8h
.text:0000000000004260 var_40          = qword ptr -40h
.text:0000000000004260
.text:0000000000004260 ; __unwind {
.text:0000000000004260                 push    r15
.text:0000000000004262                 push    r14
.text:0000000000004264                 push    r13
.text:0000000000004266                 push    r12
.text:0000000000004268                 mov     r12, rdi
.text:000000000000426B                 push    rbp
.text:000000000000426C                 push    rbx
.text:000000000000426D                 mov     rbp, rsi
.text:0000000000004270                 mov     rbx, rdx
.text:0000000000004273                 sub     rsp, 1E8h
.text:000000000000427A                 mov     rax, fs:28h
.text:0000000000004283                 mov     [rsp+218h+var_40], rax
.text:000000000000428B                 xor     eax, eax
.text:000000000000428D                 cmp     byte ptr [rdx+1Fh], 0
.text:0000000000004291                 jz      short loc_42AD
.text:0000000000004293                 lea     rdx, [rsp+218h+stat_buf] ; stat_buf
.text:0000000000004298                 mov     rsi, rdi        ; filename
.text:000000000000429B                 mov     edi, 1          ; ver
.text:00000000000042A0                 call    ___xstat
.text:00000000000042A5                 test    eax, eax
.text:00000000000042A7                 jnz     loc_4620
.text:00000000000042AD
.text:00000000000042AD loc_42AD:                               ; CODE XREF: install_file_in_file+31↑j
.text:00000000000042AD                 cmp     cs:copy_only_if_needed, 0
.text:00000000000042B4                 jz      short loc_42CA
.text:00000000000042B6                 mov     r13d, cs:mode
.text:00000000000042BD                 test    r13d, 0FFFF0E00h
.text:00000000000042C4                 jz      loc_4488
.text:00000000000042CA
.text:00000000000042CA loc_42CA:                               ; CODE XREF: install_file_in_file+54↑j
.text:00000000000042CA                                         ; install_file_in_file+23F↓j ...
.text:00000000000042CA                 lea     r8, [rsp+218h+stat_loc]
.text:00000000000042CF                 xor     r9d, r9d
.text:00000000000042D2                 xor     edx, edx
.text:00000000000042D4                 mov     rcx, rbx
.text:00000000000042D7                 mov     rsi, rbp
.text:00000000000042DA                 mov     rdi, r12
.text:00000000000042DD                 call    copy
.text:00000000000042E2                 test    al, al
.text:00000000000042E4                 jnz     short loc_4323
.text:00000000000042E6
.text:00000000000042E6 loc_42E6:                               ; CODE XREF: install_file_in_file+175↓j
.text:00000000000042E6                                         ; install_file_in_file+4F3↓j
.text:00000000000042E6                 xor     ebx, ebx
.text:00000000000042E8
.text:00000000000042E8 loc_42E8:                               ; CODE XREF: install_file_in_file+1C8↓j
.text:00000000000042E8                                         ; install_file_in_file+1D5↓j ...
.text:00000000000042E8                 mov     rcx, [rsp+218h+var_40]
.text:00000000000042F0                 xor     rcx, fs:28h
.text:00000000000042F9                 mov     eax, ebx
.text:00000000000042FB                 jnz     loc_4848
.text:0000000000004301                 add     rsp, 1E8h
.text:0000000000004308                 pop     rbx
.text:0000000000004309                 pop     rbp
.text:000000000000430A                 pop     r12
.text:000000000000430C                 pop     r13
.text:000000000000430E                 pop     r14
.text:0000000000004310                 pop     r15
.text:0000000000004312                 retn
.text:0000000000004313 ; ---------------------------------------------------------------------------
.text:0000000000004313
.text:0000000000004313 loc_4313:                               ; CODE XREF: install_file_in_file+36A↓j
.text:0000000000004313                 mov     edi, r13d       ; fd
.text:0000000000004316                 call    _close
.text:000000000000431B                 mov     edi, r14d       ; fd
.text:000000000000431E                 call    _close
.text:0000000000004323
.text:0000000000004323 loc_4323:                               ; CODE XREF: install_file_in_file+84↑j
.text:0000000000004323                 cmp     cs:strip_files, 0
.text:000000000000432A                 jnz     loc_46C0
.text:0000000000004330                 cmp     byte ptr [rbx+1Fh], 0
.text:0000000000004334                 jz      loc_43E0
.text:000000000000433A
.text:000000000000433A loc_433A:                               ; CODE XREF: install_file_in_file+557↓j
.text:000000000000433A                 mov     eax, [rsp+218h+stat_buf.st_mode]
.text:000000000000433E                 and     eax, 0F000h
.text:0000000000004343                 cmp     eax, 8000h
.text:0000000000004348                 jz      loc_43E0
.text:000000000000434E
.text:000000000000434E loc_434E:                               ; CODE XREF: install_file_in_file+551↓j
.text:000000000000434E                 mov     rax, [rsp+218h+stat_buf.st_atim.tv_sec]
.text:0000000000004353                 lea     rsi, [rsp+218h+var_D8]
.text:000000000000435B                 mov     rdi, rbp        ; path
.text:000000000000435E                 mov     [rsp+218h+var_D8.st_dev], rax
.text:0000000000004366                 mov     rax, [rsp+218h+stat_buf.st_atim.tv_nsec]
.text:000000000000436B                 mov     [rsp+218h+var_D8.st_ino], rax
.text:0000000000004373                 mov     rax, [rsp+218h+stat_buf.st_mtim.tv_sec]
.text:0000000000004378                 mov     [rsp+218h+var_D8.st_nlink], rax
.text:0000000000004380                 mov     rax, [rsp+218h+stat_buf.st_mtim.tv_nsec]
.text:0000000000004388                 mov     qword ptr [rsp+218h+var_D8.st_mode], rax
.text:0000000000004390                 call    utimens
.text:0000000000004395                 test    eax, eax
.text:0000000000004397                 jz      short loc_43E0
.text:0000000000004399                 mov     rsi, rbp
.text:000000000000439C                 mov     edi, 4
.text:00000000000043A1                 call    quotearg_style
.text:00000000000043A6                 lea     rsi, aCannotSetTimes ; "cannot set timestamps for %s"
.text:00000000000043AD                 mov     rbp, rax
.text:00000000000043B0                 mov     edx, 5          ; category
.text:00000000000043B5
.text:00000000000043B5 loc_43B5:                               ; CODE XREF: install_file_in_file+3DC↓j
.text:00000000000043B5                 xor     edi, edi        ; domainname
.text:00000000000043B7                 call    _dcgettext
.text:00000000000043BC                 mov     rbx, rax
.text:00000000000043BF                 call    ___errno_location
.text:00000000000043C4                 mov     esi, [rax]      ; errnum
.text:00000000000043C6                 mov     rcx, rbp
.text:00000000000043C9                 mov     rdx, rbx        ; format
.text:00000000000043CC                 xor     edi, edi        ; status
.text:00000000000043CE                 xor     eax, eax
.text:00000000000043D0                 call    _error
.text:00000000000043D5                 jmp     loc_42E6
.text:00000000000043D5 ; ---------------------------------------------------------------------------
.text:00000000000043DA                 align 20h
.text:00000000000043E0
.text:00000000000043E0 loc_43E0:                               ; CODE XREF: install_file_in_file+D4↑j
.text:00000000000043E0                                         ; install_file_in_file+E8↑j ...
.text:00000000000043E0                 mov     esi, cs:owner_id ; owner
.text:00000000000043E6                 mov     edx, cs:group_id ; group
.text:00000000000043EC                 cmp     esi, 0FFFFFFFFh
.text:00000000000043EF                 jnz     short loc_43F6
.text:00000000000043F1                 cmp     edx, 0FFFFFFFFh
.text:00000000000043F4                 jz      short loc_4406
.text:00000000000043F6
.text:00000000000043F6 loc_43F6:                               ; CODE XREF: install_file_in_file+18F↑j
.text:00000000000043F6                 mov     rdi, rbp        ; file
.text:00000000000043F9                 call    _lchown
.text:00000000000043FE                 test    eax, eax
.text:0000000000004400                 jnz     loc_4648
.text:0000000000004406
.text:0000000000004406 loc_4406:                               ; CODE XREF: install_file_in_file+194↑j
.text:0000000000004406                 mov     esi, cs:mode    ; mode
.text:000000000000440C                 mov     rdi, rbp        ; file
.text:000000000000440F                 mov     ebx, 1
.text:0000000000004414                 call    _chmod
.text:0000000000004419                 test    eax, eax
.text:000000000000441B                 jnz     loc_46A0
.text:0000000000004421                 cmp     cs:use_default_selinux_context, 0
.text:0000000000004428                 jz      loc_42E8
.text:000000000000442E
.text:000000000000442E loc_442E:                               ; CODE XREF: install_file_in_file+433↓j
.text:000000000000442E                 cmp     cs:selinux_enabled, 1
.text:0000000000004435                 jnz     loc_42E8
.text:000000000000443B                 lea     rdx, [rsp+218h+var_D8] ; stat_buf
.text:0000000000004443                 mov     rsi, rbp        ; filename
.text:0000000000004446                 mov     edi, 1          ; ver
.text:000000000000444B                 call    ___lxstat
.text:0000000000004450                 test    eax, eax
.text:0000000000004452                 jnz     loc_42E8
.text:0000000000004458                 cmp     cs:first_call_7488, 0
.text:000000000000445F                 jz      short loc_446B
.text:0000000000004461                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:0000000000004465                 jz      loc_47D1
.text:000000000000446B
.text:000000000000446B loc_446B:                               ; CODE XREF: install_file_in_file+1FF↑j
.text:000000000000446B                                         ; install_file_in_file+58E↓j ...
.text:000000000000446B                 mov     cs:first_call_7488, 0
.text:0000000000004472                 call    ___errno_location
.text:0000000000004477                 mov     dword ptr [rax], 5Fh ; '_'
.text:000000000000447D                 jmp     loc_42E8
.text:000000000000447D ; ---------------------------------------------------------------------------
.text:0000000000004482                 align 8
.text:0000000000004488
.text:0000000000004488 loc_4488:                               ; CODE XREF: install_file_in_file+64↑j
.text:0000000000004488                 lea     rdx, [rsp+218h+var_168] ; stat_buf
.text:0000000000004490                 mov     rsi, r12        ; filename
.text:0000000000004493                 mov     edi, 1          ; ver
.text:0000000000004498                 call    ___lxstat
.text:000000000000449D                 test    eax, eax
.text:000000000000449F                 jnz     loc_42CA
.text:00000000000044A5                 lea     rdx, [rsp+218h+var_D8] ; stat_buf
.text:00000000000044AD                 mov     rsi, rbp        ; filename
.text:00000000000044B0                 mov     edi, 1          ; ver
.text:00000000000044B5                 call    ___lxstat
.text:00000000000044BA                 test    eax, eax
.text:00000000000044BC                 jnz     loc_42CA
.text:00000000000044C2                 mov     eax, [rsp+218h+var_168.st_mode]
.text:00000000000044C9                 mov     edx, eax
.text:00000000000044CB                 and     edx, 0F000h
.text:00000000000044D1                 cmp     edx, 8000h
.text:00000000000044D7                 jnz     loc_42CA
.text:00000000000044DD                 mov     edx, [rsp+218h+var_D8.st_mode]
.text:00000000000044E4                 mov     ecx, edx
.text:00000000000044E6                 and     ecx, 0F000h
.text:00000000000044EC                 cmp     ecx, 8000h
.text:00000000000044F2                 jnz     loc_42CA
.text:00000000000044F8                 test    eax, 0FFFF0E00h
.text:00000000000044FD                 jnz     loc_42CA
.text:0000000000004503                 test    edx, 0FFFF0E00h
.text:0000000000004509                 jnz     loc_42CA
.text:000000000000450F                 mov     rax, [rsp+218h+var_D8.st_size]
.text:0000000000004517                 cmp     [rsp+218h+var_168.st_size], rax
.text:000000000000451F                 jnz     loc_42CA
.text:0000000000004525                 and     edx, 0FFFh
.text:000000000000452B                 cmp     r13d, edx
.text:000000000000452E                 jnz     loc_42CA
.text:0000000000004534                 mov     eax, cs:owner_id
.text:000000000000453A                 cmp     eax, 0FFFFFFFFh
.text:000000000000453D                 jz      loc_48DE
.text:0000000000004543
.text:0000000000004543 loc_4543:                               ; CODE XREF: install_file_in_file+694↓j
.text:0000000000004543                                         ; install_file_in_file+69F↓j
.text:0000000000004543                 cmp     eax, [rsp+218h+var_D8.st_uid]
.text:000000000000454A                 jnz     loc_42CA
.text:0000000000004550                 mov     eax, cs:group_id
.text:0000000000004556                 cmp     eax, 0FFFFFFFFh
.text:0000000000004559                 jz      loc_48A5
.text:000000000000455F
.text:000000000000455F loc_455F:                               ; CODE XREF: install_file_in_file+65B↓j
.text:000000000000455F                                         ; install_file_in_file+666↓j
.text:000000000000455F                 cmp     eax, [rsp+218h+var_D8.st_gid]
.text:0000000000004566                 jnz     loc_42CA
.text:000000000000456C                 cmp     cs:selinux_enabled, 0
.text:0000000000004573                 jz      short loc_457F
.text:0000000000004575                 cmp     byte ptr [rbx+25h], 0
.text:0000000000004579                 jnz     loc_490A
.text:000000000000457F
.text:000000000000457F loc_457F:                               ; CODE XREF: install_file_in_file+313↑j
.text:000000000000457F                 xor     esi, esi        ; oflag
.text:0000000000004581                 xor     eax, eax
.text:0000000000004583                 mov     rdi, r12        ; file
.text:0000000000004586                 call    _open
.text:000000000000458B                 test    eax, eax
.text:000000000000458D                 mov     r13d, eax
.text:0000000000004590                 js      loc_42CA
.text:0000000000004596                 xor     esi, esi        ; oflag
.text:0000000000004598                 xor     eax, eax
.text:000000000000459A                 mov     rdi, rbp        ; file
.text:000000000000459D                 call    _open
.text:00000000000045A2                 test    eax, eax
.text:00000000000045A4                 mov     r14d, eax
.text:00000000000045A7                 lea     r15, a_buff_7455
.text:00000000000045AE                 js      loc_48D1
.text:00000000000045B4
.text:00000000000045B4 loc_45B4:                               ; CODE XREF: install_file_in_file+3A7↓j
.text:00000000000045B4                 mov     edx, 1000h      ; nbytes
.text:00000000000045B9                 mov     rsi, r15        ; buf
.text:00000000000045BC                 mov     edi, r13d       ; fd
.text:00000000000045BF                 call    full_read
.text:00000000000045C4                 test    rax, rax
.text:00000000000045C7                 mov     rcx, rax
.text:00000000000045CA                 jz      loc_4313
.text:00000000000045D0                 lea     rsi, b_buff_7456 ; buf
.text:00000000000045D7                 mov     edx, 1000h      ; nbytes
.text:00000000000045DC                 mov     edi, r14d       ; fd
.text:00000000000045DF                 mov     [rsp+218h+var_210], rcx
.text:00000000000045E4                 call    full_read
.text:00000000000045E9                 mov     rcx, [rsp+218h+var_210]
.text:00000000000045EE                 cmp     rax, rcx
.text:00000000000045F1                 jnz     short loc_4609
.text:00000000000045F3                 lea     rsi, b_buff_7456 ; s2
.text:00000000000045FA                 mov     rdx, rax        ; n
.text:00000000000045FD                 mov     rdi, r15        ; s1
.text:0000000000004600                 call    _memcmp
.text:0000000000004605                 test    eax, eax
.text:0000000000004607                 jz      short loc_45B4
.text:0000000000004609
.text:0000000000004609 loc_4609:                               ; CODE XREF: install_file_in_file+391↑j
.text:0000000000004609                 mov     edi, r13d       ; fd
.text:000000000000460C                 call    _close
.text:0000000000004611                 mov     edi, r14d       ; fd
.text:0000000000004614                 call    _close
.text:0000000000004619                 jmp     loc_42CA
.text:0000000000004619 ; ---------------------------------------------------------------------------
.text:000000000000461E                 align 20h
.text:0000000000004620
.text:0000000000004620 loc_4620:                               ; CODE XREF: install_file_in_file+47↑j
.text:0000000000004620                 mov     rsi, r12
.text:0000000000004623                 mov     edi, 4
.text:0000000000004628                 call    quotearg_style
.text:000000000000462D                 mov     edx, 5
.text:0000000000004632                 mov     rbp, rax
.text:0000000000004635                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:000000000000463C                 jmp     loc_43B5
.text:000000000000463C ; ---------------------------------------------------------------------------
.text:0000000000004641                 align 8
.text:0000000000004648
.text:0000000000004648 loc_4648:                               ; CODE XREF: install_file_in_file+1A0↑j
.text:0000000000004648                 mov     rsi, rbp
.text:000000000000464B                 mov     edi, 4
.text:0000000000004650                 call    quotearg_style
.text:0000000000004655                 lea     rsi, aCannotChangeOw ; "cannot change ownership of %s"
.text:000000000000465C                 mov     r12, rax
.text:000000000000465F                 mov     edx, 5          ; category
.text:0000000000004664
.text:0000000000004664 loc_4664:                               ; CODE XREF: install_file_in_file+45C↓j
.text:0000000000004664                 xor     edi, edi        ; domainname
.text:0000000000004666                 call    _dcgettext
.text:000000000000466B                 mov     rbx, rax
.text:000000000000466E                 call    ___errno_location
.text:0000000000004673                 mov     esi, [rax]      ; errnum
.text:0000000000004675                 mov     rdx, rbx        ; format
.text:0000000000004678                 xor     edi, edi        ; status
.text:000000000000467A                 xor     eax, eax
.text:000000000000467C                 mov     rcx, r12
.text:000000000000467F                 xor     ebx, ebx
.text:0000000000004681                 call    _error
.text:0000000000004686                 cmp     cs:use_default_selinux_context, 0
.text:000000000000468D                 jz      loc_42E8
.text:0000000000004693                 jmp     loc_442E
.text:0000000000004693 ; ---------------------------------------------------------------------------
.text:0000000000004698                 align 20h
.text:00000000000046A0
.text:00000000000046A0 loc_46A0:                               ; CODE XREF: install_file_in_file+1BB↑j
.text:00000000000046A0                 mov     rsi, rbp
.text:00000000000046A3                 mov     edi, 4
.text:00000000000046A8                 call    quotearg_style
.text:00000000000046AD                 mov     edx, 5
.text:00000000000046B2                 mov     r12, rax
.text:00000000000046B5                 lea     rsi, aCannotChangePe ; "cannot change permissions of %s"
.text:00000000000046BC                 jmp     short loc_4664
.text:00000000000046BC ; ---------------------------------------------------------------------------
.text:00000000000046BE                 align 20h
.text:00000000000046C0
.text:00000000000046C0 loc_46C0:                               ; CODE XREF: install_file_in_file+CA↑j
.text:00000000000046C0                 call    _fork
.text:00000000000046C5                 cmp     eax, 0FFFFFFFFh
.text:00000000000046C8                 jz      short loc_4720
.text:00000000000046CA                 test    eax, eax
.text:00000000000046CC                 jz      loc_484D
.text:00000000000046D2                 lea     rsi, [rsp+218h+stat_loc] ; stat_loc
.text:00000000000046D7                 xor     edx, edx        ; options
.text:00000000000046D9                 mov     edi, eax        ; pid
.text:00000000000046DB                 call    _waitpid
.text:00000000000046E0                 test    eax, eax
.text:00000000000046E2                 js      loc_47C0
.text:00000000000046E8                 mov     eax, [rsp+218h+stat_loc]
.text:00000000000046EC                 test    al, 7Fh
.text:00000000000046EE                 jnz     short loc_46F9
.text:00000000000046F0                 test    ah, 0FFh
.text:00000000000046F3                 jz      loc_47A0
.text:00000000000046F9
.text:00000000000046F9 loc_46F9:                               ; CODE XREF: install_file_in_file+48E↑j
.text:00000000000046F9                 lea     rsi, aStripProcessTe ; "strip process terminated abnormally"
.text:0000000000004700                 xor     edi, edi        ; domainname
.text:0000000000004702                 mov     edx, 5          ; category
.text:0000000000004707                 call    _dcgettext
.text:000000000000470C                 xor     esi, esi        ; errnum
.text:000000000000470E                 mov     rdx, rax        ; format
.text:0000000000004711                 xor     edi, edi        ; status
.text:0000000000004713                 xor     eax, eax
.text:0000000000004715                 call    _error
.text:000000000000471A                 jmp     short loc_4749
.text:000000000000471A ; ---------------------------------------------------------------------------
.text:000000000000471C                 align 20h
.text:0000000000004720
.text:0000000000004720 loc_4720:                               ; CODE XREF: install_file_in_file+468↑j
.text:0000000000004720                 lea     rsi, aForkSystemCall ; "fork system call failed"
.text:0000000000004727                 mov     edx, 5          ; category
.text:000000000000472C
.text:000000000000472C loc_472C:                               ; CODE XREF: install_file_in_file+56C↓j
.text:000000000000472C                 xor     edi, edi        ; domainname
.text:000000000000472E                 call    _dcgettext
.text:0000000000004733                 mov     rbx, rax
.text:0000000000004736                 call    ___errno_location
.text:000000000000473B                 mov     esi, [rax]      ; errnum
.text:000000000000473D                 mov     rdx, rbx        ; format
.text:0000000000004740                 xor     edi, edi        ; status
.text:0000000000004742                 xor     eax, eax
.text:0000000000004744                 call    _error
.text:0000000000004749
.text:0000000000004749 loc_4749:                               ; CODE XREF: install_file_in_file+4BA↑j
.text:0000000000004749                 mov     rdi, rbp        ; name
.text:000000000000474C                 call    _unlink
.text:0000000000004751                 test    eax, eax
.text:0000000000004753                 jz      loc_42E6
.text:0000000000004759                 mov     rsi, rbp
.text:000000000000475C                 mov     edi, 4
.text:0000000000004761                 call    quotearg_style
.text:0000000000004766                 lea     rsi, aCannotUnlinkS ; "cannot unlink %s"
.text:000000000000476D                 mov     edx, 5          ; category
.text:0000000000004772                 xor     edi, edi        ; domainname
.text:0000000000004774                 mov     rbp, rax
.text:0000000000004777                 call    _dcgettext
.text:000000000000477C                 mov     rbx, rax
.text:000000000000477F                 call    ___errno_location
.text:0000000000004784                 mov     esi, [rax]      ; errnum
.text:0000000000004786                 mov     rcx, rbp
.text:0000000000004789                 mov     rdx, rbx        ; format
.text:000000000000478C                 mov     edi, 1          ; status
.text:0000000000004791                 xor     eax, eax
.text:0000000000004793                 call    _error
.text:0000000000004798                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000047A0
.text:00000000000047A0 loc_47A0:                               ; CODE XREF: install_file_in_file+493↑j
.text:00000000000047A0                 cmp     byte ptr [rbx+1Fh], 0
.text:00000000000047A4                 jz      loc_43E0
.text:00000000000047AA                 cmp     cs:strip_files, 0
.text:00000000000047B1                 jnz     loc_434E
.text:00000000000047B7                 jmp     loc_433A
.text:00000000000047B7 ; ---------------------------------------------------------------------------
.text:00000000000047BC                 align 20h
.text:00000000000047C0
.text:00000000000047C0 loc_47C0:                               ; CODE XREF: install_file_in_file+482↑j
.text:00000000000047C0                 mov     edx, 5
.text:00000000000047C5                 lea     rsi, aWaitingForStri ; "waiting for strip"
.text:00000000000047CC                 jmp     loc_472C
.text:00000000000047D1 ; ---------------------------------------------------------------------------
.text:00000000000047D1
.text:00000000000047D1 loc_47D1:                               ; CODE XREF: install_file_in_file+205↑j
.text:00000000000047D1                 movzx   edx, byte ptr [rbp+1]
.text:00000000000047D5                 lea     rax, [rbp+1]
.text:00000000000047D9                 cmp     dl, 2Fh ; '/'
.text:00000000000047DC                 jnz     short loc_47EC
.text:00000000000047DE                 xchg    ax, ax
.text:00000000000047E0
.text:00000000000047E0 loc_47E0:                               ; CODE XREF: install_file_in_file+58A↓j
.text:00000000000047E0                 add     rax, 1
.text:00000000000047E4                 movzx   edx, byte ptr [rax]
.text:00000000000047E7                 cmp     dl, 2Fh ; '/'
.text:00000000000047EA                 jz      short loc_47E0
.text:00000000000047EC
.text:00000000000047EC loc_47EC:                               ; CODE XREF: install_file_in_file+57C↑j
.text:00000000000047EC                 test    dl, dl
.text:00000000000047EE                 jz      loc_446B
.text:00000000000047F4                 mov     rdx, rax
.text:00000000000047F7                 jmp     short loc_47FE
.text:00000000000047F9 ; ---------------------------------------------------------------------------
.text:00000000000047F9
.text:00000000000047F9 loc_47F9:                               ; CODE XREF: install_file_in_file+5A7↓j
.text:00000000000047F9                 cmp     cl, 2Fh ; '/'
.text:00000000000047FC                 jz      short loc_4809
.text:00000000000047FE
.text:00000000000047FE loc_47FE:                               ; CODE XREF: install_file_in_file+597↑j
.text:00000000000047FE                 add     rdx, 1
.text:0000000000004802                 movzx   ecx, byte ptr [rdx]
.text:0000000000004805                 test    cl, cl
.text:0000000000004807                 jnz     short loc_47F9
.text:0000000000004809
.text:0000000000004809 loc_4809:                               ; CODE XREF: install_file_in_file+59C↑j
.text:0000000000004809                 lea     rbp, [rax-1]
.text:000000000000480D                 sub     rdx, rbp
.text:0000000000004810                 lea     rdi, [rdx+2]    ; size
.text:0000000000004814                 mov     r12, rdx
.text:0000000000004817                 call    _malloc
.text:000000000000481C                 test    rax, rax
.text:000000000000481F                 mov     r13, rax
.text:0000000000004822                 jz      loc_446B
.text:0000000000004828                 mov     rdx, r12        ; n
.text:000000000000482B                 mov     rsi, rbp        ; src
.text:000000000000482E                 mov     rdi, rax        ; dest
.text:0000000000004831                 call    _stpncpy
.text:0000000000004836                 mov     rdi, r13        ; ptr
.text:0000000000004839                 mov     word ptr [rax], 2Fh ; '/'
.text:000000000000483E                 call    free
.text:0000000000004843                 jmp     loc_446B
.text:0000000000004848 ; ---------------------------------------------------------------------------
.text:0000000000004848
.text:0000000000004848 loc_4848:                               ; CODE XREF: install_file_in_file+9B↑j
.text:0000000000004848                 call    ___stack_chk_fail
.text:000000000000484D ; ---------------------------------------------------------------------------
.text:000000000000484D
.text:000000000000484D loc_484D:                               ; CODE XREF: install_file_in_file+46C↑j
.text:000000000000484D                 mov     rbx, cs:strip_program
.text:0000000000004854                 xor     ecx, ecx
.text:0000000000004856                 mov     rdx, rbp
.text:0000000000004859                 xor     eax, eax
.text:000000000000485B                 mov     rsi, rbx        ; arg
.text:000000000000485E                 mov     rdi, rbx        ; file
.text:0000000000004861                 call    _execlp
.text:0000000000004866                 mov     rsi, rbx
.text:0000000000004869                 mov     edi, 4
.text:000000000000486E                 call    quotearg_style
.text:0000000000004873                 lea     rsi, aCannotRunS ; "cannot run %s"
.text:000000000000487A                 mov     edx, 5          ; category
.text:000000000000487F                 xor     edi, edi        ; domainname
.text:0000000000004881                 mov     rbp, rax
.text:0000000000004884                 call    _dcgettext
.text:0000000000004889                 mov     rbx, rax
.text:000000000000488C                 call    ___errno_location
.text:0000000000004891                 mov     esi, [rax]      ; errnum
.text:0000000000004893                 mov     rcx, rbp
.text:0000000000004896                 mov     rdx, rbx        ; format
.text:0000000000004899                 mov     edi, 1          ; status
.text:000000000000489E                 xor     eax, eax
.text:00000000000048A0                 call    _error
.text:00000000000048A5
.text:00000000000048A5 loc_48A5:                               ; CODE XREF: install_file_in_file+2F9↑j
.text:00000000000048A5                 call    ___errno_location
.text:00000000000048AA                 mov     dword ptr [rax], 0
.text:00000000000048B0                 mov     r13, rax
.text:00000000000048B3                 call    _getgid
.text:00000000000048B8                 cmp     eax, 0FFFFFFFFh
.text:00000000000048BB                 jnz     loc_455F
.text:00000000000048C1                 cmp     dword ptr [r13+0], 0
.text:00000000000048C6                 jz      loc_455F
.text:00000000000048CC                 jmp     loc_42CA
.text:00000000000048D1 ; ---------------------------------------------------------------------------
.text:00000000000048D1
.text:00000000000048D1 loc_48D1:                               ; CODE XREF: install_file_in_file+34E↑j
.text:00000000000048D1                 mov     edi, r13d       ; fd
.text:00000000000048D4                 call    _close
.text:00000000000048D9                 jmp     loc_42CA
.text:00000000000048DE ; ---------------------------------------------------------------------------
.text:00000000000048DE
.text:00000000000048DE loc_48DE:                               ; CODE XREF: install_file_in_file+2DD↑j
.text:00000000000048DE                 call    ___errno_location
.text:00000000000048E3                 mov     dword ptr [rax], 0
.text:00000000000048E9                 mov     r13, rax
.text:00000000000048EC                 call    _getuid
.text:00000000000048F1                 cmp     eax, 0FFFFFFFFh
.text:00000000000048F4                 jnz     loc_4543
.text:00000000000048FA                 cmp     dword ptr [r13+0], 0
.text:00000000000048FF                 jz      loc_4543
.text:0000000000004905                 jmp     loc_42CA
.text:000000000000490A ; ---------------------------------------------------------------------------
.text:000000000000490A
.text:000000000000490A loc_490A:                               ; CODE XREF: install_file_in_file+319↑j
.text:000000000000490A                 call    ___errno_location
.text:000000000000490F                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000004915                 jmp     loc_42CA
.text:0000000000004915 ; } // starts at 4260
.text:0000000000004915 install_file_in_file endp
.text:0000000000004915
.text:0000000000004915 ; ---------------------------------------------------------------------------
.text:000000000000491A                 align 20h
.text:0000000000004920
.text:0000000000004920 ; =============== S U B R O U T I N E =======================================
.text:0000000000004920
.text:0000000000004920 ; Attributes: noreturn
.text:0000000000004920
.text:0000000000004920 ; void __fastcall __noreturn usage(int status)
.text:0000000000004920                 public usage
.text:0000000000004920 usage           proc near               ; CODE XREF: main+251↑p
.text:0000000000004920                                         ; main+AA7↑p ...
.text:0000000000004920
.text:0000000000004920 var_A8          = qword ptr -0A8h
.text:0000000000004920 var_A0          = qword ptr -0A0h
.text:0000000000004920 var_98          = qword ptr -98h
.text:0000000000004920 var_90          = qword ptr -90h
.text:0000000000004920 var_88          = qword ptr -88h
.text:0000000000004920 var_80          = qword ptr -80h
.text:0000000000004920 var_78          = qword ptr -78h
.text:0000000000004920 var_70          = qword ptr -70h
.text:0000000000004920 var_68          = qword ptr -68h
.text:0000000000004920 var_60          = qword ptr -60h
.text:0000000000004920 var_58          = qword ptr -58h
.text:0000000000004920 var_50          = qword ptr -50h
.text:0000000000004920 var_48          = qword ptr -48h
.text:0000000000004920 var_40          = qword ptr -40h
.text:0000000000004920 var_30          = qword ptr -30h
.text:0000000000004920
.text:0000000000004920 ; __unwind {
.text:0000000000004920                 push    r13
.text:0000000000004922                 push    r12
.text:0000000000004924                 mov     edx, 5          ; category
.text:0000000000004929                 push    rbp
.text:000000000000492A                 push    rbx
.text:000000000000492B                 mov     ebp, edi
.text:000000000000492D                 sub     rsp, 88h
.text:0000000000004934                 mov     rbx, cs:program_name
.text:000000000000493B                 mov     rax, fs:28h
.text:0000000000004944                 mov     [rsp+0A8h+var_30], rax
.text:0000000000004949                 xor     eax, eax
.text:000000000000494B                 test    edi, edi
.text:000000000000494D                 jz      short loc_497D
.text:000000000000494F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000004956                 xor     edi, edi        ; domainname
.text:0000000000004958                 call    _dcgettext
.text:000000000000495D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004964                 mov     rdx, rax
.text:0000000000004967                 mov     rcx, rbx
.text:000000000000496A                 mov     esi, 1
.text:000000000000496F                 xor     eax, eax
.text:0000000000004971                 call    ___fprintf_chk
.text:0000000000004976
.text:0000000000004976 loc_4976:                               ; CODE XREF: usage+386↓j
.text:0000000000004976                 mov     edi, ebp        ; status
.text:0000000000004978                 call    _exit
.text:000000000000497D ; ---------------------------------------------------------------------------
.text:000000000000497D
.text:000000000000497D loc_497D:                               ; CODE XREF: usage+2D↑j
.text:000000000000497D                 lea     rsi, aUsageSOptionTS ; "Usage: %s [OPTION]... [-T] SOURCE DEST"...
.text:0000000000004984                 xor     edi, edi        ; domainname
.text:0000000000004986                 call    _dcgettext
.text:000000000000498B                 mov     rcx, rbx
.text:000000000000498E                 mov     r9, rbx
.text:0000000000004991                 mov     r8, rbx
.text:0000000000004994                 mov     rdx, rbx
.text:0000000000004997                 mov     rsi, rax
.text:000000000000499A                 mov     edi, 1
.text:000000000000499F                 xor     eax, eax
.text:00000000000049A1                 call    ___printf_chk
.text:00000000000049A6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000049AD                 lea     rsi, aThisInstallPro ; "\nThis install program copies files (of"...
.text:00000000000049B4                 mov     edx, 5          ; category
.text:00000000000049B9                 xor     edi, edi        ; domainname
.text:00000000000049BB                 call    _dcgettext
.text:00000000000049C0                 mov     rsi, rbx        ; stream
.text:00000000000049C3                 mov     rdi, rax        ; s
.text:00000000000049C6                 call    _fputs_unlocked
.text:00000000000049CB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000049D2                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:00000000000049D9                 mov     edx, 5          ; category
.text:00000000000049DE                 xor     edi, edi        ; domainname
.text:00000000000049E0                 call    _dcgettext
.text:00000000000049E5                 mov     rsi, rbx        ; stream
.text:00000000000049E8                 mov     rdi, rax        ; s
.text:00000000000049EB                 call    _fputs_unlocked
.text:00000000000049F0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000049F7                 lea     rsi, aBackupControlM ; "      --backup[=CONTROL]  make a backup"...
.text:00000000000049FE                 mov     edx, 5          ; category
.text:0000000000004A03                 xor     edi, edi        ; domainname
.text:0000000000004A05                 call    _dcgettext
.text:0000000000004A0A                 mov     rsi, rbx        ; stream
.text:0000000000004A0D                 mov     rdi, rax        ; s
.text:0000000000004A10                 call    _fputs_unlocked
.text:0000000000004A15                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004A1C                 lea     rsi, aDCreateAllLead ; "  -D                  create all leadin"...
.text:0000000000004A23                 mov     edx, 5          ; category
.text:0000000000004A28                 xor     edi, edi        ; domainname
.text:0000000000004A2A                 call    _dcgettext
.text:0000000000004A2F                 mov     rsi, rbx        ; stream
.text:0000000000004A32                 mov     rdi, rax        ; s
.text:0000000000004A35                 call    _fputs_unlocked
.text:0000000000004A3A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004A41                 lea     rsi, aPPreserveTimes ; "  -p, --preserve-timestamps   apply acc"...
.text:0000000000004A48                 mov     edx, 5          ; category
.text:0000000000004A4D                 xor     edi, edi        ; domainname
.text:0000000000004A4F                 call    _dcgettext
.text:0000000000004A54                 mov     rsi, rbx        ; stream
.text:0000000000004A57                 mov     rdi, rax        ; s
.text:0000000000004A5A                 call    _fputs_unlocked
.text:0000000000004A5F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004A66                 lea     rsi, aPreserveContex ; "      --preserve-context  preserve SELi"...
.text:0000000000004A6D                 mov     edx, 5          ; category
.text:0000000000004A72                 xor     edi, edi        ; domainname
.text:0000000000004A74                 call    _dcgettext
.text:0000000000004A79                 mov     rsi, rbx        ; stream
.text:0000000000004A7C                 mov     rdi, rax        ; s
.text:0000000000004A7F                 call    _fputs_unlocked
.text:0000000000004A84                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004A8B                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000004A92                 mov     edx, 5          ; category
.text:0000000000004A97                 xor     edi, edi        ; domainname
.text:0000000000004A99                 call    _dcgettext
.text:0000000000004A9E                 mov     rsi, rbx        ; stream
.text:0000000000004AA1                 mov     rdi, rax        ; s
.text:0000000000004AA4                 call    _fputs_unlocked
.text:0000000000004AA9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004AB0                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000004AB7                 mov     edx, 5          ; category
.text:0000000000004ABC                 xor     edi, edi        ; domainname
.text:0000000000004ABE                 call    _dcgettext
.text:0000000000004AC3                 mov     rsi, rbx        ; stream
.text:0000000000004AC6                 mov     rdi, rax        ; s
.text:0000000000004AC9                 call    _fputs_unlocked
.text:0000000000004ACE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004AD5                 lea     rsi, aTheBackupSuffi ; "\nThe backup suffix is '~', unless set "...
.text:0000000000004ADC                 mov     edx, 5          ; category
.text:0000000000004AE1                 xor     edi, edi        ; domainname
.text:0000000000004AE3                 call    _dcgettext
.text:0000000000004AE8                 mov     rsi, rbx        ; stream
.text:0000000000004AEB                 mov     rdi, rax        ; s
.text:0000000000004AEE                 call    _fputs_unlocked
.text:0000000000004AF3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004AFA                 lea     rsi, aNoneOffNeverMa ; "  none, off       never make backups (e"...
.text:0000000000004B01                 mov     edx, 5          ; category
.text:0000000000004B06                 xor     edi, edi        ; domainname
.text:0000000000004B08                 call    _dcgettext
.text:0000000000004B0D                 mov     rsi, rbx        ; stream
.text:0000000000004B10                 mov     rdi, rax        ; s
.text:0000000000004B13                 lea     rbx, aInstall   ; "install"
.text:0000000000004B1A                 call    _fputs_unlocked
.text:0000000000004B1F                 lea     rax, asc_16490  ; "["
.text:0000000000004B26                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000004B2D                 mov     [rsp+0A8h+var_48], 0
.text:0000000000004B36                 mov     [rsp+0A8h+var_40], 0
.text:0000000000004B3F                 mov     rdx, rsp
.text:0000000000004B42                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000004B46                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000004B4D                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000004B52                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000004B59                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000004B5E                 lea     rax, domainname ; "coreutils"
.text:0000000000004B65                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000004B6A                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000004B71                 mov     [rsp+0A8h+var_98], rax
.text:0000000000004B76                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000004B7D                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000004B82                 mov     [rsp+0A8h+var_90], rax
.text:0000000000004B87                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000004B8E                 mov     [rsp+0A8h+var_88], rax
.text:0000000000004B93                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000004B9A                 mov     [rsp+0A8h+var_80], rax
.text:0000000000004B9F                 mov     [rsp+0A8h+var_70], rax
.text:0000000000004BA4                 mov     [rsp+0A8h+var_60], rax
.text:0000000000004BA9                 mov     [rsp+0A8h+var_50], rax
.text:0000000000004BAE                 xchg    ax, ax
.text:0000000000004BB0
.text:0000000000004BB0 loc_4BB0:                               ; CODE XREF: usage+2AD↓j
.text:0000000000004BB0                 add     rdx, 10h
.text:0000000000004BB4                 mov     rdi, [rdx]
.text:0000000000004BB7                 test    rdi, rdi
.text:0000000000004BBA                 jz      short loc_4BCF
.text:0000000000004BBC                 mov     ecx, 8
.text:0000000000004BC1                 mov     rsi, rbx
.text:0000000000004BC4                 repe cmpsb
.text:0000000000004BC6                 setnbe  al
.text:0000000000004BC9                 sbb     al, 0
.text:0000000000004BCB                 test    al, al
.text:0000000000004BCD                 jnz     short loc_4BB0
.text:0000000000004BCF
.text:0000000000004BCF loc_4BCF:                               ; CODE XREF: usage+29A↑j
.text:0000000000004BCF                 mov     r12, [rdx+8]
.text:0000000000004BD3                 xor     edi, edi        ; domainname
.text:0000000000004BD5                 mov     edx, 5          ; category
.text:0000000000004BDA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000004BE1                 test    r12, r12
.text:0000000000004BE4                 jz      loc_4CAB
.text:0000000000004BEA                 call    _dcgettext
.text:0000000000004BEF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004BF6                 lea     rdx, unk_16506
.text:0000000000004BFD                 mov     rsi, rax
.text:0000000000004C00                 mov     edi, 1
.text:0000000000004C05                 xor     eax, eax
.text:0000000000004C07                 call    ___printf_chk
.text:0000000000004C0C                 xor     esi, esi        ; locale
.text:0000000000004C0E                 mov     edi, 5          ; category
.text:0000000000004C13                 call    _setlocale
.text:0000000000004C18                 test    rax, rax
.text:0000000000004C1B                 jz      short loc_4C39
.text:0000000000004C1D                 lea     rsi, s2         ; "en_"
.text:0000000000004C24                 mov     edx, 3          ; n
.text:0000000000004C29                 mov     rdi, rax        ; s1
.text:0000000000004C2C                 call    _strncmp
.text:0000000000004C31                 test    eax, eax
.text:0000000000004C33                 jnz     loc_4D40
.text:0000000000004C39
.text:0000000000004C39 loc_4C39:                               ; CODE XREF: usage+2FB↑j
.text:0000000000004C39                                         ; usage+445↓j
.text:0000000000004C39                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000004C40                 xor     edi, edi        ; domainname
.text:0000000000004C42                 mov     edx, 5          ; category
.text:0000000000004C47                 call    _dcgettext
.text:0000000000004C4C                 lea     rcx, aInstall   ; "install"
.text:0000000000004C53                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004C5A                 mov     rsi, rax
.text:0000000000004C5D                 mov     edi, 1
.text:0000000000004C62                 xor     eax, eax
.text:0000000000004C64                 call    ___printf_chk
.text:0000000000004C69                 cmp     r12, rbx
.text:0000000000004C6C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000004C73                 lea     rbx, aSSUnbackup+14h ; ""
.text:0000000000004C7A                 cmovz   rbx, rcx
.text:0000000000004C7E
.text:0000000000004C7E loc_4C7E:                               ; CODE XREF: usage+414↓j
.text:0000000000004C7E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000004C85                 xor     edi, edi        ; domainname
.text:0000000000004C87                 mov     edx, 5          ; category
.text:0000000000004C8C                 call    _dcgettext
.text:0000000000004C91                 mov     rcx, rbx
.text:0000000000004C94                 mov     rsi, rax
.text:0000000000004C97                 mov     rdx, r12
.text:0000000000004C9A                 mov     edi, 1
.text:0000000000004C9F                 xor     eax, eax
.text:0000000000004CA1                 call    ___printf_chk
.text:0000000000004CA6                 jmp     loc_4976
.text:0000000000004CAB ; ---------------------------------------------------------------------------
.text:0000000000004CAB
.text:0000000000004CAB loc_4CAB:                               ; CODE XREF: usage+2C4↑j
.text:0000000000004CAB                 call    _dcgettext
.text:0000000000004CB0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004CB7                 lea     rdx, unk_16506
.text:0000000000004CBE                 mov     rsi, rax
.text:0000000000004CC1                 mov     edi, 1
.text:0000000000004CC6                 xor     eax, eax
.text:0000000000004CC8                 call    ___printf_chk
.text:0000000000004CCD                 xor     esi, esi        ; locale
.text:0000000000004CCF                 mov     edi, 5          ; category
.text:0000000000004CD4                 call    _setlocale
.text:0000000000004CD9                 test    rax, rax
.text:0000000000004CDC                 jz      short loc_4CF6
.text:0000000000004CDE                 lea     rsi, s2         ; "en_"
.text:0000000000004CE5                 mov     edx, 3          ; n
.text:0000000000004CEA                 mov     rdi, rax        ; s1
.text:0000000000004CED                 call    _strncmp
.text:0000000000004CF2                 test    eax, eax
.text:0000000000004CF4                 jnz     short loc_4D39
.text:0000000000004CF6
.text:0000000000004CF6 loc_4CF6:                               ; CODE XREF: usage+3BC↑j
.text:0000000000004CF6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000004CFD                 mov     edx, 5          ; category
.text:0000000000004D02                 xor     edi, edi        ; domainname
.text:0000000000004D04                 lea     r12, aInstall   ; "install"
.text:0000000000004D0B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000004D12                 call    _dcgettext
.text:0000000000004D17                 lea     rcx, aInstall   ; "install"
.text:0000000000004D1E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004D25                 mov     rsi, rax
.text:0000000000004D28                 mov     edi, 1
.text:0000000000004D2D                 xor     eax, eax
.text:0000000000004D2F                 call    ___printf_chk
.text:0000000000004D34                 jmp     loc_4C7E
.text:0000000000004D39 ; ---------------------------------------------------------------------------
.text:0000000000004D39
.text:0000000000004D39 loc_4D39:                               ; CODE XREF: usage+3D4↑j
.text:0000000000004D39                 lea     r12, aInstall   ; "install"
.text:0000000000004D40
.text:0000000000004D40 loc_4D40:                               ; CODE XREF: usage+313↑j
.text:0000000000004D40                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000004D47                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000004D4E                 xor     edi, edi        ; domainname
.text:0000000000004D50                 mov     edx, 5          ; category
.text:0000000000004D55                 call    _dcgettext
.text:0000000000004D5A                 mov     rsi, r13        ; stream
.text:0000000000004D5D                 mov     rdi, rax        ; s
.text:0000000000004D60                 call    _fputs_unlocked
.text:0000000000004D65                 jmp     loc_4C39
.text:0000000000004D65 ; } // starts at 4920
.text:0000000000004D65 usage           endp
.text:0000000000004D65
.text:0000000000004D65 ; ---------------------------------------------------------------------------
.text:0000000000004D6A                 align 10h
.text:0000000000004D70
.text:0000000000004D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D70
.text:0000000000004D70
.text:0000000000004D70 ; __int64 __usercall prog_fprintf@<rax>(FILE *s@<rdi>, char)
.text:0000000000004D70                 public prog_fprintf
.text:0000000000004D70 prog_fprintf    proc near               ; CODE XREF: announce_mkdir_part_9+34↑j
.text:0000000000004D70
.text:0000000000004D70 var_E8          = dword ptr -0E8h
.text:0000000000004D70 var_E4          = dword ptr -0E4h
.text:0000000000004D70 var_E0          = qword ptr -0E0h
.text:0000000000004D70 var_D8          = qword ptr -0D8h
.text:0000000000004D70 var_D0          = qword ptr -0D0h
.text:0000000000004D70 var_C8          = byte ptr -0C8h
.text:0000000000004D70 var_B8          = qword ptr -0B8h
.text:0000000000004D70 var_B0          = qword ptr -0B0h
.text:0000000000004D70 var_A8          = qword ptr -0A8h
.text:0000000000004D70 var_A0          = qword ptr -0A0h
.text:0000000000004D70 var_98          = xmmword ptr -98h
.text:0000000000004D70 var_88          = xmmword ptr -88h
.text:0000000000004D70 var_78          = xmmword ptr -78h
.text:0000000000004D70 var_68          = xmmword ptr -68h
.text:0000000000004D70 var_58          = xmmword ptr -58h
.text:0000000000004D70 var_48          = xmmword ptr -48h
.text:0000000000004D70 var_38          = xmmword ptr -38h
.text:0000000000004D70 var_28          = xmmword ptr -28h
.text:0000000000004D70 arg_0           = byte ptr  8
.text:0000000000004D70
.text:0000000000004D70 ; __unwind {
.text:0000000000004D70                 push    rbp
.text:0000000000004D71                 push    rbx
.text:0000000000004D72                 mov     rbp, rsi
.text:0000000000004D75                 mov     rbx, rdi
.text:0000000000004D78                 sub     rsp, 0D8h
.text:0000000000004D7F                 test    al, al
.text:0000000000004D81                 mov     [rsp+0E8h+var_B8], rdx
.text:0000000000004D86                 mov     [rsp+0E8h+var_B0], rcx
.text:0000000000004D8B                 mov     [rsp+0E8h+var_A8], r8
.text:0000000000004D90                 mov     [rsp+0E8h+var_A0], r9
.text:0000000000004D95                 jz      short loc_4DCE
.text:0000000000004D97                 movaps  [rsp+0E8h+var_98], xmm0
.text:0000000000004D9C                 movaps  [rsp+0E8h+var_88], xmm1
.text:0000000000004DA1                 movaps  [rsp+0E8h+var_78], xmm2
.text:0000000000004DA6                 movaps  [rsp+0E8h+var_68], xmm3
.text:0000000000004DAE                 movaps  [rsp+0E8h+var_58], xmm4
.text:0000000000004DB6                 movaps  [rsp+0E8h+var_48], xmm5
.text:0000000000004DBE                 movaps  [rsp+0E8h+var_38], xmm6
.text:0000000000004DC6                 movaps  [rsp+0E8h+var_28], xmm7
.text:0000000000004DCE
.text:0000000000004DCE loc_4DCE:                               ; CODE XREF: prog_fprintf+25↑j
.text:0000000000004DCE                 mov     rsi, rbx        ; stream
.text:0000000000004DD1                 mov     rax, fs:28h
.text:0000000000004DDA                 mov     [rsp+0E8h+var_D0], rax
.text:0000000000004DDF                 xor     eax, eax
.text:0000000000004DE1                 mov     rdi, cs:program_name ; s
.text:0000000000004DE8                 call    _fputs_unlocked
.text:0000000000004DED                 lea     rdi, asc_176A6  ; ": "
.text:0000000000004DF4                 mov     rcx, rbx        ; stream
.text:0000000000004DF7                 mov     edx, 2          ; n
.text:0000000000004DFC                 mov     esi, 1          ; size
.text:0000000000004E01                 call    _fwrite_unlocked
.text:0000000000004E06                 lea     rax, [rsp+0E8h+arg_0]
.text:0000000000004E0E                 mov     rdx, rsp
.text:0000000000004E11                 mov     rsi, rbp
.text:0000000000004E14                 mov     rdi, rbx        ; s
.text:0000000000004E17                 mov     [rsp+0E8h+var_E8], 10h
.text:0000000000004E1E                 mov     [rsp+0E8h+var_E4], 30h ; '0'
.text:0000000000004E26                 mov     [rsp+0E8h+var_E0], rax
.text:0000000000004E2B                 lea     rax, [rsp+0E8h+var_C8]
.text:0000000000004E30                 mov     [rsp+0E8h+var_D8], rax
.text:0000000000004E35                 call    rpl_vfprintf
.text:0000000000004E3A                 mov     rax, [rbx+28h]
.text:0000000000004E3E                 cmp     rax, [rbx+30h]
.text:0000000000004E42                 jnb     short loc_4E70
.text:0000000000004E44                 lea     rdx, [rax+1]
.text:0000000000004E48                 mov     [rbx+28h], rdx
.text:0000000000004E4C                 mov     byte ptr [rax], 0Ah
.text:0000000000004E4F
.text:0000000000004E4F loc_4E4F:                               ; CODE XREF: prog_fprintf+10D↓j
.text:0000000000004E4F                 mov     rax, [rsp+0E8h+var_D0]
.text:0000000000004E54                 xor     rax, fs:28h
.text:0000000000004E5D                 jnz     short loc_4E7F
.text:0000000000004E5F                 add     rsp, 0D8h
.text:0000000000004E66                 pop     rbx
.text:0000000000004E67                 pop     rbp
.text:0000000000004E68                 retn
.text:0000000000004E68 ; ---------------------------------------------------------------------------
.text:0000000000004E69                 align 10h
.text:0000000000004E70
.text:0000000000004E70 loc_4E70:                               ; CODE XREF: prog_fprintf+D2↑j
.text:0000000000004E70                 mov     esi, 0Ah        ; int
.text:0000000000004E75                 mov     rdi, rbx        ; _IO_FILE *
.text:0000000000004E78                 call    ___overflow
.text:0000000000004E7D                 jmp     short loc_4E4F
.text:0000000000004E7F ; ---------------------------------------------------------------------------
.text:0000000000004E7F
.text:0000000000004E7F loc_4E7F:                               ; CODE XREF: prog_fprintf+ED↑j
.text:0000000000004E7F                 call    ___stack_chk_fail
.text:0000000000004E7F ; } // starts at 4D70
.text:0000000000004E7F prog_fprintf    endp
.text:0000000000004E7F
.text:0000000000004E7F ; ---------------------------------------------------------------------------
.text:0000000000004E84                 align 10h
.text:0000000000004E90
.text:0000000000004E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E90
.text:0000000000004E90
.text:0000000000004E90 ; __int64 __fastcall writable_destination(char *name)
.text:0000000000004E90 writable_destination proc near          ; CODE XREF: overwrite_ok_isra_12+2A↓p
.text:0000000000004E90                                         ; copy_internal+123B↓p
.text:0000000000004E90 ; __unwind {
.text:0000000000004E90                 and     esi, 0F000h
.text:0000000000004E96                 cmp     esi, 0A000h
.text:0000000000004E9C                 jz      short loc_4EB8
.text:0000000000004E9E                 push    rbx
.text:0000000000004E9F                 mov     rbx, rdi
.text:0000000000004EA2                 call    can_write_any_file
.text:0000000000004EA7                 test    al, al
.text:0000000000004EA9                 jz      short loc_4EC0
.text:0000000000004EAB                 mov     eax, 1
.text:0000000000004EB0                 pop     rbx
.text:0000000000004EB1                 retn
.text:0000000000004EB1 ; ---------------------------------------------------------------------------
.text:0000000000004EB2                 align 8
.text:0000000000004EB8
.text:0000000000004EB8 loc_4EB8:                               ; CODE XREF: writable_destination+C↑j
.text:0000000000004EB8                 mov     eax, 1
.text:0000000000004EBD                 retn
.text:0000000000004EBD ; ---------------------------------------------------------------------------
.text:0000000000004EBE                 align 20h
.text:0000000000004EC0
.text:0000000000004EC0 loc_4EC0:                               ; CODE XREF: writable_destination+19↑j
.text:0000000000004EC0                 mov     rdi, rbx        ; name
.text:0000000000004EC3                 mov     esi, 2          ; type
.text:0000000000004EC8                 call    _euidaccess
.text:0000000000004ECD                 test    eax, eax
.text:0000000000004ECF                 setz    al
.text:0000000000004ED2                 pop     rbx
.text:0000000000004ED3                 retn
.text:0000000000004ED3 ; } // starts at 4E90
.text:0000000000004ED3 writable_destination endp
.text:0000000000004ED3
.text:0000000000004ED3 ; ---------------------------------------------------------------------------
.text:0000000000004ED4                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EE0
.text:0000000000004EE0
.text:0000000000004EE0 ; __int64 __fastcall write_zeros(int fd)
.text:0000000000004EE0 write_zeros     proc near               ; CODE XREF: copy_internal+39B1↓p
.text:0000000000004EE0                                         ; copy_internal+3CBB↓p
.text:0000000000004EE0 ; __unwind {
.text:0000000000004EE0                 cmp     cs:zeros_7570, 0
.text:0000000000004EE8                 push    r12
.text:0000000000004EEA                 mov     r12d, edi
.text:0000000000004EED                 push    rbp
.text:0000000000004EEE                 push    rbx
.text:0000000000004EEF                 mov     rbx, rsi
.text:0000000000004EF2                 jz      short loc_4F48
.text:0000000000004EF4
.text:0000000000004EF4 loc_4EF4:                               ; CODE XREF: write_zeros+85↓j
.text:0000000000004EF4                                         ; write_zeros+A0↓j
.text:0000000000004EF4                 test    rbx, rbx
.text:0000000000004EF7                 jnz     short loc_4F05
.text:0000000000004EF9                 jmp     short loc_4F38
.text:0000000000004EF9 ; ---------------------------------------------------------------------------
.text:0000000000004EFB                 align 20h
.text:0000000000004F00
.text:0000000000004F00 loc_4F00:                               ; CODE XREF: write_zeros+4C↓j
.text:0000000000004F00                 sub     rbx, rax
.text:0000000000004F03                 jz      short loc_4F38
.text:0000000000004F05
.text:0000000000004F05 loc_4F05:                               ; CODE XREF: write_zeros+17↑j
.text:0000000000004F05                 cmp     cs:nz_7571, rbx
.text:0000000000004F0C                 mov     rbp, rbx
.text:0000000000004F0F                 mov     rsi, cs:zeros_7570 ; buf
.text:0000000000004F16                 cmovbe  rbp, cs:nz_7571
.text:0000000000004F1E                 mov     edi, r12d       ; fd
.text:0000000000004F21                 mov     rdx, rbp        ; n
.text:0000000000004F24                 call    full_write
.text:0000000000004F29                 cmp     rax, rbp
.text:0000000000004F2C                 jz      short loc_4F00
.text:0000000000004F2E                 pop     rbx
.text:0000000000004F2F                 xor     eax, eax
.text:0000000000004F31                 pop     rbp
.text:0000000000004F32                 pop     r12
.text:0000000000004F34                 retn
.text:0000000000004F34 ; ---------------------------------------------------------------------------
.text:0000000000004F35                 align 8
.text:0000000000004F38
.text:0000000000004F38 loc_4F38:                               ; CODE XREF: write_zeros+19↑j
.text:0000000000004F38                                         ; write_zeros+23↑j
.text:0000000000004F38                 pop     rbx
.text:0000000000004F39                 mov     eax, 1
.text:0000000000004F3E                 pop     rbp
.text:0000000000004F3F                 pop     r12
.text:0000000000004F41                 retn
.text:0000000000004F41 ; ---------------------------------------------------------------------------
.text:0000000000004F42                 align 8
.text:0000000000004F48
.text:0000000000004F48 loc_4F48:                               ; CODE XREF: write_zeros+12↑j
.text:0000000000004F48                 mov     rdi, cs:nz_7571 ; nmemb
.text:0000000000004F4F                 mov     esi, 1          ; size
.text:0000000000004F54                 call    _calloc
.text:0000000000004F59                 test    rax, rax
.text:0000000000004F5C                 jz      short loc_4F67
.text:0000000000004F5E                 mov     cs:zeros_7570, rax
.text:0000000000004F65                 jmp     short loc_4EF4
.text:0000000000004F67 ; ---------------------------------------------------------------------------
.text:0000000000004F67
.text:0000000000004F67 loc_4F67:                               ; CODE XREF: write_zeros+7C↑j
.text:0000000000004F67                 lea     rax, fallback_7572
.text:0000000000004F6E                 mov     cs:nz_7571, 400h
.text:0000000000004F79                 mov     cs:zeros_7570, rax
.text:0000000000004F80                 jmp     loc_4EF4
.text:0000000000004F80 ; } // starts at 4EE0
.text:0000000000004F80 write_zeros     endp
.text:0000000000004F80
.text:0000000000004F80 ; ---------------------------------------------------------------------------
.text:0000000000004F85                 align 10h
.text:0000000000004F90
.text:0000000000004F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F90
.text:0000000000004F90
.text:0000000000004F90 punch_hole      proc near               ; CODE XREF: create_hole+4B↓p
.text:0000000000004F90                                         ; copy_internal+3C7C↓p
.text:0000000000004F90 ; __unwind {
.text:0000000000004F90                 push    rbx
.text:0000000000004F91                 mov     rcx, rdx        ; len
.text:0000000000004F94                 mov     rdx, rsi        ; offset
.text:0000000000004F97                 mov     esi, 3          ; mode
.text:0000000000004F9C                 call    _fallocate
.text:0000000000004FA1                 test    eax, eax
.text:0000000000004FA3                 mov     ebx, eax
.text:0000000000004FA5                 js      short loc_4FB0
.text:0000000000004FA7
.text:0000000000004FA7 loc_4FA7:                               ; CODE XREF: punch_hole+2F↓j
.text:0000000000004FA7                 mov     eax, ebx
.text:0000000000004FA9                 pop     rbx
.text:0000000000004FAA                 retn
.text:0000000000004FAA ; ---------------------------------------------------------------------------
.text:0000000000004FAB                 align 10h
.text:0000000000004FB0
.text:0000000000004FB0 loc_4FB0:                               ; CODE XREF: punch_hole+15↑j
.text:0000000000004FB0                 call    ___errno_location
.text:0000000000004FB5                 mov     eax, [rax]
.text:0000000000004FB7                 cmp     eax, 26h ; '&'
.text:0000000000004FBA                 jz      short loc_4FC1
.text:0000000000004FBC                 cmp     eax, 5Fh ; '_'
.text:0000000000004FBF                 jnz     short loc_4FA7
.text:0000000000004FC1
.text:0000000000004FC1 loc_4FC1:                               ; CODE XREF: punch_hole+2A↑j
.text:0000000000004FC1                 xor     ebx, ebx
.text:0000000000004FC3                 mov     eax, ebx
.text:0000000000004FC5                 pop     rbx
.text:0000000000004FC6                 retn
.text:0000000000004FC6 ; } // starts at 4F90
.text:0000000000004FC6 punch_hole      endp
.text:0000000000004FC6
.text:0000000000004FC6 ; ---------------------------------------------------------------------------
.text:0000000000004FC7                 align 10h
.text:0000000000004FD0
.text:0000000000004FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FD0
.text:0000000000004FD0
.text:0000000000004FD0 emit_verbose    proc near               ; CODE XREF: copy_internal+A3B↓p
.text:0000000000004FD0                                         ; copy_internal+13C7↓p ...
.text:0000000000004FD0 ; __unwind {
.text:0000000000004FD0                 push    r12
.text:0000000000004FD2                 push    rbp
.text:0000000000004FD3                 mov     r12, rdi
.text:0000000000004FD6                 push    rbx
.text:0000000000004FD7                 mov     edi, 1
.text:0000000000004FDC                 mov     rbx, rdx
.text:0000000000004FDF                 mov     rdx, rsi
.text:0000000000004FE2                 mov     esi, 4
.text:0000000000004FE7                 call    quotearg_n_style
.text:0000000000004FEC                 xor     edi, edi
.text:0000000000004FEE                 mov     rdx, r12
.text:0000000000004FF1                 mov     esi, 4
.text:0000000000004FF6                 mov     rbp, rax
.text:0000000000004FF9                 call    quotearg_n_style
.text:0000000000004FFE                 lea     rsi, aSS        ; "%s -> %s"
.text:0000000000005005                 mov     rdx, rax
.text:0000000000005008                 mov     rcx, rbp
.text:000000000000500B                 xor     eax, eax
.text:000000000000500D                 mov     edi, 1
.text:0000000000005012                 call    ___printf_chk
.text:0000000000005017                 test    rbx, rbx
.text:000000000000501A                 jz      short loc_5051
.text:000000000000501C                 mov     rsi, rbx
.text:000000000000501F                 mov     edi, 4
.text:0000000000005024                 call    quotearg_style
.text:0000000000005029                 lea     rsi, aBackupS   ; " (backup: %s)"
.text:0000000000005030                 mov     rbx, rax
.text:0000000000005033                 mov     edx, 5          ; category
.text:0000000000005038                 xor     edi, edi        ; domainname
.text:000000000000503A                 call    _dcgettext
.text:000000000000503F                 mov     rdx, rbx
.text:0000000000005042                 mov     rsi, rax
.text:0000000000005045                 mov     edi, 1
.text:000000000000504A                 xor     eax, eax
.text:000000000000504C                 call    ___printf_chk
.text:0000000000005051
.text:0000000000005051 loc_5051:                               ; CODE XREF: emit_verbose+4A↑j
.text:0000000000005051                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000005058                 mov     rax, [rdi+28h]
.text:000000000000505C                 cmp     rax, [rdi+30h]
.text:0000000000005060                 jnb     short loc_5078
.text:0000000000005062                 lea     rdx, [rax+1]
.text:0000000000005066                 mov     [rdi+28h], rdx
.text:000000000000506A                 mov     byte ptr [rax], 0Ah
.text:000000000000506D                 pop     rbx
.text:000000000000506E                 pop     rbp
.text:000000000000506F                 pop     r12
.text:0000000000005071                 retn
.text:0000000000005071 ; ---------------------------------------------------------------------------
.text:0000000000005072                 align 8
.text:0000000000005078
.text:0000000000005078 loc_5078:                               ; CODE XREF: emit_verbose+90↑j
.text:0000000000005078                 pop     rbx
.text:0000000000005079                 pop     rbp
.text:000000000000507A                 pop     r12
.text:000000000000507C                 mov     esi, 0Ah        ; int
.text:0000000000005081                 jmp     ___overflow
.text:0000000000005081 ; } // starts at 4FD0
.text:0000000000005081 emit_verbose    endp
.text:0000000000005081
.text:0000000000005081 ; ---------------------------------------------------------------------------
.text:0000000000005086                 align 10h
.text:0000000000005090
.text:0000000000005090 ; =============== S U B R O U T I N E =======================================
.text:0000000000005090
.text:0000000000005090
.text:0000000000005090 create_hard_link proc near              ; CODE XREF: copy_internal+2F4↓p
.text:0000000000005090                                         ; copy_internal+56F↓p ...
.text:0000000000005090 ; __unwind {
.text:0000000000005090                 push    r13
.text:0000000000005092                 push    r12
.text:0000000000005094                 movzx   r9d, dl
.text:0000000000005098                 push    rbp
.text:0000000000005099                 push    rbx
.text:000000000000509A                 mov     edx, 0FFFFFF9Ch
.text:000000000000509F                 mov     r13, rdi
.text:00000000000050A2                 mov     r12, rsi
.text:00000000000050A5                 mov     ebp, ecx
.text:00000000000050A7                 sub     rsp, 10h
.text:00000000000050AB                 test    r8b, r8b
.text:00000000000050AE                 mov     rcx, rsi
.text:00000000000050B1                 setnz   r8b
.text:00000000000050B5                 push    0FFFFFFFFFFFFFFFFh
.text:00000000000050B7                 mov     rsi, rdi
.text:00000000000050BA                 movzx   r8d, r8b
.text:00000000000050BE                 mov     edi, edx
.text:00000000000050C0                 shl     r8d, 0Ah
.text:00000000000050C4                 call    force_linkat
.text:00000000000050C9                 test    eax, eax
.text:00000000000050CB                 mov     ebx, eax
.text:00000000000050CD                 pop     rdx
.text:00000000000050CE                 pop     rcx
.text:00000000000050CF                 jg      short loc_5138
.text:00000000000050D1                 shr     ebx, 1Fh
.text:00000000000050D4                 and     bl, bpl
.text:00000000000050D7                 jnz     short loc_50F0
.text:00000000000050D9                 add     rsp, 8
.text:00000000000050DD                 mov     ebx, 1
.text:00000000000050E2                 mov     eax, ebx
.text:00000000000050E4                 pop     rbx
.text:00000000000050E5                 pop     rbp
.text:00000000000050E6                 pop     r12
.text:00000000000050E8                 pop     r13
.text:00000000000050EA                 retn
.text:00000000000050EA ; ---------------------------------------------------------------------------
.text:00000000000050EB                 align 10h
.text:00000000000050F0
.text:00000000000050F0 loc_50F0:                               ; CODE XREF: create_hard_link+47↑j
.text:00000000000050F0                 mov     rsi, r12
.text:00000000000050F3                 mov     edi, 4
.text:00000000000050F8                 call    quotearg_style
.text:00000000000050FD                 lea     rsi, aRemovedS  ; "removed %s\n"
.text:0000000000005104                 mov     rbp, rax
.text:0000000000005107                 mov     edx, 5          ; category
.text:000000000000510C                 xor     edi, edi        ; domainname
.text:000000000000510E                 call    _dcgettext
.text:0000000000005113                 mov     rdx, rbp
.text:0000000000005116                 mov     rsi, rax
.text:0000000000005119                 mov     edi, 1
.text:000000000000511E                 xor     eax, eax
.text:0000000000005120                 call    ___printf_chk
.text:0000000000005125                 add     rsp, 8
.text:0000000000005129                 mov     eax, ebx
.text:000000000000512B                 pop     rbx
.text:000000000000512C                 pop     rbp
.text:000000000000512D                 pop     r12
.text:000000000000512F                 pop     r13
.text:0000000000005131                 retn
.text:0000000000005131 ; ---------------------------------------------------------------------------
.text:0000000000005132                 align 8
.text:0000000000005138
.text:0000000000005138 loc_5138:                               ; CODE XREF: create_hard_link+3F↑j
.text:0000000000005138                 mov     rdx, r13
.text:000000000000513B                 mov     esi, 4
.text:0000000000005140                 mov     edi, 1
.text:0000000000005145                 call    quotearg_n_style
.text:000000000000514A                 mov     rdx, r12
.text:000000000000514D                 mov     esi, 4
.text:0000000000005152                 xor     edi, edi
.text:0000000000005154                 mov     r13, rax
.text:0000000000005157                 call    quotearg_n_style
.text:000000000000515C                 lea     rsi, aCannotCreateHa ; "cannot create hard link %s to %s"
.text:0000000000005163                 mov     rbp, rax
.text:0000000000005166                 mov     edx, 5          ; category
.text:000000000000516B                 xor     edi, edi        ; domainname
.text:000000000000516D                 call    _dcgettext
.text:0000000000005172                 mov     r8, r13
.text:0000000000005175                 mov     rcx, rbp
.text:0000000000005178                 mov     rdx, rax        ; format
.text:000000000000517B                 mov     esi, ebx        ; errnum
.text:000000000000517D                 xor     eax, eax
.text:000000000000517F                 xor     edi, edi        ; status
.text:0000000000005181                 call    _error
.text:0000000000005186                 xor     ebx, ebx
.text:0000000000005188                 add     rsp, 8
.text:000000000000518C                 mov     eax, ebx
.text:000000000000518E                 pop     rbx
.text:000000000000518F                 pop     rbp
.text:0000000000005190                 pop     r12
.text:0000000000005192                 pop     r13
.text:0000000000005194                 retn
.text:0000000000005194 ; } // starts at 5090
.text:0000000000005194 create_hard_link endp
.text:0000000000005194
.text:0000000000005194 ; ---------------------------------------------------------------------------
.text:0000000000005195                 align 20h
.text:00000000000051A0
.text:00000000000051A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051A0
.text:00000000000051A0
.text:00000000000051A0 overwrite_ok_isra_12 proc near          ; CODE XREF: copy_internal+C6C↓p
.text:00000000000051A0                                         ; copy_internal+1277↓p
.text:00000000000051A0
.text:00000000000051A0 var_3C          = byte ptr -3Ch
.text:00000000000051A0 var_32          = byte ptr -32h
.text:00000000000051A0 var_30          = qword ptr -30h
.text:00000000000051A0
.text:00000000000051A0 ; __unwind {
.text:00000000000051A0                 push    r14
.text:00000000000051A2                 push    r13
.text:00000000000051A4                 mov     r13, rdi
.text:00000000000051A7                 push    r12
.text:00000000000051A9                 push    rbp
.text:00000000000051AA                 mov     rbp, rdx
.text:00000000000051AD                 push    rbx
.text:00000000000051AE                 mov     rbx, rsi
.text:00000000000051B1                 mov     rdi, rbx        ; name
.text:00000000000051B4                 sub     rsp, 20h
.text:00000000000051B8                 mov     esi, [rdx]
.text:00000000000051BA                 mov     rax, fs:28h
.text:00000000000051C3                 mov     [rsp+48h+var_30], rax
.text:00000000000051C8                 xor     eax, eax
.text:00000000000051CA                 call    writable_destination
.text:00000000000051CF                 test    al, al
.text:00000000000051D1                 jnz     loc_5268
.text:00000000000051D7                 mov     edi, [rbp+0]
.text:00000000000051DA                 lea     r12, [rsp+48h+var_3C]
.text:00000000000051DF                 mov     rsi, r12
.text:00000000000051E2                 call    strmode
.text:00000000000051E7                 mov     ebp, [rbp+0]
.text:00000000000051EA                 mov     rsi, rbx
.text:00000000000051ED                 mov     edi, 4
.text:00000000000051F2                 mov     [rsp+48h+var_32], 0
.text:00000000000051F7                 call    quotearg_style
.text:00000000000051FC                 and     ebp, 0FFFh
.text:0000000000005202                 cmp     byte ptr [r13+18h], 0
.text:0000000000005207                 mov     r14, rax
.text:000000000000520A                 mov     rbx, cs:program_name
.text:0000000000005211                 mov     edx, 5          ; category
.text:0000000000005216                 jnz     short loc_5226
.text:0000000000005218                 test    dword ptr [r13+14h], 0FFFF00h
.text:0000000000005220                 jz      loc_52D0
.text:0000000000005226
.text:0000000000005226 loc_5226:                               ; CODE XREF: overwrite_ok_isra_12+76↑j
.text:0000000000005226                 lea     rsi, aSReplaceSOverr ; "%s: replace %s, overriding mode %04lo ("...
.text:000000000000522D                 xor     edi, edi        ; domainname
.text:000000000000522F                 call    _dcgettext
.text:0000000000005234                 mov     rdx, rax
.text:0000000000005237
.text:0000000000005237 loc_5237:                               ; CODE XREF: overwrite_ok_isra_12+141↓j
.text:0000000000005237                 sub     rsp, 8
.text:000000000000523B                 add     r12, 1
.text:000000000000523F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000005246                 push    r12
.text:0000000000005248                 mov     r9, rbp
.text:000000000000524B                 mov     r8, r14
.text:000000000000524E                 mov     rcx, rbx
.text:0000000000005251                 mov     esi, 1
.text:0000000000005256                 xor     eax, eax
.text:0000000000005258                 call    ___fprintf_chk
.text:000000000000525D                 pop     rax
.text:000000000000525E                 pop     rdx
.text:000000000000525F                 jmp     short loc_52AE
.text:000000000000525F ; ---------------------------------------------------------------------------
.text:0000000000005261                 align 8
.text:0000000000005268
.text:0000000000005268 loc_5268:                               ; CODE XREF: overwrite_ok_isra_12+31↑j
.text:0000000000005268                 mov     rsi, rbx
.text:000000000000526B                 mov     edi, 4
.text:0000000000005270                 call    quotearg_style
.text:0000000000005275                 lea     rsi, aSOverwriteS ; "%s: overwrite %s? "
.text:000000000000527C                 mov     rbx, cs:program_name
.text:0000000000005283                 mov     edx, 5          ; category
.text:0000000000005288                 xor     edi, edi        ; domainname
.text:000000000000528A                 mov     rbp, rax
.text:000000000000528D                 call    _dcgettext
.text:0000000000005292                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000005299                 mov     rdx, rax
.text:000000000000529C                 mov     r8, rbp
.text:000000000000529F                 mov     rcx, rbx
.text:00000000000052A2                 mov     esi, 1
.text:00000000000052A7                 xor     eax, eax
.text:00000000000052A9                 call    ___fprintf_chk
.text:00000000000052AE
.text:00000000000052AE loc_52AE:                               ; CODE XREF: overwrite_ok_isra_12+BF↑j
.text:00000000000052AE                 call    yesno
.text:00000000000052B3                 mov     rcx, [rsp+48h+var_30]
.text:00000000000052B8                 xor     rcx, fs:28h
.text:00000000000052C1                 jnz     short loc_52E6
.text:00000000000052C3                 add     rsp, 20h
.text:00000000000052C7                 pop     rbx
.text:00000000000052C8                 pop     rbp
.text:00000000000052C9                 pop     r12
.text:00000000000052CB                 pop     r13
.text:00000000000052CD                 pop     r14
.text:00000000000052CF                 retn
.text:00000000000052D0 ; ---------------------------------------------------------------------------
.text:00000000000052D0
.text:00000000000052D0 loc_52D0:                               ; CODE XREF: overwrite_ok_isra_12+80↑j
.text:00000000000052D0                 lea     rsi, aSUnwritableSMo ; "%s: unwritable %s (mode %04lo, %s); try"...
.text:00000000000052D7                 xor     edi, edi        ; domainname
.text:00000000000052D9                 call    _dcgettext
.text:00000000000052DE                 mov     rdx, rax
.text:00000000000052E1                 jmp     loc_5237
.text:00000000000052E6 ; ---------------------------------------------------------------------------
.text:00000000000052E6
.text:00000000000052E6 loc_52E6:                               ; CODE XREF: overwrite_ok_isra_12+121↑j
.text:00000000000052E6                 call    ___stack_chk_fail
.text:00000000000052E6 ; } // starts at 51A0
.text:00000000000052E6 overwrite_ok_isra_12 endp
.text:00000000000052E6
.text:00000000000052E6 ; ---------------------------------------------------------------------------
.text:00000000000052EB                 align 10h
.text:00000000000052F0
.text:00000000000052F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052F0
.text:00000000000052F0
.text:00000000000052F0 create_hole     proc near               ; CODE XREF: sparse_copy+277↓j
.text:00000000000052F0                                         ; sparse_copy+2B8↓p ...
.text:00000000000052F0 ; __unwind {
.text:00000000000052F0                 push    r13
.text:00000000000052F2                 push    r12
.text:00000000000052F4                 mov     r13, rsi
.text:00000000000052F7                 push    rbp
.text:00000000000052F8                 push    rbx
.text:00000000000052F9                 mov     r12d, edx
.text:00000000000052FC                 mov     rsi, rcx        ; offset
.text:00000000000052FF                 mov     edx, 1          ; whence
.text:0000000000005304                 mov     ebp, edi
.text:0000000000005306                 sub     rsp, 8
.text:000000000000530A                 mov     rbx, rcx
.text:000000000000530D                 call    _lseek
.text:0000000000005312                 test    rax, rax
.text:0000000000005315                 js      short loc_5390
.text:0000000000005317                 test    r12b, r12b
.text:000000000000531A                 jnz     short loc_5330
.text:000000000000531C
.text:000000000000531C loc_531C:                               ; CODE XREF: create_hole+52↓j
.text:000000000000531C                 add     rsp, 8
.text:0000000000005320                 mov     eax, 1
.text:0000000000005325                 pop     rbx
.text:0000000000005326                 pop     rbp
.text:0000000000005327                 pop     r12
.text:0000000000005329                 pop     r13
.text:000000000000532B                 retn
.text:000000000000532B ; ---------------------------------------------------------------------------
.text:000000000000532C                 align 10h
.text:0000000000005330
.text:0000000000005330 loc_5330:                               ; CODE XREF: create_hole+2A↑j
.text:0000000000005330                 sub     rax, rbx
.text:0000000000005333                 mov     rdx, rbx
.text:0000000000005336                 mov     edi, ebp
.text:0000000000005338                 mov     rsi, rax
.text:000000000000533B                 call    punch_hole
.text:0000000000005340                 test    eax, eax
.text:0000000000005342                 jns     short loc_531C
.text:0000000000005344                 mov     rsi, r13
.text:0000000000005347                 mov     edi, 4
.text:000000000000534C                 call    quotearg_style
.text:0000000000005351                 lea     rsi, aErrorDeallocat ; "error deallocating %s"
.text:0000000000005358                 mov     rbp, rax
.text:000000000000535B                 mov     edx, 5          ; category
.text:0000000000005360
.text:0000000000005360 loc_5360:                               ; CODE XREF: create_hole+BC↓j
.text:0000000000005360                 xor     edi, edi        ; domainname
.text:0000000000005362                 call    _dcgettext
.text:0000000000005367                 mov     rbx, rax
.text:000000000000536A                 call    ___errno_location
.text:000000000000536F                 mov     esi, [rax]      ; errnum
.text:0000000000005371                 mov     rcx, rbp
.text:0000000000005374                 mov     rdx, rbx        ; format
.text:0000000000005377                 xor     eax, eax
.text:0000000000005379                 xor     edi, edi        ; status
.text:000000000000537B                 call    _error
.text:0000000000005380                 add     rsp, 8
.text:0000000000005384                 xor     eax, eax
.text:0000000000005386                 pop     rbx
.text:0000000000005387                 pop     rbp
.text:0000000000005388                 pop     r12
.text:000000000000538A                 pop     r13
.text:000000000000538C                 retn
.text:000000000000538C ; ---------------------------------------------------------------------------
.text:000000000000538D                 align 10h
.text:0000000000005390
.text:0000000000005390 loc_5390:                               ; CODE XREF: create_hole+25↑j
.text:0000000000005390                 mov     rsi, r13
.text:0000000000005393                 mov     edi, 4
.text:0000000000005398                 call    quotearg_style
.text:000000000000539D                 mov     edx, 5
.text:00000000000053A2                 mov     rbp, rax
.text:00000000000053A5                 lea     rsi, aCannotLseekS ; "cannot lseek %s"
.text:00000000000053AC                 jmp     short loc_5360
.text:00000000000053AC ; } // starts at 52F0
.text:00000000000053AC create_hole     endp
.text:00000000000053AC
.text:00000000000053AC ; ---------------------------------------------------------------------------
.text:00000000000053AE                 align 10h
.text:00000000000053B0
.text:00000000000053B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053B0
.text:00000000000053B0
.text:00000000000053B0 sparse_copy     proc near               ; CODE XREF: copy_internal+316A↓p
.text:00000000000053B0                                         ; copy_internal+3B42↓p
.text:00000000000053B0
.text:00000000000053B0 var_A0          = qword ptr -0A0h
.text:00000000000053B0 var_98          = qword ptr -98h
.text:00000000000053B0 var_90          = dword ptr -90h
.text:00000000000053B0 var_8B          = byte ptr -8Bh
.text:00000000000053B0 var_8A          = byte ptr -8Ah
.text:00000000000053B0 var_89          = byte ptr -89h
.text:00000000000053B0 buf             = qword ptr -88h
.text:00000000000053B0 var_80          = qword ptr -80h
.text:00000000000053B0 var_78          = qword ptr -78h
.text:00000000000053B0 nbytes          = qword ptr -70h
.text:00000000000053B0 var_68          = qword ptr -68h
.text:00000000000053B0 var_60          = qword ptr -60h
.text:00000000000053B0 var_58          = qword ptr -58h
.text:00000000000053B0 var_50          = qword ptr -50h
.text:00000000000053B0 var_48          = qword ptr -48h
.text:00000000000053B0 fd              = dword ptr -40h
.text:00000000000053B0 var_3C          = dword ptr -3Ch
.text:00000000000053B0 arg_0           = qword ptr  8
.text:00000000000053B0 arg_8           = qword ptr  10h
.text:00000000000053B0 arg_10          = qword ptr  18h
.text:00000000000053B0 arg_18          = qword ptr  20h
.text:00000000000053B0 arg_20          = qword ptr  28h
.text:00000000000053B0
.text:00000000000053B0 ; __unwind {
.text:00000000000053B0                 push    r15
.text:00000000000053B2                 push    r14
.text:00000000000053B4                 push    r13
.text:00000000000053B6                 push    r12
.text:00000000000053B8                 push    rbp
.text:00000000000053B9                 push    rbx
.text:00000000000053BA                 sub     rsp, 78h
.text:00000000000053BE                 mov     rax, [rsp+0A8h+arg_0]
.text:00000000000053C6                 mov     rbx, [rsp+0A8h+arg_18]
.text:00000000000053CE                 mov     r10, [rsp+0A8h+arg_20]
.text:00000000000053D6                 mov     [rsp+0A8h+var_89], r9b
.text:00000000000053DB                 mov     [rsp+0A8h+var_50], rax
.text:00000000000053E0                 mov     rax, [rsp+0A8h+arg_8]
.text:00000000000053E8                 mov     byte ptr [r10], 0
.text:00000000000053EC                 mov     [rsp+0A8h+var_68], rbx
.text:00000000000053F1                 mov     [rsp+0A8h+var_48], r10
.text:00000000000053F6                 mov     qword ptr [rbx], 0
.text:00000000000053FD                 mov     [rsp+0A8h+var_98], rax
.text:0000000000005402                 mov     rax, [rsp+0A8h+arg_10]
.text:000000000000540A                 test    rax, rax
.text:000000000000540D                 mov     [rsp+0A8h+var_80], rax
.text:0000000000005412                 jz      loc_57B3
.text:0000000000005418                 test    r8, r8
.text:000000000000541B                 mov     [rsp+0A8h+var_58], r8
.text:0000000000005420                 mov     [rsp+0A8h+var_3C], r9d
.text:0000000000005425                 cmovz   r8, rcx
.text:0000000000005429                 mov     [rsp+0A8h+nbytes], rcx
.text:000000000000542E                 mov     [rsp+0A8h+buf], rdx
.text:0000000000005433                 mov     [rsp+0A8h+var_90], esi
.text:0000000000005437                 mov     [rsp+0A8h+fd], edi
.text:000000000000543B                 xor     r13d, r13d
.text:000000000000543E                 mov     [rsp+0A8h+var_60], r8
.text:0000000000005443                 xor     r15d, r15d
.text:0000000000005446
.text:0000000000005446 loc_5446:                               ; CODE XREF: sparse_copy+C7↓j
.text:0000000000005446                                         ; sparse_copy+249↓j
.text:0000000000005446                 mov     rax, [rsp+0A8h+nbytes]
.text:000000000000544B                 mov     rdx, [rsp+0A8h+var_80]
.text:0000000000005450                 mov     rsi, [rsp+0A8h+buf] ; buf
.text:0000000000005455                 mov     edi, [rsp+0A8h+fd] ; fd
.text:0000000000005459                 cmp     rax, rdx
.text:000000000000545C                 cmovbe  rdx, rax        ; nbytes
.text:0000000000005460                 call    _read
.text:0000000000005465                 test    rax, rax
.text:0000000000005468                 mov     [rsp+0A8h+var_78], rax
.text:000000000000546D                 jns     short loc_54D0
.text:000000000000546F                 call    ___errno_location
.text:0000000000005474                 cmp     dword ptr [rax], 4
.text:0000000000005477                 jz      short loc_5446
.text:0000000000005479                 mov     rsi, [rsp+0A8h+var_50]
.text:000000000000547E                 mov     edi, 4
.text:0000000000005483                 mov     rbx, rax
.text:0000000000005486                 xor     r15d, r15d
.text:0000000000005489                 call    quotearg_style
.text:000000000000548E                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:0000000000005495                 mov     edx, 5          ; category
.text:000000000000549A                 xor     edi, edi        ; domainname
.text:000000000000549C                 mov     rbp, rax
.text:000000000000549F                 call    _dcgettext
.text:00000000000054A4                 mov     esi, [rbx]      ; errnum
.text:00000000000054A6                 mov     rdx, rax        ; format
.text:00000000000054A9                 mov     rcx, rbp
.text:00000000000054AC                 xor     edi, edi        ; status
.text:00000000000054AE                 xor     eax, eax
.text:00000000000054B0                 call    _error
.text:00000000000054B5
.text:00000000000054B5 loc_54B5:                               ; CODE XREF: sparse_copy+2CE↓j
.text:00000000000054B5                                         ; sparse_copy+3A9↓j ...
.text:00000000000054B5                 add     rsp, 78h
.text:00000000000054B9                 mov     eax, r15d
.text:00000000000054BC                 pop     rbx
.text:00000000000054BD                 pop     rbp
.text:00000000000054BE                 pop     r12
.text:00000000000054C0                 pop     r13
.text:00000000000054C2                 pop     r14
.text:00000000000054C4                 pop     r15
.text:00000000000054C6                 retn
.text:00000000000054C6 ; ---------------------------------------------------------------------------
.text:00000000000054C7                 align 10h
.text:00000000000054D0
.text:00000000000054D0 loc_54D0:                               ; CODE XREF: sparse_copy+BD↑j
.text:00000000000054D0                 jz      loc_55FF
.text:00000000000054D6                 mov     rax, [rsp+0A8h+var_68]
.text:00000000000054DB                 mov     rbp, [rsp+0A8h+var_78]
.text:00000000000054E0                 mov     ecx, r15d
.text:00000000000054E3                 mov     r14, [rsp+0A8h+buf]
.text:00000000000054E8                 mov     r10, [rsp+0A8h+var_60]
.text:00000000000054ED                 add     [rax], rbp
.text:00000000000054F0                 cmp     [rsp+0A8h+var_58], 0
.text:00000000000054F6                 mov     r11, r14
.text:00000000000054F9                 mov     r15, r10
.text:00000000000054FC                 setnz   [rsp+0A8h+var_8B]
.text:0000000000005501                 nop     dword ptr [rax+00000000h]
.text:0000000000005508
.text:0000000000005508 loc_5508:                               ; CODE XREF: sparse_copy+306↓j
.text:0000000000005508                 cmp     rbp, r15
.text:000000000000550B                 mov     rbx, r15
.text:000000000000550E                 cmovbe  rbx, rbp
.text:0000000000005512                 test    rbx, rbx
.text:0000000000005515                 setnz   r12b
.text:0000000000005519                 and     r12b, [rsp+0A8h+var_8B]
.text:000000000000551E                 jz      loc_5630
.text:0000000000005524                 mov     rsi, r14
.text:0000000000005527                 mov     rdx, rbx
.text:000000000000552A
.text:000000000000552A loc_552A:                               ; CODE XREF: sparse_copy+194↓j
.text:000000000000552A                 cmp     byte ptr [rsi], 0
.text:000000000000552D                 jnz     loc_5760
.text:0000000000005533                 add     rsi, 1          ; s2
.text:0000000000005537                 sub     rdx, 1          ; n
.text:000000000000553B                 jz      loc_56C8
.text:0000000000005541                 test    dl, 0Fh
.text:0000000000005544                 jnz     short loc_552A
.text:0000000000005546                 mov     rdi, r14        ; s1
.text:0000000000005549                 mov     [rsp+0A8h+var_A0], r11
.text:000000000000554E                 mov     [rsp+0A8h+var_8A], cl
.text:0000000000005552                 call    _memcmp
.text:0000000000005557                 movzx   ecx, [rsp+0A8h+var_8A]
.text:000000000000555C                 test    eax, eax
.text:000000000000555E                 mov     r11, [rsp+0A8h+var_A0]
.text:0000000000005563                 setz    r12b
.text:0000000000005567                 mov     edx, r12d
.text:000000000000556A                 xor     edx, ecx
.text:000000000000556C                 test    eax, eax
.text:000000000000556E                 setnz   al
.text:0000000000005571
.text:0000000000005571 loc_5571:                               ; CODE XREF: sparse_copy+3B8↓j
.text:0000000000005571                 test    r13, r13
.text:0000000000005574                 setnz   r9b
.text:0000000000005578                 and     r9d, edx
.text:000000000000557B                 cmp     rbp, r15
.text:000000000000557E                 ja      loc_56D8
.text:0000000000005584                 test    al, al
.text:0000000000005586                 jz      loc_56D8
.text:000000000000558C                 test    r9b, r9b
.text:000000000000558F                 jz      loc_563A
.text:0000000000005595                 mov     r15d, 1
.text:000000000000559B
.text:000000000000559B loc_559B:                               ; CODE XREF: sparse_copy+330↓j
.text:000000000000559B                 test    cl, cl
.text:000000000000559D                 mov     [rsp+0A8h+var_8A], cl
.text:00000000000055A1                 jnz     loc_5652
.text:00000000000055A7
.text:00000000000055A7 loc_55A7:                               ; CODE XREF: sparse_copy+29C↓j
.text:00000000000055A7                 mov     edi, [rsp+0A8h+var_90] ; fd
.text:00000000000055AB                 mov     rdx, r13        ; n
.text:00000000000055AE                 mov     rsi, r11        ; buf
.text:00000000000055B1                 mov     byte ptr [rsp+0A8h+var_A0], r9b
.text:00000000000055B6                 call    full_write
.text:00000000000055BB                 cmp     r13, rax
.text:00000000000055BE                 movzx   r9d, byte ptr [rsp+0A8h+var_A0]
.text:00000000000055C4                 movzx   ecx, [rsp+0A8h+var_8A]
.text:00000000000055C9                 jnz     loc_576D
.text:00000000000055CF
.text:00000000000055CF loc_55CF:                               ; CODE XREF: sparse_copy+2C5↓j
.text:00000000000055CF                 test    r15d, r15d
.text:00000000000055D2                 mov     r13, rbx
.text:00000000000055D5                 jz      loc_56E8
.text:00000000000055DB                 test    rbx, rbx
.text:00000000000055DE                 jnz     loc_5700
.text:00000000000055E4
.text:00000000000055E4 loc_55E4:                               ; CODE XREF: sparse_copy+30F↓j
.text:00000000000055E4                 mov     rdi, [rsp+0A8h+var_78]
.text:00000000000055E9                 sub     [rsp+0A8h+var_80], rdi
.text:00000000000055EE                 mov     r15d, r12d
.text:00000000000055F1                 mov     rax, [rsp+0A8h+var_48]
.text:00000000000055F6                 mov     [rax], r12b
.text:00000000000055F9                 jnz     loc_5446
.text:00000000000055FF
.text:00000000000055FF loc_55FF:                               ; CODE XREF: sparse_copy:loc_54D0↑j
.text:00000000000055FF                 test    r15b, r15b
.text:0000000000005602                 jz      loc_57B3
.text:0000000000005608                 movzx   edx, byte ptr [rsp+0A8h+var_3C]
.text:000000000000560D                 mov     rsi, [rsp+0A8h+var_98]
.text:0000000000005612                 mov     rcx, r13
.text:0000000000005615                 mov     edi, [rsp+0A8h+var_90]
.text:0000000000005619                 add     rsp, 78h
.text:000000000000561D                 pop     rbx
.text:000000000000561E                 pop     rbp
.text:000000000000561F                 pop     r12
.text:0000000000005621                 pop     r13
.text:0000000000005623                 pop     r14
.text:0000000000005625                 pop     r15
.text:0000000000005627                 jmp     create_hole
.text:0000000000005627 ; ---------------------------------------------------------------------------
.text:000000000000562C                 align 10h
.text:0000000000005630
.text:0000000000005630 loc_5630:                               ; CODE XREF: sparse_copy+16E↑j
.text:0000000000005630                 cmp     cl, 1
.text:0000000000005633                 jz      short loc_5688
.text:0000000000005635                 cmp     rbp, r15
.text:0000000000005638                 ja      short loc_5688
.text:000000000000563A
.text:000000000000563A loc_563A:                               ; CODE XREF: sparse_copy+1DF↑j
.text:000000000000563A                                         ; sparse_copy+2E0↓j
.text:000000000000563A                 add     r13, rbx
.text:000000000000563D                 xor     r9d, r9d
.text:0000000000005640                 test    cl, cl
.text:0000000000005642                 mov     r15d, 1
.text:0000000000005648                 mov     [rsp+0A8h+var_8A], cl
.text:000000000000564C                 jz      loc_55A7
.text:0000000000005652
.text:0000000000005652 loc_5652:                               ; CODE XREF: sparse_copy+1F1↑j
.text:0000000000005652                 movzx   edx, [rsp+0A8h+var_89]
.text:0000000000005657                 mov     rsi, [rsp+0A8h+var_98]
.text:000000000000565C                 mov     rcx, r13
.text:000000000000565F                 mov     edi, [rsp+0A8h+var_90]
.text:0000000000005663                 mov     [rsp+0A8h+var_8A], r9b
.text:0000000000005668                 call    create_hole
.text:000000000000566D                 test    al, al
.text:000000000000566F                 movzx   r9d, [rsp+0A8h+var_8A]
.text:0000000000005675                 jnz     loc_55CF
.text:000000000000567B                 mov     r15d, eax
.text:000000000000567E                 jmp     loc_54B5
.text:000000000000567E ; ---------------------------------------------------------------------------
.text:0000000000005683                 align 8
.text:0000000000005688
.text:0000000000005688 loc_5688:                               ; CODE XREF: sparse_copy+283↑j
.text:0000000000005688                                         ; sparse_copy+288↑j
.text:0000000000005688                 test    rbx, rbx
.text:000000000000568B                 jnz     short loc_5698
.text:000000000000568D                 mov     r12d, ecx
.text:0000000000005690                 jmp     short loc_563A
.text:0000000000005692 ; ---------------------------------------------------------------------------
.text:0000000000005692
.text:0000000000005692 loc_5692:                               ; CODE XREF: sparse_copy+32B↓j
.text:0000000000005692                 mov     ecx, r12d
.text:0000000000005695                 nop     dword ptr [rax]
.text:0000000000005698
.text:0000000000005698 loc_5698:                               ; CODE XREF: sparse_copy+2DB↑j
.text:0000000000005698                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:00000000000056A2                 sub     rax, rbx
.text:00000000000056A5                 cmp     rax, r13
.text:00000000000056A8                 jb      short loc_5720
.text:00000000000056AA                 add     r13, rbx
.text:00000000000056AD                 add     r14, rbx
.text:00000000000056B0                 mov     r15, rbx
.text:00000000000056B3
.text:00000000000056B3 loc_56B3:                               ; CODE XREF: sparse_copy+344↓j
.text:00000000000056B3                                         ; sparse_copy+35C↓j ...
.text:00000000000056B3                 sub     rbp, r15
.text:00000000000056B6                 jnz     loc_5508
.text:00000000000056BC                 mov     r12d, ecx
.text:00000000000056BF                 jmp     loc_55E4
.text:00000000000056BF ; ---------------------------------------------------------------------------
.text:00000000000056C4                 align 8
.text:00000000000056C8
.text:00000000000056C8 loc_56C8:                               ; CODE XREF: sparse_copy+18B↑j
.text:00000000000056C8                 mov     r9d, ecx
.text:00000000000056CB                 xor     r9d, 1
.text:00000000000056CF                 test    r13, r13
.text:00000000000056D2                 setnz   al
.text:00000000000056D5                 and     r9d, eax
.text:00000000000056D8
.text:00000000000056D8 loc_56D8:                               ; CODE XREF: sparse_copy+1CE↑j
.text:00000000000056D8                                         ; sparse_copy+1D6↑j
.text:00000000000056D8                 test    r9b, r9b
.text:00000000000056DB                 jz      short loc_5692
.text:00000000000056DD                 xor     r15d, r15d
.text:00000000000056E0                 jmp     loc_559B
.text:00000000000056E0 ; ---------------------------------------------------------------------------
.text:00000000000056E5                 align 8
.text:00000000000056E8
.text:00000000000056E8 loc_56E8:                               ; CODE XREF: sparse_copy+225↑j
.text:00000000000056E8                 mov     r11, r14
.text:00000000000056EB                 mov     ecx, r12d
.text:00000000000056EE                 add     r14, rbx
.text:00000000000056F1                 mov     r15, rbx
.text:00000000000056F4                 jmp     short loc_56B3
.text:00000000000056F4 ; ---------------------------------------------------------------------------
.text:00000000000056F6                 align 20h
.text:0000000000005700
.text:0000000000005700 loc_5700:                               ; CODE XREF: sparse_copy+22E↑j
.text:0000000000005700                 xor     r15d, r15d
.text:0000000000005703                 test    r9b, r9b
.text:0000000000005706                 mov     ecx, r12d
.text:0000000000005709                 mov     r11, r14
.text:000000000000570C                 jnz     short loc_56B3
.text:000000000000570E                 add     r14, rbx
.text:0000000000005711                 mov     r15, rbx
.text:0000000000005714                 xor     r13d, r13d
.text:0000000000005717                 jmp     short loc_56B3
.text:0000000000005717 ; ---------------------------------------------------------------------------
.text:0000000000005719                 align 20h
.text:0000000000005720
.text:0000000000005720 loc_5720:                               ; CODE XREF: sparse_copy+2F8↑j
.text:0000000000005720                 mov     rsi, [rsp+0A8h+var_50]
.text:0000000000005725                 mov     edi, 4
.text:000000000000572A                 xor     r15d, r15d
.text:000000000000572D                 call    quotearg_style
.text:0000000000005732                 lea     rsi, aOverflowReadin ; "overflow reading %s"
.text:0000000000005739                 mov     rbx, rax
.text:000000000000573C                 mov     edx, 5          ; category
.text:0000000000005741                 xor     edi, edi        ; domainname
.text:0000000000005743                 call    _dcgettext
.text:0000000000005748                 mov     rcx, rbx
.text:000000000000574B                 mov     rdx, rax        ; format
.text:000000000000574E                 xor     esi, esi        ; errnum
.text:0000000000005750                 xor     edi, edi        ; status
.text:0000000000005752                 xor     eax, eax
.text:0000000000005754                 call    _error
.text:0000000000005759                 jmp     loc_54B5
.text:0000000000005759 ; ---------------------------------------------------------------------------
.text:000000000000575E                 align 20h
.text:0000000000005760
.text:0000000000005760 loc_5760:                               ; CODE XREF: sparse_copy+17D↑j
.text:0000000000005760                 mov     eax, r12d
.text:0000000000005763                 mov     edx, ecx
.text:0000000000005765                 xor     r12d, r12d
.text:0000000000005768                 jmp     loc_5571
.text:000000000000576D ; ---------------------------------------------------------------------------
.text:000000000000576D
.text:000000000000576D loc_576D:                               ; CODE XREF: sparse_copy+219↑j
.text:000000000000576D                 mov     rsi, [rsp+0A8h+var_98]
.text:0000000000005772                 mov     edi, 4
.text:0000000000005777                 mov     r15d, ecx
.text:000000000000577A                 call    quotearg_style
.text:000000000000577F                 lea     rsi, aErrorWritingS ; "error writing %s"
.text:0000000000005786                 xor     edi, edi        ; domainname
.text:0000000000005788                 mov     edx, 5          ; category
.text:000000000000578D                 mov     rbp, rax
.text:0000000000005790                 call    _dcgettext
.text:0000000000005795                 mov     rbx, rax
.text:0000000000005798                 call    ___errno_location
.text:000000000000579D                 mov     esi, [rax]      ; errnum
.text:000000000000579F                 mov     rcx, rbp
.text:00000000000057A2                 mov     rdx, rbx        ; format
.text:00000000000057A5                 xor     edi, edi        ; status
.text:00000000000057A7                 xor     eax, eax
.text:00000000000057A9                 call    _error
.text:00000000000057AE                 jmp     loc_54B5
.text:00000000000057B3 ; ---------------------------------------------------------------------------
.text:00000000000057B3
.text:00000000000057B3 loc_57B3:                               ; CODE XREF: sparse_copy+62↑j
.text:00000000000057B3                                         ; sparse_copy+252↑j
.text:00000000000057B3                 mov     r15d, 1
.text:00000000000057B9                 jmp     loc_54B5
.text:00000000000057B9 ; } // starts at 53B0
.text:00000000000057B9 sparse_copy     endp
.text:00000000000057B9
.text:00000000000057B9 ; ---------------------------------------------------------------------------
.text:00000000000057BE                 align 20h
.text:00000000000057C0
.text:00000000000057C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057C0
.text:00000000000057C0
.text:00000000000057C0                 public set_process_security_ctx
.text:00000000000057C0 set_process_security_ctx proc near      ; CODE XREF: copy_internal+511↓p
.text:00000000000057C0                                         ; copy_internal+B15↓p ...
.text:00000000000057C0 ; __unwind {
.text:00000000000057C0                 push    r13
.text:00000000000057C2                 push    r12
.text:00000000000057C4                 push    rbp
.text:00000000000057C5                 push    rbx
.text:00000000000057C6                 mov     rbp, r8
.text:00000000000057C9                 sub     rsp, 8
.text:00000000000057CD                 cmp     byte ptr [r8+25h], 0
.text:00000000000057D2                 jz      short loc_5840
.text:00000000000057D4                 mov     r13, rdi
.text:00000000000057D7                 call    ___errno_location
.text:00000000000057DC                 cmp     byte ptr [rbp+23h], 0
.text:00000000000057E0                 mov     r12, rax
.text:00000000000057E3                 jnz     short loc_5860
.text:00000000000057E5
.text:00000000000057E5 loc_57E5:                               ; CODE XREF: set_process_security_ctx+A6↓j
.text:00000000000057E5                 mov     rsi, r13
.text:00000000000057E8                 mov     edi, 4
.text:00000000000057ED                 mov     dword ptr [r12], 5Fh ; '_'
.text:00000000000057F5                 call    quotearg_style
.text:00000000000057FA                 lea     rsi, aFailedToGetSec ; "failed to get security context of %s"
.text:0000000000005801                 mov     edx, 5          ; category
.text:0000000000005806                 xor     edi, edi        ; domainname
.text:0000000000005808                 mov     rbx, rax
.text:000000000000580B                 call    _dcgettext
.text:0000000000005810                 mov     esi, [r12]      ; errnum
.text:0000000000005814                 mov     rcx, rbx
.text:0000000000005817                 mov     rdx, rax        ; format
.text:000000000000581A                 xor     edi, edi        ; status
.text:000000000000581C                 xor     eax, eax
.text:000000000000581E                 call    _error
.text:0000000000005823                 movzx   ebx, byte ptr [rbp+26h]
.text:0000000000005827
.text:0000000000005827 loc_5827:                               ; CODE XREF: set_process_security_ctx+B2↓j
.text:0000000000005827                 add     rsp, 8
.text:000000000000582B                 xor     ebx, 1
.text:000000000000582E                 mov     eax, ebx
.text:0000000000005830                 pop     rbx
.text:0000000000005831                 pop     rbp
.text:0000000000005832                 pop     r12
.text:0000000000005834                 pop     r13
.text:0000000000005836                 retn
.text:0000000000005836 ; ---------------------------------------------------------------------------
.text:0000000000005837                 align 20h
.text:0000000000005840
.text:0000000000005840 loc_5840:                               ; CODE XREF: set_process_security_ctx+12↑j
.text:0000000000005840                 mov     ebx, ecx
.text:0000000000005842                 and     bl, [r8+21h]
.text:0000000000005846                 jnz     short loc_5878
.text:0000000000005848                 add     rsp, 8
.text:000000000000584C                 mov     ebx, 1
.text:0000000000005851                 mov     eax, ebx
.text:0000000000005853                 pop     rbx
.text:0000000000005854                 pop     rbp
.text:0000000000005855                 pop     r12
.text:0000000000005857                 pop     r13
.text:0000000000005859                 retn
.text:0000000000005859 ; ---------------------------------------------------------------------------
.text:000000000000585A                 align 20h
.text:0000000000005860
.text:0000000000005860 loc_5860:                               ; CODE XREF: set_process_security_ctx+23↑j
.text:0000000000005860                 movzx   ebx, byte ptr [rbp+26h]
.text:0000000000005864                 test    bl, bl
.text:0000000000005866                 jnz     loc_57E5
.text:000000000000586C                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000005872                 jmp     short loc_5827
.text:0000000000005872 ; ---------------------------------------------------------------------------
.text:0000000000005874                 align 8
.text:0000000000005878
.text:0000000000005878 loc_5878:                               ; CODE XREF: set_process_security_ctx+86↑j
.text:0000000000005878                 call    ___errno_location
.text:000000000000587D                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000005883                 add     rsp, 8
.text:0000000000005887                 mov     eax, ebx
.text:0000000000005889                 pop     rbx
.text:000000000000588A                 pop     rbp
.text:000000000000588B                 pop     r12
.text:000000000000588D                 pop     r13
.text:000000000000588F                 retn
.text:000000000000588F ; } // starts at 57C0
.text:000000000000588F set_process_security_ctx endp
.text:000000000000588F
.text:0000000000005890
.text:0000000000005890 ; =============== S U B R O U T I N E =======================================
.text:0000000000005890
.text:0000000000005890
.text:0000000000005890                 public set_file_security_ctx
.text:0000000000005890 set_file_security_ctx proc near         ; CODE XREF: copy_internal+1381↓p
.text:0000000000005890                                         ; copy_internal+22FE↓p ...
.text:0000000000005890 ; __unwind {
.text:0000000000005890                 push    r12
.text:0000000000005892                 push    rbp
.text:0000000000005893                 mov     rbp, rcx
.text:0000000000005896                 push    rbx
.text:0000000000005897                 mov     r12, rdi
.text:000000000000589A                 call    ___errno_location
.text:000000000000589F                 cmp     byte ptr [rbp+23h], 0
.text:00000000000058A3                 mov     rbx, rax
.text:00000000000058A6                 jz      short loc_58AE
.text:00000000000058A8                 cmp     byte ptr [rbp+26h], 0
.text:00000000000058AC                 jz      short loc_58F8
.text:00000000000058AE
.text:00000000000058AE loc_58AE:                               ; CODE XREF: set_file_security_ctx+16↑j
.text:00000000000058AE                 mov     rdx, r12
.text:00000000000058B1                 mov     dword ptr [rbx], 5Fh ; '_'
.text:00000000000058B7                 mov     esi, 4
.text:00000000000058BC                 xor     edi, edi
.text:00000000000058BE                 call    quotearg_n_style
.text:00000000000058C3                 lea     rsi, aFailedToSetThe ; "failed to set the security context of %"...
.text:00000000000058CA                 mov     edx, 5          ; category
.text:00000000000058CF                 xor     edi, edi        ; domainname
.text:00000000000058D1                 mov     rbp, rax
.text:00000000000058D4                 call    _dcgettext
.text:00000000000058D9                 mov     esi, [rbx]      ; errnum
.text:00000000000058DB                 mov     rcx, rbp
.text:00000000000058DE                 mov     rdx, rax        ; format
.text:00000000000058E1                 xor     edi, edi        ; status
.text:00000000000058E3                 xor     eax, eax
.text:00000000000058E5                 call    _error
.text:00000000000058EA                 pop     rbx
.text:00000000000058EB                 xor     eax, eax
.text:00000000000058ED                 pop     rbp
.text:00000000000058EE                 pop     r12
.text:00000000000058F0                 retn
.text:00000000000058F0 ; ---------------------------------------------------------------------------
.text:00000000000058F1                 align 8
.text:00000000000058F8
.text:00000000000058F8 loc_58F8:                               ; CODE XREF: set_file_security_ctx+1C↑j
.text:00000000000058F8                 mov     dword ptr [rax], 5Fh ; '_'
.text:00000000000058FE                 xor     eax, eax
.text:0000000000005900                 pop     rbx
.text:0000000000005901                 pop     rbp
.text:0000000000005902                 pop     r12
.text:0000000000005904                 retn
.text:0000000000005904 ; } // starts at 5890
.text:0000000000005904 set_file_security_ctx endp
.text:0000000000005904
.text:0000000000005904 ; ---------------------------------------------------------------------------
.text:0000000000005905                 align 10h
.text:0000000000005910
.text:0000000000005910 ; =============== S U B R O U T I N E =======================================
.text:0000000000005910
.text:0000000000005910
.text:0000000000005910                 public dest_info_init
.text:0000000000005910 dest_info_init  proc near               ; CODE XREF: main+666↑p
.text:0000000000005910 ; __unwind {
.text:0000000000005910                 lea     r8, triple_free
.text:0000000000005917                 lea     rcx, triple_compare
.text:000000000000591E                 xor     esi, esi
.text:0000000000005920                 lea     rdx, triple_hash
.text:0000000000005927                 push    rbx
.text:0000000000005928                 mov     rbx, rdi
.text:000000000000592B                 mov     edi, 3Dh ; '='
.text:0000000000005930                 call    hash_initialize
.text:0000000000005935                 mov     [rbx+40h], rax
.text:0000000000005939                 pop     rbx
.text:000000000000593A                 retn
.text:000000000000593A ; } // starts at 5910
.text:000000000000593A dest_info_init  endp
.text:000000000000593A
.text:000000000000593A ; ---------------------------------------------------------------------------
.text:000000000000593B                 align 20h
.text:0000000000005940
.text:0000000000005940 ; =============== S U B R O U T I N E =======================================
.text:0000000000005940
.text:0000000000005940
.text:0000000000005940                 public src_info_init
.text:0000000000005940 src_info_init   proc near
.text:0000000000005940 ; __unwind {
.text:0000000000005940                 lea     r8, triple_free
.text:0000000000005947                 lea     rcx, triple_compare
.text:000000000000594E                 xor     esi, esi
.text:0000000000005950                 lea     rdx, triple_hash_no_name
.text:0000000000005957                 push    rbx
.text:0000000000005958                 mov     rbx, rdi
.text:000000000000595B                 mov     edi, 3Dh ; '='
.text:0000000000005960                 call    hash_initialize
.text:0000000000005965                 mov     [rbx+48h], rax
.text:0000000000005969                 pop     rbx
.text:000000000000596A                 retn
.text:000000000000596A ; } // starts at 5940
.text:000000000000596A src_info_init   endp
.text:000000000000596A
.text:000000000000596A ; ---------------------------------------------------------------------------
.text:000000000000596B                 align 10h
.text:0000000000005970
.text:0000000000005970 ; =============== S U B R O U T I N E =======================================
.text:0000000000005970
.text:0000000000005970
.text:0000000000005970                 public cp_options_default
.text:0000000000005970 cp_options_default proc near            ; CODE XREF: main+94↑p
.text:0000000000005970 ; __unwind {
.text:0000000000005970                 pxor    xmm0, xmm0
.text:0000000000005974                 push    rbx
.text:0000000000005975                 mov     rbx, rdi
.text:0000000000005978                 movups  xmmword ptr [rdi], xmm0
.text:000000000000597B                 movups  xmmword ptr [rdi+10h], xmm0
.text:000000000000597F                 movups  xmmword ptr [rdi+20h], xmm0
.text:0000000000005983                 movups  xmmword ptr [rdi+30h], xmm0
.text:0000000000005987                 movups  xmmword ptr [rdi+40h], xmm0
.text:000000000000598B                 call    _geteuid
.text:0000000000005990                 test    eax, eax
.text:0000000000005992                 mov     dword ptr [rbx+34h], 0FFFFFFFFh
.text:0000000000005999                 setz    al
.text:000000000000599C                 mov     [rbx+1Bh], al
.text:000000000000599F                 mov     [rbx+1Ah], al
.text:00000000000059A2                 pop     rbx
.text:00000000000059A3                 retn
.text:00000000000059A3 ; } // starts at 5970
.text:00000000000059A3 cp_options_default endp
.text:00000000000059A3
.text:00000000000059A3 ; ---------------------------------------------------------------------------
.text:00000000000059A4                 align 10h
.text:00000000000059B0
.text:00000000000059B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059B0
.text:00000000000059B0
.text:00000000000059B0                 public chown_failure_ok
.text:00000000000059B0 chown_failure_ok proc near              ; CODE XREF: set_owner+8D↓p
.text:00000000000059B0                                         ; copy_internal+37B5↓p
.text:00000000000059B0 ; __unwind {
.text:00000000000059B0                 push    rbx
.text:00000000000059B1                 mov     rbx, rdi
.text:00000000000059B4                 call    ___errno_location
.text:00000000000059B9                 mov     edx, [rax]
.text:00000000000059BB                 cmp     edx, 1
.text:00000000000059BE                 setz    al
.text:00000000000059C1                 cmp     edx, 16h
.text:00000000000059C4                 setz    dl
.text:00000000000059C7                 or      al, dl
.text:00000000000059C9                 jz      short loc_59D2
.text:00000000000059CB                 movzx   eax, byte ptr [rbx+1Ah]
.text:00000000000059CF                 xor     eax, 1
.text:00000000000059D2
.text:00000000000059D2 loc_59D2:                               ; CODE XREF: chown_failure_ok+19↑j
.text:00000000000059D2                 pop     rbx
.text:00000000000059D3                 retn
.text:00000000000059D3 ; } // starts at 59B0
.text:00000000000059D3 chown_failure_ok endp
.text:00000000000059D3
.text:00000000000059D3 ; ---------------------------------------------------------------------------
.text:00000000000059D4                 align 20h
.text:00000000000059E0
.text:00000000000059E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059E0
.text:00000000000059E0
.text:00000000000059E0 set_owner       proc near               ; CODE XREF: copy_internal+723↓p
.text:00000000000059E0                                         ; copy_internal+3608↓p
.text:00000000000059E0 ; __unwind {
.text:00000000000059E0                 push    r15
.text:00000000000059E2                 push    r14
.text:00000000000059E4                 push    r13
.text:00000000000059E6                 push    r12
.text:00000000000059E8                 mov     r13, rsi
.text:00000000000059EB                 push    rbp
.text:00000000000059EC                 push    rbx
.text:00000000000059ED                 mov     rbp, rdi
.text:00000000000059F0                 mov     ebx, edx
.text:00000000000059F2                 sub     rsp, 8
.text:00000000000059F6                 test    r8b, r8b
.text:00000000000059F9                 mov     r14d, [rcx+1Ch]
.text:00000000000059FD                 mov     r12d, [rcx+20h]
.text:0000000000005A01                 jnz     short loc_5A35
.text:0000000000005A03                 mov     rax, 0FF0000000000FFh
.text:0000000000005A0D                 test    [rdi+18h], rax
.text:0000000000005A11                 jz      loc_5AB0
.text:0000000000005A17                 mov     esi, [r9+18h]
.text:0000000000005A1B                 mov     edx, [rcx+18h]
.text:0000000000005A1E
.text:0000000000005A1E loc_5A1E:                               ; CODE XREF: set_owner+E1↓j
.text:0000000000005A1E                 mov     eax, edx
.text:0000000000005A20                 mov     ecx, esi
.text:0000000000005A22                 not     eax
.text:0000000000005A24                 and     ecx, 0FFFh
.text:0000000000005A2A                 or      ah, 0Eh
.text:0000000000005A2D                 test    eax, ecx
.text:0000000000005A2F                 jnz     loc_5B00
.text:0000000000005A35
.text:0000000000005A35 loc_5A35:                               ; CODE XREF: set_owner+21↑j
.text:0000000000005A35                                         ; set_owner+D4↓j ...
.text:0000000000005A35                 cmp     ebx, 0FFFFFFFFh
.text:0000000000005A38                 mov     edx, r12d       ; group
.text:0000000000005A3B                 mov     esi, r14d       ; owner
.text:0000000000005A3E                 jz      short loc_5A90
.text:0000000000005A40                 mov     edi, ebx        ; fd
.text:0000000000005A42                 call    _fchown
.text:0000000000005A47                 test    eax, eax
.text:0000000000005A49                 jz      short loc_5A9C
.text:0000000000005A4B                 call    ___errno_location
.text:0000000000005A50                 mov     r14d, [rax]
.text:0000000000005A53                 mov     r15, rax
.text:0000000000005A56                 cmp     r14d, 1
.text:0000000000005A5A                 jz      loc_5BC8
.text:0000000000005A60                 cmp     r14d, 16h
.text:0000000000005A64                 jz      loc_5BC8
.text:0000000000005A6A
.text:0000000000005A6A loc_5A6A:                               ; CODE XREF: set_owner+102↓j
.text:0000000000005A6A                                         ; set_owner+11B↓j ...
.text:0000000000005A6A                 mov     rdi, rbp
.text:0000000000005A6D                 call    chown_failure_ok
.text:0000000000005A72                 mov     edx, eax
.text:0000000000005A74                 xor     eax, eax
.text:0000000000005A76                 test    dl, dl
.text:0000000000005A78                 jz      loc_5B70
.text:0000000000005A7E                 add     rsp, 8
.text:0000000000005A82                 pop     rbx
.text:0000000000005A83                 pop     rbp
.text:0000000000005A84                 pop     r12
.text:0000000000005A86                 pop     r13
.text:0000000000005A88                 pop     r14
.text:0000000000005A8A                 pop     r15
.text:0000000000005A8C                 retn
.text:0000000000005A8C ; ---------------------------------------------------------------------------
.text:0000000000005A8D                 align 10h
.text:0000000000005A90
.text:0000000000005A90 loc_5A90:                               ; CODE XREF: set_owner+5E↑j
.text:0000000000005A90                 mov     rdi, r13        ; file
.text:0000000000005A93                 call    _lchown
.text:0000000000005A98                 test    eax, eax
.text:0000000000005A9A                 jnz     short loc_5AD0
.text:0000000000005A9C
.text:0000000000005A9C loc_5A9C:                               ; CODE XREF: set_owner+69↑j
.text:0000000000005A9C                 add     rsp, 8
.text:0000000000005AA0                 mov     eax, 1
.text:0000000000005AA5                 pop     rbx
.text:0000000000005AA6                 pop     rbp
.text:0000000000005AA7                 pop     r12
.text:0000000000005AA9                 pop     r13
.text:0000000000005AAB                 pop     r14
.text:0000000000005AAD                 pop     r15
.text:0000000000005AAF                 retn
.text:0000000000005AB0 ; ---------------------------------------------------------------------------
.text:0000000000005AB0
.text:0000000000005AB0 loc_5AB0:                               ; CODE XREF: set_owner+31↑j
.text:0000000000005AB0                 cmp     byte ptr [rdi+2Bh], 0
.text:0000000000005AB4                 jz      loc_5A35
.text:0000000000005ABA                 mov     esi, [r9+18h]
.text:0000000000005ABE                 mov     edx, [rdi+10h]
.text:0000000000005AC1                 jmp     loc_5A1E
.text:0000000000005AC1 ; ---------------------------------------------------------------------------
.text:0000000000005AC6                 align 10h
.text:0000000000005AD0
.text:0000000000005AD0 loc_5AD0:                               ; CODE XREF: set_owner+BA↑j
.text:0000000000005AD0                 call    ___errno_location
.text:0000000000005AD5                 mov     ebx, [rax]
.text:0000000000005AD7                 mov     r14, rax
.text:0000000000005ADA                 cmp     ebx, 1
.text:0000000000005ADD                 jz      short loc_5AE8
.text:0000000000005ADF                 cmp     ebx, 16h
.text:0000000000005AE2                 jnz     loc_5A6A
.text:0000000000005AE8
.text:0000000000005AE8 loc_5AE8:                               ; CODE XREF: set_owner+FD↑j
.text:0000000000005AE8                 mov     edx, r12d       ; group
.text:0000000000005AEB                 mov     esi, 0FFFFFFFFh ; owner
.text:0000000000005AF0                 mov     rdi, r13        ; file
.text:0000000000005AF3                 call    _lchown
.text:0000000000005AF8                 mov     [r14], ebx
.text:0000000000005AFB                 jmp     loc_5A6A
.text:0000000000005B00 ; ---------------------------------------------------------------------------
.text:0000000000005B00
.text:0000000000005B00 loc_5B00:                               ; CODE XREF: set_owner+4F↑j
.text:0000000000005B00                 and     edx, esi
.text:0000000000005B02                 mov     rdi, r13
.text:0000000000005B05                 mov     esi, ebx
.text:0000000000005B07                 and     edx, 1C0h
.text:0000000000005B0D                 call    qset_acl
.text:0000000000005B12                 test    eax, eax
.text:0000000000005B14                 jz      loc_5A35
.text:0000000000005B1A                 call    ___errno_location
.text:0000000000005B1F                 mov     rbx, rax
.text:0000000000005B22                 mov     eax, [rax]
.text:0000000000005B24                 cmp     eax, 1
.text:0000000000005B27                 jz      loc_5BE0
.text:0000000000005B2D                 cmp     eax, 16h
.text:0000000000005B30                 jz      loc_5BE0
.text:0000000000005B36
.text:0000000000005B36 loc_5B36:                               ; CODE XREF: set_owner+204↓j
.text:0000000000005B36                 mov     rsi, r13
.text:0000000000005B39                 mov     edi, 4
.text:0000000000005B3E                 call    quotearg_style
.text:0000000000005B43                 lea     rsi, aClearingPermis ; "clearing permissions for %s"
.text:0000000000005B4A                 xor     edi, edi        ; domainname
.text:0000000000005B4C                 mov     edx, 5          ; category
.text:0000000000005B51                 mov     r12, rax
.text:0000000000005B54                 call    _dcgettext
.text:0000000000005B59                 mov     esi, [rbx]      ; errnum
.text:0000000000005B5B                 mov     rdx, rax        ; format
.text:0000000000005B5E                 mov     rcx, r12
.text:0000000000005B61                 xor     edi, edi        ; status
.text:0000000000005B63                 xor     eax, eax
.text:0000000000005B65                 call    _error
.text:0000000000005B6A                 jmp     short loc_5BAC
.text:0000000000005B6A ; ---------------------------------------------------------------------------
.text:0000000000005B6C                 align 10h
.text:0000000000005B70
.text:0000000000005B70 loc_5B70:                               ; CODE XREF: set_owner+98↑j
.text:0000000000005B70                 mov     rsi, r13
.text:0000000000005B73                 mov     edi, 4
.text:0000000000005B78                 call    quotearg_style
.text:0000000000005B7D                 lea     rsi, aFailedToPreser ; "failed to preserve ownership for %s"
.text:0000000000005B84                 mov     edx, 5          ; category
.text:0000000000005B89                 xor     edi, edi        ; domainname
.text:0000000000005B8B                 mov     r12, rax
.text:0000000000005B8E                 call    _dcgettext
.text:0000000000005B93                 mov     rbx, rax
.text:0000000000005B96                 call    ___errno_location
.text:0000000000005B9B                 mov     esi, [rax]      ; errnum
.text:0000000000005B9D                 mov     rcx, r12
.text:0000000000005BA0                 mov     rdx, rbx        ; format
.text:0000000000005BA3                 xor     edi, edi        ; status
.text:0000000000005BA5                 xor     eax, eax
.text:0000000000005BA7                 call    _error
.text:0000000000005BAC
.text:0000000000005BAC loc_5BAC:                               ; CODE XREF: set_owner+18A↑j
.text:0000000000005BAC                                         ; set_owner+20A↓j
.text:0000000000005BAC                 movzx   eax, byte ptr [rbp+24h]
.text:0000000000005BB0                 add     rsp, 8
.text:0000000000005BB4                 pop     rbx
.text:0000000000005BB5                 pop     rbp
.text:0000000000005BB6                 pop     r12
.text:0000000000005BB8                 neg     eax
.text:0000000000005BBA                 pop     r13
.text:0000000000005BBC                 pop     r14
.text:0000000000005BBE                 pop     r15
.text:0000000000005BC0                 retn
.text:0000000000005BC0 ; ---------------------------------------------------------------------------
.text:0000000000005BC1                 align 8
.text:0000000000005BC8
.text:0000000000005BC8 loc_5BC8:                               ; CODE XREF: set_owner+7A↑j
.text:0000000000005BC8                                         ; set_owner+84↑j
.text:0000000000005BC8                 mov     edx, r12d       ; group
.text:0000000000005BCB                 mov     esi, 0FFFFFFFFh ; owner
.text:0000000000005BD0                 mov     edi, ebx        ; fd
.text:0000000000005BD2                 call    _fchown
.text:0000000000005BD7                 mov     [r15], r14d
.text:0000000000005BDA                 jmp     loc_5A6A
.text:0000000000005BDA ; ---------------------------------------------------------------------------
.text:0000000000005BDF                 align 20h
.text:0000000000005BE0
.text:0000000000005BE0 loc_5BE0:                               ; CODE XREF: set_owner+147↑j
.text:0000000000005BE0                                         ; set_owner+150↑j
.text:0000000000005BE0                 cmp     byte ptr [rbp+1Bh], 0
.text:0000000000005BE4                 jnz     loc_5B36
.text:0000000000005BEA                 jmp     short loc_5BAC
.text:0000000000005BEA ; } // starts at 59E0
.text:0000000000005BEA set_owner       endp
.text:0000000000005BEA
.text:0000000000005BEA ; ---------------------------------------------------------------------------
.text:0000000000005BEC                 align 10h
.text:0000000000005BF0
.text:0000000000005BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BF0
.text:0000000000005BF0
.text:0000000000005BF0                 public cached_umask
.text:0000000000005BF0 cached_umask    proc near               ; CODE XREF: copy_internal:loc_89E1↓p
.text:0000000000005BF0                                         ; copy_internal+2E26↓p ...
.text:0000000000005BF0 ; __unwind {
.text:0000000000005BF0                 push    rbx
.text:0000000000005BF1                 mov     ebx, cs:mask_7898
.text:0000000000005BF7                 cmp     ebx, 0FFFFFFFFh
.text:0000000000005BFA                 jz      short loc_5C00
.text:0000000000005BFC                 mov     eax, ebx
.text:0000000000005BFE                 pop     rbx
.text:0000000000005BFF                 retn
.text:0000000000005C00 ; ---------------------------------------------------------------------------
.text:0000000000005C00
.text:0000000000005C00 loc_5C00:                               ; CODE XREF: cached_umask+A↑j
.text:0000000000005C00                 xor     edi, edi        ; mask
.text:0000000000005C02                 call    _umask
.text:0000000000005C07                 mov     ebx, eax
.text:0000000000005C09                 mov     edi, eax        ; mask
.text:0000000000005C0B                 mov     cs:mask_7898, eax
.text:0000000000005C11                 call    _umask
.text:0000000000005C16                 mov     eax, ebx
.text:0000000000005C18                 pop     rbx
.text:0000000000005C19                 retn
.text:0000000000005C19 ; } // starts at 5BF0
.text:0000000000005C19 cached_umask    endp
.text:0000000000005C19
.text:0000000000005C19 ; ---------------------------------------------------------------------------
.text:0000000000005C1A                 align 20h
.text:0000000000005C20
.text:0000000000005C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C20
.text:0000000000005C20 ; Attributes: bp-based frame
.text:0000000000005C20
.text:0000000000005C20 copy_internal   proc near               ; CODE XREF: copy_internal+1EDD↓p
.text:0000000000005C20                                         ; copy+80↓p
.text:0000000000005C20
.text:0000000000005C20 var_3E1         = byte ptr -3E1h
.text:0000000000005C20 var_3C0         = qword ptr -3C0h
.text:0000000000005C20 var_3B1         = byte ptr -3B1h
.text:0000000000005C20 var_3B0         = qword ptr -3B0h
.text:0000000000005C20 var_3A5         = byte ptr -3A5h
.text:0000000000005C20 var_3A4         = dword ptr -3A4h
.text:0000000000005C20 var_3A0         = qword ptr -3A0h
.text:0000000000005C20 var_398         = qword ptr -398h
.text:0000000000005C20 var_390         = dword ptr -390h
.text:0000000000005C20 var_38C         = dword ptr -38Ch
.text:0000000000005C20 var_388         = qword ptr -388h
.text:0000000000005C20 length          = qword ptr -380h
.text:0000000000005C20 var_378         = qword ptr -378h
.text:0000000000005C20 var_370         = qword ptr -370h
.text:0000000000005C20 s               = qword ptr -368h
.text:0000000000005C20 var_360         = dword ptr -360h
.text:0000000000005C20 var_35C         = dword ptr -35Ch
.text:0000000000005C20 s2              = qword ptr -358h
.text:0000000000005C20 old             = qword ptr -350h
.text:0000000000005C20 var_348         = qword ptr -348h
.text:0000000000005C20 var_340         = qword ptr -340h
.text:0000000000005C20 format          = qword ptr -338h
.text:0000000000005C20 ptr             = qword ptr -330h
.text:0000000000005C20 fd              = dword ptr -328h
.text:0000000000005C20 fildes          = dword ptr -320h
.text:0000000000005C20 var_315         = byte ptr -315h
.text:0000000000005C20 var_314         = dword ptr -314h
.text:0000000000005C20 filename        = qword ptr -310h
.text:0000000000005C20 file            = qword ptr -308h
.text:0000000000005C20 var_2F9         = byte ptr -2F9h
.text:0000000000005C20 var_2F8         = qword ptr -2F8h
.text:0000000000005C20 dev             = qword ptr -2F0h
.text:0000000000005C20 var_2E0         = xmmword ptr -2E0h
.text:0000000000005C20 var_2D0         = qword ptr -2D0h
.text:0000000000005C20 var_2C0         = xmmword ptr -2C0h
.text:0000000000005C20 var_2B0         = xmmword ptr -2B0h
.text:0000000000005C20 var_2A0         = qword ptr -2A0h
.text:0000000000005C20 var_298         = qword ptr -298h
.text:0000000000005C20 var_290         = qword ptr -290h
.text:0000000000005C20 var_288         = qword ptr -288h
.text:0000000000005C20 stat_buf        = stat ptr -280h
.text:0000000000005C20 var_1F0         = stat ptr -1F0h
.text:0000000000005C20 var_160         = stat ptr -160h
.text:0000000000005C20 var_D0          = stat ptr -0D0h
.text:0000000000005C20 var_38          = qword ptr -38h
.text:0000000000005C20 arg_0           = dword ptr  10h
.text:0000000000005C20 arg_8           = qword ptr  18h
.text:0000000000005C20 arg_10          = qword ptr  20h
.text:0000000000005C20 arg_18          = qword ptr  28h
.text:0000000000005C20
.text:0000000000005C20 ; __unwind {
.text:0000000000005C20                 push    rbp
.text:0000000000005C21                 mov     rbp, rsp
.text:0000000000005C24                 push    r15
.text:0000000000005C26                 push    r14
.text:0000000000005C28                 push    r13
.text:0000000000005C2A                 push    r12
.text:0000000000005C2C                 mov     r14d, edx
.text:0000000000005C2F                 push    rbx
.text:0000000000005C30                 mov     rbx, r9
.text:0000000000005C33                 sub     rsp, 398h
.text:0000000000005C3A                 mov     rax, [rbp+arg_8]
.text:0000000000005C3E                 mov     r13d, [rbp+arg_0]
.text:0000000000005C42                 mov     [rbp+var_348], rcx
.text:0000000000005C49                 mov     rcx, [rbp+arg_18]
.text:0000000000005C4D                 mov     [rbp+filename], rdi
.text:0000000000005C54                 mov     [rbp+file], rsi
.text:0000000000005C5B                 mov     [rbp+format], rax
.text:0000000000005C62                 mov     rax, [rbp+arg_10]
.text:0000000000005C66                 mov     qword ptr [rbp+fildes], rcx
.text:0000000000005C6D                 mov     [rbp+ptr], r8
.text:0000000000005C74                 mov     rcx, fs:28h
.text:0000000000005C7D                 mov     [rbp+var_38], rcx
.text:0000000000005C81                 xor     ecx, ecx
.text:0000000000005C83                 mov     byte ptr [rax], 0
.text:0000000000005C86                 movzx   r12d, byte ptr [r9+18h]
.text:0000000000005C8B                 mov     [rbp+var_340], rax
.text:0000000000005C92                 mov     [rbp+var_315], r13b
.text:0000000000005C99                 mov     r15d, [r9+34h]
.text:0000000000005C9D                 test    r12b, r12b
.text:0000000000005CA0                 jz      short loc_5CC1
.text:0000000000005CA2                 test    r15d, r15d
.text:0000000000005CA5                 js      loc_5F40
.text:0000000000005CAB
.text:0000000000005CAB loc_5CAB:                               ; CODE XREF: copy_internal+EB8↓j
.text:0000000000005CAB                 mov     rax, qword ptr [rbp+fildes]
.text:0000000000005CB2                 test    r15d, r15d
.text:0000000000005CB5                 setz    r14b
.text:0000000000005CB9                 test    rax, rax
.text:0000000000005CBC                 jz      short loc_5CC1
.text:0000000000005CBE                 mov     [rax], r14b
.text:0000000000005CC1
.text:0000000000005CC1 loc_5CC1:                               ; CODE XREF: copy_internal+80↑j
.text:0000000000005CC1                                         ; copy_internal+9C↑j
.text:0000000000005CC1                 test    r15d, r15d
.text:0000000000005CC4                 jz      loc_5F78
.text:0000000000005CCA                 cmp     r15d, 11h
.text:0000000000005CCE                 mov     r12, [rbp+filename]
.text:0000000000005CD5                 jz      loc_64D8
.text:0000000000005CDB
.text:0000000000005CDB loc_5CDB:                               ; CODE XREF: copy_internal+368↓j
.text:0000000000005CDB                                         ; copy_internal+8C2↓j
.text:0000000000005CDB                 cmp     dword ptr [rbx+4], 2
.text:0000000000005CDF                 lea     r10, [rbp+stat_buf]
.text:0000000000005CE6                 mov     rsi, r12        ; filename
.text:0000000000005CE9                 mov     edi, 1          ; ver
.text:0000000000005CEE                 mov     rdx, r10        ; stat_buf
.text:0000000000005CF1                 jz      loc_64F0
.text:0000000000005CF7                 call    ___xstat
.text:0000000000005CFC                 test    eax, eax
.text:0000000000005CFE                 mov     rsi, r12
.text:0000000000005D01                 setnz   al
.text:0000000000005D04                 test    al, al
.text:0000000000005D06                 jnz     loc_6505
.text:0000000000005D0C
.text:0000000000005D0C loc_5D0C:                               ; CODE XREF: copy_internal+8DF↓j
.text:0000000000005D0C                 mov     eax, [rbp+stat_buf.st_mode]
.text:0000000000005D12                 mov     [rbp+var_314], eax
.text:0000000000005D18                 and     eax, 0F000h
.text:0000000000005D1D                 cmp     eax, 4000h
.text:0000000000005D22                 jz      loc_67E8
.text:0000000000005D28
.text:0000000000005D28 loc_5D28:                               ; CODE XREF: copy_internal+373↓j
.text:0000000000005D28                                         ; copy_internal+8BC↓j ...
.text:0000000000005D28                 test    r13b, r13b
.text:0000000000005D2B                 jz      short loc_5D6A
.text:0000000000005D2D                 mov     rdi, [rbx+48h]
.text:0000000000005D31                 test    rdi, rdi
.text:0000000000005D34                 jz      short loc_5D6A
.text:0000000000005D36                 mov     eax, [rbp+var_314]
.text:0000000000005D3C                 lea     r10, [rbp+stat_buf]
.text:0000000000005D43                 and     eax, 0F000h
.text:0000000000005D48                 cmp     eax, 4000h
.text:0000000000005D4D                 jz      short loc_5D5B
.text:0000000000005D4F                 mov     r11d, [rbx]
.text:0000000000005D52                 test    r11d, r11d
.text:0000000000005D55                 jz      loc_6668
.text:0000000000005D5B
.text:0000000000005D5B loc_5D5B:                               ; CODE XREF: copy_internal+12D↑j
.text:0000000000005D5B                                         ; copy_internal+A74↓j
.text:0000000000005D5B                 mov     rsi, [rbp+filename]
.text:0000000000005D62                 mov     rdx, r10
.text:0000000000005D65                 call    record_file
.text:0000000000005D6A
.text:0000000000005D6A loc_5D6A:                               ; CODE XREF: copy_internal+10B↑j
.text:0000000000005D6A                                         ; copy_internal+114↑j
.text:0000000000005D6A                 mov     eax, [rbx+4]
.text:0000000000005D6D                 mov     [rbp+fd], 1
.text:0000000000005D77                 cmp     eax, 4
.text:0000000000005D7A                 jz      short loc_5D8E
.text:0000000000005D7C                 cmp     eax, 3
.text:0000000000005D7F                 setz    al
.text:0000000000005D82                 movzx   eax, al
.text:0000000000005D85                 and     eax, r13d
.text:0000000000005D88                 mov     [rbp+fd], eax
.text:0000000000005D8E
.text:0000000000005D8E loc_5D8E:                               ; CODE XREF: copy_internal+15A↑j
.text:0000000000005D8E                 test    r14b, r14b
.text:0000000000005D91                 jnz     loc_5FA0
.text:0000000000005D97                 cmp     r15d, 11h
.text:0000000000005D9B                 jz      loc_6700
.text:0000000000005DA1
.text:0000000000005DA1 loc_5DA1:                               ; CODE XREF: copy_internal+AE4↓j
.text:0000000000005DA1                 mov     eax, [rbp+var_314]
.text:0000000000005DA7                 and     eax, 0F000h
.text:0000000000005DAC                 cmp     eax, 8000h
.text:0000000000005DB1                 jz      loc_66A0
.text:0000000000005DB7                 cmp     eax, 0A000h
.text:0000000000005DBC                 mov     r8d, 100h       ; flag
.text:0000000000005DC2                 setz    r9b
.text:0000000000005DC6                 cmp     eax, 4000h
.text:0000000000005DCB                 setz    al
.text:0000000000005DCE                 or      r9d, eax
.text:0000000000005DD1                 movzx   eax, byte ptr [rbx+14h]
.text:0000000000005DD5                 xor     eax, 1
.text:0000000000005DD8                 or      r9b, al
.text:0000000000005DDB                 jz      loc_66A0
.text:0000000000005DE1
.text:0000000000005DE1 loc_5DE1:                               ; CODE XREF: copy_internal+A8E↓j
.text:0000000000005DE1                                         ; copy_internal+A9C↓j ...
.text:0000000000005DE1                 lea     r12, [rbp+var_1F0]
.text:0000000000005DE8                 mov     rdx, [rbp+file] ; filename
.text:0000000000005DEF                 mov     esi, 0FFFFFF9Ch ; fildes
.text:0000000000005DF4                 mov     edi, 1          ; ver
.text:0000000000005DF9                 mov     byte ptr [rbp+old], r9b
.text:0000000000005E00                 mov     rcx, r12        ; stat_buf
.text:0000000000005E03                 call    ___fxstatat
.text:0000000000005E08                 test    eax, eax
.text:0000000000005E0A                 movzx   r9d, byte ptr [rbp+old]
.text:0000000000005E12                 jnz     loc_6490
.text:0000000000005E18                 xor     r8d, r8d
.text:0000000000005E1B
.text:0000000000005E1B loc_5E1B:                               ; CODE XREF: copy_internal+899↓j
.text:0000000000005E1B                 cmp     dword ptr [rbx+8], 2
.text:0000000000005E1F                 jz      short loc_5E3F
.text:0000000000005E21                 mov     rax, [rbp+var_1F0.st_ino]
.text:0000000000005E28                 cmp     [rbp+stat_buf.st_ino], rax
.text:0000000000005E2F                 jz      loc_6FF8
.text:0000000000005E35
.text:0000000000005E35 loc_5E35:                               ; CODE XREF: copy_internal+13E6↓j
.text:0000000000005E35                 cmp     dword ptr [rbx+4], 2
.text:0000000000005E39                 jz      loc_71B0
.text:0000000000005E3F
.text:0000000000005E3F loc_5E3F:                               ; CODE XREF: copy_internal+1FF↑j
.text:0000000000005E3F                                         ; copy_internal+AF0↓j ...
.text:0000000000005E3F                 cmp     byte ptr [rbx+2Dh], 0
.text:0000000000005E43                 jz      loc_6840
.text:0000000000005E49                 mov     eax, [rbp+var_314]
.text:0000000000005E4F                 and     eax, 0F000h
.text:0000000000005E54                 cmp     eax, 4000h
.text:0000000000005E59                 jz      loc_7280
.text:0000000000005E5F                 xor     ecx, ecx
.text:0000000000005E61                 cmp     byte ptr [rbx+1Fh], 0
.text:0000000000005E65                 jz      short loc_5E85
.text:0000000000005E67                 cmp     byte ptr [rbx+18h], 0
.text:0000000000005E6B                 mov     ecx, 1
.text:0000000000005E70                 jz      short loc_5E85
.text:0000000000005E72                 xor     ecx, ecx
.text:0000000000005E74                 mov     rax, [rbp+stat_buf.st_dev]
.text:0000000000005E7B                 cmp     [rbp+var_1F0.st_dev], rax
.text:0000000000005E82                 setnz   cl
.text:0000000000005E85
.text:0000000000005E85 loc_5E85:                               ; CODE XREF: copy_internal+245↑j
.text:0000000000005E85                                         ; copy_internal+250↑j
.text:0000000000005E85                 lea     r10, [rbp+stat_buf]
.text:0000000000005E8C                 mov     rdi, [rbp+file]
.text:0000000000005E93                 lea     rsi, [rbp+var_1F0]
.text:0000000000005E9A                 mov     byte ptr [rbp+s2], r9b
.text:0000000000005EA1                 mov     byte ptr [rbp+old], r8b
.text:0000000000005EA8                 mov     rdx, r10
.text:0000000000005EAB                 call    utimecmp
.text:0000000000005EB0                 test    eax, eax
.text:0000000000005EB2                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000005EBA                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000005EC2                 js      loc_6E10
.text:0000000000005EC8                 mov     rax, qword ptr [rbp+fildes]
.text:0000000000005ECF                 test    rax, rax
.text:0000000000005ED2                 jz      short loc_5ED7
.text:0000000000005ED4                 mov     byte ptr [rax], 1
.text:0000000000005ED7
.text:0000000000005ED7 loc_5ED7:                               ; CODE XREF: copy_internal+2B2↑j
.text:0000000000005ED7                 mov     rdx, [rbp+stat_buf.st_dev]
.text:0000000000005EDE                 mov     rsi, [rbp+stat_buf.st_ino]
.text:0000000000005EE5                 mov     rdi, [rbp+file] ; src
.text:0000000000005EEC                 call    remember_copied
.text:0000000000005EF1                 test    rax, rax
.text:0000000000005EF4                 jz      loc_6460
.text:0000000000005EFA                 movzx   ecx, byte ptr [rbx+2Eh]
.text:0000000000005EFE                 mov     r8d, [rbp+fd]
.text:0000000000005F05                 mov     edx, 1
.text:0000000000005F0A                 mov     rsi, [rbp+file]
.text:0000000000005F11                 mov     rdi, rax
.text:0000000000005F14                 call    create_hard_link
.text:0000000000005F19                 test    al, al
.text:0000000000005F1B                 jnz     loc_6460
.text:0000000000005F21                 cmp     byte ptr [rbx+25h], 0
.text:0000000000005F25                 jnz     loc_6D30
.text:0000000000005F2B                 nop     dword ptr [rax+rax+00h]
.text:0000000000005F30
.text:0000000000005F30 loc_5F30:                               ; CODE XREF: copy_internal+522↓j
.text:0000000000005F30                                         ; copy_internal+6CE↓j ...
.text:0000000000005F30                 xor     r12d, r12d
.text:0000000000005F33                 jmp     loc_6466
.text:0000000000005F33 ; ---------------------------------------------------------------------------
.text:0000000000005F38                 align 20h
.text:0000000000005F40
.text:0000000000005F40 loc_5F40:                               ; CODE XREF: copy_internal+85↑j
.text:0000000000005F40                 mov     edx, 0FFFFFF9Ch
.text:0000000000005F45                 mov     rcx, rsi
.text:0000000000005F48                 mov     r8d, 1
.text:0000000000005F4E                 mov     rsi, rdi
.text:0000000000005F51                 mov     edi, edx
.text:0000000000005F53                 call    renameat2
.text:0000000000005F58                 test    eax, eax
.text:0000000000005F5A                 jnz     loc_6AD0
.text:0000000000005F60                 mov     rax, qword ptr [rbp+fildes]
.text:0000000000005F67                 mov     r14d, r12d
.text:0000000000005F6A                 test    rax, rax
.text:0000000000005F6D                 jz      short loc_5F78
.text:0000000000005F6F                 mov     byte ptr [rax], 1
.text:0000000000005F72                 nop     word ptr [rax+rax+00h]
.text:0000000000005F78
.text:0000000000005F78 loc_5F78:                               ; CODE XREF: copy_internal+A4↑j
.text:0000000000005F78                                         ; copy_internal+34D↑j
.text:0000000000005F78                 cmp     byte ptr [rbx+31h], 0
.text:0000000000005F7C                 jnz     short loc_5F90
.text:0000000000005F7E                 mov     r12, [rbp+file]
.text:0000000000005F85                 xor     r15d, r15d
.text:0000000000005F88                 jmp     loc_5CDB
.text:0000000000005F88 ; ---------------------------------------------------------------------------
.text:0000000000005F8D                 align 10h
.text:0000000000005F90
.text:0000000000005F90 loc_5F90:                               ; CODE XREF: copy_internal+35C↑j
.text:0000000000005F90                 xor     r15d, r15d
.text:0000000000005F93                 jmp     loc_5D28
.text:0000000000005F93 ; ---------------------------------------------------------------------------
.text:0000000000005F98                 align 20h
.text:0000000000005FA0
.text:0000000000005FA0 loc_5FA0:                               ; CODE XREF: copy_internal+171↑j
.text:0000000000005FA0                 xor     r9d, r9d
.text:0000000000005FA3                 mov     [rbp+old], 0
.text:0000000000005FAE
.text:0000000000005FAE loc_5FAE:                               ; CODE XREF: copy_internal+8AD↓j
.text:0000000000005FAE                                         ; copy_internal+E49↓j ...
.text:0000000000005FAE                 test    r13b, r13b
.text:0000000000005FB1                 jz      loc_6070
.text:0000000000005FB7                 cmp     qword ptr [rbx+40h], 0
.text:0000000000005FBC                 jz      loc_6070
.text:0000000000005FC2
.text:0000000000005FC2 loc_5FC2:                               ; CODE XREF: copy_internal+2D41↓j
.text:0000000000005FC2                 movzx   r12d, byte ptr [rbx+18h]
.text:0000000000005FC7                 test    r12b, r12b
.text:0000000000005FCA                 jnz     loc_6070
.text:0000000000005FD0                 mov     edx, [rbx]
.text:0000000000005FD2                 test    edx, edx
.text:0000000000005FD4                 jnz     loc_6C58
.text:0000000000005FDA                 test    r9b, r9b
.text:0000000000005FDD                 lea     rdx, [rbp+var_1F0]
.text:0000000000005FE4                 jz      loc_7860
.text:0000000000005FEA
.text:0000000000005FEA loc_5FEA:                               ; CODE XREF: copy_internal+1C74↓j
.text:0000000000005FEA                 mov     eax, [rdx+18h]
.text:0000000000005FED                 and     eax, 0F000h
.text:0000000000005FF2                 cmp     eax, 0A000h
.text:0000000000005FF7                 jnz     short loc_6070
.text:0000000000005FF9                 mov     rdi, [rbx+40h]
.text:0000000000005FFD                 mov     rsi, [rbp+file]
.text:0000000000006004                 call    seen_file
.text:0000000000006009                 test    al, al
.text:000000000000600B                 jz      short loc_6070
.text:000000000000600D                 mov     rdx, [rbp+file]
.text:0000000000006014                 mov     esi, 4
.text:0000000000006019                 mov     edi, 1
.text:000000000000601E                 call    quotearg_n_style
.text:0000000000006023                 mov     rdx, [rbp+filename]
.text:000000000000602A                 xor     edi, edi
.text:000000000000602C                 mov     esi, 4
.text:0000000000006031                 mov     r13, rax
.text:0000000000006034                 call    quotearg_n_style
.text:0000000000006039                 lea     rsi, aWillNotCopySTh ; "will not copy %s through just-created s"...
.text:0000000000006040                 mov     rbx, rax
.text:0000000000006043                 xor     edi, edi        ; domainname
.text:0000000000006045                 mov     edx, 5          ; category
.text:000000000000604A                 call    _dcgettext
.text:000000000000604F                 mov     r8, r13
.text:0000000000006052                 mov     rdx, rax        ; format
.text:0000000000006055                 mov     rcx, rbx
.text:0000000000006058                 xor     esi, esi        ; errnum
.text:000000000000605A                 xor     edi, edi        ; status
.text:000000000000605C                 xor     eax, eax
.text:000000000000605E                 call    _error
.text:0000000000006063                 jmp     loc_6466
.text:0000000000006063 ; ---------------------------------------------------------------------------
.text:0000000000006068                 align 10h
.text:0000000000006070
.text:0000000000006070 loc_6070:                               ; CODE XREF: copy_internal+391↑j
.text:0000000000006070                                         ; copy_internal+39C↑j ...
.text:0000000000006070                 cmp     byte ptr [rbx+2Eh], 0
.text:0000000000006074                 jz      short loc_6080
.text:0000000000006076                 cmp     byte ptr [rbx+18h], 0
.text:000000000000607A                 jz      loc_6630
.text:0000000000006080
.text:0000000000006080 loc_6080:                               ; CODE XREF: copy_internal+454↑j
.text:0000000000006080                                         ; copy_internal+A20↓j ...
.text:0000000000006080                 test    r15d, r15d
.text:0000000000006083                 jz      loc_6420
.text:0000000000006089
.text:0000000000006089 loc_6089:                               ; CODE XREF: copy_internal+104B↓j
.text:0000000000006089                                         ; copy_internal+27A1↓j ...
.text:0000000000006089                 cmp     byte ptr [rbx+2Ah], 0
.text:000000000000608D                 jz      short loc_60A5
.text:000000000000608F                 mov     eax, [rbp+var_314]
.text:0000000000006095                 and     eax, 0F000h
.text:000000000000609A                 cmp     eax, 4000h
.text:000000000000609F                 jz      loc_6C70
.text:00000000000060A5
.text:00000000000060A5 loc_60A5:                               ; CODE XREF: copy_internal+46D↑j
.text:00000000000060A5                 movzx   eax, byte ptr [rbx+18h]
.text:00000000000060A9                 test    al, al
.text:00000000000060AB                 jnz     loc_6550
.text:00000000000060B1                 cmp     byte ptr [rbx+22h], 0
.text:00000000000060B5                 jnz     loc_7C90
.text:00000000000060BB
.text:00000000000060BB loc_60BB:                               ; CODE XREF: copy_internal+804↓j
.text:00000000000060BB                                         ; copy_internal+1045↓j
.text:00000000000060BB                 movzx   eax, r14b
.text:00000000000060BF                 mov     [rbp+s2], 0
.text:00000000000060CA                 mov     [rbp+fildes], eax
.text:00000000000060D0
.text:00000000000060D0 loc_60D0:                               ; CODE XREF: copy_internal+A01↓j
.text:00000000000060D0                                         ; copy_internal+115D↓j ...
.text:00000000000060D0                 mov     r12d, [rbp+var_314]
.text:00000000000060D7                 and     r12d, 0FFFh
.text:00000000000060DE                 cmp     byte ptr [rbx+2Bh], 0
.text:00000000000060E2                 jz      short loc_60EF
.text:00000000000060E4                 mov     r12d, [rbx+10h]
.text:00000000000060E8                 and     r12d, 0FFFh
.text:00000000000060EF
.text:00000000000060EF loc_60EF:                               ; CODE XREF: copy_internal+4C2↑j
.text:00000000000060EF                 cmp     byte ptr [rbx+1Dh], 0
.text:00000000000060F3                 jnz     loc_6718
.text:00000000000060F9                 mov     r15d, [rbp+var_314]
.text:0000000000006100                 and     r15d, 0F000h
.text:0000000000006107                 cmp     r15d, 4000h
.text:000000000000610E                 jz      loc_6F50
.text:0000000000006114                 mov     ecx, [rbp+fildes]
.text:000000000000611A                 mov     edx, [rbp+var_314]
.text:0000000000006120                 mov     r8, rbx
.text:0000000000006123                 mov     rsi, [rbp+file]
.text:000000000000612A                 mov     rdi, [rbp+filename]
.text:0000000000006131                 call    set_process_security_ctx
.text:0000000000006136                 test    al, al
.text:0000000000006138                 mov     [rbp+var_35C], 0
.text:0000000000006142                 jz      loc_5F30
.text:0000000000006148
.text:0000000000006148 loc_6148:                               ; CODE XREF: copy_internal+B43↓j
.text:0000000000006148                 movzx   eax, byte ptr [rbx+2Ch]
.text:000000000000614C                 test    al, al
.text:000000000000614E                 mov     byte ptr [rbp+fildes], al
.text:0000000000006154                 jnz     loc_6AE0
.text:000000000000615A                 cmp     byte ptr [rbx+17h], 0
.text:000000000000615E                 jz      loc_74A8
.text:0000000000006164                 cmp     byte ptr [rbx+16h], 0
.text:0000000000006168                 mov     edx, 1
.text:000000000000616D                 jnz     short loc_6178
.text:000000000000616F                 xor     edx, edx
.text:0000000000006171                 cmp     dword ptr [rbx+8], 3
.text:0000000000006175                 setz    dl
.text:0000000000006178
.text:0000000000006178 loc_6178:                               ; CODE XREF: copy_internal+54D↑j
.text:0000000000006178                 mov     r8d, [rbp+fd]
.text:000000000000617F                 mov     rsi, [rbp+file]
.text:0000000000006186                 xor     ecx, ecx
.text:0000000000006188                 mov     rdi, [rbp+filename]
.text:000000000000618F                 call    create_hard_link
.text:0000000000006194                 test    al, al
.text:0000000000006196                 jz      loc_6BB0
.text:000000000000619C                 xor     r8d, r8d
.text:000000000000619F
.text:000000000000619F loc_619F:                               ; CODE XREF: copy_internal+F2E↓j
.text:000000000000619F                                         ; copy_internal+219F↓j ...
.text:000000000000619F                 cmp     r15d, 4000h
.text:00000000000061A6                 setnz   r15b
.text:00000000000061AA                 test    r14b, r14b
.text:00000000000061AD                 jnz     short loc_61C2
.text:00000000000061AF                 movzx   eax, byte ptr [rbx+14h]
.text:00000000000061B3                 xor     eax, 1
.text:00000000000061B6                 and     al, r15b
.text:00000000000061B9                 mov     r12d, eax
.text:00000000000061BC                 jnz     loc_7EF0
.text:00000000000061C2
.text:00000000000061C2 loc_61C2:                               ; CODE XREF: copy_internal+58D↑j
.text:00000000000061C2                                         ; copy_internal+22E1↓j ...
.text:00000000000061C2                 test    r13b, r13b
.text:00000000000061C5                 mov     r12d, 1
.text:00000000000061CB                 jz      short loc_6222
.text:00000000000061CD                 mov     byte ptr [rbp+ptr], 0
.text:00000000000061D4
.text:00000000000061D4 loc_61D4:                               ; CODE XREF: copy_internal+2536↓j
.text:00000000000061D4                 cmp     qword ptr [rbx+40h], 0
.text:00000000000061D9                 jz      short loc_620D
.text:00000000000061DB                 lea     r12, [rbp+var_D0]
.text:00000000000061E2                 mov     rsi, [rbp+file] ; filename
.text:00000000000061E9                 mov     edi, 1          ; ver
.text:00000000000061EE                 mov     byte ptr [rbp+fd], r8b
.text:00000000000061F5                 mov     rdx, r12        ; stat_buf
.text:00000000000061F8                 call    ___lxstat
.text:00000000000061FD                 test    eax, eax
.text:00000000000061FF                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000006207                 jz      loc_8252
.text:000000000000620D
.text:000000000000620D loc_620D:                               ; CODE XREF: copy_internal+5B9↑j
.text:000000000000620D                                         ; copy_internal+264D↓j
.text:000000000000620D                 movzx   eax, byte ptr [rbp+ptr]
.text:0000000000006214                 movzx   r12d, [rbp+var_315]
.text:000000000000621C                 mov     [rbp+var_315], al
.text:0000000000006222
.text:0000000000006222 loc_6222:                               ; CODE XREF: copy_internal+5AB↑j
.text:0000000000006222                 cmp     byte ptr [rbx+17h], 0
.text:0000000000006226                 jz      short loc_6231
.text:0000000000006228                 test    r15b, r15b
.text:000000000000622B                 jnz     loc_6466
.text:0000000000006231
.text:0000000000006231 loc_6231:                               ; CODE XREF: copy_internal+606↑j
.text:0000000000006231                 test    r8b, r8b
.text:0000000000006234                 jnz     loc_6466
.text:000000000000623A
.text:000000000000623A loc_623A:                               ; CODE XREF: copy_internal+1F60↓j
.text:000000000000623A                 cmp     byte ptr [rbx+1Fh], 0
.text:000000000000623E                 jz      loc_62F8
.text:0000000000006244                 mov     rax, [rbp+stat_buf.st_atim.tv_sec]
.text:000000000000624B                 cmp     byte ptr [rbp+fildes], 0
.text:0000000000006252                 lea     rsi, [rbp+var_D0]
.text:0000000000006259                 mov     rdi, [rbp+file] ; path
.text:0000000000006260                 mov     [rbp+var_D0.st_dev], rax
.text:0000000000006267                 mov     rax, [rbp+stat_buf.st_atim.tv_nsec]
.text:000000000000626E                 mov     [rbp+var_D0.st_ino], rax
.text:0000000000006275                 mov     rax, [rbp+stat_buf.st_mtim.tv_sec]
.text:000000000000627C                 mov     [rbp+var_D0.st_nlink], rax
.text:0000000000006283                 mov     rax, [rbp+stat_buf.st_mtim.tv_nsec]
.text:000000000000628A                 mov     qword ptr [rbp+var_D0.st_mode], rax
.text:0000000000006291                 jz      loc_8240
.text:0000000000006297                 call    lutimens
.text:000000000000629C                 test    eax, eax
.text:000000000000629E                 jz      short loc_62F8
.text:00000000000062A0                 call    ___errno_location
.text:00000000000062A5                 cmp     dword ptr [rax], 26h ; '&'
.text:00000000000062A8                 jz      short loc_62F8
.text:00000000000062AA
.text:00000000000062AA loc_62AA:                               ; CODE XREF: copy_internal+262D↓j
.text:00000000000062AA                 mov     rsi, [rbp+file]
.text:00000000000062B1                 mov     edi, 4
.text:00000000000062B6                 call    quotearg_style
.text:00000000000062BB                 lea     rsi, aPreservingTime ; "preserving times for %s"
.text:00000000000062C2                 xor     edi, edi        ; domainname
.text:00000000000062C4                 mov     edx, 5          ; category
.text:00000000000062C9                 mov     r13, rax
.text:00000000000062CC                 call    _dcgettext
.text:00000000000062D1                 mov     r15, rax
.text:00000000000062D4                 call    ___errno_location
.text:00000000000062D9                 mov     esi, [rax]      ; errnum
.text:00000000000062DB                 xor     edi, edi        ; status
.text:00000000000062DD                 xor     eax, eax
.text:00000000000062DF                 mov     rcx, r13
.text:00000000000062E2                 mov     rdx, r15        ; format
.text:00000000000062E5                 call    _error
.text:00000000000062EA                 cmp     byte ptr [rbx+24h], 0
.text:00000000000062EE                 jnz     loc_5F30
.text:00000000000062F4                 nop     dword ptr [rax+00h]
.text:00000000000062F8
.text:00000000000062F8 loc_62F8:                               ; CODE XREF: copy_internal+61E↑j
.text:00000000000062F8                                         ; copy_internal+67E↑j ...
.text:00000000000062F8                 cmp     byte ptr [rbp+fildes], 0
.text:00000000000062FF                 jnz     loc_6466
.text:0000000000006305
.text:0000000000006305 loc_6305:                               ; CODE XREF: copy_internal+2627↓j
.text:0000000000006305                 cmp     byte ptr [rbx+1Dh], 0
.text:0000000000006309                 jz      short loc_6367
.text:000000000000630B                 test    r14b, r14b
.text:000000000000630E                 jnz     short loc_6322
.text:0000000000006310                 mov     eax, [rbp+var_1F0.st_uid]
.text:0000000000006316                 cmp     [rbp+stat_buf.st_uid], eax
.text:000000000000631C                 jz      loc_89CA
.text:0000000000006322
.text:0000000000006322 loc_6322:                               ; CODE XREF: copy_internal+6EE↑j
.text:0000000000006322                                         ; copy_internal+2DB6↓j
.text:0000000000006322                 mov     rsi, [rbp+file]
.text:0000000000006329                 lea     rcx, [rbp+stat_buf]
.text:0000000000006330                 lea     r9, [rbp+var_1F0]
.text:0000000000006337                 movzx   r8d, r14b
.text:000000000000633B                 mov     edx, 0FFFFFFFFh
.text:0000000000006340                 mov     rdi, rbx
.text:0000000000006343                 call    set_owner
.text:0000000000006348                 cmp     eax, 0FFFFFFFFh
.text:000000000000634B                 jz      loc_5F30
.text:0000000000006351                 mov     ecx, [rbp+var_314]
.text:0000000000006357                 mov     edx, ecx
.text:0000000000006359                 and     dh, 0F1h
.text:000000000000635C                 test    eax, eax
.text:000000000000635E                 cmovnz  edx, ecx
.text:0000000000006361                 mov     [rbp+var_314], edx
.text:0000000000006367
.text:0000000000006367 loc_6367:                               ; CODE XREF: copy_internal+6E9↑j
.text:0000000000006367                                         ; copy_internal+2DBC↓j
.text:0000000000006367                 mov     rax, 0FF0000000000FFh
.text:0000000000006371                 test    [rbx+18h], rax
.text:0000000000006375                 jnz     loc_8410
.text:000000000000637B                 cmp     byte ptr [rbx+2Bh], 0
.text:000000000000637F                 jnz     loc_8775
.text:0000000000006385                 test    [rbx+20h], r14b
.text:0000000000006389                 jnz     loc_8A29
.text:000000000000638F                 mov     eax, [rbp+var_35C]
.text:0000000000006395                 test    eax, eax
.text:0000000000006397                 jnz     loc_89E1
.text:000000000000639D
.text:000000000000639D loc_639D:                               ; CODE XREF: copy_internal+2DCE↓j
.text:000000000000639D                 cmp     [rbp+var_315], 0
.text:00000000000063A4                 jz      loc_6466
.text:00000000000063AA
.text:00000000000063AA loc_63AA:                               ; CODE XREF: copy_internal+2DDB↓j
.text:00000000000063AA                                         ; copy_internal+2DFE↓j
.text:00000000000063AA                 mov     esi, [rbp+var_38C]
.text:00000000000063B0                 or      esi, [rbp+var_35C] ; mode
.text:00000000000063B6                 mov     rdi, [rbp+file] ; file
.text:00000000000063BD                 call    _chmod
.text:00000000000063C2                 test    eax, eax
.text:00000000000063C4                 jz      loc_6466
.text:00000000000063CA                 mov     rsi, [rbp+file]
.text:00000000000063D1                 mov     edi, 4
.text:00000000000063D6                 call    quotearg_style
.text:00000000000063DB                 lea     rsi, aPreservingPerm ; "preserving permissions for %s"
.text:00000000000063E2                 mov     edx, 5          ; category
.text:00000000000063E7                 xor     edi, edi        ; domainname
.text:00000000000063E9                 mov     r14, rax
.text:00000000000063EC                 call    _dcgettext
.text:00000000000063F1                 mov     r13, rax
.text:00000000000063F4                 call    ___errno_location
.text:00000000000063F9                 mov     esi, [rax]      ; errnum
.text:00000000000063FB                 mov     rcx, r14
.text:00000000000063FE                 mov     rdx, r13        ; format
.text:0000000000006401                 xor     edi, edi        ; status
.text:0000000000006403                 xor     eax, eax
.text:0000000000006405                 call    _error
.text:000000000000640A
.text:000000000000640A loc_640A:                               ; CODE XREF: copy_internal+2813↓j
.text:000000000000640A                 cmp     byte ptr [rbx+24h], 0
.text:000000000000640E                 jnz     loc_5F30
.text:0000000000006414                 jmp     short loc_6466
.text:0000000000006414 ; ---------------------------------------------------------------------------
.text:0000000000006416                 align 20h
.text:0000000000006420
.text:0000000000006420 loc_6420:                               ; CODE XREF: copy_internal+463↑j
.text:0000000000006420                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006424                 jz      loc_60BB
.text:000000000000642A
.text:000000000000642A loc_642A:                               ; CODE XREF: copy_internal+974↓j
.text:000000000000642A                                         ; copy_internal+985↓j
.text:000000000000642A                 cmp     byte ptr [rbx+2Eh], 0
.text:000000000000642E                 jnz     loc_6FB0
.text:0000000000006434
.text:0000000000006434 loc_6434:                               ; CODE XREF: copy_internal+13CC↓j
.text:0000000000006434                 cmp     byte ptr [rbx+21h], 0
.text:0000000000006438                 jnz     loc_6F90
.text:000000000000643E
.text:000000000000643E loc_643E:                               ; CODE XREF: copy_internal+1386↓j
.text:000000000000643E                 mov     rax, qword ptr [rbp+fildes]
.text:0000000000006445                 test    rax, rax
.text:0000000000006448                 jz      short loc_644D
.text:000000000000644A                 mov     byte ptr [rax], 1
.text:000000000000644D
.text:000000000000644D loc_644D:                               ; CODE XREF: copy_internal+828↑j
.text:000000000000644D                 test    r13b, r13b
.text:0000000000006450                 jz      short loc_6460
.text:0000000000006452                 cmp     byte ptr [rbx+31h], 0
.text:0000000000006456                 jz      loc_6EC8
.text:000000000000645C                 nop     dword ptr [rax+00h]
.text:0000000000006460
.text:0000000000006460 loc_6460:                               ; CODE XREF: copy_internal+2D4↑j
.text:0000000000006460                                         ; copy_internal+2FB↑j ...
.text:0000000000006460                 mov     r12d, 1
.text:0000000000006466
.text:0000000000006466 loc_6466:                               ; CODE XREF: copy_internal+313↑j
.text:0000000000006466                                         ; copy_internal+443↑j ...
.text:0000000000006466                 mov     rsi, [rbp+var_38]
.text:000000000000646A                 xor     rsi, fs:28h
.text:0000000000006473                 mov     eax, r12d
.text:0000000000006476                 jnz     loc_9144
.text:000000000000647C                 lea     rsp, [rbp-28h]
.text:0000000000006480                 pop     rbx
.text:0000000000006481                 pop     r12
.text:0000000000006483                 pop     r13
.text:0000000000006485                 pop     r14
.text:0000000000006487                 pop     r15
.text:0000000000006489                 pop     rbp
.text:000000000000648A                 retn
.text:000000000000648A ; ---------------------------------------------------------------------------
.text:000000000000648B                 align 10h
.text:0000000000006490
.text:0000000000006490 loc_6490:                               ; CODE XREF: copy_internal+1F2↑j
.text:0000000000006490                 call    ___errno_location
.text:0000000000006495                 mov     r9, rax
.text:0000000000006498                 mov     eax, [rax]
.text:000000000000649A                 cmp     eax, 28h ; '('
.text:000000000000649D                 jz      loc_6A70
.text:00000000000064A3                 cmp     eax, 2
.text:00000000000064A6                 mov     r8d, 1
.text:00000000000064AC                 jnz     loc_6A7A
.text:00000000000064B2
.text:00000000000064B2 loc_64B2:                               ; CODE XREF: copy_internal+11E3↓j
.text:00000000000064B2                 xor     r9d, r9d
.text:00000000000064B5                 cmp     r15d, 11h
.text:00000000000064B9                 jz      loc_5E1B
.text:00000000000064BF                 mov     r14d, r8d
.text:00000000000064C2                 mov     [rbp+old], 0
.text:00000000000064CD                 jmp     loc_5FAE
.text:00000000000064CD ; ---------------------------------------------------------------------------
.text:00000000000064D2                 align 8
.text:00000000000064D8
.text:00000000000064D8 loc_64D8:                               ; CODE XREF: copy_internal+B5↑j
.text:00000000000064D8                 cmp     dword ptr [rbx+8], 2
.text:00000000000064DC                 jz      loc_5D28
.text:00000000000064E2                 jmp     loc_5CDB
.text:00000000000064E2 ; ---------------------------------------------------------------------------
.text:00000000000064E7                 align 10h
.text:00000000000064F0
.text:00000000000064F0 loc_64F0:                               ; CODE XREF: copy_internal+D1↑j
.text:00000000000064F0                 call    ___lxstat
.text:00000000000064F5                 test    eax, eax
.text:00000000000064F7                 mov     rsi, r12
.text:00000000000064FA                 setnz   al
.text:00000000000064FD                 test    al, al
.text:00000000000064FF                 jz      loc_5D0C
.text:0000000000006505
.text:0000000000006505 loc_6505:                               ; CODE XREF: copy_internal+E6↑j
.text:0000000000006505                                         ; copy_internal+377E↓j
.text:0000000000006505                 mov     edi, 4
.text:000000000000650A                 call    quotearg_style
.text:000000000000650F                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:0000000000006516                 mov     r12, rax
.text:0000000000006519                 mov     edx, 5          ; category
.text:000000000000651E
.text:000000000000651E loc_651E:                               ; CODE XREF: copy_internal+1880↓j
.text:000000000000651E                 xor     edi, edi        ; domainname
.text:0000000000006520                 call    _dcgettext
.text:0000000000006525                 mov     rbx, rax
.text:0000000000006528                 call    ___errno_location
.text:000000000000652D                 mov     esi, [rax]      ; errnum
.text:000000000000652F                 mov     rcx, r12
.text:0000000000006532                 mov     rdx, rbx        ; format
.text:0000000000006535                 xor     edi, edi        ; status
.text:0000000000006537                 xor     eax, eax
.text:0000000000006539                 xor     r12d, r12d
.text:000000000000653C                 call    _error
.text:0000000000006541                 jmp     loc_6466
.text:0000000000006541 ; ---------------------------------------------------------------------------
.text:0000000000006546                 align 10h
.text:0000000000006550
.text:0000000000006550 loc_6550:                               ; CODE XREF: copy_internal+48B↑j
.text:0000000000006550                 cmp     [rbp+stat_buf.st_nlink], 1
.text:0000000000006558                 jz      loc_7588
.text:000000000000655E                 cmp     byte ptr [rbx+22h], 0
.text:0000000000006562                 mov     [rbp+s2], 0
.text:000000000000656D                 jz      short loc_6579
.text:000000000000656F                 cmp     byte ptr [rbx+17h], 0
.text:0000000000006573                 jz      loc_6D38
.text:0000000000006579
.text:0000000000006579 loc_6579:                               ; CODE XREF: copy_internal+94D↑j
.text:0000000000006579                                         ; copy_internal+114D↓j
.text:0000000000006579                 cmp     r15d, 11h
.text:000000000000657D                 jnz     short loc_65AB
.text:000000000000657F                 mov     rsi, [rbp+file] ; new
.text:0000000000006586                 mov     rdi, [rbp+filename] ; old
.text:000000000000658D                 call    _rename
.text:0000000000006592                 test    eax, eax
.text:0000000000006594                 jz      loc_642A
.text:000000000000659A                 call    ___errno_location
.text:000000000000659F                 mov     r15d, [rax]
.text:00000000000065A2                 test    r15d, r15d
.text:00000000000065A5                 jz      loc_642A
.text:00000000000065AB
.text:00000000000065AB loc_65AB:                               ; CODE XREF: copy_internal+95D↑j
.text:00000000000065AB                 cmp     r15d, 16h
.text:00000000000065AF                 jz      loc_75D0
.text:00000000000065B5                 cmp     r15d, 12h
.text:00000000000065B9                 jnz     loc_6D88
.text:00000000000065BF                 mov     r12d, [rbp+var_314]
.text:00000000000065C6                 mov     rdi, [rbp+file] ; path
.text:00000000000065CD                 and     r12d, 0F000h
.text:00000000000065D4                 cmp     r12d, 4000h
.text:00000000000065DB                 jz      loc_7640
.text:00000000000065E1                 call    _unlink
.text:00000000000065E6                 test    eax, eax
.text:00000000000065E8                 jz      short loc_65FB
.text:00000000000065EA                 call    ___errno_location
.text:00000000000065EF                 cmp     dword ptr [rax], 2
.text:00000000000065F2                 mov     r14, rax
.text:00000000000065F5                 jnz     loc_765E
.text:00000000000065FB
.text:00000000000065FB loc_65FB:                               ; CODE XREF: copy_internal+9C8↑j
.text:00000000000065FB                 cmp     r12d, 4000h
.text:0000000000006602                 setnz   dl
.text:0000000000006605                 and     dl, [rbx+2Eh]
.text:0000000000006608                 mov     r14d, edx
.text:000000000000660B                 jnz     loc_7F50
.text:0000000000006611
.text:0000000000006611 loc_6611:                               ; CODE XREF: copy_internal+1A27↓j
.text:0000000000006611                                         ; copy_internal+1A38↓j
.text:0000000000006611                 mov     [rbp+fildes], 1
.text:000000000000661B                 mov     r14d, 1
.text:0000000000006621                 jmp     loc_60D0
.text:0000000000006621 ; ---------------------------------------------------------------------------
.text:0000000000006626                 align 10h
.text:0000000000006630
.text:0000000000006630 loc_6630:                               ; CODE XREF: copy_internal+45A↑j
.text:0000000000006630                                         ; copy_internal+103C↓j
.text:0000000000006630                 mov     eax, [rbp+var_314]
.text:0000000000006636                 and     eax, 0F000h
.text:000000000000663B                 cmp     eax, 4000h
.text:0000000000006640                 jz      loc_6080
.text:0000000000006646                 mov     rdx, [rbp+old]
.text:000000000000664D                 mov     rsi, [rbp+file]
.text:0000000000006654                 mov     rdi, [rbp+filename]
.text:000000000000665B                 call    emit_verbose
.text:0000000000006660                 jmp     loc_6080
.text:0000000000006660 ; ---------------------------------------------------------------------------
.text:0000000000006665                 align 8
.text:0000000000006668
.text:0000000000006668 loc_6668:                               ; CODE XREF: copy_internal+135↑j
.text:0000000000006668                 mov     rsi, [rbp+filename]
.text:000000000000666F                 mov     rdx, r10
.text:0000000000006672                 mov     qword ptr [rbp+fd], r10
.text:0000000000006679                 call    seen_file
.text:000000000000667E                 test    al, al
.text:0000000000006680                 mov     r12d, eax
.text:0000000000006683                 jnz     loc_7548
.text:0000000000006689                 mov     rdi, [rbx+48h]
.text:000000000000668D                 mov     r10, qword ptr [rbp+fd]
.text:0000000000006694                 jmp     loc_5D5B
.text:0000000000006694 ; ---------------------------------------------------------------------------
.text:0000000000006699                 align 20h
.text:00000000000066A0
.text:00000000000066A0 loc_66A0:                               ; CODE XREF: copy_internal+191↑j
.text:00000000000066A0                                         ; copy_internal+1BB↑j
.text:00000000000066A0                 movzx   r9d, byte ptr [rbx+18h]
.text:00000000000066A5                 mov     r8d, 100h
.text:00000000000066AB                 test    r9b, r9b
.text:00000000000066AE                 jnz     loc_5DE1
.text:00000000000066B4                 movzx   r9d, byte ptr [rbx+2Ch]
.text:00000000000066B9                 test    r9b, r9b
.text:00000000000066BC                 jnz     loc_5DE1
.text:00000000000066C2                 movzx   r9d, byte ptr [rbx+17h]
.text:00000000000066C7                 test    r9b, r9b
.text:00000000000066CA                 jnz     loc_5DE1
.text:00000000000066D0                 mov     r10d, [rbx]
.text:00000000000066D3                 mov     r9d, 1
.text:00000000000066D9                 test    r10d, r10d
.text:00000000000066DC                 jnz     loc_5DE1
.text:00000000000066E2                 movzx   r9d, byte ptr [rbx+15h]
.text:00000000000066E7                 xor     r8d, r8d
.text:00000000000066EA                 test    r9b, r9b
.text:00000000000066ED                 setnz   r8b
.text:00000000000066F1                 shl     r8d, 8
.text:00000000000066F5                 jmp     loc_5DE1
.text:00000000000066F5 ; ---------------------------------------------------------------------------
.text:00000000000066FA                 align 20h
.text:0000000000006700
.text:0000000000006700 loc_6700:                               ; CODE XREF: copy_internal+17B↑j
.text:0000000000006700                 cmp     dword ptr [rbx+8], 2
.text:0000000000006704                 jnz     loc_5DA1
.text:000000000000670A                 xor     r8d, r8d
.text:000000000000670D                 xor     r9d, r9d
.text:0000000000006710                 jmp     loc_5E3F
.text:0000000000006710 ; ---------------------------------------------------------------------------
.text:0000000000006715                 align 8
.text:0000000000006718
.text:0000000000006718 loc_6718:                               ; CODE XREF: copy_internal+4D3↑j
.text:0000000000006718                 mov     ecx, [rbp+fildes]
.text:000000000000671E                 mov     edx, [rbp+var_314]
.text:0000000000006724                 mov     r8, rbx
.text:0000000000006727                 mov     rsi, [rbp+file]
.text:000000000000672E                 mov     rdi, [rbp+filename]
.text:0000000000006735                 call    set_process_security_ctx
.text:000000000000673A                 test    al, al
.text:000000000000673C                 jz      loc_5F30
.text:0000000000006742                 mov     r15d, [rbp+var_314]
.text:0000000000006749                 mov     eax, r12d
.text:000000000000674C                 and     eax, 3Fh
.text:000000000000674F                 mov     [rbp+var_35C], eax
.text:0000000000006755                 and     r15d, 0F000h
.text:000000000000675C                 cmp     r15d, 4000h
.text:0000000000006763                 jnz     loc_6148
.text:0000000000006769
.text:0000000000006769 loc_6769:                               ; CODE XREF: copy_internal+1366↓j
.text:0000000000006769                 mov     rax, [rbp+ptr]
.text:0000000000006770                 mov     rdx, [rbp+stat_buf.st_ino]
.text:0000000000006777                 mov     rcx, [rbp+stat_buf.st_dev]
.text:000000000000677E                 test    rax, rax
.text:0000000000006781                 jnz     short loc_679C
.text:0000000000006783                 jmp     loc_7080
.text:0000000000006783 ; ---------------------------------------------------------------------------
.text:0000000000006788                 align 10h
.text:0000000000006790
.text:0000000000006790 loc_6790:                               ; CODE XREF: copy_internal+B80↓j
.text:0000000000006790                                         ; copy_internal+B86↓j
.text:0000000000006790                 mov     rax, [rax]
.text:0000000000006793                 test    rax, rax
.text:0000000000006796                 jz      loc_7080
.text:000000000000679C
.text:000000000000679C loc_679C:                               ; CODE XREF: copy_internal+B61↑j
.text:000000000000679C                 cmp     [rax+8], rdx
.text:00000000000067A0                 jnz     short loc_6790
.text:00000000000067A2                 cmp     [rax+10h], rcx
.text:00000000000067A6                 jnz     short loc_6790
.text:00000000000067A8                 mov     rsi, [rbp+filename]
.text:00000000000067AF                 mov     edi, 4
.text:00000000000067B4                 call    quotearg_style
.text:00000000000067B9                 lea     rsi, aCannotCopyCycl ; "cannot copy cyclic symbolic link %s"
.text:00000000000067C0                 mov     r12, rax
.text:00000000000067C3                 mov     edx, 5          ; category
.text:00000000000067C8
.text:00000000000067C8 loc_67C8:                               ; CODE XREF: copy_internal+1902↓j
.text:00000000000067C8                                         ; copy_internal+224E↓j
.text:00000000000067C8                 xor     edi, edi        ; domainname
.text:00000000000067CA                 call    _dcgettext
.text:00000000000067CF                 mov     rcx, r12
.text:00000000000067D2                 mov     rdx, rax        ; format
.text:00000000000067D5                 xor     esi, esi        ; errnum
.text:00000000000067D7                 xor     edi, edi        ; status
.text:00000000000067D9                 xor     eax, eax
.text:00000000000067DB                 call    _error
.text:00000000000067E0                 jmp     loc_6BB0
.text:00000000000067E0 ; ---------------------------------------------------------------------------
.text:00000000000067E5                 align 8
.text:00000000000067E8
.text:00000000000067E8 loc_67E8:                               ; CODE XREF: copy_internal+102↑j
.text:00000000000067E8                 movzx   r12d, byte ptr [rbx+2Ah]
.text:00000000000067ED                 test    r12b, r12b
.text:00000000000067F0                 jnz     loc_5D28
.text:00000000000067F6                 mov     rsi, [rbp+filename]
.text:00000000000067FD                 mov     edi, 4
.text:0000000000006802                 call    quotearg_style
.text:0000000000006807                 cmp     byte ptr [rbx+19h], 0
.text:000000000000680B                 mov     r13, rax
.text:000000000000680E                 mov     edx, 5          ; category
.text:0000000000006813                 jnz     loc_75B0
.text:0000000000006819                 lea     rsi, aRNotSpecifiedO ; "-r not specified; omitting directory %s"
.text:0000000000006820                 xor     edi, edi        ; domainname
.text:0000000000006822                 call    _dcgettext
.text:0000000000006827                 mov     rdx, rax        ; format
.text:000000000000682A
.text:000000000000682A loc_682A:                               ; CODE XREF: copy_internal+19A1↓j
.text:000000000000682A                 mov     rcx, r13
.text:000000000000682D                 xor     esi, esi        ; errnum
.text:000000000000682F                 xor     edi, edi        ; status
.text:0000000000006831                 xor     eax, eax
.text:0000000000006833                 call    _error
.text:0000000000006838                 jmp     loc_6466
.text:0000000000006838 ; ---------------------------------------------------------------------------
.text:000000000000683D                 align 20h
.text:0000000000006840
.text:0000000000006840 loc_6840:                               ; CODE XREF: copy_internal+223↑j
.text:0000000000006840                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006844                 jnz     loc_6E20
.text:000000000000684A                 mov     eax, [rbp+var_314]
.text:0000000000006850                 and     eax, 0F000h
.text:0000000000006855                 cmp     eax, 4000h
.text:000000000000685A                 jz      short loc_68B0
.text:000000000000685C
.text:000000000000685C loc_685C:                               ; CODE XREF: copy_internal+11F4↓j
.text:000000000000685C                 mov     eax, [rbx+8]
.text:000000000000685F                 cmp     eax, 2
.text:0000000000006862                 jz      loc_6460
.text:0000000000006868                 cmp     eax, 3
.text:000000000000686B                 jnz     short loc_68B0
.text:000000000000686D                 mov     rsi, [rbp+file]
.text:0000000000006874                 lea     rdx, [rbp+var_1F0.st_mode]
.text:000000000000687B                 mov     rdi, rbx
.text:000000000000687E                 mov     byte ptr [rbp+s2], r9b
.text:0000000000006885                 mov     byte ptr [rbp+old], r8b
.text:000000000000688C                 call    overwrite_ok_isra_12
.text:0000000000006891                 test    al, al
.text:0000000000006893                 movzx   r8d, byte ptr [rbp+old]
.text:000000000000689B                 movzx   r9d, byte ptr [rbp+s2]
.text:00000000000068A3                 jz      loc_6460
.text:00000000000068A9                 nop     dword ptr [rax+00000000h]
.text:00000000000068B0
.text:00000000000068B0 loc_68B0:                               ; CODE XREF: copy_internal+C3A↑j
.text:00000000000068B0                                         ; copy_internal+C4B↑j ...
.text:00000000000068B0                 test    r14b, r14b
.text:00000000000068B3                 jnz     loc_6460
.text:00000000000068B9                 mov     eax, [rbp+var_1F0.st_mode]
.text:00000000000068BF                 mov     r12d, [rbp+var_314]
.text:00000000000068C6                 mov     edx, eax
.text:00000000000068C8                 and     r12d, 0F000h
.text:00000000000068CF                 and     edx, 0F000h
.text:00000000000068D5                 cmp     edx, 4000h
.text:00000000000068DB                 jz      loc_6EF0
.text:00000000000068E1                 cmp     r12d, 4000h
.text:00000000000068E8                 jz      loc_7B88
.text:00000000000068EE                 test    r13b, r13b
.text:00000000000068F1                 mov     r15d, [rbx]
.text:00000000000068F4                 jz      loc_7413
.text:00000000000068FA
.text:00000000000068FA loc_68FA:                               ; CODE XREF: copy_internal+1F81↓j
.text:00000000000068FA                 cmp     r15d, 3
.text:00000000000068FE                 jnz     loc_73B0
.text:0000000000006904                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006908                 jnz     loc_7BA7
.text:000000000000690E
.text:000000000000690E loc_690E:                               ; CODE XREF: copy_internal+1802↓j
.text:000000000000690E                 mov     rdi, [rbp+filename]
.text:0000000000006915                 mov     byte ptr [rbp+s2], r9b
.text:000000000000691C                 mov     byte ptr [rbp+old], r8b
.text:0000000000006923                 call    last_component
.text:0000000000006928                 cmp     byte ptr [rax], 2Eh ; '.'
.text:000000000000692B                 mov     r14, rax
.text:000000000000692E                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000006936                 movzx   r9d, byte ptr [rbp+s2]
.text:000000000000693E                 jnz     short loc_6967
.text:0000000000006940                 xor     eax, eax
.text:0000000000006942
.text:0000000000006942 loc_6942:                               ; CODE XREF: copy_internal+1FDA↓j
.text:0000000000006942                 xor     edx, edx
.text:0000000000006944                 cmp     byte ptr [r14+1], 2Eh ; '.'
.text:0000000000006949                 setz    dl
.text:000000000000694C                 movzx   edx, byte ptr [r14+rdx+1]
.text:0000000000006952                 test    dl, dl
.text:0000000000006954                 jz      loc_7428
.text:000000000000695A                 cmp     dl, 2Fh ; '/'
.text:000000000000695D                 jz      loc_7428
.text:0000000000006963                 test    al, al
.text:0000000000006965                 jnz     short loc_697D
.text:0000000000006967
.text:0000000000006967 loc_6967:                               ; CODE XREF: copy_internal+D1E↑j
.text:0000000000006967                 mov     eax, [rbp+var_1F0.st_mode]
.text:000000000000696D                 and     eax, 0F000h
.text:0000000000006972                 cmp     eax, 4000h
.text:0000000000006977                 jz      loc_7447
.text:000000000000697D
.text:000000000000697D loc_697D:                               ; CODE XREF: copy_internal+D45↑j
.text:000000000000697D                                         ; copy_internal+1FCF↓j
.text:000000000000697D                 cmp     r15d, 3
.text:0000000000006981                 jz      short loc_69E9
.text:0000000000006983                 mov     rdi, r14        ; s
.text:0000000000006986                 mov     byte ptr [rbp+var_35C], r9b
.text:000000000000698D                 call    _strlen
.text:0000000000006992                 mov     rdi, [rbp+file]
.text:0000000000006999                 mov     [rbp+old], rax
.text:00000000000069A0                 call    last_component
.text:00000000000069A5                 mov     rdi, rax        ; s
.text:00000000000069A8                 mov     [rbp+s2], rax
.text:00000000000069AF                 call    _strlen
.text:00000000000069B4                 mov     r15, cs:simple_backup_suffix
.text:00000000000069BB                 mov     r12, rax
.text:00000000000069BE                 mov     rdi, r15        ; s
.text:00000000000069C1                 call    _strlen
.text:00000000000069C6                 mov     r8, rax
.text:00000000000069C9                 lea     rax, [r12+rax]
.text:00000000000069CD                 cmp     [rbp+old], rax
.text:00000000000069D4                 mov     rsi, [rbp+s2]   ; s2
.text:00000000000069DB                 movzx   r9d, byte ptr [rbp+var_35C]
.text:00000000000069E3                 jz      loc_843E
.text:00000000000069E9
.text:00000000000069E9 loc_69E9:                               ; CODE XREF: copy_internal+D61↑j
.text:00000000000069E9                                         ; copy_internal+2841↓j ...
.text:00000000000069E9                 mov     edx, [rbx]
.text:00000000000069EB                 mov     rsi, [rbp+file]
.text:00000000000069F2                 mov     edi, 0FFFFFF9Ch
.text:00000000000069F7                 mov     byte ptr [rbp+old], r9b
.text:00000000000069FE                 call    backup_file_rename
.text:0000000000006A03                 test    rax, rax
.text:0000000000006A06                 mov     r12, rax
.text:0000000000006A09                 movzx   r9d, byte ptr [rbp+old]
.text:0000000000006A11                 jz      loc_8331
.text:0000000000006A17                 mov     rdi, rax        ; s
.text:0000000000006A1A                 mov     byte ptr [rbp+s2], r9b
.text:0000000000006A21                 mov     r14d, 1
.text:0000000000006A27                 call    _strlen
.text:0000000000006A2C                 lea     rdx, [rax+1]    ; n
.text:0000000000006A30                 add     rax, 1Fh
.text:0000000000006A34                 mov     rsi, r12        ; src
.text:0000000000006A37                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000006A3B                 mov     r15d, 11h
.text:0000000000006A41                 sub     rsp, rax
.text:0000000000006A44                 lea     rdi, [rsp+3C0h+var_3B1]
.text:0000000000006A49                 and     rdi, 0FFFFFFFFFFFFFFF0h ; dest
.text:0000000000006A4D                 call    _memcpy
.text:0000000000006A52                 mov     rdi, r12        ; ptr
.text:0000000000006A55                 mov     [rbp+old], rax
.text:0000000000006A5C                 call    free
.text:0000000000006A61                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000006A69                 jmp     loc_5FAE
.text:0000000000006A69 ; ---------------------------------------------------------------------------
.text:0000000000006A6E                 align 10h
.text:0000000000006A70
.text:0000000000006A70 loc_6A70:                               ; CODE XREF: copy_internal+87D↑j
.text:0000000000006A70                 cmp     byte ptr [rbx+16h], 0
.text:0000000000006A74                 jnz     loc_6E00
.text:0000000000006A7A
.text:0000000000006A7A loc_6A7A:                               ; CODE XREF: copy_internal+88C↑j
.text:0000000000006A7A                 mov     rsi, [rbp+file]
.text:0000000000006A81                 mov     edi, 4
.text:0000000000006A86                 mov     [rbp+filename], r9
.text:0000000000006A8D                 xor     r12d, r12d
.text:0000000000006A90                 call    quotearg_style
.text:0000000000006A95                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:0000000000006A9C                 mov     edx, 5          ; category
.text:0000000000006AA1                 xor     edi, edi        ; domainname
.text:0000000000006AA3                 mov     rbx, rax
.text:0000000000006AA6                 call    _dcgettext
.text:0000000000006AAB                 mov     r9, [rbp+filename]
.text:0000000000006AB2                 mov     rdx, rax        ; format
.text:0000000000006AB5                 mov     rcx, rbx
.text:0000000000006AB8                 xor     edi, edi        ; status
.text:0000000000006ABA                 xor     eax, eax
.text:0000000000006ABC                 mov     esi, [r9]       ; errnum
.text:0000000000006ABF                 call    _error
.text:0000000000006AC4                 jmp     loc_6466
.text:0000000000006AC4 ; ---------------------------------------------------------------------------
.text:0000000000006AC9                 align 10h
.text:0000000000006AD0
.text:0000000000006AD0 loc_6AD0:                               ; CODE XREF: copy_internal+33A↑j
.text:0000000000006AD0                 call    ___errno_location
.text:0000000000006AD5                 mov     r15d, [rax]
.text:0000000000006AD8                 jmp     loc_5CAB
.text:0000000000006AD8 ; ---------------------------------------------------------------------------
.text:0000000000006ADD                 align 20h
.text:0000000000006AE0
.text:0000000000006AE0 loc_6AE0:                               ; CODE XREF: copy_internal+534↑j
.text:0000000000006AE0                 mov     rax, [rbp+filename]
.text:0000000000006AE7                 cmp     byte ptr [rax], 2Fh ; '/'
.text:0000000000006AEA                 jz      short loc_6B24
.text:0000000000006AEC                 mov     rdi, [rbp+file]
.text:0000000000006AF3                 call    dir_name
.text:0000000000006AF8                 lea     r8, filename    ; "."
.text:0000000000006AFF                 mov     rdi, rax
.text:0000000000006B02                 mov     ecx, 2
.text:0000000000006B07                 mov     r12, rax
.text:0000000000006B0A                 mov     rsi, r8
.text:0000000000006B0D                 repe cmpsb
.text:0000000000006B0F                 setnbe  al
.text:0000000000006B12                 sbb     al, 0
.text:0000000000006B14                 test    al, al
.text:0000000000006B16                 jnz     loc_7DF8
.text:0000000000006B1C
.text:0000000000006B1C loc_6B1C:                               ; CODE XREF: copy_internal+21EE↓j
.text:0000000000006B1C                                         ; copy_internal+220A↓j ...
.text:0000000000006B1C                 mov     rdi, r12        ; ptr
.text:0000000000006B1F                 call    free
.text:0000000000006B24
.text:0000000000006B24 loc_6B24:                               ; CODE XREF: copy_internal+ECA↑j
.text:0000000000006B24                 movzx   ecx, byte ptr [rbx+16h]
.text:0000000000006B28                 mov     rdx, [rbp+file]
.text:0000000000006B2F                 mov     r8d, 0FFFFFFFFh
.text:0000000000006B35                 mov     rdi, [rbp+filename]
.text:0000000000006B3C                 mov     esi, 0FFFFFF9Ch
.text:0000000000006B41                 call    force_symlinkat
.text:0000000000006B46                 xor     r8d, r8d
.text:0000000000006B49                 test    eax, eax
.text:0000000000006B4B                 mov     r12d, eax
.text:0000000000006B4E                 jle     loc_619F
.text:0000000000006B54                 mov     rdx, [rbp+filename]
.text:0000000000006B5B                 mov     esi, 4
.text:0000000000006B60                 mov     edi, 1
.text:0000000000006B65                 call    quotearg_n_style
.text:0000000000006B6A                 mov     rdx, [rbp+file]
.text:0000000000006B71                 mov     esi, 4
.text:0000000000006B76                 xor     edi, edi
.text:0000000000006B78                 mov     r13, rax
.text:0000000000006B7B                 call    quotearg_n_style
.text:0000000000006B80                 lea     rsi, aCannotCreateSy ; "cannot create symbolic link %s to %s"
.text:0000000000006B87                 mov     r14, rax
.text:0000000000006B8A                 mov     edx, 5          ; category
.text:0000000000006B8F                 xor     edi, edi        ; domainname
.text:0000000000006B91                 call    _dcgettext
.text:0000000000006B96                 mov     r8, r13
.text:0000000000006B99                 mov     rdx, rax        ; format
.text:0000000000006B9C                 mov     rcx, r14
.text:0000000000006B9F                 mov     esi, r12d       ; errnum
.text:0000000000006BA2                 xor     edi, edi        ; status
.text:0000000000006BA4                 xor     eax, eax
.text:0000000000006BA6                 call    _error
.text:0000000000006BAB                 nop     dword ptr [rax+rax+00h]
.text:0000000000006BB0
.text:0000000000006BB0 loc_6BB0:                               ; CODE XREF: copy_internal+576↑j
.text:0000000000006BB0                                         ; copy_internal+BC0↑j ...
.text:0000000000006BB0                 cmp     byte ptr [rbx+25h], 0
.text:0000000000006BB4                 jnz     loc_6D30
.text:0000000000006BBA                 cmp     [rbp+s2], 0
.text:0000000000006BC2                 jz      loc_7460
.text:0000000000006BC8
.text:0000000000006BC8 loc_6BC8:                               ; CODE XREF: copy_internal+110A↓j
.text:0000000000006BC8                                         ; copy_internal+1853↓j
.text:0000000000006BC8                 mov     rax, [rbp+old]
.text:0000000000006BCF                 test    rax, rax
.text:0000000000006BD2                 jz      loc_5F30
.text:0000000000006BD8                 mov     rsi, [rbp+file] ; new
.text:0000000000006BDF                 mov     rdi, rax        ; old
.text:0000000000006BE2                 call    _rename
.text:0000000000006BE7                 test    eax, eax
.text:0000000000006BE9                 jnz     loc_7480
.text:0000000000006BEF                 cmp     byte ptr [rbx+2Eh], 0
.text:0000000000006BF3                 jz      loc_5F30
.text:0000000000006BF9                 mov     rdx, [rbp+file]
.text:0000000000006C00                 mov     esi, 4
.text:0000000000006C05                 mov     edi, 1
.text:0000000000006C0A                 call    quotearg_n_style
.text:0000000000006C0F                 mov     rdx, [rbp+old]
.text:0000000000006C16                 xor     edi, edi
.text:0000000000006C18                 mov     esi, 4
.text:0000000000006C1D                 mov     r12, rax
.text:0000000000006C20                 call    quotearg_n_style
.text:0000000000006C25                 lea     rsi, aSSUnbackup ; "%s -> %s (unbackup)\n"
.text:0000000000006C2C                 mov     rbx, rax
.text:0000000000006C2F                 xor     edi, edi        ; domainname
.text:0000000000006C31                 mov     edx, 5          ; category
.text:0000000000006C36                 call    _dcgettext
.text:0000000000006C3B                 mov     rcx, r12
.text:0000000000006C3E                 mov     rsi, rax
.text:0000000000006C41                 mov     rdx, rbx
.text:0000000000006C44                 mov     edi, 1
.text:0000000000006C49                 xor     eax, eax
.text:0000000000006C4B                 call    ___printf_chk
.text:0000000000006C50                 jmp     loc_5F30
.text:0000000000006C50 ; ---------------------------------------------------------------------------
.text:0000000000006C55                 align 8
.text:0000000000006C58
.text:0000000000006C58 loc_6C58:                               ; CODE XREF: copy_internal+3B4↑j
.text:0000000000006C58                 cmp     byte ptr [rbx+2Eh], 0
.text:0000000000006C5C                 jnz     loc_6630
.text:0000000000006C62                 test    r15d, r15d
.text:0000000000006C65                 jz      loc_60BB
.text:0000000000006C6B                 jmp     loc_6089
.text:0000000000006C70 ; ---------------------------------------------------------------------------
.text:0000000000006C70
.text:0000000000006C70 loc_6C70:                               ; CODE XREF: copy_internal+47F↑j
.text:0000000000006C70                 test    r13b, r13b
.text:0000000000006C73                 mov     rdx, [rbp+stat_buf.st_dev]
.text:0000000000006C7A                 mov     rdi, [rbp+stat_buf.st_ino]
.text:0000000000006C81                 jz      loc_7530
.text:0000000000006C87                 mov     rsi, rdi
.text:0000000000006C8A                 mov     rdi, [rbp+file] ; src
.text:0000000000006C91                 call    remember_copied
.text:0000000000006C96                 mov     [rbp+s2], rax
.text:0000000000006C9D
.text:0000000000006C9D loc_6C9D:                               ; CODE XREF: copy_internal+191F↓j
.text:0000000000006C9D                 cmp     [rbp+s2], 0
.text:0000000000006CA5                 jz      loc_71A0
.text:0000000000006CAB
.text:0000000000006CAB loc_6CAB:                               ; CODE XREF: copy_internal+1543↓j
.text:0000000000006CAB                 mov     rsi, [rbp+s2]
.text:0000000000006CB2                 mov     rdi, [rbp+filename]
.text:0000000000006CB9                 call    same_name
.text:0000000000006CBE                 test    al, al
.text:0000000000006CC0                 jz      loc_7C00
.text:0000000000006CC6                 mov     rdx, cs:top_level_dst_name
.text:0000000000006CCD                 mov     esi, 4
.text:0000000000006CD2                 mov     edi, 1
.text:0000000000006CD7                 call    quotearg_n_style
.text:0000000000006CDC                 mov     rdx, cs:top_level_src_name
.text:0000000000006CE3                 mov     esi, 4
.text:0000000000006CE8                 xor     edi, edi
.text:0000000000006CEA                 mov     r13, rax
.text:0000000000006CED                 call    quotearg_n_style
.text:0000000000006CF2                 lea     rsi, aCannotCopyADir ; "cannot copy a directory, %s, into itsel"...
.text:0000000000006CF9                 mov     r12, rax
.text:0000000000006CFC                 mov     edx, 5          ; category
.text:0000000000006D01                 xor     edi, edi        ; domainname
.text:0000000000006D03                 call    _dcgettext
.text:0000000000006D08                 mov     r8, r13
.text:0000000000006D0B                 mov     rdx, rax        ; format
.text:0000000000006D0E                 mov     rcx, r12
.text:0000000000006D11                 xor     eax, eax
.text:0000000000006D13                 xor     esi, esi        ; errnum
.text:0000000000006D15                 xor     edi, edi        ; status
.text:0000000000006D17                 call    _error
.text:0000000000006D1C                 mov     rax, [rbp+var_340]
.text:0000000000006D23                 mov     byte ptr [rax], 1
.text:0000000000006D26
.text:0000000000006D26 loc_6D26:                               ; CODE XREF: copy_internal+156E↓j
.text:0000000000006D26                                         ; copy_internal+206B↓j
.text:0000000000006D26                 cmp     byte ptr [rbx+25h], 0
.text:0000000000006D2A                 jz      loc_6BC8
.text:0000000000006D30
.text:0000000000006D30 loc_6D30:                               ; CODE XREF: copy_internal+305↑j
.text:0000000000006D30                                         ; copy_internal+F94↑j ...
.text:0000000000006D30                 call    restore_default_fscreatecon_or_die
.text:0000000000006D35                 nop     dword ptr [rax]
.text:0000000000006D38
.text:0000000000006D38 loc_6D38:                               ; CODE XREF: copy_internal+953↑j
.text:0000000000006D38                                         ; copy_internal+2074↓j
.text:0000000000006D38                 cmp     [rbp+stat_buf.st_nlink], 1
.text:0000000000006D40                 ja      loc_7128
.text:0000000000006D46                 test    r13b, r13b
.text:0000000000006D49                 mov     edx, [rbx+4]
.text:0000000000006D4C                 jz      short loc_6D57
.text:0000000000006D4E                 cmp     edx, 3
.text:0000000000006D51                 jz      loc_7128
.text:0000000000006D57
.text:0000000000006D57 loc_6D57:                               ; CODE XREF: copy_internal+112C↑j
.text:0000000000006D57                 cmp     edx, 4
.text:0000000000006D5A                 mov     [rbp+s2], 0
.text:0000000000006D65                 jz      loc_7128
.text:0000000000006D6B
.text:0000000000006D6B loc_6D6B:                               ; CODE XREF: copy_internal+1584↓j
.text:0000000000006D6B                 test    al, al
.text:0000000000006D6D                 jnz     loc_6579
.text:0000000000006D73
.text:0000000000006D73 loc_6D73:                               ; CODE XREF: copy_internal+2085↓j
.text:0000000000006D73                 movzx   eax, r14b
.text:0000000000006D77                 mov     [rbp+fildes], eax
.text:0000000000006D7D                 jmp     loc_60D0
.text:0000000000006D7D ; ---------------------------------------------------------------------------
.text:0000000000006D82                 align 8
.text:0000000000006D88
.text:0000000000006D88 loc_6D88:                               ; CODE XREF: copy_internal+999↑j
.text:0000000000006D88                 mov     rdx, [rbp+file]
.text:0000000000006D8F                 mov     esi, 4
.text:0000000000006D94                 mov     edi, 1
.text:0000000000006D99                 call    quotearg_n_style
.text:0000000000006D9E                 mov     rdx, [rbp+filename]
.text:0000000000006DA5                 mov     esi, 4
.text:0000000000006DAA                 xor     edi, edi
.text:0000000000006DAC                 mov     r12, rax
.text:0000000000006DAF                 call    quotearg_n_style
.text:0000000000006DB4                 lea     rsi, aCannotMoveSToS ; "cannot move %s to %s"
.text:0000000000006DBB                 mov     rbx, rax
.text:0000000000006DBE                 mov     edx, 5          ; category
.text:0000000000006DC3                 xor     edi, edi        ; domainname
.text:0000000000006DC5                 call    _dcgettext
.text:0000000000006DCA                 mov     r8, r12
.text:0000000000006DCD                 mov     rcx, rbx
.text:0000000000006DD0                 mov     rdx, rax        ; format
.text:0000000000006DD3                 mov     esi, r15d       ; errnum
.text:0000000000006DD6
.text:0000000000006DD6 loc_6DD6:                               ; CODE XREF: copy_internal+1A8C↓j
.text:0000000000006DD6                 xor     edi, edi        ; status
.text:0000000000006DD8                 xor     eax, eax
.text:0000000000006DDA                 call    _error
.text:0000000000006DDF                 mov     rsi, [rbp+stat_buf.st_dev]
.text:0000000000006DE6                 mov     rdi, [rbp+stat_buf.st_ino]
.text:0000000000006DED                 call    forget_created
.text:0000000000006DF2                 jmp     loc_5F30
.text:0000000000006DF2 ; ---------------------------------------------------------------------------
.text:0000000000006DF7                 align 20h
.text:0000000000006E00
.text:0000000000006E00 loc_6E00:                               ; CODE XREF: copy_internal+E54↑j
.text:0000000000006E00                 xor     r8d, r8d
.text:0000000000006E03                 jmp     loc_64B2
.text:0000000000006E03 ; ---------------------------------------------------------------------------
.text:0000000000006E08                 align 10h
.text:0000000000006E10
.text:0000000000006E10 loc_6E10:                               ; CODE XREF: copy_internal+2A2↑j
.text:0000000000006E10                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006E14                 jz      loc_685C
.text:0000000000006E1A                 nop     word ptr [rax+rax+00h]
.text:0000000000006E20
.text:0000000000006E20 loc_6E20:                               ; CODE XREF: copy_internal+C24↑j
.text:0000000000006E20                                         ; copy_internal+166A↓j
.text:0000000000006E20                 mov     eax, [rbx+8]
.text:0000000000006E23                 cmp     eax, 2
.text:0000000000006E26                 jz      short loc_6EA4
.text:0000000000006E28                 cmp     eax, 3
.text:0000000000006E2B                 jz      short loc_6E78
.text:0000000000006E2D                 cmp     eax, 4
.text:0000000000006E30                 jnz     loc_68B0
.text:0000000000006E36                 cmp     byte ptr [rbx+2Fh], 0
.text:0000000000006E3A                 jz      loc_68B0
.text:0000000000006E40                 mov     esi, [rbp+var_1F0.st_mode]
.text:0000000000006E46                 mov     rdi, [rbp+file] ; name
.text:0000000000006E4D                 mov     byte ptr [rbp+s2], r9b
.text:0000000000006E54                 mov     byte ptr [rbp+old], r8b
.text:0000000000006E5B                 call    writable_destination
.text:0000000000006E60                 test    al, al
.text:0000000000006E62                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000006E6A                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000006E72                 jnz     loc_68B0
.text:0000000000006E78
.text:0000000000006E78 loc_6E78:                               ; CODE XREF: copy_internal+120B↑j
.text:0000000000006E78                 mov     rsi, [rbp+file]
.text:0000000000006E7F                 lea     rdx, [rbp+var_1F0.st_mode]
.text:0000000000006E86                 mov     rdi, rbx
.text:0000000000006E89                 mov     byte ptr [rbp+s2], r9b
.text:0000000000006E90                 mov     byte ptr [rbp+old], r8b
.text:0000000000006E97                 call    overwrite_ok_isra_12
.text:0000000000006E9C                 test    al, al
.text:0000000000006E9E                 jnz     loc_82B0
.text:0000000000006EA4
.text:0000000000006EA4 loc_6EA4:                               ; CODE XREF: copy_internal+1206↑j
.text:0000000000006EA4                                         ; copy_internal+2706↓j
.text:0000000000006EA4                 cmp     qword ptr [rbp+fildes], 0
.text:0000000000006EAC                 jz      loc_6460
.text:0000000000006EB2                 mov     rax, qword ptr [rbp+fildes]
.text:0000000000006EB9                 mov     byte ptr [rax], 1
.text:0000000000006EBC                 jmp     loc_6460
.text:0000000000006EBC ; ---------------------------------------------------------------------------
.text:0000000000006EC1                 align 8
.text:0000000000006EC8
.text:0000000000006EC8 loc_6EC8:                               ; CODE XREF: copy_internal+836↑j
.text:0000000000006EC8                 mov     rdi, [rbx+40h]
.text:0000000000006ECC                 mov     rsi, [rbp+file]
.text:0000000000006ED3                 lea     rdx, [rbp+stat_buf]
.text:0000000000006EDA                 mov     r12d, r13d
.text:0000000000006EDD                 call    record_file
.text:0000000000006EE2                 jmp     loc_6466
.text:0000000000006EE2 ; ---------------------------------------------------------------------------
.text:0000000000006EE7                 align 10h
.text:0000000000006EF0
.text:0000000000006EF0 loc_6EF0:                               ; CODE XREF: copy_internal+CBB↑j
.text:0000000000006EF0                 cmp     r12d, 4000h
.text:0000000000006EF7                 jz      loc_7410
.text:0000000000006EFD
.text:0000000000006EFD loc_6EFD:                               ; CODE XREF: copy_internal+17EA↓j
.text:0000000000006EFD                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006F01                 jz      short loc_6F0F
.text:0000000000006F03                 mov     r15d, [rbx]
.text:0000000000006F06                 test    r15d, r15d
.text:0000000000006F09                 jnz     loc_7BA7
.text:0000000000006F0F
.text:0000000000006F0F loc_6F0F:                               ; CODE XREF: copy_internal+12E1↑j
.text:0000000000006F0F                 mov     rsi, [rbp+file]
.text:0000000000006F16                 mov     edi, 4
.text:0000000000006F1B                 xor     r12d, r12d
.text:0000000000006F1E                 call    quotearg_style
.text:0000000000006F23                 lea     rsi, aCannotOverwrit ; "cannot overwrite directory %s with non-"...
.text:0000000000006F2A                 mov     rbx, rax
.text:0000000000006F2D                 mov     edx, 5          ; category
.text:0000000000006F32                 xor     edi, edi        ; domainname
.text:0000000000006F34                 call    _dcgettext
.text:0000000000006F39                 mov     rcx, rbx
.text:0000000000006F3C                 mov     rdx, rax        ; format
.text:0000000000006F3F                 xor     esi, esi        ; errnum
.text:0000000000006F41                 xor     edi, edi        ; status
.text:0000000000006F43                 xor     eax, eax
.text:0000000000006F45                 call    _error
.text:0000000000006F4A                 jmp     loc_6466
.text:0000000000006F4A ; ---------------------------------------------------------------------------
.text:0000000000006F4F                 align 10h
.text:0000000000006F50
.text:0000000000006F50 loc_6F50:                               ; CODE XREF: copy_internal+4EE↑j
.text:0000000000006F50                 mov     ecx, [rbp+fildes]
.text:0000000000006F56                 mov     edx, [rbp+var_314]
.text:0000000000006F5C                 mov     r8, rbx
.text:0000000000006F5F                 mov     rsi, [rbp+file]
.text:0000000000006F66                 mov     rdi, [rbp+filename]
.text:0000000000006F6D                 call    set_process_security_ctx
.text:0000000000006F72                 test    al, al
.text:0000000000006F74                 jz      loc_5F30
.text:0000000000006F7A                 mov     eax, r12d
.text:0000000000006F7D                 and     eax, 12h
.text:0000000000006F80                 mov     [rbp+var_35C], eax
.text:0000000000006F86                 jmp     loc_6769
.text:0000000000006F86 ; ---------------------------------------------------------------------------
.text:0000000000006F8B                 align 10h
.text:0000000000006F90
.text:0000000000006F90 loc_6F90:                               ; CODE XREF: copy_internal+818↑j
.text:0000000000006F90                 mov     rdi, [rbp+file]
.text:0000000000006F97                 mov     rcx, rbx
.text:0000000000006F9A                 mov     edx, 1
.text:0000000000006F9F                 xor     esi, esi
.text:0000000000006FA1                 call    set_file_security_ctx
.text:0000000000006FA6                 jmp     loc_643E
.text:0000000000006FA6 ; ---------------------------------------------------------------------------
.text:0000000000006FAB                 align 10h
.text:0000000000006FB0
.text:0000000000006FB0 loc_6FB0:                               ; CODE XREF: copy_internal+80E↑j
.text:0000000000006FB0                 lea     rsi, aRenamed   ; "renamed "
.text:0000000000006FB7                 mov     edx, 5          ; category
.text:0000000000006FBC                 xor     edi, edi        ; domainname
.text:0000000000006FBE                 call    _dcgettext
.text:0000000000006FC3                 mov     edi, 1
.text:0000000000006FC8                 mov     rsi, rax
.text:0000000000006FCB                 xor     eax, eax
.text:0000000000006FCD                 call    ___printf_chk
.text:0000000000006FD2                 mov     rdx, [rbp+old]
.text:0000000000006FD9                 mov     rsi, [rbp+file]
.text:0000000000006FE0                 mov     rdi, [rbp+filename]
.text:0000000000006FE7                 call    emit_verbose
.text:0000000000006FEC                 jmp     loc_6434
.text:0000000000006FEC ; ---------------------------------------------------------------------------
.text:0000000000006FF1                 align 8
.text:0000000000006FF8
.text:0000000000006FF8 loc_6FF8:                               ; CODE XREF: copy_internal+20F↑j
.text:0000000000006FF8                 mov     rax, [rbp+var_1F0.st_dev]
.text:0000000000006FFF                 cmp     [rbp+stat_buf.st_dev], rax
.text:0000000000007006                 jnz     loc_5E35
.text:000000000000700C                 movzx   eax, byte ptr [rbx+17h]
.text:0000000000007010                 test    al, al
.text:0000000000007012                 jnz     loc_73A8
.text:0000000000007018                 cmp     dword ptr [rbx+4], 2
.text:000000000000701C                 mov     ecx, 1
.text:0000000000007021                 mov     r15d, 1
.text:0000000000007027                 jz      loc_71B5
.text:000000000000702D                 lea     r12, [rbp+var_160]
.text:0000000000007034                 mov     rsi, [rbp+file] ; filename
.text:000000000000703B                 mov     edi, 1          ; ver
.text:0000000000007040                 mov     byte ptr [rbp+s2], r9b
.text:0000000000007047                 mov     byte ptr [rbp+old], r8b
.text:000000000000704E                 mov     rdx, r12        ; stat_buf
.text:0000000000007051                 call    ___lxstat
.text:0000000000007056                 test    eax, eax
.text:0000000000007058                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000007060                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000007068                 jz      loc_8072
.text:000000000000706E
.text:000000000000706E loc_706E:                               ; CODE XREF: copy_internal+15C8↓j
.text:000000000000706E                                         ; copy_internal+15D2↓j ...
.text:000000000000706E                 xor     r14d, r14d
.text:0000000000007071                 jmp     loc_5E3F
.text:0000000000007071 ; ---------------------------------------------------------------------------
.text:0000000000007076                 align 20h
.text:0000000000007080
.text:0000000000007080 loc_7080:                               ; CODE XREF: copy_internal+B63↑j
.text:0000000000007080                                         ; copy_internal+B76↑j
.text:0000000000007080                 sub     rsp, 30h
.text:0000000000007084                 mov     rsi, [rbp+ptr]
.text:000000000000708B                 lea     rax, [rsp+3F0h+var_3E1]
.text:0000000000007090                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000007094                 test    r14b, r14b
.text:0000000000007097                 mov     qword ptr [rbp+fd], rax
.text:000000000000709E                 mov     [rax], rsi
.text:00000000000070A1                 mov     [rax+8], rdx
.text:00000000000070A5                 mov     [rax+10h], rcx
.text:00000000000070A9                 jnz     short loc_70C1
.text:00000000000070AB                 mov     eax, [rbp+var_1F0.st_mode]
.text:00000000000070B1                 and     eax, 0F000h
.text:00000000000070B6                 cmp     eax, 4000h
.text:00000000000070BB                 jz      loc_8118
.text:00000000000070C1
.text:00000000000070C1 loc_70C1:                               ; CODE XREF: copy_internal+1489↑j
.text:00000000000070C1                 mov     esi, [rbp+var_35C]
.text:00000000000070C7                 mov     r15, [rbp+file]
.text:00000000000070CE                 not     esi
.text:00000000000070D0                 mov     rdi, r15        ; path
.text:00000000000070D3                 and     esi, r12d       ; mode
.text:00000000000070D6                 call    _mkdir
.text:00000000000070DB                 test    eax, eax
.text:00000000000070DD                 jz      loc_78A0
.text:00000000000070E3                 mov     rsi, r15
.text:00000000000070E6                 mov     edi, 4
.text:00000000000070EB                 call    quotearg_style
.text:00000000000070F0                 lea     rsi, aCannotCreateDi ; "cannot create directory %s"
.text:00000000000070F7                 mov     r13, rax
.text:00000000000070FA                 mov     edx, 5          ; category
.text:00000000000070FF
.text:00000000000070FF loc_70FF:                               ; CODE XREF: copy_internal+261B↓j
.text:00000000000070FF                                         ; copy_internal+26C5↓j ...
.text:00000000000070FF                 xor     edi, edi        ; domainname
.text:0000000000007101                 call    _dcgettext
.text:0000000000007106                 mov     r12, rax
.text:0000000000007109                 call    ___errno_location
.text:000000000000710E                 mov     esi, [rax]      ; errnum
.text:0000000000007110                 mov     rcx, r13
.text:0000000000007113                 mov     rdx, r12        ; format
.text:0000000000007116                 xor     edi, edi        ; status
.text:0000000000007118                 xor     eax, eax
.text:000000000000711A                 call    _error
.text:000000000000711F                 jmp     loc_6BB0
.text:000000000000711F ; ---------------------------------------------------------------------------
.text:0000000000007124                 align 8
.text:0000000000007128
.text:0000000000007128 loc_7128:                               ; CODE XREF: copy_internal+1120↑j
.text:0000000000007128                                         ; copy_internal+1131↑j ...
.text:0000000000007128                 mov     rdx, [rbp+stat_buf.st_dev]
.text:000000000000712F                 mov     rsi, [rbp+stat_buf.st_ino]
.text:0000000000007136                 mov     rdi, [rbp+file] ; src
.text:000000000000713D                 call    remember_copied
.text:0000000000007142                 mov     [rbp+s2], rax
.text:0000000000007149
.text:0000000000007149 loc_7149:                               ; CODE XREF: copy_internal+1982↓j
.text:0000000000007149                 cmp     [rbp+s2], 0
.text:0000000000007151                 jz      short loc_71A0
.text:0000000000007153                 mov     eax, [rbp+var_314]
.text:0000000000007159                 and     eax, 0F000h
.text:000000000000715E                 cmp     eax, 4000h
.text:0000000000007163                 jz      loc_6CAB
.text:0000000000007169                 movzx   ecx, byte ptr [rbx+2Eh]
.text:000000000000716D                 mov     r8d, [rbp+fd]
.text:0000000000007174                 mov     edx, 1
.text:0000000000007179                 mov     rsi, [rbp+file]
.text:0000000000007180                 mov     rdi, [rbp+s2]
.text:0000000000007187                 call    create_hard_link
.text:000000000000718C                 test    al, al
.text:000000000000718E                 jz      loc_6D26
.text:0000000000007194                 jmp     loc_6460
.text:0000000000007194 ; ---------------------------------------------------------------------------
.text:0000000000007199                 align 20h
.text:00000000000071A0
.text:00000000000071A0 loc_71A0:                               ; CODE XREF: copy_internal+1085↑j
.text:00000000000071A0                                         ; copy_internal+1531↑j ...
.text:00000000000071A0                 movzx   eax, byte ptr [rbx+18h]
.text:00000000000071A4                 jmp     loc_6D6B
.text:00000000000071A4 ; ---------------------------------------------------------------------------
.text:00000000000071A9                 align 10h
.text:00000000000071B0
.text:00000000000071B0 loc_71B0:                               ; CODE XREF: copy_internal+219↑j
.text:00000000000071B0                 xor     ecx, ecx
.text:00000000000071B2                 xor     r15d, r15d
.text:00000000000071B5
.text:00000000000071B5 loc_71B5:                               ; CODE XREF: copy_internal+1407↑j
.text:00000000000071B5                 mov     eax, [rbp+stat_buf.st_mode]
.text:00000000000071BB                 lea     rdx, [rbp+stat_buf]
.text:00000000000071C2                 and     eax, 0F000h
.text:00000000000071C7                 cmp     eax, 0A000h
.text:00000000000071CC                 jz      loc_7E73
.text:00000000000071D2
.text:00000000000071D2 loc_71D2:                               ; CODE XREF: copy_internal+226A↓j
.text:00000000000071D2                                         ; copy_internal+24C6↓j ...
.text:00000000000071D2                 mov     esi, [rbx]
.text:00000000000071D4                 test    esi, esi
.text:00000000000071D6                 jz      loc_76B8
.text:00000000000071DC                 test    cl, cl
.text:00000000000071DE                 jnz     loc_8272
.text:00000000000071E4                 cmp     byte ptr [rbx+18h], 0
.text:00000000000071E8                 jnz     loc_706E
.text:00000000000071EE                 cmp     dword ptr [rbx+4], 2
.text:00000000000071F2                 jz      loc_706E
.text:00000000000071F8                 mov     eax, [rdx+18h]
.text:00000000000071FB                 and     eax, 0F000h
.text:0000000000007200                 cmp     eax, 0A000h
.text:0000000000007205                 jnz     loc_706E
.text:000000000000720B                 mov     eax, [r12+18h]
.text:0000000000007210                 and     eax, 0F000h
.text:0000000000007215                 cmp     eax, 0A000h
.text:000000000000721A                 jz      loc_706E
.text:0000000000007220
.text:0000000000007220 loc_7220:                               ; CODE XREF: copy_internal+177F↓j
.text:0000000000007220                                         ; copy_internal+1AE1↓j ...
.text:0000000000007220                 mov     rdx, [rbp+file]
.text:0000000000007227                 mov     esi, 4
.text:000000000000722C                 mov     edi, 1
.text:0000000000007231                 call    quotearg_n_style
.text:0000000000007236                 mov     rdx, [rbp+filename]
.text:000000000000723D                 mov     esi, 4
.text:0000000000007242                 xor     edi, edi
.text:0000000000007244                 mov     r12, rax
.text:0000000000007247                 call    quotearg_n_style
.text:000000000000724C                 lea     rsi, aSAndSAreTheSam ; "%s and %s are the same file"
.text:0000000000007253                 mov     rbx, rax
.text:0000000000007256                 mov     edx, 5          ; category
.text:000000000000725B
.text:000000000000725B loc_725B:                               ; CODE XREF: copy_internal+23B6↓j
.text:000000000000725B                                         ; copy_internal+25A7↓j ...
.text:000000000000725B                 xor     edi, edi        ; domainname
.text:000000000000725D                 call    _dcgettext
.text:0000000000007262                 mov     r8, r12
.text:0000000000007265                 mov     rdx, rax        ; format
.text:0000000000007268                 mov     rcx, rbx
.text:000000000000726B                 xor     esi, esi        ; errnum
.text:000000000000726D                 xor     edi, edi        ; status
.text:000000000000726F                 xor     eax, eax
.text:0000000000007271                 call    _error
.text:0000000000007276                 jmp     loc_5F30
.text:0000000000007276 ; ---------------------------------------------------------------------------
.text:000000000000727B                 align 20h
.text:0000000000007280
.text:0000000000007280 loc_7280:                               ; CODE XREF: copy_internal+239↑j
.text:0000000000007280                 cmp     byte ptr [rbx+18h], 0
.text:0000000000007284                 jz      loc_68B0
.text:000000000000728A                 jmp     loc_6E20
.text:000000000000728A ; ---------------------------------------------------------------------------
.text:000000000000728F                 align 10h
.text:0000000000007290
.text:0000000000007290 loc_7290:                               ; CODE XREF: copy_internal+1A9F↓j
.text:0000000000007290                                         ; copy_internal+1AA9↓j
.text:0000000000007290                 mov     eax, [r12+18h]
.text:0000000000007295                 and     eax, 0F000h
.text:000000000000729A                 cmp     eax, 0A000h
.text:000000000000729F                 jz      loc_5E3F
.text:00000000000072A5                 test    cl, cl
.text:00000000000072A7                 jz      short loc_72B5
.text:00000000000072A9                 cmp     qword ptr [r12+10h], 1
.text:00000000000072AF                 ja      loc_866B
.text:00000000000072B5
.text:00000000000072B5 loc_72B5:                               ; CODE XREF: copy_internal+1687↑j
.text:00000000000072B5                 mov     eax, [rdx+18h]
.text:00000000000072B8                 and     eax, 0F000h
.text:00000000000072BD                 cmp     eax, 0A000h
.text:00000000000072C2                 jz      short loc_72F0
.text:00000000000072C4
.text:00000000000072C4 loc_72C4:                               ; CODE XREF: copy_internal+2ABA↓j
.text:00000000000072C4                 mov     rax, [r12+8]
.text:00000000000072C9                 cmp     [rdx+8], rax
.text:00000000000072CD                 jnz     loc_5E3F
.text:00000000000072D3                 mov     rax, [r12]
.text:00000000000072D7                 cmp     [rdx], rax
.text:00000000000072DA                 jnz     loc_5E3F
.text:00000000000072E0                 movzx   eax, byte ptr [rbx+17h]
.text:00000000000072E4                 test    al, al
.text:00000000000072E6                 jnz     loc_73A8
.text:00000000000072EC
.text:00000000000072EC loc_72EC:                               ; CODE XREF: copy_internal+2A9F↓j
.text:00000000000072EC                                         ; copy_internal+2AB4↓j
.text:00000000000072EC                 movzx   esi, byte ptr [rbx+18h]
.text:00000000000072F0
.text:00000000000072F0 loc_72F0:                               ; CODE XREF: copy_internal+16A2↑j
.text:00000000000072F0                 test    sil, sil
.text:00000000000072F3                 jz      loc_76E2
.text:00000000000072F9                 mov     eax, [rbp+stat_buf.st_mode]
.text:00000000000072FF                 and     eax, 0F000h
.text:0000000000007304                 cmp     eax, 0A000h
.text:0000000000007309                 jnz     loc_76E2
.text:000000000000730F                 cmp     qword ptr [r12+10h], 1
.text:0000000000007315                 jbe     loc_76E2
.text:000000000000731B                 mov     rdi, [rbp+filename] ; name
.text:0000000000007322                 mov     byte ptr [rbp+var_35C], r9b
.text:0000000000007329                 mov     byte ptr [rbp+s2], r8b
.text:0000000000007330                 mov     [rbp+old], rdx
.text:0000000000007337                 call    _canonicalize_file_name
.text:000000000000733C                 test    rax, rax
.text:000000000000733F                 mov     r15, rax
.text:0000000000007342                 mov     rdx, [rbp+old]
.text:0000000000007349                 movzx   r8d, byte ptr [rbp+s2]
.text:0000000000007351                 movzx   r9d, byte ptr [rbp+var_35C]
.text:0000000000007359                 jz      loc_76E2
.text:000000000000735F                 mov     rsi, [rbp+file]
.text:0000000000007366                 mov     rdi, rax
.text:0000000000007369                 mov     byte ptr [rbp+s2], r9b
.text:0000000000007370                 mov     byte ptr [rbp+old], r8b
.text:0000000000007377                 call    same_name
.text:000000000000737C                 mov     rdi, r15        ; ptr
.text:000000000000737F                 xor     eax, 1
.text:0000000000007382                 mov     r12d, eax
.text:0000000000007385                 call    free
.text:000000000000738A                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000007392                 movzx   r9d, byte ptr [rbp+s2]
.text:000000000000739A                 xor     eax, eax
.text:000000000000739C
.text:000000000000739C loc_739C:                               ; CODE XREF: copy_internal+22CA↓j
.text:000000000000739C                                         ; copy_internal+268B↓j ...
.text:000000000000739C                 test    r12b, r12b
.text:000000000000739F                 jz      loc_7220
.text:00000000000073A5                 nop     dword ptr [rax]
.text:00000000000073A8
.text:00000000000073A8 loc_73A8:                               ; CODE XREF: copy_internal+13F2↑j
.text:00000000000073A8                                         ; copy_internal+16C6↑j
.text:00000000000073A8                 mov     r14d, eax
.text:00000000000073AB                 jmp     loc_5E3F
.text:00000000000073B0 ; ---------------------------------------------------------------------------
.text:00000000000073B0
.text:00000000000073B0 loc_73B0:                               ; CODE XREF: copy_internal+CDE↑j
.text:00000000000073B0                 mov     rdi, [rbx+40h]
.text:00000000000073B4                 mov     rsi, [rbp+file]
.text:00000000000073BB                 lea     rdx, [rbp+var_1F0]
.text:00000000000073C2                 mov     byte ptr [rbp+s2], r9b
.text:00000000000073C9                 mov     byte ptr [rbp+old], r8b
.text:00000000000073D0                 call    seen_file
.text:00000000000073D5                 test    al, al
.text:00000000000073D7                 movzx   r8d, byte ptr [rbp+old]
.text:00000000000073DF                 movzx   r9d, byte ptr [rbp+s2]
.text:00000000000073E7                 jnz     loc_8735
.text:00000000000073ED                 cmp     r12d, 4000h
.text:00000000000073F4                 jz      short loc_7410
.text:00000000000073F6                 mov     eax, [rbp+var_1F0.st_mode]
.text:00000000000073FC                 mov     edx, eax
.text:00000000000073FE                 and     edx, 0F000h
.text:0000000000007404                 cmp     edx, 4000h
.text:000000000000740A                 jz      loc_6EFD
.text:0000000000007410
.text:0000000000007410 loc_7410:                               ; CODE XREF: copy_internal+12D7↑j
.text:0000000000007410                                         ; copy_internal+17D4↑j
.text:0000000000007410                 mov     r15d, [rbx]
.text:0000000000007413
.text:0000000000007413 loc_7413:                               ; CODE XREF: copy_internal+CD4↑j
.text:0000000000007413                 movzx   eax, byte ptr [rbx+18h]
.text:0000000000007417                 test    al, al
.text:0000000000007419                 jnz     loc_7DD0
.text:000000000000741F                 test    r15d, r15d
.text:0000000000007422                 jnz     loc_690E
.text:0000000000007428
.text:0000000000007428 loc_7428:                               ; CODE XREF: copy_internal+D34↑j
.text:0000000000007428                                         ; copy_internal+D3D↑j
.text:0000000000007428                 mov     edx, [rbp+var_1F0.st_mode]
.text:000000000000742E                 and     edx, 0F000h
.text:0000000000007434                 cmp     edx, 4000h
.text:000000000000743A                 setz    r12b
.text:000000000000743E                 or      r12b, al
.text:0000000000007441                 jz      loc_7FDB
.text:0000000000007447
.text:0000000000007447 loc_7447:                               ; CODE XREF: copy_internal+D57↑j
.text:0000000000007447                                         ; copy_internal+21C9↓j ...
.text:0000000000007447                 mov     r14d, r8d
.text:000000000000744A                 mov     r15d, 11h
.text:0000000000007450                 mov     [rbp+old], 0
.text:000000000000745B                 jmp     loc_5FAE
.text:0000000000007460 ; ---------------------------------------------------------------------------
.text:0000000000007460
.text:0000000000007460 loc_7460:                               ; CODE XREF: copy_internal+FA2↑j
.text:0000000000007460                 mov     rsi, [rbp+stat_buf.st_dev]
.text:0000000000007467                 mov     rdi, [rbp+stat_buf.st_ino]
.text:000000000000746E                 call    forget_created
.text:0000000000007473                 jmp     loc_6BC8
.text:0000000000007473 ; ---------------------------------------------------------------------------
.text:0000000000007478                 align 20h
.text:0000000000007480
.text:0000000000007480 loc_7480:                               ; CODE XREF: copy_internal+FC9↑j
.text:0000000000007480                 mov     rsi, [rbp+file]
.text:0000000000007487                 mov     edi, 4
.text:000000000000748C                 call    quotearg_style
.text:0000000000007491                 mov     edx, 5
.text:0000000000007496                 mov     r12, rax
.text:0000000000007499                 lea     rsi, aCannotUnBackup ; "cannot un-backup %s"
.text:00000000000074A0                 jmp     loc_651E
.text:00000000000074A0 ; ---------------------------------------------------------------------------
.text:00000000000074A5                 align 8
.text:00000000000074A8
.text:00000000000074A8 loc_74A8:                               ; CODE XREF: copy_internal+53E↑j
.text:00000000000074A8                 cmp     r15d, 8000h
.text:00000000000074AF                 jz      loc_7CB0
.text:00000000000074B5                 cmp     r15d, 0A000h
.text:00000000000074BC                 setnz   r8b
.text:00000000000074C0                 and     r8b, [rbx+14h]
.text:00000000000074C4                 jnz     loc_7CB0
.text:00000000000074CA                 cmp     r15d, 1000h
.text:00000000000074D1                 jz      loc_8592
.text:00000000000074D7                 mov     eax, r15d
.text:00000000000074DA                 and     ah, 0BFh
.text:00000000000074DD                 cmp     eax, 2000h
.text:00000000000074E2                 jz      loc_81CC
.text:00000000000074E8                 cmp     r15d, 0C000h
.text:00000000000074EF                 jz      loc_81CC
.text:00000000000074F5                 cmp     r15d, 0A000h
.text:00000000000074FC                 jz      loc_8880
.text:0000000000007502                 mov     rsi, [rbp+filename]
.text:0000000000007509                 mov     edi, 4
.text:000000000000750E                 call    quotearg_style
.text:0000000000007513                 mov     edx, 5
.text:0000000000007518                 mov     r12, rax
.text:000000000000751B                 lea     rsi, aSHasUnknownFil ; "%s has unknown file type"
.text:0000000000007522                 jmp     loc_67C8
.text:0000000000007522 ; ---------------------------------------------------------------------------
.text:0000000000007527                 align 10h
.text:0000000000007530
.text:0000000000007530 loc_7530:                               ; CODE XREF: copy_internal+1061↑j
.text:0000000000007530                 mov     rsi, rdx
.text:0000000000007533                 call    src_to_dest_lookup
.text:0000000000007538                 mov     [rbp+s2], rax
.text:000000000000753F                 jmp     loc_6C9D
.text:000000000000753F ; ---------------------------------------------------------------------------
.text:0000000000007544                 align 8
.text:0000000000007548
.text:0000000000007548 loc_7548:                               ; CODE XREF: copy_internal+A63↑j
.text:0000000000007548                 mov     rsi, [rbp+filename]
.text:000000000000754F                 mov     edi, 4
.text:0000000000007554                 call    quotearg_style
.text:0000000000007559                 lea     rsi, aWarningSourceF ; "warning: source file %s specified more "...
.text:0000000000007560                 mov     rbx, rax
.text:0000000000007563                 xor     edi, edi        ; domainname
.text:0000000000007565                 mov     edx, 5          ; category
.text:000000000000756A                 call    _dcgettext
.text:000000000000756F                 mov     rcx, rbx
.text:0000000000007572                 mov     rdx, rax        ; format
.text:0000000000007575                 xor     esi, esi        ; errnum
.text:0000000000007577                 xor     edi, edi        ; status
.text:0000000000007579                 xor     eax, eax
.text:000000000000757B                 call    _error
.text:0000000000007580                 jmp     loc_6466
.text:0000000000007580 ; ---------------------------------------------------------------------------
.text:0000000000007585                 align 8
.text:0000000000007588
.text:0000000000007588 loc_7588:                               ; CODE XREF: copy_internal+938↑j
.text:0000000000007588                 mov     rsi, [rbp+stat_buf.st_dev]
.text:000000000000758F                 mov     rdi, [rbp+stat_buf.st_ino]
.text:0000000000007596                 call    src_to_dest_lookup
.text:000000000000759B                 mov     [rbp+s2], rax
.text:00000000000075A2                 jmp     loc_7149
.text:00000000000075A2 ; ---------------------------------------------------------------------------
.text:00000000000075A7                 align 10h
.text:00000000000075B0
.text:00000000000075B0 loc_75B0:                               ; CODE XREF: copy_internal+BF3↑j
.text:00000000000075B0                 lea     rsi, aOmittingDirect ; "omitting directory %s"
.text:00000000000075B7                 xor     edi, edi        ; domainname
.text:00000000000075B9                 call    _dcgettext
.text:00000000000075BE                 mov     rdx, rax
.text:00000000000075C1                 jmp     loc_682A
.text:00000000000075C1 ; ---------------------------------------------------------------------------
.text:00000000000075C6                 align 10h
.text:00000000000075D0
.text:00000000000075D0 loc_75D0:                               ; CODE XREF: copy_internal+98F↑j
.text:00000000000075D0                 mov     rdx, cs:top_level_dst_name
.text:00000000000075D7                 mov     esi, 4
.text:00000000000075DC                 mov     edi, 1
.text:00000000000075E1                 call    quotearg_n_style
.text:00000000000075E6                 mov     rdx, cs:top_level_src_name
.text:00000000000075ED                 mov     esi, 4
.text:00000000000075F2                 xor     edi, edi
.text:00000000000075F4                 mov     r12, rax
.text:00000000000075F7                 call    quotearg_n_style
.text:00000000000075FC                 lea     rsi, aCannotMoveSToA ; "cannot move %s to a subdirectory of its"...
.text:0000000000007603                 mov     rbx, rax
.text:0000000000007606                 mov     edx, 5          ; category
.text:000000000000760B                 xor     edi, edi        ; domainname
.text:000000000000760D                 call    _dcgettext
.text:0000000000007612                 mov     r8, r12
.text:0000000000007615                 mov     rdx, rax        ; format
.text:0000000000007618                 mov     rcx, rbx
.text:000000000000761B                 xor     eax, eax
.text:000000000000761D                 xor     esi, esi        ; errnum
.text:000000000000761F                 xor     edi, edi        ; status
.text:0000000000007621                 call    _error
.text:0000000000007626                 mov     rax, [rbp+var_340]
.text:000000000000762D                 mov     r12d, 1
.text:0000000000007633                 mov     byte ptr [rax], 1
.text:0000000000007636                 jmp     loc_6466
.text:0000000000007636 ; ---------------------------------------------------------------------------
.text:000000000000763B                 align 20h
.text:0000000000007640
.text:0000000000007640 loc_7640:                               ; CODE XREF: copy_internal+9BB↑j
.text:0000000000007640                 call    _rmdir
.text:0000000000007645                 test    eax, eax
.text:0000000000007647                 jz      loc_6611
.text:000000000000764D                 call    ___errno_location
.text:0000000000007652                 cmp     dword ptr [rax], 2
.text:0000000000007655                 mov     r14, rax
.text:0000000000007658                 jz      loc_6611
.text:000000000000765E
.text:000000000000765E loc_765E:                               ; CODE XREF: copy_internal+9D5↑j
.text:000000000000765E                 mov     rdx, [rbp+file]
.text:0000000000007665                 mov     esi, 4
.text:000000000000766A                 mov     edi, 1
.text:000000000000766F                 call    quotearg_n_style
.text:0000000000007674                 mov     rdx, [rbp+filename]
.text:000000000000767B                 mov     esi, 4
.text:0000000000007680                 xor     edi, edi
.text:0000000000007682                 mov     r12, rax
.text:0000000000007685                 call    quotearg_n_style
.text:000000000000768A                 lea     rsi, aInterDeviceMov ; "inter-device move failed: %s to %s; una"...
.text:0000000000007691                 mov     rbx, rax
.text:0000000000007694                 mov     edx, 5          ; category
.text:0000000000007699                 xor     edi, edi        ; domainname
.text:000000000000769B                 call    _dcgettext
.text:00000000000076A0                 mov     r8, r12
.text:00000000000076A3                 mov     rcx, rbx
.text:00000000000076A6                 mov     rdx, rax
.text:00000000000076A9                 mov     esi, [r14]
.text:00000000000076AC                 jmp     loc_6DD6
.text:00000000000076AC ; ---------------------------------------------------------------------------
.text:00000000000076B1                 align 8
.text:00000000000076B8
.text:00000000000076B8 loc_76B8:                               ; CODE XREF: copy_internal+15B6↑j
.text:00000000000076B8                 movzx   esi, byte ptr [rbx+18h]
.text:00000000000076BC                 test    sil, sil
.text:00000000000076BF                 jnz     loc_7290
.text:00000000000076C5                 cmp     byte ptr [rbx+15h], 0
.text:00000000000076C9                 jnz     loc_7290
.text:00000000000076CF                 mov     eax, [rdx+18h]
.text:00000000000076D2                 and     eax, 0F000h
.text:00000000000076D7                 cmp     eax, 0A000h
.text:00000000000076DC                 jnz     loc_86C5
.text:00000000000076E2
.text:00000000000076E2 loc_76E2:                               ; CODE XREF: copy_internal+16D3↑j
.text:00000000000076E2                                         ; copy_internal+16E9↑j ...
.text:00000000000076E2                 cmp     byte ptr [rbx+2Ch], 0
.text:00000000000076E6                 jz      short loc_76FD
.text:00000000000076E8                 mov     eax, [r12+18h]
.text:00000000000076ED                 and     eax, 0F000h
.text:00000000000076F2                 cmp     eax, 0A000h
.text:00000000000076F7                 jz      loc_5E3F
.text:00000000000076FD
.text:00000000000076FD loc_76FD:                               ; CODE XREF: copy_internal+1AC6↑j
.text:00000000000076FD                 cmp     dword ptr [rbx+4], 2
.text:0000000000007701                 jnz     loc_7220
.text:0000000000007707                 mov     eax, [rdx+18h]
.text:000000000000770A                 and     eax, 0F000h
.text:000000000000770F                 cmp     eax, 0A000h
.text:0000000000007714                 jz      loc_918C
.text:000000000000771A                 movdqa  xmm0, xmmword ptr [rdx]
.text:000000000000771E                 movaps  xmmword ptr [rbp+var_D0.st_dev], xmm0
.text:0000000000007725                 movdqa  xmm0, xmmword ptr [rdx+10h]
.text:000000000000772A                 movaps  xmmword ptr [rbp+var_D0.st_nlink], xmm0
.text:0000000000007731                 movdqa  xmm0, xmmword ptr [rdx+20h]
.text:0000000000007736                 movaps  xmmword ptr [rbp+var_D0.st_gid], xmm0
.text:000000000000773D                 movdqa  xmm0, xmmword ptr [rdx+30h]
.text:0000000000007742                 movaps  xmmword ptr [rbp+var_D0.st_size], xmm0
.text:0000000000007749                 movdqa  xmm0, xmmword ptr [rdx+40h]
.text:000000000000774E                 movaps  xmmword ptr [rbp+var_D0.st_blocks], xmm0
.text:0000000000007755                 movdqa  xmm0, xmmword ptr [rdx+50h]
.text:000000000000775A                 movaps  xmmword ptr [rbp+var_D0.st_atim.tv_nsec], xmm0
.text:000000000000775E                 movdqa  xmm0, xmmword ptr [rdx+60h]
.text:0000000000007763                 movaps  xmmword ptr [rbp+var_D0.st_mtim.tv_nsec], xmm0
.text:0000000000007767                 movdqa  xmm0, xmmword ptr [rdx+70h]
.text:000000000000776C                 movaps  xmmword ptr [rbp+var_D0.st_ctim.tv_nsec], xmm0
.text:0000000000007770                 movdqa  xmm0, xmmword ptr [rdx+80h]
.text:0000000000007778                 movaps  xmmword ptr [rbp+var_D0.__unused+8], xmm0
.text:000000000000777C
.text:000000000000777C loc_777C:                               ; CODE XREF: copy_internal+35A4↓j
.text:000000000000777C                 mov     eax, [r12+18h]
.text:0000000000007781                 and     eax, 0F000h
.text:0000000000007786                 cmp     eax, 0A000h
.text:000000000000778B                 jz      loc_9149
.text:0000000000007791                 movdqa  xmm0, xmmword ptr [r12]
.text:0000000000007797                 movaps  xmmword ptr [rbp+var_160.st_dev], xmm0
.text:000000000000779E                 movdqa  xmm0, xmmword ptr [r12+10h]
.text:00000000000077A5                 movaps  xmmword ptr [rbp+var_160.st_nlink], xmm0
.text:00000000000077AC                 movdqa  xmm0, xmmword ptr [r12+20h]
.text:00000000000077B3                 movaps  xmmword ptr [rbp+var_160.st_gid], xmm0
.text:00000000000077BA                 movdqa  xmm0, xmmword ptr [r12+30h]
.text:00000000000077C1                 movaps  xmmword ptr [rbp+var_160.st_size], xmm0
.text:00000000000077C8                 movdqa  xmm0, xmmword ptr [r12+40h]
.text:00000000000077CF                 movaps  xmmword ptr [rbp+var_160.st_blocks], xmm0
.text:00000000000077D6                 movdqa  xmm0, xmmword ptr [r12+50h]
.text:00000000000077DD                 movaps  xmmword ptr [rbp+var_160.st_atim.tv_nsec], xmm0
.text:00000000000077E4                 movdqa  xmm0, xmmword ptr [r12+60h]
.text:00000000000077EB                 movaps  xmmword ptr [rbp+var_160.st_mtim.tv_nsec], xmm0
.text:00000000000077F2                 movdqa  xmm0, xmmword ptr [r12+70h]
.text:00000000000077F9                 movaps  xmmword ptr [rbp+var_160.st_ctim.tv_nsec], xmm0
.text:0000000000007800                 movdqa  xmm0, xmmword ptr [r12+80h]
.text:000000000000780A                 movaps  xmmword ptr [rbp+var_160.__unused+8], xmm0
.text:0000000000007811
.text:0000000000007811 loc_7811:                               ; CODE XREF: copy_internal+3561↓j
.text:0000000000007811                 mov     rax, [rbp+var_160.st_ino]
.text:0000000000007818                 cmp     [rbp+var_D0.st_ino], rax
.text:000000000000781F                 jnz     loc_5E3F
.text:0000000000007825                 mov     rax, [rbp+var_160.st_dev]
.text:000000000000782C                 cmp     [rbp+var_D0.st_dev], rax
.text:0000000000007833                 jnz     loc_5E3F
.text:0000000000007839                 cmp     byte ptr [rbx+17h], 0
.text:000000000000783D                 jz      loc_7220
.text:0000000000007843                 mov     eax, [r12+18h]
.text:0000000000007848                 and     eax, 0F000h
.text:000000000000784D                 cmp     eax, 0A000h
.text:0000000000007852                 setnz   r14b
.text:0000000000007856                 jmp     loc_5E3F
.text:0000000000007856 ; ---------------------------------------------------------------------------
.text:000000000000785B                 align 20h
.text:0000000000007860
.text:0000000000007860 loc_7860:                               ; CODE XREF: copy_internal+3C4↑j
.text:0000000000007860                 lea     rcx, [rbp+var_D0]
.text:0000000000007867                 mov     rsi, [rbp+file] ; filename
.text:000000000000786E                 mov     edi, 1          ; ver
.text:0000000000007873                 mov     rdx, rcx        ; stat_buf
.text:0000000000007876                 mov     [rbp+s2], rcx
.text:000000000000787D                 call    ___lxstat
.text:0000000000007882                 test    eax, eax
.text:0000000000007884                 jnz     loc_6070
.text:000000000000788A                 mov     rcx, [rbp+s2]
.text:0000000000007891                 mov     rdx, rcx
.text:0000000000007894                 jmp     loc_5FEA
.text:0000000000007894 ; ---------------------------------------------------------------------------
.text:0000000000007899                 align 20h
.text:00000000000078A0
.text:00000000000078A0 loc_78A0:                               ; CODE XREF: copy_internal+14BD↑j
.text:00000000000078A0                 mov     rsi, [rbp+file] ; filename
.text:00000000000078A7                 lea     rdx, [rbp+var_1F0] ; stat_buf
.text:00000000000078AE                 mov     edi, 1          ; ver
.text:00000000000078B3                 call    ___lxstat
.text:00000000000078B8                 test    eax, eax
.text:00000000000078BA                 jnz     loc_82C5
.text:00000000000078C0                 mov     r12d, [rbp+var_1F0.st_mode]
.text:00000000000078C7                 mov     byte ptr [rbp+ptr], 0
.text:00000000000078CE                 mov     eax, r12d
.text:00000000000078D1                 and     eax, 1C0h
.text:00000000000078D6                 cmp     eax, 1C0h
.text:00000000000078DB                 jz      short loc_7908
.text:00000000000078DD                 mov     rdi, [rbp+file] ; file
.text:00000000000078E4                 mov     esi, r12d
.text:00000000000078E7                 or      esi, 1C0h       ; mode
.text:00000000000078ED                 call    _chmod
.text:00000000000078F2                 test    eax, eax
.text:00000000000078F4                 mov     [rbp+var_38C], r12d
.text:00000000000078FB                 mov     byte ptr [rbp+ptr], 1
.text:0000000000007902                 jnz     loc_8923
.text:0000000000007908
.text:0000000000007908 loc_7908:                               ; CODE XREF: copy_internal+1CBB↑j
.text:0000000000007908                 mov     rax, [rbp+format]
.text:000000000000790F                 cmp     byte ptr [rax], 0
.text:0000000000007912                 jz      loc_870C
.text:0000000000007918
.text:0000000000007918 loc_7918:                               ; CODE XREF: copy_internal+2B10↓j
.text:0000000000007918                 cmp     byte ptr [rbx+2Eh], 0
.text:000000000000791C                 jz      short loc_7968
.text:000000000000791E                 cmp     byte ptr [rbx+18h], 0
.text:0000000000007922                 jz      loc_87CD
.text:0000000000007928                 mov     rsi, [rbp+file]
.text:000000000000792F                 mov     edi, 4
.text:0000000000007934                 call    quotearg_style
.text:0000000000007939                 lea     rsi, aCreatedDirecto ; "created directory %s\n"
.text:0000000000007940                 mov     r12, rax
.text:0000000000007943                 mov     edx, 5          ; category
.text:0000000000007948                 xor     edi, edi        ; domainname
.text:000000000000794A                 call    _dcgettext
.text:000000000000794F                 mov     rdx, r12
.text:0000000000007952                 mov     rsi, rax
.text:0000000000007955                 mov     edi, 1
.text:000000000000795A                 xor     eax, eax
.text:000000000000795C                 call    ___printf_chk
.text:0000000000007961                 nop     dword ptr [rax+00000000h]
.text:0000000000007968
.text:0000000000007968 loc_7968:                               ; CODE XREF: copy_internal+1CFC↑j
.text:0000000000007968                                         ; copy_internal+251D↓j ...
.text:0000000000007968                 mov     rax, [rbp+var_348]
.text:000000000000796F                 test    rax, rax
.text:0000000000007972                 setnz   r12b
.text:0000000000007976                 and     r12b, [rbx+1Ch]
.text:000000000000797A                 jnz     loc_815B
.text:0000000000007980
.text:0000000000007980 loc_7980:                               ; CODE XREF: copy_internal+254B↓j
.text:0000000000007980                 movdqu  xmm0, xmmword ptr [rbx]
.text:0000000000007984                 mov     esi, 2
.text:0000000000007989                 mov     rdi, [rbp+filename]
.text:0000000000007990                 movaps  xmmword ptr [rbp+dev], xmm0
.text:0000000000007997                 movdqu  xmm0, xmmword ptr [rbx+10h]
.text:000000000000799C                 movaps  [rbp+var_2E0], xmm0
.text:00000000000079A3                 movdqu  xmm0, xmmword ptr [rbx+20h]
.text:00000000000079A8                 movaps  xmmword ptr [rbp+var_2D0], xmm0
.text:00000000000079AF                 movdqu  xmm0, xmmword ptr [rbx+30h]
.text:00000000000079B4                 movaps  [rbp+var_2C0], xmm0
.text:00000000000079BB                 movdqu  xmm0, xmmword ptr [rbx+40h]
.text:00000000000079C0                 movaps  [rbp+var_2B0], xmm0
.text:00000000000079C7                 call    savedir
.text:00000000000079CC                 test    rax, rax
.text:00000000000079CF                 mov     [rbp+s], rax
.text:00000000000079D6                 jz      loc_8838
.text:00000000000079DC                 cmp     dword ptr [rbx+4], 3
.text:00000000000079E0                 jnz     short loc_79EC
.text:00000000000079E2                 mov     dword ptr [rbp+dev+4], 2
.text:00000000000079EC
.text:00000000000079EC loc_79EC:                               ; CODE XREF: copy_internal+1DC0↑j
.text:00000000000079EC                 mov     rax, [rbp+s]
.text:00000000000079F3                 cmp     byte ptr [rax], 0
.text:00000000000079F6                 jz      loc_8F35
.text:00000000000079FC                 lea     rax, [rbp+dev]
.text:0000000000007A03                 lea     r10, [rbp+stat_buf]
.text:0000000000007A0A                 mov     dword ptr [rbp+length], r13d
.text:0000000000007A11                 mov     r15, [rbp+s]
.text:0000000000007A18                 mov     r13, [rbp+var_340]
.text:0000000000007A1F                 mov     r12d, 1
.text:0000000000007A25                 mov     [rbp+var_348], rax
.text:0000000000007A2C                 lea     rax, [rbp+var_2F9]
.text:0000000000007A33                 mov     [rbp+var_315], 0
.text:0000000000007A3A                 mov     byte ptr [rbp+var_370], r14b
.text:0000000000007A41                 mov     [rbp+var_378], rbx
.text:0000000000007A48                 mov     [rbp+old], rax
.text:0000000000007A4F                 lea     rax, [rbp+var_2F8]
.text:0000000000007A56                 mov     [rbp+var_340], r10
.text:0000000000007A5D                 mov     [rbp+s2], rax
.text:0000000000007A64                 jmp     short loc_7A94
.text:0000000000007A64 ; ---------------------------------------------------------------------------
.text:0000000000007A66                 align 10h
.text:0000000000007A70
.text:0000000000007A70 loc_7A70:                               ; CODE XREF: copy_internal+1F0B↓j
.text:0000000000007A70                 movzx   eax, byte ptr [rbp+var_2F8]
.text:0000000000007A77                 mov     rdi, r15        ; s
.text:0000000000007A7A                 or      [rbp+var_315], al
.text:0000000000007A80                 call    _strlen
.text:0000000000007A85                 lea     r15, [r15+rax+1]
.text:0000000000007A8A                 cmp     byte ptr [r15], 0
.text:0000000000007A8E                 jz      loc_7B31
.text:0000000000007A94
.text:0000000000007A94 loc_7A94:                               ; CODE XREF: copy_internal+1E44↑j
.text:0000000000007A94                 mov     rdi, [rbp+filename]
.text:0000000000007A9B                 xor     edx, edx
.text:0000000000007A9D                 mov     rsi, r15
.text:0000000000007AA0                 call    file_name_concat
.text:0000000000007AA5                 mov     rdi, [rbp+file]
.text:0000000000007AAC                 xor     edx, edx
.text:0000000000007AAE                 mov     rsi, r15
.text:0000000000007AB1                 mov     rbx, rax
.text:0000000000007AB4                 call    file_name_concat
.text:0000000000007AB9                 mov     r14, rax
.text:0000000000007ABC                 mov     rax, [rbp+format]
.text:0000000000007AC3                 mov     r9, [rbp+var_348]
.text:0000000000007ACA                 mov     r8, qword ptr [rbp+fd]
.text:0000000000007AD1                 mov     rcx, [rbp+var_340]
.text:0000000000007AD8                 mov     rsi, r14
.text:0000000000007ADB                 mov     edx, [rbp+fildes]
.text:0000000000007AE1                 mov     rdi, rbx
.text:0000000000007AE4                 movzx   eax, byte ptr [rax]
.text:0000000000007AE7                 push    0
.text:0000000000007AE9                 push    [rbp+old]
.text:0000000000007AEF                 push    [rbp+s2]
.text:0000000000007AF5                 push    0
.text:0000000000007AF7                 mov     byte ptr [rbp+var_2F8], al
.text:0000000000007AFD                 call    copy_internal
.text:0000000000007B02                 and     r12d, eax
.text:0000000000007B05                 movzx   eax, [rbp+var_2F9]
.text:0000000000007B0C                 add     rsp, 20h
.text:0000000000007B10                 or      [r13+0], al
.text:0000000000007B14                 mov     rdi, r14        ; ptr
.text:0000000000007B17                 call    free
.text:0000000000007B1C                 mov     rdi, rbx        ; ptr
.text:0000000000007B1F                 call    free
.text:0000000000007B24                 cmp     [rbp+var_2F9], 0
.text:0000000000007B2B                 jz      loc_7A70
.text:0000000000007B31
.text:0000000000007B31 loc_7B31:                               ; CODE XREF: copy_internal+1E6E↑j
.text:0000000000007B31                 movzx   r14d, byte ptr [rbp+var_370]
.text:0000000000007B39                 mov     rbx, [rbp+var_378]
.text:0000000000007B40                 mov     r13d, dword ptr [rbp+length]
.text:0000000000007B47
.text:0000000000007B47 loc_7B47:                               ; CODE XREF: copy_internal+3322↓j
.text:0000000000007B47                 mov     rdi, [rbp+s]    ; ptr
.text:0000000000007B4E                 call    free
.text:0000000000007B53                 movzx   ecx, [rbp+var_315]
.text:0000000000007B5A                 mov     rax, [rbp+format]
.text:0000000000007B61                 mov     [rax], cl
.text:0000000000007B63
.text:0000000000007B63 loc_7B63:                               ; CODE XREF: copy_internal+2545↓j
.text:0000000000007B63                                         ; copy_internal+2C5B↓j
.text:0000000000007B63                 test    r13b, r13b
.text:0000000000007B66                 jnz     loc_8142
.text:0000000000007B6C                 movzx   eax, byte ptr [rbp+ptr]
.text:0000000000007B73                 mov     byte ptr [rbp+fildes], 0
.text:0000000000007B7A                 mov     [rbp+var_315], al
.text:0000000000007B80                 jmp     loc_623A
.text:0000000000007B80 ; ---------------------------------------------------------------------------
.text:0000000000007B85                 align 8
.text:0000000000007B88
.text:0000000000007B88 loc_7B88:                               ; CODE XREF: copy_internal+CC8↑j
.text:0000000000007B88                 cmp     byte ptr [rbx+18h], 0
.text:0000000000007B8C                 jz      loc_7F9B
.text:0000000000007B92                 mov     r15d, [rbx]
.text:0000000000007B95                 test    r15d, r15d
.text:0000000000007B98                 jz      loc_7F9B
.text:0000000000007B9E                 test    r13b, r13b
.text:0000000000007BA1                 jnz     loc_68FA
.text:0000000000007BA7
.text:0000000000007BA7 loc_7BA7:                               ; CODE XREF: copy_internal+CE8↑j
.text:0000000000007BA7                                         ; copy_internal+12E9↑j
.text:0000000000007BA7                 mov     edx, [rbp+stat_buf.st_mode]
.text:0000000000007BAD                 and     edx, 0F000h
.text:0000000000007BB3                 cmp     edx, 4000h
.text:0000000000007BB9                 jz      loc_8176
.text:0000000000007BBF
.text:0000000000007BBF loc_7BBF:                               ; CODE XREF: copy_internal+21CF↓j
.text:0000000000007BBF                                         ; copy_internal+2569↓j
.text:0000000000007BBF                 mov     rdi, [rbp+filename]
.text:0000000000007BC6                 mov     byte ptr [rbp+s2], r9b
.text:0000000000007BCD                 mov     byte ptr [rbp+old], r8b
.text:0000000000007BD4                 call    last_component
.text:0000000000007BD9                 cmp     byte ptr [rax], 2Eh ; '.'
.text:0000000000007BDC                 mov     r14, rax
.text:0000000000007BDF                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000007BE7                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000007BEF                 jnz     loc_697D
.text:0000000000007BF5                 mov     eax, 1
.text:0000000000007BFA                 jmp     loc_6942
.text:0000000000007BFA ; ---------------------------------------------------------------------------
.text:0000000000007BFF                 align 20h
.text:0000000000007C00
.text:0000000000007C00 loc_7C00:                               ; CODE XREF: copy_internal+10A0↑j
.text:0000000000007C00                 mov     rsi, [rbp+s2]
.text:0000000000007C07                 mov     rdi, [rbp+file]
.text:0000000000007C0E                 call    same_name
.text:0000000000007C13                 test    al, al
.text:0000000000007C15                 jnz     loc_82EA
.text:0000000000007C1B                 mov     eax, [rbx+4]
.text:0000000000007C1E                 cmp     eax, 4
.text:0000000000007C21                 jz      loc_71A0
.text:0000000000007C27                 cmp     eax, 3
.text:0000000000007C2A                 jnz     short loc_7C35
.text:0000000000007C2C                 test    r13b, r13b
.text:0000000000007C2F                 jnz     loc_71A0
.text:0000000000007C35
.text:0000000000007C35 loc_7C35:                               ; CODE XREF: copy_internal+200A↑j
.text:0000000000007C35                 mov     rdx, [rbp+s2]
.text:0000000000007C3C                 mov     esi, 4
.text:0000000000007C41                 mov     edi, 1
.text:0000000000007C46                 call    quotearg_n_style
.text:0000000000007C4B                 mov     rdx, [rbp+file]
.text:0000000000007C52                 xor     edi, edi
.text:0000000000007C54                 mov     esi, 4
.text:0000000000007C59                 mov     r13, rax
.text:0000000000007C5C                 call    quotearg_n_style
.text:0000000000007C61                 lea     rsi, aWillNotCreateH ; "will not create hard link %s to directo"...
.text:0000000000007C68                 mov     r12, rax
.text:0000000000007C6B                 xor     edi, edi        ; domainname
.text:0000000000007C6D                 mov     edx, 5          ; category
.text:0000000000007C72                 call    _dcgettext
.text:0000000000007C77                 mov     r8, r13
.text:0000000000007C7A                 mov     rdx, rax        ; format
.text:0000000000007C7D                 mov     rcx, r12
.text:0000000000007C80                 xor     esi, esi        ; errnum
.text:0000000000007C82                 xor     edi, edi        ; status
.text:0000000000007C84                 xor     eax, eax
.text:0000000000007C86                 call    _error
.text:0000000000007C8B                 jmp     loc_6D26
.text:0000000000007C90 ; ---------------------------------------------------------------------------
.text:0000000000007C90
.text:0000000000007C90 loc_7C90:                               ; CODE XREF: copy_internal+495↑j
.text:0000000000007C90                 cmp     byte ptr [rbx+17h], 0
.text:0000000000007C94                 jz      loc_6D38
.text:0000000000007C9A                 mov     [rbp+s2], 0
.text:0000000000007CA5                 jmp     loc_6D73
.text:0000000000007CA5 ; ---------------------------------------------------------------------------
.text:0000000000007CAA                 align 10h
.text:0000000000007CB0
.text:0000000000007CB0 loc_7CB0:                               ; CODE XREF: copy_internal+188F↑j
.text:0000000000007CB0                                         ; copy_internal+18A4↑j
.text:0000000000007CB0                 mov     eax, [rbp+stat_buf.st_mode]
.text:0000000000007CB6                 xor     esi, esi
.text:0000000000007CB8                 cmp     dword ptr [rbx+4], 2
.text:0000000000007CBC                 mov     rdi, [rbp+filename]
.text:0000000000007CC3                 mov     dword ptr [rbp+var_340], eax
.text:0000000000007CC9                 movzx   eax, byte ptr [rbx+23h]
.text:0000000000007CCD                 setz    sil
.text:0000000000007CD1                 shl     esi, 11h
.text:0000000000007CD4                 mov     byte ptr [rbp+format], al
.text:0000000000007CDA                 xor     eax, eax
.text:0000000000007CDC                 call    open_safer
.text:0000000000007CE1                 test    eax, eax
.text:0000000000007CE3                 mov     [rbp+fildes], eax
.text:0000000000007CE9                 js      loc_83EB
.text:0000000000007CEF                 mov     esi, [rbp+fildes] ; fildes
.text:0000000000007CF5                 lea     rdx, [rbp+var_160] ; stat_buf
.text:0000000000007CFC                 mov     edi, 1          ; ver
.text:0000000000007D01                 call    ___fxstat
.text:0000000000007D06                 test    eax, eax
.text:0000000000007D08                 jnz     loc_8627
.text:0000000000007D0E                 mov     rax, [rbp+var_160.st_ino]
.text:0000000000007D15                 cmp     [rbp+stat_buf.st_ino], rax
.text:0000000000007D1C                 jnz     short loc_7D32
.text:0000000000007D1E                 mov     rax, [rbp+var_160.st_dev]
.text:0000000000007D25                 cmp     [rbp+stat_buf.st_dev], rax
.text:0000000000007D2C                 jz      loc_8A56
.text:0000000000007D32
.text:0000000000007D32 loc_7D32:                               ; CODE XREF: copy_internal+20FC↑j
.text:0000000000007D32                 mov     rsi, [rbp+filename]
.text:0000000000007D39                 mov     edi, 4
.text:0000000000007D3E                 call    quotearg_style
.text:0000000000007D43                 lea     rsi, aSkippingFileSA ; "skipping file %s, as it was replaced wh"...
.text:0000000000007D4A                 mov     r12, rax
.text:0000000000007D4D                 mov     edx, 5          ; category
.text:0000000000007D52                 xor     edi, edi        ; domainname
.text:0000000000007D54                 call    _dcgettext
.text:0000000000007D59                 mov     rcx, r12
.text:0000000000007D5C                 mov     rdx, rax        ; format
.text:0000000000007D5F                 xor     esi, esi        ; errnum
.text:0000000000007D61
.text:0000000000007D61 loc_7D61:                               ; CODE XREF: copy_internal+2A46↓j
.text:0000000000007D61                                         ; copy_internal+3FBF↓j
.text:0000000000007D61                 xor     edi, edi        ; status
.text:0000000000007D63                 xor     eax, eax
.text:0000000000007D65                 call    _error
.text:0000000000007D6A                 xor     r8d, r8d
.text:0000000000007D6D                 mov     [rbp+ptr], 0
.text:0000000000007D78
.text:0000000000007D78 loc_7D78:                               ; CODE XREF: copy_internal+32B1↓j
.text:0000000000007D78                                         ; copy_internal+3302↓j ...
.text:0000000000007D78                 mov     edi, [rbp+fildes] ; fd
.text:0000000000007D7E                 mov     byte ptr [rbp+fd], r8b
.text:0000000000007D85                 call    _close
.text:0000000000007D8A                 test    eax, eax
.text:0000000000007D8C                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000007D94                 js      loc_87E7
.text:0000000000007D9A                 mov     rdi, [rbp+ptr]  ; ptr
.text:0000000000007DA1                 mov     byte ptr [rbp+fd], r8b
.text:0000000000007DA8                 call    free
.text:0000000000007DAD                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000007DB5                 mov     byte ptr [rbp+fildes], 0
.text:0000000000007DBC                 test    r8b, r8b
.text:0000000000007DBF                 jnz     loc_619F
.text:0000000000007DC5                 jmp     loc_6BB0
.text:0000000000007DC5 ; ---------------------------------------------------------------------------
.text:0000000000007DCA                 align 10h
.text:0000000000007DD0
.text:0000000000007DD0 loc_7DD0:                               ; CODE XREF: copy_internal+17F9↑j
.text:0000000000007DD0                 mov     eax, [rbp+stat_buf.st_mode]
.text:0000000000007DD6                 and     eax, 0F000h
.text:0000000000007DDB                 cmp     eax, 4000h
.text:0000000000007DE0                 jz      loc_8170
.text:0000000000007DE6
.text:0000000000007DE6 loc_7DE6:                               ; CODE XREF: copy_internal+2560↓j
.text:0000000000007DE6                 test    r15d, r15d
.text:0000000000007DE9                 jz      loc_7447
.text:0000000000007DEF                 jmp     loc_7BBF
.text:0000000000007DEF ; ---------------------------------------------------------------------------
.text:0000000000007DF4                 align 8
.text:0000000000007DF8
.text:0000000000007DF8 loc_7DF8:                               ; CODE XREF: copy_internal+EF6↑j
.text:0000000000007DF8                 lea     rdx, [rbp+var_160] ; stat_buf
.text:0000000000007DFF                 mov     rsi, r8         ; filename
.text:0000000000007E02                 mov     edi, 1          ; ver
.text:0000000000007E07                 call    ___xstat
.text:0000000000007E0C                 test    eax, eax
.text:0000000000007E0E                 jnz     loc_6B1C
.text:0000000000007E14                 lea     rdx, [rbp+var_D0] ; stat_buf
.text:0000000000007E1B                 mov     rsi, r12        ; filename
.text:0000000000007E1E                 mov     edi, 1          ; ver
.text:0000000000007E23                 call    ___xstat
.text:0000000000007E28                 test    eax, eax
.text:0000000000007E2A                 jnz     loc_6B1C
.text:0000000000007E30                 mov     rax, [rbp+var_D0.st_ino]
.text:0000000000007E37                 cmp     [rbp+var_160.st_ino], rax
.text:0000000000007E3E                 jz      loc_8F47
.text:0000000000007E44
.text:0000000000007E44 loc_7E44:                               ; CODE XREF: copy_internal+3335↓j
.text:0000000000007E44                 mov     rdi, r12        ; ptr
.text:0000000000007E47                 call    free
.text:0000000000007E4C                 mov     rdx, [rbp+file]
.text:0000000000007E53                 mov     esi, 3
.text:0000000000007E58                 xor     edi, edi
.text:0000000000007E5A                 call    quotearg_n_style_colon
.text:0000000000007E5F                 mov     edx, 5
.text:0000000000007E64                 mov     r12, rax
.text:0000000000007E67                 lea     rsi, aSCanMakeRelati ; "%s: can make relative symbolic links on"...
.text:0000000000007E6E                 jmp     loc_67C8
.text:0000000000007E73 ; ---------------------------------------------------------------------------
.text:0000000000007E73
.text:0000000000007E73 loc_7E73:                               ; CODE XREF: copy_internal+15AC↑j
.text:0000000000007E73                 mov     eax, [rbp+var_1F0.st_mode]
.text:0000000000007E79                 lea     rdx, [rbp+stat_buf]
.text:0000000000007E80                 and     eax, 0F000h
.text:0000000000007E85                 cmp     eax, 0A000h
.text:0000000000007E8A                 jnz     loc_71D2
.text:0000000000007E90                 mov     rsi, [rbp+file]
.text:0000000000007E97                 mov     rdi, [rbp+filename]
.text:0000000000007E9E                 mov     byte ptr [rbp+s2], r9b
.text:0000000000007EA5                 mov     byte ptr [rbp+old], r8b
.text:0000000000007EAC                 call    same_name
.text:0000000000007EB1                 test    al, al
.text:0000000000007EB3                 jnz     loc_7220
.text:0000000000007EB9                 mov     edi, [rbx]
.text:0000000000007EBB                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000007EC3                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000007ECB                 test    edi, edi
.text:0000000000007ECD                 jnz     loc_706E
.text:0000000000007ED3                 test    r15d, r15d
.text:0000000000007ED6                 jz      loc_706E
.text:0000000000007EDC                 movzx   r12d, byte ptr [rbx+18h]
.text:0000000000007EE1                 mov     eax, 1
.text:0000000000007EE6                 xor     r12d, 1
.text:0000000000007EEA                 jmp     loc_739C
.text:0000000000007EEA ; ---------------------------------------------------------------------------
.text:0000000000007EEF                 align 10h
.text:0000000000007EF0
.text:0000000000007EF0 loc_7EF0:                               ; CODE XREF: copy_internal+59C↑j
.text:0000000000007EF0                 mov     r15d, eax
.text:0000000000007EF3                 mov     rax, 0FF000000FF00h
.text:0000000000007EFD                 test    [rbx+20h], rax
.text:0000000000007F01                 jz      loc_61C2
.text:0000000000007F07                 movzx   esi, byte ptr [rbx+25h]
.text:0000000000007F0B                 mov     rdi, [rbp+file]
.text:0000000000007F12                 xor     edx, edx
.text:0000000000007F14                 mov     rcx, rbx
.text:0000000000007F17                 mov     byte ptr [rbp+fd], r8b
.text:0000000000007F1E                 call    set_file_security_ctx
.text:0000000000007F23                 test    al, al
.text:0000000000007F25                 mov     r15d, eax
.text:0000000000007F28                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000007F30                 jnz     loc_61C2
.text:0000000000007F36                 movzx   r14d, byte ptr [rbx+26h]
.text:0000000000007F3B                 test    r14b, r14b
.text:0000000000007F3E                 jnz     loc_6BB0
.text:0000000000007F44                 mov     r15d, r12d
.text:0000000000007F47                 jmp     loc_61C2
.text:0000000000007F47 ; ---------------------------------------------------------------------------
.text:0000000000007F4C                 align 10h
.text:0000000000007F50
.text:0000000000007F50 loc_7F50:                               ; CODE XREF: copy_internal+9EB↑j
.text:0000000000007F50                 lea     rsi, aCopied    ; "copied "
.text:0000000000007F57                 mov     edx, 5          ; category
.text:0000000000007F5C                 xor     edi, edi        ; domainname
.text:0000000000007F5E                 call    _dcgettext
.text:0000000000007F63                 mov     edi, 1
.text:0000000000007F68                 mov     rsi, rax
.text:0000000000007F6B                 xor     eax, eax
.text:0000000000007F6D                 call    ___printf_chk
.text:0000000000007F72                 mov     rdx, [rbp+old]
.text:0000000000007F79                 mov     rsi, [rbp+file]
.text:0000000000007F80                 mov     rdi, [rbp+filename]
.text:0000000000007F87                 call    emit_verbose
.text:0000000000007F8C                 mov     [rbp+fildes], 1
.text:0000000000007F96                 jmp     loc_60D0
.text:0000000000007F9B ; ---------------------------------------------------------------------------
.text:0000000000007F9B
.text:0000000000007F9B loc_7F9B:                               ; CODE XREF: copy_internal+1F6C↑j
.text:0000000000007F9B                                         ; copy_internal+1F78↑j
.text:0000000000007F9B                 mov     rdx, [rbp+filename]
.text:0000000000007FA2                 mov     esi, 4
.text:0000000000007FA7                 mov     edi, 1
.text:0000000000007FAC                 call    quotearg_n_style
.text:0000000000007FB1                 mov     rdx, [rbp+file]
.text:0000000000007FB8                 mov     esi, 4
.text:0000000000007FBD                 xor     edi, edi
.text:0000000000007FBF                 mov     r12, rax
.text:0000000000007FC2                 call    quotearg_n_style
.text:0000000000007FC7                 mov     edx, 5
.text:0000000000007FCC                 mov     rbx, rax
.text:0000000000007FCF                 lea     rsi, aCannotOverwrit_0 ; "cannot overwrite non-directory %s with "...
.text:0000000000007FD6                 jmp     loc_725B
.text:0000000000007FDB ; ---------------------------------------------------------------------------
.text:0000000000007FDB
.text:0000000000007FDB loc_7FDB:                               ; CODE XREF: copy_internal+1821↑j
.text:0000000000007FDB                 cmp     byte ptr [rbx+15h], 0
.text:0000000000007FDF                 jnz     short loc_7FF9
.text:0000000000007FE1                 cmp     byte ptr [rbx+22h], 0
.text:0000000000007FE5                 jz      loc_83C6
.text:0000000000007FEB                 cmp     [rbp+var_1F0.st_nlink], 1
.text:0000000000007FF3                 jbe     loc_83C6
.text:0000000000007FF9
.text:0000000000007FF9 loc_7FF9:                               ; CODE XREF: copy_internal+23BF↑j
.text:0000000000007FF9                                         ; copy_internal+27C0↓j
.text:0000000000007FF9                 mov     r14, [rbp+file]
.text:0000000000008000                 mov     byte ptr [rbp+old], r9b
.text:0000000000008007                 mov     rdi, r14        ; name
.text:000000000000800A                 call    _unlink
.text:000000000000800F                 test    eax, eax
.text:0000000000008011                 movzx   r9d, byte ptr [rbp+old]
.text:0000000000008019                 jz      loc_8393
.text:000000000000801F                 call    ___errno_location
.text:0000000000008024                 cmp     dword ptr [rax], 2
.text:0000000000008027                 mov     r15, rax
.text:000000000000802A                 movzx   r9d, byte ptr [rbp+old]
.text:0000000000008032                 jz      loc_8393
.text:0000000000008038                 mov     rsi, r14
.text:000000000000803B                 mov     edi, 4
.text:0000000000008040                 call    quotearg_style
.text:0000000000008045                 lea     rsi, aCannotRemoveS ; "cannot remove %s"
.text:000000000000804C                 xor     edi, edi        ; domainname
.text:000000000000804E                 mov     edx, 5          ; category
.text:0000000000008053                 mov     rbx, rax
.text:0000000000008056                 call    _dcgettext
.text:000000000000805B                 mov     esi, [r15]      ; errnum
.text:000000000000805E                 mov     rdx, rax        ; format
.text:0000000000008061                 mov     rcx, rbx
.text:0000000000008064                 xor     edi, edi        ; status
.text:0000000000008066                 xor     eax, eax
.text:0000000000008068                 call    _error
.text:000000000000806D                 jmp     loc_6466
.text:0000000000008072 ; ---------------------------------------------------------------------------
.text:0000000000008072
.text:0000000000008072 loc_8072:                               ; CODE XREF: copy_internal+1448↑j
.text:0000000000008072                 lea     rax, [rbp+var_D0]
.text:0000000000008079                 mov     rsi, [rbp+filename] ; filename
.text:0000000000008080                 mov     edi, 1          ; ver
.text:0000000000008085                 mov     rdx, rax        ; stat_buf
.text:0000000000008088                 mov     [rbp+s], rax
.text:000000000000808F                 call    ___lxstat
.text:0000000000008094                 test    eax, eax
.text:0000000000008096                 movzx   r8d, byte ptr [rbp+old]
.text:000000000000809E                 movzx   r9d, byte ptr [rbp+s2]
.text:00000000000080A6                 jnz     loc_706E
.text:00000000000080AC                 xor     ecx, ecx
.text:00000000000080AE                 mov     rax, [rbp+var_160.st_ino]
.text:00000000000080B5                 cmp     [rbp+var_D0.st_ino], rax
.text:00000000000080BC                 jnz     short loc_80CF
.text:00000000000080BE                 mov     rax, [rbp+var_160.st_dev]
.text:00000000000080C5                 cmp     [rbp+var_D0.st_dev], rax
.text:00000000000080CC                 setz    cl
.text:00000000000080CF
.text:00000000000080CF loc_80CF:                               ; CODE XREF: copy_internal+249C↑j
.text:00000000000080CF                 mov     eax, [rbp+var_D0.st_mode]
.text:00000000000080D5                 mov     rdx, [rbp+s]
.text:00000000000080DC                 and     eax, 0F000h
.text:00000000000080E1                 cmp     eax, 0A000h
.text:00000000000080E6                 jnz     loc_71D2
.text:00000000000080EC                 mov     eax, [rbp+var_160.st_mode]
.text:00000000000080F2                 and     eax, 0F000h
.text:00000000000080F7                 cmp     eax, 0A000h
.text:00000000000080FC                 jnz     loc_71D2
.text:0000000000008102                 cmp     byte ptr [rbx+15h], 0
.text:0000000000008106                 jz      loc_71D2
.text:000000000000810C                 jmp     loc_706E
.text:000000000000810C ; ---------------------------------------------------------------------------
.text:0000000000008111                 align 8
.text:0000000000008118
.text:0000000000008118 loc_8118:                               ; CODE XREF: copy_internal+149B↑j
.text:0000000000008118                 mov     rax, 0FF000000FF00h
.text:0000000000008122                 test    [rbx+20h], rax
.text:0000000000008126                 jnz     loc_86E0
.text:000000000000812C
.text:000000000000812C loc_812C:                               ; CODE XREF: copy_internal+2AD7↓j
.text:000000000000812C                                         ; copy_internal+2AE7↓j
.text:000000000000812C                 mov     byte ptr [rbp+ptr], 0
.text:0000000000008133                 mov     [rbp+var_35C], 0
.text:000000000000813D                 jmp     loc_7968
.text:0000000000008142 ; ---------------------------------------------------------------------------
.text:0000000000008142
.text:0000000000008142 loc_8142:                               ; CODE XREF: copy_internal+1F46↑j
.text:0000000000008142                 mov     [rbp+var_315], r12b
.text:0000000000008149                 xor     r15d, r15d
.text:000000000000814C                 xor     r8d, r8d
.text:000000000000814F                 mov     byte ptr [rbp+fildes], 0
.text:0000000000008156                 jmp     loc_61D4
.text:000000000000815B ; ---------------------------------------------------------------------------
.text:000000000000815B
.text:000000000000815B loc_815B:                               ; CODE XREF: copy_internal+1D5A↑j
.text:000000000000815B                 mov     rcx, [rbp+stat_buf.st_dev]
.text:0000000000008162                 cmp     [rax], rcx
.text:0000000000008165                 jnz     loc_7B63
.text:000000000000816B                 jmp     loc_7980
.text:0000000000008170 ; ---------------------------------------------------------------------------
.text:0000000000008170
.text:0000000000008170 loc_8170:                               ; CODE XREF: copy_internal+21C0↑j
.text:0000000000008170                 mov     eax, [rbp+var_1F0.st_mode]
.text:0000000000008176
.text:0000000000008176 loc_8176:                               ; CODE XREF: copy_internal+1F99↑j
.text:0000000000008176                 and     eax, 0F000h
.text:000000000000817B                 cmp     eax, 4000h
.text:0000000000008180                 jz      loc_7DE6
.text:0000000000008186                 test    r15d, r15d
.text:0000000000008189                 jnz     loc_7BBF
.text:000000000000818F                 mov     rdx, [rbp+file]
.text:0000000000008196                 mov     esi, 3
.text:000000000000819B                 xor     edi, edi
.text:000000000000819D                 call    quotearg_n_style_colon
.text:00000000000081A2                 mov     rdx, [rbp+filename]
.text:00000000000081A9                 mov     esi, 3
.text:00000000000081AE                 xor     edi, edi
.text:00000000000081B0                 mov     r12, rax
.text:00000000000081B3                 call    quotearg_n_style_colon
.text:00000000000081B8                 mov     edx, 5
.text:00000000000081BD                 mov     rbx, rax
.text:00000000000081C0                 lea     rsi, aCannotMoveDire ; "cannot move directory onto non-director"...
.text:00000000000081C7                 jmp     loc_725B
.text:00000000000081CC ; ---------------------------------------------------------------------------
.text:00000000000081CC
.text:00000000000081CC loc_81CC:                               ; CODE XREF: copy_internal+18C2↑j
.text:00000000000081CC                                         ; copy_internal+18CF↑j
.text:00000000000081CC                 mov     edx, [rbp+var_35C]
.text:00000000000081D2                 mov     rax, [rbp+stat_buf.st_rdev]
.text:00000000000081D9                 lea     rcx, [rbp+dev]  ; dev
.text:00000000000081E0                 mov     rsi, [rbp+file] ; path
.text:00000000000081E7                 xor     edi, edi        ; ver
.text:00000000000081E9                 mov     byte ptr [rbp+fd], r8b
.text:00000000000081F0                 not     edx
.text:00000000000081F2                 and     edx, [rbp+var_314] ; mode
.text:00000000000081F8                 mov     [rbp+dev], rax
.text:00000000000081FF                 call    ___xmknod
.text:0000000000008204                 test    eax, eax
.text:0000000000008206                 mov     byte ptr [rbp+fildes], 0
.text:000000000000820D                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000008215                 jz      loc_619F
.text:000000000000821B                 mov     rsi, [rbp+file]
.text:0000000000008222                 mov     edi, 4
.text:0000000000008227                 call    quotearg_style
.text:000000000000822C                 mov     edx, 5
.text:0000000000008231                 mov     r13, rax
.text:0000000000008234                 lea     rsi, aCannotCreateSp ; "cannot create special file %s"
.text:000000000000823B                 jmp     loc_70FF
.text:0000000000008240 ; ---------------------------------------------------------------------------
.text:0000000000008240
.text:0000000000008240 loc_8240:                               ; CODE XREF: copy_internal+671↑j
.text:0000000000008240                 call    utimens
.text:0000000000008245                 test    eax, eax
.text:0000000000008247                 jz      loc_6305
.text:000000000000824D                 jmp     loc_62AA
.text:0000000000008252 ; ---------------------------------------------------------------------------
.text:0000000000008252
.text:0000000000008252 loc_8252:                               ; CODE XREF: copy_internal+5E7↑j
.text:0000000000008252                 mov     rdi, [rbx+40h]
.text:0000000000008256                 mov     rsi, [rbp+file]
.text:000000000000825D                 mov     rdx, r12
.text:0000000000008260                 call    record_file
.text:0000000000008265                 movzx   r8d, byte ptr [rbp+fd]
.text:000000000000826D                 jmp     loc_620D
.text:0000000000008272 ; ---------------------------------------------------------------------------
.text:0000000000008272
.text:0000000000008272 loc_8272:                               ; CODE XREF: copy_internal+15BE↑j
.text:0000000000008272                 mov     rsi, [rbp+file]
.text:0000000000008279                 mov     rdi, [rbp+filename]
.text:0000000000008280                 mov     byte ptr [rbp+s2], r9b
.text:0000000000008287                 mov     byte ptr [rbp+old], r8b
.text:000000000000828E                 call    same_name
.text:0000000000008293                 xor     eax, 1
.text:0000000000008296                 movzx   r8d, byte ptr [rbp+old]
.text:000000000000829E                 movzx   r9d, byte ptr [rbp+s2]
.text:00000000000082A6                 mov     r12d, eax
.text:00000000000082A9                 xor     eax, eax
.text:00000000000082AB                 jmp     loc_739C
.text:00000000000082B0 ; ---------------------------------------------------------------------------
.text:00000000000082B0
.text:00000000000082B0 loc_82B0:                               ; CODE XREF: copy_internal+127E↑j
.text:00000000000082B0                 movzx   r8d, byte ptr [rbp+old]
.text:00000000000082B8                 movzx   r9d, byte ptr [rbp+s2]
.text:00000000000082C0                 jmp     loc_68B0
.text:00000000000082C5 ; ---------------------------------------------------------------------------
.text:00000000000082C5
.text:00000000000082C5 loc_82C5:                               ; CODE XREF: copy_internal+1C9A↑j
.text:00000000000082C5                 mov     rsi, [rbp+file]
.text:00000000000082CC                 mov     edi, 4
.text:00000000000082D1                 call    quotearg_style
.text:00000000000082D6                 mov     edx, 5
.text:00000000000082DB                 mov     r13, rax
.text:00000000000082DE                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:00000000000082E5                 jmp     loc_70FF
.text:00000000000082EA ; ---------------------------------------------------------------------------
.text:00000000000082EA
.text:00000000000082EA loc_82EA:                               ; CODE XREF: copy_internal+1FF5↑j
.text:00000000000082EA                 mov     rsi, cs:top_level_src_name
.text:00000000000082F1                 mov     edi, 4
.text:00000000000082F6                 call    quotearg_style
.text:00000000000082FB                 lea     rsi, aWarningSourceD ; "warning: source directory %s specified "...
.text:0000000000008302                 xor     edi, edi        ; domainname
.text:0000000000008304                 mov     r12, rax
.text:0000000000008307                 mov     edx, 5          ; category
.text:000000000000830C                 call    _dcgettext
.text:0000000000008311                 xor     esi, esi        ; errnum
.text:0000000000008313                 mov     rdx, rax        ; format
.text:0000000000008316                 xor     edi, edi        ; status
.text:0000000000008318                 xor     eax, eax
.text:000000000000831A                 mov     rcx, r12
.text:000000000000831D                 call    _error
.text:0000000000008322                 cmp     byte ptr [rbx+18h], 0
.text:0000000000008326                 jnz     loc_6EA4
.text:000000000000832C                 jmp     loc_6460
.text:0000000000008331 ; ---------------------------------------------------------------------------
.text:0000000000008331
.text:0000000000008331 loc_8331:                               ; CODE XREF: copy_internal+DF1↑j
.text:0000000000008331                 mov     byte ptr [rbp+old], r9b
.text:0000000000008338                 call    ___errno_location
.text:000000000000833D                 cmp     dword ptr [rax], 2
.text:0000000000008340                 mov     r12, rax
.text:0000000000008343                 movzx   r9d, byte ptr [rbp+old]
.text:000000000000834B                 jz      loc_87B1
.text:0000000000008351                 mov     rsi, [rbp+file]
.text:0000000000008358                 mov     edi, 4
.text:000000000000835D                 call    quotearg_style
.text:0000000000008362                 lea     rsi, aCannotBackupS ; "cannot backup %s"
.text:0000000000008369                 mov     edx, 5          ; category
.text:000000000000836E                 xor     edi, edi        ; domainname
.text:0000000000008370                 mov     rbx, rax
.text:0000000000008373                 call    _dcgettext
.text:0000000000008378                 mov     esi, [r12]      ; errnum
.text:000000000000837C                 mov     rdx, rax        ; format
.text:000000000000837F                 mov     rcx, rbx
.text:0000000000008382                 xor     edi, edi        ; status
.text:0000000000008384                 xor     eax, eax
.text:0000000000008386                 xor     r12d, r12d
.text:0000000000008389                 call    _error
.text:000000000000838E                 jmp     loc_6466
.text:0000000000008393 ; ---------------------------------------------------------------------------
.text:0000000000008393
.text:0000000000008393 loc_8393:                               ; CODE XREF: copy_internal+23F9↑j
.text:0000000000008393                                         ; copy_internal+2412↑j
.text:0000000000008393                 movzx   r14d, byte ptr [rbx+2Eh]
.text:0000000000008398                 test    r14b, r14b
.text:000000000000839B                 jnz     loc_896C
.text:00000000000083A1                 test    r13b, r13b
.text:00000000000083A4                 jnz     loc_8948
.text:00000000000083AA                 mov     [rbp+old], 0
.text:00000000000083B5                 mov     r14d, 1
.text:00000000000083BB                 mov     r15d, 11h
.text:00000000000083C1                 jmp     loc_6089
.text:00000000000083C6 ; ---------------------------------------------------------------------------
.text:00000000000083C6
.text:00000000000083C6 loc_83C6:                               ; CODE XREF: copy_internal+23C5↑j
.text:00000000000083C6                                         ; copy_internal+23D3↑j
.text:00000000000083C6                 cmp     dword ptr [rbx+4], 2
.text:00000000000083CA                 jnz     loc_7447
.text:00000000000083D0                 mov     eax, [rbp+stat_buf.st_mode]
.text:00000000000083D6                 and     eax, 0F000h
.text:00000000000083DB                 cmp     eax, 8000h
.text:00000000000083E0                 jnz     loc_7FF9
.text:00000000000083E6                 jmp     loc_7447
.text:00000000000083EB ; ---------------------------------------------------------------------------
.text:00000000000083EB
.text:00000000000083EB loc_83EB:                               ; CODE XREF: copy_internal+20C9↑j
.text:00000000000083EB                 mov     rsi, [rbp+filename]
.text:00000000000083F2                 mov     edi, 4
.text:00000000000083F7                 call    quotearg_style
.text:00000000000083FC                 mov     edx, 5
.text:0000000000008401                 mov     r13, rax
.text:0000000000008404                 lea     rsi, aCannotOpenSFor ; "cannot open %s for reading"
.text:000000000000840B                 jmp     loc_70FF
.text:0000000000008410 ; ---------------------------------------------------------------------------
.text:0000000000008410
.text:0000000000008410 loc_8410:                               ; CODE XREF: copy_internal+755↑j
.text:0000000000008410                 mov     r8d, [rbp+var_314]
.text:0000000000008417                 mov     rdx, [rbp+file]
.text:000000000000841E                 mov     ecx, 0FFFFFFFFh
.text:0000000000008423                 mov     rdi, [rbp+filename]
.text:000000000000842A                 mov     esi, ecx
.text:000000000000842C                 call    copy_acl
.text:0000000000008431                 test    eax, eax
.text:0000000000008433                 jnz     loc_640A
.text:0000000000008439                 jmp     loc_6466
.text:000000000000843E ; ---------------------------------------------------------------------------
.text:000000000000843E
.text:000000000000843E loc_843E:                               ; CODE XREF: copy_internal+DC3↑j
.text:000000000000843E                 mov     rdx, r12        ; n
.text:0000000000008441                 mov     rdi, r14        ; s1
.text:0000000000008444                 mov     byte ptr [rbp+old], r9b
.text:000000000000844B                 mov     [rbp+s2], r8
.text:0000000000008452                 call    _memcmp
.text:0000000000008457                 test    eax, eax
.text:0000000000008459                 movzx   r9d, byte ptr [rbp+old]
.text:0000000000008461                 jnz     loc_69E9
.text:0000000000008467                 lea     rdi, [r14+r12]  ; s1
.text:000000000000846B                 mov     rsi, r15        ; s2
.text:000000000000846E                 call    _strcmp
.text:0000000000008473                 test    eax, eax
.text:0000000000008475                 movzx   r9d, byte ptr [rbp+old]
.text:000000000000847D                 mov     r8, [rbp+s2]
.text:0000000000008484                 jnz     loc_69E9
.text:000000000000848A                 mov     rdi, [rbp+file]
.text:0000000000008491                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008495                 repne scasb
.text:0000000000008497                 mov     rax, rcx
.text:000000000000849A                 not     rax
.text:000000000000849D                 lea     r14, [rax-1]
.text:00000000000084A1                 lea     rdi, [r14+r8+1]
.text:00000000000084A6                 call    xmalloc
.text:00000000000084AB                 mov     r15, cs:simple_backup_suffix
.text:00000000000084B2                 mov     rsi, [rbp+file] ; src
.text:00000000000084B9                 mov     rdx, r14        ; n
.text:00000000000084BC                 mov     rdi, rax        ; dest
.text:00000000000084BF                 mov     r12, rax
.text:00000000000084C2                 call    _mempcpy
.text:00000000000084C7                 mov     rsi, r15        ; src
.text:00000000000084CA                 mov     rdi, rax        ; dest
.text:00000000000084CD                 call    _strcpy
.text:00000000000084D2                 lea     rdx, [rbp+var_D0] ; stat_buf
.text:00000000000084D9                 mov     rsi, r12        ; filename
.text:00000000000084DC                 mov     edi, 1          ; ver
.text:00000000000084E1                 call    ___xstat
.text:00000000000084E6                 mov     rdi, r12        ; ptr
.text:00000000000084E9                 mov     r15d, eax
.text:00000000000084EC                 call    free
.text:00000000000084F1                 test    r15d, r15d
.text:00000000000084F4                 movzx   r9d, byte ptr [rbp+old]
.text:00000000000084FC                 jnz     loc_69E9
.text:0000000000008502                 mov     rax, [rbp+var_D0.st_ino]
.text:0000000000008509                 cmp     [rbp+stat_buf.st_ino], rax
.text:0000000000008510                 jnz     loc_69E9
.text:0000000000008516                 mov     rax, [rbp+var_D0.st_dev]
.text:000000000000851D                 cmp     [rbp+stat_buf.st_dev], rax
.text:0000000000008524                 jnz     loc_69E9
.text:000000000000852A                 cmp     byte ptr [rbx+18h], 0
.text:000000000000852E                 jz      loc_8796
.text:0000000000008534                 lea     rsi, aBackingUpSMigh ; "backing up %s might destroy source;  %s"...
.text:000000000000853B                 mov     edx, 5          ; category
.text:0000000000008540                 xor     edi, edi        ; domainname
.text:0000000000008542                 call    _dcgettext
.text:0000000000008547                 mov     rbx, rax
.text:000000000000854A
.text:000000000000854A loc_854A:                               ; CODE XREF: copy_internal+2B8C↓j
.text:000000000000854A                 mov     rdx, [rbp+filename]
.text:0000000000008551                 mov     esi, 4
.text:0000000000008556                 mov     edi, 1
.text:000000000000855B                 call    quotearg_n_style
.text:0000000000008560                 mov     rdx, [rbp+file]
.text:0000000000008567                 mov     r12, rax
.text:000000000000856A                 mov     esi, 4
.text:000000000000856F                 xor     edi, edi
.text:0000000000008571                 call    quotearg_n_style
.text:0000000000008576                 mov     r8, r12
.text:0000000000008579                 mov     rcx, rax
.text:000000000000857C                 mov     rdx, rbx        ; format
.text:000000000000857F                 xor     esi, esi        ; errnum
.text:0000000000008581                 xor     edi, edi        ; status
.text:0000000000008583                 xor     eax, eax
.text:0000000000008585                 call    _error
.text:000000000000858A                 xor     r12d, r12d
.text:000000000000858D                 jmp     loc_6466
.text:0000000000008592 ; ---------------------------------------------------------------------------
.text:0000000000008592
.text:0000000000008592 loc_8592:                               ; CODE XREF: copy_internal+18B1↑j
.text:0000000000008592                 mov     r12d, [rbp+var_35C]
.text:0000000000008599                 mov     rsi, [rbp+file] ; path
.text:00000000000085A0                 lea     rcx, [rbp+var_2F8] ; dev
.text:00000000000085A7                 xor     edi, edi        ; ver
.text:00000000000085A9                 mov     byte ptr [rbp+fildes], r8b
.text:00000000000085B0                 mov     [rbp+var_2F8], 0
.text:00000000000085BB                 not     r12d
.text:00000000000085BE                 and     r12d, [rbp+var_314]
.text:00000000000085C5                 mov     edx, r12d       ; mode
.text:00000000000085C8                 call    ___xmknod
.text:00000000000085CD                 test    eax, eax
.text:00000000000085CF                 movzx   r8d, byte ptr [rbp+fildes]
.text:00000000000085D7                 jz      loc_619F
.text:00000000000085DD                 mov     rdi, [rbp+file] ; path
.text:00000000000085E4                 mov     esi, r12d
.text:00000000000085E7                 and     esi, 0FFFFEFFFh ; mode
.text:00000000000085ED                 call    _mkfifo
.text:00000000000085F2                 test    eax, eax
.text:00000000000085F4                 movzx   r8d, byte ptr [rbp+fildes]
.text:00000000000085FC                 jz      loc_619F
.text:0000000000008602                 mov     rsi, [rbp+file]
.text:0000000000008609                 mov     edi, 4
.text:000000000000860E                 call    quotearg_style
.text:0000000000008613                 mov     edx, 5
.text:0000000000008618                 mov     r13, rax
.text:000000000000861B                 lea     rsi, aCannotCreateFi ; "cannot create fifo %s"
.text:0000000000008622                 jmp     loc_70FF
.text:0000000000008627 ; ---------------------------------------------------------------------------
.text:0000000000008627
.text:0000000000008627 loc_8627:                               ; CODE XREF: copy_internal+20E8↑j
.text:0000000000008627                 mov     rsi, [rbp+filename]
.text:000000000000862E                 mov     edi, 4
.text:0000000000008633                 call    quotearg_style
.text:0000000000008638                 lea     rsi, aCannotFstatS ; "cannot fstat %s"
.text:000000000000863F                 mov     edx, 5          ; category
.text:0000000000008644                 mov     r12, rax
.text:0000000000008647                 xor     edi, edi        ; domainname
.text:0000000000008649                 call    _dcgettext
.text:000000000000864E                 mov     qword ptr [rbp+fd], rax
.text:0000000000008655                 call    ___errno_location
.text:000000000000865A                 mov     rcx, r12
.text:000000000000865D                 mov     rdx, qword ptr [rbp+fd]
.text:0000000000008664                 mov     esi, [rax]
.text:0000000000008666                 jmp     loc_7D61
.text:000000000000866B ; ---------------------------------------------------------------------------
.text:000000000000866B
.text:000000000000866B loc_866B:                               ; CODE XREF: copy_internal+168F↑j
.text:000000000000866B                 mov     rsi, [rbp+file]
.text:0000000000008672                 mov     rdi, [rbp+filename]
.text:0000000000008679                 mov     byte ptr [rbp+var_35C], r9b
.text:0000000000008680                 mov     byte ptr [rbp+s2], r8b
.text:0000000000008687                 mov     [rbp+old], rdx
.text:000000000000868E                 call    same_name
.text:0000000000008693                 test    al, al
.text:0000000000008695                 mov     rdx, [rbp+old]
.text:000000000000869C                 movzx   r8d, byte ptr [rbp+s2]
.text:00000000000086A4                 movzx   r9d, byte ptr [rbp+var_35C]
.text:00000000000086AC                 jz      loc_8F27
.text:00000000000086B2                 mov     eax, [rdx+18h]
.text:00000000000086B5                 and     eax, 0F000h
.text:00000000000086BA                 cmp     eax, 0A000h
.text:00000000000086BF                 jz      loc_72EC
.text:00000000000086C5
.text:00000000000086C5 loc_86C5:                               ; CODE XREF: copy_internal+1ABC↑j
.text:00000000000086C5                 mov     eax, [r12+18h]
.text:00000000000086CA                 and     eax, 0F000h
.text:00000000000086CF                 cmp     eax, 0A000h
.text:00000000000086D4                 jz      loc_72EC
.text:00000000000086DA                 jmp     loc_72C4
.text:00000000000086DA ; ---------------------------------------------------------------------------
.text:00000000000086DF                 align 20h
.text:00000000000086E0
.text:00000000000086E0 loc_86E0:                               ; CODE XREF: copy_internal+2506↑j
.text:00000000000086E0                 movzx   esi, byte ptr [rbx+25h]
.text:00000000000086E4                 mov     rdi, [rbp+file]
.text:00000000000086EB                 xor     edx, edx
.text:00000000000086ED                 mov     rcx, rbx
.text:00000000000086F0                 call    set_file_security_ctx
.text:00000000000086F5                 test    al, al
.text:00000000000086F7                 jnz     loc_812C
.text:00000000000086FD                 cmp     byte ptr [rbx+26h], 0
.text:0000000000008701                 jnz     loc_6BB0
.text:0000000000008707                 jmp     loc_812C
.text:000000000000870C ; ---------------------------------------------------------------------------
.text:000000000000870C
.text:000000000000870C loc_870C:                               ; CODE XREF: copy_internal+1CF2↑j
.text:000000000000870C                 mov     rdx, [rbp+var_1F0.st_dev]
.text:0000000000008713                 mov     rsi, [rbp+var_1F0.st_ino]
.text:000000000000871A                 mov     rdi, [rbp+file] ; src
.text:0000000000008721                 call    remember_copied
.text:0000000000008726                 mov     rax, [rbp+format]
.text:000000000000872D                 mov     byte ptr [rax], 1
.text:0000000000008730                 jmp     loc_7918
.text:0000000000008735 ; ---------------------------------------------------------------------------
.text:0000000000008735
.text:0000000000008735 loc_8735:                               ; CODE XREF: copy_internal+17C7↑j
.text:0000000000008735                 mov     rdx, [rbp+filename]
.text:000000000000873C                 mov     esi, 4
.text:0000000000008741                 mov     edi, 1
.text:0000000000008746                 call    quotearg_n_style
.text:000000000000874B                 mov     rdx, [rbp+file]
.text:0000000000008752                 mov     esi, 4
.text:0000000000008757                 xor     edi, edi
.text:0000000000008759                 mov     r12, rax
.text:000000000000875C                 call    quotearg_n_style
.text:0000000000008761                 mov     edx, 5
.text:0000000000008766                 mov     rbx, rax
.text:0000000000008769                 lea     rsi, aWillNotOverwri ; "will not overwrite just-created %s with"...
.text:0000000000008770                 jmp     loc_725B
.text:0000000000008775 ; ---------------------------------------------------------------------------
.text:0000000000008775
.text:0000000000008775 loc_8775:                               ; CODE XREF: copy_internal+75F↑j
.text:0000000000008775                 mov     edx, [rbx+10h]
.text:0000000000008778
.text:0000000000008778 loc_8778:                               ; CODE XREF: copy_internal+2E31↓j
.text:0000000000008778                 mov     rdi, [rbp+file]
.text:000000000000877F                 mov     esi, 0FFFFFFFFh
.text:0000000000008784                 call    set_acl
.text:0000000000008789                 test    eax, eax
.text:000000000000878B                 jnz     loc_5F30
.text:0000000000008791                 jmp     loc_6466
.text:0000000000008796 ; ---------------------------------------------------------------------------
.text:0000000000008796
.text:0000000000008796 loc_8796:                               ; CODE XREF: copy_internal+290E↑j
.text:0000000000008796                 lea     rsi, aBackingUpSMigh_0 ; "backing up %s might destroy source;  %s"...
.text:000000000000879D                 mov     edx, 5          ; category
.text:00000000000087A2                 xor     edi, edi        ; domainname
.text:00000000000087A4                 call    _dcgettext
.text:00000000000087A9                 mov     rbx, rax
.text:00000000000087AC                 jmp     loc_854A
.text:00000000000087B1 ; ---------------------------------------------------------------------------
.text:00000000000087B1
.text:00000000000087B1 loc_87B1:                               ; CODE XREF: copy_internal+272B↑j
.text:00000000000087B1                 mov     [rbp+old], 0
.text:00000000000087BC                 mov     r14d, 1
.text:00000000000087C2                 mov     r15d, 11h
.text:00000000000087C8                 jmp     loc_5FAE
.text:00000000000087CD ; ---------------------------------------------------------------------------
.text:00000000000087CD
.text:00000000000087CD loc_87CD:                               ; CODE XREF: copy_internal+1D02↑j
.text:00000000000087CD                 mov     rsi, [rbp+file]
.text:00000000000087D4                 mov     rdi, [rbp+filename]
.text:00000000000087DB                 xor     edx, edx
.text:00000000000087DD                 call    emit_verbose
.text:00000000000087E2                 jmp     loc_7968
.text:00000000000087E7 ; ---------------------------------------------------------------------------
.text:00000000000087E7
.text:00000000000087E7 loc_87E7:                               ; CODE XREF: copy_internal+2174↑j
.text:00000000000087E7                 mov     rsi, [rbp+filename]
.text:00000000000087EE                 mov     edi, 4
.text:00000000000087F3                 call    quotearg_style
.text:00000000000087F8                 lea     rsi, aFailedToCloseS ; "failed to close %s"
.text:00000000000087FF                 xor     edi, edi        ; domainname
.text:0000000000008801                 mov     edx, 5          ; category
.text:0000000000008806                 mov     r12, rax
.text:0000000000008809                 call    _dcgettext
.text:000000000000880E                 mov     r13, rax
.text:0000000000008811                 call    ___errno_location
.text:0000000000008816                 mov     esi, [rax]      ; errnum
.text:0000000000008818                 xor     edi, edi        ; status
.text:000000000000881A                 mov     rcx, r12
.text:000000000000881D                 mov     rdx, r13        ; format
.text:0000000000008820                 xor     eax, eax
.text:0000000000008822                 call    _error
.text:0000000000008827                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000882E                 call    free
.text:0000000000008833                 jmp     loc_6BB0
.text:0000000000008838 ; ---------------------------------------------------------------------------
.text:0000000000008838
.text:0000000000008838 loc_8838:                               ; CODE XREF: copy_internal+1DB6↑j
.text:0000000000008838                 mov     rsi, [rbp+filename]
.text:000000000000883F                 mov     edi, 4
.text:0000000000008844                 call    quotearg_style
.text:0000000000008849                 lea     rsi, aCannotAccessS ; "cannot access %s"
.text:0000000000008850                 mov     edx, 5          ; category
.text:0000000000008855                 xor     edi, edi        ; domainname
.text:0000000000008857                 mov     r12, rax
.text:000000000000885A                 call    _dcgettext
.text:000000000000885F                 mov     r15, rax
.text:0000000000008862                 call    ___errno_location
.text:0000000000008867                 mov     esi, [rax]      ; errnum
.text:0000000000008869                 mov     rcx, r12
.text:000000000000886C                 mov     rdx, r15        ; format
.text:000000000000886F                 xor     edi, edi        ; status
.text:0000000000008871                 xor     eax, eax
.text:0000000000008873                 xor     r12d, r12d
.text:0000000000008876                 call    _error
.text:000000000000887B                 jmp     loc_7B63
.text:0000000000008880 ; ---------------------------------------------------------------------------
.text:0000000000008880
.text:0000000000008880 loc_8880:                               ; CODE XREF: copy_internal+18DC↑j
.text:0000000000008880                 mov     rsi, [rbp+stat_buf.st_size]
.text:0000000000008887                 mov     rdi, [rbp+filename] ; path
.text:000000000000888E                 call    areadlink_with_size
.text:0000000000008893                 test    rax, rax
.text:0000000000008896                 mov     r12, rax
.text:0000000000008899                 jz      loc_90E3
.text:000000000000889F                 movzx   ecx, byte ptr [rbx+16h]
.text:00000000000088A3                 mov     rdx, [rbp+file]
.text:00000000000088AA                 mov     r8d, 0FFFFFFFFh
.text:00000000000088B0                 mov     esi, 0FFFFFF9Ch
.text:00000000000088B5                 mov     rdi, rax
.text:00000000000088B8                 call    force_symlinkat
.text:00000000000088BD                 test    eax, eax
.text:00000000000088BF                 mov     [rbp+fildes], eax
.text:00000000000088C5                 jle     loc_9108
.text:00000000000088CB                 cmp     byte ptr [rbx+2Dh], 1
.text:00000000000088CF                 jnz     short loc_88DA
.text:00000000000088D1                 test    r14b, r14b
.text:00000000000088D4                 jz      loc_94B9
.text:00000000000088DA
.text:00000000000088DA loc_88DA:                               ; CODE XREF: copy_internal+2CAF↑j
.text:00000000000088DA                                         ; copy_internal+38A9↓j ...
.text:00000000000088DA                 mov     rdi, r12        ; ptr
.text:00000000000088DD                 call    free
.text:00000000000088E2                 mov     rsi, [rbp+file]
.text:00000000000088E9                 mov     edi, 4
.text:00000000000088EE                 call    quotearg_style
.text:00000000000088F3                 lea     rsi, aCannotCreateSy_0 ; "cannot create symbolic link %s"
.text:00000000000088FA                 xor     edi, edi        ; domainname
.text:00000000000088FC                 mov     edx, 5          ; category
.text:0000000000008901                 mov     r12, rax
.text:0000000000008904                 call    _dcgettext
.text:0000000000008909                 mov     esi, [rbp+fildes] ; errnum
.text:000000000000890F                 mov     rdx, rax        ; format
.text:0000000000008912                 mov     rcx, r12
.text:0000000000008915                 xor     edi, edi        ; status
.text:0000000000008917                 xor     eax, eax
.text:0000000000008919                 call    _error
.text:000000000000891E                 jmp     loc_6BB0
.text:0000000000008923 ; ---------------------------------------------------------------------------
.text:0000000000008923
.text:0000000000008923 loc_8923:                               ; CODE XREF: copy_internal+1CE2↑j
.text:0000000000008923                 mov     rsi, [rbp+file]
.text:000000000000892A                 mov     edi, 4
.text:000000000000892F                 call    quotearg_style
.text:0000000000008934                 mov     edx, 5
.text:0000000000008939                 mov     r13, rax
.text:000000000000893C                 lea     rsi, aSettingPermiss ; "setting permissions for %s"
.text:0000000000008943                 jmp     loc_70FF
.text:0000000000008948 ; ---------------------------------------------------------------------------
.text:0000000000008948
.text:0000000000008948 loc_8948:                               ; CODE XREF: copy_internal+2784↑j
.text:0000000000008948                 cmp     qword ptr [rbx+40h], 0
.text:000000000000894D                 mov     r14d, r13d
.text:0000000000008950                 mov     [rbp+old], 0
.text:000000000000895B                 mov     r15d, 11h
.text:0000000000008961                 jnz     loc_5FC2
.text:0000000000008967                 jmp     loc_6089
.text:000000000000896C ; ---------------------------------------------------------------------------
.text:000000000000896C
.text:000000000000896C loc_896C:                               ; CODE XREF: copy_internal+277B↑j
.text:000000000000896C                 mov     rsi, [rbp+file]
.text:0000000000008973                 mov     edi, 4
.text:0000000000008978                 mov     byte ptr [rbp+s2], r9b
.text:000000000000897F                 mov     r15d, 11h
.text:0000000000008985                 call    quotearg_style
.text:000000000000898A                 lea     rsi, aRemovedS  ; "removed %s\n"
.text:0000000000008991                 mov     r12, rax
.text:0000000000008994                 mov     edx, 5          ; category
.text:0000000000008999                 xor     edi, edi        ; domainname
.text:000000000000899B                 call    _dcgettext
.text:00000000000089A0                 mov     rdx, r12
.text:00000000000089A3                 mov     rsi, rax
.text:00000000000089A6                 mov     edi, 1
.text:00000000000089AB                 xor     eax, eax
.text:00000000000089AD                 call    ___printf_chk
.text:00000000000089B2                 mov     [rbp+old], 0
.text:00000000000089BD                 movzx   r9d, byte ptr [rbp+s2]
.text:00000000000089C5                 jmp     loc_5FAE
.text:00000000000089CA ; ---------------------------------------------------------------------------
.text:00000000000089CA
.text:00000000000089CA loc_89CA:                               ; CODE XREF: copy_internal+6FC↑j
.text:00000000000089CA                 mov     eax, [rbp+var_1F0.st_gid]
.text:00000000000089D0                 cmp     [rbp+stat_buf.st_gid], eax
.text:00000000000089D6                 jnz     loc_6322
.text:00000000000089DC                 jmp     loc_6367
.text:00000000000089E1 ; ---------------------------------------------------------------------------
.text:00000000000089E1
.text:00000000000089E1 loc_89E1:                               ; CODE XREF: copy_internal+777↑j
.text:00000000000089E1                 call    cached_umask
.text:00000000000089E6                 not     eax
.text:00000000000089E8                 and     [rbp+var_35C], eax
.text:00000000000089EE                 jz      loc_639D
.text:00000000000089F4                 cmp     [rbp+var_315], 1
.text:00000000000089FB                 jz      loc_63AA
.text:0000000000008A01                 test    r14b, r14b
.text:0000000000008A04                 jnz     loc_9377
.text:0000000000008A0A
.text:0000000000008A0A loc_8A0A:                               ; CODE XREF: copy_internal+3771↓j
.text:0000000000008A0A                 mov     eax, [rbp+var_1F0.st_mode]
.text:0000000000008A10                 mov     [rbp+var_38C], eax
.text:0000000000008A16                 not     eax
.text:0000000000008A18                 test    [rbp+var_35C], eax
.text:0000000000008A1E                 jnz     loc_63AA
.text:0000000000008A24                 jmp     loc_6466
.text:0000000000008A29 ; ---------------------------------------------------------------------------
.text:0000000000008A29
.text:0000000000008A29 loc_8A29:                               ; CODE XREF: copy_internal+769↑j
.text:0000000000008A29                 mov     eax, [rbp+var_314]
.text:0000000000008A2F                 mov     edx, 1B6h
.text:0000000000008A34                 mov     ebx, 1FFh
.text:0000000000008A39                 and     eax, 7000h
.text:0000000000008A3E                 cmp     eax, 4000h
.text:0000000000008A43                 cmovnz  ebx, edx
.text:0000000000008A46                 call    cached_umask
.text:0000000000008A4B                 not     eax
.text:0000000000008A4D                 mov     edx, eax
.text:0000000000008A4F                 and     edx, ebx
.text:0000000000008A51                 jmp     loc_8778
.text:0000000000008A56 ; ---------------------------------------------------------------------------
.text:0000000000008A56
.text:0000000000008A56 loc_8A56:                               ; CODE XREF: copy_internal+210C↑j
.text:0000000000008A56                 and     r12d, 1FFh
.text:0000000000008A5D                 test    r14b, r14b
.text:0000000000008A60                 mov     [rbp+var_3A4], r12d
.text:0000000000008A67                 jnz     loc_9000
.text:0000000000008A6D                 cmp     byte ptr [rbx+23h], 1
.text:0000000000008A71                 mov     rdi, [rbp+file]
.text:0000000000008A78                 sbb     esi, esi
.text:0000000000008A7A                 xor     eax, eax
.text:0000000000008A7C                 and     esi, 0FFFFFE00h
.text:0000000000008A82                 add     esi, 201h
.text:0000000000008A88                 call    open_safer
.text:0000000000008A8D                 mov     [rbp+fd], eax
.text:0000000000008A93                 call    ___errno_location
.text:0000000000008A98                 mov     r12, rax
.text:0000000000008A9B                 mov     rax, 0FF000000FF00h
.text:0000000000008AA5                 test    [rbx+20h], rax
.text:0000000000008AA9                 jnz     loc_9335
.text:0000000000008AAF                 cmp     [rbp+fd], 0
.text:0000000000008AB6                 js      loc_9342
.text:0000000000008ABC
.text:0000000000008ABC loc_8ABC:                               ; CODE XREF: copy_internal+3988↓j
.text:0000000000008ABC                                         ; copy_internal+39A3↓j
.text:0000000000008ABC                 mov     dword ptr [rbp+var_378], 0
.text:0000000000008AC6
.text:0000000000008AC6 loc_8AC6:                               ; CODE XREF: copy_internal+3963↓j
.text:0000000000008AC6                 lea     rax, [rbp+var_D0]
.text:0000000000008ACD                 mov     esi, [rbp+fd]   ; fildes
.text:0000000000008AD3                 mov     edi, 1          ; ver
.text:0000000000008AD8                 mov     rdx, rax        ; stat_buf
.text:0000000000008ADB                 mov     [rbp+s], rax
.text:0000000000008AE2                 call    ___fxstat
.text:0000000000008AE7                 test    eax, eax
.text:0000000000008AE9                 mov     dword ptr [rbp+var_348], eax
.text:0000000000008AEF                 jnz     loc_9696
.text:0000000000008AF5                 cmp     byte ptr [rbp+format], 0
.text:0000000000008AFC                 jz      loc_91CF
.text:0000000000008B02                 cmp     dword ptr [rbx+38h], 0
.text:0000000000008B06                 jnz     loc_9964
.text:0000000000008B0C
.text:0000000000008B0C loc_8B0C:                               ; CODE XREF: copy_internal+3D68↓j
.text:0000000000008B0C                 call    _getpagesize
.text:0000000000008B11                 mov     rcx, [rbp+var_D0.st_blksize]
.text:0000000000008B18                 movsxd  r12, eax
.text:0000000000008B1B                 mov     rax, 1FFFFFFFFFFE0000h
.text:0000000000008B25                 mov     r8d, 200h
.text:0000000000008B2B                 mov     edi, [rbp+fildes] ; fd
.text:0000000000008B31                 mov     [rbp+ptr], r8
.text:0000000000008B38                 lea     rdx, [rcx-20000h]
.text:0000000000008B3F                 cmp     rdx, rax
.text:0000000000008B42                 mov     eax, 20000h
.text:0000000000008B47                 lea     rdx, [rcx-1]
.text:0000000000008B4B                 cmovbe  rax, rcx
.text:0000000000008B4F                 mov     [rbp+var_370], rax
.text:0000000000008B56                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:0000000000008B60                 cmp     rdx, rax
.text:0000000000008B63                 cmova   rcx, r8
.text:0000000000008B67                 xor     edx, edx        ; len
.text:0000000000008B69                 xor     esi, esi        ; offset
.text:0000000000008B6B                 mov     [rbp+var_398], rcx
.text:0000000000008B72                 mov     ecx, 2          ; advise
.text:0000000000008B77                 call    fdadvise
.text:0000000000008B7C                 mov     r9d, [rbp+var_160.st_mode]
.text:0000000000008B83                 mov     r8, [rbp+ptr]
.text:0000000000008B8A                 and     r9d, 0F000h
.text:0000000000008B91                 cmp     r9d, 8000h
.text:0000000000008B98                 jz      loc_9A7A
.text:0000000000008B9E
.text:0000000000008B9E loc_8B9E:                               ; CODE XREF: copy_internal+3E79↓j
.text:0000000000008B9E                 mov     eax, [rbp+var_D0.st_mode]
.text:0000000000008BA4                 and     eax, 0F000h
.text:0000000000008BA9                 cmp     eax, 8000h
.text:0000000000008BAE                 jz      loc_9A0F
.text:0000000000008BB4
.text:0000000000008BB4 loc_8BB4:                               ; CODE XREF: copy_internal+3DFE↓j
.text:0000000000008BB4                                         ; copy_internal+3E0B↓j
.text:0000000000008BB4                 mov     rdi, [rbp+var_160.st_blksize]
.text:0000000000008BBB                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:0000000000008BC5                 mov     rsi, [rbp+var_370]
.text:0000000000008BCC                 sub     rax, r12
.text:0000000000008BCF                 mov     dword ptr [rbp+length], r9d
.text:0000000000008BD6                 mov     r8, rax
.text:0000000000008BD9                 mov     rax, 1FFFFFFFFFFE0000h
.text:0000000000008BE3                 lea     rdx, [rdi-20000h]
.text:0000000000008BEA                 mov     [rbp+ptr], r8
.text:0000000000008BF1                 cmp     rdx, rax
.text:0000000000008BF4                 mov     eax, 20000h
.text:0000000000008BF9                 mov     rdx, r8
.text:0000000000008BFC                 cmova   rdi, rax
.text:0000000000008C00                 call    buffer_lcm
.text:0000000000008C05                 mov     r9d, dword ptr [rbp+length]
.text:0000000000008C0C                 mov     rcx, rax
.text:0000000000008C0F                 mov     r8, [rbp+ptr]
.text:0000000000008C16                 cmp     r9d, 8000h
.text:0000000000008C1D                 jz      loc_98ED
.text:0000000000008C23
.text:0000000000008C23 loc_8C23:                               ; CODE XREF: copy_internal+3CDB↓j
.text:0000000000008C23                                         ; copy_internal+3CEC↓j
.text:0000000000008C23                 mov     rax, [rbp+var_370]
.text:0000000000008C2A                 xor     edx, edx
.text:0000000000008C2C                 lea     rsi, [rcx+rax-1]
.text:0000000000008C31                 mov     rax, rsi
.text:0000000000008C34                 div     rcx
.text:0000000000008C37                 sub     rsi, rdx
.text:0000000000008C3A                 mov     [rbp+var_370], rsi
.text:0000000000008C41                 jz      loc_96F1
.text:0000000000008C47                 cmp     rsi, r8
.text:0000000000008C4A                 ja      loc_96F1
.text:0000000000008C50
.text:0000000000008C50 loc_8C50:                               ; CODE XREF: copy_internal+3AD8↓j
.text:0000000000008C50                 mov     rax, [rbp+var_370]
.text:0000000000008C57                 lea     rdi, [r12+rax]
.text:0000000000008C5B                 call    xmalloc
.text:0000000000008C60                 lea     rcx, [rax+r12-1]
.text:0000000000008C65                 xor     edx, edx
.text:0000000000008C67                 mov     [rbp+ptr], rax
.text:0000000000008C6E                 mov     rax, rcx
.text:0000000000008C71                 div     r12
.text:0000000000008C74                 sub     rcx, rdx
.text:0000000000008C77                 cmp     dword ptr [rbp+var_348], 0
.text:0000000000008C7E                 mov     [rbp+var_3B0], rcx
.text:0000000000008C85                 jz      loc_96FD
.text:0000000000008C8B                 mov     [rbp+var_3A5], 0
.text:0000000000008C92                 mov     [rbp+var_390], 1
.text:0000000000008C9C
.text:0000000000008C9C loc_8C9C:                               ; CODE XREF: copy_internal+3E55↓j
.text:0000000000008C9C                 mov     rax, [rbp+var_160.st_size]
.text:0000000000008CA3                 mov     edi, [rbp+fildes]
.text:0000000000008CA9                 xor     r12d, r12d
.text:0000000000008CAC                 mov     [rbp+length], rax
.text:0000000000008CB3                 lea     rax, [rbp+dev]
.text:0000000000008CBA                 mov     rsi, rax
.text:0000000000008CBD                 mov     [rbp+var_348], rax
.text:0000000000008CC4                 call    extent_scan_init
.text:0000000000008CC9                 lea     rax, [rbp+var_2F9]
.text:0000000000008CD0                 xor     ecx, ecx
.text:0000000000008CD2                 mov     [rbp+var_388], rbx
.text:0000000000008CD9                 mov     [rbp+var_3A0], 0
.text:0000000000008CE4                 mov     rbx, rcx
.text:0000000000008CE7                 mov     [rbp+var_360], r13d
.text:0000000000008CEE                 mov     [rbp-3B8h], rax
.text:0000000000008CF5                 lea     rax, [rbp+var_2F8]
.text:0000000000008CFC                 mov     [rbp+var_3C0], rax
.text:0000000000008D03
.text:0000000000008D03 loc_8D03:                               ; CODE XREF: copy_internal+3BF7↓j
.text:0000000000008D03                 mov     rdi, [rbp+var_348]
.text:0000000000008D0A                 call    extent_scan_read
.text:0000000000008D0F                 test    al, al
.text:0000000000008D11                 jz      loc_9911
.text:0000000000008D17                 cmp     qword ptr [rbp+var_2E0+8], 0
.text:0000000000008D1F                 jz      loc_97EE
.text:0000000000008D25                 mov     rdx, rbx
.text:0000000000008D28                 mov     rcx, r12
.text:0000000000008D2B                 xor     r13d, r13d
.text:0000000000008D2E                 xor     eax, eax
.text:0000000000008D30                 jmp     loc_8DED
.text:0000000000008D30 ; ---------------------------------------------------------------------------
.text:0000000000008D35                 align 8
.text:0000000000008D38
.text:0000000000008D38 loc_8D38:                               ; CODE XREF: copy_internal+3213↓j
.text:0000000000008D38                                         ; copy_internal+3272↓j
.text:0000000000008D38                 cmp     [rbp+var_390], 3
.text:0000000000008D3F                 mov     r8d, 0
.text:0000000000008D45                 cmovz   r8, [rbp+var_398]
.text:0000000000008D4D
.text:0000000000008D4D loc_8D4D:                               ; CODE XREF: copy_internal+39C1↓j
.text:0000000000008D4D                 sub     rsp, 8
.text:0000000000008D51                 mov     rcx, [rbp+var_370]
.text:0000000000008D58                 mov     rdx, [rbp+var_3B0]
.text:0000000000008D5F                 mov     esi, [rbp+fd]
.text:0000000000008D65                 mov     edi, [rbp+fildes]
.text:0000000000008D6B                 mov     r9d, 1
.text:0000000000008D71                 push    qword ptr [rbp-3B8h]
.text:0000000000008D77                 push    [rbp+var_3C0]
.text:0000000000008D7D                 push    rbx
.text:0000000000008D7E                 push    [rbp+file]
.text:0000000000008D84                 push    [rbp+filename]
.text:0000000000008D8A                 call    sparse_copy
.text:0000000000008D8F                 add     rsp, 30h
.text:0000000000008D93                 test    al, al
.text:0000000000008D95                 jz      loc_8E98
.text:0000000000008D9B                 mov     rax, [rbp+var_2F8]
.text:0000000000008DA2                 lea     rcx, [r12+rax]
.text:0000000000008DA6                 test    rax, rax
.text:0000000000008DA9                 mov     [rbp+var_3A0], rcx
.text:0000000000008DB0                 jz      short loc_8DBF
.text:0000000000008DB2                 movzx   eax, [rbp+var_2F9]
.text:0000000000008DB9                 mov     byte ptr [rbp+format], al
.text:0000000000008DBF
.text:0000000000008DBF loc_8DBF:                               ; CODE XREF: copy_internal+3190↑j
.text:0000000000008DBF                 mov     rcx, [rbp+var_3A0]
.text:0000000000008DC6                 cmp     [rbp+length], rcx
.text:0000000000008DCD                 jz      loc_97E7
.text:0000000000008DD3                 lea     eax, [r13+1]
.text:0000000000008DD7                 cmp     rax, qword ptr [rbp+var_2E0+8]
.text:0000000000008DDE                 mov     rcx, r12
.text:0000000000008DE1                 mov     rdx, rbx
.text:0000000000008DE4                 mov     r13, rax
.text:0000000000008DE7                 jnb     loc_97EE
.text:0000000000008DED
.text:0000000000008DED loc_8DED:                               ; CODE XREF: copy_internal+3110↑j
.text:0000000000008DED                 lea     rsi, [rax+rax*2]
.text:0000000000008DF1                 mov     rax, [rbp+var_2D0+8]
.text:0000000000008DF8                 lea     rax, [rax+rsi*8]
.text:0000000000008DFC                 mov     rsi, [rbp+length]
.text:0000000000008E03                 mov     r12, [rax]
.text:0000000000008E06                 mov     rbx, [rax+8]
.text:0000000000008E0A                 lea     rax, [r12+rbx]
.text:0000000000008E0E                 cmp     rsi, rax
.text:0000000000008E11                 jge     short loc_8E20
.text:0000000000008E13                 cmp     r12, rsi
.text:0000000000008E16                 cmovg   r12, rsi
.text:0000000000008E1A                 sub     rsi, r12
.text:0000000000008E1D                 mov     rbx, rsi
.text:0000000000008E20
.text:0000000000008E20 loc_8E20:                               ; CODE XREF: copy_internal+31F1↑j
.text:0000000000008E20                 mov     rax, r12
.text:0000000000008E23                 mov     byte ptr [rbp+format], 0
.text:0000000000008E2A                 sub     rax, rcx
.text:0000000000008E2D                 mov     rcx, rax
.text:0000000000008E30                 sub     rcx, rdx
.text:0000000000008E33                 jz      loc_8D38
.text:0000000000008E39                 mov     edi, [rbp+fildes] ; fd
.text:0000000000008E3F                 xor     edx, edx        ; whence
.text:0000000000008E41                 mov     rsi, r12        ; offset
.text:0000000000008E44                 mov     [rbp+var_3A0], rcx
.text:0000000000008E4B                 call    _lseek
.text:0000000000008E50                 test    rax, rax
.text:0000000000008E53                 mov     rcx, [rbp+var_3A0]
.text:0000000000008E5A                 js      loc_9CCF
.text:0000000000008E60                 mov     eax, [rbp+var_390]
.text:0000000000008E66                 cmp     eax, 3
.text:0000000000008E69                 setz    dl
.text:0000000000008E6C                 sub     eax, 1
.text:0000000000008E6F                 jz      loc_95C8
.text:0000000000008E75                 mov     rsi, [rbp+file]
.text:0000000000008E7C                 mov     edi, [rbp+fd]
.text:0000000000008E82                 movzx   edx, dl
.text:0000000000008E85                 call    create_hole
.text:0000000000008E8A                 test    al, al
.text:0000000000008E8C                 mov     byte ptr [rbp+format], al
.text:0000000000008E92                 jnz     loc_8D38
.text:0000000000008E98
.text:0000000000008E98 loc_8E98:                               ; CODE XREF: copy_internal+3175↑j
.text:0000000000008E98                 mov     rbx, [rbp+var_388]
.text:0000000000008E9F                 mov     r13d, [rbp+var_360]
.text:0000000000008EA6
.text:0000000000008EA6 loc_8EA6:                               ; CODE XREF: copy_internal+3F2B↓j
.text:0000000000008EA6                 mov     rdi, [rbp+var_2D0+8] ; ptr
.text:0000000000008EAD                 call    free
.text:0000000000008EB2
.text:0000000000008EB2 loc_8EB2:                               ; CODE XREF: copy_internal+3610↓j
.text:0000000000008EB2                                         ; copy_internal+3A71↓j ...
.text:0000000000008EB2                 xor     r8d, r8d
.text:0000000000008EB5
.text:0000000000008EB5 loc_8EB5:                               ; CODE XREF: copy_internal+366F↓j
.text:0000000000008EB5                                         ; copy_internal+3691↓j ...
.text:0000000000008EB5                 mov     edi, [rbp+fd]   ; fd
.text:0000000000008EBB                 mov     byte ptr [rbp+format], r8b
.text:0000000000008EC2                 call    _close
.text:0000000000008EC7                 test    eax, eax
.text:0000000000008EC9                 movzx   r8d, byte ptr [rbp+format]
.text:0000000000008ED1                 jns     loc_7D78
.text:0000000000008ED7                 mov     rsi, [rbp+file]
.text:0000000000008EDE                 mov     edi, 4
.text:0000000000008EE3                 call    quotearg_style
.text:0000000000008EE8                 lea     rsi, aFailedToCloseS ; "failed to close %s"
.text:0000000000008EEF                 mov     edx, 5          ; category
.text:0000000000008EF4                 xor     edi, edi        ; domainname
.text:0000000000008EF6                 mov     r12, rax
.text:0000000000008EF9                 call    _dcgettext
.text:0000000000008EFE                 mov     qword ptr [rbp+fd], rax
.text:0000000000008F05                 call    ___errno_location
.text:0000000000008F0A                 mov     rdx, qword ptr [rbp+fd] ; format
.text:0000000000008F11                 mov     esi, [rax]      ; errnum
.text:0000000000008F13                 mov     rcx, r12
.text:0000000000008F16                 xor     edi, edi        ; status
.text:0000000000008F18                 xor     eax, eax
.text:0000000000008F1A                 call    _error
.text:0000000000008F1F                 xor     r8d, r8d
.text:0000000000008F22                 jmp     loc_7D78
.text:0000000000008F27 ; ---------------------------------------------------------------------------
.text:0000000000008F27
.text:0000000000008F27 loc_8F27:                               ; CODE XREF: copy_internal+2A8C↑j
.text:0000000000008F27                 movzx   r12d, byte ptr [rbx+18h]
.text:0000000000008F2C                 xor     r12d, 1
.text:0000000000008F30                 jmp     loc_739C
.text:0000000000008F35 ; ---------------------------------------------------------------------------
.text:0000000000008F35
.text:0000000000008F35 loc_8F35:                               ; CODE XREF: copy_internal+1DD6↑j
.text:0000000000008F35                 mov     [rbp+var_315], 0
.text:0000000000008F3C                 mov     r12d, 1
.text:0000000000008F42                 jmp     loc_7B47
.text:0000000000008F47 ; ---------------------------------------------------------------------------
.text:0000000000008F47
.text:0000000000008F47 loc_8F47:                               ; CODE XREF: copy_internal+221E↑j
.text:0000000000008F47                 mov     rax, [rbp+var_D0.st_dev]
.text:0000000000008F4E                 cmp     [rbp+var_160.st_dev], rax
.text:0000000000008F55                 jnz     loc_7E44
.text:0000000000008F5B                 jmp     loc_6B1C
.text:0000000000008F60 ; ---------------------------------------------------------------------------
.text:0000000000008F60
.text:0000000000008F60 loc_8F60:                               ; CODE XREF: copy_internal+372A↓j
.text:0000000000008F60                 mov     rdi, [rbp+file] ; name
.text:0000000000008F67                 call    _unlink
.text:0000000000008F6C                 test    eax, eax
.text:0000000000008F6E                 jnz     loc_9BA6
.text:0000000000008F74                 cmp     byte ptr [rbx+2Eh], 0
.text:0000000000008F78                 jz      short loc_8FB3
.text:0000000000008F7A                 mov     rsi, [rbp+file]
.text:0000000000008F81                 mov     edi, 4
.text:0000000000008F86                 call    quotearg_style
.text:0000000000008F8B                 lea     rsi, aRemovedS  ; "removed %s\n"
.text:0000000000008F92                 mov     r12, rax
.text:0000000000008F95                 mov     edx, 5          ; category
.text:0000000000008F9A                 xor     edi, edi        ; domainname
.text:0000000000008F9C                 call    _dcgettext
.text:0000000000008FA1                 mov     rdx, r12
.text:0000000000008FA4                 mov     rsi, rax
.text:0000000000008FA7                 mov     edi, 1
.text:0000000000008FAC                 xor     eax, eax
.text:0000000000008FAE                 call    ___printf_chk
.text:0000000000008FB3
.text:0000000000008FB3 loc_8FB3:                               ; CODE XREF: copy_internal+3358↑j
.text:0000000000008FB3                 movzx   r14d, byte ptr [rbx+21h]
.text:0000000000008FB8                 mov     eax, [rbp+var_35C]
.text:0000000000008FBE                 mov     dword ptr [rbp+var_378], eax
.text:0000000000008FC4                 test    r14b, r14b
.text:0000000000008FC7                 jz      short loc_900C
.text:0000000000008FC9                 mov     edx, [rbp+var_3A4]
.text:0000000000008FCF                 mov     rsi, [rbp+file]
.text:0000000000008FD6                 mov     r8, rbx
.text:0000000000008FD9                 mov     rdi, [rbp+filename]
.text:0000000000008FE0                 mov     ecx, 1
.text:0000000000008FE5                 call    set_process_security_ctx
.text:0000000000008FEA                 test    al, al
.text:0000000000008FEC                 mov     r8d, eax
.text:0000000000008FEF                 mov     [rbp+ptr], 0
.text:0000000000008FFA                 jz      loc_7D78
.text:0000000000009000
.text:0000000000009000 loc_9000:                               ; CODE XREF: copy_internal+2E47↑j
.text:0000000000009000                 mov     eax, [rbp+var_35C]
.text:0000000000009006                 mov     dword ptr [rbp+var_378], eax
.text:000000000000900C
.text:000000000000900C loc_900C:                               ; CODE XREF: copy_internal+33A7↑j
.text:000000000000900C                                         ; copy_internal+3752↓j
.text:000000000000900C                 mov     eax, dword ptr [rbp+var_378]
.text:0000000000009012                 mov     rdi, [rbp+file]
.text:0000000000009019                 mov     esi, 0C1h
.text:000000000000901E                 not     eax
.text:0000000000009020                 and     eax, [rbp+var_3A4]
.text:0000000000009026                 mov     edx, eax
.text:0000000000009028                 mov     dword ptr [rbp+ptr], eax
.text:000000000000902E                 xor     eax, eax
.text:0000000000009030                 call    open_safer
.text:0000000000009035                 mov     r14d, eax
.text:0000000000009038                 mov     [rbp+fd], eax
.text:000000000000903E                 call    ___errno_location
.text:0000000000009043                 mov     r8d, [rax]
.text:0000000000009046                 mov     r12, rax
.text:0000000000009049                 mov     eax, r14d
.text:000000000000904C                 shr     eax, 1Fh
.text:000000000000904F                 cmp     r8d, 11h
.text:0000000000009053                 setz    dl
.text:0000000000009056                 and     dl, al
.text:0000000000009058                 mov     r14d, edx
.text:000000000000905B                 jz      loc_9462
.text:0000000000009061                 cmp     byte ptr [rbx+18h], 0
.text:0000000000009065                 mov     r8d, 11h
.text:000000000000906B                 jz      loc_93F5
.text:0000000000009071
.text:0000000000009071 loc_9071:                               ; CODE XREF: copy_internal+3969↓j
.text:0000000000009071                 mov     r9d, 1
.text:0000000000009077
.text:0000000000009077 loc_9077:                               ; CODE XREF: copy_internal+3738↓j
.text:0000000000009077                                         ; copy_internal+3742↓j ...
.text:0000000000009077                 mov     rsi, [rbp+file]
.text:000000000000907E                 mov     edi, 4
.text:0000000000009083                 mov     byte ptr [rbp+ptr], r9b
.text:000000000000908A                 mov     [rbp+fd], r8d
.text:0000000000009091                 call    quotearg_style
.text:0000000000009096                 lea     rsi, aCannotCreateRe ; "cannot create regular file %s"
.text:000000000000909D                 mov     edx, 5          ; category
.text:00000000000090A2                 xor     edi, edi        ; domainname
.text:00000000000090A4                 mov     r12, rax
.text:00000000000090A7                 call    _dcgettext
.text:00000000000090AC                 mov     r8d, [rbp+fd]
.text:00000000000090B3                 mov     rdx, rax        ; format
.text:00000000000090B6                 mov     rcx, r12
.text:00000000000090B9                 xor     edi, edi        ; status
.text:00000000000090BB                 xor     eax, eax
.text:00000000000090BD                 mov     esi, r8d        ; errnum
.text:00000000000090C0                 call    _error
.text:00000000000090C5                 movzx   r9d, byte ptr [rbp+ptr]
.text:00000000000090CD                 xor     r8d, r8d
.text:00000000000090D0                 mov     [rbp+ptr], 0
.text:00000000000090DB                 mov     r14d, r9d
.text:00000000000090DE                 jmp     loc_7D78
.text:00000000000090E3 ; ---------------------------------------------------------------------------
.text:00000000000090E3
.text:00000000000090E3 loc_90E3:                               ; CODE XREF: copy_internal+2C79↑j
.text:00000000000090E3                 mov     rsi, [rbp+filename]
.text:00000000000090EA                 mov     edi, 4
.text:00000000000090EF                 call    quotearg_style
.text:00000000000090F4                 mov     edx, 5
.text:00000000000090F9                 mov     r13, rax
.text:00000000000090FC                 lea     rsi, aCannotReadSymb ; "cannot read symbolic link %s"
.text:0000000000009103                 jmp     loc_70FF
.text:0000000000009108 ; ---------------------------------------------------------------------------
.text:0000000000009108
.text:0000000000009108 loc_9108:                               ; CODE XREF: copy_internal+2CA5↑j
.text:0000000000009108                 mov     rdi, r12        ; ptr
.text:000000000000910B                 call    free
.text:0000000000009110
.text:0000000000009110 loc_9110:                               ; CODE XREF: copy_internal+3918↓j
.text:0000000000009110                 movzx   r8d, byte ptr [rbx+25h]
.text:0000000000009115                 test    r8b, r8b
.text:0000000000009118                 jnz     loc_6D30
.text:000000000000911E                 movzx   eax, byte ptr [rbx+1Dh]
.text:0000000000009122                 test    al, al
.text:0000000000009124                 mov     byte ptr [rbp+fildes], al
.text:000000000000912A                 jnz     loc_93A3
.text:0000000000009130                 movzx   r8d, byte ptr [rbp+fildes]
.text:0000000000009138                 mov     byte ptr [rbp+fildes], 1
.text:000000000000913F                 jmp     loc_619F
.text:0000000000009144 ; ---------------------------------------------------------------------------
.text:0000000000009144
.text:0000000000009144 loc_9144:                               ; CODE XREF: copy_internal+856↑j
.text:0000000000009144                 call    ___stack_chk_fail
.text:0000000000009149 ; ---------------------------------------------------------------------------
.text:0000000000009149
.text:0000000000009149 loc_9149:                               ; CODE XREF: copy_internal+1B6B↑j
.text:0000000000009149                 mov     rsi, [rbp+file] ; filename
.text:0000000000009150                 lea     rdx, [rbp+var_160] ; stat_buf
.text:0000000000009157                 mov     edi, 1          ; ver
.text:000000000000915C                 mov     byte ptr [rbp+s2], r9b
.text:0000000000009163                 mov     byte ptr [rbp+old], r8b
.text:000000000000916A                 call    ___xstat
.text:000000000000916F                 test    eax, eax
.text:0000000000009171                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000009179                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000009181                 jz      loc_7811
.text:0000000000009187                 jmp     loc_5E3F
.text:000000000000918C ; ---------------------------------------------------------------------------
.text:000000000000918C
.text:000000000000918C loc_918C:                               ; CODE XREF: copy_internal+1AF4↑j
.text:000000000000918C                 mov     rsi, [rbp+filename] ; filename
.text:0000000000009193                 lea     rdx, [rbp+var_D0] ; stat_buf
.text:000000000000919A                 mov     edi, 1          ; ver
.text:000000000000919F                 mov     byte ptr [rbp+s2], r9b
.text:00000000000091A6                 mov     byte ptr [rbp+old], r8b
.text:00000000000091AD                 call    ___xstat
.text:00000000000091B2                 test    eax, eax
.text:00000000000091B4                 movzx   r8d, byte ptr [rbp+old]
.text:00000000000091BC                 movzx   r9d, byte ptr [rbp+s2]
.text:00000000000091C4                 jz      loc_777C
.text:00000000000091CA                 jmp     loc_5E3F
.text:00000000000091CF ; ---------------------------------------------------------------------------
.text:00000000000091CF
.text:00000000000091CF loc_91CF:                               ; CODE XREF: copy_internal+2EDC↑j
.text:00000000000091CF                                         ; copy_internal+3D5E↓j
.text:00000000000091CF                 mov     [rbp+ptr], 0
.text:00000000000091DA
.text:00000000000091DA loc_91DA:                               ; CODE XREF: copy_internal+3B5A↓j
.text:00000000000091DA                                         ; copy_internal+3B74↓j ...
.text:00000000000091DA                 cmp     byte ptr [rbx+1Fh], 0
.text:00000000000091DE                 jnz     loc_95E6
.text:00000000000091E4
.text:00000000000091E4 loc_91E4:                               ; CODE XREF: copy_internal+3A19↓j
.text:00000000000091E4                                         ; copy_internal+3A6B↓j
.text:00000000000091E4                 cmp     byte ptr [rbx+1Dh], 0
.text:00000000000091E8                 jz      short loc_9244
.text:00000000000091EA                 mov     eax, [rbp+var_D0.st_uid]
.text:00000000000091F0                 cmp     [rbp+stat_buf.st_uid], eax
.text:00000000000091F6                 jnz     short loc_9206
.text:00000000000091F8                 mov     eax, [rbp+var_D0.st_gid]
.text:00000000000091FE                 cmp     [rbp+stat_buf.st_gid], eax
.text:0000000000009204                 jz      short loc_9244
.text:0000000000009206
.text:0000000000009206 loc_9206:                               ; CODE XREF: copy_internal+35D6↑j
.text:0000000000009206                 mov     r9, [rbp+s]
.text:000000000000920D                 mov     edx, [rbp+fd]
.text:0000000000009213                 lea     rcx, [rbp+stat_buf]
.text:000000000000921A                 mov     rsi, [rbp+file]
.text:0000000000009221                 movzx   r8d, r14b
.text:0000000000009225                 mov     rdi, rbx
.text:0000000000009228                 call    set_owner
.text:000000000000922D                 cmp     eax, 0FFFFFFFFh
.text:0000000000009230                 jz      loc_8EB2
.text:0000000000009236                 test    eax, eax
.text:0000000000009238                 jnz     short loc_9244
.text:000000000000923A                 and     dword ptr [rbp+var_340], 0FFFFF1FFh
.text:0000000000009244
.text:0000000000009244 loc_9244:                               ; CODE XREF: copy_internal+35C8↑j
.text:0000000000009244                                         ; copy_internal+35E4↑j ...
.text:0000000000009244                 cmp     byte ptr [rbx+27h], 0
.text:0000000000009248                 jz      short loc_9257
.text:000000000000924A                 test    byte ptr [rbp+var_D0.st_mode], 80h
.text:0000000000009251                 jz      loc_9C7E
.text:0000000000009257
.text:0000000000009257 loc_9257:                               ; CODE XREF: copy_internal+3628↑j
.text:0000000000009257                                         ; copy_internal+4065↓j ...
.text:0000000000009257                 mov     rax, 0FF0000000000FFh
.text:0000000000009261                 test    [rbx+18h], rax
.text:0000000000009265                 jnz     loc_953D
.text:000000000000926B                 cmp     byte ptr [rbx+2Bh], 0
.text:000000000000926F                 jnz     loc_9D02
.text:0000000000009275                 mov     r12d, r14d
.text:0000000000009278                 and     r12b, [rbx+20h]
.text:000000000000927C                 jnz     loc_9B77
.text:0000000000009282                 cmp     dword ptr [rbp+var_378], 0
.text:0000000000009289                 mov     r8d, 1
.text:000000000000928F                 jz      loc_8EB5
.text:0000000000009295                 mov     byte ptr [rbp+format], r8b
.text:000000000000929C                 call    cached_umask
.text:00000000000092A1                 not     eax
.text:00000000000092A3                 test    dword ptr [rbp+var_378], eax
.text:00000000000092A9                 movzx   r8d, byte ptr [rbp+format]
.text:00000000000092B1                 jz      loc_8EB5
.text:00000000000092B7                 mov     edx, [rbp+var_3A4]
.text:00000000000092BD                 mov     rsi, [rbp+file]
.text:00000000000092C4                 mov     edi, [rbp+fd]
.text:00000000000092CA                 call    fchmod_or_lchmod
.text:00000000000092CF                 test    eax, eax
.text:00000000000092D1                 movzx   r8d, byte ptr [rbp+format]
.text:00000000000092D9                 jz      loc_8EB5
.text:00000000000092DF                 mov     rsi, [rbp+file]
.text:00000000000092E6                 mov     edi, 4
.text:00000000000092EB                 call    quotearg_style
.text:00000000000092F0                 lea     rsi, aPreservingPerm ; "preserving permissions for %s"
.text:00000000000092F7                 mov     edx, 5          ; category
.text:00000000000092FC                 xor     edi, edi        ; domainname
.text:00000000000092FE                 mov     r12, rax
.text:0000000000009301                 call    _dcgettext
.text:0000000000009306                 mov     [rbp+format], rax
.text:000000000000930D                 call    ___errno_location
.text:0000000000009312                 mov     rdx, [rbp+format] ; format
.text:0000000000009319                 mov     esi, [rax]      ; errnum
.text:000000000000931B                 mov     rcx, r12
.text:000000000000931E                 xor     edi, edi        ; status
.text:0000000000009320                 xor     eax, eax
.text:0000000000009322                 call    _error
.text:0000000000009327
.text:0000000000009327 loc_9327:                               ; CODE XREF: copy_internal+3951↓j
.text:0000000000009327                 movzx   r8d, byte ptr [rbx+24h]
.text:000000000000932C                 xor     r8d, 1
.text:0000000000009330                 jmp     loc_8EB5
.text:0000000000009335 ; ---------------------------------------------------------------------------
.text:0000000000009335
.text:0000000000009335 loc_9335:                               ; CODE XREF: copy_internal+2E89↑j
.text:0000000000009335                 cmp     [rbp+fd], 0
.text:000000000000933C                 jns     loc_958E
.text:0000000000009342
.text:0000000000009342 loc_9342:                               ; CODE XREF: copy_internal+2E96↑j
.text:0000000000009342                 movzx   r9d, byte ptr [rbx+16h]
.text:0000000000009347                 test    r9b, r9b
.text:000000000000934A                 jnz     loc_8F60
.text:0000000000009350                 mov     r8d, [r12]
.text:0000000000009354                 cmp     r8d, 2
.text:0000000000009358                 jnz     loc_9077
.text:000000000000935E                 cmp     byte ptr [rbx+18h], 0
.text:0000000000009362                 jnz     loc_9077
.text:0000000000009368                 mov     dword ptr [rbp+var_378], 0
.text:0000000000009372                 jmp     loc_900C
.text:0000000000009377 ; ---------------------------------------------------------------------------
.text:0000000000009377
.text:0000000000009377 loc_9377:                               ; CODE XREF: copy_internal+2DE4↑j
.text:0000000000009377                 mov     rsi, [rbp+file] ; filename
.text:000000000000937E                 lea     rdx, [rbp+var_1F0] ; stat_buf
.text:0000000000009385                 mov     edi, 1          ; ver
.text:000000000000938A                 call    ___lxstat
.text:000000000000938F                 test    eax, eax
.text:0000000000009391                 jz      loc_8A0A
.text:0000000000009397                 mov     rsi, [rbp+file]
.text:000000000000939E                 jmp     loc_6505
.text:00000000000093A3 ; ---------------------------------------------------------------------------
.text:00000000000093A3
.text:00000000000093A3 loc_93A3:                               ; CODE XREF: copy_internal+350A↑j
.text:00000000000093A3                 mov     edx, [rbp+stat_buf.st_gid] ; group
.text:00000000000093A9                 mov     esi, [rbp+stat_buf.st_uid] ; owner
.text:00000000000093AF                 mov     rdi, [rbp+file] ; file
.text:00000000000093B6                 mov     byte ptr [rbp+fd], r8b
.text:00000000000093BD                 call    _lchown
.text:00000000000093C2                 test    eax, eax
.text:00000000000093C4                 movzx   r8d, byte ptr [rbp+fd]
.text:00000000000093CC                 jz      loc_619F
.text:00000000000093D2                 mov     rdi, rbx
.text:00000000000093D5                 call    chown_failure_ok
.text:00000000000093DA                 test    al, al
.text:00000000000093DC                 movzx   r8d, byte ptr [rbp+fd]
.text:00000000000093E4                 jz      loc_9BE4
.text:00000000000093EA                 mov     byte ptr [rbp+fildes], al
.text:00000000000093F0                 jmp     loc_619F
.text:00000000000093F5 ; ---------------------------------------------------------------------------
.text:00000000000093F5
.text:00000000000093F5 loc_93F5:                               ; CODE XREF: copy_internal+344B↑j
.text:00000000000093F5                 mov     rsi, [rbp+file] ; filename
.text:00000000000093FC                 lea     rdx, [rbp+var_D0] ; stat_buf
.text:0000000000009403                 mov     edi, 1          ; ver
.text:0000000000009408                 mov     dword ptr [rbp+var_348], r8d
.text:000000000000940F                 call    ___lxstat
.text:0000000000009414                 test    eax, eax
.text:0000000000009416                 mov     r8d, dword ptr [rbp+var_348]
.text:000000000000941D                 jnz     short loc_9462
.text:000000000000941F                 mov     eax, [rbp+var_D0.st_mode]
.text:0000000000009425                 and     eax, 0F000h
.text:000000000000942A                 cmp     eax, 0A000h
.text:000000000000942F                 jnz     short loc_9462
.text:0000000000009431                 movzx   r8d, byte ptr [rbx+30h]
.text:0000000000009436                 test    r8b, r8b
.text:0000000000009439                 jz      loc_9C27
.text:000000000000943F                 mov     edx, dword ptr [rbp+ptr]
.text:0000000000009445                 mov     rdi, [rbp+file]
.text:000000000000944C                 mov     esi, 41h ; 'A'
.text:0000000000009451                 xor     eax, eax
.text:0000000000009453                 call    open_safer
.text:0000000000009458                 mov     r8d, [r12]
.text:000000000000945C                 mov     [rbp+fd], eax
.text:0000000000009462
.text:0000000000009462 loc_9462:                               ; CODE XREF: copy_internal+343B↑j
.text:0000000000009462                                         ; copy_internal+37FD↑j ...
.text:0000000000009462                 mov     eax, [rbp+fd]
.text:0000000000009468                 shr     eax, 1Fh
.text:000000000000946B                 cmp     r8d, 15h
.text:000000000000946F                 setz    dl
.text:0000000000009472                 and     dl, al
.text:0000000000009474                 mov     r9d, edx
.text:0000000000009477                 jz      loc_9576
.text:000000000000947D                 mov     rsi, [rbp+file]
.text:0000000000009484                 mov     r8d, 15h
.text:000000000000948A                 cmp     byte ptr [rsi], 0
.text:000000000000948D                 mov     rdi, rsi
.text:0000000000009490                 jz      loc_9077
.text:0000000000009496                 xor     eax, eax
.text:0000000000009498                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000949C                 xor     r8d, r8d
.text:000000000000949F                 repne scasb
.text:00000000000094A1                 mov     rax, rcx
.text:00000000000094A4                 not     rax
.text:00000000000094A7                 cmp     byte ptr [rsi+rax-2], 2Fh ; '/'
.text:00000000000094AC                 setnz   r8b
.text:00000000000094B0                 add     r8d, 14h
.text:00000000000094B4                 jmp     loc_9077
.text:00000000000094B9 ; ---------------------------------------------------------------------------
.text:00000000000094B9
.text:00000000000094B9 loc_94B9:                               ; CODE XREF: copy_internal+2CB4↑j
.text:00000000000094B9                 mov     eax, [rbp+var_1F0.st_mode]
.text:00000000000094BF                 and     eax, 0F000h
.text:00000000000094C4                 cmp     eax, 0A000h
.text:00000000000094C9                 jnz     loc_88DA
.text:00000000000094CF                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000094D3                 mov     eax, r14d
.text:00000000000094D6                 mov     rdi, r12
.text:00000000000094D9                 repne scasb
.text:00000000000094DB                 mov     rsi, [rbp+var_1F0.st_size]
.text:00000000000094E2                 not     rcx
.text:00000000000094E5                 lea     rax, [rcx-1]
.text:00000000000094E9                 cmp     rsi, rax
.text:00000000000094EC                 jnz     loc_88DA
.text:00000000000094F2                 mov     rdi, [rbp+file] ; path
.text:00000000000094F9                 call    areadlink_with_size
.text:00000000000094FE                 test    rax, rax
.text:0000000000009501                 jz      loc_88DA
.text:0000000000009507                 mov     rdi, rax        ; s1
.text:000000000000950A                 mov     rsi, r12        ; s2
.text:000000000000950D                 mov     qword ptr [rbp+fd], rax
.text:0000000000009514                 call    _strcmp
.text:0000000000009519                 mov     rdx, qword ptr [rbp+fd]
.text:0000000000009520                 test    eax, eax
.text:0000000000009522                 mov     rdi, rdx        ; ptr
.text:0000000000009525                 jnz     loc_9D22
.text:000000000000952B                 call    free
.text:0000000000009530                 mov     rdi, r12        ; ptr
.text:0000000000009533                 call    free
.text:0000000000009538                 jmp     loc_9110
.text:000000000000953D ; ---------------------------------------------------------------------------
.text:000000000000953D
.text:000000000000953D loc_953D:                               ; CODE XREF: copy_internal+3645↑j
.text:000000000000953D                 mov     r8d, dword ptr [rbp+var_340]
.text:0000000000009544                 mov     ecx, [rbp+fd]
.text:000000000000954A                 mov     rdx, [rbp+file]
.text:0000000000009551                 mov     esi, [rbp+fildes]
.text:0000000000009557                 mov     rdi, [rbp+filename]
.text:000000000000955E                 call    copy_acl
.text:0000000000009563                 test    eax, eax
.text:0000000000009565                 mov     r8d, 1
.text:000000000000956B                 jz      loc_8EB5
.text:0000000000009571                 jmp     loc_9327
.text:0000000000009576 ; ---------------------------------------------------------------------------
.text:0000000000009576
.text:0000000000009576 loc_9576:                               ; CODE XREF: copy_internal+3857↑j
.text:0000000000009576                 cmp     [rbp+fd], 0
.text:000000000000957D                 mov     r14d, 1
.text:0000000000009583                 jns     loc_8AC6
.text:0000000000009589                 jmp     loc_9071
.text:000000000000958E ; ---------------------------------------------------------------------------
.text:000000000000958E
.text:000000000000958E loc_958E:                               ; CODE XREF: copy_internal+371C↑j
.text:000000000000958E                 movzx   esi, byte ptr [rbx+25h]
.text:0000000000009592                 mov     rdi, [rbp+file]
.text:0000000000009599                 xor     edx, edx
.text:000000000000959B                 mov     rcx, rbx
.text:000000000000959E                 call    set_file_security_ctx
.text:00000000000095A3                 test    al, al
.text:00000000000095A5                 mov     r8d, eax
.text:00000000000095A8                 jnz     loc_8ABC
.text:00000000000095AE                 cmp     byte ptr [rbx+26h], 0
.text:00000000000095B2                 mov     [rbp+ptr], 0
.text:00000000000095BD                 jnz     loc_8EB5
.text:00000000000095C3                 jmp     loc_8ABC
.text:00000000000095C8 ; ---------------------------------------------------------------------------
.text:00000000000095C8
.text:00000000000095C8 loc_95C8:                               ; CODE XREF: copy_internal+324F↑j
.text:00000000000095C8                 mov     edi, [rbp+fd]   ; fd
.text:00000000000095CE                 mov     rsi, rcx
.text:00000000000095D1                 call    write_zeros
.text:00000000000095D6                 test    al, al
.text:00000000000095D8                 jz      loc_9AF3
.text:00000000000095DE                 xor     r8d, r8d
.text:00000000000095E1                 jmp     loc_8D4D
.text:00000000000095E6 ; ---------------------------------------------------------------------------
.text:00000000000095E6
.text:00000000000095E6 loc_95E6:                               ; CODE XREF: copy_internal+35BE↑j
.text:00000000000095E6                 mov     rax, [rbp+stat_buf.st_atim.tv_sec]
.text:00000000000095ED                 mov     rsi, [rbp+file] ; path
.text:00000000000095F4                 lea     rdx, [rbp+var_2A0]
.text:00000000000095FB                 mov     edi, [rbp+fd]   ; fildes
.text:0000000000009601                 mov     [rbp+var_2A0], rax
.text:0000000000009608                 mov     rax, [rbp+stat_buf.st_atim.tv_nsec]
.text:000000000000960F                 mov     [rbp+var_298], rax
.text:0000000000009616                 mov     rax, [rbp+stat_buf.st_mtim.tv_sec]
.text:000000000000961D                 mov     [rbp+var_290], rax
.text:0000000000009624                 mov     rax, [rbp+stat_buf.st_mtim.tv_nsec]
.text:000000000000962B                 mov     [rbp+var_288], rax
.text:0000000000009632                 call    fdutimens
.text:0000000000009637                 test    eax, eax
.text:0000000000009639                 jz      loc_91E4
.text:000000000000963F                 mov     rsi, [rbp+file]
.text:0000000000009646                 mov     edi, 4
.text:000000000000964B                 call    quotearg_style
.text:0000000000009650                 lea     rsi, aPreservingTime ; "preserving times for %s"
.text:0000000000009657                 xor     edi, edi        ; domainname
.text:0000000000009659                 mov     edx, 5          ; category
.text:000000000000965E                 mov     r12, rax
.text:0000000000009661                 call    _dcgettext
.text:0000000000009666                 mov     [rbp+format], rax
.text:000000000000966D                 call    ___errno_location
.text:0000000000009672                 mov     rdx, [rbp+format] ; format
.text:0000000000009679                 mov     esi, [rax]      ; errnum
.text:000000000000967B                 xor     edi, edi        ; status
.text:000000000000967D                 xor     eax, eax
.text:000000000000967F                 mov     rcx, r12
.text:0000000000009682                 call    _error
.text:0000000000009687                 cmp     byte ptr [rbx+24h], 0
.text:000000000000968B                 jz      loc_91E4
.text:0000000000009691                 jmp     loc_8EB2
.text:0000000000009696 ; ---------------------------------------------------------------------------
.text:0000000000009696
.text:0000000000009696 loc_9696:                               ; CODE XREF: copy_internal+2ECF↑j
.text:0000000000009696                 mov     rsi, [rbp+file]
.text:000000000000969D                 mov     edi, 4
.text:00000000000096A2                 call    quotearg_style
.text:00000000000096A7                 lea     rsi, aCannotFstatS ; "cannot fstat %s"
.text:00000000000096AE                 mov     edx, 5          ; category
.text:00000000000096B3                 xor     edi, edi        ; domainname
.text:00000000000096B5                 mov     r12, rax
.text:00000000000096B8                 call    _dcgettext
.text:00000000000096BD                 mov     [rbp+ptr], rax
.text:00000000000096C4                 call    ___errno_location
.text:00000000000096C9                 mov     rdx, [rbp+ptr]  ; format
.text:00000000000096D0                 mov     esi, [rax]      ; errnum
.text:00000000000096D2                 mov     rcx, r12
.text:00000000000096D5                 xor     edi, edi        ; status
.text:00000000000096D7                 xor     eax, eax
.text:00000000000096D9                 call    _error
.text:00000000000096DE                 xor     r8d, r8d
.text:00000000000096E1                 mov     [rbp+ptr], 0
.text:00000000000096EC                 jmp     loc_8EB5
.text:00000000000096F1 ; ---------------------------------------------------------------------------
.text:00000000000096F1
.text:00000000000096F1 loc_96F1:                               ; CODE XREF: copy_internal+3021↑j
.text:00000000000096F1                                         ; copy_internal+302A↑j
.text:00000000000096F1                 mov     [rbp+var_370], rcx
.text:00000000000096F8                 jmp     loc_8C50
.text:00000000000096FD ; ---------------------------------------------------------------------------
.text:00000000000096FD
.text:00000000000096FD loc_96FD:                               ; CODE XREF: copy_internal+3065↑j
.text:00000000000096FD                 xor     r9d, r9d
.text:0000000000009700                 cmp     dword ptr [rbx+0Ch], 3
.text:0000000000009704                 lea     rax, [rbp+dev]
.text:000000000000970B                 mov     [rbp+var_398], 0
.text:0000000000009716                 mov     [rbp+var_348], rax
.text:000000000000971D                 setz    r9b
.text:0000000000009721
.text:0000000000009721 loc_9721:                               ; CODE XREF: copy_internal+3D3F↓j
.text:0000000000009721                                         ; copy_internal+3ECE↓j
.text:0000000000009721                 lea     rax, [rbp+var_2F8]
.text:0000000000009728                 sub     rsp, 8
.text:000000000000972C                 mov     r8, [rbp+var_398]
.text:0000000000009733                 mov     rcx, [rbp+var_370]
.text:000000000000973A                 mov     rdx, [rbp+var_3B0]
.text:0000000000009741                 mov     esi, [rbp+fd]
.text:0000000000009747                 mov     edi, [rbp+fildes]
.text:000000000000974D                 push    rax
.text:000000000000974E                 push    [rbp+var_348]
.text:0000000000009754                 push    0FFFFFFFFFFFFFFFFh
.text:0000000000009756                 push    [rbp+file]
.text:000000000000975C                 push    [rbp+filename]
.text:0000000000009762                 call    sparse_copy
.text:0000000000009767                 add     rsp, 30h
.text:000000000000976B                 test    al, al
.text:000000000000976D                 jz      loc_8EB2
.text:0000000000009773                 cmp     byte ptr [rbp+var_2F8], 0
.text:000000000000977A                 jz      loc_91DA
.text:0000000000009780                 mov     rsi, [rbp+dev]  ; length
.text:0000000000009787                 mov     edi, [rbp+fd]   ; fd
.text:000000000000978D                 call    _ftruncate
.text:0000000000009792                 test    eax, eax
.text:0000000000009794                 jns     loc_91DA
.text:000000000000979A
.text:000000000000979A loc_979A:                               ; CODE XREF: copy_internal+3C49↓j
.text:000000000000979A                                         ; copy_internal+3CC8↓j
.text:000000000000979A                 mov     rsi, [rbp+file]
.text:00000000000097A1                 mov     edi, 4
.text:00000000000097A6                 call    quotearg_style
.text:00000000000097AB                 lea     rsi, aFailedToExtend ; "failed to extend %s"
.text:00000000000097B2                 mov     r12, rax
.text:00000000000097B5                 mov     edx, 5          ; category
.text:00000000000097BA
.text:00000000000097BA loc_97BA:                               ; CODE XREF: copy_internal+3CA9↓j
.text:00000000000097BA                                         ; copy_internal+3F52↓j
.text:00000000000097BA                 xor     edi, edi        ; domainname
.text:00000000000097BC                 call    _dcgettext
.text:00000000000097C1                 mov     [rbp+format], rax
.text:00000000000097C8                 call    ___errno_location
.text:00000000000097CD                 mov     rdx, [rbp+format] ; format
.text:00000000000097D4                 mov     esi, [rax]      ; errnum
.text:00000000000097D6                 mov     rcx, r12
.text:00000000000097D9                 xor     edi, edi        ; status
.text:00000000000097DB                 xor     eax, eax
.text:00000000000097DD                 call    _error
.text:00000000000097E2                 jmp     loc_8EB2
.text:00000000000097E7 ; ---------------------------------------------------------------------------
.text:00000000000097E7
.text:00000000000097E7 loc_97E7:                               ; CODE XREF: copy_internal+31AD↑j
.text:00000000000097E7                 mov     byte ptr [rbp+var_2D0+1], 1
.text:00000000000097EE
.text:00000000000097EE loc_97EE:                               ; CODE XREF: copy_internal+30FF↑j
.text:00000000000097EE                                         ; copy_internal+31C7↑j
.text:00000000000097EE                 mov     rdi, [rbp+var_2D0+8] ; ptr
.text:00000000000097F5                 call    free
.text:00000000000097FA                 cmp     byte ptr [rbp+var_2D0+1], 0
.text:0000000000009801                 mov     [rbp+var_2D0+8], 0
.text:000000000000980C                 mov     qword ptr [rbp+var_2E0+8], 0
.text:0000000000009817                 jz      loc_8D03
.text:000000000000981D                 mov     rbx, [rbp+var_388]
.text:0000000000009824                 mov     r13d, [rbp+var_360]
.text:000000000000982B
.text:000000000000982B loc_982B:                               ; CODE XREF: copy_internal+3D06↓j
.text:000000000000982B                 mov     rcx, [rbp+var_3A0]
.text:0000000000009832                 cmp     [rbp+length], rcx
.text:0000000000009839                 setnle  r12b
.text:000000000000983D                 jg      short loc_984C
.text:000000000000983F                 cmp     byte ptr [rbp+format], 0
.text:0000000000009846                 jz      loc_91DA
.text:000000000000984C
.text:000000000000984C loc_984C:                               ; CODE XREF: copy_internal+3C1D↑j
.text:000000000000984C                 cmp     [rbp+var_390], 1
.text:0000000000009853                 mov     rsi, [rbp+length] ; length
.text:000000000000985A                 jz      short loc_98CE
.text:000000000000985C                 mov     edi, [rbp+fd]   ; fd
.text:0000000000009862                 call    _ftruncate
.text:0000000000009867                 test    eax, eax
.text:0000000000009869                 jnz     loc_979A
.text:000000000000986F                 cmp     [rbp+var_390], 3
.text:0000000000009876                 jnz     loc_91DA
.text:000000000000987C                 test    r12b, r12b
.text:000000000000987F                 jz      loc_91DA
.text:0000000000009885                 mov     rdx, [rbp+length]
.text:000000000000988C                 mov     rsi, [rbp+var_3A0]
.text:0000000000009893                 mov     edi, [rbp+fd]
.text:0000000000009899                 sub     rdx, rsi
.text:000000000000989C                 call    punch_hole
.text:00000000000098A1                 test    eax, eax
.text:00000000000098A3                 jns     loc_91DA
.text:00000000000098A9                 mov     rsi, [rbp+file]
.text:00000000000098B0                 mov     edi, 4
.text:00000000000098B5                 call    quotearg_style
.text:00000000000098BA                 mov     edx, 5
.text:00000000000098BF                 mov     r12, rax
.text:00000000000098C2                 lea     rsi, aErrorDeallocat ; "error deallocating %s"
.text:00000000000098C9                 jmp     loc_97BA
.text:00000000000098CE ; ---------------------------------------------------------------------------
.text:00000000000098CE
.text:00000000000098CE loc_98CE:                               ; CODE XREF: copy_internal+3C3A↑j
.text:00000000000098CE                 sub     rsi, [rbp+var_3A0]
.text:00000000000098D5                 mov     edi, [rbp+fd]   ; fd
.text:00000000000098DB                 call    write_zeros
.text:00000000000098E0                 test    al, al
.text:00000000000098E2                 jnz     loc_91DA
.text:00000000000098E8                 jmp     loc_979A
.text:00000000000098ED ; ---------------------------------------------------------------------------
.text:00000000000098ED
.text:00000000000098ED loc_98ED:                               ; CODE XREF: copy_internal+2FFD↑j
.text:00000000000098ED                 mov     rax, [rbp+var_160.st_size]
.text:00000000000098F4                 cmp     [rbp+var_370], rax
.text:00000000000098FB                 jbe     loc_8C23
.text:0000000000009901                 add     rax, 1
.text:0000000000009905                 mov     [rbp+var_370], rax
.text:000000000000990C                 jmp     loc_8C23
.text:0000000000009911 ; ---------------------------------------------------------------------------
.text:0000000000009911
.text:0000000000009911 loc_9911:                               ; CODE XREF: copy_internal+30F1↑j
.text:0000000000009911                 cmp     byte ptr [rbp+var_2D0+1], 0
.text:0000000000009918                 mov     rbx, [rbp+var_388]
.text:000000000000991F                 mov     r13d, [rbp+var_360]
.text:0000000000009926                 jnz     loc_982B
.text:000000000000992C                 cmp     byte ptr [rbp+var_2D0], 0
.text:0000000000009933                 jz      loc_9B50
.text:0000000000009939                 xor     r9d, r9d
.text:000000000000993C                 cmp     dword ptr [rbx+0Ch], 3
.text:0000000000009940                 mov     eax, 0
.text:0000000000009945                 setz    r9b
.text:0000000000009949                 cmp     [rbp+var_3A5], 0
.text:0000000000009950                 cmovnz  rax, [rbp+var_398]
.text:0000000000009958                 mov     [rbp+var_398], rax
.text:000000000000995F                 jmp     loc_9721
.text:0000000000009964 ; ---------------------------------------------------------------------------
.text:0000000000009964
.text:0000000000009964 loc_9964:                               ; CODE XREF: copy_internal+2EE6↑j
.text:0000000000009964                 mov     edx, [rbp+fildes]
.text:000000000000996A                 mov     edi, [rbp+fd]   ; fd
.text:0000000000009970                 xor     eax, eax
.text:0000000000009972                 mov     esi, 40049409h  ; request
.text:0000000000009977                 call    _ioctl
.text:000000000000997C                 test    eax, eax
.text:000000000000997E                 jz      loc_91CF
.text:0000000000009984                 cmp     dword ptr [rbx+38h], 2
.text:0000000000009988                 jnz     loc_8B0C
.text:000000000000998E                 mov     rdx, [rbp+filename]
.text:0000000000009995                 mov     esi, 4
.text:000000000000999A                 mov     edi, 1
.text:000000000000999F                 call    quotearg_n_style
.text:00000000000099A4                 mov     rdx, [rbp+file]
.text:00000000000099AB                 mov     esi, 4
.text:00000000000099B0                 xor     edi, edi
.text:00000000000099B2                 mov     r12, rax
.text:00000000000099B5                 call    quotearg_n_style
.text:00000000000099BA                 lea     rsi, aFailedToCloneS ; "failed to clone %s from %s"
.text:00000000000099C1                 mov     edx, 5          ; category
.text:00000000000099C6                 xor     edi, edi        ; domainname
.text:00000000000099C8                 mov     [rbp+format], rax
.text:00000000000099CF                 call    _dcgettext
.text:00000000000099D4                 mov     [rbp+ptr], rax
.text:00000000000099DB                 call    ___errno_location
.text:00000000000099E0                 mov     rcx, [rbp+format]
.text:00000000000099E7                 mov     esi, [rax]      ; errnum
.text:00000000000099E9                 mov     r8, r12
.text:00000000000099EC                 mov     rdx, [rbp+ptr]  ; format
.text:00000000000099F3                 xor     edi, edi        ; status
.text:00000000000099F5                 xor     eax, eax
.text:00000000000099F7                 call    _error
.text:00000000000099FC                 xor     r8d, r8d
.text:00000000000099FF                 mov     [rbp+ptr], 0
.text:0000000000009A0A                 jmp     loc_8EB5
.text:0000000000009A0F ; ---------------------------------------------------------------------------
.text:0000000000009A0F
.text:0000000000009A0F loc_9A0F:                               ; CODE XREF: copy_internal+2F8E↑j
.text:0000000000009A0F                 mov     eax, [rbx+0Ch]
.text:0000000000009A12                 cmp     eax, 3
.text:0000000000009A15                 jz      loc_9A9E
.text:0000000000009A1B                 cmp     eax, 2
.text:0000000000009A1E                 jnz     loc_8BB4
.text:0000000000009A24                 test    byte ptr [rbp+var_348], 1
.text:0000000000009A2B                 jz      loc_8BB4
.text:0000000000009A31                 mov     rax, [rbp+var_370]
.text:0000000000009A38                 lea     rdi, [r12+rax]
.text:0000000000009A3C                 call    xmalloc
.text:0000000000009A41                 lea     rcx, [rax+r12-1]
.text:0000000000009A46                 mov     [rbp+ptr], rax
.text:0000000000009A4D                 xor     edx, edx
.text:0000000000009A4F                 mov     rax, rcx
.text:0000000000009A52                 div     r12
.text:0000000000009A55                 sub     rcx, rdx
.text:0000000000009A58                 mov     [rbp+var_3B0], rcx
.text:0000000000009A5F
.text:0000000000009A5F loc_9A5F:                               ; CODE XREF: copy_internal+3EB3↓j
.text:0000000000009A5F                 mov     eax, [rbx+0Ch]
.text:0000000000009A62                 mov     [rbp+var_390], eax
.text:0000000000009A68                 movzx   eax, byte ptr [rbp+format]
.text:0000000000009A6F                 mov     [rbp+var_3A5], al
.text:0000000000009A75                 jmp     loc_8C9C
.text:0000000000009A7A ; ---------------------------------------------------------------------------
.text:0000000000009A7A
.text:0000000000009A7A loc_9A7A:                               ; CODE XREF: copy_internal+2F78↑j
.text:0000000000009A7A                 mov     rax, [rbp+var_160.st_size]
.text:0000000000009A81                 cqo
.text:0000000000009A83                 idiv    r8
.text:0000000000009A86                 cmp     [rbp+var_160.st_blocks], rax
.text:0000000000009A8D                 setl    al
.text:0000000000009A90                 movzx   eax, al
.text:0000000000009A93                 mov     dword ptr [rbp+var_348], eax
.text:0000000000009A99                 jmp     loc_8B9E
.text:0000000000009A9E ; ---------------------------------------------------------------------------
.text:0000000000009A9E
.text:0000000000009A9E loc_9A9E:                               ; CODE XREF: copy_internal+3DF5↑j
.text:0000000000009A9E                 mov     rax, [rbp+var_370]
.text:0000000000009AA5                 lea     rdi, [r12+rax]
.text:0000000000009AA9                 call    xmalloc
.text:0000000000009AAE                 lea     rcx, [rax+r12-1]
.text:0000000000009AB3                 xor     edx, edx
.text:0000000000009AB5                 mov     [rbp+ptr], rax
.text:0000000000009ABC                 mov     rax, rcx
.text:0000000000009ABF                 div     r12
.text:0000000000009AC2                 sub     rcx, rdx
.text:0000000000009AC5                 cmp     dword ptr [rbp+var_348], 0
.text:0000000000009ACC                 mov     [rbp+var_3B0], rcx
.text:0000000000009AD3                 jnz     short loc_9A5F
.text:0000000000009AD5                 xor     r9d, r9d
.text:0000000000009AD8                 cmp     dword ptr [rbx+0Ch], 3
.text:0000000000009ADC                 lea     rax, [rbp+dev]
.text:0000000000009AE3                 mov     [rbp+var_348], rax
.text:0000000000009AEA                 setz    r9b
.text:0000000000009AEE                 jmp     loc_9721
.text:0000000000009AF3 ; ---------------------------------------------------------------------------
.text:0000000000009AF3
.text:0000000000009AF3 loc_9AF3:                               ; CODE XREF: copy_internal+39B8↑j
.text:0000000000009AF3                 mov     rdx, [rbp+file]
.text:0000000000009AFA                 mov     esi, 3
.text:0000000000009AFF                 xor     edi, edi
.text:0000000000009B01                 mov     rbx, [rbp+var_388]
.text:0000000000009B08                 mov     r13d, [rbp+var_360]
.text:0000000000009B0F                 call    quotearg_n_style_colon
.text:0000000000009B14                 lea     rsi, aSWriteFailed ; "%s: write failed"
.text:0000000000009B1B                 mov     r12, rax
.text:0000000000009B1E                 mov     edx, 5          ; category
.text:0000000000009B23
.text:0000000000009B23 loc_9B23:                               ; CODE XREF: copy_internal+40DD↓j
.text:0000000000009B23                 xor     edi, edi        ; domainname
.text:0000000000009B25                 call    _dcgettext
.text:0000000000009B2A                 mov     [rbp+format], rax
.text:0000000000009B31                 call    ___errno_location
.text:0000000000009B36                 mov     rdx, [rbp+format] ; format
.text:0000000000009B3D                 mov     esi, [rax]      ; errnum
.text:0000000000009B3F                 mov     rcx, r12
.text:0000000000009B42                 xor     edi, edi        ; status
.text:0000000000009B44                 xor     eax, eax
.text:0000000000009B46                 call    _error
.text:0000000000009B4B                 jmp     loc_8EA6
.text:0000000000009B50 ; ---------------------------------------------------------------------------
.text:0000000000009B50
.text:0000000000009B50 loc_9B50:                               ; CODE XREF: copy_internal+3D13↑j
.text:0000000000009B50                 mov     rdx, [rbp+filename]
.text:0000000000009B57                 mov     esi, 3
.text:0000000000009B5C                 xor     edi, edi
.text:0000000000009B5E                 call    quotearg_n_style_colon
.text:0000000000009B63                 mov     edx, 5
.text:0000000000009B68                 mov     r12, rax
.text:0000000000009B6B                 lea     rsi, aSFailedToGetEx ; "%s: failed to get extents info"
.text:0000000000009B72                 jmp     loc_97BA
.text:0000000000009B77 ; ---------------------------------------------------------------------------
.text:0000000000009B77
.text:0000000000009B77 loc_9B77:                               ; CODE XREF: copy_internal+365C↑j
.text:0000000000009B77                 call    cached_umask
.text:0000000000009B7C                 mov     esi, [rbp+fd]
.text:0000000000009B82                 not     eax
.text:0000000000009B84                 mov     rdi, [rbp+file]
.text:0000000000009B8B                 mov     edx, eax
.text:0000000000009B8D                 mov     r14d, r12d
.text:0000000000009B90                 and     edx, 1B6h
.text:0000000000009B96                 call    set_acl
.text:0000000000009B9B                 test    eax, eax
.text:0000000000009B9D                 setz    r8b
.text:0000000000009BA1                 jmp     loc_8EB5
.text:0000000000009BA6 ; ---------------------------------------------------------------------------
.text:0000000000009BA6
.text:0000000000009BA6 loc_9BA6:                               ; CODE XREF: copy_internal+334E↑j
.text:0000000000009BA6                 mov     rsi, [rbp+file]
.text:0000000000009BAD                 mov     edi, 4
.text:0000000000009BB2                 call    quotearg_style
.text:0000000000009BB7                 lea     rsi, aCannotRemoveS ; "cannot remove %s"
.text:0000000000009BBE                 mov     edx, 5          ; category
.text:0000000000009BC3                 xor     edi, edi        ; domainname
.text:0000000000009BC5                 mov     qword ptr [rbp+fd], rax
.text:0000000000009BCC                 call    _dcgettext
.text:0000000000009BD1                 mov     rcx, qword ptr [rbp+fd]
.text:0000000000009BD8                 mov     rdx, rax
.text:0000000000009BDB                 mov     esi, [r12]
.text:0000000000009BDF                 jmp     loc_7D61
.text:0000000000009BE4 ; ---------------------------------------------------------------------------
.text:0000000000009BE4
.text:0000000000009BE4 loc_9BE4:                               ; CODE XREF: copy_internal+37C4↑j
.text:0000000000009BE4                 lea     rsi, aFailedToPreser ; "failed to preserve ownership for %s"
.text:0000000000009BEB                 xor     edi, edi        ; domainname
.text:0000000000009BED                 mov     edx, 5          ; category
.text:0000000000009BF2                 call    _dcgettext
.text:0000000000009BF7                 mov     r12, rax
.text:0000000000009BFA                 call    ___errno_location
.text:0000000000009BFF                 mov     rcx, [rbp+file]
.text:0000000000009C06                 mov     esi, [rax]      ; errnum
.text:0000000000009C08                 xor     edi, edi        ; status
.text:0000000000009C0A                 xor     eax, eax
.text:0000000000009C0C                 mov     rdx, r12        ; format
.text:0000000000009C0F                 call    _error
.text:0000000000009C14                 movzx   r8d, byte ptr [rbx+24h]
.text:0000000000009C19                 test    r8b, r8b
.text:0000000000009C1C                 jnz     loc_6BB0
.text:0000000000009C22                 jmp     loc_619F
.text:0000000000009C27 ; ---------------------------------------------------------------------------
.text:0000000000009C27
.text:0000000000009C27 loc_9C27:                               ; CODE XREF: copy_internal+3819↑j
.text:0000000000009C27                 mov     rsi, [rbp+file]
.text:0000000000009C2E                 mov     edi, 4
.text:0000000000009C33                 mov     byte ptr [rbp+fd], r8b
.text:0000000000009C3A                 call    quotearg_style
.text:0000000000009C3F                 lea     rsi, aNotWritingThro ; "not writing through dangling symlink %s"
.text:0000000000009C46                 mov     r12, rax
.text:0000000000009C49                 mov     edx, 5          ; category
.text:0000000000009C4E                 xor     edi, edi        ; domainname
.text:0000000000009C50                 call    _dcgettext
.text:0000000000009C55                 mov     rcx, r12
.text:0000000000009C58                 mov     rdx, rax        ; format
.text:0000000000009C5B                 xor     esi, esi        ; errnum
.text:0000000000009C5D                 xor     edi, edi        ; status
.text:0000000000009C5F                 xor     eax, eax
.text:0000000000009C61                 call    _error
.text:0000000000009C66                 mov     [rbp+ptr], 0
.text:0000000000009C71                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000009C79                 jmp     loc_7D78
.text:0000000000009C7E ; ---------------------------------------------------------------------------
.text:0000000000009C7E
.text:0000000000009C7E loc_9C7E:                               ; CODE XREF: copy_internal+3631↑j
.text:0000000000009C7E                 call    _geteuid
.text:0000000000009C83                 test    eax, eax
.text:0000000000009C85                 jz      loc_9257
.text:0000000000009C8B                 mov     rsi, [rbp+file]
.text:0000000000009C92                 mov     edi, [rbp+fd]
.text:0000000000009C98                 mov     edx, 180h
.text:0000000000009C9D                 call    fchmod_or_lchmod
.text:0000000000009CA2                 test    eax, eax
.text:0000000000009CA4                 jnz     loc_9257
.text:0000000000009CAA                 mov     edx, dword ptr [rbp+var_378]
.text:0000000000009CB0                 mov     rsi, [rbp+file]
.text:0000000000009CB7                 mov     edi, [rbp+fd]
.text:0000000000009CBD                 not     edx
.text:0000000000009CBF                 and     edx, [rbp+var_3A4]
.text:0000000000009CC5                 call    fchmod_or_lchmod
.text:0000000000009CCA                 jmp     loc_9257
.text:0000000000009CCF ; ---------------------------------------------------------------------------
.text:0000000000009CCF
.text:0000000000009CCF loc_9CCF:                               ; CODE XREF: copy_internal+323A↑j
.text:0000000000009CCF                 mov     rsi, [rbp+filename]
.text:0000000000009CD6                 mov     edi, 4
.text:0000000000009CDB                 mov     rbx, [rbp+var_388]
.text:0000000000009CE2                 mov     r13d, [rbp+var_360]
.text:0000000000009CE9                 call    quotearg_style
.text:0000000000009CEE                 mov     edx, 5
.text:0000000000009CF3                 mov     r12, rax
.text:0000000000009CF6                 lea     rsi, aCannotLseekS ; "cannot lseek %s"
.text:0000000000009CFD                 jmp     loc_9B23
.text:0000000000009D02 ; ---------------------------------------------------------------------------
.text:0000000000009D02
.text:0000000000009D02 loc_9D02:                               ; CODE XREF: copy_internal+364F↑j
.text:0000000000009D02                 mov     edx, [rbx+10h]
.text:0000000000009D05                 mov     esi, [rbp+fd]
.text:0000000000009D0B                 mov     rdi, [rbp+file]
.text:0000000000009D12                 call    set_acl
.text:0000000000009D17                 test    eax, eax
.text:0000000000009D19                 setz    r8b
.text:0000000000009D1D                 jmp     loc_8EB5
.text:0000000000009D22 ; ---------------------------------------------------------------------------
.text:0000000000009D22
.text:0000000000009D22 loc_9D22:                               ; CODE XREF: copy_internal+3905↑j
.text:0000000000009D22                 call    free
.text:0000000000009D27                 jmp     loc_88DA
.text:0000000000009D27 ; } // starts at 5C20
.text:0000000000009D27 copy_internal   endp ; sp-analysis failed
.text:0000000000009D27
.text:0000000000009D27 ; ---------------------------------------------------------------------------
.text:0000000000009D2C                 align 10h
.text:0000000000009D30
.text:0000000000009D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D30
.text:0000000000009D30
.text:0000000000009D30                 public copy
.text:0000000000009D30 copy            proc near               ; CODE XREF: install_file_in_file+7D↑p
.text:0000000000009D30
.text:0000000000009D30 var_11          = byte ptr -11h
.text:0000000000009D30 var_10          = qword ptr -10h
.text:0000000000009D30
.text:0000000000009D30 ; __unwind {
.text:0000000000009D30                 sub     rsp, 18h
.text:0000000000009D34                 mov     rax, fs:28h
.text:0000000000009D3D                 mov     [rsp+18h+var_10], rax
.text:0000000000009D42                 xor     eax, eax
.text:0000000000009D44                 test    rcx, rcx
.text:0000000000009D47                 jz      loc_9E76
.text:0000000000009D4D                 cmp     dword ptr [rcx], 3
.text:0000000000009D50                 ja      loc_9E57
.text:0000000000009D56                 mov     eax, [rcx+0Ch]
.text:0000000000009D59                 lea     r10d, [rax-1]
.text:0000000000009D5D                 cmp     r10d, 2
.text:0000000000009D61                 ja      loc_9E38
.text:0000000000009D67                 mov     r10d, [rcx+38h]
.text:0000000000009D6B                 cmp     r10d, 2
.text:0000000000009D6F                 ja      loc_9E19
.text:0000000000009D75                 cmp     byte ptr [rcx+17h], 0
.text:0000000000009D79                 jnz     short loc_9DD0
.text:0000000000009D7B
.text:0000000000009D7B loc_9D7B:                               ; CODE XREF: copy+A4↓j
.text:0000000000009D7B                 cmp     eax, 2
.text:0000000000009D7E                 jz      short loc_9D86
.text:0000000000009D80                 cmp     r10d, 2
.text:0000000000009D84                 jz      short loc_9DF5
.text:0000000000009D86
.text:0000000000009D86 loc_9D86:                               ; CODE XREF: copy+4E↑j
.text:0000000000009D86                 mov     [rsp+18h+var_11], 0
.text:0000000000009D8B                 push    r9
.text:0000000000009D8D                 movzx   edx, dl
.text:0000000000009D90                 push    r8
.text:0000000000009D92                 mov     r9, rcx
.text:0000000000009D95                 xor     r8d, r8d
.text:0000000000009D98                 xor     ecx, ecx
.text:0000000000009D9A                 mov     cs:top_level_dst_name, rsi
.text:0000000000009DA1                 mov     cs:top_level_src_name, rdi
.text:0000000000009DA8                 lea     rax, [rsp+28h+var_11]
.text:0000000000009DAD                 push    rax
.text:0000000000009DAE                 push    1
.text:0000000000009DB0                 call    copy_internal
.text:0000000000009DB5                 add     rsp, 20h
.text:0000000000009DB9                 mov     rsi, [rsp+18h+var_10]
.text:0000000000009DBE                 xor     rsi, fs:28h
.text:0000000000009DC7                 jnz     short loc_9E14
.text:0000000000009DC9                 add     rsp, 18h
.text:0000000000009DCD                 retn
.text:0000000000009DCD ; ---------------------------------------------------------------------------
.text:0000000000009DCE                 align 10h
.text:0000000000009DD0
.text:0000000000009DD0 loc_9DD0:                               ; CODE XREF: copy+49↑j
.text:0000000000009DD0                 cmp     byte ptr [rcx+2Ch], 0
.text:0000000000009DD4                 jz      short loc_9D7B
.text:0000000000009DD6                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009DDD                 lea     rsi, file       ; "../coreutils-8.31/src/copy.c"
.text:0000000000009DE4                 lea     rdi, assertion  ; "!(co->hard_link && co->symbolic_link)"
.text:0000000000009DEB                 mov     edx, 0B8Ah      ; line
.text:0000000000009DF0                 call    ___assert_fail
.text:0000000000009DF5 ; ---------------------------------------------------------------------------
.text:0000000000009DF5
.text:0000000000009DF5 loc_9DF5:                               ; CODE XREF: copy+54↑j
.text:0000000000009DF5                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009DFC                 lea     rsi, file       ; "../coreutils-8.31/src/copy.c"
.text:0000000000009E03                 lea     rdi, aCoReflinkModeR ; "! (co->reflink_mode == REFLINK_ALWAYS &"...
.text:0000000000009E0A                 mov     edx, 0B8Dh      ; line
.text:0000000000009E0F                 call    ___assert_fail
.text:0000000000009E14 ; ---------------------------------------------------------------------------
.text:0000000000009E14
.text:0000000000009E14 loc_9E14:                               ; CODE XREF: copy+97↑j
.text:0000000000009E14                 call    ___stack_chk_fail
.text:0000000000009E19 ; ---------------------------------------------------------------------------
.text:0000000000009E19
.text:0000000000009E19 loc_9E19:                               ; CODE XREF: copy+3F↑j
.text:0000000000009E19                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009E20                 lea     rsi, file       ; "../coreutils-8.31/src/copy.c"
.text:0000000000009E27                 lea     rdi, aValidReflinkMo ; "VALID_REFLINK_MODE (co->reflink_mode)"
.text:0000000000009E2E                 mov     edx, 0B89h      ; line
.text:0000000000009E33                 call    ___assert_fail
.text:0000000000009E38 ; ---------------------------------------------------------------------------
.text:0000000000009E38
.text:0000000000009E38 loc_9E38:                               ; CODE XREF: copy+31↑j
.text:0000000000009E38                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009E3F                 lea     rsi, file       ; "../coreutils-8.31/src/copy.c"
.text:0000000000009E46                 lea     rdi, aValidSparseMod ; "VALID_SPARSE_MODE (co->sparse_mode)"
.text:0000000000009E4D                 mov     edx, 0B88h      ; line
.text:0000000000009E52                 call    ___assert_fail
.text:0000000000009E57 ; ---------------------------------------------------------------------------
.text:0000000000009E57
.text:0000000000009E57 loc_9E57:                               ; CODE XREF: copy+20↑j
.text:0000000000009E57                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009E5E                 lea     rsi, file       ; "../coreutils-8.31/src/copy.c"
.text:0000000000009E65                 lea     rdi, aValidBackupTyp ; "VALID_BACKUP_TYPE (co->backup_type)"
.text:0000000000009E6C                 mov     edx, 0B87h      ; line
.text:0000000000009E71                 call    ___assert_fail
.text:0000000000009E76 ; ---------------------------------------------------------------------------
.text:0000000000009E76
.text:0000000000009E76 loc_9E76:                               ; CODE XREF: copy+17↑j
.text:0000000000009E76                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009E7D                 lea     rsi, file       ; "../coreutils-8.31/src/copy.c"
.text:0000000000009E84                 lea     rdi, aCoNull    ; "co != NULL"
.text:0000000000009E8B                 mov     edx, 0B86h      ; line
.text:0000000000009E90                 call    ___assert_fail
.text:0000000000009E90 ; } // starts at 9D30
.text:0000000000009E90 copy            endp
.text:0000000000009E90
.text:0000000000009E90 ; ---------------------------------------------------------------------------
.text:0000000000009E95                 align 20h
.text:0000000000009EA0
.text:0000000000009EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EA0
.text:0000000000009EA0
.text:0000000000009EA0 src_to_dest_hash proc near              ; DATA XREF: hash_init+E↓o
.text:0000000000009EA0 ; __unwind {
.text:0000000000009EA0                 mov     rax, [rdi]
.text:0000000000009EA3                 xor     edx, edx
.text:0000000000009EA5                 div     rsi
.text:0000000000009EA8                 mov     rax, rdx
.text:0000000000009EAB                 retn
.text:0000000000009EAB ; } // starts at 9EA0
.text:0000000000009EAB src_to_dest_hash endp
.text:0000000000009EAB
.text:0000000000009EAB ; ---------------------------------------------------------------------------
.text:0000000000009EAC                 align 10h
.text:0000000000009EB0
.text:0000000000009EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EB0
.text:0000000000009EB0
.text:0000000000009EB0 src_to_dest_compare proc near           ; DATA XREF: hash_init+7↓o
.text:0000000000009EB0 ; __unwind {
.text:0000000000009EB0                 xor     eax, eax
.text:0000000000009EB2                 mov     rdx, [rsi]
.text:0000000000009EB5                 cmp     [rdi], rdx
.text:0000000000009EB8                 jz      short loc_9EC0
.text:0000000000009EBA                 rep retn
.text:0000000000009EBA ; ---------------------------------------------------------------------------
.text:0000000000009EBC                 align 20h
.text:0000000000009EC0
.text:0000000000009EC0 loc_9EC0:                               ; CODE XREF: src_to_dest_compare+8↑j
.text:0000000000009EC0                 mov     rax, [rsi+8]
.text:0000000000009EC4                 cmp     [rdi+8], rax
.text:0000000000009EC8                 setz    al
.text:0000000000009ECB                 retn
.text:0000000000009ECB ; } // starts at 9EB0
.text:0000000000009ECB src_to_dest_compare endp
.text:0000000000009ECB
.text:0000000000009ECB ; ---------------------------------------------------------------------------
.text:0000000000009ECC                 align 10h
.text:0000000000009ED0
.text:0000000000009ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009ED0
.text:0000000000009ED0
.text:0000000000009ED0 ; __int64 __fastcall src_to_dest_free(void *ptr)
.text:0000000000009ED0 src_to_dest_free proc near              ; DATA XREF: hash_init↓o
.text:0000000000009ED0 ; __unwind {
.text:0000000000009ED0                 push    rbx
.text:0000000000009ED1                 mov     rbx, rdi
.text:0000000000009ED4                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000009ED8                 call    free
.text:0000000000009EDD                 mov     rdi, rbx        ; ptr
.text:0000000000009EE0                 pop     rbx
.text:0000000000009EE1                 jmp     free
.text:0000000000009EE1 ; } // starts at 9ED0
.text:0000000000009EE1 src_to_dest_free endp
.text:0000000000009EE1
.text:0000000000009EE1 ; ---------------------------------------------------------------------------
.text:0000000000009EE6                 align 10h
.text:0000000000009EF0
.text:0000000000009EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EF0
.text:0000000000009EF0
.text:0000000000009EF0                 public forget_created
.text:0000000000009EF0 forget_created  proc near               ; CODE XREF: copy_internal+11CD↑p
.text:0000000000009EF0                                         ; copy_internal+184E↑p
.text:0000000000009EF0
.text:0000000000009EF0 var_28          = qword ptr -28h
.text:0000000000009EF0 var_20          = qword ptr -20h
.text:0000000000009EF0 var_18          = qword ptr -18h
.text:0000000000009EF0 var_10          = qword ptr -10h
.text:0000000000009EF0
.text:0000000000009EF0 ; __unwind {
.text:0000000000009EF0                 push    rbx
.text:0000000000009EF1                 sub     rsp, 20h
.text:0000000000009EF5                 mov     [rsp+28h+var_28], rdi
.text:0000000000009EF9                 mov     rdi, cs:src_to_dest
.text:0000000000009F00                 mov     [rsp+28h+var_20], rsi
.text:0000000000009F05                 mov     rsi, rsp
.text:0000000000009F08                 mov     [rsp+28h+var_18], 0
.text:0000000000009F11                 mov     rax, fs:28h
.text:0000000000009F1A                 mov     [rsp+28h+var_10], rax
.text:0000000000009F1F                 xor     eax, eax
.text:0000000000009F21                 call    hash_delete
.text:0000000000009F26                 test    rax, rax
.text:0000000000009F29                 jz      short loc_9F3F
.text:0000000000009F2B                 mov     rdi, [rax+10h]  ; ptr
.text:0000000000009F2F                 mov     rbx, rax
.text:0000000000009F32                 call    free
.text:0000000000009F37                 mov     rdi, rbx        ; ptr
.text:0000000000009F3A                 call    free
.text:0000000000009F3F
.text:0000000000009F3F loc_9F3F:                               ; CODE XREF: forget_created+39↑j
.text:0000000000009F3F                 mov     rax, [rsp+28h+var_10]
.text:0000000000009F44                 xor     rax, fs:28h
.text:0000000000009F4D                 jnz     short loc_9F55
.text:0000000000009F4F                 add     rsp, 20h
.text:0000000000009F53                 pop     rbx
.text:0000000000009F54                 retn
.text:0000000000009F55 ; ---------------------------------------------------------------------------
.text:0000000000009F55
.text:0000000000009F55 loc_9F55:                               ; CODE XREF: forget_created+5D↑j
.text:0000000000009F55                 call    ___stack_chk_fail
.text:0000000000009F55 ; } // starts at 9EF0
.text:0000000000009F55 forget_created  endp
.text:0000000000009F55
.text:0000000000009F55 ; ---------------------------------------------------------------------------
.text:0000000000009F5A                 align 20h
.text:0000000000009F60
.text:0000000000009F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F60
.text:0000000000009F60
.text:0000000000009F60                 public src_to_dest_lookup
.text:0000000000009F60 src_to_dest_lookup proc near            ; CODE XREF: copy_internal+1913↑p
.text:0000000000009F60                                         ; copy_internal+1976↑p
.text:0000000000009F60
.text:0000000000009F60 var_28          = qword ptr -28h
.text:0000000000009F60 var_20          = qword ptr -20h
.text:0000000000009F60 var_10          = qword ptr -10h
.text:0000000000009F60
.text:0000000000009F60 ; __unwind {
.text:0000000000009F60                 sub     rsp, 28h
.text:0000000000009F64                 mov     [rsp+28h+var_28], rdi
.text:0000000000009F68                 mov     rdi, cs:src_to_dest
.text:0000000000009F6F                 mov     [rsp+28h+var_20], rsi
.text:0000000000009F74                 mov     rsi, rsp
.text:0000000000009F77                 mov     rax, fs:28h
.text:0000000000009F80                 mov     [rsp+28h+var_10], rax
.text:0000000000009F85                 xor     eax, eax
.text:0000000000009F87                 call    hash_lookup
.text:0000000000009F8C                 test    rax, rax
.text:0000000000009F8F                 jz      short loc_9FB0
.text:0000000000009F91                 mov     rax, [rax+10h]
.text:0000000000009F95
.text:0000000000009F95 loc_9F95:                               ; CODE XREF: src_to_dest_lookup+52↓j
.text:0000000000009F95                 mov     rdx, [rsp+28h+var_10]
.text:0000000000009F9A                 xor     rdx, fs:28h
.text:0000000000009FA3                 jnz     short loc_9FB4
.text:0000000000009FA5                 add     rsp, 28h
.text:0000000000009FA9                 retn
.text:0000000000009FA9 ; ---------------------------------------------------------------------------
.text:0000000000009FAA                 align 10h
.text:0000000000009FB0
.text:0000000000009FB0 loc_9FB0:                               ; CODE XREF: src_to_dest_lookup+2F↑j
.text:0000000000009FB0                 xor     eax, eax
.text:0000000000009FB2                 jmp     short loc_9F95
.text:0000000000009FB4 ; ---------------------------------------------------------------------------
.text:0000000000009FB4
.text:0000000000009FB4 loc_9FB4:                               ; CODE XREF: src_to_dest_lookup+43↑j
.text:0000000000009FB4                 call    ___stack_chk_fail
.text:0000000000009FB4 ; } // starts at 9F60
.text:0000000000009FB4 src_to_dest_lookup endp
.text:0000000000009FB4
.text:0000000000009FB4 ; ---------------------------------------------------------------------------
.text:0000000000009FB9                 align 20h
.text:0000000000009FC0
.text:0000000000009FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009FC0
.text:0000000000009FC0
.text:0000000000009FC0 ; __int64 __fastcall remember_copied(void *src)
.text:0000000000009FC0                 public remember_copied
.text:0000000000009FC0 remember_copied proc near               ; CODE XREF: copy_internal+2CC↑p
.text:0000000000009FC0                                         ; copy_internal+1071↑p ...
.text:0000000000009FC0 ; __unwind {
.text:0000000000009FC0                 push    r13
.text:0000000000009FC2                 push    r12
.text:0000000000009FC4                 mov     r13, rdi
.text:0000000000009FC7                 push    rbp
.text:0000000000009FC8                 push    rbx
.text:0000000000009FC9                 mov     edi, 18h
.text:0000000000009FCE                 mov     r12, rsi
.text:0000000000009FD1                 mov     rbp, rdx
.text:0000000000009FD4                 sub     rsp, 8
.text:0000000000009FD8                 call    xmalloc
.text:0000000000009FDD                 mov     rdi, r13        ; src
.text:0000000000009FE0                 mov     rbx, rax
.text:0000000000009FE3                 call    xstrdup
.text:0000000000009FE8                 mov     rdi, cs:src_to_dest
.text:0000000000009FEF                 mov     rsi, rbx
.text:0000000000009FF2                 mov     [rbx+10h], rax
.text:0000000000009FF6                 mov     [rbx], r12
.text:0000000000009FF9                 mov     [rbx+8], rbp
.text:0000000000009FFD                 call    hash_insert
.text:000000000000A002                 test    rax, rax
.text:000000000000A005                 jz      short loc_A034
.text:000000000000A007                 cmp     rbx, rax
.text:000000000000A00A                 mov     rbp, rax
.text:000000000000A00D                 jz      short loc_A030
.text:000000000000A00F                 mov     rdi, [rbx+10h]  ; ptr
.text:000000000000A013                 call    free
.text:000000000000A018                 mov     rdi, rbx        ; ptr
.text:000000000000A01B                 call    free
.text:000000000000A020                 mov     rax, [rbp+10h]
.text:000000000000A024
.text:000000000000A024 loc_A024:                               ; CODE XREF: remember_copied+72↓j
.text:000000000000A024                 add     rsp, 8
.text:000000000000A028                 pop     rbx
.text:000000000000A029                 pop     rbp
.text:000000000000A02A                 pop     r12
.text:000000000000A02C                 pop     r13
.text:000000000000A02E                 retn
.text:000000000000A02E ; ---------------------------------------------------------------------------
.text:000000000000A02F                 align 10h
.text:000000000000A030
.text:000000000000A030 loc_A030:                               ; CODE XREF: remember_copied+4D↑j
.text:000000000000A030                 xor     eax, eax
.text:000000000000A032                 jmp     short loc_A024
.text:000000000000A034 ; ---------------------------------------------------------------------------
.text:000000000000A034
.text:000000000000A034 loc_A034:                               ; CODE XREF: remember_copied+45↑j
.text:000000000000A034                 call    xalloc_die
.text:000000000000A034 ; } // starts at 9FC0
.text:000000000000A034 remember_copied endp
.text:000000000000A034
.text:000000000000A034 ; ---------------------------------------------------------------------------
.text:000000000000A039                 align 20h
.text:000000000000A040
.text:000000000000A040 ; =============== S U B R O U T I N E =======================================
.text:000000000000A040
.text:000000000000A040
.text:000000000000A040                 public hash_init
.text:000000000000A040 hash_init       proc near               ; CODE XREF: main+64E↑p
.text:000000000000A040 ; __unwind {
.text:000000000000A040                 lea     r8, src_to_dest_free
.text:000000000000A047                 lea     rcx, src_to_dest_compare
.text:000000000000A04E                 lea     rdx, src_to_dest_hash
.text:000000000000A055                 sub     rsp, 8
.text:000000000000A059                 xor     esi, esi
.text:000000000000A05B                 mov     edi, 67h ; 'g'
.text:000000000000A060                 call    hash_initialize
.text:000000000000A065                 test    rax, rax
.text:000000000000A068                 mov     cs:src_to_dest, rax
.text:000000000000A06F                 jz      short loc_A076
.text:000000000000A071                 add     rsp, 8
.text:000000000000A075                 retn
.text:000000000000A076 ; ---------------------------------------------------------------------------
.text:000000000000A076
.text:000000000000A076 loc_A076:                               ; CODE XREF: hash_init+2F↑j
.text:000000000000A076                 call    xalloc_die
.text:000000000000A076 ; } // starts at A040
.text:000000000000A076 hash_init       endp
.text:000000000000A076
.text:000000000000A076 ; ---------------------------------------------------------------------------
.text:000000000000A07B                 align 20h
.text:000000000000A080
.text:000000000000A080 ; =============== S U B R O U T I N E =======================================
.text:000000000000A080
.text:000000000000A080
.text:000000000000A080                 public forget_all
.text:000000000000A080 forget_all      proc near
.text:000000000000A080 ; __unwind {
.text:000000000000A080                 mov     rdi, cs:src_to_dest ; ptr
.text:000000000000A087                 jmp     hash_free
.text:000000000000A087 ; } // starts at A080
.text:000000000000A087 forget_all      endp
.text:000000000000A087
.text:000000000000A087 ; ---------------------------------------------------------------------------
.text:000000000000A08C                 align 10h
.text:000000000000A090
.text:000000000000A090 ; =============== S U B R O U T I N E =======================================
.text:000000000000A090
.text:000000000000A090
.text:000000000000A090                 public extent_scan_init
.text:000000000000A090 extent_scan_init proc near              ; CODE XREF: copy_internal+30A4↑p
.text:000000000000A090 ; __unwind {
.text:000000000000A090                 mov     [rsi], edi
.text:000000000000A092                 mov     qword ptr [rsi+18h], 0
.text:000000000000A09A                 mov     qword ptr [rsi+28h], 0
.text:000000000000A0A2                 mov     qword ptr [rsi+8], 0
.text:000000000000A0AA                 mov     byte ptr [rsi+20h], 0
.text:000000000000A0AE                 mov     byte ptr [rsi+21h], 0
.text:000000000000A0B2                 mov     dword ptr [rsi+10h], 1
.text:000000000000A0B9                 retn
.text:000000000000A0B9 ; } // starts at A090
.text:000000000000A0B9 extent_scan_init endp
.text:000000000000A0B9
.text:000000000000A0B9 ; ---------------------------------------------------------------------------
.text:000000000000A0BA                 align 20h
.text:000000000000A0C0
.text:000000000000A0C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A0C0
.text:000000000000A0C0 ; Attributes: bp-based frame
.text:000000000000A0C0
.text:000000000000A0C0                 public extent_scan_read
.text:000000000000A0C0 extent_scan_read proc near              ; CODE XREF: copy_internal+30EA↑p
.text:000000000000A0C0
.text:000000000000A0C0 var_s0          = qword ptr  0
.text:000000000000A0C0 var_s8          = qword ptr  8
.text:000000000000A0C0 var_s10         = dword ptr  10h
.text:000000000000A0C0 var_s14         = dword ptr  14h
.text:000000000000A0C0 var_s18         = dword ptr  18h
.text:000000000000A0C0 var_s20         = qword ptr  20h
.text:000000000000A0C0 var_s30         = qword ptr  30h
.text:000000000000A0C0 var_s1008       = qword ptr  1008h
.text:000000000000A0C0
.text:000000000000A0C0 ; __unwind {
.text:000000000000A0C0                 push    r15
.text:000000000000A0C2                 push    r14
.text:000000000000A0C4                 xor     r15d, r15d
.text:000000000000A0C7                 push    r13
.text:000000000000A0C9                 push    r12
.text:000000000000A0CB                 mov     r14, rdi
.text:000000000000A0CE                 push    rbp
.text:000000000000A0CF                 push    rbx
.text:000000000000A0D0                 mov     r13, 7FFFFFFFFFFFFFFFh
.text:000000000000A0DA                 sub     rsp, 1018h
.text:000000000000A0E1                 mov     rbx, [rdi+28h]
.text:000000000000A0E5                 mov     rdx, [rdi+8]
.text:000000000000A0E9                 mov     rbp, rsp
.text:000000000000A0EC                 mov     rax, fs:28h
.text:000000000000A0F5                 mov     [rsp+var_s1008], rax
.text:000000000000A0FD                 xor     eax, eax
.text:000000000000A0FF                 lea     r12, [rbp+var_s20]
.text:000000000000A103
.text:000000000000A103 loc_A103:                               ; CODE XREF: extent_scan_read+2BA↓j
.text:000000000000A103                 xor     eax, eax
.text:000000000000A105                 mov     ecx, 200h
.text:000000000000A10A                 mov     rdi, rbp
.text:000000000000A10D                 rep stosq
.text:000000000000A110                 mov     eax, [r14+10h]
.text:000000000000A114                 mov     edi, [r14]      ; fd
.text:000000000000A117                 mov     esi, 0C020660Bh ; request
.text:000000000000A11C                 mov     [rsp+var_s0], rdx
.text:000000000000A120                 not     rdx
.text:000000000000A123                 mov     [rsp+var_s18], 48h ; 'H'
.text:000000000000A12B                 mov     [rsp+var_s8], rdx
.text:000000000000A130                 mov     rdx, rbp
.text:000000000000A133                 mov     [rsp+var_s10], eax
.text:000000000000A137                 xor     eax, eax
.text:000000000000A139                 call    _ioctl
.text:000000000000A13E                 test    eax, eax
.text:000000000000A140                 js      loc_A210
.text:000000000000A146                 mov     eax, [rsp+var_s14]
.text:000000000000A14A                 test    eax, eax
.text:000000000000A14C                 jz      loc_A388
.text:000000000000A152                 mov     rcx, [r14+18h]
.text:000000000000A156                 mov     rdx, rax
.text:000000000000A159                 not     rdx
.text:000000000000A15C                 cmp     rcx, rdx
.text:000000000000A15F                 ja      loc_A39A
.text:000000000000A165                 mov     rdi, [r14+28h]
.text:000000000000A169                 mov     edx, 18h
.text:000000000000A16E                 add     rcx, rax
.text:000000000000A171                 mov     rax, rdx
.text:000000000000A174                 xor     esi, esi
.text:000000000000A176                 mov     [r14+18h], rcx
.text:000000000000A17A                 sub     rbx, rdi
.text:000000000000A17D                 mul     rcx
.text:000000000000A180                 jo      loc_A3B9
.text:000000000000A186
.text:000000000000A186 loc_A186:                               ; CODE XREF: extent_scan_read+2FE↓j
.text:000000000000A186                 test    rax, rax
.text:000000000000A189                 js      loc_A3C3
.text:000000000000A18F                 test    rsi, rsi
.text:000000000000A192                 jnz     loc_A3C3
.text:000000000000A198                 lea     rsi, [rcx+rcx*2]
.text:000000000000A19C                 shl     rsi, 3
.text:000000000000A1A0                 call    xrealloc
.text:000000000000A1A5                 mov     r8d, [rsp+var_s14]
.text:000000000000A1AA                 add     rbx, rax
.text:000000000000A1AD                 mov     [r14+28h], rax
.text:000000000000A1B1                 test    r8d, r8d
.text:000000000000A1B4                 jz      loc_A2F0
.text:000000000000A1BA                 mov     rax, [rsp+var_s30]
.text:000000000000A1BF                 mov     rdx, [rsp+var_s20]
.text:000000000000A1C4                 mov     rcx, r13
.text:000000000000A1C7                 sub     rcx, rax
.text:000000000000A1CA                 cmp     rdx, rcx
.text:000000000000A1CD                 ja      loc_A2AA
.text:000000000000A1D3                 xor     ecx, ecx
.text:000000000000A1D5                 mov     rsi, r12
.text:000000000000A1D8
.text:000000000000A1D8 loc_A1D8:                               ; CODE XREF: extent_scan_read+1E4↓j
.text:000000000000A1D8                 test    r15d, r15d
.text:000000000000A1DB                 jz      short loc_A250
.text:000000000000A1DD                 mov     r9d, [rsi+28h]
.text:000000000000A1E1                 mov     r10, [rbx+8]
.text:000000000000A1E5                 mov     rdi, [rbx]
.text:000000000000A1E8                 mov     r11d, r9d
.text:000000000000A1EB                 add     rdi, r10
.text:000000000000A1EE                 and     r11d, 0FFFFFFFEh
.text:000000000000A1F2                 cmp     [rbx+10h], r11d
.text:000000000000A1F6                 jz      loc_A2D0
.text:000000000000A1FC
.text:000000000000A1FC loc_A1FC:                               ; CODE XREF: extent_scan_read+213↓j
.text:000000000000A1FC                 cmp     rdi, rdx
.text:000000000000A1FF                 jbe     short loc_A25D
.text:000000000000A201
.text:000000000000A201 loc_A201:                               ; CODE XREF: extent_scan_read+197↓j
.text:000000000000A201                 mov     r10, rdi
.text:000000000000A204                 sub     r10, rdx
.text:000000000000A207                 cmp     r10, rax
.text:000000000000A20A                 jnb     loc_A328
.text:000000000000A210
.text:000000000000A210 loc_A210:                               ; CODE XREF: extent_scan_read+80↑j
.text:000000000000A210                 xor     eax, eax
.text:000000000000A212                 cmp     qword ptr [r14+8], 0
.text:000000000000A217                 jnz     short loc_A220
.text:000000000000A219                 mov     byte ptr [r14+20h], 1
.text:000000000000A21E                 xor     eax, eax
.text:000000000000A220
.text:000000000000A220 loc_A220:                               ; CODE XREF: extent_scan_read+157↑j
.text:000000000000A220                                         ; extent_scan_read+291↓j ...
.text:000000000000A220                 mov     rbx, [rsp+var_s1008]
.text:000000000000A228                 xor     rbx, fs:28h
.text:000000000000A231                 jnz     loc_A3C8
.text:000000000000A237                 add     rsp, 1018h
.text:000000000000A23E                 pop     rbx
.text:000000000000A23F                 pop     rbp
.text:000000000000A240                 pop     r12
.text:000000000000A242                 pop     r13
.text:000000000000A244                 pop     r14
.text:000000000000A246                 pop     r15
.text:000000000000A248                 retn
.text:000000000000A248 ; ---------------------------------------------------------------------------
.text:000000000000A249                 align 10h
.text:000000000000A250
.text:000000000000A250 loc_A250:                               ; CODE XREF: extent_scan_read+11B↑j
.text:000000000000A250                 mov     rdi, [r14+8]
.text:000000000000A254                 cmp     rdi, rdx
.text:000000000000A257                 ja      short loc_A201
.text:000000000000A259                 mov     r9d, [rsi+28h]
.text:000000000000A25D
.text:000000000000A25D loc_A25D:                               ; CODE XREF: extent_scan_read+13F↑j
.text:000000000000A25D                 mov     esi, r15d
.text:000000000000A260                 add     r15d, 1
.text:000000000000A264                 lea     rdi, [rsi+rsi*2]
.text:000000000000A268                 mov     rsi, [r14+28h]
.text:000000000000A26C                 lea     rbx, [rsi+rdi*8]
.text:000000000000A270                 mov     [rbx], rdx
.text:000000000000A273                 mov     [rbx+8], rax
.text:000000000000A277                 mov     [rbx+10h], r9d
.text:000000000000A27B
.text:000000000000A27B loc_A27B:                               ; CODE XREF: extent_scan_read+275↓j
.text:000000000000A27B                 add     ecx, 1
.text:000000000000A27E                 cmp     ecx, r8d
.text:000000000000A281                 jnb     short loc_A2F0
.text:000000000000A283
.text:000000000000A283 loc_A283:                               ; CODE XREF: extent_scan_read+22A↓j
.text:000000000000A283                 mov     edx, ecx
.text:000000000000A285                 mov     rdi, r13
.text:000000000000A288                 lea     rax, ds:0[rdx*8]
.text:000000000000A290                 sub     rax, rdx
.text:000000000000A293                 lea     rsi, [r12+rax*8]
.text:000000000000A297                 mov     rax, [rsi+10h]
.text:000000000000A29B                 mov     rdx, [rsi]
.text:000000000000A29E                 sub     rdi, rax
.text:000000000000A2A1                 cmp     rdx, rdi
.text:000000000000A2A4                 jbe     loc_A1D8
.text:000000000000A2AA
.text:000000000000A2AA loc_A2AA:                               ; CODE XREF: extent_scan_read+10D↑j
.text:000000000000A2AA                 lea     rcx, __PRETTY_FUNCTION___6956 ; "extent_scan_read"
.text:000000000000A2B1                 lea     rsi, aCoreutils831Sr_0 ; "../coreutils-8.31/src/extent-scan.c"
.text:000000000000A2B8                 lea     rdi, aFmExtentsIFeLo ; "fm_extents[i].fe_logical <= OFF_T_MAX -"...
.text:000000000000A2BF                 mov     edx, 8Dh        ; line
.text:000000000000A2C4                 call    ___assert_fail
.text:000000000000A2C4 ; ---------------------------------------------------------------------------
.text:000000000000A2C9                 align 10h
.text:000000000000A2D0
.text:000000000000A2D0 loc_A2D0:                               ; CODE XREF: extent_scan_read+136↑j
.text:000000000000A2D0                 cmp     rdi, rdx
.text:000000000000A2D3                 jnz     loc_A1FC
.text:000000000000A2D9                 add     ecx, 1
.text:000000000000A2DC                 add     rax, r10
.text:000000000000A2DF                 mov     [rbx+10h], r9d
.text:000000000000A2E3                 cmp     ecx, r8d
.text:000000000000A2E6                 mov     [rbx+8], rax
.text:000000000000A2EA                 jb      short loc_A283
.text:000000000000A2EC                 nop     dword ptr [rax+00h]
.text:000000000000A2F0
.text:000000000000A2F0 loc_A2F0:                               ; CODE XREF: extent_scan_read+F4↑j
.text:000000000000A2F0                                         ; extent_scan_read+1C1↑j
.text:000000000000A2F0                 test    byte ptr [rbx+10h], 1
.text:000000000000A2F4                 jnz     short loc_A340
.text:000000000000A2F6                 cmp     r15d, 48h ; 'H'
.text:000000000000A2FA                 movzx   eax, byte ptr [r14+21h]
.text:000000000000A2FF                 jbe     short loc_A360
.text:000000000000A301                 test    al, al
.text:000000000000A303                 jnz     short loc_A345
.text:000000000000A305                 lea     eax, [r15-1]
.text:000000000000A309                 mov     rdx, [r14+28h]
.text:000000000000A30D                 lea     rcx, [rax+rax*2]
.text:000000000000A311                 mov     [r14+18h], rax
.text:000000000000A315                 mov     rax, [rdx+rcx*8-18h]
.text:000000000000A31A                 add     rax, [rdx+rcx*8-10h]
.text:000000000000A31F                 mov     [r14+8], rax
.text:000000000000A323                 jmp     short loc_A34C
.text:000000000000A323 ; ---------------------------------------------------------------------------
.text:000000000000A325                 align 8
.text:000000000000A328
.text:000000000000A328 loc_A328:                               ; CODE XREF: extent_scan_read+14A↑j
.text:000000000000A328                 sub     rax, r10
.text:000000000000A32B                 mov     [rsi], rdi
.text:000000000000A32E                 sub     ecx, 1
.text:000000000000A331                 mov     [rsi+10h], rax
.text:000000000000A335                 jmp     loc_A27B
.text:000000000000A335 ; ---------------------------------------------------------------------------
.text:000000000000A33A                 align 20h
.text:000000000000A340
.text:000000000000A340 loc_A340:                               ; CODE XREF: extent_scan_read+234↑j
.text:000000000000A340                 mov     byte ptr [r14+21h], 1
.text:000000000000A345
.text:000000000000A345 loc_A345:                               ; CODE XREF: extent_scan_read+243↑j
.text:000000000000A345                 mov     eax, r15d
.text:000000000000A348                 mov     [r14+18h], rax
.text:000000000000A34C
.text:000000000000A34C loc_A34C:                               ; CODE XREF: extent_scan_read+263↑j
.text:000000000000A34C                                         ; extent_scan_read+2A9↓j ...
.text:000000000000A34C                 mov     eax, 1
.text:000000000000A351                 jmp     loc_A220
.text:000000000000A351 ; ---------------------------------------------------------------------------
.text:000000000000A356                 align 20h
.text:000000000000A360
.text:000000000000A360 loc_A360:                               ; CODE XREF: extent_scan_read+23F↑j
.text:000000000000A360                 mov     ecx, r15d
.text:000000000000A363                 test    al, al
.text:000000000000A365                 mov     [r14+18h], rcx
.text:000000000000A369                 jnz     short loc_A34C
.text:000000000000A36B                 mov     rdx, [rbx+8]
.text:000000000000A36F                 add     rdx, [rbx]
.text:000000000000A372                 cmp     r15d, 47h ; 'G'
.text:000000000000A376                 mov     [r14+8], rdx
.text:000000000000A37A                 jbe     loc_A103
.text:000000000000A380                 jmp     short loc_A34C
.text:000000000000A380 ; ---------------------------------------------------------------------------
.text:000000000000A382                 align 8
.text:000000000000A388
.text:000000000000A388 loc_A388:                               ; CODE XREF: extent_scan_read+8C↑j
.text:000000000000A388                 cmp     qword ptr [r14+8], 0
.text:000000000000A38D                 mov     byte ptr [r14+21h], 1
.text:000000000000A392                 setnz   al
.text:000000000000A395                 jmp     loc_A220
.text:000000000000A39A ; ---------------------------------------------------------------------------
.text:000000000000A39A
.text:000000000000A39A loc_A39A:                               ; CODE XREF: extent_scan_read+9F↑j
.text:000000000000A39A                 lea     rcx, __PRETTY_FUNCTION___6956 ; "extent_scan_read"
.text:000000000000A3A1                 lea     rsi, aCoreutils831Sr_0 ; "../coreutils-8.31/src/extent-scan.c"
.text:000000000000A3A8                 lea     rdi, aScanEiCountSiz ; "scan->ei_count <= SIZE_MAX - fiemap->fm"...
.text:000000000000A3AF                 mov     edx, 7Eh ; '~'  ; line
.text:000000000000A3B4                 call    ___assert_fail
.text:000000000000A3B9 ; ---------------------------------------------------------------------------
.text:000000000000A3B9
.text:000000000000A3B9 loc_A3B9:                               ; CODE XREF: extent_scan_read+C0↑j
.text:000000000000A3B9                 mov     esi, 1
.text:000000000000A3BE                 jmp     loc_A186
.text:000000000000A3C3 ; ---------------------------------------------------------------------------
.text:000000000000A3C3
.text:000000000000A3C3 loc_A3C3:                               ; CODE XREF: extent_scan_read+C9↑j
.text:000000000000A3C3                                         ; extent_scan_read+D2↑j
.text:000000000000A3C3                 call    xalloc_die
.text:000000000000A3C8 ; ---------------------------------------------------------------------------
.text:000000000000A3C8
.text:000000000000A3C8 loc_A3C8:                               ; CODE XREF: extent_scan_read+171↑j
.text:000000000000A3C8                 call    ___stack_chk_fail
.text:000000000000A3C8 ; } // starts at A0C0
.text:000000000000A3C8 extent_scan_read endp
.text:000000000000A3C8
.text:000000000000A3C8 ; ---------------------------------------------------------------------------
.text:000000000000A3CD                 align 10h
.text:000000000000A3D0
.text:000000000000A3D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A3D0
.text:000000000000A3D0
.text:000000000000A3D0 ; __int64 __fastcall try_link(char *to)
.text:000000000000A3D0 try_link        proc near               ; DATA XREF: force_linkat+71↓o
.text:000000000000A3D0 ; __unwind {
.text:000000000000A3D0                 mov     rax, rsi
.text:000000000000A3D3                 mov     rcx, rdi        ; to
.text:000000000000A3D6                 mov     edx, [rsi+10h]  ; tofd
.text:000000000000A3D9                 mov     r8d, [rax+14h]  ; flags
.text:000000000000A3DD                 mov     rsi, [rsi+8]    ; from
.text:000000000000A3E1                 mov     edi, [rax]      ; fromfd
.text:000000000000A3E3                 jmp     _linkat
.text:000000000000A3E3 ; } // starts at A3D0
.text:000000000000A3E3 try_link        endp
.text:000000000000A3E3
.text:000000000000A3E3 ; ---------------------------------------------------------------------------
.text:000000000000A3E8                 align 10h
.text:000000000000A3F0
.text:000000000000A3F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A3F0
.text:000000000000A3F0
.text:000000000000A3F0 ; __int64 __fastcall samedir_template(void *src, void *dest)
.text:000000000000A3F0 samedir_template proc near              ; CODE XREF: force_linkat+5B↓p
.text:000000000000A3F0                                         ; force_symlinkat+49↓p
.text:000000000000A3F0 ; __unwind {
.text:000000000000A3F0                 push    r12
.text:000000000000A3F2                 push    rbp
.text:000000000000A3F3                 mov     rbp, rdi
.text:000000000000A3F6                 push    rbx
.text:000000000000A3F7                 mov     r12, rsi
.text:000000000000A3FA                 call    last_component
.text:000000000000A3FF                 sub     rax, rbp
.text:000000000000A402                 lea     rdi, [rax+9]    ; size
.text:000000000000A406                 mov     rbx, rax
.text:000000000000A409                 cmp     rdi, 100h
.text:000000000000A410                 jbe     short loc_A421
.text:000000000000A412                 call    _malloc
.text:000000000000A417                 mov     r12, rax
.text:000000000000A41A                 xor     eax, eax
.text:000000000000A41C                 test    r12, r12
.text:000000000000A41F                 jz      short loc_A443
.text:000000000000A421
.text:000000000000A421 loc_A421:                               ; CODE XREF: samedir_template+20↑j
.text:000000000000A421                 mov     rdx, rbx        ; n
.text:000000000000A424                 mov     rsi, rbp        ; src
.text:000000000000A427                 mov     rdi, r12        ; dest
.text:000000000000A42A                 call    _mempcpy
.text:000000000000A42F                 mov     rcx, 5858585858587543h
.text:000000000000A439                 mov     byte ptr [rax+8], 0
.text:000000000000A43D                 mov     [rax], rcx
.text:000000000000A440                 mov     rax, r12
.text:000000000000A443
.text:000000000000A443 loc_A443:                               ; CODE XREF: samedir_template+2F↑j
.text:000000000000A443                 pop     rbx
.text:000000000000A444                 pop     rbp
.text:000000000000A445                 pop     r12
.text:000000000000A447                 retn
.text:000000000000A447 ; } // starts at A3F0
.text:000000000000A447 samedir_template endp
.text:000000000000A447
.text:000000000000A447 ; ---------------------------------------------------------------------------
.text:000000000000A448                 align 10h
.text:000000000000A450
.text:000000000000A450 ; =============== S U B R O U T I N E =======================================
.text:000000000000A450
.text:000000000000A450
.text:000000000000A450 ; __int64 __fastcall try_symlink(char *to)
.text:000000000000A450 try_symlink     proc near               ; DATA XREF: force_symlinkat+5F↓o
.text:000000000000A450 ; __unwind {
.text:000000000000A450                 mov     rax, rsi
.text:000000000000A453                 mov     rdx, rdi        ; to
.text:000000000000A456                 mov     esi, [rsi+8]    ; tofd
.text:000000000000A459                 mov     rdi, [rax]      ; from
.text:000000000000A45C                 jmp     _symlinkat
.text:000000000000A45C ; } // starts at A450
.text:000000000000A45C try_symlink     endp
.text:000000000000A45C
.text:000000000000A45C ; ---------------------------------------------------------------------------
.text:000000000000A461                 align 10h
.text:000000000000A470
.text:000000000000A470 ; =============== S U B R O U T I N E =======================================
.text:000000000000A470
.text:000000000000A470
.text:000000000000A470                 public force_linkat
.text:000000000000A470 force_linkat    proc near               ; CODE XREF: create_hard_link+34↑p
.text:000000000000A470
.text:000000000000A470 var_178         = qword ptr -178h
.text:000000000000A470 var_16C         = dword ptr -16Ch
.text:000000000000A470 var_168         = dword ptr -168h
.text:000000000000A470 var_160         = qword ptr -160h
.text:000000000000A470 var_158         = dword ptr -158h
.text:000000000000A470 var_154         = dword ptr -154h
.text:000000000000A470 dest            = byte ptr -148h
.text:000000000000A470 var_40          = qword ptr -40h
.text:000000000000A470 arg_0           = dword ptr  8
.text:000000000000A470
.text:000000000000A470 ; __unwind {
.text:000000000000A470                 push    r15
.text:000000000000A472                 push    r14
.text:000000000000A474                 mov     r14d, edi
.text:000000000000A477                 push    r13
.text:000000000000A479                 push    r12
.text:000000000000A47B                 mov     r13, rsi
.text:000000000000A47E                 push    rbp
.text:000000000000A47F                 push    rbx
.text:000000000000A480                 mov     rbx, rcx
.text:000000000000A483                 mov     ebp, edx
.text:000000000000A485                 mov     r12d, r8d
.text:000000000000A488                 sub     rsp, 148h
.text:000000000000A48F                 mov     ecx, [rsp+178h+arg_0]
.text:000000000000A496                 mov     rax, fs:28h
.text:000000000000A49F                 mov     [rsp+178h+var_40], rax
.text:000000000000A4A7                 xor     eax, eax
.text:000000000000A4A9                 test    ecx, ecx
.text:000000000000A4AB                 js      loc_A560
.text:000000000000A4B1
.text:000000000000A4B1 loc_A4B1:                               ; CODE XREF: force_linkat+10D↓j
.text:000000000000A4B1                 cmp     r9b, 1
.text:000000000000A4B5                 jnz     short loc_A530
.text:000000000000A4B7                 cmp     ecx, 11h
.text:000000000000A4BA                 jnz     short loc_A530
.text:000000000000A4BC                 lea     rax, [rsp+178h+dest]
.text:000000000000A4C1                 mov     rdi, rbx        ; src
.text:000000000000A4C4                 mov     rsi, rax        ; dest
.text:000000000000A4C7                 mov     [rsp+178h+var_178], rax
.text:000000000000A4CB                 call    samedir_template
.text:000000000000A4D0                 test    rax, rax
.text:000000000000A4D3                 mov     r15, rax
.text:000000000000A4D6                 jz      loc_A5C0
.text:000000000000A4DC                 lea     rdx, [rsp+178h+var_168]
.text:000000000000A4E1                 lea     rcx, try_link
.text:000000000000A4E8                 xor     esi, esi
.text:000000000000A4EA                 mov     r8d, 6
.text:000000000000A4F0                 mov     rdi, rax        ; s
.text:000000000000A4F3                 mov     [rsp+178h+var_168], r14d
.text:000000000000A4F8                 mov     [rsp+178h+var_160], r13
.text:000000000000A4FD                 mov     [rsp+178h+var_158], ebp
.text:000000000000A501                 mov     [rsp+178h+var_154], r12d
.text:000000000000A506                 call    try_tempname_len
.text:000000000000A50B                 test    eax, eax
.text:000000000000A50D                 jz      short loc_A588
.text:000000000000A50F                 call    ___errno_location
.text:000000000000A514                 mov     ecx, [rax]
.text:000000000000A516
.text:000000000000A516 loc_A516:                               ; CODE XREF: force_linkat+14B↓j
.text:000000000000A516                 cmp     r15, [rsp+178h+var_178]
.text:000000000000A51A                 jz      short loc_A530
.text:000000000000A51C                 mov     rdi, r15        ; ptr
.text:000000000000A51F                 mov     dword ptr [rsp+178h+var_178], ecx
.text:000000000000A522                 call    free
.text:000000000000A527                 mov     ecx, dword ptr [rsp+178h+var_178]
.text:000000000000A52A                 nop     word ptr [rax+rax+00h]
.text:000000000000A530
.text:000000000000A530 loc_A530:                               ; CODE XREF: force_linkat+45↑j
.text:000000000000A530                                         ; force_linkat+4A↑j ...
.text:000000000000A530                 mov     rbx, [rsp+178h+var_40]
.text:000000000000A538                 xor     rbx, fs:28h
.text:000000000000A541                 mov     eax, ecx
.text:000000000000A543                 jnz     loc_A5CC
.text:000000000000A549                 add     rsp, 148h
.text:000000000000A550                 pop     rbx
.text:000000000000A551                 pop     rbp
.text:000000000000A552                 pop     r12
.text:000000000000A554                 pop     r13
.text:000000000000A556                 pop     r14
.text:000000000000A558                 pop     r15
.text:000000000000A55A                 retn
.text:000000000000A55A ; ---------------------------------------------------------------------------
.text:000000000000A55B                 align 20h
.text:000000000000A560
.text:000000000000A560 loc_A560:                               ; CODE XREF: force_linkat+3B↑j
.text:000000000000A560                 mov     rcx, rbx        ; to
.text:000000000000A563                 mov     dword ptr [rsp+178h+var_178], r9d
.text:000000000000A567                 call    _linkat
.text:000000000000A56C                 test    eax, eax
.text:000000000000A56E                 mov     ecx, eax
.text:000000000000A570                 jz      short loc_A530
.text:000000000000A572                 call    ___errno_location
.text:000000000000A577                 mov     r9d, dword ptr [rsp+178h+var_178]
.text:000000000000A57B                 mov     ecx, [rax]
.text:000000000000A57D                 jmp     loc_A4B1
.text:000000000000A57D ; ---------------------------------------------------------------------------
.text:000000000000A582                 align 8
.text:000000000000A588
.text:000000000000A588 loc_A588:                               ; CODE XREF: force_linkat+9D↑j
.text:000000000000A588                 mov     rcx, rbx        ; new
.text:000000000000A58B                 mov     edx, ebp        ; newfd
.text:000000000000A58D                 mov     rsi, r15        ; old
.text:000000000000A590                 mov     edi, ebp        ; oldfd
.text:000000000000A592                 call    _renameat
.text:000000000000A597                 test    eax, eax
.text:000000000000A599                 mov     ecx, 0FFFFFFFFh
.text:000000000000A59E                 jz      short loc_A5A7
.text:000000000000A5A0                 call    ___errno_location
.text:000000000000A5A5                 mov     ecx, [rax]
.text:000000000000A5A7
.text:000000000000A5A7 loc_A5A7:                               ; CODE XREF: force_linkat+12E↑j
.text:000000000000A5A7                 xor     edx, edx        ; flag
.text:000000000000A5A9                 mov     rsi, r15        ; name
.text:000000000000A5AC                 mov     edi, ebp        ; fd
.text:000000000000A5AE                 mov     [rsp+178h+var_16C], ecx
.text:000000000000A5B2                 call    _unlinkat
.text:000000000000A5B7                 mov     ecx, [rsp+178h+var_16C]
.text:000000000000A5BB                 jmp     loc_A516
.text:000000000000A5C0 ; ---------------------------------------------------------------------------
.text:000000000000A5C0
.text:000000000000A5C0 loc_A5C0:                               ; CODE XREF: force_linkat+66↑j
.text:000000000000A5C0                 call    ___errno_location
.text:000000000000A5C5                 mov     ecx, [rax]
.text:000000000000A5C7                 jmp     loc_A530
.text:000000000000A5CC ; ---------------------------------------------------------------------------
.text:000000000000A5CC
.text:000000000000A5CC loc_A5CC:                               ; CODE XREF: force_linkat+D3↑j
.text:000000000000A5CC                 call    ___stack_chk_fail
.text:000000000000A5CC ; } // starts at A470
.text:000000000000A5CC force_linkat    endp
.text:000000000000A5CC
.text:000000000000A5CC ; ---------------------------------------------------------------------------
.text:000000000000A5D1                 align 20h
.text:000000000000A5E0
.text:000000000000A5E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A5E0
.text:000000000000A5E0
.text:000000000000A5E0                 public force_symlinkat
.text:000000000000A5E0 force_symlinkat proc near               ; CODE XREF: copy_internal+F21↑p
.text:000000000000A5E0                                         ; copy_internal+2C98↑p
.text:000000000000A5E0
.text:000000000000A5E0 var_14C         = dword ptr -14Ch
.text:000000000000A5E0 var_148         = qword ptr -148h
.text:000000000000A5E0 var_140         = dword ptr -140h
.text:000000000000A5E0 dest            = byte ptr -138h
.text:000000000000A5E0 var_30          = qword ptr -30h
.text:000000000000A5E0
.text:000000000000A5E0 ; __unwind {
.text:000000000000A5E0                 push    r14
.text:000000000000A5E2                 push    r13
.text:000000000000A5E4                 push    r12
.text:000000000000A5E6                 push    rbp
.text:000000000000A5E7                 mov     r12, rdi
.text:000000000000A5EA                 push    rbx
.text:000000000000A5EB                 mov     ebp, esi
.text:000000000000A5ED                 mov     rbx, rdx
.text:000000000000A5F0                 sub     rsp, 130h
.text:000000000000A5F7                 mov     rax, fs:28h
.text:000000000000A600                 mov     [rsp+158h+var_30], rax
.text:000000000000A608                 xor     eax, eax
.text:000000000000A60A                 test    r8d, r8d
.text:000000000000A60D                 js      loc_A6B8
.text:000000000000A613
.text:000000000000A613 loc_A613:                               ; CODE XREF: force_symlinkat+F4↓j
.text:000000000000A613                 cmp     cl, 1
.text:000000000000A616                 jnz     short loc_A688
.text:000000000000A618                 cmp     r8d, 11h
.text:000000000000A61C                 jnz     short loc_A688
.text:000000000000A61E                 lea     r14, [rsp+158h+dest]
.text:000000000000A623                 mov     rdi, rbx        ; src
.text:000000000000A626                 mov     rsi, r14        ; dest
.text:000000000000A629                 call    samedir_template
.text:000000000000A62E                 test    rax, rax
.text:000000000000A631                 mov     r13, rax
.text:000000000000A634                 jz      loc_A720
.text:000000000000A63A                 lea     rdx, [rsp+158h+var_148]
.text:000000000000A63F                 lea     rcx, try_symlink
.text:000000000000A646                 xor     esi, esi
.text:000000000000A648                 mov     r8d, 6
.text:000000000000A64E                 mov     rdi, rax        ; s
.text:000000000000A651                 mov     [rsp+158h+var_148], r12
.text:000000000000A656                 mov     [rsp+158h+var_140], ebp
.text:000000000000A65A                 call    try_tempname_len
.text:000000000000A65F                 test    eax, eax
.text:000000000000A661                 jz      short loc_A6E0
.text:000000000000A663                 call    ___errno_location
.text:000000000000A668                 mov     r8d, [rax]
.text:000000000000A66B
.text:000000000000A66B loc_A66B:                               ; CODE XREF: force_symlinkat+117↓j
.text:000000000000A66B                                         ; force_symlinkat+13B↓j
.text:000000000000A66B                 cmp     r13, r14
.text:000000000000A66E                 jz      short loc_A688
.text:000000000000A670                 mov     rdi, r13        ; ptr
.text:000000000000A673                 mov     [rsp+158h+var_14C], r8d
.text:000000000000A678                 call    free
.text:000000000000A67D                 mov     r8d, [rsp+158h+var_14C]
.text:000000000000A682                 nop     word ptr [rax+rax+00h]
.text:000000000000A688
.text:000000000000A688 loc_A688:                               ; CODE XREF: force_symlinkat+36↑j
.text:000000000000A688                                         ; force_symlinkat+3C↑j ...
.text:000000000000A688                 mov     rbx, [rsp+158h+var_30]
.text:000000000000A690                 xor     rbx, fs:28h
.text:000000000000A699                 mov     eax, r8d
.text:000000000000A69C                 jnz     loc_A72D
.text:000000000000A6A2                 add     rsp, 130h
.text:000000000000A6A9                 pop     rbx
.text:000000000000A6AA                 pop     rbp
.text:000000000000A6AB                 pop     r12
.text:000000000000A6AD                 pop     r13
.text:000000000000A6AF                 pop     r14
.text:000000000000A6B1                 retn
.text:000000000000A6B1 ; ---------------------------------------------------------------------------
.text:000000000000A6B2                 align 8
.text:000000000000A6B8
.text:000000000000A6B8 loc_A6B8:                               ; CODE XREF: force_symlinkat+2D↑j
.text:000000000000A6B8                 mov     [rsp+158h+var_14C], ecx
.text:000000000000A6BC                 call    _symlinkat
.text:000000000000A6C1                 test    eax, eax
.text:000000000000A6C3                 mov     r8d, eax
.text:000000000000A6C6                 jz      short loc_A688
.text:000000000000A6C8                 call    ___errno_location
.text:000000000000A6CD                 mov     ecx, [rsp+158h+var_14C]
.text:000000000000A6D1                 mov     r8d, [rax]
.text:000000000000A6D4                 jmp     loc_A613
.text:000000000000A6D4 ; ---------------------------------------------------------------------------
.text:000000000000A6D9                 align 20h
.text:000000000000A6E0
.text:000000000000A6E0 loc_A6E0:                               ; CODE XREF: force_symlinkat+81↑j
.text:000000000000A6E0                 mov     rcx, rbx        ; new
.text:000000000000A6E3                 mov     edx, ebp        ; newfd
.text:000000000000A6E5                 mov     rsi, r13        ; old
.text:000000000000A6E8                 mov     edi, ebp        ; oldfd
.text:000000000000A6EA                 call    _renameat
.text:000000000000A6EF                 test    eax, eax
.text:000000000000A6F1                 mov     r8d, 0FFFFFFFFh
.text:000000000000A6F7                 jz      loc_A66B
.text:000000000000A6FD                 call    ___errno_location
.text:000000000000A702                 mov     r8d, [rax]
.text:000000000000A705                 xor     edx, edx        ; flag
.text:000000000000A707                 mov     rsi, r13        ; name
.text:000000000000A70A                 mov     edi, ebp        ; fd
.text:000000000000A70C                 mov     [rsp+158h+var_14C], r8d
.text:000000000000A711                 call    _unlinkat
.text:000000000000A716                 mov     r8d, [rsp+158h+var_14C]
.text:000000000000A71B                 jmp     loc_A66B
.text:000000000000A720 ; ---------------------------------------------------------------------------
.text:000000000000A720
.text:000000000000A720 loc_A720:                               ; CODE XREF: force_symlinkat+54↑j
.text:000000000000A720                 call    ___errno_location
.text:000000000000A725                 mov     r8d, [rax]
.text:000000000000A728                 jmp     loc_A688
.text:000000000000A72D ; ---------------------------------------------------------------------------
.text:000000000000A72D
.text:000000000000A72D loc_A72D:                               ; CODE XREF: force_symlinkat+BC↑j
.text:000000000000A72D                 call    ___stack_chk_fail
.text:000000000000A72D ; } // starts at A5E0
.text:000000000000A72D force_symlinkat endp
.text:000000000000A72D
.text:000000000000A72D ; ---------------------------------------------------------------------------
.text:000000000000A732                 align 20h
.text:000000000000A740
.text:000000000000A740 ; =============== S U B R O U T I N E =======================================
.text:000000000000A740
.text:000000000000A740
.text:000000000000A740                 public copy_acl
.text:000000000000A740 copy_acl        proc near               ; CODE XREF: copy_internal+280C↑p
.text:000000000000A740                                         ; copy_internal+393E↑p
.text:000000000000A740 ; __unwind {
.text:000000000000A740                 push    r12
.text:000000000000A742                 push    rbp
.text:000000000000A743                 mov     r12, rdi
.text:000000000000A746                 push    rbx
.text:000000000000A747                 mov     rbp, rdx
.text:000000000000A74A                 call    qcopy_acl
.text:000000000000A74F                 cmp     eax, 0FFFFFFFEh
.text:000000000000A752                 mov     ebx, eax
.text:000000000000A754                 jz      short loc_A7A0
.text:000000000000A756                 cmp     eax, 0FFFFFFFFh
.text:000000000000A759                 jnz     short loc_A792
.text:000000000000A75B                 mov     rdi, rbp
.text:000000000000A75E                 call    quote
.text:000000000000A763                 lea     rsi, aPreservingPerm ; "preserving permissions for %s"
.text:000000000000A76A                 mov     edx, 5          ; category
.text:000000000000A76F                 xor     edi, edi        ; domainname
.text:000000000000A771                 mov     r12, rax
.text:000000000000A774                 call    _dcgettext
.text:000000000000A779                 mov     rbp, rax
.text:000000000000A77C                 call    ___errno_location
.text:000000000000A781                 mov     esi, [rax]      ; errnum
.text:000000000000A783                 mov     rcx, r12
.text:000000000000A786                 mov     rdx, rbp        ; format
.text:000000000000A789                 xor     edi, edi        ; status
.text:000000000000A78B                 xor     eax, eax
.text:000000000000A78D                 call    _error
.text:000000000000A792
.text:000000000000A792 loc_A792:                               ; CODE XREF: copy_acl+19↑j
.text:000000000000A792                 mov     eax, ebx
.text:000000000000A794                 pop     rbx
.text:000000000000A795                 pop     rbp
.text:000000000000A796                 pop     r12
.text:000000000000A798                 retn
.text:000000000000A798 ; ---------------------------------------------------------------------------
.text:000000000000A799                 align 20h
.text:000000000000A7A0
.text:000000000000A7A0 loc_A7A0:                               ; CODE XREF: copy_acl+14↑j
.text:000000000000A7A0                 mov     rdi, r12
.text:000000000000A7A3                 call    quote
.text:000000000000A7A8                 mov     rbp, rax
.text:000000000000A7AB                 call    ___errno_location
.text:000000000000A7B0                 mov     esi, [rax]      ; errnum
.text:000000000000A7B2                 lea     rdx, aS_0+2     ; format
.text:000000000000A7B9                 mov     rcx, rbp
.text:000000000000A7BC                 xor     eax, eax
.text:000000000000A7BE                 xor     edi, edi        ; status
.text:000000000000A7C0                 call    _error
.text:000000000000A7C5                 mov     eax, ebx
.text:000000000000A7C7                 pop     rbx
.text:000000000000A7C8                 pop     rbp
.text:000000000000A7C9                 pop     r12
.text:000000000000A7CB                 retn
.text:000000000000A7CB ; } // starts at A740
.text:000000000000A7CB copy_acl        endp
.text:000000000000A7CB
.text:000000000000A7CB ; ---------------------------------------------------------------------------
.text:000000000000A7CC                 align 10h
.text:000000000000A7D0
.text:000000000000A7D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A7D0
.text:000000000000A7D0 ; Attributes: info_from_lumina
.text:000000000000A7D0
.text:000000000000A7D0                 public set_acl
.text:000000000000A7D0 set_acl         proc near               ; CODE XREF: copy_internal+2B64↑p
.text:000000000000A7D0                                         ; copy_internal+3F76↑p ...
.text:000000000000A7D0 ; __unwind {
.text:000000000000A7D0                 push    r12
.text:000000000000A7D2                 push    rbp
.text:000000000000A7D3                 mov     rbp, rdi
.text:000000000000A7D6                 push    rbx
.text:000000000000A7D7                 call    qset_acl
.text:000000000000A7DC                 test    eax, eax
.text:000000000000A7DE                 mov     ebx, eax
.text:000000000000A7E0                 jz      short loc_A819
.text:000000000000A7E2                 mov     rdi, rbp
.text:000000000000A7E5                 call    quote
.text:000000000000A7EA                 lea     rsi, aSettingPermiss ; "setting permissions for %s"
.text:000000000000A7F1                 mov     edx, 5          ; category
.text:000000000000A7F6                 xor     edi, edi        ; domainname
.text:000000000000A7F8                 mov     r12, rax
.text:000000000000A7FB                 call    _dcgettext
.text:000000000000A800                 mov     rbp, rax
.text:000000000000A803                 call    ___errno_location
.text:000000000000A808                 mov     esi, [rax]      ; errnum
.text:000000000000A80A                 mov     rcx, r12
.text:000000000000A80D                 mov     rdx, rbp        ; format
.text:000000000000A810                 xor     edi, edi        ; status
.text:000000000000A812                 xor     eax, eax
.text:000000000000A814                 call    _error
.text:000000000000A819
.text:000000000000A819 loc_A819:                               ; CODE XREF: set_acl+10↑j
.text:000000000000A819                 mov     eax, ebx
.text:000000000000A81B                 pop     rbx
.text:000000000000A81C                 pop     rbp
.text:000000000000A81D                 pop     r12
.text:000000000000A81F                 retn
.text:000000000000A81F ; } // starts at A7D0
.text:000000000000A81F set_acl         endp
.text:000000000000A81F
.text:000000000000A820
.text:000000000000A820 ; =============== S U B R O U T I N E =======================================
.text:000000000000A820
.text:000000000000A820 ; Attributes: info_from_lumina
.text:000000000000A820
.text:000000000000A820 ; char *__fastcall areadlink_with_size(const char *file, size_t size)
.text:000000000000A820                 public areadlink_with_size
.text:000000000000A820 areadlink_with_size proc near           ; CODE XREF: copy_internal+2C6E↑p
.text:000000000000A820                                         ; copy_internal+38D9↑p
.text:000000000000A820 ; __unwind {
.text:000000000000A820                 push    r15
.text:000000000000A822                 push    r14
.text:000000000000A824                 mov     eax, 401h
.text:000000000000A829                 push    r13
.text:000000000000A82B                 push    r12
.text:000000000000A82D                 mov     r13, rdi
.text:000000000000A830                 push    rbp
.text:000000000000A831                 push    rbx
.text:000000000000A832                 lea     rbx, [rsi+1]
.text:000000000000A836                 mov     r14, 3FFFFFFFFFFFFFFFh
.text:000000000000A840                 mov     r15, 7FFFFFFFFFFFFFFEh
.text:000000000000A84A                 sub     rsp, 8
.text:000000000000A84E                 cmp     rsi, 401h
.text:000000000000A855                 cmovnb  rbx, rax
.text:000000000000A859                 nop     dword ptr [rax+00000000h]
.text:000000000000A860
.text:000000000000A860 loc_A860:                               ; CODE XREF: areadlink_with_size+AF↓j
.text:000000000000A860                 mov     rdi, rbx        ; size
.text:000000000000A863                 call    _malloc
.text:000000000000A868                 test    rax, rax
.text:000000000000A86B                 mov     rbp, rax
.text:000000000000A86E                 jz      short loc_A8AB
.text:000000000000A870
.text:000000000000A870 loc_A870:                               ; CODE XREF: areadlink_with_size+89↓j
.text:000000000000A870                 mov     rdx, rbx        ; len
.text:000000000000A873                 mov     rsi, rax        ; buf
.text:000000000000A876                 mov     rdi, r13        ; path
.text:000000000000A879                 call    _readlink
.text:000000000000A87E                 test    rax, rax
.text:000000000000A881                 mov     r12, rax
.text:000000000000A884                 js      short loc_A8D8
.text:000000000000A886
.text:000000000000A886 loc_A886:                               ; CODE XREF: areadlink_with_size+C0↓j
.text:000000000000A886                 cmp     rbx, r12
.text:000000000000A889                 ja      short loc_A8F0
.text:000000000000A88B                 mov     rdi, rbp        ; ptr
.text:000000000000A88E                 call    free
.text:000000000000A893                 cmp     rbx, r14
.text:000000000000A896                 ja      short loc_A8C0
.text:000000000000A898                 add     rbx, rbx
.text:000000000000A89B                 mov     rdi, rbx        ; size
.text:000000000000A89E                 call    _malloc
.text:000000000000A8A3                 test    rax, rax
.text:000000000000A8A6                 mov     rbp, rax
.text:000000000000A8A9                 jnz     short loc_A870
.text:000000000000A8AB
.text:000000000000A8AB loc_A8AB:                               ; CODE XREF: areadlink_with_size+4E↑j
.text:000000000000A8AB                                         ; areadlink_with_size+CC↓j ...
.text:000000000000A8AB                 add     rsp, 8
.text:000000000000A8AF                 mov     rax, rbp
.text:000000000000A8B2                 pop     rbx
.text:000000000000A8B3                 pop     rbp
.text:000000000000A8B4                 pop     r12
.text:000000000000A8B6                 pop     r13
.text:000000000000A8B8                 pop     r14
.text:000000000000A8BA                 pop     r15
.text:000000000000A8BC                 retn
.text:000000000000A8BC ; ---------------------------------------------------------------------------
.text:000000000000A8BD                 align 20h
.text:000000000000A8C0
.text:000000000000A8C0 loc_A8C0:                               ; CODE XREF: areadlink_with_size+76↑j
.text:000000000000A8C0                 cmp     rbx, r15
.text:000000000000A8C3                 ja      short loc_A900
.text:000000000000A8C5                 mov     rbx, 7FFFFFFFFFFFFFFFh
.text:000000000000A8CF                 jmp     short loc_A860
.text:000000000000A8CF ; ---------------------------------------------------------------------------
.text:000000000000A8D1                 align 8
.text:000000000000A8D8
.text:000000000000A8D8 loc_A8D8:                               ; CODE XREF: areadlink_with_size+64↑j
.text:000000000000A8D8                 call    ___errno_location
.text:000000000000A8DD                 cmp     dword ptr [rax], 22h ; '"'
.text:000000000000A8E0                 jz      short loc_A886
.text:000000000000A8E2                 mov     rdi, rbp        ; ptr
.text:000000000000A8E5                 xor     ebp, ebp
.text:000000000000A8E7                 call    free
.text:000000000000A8EC                 jmp     short loc_A8AB
.text:000000000000A8EC ; ---------------------------------------------------------------------------
.text:000000000000A8EE                 align 10h
.text:000000000000A8F0
.text:000000000000A8F0 loc_A8F0:                               ; CODE XREF: areadlink_with_size+69↑j
.text:000000000000A8F0                 mov     byte ptr [rbp+r12+0], 0
.text:000000000000A8F6                 jmp     short loc_A8AB
.text:000000000000A8F6 ; ---------------------------------------------------------------------------
.text:000000000000A8F8                 align 20h
.text:000000000000A900
.text:000000000000A900 loc_A900:                               ; CODE XREF: areadlink_with_size+A3↑j
.text:000000000000A900                 call    ___errno_location
.text:000000000000A905                 xor     ebp, ebp
.text:000000000000A907                 mov     dword ptr [rax], 0Ch
.text:000000000000A90D                 jmp     short loc_A8AB
.text:000000000000A90D ; } // starts at A820
.text:000000000000A90D areadlink_with_size endp
.text:000000000000A90D
.text:000000000000A90D ; ---------------------------------------------------------------------------
.text:000000000000A90F                 align 10h
.text:000000000000A910
.text:000000000000A910 ; =============== S U B R O U T I N E =======================================
.text:000000000000A910
.text:000000000000A910
.text:000000000000A910                 public set_simple_backup_suffix
.text:000000000000A910 set_simple_backup_suffix proc near      ; CODE XREF: main+4C9↑p
.text:000000000000A910                                         ; backupfile_internal:loc_AF44↓p
.text:000000000000A910 ; __unwind {
.text:000000000000A910                 test    rdi, rdi
.text:000000000000A913                 push    rbx
.text:000000000000A914                 mov     rbx, rdi
.text:000000000000A917                 jz      short loc_A940
.text:000000000000A919
.text:000000000000A919 loc_A919:                               ; CODE XREF: set_simple_backup_suffix+44↓j
.text:000000000000A919                 cmp     byte ptr [rbx], 0
.text:000000000000A91C                 jnz     short loc_A930
.text:000000000000A91E
.text:000000000000A91E loc_A91E:                               ; CODE XREF: set_simple_backup_suffix+2B↓j
.text:000000000000A91E                                         ; set_simple_backup_suffix+42↓j
.text:000000000000A91E                 lea     rbx, asc_180C6  ; "~"
.text:000000000000A925
.text:000000000000A925 loc_A925:                               ; CODE XREF: set_simple_backup_suffix+2D↓j
.text:000000000000A925                 mov     cs:simple_backup_suffix, rbx
.text:000000000000A92C                 pop     rbx
.text:000000000000A92D                 retn
.text:000000000000A92D ; ---------------------------------------------------------------------------
.text:000000000000A92E                 align 10h
.text:000000000000A930
.text:000000000000A930 loc_A930:                               ; CODE XREF: set_simple_backup_suffix+C↑j
.text:000000000000A930                 mov     rdi, rbx
.text:000000000000A933                 call    last_component
.text:000000000000A938                 cmp     rax, rbx
.text:000000000000A93B                 jnz     short loc_A91E
.text:000000000000A93D                 jmp     short loc_A925
.text:000000000000A93D ; ---------------------------------------------------------------------------
.text:000000000000A93F                 align 20h
.text:000000000000A940
.text:000000000000A940 loc_A940:                               ; CODE XREF: set_simple_backup_suffix+7↑j
.text:000000000000A940                 lea     rdi, name       ; "SIMPLE_BACKUP_SUFFIX"
.text:000000000000A947                 call    _getenv
.text:000000000000A94C                 test    rax, rax
.text:000000000000A94F                 mov     rbx, rax
.text:000000000000A952                 jz      short loc_A91E
.text:000000000000A954                 jmp     short loc_A919
.text:000000000000A954 ; } // starts at A910
.text:000000000000A954 set_simple_backup_suffix endp
.text:000000000000A954
.text:000000000000A954 ; ---------------------------------------------------------------------------
.text:000000000000A956                 align 20h
.text:000000000000A960
.text:000000000000A960 ; =============== S U B R O U T I N E =======================================
.text:000000000000A960
.text:000000000000A960
.text:000000000000A960                 public backupfile_internal
.text:000000000000A960 backupfile_internal proc near           ; CODE XREF: backup_file_rename+5↓j
.text:000000000000A960                                         ; find_backup_file_name+6↓p
.text:000000000000A960
.text:000000000000A960 fd              = dword ptr -0B0h
.text:000000000000A960 src             = qword ptr -0A8h
.text:000000000000A960 var_A0          = qword ptr -0A0h
.text:000000000000A960 var_98          = dword ptr -98h
.text:000000000000A960 var_94          = dword ptr -94h
.text:000000000000A960 var_90          = qword ptr -90h
.text:000000000000A960 size            = qword ptr -88h
.text:000000000000A960 n               = qword ptr -80h
.text:000000000000A960 var_78          = qword ptr -78h
.text:000000000000A960 var_70          = qword ptr -70h
.text:000000000000A960 var_68          = qword ptr -68h
.text:000000000000A960 var_60          = qword ptr -60h
.text:000000000000A960 var_55          = byte ptr -55h
.text:000000000000A960 var_54          = dword ptr -54h
.text:000000000000A960 var_50          = qword ptr -50h
.text:000000000000A960 var_44          = dword ptr -44h
.text:000000000000A960 var_40          = qword ptr -40h
.text:000000000000A960
.text:000000000000A960 ; __unwind {
.text:000000000000A960                 push    r15
.text:000000000000A962                 push    r14
.text:000000000000A964                 push    r13
.text:000000000000A966                 push    r12
.text:000000000000A968                 push    rbp
.text:000000000000A969                 push    rbx
.text:000000000000A96A                 mov     rbx, rsi
.text:000000000000A96D                 sub     rsp, 88h
.text:000000000000A974                 mov     [rsp+0B8h+var_54], edi
.text:000000000000A978                 mov     rdi, rsi
.text:000000000000A97B                 mov     [rsp+0B8h+src], rsi
.text:000000000000A980                 mov     [rsp+0B8h+var_98], edx
.text:000000000000A984                 mov     [rsp+0B8h+var_55], cl
.text:000000000000A988                 mov     rax, fs:28h
.text:000000000000A991                 mov     [rsp+0B8h+var_40], rax
.text:000000000000A996                 xor     eax, eax
.text:000000000000A998                 call    last_component
.text:000000000000A99D                 mov     rdi, rax        ; s
.text:000000000000A9A0                 mov     r14, rax
.text:000000000000A9A3                 call    _strlen
.text:000000000000A9A8                 mov     rdi, cs:simple_backup_suffix ; s
.text:000000000000A9AF                 sub     r14, rbx
.text:000000000000A9B2                 add     rax, r14
.text:000000000000A9B5                 mov     [rsp+0B8h+var_A0], rax
.text:000000000000A9BA                 test    rdi, rdi
.text:000000000000A9BD                 jz      loc_AF44
.text:000000000000A9C3
.text:000000000000A9C3 loc_A9C3:                               ; CODE XREF: backupfile_internal+5F0↓j
.text:000000000000A9C3                 call    _strlen
.text:000000000000A9C8                 mov     rsi, [rsp+0B8h+var_A0]
.text:000000000000A9CD                 add     rax, 1
.text:000000000000A9D1                 cmp     rax, 9
.text:000000000000A9D5                 mov     [rsp+0B8h+var_68], rax
.text:000000000000A9DA                 lea     rdx, [rsi+1]
.text:000000000000A9DE                 mov     rsi, rax
.text:000000000000A9E1                 mov     eax, 9
.text:000000000000A9E6                 cmovnb  rax, rsi
.text:000000000000A9EA                 add     rax, rdx
.text:000000000000A9ED                 mov     [rsp+0B8h+n], rdx
.text:000000000000A9F2                 mov     rdi, rax        ; size
.text:000000000000A9F5                 mov     [rsp+0B8h+var_78], rax
.text:000000000000A9FA                 call    _malloc
.text:000000000000A9FF                 test    rax, rax
.text:000000000000AA02                 mov     r15, rax
.text:000000000000AA05                 jz      loc_ACF0
.text:000000000000AA0B                 lea     rax, [rsp+0B8h+var_44]
.text:000000000000AA10                 mov     [rsp+0B8h+var_44], 0FFFFFFFFh
.text:000000000000AA18                 mov     [rsp+0B8h+var_70], 0
.text:000000000000AA21                 xor     r13d, r13d
.text:000000000000AA24                 mov     [rsp+0B8h+var_50], rax
.text:000000000000AA29
.text:000000000000AA29 loc_AA29:                               ; CODE XREF: backupfile_internal+366↓j
.text:000000000000AA29                 mov     rdx, [rsp+0B8h+n] ; n
.text:000000000000AA2E                 mov     rsi, [rsp+0B8h+src] ; src
.text:000000000000AA33                 mov     rdi, r15        ; dest
.text:000000000000AA36                 call    _memcpy
.text:000000000000AA3B                 cmp     [rsp+0B8h+var_98], 1
.text:000000000000AA40                 jz      loc_AD20
.text:000000000000AA46                 lea     rbp, [r15+r14]
.text:000000000000AA4A                 mov     rdi, rbp
.text:000000000000AA4D                 call    base_len
.text:000000000000AA52                 test    r13, r13
.text:000000000000AA55                 mov     r12, rax
.text:000000000000AA58                 jz      loc_AE00
.text:000000000000AA5E                 mov     rdi, r13        ; dirp
.text:000000000000AA61                 call    _rewinddir
.text:000000000000AA66
.text:000000000000AA66 loc_AA66:                               ; CODE XREF: backupfile_internal+4E1↓j
.text:000000000000AA66                 mov     rax, [rsp+0B8h+var_78]
.text:000000000000AA6B                 mov     [rsp+0B8h+var_90], 1
.text:000000000000AA74                 mov     [rsp+0B8h+var_94], 2
.text:000000000000AA7C                 mov     [rsp+0B8h+size], rax
.text:000000000000AA81                 lea     rax, [r12+4]
.text:000000000000AA86                 mov     qword ptr [rsp+0B8h+fd], rax
.text:000000000000AA8B                 nop     dword ptr [rax+rax+00h]
.text:000000000000AA90
.text:000000000000AA90 loc_AA90:                               ; CODE XREF: backupfile_internal+152↓j
.text:000000000000AA90                                         ; backupfile_internal+16A↓j ...
.text:000000000000AA90                 mov     rdi, r13        ; dirp
.text:000000000000AA93                 call    _readdir
.text:000000000000AA98                 test    rax, rax
.text:000000000000AA9B                 jz      loc_AC50
.text:000000000000AAA1
.text:000000000000AAA1 loc_AAA1:                               ; CODE XREF: backupfile_internal+2E2↓j
.text:000000000000AAA1                 lea     rbx, [rax+13h]
.text:000000000000AAA5                 mov     rdi, rbx        ; s
.text:000000000000AAA8                 call    _strlen
.text:000000000000AAAD                 cmp     rax, qword ptr [rsp+0B8h+fd]
.text:000000000000AAB2                 jb      short loc_AA90
.text:000000000000AAB4                 lea     rbp, [r12+2]
.text:000000000000AAB9                 lea     rdi, [r15+r14]  ; s1
.text:000000000000AABD                 mov     rsi, rbx        ; s2
.text:000000000000AAC0                 mov     rdx, rbp        ; n
.text:000000000000AAC3                 call    _memcmp
.text:000000000000AAC8                 test    eax, eax
.text:000000000000AACA                 jnz     short loc_AA90
.text:000000000000AACC                 add     rbx, rbp
.text:000000000000AACF                 movzx   eax, byte ptr [rbx]
.text:000000000000AAD2                 lea     edx, [rax-31h]
.text:000000000000AAD5                 cmp     dl, 8
.text:000000000000AAD8                 ja      short loc_AA90
.text:000000000000AADA                 cmp     al, 39h ; '9'
.text:000000000000AADC                 movsx   eax, byte ptr [rbx+1]
.text:000000000000AAE0                 mov     ebp, 1
.text:000000000000AAE5                 setz    r8b
.text:000000000000AAE9                 mov     ecx, eax
.text:000000000000AAEB                 sub     eax, 30h ; '0'
.text:000000000000AAEE                 cmp     eax, 9
.text:000000000000AAF1                 ja      short loc_AB13
.text:000000000000AAF3                 nop     dword ptr [rax+rax+00h]
.text:000000000000AAF8
.text:000000000000AAF8 loc_AAF8:                               ; CODE XREF: backupfile_internal+1B1↓j
.text:000000000000AAF8                 cmp     cl, 39h ; '9'
.text:000000000000AAFB                 setz    al
.text:000000000000AAFE                 add     rbp, 1
.text:000000000000AB02                 and     r8d, eax
.text:000000000000AB05                 movsx   eax, byte ptr [rbx+rbp]
.text:000000000000AB09                 mov     ecx, eax
.text:000000000000AB0B                 sub     eax, 30h ; '0'
.text:000000000000AB0E                 cmp     eax, 9
.text:000000000000AB11                 jbe     short loc_AAF8
.text:000000000000AB13
.text:000000000000AB13 loc_AB13:                               ; CODE XREF: backupfile_internal+191↑j
.text:000000000000AB13                 cmp     cl, 7Eh ; '~'
.text:000000000000AB16                 jnz     loc_AA90
.text:000000000000AB1C                 cmp     byte ptr [rbx+rbp+1], 0
.text:000000000000AB21                 jnz     loc_AA90
.text:000000000000AB27                 mov     rdx, [rsp+0B8h+var_90] ; n
.text:000000000000AB2C                 cmp     rdx, rbp
.text:000000000000AB2F                 jb      short loc_AB5C
.text:000000000000AB31                 mov     byte ptr [rsp+0B8h+var_60], r8b
.text:000000000000AB36                 jnz     loc_AA90
.text:000000000000AB3C                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000AB41                 mov     rsi, rbx        ; s2
.text:000000000000AB44                 lea     rdi, [r15+rax+2] ; s1
.text:000000000000AB49                 call    _memcmp
.text:000000000000AB4E                 test    eax, eax
.text:000000000000AB50                 movzx   r8d, byte ptr [rsp+0B8h+var_60]
.text:000000000000AB56                 jg      loc_AA90
.text:000000000000AB5C
.text:000000000000AB5C loc_AB5C:                               ; CODE XREF: backupfile_internal+1CF↑j
.text:000000000000AB5C                 movzx   esi, r8b
.text:000000000000AB60                 movzx   r9d, r8b
.text:000000000000AB64                 mov     [rsp+0B8h+var_94], esi
.text:000000000000AB68                 mov     rsi, [rsp+0B8h+var_A0]
.text:000000000000AB6D                 lea     rax, [r9+rbp]
.text:000000000000AB71                 mov     [rsp+0B8h+var_90], rax
.text:000000000000AB76                 lea     rcx, [rsi+rax+4]
.text:000000000000AB7B                 cmp     rcx, [rsp+0B8h+size]
.text:000000000000AB80                 jbe     loc_AEB8
.text:000000000000AB86                 mov     edx, 2
.text:000000000000AB8B                 xor     esi, esi
.text:000000000000AB8D                 mov     rax, rdx
.text:000000000000AB90                 mul     rcx
.text:000000000000AB93                 jo      loc_AF63
.text:000000000000AB99
.text:000000000000AB99 loc_AB99:                               ; CODE XREF: backupfile_internal+608↓j
.text:000000000000AB99                 test    rax, rax
.text:000000000000AB9C                 js      loc_AE50
.text:000000000000ABA2                 test    rsi, rsi
.text:000000000000ABA5                 jnz     loc_AE50
.text:000000000000ABAB                 lea     rax, [rcx+rcx]
.text:000000000000ABAF                 mov     [rsp+0B8h+size], rax
.text:000000000000ABB4
.text:000000000000ABB4 loc_ABB4:                               ; CODE XREF: backupfile_internal+4F5↓j
.text:000000000000ABB4                 mov     rsi, [rsp+0B8h+size] ; size
.text:000000000000ABB9                 mov     rdi, r15        ; ptr
.text:000000000000ABBC                 mov     [rsp+0B8h+var_60], r9
.text:000000000000ABC1                 call    _realloc
.text:000000000000ABC6                 test    rax, rax
.text:000000000000ABC9                 mov     r8, rax
.text:000000000000ABCC                 mov     r9, [rsp+0B8h+var_60]
.text:000000000000ABD1                 jz      loc_AE60
.text:000000000000ABD7
.text:000000000000ABD7 loc_ABD7:                               ; CODE XREF: backupfile_internal+55B↓j
.text:000000000000ABD7                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000ABDC                 lea     rdx, [rbp+2]    ; n
.text:000000000000ABE0                 mov     [rsp+0B8h+var_60], r8
.text:000000000000ABE5                 mov     rsi, rbx        ; src
.text:000000000000ABE8                 add     rax, r8
.text:000000000000ABEB                 mov     r8d, 7E2Eh
.text:000000000000ABF1                 lea     rcx, [rax+r9+2]
.text:000000000000ABF6                 mov     [rax], r8w
.text:000000000000ABFA                 mov     byte ptr [rax+2], 30h ; '0'
.text:000000000000ABFE                 mov     rdi, rcx        ; dest
.text:000000000000AC01                 call    _memcpy
.text:000000000000AC06                 add     rbp, rax
.text:000000000000AC09                 mov     r8, [rsp+0B8h+var_60]
.text:000000000000AC0E                 movzx   edx, byte ptr [rbp-1]
.text:000000000000AC12                 lea     rax, [rbp-1]
.text:000000000000AC16                 cmp     dl, 39h ; '9'
.text:000000000000AC19                 jnz     short loc_AC2F
.text:000000000000AC1B                 nop     dword ptr [rax+rax+00h]
.text:000000000000AC20
.text:000000000000AC20 loc_AC20:                               ; CODE XREF: backupfile_internal+2CD↓j
.text:000000000000AC20                 mov     byte ptr [rax], 30h ; '0'
.text:000000000000AC23                 sub     rax, 1
.text:000000000000AC27                 movzx   edx, byte ptr [rax]
.text:000000000000AC2A                 cmp     dl, 39h ; '9'
.text:000000000000AC2D                 jz      short loc_AC20
.text:000000000000AC2F
.text:000000000000AC2F loc_AC2F:                               ; CODE XREF: backupfile_internal+2B9↑j
.text:000000000000AC2F                 add     edx, 1
.text:000000000000AC32                 mov     rdi, r13        ; dirp
.text:000000000000AC35                 mov     r15, r8
.text:000000000000AC38                 mov     [rax], dl
.text:000000000000AC3A                 call    _readdir
.text:000000000000AC3F                 test    rax, rax
.text:000000000000AC42                 jnz     loc_AAA1
.text:000000000000AC48                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000AC50
.text:000000000000AC50 loc_AC50:                               ; CODE XREF: backupfile_internal+13B↑j
.text:000000000000AC50                                         ; backupfile_internal+58D↓j
.text:000000000000AC50                 mov     eax, [rsp+0B8h+var_94]
.text:000000000000AC54                 cmp     eax, 2
.text:000000000000AC57                 jz      loc_AD40
.text:000000000000AC5D                 cmp     eax, 3
.text:000000000000AC60                 jz      loc_AE60
.text:000000000000AC66                 cmp     eax, 1
.text:000000000000AC69                 jz      loc_AD70
.text:000000000000AC6F
.text:000000000000AC6F loc_AC6F:                               ; CODE XREF: backupfile_internal+3DA↓j
.text:000000000000AC6F                                         ; backupfile_internal+42A↓j ...
.text:000000000000AC6F                 cmp     [rsp+0B8h+var_55], 0
.text:000000000000AC74                 jz      loc_AF2E
.text:000000000000AC7A                 mov     edx, [rsp+0B8h+var_44]
.text:000000000000AC7E                 lea     rcx, [r15+r14]
.text:000000000000AC82                 test    edx, edx
.text:000000000000AC84                 jns     short loc_AC99
.text:000000000000AC86                 mov     [rsp+0B8h+var_44], 0FFFFFF9Ch
.text:000000000000AC8E                 mov     rcx, r15
.text:000000000000AC91                 mov     edx, 0FFFFFF9Ch
.text:000000000000AC96                 xor     r14d, r14d
.text:000000000000AC99
.text:000000000000AC99 loc_AC99:                               ; CODE XREF: backupfile_internal+324↑j
.text:000000000000AC99                 xor     r8d, r8d
.text:000000000000AC9C                 cmp     [rsp+0B8h+var_98], 1
.text:000000000000ACA1                 mov     rsi, [rsp+0B8h+src]
.text:000000000000ACA6                 mov     edi, 0FFFFFF9Ch
.text:000000000000ACAB                 setnz   r8b
.text:000000000000ACAF                 call    renameat2
.text:000000000000ACB4                 test    eax, eax
.text:000000000000ACB6                 jz      loc_AF2E
.text:000000000000ACBC                 call    ___errno_location
.text:000000000000ACC1                 mov     ebp, [rax]
.text:000000000000ACC3                 cmp     ebp, 11h
.text:000000000000ACC6                 jz      loc_AA29
.text:000000000000ACCC                 test    r13, r13
.text:000000000000ACCF                 mov     rbx, rax
.text:000000000000ACD2                 jz      short loc_ACDC
.text:000000000000ACD4                 mov     rdi, r13        ; dirp
.text:000000000000ACD7                 call    _closedir
.text:000000000000ACDC
.text:000000000000ACDC loc_ACDC:                               ; CODE XREF: backupfile_internal+372↑j
.text:000000000000ACDC                 mov     rdi, r15        ; ptr
.text:000000000000ACDF                 xor     r15d, r15d
.text:000000000000ACE2                 call    free
.text:000000000000ACE7                 mov     [rbx], ebp
.text:000000000000ACE9                 nop     dword ptr [rax+00000000h]
.text:000000000000ACF0
.text:000000000000ACF0 loc_ACF0:                               ; CODE XREF: backupfile_internal+A5↑j
.text:000000000000ACF0                                         ; backupfile_internal+516↓j ...
.text:000000000000ACF0                 mov     rsi, [rsp+0B8h+var_40]
.text:000000000000ACF5                 xor     rsi, fs:28h
.text:000000000000ACFE                 mov     rax, r15
.text:000000000000AD01                 jnz     loc_AF6D
.text:000000000000AD07                 add     rsp, 88h
.text:000000000000AD0E                 pop     rbx
.text:000000000000AD0F                 pop     rbp
.text:000000000000AD10                 pop     r12
.text:000000000000AD12                 pop     r13
.text:000000000000AD14                 pop     r14
.text:000000000000AD16                 pop     r15
.text:000000000000AD18                 retn
.text:000000000000AD18 ; ---------------------------------------------------------------------------
.text:000000000000AD19                 align 20h
.text:000000000000AD20
.text:000000000000AD20 loc_AD20:                               ; CODE XREF: backupfile_internal+E0↑j
.text:000000000000AD20                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000AD25                 mov     rdx, [rsp+0B8h+var_68] ; n
.text:000000000000AD2A                 mov     rsi, cs:simple_backup_suffix ; src
.text:000000000000AD31                 lea     rdi, [r15+rax]  ; dest
.text:000000000000AD35                 call    _memcpy
.text:000000000000AD3A                 jmp     loc_AC6F
.text:000000000000AD3A ; ---------------------------------------------------------------------------
.text:000000000000AD3F                 align 20h
.text:000000000000AD40
.text:000000000000AD40 loc_AD40:                               ; CODE XREF: backupfile_internal+2F7↑j
.text:000000000000AD40                 cmp     [rsp+0B8h+var_98], 2
.text:000000000000AD45                 jnz     short loc_AD70
.text:000000000000AD47                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000AD4C                 mov     rdx, [rsp+0B8h+var_68] ; n
.text:000000000000AD51                 mov     rsi, cs:simple_backup_suffix ; src
.text:000000000000AD58                 lea     rdi, [r15+rax]  ; dest
.text:000000000000AD5C                 call    _memcpy
.text:000000000000AD61                 mov     [rsp+0B8h+var_98], 1
.text:000000000000AD69                 nop     dword ptr [rax+00000000h]
.text:000000000000AD70
.text:000000000000AD70 loc_AD70:                               ; CODE XREF: backupfile_internal+309↑j
.text:000000000000AD70                                         ; backupfile_internal+3E5↑j
.text:000000000000AD70                 mov     rdi, r15
.text:000000000000AD73                 call    last_component
.text:000000000000AD78                 mov     rdi, rax
.text:000000000000AD7B                 mov     rbx, rax
.text:000000000000AD7E                 call    base_len
.text:000000000000AD83                 cmp     rax, 0Eh
.text:000000000000AD87                 mov     rbp, rax
.text:000000000000AD8A                 jbe     loc_AC6F
.text:000000000000AD90                 cmp     [rsp+0B8h+var_70], 0
.text:000000000000AD96                 jnz     loc_AE80
.text:000000000000AD9C                 mov     edi, [rsp+0B8h+var_44]
.text:000000000000ADA0                 mov     [rsp+0B8h+fd], edi
.text:000000000000ADA4                 call    ___errno_location
.text:000000000000ADA9                 mov     edi, [rsp+0B8h+fd] ; fd
.text:000000000000ADAD                 mov     r12, rax
.text:000000000000ADB0                 test    edi, edi
.text:000000000000ADB2                 js      loc_AEF2
.text:000000000000ADB8                 mov     dword ptr [rax], 0
.text:000000000000ADBE                 mov     esi, 3          ; name
.text:000000000000ADC3                 call    _fpathconf
.text:000000000000ADC8                 mov     ecx, [r12]
.text:000000000000ADCC                 xor     edx, edx
.text:000000000000ADCE                 test    ecx, ecx
.text:000000000000ADD0                 setz    dl
.text:000000000000ADD3                 sub     rax, rdx
.text:000000000000ADD6
.text:000000000000ADD6 loc_ADD6:                               ; CODE XREF: backupfile_internal+5C9↓j
.text:000000000000ADD6                 test    rax, rax
.text:000000000000ADD9                 mov     [rsp+0B8h+var_70], rax
.text:000000000000ADDE                 jns     loc_AE80
.text:000000000000ADE4                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000ADE8                 jnz     loc_AF55
.text:000000000000ADEE                 mov     [rsp+0B8h+var_70], 0FFFFFFFFFFFFFFFFh
.text:000000000000ADF7                 jmp     loc_AC6F
.text:000000000000ADF7 ; ---------------------------------------------------------------------------
.text:000000000000ADFC                 align 20h
.text:000000000000AE00
.text:000000000000AE00 loc_AE00:                               ; CODE XREF: backupfile_internal+F8↑j
.text:000000000000AE00                 mov     rcx, [rsp+0B8h+var_50]
.text:000000000000AE05                 mov     edi, [rsp+0B8h+var_54]
.text:000000000000AE09                 mov     r9d, 2Eh ; '.'
.text:000000000000AE0F                 xor     edx, edx
.text:000000000000AE11                 movzx   ebx, word ptr [rbp+0]
.text:000000000000AE15                 mov     rsi, r15
.text:000000000000AE18                 mov     [rbp+0], r9w
.text:000000000000AE1D                 call    opendirat
.text:000000000000AE22                 test    rax, rax
.text:000000000000AE25                 mov     r13, rax
.text:000000000000AE28                 lea     rdx, [rbp+r12+0]
.text:000000000000AE2D                 jz      loc_AEC0
.text:000000000000AE33                 mov     [rbp+0], bx
.text:000000000000AE37                 mov     dword ptr [rdx], 7E317E2Eh
.text:000000000000AE3D                 mov     byte ptr [rdx+4], 0
.text:000000000000AE41                 jmp     loc_AA66
.text:000000000000AE41 ; ---------------------------------------------------------------------------
.text:000000000000AE46                 align 10h
.text:000000000000AE50
.text:000000000000AE50 loc_AE50:                               ; CODE XREF: backupfile_internal+23C↑j
.text:000000000000AE50                                         ; backupfile_internal+245↑j
.text:000000000000AE50                 mov     [rsp+0B8h+size], rcx
.text:000000000000AE55                 jmp     loc_ABB4
.text:000000000000AE55 ; ---------------------------------------------------------------------------
.text:000000000000AE5A                 align 20h
.text:000000000000AE60
.text:000000000000AE60 loc_AE60:                               ; CODE XREF: backupfile_internal+271↑j
.text:000000000000AE60                                         ; backupfile_internal+300↑j
.text:000000000000AE60                 mov     rdi, r15        ; ptr
.text:000000000000AE63                 xor     r15d, r15d
.text:000000000000AE66                 call    free
.text:000000000000AE6B                 call    ___errno_location
.text:000000000000AE70                 mov     dword ptr [rax], 0Ch
.text:000000000000AE76                 jmp     loc_ACF0
.text:000000000000AE76 ; ---------------------------------------------------------------------------
.text:000000000000AE7B                 align 20h
.text:000000000000AE80
.text:000000000000AE80 loc_AE80:                               ; CODE XREF: backupfile_internal+436↑j
.text:000000000000AE80                                         ; backupfile_internal+47E↑j
.text:000000000000AE80                 cmp     rbp, [rsp+0B8h+var_70]
.text:000000000000AE85                 jbe     loc_AC6F
.text:000000000000AE8B
.text:000000000000AE8B loc_AE8B:                               ; CODE XREF: backupfile_internal+5FE↓j
.text:000000000000AE8B                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000AE90                 mov     rsi, [rsp+0B8h+var_70]
.text:000000000000AE95                 add     rax, r15
.text:000000000000AE98                 lea     rdx, [rsi-1]
.text:000000000000AE9C                 sub     rax, rbx
.text:000000000000AE9F                 cmp     rax, rsi
.text:000000000000AEA2                 cmovnb  rax, rdx
.text:000000000000AEA6                 mov     byte ptr [rbx+rax], 7Eh ; '~'
.text:000000000000AEAA                 mov     byte ptr [rbx+rax+1], 0
.text:000000000000AEAF                 jmp     loc_AC6F
.text:000000000000AEAF ; ---------------------------------------------------------------------------
.text:000000000000AEB4                 align 8
.text:000000000000AEB8
.text:000000000000AEB8 loc_AEB8:                               ; CODE XREF: backupfile_internal+220↑j
.text:000000000000AEB8                 mov     r8, r15
.text:000000000000AEBB                 jmp     loc_ABD7
.text:000000000000AEC0 ; ---------------------------------------------------------------------------
.text:000000000000AEC0
.text:000000000000AEC0 loc_AEC0:                               ; CODE XREF: backupfile_internal+4CD↑j
.text:000000000000AEC0                 mov     qword ptr [rsp+0B8h+fd], rdx
.text:000000000000AEC5                 call    ___errno_location
.text:000000000000AECA                 cmp     dword ptr [rax], 0Ch
.text:000000000000AECD                 mov     rdx, qword ptr [rsp+0B8h+fd]
.text:000000000000AED2                 mov     [rbp+0], bx
.text:000000000000AED6                 mov     dword ptr [rdx], 7E317E2Eh
.text:000000000000AEDC                 mov     byte ptr [rdx+4], 0
.text:000000000000AEE0                 setz    al
.text:000000000000AEE3                 movzx   eax, al
.text:000000000000AEE6                 add     eax, 2
.text:000000000000AEE9                 mov     [rsp+0B8h+var_94], eax
.text:000000000000AEED                 jmp     loc_AC50
.text:000000000000AEF2 ; ---------------------------------------------------------------------------
.text:000000000000AEF2
.text:000000000000AEF2 loc_AEF2:                               ; CODE XREF: backupfile_internal+452↑j
.text:000000000000AEF2                 movzx   edx, word ptr [rbx]
.text:000000000000AEF5                 mov     esi, 2Eh ; '.'
.text:000000000000AEFA                 mov     rdi, r15        ; path
.text:000000000000AEFD                 mov     [rbx], si
.text:000000000000AF00                 mov     dword ptr [rax], 0
.text:000000000000AF06                 mov     esi, 3          ; name
.text:000000000000AF0B                 mov     [rsp+0B8h+fd], edx
.text:000000000000AF0F                 call    _pathconf
.text:000000000000AF14                 mov     edi, [r12]
.text:000000000000AF18                 mov     edx, [rsp+0B8h+fd]
.text:000000000000AF1C                 xor     ecx, ecx
.text:000000000000AF1E                 test    edi, edi
.text:000000000000AF20                 mov     [rbx], dx
.text:000000000000AF23                 setz    cl
.text:000000000000AF26                 sub     rax, rcx
.text:000000000000AF29                 jmp     loc_ADD6
.text:000000000000AF2E ; ---------------------------------------------------------------------------
.text:000000000000AF2E
.text:000000000000AF2E loc_AF2E:                               ; CODE XREF: backupfile_internal+314↑j
.text:000000000000AF2E                                         ; backupfile_internal+356↑j
.text:000000000000AF2E                 test    r13, r13
.text:000000000000AF31                 jz      loc_ACF0
.text:000000000000AF37                 mov     rdi, r13        ; dirp
.text:000000000000AF3A                 call    _closedir
.text:000000000000AF3F                 jmp     loc_ACF0
.text:000000000000AF44 ; ---------------------------------------------------------------------------
.text:000000000000AF44
.text:000000000000AF44 loc_AF44:                               ; CODE XREF: backupfile_internal+5D↑j
.text:000000000000AF44                 call    set_simple_backup_suffix
.text:000000000000AF49                 mov     rdi, cs:simple_backup_suffix
.text:000000000000AF50                 jmp     loc_A9C3
.text:000000000000AF55 ; ---------------------------------------------------------------------------
.text:000000000000AF55
.text:000000000000AF55 loc_AF55:                               ; CODE XREF: backupfile_internal+488↑j
.text:000000000000AF55                 mov     [rsp+0B8h+var_70], 0Eh
.text:000000000000AF5E                 jmp     loc_AE8B
.text:000000000000AF63 ; ---------------------------------------------------------------------------
.text:000000000000AF63
.text:000000000000AF63 loc_AF63:                               ; CODE XREF: backupfile_internal+233↑j
.text:000000000000AF63                 mov     esi, 1
.text:000000000000AF68                 jmp     loc_AB99
.text:000000000000AF6D ; ---------------------------------------------------------------------------
.text:000000000000AF6D
.text:000000000000AF6D loc_AF6D:                               ; CODE XREF: backupfile_internal+3A1↑j
.text:000000000000AF6D                 call    ___stack_chk_fail
.text:000000000000AF6D ; } // starts at A960
.text:000000000000AF6D backupfile_internal endp
.text:000000000000AF6D
.text:000000000000AF6D ; ---------------------------------------------------------------------------
.text:000000000000AF72                 align 20h
.text:000000000000AF80
.text:000000000000AF80 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF80
.text:000000000000AF80
.text:000000000000AF80                 public backup_file_rename
.text:000000000000AF80 backup_file_rename proc near            ; CODE XREF: copy_internal+DDE↑p
.text:000000000000AF80 ; __unwind {
.text:000000000000AF80                 mov     ecx, 1
.text:000000000000AF85                 jmp     backupfile_internal
.text:000000000000AF85 ; } // starts at AF80
.text:000000000000AF85 backup_file_rename endp
.text:000000000000AF85
.text:000000000000AF85 ; ---------------------------------------------------------------------------
.text:000000000000AF8A                 align 10h
.text:000000000000AF90
.text:000000000000AF90 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF90
.text:000000000000AF90
.text:000000000000AF90 get_version_part_0 proc near            ; CODE XREF: get_version+A↓j
.text:000000000000AF90                                         ; xget_version:loc_B042↓j
.text:000000000000AF90 ; __unwind {
.text:000000000000AF90                 sub     rsp, 8
.text:000000000000AF94                 mov     r9, cs:argmatch_die
.text:000000000000AF9B                 lea     rdx, backup_args
.text:000000000000AFA2                 lea     rcx, backup_types
.text:000000000000AFA9                 mov     r8d, 4
.text:000000000000AFAF                 call    __xargmatch_internal
.text:000000000000AFB4                 lea     rdx, backup_types
.text:000000000000AFBB                 mov     eax, [rdx+rax*4]
.text:000000000000AFBE                 add     rsp, 8
.text:000000000000AFC2                 retn
.text:000000000000AFC2 ; } // starts at AF90
.text:000000000000AFC2 get_version_part_0 endp
.text:000000000000AFC2
.text:000000000000AFC2 ; ---------------------------------------------------------------------------
.text:000000000000AFC3                 align 10h
.text:000000000000AFD0
.text:000000000000AFD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AFD0
.text:000000000000AFD0
.text:000000000000AFD0                 public find_backup_file_name
.text:000000000000AFD0 find_backup_file_name proc near
.text:000000000000AFD0 ; __unwind {
.text:000000000000AFD0                 sub     rsp, 8
.text:000000000000AFD4                 xor     ecx, ecx
.text:000000000000AFD6                 call    backupfile_internal
.text:000000000000AFDB                 test    rax, rax
.text:000000000000AFDE                 jz      short loc_AFE5
.text:000000000000AFE0                 add     rsp, 8
.text:000000000000AFE4                 retn
.text:000000000000AFE5 ; ---------------------------------------------------------------------------
.text:000000000000AFE5
.text:000000000000AFE5 loc_AFE5:                               ; CODE XREF: find_backup_file_name+E↑j
.text:000000000000AFE5                 call    xalloc_die
.text:000000000000AFE5 ; } // starts at AFD0
.text:000000000000AFE5 find_backup_file_name endp
.text:000000000000AFE5
.text:000000000000AFE5 ; ---------------------------------------------------------------------------
.text:000000000000AFEA                 align 10h
.text:000000000000AFF0
.text:000000000000AFF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AFF0
.text:000000000000AFF0
.text:000000000000AFF0                 public get_version
.text:000000000000AFF0 get_version     proc near
.text:000000000000AFF0 ; __unwind {
.text:000000000000AFF0                 test    rsi, rsi
.text:000000000000AFF3                 jz      short loc_B000
.text:000000000000AFF5                 cmp     byte ptr [rsi], 0
.text:000000000000AFF8                 jz      short loc_B000
.text:000000000000AFFA                 jmp     short get_version_part_0
.text:000000000000AFFA ; ---------------------------------------------------------------------------
.text:000000000000AFFC                 align 20h
.text:000000000000B000
.text:000000000000B000 loc_B000:                               ; CODE XREF: get_version+3↑j
.text:000000000000B000                                         ; get_version+8↑j
.text:000000000000B000                 mov     eax, 2
.text:000000000000B005                 retn
.text:000000000000B005 ; } // starts at AFF0
.text:000000000000B005 get_version     endp
.text:000000000000B005
.text:000000000000B005 ; ---------------------------------------------------------------------------
.text:000000000000B006                 align 10h
.text:000000000000B010
.text:000000000000B010 ; =============== S U B R O U T I N E =======================================
.text:000000000000B010
.text:000000000000B010
.text:000000000000B010                 public xget_version
.text:000000000000B010 xget_version    proc near               ; CODE XREF: main+910↑p
.text:000000000000B010 ; __unwind {
.text:000000000000B010                 test    rsi, rsi
.text:000000000000B013                 jz      short loc_B01A
.text:000000000000B015                 cmp     byte ptr [rsi], 0
.text:000000000000B018                 jnz     short loc_B042
.text:000000000000B01A
.text:000000000000B01A loc_B01A:                               ; CODE XREF: xget_version+3↑j
.text:000000000000B01A                 lea     rdi, aVersionControl ; "VERSION_CONTROL"
.text:000000000000B021                 sub     rsp, 8
.text:000000000000B025                 call    _getenv
.text:000000000000B02A                 test    rax, rax
.text:000000000000B02D                 jz      short loc_B050
.text:000000000000B02F                 cmp     byte ptr [rax], 0
.text:000000000000B032                 jz      short loc_B050
.text:000000000000B034                 lea     rdi, unk_180DD
.text:000000000000B03B                 mov     rsi, rax
.text:000000000000B03E                 add     rsp, 8
.text:000000000000B042
.text:000000000000B042 loc_B042:                               ; CODE XREF: xget_version+8↑j
.text:000000000000B042                 jmp     get_version_part_0
.text:000000000000B042 ; ---------------------------------------------------------------------------
.text:000000000000B047                 align 10h
.text:000000000000B050
.text:000000000000B050 loc_B050:                               ; CODE XREF: xget_version+1D↑j
.text:000000000000B050                                         ; xget_version+22↑j
.text:000000000000B050                 mov     eax, 2
.text:000000000000B055                 add     rsp, 8
.text:000000000000B059                 retn
.text:000000000000B059 ; } // starts at B010
.text:000000000000B059 xget_version    endp
.text:000000000000B059
.text:000000000000B059 ; ---------------------------------------------------------------------------
.text:000000000000B05A                 align 20h
.text:000000000000B060
.text:000000000000B060 ; =============== S U B R O U T I N E =======================================
.text:000000000000B060
.text:000000000000B060
.text:000000000000B060                 public buffer_lcm
.text:000000000000B060 buffer_lcm      proc near               ; CODE XREF: copy_internal+2FE0↑p
.text:000000000000B060 ; __unwind {
.text:000000000000B060                 test    rdi, rdi
.text:000000000000B063                 mov     rcx, rdx
.text:000000000000B066                 jnz     short loc_B088
.text:000000000000B068                 test    rsi, rsi
.text:000000000000B06B                 mov     edi, 2000h
.text:000000000000B070                 cmovnz  rdi, rsi
.text:000000000000B074
.text:000000000000B074 loc_B074:                               ; CODE XREF: buffer_lcm+2B↓j
.text:000000000000B074                                         ; buffer_lcm+52↓j ...
.text:000000000000B074                 cmp     rdi, rcx
.text:000000000000B077                 cmovbe  rcx, rdi
.text:000000000000B07B                 mov     r8, rcx
.text:000000000000B07E
.text:000000000000B07E loc_B07E:                               ; CODE XREF: buffer_lcm+61↓j
.text:000000000000B07E                 mov     rax, r8
.text:000000000000B081                 retn
.text:000000000000B081 ; ---------------------------------------------------------------------------
.text:000000000000B082                 align 8
.text:000000000000B088
.text:000000000000B088 loc_B088:                               ; CODE XREF: buffer_lcm+6↑j
.text:000000000000B088                 test    rsi, rsi
.text:000000000000B08B                 jz      short loc_B074
.text:000000000000B08D                 mov     r8, rsi
.text:000000000000B090                 mov     rax, rdi
.text:000000000000B093
.text:000000000000B093 loc_B093:                               ; CODE XREF: buffer_lcm+6E↓j
.text:000000000000B093                 xor     edx, edx
.text:000000000000B095                 div     r8
.text:000000000000B098                 test    rdx, rdx
.text:000000000000B09B                 jnz     short loc_B0C8
.text:000000000000B09D                 xor     edx, edx
.text:000000000000B09F                 mov     rax, rdi
.text:000000000000B0A2                 div     r8
.text:000000000000B0A5                 mov     r8, rsi
.text:000000000000B0A8                 imul    r8, rax
.text:000000000000B0AC                 mov     r9, rax
.text:000000000000B0AF                 cmp     r8, rcx
.text:000000000000B0B2                 ja      short loc_B074
.text:000000000000B0B4                 xor     edx, edx
.text:000000000000B0B6                 mov     rax, r8
.text:000000000000B0B9                 div     rsi
.text:000000000000B0BC                 cmp     rax, r9
.text:000000000000B0BF                 jnz     short loc_B074
.text:000000000000B0C1                 jmp     short loc_B07E
.text:000000000000B0C1 ; ---------------------------------------------------------------------------
.text:000000000000B0C3                 align 8
.text:000000000000B0C8
.text:000000000000B0C8 loc_B0C8:                               ; CODE XREF: buffer_lcm+3B↑j
.text:000000000000B0C8                 mov     rax, r8
.text:000000000000B0CB                 mov     r8, rdx
.text:000000000000B0CE                 jmp     short loc_B093
.text:000000000000B0CE ; } // starts at B060
.text:000000000000B0CE buffer_lcm      endp
.text:000000000000B0CE
.text:000000000000B0D0
.text:000000000000B0D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B0D0
.text:000000000000B0D0
.text:000000000000B0D0                 public close_stdin_set_file_name
.text:000000000000B0D0 close_stdin_set_file_name proc near
.text:000000000000B0D0 ; __unwind {
.text:000000000000B0D0                 mov     cs:file_name, rdi
.text:000000000000B0D7                 retn
.text:000000000000B0D7 ; } // starts at B0D0
.text:000000000000B0D7 close_stdin_set_file_name endp
.text:000000000000B0D7
.text:000000000000B0D7 ; ---------------------------------------------------------------------------
.text:000000000000B0D8                 align 20h
.text:000000000000B0E0
.text:000000000000B0E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B0E0
.text:000000000000B0E0
.text:000000000000B0E0                 public close_stdin
.text:000000000000B0E0 close_stdin     proc near               ; DATA XREF: main+7B↑o
.text:000000000000B0E0 ; __unwind {
.text:000000000000B0E0                 push    r12
.text:000000000000B0E2                 push    rbp
.text:000000000000B0E3                 push    rbx
.text:000000000000B0E4                 mov     rbx, cs:stdin@@GLIBC_2_2_5
.text:000000000000B0EB                 mov     rdi, rbx
.text:000000000000B0EE                 call    freadahead
.text:000000000000B0F3                 test    rax, rax
.text:000000000000B0F6                 jnz     loc_B198
.text:000000000000B0FC                 mov     rdi, rbx        ; stream
.text:000000000000B0FF                 call    close_stream
.text:000000000000B104                 test    eax, eax
.text:000000000000B106                 jnz     short loc_B138
.text:000000000000B108                 pop     rbx
.text:000000000000B109                 pop     rbp
.text:000000000000B10A                 pop     r12
.text:000000000000B10C                 jmp     close_stdout
.text:000000000000B10C ; ---------------------------------------------------------------------------
.text:000000000000B111                 align 8
.text:000000000000B118
.text:000000000000B118 loc_B118:                               ; CODE XREF: close_stdin+D0↓j
.text:000000000000B118                 call    rpl_fflush
.text:000000000000B11D                 test    eax, eax
.text:000000000000B11F                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:000000000000B126                 jz      loc_B1B6
.text:000000000000B12C                 call    close_stream
.text:000000000000B131                 nop     dword ptr [rax+00000000h]
.text:000000000000B138
.text:000000000000B138 loc_B138:                               ; CODE XREF: close_stdin+26↑j
.text:000000000000B138                                         ; close_stdin+DD↓j
.text:000000000000B138                 lea     rsi, aErrorClosingFi ; "error closing file"
.text:000000000000B13F                 xor     edi, edi        ; domainname
.text:000000000000B141                 mov     edx, 5          ; category
.text:000000000000B146                 call    _dcgettext
.text:000000000000B14B                 mov     rbx, cs:file_name
.text:000000000000B152                 mov     r12, rax
.text:000000000000B155                 call    ___errno_location
.text:000000000000B15A                 mov     rbp, rax
.text:000000000000B15D                 test    rbx, rbx
.text:000000000000B160                 jz      short loc_B1D0
.text:000000000000B162                 mov     rdi, rbx
.text:000000000000B165                 call    quotearg_colon
.text:000000000000B16A                 mov     esi, [rbp+0]    ; errnum
.text:000000000000B16D                 lea     rdx, format     ; "%s: %s"
.text:000000000000B174                 mov     rcx, rax
.text:000000000000B177                 mov     r8, r12
.text:000000000000B17A                 xor     edi, edi        ; status
.text:000000000000B17C                 xor     eax, eax
.text:000000000000B17E                 call    _error
.text:000000000000B183
.text:000000000000B183 loc_B183:                               ; CODE XREF: close_stdin+105↓j
.text:000000000000B183                 call    close_stdout
.text:000000000000B188                 mov     edi, cs:exit_failure ; status
.text:000000000000B18E                 call    __exit
.text:000000000000B18E ; ---------------------------------------------------------------------------
.text:000000000000B193                 align 8
.text:000000000000B198
.text:000000000000B198 loc_B198:                               ; CODE XREF: close_stdin+16↑j
.text:000000000000B198                 xor     esi, esi
.text:000000000000B19A                 mov     rdi, rbx
.text:000000000000B19D                 mov     edx, 1
.text:000000000000B1A2                 call    rpl_fseeko
.text:000000000000B1A7                 test    eax, eax
.text:000000000000B1A9                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:000000000000B1B0                 jz      loc_B118
.text:000000000000B1B6
.text:000000000000B1B6 loc_B1B6:                               ; CODE XREF: close_stdin+46↑j
.text:000000000000B1B6                 call    close_stream
.text:000000000000B1BB                 test    eax, eax
.text:000000000000B1BD                 jnz     loc_B138
.text:000000000000B1C3                 pop     rbx
.text:000000000000B1C4                 pop     rbp
.text:000000000000B1C5                 pop     r12
.text:000000000000B1C7                 jmp     close_stdout
.text:000000000000B1C7 ; ---------------------------------------------------------------------------
.text:000000000000B1CC                 align 10h
.text:000000000000B1D0
.text:000000000000B1D0 loc_B1D0:                               ; CODE XREF: close_stdin+80↑j
.text:000000000000B1D0                 mov     esi, [rax]      ; errnum
.text:000000000000B1D2                 lea     rdx, aS_0+2     ; format
.text:000000000000B1D9                 mov     rcx, r12
.text:000000000000B1DC                 xor     edi, edi        ; status
.text:000000000000B1DE                 xor     eax, eax
.text:000000000000B1E0                 call    _error
.text:000000000000B1E5                 jmp     short loc_B183
.text:000000000000B1E5 ; } // starts at B0E0
.text:000000000000B1E5 close_stdin     endp
.text:000000000000B1E5
.text:000000000000B1E5 ; ---------------------------------------------------------------------------
.text:000000000000B1E7                 align 10h
.text:000000000000B1F0
.text:000000000000B1F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1F0
.text:000000000000B1F0
.text:000000000000B1F0                 public close_stdout_set_file_name
.text:000000000000B1F0 close_stdout_set_file_name proc near
.text:000000000000B1F0 ; __unwind {
.text:000000000000B1F0                 mov     cs:file_name_0, rdi
.text:000000000000B1F7                 retn
.text:000000000000B1F7 ; } // starts at B1F0
.text:000000000000B1F7 close_stdout_set_file_name endp
.text:000000000000B1F7
.text:000000000000B1F7 ; ---------------------------------------------------------------------------
.text:000000000000B1F8                 align 20h
.text:000000000000B200
.text:000000000000B200 ; =============== S U B R O U T I N E =======================================
.text:000000000000B200
.text:000000000000B200
.text:000000000000B200                 public close_stdout_set_ignore_EPIPE
.text:000000000000B200 close_stdout_set_ignore_EPIPE proc near
.text:000000000000B200 ; __unwind {
.text:000000000000B200                 mov     cs:ignore_EPIPE, dil
.text:000000000000B207                 retn
.text:000000000000B207 ; } // starts at B200
.text:000000000000B207 close_stdout_set_ignore_EPIPE endp
.text:000000000000B207
.text:000000000000B207 ; ---------------------------------------------------------------------------
.text:000000000000B208                 align 10h
.text:000000000000B210
.text:000000000000B210 ; =============== S U B R O U T I N E =======================================
.text:000000000000B210
.text:000000000000B210 ; Attributes: info_from_lumina
.text:000000000000B210
.text:000000000000B210 ; void __cdecl close_stdout()
.text:000000000000B210                 public close_stdout
.text:000000000000B210 close_stdout    proc near               ; CODE XREF: close_stdin+2C↑j
.text:000000000000B210                                         ; close_stdin:loc_B183↑p ...
.text:000000000000B210 ; __unwind {
.text:000000000000B210                 push    rbp
.text:000000000000B211                 push    rbx
.text:000000000000B212                 sub     rsp, 8
.text:000000000000B216                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000B21D                 call    close_stream
.text:000000000000B222                 test    eax, eax
.text:000000000000B224                 jz      short loc_B23C
.text:000000000000B226                 call    ___errno_location
.text:000000000000B22B                 cmp     cs:ignore_EPIPE, 0
.text:000000000000B232                 mov     rbx, rax
.text:000000000000B235                 jz      short loc_B253
.text:000000000000B237                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000B23A                 jnz     short loc_B253
.text:000000000000B23C
.text:000000000000B23C loc_B23C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000B23C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:000000000000B243                 call    close_stream
.text:000000000000B248                 test    eax, eax
.text:000000000000B24A                 jnz     short loc_B292
.text:000000000000B24C                 add     rsp, 8
.text:000000000000B250                 pop     rbx
.text:000000000000B251                 pop     rbp
.text:000000000000B252                 retn
.text:000000000000B253 ; ---------------------------------------------------------------------------
.text:000000000000B253
.text:000000000000B253 loc_B253:                               ; CODE XREF: close_stdout+25↑j
.text:000000000000B253                                         ; close_stdout+2A↑j
.text:000000000000B253                 lea     rsi, aWriteError ; "write error"
.text:000000000000B25A                 xor     edi, edi        ; domainname
.text:000000000000B25C                 mov     edx, 5          ; category
.text:000000000000B261                 call    _dcgettext
.text:000000000000B266                 mov     rdi, cs:file_name_0
.text:000000000000B26D                 mov     rbp, rax
.text:000000000000B270                 test    rdi, rdi
.text:000000000000B273                 jz      short loc_B29D
.text:000000000000B275                 call    quotearg_colon
.text:000000000000B27A                 mov     esi, [rbx]      ; errnum
.text:000000000000B27C                 lea     rdx, format     ; "%s: %s"
.text:000000000000B283                 mov     rcx, rax
.text:000000000000B286                 mov     r8, rbp
.text:000000000000B289                 xor     edi, edi        ; status
.text:000000000000B28B                 xor     eax, eax
.text:000000000000B28D                 call    _error
.text:000000000000B292
.text:000000000000B292 loc_B292:                               ; CODE XREF: close_stdout+3A↑j
.text:000000000000B292                                         ; close_stdout+A2↓j
.text:000000000000B292                 mov     edi, cs:exit_failure ; status
.text:000000000000B298                 call    __exit
.text:000000000000B29D ; ---------------------------------------------------------------------------
.text:000000000000B29D
.text:000000000000B29D loc_B29D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000B29D                 mov     esi, [rbx]      ; errnum
.text:000000000000B29F                 lea     rdx, aS_0+2     ; format
.text:000000000000B2A6                 mov     rcx, rax
.text:000000000000B2A9                 xor     edi, edi        ; status
.text:000000000000B2AB                 xor     eax, eax
.text:000000000000B2AD                 call    _error
.text:000000000000B2B2                 jmp     short loc_B292
.text:000000000000B2B2 ; } // starts at B210
.text:000000000000B2B2 close_stdout    endp
.text:000000000000B2B2
.text:000000000000B2B2 ; ---------------------------------------------------------------------------
.text:000000000000B2B4                 align 20h
.text:000000000000B2C0
.text:000000000000B2C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B2C0
.text:000000000000B2C0
.text:000000000000B2C0                 public dir_name
.text:000000000000B2C0 dir_name        proc near               ; CODE XREF: copy_internal+ED3↑p
.text:000000000000B2C0                                         ; same_nameat_part_0+2B↓p ...
.text:000000000000B2C0 ; __unwind {
.text:000000000000B2C0                 sub     rsp, 8
.text:000000000000B2C4                 call    mdir_name
.text:000000000000B2C9                 test    rax, rax
.text:000000000000B2CC                 jz      short loc_B2D3
.text:000000000000B2CE                 add     rsp, 8
.text:000000000000B2D2                 retn
.text:000000000000B2D3 ; ---------------------------------------------------------------------------
.text:000000000000B2D3
.text:000000000000B2D3 loc_B2D3:                               ; CODE XREF: dir_name+C↑j
.text:000000000000B2D3                 call    xalloc_die
.text:000000000000B2D3 ; } // starts at B2C0
.text:000000000000B2D3 dir_name        endp
.text:000000000000B2D3
.text:000000000000B2D3 ; ---------------------------------------------------------------------------
.text:000000000000B2D8                 align 20h
.text:000000000000B2E0
.text:000000000000B2E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B2E0
.text:000000000000B2E0 ; Attributes: info_from_lumina
.text:000000000000B2E0
.text:000000000000B2E0 ; size_t __fastcall dir_len(const char *file)
.text:000000000000B2E0                 public dir_len
.text:000000000000B2E0 dir_len         proc near               ; CODE XREF: mdir_name+9↓p
.text:000000000000B2E0 ; __unwind {
.text:000000000000B2E0                 push    rbp
.text:000000000000B2E1                 push    rbx
.text:000000000000B2E2                 xor     ebp, ebp
.text:000000000000B2E4                 mov     rbx, rdi
.text:000000000000B2E7                 sub     rsp, 8
.text:000000000000B2EB                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:000000000000B2EE                 setz    bpl
.text:000000000000B2F2                 call    last_component
.text:000000000000B2F7                 mov     rcx, rax
.text:000000000000B2FA                 sub     rcx, rbx
.text:000000000000B2FD                 cmp     rcx, rbp
.text:000000000000B300                 jbe     short loc_B330
.text:000000000000B302                 cmp     byte ptr [rax-1], 2Fh ; '/'
.text:000000000000B306                 lea     rdx, [rcx-1]
.text:000000000000B30A                 jz      short loc_B31E
.text:000000000000B30C                 jmp     short loc_B330
.text:000000000000B30C ; ---------------------------------------------------------------------------
.text:000000000000B30E                 align 10h
.text:000000000000B310
.text:000000000000B310 loc_B310:                               ; CODE XREF: dir_len+41↓j
.text:000000000000B310                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:000000000000B315                 lea     rax, [rdx-1]
.text:000000000000B319                 jnz     short loc_B323
.text:000000000000B31B                 mov     rdx, rax
.text:000000000000B31E
.text:000000000000B31E loc_B31E:                               ; CODE XREF: dir_len+2A↑j
.text:000000000000B31E                 cmp     rbp, rdx
.text:000000000000B321                 jnz     short loc_B310
.text:000000000000B323
.text:000000000000B323 loc_B323:                               ; CODE XREF: dir_len+39↑j
.text:000000000000B323                 add     rsp, 8
.text:000000000000B327                 mov     rax, rdx
.text:000000000000B32A                 pop     rbx
.text:000000000000B32B                 pop     rbp
.text:000000000000B32C                 retn
.text:000000000000B32C ; ---------------------------------------------------------------------------
.text:000000000000B32D                 align 10h
.text:000000000000B330
.text:000000000000B330 loc_B330:                               ; CODE XREF: dir_len+20↑j
.text:000000000000B330                                         ; dir_len+2C↑j
.text:000000000000B330                 add     rsp, 8
.text:000000000000B334                 mov     rdx, rcx
.text:000000000000B337                 mov     rax, rdx
.text:000000000000B33A                 pop     rbx
.text:000000000000B33B                 pop     rbp
.text:000000000000B33C                 retn
.text:000000000000B33C ; } // starts at B2E0
.text:000000000000B33C dir_len         endp
.text:000000000000B33C
.text:000000000000B33C ; ---------------------------------------------------------------------------
.text:000000000000B33D                 align 20h
.text:000000000000B340
.text:000000000000B340 ; =============== S U B R O U T I N E =======================================
.text:000000000000B340
.text:000000000000B340 ; Attributes: info_from_lumina
.text:000000000000B340
.text:000000000000B340 ; char *__fastcall mdir_name(const char *file)
.text:000000000000B340                 public mdir_name
.text:000000000000B340 mdir_name       proc near               ; CODE XREF: dir_name+4↑p
.text:000000000000B340 ; __unwind {
.text:000000000000B340                 push    rbp
.text:000000000000B341                 push    rbx
.text:000000000000B342                 mov     rbp, rdi
.text:000000000000B345                 sub     rsp, 8
.text:000000000000B349                 call    dir_len
.text:000000000000B34E                 test    rax, rax
.text:000000000000B351                 mov     rbx, rax
.text:000000000000B354                 setz    al
.text:000000000000B357                 movzx   eax, al
.text:000000000000B35A                 lea     rdi, [rbx+rax+1] ; size
.text:000000000000B35F                 call    _malloc
.text:000000000000B364                 test    rax, rax
.text:000000000000B367                 mov     rcx, rax
.text:000000000000B36A                 jz      short loc_B386
.text:000000000000B36C                 mov     rdx, rbx        ; n
.text:000000000000B36F                 mov     rsi, rbp        ; src
.text:000000000000B372                 mov     rdi, rax        ; dest
.text:000000000000B375                 call    _memcpy
.text:000000000000B37A                 test    rbx, rbx
.text:000000000000B37D                 mov     rcx, rax
.text:000000000000B380                 jz      short loc_B390
.text:000000000000B382
.text:000000000000B382 loc_B382:                               ; CODE XREF: mdir_name+58↓j
.text:000000000000B382                 mov     byte ptr [rcx+rbx], 0
.text:000000000000B386
.text:000000000000B386 loc_B386:                               ; CODE XREF: mdir_name+2A↑j
.text:000000000000B386                 add     rsp, 8
.text:000000000000B38A                 mov     rax, rcx
.text:000000000000B38D                 pop     rbx
.text:000000000000B38E                 pop     rbp
.text:000000000000B38F                 retn
.text:000000000000B390 ; ---------------------------------------------------------------------------
.text:000000000000B390
.text:000000000000B390 loc_B390:                               ; CODE XREF: mdir_name+40↑j
.text:000000000000B390                 mov     byte ptr [rax], 2Eh ; '.'
.text:000000000000B393                 mov     ebx, 1
.text:000000000000B398                 jmp     short loc_B382
.text:000000000000B398 ; } // starts at B340
.text:000000000000B398 mdir_name       endp
.text:000000000000B398
.text:000000000000B398 ; ---------------------------------------------------------------------------
.text:000000000000B39A                 align 20h
.text:000000000000B3A0
.text:000000000000B3A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B3A0
.text:000000000000B3A0 ; Attributes: info_from_lumina
.text:000000000000B3A0
.text:000000000000B3A0 ; char *__fastcall last_component(const char *name)
.text:000000000000B3A0                 public last_component
.text:000000000000B3A0 last_component  proc near               ; CODE XREF: main+6A3↑p
.text:000000000000B3A0                                         ; main+806↑p ...
.text:000000000000B3A0 ; __unwind {
.text:000000000000B3A0                 movzx   edx, byte ptr [rdi]
.text:000000000000B3A3                 mov     rax, rdi
.text:000000000000B3A6                 cmp     dl, 2Fh ; '/'
.text:000000000000B3A9                 jnz     short loc_B3BC
.text:000000000000B3AB                 nop     dword ptr [rax+rax+00h]
.text:000000000000B3B0
.text:000000000000B3B0 loc_B3B0:                               ; CODE XREF: last_component+1A↓j
.text:000000000000B3B0                 add     rax, 1
.text:000000000000B3B4                 movzx   edx, byte ptr [rax]
.text:000000000000B3B7                 cmp     dl, 2Fh ; '/'
.text:000000000000B3BA                 jz      short loc_B3B0
.text:000000000000B3BC
.text:000000000000B3BC loc_B3BC:                               ; CODE XREF: last_component+9↑j
.text:000000000000B3BC                 test    dl, dl
.text:000000000000B3BE                 jz      short locret_B3FA
.text:000000000000B3C0                 mov     rcx, rax
.text:000000000000B3C3                 xor     esi, esi
.text:000000000000B3C5                 jmp     short loc_B3E5
.text:000000000000B3C5 ; ---------------------------------------------------------------------------
.text:000000000000B3C7                 align 10h
.text:000000000000B3D0
.text:000000000000B3D0 loc_B3D0:                               ; CODE XREF: last_component+48↓j
.text:000000000000B3D0                 test    sil, sil
.text:000000000000B3D3                 jz      short loc_B3DA
.text:000000000000B3D5                 mov     rax, rcx
.text:000000000000B3D8                 xor     esi, esi
.text:000000000000B3DA
.text:000000000000B3DA loc_B3DA:                               ; CODE XREF: last_component+33↑j
.text:000000000000B3DA                 add     rcx, 1
.text:000000000000B3DE                 movzx   edx, byte ptr [rcx]
.text:000000000000B3E1                 test    dl, dl
.text:000000000000B3E3                 jz      short locret_B3FA
.text:000000000000B3E5
.text:000000000000B3E5 loc_B3E5:                               ; CODE XREF: last_component+25↑j
.text:000000000000B3E5                                         ; last_component+58↓j
.text:000000000000B3E5                 cmp     dl, 2Fh ; '/'
.text:000000000000B3E8                 jnz     short loc_B3D0
.text:000000000000B3EA                 add     rcx, 1
.text:000000000000B3EE                 movzx   edx, byte ptr [rcx]
.text:000000000000B3F1                 mov     esi, 1
.text:000000000000B3F6                 test    dl, dl
.text:000000000000B3F8                 jnz     short loc_B3E5
.text:000000000000B3FA
.text:000000000000B3FA locret_B3FA:                            ; CODE XREF: last_component+1E↑j
.text:000000000000B3FA                                         ; last_component+43↑j
.text:000000000000B3FA                 rep retn
.text:000000000000B3FA ; } // starts at B3A0
.text:000000000000B3FA last_component  endp
.text:000000000000B3FA
.text:000000000000B3FA ; ---------------------------------------------------------------------------
.text:000000000000B3FC                 align 20h
.text:000000000000B400
.text:000000000000B400 ; =============== S U B R O U T I N E =======================================
.text:000000000000B400
.text:000000000000B400 ; Attributes: info_from_lumina
.text:000000000000B400
.text:000000000000B400 ; size_t __fastcall base_len(const char *name)
.text:000000000000B400                 public base_len
.text:000000000000B400 base_len        proc near               ; CODE XREF: backupfile_internal+ED↑p
.text:000000000000B400                                         ; backupfile_internal+41E↑p ...
.text:000000000000B400 ; __unwind {
.text:000000000000B400                 push    rbx
.text:000000000000B401                 mov     rbx, rdi
.text:000000000000B404                 call    _strlen
.text:000000000000B409                 cmp     rax, 1
.text:000000000000B40D                 jbe     short loc_B41A
.text:000000000000B40F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:000000000000B414                 lea     rdx, [rax-1]
.text:000000000000B418                 jz      short loc_B428
.text:000000000000B41A
.text:000000000000B41A loc_B41A:                               ; CODE XREF: base_len+D↑j
.text:000000000000B41A                 pop     rbx
.text:000000000000B41B                 retn
.text:000000000000B41B ; ---------------------------------------------------------------------------
.text:000000000000B41C                 align 20h
.text:000000000000B420
.text:000000000000B420 loc_B420:                               ; CODE XREF: base_len+37↓j
.text:000000000000B420                 mov     rdx, rax
.text:000000000000B423                 nop     dword ptr [rax+rax+00h]
.text:000000000000B428
.text:000000000000B428 loc_B428:                               ; CODE XREF: base_len+18↑j
.text:000000000000B428                 cmp     rdx, 1
.text:000000000000B42C                 jz      short loc_B440
.text:000000000000B42E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:000000000000B433                 lea     rax, [rdx-1]
.text:000000000000B437                 jz      short loc_B420
.text:000000000000B439                 mov     rax, rdx
.text:000000000000B43C                 pop     rbx
.text:000000000000B43D                 retn
.text:000000000000B43D ; ---------------------------------------------------------------------------
.text:000000000000B43E                 align 20h
.text:000000000000B440
.text:000000000000B440 loc_B440:                               ; CODE XREF: base_len+2C↑j
.text:000000000000B440                 mov     eax, 1
.text:000000000000B445                 pop     rbx
.text:000000000000B446                 retn
.text:000000000000B446 ; } // starts at B400
.text:000000000000B446 base_len        endp
.text:000000000000B446
.text:000000000000B446 ; ---------------------------------------------------------------------------
.text:000000000000B447                 align 10h
.text:000000000000B450
.text:000000000000B450 ; =============== S U B R O U T I N E =======================================
.text:000000000000B450
.text:000000000000B450
.text:000000000000B450 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:000000000000B450                 public fdadvise
.text:000000000000B450 fdadvise        proc near               ; CODE XREF: copy_internal+2F57↑p
.text:000000000000B450 ; __unwind {
.text:000000000000B450                 jmp     _posix_fadvise
.text:000000000000B450 ; } // starts at B450
.text:000000000000B450 fdadvise        endp
.text:000000000000B450
.text:000000000000B450 ; ---------------------------------------------------------------------------
.text:000000000000B455                 align 20h
.text:000000000000B460
.text:000000000000B460 ; =============== S U B R O U T I N E =======================================
.text:000000000000B460
.text:000000000000B460
.text:000000000000B460                 public fadvise
.text:000000000000B460 fadvise         proc near
.text:000000000000B460 ; __unwind {
.text:000000000000B460                 test    rdi, rdi
.text:000000000000B463                 jz      short locret_B480
.text:000000000000B465                 push    rbx
.text:000000000000B466                 mov     ebx, esi
.text:000000000000B468                 call    _fileno
.text:000000000000B46D                 mov     ecx, ebx        ; advise
.text:000000000000B46F                 xor     edx, edx        ; len
.text:000000000000B471                 xor     esi, esi        ; offset
.text:000000000000B473                 pop     rbx
.text:000000000000B474                 mov     edi, eax        ; fd
.text:000000000000B476                 jmp     _posix_fadvise
.text:000000000000B476 ; ---------------------------------------------------------------------------
.text:000000000000B47B                 align 20h
.text:000000000000B480
.text:000000000000B480 locret_B480:                            ; CODE XREF: fadvise+3↑j
.text:000000000000B480                 rep retn
.text:000000000000B480 ; } // starts at B460
.text:000000000000B480 fadvise         endp
.text:000000000000B480
.text:000000000000B480 ; ---------------------------------------------------------------------------
.text:000000000000B482                 align 10h
.text:000000000000B490
.text:000000000000B490 ; =============== S U B R O U T I N E =======================================
.text:000000000000B490
.text:000000000000B490
.text:000000000000B490                 public open_safer
.text:000000000000B490 open_safer      proc near               ; CODE XREF: copy_internal+20BC↑p
.text:000000000000B490                                         ; copy_internal+2E68↑p ...
.text:000000000000B490
.text:000000000000B490 var_58          = dword ptr -58h
.text:000000000000B490 var_50          = qword ptr -50h
.text:000000000000B490 var_48          = qword ptr -48h
.text:000000000000B490 var_40          = qword ptr -40h
.text:000000000000B490 var_38          = byte ptr -38h
.text:000000000000B490 var_28          = qword ptr -28h
.text:000000000000B490 arg_0           = byte ptr  8
.text:000000000000B490
.text:000000000000B490 ; __unwind {
.text:000000000000B490                 sub     rsp, 58h
.text:000000000000B494                 mov     [rsp+58h+var_28], rdx
.text:000000000000B499                 xor     edx, edx
.text:000000000000B49B                 mov     rax, fs:28h
.text:000000000000B4A4                 mov     [rsp+58h+var_40], rax
.text:000000000000B4A9                 xor     eax, eax
.text:000000000000B4AB                 test    sil, 40h
.text:000000000000B4AF                 jnz     short loc_B4D8
.text:000000000000B4B1
.text:000000000000B4B1 loc_B4B1:                               ; CODE XREF: open_safer+67↓j
.text:000000000000B4B1                 xor     eax, eax
.text:000000000000B4B3                 call    _open
.text:000000000000B4B8                 mov     edi, eax        ; fd
.text:000000000000B4BA                 call    fd_safer_flag
.text:000000000000B4BF                 mov     rcx, [rsp+58h+var_40]
.text:000000000000B4C4                 xor     rcx, fs:28h
.text:000000000000B4CD                 jnz     short loc_B4F9
.text:000000000000B4CF                 add     rsp, 58h
.text:000000000000B4D3                 retn
.text:000000000000B4D3 ; ---------------------------------------------------------------------------
.text:000000000000B4D4                 align 8
.text:000000000000B4D8
.text:000000000000B4D8 loc_B4D8:                               ; CODE XREF: open_safer+1F↑j
.text:000000000000B4D8                 lea     rax, [rsp+58h+arg_0]
.text:000000000000B4DD                 mov     [rsp+58h+var_58], 10h
.text:000000000000B4E4                 mov     edx, dword ptr [rsp+58h+var_28]
.text:000000000000B4E8                 mov     [rsp+58h+var_50], rax
.text:000000000000B4ED                 lea     rax, [rsp+58h+var_38]
.text:000000000000B4F2                 mov     [rsp+58h+var_48], rax
.text:000000000000B4F7                 jmp     short loc_B4B1
.text:000000000000B4F9 ; ---------------------------------------------------------------------------
.text:000000000000B4F9
.text:000000000000B4F9 loc_B4F9:                               ; CODE XREF: open_safer+3D↑j
.text:000000000000B4F9                 call    ___stack_chk_fail
.text:000000000000B4F9 ; } // starts at B490
.text:000000000000B4F9 open_safer      endp
.text:000000000000B4F9
.text:000000000000B4F9 ; ---------------------------------------------------------------------------
.text:000000000000B4FE                 align 20h
.text:000000000000B500
.text:000000000000B500 ; =============== S U B R O U T I N E =======================================
.text:000000000000B500
.text:000000000000B500 ; Attributes: info_from_lumina
.text:000000000000B500
.text:000000000000B500 ; void __fastcall record_file(Hash_table *ht, const char *file, const stat *stats)
.text:000000000000B500                 public record_file
.text:000000000000B500 record_file     proc near               ; CODE XREF: copy_internal+145↑p
.text:000000000000B500                                         ; copy_internal+12BD↑p ...
.text:000000000000B500 ; __unwind {
.text:000000000000B500                 test    rdi, rdi
.text:000000000000B503                 jz      short locret_B580
.text:000000000000B505                 push    r13
.text:000000000000B507                 push    r12
.text:000000000000B509                 mov     r13, rdi
.text:000000000000B50C                 push    rbp
.text:000000000000B50D                 push    rbx
.text:000000000000B50E                 mov     r12, rsi
.text:000000000000B511                 mov     edi, 18h
.text:000000000000B516                 mov     rbp, rdx
.text:000000000000B519                 sub     rsp, 8
.text:000000000000B51D                 call    xmalloc
.text:000000000000B522                 mov     rdi, r12        ; src
.text:000000000000B525                 mov     rbx, rax
.text:000000000000B528                 call    xstrdup
.text:000000000000B52D                 mov     [rbx], rax
.text:000000000000B530                 mov     rax, [rbp+8]
.text:000000000000B534                 mov     rsi, rbx
.text:000000000000B537                 mov     rdi, r13
.text:000000000000B53A                 mov     [rbx+8], rax
.text:000000000000B53E                 mov     rax, [rbp+0]
.text:000000000000B542                 mov     [rbx+10h], rax
.text:000000000000B546                 call    hash_insert
.text:000000000000B54B                 test    rax, rax
.text:000000000000B54E                 jz      short loc_B582
.text:000000000000B550                 cmp     rbx, rax
.text:000000000000B553                 jz      short loc_B570
.text:000000000000B555                 add     rsp, 8
.text:000000000000B559                 mov     rdi, rbx        ; ptr
.text:000000000000B55C                 pop     rbx
.text:000000000000B55D                 pop     rbp
.text:000000000000B55E                 pop     r12
.text:000000000000B560                 pop     r13
.text:000000000000B562                 jmp     triple_free
.text:000000000000B562 ; ---------------------------------------------------------------------------
.text:000000000000B567                 align 10h
.text:000000000000B570
.text:000000000000B570 loc_B570:                               ; CODE XREF: record_file+53↑j
.text:000000000000B570                 add     rsp, 8
.text:000000000000B574                 pop     rbx
.text:000000000000B575                 pop     rbp
.text:000000000000B576                 pop     r12
.text:000000000000B578                 pop     r13
.text:000000000000B57A                 retn
.text:000000000000B57A ; ---------------------------------------------------------------------------
.text:000000000000B57B                 align 20h
.text:000000000000B580
.text:000000000000B580 locret_B580:                            ; CODE XREF: record_file+3↑j
.text:000000000000B580                 rep retn
.text:000000000000B582 ; ---------------------------------------------------------------------------
.text:000000000000B582
.text:000000000000B582 loc_B582:                               ; CODE XREF: record_file+4E↑j
.text:000000000000B582                 call    xalloc_die
.text:000000000000B582 ; } // starts at B500
.text:000000000000B582 record_file     endp
.text:000000000000B582
.text:000000000000B582 ; ---------------------------------------------------------------------------
.text:000000000000B587                 align 10h
.text:000000000000B590
.text:000000000000B590 ; =============== S U B R O U T I N E =======================================
.text:000000000000B590
.text:000000000000B590 ; Attributes: info_from_lumina
.text:000000000000B590
.text:000000000000B590 ; _Bool __fastcall seen_file(const Hash_table *ht, const char *file, const stat *stats)
.text:000000000000B590                 public seen_file
.text:000000000000B590 seen_file       proc near               ; CODE XREF: copy_internal+3E4↑p
.text:000000000000B590                                         ; copy_internal+A59↑p ...
.text:000000000000B590
.text:000000000000B590 var_28          = qword ptr -28h
.text:000000000000B590 var_20          = qword ptr -20h
.text:000000000000B590 var_18          = qword ptr -18h
.text:000000000000B590 var_10          = qword ptr -10h
.text:000000000000B590
.text:000000000000B590 ; __unwind {
.text:000000000000B590                 sub     rsp, 28h
.text:000000000000B594                 mov     rax, fs:28h
.text:000000000000B59D                 mov     [rsp+28h+var_10], rax
.text:000000000000B5A2                 xor     eax, eax
.text:000000000000B5A4                 test    rdi, rdi
.text:000000000000B5A7                 jz      short loc_B5CC
.text:000000000000B5A9                 mov     rax, [rdx+8]
.text:000000000000B5AD                 mov     [rsp+28h+var_28], rsi
.text:000000000000B5B1                 mov     rsi, rsp
.text:000000000000B5B4                 mov     [rsp+28h+var_20], rax
.text:000000000000B5B9                 mov     rax, [rdx]
.text:000000000000B5BC                 mov     [rsp+28h+var_18], rax
.text:000000000000B5C1                 call    hash_lookup
.text:000000000000B5C6                 test    rax, rax
.text:000000000000B5C9                 setnz   al
.text:000000000000B5CC
.text:000000000000B5CC loc_B5CC:                               ; CODE XREF: seen_file+17↑j
.text:000000000000B5CC                 mov     rcx, [rsp+28h+var_10]
.text:000000000000B5D1                 xor     rcx, fs:28h
.text:000000000000B5DA                 jnz     short loc_B5E1
.text:000000000000B5DC                 add     rsp, 28h
.text:000000000000B5E0                 retn
.text:000000000000B5E1 ; ---------------------------------------------------------------------------
.text:000000000000B5E1
.text:000000000000B5E1 loc_B5E1:                               ; CODE XREF: seen_file+4A↑j
.text:000000000000B5E1                 call    ___stack_chk_fail
.text:000000000000B5E1 ; } // starts at B590
.text:000000000000B5E1 seen_file       endp
.text:000000000000B5E1
.text:000000000000B5E1 ; ---------------------------------------------------------------------------
.text:000000000000B5E6                 align 10h
.text:000000000000B5F0
.text:000000000000B5F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B5F0
.text:000000000000B5F0 ; Attributes: info_from_lumina
.text:000000000000B5F0
.text:000000000000B5F0 ; void __fastcall strmode(mode_t mode, char *str)
.text:000000000000B5F0                 public strmode
.text:000000000000B5F0 strmode         proc near               ; CODE XREF: overwrite_ok_isra_12+42↑p
.text:000000000000B5F0                                         ; filemodestring+3↓j
.text:000000000000B5F0 ; __unwind {
.text:000000000000B5F0                 mov     edx, edi
.text:000000000000B5F2                 mov     eax, 2Dh ; '-'
.text:000000000000B5F7                 and     edx, 0F000h
.text:000000000000B5FD                 cmp     edx, 8000h
.text:000000000000B603                 jz      short loc_B660
.text:000000000000B605                 cmp     edx, 4000h
.text:000000000000B60B                 mov     eax, 64h ; 'd'
.text:000000000000B610                 jz      short loc_B660
.text:000000000000B612                 cmp     edx, 6000h
.text:000000000000B618                 mov     eax, 62h ; 'b'
.text:000000000000B61D                 jz      short loc_B660
.text:000000000000B61F                 cmp     edx, 2000h
.text:000000000000B625                 mov     eax, 63h ; 'c'
.text:000000000000B62A                 jz      short loc_B660
.text:000000000000B62C                 cmp     edx, 0A000h
.text:000000000000B632                 mov     eax, 6Ch ; 'l'
.text:000000000000B637                 jz      short loc_B660
.text:000000000000B639                 cmp     edx, 1000h
.text:000000000000B63F                 mov     eax, 70h ; 'p'
.text:000000000000B644                 jz      short loc_B660
.text:000000000000B646                 cmp     edx, 0C000h
.text:000000000000B64C                 mov     eax, 73h ; 's'
.text:000000000000B651                 mov     edx, 3Fh ; '?'
.text:000000000000B656                 cmovnz  eax, edx
.text:000000000000B659                 nop     dword ptr [rax+00000000h]
.text:000000000000B660
.text:000000000000B660 loc_B660:                               ; CODE XREF: strmode+13↑j
.text:000000000000B660                                         ; strmode+20↑j ...
.text:000000000000B660                 mov     [rsi], al
.text:000000000000B662                 mov     eax, edi
.text:000000000000B664                 and     eax, 100h
.text:000000000000B669                 cmp     eax, 1
.text:000000000000B66C                 sbb     eax, eax
.text:000000000000B66E                 and     eax, 0FFFFFFBBh
.text:000000000000B671                 add     eax, 72h ; 'r'
.text:000000000000B674                 mov     [rsi+1], al
.text:000000000000B677                 mov     eax, edi
.text:000000000000B679                 and     eax, 80h
.text:000000000000B67E                 cmp     eax, 1
.text:000000000000B681                 sbb     eax, eax
.text:000000000000B683                 and     eax, 0FFFFFFB6h
.text:000000000000B686                 add     eax, 77h ; 'w'
.text:000000000000B689                 mov     [rsi+2], al
.text:000000000000B68C                 mov     eax, edi
.text:000000000000B68E                 and     eax, 40h
.text:000000000000B691                 cmp     eax, 1
.text:000000000000B694                 sbb     eax, eax
.text:000000000000B696                 test    edi, 800h
.text:000000000000B69C                 jz      loc_B740
.text:000000000000B6A2                 and     eax, 0FFFFFFE0h
.text:000000000000B6A5                 add     eax, 73h ; 's'
.text:000000000000B6A8
.text:000000000000B6A8 loc_B6A8:                               ; CODE XREF: strmode+156↓j
.text:000000000000B6A8                 mov     [rsi+3], al
.text:000000000000B6AB                 mov     eax, edi
.text:000000000000B6AD                 and     eax, 20h
.text:000000000000B6B0                 cmp     eax, 1
.text:000000000000B6B3                 sbb     eax, eax
.text:000000000000B6B5                 and     eax, 0FFFFFFBBh
.text:000000000000B6B8                 add     eax, 72h ; 'r'
.text:000000000000B6BB                 mov     [rsi+4], al
.text:000000000000B6BE                 mov     eax, edi
.text:000000000000B6C0                 and     eax, 10h
.text:000000000000B6C3                 cmp     eax, 1
.text:000000000000B6C6                 sbb     eax, eax
.text:000000000000B6C8                 and     eax, 0FFFFFFB6h
.text:000000000000B6CB                 add     eax, 77h ; 'w'
.text:000000000000B6CE                 mov     [rsi+5], al
.text:000000000000B6D1                 mov     eax, edi
.text:000000000000B6D3                 and     eax, 8
.text:000000000000B6D6                 cmp     eax, 1
.text:000000000000B6D9                 sbb     eax, eax
.text:000000000000B6DB                 test    edi, 400h
.text:000000000000B6E1                 jz      loc_B768
.text:000000000000B6E7                 and     eax, 0FFFFFFE0h
.text:000000000000B6EA                 add     eax, 73h ; 's'
.text:000000000000B6ED
.text:000000000000B6ED loc_B6ED:                               ; CODE XREF: strmode+17E↓j
.text:000000000000B6ED                 mov     [rsi+6], al
.text:000000000000B6F0                 mov     eax, edi
.text:000000000000B6F2                 and     eax, 4
.text:000000000000B6F5                 cmp     eax, 1
.text:000000000000B6F8                 sbb     eax, eax
.text:000000000000B6FA                 and     eax, 0FFFFFFBBh
.text:000000000000B6FD                 add     eax, 72h ; 'r'
.text:000000000000B700                 mov     [rsi+7], al
.text:000000000000B703                 mov     eax, edi
.text:000000000000B705                 and     eax, 2
.text:000000000000B708                 cmp     eax, 1
.text:000000000000B70B                 sbb     eax, eax
.text:000000000000B70D                 and     eax, 0FFFFFFB6h
.text:000000000000B710                 add     eax, 77h ; 'w'
.text:000000000000B713                 mov     [rsi+8], al
.text:000000000000B716                 mov     eax, edi
.text:000000000000B718                 and     eax, 1
.text:000000000000B71B                 cmp     eax, 1
.text:000000000000B71E                 sbb     eax, eax
.text:000000000000B720                 and     edi, 200h
.text:000000000000B726                 jz      short loc_B750
.text:000000000000B728                 and     eax, 0FFFFFFE0h
.text:000000000000B72B                 add     eax, 74h ; 't'
.text:000000000000B72E                 mov     [rsi+9], al
.text:000000000000B731                 mov     eax, 20h ; ' '
.text:000000000000B736                 mov     [rsi+0Ah], ax
.text:000000000000B73A                 retn
.text:000000000000B73A ; ---------------------------------------------------------------------------
.text:000000000000B73B                 align 20h
.text:000000000000B740
.text:000000000000B740 loc_B740:                               ; CODE XREF: strmode+AC↑j
.text:000000000000B740                 and     eax, 0FFFFFFB5h
.text:000000000000B743                 add     eax, 78h ; 'x'
.text:000000000000B746                 jmp     loc_B6A8
.text:000000000000B746 ; ---------------------------------------------------------------------------
.text:000000000000B74B                 align 10h
.text:000000000000B750
.text:000000000000B750 loc_B750:                               ; CODE XREF: strmode+136↑j
.text:000000000000B750                 and     eax, 0FFFFFFB5h
.text:000000000000B753                 add     eax, 78h ; 'x'
.text:000000000000B756                 mov     [rsi+9], al
.text:000000000000B759                 mov     eax, 20h ; ' '
.text:000000000000B75E                 mov     [rsi+0Ah], ax
.text:000000000000B762                 retn
.text:000000000000B762 ; ---------------------------------------------------------------------------
.text:000000000000B763                 align 8
.text:000000000000B768
.text:000000000000B768 loc_B768:                               ; CODE XREF: strmode+F1↑j
.text:000000000000B768                 and     eax, 0FFFFFFB5h
.text:000000000000B76B                 add     eax, 78h ; 'x'
.text:000000000000B76E                 jmp     loc_B6ED
.text:000000000000B76E ; } // starts at B5F0
.text:000000000000B76E strmode         endp
.text:000000000000B76E
.text:000000000000B76E ; ---------------------------------------------------------------------------
.text:000000000000B773                 align 20h
.text:000000000000B780
.text:000000000000B780 ; =============== S U B R O U T I N E =======================================
.text:000000000000B780
.text:000000000000B780
.text:000000000000B780                 public filemodestring
.text:000000000000B780 filemodestring  proc near
.text:000000000000B780 ; __unwind {
.text:000000000000B780                 mov     edi, [rdi+18h]
.text:000000000000B783                 jmp     strmode
.text:000000000000B783 ; } // starts at B780
.text:000000000000B783 filemodestring  endp
.text:000000000000B783
.text:000000000000B783 ; ---------------------------------------------------------------------------
.text:000000000000B788                 align 10h
.text:000000000000B790
.text:000000000000B790 ; =============== S U B R O U T I N E =======================================
.text:000000000000B790
.text:000000000000B790
.text:000000000000B790                 public file_name_concat
.text:000000000000B790 file_name_concat proc near              ; CODE XREF: main+6B2↑p
.text:000000000000B790                                         ; copy_internal+1E80↑p ...
.text:000000000000B790 ; __unwind {
.text:000000000000B790                 sub     rsp, 8
.text:000000000000B794                 call    mfile_name_concat
.text:000000000000B799                 test    rax, rax
.text:000000000000B79C                 jz      short loc_B7A3
.text:000000000000B79E                 add     rsp, 8
.text:000000000000B7A2                 retn
.text:000000000000B7A3 ; ---------------------------------------------------------------------------
.text:000000000000B7A3
.text:000000000000B7A3 loc_B7A3:                               ; CODE XREF: file_name_concat+C↑j
.text:000000000000B7A3                 call    xalloc_die
.text:000000000000B7A3 ; } // starts at B790
.text:000000000000B7A3 file_name_concat endp
.text:000000000000B7A3
.text:000000000000B7A3 ; ---------------------------------------------------------------------------
.text:000000000000B7A8                 align 10h
.text:000000000000B7B0
.text:000000000000B7B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B7B0
.text:000000000000B7B0
.text:000000000000B7B0 ; __int64 __fastcall mfile_name_concat(void *src, void *)
.text:000000000000B7B0                 public mfile_name_concat
.text:000000000000B7B0 mfile_name_concat proc near             ; CODE XREF: file_name_concat+4↑p
.text:000000000000B7B0
.text:000000000000B7B0 var_48          = qword ptr -48h
.text:000000000000B7B0 var_39          = byte ptr -39h
.text:000000000000B7B0
.text:000000000000B7B0 ; __unwind {
.text:000000000000B7B0                 push    r15
.text:000000000000B7B2                 push    r14
.text:000000000000B7B4                 mov     r15, rdx
.text:000000000000B7B7                 push    r13
.text:000000000000B7B9                 push    r12
.text:000000000000B7BB                 mov     r12, rdi
.text:000000000000B7BE                 push    rbp
.text:000000000000B7BF                 push    rbx
.text:000000000000B7C0                 mov     rbp, rsi
.text:000000000000B7C3                 sub     rsp, 18h
.text:000000000000B7C7                 call    last_component
.text:000000000000B7CC                 mov     rbx, rax
.text:000000000000B7CF                 mov     rdi, rax
.text:000000000000B7D2                 call    base_len
.text:000000000000B7D7                 sub     rbx, r12
.text:000000000000B7DA                 mov     r13, rax
.text:000000000000B7DD                 mov     rdi, rbp        ; s
.text:000000000000B7E0                 add     rbx, rax
.text:000000000000B7E3                 call    _strlen
.text:000000000000B7E8                 test    r13, r13
.text:000000000000B7EB                 mov     r14, rax
.text:000000000000B7EE                 jz      short loc_B820
.text:000000000000B7F0                 cmp     byte ptr [r12+rbx-1], 2Fh ; '/'
.text:000000000000B7F6                 jz      loc_B8A0
.text:000000000000B7FC                 xor     eax, eax
.text:000000000000B7FE                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:000000000000B802                 mov     edx, 0
.text:000000000000B807                 setnz   al
.text:000000000000B80A                 mov     [rsp+48h+var_48], rax
.text:000000000000B80E                 mov     eax, 2Fh ; '/'
.text:000000000000B813                 cmovz   eax, edx
.text:000000000000B816                 mov     [rsp+48h+var_39], al
.text:000000000000B81A                 jmp     short loc_B83E
.text:000000000000B81A ; ---------------------------------------------------------------------------
.text:000000000000B81C                 align 20h
.text:000000000000B820
.text:000000000000B820 loc_B820:                               ; CODE XREF: mfile_name_concat+3E↑j
.text:000000000000B820                 xor     eax, eax
.text:000000000000B822                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:000000000000B826                 mov     edx, 0
.text:000000000000B82B                 setz    al
.text:000000000000B82E                 mov     [rsp+48h+var_48], rax
.text:000000000000B832                 mov     eax, 2Eh ; '.'
.text:000000000000B837                 cmovnz  eax, edx
.text:000000000000B83A                 mov     [rsp+48h+var_39], al
.text:000000000000B83E
.text:000000000000B83E loc_B83E:                               ; CODE XREF: mfile_name_concat+6A↑j
.text:000000000000B83E                                         ; mfile_name_concat+FD↓j
.text:000000000000B83E                 lea     rdi, [rbx+r14+1]
.text:000000000000B843                 add     rdi, [rsp+48h+var_48] ; size
.text:000000000000B847                 call    _malloc
.text:000000000000B84C                 test    rax, rax
.text:000000000000B84F                 mov     r13, rax
.text:000000000000B852                 jz      short loc_B886
.text:000000000000B854                 mov     rdi, rax        ; dest
.text:000000000000B857                 mov     rdx, rbx        ; n
.text:000000000000B85A                 mov     rsi, r12        ; src
.text:000000000000B85D                 call    _mempcpy
.text:000000000000B862                 movzx   ecx, [rsp+48h+var_39]
.text:000000000000B867                 mov     rdi, [rsp+48h+var_48]
.text:000000000000B86B                 add     rdi, rax        ; dest
.text:000000000000B86E                 test    r15, r15
.text:000000000000B871                 mov     [rax], cl
.text:000000000000B873                 jz      short loc_B878
.text:000000000000B875                 mov     [r15], rdi
.text:000000000000B878
.text:000000000000B878 loc_B878:                               ; CODE XREF: mfile_name_concat+C3↑j
.text:000000000000B878                 mov     rdx, r14        ; n
.text:000000000000B87B                 mov     rsi, rbp        ; src
.text:000000000000B87E                 call    _mempcpy
.text:000000000000B883                 mov     byte ptr [rax], 0
.text:000000000000B886
.text:000000000000B886 loc_B886:                               ; CODE XREF: mfile_name_concat+A2↑j
.text:000000000000B886                 add     rsp, 18h
.text:000000000000B88A                 mov     rax, r13
.text:000000000000B88D                 pop     rbx
.text:000000000000B88E                 pop     rbp
.text:000000000000B88F                 pop     r12
.text:000000000000B891                 pop     r13
.text:000000000000B893                 pop     r14
.text:000000000000B895                 pop     r15
.text:000000000000B897                 retn
.text:000000000000B897 ; ---------------------------------------------------------------------------
.text:000000000000B898                 align 20h
.text:000000000000B8A0
.text:000000000000B8A0 loc_B8A0:                               ; CODE XREF: mfile_name_concat+46↑j
.text:000000000000B8A0                 mov     [rsp+48h+var_48], 0
.text:000000000000B8A8                 mov     [rsp+48h+var_39], 0
.text:000000000000B8AD                 jmp     short loc_B83E
.text:000000000000B8AD ; } // starts at B7B0
.text:000000000000B8AD mfile_name_concat endp
.text:000000000000B8AD
.text:000000000000B8AD ; ---------------------------------------------------------------------------
.text:000000000000B8AF                 align 10h
.text:000000000000B8B0
.text:000000000000B8B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B8B0
.text:000000000000B8B0
.text:000000000000B8B0 ; __int64 __fastcall full_read(int fd, void *buf, size_t nbytes)
.text:000000000000B8B0                 public full_read
.text:000000000000B8B0 full_read       proc near               ; CODE XREF: install_file_in_file+35F↑p
.text:000000000000B8B0                                         ; install_file_in_file+384↑p
.text:000000000000B8B0 ; __unwind {
.text:000000000000B8B0                 push    r13
.text:000000000000B8B2                 push    r12
.text:000000000000B8B4                 push    rbp
.text:000000000000B8B5                 push    rbx
.text:000000000000B8B6                 sub     rsp, 8
.text:000000000000B8BA                 test    rdx, rdx
.text:000000000000B8BD                 jz      short loc_B921
.text:000000000000B8BF                 mov     r13d, edi
.text:000000000000B8C2                 mov     rbp, rsi
.text:000000000000B8C5                 mov     rbx, rdx
.text:000000000000B8C8                 xor     r12d, r12d
.text:000000000000B8CB                 jmp     short loc_B8E0
.text:000000000000B8CB ; ---------------------------------------------------------------------------
.text:000000000000B8CD                 align 10h
.text:000000000000B8D0
.text:000000000000B8D0 loc_B8D0:                               ; CODE XREF: full_read+42↓j
.text:000000000000B8D0                 test    rax, rax
.text:000000000000B8D3                 jz      short loc_B908
.text:000000000000B8D5                 add     r12, rax
.text:000000000000B8D8                 add     rbp, rax
.text:000000000000B8DB                 sub     rbx, rax
.text:000000000000B8DE                 jz      short loc_B8F4
.text:000000000000B8E0
.text:000000000000B8E0 loc_B8E0:                               ; CODE XREF: full_read+1B↑j
.text:000000000000B8E0                 mov     rdx, rbx        ; nbytes
.text:000000000000B8E3                 mov     rsi, rbp        ; buf
.text:000000000000B8E6                 mov     edi, r13d       ; fd
.text:000000000000B8E9                 call    safe_read
.text:000000000000B8EE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B8F2                 jnz     short loc_B8D0
.text:000000000000B8F4
.text:000000000000B8F4 loc_B8F4:                               ; CODE XREF: full_read+2E↑j
.text:000000000000B8F4                                         ; full_read+74↓j
.text:000000000000B8F4                 add     rsp, 8
.text:000000000000B8F8                 mov     rax, r12
.text:000000000000B8FB                 pop     rbx
.text:000000000000B8FC                 pop     rbp
.text:000000000000B8FD                 pop     r12
.text:000000000000B8FF                 pop     r13
.text:000000000000B901                 retn
.text:000000000000B901 ; ---------------------------------------------------------------------------
.text:000000000000B902                 align 8
.text:000000000000B908
.text:000000000000B908 loc_B908:                               ; CODE XREF: full_read+23↑j
.text:000000000000B908                 call    ___errno_location
.text:000000000000B90D                 mov     dword ptr [rax], 0
.text:000000000000B913                 add     rsp, 8
.text:000000000000B917                 mov     rax, r12
.text:000000000000B91A                 pop     rbx
.text:000000000000B91B                 pop     rbp
.text:000000000000B91C                 pop     r12
.text:000000000000B91E                 pop     r13
.text:000000000000B920                 retn
.text:000000000000B921 ; ---------------------------------------------------------------------------
.text:000000000000B921
.text:000000000000B921 loc_B921:                               ; CODE XREF: full_read+D↑j
.text:000000000000B921                 xor     r12d, r12d
.text:000000000000B924                 jmp     short loc_B8F4
.text:000000000000B924 ; } // starts at B8B0
.text:000000000000B924 full_read       endp
.text:000000000000B924
.text:000000000000B924 ; ---------------------------------------------------------------------------
.text:000000000000B926                 align 10h
.text:000000000000B930
.text:000000000000B930 ; =============== S U B R O U T I N E =======================================
.text:000000000000B930
.text:000000000000B930
.text:000000000000B930 ; __int64 __fastcall full_write(int fd, void *buf, size_t n)
.text:000000000000B930                 public full_write
.text:000000000000B930 full_write      proc near               ; CODE XREF: write_zeros+44↑p
.text:000000000000B930                                         ; sparse_copy+206↑p
.text:000000000000B930 ; __unwind {
.text:000000000000B930                 push    r13
.text:000000000000B932                 push    r12
.text:000000000000B934                 push    rbp
.text:000000000000B935                 push    rbx
.text:000000000000B936                 sub     rsp, 8
.text:000000000000B93A                 test    rdx, rdx
.text:000000000000B93D                 jz      short loc_B9A1
.text:000000000000B93F                 mov     r13d, edi
.text:000000000000B942                 mov     rbp, rsi
.text:000000000000B945                 mov     rbx, rdx
.text:000000000000B948                 xor     r12d, r12d
.text:000000000000B94B                 jmp     short loc_B960
.text:000000000000B94B ; ---------------------------------------------------------------------------
.text:000000000000B94D                 align 10h
.text:000000000000B950
.text:000000000000B950 loc_B950:                               ; CODE XREF: full_write+42↓j
.text:000000000000B950                 test    rax, rax
.text:000000000000B953                 jz      short loc_B988
.text:000000000000B955                 add     r12, rax
.text:000000000000B958                 add     rbp, rax
.text:000000000000B95B                 sub     rbx, rax
.text:000000000000B95E                 jz      short loc_B974
.text:000000000000B960
.text:000000000000B960 loc_B960:                               ; CODE XREF: full_write+1B↑j
.text:000000000000B960                 mov     rdx, rbx        ; n
.text:000000000000B963                 mov     rsi, rbp        ; buf
.text:000000000000B966                 mov     edi, r13d       ; fd
.text:000000000000B969                 call    safe_write
.text:000000000000B96E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B972                 jnz     short loc_B950
.text:000000000000B974
.text:000000000000B974 loc_B974:                               ; CODE XREF: full_write+2E↑j
.text:000000000000B974                                         ; full_write+74↓j
.text:000000000000B974                 add     rsp, 8
.text:000000000000B978                 mov     rax, r12
.text:000000000000B97B                 pop     rbx
.text:000000000000B97C                 pop     rbp
.text:000000000000B97D                 pop     r12
.text:000000000000B97F                 pop     r13
.text:000000000000B981                 retn
.text:000000000000B981 ; ---------------------------------------------------------------------------
.text:000000000000B982                 align 8
.text:000000000000B988
.text:000000000000B988 loc_B988:                               ; CODE XREF: full_write+23↑j
.text:000000000000B988                 call    ___errno_location
.text:000000000000B98D                 mov     dword ptr [rax], 1Ch
.text:000000000000B993                 add     rsp, 8
.text:000000000000B997                 mov     rax, r12
.text:000000000000B99A                 pop     rbx
.text:000000000000B99B                 pop     rbp
.text:000000000000B99C                 pop     r12
.text:000000000000B99E                 pop     r13
.text:000000000000B9A0                 retn
.text:000000000000B9A1 ; ---------------------------------------------------------------------------
.text:000000000000B9A1
.text:000000000000B9A1 loc_B9A1:                               ; CODE XREF: full_write+D↑j
.text:000000000000B9A1                 xor     r12d, r12d
.text:000000000000B9A4                 jmp     short loc_B974
.text:000000000000B9A4 ; } // starts at B930
.text:000000000000B9A4 full_write      endp
.text:000000000000B9A4
.text:000000000000B9A4 ; ---------------------------------------------------------------------------
.text:000000000000B9A6                 align 10h
.text:000000000000B9B0
.text:000000000000B9B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B9B0
.text:000000000000B9B0 ; Attributes: info_from_lumina
.text:000000000000B9B0
.text:000000000000B9B0 ; size_t __fastcall next_prime(size_t candidate)
.text:000000000000B9B0 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:000000000000B9B0                                         ; hash_rehash+7B↓p
.text:000000000000B9B0 ; __unwind {
.text:000000000000B9B0                 cmp     rdi, 0Ah
.text:000000000000B9B4                 mov     eax, 0Ah
.text:000000000000B9B9                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:000000000000B9C3                 cmovb   rdi, rax
.text:000000000000B9C7                 or      rdi, 1
.text:000000000000B9CB                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000B9CF                 jz      short loc_BA3F
.text:000000000000B9D1                 nop     dword ptr [rax+00000000h]
.text:000000000000B9D8
.text:000000000000B9D8 loc_B9D8:                               ; CODE XREF: next_prime+8D↓j
.text:000000000000B9D8                 mov     rax, rdi
.text:000000000000B9DB                 mov     rcx, rdi
.text:000000000000B9DE                 mul     r9
.text:000000000000B9E1                 mov     rax, rdx
.text:000000000000B9E4                 shr     rax, 1
.text:000000000000B9E7                 lea     rax, [rax+rax*2]
.text:000000000000B9EB                 sub     rcx, rax
.text:000000000000B9EE                 cmp     rdi, 9
.text:000000000000B9F2                 mov     rax, rcx
.text:000000000000B9F5                 jbe     short loc_BA30
.text:000000000000B9F7                 test    rcx, rcx
.text:000000000000B9FA                 jz      short loc_BA35
.text:000000000000B9FC                 mov     r8d, 10h
.text:000000000000BA02                 mov     esi, 9
.text:000000000000BA07                 mov     ecx, 3
.text:000000000000BA0C                 jmp     short loc_BA19
.text:000000000000BA0C ; ---------------------------------------------------------------------------
.text:000000000000BA0E                 align 10h
.text:000000000000BA10
.text:000000000000BA10 loc_BA10:                               ; CODE XREF: next_prime+7E↓j
.text:000000000000BA10                 add     r8, 8
.text:000000000000BA14                 test    rdx, rdx
.text:000000000000BA17                 jz      short loc_BA35
.text:000000000000BA19
.text:000000000000BA19 loc_BA19:                               ; CODE XREF: next_prime+5C↑j
.text:000000000000BA19                 add     rcx, 2
.text:000000000000BA1D                 xor     edx, edx
.text:000000000000BA1F                 mov     rax, rdi
.text:000000000000BA22                 div     rcx
.text:000000000000BA25                 add     rsi, r8
.text:000000000000BA28                 cmp     rsi, rdi
.text:000000000000BA2B                 mov     rax, rdx
.text:000000000000BA2E                 jb      short loc_BA10
.text:000000000000BA30
.text:000000000000BA30 loc_BA30:                               ; CODE XREF: next_prime+45↑j
.text:000000000000BA30                 test    rax, rax
.text:000000000000BA33                 jnz     short loc_BA3F
.text:000000000000BA35
.text:000000000000BA35 loc_BA35:                               ; CODE XREF: next_prime+4A↑j
.text:000000000000BA35                                         ; next_prime+67↑j
.text:000000000000BA35                 add     rdi, 2
.text:000000000000BA39                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000BA3D                 jnz     short loc_B9D8
.text:000000000000BA3F
.text:000000000000BA3F loc_BA3F:                               ; CODE XREF: next_prime+1F↑j
.text:000000000000BA3F                                         ; next_prime+83↑j
.text:000000000000BA3F                 mov     rax, rdi
.text:000000000000BA42                 retn
.text:000000000000BA42 ; } // starts at B9B0
.text:000000000000BA42 next_prime      endp
.text:000000000000BA42
.text:000000000000BA42 ; ---------------------------------------------------------------------------
.text:000000000000BA43                 align 10h
.text:000000000000BA50
.text:000000000000BA50 ; =============== S U B R O U T I N E =======================================
.text:000000000000BA50
.text:000000000000BA50
.text:000000000000BA50 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:000000000000BA50 ; __unwind {
.text:000000000000BA50                 mov     rax, rdi
.text:000000000000BA53                 xor     edx, edx
.text:000000000000BA55                 ror     rax, 3
.text:000000000000BA59                 div     rsi
.text:000000000000BA5C                 mov     rax, rdx
.text:000000000000BA5F                 retn
.text:000000000000BA5F ; } // starts at BA50
.text:000000000000BA5F raw_hasher      endp
.text:000000000000BA5F
.text:000000000000BA60
.text:000000000000BA60 ; =============== S U B R O U T I N E =======================================
.text:000000000000BA60
.text:000000000000BA60
.text:000000000000BA60 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:000000000000BA60 ; __unwind {
.text:000000000000BA60                 cmp     rdi, rsi
.text:000000000000BA63                 setz    al
.text:000000000000BA66                 retn
.text:000000000000BA66 ; } // starts at BA60
.text:000000000000BA66 raw_comparator  endp
.text:000000000000BA66
.text:000000000000BA66 ; ---------------------------------------------------------------------------
.text:000000000000BA67                 align 10h
.text:000000000000BA70
.text:000000000000BA70 ; =============== S U B R O U T I N E =======================================
.text:000000000000BA70
.text:000000000000BA70 ; Attributes: info_from_lumina
.text:000000000000BA70
.text:000000000000BA70 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:000000000000BA70 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:000000000000BA70                                         ; transfer_entries+65↓p ...
.text:000000000000BA70 ; __unwind {
.text:000000000000BA70                 push    rbx
.text:000000000000BA71                 mov     rbx, rdi
.text:000000000000BA74                 mov     rdi, rsi
.text:000000000000BA77                 mov     rsi, [rbx+10h]
.text:000000000000BA7B                 call    qword ptr [rbx+30h]
.text:000000000000BA7E                 cmp     [rbx+10h], rax
.text:000000000000BA82                 jbe     short loc_BA8D
.text:000000000000BA84                 shl     rax, 4
.text:000000000000BA88                 add     rax, [rbx]
.text:000000000000BA8B                 pop     rbx
.text:000000000000BA8C                 retn
.text:000000000000BA8D ; ---------------------------------------------------------------------------
.text:000000000000BA8D
.text:000000000000BA8D loc_BA8D:                               ; CODE XREF: safe_hasher+12↑j
.text:000000000000BA8D                 call    _abort
.text:000000000000BA8D ; } // starts at BA70
.text:000000000000BA8D safe_hasher     endp
.text:000000000000BA8D
.text:000000000000BA8D ; ---------------------------------------------------------------------------
.text:000000000000BA92                 align 20h
.text:000000000000BAA0
.text:000000000000BAA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BAA0
.text:000000000000BAA0 ; Attributes: info_from_lumina
.text:000000000000BAA0
.text:000000000000BAA0 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:000000000000BAA0 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:000000000000BAA0                                         ; hash_insert_if_absent+1CF↓p ...
.text:000000000000BAA0 ; __unwind {
.text:000000000000BAA0                 push    r14
.text:000000000000BAA2                 push    r13
.text:000000000000BAA4                 mov     r14, rdx
.text:000000000000BAA7                 push    r12
.text:000000000000BAA9                 push    rbp
.text:000000000000BAAA                 mov     r12, rdi
.text:000000000000BAAD                 push    rbx
.text:000000000000BAAE                 mov     rbp, rsi
.text:000000000000BAB1                 mov     r13d, ecx
.text:000000000000BAB4                 call    safe_hasher
.text:000000000000BAB9                 mov     [r14], rax
.text:000000000000BABC                 mov     rsi, [rax]
.text:000000000000BABF                 test    rsi, rsi
.text:000000000000BAC2                 jz      loc_BBB0
.text:000000000000BAC8                 cmp     rsi, rbp
.text:000000000000BACB                 mov     rbx, rax
.text:000000000000BACE                 jz      loc_BB63
.text:000000000000BAD4                 mov     rdi, rbp
.text:000000000000BAD7                 call    qword ptr [r12+38h]
.text:000000000000BADC                 test    al, al
.text:000000000000BADE                 jnz     loc_BB60
.text:000000000000BAE4                 mov     rax, [rbx+8]
.text:000000000000BAE8                 test    rax, rax
.text:000000000000BAEB                 jz      loc_BBB0
.text:000000000000BAF1                 mov     rsi, [rax]
.text:000000000000BAF4                 cmp     rbp, rsi
.text:000000000000BAF7                 jnz     short loc_BB19
.text:000000000000BAF9                 jmp     short loc_BB2C
.text:000000000000BAF9 ; ---------------------------------------------------------------------------
.text:000000000000BAFB                 align 20h
.text:000000000000BB00
.text:000000000000BB00 loc_BB00:                               ; CODE XREF: hash_find_entry+83↓j
.text:000000000000BB00                 mov     rbx, [rbx+8]
.text:000000000000BB04                 mov     rax, [rbx+8]
.text:000000000000BB08                 test    rax, rax
.text:000000000000BB0B                 jz      loc_BBB0
.text:000000000000BB11                 mov     rsi, [rax]
.text:000000000000BB14                 cmp     rsi, rbp
.text:000000000000BB17                 jz      short loc_BB2C
.text:000000000000BB19
.text:000000000000BB19 loc_BB19:                               ; CODE XREF: hash_find_entry+57↑j
.text:000000000000BB19                 mov     rdi, rbp
.text:000000000000BB1C                 call    qword ptr [r12+38h]
.text:000000000000BB21                 test    al, al
.text:000000000000BB23                 jz      short loc_BB00
.text:000000000000BB25                 mov     rax, [rbx+8]
.text:000000000000BB29                 mov     rsi, [rax]
.text:000000000000BB2C
.text:000000000000BB2C loc_BB2C:                               ; CODE XREF: hash_find_entry+59↑j
.text:000000000000BB2C                                         ; hash_find_entry+77↑j
.text:000000000000BB2C                 test    r13b, r13b
.text:000000000000BB2F                 jz      short loc_BB4E
.text:000000000000BB31                 mov     rdx, [rax+8]
.text:000000000000BB35                 mov     [rbx+8], rdx
.text:000000000000BB39                 mov     qword ptr [rax], 0
.text:000000000000BB40                 mov     rdx, [r12+48h]
.text:000000000000BB45                 mov     [rax+8], rdx
.text:000000000000BB49                 mov     [r12+48h], rax
.text:000000000000BB4E
.text:000000000000BB4E loc_BB4E:                               ; CODE XREF: hash_find_entry+8F↑j
.text:000000000000BB4E                                         ; hash_find_entry+C6↓j ...
.text:000000000000BB4E                 pop     rbx
.text:000000000000BB4F                 mov     rax, rsi
.text:000000000000BB52                 pop     rbp
.text:000000000000BB53                 pop     r12
.text:000000000000BB55                 pop     r13
.text:000000000000BB57                 pop     r14
.text:000000000000BB59                 retn
.text:000000000000BB59 ; ---------------------------------------------------------------------------
.text:000000000000BB5A                 align 20h
.text:000000000000BB60
.text:000000000000BB60 loc_BB60:                               ; CODE XREF: hash_find_entry+3E↑j
.text:000000000000BB60                 mov     rsi, [rbx]
.text:000000000000BB63
.text:000000000000BB63 loc_BB63:                               ; CODE XREF: hash_find_entry+2E↑j
.text:000000000000BB63                 test    r13b, r13b
.text:000000000000BB66                 jz      short loc_BB4E
.text:000000000000BB68                 mov     rax, [rbx+8]
.text:000000000000BB6C                 test    rax, rax
.text:000000000000BB6F                 jz      short loc_BBA0
.text:000000000000BB71                 movdqu  xmm0, xmmword ptr [rax]
.text:000000000000BB75                 movups  xmmword ptr [rbx], xmm0
.text:000000000000BB78                 mov     qword ptr [rax], 0
.text:000000000000BB7F                 mov     rdx, [r12+48h]
.text:000000000000BB84                 mov     [rax+8], rdx
.text:000000000000BB88                 mov     [r12+48h], rax
.text:000000000000BB8D                 mov     rax, rsi
.text:000000000000BB90                 pop     rbx
.text:000000000000BB91                 pop     rbp
.text:000000000000BB92                 pop     r12
.text:000000000000BB94                 pop     r13
.text:000000000000BB96                 pop     r14
.text:000000000000BB98                 retn
.text:000000000000BB98 ; ---------------------------------------------------------------------------
.text:000000000000BB99                 align 20h
.text:000000000000BBA0
.text:000000000000BBA0 loc_BBA0:                               ; CODE XREF: hash_find_entry+CF↑j
.text:000000000000BBA0                 mov     qword ptr [rbx], 0
.text:000000000000BBA7                 jmp     short loc_BB4E
.text:000000000000BBA7 ; ---------------------------------------------------------------------------
.text:000000000000BBA9                 align 10h
.text:000000000000BBB0
.text:000000000000BBB0 loc_BBB0:                               ; CODE XREF: hash_find_entry+22↑j
.text:000000000000BBB0                                         ; hash_find_entry+4B↑j ...
.text:000000000000BBB0                 xor     esi, esi
.text:000000000000BBB2                 pop     rbx
.text:000000000000BBB3                 mov     rax, rsi
.text:000000000000BBB6                 pop     rbp
.text:000000000000BBB7                 pop     r12
.text:000000000000BBB9                 pop     r13
.text:000000000000BBBB                 pop     r14
.text:000000000000BBBD                 retn
.text:000000000000BBBD ; } // starts at BAA0
.text:000000000000BBBD hash_find_entry endp
.text:000000000000BBBD
.text:000000000000BBBD ; ---------------------------------------------------------------------------
.text:000000000000BBBE                 align 20h
.text:000000000000BBC0
.text:000000000000BBC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BBC0
.text:000000000000BBC0 ; Attributes: info_from_lumina
.text:000000000000BBC0
.text:000000000000BBC0 ; _Bool check_tuning(Hash_table *table)
.text:000000000000BBC0 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:000000000000BBC0                                         ; hash_initialize+11B↓p ...
.text:000000000000BBC0 ; __unwind {
.text:000000000000BBC0                 mov     rdx, [rdi]
.text:000000000000BBC3                 lea     rcx, default_tuning
.text:000000000000BBCA                 mov     eax, 1
.text:000000000000BBCF                 cmp     rdx, rcx
.text:000000000000BBD2                 jz      short locret_BC35
.text:000000000000BBD4                 movss   xmm0, dword ptr [rdx+8]
.text:000000000000BBD9                 ucomiss xmm0, cs:dword_181F4
.text:000000000000BBE0                 jbe     short loc_BC30
.text:000000000000BBE2                 movss   xmm1, cs:dword_181F8
.text:000000000000BBEA                 ucomiss xmm1, xmm0
.text:000000000000BBED                 jbe     short loc_BC30
.text:000000000000BBEF                 movss   xmm1, dword ptr [rdx+0Ch]
.text:000000000000BBF4                 ucomiss xmm1, cs:dword_181FC
.text:000000000000BBFB                 jbe     short loc_BC30
.text:000000000000BBFD                 movss   xmm1, dword ptr [rdx]
.text:000000000000BC01                 ucomiss xmm1, cs:dword_18200
.text:000000000000BC08                 jb      short loc_BC30
.text:000000000000BC0A                 addss   xmm1, cs:dword_181F4
.text:000000000000BC12                 movss   xmm2, dword ptr [rdx+4]
.text:000000000000BC17                 ucomiss xmm2, xmm1
.text:000000000000BC1A                 jbe     short loc_BC30
.text:000000000000BC1C                 movss   xmm3, cs:dword_18204
.text:000000000000BC24                 ucomiss xmm3, xmm2
.text:000000000000BC27                 jb      short loc_BC30
.text:000000000000BC29                 ucomiss xmm0, xmm1
.text:000000000000BC2C                 ja      short locret_BC35
.text:000000000000BC2E                 xchg    ax, ax
.text:000000000000BC30
.text:000000000000BC30 loc_BC30:                               ; CODE XREF: check_tuning+20↑j
.text:000000000000BC30                                         ; check_tuning+2D↑j ...
.text:000000000000BC30                 mov     [rdi], rcx
.text:000000000000BC33                 xor     eax, eax
.text:000000000000BC35
.text:000000000000BC35 locret_BC35:                            ; CODE XREF: check_tuning+12↑j
.text:000000000000BC35                                         ; check_tuning+6C↑j
.text:000000000000BC35                 rep retn
.text:000000000000BC35 ; } // starts at BBC0
.text:000000000000BC35 check_tuning    endp
.text:000000000000BC35
.text:000000000000BC35 ; ---------------------------------------------------------------------------
.text:000000000000BC37                 align 20h
.text:000000000000BC40
.text:000000000000BC40 ; =============== S U B R O U T I N E =======================================
.text:000000000000BC40
.text:000000000000BC40 ; Attributes: info_from_lumina
.text:000000000000BC40
.text:000000000000BC40 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:000000000000BC40 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:000000000000BC40                                         ; hash_rehash+152↓p ...
.text:000000000000BC40 ; __unwind {
.text:000000000000BC40                 push    r15
.text:000000000000BC42                 push    r14
.text:000000000000BC44                 push    r13
.text:000000000000BC46                 push    r12
.text:000000000000BC48                 push    rbp
.text:000000000000BC49                 push    rbx
.text:000000000000BC4A                 sub     rsp, 8
.text:000000000000BC4E                 mov     r12, [rsi]
.text:000000000000BC51                 cmp     r12, [rsi+8]
.text:000000000000BC55                 jnb     loc_BD38
.text:000000000000BC5B                 mov     rbp, rdi
.text:000000000000BC5E                 mov     r13, rsi
.text:000000000000BC61                 mov     r14d, edx
.text:000000000000BC64                 nop     dword ptr [rax+00h]
.text:000000000000BC68
.text:000000000000BC68 loc_BC68:                               ; CODE XREF: transfer_entries+F2↓j
.text:000000000000BC68                 mov     r15, [r12]
.text:000000000000BC6C                 test    r15, r15
.text:000000000000BC6F                 jz      loc_BD2A
.text:000000000000BC75                 mov     rbx, [r12+8]
.text:000000000000BC7A                 test    rbx, rbx
.text:000000000000BC7D                 jnz     short loc_BC9C
.text:000000000000BC7F                 jmp     short loc_BCDB
.text:000000000000BC7F ; ---------------------------------------------------------------------------
.text:000000000000BC81                 align 8
.text:000000000000BC88
.text:000000000000BC88 loc_BC88:                               ; CODE XREF: transfer_entries+72↓j
.text:000000000000BC88                 mov     rcx, [rax+8]
.text:000000000000BC8C                 test    rdx, rdx
.text:000000000000BC8F                 mov     [rbx+8], rcx
.text:000000000000BC93                 mov     [rax+8], rbx
.text:000000000000BC97                 mov     rbx, rdx
.text:000000000000BC9A                 jz      short loc_BCD7
.text:000000000000BC9C
.text:000000000000BC9C loc_BC9C:                               ; CODE XREF: transfer_entries+3D↑j
.text:000000000000BC9C                                         ; transfer_entries+95↓j
.text:000000000000BC9C                 mov     r15, [rbx]
.text:000000000000BC9F                 mov     rdi, rbp
.text:000000000000BCA2                 mov     rsi, r15
.text:000000000000BCA5                 call    safe_hasher
.text:000000000000BCAA                 cmp     qword ptr [rax], 0
.text:000000000000BCAE                 mov     rdx, [rbx+8]
.text:000000000000BCB2                 jnz     short loc_BC88
.text:000000000000BCB4                 mov     [rax], r15
.text:000000000000BCB7                 add     qword ptr [rbp+18h], 1
.text:000000000000BCBC                 test    rdx, rdx
.text:000000000000BCBF                 mov     qword ptr [rbx], 0
.text:000000000000BCC6                 mov     rax, [rbp+48h]
.text:000000000000BCCA                 mov     [rbx+8], rax
.text:000000000000BCCE                 mov     [rbp+48h], rbx
.text:000000000000BCD2                 mov     rbx, rdx
.text:000000000000BCD5                 jnz     short loc_BC9C
.text:000000000000BCD7
.text:000000000000BCD7 loc_BCD7:                               ; CODE XREF: transfer_entries+5A↑j
.text:000000000000BCD7                 mov     r15, [r12]
.text:000000000000BCDB
.text:000000000000BCDB loc_BCDB:                               ; CODE XREF: transfer_entries+3F↑j
.text:000000000000BCDB                 test    r14b, r14b
.text:000000000000BCDE                 mov     qword ptr [r12+8], 0
.text:000000000000BCE7                 jnz     short loc_BD2A
.text:000000000000BCE9                 mov     rsi, r15
.text:000000000000BCEC                 mov     rdi, rbp
.text:000000000000BCEF                 call    safe_hasher
.text:000000000000BCF4                 cmp     qword ptr [rax], 0
.text:000000000000BCF8                 mov     rbx, rax
.text:000000000000BCFB                 jz      short loc_BD50
.text:000000000000BCFD                 mov     rax, [rbp+48h]
.text:000000000000BD01                 test    rax, rax
.text:000000000000BD04                 jz      short loc_BD60
.text:000000000000BD06                 mov     rdx, [rax+8]
.text:000000000000BD0A                 mov     [rbp+48h], rdx
.text:000000000000BD0E
.text:000000000000BD0E loc_BD0E:                               ; CODE XREF: transfer_entries+12D↓j
.text:000000000000BD0E                 mov     rdx, [rbx+8]
.text:000000000000BD12                 mov     [rax], r15
.text:000000000000BD15                 mov     [rax+8], rdx
.text:000000000000BD19                 mov     [rbx+8], rax
.text:000000000000BD1D
.text:000000000000BD1D loc_BD1D:                               ; CODE XREF: transfer_entries+118↓j
.text:000000000000BD1D                 mov     qword ptr [r12], 0
.text:000000000000BD25                 sub     qword ptr [r13+18h], 1
.text:000000000000BD2A
.text:000000000000BD2A loc_BD2A:                               ; CODE XREF: transfer_entries+2F↑j
.text:000000000000BD2A                                         ; transfer_entries+A7↑j
.text:000000000000BD2A                 add     r12, 10h
.text:000000000000BD2E                 cmp     [r13+8], r12
.text:000000000000BD32                 ja      loc_BC68
.text:000000000000BD38
.text:000000000000BD38 loc_BD38:                               ; CODE XREF: transfer_entries+15↑j
.text:000000000000BD38                 add     rsp, 8
.text:000000000000BD3C                 mov     eax, 1
.text:000000000000BD41                 pop     rbx
.text:000000000000BD42                 pop     rbp
.text:000000000000BD43                 pop     r12
.text:000000000000BD45                 pop     r13
.text:000000000000BD47                 pop     r14
.text:000000000000BD49                 pop     r15
.text:000000000000BD4B                 retn
.text:000000000000BD4B ; ---------------------------------------------------------------------------
.text:000000000000BD4C                 align 10h
.text:000000000000BD50
.text:000000000000BD50 loc_BD50:                               ; CODE XREF: transfer_entries+BB↑j
.text:000000000000BD50                 mov     [rax], r15
.text:000000000000BD53                 add     qword ptr [rbp+18h], 1
.text:000000000000BD58                 jmp     short loc_BD1D
.text:000000000000BD58 ; ---------------------------------------------------------------------------
.text:000000000000BD5A                 align 20h
.text:000000000000BD60
.text:000000000000BD60 loc_BD60:                               ; CODE XREF: transfer_entries+C4↑j
.text:000000000000BD60                 mov     edi, 10h        ; size
.text:000000000000BD65                 call    _malloc
.text:000000000000BD6A                 test    rax, rax
.text:000000000000BD6D                 jnz     short loc_BD0E
.text:000000000000BD6F                 add     rsp, 8
.text:000000000000BD73                 xor     eax, eax
.text:000000000000BD75                 pop     rbx
.text:000000000000BD76                 pop     rbp
.text:000000000000BD77                 pop     r12
.text:000000000000BD79                 pop     r13
.text:000000000000BD7B                 pop     r14
.text:000000000000BD7D                 pop     r15
.text:000000000000BD7F                 retn
.text:000000000000BD7F ; } // starts at BC40
.text:000000000000BD7F transfer_entries endp
.text:000000000000BD7F
.text:000000000000BD80
.text:000000000000BD80 ; =============== S U B R O U T I N E =======================================
.text:000000000000BD80
.text:000000000000BD80
.text:000000000000BD80                 public hash_get_n_buckets
.text:000000000000BD80 hash_get_n_buckets proc near
.text:000000000000BD80 ; __unwind {
.text:000000000000BD80                 mov     rax, [rdi+10h]
.text:000000000000BD84                 retn
.text:000000000000BD84 ; } // starts at BD80
.text:000000000000BD84 hash_get_n_buckets endp
.text:000000000000BD84
.text:000000000000BD84 ; ---------------------------------------------------------------------------
.text:000000000000BD85                 align 10h
.text:000000000000BD90
.text:000000000000BD90 ; =============== S U B R O U T I N E =======================================
.text:000000000000BD90
.text:000000000000BD90
.text:000000000000BD90                 public hash_get_n_buckets_used
.text:000000000000BD90 hash_get_n_buckets_used proc near
.text:000000000000BD90 ; __unwind {
.text:000000000000BD90                 mov     rax, [rdi+18h]
.text:000000000000BD94                 retn
.text:000000000000BD94 ; } // starts at BD90
.text:000000000000BD94 hash_get_n_buckets_used endp
.text:000000000000BD94
.text:000000000000BD94 ; ---------------------------------------------------------------------------
.text:000000000000BD95                 align 20h
.text:000000000000BDA0
.text:000000000000BDA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BDA0
.text:000000000000BDA0
.text:000000000000BDA0                 public hash_get_n_entries
.text:000000000000BDA0 hash_get_n_entries proc near
.text:000000000000BDA0 ; __unwind {
.text:000000000000BDA0                 mov     rax, [rdi+20h]
.text:000000000000BDA4                 retn
.text:000000000000BDA4 ; } // starts at BDA0
.text:000000000000BDA4 hash_get_n_entries endp
.text:000000000000BDA4
.text:000000000000BDA4 ; ---------------------------------------------------------------------------
.text:000000000000BDA5                 align 10h
.text:000000000000BDB0
.text:000000000000BDB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BDB0
.text:000000000000BDB0 ; Attributes: info_from_lumina
.text:000000000000BDB0
.text:000000000000BDB0 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:000000000000BDB0                 public hash_get_max_bucket_length
.text:000000000000BDB0 hash_get_max_bucket_length proc near
.text:000000000000BDB0 ; __unwind {
.text:000000000000BDB0                 mov     rsi, [rdi]
.text:000000000000BDB3                 mov     rdi, [rdi+8]
.text:000000000000BDB7                 xor     eax, eax
.text:000000000000BDB9                 cmp     rsi, rdi
.text:000000000000BDBC                 jnb     short locret_BDF7
.text:000000000000BDBE                 xchg    ax, ax
.text:000000000000BDC0
.text:000000000000BDC0 loc_BDC0:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:000000000000BDC0                 cmp     qword ptr [rsi], 0
.text:000000000000BDC4                 jz      short loc_BDEC
.text:000000000000BDC6                 mov     rdx, [rsi+8]
.text:000000000000BDCA                 mov     ecx, 1
.text:000000000000BDCF                 test    rdx, rdx
.text:000000000000BDD2                 jz      short loc_BDE5
.text:000000000000BDD4                 nop     dword ptr [rax+00h]
.text:000000000000BDD8
.text:000000000000BDD8 loc_BDD8:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:000000000000BDD8                 mov     rdx, [rdx+8]
.text:000000000000BDDC                 add     rcx, 1
.text:000000000000BDE0                 test    rdx, rdx
.text:000000000000BDE3                 jnz     short loc_BDD8
.text:000000000000BDE5
.text:000000000000BDE5 loc_BDE5:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:000000000000BDE5                 cmp     rax, rcx
.text:000000000000BDE8                 cmovb   rax, rcx
.text:000000000000BDEC
.text:000000000000BDEC loc_BDEC:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:000000000000BDEC                 add     rsi, 10h
.text:000000000000BDF0                 cmp     rsi, rdi
.text:000000000000BDF3                 jb      short loc_BDC0
.text:000000000000BDF5                 rep retn
.text:000000000000BDF7 ; ---------------------------------------------------------------------------
.text:000000000000BDF7
.text:000000000000BDF7 locret_BDF7:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:000000000000BDF7                 rep retn
.text:000000000000BDF7 ; } // starts at BDB0
.text:000000000000BDF7 hash_get_max_bucket_length endp
.text:000000000000BDF7
.text:000000000000BDF7 ; ---------------------------------------------------------------------------
.text:000000000000BDF9                 align 20h
.text:000000000000BE00
.text:000000000000BE00 ; =============== S U B R O U T I N E =======================================
.text:000000000000BE00
.text:000000000000BE00 ; Attributes: info_from_lumina
.text:000000000000BE00
.text:000000000000BE00 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:000000000000BE00                 public hash_table_ok
.text:000000000000BE00 hash_table_ok   proc near
.text:000000000000BE00 ; __unwind {
.text:000000000000BE00                 mov     rcx, [rdi]
.text:000000000000BE03                 mov     r8, [rdi+8]
.text:000000000000BE07                 xor     edx, edx
.text:000000000000BE09                 xor     esi, esi
.text:000000000000BE0B                 cmp     rcx, r8
.text:000000000000BE0E                 jnb     short loc_BE46
.text:000000000000BE10
.text:000000000000BE10 loc_BE10:                               ; CODE XREF: hash_table_ok+44↓j
.text:000000000000BE10                 cmp     qword ptr [rcx], 0
.text:000000000000BE14                 jz      short loc_BE3D
.text:000000000000BE16                 mov     rax, [rcx+8]
.text:000000000000BE1A                 add     rsi, 1
.text:000000000000BE1E                 add     rdx, 1
.text:000000000000BE22                 test    rax, rax
.text:000000000000BE25                 jz      short loc_BE3D
.text:000000000000BE27                 nop     word ptr [rax+rax+00000000h]
.text:000000000000BE30
.text:000000000000BE30 loc_BE30:                               ; CODE XREF: hash_table_ok+3B↓j
.text:000000000000BE30                 mov     rax, [rax+8]
.text:000000000000BE34                 add     rdx, 1
.text:000000000000BE38                 test    rax, rax
.text:000000000000BE3B                 jnz     short loc_BE30
.text:000000000000BE3D
.text:000000000000BE3D loc_BE3D:                               ; CODE XREF: hash_table_ok+14↑j
.text:000000000000BE3D                                         ; hash_table_ok+25↑j
.text:000000000000BE3D                 add     rcx, 10h
.text:000000000000BE41                 cmp     rcx, r8
.text:000000000000BE44                 jb      short loc_BE10
.text:000000000000BE46
.text:000000000000BE46 loc_BE46:                               ; CODE XREF: hash_table_ok+E↑j
.text:000000000000BE46                 xor     eax, eax
.text:000000000000BE48                 cmp     [rdi+18h], rsi
.text:000000000000BE4C                 jz      short loc_BE50
.text:000000000000BE4E                 rep retn
.text:000000000000BE50 ; ---------------------------------------------------------------------------
.text:000000000000BE50
.text:000000000000BE50 loc_BE50:                               ; CODE XREF: hash_table_ok+4C↑j
.text:000000000000BE50                 cmp     [rdi+20h], rdx
.text:000000000000BE54                 setz    al
.text:000000000000BE57                 retn
.text:000000000000BE57 ; } // starts at BE00
.text:000000000000BE57 hash_table_ok   endp
.text:000000000000BE57
.text:000000000000BE57 ; ---------------------------------------------------------------------------
.text:000000000000BE58                 align 20h
.text:000000000000BE60
.text:000000000000BE60 ; =============== S U B R O U T I N E =======================================
.text:000000000000BE60
.text:000000000000BE60 ; Attributes: info_from_lumina
.text:000000000000BE60
.text:000000000000BE60 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:000000000000BE60                 public hash_print_statistics
.text:000000000000BE60 hash_print_statistics proc near
.text:000000000000BE60 ; __unwind {
.text:000000000000BE60                 push    r13
.text:000000000000BE62                 push    r12
.text:000000000000BE64                 mov     r12, rsi
.text:000000000000BE67                 push    rbp
.text:000000000000BE68                 push    rbx
.text:000000000000BE69                 xor     ebx, ebx
.text:000000000000BE6B                 sub     rsp, 8
.text:000000000000BE6F                 mov     rsi, [rdi]
.text:000000000000BE72                 mov     rcx, [rdi+20h]
.text:000000000000BE76                 mov     rbp, [rdi+10h]
.text:000000000000BE7A                 mov     r13, [rdi+18h]
.text:000000000000BE7E                 mov     rdi, [rdi+8]
.text:000000000000BE82                 cmp     rsi, rdi
.text:000000000000BE85                 jnb     short loc_BEC5
.text:000000000000BE87                 nop     word ptr [rax+rax+00000000h]
.text:000000000000BE90
.text:000000000000BE90 loc_BE90:                               ; CODE XREF: hash_print_statistics+63↓j
.text:000000000000BE90                 cmp     qword ptr [rsi], 0
.text:000000000000BE94                 jz      short loc_BEBC
.text:000000000000BE96                 mov     rax, [rsi+8]
.text:000000000000BE9A                 mov     edx, 1
.text:000000000000BE9F                 test    rax, rax
.text:000000000000BEA2                 jz      short loc_BEB5
.text:000000000000BEA4                 nop     dword ptr [rax+00h]
.text:000000000000BEA8
.text:000000000000BEA8 loc_BEA8:                               ; CODE XREF: hash_print_statistics+53↓j
.text:000000000000BEA8                 mov     rax, [rax+8]
.text:000000000000BEAC                 add     rdx, 1
.text:000000000000BEB0                 test    rax, rax
.text:000000000000BEB3                 jnz     short loc_BEA8
.text:000000000000BEB5
.text:000000000000BEB5 loc_BEB5:                               ; CODE XREF: hash_print_statistics+42↑j
.text:000000000000BEB5                 cmp     rbx, rdx
.text:000000000000BEB8                 cmovb   rbx, rdx
.text:000000000000BEBC
.text:000000000000BEBC loc_BEBC:                               ; CODE XREF: hash_print_statistics+34↑j
.text:000000000000BEBC                 add     rsi, 10h
.text:000000000000BEC0                 cmp     rsi, rdi
.text:000000000000BEC3                 jb      short loc_BE90
.text:000000000000BEC5
.text:000000000000BEC5 loc_BEC5:                               ; CODE XREF: hash_print_statistics+25↑j
.text:000000000000BEC5                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:000000000000BECC                 mov     esi, 1
.text:000000000000BED1                 mov     rdi, r12
.text:000000000000BED4                 xor     eax, eax
.text:000000000000BED6                 call    ___fprintf_chk
.text:000000000000BEDB                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:000000000000BEE2                 xor     eax, eax
.text:000000000000BEE4                 mov     rcx, rbp
.text:000000000000BEE7                 mov     esi, 1
.text:000000000000BEEC                 mov     rdi, r12
.text:000000000000BEEF                 call    ___fprintf_chk
.text:000000000000BEF4                 test    r13, r13
.text:000000000000BEF7                 js      short loc_BF60
.text:000000000000BEF9                 pxor    xmm0, xmm0
.text:000000000000BEFD                 test    rbp, rbp
.text:000000000000BF00                 cvtsi2sd xmm0, r13
.text:000000000000BF05                 mulsd   xmm0, cs:qword_18218
.text:000000000000BF0D                 js      short loc_BF89
.text:000000000000BF0F
.text:000000000000BF0F loc_BF0F:                               ; CODE XREF: hash_print_statistics+127↓j
.text:000000000000BF0F                 pxor    xmm1, xmm1
.text:000000000000BF13                 cvtsi2sd xmm1, rbp
.text:000000000000BF18
.text:000000000000BF18 loc_BF18:                               ; CODE XREF: hash_print_statistics+142↓j
.text:000000000000BF18                 divsd   xmm0, xmm1
.text:000000000000BF1C                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:000000000000BF23                 mov     rcx, r13
.text:000000000000BF26                 mov     rdi, r12
.text:000000000000BF29                 mov     esi, 1
.text:000000000000BF2E                 mov     eax, 1
.text:000000000000BF33                 call    ___fprintf_chk
.text:000000000000BF38                 add     rsp, 8
.text:000000000000BF3C                 mov     rcx, rbx
.text:000000000000BF3F                 mov     rdi, r12
.text:000000000000BF42                 pop     rbx
.text:000000000000BF43                 pop     rbp
.text:000000000000BF44                 pop     r12
.text:000000000000BF46                 pop     r13
.text:000000000000BF48                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:000000000000BF4F                 mov     esi, 1
.text:000000000000BF54                 xor     eax, eax
.text:000000000000BF56                 jmp     ___fprintf_chk
.text:000000000000BF56 ; ---------------------------------------------------------------------------
.text:000000000000BF5B                 align 20h
.text:000000000000BF60
.text:000000000000BF60 loc_BF60:                               ; CODE XREF: hash_print_statistics+97↑j
.text:000000000000BF60                 mov     rax, r13
.text:000000000000BF63                 mov     rdx, r13
.text:000000000000BF66                 pxor    xmm0, xmm0
.text:000000000000BF6A                 shr     rax, 1
.text:000000000000BF6D                 and     edx, 1
.text:000000000000BF70                 or      rax, rdx
.text:000000000000BF73                 test    rbp, rbp
.text:000000000000BF76                 cvtsi2sd xmm0, rax
.text:000000000000BF7B                 addsd   xmm0, xmm0
.text:000000000000BF7F                 mulsd   xmm0, cs:qword_18218
.text:000000000000BF87                 jns     short loc_BF0F
.text:000000000000BF89
.text:000000000000BF89 loc_BF89:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:000000000000BF89                 mov     rax, rbp
.text:000000000000BF8C                 pxor    xmm1, xmm1
.text:000000000000BF90                 shr     rax, 1
.text:000000000000BF93                 and     ebp, 1
.text:000000000000BF96                 or      rax, rbp
.text:000000000000BF99                 cvtsi2sd xmm1, rax
.text:000000000000BF9E                 addsd   xmm1, xmm1
.text:000000000000BFA2                 jmp     loc_BF18
.text:000000000000BFA2 ; } // starts at BE60
.text:000000000000BFA2 hash_print_statistics endp
.text:000000000000BFA2
.text:000000000000BFA2 ; ---------------------------------------------------------------------------
.text:000000000000BFA7                 align 10h
.text:000000000000BFB0
.text:000000000000BFB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BFB0
.text:000000000000BFB0 ; Attributes: info_from_lumina
.text:000000000000BFB0
.text:000000000000BFB0 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:000000000000BFB0                 public hash_lookup
.text:000000000000BFB0 hash_lookup     proc near               ; CODE XREF: src_to_dest_lookup+27↑p
.text:000000000000BFB0                                         ; seen_file+31↑p ...
.text:000000000000BFB0 ; __unwind {
.text:000000000000BFB0                 push    r12
.text:000000000000BFB2                 push    rbp
.text:000000000000BFB3                 mov     r12, rdi
.text:000000000000BFB6                 push    rbx
.text:000000000000BFB7                 mov     rbp, rsi
.text:000000000000BFBA                 call    safe_hasher
.text:000000000000BFBF                 mov     rsi, [rax]
.text:000000000000BFC2                 test    rsi, rsi
.text:000000000000BFC5                 jz      short loc_BFED
.text:000000000000BFC7                 mov     rbx, rax
.text:000000000000BFCA                 jmp     short loc_BFD3
.text:000000000000BFCA ; ---------------------------------------------------------------------------
.text:000000000000BFCC                 align 10h
.text:000000000000BFD0
.text:000000000000BFD0 loc_BFD0:                               ; CODE XREF: hash_lookup+3B↓j
.text:000000000000BFD0                 mov     rsi, [rbx]
.text:000000000000BFD3
.text:000000000000BFD3 loc_BFD3:                               ; CODE XREF: hash_lookup+1A↑j
.text:000000000000BFD3                 cmp     rsi, rbp
.text:000000000000BFD6                 jz      short loc_BFEF
.text:000000000000BFD8                 mov     rdi, rbp
.text:000000000000BFDB                 call    qword ptr [r12+38h]
.text:000000000000BFE0                 test    al, al
.text:000000000000BFE2                 jnz     short loc_C000
.text:000000000000BFE4                 mov     rbx, [rbx+8]
.text:000000000000BFE8                 test    rbx, rbx
.text:000000000000BFEB                 jnz     short loc_BFD0
.text:000000000000BFED
.text:000000000000BFED loc_BFED:                               ; CODE XREF: hash_lookup+15↑j
.text:000000000000BFED                 xor     esi, esi
.text:000000000000BFEF
.text:000000000000BFEF loc_BFEF:                               ; CODE XREF: hash_lookup+26↑j
.text:000000000000BFEF                 pop     rbx
.text:000000000000BFF0                 mov     rax, rsi
.text:000000000000BFF3                 pop     rbp
.text:000000000000BFF4                 pop     r12
.text:000000000000BFF6                 retn
.text:000000000000BFF6 ; ---------------------------------------------------------------------------
.text:000000000000BFF7                 align 20h
.text:000000000000C000
.text:000000000000C000 loc_C000:                               ; CODE XREF: hash_lookup+32↑j
.text:000000000000C000                 mov     rsi, [rbx]
.text:000000000000C003                 pop     rbx
.text:000000000000C004                 pop     rbp
.text:000000000000C005                 mov     rax, rsi
.text:000000000000C008                 pop     r12
.text:000000000000C00A                 retn
.text:000000000000C00A ; } // starts at BFB0
.text:000000000000C00A hash_lookup     endp
.text:000000000000C00A
.text:000000000000C00A ; ---------------------------------------------------------------------------
.text:000000000000C00B                 align 10h
.text:000000000000C010
.text:000000000000C010 ; =============== S U B R O U T I N E =======================================
.text:000000000000C010
.text:000000000000C010 ; Attributes: info_from_lumina
.text:000000000000C010
.text:000000000000C010 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:000000000000C010                 public hash_get_first
.text:000000000000C010 hash_get_first  proc near
.text:000000000000C010 ; __unwind {
.text:000000000000C010                 cmp     qword ptr [rdi+20h], 0
.text:000000000000C015                 jz      short loc_C043
.text:000000000000C017                 mov     rdx, [rdi]
.text:000000000000C01A                 mov     rcx, [rdi+8]
.text:000000000000C01E                 cmp     rdx, rcx
.text:000000000000C021                 jnb     short loc_C048
.text:000000000000C023                 mov     rax, [rdx]
.text:000000000000C026                 test    rax, rax
.text:000000000000C029                 jnz     short locret_C046
.text:000000000000C02B                 nop     dword ptr [rax+rax+00h]
.text:000000000000C030
.text:000000000000C030 loc_C030:                               ; CODE XREF: hash_get_first+2F↓j
.text:000000000000C030                 add     rdx, 10h
.text:000000000000C034                 cmp     rdx, rcx
.text:000000000000C037                 jnb     short loc_C048
.text:000000000000C039                 mov     rax, [rdx]
.text:000000000000C03C                 test    rax, rax
.text:000000000000C03F                 jz      short loc_C030
.text:000000000000C041                 rep retn
.text:000000000000C043 ; ---------------------------------------------------------------------------
.text:000000000000C043
.text:000000000000C043 loc_C043:                               ; CODE XREF: hash_get_first+5↑j
.text:000000000000C043                 xor     eax, eax
.text:000000000000C045                 retn
.text:000000000000C046 ; ---------------------------------------------------------------------------
.text:000000000000C046
.text:000000000000C046 locret_C046:                            ; CODE XREF: hash_get_first+19↑j
.text:000000000000C046                 rep retn
.text:000000000000C048 ; ---------------------------------------------------------------------------
.text:000000000000C048
.text:000000000000C048 loc_C048:                               ; CODE XREF: hash_get_first+11↑j
.text:000000000000C048                                         ; hash_get_first+27↑j
.text:000000000000C048                 sub     rsp, 8
.text:000000000000C04C                 call    _abort
.text:000000000000C04C ; } // starts at C010
.text:000000000000C04C hash_get_first  endp
.text:000000000000C04C
.text:000000000000C04C ; ---------------------------------------------------------------------------
.text:000000000000C051                 align 20h
.text:000000000000C060
.text:000000000000C060 ; =============== S U B R O U T I N E =======================================
.text:000000000000C060
.text:000000000000C060 ; Attributes: info_from_lumina
.text:000000000000C060
.text:000000000000C060 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:000000000000C060                 public hash_get_next
.text:000000000000C060 hash_get_next   proc near
.text:000000000000C060 ; __unwind {
.text:000000000000C060                 push    rbp
.text:000000000000C061                 push    rbx
.text:000000000000C062                 mov     rbp, rdi
.text:000000000000C065                 mov     rbx, rsi
.text:000000000000C068                 sub     rsp, 8
.text:000000000000C06C                 call    safe_hasher
.text:000000000000C071                 mov     rdx, rax
.text:000000000000C074                 mov     rcx, rax
.text:000000000000C077                 mov     rax, [rdx]
.text:000000000000C07A                 mov     rdx, [rdx+8]
.text:000000000000C07E                 cmp     rax, rbx
.text:000000000000C081                 jz      short loc_C099
.text:000000000000C083                 nop     dword ptr [rax+rax+00h]
.text:000000000000C088
.text:000000000000C088 loc_C088:                               ; CODE XREF: hash_get_next+37↓j
.text:000000000000C088                 test    rdx, rdx
.text:000000000000C08B                 jz      short loc_C09E
.text:000000000000C08D                 mov     rax, [rdx]
.text:000000000000C090                 mov     rdx, [rdx+8]
.text:000000000000C094                 cmp     rax, rbx
.text:000000000000C097                 jnz     short loc_C088
.text:000000000000C099
.text:000000000000C099 loc_C099:                               ; CODE XREF: hash_get_next+21↑j
.text:000000000000C099                 test    rdx, rdx
.text:000000000000C09C                 jnz     short loc_C0C8
.text:000000000000C09E
.text:000000000000C09E loc_C09E:                               ; CODE XREF: hash_get_next+2B↑j
.text:000000000000C09E                 mov     rdx, [rbp+8]
.text:000000000000C0A2                 jmp     short loc_C0B0
.text:000000000000C0A2 ; ---------------------------------------------------------------------------
.text:000000000000C0A4                 align 8
.text:000000000000C0A8
.text:000000000000C0A8 loc_C0A8:                               ; CODE XREF: hash_get_next+57↓j
.text:000000000000C0A8                 mov     rax, [rcx]
.text:000000000000C0AB                 test    rax, rax
.text:000000000000C0AE                 jnz     short loc_C0BB
.text:000000000000C0B0
.text:000000000000C0B0 loc_C0B0:                               ; CODE XREF: hash_get_next+42↑j
.text:000000000000C0B0                 add     rcx, 10h
.text:000000000000C0B4                 cmp     rdx, rcx
.text:000000000000C0B7                 ja      short loc_C0A8
.text:000000000000C0B9                 xor     eax, eax
.text:000000000000C0BB
.text:000000000000C0BB loc_C0BB:                               ; CODE XREF: hash_get_next+4E↑j
.text:000000000000C0BB                 add     rsp, 8
.text:000000000000C0BF                 pop     rbx
.text:000000000000C0C0                 pop     rbp
.text:000000000000C0C1                 retn
.text:000000000000C0C1 ; ---------------------------------------------------------------------------
.text:000000000000C0C2                 align 8
.text:000000000000C0C8
.text:000000000000C0C8 loc_C0C8:                               ; CODE XREF: hash_get_next+3C↑j
.text:000000000000C0C8                 mov     rax, [rdx]
.text:000000000000C0CB                 add     rsp, 8
.text:000000000000C0CF                 pop     rbx
.text:000000000000C0D0                 pop     rbp
.text:000000000000C0D1                 retn
.text:000000000000C0D1 ; } // starts at C060
.text:000000000000C0D1 hash_get_next   endp
.text:000000000000C0D1
.text:000000000000C0D1 ; ---------------------------------------------------------------------------
.text:000000000000C0D2                 align 20h
.text:000000000000C0E0
.text:000000000000C0E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C0E0
.text:000000000000C0E0 ; Attributes: info_from_lumina
.text:000000000000C0E0
.text:000000000000C0E0 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:000000000000C0E0                 public hash_get_entries
.text:000000000000C0E0 hash_get_entries proc near
.text:000000000000C0E0 ; __unwind {
.text:000000000000C0E0                 mov     r9, [rdi]
.text:000000000000C0E3                 cmp     [rdi+8], r9
.text:000000000000C0E7                 jbe     short loc_C142
.text:000000000000C0E9                 xor     r8d, r8d
.text:000000000000C0EC
.text:000000000000C0EC loc_C0EC:                               ; CODE XREF: hash_get_entries+55↓j
.text:000000000000C0EC                 mov     rcx, [r9]
.text:000000000000C0EF                 test    rcx, rcx
.text:000000000000C0F2                 jz      short loc_C12D
.text:000000000000C0F4                 cmp     rdx, r8
.text:000000000000C0F7                 jbe     short loc_C137
.text:000000000000C0F9                 mov     [rsi+r8*8], rcx
.text:000000000000C0FD                 mov     rcx, [r9+8]
.text:000000000000C101                 lea     rax, [r8+1]
.text:000000000000C105                 test    rcx, rcx
.text:000000000000C108                 jz      short loc_C12A
.text:000000000000C10A                 nop     word ptr [rax+rax+00h]
.text:000000000000C110
.text:000000000000C110 loc_C110:                               ; CODE XREF: hash_get_entries+48↓j
.text:000000000000C110                 cmp     rdx, rax
.text:000000000000C113                 jz      short locret_C140
.text:000000000000C115                 mov     r8, [rcx]
.text:000000000000C118                 add     rax, 1
.text:000000000000C11C                 mov     [rsi+rax*8-8], r8
.text:000000000000C121                 mov     rcx, [rcx+8]
.text:000000000000C125                 test    rcx, rcx
.text:000000000000C128                 jnz     short loc_C110
.text:000000000000C12A
.text:000000000000C12A loc_C12A:                               ; CODE XREF: hash_get_entries+28↑j
.text:000000000000C12A                 mov     r8, rax
.text:000000000000C12D
.text:000000000000C12D loc_C12D:                               ; CODE XREF: hash_get_entries+12↑j
.text:000000000000C12D                 add     r9, 10h
.text:000000000000C131                 cmp     [rdi+8], r9
.text:000000000000C135                 ja      short loc_C0EC
.text:000000000000C137
.text:000000000000C137 loc_C137:                               ; CODE XREF: hash_get_entries+17↑j
.text:000000000000C137                 mov     rax, r8
.text:000000000000C13A                 retn
.text:000000000000C13A ; ---------------------------------------------------------------------------
.text:000000000000C13B                 align 20h
.text:000000000000C140
.text:000000000000C140 locret_C140:                            ; CODE XREF: hash_get_entries+33↑j
.text:000000000000C140                 rep retn
.text:000000000000C142 ; ---------------------------------------------------------------------------
.text:000000000000C142
.text:000000000000C142 loc_C142:                               ; CODE XREF: hash_get_entries+7↑j
.text:000000000000C142                 xor     eax, eax
.text:000000000000C144                 retn
.text:000000000000C144 ; } // starts at C0E0
.text:000000000000C144 hash_get_entries endp
.text:000000000000C144
.text:000000000000C144 ; ---------------------------------------------------------------------------
.text:000000000000C145                 align 10h
.text:000000000000C150
.text:000000000000C150 ; =============== S U B R O U T I N E =======================================
.text:000000000000C150
.text:000000000000C150 ; Attributes: info_from_lumina
.text:000000000000C150
.text:000000000000C150 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:000000000000C150                 public hash_do_for_each
.text:000000000000C150 hash_do_for_each proc near
.text:000000000000C150 ; __unwind {
.text:000000000000C150                 push    r15
.text:000000000000C152                 push    r14
.text:000000000000C154                 push    r13
.text:000000000000C156                 push    r12
.text:000000000000C158                 push    rbp
.text:000000000000C159                 push    rbx
.text:000000000000C15A                 sub     rsp, 8
.text:000000000000C15E                 mov     r14, [rdi]
.text:000000000000C161                 cmp     [rdi+8], r14
.text:000000000000C165                 jbe     short loc_C1B6
.text:000000000000C167                 mov     r13, rdx
.text:000000000000C16A                 mov     r12, rsi
.text:000000000000C16D                 mov     r15, rdi
.text:000000000000C170                 xor     ebp, ebp
.text:000000000000C172
.text:000000000000C172 loc_C172:                               ; CODE XREF: hash_do_for_each+52↓j
.text:000000000000C172                 mov     rdi, [r14]
.text:000000000000C175                 test    rdi, rdi
.text:000000000000C178                 jz      short loc_C19A
.text:000000000000C17A                 mov     rbx, r14
.text:000000000000C17D                 jmp     short loc_C183
.text:000000000000C17D ; ---------------------------------------------------------------------------
.text:000000000000C17F                 align 20h
.text:000000000000C180
.text:000000000000C180 loc_C180:                               ; CODE XREF: hash_do_for_each+48↓j
.text:000000000000C180                 mov     rdi, [rbx]
.text:000000000000C183
.text:000000000000C183 loc_C183:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:000000000000C183                 mov     rsi, r13
.text:000000000000C186                 call    r12
.text:000000000000C189                 test    al, al
.text:000000000000C18B                 jz      short loc_C1A4
.text:000000000000C18D                 mov     rbx, [rbx+8]
.text:000000000000C191                 add     rbp, 1
.text:000000000000C195                 test    rbx, rbx
.text:000000000000C198                 jnz     short loc_C180
.text:000000000000C19A
.text:000000000000C19A loc_C19A:                               ; CODE XREF: hash_do_for_each+28↑j
.text:000000000000C19A                 add     r14, 10h
.text:000000000000C19E                 cmp     [r15+8], r14
.text:000000000000C1A2                 ja      short loc_C172
.text:000000000000C1A4
.text:000000000000C1A4 loc_C1A4:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:000000000000C1A4                                         ; hash_do_for_each+68↓j
.text:000000000000C1A4                 add     rsp, 8
.text:000000000000C1A8                 mov     rax, rbp
.text:000000000000C1AB                 pop     rbx
.text:000000000000C1AC                 pop     rbp
.text:000000000000C1AD                 pop     r12
.text:000000000000C1AF                 pop     r13
.text:000000000000C1B1                 pop     r14
.text:000000000000C1B3                 pop     r15
.text:000000000000C1B5                 retn
.text:000000000000C1B6 ; ---------------------------------------------------------------------------
.text:000000000000C1B6
.text:000000000000C1B6 loc_C1B6:                               ; CODE XREF: hash_do_for_each+15↑j
.text:000000000000C1B6                 xor     ebp, ebp
.text:000000000000C1B8                 jmp     short loc_C1A4
.text:000000000000C1B8 ; } // starts at C150
.text:000000000000C1B8 hash_do_for_each endp
.text:000000000000C1B8
.text:000000000000C1B8 ; ---------------------------------------------------------------------------
.text:000000000000C1BA                 align 20h
.text:000000000000C1C0
.text:000000000000C1C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C1C0
.text:000000000000C1C0 ; Attributes: info_from_lumina
.text:000000000000C1C0
.text:000000000000C1C0 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:000000000000C1C0                 public hash_string
.text:000000000000C1C0 hash_string     proc near
.text:000000000000C1C0 ; __unwind {
.text:000000000000C1C0                 movzx   ecx, byte ptr [rdi]
.text:000000000000C1C3                 xor     edx, edx
.text:000000000000C1C5                 test    cl, cl
.text:000000000000C1C7                 jz      short loc_C1ED
.text:000000000000C1C9                 nop     dword ptr [rax+00000000h]
.text:000000000000C1D0
.text:000000000000C1D0 loc_C1D0:                               ; CODE XREF: hash_string+2B↓j
.text:000000000000C1D0                 mov     rax, rdx
.text:000000000000C1D3                 add     rdi, 1
.text:000000000000C1D7                 shl     rax, 5
.text:000000000000C1DB                 sub     rax, rdx
.text:000000000000C1DE                 xor     edx, edx
.text:000000000000C1E0                 add     rax, rcx
.text:000000000000C1E3                 movzx   ecx, byte ptr [rdi]
.text:000000000000C1E6                 div     rsi
.text:000000000000C1E9                 test    cl, cl
.text:000000000000C1EB                 jnz     short loc_C1D0
.text:000000000000C1ED
.text:000000000000C1ED loc_C1ED:                               ; CODE XREF: hash_string+7↑j
.text:000000000000C1ED                 mov     rax, rdx
.text:000000000000C1F0                 retn
.text:000000000000C1F0 ; } // starts at C1C0
.text:000000000000C1F0 hash_string     endp
.text:000000000000C1F0
.text:000000000000C1F0 ; ---------------------------------------------------------------------------
.text:000000000000C1F1                 align 20h
.text:000000000000C200
.text:000000000000C200 ; =============== S U B R O U T I N E =======================================
.text:000000000000C200
.text:000000000000C200 ; Attributes: info_from_lumina
.text:000000000000C200
.text:000000000000C200 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:000000000000C200                 public hash_reset_tuning
.text:000000000000C200 hash_reset_tuning proc near
.text:000000000000C200 ; __unwind {
.text:000000000000C200                 mov     rax, 3F80000000000000h
.text:000000000000C20A                 mov     byte ptr [rdi+10h], 0
.text:000000000000C20E                 mov     [rdi], rax
.text:000000000000C211                 mov     rax, 3FB4FDF43F4CCCCDh
.text:000000000000C21B                 mov     [rdi+8], rax
.text:000000000000C21F                 retn
.text:000000000000C21F ; } // starts at C200
.text:000000000000C21F hash_reset_tuning endp
.text:000000000000C21F
.text:000000000000C220
.text:000000000000C220 ; =============== S U B R O U T I N E =======================================
.text:000000000000C220
.text:000000000000C220 ; Attributes: info_from_lumina
.text:000000000000C220
.text:000000000000C220 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:000000000000C220                 public hash_initialize
.text:000000000000C220 hash_initialize proc near               ; CODE XREF: dest_info_init+20↑p
.text:000000000000C220                                         ; src_info_init+20↑p ...
.text:000000000000C220 ; __unwind {
.text:000000000000C220                 push    r15
.text:000000000000C222                 push    r14
.text:000000000000C224                 lea     rax, raw_hasher
.text:000000000000C22B                 push    r13
.text:000000000000C22D                 push    r12
.text:000000000000C22F                 mov     r12, rdx
.text:000000000000C232                 push    rbp
.text:000000000000C233                 push    rbx
.text:000000000000C234                 mov     r13, rcx
.text:000000000000C237                 mov     rbp, rdi
.text:000000000000C23A                 mov     edi, 50h ; 'P'  ; size
.text:000000000000C23F                 mov     r15, rsi
.text:000000000000C242                 sub     rsp, 8
.text:000000000000C246                 test    rdx, rdx
.text:000000000000C249                 mov     r14, r8
.text:000000000000C24C                 cmovz   r12, rax
.text:000000000000C250                 lea     rax, raw_comparator
.text:000000000000C257                 test    rcx, rcx
.text:000000000000C25A                 cmovz   r13, rax
.text:000000000000C25E                 call    _malloc
.text:000000000000C263                 test    rax, rax
.text:000000000000C266                 mov     rbx, rax
.text:000000000000C269                 jz      loc_C31A
.text:000000000000C26F                 test    r15, r15
.text:000000000000C272                 lea     rdi, [rax+28h]
.text:000000000000C276                 jz      loc_C330
.text:000000000000C27C                 mov     [rax+28h], r15
.text:000000000000C280                 call    check_tuning
.text:000000000000C285                 test    al, al
.text:000000000000C287                 jz      loc_C310
.text:000000000000C28D                 cmp     byte ptr [r15+10h], 0
.text:000000000000C292                 jz      loc_C390
.text:000000000000C298
.text:000000000000C298 loc_C298:                               ; CODE XREF: hash_initialize+16A↓j
.text:000000000000C298                                         ; hash_initialize+1A5↓j
.text:000000000000C298                 mov     rdi, rbp
.text:000000000000C29B                 call    next_prime
.text:000000000000C2A0                 mov     edx, 8
.text:000000000000C2A5                 mov     rbp, rax
.text:000000000000C2A8                 xor     ecx, ecx
.text:000000000000C2AA                 mov     rax, rdx
.text:000000000000C2AD                 mul     rbp
.text:000000000000C2B0                 jo      loc_C3CA
.text:000000000000C2B6
.text:000000000000C2B6 loc_C2B6:                               ; CODE XREF: hash_initialize+1AF↓j
.text:000000000000C2B6                 test    rax, rax
.text:000000000000C2B9                 js      short loc_C310
.text:000000000000C2BB                 test    rcx, rcx
.text:000000000000C2BE                 jnz     short loc_C310
.text:000000000000C2C0                 test    rbp, rbp
.text:000000000000C2C3                 mov     [rbx+10h], rbp
.text:000000000000C2C7                 jz      short loc_C310
.text:000000000000C2C9                 mov     esi, 10h        ; size
.text:000000000000C2CE                 mov     rdi, rbp        ; nmemb
.text:000000000000C2D1                 call    _calloc
.text:000000000000C2D6                 test    rax, rax
.text:000000000000C2D9                 mov     [rbx], rax
.text:000000000000C2DC                 jz      short loc_C310
.text:000000000000C2DE                 shl     rbp, 4
.text:000000000000C2E2                 mov     qword ptr [rbx+18h], 0
.text:000000000000C2EA                 mov     qword ptr [rbx+20h], 0
.text:000000000000C2F2                 add     rbp, rax
.text:000000000000C2F5                 mov     [rbx+30h], r12
.text:000000000000C2F9                 mov     [rbx+38h], r13
.text:000000000000C2FD                 mov     [rbx+8], rbp
.text:000000000000C301                 mov     [rbx+40h], r14
.text:000000000000C305                 mov     qword ptr [rbx+48h], 0
.text:000000000000C30D                 jmp     short loc_C31A
.text:000000000000C30D ; ---------------------------------------------------------------------------
.text:000000000000C30F                 align 10h
.text:000000000000C310
.text:000000000000C310 loc_C310:                               ; CODE XREF: hash_initialize+67↑j
.text:000000000000C310                                         ; hash_initialize+99↑j ...
.text:000000000000C310                 mov     rdi, rbx        ; ptr
.text:000000000000C313                 xor     ebx, ebx
.text:000000000000C315                 call    free
.text:000000000000C31A
.text:000000000000C31A loc_C31A:                               ; CODE XREF: hash_initialize+49↑j
.text:000000000000C31A                                         ; hash_initialize+ED↑j
.text:000000000000C31A                 add     rsp, 8
.text:000000000000C31E                 mov     rax, rbx
.text:000000000000C321                 pop     rbx
.text:000000000000C322                 pop     rbp
.text:000000000000C323                 pop     r12
.text:000000000000C325                 pop     r13
.text:000000000000C327                 pop     r14
.text:000000000000C329                 pop     r15
.text:000000000000C32B                 retn
.text:000000000000C32B ; ---------------------------------------------------------------------------
.text:000000000000C32C                 align 10h
.text:000000000000C330
.text:000000000000C330 loc_C330:                               ; CODE XREF: hash_initialize+56↑j
.text:000000000000C330                 lea     rax, default_tuning
.text:000000000000C337                 mov     [rbx+28h], rax
.text:000000000000C33B                 call    check_tuning
.text:000000000000C340                 test    al, al
.text:000000000000C342                 movss   xmm1, cs:dword_18208
.text:000000000000C34A                 jz      short loc_C310
.text:000000000000C34C                 test    rbp, rbp
.text:000000000000C34F                 js      short loc_C39B
.text:000000000000C351
.text:000000000000C351 loc_C351:                               ; CODE XREF: hash_initialize+179↓j
.text:000000000000C351                 pxor    xmm0, xmm0
.text:000000000000C355                 cvtsi2ss xmm0, rbp
.text:000000000000C35A
.text:000000000000C35A loc_C35A:                               ; CODE XREF: hash_initialize+194↓j
.text:000000000000C35A                 divss   xmm0, xmm1
.text:000000000000C35E                 ucomiss xmm0, cs:dword_1820C
.text:000000000000C365                 jnb     short loc_C310
.text:000000000000C367                 ucomiss xmm0, cs:dword_18210
.text:000000000000C36E                 jb      short loc_C3C0
.text:000000000000C370                 subss   xmm0, cs:dword_18210
.text:000000000000C378                 mov     rax, 8000000000000000h
.text:000000000000C382                 cvttss2si rbp, xmm0
.text:000000000000C387                 xor     rbp, rax
.text:000000000000C38A                 jmp     loc_C298
.text:000000000000C38A ; ---------------------------------------------------------------------------
.text:000000000000C38F                 align 10h
.text:000000000000C390
.text:000000000000C390 loc_C390:                               ; CODE XREF: hash_initialize+72↑j
.text:000000000000C390                 test    rbp, rbp
.text:000000000000C393                 movss   xmm1, dword ptr [r15+8]
.text:000000000000C399                 jns     short loc_C351
.text:000000000000C39B
.text:000000000000C39B loc_C39B:                               ; CODE XREF: hash_initialize+12F↑j
.text:000000000000C39B                 mov     rax, rbp
.text:000000000000C39E                 pxor    xmm0, xmm0
.text:000000000000C3A2                 shr     rax, 1
.text:000000000000C3A5                 and     ebp, 1
.text:000000000000C3A8                 or      rax, rbp
.text:000000000000C3AB                 cvtsi2ss xmm0, rax
.text:000000000000C3B0                 addss   xmm0, xmm0
.text:000000000000C3B4                 jmp     short loc_C35A
.text:000000000000C3B4 ; ---------------------------------------------------------------------------
.text:000000000000C3B6                 align 20h
.text:000000000000C3C0
.text:000000000000C3C0 loc_C3C0:                               ; CODE XREF: hash_initialize+14E↑j
.text:000000000000C3C0                 cvttss2si rbp, xmm0
.text:000000000000C3C5                 jmp     loc_C298
.text:000000000000C3CA ; ---------------------------------------------------------------------------
.text:000000000000C3CA
.text:000000000000C3CA loc_C3CA:                               ; CODE XREF: hash_initialize+90↑j
.text:000000000000C3CA                 mov     ecx, 1
.text:000000000000C3CF                 jmp     loc_C2B6
.text:000000000000C3CF ; } // starts at C220
.text:000000000000C3CF hash_initialize endp
.text:000000000000C3CF
.text:000000000000C3CF ; ---------------------------------------------------------------------------
.text:000000000000C3D4                 align 20h
.text:000000000000C3E0
.text:000000000000C3E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C3E0
.text:000000000000C3E0 ; Attributes: info_from_lumina
.text:000000000000C3E0
.text:000000000000C3E0 ; void __fastcall hash_clear(Hash_table *table)
.text:000000000000C3E0                 public hash_clear
.text:000000000000C3E0 hash_clear      proc near
.text:000000000000C3E0 ; __unwind {
.text:000000000000C3E0                 push    r12
.text:000000000000C3E2                 push    rbp
.text:000000000000C3E3                 mov     rbp, rdi
.text:000000000000C3E6                 push    rbx
.text:000000000000C3E7                 mov     r12, [rdi]
.text:000000000000C3EA                 cmp     r12, [rdi+8]
.text:000000000000C3EE                 jnb     short loc_C45B
.text:000000000000C3F0
.text:000000000000C3F0 loc_C3F0:                               ; CODE XREF: hash_clear+79↓j
.text:000000000000C3F0                 cmp     qword ptr [r12], 0
.text:000000000000C3F5                 jz      short loc_C451
.text:000000000000C3F7                 mov     rbx, [r12+8]
.text:000000000000C3FC                 mov     rax, [rbp+40h]
.text:000000000000C400                 test    rbx, rbx
.text:000000000000C403                 jz      short loc_C435
.text:000000000000C405                 nop     dword ptr [rax]
.text:000000000000C408
.text:000000000000C408 loc_C408:                               ; CODE XREF: hash_clear+53↓j
.text:000000000000C408                 test    rax, rax
.text:000000000000C40B                 jz      short loc_C416
.text:000000000000C40D                 mov     rdi, [rbx]
.text:000000000000C410                 call    rax
.text:000000000000C412                 mov     rax, [rbp+40h]
.text:000000000000C416
.text:000000000000C416 loc_C416:                               ; CODE XREF: hash_clear+2B↑j
.text:000000000000C416                 mov     rdx, [rbx+8]
.text:000000000000C41A                 mov     rcx, [rbp+48h]
.text:000000000000C41E                 mov     qword ptr [rbx], 0
.text:000000000000C425                 test    rdx, rdx
.text:000000000000C428                 mov     [rbx+8], rcx
.text:000000000000C42C                 mov     [rbp+48h], rbx
.text:000000000000C430                 mov     rbx, rdx
.text:000000000000C433                 jnz     short loc_C408
.text:000000000000C435
.text:000000000000C435 loc_C435:                               ; CODE XREF: hash_clear+23↑j
.text:000000000000C435                 test    rax, rax
.text:000000000000C438                 jz      short loc_C440
.text:000000000000C43A                 mov     rdi, [r12]
.text:000000000000C43E                 call    rax
.text:000000000000C440
.text:000000000000C440 loc_C440:                               ; CODE XREF: hash_clear+58↑j
.text:000000000000C440                 mov     qword ptr [r12], 0
.text:000000000000C448                 mov     qword ptr [r12+8], 0
.text:000000000000C451
.text:000000000000C451 loc_C451:                               ; CODE XREF: hash_clear+15↑j
.text:000000000000C451                 add     r12, 10h
.text:000000000000C455                 cmp     [rbp+8], r12
.text:000000000000C459                 ja      short loc_C3F0
.text:000000000000C45B
.text:000000000000C45B loc_C45B:                               ; CODE XREF: hash_clear+E↑j
.text:000000000000C45B                 mov     qword ptr [rbp+18h], 0
.text:000000000000C463                 mov     qword ptr [rbp+20h], 0
.text:000000000000C46B                 pop     rbx
.text:000000000000C46C                 pop     rbp
.text:000000000000C46D                 pop     r12
.text:000000000000C46F                 retn
.text:000000000000C46F ; } // starts at C3E0
.text:000000000000C46F hash_clear      endp
.text:000000000000C46F
.text:000000000000C470
.text:000000000000C470 ; =============== S U B R O U T I N E =======================================
.text:000000000000C470
.text:000000000000C470 ; Attributes: info_from_lumina
.text:000000000000C470
.text:000000000000C470 ; void __fastcall hash_free(Hash_table *table)
.text:000000000000C470                 public hash_free
.text:000000000000C470 hash_free       proc near               ; CODE XREF: forget_all+7↑j
.text:000000000000C470 ; __unwind {
.text:000000000000C470                 push    r12
.text:000000000000C472                 push    rbp
.text:000000000000C473                 mov     r12, rdi
.text:000000000000C476                 push    rbx
.text:000000000000C477                 cmp     qword ptr [rdi+40h], 0
.text:000000000000C47C                 mov     rbp, [rdi]
.text:000000000000C47F                 mov     rax, [rdi+8]
.text:000000000000C483                 jz      short loc_C4D3
.text:000000000000C485                 cmp     qword ptr [rdi+20h], 0
.text:000000000000C48A                 jz      short loc_C4D3
.text:000000000000C48C                 cmp     rbp, rax
.text:000000000000C48F                 jnb     short loc_C50C
.text:000000000000C491                 nop     dword ptr [rax+00000000h]
.text:000000000000C498
.text:000000000000C498 loc_C498:                               ; CODE XREF: hash_free+5D↓j
.text:000000000000C498                 mov     rdi, [rbp+0]
.text:000000000000C49C                 test    rdi, rdi
.text:000000000000C49F                 jz      short loc_C4C6
.text:000000000000C4A1                 mov     rbx, rbp
.text:000000000000C4A4                 jmp     short loc_C4B3
.text:000000000000C4A4 ; ---------------------------------------------------------------------------
.text:000000000000C4A6                 align 10h
.text:000000000000C4B0
.text:000000000000C4B0 loc_C4B0:                               ; CODE XREF: hash_free+4F↓j
.text:000000000000C4B0                 mov     rdi, [rbx]
.text:000000000000C4B3
.text:000000000000C4B3 loc_C4B3:                               ; CODE XREF: hash_free+34↑j
.text:000000000000C4B3                 call    qword ptr [r12+40h]
.text:000000000000C4B8                 mov     rbx, [rbx+8]
.text:000000000000C4BC                 test    rbx, rbx
.text:000000000000C4BF                 jnz     short loc_C4B0
.text:000000000000C4C1                 mov     rax, [r12+8]
.text:000000000000C4C6
.text:000000000000C4C6 loc_C4C6:                               ; CODE XREF: hash_free+2F↑j
.text:000000000000C4C6                 add     rbp, 10h
.text:000000000000C4CA                 cmp     rax, rbp
.text:000000000000C4CD                 ja      short loc_C498
.text:000000000000C4CF                 mov     rbp, [r12]
.text:000000000000C4D3
.text:000000000000C4D3 loc_C4D3:                               ; CODE XREF: hash_free+13↑j
.text:000000000000C4D3                                         ; hash_free+1A↑j
.text:000000000000C4D3                 cmp     rbp, rax
.text:000000000000C4D6                 jnb     short loc_C50C
.text:000000000000C4D8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000C4E0
.text:000000000000C4E0 loc_C4E0:                               ; CODE XREF: hash_free+9A↓j
.text:000000000000C4E0                 mov     rdi, [rbp+8]    ; ptr
.text:000000000000C4E4                 test    rdi, rdi
.text:000000000000C4E7                 jz      short loc_C501
.text:000000000000C4E9                 nop     dword ptr [rax+00000000h]
.text:000000000000C4F0
.text:000000000000C4F0 loc_C4F0:                               ; CODE XREF: hash_free+8F↓j
.text:000000000000C4F0                 mov     rbx, [rdi+8]
.text:000000000000C4F4                 call    free
.text:000000000000C4F9                 test    rbx, rbx
.text:000000000000C4FC                 mov     rdi, rbx
.text:000000000000C4FF                 jnz     short loc_C4F0
.text:000000000000C501
.text:000000000000C501 loc_C501:                               ; CODE XREF: hash_free+77↑j
.text:000000000000C501                 add     rbp, 10h
.text:000000000000C505                 cmp     [r12+8], rbp
.text:000000000000C50A                 ja      short loc_C4E0
.text:000000000000C50C
.text:000000000000C50C loc_C50C:                               ; CODE XREF: hash_free+1F↑j
.text:000000000000C50C                                         ; hash_free+66↑j
.text:000000000000C50C                 mov     rdi, [r12+48h]  ; ptr
.text:000000000000C511                 test    rdi, rdi
.text:000000000000C514                 jz      short loc_C531
.text:000000000000C516                 db      2Eh
.text:000000000000C516                 nop     word ptr [rax+rax+00000000h]
.text:000000000000C520
.text:000000000000C520 loc_C520:                               ; CODE XREF: hash_free+BF↓j
.text:000000000000C520                 mov     rbx, [rdi+8]
.text:000000000000C524                 call    free
.text:000000000000C529                 test    rbx, rbx
.text:000000000000C52C                 mov     rdi, rbx
.text:000000000000C52F                 jnz     short loc_C520
.text:000000000000C531
.text:000000000000C531 loc_C531:                               ; CODE XREF: hash_free+A4↑j
.text:000000000000C531                 mov     rdi, [r12]      ; ptr
.text:000000000000C535                 call    free
.text:000000000000C53A                 pop     rbx
.text:000000000000C53B                 mov     rdi, r12        ; ptr
.text:000000000000C53E                 pop     rbp
.text:000000000000C53F                 pop     r12
.text:000000000000C541                 jmp     free
.text:000000000000C541 ; } // starts at C470
.text:000000000000C541 hash_free       endp
.text:000000000000C541
.text:000000000000C541 ; ---------------------------------------------------------------------------
.text:000000000000C546                 align 10h
.text:000000000000C550
.text:000000000000C550 ; =============== S U B R O U T I N E =======================================
.text:000000000000C550
.text:000000000000C550 ; Attributes: info_from_lumina
.text:000000000000C550
.text:000000000000C550 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:000000000000C550                 public hash_rehash
.text:000000000000C550 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:000000000000C550                                         ; hash_delete+10F↓p
.text:000000000000C550
.text:000000000000C550 ptr             = qword ptr -78h
.text:000000000000C550 var_70          = qword ptr -70h
.text:000000000000C550 var_68          = qword ptr -68h
.text:000000000000C550 var_60          = qword ptr -60h
.text:000000000000C550 var_58          = qword ptr -58h
.text:000000000000C550 var_50          = qword ptr -50h
.text:000000000000C550 var_48          = qword ptr -48h
.text:000000000000C550 var_40          = qword ptr -40h
.text:000000000000C550 var_38          = qword ptr -38h
.text:000000000000C550 var_30          = qword ptr -30h
.text:000000000000C550 var_20          = qword ptr -20h
.text:000000000000C550
.text:000000000000C550 ; __unwind {
.text:000000000000C550                 push    r12
.text:000000000000C552                 push    rbp
.text:000000000000C553                 mov     rbp, rdi
.text:000000000000C556                 push    rbx
.text:000000000000C557                 sub     rsp, 60h
.text:000000000000C55B                 mov     r12, [rdi+28h]
.text:000000000000C55F                 mov     rax, fs:28h
.text:000000000000C568                 mov     [rsp+78h+var_20], rax
.text:000000000000C56D                 xor     eax, eax
.text:000000000000C56F                 cmp     byte ptr [r12+10h], 0
.text:000000000000C575                 jnz     short loc_C5C8
.text:000000000000C577                 test    rsi, rsi
.text:000000000000C57A                 js      loc_C6F8
.text:000000000000C580                 pxor    xmm0, xmm0
.text:000000000000C584                 cvtsi2ss xmm0, rsi
.text:000000000000C589
.text:000000000000C589 loc_C589:                               ; CODE XREF: hash_rehash+1C1↓j
.text:000000000000C589                 divss   xmm0, dword ptr [r12+8]
.text:000000000000C590                 ucomiss xmm0, cs:dword_1820C
.text:000000000000C597                 jnb     loc_C6D0
.text:000000000000C59D                 ucomiss xmm0, cs:dword_18210
.text:000000000000C5A4                 jb      loc_C720
.text:000000000000C5AA                 subss   xmm0, cs:dword_18210
.text:000000000000C5B2                 mov     rax, 8000000000000000h
.text:000000000000C5BC                 cvttss2si rsi, xmm0
.text:000000000000C5C1                 xor     rsi, rax
.text:000000000000C5C4                 nop     dword ptr [rax+00h]
.text:000000000000C5C8
.text:000000000000C5C8 loc_C5C8:                               ; CODE XREF: hash_rehash+25↑j
.text:000000000000C5C8                                         ; hash_rehash+1D5↓j
.text:000000000000C5C8                 mov     rdi, rsi
.text:000000000000C5CB                 call    next_prime
.text:000000000000C5D0                 mov     edx, 8
.text:000000000000C5D5                 mov     rbx, rax
.text:000000000000C5D8                 xor     ecx, ecx
.text:000000000000C5DA                 mov     rax, rdx
.text:000000000000C5DD                 mul     rbx
.text:000000000000C5E0                 jo      loc_C77F
.text:000000000000C5E6
.text:000000000000C5E6 loc_C5E6:                               ; CODE XREF: hash_rehash+234↓j
.text:000000000000C5E6                 test    rax, rax
.text:000000000000C5E9                 mov     eax, 1
.text:000000000000C5EE                 cmovs   rcx, rax
.text:000000000000C5F2                 test    rbx, rbx
.text:000000000000C5F5                 jz      loc_C6D0
.text:000000000000C5FB                 and     ecx, 1
.text:000000000000C5FE                 jnz     loc_C6D0
.text:000000000000C604                 cmp     [rbp+10h], rbx
.text:000000000000C608                 jz      loc_C730
.text:000000000000C60E                 mov     esi, 10h        ; size
.text:000000000000C613                 mov     rdi, rbx        ; nmemb
.text:000000000000C616                 call    _calloc
.text:000000000000C61B                 test    rax, rax
.text:000000000000C61E                 mov     [rsp+78h+ptr], rax
.text:000000000000C622                 jz      loc_C6D0
.text:000000000000C628                 mov     [rsp+78h+var_68], rbx
.text:000000000000C62D                 shl     rbx, 4
.text:000000000000C631                 mov     [rsp+78h+var_50], r12
.text:000000000000C636                 add     rbx, rax
.text:000000000000C639                 mov     rax, [rbp+30h]
.text:000000000000C63D                 mov     r12, rsp
.text:000000000000C640                 xor     edx, edx
.text:000000000000C642                 mov     rsi, rbp
.text:000000000000C645                 mov     rdi, r12
.text:000000000000C648                 mov     [rsp+78h+var_70], rbx
.text:000000000000C64D                 mov     [rsp+78h+var_60], 0
.text:000000000000C656                 mov     [rsp+78h+var_48], rax
.text:000000000000C65B                 mov     rax, [rbp+38h]
.text:000000000000C65F                 mov     [rsp+78h+var_58], 0
.text:000000000000C668                 mov     [rsp+78h+var_40], rax
.text:000000000000C66D                 mov     rax, [rbp+40h]
.text:000000000000C671                 mov     [rsp+78h+var_38], rax
.text:000000000000C676                 mov     rax, [rbp+48h]
.text:000000000000C67A                 mov     [rsp+78h+var_30], rax
.text:000000000000C67F                 call    transfer_entries
.text:000000000000C684                 test    al, al
.text:000000000000C686                 mov     ebx, eax
.text:000000000000C688                 jnz     loc_C740
.text:000000000000C68E                 mov     rax, [rsp+78h+var_30]
.text:000000000000C693                 mov     edx, 1
.text:000000000000C698                 mov     rsi, r12
.text:000000000000C69B                 mov     rdi, rbp
.text:000000000000C69E                 mov     [rbp+48h], rax
.text:000000000000C6A2                 call    transfer_entries
.text:000000000000C6A7                 test    al, al
.text:000000000000C6A9                 jz      loc_C789
.text:000000000000C6AF                 xor     edx, edx
.text:000000000000C6B1                 mov     rsi, r12
.text:000000000000C6B4                 mov     rdi, rbp
.text:000000000000C6B7                 call    transfer_entries
.text:000000000000C6BC                 test    al, al
.text:000000000000C6BE                 jz      loc_C789
.text:000000000000C6C4                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000C6C8                 call    free
.text:000000000000C6CD                 jmp     short loc_C6D2
.text:000000000000C6CD ; ---------------------------------------------------------------------------
.text:000000000000C6CF                 align 10h
.text:000000000000C6D0
.text:000000000000C6D0 loc_C6D0:                               ; CODE XREF: hash_rehash+47↑j
.text:000000000000C6D0                                         ; hash_rehash+A5↑j ...
.text:000000000000C6D0                 xor     ebx, ebx
.text:000000000000C6D2
.text:000000000000C6D2 loc_C6D2:                               ; CODE XREF: hash_rehash+17D↑j
.text:000000000000C6D2                                         ; hash_rehash+1E5↓j ...
.text:000000000000C6D2                 mov     rcx, [rsp+78h+var_20]
.text:000000000000C6D7                 xor     rcx, fs:28h
.text:000000000000C6E0                 mov     eax, ebx
.text:000000000000C6E2                 jnz     loc_C77A
.text:000000000000C6E8                 add     rsp, 60h
.text:000000000000C6EC                 pop     rbx
.text:000000000000C6ED                 pop     rbp
.text:000000000000C6EE                 pop     r12
.text:000000000000C6F0                 retn
.text:000000000000C6F0 ; ---------------------------------------------------------------------------
.text:000000000000C6F1                 align 8
.text:000000000000C6F8
.text:000000000000C6F8 loc_C6F8:                               ; CODE XREF: hash_rehash+2A↑j
.text:000000000000C6F8                 mov     rax, rsi
.text:000000000000C6FB                 pxor    xmm0, xmm0
.text:000000000000C6FF                 shr     rax, 1
.text:000000000000C702                 and     esi, 1
.text:000000000000C705                 or      rax, rsi
.text:000000000000C708                 cvtsi2ss xmm0, rax
.text:000000000000C70D                 addss   xmm0, xmm0
.text:000000000000C711                 jmp     loc_C589
.text:000000000000C711 ; ---------------------------------------------------------------------------
.text:000000000000C716                 align 20h
.text:000000000000C720
.text:000000000000C720 loc_C720:                               ; CODE XREF: hash_rehash+54↑j
.text:000000000000C720                 cvttss2si rsi, xmm0
.text:000000000000C725                 jmp     loc_C5C8
.text:000000000000C725 ; ---------------------------------------------------------------------------
.text:000000000000C72A                 align 10h
.text:000000000000C730
.text:000000000000C730 loc_C730:                               ; CODE XREF: hash_rehash+B8↑j
.text:000000000000C730                 mov     ebx, 1
.text:000000000000C735                 jmp     short loc_C6D2
.text:000000000000C735 ; ---------------------------------------------------------------------------
.text:000000000000C737                 align 20h
.text:000000000000C740
.text:000000000000C740 loc_C740:                               ; CODE XREF: hash_rehash+138↑j
.text:000000000000C740                 mov     rdi, [rbp+0]    ; ptr
.text:000000000000C744                 call    free
.text:000000000000C749                 mov     rax, [rsp+78h+ptr]
.text:000000000000C74D                 mov     [rbp+0], rax
.text:000000000000C751                 mov     rax, [rsp+78h+var_70]
.text:000000000000C756                 mov     [rbp+8], rax
.text:000000000000C75A                 mov     rax, [rsp+78h+var_68]
.text:000000000000C75F                 mov     [rbp+10h], rax
.text:000000000000C763                 mov     rax, [rsp+78h+var_60]
.text:000000000000C768                 mov     [rbp+18h], rax
.text:000000000000C76C                 mov     rax, [rsp+78h+var_30]
.text:000000000000C771                 mov     [rbp+48h], rax
.text:000000000000C775                 jmp     loc_C6D2
.text:000000000000C77A ; ---------------------------------------------------------------------------
.text:000000000000C77A
.text:000000000000C77A loc_C77A:                               ; CODE XREF: hash_rehash+192↑j
.text:000000000000C77A                 call    ___stack_chk_fail
.text:000000000000C77F ; ---------------------------------------------------------------------------
.text:000000000000C77F
.text:000000000000C77F loc_C77F:                               ; CODE XREF: hash_rehash+90↑j
.text:000000000000C77F                 mov     ecx, 1
.text:000000000000C784                 jmp     loc_C5E6
.text:000000000000C789 ; ---------------------------------------------------------------------------
.text:000000000000C789
.text:000000000000C789 loc_C789:                               ; CODE XREF: hash_rehash+159↑j
.text:000000000000C789                                         ; hash_rehash+16E↑j
.text:000000000000C789                 call    _abort
.text:000000000000C789 ; } // starts at C550
.text:000000000000C789 hash_rehash     endp
.text:000000000000C789
.text:000000000000C789 ; ---------------------------------------------------------------------------
.text:000000000000C78E                 align 10h
.text:000000000000C790
.text:000000000000C790 ; =============== S U B R O U T I N E =======================================
.text:000000000000C790
.text:000000000000C790 ; Attributes: info_from_lumina
.text:000000000000C790
.text:000000000000C790 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:000000000000C790                 public hash_insert_if_absent
.text:000000000000C790 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:000000000000C790
.text:000000000000C790 var_38          = qword ptr -38h
.text:000000000000C790 var_30          = qword ptr -30h
.text:000000000000C790
.text:000000000000C790 ; __unwind {
.text:000000000000C790                 push    r13
.text:000000000000C792                 push    r12
.text:000000000000C794                 push    rbp
.text:000000000000C795                 push    rbx
.text:000000000000C796                 sub     rsp, 18h
.text:000000000000C79A                 mov     rax, fs:28h
.text:000000000000C7A3                 mov     [rsp+38h+var_30], rax
.text:000000000000C7A8                 xor     eax, eax
.text:000000000000C7AA                 test    rsi, rsi
.text:000000000000C7AD                 jz      loc_C96D
.text:000000000000C7B3                 mov     r12, rsp
.text:000000000000C7B6                 xor     ecx, ecx
.text:000000000000C7B8                 mov     r13, rdx
.text:000000000000C7BB                 mov     rdx, r12
.text:000000000000C7BE                 mov     rbx, rdi
.text:000000000000C7C1                 mov     rbp, rsi
.text:000000000000C7C4                 call    hash_find_entry
.text:000000000000C7C9                 test    rax, rax
.text:000000000000C7CC                 mov     rdx, rax
.text:000000000000C7CF                 jz      short loc_C800
.text:000000000000C7D1                 xor     eax, eax
.text:000000000000C7D3                 test    r13, r13
.text:000000000000C7D6                 jz      short loc_C7DC
.text:000000000000C7D8                 mov     [r13+0], rdx
.text:000000000000C7DC
.text:000000000000C7DC loc_C7DC:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:000000000000C7DC                                         ; hash_insert_if_absent+E9↓j ...
.text:000000000000C7DC                 mov     rcx, [rsp+38h+var_30]
.text:000000000000C7E1                 xor     rcx, fs:28h
.text:000000000000C7EA                 jnz     loc_CA0F
.text:000000000000C7F0                 add     rsp, 18h
.text:000000000000C7F4                 pop     rbx
.text:000000000000C7F5                 pop     rbp
.text:000000000000C7F6                 pop     r12
.text:000000000000C7F8                 pop     r13
.text:000000000000C7FA                 retn
.text:000000000000C7FA ; ---------------------------------------------------------------------------
.text:000000000000C7FB                 align 20h
.text:000000000000C800
.text:000000000000C800 loc_C800:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:000000000000C800                 mov     rax, [rbx+18h]
.text:000000000000C804                 test    rax, rax
.text:000000000000C807                 js      short loc_C880
.text:000000000000C809                 pxor    xmm1, xmm1
.text:000000000000C80D                 mov     rdx, [rbx+28h]
.text:000000000000C811                 cvtsi2ss xmm1, rax
.text:000000000000C816                 mov     rax, [rbx+10h]
.text:000000000000C81A                 test    rax, rax
.text:000000000000C81D                 js      loc_C8AA
.text:000000000000C823
.text:000000000000C823 loc_C823:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:000000000000C823                 pxor    xmm0, xmm0
.text:000000000000C827                 cvtsi2ss xmm0, rax
.text:000000000000C82C
.text:000000000000C82C loc_C82C:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:000000000000C82C                 mulss   xmm0, dword ptr [rdx+8]
.text:000000000000C831                 ucomiss xmm1, xmm0
.text:000000000000C834                 ja      loc_C8D0
.text:000000000000C83A
.text:000000000000C83A loc_C83A:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:000000000000C83A                                         ; hash_insert_if_absent+1D7↓j
.text:000000000000C83A                 mov     r12, [rsp+38h+var_38]
.text:000000000000C83E                 cmp     qword ptr [r12], 0
.text:000000000000C843                 jz      loc_C978
.text:000000000000C849                 mov     rax, [rbx+48h]
.text:000000000000C84D                 test    rax, rax
.text:000000000000C850                 jz      loc_C990
.text:000000000000C856                 mov     rdx, [rax+8]
.text:000000000000C85A                 mov     [rbx+48h], rdx
.text:000000000000C85E
.text:000000000000C85E loc_C85E:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:000000000000C85E                 mov     rdx, [r12+8]
.text:000000000000C863                 mov     [rax], rbp
.text:000000000000C866                 mov     [rax+8], rdx
.text:000000000000C86A                 mov     [r12+8], rax
.text:000000000000C86F                 mov     eax, 1
.text:000000000000C874                 add     qword ptr [rbx+20h], 1
.text:000000000000C879                 jmp     loc_C7DC
.text:000000000000C879 ; ---------------------------------------------------------------------------
.text:000000000000C87E                 align 20h
.text:000000000000C880
.text:000000000000C880 loc_C880:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:000000000000C880                 mov     rdx, rax
.text:000000000000C883                 pxor    xmm1, xmm1
.text:000000000000C887                 and     eax, 1
.text:000000000000C88A                 shr     rdx, 1
.text:000000000000C88D                 or      rdx, rax
.text:000000000000C890                 mov     rax, [rbx+10h]
.text:000000000000C894                 cvtsi2ss xmm1, rdx
.text:000000000000C899                 mov     rdx, [rbx+28h]
.text:000000000000C89D                 test    rax, rax
.text:000000000000C8A0                 addss   xmm1, xmm1
.text:000000000000C8A4                 jns     loc_C823
.text:000000000000C8AA
.text:000000000000C8AA loc_C8AA:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:000000000000C8AA                 mov     rcx, rax
.text:000000000000C8AD                 pxor    xmm0, xmm0
.text:000000000000C8B1                 shr     rcx, 1
.text:000000000000C8B4                 and     eax, 1
.text:000000000000C8B7                 or      rcx, rax
.text:000000000000C8BA                 cvtsi2ss xmm0, rcx
.text:000000000000C8BF                 addss   xmm0, xmm0
.text:000000000000C8C3                 jmp     loc_C82C
.text:000000000000C8C3 ; ---------------------------------------------------------------------------
.text:000000000000C8C8                 align 10h
.text:000000000000C8D0
.text:000000000000C8D0 loc_C8D0:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:000000000000C8D0                 lea     rdi, [rbx+28h]
.text:000000000000C8D4                 call    check_tuning
.text:000000000000C8D9                 mov     rax, [rbx+10h]
.text:000000000000C8DD                 mov     rdx, [rbx+28h]
.text:000000000000C8E1                 test    rax, rax
.text:000000000000C8E4                 movss   xmm2, dword ptr [rdx+8]
.text:000000000000C8E9                 js      loc_C9B0
.text:000000000000C8EF                 pxor    xmm0, xmm0
.text:000000000000C8F3                 cvtsi2ss xmm0, rax
.text:000000000000C8F8
.text:000000000000C8F8 loc_C8F8:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:000000000000C8F8                 mov     rax, [rbx+18h]
.text:000000000000C8FC                 test    rax, rax
.text:000000000000C8FF                 js      loc_C9D0
.text:000000000000C905                 pxor    xmm1, xmm1
.text:000000000000C909                 cvtsi2ss xmm1, rax
.text:000000000000C90E
.text:000000000000C90E loc_C90E:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:000000000000C90E                 movaps  xmm3, xmm2
.text:000000000000C911                 mulss   xmm3, xmm0
.text:000000000000C915                 ucomiss xmm1, xmm3
.text:000000000000C918                 jbe     loc_C83A
.text:000000000000C91E                 cmp     byte ptr [rdx+10h], 0
.text:000000000000C922                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:000000000000C927                 jnz     short loc_C92D
.text:000000000000C929                 mulss   xmm0, xmm2
.text:000000000000C92D
.text:000000000000C92D loc_C92D:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:000000000000C92D                 ucomiss xmm0, cs:dword_1820C
.text:000000000000C934                 jnb     short loc_C9A3
.text:000000000000C936                 ucomiss xmm0, cs:dword_18210
.text:000000000000C93D                 jnb     loc_C9F0
.text:000000000000C943                 cvttss2si rsi, xmm0
.text:000000000000C948
.text:000000000000C948 loc_C948:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:000000000000C948                 mov     rdi, rbx
.text:000000000000C94B                 call    hash_rehash
.text:000000000000C950                 test    al, al
.text:000000000000C952                 jz      short loc_C9A3
.text:000000000000C954                 xor     ecx, ecx
.text:000000000000C956                 mov     rdx, r12
.text:000000000000C959                 mov     rsi, rbp
.text:000000000000C95C                 mov     rdi, rbx
.text:000000000000C95F                 call    hash_find_entry
.text:000000000000C964                 test    rax, rax
.text:000000000000C967                 jz      loc_C83A
.text:000000000000C96D
.text:000000000000C96D loc_C96D:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:000000000000C96D                 call    _abort
.text:000000000000C96D ; ---------------------------------------------------------------------------
.text:000000000000C972                 align 8
.text:000000000000C978
.text:000000000000C978 loc_C978:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:000000000000C978                 mov     [r12], rbp
.text:000000000000C97C                 mov     eax, 1
.text:000000000000C981                 add     qword ptr [rbx+20h], 1
.text:000000000000C986                 add     qword ptr [rbx+18h], 1
.text:000000000000C98B                 jmp     loc_C7DC
.text:000000000000C990 ; ---------------------------------------------------------------------------
.text:000000000000C990
.text:000000000000C990 loc_C990:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:000000000000C990                 mov     edi, 10h        ; size
.text:000000000000C995                 call    _malloc
.text:000000000000C99A                 test    rax, rax
.text:000000000000C99D                 jnz     loc_C85E
.text:000000000000C9A3
.text:000000000000C9A3 loc_C9A3:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:000000000000C9A3                                         ; hash_insert_if_absent+1C2↑j
.text:000000000000C9A3                 mov     eax, 0FFFFFFFFh
.text:000000000000C9A8                 jmp     loc_C7DC
.text:000000000000C9A8 ; ---------------------------------------------------------------------------
.text:000000000000C9AD                 align 10h
.text:000000000000C9B0
.text:000000000000C9B0 loc_C9B0:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:000000000000C9B0                 mov     rcx, rax
.text:000000000000C9B3                 pxor    xmm0, xmm0
.text:000000000000C9B7                 shr     rcx, 1
.text:000000000000C9BA                 and     eax, 1
.text:000000000000C9BD                 or      rcx, rax
.text:000000000000C9C0                 cvtsi2ss xmm0, rcx
.text:000000000000C9C5                 addss   xmm0, xmm0
.text:000000000000C9C9                 jmp     loc_C8F8
.text:000000000000C9C9 ; ---------------------------------------------------------------------------
.text:000000000000C9CE                 align 10h
.text:000000000000C9D0
.text:000000000000C9D0 loc_C9D0:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:000000000000C9D0                 mov     rcx, rax
.text:000000000000C9D3                 pxor    xmm1, xmm1
.text:000000000000C9D7                 shr     rcx, 1
.text:000000000000C9DA                 and     eax, 1
.text:000000000000C9DD                 or      rcx, rax
.text:000000000000C9E0                 cvtsi2ss xmm1, rcx
.text:000000000000C9E5                 addss   xmm1, xmm1
.text:000000000000C9E9                 jmp     loc_C90E
.text:000000000000C9E9 ; ---------------------------------------------------------------------------
.text:000000000000C9EE                 align 10h
.text:000000000000C9F0
.text:000000000000C9F0 loc_C9F0:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:000000000000C9F0                 subss   xmm0, cs:dword_18210
.text:000000000000C9F8                 mov     rax, 8000000000000000h
.text:000000000000CA02                 cvttss2si rsi, xmm0
.text:000000000000CA07                 xor     rsi, rax
.text:000000000000CA0A                 jmp     loc_C948
.text:000000000000CA0F ; ---------------------------------------------------------------------------
.text:000000000000CA0F
.text:000000000000CA0F loc_CA0F:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:000000000000CA0F                 call    ___stack_chk_fail
.text:000000000000CA0F ; } // starts at C790
.text:000000000000CA0F hash_insert_if_absent endp
.text:000000000000CA0F
.text:000000000000CA0F ; ---------------------------------------------------------------------------
.text:000000000000CA14                 align 20h
.text:000000000000CA20
.text:000000000000CA20 ; =============== S U B R O U T I N E =======================================
.text:000000000000CA20
.text:000000000000CA20 ; Attributes: info_from_lumina
.text:000000000000CA20
.text:000000000000CA20 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:000000000000CA20                 public hash_insert
.text:000000000000CA20 hash_insert     proc near               ; CODE XREF: remember_copied+3D↑p
.text:000000000000CA20                                         ; record_file+46↑p ...
.text:000000000000CA20
.text:000000000000CA20 var_18          = qword ptr -18h
.text:000000000000CA20 var_10          = qword ptr -10h
.text:000000000000CA20
.text:000000000000CA20 ; __unwind {
.text:000000000000CA20                 push    rbx
.text:000000000000CA21                 mov     rbx, rsi
.text:000000000000CA24                 sub     rsp, 10h
.text:000000000000CA28                 mov     rdx, rsp
.text:000000000000CA2B                 mov     rax, fs:28h
.text:000000000000CA34                 mov     [rsp+18h+var_10], rax
.text:000000000000CA39                 xor     eax, eax
.text:000000000000CA3B                 call    hash_insert_if_absent
.text:000000000000CA40                 cmp     eax, 0FFFFFFFFh
.text:000000000000CA43                 jz      short loc_CA70
.text:000000000000CA45                 test    eax, eax
.text:000000000000CA47                 jnz     short loc_CA4D
.text:000000000000CA49                 mov     rbx, [rsp+18h+var_18]
.text:000000000000CA4D
.text:000000000000CA4D loc_CA4D:                               ; CODE XREF: hash_insert+27↑j
.text:000000000000CA4D                                         ; hash_insert+52↓j
.text:000000000000CA4D                 mov     rcx, [rsp+18h+var_10]
.text:000000000000CA52                 xor     rcx, fs:28h
.text:000000000000CA5B                 mov     rax, rbx
.text:000000000000CA5E                 jnz     short loc_CA74
.text:000000000000CA60                 add     rsp, 10h
.text:000000000000CA64                 pop     rbx
.text:000000000000CA65                 retn
.text:000000000000CA65 ; ---------------------------------------------------------------------------
.text:000000000000CA66                 align 10h
.text:000000000000CA70
.text:000000000000CA70 loc_CA70:                               ; CODE XREF: hash_insert+23↑j
.text:000000000000CA70                 xor     ebx, ebx
.text:000000000000CA72                 jmp     short loc_CA4D
.text:000000000000CA74 ; ---------------------------------------------------------------------------
.text:000000000000CA74
.text:000000000000CA74 loc_CA74:                               ; CODE XREF: hash_insert+3E↑j
.text:000000000000CA74                 call    ___stack_chk_fail
.text:000000000000CA74 ; } // starts at CA20
.text:000000000000CA74 hash_insert     endp
.text:000000000000CA74
.text:000000000000CA74 ; ---------------------------------------------------------------------------
.text:000000000000CA79                 align 20h
.text:000000000000CA80
.text:000000000000CA80 ; =============== S U B R O U T I N E =======================================
.text:000000000000CA80
.text:000000000000CA80 ; Attributes: info_from_lumina
.text:000000000000CA80
.text:000000000000CA80 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:000000000000CA80                 public hash_delete
.text:000000000000CA80 hash_delete     proc near               ; CODE XREF: forget_created+31↑p
.text:000000000000CA80
.text:000000000000CA80 var_28          = qword ptr -28h
.text:000000000000CA80 var_20          = qword ptr -20h
.text:000000000000CA80
.text:000000000000CA80 ; __unwind {
.text:000000000000CA80                 push    r12
.text:000000000000CA82                 push    rbp
.text:000000000000CA83                 mov     ecx, 1
.text:000000000000CA88                 push    rbx
.text:000000000000CA89                 mov     rbx, rdi
.text:000000000000CA8C                 sub     rsp, 10h
.text:000000000000CA90                 mov     rdx, rsp
.text:000000000000CA93                 mov     rax, fs:28h
.text:000000000000CA9C                 mov     [rsp+28h+var_20], rax
.text:000000000000CAA1                 xor     eax, eax
.text:000000000000CAA3                 call    hash_find_entry
.text:000000000000CAA8                 test    rax, rax
.text:000000000000CAAB                 mov     rbp, rax
.text:000000000000CAAE                 jz      short loc_CABF
.text:000000000000CAB0                 mov     rax, [rsp+28h+var_28]
.text:000000000000CAB4                 sub     qword ptr [rbx+20h], 1
.text:000000000000CAB9                 cmp     qword ptr [rax], 0
.text:000000000000CABD                 jz      short loc_CAE0
.text:000000000000CABF
.text:000000000000CABF loc_CABF:                               ; CODE XREF: hash_delete+2E↑j
.text:000000000000CABF                                         ; hash_delete+9F↓j ...
.text:000000000000CABF                 mov     rcx, [rsp+28h+var_20]
.text:000000000000CAC4                 xor     rcx, fs:28h
.text:000000000000CACD                 mov     rax, rbp
.text:000000000000CAD0                 jnz     loc_CC7E
.text:000000000000CAD6                 add     rsp, 10h
.text:000000000000CADA                 pop     rbx
.text:000000000000CADB                 pop     rbp
.text:000000000000CADC                 pop     r12
.text:000000000000CADE                 retn
.text:000000000000CADE ; ---------------------------------------------------------------------------
.text:000000000000CADF                 align 20h
.text:000000000000CAE0
.text:000000000000CAE0 loc_CAE0:                               ; CODE XREF: hash_delete+3D↑j
.text:000000000000CAE0                 mov     rax, [rbx+18h]
.text:000000000000CAE4                 sub     rax, 1
.text:000000000000CAE8                 test    rax, rax
.text:000000000000CAEB                 mov     [rbx+18h], rax
.text:000000000000CAEF                 js      loc_CBF0
.text:000000000000CAF5                 pxor    xmm0, xmm0
.text:000000000000CAF9                 cvtsi2ss xmm0, rax
.text:000000000000CAFE
.text:000000000000CAFE loc_CAFE:                               ; CODE XREF: hash_delete+189↓j
.text:000000000000CAFE                 mov     rax, [rbx+10h]
.text:000000000000CB02                 mov     rdx, [rbx+28h]
.text:000000000000CB06                 test    rax, rax
.text:000000000000CB09                 js      loc_CBD0
.text:000000000000CB0F                 pxor    xmm1, xmm1
.text:000000000000CB13                 cvtsi2ss xmm1, rax
.text:000000000000CB18
.text:000000000000CB18 loc_CB18:                               ; CODE XREF: hash_delete+169↓j
.text:000000000000CB18                 mulss   xmm1, dword ptr [rdx]
.text:000000000000CB1C                 ucomiss xmm1, xmm0
.text:000000000000CB1F                 jbe     short loc_CABF
.text:000000000000CB21                 lea     rdi, [rbx+28h]
.text:000000000000CB25                 call    check_tuning
.text:000000000000CB2A                 mov     rax, [rbx+10h]
.text:000000000000CB2E                 mov     rdx, [rbx+28h]
.text:000000000000CB32                 test    rax, rax
.text:000000000000CB35                 js      loc_CC60
.text:000000000000CB3B                 pxor    xmm0, xmm0
.text:000000000000CB3F                 cvtsi2ss xmm0, rax
.text:000000000000CB44
.text:000000000000CB44 loc_CB44:                               ; CODE XREF: hash_delete+1F9↓j
.text:000000000000CB44                 mov     rax, [rbx+18h]
.text:000000000000CB48                 test    rax, rax
.text:000000000000CB4B                 js      loc_CC40
.text:000000000000CB51                 pxor    xmm1, xmm1
.text:000000000000CB55                 cvtsi2ss xmm1, rax
.text:000000000000CB5A
.text:000000000000CB5A loc_CB5A:                               ; CODE XREF: hash_delete+1D9↓j
.text:000000000000CB5A                 movss   xmm2, dword ptr [rdx]
.text:000000000000CB5E                 mulss   xmm2, xmm0
.text:000000000000CB62                 ucomiss xmm2, xmm1
.text:000000000000CB65                 jbe     loc_CABF
.text:000000000000CB6B                 cmp     byte ptr [rdx+10h], 0
.text:000000000000CB6F                 mulss   xmm0, dword ptr [rdx+4]
.text:000000000000CB74                 jz      loc_CC30
.text:000000000000CB7A
.text:000000000000CB7A loc_CB7A:                               ; CODE XREF: hash_delete+1B5↓j
.text:000000000000CB7A                 ucomiss xmm0, cs:dword_18210
.text:000000000000CB81                 jnb     loc_CC10
.text:000000000000CB87                 cvttss2si rsi, xmm0
.text:000000000000CB8C
.text:000000000000CB8C loc_CB8C:                               ; CODE XREF: hash_delete+1AA↓j
.text:000000000000CB8C                 mov     rdi, rbx
.text:000000000000CB8F                 call    hash_rehash
.text:000000000000CB94                 test    al, al
.text:000000000000CB96                 jnz     loc_CABF
.text:000000000000CB9C                 mov     rdi, [rbx+48h]  ; ptr
.text:000000000000CBA0                 test    rdi, rdi
.text:000000000000CBA3                 jz      short loc_CBB9
.text:000000000000CBA5                 nop     dword ptr [rax]
.text:000000000000CBA8
.text:000000000000CBA8 loc_CBA8:                               ; CODE XREF: hash_delete+137↓j
.text:000000000000CBA8                 mov     r12, [rdi+8]
.text:000000000000CBAC                 call    free
.text:000000000000CBB1                 test    r12, r12
.text:000000000000CBB4                 mov     rdi, r12
.text:000000000000CBB7                 jnz     short loc_CBA8
.text:000000000000CBB9
.text:000000000000CBB9 loc_CBB9:                               ; CODE XREF: hash_delete+123↑j
.text:000000000000CBB9                 mov     qword ptr [rbx+48h], 0
.text:000000000000CBC1                 jmp     loc_CABF
.text:000000000000CBC1 ; ---------------------------------------------------------------------------
.text:000000000000CBC6                 align 10h
.text:000000000000CBD0
.text:000000000000CBD0 loc_CBD0:                               ; CODE XREF: hash_delete+89↑j
.text:000000000000CBD0                 mov     rcx, rax
.text:000000000000CBD3                 pxor    xmm1, xmm1
.text:000000000000CBD7                 shr     rcx, 1
.text:000000000000CBDA                 and     eax, 1
.text:000000000000CBDD                 or      rcx, rax
.text:000000000000CBE0                 cvtsi2ss xmm1, rcx
.text:000000000000CBE5                 addss   xmm1, xmm1
.text:000000000000CBE9                 jmp     loc_CB18
.text:000000000000CBE9 ; ---------------------------------------------------------------------------
.text:000000000000CBEE                 align 10h
.text:000000000000CBF0
.text:000000000000CBF0 loc_CBF0:                               ; CODE XREF: hash_delete+6F↑j
.text:000000000000CBF0                 mov     rdx, rax
.text:000000000000CBF3                 pxor    xmm0, xmm0
.text:000000000000CBF7                 shr     rdx, 1
.text:000000000000CBFA                 and     eax, 1
.text:000000000000CBFD                 or      rdx, rax
.text:000000000000CC00                 cvtsi2ss xmm0, rdx
.text:000000000000CC05                 addss   xmm0, xmm0
.text:000000000000CC09                 jmp     loc_CAFE
.text:000000000000CC09 ; ---------------------------------------------------------------------------
.text:000000000000CC0E                 align 10h
.text:000000000000CC10
.text:000000000000CC10 loc_CC10:                               ; CODE XREF: hash_delete+101↑j
.text:000000000000CC10                 subss   xmm0, cs:dword_18210
.text:000000000000CC18                 mov     rax, 8000000000000000h
.text:000000000000CC22                 cvttss2si rsi, xmm0
.text:000000000000CC27                 xor     rsi, rax
.text:000000000000CC2A                 jmp     loc_CB8C
.text:000000000000CC2A ; ---------------------------------------------------------------------------
.text:000000000000CC2F                 align 10h
.text:000000000000CC30
.text:000000000000CC30 loc_CC30:                               ; CODE XREF: hash_delete+F4↑j
.text:000000000000CC30                 mulss   xmm0, dword ptr [rdx+8]
.text:000000000000CC35                 jmp     loc_CB7A
.text:000000000000CC35 ; ---------------------------------------------------------------------------
.text:000000000000CC3A                 align 20h
.text:000000000000CC40
.text:000000000000CC40 loc_CC40:                               ; CODE XREF: hash_delete+CB↑j
.text:000000000000CC40                 mov     rcx, rax
.text:000000000000CC43                 pxor    xmm1, xmm1
.text:000000000000CC47                 shr     rcx, 1
.text:000000000000CC4A                 and     eax, 1
.text:000000000000CC4D                 or      rcx, rax
.text:000000000000CC50                 cvtsi2ss xmm1, rcx
.text:000000000000CC55                 addss   xmm1, xmm1
.text:000000000000CC59                 jmp     loc_CB5A
.text:000000000000CC59 ; ---------------------------------------------------------------------------
.text:000000000000CC5E                 align 20h
.text:000000000000CC60
.text:000000000000CC60 loc_CC60:                               ; CODE XREF: hash_delete+B5↑j
.text:000000000000CC60                 mov     rcx, rax
.text:000000000000CC63                 pxor    xmm0, xmm0
.text:000000000000CC67                 shr     rcx, 1
.text:000000000000CC6A                 and     eax, 1
.text:000000000000CC6D                 or      rcx, rax
.text:000000000000CC70                 cvtsi2ss xmm0, rcx
.text:000000000000CC75                 addss   xmm0, xmm0
.text:000000000000CC79                 jmp     loc_CB44
.text:000000000000CC7E ; ---------------------------------------------------------------------------
.text:000000000000CC7E
.text:000000000000CC7E loc_CC7E:                               ; CODE XREF: hash_delete+50↑j
.text:000000000000CC7E                 call    ___stack_chk_fail
.text:000000000000CC7E ; } // starts at CA80
.text:000000000000CC7E hash_delete     endp
.text:000000000000CC7E
.text:000000000000CC7E ; ---------------------------------------------------------------------------
.text:000000000000CC83                 align 10h
.text:000000000000CC90
.text:000000000000CC90 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC90
.text:000000000000CC90 ; Attributes: info_from_lumina
.text:000000000000CC90
.text:000000000000CC90 ; size_t __fastcall triple_hash(const void *x, size_t table_size)
.text:000000000000CC90                 public triple_hash
.text:000000000000CC90 triple_hash     proc near               ; DATA XREF: dest_info_init+10↑o
.text:000000000000CC90 ; __unwind {
.text:000000000000CC90                 push    rbp
.text:000000000000CC91                 push    rbx
.text:000000000000CC92                 mov     rbp, rdi
.text:000000000000CC95                 mov     rbx, rsi
.text:000000000000CC98                 sub     rsp, 8
.text:000000000000CC9C                 mov     rdi, [rdi]
.text:000000000000CC9F                 call    hash_pjw
.text:000000000000CCA4                 xor     rax, [rbp+8]
.text:000000000000CCA8                 xor     edx, edx
.text:000000000000CCAA                 add     rsp, 8
.text:000000000000CCAE                 div     rbx
.text:000000000000CCB1                 pop     rbx
.text:000000000000CCB2                 pop     rbp
.text:000000000000CCB3                 mov     rax, rdx
.text:000000000000CCB6                 retn
.text:000000000000CCB6 ; } // starts at CC90
.text:000000000000CCB6 triple_hash     endp
.text:000000000000CCB6
.text:000000000000CCB6 ; ---------------------------------------------------------------------------
.text:000000000000CCB7                 align 20h
.text:000000000000CCC0
.text:000000000000CCC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CCC0
.text:000000000000CCC0
.text:000000000000CCC0                 public triple_hash_no_name
.text:000000000000CCC0 triple_hash_no_name proc near           ; DATA XREF: src_info_init+10↑o
.text:000000000000CCC0 ; __unwind {
.text:000000000000CCC0                 mov     rax, [rdi+8]
.text:000000000000CCC4                 xor     edx, edx
.text:000000000000CCC6                 div     rsi
.text:000000000000CCC9                 mov     rax, rdx
.text:000000000000CCCC                 retn
.text:000000000000CCCC ; } // starts at CCC0
.text:000000000000CCCC triple_hash_no_name endp
.text:000000000000CCCC
.text:000000000000CCCC ; ---------------------------------------------------------------------------
.text:000000000000CCCD                 align 10h
.text:000000000000CCD0
.text:000000000000CCD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CCD0
.text:000000000000CCD0 ; Attributes: info_from_lumina
.text:000000000000CCD0
.text:000000000000CCD0 ; _Bool __fastcall triple_compare(const void *x, const void *y)
.text:000000000000CCD0                 public triple_compare
.text:000000000000CCD0 triple_compare  proc near               ; DATA XREF: dest_info_init+7↑o
.text:000000000000CCD0                                         ; src_info_init+7↑o
.text:000000000000CCD0 ; __unwind {
.text:000000000000CCD0                 xor     eax, eax
.text:000000000000CCD2                 mov     rdx, [rsi+8]
.text:000000000000CCD6                 cmp     [rdi+8], rdx
.text:000000000000CCDA                 jz      short loc_CCE0
.text:000000000000CCDC
.text:000000000000CCDC locret_CCDC:                            ; CODE XREF: triple_compare+18↓j
.text:000000000000CCDC                 rep retn
.text:000000000000CCDC ; ---------------------------------------------------------------------------
.text:000000000000CCDE                 align 20h
.text:000000000000CCE0
.text:000000000000CCE0 loc_CCE0:                               ; CODE XREF: triple_compare+A↑j
.text:000000000000CCE0                 mov     rcx, [rsi+10h]
.text:000000000000CCE4                 cmp     [rdi+10h], rcx
.text:000000000000CCE8                 jnz     short locret_CCDC
.text:000000000000CCEA                 sub     rsp, 8
.text:000000000000CCEE                 mov     rsi, [rsi]
.text:000000000000CCF1                 mov     rdi, [rdi]
.text:000000000000CCF4                 call    same_name
.text:000000000000CCF9                 add     rsp, 8
.text:000000000000CCFD                 retn
.text:000000000000CCFD ; } // starts at CCD0
.text:000000000000CCFD triple_compare  endp
.text:000000000000CCFD
.text:000000000000CCFD ; ---------------------------------------------------------------------------
.text:000000000000CCFE                 align 20h
.text:000000000000CD00
.text:000000000000CD00 ; =============== S U B R O U T I N E =======================================
.text:000000000000CD00
.text:000000000000CD00 ; Attributes: info_from_lumina
.text:000000000000CD00
.text:000000000000CD00 ; _Bool __fastcall triple_compare_ino_str(const void *x, const void *y)
.text:000000000000CD00                 public triple_compare_ino_str
.text:000000000000CD00 triple_compare_ino_str proc near
.text:000000000000CD00 ; __unwind {
.text:000000000000CD00                 xor     eax, eax
.text:000000000000CD02                 mov     rdx, [rsi+8]
.text:000000000000CD06                 cmp     [rdi+8], rdx
.text:000000000000CD0A                 jz      short loc_CD10
.text:000000000000CD0C
.text:000000000000CD0C locret_CD0C:                            ; CODE XREF: triple_compare_ino_str+18↓j
.text:000000000000CD0C                 rep retn
.text:000000000000CD0C ; ---------------------------------------------------------------------------
.text:000000000000CD0E                 align 10h
.text:000000000000CD10
.text:000000000000CD10 loc_CD10:                               ; CODE XREF: triple_compare_ino_str+A↑j
.text:000000000000CD10                 mov     rcx, [rsi+10h]
.text:000000000000CD14                 cmp     [rdi+10h], rcx
.text:000000000000CD18                 jnz     short locret_CD0C
.text:000000000000CD1A                 sub     rsp, 8
.text:000000000000CD1E                 mov     rsi, [rsi]      ; s2
.text:000000000000CD21                 mov     rdi, [rdi]      ; s1
.text:000000000000CD24                 call    _strcmp
.text:000000000000CD29                 test    eax, eax
.text:000000000000CD2B                 setz    al
.text:000000000000CD2E                 add     rsp, 8
.text:000000000000CD32                 retn
.text:000000000000CD32 ; } // starts at CD00
.text:000000000000CD32 triple_compare_ino_str endp
.text:000000000000CD32
.text:000000000000CD32 ; ---------------------------------------------------------------------------
.text:000000000000CD33                 align 20h
.text:000000000000CD40
.text:000000000000CD40 ; =============== S U B R O U T I N E =======================================
.text:000000000000CD40
.text:000000000000CD40
.text:000000000000CD40 ; __int64 __fastcall triple_free(void *ptr)
.text:000000000000CD40                 public triple_free
.text:000000000000CD40 triple_free     proc near               ; CODE XREF: record_file+62↑j
.text:000000000000CD40                                         ; DATA XREF: dest_info_init↑o ...
.text:000000000000CD40 ; __unwind {
.text:000000000000CD40                 push    rbx
.text:000000000000CD41                 mov     rbx, rdi
.text:000000000000CD44                 mov     rdi, [rdi]      ; ptr
.text:000000000000CD47                 call    free
.text:000000000000CD4C                 mov     rdi, rbx        ; ptr
.text:000000000000CD4F                 pop     rbx
.text:000000000000CD50                 jmp     free
.text:000000000000CD50 ; } // starts at CD40
.text:000000000000CD50 triple_free     endp
.text:000000000000CD50
.text:000000000000CD50 ; ---------------------------------------------------------------------------
.text:000000000000CD55                 align 20h
.text:000000000000CD60
.text:000000000000CD60 ; =============== S U B R O U T I N E =======================================
.text:000000000000CD60
.text:000000000000CD60
.text:000000000000CD60                 public mkancesdirs
.text:000000000000CD60 mkancesdirs     proc near               ; CODE XREF: mkancesdirs_safe_wd+47↑p
.text:000000000000CD60                                         ; mkancesdirs_safe_wd+108↑p ...
.text:000000000000CD60
.text:000000000000CD60 var_50          = qword ptr -50h
.text:000000000000CD60 var_44          = dword ptr -44h
.text:000000000000CD60 var_40          = qword ptr -40h
.text:000000000000CD60
.text:000000000000CD60 ; __unwind {
.text:000000000000CD60                 push    r15
.text:000000000000CD62                 push    r14
.text:000000000000CD64                 mov     r14, rdx
.text:000000000000CD67                 push    r13
.text:000000000000CD69                 push    r12
.text:000000000000CD6B                 mov     r13, rdi
.text:000000000000CD6E                 push    rbp
.text:000000000000CD6F                 push    rbx
.text:000000000000CD70                 mov     rbp, rdi
.text:000000000000CD73                 mov     rbx, rdi
.text:000000000000CD76                 xor     r12d, r12d
.text:000000000000CD79                 sub     rsp, 28h
.text:000000000000CD7D                 mov     [rsp+58h+var_50], rsi
.text:000000000000CD82                 mov     [rsp+58h+var_40], rcx
.text:000000000000CD87                 mov     byte ptr [rsp+58h+var_44], 0
.text:000000000000CD8C                 nop     dword ptr [rax+00h]
.text:000000000000CD90
.text:000000000000CD90 loc_CD90:                               ; CODE XREF: mkancesdirs+5A↓j
.text:000000000000CD90                                         ; mkancesdirs+5F↓j ...
.text:000000000000CD90                 add     rbx, 1
.text:000000000000CD94                 movzx   edx, byte ptr [rbx-1]
.text:000000000000CD98                 test    dl, dl
.text:000000000000CD9A                 jz      loc_CE38
.text:000000000000CDA0
.text:000000000000CDA0 loc_CDA0:                               ; CODE XREF: mkancesdirs+CB↓j
.text:000000000000CDA0                 movzx   eax, byte ptr [rbx]
.text:000000000000CDA3                 cmp     al, 2Fh ; '/'
.text:000000000000CDA5                 jz      loc_CE50
.text:000000000000CDAB                 test    al, al
.text:000000000000CDAD                 setnz   al
.text:000000000000CDB0                 cmp     dl, 2Fh ; '/'
.text:000000000000CDB3                 setz    r15b
.text:000000000000CDB7                 and     r15b, al
.text:000000000000CDBA                 jz      short loc_CD90
.text:000000000000CDBC                 test    r12, r12
.text:000000000000CDBF                 jz      short loc_CD90
.text:000000000000CDC1                 mov     rax, r12
.text:000000000000CDC4                 sub     rax, rbp
.text:000000000000CDC7                 cmp     rax, 1
.text:000000000000CDCB                 jz      loc_CE60
.text:000000000000CDD1                 cmp     rax, 2
.text:000000000000CDD5                 mov     byte ptr [r12], 0
.text:000000000000CDDA                 jz      loc_CEA5
.text:000000000000CDE0
.text:000000000000CDE0 loc_CDE0:                               ; CODE XREF: mkancesdirs+10B↓j
.text:000000000000CDE0                                         ; mkancesdirs+149↓j ...
.text:000000000000CDE0                 mov     rdx, [rsp+58h+var_40]
.text:000000000000CDE5                 mov     rsi, rbp
.text:000000000000CDE8                 mov     rdi, r13
.text:000000000000CDEB                 call    r14
.text:000000000000CDEE                 test    eax, eax
.text:000000000000CDF0                 js      short loc_CE70
.text:000000000000CDF2                 mov     byte ptr [rsp+58h+var_44], r15b
.text:000000000000CDF7                 mov     edx, 1
.text:000000000000CDFC                 xor     r15d, r15d
.text:000000000000CDFF
.text:000000000000CDFF loc_CDFF:                               ; CODE XREF: mkancesdirs+11F↓j
.text:000000000000CDFF                                         ; mkancesdirs+163↓j
.text:000000000000CDFF                 mov     rdi, [rsp+58h+var_50]
.text:000000000000CE04                 xor     ecx, ecx
.text:000000000000CE06                 mov     rsi, rbp
.text:000000000000CE09                 call    savewd_chdir
.text:000000000000CE0E                 cmp     eax, 0FFFFFFFFh
.text:000000000000CE11                 mov     ebp, eax
.text:000000000000CE13                 jz      short loc_CE88
.text:000000000000CE15                 test    eax, eax
.text:000000000000CE17                 mov     byte ptr [r12], 2Fh ; '/'
.text:000000000000CE1C                 jnz     short loc_CE88
.text:000000000000CE1E
.text:000000000000CE1E loc_CE1E:                               ; CODE XREF: mkancesdirs+104↓j
.text:000000000000CE1E                 mov     rbp, rbx
.text:000000000000CE21                 add     rbx, 1
.text:000000000000CE25                 movzx   edx, byte ptr [rbx-1]
.text:000000000000CE29                 test    dl, dl
.text:000000000000CE2B                 jnz     loc_CDA0
.text:000000000000CE31                 nop     dword ptr [rax+00000000h]
.text:000000000000CE38
.text:000000000000CE38 loc_CE38:                               ; CODE XREF: mkancesdirs+3A↑j
.text:000000000000CE38                 mov     rax, rbp
.text:000000000000CE3B                 sub     rax, r13
.text:000000000000CE3E
.text:000000000000CE3E loc_CE3E:                               ; CODE XREF: mkancesdirs+143↓j
.text:000000000000CE3E                 add     rsp, 28h
.text:000000000000CE42                 pop     rbx
.text:000000000000CE43                 pop     rbp
.text:000000000000CE44                 pop     r12
.text:000000000000CE46                 pop     r13
.text:000000000000CE48                 pop     r14
.text:000000000000CE4A                 pop     r15
.text:000000000000CE4C                 retn
.text:000000000000CE4C ; ---------------------------------------------------------------------------
.text:000000000000CE4D                 align 10h
.text:000000000000CE50
.text:000000000000CE50 loc_CE50:                               ; CODE XREF: mkancesdirs+45↑j
.text:000000000000CE50                 cmp     dl, 2Fh ; '/'
.text:000000000000CE53                 cmovnz  r12, rbx
.text:000000000000CE57                 jmp     loc_CD90
.text:000000000000CE57 ; ---------------------------------------------------------------------------
.text:000000000000CE5C                 align 20h
.text:000000000000CE60
.text:000000000000CE60 loc_CE60:                               ; CODE XREF: mkancesdirs+6B↑j
.text:000000000000CE60                 cmp     byte ptr [rbp+0], 2Eh ; '.'
.text:000000000000CE64                 jz      short loc_CE1E
.text:000000000000CE66                 mov     byte ptr [r12], 0
.text:000000000000CE6B                 jmp     loc_CDE0
.text:000000000000CE70 ; ---------------------------------------------------------------------------
.text:000000000000CE70
.text:000000000000CE70 loc_CE70:                               ; CODE XREF: mkancesdirs+90↑j
.text:000000000000CE70                 call    ___errno_location
.text:000000000000CE75                 mov     edx, [rsp+58h+var_44]
.text:000000000000CE79                 mov     r15d, [rax]
.text:000000000000CE7C                 and     edx, 1
.text:000000000000CE7F                 jmp     loc_CDFF
.text:000000000000CE7F ; ---------------------------------------------------------------------------
.text:000000000000CE84                 align 8
.text:000000000000CE88
.text:000000000000CE88 loc_CE88:                               ; CODE XREF: mkancesdirs+B3↑j
.text:000000000000CE88                                         ; mkancesdirs+BC↑j
.text:000000000000CE88                 test    r15d, r15d
.text:000000000000CE8B                 jz      short loc_CEA0
.text:000000000000CE8D                 call    ___errno_location
.text:000000000000CE92                 cmp     dword ptr [rax], 2
.text:000000000000CE95                 jnz     short loc_CEA0
.text:000000000000CE97                 mov     [rax], r15d
.text:000000000000CE9A                 nop     word ptr [rax+rax+00h]
.text:000000000000CEA0
.text:000000000000CEA0 loc_CEA0:                               ; CODE XREF: mkancesdirs+12B↑j
.text:000000000000CEA0                                         ; mkancesdirs+135↑j
.text:000000000000CEA0                 movsxd  rax, ebp
.text:000000000000CEA3                 jmp     short loc_CE3E
.text:000000000000CEA5 ; ---------------------------------------------------------------------------
.text:000000000000CEA5
.text:000000000000CEA5 loc_CEA5:                               ; CODE XREF: mkancesdirs+7A↑j
.text:000000000000CEA5                 cmp     byte ptr [rbp+0], 2Eh ; '.'
.text:000000000000CEA9                 jnz     loc_CDE0
.text:000000000000CEAF                 cmp     byte ptr [rbp+1], 2Eh ; '.'
.text:000000000000CEB3                 jnz     loc_CDE0
.text:000000000000CEB9                 xor     r15d, r15d
.text:000000000000CEBC                 mov     byte ptr [rsp+58h+var_44], 0
.text:000000000000CEC1                 xor     edx, edx
.text:000000000000CEC3                 jmp     loc_CDFF
.text:000000000000CEC3 ; } // starts at CD60
.text:000000000000CEC3 mkancesdirs     endp
.text:000000000000CEC3
.text:000000000000CEC3 ; ---------------------------------------------------------------------------
.text:000000000000CEC8                 align 10h
.text:000000000000CED0
.text:000000000000CED0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CED0
.text:000000000000CED0
.text:000000000000CED0                 public make_dir_parents
.text:000000000000CED0 make_dir_parents proc near              ; CODE XREF: process_dir+38↑p
.text:000000000000CED0
.text:000000000000CED0 path            = qword ptr -0F8h
.text:000000000000CED0 mode            = dword ptr -0F0h
.text:000000000000CED0 var_E8          = qword ptr -0E8h
.text:000000000000CED0 var_E0          = dword ptr -0E0h
.text:000000000000CED0 var_D9          = byte ptr -0D9h
.text:000000000000CED0 stat_buf        = stat ptr -0D8h
.text:000000000000CED0 var_40          = qword ptr -40h
.text:000000000000CED0 arg_0           = dword ptr  8
.text:000000000000CED0 arg_8           = dword ptr  10h
.text:000000000000CED0 arg_10          = dword ptr  18h
.text:000000000000CED0 arg_18          = dword ptr  20h
.text:000000000000CED0
.text:000000000000CED0 ; __unwind {
.text:000000000000CED0                 push    r15
.text:000000000000CED2                 push    r14
.text:000000000000CED4                 mov     r15, rcx
.text:000000000000CED7                 push    r13
.text:000000000000CED9                 push    r12
.text:000000000000CEDB                 mov     r14, rsi
.text:000000000000CEDE                 push    rbp
.text:000000000000CEDF                 push    rbx
.text:000000000000CEE0                 mov     r13, rdx
.text:000000000000CEE3                 mov     rbx, rdi
.text:000000000000CEE6                 mov     r12d, r8d
.text:000000000000CEE9                 sub     rsp, 0C8h
.text:000000000000CEF0                 mov     eax, [rsp+0F8h+arg_18]
.text:000000000000CEF7                 mov     [rsp+0F8h+var_E0], eax
.text:000000000000CEFB                 mov     rax, fs:28h
.text:000000000000CF04                 mov     [rsp+0F8h+var_40], rax
.text:000000000000CF0C                 xor     eax, eax
.text:000000000000CF0E                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:000000000000CF11                 jz      short loc_CF1C
.text:000000000000CF13                 cmp     dword ptr [rsi], 4
.text:000000000000CF16                 jz      loc_D060
.text:000000000000CF1C
.text:000000000000CF1C loc_CF1C:                               ; CODE XREF: make_dir_parents+41↑j
.text:000000000000CF1C                                         ; make_dir_parents+195↓j
.text:000000000000CF1C                 test    r13, r13
.text:000000000000CF1F                 jz      loc_D050
.text:000000000000CF25                 mov     rcx, r15
.text:000000000000CF28                 mov     rdx, r13
.text:000000000000CF2B                 mov     rsi, r14
.text:000000000000CF2E                 mov     rdi, rbx
.text:000000000000CF31                 mov     qword ptr [rsp+0F8h+mode], r9
.text:000000000000CF36                 call    mkancesdirs
.text:000000000000CF3B                 test    rax, rax
.text:000000000000CF3E                 js      loc_D220
.text:000000000000CF44                 mov     r9, qword ptr [rsp+0F8h+mode]
.text:000000000000CF49                 add     rax, rbx
.text:000000000000CF4C                 mov     [rsp+0F8h+path], rax
.text:000000000000CF50
.text:000000000000CF50 loc_CF50:                               ; CODE XREF: make_dir_parents+184↓j
.text:000000000000CF50                 cmp     [rsp+0F8h+arg_8], 0FFFFFFFFh
.text:000000000000CF58                 mov     eax, [rsp+0F8h+arg_0]
.text:000000000000CF5F                 mov     esi, r12d
.text:000000000000CF62                 setz    cl
.text:000000000000CF65                 cmp     [rsp+0F8h+arg_10], 0FFFFFFFFh
.text:000000000000CF6D                 setz    dl
.text:000000000000CF70                 and     eax, 0C00h
.text:000000000000CF75                 and     esi, 200h
.text:000000000000CF7B                 or      eax, esi
.text:000000000000CF7D                 and     cl, dl
.text:000000000000CF7F                 mov     [rsp+0F8h+var_D9], cl
.text:000000000000CF83                 jnz     loc_D0D0
.text:000000000000CF89                 mov     eax, r12d
.text:000000000000CF8C                 and     eax, 0FFFFFFC0h
.text:000000000000CF8F                 mov     [rsp+0F8h+mode], eax
.text:000000000000CF93
.text:000000000000CF93 loc_CF93:                               ; CODE XREF: make_dir_parents+26A↓j
.text:000000000000CF93                 mov     esi, [rsp+0F8h+mode] ; mode
.text:000000000000CF97                 mov     rdi, [rsp+0F8h+path] ; path
.text:000000000000CF9B                 mov     [rsp+0F8h+var_E8], r9
.text:000000000000CFA0                 call    _mkdir
.text:000000000000CFA5                 test    eax, eax
.text:000000000000CFA7                 mov     ebp, eax
.text:000000000000CFA9                 mov     r9, [rsp+0F8h+var_E8]
.text:000000000000CFAE                 jz      loc_D140
.text:000000000000CFB4
.text:000000000000CFB4 loc_CFB4:                               ; CODE XREF: make_dir_parents+219↓j
.text:000000000000CFB4                 call    ___errno_location
.text:000000000000CFB9                 cmp     byte ptr [rsp+0F8h+var_E0], 0
.text:000000000000CFBE                 mov     r15, rax
.text:000000000000CFC1                 mov     ebp, [rax]
.text:000000000000CFC3                 jz      loc_D260
.text:000000000000CFC9                 test    ebp, ebp
.text:000000000000CFCB                 jz      loc_D11C
.text:000000000000CFD1                 cmp     ebp, 2
.text:000000000000CFD4                 setnz   r12b
.text:000000000000CFD8                 test    r13, r13
.text:000000000000CFDB                 setnz   al
.text:000000000000CFDE                 and     r12b, al
.text:000000000000CFE1                 jz      loc_D06B
.text:000000000000CFE7                 mov     rsi, [rsp+0F8h+path] ; filename
.text:000000000000CFEB                 lea     rdx, [rsp+0F8h+stat_buf] ; stat_buf
.text:000000000000CFF0                 mov     edi, 1          ; ver
.text:000000000000CFF5                 call    ___xstat
.text:000000000000CFFA                 test    eax, eax
.text:000000000000CFFC                 jz      loc_D240
.text:000000000000D002                 cmp     ebp, 11h
.text:000000000000D005                 jnz     short loc_D06B
.text:000000000000D007                 mov     eax, [r15]
.text:000000000000D00A                 cmp     eax, 14h
.text:000000000000D00D                 jz      short loc_D06B
.text:000000000000D00F                 cmp     eax, 2
.text:000000000000D012                 jz      short loc_D06B
.text:000000000000D014                 mov     rdi, rbx
.text:000000000000D017                 xor     r12d, r12d
.text:000000000000D01A                 call    quote
.text:000000000000D01F                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:000000000000D026                 mov     edx, 5          ; category
.text:000000000000D02B                 xor     edi, edi        ; domainname
.text:000000000000D02D                 mov     rbx, rax
.text:000000000000D030                 call    _dcgettext
.text:000000000000D035                 mov     esi, [r15]      ; errnum
.text:000000000000D038                 mov     rdx, rax        ; format
.text:000000000000D03B                 mov     rcx, rbx
.text:000000000000D03E                 xor     edi, edi        ; status
.text:000000000000D040                 xor     eax, eax
.text:000000000000D042                 call    _error
.text:000000000000D047                 jmp     short loc_D09D
.text:000000000000D047 ; ---------------------------------------------------------------------------
.text:000000000000D049                 align 10h
.text:000000000000D050
.text:000000000000D050 loc_D050:                               ; CODE XREF: make_dir_parents+4F↑j
.text:000000000000D050                 mov     [rsp+0F8h+path], rbx
.text:000000000000D054                 jmp     loc_CF50
.text:000000000000D054 ; ---------------------------------------------------------------------------
.text:000000000000D059                 align 20h
.text:000000000000D060
.text:000000000000D060 loc_D060:                               ; CODE XREF: make_dir_parents+46↑j
.text:000000000000D060                 mov     ebp, [rsi+4]
.text:000000000000D063                 test    ebp, ebp
.text:000000000000D065                 jz      loc_CF1C
.text:000000000000D06B
.text:000000000000D06B loc_D06B:                               ; CODE XREF: make_dir_parents+111↑j
.text:000000000000D06B                                         ; make_dir_parents+135↑j ...
.text:000000000000D06B                 mov     rdi, rbx
.text:000000000000D06E                 xor     r12d, r12d
.text:000000000000D071                 call    quote
.text:000000000000D076                 lea     rsi, aCannotCreateDi ; "cannot create directory %s"
.text:000000000000D07D                 mov     rbx, rax
.text:000000000000D080                 mov     edx, 5          ; category
.text:000000000000D085                 xor     edi, edi        ; domainname
.text:000000000000D087                 call    _dcgettext
.text:000000000000D08C                 mov     rcx, rbx
.text:000000000000D08F                 mov     rdx, rax        ; format
.text:000000000000D092                 mov     esi, ebp        ; errnum
.text:000000000000D094                 xor     edi, edi        ; status
.text:000000000000D096                 xor     eax, eax
.text:000000000000D098                 call    _error
.text:000000000000D09D
.text:000000000000D09D loc_D09D:                               ; CODE XREF: make_dir_parents+177↑j
.text:000000000000D09D                                         ; make_dir_parents+252↓j ...
.text:000000000000D09D                 mov     rdi, [rsp+0F8h+var_40]
.text:000000000000D0A5                 xor     rdi, fs:28h
.text:000000000000D0AE                 mov     eax, r12d
.text:000000000000D0B1                 jnz     loc_D285
.text:000000000000D0B7                 add     rsp, 0C8h
.text:000000000000D0BE                 pop     rbx
.text:000000000000D0BF                 pop     rbp
.text:000000000000D0C0                 pop     r12
.text:000000000000D0C2                 pop     r13
.text:000000000000D0C4                 pop     r14
.text:000000000000D0C6                 pop     r15
.text:000000000000D0C8                 retn
.text:000000000000D0C8 ; ---------------------------------------------------------------------------
.text:000000000000D0C9                 align 10h
.text:000000000000D0D0
.text:000000000000D0D0 loc_D0D0:                               ; CODE XREF: make_dir_parents+B3↑j
.text:000000000000D0D0                 test    eax, eax
.text:000000000000D0D2                 jnz     short loc_D130
.text:000000000000D0D4                 mov     rdi, [rsp+0F8h+path] ; path
.text:000000000000D0D8                 mov     esi, r12d       ; mode
.text:000000000000D0DB                 mov     [rsp+0F8h+var_E8], r9
.text:000000000000D0E0                 call    _mkdir
.text:000000000000D0E5                 test    eax, eax
.text:000000000000D0E7                 mov     ebp, eax
.text:000000000000D0E9                 jnz     loc_CFB4
.text:000000000000D0EF                 mov     eax, r12d
.text:000000000000D0F2                 mov     rsi, r15
.text:000000000000D0F5                 mov     rdi, rbx
.text:000000000000D0F8                 and     eax, 1FFh
.text:000000000000D0FD                 and     eax, [rsp+0F8h+arg_0]
.text:000000000000D104                 mov     r9, [rsp+0F8h+var_E8]
.text:000000000000D109                 mov     [rsp+0F8h+mode], eax
.text:000000000000D10D                 call    r9
.text:000000000000D110                 mov     esi, [rsp+0F8h+mode]
.text:000000000000D114                 test    esi, esi
.text:000000000000D116                 jnz     loc_D28A
.text:000000000000D11C
.text:000000000000D11C loc_D11C:                               ; CODE XREF: make_dir_parents+FB↑j
.text:000000000000D11C                                         ; make_dir_parents+295↓j ...
.text:000000000000D11C                 mov     r12d, 1
.text:000000000000D122                 jmp     loc_D09D
.text:000000000000D122 ; ---------------------------------------------------------------------------
.text:000000000000D127                 align 10h
.text:000000000000D130
.text:000000000000D130 loc_D130:                               ; CODE XREF: make_dir_parents+202↑j
.text:000000000000D130                 mov     eax, r12d
.text:000000000000D133                 and     eax, 0FFFFFFEDh
.text:000000000000D136                 mov     [rsp+0F8h+mode], eax
.text:000000000000D13A                 jmp     loc_CF93
.text:000000000000D13A ; ---------------------------------------------------------------------------
.text:000000000000D13F                 align 20h
.text:000000000000D140
.text:000000000000D140 loc_D140:                               ; CODE XREF: make_dir_parents+DE↑j
.text:000000000000D140                 mov     rsi, r15
.text:000000000000D143                 mov     rdi, rbx
.text:000000000000D146                 call    r9
.text:000000000000D149                 mov     edx, 3
.text:000000000000D14E
.text:000000000000D14E loc_D14E:                               ; CODE XREF: make_dir_parents+39D↓j
.text:000000000000D14E                                         ; make_dir_parents+3C4↓j
.text:000000000000D14E                 mov     r15, [rsp+0F8h+path]
.text:000000000000D152                 lea     rcx, [rsp+0F8h+stat_buf]
.text:000000000000D157                 mov     rdi, r14
.text:000000000000D15A                 mov     rsi, r15
.text:000000000000D15D                 call    savewd_chdir
.text:000000000000D162                 cmp     eax, 0FFFFFFFFh
.text:000000000000D165                 jl      short loc_D11C
.text:000000000000D167                 test    eax, eax
.text:000000000000D169                 lea     rax, filename   ; "."
.text:000000000000D170                 mov     r9d, r12d
.text:000000000000D173                 cmovnz  rax, r15
.text:000000000000D177                 sub     rsp, 8
.text:000000000000D17B                 mov     edx, [rsp+100h+arg_0]
.text:000000000000D182                 mov     rsi, rax        ; file
.text:000000000000D185                 push    rdx             ; int
.text:000000000000D186                 mov     r8d, [rsp+108h+arg_10]
.text:000000000000D18E                 mov     ecx, [rsp+108h+arg_8]
.text:000000000000D195                 mov     edx, [rsp+108h+mode]
.text:000000000000D199                 mov     edi, dword ptr [rsp+108h+stat_buf.st_dev] ; fd
.text:000000000000D19D                 call    dirchownmod
.text:000000000000D1A2                 test    eax, eax
.text:000000000000D1A4                 pop     rdx
.text:000000000000D1A5                 pop     rcx
.text:000000000000D1A6                 jz      loc_D11C
.text:000000000000D1AC                 test    ebp, ebp
.text:000000000000D1AE                 jz      loc_D278
.text:000000000000D1B4                 cmp     ebp, 2
.text:000000000000D1B7                 jz      loc_D06B
.text:000000000000D1BD                 test    r13, r13
.text:000000000000D1C0                 jz      loc_D06B
.text:000000000000D1C6                 call    ___errno_location
.text:000000000000D1CB                 cmp     dword ptr [rax], 14h
.text:000000000000D1CE                 mov     r12, rax
.text:000000000000D1D1                 jz      loc_D06B
.text:000000000000D1D7
.text:000000000000D1D7 loc_D1D7:                               ; CODE XREF: make_dir_parents+3B0↓j
.text:000000000000D1D7                 mov     rdi, rbx
.text:000000000000D1DA                 call    quote
.text:000000000000D1DF                 cmp     [rsp+0F8h+var_D9], 0
.text:000000000000D1E4                 mov     rbx, rax
.text:000000000000D1E7                 lea     rsi, aCannotChangeOw_0 ; "cannot change owner and permissions of "...
.text:000000000000D1EE                 lea     rax, aCannotChangePe ; "cannot change permissions of %s"
.text:000000000000D1F5                 mov     edx, 5          ; category
.text:000000000000D1FA                 cmovnz  rsi, rax        ; msgid
.text:000000000000D1FE                 xor     edi, edi        ; domainname
.text:000000000000D200                 call    _dcgettext
.text:000000000000D205                 mov     esi, [r12]      ; errnum
.text:000000000000D209                 mov     rdx, rax        ; format
.text:000000000000D20C                 mov     rcx, rbx
.text:000000000000D20F                 xor     edi, edi        ; status
.text:000000000000D211                 xor     eax, eax
.text:000000000000D213                 xor     r12d, r12d
.text:000000000000D216                 call    _error
.text:000000000000D21B                 jmp     loc_D09D
.text:000000000000D220 ; ---------------------------------------------------------------------------
.text:000000000000D220
.text:000000000000D220 loc_D220:                               ; CODE XREF: make_dir_parents+6E↑j
.text:000000000000D220                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D224                 jnz     loc_D11C
.text:000000000000D22A                 call    ___errno_location
.text:000000000000D22F                 mov     ebp, [rax]
.text:000000000000D231                 jmp     loc_D06B
.text:000000000000D231 ; ---------------------------------------------------------------------------
.text:000000000000D236                 align 20h
.text:000000000000D240
.text:000000000000D240 loc_D240:                               ; CODE XREF: make_dir_parents+12C↑j
.text:000000000000D240                 mov     eax, [rsp+0F8h+stat_buf.st_mode]
.text:000000000000D244                 and     eax, 0F000h
.text:000000000000D249                 cmp     eax, 4000h
.text:000000000000D24E                 jnz     loc_D06B
.text:000000000000D254                 jmp     loc_D09D
.text:000000000000D254 ; ---------------------------------------------------------------------------
.text:000000000000D259                 align 20h
.text:000000000000D260
.text:000000000000D260 loc_D260:                               ; CODE XREF: make_dir_parents+F3↑j
.text:000000000000D260                 mov     [rsp+0F8h+mode], 0FFFFFFFFh
.text:000000000000D268                 mov     edx, 2
.text:000000000000D26D                 jmp     loc_D14E
.text:000000000000D26D ; ---------------------------------------------------------------------------
.text:000000000000D272                 align 8
.text:000000000000D278
.text:000000000000D278 loc_D278:                               ; CODE XREF: make_dir_parents+2DE↑j
.text:000000000000D278                 call    ___errno_location
.text:000000000000D27D                 mov     r12, rax
.text:000000000000D280                 jmp     loc_D1D7
.text:000000000000D285 ; ---------------------------------------------------------------------------
.text:000000000000D285
.text:000000000000D285 loc_D285:                               ; CODE XREF: make_dir_parents+1E1↑j
.text:000000000000D285                 call    ___stack_chk_fail
.text:000000000000D28A ; ---------------------------------------------------------------------------
.text:000000000000D28A
.text:000000000000D28A loc_D28A:                               ; CODE XREF: make_dir_parents+246↑j
.text:000000000000D28A                 mov     [rsp+0F8h+mode], r12d
.text:000000000000D28F                 mov     edx, 3
.text:000000000000D294                 jmp     loc_D14E
.text:000000000000D294 ; } // starts at CED0
.text:000000000000D294 make_dir_parents endp
.text:000000000000D294
.text:000000000000D294 ; ---------------------------------------------------------------------------
.text:000000000000D299                 align 20h
.text:000000000000D2A0
.text:000000000000D2A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D2A0
.text:000000000000D2A0 ; Attributes: info_from_lumina
.text:000000000000D2A0
.text:000000000000D2A0                 public mode_compile
.text:000000000000D2A0 mode_compile    proc near               ; CODE XREF: main+54A↑p
.text:000000000000D2A0 ; __unwind {
.text:000000000000D2A0                 push    rbp
.text:000000000000D2A1                 push    rbx
.text:000000000000D2A2                 mov     rbx, rdi
.text:000000000000D2A5                 sub     rsp, 8
.text:000000000000D2A9                 movsx   eax, byte ptr [rdi]
.text:000000000000D2AC                 lea     edx, [rax-30h]
.text:000000000000D2AF                 cmp     dl, 7
.text:000000000000D2B2                 jbe     loc_D368
.text:000000000000D2B8                 test    al, al
.text:000000000000D2BA                 mov     rcx, rdi
.text:000000000000D2BD                 mov     edi, 1
.text:000000000000D2C2                 jz      short loc_D2EB
.text:000000000000D2C4                 nop     dword ptr [rax+00h]
.text:000000000000D2C8
.text:000000000000D2C8 loc_D2C8:                               ; CODE XREF: mode_compile+49↓j
.text:000000000000D2C8                 mov     edx, eax
.text:000000000000D2CA                 and     edx, 0FFFFFFEFh
.text:000000000000D2CD                 cmp     dl, 2Dh ; '-'
.text:000000000000D2D0                 setz    dl
.text:000000000000D2D3                 cmp     al, 2Bh ; '+'
.text:000000000000D2D5                 setz    al
.text:000000000000D2D8                 add     rcx, 1
.text:000000000000D2DC                 or      eax, edx
.text:000000000000D2DE                 movzx   eax, al
.text:000000000000D2E1                 add     rdi, rax
.text:000000000000D2E4                 movzx   eax, byte ptr [rcx]
.text:000000000000D2E7                 test    al, al
.text:000000000000D2E9                 jnz     short loc_D2C8
.text:000000000000D2EB
.text:000000000000D2EB loc_D2EB:                               ; CODE XREF: mode_compile+22↑j
.text:000000000000D2EB                 mov     edx, 10h
.text:000000000000D2F0                 xor     ecx, ecx
.text:000000000000D2F2                 mov     rax, rdx
.text:000000000000D2F5                 mul     rdi
.text:000000000000D2F8                 jo      loc_D60F
.text:000000000000D2FE
.text:000000000000D2FE loc_D2FE:                               ; CODE XREF: mode_compile+374↓j
.text:000000000000D2FE                 test    rax, rax
.text:000000000000D301                 js      loc_D619
.text:000000000000D307                 test    rcx, rcx
.text:000000000000D30A                 jnz     loc_D619
.text:000000000000D310                 shl     rdi, 4
.text:000000000000D314                 lea     rbp, jpt_D4D4
.text:000000000000D31B                 call    xmalloc
.text:000000000000D320                 xor     esi, esi
.text:000000000000D322
.text:000000000000D322 loc_D322:                               ; CODE XREF: mode_compile+38D↓j
.text:000000000000D322                 xor     r11d, r11d
.text:000000000000D325
.text:000000000000D325 loc_D325:                               ; CODE XREF: mode_compile+2EA↓j
.text:000000000000D325                 movzx   r9d, byte ptr [rbx]
.text:000000000000D329                 cmp     r9b, 61h ; 'a'
.text:000000000000D32D                 jz      loc_D580
.text:000000000000D333                 jle     short loc_D3A0
.text:000000000000D335                 cmp     r9b, 6Fh ; 'o'
.text:000000000000D339                 jz      loc_D5B0
.text:000000000000D33F                 cmp     r9b, 75h ; 'u'
.text:000000000000D343                 jz      loc_D5A0
.text:000000000000D349                 cmp     r9b, 67h ; 'g'
.text:000000000000D34D                 jz      loc_D590
.text:000000000000D353
.text:000000000000D353 loc_D353:                               ; CODE XREF: mode_compile+110↓j
.text:000000000000D353                                         ; mode_compile+1B8↓j ...
.text:000000000000D353                 mov     rdi, rax        ; ptr
.text:000000000000D356                 call    free
.text:000000000000D35B                 xor     eax, eax
.text:000000000000D35D
.text:000000000000D35D loc_D35D:                               ; CODE XREF: mode_compile+3A4↓j
.text:000000000000D35D                 add     rsp, 8
.text:000000000000D361                 pop     rbx
.text:000000000000D362                 pop     rbp
.text:000000000000D363                 retn
.text:000000000000D363 ; ---------------------------------------------------------------------------
.text:000000000000D364                 align 8
.text:000000000000D368
.text:000000000000D368 loc_D368:                               ; CODE XREF: mode_compile+12↑j
.text:000000000000D368                 mov     rdx, rdi
.text:000000000000D36B                 xor     ebp, ebp
.text:000000000000D36D                 jmp     short loc_D37F
.text:000000000000D36D ; ---------------------------------------------------------------------------
.text:000000000000D36F                 align 10h
.text:000000000000D370
.text:000000000000D370 loc_D370:                               ; CODE XREF: mode_compile+ED↓j
.text:000000000000D370                 movsx   eax, byte ptr [rdx]
.text:000000000000D373                 lea     ecx, [rax-30h]
.text:000000000000D376                 cmp     cl, 7
.text:000000000000D379                 ja      loc_D5C0
.text:000000000000D37F
.text:000000000000D37F loc_D37F:                               ; CODE XREF: mode_compile+CD↑j
.text:000000000000D37F                 lea     ebp, [rax+rbp*8-30h]
.text:000000000000D383                 add     rdx, 1
.text:000000000000D387                 cmp     ebp, 0FFFh
.text:000000000000D38D                 jbe     short loc_D370
.text:000000000000D38F
.text:000000000000D38F loc_D38F:                               ; CODE XREF: mode_compile+322↓j
.text:000000000000D38F                 add     rsp, 8
.text:000000000000D393                 xor     eax, eax
.text:000000000000D395                 pop     rbx
.text:000000000000D396                 pop     rbp
.text:000000000000D397                 retn
.text:000000000000D397 ; ---------------------------------------------------------------------------
.text:000000000000D398                 align 20h
.text:000000000000D3A0
.text:000000000000D3A0 loc_D3A0:                               ; CODE XREF: mode_compile+93↑j
.text:000000000000D3A0                 cmp     r9b, 2Dh ; '-'
.text:000000000000D3A4                 jz      short loc_D3B2
.text:000000000000D3A6                 cmp     r9b, 3Dh ; '='
.text:000000000000D3AA                 jz      short loc_D3B2
.text:000000000000D3AC                 cmp     r9b, 2Bh ; '+'
.text:000000000000D3B0                 jnz     short loc_D353
.text:000000000000D3B2
.text:000000000000D3B2 loc_D3B2:                               ; CODE XREF: mode_compile+104↑j
.text:000000000000D3B2                                         ; mode_compile+10A↑j
.text:000000000000D3B2                 lea     rdi, [rsi+1]
.text:000000000000D3B6                 shl     rsi, 4
.text:000000000000D3BA                 add     rsi, rax
.text:000000000000D3BD                 jmp     short loc_D424
.text:000000000000D3BD ; ---------------------------------------------------------------------------
.text:000000000000D3BF                 align 20h
.text:000000000000D3C0
.text:000000000000D3C0 loc_D3C0:                               ; CODE XREF: mode_compile+195↓j
.text:000000000000D3C0                 cmp     dl, 6Fh ; 'o'
.text:000000000000D3C3                 lea     r8, [rbx+2]
.text:000000000000D3C7                 jz      loc_D560
.text:000000000000D3CD                 cmp     dl, 75h ; 'u'
.text:000000000000D3D0                 mov     r10d, 1C0h
.text:000000000000D3D6                 jnz     loc_D4B0
.text:000000000000D3DC
.text:000000000000D3DC loc_D3DC:                               ; CODE XREF: mode_compile+2C6↓j
.text:000000000000D3DC                                         ; mode_compile+2DA↓j
.text:000000000000D3DC                 mov     [rsi], r9b
.text:000000000000D3DF                 mov     byte ptr [rsi+1], 3
.text:000000000000D3E3                 movzx   r9d, byte ptr [rbx+2]
.text:000000000000D3E8                 mov     [rsi+4], r11d
.text:000000000000D3EC                 mov     rbx, r8
.text:000000000000D3EF                 mov     [rsi+8], r10d
.text:000000000000D3F3
.text:000000000000D3F3 loc_D3F3:                               ; CODE XREF: mode_compile+26D↓j
.text:000000000000D3F3                 mov     edx, r10d
.text:000000000000D3F6                 and     edx, r11d
.text:000000000000D3F9                 test    r11d, r11d
.text:000000000000D3FC                 cmovnz  r10d, edx
.text:000000000000D400
.text:000000000000D400 loc_D400:                               ; CODE XREF: mode_compile+205↓j
.text:000000000000D400                 mov     edx, r9d
.text:000000000000D403                 mov     [rsi+0Ch], r10d
.text:000000000000D407                 add     rsi, 10h
.text:000000000000D40B                 and     edx, 0FFFFFFEFh
.text:000000000000D40E                 lea     rcx, [rdi+1]
.text:000000000000D412                 cmp     dl, 2Dh ; '-'
.text:000000000000D415                 jz      short loc_D421
.text:000000000000D417                 cmp     r9b, 2Bh ; '+'
.text:000000000000D41B                 jnz     loc_D620
.text:000000000000D421
.text:000000000000D421 loc_D421:                               ; CODE XREF: mode_compile+175↑j
.text:000000000000D421                 mov     rdi, rcx
.text:000000000000D424
.text:000000000000D424 loc_D424:                               ; CODE XREF: mode_compile+11D↑j
.text:000000000000D424                 movsx   edx, byte ptr [rbx+1]
.text:000000000000D428                 lea     rcx, [rbx+1]
.text:000000000000D42C                 cmp     dl, 67h ; 'g'
.text:000000000000D42F                 jz      loc_D570
.text:000000000000D435                 jg      short loc_D3C0
.text:000000000000D437                 lea     r8d, [rdx-30h]
.text:000000000000D43B                 cmp     r8b, 7
.text:000000000000D43F                 ja      short loc_D4B0
.text:000000000000D441                 xor     r8d, r8d
.text:000000000000D444                 nop     dword ptr [rax+00h]
.text:000000000000D448
.text:000000000000D448 loc_D448:                               ; CODE XREF: mode_compile+1C9↓j
.text:000000000000D448                 lea     r8d, [rdx+r8*8-30h]
.text:000000000000D44D                 add     rcx, 1
.text:000000000000D451                 cmp     r8d, 0FFFh
.text:000000000000D458                 ja      loc_D353
.text:000000000000D45E                 movsx   edx, byte ptr [rcx]
.text:000000000000D461                 lea     r10d, [rdx-30h]
.text:000000000000D465                 cmp     r10b, 7
.text:000000000000D469                 jbe     short loc_D448
.text:000000000000D46B                 test    r11d, r11d
.text:000000000000D46E                 jnz     loc_D353
.text:000000000000D474                 test    dl, dl
.text:000000000000D476                 jz      short loc_D481
.text:000000000000D478                 cmp     dl, 2Ch ; ','
.text:000000000000D47B                 jnz     loc_D353
.text:000000000000D481
.text:000000000000D481 loc_D481:                               ; CODE XREF: mode_compile+1D6↑j
.text:000000000000D481                 mov     [rsi], r9b
.text:000000000000D484                 mov     byte ptr [rsi+1], 1
.text:000000000000D488                 mov     r9d, edx
.text:000000000000D48B                 mov     dword ptr [rsi+4], 0FFFh
.text:000000000000D492                 mov     [rsi+8], r8d
.text:000000000000D496                 mov     rbx, rcx
.text:000000000000D499                 mov     r11d, 0FFFh
.text:000000000000D49F                 mov     r10d, 0FFFh
.text:000000000000D4A5                 jmp     loc_D400
.text:000000000000D4A5 ; ---------------------------------------------------------------------------
.text:000000000000D4AA                 align 10h
.text:000000000000D4B0
.text:000000000000D4B0 loc_D4B0:                               ; CODE XREF: mode_compile+136↑j
.text:000000000000D4B0                                         ; mode_compile+19F↑j
.text:000000000000D4B0                 lea     r8d, [rdx-58h]  ; switch 33 cases
.text:000000000000D4B4                 xor     r10d, r10d
.text:000000000000D4B7                 mov     ebx, 1
.text:000000000000D4BC                 cmp     r8b, 20h
.text:000000000000D4C0                 ja      short def_D4D4  ; jumptable 00000000000CDF74 default case, cases 89-113,117,118
.text:000000000000D4C2                 nop     word ptr [rax+rax+00h]
.text:000000000000D4C8
.text:000000000000D4C8 loc_D4C8:                               ; CODE XREF: mode_compile+257↓j
.text:000000000000D4C8                 movzx   r8d, r8b
.text:000000000000D4CC                 movsxd  r8, ss:(jpt_D4D4 - 1824Ch)[rbp+r8*4]
.text:000000000000D4D1                 add     r8, rbp
.text:000000000000D4D4                 jmp     r8              ; switch jump
.text:000000000000D4D4 ; ---------------------------------------------------------------------------
.text:000000000000D4D7                 align 20h
.text:000000000000D4E0
.text:000000000000D4E0 loc_D4E0:                               ; CODE XREF: mode_compile+234↑j
.text:000000000000D4E0                                         ; DATA XREF: .rodata:jpt_D4D4↓o
.text:000000000000D4E0                 mov     ebx, 2          ; jumptable 00000000000CDF74 case 88
.text:000000000000D4E5                 nop     dword ptr [rax]
.text:000000000000D4E8
.text:000000000000D4E8 loc_D4E8:                               ; CODE XREF: mode_compile+27C↓j
.text:000000000000D4E8                                         ; mode_compile+284↓j ...
.text:000000000000D4E8                 add     rcx, 1
.text:000000000000D4EC                 movzx   edx, byte ptr [rcx]
.text:000000000000D4EF                 lea     r8d, [rdx-58h]
.text:000000000000D4F3                 cmp     r8b, 20h ; ' '
.text:000000000000D4F7                 jbe     short loc_D4C8
.text:000000000000D4F9
.text:000000000000D4F9 def_D4D4:                               ; CODE XREF: mode_compile+220↑j
.text:000000000000D4F9                                         ; mode_compile+234↑j
.text:000000000000D4F9                                         ; DATA XREF: ...
.text:000000000000D4F9                 mov     [rsi], r9b      ; jumptable 00000000000CDF74 default case, cases 89-113,117,118
.text:000000000000D4FC                 mov     [rsi+1], bl
.text:000000000000D4FF                 mov     r9d, edx
.text:000000000000D502                 mov     [rsi+4], r11d
.text:000000000000D506                 mov     [rsi+8], r10d
.text:000000000000D50A                 mov     rbx, rcx
.text:000000000000D50D                 jmp     loc_D3F3
.text:000000000000D50D ; ---------------------------------------------------------------------------
.text:000000000000D512                 align 8
.text:000000000000D518
.text:000000000000D518 loc_D518:                               ; CODE XREF: mode_compile+234↑j
.text:000000000000D518                                         ; DATA XREF: .rodata:jpt_D4D4↓o
.text:000000000000D518                 or      r10d, 49h       ; jumptable 00000000000CDF74 case 120
.text:000000000000D51C                 jmp     short loc_D4E8
.text:000000000000D51C ; ---------------------------------------------------------------------------
.text:000000000000D51E                 align 20h
.text:000000000000D520
.text:000000000000D520 loc_D520:                               ; CODE XREF: mode_compile+234↑j
.text:000000000000D520                                         ; DATA XREF: .rodata:jpt_D4D4↓o
.text:000000000000D520                 or      r10b, 92h       ; jumptable 00000000000CDF74 case 119
.text:000000000000D524                 jmp     short loc_D4E8
.text:000000000000D524 ; ---------------------------------------------------------------------------
.text:000000000000D526                 align 10h
.text:000000000000D530
.text:000000000000D530 loc_D530:                               ; CODE XREF: mode_compile+234↑j
.text:000000000000D530                                         ; DATA XREF: .rodata:jpt_D4D4↓o
.text:000000000000D530                 or      r10d, 200h      ; jumptable 00000000000CDF74 case 116
.text:000000000000D537                 jmp     short loc_D4E8
.text:000000000000D537 ; ---------------------------------------------------------------------------
.text:000000000000D539                 align 20h
.text:000000000000D540
.text:000000000000D540 loc_D540:                               ; CODE XREF: mode_compile+234↑j
.text:000000000000D540                                         ; DATA XREF: .rodata:jpt_D4D4↓o
.text:000000000000D540                 or      r10d, 0C00h     ; jumptable 00000000000CDF74 case 115
.text:000000000000D547                 jmp     short loc_D4E8
.text:000000000000D547 ; ---------------------------------------------------------------------------
.text:000000000000D549                 align 10h
.text:000000000000D550
.text:000000000000D550 loc_D550:                               ; CODE XREF: mode_compile+234↑j
.text:000000000000D550                                         ; DATA XREF: .rodata:jpt_D4D4↓o
.text:000000000000D550                 or      r10d, 124h      ; jumptable 00000000000CDF74 case 114
.text:000000000000D557                 jmp     short loc_D4E8
.text:000000000000D557 ; ---------------------------------------------------------------------------
.text:000000000000D559                 align 20h
.text:000000000000D560
.text:000000000000D560 loc_D560:                               ; CODE XREF: mode_compile+127↑j
.text:000000000000D560                 mov     r10d, 7
.text:000000000000D566                 jmp     loc_D3DC
.text:000000000000D566 ; ---------------------------------------------------------------------------
.text:000000000000D56B                 align 10h
.text:000000000000D570
.text:000000000000D570 loc_D570:                               ; CODE XREF: mode_compile+18F↑j
.text:000000000000D570                 lea     r8, [rbx+2]
.text:000000000000D574                 mov     r10d, 38h ; '8'
.text:000000000000D57A                 jmp     loc_D3DC
.text:000000000000D57A ; ---------------------------------------------------------------------------
.text:000000000000D57F                 align 20h
.text:000000000000D580
.text:000000000000D580 loc_D580:                               ; CODE XREF: mode_compile+8D↑j
.text:000000000000D580                 mov     r11d, 0FFFh
.text:000000000000D586
.text:000000000000D586 loc_D586:                               ; CODE XREF: mode_compile+2F7↓j
.text:000000000000D586                                         ; mode_compile+307↓j ...
.text:000000000000D586                 add     rbx, 1
.text:000000000000D58A                 jmp     loc_D325
.text:000000000000D58A ; ---------------------------------------------------------------------------
.text:000000000000D58F                 align 10h
.text:000000000000D590
.text:000000000000D590 loc_D590:                               ; CODE XREF: mode_compile+AD↑j
.text:000000000000D590                 or      r11d, 438h
.text:000000000000D597                 jmp     short loc_D586
.text:000000000000D597 ; ---------------------------------------------------------------------------
.text:000000000000D599                 align 20h
.text:000000000000D5A0
.text:000000000000D5A0 loc_D5A0:                               ; CODE XREF: mode_compile+A3↑j
.text:000000000000D5A0                 or      r11d, 9C0h
.text:000000000000D5A7                 jmp     short loc_D586
.text:000000000000D5A7 ; ---------------------------------------------------------------------------
.text:000000000000D5A9                 align 10h
.text:000000000000D5B0
.text:000000000000D5B0 loc_D5B0:                               ; CODE XREF: mode_compile+99↑j
.text:000000000000D5B0                 or      r11d, 207h
.text:000000000000D5B7                 jmp     short loc_D586
.text:000000000000D5B7 ; ---------------------------------------------------------------------------
.text:000000000000D5B9                 align 20h
.text:000000000000D5C0
.text:000000000000D5C0 loc_D5C0:                               ; CODE XREF: mode_compile+D9↑j
.text:000000000000D5C0                 test    al, al
.text:000000000000D5C2                 jnz     loc_D38F
.text:000000000000D5C8                 sub     rdx, rbx
.text:000000000000D5CB                 mov     ebx, ebp
.text:000000000000D5CD                 mov     eax, 0FFFh
.text:000000000000D5D2                 and     ebx, 0C00h
.text:000000000000D5D8                 mov     edi, 20h ; ' '
.text:000000000000D5DD                 or      ebx, 3FFh
.text:000000000000D5E3                 cmp     rdx, 5
.text:000000000000D5E7                 cmovge  ebx, eax
.text:000000000000D5EA                 call    xmalloc
.text:000000000000D5EF                 mov     edx, 13Dh
.text:000000000000D5F4                 mov     dword ptr [rax+4], 0FFFh
.text:000000000000D5FB                 mov     [rax+8], ebp
.text:000000000000D5FE                 mov     [rax], dx
.text:000000000000D601                 mov     [rax+0Ch], ebx
.text:000000000000D604                 mov     byte ptr [rax+11h], 0
.text:000000000000D608                 add     rsp, 8
.text:000000000000D60C                 pop     rbx
.text:000000000000D60D                 pop     rbp
.text:000000000000D60E                 retn
.text:000000000000D60F ; ---------------------------------------------------------------------------
.text:000000000000D60F
.text:000000000000D60F loc_D60F:                               ; CODE XREF: mode_compile+58↑j
.text:000000000000D60F                 mov     ecx, 1
.text:000000000000D614                 jmp     loc_D2FE
.text:000000000000D619 ; ---------------------------------------------------------------------------
.text:000000000000D619
.text:000000000000D619 loc_D619:                               ; CODE XREF: mode_compile+61↑j
.text:000000000000D619                                         ; mode_compile+6A↑j
.text:000000000000D619                 call    xalloc_die
.text:000000000000D619 ; ---------------------------------------------------------------------------
.text:000000000000D61E                 align 20h
.text:000000000000D620
.text:000000000000D620 loc_D620:                               ; CODE XREF: mode_compile+17B↑j
.text:000000000000D620                 cmp     r9b, 2Ch ; ','
.text:000000000000D624                 jnz     short loc_D632
.text:000000000000D626                 add     rbx, 1
.text:000000000000D62A                 mov     rsi, rdi
.text:000000000000D62D                 jmp     loc_D322
.text:000000000000D632 ; ---------------------------------------------------------------------------
.text:000000000000D632
.text:000000000000D632 loc_D632:                               ; CODE XREF: mode_compile+384↑j
.text:000000000000D632                 test    r9b, r9b
.text:000000000000D635                 jnz     loc_D353
.text:000000000000D63B                 shl     rdi, 4
.text:000000000000D63F                 mov     byte ptr [rax+rdi+1], 0
.text:000000000000D644                 jmp     loc_D35D
.text:000000000000D644 ; } // starts at D2A0
.text:000000000000D644 mode_compile    endp
.text:000000000000D644
.text:000000000000D644 ; ---------------------------------------------------------------------------
.text:000000000000D649                 align 10h
.text:000000000000D650
.text:000000000000D650 ; =============== S U B R O U T I N E =======================================
.text:000000000000D650
.text:000000000000D650
.text:000000000000D650 ; __int64 __fastcall mode_create_from_ref(char *filename)
.text:000000000000D650                 public mode_create_from_ref
.text:000000000000D650 mode_create_from_ref proc near
.text:000000000000D650
.text:000000000000D650 var_90          = dword ptr -90h
.text:000000000000D650 var_10          = qword ptr -10h
.text:000000000000D650
.text:000000000000D650 ; __unwind {
.text:000000000000D650                 push    rbx
.text:000000000000D651                 mov     rsi, rdi        ; filename
.text:000000000000D654                 mov     edi, 1          ; ver
.text:000000000000D659                 sub     rsp, 0A0h
.text:000000000000D660                 mov     rdx, rsp        ; stat_buf
.text:000000000000D663                 mov     rax, fs:28h
.text:000000000000D66C                 mov     [rsp+0A8h+var_10], rax
.text:000000000000D674                 xor     eax, eax
.text:000000000000D676                 call    ___xstat
.text:000000000000D67B                 test    eax, eax
.text:000000000000D67D                 jnz     short loc_D6D0
.text:000000000000D67F                 mov     ebx, [rsp+0A8h+var_90]
.text:000000000000D683                 mov     edi, 20h ; ' '
.text:000000000000D688                 call    xmalloc
.text:000000000000D68D                 mov     edx, 13Dh
.text:000000000000D692                 mov     dword ptr [rax+4], 0FFFh
.text:000000000000D699                 mov     dword ptr [rax+0Ch], 0FFFh
.text:000000000000D6A0                 mov     [rax], dx
.text:000000000000D6A3                 mov     [rax+8], ebx
.text:000000000000D6A6                 mov     byte ptr [rax+11h], 0
.text:000000000000D6AA
.text:000000000000D6AA loc_D6AA:                               ; CODE XREF: mode_create_from_ref+82↓j
.text:000000000000D6AA                 mov     rcx, [rsp+0A8h+var_10]
.text:000000000000D6B2                 xor     rcx, fs:28h
.text:000000000000D6BB                 jnz     short loc_D6D4
.text:000000000000D6BD                 add     rsp, 0A0h
.text:000000000000D6C4                 pop     rbx
.text:000000000000D6C5                 retn
.text:000000000000D6C5 ; ---------------------------------------------------------------------------
.text:000000000000D6C6                 align 10h
.text:000000000000D6D0
.text:000000000000D6D0 loc_D6D0:                               ; CODE XREF: mode_create_from_ref+2D↑j
.text:000000000000D6D0                 xor     eax, eax
.text:000000000000D6D2                 jmp     short loc_D6AA
.text:000000000000D6D4 ; ---------------------------------------------------------------------------
.text:000000000000D6D4
.text:000000000000D6D4 loc_D6D4:                               ; CODE XREF: mode_create_from_ref+6B↑j
.text:000000000000D6D4                 call    ___stack_chk_fail
.text:000000000000D6D4 ; } // starts at D650
.text:000000000000D6D4 mode_create_from_ref endp
.text:000000000000D6D4
.text:000000000000D6D4 ; ---------------------------------------------------------------------------
.text:000000000000D6D9                 align 20h
.text:000000000000D6E0
.text:000000000000D6E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D6E0
.text:000000000000D6E0
.text:000000000000D6E0                 public mode_adjust
.text:000000000000D6E0 mode_adjust     proc near               ; CODE XREF: main+567↑p
.text:000000000000D6E0                                         ; main+585↑p
.text:000000000000D6E0 ; __unwind {
.text:000000000000D6E0                 movzx   r10d, byte ptr [rcx+1]
.text:000000000000D6E5                 mov     eax, edi
.text:000000000000D6E7                 and     eax, 0FFFh
.text:000000000000D6EC                 test    r10b, r10b
.text:000000000000D6EF                 jz      loc_D840
.text:000000000000D6F5                 cmp     sil, 1
.text:000000000000D6F9                 push    r12
.text:000000000000D6FB                 push    rbp
.text:000000000000D6FC                 push    rbx
.text:000000000000D6FD                 sbb     ebx, ebx
.text:000000000000D6FF                 movzx   ebp, sil
.text:000000000000D703                 not     ebx
.text:000000000000D705                 xor     r11d, r11d
.text:000000000000D708                 and     ebx, 0C00h
.text:000000000000D70E                 jmp     short loc_D74A
.text:000000000000D710 ; ---------------------------------------------------------------------------
.text:000000000000D710
.text:000000000000D710 loc_D710:                               ; CODE XREF: mode_adjust+D4↓j
.text:000000000000D710                 mov     edi, r9d
.text:000000000000D713                 or      edi, edx
.text:000000000000D715                 not     edi
.text:000000000000D717                 and     esi, edi
.text:000000000000D719                 cmp     r12b, 2Dh ; '-'
.text:000000000000D71D                 jz      loc_D830
.text:000000000000D723                 cmp     r12b, 3Dh ; '='
.text:000000000000D727                 jz      loc_D7DB
.text:000000000000D72D
.text:000000000000D72D loc_D72D:                               ; CODE XREF: mode_adjust+EA↓j
.text:000000000000D72D                 cmp     r12b, 2Bh ; '+'
.text:000000000000D731                 jnz     short loc_D738
.text:000000000000D733                 or      r11d, esi
.text:000000000000D736                 or      eax, esi
.text:000000000000D738
.text:000000000000D738 loc_D738:                               ; CODE XREF: mode_adjust+51↑j
.text:000000000000D738                                         ; mode_adjust+157↓j
.text:000000000000D738                 add     rcx, 10h
.text:000000000000D73C                 movzx   r10d, byte ptr [rcx+1]
.text:000000000000D741                 test    r10b, r10b
.text:000000000000D744                 jz      loc_D7FC
.text:000000000000D74A
.text:000000000000D74A loc_D74A:                               ; CODE XREF: mode_adjust+2E↑j
.text:000000000000D74A                                         ; mode_adjust+116↓j
.text:000000000000D74A                 mov     r9d, [rcx+0Ch]
.text:000000000000D74E                 mov     edi, [rcx+4]
.text:000000000000D751                 mov     esi, [rcx+8]
.text:000000000000D754                 not     r9d
.text:000000000000D757                 and     r9d, ebx
.text:000000000000D75A                 cmp     r10b, 2
.text:000000000000D75E                 jz      loc_D810
.text:000000000000D764                 cmp     r10b, 3
.text:000000000000D768                 jnz     short loc_D7A8
.text:000000000000D76A                 and     esi, eax
.text:000000000000D76C                 mov     r10d, esi
.text:000000000000D76F                 and     r10d, 124h
.text:000000000000D776                 cmp     r10d, 1
.text:000000000000D77A                 sbb     r10d, r10d
.text:000000000000D77D                 not     r10d
.text:000000000000D780                 and     r10d, 124h
.text:000000000000D787                 mov     r12d, r10d
.text:000000000000D78A                 or      r12b, 92h
.text:000000000000D78E                 test    sil, 92h
.text:000000000000D792                 cmovnz  r10d, r12d
.text:000000000000D796                 mov     r12d, r10d
.text:000000000000D799                 or      r12d, 49h
.text:000000000000D79D                 test    sil, 49h
.text:000000000000D7A1                 cmovnz  r10d, r12d
.text:000000000000D7A5                 or      esi, r10d
.text:000000000000D7A8
.text:000000000000D7A8 loc_D7A8:                               ; CODE XREF: mode_adjust+88↑j
.text:000000000000D7A8                                         ; mode_adjust+145↓j
.text:000000000000D7A8                 mov     r10d, r9d
.text:000000000000D7AB                 test    edi, edi
.text:000000000000D7AD                 movzx   r12d, byte ptr [rcx]
.text:000000000000D7B1                 not     r10d
.text:000000000000D7B4                 jz      loc_D710
.text:000000000000D7BA                 and     r10d, edi
.text:000000000000D7BD                 and     esi, r10d
.text:000000000000D7C0                 cmp     r12b, 2Dh ; '-'
.text:000000000000D7C4                 jz      short loc_D830
.text:000000000000D7C6                 cmp     r12b, 3Dh ; '='
.text:000000000000D7CA                 jnz     loc_D72D
.text:000000000000D7D0                 not     edi
.text:000000000000D7D2                 or      r9d, edi
.text:000000000000D7D5                 mov     r10d, r9d
.text:000000000000D7D8                 not     r10d
.text:000000000000D7DB
.text:000000000000D7DB loc_D7DB:                               ; CODE XREF: mode_adjust+47↑j
.text:000000000000D7DB                 and     r10d, 0FFFh
.text:000000000000D7E2                 add     rcx, 10h
.text:000000000000D7E6                 and     eax, r9d
.text:000000000000D7E9                 or      r11d, r10d
.text:000000000000D7EC                 movzx   r10d, byte ptr [rcx+1]
.text:000000000000D7F1                 or      eax, esi
.text:000000000000D7F3                 test    r10b, r10b
.text:000000000000D7F6                 jnz     loc_D74A
.text:000000000000D7FC
.text:000000000000D7FC loc_D7FC:                               ; CODE XREF: mode_adjust+64↑j
.text:000000000000D7FC                 test    r8, r8
.text:000000000000D7FF                 jz      short loc_D804
.text:000000000000D801                 mov     [r8], r11d
.text:000000000000D804
.text:000000000000D804 loc_D804:                               ; CODE XREF: mode_adjust+11F↑j
.text:000000000000D804                 pop     rbx
.text:000000000000D805                 pop     rbp
.text:000000000000D806                 pop     r12
.text:000000000000D808                 retn
.text:000000000000D808 ; ---------------------------------------------------------------------------
.text:000000000000D809                 align 10h
.text:000000000000D810
.text:000000000000D810 loc_D810:                               ; CODE XREF: mode_adjust+7E↑j
.text:000000000000D810                 mov     r12d, eax
.text:000000000000D813                 mov     r10d, esi
.text:000000000000D816                 and     r12d, 49h
.text:000000000000D81A                 or      r10d, 49h
.text:000000000000D81E                 or      r12d, ebp
.text:000000000000D821                 cmovnz  esi, r10d
.text:000000000000D825                 jmp     short loc_D7A8
.text:000000000000D825 ; ---------------------------------------------------------------------------
.text:000000000000D827                 align 10h
.text:000000000000D830
.text:000000000000D830 loc_D830:                               ; CODE XREF: mode_adjust+3D↑j
.text:000000000000D830                                         ; mode_adjust+E4↑j
.text:000000000000D830                 or      r11d, esi
.text:000000000000D833                 not     esi
.text:000000000000D835                 and     eax, esi
.text:000000000000D837                 jmp     loc_D738
.text:000000000000D837 ; ---------------------------------------------------------------------------
.text:000000000000D83C                 align 20h
.text:000000000000D840
.text:000000000000D840 loc_D840:                               ; CODE XREF: mode_adjust+F↑j
.text:000000000000D840                 xor     r11d, r11d
.text:000000000000D843                 test    r8, r8
.text:000000000000D846                 jz      short locret_D84B
.text:000000000000D848                 mov     [r8], r11d
.text:000000000000D84B
.text:000000000000D84B locret_D84B:                            ; CODE XREF: mode_adjust+166↑j
.text:000000000000D84B                 rep retn
.text:000000000000D84B ; } // starts at D6E0
.text:000000000000D84B mode_adjust     endp
.text:000000000000D84B
.text:000000000000D84B ; ---------------------------------------------------------------------------
.text:000000000000D84D                 align 10h
.text:000000000000D850
.text:000000000000D850 ; =============== S U B R O U T I N E =======================================
.text:000000000000D850
.text:000000000000D850
.text:000000000000D850                 public opendirat
.text:000000000000D850 opendirat       proc near               ; CODE XREF: backupfile_internal+4BD↑p
.text:000000000000D850 ; __unwind {
.text:000000000000D850                 push    r13
.text:000000000000D852                 push    r12
.text:000000000000D854                 or      edx, 90900h
.text:000000000000D85A                 push    rbp
.text:000000000000D85B                 push    rbx
.text:000000000000D85C                 xor     eax, eax
.text:000000000000D85E                 mov     r12, rcx
.text:000000000000D861                 sub     rsp, 8
.text:000000000000D865                 call    openat_safer
.text:000000000000D86A                 test    eax, eax
.text:000000000000D86C                 js      short loc_D8C0
.text:000000000000D86E                 mov     edi, eax        ; fd
.text:000000000000D870                 mov     ebx, eax
.text:000000000000D872                 call    _fdopendir
.text:000000000000D877                 test    rax, rax
.text:000000000000D87A                 mov     rbp, rax
.text:000000000000D87D                 jz      short loc_D898
.text:000000000000D87F                 mov     [r12], ebx
.text:000000000000D883                 add     rsp, 8
.text:000000000000D887                 mov     rax, rbp
.text:000000000000D88A                 pop     rbx
.text:000000000000D88B                 pop     rbp
.text:000000000000D88C                 pop     r12
.text:000000000000D88E                 pop     r13
.text:000000000000D890                 retn
.text:000000000000D890 ; ---------------------------------------------------------------------------
.text:000000000000D891                 align 8
.text:000000000000D898
.text:000000000000D898 loc_D898:                               ; CODE XREF: opendirat+2D↑j
.text:000000000000D898                 call    ___errno_location
.text:000000000000D89D                 mov     r13d, [rax]
.text:000000000000D8A0                 mov     r12, rax
.text:000000000000D8A3                 mov     edi, ebx        ; fd
.text:000000000000D8A5                 call    _close
.text:000000000000D8AA                 mov     rax, rbp
.text:000000000000D8AD                 mov     [r12], r13d
.text:000000000000D8B1                 add     rsp, 8
.text:000000000000D8B5                 pop     rbx
.text:000000000000D8B6                 pop     rbp
.text:000000000000D8B7                 pop     r12
.text:000000000000D8B9                 pop     r13
.text:000000000000D8BB                 retn
.text:000000000000D8BB ; ---------------------------------------------------------------------------
.text:000000000000D8BC                 align 20h
.text:000000000000D8C0
.text:000000000000D8C0 loc_D8C0:                               ; CODE XREF: opendirat+1C↑j
.text:000000000000D8C0                 add     rsp, 8
.text:000000000000D8C4                 xor     ebp, ebp
.text:000000000000D8C6                 pop     rbx
.text:000000000000D8C7                 mov     rax, rbp
.text:000000000000D8CA                 pop     rbp
.text:000000000000D8CB                 pop     r12
.text:000000000000D8CD                 pop     r13
.text:000000000000D8CF                 retn
.text:000000000000D8CF ; } // starts at D850
.text:000000000000D8CF opendirat       endp
.text:000000000000D8CF
.text:000000000000D8D0
.text:000000000000D8D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D8D0
.text:000000000000D8D0
.text:000000000000D8D0                 public set_program_name
.text:000000000000D8D0 set_program_name proc near              ; CODE XREF: main+46↑p
.text:000000000000D8D0 ; __unwind {
.text:000000000000D8D0                 test    rdi, rdi
.text:000000000000D8D3                 push    rbx
.text:000000000000D8D4                 jz      short loc_D94D
.text:000000000000D8D6                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000D8DB                 mov     rbx, rdi
.text:000000000000D8DE                 call    _strrchr
.text:000000000000D8E3                 test    rax, rax
.text:000000000000D8E6                 jz      short loc_D93D
.text:000000000000D8E8                 lea     r8, [rax+1]
.text:000000000000D8EC                 mov     rdx, r8
.text:000000000000D8EF                 sub     rdx, rbx
.text:000000000000D8F2                 cmp     rdx, 6
.text:000000000000D8F6                 jle     short loc_D93D
.text:000000000000D8F8                 lea     rsi, [rax-6]
.text:000000000000D8FC                 lea     rdi, aLibs      ; "/.libs/"
.text:000000000000D903                 mov     ecx, 7
.text:000000000000D908                 repe cmpsb
.text:000000000000D90A                 setnbe  dl
.text:000000000000D90D                 sbb     dl, 0
.text:000000000000D910                 test    dl, dl
.text:000000000000D912                 jnz     short loc_D93D
.text:000000000000D914                 lea     rdi, aLt        ; "lt-"
.text:000000000000D91B                 mov     ecx, 3
.text:000000000000D920                 mov     rsi, r8
.text:000000000000D923                 mov     rbx, r8
.text:000000000000D926                 repe cmpsb
.text:000000000000D928                 setnbe  dl
.text:000000000000D92B                 sbb     dl, 0
.text:000000000000D92E                 test    dl, dl
.text:000000000000D930                 jnz     short loc_D93D
.text:000000000000D932                 lea     rbx, [rax+4]
.text:000000000000D936                 mov     cs:program_invocation_short_name@@GLIBC_2_2_5, rbx
.text:000000000000D93D
.text:000000000000D93D loc_D93D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000D93D                                         ; set_program_name+26↑j ...
.text:000000000000D93D                 mov     cs:program_name, rbx
.text:000000000000D944                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000D94B                 pop     rbx
.text:000000000000D94C                 retn
.text:000000000000D94D ; ---------------------------------------------------------------------------
.text:000000000000D94D
.text:000000000000D94D loc_D94D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000D94D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:000000000000D954                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000D95B                 mov     edx, 37h ; '7'  ; n
.text:000000000000D960                 mov     esi, 1          ; size
.text:000000000000D965                 call    _fwrite
.text:000000000000D96A                 call    _abort
.text:000000000000D96A ; } // starts at D8D0
.text:000000000000D96A set_program_name endp
.text:000000000000D96A
.text:000000000000D96A ; ---------------------------------------------------------------------------
.text:000000000000D96F                 align 10h
.text:000000000000D970
.text:000000000000D970 ; =============== S U B R O U T I N E =======================================
.text:000000000000D970
.text:000000000000D970
.text:000000000000D970                 public qcopy_acl
.text:000000000000D970 qcopy_acl       proc near               ; CODE XREF: copy_acl+A↑p
.text:000000000000D970
.text:000000000000D970 var_24          = byte ptr -24h
.text:000000000000D970 var_20          = qword ptr -20h
.text:000000000000D970
.text:000000000000D970 ; __unwind {
.text:000000000000D970                 push    r12
.text:000000000000D972                 push    rbp
.text:000000000000D973                 mov     r12d, ecx
.text:000000000000D976                 push    rbx
.text:000000000000D977                 mov     rbp, rdx
.text:000000000000D97A                 mov     edx, r8d
.text:000000000000D97D                 sub     rsp, 10h
.text:000000000000D981                 lea     rbx, [rsp+28h+var_24]
.text:000000000000D986                 mov     rax, fs:28h
.text:000000000000D98F                 mov     [rsp+28h+var_20], rax
.text:000000000000D994                 xor     eax, eax
.text:000000000000D996                 mov     rcx, rbx
.text:000000000000D999                 call    get_permissions
.text:000000000000D99E                 test    eax, eax
.text:000000000000D9A0                 jnz     short loc_D9D8
.text:000000000000D9A2                 mov     rsi, rbp
.text:000000000000D9A5                 mov     rdi, rbx
.text:000000000000D9A8                 mov     edx, r12d
.text:000000000000D9AB                 call    set_permissions
.text:000000000000D9B0                 mov     rdi, rbx
.text:000000000000D9B3                 mov     ebp, eax
.text:000000000000D9B5                 call    free_permission_context
.text:000000000000D9BA
.text:000000000000D9BA loc_D9BA:                               ; CODE XREF: qcopy_acl+6D↓j
.text:000000000000D9BA                 mov     rcx, [rsp+28h+var_20]
.text:000000000000D9BF                 xor     rcx, fs:28h
.text:000000000000D9C8                 mov     eax, ebp
.text:000000000000D9CA                 jnz     short loc_D9DF
.text:000000000000D9CC                 add     rsp, 10h
.text:000000000000D9D0                 pop     rbx
.text:000000000000D9D1                 pop     rbp
.text:000000000000D9D2                 pop     r12
.text:000000000000D9D4                 retn
.text:000000000000D9D4 ; ---------------------------------------------------------------------------
.text:000000000000D9D5                 align 8
.text:000000000000D9D8
.text:000000000000D9D8 loc_D9D8:                               ; CODE XREF: qcopy_acl+30↑j
.text:000000000000D9D8                 mov     ebp, 0FFFFFFFEh
.text:000000000000D9DD                 jmp     short loc_D9BA
.text:000000000000D9DF ; ---------------------------------------------------------------------------
.text:000000000000D9DF
.text:000000000000D9DF loc_D9DF:                               ; CODE XREF: qcopy_acl+5A↑j
.text:000000000000D9DF                 call    ___stack_chk_fail
.text:000000000000D9DF ; } // starts at D970
.text:000000000000D9DF qcopy_acl       endp
.text:000000000000D9DF
.text:000000000000D9DF ; ---------------------------------------------------------------------------
.text:000000000000D9E4                 align 10h
.text:000000000000D9F0
.text:000000000000D9F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D9F0
.text:000000000000D9F0
.text:000000000000D9F0                 public qset_acl
.text:000000000000D9F0 qset_acl        proc near               ; CODE XREF: set_owner+12D↑p
.text:000000000000D9F0                                         ; set_acl+7↑p
.text:000000000000D9F0
.text:000000000000D9F0 var_24          = dword ptr -24h
.text:000000000000D9F0 var_20          = qword ptr -20h
.text:000000000000D9F0
.text:000000000000D9F0 ; __unwind {
.text:000000000000D9F0                 push    rbp
.text:000000000000D9F1                 push    rbx
.text:000000000000D9F2                 sub     rsp, 18h
.text:000000000000D9F6                 lea     rbx, [rsp+28h+var_24]
.text:000000000000D9FB                 mov     [rsp+28h+var_24], edx
.text:000000000000D9FF                 mov     edx, esi
.text:000000000000DA01                 mov     rsi, rdi
.text:000000000000DA04                 mov     rdi, rbx
.text:000000000000DA07                 mov     rax, fs:28h
.text:000000000000DA10                 mov     [rsp+28h+var_20], rax
.text:000000000000DA15                 xor     eax, eax
.text:000000000000DA17                 call    set_permissions
.text:000000000000DA1C                 mov     rdi, rbx
.text:000000000000DA1F                 mov     ebp, eax
.text:000000000000DA21                 call    free_permission_context
.text:000000000000DA26                 mov     rcx, [rsp+28h+var_20]
.text:000000000000DA2B                 xor     rcx, fs:28h
.text:000000000000DA34                 jnz     short loc_DA3F
.text:000000000000DA36                 add     rsp, 18h
.text:000000000000DA3A                 mov     eax, ebp
.text:000000000000DA3C                 pop     rbx
.text:000000000000DA3D                 pop     rbp
.text:000000000000DA3E                 retn
.text:000000000000DA3F ; ---------------------------------------------------------------------------
.text:000000000000DA3F
.text:000000000000DA3F loc_DA3F:                               ; CODE XREF: qset_acl+44↑j
.text:000000000000DA3F                 call    ___stack_chk_fail
.text:000000000000DA3F ; } // starts at D9F0
.text:000000000000DA3F qset_acl        endp
.text:000000000000DA3F
.text:000000000000DA3F ; ---------------------------------------------------------------------------
.text:000000000000DA44                 align 10h
.text:000000000000DA50
.text:000000000000DA50 ; =============== S U B R O U T I N E =======================================
.text:000000000000DA50
.text:000000000000DA50 ; Attributes: info_from_lumina
.text:000000000000DA50
.text:000000000000DA50 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:000000000000DA50 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:000000000000DA50                                         ; quotearg_buffer_restyled+117B↓p
.text:000000000000DA50 ; __unwind {
.text:000000000000DA50                 push    rbp
.text:000000000000DA51                 push    rbx
.text:000000000000DA52                 mov     rbp, rdi
.text:000000000000DA55                 mov     ebx, esi
.text:000000000000DA57                 sub     rsp, 8
.text:000000000000DA5B                 call    locale_charset
.text:000000000000DA60                 movzx   edx, byte ptr [rax]
.text:000000000000DA63                 and     edx, 0FFFFFFDFh
.text:000000000000DA66                 cmp     dl, 55h ; 'U'
.text:000000000000DA69                 jz      short loc_DAE0
.text:000000000000DA6B                 cmp     dl, 47h ; 'G'
.text:000000000000DA6E                 jz      short loc_DA90
.text:000000000000DA70
.text:000000000000DA70 loc_DA70:                               ; CODE XREF: gettext_quote+4A↓j
.text:000000000000DA70                                         ; gettext_quote+50↓j ...
.text:000000000000DA70                 lea     rax, unk_18323
.text:000000000000DA77                 lea     rdx, asc_18325  ; "'"
.text:000000000000DA7E                 cmp     ebx, 9
.text:000000000000DA81                 cmovnz  rax, rdx
.text:000000000000DA85                 add     rsp, 8
.text:000000000000DA89                 pop     rbx
.text:000000000000DA8A                 pop     rbp
.text:000000000000DA8B                 retn
.text:000000000000DA8B ; ---------------------------------------------------------------------------
.text:000000000000DA8C                 align 10h
.text:000000000000DA90
.text:000000000000DA90 loc_DA90:                               ; CODE XREF: gettext_quote+1E↑j
.text:000000000000DA90                 movzx   edx, byte ptr [rax+1]
.text:000000000000DA94                 and     edx, 0FFFFFFDFh
.text:000000000000DA97                 cmp     dl, 42h ; 'B'
.text:000000000000DA9A                 jnz     short loc_DA70
.text:000000000000DA9C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:000000000000DAA0                 jnz     short loc_DA70
.text:000000000000DAA2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:000000000000DAA6                 jnz     short loc_DA70
.text:000000000000DAA8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000DAAC                 jnz     short loc_DA70
.text:000000000000DAAE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:000000000000DAB2                 jnz     short loc_DA70
.text:000000000000DAB4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:000000000000DAB8                 jnz     short loc_DA70
.text:000000000000DABA                 cmp     byte ptr [rax+7], 0
.text:000000000000DABE                 jnz     short loc_DA70
.text:000000000000DAC0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000DAC4                 lea     rax, unk_1831C
.text:000000000000DACB                 lea     rdx, unk_18320
.text:000000000000DAD2                 cmovnz  rax, rdx
.text:000000000000DAD6                 add     rsp, 8
.text:000000000000DADA                 pop     rbx
.text:000000000000DADB                 pop     rbp
.text:000000000000DADC                 retn
.text:000000000000DADC ; ---------------------------------------------------------------------------
.text:000000000000DADD                 align 20h
.text:000000000000DAE0
.text:000000000000DAE0 loc_DAE0:                               ; CODE XREF: gettext_quote+19↑j
.text:000000000000DAE0                 movzx   edx, byte ptr [rax+1]
.text:000000000000DAE4                 and     edx, 0FFFFFFDFh
.text:000000000000DAE7                 cmp     dl, 54h ; 'T'
.text:000000000000DAEA                 jnz     short loc_DA70
.text:000000000000DAEC                 movzx   edx, byte ptr [rax+2]
.text:000000000000DAF0                 and     edx, 0FFFFFFDFh
.text:000000000000DAF3                 cmp     dl, 46h ; 'F'
.text:000000000000DAF6                 jnz     loc_DA70
.text:000000000000DAFC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:000000000000DB00                 jnz     loc_DA70
.text:000000000000DB06                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000DB0A                 jnz     loc_DA70
.text:000000000000DB10                 cmp     byte ptr [rax+5], 0
.text:000000000000DB14                 jnz     loc_DA70
.text:000000000000DB1A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000DB1E                 lea     rax, unk_18314
.text:000000000000DB25                 lea     rdx, unk_18318
.text:000000000000DB2C                 cmovnz  rax, rdx
.text:000000000000DB30                 add     rsp, 8
.text:000000000000DB34                 pop     rbx
.text:000000000000DB35                 pop     rbp
.text:000000000000DB36                 retn
.text:000000000000DB36 ; } // starts at DA50
.text:000000000000DB36 gettext_quote   endp
.text:000000000000DB36
.text:000000000000DB36 ; ---------------------------------------------------------------------------
.text:000000000000DB37                 align 20h
.text:000000000000DB40
.text:000000000000DB40 ; =============== S U B R O U T I N E =======================================
.text:000000000000DB40
.text:000000000000DB40 ; Attributes: info_from_lumina
.text:000000000000DB40
.text:000000000000DB40 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:000000000000DB40 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:000000000000DB40                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:000000000000DB40
.text:000000000000DB40 var_E0          = dword ptr -0E0h
.text:000000000000DB40 var_DB          = byte ptr -0DBh
.text:000000000000DB40 var_DA          = byte ptr -0DAh
.text:000000000000DB40 var_D9          = byte ptr -0D9h
.text:000000000000DB40 s               = qword ptr -0D8h
.text:000000000000DB40 n               = qword ptr -0D0h
.text:000000000000DB40 var_C8          = qword ptr -0C8h
.text:000000000000DB40 ps              = qword ptr -0C0h
.text:000000000000DB40 var_B8          = qword ptr -0B8h
.text:000000000000DB40 var_B0          = qword ptr -0B0h
.text:000000000000DB40 var_A8          = qword ptr -0A8h
.text:000000000000DB40 s2              = qword ptr -0A0h
.text:000000000000DB40 var_98          = qword ptr -98h
.text:000000000000DB40 var_90          = qword ptr -90h
.text:000000000000DB40 var_88          = qword ptr -88h
.text:000000000000DB40 var_80          = qword ptr -80h
.text:000000000000DB40 var_78          = qword ptr -78h
.text:000000000000DB40 var_70          = dword ptr -70h
.text:000000000000DB40 var_6C          = byte ptr -6Ch
.text:000000000000DB40 var_6B          = byte ptr -6Bh
.text:000000000000DB40 var_6A          = byte ptr -6Ah
.text:000000000000DB40 var_69          = byte ptr -69h
.text:000000000000DB40 var_68          = qword ptr -68h
.text:000000000000DB40 var_60          = qword ptr -60h
.text:000000000000DB40 wc              = dword ptr -4Ch
.text:000000000000DB40 var_48          = qword ptr -48h
.text:000000000000DB40 var_40          = qword ptr -40h
.text:000000000000DB40 arg_0           = qword ptr  8
.text:000000000000DB40 arg_8           = qword ptr  10h
.text:000000000000DB40 arg_10          = qword ptr  18h
.text:000000000000DB40
.text:000000000000DB40 ; __unwind {
.text:000000000000DB40                 push    r15
.text:000000000000DB42                 push    r14
.text:000000000000DB44                 mov     r15d, r8d
.text:000000000000DB47                 push    r13
.text:000000000000DB49                 push    r12
.text:000000000000DB4B                 mov     r14, rdi
.text:000000000000DB4E                 push    rbp
.text:000000000000DB4F                 push    rbx
.text:000000000000DB50                 mov     ebx, r9d
.text:000000000000DB53                 mov     r13, rsi
.text:000000000000DB56                 mov     rbp, rcx
.text:000000000000DB59                 and     ebx, 2
.text:000000000000DB5C                 sub     rsp, 0B8h
.text:000000000000DB63                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000DB6B                 mov     [rsp+0E8h+s], rdx
.text:000000000000DB70                 mov     [rsp+0E8h+var_E0], r8d
.text:000000000000DB75                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000DB7A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000DB7F                 mov     rax, [rsp+0E8h+arg_8]
.text:000000000000DB87                 mov     [rsp+0E8h+var_80], rax
.text:000000000000DB8C                 mov     rax, [rsp+0E8h+arg_10]
.text:000000000000DB94                 mov     [rsp+0E8h+var_88], rax
.text:000000000000DB99                 mov     rax, fs:28h
.text:000000000000DBA2                 mov     [rsp+0E8h+var_40], rax
.text:000000000000DBAA                 xor     eax, eax
.text:000000000000DBAC                 call    ___ctype_get_mb_cur_max
.text:000000000000DBB1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:000000000000DBB5                 mov     [rsp+0E8h+var_90], rax
.text:000000000000DBBA                 ja      def_DBD1        ; jumptable 00000000000121F1 default case
.text:000000000000DBC0                 lea     rcx, jpt_DBD1
.text:000000000000DBC7                 mov     edx, r15d
.text:000000000000DBCA                 movsxd  rax, ds:(jpt_DBD1 - 18380h)[rcx+rdx*4]
.text:000000000000DBCE                 add     rax, rcx
.text:000000000000DBD1                 jmp     rax             ; switch jump
.text:000000000000DBD3 ; ---------------------------------------------------------------------------
.text:000000000000DBD3
.text:000000000000DBD3 loc_DBD3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000DBD3                                         ; quotearg_buffer_restyled+C66↓j
.text:000000000000DBD3                                         ; DATA XREF: ...
.text:000000000000DBD3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:000000000000DBD8                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DBDD                 xor     r12d, r12d
.text:000000000000DBE0                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DBE9                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000DBEE                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000DBF3
.text:000000000000DBF3 loc_DBF3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:000000000000DBF3                 lea     rax, asc_18325  ; "'"
.text:000000000000DBFA                 mov     [rsp+0E8h+n], 1
.text:000000000000DC03                 xor     r15d, r15d
.text:000000000000DC06                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000DC0E                 mov     [rsp+0E8h+s2], rax
.text:000000000000DC13
.text:000000000000DC13 loc_DC13:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:000000000000DC13                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:000000000000DC13                 xor     r11d, r11d
.text:000000000000DC16                 mov     rax, rbp
.text:000000000000DC19                 mov     r8d, r12d
.text:000000000000DC1C                 mov     rbp, r11
.text:000000000000DC1F                 mov     r11, rax
.text:000000000000DC22                 nop     word ptr [rax+rax+00h]
.text:000000000000DC28
.text:000000000000DC28 loc_DC28:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:000000000000DC28                                         ; quotearg_buffer_restyled+42C↓j
.text:000000000000DC28                 cmp     r11, rbp
.text:000000000000DC2B                 setnz   r12b
.text:000000000000DC2F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000DC33                 jnz     short loc_DC42
.text:000000000000DC35                 mov     rax, [rsp+0E8h+s]
.text:000000000000DC3A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000DC3E                 setnz   r12b
.text:000000000000DC42
.text:000000000000DC42 loc_DC42:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:000000000000DC42                 test    r12b, r12b
.text:000000000000DC45                 jz      loc_E2A0
.text:000000000000DC4B                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000DC50                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000DC55                 lea     r9, [rdi+rbp]
.text:000000000000DC59                 setnz   al
.text:000000000000DC5C                 and     al, [rsp+0E8h+var_DB]
.text:000000000000DC60                 mov     r10d, eax
.text:000000000000DC63                 jz      loc_DD10
.text:000000000000DC69                 mov     rax, [rsp+0E8h+n]
.text:000000000000DC6E                 test    rax, rax
.text:000000000000DC71                 jz      loc_E0A0
.text:000000000000DC77                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000DC7B                 lea     rbx, [rbp+rax+0]
.text:000000000000DC80                 jnz     short loc_DCB0
.text:000000000000DC82                 cmp     rax, 1
.text:000000000000DC86                 jbe     short loc_DCB0
.text:000000000000DC88                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000DC8D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:000000000000DC92                 mov     [rsp+0E8h+ps], r9
.text:000000000000DC97                 call    _strlen
.text:000000000000DC9C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000DCA2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000DCA8                 mov     r11, rax
.text:000000000000DCAB                 mov     r9, [rsp+0E8h+ps]
.text:000000000000DCB0
.text:000000000000DCB0 loc_DCB0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:000000000000DCB0                                         ; quotearg_buffer_restyled+146↑j
.text:000000000000DCB0                 cmp     rbx, r11
.text:000000000000DCB3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:000000000000DCB8                 ja      loc_E270
.text:000000000000DCBE                 mov     rdx, [rsp+0E8h+n] ; n
.text:000000000000DCC3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:000000000000DCC8                 mov     rdi, r9         ; s1
.text:000000000000DCCB                 mov     [rsp+0E8h+var_A8], r11
.text:000000000000DCD0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000DCD5                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000DCDA                 call    _memcmp
.text:000000000000DCDF                 test    eax, eax
.text:000000000000DCE1                 mov     r9, [rsp+0E8h+var_B8]
.text:000000000000DCE6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000DCEC                 mov     r11, [rsp+0E8h+var_A8]
.text:000000000000DCF1                 jnz     loc_E270
.text:000000000000DCF7                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000DCFC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:000000000000DD02                 jnz     loc_EC85
.text:000000000000DD08                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000DD10
.text:000000000000DD10 loc_DD10:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:000000000000DD10                                         ; quotearg_buffer_restyled+733↓j
.text:000000000000DD10                 movzx   ebx, byte ptr [r9]
.text:000000000000DD14                 cmp     bl, 7Eh         ; switch 127 cases
.text:000000000000DD17                 ja      def_DD2E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000DD1D                 lea     rcx, jpt_DD2E
.text:000000000000DD24                 movzx   edx, bl
.text:000000000000DD27                 movsxd  rax, ds:(jpt_DD2E - 183ACh)[rcx+rdx*4]
.text:000000000000DD2B                 add     rax, rcx
.text:000000000000DD2E                 jmp     rax             ; switch jump
.text:000000000000DD30 ; ---------------------------------------------------------------------------
.text:000000000000DD30
.text:000000000000DD30 loc_DD30:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000DD30                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000DD30                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:000000000000DD33
.text:000000000000DD33 loc_DD33:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000DD33                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000DD33                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:000000000000DD37                 setnz   al
.text:000000000000DD3A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000DD3E                 jnz     short loc_DD4C
.text:000000000000DD40                 mov     rax, [rsp+0E8h+s]
.text:000000000000DD45                 cmp     byte ptr [rax+1], 0
.text:000000000000DD49                 setnz   al
.text:000000000000DD4C
.text:000000000000DD4C loc_DD4C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000DD4C                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000DD51                 setz    dl
.text:000000000000DD54                 test    al, al
.text:000000000000DD56                 jz      loc_DFA8
.text:000000000000DD5C
.text:000000000000DD5C loc_DD5C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000DD5C                 xor     r12d, r12d
.text:000000000000DD5F                 xor     eax, eax
.text:000000000000DD61                 nop     dword ptr [rax+00000000h]
.text:000000000000DD68
.text:000000000000DD68 loc_DD68:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:000000000000DD68                                         ; quotearg_buffer_restyled+30C↓j ...
.text:000000000000DD68                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000DD6D                 jnz     loc_DE82
.text:000000000000DD73                 test    dl, dl
.text:000000000000DD75                 jnz     loc_DE82
.text:000000000000DD7B
.text:000000000000DD7B loc_DD7B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000DD7B                 mov     rsi, [rsp+0E8h+var_C8]
.text:000000000000DD80                 test    rsi, rsi
.text:000000000000DD83                 jz      short loc_DD99
.text:000000000000DD85                 mov     edx, ebx
.text:000000000000DD87                 shr     dl, 5
.text:000000000000DD8A                 movzx   edx, dl
.text:000000000000DD8D                 mov     edx, [rsi+rdx*4]
.text:000000000000DD90                 bt      edx, ebx
.text:000000000000DD93                 jb      loc_DEE3
.text:000000000000DD99
.text:000000000000DD99 loc_DD99:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:000000000000DD99                                         ; quotearg_buffer_restyled+34D↓j ...
.text:000000000000DD99                 test    r10b, r10b
.text:000000000000DD9C                 jnz     loc_DEE3
.text:000000000000DDA2                 xor     eax, 1
.text:000000000000DDA5                 add     rbp, 1
.text:000000000000DDA9                 and     eax, r8d
.text:000000000000DDAC
.text:000000000000DDAC loc_DDAC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000DDAC                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000DDAC                 test    al, al
.text:000000000000DDAE                 jz      short loc_DDD0
.text:000000000000DDB0                 cmp     r13, r15
.text:000000000000DDB3                 jbe     short loc_DDBA
.text:000000000000DDB5                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000DDBA
.text:000000000000DDBA loc_DDBA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000DDBA                 lea     rax, [r15+1]
.text:000000000000DDBE                 cmp     r13, rax
.text:000000000000DDC1                 jbe     short loc_DDC9
.text:000000000000DDC3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000DDC9
.text:000000000000DDC9 loc_DDC9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:000000000000DDC9                 add     r15, 2
.text:000000000000DDCD                 xor     r8d, r8d
.text:000000000000DDD0
.text:000000000000DDD0 loc_DDD0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:000000000000DDD0                                         ; quotearg_buffer_restyled+403↓j ...
.text:000000000000DDD0                 cmp     r15, r13
.text:000000000000DDD3                 jnb     short loc_DDD9
.text:000000000000DDD5                 mov     [r14+r15], bl
.text:000000000000DDD9
.text:000000000000DDD9 loc_DDD9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:000000000000DDD9                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000DDDE                 add     r15, 1
.text:000000000000DDE2                 mov     eax, 0
.text:000000000000DDE7                 test    r12b, r12b
.text:000000000000DDEA                 cmovz   edi, eax
.text:000000000000DDED                 mov     [rsp+0E8h+var_DA], dil
.text:000000000000DDF2                 jmp     loc_DC28
.text:000000000000DDF2 ; ---------------------------------------------------------------------------
.text:000000000000DDF7                 align 20h
.text:000000000000DE00
.text:000000000000DE00 loc_DE00:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000DE00                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000DE00                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:000000000000DE03
.text:000000000000DE03 loc_DE03:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000DE03                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000DE03                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:000000000000DE07                 cmp     eax, 2
.text:000000000000DE0A                 jz      loc_E3C8
.text:000000000000DE10                 cmp     eax, 5
.text:000000000000DE13                 jz      loc_E388
.text:000000000000DE19                 cmp     eax, 2
.text:000000000000DE1C                 mov     ebx, 3Fh ; '?'
.text:000000000000DE21                 setz    dl
.text:000000000000DE24                 xor     r12d, r12d
.text:000000000000DE27                 xor     eax, eax
.text:000000000000DE29                 jmp     loc_DD68
.text:000000000000DE29 ; ---------------------------------------------------------------------------
.text:000000000000DE2E                 align 10h
.text:000000000000DE30
.text:000000000000DE30 loc_DE30:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000DE30                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000DE30                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:000000000000DE33
.text:000000000000DE33 loc_DE33:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000DE33                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000DE33                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:000000000000DE38                 jz      loc_E340
.text:000000000000DE3E                 mov     [rsp+0E8h+var_6C], r12b
.text:000000000000DE43                 xor     edx, edx
.text:000000000000DE45                 xor     eax, eax
.text:000000000000DE47                 mov     ebx, 27h ; '''
.text:000000000000DE4C                 jmp     loc_DD68
.text:000000000000DE4C ; ---------------------------------------------------------------------------
.text:000000000000DE51                 align 8
.text:000000000000DE58
.text:000000000000DE58 loc_DE58:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000DE58                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000DE58                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000DE5D                 mov     ebx, 74h ; 't'
.text:000000000000DE62
.text:000000000000DE62 loc_DE62:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:000000000000DE62                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:000000000000DE62                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000DE67                 setz    al
.text:000000000000DE6A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000DE6E                 jnz     loc_DFBE
.text:000000000000DE74
.text:000000000000DE74 loc_DE74:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:000000000000DE74                                         ; quotearg_buffer_restyled+45A↓j ...
.text:000000000000DE74                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000DE79                 jnz     short loc_DEE0
.text:000000000000DE7B
.text:000000000000DE7B loc_DE7B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000DE7B                 mov     ebx, edx
.text:000000000000DE7D                 xor     r12d, r12d
.text:000000000000DE80                 xor     eax, eax
.text:000000000000DE82
.text:000000000000DE82 loc_DE82:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:000000000000DE82                                         ; quotearg_buffer_restyled+235↑j
.text:000000000000DE82                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000DE87                 jnz     loc_DD7B
.text:000000000000DE8D                 jmp     loc_DD99
.text:000000000000DE8D ; ---------------------------------------------------------------------------
.text:000000000000DE92                 align 8
.text:000000000000DE98
.text:000000000000DE98 loc_DE98:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000DE98                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000DE98                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000DE9D                 mov     ebx, 62h ; 'b'
.text:000000000000DEA2                 jmp     short loc_DE74
.text:000000000000DEA2 ; ---------------------------------------------------------------------------
.text:000000000000DEA4                 align 8
.text:000000000000DEA8
.text:000000000000DEA8 loc_DEA8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000DEA8                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000DEA8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000DEAD                 jz      loc_E280
.text:000000000000DEB3                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000DEB8                 jz      loc_E0D0
.text:000000000000DEBE
.text:000000000000DEBE loc_DEBE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000DEBE                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000DEC3                 jz      loc_E0D0
.text:000000000000DEC9                 cmp     [rsp+0E8h+n], 0
.text:000000000000DECF                 jnz     loc_E28B
.text:000000000000DED5                 mov     ebx, 5Ch ; '\'
.text:000000000000DEDA                 nop     word ptr [rax+rax+00h]
.text:000000000000DEE0
.text:000000000000DEE0 loc_DEE0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:000000000000DEE0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:000000000000DEE0                 xor     r12d, r12d
.text:000000000000DEE3
.text:000000000000DEE3 loc_DEE3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:000000000000DEE3                                         ; quotearg_buffer_restyled+25C↑j
.text:000000000000DEE3                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000DEE8                 setz    dl
.text:000000000000DEEB                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000DEF0                 mov     eax, edx
.text:000000000000DEF2                 jnz     loc_E748
.text:000000000000DEF8                 mov     eax, r8d
.text:000000000000DEFB                 xor     eax, 1
.text:000000000000DEFE                 and     al, dl
.text:000000000000DF00                 jz      short loc_DF31
.text:000000000000DF02                 cmp     r13, r15
.text:000000000000DF05                 jbe     short loc_DF0C
.text:000000000000DF07                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000DF0C
.text:000000000000DF0C loc_DF0C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000DF0C                 lea     rdx, [r15+1]
.text:000000000000DF10                 cmp     r13, rdx
.text:000000000000DF13                 jbe     short loc_DF1B
.text:000000000000DF15                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000DF1B
.text:000000000000DF1B loc_DF1B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000DF1B                 lea     rdx, [r15+2]
.text:000000000000DF1F                 cmp     r13, rdx
.text:000000000000DF22                 jbe     short loc_DF2A
.text:000000000000DF24                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000DF2A
.text:000000000000DF2A loc_DF2A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000DF2A                 add     r15, 3
.text:000000000000DF2E                 mov     r8d, eax
.text:000000000000DF31
.text:000000000000DF31 loc_DF31:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:000000000000DF31                 cmp     r13, r15
.text:000000000000DF34                 jbe     short loc_DF3B
.text:000000000000DF36                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000DF3B
.text:000000000000DF3B loc_DF3B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000DF3B                 add     r15, 1
.text:000000000000DF3F                 add     rbp, 1
.text:000000000000DF43                 jmp     loc_DDD0
.text:000000000000DF43 ; ---------------------------------------------------------------------------
.text:000000000000DF48                 align 10h
.text:000000000000DF50
.text:000000000000DF50 loc_DF50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000DF50                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000DF50                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:000000000000DF55                 jnz     loc_E123
.text:000000000000DF5B                 xor     edx, edx
.text:000000000000DF5D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:000000000000DF62                 jz      loc_DE7B
.text:000000000000DF68                 add     rbp, 1
.text:000000000000DF6C                 jmp     loc_DC28
.text:000000000000DF6C ; ---------------------------------------------------------------------------
.text:000000000000DF71                 align 8
.text:000000000000DF78
.text:000000000000DF78 loc_DF78:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000DF78                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000DF78                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000DF7D                 setz    dl
.text:000000000000DF80                 xor     eax, eax
.text:000000000000DF82                 jmp     loc_DD68
.text:000000000000DF82 ; ---------------------------------------------------------------------------
.text:000000000000DF87                 align 10h
.text:000000000000DF90
.text:000000000000DF90 loc_DF90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000DF90                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000DF90                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:000000000000DF95                 mov     ebx, 61h ; 'a'
.text:000000000000DF9A                 jmp     loc_DE74
.text:000000000000DF9A ; ---------------------------------------------------------------------------
.text:000000000000DF9F                 align 20h
.text:000000000000DFA0
.text:000000000000DFA0 loc_DFA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000DFA0                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000DFA0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:000000000000DFA5                 setz    dl
.text:000000000000DFA8
.text:000000000000DFA8 loc_DFA8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:000000000000DFA8                                         ; quotearg_buffer_restyled+6A3↓j
.text:000000000000DFA8                 test    rbp, rbp
.text:000000000000DFAB                 jnz     loc_DD5C
.text:000000000000DFB1
.text:000000000000DFB1 loc_DFB1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:000000000000DFB1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:000000000000DFB1                 movzx   eax, [rsp+0E8h+var_D9]
.text:000000000000DFB6                 and     al, dl
.text:000000000000DFB8                 jz      loc_DD68
.text:000000000000DFBE
.text:000000000000DFBE loc_DFBE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000DFBE                 mov     rbp, r11
.text:000000000000DFC1                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000DFC9                 jmp     loc_E6C9
.text:000000000000DFC9 ; ---------------------------------------------------------------------------
.text:000000000000DFCE                 align 10h
.text:000000000000DFD0
.text:000000000000DFD0 loc_DFD0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000DFD0                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000DFD0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:000000000000DFD5                 setz    dl
.text:000000000000DFD8                 xor     r12d, r12d
.text:000000000000DFDB                 jmp     short loc_DFB1
.text:000000000000DFDB ; ---------------------------------------------------------------------------
.text:000000000000DFDD                 align 20h
.text:000000000000DFE0
.text:000000000000DFE0 loc_DFE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000DFE0                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000DFE0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:000000000000DFE5                 mov     ebx, 20h ; ' '
.text:000000000000DFEA                 setz    dl
.text:000000000000DFED                 jmp     short loc_DFB1
.text:000000000000DFED ; ---------------------------------------------------------------------------
.text:000000000000DFEF                 align 10h
.text:000000000000DFF0
.text:000000000000DFF0 loc_DFF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000DFF0                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000DFF0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:000000000000DFF5                 mov     ebx, 72h ; 'r'
.text:000000000000DFFA                 jmp     loc_DE62
.text:000000000000DFFA ; ---------------------------------------------------------------------------
.text:000000000000DFFF                 align 20h
.text:000000000000E000
.text:000000000000E000 loc_E000:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000E000                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000E000                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:000000000000E005                 mov     ebx, 66h ; 'f'
.text:000000000000E00A                 jmp     loc_DE74
.text:000000000000E00A ; ---------------------------------------------------------------------------
.text:000000000000E00F                 align 10h
.text:000000000000E010
.text:000000000000E010 loc_E010:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000E010                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000E010                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:000000000000E015                 mov     ebx, 76h ; 'v'
.text:000000000000E01A                 jmp     loc_DE74
.text:000000000000E01A ; ---------------------------------------------------------------------------
.text:000000000000E01F                 align 20h
.text:000000000000E020
.text:000000000000E020 loc_E020:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000E020                                         ; DATA XREF: .rodata:jpt_DD2E↓o
.text:000000000000E020                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:000000000000E025                 mov     ebx, 6Eh ; 'n'
.text:000000000000E02A                 jmp     loc_DE62
.text:000000000000E02A ; ---------------------------------------------------------------------------
.text:000000000000E02F                 align 10h
.text:000000000000E030
.text:000000000000E030 def_E0BA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:000000000000E030                                         ; quotearg_buffer_restyled+57A↓j
.text:000000000000E030                                         ; DATA XREF: ...
.text:000000000000E030                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:000000000000E033                 nop     dword ptr [rax+rax+00h]
.text:000000000000E038
.text:000000000000E038 def_DD2E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:000000000000E038                                         ; quotearg_buffer_restyled+1EE↑j
.text:000000000000E038                                         ; DATA XREF: ...
.text:000000000000E038                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000E03E                 jnz     loc_E3E8
.text:000000000000E044                 mov     [rsp+0E8h+var_B0], r11
.text:000000000000E049                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000E04E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:000000000000E053                 call    ___ctype_b_loc
.text:000000000000E058                 mov     rcx, [rax]
.text:000000000000E05B                 movzx   edx, bl
.text:000000000000E05E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:000000000000E064                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000E06A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000E06F                 mov     edi, 1
.text:000000000000E074                 movzx   eax, word ptr [rcx+rdx*2]
.text:000000000000E078                 and     ax, 4000h
.text:000000000000E07C                 setnz   r12b
.text:000000000000E080                 setz    al
.text:000000000000E083                 and     al, [rsp+0E8h+var_DB]
.text:000000000000E087
.text:000000000000E087 loc_E087:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:000000000000E087                 test    al, al
.text:000000000000E089                 jnz     loc_EA21
.text:000000000000E08F                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000E094                 setz    dl
.text:000000000000E097                 jmp     loc_DD68
.text:000000000000E097 ; ---------------------------------------------------------------------------
.text:000000000000E09C                 align 20h
.text:000000000000E0A0
.text:000000000000E0A0 loc_E0A0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:000000000000E0A0                 movzx   ebx, byte ptr [r9]
.text:000000000000E0A4                 cmp     bl, 7Eh         ; switch 127 cases
.text:000000000000E0A7                 ja      short def_E0BA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:000000000000E0A9                 lea     rcx, jpt_E0BA
.text:000000000000E0B0                 movzx   edx, bl
.text:000000000000E0B3                 movsxd  rax, ds:(jpt_E0BA - 185A8h)[rcx+rdx*4]
.text:000000000000E0B7                 add     rax, rcx
.text:000000000000E0BA                 jmp     rax             ; switch jump
.text:000000000000E0BA ; ---------------------------------------------------------------------------
.text:000000000000E0BC                 align 20h
.text:000000000000E0C0
.text:000000000000E0C0 loc_E0C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000E0C0                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000E0C0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:000000000000E0C3                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000E0C8                 jnz     loc_DEBE
.text:000000000000E0CE                 xchg    ax, ax
.text:000000000000E0D0
.text:000000000000E0D0 loc_E0D0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:000000000000E0D0                                         ; quotearg_buffer_restyled+383↑j
.text:000000000000E0D0                 mov     edx, 5Ch ; '\'
.text:000000000000E0D5                 mov     ebx, 5Ch ; '\'
.text:000000000000E0DA                 jmp     loc_DE74
.text:000000000000E0DA ; ---------------------------------------------------------------------------
.text:000000000000E0DF                 align 20h
.text:000000000000E0E0
.text:000000000000E0E0 loc_E0E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000E0E0                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000E0E0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:000000000000E0E5                 xor     r10d, r10d
.text:000000000000E0E8                 mov     ebx, 66h ; 'f'
.text:000000000000E0ED                 jmp     loc_DE74
.text:000000000000E0ED ; ---------------------------------------------------------------------------
.text:000000000000E0F2                 align 8
.text:000000000000E0F8
.text:000000000000E0F8 loc_E0F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000E0F8                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000E0F8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000E0FD                 xor     r10d, r10d
.text:000000000000E100                 mov     ebx, 6Eh ; 'n'
.text:000000000000E105                 jmp     loc_DE62
.text:000000000000E105 ; ---------------------------------------------------------------------------
.text:000000000000E10A                 align 10h
.text:000000000000E110
.text:000000000000E110 loc_E110:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000E110                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000E110                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:000000000000E115                 jmp     loc_DEE0
.text:000000000000E115 ; ---------------------------------------------------------------------------
.text:000000000000E11A                 align 20h
.text:000000000000E120
.text:000000000000E120 loc_E120:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000E120                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000E120                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:000000000000E123
.text:000000000000E123 loc_E123:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:000000000000E123                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000E128                 setz    dl
.text:000000000000E12B                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000E130                 jnz     loc_ECCA
.text:000000000000E136                 mov     eax, r8d
.text:000000000000E139                 mov     rcx, r15
.text:000000000000E13C                 xor     eax, 1
.text:000000000000E13F                 and     al, dl
.text:000000000000E141                 jz      short loc_E170
.text:000000000000E143                 cmp     r13, r15
.text:000000000000E146                 jbe     short loc_E14D
.text:000000000000E148                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000E14D
.text:000000000000E14D loc_E14D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000E14D                 lea     rcx, [r15+1]
.text:000000000000E151                 cmp     r13, rcx
.text:000000000000E154                 jbe     short loc_E15C
.text:000000000000E156                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000E15C
.text:000000000000E15C loc_E15C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000E15C                 lea     rcx, [r15+2]
.text:000000000000E160                 cmp     r13, rcx
.text:000000000000E163                 ja      loc_E799
.text:000000000000E169
.text:000000000000E169 loc_E169:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:000000000000E169                 lea     rcx, [r15+3]
.text:000000000000E16D                 mov     r8d, eax
.text:000000000000E170
.text:000000000000E170 loc_E170:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:000000000000E170                 cmp     r13, rcx
.text:000000000000E173                 jbe     short loc_E17A
.text:000000000000E175                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000E17A
.text:000000000000E17A loc_E17A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000E17A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000E17F                 lea     r15, [rcx+1]
.text:000000000000E183                 jz      loc_E789
.text:000000000000E189                 lea     rax, [rbp+1]
.text:000000000000E18D                 cmp     rax, r11
.text:000000000000E190                 jnb     short loc_E1AB
.text:000000000000E192                 mov     rax, [rsp+0E8h+s]
.text:000000000000E197                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000E19C                 mov     byte ptr [rsp+0E8h+ps], al
.text:000000000000E1A0                 sub     eax, 30h ; '0'
.text:000000000000E1A3                 cmp     al, 9
.text:000000000000E1A5                 jbe     loc_E9D9
.text:000000000000E1AB
.text:000000000000E1AB loc_E1AB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000E1AB                 mov     eax, r12d
.text:000000000000E1AE                 mov     ebx, 30h ; '0'
.text:000000000000E1B3                 xor     r12d, r12d
.text:000000000000E1B6                 jmp     loc_DD68
.text:000000000000E1B6 ; ---------------------------------------------------------------------------
.text:000000000000E1BB                 align 20h
.text:000000000000E1C0
.text:000000000000E1C0 loc_E1C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000E1C0                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000E1C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:000000000000E1C5                 mov     r12d, r10d
.text:000000000000E1C8                 setz    dl
.text:000000000000E1CB                 xor     r10d, r10d
.text:000000000000E1CE                 xor     eax, eax
.text:000000000000E1D0                 jmp     loc_DD68
.text:000000000000E1D0 ; ---------------------------------------------------------------------------
.text:000000000000E1D5                 align 8
.text:000000000000E1D8
.text:000000000000E1D8 loc_E1D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000E1D8                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000E1D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000E1DD                 setz    dl
.text:000000000000E1E0                 xor     r10d, r10d
.text:000000000000E1E3                 jmp     loc_DFA8
.text:000000000000E1E3 ; ---------------------------------------------------------------------------
.text:000000000000E1E8                 align 10h
.text:000000000000E1F0
.text:000000000000E1F0 loc_E1F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000E1F0                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000E1F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:000000000000E1F5                 setz    dl
.text:000000000000E1F8                 xor     r10d, r10d
.text:000000000000E1FB                 xor     r12d, r12d
.text:000000000000E1FE                 jmp     loc_DFB1
.text:000000000000E1FE ; ---------------------------------------------------------------------------
.text:000000000000E203                 align 8
.text:000000000000E208
.text:000000000000E208 loc_E208:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000E208                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000E208                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000E20D                 mov     r12d, r10d
.text:000000000000E210                 mov     ebx, 20h ; ' '
.text:000000000000E215                 setz    dl
.text:000000000000E218                 xor     r10d, r10d
.text:000000000000E21B                 jmp     loc_DFB1
.text:000000000000E220 ; ---------------------------------------------------------------------------
.text:000000000000E220
.text:000000000000E220 loc_E220:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000E220                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000E220                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:000000000000E225                 xor     r10d, r10d
.text:000000000000E228                 mov     ebx, 72h ; 'r'
.text:000000000000E22D                 jmp     loc_DE62
.text:000000000000E22D ; ---------------------------------------------------------------------------
.text:000000000000E232                 align 8
.text:000000000000E238
.text:000000000000E238 loc_E238:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000E238                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000E238                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000E23D                 jmp     loc_DEE0
.text:000000000000E23D ; ---------------------------------------------------------------------------
.text:000000000000E242                 align 8
.text:000000000000E248
.text:000000000000E248 loc_E248:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000E248                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000E248                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000E24D                 xor     r10d, r10d
.text:000000000000E250                 mov     ebx, 74h ; 't'
.text:000000000000E255                 jmp     loc_DE62
.text:000000000000E255 ; ---------------------------------------------------------------------------
.text:000000000000E25A                 align 20h
.text:000000000000E260
.text:000000000000E260 loc_E260:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000E260                                         ; DATA XREF: .rodata:jpt_E0BA↓o
.text:000000000000E260                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:000000000000E265                 jmp     loc_DEE0
.text:000000000000E265 ; ---------------------------------------------------------------------------
.text:000000000000E26A                 align 10h
.text:000000000000E270
.text:000000000000E270 loc_E270:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:000000000000E270                                         ; quotearg_buffer_restyled+1B1↑j
.text:000000000000E270                 xor     r10d, r10d
.text:000000000000E273                 jmp     loc_DD10
.text:000000000000E273 ; ---------------------------------------------------------------------------
.text:000000000000E278                 align 20h
.text:000000000000E280
.text:000000000000E280 loc_E280:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:000000000000E280                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000E285                 jnz     loc_EBF0
.text:000000000000E28B
.text:000000000000E28B loc_E28B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000E28B                 add     rbp, 1
.text:000000000000E28F                 mov     eax, r8d
.text:000000000000E292                 xor     r12d, r12d
.text:000000000000E295                 mov     ebx, 5Ch ; '\'
.text:000000000000E29A                 jmp     loc_DDAC
.text:000000000000E29A ; ---------------------------------------------------------------------------
.text:000000000000E29F                 align 20h
.text:000000000000E2A0
.text:000000000000E2A0 loc_E2A0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:000000000000E2A0                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000E2A5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000E2AA                 mov     r12d, r8d
.text:000000000000E2AD                 mov     rbp, r11
.text:000000000000E2B0                 setz    dl
.text:000000000000E2B3                 mov     eax, ebx
.text:000000000000E2B5                 test    r15, r15
.text:000000000000E2B8                 setz    cl
.text:000000000000E2BB                 and     eax, edx
.text:000000000000E2BD                 and     al, cl
.text:000000000000E2BF                 jnz     loc_ED26
.text:000000000000E2C5                 mov     eax, ebx
.text:000000000000E2C7                 xor     eax, 1
.text:000000000000E2CA                 and     dl, al
.text:000000000000E2CC                 jz      loc_EC3C
.text:000000000000E2D2                 cmp     [rsp+0E8h+var_6C], 0
.text:000000000000E2D7                 jz      loc_EC3A
.text:000000000000E2DD                 cmp     [rsp+0E8h+var_DA], 0
.text:000000000000E2E2                 jnz     loc_ECDD
.text:000000000000E2E8                 test    r13, r13
.text:000000000000E2EB                 setz    al
.text:000000000000E2EE                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000E2F4                 setnz   dl
.text:000000000000E2F7                 and     al, dl
.text:000000000000E2F9                 jz      loc_ED1C
.text:000000000000E2FF                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000E304
.text:000000000000E304 loc_E304:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:000000000000E304                 lea     rbx, asc_18325  ; "'"
.text:000000000000E30B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000E30F                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000E317                 mov     r15d, 1
.text:000000000000E31D                 mov     [rsp+0E8h+n], 1
.text:000000000000E326                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000E32B                 mov     [rsp+0E8h+s2], rbx
.text:000000000000E330                 mov     [rsp+0E8h+var_6C], al
.text:000000000000E334                 jmp     loc_DC13
.text:000000000000E334 ; ---------------------------------------------------------------------------
.text:000000000000E339                 align 20h
.text:000000000000E340
.text:000000000000E340 loc_E340:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:000000000000E340                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000E345                 jnz     loc_EBF0
.text:000000000000E34B                 test    r13, r13
.text:000000000000E34E                 jz      loc_E750
.text:000000000000E354                 xor     edx, edx
.text:000000000000E356                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000E35C                 jnz     loc_E750
.text:000000000000E362
.text:000000000000E362 loc_E362:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:000000000000E362                                         ; quotearg_buffer_restyled+122A↓j
.text:000000000000E362                 mov     [rsp+0E8h+var_98], r13
.text:000000000000E367                 add     r15, 3
.text:000000000000E36B                 xor     eax, eax
.text:000000000000E36D                 mov     [rsp+0E8h+var_6C], r12b
.text:000000000000E372                 xor     r8d, r8d
.text:000000000000E375                 mov     r13, rdx
.text:000000000000E378                 mov     ebx, 27h ; '''
.text:000000000000E37D                 jmp     loc_DD99
.text:000000000000E37D ; ---------------------------------------------------------------------------
.text:000000000000E382                 align 8
.text:000000000000E388
.text:000000000000E388 loc_E388:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:000000000000E388                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000E38D                 jz      short loc_E3B0
.text:000000000000E38F                 lea     rcx, [rbp+2]
.text:000000000000E393                 cmp     rcx, r11
.text:000000000000E396                 jnb     short loc_E3B0
.text:000000000000E398                 mov     rax, [rsp+0E8h+s]
.text:000000000000E39D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:000000000000E3A2                 jz      loc_EB32
.text:000000000000E3A8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000E3B0
.text:000000000000E3B0 loc_E3B0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:000000000000E3B0                                         ; quotearg_buffer_restyled+856↑j ...
.text:000000000000E3B0                 xor     edx, edx
.text:000000000000E3B2                 xor     r12d, r12d
.text:000000000000E3B5                 xor     eax, eax
.text:000000000000E3B7                 mov     ebx, 3Fh ; '?'
.text:000000000000E3BC                 jmp     loc_DD68
.text:000000000000E3BC ; ---------------------------------------------------------------------------
.text:000000000000E3C1                 align 8
.text:000000000000E3C8
.text:000000000000E3C8 loc_E3C8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:000000000000E3C8                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000E3CD                 jnz     loc_EBF0
.text:000000000000E3D3                 xor     r12d, r12d
.text:000000000000E3D6                 xor     eax, eax
.text:000000000000E3D8                 mov     ebx, 3Fh ; '?'
.text:000000000000E3DD                 jmp     loc_DD99
.text:000000000000E3DD ; ---------------------------------------------------------------------------
.text:000000000000E3E2                 align 8
.text:000000000000E3E8
.text:000000000000E3E8 loc_E3E8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:000000000000E3E8                 lea     rax, [rsp+0E8h+var_48]
.text:000000000000E3F0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000E3F4                 mov     [rsp+0E8h+var_48], 0
.text:000000000000E400                 mov     [rsp+0E8h+ps], rax
.text:000000000000E405                 jnz     short loc_E434
.text:000000000000E407                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000E40C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:000000000000E411                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:000000000000E416                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000E41B                 call    _strlen
.text:000000000000E420                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:000000000000E426                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000E42C                 mov     r11, rax
.text:000000000000E42F                 mov     r9, [rsp+0E8h+var_B8]
.text:000000000000E434
.text:000000000000E434 loc_E434:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:000000000000E434                 lea     rax, [rsp+0E8h+wc]
.text:000000000000E43C                 xor     ecx, ecx
.text:000000000000E43E                 mov     [rsp+0E8h+var_6A], bl
.text:000000000000E442                 mov     [rsp+0E8h+var_6B], r8b
.text:000000000000E447                 mov     rbx, rcx
.text:000000000000E44A                 mov     [rsp+0E8h+var_60], r9
.text:000000000000E452                 mov     [rsp+0E8h+var_B0], rax
.text:000000000000E457                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000E45C                 mov     [rsp+0E8h+var_68], r15
.text:000000000000E464                 mov     [rsp+0E8h+var_A8], r14
.text:000000000000E469                 mov     [rsp+0E8h+var_78], r13
.text:000000000000E46E                 mov     [rsp+0E8h+var_B8], r11
.text:000000000000E473
.text:000000000000E473 loc_E473:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:000000000000E473                 mov     rax, [rsp+0E8h+s]
.text:000000000000E478                 lea     r14, [rbp+rbx+0]
.text:000000000000E47D                 mov     rdx, [rsp+0E8h+var_B8]
.text:000000000000E482                 mov     rcx, [rsp+0E8h+ps]
.text:000000000000E487                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000E48C                 lea     r13, [rax+r14]
.text:000000000000E490                 sub     rdx, r14
.text:000000000000E493                 mov     rsi, r13
.text:000000000000E496                 call    rpl_mbrtowc
.text:000000000000E49B                 test    rax, rax
.text:000000000000E49E                 mov     r15, rax
.text:000000000000E4A1                 jz      short loc_E4F1
.text:000000000000E4A3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000E4A7                 jz      loc_EAC5
.text:000000000000E4AD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000E4B1                 jz      loc_EA51
.text:000000000000E4B7                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000E4BC                 setz    al
.text:000000000000E4BF                 and     al, [rsp+0E8h+var_D9]
.text:000000000000E4C3                 jnz     loc_E660
.text:000000000000E4C9
.text:000000000000E4C9 loc_E4C9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:000000000000E4C9                                         ; quotearg_buffer_restyled+B47↓j
.text:000000000000E4C9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:000000000000E4D0                 call    _iswprint
.text:000000000000E4D5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000E4DA                 test    eax, eax
.text:000000000000E4DC                 mov     eax, 0
.text:000000000000E4E1                 cmovz   r12d, eax
.text:000000000000E4E5                 add     rbx, r15
.text:000000000000E4E8                 call    _mbsinit
.text:000000000000E4ED                 test    eax, eax
.text:000000000000E4EF                 jz      short loc_E473
.text:000000000000E4F1
.text:000000000000E4F1 loc_E4F1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:000000000000E4F1                 mov     edx, r12d
.text:000000000000E4F4                 mov     rdi, rbx
.text:000000000000E4F7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000E4FD                 xor     edx, 1
.text:000000000000E500                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000E505                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000E50B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000E50F                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000E517                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000E51C                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000E521                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000E526
.text:000000000000E526 loc_E526:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:000000000000E526                                         ; quotearg_buffer_restyled+FB8↓j
.text:000000000000E526                 cmp     rdi, 1
.text:000000000000E52A                 jbe     loc_EB2B
.text:000000000000E530
.text:000000000000E530 loc_E530:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:000000000000E530                 mov     rcx, rdi
.text:000000000000E533                 xor     esi, esi
.text:000000000000E535                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000E53B                 add     rcx, rbp
.text:000000000000E53E                 mov     rdi, [rsp+0E8h+s]
.text:000000000000E543                 jmp     loc_E5FE
.text:000000000000E543 ; ---------------------------------------------------------------------------
.text:000000000000E548                 align 10h
.text:000000000000E550
.text:000000000000E550 loc_E550:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:000000000000E550                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000E555                 setz    al
.text:000000000000E558                 test    r9b, r9b
.text:000000000000E55B                 jnz     loc_EA10
.text:000000000000E561                 mov     esi, r8d
.text:000000000000E564                 xor     esi, 1
.text:000000000000E567                 and     al, sil
.text:000000000000E56A                 jz      short loc_E59B
.text:000000000000E56C                 cmp     r13, r15
.text:000000000000E56F                 jbe     short loc_E576
.text:000000000000E571                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000E576
.text:000000000000E576 loc_E576:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:000000000000E576                 lea     rsi, [r15+1]
.text:000000000000E57A                 cmp     r13, rsi
.text:000000000000E57D                 jbe     short loc_E585
.text:000000000000E57F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000E585
.text:000000000000E585 loc_E585:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:000000000000E585                 lea     rsi, [r15+2]
.text:000000000000E589                 cmp     r13, rsi
.text:000000000000E58C                 jbe     short loc_E594
.text:000000000000E58E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000E594
.text:000000000000E594 loc_E594:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:000000000000E594                 add     r15, 3
.text:000000000000E598                 mov     r8d, eax
.text:000000000000E59B
.text:000000000000E59B loc_E59B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000E59B                 cmp     r13, r15
.text:000000000000E59E                 jbe     short loc_E5A5
.text:000000000000E5A0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000E5A5
.text:000000000000E5A5 loc_E5A5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:000000000000E5A5                 lea     rax, [r15+1]
.text:000000000000E5A9                 cmp     r13, rax
.text:000000000000E5AC                 jbe     short loc_E5BB
.text:000000000000E5AE                 mov     eax, ebx
.text:000000000000E5B0                 shr     al, 6
.text:000000000000E5B3                 add     eax, 30h ; '0'
.text:000000000000E5B6                 mov     [r14+r15+1], al
.text:000000000000E5BB
.text:000000000000E5BB loc_E5BB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000E5BB                 lea     rax, [r15+2]
.text:000000000000E5BF                 cmp     r13, rax
.text:000000000000E5C2                 jbe     short loc_E5D4
.text:000000000000E5C4                 mov     eax, ebx
.text:000000000000E5C6                 shr     al, 3
.text:000000000000E5C9                 and     eax, 7
.text:000000000000E5CC                 add     eax, 30h ; '0'
.text:000000000000E5CF                 mov     [r14+r15+2], al
.text:000000000000E5D4
.text:000000000000E5D4 loc_E5D4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:000000000000E5D4                 and     ebx, 7
.text:000000000000E5D7                 add     rbp, 1
.text:000000000000E5DB                 add     r15, 3
.text:000000000000E5DF                 add     ebx, 30h ; '0'
.text:000000000000E5E2                 cmp     rbp, rcx
.text:000000000000E5E5                 jnb     loc_DDD0
.text:000000000000E5EB                 mov     esi, edx
.text:000000000000E5ED
.text:000000000000E5ED loc_E5ED:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000E5ED                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000E5ED                 cmp     r13, r15
.text:000000000000E5F0                 jbe     short loc_E5F6
.text:000000000000E5F2                 mov     [r14+r15], bl
.text:000000000000E5F6
.text:000000000000E5F6 loc_E5F6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:000000000000E5F6                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000E5FA                 add     r15, 1
.text:000000000000E5FE
.text:000000000000E5FE loc_E5FE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000E5FE                 test    dl, dl
.text:000000000000E600                 jnz     loc_E550
.text:000000000000E606                 mov     eax, esi
.text:000000000000E608                 xor     eax, 1
.text:000000000000E60B                 and     eax, r8d
.text:000000000000E60E                 test    r10b, r10b
.text:000000000000E611                 jz      short loc_E621
.text:000000000000E613                 cmp     r13, r15
.text:000000000000E616                 jbe     short loc_E61D
.text:000000000000E618                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000E61D
.text:000000000000E61D loc_E61D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000E61D                 add     r15, 1
.text:000000000000E621
.text:000000000000E621 loc_E621:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:000000000000E621                 add     rbp, 1
.text:000000000000E625                 cmp     rbp, rcx
.text:000000000000E628                 jnb     loc_DDAC
.text:000000000000E62E                 test    al, al
.text:000000000000E630                 jz      loc_EA2E
.text:000000000000E636                 cmp     r13, r15
.text:000000000000E639                 jbe     short loc_E640
.text:000000000000E63B                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000E640
.text:000000000000E640 loc_E640:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:000000000000E640                 lea     rax, [r15+1]
.text:000000000000E644                 cmp     r13, rax
.text:000000000000E647                 jbe     short loc_E64F
.text:000000000000E649                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000E64F
.text:000000000000E64F loc_E64F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000E64F                 add     r15, 2
.text:000000000000E653                 xor     r10d, r10d
.text:000000000000E656                 xor     r8d, r8d
.text:000000000000E659                 jmp     short loc_E5ED
.text:000000000000E659 ; ---------------------------------------------------------------------------
.text:000000000000E65B                 align 20h
.text:000000000000E660
.text:000000000000E660 loc_E660:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:000000000000E660                 cmp     r15, 1
.text:000000000000E664                 jz      loc_E4C9
.text:000000000000E66A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000E66F                 lea     rcx, [rdi+r15]
.text:000000000000E673                 lea     rdx, [rdi+r14+1]
.text:000000000000E678                 lea     r8, [rcx+r14]
.text:000000000000E67C                 jmp     short loc_E68D
.text:000000000000E67C ; ---------------------------------------------------------------------------
.text:000000000000E67E                 align 20h
.text:000000000000E680
.text:000000000000E680 loc_E680:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:000000000000E680                                         ; quotearg_buffer_restyled+B70↓j
.text:000000000000E680                 add     rdx, 1
.text:000000000000E684                 cmp     r8, rdx
.text:000000000000E687                 jz      loc_E4C9
.text:000000000000E68D
.text:000000000000E68D loc_E68D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000E68D                 movzx   ecx, byte ptr [rdx]
.text:000000000000E690                 sub     ecx, 5Bh ; '['
.text:000000000000E693                 cmp     cl, 21h ; '!'
.text:000000000000E696                 ja      short loc_E680
.text:000000000000E698                 mov     esi, 1
.text:000000000000E69D                 shl     rsi, cl
.text:000000000000E6A0                 mov     rcx, rsi
.text:000000000000E6A3                 mov     rsi, 20000002Bh
.text:000000000000E6AD                 test    rcx, rsi
.text:000000000000E6B0                 jz      short loc_E680
.text:000000000000E6B2                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000E6B7                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000E6BC                 mov     rbp, [rsp+0E8h+var_B8]
.text:000000000000E6C1                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000E6C9
.text:000000000000E6C9 loc_E6C9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:000000000000E6C9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:000000000000E6C9                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000E6CE                 jz      short loc_E6E0
.text:000000000000E6D0                 test    al, al
.text:000000000000E6D2                 mov     eax, 4
.text:000000000000E6D7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000E6DC                 mov     [rsp+0E8h+var_E0], eax
.text:000000000000E6E0
.text:000000000000E6E0 loc_E6E0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:000000000000E6E0                                         ; quotearg_buffer_restyled+1205↓j
.text:000000000000E6E0                 sub     rsp, 8
.text:000000000000E6E4                 mov     rcx, rbp
.text:000000000000E6E7                 mov     rsi, r13
.text:000000000000E6EA                 push    [rsp+0F0h+var_88]
.text:000000000000E6EE                 push    [rsp+0F8h+var_80]
.text:000000000000E6F2                 mov     rdi, r14
.text:000000000000E6F5                 push    0
.text:000000000000E6F7                 mov     r9d, [rsp+108h+var_70]
.text:000000000000E6FF                 mov     r8d, [rsp+108h+var_E0]
.text:000000000000E704                 mov     rdx, [rsp+108h+s]
.text:000000000000E709                 and     r9d, 0FFFFFFFDh
.text:000000000000E70D                 call    quotearg_buffer_restyled
.text:000000000000E712                 add     rsp, 20h
.text:000000000000E716                 mov     r15, rax
.text:000000000000E719
.text:000000000000E719 loc_E719:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:000000000000E719                                         ; quotearg_buffer_restyled+1140↓j ...
.text:000000000000E719                 mov     rbx, [rsp+0E8h+var_40]
.text:000000000000E721                 xor     rbx, fs:28h
.text:000000000000E72A                 mov     rax, r15
.text:000000000000E72D                 jnz     loc_ED33
.text:000000000000E733                 add     rsp, 0B8h
.text:000000000000E73A                 pop     rbx
.text:000000000000E73B                 pop     rbp
.text:000000000000E73C                 pop     r12
.text:000000000000E73E                 pop     r13
.text:000000000000E740                 pop     r14
.text:000000000000E742                 pop     r15
.text:000000000000E744                 retn
.text:000000000000E744 ; ---------------------------------------------------------------------------
.text:000000000000E745                 align 8
.text:000000000000E748
.text:000000000000E748 loc_E748:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:000000000000E748                 mov     rbp, r11
.text:000000000000E74B                 jmp     loc_E6C9
.text:000000000000E750 ; ---------------------------------------------------------------------------
.text:000000000000E750
.text:000000000000E750 loc_E750:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:000000000000E750                                         ; quotearg_buffer_restyled+81C↑j
.text:000000000000E750                 cmp     r13, r15
.text:000000000000E753                 jbe     short loc_E75A
.text:000000000000E755                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000E75A
.text:000000000000E75A loc_E75A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000E75A                 lea     rax, [r15+1]
.text:000000000000E75E                 cmp     r13, rax
.text:000000000000E761                 jbe     short loc_E769
.text:000000000000E763                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:000000000000E769
.text:000000000000E769 loc_E769:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:000000000000E769                 lea     rax, [r15+2]
.text:000000000000E76D                 cmp     r13, rax
.text:000000000000E770                 jbe     loc_ED62
.text:000000000000E776                 mov     rdx, r13
.text:000000000000E779                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000E77F                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000E784                 jmp     loc_E362
.text:000000000000E789 ; ---------------------------------------------------------------------------
.text:000000000000E789
.text:000000000000E789 loc_E789:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:000000000000E789                 mov     eax, r12d
.text:000000000000E78C                 mov     ebx, 30h ; '0'
.text:000000000000E791                 xor     r12d, r12d
.text:000000000000E794                 jmp     loc_DD99
.text:000000000000E799 ; ---------------------------------------------------------------------------
.text:000000000000E799
.text:000000000000E799 loc_E799:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:000000000000E799                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000E79F                 jmp     loc_E169
.text:000000000000E7A4 ; ---------------------------------------------------------------------------
.text:000000000000E7A4
.text:000000000000E7A4 loc_E7A4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000E7A4                                         ; DATA XREF: .rodata:jpt_DBD1↓o
.text:000000000000E7A4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:000000000000E7A6                 jnz     loc_DBD3        ; jumptable 00000000000121F1 case 1
.text:000000000000E7AC                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000E7B1
.text:000000000000E7B1 loc_E7B1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:000000000000E7B1                 test    r13, r13
.text:000000000000E7B4                 jnz     loc_ED4A
.text:000000000000E7BA                 lea     rax, asc_18325  ; "'"
.text:000000000000E7C1                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E7CA                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000E7CF                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000E7D4                 xor     r12d, r12d
.text:000000000000E7D7                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000E7DC                 mov     [rsp+0E8h+n], 1
.text:000000000000E7E5                 mov     [rsp+0E8h+s2], rax
.text:000000000000E7EA                 mov     r15d, 1
.text:000000000000E7F0                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000E7F8                 jmp     loc_DC13
.text:000000000000E7F8 ; ---------------------------------------------------------------------------
.text:000000000000E7FD                 align 20h
.text:000000000000E800
.text:000000000000E800 loc_E800:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000E800                                         ; DATA XREF: .rodata:jpt_DBD1↓o
.text:000000000000E800                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:000000000000E802                 jnz     loc_EBFD
.text:000000000000E808                 test    r13, r13
.text:000000000000E80B                 jz      loc_EA36
.text:000000000000E811                 mov     byte ptr [r14], 22h ; '"'
.text:000000000000E815                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000E81A                 xor     r12d, r12d
.text:000000000000E81D                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000E822                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E82B
.text:000000000000E82B loc_E82B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000E82B                 lea     rax, unk_18323
.text:000000000000E832                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000E837                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000E83C                 mov     [rsp+0E8h+n], 1
.text:000000000000E845                 mov     r15d, 1
.text:000000000000E84B                 mov     [rsp+0E8h+s2], rax
.text:000000000000E850                 jmp     loc_DC13
.text:000000000000E855 ; ---------------------------------------------------------------------------
.text:000000000000E855
.text:000000000000E855 loc_E855:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000E855                                         ; DATA XREF: .rodata:jpt_DBD1↓o
.text:000000000000E855                 lea     rax, unk_18323  ; jumptable 00000000000121F1 case 6
.text:000000000000E85C                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000E861                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000E866                 xor     r12d, r12d
.text:000000000000E869                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E872                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000E877                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000E87C                 mov     [rsp+0E8h+n], 1
.text:000000000000E885                 xor     r15d, r15d
.text:000000000000E888                 mov     [rsp+0E8h+s2], rax
.text:000000000000E88D                 mov     [rsp+0E8h+var_E0], 5
.text:000000000000E895                 jmp     loc_DC13
.text:000000000000E89A ; ---------------------------------------------------------------------------
.text:000000000000E89A
.text:000000000000E89A loc_E89A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000E89A                                         ; DATA XREF: .rodata:jpt_DBD1↓o
.text:000000000000E89A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000E89F                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000E8A4                 xor     r12d, r12d
.text:000000000000E8A7                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E8B0                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000E8B5                 xor     r15d, r15d
.text:000000000000E8B8                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000E8BD                 mov     [rsp+0E8h+n], 0
.text:000000000000E8C6                 mov     [rsp+0E8h+s2], 0
.text:000000000000E8CF                 jmp     loc_DC13
.text:000000000000E8D4 ; ---------------------------------------------------------------------------
.text:000000000000E8D4
.text:000000000000E8D4 loc_E8D4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000E8D4                                         ; DATA XREF: .rodata:jpt_DBD1↓o
.text:000000000000E8D4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:000000000000E8D9                 jz      short loc_E931
.text:000000000000E8DB                 lea     rsi, asc_18327  ; "`"
.text:000000000000E8E2                 xor     edi, edi        ; domainname
.text:000000000000E8E4                 mov     edx, 5          ; category
.text:000000000000E8E9                 call    _dcgettext
.text:000000000000E8EE                 mov     rcx, rax
.text:000000000000E8F1                 mov     [rsp+0E8h+var_80], rax
.text:000000000000E8F6                 lea     rax, asc_18327  ; "`"
.text:000000000000E8FD                 cmp     rcx, rax
.text:000000000000E900                 jz      loc_EC9E
.text:000000000000E906
.text:000000000000E906 loc_E906:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:000000000000E906                 lea     rsi, asc_18325  ; "'"
.text:000000000000E90D                 xor     edi, edi        ; domainname
.text:000000000000E90F                 mov     edx, 5          ; category
.text:000000000000E914                 call    _dcgettext
.text:000000000000E919                 mov     rcx, rax
.text:000000000000E91C                 mov     [rsp+0E8h+var_88], rax
.text:000000000000E921                 lea     rax, asc_18325  ; "'"
.text:000000000000E928                 cmp     rcx, rax
.text:000000000000E92B                 jz      loc_ECB4
.text:000000000000E931
.text:000000000000E931 loc_E931:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:000000000000E931                                         ; quotearg_buffer_restyled+1185↓j
.text:000000000000E931                 xor     r15d, r15d
.text:000000000000E934                 test    ebx, ebx
.text:000000000000E936                 jz      loc_EAFD
.text:000000000000E93C
.text:000000000000E93C loc_E93C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000E93C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000E93C                 test    ebx, ebx
.text:000000000000E93E                 mov     rbx, [rsp+0E8h+var_88]
.text:000000000000E943                 setnz   [rsp+0E8h+var_D9]
.text:000000000000E948                 xor     r12d, r12d
.text:000000000000E94B                 mov     rdi, rbx        ; s
.text:000000000000E94E                 call    _strlen
.text:000000000000E953                 mov     [rsp+0E8h+s2], rbx
.text:000000000000E958                 mov     [rsp+0E8h+n], rax
.text:000000000000E95D                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000E962                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000E967                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E970                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000E975                 jmp     loc_DC13
.text:000000000000E97A ; ---------------------------------------------------------------------------
.text:000000000000E97A
.text:000000000000E97A loc_E97A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000E97A                                         ; DATA XREF: .rodata:jpt_DBD1↓o
.text:000000000000E97A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000E97F                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000E984                 xor     r12d, r12d
.text:000000000000E987                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E990                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000E995                 xor     r15d, r15d
.text:000000000000E998                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000E99D                 mov     [rsp+0E8h+n], 0
.text:000000000000E9A6                 mov     [rsp+0E8h+s2], 0
.text:000000000000E9AF                 jmp     loc_DC13
.text:000000000000E9B4 ; ---------------------------------------------------------------------------
.text:000000000000E9B4
.text:000000000000E9B4 loc_E9B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000E9B4                                         ; DATA XREF: .rodata:jpt_DBD1↓o
.text:000000000000E9B4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:000000000000E9B9                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000E9BE                 xor     r12d, r12d
.text:000000000000E9C1                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E9CA                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000E9CF                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000E9D4                 jmp     loc_DBF3
.text:000000000000E9D9 ; ---------------------------------------------------------------------------
.text:000000000000E9D9
.text:000000000000E9D9 loc_E9D9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:000000000000E9D9                 cmp     r13, r15
.text:000000000000E9DC                 jbe     short loc_E9E3
.text:000000000000E9DE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:000000000000E9E3
.text:000000000000E9E3 loc_E9E3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:000000000000E9E3                 lea     rax, [rcx+2]
.text:000000000000E9E7                 cmp     r13, rax
.text:000000000000E9EA                 jbe     short loc_E9F2
.text:000000000000E9EC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:000000000000E9F2
.text:000000000000E9F2 loc_E9F2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:000000000000E9F2                 mov     eax, r12d
.text:000000000000E9F5                 lea     r15, [rcx+3]
.text:000000000000E9F9                 xor     r12d, r12d
.text:000000000000E9FC                 mov     ebx, 30h ; '0'
.text:000000000000EA01                 jmp     loc_DD68
.text:000000000000EA01 ; ---------------------------------------------------------------------------
.text:000000000000EA06                 align 10h
.text:000000000000EA10
.text:000000000000EA10 loc_EA10:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:000000000000EA10                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000EA15                 mov     rbp, r11
.text:000000000000EA18                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000EA1C                 jmp     loc_E6C9
.text:000000000000EA21 ; ---------------------------------------------------------------------------
.text:000000000000EA21
.text:000000000000EA21 loc_EA21:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:000000000000EA21                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000EA26                 xor     r12d, r12d
.text:000000000000EA29                 jmp     loc_E530
.text:000000000000EA2E ; ---------------------------------------------------------------------------
.text:000000000000EA2E
.text:000000000000EA2E loc_EA2E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000EA2E                 xor     r10d, r10d
.text:000000000000EA31                 jmp     loc_E5ED
.text:000000000000EA36 ; ---------------------------------------------------------------------------
.text:000000000000EA36
.text:000000000000EA36 loc_EA36:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:000000000000EA36                 mov     [rsp+0E8h+var_98], 0
.text:000000000000EA3F                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000EA44                 xor     r12d, r12d
.text:000000000000EA47                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000EA4C                 jmp     loc_E82B
.text:000000000000EA51 ; ---------------------------------------------------------------------------
.text:000000000000EA51
.text:000000000000EA51 loc_EA51:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:000000000000EA51                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000EA56                 mov     rsi, r14
.text:000000000000EA59                 mov     rcx, r13
.text:000000000000EA5C                 mov     rax, rbx
.text:000000000000EA5F                 mov     rdi, rbx
.text:000000000000EA62                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000EA68                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000EA6D                 mov     r9, [rsp+0E8h+var_60]
.text:000000000000EA75                 cmp     rsi, r11
.text:000000000000EA78                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000EA7E                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000EA86                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000EA8B                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000EA90                 jnb     short loc_EAB8
.text:000000000000EA92                 cmp     byte ptr [rcx], 0
.text:000000000000EA95                 jnz     short loc_EAA7
.text:000000000000EA97                 jmp     short loc_EAB8
.text:000000000000EA97 ; ---------------------------------------------------------------------------
.text:000000000000EA99                 align 20h
.text:000000000000EAA0
.text:000000000000EAA0 loc_EAA0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:000000000000EAA0                 cmp     byte ptr [r9+rax], 0
.text:000000000000EAA5                 jz      short loc_EAB5
.text:000000000000EAA7
.text:000000000000EAA7 loc_EAA7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:000000000000EAA7                 add     rax, 1
.text:000000000000EAAB                 lea     rdx, [rbp+rax+0]
.text:000000000000EAB0                 cmp     r11, rdx
.text:000000000000EAB3                 ja      short loc_EAA0
.text:000000000000EAB5
.text:000000000000EAB5 loc_EAB5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:000000000000EAB5                 mov     rdi, rax
.text:000000000000EAB8
.text:000000000000EAB8 loc_EAB8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:000000000000EAB8                                         ; quotearg_buffer_restyled+F57↑j
.text:000000000000EAB8                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000EABD                 xor     r12d, r12d
.text:000000000000EAC0                 jmp     loc_E526
.text:000000000000EAC5 ; ---------------------------------------------------------------------------
.text:000000000000EAC5
.text:000000000000EAC5 loc_EAC5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:000000000000EAC5                 mov     rdi, rbx
.text:000000000000EAC8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000EACE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000EAD3                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000EAD9                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000EAE1                 xor     r12d, r12d
.text:000000000000EAE4                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000EAE9                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000EAEE                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000EAF3                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000EAF8                 jmp     loc_E526
.text:000000000000EAFD ; ---------------------------------------------------------------------------
.text:000000000000EAFD
.text:000000000000EAFD loc_EAFD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000EAFD                 mov     rdx, [rsp+0E8h+var_80]
.text:000000000000EB02                 movzx   eax, byte ptr [rdx]
.text:000000000000EB05                 test    al, al
.text:000000000000EB07                 jz      loc_E93C
.text:000000000000EB0D                 nop     dword ptr [rax]
.text:000000000000EB10
.text:000000000000EB10 loc_EB10:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:000000000000EB10                 cmp     r13, r15
.text:000000000000EB13                 jbe     short loc_EB19
.text:000000000000EB15                 mov     [r14+r15], al
.text:000000000000EB19
.text:000000000000EB19 loc_EB19:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:000000000000EB19                 add     r15, 1
.text:000000000000EB1D                 movzx   eax, byte ptr [rdx+r15]
.text:000000000000EB22                 test    al, al
.text:000000000000EB24                 jnz     short loc_EB10
.text:000000000000EB26                 jmp     loc_E93C
.text:000000000000EB2B ; ---------------------------------------------------------------------------
.text:000000000000EB2B
.text:000000000000EB2B loc_EB2B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000EB2B                 mov     eax, edx
.text:000000000000EB2D                 jmp     loc_E087
.text:000000000000EB32 ; ---------------------------------------------------------------------------
.text:000000000000EB32
.text:000000000000EB32 loc_EB32:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:000000000000EB32                 movzx   ebx, byte ptr [rax+rcx]
.text:000000000000EB36                 cmp     bl, 3Eh ; '>'
.text:000000000000EB39                 ja      loc_E3B0
.text:000000000000EB3F                 mov     rax, 7000A38200000000h
.text:000000000000EB49                 bt      rax, rbx
.text:000000000000EB4D                 jnb     loc_E3B0
.text:000000000000EB53                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000EB58                 jnz     loc_ED42
.text:000000000000EB5E                 cmp     r13, r15
.text:000000000000EB61                 jbe     short loc_EB68
.text:000000000000EB63                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:000000000000EB68
.text:000000000000EB68 loc_EB68:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:000000000000EB68                 lea     rax, [r15+1]
.text:000000000000EB6C                 cmp     r13, rax
.text:000000000000EB6F                 jbe     short loc_EB77
.text:000000000000EB71                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:000000000000EB77
.text:000000000000EB77 loc_EB77:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:000000000000EB77                 lea     rax, [r15+2]
.text:000000000000EB7B                 cmp     r13, rax
.text:000000000000EB7E                 jbe     short loc_EB86
.text:000000000000EB80                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:000000000000EB86
.text:000000000000EB86 loc_EB86:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:000000000000EB86                 lea     rax, [r15+3]
.text:000000000000EB8A                 cmp     r13, rax
.text:000000000000EB8D                 jbe     short loc_EB95
.text:000000000000EB8F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:000000000000EB95
.text:000000000000EB95 loc_EB95:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:000000000000EB95                 add     r15, 4
.text:000000000000EB99                 xor     edx, edx
.text:000000000000EB9B                 xor     r12d, r12d
.text:000000000000EB9E                 xor     eax, eax
.text:000000000000EBA0                 mov     rbp, rcx
.text:000000000000EBA3                 jmp     loc_DD68
.text:000000000000EBA8 ; ---------------------------------------------------------------------------
.text:000000000000EBA8
.text:000000000000EBA8 loc_EBA8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000EBA8                                         ; DATA XREF: .rodata:jpt_DBD1↓o
.text:000000000000EBA8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000EBAA                 jz      loc_ED38
.text:000000000000EBB0                 lea     rax, asc_18325  ; "'"
.text:000000000000EBB7                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000EBBC                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000EBC1                 xor     r12d, r12d
.text:000000000000EBC4                 mov     [rsp+0E8h+var_98], 0
.text:000000000000EBCD                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000EBD2                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000EBD7                 mov     [rsp+0E8h+n], 1
.text:000000000000EBE0                 xor     r15d, r15d
.text:000000000000EBE3                 mov     [rsp+0E8h+s2], rax
.text:000000000000EBE8                 jmp     loc_DC13
.text:000000000000EBE8 ; ---------------------------------------------------------------------------
.text:000000000000EBED                 align 10h
.text:000000000000EBF0
.text:000000000000EBF0 loc_EBF0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:000000000000EBF0                                         ; quotearg_buffer_restyled+805↑j ...
.text:000000000000EBF0                 mov     rbp, r11
.text:000000000000EBF3                 movzx   eax, [rsp+0E8h+var_D9]
.text:000000000000EBF8                 jmp     loc_E6C9
.text:000000000000EBFD ; ---------------------------------------------------------------------------
.text:000000000000EBFD
.text:000000000000EBFD loc_EBFD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000EBFD                 lea     rax, unk_18323
.text:000000000000EC04                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000EC09                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000EC0E                 xor     r12d, r12d
.text:000000000000EC11                 mov     [rsp+0E8h+var_98], 0
.text:000000000000EC1A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000EC1F                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000EC24                 mov     [rsp+0E8h+n], 1
.text:000000000000EC2D                 xor     r15d, r15d
.text:000000000000EC30                 mov     [rsp+0E8h+s2], rax
.text:000000000000EC35                 jmp     loc_DC13
.text:000000000000EC3A ; ---------------------------------------------------------------------------
.text:000000000000EC3A
.text:000000000000EC3A loc_EC3A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000EC3A                 mov     eax, edx
.text:000000000000EC3C
.text:000000000000EC3C loc_EC3C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000EC3C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000EC3C                 mov     rbx, [rsp+0E8h+s2]
.text:000000000000EC41                 test    rbx, rbx
.text:000000000000EC44                 jz      short loc_EC72
.text:000000000000EC46                 test    al, al
.text:000000000000EC48                 jz      short loc_EC72
.text:000000000000EC4A                 movzx   ecx, byte ptr [rbx]
.text:000000000000EC4D                 mov     rax, rbx
.text:000000000000EC50                 test    cl, cl
.text:000000000000EC52                 jz      short loc_EC72
.text:000000000000EC54                 mov     rdx, r15
.text:000000000000EC57                 sub     rax, r15
.text:000000000000EC5A
.text:000000000000EC5A loc_EC5A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000EC5A                 cmp     r13, rdx
.text:000000000000EC5D                 jbe     short loc_EC63
.text:000000000000EC5F                 mov     [r14+rdx], cl
.text:000000000000EC63
.text:000000000000EC63 loc_EC63:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:000000000000EC63                 add     rdx, 1
.text:000000000000EC67                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000EC6B                 test    cl, cl
.text:000000000000EC6D                 jnz     short loc_EC5A
.text:000000000000EC6F                 mov     r15, rdx
.text:000000000000EC72
.text:000000000000EC72 loc_EC72:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:000000000000EC72                                         ; quotearg_buffer_restyled+1108↑j ...
.text:000000000000EC72                 cmp     r13, r15
.text:000000000000EC75                 jbe     loc_E719
.text:000000000000EC7B                 mov     byte ptr [r14+r15], 0
.text:000000000000EC80                 jmp     loc_E719
.text:000000000000EC85 ; ---------------------------------------------------------------------------
.text:000000000000EC85
.text:000000000000EC85 loc_EC85:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:000000000000EC85                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000EC8A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000EC8F                 mov     rbp, r11
.text:000000000000EC92                 setz    al
.text:000000000000EC95                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000EC99                 jmp     loc_E6C9
.text:000000000000EC9E ; ---------------------------------------------------------------------------
.text:000000000000EC9E
.text:000000000000EC9E loc_EC9E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000EC9E                 mov     esi, [rsp+0E8h+var_E0]
.text:000000000000ECA2                 mov     rdi, rcx
.text:000000000000ECA5                 call    gettext_quote
.text:000000000000ECAA                 mov     [rsp+0E8h+var_80], rax
.text:000000000000ECAF                 jmp     loc_E906
.text:000000000000ECB4 ; ---------------------------------------------------------------------------
.text:000000000000ECB4
.text:000000000000ECB4 loc_ECB4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:000000000000ECB4                 mov     esi, [rsp+0E8h+var_E0]
.text:000000000000ECB8                 mov     rdi, rcx
.text:000000000000ECBB                 call    gettext_quote
.text:000000000000ECC0                 mov     [rsp+0E8h+var_88], rax
.text:000000000000ECC5                 jmp     loc_E931
.text:000000000000ECCA ; ---------------------------------------------------------------------------
.text:000000000000ECCA
.text:000000000000ECCA loc_ECCA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000ECCA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000ECCF                 mov     rbp, r11
.text:000000000000ECD2                 mov     eax, edx
.text:000000000000ECD4                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000ECD8                 jmp     loc_E6C9
.text:000000000000ECDD ; ---------------------------------------------------------------------------
.text:000000000000ECDD
.text:000000000000ECDD loc_ECDD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000ECDD                 sub     rsp, 8
.text:000000000000ECE1                 mov     r8d, 5
.text:000000000000ECE7                 mov     rcx, r11
.text:000000000000ECEA                 push    [rsp+0F0h+var_88]
.text:000000000000ECEE                 push    [rsp+0F8h+var_80]
.text:000000000000ECF2                 mov     rdi, r14
.text:000000000000ECF5                 push    [rsp+100h+var_C8]
.text:000000000000ECF9                 mov     r9d, [rsp+108h+var_70]
.text:000000000000ED01                 mov     rdx, [rsp+108h+s]
.text:000000000000ED06                 mov     rsi, [rsp+108h+var_98]
.text:000000000000ED0B                 call    quotearg_buffer_restyled
.text:000000000000ED10                 add     rsp, 20h
.text:000000000000ED14                 mov     r15, rax
.text:000000000000ED17                 jmp     loc_E719
.text:000000000000ED1C ; ---------------------------------------------------------------------------
.text:000000000000ED1C
.text:000000000000ED1C loc_ED1C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000ED1C                 movzx   eax, [rsp+0E8h+var_6C]
.text:000000000000ED21                 jmp     loc_EC3C
.text:000000000000ED26 ; ---------------------------------------------------------------------------
.text:000000000000ED26
.text:000000000000ED26 loc_ED26:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:000000000000ED26                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000ED2E                 jmp     loc_E6C9
.text:000000000000ED33 ; ---------------------------------------------------------------------------
.text:000000000000ED33
.text:000000000000ED33 loc_ED33:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:000000000000ED33                 call    ___stack_chk_fail
.text:000000000000ED38 ; ---------------------------------------------------------------------------
.text:000000000000ED38
.text:000000000000ED38 loc_ED38:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:000000000000ED38                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000ED3D                 jmp     loc_E7B1
.text:000000000000ED42 ; ---------------------------------------------------------------------------
.text:000000000000ED42
.text:000000000000ED42 loc_ED42:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:000000000000ED42                 mov     rbp, r11
.text:000000000000ED45                 jmp     loc_E6E0
.text:000000000000ED4A ; ---------------------------------------------------------------------------
.text:000000000000ED4A
.text:000000000000ED4A loc_ED4A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000ED4A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000ED4F                 xor     eax, eax
.text:000000000000ED51                 xor     r12d, r12d
.text:000000000000ED54                 mov     [rsp+0E8h+var_98], 0
.text:000000000000ED5D                 jmp     loc_E304
.text:000000000000ED62 ; ---------------------------------------------------------------------------
.text:000000000000ED62
.text:000000000000ED62 loc_ED62:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:000000000000ED62                 mov     rdx, r13
.text:000000000000ED65                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000ED6A                 jmp     loc_E362
.text:000000000000ED6F ; ---------------------------------------------------------------------------
.text:000000000000ED6F
.text:000000000000ED6F def_DBD1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000ED6F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000ED6F ; } // starts at DB40
.text:000000000000ED6F quotearg_buffer_restyled endp
.text:000000000000ED6F
.text:000000000000ED6F ; ---------------------------------------------------------------------------
.text:000000000000ED74                 align 20h
.text:000000000000ED80
.text:000000000000ED80 ; =============== S U B R O U T I N E =======================================
.text:000000000000ED80
.text:000000000000ED80
.text:000000000000ED80 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:000000000000ED80                                         ; quotearg_n_mem+7↓j ...
.text:000000000000ED80
.text:000000000000ED80 var_50          = qword ptr -50h
.text:000000000000ED80 var_48          = qword ptr -48h
.text:000000000000ED80 var_40          = dword ptr -40h
.text:000000000000ED80 var_3C          = dword ptr -3Ch
.text:000000000000ED80
.text:000000000000ED80 ; __unwind {
.text:000000000000ED80                 push    r15
.text:000000000000ED82                 push    r14
.text:000000000000ED84                 movsxd  r15, edi
.text:000000000000ED87                 push    r13
.text:000000000000ED89                 push    r12
.text:000000000000ED8B                 mov     r14, rdx
.text:000000000000ED8E                 push    rbp
.text:000000000000ED8F                 push    rbx
.text:000000000000ED90                 mov     rbp, rcx
.text:000000000000ED93                 sub     rsp, 28h
.text:000000000000ED97                 mov     [rsp+58h+var_50], rsi
.text:000000000000ED9C                 call    ___errno_location
.text:000000000000EDA1                 mov     r13, rax
.text:000000000000EDA4                 mov     eax, [rax]
.text:000000000000EDA6                 test    r15d, r15d
.text:000000000000EDA9                 mov     rbx, cs:slotvec
.text:000000000000EDB0                 mov     [rsp+58h+var_40], eax
.text:000000000000EDB4                 js      loc_EF21
.text:000000000000EDBA                 cmp     cs:nslots, r15d
.text:000000000000EDC1                 jg      short loc_EE25
.text:000000000000EDC3                 cmp     r15d, 7FFFFFFFh
.text:000000000000EDCA                 jz      loc_EF26
.text:000000000000EDD0                 lea     r12d, [r15+1]
.text:000000000000EDD4                 lea     rax, slotvec0
.text:000000000000EDDB                 movsxd  rsi, r12d
.text:000000000000EDDE                 shl     rsi, 4
.text:000000000000EDE2                 cmp     rbx, rax
.text:000000000000EDE5                 jz      loc_EF00
.text:000000000000EDEB                 mov     rdi, rbx
.text:000000000000EDEE                 call    xrealloc
.text:000000000000EDF3                 mov     rbx, rax
.text:000000000000EDF6                 mov     cs:slotvec, rax
.text:000000000000EDFD
.text:000000000000EDFD loc_EDFD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000EDFD                 movsxd  rdi, cs:nslots
.text:000000000000EE04                 mov     edx, r12d
.text:000000000000EE07                 xor     esi, esi        ; c
.text:000000000000EE09                 sub     edx, edi
.text:000000000000EE0B                 shl     rdi, 4
.text:000000000000EE0F                 movsxd  rdx, edx
.text:000000000000EE12                 add     rdi, rbx        ; s
.text:000000000000EE15                 shl     rdx, 4          ; n
.text:000000000000EE19                 call    _memset
.text:000000000000EE1E                 mov     cs:nslots, r12d
.text:000000000000EE25
.text:000000000000EE25 loc_EE25:                               ; CODE XREF: quotearg_n_options+41↑j
.text:000000000000EE25                 mov     eax, [rbp+4]
.text:000000000000EE28                 shl     r15, 4
.text:000000000000EE2C                 sub     rsp, 8
.text:000000000000EE30                 add     rbx, r15
.text:000000000000EE33                 lea     r15, [rbp+8]
.text:000000000000EE37                 mov     r8d, [rbp+0]
.text:000000000000EE3B                 mov     r11, [rbx]
.text:000000000000EE3E                 mov     r12, [rbx+8]
.text:000000000000EE42                 mov     rcx, r14
.text:000000000000EE45                 or      eax, 1
.text:000000000000EE48                 mov     [rsp+60h+var_3C], eax
.text:000000000000EE4C                 push    qword ptr [rbp+30h]
.text:000000000000EE4F                 mov     r9d, eax
.text:000000000000EE52                 push    qword ptr [rbp+28h]
.text:000000000000EE55                 push    r15
.text:000000000000EE57                 mov     rsi, r11
.text:000000000000EE5A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000EE5F                 mov     rdi, r12
.text:000000000000EE62                 mov     [rsp+78h+var_48], r11
.text:000000000000EE67                 call    quotearg_buffer_restyled
.text:000000000000EE6C                 add     rsp, 20h
.text:000000000000EE70                 mov     r11, [rsp+58h+var_48]
.text:000000000000EE75                 cmp     r11, rax
.text:000000000000EE78                 ja      short loc_EEE1
.text:000000000000EE7A                 lea     rsi, [rax+1]
.text:000000000000EE7E                 lea     rax, slot0
.text:000000000000EE85                 cmp     r12, rax
.text:000000000000EE88                 mov     [rbx], rsi
.text:000000000000EE8B                 jz      short loc_EE9F
.text:000000000000EE8D                 mov     rdi, r12        ; ptr
.text:000000000000EE90                 mov     [rsp+58h+var_48], rsi
.text:000000000000EE95                 call    free
.text:000000000000EE9A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000EE9F
.text:000000000000EE9F loc_EE9F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000EE9F                 mov     rdi, rsi
.text:000000000000EEA2                 mov     [rsp+58h+var_48], rsi
.text:000000000000EEA7                 call    xmalloc
.text:000000000000EEAC                 sub     rsp, 8
.text:000000000000EEB0                 mov     [rbx+8], rax
.text:000000000000EEB4                 mov     r8d, [rbp+0]
.text:000000000000EEB8                 push    qword ptr [rbp+30h]
.text:000000000000EEBB                 push    qword ptr [rbp+28h]
.text:000000000000EEBE                 mov     rcx, r14
.text:000000000000EEC1                 push    r15
.text:000000000000EEC3                 mov     r9d, [rsp+78h+var_3C]
.text:000000000000EEC8                 mov     rdi, rax
.text:000000000000EECB                 mov     rdx, [rsp+78h+var_50]
.text:000000000000EED0                 mov     rsi, [rsp+78h+var_48]
.text:000000000000EED5                 mov     r12, rax
.text:000000000000EED8                 call    quotearg_buffer_restyled
.text:000000000000EEDD                 add     rsp, 20h
.text:000000000000EEE1
.text:000000000000EEE1 loc_EEE1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:000000000000EEE1                 mov     eax, [rsp+58h+var_40]
.text:000000000000EEE5                 mov     [r13+0], eax
.text:000000000000EEE9                 add     rsp, 28h
.text:000000000000EEED                 mov     rax, r12
.text:000000000000EEF0                 pop     rbx
.text:000000000000EEF1                 pop     rbp
.text:000000000000EEF2                 pop     r12
.text:000000000000EEF4                 pop     r13
.text:000000000000EEF6                 pop     r14
.text:000000000000EEF8                 pop     r15
.text:000000000000EEFA                 retn
.text:000000000000EEFA ; ---------------------------------------------------------------------------
.text:000000000000EEFB                 align 20h
.text:000000000000EF00
.text:000000000000EF00 loc_EF00:                               ; CODE XREF: quotearg_n_options+65↑j
.text:000000000000EF00                 xor     edi, edi
.text:000000000000EF02                 call    xrealloc
.text:000000000000EF07                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000EF0F                 mov     rbx, rax
.text:000000000000EF12                 mov     cs:slotvec, rax
.text:000000000000EF19                 movups  xmmword ptr [rax], xmm0
.text:000000000000EF1C                 jmp     loc_EDFD
.text:000000000000EF21 ; ---------------------------------------------------------------------------
.text:000000000000EF21
.text:000000000000EF21 loc_EF21:                               ; CODE XREF: quotearg_n_options+34↑j
.text:000000000000EF21                 call    _abort
.text:000000000000EF26 ; ---------------------------------------------------------------------------
.text:000000000000EF26
.text:000000000000EF26 loc_EF26:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:000000000000EF26                 call    xalloc_die
.text:000000000000EF26 ; } // starts at ED80
.text:000000000000EF26 quotearg_n_options endp
.text:000000000000EF26
.text:000000000000EF26 ; ---------------------------------------------------------------------------
.text:000000000000EF2B                 align 10h
.text:000000000000EF30
.text:000000000000EF30 ; =============== S U B R O U T I N E =======================================
.text:000000000000EF30
.text:000000000000EF30 ; Attributes: info_from_lumina
.text:000000000000EF30
.text:000000000000EF30 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:000000000000EF30                 public clone_quoting_options
.text:000000000000EF30 clone_quoting_options proc near
.text:000000000000EF30 ; __unwind {
.text:000000000000EF30                 push    r12
.text:000000000000EF32                 push    rbp
.text:000000000000EF33                 push    rbx
.text:000000000000EF34                 mov     rbx, rdi
.text:000000000000EF37                 call    ___errno_location
.text:000000000000EF3C                 mov     r12d, [rax]
.text:000000000000EF3F                 mov     rbp, rax
.text:000000000000EF42                 lea     rax, default_quoting_options
.text:000000000000EF49                 test    rbx, rbx
.text:000000000000EF4C                 mov     esi, 38h ; '8'  ; n
.text:000000000000EF51                 cmovz   rbx, rax
.text:000000000000EF55                 mov     rdi, rbx        ; src
.text:000000000000EF58                 call    xmemdup
.text:000000000000EF5D                 mov     [rbp+0], r12d
.text:000000000000EF61                 pop     rbx
.text:000000000000EF62                 pop     rbp
.text:000000000000EF63                 pop     r12
.text:000000000000EF65                 retn
.text:000000000000EF65 ; } // starts at EF30
.text:000000000000EF65 clone_quoting_options endp
.text:000000000000EF65
.text:000000000000EF65 ; ---------------------------------------------------------------------------
.text:000000000000EF66                 align 10h
.text:000000000000EF70
.text:000000000000EF70 ; =============== S U B R O U T I N E =======================================
.text:000000000000EF70
.text:000000000000EF70
.text:000000000000EF70                 public get_quoting_style
.text:000000000000EF70 get_quoting_style proc near
.text:000000000000EF70 ; __unwind {
.text:000000000000EF70                 lea     rax, default_quoting_options
.text:000000000000EF77                 test    rdi, rdi
.text:000000000000EF7A                 cmovz   rdi, rax
.text:000000000000EF7E                 mov     eax, [rdi]
.text:000000000000EF80                 retn
.text:000000000000EF80 ; } // starts at EF70
.text:000000000000EF80 get_quoting_style endp
.text:000000000000EF80
.text:000000000000EF80 ; ---------------------------------------------------------------------------
.text:000000000000EF81                 align 10h
.text:000000000000EF90
.text:000000000000EF90 ; =============== S U B R O U T I N E =======================================
.text:000000000000EF90
.text:000000000000EF90
.text:000000000000EF90                 public set_quoting_style
.text:000000000000EF90 set_quoting_style proc near
.text:000000000000EF90 ; __unwind {
.text:000000000000EF90                 lea     rax, default_quoting_options
.text:000000000000EF97                 test    rdi, rdi
.text:000000000000EF9A                 cmovz   rdi, rax
.text:000000000000EF9E                 mov     [rdi], esi
.text:000000000000EFA0                 retn
.text:000000000000EFA0 ; } // starts at EF90
.text:000000000000EFA0 set_quoting_style endp
.text:000000000000EFA0
.text:000000000000EFA0 ; ---------------------------------------------------------------------------
.text:000000000000EFA1                 align 10h
.text:000000000000EFB0
.text:000000000000EFB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EFB0
.text:000000000000EFB0 ; Attributes: info_from_lumina
.text:000000000000EFB0
.text:000000000000EFB0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:000000000000EFB0                 public set_char_quoting
.text:000000000000EFB0 set_char_quoting proc near
.text:000000000000EFB0 ; __unwind {
.text:000000000000EFB0                 lea     rax, default_quoting_options
.text:000000000000EFB7                 test    rdi, rdi
.text:000000000000EFBA                 mov     ecx, esi
.text:000000000000EFBC                 cmovz   rdi, rax
.text:000000000000EFC0                 mov     eax, esi
.text:000000000000EFC2                 and     ecx, 1Fh
.text:000000000000EFC5                 shr     al, 5
.text:000000000000EFC8                 movzx   eax, al
.text:000000000000EFCB                 lea     rdi, [rdi+rax*4+8]
.text:000000000000EFD0                 mov     esi, [rdi]
.text:000000000000EFD2                 mov     eax, esi
.text:000000000000EFD4                 shr     eax, cl
.text:000000000000EFD6                 xor     edx, eax
.text:000000000000EFD8                 and     eax, 1
.text:000000000000EFDB                 and     edx, 1
.text:000000000000EFDE                 shl     edx, cl
.text:000000000000EFE0                 xor     edx, esi
.text:000000000000EFE2                 mov     [rdi], edx
.text:000000000000EFE4                 retn
.text:000000000000EFE4 ; } // starts at EFB0
.text:000000000000EFE4 set_char_quoting endp
.text:000000000000EFE4
.text:000000000000EFE4 ; ---------------------------------------------------------------------------
.text:000000000000EFE5                 align 10h
.text:000000000000EFF0
.text:000000000000EFF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EFF0
.text:000000000000EFF0
.text:000000000000EFF0                 public set_quoting_flags
.text:000000000000EFF0 set_quoting_flags proc near
.text:000000000000EFF0 ; __unwind {
.text:000000000000EFF0                 lea     rax, default_quoting_options
.text:000000000000EFF7                 test    rdi, rdi
.text:000000000000EFFA                 cmovz   rdi, rax
.text:000000000000EFFE                 mov     eax, [rdi+4]
.text:000000000000F001                 mov     [rdi+4], esi
.text:000000000000F004                 retn
.text:000000000000F004 ; } // starts at EFF0
.text:000000000000F004 set_quoting_flags endp
.text:000000000000F004
.text:000000000000F004 ; ---------------------------------------------------------------------------
.text:000000000000F005                 align 10h
.text:000000000000F010
.text:000000000000F010 ; =============== S U B R O U T I N E =======================================
.text:000000000000F010
.text:000000000000F010 ; Attributes: info_from_lumina
.text:000000000000F010
.text:000000000000F010 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:000000000000F010                 public set_custom_quoting
.text:000000000000F010 set_custom_quoting proc near
.text:000000000000F010 ; __unwind {
.text:000000000000F010                 lea     rax, default_quoting_options
.text:000000000000F017                 test    rdi, rdi
.text:000000000000F01A                 cmovz   rdi, rax
.text:000000000000F01E                 test    rsi, rsi
.text:000000000000F021                 mov     dword ptr [rdi], 0Ah
.text:000000000000F027                 jz      short loc_F037
.text:000000000000F029                 test    rdx, rdx
.text:000000000000F02C                 jz      short loc_F037
.text:000000000000F02E                 mov     [rdi+28h], rsi
.text:000000000000F032                 mov     [rdi+30h], rdx
.text:000000000000F036                 retn
.text:000000000000F037 ; ---------------------------------------------------------------------------
.text:000000000000F037
.text:000000000000F037 loc_F037:                               ; CODE XREF: set_custom_quoting+17↑j
.text:000000000000F037                                         ; set_custom_quoting+1C↑j
.text:000000000000F037                 sub     rsp, 8
.text:000000000000F03B                 call    _abort
.text:000000000000F03B ; } // starts at F010
.text:000000000000F03B set_custom_quoting endp
.text:000000000000F03B
.text:000000000000F040
.text:000000000000F040 ; =============== S U B R O U T I N E =======================================
.text:000000000000F040
.text:000000000000F040 ; Attributes: info_from_lumina
.text:000000000000F040
.text:000000000000F040 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:000000000000F040                 public quotearg_buffer
.text:000000000000F040 quotearg_buffer proc near
.text:000000000000F040
.text:000000000000F040 var_40          = qword ptr -40h
.text:000000000000F040
.text:000000000000F040 ; __unwind {
.text:000000000000F040                 push    r15
.text:000000000000F042                 push    r14
.text:000000000000F044                 lea     rax, default_quoting_options
.text:000000000000F04B                 push    r13
.text:000000000000F04D                 push    r12
.text:000000000000F04F                 mov     r13, rdi
.text:000000000000F052                 push    rbp
.text:000000000000F053                 push    rbx
.text:000000000000F054                 mov     rbx, r8
.text:000000000000F057                 mov     r14, rsi
.text:000000000000F05A                 mov     r15, rdx
.text:000000000000F05D                 sub     rsp, 18h
.text:000000000000F061                 test    r8, r8
.text:000000000000F064                 cmovz   rbx, rax
.text:000000000000F068                 mov     [rsp+48h+var_40], rcx
.text:000000000000F06D                 call    ___errno_location
.text:000000000000F072                 mov     r12d, [rax]
.text:000000000000F075                 mov     rbp, rax
.text:000000000000F078                 lea     rax, [rbx+8]
.text:000000000000F07C                 sub     rsp, 8
.text:000000000000F080                 mov     r9d, [rbx+4]
.text:000000000000F084                 push    qword ptr [rbx+30h]
.text:000000000000F087                 mov     r8d, [rbx]
.text:000000000000F08A                 push    qword ptr [rbx+28h]
.text:000000000000F08D                 mov     rdx, r15
.text:000000000000F090                 push    rax
.text:000000000000F091                 mov     rcx, [rsp+68h+var_40]
.text:000000000000F096                 mov     rsi, r14
.text:000000000000F099                 mov     rdi, r13
.text:000000000000F09C                 call    quotearg_buffer_restyled
.text:000000000000F0A1                 mov     [rbp+0], r12d
.text:000000000000F0A5                 add     rsp, 38h
.text:000000000000F0A9                 pop     rbx
.text:000000000000F0AA                 pop     rbp
.text:000000000000F0AB                 pop     r12
.text:000000000000F0AD                 pop     r13
.text:000000000000F0AF                 pop     r14
.text:000000000000F0B1                 pop     r15
.text:000000000000F0B3                 retn
.text:000000000000F0B3 ; } // starts at F040
.text:000000000000F0B3 quotearg_buffer endp
.text:000000000000F0B3
.text:000000000000F0B3 ; ---------------------------------------------------------------------------
.text:000000000000F0B4                 align 20h
.text:000000000000F0C0
.text:000000000000F0C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F0C0
.text:000000000000F0C0 ; Attributes: info_from_lumina
.text:000000000000F0C0
.text:000000000000F0C0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:000000000000F0C0                 public quotearg_alloc_mem
.text:000000000000F0C0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:000000000000F0C0
.text:000000000000F0C0 var_5C          = dword ptr -5Ch
.text:000000000000F0C0 var_58          = qword ptr -58h
.text:000000000000F0C0 var_50          = qword ptr -50h
.text:000000000000F0C0 var_48          = qword ptr -48h
.text:000000000000F0C0 var_40          = qword ptr -40h
.text:000000000000F0C0
.text:000000000000F0C0 ; __unwind {
.text:000000000000F0C0                 push    r15
.text:000000000000F0C2                 push    r14
.text:000000000000F0C4                 lea     rax, default_quoting_options
.text:000000000000F0CB                 push    r13
.text:000000000000F0CD                 push    r12
.text:000000000000F0CF                 mov     r12, rdx
.text:000000000000F0D2                 push    rbp
.text:000000000000F0D3                 push    rbx
.text:000000000000F0D4                 mov     rbx, rcx
.text:000000000000F0D7                 mov     r14, rdi
.text:000000000000F0DA                 mov     r15, rsi
.text:000000000000F0DD                 sub     rsp, 38h
.text:000000000000F0E1                 test    rcx, rcx
.text:000000000000F0E4                 cmovz   rbx, rax
.text:000000000000F0E8                 xor     ebp, ebp
.text:000000000000F0EA                 call    ___errno_location
.text:000000000000F0EF                 test    r12, r12
.text:000000000000F0F2                 mov     r13, rax
.text:000000000000F0F5                 mov     eax, [rax]
.text:000000000000F0F7                 setz    bpl
.text:000000000000F0FB                 or      ebp, [rbx+4]
.text:000000000000F0FE                 lea     r10, [rbx+8]
.text:000000000000F102                 sub     rsp, 8
.text:000000000000F106                 mov     r8d, [rbx]
.text:000000000000F109                 mov     rcx, r15
.text:000000000000F10C                 mov     [rsp+70h+var_5C], eax
.text:000000000000F110                 push    qword ptr [rbx+30h]
.text:000000000000F113                 mov     rdx, r14
.text:000000000000F116                 push    qword ptr [rbx+28h]
.text:000000000000F119                 push    r10
.text:000000000000F11B                 xor     esi, esi
.text:000000000000F11D                 mov     r9d, ebp
.text:000000000000F120                 xor     edi, edi
.text:000000000000F122                 mov     [rsp+88h+var_48], r10
.text:000000000000F127                 call    quotearg_buffer_restyled
.text:000000000000F12C                 lea     rsi, [rax+1]
.text:000000000000F130                 mov     [rsp+88h+var_40], rax
.text:000000000000F135                 add     rsp, 20h
.text:000000000000F139                 mov     rdi, rsi
.text:000000000000F13C                 mov     [rsp+68h+var_50], rsi
.text:000000000000F141                 call    xmalloc
.text:000000000000F146                 mov     [rsp+68h+var_58], rax
.text:000000000000F14B                 sub     rsp, 8
.text:000000000000F14F                 push    qword ptr [rbx+30h]
.text:000000000000F152                 push    qword ptr [rbx+28h]
.text:000000000000F155                 mov     r10, [rsp+80h+var_48]
.text:000000000000F15A                 mov     r9d, ebp
.text:000000000000F15D                 mov     r8d, [rbx]
.text:000000000000F160                 mov     rcx, r15
.text:000000000000F163                 mov     rdx, r14
.text:000000000000F166                 mov     rdi, rax
.text:000000000000F169                 push    r10
.text:000000000000F16B                 mov     rsi, [rsp+88h+var_50]
.text:000000000000F170                 call    quotearg_buffer_restyled
.text:000000000000F175                 mov     eax, [rsp+88h+var_5C]
.text:000000000000F179                 add     rsp, 20h
.text:000000000000F17D                 test    r12, r12
.text:000000000000F180                 mov     [r13+0], eax
.text:000000000000F184                 jz      short loc_F18F
.text:000000000000F186                 mov     r11, [rsp+68h+var_40]
.text:000000000000F18B                 mov     [r12], r11
.text:000000000000F18F
.text:000000000000F18F loc_F18F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000F18F                 mov     rax, [rsp+68h+var_58]
.text:000000000000F194                 add     rsp, 38h
.text:000000000000F198                 pop     rbx
.text:000000000000F199                 pop     rbp
.text:000000000000F19A                 pop     r12
.text:000000000000F19C                 pop     r13
.text:000000000000F19E                 pop     r14
.text:000000000000F1A0                 pop     r15
.text:000000000000F1A2                 retn
.text:000000000000F1A2 ; } // starts at F0C0
.text:000000000000F1A2 quotearg_alloc_mem endp
.text:000000000000F1A2
.text:000000000000F1A2 ; ---------------------------------------------------------------------------
.text:000000000000F1A3                 align 10h
.text:000000000000F1B0
.text:000000000000F1B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F1B0
.text:000000000000F1B0
.text:000000000000F1B0                 public quotearg_alloc
.text:000000000000F1B0 quotearg_alloc  proc near
.text:000000000000F1B0 ; __unwind {
.text:000000000000F1B0                 mov     rcx, rdx
.text:000000000000F1B3                 xor     edx, edx
.text:000000000000F1B5                 jmp     quotearg_alloc_mem
.text:000000000000F1B5 ; } // starts at F1B0
.text:000000000000F1B5 quotearg_alloc  endp
.text:000000000000F1B5
.text:000000000000F1B5 ; ---------------------------------------------------------------------------
.text:000000000000F1BA                 align 20h
.text:000000000000F1C0
.text:000000000000F1C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F1C0
.text:000000000000F1C0 ; Attributes: info_from_lumina
.text:000000000000F1C0
.text:000000000000F1C0 ; void __cdecl quotearg_free()
.text:000000000000F1C0                 public quotearg_free
.text:000000000000F1C0 quotearg_free   proc near
.text:000000000000F1C0 ; __unwind {
.text:000000000000F1C0                 mov     eax, cs:nslots
.text:000000000000F1C6                 push    r12
.text:000000000000F1C8                 mov     r12, cs:slotvec
.text:000000000000F1CF                 push    rbp
.text:000000000000F1D0                 push    rbx
.text:000000000000F1D1                 cmp     eax, 1
.text:000000000000F1D4                 jle     short loc_F201
.text:000000000000F1D6                 sub     eax, 2
.text:000000000000F1D9                 lea     rbx, [r12+18h]
.text:000000000000F1DE                 shl     rax, 4
.text:000000000000F1E2                 lea     rbp, [r12+rax+28h]
.text:000000000000F1E7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000F1F0
.text:000000000000F1F0 loc_F1F0:                               ; CODE XREF: quotearg_free+3F↓j
.text:000000000000F1F0                 mov     rdi, [rbx]      ; ptr
.text:000000000000F1F3                 add     rbx, 10h
.text:000000000000F1F7                 call    free
.text:000000000000F1FC                 cmp     rbx, rbp
.text:000000000000F1FF                 jnz     short loc_F1F0
.text:000000000000F201
.text:000000000000F201 loc_F201:                               ; CODE XREF: quotearg_free+14↑j
.text:000000000000F201                 mov     rdi, [r12+8]    ; ptr
.text:000000000000F206                 lea     rbx, slot0
.text:000000000000F20D                 cmp     rdi, rbx
.text:000000000000F210                 jz      short loc_F229
.text:000000000000F212                 call    free
.text:000000000000F217                 mov     cs:slotvec0, 100h
.text:000000000000F222                 mov     cs:off_21D0B8, rbx
.text:000000000000F229
.text:000000000000F229 loc_F229:                               ; CODE XREF: quotearg_free+50↑j
.text:000000000000F229                 lea     rbx, slotvec0
.text:000000000000F230                 cmp     r12, rbx
.text:000000000000F233                 jz      short loc_F244
.text:000000000000F235                 mov     rdi, r12        ; ptr
.text:000000000000F238                 call    free
.text:000000000000F23D                 mov     cs:slotvec, rbx
.text:000000000000F244
.text:000000000000F244 loc_F244:                               ; CODE XREF: quotearg_free+73↑j
.text:000000000000F244                 pop     rbx
.text:000000000000F245                 mov     cs:nslots, 1
.text:000000000000F24F                 pop     rbp
.text:000000000000F250                 pop     r12
.text:000000000000F252                 retn
.text:000000000000F252 ; } // starts at F1C0
.text:000000000000F252 quotearg_free   endp
.text:000000000000F252
.text:000000000000F252 ; ---------------------------------------------------------------------------
.text:000000000000F253                 align 20h
.text:000000000000F260
.text:000000000000F260 ; =============== S U B R O U T I N E =======================================
.text:000000000000F260
.text:000000000000F260
.text:000000000000F260                 public quotearg_n
.text:000000000000F260 quotearg_n      proc near
.text:000000000000F260 ; __unwind {
.text:000000000000F260                 lea     rcx, default_quoting_options
.text:000000000000F267                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F26E                 jmp     quotearg_n_options
.text:000000000000F26E ; } // starts at F260
.text:000000000000F26E quotearg_n      endp
.text:000000000000F26E
.text:000000000000F26E ; ---------------------------------------------------------------------------
.text:000000000000F273                 align 20h
.text:000000000000F280
.text:000000000000F280 ; =============== S U B R O U T I N E =======================================
.text:000000000000F280
.text:000000000000F280
.text:000000000000F280                 public quotearg_n_mem
.text:000000000000F280 quotearg_n_mem  proc near
.text:000000000000F280 ; __unwind {
.text:000000000000F280                 lea     rcx, default_quoting_options
.text:000000000000F287                 jmp     quotearg_n_options
.text:000000000000F287 ; } // starts at F280
.text:000000000000F287 quotearg_n_mem  endp
.text:000000000000F287
.text:000000000000F287 ; ---------------------------------------------------------------------------
.text:000000000000F28C                 align 10h
.text:000000000000F290
.text:000000000000F290 ; =============== S U B R O U T I N E =======================================
.text:000000000000F290
.text:000000000000F290
.text:000000000000F290                 public quotearg
.text:000000000000F290 quotearg        proc near
.text:000000000000F290 ; __unwind {
.text:000000000000F290                 lea     rcx, default_quoting_options
.text:000000000000F297                 mov     rsi, rdi
.text:000000000000F29A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F2A1                 xor     edi, edi
.text:000000000000F2A3                 jmp     quotearg_n_options
.text:000000000000F2A3 ; } // starts at F290
.text:000000000000F2A3 quotearg        endp
.text:000000000000F2A3
.text:000000000000F2A3 ; ---------------------------------------------------------------------------
.text:000000000000F2A8                 align 10h
.text:000000000000F2B0
.text:000000000000F2B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F2B0
.text:000000000000F2B0
.text:000000000000F2B0                 public quotearg_mem
.text:000000000000F2B0 quotearg_mem    proc near
.text:000000000000F2B0 ; __unwind {
.text:000000000000F2B0                 lea     rcx, default_quoting_options
.text:000000000000F2B7                 mov     rdx, rsi
.text:000000000000F2BA                 mov     rsi, rdi
.text:000000000000F2BD                 xor     edi, edi
.text:000000000000F2BF                 jmp     quotearg_n_options
.text:000000000000F2BF ; } // starts at F2B0
.text:000000000000F2BF quotearg_mem    endp
.text:000000000000F2BF
.text:000000000000F2BF ; ---------------------------------------------------------------------------
.text:000000000000F2C4                 align 10h
.text:000000000000F2D0
.text:000000000000F2D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F2D0
.text:000000000000F2D0 ; Attributes: info_from_lumina
.text:000000000000F2D0
.text:000000000000F2D0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:000000000000F2D0                 public quotearg_n_style
.text:000000000000F2D0 quotearg_n_style proc near              ; CODE XREF: emit_verbose+17↑p
.text:000000000000F2D0                                         ; emit_verbose+29↑p ...
.text:000000000000F2D0
.text:000000000000F2D0 var_48          = dword ptr -48h
.text:000000000000F2D0 var_44          = qword ptr -44h
.text:000000000000F2D0 var_3C          = qword ptr -3Ch
.text:000000000000F2D0 var_34          = qword ptr -34h
.text:000000000000F2D0 var_2C          = qword ptr -2Ch
.text:000000000000F2D0 var_24          = qword ptr -24h
.text:000000000000F2D0 var_1C          = qword ptr -1Ch
.text:000000000000F2D0 var_14          = dword ptr -14h
.text:000000000000F2D0 var_10          = qword ptr -10h
.text:000000000000F2D0
.text:000000000000F2D0 ; __unwind {
.text:000000000000F2D0                 sub     rsp, 48h
.text:000000000000F2D4                 mov     rax, rdx
.text:000000000000F2D7                 mov     rdx, fs:28h
.text:000000000000F2E0                 mov     [rsp+48h+var_10], rdx
.text:000000000000F2E5                 xor     edx, edx
.text:000000000000F2E7                 cmp     esi, 0Ah
.text:000000000000F2EA                 jz      short loc_F354
.text:000000000000F2EC                 mov     [rsp+48h+var_48], esi
.text:000000000000F2EF                 mov     rcx, rsp
.text:000000000000F2F2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F2F9                 mov     rsi, rax
.text:000000000000F2FC                 mov     [rsp+48h+var_44], 0
.text:000000000000F305                 mov     [rsp+48h+var_3C], 0
.text:000000000000F30E                 mov     [rsp+48h+var_34], 0
.text:000000000000F317                 mov     [rsp+48h+var_2C], 0
.text:000000000000F320                 mov     [rsp+48h+var_24], 0
.text:000000000000F329                 mov     [rsp+48h+var_1C], 0
.text:000000000000F332                 mov     [rsp+48h+var_14], 0
.text:000000000000F33A                 call    quotearg_n_options
.text:000000000000F33F                 mov     rcx, [rsp+48h+var_10]
.text:000000000000F344                 xor     rcx, fs:28h
.text:000000000000F34D                 jnz     short loc_F359
.text:000000000000F34F                 add     rsp, 48h
.text:000000000000F353                 retn
.text:000000000000F354 ; ---------------------------------------------------------------------------
.text:000000000000F354
.text:000000000000F354 loc_F354:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:000000000000F354                 call    _abort
.text:000000000000F359 ; ---------------------------------------------------------------------------
.text:000000000000F359
.text:000000000000F359 loc_F359:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:000000000000F359                 call    ___stack_chk_fail
.text:000000000000F359 ; } // starts at F2D0
.text:000000000000F359 quotearg_n_style endp
.text:000000000000F359
.text:000000000000F359 ; ---------------------------------------------------------------------------
.text:000000000000F35E                 align 20h
.text:000000000000F360
.text:000000000000F360 ; =============== S U B R O U T I N E =======================================
.text:000000000000F360
.text:000000000000F360 ; Attributes: info_from_lumina
.text:000000000000F360
.text:000000000000F360 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:000000000000F360                 public quotearg_n_style_mem
.text:000000000000F360 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:000000000000F360
.text:000000000000F360 var_48          = dword ptr -48h
.text:000000000000F360 var_44          = qword ptr -44h
.text:000000000000F360 var_3C          = qword ptr -3Ch
.text:000000000000F360 var_34          = qword ptr -34h
.text:000000000000F360 var_2C          = qword ptr -2Ch
.text:000000000000F360 var_24          = qword ptr -24h
.text:000000000000F360 var_1C          = qword ptr -1Ch
.text:000000000000F360 var_14          = dword ptr -14h
.text:000000000000F360 var_10          = qword ptr -10h
.text:000000000000F360
.text:000000000000F360 ; __unwind {
.text:000000000000F360                 sub     rsp, 48h
.text:000000000000F364                 mov     rax, rdx
.text:000000000000F367                 mov     rdx, rcx
.text:000000000000F36A                 mov     rcx, fs:28h
.text:000000000000F373                 mov     [rsp+48h+var_10], rcx
.text:000000000000F378                 xor     ecx, ecx
.text:000000000000F37A                 cmp     esi, 0Ah
.text:000000000000F37D                 jz      short loc_F3E0
.text:000000000000F37F                 mov     [rsp+48h+var_48], esi
.text:000000000000F382                 mov     rcx, rsp
.text:000000000000F385                 mov     rsi, rax
.text:000000000000F388                 mov     [rsp+48h+var_44], 0
.text:000000000000F391                 mov     [rsp+48h+var_3C], 0
.text:000000000000F39A                 mov     [rsp+48h+var_34], 0
.text:000000000000F3A3                 mov     [rsp+48h+var_2C], 0
.text:000000000000F3AC                 mov     [rsp+48h+var_24], 0
.text:000000000000F3B5                 mov     [rsp+48h+var_1C], 0
.text:000000000000F3BE                 mov     [rsp+48h+var_14], 0
.text:000000000000F3C6                 call    quotearg_n_options
.text:000000000000F3CB                 mov     rdx, [rsp+48h+var_10]
.text:000000000000F3D0                 xor     rdx, fs:28h
.text:000000000000F3D9                 jnz     short loc_F3E5
.text:000000000000F3DB                 add     rsp, 48h
.text:000000000000F3DF                 retn
.text:000000000000F3E0 ; ---------------------------------------------------------------------------
.text:000000000000F3E0
.text:000000000000F3E0 loc_F3E0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:000000000000F3E0                 call    _abort
.text:000000000000F3E5 ; ---------------------------------------------------------------------------
.text:000000000000F3E5
.text:000000000000F3E5 loc_F3E5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:000000000000F3E5                 call    ___stack_chk_fail
.text:000000000000F3E5 ; } // starts at F360
.text:000000000000F3E5 quotearg_n_style_mem endp
.text:000000000000F3E5
.text:000000000000F3E5 ; ---------------------------------------------------------------------------
.text:000000000000F3EA                 align 10h
.text:000000000000F3F0
.text:000000000000F3F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F3F0
.text:000000000000F3F0
.text:000000000000F3F0                 public quotearg_style
.text:000000000000F3F0 quotearg_style  proc near               ; CODE XREF: main+88A↑p
.text:000000000000F3F0                                         ; main+AB4↑p ...
.text:000000000000F3F0 ; __unwind {
.text:000000000000F3F0                 mov     rdx, rsi
.text:000000000000F3F3                 mov     esi, edi
.text:000000000000F3F5                 xor     edi, edi
.text:000000000000F3F7                 jmp     quotearg_n_style
.text:000000000000F3F7 ; } // starts at F3F0
.text:000000000000F3F7 quotearg_style  endp
.text:000000000000F3F7
.text:000000000000F3F7 ; ---------------------------------------------------------------------------
.text:000000000000F3FC                 align 20h
.text:000000000000F400
.text:000000000000F400 ; =============== S U B R O U T I N E =======================================
.text:000000000000F400
.text:000000000000F400
.text:000000000000F400                 public quotearg_style_mem
.text:000000000000F400 quotearg_style_mem proc near
.text:000000000000F400 ; __unwind {
.text:000000000000F400                 mov     rcx, rdx
.text:000000000000F403                 mov     rdx, rsi
.text:000000000000F406                 mov     esi, edi
.text:000000000000F408                 xor     edi, edi
.text:000000000000F40A                 jmp     quotearg_n_style_mem
.text:000000000000F40A ; } // starts at F400
.text:000000000000F40A quotearg_style_mem endp
.text:000000000000F40A
.text:000000000000F40A ; ---------------------------------------------------------------------------
.text:000000000000F40F                 align 10h
.text:000000000000F410
.text:000000000000F410 ; =============== S U B R O U T I N E =======================================
.text:000000000000F410
.text:000000000000F410 ; Attributes: info_from_lumina
.text:000000000000F410
.text:000000000000F410 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:000000000000F410                 public quotearg_char_mem
.text:000000000000F410 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:000000000000F410                                         ; quotearg_colon+C↓j ...
.text:000000000000F410
.text:000000000000F410 var_48          = xmmword ptr -48h
.text:000000000000F410 var_38          = xmmword ptr -38h
.text:000000000000F410 var_28          = xmmword ptr -28h
.text:000000000000F410 var_18          = qword ptr -18h
.text:000000000000F410 var_10          = qword ptr -10h
.text:000000000000F410
.text:000000000000F410 ; __unwind {
.text:000000000000F410                 sub     rsp, 48h
.text:000000000000F414                 mov     ecx, edx
.text:000000000000F416                 mov     rax, fs:28h
.text:000000000000F41F                 mov     [rsp+48h+var_10], rax
.text:000000000000F424                 xor     eax, eax
.text:000000000000F426                 mov     rax, cs:qword_21F710
.text:000000000000F42D                 mov     r8, rsp
.text:000000000000F430                 and     ecx, 1Fh
.text:000000000000F433                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000F43B                 mov     [rsp+48h+var_18], rax
.text:000000000000F440                 mov     eax, edx
.text:000000000000F442                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000F446                 shr     al, 5
.text:000000000000F449                 movzx   eax, al
.text:000000000000F44C                 lea     r9, [r8+rax*4+8]
.text:000000000000F451                 movdqa  xmm0, cs:xmmword_21F6F0
.text:000000000000F459                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000F45E                 movdqa  xmm0, cs:xmmword_21F700
.text:000000000000F466                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000F46B                 mov     edx, [r9]
.text:000000000000F46E                 mov     eax, edx
.text:000000000000F470                 shr     eax, cl
.text:000000000000F472                 not     eax
.text:000000000000F474                 and     eax, 1
.text:000000000000F477                 shl     eax, cl
.text:000000000000F479                 mov     rcx, r8
.text:000000000000F47C                 xor     eax, edx
.text:000000000000F47E                 mov     rdx, rsi
.text:000000000000F481                 mov     rsi, rdi
.text:000000000000F484                 mov     [r9], eax
.text:000000000000F487                 xor     edi, edi
.text:000000000000F489                 call    quotearg_n_options
.text:000000000000F48E                 mov     rsi, [rsp+48h+var_10]
.text:000000000000F493                 xor     rsi, fs:28h
.text:000000000000F49C                 jnz     short loc_F4A3
.text:000000000000F49E                 add     rsp, 48h
.text:000000000000F4A2                 retn
.text:000000000000F4A3 ; ---------------------------------------------------------------------------
.text:000000000000F4A3
.text:000000000000F4A3 loc_F4A3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:000000000000F4A3                 call    ___stack_chk_fail
.text:000000000000F4A3 ; } // starts at F410
.text:000000000000F4A3 quotearg_char_mem endp
.text:000000000000F4A3
.text:000000000000F4A3 ; ---------------------------------------------------------------------------
.text:000000000000F4A8                 align 10h
.text:000000000000F4B0
.text:000000000000F4B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F4B0
.text:000000000000F4B0
.text:000000000000F4B0                 public quotearg_char
.text:000000000000F4B0 quotearg_char   proc near
.text:000000000000F4B0 ; __unwind {
.text:000000000000F4B0                 movsx   edx, sil
.text:000000000000F4B4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000F4BB                 jmp     quotearg_char_mem
.text:000000000000F4BB ; } // starts at F4B0
.text:000000000000F4BB quotearg_char   endp
.text:000000000000F4BB
.text:000000000000F4C0
.text:000000000000F4C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F4C0
.text:000000000000F4C0
.text:000000000000F4C0                 public quotearg_colon
.text:000000000000F4C0 quotearg_colon  proc near               ; CODE XREF: close_stdin+85↑p
.text:000000000000F4C0                                         ; close_stdout+65↑p
.text:000000000000F4C0 ; __unwind {
.text:000000000000F4C0                 mov     edx, 3Ah ; ':'
.text:000000000000F4C5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000F4CC                 jmp     quotearg_char_mem
.text:000000000000F4CC ; } // starts at F4C0
.text:000000000000F4CC quotearg_colon  endp
.text:000000000000F4CC
.text:000000000000F4CC ; ---------------------------------------------------------------------------
.text:000000000000F4D1                 align 20h
.text:000000000000F4E0
.text:000000000000F4E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F4E0
.text:000000000000F4E0
.text:000000000000F4E0                 public quotearg_colon_mem
.text:000000000000F4E0 quotearg_colon_mem proc near
.text:000000000000F4E0 ; __unwind {
.text:000000000000F4E0                 mov     edx, 3Ah ; ':'
.text:000000000000F4E5                 jmp     quotearg_char_mem
.text:000000000000F4E5 ; } // starts at F4E0
.text:000000000000F4E5 quotearg_colon_mem endp
.text:000000000000F4E5
.text:000000000000F4E5 ; ---------------------------------------------------------------------------
.text:000000000000F4EA                 align 10h
.text:000000000000F4F0
.text:000000000000F4F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F4F0
.text:000000000000F4F0 ; Attributes: info_from_lumina
.text:000000000000F4F0
.text:000000000000F4F0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:000000000000F4F0                 public quotearg_n_style_colon
.text:000000000000F4F0 quotearg_n_style_colon proc near        ; CODE XREF: copy_internal+223A↑p
.text:000000000000F4F0                                         ; copy_internal+257D↑p ...
.text:000000000000F4F0
.text:000000000000F4F0 var_48          = dword ptr -48h
.text:000000000000F4F0 var_44          = qword ptr -44h
.text:000000000000F4F0 var_3C          = qword ptr -3Ch
.text:000000000000F4F0 var_34          = qword ptr -34h
.text:000000000000F4F0 var_2C          = qword ptr -2Ch
.text:000000000000F4F0 var_24          = qword ptr -24h
.text:000000000000F4F0 var_1C          = qword ptr -1Ch
.text:000000000000F4F0 var_14          = dword ptr -14h
.text:000000000000F4F0 var_10          = qword ptr -10h
.text:000000000000F4F0
.text:000000000000F4F0 ; __unwind {
.text:000000000000F4F0                 sub     rsp, 48h
.text:000000000000F4F4                 mov     rax, rdx
.text:000000000000F4F7                 mov     rdx, fs:28h
.text:000000000000F500                 mov     [rsp+48h+var_10], rdx
.text:000000000000F505                 xor     edx, edx
.text:000000000000F507                 cmp     esi, 0Ah
.text:000000000000F50A                 jz      short loc_F574
.text:000000000000F50C                 mov     [rsp+48h+var_48], esi
.text:000000000000F50F                 mov     rcx, rsp
.text:000000000000F512                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F519                 mov     rsi, rax
.text:000000000000F51C                 mov     [rsp+48h+var_44], 0
.text:000000000000F525                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000F52E                 mov     [rsp+48h+var_34], 0
.text:000000000000F537                 mov     [rsp+48h+var_2C], 0
.text:000000000000F540                 mov     [rsp+48h+var_24], 0
.text:000000000000F549                 mov     [rsp+48h+var_1C], 0
.text:000000000000F552                 mov     [rsp+48h+var_14], 0
.text:000000000000F55A                 call    quotearg_n_options
.text:000000000000F55F                 mov     rcx, [rsp+48h+var_10]
.text:000000000000F564                 xor     rcx, fs:28h
.text:000000000000F56D                 jnz     short loc_F579
.text:000000000000F56F                 add     rsp, 48h
.text:000000000000F573                 retn
.text:000000000000F574 ; ---------------------------------------------------------------------------
.text:000000000000F574
.text:000000000000F574 loc_F574:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:000000000000F574                 call    _abort
.text:000000000000F579 ; ---------------------------------------------------------------------------
.text:000000000000F579
.text:000000000000F579 loc_F579:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:000000000000F579                 call    ___stack_chk_fail
.text:000000000000F579 ; } // starts at F4F0
.text:000000000000F579 quotearg_n_style_colon endp
.text:000000000000F579
.text:000000000000F579 ; ---------------------------------------------------------------------------
.text:000000000000F57E                 align 20h
.text:000000000000F580
.text:000000000000F580 ; =============== S U B R O U T I N E =======================================
.text:000000000000F580
.text:000000000000F580 ; Attributes: info_from_lumina
.text:000000000000F580
.text:000000000000F580 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:000000000000F580                 public quotearg_n_custom_mem
.text:000000000000F580 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:000000000000F580                                         ; quotearg_custom+12↓j ...
.text:000000000000F580
.text:000000000000F580 var_48          = xmmword ptr -48h
.text:000000000000F580 var_38          = xmmword ptr -38h
.text:000000000000F580 var_28          = xmmword ptr -28h
.text:000000000000F580 var_18          = qword ptr -18h
.text:000000000000F580 var_10          = qword ptr -10h
.text:000000000000F580
.text:000000000000F580 ; __unwind {
.text:000000000000F580                 sub     rsp, 48h
.text:000000000000F584                 mov     r9, rcx
.text:000000000000F587                 mov     rcx, cs:qword_21F710
.text:000000000000F58E                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000F596                 mov     rax, fs:28h
.text:000000000000F59F                 mov     [rsp+48h+var_10], rax
.text:000000000000F5A4                 xor     eax, eax
.text:000000000000F5A6                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000F5AA                 test    rsi, rsi
.text:000000000000F5AD                 mov     [rsp+48h+var_18], rcx
.text:000000000000F5B2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:000000000000F5B9                 movdqa  xmm0, cs:xmmword_21F6F0
.text:000000000000F5C1                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000F5C6                 movdqa  xmm0, cs:xmmword_21F700
.text:000000000000F5CE                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000F5D3                 jz      short loc_F607
.text:000000000000F5D5                 test    rdx, rdx
.text:000000000000F5D8                 jz      short loc_F607
.text:000000000000F5DA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000F5DF                 mov     [rsp+48h+var_18], rdx
.text:000000000000F5E4                 mov     rcx, rsp
.text:000000000000F5E7                 mov     rdx, r8
.text:000000000000F5EA                 mov     rsi, r9
.text:000000000000F5ED                 call    quotearg_n_options
.text:000000000000F5F2                 mov     rdi, [rsp+48h+var_10]
.text:000000000000F5F7                 xor     rdi, fs:28h
.text:000000000000F600                 jnz     short loc_F60C
.text:000000000000F602                 add     rsp, 48h
.text:000000000000F606                 retn
.text:000000000000F607 ; ---------------------------------------------------------------------------
.text:000000000000F607
.text:000000000000F607 loc_F607:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:000000000000F607                                         ; quotearg_n_custom_mem+58↑j
.text:000000000000F607                 call    _abort
.text:000000000000F60C ; ---------------------------------------------------------------------------
.text:000000000000F60C
.text:000000000000F60C loc_F60C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000F60C                 call    ___stack_chk_fail
.text:000000000000F60C ; } // starts at F580
.text:000000000000F60C quotearg_n_custom_mem endp
.text:000000000000F60C
.text:000000000000F60C ; ---------------------------------------------------------------------------
.text:000000000000F611                 align 20h
.text:000000000000F620
.text:000000000000F620 ; =============== S U B R O U T I N E =======================================
.text:000000000000F620
.text:000000000000F620
.text:000000000000F620                 public quotearg_n_custom
.text:000000000000F620 quotearg_n_custom proc near
.text:000000000000F620 ; __unwind {
.text:000000000000F620                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000F627                 jmp     quotearg_n_custom_mem
.text:000000000000F627 ; } // starts at F620
.text:000000000000F627 quotearg_n_custom endp
.text:000000000000F627
.text:000000000000F627 ; ---------------------------------------------------------------------------
.text:000000000000F62C                 align 10h
.text:000000000000F630
.text:000000000000F630 ; =============== S U B R O U T I N E =======================================
.text:000000000000F630
.text:000000000000F630
.text:000000000000F630                 public quotearg_custom
.text:000000000000F630 quotearg_custom proc near
.text:000000000000F630 ; __unwind {
.text:000000000000F630                 mov     rcx, rdx
.text:000000000000F633                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000F63A                 mov     rdx, rsi
.text:000000000000F63D                 mov     rsi, rdi
.text:000000000000F640                 xor     edi, edi
.text:000000000000F642                 jmp     quotearg_n_custom_mem
.text:000000000000F642 ; } // starts at F630
.text:000000000000F642 quotearg_custom endp
.text:000000000000F642
.text:000000000000F642 ; ---------------------------------------------------------------------------
.text:000000000000F647                 align 10h
.text:000000000000F650
.text:000000000000F650 ; =============== S U B R O U T I N E =======================================
.text:000000000000F650
.text:000000000000F650
.text:000000000000F650                 public quotearg_custom_mem
.text:000000000000F650 quotearg_custom_mem proc near
.text:000000000000F650 ; __unwind {
.text:000000000000F650                 mov     r8, rcx
.text:000000000000F653                 mov     rcx, rdx
.text:000000000000F656                 mov     rdx, rsi
.text:000000000000F659                 mov     rsi, rdi
.text:000000000000F65C                 xor     edi, edi
.text:000000000000F65E                 jmp     quotearg_n_custom_mem
.text:000000000000F65E ; } // starts at F650
.text:000000000000F65E quotearg_custom_mem endp
.text:000000000000F65E
.text:000000000000F65E ; ---------------------------------------------------------------------------
.text:000000000000F663                 align 10h
.text:000000000000F670
.text:000000000000F670 ; =============== S U B R O U T I N E =======================================
.text:000000000000F670
.text:000000000000F670
.text:000000000000F670                 public quote_n_mem
.text:000000000000F670 quote_n_mem     proc near
.text:000000000000F670 ; __unwind {
.text:000000000000F670                 lea     rcx, quote_quoting_options
.text:000000000000F677                 jmp     quotearg_n_options
.text:000000000000F677 ; } // starts at F670
.text:000000000000F677 quote_n_mem     endp
.text:000000000000F677
.text:000000000000F677 ; ---------------------------------------------------------------------------
.text:000000000000F67C                 align 20h
.text:000000000000F680
.text:000000000000F680 ; =============== S U B R O U T I N E =======================================
.text:000000000000F680
.text:000000000000F680
.text:000000000000F680                 public quote_mem
.text:000000000000F680 quote_mem       proc near
.text:000000000000F680 ; __unwind {
.text:000000000000F680                 lea     rcx, quote_quoting_options
.text:000000000000F687                 mov     rdx, rsi
.text:000000000000F68A                 mov     rsi, rdi
.text:000000000000F68D                 xor     edi, edi
.text:000000000000F68F                 jmp     quotearg_n_options
.text:000000000000F68F ; } // starts at F680
.text:000000000000F68F quote_mem       endp
.text:000000000000F68F
.text:000000000000F68F ; ---------------------------------------------------------------------------
.text:000000000000F694                 align 20h
.text:000000000000F6A0
.text:000000000000F6A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F6A0
.text:000000000000F6A0
.text:000000000000F6A0                 public quote_n
.text:000000000000F6A0 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↓p
.text:000000000000F6A0 ; __unwind {
.text:000000000000F6A0                 lea     rcx, quote_quoting_options
.text:000000000000F6A7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F6AE                 jmp     quotearg_n_options
.text:000000000000F6AE ; } // starts at F6A0
.text:000000000000F6AE quote_n         endp
.text:000000000000F6AE
.text:000000000000F6AE ; ---------------------------------------------------------------------------
.text:000000000000F6B3                 align 20h
.text:000000000000F6C0
.text:000000000000F6C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F6C0
.text:000000000000F6C0
.text:000000000000F6C0                 public quote
.text:000000000000F6C0 quote           proc near               ; CODE XREF: main+7A9↑p
.text:000000000000F6C0                                         ; main+9E2↑p ...
.text:000000000000F6C0 ; __unwind {
.text:000000000000F6C0                 lea     rcx, quote_quoting_options
.text:000000000000F6C7                 mov     rsi, rdi
.text:000000000000F6CA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F6D1                 xor     edi, edi
.text:000000000000F6D3                 jmp     quotearg_n_options
.text:000000000000F6D3 ; } // starts at F6C0
.text:000000000000F6D3 quote           endp
.text:000000000000F6D3
.text:000000000000F6D3 ; ---------------------------------------------------------------------------
.text:000000000000F6D8                 align 20h
.text:000000000000F6E0
.text:000000000000F6E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F6E0
.text:000000000000F6E0 ; Attributes: info_from_lumina
.text:000000000000F6E0
.text:000000000000F6E0                 public renameat2
.text:000000000000F6E0 renameat2       proc near               ; CODE XREF: copy_internal+333↑p
.text:000000000000F6E0                                         ; backupfile_internal+34F↑p
.text:000000000000F6E0
.text:000000000000F6E0 oldfd           = dword ptr -174h
.text:000000000000F6E0 var_170         = qword ptr -170h
.text:000000000000F6E0 stat_buf        = stat ptr -168h
.text:000000000000F6E0 var_D8          = stat ptr -0D8h
.text:000000000000F6E0 var_40          = qword ptr -40h
.text:000000000000F6E0
.text:000000000000F6E0 ; __unwind {
.text:000000000000F6E0                 push    r15
.text:000000000000F6E2                 push    r14
.text:000000000000F6E4                 mov     r9d, r8d
.text:000000000000F6E7                 push    r13
.text:000000000000F6E9                 push    r12
.text:000000000000F6EB                 mov     r14d, edx
.text:000000000000F6EE                 push    rbp
.text:000000000000F6EF                 push    rbx
.text:000000000000F6F0                 mov     r12, rsi
.text:000000000000F6F3                 mov     r13, rcx
.text:000000000000F6F6                 mov     ebp, r8d
.text:000000000000F6F9                 mov     r8, rcx
.text:000000000000F6FC                 sub     rsp, 148h
.text:000000000000F703                 mov     ecx, edx
.text:000000000000F705                 mov     rdx, rsi
.text:000000000000F708                 mov     rax, fs:28h
.text:000000000000F711                 mov     [rsp+178h+var_40], rax
.text:000000000000F719                 xor     eax, eax
.text:000000000000F71B                 mov     esi, edi
.text:000000000000F71D                 mov     [rsp+178h+oldfd], edi
.text:000000000000F721                 mov     edi, 13Ch       ; sysno
.text:000000000000F726                 call    _syscall
.text:000000000000F72B                 mov     rbx, rax
.text:000000000000F72E                 mov     r15d, eax
.text:000000000000F731                 call    ___errno_location
.text:000000000000F736                 test    ebx, ebx
.text:000000000000F738                 js      short loc_F770
.text:000000000000F73A
.text:000000000000F73A loc_F73A:                               ; CODE XREF: renameat2+A6↓j
.text:000000000000F73A                                         ; renameat2+F8↓j ...
.text:000000000000F73A                 mov     rdx, [rsp+178h+var_40]
.text:000000000000F742                 xor     rdx, fs:28h
.text:000000000000F74B                 mov     eax, r15d
.text:000000000000F74E                 jnz     loc_F945
.text:000000000000F754                 add     rsp, 148h
.text:000000000000F75B                 pop     rbx
.text:000000000000F75C                 pop     rbp
.text:000000000000F75D                 pop     r12
.text:000000000000F75F                 pop     r13
.text:000000000000F761                 pop     r14
.text:000000000000F763                 pop     r15
.text:000000000000F765                 retn
.text:000000000000F765 ; ---------------------------------------------------------------------------
.text:000000000000F766                 align 10h
.text:000000000000F770
.text:000000000000F770 loc_F770:                               ; CODE XREF: renameat2+58↑j
.text:000000000000F770                 mov     r9, rax
.text:000000000000F773                 mov     eax, [rax]
.text:000000000000F775                 lea     ecx, [rax-16h]
.text:000000000000F778                 and     ecx, 0FFFFFFEFh
.text:000000000000F77B                 setnz   bl
.text:000000000000F77E                 cmp     eax, 5Fh ; '_'
.text:000000000000F781                 setnz   al
.text:000000000000F784                 and     bl, al
.text:000000000000F786                 jnz     short loc_F73A
.text:000000000000F788                 test    ebp, ebp
.text:000000000000F78A                 jnz     short loc_F7E0
.text:000000000000F78C
.text:000000000000F78C loc_F78C:                               ; CODE XREF: renameat2+21D↓j
.text:000000000000F78C                 mov     rdi, r12        ; s
.text:000000000000F78F                 mov     [rsp+178h+var_170], r9
.text:000000000000F794                 call    _strlen
.text:000000000000F799                 mov     rdi, r13        ; s
.text:000000000000F79C                 mov     rbp, rax
.text:000000000000F79F                 call    _strlen
.text:000000000000F7A4                 test    rbp, rbp
.text:000000000000F7A7                 jz      short loc_F7C3
.text:000000000000F7A9                 test    rax, rax
.text:000000000000F7AC                 mov     r9, [rsp+178h+var_170]
.text:000000000000F7B1                 jz      short loc_F7C3
.text:000000000000F7B3                 cmp     byte ptr [r12+rbp-1], 2Fh ; '/'
.text:000000000000F7B9                 jz      short loc_F800
.text:000000000000F7BB                 cmp     byte ptr [r13+rax-1], 2Fh ; '/'
.text:000000000000F7C1                 jz      short loc_F800
.text:000000000000F7C3
.text:000000000000F7C3 loc_F7C3:                               ; CODE XREF: renameat2+C7↑j
.text:000000000000F7C3                                         ; renameat2+D1↑j ...
.text:000000000000F7C3                 mov     edi, [rsp+178h+oldfd] ; oldfd
.text:000000000000F7C7                 mov     rcx, r13        ; new
.text:000000000000F7CA                 mov     edx, r14d       ; newfd
.text:000000000000F7CD                 mov     rsi, r12        ; old
.text:000000000000F7D0                 call    _renameat
.text:000000000000F7D5                 mov     r15d, eax
.text:000000000000F7D8                 jmp     loc_F73A
.text:000000000000F7D8 ; ---------------------------------------------------------------------------
.text:000000000000F7DD                 align 20h
.text:000000000000F7E0
.text:000000000000F7E0 loc_F7E0:                               ; CODE XREF: renameat2+AA↑j
.text:000000000000F7E0                 and     ebp, 0FFFFFFFEh
.text:000000000000F7E3                 jz      short loc_F850
.text:000000000000F7E5                 mov     dword ptr [r9], 5Fh ; '_'
.text:000000000000F7EC                 mov     r15d, 0FFFFFFFFh
.text:000000000000F7F2                 jmp     loc_F73A
.text:000000000000F7F2 ; ---------------------------------------------------------------------------
.text:000000000000F7F7                 align 20h
.text:000000000000F800
.text:000000000000F800 loc_F800:                               ; CODE XREF: renameat2+D9↑j
.text:000000000000F800                                         ; renameat2+E1↑j
.text:000000000000F800                 mov     esi, [rsp+178h+oldfd] ; fildes
.text:000000000000F804                 lea     rcx, [rsp+178h+stat_buf] ; stat_buf
.text:000000000000F809                 mov     r8d, 100h       ; flag
.text:000000000000F80F                 mov     rdx, r12        ; filename
.text:000000000000F812                 mov     edi, 1          ; ver
.text:000000000000F817                 mov     [rsp+178h+var_170], r9
.text:000000000000F81C                 call    ___fxstatat
.text:000000000000F821                 test    eax, eax
.text:000000000000F823                 jnz     short loc_F889
.text:000000000000F825                 test    bl, bl
.text:000000000000F827                 mov     r9, [rsp+178h+var_170]
.text:000000000000F82C                 jz      short loc_F8AA
.text:000000000000F82E                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:000000000000F832                 and     eax, 0F000h
.text:000000000000F837                 cmp     eax, 4000h
.text:000000000000F83C                 jz      short loc_F7C3
.text:000000000000F83E                 mov     dword ptr [r9], 2
.text:000000000000F845                 mov     r15d, 0FFFFFFFFh
.text:000000000000F84B                 jmp     loc_F73A
.text:000000000000F850 ; ---------------------------------------------------------------------------
.text:000000000000F850
.text:000000000000F850 loc_F850:                               ; CODE XREF: renameat2+103↑j
.text:000000000000F850                 lea     rcx, [rsp+178h+var_D8] ; stat_buf
.text:000000000000F858                 mov     r8d, 100h       ; flag
.text:000000000000F85E                 mov     rdx, r13        ; filename
.text:000000000000F861                 mov     esi, r14d       ; fildes
.text:000000000000F864                 mov     edi, 1          ; ver
.text:000000000000F869                 mov     [rsp+178h+var_170], r9
.text:000000000000F86E                 call    ___fxstatat
.text:000000000000F873                 test    eax, eax
.text:000000000000F875                 mov     r9, [rsp+178h+var_170]
.text:000000000000F87A                 jz      short loc_F898
.text:000000000000F87C                 mov     eax, [r9]
.text:000000000000F87F                 cmp     eax, 4Bh ; 'K'
.text:000000000000F882                 jz      short loc_F898
.text:000000000000F884                 cmp     eax, 2
.text:000000000000F887                 jz      short loc_F8F8
.text:000000000000F889
.text:000000000000F889 loc_F889:                               ; CODE XREF: renameat2+143↑j
.text:000000000000F889                                         ; renameat2+1FA↓j ...
.text:000000000000F889                 mov     r15d, 0FFFFFFFFh
.text:000000000000F88F                 jmp     loc_F73A
.text:000000000000F88F ; ---------------------------------------------------------------------------
.text:000000000000F894                 align 8
.text:000000000000F898
.text:000000000000F898 loc_F898:                               ; CODE XREF: renameat2+19A↑j
.text:000000000000F898                                         ; renameat2+1A2↑j
.text:000000000000F898                 mov     dword ptr [r9], 11h
.text:000000000000F89F                 mov     r15d, 0FFFFFFFFh
.text:000000000000F8A5                 jmp     loc_F73A
.text:000000000000F8AA ; ---------------------------------------------------------------------------
.text:000000000000F8AA
.text:000000000000F8AA loc_F8AA:                               ; CODE XREF: renameat2+14C↑j
.text:000000000000F8AA                 lea     rcx, [rsp+178h+var_D8] ; stat_buf
.text:000000000000F8B2                 mov     r8d, 100h       ; flag
.text:000000000000F8B8                 mov     rdx, r13        ; filename
.text:000000000000F8BB                 mov     esi, r14d       ; fildes
.text:000000000000F8BE                 mov     edi, 1          ; ver
.text:000000000000F8C3                 mov     [rsp+178h+var_170], r9
.text:000000000000F8C8                 call    ___fxstatat
.text:000000000000F8CD                 test    eax, eax
.text:000000000000F8CF                 mov     r9, [rsp+178h+var_170]
.text:000000000000F8D4                 jz      short loc_F902
.text:000000000000F8D6                 cmp     dword ptr [r9], 2
.text:000000000000F8DA                 jnz     short loc_F889
.text:000000000000F8DC                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:000000000000F8E0                 and     eax, 0F000h
.text:000000000000F8E5                 cmp     eax, 4000h
.text:000000000000F8EA                 jnz     short loc_F889
.text:000000000000F8EC                 jmp     loc_F7C3
.text:000000000000F8EC ; ---------------------------------------------------------------------------
.text:000000000000F8F1                 align 8
.text:000000000000F8F8
.text:000000000000F8F8 loc_F8F8:                               ; CODE XREF: renameat2+1A7↑j
.text:000000000000F8F8                 mov     ebx, 1
.text:000000000000F8FD                 jmp     loc_F78C
.text:000000000000F902 ; ---------------------------------------------------------------------------
.text:000000000000F902
.text:000000000000F902 loc_F902:                               ; CODE XREF: renameat2+1F4↑j
.text:000000000000F902                 mov     eax, [rsp+178h+var_D8.st_mode]
.text:000000000000F909                 and     eax, 0F000h
.text:000000000000F90E                 cmp     eax, 4000h
.text:000000000000F913                 jz      short loc_F921
.text:000000000000F915                 mov     dword ptr [r9], 14h
.text:000000000000F91C                 jmp     loc_F889
.text:000000000000F921 ; ---------------------------------------------------------------------------
.text:000000000000F921
.text:000000000000F921 loc_F921:                               ; CODE XREF: renameat2+233↑j
.text:000000000000F921                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:000000000000F925                 and     eax, 0F000h
.text:000000000000F92A                 cmp     eax, 4000h
.text:000000000000F92F                 jz      loc_F7C3
.text:000000000000F935                 mov     dword ptr [r9], 15h
.text:000000000000F93C                 or      r15d, 0FFFFFFFFh
.text:000000000000F940                 jmp     loc_F73A
.text:000000000000F945 ; ---------------------------------------------------------------------------
.text:000000000000F945
.text:000000000000F945 loc_F945:                               ; CODE XREF: renameat2+6E↑j
.text:000000000000F945                 call    ___stack_chk_fail
.text:000000000000F945 ; } // starts at F6E0
.text:000000000000F945 renameat2       endp
.text:000000000000F945
.text:000000000000F945 ; ---------------------------------------------------------------------------
.text:000000000000F94A                 align 10h
.text:000000000000F950
.text:000000000000F950 ; =============== S U B R O U T I N E =======================================
.text:000000000000F950
.text:000000000000F950
.text:000000000000F950 ; __int64 __fastcall safe_read(int fd, void *buf, size_t nbytes)
.text:000000000000F950                 public safe_read
.text:000000000000F950 safe_read       proc near               ; CODE XREF: full_read+39↑p
.text:000000000000F950 ; __unwind {
.text:000000000000F950                 push    r13
.text:000000000000F952                 push    r12
.text:000000000000F954                 mov     r13d, edi
.text:000000000000F957                 push    rbp
.text:000000000000F958                 push    rbx
.text:000000000000F959                 mov     r12, rsi
.text:000000000000F95C                 mov     rbx, rdx
.text:000000000000F95F                 sub     rsp, 8
.text:000000000000F963                 nop     dword ptr [rax+rax+00h]
.text:000000000000F968
.text:000000000000F968 loc_F968:                               ; CODE XREF: safe_read+38↓j
.text:000000000000F968                                         ; safe_read+4D↓j
.text:000000000000F968                 mov     rdx, rbx        ; nbytes
.text:000000000000F96B                 mov     rsi, r12        ; buf
.text:000000000000F96E                 mov     edi, r13d       ; fd
.text:000000000000F971                 call    _read
.text:000000000000F976                 test    rax, rax
.text:000000000000F979                 mov     rbp, rax
.text:000000000000F97C                 jns     short loc_F9A0
.text:000000000000F97E                 call    ___errno_location
.text:000000000000F983                 mov     eax, [rax]
.text:000000000000F985                 cmp     eax, 4
.text:000000000000F988                 jz      short loc_F968
.text:000000000000F98A                 cmp     rbx, 7FF00000h
.text:000000000000F991                 jbe     short loc_F9A0
.text:000000000000F993                 cmp     eax, 16h
.text:000000000000F996                 jnz     short loc_F9A0
.text:000000000000F998                 mov     ebx, 7FF00000h
.text:000000000000F99D                 jmp     short loc_F968
.text:000000000000F99D ; ---------------------------------------------------------------------------
.text:000000000000F99F                 align 20h
.text:000000000000F9A0
.text:000000000000F9A0 loc_F9A0:                               ; CODE XREF: safe_read+2C↑j
.text:000000000000F9A0                                         ; safe_read+41↑j ...
.text:000000000000F9A0                 add     rsp, 8
.text:000000000000F9A4                 mov     rax, rbp
.text:000000000000F9A7                 pop     rbx
.text:000000000000F9A8                 pop     rbp
.text:000000000000F9A9                 pop     r12
.text:000000000000F9AB                 pop     r13
.text:000000000000F9AD                 retn
.text:000000000000F9AD ; } // starts at F950
.text:000000000000F9AD safe_read       endp
.text:000000000000F9AD
.text:000000000000F9AD ; ---------------------------------------------------------------------------
.text:000000000000F9AE                 align 10h
.text:000000000000F9B0
.text:000000000000F9B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F9B0
.text:000000000000F9B0
.text:000000000000F9B0 ; __int64 __fastcall safe_write(int fd, void *buf, size_t n)
.text:000000000000F9B0                 public safe_write
.text:000000000000F9B0 safe_write      proc near               ; CODE XREF: full_write+39↑p
.text:000000000000F9B0 ; __unwind {
.text:000000000000F9B0                 push    r13
.text:000000000000F9B2                 push    r12
.text:000000000000F9B4                 mov     r13d, edi
.text:000000000000F9B7                 push    rbp
.text:000000000000F9B8                 push    rbx
.text:000000000000F9B9                 mov     r12, rsi
.text:000000000000F9BC                 mov     rbx, rdx
.text:000000000000F9BF                 sub     rsp, 8
.text:000000000000F9C3                 nop     dword ptr [rax+rax+00h]
.text:000000000000F9C8
.text:000000000000F9C8 loc_F9C8:                               ; CODE XREF: safe_write+38↓j
.text:000000000000F9C8                                         ; safe_write+4D↓j
.text:000000000000F9C8                 mov     rdx, rbx        ; n
.text:000000000000F9CB                 mov     rsi, r12        ; buf
.text:000000000000F9CE                 mov     edi, r13d       ; fd
.text:000000000000F9D1                 call    _write
.text:000000000000F9D6                 test    rax, rax
.text:000000000000F9D9                 mov     rbp, rax
.text:000000000000F9DC                 jns     short loc_FA00
.text:000000000000F9DE                 call    ___errno_location
.text:000000000000F9E3                 mov     eax, [rax]
.text:000000000000F9E5                 cmp     eax, 4
.text:000000000000F9E8                 jz      short loc_F9C8
.text:000000000000F9EA                 cmp     eax, 16h
.text:000000000000F9ED                 jnz     short loc_FA00
.text:000000000000F9EF                 cmp     rbx, 7FF00000h
.text:000000000000F9F6                 jbe     short loc_FA00
.text:000000000000F9F8                 mov     ebx, 7FF00000h
.text:000000000000F9FD                 jmp     short loc_F9C8
.text:000000000000F9FD ; ---------------------------------------------------------------------------
.text:000000000000F9FF                 align 20h
.text:000000000000FA00
.text:000000000000FA00 loc_FA00:                               ; CODE XREF: safe_write+2C↑j
.text:000000000000FA00                                         ; safe_write+3D↑j ...
.text:000000000000FA00                 add     rsp, 8
.text:000000000000FA04                 mov     rax, rbp
.text:000000000000FA07                 pop     rbx
.text:000000000000FA08                 pop     rbp
.text:000000000000FA09                 pop     r12
.text:000000000000FA0B                 pop     r13
.text:000000000000FA0D                 retn
.text:000000000000FA0D ; } // starts at F9B0
.text:000000000000FA0D safe_write      endp
.text:000000000000FA0D
.text:000000000000FA0D ; ---------------------------------------------------------------------------
.text:000000000000FA0E                 align 10h
.text:000000000000FA10
.text:000000000000FA10 ; =============== S U B R O U T I N E =======================================
.text:000000000000FA10
.text:000000000000FA10
.text:000000000000FA10 ; __int64 __fastcall same_nameat_part_0(int fildes)
.text:000000000000FA10 same_nameat_part_0 proc near            ; CODE XREF: same_nameat+8D↓j
.text:000000000000FA10
.text:000000000000FA10 var_158         = qword ptr -158h
.text:000000000000FA10 var_150         = qword ptr -150h
.text:000000000000FA10 stat_buf        = stat ptr -0C8h
.text:000000000000FA10 var_30          = qword ptr -30h
.text:000000000000FA10
.text:000000000000FA10 ; __unwind {
.text:000000000000FA10                 push    r13
.text:000000000000FA12                 push    r12
.text:000000000000FA14                 mov     r13d, edi
.text:000000000000FA17                 push    rbp
.text:000000000000FA18                 push    rbx
.text:000000000000FA19                 mov     rdi, rsi
.text:000000000000FA1C                 mov     ebp, edx
.text:000000000000FA1E                 mov     r12, rcx
.text:000000000000FA21                 sub     rsp, 138h
.text:000000000000FA28                 mov     rax, fs:28h
.text:000000000000FA31                 mov     [rsp+158h+var_30], rax
.text:000000000000FA39                 xor     eax, eax
.text:000000000000FA3B                 call    dir_name
.text:000000000000FA40                 mov     rcx, rsp        ; stat_buf
.text:000000000000FA43                 mov     r8d, 100h       ; flag
.text:000000000000FA49                 mov     rdx, rax        ; filename
.text:000000000000FA4C                 mov     esi, r13d       ; fildes
.text:000000000000FA4F                 mov     edi, 1          ; ver
.text:000000000000FA54                 mov     rbx, rax
.text:000000000000FA57                 call    ___fxstatat
.text:000000000000FA5C                 test    eax, eax
.text:000000000000FA5E                 jnz     loc_FB10
.text:000000000000FA64
.text:000000000000FA64 loc_FA64:                               ; CODE XREF: same_nameat_part_0+11D↓j
.text:000000000000FA64                 mov     rdi, rbx        ; ptr
.text:000000000000FA67                 call    free
.text:000000000000FA6C                 mov     rdi, r12
.text:000000000000FA6F                 call    dir_name
.text:000000000000FA74                 lea     rcx, [rsp+158h+stat_buf] ; stat_buf
.text:000000000000FA7C                 mov     r8d, 100h       ; flag
.text:000000000000FA82                 mov     rdx, rax        ; filename
.text:000000000000FA85                 mov     esi, ebp        ; fildes
.text:000000000000FA87                 mov     edi, 1          ; ver
.text:000000000000FA8C                 mov     rbx, rax
.text:000000000000FA8F                 call    ___fxstatat
.text:000000000000FA94                 test    eax, eax
.text:000000000000FA96                 jnz     short loc_FAE8
.text:000000000000FA98
.text:000000000000FA98 loc_FA98:                               ; CODE XREF: same_nameat_part_0+F5↓j
.text:000000000000FA98                 xor     ebp, ebp
.text:000000000000FA9A                 mov     rax, [rsp+158h+stat_buf.st_ino]
.text:000000000000FAA2                 cmp     [rsp+158h+var_150], rax
.text:000000000000FAA7                 jnz     short loc_FAB9
.text:000000000000FAA9                 mov     rax, [rsp+158h+stat_buf.st_dev]
.text:000000000000FAB1                 cmp     [rsp+158h+var_158], rax
.text:000000000000FAB5                 setz    bpl
.text:000000000000FAB9
.text:000000000000FAB9 loc_FAB9:                               ; CODE XREF: same_nameat_part_0+97↑j
.text:000000000000FAB9                 mov     rdi, rbx        ; ptr
.text:000000000000FABC                 call    free
.text:000000000000FAC1                 mov     rdx, [rsp+158h+var_30]
.text:000000000000FAC9                 xor     rdx, fs:28h
.text:000000000000FAD2                 mov     eax, ebp
.text:000000000000FAD4                 jnz     short loc_FB32
.text:000000000000FAD6                 add     rsp, 138h
.text:000000000000FADD                 pop     rbx
.text:000000000000FADE                 pop     rbp
.text:000000000000FADF                 pop     r12
.text:000000000000FAE1                 pop     r13
.text:000000000000FAE3                 retn
.text:000000000000FAE3 ; ---------------------------------------------------------------------------
.text:000000000000FAE4                 align 8
.text:000000000000FAE8
.text:000000000000FAE8 loc_FAE8:                               ; CODE XREF: same_nameat_part_0+86↑j
.text:000000000000FAE8                 call    ___errno_location
.text:000000000000FAED                 mov     esi, [rax]      ; errnum
.text:000000000000FAEF                 lea     rdx, aS_0+2     ; format
.text:000000000000FAF6                 mov     rcx, rbx
.text:000000000000FAF9                 mov     edi, 1          ; status
.text:000000000000FAFE                 xor     eax, eax
.text:000000000000FB00                 call    _error
.text:000000000000FB05                 jmp     short loc_FA98
.text:000000000000FB05 ; ---------------------------------------------------------------------------
.text:000000000000FB07                 align 10h
.text:000000000000FB10
.text:000000000000FB10 loc_FB10:                               ; CODE XREF: same_nameat_part_0+4E↑j
.text:000000000000FB10                 call    ___errno_location
.text:000000000000FB15                 mov     esi, [rax]      ; errnum
.text:000000000000FB17                 lea     rdx, aS_0+2     ; format
.text:000000000000FB1E                 mov     rcx, rbx
.text:000000000000FB21                 mov     edi, 1          ; status
.text:000000000000FB26                 xor     eax, eax
.text:000000000000FB28                 call    _error
.text:000000000000FB2D                 jmp     loc_FA64
.text:000000000000FB32 ; ---------------------------------------------------------------------------
.text:000000000000FB32
.text:000000000000FB32 loc_FB32:                               ; CODE XREF: same_nameat_part_0+C4↑j
.text:000000000000FB32                 call    ___stack_chk_fail
.text:000000000000FB32 ; } // starts at FA10
.text:000000000000FB32 same_nameat_part_0 endp
.text:000000000000FB32
.text:000000000000FB32 ; ---------------------------------------------------------------------------
.text:000000000000FB37                 align 20h
.text:000000000000FB40
.text:000000000000FB40 ; =============== S U B R O U T I N E =======================================
.text:000000000000FB40
.text:000000000000FB40
.text:000000000000FB40                 public same_nameat
.text:000000000000FB40 same_nameat     proc near               ; CODE XREF: same_name+D↓j
.text:000000000000FB40
.text:000000000000FB40 fildes          = dword ptr -3Ch
.text:000000000000FB40
.text:000000000000FB40 ; __unwind {
.text:000000000000FB40                 push    r15
.text:000000000000FB42                 push    r14
.text:000000000000FB44                 mov     r15d, edx
.text:000000000000FB47                 push    r13
.text:000000000000FB49                 push    r12
.text:000000000000FB4B                 push    rbp
.text:000000000000FB4C                 push    rbx
.text:000000000000FB4D                 mov     rbp, rcx
.text:000000000000FB50                 mov     rbx, rsi
.text:000000000000FB53                 sub     rsp, 18h
.text:000000000000FB57                 mov     [rsp+48h+fildes], edi
.text:000000000000FB5B                 mov     rdi, rsi
.text:000000000000FB5E                 call    last_component
.text:000000000000FB63                 mov     rdi, rbp
.text:000000000000FB66                 mov     r12, rax
.text:000000000000FB69                 call    last_component
.text:000000000000FB6E                 mov     rdi, r12
.text:000000000000FB71                 mov     r13, rax
.text:000000000000FB74                 call    base_len
.text:000000000000FB79                 mov     rdi, r13
.text:000000000000FB7C                 mov     r14, rax
.text:000000000000FB7F                 call    base_len
.text:000000000000FB84                 cmp     r14, rax
.text:000000000000FB87                 jz      short loc_FBA0
.text:000000000000FB89
.text:000000000000FB89 loc_FB89:                               ; CODE XREF: same_nameat+70↓j
.text:000000000000FB89                 add     rsp, 18h
.text:000000000000FB8D                 xor     eax, eax
.text:000000000000FB8F                 pop     rbx
.text:000000000000FB90                 pop     rbp
.text:000000000000FB91                 pop     r12
.text:000000000000FB93                 pop     r13
.text:000000000000FB95                 pop     r14
.text:000000000000FB97                 pop     r15
.text:000000000000FB99                 retn
.text:000000000000FB99 ; ---------------------------------------------------------------------------
.text:000000000000FB9A                 align 20h
.text:000000000000FBA0
.text:000000000000FBA0 loc_FBA0:                               ; CODE XREF: same_nameat+47↑j
.text:000000000000FBA0                 mov     rdx, r14        ; n
.text:000000000000FBA3                 mov     rsi, r13        ; s2
.text:000000000000FBA6                 mov     rdi, r12        ; s1
.text:000000000000FBA9                 call    _memcmp
.text:000000000000FBAE                 test    eax, eax
.text:000000000000FBB0                 jnz     short loc_FB89
.text:000000000000FBB2                 mov     edi, [rsp+48h+fildes] ; fildes
.text:000000000000FBB6                 add     rsp, 18h
.text:000000000000FBBA                 mov     rcx, rbp
.text:000000000000FBBD                 mov     edx, r15d
.text:000000000000FBC0                 mov     rsi, rbx
.text:000000000000FBC3                 pop     rbx
.text:000000000000FBC4                 pop     rbp
.text:000000000000FBC5                 pop     r12
.text:000000000000FBC7                 pop     r13
.text:000000000000FBC9                 pop     r14
.text:000000000000FBCB                 pop     r15
.text:000000000000FBCD                 jmp     same_nameat_part_0
.text:000000000000FBCD ; } // starts at FB40
.text:000000000000FBCD same_nameat     endp
.text:000000000000FBCD
.text:000000000000FBCD ; ---------------------------------------------------------------------------
.text:000000000000FBD2                 align 20h
.text:000000000000FBE0
.text:000000000000FBE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000FBE0
.text:000000000000FBE0
.text:000000000000FBE0                 public same_name
.text:000000000000FBE0 same_name       proc near               ; CODE XREF: copy_internal+1099↑p
.text:000000000000FBE0                                         ; copy_internal+1757↑p ...
.text:000000000000FBE0 ; __unwind {
.text:000000000000FBE0                 mov     edx, 0FFFFFF9Ch
.text:000000000000FBE5                 mov     rcx, rsi
.text:000000000000FBE8                 mov     rsi, rdi
.text:000000000000FBEB                 mov     edi, edx
.text:000000000000FBED                 jmp     same_nameat
.text:000000000000FBED ; } // starts at FBE0
.text:000000000000FBED same_name       endp
.text:000000000000FBED
.text:000000000000FBED ; ---------------------------------------------------------------------------
.text:000000000000FBF2                 align 20h
.text:000000000000FC00
.text:000000000000FC00 ; =============== S U B R O U T I N E =======================================
.text:000000000000FC00
.text:000000000000FC00
.text:000000000000FC00 direntry_cmp_inode proc near            ; DATA XREF: .data.rel.ro:000000000021C9D0↓o
.text:000000000000FC00 ; __unwind {
.text:000000000000FC00                 mov     rax, [rsi+8]
.text:000000000000FC04                 cmp     [rdi+8], rax
.text:000000000000FC08                 jb      short loc_FC18
.text:000000000000FC0A                 setnbe  al
.text:000000000000FC0D                 movzx   eax, al
.text:000000000000FC10                 retn
.text:000000000000FC10 ; ---------------------------------------------------------------------------
.text:000000000000FC11                 align 8
.text:000000000000FC18
.text:000000000000FC18 loc_FC18:                               ; CODE XREF: direntry_cmp_inode+8↑j
.text:000000000000FC18                 mov     eax, 0FFFFFFFFh
.text:000000000000FC1D                 retn
.text:000000000000FC1D ; } // starts at FC00
.text:000000000000FC1D direntry_cmp_inode endp
.text:000000000000FC1D
.text:000000000000FC1D ; ---------------------------------------------------------------------------
.text:000000000000FC1E                 align 20h
.text:000000000000FC20
.text:000000000000FC20 ; =============== S U B R O U T I N E =======================================
.text:000000000000FC20
.text:000000000000FC20
.text:000000000000FC20 direntry_cmp_name proc near             ; DATA XREF: .data.rel.ro:000000000021C9C8↓o
.text:000000000000FC20 ; __unwind {
.text:000000000000FC20                 mov     rsi, [rsi]      ; s2
.text:000000000000FC23                 mov     rdi, [rdi]      ; s1
.text:000000000000FC26                 jmp     _strcmp
.text:000000000000FC26 ; } // starts at FC20
.text:000000000000FC26 direntry_cmp_name endp
.text:000000000000FC26
.text:000000000000FC26 ; ---------------------------------------------------------------------------
.text:000000000000FC2B                 align 10h
.text:000000000000FC30
.text:000000000000FC30 ; =============== S U B R O U T I N E =======================================
.text:000000000000FC30
.text:000000000000FC30 ; Attributes: info_from_lumina
.text:000000000000FC30
.text:000000000000FC30 ; __int64 __fastcall streamsavedir(DIR *dirp)
.text:000000000000FC30                 public streamsavedir
.text:000000000000FC30 streamsavedir   proc near               ; CODE XREF: savedir+18↓p
.text:000000000000FC30
.text:000000000000FC30 compar          = qword ptr -70h
.text:000000000000FC30 ptr             = qword ptr -68h
.text:000000000000FC30 n               = qword ptr -60h
.text:000000000000FC30 var_58          = qword ptr -58h
.text:000000000000FC30 var_50          = qword ptr -50h
.text:000000000000FC30 var_48          = qword ptr -48h
.text:000000000000FC30 var_40          = qword ptr -40h
.text:000000000000FC30
.text:000000000000FC30 ; __unwind {
.text:000000000000FC30                 push    r15
.text:000000000000FC32                 lea     rax, comparison_function_table
.text:000000000000FC39                 push    r14
.text:000000000000FC3B                 push    r13
.text:000000000000FC3D                 push    r12
.text:000000000000FC3F                 mov     esi, esi
.text:000000000000FC41                 push    rbp
.text:000000000000FC42                 push    rbx
.text:000000000000FC43                 sub     rsp, 48h
.text:000000000000FC47                 mov     rax, [rax+rsi*8]
.text:000000000000FC4B                 test    rdi, rdi
.text:000000000000FC4E                 mov     [rsp+78h+compar], rax
.text:000000000000FC53                 jz      loc_FF5D
.text:000000000000FC59                 mov     rbx, rdi
.text:000000000000FC5C                 xor     r14d, r14d
.text:000000000000FC5F                 xor     r12d, r12d
.text:000000000000FC62                 call    ___errno_location
.text:000000000000FC67                 xor     r13d, r13d
.text:000000000000FC6A                 mov     rbp, rax
.text:000000000000FC6D                 mov     [rsp+78h+var_50], 0
.text:000000000000FC76                 mov     [rsp+78h+ptr], 0
.text:000000000000FC7F                 mov     [rsp+78h+var_58], 0
.text:000000000000FC88                 jmp     short loc_FC94
.text:000000000000FC88 ; ---------------------------------------------------------------------------
.text:000000000000FC8A                 align 10h
.text:000000000000FC90
.text:000000000000FC90 loc_FC90:                               ; CODE XREF: streamsavedir+89↓j
.text:000000000000FC90                                         ; streamsavedir+114↓j
.text:000000000000FC90                 test    al, al
.text:000000000000FC92                 jnz     short loc_FCC9
.text:000000000000FC94
.text:000000000000FC94 loc_FC94:                               ; CODE XREF: streamsavedir+58↑j
.text:000000000000FC94                                         ; streamsavedir+97↓j ...
.text:000000000000FC94                 mov     dword ptr [rbp+0], 0
.text:000000000000FC9B                 mov     rdi, rbx        ; dirp
.text:000000000000FC9E                 call    _readdir
.text:000000000000FCA3                 test    rax, rax
.text:000000000000FCA6                 mov     rcx, rax
.text:000000000000FCA9                 jz      loc_FD50
.text:000000000000FCAF                 lea     r15, [rax+13h]
.text:000000000000FCB3                 movzx   eax, byte ptr [rax+13h]
.text:000000000000FCB7                 cmp     al, 2Eh ; '.'
.text:000000000000FCB9                 jnz     short loc_FC90
.text:000000000000FCBB                 cmp     byte ptr [rcx+14h], 2Eh ; '.'
.text:000000000000FCBF                 jz      short loc_FD40
.text:000000000000FCC1                 movzx   eax, byte ptr [rcx+14h]
.text:000000000000FCC5                 test    al, al
.text:000000000000FCC7                 jz      short loc_FC94
.text:000000000000FCC9
.text:000000000000FCC9 loc_FCC9:                               ; CODE XREF: streamsavedir+62↑j
.text:000000000000FCC9                 mov     rdi, r15        ; s
.text:000000000000FCCC                 mov     [rsp+78h+var_48], rcx
.text:000000000000FCD1                 call    _strlen
.text:000000000000FCD6                 add     rax, 1
.text:000000000000FCDA                 cmp     [rsp+78h+compar], 0
.text:000000000000FCE0                 mov     [rsp+78h+n], rax
.text:000000000000FCE5                 jz      loc_FE28
.text:000000000000FCEB                 cmp     r12, [rsp+78h+var_50]
.text:000000000000FCF0                 lea     rax, [r12+1]
.text:000000000000FCF5                 mov     rcx, [rsp+78h+var_48]
.text:000000000000FCFA                 mov     [rsp+78h+var_40], rax
.text:000000000000FCFF                 jz      loc_FEB1
.text:000000000000FD05
.text:000000000000FD05 loc_FD05:                               ; CODE XREF: streamsavedir+2CE↓j
.text:000000000000FD05                 shl     r12, 4
.text:000000000000FD09                 mov     rdi, r15        ; src
.text:000000000000FD0C                 add     r12, [rsp+78h+ptr]
.text:000000000000FD11                 mov     [rsp+78h+var_48], rcx
.text:000000000000FD16                 call    xstrdup
.text:000000000000FD1B                 mov     rcx, [rsp+78h+var_48]
.text:000000000000FD20                 add     r14, [rsp+78h+n]
.text:000000000000FD25                 mov     [r12], rax
.text:000000000000FD29                 mov     rax, [rcx]
.text:000000000000FD2C                 mov     [r12+8], rax
.text:000000000000FD31                 mov     r12, [rsp+78h+var_40]
.text:000000000000FD36                 jmp     loc_FC94
.text:000000000000FD36 ; ---------------------------------------------------------------------------
.text:000000000000FD3B                 align 20h
.text:000000000000FD40
.text:000000000000FD40 loc_FD40:                               ; CODE XREF: streamsavedir+8F↑j
.text:000000000000FD40                 movzx   eax, byte ptr [rcx+15h]
.text:000000000000FD44                 jmp     loc_FC90
.text:000000000000FD44 ; ---------------------------------------------------------------------------
.text:000000000000FD49                 align 10h
.text:000000000000FD50
.text:000000000000FD50 loc_FD50:                               ; CODE XREF: streamsavedir+79↑j
.text:000000000000FD50                 mov     ebx, [rbp+0]
.text:000000000000FD53                 test    ebx, ebx
.text:000000000000FD55                 jnz     loc_FF40
.text:000000000000FD5B                 cmp     [rsp+78h+compar], 0
.text:000000000000FD61                 jz      loc_FE10
.text:000000000000FD67                 test    r12, r12
.text:000000000000FD6A                 lea     rbx, [r14+1]
.text:000000000000FD6E                 jnz     short loc_FDA0
.text:000000000000FD70                 mov     rdi, rbx
.text:000000000000FD73                 call    xmalloc
.text:000000000000FD78                 mov     r13, rax
.text:000000000000FD7B                 mov     rbx, rax
.text:000000000000FD7E
.text:000000000000FD7E loc_FD7E:                               ; CODE XREF: streamsavedir+1D6↓j
.text:000000000000FD7E                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000FD83                 call    free
.text:000000000000FD88
.text:000000000000FD88 loc_FD88:                               ; CODE XREF: streamsavedir+1F0↓j
.text:000000000000FD88                                         ; streamsavedir+2EA↓j
.text:000000000000FD88                 mov     byte ptr [rbx], 0
.text:000000000000FD8B
.text:000000000000FD8B loc_FD8B:                               ; CODE XREF: streamsavedir+328↓j
.text:000000000000FD8B                                         ; streamsavedir+330↓j
.text:000000000000FD8B                 add     rsp, 48h
.text:000000000000FD8F                 mov     rax, r13
.text:000000000000FD92                 pop     rbx
.text:000000000000FD93                 pop     rbp
.text:000000000000FD94                 pop     r12
.text:000000000000FD96                 pop     r13
.text:000000000000FD98                 pop     r14
.text:000000000000FD9A                 pop     r15
.text:000000000000FD9C                 retn
.text:000000000000FD9C ; ---------------------------------------------------------------------------
.text:000000000000FD9D                 align 20h
.text:000000000000FDA0
.text:000000000000FDA0 loc_FDA0:                               ; CODE XREF: streamsavedir+13E↑j
.text:000000000000FDA0                 mov     r15, [rsp+78h+ptr]
.text:000000000000FDA5                 mov     rcx, [rsp+78h+compar] ; compar
.text:000000000000FDAA                 mov     rsi, r12        ; nmemb
.text:000000000000FDAD                 mov     edx, 10h        ; size
.text:000000000000FDB2                 shl     r12, 4
.text:000000000000FDB6                 mov     rdi, r15        ; base
.text:000000000000FDB9                 mov     rbp, r15
.text:000000000000FDBC                 add     r12, r15
.text:000000000000FDBF                 call    _qsort
.text:000000000000FDC4                 mov     rdi, rbx
.text:000000000000FDC7                 xor     ebx, ebx
.text:000000000000FDC9                 call    xmalloc
.text:000000000000FDCE                 mov     r13, rax
.text:000000000000FDD1                 nop     dword ptr [rax+00000000h]
.text:000000000000FDD8
.text:000000000000FDD8 loc_FDD8:                               ; CODE XREF: streamsavedir+1D1↓j
.text:000000000000FDD8                 mov     rsi, [rbp+0]    ; src
.text:000000000000FDDC                 lea     r14, [r13+rbx+0]
.text:000000000000FDE1                 add     rbp, 10h
.text:000000000000FDE5                 mov     rdi, r14        ; dest
.text:000000000000FDE8                 call    _stpcpy
.text:000000000000FDED                 mov     rdi, [rbp-10h]  ; ptr
.text:000000000000FDF1                 sub     rax, r14
.text:000000000000FDF4                 lea     rbx, [rbx+rax+1]
.text:000000000000FDF9                 call    free
.text:000000000000FDFE                 cmp     r12, rbp
.text:000000000000FE01                 jnz     short loc_FDD8
.text:000000000000FE03                 add     rbx, r13
.text:000000000000FE06                 jmp     loc_FD7E
.text:000000000000FE06 ; ---------------------------------------------------------------------------
.text:000000000000FE0B                 align 10h
.text:000000000000FE10
.text:000000000000FE10 loc_FE10:                               ; CODE XREF: streamsavedir+131↑j
.text:000000000000FE10                 cmp     [rsp+78h+var_58], r14
.text:000000000000FE15                 jz      loc_FF03
.text:000000000000FE1B                 lea     rbx, [r13+r14+0]
.text:000000000000FE20                 jmp     loc_FD88
.text:000000000000FE20 ; ---------------------------------------------------------------------------
.text:000000000000FE25                 align 8
.text:000000000000FE28
.text:000000000000FE28 loc_FE28:                               ; CODE XREF: streamsavedir+B5↑j
.text:000000000000FE28                 mov     rsi, [rsp+78h+n]
.text:000000000000FE2D                 mov     rax, [rsp+78h+var_58]
.text:000000000000FE32                 mov     rdx, rsi
.text:000000000000FE35                 sub     rax, r14
.text:000000000000FE38                 add     rdx, r14
.text:000000000000FE3B                 mov     [rsp+78h+var_48], rdx
.text:000000000000FE40                 setb    dl
.text:000000000000FE43                 cmp     rax, rsi
.text:000000000000FE46                 movzx   edx, dl
.text:000000000000FE49                 ja      short loc_FE95
.text:000000000000FE4B                 test    rdx, rdx
.text:000000000000FE4E                 jnz     loc_FF39
.text:000000000000FE54                 test    r13, r13
.text:000000000000FE57                 mov     rdx, [rsp+78h+var_48]
.text:000000000000FE5C                 jz      loc_FF1F
.text:000000000000FE62                 mov     rax, 5555555555555553h
.text:000000000000FE6C                 cmp     rdx, rax
.text:000000000000FE6F                 ja      loc_FF39
.text:000000000000FE75                 mov     rax, rdx
.text:000000000000FE78                 shr     rax, 1
.text:000000000000FE7B                 lea     rax, [rdx+rax+1]
.text:000000000000FE80                 mov     [rsp+78h+var_58], rax
.text:000000000000FE85
.text:000000000000FE85 loc_FE85:                               ; CODE XREF: streamsavedir+303↓j
.text:000000000000FE85                 mov     rsi, [rsp+78h+var_58]
.text:000000000000FE8A                 mov     rdi, r13
.text:000000000000FE8D                 call    xrealloc
.text:000000000000FE92                 mov     r13, rax
.text:000000000000FE95
.text:000000000000FE95 loc_FE95:                               ; CODE XREF: streamsavedir+219↑j
.text:000000000000FE95                 mov     rdx, [rsp+78h+n] ; n
.text:000000000000FE9A                 lea     rdi, [r13+r14+0] ; dest
.text:000000000000FE9F                 mov     rsi, r15        ; src
.text:000000000000FEA2                 call    _memcpy
.text:000000000000FEA7                 mov     r14, [rsp+78h+var_48]
.text:000000000000FEAC                 jmp     loc_FC94
.text:000000000000FEB1 ; ---------------------------------------------------------------------------
.text:000000000000FEB1
.text:000000000000FEB1 loc_FEB1:                               ; CODE XREF: streamsavedir+CF↑j
.text:000000000000FEB1                 cmp     [rsp+78h+ptr], 0
.text:000000000000FEB7                 jz      loc_FF65
.text:000000000000FEBD                 mov     rax, 555555555555554h
.text:000000000000FEC7                 cmp     r12, rax
.text:000000000000FECA                 ja      short loc_FF39
.text:000000000000FECC                 mov     rax, r12
.text:000000000000FECF                 shr     rax, 1
.text:000000000000FED2                 add     rax, [rsp+78h+var_40]
.text:000000000000FED7                 mov     [rsp+78h+var_50], rax
.text:000000000000FEDC
.text:000000000000FEDC loc_FEDC:                               ; CODE XREF: streamsavedir+36C↓j
.text:000000000000FEDC                 mov     rsi, [rsp+78h+var_50]
.text:000000000000FEE1                 mov     rdi, [rsp+78h+ptr]
.text:000000000000FEE6                 mov     [rsp+78h+var_48], rcx
.text:000000000000FEEB                 shl     rsi, 4
.text:000000000000FEEF                 call    xrealloc
.text:000000000000FEF4                 mov     rcx, [rsp+78h+var_48]
.text:000000000000FEF9                 mov     [rsp+78h+ptr], rax
.text:000000000000FEFE                 jmp     loc_FD05
.text:000000000000FF03 ; ---------------------------------------------------------------------------
.text:000000000000FF03
.text:000000000000FF03 loc_FF03:                               ; CODE XREF: streamsavedir+1E5↑j
.text:000000000000FF03                 mov     rbx, [rsp+78h+var_58]
.text:000000000000FF08                 mov     rdi, r13
.text:000000000000FF0B                 lea     rsi, [rbx+1]
.text:000000000000FF0F                 call    xrealloc
.text:000000000000FF14                 mov     r13, rax
.text:000000000000FF17                 add     rbx, rax
.text:000000000000FF1A                 jmp     loc_FD88
.text:000000000000FF1F ; ---------------------------------------------------------------------------
.text:000000000000FF1F
.text:000000000000FF1F loc_FF1F:                               ; CODE XREF: streamsavedir+22C↑j
.text:000000000000FF1F                 test    rdx, rdx
.text:000000000000FF22                 mov     eax, 80h
.text:000000000000FF27                 cmovnz  rax, rdx
.text:000000000000FF2B                 test    rax, rax
.text:000000000000FF2E                 mov     [rsp+78h+var_58], rax
.text:000000000000FF33                 jns     loc_FE85
.text:000000000000FF39
.text:000000000000FF39 loc_FF39:                               ; CODE XREF: streamsavedir+21E↑j
.text:000000000000FF39                                         ; streamsavedir+23F↑j ...
.text:000000000000FF39                 call    xalloc_die
.text:000000000000FF39 ; ---------------------------------------------------------------------------
.text:000000000000FF3E                 align 20h
.text:000000000000FF40
.text:000000000000FF40 loc_FF40:                               ; CODE XREF: streamsavedir+125↑j
.text:000000000000FF40                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000FF45                 call    free
.text:000000000000FF4A                 mov     rdi, r13        ; ptr
.text:000000000000FF4D                 xor     r13d, r13d
.text:000000000000FF50                 call    free
.text:000000000000FF55                 mov     [rbp+0], ebx
.text:000000000000FF58                 jmp     loc_FD8B
.text:000000000000FF5D ; ---------------------------------------------------------------------------
.text:000000000000FF5D
.text:000000000000FF5D loc_FF5D:                               ; CODE XREF: streamsavedir+23↑j
.text:000000000000FF5D                 xor     r13d, r13d
.text:000000000000FF60                 jmp     loc_FD8B
.text:000000000000FF65 ; ---------------------------------------------------------------------------
.text:000000000000FF65
.text:000000000000FF65 loc_FF65:                               ; CODE XREF: streamsavedir+287↑j
.text:000000000000FF65                 test    r12, r12
.text:000000000000FF68                 mov     eax, 8
.text:000000000000FF6D                 mov     edx, 10h
.text:000000000000FF72                 cmovnz  rax, r12
.text:000000000000FF76                 xor     esi, esi
.text:000000000000FF78                 mov     rdi, rax
.text:000000000000FF7B                 mov     [rsp+78h+var_50], rax
.text:000000000000FF80                 mov     rax, rdx
.text:000000000000FF83                 mul     rdi
.text:000000000000FF86                 jo      short loc_FFA1
.text:000000000000FF88
.text:000000000000FF88 loc_FF88:                               ; CODE XREF: streamsavedir+376↓j
.text:000000000000FF88                 test    rax, rax
.text:000000000000FF8B                 js      short loc_FF39
.text:000000000000FF8D                 test    rsi, rsi
.text:000000000000FF90                 jnz     short loc_FF39
.text:000000000000FF92                 lea     rax, [r12+1]
.text:000000000000FF97                 mov     [rsp+78h+var_40], rax
.text:000000000000FF9C                 jmp     loc_FEDC
.text:000000000000FFA1 ; ---------------------------------------------------------------------------
.text:000000000000FFA1
.text:000000000000FFA1 loc_FFA1:                               ; CODE XREF: streamsavedir+356↑j
.text:000000000000FFA1                 mov     esi, 1
.text:000000000000FFA6                 jmp     short loc_FF88
.text:000000000000FFA6 ; } // starts at FC30
.text:000000000000FFA6 streamsavedir   endp
.text:000000000000FFA6
.text:000000000000FFA6 ; ---------------------------------------------------------------------------
.text:000000000000FFA8                 align 10h
.text:000000000000FFB0
.text:000000000000FFB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000FFB0
.text:000000000000FFB0
.text:000000000000FFB0                 public savedir
.text:000000000000FFB0 savedir         proc near               ; CODE XREF: copy_internal+1DA7↑p
.text:000000000000FFB0 ; __unwind {
.text:000000000000FFB0                 push    r12
.text:000000000000FFB2                 push    rbp
.text:000000000000FFB3                 mov     ebp, esi
.text:000000000000FFB5                 push    rbx
.text:000000000000FFB6                 call    opendir_safer
.text:000000000000FFBB                 test    rax, rax
.text:000000000000FFBE                 jz      short loc_FFE8
.text:000000000000FFC0                 mov     esi, ebp
.text:000000000000FFC2                 mov     rbx, rax
.text:000000000000FFC5                 mov     rdi, rax        ; dirp
.text:000000000000FFC8                 call    streamsavedir
.text:000000000000FFCD                 mov     rdi, rbx        ; dirp
.text:000000000000FFD0                 mov     rbp, rax
.text:000000000000FFD3                 call    _closedir
.text:000000000000FFD8                 test    eax, eax
.text:000000000000FFDA                 jnz     short loc_FFF0
.text:000000000000FFDC
.text:000000000000FFDC loc_FFDC:                               ; CODE XREF: savedir+3A↓j
.text:000000000000FFDC                                         ; savedir+58↓j
.text:000000000000FFDC                 mov     rax, rbp
.text:000000000000FFDF                 pop     rbx
.text:000000000000FFE0                 pop     rbp
.text:000000000000FFE1                 pop     r12
.text:000000000000FFE3                 retn
.text:000000000000FFE3 ; ---------------------------------------------------------------------------
.text:000000000000FFE4                 align 8
.text:000000000000FFE8
.text:000000000000FFE8 loc_FFE8:                               ; CODE XREF: savedir+E↑j
.text:000000000000FFE8                 xor     ebp, ebp
.text:000000000000FFEA                 jmp     short loc_FFDC
.text:000000000000FFEA ; ---------------------------------------------------------------------------
.text:000000000000FFEC                 align 10h
.text:000000000000FFF0
.text:000000000000FFF0 loc_FFF0:                               ; CODE XREF: savedir+2A↑j
.text:000000000000FFF0                 call    ___errno_location
.text:000000000000FFF5                 mov     r12d, [rax]
.text:000000000000FFF8                 mov     rbx, rax
.text:000000000000FFFB                 mov     rdi, rbp        ; ptr
.text:000000000000FFFE                 call    free
.text:0000000000010003                 xor     ebp, ebp
.text:0000000000010005                 mov     [rbx], r12d
.text:0000000000010008                 jmp     short loc_FFDC
.text:0000000000010008 ; } // starts at FFB0
.text:0000000000010008 savedir         endp
.text:0000000000010008
.text:0000000000010008 ; ---------------------------------------------------------------------------
.text:000000000001000A                 align 10h
.text:0000000000010010
.text:0000000000010010 ; =============== S U B R O U T I N E =======================================
.text:0000000000010010
.text:0000000000010010
.text:0000000000010010                 public savewd_init
.text:0000000000010010 savewd_init     proc near
.text:0000000000010010 ; __unwind {
.text:0000000000010010                 mov     dword ptr [rdi], 0
.text:0000000000010016                 retn
.text:0000000000010016 ; } // starts at 10010
.text:0000000000010016 savewd_init     endp
.text:0000000000010016
.text:0000000000010016 ; ---------------------------------------------------------------------------
.text:0000000000010017                 align 20h
.text:0000000000010020
.text:0000000000010020 ; =============== S U B R O U T I N E =======================================
.text:0000000000010020
.text:0000000000010020
.text:0000000000010020                 public savewd_errno
.text:0000000000010020 savewd_errno    proc near
.text:0000000000010020 ; __unwind {
.text:0000000000010020                 xor     eax, eax
.text:0000000000010022                 cmp     dword ptr [rdi], 4
.text:0000000000010025                 jz      short loc_10030
.text:0000000000010027                 rep retn
.text:0000000000010027 ; ---------------------------------------------------------------------------
.text:0000000000010029                 align 10h
.text:0000000000010030
.text:0000000000010030 loc_10030:                              ; CODE XREF: savewd_errno+5↑j
.text:0000000000010030                 mov     eax, [rdi+4]
.text:0000000000010033                 retn
.text:0000000000010033 ; } // starts at 10020
.text:0000000000010033 savewd_errno    endp
.text:0000000000010033
.text:0000000000010033 ; ---------------------------------------------------------------------------
.text:0000000000010034                 align 20h
.text:0000000000010040
.text:0000000000010040 ; =============== S U B R O U T I N E =======================================
.text:0000000000010040
.text:0000000000010040
.text:0000000000010040                 public savewd_chdir
.text:0000000000010040 savewd_chdir    proc near               ; CODE XREF: mkancesdirs+A9↑p
.text:0000000000010040                                         ; make_dir_parents+28D↑p
.text:0000000000010040 ; __unwind {
.text:0000000000010040                 test    rcx, rcx
.text:0000000000010043                 push    r14
.text:0000000000010045                 mov     r14d, edx
.text:0000000000010048                 push    r13
.text:000000000001004A                 mov     r13, rsi
.text:000000000001004D                 push    r12
.text:000000000001004F                 mov     r12, rdi
.text:0000000000010052                 push    rbp
.text:0000000000010053                 mov     rbp, rcx
.text:0000000000010056                 push    rbx
.text:0000000000010057                 jz      loc_10178
.text:000000000001005D                 mov     esi, edx
.text:000000000001005F                 mov     rdi, r13
.text:0000000000010062                 shl     esi, 11h
.text:0000000000010065                 and     esi, 20000h
.text:000000000001006B                 or      esi, 10900h
.text:0000000000010071                 call    ___open_2
.text:0000000000010076                 mov     [rbp+0], eax
.text:0000000000010079                 mov     ebx, eax
.text:000000000001007B                 call    ___errno_location
.text:0000000000010080                 mov     eax, [rax]
.text:0000000000010082                 mov     [rbp+4], eax
.text:0000000000010085
.text:0000000000010085 loc_10085:                              ; CODE XREF: savewd_chdir+161↓j
.text:0000000000010085                 test    ebx, ebx
.text:0000000000010087                 js      short loc_100C8
.text:0000000000010089                 and     r14d, 2
.text:000000000001008D                 jz      short loc_100D6
.text:000000000001008F
.text:000000000001008F loc_1008F:                              ; CODE XREF: savewd_chdir+113↓j
.text:000000000001008F                                         ; savewd_chdir+1A8↓j ...
.text:000000000001008F                 test    rbp, rbp        ; jumptable 0000000000010153 cases 2,4,5
.text:0000000000010092                 setz    al
.text:0000000000010095                 xor     r14d, r14d
.text:0000000000010098
.text:0000000000010098 loc_10098:                              ; CODE XREF: savewd_chdir+176↓j
.text:0000000000010098                                         ; savewd_chdir+237↓j
.text:0000000000010098                 test    ebx, ebx
.text:000000000001009A                 js      short loc_100B6
.text:000000000001009C                 test    al, al
.text:000000000001009E                 jz      short loc_100B6
.text:00000000000100A0                 call    ___errno_location
.text:00000000000100A5                 mov     r12d, [rax]
.text:00000000000100A8                 mov     rbp, rax
.text:00000000000100AB                 mov     edi, ebx        ; fd
.text:00000000000100AD                 call    _close
.text:00000000000100B2                 mov     [rbp+0], r12d
.text:00000000000100B6
.text:00000000000100B6 loc_100B6:                              ; CODE XREF: savewd_chdir+5A↑j
.text:00000000000100B6                                         ; savewd_chdir+5E↑j ...
.text:00000000000100B6                 pop     rbx
.text:00000000000100B7                 mov     eax, r14d
.text:00000000000100BA                 pop     rbp
.text:00000000000100BB                 pop     r12
.text:00000000000100BD                 pop     r13
.text:00000000000100BF                 pop     r14
.text:00000000000100C1                 retn
.text:00000000000100C1 ; ---------------------------------------------------------------------------
.text:00000000000100C2                 align 8
.text:00000000000100C8
.text:00000000000100C8 loc_100C8:                              ; CODE XREF: savewd_chdir+47↑j
.text:00000000000100C8                 call    ___errno_location
.text:00000000000100CD                 cmp     dword ptr [rax], 0Dh
.text:00000000000100D0                 jnz     loc_102A0
.text:00000000000100D6
.text:00000000000100D6 loc_100D6:                              ; CODE XREF: savewd_chdir+4D↑j
.text:00000000000100D6                                         ; savewd_chdir+140↓j
.text:00000000000100D6                 mov     ecx, [r12]
.text:00000000000100DA                 cmp     ecx, 5
.text:00000000000100DD                 ja      loc_102CA
.text:00000000000100E3                 mov     eax, 1
.text:00000000000100E8                 shl     rax, cl
.text:00000000000100EB                 test    al, 36h
.text:00000000000100ED                 jnz     short loc_10124
.text:00000000000100EF                 test    al, 8
.text:00000000000100F1                 jnz     loc_101C0
.text:00000000000100F7                 test    ecx, ecx
.text:00000000000100F9                 jnz     loc_102CA
.text:00000000000100FF                 lea     rdi, filename   ; "."
.text:0000000000010106                 xor     esi, esi
.text:0000000000010108                 xor     eax, eax
.text:000000000001010A                 call    open_safer
.text:000000000001010F                 test    eax, eax
.text:0000000000010111                 js      loc_10220
.text:0000000000010117                 mov     dword ptr [r12], 1
.text:000000000001011F                 mov     [r12+4], eax
.text:0000000000010124
.text:0000000000010124 loc_10124:                              ; CODE XREF: savewd_chdir+AD↑j
.text:0000000000010124                                         ; savewd_chdir+1FE↓j ...
.text:0000000000010124                 test    ebx, ebx
.text:0000000000010126                 js      short loc_10158
.text:0000000000010128
.text:0000000000010128 loc_10128:                              ; CODE XREF: savewd_chdir+18F↓j
.text:0000000000010128                 mov     edi, ebx        ; fd
.text:000000000001012A                 call    _fchdir
.text:000000000001012F                 test    eax, eax
.text:0000000000010131                 mov     r14d, eax
.text:0000000000010134                 jnz     short loc_101B0
.text:0000000000010136
.text:0000000000010136 loc_10136:                              ; CODE XREF: savewd_chdir+125↓j
.text:0000000000010136                 cmp     dword ptr [r12], 5 ; switch 6 cases
.text:000000000001013B                 ja      def_10153       ; jumptable 0000000000010153 default case, case 0
.text:0000000000010141                 mov     eax, [r12]
.text:0000000000010145                 lea     rdx, jpt_10153
.text:000000000001014C                 movsxd  rax, ds:(jpt_10153 - 18850h)[rdx+rax*4]
.text:0000000000010150                 add     rax, rdx
.text:0000000000010153                 jmp     rax             ; switch jump
.text:0000000000010153 ; ---------------------------------------------------------------------------
.text:0000000000010155                 align 8
.text:0000000000010158
.text:0000000000010158 loc_10158:                              ; CODE XREF: savewd_chdir+E6↑j
.text:0000000000010158                                         ; savewd_chdir+195↓j
.text:0000000000010158                 mov     rdi, r13        ; path
.text:000000000001015B                 call    _chdir
.text:0000000000010160                 test    eax, eax
.text:0000000000010162                 mov     r14d, eax
.text:0000000000010165                 jz      short loc_10136
.text:0000000000010167                 pop     rbx
.text:0000000000010168                 mov     eax, r14d
.text:000000000001016B                 pop     rbp
.text:000000000001016C                 pop     r12
.text:000000000001016E                 pop     r13
.text:0000000000010170                 pop     r14
.text:0000000000010172                 retn
.text:0000000000010172 ; ---------------------------------------------------------------------------
.text:0000000000010173                 align 8
.text:0000000000010178
.text:0000000000010178 loc_10178:                              ; CODE XREF: savewd_chdir+17↑j
.text:0000000000010178                 test    dl, 1
.text:000000000001017B                 mov     ebx, 0FFFFFFFFh
.text:0000000000010180                 jz      loc_100D6
.text:0000000000010186                 mov     esi, edx
.text:0000000000010188                 mov     rdi, r13
.text:000000000001018B                 shl     esi, 11h
.text:000000000001018E                 and     esi, 20000h
.text:0000000000010194                 or      esi, 10900h
.text:000000000001019A                 call    ___open_2
.text:000000000001019F                 mov     ebx, eax
.text:00000000000101A1                 jmp     loc_10085
.text:00000000000101A1 ; ---------------------------------------------------------------------------
.text:00000000000101A6                 align 10h
.text:00000000000101B0
.text:00000000000101B0 loc_101B0:                              ; CODE XREF: savewd_chdir+F4↑j
.text:00000000000101B0                 test    rbp, rbp
.text:00000000000101B3                 setz    al
.text:00000000000101B6                 jmp     loc_10098
.text:00000000000101B6 ; ---------------------------------------------------------------------------
.text:00000000000101BB                 align 20h
.text:00000000000101C0
.text:00000000000101C0 loc_101C0:                              ; CODE XREF: savewd_chdir+B1↑j
.text:00000000000101C0                 mov     edx, [r12+4]
.text:00000000000101C5                 test    edx, edx
.text:00000000000101C7                 js      loc_10259
.text:00000000000101CD                 test    ebx, ebx
.text:00000000000101CF                 jns     loc_10128
.text:00000000000101D5                 jmp     short loc_10158
.text:00000000000101D5 ; ---------------------------------------------------------------------------
.text:00000000000101D7                 align 20h
.text:00000000000101E0
.text:00000000000101E0 loc_101E0:                              ; CODE XREF: savewd_chdir+113↑j
.text:00000000000101E0                                         ; DATA XREF: .rodata:jpt_10153↓o
.text:00000000000101E0                 mov     dword ptr [r12], 2 ; jumptable 0000000000010153 case 1
.text:00000000000101E8                 jmp     loc_1008F       ; jumptable 0000000000010153 cases 2,4,5
.text:00000000000101E8 ; ---------------------------------------------------------------------------
.text:00000000000101ED                 align 10h
.text:00000000000101F0
.text:00000000000101F0 loc_101F0:                              ; CODE XREF: savewd_chdir+113↑j
.text:00000000000101F0                                         ; DATA XREF: .rodata:jpt_10153↓o
.text:00000000000101F0                 mov     eax, [r12+4]    ; jumptable 0000000000010153 case 3
.text:00000000000101F5                 test    eax, eax
.text:00000000000101F7                 jz      loc_1008F       ; jumptable 0000000000010153 cases 2,4,5
.text:00000000000101FD                 lea     rcx, __PRETTY_FUNCTION___4461 ; "savewd_chdir"
.text:0000000000010204                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/savewd.c"
.text:000000000001020B                 lea     rdi, aWdValChild0 ; "wd->val.child == 0"
.text:0000000000010212                 mov     edx, 9Bh        ; line
.text:0000000000010217                 call    ___assert_fail
.text:0000000000010217 ; ---------------------------------------------------------------------------
.text:000000000001021C                 align 20h
.text:0000000000010220
.text:0000000000010220 loc_10220:                              ; CODE XREF: savewd_chdir+D1↑j
.text:0000000000010220                 call    ___errno_location
.text:0000000000010225                 mov     eax, [rax]
.text:0000000000010227                 cmp     eax, 0Dh
.text:000000000001022A                 jz      short loc_10248
.text:000000000001022C                 cmp     eax, 74h ; 't'
.text:000000000001022F                 jz      short loc_10248
.text:0000000000010231                 mov     dword ptr [r12], 4
.text:0000000000010239                 mov     [r12+4], eax
.text:000000000001023E                 jmp     loc_10124
.text:000000000001023E ; ---------------------------------------------------------------------------
.text:0000000000010243                 align 8
.text:0000000000010248
.text:0000000000010248 loc_10248:                              ; CODE XREF: savewd_chdir+1EA↑j
.text:0000000000010248                                         ; savewd_chdir+1EF↑j
.text:0000000000010248                 mov     dword ptr [r12], 3
.text:0000000000010250                 mov     dword ptr [r12+4], 0FFFFFFFFh
.text:0000000000010259
.text:0000000000010259 loc_10259:                              ; CODE XREF: savewd_chdir+187↑j
.text:0000000000010259                 call    _fork
.text:000000000001025E                 cmp     eax, 0
.text:0000000000010261                 mov     [r12+4], eax
.text:0000000000010266                 jz      loc_10124
.text:000000000001026C                 mov     eax, 1
.text:0000000000010271                 mov     r14d, 0FFFFFFFEh
.text:0000000000010277                 jg      loc_10098
.text:000000000001027D                 mov     dword ptr [r12], 4
.text:0000000000010285                 call    ___errno_location
.text:000000000001028A                 mov     eax, [rax]
.text:000000000001028C                 mov     [r12+4], eax
.text:0000000000010291                 jmp     loc_10124
.text:0000000000010291 ; ---------------------------------------------------------------------------
.text:0000000000010296                 align 20h
.text:00000000000102A0
.text:00000000000102A0 loc_102A0:                              ; CODE XREF: savewd_chdir+90↑j
.text:00000000000102A0                 mov     r14d, 0FFFFFFFFh
.text:00000000000102A6                 jmp     loc_100B6
.text:00000000000102AB ; ---------------------------------------------------------------------------
.text:00000000000102AB
.text:00000000000102AB def_10153:                              ; CODE XREF: savewd_chdir+FB↑j
.text:00000000000102AB                                         ; savewd_chdir+113↑j
.text:00000000000102AB                                         ; DATA XREF: ...
.text:00000000000102AB                 lea     rcx, __PRETTY_FUNCTION___4461 ; jumptable 0000000000010153 default case, case 0
.text:00000000000102B2                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/savewd.c"
.text:00000000000102B9                 lea     rdi, aWdValChild0_0+10h ; assertion
.text:00000000000102C0                 mov     edx, 9Fh        ; line
.text:00000000000102C5                 call    ___assert_fail
.text:00000000000102CA ; ---------------------------------------------------------------------------
.text:00000000000102CA
.text:00000000000102CA loc_102CA:                              ; CODE XREF: savewd_chdir+9D↑j
.text:00000000000102CA                                         ; savewd_chdir+B9↑j
.text:00000000000102CA                 lea     rcx, __PRETTY_FUNCTION___4446 ; "savewd_save"
.text:00000000000102D1                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/savewd.c"
.text:00000000000102D8                 lea     rdi, aWdValChild0_0+10h ; assertion
.text:00000000000102DF                 mov     edx, 63h ; 'c'  ; line
.text:00000000000102E4                 call    ___assert_fail
.text:00000000000102E4 ; } // starts at 10040
.text:00000000000102E4 savewd_chdir    endp
.text:00000000000102E4
.text:00000000000102E4 ; ---------------------------------------------------------------------------
.text:00000000000102E9                 align 10h
.text:00000000000102F0
.text:00000000000102F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000102F0
.text:00000000000102F0
.text:00000000000102F0                 public savewd_restore
.text:00000000000102F0 savewd_restore  proc near               ; CODE XREF: mkancesdirs_safe_wd+9A↑p
.text:00000000000102F0                                         ; mkancesdirs_safe_wd+11F↑p ...
.text:00000000000102F0
.text:00000000000102F0 stat_loc        = dword ptr -24h
.text:00000000000102F0 var_20          = qword ptr -20h
.text:00000000000102F0
.text:00000000000102F0 ; __unwind {
.text:00000000000102F0                 push    r12
.text:00000000000102F2                 push    rbp
.text:00000000000102F3                 push    rbx
.text:00000000000102F4                 sub     rsp, 10h
.text:00000000000102F8                 mov     rax, fs:28h
.text:0000000000010301                 mov     [rsp+28h+var_20], rax
.text:0000000000010306                 xor     eax, eax
.text:0000000000010308                 cmp     dword ptr [rdi], 4 ; switch 5 cases
.text:000000000001030B                 ja      def_10324       ; jumptable 0000000000010324 default case
.text:0000000000010311                 mov     eax, [rdi]
.text:0000000000010313                 lea     rdx, jpt_10324
.text:000000000001031A                 mov     rbx, rdi
.text:000000000001031D                 movsxd  rax, ds:(jpt_10324 - 18868h)[rdx+rax*4]
.text:0000000000010321                 add     rax, rdx
.text:0000000000010324                 jmp     rax             ; switch jump
.text:0000000000010324 ; ---------------------------------------------------------------------------
.text:0000000000010326                 align 10h
.text:0000000000010330
.text:0000000000010330 loc_10330:                              ; CODE XREF: savewd_restore+34↑j
.text:0000000000010330                                         ; DATA XREF: .rodata:jpt_10324↓o
.text:0000000000010330                 mov     ebp, [rdi+4]    ; jumptable 0000000000010324 case 3
.text:0000000000010333                 cmp     ebp, 0
.text:0000000000010336                 jz      loc_1043C
.text:000000000001033C                 lea     r12, [rsp+28h+stat_loc]
.text:0000000000010341                 jg      short loc_1038A
.text:0000000000010343
.text:0000000000010343 loc_10343:                              ; CODE XREF: savewd_restore+34↑j
.text:0000000000010343                                         ; DATA XREF: .rodata:jpt_10324↓o
.text:0000000000010343                 xor     eax, eax        ; jumptable 0000000000010324 cases 0,1
.text:0000000000010345
.text:0000000000010345 loc_10345:                              ; CODE XREF: savewd_restore+8D↓j
.text:0000000000010345                                         ; savewd_restore+C8↓j ...
.text:0000000000010345                 mov     rcx, [rsp+28h+var_20]
.text:000000000001034A                 xor     rcx, fs:28h
.text:0000000000010353                 jnz     loc_10418
.text:0000000000010359                 add     rsp, 10h
.text:000000000001035D                 pop     rbx
.text:000000000001035E                 pop     rbp
.text:000000000001035F                 pop     r12
.text:0000000000010361                 retn
.text:0000000000010361 ; ---------------------------------------------------------------------------
.text:0000000000010362                 align 8
.text:0000000000010368
.text:0000000000010368 loc_10368:                              ; CODE XREF: savewd_restore+34↑j
.text:0000000000010368                                         ; DATA XREF: .rodata:jpt_10324↓o
.text:0000000000010368                 mov     r12d, [rdi+4]   ; jumptable 0000000000010324 case 4
.text:000000000001036C                 call    ___errno_location
.text:0000000000010371                 mov     rbp, rax
.text:0000000000010374
.text:0000000000010374 loc_10374:                              ; CODE XREF: savewd_restore+104↓j
.text:0000000000010374                 mov     [rbp+0], r12d
.text:0000000000010378                 mov     eax, 0FFFFFFFFh
.text:000000000001037D                 jmp     short loc_10345
.text:000000000001037D ; ---------------------------------------------------------------------------
.text:000000000001037F                 align 20h
.text:0000000000010380
.text:0000000000010380 loc_10380:                              ; CODE XREF: savewd_restore+A8↓j
.text:0000000000010380                 call    ___errno_location
.text:0000000000010385                 cmp     dword ptr [rax], 4
.text:0000000000010388                 jnz     short loc_103F9
.text:000000000001038A
.text:000000000001038A loc_1038A:                              ; CODE XREF: savewd_restore+51↑j
.text:000000000001038A                 xor     edx, edx        ; options
.text:000000000001038C                 mov     rsi, r12        ; stat_loc
.text:000000000001038F                 mov     edi, ebp        ; pid
.text:0000000000010391                 call    _waitpid
.text:0000000000010396                 test    eax, eax
.text:0000000000010398                 js      short loc_10380
.text:000000000001039A                 mov     eax, [rsp+28h+stat_loc]
.text:000000000001039E                 mov     dword ptr [rbx+4], 0FFFFFFFFh
.text:00000000000103A5                 mov     edi, eax
.text:00000000000103A7                 and     edi, 7Fh        ; sig
.text:00000000000103AA                 jz      short loc_103B5
.text:00000000000103AC                 call    _raise
.text:00000000000103B1                 mov     eax, [rsp+28h+stat_loc]
.text:00000000000103B5
.text:00000000000103B5 loc_103B5:                              ; CODE XREF: savewd_restore+BA↑j
.text:00000000000103B5                 movzx   eax, ah
.text:00000000000103B8                 jmp     short loc_10345
.text:00000000000103B8 ; ---------------------------------------------------------------------------
.text:00000000000103BA                 align 20h
.text:00000000000103C0
.text:00000000000103C0 loc_103C0:                              ; CODE XREF: savewd_restore+34↑j
.text:00000000000103C0                                         ; DATA XREF: .rodata:jpt_10324↓o
.text:00000000000103C0                 mov     edi, [rdi+4]    ; jumptable 0000000000010324 case 2
.text:00000000000103C3                 call    _fchdir
.text:00000000000103C8                 test    eax, eax
.text:00000000000103CA                 jnz     short loc_103D7
.text:00000000000103CC                 mov     dword ptr [rbx], 1
.text:00000000000103D2                 jmp     loc_10345
.text:00000000000103D7 ; ---------------------------------------------------------------------------
.text:00000000000103D7
.text:00000000000103D7 loc_103D7:                              ; CODE XREF: savewd_restore+DA↑j
.text:00000000000103D7                 call    ___errno_location
.text:00000000000103DC                 mov     edi, [rbx+4]    ; fd
.text:00000000000103DF                 mov     r12d, [rax]
.text:00000000000103E2                 mov     rbp, rax
.text:00000000000103E5                 call    _close
.text:00000000000103EA                 mov     dword ptr [rbx], 4
.text:00000000000103F0                 mov     [rbx+4], r12d
.text:00000000000103F4                 jmp     loc_10374
.text:00000000000103F9 ; ---------------------------------------------------------------------------
.text:00000000000103F9
.text:00000000000103F9 loc_103F9:                              ; CODE XREF: savewd_restore+98↑j
.text:00000000000103F9                 lea     rcx, __PRETTY_FUNCTION___4477 ; "savewd_restore"
.text:0000000000010400                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/savewd.c"
.text:0000000000010407                 lea     rdi, aErrnoLocation4 ; "(*__errno_location ()) == 4"
.text:000000000001040E                 mov     edx, 0D8h       ; line
.text:0000000000010413                 call    ___assert_fail
.text:0000000000010418 ; ---------------------------------------------------------------------------
.text:0000000000010418
.text:0000000000010418 loc_10418:                              ; CODE XREF: savewd_restore+63↑j
.text:0000000000010418                 call    ___stack_chk_fail
.text:000000000001041D ; ---------------------------------------------------------------------------
.text:000000000001041D
.text:000000000001041D def_10324:                              ; CODE XREF: savewd_restore+1B↑j
.text:000000000001041D                 lea     rcx, __PRETTY_FUNCTION___4477 ; jumptable 0000000000010324 default case
.text:0000000000010424                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/savewd.c"
.text:000000000001042B                 lea     rdi, aWdValChild0_0+10h ; assertion
.text:0000000000010432                 mov     edx, 0E2h       ; line
.text:0000000000010437                 call    ___assert_fail
.text:000000000001043C ; ---------------------------------------------------------------------------
.text:000000000001043C
.text:000000000001043C loc_1043C:                              ; CODE XREF: savewd_restore+46↑j
.text:000000000001043C                 mov     edi, esi        ; status
.text:000000000001043E                 call    __exit
.text:000000000001043E ; } // starts at 102F0
.text:000000000001043E savewd_restore  endp
.text:000000000001043E
.text:000000000001043E ; ---------------------------------------------------------------------------
.text:0000000000010443                 align 10h
.text:0000000000010450
.text:0000000000010450 ; =============== S U B R O U T I N E =======================================
.text:0000000000010450
.text:0000000000010450
.text:0000000000010450                 public savewd_finish
.text:0000000000010450 savewd_finish   proc near               ; CODE XREF: mkancesdirs_safe_wd+A2↑p
.text:0000000000010450                                         ; mkancesdirs_safe_wd+EE↑p ...
.text:0000000000010450 ; __unwind {
.text:0000000000010450                 push    rbx
.text:0000000000010451                 cmp     dword ptr [rdi], 4 ; switch 5 cases
.text:0000000000010454                 ja      short def_10469 ; jumptable 0000000000010469 default case
.text:0000000000010456                 mov     eax, [rdi]
.text:0000000000010458                 lea     rdx, jpt_10469
.text:000000000001045F                 mov     rbx, rdi
.text:0000000000010462                 movsxd  rax, ds:(jpt_10469 - 1887Ch)[rdx+rax*4]
.text:0000000000010466                 add     rax, rdx
.text:0000000000010469                 jmp     rax             ; switch jump
.text:0000000000010469 ; ---------------------------------------------------------------------------
.text:000000000001046B                 align 10h
.text:0000000000010470
.text:0000000000010470 loc_10470:                              ; CODE XREF: savewd_finish+19↑j
.text:0000000000010470                                         ; DATA XREF: .rodata:jpt_10469↓o
.text:0000000000010470                 mov     edi, [rdi+4]    ; jumptable 0000000000010469 cases 1,2
.text:0000000000010473                 call    _close
.text:0000000000010478
.text:0000000000010478 loc_10478:                              ; CODE XREF: savewd_finish+19↑j
.text:0000000000010478                                         ; savewd_finish+35↓j
.text:0000000000010478                                         ; DATA XREF: ...
.text:0000000000010478                 mov     dword ptr [rbx], 5 ; jumptable 0000000000010469 cases 0,4
.text:000000000001047E                 pop     rbx
.text:000000000001047F                 retn
.text:0000000000010480 ; ---------------------------------------------------------------------------
.text:0000000000010480
.text:0000000000010480 loc_10480:                              ; CODE XREF: savewd_finish+19↑j
.text:0000000000010480                                         ; DATA XREF: .rodata:jpt_10469↓o
.text:0000000000010480                 mov     eax, [rdi+4]    ; jumptable 0000000000010469 case 3
.text:0000000000010483                 test    eax, eax
.text:0000000000010485                 js      short loc_10478 ; jumptable 0000000000010469 cases 0,4
.text:0000000000010487                 lea     rcx, __PRETTY_FUNCTION___4491 ; "savewd_finish"
.text:000000000001048E                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/savewd.c"
.text:0000000000010495                 lea     rdi, aWdValChild0_0 ; "wd->val.child < 0"
.text:000000000001049C                 mov     edx, 0F7h       ; line
.text:00000000000104A1                 call    ___assert_fail
.text:00000000000104A6 ; ---------------------------------------------------------------------------
.text:00000000000104A6
.text:00000000000104A6 def_10469:                              ; CODE XREF: savewd_finish+4↑j
.text:00000000000104A6                 lea     rcx, __PRETTY_FUNCTION___4491 ; jumptable 0000000000010469 default case
.text:00000000000104AD                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/savewd.c"
.text:00000000000104B4                 lea     rdi, aWdValChild0_0+10h ; assertion
.text:00000000000104BB                 mov     edx, 0FBh       ; line
.text:00000000000104C0                 call    ___assert_fail
.text:00000000000104C0 ; } // starts at 10450
.text:00000000000104C0 savewd_finish   endp
.text:00000000000104C0
.text:00000000000104C0 ; ---------------------------------------------------------------------------
.text:00000000000104C5                 align 10h
.text:00000000000104D0
.text:00000000000104D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000104D0
.text:00000000000104D0
.text:00000000000104D0                 public savewd_process_files
.text:00000000000104D0 savewd_process_files proc near          ; CODE XREF: main+8EA↑p
.text:00000000000104D0
.text:00000000000104D0 var_60          = qword ptr -60h
.text:00000000000104D0 var_58          = qword ptr -58h
.text:00000000000104D0 var_50          = dword ptr -50h
.text:00000000000104D0 var_4C          = dword ptr -4Ch
.text:00000000000104D0 var_48          = dword ptr -48h
.text:00000000000104D0 var_44          = dword ptr -44h
.text:00000000000104D0 var_40          = qword ptr -40h
.text:00000000000104D0
.text:00000000000104D0 ; __unwind {
.text:00000000000104D0                 push    r15
.text:00000000000104D2                 push    r14
.text:00000000000104D4                 mov     eax, edi
.text:00000000000104D6                 push    r13
.text:00000000000104D8                 push    r12
.text:00000000000104DA                 sub     eax, 1
.text:00000000000104DD                 push    rbp
.text:00000000000104DE                 push    rbx
.text:00000000000104DF                 mov     r12, rcx
.text:00000000000104E2                 mov     rbp, rdx
.text:00000000000104E5                 sub     rsp, 38h
.text:00000000000104E9                 mov     rcx, fs:28h
.text:00000000000104F2                 mov     [rsp+68h+var_40], rcx
.text:00000000000104F7                 xor     ecx, ecx
.text:00000000000104F9                 test    eax, eax
.text:00000000000104FB                 mov     [rsp+68h+var_50], edi
.text:00000000000104FF                 mov     [rsp+68h+var_58], rsi
.text:0000000000010504                 mov     [rsp+68h+var_48], 0
.text:000000000001050C                 mov     [rsp+68h+var_4C], eax
.text:0000000000010510                 js      short loc_10552
.text:0000000000010512                 mov     r13d, eax
.text:0000000000010515                 cdqe
.text:0000000000010517                 lea     rdx, ds:0[rax*8]
.text:000000000001051F                 mov     rax, [rsi+rax*8]
.text:0000000000010523                 cmp     byte ptr [rax], 2Fh ; '/'
.text:0000000000010526                 jnz     loc_105D8
.text:000000000001052C                 lea     rax, [rsi+rdx-8]
.text:0000000000010531                 jmp     short loc_10548
.text:0000000000010531 ; ---------------------------------------------------------------------------
.text:0000000000010533                 align 8
.text:0000000000010538
.text:0000000000010538 loc_10538:                              ; CODE XREF: savewd_process_files+80↓j
.text:0000000000010538                 mov     rdx, [rax]
.text:000000000001053B                 sub     rax, 8
.text:000000000001053F                 cmp     byte ptr [rdx], 2Fh ; '/'
.text:0000000000010542                 jnz     loc_105D8
.text:0000000000010548
.text:0000000000010548 loc_10548:                              ; CODE XREF: savewd_process_files+61↑j
.text:0000000000010548                 sub     r13d, 1
.text:000000000001054C                 cmp     r13d, 0FFFFFFFFh
.text:0000000000010550                 jnz     short loc_10538
.text:0000000000010552
.text:0000000000010552 loc_10552:                              ; CODE XREF: savewd_process_files+40↑j
.text:0000000000010552                                         ; savewd_process_files+10B↓j
.text:0000000000010552                 lea     rbx, [rsp+68h+var_48]
.text:0000000000010557                 xor     r15d, r15d
.text:000000000001055A                 xor     r13d, r13d
.text:000000000001055D
.text:000000000001055D loc_1055D:                              ; CODE XREF: savewd_process_files+16E↓j
.text:000000000001055D                 mov     rdi, rbx
.text:0000000000010560                 call    savewd_finish
.text:0000000000010565                 cmp     [rsp+68h+var_50], r13d
.text:000000000001056A                 jle     short loc_105AB
.text:000000000001056C                 mov     ecx, [rsp+68h+var_4C]
.text:0000000000010570                 mov     rdi, [rsp+68h+var_58]
.text:0000000000010575                 movsxd  rax, r13d
.text:0000000000010578                 sub     ecx, r13d
.text:000000000001057B                 lea     r14, [rdi+rax*8]
.text:000000000001057F                 mov     r13, rcx
.text:0000000000010582                 add     r13, rax
.text:0000000000010585                 lea     r13, [rdi+r13*8+8]
.text:000000000001058A                 nop     word ptr [rax+rax+00h]
.text:0000000000010590
.text:0000000000010590 loc_10590:                              ; CODE XREF: savewd_process_files+D9↓j
.text:0000000000010590                 mov     rdi, [r14]
.text:0000000000010593                 mov     rdx, r12
.text:0000000000010596                 mov     rsi, rbx
.text:0000000000010599                 call    rbp
.text:000000000001059B                 cmp     r15d, eax
.text:000000000001059E                 cmovl   r15d, eax
.text:00000000000105A2                 add     r14, 8
.text:00000000000105A6                 cmp     r14, r13
.text:00000000000105A9                 jnz     short loc_10590
.text:00000000000105AB
.text:00000000000105AB loc_105AB:                              ; CODE XREF: savewd_process_files+9A↑j
.text:00000000000105AB                 mov     rcx, [rsp+68h+var_40]
.text:00000000000105B0                 xor     rcx, fs:28h
.text:00000000000105B9                 mov     eax, r15d
.text:00000000000105BC                 jnz     loc_10657
.text:00000000000105C2                 add     rsp, 38h
.text:00000000000105C6                 pop     rbx
.text:00000000000105C7                 pop     rbp
.text:00000000000105C8                 pop     r12
.text:00000000000105CA                 pop     r13
.text:00000000000105CC                 pop     r14
.text:00000000000105CE                 pop     r15
.text:00000000000105D0                 retn
.text:00000000000105D0 ; ---------------------------------------------------------------------------
.text:00000000000105D1                 align 8
.text:00000000000105D8
.text:00000000000105D8 loc_105D8:                              ; CODE XREF: savewd_process_files+56↑j
.text:00000000000105D8                                         ; savewd_process_files+72↑j
.text:00000000000105D8                 test    r13d, r13d
.text:00000000000105DB                 jle     loc_10552
.text:00000000000105E1                 mov     rcx, [rsp+68h+var_58]
.text:00000000000105E6                 lea     eax, [r13-1]
.text:00000000000105EA                 xor     r15d, r15d
.text:00000000000105ED                 lea     rbx, [rsp+68h+var_48]
.text:00000000000105F2                 lea     rax, [rcx+rax*8+8]
.text:00000000000105F7                 mov     r14, rcx
.text:00000000000105FA                 mov     [rsp+68h+var_60], rax
.text:00000000000105FF                 xor     eax, eax
.text:0000000000010601                 jmp     short loc_10648
.text:0000000000010601 ; ---------------------------------------------------------------------------
.text:0000000000010603                 align 8
.text:0000000000010608
.text:0000000000010608 loc_10608:                              ; CODE XREF: savewd_process_files+17B↓j
.text:0000000000010608                                         ; savewd_process_files+185↓j
.text:0000000000010608                 mov     rdx, r12
.text:000000000001060B                 mov     rsi, rbx
.text:000000000001060E                 mov     rdi, [r14]
.text:0000000000010611                 call    rbp
.text:0000000000010613                 cmp     r15d, eax
.text:0000000000010616                 cmovl   r15d, eax
.text:000000000001061A
.text:000000000001061A loc_1061A:                              ; CODE XREF: savewd_process_files+183↓j
.text:000000000001061A                 mov     rax, [r14+8]
.text:000000000001061E                 cmp     byte ptr [rax], 2Fh ; '/'
.text:0000000000010621                 jz      short loc_10635
.text:0000000000010623                 mov     esi, r15d
.text:0000000000010626                 mov     rdi, rbx
.text:0000000000010629                 call    savewd_restore
.text:000000000001062E                 cmp     r15d, eax
.text:0000000000010631                 cmovl   r15d, eax
.text:0000000000010635
.text:0000000000010635 loc_10635:                              ; CODE XREF: savewd_process_files+151↑j
.text:0000000000010635                 add     r14, 8
.text:0000000000010639                 cmp     r14, [rsp+68h+var_60]
.text:000000000001063E                 jz      loc_1055D
.text:0000000000010644                 mov     eax, [rsp+68h+var_48]
.text:0000000000010648
.text:0000000000010648 loc_10648:                              ; CODE XREF: savewd_process_files+131↑j
.text:0000000000010648                 cmp     eax, 3
.text:000000000001064B                 jnz     short loc_10608
.text:000000000001064D                 mov     eax, [rsp+68h+var_44]
.text:0000000000010651                 test    eax, eax
.text:0000000000010653                 jg      short loc_1061A
.text:0000000000010655                 jmp     short loc_10608
.text:0000000000010657 ; ---------------------------------------------------------------------------
.text:0000000000010657
.text:0000000000010657 loc_10657:                              ; CODE XREF: savewd_process_files+EC↑j
.text:0000000000010657                 call    ___stack_chk_fail
.text:0000000000010657 ; } // starts at 104D0
.text:0000000000010657 savewd_process_files endp
.text:0000000000010657
.text:0000000000010657 ; ---------------------------------------------------------------------------
.text:000000000001065C                 align 20h
.text:0000000000010660
.text:0000000000010660 ; =============== S U B R O U T I N E =======================================
.text:0000000000010660
.text:0000000000010660
.text:0000000000010660 ; __int64 __fastcall try_nocreate(char *filename)
.text:0000000000010660 try_nocreate    proc near               ; DATA XREF: gen_tempname_len+3D↓o
.text:0000000000010660
.text:0000000000010660 var_10          = qword ptr -10h
.text:0000000000010660
.text:0000000000010660 ; __unwind {
.text:0000000000010660                 push    rbx
.text:0000000000010661                 mov     rsi, rdi        ; filename
.text:0000000000010664                 mov     edi, 1          ; ver
.text:0000000000010669                 sub     rsp, 0A0h
.text:0000000000010670                 mov     rdx, rsp        ; stat_buf
.text:0000000000010673                 mov     rax, fs:28h
.text:000000000001067C                 mov     [rsp+0A8h+var_10], rax
.text:0000000000010684                 xor     eax, eax
.text:0000000000010686                 call    ___lxstat
.text:000000000001068B                 mov     ebx, eax
.text:000000000001068D                 call    ___errno_location
.text:0000000000010692                 test    ebx, ebx
.text:0000000000010694                 jz      short loc_106B0
.text:0000000000010696                 mov     edx, [rax]
.text:0000000000010698                 cmp     edx, 4Bh ; 'K'
.text:000000000001069B                 jz      short loc_106B0
.text:000000000001069D                 xor     eax, eax
.text:000000000001069F                 cmp     edx, 2
.text:00000000000106A2                 setnz   al
.text:00000000000106A5                 neg     eax
.text:00000000000106A7                 jmp     short loc_106BB
.text:00000000000106A7 ; ---------------------------------------------------------------------------
.text:00000000000106A9                 align 10h
.text:00000000000106B0
.text:00000000000106B0 loc_106B0:                              ; CODE XREF: try_nocreate+34↑j
.text:00000000000106B0                                         ; try_nocreate+3B↑j
.text:00000000000106B0                 mov     dword ptr [rax], 11h
.text:00000000000106B6                 mov     eax, 0FFFFFFFFh
.text:00000000000106BB
.text:00000000000106BB loc_106BB:                              ; CODE XREF: try_nocreate+47↑j
.text:00000000000106BB                 mov     rcx, [rsp+0A8h+var_10]
.text:00000000000106C3                 xor     rcx, fs:28h
.text:00000000000106CC                 jnz     short loc_106D7
.text:00000000000106CE                 add     rsp, 0A0h
.text:00000000000106D5                 pop     rbx
.text:00000000000106D6                 retn
.text:00000000000106D7 ; ---------------------------------------------------------------------------
.text:00000000000106D7
.text:00000000000106D7 loc_106D7:                              ; CODE XREF: try_nocreate+6C↑j
.text:00000000000106D7                 call    ___stack_chk_fail
.text:00000000000106D7 ; } // starts at 10660
.text:00000000000106D7 try_nocreate    endp
.text:00000000000106D7
.text:00000000000106D7 ; ---------------------------------------------------------------------------
.text:00000000000106DC                 align 20h
.text:00000000000106E0
.text:00000000000106E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000106E0
.text:00000000000106E0
.text:00000000000106E0 try_dir         proc near               ; DATA XREF: gen_tempname_len+75↓o
.text:00000000000106E0 ; __unwind {
.text:00000000000106E0                 mov     esi, 1C0h       ; mode
.text:00000000000106E5                 jmp     _mkdir
.text:00000000000106E5 ; } // starts at 106E0
.text:00000000000106E5 try_dir         endp
.text:00000000000106E5
.text:00000000000106E5 ; ---------------------------------------------------------------------------
.text:00000000000106EA                 align 10h
.text:00000000000106F0
.text:00000000000106F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000106F0
.text:00000000000106F0
.text:00000000000106F0 try_file        proc near               ; DATA XREF: gen_tempname_len+55↓o
.text:00000000000106F0 ; __unwind {
.text:00000000000106F0                 mov     esi, [rsi]
.text:00000000000106F2                 mov     edx, 180h
.text:00000000000106F7                 xor     eax, eax
.text:00000000000106F9                 and     sil, 3Ch
.text:00000000000106FD                 or      sil, 0C2h       ; oflag
.text:0000000000010701                 jmp     _open
.text:0000000000010701 ; } // starts at 106F0
.text:0000000000010701 try_file        endp
.text:0000000000010701
.text:0000000000010701 ; ---------------------------------------------------------------------------
.text:0000000000010706                 align 10h
.text:0000000000010710
.text:0000000000010710 ; =============== S U B R O U T I N E =======================================
.text:0000000000010710
.text:0000000000010710
.text:0000000000010710 ; __int64 __fastcall try_tempname_len(char *s)
.text:0000000000010710                 public try_tempname_len
.text:0000000000010710 try_tempname_len proc near              ; CODE XREF: force_linkat+96↑p
.text:0000000000010710                                         ; force_symlinkat+7A↑p ...
.text:0000000000010710
.text:0000000000010710 var_68          = qword ptr -68h
.text:0000000000010710 var_60          = qword ptr -60h
.text:0000000000010710 var_58          = qword ptr -58h
.text:0000000000010710 var_50          = qword ptr -50h
.text:0000000000010710 var_48          = qword ptr -48h
.text:0000000000010710 var_3C          = dword ptr -3Ch
.text:0000000000010710
.text:0000000000010710 ; __unwind {
.text:0000000000010710                 push    r15
.text:0000000000010712                 push    r14
.text:0000000000010714                 mov     r15, rdi
.text:0000000000010717                 push    r13
.text:0000000000010719                 push    r12
.text:000000000001071B                 mov     r14, r8
.text:000000000001071E                 push    rbp
.text:000000000001071F                 push    rbx
.text:0000000000010720                 mov     ebp, esi
.text:0000000000010722                 sub     rsp, 38h
.text:0000000000010726                 mov     [rsp+68h+var_50], rdx
.text:000000000001072B                 mov     [rsp+68h+var_68], rdi
.text:000000000001072F                 mov     [rsp+68h+var_48], rcx
.text:0000000000010734                 call    ___errno_location
.text:0000000000010739                 mov     [rsp+68h+var_60], rax
.text:000000000001073E                 mov     eax, [rax]
.text:0000000000010740                 mov     rdi, r15        ; s
.text:0000000000010743                 mov     [rsp+68h+var_3C], eax
.text:0000000000010747                 call    _strlen
.text:000000000001074C                 movsxd  rsi, ebp
.text:000000000001074F                 lea     rdx, [rsi+r14]
.text:0000000000010753                 cmp     rdx, rax
.text:0000000000010756                 ja      loc_1086B
.text:000000000001075C                 sub     rax, r14
.text:000000000001075F                 mov     rbx, rax
.text:0000000000010762                 sub     rbx, rsi
.text:0000000000010765                 lea     rsi, name+13h   ; accept
.text:000000000001076C                 lea     rax, [r15+rbx]
.text:0000000000010770                 mov     rdi, rax        ; s
.text:0000000000010773                 mov     [rsp+68h+var_58], rax
.text:0000000000010778                 call    _strspn
.text:000000000001077D                 cmp     r14, rax
.text:0000000000010780                 ja      loc_1086B
.text:0000000000010786                 xor     edi, edi
.text:0000000000010788                 mov     rsi, r14
.text:000000000001078B                 call    randint_all_new
.text:0000000000010790                 test    rax, rax
.text:0000000000010793                 mov     rbp, rax
.text:0000000000010796                 jz      loc_1087D
.text:000000000001079C                 mov     rax, [rsp+68h+var_68]
.text:00000000000107A0                 lea     r12, letters    ; "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLM"...
.text:00000000000107A7                 mov     r13d, 3A2F8h
.text:00000000000107AD                 add     rax, r14
.text:00000000000107B0                 add     rbx, rax
.text:00000000000107B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000107B8
.text:00000000000107B8 loc_107B8:                              ; CODE XREF: try_tempname_len+FD↓j
.text:00000000000107B8                 test    r14, r14
.text:00000000000107BB                 mov     r15, [rsp+68h+var_58]
.text:00000000000107C0                 jz      short loc_107E7
.text:00000000000107C2                 nop     word ptr [rax+rax+00h]
.text:00000000000107C8
.text:00000000000107C8 loc_107C8:                              ; CODE XREF: try_tempname_len+D5↓j
.text:00000000000107C8                 mov     esi, 3Dh ; '='
.text:00000000000107CD                 mov     rdi, rbp
.text:00000000000107D0                 add     r15, 1
.text:00000000000107D4                 call    randint_genmax
.text:00000000000107D9                 movzx   eax, byte ptr [r12+rax]
.text:00000000000107DE                 mov     [r15-1], al
.text:00000000000107E2                 cmp     r15, rbx
.text:00000000000107E5                 jnz     short loc_107C8
.text:00000000000107E7
.text:00000000000107E7 loc_107E7:                              ; CODE XREF: try_tempname_len+B0↑j
.text:00000000000107E7                 mov     rsi, [rsp+68h+var_50]
.text:00000000000107EC                 mov     rdi, [rsp+68h+var_68]
.text:00000000000107F0                 mov     rax, [rsp+68h+var_48]
.text:00000000000107F5                 call    rax
.text:00000000000107F7                 test    eax, eax
.text:00000000000107F9                 mov     edx, eax
.text:00000000000107FB                 jns     short loc_10829
.text:00000000000107FD                 mov     rax, [rsp+68h+var_60]
.text:0000000000010802                 mov     ecx, [rax]
.text:0000000000010804                 cmp     ecx, 11h
.text:0000000000010807                 jnz     short loc_10864
.text:0000000000010809                 sub     r13d, 1
.text:000000000001080D                 jnz     short loc_107B8
.text:000000000001080F                 mov     rdi, rbp        ; ptr
.text:0000000000010812                 call    randint_all_free
.text:0000000000010817                 mov     rax, [rsp+68h+var_60]
.text:000000000001081C                 mov     edx, 0FFFFFFFFh
.text:0000000000010821                 mov     dword ptr [rax], 11h
.text:0000000000010827                 jmp     short loc_10853
.text:0000000000010829 ; ---------------------------------------------------------------------------
.text:0000000000010829
.text:0000000000010829 loc_10829:                              ; CODE XREF: try_tempname_len+EB↑j
.text:0000000000010829                 mov     rcx, [rsp+68h+var_60]
.text:000000000001082E                 mov     eax, [rsp+68h+var_3C]
.text:0000000000010832                 mov     [rcx], eax
.text:0000000000010834                 mov     ecx, eax
.text:0000000000010836
.text:0000000000010836 loc_10836:                              ; CODE XREF: try_tempname_len+159↓j
.text:0000000000010836                 mov     rdi, rbp        ; ptr
.text:0000000000010839                 mov     dword ptr [rsp+68h+var_58], edx
.text:000000000001083D                 mov     dword ptr [rsp+68h+var_68], ecx
.text:0000000000010840                 call    randint_all_free
.text:0000000000010845                 mov     rax, [rsp+68h+var_60]
.text:000000000001084A                 mov     ecx, dword ptr [rsp+68h+var_68]
.text:000000000001084D                 mov     edx, dword ptr [rsp+68h+var_58]
.text:0000000000010851                 mov     [rax], ecx
.text:0000000000010853
.text:0000000000010853 loc_10853:                              ; CODE XREF: try_tempname_len+117↑j
.text:0000000000010853                                         ; try_tempname_len+16B↓j ...
.text:0000000000010853                 add     rsp, 38h
.text:0000000000010857                 mov     eax, edx
.text:0000000000010859                 pop     rbx
.text:000000000001085A                 pop     rbp
.text:000000000001085B                 pop     r12
.text:000000000001085D                 pop     r13
.text:000000000001085F                 pop     r14
.text:0000000000010861                 pop     r15
.text:0000000000010863                 retn
.text:0000000000010864 ; ---------------------------------------------------------------------------
.text:0000000000010864
.text:0000000000010864 loc_10864:                              ; CODE XREF: try_tempname_len+F7↑j
.text:0000000000010864                 mov     edx, 0FFFFFFFFh
.text:0000000000010869                 jmp     short loc_10836
.text:000000000001086B ; ---------------------------------------------------------------------------
.text:000000000001086B
.text:000000000001086B loc_1086B:                              ; CODE XREF: try_tempname_len+46↑j
.text:000000000001086B                                         ; try_tempname_len+70↑j
.text:000000000001086B                 mov     rax, [rsp+68h+var_60]
.text:0000000000010870                 mov     edx, 0FFFFFFFFh
.text:0000000000010875                 mov     dword ptr [rax], 16h
.text:000000000001087B                 jmp     short loc_10853
.text:000000000001087D ; ---------------------------------------------------------------------------
.text:000000000001087D
.text:000000000001087D loc_1087D:                              ; CODE XREF: try_tempname_len+86↑j
.text:000000000001087D                 mov     edx, 0FFFFFFFFh
.text:0000000000010882                 jmp     short loc_10853
.text:0000000000010882 ; } // starts at 10710
.text:0000000000010882 try_tempname_len endp
.text:0000000000010882
.text:0000000000010882 ; ---------------------------------------------------------------------------
.text:0000000000010884                 align 10h
.text:0000000000010890
.text:0000000000010890 ; =============== S U B R O U T I N E =======================================
.text:0000000000010890
.text:0000000000010890
.text:0000000000010890                 public gen_tempname_len
.text:0000000000010890 gen_tempname_len proc near              ; CODE XREF: gen_tempname+6↓j
.text:0000000000010890
.text:0000000000010890 var_C           = dword ptr -0Ch
.text:0000000000010890
.text:0000000000010890 ; __unwind {
.text:0000000000010890                 sub     rsp, 18h
.text:0000000000010894                 cmp     ecx, 1
.text:0000000000010897                 mov     [rsp+18h+var_C], edx
.text:000000000001089B                 jz      short loc_10900
.text:000000000001089D                 cmp     ecx, 2
.text:00000000000108A0                 jz      short loc_108C8
.text:00000000000108A2                 test    ecx, ecx
.text:00000000000108A4                 jz      short loc_108E0
.text:00000000000108A6                 lea     rcx, __PRETTY_FUNCTION___5642 ; "gen_tempname_len"
.text:00000000000108AD                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/tempname.c"
.text:00000000000108B4                 lea     rdi, s          ; "! \"invalid KIND in __gen_tempname\""
.text:00000000000108BB                 mov     edx, 147h       ; line
.text:00000000000108C0                 call    ___assert_fail
.text:00000000000108C0 ; ---------------------------------------------------------------------------
.text:00000000000108C5                 align 8
.text:00000000000108C8
.text:00000000000108C8 loc_108C8:                              ; CODE XREF: gen_tempname_len+10↑j
.text:00000000000108C8                 lea     rdx, [rsp+18h+var_C]
.text:00000000000108CD                 lea     rcx, try_nocreate
.text:00000000000108D4                 call    try_tempname_len
.text:00000000000108D9                 add     rsp, 18h
.text:00000000000108DD                 retn
.text:00000000000108DD ; ---------------------------------------------------------------------------
.text:00000000000108DE                 align 20h
.text:00000000000108E0
.text:00000000000108E0 loc_108E0:                              ; CODE XREF: gen_tempname_len+14↑j
.text:00000000000108E0                 lea     rdx, [rsp+18h+var_C]
.text:00000000000108E5                 lea     rcx, try_file
.text:00000000000108EC                 call    try_tempname_len
.text:00000000000108F1                 add     rsp, 18h
.text:00000000000108F5                 retn
.text:00000000000108F5 ; ---------------------------------------------------------------------------
.text:00000000000108F6                 align 20h
.text:0000000000010900
.text:0000000000010900 loc_10900:                              ; CODE XREF: gen_tempname_len+B↑j
.text:0000000000010900                 lea     rdx, [rsp+18h+var_C]
.text:0000000000010905                 lea     rcx, try_dir
.text:000000000001090C                 call    try_tempname_len
.text:0000000000010911                 add     rsp, 18h
.text:0000000000010915                 retn
.text:0000000000010915 ; } // starts at 10890
.text:0000000000010915 gen_tempname_len endp
.text:0000000000010915
.text:0000000000010915 ; ---------------------------------------------------------------------------
.text:0000000000010916                 align 20h
.text:0000000000010920
.text:0000000000010920 ; =============== S U B R O U T I N E =======================================
.text:0000000000010920
.text:0000000000010920
.text:0000000000010920                 public gen_tempname
.text:0000000000010920 gen_tempname    proc near
.text:0000000000010920 ; __unwind {
.text:0000000000010920                 mov     r8d, 6
.text:0000000000010926                 jmp     gen_tempname_len
.text:0000000000010926 ; } // starts at 10920
.text:0000000000010926 gen_tempname    endp
.text:0000000000010926
.text:0000000000010926 ; ---------------------------------------------------------------------------
.text:000000000001092B                 align 10h
.text:0000000000010930
.text:0000000000010930 ; =============== S U B R O U T I N E =======================================
.text:0000000000010930
.text:0000000000010930
.text:0000000000010930                 public try_tempname
.text:0000000000010930 try_tempname    proc near
.text:0000000000010930 ; __unwind {
.text:0000000000010930                 mov     r8d, 6
.text:0000000000010936                 jmp     try_tempname_len
.text:0000000000010936 ; } // starts at 10930
.text:0000000000010936 try_tempname    endp
.text:0000000000010936
.text:0000000000010936 ; ---------------------------------------------------------------------------
.text:000000000001093B                 align 20h
.text:0000000000010940
.text:0000000000010940 ; =============== S U B R O U T I N E =======================================
.text:0000000000010940
.text:0000000000010940 ; Attributes: info_from_lumina
.text:0000000000010940
.text:0000000000010940 ; __int64 __fastcall fd_safer_flag(int fd)
.text:0000000000010940                 public fd_safer_flag
.text:0000000000010940 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:0000000000010940                                         ; openat_safer+29↓p
.text:0000000000010940 ; __unwind {
.text:0000000000010940                 push    r13
.text:0000000000010942                 push    r12
.text:0000000000010944                 push    rbp
.text:0000000000010945                 push    rbx
.text:0000000000010946                 mov     ebx, edi
.text:0000000000010948                 sub     rsp, 8
.text:000000000001094C                 cmp     edi, 2
.text:000000000001094F                 ja      short loc_10972
.text:0000000000010951                 call    dup_safer
.text:0000000000010956                 mov     r12d, eax
.text:0000000000010959                 call    ___errno_location
.text:000000000001095E                 mov     r13d, [rax]
.text:0000000000010961                 mov     rbp, rax
.text:0000000000010964                 mov     edi, ebx        ; fd
.text:0000000000010966                 call    _close
.text:000000000001096B                 mov     ebx, r12d
.text:000000000001096E                 mov     [rbp+0], r13d
.text:0000000000010972
.text:0000000000010972 loc_10972:                              ; CODE XREF: fd_safer_flag+F↑j
.text:0000000000010972                 add     rsp, 8
.text:0000000000010976                 mov     eax, ebx
.text:0000000000010978                 pop     rbx
.text:0000000000010979                 pop     rbp
.text:000000000001097A                 pop     r12
.text:000000000001097C                 pop     r13
.text:000000000001097E                 retn
.text:000000000001097E ; } // starts at 10940
.text:000000000001097E fd_safer_flag   endp
.text:000000000001097E
.text:000000000001097E ; ---------------------------------------------------------------------------
.text:000000000001097F                 align 20h
.text:0000000000010980
.text:0000000000010980 ; =============== S U B R O U T I N E =======================================
.text:0000000000010980
.text:0000000000010980
.text:0000000000010980 dev_info_hash   proc near               ; DATA XREF: utimecmpat+637↓o
.text:0000000000010980 ; __unwind {
.text:0000000000010980                 mov     rax, [rdi]
.text:0000000000010983                 xor     edx, edx
.text:0000000000010985                 div     rsi
.text:0000000000010988                 mov     rax, rdx
.text:000000000001098B                 retn
.text:000000000001098B ; } // starts at 10980
.text:000000000001098B dev_info_hash   endp
.text:000000000001098B
.text:000000000001098B ; ---------------------------------------------------------------------------
.text:000000000001098C                 align 10h
.text:0000000000010990
.text:0000000000010990 ; =============== S U B R O U T I N E =======================================
.text:0000000000010990
.text:0000000000010990
.text:0000000000010990 dev_info_compare proc near              ; DATA XREF: utimecmpat+63E↓o
.text:0000000000010990 ; __unwind {
.text:0000000000010990                 mov     rax, [rsi]
.text:0000000000010993                 cmp     [rdi], rax
.text:0000000000010996                 setz    al
.text:0000000000010999                 retn
.text:0000000000010999 ; } // starts at 10990
.text:0000000000010999 dev_info_compare endp
.text:0000000000010999
.text:0000000000010999 ; ---------------------------------------------------------------------------
.text:000000000001099A                 align 20h
.text:00000000000109A0
.text:00000000000109A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000109A0
.text:00000000000109A0
.text:00000000000109A0                 public utimecmpat
.text:00000000000109A0 utimecmpat      proc near               ; CODE XREF: utimecmp+11↓j
.text:00000000000109A0
.text:00000000000109A0 filename        = qword ptr -150h
.text:00000000000109A0 var_148         = qword ptr -148h
.text:00000000000109A0 var_140         = qword ptr -140h
.text:00000000000109A0 fd              = dword ptr -138h
.text:00000000000109A0 path            = qword ptr -130h
.text:00000000000109A0 var_128         = qword ptr -128h
.text:00000000000109A0 fildes          = dword ptr -120h
.text:00000000000109A0 var_11C         = dword ptr -11Ch
.text:00000000000109A0 var_118         = qword ptr -118h
.text:00000000000109A0 var_110         = qword ptr -110h
.text:00000000000109A0 var_108         = qword ptr -108h
.text:00000000000109A0 var_100         = dword ptr -100h
.text:00000000000109A0 var_FC          = byte ptr -0FCh
.text:00000000000109A0 times           = timespec ptr -0F8h
.text:00000000000109A0 var_E8          = qword ptr -0E8h
.text:00000000000109A0 var_E0          = qword ptr -0E0h
.text:00000000000109A0 stat_buf        = stat ptr -0D8h
.text:00000000000109A0 var_40          = qword ptr -40h
.text:00000000000109A0
.text:00000000000109A0 ; __unwind {
.text:00000000000109A0                 push    r15
.text:00000000000109A2                 push    r14
.text:00000000000109A4                 push    r13
.text:00000000000109A6                 push    r12
.text:00000000000109A8                 push    rbp
.text:00000000000109A9                 push    rbx
.text:00000000000109AA                 mov     ebx, r8d
.text:00000000000109AD                 and     ebx, 1
.text:00000000000109B0                 sub     rsp, 128h
.text:00000000000109B7                 mov     r13, [rcx+60h]
.text:00000000000109BB                 mov     r14, [rdx+58h]
.text:00000000000109BF                 mov     rax, fs:28h
.text:00000000000109C8                 mov     [rsp+158h+var_40], rax
.text:00000000000109D0                 xor     eax, eax
.text:00000000000109D2                 test    ebx, ebx
.text:00000000000109D4                 mov     r12, [rcx+58h]
.text:00000000000109D8                 mov     r15, [rdx+60h]
.text:00000000000109DC                 mov     r9d, r13d
.text:00000000000109DF                 jz      loc_10AC8
.text:00000000000109E5                 cmp     r14, r12
.text:00000000000109E8                 mov     r10d, edi
.text:00000000000109EB                 setz    byte ptr [rsp+158h+fildes]
.text:00000000000109F0                 movzx   edi, byte ptr [rsp+158h+fildes]
.text:00000000000109F5                 cmp     r15d, r13d
.text:00000000000109F8                 setz    al
.text:00000000000109FB                 and     al, dil
.text:00000000000109FE                 mov     byte ptr [rsp+158h+filename], al
.text:0000000000010A02                 jnz     loc_10B10
.text:0000000000010A08                 lea     rax, [r12-1]
.text:0000000000010A0D                 cmp     rax, r14
.text:0000000000010A10                 jg      loc_10B18
.text:0000000000010A16                 lea     rax, [r14-1]
.text:0000000000010A1A                 cmp     rax, r12
.text:0000000000010A1D                 jg      loc_10ADF
.text:0000000000010A23                 mov     rbp, rdx
.text:0000000000010A26                 mov     rdx, cs:ht_5307
.text:0000000000010A2D                 mov     r11, rsi
.text:0000000000010A30                 test    rdx, rdx
.text:0000000000010A33                 jz      loc_10FD0
.text:0000000000010A39
.text:0000000000010A39 loc_10A39:                              ; CODE XREF: utimecmpat+67C↓j
.text:0000000000010A39                 mov     rsi, cs:new_dst_res_5308
.text:0000000000010A40                 test    rsi, rsi
.text:0000000000010A43                 jz      loc_10B20
.text:0000000000010A49
.text:0000000000010A49 loc_10A49:                              ; CODE XREF: utimecmpat+1CC↓j
.text:0000000000010A49                 mov     rax, [rbp+0]
.text:0000000000010A4D                 mov     rdi, rdx
.text:0000000000010A50                 mov     [rsp+158h+path], r11
.text:0000000000010A55                 mov     [rsp+158h+fd], r10d
.text:0000000000010A5A                 mov     dword ptr [rsp+158h+var_140], r9d
.text:0000000000010A5F                 mov     [rsi], rax
.text:0000000000010A62                 call    hash_insert
.text:0000000000010A67                 test    rax, rax
.text:0000000000010A6A                 mov     [rsp+158h+var_148], rax
.text:0000000000010A6F                 mov     r9d, dword ptr [rsp+158h+var_140]
.text:0000000000010A74                 mov     r10d, [rsp+158h+fd]
.text:0000000000010A79                 mov     r11, [rsp+158h+path]
.text:0000000000010A7E                 jz      loc_10B78
.text:0000000000010A84                 cmp     cs:new_dst_res_5308, rax
.text:0000000000010A8B                 jz      loc_11030
.text:0000000000010A91
.text:0000000000010A91 loc_10A91:                              ; CODE XREF: utimecmpat+231↓j
.text:0000000000010A91                                         ; utimecmpat+69B↓j
.text:0000000000010A91                 mov     rax, [rsp+158h+var_148]
.text:0000000000010A96                 cmp     byte ptr [rax+0Ch], 0
.text:0000000000010A9A                 mov     esi, [rax+8]
.text:0000000000010A9D                 mov     dword ptr [rsp+158h+var_140], esi
.text:0000000000010AA1                 jz      loc_10BFA
.text:0000000000010AA7                 xor     eax, eax
.text:0000000000010AA9                 cmp     esi, 77359400h
.text:0000000000010AAF                 setz    al
.text:0000000000010AB2                 not     eax
.text:0000000000010AB4                 cdqe
.text:0000000000010AB6                 and     r12, rax
.text:0000000000010AB9                 mov     eax, r9d
.text:0000000000010ABC                 mov     r9d, r13d
.text:0000000000010ABF                 cdq
.text:0000000000010AC0                 idiv    esi
.text:0000000000010AC2                 sub     r9d, edx
.text:0000000000010AC5                 nop     dword ptr [rax]
.text:0000000000010AC8
.text:0000000000010AC8 loc_10AC8:                              ; CODE XREF: utimecmpat+3F↑j
.text:0000000000010AC8                                         ; utimecmpat+624↓j
.text:0000000000010AC8                 cmp     r12, r14
.text:0000000000010ACB                 jg      short loc_10B18
.text:0000000000010ACD                 mov     ebx, 1
.text:0000000000010AD2                 jl      short loc_10ADF
.text:0000000000010AD4                 cmp     r9d, r15d
.text:0000000000010AD7                 jg      short loc_10B18
.text:0000000000010AD9                 setl    bl
.text:0000000000010ADC                 movzx   ebx, bl
.text:0000000000010ADF
.text:0000000000010ADF loc_10ADF:                              ; CODE XREF: utimecmpat+7D↑j
.text:0000000000010ADF                                         ; utimecmpat+132↑j ...
.text:0000000000010ADF                 mov     rsi, [rsp+158h+var_40]
.text:0000000000010AE7                 xor     rsi, fs:28h
.text:0000000000010AF0                 mov     eax, ebx
.text:0000000000010AF2                 jnz     loc_110C8
.text:0000000000010AF8                 add     rsp, 128h
.text:0000000000010AFF                 pop     rbx
.text:0000000000010B00                 pop     rbp
.text:0000000000010B01                 pop     r12
.text:0000000000010B03                 pop     r13
.text:0000000000010B05                 pop     r14
.text:0000000000010B07                 pop     r15
.text:0000000000010B09                 retn
.text:0000000000010B09 ; ---------------------------------------------------------------------------
.text:0000000000010B0A                 align 10h
.text:0000000000010B10
.text:0000000000010B10 loc_10B10:                              ; CODE XREF: utimecmpat+62↑j
.text:0000000000010B10                 xor     ebx, ebx
.text:0000000000010B12                 jmp     short loc_10ADF
.text:0000000000010B12 ; ---------------------------------------------------------------------------
.text:0000000000010B14                 align 8
.text:0000000000010B18
.text:0000000000010B18 loc_10B18:                              ; CODE XREF: utimecmpat+70↑j
.text:0000000000010B18                                         ; utimecmpat+12B↑j ...
.text:0000000000010B18                 mov     ebx, 0FFFFFFFFh
.text:0000000000010B1D                 jmp     short loc_10ADF
.text:0000000000010B1D ; ---------------------------------------------------------------------------
.text:0000000000010B1F                 align 20h
.text:0000000000010B20
.text:0000000000010B20 loc_10B20:                              ; CODE XREF: utimecmpat+A3↑j
.text:0000000000010B20                 mov     edi, 10h        ; size
.text:0000000000010B25                 mov     [rsp+158h+path], r11
.text:0000000000010B2A                 mov     [rsp+158h+fd], r10d
.text:0000000000010B2F                 mov     dword ptr [rsp+158h+var_140], r9d
.text:0000000000010B34                 mov     [rsp+158h+var_148], rdx
.text:0000000000010B39                 call    _malloc
.text:0000000000010B3E                 test    rax, rax
.text:0000000000010B41                 mov     rsi, rax
.text:0000000000010B44                 mov     cs:new_dst_res_5308, rax
.text:0000000000010B4B                 mov     rdx, [rsp+158h+var_148]
.text:0000000000010B50                 mov     r9d, dword ptr [rsp+158h+var_140]
.text:0000000000010B55                 mov     r10d, [rsp+158h+fd]
.text:0000000000010B5A                 mov     r11, [rsp+158h+path]
.text:0000000000010B5F                 jz      short loc_10B88
.text:0000000000010B61                 mov     dword ptr [rax+8], 77359400h
.text:0000000000010B68                 mov     byte ptr [rax+0Ch], 0
.text:0000000000010B6C                 jmp     loc_10A49
.text:0000000000010B6C ; ---------------------------------------------------------------------------
.text:0000000000010B71                 align 8
.text:0000000000010B78
.text:0000000000010B78 loc_10B78:                              ; CODE XREF: utimecmpat+DE↑j
.text:0000000000010B78                 mov     rdx, cs:ht_5307
.text:0000000000010B7F                 test    rdx, rdx
.text:0000000000010B82                 jz      loc_11022
.text:0000000000010B88
.text:0000000000010B88 loc_10B88:                              ; CODE XREF: utimecmpat+1BF↑j
.text:0000000000010B88                 lea     rcx, [rsp+158h+var_108]
.text:0000000000010B8D                 mov     rax, [rbp+0]
.text:0000000000010B91                 mov     rdi, rdx
.text:0000000000010B94                 mov     [rsp+158h+var_128], r11
.text:0000000000010B99                 mov     dword ptr [rsp+158h+path], r10d
.text:0000000000010B9E                 mov     rsi, rcx
.text:0000000000010BA1                 mov     [rsp+158h+fd], r9d
.text:0000000000010BA6                 mov     [rsp+158h+var_140], rcx
.text:0000000000010BAB                 mov     [rsp+158h+var_108], rax
.text:0000000000010BB0                 call    hash_lookup
.text:0000000000010BB5                 test    rax, rax
.text:0000000000010BB8                 mov     [rsp+158h+var_148], rax
.text:0000000000010BBD                 mov     rcx, [rsp+158h+var_140]
.text:0000000000010BC2                 mov     r9d, [rsp+158h+fd]
.text:0000000000010BC7                 mov     r10d, dword ptr [rsp+158h+path]
.text:0000000000010BCC                 mov     r11, [rsp+158h+var_128]
.text:0000000000010BD1                 jnz     loc_10A91
.text:0000000000010BD7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000010BE0
.text:0000000000010BE0 loc_10BE0:                              ; CODE XREF: utimecmpat+687↓j
.text:0000000000010BE0                 mov     [rsp+158h+var_100], 77359400h
.text:0000000000010BE8                 mov     [rsp+158h+var_FC], 0
.text:0000000000010BED                 mov     dword ptr [rsp+158h+var_140], 77359400h
.text:0000000000010BF5                 mov     [rsp+158h+var_148], rcx
.text:0000000000010BFA
.text:0000000000010BFA loc_10BFA:                              ; CODE XREF: utimecmpat+101↑j
.text:0000000000010BFA                 mov     rcx, [rbp+50h]
.text:0000000000010BFE                 mov     eax, 66666667h
.text:0000000000010C03                 mov     rsi, [rbp+70h]
.text:0000000000010C07                 imul    ecx
.text:0000000000010C09                 mov     eax, ecx
.text:0000000000010C0B                 mov     [rsp+158h+path], rcx
.text:0000000000010C10                 sar     eax, 1Fh
.text:0000000000010C13                 sar     edx, 2
.text:0000000000010C16                 sub     edx, eax
.text:0000000000010C18                 lea     eax, [rdx+rdx*4]
.text:0000000000010C1B                 mov     [rsp+158h+fd], edx
.text:0000000000010C1F                 add     eax, eax
.text:0000000000010C21                 sub     ecx, eax
.text:0000000000010C23                 mov     eax, 66666667h
.text:0000000000010C28                 imul    esi
.text:0000000000010C2A                 mov     eax, esi
.text:0000000000010C2C                 sar     eax, 1Fh
.text:0000000000010C2F                 sar     edx, 2
.text:0000000000010C32                 mov     edi, edx
.text:0000000000010C34                 sub     edi, eax
.text:0000000000010C36                 lea     eax, [rdi+rdi*4]
.text:0000000000010C39                 add     eax, eax
.text:0000000000010C3B                 sub     esi, eax
.text:0000000000010C3D                 mov     eax, 66666667h
.text:0000000000010C42                 imul    r15d
.text:0000000000010C45                 mov     eax, r15d
.text:0000000000010C48                 or      ecx, esi
.text:0000000000010C4A                 sar     eax, 1Fh
.text:0000000000010C4D                 mov     esi, r15d
.text:0000000000010C50                 sar     edx, 2
.text:0000000000010C53                 mov     r8d, edx
.text:0000000000010C56                 sub     r8d, eax
.text:0000000000010C59                 lea     eax, [r8+r8*4]
.text:0000000000010C5D                 add     eax, eax
.text:0000000000010C5F                 sub     esi, eax
.text:0000000000010C61                 or      ecx, esi
.text:0000000000010C63                 jnz     loc_10FB8
.text:0000000000010C69                 cmp     dword ptr [rsp+158h+var_140], 0Ah
.text:0000000000010C6E                 mov     rax, [rbp+48h]
.text:0000000000010C72                 mov     ecx, edi
.text:0000000000010C74                 mov     edx, [rsp+158h+fd]
.text:0000000000010C78                 mov     esi, r8d
.text:0000000000010C7B                 mov     [rsp+158h+var_110], rax
.text:0000000000010C80                 mov     dword ptr [rsp+158h+var_128], edx
.text:0000000000010C84                 jle     loc_11098
.text:0000000000010C8A                 mov     eax, 66666667h
.text:0000000000010C8F                 imul    edi
.text:0000000000010C91                 mov     eax, edi
.text:0000000000010C93                 sar     eax, 1Fh
.text:0000000000010C96                 sar     edx, 2
.text:0000000000010C99                 sub     edx, eax
.text:0000000000010C9B                 lea     eax, [rdx+rdx*4]
.text:0000000000010C9E                 add     eax, eax
.text:0000000000010CA0                 sub     edi, eax
.text:0000000000010CA2                 mov     eax, 66666667h
.text:0000000000010CA7                 imul    [rsp+158h+fd]
.text:0000000000010CAB                 mov     eax, [rsp+158h+fd]
.text:0000000000010CAF                 sar     eax, 1Fh
.text:0000000000010CB2                 sar     edx, 2
.text:0000000000010CB5                 sub     edx, eax
.text:0000000000010CB7                 lea     eax, [rdx+rdx*4]
.text:0000000000010CBA                 mov     edx, [rsp+158h+fd]
.text:0000000000010CBE                 mov     [rsp+158h+fd], 0Ah
.text:0000000000010CC6                 add     eax, eax
.text:0000000000010CC8                 sub     edx, eax
.text:0000000000010CCA                 mov     eax, 66666667h
.text:0000000000010CCF                 or      edi, edx
.text:0000000000010CD1                 imul    r8d
.text:0000000000010CD4                 mov     eax, r8d
.text:0000000000010CD7                 mov     [rsp+158h+var_11C], edi
.text:0000000000010CDB                 sar     eax, 1Fh
.text:0000000000010CDE                 mov     edi, 66666667h
.text:0000000000010CE3                 sar     edx, 2
.text:0000000000010CE6                 sub     edx, eax
.text:0000000000010CE8                 lea     eax, [rdx+rdx*4]
.text:0000000000010CEB                 mov     edx, 8
.text:0000000000010CF0                 add     eax, eax
.text:0000000000010CF2                 sub     r8d, eax
.text:0000000000010CF5                 mov     eax, [rsp+158h+var_11C]
.text:0000000000010CF9                 or      eax, r8d
.text:0000000000010CFC                 jnz     loc_110B4
.text:0000000000010D02                 mov     [rsp+158h+var_11C], r9d
.text:0000000000010D07                 mov     [rsp+158h+var_118], r14
.text:0000000000010D0C                 mov     r9d, 0Ah
.text:0000000000010D12                 mov     r8d, dword ptr [rsp+158h+var_128]
.text:0000000000010D17                 mov     qword ptr [rsp+158h+fd], r12
.text:0000000000010D1C                 mov     r14d, edx
.text:0000000000010D1F                 mov     [rsp+158h+var_128], rbp
.text:0000000000010D24
.text:0000000000010D24 loc_10D24:                              ; CODE XREF: utimecmpat+41E↓j
.text:0000000000010D24                 mov     eax, r8d
.text:0000000000010D27                 sar     r8d, 1Fh
.text:0000000000010D2B                 lea     ebp, [r9+r9*4]
.text:0000000000010D2F                 imul    edi
.text:0000000000010D31                 mov     eax, ecx
.text:0000000000010D33                 sar     ecx, 1Fh
.text:0000000000010D36                 add     ebp, ebp
.text:0000000000010D38                 mov     r9d, ebp
.text:0000000000010D3B                 sar     edx, 2
.text:0000000000010D3E                 sub     edx, r8d
.text:0000000000010D41                 mov     r8d, edx
.text:0000000000010D44                 imul    edi
.text:0000000000010D46                 mov     eax, esi
.text:0000000000010D48                 sar     esi, 1Fh
.text:0000000000010D4B                 sar     edx, 2
.text:0000000000010D4E                 sub     edx, ecx
.text:0000000000010D50                 mov     ecx, edx
.text:0000000000010D52                 imul    edi
.text:0000000000010D54                 sar     edx, 2
.text:0000000000010D57                 sub     edx, esi
.text:0000000000010D59                 cmp     ebp, dword ptr [rsp+158h+var_140]
.text:0000000000010D5D                 mov     esi, edx
.text:0000000000010D5F                 jge     loc_11040
.text:0000000000010D65                 mov     eax, r8d
.text:0000000000010D68                 mov     r12d, r8d
.text:0000000000010D6B                 imul    edi
.text:0000000000010D6D                 mov     eax, r8d
.text:0000000000010D70                 sar     eax, 1Fh
.text:0000000000010D73                 sar     edx, 2
.text:0000000000010D76                 sub     edx, eax
.text:0000000000010D78                 lea     eax, [rdx+rdx*4]
.text:0000000000010D7B                 add     eax, eax
.text:0000000000010D7D                 sub     r12d, eax
.text:0000000000010D80                 mov     eax, ecx
.text:0000000000010D82                 imul    edi
.text:0000000000010D84                 mov     eax, ecx
.text:0000000000010D86                 sar     eax, 1Fh
.text:0000000000010D89                 sar     edx, 2
.text:0000000000010D8C                 sub     edx, eax
.text:0000000000010D8E                 lea     eax, [rdx+rdx*4]
.text:0000000000010D91                 mov     edx, ecx
.text:0000000000010D93                 add     eax, eax
.text:0000000000010D95                 sub     edx, eax
.text:0000000000010D97                 mov     eax, esi
.text:0000000000010D99                 or      r12d, edx
.text:0000000000010D9C                 imul    edi
.text:0000000000010D9E                 mov     eax, esi
.text:0000000000010DA0                 sar     eax, 1Fh
.text:0000000000010DA3                 sar     edx, 2
.text:0000000000010DA6                 sub     edx, eax
.text:0000000000010DA8                 lea     eax, [rdx+rdx*4]
.text:0000000000010DAB                 mov     edx, esi
.text:0000000000010DAD                 add     eax, eax
.text:0000000000010DAF                 sub     edx, eax
.text:0000000000010DB1                 or      r12d, edx
.text:0000000000010DB4                 jnz     loc_11040
.text:0000000000010DBA                 sub     r14d, 1
.text:0000000000010DBE                 jnz     loc_10D24
.text:0000000000010DC4                 mov     r14, [rsp+158h+var_118]
.text:0000000000010DC9                 mov     rbp, [rsp+158h+var_128]
.text:0000000000010DCE                 mov     rax, [rsp+158h+var_110]
.text:0000000000010DD3                 mov     r12, qword ptr [rsp+158h+fd]
.text:0000000000010DD8                 mov     r9d, [rsp+158h+var_11C]
.text:0000000000010DDD                 or      rax, r14
.text:0000000000010DE0                 or      rax, [rbp+68h]
.text:0000000000010DE4                 test    al, 1
.text:0000000000010DE6                 mov     rax, [rsp+158h+var_148]
.text:0000000000010DEB                 jz      loc_11078
.text:0000000000010DF1                 mov     dword ptr [rax+8], 3B9ACA00h
.text:0000000000010DF8                 mov     [rsp+158h+fd], 3B9ACA00h
.text:0000000000010E00                 mov     rax, r12
.text:0000000000010E03
.text:0000000000010E03 loc_10E03:                              ; CODE XREF: utimecmpat+6D3↓j
.text:0000000000010E03                                         ; utimecmpat+6F3↓j ...
.text:0000000000010E03                 cmp     r14, r12
.text:0000000000010E06                 jg      loc_10ADF
.text:0000000000010E0C                 cmp     r15d, r13d
.text:0000000000010E0F                 jl      short loc_10E1C
.text:0000000000010E11                 cmp     byte ptr [rsp+158h+fildes], 0
.text:0000000000010E16                 jnz     loc_10ADF
.text:0000000000010E1C
.text:0000000000010E1C loc_10E1C:                              ; CODE XREF: utimecmpat+46F↑j
.text:0000000000010E1C                 cmp     r14, rax
.text:0000000000010E1F                 jl      loc_10B18
.text:0000000000010E25                 jnz     short loc_10E3D
.text:0000000000010E27                 mov     eax, r9d
.text:0000000000010E2A                 cdq
.text:0000000000010E2B                 idiv    [rsp+158h+fd]
.text:0000000000010E2F                 mov     eax, r13d
.text:0000000000010E32                 sub     eax, edx
.text:0000000000010E34                 cmp     eax, r15d
.text:0000000000010E37                 jg      loc_10B18
.text:0000000000010E3D
.text:0000000000010E3D loc_10E3D:                              ; CODE XREF: utimecmpat+485↑j
.text:0000000000010E3D                 mov     rax, [rsp+158h+var_110]
.text:0000000000010E42                 mov     edx, 38E38E39h
.text:0000000000010E47                 lea     rbp, [rsp+158h+times]
.text:0000000000010E4C                 mov     rsi, r11        ; path
.text:0000000000010E4F                 mov     edi, r10d       ; fd
.text:0000000000010E52                 mov     ecx, 100h       ; flags
.text:0000000000010E57                 mov     dword ptr [rsp+158h+var_140], r9d
.text:0000000000010E5C                 mov     [rsp+158h+fildes], r10d
.text:0000000000010E61                 mov     [rsp+158h+times.tv_sec], rax
.text:0000000000010E66                 movsxd  rax, dword ptr [rsp+158h+path]
.text:0000000000010E6B                 mov     [rsp+158h+times.tv_nsec], rax
.text:0000000000010E70                 movzx   eax, byte ptr [rsp+158h+filename]
.text:0000000000010E75                 mov     [rsp+158h+filename], r11
.text:0000000000010E7A                 or      rax, r14
.text:0000000000010E7D                 mov     [rsp+158h+var_E8], rax
.text:0000000000010E82                 mov     eax, [rsp+158h+fd]
.text:0000000000010E86                 mul     edx
.text:0000000000010E88                 mov     eax, edx
.text:0000000000010E8A                 mov     rdx, rbp        ; times
.text:0000000000010E8D                 shr     eax, 1
.text:0000000000010E8F                 add     eax, r15d
.text:0000000000010E92                 cdqe
.text:0000000000010E94                 mov     [rsp+158h+var_E0], rax
.text:0000000000010E99                 call    _utimensat
.text:0000000000010E9E                 test    eax, eax
.text:0000000000010EA0                 mov     r10d, [rsp+158h+fildes]
.text:0000000000010EA5                 mov     r11, [rsp+158h+filename]
.text:0000000000010EAA                 mov     r9d, dword ptr [rsp+158h+var_140]
.text:0000000000010EAF                 jz      short loc_10EBB
.text:0000000000010EB1
.text:0000000000010EB1 loc_10EB1:                              ; CODE XREF: utimecmpat+761↓j
.text:0000000000010EB1                 mov     ebx, 0FFFFFFFEh
.text:0000000000010EB6                 jmp     loc_10ADF
.text:0000000000010EBB ; ---------------------------------------------------------------------------
.text:0000000000010EBB
.text:0000000000010EBB loc_10EBB:                              ; CODE XREF: utimecmpat+50F↑j
.text:0000000000010EBB                 lea     rcx, [rsp+158h+stat_buf] ; stat_buf
.text:0000000000010EC3                 mov     rdx, r11        ; filename
.text:0000000000010EC6                 mov     r8d, 100h       ; flag
.text:0000000000010ECC                 mov     esi, r10d       ; fildes
.text:0000000000010ECF                 mov     edi, 1          ; ver
.text:0000000000010ED4                 mov     dword ptr [rsp+158h+var_140], r9d
.text:0000000000010ED9                 mov     [rsp+158h+filename], r11
.text:0000000000010EDE                 mov     [rsp+158h+fildes], r10d
.text:0000000000010EE3                 call    ___fxstatat
.text:0000000000010EE8                 mov     rcx, [rsp+158h+stat_buf.st_mtim.tv_nsec]
.text:0000000000010EF0                 mov     r8d, eax
.text:0000000000010EF3                 mov     rax, [rsp+158h+stat_buf.st_mtim.tv_sec]
.text:0000000000010EFB                 movsxd  rdx, r15d
.text:0000000000010EFE                 mov     r10d, [rsp+158h+fildes]
.text:0000000000010F03                 mov     r11, [rsp+158h+filename]
.text:0000000000010F08                 mov     r9d, dword ptr [rsp+158h+var_140]
.text:0000000000010F0D                 xor     rcx, rdx
.text:0000000000010F10                 xor     rax, r14
.text:0000000000010F13                 or      rax, rcx
.text:0000000000010F16                 movsxd  rcx, r8d
.text:0000000000010F19                 or      rax, rcx
.text:0000000000010F1C                 jnz     loc_110CD
.text:0000000000010F22
.text:0000000000010F22 loc_10F22:                              ; CODE XREF: utimecmpat+767↓j
.text:0000000000010F22                 mov     ecx, dword ptr [rsp+158h+stat_buf.st_mtim.tv_sec]
.text:0000000000010F29                 mov     esi, 0Ah
.text:0000000000010F2E                 and     ecx, 1
.text:0000000000010F31                 imul    ecx, 3B9ACA00h
.text:0000000000010F37                 add     ecx, dword ptr [rsp+158h+stat_buf.st_mtim.tv_nsec]
.text:0000000000010F3E                 mov     eax, ecx
.text:0000000000010F40                 cdq
.text:0000000000010F41                 idiv    esi
.text:0000000000010F43                 test    edx, edx
.text:0000000000010F45                 jnz     loc_11115
.text:0000000000010F4B                 cmp     [rsp+158h+fd], 0Ah
.text:0000000000010F50                 jz      short loc_10F8D
.text:0000000000010F52                 mov     r8d, 9
.text:0000000000010F58                 mov     esi, 0Ah
.text:0000000000010F5D                 mov     edi, 0Ah
.text:0000000000010F62                 jmp     short loc_10F6D
.text:0000000000010F64 ; ---------------------------------------------------------------------------
.text:0000000000010F64
.text:0000000000010F64 loc_10F64:                              ; CODE XREF: utimecmpat+5E3↓j
.text:0000000000010F64                 imul    esi, 0Ah
.text:0000000000010F67                 cmp     esi, [rsp+158h+fd]
.text:0000000000010F6B                 jz      short loc_10F8D
.text:0000000000010F6D
.text:0000000000010F6D loc_10F6D:                              ; CODE XREF: utimecmpat+5C2↑j
.text:0000000000010F6D                 mov     eax, ecx
.text:0000000000010F6F                 cdq
.text:0000000000010F70                 idiv    edi
.text:0000000000010F72                 cdq
.text:0000000000010F73                 mov     ecx, eax
.text:0000000000010F75                 idiv    edi
.text:0000000000010F77                 test    edx, edx
.text:0000000000010F79                 jnz     loc_1110C
.text:0000000000010F7F                 sub     r8d, 1
.text:0000000000010F83                 jnz     short loc_10F64
.text:0000000000010F85                 mov     [rsp+158h+fd], 77359400h
.text:0000000000010F8D
.text:0000000000010F8D loc_10F8D:                              ; CODE XREF: utimecmpat+5B0↑j
.text:0000000000010F8D                                         ; utimecmpat+5CB↑j ...
.text:0000000000010F8D                 mov     esi, [rsp+158h+fd]
.text:0000000000010F91                 xor     eax, eax
.text:0000000000010F93                 cmp     esi, 77359400h
.text:0000000000010F99                 mov     ebx, esi
.text:0000000000010F9B                 setz    al
.text:0000000000010F9E                 not     eax
.text:0000000000010FA0                 cdqe
.text:0000000000010FA2                 and     r12, rax
.text:0000000000010FA5                 mov     eax, r9d
.text:0000000000010FA8                 mov     r9d, r13d
.text:0000000000010FAB                 cdq
.text:0000000000010FAC                 idiv    esi
.text:0000000000010FAE                 sub     r9d, edx
.text:0000000000010FB1                 nop     dword ptr [rax+00000000h]
.text:0000000000010FB8
.text:0000000000010FB8 loc_10FB8:                              ; CODE XREF: utimecmpat+2C3↑j
.text:0000000000010FB8                 mov     rax, [rsp+158h+var_148]
.text:0000000000010FBD                 mov     [rax+8], ebx
.text:0000000000010FC0                 mov     byte ptr [rax+0Ch], 1
.text:0000000000010FC4                 jmp     loc_10AC8
.text:0000000000010FC4 ; ---------------------------------------------------------------------------
.text:0000000000010FC9                 align 10h
.text:0000000000010FD0
.text:0000000000010FD0 loc_10FD0:                              ; CODE XREF: utimecmpat+93↑j
.text:0000000000010FD0                 mov     r8, cs:free_ptr
.text:0000000000010FD7                 lea     rdx, dev_info_hash
.text:0000000000010FDE                 lea     rcx, dev_info_compare
.text:0000000000010FE5                 mov     qword ptr [rsp+158h+fd], rsi
.text:0000000000010FEA                 mov     edi, 10h
.text:0000000000010FEF                 xor     esi, esi
.text:0000000000010FF1                 mov     dword ptr [rsp+158h+var_140], r10d
.text:0000000000010FF6                 mov     dword ptr [rsp+158h+var_148], r13d
.text:0000000000010FFB                 call    hash_initialize
.text:0000000000011000                 test    rax, rax
.text:0000000000011003                 mov     rdx, rax
.text:0000000000011006                 mov     cs:ht_5307, rax
.text:000000000001100D                 mov     r9d, dword ptr [rsp+158h+var_148]
.text:0000000000011012                 mov     r10d, dword ptr [rsp+158h+var_140]
.text:0000000000011017                 mov     r11, qword ptr [rsp+158h+fd]
.text:000000000001101C                 jnz     loc_10A39
.text:0000000000011022
.text:0000000000011022 loc_11022:                              ; CODE XREF: utimecmpat+1E2↑j
.text:0000000000011022                 lea     rcx, [rsp+158h+var_108]
.text:0000000000011027                 jmp     loc_10BE0
.text:0000000000011027 ; ---------------------------------------------------------------------------
.text:000000000001102C                 align 10h
.text:0000000000011030
.text:0000000000011030 loc_11030:                              ; CODE XREF: utimecmpat+EB↑j
.text:0000000000011030                 mov     cs:new_dst_res_5308, 0
.text:000000000001103B                 jmp     loc_10A91
.text:0000000000011040 ; ---------------------------------------------------------------------------
.text:0000000000011040
.text:0000000000011040 loc_11040:                              ; CODE XREF: utimecmpat+3BF↑j
.text:0000000000011040                                         ; utimecmpat+414↑j
.text:0000000000011040                 cmp     ebp, 77359400h
.text:0000000000011046                 mov     r12, qword ptr [rsp+158h+fd]
.text:000000000001104B                 mov     rsi, [rsp+158h+var_148]
.text:0000000000011050                 setz    byte ptr [rsp+158h+filename]
.text:0000000000011055                 movzx   eax, byte ptr [rsp+158h+filename]
.text:000000000001105A                 mov     [rsp+158h+fd], r9d
.text:000000000001105F                 mov     r14, [rsp+158h+var_118]
.text:0000000000011064                 mov     r9d, [rsp+158h+var_11C]
.text:0000000000011069                 mov     [rsi+8], ebp
.text:000000000001106C                 not     eax
.text:000000000001106E                 cdqe
.text:0000000000011070                 and     rax, r12
.text:0000000000011073                 jmp     loc_10E03
.text:0000000000011078 ; ---------------------------------------------------------------------------
.text:0000000000011078
.text:0000000000011078 loc_11078:                              ; CODE XREF: utimecmpat+44B↑j
.text:0000000000011078                 mov     dword ptr [rax+8], 77359400h
.text:000000000001107F                 mov     rax, r12
.text:0000000000011082                 mov     byte ptr [rsp+158h+filename], 1
.text:0000000000011087                 and     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000001108B                 mov     [rsp+158h+fd], 77359400h
.text:0000000000011093                 jmp     loc_10E03
.text:0000000000011098 ; ---------------------------------------------------------------------------
.text:0000000000011098
.text:0000000000011098 loc_11098:                              ; CODE XREF: utimecmpat+2E4↑j
.text:0000000000011098                 mov     rax, [rsp+158h+var_148]
.text:000000000001109D                 mov     [rsp+158h+fd], 0Ah
.text:00000000000110A5                 mov     dword ptr [rax+8], 0Ah
.text:00000000000110AC                 mov     rax, r12
.text:00000000000110AF                 jmp     loc_10E03
.text:00000000000110B4 ; ---------------------------------------------------------------------------
.text:00000000000110B4
.text:00000000000110B4 loc_110B4:                              ; CODE XREF: utimecmpat+35C↑j
.text:00000000000110B4                 mov     rax, [rsp+158h+var_148]
.text:00000000000110B9                 mov     dword ptr [rax+8], 0Ah
.text:00000000000110C0                 mov     rax, r12
.text:00000000000110C3                 jmp     loc_10E03
.text:00000000000110C8 ; ---------------------------------------------------------------------------
.text:00000000000110C8
.text:00000000000110C8 loc_110C8:                              ; CODE XREF: utimecmpat+152↑j
.text:00000000000110C8                 call    ___stack_chk_fail
.text:00000000000110CD ; ---------------------------------------------------------------------------
.text:00000000000110CD
.text:00000000000110CD loc_110CD:                              ; CODE XREF: utimecmpat+57C↑j
.text:00000000000110CD                 mov     [rsp+158h+var_E0], rdx
.text:00000000000110D2                 mov     ecx, 100h       ; flags
.text:00000000000110D7                 mov     rdx, rbp        ; times
.text:00000000000110DA                 mov     rsi, r11        ; path
.text:00000000000110DD                 mov     edi, r10d       ; fd
.text:00000000000110E0                 mov     dword ptr [rsp+158h+filename], r8d
.text:00000000000110E5                 mov     [rsp+158h+fildes], r9d
.text:00000000000110EA                 mov     [rsp+158h+var_E8], r14
.text:00000000000110EF                 call    _utimensat
.text:00000000000110F4                 mov     r8d, dword ptr [rsp+158h+filename]
.text:00000000000110F9                 mov     r9d, [rsp+158h+fildes]
.text:00000000000110FE                 test    r8d, r8d
.text:0000000000011101                 jnz     loc_10EB1
.text:0000000000011107                 jmp     loc_10F22
.text:000000000001110C ; ---------------------------------------------------------------------------
.text:000000000001110C
.text:000000000001110C loc_1110C:                              ; CODE XREF: utimecmpat+5D9↑j
.text:000000000001110C                 mov     [rsp+158h+fd], esi
.text:0000000000011110                 jmp     loc_10F8D
.text:0000000000011115 ; ---------------------------------------------------------------------------
.text:0000000000011115
.text:0000000000011115 loc_11115:                              ; CODE XREF: utimecmpat+5A5↑j
.text:0000000000011115                 mov     [rsp+158h+fd], ebx
.text:0000000000011119                 jmp     loc_10F8D
.text:0000000000011119 ; } // starts at 109A0
.text:0000000000011119 utimecmpat      endp
.text:0000000000011119
.text:0000000000011119 ; ---------------------------------------------------------------------------
.text:000000000001111E                 align 20h
.text:0000000000011120
.text:0000000000011120 ; =============== S U B R O U T I N E =======================================
.text:0000000000011120
.text:0000000000011120
.text:0000000000011120                 public utimecmp
.text:0000000000011120 utimecmp        proc near               ; CODE XREF: copy_internal+28B↑p
.text:0000000000011120 ; __unwind {
.text:0000000000011120                 mov     r8d, ecx
.text:0000000000011123                 mov     rcx, rdx
.text:0000000000011126                 mov     rdx, rsi
.text:0000000000011129                 mov     rsi, rdi
.text:000000000001112C                 mov     edi, 0FFFFFF9Ch
.text:0000000000011131                 jmp     utimecmpat
.text:0000000000011131 ; } // starts at 11120
.text:0000000000011131 utimecmp        endp
.text:0000000000011131
.text:0000000000011131 ; ---------------------------------------------------------------------------
.text:0000000000011136                 align 20h
.text:0000000000011140
.text:0000000000011140 ; =============== S U B R O U T I N E =======================================
.text:0000000000011140
.text:0000000000011140
.text:0000000000011140 update_timespec proc near               ; CODE XREF: fdutimens+264↓p
.text:0000000000011140                                         ; lutimens+C5↓p
.text:0000000000011140
.text:0000000000011140 var_19          = byte ptr -19h
.text:0000000000011140
.text:0000000000011140 ; __unwind {
.text:0000000000011140                 push    rbp
.text:0000000000011141                 push    rbx
.text:0000000000011142                 mov     rbp, rdi
.text:0000000000011145                 sub     rsp, 18h
.text:0000000000011149                 mov     rbx, [rsi]
.text:000000000001114C                 mov     rax, [rbx+8]
.text:0000000000011150                 mov     rdx, [rbx+18h]
.text:0000000000011154                 cmp     rax, 3FFFFFFEh
.text:000000000001115A                 jz      short loc_111C0
.text:000000000001115C                 cmp     rax, 3FFFFFFFh
.text:0000000000011162                 jz      short loc_11180
.text:0000000000011164                 cmp     rdx, 3FFFFFFEh
.text:000000000001116B                 jz      short loc_1119E
.text:000000000001116D
.text:000000000001116D loc_1116D:                              ; CODE XREF: update_timespec+5C↓j
.text:000000000001116D                 xor     eax, eax
.text:000000000001116F                 cmp     rdx, 3FFFFFFFh
.text:0000000000011176                 jz      short loc_111E8
.text:0000000000011178
.text:0000000000011178 loc_11178:                              ; CODE XREF: update_timespec+8C↓j
.text:0000000000011178                                         ; update_timespec+A6↓j ...
.text:0000000000011178                 add     rsp, 18h
.text:000000000001117C                 pop     rbx
.text:000000000001117D                 pop     rbp
.text:000000000001117E                 retn
.text:000000000001117E ; ---------------------------------------------------------------------------
.text:000000000001117F                 align 20h
.text:0000000000011180
.text:0000000000011180 loc_11180:                              ; CODE XREF: update_timespec+22↑j
.text:0000000000011180                 cmp     rdx, 3FFFFFFFh
.text:0000000000011187                 jz      short loc_11208
.text:0000000000011189                 mov     rdi, rbx        ; tp
.text:000000000001118C                 call    gettime
.text:0000000000011191                 mov     rdx, [rbx+18h]
.text:0000000000011195                 cmp     rdx, 3FFFFFFEh
.text:000000000001119C                 jnz     short loc_1116D
.text:000000000001119E
.text:000000000001119E loc_1119E:                              ; CODE XREF: update_timespec+2B↑j
.text:000000000001119E                 mov     rax, [rbp+60h]
.text:00000000000111A2                 mov     rdx, [rbp+58h]
.text:00000000000111A6                 mov     [rbx+18h], rax
.text:00000000000111AA                 mov     [rbx+10h], rdx
.text:00000000000111AE                 add     rsp, 18h
.text:00000000000111B2                 xor     eax, eax
.text:00000000000111B4                 pop     rbx
.text:00000000000111B5                 pop     rbp
.text:00000000000111B6                 retn
.text:00000000000111B6 ; ---------------------------------------------------------------------------
.text:00000000000111B7                 align 20h
.text:00000000000111C0
.text:00000000000111C0 loc_111C0:                              ; CODE XREF: update_timespec+1A↑j
.text:00000000000111C0                 cmp     rdx, 3FFFFFFEh
.text:00000000000111C7                 mov     eax, 1
.text:00000000000111CC                 jz      short loc_11178
.text:00000000000111CE                 mov     rax, [rdi+50h]
.text:00000000000111D2                 mov     rcx, [rdi+48h]
.text:00000000000111D6                 mov     [rbx+8], rax
.text:00000000000111DA                 xor     eax, eax
.text:00000000000111DC                 cmp     rdx, 3FFFFFFFh
.text:00000000000111E3                 mov     [rbx], rcx
.text:00000000000111E6                 jnz     short loc_11178
.text:00000000000111E8
.text:00000000000111E8 loc_111E8:                              ; CODE XREF: update_timespec+36↑j
.text:00000000000111E8                 lea     rdi, [rbx+10h]  ; tp
.text:00000000000111EC                 mov     [rsp+28h+var_19], al
.text:00000000000111F0                 call    gettime
.text:00000000000111F5                 movzx   eax, [rsp+28h+var_19]
.text:00000000000111FA                 add     rsp, 18h
.text:00000000000111FE                 pop     rbx
.text:00000000000111FF                 pop     rbp
.text:0000000000011200                 retn
.text:0000000000011200 ; ---------------------------------------------------------------------------
.text:0000000000011201                 align 8
.text:0000000000011208
.text:0000000000011208 loc_11208:                              ; CODE XREF: update_timespec+47↑j
.text:0000000000011208                 mov     qword ptr [rsi], 0
.text:000000000001120F                 xor     eax, eax
.text:0000000000011211                 jmp     loc_11178
.text:0000000000011211 ; } // starts at 11140
.text:0000000000011211 update_timespec endp
.text:0000000000011211
.text:0000000000011211 ; ---------------------------------------------------------------------------
.text:0000000000011216                 align 20h
.text:0000000000011220
.text:0000000000011220 ; =============== S U B R O U T I N E =======================================
.text:0000000000011220
.text:0000000000011220
.text:0000000000011220 validate_timespec proc near             ; CODE XREF: fdutimens+4D↓p
.text:0000000000011220                                         ; lutimens+47↓p
.text:0000000000011220 ; __unwind {
.text:0000000000011220                 mov     r9, [rdi+8]
.text:0000000000011224                 lea     rcx, [r9-3FFFFFFEh]
.text:000000000001122B                 cmp     rcx, 1
.text:000000000001122F                 jbe     short loc_1123A
.text:0000000000011231                 cmp     r9, 3B9AC9FFh
.text:0000000000011238                 ja      short loc_112B0
.text:000000000001123A
.text:000000000001123A loc_1123A:                              ; CODE XREF: validate_timespec+F↑j
.text:000000000001123A                 mov     rdx, [rdi+18h]
.text:000000000001123E                 lea     r8, [rdx-3FFFFFFEh]
.text:0000000000011245                 cmp     r8, 1
.text:0000000000011249                 jbe     short loc_11254
.text:000000000001124B                 cmp     rdx, 3B9AC9FFh
.text:0000000000011252                 ja      short loc_112B0
.text:0000000000011254
.text:0000000000011254 loc_11254:                              ; CODE XREF: validate_timespec+29↑j
.text:0000000000011254                 xor     esi, esi
.text:0000000000011256                 xor     r10d, r10d
.text:0000000000011259                 cmp     rcx, 1
.text:000000000001125D                 ja      short loc_11279
.text:000000000001125F                 xor     esi, esi
.text:0000000000011261                 cmp     r9, 3FFFFFFEh
.text:0000000000011268                 mov     qword ptr [rdi], 0
.text:000000000001126F                 setz    sil
.text:0000000000011273                 mov     r10d, 1
.text:0000000000011279
.text:0000000000011279 loc_11279:                              ; CODE XREF: validate_timespec+3D↑j
.text:0000000000011279                 cmp     r8, 1
.text:000000000001127D                 ja      short loc_1129B
.text:000000000001127F                 xor     eax, eax
.text:0000000000011281                 cmp     rdx, 3FFFFFFEh
.text:0000000000011288                 mov     qword ptr [rdi+10h], 0
.text:0000000000011290                 setz    al
.text:0000000000011293                 mov     r10d, 1
.text:0000000000011299                 add     esi, eax
.text:000000000001129B
.text:000000000001129B loc_1129B:                              ; CODE XREF: validate_timespec+5D↑j
.text:000000000001129B                 xor     eax, eax
.text:000000000001129D                 cmp     esi, 1
.text:00000000000112A0                 setz    al
.text:00000000000112A3                 add     eax, r10d
.text:00000000000112A6                 retn
.text:00000000000112A6 ; ---------------------------------------------------------------------------
.text:00000000000112A7                 align 10h
.text:00000000000112B0
.text:00000000000112B0 loc_112B0:                              ; CODE XREF: validate_timespec+18↑j
.text:00000000000112B0                                         ; validate_timespec+32↑j
.text:00000000000112B0                 sub     rsp, 8
.text:00000000000112B4                 call    ___errno_location
.text:00000000000112B9                 mov     dword ptr [rax], 16h
.text:00000000000112BF                 mov     eax, 0FFFFFFFFh
.text:00000000000112C4                 add     rsp, 8
.text:00000000000112C8                 retn
.text:00000000000112C8 ; } // starts at 11220
.text:00000000000112C8 validate_timespec endp
.text:00000000000112C8
.text:00000000000112C8 ; ---------------------------------------------------------------------------
.text:00000000000112C9                 align 10h
.text:00000000000112D0
.text:00000000000112D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000112D0
.text:00000000000112D0
.text:00000000000112D0                 public lutimensat
.text:00000000000112D0 lutimensat      proc near
.text:00000000000112D0 ; __unwind {
.text:00000000000112D0                 mov     ecx, 100h       ; flags
.text:00000000000112D5                 jmp     _utimensat
.text:00000000000112D5 ; } // starts at 112D0
.text:00000000000112D5 lutimensat      endp
.text:00000000000112D5
.text:00000000000112D5 ; ---------------------------------------------------------------------------
.text:00000000000112DA                 align 20h
.text:00000000000112E0
.text:00000000000112E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000112E0
.text:00000000000112E0 ; Attributes: info_from_lumina
.text:00000000000112E0
.text:00000000000112E0 ; __int64 __fastcall fdutimens(int fildes, char *path)
.text:00000000000112E0                 public fdutimens
.text:00000000000112E0 fdutimens       proc near               ; CODE XREF: copy_internal+3A12↑p
.text:00000000000112E0                                         ; utimens+B↓j ...
.text:00000000000112E0
.text:00000000000112E0 times           = qword ptr -130h
.text:00000000000112E0 var_128         = xmmword ptr -128h
.text:00000000000112E0 var_118         = xmmword ptr -118h
.text:00000000000112E0 tvp             = timeval ptr -108h
.text:00000000000112E0 var_F8          = qword ptr -0F8h
.text:00000000000112E0 var_F0          = qword ptr -0F0h
.text:00000000000112E0 var_E8          = timeval ptr -0E8h
.text:00000000000112E0 var_D8          = xmmword ptr -0D8h
.text:00000000000112E0 stat_buf        = stat ptr -0C8h
.text:00000000000112E0 var_30          = qword ptr -30h
.text:00000000000112E0
.text:00000000000112E0 ; __unwind {
.text:00000000000112E0                 push    r14
.text:00000000000112E2                 push    r13
.text:00000000000112E4                 push    r12
.text:00000000000112E6                 push    rbp
.text:00000000000112E7                 mov     r12, rsi
.text:00000000000112EA                 push    rbx
.text:00000000000112EB                 mov     ebx, edi
.text:00000000000112ED                 sub     rsp, 110h
.text:00000000000112F4                 mov     rax, fs:28h
.text:00000000000112FD                 mov     [rsp+138h+var_30], rax
.text:0000000000011305                 xor     eax, eax
.text:0000000000011307                 test    rdx, rdx
.text:000000000001130A                 jz      loc_115D0
.text:0000000000011310                 movdqu  xmm0, xmmword ptr [rdx]
.text:0000000000011314                 lea     rdi, [rsp+138h+var_128]
.text:0000000000011319                 movaps  [rsp+138h+var_128], xmm0
.text:000000000001131E                 mov     [rsp+138h+times], rdi
.text:0000000000011323                 movdqu  xmm0, xmmword ptr [rdx+10h]
.text:0000000000011328                 movaps  [rsp+138h+var_118], xmm0
.text:000000000001132D                 call    validate_timespec
.text:0000000000011332                 test    eax, eax
.text:0000000000011334                 mov     r13d, eax
.text:0000000000011337                 js      loc_116F3
.text:000000000001133D
.text:000000000001133D loc_1133D:                              ; CODE XREF: fdutimens+2FC↓j
.text:000000000001133D                 test    ebx, ebx
.text:000000000001133F                 jns     short loc_1134A
.text:0000000000011341                 test    r12, r12
.text:0000000000011344                 jz      loc_116E8
.text:000000000001134A
.text:000000000001134A loc_1134A:                              ; CODE XREF: fdutimens+5F↑j
.text:000000000001134A                 mov     eax, cs:utimensat_works_really
.text:0000000000011350                 test    eax, eax
.text:0000000000011352                 js      short loc_11388
.text:0000000000011354                 cmp     r13d, 2
.text:0000000000011358                 jz      loc_11560
.text:000000000001135E                 mov     rsi, [rsp+138h+times] ; times
.text:0000000000011363
.text:0000000000011363 loc_11363:                              ; CODE XREF: fdutimens+2C7↓j
.text:0000000000011363                                         ; fdutimens+2E5↓j ...
.text:0000000000011363                 test    ebx, ebx
.text:0000000000011365                 js      loc_11690
.text:000000000001136B                 mov     edi, ebx        ; fd
.text:000000000001136D                 call    _futimens       ; PIC mode
.text:0000000000011372                 cmp     eax, 0
.text:0000000000011375                 mov     ebp, eax
.text:0000000000011377                 jle     loc_116AD
.text:000000000001137D
.text:000000000001137D loc_1137D:                              ; CODE XREF: fdutimens+3C7↓j
.text:000000000001137D                 call    ___errno_location ; PIC mode
.text:0000000000011382                 mov     dword ptr [rax], 26h ; '&'
.text:0000000000011388
.text:0000000000011388 loc_11388:                              ; CODE XREF: fdutimens+72↑j
.text:0000000000011388                                         ; fdutimens+459↓j
.text:0000000000011388                 test    r13d, r13d
.text:000000000001138B                 mov     cs:utimensat_works_really, 0FFFFFFFFh
.text:0000000000011395                 mov     cs:lutimensat_works_really, 0FFFFFFFFh
.text:000000000001139F                 jnz     loc_11500
.text:00000000000113A5
.text:00000000000113A5 loc_113A5:                              ; CODE XREF: fdutimens+26B↓j
.text:00000000000113A5                 mov     rsi, [rsp+138h+times]
.text:00000000000113AA                 test    rsi, rsi
.text:00000000000113AD                 jz      loc_11640
.text:00000000000113B3                 mov     rax, [rsi]
.text:00000000000113B6                 mov     rdi, [rsi+8]
.text:00000000000113BA                 mov     rcx, 20C49BA5E353F7CFh
.text:00000000000113C4                 lea     r13, [rsp+138h+tvp]
.text:00000000000113C9                 mov     [rsp+138h+tvp.tv_sec], rax
.text:00000000000113CE                 mov     rax, rdi
.text:00000000000113D1                 sar     rdi, 3Fh
.text:00000000000113D5                 imul    rcx
.text:00000000000113D8                 mov     rax, [rsi+10h]
.text:00000000000113DC                 mov     rsi, [rsi+18h]
.text:00000000000113E0                 mov     [rsp+138h+var_F8], rax
.text:00000000000113E5                 mov     rax, rsi
.text:00000000000113E8                 sar     rsi, 3Fh
.text:00000000000113EC                 sar     rdx, 7
.text:00000000000113F0                 sub     rdx, rdi
.text:00000000000113F3                 mov     [rsp+138h+tvp.tv_usec], rdx
.text:00000000000113F8                 imul    rcx
.text:00000000000113FB                 mov     rcx, rdx
.text:00000000000113FE                 sar     rcx, 7
.text:0000000000011402                 sub     rcx, rsi
.text:0000000000011405                 mov     [rsp+138h+var_F0], rcx
.text:000000000001140A
.text:000000000001140A loc_1140A:                              ; CODE XREF: fdutimens+363↓j
.text:000000000001140A                 test    ebx, ebx
.text:000000000001140C                 mov     rdx, r13        ; tvp
.text:000000000001140F                 js      loc_115E8
.text:0000000000011415                 xor     esi, esi        ; file
.text:0000000000011417                 mov     edi, ebx        ; fd
.text:0000000000011419                 call    _futimesat      ; PIC mode
.text:000000000001141E                 test    eax, eax
.text:0000000000011420                 mov     ebp, eax
.text:0000000000011422                 jnz     loc_11620
.text:0000000000011428                 test    r13, r13
.text:000000000001142B                 jz      loc_115F7
.text:0000000000011431                 cmp     qword ptr [r13+8], 7A11Fh
.text:0000000000011439                 setnle  r12b
.text:000000000001143D                 cmp     qword ptr [r13+18h], 7A11Fh
.text:0000000000011445                 setnle  r14b
.text:0000000000011449                 test    r12b, r12b
.text:000000000001144C                 jnz     short loc_11457
.text:000000000001144E                 test    r14b, r14b
.text:0000000000011451                 jz      loc_115F7
.text:0000000000011457
.text:0000000000011457 loc_11457:                              ; CODE XREF: fdutimens+16C↑j
.text:0000000000011457                 lea     rdx, [rsp+138h+stat_buf] ; stat_buf
.text:000000000001145C                 mov     esi, ebx        ; fildes
.text:000000000001145E                 mov     edi, 1          ; ver
.text:0000000000011463                 call    ___fxstat       ; PIC mode
.text:0000000000011468                 test    eax, eax
.text:000000000001146A                 jnz     loc_115F7
.text:0000000000011470                 mov     rdx, [rsp+138h+stat_buf.st_mtim.tv_sec]
.text:0000000000011478                 sub     rdx, [r13+10h]
.text:000000000001147C                 mov     rax, [rsp+138h+stat_buf.st_atim.tv_sec]
.text:0000000000011484                 sub     rax, [r13+0]
.text:0000000000011488                 movdqa  xmm0, xmmword ptr [r13+0]
.text:000000000001148E                 cmp     rdx, 1
.text:0000000000011492                 setz    dl
.text:0000000000011495                 movaps  xmmword ptr [rsp+138h+var_E8.tv_sec], xmm0
.text:000000000001149A                 and     r14d, edx
.text:000000000001149D                 cmp     rax, 1
.text:00000000000114A1                 movdqa  xmm0, xmmword ptr [r13+10h]
.text:00000000000114A7                 movaps  [rsp+138h+var_D8], xmm0
.text:00000000000114AC                 jnz     loc_11700
.text:00000000000114B2                 test    r12b, r12b
.text:00000000000114B5                 jz      loc_11700
.text:00000000000114BB                 cmp     [rsp+138h+stat_buf.st_atim.tv_nsec], 0
.text:00000000000114C4                 jnz     loc_11700
.text:00000000000114CA                 test    r14b, r14b
.text:00000000000114CD                 mov     [rsp+138h+var_E8.tv_usec], 0
.text:00000000000114D6                 jz      short loc_114E7
.text:00000000000114D8                 cmp     [rsp+138h+stat_buf.st_mtim.tv_nsec], 0
.text:00000000000114E1                 jz      loc_11718
.text:00000000000114E7
.text:00000000000114E7 loc_114E7:                              ; CODE XREF: fdutimens+1F6↑j
.text:00000000000114E7                                         ; fdutimens+441↓j
.text:00000000000114E7                 lea     rdx, [rsp+138h+var_E8] ; tvp
.text:00000000000114EC                 xor     esi, esi        ; file
.text:00000000000114EE                 mov     edi, ebx        ; fd
.text:00000000000114F0                 call    _futimesat      ; PIC mode
.text:00000000000114F5
.text:00000000000114F5 loc_114F5:                              ; CODE XREF: fdutimens+423↓j
.text:00000000000114F5                                         ; fdutimens+432↓j
.text:00000000000114F5                 xor     ebp, ebp
.text:00000000000114F7                 jmp     loc_115F7
.text:00000000000114F7 ; ---------------------------------------------------------------------------
.text:00000000000114FC                 align 20h
.text:0000000000011500
.text:0000000000011500 loc_11500:                              ; CODE XREF: fdutimens+BF↑j
.text:0000000000011500                 cmp     r13d, 3
.text:0000000000011504                 jz      short loc_1152C
.text:0000000000011506                 test    ebx, ebx
.text:0000000000011508                 lea     rdx, [rsp+138h+stat_buf] ; stat_buf
.text:000000000001150D                 js      loc_11650
.text:0000000000011513                 mov     esi, ebx        ; fildes
.text:0000000000011515                 mov     edi, 1          ; ver
.text:000000000001151A                 call    ___fxstat       ; PIC mode
.text:000000000001151F                 test    eax, eax
.text:0000000000011521                 setnz   al
.text:0000000000011524
.text:0000000000011524 loc_11524:                              ; CODE XREF: fdutimens+382↓j
.text:0000000000011524                 test    al, al
.text:0000000000011526                 jnz     loc_116F3
.text:000000000001152C
.text:000000000001152C loc_1152C:                              ; CODE XREF: fdutimens+224↑j
.text:000000000001152C                 cmp     [rsp+138h+times], 0
.text:0000000000011532                 jz      loc_11640
.text:0000000000011538                 lea     rsi, [rsp+138h+times]
.text:000000000001153D                 lea     rdi, [rsp+138h+stat_buf]
.text:0000000000011542                 xor     ebp, ebp
.text:0000000000011544                 call    update_timespec
.text:0000000000011549                 test    al, al
.text:000000000001154B                 jz      loc_113A5
.text:0000000000011551                 jmp     loc_115F7
.text:0000000000011551 ; ---------------------------------------------------------------------------
.text:0000000000011556                 align 20h
.text:0000000000011560
.text:0000000000011560 loc_11560:                              ; CODE XREF: fdutimens+78↑j
.text:0000000000011560                 test    ebx, ebx
.text:0000000000011562                 lea     rdx, [rsp+138h+stat_buf] ; stat_buf
.text:0000000000011567                 js      loc_11670
.text:000000000001156D                 mov     esi, ebx        ; fildes
.text:000000000001156F                 mov     edi, 1          ; ver
.text:0000000000011574                 call    ___fxstat       ; PIC mode
.text:0000000000011579                 test    eax, eax
.text:000000000001157B                 setnz   al
.text:000000000001157E
.text:000000000001157E loc_1157E:                              ; CODE XREF: fdutimens+3A2↓j
.text:000000000001157E                 test    al, al
.text:0000000000011580                 jnz     loc_116F3
.text:0000000000011586                 mov     rsi, [rsp+138h+times]
.text:000000000001158B                 cmp     qword ptr [rsi+8], 3FFFFFFEh
.text:0000000000011593                 jz      loc_116C0
.text:0000000000011599                 cmp     qword ptr [rsi+18h], 3FFFFFFEh
.text:00000000000115A1                 mov     r13d, 3
.text:00000000000115A7                 jnz     loc_11363
.text:00000000000115AD                 mov     rax, [rsp+138h+stat_buf.st_mtim.tv_nsec]
.text:00000000000115B5                 mov     rdx, [rsp+138h+stat_buf.st_mtim.tv_sec]
.text:00000000000115BD                 mov     [rsi+18h], rax
.text:00000000000115C1                 mov     [rsi+10h], rdx
.text:00000000000115C5                 jmp     loc_11363
.text:00000000000115C5 ; ---------------------------------------------------------------------------
.text:00000000000115CA                 align 10h
.text:00000000000115D0
.text:00000000000115D0 loc_115D0:                              ; CODE XREF: fdutimens+2A↑j
.text:00000000000115D0                 mov     [rsp+138h+times], 0
.text:00000000000115D9                 xor     r13d, r13d
.text:00000000000115DC                 jmp     loc_1133D
.text:00000000000115DC ; ---------------------------------------------------------------------------
.text:00000000000115E1                 align 8
.text:00000000000115E8
.text:00000000000115E8 loc_115E8:                              ; CODE XREF: fdutimens+12F↑j
.text:00000000000115E8                 mov     rsi, r12        ; file
.text:00000000000115EB                 mov     edi, 0FFFFFF9Ch ; fd
.text:00000000000115F0                 call    _futimesat      ; PIC mode
.text:00000000000115F5                 mov     ebp, eax
.text:00000000000115F7
.text:00000000000115F7 loc_115F7:                              ; CODE XREF: fdutimens+14B↑j
.text:00000000000115F7                                         ; fdutimens+171↑j ...
.text:00000000000115F7                 mov     rcx, [rsp+138h+var_30]
.text:00000000000115FF                 xor     rcx, fs:28h
.text:0000000000011608                 mov     eax, ebp
.text:000000000001160A                 jnz     loc_11726
.text:0000000000011610                 add     rsp, 110h
.text:0000000000011617                 pop     rbx
.text:0000000000011618                 pop     rbp
.text:0000000000011619                 pop     r12
.text:000000000001161B                 pop     r13
.text:000000000001161D                 pop     r14
.text:000000000001161F                 retn
.text:0000000000011620 ; ---------------------------------------------------------------------------
.text:0000000000011620
.text:0000000000011620 loc_11620:                              ; CODE XREF: fdutimens+142↑j
.text:0000000000011620                 test    r12, r12
.text:0000000000011623                 mov     ebp, 0FFFFFFFFh
.text:0000000000011628                 jz      short loc_115F7
.text:000000000001162A                 mov     rsi, r13        ; tvp
.text:000000000001162D                 mov     rdi, r12        ; file
.text:0000000000011630                 call    _utimes         ; PIC mode
.text:0000000000011635                 mov     ebp, eax
.text:0000000000011637                 jmp     short loc_115F7
.text:0000000000011637 ; ---------------------------------------------------------------------------
.text:0000000000011639                 align 20h
.text:0000000000011640
.text:0000000000011640 loc_11640:                              ; CODE XREF: fdutimens+CD↑j
.text:0000000000011640                                         ; fdutimens+252↑j
.text:0000000000011640                 xor     r13d, r13d
.text:0000000000011643                 jmp     loc_1140A
.text:0000000000011643 ; ---------------------------------------------------------------------------
.text:0000000000011648                 align 10h
.text:0000000000011650
.text:0000000000011650 loc_11650:                              ; CODE XREF: fdutimens+22D↑j
.text:0000000000011650                 mov     rsi, r12        ; filename
.text:0000000000011653                 mov     edi, 1          ; ver
.text:0000000000011658                 call    ___xstat        ; PIC mode
.text:000000000001165D                 test    eax, eax
.text:000000000001165F                 setnz   al
.text:0000000000011662                 jmp     loc_11524
.text:0000000000011662 ; ---------------------------------------------------------------------------
.text:0000000000011667                 align 10h
.text:0000000000011670
.text:0000000000011670 loc_11670:                              ; CODE XREF: fdutimens+287↑j
.text:0000000000011670                 mov     rsi, r12        ; filename
.text:0000000000011673                 mov     edi, 1          ; ver
.text:0000000000011678                 call    ___xstat        ; PIC mode
.text:000000000001167D                 test    eax, eax
.text:000000000001167F                 setnz   al
.text:0000000000011682                 jmp     loc_1157E
.text:0000000000011682 ; ---------------------------------------------------------------------------
.text:0000000000011687                 align 10h
.text:0000000000011690
.text:0000000000011690 loc_11690:                              ; CODE XREF: fdutimens+85↑j
.text:0000000000011690                 xor     ecx, ecx        ; flags
.text:0000000000011692                 mov     rdx, rsi        ; times
.text:0000000000011695                 mov     edi, 0FFFFFF9Ch ; fd
.text:000000000001169A                 mov     rsi, r12        ; path
.text:000000000001169D                 call    _utimensat      ; PIC mode
.text:00000000000116A2                 cmp     eax, 0
.text:00000000000116A5                 mov     ebp, eax
.text:00000000000116A7                 jg      loc_1137D
.text:00000000000116AD
.text:00000000000116AD loc_116AD:                              ; CODE XREF: fdutimens+97↑j
.text:00000000000116AD                 jnz     short loc_1172B
.text:00000000000116AF
.text:00000000000116AF loc_116AF:                              ; CODE XREF: fdutimens+453↓j
.text:00000000000116AF                 mov     cs:utimensat_works_really, 1
.text:00000000000116B9                 jmp     loc_115F7
.text:00000000000116B9 ; ---------------------------------------------------------------------------
.text:00000000000116BE                 align 20h
.text:00000000000116C0
.text:00000000000116C0 loc_116C0:                              ; CODE XREF: fdutimens+2B3↑j
.text:00000000000116C0                 mov     rax, [rsp+138h+stat_buf.st_atim.tv_nsec]
.text:00000000000116C8                 mov     rdx, [rsp+138h+stat_buf.st_atim.tv_sec]
.text:00000000000116D0                 mov     r13d, 3
.text:00000000000116D6                 mov     [rsi], rdx
.text:00000000000116D9                 mov     [rsi+8], rax
.text:00000000000116DD                 jmp     loc_11363
.text:00000000000116DD ; ---------------------------------------------------------------------------
.text:00000000000116E2                 align 8
.text:00000000000116E8
.text:00000000000116E8 loc_116E8:                              ; CODE XREF: fdutimens+64↑j
.text:00000000000116E8                 call    ___errno_location ; PIC mode
.text:00000000000116ED                 mov     dword ptr [rax], 9
.text:00000000000116F3
.text:00000000000116F3 loc_116F3:                              ; CODE XREF: fdutimens+57↑j
.text:00000000000116F3                                         ; fdutimens+246↑j ...
.text:00000000000116F3                 mov     ebp, 0FFFFFFFFh
.text:00000000000116F8                 jmp     loc_115F7
.text:00000000000116F8 ; ---------------------------------------------------------------------------
.text:00000000000116FD                 align 20h
.text:0000000000011700
.text:0000000000011700 loc_11700:                              ; CODE XREF: fdutimens+1CC↑j
.text:0000000000011700                                         ; fdutimens+1D5↑j ...
.text:0000000000011700                 test    r14b, r14b
.text:0000000000011703                 jz      loc_114F5
.text:0000000000011709                 cmp     [rsp+138h+stat_buf.st_mtim.tv_nsec], 0
.text:0000000000011712                 jnz     loc_114F5
.text:0000000000011718
.text:0000000000011718 loc_11718:                              ; CODE XREF: fdutimens+201↑j
.text:0000000000011718                 mov     qword ptr [rsp+138h+var_D8+8], 0
.text:0000000000011721                 jmp     loc_114E7
.text:0000000000011726 ; ---------------------------------------------------------------------------
.text:0000000000011726
.text:0000000000011726 loc_11726:                              ; CODE XREF: fdutimens+32A↑j
.text:0000000000011726                 call    ___stack_chk_fail ; PIC mode
.text:000000000001172B ; ---------------------------------------------------------------------------
.text:000000000001172B
.text:000000000001172B loc_1172B:                              ; CODE XREF: fdutimens:loc_116AD↑j
.text:000000000001172B                 call    ___errno_location ; PIC mode
.text:0000000000011730                 cmp     dword ptr [rax], 26h ; '&'
.text:0000000000011733                 jnz     loc_116AF
.text:0000000000011739                 jmp     loc_11388
.text:0000000000011739 ; } // starts at 112E0
.text:0000000000011739 fdutimens       endp
.text:0000000000011739
.text:0000000000011739 ; ---------------------------------------------------------------------------
.text:000000000001173E                 align 20h
.text:0000000000011740
.text:0000000000011740 ; =============== S U B R O U T I N E =======================================
.text:0000000000011740
.text:0000000000011740
.text:0000000000011740 ; __int64 __fastcall utimens(char *path)
.text:0000000000011740                 public utimens
.text:0000000000011740 utimens         proc near               ; CODE XREF: install_file_in_file+130↑p
.text:0000000000011740                                         ; copy_internal:loc_8240↑p
.text:0000000000011740 ; __unwind {
.text:0000000000011740                 mov     rdx, rsi
.text:0000000000011743                 mov     rsi, rdi        ; path
.text:0000000000011746                 mov     edi, 0FFFFFFFFh ; fildes
.text:000000000001174B                 jmp     fdutimens
.text:000000000001174B ; } // starts at 11740
.text:000000000001174B utimens         endp
.text:000000000001174B
.text:0000000000011750
.text:0000000000011750 ; =============== S U B R O U T I N E =======================================
.text:0000000000011750
.text:0000000000011750 ; Attributes: info_from_lumina
.text:0000000000011750
.text:0000000000011750 ; int __fastcall lutimens(const char *file, const timespec *timespec)
.text:0000000000011750                 public lutimens
.text:0000000000011750 lutimens        proc near               ; CODE XREF: copy_internal+677↑p
.text:0000000000011750
.text:0000000000011750 times           = qword ptr -0E0h
.text:0000000000011750 var_D8          = xmmword ptr -0D8h
.text:0000000000011750 var_C8          = xmmword ptr -0C8h
.text:0000000000011750 stat_buf        = stat ptr -0B8h
.text:0000000000011750 var_20          = qword ptr -20h
.text:0000000000011750
.text:0000000000011750 ; __unwind {
.text:0000000000011750                 push    r12
.text:0000000000011752                 push    rbp
.text:0000000000011753                 mov     r12, rdi
.text:0000000000011756                 push    rbx
.text:0000000000011757                 sub     rsp, 0D0h
.text:000000000001175E                 mov     rax, fs:28h
.text:0000000000011767                 mov     [rsp+0E8h+var_20], rax
.text:000000000001176F                 xor     eax, eax
.text:0000000000011771                 test    rsi, rsi
.text:0000000000011774                 jz      loc_11870
.text:000000000001177A                 movdqu  xmm0, xmmword ptr [rsi]
.text:000000000001177E                 lea     rdi, [rsp+0E8h+var_D8]
.text:0000000000011783                 movaps  [rsp+0E8h+var_D8], xmm0
.text:0000000000011788                 mov     [rsp+0E8h+times], rdi
.text:000000000001178D                 movdqu  xmm0, xmmword ptr [rsi+10h]
.text:0000000000011792                 movaps  [rsp+0E8h+var_C8], xmm0
.text:0000000000011797                 call    validate_timespec
.text:000000000001179C                 test    eax, eax
.text:000000000001179E                 mov     ebx, eax
.text:00000000000117A0                 js      loc_118B0
.text:00000000000117A6                 mov     eax, cs:lutimensat_works_really
.text:00000000000117AC                 test    eax, eax
.text:00000000000117AE                 js      short loc_117E6
.text:00000000000117B0                 cmp     ebx, 2
.text:00000000000117B3                 jz      loc_118E0
.text:00000000000117B9                 mov     rdx, [rsp+0E8h+times] ; times
.text:00000000000117BE
.text:00000000000117BE loc_117BE:                              ; CODE XREF: lutimens+135↓j
.text:00000000000117BE                                         ; lutimens+1C2↓j ...
.text:00000000000117BE                 mov     ecx, 100h       ; flags
.text:00000000000117C3                 mov     rsi, r12        ; path
.text:00000000000117C6                 mov     edi, 0FFFFFF9Ch ; fd
.text:00000000000117CB                 call    _utimensat
.text:00000000000117D0                 cmp     eax, 0
.text:00000000000117D3                 mov     ebp, eax
.text:00000000000117D5                 jle     loc_118C0
.text:00000000000117DB                 call    ___errno_location
.text:00000000000117E0                 mov     dword ptr [rax], 26h ; '&'
.text:00000000000117E6
.text:00000000000117E6 loc_117E6:                              ; CODE XREF: lutimens+5E↑j
.text:00000000000117E6                                         ; lutimens+259↓j
.text:00000000000117E6                 test    ebx, ebx
.text:00000000000117E8                 mov     cs:lutimensat_works_really, 0FFFFFFFFh
.text:00000000000117F2                 jz      loc_11895
.text:00000000000117F8                 cmp     ebx, 3
.text:00000000000117FB                 jnz     loc_11938
.text:0000000000011801                 cmp     [rsp+0E8h+times], 0
.text:0000000000011807                 jz      short loc_11820
.text:0000000000011809
.text:0000000000011809 loc_11809:                              ; CODE XREF: lutimens+208↓j
.text:0000000000011809                 lea     rsi, [rsp+0E8h+times]
.text:000000000001180E                 lea     rdi, [rsp+0E8h+stat_buf]
.text:0000000000011813                 xor     ebp, ebp
.text:0000000000011815                 call    update_timespec
.text:000000000001181A                 test    al, al
.text:000000000001181C                 jnz     short loc_11848
.text:000000000001181E                 xchg    ax, ax
.text:0000000000011820
.text:0000000000011820 loc_11820:                              ; CODE XREF: lutimens+B7↑j
.text:0000000000011820                                         ; lutimens+159↓j ...
.text:0000000000011820                 mov     eax, [rsp+0E8h+stat_buf.st_mode]
.text:0000000000011824                 and     eax, 0F000h
.text:0000000000011829                 cmp     eax, 0A000h
.text:000000000001182E                 jz      loc_11986
.text:0000000000011834                 mov     rdx, [rsp+0E8h+times]
.text:0000000000011839                 mov     rsi, r12        ; path
.text:000000000001183C                 mov     edi, 0FFFFFFFFh ; fildes
.text:0000000000011841                 call    fdutimens
.text:0000000000011846                 mov     ebp, eax
.text:0000000000011848
.text:0000000000011848 loc_11848:                              ; CODE XREF: lutimens+CC↑j
.text:0000000000011848                                         ; lutimens+165↓j ...
.text:0000000000011848                 mov     rcx, [rsp+0E8h+var_20]
.text:0000000000011850                 xor     rcx, fs:28h
.text:0000000000011859                 mov     eax, ebp
.text:000000000001185B                 jnz     loc_11996
.text:0000000000011861                 add     rsp, 0D0h
.text:0000000000011868                 pop     rbx
.text:0000000000011869                 pop     rbp
.text:000000000001186A                 pop     r12
.text:000000000001186C                 retn
.text:000000000001186C ; ---------------------------------------------------------------------------
.text:000000000001186D                 align 10h
.text:0000000000011870
.text:0000000000011870 loc_11870:                              ; CODE XREF: lutimens+24↑j
.text:0000000000011870                 mov     ecx, cs:lutimensat_works_really
.text:0000000000011876                 xor     edx, edx
.text:0000000000011878                 xor     ebx, ebx
.text:000000000001187A                 mov     [rsp+0E8h+times], 0
.text:0000000000011883                 test    ecx, ecx
.text:0000000000011885                 jns     loc_117BE
.text:000000000001188B                 mov     cs:lutimensat_works_really, 0FFFFFFFFh
.text:0000000000011895
.text:0000000000011895 loc_11895:                              ; CODE XREF: lutimens+A2↑j
.text:0000000000011895                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:000000000001189A                 mov     rsi, r12        ; filename
.text:000000000001189D                 mov     edi, 1          ; ver
.text:00000000000118A2                 call    ___lxstat
.text:00000000000118A7                 test    eax, eax
.text:00000000000118A9                 jz      loc_11820
.text:00000000000118AF                 nop
.text:00000000000118B0
.text:00000000000118B0 loc_118B0:                              ; CODE XREF: lutimens+50↑j
.text:00000000000118B0                                         ; lutimens+1A4↓j ...
.text:00000000000118B0                 mov     ebp, 0FFFFFFFFh
.text:00000000000118B5                 jmp     short loc_11848
.text:00000000000118B5 ; ---------------------------------------------------------------------------
.text:00000000000118B7                 align 20h
.text:00000000000118C0
.text:00000000000118C0 loc_118C0:                              ; CODE XREF: lutimens+85↑j
.text:00000000000118C0                 jnz     loc_1199B
.text:00000000000118C6
.text:00000000000118C6 loc_118C6:                              ; CODE XREF: lutimens+253↓j
.text:00000000000118C6                 mov     cs:utimensat_works_really, 1
.text:00000000000118D0                 mov     cs:lutimensat_works_really, 1
.text:00000000000118DA                 jmp     loc_11848
.text:00000000000118DA ; ---------------------------------------------------------------------------
.text:00000000000118DF                 align 20h
.text:00000000000118E0
.text:00000000000118E0 loc_118E0:                              ; CODE XREF: lutimens+63↑j
.text:00000000000118E0                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:00000000000118E5                 mov     rsi, r12        ; filename
.text:00000000000118E8                 mov     edi, 1          ; ver
.text:00000000000118ED                 call    ___lxstat
.text:00000000000118F2                 test    eax, eax
.text:00000000000118F4                 jnz     short loc_118B0
.text:00000000000118F6                 mov     rdx, [rsp+0E8h+times]
.text:00000000000118FB                 cmp     qword ptr [rdx+8], 3FFFFFFEh
.text:0000000000011903                 jz      short loc_11968
.text:0000000000011905                 cmp     qword ptr [rdx+18h], 3FFFFFFEh
.text:000000000001190D                 mov     ebx, 3
.text:0000000000011912                 jnz     loc_117BE
.text:0000000000011918                 mov     rax, [rsp+0E8h+stat_buf.st_mtim.tv_nsec]
.text:0000000000011920                 mov     rcx, [rsp+0E8h+stat_buf.st_mtim.tv_sec]
.text:0000000000011928                 mov     [rdx+18h], rax
.text:000000000001192C                 mov     [rdx+10h], rcx
.text:0000000000011930                 jmp     loc_117BE
.text:0000000000011930 ; ---------------------------------------------------------------------------
.text:0000000000011935                 align 8
.text:0000000000011938
.text:0000000000011938 loc_11938:                              ; CODE XREF: lutimens+AB↑j
.text:0000000000011938                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:000000000001193D                 mov     rsi, r12        ; filename
.text:0000000000011940                 mov     edi, 1          ; ver
.text:0000000000011945                 call    ___lxstat
.text:000000000001194A                 test    eax, eax
.text:000000000001194C                 jnz     loc_118B0
.text:0000000000011952                 cmp     [rsp+0E8h+times], 0
.text:0000000000011958                 jnz     loc_11809
.text:000000000001195E                 jmp     loc_11820
.text:000000000001195E ; ---------------------------------------------------------------------------
.text:0000000000011963                 align 8
.text:0000000000011968
.text:0000000000011968 loc_11968:                              ; CODE XREF: lutimens+1B3↑j
.text:0000000000011968                 mov     rax, [rsp+0E8h+stat_buf.st_atim.tv_nsec]
.text:0000000000011970                 mov     rcx, [rsp+0E8h+stat_buf.st_atim.tv_sec]
.text:0000000000011975                 mov     ebx, 3
.text:000000000001197A                 mov     [rdx], rcx
.text:000000000001197D                 mov     [rdx+8], rax
.text:0000000000011981                 jmp     loc_117BE
.text:0000000000011986 ; ---------------------------------------------------------------------------
.text:0000000000011986
.text:0000000000011986 loc_11986:                              ; CODE XREF: lutimens+DE↑j
.text:0000000000011986                 call    ___errno_location
.text:000000000001198B                 mov     dword ptr [rax], 26h ; '&'
.text:0000000000011991                 jmp     loc_118B0
.text:0000000000011996 ; ---------------------------------------------------------------------------
.text:0000000000011996
.text:0000000000011996 loc_11996:                              ; CODE XREF: lutimens+10B↑j
.text:0000000000011996                 call    ___stack_chk_fail
.text:000000000001199B ; ---------------------------------------------------------------------------
.text:000000000001199B
.text:000000000001199B loc_1199B:                              ; CODE XREF: lutimens:loc_118C0↑j
.text:000000000001199B                 call    ___errno_location
.text:00000000000119A0                 cmp     dword ptr [rax], 26h ; '&'
.text:00000000000119A3                 jnz     loc_118C6
.text:00000000000119A9                 jmp     loc_117E6
.text:00000000000119A9 ; } // starts at 11750
.text:00000000000119A9 lutimens        endp
.text:00000000000119A9
.text:00000000000119A9 ; ---------------------------------------------------------------------------
.text:00000000000119AE                 align 10h
.text:00000000000119B0
.text:00000000000119B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000119B0
.text:00000000000119B0
.text:00000000000119B0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000119B0                 public version_etc_arn
.text:00000000000119B0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_11DEB↓j
.text:00000000000119B0                                         ; version_etc_va:loc_11E3B↓p ...
.text:00000000000119B0
.text:00000000000119B0 var_58          = qword ptr -58h
.text:00000000000119B0 var_50          = qword ptr -50h
.text:00000000000119B0 var_48          = qword ptr -48h
.text:00000000000119B0 var_40          = qword ptr -40h
.text:00000000000119B0
.text:00000000000119B0 ; __unwind {
.text:00000000000119B0                 push    r15
.text:00000000000119B2                 push    r14
.text:00000000000119B4                 push    r13
.text:00000000000119B6                 push    r12
.text:00000000000119B8                 mov     r12, r9
.text:00000000000119BB                 push    rbp
.text:00000000000119BC                 push    rbx
.text:00000000000119BD                 mov     rbp, rdi
.text:00000000000119C0                 mov     rbx, r8
.text:00000000000119C3                 sub     rsp, 28h
.text:00000000000119C7                 test    rsi, rsi
.text:00000000000119CA                 jz      loc_11AE8
.text:00000000000119D0                 mov     r8, rdx
.text:00000000000119D3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000119DA                 mov     r9, rcx
.text:00000000000119DD                 xor     eax, eax
.text:00000000000119DF                 mov     rcx, rsi
.text:00000000000119E2                 mov     esi, 1
.text:00000000000119E7                 call    ___fprintf_chk
.text:00000000000119EC
.text:00000000000119EC loc_119EC:                              ; CODE XREF: version_etc_arn+151↓j
.text:00000000000119EC                 lea     rsi, aC_0       ; "(C)"
.text:00000000000119F3                 xor     edi, edi        ; domainname
.text:00000000000119F5                 mov     edx, 5          ; category
.text:00000000000119FA                 call    _dcgettext
.text:00000000000119FF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000011A06                 mov     rcx, rax
.text:0000000000011A09                 mov     r8d, 7E3h
.text:0000000000011A0F                 mov     esi, 1
.text:0000000000011A14                 mov     rdi, rbp
.text:0000000000011A17                 xor     eax, eax
.text:0000000000011A19                 call    ___fprintf_chk
.text:0000000000011A1E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000011A25                 xor     edi, edi        ; domainname
.text:0000000000011A27                 mov     edx, 5          ; category
.text:0000000000011A2C                 call    _dcgettext
.text:0000000000011A31                 mov     rsi, rbp        ; stream
.text:0000000000011A34                 mov     rdi, rax        ; s
.text:0000000000011A37                 call    _fputs_unlocked
.text:0000000000011A3C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000011A40                 ja      def_11A54       ; jumptable 0000000000011A54 default case
.text:0000000000011A46                 lea     rdx, jpt_11A54
.text:0000000000011A4D                 movsxd  rax, ds:(jpt_11A54 - 18C74h)[rdx+r12*4]
.text:0000000000011A51                 add     rax, rdx
.text:0000000000011A54                 jmp     rax             ; switch jump
.text:0000000000011A54 ; ---------------------------------------------------------------------------
.text:0000000000011A56                 align 20h
.text:0000000000011A60
.text:0000000000011A60 loc_11A60:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000011A60                                         ; DATA XREF: .rodata:jpt_11A54↓o
.text:0000000000011A60                 mov     r9, [rbx+38h]   ; jumptable 0000000000011A54 case 8
.text:0000000000011A64                 mov     rax, [rbx+10h]
.text:0000000000011A68                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000011A6F                 mov     r8, [rbx+8]
.text:0000000000011A73                 mov     edx, 5          ; category
.text:0000000000011A78                 xor     edi, edi        ; domainname
.text:0000000000011A7A                 mov     r13, [rbx+30h]
.text:0000000000011A7E                 mov     r12, [rbx+28h]
.text:0000000000011A82                 mov     [rsp+58h+var_48], r9
.text:0000000000011A87                 mov     r15, [rbx+20h]
.text:0000000000011A8B                 mov     r14, [rbx+18h]
.text:0000000000011A8F                 mov     [rsp+58h+var_58], rax
.text:0000000000011A93                 mov     [rsp+58h+var_50], r8
.text:0000000000011A98                 mov     rbx, [rbx]
.text:0000000000011A9B                 call    _dcgettext
.text:0000000000011AA0                 sub     rsp, 8
.text:0000000000011AA4
.text:0000000000011AA4 loc_11AA4:                              ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000011AA4                 mov     r9, [rsp+60h+var_48]
.text:0000000000011AA9                 mov     rdx, rax
.text:0000000000011AAC                 mov     rcx, rbx
.text:0000000000011AAF                 mov     esi, 1
.text:0000000000011AB4                 mov     rdi, rbp
.text:0000000000011AB7                 xor     eax, eax
.text:0000000000011AB9                 push    r9
.text:0000000000011ABB                 push    r13
.text:0000000000011ABD                 push    r12
.text:0000000000011ABF                 push    r15
.text:0000000000011AC1                 push    r14
.text:0000000000011AC3                 mov     r9, [rsp+88h+var_58]
.text:0000000000011AC8                 mov     r8, [rsp+88h+var_50]
.text:0000000000011ACD                 call    ___fprintf_chk
.text:0000000000011AD2                 add     rsp, 30h
.text:0000000000011AD6
.text:0000000000011AD6 loc_11AD6:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000011AD6                                         ; DATA XREF: .rodata:jpt_11A54↓o
.text:0000000000011AD6                 add     rsp, 28h        ; jumptable 0000000000011A54 case 0
.text:0000000000011ADA                 pop     rbx
.text:0000000000011ADB                 pop     rbp
.text:0000000000011ADC                 pop     r12
.text:0000000000011ADE                 pop     r13
.text:0000000000011AE0                 pop     r14
.text:0000000000011AE2                 pop     r15
.text:0000000000011AE4                 retn
.text:0000000000011AE4 ; ---------------------------------------------------------------------------
.text:0000000000011AE5                 align 8
.text:0000000000011AE8
.text:0000000000011AE8 loc_11AE8:                              ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000011AE8                 mov     r8, rcx
.text:0000000000011AEB                 mov     rcx, rdx
.text:0000000000011AEE                 lea     rdx, aSS_1      ; "%s %s\n"
.text:0000000000011AF5                 mov     esi, 1
.text:0000000000011AFA                 xor     eax, eax
.text:0000000000011AFC                 call    ___fprintf_chk
.text:0000000000011B01                 jmp     loc_119EC
.text:0000000000011B01 ; ---------------------------------------------------------------------------
.text:0000000000011B06                 align 10h
.text:0000000000011B10
.text:0000000000011B10 loc_11B10:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000011B10                                         ; DATA XREF: .rodata:jpt_11A54↓o
.text:0000000000011B10                 mov     r10, [rbx+40h]  ; jumptable 0000000000011A54 case 9
.text:0000000000011B14                 mov     r9, [rbx+38h]
.text:0000000000011B18                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000011B1F                 mov     rax, [rbx+10h]
.text:0000000000011B23                 mov     r8, [rbx+8]
.text:0000000000011B27                 mov     edx, 5          ; category
.text:0000000000011B2C                 mov     r13, [rbx+30h]
.text:0000000000011B30                 mov     r12, [rbx+28h]
.text:0000000000011B34                 mov     r15, [rbx+20h]
.text:0000000000011B38                 mov     r14, [rbx+18h]
.text:0000000000011B3C                 mov     rbx, [rbx]
.text:0000000000011B3F                 mov     [rsp+58h+var_40], r10
.text:0000000000011B44                 mov     [rsp+58h+var_48], r9
.text:0000000000011B49                 mov     [rsp+58h+var_58], rax
.text:0000000000011B4D                 mov     [rsp+58h+var_50], r8
.text:0000000000011B52
.text:0000000000011B52 loc_11B52:                              ; CODE XREF: version_etc_arn+412↓j
.text:0000000000011B52                 xor     edi, edi        ; domainname
.text:0000000000011B54                 call    _dcgettext
.text:0000000000011B59                 mov     r10, [rsp+58h+var_40]
.text:0000000000011B5E                 push    r10
.text:0000000000011B60                 jmp     loc_11AA4
.text:0000000000011B60 ; ---------------------------------------------------------------------------
.text:0000000000011B65                 align 8
.text:0000000000011B68
.text:0000000000011B68 loc_11B68:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000011B68                                         ; DATA XREF: .rodata:jpt_11A54↓o
.text:0000000000011B68                 mov     rbx, [rbx]      ; jumptable 0000000000011A54 case 1
.text:0000000000011B6B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000011B72                 mov     edx, 5          ; category
.text:0000000000011B77                 xor     edi, edi        ; domainname
.text:0000000000011B79                 call    _dcgettext
.text:0000000000011B7E                 add     rsp, 28h
.text:0000000000011B82                 mov     rcx, rbx
.text:0000000000011B85                 mov     rdi, rbp
.text:0000000000011B88                 pop     rbx
.text:0000000000011B89                 pop     rbp
.text:0000000000011B8A                 pop     r12
.text:0000000000011B8C                 pop     r13
.text:0000000000011B8E                 pop     r14
.text:0000000000011B90                 pop     r15
.text:0000000000011B92                 mov     rdx, rax
.text:0000000000011B95                 mov     esi, 1
.text:0000000000011B9A                 xor     eax, eax
.text:0000000000011B9C                 jmp     ___fprintf_chk
.text:0000000000011B9C ; ---------------------------------------------------------------------------
.text:0000000000011BA1                 align 8
.text:0000000000011BA8
.text:0000000000011BA8 loc_11BA8:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000011BA8                                         ; DATA XREF: .rodata:jpt_11A54↓o
.text:0000000000011BA8                 mov     r12, [rbx+8]    ; jumptable 0000000000011A54 case 2
.text:0000000000011BAC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000011BB3                 mov     rbx, [rbx]
.text:0000000000011BB6                 mov     edx, 5          ; category
.text:0000000000011BBB                 xor     edi, edi        ; domainname
.text:0000000000011BBD                 call    _dcgettext
.text:0000000000011BC2                 add     rsp, 28h
.text:0000000000011BC6                 mov     r8, r12
.text:0000000000011BC9                 mov     rcx, rbx
.text:0000000000011BCC                 mov     rdi, rbp
.text:0000000000011BCF                 mov     rdx, rax
.text:0000000000011BD2                 mov     esi, 1
.text:0000000000011BD7                 pop     rbx
.text:0000000000011BD8                 pop     rbp
.text:0000000000011BD9                 pop     r12
.text:0000000000011BDB                 pop     r13
.text:0000000000011BDD                 pop     r14
.text:0000000000011BDF                 pop     r15
.text:0000000000011BE1                 xor     eax, eax
.text:0000000000011BE3                 jmp     ___fprintf_chk
.text:0000000000011BE3 ; ---------------------------------------------------------------------------
.text:0000000000011BE8                 align 10h
.text:0000000000011BF0
.text:0000000000011BF0 loc_11BF0:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000011BF0                                         ; DATA XREF: .rodata:jpt_11A54↓o
.text:0000000000011BF0                 mov     r13, [rbx+10h]  ; jumptable 0000000000011A54 case 3
.text:0000000000011BF4                 mov     r12, [rbx+8]
.text:0000000000011BF8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000011BFF                 mov     rbx, [rbx]
.text:0000000000011C02                 mov     edx, 5          ; category
.text:0000000000011C07                 xor     edi, edi        ; domainname
.text:0000000000011C09                 call    _dcgettext
.text:0000000000011C0E                 add     rsp, 28h
.text:0000000000011C12                 mov     r9, r13
.text:0000000000011C15                 mov     r8, r12
.text:0000000000011C18                 mov     rcx, rbx
.text:0000000000011C1B                 mov     rdi, rbp
.text:0000000000011C1E                 mov     rdx, rax
.text:0000000000011C21                 pop     rbx
.text:0000000000011C22                 pop     rbp
.text:0000000000011C23                 pop     r12
.text:0000000000011C25                 pop     r13
.text:0000000000011C27                 pop     r14
.text:0000000000011C29                 pop     r15
.text:0000000000011C2B                 mov     esi, 1
.text:0000000000011C30                 xor     eax, eax
.text:0000000000011C32                 jmp     ___fprintf_chk
.text:0000000000011C32 ; ---------------------------------------------------------------------------
.text:0000000000011C37                 align 20h
.text:0000000000011C40
.text:0000000000011C40 loc_11C40:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000011C40                                         ; DATA XREF: .rodata:jpt_11A54↓o
.text:0000000000011C40                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000011A54 case 4
.text:0000000000011C47                 mov     edx, 5          ; category
.text:0000000000011C4C                 xor     edi, edi        ; domainname
.text:0000000000011C4E                 mov     r14, [rbx+18h]
.text:0000000000011C52                 mov     r13, [rbx+10h]
.text:0000000000011C56                 mov     r12, [rbx+8]
.text:0000000000011C5A                 mov     rbx, [rbx]
.text:0000000000011C5D                 call    _dcgettext
.text:0000000000011C62                 sub     rsp, 8
.text:0000000000011C66
.text:0000000000011C66 loc_11C66:                              ; CODE XREF: version_etc_arn+310↓j
.text:0000000000011C66                 push    r14
.text:0000000000011C68                 mov     rdx, rax
.text:0000000000011C6B                 mov     r9, r13
.text:0000000000011C6E                 mov     r8, r12
.text:0000000000011C71                 mov     rcx, rbx
.text:0000000000011C74                 mov     rdi, rbp
.text:0000000000011C77                 mov     esi, 1
.text:0000000000011C7C                 xor     eax, eax
.text:0000000000011C7E                 call    ___fprintf_chk
.text:0000000000011C83                 pop     rax
.text:0000000000011C84                 pop     rdx
.text:0000000000011C85                 add     rsp, 28h
.text:0000000000011C89                 pop     rbx
.text:0000000000011C8A                 pop     rbp
.text:0000000000011C8B                 pop     r12
.text:0000000000011C8D                 pop     r13
.text:0000000000011C8F                 pop     r14
.text:0000000000011C91                 pop     r15
.text:0000000000011C93                 retn
.text:0000000000011C93 ; ---------------------------------------------------------------------------
.text:0000000000011C94                 align 8
.text:0000000000011C98
.text:0000000000011C98 loc_11C98:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000011C98                                         ; DATA XREF: .rodata:jpt_11A54↓o
.text:0000000000011C98                 mov     r15, [rbx+20h]  ; jumptable 0000000000011A54 case 5
.text:0000000000011C9C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000011CA3                 mov     edx, 5          ; category
.text:0000000000011CA8                 xor     edi, edi        ; domainname
.text:0000000000011CAA                 mov     r14, [rbx+18h]
.text:0000000000011CAE                 mov     r13, [rbx+10h]
.text:0000000000011CB2                 mov     r12, [rbx+8]
.text:0000000000011CB6                 mov     rbx, [rbx]
.text:0000000000011CB9                 call    _dcgettext
.text:0000000000011CBE                 push    r15
.text:0000000000011CC0                 jmp     short loc_11C66
.text:0000000000011CC0 ; ---------------------------------------------------------------------------
.text:0000000000011CC2                 align 8
.text:0000000000011CC8
.text:0000000000011CC8 loc_11CC8:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000011CC8                                         ; DATA XREF: .rodata:jpt_11A54↓o
.text:0000000000011CC8                 mov     r8, [rbx+8]     ; jumptable 0000000000011A54 case 6
.text:0000000000011CCC                 mov     r12, [rbx+28h]
.text:0000000000011CD0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000011CD7                 mov     r15, [rbx+20h]
.text:0000000000011CDB                 mov     r14, [rbx+18h]
.text:0000000000011CDF                 mov     edx, 5          ; category
.text:0000000000011CE4                 mov     r13, [rbx+10h]
.text:0000000000011CE8                 xor     edi, edi        ; domainname
.text:0000000000011CEA                 mov     rbx, [rbx]
.text:0000000000011CED                 mov     [rsp+58h+var_58], r8
.text:0000000000011CF1                 call    _dcgettext
.text:0000000000011CF6                 sub     rsp, 8
.text:0000000000011CFA                 mov     r9, r13
.text:0000000000011CFD                 push    r12
.text:0000000000011CFF                 push    r15
.text:0000000000011D01                 push    r14
.text:0000000000011D03
.text:0000000000011D03 loc_11D03:                              ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000011D03                 mov     r8, [rsp+78h+var_58]
.text:0000000000011D08                 mov     rcx, rbx
.text:0000000000011D0B                 mov     rdx, rax
.text:0000000000011D0E                 mov     rdi, rbp
.text:0000000000011D11                 mov     esi, 1
.text:0000000000011D16                 xor     eax, eax
.text:0000000000011D18                 call    ___fprintf_chk
.text:0000000000011D1D                 add     rsp, 20h
.text:0000000000011D21                 add     rsp, 28h
.text:0000000000011D25                 pop     rbx
.text:0000000000011D26                 pop     rbp
.text:0000000000011D27                 pop     r12
.text:0000000000011D29                 pop     r13
.text:0000000000011D2B                 pop     r14
.text:0000000000011D2D                 pop     r15
.text:0000000000011D2F                 retn
.text:0000000000011D30 ; ---------------------------------------------------------------------------
.text:0000000000011D30
.text:0000000000011D30 loc_11D30:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000011D30                                         ; DATA XREF: .rodata:jpt_11A54↓o
.text:0000000000011D30                 mov     r9, [rbx+10h]   ; jumptable 0000000000011A54 case 7
.text:0000000000011D34                 mov     r13, [rbx+30h]
.text:0000000000011D38                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000011D3F                 mov     r12, [rbx+28h]
.text:0000000000011D43                 mov     r15, [rbx+20h]
.text:0000000000011D47                 mov     edx, 5          ; category
.text:0000000000011D4C                 mov     r14, [rbx+18h]
.text:0000000000011D50                 mov     r8, [rbx+8]
.text:0000000000011D54                 xor     edi, edi        ; domainname
.text:0000000000011D56                 mov     [rsp+58h+var_50], r9
.text:0000000000011D5B                 mov     rbx, [rbx]
.text:0000000000011D5E                 mov     [rsp+58h+var_58], r8
.text:0000000000011D62                 call    _dcgettext
.text:0000000000011D67                 push    r13
.text:0000000000011D69                 push    r12
.text:0000000000011D6B                 push    r15
.text:0000000000011D6D                 push    r14
.text:0000000000011D6F                 mov     r9, [rsp+78h+var_50]
.text:0000000000011D74                 jmp     short loc_11D03
.text:0000000000011D74 ; ---------------------------------------------------------------------------
.text:0000000000011D76                 align 20h
.text:0000000000011D80
.text:0000000000011D80 def_11A54:                              ; CODE XREF: version_etc_arn+90↑j
.text:0000000000011D80                 mov     r10, [rbx+40h]  ; jumptable 0000000000011A54 default case
.text:0000000000011D84                 mov     r9, [rbx+38h]
.text:0000000000011D88                 mov     edx, 5
.text:0000000000011D8D                 mov     rax, [rbx+10h]
.text:0000000000011D91                 mov     r8, [rbx+8]
.text:0000000000011D95                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000011D9C                 mov     r13, [rbx+30h]
.text:0000000000011DA0                 mov     r12, [rbx+28h]
.text:0000000000011DA4                 mov     r15, [rbx+20h]
.text:0000000000011DA8                 mov     r14, [rbx+18h]
.text:0000000000011DAC                 mov     [rsp+58h+var_40], r10
.text:0000000000011DB1                 mov     [rsp+58h+var_48], r9
.text:0000000000011DB6                 mov     [rsp+58h+var_58], rax
.text:0000000000011DBA                 mov     [rsp+58h+var_50], r8
.text:0000000000011DBF                 mov     rbx, [rbx]
.text:0000000000011DC2                 jmp     loc_11B52
.text:0000000000011DC2 ; } // starts at 119B0
.text:0000000000011DC2 version_etc_arn endp
.text:0000000000011DC2
.text:0000000000011DC2 ; ---------------------------------------------------------------------------
.text:0000000000011DC7                 align 10h
.text:0000000000011DD0
.text:0000000000011DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011DD0
.text:0000000000011DD0 ; Attributes: info_from_lumina
.text:0000000000011DD0
.text:0000000000011DD0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000011DD0                 public version_etc_ar
.text:0000000000011DD0 version_etc_ar  proc near
.text:0000000000011DD0 ; __unwind {
.text:0000000000011DD0                 xor     r9d, r9d
.text:0000000000011DD3                 cmp     qword ptr [r8], 0
.text:0000000000011DD7                 jz      short loc_11DEB
.text:0000000000011DD9                 nop     dword ptr [rax+00000000h]
.text:0000000000011DE0
.text:0000000000011DE0 loc_11DE0:                              ; CODE XREF: version_etc_ar+19↓j
.text:0000000000011DE0                 add     r9, 1
.text:0000000000011DE4                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000011DE9                 jnz     short loc_11DE0
.text:0000000000011DEB
.text:0000000000011DEB loc_11DEB:                              ; CODE XREF: version_etc_ar+7↑j
.text:0000000000011DEB                 jmp     version_etc_arn
.text:0000000000011DEB ; } // starts at 11DD0
.text:0000000000011DEB version_etc_ar  endp
.text:0000000000011DEB
.text:0000000000011DF0
.text:0000000000011DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011DF0
.text:0000000000011DF0 ; Attributes: info_from_lumina
.text:0000000000011DF0
.text:0000000000011DF0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000011DF0                 public version_etc_va
.text:0000000000011DF0 version_etc_va  proc near
.text:0000000000011DF0
.text:0000000000011DF0 authtab         = qword ptr -68h
.text:0000000000011DF0 var_10          = qword ptr -10h
.text:0000000000011DF0
.text:0000000000011DF0 ; __unwind {
.text:0000000000011DF0                 sub     rsp, 68h
.text:0000000000011DF4                 mov     r10, r8
.text:0000000000011DF7                 xor     r9d, r9d
.text:0000000000011DFA                 mov     rax, fs:28h
.text:0000000000011E03                 mov     [rsp+68h+var_10], rax
.text:0000000000011E08                 xor     eax, eax
.text:0000000000011E0A                 mov     r8, rsp
.text:0000000000011E0D                 nop     dword ptr [rax]
.text:0000000000011E10
.text:0000000000011E10 loc_11E10:                              ; CODE XREF: version_etc_va+49↓j
.text:0000000000011E10                 mov     eax, [r10]
.text:0000000000011E13                 cmp     eax, 2Fh ; '/'
.text:0000000000011E16                 ja      short loc_11E5A
.text:0000000000011E18                 mov     r11d, eax
.text:0000000000011E1B                 add     r11, [r10+10h]
.text:0000000000011E1F                 add     eax, 8
.text:0000000000011E22                 mov     [r10], eax
.text:0000000000011E25
.text:0000000000011E25 loc_11E25:                              ; CODE XREF: version_etc_va+76↓j
.text:0000000000011E25                 mov     rax, [r11]
.text:0000000000011E28                 test    rax, rax
.text:0000000000011E2B                 mov     [r8+r9*8], rax
.text:0000000000011E2F                 jz      short loc_11E3B
.text:0000000000011E31                 add     r9, 1
.text:0000000000011E35                 cmp     r9, 0Ah
.text:0000000000011E39                 jnz     short loc_11E10
.text:0000000000011E3B
.text:0000000000011E3B loc_11E3B:                              ; CODE XREF: version_etc_va+3F↑j
.text:0000000000011E3B                 call    version_etc_arn
.text:0000000000011E40                 mov     rax, [rsp+68h+var_10]
.text:0000000000011E45                 xor     rax, fs:28h
.text:0000000000011E4E                 jnz     short loc_11E55
.text:0000000000011E50                 add     rsp, 68h
.text:0000000000011E54                 retn
.text:0000000000011E55 ; ---------------------------------------------------------------------------
.text:0000000000011E55
.text:0000000000011E55 loc_11E55:                              ; CODE XREF: version_etc_va+5E↑j
.text:0000000000011E55                 call    ___stack_chk_fail
.text:0000000000011E5A ; ---------------------------------------------------------------------------
.text:0000000000011E5A
.text:0000000000011E5A loc_11E5A:                              ; CODE XREF: version_etc_va+26↑j
.text:0000000000011E5A                 mov     r11, [r10+8]
.text:0000000000011E5E                 lea     rax, [r11+8]
.text:0000000000011E62                 mov     [r10+8], rax
.text:0000000000011E66                 jmp     short loc_11E25
.text:0000000000011E66 ; } // starts at 11DF0
.text:0000000000011E66 version_etc_va  endp
.text:0000000000011E66
.text:0000000000011E66 ; ---------------------------------------------------------------------------
.text:0000000000011E68                 align 10h
.text:0000000000011E70
.text:0000000000011E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000011E70
.text:0000000000011E70 ; Attributes: info_from_lumina
.text:0000000000011E70
.text:0000000000011E70 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000011E70                 public version_etc
.text:0000000000011E70 version_etc     proc near               ; CODE XREF: main+364↑p
.text:0000000000011E70
.text:0000000000011E70 var_C0          = dword ptr -0C0h
.text:0000000000011E70 var_B8          = qword ptr -0B8h
.text:0000000000011E70 var_B0          = qword ptr -0B0h
.text:0000000000011E70 var_A8          = byte ptr -0A8h
.text:0000000000011E70 var_50          = qword ptr -50h
.text:0000000000011E70 var_48          = byte ptr -48h
.text:0000000000011E70 var_28          = qword ptr -28h
.text:0000000000011E70 var_20          = qword ptr -20h
.text:0000000000011E70 arg_0           = byte ptr  8
.text:0000000000011E70
.text:0000000000011E70 ; __unwind {
.text:0000000000011E70                 push    rbp
.text:0000000000011E71                 push    rbx
.text:0000000000011E72                 mov     r10d, 20h ; ' '
.text:0000000000011E78                 xor     r11d, r11d
.text:0000000000011E7B                 sub     rsp, 0B8h
.text:0000000000011E82                 mov     rax, fs:28h
.text:0000000000011E8B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000011E90                 xor     eax, eax
.text:0000000000011E92                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000011E9A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000011EA2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000011EAA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000011EAF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000011EB7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000011EBF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000011EC4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000011ECC                 xor     r9d, r9d
.text:0000000000011ECF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000011ED4                 mov     rbp, rax
.text:0000000000011ED7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000011EE0
.text:0000000000011EE0 loc_11EE0:                              ; CODE XREF: version_etc+9A↓j
.text:0000000000011EE0                 cmp     r10d, 2Fh ; '/'
.text:0000000000011EE4                 ja      short loc_11F3C
.text:0000000000011EE6                 mov     eax, r10d
.text:0000000000011EE9                 mov     r11d, 1
.text:0000000000011EEF                 add     r10d, 8
.text:0000000000011EF3                 add     rax, rbp
.text:0000000000011EF6
.text:0000000000011EF6 loc_11EF6:                              ; CODE XREF: version_etc+D3↓j
.text:0000000000011EF6                 mov     rax, [rax]
.text:0000000000011EF9                 test    rax, rax
.text:0000000000011EFC                 mov     [r8+r9*8], rax
.text:0000000000011F00                 jz      short loc_11F0C
.text:0000000000011F02                 add     r9, 1
.text:0000000000011F06                 cmp     r9, 0Ah
.text:0000000000011F0A                 jnz     short loc_11EE0
.text:0000000000011F0C
.text:0000000000011F0C loc_11F0C:                              ; CODE XREF: version_etc+90↑j
.text:0000000000011F0C                 test    r11b, r11b
.text:0000000000011F0F                 jnz     short loc_11F35
.text:0000000000011F11
.text:0000000000011F11 loc_11F11:                              ; CODE XREF: version_etc+CA↓j
.text:0000000000011F11                 call    version_etc_arn
.text:0000000000011F16                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000011F1B                 xor     rax, fs:28h
.text:0000000000011F24                 jnz     short loc_11F30
.text:0000000000011F26                 add     rsp, 0B8h
.text:0000000000011F2D                 pop     rbx
.text:0000000000011F2E                 pop     rbp
.text:0000000000011F2F                 retn
.text:0000000000011F30 ; ---------------------------------------------------------------------------
.text:0000000000011F30
.text:0000000000011F30 loc_11F30:                              ; CODE XREF: version_etc+B4↑j
.text:0000000000011F30                 call    ___stack_chk_fail
.text:0000000000011F35 ; ---------------------------------------------------------------------------
.text:0000000000011F35
.text:0000000000011F35 loc_11F35:                              ; CODE XREF: version_etc+9F↑j
.text:0000000000011F35                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000011F3A                 jmp     short loc_11F11
.text:0000000000011F3C ; ---------------------------------------------------------------------------
.text:0000000000011F3C
.text:0000000000011F3C loc_11F3C:                              ; CODE XREF: version_etc+74↑j
.text:0000000000011F3C                 mov     rax, rbx
.text:0000000000011F3F                 add     rbx, 8
.text:0000000000011F43                 jmp     short loc_11EF6
.text:0000000000011F43 ; } // starts at 11E70
.text:0000000000011F43 version_etc     endp
.text:0000000000011F43
.text:0000000000011F43 ; ---------------------------------------------------------------------------
.text:0000000000011F45                 align 10h
.text:0000000000011F50
.text:0000000000011F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000011F50
.text:0000000000011F50 ; Attributes: info_from_lumina
.text:0000000000011F50
.text:0000000000011F50 ; void __cdecl emit_bug_reporting_address()
.text:0000000000011F50                 public emit_bug_reporting_address
.text:0000000000011F50 emit_bug_reporting_address proc near
.text:0000000000011F50 ; __unwind {
.text:0000000000011F50                 push    rbx
.text:0000000000011F51                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000011F58                 mov     edx, 5          ; category
.text:0000000000011F5D                 xor     edi, edi        ; domainname
.text:0000000000011F5F                 call    _dcgettext
.text:0000000000011F64                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000011F6B                 mov     rsi, rax
.text:0000000000011F6E                 mov     edi, 1
.text:0000000000011F73                 xor     eax, eax
.text:0000000000011F75                 call    ___printf_chk
.text:0000000000011F7A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000011F81                 mov     edx, 5          ; category
.text:0000000000011F86                 xor     edi, edi        ; domainname
.text:0000000000011F88                 call    _dcgettext
.text:0000000000011F8D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000011F94                 lea     rdx, unk_16506
.text:0000000000011F9B                 mov     rsi, rax
.text:0000000000011F9E                 mov     edi, 1
.text:0000000000011FA3                 xor     eax, eax
.text:0000000000011FA5                 call    ___printf_chk
.text:0000000000011FAA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000011FB1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000011FB8                 xor     edi, edi        ; domainname
.text:0000000000011FBA                 mov     edx, 5          ; category
.text:0000000000011FBF                 call    _dcgettext
.text:0000000000011FC4                 mov     rsi, rbx        ; stream
.text:0000000000011FC7                 mov     rdi, rax        ; s
.text:0000000000011FCA                 pop     rbx
.text:0000000000011FCB                 jmp     _fputs_unlocked
.text:0000000000011FCB ; } // starts at 11F50
.text:0000000000011FCB emit_bug_reporting_address endp
.text:0000000000011FCB
.text:0000000000011FD0
.text:0000000000011FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011FD0
.text:0000000000011FD0
.text:0000000000011FD0                 public can_write_any_file
.text:0000000000011FD0 can_write_any_file proc near            ; CODE XREF: writable_destination+12↑p
.text:0000000000011FD0 ; __unwind {
.text:0000000000011FD0                 cmp     cs:initialized_3064, 0
.text:0000000000011FD7                 jz      short loc_11FE8
.text:0000000000011FD9                 movzx   eax, cs:can_write_3065
.text:0000000000011FE0                 retn
.text:0000000000011FE0 ; ---------------------------------------------------------------------------
.text:0000000000011FE1                 align 8
.text:0000000000011FE8
.text:0000000000011FE8 loc_11FE8:                              ; CODE XREF: can_write_any_file+7↑j
.text:0000000000011FE8                 sub     rsp, 8
.text:0000000000011FEC                 call    _geteuid
.text:0000000000011FF1                 test    eax, eax
.text:0000000000011FF3                 mov     cs:initialized_3064, 1
.text:0000000000011FFA                 setz    al
.text:0000000000011FFD                 mov     cs:can_write_3065, al
.text:0000000000012003                 add     rsp, 8
.text:0000000000012007                 retn
.text:0000000000012007 ; } // starts at 11FD0
.text:0000000000012007 can_write_any_file endp
.text:0000000000012007
.text:0000000000012007 ; ---------------------------------------------------------------------------
.text:0000000000012008                 align 10h
.text:0000000000012010
.text:0000000000012010 ; =============== S U B R O U T I N E =======================================
.text:0000000000012010
.text:0000000000012010
.text:0000000000012010                 public xmalloc
.text:0000000000012010 xmalloc         proc near               ; CODE XREF: copy_internal+2886↑p
.text:0000000000012010                                         ; copy_internal+303B↑p ...
.text:0000000000012010 ; __unwind {
.text:0000000000012010                 push    rbx
.text:0000000000012011                 mov     rbx, rdi
.text:0000000000012014                 call    _malloc
.text:0000000000012019                 test    rax, rax
.text:000000000001201C                 jnz     short loc_12023
.text:000000000001201E                 test    rbx, rbx
.text:0000000000012021                 jnz     short loc_12025
.text:0000000000012023
.text:0000000000012023 loc_12023:                              ; CODE XREF: xmalloc+C↑j
.text:0000000000012023                 pop     rbx
.text:0000000000012024                 retn
.text:0000000000012025 ; ---------------------------------------------------------------------------
.text:0000000000012025
.text:0000000000012025 loc_12025:                              ; CODE XREF: xmalloc+11↑j
.text:0000000000012025                 call    xalloc_die
.text:0000000000012025 ; } // starts at 12010
.text:0000000000012025 xmalloc         endp
.text:0000000000012025
.text:0000000000012025 ; ---------------------------------------------------------------------------
.text:000000000001202A                 align 10h
.text:0000000000012030
.text:0000000000012030 ; =============== S U B R O U T I N E =======================================
.text:0000000000012030
.text:0000000000012030 ; Attributes: info_from_lumina
.text:0000000000012030
.text:0000000000012030 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000012030                 public xnmalloc
.text:0000000000012030 xnmalloc        proc near
.text:0000000000012030 ; __unwind {
.text:0000000000012030                 mov     rax, rdi
.text:0000000000012033                 mul     rsi
.text:0000000000012036                 mov     rdi, rax
.text:0000000000012039                 seto    al
.text:000000000001203C                 test    rdi, rdi
.text:000000000001203F                 js      short loc_1204B
.text:0000000000012041                 movzx   eax, al
.text:0000000000012044                 test    rax, rax
.text:0000000000012047                 jnz     short loc_1204B
.text:0000000000012049                 jmp     short xmalloc
.text:000000000001204B ; ---------------------------------------------------------------------------
.text:000000000001204B
.text:000000000001204B loc_1204B:                              ; CODE XREF: xnmalloc+F↑j
.text:000000000001204B                                         ; xnmalloc+17↑j
.text:000000000001204B                 sub     rsp, 8
.text:000000000001204F                 call    xalloc_die
.text:000000000001204F ; } // starts at 12030
.text:000000000001204F xnmalloc        endp
.text:000000000001204F
.text:000000000001204F ; ---------------------------------------------------------------------------
.text:0000000000012054                 align 20h
.text:0000000000012060
.text:0000000000012060 ; =============== S U B R O U T I N E =======================================
.text:0000000000012060
.text:0000000000012060
.text:0000000000012060                 public xcharalloc
.text:0000000000012060 xcharalloc      proc near
.text:0000000000012060 ; __unwind {
.text:0000000000012060                 jmp     short xmalloc
.text:0000000000012060 ; } // starts at 12060
.text:0000000000012060 xcharalloc      endp
.text:0000000000012060
.text:0000000000012060 ; ---------------------------------------------------------------------------
.text:0000000000012062                 align 10h
.text:0000000000012070
.text:0000000000012070 ; =============== S U B R O U T I N E =======================================
.text:0000000000012070
.text:0000000000012070 ; Attributes: info_from_lumina
.text:0000000000012070
.text:0000000000012070 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000012070                 public xrealloc
.text:0000000000012070 xrealloc        proc near               ; CODE XREF: extent_scan_read+E0↑p
.text:0000000000012070                                         ; quotearg_n_options+6E↑p ...
.text:0000000000012070 ; __unwind {
.text:0000000000012070                 test    rsi, rsi
.text:0000000000012073                 push    rbx
.text:0000000000012074                 mov     rbx, rsi
.text:0000000000012077                 jnz     short loc_1207E
.text:0000000000012079                 test    rdi, rdi
.text:000000000001207C                 jnz     short loc_12098
.text:000000000001207E
.text:000000000001207E loc_1207E:                              ; CODE XREF: xrealloc+7↑j
.text:000000000001207E                 mov     rsi, rbx        ; size
.text:0000000000012081                 call    _realloc
.text:0000000000012086                 test    rax, rax
.text:0000000000012089                 jnz     short loc_12090
.text:000000000001208B                 test    rbx, rbx
.text:000000000001208E                 jnz     short loc_120A1
.text:0000000000012090
.text:0000000000012090 loc_12090:                              ; CODE XREF: xrealloc+19↑j
.text:0000000000012090                 pop     rbx
.text:0000000000012091                 retn
.text:0000000000012091 ; ---------------------------------------------------------------------------
.text:0000000000012092                 align 8
.text:0000000000012098
.text:0000000000012098 loc_12098:                              ; CODE XREF: xrealloc+C↑j
.text:0000000000012098                 call    free
.text:000000000001209D                 xor     eax, eax
.text:000000000001209F                 pop     rbx
.text:00000000000120A0                 retn
.text:00000000000120A1 ; ---------------------------------------------------------------------------
.text:00000000000120A1
.text:00000000000120A1 loc_120A1:                              ; CODE XREF: xrealloc+1E↑j
.text:00000000000120A1                 call    xalloc_die
.text:00000000000120A1 ; } // starts at 12070
.text:00000000000120A1 xrealloc        endp
.text:00000000000120A1
.text:00000000000120A1 ; ---------------------------------------------------------------------------
.text:00000000000120A6                 align 10h
.text:00000000000120B0
.text:00000000000120B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000120B0
.text:00000000000120B0 ; Attributes: info_from_lumina
.text:00000000000120B0
.text:00000000000120B0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000120B0                 public xnrealloc
.text:00000000000120B0 xnrealloc       proc near
.text:00000000000120B0 ; __unwind {
.text:00000000000120B0                 mov     rax, rsi
.text:00000000000120B3                 mul     rdx
.text:00000000000120B6                 mov     rsi, rax
.text:00000000000120B9                 seto    al
.text:00000000000120BC                 test    rsi, rsi
.text:00000000000120BF                 js      short loc_120CB
.text:00000000000120C1                 movzx   eax, al
.text:00000000000120C4                 test    rax, rax
.text:00000000000120C7                 jnz     short loc_120CB
.text:00000000000120C9                 jmp     short xrealloc
.text:00000000000120CB ; ---------------------------------------------------------------------------
.text:00000000000120CB
.text:00000000000120CB loc_120CB:                              ; CODE XREF: xnrealloc+F↑j
.text:00000000000120CB                                         ; xnrealloc+17↑j
.text:00000000000120CB                 sub     rsp, 8
.text:00000000000120CF                 call    xalloc_die
.text:00000000000120CF ; } // starts at 120B0
.text:00000000000120CF xnrealloc       endp
.text:00000000000120CF
.text:00000000000120CF ; ---------------------------------------------------------------------------
.text:00000000000120D4                 align 20h
.text:00000000000120E0
.text:00000000000120E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000120E0
.text:00000000000120E0 ; Attributes: info_from_lumina
.text:00000000000120E0
.text:00000000000120E0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000120E0                 public x2nrealloc
.text:00000000000120E0 x2nrealloc      proc near
.text:00000000000120E0 ; __unwind {
.text:00000000000120E0                 test    rdi, rdi
.text:00000000000120E3                 mov     r9, rdx
.text:00000000000120E6                 mov     rcx, [rsi]
.text:00000000000120E9                 jz      short loc_12120
.text:00000000000120EB                 xor     edx, edx
.text:00000000000120ED                 mov     rax, 5555555555555554h
.text:00000000000120F7                 div     r9
.text:00000000000120FA                 cmp     rax, rcx
.text:00000000000120FD                 jbe     short loc_1213B
.text:00000000000120FF                 mov     rax, rcx
.text:0000000000012102                 shr     rax, 1
.text:0000000000012105                 lea     rcx, [rax+rcx+1]
.text:000000000001210A
.text:000000000001210A loc_1210A:                              ; CODE XREF: x2nrealloc+59↓j
.text:000000000001210A                 mov     [rsi], rcx
.text:000000000001210D                 imul    rcx, r9
.text:0000000000012111                 mov     rsi, rcx
.text:0000000000012114                 jmp     xrealloc
.text:0000000000012114 ; ---------------------------------------------------------------------------
.text:0000000000012119                 align 20h
.text:0000000000012120
.text:0000000000012120 loc_12120:                              ; CODE XREF: x2nrealloc+9↑j
.text:0000000000012120                 test    rcx, rcx
.text:0000000000012123                 jz      short loc_12148
.text:0000000000012125
.text:0000000000012125 loc_12125:                              ; CODE XREF: x2nrealloc+80↓j
.text:0000000000012125                 mov     rax, rcx
.text:0000000000012128                 mul     r9
.text:000000000001212B                 seto    dl
.text:000000000001212E                 test    rax, rax
.text:0000000000012131                 movzx   edx, dl
.text:0000000000012134                 js      short loc_1213B
.text:0000000000012136                 test    rdx, rdx
.text:0000000000012139                 jz      short loc_1210A
.text:000000000001213B
.text:000000000001213B loc_1213B:                              ; CODE XREF: x2nrealloc+1D↑j
.text:000000000001213B                                         ; x2nrealloc+54↑j
.text:000000000001213B                 sub     rsp, 8
.text:000000000001213F                 call    xalloc_die
.text:000000000001213F ; ---------------------------------------------------------------------------
.text:0000000000012144                 align 8
.text:0000000000012148
.text:0000000000012148 loc_12148:                              ; CODE XREF: x2nrealloc+43↑j
.text:0000000000012148                 xor     edx, edx
.text:000000000001214A                 mov     eax, 80h
.text:000000000001214F                 xor     r8d, r8d
.text:0000000000012152                 div     r9
.text:0000000000012155                 test    rax, rax
.text:0000000000012158                 setz    r8b
.text:000000000001215C                 lea     rcx, [r8+rax]
.text:0000000000012160                 jmp     short loc_12125
.text:0000000000012160 ; } // starts at 120E0
.text:0000000000012160 x2nrealloc      endp
.text:0000000000012160
.text:0000000000012160 ; ---------------------------------------------------------------------------
.text:0000000000012162                 align 10h
.text:0000000000012170
.text:0000000000012170 ; =============== S U B R O U T I N E =======================================
.text:0000000000012170
.text:0000000000012170 ; Attributes: info_from_lumina
.text:0000000000012170
.text:0000000000012170 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000012170                 public x2realloc
.text:0000000000012170 x2realloc       proc near
.text:0000000000012170 ; __unwind {
.text:0000000000012170                 test    rdi, rdi
.text:0000000000012173                 mov     rax, [rsi]
.text:0000000000012176                 jz      short loc_121A0
.text:0000000000012178                 mov     rdx, 5555555555555553h
.text:0000000000012182                 cmp     rax, rdx
.text:0000000000012185                 ja      short loc_121B1
.text:0000000000012187                 mov     rdx, rax
.text:000000000001218A                 shr     rdx, 1
.text:000000000001218D                 lea     rax, [rdx+rax+1]
.text:0000000000012192
.text:0000000000012192 loc_12192:                              ; CODE XREF: x2realloc+3F↓j
.text:0000000000012192                 mov     [rsi], rax
.text:0000000000012195                 mov     rsi, rax
.text:0000000000012198                 jmp     xrealloc
.text:0000000000012198 ; ---------------------------------------------------------------------------
.text:000000000001219D                 align 20h
.text:00000000000121A0
.text:00000000000121A0 loc_121A0:                              ; CODE XREF: x2realloc+6↑j
.text:00000000000121A0                 test    rax, rax
.text:00000000000121A3                 mov     edx, 80h
.text:00000000000121A8                 cmovz   rax, rdx
.text:00000000000121AC                 test    rax, rax
.text:00000000000121AF                 jns     short loc_12192
.text:00000000000121B1
.text:00000000000121B1 loc_121B1:                              ; CODE XREF: x2realloc+15↑j
.text:00000000000121B1                 sub     rsp, 8
.text:00000000000121B5                 call    xalloc_die
.text:00000000000121B5 ; } // starts at 12170
.text:00000000000121B5 x2realloc       endp
.text:00000000000121B5
.text:00000000000121B5 ; ---------------------------------------------------------------------------
.text:00000000000121BA                 align 20h
.text:00000000000121C0
.text:00000000000121C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000121C0
.text:00000000000121C0
.text:00000000000121C0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000121C0                 public xzalloc
.text:00000000000121C0 xzalloc         proc near
.text:00000000000121C0 ; __unwind {
.text:00000000000121C0                 push    rbx
.text:00000000000121C1                 mov     rbx, rdi
.text:00000000000121C4                 call    xmalloc
.text:00000000000121C9                 mov     rdx, rbx        ; n
.text:00000000000121CC                 xor     esi, esi        ; c
.text:00000000000121CE                 mov     rdi, rax        ; s
.text:00000000000121D1                 pop     rbx
.text:00000000000121D2                 jmp     _memset
.text:00000000000121D2 ; } // starts at 121C0
.text:00000000000121D2 xzalloc         endp
.text:00000000000121D2
.text:00000000000121D2 ; ---------------------------------------------------------------------------
.text:00000000000121D7                 align 20h
.text:00000000000121E0
.text:00000000000121E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000121E0
.text:00000000000121E0 ; Attributes: info_from_lumina
.text:00000000000121E0
.text:00000000000121E0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000121E0                 public xcalloc
.text:00000000000121E0 xcalloc         proc near
.text:00000000000121E0 ; __unwind {
.text:00000000000121E0                 mov     rax, rdi
.text:00000000000121E3                 sub     rsp, 8
.text:00000000000121E7                 mul     rsi
.text:00000000000121EA                 seto    dl
.text:00000000000121ED                 test    rax, rax
.text:00000000000121F0                 js      short loc_12209
.text:00000000000121F2                 movzx   edx, dl
.text:00000000000121F5                 test    rdx, rdx
.text:00000000000121F8                 jnz     short loc_12209
.text:00000000000121FA                 call    _calloc
.text:00000000000121FF                 test    rax, rax
.text:0000000000012202                 jz      short loc_12209
.text:0000000000012204                 add     rsp, 8
.text:0000000000012208                 retn
.text:0000000000012209 ; ---------------------------------------------------------------------------
.text:0000000000012209
.text:0000000000012209 loc_12209:                              ; CODE XREF: xcalloc+10↑j
.text:0000000000012209                                         ; xcalloc+18↑j ...
.text:0000000000012209                 call    xalloc_die
.text:0000000000012209 ; } // starts at 121E0
.text:0000000000012209 xcalloc         endp
.text:0000000000012209
.text:0000000000012209 ; ---------------------------------------------------------------------------
.text:000000000001220E                 align 10h
.text:0000000000012210
.text:0000000000012210 ; =============== S U B R O U T I N E =======================================
.text:0000000000012210
.text:0000000000012210 ; Attributes: info_from_lumina
.text:0000000000012210
.text:0000000000012210 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000012210                 public xmemdup
.text:0000000000012210 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000012210                                         ; xstrdup+11↓j
.text:0000000000012210 ; __unwind {
.text:0000000000012210                 push    rbp
.text:0000000000012211                 push    rbx
.text:0000000000012212                 mov     rbp, rdi
.text:0000000000012215                 mov     rdi, rsi
.text:0000000000012218                 mov     rbx, rsi
.text:000000000001221B                 sub     rsp, 8
.text:000000000001221F                 call    xmalloc
.text:0000000000012224                 add     rsp, 8
.text:0000000000012228                 mov     rdx, rbx        ; n
.text:000000000001222B                 mov     rsi, rbp        ; src
.text:000000000001222E                 pop     rbx
.text:000000000001222F                 pop     rbp
.text:0000000000012230                 mov     rdi, rax        ; dest
.text:0000000000012233                 jmp     _memcpy
.text:0000000000012233 ; } // starts at 12210
.text:0000000000012233 xmemdup         endp
.text:0000000000012233
.text:0000000000012233 ; ---------------------------------------------------------------------------
.text:0000000000012238                 align 20h
.text:0000000000012240
.text:0000000000012240 ; =============== S U B R O U T I N E =======================================
.text:0000000000012240
.text:0000000000012240
.text:0000000000012240 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000012240                 public xstrdup
.text:0000000000012240 xstrdup         proc near               ; CODE XREF: main+288↑p
.text:0000000000012240                                         ; remember_copied+23↑p ...
.text:0000000000012240 ; __unwind {
.text:0000000000012240                 push    rbx
.text:0000000000012241                 mov     rbx, rdi
.text:0000000000012244                 call    _strlen
.text:0000000000012249                 mov     rdi, rbx        ; src
.text:000000000001224C                 lea     rsi, [rax+1]    ; n
.text:0000000000012250                 pop     rbx
.text:0000000000012251                 jmp     short xmemdup
.text:0000000000012251 ; } // starts at 12240
.text:0000000000012251 xstrdup         endp
.text:0000000000012251
.text:0000000000012251 ; ---------------------------------------------------------------------------
.text:0000000000012253                 align 20h
.text:0000000000012260
.text:0000000000012260 ; =============== S U B R O U T I N E =======================================
.text:0000000000012260
.text:0000000000012260 ; Attributes: noreturn info_from_lumina
.text:0000000000012260
.text:0000000000012260 ; void __cdecl xalloc_die()
.text:0000000000012260                 public xalloc_die
.text:0000000000012260 xalloc_die      proc near               ; CODE XREF: remember_copied:loc_A034↑p
.text:0000000000012260                                         ; hash_init:loc_A076↑p ...
.text:0000000000012260 ; __unwind {
.text:0000000000012260                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000012267                 sub     rsp, 8
.text:000000000001226B                 mov     edx, 5          ; category
.text:0000000000012270                 xor     edi, edi        ; domainname
.text:0000000000012272                 call    _dcgettext
.text:0000000000012277                 mov     edi, cs:exit_failure ; status
.text:000000000001227D                 lea     rdx, aS_0+2     ; format
.text:0000000000012284                 mov     rcx, rax
.text:0000000000012287                 xor     esi, esi        ; errnum
.text:0000000000012289                 xor     eax, eax
.text:000000000001228B                 call    _error
.text:0000000000012290                 call    _abort
.text:0000000000012290 ; } // starts at 12260
.text:0000000000012290 xalloc_die      endp
.text:0000000000012290
.text:0000000000012290 ; ---------------------------------------------------------------------------
.text:0000000000012295                 align 20h
.text:00000000000122A0
.text:00000000000122A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000122A0
.text:00000000000122A0
.text:00000000000122A0 ; __int64 __fastcall xstrtoul(char *nptr)
.text:00000000000122A0                 public xstrtoul
.text:00000000000122A0 xstrtoul        proc near               ; CODE XREF: main+9BF↑p
.text:00000000000122A0                                         ; main+A24↑p
.text:00000000000122A0
.text:00000000000122A0 base            = dword ptr -50h
.text:00000000000122A0 endptr          = qword ptr -48h
.text:00000000000122A0 var_40          = qword ptr -40h
.text:00000000000122A0
.text:00000000000122A0 ; __unwind {
.text:00000000000122A0                 push    r15
.text:00000000000122A2                 push    r14
.text:00000000000122A4                 push    r13
.text:00000000000122A6                 push    r12
.text:00000000000122A8                 push    rbp
.text:00000000000122A9                 push    rbx
.text:00000000000122AA                 sub     rsp, 28h
.text:00000000000122AE                 mov     rax, fs:28h
.text:00000000000122B7                 mov     [rsp+58h+var_40], rax
.text:00000000000122BC                 xor     eax, eax
.text:00000000000122BE                 cmp     edx, 24h ; '$'
.text:00000000000122C1                 ja      loc_12625
.text:00000000000122C7                 lea     rax, [rsp+58h+endptr]
.text:00000000000122CC                 mov     r15, rsi
.text:00000000000122CF                 test    rsi, rsi
.text:00000000000122D2                 mov     rbp, rdi
.text:00000000000122D5                 mov     [rsp+58h+base], edx
.text:00000000000122D9                 mov     r14, rcx
.text:00000000000122DC                 mov     r13, r8
.text:00000000000122DF                 cmovz   r15, rax
.text:00000000000122E3                 call    ___errno_location
.text:00000000000122E8                 mov     dword ptr [rax], 0
.text:00000000000122EE                 mov     r12, rax
.text:00000000000122F1                 movzx   ebx, byte ptr [rbp+0]
.text:00000000000122F5                 call    ___ctype_b_loc
.text:00000000000122FA                 mov     edx, [rsp+58h+base] ; base
.text:00000000000122FE                 mov     rsi, [rax]
.text:0000000000012301                 mov     rax, rbp
.text:0000000000012304                 jmp     short loc_12317
.text:0000000000012304 ; ---------------------------------------------------------------------------
.text:0000000000012306                 align 10h
.text:0000000000012310
.text:0000000000012310 loc_12310:                              ; CODE XREF: xstrtoul+7F↓j
.text:0000000000012310                 add     rax, 1
.text:0000000000012314                 movzx   ebx, byte ptr [rax]
.text:0000000000012317
.text:0000000000012317 loc_12317:                              ; CODE XREF: xstrtoul+64↑j
.text:0000000000012317                 movzx   ecx, bl
.text:000000000001231A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000001231F                 jnz     short loc_12310
.text:0000000000012321                 cmp     bl, 2Dh ; '-'
.text:0000000000012324                 jz      short loc_12378
.text:0000000000012326                 mov     rsi, r15        ; endptr
.text:0000000000012329                 mov     rdi, rbp        ; nptr
.text:000000000001232C                 call    _strtoul
.text:0000000000012331                 mov     rcx, [r15]
.text:0000000000012334                 mov     rbx, rax
.text:0000000000012337                 cmp     rcx, rbp
.text:000000000001233A                 jz      short loc_12368
.text:000000000001233C                 mov     eax, [r12]
.text:0000000000012340                 test    eax, eax
.text:0000000000012342                 jz      short loc_123A8
.text:0000000000012344                 cmp     eax, 22h ; '"'
.text:0000000000012347                 mov     ebp, 1
.text:000000000001234C                 jnz     short loc_12378
.text:000000000001234E
.text:000000000001234E loc_1234E:                              ; CODE XREF: xstrtoul+10A↓j
.text:000000000001234E                 test    r13, r13
.text:0000000000012351                 jz      short loc_1235C
.text:0000000000012353                 movzx   r12d, byte ptr [rcx]
.text:0000000000012357                 test    r12b, r12b
.text:000000000001235A                 jnz     short loc_123D7
.text:000000000001235C
.text:000000000001235C loc_1235C:                              ; CODE XREF: xstrtoul+B1↑j
.text:000000000001235C                 mov     [r14], rbx
.text:000000000001235F                 jmp     short loc_1237D
.text:000000000001235F ; ---------------------------------------------------------------------------
.text:0000000000012361                 align 8
.text:0000000000012368
.text:0000000000012368 loc_12368:                              ; CODE XREF: xstrtoul+9A↑j
.text:0000000000012368                 test    r13, r13
.text:000000000001236B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000012370                 jnz     short loc_123B0
.text:0000000000012372                 nop     word ptr [rax+rax+00h]
.text:0000000000012378
.text:0000000000012378 loc_12378:                              ; CODE XREF: xstrtoul+84↑j
.text:0000000000012378                                         ; xstrtoul+AC↑j ...
.text:0000000000012378                 mov     ebp, 4
.text:000000000001237D
.text:000000000001237D loc_1237D:                              ; CODE XREF: xstrtoul+BF↑j
.text:000000000001237D                                         ; xstrtoul+217↓j ...
.text:000000000001237D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000012382                 xor     rdi, fs:28h
.text:000000000001238B                 mov     eax, ebp
.text:000000000001238D                 jnz     loc_12620
.text:0000000000012393                 add     rsp, 28h
.text:0000000000012397                 pop     rbx
.text:0000000000012398                 pop     rbp
.text:0000000000012399                 pop     r12
.text:000000000001239B                 pop     r13
.text:000000000001239D                 pop     r14
.text:000000000001239F                 pop     r15
.text:00000000000123A1                 retn
.text:00000000000123A1 ; ---------------------------------------------------------------------------
.text:00000000000123A2                 align 8
.text:00000000000123A8
.text:00000000000123A8 loc_123A8:                              ; CODE XREF: xstrtoul+A2↑j
.text:00000000000123A8                 xor     ebp, ebp
.text:00000000000123AA                 jmp     short loc_1234E
.text:00000000000123AA ; ---------------------------------------------------------------------------
.text:00000000000123AC                 align 10h
.text:00000000000123B0
.text:00000000000123B0 loc_123B0:                              ; CODE XREF: xstrtoul+D0↑j
.text:00000000000123B0                 movzx   r12d, byte ptr [rbp+0]
.text:00000000000123B5                 test    r12b, r12b
.text:00000000000123B8                 jz      short loc_12378
.text:00000000000123BA                 movsx   esi, r12b       ; c
.text:00000000000123BE                 mov     rdi, r13        ; s
.text:00000000000123C1                 xor     ebp, ebp
.text:00000000000123C3                 call    _strchr
.text:00000000000123C8                 test    rax, rax
.text:00000000000123CB                 mov     ebx, 1
.text:00000000000123D0                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000123D5                 jz      short loc_12378
.text:00000000000123D7
.text:00000000000123D7 loc_123D7:                              ; CODE XREF: xstrtoul+BA↑j
.text:00000000000123D7                 movsx   esi, r12b       ; c
.text:00000000000123DB                 mov     rdi, r13        ; s
.text:00000000000123DE                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000123E3                 call    _strchr
.text:00000000000123E8                 test    rax, rax
.text:00000000000123EB                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000123F0                 jz      def_12476       ; jumptable 0000000000012476 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000123F6                 lea     eax, [r12-45h]
.text:00000000000123FB                 cmp     al, 2Fh ; '/'
.text:00000000000123FD                 ja      short loc_12450
.text:00000000000123FF                 mov     rdx, 814400308945h
.text:0000000000012409                 bt      rdx, rax
.text:000000000001240D                 jnb     short loc_12450
.text:000000000001240F                 mov     esi, 30h ; '0'  ; c
.text:0000000000012414                 mov     rdi, r13        ; s
.text:0000000000012417                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000001241C                 call    _strchr
.text:0000000000012421                 test    rax, rax
.text:0000000000012424                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000012429                 jz      short loc_12450
.text:000000000001242B                 movzx   eax, byte ptr [rcx+1]
.text:000000000001242F                 cmp     al, 44h ; 'D'
.text:0000000000012431                 jz      short loc_1243F
.text:0000000000012433                 cmp     al, 69h ; 'i'
.text:0000000000012435                 jz      loc_12608
.text:000000000001243B                 cmp     al, 42h ; 'B'
.text:000000000001243D                 jnz     short loc_12450
.text:000000000001243F
.text:000000000001243F loc_1243F:                              ; CODE XREF: xstrtoul+191↑j
.text:000000000001243F                 mov     edi, 2
.text:0000000000012444                 mov     esi, 3E8h
.text:0000000000012449                 jmp     short loc_1245A
.text:0000000000012449 ; ---------------------------------------------------------------------------
.text:000000000001244B                 align 10h
.text:0000000000012450
.text:0000000000012450 loc_12450:                              ; CODE XREF: xstrtoul+15D↑j
.text:0000000000012450                                         ; xstrtoul+16D↑j ...
.text:0000000000012450                 mov     edi, 1
.text:0000000000012455                 mov     esi, 400h
.text:000000000001245A
.text:000000000001245A loc_1245A:                              ; CODE XREF: xstrtoul+1A9↑j
.text:000000000001245A                                         ; xstrtoul+37B↓j
.text:000000000001245A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000001245E                 cmp     r12b, 35h
.text:0000000000012462                 ja      short def_12476 ; jumptable 0000000000012476 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000012464                 lea     rdx, jpt_12476
.text:000000000001246B                 movzx   r12d, r12b
.text:000000000001246F                 movsxd  rax, ds:(jpt_12476 - 18D28h)[rdx+r12*4]
.text:0000000000012473                 add     rax, rdx
.text:0000000000012476                 jmp     rax             ; switch jump
.text:0000000000012478 ; ---------------------------------------------------------------------------
.text:0000000000012478
.text:0000000000012478 loc_12478:                              ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000012478                                         ; DATA XREF: .rodata:jpt_12476↓o
.text:0000000000012478                 mov     rax, rbx        ; jumptable 0000000000012476 cases 77,109
.text:000000000001247B                 mul     rsi
.text:000000000001247E                 jo      loc_12671
.text:0000000000012484                 xor     r8d, r8d
.text:0000000000012487
.text:0000000000012487 loc_12487:                              ; CODE XREF: xstrtoul+34E↓j
.text:0000000000012487                                         ; xstrtoul+35E↓j ...
.text:0000000000012487                 mul     rsi
.text:000000000001248A                 jo      loc_12662
.text:0000000000012490                 mov     rbx, rax
.text:0000000000012493
.text:0000000000012493 loc_12493:                              ; CODE XREF: xstrtoul+3CC↓j
.text:0000000000012493                 or      ebp, r8d
.text:0000000000012496                 db      2Eh
.text:0000000000012496                 nop     word ptr [rax+rax+00000000h]
.text:00000000000124A0
.text:00000000000124A0 loc_124A0:                              ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000124A0                                         ; xstrtoul+23B↓j ...
.text:00000000000124A0                 movsxd  rdi, edi        ; jumptable 0000000000012476 case 99
.text:00000000000124A3                 mov     eax, ebp
.text:00000000000124A5                 add     rcx, rdi
.text:00000000000124A8                 or      eax, 2
.text:00000000000124AB                 mov     [r15], rcx
.text:00000000000124AE                 cmp     byte ptr [rcx], 0
.text:00000000000124B1                 mov     [r14], rbx
.text:00000000000124B4                 cmovnz  ebp, eax
.text:00000000000124B7                 jmp     loc_1237D
.text:00000000000124BC ; ---------------------------------------------------------------------------
.text:00000000000124BC
.text:00000000000124BC def_12476:                              ; CODE XREF: xstrtoul+150↑j
.text:00000000000124BC                                         ; xstrtoul+1C2↑j ...
.text:00000000000124BC                 mov     [r14], rbx      ; jumptable 0000000000012476 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000124BF                 or      ebp, 2
.text:00000000000124C2                 jmp     loc_1237D
.text:00000000000124C7 ; ---------------------------------------------------------------------------
.text:00000000000124C7
.text:00000000000124C7 loc_124C7:                              ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000124C7                                         ; DATA XREF: .rodata:jpt_12476↓o
.text:00000000000124C7                 mov     edx, 2          ; jumptable 0000000000012476 case 119
.text:00000000000124CC                 mov     rax, rdx
.text:00000000000124CF                 mul     rbx
.text:00000000000124D2                 jo      loc_1256E
.text:00000000000124D8                 add     rbx, rbx
.text:00000000000124DB                 jmp     short loc_124A0 ; jumptable 0000000000012476 case 99
.text:00000000000124DD ; ---------------------------------------------------------------------------
.text:00000000000124DD
.text:00000000000124DD loc_124DD:                              ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000124DD                                         ; DATA XREF: .rodata:jpt_12476↓o
.text:00000000000124DD                 mov     edx, 200h       ; jumptable 0000000000012476 case 98
.text:00000000000124E2                 mov     rax, rdx
.text:00000000000124E5                 mul     rbx
.text:00000000000124E8                 jo      loc_1256E
.text:00000000000124EE                 shl     rbx, 9
.text:00000000000124F2                 jmp     short loc_124A0 ; jumptable 0000000000012476 case 99
.text:00000000000124F4 ; ---------------------------------------------------------------------------
.text:00000000000124F4
.text:00000000000124F4 loc_124F4:                              ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000124F4                                         ; DATA XREF: .rodata:jpt_12476↓o
.text:00000000000124F4                 mov     r8d, 7          ; jumptable 0000000000012476 case 90
.text:00000000000124FA                 xor     r9d, r9d
.text:00000000000124FD                 nop     dword ptr [rax]
.text:0000000000012500
.text:0000000000012500 loc_12500:                              ; CODE XREF: xstrtoul+273↓j
.text:0000000000012500                 mov     rax, rbx
.text:0000000000012503                 mul     rsi
.text:0000000000012506                 mov     rbx, rax
.text:0000000000012509                 jo      loc_1269E
.text:000000000001250F
.text:000000000001250F loc_1250F:                              ; CODE XREF: xstrtoul+408↓j
.text:000000000001250F                 sub     r8d, 1
.text:0000000000012513                 jnz     short loc_12500
.text:0000000000012515
.text:0000000000012515 loc_12515:                              ; CODE XREF: xstrtoul+29D↓j
.text:0000000000012515                                         ; xstrtoul+2BD↓j ...
.text:0000000000012515                 or      ebp, r9d
.text:0000000000012518                 jmp     short loc_124A0 ; jumptable 0000000000012476 case 99
.text:000000000001251A ; ---------------------------------------------------------------------------
.text:000000000001251A
.text:000000000001251A loc_1251A:                              ; CODE XREF: xstrtoul+1D6↑j
.text:000000000001251A                                         ; DATA XREF: .rodata:jpt_12476↓o
.text:000000000001251A                 mov     r8d, 8          ; jumptable 0000000000012476 case 89
.text:0000000000012520                 xor     r9d, r9d
.text:0000000000012523                 nop     dword ptr [rax+rax+00h]
.text:0000000000012528
.text:0000000000012528 loc_12528:                              ; CODE XREF: xstrtoul+29B↓j
.text:0000000000012528                 mov     rax, rbx
.text:000000000001252B                 mul     rsi
.text:000000000001252E                 mov     rbx, rax
.text:0000000000012531                 jo      loc_12680
.text:0000000000012537
.text:0000000000012537 loc_12537:                              ; CODE XREF: xstrtoul+3EA↓j
.text:0000000000012537                 sub     r8d, 1
.text:000000000001253B                 jnz     short loc_12528
.text:000000000001253D                 jmp     short loc_12515
.text:000000000001253F ; ---------------------------------------------------------------------------
.text:000000000001253F
.text:000000000001253F loc_1253F:                              ; CODE XREF: xstrtoul+1D6↑j
.text:000000000001253F                                         ; DATA XREF: .rodata:jpt_12476↓o
.text:000000000001253F                 mov     r8d, 4          ; jumptable 0000000000012476 cases 84,116
.text:0000000000012545                 xor     r9d, r9d
.text:0000000000012548
.text:0000000000012548 loc_12548:                              ; CODE XREF: xstrtoul+2BB↓j
.text:0000000000012548                 mov     rax, rbx
.text:000000000001254B                 mul     rsi
.text:000000000001254E                 mov     rbx, rax
.text:0000000000012551                 jo      loc_12653
.text:0000000000012557
.text:0000000000012557 loc_12557:                              ; CODE XREF: xstrtoul+3BD↓j
.text:0000000000012557                 sub     r8d, 1
.text:000000000001255B                 jnz     short loc_12548
.text:000000000001255D                 jmp     short loc_12515
.text:000000000001255F ; ---------------------------------------------------------------------------
.text:000000000001255F
.text:000000000001255F loc_1255F:                              ; CODE XREF: xstrtoul+1D6↑j
.text:000000000001255F                                         ; DATA XREF: .rodata:jpt_12476↓o
.text:000000000001255F                 mov     rax, rbx        ; jumptable 0000000000012476 cases 75,107
.text:0000000000012562                 mul     rsi
.text:0000000000012565                 mov     rbx, rax
.text:0000000000012568                 jno     loc_124A0       ; jumptable 0000000000012476 case 99
.text:000000000001256E
.text:000000000001256E loc_1256E:                              ; CODE XREF: xstrtoul+232↑j
.text:000000000001256E                                         ; xstrtoul+248↑j ...
.text:000000000001256E                 mov     ebp, 1
.text:0000000000012573                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000012577                 jmp     loc_124A0       ; jumptable 0000000000012476 case 99
.text:0000000000012577 ; ---------------------------------------------------------------------------
.text:000000000001257C                 align 20h
.text:0000000000012580
.text:0000000000012580 loc_12580:                              ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000012580                                         ; DATA XREF: .rodata:jpt_12476↓o
.text:0000000000012580                 mov     r8d, 5          ; jumptable 0000000000012476 case 80
.text:0000000000012586                 xor     r9d, r9d
.text:0000000000012589
.text:0000000000012589 loc_12589:                              ; CODE XREF: xstrtoul+2FC↓j
.text:0000000000012589                 mov     rax, rbx
.text:000000000001258C                 mul     rsi
.text:000000000001258F                 mov     rbx, rax
.text:0000000000012592                 jo      loc_1268F
.text:0000000000012598
.text:0000000000012598 loc_12598:                              ; CODE XREF: xstrtoul+3F9↓j
.text:0000000000012598                 sub     r8d, 1
.text:000000000001259C                 jnz     short loc_12589
.text:000000000001259E                 jmp     loc_12515
.text:00000000000125A3 ; ---------------------------------------------------------------------------
.text:00000000000125A3
.text:00000000000125A3 loc_125A3:                              ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000125A3                                         ; DATA XREF: .rodata:jpt_12476↓o
.text:00000000000125A3                 mov     r8d, 6          ; jumptable 0000000000012476 case 69
.text:00000000000125A9                 xor     r9d, r9d
.text:00000000000125AC
.text:00000000000125AC loc_125AC:                              ; CODE XREF: xstrtoul+31F↓j
.text:00000000000125AC                 mov     rax, rbx
.text:00000000000125AF                 mul     rsi
.text:00000000000125B2                 mov     rbx, rax
.text:00000000000125B5                 jo      loc_12644
.text:00000000000125BB
.text:00000000000125BB loc_125BB:                              ; CODE XREF: xstrtoul+3AE↓j
.text:00000000000125BB                 sub     r8d, 1
.text:00000000000125BF                 jnz     short loc_125AC
.text:00000000000125C1                 jmp     loc_12515
.text:00000000000125C6 ; ---------------------------------------------------------------------------
.text:00000000000125C6
.text:00000000000125C6 loc_125C6:                              ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000125C6                                         ; DATA XREF: .rodata:jpt_12476↓o
.text:00000000000125C6                 mov     edx, 400h       ; jumptable 0000000000012476 case 66
.text:00000000000125CB                 mov     rax, rdx
.text:00000000000125CE                 mul     rbx
.text:00000000000125D1                 jo      short loc_1256E
.text:00000000000125D3                 shl     rbx, 0Ah
.text:00000000000125D7                 jmp     loc_124A0       ; jumptable 0000000000012476 case 99
.text:00000000000125DC ; ---------------------------------------------------------------------------
.text:00000000000125DC
.text:00000000000125DC loc_125DC:                              ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000125DC                                         ; DATA XREF: .rodata:jpt_12476↓o
.text:00000000000125DC                 mov     rax, rbx        ; jumptable 0000000000012476 cases 71,103
.text:00000000000125DF                 mul     rsi
.text:00000000000125E2                 jo      loc_126AD
.text:00000000000125E8                 xor     r8d, r8d
.text:00000000000125EB
.text:00000000000125EB loc_125EB:                              ; CODE XREF: xstrtoul+417↓j
.text:00000000000125EB                 mul     rsi
.text:00000000000125EE                 jno     loc_12487
.text:00000000000125F4                 mov     r8d, 1
.text:00000000000125FA                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000125FE                 jmp     loc_12487
.text:00000000000125FE ; ---------------------------------------------------------------------------
.text:0000000000012603                 align 8
.text:0000000000012608
.text:0000000000012608 loc_12608:                              ; CODE XREF: xstrtoul+195↑j
.text:0000000000012608                 xor     edi, edi
.text:000000000001260A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000001260E                 mov     esi, 400h
.text:0000000000012613                 setz    dil
.text:0000000000012617                 lea     edi, [rdi+rdi+1]
.text:000000000001261B                 jmp     loc_1245A
.text:0000000000012620 ; ---------------------------------------------------------------------------
.text:0000000000012620
.text:0000000000012620 loc_12620:                              ; CODE XREF: xstrtoul+ED↑j
.text:0000000000012620                 call    ___stack_chk_fail
.text:0000000000012625 ; ---------------------------------------------------------------------------
.text:0000000000012625
.text:0000000000012625 loc_12625:                              ; CODE XREF: xstrtoul+21↑j
.text:0000000000012625                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoul"
.text:000000000001262C                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000012633                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000001263A                 mov     edx, 54h ; 'T'  ; line
.text:000000000001263F                 call    ___assert_fail
.text:0000000000012644 ; ---------------------------------------------------------------------------
.text:0000000000012644
.text:0000000000012644 loc_12644:                              ; CODE XREF: xstrtoul+315↑j
.text:0000000000012644                 mov     r9d, 1
.text:000000000001264A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000001264E                 jmp     loc_125BB
.text:0000000000012653 ; ---------------------------------------------------------------------------
.text:0000000000012653
.text:0000000000012653 loc_12653:                              ; CODE XREF: xstrtoul+2B1↑j
.text:0000000000012653                 mov     r9d, 1
.text:0000000000012659                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000001265D                 jmp     loc_12557
.text:0000000000012662 ; ---------------------------------------------------------------------------
.text:0000000000012662
.text:0000000000012662 loc_12662:                              ; CODE XREF: xstrtoul+1EA↑j
.text:0000000000012662                 mov     r8d, 1
.text:0000000000012668                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000001266C                 jmp     loc_12493
.text:0000000000012671 ; ---------------------------------------------------------------------------
.text:0000000000012671
.text:0000000000012671 loc_12671:                              ; CODE XREF: xstrtoul+1DE↑j
.text:0000000000012671                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000012675                 mov     r8d, 1
.text:000000000001267B                 jmp     loc_12487
.text:0000000000012680 ; ---------------------------------------------------------------------------
.text:0000000000012680
.text:0000000000012680 loc_12680:                              ; CODE XREF: xstrtoul+291↑j
.text:0000000000012680                 mov     r9d, 1
.text:0000000000012686                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000001268A                 jmp     loc_12537
.text:000000000001268F ; ---------------------------------------------------------------------------
.text:000000000001268F
.text:000000000001268F loc_1268F:                              ; CODE XREF: xstrtoul+2F2↑j
.text:000000000001268F                 mov     r9d, 1
.text:0000000000012695                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000012699                 jmp     loc_12598
.text:000000000001269E ; ---------------------------------------------------------------------------
.text:000000000001269E
.text:000000000001269E loc_1269E:                              ; CODE XREF: xstrtoul+269↑j
.text:000000000001269E                 mov     r9d, 1
.text:00000000000126A4                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000126A8                 jmp     loc_1250F
.text:00000000000126AD ; ---------------------------------------------------------------------------
.text:00000000000126AD
.text:00000000000126AD loc_126AD:                              ; CODE XREF: xstrtoul+342↑j
.text:00000000000126AD                 mov     r8d, 1
.text:00000000000126B3                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000126B7                 jmp     loc_125EB
.text:00000000000126B7 ; } // starts at 122A0
.text:00000000000126B7 xstrtoul        endp
.text:00000000000126B7
.text:00000000000126B7 ; ---------------------------------------------------------------------------
.text:00000000000126BC                 align 20h
.text:00000000000126C0
.text:00000000000126C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000126C0
.text:00000000000126C0
.text:00000000000126C0                 public yesno
.text:00000000000126C0 yesno           proc near               ; CODE XREF: overwrite_ok_isra_12:loc_52AE↑p
.text:00000000000126C0
.text:00000000000126C0 lineptr         = qword ptr -20h
.text:00000000000126C0 n               = qword ptr -18h
.text:00000000000126C0 var_10          = qword ptr -10h
.text:00000000000126C0
.text:00000000000126C0 ; __unwind {
.text:00000000000126C0                 push    rbx
.text:00000000000126C1                 mov     edx, 0Ah        ; delimiter
.text:00000000000126C6                 xor     ebx, ebx
.text:00000000000126C8                 sub     rsp, 20h
.text:00000000000126CC                 mov     rcx, cs:stdin@@GLIBC_2_2_5 ; stream
.text:00000000000126D3                 lea     rsi, [rsp+28h+n] ; n
.text:00000000000126D8                 lea     rdi, [rsp+28h+lineptr] ; lineptr
.text:00000000000126DD                 mov     [rsp+28h+lineptr], 0
.text:00000000000126E6                 mov     rax, fs:28h
.text:00000000000126EF                 mov     [rsp+28h+var_10], rax
.text:00000000000126F4                 xor     eax, eax
.text:00000000000126F6                 mov     [rsp+28h+n], 0
.text:00000000000126FF                 call    ___getdelim
.text:0000000000012704                 test    rax, rax
.text:0000000000012707                 jle     short loc_12722
.text:0000000000012709                 mov     rdi, [rsp+28h+lineptr] ; response
.text:000000000001270E                 lea     rax, [rdi+rax-1]
.text:0000000000012713                 cmp     byte ptr [rax], 0Ah
.text:0000000000012716                 jz      short loc_12748
.text:0000000000012718
.text:0000000000012718 loc_12718:                              ; CODE XREF: yesno+90↓j
.text:0000000000012718                 call    _rpmatch
.text:000000000001271D                 test    eax, eax
.text:000000000001271F                 setnle  bl
.text:0000000000012722
.text:0000000000012722 loc_12722:                              ; CODE XREF: yesno+47↑j
.text:0000000000012722                 mov     rdi, [rsp+28h+lineptr] ; ptr
.text:0000000000012727                 call    free
.text:000000000001272C                 mov     rdx, [rsp+28h+var_10]
.text:0000000000012731                 xor     rdx, fs:28h
.text:000000000001273A                 mov     eax, ebx
.text:000000000001273C                 jnz     short loc_12752
.text:000000000001273E                 add     rsp, 20h
.text:0000000000012742                 pop     rbx
.text:0000000000012743                 retn
.text:0000000000012743 ; ---------------------------------------------------------------------------
.text:0000000000012744                 align 8
.text:0000000000012748
.text:0000000000012748 loc_12748:                              ; CODE XREF: yesno+56↑j
.text:0000000000012748                 mov     byte ptr [rax], 0
.text:000000000001274B                 mov     rdi, [rsp+28h+lineptr]
.text:0000000000012750                 jmp     short loc_12718
.text:0000000000012752 ; ---------------------------------------------------------------------------
.text:0000000000012752
.text:0000000000012752 loc_12752:                              ; CODE XREF: yesno+7C↑j
.text:0000000000012752                 call    ___stack_chk_fail
.text:0000000000012752 ; } // starts at 126C0
.text:0000000000012752 yesno           endp
.text:0000000000012752
.text:0000000000012752 ; ---------------------------------------------------------------------------
.text:0000000000012757                 align 20h
.text:0000000000012760
.text:0000000000012760 ; =============== S U B R O U T I N E =======================================
.text:0000000000012760
.text:0000000000012760 ; Attributes: info_from_lumina
.text:0000000000012760
.text:0000000000012760 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000012760                 public rpl_fflush
.text:0000000000012760 rpl_fflush      proc near               ; CODE XREF: close_stdin:loc_B118↑p
.text:0000000000012760                                         ; rpl_fclose+1F↓p
.text:0000000000012760 ; __unwind {
.text:0000000000012760                 test    rdi, rdi
.text:0000000000012763                 push    rbx
.text:0000000000012764                 mov     rbx, rdi
.text:0000000000012767                 jz      short loc_1277A
.text:0000000000012769                 call    ___freading
.text:000000000001276E                 test    eax, eax
.text:0000000000012770                 jz      short loc_1277A
.text:0000000000012772                 test    dword ptr [rbx], 100h
.text:0000000000012778                 jnz     short loc_12788
.text:000000000001277A
.text:000000000001277A loc_1277A:                              ; CODE XREF: rpl_fflush+7↑j
.text:000000000001277A                                         ; rpl_fflush+10↑j
.text:000000000001277A                 mov     rdi, rbx        ; stream
.text:000000000001277D                 pop     rbx
.text:000000000001277E                 jmp     _fflush
.text:000000000001277E ; ---------------------------------------------------------------------------
.text:0000000000012783                 align 8
.text:0000000000012788
.text:0000000000012788 loc_12788:                              ; CODE XREF: rpl_fflush+18↑j
.text:0000000000012788                 mov     rdi, rbx
.text:000000000001278B                 mov     edx, 1
.text:0000000000012790                 xor     esi, esi
.text:0000000000012792                 call    rpl_fseeko
.text:0000000000012797                 mov     rdi, rbx        ; stream
.text:000000000001279A                 pop     rbx
.text:000000000001279B                 jmp     _fflush
.text:000000000001279B ; } // starts at 12760
.text:000000000001279B rpl_fflush      endp
.text:000000000001279B
.text:00000000000127A0
.text:00000000000127A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000127A0
.text:00000000000127A0
.text:00000000000127A0                 public freadahead
.text:00000000000127A0 freadahead      proc near               ; CODE XREF: close_stdin+E↑p
.text:00000000000127A0 ; __unwind {
.text:00000000000127A0                 xor     eax, eax
.text:00000000000127A2                 mov     rcx, [rdi+20h]
.text:00000000000127A6                 cmp     [rdi+28h], rcx
.text:00000000000127AA                 ja      short locret_127C7
.text:00000000000127AC                 mov     rax, [rdi+10h]
.text:00000000000127B0                 sub     rax, [rdi+8]
.text:00000000000127B4                 test    dword ptr [rdi], 100h
.text:00000000000127BA                 jz      short locret_127C7
.text:00000000000127BC                 mov     rdx, [rdi+58h]
.text:00000000000127C0                 sub     rdx, [rdi+48h]
.text:00000000000127C4                 add     rax, rdx
.text:00000000000127C7
.text:00000000000127C7 locret_127C7:                           ; CODE XREF: freadahead+A↑j
.text:00000000000127C7                                         ; freadahead+1A↑j
.text:00000000000127C7                 rep retn
.text:00000000000127C7 ; } // starts at 127A0
.text:00000000000127C7 freadahead      endp
.text:00000000000127C7
.text:00000000000127C7 ; ---------------------------------------------------------------------------
.text:00000000000127C9                 align 10h
.text:00000000000127D0
.text:00000000000127D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000127D0
.text:00000000000127D0 ; Attributes: info_from_lumina
.text:00000000000127D0
.text:00000000000127D0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000127D0                 public rpl_fseeko
.text:00000000000127D0 rpl_fseeko      proc near               ; CODE XREF: close_stdin+C2↑p
.text:00000000000127D0                                         ; rpl_fflush+32↑p
.text:00000000000127D0 ; __unwind {
.text:00000000000127D0                 mov     rax, [rdi+8]
.text:00000000000127D4                 cmp     [rdi+10h], rax
.text:00000000000127D8                 jz      short loc_127E0
.text:00000000000127DA
.text:00000000000127DA loc_127DA:                              ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000127DA                                         ; rpl_fseeko+1F↓j
.text:00000000000127DA                 jmp     _fseeko
.text:00000000000127DA ; ---------------------------------------------------------------------------
.text:00000000000127DF                 align 20h
.text:00000000000127E0
.text:00000000000127E0 loc_127E0:                              ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000127E0                 mov     rax, [rdi+20h]
.text:00000000000127E4                 cmp     [rdi+28h], rax
.text:00000000000127E8                 jnz     short loc_127DA
.text:00000000000127EA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000127EF                 jnz     short loc_127DA
.text:00000000000127F1                 push    r12
.text:00000000000127F3                 push    rbp
.text:00000000000127F4                 mov     r12d, edx
.text:00000000000127F7                 push    rbx
.text:00000000000127F8                 mov     rbp, rsi
.text:00000000000127FB                 mov     rbx, rdi
.text:00000000000127FE                 call    _fileno
.text:0000000000012803                 mov     edx, r12d       ; whence
.text:0000000000012806                 mov     rsi, rbp        ; offset
.text:0000000000012809                 mov     edi, eax        ; fd
.text:000000000001280B                 call    _lseek
.text:0000000000012810                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000012814                 jz      short loc_12822
.text:0000000000012816                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000012819                 mov     [rbx+90h], rax
.text:0000000000012820                 xor     eax, eax
.text:0000000000012822
.text:0000000000012822 loc_12822:                              ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000012822                 pop     rbx
.text:0000000000012823                 pop     rbp
.text:0000000000012824                 pop     r12
.text:0000000000012826                 retn
.text:0000000000012826 ; } // starts at 127D0
.text:0000000000012826 rpl_fseeko      endp
.text:0000000000012826
.text:0000000000012826 ; ---------------------------------------------------------------------------
.text:0000000000012827                 align 10h
.text:0000000000012830
.text:0000000000012830 ; =============== S U B R O U T I N E =======================================
.text:0000000000012830
.text:0000000000012830 ; Attributes: info_from_lumina
.text:0000000000012830
.text:0000000000012830 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000012830                 public rpl_mbrtowc
.text:0000000000012830 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000012830
.text:0000000000012830 pwc             = dword ptr -34h
.text:0000000000012830 var_30          = qword ptr -30h
.text:0000000000012830
.text:0000000000012830 ; __unwind {
.text:0000000000012830                 push    r13
.text:0000000000012832                 push    r12
.text:0000000000012834                 mov     r13, rsi
.text:0000000000012837                 push    rbp
.text:0000000000012838                 push    rbx
.text:0000000000012839                 mov     rbx, rdi
.text:000000000001283C                 mov     r12, rdx
.text:000000000001283F                 sub     rsp, 18h
.text:0000000000012843                 mov     rax, fs:28h
.text:000000000001284C                 mov     [rsp+38h+var_30], rax
.text:0000000000012851                 xor     eax, eax
.text:0000000000012853                 lea     rax, [rsp+38h+pwc]
.text:0000000000012858                 test    rdi, rdi
.text:000000000001285B                 cmovz   rbx, rax
.text:000000000001285F                 mov     rdi, rbx        ; pwc
.text:0000000000012862                 call    _mbrtowc
.text:0000000000012867                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000001286B                 mov     rbp, rax
.text:000000000001286E                 jbe     short loc_12890
.text:0000000000012870                 test    r12, r12
.text:0000000000012873                 jz      short loc_12890
.text:0000000000012875                 xor     edi, edi
.text:0000000000012877                 call    hard_locale
.text:000000000001287C                 test    al, al
.text:000000000001287E                 jnz     short loc_12890
.text:0000000000012880                 movzx   eax, byte ptr [r13+0]
.text:0000000000012885                 mov     ebp, 1
.text:000000000001288A                 mov     [rbx], eax
.text:000000000001288C                 nop     dword ptr [rax+00h]
.text:0000000000012890
.text:0000000000012890 loc_12890:                              ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000012890                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000012890                 mov     rdx, [rsp+38h+var_30]
.text:0000000000012895                 xor     rdx, fs:28h
.text:000000000001289E                 mov     rax, rbp
.text:00000000000128A1                 jnz     short loc_128AE
.text:00000000000128A3                 add     rsp, 18h
.text:00000000000128A7                 pop     rbx
.text:00000000000128A8                 pop     rbp
.text:00000000000128A9                 pop     r12
.text:00000000000128AB                 pop     r13
.text:00000000000128AD                 retn
.text:00000000000128AE ; ---------------------------------------------------------------------------
.text:00000000000128AE
.text:00000000000128AE loc_128AE:                              ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000128AE                 call    ___stack_chk_fail
.text:00000000000128AE ; } // starts at 12830
.text:00000000000128AE rpl_mbrtowc     endp
.text:00000000000128AE
.text:00000000000128AE ; ---------------------------------------------------------------------------
.text:00000000000128B3                 align 20h
.text:00000000000128C0
.text:00000000000128C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000128C0
.text:00000000000128C0
.text:00000000000128C0 ; __int64 __fastcall rpl_vfprintf(FILE *s)
.text:00000000000128C0                 public rpl_vfprintf
.text:00000000000128C0 rpl_vfprintf    proc near               ; CODE XREF: prog_fprintf+C5↑p
.text:00000000000128C0
.text:00000000000128C0 n               = qword ptr -810h
.text:00000000000128C0 var_808         = byte ptr -808h
.text:00000000000128C0 var_30          = qword ptr -30h
.text:00000000000128C0
.text:00000000000128C0 ; __unwind {
.text:00000000000128C0                 push    r13
.text:00000000000128C2                 push    r12
.text:00000000000128C4                 mov     rax, rsi
.text:00000000000128C7                 push    rbp
.text:00000000000128C8                 push    rbx
.text:00000000000128C9                 mov     r13, rdi
.text:00000000000128CC                 sub     rsp, 7F8h
.text:00000000000128D3                 lea     r12, [rsp+818h+var_808]
.text:00000000000128D8                 lea     rsi, [rsp+818h+n]
.text:00000000000128DD                 mov     [rsp+818h+n], 7D0h
.text:00000000000128E6                 mov     rcx, fs:28h
.text:00000000000128EF                 mov     [rsp+818h+var_30], rcx
.text:00000000000128F7                 xor     ecx, ecx
.text:00000000000128F9                 mov     rdi, r12
.text:00000000000128FC                 mov     rcx, rdx
.text:00000000000128FF                 mov     rdx, rax
.text:0000000000012902                 call    vasnprintf
.text:0000000000012907                 test    rax, rax
.text:000000000001290A                 mov     rbx, [rsp+818h+n]
.text:000000000001290F                 jz      loc_1299E
.text:0000000000012915                 mov     rcx, r13        ; s
.text:0000000000012918                 mov     rdx, rbx        ; n
.text:000000000001291B                 mov     esi, 1          ; size
.text:0000000000012920                 mov     rdi, rax        ; ptr
.text:0000000000012923                 mov     rbp, rax
.text:0000000000012926                 call    _fwrite
.text:000000000001292B                 cmp     rax, rbx
.text:000000000001292E                 jb      short loc_12970
.text:0000000000012930                 cmp     rbp, r12
.text:0000000000012933                 jz      short loc_1293D
.text:0000000000012935                 mov     rdi, rbp        ; ptr
.text:0000000000012938                 call    free
.text:000000000001293D
.text:000000000001293D loc_1293D:                              ; CODE XREF: rpl_vfprintf+73↑j
.text:000000000001293D                 cmp     rbx, 7FFFFFFFh
.text:0000000000012944                 ja      short loc_12993
.text:0000000000012946
.text:0000000000012946 loc_12946:                              ; CODE XREF: rpl_vfprintf+B8↓j
.text:0000000000012946                                         ; rpl_vfprintf+D1↓j ...
.text:0000000000012946                 mov     rcx, [rsp+818h+var_30]
.text:000000000001294E                 xor     rcx, fs:28h
.text:0000000000012957                 mov     eax, ebx
.text:0000000000012959                 jnz     short loc_129AD
.text:000000000001295B                 add     rsp, 7F8h
.text:0000000000012962                 pop     rbx
.text:0000000000012963                 pop     rbp
.text:0000000000012964                 pop     r12
.text:0000000000012966                 pop     r13
.text:0000000000012968                 retn
.text:0000000000012968 ; ---------------------------------------------------------------------------
.text:0000000000012969                 align 10h
.text:0000000000012970
.text:0000000000012970 loc_12970:                              ; CODE XREF: rpl_vfprintf+6E↑j
.text:0000000000012970                 cmp     rbp, r12
.text:0000000000012973                 mov     ebx, 0FFFFFFFFh
.text:0000000000012978                 jz      short loc_12946
.text:000000000001297A                 call    ___errno_location
.text:000000000001297F                 mov     r13d, [rax]
.text:0000000000012982                 mov     r12, rax
.text:0000000000012985                 mov     rdi, rbp        ; ptr
.text:0000000000012988                 call    free
.text:000000000001298D                 mov     [r12], r13d
.text:0000000000012991                 jmp     short loc_12946
.text:0000000000012993 ; ---------------------------------------------------------------------------
.text:0000000000012993
.text:0000000000012993 loc_12993:                              ; CODE XREF: rpl_vfprintf+84↑j
.text:0000000000012993                 call    ___errno_location
.text:0000000000012998                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000001299E
.text:000000000001299E loc_1299E:                              ; CODE XREF: rpl_vfprintf+4F↑j
.text:000000000001299E                 mov     rdi, r13
.text:00000000000129A1                 mov     ebx, 0FFFFFFFFh
.text:00000000000129A6                 call    fseterr
.text:00000000000129AB                 jmp     short loc_12946
.text:00000000000129AD ; ---------------------------------------------------------------------------
.text:00000000000129AD
.text:00000000000129AD loc_129AD:                              ; CODE XREF: rpl_vfprintf+99↑j
.text:00000000000129AD                 call    ___stack_chk_fail
.text:00000000000129AD ; } // starts at 128C0
.text:00000000000129AD rpl_vfprintf    endp
.text:00000000000129AD
.text:00000000000129AD ; ---------------------------------------------------------------------------
.text:00000000000129B2                 align 20h
.text:00000000000129C0
.text:00000000000129C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000129C0
.text:00000000000129C0
.text:00000000000129C0                 public free_permission_context
.text:00000000000129C0 free_permission_context proc near       ; CODE XREF: qcopy_acl+45↑p
.text:00000000000129C0                                         ; qset_acl+31↑p
.text:00000000000129C0 ; __unwind {
.text:00000000000129C0                 rep retn
.text:00000000000129C0 ; } // starts at 129C0
.text:00000000000129C0 free_permission_context endp
.text:00000000000129C0
.text:00000000000129C0 ; ---------------------------------------------------------------------------
.text:00000000000129C2                 align 10h
.text:00000000000129D0
.text:00000000000129D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000129D0
.text:00000000000129D0
.text:00000000000129D0                 public get_permissions
.text:00000000000129D0 get_permissions proc near               ; CODE XREF: qcopy_acl+29↑p
.text:00000000000129D0 ; __unwind {
.text:00000000000129D0                 mov     [rcx], edx
.text:00000000000129D2                 xor     eax, eax
.text:00000000000129D4                 retn
.text:00000000000129D4 ; } // starts at 129D0
.text:00000000000129D4 get_permissions endp
.text:00000000000129D4
.text:00000000000129D4 ; ---------------------------------------------------------------------------
.text:00000000000129D5                 align 20h
.text:00000000000129E0
.text:00000000000129E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000129E0
.text:00000000000129E0
.text:00000000000129E0                 public chmod_or_fchmod
.text:00000000000129E0 chmod_or_fchmod proc near               ; CODE XREF: set_permissions+E↓p
.text:00000000000129E0 ; __unwind {
.text:00000000000129E0                 mov     eax, esi
.text:00000000000129E2                 mov     esi, edx        ; mode
.text:00000000000129E4                 cmp     eax, 0FFFFFFFFh
.text:00000000000129E7                 jz      short loc_129F0
.text:00000000000129E9                 mov     edi, eax        ; file
.text:00000000000129EB                 jmp     _fchmod
.text:00000000000129F0 ; ---------------------------------------------------------------------------
.text:00000000000129F0
.text:00000000000129F0 loc_129F0:                              ; CODE XREF: chmod_or_fchmod+7↑j
.text:00000000000129F0                 jmp     _chmod
.text:00000000000129F0 ; } // starts at 129E0
.text:00000000000129F0 chmod_or_fchmod endp
.text:00000000000129F0
.text:00000000000129F0 ; ---------------------------------------------------------------------------
.text:00000000000129F5                 align 20h
.text:0000000000012A00
.text:0000000000012A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000012A00
.text:0000000000012A00 ; Attributes: info_from_lumina
.text:0000000000012A00
.text:0000000000012A00                 public set_permissions
.text:0000000000012A00 set_permissions proc near               ; CODE XREF: qcopy_acl+3B↑p
.text:0000000000012A00                                         ; qset_acl+27↑p
.text:0000000000012A00 ; __unwind {
.text:0000000000012A00                 sub     rsp, 8
.text:0000000000012A04                 mov     rax, rsi
.text:0000000000012A07                 mov     esi, edx
.text:0000000000012A09                 mov     edx, [rdi]
.text:0000000000012A0B                 mov     rdi, rax
.text:0000000000012A0E                 call    chmod_or_fchmod
.text:0000000000012A13                 test    eax, eax
.text:0000000000012A15                 setnz   al
.text:0000000000012A18                 add     rsp, 8
.text:0000000000012A1C                 movzx   eax, al
.text:0000000000012A1F                 neg     eax
.text:0000000000012A21                 retn
.text:0000000000012A21 ; } // starts at 12A00
.text:0000000000012A21 set_permissions endp
.text:0000000000012A21
.text:0000000000012A21 ; ---------------------------------------------------------------------------
.text:0000000000012A22                 align 10h
.text:0000000000012A30
.text:0000000000012A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000012A30
.text:0000000000012A30 ; Attributes: noreturn
.text:0000000000012A30
.text:0000000000012A30 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:0000000000012A30 ; __unwind {
.text:0000000000012A30                 mov     edi, 1          ; status
.text:0000000000012A35                 jmp     usage
.text:0000000000012A35 ; } // starts at 12A30
.text:0000000000012A35 __argmatch_die  endp
.text:0000000000012A35
.text:0000000000012A35 ; ---------------------------------------------------------------------------
.text:0000000000012A3A                 align 20h
.text:0000000000012A40
.text:0000000000012A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000012A40
.text:0000000000012A40 ; Attributes: info_from_lumina
.text:0000000000012A40
.text:0000000000012A40 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000012A40                 public argmatch
.text:0000000000012A40 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:0000000000012A40
.text:0000000000012A40 var_58          = qword ptr -58h
.text:0000000000012A40 s2              = qword ptr -50h
.text:0000000000012A40 var_41          = byte ptr -41h
.text:0000000000012A40 var_40          = qword ptr -40h
.text:0000000000012A40
.text:0000000000012A40 ; __unwind {
.text:0000000000012A40                 push    r15
.text:0000000000012A42                 push    r14
.text:0000000000012A44                 mov     r15, rsi
.text:0000000000012A47                 push    r13
.text:0000000000012A49                 push    r12
.text:0000000000012A4B                 mov     r13, rcx
.text:0000000000012A4E                 push    rbp
.text:0000000000012A4F                 push    rbx
.text:0000000000012A50                 mov     rbp, rdx
.text:0000000000012A53                 sub     rsp, 28h
.text:0000000000012A57                 mov     [rsp+58h+s2], rdi
.text:0000000000012A5C                 mov     [rsp+58h+var_40], rdx
.text:0000000000012A61                 call    _strlen
.text:0000000000012A66                 mov     r14, [r15]
.text:0000000000012A69                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000012A71                 test    r14, r14
.text:0000000000012A74                 jz      loc_12B2D
.text:0000000000012A7A                 mov     r12, rax
.text:0000000000012A7D                 mov     [rsp+58h+var_41], 0
.text:0000000000012A82                 xor     ebx, ebx
.text:0000000000012A84                 jmp     short loc_12AD7
.text:0000000000012A84 ; ---------------------------------------------------------------------------
.text:0000000000012A86                 align 10h
.text:0000000000012A90
.text:0000000000012A90 loc_12A90:                              ; CODE XREF: argmatch+BD↓j
.text:0000000000012A90                 mov     rax, [rsp+58h+var_40]
.text:0000000000012A95                 test    rax, rax
.text:0000000000012A98                 jz      loc_12B40
.text:0000000000012A9E                 mov     rdi, [rsp+58h+var_58]
.text:0000000000012AA2                 mov     rdx, r13        ; n
.text:0000000000012AA5                 mov     rsi, rbp        ; s2
.text:0000000000012AA8                 imul    rdi, r13
.text:0000000000012AAC                 add     rdi, rax        ; s1
.text:0000000000012AAF                 call    _memcmp
.text:0000000000012AB4                 test    eax, eax
.text:0000000000012AB6                 movzx   eax, [rsp+58h+var_41]
.text:0000000000012ABB                 mov     ecx, 1
.text:0000000000012AC0                 cmovnz  eax, ecx
.text:0000000000012AC3                 mov     [rsp+58h+var_41], al
.text:0000000000012AC7
.text:0000000000012AC7 loc_12AC7:                              ; CODE XREF: argmatch+A9↓j
.text:0000000000012AC7                                         ; argmatch+105↓j
.text:0000000000012AC7                 add     rbx, 1
.text:0000000000012ACB                 add     rbp, r13
.text:0000000000012ACE                 mov     r14, [r15+rbx*8]
.text:0000000000012AD2                 test    r14, r14
.text:0000000000012AD5                 jz      short loc_12B18
.text:0000000000012AD7
.text:0000000000012AD7 loc_12AD7:                              ; CODE XREF: argmatch+44↑j
.text:0000000000012AD7                                         ; argmatch+D1↓j
.text:0000000000012AD7                 mov     rsi, [rsp+58h+s2] ; s2
.text:0000000000012ADC                 mov     rdx, r12        ; n
.text:0000000000012ADF                 mov     rdi, r14        ; s1
.text:0000000000012AE2                 call    _strncmp
.text:0000000000012AE7                 test    eax, eax
.text:0000000000012AE9                 jnz     short loc_12AC7
.text:0000000000012AEB                 mov     rdi, r14        ; s
.text:0000000000012AEE                 call    _strlen
.text:0000000000012AF3                 cmp     rax, r12
.text:0000000000012AF6                 jz      short loc_12B50
.text:0000000000012AF8                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000012AFD                 jnz     short loc_12A90
.text:0000000000012AFF                 mov     [rsp+58h+var_58], rbx
.text:0000000000012B03                 add     rbx, 1
.text:0000000000012B07                 add     rbp, r13
.text:0000000000012B0A                 mov     r14, [r15+rbx*8]
.text:0000000000012B0E                 test    r14, r14
.text:0000000000012B11                 jnz     short loc_12AD7
.text:0000000000012B13                 nop     dword ptr [rax+rax+00h]
.text:0000000000012B18
.text:0000000000012B18 loc_12B18:                              ; CODE XREF: argmatch+95↑j
.text:0000000000012B18                 cmp     [rsp+58h+var_41], 0
.text:0000000000012B1D                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000012B24                 cmovz   rax, [rsp+58h+var_58]
.text:0000000000012B29                 mov     [rsp+58h+var_58], rax
.text:0000000000012B2D
.text:0000000000012B2D loc_12B2D:                              ; CODE XREF: argmatch+34↑j
.text:0000000000012B2D                                         ; argmatch+114↓j
.text:0000000000012B2D                 mov     rax, [rsp+58h+var_58]
.text:0000000000012B31                 add     rsp, 28h
.text:0000000000012B35                 pop     rbx
.text:0000000000012B36                 pop     rbp
.text:0000000000012B37                 pop     r12
.text:0000000000012B39                 pop     r13
.text:0000000000012B3B                 pop     r14
.text:0000000000012B3D                 pop     r15
.text:0000000000012B3F                 retn
.text:0000000000012B40 ; ---------------------------------------------------------------------------
.text:0000000000012B40
.text:0000000000012B40 loc_12B40:                              ; CODE XREF: argmatch+58↑j
.text:0000000000012B40                 mov     [rsp+58h+var_41], 1
.text:0000000000012B45                 jmp     short loc_12AC7
.text:0000000000012B45 ; ---------------------------------------------------------------------------
.text:0000000000012B47                 align 10h
.text:0000000000012B50
.text:0000000000012B50 loc_12B50:                              ; CODE XREF: argmatch+B6↑j
.text:0000000000012B50                 mov     [rsp+58h+var_58], rbx
.text:0000000000012B54                 jmp     short loc_12B2D
.text:0000000000012B54 ; } // starts at 12A40
.text:0000000000012B54 argmatch        endp
.text:0000000000012B54
.text:0000000000012B54 ; ---------------------------------------------------------------------------
.text:0000000000012B56                 align 20h
.text:0000000000012B60
.text:0000000000012B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000012B60
.text:0000000000012B60 ; Attributes: info_from_lumina
.text:0000000000012B60
.text:0000000000012B60 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000012B60                 public argmatch_invalid
.text:0000000000012B60 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000012B60 ; __unwind {
.text:0000000000012B60                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000012B64                 push    r12
.text:0000000000012B66                 mov     edx, 5          ; category
.text:0000000000012B6B                 push    rbp
.text:0000000000012B6C                 mov     r12, rsi
.text:0000000000012B6F                 push    rbx
.text:0000000000012B70                 mov     rbp, rdi
.text:0000000000012B73                 jz      short loc_12BC0
.text:0000000000012B75                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0000000000012B7C                 xor     edi, edi        ; domainname
.text:0000000000012B7E                 call    _dcgettext
.text:0000000000012B83                 mov     rbx, rax
.text:0000000000012B86
.text:0000000000012B86 loc_12B86:                              ; CODE XREF: argmatch_invalid+71↓j
.text:0000000000012B86                 mov     rsi, rbp
.text:0000000000012B89                 mov     edi, 1
.text:0000000000012B8E                 call    quote_n
.text:0000000000012B93                 mov     rdx, r12
.text:0000000000012B96                 mov     rbp, rax
.text:0000000000012B99                 mov     esi, 8
.text:0000000000012B9E                 xor     edi, edi
.text:0000000000012BA0                 call    quotearg_n_style
.text:0000000000012BA5                 mov     r8, rbp
.text:0000000000012BA8                 mov     rdx, rbx        ; format
.text:0000000000012BAB                 mov     rcx, rax
.text:0000000000012BAE                 pop     rbx
.text:0000000000012BAF                 pop     rbp
.text:0000000000012BB0                 pop     r12
.text:0000000000012BB2                 xor     esi, esi        ; errnum
.text:0000000000012BB4                 xor     edi, edi        ; status
.text:0000000000012BB6                 xor     eax, eax
.text:0000000000012BB8                 jmp     _error
.text:0000000000012BB8 ; ---------------------------------------------------------------------------
.text:0000000000012BBD                 align 20h
.text:0000000000012BC0
.text:0000000000012BC0 loc_12BC0:                              ; CODE XREF: argmatch_invalid+13↑j
.text:0000000000012BC0                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:0000000000012BC7                 xor     edi, edi        ; domainname
.text:0000000000012BC9                 call    _dcgettext
.text:0000000000012BCE                 mov     rbx, rax
.text:0000000000012BD1                 jmp     short loc_12B86
.text:0000000000012BD1 ; } // starts at 12B60
.text:0000000000012BD1 argmatch_invalid endp
.text:0000000000012BD1
.text:0000000000012BD1 ; ---------------------------------------------------------------------------
.text:0000000000012BD3                 align 20h
.text:0000000000012BE0
.text:0000000000012BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000012BE0
.text:0000000000012BE0 ; Attributes: info_from_lumina
.text:0000000000012BE0
.text:0000000000012BE0 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000012BE0                 public argmatch_valid
.text:0000000000012BE0 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:0000000000012BE0 ; __unwind {
.text:0000000000012BE0                 push    r15
.text:0000000000012BE2                 push    r14
.text:0000000000012BE4                 mov     r14, rdi
.text:0000000000012BE7                 push    r13
.text:0000000000012BE9                 push    r12
.text:0000000000012BEB                 xor     edi, edi        ; domainname
.text:0000000000012BED                 push    rbp
.text:0000000000012BEE                 push    rbx
.text:0000000000012BEF                 mov     rbp, rsi
.text:0000000000012BF2                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:0000000000012BF9                 mov     r12, rdx
.text:0000000000012BFC                 mov     edx, 5          ; category
.text:0000000000012C01                 sub     rsp, 8
.text:0000000000012C05                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:0000000000012C0C                 call    _dcgettext
.text:0000000000012C11                 mov     rdi, rax        ; s
.text:0000000000012C14                 mov     rsi, rbx        ; stream
.text:0000000000012C17                 call    _fputs_unlocked
.text:0000000000012C1C                 mov     r15, [r14]
.text:0000000000012C1F                 test    r15, r15
.text:0000000000012C22                 jz      loc_12CB8
.text:0000000000012C28                 xor     r13d, r13d
.text:0000000000012C2B                 xor     ebx, ebx
.text:0000000000012C2D                 jmp     short loc_12C68
.text:0000000000012C2D ; ---------------------------------------------------------------------------
.text:0000000000012C2F                 align 10h
.text:0000000000012C30
.text:0000000000012C30 loc_12C30:                              ; CODE XREF: argmatch_valid+8B↓j
.text:0000000000012C30                                         ; argmatch_valid+9D↓j
.text:0000000000012C30                 mov     rdi, r15
.text:0000000000012C33                 add     rbx, 1
.text:0000000000012C37                 mov     r13, rbp
.text:0000000000012C3A                 call    quote
.text:0000000000012C3F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000012C46                 lea     rdx, aS         ; "\n  - %s"
.text:0000000000012C4D                 mov     rcx, rax
.text:0000000000012C50                 mov     esi, 1
.text:0000000000012C55                 xor     eax, eax
.text:0000000000012C57                 add     rbp, r12
.text:0000000000012C5A                 call    ___fprintf_chk
.text:0000000000012C5F                 mov     r15, [r14+rbx*8]
.text:0000000000012C63                 test    r15, r15
.text:0000000000012C66                 jz      short loc_12CB8
.text:0000000000012C68
.text:0000000000012C68 loc_12C68:                              ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000012C68                                         ; argmatch_valid+D2↓j
.text:0000000000012C68                 test    rbx, rbx
.text:0000000000012C6B                 jz      short loc_12C30
.text:0000000000012C6D                 mov     rdx, r12        ; n
.text:0000000000012C70                 mov     rsi, rbp        ; s2
.text:0000000000012C73                 mov     rdi, r13        ; s1
.text:0000000000012C76                 call    _memcmp
.text:0000000000012C7B                 test    eax, eax
.text:0000000000012C7D                 jnz     short loc_12C30
.text:0000000000012C7F                 mov     rdi, r15
.text:0000000000012C82                 add     rbx, 1
.text:0000000000012C86                 add     rbp, r12
.text:0000000000012C89                 call    quote
.text:0000000000012C8E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000012C95                 lea     rdx, aS_0       ; ", %s"
.text:0000000000012C9C                 mov     rcx, rax
.text:0000000000012C9F                 mov     esi, 1
.text:0000000000012CA4                 xor     eax, eax
.text:0000000000012CA6                 call    ___fprintf_chk
.text:0000000000012CAB                 mov     r15, [r14+rbx*8]
.text:0000000000012CAF                 test    r15, r15
.text:0000000000012CB2                 jnz     short loc_12C68
.text:0000000000012CB4                 nop     dword ptr [rax+00h]
.text:0000000000012CB8
.text:0000000000012CB8 loc_12CB8:                              ; CODE XREF: argmatch_valid+42↑j
.text:0000000000012CB8                                         ; argmatch_valid+86↑j
.text:0000000000012CB8                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000012CBF                 mov     rax, [rdi+28h]
.text:0000000000012CC3                 cmp     rax, [rdi+30h]
.text:0000000000012CC7                 jnb     short loc_12CE8
.text:0000000000012CC9                 lea     rdx, [rax+1]
.text:0000000000012CCD                 mov     [rdi+28h], rdx
.text:0000000000012CD1                 mov     byte ptr [rax], 0Ah
.text:0000000000012CD4                 add     rsp, 8
.text:0000000000012CD8                 pop     rbx
.text:0000000000012CD9                 pop     rbp
.text:0000000000012CDA                 pop     r12
.text:0000000000012CDC                 pop     r13
.text:0000000000012CDE                 pop     r14
.text:0000000000012CE0                 pop     r15
.text:0000000000012CE2                 retn
.text:0000000000012CE2 ; ---------------------------------------------------------------------------
.text:0000000000012CE3                 align 8
.text:0000000000012CE8
.text:0000000000012CE8 loc_12CE8:                              ; CODE XREF: argmatch_valid+E7↑j
.text:0000000000012CE8                 add     rsp, 8
.text:0000000000012CEC                 mov     esi, 0Ah        ; int
.text:0000000000012CF1                 pop     rbx
.text:0000000000012CF2                 pop     rbp
.text:0000000000012CF3                 pop     r12
.text:0000000000012CF5                 pop     r13
.text:0000000000012CF7                 pop     r14
.text:0000000000012CF9                 pop     r15
.text:0000000000012CFB                 jmp     ___overflow
.text:0000000000012CFB ; } // starts at 12BE0
.text:0000000000012CFB argmatch_valid  endp
.text:0000000000012CFB
.text:0000000000012D00
.text:0000000000012D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000012D00
.text:0000000000012D00 ; Attributes: info_from_lumina
.text:0000000000012D00
.text:0000000000012D00 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:0000000000012D00                 public __xargmatch_internal
.text:0000000000012D00 __xargmatch_internal proc near          ; CODE XREF: get_version_part_0+1F↑p
.text:0000000000012D00 ; __unwind {
.text:0000000000012D00                 push    r15
.text:0000000000012D02                 push    r14
.text:0000000000012D04                 mov     r14, rdi
.text:0000000000012D07                 push    r13
.text:0000000000012D09                 push    r12
.text:0000000000012D0B                 mov     r12, rsi
.text:0000000000012D0E                 push    rbp
.text:0000000000012D0F                 push    rbx
.text:0000000000012D10                 mov     rbp, rcx
.text:0000000000012D13                 mov     rbx, rdx
.text:0000000000012D16                 mov     rcx, r8
.text:0000000000012D19                 mov     rdx, rbp
.text:0000000000012D1C                 sub     rsp, 8
.text:0000000000012D20                 mov     rsi, rbx
.text:0000000000012D23                 mov     rdi, r12
.text:0000000000012D26                 mov     r15, r8
.text:0000000000012D29                 mov     r13, r9
.text:0000000000012D2C                 call    argmatch
.text:0000000000012D31                 test    rax, rax
.text:0000000000012D34                 js      short loc_12D45
.text:0000000000012D36
.text:0000000000012D36 loc_12D36:                              ; CODE XREF: __xargmatch_internal+6B↓j
.text:0000000000012D36                 add     rsp, 8
.text:0000000000012D3A                 pop     rbx
.text:0000000000012D3B                 pop     rbp
.text:0000000000012D3C                 pop     r12
.text:0000000000012D3E                 pop     r13
.text:0000000000012D40                 pop     r14
.text:0000000000012D42                 pop     r15
.text:0000000000012D44                 retn
.text:0000000000012D45 ; ---------------------------------------------------------------------------
.text:0000000000012D45
.text:0000000000012D45 loc_12D45:                              ; CODE XREF: __xargmatch_internal+34↑j
.text:0000000000012D45                 mov     rdx, rax
.text:0000000000012D48                 mov     rsi, r12
.text:0000000000012D4B                 mov     rdi, r14
.text:0000000000012D4E                 call    argmatch_invalid
.text:0000000000012D53                 mov     rdx, r15
.text:0000000000012D56                 mov     rsi, rbp
.text:0000000000012D59                 mov     rdi, rbx
.text:0000000000012D5C                 call    argmatch_valid
.text:0000000000012D61                 call    r13
.text:0000000000012D64                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000012D6B                 jmp     short loc_12D36
.text:0000000000012D6B ; } // starts at 12D00
.text:0000000000012D6B __xargmatch_internal endp
.text:0000000000012D6B
.text:0000000000012D6B ; ---------------------------------------------------------------------------
.text:0000000000012D6D                 align 10h
.text:0000000000012D70
.text:0000000000012D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000012D70
.text:0000000000012D70 ; Attributes: info_from_lumina
.text:0000000000012D70
.text:0000000000012D70 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000012D70                 public argmatch_to_argument
.text:0000000000012D70 argmatch_to_argument proc near
.text:0000000000012D70 ; __unwind {
.text:0000000000012D70                 push    r14
.text:0000000000012D72                 push    r13
.text:0000000000012D74                 push    r12
.text:0000000000012D76                 push    rbp
.text:0000000000012D77                 push    rbx
.text:0000000000012D78                 mov     r14, [rsi]
.text:0000000000012D7B                 test    r14, r14
.text:0000000000012D7E                 jz      short loc_12DB1
.text:0000000000012D80                 mov     r12, rcx
.text:0000000000012D83                 mov     r13, rdi
.text:0000000000012D86                 mov     rbp, rdx
.text:0000000000012D89                 lea     rbx, [rsi+8]
.text:0000000000012D8D                 jmp     short loc_12D9F
.text:0000000000012D8D ; ---------------------------------------------------------------------------
.text:0000000000012D8F                 align 10h
.text:0000000000012D90
.text:0000000000012D90 loc_12D90:                              ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000012D90                 mov     r14, [rbx]
.text:0000000000012D93                 add     rbp, r12
.text:0000000000012D96                 add     rbx, 8
.text:0000000000012D9A                 test    r14, r14
.text:0000000000012D9D                 jz      short loc_12DB1
.text:0000000000012D9F
.text:0000000000012D9F loc_12D9F:                              ; CODE XREF: argmatch_to_argument+1D↑j
.text:0000000000012D9F                 mov     rdx, r12        ; n
.text:0000000000012DA2                 mov     rsi, rbp        ; s2
.text:0000000000012DA5                 mov     rdi, r13        ; s1
.text:0000000000012DA8                 call    _memcmp
.text:0000000000012DAD                 test    eax, eax
.text:0000000000012DAF                 jnz     short loc_12D90
.text:0000000000012DB1
.text:0000000000012DB1 loc_12DB1:                              ; CODE XREF: argmatch_to_argument+E↑j
.text:0000000000012DB1                                         ; argmatch_to_argument+2D↑j
.text:0000000000012DB1                 pop     rbx
.text:0000000000012DB2                 mov     rax, r14
.text:0000000000012DB5                 pop     rbp
.text:0000000000012DB6                 pop     r12
.text:0000000000012DB8                 pop     r13
.text:0000000000012DBA                 pop     r14
.text:0000000000012DBC                 retn
.text:0000000000012DBC ; } // starts at 12D70
.text:0000000000012DBC argmatch_to_argument endp
.text:0000000000012DBC
.text:0000000000012DBC ; ---------------------------------------------------------------------------
.text:0000000000012DBD                 align 20h
.text:0000000000012DC0
.text:0000000000012DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000012DC0
.text:0000000000012DC0 ; Attributes: info_from_lumina
.text:0000000000012DC0
.text:0000000000012DC0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000012DC0                 public close_stream
.text:0000000000012DC0 close_stream    proc near               ; CODE XREF: close_stdin+1F↑p
.text:0000000000012DC0                                         ; close_stdin+4C↑p ...
.text:0000000000012DC0 ; __unwind {
.text:0000000000012DC0                 push    r12
.text:0000000000012DC2                 push    rbp
.text:0000000000012DC3                 mov     rbp, rdi
.text:0000000000012DC6                 push    rbx
.text:0000000000012DC7                 call    ___fpending
.text:0000000000012DCC                 mov     ebx, [rbp+0]
.text:0000000000012DCF                 mov     rdi, rbp        ; stream
.text:0000000000012DD2                 mov     r12, rax
.text:0000000000012DD5                 call    rpl_fclose
.text:0000000000012DDA                 and     ebx, 20h
.text:0000000000012DDD                 test    ebx, ebx
.text:0000000000012DDF                 jnz     short loc_12DF8
.text:0000000000012DE1                 test    eax, eax
.text:0000000000012DE3                 jz      short loc_12DEF
.text:0000000000012DE5                 test    r12, r12
.text:0000000000012DE8                 mov     eax, 0FFFFFFFFh
.text:0000000000012DED                 jz      short loc_12E28
.text:0000000000012DEF
.text:0000000000012DEF loc_12DEF:                              ; CODE XREF: close_stream+23↑j
.text:0000000000012DEF                 pop     rbx
.text:0000000000012DF0                 pop     rbp
.text:0000000000012DF1                 pop     r12
.text:0000000000012DF3                 retn
.text:0000000000012DF3 ; ---------------------------------------------------------------------------
.text:0000000000012DF4                 align 8
.text:0000000000012DF8
.text:0000000000012DF8 loc_12DF8:                              ; CODE XREF: close_stream+1F↑j
.text:0000000000012DF8                 test    eax, eax
.text:0000000000012DFA                 jnz     short loc_12E18
.text:0000000000012DFC                 call    ___errno_location
.text:0000000000012E01                 mov     dword ptr [rax], 0
.text:0000000000012E07                 mov     eax, 0FFFFFFFFh
.text:0000000000012E0C                 pop     rbx
.text:0000000000012E0D                 pop     rbp
.text:0000000000012E0E                 pop     r12
.text:0000000000012E10                 retn
.text:0000000000012E10 ; ---------------------------------------------------------------------------
.text:0000000000012E11                 align 8
.text:0000000000012E18
.text:0000000000012E18 loc_12E18:                              ; CODE XREF: close_stream+3A↑j
.text:0000000000012E18                 pop     rbx
.text:0000000000012E19                 mov     eax, 0FFFFFFFFh
.text:0000000000012E1E                 pop     rbp
.text:0000000000012E1F                 pop     r12
.text:0000000000012E21                 retn
.text:0000000000012E21 ; ---------------------------------------------------------------------------
.text:0000000000012E22                 align 8
.text:0000000000012E28
.text:0000000000012E28 loc_12E28:                              ; CODE XREF: close_stream+2D↑j
.text:0000000000012E28                 call    ___errno_location
.text:0000000000012E2D                 cmp     dword ptr [rax], 9
.text:0000000000012E30                 pop     rbx
.text:0000000000012E31                 pop     rbp
.text:0000000000012E32                 pop     r12
.text:0000000000012E34                 setnz   al
.text:0000000000012E37                 movzx   eax, al
.text:0000000000012E3A                 neg     eax
.text:0000000000012E3C                 retn
.text:0000000000012E3C ; } // starts at 12DC0
.text:0000000000012E3C close_stream    endp
.text:0000000000012E3C
.text:0000000000012E3C ; ---------------------------------------------------------------------------
.text:0000000000012E3D                 align 20h
.text:0000000000012E40
.text:0000000000012E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000012E40
.text:0000000000012E40
.text:0000000000012E40                 public opendir_safer
.text:0000000000012E40 opendir_safer   proc near               ; CODE XREF: savedir+6↑p
.text:0000000000012E40 ; __unwind {
.text:0000000000012E40                 push    r14
.text:0000000000012E42                 push    r13
.text:0000000000012E44                 push    r12
.text:0000000000012E46                 push    rbp
.text:0000000000012E47                 push    rbx             ; char
.text:0000000000012E48                 call    _opendir
.text:0000000000012E4D                 test    rax, rax
.text:0000000000012E50                 mov     rbx, rax
.text:0000000000012E53                 jz      short loc_12E62
.text:0000000000012E55                 mov     rdi, rax        ; dirp
.text:0000000000012E58                 call    _dirfd
.text:0000000000012E5D                 cmp     eax, 2
.text:0000000000012E60                 jbe     short loc_12E70
.text:0000000000012E62
.text:0000000000012E62 loc_12E62:                              ; CODE XREF: opendir_safer+13↑j
.text:0000000000012E62                 mov     rax, rbx
.text:0000000000012E65                 pop     rbx
.text:0000000000012E66                 pop     rbp
.text:0000000000012E67                 pop     r12
.text:0000000000012E69                 pop     r13
.text:0000000000012E6B                 pop     r14
.text:0000000000012E6D                 retn
.text:0000000000012E6D ; ---------------------------------------------------------------------------
.text:0000000000012E6E                 align 10h
.text:0000000000012E70
.text:0000000000012E70 loc_12E70:                              ; CODE XREF: opendir_safer+20↑j
.text:0000000000012E70                 mov     edi, eax        ; fd
.text:0000000000012E72                 mov     edx, 3
.text:0000000000012E77                 mov     esi, 406h
.text:0000000000012E7C                 xor     eax, eax
.text:0000000000012E7E                 call    rpl_fcntl
.text:0000000000012E83                 mov     r12d, eax
.text:0000000000012E86                 call    ___errno_location
.text:0000000000012E8B                 test    r12d, r12d
.text:0000000000012E8E                 mov     rbp, rax
.text:0000000000012E91                 jns     short loc_12EB8
.text:0000000000012E93                 mov     r14d, [rax]
.text:0000000000012E96                 xor     r13d, r13d
.text:0000000000012E99
.text:0000000000012E99 loc_12E99:                              ; CODE XREF: opendir_safer+8A↓j
.text:0000000000012E99                                         ; opendir_safer+94↓j
.text:0000000000012E99                 mov     rdi, rbx        ; dirp
.text:0000000000012E9C                 mov     rbx, r13
.text:0000000000012E9F                 call    _closedir
.text:0000000000012EA4                 mov     [rbp+0], r14d
.text:0000000000012EA8                 mov     rax, rbx
.text:0000000000012EAB                 pop     rbx
.text:0000000000012EAC                 pop     rbp
.text:0000000000012EAD                 pop     r12
.text:0000000000012EAF                 pop     r13
.text:0000000000012EB1                 pop     r14
.text:0000000000012EB3                 retn
.text:0000000000012EB3 ; ---------------------------------------------------------------------------
.text:0000000000012EB4                 align 8
.text:0000000000012EB8
.text:0000000000012EB8 loc_12EB8:                              ; CODE XREF: opendir_safer+51↑j
.text:0000000000012EB8                 mov     edi, r12d       ; fd
.text:0000000000012EBB                 call    _fdopendir
.text:0000000000012EC0                 test    rax, rax
.text:0000000000012EC3                 mov     r13, rax
.text:0000000000012EC6                 mov     r14d, [rbp+0]
.text:0000000000012ECA                 jnz     short loc_12E99
.text:0000000000012ECC                 mov     edi, r12d       ; fd
.text:0000000000012ECF                 call    _close
.text:0000000000012ED4                 jmp     short loc_12E99
.text:0000000000012ED4 ; } // starts at 12E40
.text:0000000000012ED4 opendir_safer   endp
.text:0000000000012ED4
.text:0000000000012ED4 ; ---------------------------------------------------------------------------
.text:0000000000012ED6                 align 20h
.text:0000000000012EE0
.text:0000000000012EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000012EE0
.text:0000000000012EE0
.text:0000000000012EE0 ; __int64 __fastcall gettime(struct timespec *tp)
.text:0000000000012EE0                 public gettime
.text:0000000000012EE0 gettime         proc near               ; CODE XREF: update_timespec+4C↑p
.text:0000000000012EE0                                         ; update_timespec+B0↑p
.text:0000000000012EE0 ; __unwind {
.text:0000000000012EE0                 mov     rsi, rdi        ; tp
.text:0000000000012EE3                 xor     edi, edi        ; clock_id
.text:0000000000012EE5                 jmp     _clock_gettime
.text:0000000000012EE5 ; } // starts at 12EE0
.text:0000000000012EE5 gettime         endp
.text:0000000000012EE5
.text:0000000000012EE5 ; ---------------------------------------------------------------------------
.text:0000000000012EEA                 align 10h
.text:0000000000012EF0
.text:0000000000012EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000012EF0
.text:0000000000012EF0
.text:0000000000012EF0                 public current_timespec
.text:0000000000012EF0 current_timespec proc near
.text:0000000000012EF0
.text:0000000000012EF0 var_28          = qword ptr -28h
.text:0000000000012EF0 var_20          = qword ptr -20h
.text:0000000000012EF0 var_10          = qword ptr -10h
.text:0000000000012EF0
.text:0000000000012EF0 ; __unwind {
.text:0000000000012EF0                 sub     rsp, 28h
.text:0000000000012EF4                 xor     edi, edi        ; clock_id
.text:0000000000012EF6                 mov     rsi, rsp        ; tp
.text:0000000000012EF9                 mov     rax, fs:28h
.text:0000000000012F02                 mov     [rsp+28h+var_10], rax
.text:0000000000012F07                 xor     eax, eax
.text:0000000000012F09                 call    _clock_gettime
.text:0000000000012F0E                 mov     rcx, [rsp+28h+var_10]
.text:0000000000012F13                 xor     rcx, fs:28h
.text:0000000000012F1C                 mov     rax, [rsp+28h+var_28]
.text:0000000000012F20                 mov     rdx, [rsp+28h+var_20]
.text:0000000000012F25                 jnz     short loc_12F2C
.text:0000000000012F27                 add     rsp, 28h
.text:0000000000012F2B                 retn
.text:0000000000012F2C ; ---------------------------------------------------------------------------
.text:0000000000012F2C
.text:0000000000012F2C loc_12F2C:                              ; CODE XREF: current_timespec+35↑j
.text:0000000000012F2C                 call    ___stack_chk_fail
.text:0000000000012F2C ; } // starts at 12EF0
.text:0000000000012F2C current_timespec endp
.text:0000000000012F2C
.text:0000000000012F2C ; ---------------------------------------------------------------------------
.text:0000000000012F31                 align 20h
.text:0000000000012F40
.text:0000000000012F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000012F40
.text:0000000000012F40
.text:0000000000012F40                 public hard_locale
.text:0000000000012F40 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000012F40 ; __unwind {
.text:0000000000012F40                 sub     rsp, 8
.text:0000000000012F44                 xor     esi, esi        ; locale
.text:0000000000012F46                 call    _setlocale
.text:0000000000012F4B                 mov     rdx, rax
.text:0000000000012F4E                 mov     eax, 1
.text:0000000000012F53                 test    rdx, rdx
.text:0000000000012F56                 jz      short loc_12F75
.text:0000000000012F58                 lea     rdi, aC         ; "C"
.text:0000000000012F5F                 mov     ecx, 2
.text:0000000000012F64                 mov     rsi, rdx
.text:0000000000012F67                 repe cmpsb
.text:0000000000012F69                 setnbe  cl
.text:0000000000012F6C                 sbb     cl, 0
.text:0000000000012F6F                 xor     eax, eax
.text:0000000000012F71                 test    cl, cl
.text:0000000000012F73                 jnz     short loc_12F80
.text:0000000000012F75
.text:0000000000012F75 loc_12F75:                              ; CODE XREF: hard_locale+16↑j
.text:0000000000012F75                 add     rsp, 8
.text:0000000000012F79                 retn
.text:0000000000012F79 ; ---------------------------------------------------------------------------
.text:0000000000012F7A                 align 20h
.text:0000000000012F80
.text:0000000000012F80 loc_12F80:                              ; CODE XREF: hard_locale+33↑j
.text:0000000000012F80                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000012F87                 mov     ecx, 6
.text:0000000000012F8C                 mov     rsi, rdx
.text:0000000000012F8F                 repe cmpsb
.text:0000000000012F91                 setnbe  al
.text:0000000000012F94                 sbb     al, 0
.text:0000000000012F96                 test    al, al
.text:0000000000012F98                 setnz   al
.text:0000000000012F9B                 add     rsp, 8
.text:0000000000012F9F                 retn
.text:0000000000012F9F ; } // starts at 12F40
.text:0000000000012F9F hard_locale     endp
.text:0000000000012F9F
.text:0000000000012FA0
.text:0000000000012FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000012FA0
.text:0000000000012FA0 ; Attributes: info_from_lumina
.text:0000000000012FA0
.text:0000000000012FA0 ; size_t __fastcall hash_pjw(const void *x, size_t tablesize)
.text:0000000000012FA0                 public hash_pjw
.text:0000000000012FA0 hash_pjw        proc near               ; CODE XREF: triple_hash+F↑p
.text:0000000000012FA0 ; __unwind {
.text:0000000000012FA0                 movsx   rcx, byte ptr [rdi]
.text:0000000000012FA4                 test    cl, cl
.text:0000000000012FA6                 jz      short loc_12FD0
.text:0000000000012FA8                 xor     eax, eax
.text:0000000000012FAA                 nop     word ptr [rax+rax+00h]
.text:0000000000012FB0
.text:0000000000012FB0 loc_12FB0:                              ; CODE XREF: hash_pjw+21↓j
.text:0000000000012FB0                 rol     rax, 9
.text:0000000000012FB4                 add     rdi, 1
.text:0000000000012FB8                 add     rax, rcx
.text:0000000000012FBB                 movsx   rcx, byte ptr [rdi]
.text:0000000000012FBF                 test    cl, cl
.text:0000000000012FC1                 jnz     short loc_12FB0
.text:0000000000012FC3                 xor     edx, edx
.text:0000000000012FC5                 div     rsi
.text:0000000000012FC8                 mov     rax, rdx
.text:0000000000012FCB                 retn
.text:0000000000012FCB ; ---------------------------------------------------------------------------
.text:0000000000012FCC                 align 10h
.text:0000000000012FD0
.text:0000000000012FD0 loc_12FD0:                              ; CODE XREF: hash_pjw+6↑j
.text:0000000000012FD0                 xor     edx, edx
.text:0000000000012FD2                 mov     rax, rdx
.text:0000000000012FD5                 retn
.text:0000000000012FD5 ; } // starts at 12FA0
.text:0000000000012FD5 hash_pjw        endp
.text:0000000000012FD5
.text:0000000000012FD5 ; ---------------------------------------------------------------------------
.text:0000000000012FD6                 align 20h
.text:0000000000012FE0
.text:0000000000012FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000012FE0
.text:0000000000012FE0
.text:0000000000012FE0                 public locale_charset
.text:0000000000012FE0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000012FE0 ; __unwind {
.text:0000000000012FE0                 sub     rsp, 8
.text:0000000000012FE4                 mov     edi, 0Eh        ; item
.text:0000000000012FE9                 call    _nl_langinfo
.text:0000000000012FEE                 test    rax, rax
.text:0000000000012FF1                 jz      short loc_13010
.text:0000000000012FF3                 cmp     byte ptr [rax], 0
.text:0000000000012FF6                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000012FFD                 cmovz   rax, rdx
.text:0000000000013001                 add     rsp, 8
.text:0000000000013005                 retn
.text:0000000000013005 ; ---------------------------------------------------------------------------
.text:0000000000013006                 align 10h
.text:0000000000013010
.text:0000000000013010 loc_13010:                              ; CODE XREF: locale_charset+11↑j
.text:0000000000013010                 lea     rax, aAscii     ; "ASCII"
.text:0000000000013017                 add     rsp, 8
.text:000000000001301B                 retn
.text:000000000001301B ; } // starts at 12FE0
.text:000000000001301B locale_charset  endp
.text:000000000001301B
.text:000000000001301B ; ---------------------------------------------------------------------------
.text:000000000001301C                 align 20h
.text:0000000000013020
.text:0000000000013020 ; =============== S U B R O U T I N E =======================================
.text:0000000000013020
.text:0000000000013020
.text:0000000000013020 ; __int64 __usercall dirchownmod@<rax>(int fd@<edi>, char *file@<rsi>, int)
.text:0000000000013020                 public dirchownmod
.text:0000000000013020 dirchownmod     proc near               ; CODE XREF: make_dir_parents+2CD↑p
.text:0000000000013020
.text:0000000000013020 group           = dword ptr -0DCh
.text:0000000000013020 stat_buf        = stat ptr -0D8h
.text:0000000000013020 var_40          = qword ptr -40h
.text:0000000000013020 arg_0           = dword ptr  8
.text:0000000000013020
.text:0000000000013020 ; __unwind {
.text:0000000000013020                 push    r15
.text:0000000000013022                 push    r14
.text:0000000000013024                 mov     r15d, edx
.text:0000000000013027                 push    r13
.text:0000000000013029                 push    r12
.text:000000000001302B                 mov     r13d, ecx
.text:000000000001302E                 push    rbp
.text:000000000001302F                 push    rbx
.text:0000000000013030                 mov     ebp, edi
.text:0000000000013032                 mov     r12, rsi
.text:0000000000013035                 mov     r14d, r9d
.text:0000000000013038                 sub     rsp, 0B8h
.text:000000000001303F                 mov     rax, fs:28h
.text:0000000000013048                 mov     [rsp+0E8h+var_40], rax
.text:0000000000013050                 xor     eax, eax
.text:0000000000013052                 test    edi, edi
.text:0000000000013054                 mov     [rsp+0E8h+group], r8d
.text:0000000000013059                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:000000000001305E                 js      loc_13130
.text:0000000000013064                 mov     esi, edi        ; fildes
.text:0000000000013066                 mov     edi, 1          ; ver
.text:000000000001306B                 call    ___fxstat
.text:0000000000013070                 test    eax, eax
.text:0000000000013072                 mov     ebx, eax
.text:0000000000013074                 mov     r8d, [rsp+0E8h+group]
.text:0000000000013079                 jnz     loc_13220
.text:000000000001307F                 mov     ecx, [rsp+0E8h+stat_buf.st_mode]
.text:0000000000013083                 mov     eax, ecx
.text:0000000000013085                 and     eax, 0F000h
.text:000000000001308A                 cmp     eax, 4000h
.text:000000000001308F                 jnz     short loc_130E0
.text:0000000000013091
.text:0000000000013091 loc_13091:                              ; CODE XREF: dirchownmod+135↓j
.text:0000000000013091                 cmp     r13d, 0FFFFFFFFh
.text:0000000000013095                 jz      loc_13170
.text:000000000001309B                 cmp     [rsp+0E8h+stat_buf.st_uid], r13d
.text:00000000000130A0                 jz      loc_13170
.text:00000000000130A6
.text:00000000000130A6 loc_130A6:                              ; CODE XREF: dirchownmod+15B↓j
.text:00000000000130A6                 test    ebp, ebp
.text:00000000000130A8                 mov     [rsp+0E8h+group], ecx
.text:00000000000130AC                 mov     edx, r8d        ; group
.text:00000000000130AF                 mov     esi, r13d       ; owner
.text:00000000000130B2                 jns     loc_131C0
.text:00000000000130B8                 cmp     r15d, 0FFFFFFFFh
.text:00000000000130BC                 mov     rdi, r12        ; file
.text:00000000000130BF                 jz      loc_13200
.text:00000000000130C5                 call    _lchown
.text:00000000000130CA                 mov     ecx, [rsp+0E8h+group]
.text:00000000000130CE                 mov     ebx, eax
.text:00000000000130D0
.text:00000000000130D0 loc_130D0:                              ; CODE XREF: dirchownmod+1EB↓j
.text:00000000000130D0                 test    ebx, ebx
.text:00000000000130D2                 jnz     short loc_13104
.text:00000000000130D4                 jmp     loc_131D1
.text:00000000000130D4 ; ---------------------------------------------------------------------------
.text:00000000000130D9                 align 20h
.text:00000000000130E0
.text:00000000000130E0 loc_130E0:                              ; CODE XREF: dirchownmod+6F↑j
.text:00000000000130E0                 call    ___errno_location
.text:00000000000130E5                 mov     r13d, 14h
.text:00000000000130EB                 mov     r12, rax
.text:00000000000130EE                 mov     dword ptr [rax], 14h
.text:00000000000130F4                 mov     ebx, 0FFFFFFFFh
.text:00000000000130F9
.text:00000000000130F9 loc_130F9:                              ; CODE XREF: dirchownmod+20B↓j
.text:00000000000130F9                 mov     edi, ebp        ; fd
.text:00000000000130FB                 call    _close
.text:0000000000013100                 mov     [r12], r13d
.text:0000000000013104
.text:0000000000013104 loc_13104:                              ; CODE XREF: dirchownmod+B2↑j
.text:0000000000013104                                         ; dirchownmod+123↓j ...
.text:0000000000013104                 mov     rcx, [rsp+0E8h+var_40]
.text:000000000001310C                 xor     rcx, fs:28h
.text:0000000000013115                 mov     eax, ebx
.text:0000000000013117                 jnz     loc_13230
.text:000000000001311D                 add     rsp, 0B8h
.text:0000000000013124                 pop     rbx
.text:0000000000013125                 pop     rbp
.text:0000000000013126                 pop     r12
.text:0000000000013128                 pop     r13
.text:000000000001312A                 pop     r14
.text:000000000001312C                 pop     r15
.text:000000000001312E                 retn
.text:000000000001312E ; ---------------------------------------------------------------------------
.text:000000000001312F                 align 10h
.text:0000000000013130
.text:0000000000013130 loc_13130:                              ; CODE XREF: dirchownmod+3E↑j
.text:0000000000013130                 mov     edi, 1          ; ver
.text:0000000000013135                 call    ___xstat
.text:000000000001313A                 test    eax, eax
.text:000000000001313C                 mov     ebx, eax
.text:000000000001313E                 mov     r8d, [rsp+0E8h+group]
.text:0000000000013143                 jnz     short loc_13104
.text:0000000000013145                 mov     ecx, [rsp+0E8h+stat_buf.st_mode]
.text:0000000000013149                 mov     eax, ecx
.text:000000000001314B                 and     eax, 0F000h
.text:0000000000013150                 cmp     eax, 4000h
.text:0000000000013155                 jz      loc_13091
.text:000000000001315B                 call    ___errno_location
.text:0000000000013160                 or      ebx, 0FFFFFFFFh
.text:0000000000013163                 mov     dword ptr [rax], 14h
.text:0000000000013169                 jmp     short loc_13104
.text:0000000000013169 ; ---------------------------------------------------------------------------
.text:000000000001316B                 align 10h
.text:0000000000013170
.text:0000000000013170 loc_13170:                              ; CODE XREF: dirchownmod+75↑j
.text:0000000000013170                                         ; dirchownmod+80↑j
.text:0000000000013170                 cmp     r8d, 0FFFFFFFFh
.text:0000000000013174                 jz      short loc_13181
.text:0000000000013176                 cmp     [rsp+0E8h+stat_buf.st_gid], r8d
.text:000000000001317B                 jnz     loc_130A6
.text:0000000000013181
.text:0000000000013181 loc_13181:                              ; CODE XREF: dirchownmod+154↑j
.text:0000000000013181                                         ; dirchownmod+1B4↓j
.text:0000000000013181                 xor     edx, edx
.text:0000000000013183
.text:0000000000013183 loc_13183:                              ; CODE XREF: dirchownmod+1BE↓j
.text:0000000000013183                 mov     eax, ecx
.text:0000000000013185                 xor     eax, r14d
.text:0000000000013188                 or      eax, edx
.text:000000000001318A                 test    [rsp+0E8h+arg_0], eax
.text:0000000000013191                 jz      short loc_131E0
.text:0000000000013193                 mov     esi, [rsp+0E8h+arg_0]
.text:000000000001319A                 and     ecx, 0FFFh
.text:00000000000131A0                 not     esi
.text:00000000000131A2                 and     esi, ecx
.text:00000000000131A4                 or      esi, r14d       ; mode
.text:00000000000131A7                 test    ebp, ebp
.text:00000000000131A9                 jns     short loc_13210
.text:00000000000131AB                 mov     rdi, r12        ; file
.text:00000000000131AE                 call    _chmod
.text:00000000000131B3                 mov     ebx, eax
.text:00000000000131B5                 jmp     loc_13104
.text:00000000000131B5 ; ---------------------------------------------------------------------------
.text:00000000000131BA                 align 20h
.text:00000000000131C0
.text:00000000000131C0 loc_131C0:                              ; CODE XREF: dirchownmod+92↑j
.text:00000000000131C0                 mov     edi, ebp        ; fd
.text:00000000000131C2                 call    _fchown
.text:00000000000131C7                 test    eax, eax
.text:00000000000131C9                 mov     ebx, eax
.text:00000000000131CB                 mov     ecx, [rsp+0E8h+group]
.text:00000000000131CF                 jnz     short loc_13220
.text:00000000000131D1
.text:00000000000131D1 loc_131D1:                              ; CODE XREF: dirchownmod+B4↑j
.text:00000000000131D1                 test    cl, 49h
.text:00000000000131D4                 jz      short loc_13181
.text:00000000000131D6                 mov     edx, ecx
.text:00000000000131D8                 and     edx, 0C00h
.text:00000000000131DE                 jmp     short loc_13183
.text:00000000000131E0 ; ---------------------------------------------------------------------------
.text:00000000000131E0
.text:00000000000131E0 loc_131E0:                              ; CODE XREF: dirchownmod+171↑j
.text:00000000000131E0                 xor     ebx, ebx
.text:00000000000131E2                 test    ebp, ebp
.text:00000000000131E4                 js      loc_13104
.text:00000000000131EA                 nop     word ptr [rax+rax+00h]
.text:00000000000131F0
.text:00000000000131F0 loc_131F0:                              ; CODE XREF: dirchownmod+1FB↓j
.text:00000000000131F0                 mov     edi, ebp        ; fd
.text:00000000000131F2                 call    _close
.text:00000000000131F7                 mov     ebx, eax
.text:00000000000131F9                 jmp     loc_13104
.text:00000000000131F9 ; ---------------------------------------------------------------------------
.text:00000000000131FE                 align 20h
.text:0000000000013200
.text:0000000000013200 loc_13200:                              ; CODE XREF: dirchownmod+9F↑j
.text:0000000000013200                 call    _chown
.text:0000000000013205                 mov     ecx, [rsp+0E8h+group]
.text:0000000000013209                 mov     ebx, eax
.text:000000000001320B                 jmp     loc_130D0
.text:0000000000013210 ; ---------------------------------------------------------------------------
.text:0000000000013210
.text:0000000000013210 loc_13210:                              ; CODE XREF: dirchownmod+189↑j
.text:0000000000013210                 mov     edi, ebp        ; fd
.text:0000000000013212                 call    _fchmod
.text:0000000000013217                 test    eax, eax
.text:0000000000013219                 mov     ebx, eax
.text:000000000001321B                 jz      short loc_131F0
.text:000000000001321D                 nop     dword ptr [rax]
.text:0000000000013220
.text:0000000000013220 loc_13220:                              ; CODE XREF: dirchownmod+59↑j
.text:0000000000013220                                         ; dirchownmod+1AF↑j
.text:0000000000013220                 call    ___errno_location
.text:0000000000013225                 mov     r12, rax
.text:0000000000013228                 mov     r13d, [rax]
.text:000000000001322B                 jmp     loc_130F9
.text:0000000000013230 ; ---------------------------------------------------------------------------
.text:0000000000013230
.text:0000000000013230 loc_13230:                              ; CODE XREF: dirchownmod+F7↑j
.text:0000000000013230                 call    ___stack_chk_fail
.text:0000000000013230 ; } // starts at 13020
.text:0000000000013230 dirchownmod     endp
.text:0000000000013230
.text:0000000000013230 ; ---------------------------------------------------------------------------
.text:0000000000013235                 align 20h
.text:0000000000013240
.text:0000000000013240 ; =============== S U B R O U T I N E =======================================
.text:0000000000013240
.text:0000000000013240
.text:0000000000013240                 public openat_safer
.text:0000000000013240 openat_safer    proc near               ; CODE XREF: opendirat+15↑p
.text:0000000000013240
.text:0000000000013240 var_58          = dword ptr -58h
.text:0000000000013240 var_50          = qword ptr -50h
.text:0000000000013240 var_48          = qword ptr -48h
.text:0000000000013240 var_40          = qword ptr -40h
.text:0000000000013240 var_38          = byte ptr -38h
.text:0000000000013240 var_20          = qword ptr -20h
.text:0000000000013240 arg_0           = byte ptr  8
.text:0000000000013240
.text:0000000000013240 ; __unwind {
.text:0000000000013240                 sub     rsp, 58h
.text:0000000000013244                 mov     [rsp+58h+var_20], rcx
.text:0000000000013249                 xor     ecx, ecx
.text:000000000001324B                 mov     rax, fs:28h
.text:0000000000013254                 mov     [rsp+58h+var_40], rax
.text:0000000000013259                 xor     eax, eax
.text:000000000001325B                 test    dl, 40h
.text:000000000001325E                 jnz     short loc_13288
.text:0000000000013260
.text:0000000000013260 loc_13260:                              ; CODE XREF: openat_safer+67↓j
.text:0000000000013260                 xor     eax, eax
.text:0000000000013262                 call    _openat
.text:0000000000013267                 mov     edi, eax        ; fd
.text:0000000000013269                 call    fd_safer_flag
.text:000000000001326E                 mov     rsi, [rsp+58h+var_40]
.text:0000000000013273                 xor     rsi, fs:28h
.text:000000000001327C                 jnz     short loc_132A9
.text:000000000001327E                 add     rsp, 58h
.text:0000000000013282                 retn
.text:0000000000013282 ; ---------------------------------------------------------------------------
.text:0000000000013283                 align 8
.text:0000000000013288
.text:0000000000013288 loc_13288:                              ; CODE XREF: openat_safer+1E↑j
.text:0000000000013288                 lea     rax, [rsp+58h+arg_0]
.text:000000000001328D                 mov     [rsp+58h+var_58], 18h
.text:0000000000013294                 mov     ecx, dword ptr [rsp+58h+var_20]
.text:0000000000013298                 mov     [rsp+58h+var_50], rax
.text:000000000001329D                 lea     rax, [rsp+58h+var_38]
.text:00000000000132A2                 mov     [rsp+58h+var_48], rax
.text:00000000000132A7                 jmp     short loc_13260
.text:00000000000132A9 ; ---------------------------------------------------------------------------
.text:00000000000132A9
.text:00000000000132A9 loc_132A9:                              ; CODE XREF: openat_safer+3C↑j
.text:00000000000132A9                 call    ___stack_chk_fail
.text:00000000000132A9 ; } // starts at 13240
.text:00000000000132A9 openat_safer    endp
.text:00000000000132A9
.text:00000000000132A9 ; ---------------------------------------------------------------------------
.text:00000000000132AE                 align 10h
.text:00000000000132B0
.text:00000000000132B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000132B0
.text:00000000000132B0
.text:00000000000132B0                 public randint_new
.text:00000000000132B0 randint_new     proc near
.text:00000000000132B0 ; __unwind {
.text:00000000000132B0                 push    rbx
.text:00000000000132B1                 mov     rbx, rdi
.text:00000000000132B4                 mov     edi, 18h
.text:00000000000132B9                 call    xmalloc
.text:00000000000132BE                 mov     [rax], rbx
.text:00000000000132C1                 mov     qword ptr [rax+10h], 0
.text:00000000000132C9                 mov     qword ptr [rax+8], 0
.text:00000000000132D1                 pop     rbx
.text:00000000000132D2                 retn
.text:00000000000132D2 ; } // starts at 132B0
.text:00000000000132D2 randint_new     endp
.text:00000000000132D2
.text:00000000000132D2 ; ---------------------------------------------------------------------------
.text:00000000000132D3                 align 20h
.text:00000000000132E0
.text:00000000000132E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000132E0
.text:00000000000132E0
.text:00000000000132E0                 public randint_all_new
.text:00000000000132E0 randint_all_new proc near               ; CODE XREF: try_tempname_len+7B↑p
.text:00000000000132E0 ; __unwind {
.text:00000000000132E0                 push    rbx
.text:00000000000132E1                 call    randread_new
.text:00000000000132E6                 test    rax, rax
.text:00000000000132E9                 jz      short loc_13310
.text:00000000000132EB                 mov     rbx, rax
.text:00000000000132EE                 mov     edi, 18h
.text:00000000000132F3                 call    xmalloc
.text:00000000000132F8                 mov     [rax], rbx
.text:00000000000132FB                 mov     qword ptr [rax+10h], 0
.text:0000000000013303                 mov     qword ptr [rax+8], 0
.text:000000000001330B                 pop     rbx
.text:000000000001330C                 retn
.text:000000000001330C ; ---------------------------------------------------------------------------
.text:000000000001330D                 align 10h
.text:0000000000013310
.text:0000000000013310 loc_13310:                              ; CODE XREF: randint_all_new+9↑j
.text:0000000000013310                 xor     eax, eax
.text:0000000000013312                 pop     rbx
.text:0000000000013313                 retn
.text:0000000000013313 ; } // starts at 132E0
.text:0000000000013313 randint_all_new endp
.text:0000000000013313
.text:0000000000013313 ; ---------------------------------------------------------------------------
.text:0000000000013314                 align 20h
.text:0000000000013320
.text:0000000000013320 ; =============== S U B R O U T I N E =======================================
.text:0000000000013320
.text:0000000000013320
.text:0000000000013320                 public randint_get_source
.text:0000000000013320 randint_get_source proc near
.text:0000000000013320 ; __unwind {
.text:0000000000013320                 mov     rax, [rdi]
.text:0000000000013323                 retn
.text:0000000000013323 ; } // starts at 13320
.text:0000000000013323 randint_get_source endp
.text:0000000000013323
.text:0000000000013323 ; ---------------------------------------------------------------------------
.text:0000000000013324                 align 10h
.text:0000000000013330
.text:0000000000013330 ; =============== S U B R O U T I N E =======================================
.text:0000000000013330
.text:0000000000013330
.text:0000000000013330                 public randint_genmax
.text:0000000000013330 randint_genmax  proc near               ; CODE XREF: try_tempname_len+C4↑p
.text:0000000000013330
.text:0000000000013330 var_50          = qword ptr -50h
.text:0000000000013330 var_48          = byte ptr -48h
.text:0000000000013330 var_40          = qword ptr -40h
.text:0000000000013330
.text:0000000000013330 ; __unwind {
.text:0000000000013330                 push    r15
.text:0000000000013332                 push    r14
.text:0000000000013334                 lea     r15, [rsi+1]
.text:0000000000013338                 push    r13
.text:000000000001333A                 push    r12
.text:000000000001333C                 mov     r13, rdi
.text:000000000001333F                 push    rbp
.text:0000000000013340                 push    rbx
.text:0000000000013341                 mov     r14, rsi
.text:0000000000013344                 sub     rsp, 28h
.text:0000000000013348                 mov     rbp, [rdi+8]
.text:000000000001334C                 mov     rbx, [rdi+10h]
.text:0000000000013350                 mov     rax, fs:28h
.text:0000000000013359                 mov     [rsp+58h+var_40], rax
.text:000000000001335E                 xor     eax, eax
.text:0000000000013360                 mov     rax, [rdi]
.text:0000000000013363                 lea     r12, [rsp+58h+var_48]
.text:0000000000013368                 mov     [rsp+58h+var_50], rax
.text:000000000001336D                 jmp     short loc_133A5
.text:000000000001336D ; ---------------------------------------------------------------------------
.text:000000000001336F                 align 10h
.text:0000000000013370
.text:0000000000013370 loc_13370:                              ; CODE XREF: randint_genmax+78↓j
.text:0000000000013370                 cmp     rbx, r14
.text:0000000000013373                 jz      loc_133FF
.text:0000000000013379
.text:0000000000013379 loc_13379:                              ; CODE XREF: randint_genmax+C9↓j
.text:0000000000013379                 mov     rax, rbx
.text:000000000001337C                 xor     edx, edx
.text:000000000001337E                 sub     rax, r14
.text:0000000000013381                 div     r15
.text:0000000000013384                 sub     rbx, rdx
.text:0000000000013387                 mov     rdi, rdx
.text:000000000001338A                 mov     rsi, rax
.text:000000000001338D                 xor     edx, edx
.text:000000000001338F                 mov     rax, rbp
.text:0000000000013392                 div     r15
.text:0000000000013395                 cmp     rbp, rbx
.text:0000000000013398                 jbe     loc_13438
.text:000000000001339E                 lea     rbx, [rdi-1]
.text:00000000000133A2                 mov     rbp, rdx
.text:00000000000133A5
.text:00000000000133A5 loc_133A5:                              ; CODE XREF: randint_genmax+3D↑j
.text:00000000000133A5                 cmp     rbx, r14
.text:00000000000133A8                 jnb     short loc_13370
.text:00000000000133AA                 mov     rax, rbx
.text:00000000000133AD                 xor     edx, edx
.text:00000000000133AF                 nop
.text:00000000000133B0
.text:00000000000133B0 loc_133B0:                              ; CODE XREF: randint_genmax+91↓j
.text:00000000000133B0                 shl     rax, 8
.text:00000000000133B4                 add     rdx, 1
.text:00000000000133B8                 add     rax, 0FFh
.text:00000000000133BE                 cmp     r14, rax
.text:00000000000133C1                 ja      short loc_133B0
.text:00000000000133C3                 mov     rdi, [rsp+58h+var_50]
.text:00000000000133C8                 mov     rsi, r12
.text:00000000000133CB                 call    randread
.text:00000000000133D0                 mov     rax, r12
.text:00000000000133D3                 nop     dword ptr [rax+rax+00h]
.text:00000000000133D8
.text:00000000000133D8 loc_133D8:                              ; CODE XREF: randint_genmax+C4↓j
.text:00000000000133D8                 movzx   edx, byte ptr [rax]
.text:00000000000133DB                 shl     rbx, 8
.text:00000000000133DF                 shl     rbp, 8
.text:00000000000133E3                 add     rbx, 0FFh
.text:00000000000133EA                 add     rax, 1
.text:00000000000133EE                 add     rbp, rdx
.text:00000000000133F1                 cmp     r14, rbx
.text:00000000000133F4                 ja      short loc_133D8
.text:00000000000133F6                 cmp     rbx, r14
.text:00000000000133F9                 jnz     loc_13379
.text:00000000000133FF
.text:00000000000133FF loc_133FF:                              ; CODE XREF: randint_genmax+43↑j
.text:00000000000133FF                 mov     qword ptr [r13+10h], 0
.text:0000000000013407                 mov     qword ptr [r13+8], 0
.text:000000000001340F
.text:000000000001340F loc_1340F:                              ; CODE XREF: randint_genmax+113↓j
.text:000000000001340F                 mov     rcx, [rsp+58h+var_40]
.text:0000000000013414                 xor     rcx, fs:28h
.text:000000000001341D                 mov     rax, rbp
.text:0000000000013420                 jnz     short loc_13445
.text:0000000000013422                 add     rsp, 28h
.text:0000000000013426                 pop     rbx
.text:0000000000013427                 pop     rbp
.text:0000000000013428                 pop     r12
.text:000000000001342A                 pop     r13
.text:000000000001342C                 pop     r14
.text:000000000001342E                 pop     r15
.text:0000000000013430                 retn
.text:0000000000013430 ; ---------------------------------------------------------------------------
.text:0000000000013431                 align 8
.text:0000000000013438
.text:0000000000013438 loc_13438:                              ; CODE XREF: randint_genmax+68↑j
.text:0000000000013438                 mov     [r13+8], rax
.text:000000000001343C                 mov     [r13+10h], rsi
.text:0000000000013440                 mov     rbp, rdx
.text:0000000000013443                 jmp     short loc_1340F
.text:0000000000013445 ; ---------------------------------------------------------------------------
.text:0000000000013445
.text:0000000000013445 loc_13445:                              ; CODE XREF: randint_genmax+F0↑j
.text:0000000000013445                 call    ___stack_chk_fail
.text:0000000000013445 ; } // starts at 13330
.text:0000000000013445 randint_genmax  endp
.text:0000000000013445
.text:0000000000013445 ; ---------------------------------------------------------------------------
.text:000000000001344A                 align 10h
.text:0000000000013450
.text:0000000000013450 ; =============== S U B R O U T I N E =======================================
.text:0000000000013450
.text:0000000000013450
.text:0000000000013450 ; __int64 __fastcall randint_free(void *ptr)
.text:0000000000013450                 public randint_free
.text:0000000000013450 randint_free    proc near
.text:0000000000013450 ; __unwind {
.text:0000000000013450                 push    rbx
.text:0000000000013451                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013458                 mov     rbx, rdi
.text:000000000001345B                 mov     esi, 18h
.text:0000000000013460                 call    ___explicit_bzero_chk
.text:0000000000013465                 mov     rdi, rbx        ; ptr
.text:0000000000013468                 pop     rbx
.text:0000000000013469                 jmp     free
.text:0000000000013469 ; } // starts at 13450
.text:0000000000013469 randint_free    endp
.text:0000000000013469
.text:0000000000013469 ; ---------------------------------------------------------------------------
.text:000000000001346E                 align 10h
.text:0000000000013470
.text:0000000000013470 ; =============== S U B R O U T I N E =======================================
.text:0000000000013470
.text:0000000000013470
.text:0000000000013470 ; __int64 __fastcall randint_all_free(void *ptr)
.text:0000000000013470                 public randint_all_free
.text:0000000000013470 randint_all_free proc near              ; CODE XREF: try_tempname_len+102↑p
.text:0000000000013470                                         ; try_tempname_len+130↑p
.text:0000000000013470 ; __unwind {
.text:0000000000013470                 push    r13
.text:0000000000013472                 push    r12
.text:0000000000013474                 push    rbp
.text:0000000000013475                 push    rbx
.text:0000000000013476                 mov     rbx, rdi
.text:0000000000013479                 sub     rsp, 8
.text:000000000001347D                 mov     rdi, [rdi]      ; ptr
.text:0000000000013480                 call    randread_free
.text:0000000000013485                 mov     r12d, eax
.text:0000000000013488                 call    ___errno_location
.text:000000000001348D                 mov     r13d, [rax]
.text:0000000000013490                 mov     rdi, rbx
.text:0000000000013493                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000001349A                 mov     esi, 18h
.text:000000000001349F                 mov     rbp, rax
.text:00000000000134A2                 call    ___explicit_bzero_chk
.text:00000000000134A7                 mov     rdi, rbx        ; ptr
.text:00000000000134AA                 call    free
.text:00000000000134AF                 mov     [rbp+0], r13d
.text:00000000000134B3                 add     rsp, 8
.text:00000000000134B7                 mov     eax, r12d
.text:00000000000134BA                 pop     rbx
.text:00000000000134BB                 pop     rbp
.text:00000000000134BC                 pop     r12
.text:00000000000134BE                 pop     r13
.text:00000000000134C0                 retn
.text:00000000000134C0 ; } // starts at 13470
.text:00000000000134C0 randint_all_free endp
.text:00000000000134C0
.text:00000000000134C0 ; ---------------------------------------------------------------------------
.text:00000000000134C1                 align 10h
.text:00000000000134D0
.text:00000000000134D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000134D0
.text:00000000000134D0 ; Attributes: noreturn
.text:00000000000134D0
.text:00000000000134D0 randread_error  proc near               ; DATA XREF: randread_new+5A↓o
.text:00000000000134D0                                         ; randread_new+C4↓o ...
.text:00000000000134D0 ; __unwind {
.text:00000000000134D0                 push    rbp
.text:00000000000134D1                 push    rbx
.text:00000000000134D2                 sub     rsp, 8
.text:00000000000134D6                 test    rdi, rdi
.text:00000000000134D9                 jz      short loc_13518
.text:00000000000134DB                 call    quote
.text:00000000000134E0                 mov     rbp, rax
.text:00000000000134E3                 call    ___errno_location
.text:00000000000134E8                 cmp     dword ptr [rax], 0
.text:00000000000134EB                 mov     rbx, rax
.text:00000000000134EE                 mov     edx, 5          ; category
.text:00000000000134F3                 jz      short loc_1351D
.text:00000000000134F5                 lea     rsi, aSReadError ; "%s: read error"
.text:00000000000134FC                 xor     edi, edi        ; domainname
.text:00000000000134FE                 call    _dcgettext
.text:0000000000013503
.text:0000000000013503 loc_13503:                              ; CODE XREF: randread_error+5B↓j
.text:0000000000013503                 mov     edi, cs:exit_failure ; status
.text:0000000000013509                 mov     esi, [rbx]      ; errnum
.text:000000000001350B                 mov     rdx, rax        ; format
.text:000000000001350E                 mov     rcx, rbp
.text:0000000000013511                 xor     eax, eax
.text:0000000000013513                 call    _error
.text:0000000000013518
.text:0000000000013518 loc_13518:                              ; CODE XREF: randread_error+9↑j
.text:0000000000013518                 call    _abort
.text:000000000001351D ; ---------------------------------------------------------------------------
.text:000000000001351D
.text:000000000001351D loc_1351D:                              ; CODE XREF: randread_error+23↑j
.text:000000000001351D                 lea     rsi, aSEndOfFile ; "%s: end of file"
.text:0000000000013524                 xor     edi, edi        ; domainname
.text:0000000000013526                 call    _dcgettext
.text:000000000001352B                 jmp     short loc_13503
.text:000000000001352B ; } // starts at 134D0
.text:000000000001352B randread_error  endp
.text:000000000001352B
.text:000000000001352B ; ---------------------------------------------------------------------------
.text:000000000001352D                 align 10h
.text:0000000000013530
.text:0000000000013530 ; =============== S U B R O U T I N E =======================================
.text:0000000000013530
.text:0000000000013530
.text:0000000000013530                 public randread_new
.text:0000000000013530 randread_new    proc near               ; CODE XREF: randint_all_new+1↑p
.text:0000000000013530
.text:0000000000013530 var_68          = qword ptr -68h
.text:0000000000013530 var_60          = qword ptr -60h
.text:0000000000013530 tv              = timeval ptr -58h
.text:0000000000013530 var_40          = qword ptr -40h
.text:0000000000013530
.text:0000000000013530 ; __unwind {
.text:0000000000013530                 push    r15
.text:0000000000013532                 push    r14
.text:0000000000013534                 push    r13
.text:0000000000013536                 push    r12
.text:0000000000013538                 push    rbp
.text:0000000000013539                 push    rbx
.text:000000000001353A                 sub     rsp, 38h
.text:000000000001353E                 mov     rax, fs:28h
.text:0000000000013547                 mov     [rsp+68h+var_40], rax
.text:000000000001354C                 xor     eax, eax
.text:000000000001354E                 test    rsi, rsi
.text:0000000000013551                 jz      loc_13678
.text:0000000000013557                 test    rdi, rdi
.text:000000000001355A                 mov     r12, rdi
.text:000000000001355D                 mov     rbp, rsi
.text:0000000000013560                 jz      short loc_135E0
.text:0000000000013562                 lea     rsi, aRb        ; "rb"
.text:0000000000013569                 call    fopen_safer
.text:000000000001356E                 test    rax, rax
.text:0000000000013571                 mov     r13, rax
.text:0000000000013574                 jz      loc_13778
.text:000000000001357A                 mov     edi, 1038h
.text:000000000001357F                 call    xmalloc
.text:0000000000013584                 mov     rbx, rax
.text:0000000000013587                 mov     [rax], r13
.text:000000000001358A                 lea     rax, randread_error
.text:0000000000013591                 cmp     rbp, 1000h
.text:0000000000013598                 mov     ecx, 1000h
.text:000000000001359D                 lea     rsi, [rbx+18h]  ; buf
.text:00000000000135A1                 cmovbe  rcx, rbp        ; n
.text:00000000000135A5                 mov     [rbx+8], rax
.text:00000000000135A9                 mov     [rbx+10h], r12
.text:00000000000135AD                 xor     edx, edx        ; modes
.text:00000000000135AF                 mov     rdi, r13        ; stream
.text:00000000000135B2                 call    _setvbuf
.text:00000000000135B7
.text:00000000000135B7 loc_135B7:                              ; CODE XREF: randread_new+13D↓j
.text:00000000000135B7                                         ; randread_new+16F↓j ...
.text:00000000000135B7                 mov     rdx, [rsp+68h+var_40]
.text:00000000000135BC                 xor     rdx, fs:28h
.text:00000000000135C5                 mov     rax, rbx
.text:00000000000135C8                 jnz     loc_1377F
.text:00000000000135CE                 add     rsp, 38h
.text:00000000000135D2                 pop     rbx
.text:00000000000135D3                 pop     rbp
.text:00000000000135D4                 pop     r12
.text:00000000000135D6                 pop     r13
.text:00000000000135D8                 pop     r14
.text:00000000000135DA                 pop     r15
.text:00000000000135DC                 retn
.text:00000000000135DC ; ---------------------------------------------------------------------------
.text:00000000000135DD                 align 20h
.text:00000000000135E0
.text:00000000000135E0 loc_135E0:                              ; CODE XREF: randread_new+30↑j
.text:00000000000135E0                 mov     edi, 1038h
.text:00000000000135E5                 call    xmalloc
.text:00000000000135EA                 mov     rbx, rax
.text:00000000000135ED                 mov     qword ptr [rax], 0
.text:00000000000135F4                 lea     rax, randread_error
.text:00000000000135FB                 lea     rdi, aDevUrandom ; "/dev/urandom"
.text:0000000000013602                 xor     esi, esi        ; oflag
.text:0000000000013604                 mov     qword ptr [rbx+10h], 0
.text:000000000001360C                 mov     [rbx+8], rax
.text:0000000000013610                 mov     qword ptr [rbx+18h], 0
.text:0000000000013618                 xor     eax, eax
.text:000000000001361A                 call    _open
.text:000000000001361F                 test    eax, eax
.text:0000000000013621                 lea     r13, [rbx+20h]
.text:0000000000013625                 mov     r15d, eax
.text:0000000000013628                 js      short loc_136A8
.text:000000000001362A                 cmp     rbp, 800h
.text:0000000000013631                 mov     rdx, rbp
.text:0000000000013634                 mov     r14d, 800h
.text:000000000001363A                 cmova   rdx, r14
.text:000000000001363E                 mov     ecx, 1018h
.text:0000000000013643                 mov     rsi, r13
.text:0000000000013646                 mov     edi, eax
.text:0000000000013648                 call    ___read_chk
.text:000000000001364D                 mov     edi, r15d       ; fd
.text:0000000000013650                 mov     rbp, rax
.text:0000000000013653                 call    _close
.text:0000000000013658                 cmp     rbp, 7FFh
.text:000000000001365F                 jle     loc_13784
.text:0000000000013665
.text:0000000000013665 loc_13665:                              ; CODE XREF: randread_new+1F6↓j
.text:0000000000013665                                         ; randread_new+223↓j ...
.text:0000000000013665                 mov     rdi, r13
.text:0000000000013668                 call    isaac_seed
.text:000000000001366D                 jmp     loc_135B7
.text:000000000001366D ; ---------------------------------------------------------------------------
.text:0000000000013672                 align 8
.text:0000000000013678
.text:0000000000013678 loc_13678:                              ; CODE XREF: randread_new+21↑j
.text:0000000000013678                 mov     edi, 1038h
.text:000000000001367D                 call    xmalloc
.text:0000000000013682                 mov     rbx, rax
.text:0000000000013685                 mov     qword ptr [rax], 0
.text:000000000001368C                 lea     rax, randread_error
.text:0000000000013693                 mov     qword ptr [rbx+10h], 0
.text:000000000001369B                 mov     [rbx+8], rax
.text:000000000001369F                 jmp     loc_135B7
.text:000000000001369F ; ---------------------------------------------------------------------------
.text:00000000000136A4                 align 8
.text:00000000000136A8
.text:00000000000136A8 loc_136A8:                              ; CODE XREF: randread_new+F8↑j
.text:00000000000136A8                 lea     r12, [rsp+68h+tv]
.text:00000000000136AD                 xor     esi, esi        ; tz
.text:00000000000136AF                 mov     r14d, 18h
.text:00000000000136B5                 mov     rdi, r12        ; tv
.text:00000000000136B8                 call    _gettimeofday
.text:00000000000136BD                 movdqa  xmm0, xmmword ptr [rsp+68h+tv.tv_sec]
.text:00000000000136C3                 movups  xmmword ptr [rbx+20h], xmm0
.text:00000000000136C7                 call    _getpid
.text:00000000000136CC                 mov     [rbx+30h], eax
.text:00000000000136CF                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:00000000000136D3                 call    _getppid
.text:00000000000136D8                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:00000000000136DC                 mov     [rbx+34h], eax
.text:00000000000136DF
.text:00000000000136DF loc_136DF:                              ; CODE XREF: randread_new+324↓j
.text:00000000000136DF                 mov     ebp, 800h
.text:00000000000136E4                 mov     eax, 4
.text:00000000000136E9                 sub     rbp, r14
.text:00000000000136EC                 cmp     rbp, 4
.text:00000000000136F0                 cmova   rbp, rax
.text:00000000000136F4                 call    _getuid
.text:00000000000136F9                 test    ebp, ebp
.text:00000000000136FB                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:00000000000136FF                 lea     rcx, [r13+r14+0]
.text:0000000000013704                 mov     esi, ebp
.text:0000000000013706                 jz      short loc_1371C
.text:0000000000013708                 xor     eax, eax
.text:000000000001370A
.text:000000000001370A loc_1370A:                              ; CODE XREF: randread_new+1EA↓j
.text:000000000001370A                 mov     edx, eax
.text:000000000001370C                 add     eax, 1
.text:000000000001370F                 movzx   edi, byte ptr [r12+rdx]
.text:0000000000013714                 cmp     eax, esi
.text:0000000000013716                 mov     [rcx+rdx], dil
.text:000000000001371A                 jb      short loc_1370A
.text:000000000001371C
.text:000000000001371C loc_1371C:                              ; CODE XREF: randread_new+1D6↑j
.text:000000000001371C                 add     rbp, r14
.text:000000000001371F                 cmp     rbp, 7FFh
.text:0000000000013726                 ja      loc_13665
.text:000000000001372C                 call    _getgid
.text:0000000000013731                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000013735                 mov     eax, 800h
.text:000000000001373A                 mov     edx, 4
.text:000000000001373F                 sub     rax, rbp
.text:0000000000013742                 lea     rcx, [r13+rbp+0]
.text:0000000000013747                 cmp     rax, 4
.text:000000000001374B                 cmova   rax, rdx
.text:000000000001374F                 test    eax, eax
.text:0000000000013751                 mov     esi, eax
.text:0000000000013753                 jz      loc_13665
.text:0000000000013759                 xor     eax, eax
.text:000000000001375B
.text:000000000001375B loc_1375B:                              ; CODE XREF: randread_new+23B↓j
.text:000000000001375B                 mov     edx, eax
.text:000000000001375D                 add     eax, 1
.text:0000000000013760                 movzx   edi, byte ptr [r12+rdx]
.text:0000000000013765                 cmp     eax, esi
.text:0000000000013767                 mov     [rcx+rdx], dil
.text:000000000001376B                 jb      short loc_1375B
.text:000000000001376D                 jmp     loc_13665
.text:000000000001376D ; ---------------------------------------------------------------------------
.text:0000000000013772                 align 8
.text:0000000000013778
.text:0000000000013778 loc_13778:                              ; CODE XREF: randread_new+44↑j
.text:0000000000013778                 xor     ebx, ebx
.text:000000000001377A                 jmp     loc_135B7
.text:000000000001377F ; ---------------------------------------------------------------------------
.text:000000000001377F
.text:000000000001377F loc_1377F:                              ; CODE XREF: randread_new+98↑j
.text:000000000001377F                 call    ___stack_chk_fail
.text:0000000000013784 ; ---------------------------------------------------------------------------
.text:0000000000013784
.text:0000000000013784 loc_13784:                              ; CODE XREF: randread_new+12F↑j
.text:0000000000013784                 test    rbp, rbp
.text:0000000000013787                 mov     r15, r14
.text:000000000001378A                 mov     eax, 10h
.text:000000000001378F                 cmovs   rbp, r12
.text:0000000000013793                 lea     r12, [rsp+68h+tv]
.text:0000000000013798                 sub     r15, rbp
.text:000000000001379B                 cmp     r15, 10h
.text:000000000001379F                 mov     rdi, r12        ; tv
.text:00000000000137A2                 cmova   r15, rax
.text:00000000000137A6                 xor     esi, esi        ; tz
.text:00000000000137A8                 call    _gettimeofday
.text:00000000000137AD                 lea     rax, [r13+rbp+0]
.text:00000000000137B2                 add     rbp, r15
.text:00000000000137B5                 mov     ecx, r15d
.text:00000000000137B8                 cmp     rbp, 7FFh
.text:00000000000137BF                 mov     rsi, r12
.text:00000000000137C2                 mov     rdi, rax
.text:00000000000137C5                 rep movsb
.text:00000000000137C7                 ja      loc_13665
.text:00000000000137CD                 mov     r15, r14
.text:00000000000137D0                 mov     r8d, 4
.text:00000000000137D6                 sub     r15, rbp
.text:00000000000137D9                 mov     [rsp+68h+var_60], r8
.text:00000000000137DE                 cmp     r15, 4
.text:00000000000137E2                 cmova   r15, r8
.text:00000000000137E6                 lea     rdx, [rbp+r15+0]
.text:00000000000137EB                 add     rbp, r13
.text:00000000000137EE                 mov     [rsp+68h+var_68], rdx
.text:00000000000137F2                 call    _getpid
.text:00000000000137F7                 mov     rdx, [rsp+68h+var_68]
.text:00000000000137FB                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:00000000000137FF                 mov     ecx, r15d
.text:0000000000013802                 mov     rdi, rbp
.text:0000000000013805                 mov     rsi, r12
.text:0000000000013808                 mov     r8, [rsp+68h+var_60]
.text:000000000001380D                 rep movsb
.text:000000000001380F                 cmp     rdx, 7FFh
.text:0000000000013816                 jg      loc_13665
.text:000000000001381C                 sub     r14, rdx
.text:000000000001381F                 cmp     r14, 4
.text:0000000000013823                 cmova   r14, r8
.text:0000000000013827                 call    _getppid
.text:000000000001382C                 mov     rdx, [rsp+68h+var_68]
.text:0000000000013830                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000013834                 mov     ecx, r14d
.text:0000000000013837                 mov     rsi, r12
.text:000000000001383A                 lea     rax, [r13+rdx+0]
.text:000000000001383F                 add     r14, rdx
.text:0000000000013842                 cmp     r14, 7FFh
.text:0000000000013849                 mov     rdi, rax
.text:000000000001384C                 rep movsb
.text:000000000001384E                 ja      loc_13665
.text:0000000000013854                 jmp     loc_136DF
.text:0000000000013854 ; } // starts at 13530
.text:0000000000013854 randread_new    endp
.text:0000000000013854
.text:0000000000013854 ; ---------------------------------------------------------------------------
.text:0000000000013859                 align 20h
.text:0000000000013860
.text:0000000000013860 ; =============== S U B R O U T I N E =======================================
.text:0000000000013860
.text:0000000000013860
.text:0000000000013860                 public randread_set_handler
.text:0000000000013860 randread_set_handler proc near
.text:0000000000013860 ; __unwind {
.text:0000000000013860                 mov     [rdi+8], rsi
.text:0000000000013864                 retn
.text:0000000000013864 ; } // starts at 13860
.text:0000000000013864 randread_set_handler endp
.text:0000000000013864
.text:0000000000013864 ; ---------------------------------------------------------------------------
.text:0000000000013865                 align 10h
.text:0000000000013870
.text:0000000000013870 ; =============== S U B R O U T I N E =======================================
.text:0000000000013870
.text:0000000000013870
.text:0000000000013870                 public randread_set_handler_arg
.text:0000000000013870 randread_set_handler_arg proc near
.text:0000000000013870 ; __unwind {
.text:0000000000013870                 mov     [rdi+10h], rsi
.text:0000000000013874                 retn
.text:0000000000013874 ; } // starts at 13870
.text:0000000000013874 randread_set_handler_arg endp
.text:0000000000013874
.text:0000000000013874 ; ---------------------------------------------------------------------------
.text:0000000000013875                 align 20h
.text:0000000000013880
.text:0000000000013880 ; =============== S U B R O U T I N E =======================================
.text:0000000000013880
.text:0000000000013880
.text:0000000000013880                 public randread
.text:0000000000013880 randread        proc near               ; CODE XREF: randint_genmax+9B↑p
.text:0000000000013880
.text:0000000000013880 src             = qword ptr -40h
.text:0000000000013880
.text:0000000000013880 ; __unwind {
.text:0000000000013880                 push    r15
.text:0000000000013882                 push    r14
.text:0000000000013884                 push    r13
.text:0000000000013886                 push    r12
.text:0000000000013888                 mov     r12, rdi
.text:000000000001388B                 push    rbp
.text:000000000001388C                 push    rbx
.text:000000000001388D                 mov     rbp, rdx
.text:0000000000013890                 mov     rbx, rsi
.text:0000000000013893                 sub     rsp, 18h
.text:0000000000013897                 mov     rcx, [rdi]
.text:000000000001389A                 test    rcx, rcx
.text:000000000001389D                 mov     [rsp+48h+src], rcx
.text:00000000000138A2                 jz      short loc_13908
.text:00000000000138A4                 call    ___errno_location
.text:00000000000138A9                 mov     rcx, [rsp+48h+src]
.text:00000000000138AE                 mov     r13, rax
.text:00000000000138B1                 jmp     short loc_138D6
.text:00000000000138B1 ; ---------------------------------------------------------------------------
.text:00000000000138B3                 align 8
.text:00000000000138B8
.text:00000000000138B8 loc_138B8:                              ; CODE XREF: randread+70↓j
.text:00000000000138B8                 mov     rax, [r12]
.text:00000000000138BC                 mov     rdi, [r12+10h]
.text:00000000000138C1                 mov     eax, [rax]
.text:00000000000138C3                 and     eax, 20h
.text:00000000000138C6                 cmovnz  eax, edx
.text:00000000000138C9                 mov     [r13+0], eax
.text:00000000000138CD                 call    qword ptr [r12+8]
.text:00000000000138D2                 mov     rcx, [r12]      ; stream
.text:00000000000138D6
.text:00000000000138D6 loc_138D6:                              ; CODE XREF: randread+31↑j
.text:00000000000138D6                 mov     rdx, rbp        ; n
.text:00000000000138D9                 mov     rdi, rbx        ; ptr
.text:00000000000138DC                 mov     esi, 1          ; size
.text:00000000000138E1                 call    _fread_unlocked
.text:00000000000138E6                 add     rbx, rax
.text:00000000000138E9                 sub     rbp, rax
.text:00000000000138EC                 mov     edx, [r13+0]
.text:00000000000138F0                 jnz     short loc_138B8
.text:00000000000138F2
.text:00000000000138F2 loc_138F2:                              ; CODE XREF: randread+16E↓j
.text:00000000000138F2                 add     rsp, 18h
.text:00000000000138F6                 pop     rbx
.text:00000000000138F7                 pop     rbp
.text:00000000000138F8                 pop     r12
.text:00000000000138FA                 pop     r13
.text:00000000000138FC                 pop     r14
.text:00000000000138FE                 pop     r15
.text:0000000000013900                 retn
.text:0000000000013900 ; ---------------------------------------------------------------------------
.text:0000000000013901                 align 8
.text:0000000000013908
.text:0000000000013908 loc_13908:                              ; CODE XREF: randread+22↑j
.text:0000000000013908                 mov     r14, [rdi+18h]
.text:000000000001390C                 lea     rax, [rdi+838h]
.text:0000000000013913                 lea     r13, [rdi+20h]
.text:0000000000013917                 mov     [rsp+48h+src], rax
.text:000000000001391C                 cmp     rdx, r14
.text:000000000001391F                 jbe     loc_13A02
.text:0000000000013925
.text:0000000000013925 loc_13925:                              ; CODE XREF: randread+14A↓j
.text:0000000000013925                 mov     esi, 800h
.text:000000000001392A                 mov     rdi, rbx        ; dest
.text:000000000001392D                 mov     rdx, r14        ; n
.text:0000000000013930                 sub     rsi, r14
.text:0000000000013933                 add     rsi, [rsp+48h+src] ; src
.text:0000000000013938                 add     rbx, r14
.text:000000000001393B                 sub     rbp, r14
.text:000000000001393E                 call    _memcpy
.text:0000000000013943                 test    bl, 7
.text:0000000000013946                 jnz     short loc_139B0
.text:0000000000013948                 cmp     rbp, 7FFh
.text:000000000001394F                 jbe     loc_139F3
.text:0000000000013955                 lea     r15, [rbp-800h]
.text:000000000001395C                 mov     r14, r15
.text:000000000001395F                 and     r14d, 7FFh
.text:0000000000013966                 jmp     short loc_1397C
.text:0000000000013966 ; ---------------------------------------------------------------------------
.text:0000000000013968                 align 10h
.text:0000000000013970
.text:0000000000013970 loc_13970:                              ; CODE XREF: randread+114↓j
.text:0000000000013970                 cmp     r15, r14
.text:0000000000013973                 jz      short loc_139B0
.text:0000000000013975                 sub     r15, 800h
.text:000000000001397C
.text:000000000001397C loc_1397C:                              ; CODE XREF: randread+E6↑j
.text:000000000001397C                 mov     rsi, rbx
.text:000000000001397F                 mov     rdi, r13
.text:0000000000013982                 add     rbx, 800h
.text:0000000000013989                 call    isaac_refill
.text:000000000001398E                 test    r15, r15
.text:0000000000013991                 mov     rbp, r15
.text:0000000000013994                 jnz     short loc_13970
.text:0000000000013996                 mov     qword ptr [r12+18h], 0
.text:000000000001399F                 add     rsp, 18h
.text:00000000000139A3                 pop     rbx
.text:00000000000139A4                 pop     rbp
.text:00000000000139A5                 pop     r12
.text:00000000000139A7                 pop     r13
.text:00000000000139A9                 pop     r14
.text:00000000000139AB                 pop     r15
.text:00000000000139AD                 retn
.text:00000000000139AD ; ---------------------------------------------------------------------------
.text:00000000000139AE                 align 10h
.text:00000000000139B0
.text:00000000000139B0 loc_139B0:                              ; CODE XREF: randread+C6↑j
.text:00000000000139B0                                         ; randread+F3↑j
.text:00000000000139B0                 mov     rsi, [rsp+48h+src]
.text:00000000000139B5                 mov     rdi, r13
.text:00000000000139B8                 mov     r14d, 800h
.text:00000000000139BE                 call    isaac_refill
.text:00000000000139C3                 cmp     rbp, 800h
.text:00000000000139CA                 ja      loc_13925
.text:00000000000139D0
.text:00000000000139D0 loc_139D0:                              ; CODE XREF: randread+180↓j
.text:00000000000139D0                 mov     r14d, 800h
.text:00000000000139D6
.text:00000000000139D6 loc_139D6:                              ; CODE XREF: randread+194↓j
.text:00000000000139D6                 mov     rsi, [rsp+48h+src] ; src
.text:00000000000139DB                 mov     rdx, rbp        ; n
.text:00000000000139DE                 mov     rdi, rbx        ; dest
.text:00000000000139E1                 sub     r14, rbp
.text:00000000000139E4                 call    _memcpy
.text:00000000000139E9                 mov     [r12+18h], r14
.text:00000000000139EE                 jmp     loc_138F2
.text:00000000000139F3 ; ---------------------------------------------------------------------------
.text:00000000000139F3
.text:00000000000139F3 loc_139F3:                              ; CODE XREF: randread+CF↑j
.text:00000000000139F3                 mov     rsi, [rsp+48h+src]
.text:00000000000139F8                 mov     rdi, r13
.text:00000000000139FB                 call    isaac_refill
.text:0000000000013A00                 jmp     short loc_139D0
.text:0000000000013A02 ; ---------------------------------------------------------------------------
.text:0000000000013A02
.text:0000000000013A02 loc_13A02:                              ; CODE XREF: randread+9F↑j
.text:0000000000013A02                 mov     r15, rax
.text:0000000000013A05                 sub     r15, r14
.text:0000000000013A08                 lea     rax, [r15+800h]
.text:0000000000013A0F                 mov     [rsp+48h+src], rax
.text:0000000000013A14                 jmp     short loc_139D6
.text:0000000000013A14 ; } // starts at 13880
.text:0000000000013A14 randread        endp
.text:0000000000013A14
.text:0000000000013A14 ; ---------------------------------------------------------------------------
.text:0000000000013A16                 align 20h
.text:0000000000013A20
.text:0000000000013A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000013A20
.text:0000000000013A20
.text:0000000000013A20 ; __int64 __fastcall randread_free(void *ptr)
.text:0000000000013A20                 public randread_free
.text:0000000000013A20 randread_free   proc near               ; CODE XREF: randint_all_free+10↑p
.text:0000000000013A20 ; __unwind {
.text:0000000000013A20                 push    rbp
.text:0000000000013A21                 push    rbx
.text:0000000000013A22                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013A29                 mov     rbx, rdi
.text:0000000000013A2C                 mov     esi, 1038h
.text:0000000000013A31                 sub     rsp, 8
.text:0000000000013A35                 mov     rbp, [rdi]
.text:0000000000013A38                 call    ___explicit_bzero_chk
.text:0000000000013A3D                 mov     rdi, rbx        ; ptr
.text:0000000000013A40                 call    free
.text:0000000000013A45                 test    rbp, rbp
.text:0000000000013A48                 jz      short loc_13A60
.text:0000000000013A4A                 add     rsp, 8
.text:0000000000013A4E                 mov     rdi, rbp        ; stream
.text:0000000000013A51                 pop     rbx
.text:0000000000013A52                 pop     rbp
.text:0000000000013A53                 jmp     rpl_fclose
.text:0000000000013A53 ; ---------------------------------------------------------------------------
.text:0000000000013A58                 align 20h
.text:0000000000013A60
.text:0000000000013A60 loc_13A60:                              ; CODE XREF: randread_free+28↑j
.text:0000000000013A60                 add     rsp, 8
.text:0000000000013A64                 xor     eax, eax
.text:0000000000013A66                 pop     rbx
.text:0000000000013A67                 pop     rbp
.text:0000000000013A68                 retn
.text:0000000000013A68 ; } // starts at 13A20
.text:0000000000013A68 randread_free   endp
.text:0000000000013A68
.text:0000000000013A68 ; ---------------------------------------------------------------------------
.text:0000000000013A69                 align 10h
.text:0000000000013A70
.text:0000000000013A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000013A70
.text:0000000000013A70
.text:0000000000013A70                 public isaac_refill
.text:0000000000013A70 isaac_refill    proc near               ; CODE XREF: randread+109↑p
.text:0000000000013A70                                         ; randread+13E↑p ...
.text:0000000000013A70 ; __unwind {
.text:0000000000013A70                 mov     rax, [rdi+810h]
.text:0000000000013A77                 mov     rdx, [rdi+800h]
.text:0000000000013A7E                 lea     r9, [rdi+400h]
.text:0000000000013A85                 lea     rcx, [rax+1]
.text:0000000000013A89                 mov     rax, rdi
.text:0000000000013A8C                 mov     [rdi+810h], rcx
.text:0000000000013A93                 add     rcx, [rdi+808h]
.text:0000000000013A9A                 nop     word ptr [rax+rax+00h]
.text:0000000000013AA0
.text:0000000000013AA0 loc_13AA0:                              ; CODE XREF: isaac_refill+149↓j
.text:0000000000013AA0                 mov     r8, rdx
.text:0000000000013AA3                 shl     r8, 15h
.text:0000000000013AA7                 xor     rdx, r8
.text:0000000000013AAA                 mov     r8, [rax]
.text:0000000000013AAD                 not     rdx
.text:0000000000013AB0                 add     rdx, [rax+400h]
.text:0000000000013AB7                 mov     r10, r8
.text:0000000000013ABA                 and     r10d, 7F8h
.text:0000000000013AC1                 mov     r11, [rdi+r10]
.text:0000000000013AC5                 mov     r10, rdx
.text:0000000000013AC8                 shr     r10, 5
.text:0000000000013ACC                 add     r11, rdx
.text:0000000000013ACF                 xor     rdx, r10
.text:0000000000013AD2                 add     rcx, r11
.text:0000000000013AD5                 mov     [rax], rcx
.text:0000000000013AD8                 shr     rcx, 8
.text:0000000000013ADC                 and     ecx, 7F8h
.text:0000000000013AE2                 mov     r11, [rdi+rcx]
.text:0000000000013AE6                 add     r11, r8
.text:0000000000013AE9                 mov     [rsi], r11
.text:0000000000013AEC                 add     rdx, [rax+408h]
.text:0000000000013AF3                 mov     rcx, [rax+8]
.text:0000000000013AF7                 mov     r10, rdx
.text:0000000000013AFA                 mov     rdx, rcx
.text:0000000000013AFD                 and     edx, 7F8h
.text:0000000000013B03                 mov     r8, [rdi+rdx]
.text:0000000000013B07                 mov     rdx, r10
.text:0000000000013B0A                 shl     rdx, 0Ch
.text:0000000000013B0E                 xor     rdx, r10
.text:0000000000013B11                 add     r8, r10
.text:0000000000013B14                 add     r8, r11
.text:0000000000013B17                 mov     [rax+8], r8
.text:0000000000013B1B                 shr     r8, 8
.text:0000000000013B1F                 and     r8d, 7F8h
.text:0000000000013B26                 add     rcx, [rdi+r8]
.text:0000000000013B2A                 mov     [rsi+8], rcx
.text:0000000000013B2E                 mov     r8, [rax+10h]
.text:0000000000013B32                 mov     r11, rcx
.text:0000000000013B35                 add     rdx, [rax+410h]
.text:0000000000013B3C                 mov     rcx, r8
.text:0000000000013B3F                 and     ecx, 7F8h
.text:0000000000013B45                 mov     r10, [rdi+rcx]
.text:0000000000013B49                 add     r10, rdx
.text:0000000000013B4C                 mov     rcx, r10
.text:0000000000013B4F                 add     rcx, r11
.text:0000000000013B52                 mov     [rax+10h], rcx
.text:0000000000013B56                 shr     rcx, 8
.text:0000000000013B5A                 and     ecx, 7F8h
.text:0000000000013B60                 mov     r10, [rdi+rcx]
.text:0000000000013B64                 mov     rcx, rdx
.text:0000000000013B67                 shr     rcx, 21h
.text:0000000000013B6B                 xor     rdx, rcx
.text:0000000000013B6E                 add     r10, r8
.text:0000000000013B71                 mov     [rsi+10h], r10
.text:0000000000013B75                 mov     rcx, [rax+18h]
.text:0000000000013B79                 add     rdx, [rax+418h]
.text:0000000000013B80                 mov     r8, rcx
.text:0000000000013B83                 and     r8d, 7F8h
.text:0000000000013B8A                 mov     r11, [rdi+r8]
.text:0000000000013B8E                 add     r11, rdx
.text:0000000000013B91                 mov     r8, r11
.text:0000000000013B94                 add     r8, r10
.text:0000000000013B97                 add     rax, 20h ; ' '
.text:0000000000013B9B                 add     rsi, 20h ; ' '
.text:0000000000013B9F                 mov     [rax-8], r8
.text:0000000000013BA3                 shr     r8, 8
.text:0000000000013BA7                 and     r8d, 7F8h
.text:0000000000013BAE                 add     rcx, [rdi+r8]
.text:0000000000013BB2                 mov     [rsi-8], rcx
.text:0000000000013BB6                 cmp     rax, r9
.text:0000000000013BB9                 jb      loc_13AA0
.text:0000000000013BBF                 lea     r9, [rdi+800h]
.text:0000000000013BC6                 db      2Eh
.text:0000000000013BC6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000013BD0
.text:0000000000013BD0 loc_13BD0:                              ; CODE XREF: isaac_refill+279↓j
.text:0000000000013BD0                 mov     r8, rdx
.text:0000000000013BD3                 shl     r8, 15h
.text:0000000000013BD7                 xor     rdx, r8
.text:0000000000013BDA                 mov     r8, [rax]
.text:0000000000013BDD                 not     rdx
.text:0000000000013BE0                 add     rdx, [rax-400h]
.text:0000000000013BE7                 mov     r10, r8
.text:0000000000013BEA                 and     r10d, 7F8h
.text:0000000000013BF1                 mov     r11, [rdi+r10]
.text:0000000000013BF5                 mov     r10, rdx
.text:0000000000013BF8                 shr     r10, 5
.text:0000000000013BFC                 add     r11, rdx
.text:0000000000013BFF                 xor     rdx, r10
.text:0000000000013C02                 add     rcx, r11
.text:0000000000013C05                 mov     [rax], rcx
.text:0000000000013C08                 shr     rcx, 8
.text:0000000000013C0C                 and     ecx, 7F8h
.text:0000000000013C12                 mov     r11, [rdi+rcx]
.text:0000000000013C16                 add     r11, r8
.text:0000000000013C19                 mov     [rsi], r11
.text:0000000000013C1C                 add     rdx, [rax-3F8h]
.text:0000000000013C23                 mov     rcx, [rax+8]
.text:0000000000013C27                 mov     r10, rdx
.text:0000000000013C2A                 mov     rdx, rcx
.text:0000000000013C2D                 and     edx, 7F8h
.text:0000000000013C33                 mov     r8, [rdi+rdx]
.text:0000000000013C37                 mov     rdx, r10
.text:0000000000013C3A                 shl     rdx, 0Ch
.text:0000000000013C3E                 xor     rdx, r10
.text:0000000000013C41                 add     r8, r10
.text:0000000000013C44                 add     r8, r11
.text:0000000000013C47                 mov     [rax+8], r8
.text:0000000000013C4B                 shr     r8, 8
.text:0000000000013C4F                 and     r8d, 7F8h
.text:0000000000013C56                 add     rcx, [rdi+r8]
.text:0000000000013C5A                 mov     [rsi+8], rcx
.text:0000000000013C5E                 mov     r8, [rax+10h]
.text:0000000000013C62                 mov     r11, rcx
.text:0000000000013C65                 add     rdx, [rax-3F0h]
.text:0000000000013C6C                 mov     rcx, r8
.text:0000000000013C6F                 and     ecx, 7F8h
.text:0000000000013C75                 mov     r10, [rdi+rcx]
.text:0000000000013C79                 add     r10, rdx
.text:0000000000013C7C                 mov     rcx, r10
.text:0000000000013C7F                 add     rcx, r11
.text:0000000000013C82                 mov     [rax+10h], rcx
.text:0000000000013C86                 shr     rcx, 8
.text:0000000000013C8A                 and     ecx, 7F8h
.text:0000000000013C90                 mov     r10, [rdi+rcx]
.text:0000000000013C94                 mov     rcx, rdx
.text:0000000000013C97                 shr     rcx, 21h
.text:0000000000013C9B                 xor     rdx, rcx
.text:0000000000013C9E                 add     r10, r8
.text:0000000000013CA1                 mov     [rsi+10h], r10
.text:0000000000013CA5                 mov     rcx, [rax+18h]
.text:0000000000013CA9                 add     rdx, [rax-3E8h]
.text:0000000000013CB0                 mov     r8, rcx
.text:0000000000013CB3                 and     r8d, 7F8h
.text:0000000000013CBA                 mov     r11, [rdi+r8]
.text:0000000000013CBE                 add     r11, rdx
.text:0000000000013CC1                 mov     r8, r11
.text:0000000000013CC4                 add     r8, r10
.text:0000000000013CC7                 add     rax, 20h ; ' '
.text:0000000000013CCB                 add     rsi, 20h ; ' '
.text:0000000000013CCF                 mov     [rax-8], r8
.text:0000000000013CD3                 shr     r8, 8
.text:0000000000013CD7                 and     r8d, 7F8h
.text:0000000000013CDE                 add     rcx, [rdi+r8]
.text:0000000000013CE2                 mov     [rsi-8], rcx
.text:0000000000013CE6                 cmp     rax, r9
.text:0000000000013CE9                 jb      loc_13BD0
.text:0000000000013CEF                 mov     [rdi+800h], rdx
.text:0000000000013CF6                 mov     [rdi+808h], rcx
.text:0000000000013CFD                 retn
.text:0000000000013CFD ; } // starts at 13A70
.text:0000000000013CFD isaac_refill    endp
.text:0000000000013CFD
.text:0000000000013CFD ; ---------------------------------------------------------------------------
.text:0000000000013CFE                 align 20h
.text:0000000000013D00
.text:0000000000013D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000013D00
.text:0000000000013D00
.text:0000000000013D00                 public isaac_seed
.text:0000000000013D00 isaac_seed      proc near               ; CODE XREF: randread_new+138↑p
.text:0000000000013D00 ; __unwind {
.text:0000000000013D00                 push    r13
.text:0000000000013D02                 push    r12
.text:0000000000013D04                 lea     r12, [rdi+800h]
.text:0000000000013D0B                 push    rbp
.text:0000000000013D0C                 mov     rdx, rdi
.text:0000000000013D0F                 push    rbx
.text:0000000000013D10                 mov     rax, rdi
.text:0000000000013D13                 mov     rcx, 98F5704F6C44C0ABh
.text:0000000000013D1D                 mov     r10, 0AE985BF2CBFC89EDh
.text:0000000000013D27                 mov     rbp, 48FE4A0FA5A09315h
.text:0000000000013D31                 mov     rsi, 82F053DB8355E0CEh
.text:0000000000013D3B                 mov     r8, 0B29B2E824A595524h
.text:0000000000013D45                 mov     rbx, 8C0EA5053D4712A0h
.text:0000000000013D4F                 mov     r11, 0B9F8B322C73AC862h
.text:0000000000013D59                 mov     r9, 647C4677A2884B7Ch
.text:0000000000013D63                 nop     dword ptr [rax+rax+00h]
.text:0000000000013D68
.text:0000000000013D68 loc_13D68:                              ; CODE XREF: isaac_seed+13A↓j
.text:0000000000013D68                 add     rsi, [rax+20h]
.text:0000000000013D6C                 add     rcx, [rax+38h]
.text:0000000000013D70                 mov     r13, [rax]
.text:0000000000013D73                 add     rbp, [rax+28h]
.text:0000000000013D77                 add     r10, [rax+30h]
.text:0000000000013D7B                 sub     r13, rsi
.text:0000000000013D7E                 add     r9, r13
.text:0000000000013D81                 mov     r13, rcx
.text:0000000000013D84                 shr     r13, 9
.text:0000000000013D88                 add     rcx, r9
.text:0000000000013D8B                 xor     rbp, r13
.text:0000000000013D8E                 mov     r13, [rax+8]
.text:0000000000013D92                 sub     r13, rbp
.text:0000000000013D95                 add     r11, r13
.text:0000000000013D98                 mov     r13, r9
.text:0000000000013D9B                 shl     r13, 9
.text:0000000000013D9F                 add     r9, r11
.text:0000000000013DA2                 xor     r10, r13
.text:0000000000013DA5                 mov     r13, [rax+10h]
.text:0000000000013DA9                 sub     r13, r10
.text:0000000000013DAC                 add     rbx, r13
.text:0000000000013DAF                 mov     r13, r11
.text:0000000000013DB2                 shr     r13, 17h
.text:0000000000013DB6                 add     r11, rbx
.text:0000000000013DB9                 xor     rcx, r13
.text:0000000000013DBC                 mov     r13, [rax+18h]
.text:0000000000013DC0                 sub     r13, rcx
.text:0000000000013DC3                 add     r8, r13
.text:0000000000013DC6                 mov     r13, rbx
.text:0000000000013DC9                 shl     r13, 0Fh
.text:0000000000013DCD                 add     rbx, r8
.text:0000000000013DD0                 xor     r9, r13
.text:0000000000013DD3                 mov     r13, r8
.text:0000000000013DD6                 sub     rsi, r9
.text:0000000000013DD9                 shr     r13, 0Eh
.text:0000000000013DDD                 mov     [rax], r9
.text:0000000000013DE0                 xor     r11, r13
.text:0000000000013DE3                 mov     r13, rsi
.text:0000000000013DE6                 add     r8, rsi
.text:0000000000013DE9                 sub     rbp, r11
.text:0000000000013DEC                 shl     r13, 14h
.text:0000000000013DF0                 mov     [rax+8], r11
.text:0000000000013DF4                 xor     rbx, r13
.text:0000000000013DF7                 lea     r13, [rsi+rbp]
.text:0000000000013DFB                 mov     rsi, rbp
.text:0000000000013DFE                 sub     r10, rbx
.text:0000000000013E01                 shr     rsi, 11h
.text:0000000000013E05                 mov     [rax+10h], rbx
.text:0000000000013E09                 xor     r8, rsi
.text:0000000000013E0C                 mov     rsi, r10
.text:0000000000013E0F                 add     rbp, r10
.text:0000000000013E12                 sub     rcx, r8
.text:0000000000013E15                 shl     rsi, 0Eh
.text:0000000000013E19                 mov     [rax+18h], r8
.text:0000000000013E1D                 xor     rsi, r13
.text:0000000000013E20                 add     r10, rcx
.text:0000000000013E23                 mov     [rax+28h], rbp
.text:0000000000013E27                 mov     [rax+20h], rsi
.text:0000000000013E2B                 mov     [rax+30h], r10
.text:0000000000013E2F                 add     rax, 40h ; '@'
.text:0000000000013E33                 mov     [rax-8], rcx
.text:0000000000013E37                 cmp     r12, rax
.text:0000000000013E3A                 jnz     loc_13D68
.text:0000000000013E40
.text:0000000000013E40 loc_13E40:                              ; CODE XREF: isaac_seed+212↓j
.text:0000000000013E40                 add     rsi, [rdx+20h]
.text:0000000000013E44                 add     rcx, [rdx+38h]
.text:0000000000013E48                 mov     r12, [rdx]
.text:0000000000013E4B                 add     rbp, [rdx+28h]
.text:0000000000013E4F                 add     r10, [rdx+30h]
.text:0000000000013E53                 sub     r12, rsi
.text:0000000000013E56                 add     r9, r12
.text:0000000000013E59                 mov     r12, rcx
.text:0000000000013E5C                 shr     r12, 9
.text:0000000000013E60                 add     rcx, r9
.text:0000000000013E63                 xor     rbp, r12
.text:0000000000013E66                 mov     r12, [rdx+8]
.text:0000000000013E6A                 sub     r12, rbp
.text:0000000000013E6D                 add     r11, r12
.text:0000000000013E70                 mov     r12, r9
.text:0000000000013E73                 shl     r12, 9
.text:0000000000013E77                 add     r9, r11
.text:0000000000013E7A                 xor     r10, r12
.text:0000000000013E7D                 mov     r12, [rdx+10h]
.text:0000000000013E81                 sub     r12, r10
.text:0000000000013E84                 add     rbx, r12
.text:0000000000013E87                 mov     r12, r11
.text:0000000000013E8A                 shr     r12, 17h
.text:0000000000013E8E                 add     r11, rbx
.text:0000000000013E91                 xor     rcx, r12
.text:0000000000013E94                 mov     r12, [rdx+18h]
.text:0000000000013E98                 sub     r12, rcx
.text:0000000000013E9B                 add     r8, r12
.text:0000000000013E9E                 mov     r12, rbx
.text:0000000000013EA1                 shl     r12, 0Fh
.text:0000000000013EA5                 add     rbx, r8
.text:0000000000013EA8                 xor     r9, r12
.text:0000000000013EAB                 mov     r12, r8
.text:0000000000013EAE                 sub     rsi, r9
.text:0000000000013EB1                 shr     r12, 0Eh
.text:0000000000013EB5                 mov     [rdx], r9
.text:0000000000013EB8                 xor     r11, r12
.text:0000000000013EBB                 mov     r12, rsi
.text:0000000000013EBE                 add     r8, rsi
.text:0000000000013EC1                 sub     rbp, r11
.text:0000000000013EC4                 shl     r12, 14h
.text:0000000000013EC8                 mov     [rdx+8], r11
.text:0000000000013ECC                 xor     rbx, r12
.text:0000000000013ECF                 lea     r12, [rsi+rbp]
.text:0000000000013ED3                 mov     rsi, rbp
.text:0000000000013ED6                 sub     r10, rbx
.text:0000000000013ED9                 shr     rsi, 11h
.text:0000000000013EDD                 mov     [rdx+10h], rbx
.text:0000000000013EE1                 xor     r8, rsi
.text:0000000000013EE4                 mov     rsi, r10
.text:0000000000013EE7                 add     rbp, r10
.text:0000000000013EEA                 sub     rcx, r8
.text:0000000000013EED                 shl     rsi, 0Eh
.text:0000000000013EF1                 mov     [rdx+18h], r8
.text:0000000000013EF5                 xor     rsi, r12
.text:0000000000013EF8                 add     r10, rcx
.text:0000000000013EFB                 mov     [rdx+28h], rbp
.text:0000000000013EFF                 mov     [rdx+20h], rsi
.text:0000000000013F03                 mov     [rdx+30h], r10
.text:0000000000013F07                 add     rdx, 40h ; '@'
.text:0000000000013F0B                 mov     [rdx-8], rcx
.text:0000000000013F0F                 cmp     rax, rdx
.text:0000000000013F12                 jnz     loc_13E40
.text:0000000000013F18                 pop     rbx
.text:0000000000013F19                 mov     qword ptr [rdi+810h], 0
.text:0000000000013F24                 mov     qword ptr [rdi+808h], 0
.text:0000000000013F2F                 pop     rbp
.text:0000000000013F30                 mov     qword ptr [rdi+800h], 0
.text:0000000000013F3B                 pop     r12
.text:0000000000013F3D                 pop     r13
.text:0000000000013F3F                 retn
.text:0000000000013F3F ; } // starts at 13D00
.text:0000000000013F3F isaac_seed      endp
.text:0000000000013F3F
.text:0000000000013F40
.text:0000000000013F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000013F40
.text:0000000000013F40
.text:0000000000013F40                 public dup_safer
.text:0000000000013F40 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:0000000000013F40                                         ; fopen_safer+32↓p
.text:0000000000013F40 ; __unwind {
.text:0000000000013F40                 mov     edx, 3
.text:0000000000013F45                 xor     esi, esi
.text:0000000000013F47                 xor     eax, eax
.text:0000000000013F49                 jmp     rpl_fcntl
.text:0000000000013F49 ; } // starts at 13F40
.text:0000000000013F49 dup_safer       endp
.text:0000000000013F49
.text:0000000000013F49 ; ---------------------------------------------------------------------------
.text:0000000000013F4E                 align 10h
.text:0000000000013F50
.text:0000000000013F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000013F50
.text:0000000000013F50 ; Attributes: info_from_lumina
.text:0000000000013F50
.text:0000000000013F50 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000013F50                 public rpl_fclose
.text:0000000000013F50 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000013F50                                         ; randread_free+33↑j ...
.text:0000000000013F50 ; __unwind {
.text:0000000000013F50                 push    r12
.text:0000000000013F52                 push    rbp
.text:0000000000013F53                 push    rbx
.text:0000000000013F54                 mov     rbx, rdi
.text:0000000000013F57                 call    _fileno
.text:0000000000013F5C                 test    eax, eax
.text:0000000000013F5E                 mov     rdi, rbx        ; fp
.text:0000000000013F61                 js      short loc_13FB7
.text:0000000000013F63                 call    ___freading
.text:0000000000013F68                 test    eax, eax
.text:0000000000013F6A                 jnz     short loc_13F98
.text:0000000000013F6C
.text:0000000000013F6C loc_13F6C:                              ; CODE XREF: rpl_fclose+62↓j
.text:0000000000013F6C                 mov     rdi, rbx        ; stream
.text:0000000000013F6F                 call    rpl_fflush
.text:0000000000013F74                 test    eax, eax
.text:0000000000013F76                 jz      short loc_13FB4
.text:0000000000013F78                 call    ___errno_location
.text:0000000000013F7D                 mov     r12d, [rax]
.text:0000000000013F80                 mov     rdi, rbx        ; stream
.text:0000000000013F83                 mov     rbp, rax
.text:0000000000013F86                 call    _fclose
.text:0000000000013F8B                 test    r12d, r12d
.text:0000000000013F8E                 jnz     short loc_13FC0
.text:0000000000013F90
.text:0000000000013F90 loc_13F90:                              ; CODE XREF: rpl_fclose+79↓j
.text:0000000000013F90                 pop     rbx
.text:0000000000013F91                 pop     rbp
.text:0000000000013F92                 pop     r12
.text:0000000000013F94                 retn
.text:0000000000013F94 ; ---------------------------------------------------------------------------
.text:0000000000013F95                 align 8
.text:0000000000013F98
.text:0000000000013F98 loc_13F98:                              ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000013F98                 mov     rdi, rbx        ; stream
.text:0000000000013F9B                 call    _fileno
.text:0000000000013FA0                 xor     esi, esi        ; offset
.text:0000000000013FA2                 mov     edx, 1          ; whence
.text:0000000000013FA7                 mov     edi, eax        ; fd
.text:0000000000013FA9                 call    _lseek
.text:0000000000013FAE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000013FB2                 jnz     short loc_13F6C
.text:0000000000013FB4
.text:0000000000013FB4 loc_13FB4:                              ; CODE XREF: rpl_fclose+26↑j
.text:0000000000013FB4                 mov     rdi, rbx        ; stream
.text:0000000000013FB7
.text:0000000000013FB7 loc_13FB7:                              ; CODE XREF: rpl_fclose+11↑j
.text:0000000000013FB7                 pop     rbx
.text:0000000000013FB8                 pop     rbp
.text:0000000000013FB9                 pop     r12
.text:0000000000013FBB                 jmp     _fclose
.text:0000000000013FC0 ; ---------------------------------------------------------------------------
.text:0000000000013FC0
.text:0000000000013FC0 loc_13FC0:                              ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000013FC0                 mov     [rbp+0], r12d
.text:0000000000013FC4                 mov     eax, 0FFFFFFFFh
.text:0000000000013FC9                 jmp     short loc_13F90
.text:0000000000013FC9 ; } // starts at 13F50
.text:0000000000013FC9 rpl_fclose      endp
.text:0000000000013FC9
.text:0000000000013FC9 ; ---------------------------------------------------------------------------
.text:0000000000013FCB                 align 10h
.text:0000000000013FD0
.text:0000000000013FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013FD0
.text:0000000000013FD0
.text:0000000000013FD0 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000013FD0                 public rpl_fcntl
.text:0000000000013FD0 rpl_fcntl       proc near               ; CODE XREF: opendir_safer+3E↑p
.text:0000000000013FD0                                         ; dup_safer+9↑j
.text:0000000000013FD0
.text:0000000000013FD0 var_68          = dword ptr -68h
.text:0000000000013FD0 var_60          = qword ptr -60h
.text:0000000000013FD0 var_58          = qword ptr -58h
.text:0000000000013FD0 var_50          = qword ptr -50h
.text:0000000000013FD0 var_48          = byte ptr -48h
.text:0000000000013FD0 var_38          = qword ptr -38h
.text:0000000000013FD0 var_30          = qword ptr -30h
.text:0000000000013FD0 var_28          = qword ptr -28h
.text:0000000000013FD0 var_20          = qword ptr -20h
.text:0000000000013FD0 arg_0           = byte ptr  8
.text:0000000000013FD0
.text:0000000000013FD0 ; __unwind {
.text:0000000000013FD0                 push    r12
.text:0000000000013FD2                 push    rbp
.text:0000000000013FD3                 mov     ebp, edi
.text:0000000000013FD5                 push    rbx
.text:0000000000013FD6                 sub     rsp, 50h
.text:0000000000013FDA                 mov     rax, fs:28h
.text:0000000000013FE3                 mov     [rsp+68h+var_50], rax
.text:0000000000013FE8                 xor     eax, eax
.text:0000000000013FEA                 lea     rax, [rsp+68h+arg_0]
.text:0000000000013FEF                 test    esi, esi
.text:0000000000013FF1                 mov     [rsp+68h+var_38], rdx
.text:0000000000013FF6                 mov     [rsp+68h+var_30], rcx
.text:0000000000013FFB                 mov     [rsp+68h+var_28], r8
.text:0000000000014000                 mov     [rsp+68h+var_60], rax
.text:0000000000014005                 lea     rax, [rsp+68h+var_48]
.text:000000000001400A                 mov     [rsp+68h+var_20], r9
.text:000000000001400F                 mov     [rsp+68h+var_68], 10h
.text:0000000000014016                 mov     [rsp+68h+var_58], rax
.text:000000000001401B                 jz      loc_14222
.text:0000000000014021                 cmp     esi, 406h
.text:0000000000014027                 jnz     short loc_14070
.text:0000000000014029                 mov     rax, [rsp+68h+var_58]
.text:000000000001402E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000014035                 mov     [rsp+68h+var_68], 18h
.text:000000000001403C                 mov     r12d, [rax+10h]
.text:0000000000014040                 mov     edx, r12d
.text:0000000000014043                 js      loc_14173
.text:0000000000014049                 xor     eax, eax
.text:000000000001404B                 mov     esi, 406h       ; cmd
.text:0000000000014050                 call    _fcntl
.text:0000000000014055                 test    eax, eax
.text:0000000000014057                 mov     ebx, eax
.text:0000000000014059                 js      loc_141E8
.text:000000000001405F
.text:000000000001405F loc_1405F:                              ; CODE XREF: rpl_fcntl+220↓j
.text:000000000001405F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000014069                 jmp     short loc_140B0
.text:0000000000014069 ; ---------------------------------------------------------------------------
.text:000000000001406B                 align 10h
.text:0000000000014070
.text:0000000000014070 loc_14070:                              ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000014070                 cmp     esi, 0Bh
.text:0000000000014073                 jz      short loc_140A0
.text:0000000000014075                 jg      short loc_140D0
.text:0000000000014077                 cmp     esi, 4
.text:000000000001407A                 jz      loc_14150
.text:0000000000014080                 jg      loc_14140
.text:0000000000014086                 cmp     esi, 2
.text:0000000000014089                 jz      loc_14150
.text:000000000001408F                 jg      short loc_140A0
.text:0000000000014091                 cmp     esi, 1
.text:0000000000014094                 jnz     short loc_140F8
.text:0000000000014096                 db      2Eh
.text:0000000000014096                 nop     word ptr [rax+rax+00000000h]
.text:00000000000140A0
.text:00000000000140A0 loc_140A0:                              ; CODE XREF: rpl_fcntl+A3↑j
.text:00000000000140A0                                         ; rpl_fcntl+BF↑j ...
.text:00000000000140A0                 mov     edi, ebp        ; fd
.text:00000000000140A2                 xor     eax, eax
.text:00000000000140A4                 call    _fcntl
.text:00000000000140A9                 mov     ebx, eax
.text:00000000000140AB                 nop     dword ptr [rax+rax+00h]
.text:00000000000140B0
.text:00000000000140B0 loc_140B0:                              ; CODE XREF: rpl_fcntl+99↑j
.text:00000000000140B0                                         ; rpl_fcntl+147↓j ...
.text:00000000000140B0                 mov     rcx, [rsp+68h+var_50]
.text:00000000000140B5                 xor     rcx, fs:28h
.text:00000000000140BE                 mov     eax, ebx
.text:00000000000140C0                 jnz     loc_1421D
.text:00000000000140C6                 add     rsp, 50h
.text:00000000000140CA                 pop     rbx
.text:00000000000140CB                 pop     rbp
.text:00000000000140CC                 pop     r12
.text:00000000000140CE                 retn
.text:00000000000140CE ; ---------------------------------------------------------------------------
.text:00000000000140CF                 align 10h
.text:00000000000140D0
.text:00000000000140D0 loc_140D0:                              ; CODE XREF: rpl_fcntl+A5↑j
.text:00000000000140D0                 cmp     esi, 407h
.text:00000000000140D6                 jg      short loc_14120
.text:00000000000140D8                 cmp     esi, 406h
.text:00000000000140DE                 jge     short loc_14150
.text:00000000000140E0                 cmp     esi, 401h
.text:00000000000140E6                 jz      short loc_140A0
.text:00000000000140E8                 cmp     esi, 402h
.text:00000000000140EE                 jz      short loc_14150
.text:00000000000140F0                 cmp     esi, 400h
.text:00000000000140F6                 jz      short loc_14150
.text:00000000000140F8
.text:00000000000140F8 loc_140F8:                              ; CODE XREF: rpl_fcntl+C4↑j
.text:00000000000140F8                                         ; rpl_fcntl+164↓j ...
.text:00000000000140F8                 mov     eax, [rsp+68h+var_68]
.text:00000000000140FB                 cmp     eax, 2Fh ; '/'
.text:00000000000140FE                 ja      loc_1423A
.text:0000000000014104                 add     rax, [rsp+68h+var_58]
.text:0000000000014109
.text:0000000000014109 loc_14109:                              ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000014109                 mov     rdx, [rax]
.text:000000000001410C                 mov     edi, ebp        ; fd
.text:000000000001410E                 xor     eax, eax
.text:0000000000014110                 call    _fcntl
.text:0000000000014115                 mov     ebx, eax
.text:0000000000014117                 jmp     short loc_140B0
.text:0000000000014117 ; ---------------------------------------------------------------------------
.text:0000000000014119                 align 20h
.text:0000000000014120
.text:0000000000014120 loc_14120:                              ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000014120                 cmp     esi, 409h
.text:0000000000014126                 jz      short loc_14150
.text:0000000000014128                 jl      loc_140A0
.text:000000000001412E                 cmp     esi, 40Ah
.text:0000000000014134                 jnz     short loc_140F8
.text:0000000000014136                 jmp     loc_140A0
.text:0000000000014136 ; ---------------------------------------------------------------------------
.text:000000000001413B                 align 20h
.text:0000000000014140
.text:0000000000014140 loc_14140:                              ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000014140                 cmp     esi, 9
.text:0000000000014143                 jz      loc_140A0
.text:0000000000014149                 jg      short loc_14150
.text:000000000001414B                 cmp     esi, 8
.text:000000000001414E                 jnz     short loc_140F8
.text:0000000000014150
.text:0000000000014150 loc_14150:                              ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000014150                                         ; rpl_fcntl+B9↑j ...
.text:0000000000014150                 mov     eax, [rsp+68h+var_68]
.text:0000000000014153                 cmp     eax, 2Fh ; '/'
.text:0000000000014156                 ja      loc_14244
.text:000000000001415C                 add     rax, [rsp+68h+var_58]
.text:0000000000014161
.text:0000000000014161 loc_14161:                              ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000014161                 mov     edx, [rax]
.text:0000000000014163                 mov     edi, ebp        ; fd
.text:0000000000014165                 xor     eax, eax
.text:0000000000014167                 call    _fcntl
.text:000000000001416C                 mov     ebx, eax
.text:000000000001416E                 jmp     loc_140B0
.text:0000000000014173 ; ---------------------------------------------------------------------------
.text:0000000000014173
.text:0000000000014173 loc_14173:                              ; CODE XREF: rpl_fcntl+73↑j
.text:0000000000014173                 xor     esi, esi        ; cmd
.text:0000000000014175                 xor     eax, eax
.text:0000000000014177                 call    _fcntl
.text:000000000001417C                 test    eax, eax
.text:000000000001417E                 mov     ebx, eax
.text:0000000000014180                 js      loc_140B0
.text:0000000000014186                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000001418D                 jnz     loc_140B0
.text:0000000000014193
.text:0000000000014193 loc_14193:                              ; CODE XREF: rpl_fcntl+248↓j
.text:0000000000014193                 xor     eax, eax
.text:0000000000014195                 mov     esi, 1          ; cmd
.text:000000000001419A                 mov     edi, ebx        ; fd
.text:000000000001419C                 call    _fcntl
.text:00000000000141A1                 test    eax, eax
.text:00000000000141A3                 js      short loc_141C1
.text:00000000000141A5                 or      eax, 1
.text:00000000000141A8                 mov     esi, 2          ; cmd
.text:00000000000141AD                 mov     edi, ebx        ; fd
.text:00000000000141AF                 mov     edx, eax
.text:00000000000141B1                 xor     eax, eax
.text:00000000000141B3                 call    _fcntl
.text:00000000000141B8                 cmp     eax, 0FFFFFFFFh
.text:00000000000141BB                 jnz     loc_140B0
.text:00000000000141C1
.text:00000000000141C1 loc_141C1:                              ; CODE XREF: rpl_fcntl+1D3↑j
.text:00000000000141C1                 call    ___errno_location
.text:00000000000141C6                 mov     r12d, [rax]
.text:00000000000141C9                 mov     rbp, rax
.text:00000000000141CC                 mov     edi, ebx        ; fd
.text:00000000000141CE                 call    _close
.text:00000000000141D3                 mov     ebx, 0FFFFFFFFh
.text:00000000000141D8                 mov     [rbp+0], r12d
.text:00000000000141DC                 jmp     loc_140B0
.text:00000000000141DC ; ---------------------------------------------------------------------------
.text:00000000000141E1                 align 8
.text:00000000000141E8
.text:00000000000141E8 loc_141E8:                              ; CODE XREF: rpl_fcntl+89↑j
.text:00000000000141E8                 call    ___errno_location
.text:00000000000141ED                 cmp     dword ptr [rax], 16h
.text:00000000000141F0                 jnz     loc_1405F
.text:00000000000141F6                 xor     esi, esi        ; cmd
.text:00000000000141F8                 xor     eax, eax
.text:00000000000141FA                 mov     edx, r12d
.text:00000000000141FD                 mov     edi, ebp        ; fd
.text:00000000000141FF                 call    _fcntl
.text:0000000000014204                 test    eax, eax
.text:0000000000014206                 mov     ebx, eax
.text:0000000000014208                 js      loc_140B0
.text:000000000001420E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000014218                 jmp     loc_14193
.text:000000000001421D ; ---------------------------------------------------------------------------
.text:000000000001421D
.text:000000000001421D loc_1421D:                              ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000001421D                 call    ___stack_chk_fail
.text:0000000000014222 ; ---------------------------------------------------------------------------
.text:0000000000014222
.text:0000000000014222 loc_14222:                              ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000014222                 mov     rax, [rsp+68h+var_58]
.text:0000000000014227                 xor     esi, esi        ; cmd
.text:0000000000014229                 mov     edx, [rax+10h]
.text:000000000001422C                 xor     eax, eax
.text:000000000001422E                 call    _fcntl
.text:0000000000014233                 mov     ebx, eax
.text:0000000000014235                 jmp     loc_140B0
.text:000000000001423A ; ---------------------------------------------------------------------------
.text:000000000001423A
.text:000000000001423A loc_1423A:                              ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000001423A                 mov     rax, [rsp+68h+var_60]
.text:000000000001423F                 jmp     loc_14109
.text:0000000000014244 ; ---------------------------------------------------------------------------
.text:0000000000014244
.text:0000000000014244 loc_14244:                              ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000014244                 mov     rax, [rsp+68h+var_60]
.text:0000000000014249                 jmp     loc_14161
.text:0000000000014249 ; } // starts at 13FD0
.text:0000000000014249 rpl_fcntl       endp
.text:0000000000014249
.text:0000000000014249 ; ---------------------------------------------------------------------------
.text:000000000001424E                 align 10h
.text:0000000000014250
.text:0000000000014250 ; =============== S U B R O U T I N E =======================================
.text:0000000000014250
.text:0000000000014250
.text:0000000000014250                 public fseterr
.text:0000000000014250 fseterr         proc near               ; CODE XREF: rpl_vfprintf+E6↑p
.text:0000000000014250 ; __unwind {
.text:0000000000014250                 or      dword ptr [rdi], 20h
.text:0000000000014253                 retn
.text:0000000000014253 ; } // starts at 14250
.text:0000000000014253 fseterr         endp
.text:0000000000014253
.text:0000000000014253 ; ---------------------------------------------------------------------------
.text:0000000000014254                 align 20h
.text:0000000000014260
.text:0000000000014260 ; =============== S U B R O U T I N E =======================================
.text:0000000000014260
.text:0000000000014260 ; Attributes: bp-based frame
.text:0000000000014260
.text:0000000000014260                 public vasnprintf
.text:0000000000014260 vasnprintf      proc near               ; CODE XREF: rpl_vfprintf+42↑p
.text:0000000000014260
.text:0000000000014260 var_450         = tbyte ptr -450h
.text:0000000000014260 var_440         = tbyte ptr -440h
.text:0000000000014260 var_430         = qword ptr -430h
.text:0000000000014260 var_421         = byte ptr -421h
.text:0000000000014260 ptr             = qword ptr -420h
.text:0000000000014260 var_418         = qword ptr -418h
.text:0000000000014260 var_410         = qword ptr -410h
.text:0000000000014260 var_408         = qword ptr -408h
.text:0000000000014260 var_400         = qword ptr -400h
.text:0000000000014260 var_3F8         = qword ptr -3F8h
.text:0000000000014260 var_3F0         = qword ptr -3F0h
.text:0000000000014260 src             = qword ptr -3E8h
.text:0000000000014260 var_3E0         = qword ptr -3E0h
.text:0000000000014260 var_3D8         = qword ptr -3D8h
.text:0000000000014260 var_3D0         = qword ptr -3D0h
.text:0000000000014260 n               = qword ptr -3C8h
.text:0000000000014260 var_3BC         = dword ptr -3BCh
.text:0000000000014260 var_3B8         = dword ptr -3B8h
.text:0000000000014260 var_3B4         = dword ptr -3B4h
.text:0000000000014260 var_3B0         = byte ptr -3B0h
.text:0000000000014260 var_3A8         = qword ptr -3A8h
.text:0000000000014260 var_2C0         = qword ptr -2C0h
.text:0000000000014260 var_2B8         = qword ptr -2B8h
.text:0000000000014260 var_2B0         = qword ptr -2B0h
.text:0000000000014260 var_2A8         = qword ptr -2A8h
.text:0000000000014260 var_38          = qword ptr -38h
.text:0000000000014260
.text:0000000000014260 ; __unwind {
.text:0000000000014260                 push    rbp
.text:0000000000014261                 mov     rbp, rsp
.text:0000000000014264                 push    r15
.text:0000000000014266                 push    r14
.text:0000000000014268                 push    r13
.text:000000000001426A                 push    r12
.text:000000000001426C                 lea     r14, [rbp+var_3B0]
.text:0000000000014273                 push    rbx
.text:0000000000014274                 mov     rbx, rdx
.text:0000000000014277                 mov     r12, rcx
.text:000000000001427A                 mov     rdx, r14
.text:000000000001427D                 sub     rsp, 408h
.text:0000000000014284                 mov     [rbp+var_418], rsi
.text:000000000001428B                 lea     rsi, [rbp+var_2C0]
.text:0000000000014292                 mov     [rbp+src], rdi
.text:0000000000014299                 mov     rdi, rbx
.text:000000000001429C                 mov     [rbp+var_410], r14
.text:00000000000142A3                 mov     rax, fs:28h
.text:00000000000142AC                 mov     [rbp+var_38], rax
.text:00000000000142B0                 xor     eax, eax
.text:00000000000142B2                 mov     [rbp+var_408], rsi
.text:00000000000142B9                 call    printf_parse
.text:00000000000142BE                 test    eax, eax
.text:00000000000142C0                 js      loc_15128
.text:00000000000142C6                 mov     rsi, r14
.text:00000000000142C9                 mov     rdi, r12
.text:00000000000142CC                 call    printf_fetchargs
.text:00000000000142D1                 test    eax, eax
.text:00000000000142D3                 js      loc_15190
.text:00000000000142D9                 mov     rax, [rbp+var_2B0]
.text:00000000000142E0                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000142E7                 add     rax, 7
.text:00000000000142EB                 cmp     rax, 6
.text:00000000000142EF                 cmovbe  rax, rdx
.text:00000000000142F3                 add     rax, [rbp+var_2A8]
.text:00000000000142FA                 jb      loc_14D28
.text:0000000000014300                 mov     rdi, rax
.text:0000000000014303                 xor     r8d, r8d
.text:0000000000014306                 add     rdi, 6          ; size
.text:000000000001430A                 setb    r8b
.text:000000000001430E                 jb      loc_14D28
.text:0000000000014314                 cmp     rdi, 0F9Fh
.text:000000000001431B                 jbe     loc_14468
.text:0000000000014321                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000014325                 mov     [rbp+n], r8
.text:000000000001432C                 jz      loc_14D28
.text:0000000000014332                 call    _malloc
.text:0000000000014337                 test    rax, rax
.text:000000000001433A                 mov     [rbp+var_3D8], rax
.text:0000000000014341                 jz      loc_14D28
.text:0000000000014347                 mov     r8, [rbp+n]
.text:000000000001434E                 mov     [rbp+ptr], rax
.text:0000000000014355
.text:0000000000014355 loc_14355:                              ; CODE XREF: vasnprintf+22E↓j
.text:0000000000014355                 xor     r12d, r12d
.text:0000000000014358                 cmp     [rbp+src], 0
.text:0000000000014360                 jz      short loc_1436C
.text:0000000000014362                 mov     rax, [rbp+var_418]
.text:0000000000014369                 mov     r12, [rax]
.text:000000000001436C
.text:000000000001436C loc_1436C:                              ; CODE XREF: vasnprintf+100↑j
.text:000000000001436C                 mov     r13, [rbp+var_2B8]
.text:0000000000014373                 lea     rax, [rbp+var_3BC]
.text:000000000001437A                 mov     r15, [rbp+src]
.text:0000000000014381                 mov     [rbp+var_400], 0
.text:000000000001438C                 mov     [rbp+var_3F0], rax
.text:0000000000014393                 mov     rax, rbx
.text:0000000000014396                 mov     rbx, r8
.text:0000000000014399                 mov     rcx, [r13+0]
.text:000000000001439D                 mov     r8, rax
.text:00000000000143A0                 cmp     rcx, r8
.text:00000000000143A3                 jz      loc_14D11
.text:00000000000143A9
.text:00000000000143A9 loc_143A9:                              ; CODE XREF: vasnprintf+AAB↓j
.text:00000000000143A9                 sub     rcx, r8
.text:00000000000143AC                 mov     rax, rbx
.text:00000000000143AF                 add     rax, rcx
.text:00000000000143B2                 mov     r14, rax
.text:00000000000143B5                 jnb     loc_14498
.text:00000000000143BB                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000143BF                 jz      loc_14E90
.text:00000000000143C5
.text:00000000000143C5 loc_143C5:                              ; CODE XREF: vasnprintf+4E2↓j
.text:00000000000143C5                                         ; vasnprintf+A86↓j ...
.text:00000000000143C5                 call    ___errno_location
.text:00000000000143CA                 mov     [rbp+n], rax
.text:00000000000143D1
.text:00000000000143D1 loc_143D1:                              ; CODE XREF: vasnprintf+640↓j
.text:00000000000143D1                                         ; vasnprintf+652↓j ...
.text:00000000000143D1                 cmp     r15, [rbp+src]
.text:00000000000143D8                 jz      short loc_143E3
.text:00000000000143DA                 test    r15, r15
.text:00000000000143DD                 jnz     loc_14EC0
.text:00000000000143E3
.text:00000000000143E3 loc_143E3:                              ; CODE XREF: vasnprintf+178↑j
.text:00000000000143E3                                         ; vasnprintf+C68↓j
.text:00000000000143E3                 mov     rax, [rbp+ptr]
.text:00000000000143EA                 test    rax, rax
.text:00000000000143ED                 jz      short loc_143F7
.text:00000000000143EF                 mov     rdi, rax        ; ptr
.text:00000000000143F2                 call    free
.text:00000000000143F7
.text:00000000000143F7 loc_143F7:                              ; CODE XREF: vasnprintf+18D↑j
.text:00000000000143F7                                         ; vasnprintf+AD4↓j
.text:00000000000143F7                 mov     rax, [rbp+var_408]
.text:00000000000143FE                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000014405                 add     rax, 20h ; ' '
.text:0000000000014409                 cmp     rdi, rax
.text:000000000001440C                 jz      short loc_14413
.text:000000000001440E                 call    free
.text:0000000000014413
.text:0000000000014413 loc_14413:                              ; CODE XREF: vasnprintf+1AC↑j
.text:0000000000014413                 mov     rax, [rbp+var_410]
.text:000000000001441A                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000014421                 add     rax, 10h
.text:0000000000014425                 cmp     rdi, rax
.text:0000000000014428                 jz      short loc_1442F
.text:000000000001442A                 call    free
.text:000000000001442F
.text:000000000001442F loc_1442F:                              ; CODE XREF: vasnprintf+1C8↑j
.text:000000000001442F                 mov     rax, [rbp+n]
.text:0000000000014436                 xor     r15d, r15d
.text:0000000000014439                 mov     dword ptr [rax], 0Ch
.text:000000000001443F
.text:000000000001443F loc_1443F:                              ; CODE XREF: vasnprintf+7BA↓j
.text:000000000001443F                                         ; vasnprintf+EBE↓j ...
.text:000000000001443F                 mov     rdi, [rbp+var_38]
.text:0000000000014443                 xor     rdi, fs:28h
.text:000000000001444C                 mov     rax, r15
.text:000000000001444F                 jnz     loc_15357
.text:0000000000014455                 lea     rsp, [rbp-28h]
.text:0000000000014459                 pop     rbx
.text:000000000001445A                 pop     r12
.text:000000000001445C                 pop     r13
.text:000000000001445E                 pop     r14
.text:0000000000014460                 pop     r15
.text:0000000000014462                 pop     rbp
.text:0000000000014463                 retn
.text:0000000000014463 ; ---------------------------------------------------------------------------
.text:0000000000014464                 align 8
.text:0000000000014468
.text:0000000000014468 loc_14468:                              ; CODE XREF: vasnprintf+BB↑j
.text:0000000000014468                 add     rax, 24h ; '$'
.text:000000000001446C                 mov     [rbp+ptr], 0
.text:0000000000014477                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000001447B                 sub     rsp, rax
.text:000000000001447E                 lea     rax, [rsp+430h+var_421]
.text:0000000000014483                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000014487                 mov     [rbp+var_3D8], rax
.text:000000000001448E                 jmp     loc_14355
.text:000000000001448E ; ---------------------------------------------------------------------------
.text:0000000000014493                 align 8
.text:0000000000014498
.text:0000000000014498 loc_14498:                              ; CODE XREF: vasnprintf+155↑j
.text:0000000000014498                 cmp     r12, rax
.text:000000000001449B                 jnb     short loc_14504
.text:000000000001449D                 test    r12, r12
.text:00000000000144A0                 jnz     loc_14DD0
.text:00000000000144A6                 cmp     rax, 0Ch
.text:00000000000144AA                 ja      loc_14DE2
.text:00000000000144B0                 mov     r12d, 0Ch
.text:00000000000144B6
.text:00000000000144B6 loc_144B6:                              ; CODE XREF: vasnprintf+B7C↓j
.text:00000000000144B6                 cmp     r15, [rbp+src]
.text:00000000000144BD                 setz    dl
.text:00000000000144C0                 test    r15, r15
.text:00000000000144C3                 jz      loc_14E08
.text:00000000000144C9
.text:00000000000144C9 loc_144C9:                              ; CODE XREF: vasnprintf+B9C↓j
.text:00000000000144C9                 test    dl, dl
.text:00000000000144CB                 jnz     loc_14E08
.text:00000000000144D1                 mov     rsi, r12        ; size
.text:00000000000144D4                 mov     rdi, r15        ; ptr
.text:00000000000144D7                 mov     [rbp+var_3D0], r8
.text:00000000000144DE                 mov     [rbp+n], rcx
.text:00000000000144E5                 call    _realloc
.text:00000000000144EA                 test    rax, rax
.text:00000000000144ED                 mov     rcx, [rbp+n]
.text:00000000000144F4                 mov     r8, [rbp+var_3D0]
.text:00000000000144FB                 jz      loc_14EAB
.text:0000000000014501                 mov     r15, rax
.text:0000000000014504
.text:0000000000014504 loc_14504:                              ; CODE XREF: vasnprintf+23B↑j
.text:0000000000014504                                         ; vasnprintf+C23↓j ...
.text:0000000000014504                 lea     rdi, [r15+rbx]  ; dest
.text:0000000000014508                 mov     rdx, rcx        ; n
.text:000000000001450B                 mov     rsi, r8         ; src
.text:000000000001450E                 call    _memcpy
.text:0000000000014513
.text:0000000000014513 loc_14513:                              ; CODE XREF: vasnprintf+AB4↓j
.text:0000000000014513                 mov     rax, [rbp+var_400]
.text:000000000001451A                 cmp     [rbp+var_2C0], rax
.text:0000000000014521                 jz      loc_151DB
.text:0000000000014527                 movzx   edx, byte ptr [r13+48h]
.text:000000000001452C                 mov     rax, [r13+50h]
.text:0000000000014530                 cmp     dl, 25h ; '%'
.text:0000000000014533                 jz      loc_14CC8
.text:0000000000014539                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001453D                 jz      def_147BB       ; jumptable 00000000000147BB default case, case 0
.text:000000000001453D                                         ; jumptable 0000000000014D60 default case
.text:0000000000014543                 mov     r8, [rbp+var_3A8]
.text:000000000001454A                 shl     rax, 5
.text:000000000001454E                 add     rax, r8
.text:0000000000014551                 cmp     dl, 6Eh ; 'n'
.text:0000000000014554                 mov     edi, [rax]
.text:0000000000014556                 mov     dword ptr [rbp+var_3D0], edi
.text:000000000001455C                 jz      loc_14D40
.text:0000000000014562                 mov     eax, [r13+10h]
.text:0000000000014566                 mov     rdi, [rbp+var_3D8]
.text:000000000001456D                 test    al, 1
.text:000000000001456F                 mov     byte ptr [rdi], 25h ; '%'
.text:0000000000014572                 lea     rbx, [rdi+1]
.text:0000000000014576                 jz      short loc_14587
.text:0000000000014578                 mov     rdi, [rbp+var_3D8]
.text:000000000001457F                 lea     rbx, [rdi+2]
.text:0000000000014583                 mov     byte ptr [rdi+1], 27h ; '''
.text:0000000000014587
.text:0000000000014587 loc_14587:                              ; CODE XREF: vasnprintf+316↑j
.text:0000000000014587                 test    al, 2
.text:0000000000014589                 jz      short loc_14592
.text:000000000001458B                 mov     byte ptr [rbx], 2Dh ; '-'
.text:000000000001458E                 add     rbx, 1
.text:0000000000014592
.text:0000000000014592 loc_14592:                              ; CODE XREF: vasnprintf+329↑j
.text:0000000000014592                 test    al, 4
.text:0000000000014594                 jz      short loc_1459D
.text:0000000000014596                 mov     byte ptr [rbx], 2Bh ; '+'
.text:0000000000014599                 add     rbx, 1
.text:000000000001459D
.text:000000000001459D loc_1459D:                              ; CODE XREF: vasnprintf+334↑j
.text:000000000001459D                 test    al, 8
.text:000000000001459F                 jz      short loc_145A8
.text:00000000000145A1                 mov     byte ptr [rbx], 20h ; ' '
.text:00000000000145A4                 add     rbx, 1
.text:00000000000145A8
.text:00000000000145A8 loc_145A8:                              ; CODE XREF: vasnprintf+33F↑j
.text:00000000000145A8                 test    al, 10h
.text:00000000000145AA                 jz      short loc_145B3
.text:00000000000145AC                 mov     byte ptr [rbx], 23h ; '#'
.text:00000000000145AF                 add     rbx, 1
.text:00000000000145B3
.text:00000000000145B3 loc_145B3:                              ; CODE XREF: vasnprintf+34A↑j
.text:00000000000145B3                 test    al, 40h
.text:00000000000145B5                 jz      short loc_145BE
.text:00000000000145B7                 mov     byte ptr [rbx], 49h ; 'I'
.text:00000000000145BA                 add     rbx, 1
.text:00000000000145BE
.text:00000000000145BE loc_145BE:                              ; CODE XREF: vasnprintf+355↑j
.text:00000000000145BE                 test    al, 20h
.text:00000000000145C0                 jz      short loc_145C9
.text:00000000000145C2                 mov     byte ptr [rbx], 30h ; '0'
.text:00000000000145C5                 add     rbx, 1
.text:00000000000145C9
.text:00000000000145C9 loc_145C9:                              ; CODE XREF: vasnprintf+360↑j
.text:00000000000145C9                 mov     rsi, [r13+18h]  ; src
.text:00000000000145CD                 mov     rdx, [r13+20h]
.text:00000000000145D1                 cmp     rsi, rdx
.text:00000000000145D4                 jz      short loc_14606
.text:00000000000145D6                 mov     rcx, rdx
.text:00000000000145D9                 mov     rdi, rbx        ; dest
.text:00000000000145DC                 mov     [rbp+var_3E0], r8
.text:00000000000145E3                 sub     rcx, rsi
.text:00000000000145E6                 mov     rdx, rcx        ; n
.text:00000000000145E9                 mov     [rbp+n], rcx
.text:00000000000145F0                 call    _memcpy
.text:00000000000145F5                 mov     rcx, [rbp+n]
.text:00000000000145FC                 mov     r8, [rbp+var_3E0]
.text:0000000000014603                 add     rbx, rcx
.text:0000000000014606
.text:0000000000014606 loc_14606:                              ; CODE XREF: vasnprintf+374↑j
.text:0000000000014606                 mov     rsi, [r13+30h]  ; src
.text:000000000001460A                 mov     rdx, [r13+38h]
.text:000000000001460E                 cmp     rsi, rdx
.text:0000000000014611                 jz      short loc_14643
.text:0000000000014613                 mov     rcx, rdx
.text:0000000000014616                 mov     rdi, rbx        ; dest
.text:0000000000014619                 mov     [rbp+var_3E0], r8
.text:0000000000014620                 sub     rcx, rsi
.text:0000000000014623                 mov     rdx, rcx        ; n
.text:0000000000014626                 mov     [rbp+n], rcx
.text:000000000001462D                 call    _memcpy
.text:0000000000014632                 mov     rcx, [rbp+n]
.text:0000000000014639                 mov     r8, [rbp+var_3E0]
.text:0000000000014640                 add     rbx, rcx
.text:0000000000014643
.text:0000000000014643 loc_14643:                              ; CODE XREF: vasnprintf+3B1↑j
.text:0000000000014643                 mov     edi, dword ptr [rbp+var_3D0]
.text:0000000000014649                 cmp     edi, 10h
.text:000000000001464C                 ja      short loc_1467B
.text:000000000001464E                 mov     eax, 1
.text:0000000000014653                 mov     ecx, edi
.text:0000000000014655                 shl     rax, cl
.text:0000000000014658                 test    eax, 14180h
.text:000000000001465D                 jnz     short loc_14674
.text:000000000001465F                 test    ah, 10h
.text:0000000000014662                 jnz     loc_14FC0
.text:0000000000014668                 test    ah, 6
.text:000000000001466B                 jz      short loc_1467B
.text:000000000001466D                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000014670                 add     rbx, 1
.text:0000000000014674
.text:0000000000014674 loc_14674:                              ; CODE XREF: vasnprintf+3FD↑j
.text:0000000000014674                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000014677                 add     rbx, 1
.text:000000000001467B
.text:000000000001467B loc_1467B:                              ; CODE XREF: vasnprintf+3EC↑j
.text:000000000001467B                                         ; vasnprintf+40B↑j ...
.text:000000000001467B                 movzx   eax, byte ptr [r13+48h]
.text:0000000000014680                 mov     byte ptr [rbx+1], 0
.text:0000000000014684                 mov     [rbx], al
.text:0000000000014686                 mov     rax, [r13+28h]
.text:000000000001468A                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001468E                 jz      loc_14DC0
.text:0000000000014694                 shl     rax, 5
.text:0000000000014698                 add     rax, r8
.text:000000000001469B                 cmp     dword ptr [rax], 5
.text:000000000001469E                 jnz     def_147BB       ; jumptable 00000000000147BB default case, case 0
.text:000000000001469E                                         ; jumptable 0000000000014D60 default case
.text:00000000000146A4                 mov     eax, [rax+10h]
.text:00000000000146A7                 mov     dword ptr [rbp+var_3E0], 1
.text:00000000000146B1                 mov     [rbp+var_3B8], eax
.text:00000000000146B7
.text:00000000000146B7 loc_146B7:                              ; CODE XREF: vasnprintf+B6A↓j
.text:00000000000146B7                 mov     rax, [r13+40h]
.text:00000000000146BB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000146BF                 jz      short loc_146EC
.text:00000000000146C1                 shl     rax, 5
.text:00000000000146C5                 add     r8, rax
.text:00000000000146C8                 cmp     dword ptr [r8], 5
.text:00000000000146CC                 jnz     def_147BB       ; jumptable 00000000000147BB default case, case 0
.text:00000000000146CC                                         ; jumptable 0000000000014D60 default case
.text:00000000000146D2                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000146D8                 mov     edx, [r8+10h]
.text:00000000000146DC                 mov     [rbp+rax*4+var_3B8], edx
.text:00000000000146E3                 lea     eax, [rax+1]
.text:00000000000146E6                 mov     dword ptr [rbp+var_3E0], eax
.text:00000000000146EC
.text:00000000000146EC loc_146EC:                              ; CODE XREF: vasnprintf+45F↑j
.text:00000000000146EC                 mov     rax, r14
.text:00000000000146EF                 xor     edx, edx
.text:00000000000146F1                 add     rax, 2
.text:00000000000146F5                 jb      loc_1535C
.text:00000000000146FB                 cmp     r12, rax
.text:00000000000146FE                 jnb     short loc_1474B
.text:0000000000014700                 test    r12, r12
.text:0000000000014703                 jnz     loc_14F28
.text:0000000000014709                 cmp     rax, 0Ch
.text:000000000001470D                 ja      loc_14F40
.text:0000000000014713                 mov     r12d, 0Ch
.text:0000000000014719
.text:0000000000014719 loc_14719:                              ; CODE XREF: vasnprintf+CD4↓j
.text:0000000000014719                 cmp     r15, [rbp+src]
.text:0000000000014720                 setz    dl
.text:0000000000014723                 test    r15, r15
.text:0000000000014726                 jz      loc_14F70
.text:000000000001472C
.text:000000000001472C loc_1472C:                              ; CODE XREF: vasnprintf+D03↓j
.text:000000000001472C                 test    dl, dl
.text:000000000001472E                 jnz     loc_14F70
.text:0000000000014734                 mov     rsi, r12        ; size
.text:0000000000014737                 mov     rdi, r15        ; ptr
.text:000000000001473A                 call    _realloc
.text:000000000001473F                 test    rax, rax
.text:0000000000014742                 jz      loc_143C5
.text:0000000000014748                 mov     r15, rax
.text:000000000001474B
.text:000000000001474B loc_1474B:                              ; CODE XREF: vasnprintf+49E↑j
.text:000000000001474B                                         ; vasnprintf+D53↓j ...
.text:000000000001474B                 mov     byte ptr [r15+r14], 0
.text:0000000000014750                 call    ___errno_location
.text:0000000000014755                 mov     [rbp+n], rax
.text:000000000001475C                 mov     eax, [rax]
.text:000000000001475E                 mov     [rbp+var_3F8], rbx
.text:0000000000014765                 mov     [rbp-424h], eax
.text:000000000001476B                 nop     dword ptr [rax+rax+00h]
.text:0000000000014770
.text:0000000000014770 loc_14770:                              ; CODE XREF: vasnprintf+637↓j
.text:0000000000014770                                         ; vasnprintf+68D↓j ...
.text:0000000000014770                 mov     rax, [rbp+n]
.text:0000000000014777                 mov     rbx, r12
.text:000000000001477A                 mov     r10d, 7FFFFFFFh
.text:0000000000014780                 sub     rbx, r14
.text:0000000000014783                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:000000000001478D                 cmp     rbx, 7FFFFFFFh
.text:0000000000014794                 mov     dword ptr [rax], 0
.text:000000000001479A                 mov     eax, dword ptr [rbp+var_3D0]
.text:00000000000147A0                 cmovbe  r10, rbx
.text:00000000000147A4                 cmp     eax, 11h        ; switch 18 cases
.text:00000000000147A7                 ja      def_147BB       ; jumptable 00000000000147BB default case, case 0
.text:00000000000147A7                                         ; jumptable 0000000000014D60 default case
.text:00000000000147AD                 lea     rsi, jpt_147BB
.text:00000000000147B4                 movsxd  rax, ds:(jpt_147BB - 18EA0h)[rsi+rax*4]
.text:00000000000147B8                 add     rax, rsi
.text:00000000000147BB                 jmp     rax             ; switch jump
.text:00000000000147BB ; ---------------------------------------------------------------------------
.text:00000000000147BD                 align 20h
.text:00000000000147C0
.text:00000000000147C0 loc_147C0:                              ; CODE XREF: vasnprintf+55B↑j
.text:00000000000147C0                                         ; DATA XREF: .rodata:jpt_147BB↓o
.text:00000000000147C0                 mov     rax, [r13+50h]  ; jumptable 00000000000147BB cases 7-10,15-17
.text:00000000000147C4                 lea     rdi, [r15+r14]
.text:00000000000147C8                 shl     rax, 5
.text:00000000000147CC                 add     rax, [rbp+var_3A8]
.text:00000000000147D3                 mov     r9, [rax+10h]
.text:00000000000147D7                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000147DD                 cmp     eax, 1
.text:00000000000147E0                 jz      loc_14CA8
.text:00000000000147E6                 cmp     eax, 2
.text:00000000000147E9                 jz      loc_14C90
.text:00000000000147EF                 sub     rsp, 8
.text:00000000000147F3                 push    [rbp+var_3F0]
.text:00000000000147F9
.text:00000000000147F9 loc_147F9:                              ; CODE XREF: vasnprintf+CBE↓j
.text:00000000000147F9                 mov     r8, [rbp+var_3D8]
.text:0000000000014800                 mov     rsi, r10
.text:0000000000014803                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000001480A                 mov     edx, 1
.text:000000000001480F                 xor     eax, eax
.text:0000000000014811                 mov     [rbp+var_430], r10
.text:0000000000014818                 call    ___snprintf_chk
.text:000000000001481D                 pop     rsi
.text:000000000001481E                 pop     rdi
.text:000000000001481F                 mov     r10, [rbp+var_430]
.text:0000000000014826
.text:0000000000014826 loc_14826:                              ; CODE XREF: vasnprintf+83D↓j
.text:0000000000014826                                         ; vasnprintf+8BE↓j ...
.text:0000000000014826                 mov     ecx, [rbp+var_3BC]
.text:000000000001482C                 test    ecx, ecx
.text:000000000001482E                 js      loc_1496C
.text:0000000000014834
.text:0000000000014834 loc_14834:                              ; CODE XREF: vasnprintf+706↓j
.text:0000000000014834                 movsxd  rdx, ecx
.text:0000000000014837                 cmp     rdx, r10
.text:000000000001483A                 jnb     short loc_1484A
.text:000000000001483C                 add     rdx, r15
.text:000000000001483F                 cmp     byte ptr [rdx+r14], 0
.text:0000000000014844                 jnz     def_147BB       ; jumptable 00000000000147BB default case, case 0
.text:0000000000014844                                         ; jumptable 0000000000014D60 default case
.text:000000000001484A
.text:000000000001484A loc_1484A:                              ; CODE XREF: vasnprintf+5DA↑j
.text:000000000001484A                 cmp     ecx, eax
.text:000000000001484C                 jge     short loc_14856
.text:000000000001484E
.text:000000000001484E loc_1484E:                              ; CODE XREF: vasnprintf+71F↓j
.text:000000000001484E                 mov     [rbp+var_3BC], eax
.text:0000000000014854                 mov     ecx, eax
.text:0000000000014856
.text:0000000000014856 loc_14856:                              ; CODE XREF: vasnprintf+5EC↑j
.text:0000000000014856                 lea     eax, [rcx+1]
.text:0000000000014859                 cmp     rax, r10
.text:000000000001485C                 jb      loc_15090
.text:0000000000014862                 cmp     rbx, 7FFFFFFEh
.text:0000000000014869                 ja      loc_150B0
.text:000000000001486F                 lea     rsi, [r12+r12]
.text:0000000000014873                 lea     edx, [rcx+2]
.text:0000000000014876                 test    r12, r12
.text:0000000000014879                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000014880                 cmovns  rax, rsi
.text:0000000000014884                 add     rdx, r14
.text:0000000000014887                 jb      loc_15348
.text:000000000001488D                 cmp     rax, rdx
.text:0000000000014890                 cmovb   rax, rdx
.text:0000000000014894                 cmp     r12, rax
.text:0000000000014897                 jnb     loc_14770
.text:000000000001489D                 test    r12, r12
.text:00000000000148A0                 js      loc_143D1
.text:00000000000148A6                 cmp     rsi, rax
.text:00000000000148A9                 mov     r12, rsi
.text:00000000000148AC                 jnb     short loc_148BB
.text:00000000000148AE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000148B2                 jz      loc_143D1
.text:00000000000148B8                 mov     r12, rax
.text:00000000000148BB
.text:00000000000148BB loc_148BB:                              ; CODE XREF: vasnprintf+64C↑j
.text:00000000000148BB                 cmp     r15, [rbp+src]
.text:00000000000148C2                 setz    bl
.text:00000000000148C5                 test    r15, r15
.text:00000000000148C8                 jz      loc_14C50
.text:00000000000148CE                 test    bl, bl
.text:00000000000148D0                 jnz     loc_14C50
.text:00000000000148D6                 mov     rsi, r12        ; size
.text:00000000000148D9                 mov     rdi, r15        ; ptr
.text:00000000000148DC                 call    _realloc
.text:00000000000148E1                 test    rax, rax
.text:00000000000148E4                 jz      loc_143D1
.text:00000000000148EA                 mov     r15, rax
.text:00000000000148ED                 jmp     loc_14770
.text:00000000000148ED ; ---------------------------------------------------------------------------
.text:00000000000148F2                 align 8
.text:00000000000148F8
.text:00000000000148F8 loc_148F8:                              ; CODE XREF: vasnprintf+55B↑j
.text:00000000000148F8                                         ; DATA XREF: .rodata:jpt_147BB↓o
.text:00000000000148F8                 mov     rax, [r13+50h]  ; jumptable 00000000000147BB cases 5,6,13,14
.text:00000000000148FC                 lea     rdi, [r15+r14]
.text:0000000000014900                 shl     rax, 5
.text:0000000000014904                 add     rax, [rbp+var_3A8]
.text:000000000001490B                 mov     r9d, [rax+10h]
.text:000000000001490F                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000014915                 cmp     eax, 1
.text:0000000000014918                 jz      loc_14B50
.text:000000000001491E
.text:000000000001491E loc_1491E:                              ; CODE XREF: vasnprintf+8E9↓j
.text:000000000001491E                                         ; vasnprintf+9B1↓j ...
.text:000000000001491E                 cmp     eax, 2
.text:0000000000014921                 jz      loc_14B98
.text:0000000000014927
.text:0000000000014927 loc_14927:                              ; CODE XREF: vasnprintf+92E↓j
.text:0000000000014927                 sub     rsp, 8
.text:000000000001492B                 push    [rbp+var_3F0]
.text:0000000000014931
.text:0000000000014931 loc_14931:                              ; CODE XREF: vasnprintf+8FF↓j
.text:0000000000014931                 mov     r8, [rbp+var_3D8]
.text:0000000000014938                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000001493F                 mov     edx, 1
.text:0000000000014944                 mov     rsi, r10
.text:0000000000014947                 xor     eax, eax
.text:0000000000014949                 mov     [rbp+var_430], r10
.text:0000000000014950                 call    ___snprintf_chk
.text:0000000000014955                 pop     rdx
.text:0000000000014956                 pop     rcx
.text:0000000000014957                 mov     ecx, [rbp+var_3BC]
.text:000000000001495D                 mov     r10, [rbp+var_430]
.text:0000000000014964                 test    ecx, ecx
.text:0000000000014966                 jns     loc_14834
.text:000000000001496C
.text:000000000001496C loc_1496C:                              ; CODE XREF: vasnprintf+5CE↑j
.text:000000000001496C                 mov     rdi, [rbp+var_3F8]
.text:0000000000014973                 cmp     byte ptr [rdi+1], 0
.text:0000000000014977                 jnz     loc_14CB8
.text:000000000001497D                 test    eax, eax
.text:000000000001497F                 jns     loc_1484E
.text:0000000000014985                 mov     rax, [rbp+n]
.text:000000000001498C                 mov     ebx, [rax]
.text:000000000001498E                 test    ebx, ebx
.text:0000000000014990                 jnz     short loc_149B0
.text:0000000000014992                 movzx   eax, byte ptr [r13+48h]
.text:0000000000014997                 mov     ebx, 16h
.text:000000000001499C                 and     eax, 0FFFFFFEFh
.text:000000000001499F                 cmp     al, 63h ; 'c'
.text:00000000000149A1                 mov     eax, 54h ; 'T'
.text:00000000000149A6                 cmovz   ebx, eax
.text:00000000000149A9                 nop     dword ptr [rax+00000000h]
.text:00000000000149B0
.text:00000000000149B0 loc_149B0:                              ; CODE XREF: vasnprintf+730↑j
.text:00000000000149B0                 cmp     r15, [rbp+src]
.text:00000000000149B7                 jz      short loc_149C2
.text:00000000000149B9                 test    r15, r15
.text:00000000000149BC                 jnz     loc_1516C
.text:00000000000149C2
.text:00000000000149C2 loc_149C2:                              ; CODE XREF: vasnprintf+757↑j
.text:00000000000149C2                                         ; vasnprintf+F14↓j
.text:00000000000149C2                 mov     rax, [rbp+ptr]
.text:00000000000149C9                 test    rax, rax
.text:00000000000149CC                 jz      short loc_149D6
.text:00000000000149CE                 mov     rdi, rax        ; ptr
.text:00000000000149D1                 call    free
.text:00000000000149D6
.text:00000000000149D6 loc_149D6:                              ; CODE XREF: vasnprintf+76C↑j
.text:00000000000149D6                 mov     rax, [rbp+var_408]
.text:00000000000149DD                 mov     rdi, [rbp+var_2B8] ; ptr
.text:00000000000149E4                 add     rax, 20h ; ' '
.text:00000000000149E8                 cmp     rdi, rax
.text:00000000000149EB                 jz      short loc_149F2
.text:00000000000149ED                 call    free
.text:00000000000149F2
.text:00000000000149F2 loc_149F2:                              ; CODE XREF: vasnprintf+78B↑j
.text:00000000000149F2                 mov     rax, [rbp+var_410]
.text:00000000000149F9                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000014A00                 add     rax, 10h
.text:0000000000014A04                 cmp     rdi, rax
.text:0000000000014A07                 jz      short loc_14A0E
.text:0000000000014A09                 call    free
.text:0000000000014A0E
.text:0000000000014A0E loc_14A0E:                              ; CODE XREF: vasnprintf+7A7↑j
.text:0000000000014A0E                 mov     rax, [rbp+n]
.text:0000000000014A15                 xor     r15d, r15d
.text:0000000000014A18                 mov     [rax], ebx
.text:0000000000014A1A                 jmp     loc_1443F
.text:0000000000014A1A ; ---------------------------------------------------------------------------
.text:0000000000014A1F                 align 20h
.text:0000000000014A20
.text:0000000000014A20 loc_14A20:                              ; CODE XREF: vasnprintf+55B↑j
.text:0000000000014A20                                         ; DATA XREF: .rodata:jpt_147BB↓o
.text:0000000000014A20                 mov     rax, [r13+50h]  ; jumptable 00000000000147BB case 12
.text:0000000000014A24                 lea     rdi, [r15+r14]
.text:0000000000014A28                 shl     rax, 5
.text:0000000000014A2C                 add     rax, [rbp+var_3A8]
.text:0000000000014A33                 fld     tbyte ptr [rax+10h]
.text:0000000000014A36                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000014A3C                 cmp     eax, 1
.text:0000000000014A3F                 jz      loc_15070
.text:0000000000014A45                 cmp     eax, 2
.text:0000000000014A48                 jnz     loc_14F10
.text:0000000000014A4E                 mov     eax, [rbp+var_3B4]
.text:0000000000014A54                 sub     rsp, 8
.text:0000000000014A58                 push    [rbp+var_3F0]
.text:0000000000014A5E                 mov     r9d, [rbp+var_3B8]
.text:0000000000014A65                 mov     r8, [rbp+var_3D8]
.text:0000000000014A6C                 mov     rsi, r10
.text:0000000000014A6F                 sub     rsp, 18h
.text:0000000000014A73                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000014A7A                 mov     edx, 1
.text:0000000000014A7F                 fstp    [rsp+458h+var_450]
.text:0000000000014A83                 push    rax
.text:0000000000014A84                 xor     eax, eax
.text:0000000000014A86                 mov     [rbp+var_430], r10
.text:0000000000014A8D                 call    ___snprintf_chk
.text:0000000000014A92                 add     rsp, 30h
.text:0000000000014A96                 mov     r10, [rbp+var_430]
.text:0000000000014A9D                 jmp     loc_14826
.text:0000000000014A9D ; ---------------------------------------------------------------------------
.text:0000000000014AA2                 align 8
.text:0000000000014AA8
.text:0000000000014AA8 loc_14AA8:                              ; CODE XREF: vasnprintf+55B↑j
.text:0000000000014AA8                                         ; DATA XREF: .rodata:jpt_147BB↓o
.text:0000000000014AA8                 mov     rax, [r13+50h]  ; jumptable 00000000000147BB case 11
.text:0000000000014AAC                 lea     rdi, [r15+r14]
.text:0000000000014AB0                 shl     rax, 5
.text:0000000000014AB4                 add     rax, [rbp+var_3A8]
.text:0000000000014ABB                 movsd   xmm0, qword ptr [rax+10h]
.text:0000000000014AC0                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000014AC6                 cmp     eax, 1
.text:0000000000014AC9                 jz      loc_15060
.text:0000000000014ACF                 cmp     eax, 2
.text:0000000000014AD2                 jnz     loc_14ED0
.text:0000000000014AD8                 mov     eax, [rbp+var_3B4]
.text:0000000000014ADE                 push    [rbp+var_3F0]
.text:0000000000014AE4                 push    rax
.text:0000000000014AE5
.text:0000000000014AE5 loc_14AE5:                              ; CODE XREF: vasnprintf+E0A↓j
.text:0000000000014AE5                 mov     r9d, [rbp+var_3B8]
.text:0000000000014AEC                 mov     r8, [rbp+var_3D8]
.text:0000000000014AF3                 mov     rsi, r10
.text:0000000000014AF6                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000014AFD                 mov     edx, 1
.text:0000000000014B02                 mov     eax, 1
.text:0000000000014B07                 mov     [rbp+var_430], r10
.text:0000000000014B0E                 call    ___snprintf_chk
.text:0000000000014B13                 pop     r8
.text:0000000000014B15                 mov     r10, [rbp+var_430]
.text:0000000000014B1C                 pop     r9
.text:0000000000014B1E                 jmp     loc_14826
.text:0000000000014B1E ; ---------------------------------------------------------------------------
.text:0000000000014B23                 align 8
.text:0000000000014B28
.text:0000000000014B28 loc_14B28:                              ; CODE XREF: vasnprintf+55B↑j
.text:0000000000014B28                                         ; DATA XREF: .rodata:jpt_147BB↓o
.text:0000000000014B28                 mov     rax, [r13+50h]  ; jumptable 00000000000147BB case 4
.text:0000000000014B2C                 lea     rdi, [r15+r14]
.text:0000000000014B30                 shl     rax, 5
.text:0000000000014B34                 add     rax, [rbp+var_3A8]
.text:0000000000014B3B                 movzx   r9d, word ptr [rax+10h]
.text:0000000000014B40                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000014B46                 cmp     eax, 1
.text:0000000000014B49                 jnz     loc_1491E
.text:0000000000014B4F                 nop
.text:0000000000014B50
.text:0000000000014B50 loc_14B50:                              ; CODE XREF: vasnprintf+6B8↑j
.text:0000000000014B50                                         ; vasnprintf+929↓j ...
.text:0000000000014B50                 push    [rbp+var_3F0]
.text:0000000000014B56                 push    r9
.text:0000000000014B58
.text:0000000000014B58 loc_14B58:                              ; CODE XREF: vasnprintf+A50↓j
.text:0000000000014B58                 mov     r9d, [rbp+var_3B8]
.text:0000000000014B5F                 jmp     loc_14931
.text:0000000000014B5F ; ---------------------------------------------------------------------------
.text:0000000000014B64                 align 8
.text:0000000000014B68
.text:0000000000014B68 loc_14B68:                              ; CODE XREF: vasnprintf+55B↑j
.text:0000000000014B68                                         ; DATA XREF: .rodata:jpt_147BB↓o
.text:0000000000014B68                 mov     rax, [r13+50h]  ; jumptable 00000000000147BB case 3
.text:0000000000014B6C                 lea     rdi, [r15+r14]
.text:0000000000014B70                 shl     rax, 5
.text:0000000000014B74                 add     rax, [rbp+var_3A8]
.text:0000000000014B7B                 movsx   r9d, word ptr [rax+10h]
.text:0000000000014B80                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000014B86                 cmp     eax, 1
.text:0000000000014B89                 jz      short loc_14B50
.text:0000000000014B8B                 cmp     eax, 2
.text:0000000000014B8E                 jnz     loc_14927
.text:0000000000014B94                 nop     dword ptr [rax+00h]
.text:0000000000014B98
.text:0000000000014B98 loc_14B98:                              ; CODE XREF: vasnprintf+6C1↑j
.text:0000000000014B98                 sub     rsp, 8
.text:0000000000014B9C                 push    [rbp+var_3F0]
.text:0000000000014BA2                 push    r9
.text:0000000000014BA4
.text:0000000000014BA4 loc_14BA4:                              ; CODE XREF: vasnprintf+A3C↓j
.text:0000000000014BA4                 mov     eax, [rbp+var_3B4]
.text:0000000000014BAA                 push    rax
.text:0000000000014BAB
.text:0000000000014BAB loc_14BAB:                              ; CODE XREF: vasnprintf+E21↓j
.text:0000000000014BAB                 mov     r9d, [rbp+var_3B8]
.text:0000000000014BB2                 mov     r8, [rbp+var_3D8]
.text:0000000000014BB9                 mov     rsi, r10
.text:0000000000014BBC                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000014BC3                 mov     edx, 1
.text:0000000000014BC8                 xor     eax, eax
.text:0000000000014BCA                 mov     [rbp+var_430], r10
.text:0000000000014BD1                 call    ___snprintf_chk
.text:0000000000014BD6                 add     rsp, 20h
.text:0000000000014BDA                 mov     r10, [rbp+var_430]
.text:0000000000014BE1                 jmp     loc_14826
.text:0000000000014BE1 ; ---------------------------------------------------------------------------
.text:0000000000014BE6                 align 10h
.text:0000000000014BF0
.text:0000000000014BF0 loc_14BF0:                              ; CODE XREF: vasnprintf+55B↑j
.text:0000000000014BF0                                         ; DATA XREF: .rodata:jpt_147BB↓o
.text:0000000000014BF0                 mov     rax, [r13+50h]  ; jumptable 00000000000147BB case 2
.text:0000000000014BF4                 lea     rdi, [r15+r14]
.text:0000000000014BF8                 shl     rax, 5
.text:0000000000014BFC                 add     rax, [rbp+var_3A8]
.text:0000000000014C03                 movzx   r9d, byte ptr [rax+10h]
.text:0000000000014C08                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000014C0E                 cmp     eax, 1
.text:0000000000014C11                 jnz     loc_1491E
.text:0000000000014C17                 jmp     loc_14B50
.text:0000000000014C17 ; ---------------------------------------------------------------------------
.text:0000000000014C1C                 align 20h
.text:0000000000014C20
.text:0000000000014C20 loc_14C20:                              ; CODE XREF: vasnprintf+55B↑j
.text:0000000000014C20                                         ; DATA XREF: .rodata:jpt_147BB↓o
.text:0000000000014C20                 mov     rax, [r13+50h]  ; jumptable 00000000000147BB case 1
.text:0000000000014C24                 lea     rdi, [r15+r14]
.text:0000000000014C28                 shl     rax, 5
.text:0000000000014C2C                 add     rax, [rbp+var_3A8]
.text:0000000000014C33                 movsx   r9d, byte ptr [rax+10h]
.text:0000000000014C38                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000014C3E                 cmp     eax, 1
.text:0000000000014C41                 jnz     loc_1491E
.text:0000000000014C47                 jmp     loc_14B50
.text:0000000000014C47 ; ---------------------------------------------------------------------------
.text:0000000000014C4C                 align 10h
.text:0000000000014C50
.text:0000000000014C50 loc_14C50:                              ; CODE XREF: vasnprintf+668↑j
.text:0000000000014C50                                         ; vasnprintf+670↑j
.text:0000000000014C50                 mov     rdi, r12        ; size
.text:0000000000014C53                 call    _malloc
.text:0000000000014C58                 test    rax, rax
.text:0000000000014C5B                 mov     rcx, rax
.text:0000000000014C5E                 jz      loc_143D1
.text:0000000000014C64                 test    r14, r14
.text:0000000000014C67                 jz      loc_14D20
.text:0000000000014C6D                 test    bl, bl
.text:0000000000014C6F                 jz      loc_14D20
.text:0000000000014C75                 mov     rsi, r15        ; src
.text:0000000000014C78                 mov     rdx, r14        ; n
.text:0000000000014C7B                 mov     rdi, rax        ; dest
.text:0000000000014C7E                 call    _memcpy
.text:0000000000014C83                 mov     r15, rax
.text:0000000000014C86                 jmp     loc_14770
.text:0000000000014C86 ; ---------------------------------------------------------------------------
.text:0000000000014C8B                 align 10h
.text:0000000000014C90
.text:0000000000014C90 loc_14C90:                              ; CODE XREF: vasnprintf+589↑j
.text:0000000000014C90                 sub     rsp, 8
.text:0000000000014C94                 push    [rbp+var_3F0]
.text:0000000000014C9A                 push    r9
.text:0000000000014C9C                 jmp     loc_14BA4
.text:0000000000014C9C ; ---------------------------------------------------------------------------
.text:0000000000014CA1                 align 8
.text:0000000000014CA8
.text:0000000000014CA8 loc_14CA8:                              ; CODE XREF: vasnprintf+580↑j
.text:0000000000014CA8                 push    [rbp+var_3F0]
.text:0000000000014CAE                 push    r9
.text:0000000000014CB0                 jmp     loc_14B58
.text:0000000000014CB0 ; ---------------------------------------------------------------------------
.text:0000000000014CB5                 align 8
.text:0000000000014CB8
.text:0000000000014CB8 loc_14CB8:                              ; CODE XREF: vasnprintf+717↑j
.text:0000000000014CB8                 mov     byte ptr [rdi+1], 0
.text:0000000000014CBC                 jmp     loc_14770
.text:0000000000014CBC ; ---------------------------------------------------------------------------
.text:0000000000014CC1                 align 8
.text:0000000000014CC8
.text:0000000000014CC8 loc_14CC8:                              ; CODE XREF: vasnprintf+2D3↑j
.text:0000000000014CC8                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000014CCC                 jnz     def_147BB       ; jumptable 00000000000147BB default case, case 0
.text:0000000000014CCC                                         ; jumptable 0000000000014D60 default case
.text:0000000000014CD2                 mov     rax, r14
.text:0000000000014CD5                 add     rax, 1
.text:0000000000014CD9                 mov     rbx, rax
.text:0000000000014CDC                 jnb     loc_14D68
.text:0000000000014CE2                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000014CE6                 jnz     loc_143C5
.text:0000000000014CEC                 mov     rbx, r12
.text:0000000000014CEF
.text:0000000000014CEF loc_14CEF:                              ; CODE XREF: vasnprintf+B0B↓j
.text:0000000000014CEF                                         ; vasnprintf+B58↓j ...
.text:0000000000014CEF                 mov     byte ptr [r15+r14], 25h ; '%'
.text:0000000000014CF4
.text:0000000000014CF4 loc_14CF4:                              ; CODE XREF: vasnprintf+C46↓j
.text:0000000000014CF4                                         ; vasnprintf+D76↓j ...
.text:0000000000014CF4                 mov     r8, [r13+8]
.text:0000000000014CF8                 add     r13, 58h ; 'X'
.text:0000000000014CFC                 mov     rcx, [r13+0]
.text:0000000000014D00                 add     [rbp+var_400], 1
.text:0000000000014D08                 cmp     rcx, r8
.text:0000000000014D0B                 jnz     loc_143A9
.text:0000000000014D11
.text:0000000000014D11 loc_14D11:                              ; CODE XREF: vasnprintf+143↑j
.text:0000000000014D11                 mov     r14, rbx
.text:0000000000014D14                 jmp     loc_14513
.text:0000000000014D14 ; ---------------------------------------------------------------------------
.text:0000000000014D19                 align 20h
.text:0000000000014D20
.text:0000000000014D20 loc_14D20:                              ; CODE XREF: vasnprintf+A07↑j
.text:0000000000014D20                                         ; vasnprintf+A0F↑j
.text:0000000000014D20                 mov     r15, rcx
.text:0000000000014D23                 jmp     loc_14770
.text:0000000000014D28 ; ---------------------------------------------------------------------------
.text:0000000000014D28
.text:0000000000014D28 loc_14D28:                              ; CODE XREF: vasnprintf+9A↑j
.text:0000000000014D28                                         ; vasnprintf+AE↑j ...
.text:0000000000014D28                 call    ___errno_location
.text:0000000000014D2D                 mov     [rbp+n], rax
.text:0000000000014D34                 jmp     loc_143F7
.text:0000000000014D34 ; ---------------------------------------------------------------------------
.text:0000000000014D39                 align 20h
.text:0000000000014D40
.text:0000000000014D40 loc_14D40:                              ; CODE XREF: vasnprintf+2FC↑j
.text:0000000000014D40                 mov     edx, edi
.text:0000000000014D42                 sub     edx, 12h        ; switch 5 cases
.text:0000000000014D45                 cmp     edx, 4
.text:0000000000014D48                 ja      def_147BB       ; jumptable 00000000000147BB default case, case 0
.text:0000000000014D48                                         ; jumptable 0000000000014D60 default case
.text:0000000000014D4E                 lea     rdi, jpt_14D60
.text:0000000000014D55                 mov     rax, [rax+10h]
.text:0000000000014D59                 movsxd  rdx, ds:(jpt_14D60 - 18EE8h)[rdi+rdx*4]
.text:0000000000014D5D                 add     rdx, rdi
.text:0000000000014D60                 jmp     rdx             ; switch jump
.text:0000000000014D60 ; ---------------------------------------------------------------------------
.text:0000000000014D62                 align 8
.text:0000000000014D68
.text:0000000000014D68 loc_14D68:                              ; CODE XREF: vasnprintf+A7C↑j
.text:0000000000014D68                 cmp     r12, rax
.text:0000000000014D6B                 jnb     short loc_14CEF
.text:0000000000014D6D                 test    r12, r12
.text:0000000000014D70                 jnz     loc_15140
.text:0000000000014D76                 cmp     rax, 0Ch
.text:0000000000014D7A                 ja      loc_15152
.text:0000000000014D80                 mov     r12d, 0Ch
.text:0000000000014D86
.text:0000000000014D86 loc_14D86:                              ; CODE XREF: vasnprintf+EEC↓j
.text:0000000000014D86                                         ; vasnprintf+EFF↓j
.text:0000000000014D86                 cmp     r15, [rbp+src]
.text:0000000000014D8D                 setz    dl
.text:0000000000014D90                 test    r15, r15
.text:0000000000014D93                 jz      loc_15000
.text:0000000000014D99                 test    dl, dl
.text:0000000000014D9B                 jnz     loc_15000
.text:0000000000014DA1                 mov     rsi, r12        ; size
.text:0000000000014DA4                 mov     rdi, r15        ; ptr
.text:0000000000014DA7                 call    _realloc
.text:0000000000014DAC                 test    rax, rax
.text:0000000000014DAF                 jz      loc_14EAB
.text:0000000000014DB5                 mov     r15, rax
.text:0000000000014DB8                 jmp     loc_14CEF
.text:0000000000014DB8 ; ---------------------------------------------------------------------------
.text:0000000000014DBD                 align 20h
.text:0000000000014DC0
.text:0000000000014DC0 loc_14DC0:                              ; CODE XREF: vasnprintf+42E↑j
.text:0000000000014DC0                 mov     dword ptr [rbp+var_3E0], 0
.text:0000000000014DCA                 jmp     loc_146B7
.text:0000000000014DCA ; ---------------------------------------------------------------------------
.text:0000000000014DCF                 align 10h
.text:0000000000014DD0
.text:0000000000014DD0 loc_14DD0:                              ; CODE XREF: vasnprintf+240↑j
.text:0000000000014DD0                 js      loc_143C5
.text:0000000000014DD6                 add     r12, r12
.text:0000000000014DD9                 cmp     r12, rax
.text:0000000000014DDC                 jnb     loc_144B6
.text:0000000000014DE2
.text:0000000000014DE2 loc_14DE2:                              ; CODE XREF: vasnprintf+24A↑j
.text:0000000000014DE2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000014DE6                 jz      loc_143C5
.text:0000000000014DEC                 cmp     r15, [rbp+src]
.text:0000000000014DF3                 mov     r12, rax
.text:0000000000014DF6                 setz    dl
.text:0000000000014DF9                 test    r15, r15
.text:0000000000014DFC                 jnz     loc_144C9
.text:0000000000014E02                 nop     word ptr [rax+rax+00h]
.text:0000000000014E08
.text:0000000000014E08 loc_14E08:                              ; CODE XREF: vasnprintf+263↑j
.text:0000000000014E08                                         ; vasnprintf+26B↑j
.text:0000000000014E08                 mov     rdi, r12        ; size
.text:0000000000014E0B                 mov     [rbp+var_3E0], r8
.text:0000000000014E12                 mov     byte ptr [rbp+var_3D0], dl
.text:0000000000014E18                 mov     [rbp+n], rcx
.text:0000000000014E1F                 call    _malloc
.text:0000000000014E24                 test    rax, rax
.text:0000000000014E27                 mov     r9, rax
.text:0000000000014E2A                 mov     rcx, [rbp+n]
.text:0000000000014E31                 movzx   edx, byte ptr [rbp+var_3D0]
.text:0000000000014E38                 mov     r8, [rbp+var_3E0]
.text:0000000000014E3F                 jz      loc_143C5
.text:0000000000014E45                 test    rbx, rbx
.text:0000000000014E48                 jz      loc_15050
.text:0000000000014E4E                 test    dl, dl
.text:0000000000014E50                 jz      loc_15050
.text:0000000000014E56                 mov     rsi, r15        ; src
.text:0000000000014E59                 mov     rdx, rbx        ; n
.text:0000000000014E5C                 mov     rdi, rax        ; dest
.text:0000000000014E5F                 mov     [rbp+var_3D0], r8
.text:0000000000014E66                 mov     [rbp+n], rcx
.text:0000000000014E6D                 call    _memcpy
.text:0000000000014E72                 mov     rcx, [rbp+n]
.text:0000000000014E79                 mov     r15, rax
.text:0000000000014E7C                 mov     r8, [rbp+var_3D0]
.text:0000000000014E83                 jmp     loc_14504
.text:0000000000014E83 ; ---------------------------------------------------------------------------
.text:0000000000014E88                 align 10h
.text:0000000000014E90
.text:0000000000014E90 loc_14E90:                              ; CODE XREF: vasnprintf+15F↑j
.text:0000000000014E90                 mov     r14, r12
.text:0000000000014E93                 jmp     loc_14504
.text:0000000000014E93 ; ---------------------------------------------------------------------------
.text:0000000000014E98                 align 20h
.text:0000000000014EA0
.text:0000000000014EA0 loc_14EA0:                              ; CODE XREF: vasnprintf+B00↑j
.text:0000000000014EA0                                         ; DATA XREF: .rodata:jpt_14D60↓o
.text:0000000000014EA0                 mov     [rax], r14      ; jumptable 0000000000014D60 cases 21,22
.text:0000000000014EA3                 mov     rbx, r14
.text:0000000000014EA6                 jmp     loc_14CF4
.text:0000000000014EAB ; ---------------------------------------------------------------------------
.text:0000000000014EAB
.text:0000000000014EAB loc_14EAB:                              ; CODE XREF: vasnprintf+29B↑j
.text:0000000000014EAB                                         ; vasnprintf+B4F↑j ...
.text:0000000000014EAB                 call    ___errno_location
.text:0000000000014EB0                 mov     [rbp+n], rax
.text:0000000000014EB7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000014EC0
.text:0000000000014EC0 loc_14EC0:                              ; CODE XREF: vasnprintf+17D↑j
.text:0000000000014EC0                 mov     rdi, r15        ; ptr
.text:0000000000014EC3                 call    free
.text:0000000000014EC8                 jmp     loc_143E3
.text:0000000000014EC8 ; ---------------------------------------------------------------------------
.text:0000000000014ECD                 align 10h
.text:0000000000014ED0
.text:0000000000014ED0 loc_14ED0:                              ; CODE XREF: vasnprintf+872↑j
.text:0000000000014ED0                 mov     r9, [rbp+var_3F0]
.text:0000000000014ED7                 mov     r8, [rbp+var_3D8]
.text:0000000000014EDE                 mov     rsi, r10
.text:0000000000014EE1                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000014EE8                 mov     edx, 1
.text:0000000000014EED                 mov     eax, 1
.text:0000000000014EF2                 mov     [rbp+var_430], r10
.text:0000000000014EF9                 call    ___snprintf_chk
.text:0000000000014EFE                 mov     r10, [rbp+var_430]
.text:0000000000014F05                 jmp     loc_14826
.text:0000000000014F05 ; ---------------------------------------------------------------------------
.text:0000000000014F0A                 align 10h
.text:0000000000014F10
.text:0000000000014F10 loc_14F10:                              ; CODE XREF: vasnprintf+7E8↑j
.text:0000000000014F10                 sub     rsp, 10h
.text:0000000000014F14                 mov     r9, [rbp+var_3F0]
.text:0000000000014F1B                 fstp    [rsp+440h+var_440]
.text:0000000000014F1E                 jmp     loc_147F9
.text:0000000000014F1E ; ---------------------------------------------------------------------------
.text:0000000000014F23                 align 8
.text:0000000000014F28
.text:0000000000014F28 loc_14F28:                              ; CODE XREF: vasnprintf+4A3↑j
.text:0000000000014F28                 js      loc_143C5
.text:0000000000014F2E                 add     r12, r12
.text:0000000000014F31                 cmp     r12, rax
.text:0000000000014F34                 jnb     loc_14719
.text:0000000000014F3A                 nop     word ptr [rax+rax+00h]
.text:0000000000014F40
.text:0000000000014F40 loc_14F40:                              ; CODE XREF: vasnprintf+4AD↑j
.text:0000000000014F40                                         ; vasnprintf+1114↓j
.text:0000000000014F40                 test    rdx, rdx
.text:0000000000014F43                 jnz     loc_143C5
.text:0000000000014F49                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000014F4D                 jz      loc_143C5
.text:0000000000014F53                 cmp     r15, [rbp+src]
.text:0000000000014F5A                 mov     r12, rax
.text:0000000000014F5D                 setz    dl
.text:0000000000014F60                 test    r15, r15
.text:0000000000014F63                 jnz     loc_1472C
.text:0000000000014F69                 nop     dword ptr [rax+00000000h]
.text:0000000000014F70
.text:0000000000014F70 loc_14F70:                              ; CODE XREF: vasnprintf+4C6↑j
.text:0000000000014F70                                         ; vasnprintf+4CE↑j
.text:0000000000014F70                 mov     rdi, r12        ; size
.text:0000000000014F73                 mov     byte ptr [rbp+n], dl
.text:0000000000014F79                 call    _malloc
.text:0000000000014F7E                 test    rax, rax
.text:0000000000014F81                 mov     rcx, rax
.text:0000000000014F84                 movzx   edx, byte ptr [rbp+n]
.text:0000000000014F8B                 jz      loc_143C5
.text:0000000000014F91                 test    r14, r14
.text:0000000000014F94                 jz      loc_15130
.text:0000000000014F9A                 test    dl, dl
.text:0000000000014F9C                 jz      loc_15130
.text:0000000000014FA2                 mov     rsi, r15        ; src
.text:0000000000014FA5                 mov     rdx, r14        ; n
.text:0000000000014FA8                 mov     rdi, rax        ; dest
.text:0000000000014FAB                 call    _memcpy
.text:0000000000014FB0                 mov     r15, rax
.text:0000000000014FB3                 jmp     loc_1474B
.text:0000000000014FB3 ; ---------------------------------------------------------------------------
.text:0000000000014FB8                 align 20h
.text:0000000000014FC0
.text:0000000000014FC0 loc_14FC0:                              ; CODE XREF: vasnprintf+402↑j
.text:0000000000014FC0                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:0000000000014FC3                 add     rbx, 1
.text:0000000000014FC7                 jmp     loc_1467B
.text:0000000000014FC7 ; ---------------------------------------------------------------------------
.text:0000000000014FCC                 align 10h
.text:0000000000014FD0
.text:0000000000014FD0 loc_14FD0:                              ; CODE XREF: vasnprintf+B00↑j
.text:0000000000014FD0                                         ; DATA XREF: .rodata:jpt_14D60↓o
.text:0000000000014FD0                 mov     [rax], r14b     ; jumptable 0000000000014D60 case 18
.text:0000000000014FD3                 mov     rbx, r14
.text:0000000000014FD6                 jmp     loc_14CF4
.text:0000000000014FD6 ; ---------------------------------------------------------------------------
.text:0000000000014FDB                 align 20h
.text:0000000000014FE0
.text:0000000000014FE0 loc_14FE0:                              ; CODE XREF: vasnprintf+B00↑j
.text:0000000000014FE0                                         ; DATA XREF: .rodata:jpt_14D60↓o
.text:0000000000014FE0                 mov     [rax], r14d     ; jumptable 0000000000014D60 case 20
.text:0000000000014FE3                 mov     rbx, r14
.text:0000000000014FE6                 jmp     loc_14CF4
.text:0000000000014FE6 ; ---------------------------------------------------------------------------
.text:0000000000014FEB                 align 10h
.text:0000000000014FF0
.text:0000000000014FF0 loc_14FF0:                              ; CODE XREF: vasnprintf+B00↑j
.text:0000000000014FF0                                         ; DATA XREF: .rodata:jpt_14D60↓o
.text:0000000000014FF0                 mov     [rax], r14w     ; jumptable 0000000000014D60 case 19
.text:0000000000014FF4                 mov     rbx, r14
.text:0000000000014FF7                 jmp     loc_14CF4
.text:0000000000014FF7 ; ---------------------------------------------------------------------------
.text:0000000000014FFC                 align 20h
.text:0000000000015000
.text:0000000000015000 loc_15000:                              ; CODE XREF: vasnprintf+B33↑j
.text:0000000000015000                                         ; vasnprintf+B3B↑j
.text:0000000000015000                 mov     rdi, r12        ; size
.text:0000000000015003                 mov     byte ptr [rbp+n], dl
.text:0000000000015009                 call    _malloc
.text:000000000001500E                 test    rax, rax
.text:0000000000015011                 mov     rcx, rax
.text:0000000000015014                 movzx   edx, byte ptr [rbp+n]
.text:000000000001501B                 jz      loc_143C5
.text:0000000000015021                 test    r14, r14
.text:0000000000015024                 jz      loc_15164
.text:000000000001502A                 test    dl, dl
.text:000000000001502C                 jz      loc_15164
.text:0000000000015032                 mov     rsi, r15        ; src
.text:0000000000015035                 mov     rdx, r14        ; n
.text:0000000000015038                 mov     rdi, rax        ; dest
.text:000000000001503B                 call    _memcpy
.text:0000000000015040                 mov     r15, rax
.text:0000000000015043                 jmp     loc_14CEF
.text:0000000000015043 ; ---------------------------------------------------------------------------
.text:0000000000015048                 align 10h
.text:0000000000015050
.text:0000000000015050 loc_15050:                              ; CODE XREF: vasnprintf+BE8↑j
.text:0000000000015050                                         ; vasnprintf+BF0↑j
.text:0000000000015050                 mov     r15, r9
.text:0000000000015053                 jmp     loc_14504
.text:0000000000015053 ; ---------------------------------------------------------------------------
.text:0000000000015058                 align 20h
.text:0000000000015060
.text:0000000000015060 loc_15060:                              ; CODE XREF: vasnprintf+869↑j
.text:0000000000015060                 sub     rsp, 8
.text:0000000000015064                 push    [rbp+var_3F0]
.text:000000000001506A                 jmp     loc_14AE5
.text:000000000001506A ; ---------------------------------------------------------------------------
.text:000000000001506F                 align 10h
.text:0000000000015070
.text:0000000000015070 loc_15070:                              ; CODE XREF: vasnprintf+7DF↑j
.text:0000000000015070                 sub     rsp, 8
.text:0000000000015074                 push    [rbp+var_3F0]
.text:000000000001507A                 sub     rsp, 10h
.text:000000000001507E                 fstp    [rsp+450h+var_450]
.text:0000000000015081                 jmp     loc_14BAB
.text:0000000000015081 ; ---------------------------------------------------------------------------
.text:0000000000015086                 align 10h
.text:0000000000015090
.text:0000000000015090 loc_15090:                              ; CODE XREF: vasnprintf+5FC↑j
.text:0000000000015090                 mov     rax, [rbp+n]
.text:0000000000015097                 mov     edi, [rbp-424h]
.text:000000000001509D                 movsxd  rbx, ecx
.text:00000000000150A0                 add     rbx, r14
.text:00000000000150A3                 mov     [rax], edi
.text:00000000000150A5                 jmp     loc_14CF4
.text:00000000000150A5 ; ---------------------------------------------------------------------------
.text:00000000000150AA                 align 10h
.text:00000000000150B0
.text:00000000000150B0 loc_150B0:                              ; CODE XREF: vasnprintf+609↑j
.text:00000000000150B0                 cmp     r15, [rbp+src]
.text:00000000000150B7                 jz      short loc_150C2
.text:00000000000150B9                 test    r15, r15
.text:00000000000150BC                 jnz     loc_15179
.text:00000000000150C2
.text:00000000000150C2 loc_150C2:                              ; CODE XREF: vasnprintf+E57↑j
.text:00000000000150C2                                         ; vasnprintf+F21↓j
.text:00000000000150C2                 mov     rax, [rbp+ptr]
.text:00000000000150C9                 test    rax, rax
.text:00000000000150CC                 jz      short loc_150D6
.text:00000000000150CE                 mov     rdi, rax        ; ptr
.text:00000000000150D1                 call    free
.text:00000000000150D6
.text:00000000000150D6 loc_150D6:                              ; CODE XREF: vasnprintf+E6C↑j
.text:00000000000150D6                 mov     rax, [rbp+var_408]
.text:00000000000150DD                 mov     rdi, [rbp+var_2B8] ; ptr
.text:00000000000150E4                 add     rax, 20h ; ' '
.text:00000000000150E8                 cmp     rdi, rax
.text:00000000000150EB                 jz      short loc_150F2
.text:00000000000150ED                 call    free
.text:00000000000150F2
.text:00000000000150F2 loc_150F2:                              ; CODE XREF: vasnprintf+E8B↑j
.text:00000000000150F2                 mov     rax, [rbp+var_410]
.text:00000000000150F9                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000015100                 add     rax, 10h
.text:0000000000015104                 cmp     rdi, rax
.text:0000000000015107                 jz      short loc_1510E
.text:0000000000015109                 call    free
.text:000000000001510E
.text:000000000001510E loc_1510E:                              ; CODE XREF: vasnprintf+EA7↑j
.text:000000000001510E                 mov     rax, [rbp+n]
.text:0000000000015115                 xor     r15d, r15d
.text:0000000000015118                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000001511E                 jmp     loc_1443F
.text:000000000001511E ; ---------------------------------------------------------------------------
.text:0000000000015123                 align 8
.text:0000000000015128
.text:0000000000015128 loc_15128:                              ; CODE XREF: vasnprintf+60↑j
.text:0000000000015128                 xor     r15d, r15d
.text:000000000001512B                 jmp     loc_1443F
.text:0000000000015130 ; ---------------------------------------------------------------------------
.text:0000000000015130
.text:0000000000015130 loc_15130:                              ; CODE XREF: vasnprintf+D34↑j
.text:0000000000015130                                         ; vasnprintf+D3C↑j
.text:0000000000015130                 mov     r15, rcx
.text:0000000000015133                 jmp     loc_1474B
.text:0000000000015133 ; ---------------------------------------------------------------------------
.text:0000000000015138                 align 20h
.text:0000000000015140
.text:0000000000015140 loc_15140:                              ; CODE XREF: vasnprintf+B10↑j
.text:0000000000015140                 js      loc_143C5
.text:0000000000015146                 add     r12, r12
.text:0000000000015149                 cmp     r12, rax
.text:000000000001514C                 jnb     loc_14D86
.text:0000000000015152
.text:0000000000015152 loc_15152:                              ; CODE XREF: vasnprintf+B1A↑j
.text:0000000000015152                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000015156                 jz      loc_143C5
.text:000000000001515C                 mov     r12, rax
.text:000000000001515F                 jmp     loc_14D86
.text:0000000000015164 ; ---------------------------------------------------------------------------
.text:0000000000015164
.text:0000000000015164 loc_15164:                              ; CODE XREF: vasnprintf+DC4↑j
.text:0000000000015164                                         ; vasnprintf+DCC↑j
.text:0000000000015164                 mov     r15, rcx
.text:0000000000015167                 jmp     loc_14CEF
.text:000000000001516C ; ---------------------------------------------------------------------------
.text:000000000001516C
.text:000000000001516C loc_1516C:                              ; CODE XREF: vasnprintf+75C↑j
.text:000000000001516C                 mov     rdi, r15        ; ptr
.text:000000000001516F                 call    free
.text:0000000000015174                 jmp     loc_149C2
.text:0000000000015179 ; ---------------------------------------------------------------------------
.text:0000000000015179
.text:0000000000015179 loc_15179:                              ; CODE XREF: vasnprintf+E5C↑j
.text:0000000000015179                 mov     rdi, r15        ; ptr
.text:000000000001517C                 call    free
.text:0000000000015181                 jmp     loc_150C2
.text:0000000000015186 ; ---------------------------------------------------------------------------
.text:0000000000015186
.text:0000000000015186 def_147BB:                              ; CODE XREF: vasnprintf+2DD↑j
.text:0000000000015186                                         ; vasnprintf+43E↑j ...
.text:0000000000015186                 call    _abort          ; jumptable 00000000000147BB default case, case 0
.text:0000000000015186                                         ; jumptable 0000000000014D60 default case
.text:0000000000015186 ; ---------------------------------------------------------------------------
.text:000000000001518B                 align 10h
.text:0000000000015190
.text:0000000000015190 loc_15190:                              ; CODE XREF: vasnprintf+73↑j
.text:0000000000015190                 mov     rax, [rbp+var_408]
.text:0000000000015197                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000001519E                 add     rax, 20h ; ' '
.text:00000000000151A2                 cmp     rdi, rax
.text:00000000000151A5                 jz      short loc_151AC
.text:00000000000151A7                 call    free
.text:00000000000151AC
.text:00000000000151AC loc_151AC:                              ; CODE XREF: vasnprintf+F45↑j
.text:00000000000151AC                 mov     rax, [rbp+var_410]
.text:00000000000151B3                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000151BA                 add     rax, 10h
.text:00000000000151BE                 cmp     rdi, rax
.text:00000000000151C1                 jz      short loc_151C8
.text:00000000000151C3                 call    free
.text:00000000000151C8
.text:00000000000151C8 loc_151C8:                              ; CODE XREF: vasnprintf+F61↑j
.text:00000000000151C8                 call    ___errno_location
.text:00000000000151CD                 xor     r15d, r15d
.text:00000000000151D0                 mov     dword ptr [rax], 16h
.text:00000000000151D6                 jmp     loc_1443F
.text:00000000000151DB ; ---------------------------------------------------------------------------
.text:00000000000151DB
.text:00000000000151DB loc_151DB:                              ; CODE XREF: vasnprintf+2C1↑j
.text:00000000000151DB                 mov     rbx, r14
.text:00000000000151DE                 xor     eax, eax
.text:00000000000151E0                 add     rbx, 1
.text:00000000000151E4                 jb      loc_152F0
.text:00000000000151EA                 cmp     r12, rbx
.text:00000000000151ED                 jnb     short loc_1523C
.text:00000000000151EF                 test    r12, r12
.text:00000000000151F2                 jnz     loc_15329
.text:00000000000151F8                 cmp     rbx, 0Ch
.text:00000000000151FC                 ja      loc_1530E
.text:0000000000015202                 mov     r12d, 0Ch
.text:0000000000015208
.text:0000000000015208 loc_15208:                              ; CODE XREF: vasnprintf+10C4↓j
.text:0000000000015208                                         ; vasnprintf+10D5↓j
.text:0000000000015208                 cmp     r15, [rbp+src]
.text:000000000001520F                 setz    r13b
.text:0000000000015213                 test    r15, r15
.text:0000000000015216                 jz      loc_152BC
.text:000000000001521C                 test    r13b, r13b
.text:000000000001521F                 jnz     loc_152BC
.text:0000000000015225                 mov     rsi, r12        ; size
.text:0000000000015228                 mov     rdi, r15        ; ptr
.text:000000000001522B                 call    _realloc
.text:0000000000015230                 test    rax, rax
.text:0000000000015233                 jz      loc_14EAB
.text:0000000000015239                 mov     r15, rax
.text:000000000001523C
.text:000000000001523C loc_1523C:                              ; CODE XREF: vasnprintf+F8D↑j
.text:000000000001523C                                         ; vasnprintf+108B↓j ...
.text:000000000001523C                 cmp     r15, [rbp+src]
.text:0000000000015243                 mov     byte ptr [r15+r14], 0
.text:0000000000015248                 jz      short loc_15261
.text:000000000001524A                 cmp     r12, rbx
.text:000000000001524D                 jbe     short loc_15261
.text:000000000001524F                 mov     rdi, r15        ; ptr
.text:0000000000015252                 mov     rsi, rbx        ; size
.text:0000000000015255                 call    _realloc
.text:000000000001525A                 test    rax, rax
.text:000000000001525D                 cmovnz  r15, rax
.text:0000000000015261
.text:0000000000015261 loc_15261:                              ; CODE XREF: vasnprintf+FE8↑j
.text:0000000000015261                                         ; vasnprintf+FED↑j
.text:0000000000015261                 mov     rax, [rbp+ptr]
.text:0000000000015268                 test    rax, rax
.text:000000000001526B                 jz      short loc_15275
.text:000000000001526D                 mov     rdi, rax        ; ptr
.text:0000000000015270                 call    free
.text:0000000000015275
.text:0000000000015275 loc_15275:                              ; CODE XREF: vasnprintf+100B↑j
.text:0000000000015275                 mov     rax, [rbp+var_408]
.text:000000000001527C                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000015283                 add     rax, 20h ; ' '
.text:0000000000015287                 cmp     rdi, rax
.text:000000000001528A                 jz      short loc_15291
.text:000000000001528C                 call    free
.text:0000000000015291
.text:0000000000015291 loc_15291:                              ; CODE XREF: vasnprintf+102A↑j
.text:0000000000015291                 mov     rax, [rbp+var_410]
.text:0000000000015298                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000001529F                 add     rax, 10h
.text:00000000000152A3                 cmp     rdi, rax
.text:00000000000152A6                 jz      short loc_152AD
.text:00000000000152A8                 call    free
.text:00000000000152AD
.text:00000000000152AD loc_152AD:                              ; CODE XREF: vasnprintf+1046↑j
.text:00000000000152AD                 mov     rax, [rbp+var_418]
.text:00000000000152B4                 mov     [rax], r14
.text:00000000000152B7                 jmp     loc_1443F
.text:00000000000152BC ; ---------------------------------------------------------------------------
.text:00000000000152BC
.text:00000000000152BC loc_152BC:                              ; CODE XREF: vasnprintf+FB6↑j
.text:00000000000152BC                                         ; vasnprintf+FBF↑j
.text:00000000000152BC                 mov     rdi, r12        ; size
.text:00000000000152BF                 call    _malloc
.text:00000000000152C4                 test    rax, rax
.text:00000000000152C7                 mov     rcx, rax
.text:00000000000152CA                 jz      loc_143C5
.text:00000000000152D0                 test    r14, r14
.text:00000000000152D3                 jz      short loc_15340
.text:00000000000152D5                 test    r13b, r13b
.text:00000000000152D8                 jz      short loc_15340
.text:00000000000152DA                 mov     rsi, r15        ; src
.text:00000000000152DD                 mov     rdx, r14        ; n
.text:00000000000152E0                 mov     rdi, rax        ; dest
.text:00000000000152E3                 call    _memcpy
.text:00000000000152E8                 mov     r15, rax
.text:00000000000152EB                 jmp     loc_1523C
.text:00000000000152F0 ; ---------------------------------------------------------------------------
.text:00000000000152F0
.text:00000000000152F0 loc_152F0:                              ; CODE XREF: vasnprintf+F84↑j
.text:00000000000152F0                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000152F4                 mov     eax, 1
.text:00000000000152F9                 jz      loc_1523C
.text:00000000000152FF                 test    r12, r12
.text:0000000000015302                 jz      loc_143C5
.text:0000000000015308                 js      loc_143C5
.text:000000000001530E
.text:000000000001530E loc_1530E:                              ; CODE XREF: vasnprintf+F9C↑j
.text:000000000001530E                                         ; vasnprintf+10DB↓j
.text:000000000001530E                 test    rax, rax
.text:0000000000015311                 jnz     loc_143C5
.text:0000000000015317                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000001531B                 jz      loc_143C5
.text:0000000000015321                 mov     r12, rbx
.text:0000000000015324                 jmp     loc_15208
.text:0000000000015329 ; ---------------------------------------------------------------------------
.text:0000000000015329
.text:0000000000015329 loc_15329:                              ; CODE XREF: vasnprintf+F92↑j
.text:0000000000015329                 js      loc_143C5
.text:000000000001532F                 add     r12, r12
.text:0000000000015332                 cmp     r12, rbx
.text:0000000000015335                 jnb     loc_15208
.text:000000000001533B                 jmp     short loc_1530E
.text:000000000001533B ; ---------------------------------------------------------------------------
.text:000000000001533D                 align 20h
.text:0000000000015340
.text:0000000000015340 loc_15340:                              ; CODE XREF: vasnprintf+1073↑j
.text:0000000000015340                                         ; vasnprintf+1078↑j
.text:0000000000015340                 mov     r15, rcx
.text:0000000000015343                 jmp     loc_1523C
.text:0000000000015348 ; ---------------------------------------------------------------------------
.text:0000000000015348
.text:0000000000015348 loc_15348:                              ; CODE XREF: vasnprintf+627↑j
.text:0000000000015348                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000001534C                 jz      loc_14770
.text:0000000000015352                 jmp     loc_143D1
.text:0000000000015357 ; ---------------------------------------------------------------------------
.text:0000000000015357
.text:0000000000015357 loc_15357:                              ; CODE XREF: vasnprintf+1EF↑j
.text:0000000000015357                 call    ___stack_chk_fail
.text:000000000001535C ; ---------------------------------------------------------------------------
.text:000000000001535C
.text:000000000001535C loc_1535C:                              ; CODE XREF: vasnprintf+495↑j
.text:000000000001535C                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000015360                 mov     edx, 1
.text:0000000000015365                 jz      loc_1474B
.text:000000000001536B                 test    r12, r12
.text:000000000001536E                 jz      loc_143C5
.text:0000000000015374                 jns     loc_14F40
.text:000000000001537A                 jmp     loc_143C5
.text:000000000001537A ; } // starts at 14260
.text:000000000001537A vasnprintf      endp
.text:000000000001537A
.text:000000000001537A ; ---------------------------------------------------------------------------
.text:000000000001537F                 align 20h
.text:0000000000015380
.text:0000000000015380 ; =============== S U B R O U T I N E =======================================
.text:0000000000015380
.text:0000000000015380
.text:0000000000015380                 public fopen_safer
.text:0000000000015380 fopen_safer     proc near               ; CODE XREF: randread_new+39↑p
.text:0000000000015380 ; __unwind {
.text:0000000000015380                 push    r12
.text:0000000000015382                 push    rbp
.text:0000000000015383                 mov     rbp, rsi
.text:0000000000015386                 push    rbx
.text:0000000000015387                 call    _fopen
.text:000000000001538C                 test    rax, rax
.text:000000000001538F                 mov     rbx, rax
.text:0000000000015392                 jz      short loc_153A1
.text:0000000000015394                 mov     rdi, rax        ; stream
.text:0000000000015397                 call    _fileno
.text:000000000001539C                 cmp     eax, 2
.text:000000000001539F                 jbe     short loc_153B0
.text:00000000000153A1
.text:00000000000153A1 loc_153A1:                              ; CODE XREF: fopen_safer+12↑j
.text:00000000000153A1                                         ; fopen_safer+5B↓j ...
.text:00000000000153A1                 mov     rax, rbx
.text:00000000000153A4                 pop     rbx
.text:00000000000153A5                 pop     rbp
.text:00000000000153A6                 pop     r12
.text:00000000000153A8                 retn
.text:00000000000153A8 ; ---------------------------------------------------------------------------
.text:00000000000153A9                 align 10h
.text:00000000000153B0
.text:00000000000153B0 loc_153B0:                              ; CODE XREF: fopen_safer+1F↑j
.text:00000000000153B0                 mov     edi, eax
.text:00000000000153B2                 call    dup_safer
.text:00000000000153B7                 test    eax, eax
.text:00000000000153B9                 mov     r12d, eax
.text:00000000000153BC                 js      short loc_153F8
.text:00000000000153BE                 mov     rdi, rbx        ; stream
.text:00000000000153C1                 call    rpl_fclose
.text:00000000000153C6                 test    eax, eax
.text:00000000000153C8                 jnz     short loc_153DD
.text:00000000000153CA                 mov     rsi, rbp        ; modes
.text:00000000000153CD                 mov     edi, r12d       ; fd
.text:00000000000153D0                 call    _fdopen
.text:00000000000153D5                 test    rax, rax
.text:00000000000153D8                 mov     rbx, rax
.text:00000000000153DB                 jnz     short loc_153A1
.text:00000000000153DD
.text:00000000000153DD loc_153DD:                              ; CODE XREF: fopen_safer+48↑j
.text:00000000000153DD                 call    ___errno_location
.text:00000000000153E2                 mov     ebp, [rax]
.text:00000000000153E4                 mov     rbx, rax
.text:00000000000153E7                 mov     edi, r12d       ; fd
.text:00000000000153EA                 call    _close
.text:00000000000153EF                 mov     [rbx], ebp
.text:00000000000153F1                 xor     ebx, ebx
.text:00000000000153F3                 jmp     short loc_153A1
.text:00000000000153F3 ; ---------------------------------------------------------------------------
.text:00000000000153F5                 align 8
.text:00000000000153F8
.text:00000000000153F8 loc_153F8:                              ; CODE XREF: fopen_safer+3C↑j
.text:00000000000153F8                 call    ___errno_location
.text:00000000000153FD                 mov     r12d, [rax]
.text:0000000000015400                 mov     rbp, rax
.text:0000000000015403                 mov     rdi, rbx        ; stream
.text:0000000000015406                 call    rpl_fclose
.text:000000000001540B                 xor     ebx, ebx
.text:000000000001540D                 mov     [rbp+0], r12d
.text:0000000000015411                 jmp     short loc_153A1
.text:0000000000015411 ; } // starts at 15380
.text:0000000000015411 fopen_safer     endp
.text:0000000000015411
.text:0000000000015411 ; ---------------------------------------------------------------------------
.text:0000000000015413                 align 20h
.text:0000000000015420
.text:0000000000015420 ; =============== S U B R O U T I N E =======================================
.text:0000000000015420
.text:0000000000015420
.text:0000000000015420                 public printf_fetchargs
.text:0000000000015420 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:0000000000015420 ; __unwind {
.text:0000000000015420                 cmp     qword ptr [rsi], 0
.text:0000000000015424                 mov     rax, [rsi+8]
.text:0000000000015428                 jz      short loc_1548D
.text:000000000001542A                 lea     r8, jpt_15456
.text:0000000000015431                 lea     r10, wide_null_string_2696
.text:0000000000015438                 lea     r9, aNull       ; "(NULL)"
.text:000000000001543F                 xor     ecx, ecx
.text:0000000000015441                 nop     dword ptr [rax+00000000h]
.text:0000000000015448
.text:0000000000015448 loc_15448:                              ; CODE XREF: printf_fetchargs+6B↓j
.text:0000000000015448                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:000000000001544B                 ja      short def_15456 ; jumptable 0000000000015456 default case, case 0
.text:000000000001544D                 mov     edx, [rax]
.text:000000000001544F                 movsxd  rdx, ds:(jpt_15456 - 18F10h)[r8+rdx*4]
.text:0000000000015453                 add     rdx, r8
.text:0000000000015456                 jmp     rdx             ; switch jump
.text:0000000000015456 ; ---------------------------------------------------------------------------
.text:0000000000015458                 align 20h
.text:0000000000015460
.text:0000000000015460 loc_15460:                              ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000015460                                         ; DATA XREF: .rodata:jpt_15456↓o
.text:0000000000015460                 mov     rdx, [rdi+8]    ; jumptable 0000000000015456 case 12
.text:0000000000015464                 add     rdx, 0Fh
.text:0000000000015468                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:000000000001546C                 lea     r11, [rdx+10h]
.text:0000000000015470                 mov     [rdi+8], r11
.text:0000000000015474                 fld     tbyte ptr [rdx]
.text:0000000000015476                 fstp    tbyte ptr [rax+10h]
.text:0000000000015479                 nop     dword ptr [rax+00000000h]
.text:0000000000015480
.text:0000000000015480 loc_15480:                              ; CODE XREF: printf_fetchargs+98↓j
.text:0000000000015480                                         ; printf_fetchargs+BA↓j ...
.text:0000000000015480                 add     rcx, 1
.text:0000000000015484                 add     rax, 20h ; ' '
.text:0000000000015488                 cmp     [rsi], rcx
.text:000000000001548B                 ja      short loc_15448
.text:000000000001548D
.text:000000000001548D loc_1548D:                              ; CODE XREF: printf_fetchargs+8↑j
.text:000000000001548D                 xor     eax, eax
.text:000000000001548F                 retn
.text:0000000000015490 ; ---------------------------------------------------------------------------
.text:0000000000015490
.text:0000000000015490 def_15456:                              ; CODE XREF: printf_fetchargs+2B↑j
.text:0000000000015490                                         ; printf_fetchargs+36↑j
.text:0000000000015490                                         ; DATA XREF: ...
.text:0000000000015490                 mov     eax, 0FFFFFFFFh ; jumptable 0000000000015456 default case, case 0
.text:0000000000015495                 retn
.text:0000000000015496 ; ---------------------------------------------------------------------------
.text:0000000000015496
.text:0000000000015496 loc_15496:                              ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000015496                                         ; DATA XREF: .rodata:jpt_15456↓o
.text:0000000000015496                 mov     r11d, [rdi]     ; jumptable 0000000000015456 cases 7-10,17-22
.text:0000000000015499                 cmp     r11d, 2Fh ; '/'
.text:000000000001549D                 ja      loc_155DA
.text:00000000000154A3                 mov     edx, r11d
.text:00000000000154A6                 add     rdx, [rdi+10h]
.text:00000000000154AA                 add     r11d, 8
.text:00000000000154AE                 mov     [rdi], r11d
.text:00000000000154B1
.text:00000000000154B1 loc_154B1:                              ; CODE XREF: printf_fetchargs+1C6↓j
.text:00000000000154B1                 mov     rdx, [rdx]
.text:00000000000154B4                 mov     [rax+10h], rdx
.text:00000000000154B8                 jmp     short loc_15480
.text:00000000000154BA ; ---------------------------------------------------------------------------
.text:00000000000154BA
.text:00000000000154BA loc_154BA:                              ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000154BA                                         ; DATA XREF: .rodata:jpt_15456↓o
.text:00000000000154BA                 mov     r11d, [rdi]     ; jumptable 0000000000015456 cases 5,6,13,14
.text:00000000000154BD                 cmp     r11d, 2Fh ; '/'
.text:00000000000154C1                 ja      loc_155FC
.text:00000000000154C7                 mov     edx, r11d
.text:00000000000154CA                 add     rdx, [rdi+10h]
.text:00000000000154CE                 add     r11d, 8
.text:00000000000154D2                 mov     [rdi], r11d
.text:00000000000154D5
.text:00000000000154D5 loc_154D5:                              ; CODE XREF: printf_fetchargs+1E8↓j
.text:00000000000154D5                 mov     edx, [rdx]
.text:00000000000154D7                 mov     [rax+10h], edx
.text:00000000000154DA                 jmp     short loc_15480
.text:00000000000154DC ; ---------------------------------------------------------------------------
.text:00000000000154DC
.text:00000000000154DC loc_154DC:                              ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000154DC                                         ; DATA XREF: .rodata:jpt_15456↓o
.text:00000000000154DC                 mov     r11d, [rdi]     ; jumptable 0000000000015456 cases 1,2
.text:00000000000154DF                 cmp     r11d, 2Fh ; '/'
.text:00000000000154E3                 ja      loc_155EB
.text:00000000000154E9                 mov     edx, r11d
.text:00000000000154EC                 add     rdx, [rdi+10h]
.text:00000000000154F0                 add     r11d, 8
.text:00000000000154F4                 mov     [rdi], r11d
.text:00000000000154F7
.text:00000000000154F7 loc_154F7:                              ; CODE XREF: printf_fetchargs+1D7↓j
.text:00000000000154F7                 mov     edx, [rdx]
.text:00000000000154F9                 mov     [rax+10h], dl
.text:00000000000154FC                 jmp     short loc_15480
.text:00000000000154FE ; ---------------------------------------------------------------------------
.text:00000000000154FE
.text:00000000000154FE loc_154FE:                              ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000154FE                                         ; DATA XREF: .rodata:jpt_15456↓o
.text:00000000000154FE                 mov     r11d, [rdi]     ; jumptable 0000000000015456 cases 3,4
.text:0000000000015501                 cmp     r11d, 2Fh ; '/'
.text:0000000000015505                 ja      loc_155AA
.text:000000000001550B                 mov     edx, r11d
.text:000000000001550E                 add     rdx, [rdi+10h]
.text:0000000000015512                 add     r11d, 8
.text:0000000000015516                 mov     [rdi], r11d
.text:0000000000015519
.text:0000000000015519 loc_15519:                              ; CODE XREF: printf_fetchargs+196↓j
.text:0000000000015519                 mov     edx, [rdx]
.text:000000000001551B                 mov     [rax+10h], dx
.text:000000000001551F                 jmp     loc_15480
.text:0000000000015524 ; ---------------------------------------------------------------------------
.text:0000000000015524
.text:0000000000015524 loc_15524:                              ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000015524                                         ; DATA XREF: .rodata:jpt_15456↓o
.text:0000000000015524                 mov     r11d, [rdi]     ; jumptable 0000000000015456 case 15
.text:0000000000015527                 cmp     r11d, 2Fh ; '/'
.text:000000000001552B                 ja      loc_155BB
.text:0000000000015531                 mov     edx, r11d
.text:0000000000015534                 add     rdx, [rdi+10h]
.text:0000000000015538                 add     r11d, 8
.text:000000000001553C                 mov     [rdi], r11d
.text:000000000001553F
.text:000000000001553F loc_1553F:                              ; CODE XREF: printf_fetchargs+1A7↓j
.text:000000000001553F                 mov     rdx, [rdx]
.text:0000000000015542                 test    rdx, rdx
.text:0000000000015545                 cmovz   rdx, r9
.text:0000000000015549                 mov     [rax+10h], rdx
.text:000000000001554D                 jmp     loc_15480
.text:0000000000015552 ; ---------------------------------------------------------------------------
.text:0000000000015552
.text:0000000000015552 loc_15552:                              ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000015552                                         ; DATA XREF: .rodata:jpt_15456↓o
.text:0000000000015552                 mov     r11d, [rdi+4]   ; jumptable 0000000000015456 case 11
.text:0000000000015556                 cmp     r11d, 0AFh
.text:000000000001555D                 ja      loc_1560D
.text:0000000000015563                 mov     edx, r11d
.text:0000000000015566                 add     rdx, [rdi+10h]
.text:000000000001556A                 add     r11d, 10h
.text:000000000001556E                 mov     [rdi+4], r11d
.text:0000000000015572
.text:0000000000015572 loc_15572:                              ; CODE XREF: printf_fetchargs+1F9↓j
.text:0000000000015572                 movsd   xmm0, qword ptr [rdx]
.text:0000000000015576                 movsd   qword ptr [rax+10h], xmm0
.text:000000000001557B                 jmp     loc_15480
.text:0000000000015580 ; ---------------------------------------------------------------------------
.text:0000000000015580
.text:0000000000015580 loc_15580:                              ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000015580                                         ; DATA XREF: .rodata:jpt_15456↓o
.text:0000000000015580                 mov     r11d, [rdi]     ; jumptable 0000000000015456 case 16
.text:0000000000015583                 cmp     r11d, 2Fh ; '/'
.text:0000000000015587                 ja      short loc_155CC
.text:0000000000015589                 mov     edx, r11d
.text:000000000001558C                 add     rdx, [rdi+10h]
.text:0000000000015590                 add     r11d, 8
.text:0000000000015594                 mov     [rdi], r11d
.text:0000000000015597
.text:0000000000015597 loc_15597:                              ; CODE XREF: printf_fetchargs+1B8↓j
.text:0000000000015597                 mov     rdx, [rdx]
.text:000000000001559A                 test    rdx, rdx
.text:000000000001559D                 cmovz   rdx, r10
.text:00000000000155A1                 mov     [rax+10h], rdx
.text:00000000000155A5                 jmp     loc_15480
.text:00000000000155AA ; ---------------------------------------------------------------------------
.text:00000000000155AA
.text:00000000000155AA loc_155AA:                              ; CODE XREF: printf_fetchargs+E5↑j
.text:00000000000155AA                 mov     rdx, [rdi+8]
.text:00000000000155AE                 lea     r11, [rdx+8]
.text:00000000000155B2                 mov     [rdi+8], r11
.text:00000000000155B6                 jmp     loc_15519
.text:00000000000155BB ; ---------------------------------------------------------------------------
.text:00000000000155BB
.text:00000000000155BB loc_155BB:                              ; CODE XREF: printf_fetchargs+10B↑j
.text:00000000000155BB                 mov     rdx, [rdi+8]
.text:00000000000155BF                 lea     r11, [rdx+8]
.text:00000000000155C3                 mov     [rdi+8], r11
.text:00000000000155C7                 jmp     loc_1553F
.text:00000000000155CC ; ---------------------------------------------------------------------------
.text:00000000000155CC
.text:00000000000155CC loc_155CC:                              ; CODE XREF: printf_fetchargs+167↑j
.text:00000000000155CC                 mov     rdx, [rdi+8]
.text:00000000000155D0                 lea     r11, [rdx+8]
.text:00000000000155D4                 mov     [rdi+8], r11
.text:00000000000155D8                 jmp     short loc_15597
.text:00000000000155DA ; ---------------------------------------------------------------------------
.text:00000000000155DA
.text:00000000000155DA loc_155DA:                              ; CODE XREF: printf_fetchargs+7D↑j
.text:00000000000155DA                 mov     rdx, [rdi+8]
.text:00000000000155DE                 lea     r11, [rdx+8]
.text:00000000000155E2                 mov     [rdi+8], r11
.text:00000000000155E6                 jmp     loc_154B1
.text:00000000000155EB ; ---------------------------------------------------------------------------
.text:00000000000155EB
.text:00000000000155EB loc_155EB:                              ; CODE XREF: printf_fetchargs+C3↑j
.text:00000000000155EB                 mov     rdx, [rdi+8]
.text:00000000000155EF                 lea     r11, [rdx+8]
.text:00000000000155F3                 mov     [rdi+8], r11
.text:00000000000155F7                 jmp     loc_154F7
.text:00000000000155FC ; ---------------------------------------------------------------------------
.text:00000000000155FC
.text:00000000000155FC loc_155FC:                              ; CODE XREF: printf_fetchargs+A1↑j
.text:00000000000155FC                 mov     rdx, [rdi+8]
.text:0000000000015600                 lea     r11, [rdx+8]
.text:0000000000015604                 mov     [rdi+8], r11
.text:0000000000015608                 jmp     loc_154D5
.text:000000000001560D ; ---------------------------------------------------------------------------
.text:000000000001560D
.text:000000000001560D loc_1560D:                              ; CODE XREF: printf_fetchargs+13D↑j
.text:000000000001560D                 mov     rdx, [rdi+8]
.text:0000000000015611                 lea     r11, [rdx+8]
.text:0000000000015615                 mov     [rdi+8], r11
.text:0000000000015619                 jmp     loc_15572
.text:0000000000015619 ; } // starts at 15420
.text:0000000000015619 printf_fetchargs endp
.text:0000000000015619
.text:0000000000015619 ; ---------------------------------------------------------------------------
.text:000000000001561E                 align 20h
.text:0000000000015620 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:0000000000015620 ; Format      : ELF64 for x86-64 (Relocatable)
.text:0000000000015620 ;
.text:0000000000015620 ; Source File : 'printf-parse.c'
.text:0000000000015620
.text:0000000000015620 ; =============== S U B R O U T I N E =======================================
.text:0000000000015620
.text:0000000000015620 ; Attributes: info_from_lumina
.text:0000000000015620
.text:0000000000015620 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:0000000000015620                 public printf_parse
.text:0000000000015620 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:0000000000015620
.text:0000000000015620 src             = qword ptr -80h
.text:0000000000015620 var_78          = qword ptr -78h
.text:0000000000015620 var_70          = qword ptr -70h
.text:0000000000015620 var_68          = qword ptr -68h
.text:0000000000015620 var_60          = qword ptr -60h
.text:0000000000015620 var_58          = qword ptr -58h
.text:0000000000015620 var_50          = qword ptr -50h
.text:0000000000015620 var_48          = qword ptr -48h
.text:0000000000015620 var_40          = qword ptr -40h
.text:0000000000015620
.text:0000000000015620 ; __unwind {
.text:0000000000015620                 push    r15
.text:0000000000015622                 push    r14
.text:0000000000015624                 lea     rcx, [rsi+20h]
.text:0000000000015628                 push    r13
.text:000000000001562A                 push    r12
.text:000000000001562C                 lea     rax, [rdx+10h]
.text:0000000000015630                 push    rbp
.text:0000000000015631                 push    rbx
.text:0000000000015632                 mov     r14, rsi
.text:0000000000015635                 mov     r15, rdx
.text:0000000000015638                 xor     ebx, ebx
.text:000000000001563A                 mov     r9d, 7
.text:0000000000015640                 sub     rsp, 58h
.text:0000000000015644                 mov     r10d, 7
.text:000000000001564A                 mov     qword ptr [rsi], 0
.text:0000000000015651                 mov     [rsi+8], rcx
.text:0000000000015655                 mov     [rsp+88h+var_60], rcx
.text:000000000001565A                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000015661                 mov     qword ptr [rdx], 0
.text:0000000000015668                 mov     [rsp+88h+src], rax
.text:000000000001566D                 mov     [rdx+8], rax
.text:0000000000015671                 mov     [rsp+88h+var_70], 0
.text:000000000001567A                 mov     [rsp+88h+var_78], 0
.text:0000000000015683                 mov     [rsp+88h+var_68], 0
.text:000000000001568C                 jmp     short loc_1569B
.text:000000000001568C ; ---------------------------------------------------------------------------
.text:000000000001568E                 align 10h
.text:0000000000015690
.text:0000000000015690 loc_15690:                              ; CODE XREF: printf_parse+80↓j
.text:0000000000015690                 cmp     al, 25h ; '%'
.text:0000000000015692                 lea     rbp, [rdi+1]
.text:0000000000015696                 jz      short loc_156D8
.text:0000000000015698
.text:0000000000015698 loc_15698:                              ; CODE XREF: printf_parse+35B↓j
.text:0000000000015698                                         ; printf_parse+364↓j
.text:0000000000015698                 mov     rdi, rbp
.text:000000000001569B
.text:000000000001569B loc_1569B:                              ; CODE XREF: printf_parse+6C↑j
.text:000000000001569B                 movzx   eax, byte ptr [rdi]
.text:000000000001569E                 test    al, al
.text:00000000000156A0                 jnz     short loc_15690
.text:00000000000156A2                 lea     rax, [rbx+rbx*4]
.text:00000000000156A6                 lea     rax, [rbx+rax*2]
.text:00000000000156AA                 mov     [rcx+rax*8], rdi
.text:00000000000156AE                 mov     rax, [rsp+88h+var_78]
.text:00000000000156B3                 mov     [r14+10h], rax
.text:00000000000156B7                 mov     rax, [rsp+88h+var_70]
.text:00000000000156BC                 mov     [r14+18h], rax
.text:00000000000156C0                 xor     eax, eax
.text:00000000000156C2
.text:00000000000156C2 loc_156C2:                              ; CODE XREF: printf_parse+87E↓j
.text:00000000000156C2                                         ; printf_parse+B1C↓j
.text:00000000000156C2                 add     rsp, 58h
.text:00000000000156C6                 pop     rbx
.text:00000000000156C7                 pop     rbp
.text:00000000000156C8                 pop     r12
.text:00000000000156CA                 pop     r13
.text:00000000000156CC                 pop     r14
.text:00000000000156CE                 pop     r15
.text:00000000000156D0                 retn
.text:00000000000156D0 ; ---------------------------------------------------------------------------
.text:00000000000156D1                 align 8
.text:00000000000156D8
.text:00000000000156D8 loc_156D8:                              ; CODE XREF: printf_parse+76↑j
.text:00000000000156D8                 lea     rax, [rbx+rbx*4]
.text:00000000000156DC                 mov     r13, r8
.text:00000000000156DF                 lea     rax, [rbx+rax*2]
.text:00000000000156E3                 lea     r12, [rcx+rax*8]
.text:00000000000156E7                 mov     [r12], rdi
.text:00000000000156EB                 mov     dword ptr [r12+10h], 0
.text:00000000000156F4                 mov     qword ptr [r12+18h], 0
.text:00000000000156FD                 mov     qword ptr [r12+20h], 0
.text:0000000000015706                 mov     [r12+28h], r8
.text:000000000001570B                 mov     qword ptr [r12+30h], 0
.text:0000000000015714                 mov     qword ptr [r12+38h], 0
.text:000000000001571D                 mov     [r12+40h], r8
.text:0000000000015722                 mov     [r12+50h], r8
.text:0000000000015727                 movzx   ebx, byte ptr [rdi+1]
.text:000000000001572B                 lea     eax, [rbx-30h]
.text:000000000001572E                 cmp     al, 9
.text:0000000000015730                 ja      short loc_1576E
.text:0000000000015732                 jmp     loc_15B6A
.text:0000000000015732 ; ---------------------------------------------------------------------------
.text:0000000000015737                 align 20h
.text:0000000000015740
.text:0000000000015740 loc_15740:                              ; CODE XREF: printf_parse+158↓j
.text:0000000000015740                 cmp     bl, 2Dh ; '-'
.text:0000000000015743                 jz      short loc_15788
.text:0000000000015745                 cmp     bl, 2Bh ; '+'
.text:0000000000015748                 jz      short loc_15790
.text:000000000001574A                 cmp     bl, 20h ; ' '
.text:000000000001574D                 jz      short loc_157A0
.text:000000000001574F                 cmp     bl, 23h ; '#'
.text:0000000000015752                 jz      short loc_157B0
.text:0000000000015754                 cmp     bl, 30h ; '0'
.text:0000000000015757                 jz      short loc_157C0
.text:0000000000015759                 cmp     bl, 49h ; 'I'
.text:000000000001575C                 jnz     short loc_157D0
.text:000000000001575E                 or      dword ptr [r12+10h], 40h
.text:0000000000015764                 nop     dword ptr [rax+00h]
.text:0000000000015768
.text:0000000000015768 loc_15768:                              ; CODE XREF: printf_parse+160↓j
.text:0000000000015768                                         ; printf_parse+16E↓j ...
.text:0000000000015768                 movzx   ebx, byte ptr [rax]
.text:000000000001576B                 mov     rbp, rax
.text:000000000001576E
.text:000000000001576E loc_1576E:                              ; CODE XREF: printf_parse+110↑j
.text:000000000001576E                                         ; printf_parse+565↓j ...
.text:000000000001576E                 lea     rax, [rbp+1]
.text:0000000000015772                 cmp     bl, 27h ; '''
.text:0000000000015775                 mov     rdx, rax
.text:0000000000015778                 jnz     short loc_15740
.text:000000000001577A                 or      dword ptr [r12+10h], 1
.text:0000000000015780                 jmp     short loc_15768
.text:0000000000015780 ; ---------------------------------------------------------------------------
.text:0000000000015782                 align 8
.text:0000000000015788
.text:0000000000015788 loc_15788:                              ; CODE XREF: printf_parse+123↑j
.text:0000000000015788                 or      dword ptr [r12+10h], 2
.text:000000000001578E                 jmp     short loc_15768
.text:0000000000015790 ; ---------------------------------------------------------------------------
.text:0000000000015790
.text:0000000000015790 loc_15790:                              ; CODE XREF: printf_parse+128↑j
.text:0000000000015790                 or      dword ptr [r12+10h], 4
.text:0000000000015796                 jmp     short loc_15768
.text:0000000000015796 ; ---------------------------------------------------------------------------
.text:0000000000015798                 align 20h
.text:00000000000157A0
.text:00000000000157A0 loc_157A0:                              ; CODE XREF: printf_parse+12D↑j
.text:00000000000157A0                 or      dword ptr [r12+10h], 8
.text:00000000000157A6                 jmp     short loc_15768
.text:00000000000157A6 ; ---------------------------------------------------------------------------
.text:00000000000157A8                 align 10h
.text:00000000000157B0
.text:00000000000157B0 loc_157B0:                              ; CODE XREF: printf_parse+132↑j
.text:00000000000157B0                 or      dword ptr [r12+10h], 10h
.text:00000000000157B6                 jmp     short loc_15768
.text:00000000000157B6 ; ---------------------------------------------------------------------------
.text:00000000000157B8                 align 20h
.text:00000000000157C0
.text:00000000000157C0 loc_157C0:                              ; CODE XREF: printf_parse+137↑j
.text:00000000000157C0                 or      dword ptr [r12+10h], 20h
.text:00000000000157C6                 jmp     short loc_15768
.text:00000000000157C6 ; ---------------------------------------------------------------------------
.text:00000000000157C8                 align 10h
.text:00000000000157D0
.text:00000000000157D0 loc_157D0:                              ; CODE XREF: printf_parse+13C↑j
.text:00000000000157D0                 cmp     bl, 2Ah ; '*'
.text:00000000000157D3                 jz      loc_15989
.text:00000000000157D9                 lea     ecx, [rbx-30h]
.text:00000000000157DC                 cmp     cl, 9
.text:00000000000157DF                 jbe     loc_15BF7
.text:00000000000157E5
.text:00000000000157E5 loc_157E5:                              ; CODE XREF: printf_parse+629↓j
.text:00000000000157E5                                         ; printf_parse+96C↓j
.text:00000000000157E5                 cmp     bl, 2Eh ; '.'
.text:00000000000157E8                 jz      loc_15ABF
.text:00000000000157EE
.text:00000000000157EE loc_157EE:                              ; CODE XREF: printf_parse+499↓j
.text:00000000000157EE                                         ; printf_parse+545↓j ...
.text:00000000000157EE                 xor     eax, eax
.text:00000000000157F0                 mov     esi, 1
.text:00000000000157F5                 jmp     short loc_15827
.text:00000000000157F5 ; ---------------------------------------------------------------------------
.text:00000000000157F7                 align 20h
.text:0000000000015800
.text:0000000000015800 loc_15800:                              ; CODE XREF: printf_parse+20E↓j
.text:0000000000015800                 cmp     bl, 4Ch ; 'L'
.text:0000000000015803                 jz      short loc_15840
.text:0000000000015805                 cmp     bl, 6Ch ; 'l'
.text:0000000000015808                 jz      short loc_15820
.text:000000000001580A                 cmp     bl, 6Ah ; 'j'
.text:000000000001580D                 jz      short loc_15820
.text:000000000001580F                 mov     edx, ebx
.text:0000000000015811                 and     edx, 0FFFFFFDFh
.text:0000000000015814                 cmp     dl, 5Ah ; 'Z'
.text:0000000000015817                 jz      short loc_15820
.text:0000000000015819                 cmp     bl, 74h ; 't'
.text:000000000001581C                 jnz     short loc_15848
.text:000000000001581E                 xchg    ax, ax
.text:0000000000015820
.text:0000000000015820 loc_15820:                              ; CODE XREF: printf_parse+1E8↑j
.text:0000000000015820                                         ; printf_parse+1ED↑j ...
.text:0000000000015820                 add     eax, 8
.text:0000000000015823
.text:0000000000015823 loc_15823:                              ; CODE XREF: printf_parse+21B↓j
.text:0000000000015823                                         ; printf_parse+223↓j
.text:0000000000015823                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000015827
.text:0000000000015827 loc_15827:                              ; CODE XREF: printf_parse+1D5↑j
.text:0000000000015827                 add     rbp, 1
.text:000000000001582B                 cmp     bl, 68h ; 'h'
.text:000000000001582E                 jnz     short loc_15800
.text:0000000000015830                 mov     ecx, eax
.text:0000000000015832                 mov     edx, esi
.text:0000000000015834                 and     ecx, 1
.text:0000000000015837                 shl     edx, cl
.text:0000000000015839                 or      eax, edx
.text:000000000001583B                 jmp     short loc_15823
.text:000000000001583B ; ---------------------------------------------------------------------------
.text:000000000001583D                 align 20h
.text:0000000000015840
.text:0000000000015840 loc_15840:                              ; CODE XREF: printf_parse+1E3↑j
.text:0000000000015840                 or      eax, 4
.text:0000000000015843                 jmp     short loc_15823
.text:0000000000015843 ; ---------------------------------------------------------------------------
.text:0000000000015845                 align 8
.text:0000000000015848
.text:0000000000015848 loc_15848:                              ; CODE XREF: printf_parse+1FC↑j
.text:0000000000015848                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:000000000001584B                 cmp     dl, 53h
.text:000000000001584E                 ja      def_15865       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000015854                 lea     rcx, jpt_15865
.text:000000000001585B                 movzx   edx, dl
.text:000000000001585E                 movsxd  rdx, ds:(jpt_15865 - 18F8Ch)[rcx+rdx*4]
.text:0000000000015862                 add     rdx, rcx
.text:0000000000015865                 jmp     rdx             ; switch jump
.text:0000000000015867 ; ---------------------------------------------------------------------------
.text:0000000000015867
.text:0000000000015867 loc_15867:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000015867                                         ; DATA XREF: .rodata:jpt_15865↓o
.text:0000000000015867                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:000000000001586D                 mov     ebx, 73h ; 's'
.text:0000000000015872                 nop     word ptr [rax+rax+00h]
.text:0000000000015878
.text:0000000000015878 loc_15878:                              ; CODE XREF: printf_parse+705↓j
.text:0000000000015878                                         ; printf_parse+70D↓j ...
.text:0000000000015878                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000001587C                 jz      loc_15F37
.text:0000000000015882                 mov     [r12+50h], r13
.text:0000000000015887
.text:0000000000015887 loc_15887:                              ; CODE XREF: printf_parse+939↓j
.text:0000000000015887                 cmp     r9, r13
.text:000000000001588A                 mov     rcx, [r15+8]
.text:000000000001588E                 jbe     loc_15EB0
.text:0000000000015894
.text:0000000000015894 loc_15894:                              ; CODE XREF: printf_parse+912↓j
.text:0000000000015894                 mov     rax, [r15]
.text:0000000000015897                 mov     rdx, rax
.text:000000000001589A                 shl     rdx, 5
.text:000000000001589E                 add     rdx, rcx
.text:00000000000158A1                 cmp     rax, r13
.text:00000000000158A4                 ja      short loc_158C6
.text:00000000000158A6                 db      2Eh
.text:00000000000158A6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000158B0
.text:00000000000158B0 loc_158B0:                              ; CODE XREF: printf_parse+2A1↓j
.text:00000000000158B0                 add     rax, 1
.text:00000000000158B4                 mov     dword ptr [rdx], 0
.text:00000000000158BA                 add     rdx, 20h ; ' '
.text:00000000000158BE                 cmp     rax, r13
.text:00000000000158C1                 jbe     short loc_158B0
.text:00000000000158C3                 mov     [r15], rax
.text:00000000000158C6
.text:00000000000158C6 loc_158C6:                              ; CODE XREF: printf_parse+284↑j
.text:00000000000158C6                 shl     r13, 5
.text:00000000000158CA                 lea     rax, [rcx+r13]
.text:00000000000158CE                 mov     edx, [rax]
.text:00000000000158D0                 test    edx, edx
.text:00000000000158D2                 jnz     loc_15EA3
.text:00000000000158D8                 mov     [rax], r11d
.text:00000000000158DB
.text:00000000000158DB loc_158DB:                              ; CODE XREF: printf_parse+245↑j
.text:00000000000158DB                                         ; printf_parse+886↓j
.text:00000000000158DB                                         ; DATA XREF: ...
.text:00000000000158DB                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:00000000000158E0                 mov     rax, [r14]
.text:00000000000158E3                 mov     [r12+8], rbp
.text:00000000000158E8                 lea     rbx, [rax+1]
.text:00000000000158EC                 cmp     r10, rbx
.text:00000000000158EF                 mov     [r14], rbx
.text:00000000000158F2                 ja      loc_15980
.text:00000000000158F8                 test    r10, r10
.text:00000000000158FB                 js      loc_162A7
.text:0000000000015901                 add     r10, r10
.text:0000000000015904                 mov     rax, 2E8BA2E8BA2E8BAh
.text:000000000001590E                 cmp     r10, rax
.text:0000000000015911                 ja      loc_162A7
.text:0000000000015917                 lea     rax, [r10+r10*4]
.text:000000000001591B                 mov     rdi, [r14+8]    ; ptr
.text:000000000001591F                 cmp     [rsp+88h+var_60], rdi
.text:0000000000015924                 mov     [rsp+88h+var_48], r9
.text:0000000000015929                 mov     [rsp+88h+var_50], r10
.text:000000000001592E                 lea     rax, [r10+rax*2]
.text:0000000000015932                 mov     [rsp+88h+var_58], r8
.text:0000000000015937                 lea     rsi, ds:0[rax*8] ; size
.text:000000000001593F                 jz      loc_15FFD
.text:0000000000015945                 call    _realloc        ; PIC mode
.text:000000000001594A                 test    rax, rax
.text:000000000001594D                 mov     rcx, rax
.text:0000000000015950                 mov     r8, [rsp+88h+var_58]
.text:0000000000015955                 mov     r10, [rsp+88h+var_50]
.text:000000000001595A                 mov     r9, [rsp+88h+var_48]
.text:000000000001595F                 jz      loc_162A7
.text:0000000000015965                 mov     rax, [rsp+88h+var_60]
.text:000000000001596A                 cmp     rax, [r14+8]
.text:000000000001596E                 mov     rbx, [r14]
.text:0000000000015971                 jz      loc_16020
.text:0000000000015977
.text:0000000000015977 loc_15977:                              ; CODE XREF: printf_parse+A3D↓j
.text:0000000000015977                 mov     [r14+8], rcx
.text:000000000001597B                 jmp     loc_15698
.text:0000000000015980 ; ---------------------------------------------------------------------------
.text:0000000000015980
.text:0000000000015980 loc_15980:                              ; CODE XREF: printf_parse+2D2↑j
.text:0000000000015980                 mov     rcx, [r14+8]
.text:0000000000015984                 jmp     loc_15698
.text:0000000000015989 ; ---------------------------------------------------------------------------
.text:0000000000015989
.text:0000000000015989 loc_15989:                              ; CODE XREF: printf_parse+1B3↑j
.text:0000000000015989                 mov     rsi, [rsp+88h+var_78]
.text:000000000001598E                 mov     ecx, 1
.text:0000000000015993                 mov     [r12+18h], rbp
.text:0000000000015998                 mov     [r12+20h], rax
.text:000000000001599D                 test    rsi, rsi
.text:00000000000159A0                 cmovnz  rcx, rsi
.text:00000000000159A4                 mov     [rsp+88h+var_78], rcx
.text:00000000000159A9                 movzx   ecx, byte ptr [rbp+1]
.text:00000000000159AD                 lea     esi, [rcx-30h]
.text:00000000000159B0                 cmp     sil, 9
.text:00000000000159B4                 jbe     loc_15C95
.text:00000000000159BA
.text:00000000000159BA loc_159BA:                              ; CODE XREF: printf_parse+68D↓j
.text:00000000000159BA                 mov     rsi, [rsp+88h+var_68]
.text:00000000000159BF                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000159C3                 lea     rdx, [rsi+1]
.text:00000000000159C7                 mov     [r12+28h], rsi
.text:00000000000159CC                 jz      def_15865       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000159D2                 mov     rbx, [rsp+88h+var_68]
.text:00000000000159D7                 mov     rbp, rax
.text:00000000000159DA                 mov     [rsp+88h+var_68], rdx
.text:00000000000159DF
.text:00000000000159DF loc_159DF:                              ; CODE XREF: printf_parse+6F7↓j
.text:00000000000159DF                 cmp     r9, rbx
.text:00000000000159E2                 mov     rcx, [r15+8]
.text:00000000000159E6                 ja      loc_16062
.text:00000000000159EC                 add     r9, r9
.text:00000000000159EF                 lea     rax, [rbx+1]
.text:00000000000159F3                 cmp     r9, rbx
.text:00000000000159F6                 cmovbe  r9, rax
.text:00000000000159FA                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000015A04                 cmp     r9, rax
.text:0000000000015A07                 ja      loc_162AB
.text:0000000000015A0D                 mov     rsi, r9
.text:0000000000015A10                 mov     [rsp+88h+var_48], r9
.text:0000000000015A15                 mov     [rsp+88h+var_50], r10
.text:0000000000015A1A                 shl     rsi, 5          ; size
.text:0000000000015A1E                 cmp     [rsp+88h+src], rcx
.text:0000000000015A23                 mov     [rsp+88h+var_58], r8
.text:0000000000015A28                 jz      loc_16141
.text:0000000000015A2E                 mov     rdi, rcx        ; ptr
.text:0000000000015A31                 call    _realloc        ; PIC mode
.text:0000000000015A36                 mov     rdx, [r15+8]
.text:0000000000015A3A                 mov     r8, [rsp+88h+var_58]
.text:0000000000015A3F                 mov     rcx, rax
.text:0000000000015A42                 mov     r10, [rsp+88h+var_50]
.text:0000000000015A47                 mov     r9, [rsp+88h+var_48]
.text:0000000000015A4C
.text:0000000000015A4C loc_15A4C:                              ; CODE XREF: printf_parse+B40↓j
.text:0000000000015A4C                 test    rcx, rcx
.text:0000000000015A4F                 jz      loc_16307
.text:0000000000015A55                 cmp     [rsp+88h+src], rdx
.text:0000000000015A5A                 mov     rax, [r15]
.text:0000000000015A5D                 jz      loc_1621B
.text:0000000000015A63
.text:0000000000015A63 loc_15A63:                              ; CODE XREF: printf_parse+C33↓j
.text:0000000000015A63                 mov     [r15+8], rcx
.text:0000000000015A67
.text:0000000000015A67 loc_15A67:                              ; CODE XREF: printf_parse+A45↓j
.text:0000000000015A67                 mov     rdx, rax
.text:0000000000015A6A                 shl     rdx, 5
.text:0000000000015A6E                 add     rdx, rcx
.text:0000000000015A71                 cmp     rax, rbx
.text:0000000000015A74                 ja      short loc_15A96
.text:0000000000015A76                 db      2Eh
.text:0000000000015A76                 nop     word ptr [rax+rax+00000000h]
.text:0000000000015A80
.text:0000000000015A80 loc_15A80:                              ; CODE XREF: printf_parse+471↓j
.text:0000000000015A80                 add     rax, 1
.text:0000000000015A84                 mov     dword ptr [rdx], 0
.text:0000000000015A8A                 add     rdx, 20h ; ' '
.text:0000000000015A8E                 cmp     rax, rbx
.text:0000000000015A91                 jbe     short loc_15A80
.text:0000000000015A93                 mov     [r15], rax
.text:0000000000015A96
.text:0000000000015A96 loc_15A96:                              ; CODE XREF: printf_parse+454↑j
.text:0000000000015A96                 shl     rbx, 5
.text:0000000000015A9A                 lea     rax, [rcx+rbx]
.text:0000000000015A9E                 mov     edx, [rax]
.text:0000000000015AA0                 test    edx, edx
.text:0000000000015AA2                 jnz     loc_15F7B
.text:0000000000015AA8                 mov     dword ptr [rax], 5
.text:0000000000015AAE                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000015AB2                 lea     rdx, [rbp+1]
.text:0000000000015AB6                 cmp     bl, 2Eh ; '.'
.text:0000000000015AB9                 jnz     loc_157EE
.text:0000000000015ABF
.text:0000000000015ABF loc_15ABF:                              ; CODE XREF: printf_parse+1C8↑j
.text:0000000000015ABF                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:0000000000015AC3                 mov     [r12+30h], rbp
.text:0000000000015AC8                 jnz     loc_15C4E
.text:0000000000015ACE                 mov     rsi, [rsp+88h+var_70]
.text:0000000000015AD3                 lea     r11, [rbp+2]
.text:0000000000015AD7                 mov     eax, 2
.text:0000000000015ADC                 mov     [r12+38h], r11
.text:0000000000015AE1                 cmp     rsi, 2
.text:0000000000015AE5                 cmovnb  rax, rsi
.text:0000000000015AE9                 mov     [rsp+88h+var_70], rax
.text:0000000000015AEE                 movsx   eax, byte ptr [rbp+2]
.text:0000000000015AF2                 lea     edx, [rax-30h]
.text:0000000000015AF5                 cmp     dl, 9
.text:0000000000015AF8                 jbe     loc_1618C
.text:0000000000015AFE
.text:0000000000015AFE loc_15AFE:                              ; CODE XREF: printf_parse+B82↓j
.text:0000000000015AFE                 mov     rbx, [r12+40h]
.text:0000000000015B03                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000015B07                 jz      loc_16165
.text:0000000000015B0D
.text:0000000000015B0D loc_15B0D:                              ; CODE XREF: printf_parse+B67↓j
.text:0000000000015B0D                                         ; printf_parse+C59↓j
.text:0000000000015B0D                 cmp     r9, rbx
.text:0000000000015B10                 mov     rcx, [r15+8]
.text:0000000000015B14                 jbe     loc_1607F
.text:0000000000015B1A                 mov     rax, [r15]
.text:0000000000015B1D
.text:0000000000015B1D loc_15B1D:                              ; CODE XREF: printf_parse+AE4↓j
.text:0000000000015B1D                 mov     rdx, rax
.text:0000000000015B20                 shl     rdx, 5
.text:0000000000015B24                 add     rdx, rcx
.text:0000000000015B27                 cmp     rax, rbx
.text:0000000000015B2A                 ja      short loc_15B46
.text:0000000000015B2C                 nop     dword ptr [rax+00h]
.text:0000000000015B30
.text:0000000000015B30 loc_15B30:                              ; CODE XREF: printf_parse+521↓j
.text:0000000000015B30                 add     rax, 1
.text:0000000000015B34                 mov     dword ptr [rdx], 0
.text:0000000000015B3A                 add     rdx, 20h ; ' '
.text:0000000000015B3E                 cmp     rax, rbx
.text:0000000000015B41                 jbe     short loc_15B30
.text:0000000000015B43                 mov     [r15], rax
.text:0000000000015B46
.text:0000000000015B46 loc_15B46:                              ; CODE XREF: printf_parse+50A↑j
.text:0000000000015B46                 shl     rbx, 5
.text:0000000000015B4A                 lea     rax, [rcx+rbx]
.text:0000000000015B4E                 mov     edx, [rax]
.text:0000000000015B50                 test    edx, edx
.text:0000000000015B52                 jnz     loc_1606A
.text:0000000000015B58                 mov     dword ptr [rax], 5
.text:0000000000015B5E                 mov     rbp, r11
.text:0000000000015B61                 movzx   ebx, byte ptr [r11]
.text:0000000000015B65                 jmp     loc_157EE
.text:0000000000015B6A ; ---------------------------------------------------------------------------
.text:0000000000015B6A
.text:0000000000015B6A loc_15B6A:                              ; CODE XREF: printf_parse+112↑j
.text:0000000000015B6A                 mov     rax, rbp
.text:0000000000015B6D                 nop     dword ptr [rax]
.text:0000000000015B70
.text:0000000000015B70 loc_15B70:                              ; CODE XREF: printf_parse+55D↓j
.text:0000000000015B70                 add     rax, 1
.text:0000000000015B74                 movzx   edx, byte ptr [rax]
.text:0000000000015B77                 lea     ecx, [rdx-30h]
.text:0000000000015B7A                 cmp     cl, 9
.text:0000000000015B7D                 jbe     short loc_15B70
.text:0000000000015B7F                 cmp     dl, 24h ; '$'
.text:0000000000015B82                 mov     r13, r8
.text:0000000000015B85                 jnz     loc_1576E
.text:0000000000015B8B                 xor     edx, edx
.text:0000000000015B8D
.text:0000000000015B8D loc_15B8D:                              ; CODE XREF: printf_parse+5B7↓j
.text:0000000000015B8D                 movsx   eax, bl
.text:0000000000015B90                 mov     rdi, 1999999999999999h
.text:0000000000015B9A                 mov     rsi, r8
.text:0000000000015B9D                 sub     eax, 30h ; '0'
.text:0000000000015BA0                 cmp     rdx, rdi
.text:0000000000015BA3                 cdqe
.text:0000000000015BA5                 ja      short loc_15BAE
.text:0000000000015BA7                 lea     rsi, [rdx+rdx*4]
.text:0000000000015BAB                 add     rsi, rsi
.text:0000000000015BAE
.text:0000000000015BAE loc_15BAE:                              ; CODE XREF: printf_parse+585↑j
.text:0000000000015BAE                 mov     rcx, rbp
.text:0000000000015BB1
.text:0000000000015BB1 loc_15BB1:                              ; CODE XREF: printf_parse+956↓j
.text:0000000000015BB1                 add     rax, rsi
.text:0000000000015BB4                 movzx   ebx, byte ptr [rbp+1]
.text:0000000000015BB8                 setb    sil
.text:0000000000015BBC                 add     rbp, 1
.text:0000000000015BC0                 mov     rdx, rax
.text:0000000000015BC3                 movzx   esi, sil
.text:0000000000015BC7                 test    rsi, rsi
.text:0000000000015BCA                 lea     edi, [rbx-30h]
.text:0000000000015BCD                 jnz     loc_15F5E
.text:0000000000015BD3                 cmp     dil, 9
.text:0000000000015BD7                 jbe     short loc_15B8D
.text:0000000000015BD9                 mov     r13, rax
.text:0000000000015BDC                 sub     r13, 1
.text:0000000000015BE0                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:0000000000015BE4                 ja      def_15865       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000015BEA                 lea     rbp, [rcx+2]
.text:0000000000015BEE                 movzx   ebx, byte ptr [rcx+2]
.text:0000000000015BF2                 jmp     loc_1576E
.text:0000000000015BF7 ; ---------------------------------------------------------------------------
.text:0000000000015BF7
.text:0000000000015BF7 loc_15BF7:                              ; CODE XREF: printf_parse+1BF↑j
.text:0000000000015BF7                 mov     [r12+18h], rbp
.text:0000000000015BFC                 movzx   edi, byte ptr [rbp+0]
.text:0000000000015C00                 mov     rsi, rbp
.text:0000000000015C03                 lea     ecx, [rdi-30h]
.text:0000000000015C06                 cmp     cl, 9
.text:0000000000015C09                 jbe     short loc_15C17
.text:0000000000015C0B                 jmp     short loc_15C40
.text:0000000000015C0B ; ---------------------------------------------------------------------------
.text:0000000000015C0D                 align 10h
.text:0000000000015C10
.text:0000000000015C10 loc_15C10:                              ; CODE XREF: printf_parse+600↓j
.text:0000000000015C10                 mov     rbp, rax
.text:0000000000015C13                 add     rax, 1
.text:0000000000015C17
.text:0000000000015C17 loc_15C17:                              ; CODE XREF: printf_parse+5E9↑j
.text:0000000000015C17                 movzx   edi, byte ptr [rax]
.text:0000000000015C1A                 lea     edx, [rdi-30h]
.text:0000000000015C1D                 cmp     dl, 9
.text:0000000000015C20                 jbe     short loc_15C10
.text:0000000000015C22                 mov     rcx, rax
.text:0000000000015C25                 lea     rdx, [rbp+2]
.text:0000000000015C29                 mov     rbp, rax
.text:0000000000015C2C                 sub     rcx, rsi
.text:0000000000015C2F                 mov     rsi, [rsp+88h+var_78]
.text:0000000000015C34                 cmp     rsi, rcx
.text:0000000000015C37                 cmovnb  rcx, rsi
.text:0000000000015C3B                 mov     [rsp+88h+var_78], rcx
.text:0000000000015C40
.text:0000000000015C40 loc_15C40:                              ; CODE XREF: printf_parse+5EB↑j
.text:0000000000015C40                 mov     [r12+20h], rbp
.text:0000000000015C45                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000015C49                 jmp     loc_157E5
.text:0000000000015C4E ; ---------------------------------------------------------------------------
.text:0000000000015C4E
.text:0000000000015C4E loc_15C4E:                              ; CODE XREF: printf_parse+4A8↑j
.text:0000000000015C4E                 movzx   eax, byte ptr [rbp+1]
.text:0000000000015C52                 sub     eax, 30h ; '0'
.text:0000000000015C55                 cmp     al, 9
.text:0000000000015C57                 ja      short loc_15C6E
.text:0000000000015C59                 nop     dword ptr [rax+00000000h]
.text:0000000000015C60
.text:0000000000015C60 loc_15C60:                              ; CODE XREF: printf_parse+64C↓j
.text:0000000000015C60                 add     rdx, 1
.text:0000000000015C64                 movzx   eax, byte ptr [rdx]
.text:0000000000015C67                 sub     eax, 30h ; '0'
.text:0000000000015C6A                 cmp     al, 9
.text:0000000000015C6C                 jbe     short loc_15C60
.text:0000000000015C6E
.text:0000000000015C6E loc_15C6E:                              ; CODE XREF: printf_parse+637↑j
.text:0000000000015C6E                 mov     rsi, [rsp+88h+var_70]
.text:0000000000015C73                 mov     rax, rdx
.text:0000000000015C76                 mov     [r12+38h], rdx
.text:0000000000015C7B                 sub     rax, rbp
.text:0000000000015C7E                 movzx   ebx, byte ptr [rdx]
.text:0000000000015C81                 mov     rbp, rdx
.text:0000000000015C84                 cmp     rsi, rax
.text:0000000000015C87                 cmovnb  rax, rsi
.text:0000000000015C8B                 mov     [rsp+88h+var_70], rax
.text:0000000000015C90                 jmp     loc_157EE
.text:0000000000015C95 ; ---------------------------------------------------------------------------
.text:0000000000015C95
.text:0000000000015C95 loc_15C95:                              ; CODE XREF: printf_parse+394↑j
.text:0000000000015C95                 mov     rsi, rax
.text:0000000000015C98
.text:0000000000015C98 loc_15C98:                              ; CODE XREF: printf_parse+687↓j
.text:0000000000015C98                 add     rsi, 1
.text:0000000000015C9C                 movzx   edi, byte ptr [rsi]
.text:0000000000015C9F                 lea     r11d, [rdi-30h]
.text:0000000000015CA3                 cmp     r11b, 9
.text:0000000000015CA7                 jbe     short loc_15C98
.text:0000000000015CA9                 cmp     dil, 24h ; '$'
.text:0000000000015CAD                 jnz     loc_159BA
.text:0000000000015CB3                 xor     esi, esi
.text:0000000000015CB5
.text:0000000000015CB5 loc_15CB5:                              ; CODE XREF: printf_parse+6DE↓j
.text:0000000000015CB5                 movsx   eax, cl
.text:0000000000015CB8                 mov     rdi, 1999999999999999h
.text:0000000000015CC2                 mov     rcx, r8
.text:0000000000015CC5                 sub     eax, 30h ; '0'
.text:0000000000015CC8                 cmp     rsi, rdi
.text:0000000000015CCB                 cdqe
.text:0000000000015CCD                 ja      short loc_15CD6
.text:0000000000015CCF                 lea     rcx, [rsi+rsi*4]
.text:0000000000015CD3                 add     rcx, rcx
.text:0000000000015CD6
.text:0000000000015CD6 loc_15CD6:                              ; CODE XREF: printf_parse+6AD↑j
.text:0000000000015CD6                 mov     rbp, rdx
.text:0000000000015CD9
.text:0000000000015CD9 loc_15CD9:                              ; CODE XREF: printf_parse+BF6↓j
.text:0000000000015CD9                 xor     r11d, r11d
.text:0000000000015CDC                 add     rax, rcx
.text:0000000000015CDF                 movzx   ecx, byte ptr [rdx+1]
.text:0000000000015CE3                 setb    r11b
.text:0000000000015CE7                 add     rdx, 1
.text:0000000000015CEB                 mov     rsi, rax
.text:0000000000015CEE                 test    r11, r11
.text:0000000000015CF1                 lea     edi, [rcx-30h]
.text:0000000000015CF4                 jnz     loc_161FE
.text:0000000000015CFA                 cmp     dil, 9
.text:0000000000015CFE                 jbe     short loc_15CB5
.text:0000000000015D00                 lea     rbx, [rax-1]
.text:0000000000015D04                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:0000000000015D08                 ja      def_15865       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000015D0E                 mov     [r12+28h], rbx
.text:0000000000015D13                 add     rbp, 2
.text:0000000000015D17                 jmp     loc_159DF
.text:0000000000015D1C ; ---------------------------------------------------------------------------
.text:0000000000015D1C
.text:0000000000015D1C loc_15D1C:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000015D1C                                         ; DATA XREF: .rodata:jpt_15865↓o
.text:0000000000015D1C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:0000000000015D1F                 mov     r11d, 16h
.text:0000000000015D25                 jg      loc_15878
.text:0000000000015D2B                 test    al, 4
.text:0000000000015D2D                 jnz     loc_15878
.text:0000000000015D33                 cmp     eax, 7
.text:0000000000015D36                 mov     r11d, 15h
.text:0000000000015D3C                 jg      loc_15878
.text:0000000000015D42                 test    al, 2
.text:0000000000015D44                 mov     r11d, 12h
.text:0000000000015D4A                 jnz     loc_15878
.text:0000000000015D50                 xor     r11d, r11d
.text:0000000000015D53                 test    al, 1
.text:0000000000015D55                 setz    r11b
.text:0000000000015D59                 add     r11d, 13h
.text:0000000000015D5D                 jmp     loc_15878
.text:0000000000015D5D ; ---------------------------------------------------------------------------
.text:0000000000015D62                 align 8
.text:0000000000015D68
.text:0000000000015D68 loc_15D68:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000015D68                                         ; DATA XREF: .rodata:jpt_15865↓o
.text:0000000000015D68                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:0000000000015D6B                 cmp     eax, 7
.text:0000000000015D6E                 setnle  r11b
.text:0000000000015D72                 add     r11d, 0Dh
.text:0000000000015D76                 jmp     loc_15878
.text:0000000000015D7B ; ---------------------------------------------------------------------------
.text:0000000000015D7B
.text:0000000000015D7B loc_15D7B:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000015D7B                                         ; DATA XREF: .rodata:jpt_15865↓o
.text:0000000000015D7B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:0000000000015D7E                 mov     r11d, 9
.text:0000000000015D84                 jg      loc_15878
.text:0000000000015D8A                 test    al, 4
.text:0000000000015D8C                 jnz     loc_15878
.text:0000000000015D92                 cmp     eax, 7
.text:0000000000015D95                 mov     r11d, 7
.text:0000000000015D9B                 jg      loc_15878
.text:0000000000015DA1                 test    al, 2
.text:0000000000015DA3                 mov     r11d, 1
.text:0000000000015DA9                 jnz     loc_15878
.text:0000000000015DAF                 and     eax, 1
.text:0000000000015DB2                 cmp     eax, 1
.text:0000000000015DB5                 sbb     r11d, r11d
.text:0000000000015DB8                 and     r11d, 2
.text:0000000000015DBC                 add     r11d, 3
.text:0000000000015DC0                 jmp     loc_15878
.text:0000000000015DC0 ; ---------------------------------------------------------------------------
.text:0000000000015DC5                 align 8
.text:0000000000015DC8
.text:0000000000015DC8 loc_15DC8:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000015DC8                                         ; DATA XREF: .rodata:jpt_15865↓o
.text:0000000000015DC8                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:0000000000015DCB                 cmp     eax, 7
.text:0000000000015DCE                 setnle  r11b
.text:0000000000015DD2                 add     r11d, 0Fh
.text:0000000000015DD6                 jmp     loc_15878
.text:0000000000015DDB ; ---------------------------------------------------------------------------
.text:0000000000015DDB
.text:0000000000015DDB loc_15DDB:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000015DDB                                         ; DATA XREF: .rodata:jpt_15865↓o
.text:0000000000015DDB                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:0000000000015DDE                 mov     r11d, 0Ch
.text:0000000000015DE4                 jg      loc_15878
.text:0000000000015DEA                 xor     r11d, r11d
.text:0000000000015DED                 test    al, 4
.text:0000000000015DEF                 setnz   r11b
.text:0000000000015DF3                 add     r11d, 0Bh
.text:0000000000015DF7                 jmp     loc_15878
.text:0000000000015DFC ; ---------------------------------------------------------------------------
.text:0000000000015DFC
.text:0000000000015DFC loc_15DFC:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000015DFC                                         ; DATA XREF: .rodata:jpt_15865↓o
.text:0000000000015DFC                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:0000000000015E02                 mov     ebx, 63h ; 'c'
.text:0000000000015E07                 jmp     loc_15878
.text:0000000000015E0C ; ---------------------------------------------------------------------------
.text:0000000000015E0C
.text:0000000000015E0C loc_15E0C:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000015E0C                                         ; DATA XREF: .rodata:jpt_15865↓o
.text:0000000000015E0C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:0000000000015E0F                 mov     r11d, 0Ah
.text:0000000000015E15                 jg      loc_15878
.text:0000000000015E1B                 test    al, 4
.text:0000000000015E1D                 jnz     loc_15878
.text:0000000000015E23                 cmp     eax, 7
.text:0000000000015E26                 mov     r11d, 8
.text:0000000000015E2C                 jg      loc_15878
.text:0000000000015E32                 test    al, 2
.text:0000000000015E34                 mov     r11d, 2
.text:0000000000015E3A                 jnz     loc_15878
.text:0000000000015E40                 and     eax, 1
.text:0000000000015E43                 cmp     eax, 1
.text:0000000000015E46                 sbb     r11d, r11d
.text:0000000000015E49                 and     r11d, 2
.text:0000000000015E4D                 add     r11d, 4
.text:0000000000015E51                 jmp     loc_15878
.text:0000000000015E51 ; ---------------------------------------------------------------------------
.text:0000000000015E56                 align 20h
.text:0000000000015E60
.text:0000000000015E60 loc_15E60:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000015E60                                         ; DATA XREF: .rodata:jpt_15865↓o
.text:0000000000015E60                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:0000000000015E66                 jmp     loc_15878
.text:0000000000015E6B ; ---------------------------------------------------------------------------
.text:0000000000015E6B
.text:0000000000015E6B def_15865:                              ; CODE XREF: printf_parse+22E↑j
.text:0000000000015E6B                                         ; printf_parse+245↑j ...
.text:0000000000015E6B                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000015E6F
.text:0000000000015E6F loc_15E6F:                              ; CODE XREF: printf_parse+88C↓j
.text:0000000000015E6F                                         ; printf_parse+95E↓j ...
.text:0000000000015E6F                 cmp     [rsp+88h+src], rcx
.text:0000000000015E74                 jz      short loc_15E7E
.text:0000000000015E76                 mov     rdi, rcx        ; ptr
.text:0000000000015E79                 call    free            ; PIC mode
.text:0000000000015E7E
.text:0000000000015E7E loc_15E7E:                              ; CODE XREF: printf_parse+854↑j
.text:0000000000015E7E                 mov     rdi, [r14+8]    ; ptr
.text:0000000000015E82                 cmp     [rsp+88h+var_60], rdi
.text:0000000000015E87                 jz      short loc_15E8E
.text:0000000000015E89                 call    free            ; PIC mode
.text:0000000000015E8E
.text:0000000000015E8E loc_15E8E:                              ; CODE XREF: printf_parse+867↑j
.text:0000000000015E8E                 call    ___errno_location ; PIC mode
.text:0000000000015E93                 mov     dword ptr [rax], 16h
.text:0000000000015E99                 mov     eax, 0FFFFFFFFh
.text:0000000000015E9E                 jmp     loc_156C2
.text:0000000000015EA3 ; ---------------------------------------------------------------------------
.text:0000000000015EA3
.text:0000000000015EA3 loc_15EA3:                              ; CODE XREF: printf_parse+2B2↑j
.text:0000000000015EA3                 cmp     edx, r11d
.text:0000000000015EA6                 jz      loc_158DB       ; jumptable 0000000000000245 case 37
.text:0000000000015EAC                 jmp     short loc_15E6F
.text:0000000000015EAC ; ---------------------------------------------------------------------------
.text:0000000000015EAE                 align 10h
.text:0000000000015EB0
.text:0000000000015EB0 loc_15EB0:                              ; CODE XREF: printf_parse+26E↑j
.text:0000000000015EB0                 add     r9, r9
.text:0000000000015EB3                 lea     rax, [r13+1]
.text:0000000000015EB7                 cmp     r9, r13
.text:0000000000015EBA                 cmovbe  r9, rax
.text:0000000000015EBE                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000015EC8                 cmp     r9, rax
.text:0000000000015ECB                 ja      loc_162AB
.text:0000000000015ED1                 mov     rsi, r9
.text:0000000000015ED4                 mov     [rsp+88h+var_40], r9
.text:0000000000015ED9                 mov     [rsp+88h+var_48], r10
.text:0000000000015EDE                 shl     rsi, 5          ; size
.text:0000000000015EE2                 cmp     [rsp+88h+src], rcx
.text:0000000000015EE7                 mov     [rsp+88h+var_50], r8
.text:0000000000015EEC                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000015EF1                 jz      loc_15F91
.text:0000000000015EF7                 mov     rdi, rcx        ; ptr
.text:0000000000015EFA                 call    _realloc        ; PIC mode
.text:0000000000015EFF                 test    rax, rax
.text:0000000000015F02                 mov     rcx, rax
.text:0000000000015F05                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000015F0A                 mov     r8, [rsp+88h+var_50]
.text:0000000000015F0F                 mov     r10, [rsp+88h+var_48]
.text:0000000000015F14                 mov     r9, [rsp+88h+var_40]
.text:0000000000015F19                 jz      loc_162A7
.text:0000000000015F1F                 mov     rax, [rsp+88h+src]
.text:0000000000015F24                 cmp     rax, [r15+8]
.text:0000000000015F28                 jz      loc_15FB9
.text:0000000000015F2E
.text:0000000000015F2E loc_15F2E:                              ; CODE XREF: printf_parse+9D8↓j
.text:0000000000015F2E                 mov     [r15+8], rcx
.text:0000000000015F32                 jmp     loc_15894
.text:0000000000015F37 ; ---------------------------------------------------------------------------
.text:0000000000015F37
.text:0000000000015F37 loc_15F37:                              ; CODE XREF: printf_parse+25C↑j
.text:0000000000015F37                 mov     rsi, [rsp+88h+var_68]
.text:0000000000015F3C                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000015F40                 lea     rax, [rsi+1]
.text:0000000000015F44                 mov     [r12+50h], rsi
.text:0000000000015F49                 jz      def_15865       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000015F4F                 mov     r13, [rsp+88h+var_68]
.text:0000000000015F54                 mov     [rsp+88h+var_68], rax
.text:0000000000015F59                 jmp     loc_15887
.text:0000000000015F5E ; ---------------------------------------------------------------------------
.text:0000000000015F5E
.text:0000000000015F5E loc_15F5E:                              ; CODE XREF: printf_parse+5AD↑j
.text:0000000000015F5E                 cmp     dil, 9
.text:0000000000015F62                 ja      def_15865       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000015F68                 movsx   eax, bl
.text:0000000000015F6B                 mov     rsi, r8
.text:0000000000015F6E                 mov     rcx, rbp
.text:0000000000015F71                 sub     eax, 30h ; '0'
.text:0000000000015F74                 cdqe
.text:0000000000015F76                 jmp     loc_15BB1
.text:0000000000015F7B ; ---------------------------------------------------------------------------
.text:0000000000015F7B
.text:0000000000015F7B loc_15F7B:                              ; CODE XREF: printf_parse+482↑j
.text:0000000000015F7B                 cmp     edx, 5
.text:0000000000015F7E                 jnz     loc_15E6F
.text:0000000000015F84                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000015F88                 lea     rdx, [rbp+1]
.text:0000000000015F8C                 jmp     loc_157E5
.text:0000000000015F91 ; ---------------------------------------------------------------------------
.text:0000000000015F91
.text:0000000000015F91 loc_15F91:                              ; CODE XREF: printf_parse+8D1↑j
.text:0000000000015F91                 mov     rdi, rsi        ; size
.text:0000000000015F94                 call    _malloc         ; PIC mode
.text:0000000000015F99                 test    rax, rax
.text:0000000000015F9C                 mov     rcx, rax
.text:0000000000015F9F                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000015FA4                 mov     r8, [rsp+88h+var_50]
.text:0000000000015FA9                 mov     r10, [rsp+88h+var_48]
.text:0000000000015FAE                 mov     r9, [rsp+88h+var_40]
.text:0000000000015FB3                 jz      loc_1611C
.text:0000000000015FB9
.text:0000000000015FB9 loc_15FB9:                              ; CODE XREF: printf_parse+908↑j
.text:0000000000015FB9                 mov     rdx, [r15]
.text:0000000000015FBC                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000015FC1                 mov     rdi, rcx        ; dest
.text:0000000000015FC4                 mov     [rsp+88h+var_40], r9
.text:0000000000015FC9                 mov     [rsp+88h+var_48], r10
.text:0000000000015FCE                 mov     [rsp+88h+var_50], r8
.text:0000000000015FD3                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000015FD8                 shl     rdx, 5          ; n
.text:0000000000015FDC                 call    _memcpy         ; PIC mode
.text:0000000000015FE1                 mov     r9, [rsp+88h+var_40]
.text:0000000000015FE6                 mov     r10, [rsp+88h+var_48]
.text:0000000000015FEB                 mov     rcx, rax
.text:0000000000015FEE                 mov     r8, [rsp+88h+var_50]
.text:0000000000015FF3                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000015FF8                 jmp     loc_15F2E
.text:0000000000015FFD ; ---------------------------------------------------------------------------
.text:0000000000015FFD
.text:0000000000015FFD loc_15FFD:                              ; CODE XREF: printf_parse+31F↑j
.text:0000000000015FFD                 mov     rdi, rsi        ; size
.text:0000000000016000                 call    _malloc         ; PIC mode
.text:0000000000016005                 test    rax, rax
.text:0000000000016008                 mov     rcx, rax
.text:000000000001600B                 mov     r8, [rsp+88h+var_58]
.text:0000000000016010                 mov     r10, [rsp+88h+var_50]
.text:0000000000016015                 mov     r9, [rsp+88h+var_48]
.text:000000000001601A                 jz      loc_16109
.text:0000000000016020
.text:0000000000016020 loc_16020:                              ; CODE XREF: printf_parse+351↑j
.text:0000000000016020                 lea     rax, [rbx+rbx*4]
.text:0000000000016024                 mov     rsi, [rsp+88h+var_60] ; src
.text:0000000000016029                 mov     rdi, rcx        ; dest
.text:000000000001602C                 mov     [rsp+88h+var_48], r9
.text:0000000000016031                 mov     [rsp+88h+var_50], r10
.text:0000000000016036                 lea     rdx, [rbx+rax*2]
.text:000000000001603A                 mov     [rsp+88h+var_58], r8
.text:000000000001603F                 shl     rdx, 3          ; n
.text:0000000000016043                 call    _memcpy         ; PIC mode
.text:0000000000016048                 mov     rbx, [r14]
.text:000000000001604B                 mov     rcx, rax
.text:000000000001604E                 mov     r9, [rsp+88h+var_48]
.text:0000000000016053                 mov     r10, [rsp+88h+var_50]
.text:0000000000016058                 mov     r8, [rsp+88h+var_58]
.text:000000000001605D                 jmp     loc_15977
.text:0000000000016062 ; ---------------------------------------------------------------------------
.text:0000000000016062
.text:0000000000016062 loc_16062:                              ; CODE XREF: printf_parse+3C6↑j
.text:0000000000016062                 mov     rax, [r15]
.text:0000000000016065                 jmp     loc_15A67
.text:000000000001606A ; ---------------------------------------------------------------------------
.text:000000000001606A
.text:000000000001606A loc_1606A:                              ; CODE XREF: printf_parse+532↑j
.text:000000000001606A                 cmp     edx, 5
.text:000000000001606D                 jnz     loc_15E6F
.text:0000000000016073                 movzx   ebx, byte ptr [r11]
.text:0000000000016077                 mov     rbp, r11
.text:000000000001607A                 jmp     loc_157EE
.text:000000000001607F ; ---------------------------------------------------------------------------
.text:000000000001607F
.text:000000000001607F loc_1607F:                              ; CODE XREF: printf_parse+4F4↑j
.text:000000000001607F                 add     r9, r9
.text:0000000000016082                 lea     rax, [rbx+1]
.text:0000000000016086                 cmp     r9, rbx
.text:0000000000016089                 cmovbe  r9, rax
.text:000000000001608D                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000016097                 cmp     r9, rax
.text:000000000001609A                 ja      loc_162AB
.text:00000000000160A0                 mov     rsi, r9
.text:00000000000160A3                 mov     [rsp+88h+var_40], r9
.text:00000000000160A8                 mov     [rsp+88h+var_48], r10
.text:00000000000160AD                 shl     rsi, 5          ; size
.text:00000000000160B1                 cmp     [rsp+88h+src], rcx
.text:00000000000160B6                 mov     [rsp+88h+var_50], r8
.text:00000000000160BB                 mov     [rsp+88h+var_58], r11
.text:00000000000160C0                 jz      loc_1627E
.text:00000000000160C6                 mov     rdi, rcx        ; ptr
.text:00000000000160C9                 call    _realloc        ; PIC mode
.text:00000000000160CE                 mov     rdx, [r15+8]
.text:00000000000160D2                 mov     r11, [rsp+88h+var_58]
.text:00000000000160D7                 mov     rcx, rax
.text:00000000000160DA                 mov     r8, [rsp+88h+var_50]
.text:00000000000160DF                 mov     r10, [rsp+88h+var_48]
.text:00000000000160E4                 mov     r9, [rsp+88h+var_40]
.text:00000000000160E9
.text:00000000000160E9 loc_160E9:                              ; CODE XREF: printf_parse+C82↓j
.text:00000000000160E9                 test    rcx, rcx
.text:00000000000160EC                 jz      loc_16307
.text:00000000000160F2                 cmp     [rsp+88h+src], rdx
.text:00000000000160F7                 mov     rax, [r15]
.text:00000000000160FA                 jz      loc_162C0
.text:0000000000016100
.text:0000000000016100 loc_16100:                              ; CODE XREF: printf_parse+CE2↓j
.text:0000000000016100                 mov     [r15+8], rcx
.text:0000000000016104                 jmp     loc_15B1D
.text:0000000000016109 ; ---------------------------------------------------------------------------
.text:0000000000016109
.text:0000000000016109 loc_16109:                              ; CODE XREF: printf_parse+9FA↑j
.text:0000000000016109                 mov     rcx, [r15+8]
.text:000000000001610D                 cmp     [rsp+88h+src], rcx
.text:0000000000016112                 jz      short loc_1612C
.text:0000000000016114
.text:0000000000016114 loc_16114:                              ; CODE XREF: printf_parse+C90↓j
.text:0000000000016114                 mov     rdi, rcx        ; ptr
.text:0000000000016117                 call    free            ; PIC mode
.text:000000000001611C
.text:000000000001611C loc_1611C:                              ; CODE XREF: printf_parse+993↑j
.text:000000000001611C                                         ; printf_parse+C96↓j
.text:000000000001611C                 mov     rdi, [r14+8]    ; ptr
.text:0000000000016120                 cmp     [rsp+88h+var_60], rdi
.text:0000000000016125                 jz      short loc_1612C
.text:0000000000016127                 call    free            ; PIC mode
.text:000000000001612C
.text:000000000001612C loc_1612C:                              ; CODE XREF: printf_parse+AF2↑j
.text:000000000001612C                                         ; printf_parse+B05↑j
.text:000000000001612C                 call    ___errno_location ; PIC mode
.text:0000000000016131                 mov     dword ptr [rax], 0Ch
.text:0000000000016137                 mov     eax, 0FFFFFFFFh
.text:000000000001613C                 jmp     loc_156C2
.text:0000000000016141 ; ---------------------------------------------------------------------------
.text:0000000000016141
.text:0000000000016141 loc_16141:                              ; CODE XREF: printf_parse+408↑j
.text:0000000000016141                 mov     rdi, rsi        ; size
.text:0000000000016144                 call    _malloc         ; PIC mode
.text:0000000000016149                 mov     rdx, [rsp+88h+src]
.text:000000000001614E                 mov     rcx, rax
.text:0000000000016151                 mov     r9, [rsp+88h+var_48]
.text:0000000000016156                 mov     r10, [rsp+88h+var_50]
.text:000000000001615B                 mov     r8, [rsp+88h+var_58]
.text:0000000000016160                 jmp     loc_15A4C
.text:0000000000016165 ; ---------------------------------------------------------------------------
.text:0000000000016165
.text:0000000000016165 loc_16165:                              ; CODE XREF: printf_parse+4E7↑j
.text:0000000000016165                 mov     rsi, [rsp+88h+var_68]
.text:000000000001616A                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000001616E                 lea     rax, [rsi+1]
.text:0000000000016172                 mov     [r12+40h], rsi
.text:0000000000016177                 jz      def_15865       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000001617D                 mov     rbx, [rsp+88h+var_68]
.text:0000000000016182                 mov     [rsp+88h+var_68], rax
.text:0000000000016187                 jmp     loc_15B0D
.text:000000000001618C ; ---------------------------------------------------------------------------
.text:000000000001618C
.text:000000000001618C loc_1618C:                              ; CODE XREF: printf_parse+4D8↑j
.text:000000000001618C                 mov     rdx, r11
.text:000000000001618F
.text:000000000001618F loc_1618F:                              ; CODE XREF: printf_parse+B7D↓j
.text:000000000001618F                 add     rdx, 1
.text:0000000000016193                 movzx   ecx, byte ptr [rdx]
.text:0000000000016196                 lea     esi, [rcx-30h]
.text:0000000000016199                 cmp     sil, 9
.text:000000000001619D                 jbe     short loc_1618F
.text:000000000001619F                 cmp     cl, 24h ; '$'
.text:00000000000161A2                 jnz     loc_15AFE
.text:00000000000161A8                 xor     ecx, ecx
.text:00000000000161AA
.text:00000000000161AA loc_161AA:                              ; CODE XREF: printf_parse+C3C↓j
.text:00000000000161AA                 mov     rsi, 1999999999999999h
.text:00000000000161B4                 sub     eax, 30h ; '0'
.text:00000000000161B7                 mov     rdx, r8
.text:00000000000161BA                 cmp     rcx, rsi
.text:00000000000161BD                 cdqe
.text:00000000000161BF                 ja      short loc_161C8
.text:00000000000161C1                 lea     rdx, [rcx+rcx*4]
.text:00000000000161C5                 add     rdx, rdx
.text:00000000000161C8
.text:00000000000161C8 loc_161C8:                              ; CODE XREF: printf_parse+B9F↑j
.text:00000000000161C8                 mov     rsi, r11
.text:00000000000161CB
.text:00000000000161CB loc_161CB:                              ; CODE XREF: printf_parse+BDC↓j
.text:00000000000161CB                 xor     ebx, ebx
.text:00000000000161CD                 add     rdx, rax
.text:00000000000161D0                 movsx   eax, byte ptr [r11+1]
.text:00000000000161D5                 setb    bl
.text:00000000000161D8                 add     r11, 1
.text:00000000000161DC                 mov     rcx, rdx
.text:00000000000161DF                 test    rbx, rbx
.text:00000000000161E2                 lea     edi, [rax-30h]
.text:00000000000161E5                 jz      short loc_16258
.text:00000000000161E7                 cmp     dil, 9
.text:00000000000161EB                 ja      def_15865       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000161F1                 sub     eax, 30h ; '0'
.text:00000000000161F4                 mov     rdx, r8
.text:00000000000161F7                 mov     rsi, r11
.text:00000000000161FA                 cdqe
.text:00000000000161FC                 jmp     short loc_161CB
.text:00000000000161FE ; ---------------------------------------------------------------------------
.text:00000000000161FE
.text:00000000000161FE loc_161FE:                              ; CODE XREF: printf_parse+6D4↑j
.text:00000000000161FE                 cmp     dil, 9
.text:0000000000016202                 ja      def_15865       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000016208                 movsx   eax, cl
.text:000000000001620B                 mov     rbp, rdx
.text:000000000001620E                 mov     rcx, r8
.text:0000000000016211                 sub     eax, 30h ; '0'
.text:0000000000016214                 cdqe
.text:0000000000016216                 jmp     loc_15CD9
.text:000000000001621B ; ---------------------------------------------------------------------------
.text:000000000001621B
.text:000000000001621B loc_1621B:                              ; CODE XREF: printf_parse+43D↑j
.text:000000000001621B                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000016220                 shl     rax, 5
.text:0000000000016224                 mov     rdi, rcx        ; dest
.text:0000000000016227                 mov     rdx, rax        ; n
.text:000000000001622A                 mov     [rsp+88h+var_48], r9
.text:000000000001622F                 mov     [rsp+88h+var_50], r10
.text:0000000000016234                 mov     [rsp+88h+var_58], r8
.text:0000000000016239                 call    _memcpy         ; PIC mode
.text:000000000001623E                 mov     r9, [rsp+88h+var_48]
.text:0000000000016243                 mov     rcx, rax
.text:0000000000016246                 mov     r10, [rsp+88h+var_50]
.text:000000000001624B                 mov     rax, [r15]
.text:000000000001624E                 mov     r8, [rsp+88h+var_58]
.text:0000000000016253                 jmp     loc_15A63
.text:0000000000016258 ; ---------------------------------------------------------------------------
.text:0000000000016258
.text:0000000000016258 loc_16258:                              ; CODE XREF: printf_parse+BC5↑j
.text:0000000000016258                 cmp     dil, 9
.text:000000000001625C                 jbe     loc_161AA
.text:0000000000016262                 lea     rbx, [rdx-1]
.text:0000000000016266                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000001626A                 ja      def_15865       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000016270                 mov     [r12+40h], rbx
.text:0000000000016275                 lea     r11, [rsi+2]
.text:0000000000016279                 jmp     loc_15B0D
.text:000000000001627E ; ---------------------------------------------------------------------------
.text:000000000001627E
.text:000000000001627E loc_1627E:                              ; CODE XREF: printf_parse+AA0↑j
.text:000000000001627E                 mov     rdi, rsi        ; size
.text:0000000000016281                 call    _malloc         ; PIC mode
.text:0000000000016286                 mov     rdx, [rsp+88h+src]
.text:000000000001628B                 mov     rcx, rax
.text:000000000001628E                 mov     r9, [rsp+88h+var_40]
.text:0000000000016293                 mov     r10, [rsp+88h+var_48]
.text:0000000000016298                 mov     r8, [rsp+88h+var_50]
.text:000000000001629D                 mov     r11, [rsp+88h+var_58]
.text:00000000000162A2                 jmp     loc_160E9
.text:00000000000162A7 ; ---------------------------------------------------------------------------
.text:00000000000162A7
.text:00000000000162A7 loc_162A7:                              ; CODE XREF: printf_parse+2DB↑j
.text:00000000000162A7                                         ; printf_parse+2F1↑j ...
.text:00000000000162A7                 mov     rcx, [r15+8]
.text:00000000000162AB
.text:00000000000162AB loc_162AB:                              ; CODE XREF: printf_parse+3E7↑j
.text:00000000000162AB                                         ; printf_parse+8AB↑j ...
.text:00000000000162AB                 cmp     [rsp+88h+src], rcx
.text:00000000000162B0                 jnz     loc_16114
.text:00000000000162B6                 jmp     loc_1611C
.text:00000000000162B6 ; ---------------------------------------------------------------------------
.text:00000000000162BB                 align 20h
.text:00000000000162C0
.text:00000000000162C0 loc_162C0:                              ; CODE XREF: printf_parse+ADA↑j
.text:00000000000162C0                 mov     rsi, [rsp+88h+src] ; src
.text:00000000000162C5                 shl     rax, 5
.text:00000000000162C9                 mov     rdi, rcx        ; dest
.text:00000000000162CC                 mov     rdx, rax        ; n
.text:00000000000162CF                 mov     [rsp+88h+var_40], r9
.text:00000000000162D4                 mov     [rsp+88h+var_48], r10
.text:00000000000162D9                 mov     [rsp+88h+var_50], r8
.text:00000000000162DE                 mov     [rsp+88h+var_58], r11
.text:00000000000162E3                 call    _memcpy         ; PIC mode
.text:00000000000162E8                 mov     r9, [rsp+88h+var_40]
.text:00000000000162ED                 mov     rcx, rax
.text:00000000000162F0                 mov     r10, [rsp+88h+var_48]
.text:00000000000162F5                 mov     rax, [r15]
.text:00000000000162F8                 mov     r8, [rsp+88h+var_50]
.text:00000000000162FD                 mov     r11, [rsp+88h+var_58]
.text:0000000000016302                 jmp     loc_16100
.text:0000000000016307 ; ---------------------------------------------------------------------------
.text:0000000000016307
.text:0000000000016307 loc_16307:                              ; CODE XREF: printf_parse+42F↑j
.text:0000000000016307                                         ; printf_parse+ACC↑j
.text:0000000000016307                 mov     rcx, rdx
.text:000000000001630A                 jmp     short loc_162AB
.text:000000000001630A ; } // starts at 15620
.text:000000000001630A printf_parse    endp
.text:000000000001630A
.text:000000000001630A ; ---------------------------------------------------------------------------
.text:000000000001630C                 align 10h
.text:0000000000016310
.text:0000000000016310 ; =============== S U B R O U T I N E =======================================
.text:0000000000016310
.text:0000000000016310 ; Attributes: info_from_lumina
.text:0000000000016310
.text:0000000000016310 ; void _libc_csu_init(void)
.text:0000000000016310                 public __libc_csu_init
.text:0000000000016310 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000016310 ; __unwind {
.text:0000000000016310                 push    r15
.text:0000000000016312                 push    r14
.text:0000000000016314                 mov     r15, rdx
.text:0000000000016317                 push    r13
.text:0000000000016319                 push    r12
.text:000000000001631B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000016322                 push    rbp
.text:0000000000016323                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000001632A                 push    rbx
.text:000000000001632B                 mov     r13d, edi
.text:000000000001632E                 mov     r14, rsi
.text:0000000000016331                 sub     rbp, r12
.text:0000000000016334                 sub     rsp, 8
.text:0000000000016338                 sar     rbp, 3
.text:000000000001633C                 call    _init_proc
.text:0000000000016341                 test    rbp, rbp
.text:0000000000016344                 jz      short loc_16366
.text:0000000000016346                 xor     ebx, ebx
.text:0000000000016348                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000016350
.text:0000000000016350 loc_16350:                              ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000016350                 mov     rdx, r15
.text:0000000000016353                 mov     rsi, r14
.text:0000000000016356                 mov     edi, r13d
.text:0000000000016359                 call    ds:(__frame_dummy_init_array_entry - 21C6B0h)[r12+rbx*8]
.text:000000000001635D                 add     rbx, 1
.text:0000000000016361                 cmp     rbp, rbx
.text:0000000000016364                 jnz     short loc_16350
.text:0000000000016366
.text:0000000000016366 loc_16366:                              ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000016366                 add     rsp, 8
.text:000000000001636A                 pop     rbx
.text:000000000001636B                 pop     rbp
.text:000000000001636C                 pop     r12
.text:000000000001636E                 pop     r13
.text:0000000000016370                 pop     r14
.text:0000000000016372                 pop     r15
.text:0000000000016374                 retn
.text:0000000000016374 ; } // starts at 16310
.text:0000000000016374 __libc_csu_init endp
.text:0000000000016374
.text:0000000000016374 ; ---------------------------------------------------------------------------
.text:0000000000016375                 align 20h
.text:0000000000016380
.text:0000000000016380 ; =============== S U B R O U T I N E =======================================
.text:0000000000016380
.text:0000000000016380
.text:0000000000016380 ; void _libc_csu_fini(void)
.text:0000000000016380                 public __libc_csu_fini
.text:0000000000016380 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000016380 ; __unwind {
.text:0000000000016380                 rep retn
.text:0000000000016380 ; } // starts at 16380
.text:0000000000016380 __libc_csu_fini endp
.text:0000000000016380
.text:0000000000016380 ; ---------------------------------------------------------------------------
.text:0000000000016382                 align 10h
.text:0000000000016390
.text:0000000000016390 ; =============== S U B R O U T I N E =======================================
.text:0000000000016390
.text:0000000000016390
.text:0000000000016390 atexit          proc near               ; CODE XREF: main+82↑p
.text:0000000000016390 ; __unwind {
.text:0000000000016390                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000016397                 xor     esi, esi        ; obj
.text:0000000000016399                 jmp     ___cxa_atexit
.text:0000000000016399 ; } // starts at 16390
.text:0000000000016399 atexit          endp
.text:0000000000016399
.text:0000000000016399 _text           ends
.text:0000000000016399
LOAD:000000000001639E ; ===========================================================================
LOAD:000000000001639E
LOAD:000000000001639E ; Segment type: Pure code
LOAD:000000000001639E ; Segment permissions: Read/Execute
LOAD:000000000001639E LOAD            segment byte public 'CODE' use64
LOAD:000000000001639E                 assume cs:LOAD
LOAD:000000000001639E                 ;org 1639Eh
LOAD:000000000001639E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000001639E                 align 20h
LOAD:000000000001639E LOAD            ends
LOAD:000000000001639E
.fini:00000000000163A0 ; ===========================================================================
.fini:00000000000163A0
.fini:00000000000163A0 ; Segment type: Pure code
.fini:00000000000163A0 ; Segment permissions: Read/Execute
.fini:00000000000163A0 _fini           segment dword public 'CODE' use64
.fini:00000000000163A0                 assume cs:_fini
.fini:00000000000163A0                 ;org 163A0h
.fini:00000000000163A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000163A0
.fini:00000000000163A0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000163A0
.fini:00000000000163A0
.fini:00000000000163A0                 public _term_proc
.fini:00000000000163A0 _term_proc      proc near
.fini:00000000000163A0                 sub     rsp, 8          ; _fini
.fini:00000000000163A4                 add     rsp, 8
.fini:00000000000163A8                 retn
.fini:00000000000163A8 _term_proc      endp
.fini:00000000000163A8
.fini:00000000000163A8 _fini           ends
.fini:00000000000163A8
LOAD:00000000000163A9 ; ===========================================================================
LOAD:00000000000163A9
LOAD:00000000000163A9 ; Segment type: Pure code
LOAD:00000000000163A9 ; Segment permissions: Read/Execute
LOAD:00000000000163A9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000163A9                 assume cs:LOAD
LOAD:00000000000163A9                 ;org 163A9h
LOAD:00000000000163A9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000163A9                 align 20h
LOAD:00000000000163A9 LOAD            ends
LOAD:00000000000163A9
.rodata:00000000000163C0 ; ===========================================================================
.rodata:00000000000163C0
.rodata:00000000000163C0 ; Segment type: Pure data
.rodata:00000000000163C0 ; Segment permissions: Read
.rodata:00000000000163C0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000163C0                 assume cs:_rodata
.rodata:00000000000163C0                 ;org 163C0h
.rodata:00000000000163C0                 public _IO_stdin_used
.rodata:00000000000163C0 _IO_stdin_used  db    1
.rodata:00000000000163C1                 db    0
.rodata:00000000000163C2                 db    2
.rodata:00000000000163C3                 db    0
.rodata:00000000000163C4 ; const char aCannotCreateDi[]
.rodata:00000000000163C4 aCannotCreateDi db 'cannot create directory %s',0
.rodata:00000000000163C4                                         ; DATA XREF: mkancesdirs_safe_wd+63↑o
.rodata:00000000000163C4                                         ; mkancesdirs_safe_wd+15B↑o ...
.rodata:00000000000163DF ; const char aCreatingDirect[]
.rodata:00000000000163DF aCreatingDirect db 'creating directory %s',0
.rodata:00000000000163DF                                         ; DATA XREF: announce_mkdir_part_9+E↑o
.rodata:00000000000163F5 ; const char aCannotStatS[]
.rodata:00000000000163F5 aCannotStatS    db 'cannot stat %s',0   ; DATA XREF: install_file_in_file+3D5↑o
.rodata:00000000000163F5                                         ; copy_internal+8EF↑o ...
.rodata:0000000000016404 ; const char aForkSystemCall[]
.rodata:0000000000016404 aForkSystemCall db 'fork system call failed',0
.rodata:0000000000016404                                         ; DATA XREF: install_file_in_file:loc_4720↑o
.rodata:000000000001641C ; const char aCannotRunS[]
.rodata:000000000001641C aCannotRunS     db 'cannot run %s',0    ; DATA XREF: install_file_in_file+613↑o
.rodata:000000000001642A aWaitingForStri db 'waiting for strip',0
.rodata:000000000001642A                                         ; DATA XREF: install_file_in_file+565↑o
.rodata:000000000001642A                                         ; .data.rel.ro:000000000021C800↓o ...
.rodata:000000000001643C ; const char aCannotUnlinkS[]
.rodata:000000000001643C aCannotUnlinkS  db 'cannot unlink %s',0 ; DATA XREF: install_file_in_file+506↑o
.rodata:000000000001644D ; const char aCannotSetTimes[]
.rodata:000000000001644D aCannotSetTimes db 'cannot set timestamps for %s',0
.rodata:000000000001644D                                         ; DATA XREF: install_file_in_file+146↑o
.rodata:000000000001646A ; const char aCannotChangeOw[]
.rodata:000000000001646A aCannotChangeOw db 'cannot change ownership of %s',0
.rodata:000000000001646A                                         ; DATA XREF: install_file_in_file+3F5↑o
.rodata:0000000000016488 aInstall        db 'install',0          ; DATA XREF: main+358↑o
.rodata:0000000000016488                                         ; usage+1F3↑o ...
.rodata:0000000000016490 asc_16490       db '[',0                ; DATA XREF: usage+1FF↑o
.rodata:0000000000016492 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+226↑o
.rodata:00000000000164A2 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:00000000000164A2                                         ; DATA XREF: usage+256↑o
.rodata:00000000000164A2                                         ; usage+34C↑o ...
.rodata:00000000000164B8 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+267↑o
.rodata:00000000000164C2 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+273↑o
.rodata:00000000000164D1 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+206↑o
.rodata:00000000000164DB aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+232↑o
.rodata:00000000000164E5 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+24A↑o
.rodata:00000000000164EF ; const char aSOnlineHelpS[]
.rodata:00000000000164EF aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+2BA↑o
.rodata:00000000000164EF                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000016506 unk_16506       db  47h ; G             ; DATA XREF: main+351↑o
.rodata:0000000000016506                                         ; usage+2D6↑o ...
.rodata:0000000000016507                 db  4Eh ; N
.rodata:0000000000016508                 db  55h ; U
.rodata:0000000000016509                 db  20h
.rodata:000000000001650A ; const char domainname[]
.rodata:000000000001650A domainname      db 'coreutils',0        ; DATA XREF: main+63↑o
.rodata:000000000001650A                                         ; main+6F↑o ...
.rodata:0000000000016514 ; const char s2[]
.rodata:0000000000016514 s2              db 'en_',0              ; DATA XREF: usage+2FD↑o
.rodata:0000000000016514                                         ; usage+3BE↑o
.rodata:0000000000016518 ; const char aFullDocumentat[]
.rodata:0000000000016518 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000016518                                         ; DATA XREF: usage:loc_4C39↑o
.rodata:0000000000016518                                         ; usage:loc_4CF6↑o
.rodata:0000000000016533 ; const char dirname[]
.rodata:0000000000016533 dirname         db '/usr/local/share/locale',0
.rodata:0000000000016533                                         ; DATA XREF: main+5C↑o
.rodata:000000000001654B aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+34A↑o
.rodata:000000000001655B ; const char shortopts[]
.rodata:000000000001655B shortopts       db 'bcCsDdg:m:o:pt:TvS:Z',0
.rodata:000000000001655B                                         ; DATA XREF: main:loc_32F0↑o
.rodata:0000000000016570 ; const char aFailedToAccess[]
.rodata:0000000000016570 aFailedToAccess db 'failed to access %s',0
.rodata:0000000000016570                                         ; DATA XREF: main+AF1↑o
.rodata:0000000000016570                                         ; main+B29↑o
.rodata:0000000000016584 ; const char aTargetSIsNotAD[]
.rodata:0000000000016584 aTargetSIsNotAD db 'target %s is not a directory',0
.rodata:0000000000016584                                         ; DATA XREF: main+88F↑o
.rodata:0000000000016584                                         ; main+AB9↑o ...
.rodata:00000000000165A1 ; const char aBackupType[]
.rodata:00000000000165A1 aBackupType     db 'backup type',0      ; DATA XREF: main:loc_3A27↑o
.rodata:00000000000165AD ; const char aMissingFileOpe[]
.rodata:00000000000165AD aMissingFileOpe db 'missing file operand',0
.rodata:00000000000165AD                                         ; DATA XREF: main:loc_3D75↑o
.rodata:00000000000165C2 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+CC8↑o
.rodata:00000000000165D3 ; const char aInvalidModeS[]
.rodata:00000000000165D3 aInvalidModeS   db 'invalid mode %s',0  ; DATA XREF: main+C83↑o
.rodata:00000000000165E3 ; const char aInvalidUserS[]
.rodata:00000000000165E3 aInvalidUserS   db 'invalid user %s',0  ; DATA XREF: main+A4C↑o
.rodata:00000000000165F3 ; const char aInvalidGroupS[]
.rodata:00000000000165F3 aInvalidGroupS  db 'invalid group %s',0 ; DATA XREF: main+9E7↑o
.rodata:0000000000016604 aBackup         db 'backup',0           ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000001660B aCompare        db 'compare',0          ; DATA XREF: .data.rel.ro:000000000021C6E0↓o
.rodata:0000000000016613 aGroup          db 'group',0            ; DATA XREF: .data.rel.ro:000000000021C740↓o
.rodata:0000000000016619 aMode           db 'mode',0             ; DATA XREF: .data.rel.ro:000000000021C760↓o
.rodata:000000000001661E aNoTargetDirect db 'no-target-directory',0
.rodata:000000000001661E                                         ; DATA XREF: .data.rel.ro:000000000021C780↓o
.rodata:000000000001661E                                         ; .data.rel.ro:000000000021C860↓o
.rodata:0000000000016632 aOwner          db 'owner',0            ; DATA XREF: .data.rel.ro:000000000021C7A0↓o
.rodata:0000000000016638 aPreserveTimest db 'preserve-timestamps',0
.rodata:0000000000016638                                         ; DATA XREF: .data.rel.ro:000000000021C7C0↓o
.rodata:000000000001664C aPreserveContex_0 db 'preserve-context',0
.rodata:000000000001664C                                         ; DATA XREF: .data.rel.ro:000000000021C7E0↓o
.rodata:000000000001664C                                         ; .data.rel.ro:000000000021C700↓o ...
.rodata:000000000001665D aStripProgram   db 'strip-program',0    ; DATA XREF: .data.rel.ro:000000000021C820↓o
.rodata:000000000001666B aSuffix         db 'suffix',0           ; DATA XREF: .data.rel.ro:000000000021C840↓o
.rodata:0000000000016672 aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:000000000021C880↓o
.rodata:000000000001667A aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000021C8A0↓o
.rodata:000000000001667F aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000021C8C0↓o
.rodata:0000000000016687                 align 8
.rodata:0000000000016688 ; const char aStripProcessTe[]
.rodata:0000000000016688 aStripProcessTe db 'strip process terminated abnormally',0
.rodata:0000000000016688                                         ; DATA XREF: install_file_in_file:loc_46F9↑o
.rodata:00000000000166AC                 align 10h
.rodata:00000000000166B0 ; const char aCannotChangePe[]
.rodata:00000000000166B0 aCannotChangePe db 'cannot change permissions of %s',0
.rodata:00000000000166B0                                         ; DATA XREF: install_file_in_file+455↑o
.rodata:00000000000166B0                                         ; make_dir_parents+31E↑o
.rodata:00000000000166D0 ; const char aTrySHelpForMor[]
.rodata:00000000000166D0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000166D0                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000166F7                 align 8
.rodata:00000000000166F8 ; const char aUsageSOptionTS[]
.rodata:00000000000166F8 aUsageSOptionTS db 'Usage: %s [OPTION]... [-T] SOURCE DEST',0Ah
.rodata:00000000000166F8                                         ; DATA XREF: usage:loc_497D↑o
.rodata:00000000000166F8                 db '  or:  %s [OPTION]... SOURCE... DIRECTORY',0Ah
.rodata:00000000000166F8                 db '  or:  %s [OPTION]... -t DIRECTORY SOURCE...',0Ah
.rodata:00000000000166F8                 db '  or:  %s [OPTION]... -d DIRECTORY...',0Ah,0
.rodata:000000000001679D                 align 20h
.rodata:00000000000167A0 ; const char aThisInstallPro[]
.rodata:00000000000167A0 aThisInstallPro db 0Ah                  ; DATA XREF: usage+8D↑o
.rodata:00000000000167A0                 db 'This install program copies files (often just compiled) into dest'
.rodata:00000000000167A0                 db 'ination',0Ah
.rodata:00000000000167A0                 db 'locations you choose.  If you want to download and install a read'
.rodata:00000000000167A0                 db 'y-to-use',0Ah
.rodata:00000000000167A0                 db 'package on a GNU/Linux system, you should instead be using a pack'
.rodata:00000000000167A0                 db 'age manager',0Ah
.rodata:00000000000167A0                 db 'like yum(1) or apt-get(1).',0Ah
.rodata:00000000000167A0                 db 0Ah
.rodata:00000000000167A0                 db 'In the first three forms, copy SOURCE to DEST or multiple SOURCE('
.rodata:00000000000167A0                 db 's) to',0Ah
.rodata:00000000000167A0                 db 'the existing DIRECTORY, while setting permission modes and owner/'
.rodata:00000000000167A0                 db 'group.',0Ah
.rodata:00000000000167A0                 db 'In the 4th form, create all components of the given DIRECTORY(ies'
.rodata:00000000000167A0                 db ').',0Ah,0
.rodata:0000000000016971                 align 8
.rodata:0000000000016978 ; const char aMandatoryArgum[]
.rodata:0000000000016978 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+B2↑o
.rodata:0000000000016978                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000016978                 db 'ns too.',0Ah,0
.rodata:00000000000169C3                 align 8
.rodata:00000000000169C8 ; const char aBackupControlM[]
.rodata:00000000000169C8 aBackupControlM db '      --backup[=CONTROL]  make a backup of each existing destinat'
.rodata:00000000000169C8                                         ; DATA XREF: usage+D7↑o
.rodata:00000000000169C8                 db 'ion file',0Ah
.rodata:00000000000169C8                 db '  -b                  like --backup but does not accept an argume'
.rodata:00000000000169C8                 db 'nt',0Ah
.rodata:00000000000169C8                 db '  -c                  (ignored)',0Ah
.rodata:00000000000169C8                 db '  -C, --compare       compare each pair of source and destination'
.rodata:00000000000169C8                 db ' files, and',0Ah
.rodata:00000000000169C8                 db '                        in some cases, do not modify the destinat'
.rodata:00000000000169C8                 db 'ion at all',0Ah
.rodata:00000000000169C8                 db '  -d, --directory     treat all arguments as directory names; cre'
.rodata:00000000000169C8                 db 'ate all',0Ah
.rodata:00000000000169C8                 db '                        components of the specified directories',0Ah
.rodata:00000000000169C8                 db 0
.rodata:0000000000016B99                 align 20h
.rodata:0000000000016BA0 ; const char aDCreateAllLead[]
.rodata:0000000000016BA0 aDCreateAllLead db '  -D                  create all leading components of DEST excep'
.rodata:0000000000016BA0                                         ; DATA XREF: usage+FC↑o
.rodata:0000000000016BA0                 db 't the last,',0Ah
.rodata:0000000000016BA0                 db '                        or all components of --target-directory,',0Ah
.rodata:0000000000016BA0                 db '                        then copy SOURCE to DEST',0Ah
.rodata:0000000000016BA0                 db '  -g, --group=GROUP   set group ownership, instead of process',27h
.rodata:0000000000016BA0                 db ' current group',0Ah
.rodata:0000000000016BA0                 db '  -m, --mode=MODE     set permission mode (as in chmod), instead '
.rodata:0000000000016BA0                 db 'of rwxr-xr-x',0Ah
.rodata:0000000000016BA0                 db '  -o, --owner=OWNER   set ownership (super-user only)',0Ah,0
.rodata:0000000000016D31                 align 8
.rodata:0000000000016D38 ; const char aPPreserveTimes[]
.rodata:0000000000016D38 aPPreserveTimes db '  -p, --preserve-timestamps   apply access/modification times of '
.rodata:0000000000016D38                                         ; DATA XREF: usage+121↑o
.rodata:0000000000016D38                 db 'SOURCE files',0Ah
.rodata:0000000000016D38                 db '                        to corresponding destination files',0Ah
.rodata:0000000000016D38                 db '  -s, --strip         strip symbol tables',0Ah
.rodata:0000000000016D38                 db '      --strip-program=PROGRAM  program used to strip binaries',0Ah
.rodata:0000000000016D38                 db '  -S, --suffix=SUFFIX  override the usual backup suffix',0Ah
.rodata:0000000000016D38                 db '  -t, --target-directory=DIRECTORY  copy all SOURCE arguments int'
.rodata:0000000000016D38                 db 'o DIRECTORY',0Ah
.rodata:0000000000016D38                 db '  -T, --no-target-directory  treat DEST as a normal file',0Ah
.rodata:0000000000016D38                 db '  -v, --verbose       print the name of each directory as it is c'
.rodata:0000000000016D38                 db 'reated',0Ah,0
.rodata:0000000000016F30 ; const char aPreserveContex[]
.rodata:0000000000016F30 aPreserveContex db '      --preserve-context  preserve SELinux security context',0Ah
.rodata:0000000000016F30                                         ; DATA XREF: usage+146↑o
.rodata:0000000000016F30                 db '  -Z                      set SELinux security context of destina'
.rodata:0000000000016F30                 db 'tion',0Ah
.rodata:0000000000016F30                 db '                            file and each created directory to de'
.rodata:0000000000016F30                 db 'fault type',0Ah
.rodata:0000000000016F30                 db '      --context[=CTX]     like -Z, or if CTX is specified then se'
.rodata:0000000000016F30                 db 't the',0Ah
.rodata:0000000000016F30                 db '                            SELinux or SMACK security context to '
.rodata:0000000000016F30                 db 'CTX',0Ah,0
.rodata:000000000001708B                 align 10h
.rodata:0000000000017090 ; const char aHelpDisplayThi[]
.rodata:0000000000017090 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000017090                                         ; DATA XREF: usage+16B↑o
.rodata:00000000000170BD                 align 20h
.rodata:00000000000170C0 ; const char aVersionOutputV[]
.rodata:00000000000170C0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000170C0                                         ; DATA XREF: usage+190↑o
.rodata:00000000000170F6                 align 8
.rodata:00000000000170F8 ; const char aTheBackupSuffi[]
.rodata:00000000000170F8 aTheBackupSuffi db 0Ah                  ; DATA XREF: usage+1B5↑o
.rodata:00000000000170F8                 db 'The backup suffix is ',27h,'~',27h,', unless set with --suffix or'
.rodata:00000000000170F8                 db ' SIMPLE_BACKUP_SUFFIX.',0Ah
.rodata:00000000000170F8                 db 'The version control method may be selected via the --backup optio'
.rodata:00000000000170F8                 db 'n or through',0Ah
.rodata:00000000000170F8                 db 'the VERSION_CONTROL environment variable.  Here are the values:',0Ah
.rodata:00000000000170F8                 db 0Ah,0
.rodata:00000000000171D5                 align 8
.rodata:00000000000171D8 ; const char aNoneOffNeverMa[]
.rodata:00000000000171D8 aNoneOffNeverMa db '  none, off       never make backups (even if --backup is given)',0Ah
.rodata:00000000000171D8                                         ; DATA XREF: usage+1DA↑o
.rodata:00000000000171D8                 db '  numbered, t     make numbered backups',0Ah
.rodata:00000000000171D8                 db '  existing, nil   numbered if numbered backups exist, simple othe'
.rodata:00000000000171D8                 db 'rwise',0Ah
.rodata:00000000000171D8                 db '  simple, never   always make simple backups',0Ah,0
.rodata:00000000000172B6                 align 8
.rodata:00000000000172B8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:00000000000172B8                                         ; DATA XREF: usage+2CF↑o
.rodata:00000000000172B8                                         ; usage+333↑o ...
.rodata:00000000000172E0 ; const char aReportAnyTrans[]
.rodata:00000000000172E0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000172E0                                         ; DATA XREF: usage+427↑o
.rodata:00000000000172E0                 db 'am/>',0Ah,0
.rodata:0000000000017327                 align 8
.rodata:0000000000017328 ; const char aOrAvailableLoc[]
.rodata:0000000000017328 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000017328                                         ; DATA XREF: usage:loc_4C7E↑o
.rodata:000000000001735B                 align 20h
.rodata:0000000000017360 ; const char aMultipleTarget[]
.rodata:0000000000017360 aMultipleTarget db 'multiple target directories specified',0
.rodata:0000000000017360                                         ; DATA XREF: main:loc_3C8B↑o
.rodata:0000000000017386                 align 8
.rodata:0000000000017388 ; const char aWarningIgnorin_0[]
.rodata:0000000000017388 aWarningIgnorin_0 db 'WARNING: ignoring --preserve-context; this kernel is not SELinux-'
.rodata:0000000000017388                                         ; DATA XREF: main:loc_356E↑o
.rodata:0000000000017388                 db 'enabled',0
.rodata:00000000000173D1                 align 8
.rodata:00000000000173D8 aWarningIgnorin db 'warning: ignoring --context; it requires an SELinux-enabled kerne'
.rodata:00000000000173D8                                         ; DATA XREF: main+435↑o
.rodata:00000000000173D8                 db 'l',0
.rodata:000000000001741B                 align 20h
.rodata:0000000000017420 ; const char aTheStripOption[]
.rodata:0000000000017420 aTheStripOption db 'the strip option may not be used when installing a directory',0
.rodata:0000000000017420                                         ; DATA XREF: main:loc_3E09↑o
.rodata:000000000001745D                 align 20h
.rodata:0000000000017460 ; const char aTargetDirector[]
.rodata:0000000000017460 aTargetDirector db 'target directory not allowed when installing a directory',0
.rodata:0000000000017460                                         ; DATA XREF: main+70C↑o
.rodata:0000000000017499                 align 20h
.rodata:00000000000174A0 ; const char aCannotSetTarge[]
.rodata:00000000000174A0 aCannotSetTarge db 'cannot set target context and preserve it',0
.rodata:00000000000174A0                                         ; DATA XREF: main:loc_3D1A↑o
.rodata:00000000000174CA                 align 10h
.rodata:00000000000174D0 ; const char aFailedToSetDef[]
.rodata:00000000000174D0 aFailedToSetDef db 'failed to set default file creation context to %s',0
.rodata:00000000000174D0                                         ; DATA XREF: main+7AE↑o
.rodata:0000000000017502                 align 8
.rodata:0000000000017508 ; const char aMissingDestina[]
.rodata:0000000000017508 aMissingDestina db 'missing destination file operand after %s',0
.rodata:0000000000017508                                         ; DATA XREF: main+BBE↑o
.rodata:0000000000017532                 align 8
.rodata:0000000000017538 ; const char aCannotCombineT[]
.rodata:0000000000017538 aCannotCombineT db 'cannot combine --target-directory (-t) and --no-target-directory '
.rodata:0000000000017538                                         ; DATA XREF: main:loc_3CAF↑o
.rodata:0000000000017538                 db '(-T)',0
.rodata:000000000001757E                 align 20h
.rodata:0000000000017580 ; const char aWarningIgnorin_1[]
.rodata:0000000000017580 aWarningIgnorin_1 db 'WARNING: ignoring --strip-program option as -s option was not spe'
.rodata:0000000000017580                                         ; DATA XREF: main:loc_3A54↑o
.rodata:0000000000017580                 db 'cified',0
.rodata:00000000000175C8 aOptionsCompare_0 db 'options --compare (-C) and --preserve-timestamps are mutually exc'
.rodata:00000000000175C8                                         ; DATA XREF: main+C70↑o
.rodata:00000000000175C8                 db 'lusive',0
.rodata:0000000000017610 aOptionsCompare db 'options --compare (-C) and --strip are mutually exclusive',0
.rodata:0000000000017610                                         ; DATA XREF: main+5CC↑o
.rodata:000000000001764A                 align 10h
.rodata:0000000000017650 ; const char aTheCompareCOpt[]
.rodata:0000000000017650 aTheCompareCOpt db 'the --compare (-C) option is ignored when you specify a mode with'
.rodata:0000000000017650                                         ; DATA XREF: main:loc_3A7A↑o
.rodata:0000000000017650                 db ' non-permission bits',0
.rodata:00000000000176A6 asc_176A6       db ': ',0               ; DATA XREF: prog_fprintf+7D↑o
.rodata:00000000000176A9                 align 10h
.rodata:00000000000176B0 ; const char msgid[]
.rodata:00000000000176B0 msgid           db 'failed to restore the default file creation context',0
.rodata:00000000000176B0                                         ; DATA XREF: restore_default_fscreatecon_or_die+6↑o
.rodata:00000000000176E4                 align 8
.rodata:00000000000176E8 ; const char aCannotCreateHa[]
.rodata:00000000000176E8 aCannotCreateHa db 'cannot create hard link %s to %s',0
.rodata:00000000000176E8                                         ; DATA XREF: create_hard_link+CC↑o
.rodata:0000000000017709                 align 10h
.rodata:0000000000017710 ; const char aSReplaceSOverr[]
.rodata:0000000000017710 aSReplaceSOverr db '%s: replace %s, overriding mode %04lo (%s)? ',0
.rodata:0000000000017710                                         ; DATA XREF: overwrite_ok_isra_12:loc_5226↑o
.rodata:000000000001773D                 align 20h
.rodata:0000000000017740 ; const char aSUnwritableSMo[]
.rodata:0000000000017740 aSUnwritableSMo db '%s: unwritable %s (mode %04lo, %s); try anyway? ',0
.rodata:0000000000017740                                         ; DATA XREF: overwrite_ok_isra_12:loc_52D0↑o
.rodata:0000000000017771                 align 8
.rodata:0000000000017778 ; const char aFailedToGetSec[]
.rodata:0000000000017778 aFailedToGetSec db 'failed to get security context of %s',0
.rodata:0000000000017778                                         ; DATA XREF: set_process_security_ctx+3A↑o
.rodata:000000000001779D                 align 20h
.rodata:00000000000177A0 ; const char aFailedToSetThe[]
.rodata:00000000000177A0 aFailedToSetThe db 'failed to set the security context of %s',0
.rodata:00000000000177A0                                         ; DATA XREF: set_file_security_ctx+33↑o
.rodata:00000000000177C9                 align 10h
.rodata:00000000000177D0 ; const char aFailedToPreser[]
.rodata:00000000000177D0 aFailedToPreser db 'failed to preserve ownership for %s',0
.rodata:00000000000177D0                                         ; DATA XREF: set_owner+19D↑o
.rodata:00000000000177D0                                         ; copy_internal:loc_9BE4↑o
.rodata:00000000000177F4                 align 8
.rodata:00000000000177F8 ; const char aRNotSpecifiedO[]
.rodata:00000000000177F8 aRNotSpecifiedO db '-r not specified; omitting directory %s',0
.rodata:00000000000177F8                                         ; DATA XREF: copy_internal+BF9↑o
.rodata:0000000000017820 ; const char aWarningSourceF[]
.rodata:0000000000017820 aWarningSourceF db 'warning: source file %s specified more than once',0
.rodata:0000000000017820                                         ; DATA XREF: copy_internal+1939↑o
.rodata:0000000000017851                 align 8
.rodata:0000000000017858 aCannotOverwrit_0 db 'cannot overwrite non-directory %s with directory %s',0
.rodata:0000000000017858                                         ; DATA XREF: copy_internal+23AF↑o
.rodata:000000000001788C                 align 10h
.rodata:0000000000017890 aWillNotOverwri db 'will not overwrite just-created %s with %s',0
.rodata:0000000000017890                                         ; DATA XREF: copy_internal+2B49↑o
.rodata:00000000000178BB                 align 20h
.rodata:00000000000178C0 ; const char aCannotOverwrit[]
.rodata:00000000000178C0 aCannotOverwrit db 'cannot overwrite directory %s with non-directory',0
.rodata:00000000000178C0                                         ; DATA XREF: copy_internal+1303↑o
.rodata:00000000000178F1                 align 8
.rodata:00000000000178F8 aCannotMoveDire db 'cannot move directory onto non-directory: %s -> %s',0
.rodata:00000000000178F8                                         ; DATA XREF: copy_internal+25A0↑o
.rodata:000000000001792B                 align 10h
.rodata:0000000000017930 ; const char aBackingUpSMigh[]
.rodata:0000000000017930 aBackingUpSMigh db 'backing up %s might destroy source;  %s not moved',0
.rodata:0000000000017930                                         ; DATA XREF: copy_internal+2914↑o
.rodata:0000000000017962                 align 8
.rodata:0000000000017968 ; const char aBackingUpSMigh_0[]
.rodata:0000000000017968 aBackingUpSMigh_0 db 'backing up %s might destroy source;  %s not copied',0
.rodata:0000000000017968                                         ; DATA XREF: copy_internal:loc_8796↑o
.rodata:000000000001799B                 align 20h
.rodata:00000000000179A0 ; const char aWillNotCopySTh[]
.rodata:00000000000179A0 aWillNotCopySTh db 'will not copy %s through just-created symlink %s',0
.rodata:00000000000179A0                                         ; DATA XREF: copy_internal+419↑o
.rodata:00000000000179D1                 align 8
.rodata:00000000000179D8 ; const char aCannotCopyADir[]
.rodata:00000000000179D8 aCannotCopyADir db 'cannot copy a directory, %s, into itself, %s',0
.rodata:00000000000179D8                                         ; DATA XREF: copy_internal+10D2↑o
.rodata:0000000000017A05                 align 8
.rodata:0000000000017A08 ; const char aWarningSourceD[]
.rodata:0000000000017A08 aWarningSourceD db 'warning: source directory %s specified more than once',0
.rodata:0000000000017A08                                         ; DATA XREF: copy_internal+26DB↑o
.rodata:0000000000017A3E                 align 20h
.rodata:0000000000017A40 ; const char aWillNotCreateH[]
.rodata:0000000000017A40 aWillNotCreateH db 'will not create hard link %s to directory %s',0
.rodata:0000000000017A40                                         ; DATA XREF: copy_internal+2041↑o
.rodata:0000000000017A6D                 align 10h
.rodata:0000000000017A70 ; const char aCannotMoveSToA[]
.rodata:0000000000017A70 aCannotMoveSToA db 'cannot move %s to a subdirectory of itself, %s',0
.rodata:0000000000017A70                                         ; DATA XREF: copy_internal+19DC↑o
.rodata:0000000000017A9F                 align 20h
.rodata:0000000000017AA0 ; const char aInterDeviceMov[]
.rodata:0000000000017AA0 aInterDeviceMov db 'inter-device move failed: %s to %s; unable to remove target',0
.rodata:0000000000017AA0                                         ; DATA XREF: copy_internal+1A6A↑o
.rodata:0000000000017ADC                 align 20h
.rodata:0000000000017AE0 ; const char aCannotCreateSy[]
.rodata:0000000000017AE0 aCannotCreateSy db 'cannot create symbolic link %s to %s',0
.rodata:0000000000017AE0                                         ; DATA XREF: copy_internal+F60↑o
.rodata:0000000000017B05                 align 8
.rodata:0000000000017B08 ; const char aSkippingFileSA[]
.rodata:0000000000017B08 aSkippingFileSA db 'skipping file %s, as it was replaced while being copied',0
.rodata:0000000000017B08                                         ; DATA XREF: copy_internal+2123↑o
.rodata:0000000000017B40 ; const char aNotWritingThro[]
.rodata:0000000000017B40 aNotWritingThro db 'not writing through dangling symlink %s',0
.rodata:0000000000017B40                                         ; DATA XREF: copy_internal+401F↑o
.rodata:0000000000017B68 aSFailedToGetEx db '%s: failed to get extents info',0
.rodata:0000000000017B68                                         ; DATA XREF: copy_internal+3F4B↑o
.rodata:0000000000017B87                 align 8
.rodata:0000000000017B88 ; const char aCannotCopyCycl[]
.rodata:0000000000017B88 aCannotCopyCycl db 'cannot copy cyclic symbolic link %s',0
.rodata:0000000000017B88                                         ; DATA XREF: copy_internal+B99↑o
.rodata:0000000000017BAC                 align 10h
.rodata:0000000000017BB0 aSCanMakeRelati db '%s: can make relative symbolic links only in current directory',0
.rodata:0000000000017BB0                                         ; DATA XREF: copy_internal+2247↑o
.rodata:0000000000017BEF                 align 10h
.rodata:0000000000017BF0 ; const char aCannotCreateSy_0[]
.rodata:0000000000017BF0 aCannotCreateSy_0 db 'cannot create symbolic link %s',0
.rodata:0000000000017BF0                                         ; DATA XREF: copy_internal+2CD3↑o
.rodata:0000000000017C0F                 align 10h
.rodata:0000000000017C10 ; const char aValidBackupTyp[]
.rodata:0000000000017C10 aValidBackupTyp db 'VALID_BACKUP_TYPE (co->backup_type)',0
.rodata:0000000000017C10                                         ; DATA XREF: copy+135↑o
.rodata:0000000000017C34                 align 8
.rodata:0000000000017C38 ; const char aValidSparseMod[]
.rodata:0000000000017C38 aValidSparseMod db 'VALID_SPARSE_MODE (co->sparse_mode)',0
.rodata:0000000000017C38                                         ; DATA XREF: copy+116↑o
.rodata:0000000000017C5C                 align 20h
.rodata:0000000000017C60 ; const char aValidReflinkMo[]
.rodata:0000000000017C60 aValidReflinkMo db 'VALID_REFLINK_MODE (co->reflink_mode)',0
.rodata:0000000000017C60                                         ; DATA XREF: copy+F7↑o
.rodata:0000000000017C86                 align 8
.rodata:0000000000017C88 ; const char assertion[]
.rodata:0000000000017C88 assertion       db '!(co->hard_link && co->symbolic_link)',0
.rodata:0000000000017C88                                         ; DATA XREF: copy+B4↑o
.rodata:0000000000017CAE                 align 10h
.rodata:0000000000017CB0 ; const char aCoReflinkModeR[]
.rodata:0000000000017CB0 aCoReflinkModeR db '! (co->reflink_mode == REFLINK_ALWAYS && co->sparse_mode != SPARS'
.rodata:0000000000017CB0                                         ; DATA XREF: copy+D3↑o
.rodata:0000000000017CB0                 db 'E_AUTO)',0
.rodata:0000000000017CF9 aSS             db '%s -> %s',0         ; DATA XREF: emit_verbose+2E↑o
.rodata:0000000000017D02 ; const char aBackupS[]
.rodata:0000000000017D02 aBackupS        db ' (backup: %s)',0    ; DATA XREF: emit_verbose+59↑o
.rodata:0000000000017D10 ; const char aRemovedS[]
.rodata:0000000000017D10 aRemovedS       db 'removed %s',0Ah,0   ; DATA XREF: create_hard_link+6D↑o
.rodata:0000000000017D10                                         ; copy_internal+2D6A↑o ...
.rodata:0000000000017D1C ; const char aSOverwriteS[]
.rodata:0000000000017D1C aSOverwriteS    db '%s: overwrite %s? ',0
.rodata:0000000000017D1C                                         ; DATA XREF: overwrite_ok_isra_12+D5↑o
.rodata:0000000000017D2F aCannotLseekS   db 'cannot lseek %s',0  ; DATA XREF: create_hole+B5↑o
.rodata:0000000000017D2F                                         ; copy_internal+40D6↑o
.rodata:0000000000017D3F ; const char aErrorDeallocat[]
.rodata:0000000000017D3F aErrorDeallocat db 'error deallocating %s',0
.rodata:0000000000017D3F                                         ; DATA XREF: create_hole+61↑o
.rodata:0000000000017D3F                                         ; copy_internal+3CA2↑o
.rodata:0000000000017D55 ; const char aErrorReadingS[]
.rodata:0000000000017D55 aErrorReadingS  db 'error reading %s',0 ; DATA XREF: sparse_copy+DE↑o
.rodata:0000000000017D66 ; const char aErrorWritingS[]
.rodata:0000000000017D66 aErrorWritingS  db 'error writing %s',0 ; DATA XREF: sparse_copy+3CF↑o
.rodata:0000000000017D77 ; const char aOverflowReadin[]
.rodata:0000000000017D77 aOverflowReadin db 'overflow reading %s',0
.rodata:0000000000017D77                                         ; DATA XREF: sparse_copy+382↑o
.rodata:0000000000017D8B ; const char aClearingPermis[]
.rodata:0000000000017D8B aClearingPermis db 'clearing permissions for %s',0
.rodata:0000000000017D8B                                         ; DATA XREF: set_owner+163↑o
.rodata:0000000000017DA7 ; const char aOmittingDirect[]
.rodata:0000000000017DA7 aOmittingDirect db 'omitting directory %s',0
.rodata:0000000000017DA7                                         ; DATA XREF: copy_internal:loc_75B0↑o
.rodata:0000000000017DBD ; const char aSAndSAreTheSam[]
.rodata:0000000000017DBD aSAndSAreTheSam db '%s and %s are the same file',0
.rodata:0000000000017DBD                                         ; DATA XREF: copy_internal+162C↑o
.rodata:0000000000017DD9 ; const char aCannotBackupS[]
.rodata:0000000000017DD9 aCannotBackupS  db 'cannot backup %s',0 ; DATA XREF: copy_internal+2742↑o
.rodata:0000000000017DEA ; const char aCannotRemoveS[]
.rodata:0000000000017DEA aCannotRemoveS  db 'cannot remove %s',0 ; DATA XREF: copy_internal+2425↑o
.rodata:0000000000017DEA                                         ; copy_internal+3F97↑o
.rodata:0000000000017DFB ; const char aRenamed[]
.rodata:0000000000017DFB aRenamed        db 'renamed ',0         ; DATA XREF: copy_internal:loc_6FB0↑o
.rodata:0000000000017E04 ; const char aCannotMoveSToS[]
.rodata:0000000000017E04 aCannotMoveSToS db 'cannot move %s to %s',0
.rodata:0000000000017E04                                         ; DATA XREF: copy_internal+1194↑o
.rodata:0000000000017E19 ; const char aCopied[]
.rodata:0000000000017E19 aCopied         db 'copied ',0          ; DATA XREF: copy_internal:loc_7F50↑o
.rodata:0000000000017E21 ; const char aSettingPermiss[]
.rodata:0000000000017E21 aSettingPermiss db 'setting permissions for %s',0
.rodata:0000000000017E21                                         ; DATA XREF: copy_internal+2D1C↑o
.rodata:0000000000017E21                                         ; set_acl+1A↑o
.rodata:0000000000017E3C ; const char aCreatedDirecto[]
.rodata:0000000000017E3C aCreatedDirecto db 'created directory %s',0Ah,0
.rodata:0000000000017E3C                                         ; DATA XREF: copy_internal+1D19↑o
.rodata:0000000000017E52 ; const char aCannotAccessS[]
.rodata:0000000000017E52 aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: copy_internal+2C29↑o
.rodata:0000000000017E63 ; const char filename[]
.rodata:0000000000017E63 filename        db '.',0                ; DATA XREF: copy_internal+ED8↑o
.rodata:0000000000017E63                                         ; make_dir_parents+299↑o ...
.rodata:0000000000017E65 aCannotOpenSFor db 'cannot open %s for reading',0
.rodata:0000000000017E65                                         ; DATA XREF: copy_internal+27E4↑o
.rodata:0000000000017E80 ; const char aCannotFstatS[]
.rodata:0000000000017E80 aCannotFstatS   db 'cannot fstat %s',0  ; DATA XREF: copy_internal+2A18↑o
.rodata:0000000000017E80                                         ; copy_internal+3A87↑o
.rodata:0000000000017E90 ; const char aCannotCreateRe[]
.rodata:0000000000017E90 aCannotCreateRe db 'cannot create regular file %s',0
.rodata:0000000000017E90                                         ; DATA XREF: copy_internal+3476↑o
.rodata:0000000000017EAE ; const char aFailedToCloneS[]
.rodata:0000000000017EAE aFailedToCloneS db 'failed to clone %s from %s',0
.rodata:0000000000017EAE                                         ; DATA XREF: copy_internal+3D9A↑o
.rodata:0000000000017EC9 ; const char aSWriteFailed[]
.rodata:0000000000017EC9 aSWriteFailed   db '%s: write failed',0 ; DATA XREF: copy_internal+3EF4↑o
.rodata:0000000000017EDA ; const char aFailedToExtend[]
.rodata:0000000000017EDA aFailedToExtend db 'failed to extend %s',0
.rodata:0000000000017EDA                                         ; DATA XREF: copy_internal+3B8B↑o
.rodata:0000000000017EEE ; const char aPreservingTime[]
.rodata:0000000000017EEE aPreservingTime db 'preserving times for %s',0
.rodata:0000000000017EEE                                         ; DATA XREF: copy_internal+69B↑o
.rodata:0000000000017EEE                                         ; copy_internal+3A30↑o
.rodata:0000000000017F06 ; const char aPreservingPerm[]
.rodata:0000000000017F06 aPreservingPerm db 'preserving permissions for %s',0
.rodata:0000000000017F06                                         ; DATA XREF: copy_internal+7BB↑o
.rodata:0000000000017F06                                         ; copy_internal+36D0↑o ...
.rodata:0000000000017F24 ; const char aFailedToCloseS[]
.rodata:0000000000017F24 aFailedToCloseS db 'failed to close %s',0
.rodata:0000000000017F24                                         ; DATA XREF: copy_internal+2BD8↑o
.rodata:0000000000017F24                                         ; copy_internal+32C8↑o
.rodata:0000000000017F37 aCannotCreateFi db 'cannot create fifo %s',0
.rodata:0000000000017F37                                         ; DATA XREF: copy_internal+29FB↑o
.rodata:0000000000017F4D aCannotCreateSp db 'cannot create special file %s',0
.rodata:0000000000017F4D                                         ; DATA XREF: copy_internal+2614↑o
.rodata:0000000000017F6B aCannotReadSymb db 'cannot read symbolic link %s',0
.rodata:0000000000017F6B                                         ; DATA XREF: copy_internal+34DC↑o
.rodata:0000000000017F88 aSHasUnknownFil db '%s has unknown file type',0
.rodata:0000000000017F88                                         ; DATA XREF: copy_internal+18FB↑o
.rodata:0000000000017FA1 aCannotUnBackup db 'cannot un-backup %s',0
.rodata:0000000000017FA1                                         ; DATA XREF: copy_internal+1879↑o
.rodata:0000000000017FB5 ; const char aSSUnbackup[]
.rodata:0000000000017FB5 aSSUnbackup     db '%s -> %s (unbackup)',0Ah,0
.rodata:0000000000017FB5                                         ; DATA XREF: copy_internal+1005↑o
.rodata:0000000000017FCA ; const char file[]
.rodata:0000000000017FCA file            db '../coreutils-8.31/src/copy.c',0
.rodata:0000000000017FCA                                         ; DATA XREF: copy+AD↑o
.rodata:0000000000017FCA                                         ; copy+CC↑o ...
.rodata:0000000000017FE7 ; const char aCoNull[]
.rodata:0000000000017FE7 aCoNull         db 'co != NULL',0       ; DATA XREF: copy+154↑o
.rodata:0000000000017FF2                 align 8
.rodata:0000000000017FF8 ; const char _PRETTY_FUNCTION___7875[]
.rodata:0000000000017FF8 __PRETTY_FUNCTION___7875 db 'valid_options',0
.rodata:0000000000017FF8                                         ; DATA XREF: copy+A6↑o
.rodata:0000000000017FF8                                         ; copy:loc_9DF5↑o ...
.rodata:0000000000018006                 align 8
.rodata:0000000000018008 ; const char aCoreutils831Sr_0[]
.rodata:0000000000018008 aCoreutils831Sr_0 db '../coreutils-8.31/src/extent-scan.c',0
.rodata:0000000000018008                                         ; DATA XREF: extent_scan_read+1F1↑o
.rodata:0000000000018008                                         ; extent_scan_read+2E1↑o
.rodata:000000000001802C                 align 10h
.rodata:0000000000018030 ; const char aScanEiCountSiz[]
.rodata:0000000000018030 aScanEiCountSiz db 'scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents',0
.rodata:0000000000018030                                         ; DATA XREF: extent_scan_read+2E8↑o
.rodata:0000000000018067                 align 8
.rodata:0000000000018068 ; const char aFmExtentsIFeLo[]
.rodata:0000000000018068 aFmExtentsIFeLo db 'fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length',0
.rodata:0000000000018068                                         ; DATA XREF: extent_scan_read+1F8↑o
.rodata:00000000000180A8                 align 10h
.rodata:00000000000180B0 ; const char _PRETTY_FUNCTION___6956[]
.rodata:00000000000180B0 __PRETTY_FUNCTION___6956 db 'extent_scan_read',0
.rodata:00000000000180B0                                         ; DATA XREF: extent_scan_read:loc_A2AA↑o
.rodata:00000000000180B0                                         ; extent_scan_read:loc_A39A↑o
.rodata:00000000000180C1 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000180C6 asc_180C6       db '~',0                ; DATA XREF: set_simple_backup_suffix:loc_A91E↑o
.rodata:00000000000180C8 ; const char name[]
.rodata:00000000000180C8 name            db 'SIMPLE_BACKUP_SUFFIX',0
.rodata:00000000000180C8                                         ; DATA XREF: set_simple_backup_suffix:loc_A940↑o
.rodata:00000000000180DD unk_180DD       db  24h ; $             ; DATA XREF: xget_version+24↑o
.rodata:00000000000180DE ; const char aVersionControl[]
.rodata:00000000000180DE aVersionControl db 'VERSION_CONTROL',0  ; DATA XREF: xget_version:loc_B01A↑o
.rodata:00000000000180EE aNone           db 'none',0             ; DATA XREF: .data.rel.ro:backup_args↓o
.rodata:00000000000180F3 aOff            db 'off',0              ; DATA XREF: .data.rel.ro:000000000021C908↓o
.rodata:00000000000180F7 aSimple         db 'simple',0           ; DATA XREF: .data.rel.ro:000000000021C910↓o
.rodata:00000000000180FE aNever          db 'never',0            ; DATA XREF: .data.rel.ro:000000000021C918↓o
.rodata:0000000000018104 aExisting       db 'existing',0         ; DATA XREF: .data.rel.ro:000000000021C920↓o
.rodata:000000000001810D aNil            db 'nil',0              ; DATA XREF: .data.rel.ro:000000000021C928↓o
.rodata:0000000000018111 aNumbered       db 'numbered',0         ; DATA XREF: .data.rel.ro:000000000021C930↓o
.rodata:000000000001811A                 align 20h
.rodata:0000000000018120 backup_types    db    0                 ; DATA XREF: get_version_part_0+12↑o
.rodata:0000000000018120                                         ; get_version_part_0+24↑o
.rodata:0000000000018121                 db    0
.rodata:0000000000018122                 db    0
.rodata:0000000000018123                 db    0
.rodata:0000000000018124                 db    0
.rodata:0000000000018125                 db    0
.rodata:0000000000018126                 db    0
.rodata:0000000000018127                 db    0
.rodata:0000000000018128                 db    1
.rodata:0000000000018129                 db    0
.rodata:000000000001812A                 db    0
.rodata:000000000001812B                 db    0
.rodata:000000000001812C                 db    1
.rodata:000000000001812D                 db    0
.rodata:000000000001812E                 db    0
.rodata:000000000001812F                 db    0
.rodata:0000000000018130                 db    2
.rodata:0000000000018131                 db    0
.rodata:0000000000018132                 db    0
.rodata:0000000000018133                 db    0
.rodata:0000000000018134                 db    2
.rodata:0000000000018135                 db    0
.rodata:0000000000018136                 db    0
.rodata:0000000000018137                 db    0
.rodata:0000000000018138                 db    3
.rodata:0000000000018139                 db    0
.rodata:000000000001813A                 db    0
.rodata:000000000001813B                 db    0
.rodata:000000000001813C                 db    3
.rodata:000000000001813D                 db    0
.rodata:000000000001813E                 db    0
.rodata:000000000001813F                 db    0
.rodata:0000000000018140 ; const char aErrorClosingFi[]
.rodata:0000000000018140 aErrorClosingFi db 'error closing file',0
.rodata:0000000000018140                                         ; DATA XREF: close_stdin:loc_B138↑o
.rodata:0000000000018153 ; const char format[]
.rodata:0000000000018153 format          db '%s: %s',0           ; DATA XREF: close_stdin+8D↑o
.rodata:0000000000018153                                         ; close_stdout+6C↑o
.rodata:000000000001815A ; const char aWriteError[]
.rodata:000000000001815A aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_B253↑o
.rodata:0000000000018166 aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:0000000000018166                                         ; DATA XREF: hash_print_statistics:loc_BEC5↑o
.rodata:000000000001817E aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:000000000001817E                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:0000000000018196 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:0000000000018196                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:00000000000181AE                 align 10h
.rodata:00000000000181B0 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:00000000000181B0                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:00000000000181D1                 align 20h
.rodata:00000000000181E0 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:00000000000181E0                                         ; hash_initialize:loc_C330↑o
.rodata:00000000000181E1                 db    0
.rodata:00000000000181E2                 db    0
.rodata:00000000000181E3                 db    0
.rodata:00000000000181E4                 db    0
.rodata:00000000000181E5                 db    0
.rodata:00000000000181E6                 db  80h
.rodata:00000000000181E7                 db  3Fh ; ?
.rodata:00000000000181E8                 db 0CDh
.rodata:00000000000181E9                 db 0CCh
.rodata:00000000000181EA                 db  4Ch ; L
.rodata:00000000000181EB                 db  3Fh ; ?
.rodata:00000000000181EC                 db 0F4h
.rodata:00000000000181ED                 db 0FDh
.rodata:00000000000181EE                 db 0B4h
.rodata:00000000000181EF                 db  3Fh ; ?
.rodata:00000000000181F0                 db    0
.rodata:00000000000181F1                 db    0
.rodata:00000000000181F2                 db    0
.rodata:00000000000181F3                 db    0
.rodata:00000000000181F4 dword_181F4     dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:00000000000181F4                                         ; check_tuning+4A↑r
.rodata:00000000000181F8 dword_181F8     dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:00000000000181FC dword_181FC     dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:0000000000018200 dword_18200     dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:0000000000018204 dword_18204     dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:0000000000018208 dword_18208     dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:000000000001820C dword_1820C     dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:000000000001820C                                         ; hash_rehash+40↑r ...
.rodata:0000000000018210 dword_18210     dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:0000000000018210                                         ; hash_initialize+150↑r ...
.rodata:0000000000018214                 align 8
.rodata:0000000000018218 qword_18218     dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:0000000000018218                                         ; hash_print_statistics+11F↑r
.rodata:0000000000018220 aCannotChangeOw_0 db 'cannot change owner and permissions of %s',0
.rodata:0000000000018220                                         ; DATA XREF: make_dir_parents+317↑o
.rodata:000000000001824A                 align 4
.rodata:000000000001824C jpt_D4D4        dd offset loc_D4E0 - 1824Ch
.rodata:000000000001824C                                         ; DATA XREF: mode_compile+74↑o
.rodata:000000000001824C                                         ; mode_compile+22C↑r
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch ; jump table for switch statement
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset loc_D550 - 1824Ch
.rodata:000000000001824C                 dd offset loc_D540 - 1824Ch
.rodata:000000000001824C                 dd offset loc_D530 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset def_D4D4 - 1824Ch
.rodata:000000000001824C                 dd offset loc_D520 - 1824Ch
.rodata:000000000001824C                 dd offset loc_D518 - 1824Ch
.rodata:00000000000182D0 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:00000000000182D0                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000018308 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000018310 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000018314 unk_18314       db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000018315                 db  80h
.rodata:0000000000018316                 db  98h
.rodata:0000000000018317                 db    0
.rodata:0000000000018318 unk_18318       db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000018319                 db  80h
.rodata:000000000001831A                 db  99h
.rodata:000000000001831B                 db    0
.rodata:000000000001831C unk_1831C       db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000001831D                 db    7
.rodata:000000000001831E                 db  65h ; e
.rodata:000000000001831F                 db    0
.rodata:0000000000018320 unk_18320       db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000018321                 db 0AFh
.rodata:0000000000018322                 db    0
.rodata:0000000000018323 unk_18323       db  22h ; "             ; DATA XREF: gettext_quote:loc_DA70↑o
.rodata:0000000000018323                                         ; quotearg_buffer_restyled:loc_E82B↑o ...
.rodata:0000000000018324                 db    0
.rodata:0000000000018325 ; const char asc_18325[2]
.rodata:0000000000018325 asc_18325       db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000018325                                         ; quotearg_buffer_restyled:loc_DBF3↑o ...
.rodata:0000000000018327 ; const char asc_18327[2]
.rodata:0000000000018327 asc_18327       db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000018327                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000018329 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000018331 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000021C968↓o
.rodata:0000000000018337 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000021C970↓o
.rodata:0000000000018344 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000021C978↓o
.rodata:0000000000018344                                         ; .data.rel.ro:000000000021C998↓o
.rodata:0000000000018351 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000018351                                         ; DATA XREF: .data.rel.ro:000000000021C980↓o
.rodata:0000000000018365 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000021C990↓o
.rodata:000000000001836D aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000021C9A8↓o
.rodata:0000000000018375                 align 20h
.rodata:0000000000018380 jpt_DBD1        dd offset loc_E97A - 18380h
.rodata:0000000000018380                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000018380                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000018380                 dd offset loc_DBD3 - 18380h ; jump table for switch statement
.rodata:0000000000018380                 dd offset loc_EBA8 - 18380h
.rodata:0000000000018380                 dd offset loc_E9B4 - 18380h
.rodata:0000000000018380                 dd offset loc_E7A4 - 18380h
.rodata:0000000000018380                 dd offset loc_E800 - 18380h
.rodata:0000000000018380                 dd offset loc_E855 - 18380h
.rodata:0000000000018380                 dd offset loc_E89A - 18380h
.rodata:0000000000018380                 dd offset loc_E8D4 - 18380h
.rodata:0000000000018380                 dd offset loc_E8D4 - 18380h
.rodata:0000000000018380                 dd offset loc_E8D4 - 18380h
.rodata:00000000000183AC jpt_DD2E        dd offset loc_DF50 - 183ACh, offset def_DD2E - 183ACh
.rodata:00000000000183AC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000183AC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000183AC                 dd offset def_DD2E - 183ACh, offset def_DD2E - 183ACh ; jump table for switch statement
.rodata:00000000000183AC                 dd offset def_DD2E - 183ACh, offset def_DD2E - 183ACh
.rodata:00000000000183AC                 dd offset def_DD2E - 183ACh, offset loc_DF90 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DE98 - 183ACh, offset loc_DE58 - 183ACh
.rodata:00000000000183AC                 dd offset loc_E020 - 183ACh, offset loc_E010 - 183ACh
.rodata:00000000000183AC                 dd offset loc_E000 - 183ACh, offset loc_DFF0 - 183ACh
.rodata:00000000000183AC                 dd offset def_DD2E - 183ACh, offset def_DD2E - 183ACh
.rodata:00000000000183AC                 dd offset def_DD2E - 183ACh, offset def_DD2E - 183ACh
.rodata:00000000000183AC                 dd offset def_DD2E - 183ACh, offset def_DD2E - 183ACh
.rodata:00000000000183AC                 dd offset def_DD2E - 183ACh, offset def_DD2E - 183ACh
.rodata:00000000000183AC                 dd offset def_DD2E - 183ACh, offset def_DD2E - 183ACh
.rodata:00000000000183AC                 dd offset def_DD2E - 183ACh, offset def_DD2E - 183ACh
.rodata:00000000000183AC                 dd offset def_DD2E - 183ACh, offset def_DD2E - 183ACh
.rodata:00000000000183AC                 dd offset def_DD2E - 183ACh, offset def_DD2E - 183ACh
.rodata:00000000000183AC                 dd offset def_DD2E - 183ACh, offset def_DD2E - 183ACh
.rodata:00000000000183AC                 dd offset loc_DFE0 - 183ACh, offset loc_DFD0 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DFD0 - 183ACh, offset loc_DFA0 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DFD0 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DFD0 - 183ACh, offset loc_DE33 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DFD0 - 183ACh, offset loc_DFD0 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DFD0 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DFD0 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DFD0 - 183ACh, offset loc_DFD0 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DFD0 - 183ACh, offset loc_DE03 - 183ACh
.rodata:00000000000183AC                 dd offset def_DD2E - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DFD0 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DEA8 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DFD0 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DFD0 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DF78 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DF78 - 183ACh, offset loc_DD33 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DFD0 - 183ACh, offset loc_DD33 - 183ACh
.rodata:00000000000183AC                 dd offset loc_DFA0 - 183ACh
.rodata:00000000000185A8 jpt_E0BA        dd offset loc_E120 - 185A8h, offset def_E0BA - 185A8h
.rodata:00000000000185A8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000185A8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000185A8                 dd offset def_E0BA - 185A8h, offset def_E0BA - 185A8h ; jump table for switch statement
.rodata:00000000000185A8                 dd offset def_E0BA - 185A8h, offset def_E0BA - 185A8h
.rodata:00000000000185A8                 dd offset def_E0BA - 185A8h, offset loc_E110 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E260 - 185A8h, offset loc_E248 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E0F8 - 185A8h, offset loc_E238 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E0E0 - 185A8h, offset loc_E220 - 185A8h
.rodata:00000000000185A8                 dd offset def_E0BA - 185A8h, offset def_E0BA - 185A8h
.rodata:00000000000185A8                 dd offset def_E0BA - 185A8h, offset def_E0BA - 185A8h
.rodata:00000000000185A8                 dd offset def_E0BA - 185A8h, offset def_E0BA - 185A8h
.rodata:00000000000185A8                 dd offset def_E0BA - 185A8h, offset def_E0BA - 185A8h
.rodata:00000000000185A8                 dd offset def_E0BA - 185A8h, offset def_E0BA - 185A8h
.rodata:00000000000185A8                 dd offset def_E0BA - 185A8h, offset def_E0BA - 185A8h
.rodata:00000000000185A8                 dd offset def_E0BA - 185A8h, offset def_E0BA - 185A8h
.rodata:00000000000185A8                 dd offset def_E0BA - 185A8h, offset def_E0BA - 185A8h
.rodata:00000000000185A8                 dd offset def_E0BA - 185A8h, offset def_E0BA - 185A8h
.rodata:00000000000185A8                 dd offset loc_E208 - 185A8h, offset loc_E1F0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1F0 - 185A8h, offset loc_E1D8 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1F0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1F0 - 185A8h, offset loc_DE30 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1F0 - 185A8h, offset loc_E1F0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1F0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1F0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1F0 - 185A8h, offset loc_E1F0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1F0 - 185A8h, offset loc_DE00 - 185A8h
.rodata:00000000000185A8                 dd offset def_E0BA - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1F0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E0C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1F0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1F0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_E1C0 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1C0 - 185A8h, offset loc_DD30 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1F0 - 185A8h, offset loc_DD30 - 185A8h
.rodata:00000000000185A8                 dd offset loc_E1D8 - 185A8h
.rodata:00000000000187A4                 align 20h
.rodata:00000000000187C0                 public quoting_style_vals
.rodata:00000000000187C0 quoting_style_vals db    0
.rodata:00000000000187C1                 db    0
.rodata:00000000000187C2                 db    0
.rodata:00000000000187C3                 db    0
.rodata:00000000000187C4                 db    1
.rodata:00000000000187C5                 db    0
.rodata:00000000000187C6                 db    0
.rodata:00000000000187C7                 db    0
.rodata:00000000000187C8                 db    2
.rodata:00000000000187C9                 db    0
.rodata:00000000000187CA                 db    0
.rodata:00000000000187CB                 db    0
.rodata:00000000000187CC                 db    3
.rodata:00000000000187CD                 db    0
.rodata:00000000000187CE                 db    0
.rodata:00000000000187CF                 db    0
.rodata:00000000000187D0                 db    4
.rodata:00000000000187D1                 db    0
.rodata:00000000000187D2                 db    0
.rodata:00000000000187D3                 db    0
.rodata:00000000000187D4                 db    5
.rodata:00000000000187D5                 db    0
.rodata:00000000000187D6                 db    0
.rodata:00000000000187D7                 db    0
.rodata:00000000000187D8                 db    6
.rodata:00000000000187D9                 db    0
.rodata:00000000000187DA                 db    0
.rodata:00000000000187DB                 db    0
.rodata:00000000000187DC                 db    7
.rodata:00000000000187DD                 db    0
.rodata:00000000000187DE                 db    0
.rodata:00000000000187DF                 db    0
.rodata:00000000000187E0                 db    8
.rodata:00000000000187E1                 db    0
.rodata:00000000000187E2                 db    0
.rodata:00000000000187E3                 db    0
.rodata:00000000000187E4                 db    9
.rodata:00000000000187E5                 db    0
.rodata:00000000000187E6                 db    0
.rodata:00000000000187E7                 db    0
.rodata:00000000000187E8 ; const char aWdValChild0[]
.rodata:00000000000187E8 aWdValChild0    db 'wd->val.child == 0',0
.rodata:00000000000187E8                                         ; DATA XREF: savewd_chdir+1CB↑o
.rodata:00000000000187FB ; const char aErrnoLocation4[]
.rodata:00000000000187FB aErrnoLocation4 db '(*__errno_location ()) == 4',0
.rodata:00000000000187FB                                         ; DATA XREF: savewd_restore+117↑o
.rodata:0000000000018817 ; const char aWdValChild0_0[]
.rodata:0000000000018817 aWdValChild0_0  db 'wd->val.child < 0',0
.rodata:0000000000018817                                         ; DATA XREF: savewd_finish+45↑o
.rodata:0000000000018829                 align 10h
.rodata:0000000000018830 ; const char aCoreutils831Li[]
.rodata:0000000000018830 aCoreutils831Li db '../coreutils-8.31/lib/savewd.c',0
.rodata:0000000000018830                                         ; DATA XREF: savewd_chdir+1C4↑o
.rodata:0000000000018830                                         ; savewd_chdir+272↑o ...
.rodata:000000000001884F                 align 10h
.rodata:0000000000018850 jpt_10153       dd offset def_10153 - 18850h
.rodata:0000000000018850                                         ; DATA XREF: savewd_chdir+105↑o
.rodata:0000000000018850                                         ; savewd_chdir+10C↑r
.rodata:0000000000018850                 dd offset loc_101E0 - 18850h ; jump table for switch statement
.rodata:0000000000018850                 dd offset loc_1008F - 18850h
.rodata:0000000000018850                 dd offset loc_101F0 - 18850h
.rodata:0000000000018850                 dd offset loc_1008F - 18850h
.rodata:0000000000018850                 dd offset loc_1008F - 18850h
.rodata:0000000000018868 jpt_10324       dd offset loc_10343 - 18868h
.rodata:0000000000018868                                         ; DATA XREF: savewd_restore+23↑o
.rodata:0000000000018868                                         ; savewd_restore+2D↑r
.rodata:0000000000018868                 dd offset loc_10343 - 18868h ; jump table for switch statement
.rodata:0000000000018868                 dd offset loc_103C0 - 18868h
.rodata:0000000000018868                 dd offset loc_10330 - 18868h
.rodata:0000000000018868                 dd offset loc_10368 - 18868h
.rodata:000000000001887C jpt_10469       dd offset loc_10478 - 1887Ch
.rodata:000000000001887C                                         ; DATA XREF: savewd_finish+8↑o
.rodata:000000000001887C                                         ; savewd_finish+12↑r
.rodata:000000000001887C                 dd offset loc_10470 - 1887Ch ; jump table for switch statement
.rodata:000000000001887C                 dd offset loc_10470 - 1887Ch
.rodata:000000000001887C                 dd offset loc_10480 - 1887Ch
.rodata:000000000001887C                 dd offset loc_10478 - 1887Ch
.rodata:0000000000018890 ; const char _PRETTY_FUNCTION___4491[]
.rodata:0000000000018890 __PRETTY_FUNCTION___4491 db 'savewd_finish',0
.rodata:0000000000018890                                         ; DATA XREF: savewd_finish+37↑o
.rodata:0000000000018890                                         ; savewd_finish:def_10469↑o
.rodata:000000000001889E                 align 20h
.rodata:00000000000188A0 ; const char _PRETTY_FUNCTION___4477[]
.rodata:00000000000188A0 __PRETTY_FUNCTION___4477 db 'savewd_restore',0
.rodata:00000000000188A0                                         ; DATA XREF: savewd_restore:loc_103F9↑o
.rodata:00000000000188A0                                         ; savewd_restore:def_10324↑o
.rodata:00000000000188AF                 align 10h
.rodata:00000000000188B0 ; const char _PRETTY_FUNCTION___4446[]
.rodata:00000000000188B0 __PRETTY_FUNCTION___4446 db 'savewd_save',0
.rodata:00000000000188B0                                         ; DATA XREF: savewd_chdir:loc_102CA↑o
.rodata:00000000000188BC                 align 20h
.rodata:00000000000188C0 ; const char _PRETTY_FUNCTION___4461[]
.rodata:00000000000188C0 __PRETTY_FUNCTION___4461 db 'savewd_chdir',0
.rodata:00000000000188C0                                         ; DATA XREF: savewd_chdir+1BD↑o
.rodata:00000000000188C0                                         ; savewd_chdir:def_10153↑o
.rodata:00000000000188CD                 align 10h
.rodata:00000000000188D0 ; const char aCoreutils831Li_0[]
.rodata:00000000000188D0 aCoreutils831Li_0 db '../coreutils-8.31/lib/tempname.c',0
.rodata:00000000000188D0                                         ; DATA XREF: gen_tempname_len+1D↑o
.rodata:00000000000188F1                 align 8
.rodata:00000000000188F8 ; const char s[]
.rodata:00000000000188F8 s               db '! "invalid KIND in __gen_tempname"',0
.rodata:00000000000188F8                                         ; DATA XREF: gen_tempname_len+24↑o
.rodata:000000000001891B                 align 20h
.rodata:0000000000018920 ; const char _PRETTY_FUNCTION___5642[]
.rodata:0000000000018920 __PRETTY_FUNCTION___5642 db 'gen_tempname_len',0
.rodata:0000000000018920                                         ; DATA XREF: gen_tempname_len+16↑o
.rodata:0000000000018931                 align 20h
.rodata:0000000000018940 letters         db 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.rodata:0000000000018940                                         ; DATA XREF: try_tempname_len+90↑o
.rodata:000000000001897F aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000001898B aSS_1           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000018992 ; const char aC_0[]
.rodata:0000000000018992 aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_119EC↑o
.rodata:0000000000018996 ; const char aWrittenByS[]
.rodata:0000000000018996 aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000018996                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000189A6 ; const char aWrittenBySAndS[]
.rodata:00000000000189A6 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000189A6                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000189BD ; const char aWrittenBySSAnd[]
.rodata:00000000000189BD aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000189BD                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000189D9 ; const char aReportBugsToS[]
.rodata:00000000000189D9 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000189D9                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000189EE aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000189EE                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000018A04 ; const char aSHomePageS[]
.rodata:0000000000018A04 aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000018A04                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000018A18 ; const char aLicenseGplv3Gn[]
.rodata:0000000000018A18 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000018A18                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000018A18                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000018A18                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000018A18                 db '.',0Ah
.rodata:0000000000018A18                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000018A18                 db 0Ah,0
.rodata:0000000000018AE4                 align 8
.rodata:0000000000018AE8 ; const char aWrittenBySSSAn[]
.rodata:0000000000018AE8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000018AE8                                         ; DATA XREF: version_etc_arn:loc_11C40↑o
.rodata:0000000000018AE8                 db 'and %s.',0Ah,0
.rodata:0000000000018B08 ; const char aWrittenBySSSSA[]
.rodata:0000000000018B08 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000018B08                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000018B08                 db '%s, and %s.',0Ah,0
.rodata:0000000000018B2C                 align 10h
.rodata:0000000000018B30 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000018B30 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000018B30                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000018B30                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000018B58 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000018B58 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000018B58                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000018B58                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000018B84                 align 8
.rodata:0000000000018B88 ; const char aWrittenBySSSSS[]
.rodata:0000000000018B88 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000018B88                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000018B88                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000018B88                 db 'and %s.',0Ah,0
.rodata:0000000000018BB8 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000018BB8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000018BB8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000018BB8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000018BB8                 db '%s, and %s.',0Ah,0
.rodata:0000000000018BEC                 align 10h
.rodata:0000000000018BF0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000018BF0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000018BF0                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000018BF0                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000018C2C                 align 10h
.rodata:0000000000018C30 ; const char aGeneralHelpUsi[]
.rodata:0000000000018C30 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000018C30                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000018C30                 db 0
.rodata:0000000000018C71                 align 4
.rodata:0000000000018C74 jpt_11A54       dd offset loc_11AD6 - 18C74h
.rodata:0000000000018C74                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000018C74                                         ; version_etc_arn+9D↑r
.rodata:0000000000018C74                 dd offset loc_11B68 - 18C74h ; jump table for switch statement
.rodata:0000000000018C74                 dd offset loc_11BA8 - 18C74h
.rodata:0000000000018C74                 dd offset loc_11BF0 - 18C74h
.rodata:0000000000018C74                 dd offset loc_11C40 - 18C74h
.rodata:0000000000018C74                 dd offset loc_11C98 - 18C74h
.rodata:0000000000018C74                 dd offset loc_11CC8 - 18C74h
.rodata:0000000000018C74                 dd offset loc_11D30 - 18C74h
.rodata:0000000000018C74                 dd offset loc_11A60 - 18C74h
.rodata:0000000000018C74                 dd offset loc_11B10 - 18C74h
.rodata:0000000000018C9C                 align 20h
.rodata:0000000000018CA0                 public version_etc_copyright
.rodata:0000000000018CA0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000018CA0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000018CCF ; const char aMemoryExhauste[]
.rodata:0000000000018CCF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000018CE0 ; const char aCoreutils831Li_1[]
.rodata:0000000000018CE0 aCoreutils831Li_1 db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000018CE0                                         ; DATA XREF: xstrtoul+38C↑o
.rodata:0000000000018D00 ; const char a0StrtolBaseStr[]
.rodata:0000000000018D00 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000018D00                                         ; DATA XREF: xstrtoul+393↑o
.rodata:0000000000018D26                 align 8
.rodata:0000000000018D28 jpt_12476       dd offset loc_125C6 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                                         ; DATA XREF: xstrtoul+1C4↑o
.rodata:0000000000018D28                                         ; xstrtoul+1CF↑r
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset loc_125A3 - 18D28h ; jump table for switch statement
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset loc_125DC - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset loc_1255F - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset loc_12478 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset loc_12580 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset loc_1253F - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset loc_1251A - 18D28h
.rodata:0000000000018D28                 dd offset loc_124F4 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset loc_124DD - 18D28h, offset loc_124A0 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset loc_125DC - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset loc_1255F - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset loc_12478 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset loc_1253F - 18D28h, offset def_12476 - 18D28h
.rodata:0000000000018D28                 dd offset def_12476 - 18D28h, offset loc_124C7 - 18D28h
.rodata:0000000000018E00 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000018E00 __PRETTY_FUNCTION___4162 db 'xstrtoul',0
.rodata:0000000000018E00                                         ; DATA XREF: xstrtoul:loc_12625↑o
.rodata:0000000000018E09 ; const char aInvalidArgumen[]
.rodata:0000000000018E09 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:0000000000018E09                                         ; DATA XREF: argmatch_invalid:loc_12BC0↑o
.rodata:0000000000018E24 ; const char aAmbiguousArgum[]
.rodata:0000000000018E24 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:0000000000018E24                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:0000000000018E41 ; const char aValidArguments[]
.rodata:0000000000018E41 aValidArguments db 'Valid arguments are:',0
.rodata:0000000000018E41                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:0000000000018E56 aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:0000000000018E56                 db '  - %s',0
.rodata:0000000000018E5E aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:0000000000018E5E                                         ; copy_acl+72↑o ...
.rodata:0000000000018E63 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000018E65 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_12F80↑o
.rodata:0000000000018E6B aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000018E6B                                         ; locale_charset:loc_13010↑o
.rodata:0000000000018E71 ; const char aSEndOfFile[]
.rodata:0000000000018E71 aSEndOfFile     db '%s: end of file',0  ; DATA XREF: randread_error:loc_1351D↑o
.rodata:0000000000018E81 ; const char aSReadError[]
.rodata:0000000000018E81 aSReadError     db '%s: read error',0   ; DATA XREF: randread_error+25↑o
.rodata:0000000000018E90 ; const char aDevUrandom[]
.rodata:0000000000018E90 aDevUrandom     db '/dev/urandom',0     ; DATA XREF: randread_new+CB↑o
.rodata:0000000000018E9D aRb             db 'rb',0               ; DATA XREF: randread_new+32↑o
.rodata:0000000000018EA0 jpt_147BB       dd offset def_147BB - 18EA0h
.rodata:0000000000018EA0                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:0000000000018EA0                                         ; vasnprintf+554↑r
.rodata:0000000000018EA0                 dd offset loc_14C20 - 18EA0h ; jump table for switch statement
.rodata:0000000000018EA0                 dd offset loc_14BF0 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_14B68 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_14B28 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_148F8 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_148F8 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_147C0 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_147C0 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_147C0 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_147C0 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_14AA8 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_14A20 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_148F8 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_148F8 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_147C0 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_147C0 - 18EA0h
.rodata:0000000000018EA0                 dd offset loc_147C0 - 18EA0h
.rodata:0000000000018EE8 jpt_14D60       dd offset loc_14FD0 - 18EE8h
.rodata:0000000000018EE8                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:0000000000018EE8                                         ; vasnprintf+AF9↑r
.rodata:0000000000018EE8                 dd offset loc_14FF0 - 18EE8h ; jump table for switch statement
.rodata:0000000000018EE8                 dd offset loc_14FE0 - 18EE8h
.rodata:0000000000018EE8                 dd offset loc_14EA0 - 18EE8h
.rodata:0000000000018EE8                 dd offset loc_14EA0 - 18EE8h
.rodata:0000000000018EFC aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:0000000000018F03                 align 10h
.rodata:0000000000018F10 jpt_15456       dd offset def_15456 - 18F10h
.rodata:0000000000018F10                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:0000000000018F10                                         ; printf_fetchargs+2F↑r
.rodata:0000000000018F10                 dd offset loc_154DC - 18F10h ; jump table for switch statement
.rodata:0000000000018F10                 dd offset loc_154DC - 18F10h
.rodata:0000000000018F10                 dd offset loc_154FE - 18F10h
.rodata:0000000000018F10                 dd offset loc_154FE - 18F10h
.rodata:0000000000018F10                 dd offset loc_154BA - 18F10h
.rodata:0000000000018F10                 dd offset loc_154BA - 18F10h
.rodata:0000000000018F10                 dd offset loc_15496 - 18F10h
.rodata:0000000000018F10                 dd offset loc_15496 - 18F10h
.rodata:0000000000018F10                 dd offset loc_15496 - 18F10h
.rodata:0000000000018F10                 dd offset loc_15496 - 18F10h
.rodata:0000000000018F10                 dd offset loc_15552 - 18F10h
.rodata:0000000000018F10                 dd offset loc_15460 - 18F10h
.rodata:0000000000018F10                 dd offset loc_154BA - 18F10h
.rodata:0000000000018F10                 dd offset loc_154BA - 18F10h
.rodata:0000000000018F10                 dd offset loc_15524 - 18F10h
.rodata:0000000000018F10                 dd offset loc_15580 - 18F10h
.rodata:0000000000018F10                 dd offset loc_15496 - 18F10h
.rodata:0000000000018F10                 dd offset loc_15496 - 18F10h
.rodata:0000000000018F10                 dd offset loc_15496 - 18F10h
.rodata:0000000000018F10                 dd offset loc_15496 - 18F10h
.rodata:0000000000018F10                 dd offset loc_15496 - 18F10h
.rodata:0000000000018F10                 dd offset loc_15496 - 18F10h
.rodata:0000000000018F6C                 align 10h
.rodata:0000000000018F70 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:0000000000018F71                 db    0
.rodata:0000000000018F72                 db    0
.rodata:0000000000018F73                 db    0
.rodata:0000000000018F74                 db  4Eh ; N
.rodata:0000000000018F75                 db    0
.rodata:0000000000018F76                 db    0
.rodata:0000000000018F77                 db    0
.rodata:0000000000018F78                 db  55h ; U
.rodata:0000000000018F79                 db    0
.rodata:0000000000018F7A                 db    0
.rodata:0000000000018F7B                 db    0
.rodata:0000000000018F7C                 db  4Ch ; L
.rodata:0000000000018F7D                 db    0
.rodata:0000000000018F7E                 db    0
.rodata:0000000000018F7F                 db    0
.rodata:0000000000018F80                 db  4Ch ; L
.rodata:0000000000018F81                 db    0
.rodata:0000000000018F82                 db    0
.rodata:0000000000018F83                 db    0
.rodata:0000000000018F84                 db  29h ; )
.rodata:0000000000018F85                 db    0
.rodata:0000000000018F86                 db    0
.rodata:0000000000018F87                 db    0
.rodata:0000000000018F88                 db    0
.rodata:0000000000018F89                 db    0
.rodata:0000000000018F8A                 db    0
.rodata:0000000000018F8B                 db    0
.rodata:0000000000018F8C jpt_15865       dd offset loc_158DB - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                                         ; DATA XREF: printf_parse+234↑o
.rodata:0000000000018F8C                                         ; printf_parse+23E↑r
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch ; jump table for switch statement
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset loc_15DDB - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset loc_15DFC - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset loc_15DDB - 18F8Ch, offset loc_15DDB - 18F8Ch
.rodata:0000000000018F8C                 dd offset loc_15DDB - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset loc_15867 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset loc_15E0C - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset loc_15DDB - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset loc_15D68 - 18F8Ch, offset loc_15D7B - 18F8Ch
.rodata:0000000000018F8C                 dd offset loc_15DDB - 18F8Ch, offset loc_15DDB - 18F8Ch
.rodata:0000000000018F8C                 dd offset loc_15DDB - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset loc_15D7B - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset loc_15D1C - 18F8Ch
.rodata:0000000000018F8C                 dd offset loc_15E0C - 18F8Ch, offset loc_15E60 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset loc_15DC8 - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset loc_15E0C - 18F8Ch, offset def_15865 - 18F8Ch
.rodata:0000000000018F8C                 dd offset def_15865 - 18F8Ch, offset loc_15E0C - 18F8Ch
.rodata:0000000000018F8C _rodata         ends
.rodata:0000000000018F8C
.eh_frame_hdr:00000000000190DC ; ===========================================================================
.eh_frame_hdr:00000000000190DC
.eh_frame_hdr:00000000000190DC ; Segment type: Pure data
.eh_frame_hdr:00000000000190DC ; Segment permissions: Read
.eh_frame_hdr:00000000000190DC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000190DC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000190DC                 ;org 190DCh
.eh_frame_hdr:00000000000190DC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000190DD                 db  1Bh
.eh_frame_hdr:00000000000190DE                 db    3
.eh_frame_hdr:00000000000190DF                 db  3Bh ; ;
.eh_frame_hdr:00000000000190E0                 db  10h
.eh_frame_hdr:00000000000190E1                 db    8
.eh_frame_hdr:00000000000190E2                 db    0
.eh_frame_hdr:00000000000190E3                 db    0
.eh_frame_hdr:00000000000190E4                 db    1
.eh_frame_hdr:00000000000190E5                 db    1
.eh_frame_hdr:00000000000190E6                 db    0
.eh_frame_hdr:00000000000190E7                 db    0
.eh_frame_hdr:00000000000190E8                 db    4
.eh_frame_hdr:00000000000190E9                 db  98h
.eh_frame_hdr:00000000000190EA                 db 0FEh
.eh_frame_hdr:00000000000190EB                 db 0FFh
.eh_frame_hdr:00000000000190EC                 db  5Ch ; \
.eh_frame_hdr:00000000000190ED                 db    8
.eh_frame_hdr:00000000000190EE                 db    0
.eh_frame_hdr:00000000000190EF                 db    0
.eh_frame_hdr:00000000000190F0                 db 0F4h
.eh_frame_hdr:00000000000190F1                 db  9Fh
.eh_frame_hdr:00000000000190F2                 db 0FEh
.eh_frame_hdr:00000000000190F3                 db 0FFh
.eh_frame_hdr:00000000000190F4                 db  84h
.eh_frame_hdr:00000000000190F5                 db    8
.eh_frame_hdr:00000000000190F6                 db    0
.eh_frame_hdr:00000000000190F7                 db    0
.eh_frame_hdr:00000000000190F8                 db    4
.eh_frame_hdr:00000000000190F9                 db 0A0h
.eh_frame_hdr:00000000000190FA                 db 0FEh
.eh_frame_hdr:00000000000190FB                 db 0FFh
.eh_frame_hdr:00000000000190FC                 db 0FCh
.eh_frame_hdr:00000000000190FD                 db  0Ah
.eh_frame_hdr:00000000000190FE                 db    0
.eh_frame_hdr:00000000000190FF                 db    0
.eh_frame_hdr:0000000000019100                 db  1Ah
.eh_frame_hdr:0000000000019101                 db 0A0h
.eh_frame_hdr:0000000000019102                 db 0FEh
.eh_frame_hdr:0000000000019103                 db 0FFh
.eh_frame_hdr:0000000000019104                 db  10h
.eh_frame_hdr:0000000000019105                 db  0Bh
.eh_frame_hdr:0000000000019106                 db    0
.eh_frame_hdr:0000000000019107                 db    0
.eh_frame_hdr:0000000000019108                 db  54h ; T
.eh_frame_hdr:0000000000019109                 db 0A0h
.eh_frame_hdr:000000000001910A                 db 0FEh
.eh_frame_hdr:000000000001910B                 db 0FFh
.eh_frame_hdr:000000000001910C                 db 0F8h
.eh_frame_hdr:000000000001910D                 db    9
.eh_frame_hdr:000000000001910E                 db    0
.eh_frame_hdr:000000000001910F                 db    0
.eh_frame_hdr:0000000000019110                 db  54h ; T
.eh_frame_hdr:0000000000019111                 db 0ADh
.eh_frame_hdr:0000000000019112                 db 0FEh
.eh_frame_hdr:0000000000019113                 db 0FFh
.eh_frame_hdr:0000000000019114                 db  2Ch ; ,
.eh_frame_hdr:0000000000019115                 db    8
.eh_frame_hdr:0000000000019116                 db    0
.eh_frame_hdr:0000000000019117                 db    0
.eh_frame_hdr:0000000000019118                 db  64h ; d
.eh_frame_hdr:0000000000019119                 db 0AEh
.eh_frame_hdr:000000000001911A                 db 0FEh
.eh_frame_hdr:000000000001911B                 db 0FFh
.eh_frame_hdr:000000000001911C                 db  9Ch
.eh_frame_hdr:000000000001911D                 db    8
.eh_frame_hdr:000000000001911E                 db    0
.eh_frame_hdr:000000000001911F                 db    0
.eh_frame_hdr:0000000000019120                 db  44h ; D
.eh_frame_hdr:0000000000019121                 db 0B0h
.eh_frame_hdr:0000000000019122                 db 0FEh
.eh_frame_hdr:0000000000019123                 db 0FFh
.eh_frame_hdr:0000000000019124                 db 0D8h
.eh_frame_hdr:0000000000019125                 db    8
.eh_frame_hdr:0000000000019126                 db    0
.eh_frame_hdr:0000000000019127                 db    0
.eh_frame_hdr:0000000000019128                 db 0B4h
.eh_frame_hdr:0000000000019129                 db 0B0h
.eh_frame_hdr:000000000001912A                 db 0FEh
.eh_frame_hdr:000000000001912B                 db 0FFh
.eh_frame_hdr:000000000001912C                 db  10h
.eh_frame_hdr:000000000001912D                 db    9
.eh_frame_hdr:000000000001912E                 db    0
.eh_frame_hdr:000000000001912F                 db    0
.eh_frame_hdr:0000000000019130                 db 0F4h
.eh_frame_hdr:0000000000019131                 db 0B0h
.eh_frame_hdr:0000000000019132                 db 0FEh
.eh_frame_hdr:0000000000019133                 db 0FFh
.eh_frame_hdr:0000000000019134                 db  2Ch ; ,
.eh_frame_hdr:0000000000019135                 db    9
.eh_frame_hdr:0000000000019136                 db    0
.eh_frame_hdr:0000000000019137                 db    0
.eh_frame_hdr:0000000000019138                 db  14h
.eh_frame_hdr:0000000000019139                 db 0B1h
.eh_frame_hdr:000000000001913A                 db 0FEh
.eh_frame_hdr:000000000001913B                 db 0FFh
.eh_frame_hdr:000000000001913C                 db  40h ; @
.eh_frame_hdr:000000000001913D                 db    9
.eh_frame_hdr:000000000001913E                 db    0
.eh_frame_hdr:000000000001913F                 db    0
.eh_frame_hdr:0000000000019140                 db  84h
.eh_frame_hdr:0000000000019141                 db 0B1h
.eh_frame_hdr:0000000000019142                 db 0FEh
.eh_frame_hdr:0000000000019143                 db 0FFh
.eh_frame_hdr:0000000000019144                 db  80h
.eh_frame_hdr:0000000000019145                 db    9
.eh_frame_hdr:0000000000019146                 db    0
.eh_frame_hdr:0000000000019147                 db    0
.eh_frame_hdr:0000000000019148                 db  44h ; D
.eh_frame_hdr:0000000000019149                 db 0B8h
.eh_frame_hdr:000000000001914A                 db 0FEh
.eh_frame_hdr:000000000001914B                 db 0FFh
.eh_frame_hdr:000000000001914C                 db 0CCh
.eh_frame_hdr:000000000001914D                 db    9
.eh_frame_hdr:000000000001914E                 db    0
.eh_frame_hdr:000000000001914F                 db    0
.eh_frame_hdr:0000000000019150                 db  94h
.eh_frame_hdr:0000000000019151                 db 0BCh
.eh_frame_hdr:0000000000019152                 db 0FEh
.eh_frame_hdr:0000000000019153                 db 0FFh
.eh_frame_hdr:0000000000019154                 db  4Ch ; L
.eh_frame_hdr:0000000000019155                 db  0Ah
.eh_frame_hdr:0000000000019156                 db    0
.eh_frame_hdr:0000000000019157                 db    0
.eh_frame_hdr:0000000000019158                 db 0B4h
.eh_frame_hdr:0000000000019159                 db 0BDh
.eh_frame_hdr:000000000001915A                 db 0FEh
.eh_frame_hdr:000000000001915B                 db 0FFh
.eh_frame_hdr:000000000001915C                 db  7Ch ; |
.eh_frame_hdr:000000000001915D                 db  0Ah
.eh_frame_hdr:000000000001915E                 db    0
.eh_frame_hdr:000000000001915F                 db    0
.eh_frame_hdr:0000000000019160                 db    4
.eh_frame_hdr:0000000000019161                 db 0BEh
.eh_frame_hdr:0000000000019162                 db 0FEh
.eh_frame_hdr:0000000000019163                 db 0FFh
.eh_frame_hdr:0000000000019164                 db 0A0h
.eh_frame_hdr:0000000000019165                 db  0Ah
.eh_frame_hdr:0000000000019166                 db    0
.eh_frame_hdr:0000000000019167                 db    0
.eh_frame_hdr:0000000000019168                 db 0B4h
.eh_frame_hdr:0000000000019169                 db 0BEh
.eh_frame_hdr:000000000001916A                 db 0FEh
.eh_frame_hdr:000000000001916B                 db 0FFh
.eh_frame_hdr:000000000001916C                 db 0DCh
.eh_frame_hdr:000000000001916D                 db  0Ah
.eh_frame_hdr:000000000001916E                 db    0
.eh_frame_hdr:000000000001916F                 db    0
.eh_frame_hdr:0000000000019170                 db 0F4h
.eh_frame_hdr:0000000000019171                 db 0BEh
.eh_frame_hdr:0000000000019172                 db 0FEh
.eh_frame_hdr:0000000000019173                 db 0FFh
.eh_frame_hdr:0000000000019174                 db  28h ; (
.eh_frame_hdr:0000000000019175                 db  0Bh
.eh_frame_hdr:0000000000019176                 db    0
.eh_frame_hdr:0000000000019177                 db    0
.eh_frame_hdr:0000000000019178                 db 0B4h
.eh_frame_hdr:0000000000019179                 db 0BFh
.eh_frame_hdr:000000000001917A                 db 0FEh
.eh_frame_hdr:000000000001917B                 db 0FFh
.eh_frame_hdr:000000000001917C                 db  60h ; `
.eh_frame_hdr:000000000001917D                 db  0Bh
.eh_frame_hdr:000000000001917E                 db    0
.eh_frame_hdr:000000000001917F                 db    0
.eh_frame_hdr:0000000000019180                 db 0C4h
.eh_frame_hdr:0000000000019181                 db 0C0h
.eh_frame_hdr:0000000000019182                 db 0FEh
.eh_frame_hdr:0000000000019183                 db 0FFh
.eh_frame_hdr:0000000000019184                 db 0C8h
.eh_frame_hdr:0000000000019185                 db  0Bh
.eh_frame_hdr:0000000000019186                 db    0
.eh_frame_hdr:0000000000019187                 db    0
.eh_frame_hdr:0000000000019188                 db  14h
.eh_frame_hdr:0000000000019189                 db 0C2h
.eh_frame_hdr:000000000001918A                 db 0FEh
.eh_frame_hdr:000000000001918B                 db 0FFh
.eh_frame_hdr:000000000001918C                 db  18h
.eh_frame_hdr:000000000001918D                 db  0Ch
.eh_frame_hdr:000000000001918E                 db    0
.eh_frame_hdr:000000000001918F                 db    0
.eh_frame_hdr:0000000000019190                 db 0D4h
.eh_frame_hdr:0000000000019191                 db 0C2h
.eh_frame_hdr:0000000000019192                 db 0FEh
.eh_frame_hdr:0000000000019193                 db 0FFh
.eh_frame_hdr:0000000000019194                 db  68h ; h
.eh_frame_hdr:0000000000019195                 db  0Ch
.eh_frame_hdr:0000000000019196                 db    0
.eh_frame_hdr:0000000000019197                 db    0
.eh_frame_hdr:0000000000019198                 db 0E4h
.eh_frame_hdr:0000000000019199                 db 0C6h
.eh_frame_hdr:000000000001919A                 db 0FEh
.eh_frame_hdr:000000000001919B                 db 0FFh
.eh_frame_hdr:000000000001919C                 db 0D0h
.eh_frame_hdr:000000000001919D                 db  0Ch
.eh_frame_hdr:000000000001919E                 db    0
.eh_frame_hdr:000000000001919F                 db    0
.eh_frame_hdr:00000000000191A0                 db 0B4h
.eh_frame_hdr:00000000000191A1                 db 0C7h
.eh_frame_hdr:00000000000191A2                 db 0FEh
.eh_frame_hdr:00000000000191A3                 db 0FFh
.eh_frame_hdr:00000000000191A4                 db  2Ch ; ,
.eh_frame_hdr:00000000000191A5                 db  0Dh
.eh_frame_hdr:00000000000191A6                 db    0
.eh_frame_hdr:00000000000191A7                 db    0
.eh_frame_hdr:00000000000191A8                 db  34h ; 4
.eh_frame_hdr:00000000000191A9                 db 0C8h
.eh_frame_hdr:00000000000191AA                 db 0FEh
.eh_frame_hdr:00000000000191AB                 db 0FFh
.eh_frame_hdr:00000000000191AC                 db  64h ; d
.eh_frame_hdr:00000000000191AD                 db  0Dh
.eh_frame_hdr:00000000000191AE                 db    0
.eh_frame_hdr:00000000000191AF                 db    0
.eh_frame_hdr:00000000000191B0                 db  64h ; d
.eh_frame_hdr:00000000000191B1                 db 0C8h
.eh_frame_hdr:00000000000191B2                 db 0FEh
.eh_frame_hdr:00000000000191B3                 db 0FFh
.eh_frame_hdr:00000000000191B4                 db  80h
.eh_frame_hdr:00000000000191B5                 db  0Dh
.eh_frame_hdr:00000000000191B6                 db    0
.eh_frame_hdr:00000000000191B7                 db    0
.eh_frame_hdr:00000000000191B8                 db  94h
.eh_frame_hdr:00000000000191B9                 db 0C8h
.eh_frame_hdr:00000000000191BA                 db 0FEh
.eh_frame_hdr:00000000000191BB                 db 0FFh
.eh_frame_hdr:00000000000191BC                 db  9Ch
.eh_frame_hdr:00000000000191BD                 db  0Dh
.eh_frame_hdr:00000000000191BE                 db    0
.eh_frame_hdr:00000000000191BF                 db    0
.eh_frame_hdr:00000000000191C0                 db 0D4h
.eh_frame_hdr:00000000000191C1                 db 0C8h
.eh_frame_hdr:00000000000191C2                 db 0FEh
.eh_frame_hdr:00000000000191C3                 db 0FFh
.eh_frame_hdr:00000000000191C4                 db 0B8h
.eh_frame_hdr:00000000000191C5                 db  0Dh
.eh_frame_hdr:00000000000191C6                 db    0
.eh_frame_hdr:00000000000191C7                 db    0
.eh_frame_hdr:00000000000191C8                 db    4
.eh_frame_hdr:00000000000191C9                 db 0C9h
.eh_frame_hdr:00000000000191CA                 db 0FEh
.eh_frame_hdr:00000000000191CB                 db 0FFh
.eh_frame_hdr:00000000000191CC                 db 0D4h
.eh_frame_hdr:00000000000191CD                 db  0Dh
.eh_frame_hdr:00000000000191CE                 db    0
.eh_frame_hdr:00000000000191CF                 db    0
.eh_frame_hdr:00000000000191D0                 db  14h
.eh_frame_hdr:00000000000191D1                 db 0CBh
.eh_frame_hdr:00000000000191D2                 db 0FEh
.eh_frame_hdr:00000000000191D3                 db 0FFh
.eh_frame_hdr:00000000000191D4                 db  54h ; T
.eh_frame_hdr:00000000000191D5                 db  0Eh
.eh_frame_hdr:00000000000191D6                 db    0
.eh_frame_hdr:00000000000191D7                 db    0
.eh_frame_hdr:00000000000191D8                 db  44h ; D
.eh_frame_hdr:00000000000191D9                 db 0CBh
.eh_frame_hdr:00000000000191DA                 db 0FEh
.eh_frame_hdr:00000000000191DB                 db 0FFh
.eh_frame_hdr:00000000000191DC                 db  74h ; t
.eh_frame_hdr:00000000000191DD                 db  0Eh
.eh_frame_hdr:00000000000191DE                 db    0
.eh_frame_hdr:00000000000191DF                 db    0
.eh_frame_hdr:00000000000191E0                 db  54h ; T
.eh_frame_hdr:00000000000191E1                 db  0Ch
.eh_frame_hdr:00000000000191E2                 db 0FFh
.eh_frame_hdr:00000000000191E3                 db 0FFh
.eh_frame_hdr:00000000000191E4                 db 0A4h
.eh_frame_hdr:00000000000191E5                 db  0Eh
.eh_frame_hdr:00000000000191E6                 db    0
.eh_frame_hdr:00000000000191E7                 db    0
.eh_frame_hdr:00000000000191E8                 db 0C4h
.eh_frame_hdr:00000000000191E9                 db  0Dh
.eh_frame_hdr:00000000000191EA                 db 0FFh
.eh_frame_hdr:00000000000191EB                 db 0FFh
.eh_frame_hdr:00000000000191EC                 db 0D4h
.eh_frame_hdr:00000000000191ED                 db  0Eh
.eh_frame_hdr:00000000000191EE                 db    0
.eh_frame_hdr:00000000000191EF                 db    0
.eh_frame_hdr:00000000000191F0                 db 0D4h
.eh_frame_hdr:00000000000191F1                 db  0Dh
.eh_frame_hdr:00000000000191F2                 db 0FFh
.eh_frame_hdr:00000000000191F3                 db 0FFh
.eh_frame_hdr:00000000000191F4                 db 0E8h
.eh_frame_hdr:00000000000191F5                 db  0Eh
.eh_frame_hdr:00000000000191F6                 db    0
.eh_frame_hdr:00000000000191F7                 db    0
.eh_frame_hdr:00000000000191F8                 db 0F4h
.eh_frame_hdr:00000000000191F9                 db  0Dh
.eh_frame_hdr:00000000000191FA                 db 0FFh
.eh_frame_hdr:00000000000191FB                 db 0FFh
.eh_frame_hdr:00000000000191FC                 db 0FCh
.eh_frame_hdr:00000000000191FD                 db  0Eh
.eh_frame_hdr:00000000000191FE                 db    0
.eh_frame_hdr:00000000000191FF                 db    0
.eh_frame_hdr:0000000000019200                 db  14h
.eh_frame_hdr:0000000000019201                 db  0Eh
.eh_frame_hdr:0000000000019202                 db 0FFh
.eh_frame_hdr:0000000000019203                 db 0FFh
.eh_frame_hdr:0000000000019204                 db  18h
.eh_frame_hdr:0000000000019205                 db  0Fh
.eh_frame_hdr:0000000000019206                 db    0
.eh_frame_hdr:0000000000019207                 db    0
.eh_frame_hdr:0000000000019208                 db  84h
.eh_frame_hdr:0000000000019209                 db  0Eh
.eh_frame_hdr:000000000001920A                 db 0FFh
.eh_frame_hdr:000000000001920B                 db 0FFh
.eh_frame_hdr:000000000001920C                 db  3Ch ; <
.eh_frame_hdr:000000000001920D                 db  0Fh
.eh_frame_hdr:000000000001920E                 db    0
.eh_frame_hdr:000000000001920F                 db    0
.eh_frame_hdr:0000000000019210                 db 0E4h
.eh_frame_hdr:0000000000019211                 db  0Eh
.eh_frame_hdr:0000000000019212                 db 0FFh
.eh_frame_hdr:0000000000019213                 db 0FFh
.eh_frame_hdr:0000000000019214                 db  58h ; X
.eh_frame_hdr:0000000000019215                 db  0Fh
.eh_frame_hdr:0000000000019216                 db    0
.eh_frame_hdr:0000000000019217                 db    0
.eh_frame_hdr:0000000000019218                 db  64h ; d
.eh_frame_hdr:0000000000019219                 db  0Fh
.eh_frame_hdr:000000000001921A                 db 0FFh
.eh_frame_hdr:000000000001921B                 db 0FFh
.eh_frame_hdr:000000000001921C                 db  94h
.eh_frame_hdr:000000000001921D                 db  0Fh
.eh_frame_hdr:000000000001921E                 db    0
.eh_frame_hdr:000000000001921F                 db    0
.eh_frame_hdr:0000000000019220                 db 0A4h
.eh_frame_hdr:0000000000019221                 db  0Fh
.eh_frame_hdr:0000000000019222                 db 0FFh
.eh_frame_hdr:0000000000019223                 db 0FFh
.eh_frame_hdr:0000000000019224                 db 0B0h
.eh_frame_hdr:0000000000019225                 db  0Fh
.eh_frame_hdr:0000000000019226                 db    0
.eh_frame_hdr:0000000000019227                 db    0
.eh_frame_hdr:0000000000019228                 db 0B4h
.eh_frame_hdr:0000000000019229                 db  0Fh
.eh_frame_hdr:000000000001922A                 db 0FFh
.eh_frame_hdr:000000000001922B                 db 0FFh
.eh_frame_hdr:000000000001922C                 db 0C4h
.eh_frame_hdr:000000000001922D                 db  0Fh
.eh_frame_hdr:000000000001922E                 db    0
.eh_frame_hdr:000000000001922F                 db    0
.eh_frame_hdr:0000000000019230                 db 0E4h
.eh_frame_hdr:0000000000019231                 db  0Fh
.eh_frame_hdr:0000000000019232                 db 0FFh
.eh_frame_hdr:0000000000019233                 db 0FFh
.eh_frame_hdr:0000000000019234                 db 0D8h
.eh_frame_hdr:0000000000019235                 db  0Fh
.eh_frame_hdr:0000000000019236                 db    0
.eh_frame_hdr:0000000000019237                 db    0
.eh_frame_hdr:0000000000019238                 db 0F4h
.eh_frame_hdr:0000000000019239                 db  12h
.eh_frame_hdr:000000000001923A                 db 0FFh
.eh_frame_hdr:000000000001923B                 db 0FFh
.eh_frame_hdr:000000000001923C                 db  2Ch ; ,
.eh_frame_hdr:000000000001923D                 db  10h
.eh_frame_hdr:000000000001923E                 db    0
.eh_frame_hdr:000000000001923F                 db    0
.eh_frame_hdr:0000000000019240                 db  14h
.eh_frame_hdr:0000000000019241                 db  13h
.eh_frame_hdr:0000000000019242                 db 0FFh
.eh_frame_hdr:0000000000019243                 db 0FFh
.eh_frame_hdr:0000000000019244                 db  40h ; @
.eh_frame_hdr:0000000000019245                 db  10h
.eh_frame_hdr:0000000000019246                 db    0
.eh_frame_hdr:0000000000019247                 db    0
.eh_frame_hdr:0000000000019248                 db  74h ; t
.eh_frame_hdr:0000000000019249                 db  13h
.eh_frame_hdr:000000000001924A                 db 0FFh
.eh_frame_hdr:000000000001924B                 db 0FFh
.eh_frame_hdr:000000000001924C                 db  6Ch ; l
.eh_frame_hdr:000000000001924D                 db  10h
.eh_frame_hdr:000000000001924E                 db    0
.eh_frame_hdr:000000000001924F                 db    0
.eh_frame_hdr:0000000000019250                 db  94h
.eh_frame_hdr:0000000000019251                 db  13h
.eh_frame_hdr:0000000000019252                 db 0FFh
.eh_frame_hdr:0000000000019253                 db 0FFh
.eh_frame_hdr:0000000000019254                 db  80h
.eh_frame_hdr:0000000000019255                 db  10h
.eh_frame_hdr:0000000000019256                 db    0
.eh_frame_hdr:0000000000019257                 db    0
.eh_frame_hdr:0000000000019258                 db    4
.eh_frame_hdr:0000000000019259                 db  15h
.eh_frame_hdr:000000000001925A                 db 0FFh
.eh_frame_hdr:000000000001925B                 db 0FFh
.eh_frame_hdr:000000000001925C                 db 0CCh
.eh_frame_hdr:000000000001925D                 db  10h
.eh_frame_hdr:000000000001925E                 db    0
.eh_frame_hdr:000000000001925F                 db    0
.eh_frame_hdr:0000000000019260                 db  64h ; d
.eh_frame_hdr:0000000000019261                 db  16h
.eh_frame_hdr:0000000000019262                 db 0FFh
.eh_frame_hdr:0000000000019263                 db 0FFh
.eh_frame_hdr:0000000000019264                 db  14h
.eh_frame_hdr:0000000000019265                 db  11h
.eh_frame_hdr:0000000000019266                 db    0
.eh_frame_hdr:0000000000019267                 db    0
.eh_frame_hdr:0000000000019268                 db 0F4h
.eh_frame_hdr:0000000000019269                 db  16h
.eh_frame_hdr:000000000001926A                 db 0FFh
.eh_frame_hdr:000000000001926B                 db 0FFh
.eh_frame_hdr:000000000001926C                 db  4Ch ; L
.eh_frame_hdr:000000000001926D                 db  11h
.eh_frame_hdr:000000000001926E                 db    0
.eh_frame_hdr:000000000001926F                 db    0
.eh_frame_hdr:0000000000019270                 db  44h ; D
.eh_frame_hdr:0000000000019271                 db  17h
.eh_frame_hdr:0000000000019272                 db 0FFh
.eh_frame_hdr:0000000000019273                 db 0FFh
.eh_frame_hdr:0000000000019274                 db  7Ch ; |
.eh_frame_hdr:0000000000019275                 db  11h
.eh_frame_hdr:0000000000019276                 db    0
.eh_frame_hdr:0000000000019277                 db    0
.eh_frame_hdr:0000000000019278                 db  34h ; 4
.eh_frame_hdr:0000000000019279                 db  18h
.eh_frame_hdr:000000000001927A                 db 0FFh
.eh_frame_hdr:000000000001927B                 db 0FFh
.eh_frame_hdr:000000000001927C                 db 0CCh
.eh_frame_hdr:000000000001927D                 db  11h
.eh_frame_hdr:000000000001927E                 db    0
.eh_frame_hdr:000000000001927F                 db    0
.eh_frame_hdr:0000000000019280                 db  84h
.eh_frame_hdr:0000000000019281                 db  18h
.eh_frame_hdr:0000000000019282                 db 0FFh
.eh_frame_hdr:0000000000019283                 db 0FFh
.eh_frame_hdr:0000000000019284                 db 0E8h
.eh_frame_hdr:0000000000019285                 db  11h
.eh_frame_hdr:0000000000019286                 db    0
.eh_frame_hdr:0000000000019287                 db    0
.eh_frame_hdr:0000000000019288                 db 0A4h
.eh_frame_hdr:0000000000019289                 db  1Eh
.eh_frame_hdr:000000000001928A                 db 0FFh
.eh_frame_hdr:000000000001928B                 db 0FFh
.eh_frame_hdr:000000000001928C                 db  3Ch ; <
.eh_frame_hdr:000000000001928D                 db  12h
.eh_frame_hdr:000000000001928E                 db    0
.eh_frame_hdr:000000000001928F                 db    0
.eh_frame_hdr:0000000000019290                 db 0B4h
.eh_frame_hdr:0000000000019291                 db  1Eh
.eh_frame_hdr:0000000000019292                 db 0FFh
.eh_frame_hdr:0000000000019293                 db 0FFh
.eh_frame_hdr:0000000000019294                 db  54h ; T
.eh_frame_hdr:0000000000019295                 db  12h
.eh_frame_hdr:0000000000019296                 db    0
.eh_frame_hdr:0000000000019297                 db    0
.eh_frame_hdr:0000000000019298                 db 0F4h
.eh_frame_hdr:0000000000019299                 db  1Eh
.eh_frame_hdr:000000000001929A                 db 0FFh
.eh_frame_hdr:000000000001929B                 db 0FFh
.eh_frame_hdr:000000000001929C                 db  6Ch ; l
.eh_frame_hdr:000000000001929D                 db  12h
.eh_frame_hdr:000000000001929E                 db    0
.eh_frame_hdr:000000000001929F                 db    0
.eh_frame_hdr:00000000000192A0                 db  14h
.eh_frame_hdr:00000000000192A1                 db  1Fh
.eh_frame_hdr:00000000000192A2                 db 0FFh
.eh_frame_hdr:00000000000192A3                 db 0FFh
.eh_frame_hdr:00000000000192A4                 db  88h
.eh_frame_hdr:00000000000192A5                 db  12h
.eh_frame_hdr:00000000000192A6                 db    0
.eh_frame_hdr:00000000000192A7                 db    0
.eh_frame_hdr:00000000000192A8                 db  34h ; 4
.eh_frame_hdr:00000000000192A9                 db  1Fh
.eh_frame_hdr:00000000000192AA                 db 0FFh
.eh_frame_hdr:00000000000192AB                 db 0FFh
.eh_frame_hdr:00000000000192AC                 db  9Ch
.eh_frame_hdr:00000000000192AD                 db  12h
.eh_frame_hdr:00000000000192AE                 db    0
.eh_frame_hdr:00000000000192AF                 db    0
.eh_frame_hdr:00000000000192B0                 db  84h
.eh_frame_hdr:00000000000192B1                 db  1Fh
.eh_frame_hdr:00000000000192B2                 db 0FFh
.eh_frame_hdr:00000000000192B3                 db 0FFh
.eh_frame_hdr:00000000000192B4                 db 0BCh
.eh_frame_hdr:00000000000192B5                 db  12h
.eh_frame_hdr:00000000000192B6                 db    0
.eh_frame_hdr:00000000000192B7                 db    0
.eh_frame_hdr:00000000000192B8                 db 0F4h
.eh_frame_hdr:00000000000192B9                 db  1Fh
.eh_frame_hdr:00000000000192BA                 db 0FFh
.eh_frame_hdr:00000000000192BB                 db 0FFh
.eh_frame_hdr:00000000000192BC                 db 0D4h
.eh_frame_hdr:00000000000192BD                 db  12h
.eh_frame_hdr:00000000000192BE                 db    0
.eh_frame_hdr:00000000000192BF                 db    0
.eh_frame_hdr:00000000000192C0                 db    4
.eh_frame_hdr:00000000000192C1                 db  20h
.eh_frame_hdr:00000000000192C2                 db 0FFh
.eh_frame_hdr:00000000000192C3                 db 0FFh
.eh_frame_hdr:00000000000192C4                 db 0E8h
.eh_frame_hdr:00000000000192C5                 db  12h
.eh_frame_hdr:00000000000192C6                 db    0
.eh_frame_hdr:00000000000192C7                 db    0
.eh_frame_hdr:00000000000192C8                 db  14h
.eh_frame_hdr:00000000000192C9                 db  21h ; !
.eh_frame_hdr:00000000000192CA                 db 0FFh
.eh_frame_hdr:00000000000192CB                 db 0FFh
.eh_frame_hdr:00000000000192CC                 db  24h ; $
.eh_frame_hdr:00000000000192CD                 db  13h
.eh_frame_hdr:00000000000192CE                 db    0
.eh_frame_hdr:00000000000192CF                 db    0
.eh_frame_hdr:00000000000192D0                 db  24h ; $
.eh_frame_hdr:00000000000192D1                 db  21h ; !
.eh_frame_hdr:00000000000192D2                 db 0FFh
.eh_frame_hdr:00000000000192D3                 db 0FFh
.eh_frame_hdr:00000000000192D4                 db  38h ; 8
.eh_frame_hdr:00000000000192D5                 db  13h
.eh_frame_hdr:00000000000192D6                 db    0
.eh_frame_hdr:00000000000192D7                 db    0
.eh_frame_hdr:00000000000192D8                 db  34h ; 4
.eh_frame_hdr:00000000000192D9                 db  21h ; !
.eh_frame_hdr:00000000000192DA                 db 0FFh
.eh_frame_hdr:00000000000192DB                 db 0FFh
.eh_frame_hdr:00000000000192DC                 db  4Ch ; L
.eh_frame_hdr:00000000000192DD                 db  13h
.eh_frame_hdr:00000000000192DE                 db    0
.eh_frame_hdr:00000000000192DF                 db    0
.eh_frame_hdr:00000000000192E0                 db 0E4h
.eh_frame_hdr:00000000000192E1                 db  21h ; !
.eh_frame_hdr:00000000000192E2                 db 0FFh
.eh_frame_hdr:00000000000192E3                 db 0FFh
.eh_frame_hdr:00000000000192E4                 db  7Ch ; |
.eh_frame_hdr:00000000000192E5                 db  13h
.eh_frame_hdr:00000000000192E6                 db    0
.eh_frame_hdr:00000000000192E7                 db    0
.eh_frame_hdr:00000000000192E8                 db    4
.eh_frame_hdr:00000000000192E9                 db  22h ; "
.eh_frame_hdr:00000000000192EA                 db 0FFh
.eh_frame_hdr:00000000000192EB                 db 0FFh
.eh_frame_hdr:00000000000192EC                 db  9Ch
.eh_frame_hdr:00000000000192ED                 db  13h
.eh_frame_hdr:00000000000192EE                 db    0
.eh_frame_hdr:00000000000192EF                 db    0
.eh_frame_hdr:00000000000192F0                 db  64h ; d
.eh_frame_hdr:00000000000192F1                 db  22h ; "
.eh_frame_hdr:00000000000192F2                 db 0FFh
.eh_frame_hdr:00000000000192F3                 db 0FFh
.eh_frame_hdr:00000000000192F4                 db 0D0h
.eh_frame_hdr:00000000000192F5                 db  13h
.eh_frame_hdr:00000000000192F6                 db    0
.eh_frame_hdr:00000000000192F7                 db    0
.eh_frame_hdr:00000000000192F8                 db 0C4h
.eh_frame_hdr:00000000000192F9                 db  22h ; "
.eh_frame_hdr:00000000000192FA                 db 0FFh
.eh_frame_hdr:00000000000192FB                 db 0FFh
.eh_frame_hdr:00000000000192FC                 db 0FCh
.eh_frame_hdr:00000000000192FD                 db  13h
.eh_frame_hdr:00000000000192FE                 db    0
.eh_frame_hdr:00000000000192FF                 db    0
.eh_frame_hdr:0000000000019300                 db  24h ; $
.eh_frame_hdr:0000000000019301                 db  23h ; #
.eh_frame_hdr:0000000000019302                 db 0FFh
.eh_frame_hdr:0000000000019303                 db 0FFh
.eh_frame_hdr:0000000000019304                 db  10h
.eh_frame_hdr:0000000000019305                 db  14h
.eh_frame_hdr:0000000000019306                 db    0
.eh_frame_hdr:0000000000019307                 db    0
.eh_frame_hdr:0000000000019308                 db  74h ; t
.eh_frame_hdr:0000000000019309                 db  23h ; #
.eh_frame_hdr:000000000001930A                 db 0FFh
.eh_frame_hdr:000000000001930B                 db 0FFh
.eh_frame_hdr:000000000001930C                 db  3Ch ; <
.eh_frame_hdr:000000000001930D                 db  14h
.eh_frame_hdr:000000000001930E                 db    0
.eh_frame_hdr:000000000001930F                 db    0
.eh_frame_hdr:0000000000019310                 db  84h
.eh_frame_hdr:0000000000019311                 db  23h ; #
.eh_frame_hdr:0000000000019312                 db 0FFh
.eh_frame_hdr:0000000000019313                 db 0FFh
.eh_frame_hdr:0000000000019314                 db  50h ; P
.eh_frame_hdr:0000000000019315                 db  14h
.eh_frame_hdr:0000000000019316                 db    0
.eh_frame_hdr:0000000000019317                 db    0
.eh_frame_hdr:0000000000019318                 db 0B4h
.eh_frame_hdr:0000000000019319                 db  23h ; #
.eh_frame_hdr:000000000001931A                 db 0FFh
.eh_frame_hdr:000000000001931B                 db 0FFh
.eh_frame_hdr:000000000001931C                 db  6Ch ; l
.eh_frame_hdr:000000000001931D                 db  14h
.eh_frame_hdr:000000000001931E                 db    0
.eh_frame_hdr:000000000001931F                 db    0
.eh_frame_hdr:0000000000019320                 db  24h ; $
.eh_frame_hdr:0000000000019321                 db  24h ; $
.eh_frame_hdr:0000000000019322                 db 0FFh
.eh_frame_hdr:0000000000019323                 db 0FFh
.eh_frame_hdr:0000000000019324                 db  8Ch
.eh_frame_hdr:0000000000019325                 db  14h
.eh_frame_hdr:0000000000019326                 db    0
.eh_frame_hdr:0000000000019327                 db    0
.eh_frame_hdr:0000000000019328                 db 0B4h
.eh_frame_hdr:0000000000019329                 db  24h ; $
.eh_frame_hdr:000000000001932A                 db 0FFh
.eh_frame_hdr:000000000001932B                 db 0FFh
.eh_frame_hdr:000000000001932C                 db 0ECh
.eh_frame_hdr:000000000001932D                 db  14h
.eh_frame_hdr:000000000001932E                 db    0
.eh_frame_hdr:000000000001932F                 db    0
.eh_frame_hdr:0000000000019330                 db  14h
.eh_frame_hdr:0000000000019331                 db  25h ; %
.eh_frame_hdr:0000000000019332                 db 0FFh
.eh_frame_hdr:0000000000019333                 db 0FFh
.eh_frame_hdr:0000000000019334                 db  0Ch
.eh_frame_hdr:0000000000019335                 db  15h
.eh_frame_hdr:0000000000019336                 db    0
.eh_frame_hdr:0000000000019337                 db    0
.eh_frame_hdr:0000000000019338                 db 0A4h
.eh_frame_hdr:0000000000019339                 db  26h ; &
.eh_frame_hdr:000000000001933A                 db 0FFh
.eh_frame_hdr:000000000001933B                 db 0FFh
.eh_frame_hdr:000000000001933C                 db  20h
.eh_frame_hdr:000000000001933D                 db  15h
.eh_frame_hdr:000000000001933E                 db    0
.eh_frame_hdr:000000000001933F                 db    0
.eh_frame_hdr:0000000000019340                 db 0B4h
.eh_frame_hdr:0000000000019341                 db  26h ; &
.eh_frame_hdr:0000000000019342                 db 0FFh
.eh_frame_hdr:0000000000019343                 db 0FFh
.eh_frame_hdr:0000000000019344                 db  34h ; 4
.eh_frame_hdr:0000000000019345                 db  15h
.eh_frame_hdr:0000000000019346                 db    0
.eh_frame_hdr:0000000000019347                 db    0
.eh_frame_hdr:0000000000019348                 db 0D4h
.eh_frame_hdr:0000000000019349                 db  26h ; &
.eh_frame_hdr:000000000001934A                 db 0FFh
.eh_frame_hdr:000000000001934B                 db 0FFh
.eh_frame_hdr:000000000001934C                 db  54h ; T
.eh_frame_hdr:000000000001934D                 db  15h
.eh_frame_hdr:000000000001934E                 db    0
.eh_frame_hdr:000000000001934F                 db    0
.eh_frame_hdr:0000000000019350                 db 0D4h
.eh_frame_hdr:0000000000019351                 db  27h ; '
.eh_frame_hdr:0000000000019352                 db 0FFh
.eh_frame_hdr:0000000000019353                 db 0FFh
.eh_frame_hdr:0000000000019354                 db 0A4h
.eh_frame_hdr:0000000000019355                 db  15h
.eh_frame_hdr:0000000000019356                 db    0
.eh_frame_hdr:0000000000019357                 db    0
.eh_frame_hdr:0000000000019358                 db  54h ; T
.eh_frame_hdr:0000000000019359                 db  28h ; (
.eh_frame_hdr:000000000001935A                 db 0FFh
.eh_frame_hdr:000000000001935B                 db 0FFh
.eh_frame_hdr:000000000001935C                 db 0F4h
.eh_frame_hdr:000000000001935D                 db  15h
.eh_frame_hdr:000000000001935E                 db    0
.eh_frame_hdr:000000000001935F                 db    0
.eh_frame_hdr:0000000000019360                 db 0D4h
.eh_frame_hdr:0000000000019361                 db  28h ; (
.eh_frame_hdr:0000000000019362                 db 0FFh
.eh_frame_hdr:0000000000019363                 db 0FFh
.eh_frame_hdr:0000000000019364                 db  44h ; D
.eh_frame_hdr:0000000000019365                 db  16h
.eh_frame_hdr:0000000000019366                 db    0
.eh_frame_hdr:0000000000019367                 db    0
.eh_frame_hdr:0000000000019368                 db  74h ; t
.eh_frame_hdr:0000000000019369                 db  29h ; )
.eh_frame_hdr:000000000001936A                 db 0FFh
.eh_frame_hdr:000000000001936B                 db 0FFh
.eh_frame_hdr:000000000001936C                 db  58h ; X
.eh_frame_hdr:000000000001936D                 db  16h
.eh_frame_hdr:000000000001936E                 db    0
.eh_frame_hdr:000000000001936F                 db    0
.eh_frame_hdr:0000000000019370                 db  84h
.eh_frame_hdr:0000000000019371                 db  29h ; )
.eh_frame_hdr:0000000000019372                 db 0FFh
.eh_frame_hdr:0000000000019373                 db 0FFh
.eh_frame_hdr:0000000000019374                 db  6Ch ; l
.eh_frame_hdr:0000000000019375                 db  16h
.eh_frame_hdr:0000000000019376                 db    0
.eh_frame_hdr:0000000000019377                 db    0
.eh_frame_hdr:0000000000019378                 db  94h
.eh_frame_hdr:0000000000019379                 db  29h ; )
.eh_frame_hdr:000000000001937A                 db 0FFh
.eh_frame_hdr:000000000001937B                 db 0FFh
.eh_frame_hdr:000000000001937C                 db  80h
.eh_frame_hdr:000000000001937D                 db  16h
.eh_frame_hdr:000000000001937E                 db    0
.eh_frame_hdr:000000000001937F                 db    0
.eh_frame_hdr:0000000000019380                 db 0C4h
.eh_frame_hdr:0000000000019381                 db  29h ; )
.eh_frame_hdr:0000000000019382                 db 0FFh
.eh_frame_hdr:0000000000019383                 db 0FFh
.eh_frame_hdr:0000000000019384                 db  9Ch
.eh_frame_hdr:0000000000019385                 db  16h
.eh_frame_hdr:0000000000019386                 db    0
.eh_frame_hdr:0000000000019387                 db    0
.eh_frame_hdr:0000000000019388                 db 0E4h
.eh_frame_hdr:0000000000019389                 db  2Ah ; *
.eh_frame_hdr:000000000001938A                 db 0FFh
.eh_frame_hdr:000000000001938B                 db 0FFh
.eh_frame_hdr:000000000001938C                 db 0FCh
.eh_frame_hdr:000000000001938D                 db  16h
.eh_frame_hdr:000000000001938E                 db    0
.eh_frame_hdr:000000000001938F                 db    0
.eh_frame_hdr:0000000000019390                 db  64h ; d
.eh_frame_hdr:0000000000019391                 db  2Bh ; +
.eh_frame_hdr:0000000000019392                 db 0FFh
.eh_frame_hdr:0000000000019393                 db 0FFh
.eh_frame_hdr:0000000000019394                 db  10h
.eh_frame_hdr:0000000000019395                 db  17h
.eh_frame_hdr:0000000000019396                 db    0
.eh_frame_hdr:0000000000019397                 db    0
.eh_frame_hdr:0000000000019398                 db 0A4h
.eh_frame_hdr:0000000000019399                 db  2Ch ; ,
.eh_frame_hdr:000000000001939A                 db 0FFh
.eh_frame_hdr:000000000001939B                 db 0FFh
.eh_frame_hdr:000000000001939C                 db  70h ; p
.eh_frame_hdr:000000000001939D                 db  17h
.eh_frame_hdr:000000000001939E                 db    0
.eh_frame_hdr:000000000001939F                 db    0
.eh_frame_hdr:00000000000193A0                 db 0B4h
.eh_frame_hdr:00000000000193A1                 db  2Ch ; ,
.eh_frame_hdr:00000000000193A2                 db 0FFh
.eh_frame_hdr:00000000000193A3                 db 0FFh
.eh_frame_hdr:00000000000193A4                 db  84h
.eh_frame_hdr:00000000000193A5                 db  17h
.eh_frame_hdr:00000000000193A6                 db    0
.eh_frame_hdr:00000000000193A7                 db    0
.eh_frame_hdr:00000000000193A8                 db 0C4h
.eh_frame_hdr:00000000000193A9                 db  2Ch ; ,
.eh_frame_hdr:00000000000193AA                 db 0FFh
.eh_frame_hdr:00000000000193AB                 db 0FFh
.eh_frame_hdr:00000000000193AC                 db  98h
.eh_frame_hdr:00000000000193AD                 db  17h
.eh_frame_hdr:00000000000193AE                 db    0
.eh_frame_hdr:00000000000193AF                 db    0
.eh_frame_hdr:00000000000193B0                 db 0D4h
.eh_frame_hdr:00000000000193B1                 db  2Ch ; ,
.eh_frame_hdr:00000000000193B2                 db 0FFh
.eh_frame_hdr:00000000000193B3                 db 0FFh
.eh_frame_hdr:00000000000193B4                 db 0ACh
.eh_frame_hdr:00000000000193B5                 db  17h
.eh_frame_hdr:00000000000193B6                 db    0
.eh_frame_hdr:00000000000193B7                 db    0
.eh_frame_hdr:00000000000193B8                 db  24h ; $
.eh_frame_hdr:00000000000193B9                 db  2Dh ; -
.eh_frame_hdr:00000000000193BA                 db 0FFh
.eh_frame_hdr:00000000000193BB                 db 0FFh
.eh_frame_hdr:00000000000193BC                 db 0C0h
.eh_frame_hdr:00000000000193BD                 db  17h
.eh_frame_hdr:00000000000193BE                 db    0
.eh_frame_hdr:00000000000193BF                 db    0
.eh_frame_hdr:00000000000193C0                 db  84h
.eh_frame_hdr:00000000000193C1                 db  2Dh ; -
.eh_frame_hdr:00000000000193C2                 db 0FFh
.eh_frame_hdr:00000000000193C3                 db 0FFh
.eh_frame_hdr:00000000000193C4                 db 0D4h
.eh_frame_hdr:00000000000193C5                 db  17h
.eh_frame_hdr:00000000000193C6                 db    0
.eh_frame_hdr:00000000000193C7                 db    0
.eh_frame_hdr:00000000000193C8                 db 0D4h
.eh_frame_hdr:00000000000193C9                 db  2Eh ; .
.eh_frame_hdr:00000000000193CA                 db 0FFh
.eh_frame_hdr:00000000000193CB                 db 0FFh
.eh_frame_hdr:00000000000193CC                 db  10h
.eh_frame_hdr:00000000000193CD                 db  18h
.eh_frame_hdr:00000000000193CE                 db    0
.eh_frame_hdr:00000000000193CF                 db    0
.eh_frame_hdr:00000000000193D0                 db  34h ; 4
.eh_frame_hdr:00000000000193D1                 db  2Fh ; /
.eh_frame_hdr:00000000000193D2                 db 0FFh
.eh_frame_hdr:00000000000193D3                 db 0FFh
.eh_frame_hdr:00000000000193D4                 db  48h ; H
.eh_frame_hdr:00000000000193D5                 db  18h
.eh_frame_hdr:00000000000193D6                 db    0
.eh_frame_hdr:00000000000193D7                 db    0
.eh_frame_hdr:00000000000193D8                 db  84h
.eh_frame_hdr:00000000000193D9                 db  2Fh ; /
.eh_frame_hdr:00000000000193DA                 db 0FFh
.eh_frame_hdr:00000000000193DB                 db 0FFh
.eh_frame_hdr:00000000000193DC                 db  5Ch ; \
.eh_frame_hdr:00000000000193DD                 db  18h
.eh_frame_hdr:00000000000193DE                 db    0
.eh_frame_hdr:00000000000193DF                 db    0
.eh_frame_hdr:00000000000193E0                 db    4
.eh_frame_hdr:00000000000193E1                 db  30h ; 0
.eh_frame_hdr:00000000000193E2                 db 0FFh
.eh_frame_hdr:00000000000193E3                 db 0FFh
.eh_frame_hdr:00000000000193E4                 db  90h
.eh_frame_hdr:00000000000193E5                 db  18h
.eh_frame_hdr:00000000000193E6                 db    0
.eh_frame_hdr:00000000000193E7                 db    0
.eh_frame_hdr:00000000000193E8                 db  74h ; t
.eh_frame_hdr:00000000000193E9                 db  30h ; 0
.eh_frame_hdr:00000000000193EA                 db 0FFh
.eh_frame_hdr:00000000000193EB                 db 0FFh
.eh_frame_hdr:00000000000193EC                 db 0A4h
.eh_frame_hdr:00000000000193ED                 db  18h
.eh_frame_hdr:00000000000193EE                 db    0
.eh_frame_hdr:00000000000193EF                 db    0
.eh_frame_hdr:00000000000193F0                 db 0E4h
.eh_frame_hdr:00000000000193F1                 db  30h ; 0
.eh_frame_hdr:00000000000193F2                 db 0FFh
.eh_frame_hdr:00000000000193F3                 db 0FFh
.eh_frame_hdr:00000000000193F4                 db 0F0h
.eh_frame_hdr:00000000000193F5                 db  18h
.eh_frame_hdr:00000000000193F6                 db    0
.eh_frame_hdr:00000000000193F7                 db    0
.eh_frame_hdr:00000000000193F8                 db  24h ; $
.eh_frame_hdr:00000000000193F9                 db  31h ; 1
.eh_frame_hdr:00000000000193FA                 db 0FFh
.eh_frame_hdr:00000000000193FB                 db 0FFh
.eh_frame_hdr:00000000000193FC                 db    4
.eh_frame_hdr:00000000000193FD                 db  19h
.eh_frame_hdr:00000000000193FE                 db    0
.eh_frame_hdr:00000000000193FF                 db    0
.eh_frame_hdr:0000000000019400                 db  44h ; D
.eh_frame_hdr:0000000000019401                 db  31h ; 1
.eh_frame_hdr:0000000000019402                 db 0FFh
.eh_frame_hdr:0000000000019403                 db 0FFh
.eh_frame_hdr:0000000000019404                 db  18h
.eh_frame_hdr:0000000000019405                 db  19h
.eh_frame_hdr:0000000000019406                 db    0
.eh_frame_hdr:0000000000019407                 db    0
.eh_frame_hdr:0000000000019408                 db    4
.eh_frame_hdr:0000000000019409                 db  33h ; 3
.eh_frame_hdr:000000000001940A                 db 0FFh
.eh_frame_hdr:000000000001940B                 db 0FFh
.eh_frame_hdr:000000000001940C                 db  64h ; d
.eh_frame_hdr:000000000001940D                 db  19h
.eh_frame_hdr:000000000001940E                 db    0
.eh_frame_hdr:000000000001940F                 db    0
.eh_frame_hdr:0000000000019410                 db  94h
.eh_frame_hdr:0000000000019411                 db  33h ; 3
.eh_frame_hdr:0000000000019412                 db 0FFh
.eh_frame_hdr:0000000000019413                 db 0FFh
.eh_frame_hdr:0000000000019414                 db  90h
.eh_frame_hdr:0000000000019415                 db  19h
.eh_frame_hdr:0000000000019416                 db    0
.eh_frame_hdr:0000000000019417                 db    0
.eh_frame_hdr:0000000000019418                 db  74h ; t
.eh_frame_hdr:0000000000019419                 db  34h ; 4
.eh_frame_hdr:000000000001941A                 db 0FFh
.eh_frame_hdr:000000000001941B                 db 0FFh
.eh_frame_hdr:000000000001941C                 db 0BCh
.eh_frame_hdr:000000000001941D                 db  19h
.eh_frame_hdr:000000000001941E                 db    0
.eh_frame_hdr:000000000001941F                 db    0
.eh_frame_hdr:0000000000019420                 db 0B4h
.eh_frame_hdr:0000000000019421                 db  36h ; 6
.eh_frame_hdr:0000000000019422                 db 0FFh
.eh_frame_hdr:0000000000019423                 db 0FFh
.eh_frame_hdr:0000000000019424                 db 0F4h
.eh_frame_hdr:0000000000019425                 db  19h
.eh_frame_hdr:0000000000019426                 db    0
.eh_frame_hdr:0000000000019427                 db    0
.eh_frame_hdr:0000000000019428                 db  44h ; D
.eh_frame_hdr:0000000000019429                 db  39h ; 9
.eh_frame_hdr:000000000001942A                 db 0FFh
.eh_frame_hdr:000000000001942B                 db 0FFh
.eh_frame_hdr:000000000001942C                 db  30h ; 0
.eh_frame_hdr:000000000001942D                 db  1Ah
.eh_frame_hdr:000000000001942E                 db    0
.eh_frame_hdr:000000000001942F                 db    0
.eh_frame_hdr:0000000000019430                 db 0A4h
.eh_frame_hdr:0000000000019431                 db  39h ; 9
.eh_frame_hdr:0000000000019432                 db 0FFh
.eh_frame_hdr:0000000000019433                 db 0FFh
.eh_frame_hdr:0000000000019434                 db  54h ; T
.eh_frame_hdr:0000000000019435                 db  1Ah
.eh_frame_hdr:0000000000019436                 db    0
.eh_frame_hdr:0000000000019437                 db    0
.eh_frame_hdr:0000000000019438                 db 0B4h
.eh_frame_hdr:0000000000019439                 db  3Bh ; ;
.eh_frame_hdr:000000000001943A                 db 0FFh
.eh_frame_hdr:000000000001943B                 db 0FFh
.eh_frame_hdr:000000000001943C                 db  8Ch
.eh_frame_hdr:000000000001943D                 db  1Ah
.eh_frame_hdr:000000000001943E                 db    0
.eh_frame_hdr:000000000001943F                 db    0
.eh_frame_hdr:0000000000019440                 db 0E4h
.eh_frame_hdr:0000000000019441                 db  3Bh ; ;
.eh_frame_hdr:0000000000019442                 db 0FFh
.eh_frame_hdr:0000000000019443                 db 0FFh
.eh_frame_hdr:0000000000019444                 db 0B4h
.eh_frame_hdr:0000000000019445                 db  1Ah
.eh_frame_hdr:0000000000019446                 db    0
.eh_frame_hdr:0000000000019447                 db    0
.eh_frame_hdr:0000000000019448                 db 0F4h
.eh_frame_hdr:0000000000019449                 db  3Bh ; ;
.eh_frame_hdr:000000000001944A                 db 0FFh
.eh_frame_hdr:000000000001944B                 db 0FFh
.eh_frame_hdr:000000000001944C                 db 0C8h
.eh_frame_hdr:000000000001944D                 db  1Ah
.eh_frame_hdr:000000000001944E                 db    0
.eh_frame_hdr:000000000001944F                 db    0
.eh_frame_hdr:0000000000019450                 db  24h ; $
.eh_frame_hdr:0000000000019451                 db  3Ch ; <
.eh_frame_hdr:0000000000019452                 db 0FFh
.eh_frame_hdr:0000000000019453                 db 0FFh
.eh_frame_hdr:0000000000019454                 db 0E0h
.eh_frame_hdr:0000000000019455                 db  1Ah
.eh_frame_hdr:0000000000019456                 db    0
.eh_frame_hdr:0000000000019457                 db    0
.eh_frame_hdr:0000000000019458                 db  64h ; d
.eh_frame_hdr:0000000000019459                 db  3Ch ; <
.eh_frame_hdr:000000000001945A                 db 0FFh
.eh_frame_hdr:000000000001945B                 db 0FFh
.eh_frame_hdr:000000000001945C                 db 0F8h
.eh_frame_hdr:000000000001945D                 db  1Ah
.eh_frame_hdr:000000000001945E                 db    0
.eh_frame_hdr:000000000001945F                 db    0
.eh_frame_hdr:0000000000019460                 db  84h
.eh_frame_hdr:0000000000019461                 db  3Ch ; <
.eh_frame_hdr:0000000000019462                 db 0FFh
.eh_frame_hdr:0000000000019463                 db 0FFh
.eh_frame_hdr:0000000000019464                 db  14h
.eh_frame_hdr:0000000000019465                 db  1Bh
.eh_frame_hdr:0000000000019466                 db    0
.eh_frame_hdr:0000000000019467                 db    0
.eh_frame_hdr:0000000000019468                 db 0F4h
.eh_frame_hdr:0000000000019469                 db  3Dh ; =
.eh_frame_hdr:000000000001946A                 db 0FFh
.eh_frame_hdr:000000000001946B                 db 0FFh
.eh_frame_hdr:000000000001946C                 db  64h ; d
.eh_frame_hdr:000000000001946D                 db  1Bh
.eh_frame_hdr:000000000001946E                 db    0
.eh_frame_hdr:000000000001946F                 db    0
.eh_frame_hdr:0000000000019470                 db 0C4h
.eh_frame_hdr:0000000000019471                 db  41h ; A
.eh_frame_hdr:0000000000019472                 db 0FFh
.eh_frame_hdr:0000000000019473                 db 0FFh
.eh_frame_hdr:0000000000019474                 db 0C4h
.eh_frame_hdr:0000000000019475                 db  1Bh
.eh_frame_hdr:0000000000019476                 db    0
.eh_frame_hdr:0000000000019477                 db    0
.eh_frame_hdr:0000000000019478                 db  74h ; t
.eh_frame_hdr:0000000000019479                 db  45h ; E
.eh_frame_hdr:000000000001947A                 db 0FFh
.eh_frame_hdr:000000000001947B                 db 0FFh
.eh_frame_hdr:000000000001947C                 db  0Ch
.eh_frame_hdr:000000000001947D                 db  1Ch
.eh_frame_hdr:000000000001947E                 db    0
.eh_frame_hdr:000000000001947F                 db    0
.eh_frame_hdr:0000000000019480                 db    4
.eh_frame_hdr:0000000000019481                 db  46h ; F
.eh_frame_hdr:0000000000019482                 db 0FFh
.eh_frame_hdr:0000000000019483                 db 0FFh
.eh_frame_hdr:0000000000019484                 db  30h ; 0
.eh_frame_hdr:0000000000019485                 db  1Ch
.eh_frame_hdr:0000000000019486                 db    0
.eh_frame_hdr:0000000000019487                 db    0
.eh_frame_hdr:0000000000019488                 db  74h ; t
.eh_frame_hdr:0000000000019489                 db  47h ; G
.eh_frame_hdr:000000000001948A                 db 0FFh
.eh_frame_hdr:000000000001948B                 db 0FFh
.eh_frame_hdr:000000000001948C                 db  64h ; d
.eh_frame_hdr:000000000001948D                 db  1Ch
.eh_frame_hdr:000000000001948E                 db    0
.eh_frame_hdr:000000000001948F                 db    0
.eh_frame_hdr:0000000000019490                 db 0F4h
.eh_frame_hdr:0000000000019491                 db  47h ; G
.eh_frame_hdr:0000000000019492                 db 0FFh
.eh_frame_hdr:0000000000019493                 db 0FFh
.eh_frame_hdr:0000000000019494                 db 0C4h
.eh_frame_hdr:0000000000019495                 db  1Ch
.eh_frame_hdr:0000000000019496                 db    0
.eh_frame_hdr:0000000000019497                 db    0
.eh_frame_hdr:0000000000019498                 db  94h
.eh_frame_hdr:0000000000019499                 db  48h ; H
.eh_frame_hdr:000000000001949A                 db 0FFh
.eh_frame_hdr:000000000001949B                 db 0FFh
.eh_frame_hdr:000000000001949C                 db 0E4h
.eh_frame_hdr:000000000001949D                 db  1Ch
.eh_frame_hdr:000000000001949E                 db    0
.eh_frame_hdr:000000000001949F                 db    0
.eh_frame_hdr:00000000000194A0                 db  14h
.eh_frame_hdr:00000000000194A1                 db  49h ; I
.eh_frame_hdr:00000000000194A2                 db 0FFh
.eh_frame_hdr:00000000000194A3                 db 0FFh
.eh_frame_hdr:00000000000194A4                 db  1Ch
.eh_frame_hdr:00000000000194A5                 db  1Dh
.eh_frame_hdr:00000000000194A6                 db    0
.eh_frame_hdr:00000000000194A7                 db    0
.eh_frame_hdr:00000000000194A8                 db  74h ; t
.eh_frame_hdr:00000000000194A9                 db  49h ; I
.eh_frame_hdr:00000000000194AA                 db 0FFh
.eh_frame_hdr:00000000000194AB                 db 0FFh
.eh_frame_hdr:00000000000194AC                 db  4Ch ; L
.eh_frame_hdr:00000000000194AD                 db  1Dh
.eh_frame_hdr:00000000000194AE                 db    0
.eh_frame_hdr:00000000000194AF                 db    0
.eh_frame_hdr:00000000000194B0                 db  64h ; d
.eh_frame_hdr:00000000000194B1                 db  4Ah ; J
.eh_frame_hdr:00000000000194B2                 db 0FFh
.eh_frame_hdr:00000000000194B3                 db 0FFh
.eh_frame_hdr:00000000000194B4                 db  90h
.eh_frame_hdr:00000000000194B5                 db  1Dh
.eh_frame_hdr:00000000000194B6                 db    0
.eh_frame_hdr:00000000000194B7                 db    0
.eh_frame_hdr:00000000000194B8                 db 0A4h
.eh_frame_hdr:00000000000194B9                 db  5Ch ; \
.eh_frame_hdr:00000000000194BA                 db 0FFh
.eh_frame_hdr:00000000000194BB                 db 0FFh
.eh_frame_hdr:00000000000194BC                 db    8
.eh_frame_hdr:00000000000194BD                 db  1Eh
.eh_frame_hdr:00000000000194BE                 db    0
.eh_frame_hdr:00000000000194BF                 db    0
.eh_frame_hdr:00000000000194C0                 db  54h ; T
.eh_frame_hdr:00000000000194C1                 db  5Eh ; ^
.eh_frame_hdr:00000000000194C2                 db 0FFh
.eh_frame_hdr:00000000000194C3                 db 0FFh
.eh_frame_hdr:00000000000194C4                 db  74h ; t
.eh_frame_hdr:00000000000194C5                 db  1Eh
.eh_frame_hdr:00000000000194C6                 db    0
.eh_frame_hdr:00000000000194C7                 db    0
.eh_frame_hdr:00000000000194C8                 db  94h
.eh_frame_hdr:00000000000194C9                 db  5Eh ; ^
.eh_frame_hdr:00000000000194CA                 db 0FFh
.eh_frame_hdr:00000000000194CB                 db 0FFh
.eh_frame_hdr:00000000000194CC                 db 0A0h
.eh_frame_hdr:00000000000194CD                 db  1Eh
.eh_frame_hdr:00000000000194CE                 db    0
.eh_frame_hdr:00000000000194CF                 db    0
.eh_frame_hdr:00000000000194D0                 db 0B4h
.eh_frame_hdr:00000000000194D1                 db  5Eh ; ^
.eh_frame_hdr:00000000000194D2                 db 0FFh
.eh_frame_hdr:00000000000194D3                 db 0FFh
.eh_frame_hdr:00000000000194D4                 db 0B4h
.eh_frame_hdr:00000000000194D5                 db  1Eh
.eh_frame_hdr:00000000000194D6                 db    0
.eh_frame_hdr:00000000000194D7                 db    0
.eh_frame_hdr:00000000000194D8                 db 0D4h
.eh_frame_hdr:00000000000194D9                 db  5Eh ; ^
.eh_frame_hdr:00000000000194DA                 db 0FFh
.eh_frame_hdr:00000000000194DB                 db 0FFh
.eh_frame_hdr:00000000000194DC                 db 0C8h
.eh_frame_hdr:00000000000194DD                 db  1Eh
.eh_frame_hdr:00000000000194DE                 db    0
.eh_frame_hdr:00000000000194DF                 db    0
.eh_frame_hdr:00000000000194E0                 db  14h
.eh_frame_hdr:00000000000194E1                 db  5Fh ; _
.eh_frame_hdr:00000000000194E2                 db 0FFh
.eh_frame_hdr:00000000000194E3                 db 0FFh
.eh_frame_hdr:00000000000194E4                 db 0DCh
.eh_frame_hdr:00000000000194E5                 db  1Eh
.eh_frame_hdr:00000000000194E6                 db    0
.eh_frame_hdr:00000000000194E7                 db    0
.eh_frame_hdr:00000000000194E8                 db  34h ; 4
.eh_frame_hdr:00000000000194E9                 db  5Fh ; _
.eh_frame_hdr:00000000000194EA                 db 0FFh
.eh_frame_hdr:00000000000194EB                 db 0FFh
.eh_frame_hdr:00000000000194EC                 db 0F0h
.eh_frame_hdr:00000000000194ED                 db  1Eh
.eh_frame_hdr:00000000000194EE                 db    0
.eh_frame_hdr:00000000000194EF                 db    0
.eh_frame_hdr:00000000000194F0                 db  64h ; d
.eh_frame_hdr:00000000000194F1                 db  5Fh ; _
.eh_frame_hdr:00000000000194F2                 db 0FFh
.eh_frame_hdr:00000000000194F3                 db 0FFh
.eh_frame_hdr:00000000000194F4                 db    4
.eh_frame_hdr:00000000000194F5                 db  1Fh
.eh_frame_hdr:00000000000194F6                 db    0
.eh_frame_hdr:00000000000194F7                 db    0
.eh_frame_hdr:00000000000194F8                 db 0E4h
.eh_frame_hdr:00000000000194F9                 db  5Fh ; _
.eh_frame_hdr:00000000000194FA                 db 0FFh
.eh_frame_hdr:00000000000194FB                 db 0FFh
.eh_frame_hdr:00000000000194FC                 db  58h ; X
.eh_frame_hdr:00000000000194FD                 db  1Fh
.eh_frame_hdr:00000000000194FE                 db    0
.eh_frame_hdr:00000000000194FF                 db    0
.eh_frame_hdr:0000000000019500                 db 0D4h
.eh_frame_hdr:0000000000019501                 db  60h ; `
.eh_frame_hdr:0000000000019502                 db 0FFh
.eh_frame_hdr:0000000000019503                 db 0FFh
.eh_frame_hdr:0000000000019504                 db 0C4h
.eh_frame_hdr:0000000000019505                 db  1Fh
.eh_frame_hdr:0000000000019506                 db    0
.eh_frame_hdr:0000000000019507                 db    0
.eh_frame_hdr:0000000000019508                 db 0E4h
.eh_frame_hdr:0000000000019509                 db  60h ; `
.eh_frame_hdr:000000000001950A                 db 0FFh
.eh_frame_hdr:000000000001950B                 db 0FFh
.eh_frame_hdr:000000000001950C                 db 0D8h
.eh_frame_hdr:000000000001950D                 db  1Fh
.eh_frame_hdr:000000000001950E                 db    0
.eh_frame_hdr:000000000001950F                 db    0
.eh_frame_hdr:0000000000019510                 db  84h
.eh_frame_hdr:0000000000019511                 db  61h ; a
.eh_frame_hdr:0000000000019512                 db 0FFh
.eh_frame_hdr:0000000000019513                 db 0FFh
.eh_frame_hdr:0000000000019514                 db    4
.eh_frame_hdr:0000000000019515                 db  20h
.eh_frame_hdr:0000000000019516                 db    0
.eh_frame_hdr:0000000000019517                 db    0
.eh_frame_hdr:0000000000019518                 db 0A4h
.eh_frame_hdr:0000000000019519                 db  61h ; a
.eh_frame_hdr:000000000001951A                 db 0FFh
.eh_frame_hdr:000000000001951B                 db 0FFh
.eh_frame_hdr:000000000001951C                 db  18h
.eh_frame_hdr:000000000001951D                 db  20h
.eh_frame_hdr:000000000001951E                 db    0
.eh_frame_hdr:000000000001951F                 db    0
.eh_frame_hdr:0000000000019520                 db 0B4h
.eh_frame_hdr:0000000000019521                 db  61h ; a
.eh_frame_hdr:0000000000019522                 db 0FFh
.eh_frame_hdr:0000000000019523                 db 0FFh
.eh_frame_hdr:0000000000019524                 db  2Ch ; ,
.eh_frame_hdr:0000000000019525                 db  20h
.eh_frame_hdr:0000000000019526                 db    0
.eh_frame_hdr:0000000000019527                 db    0
.eh_frame_hdr:0000000000019528                 db 0D4h
.eh_frame_hdr:0000000000019529                 db  61h ; a
.eh_frame_hdr:000000000001952A                 db 0FFh
.eh_frame_hdr:000000000001952B                 db 0FFh
.eh_frame_hdr:000000000001952C                 db  40h ; @
.eh_frame_hdr:000000000001952D                 db  20h
.eh_frame_hdr:000000000001952E                 db    0
.eh_frame_hdr:000000000001952F                 db    0
.eh_frame_hdr:0000000000019530                 db 0F4h
.eh_frame_hdr:0000000000019531                 db  61h ; a
.eh_frame_hdr:0000000000019532                 db 0FFh
.eh_frame_hdr:0000000000019533                 db 0FFh
.eh_frame_hdr:0000000000019534                 db  54h ; T
.eh_frame_hdr:0000000000019535                 db  20h
.eh_frame_hdr:0000000000019536                 db    0
.eh_frame_hdr:0000000000019537                 db    0
.eh_frame_hdr:0000000000019538                 db  84h
.eh_frame_hdr:0000000000019539                 db  62h ; b
.eh_frame_hdr:000000000001953A                 db 0FFh
.eh_frame_hdr:000000000001953B                 db 0FFh
.eh_frame_hdr:000000000001953C                 db  70h ; p
.eh_frame_hdr:000000000001953D                 db  20h
.eh_frame_hdr:000000000001953E                 db    0
.eh_frame_hdr:000000000001953F                 db    0
.eh_frame_hdr:0000000000019540                 db  14h
.eh_frame_hdr:0000000000019541                 db  63h ; c
.eh_frame_hdr:0000000000019542                 db 0FFh
.eh_frame_hdr:0000000000019543                 db 0FFh
.eh_frame_hdr:0000000000019544                 db  8Ch
.eh_frame_hdr:0000000000019545                 db  20h
.eh_frame_hdr:0000000000019546                 db    0
.eh_frame_hdr:0000000000019547                 db    0
.eh_frame_hdr:0000000000019548                 db  24h ; $
.eh_frame_hdr:0000000000019549                 db  63h ; c
.eh_frame_hdr:000000000001954A                 db 0FFh
.eh_frame_hdr:000000000001954B                 db 0FFh
.eh_frame_hdr:000000000001954C                 db 0A0h
.eh_frame_hdr:000000000001954D                 db  20h
.eh_frame_hdr:000000000001954E                 db    0
.eh_frame_hdr:000000000001954F                 db    0
.eh_frame_hdr:0000000000019550                 db  34h ; 4
.eh_frame_hdr:0000000000019551                 db  63h ; c
.eh_frame_hdr:0000000000019552                 db 0FFh
.eh_frame_hdr:0000000000019553                 db 0FFh
.eh_frame_hdr:0000000000019554                 db 0B4h
.eh_frame_hdr:0000000000019555                 db  20h
.eh_frame_hdr:0000000000019556                 db    0
.eh_frame_hdr:0000000000019557                 db    0
.eh_frame_hdr:0000000000019558                 db 0D4h
.eh_frame_hdr:0000000000019559                 db  63h ; c
.eh_frame_hdr:000000000001955A                 db 0FFh
.eh_frame_hdr:000000000001955B                 db 0FFh
.eh_frame_hdr:000000000001955C                 db 0D0h
.eh_frame_hdr:000000000001955D                 db  20h
.eh_frame_hdr:000000000001955E                 db    0
.eh_frame_hdr:000000000001955F                 db    0
.eh_frame_hdr:0000000000019560                 db 0E4h
.eh_frame_hdr:0000000000019561                 db  63h ; c
.eh_frame_hdr:0000000000019562                 db 0FFh
.eh_frame_hdr:0000000000019563                 db 0FFh
.eh_frame_hdr:0000000000019564                 db 0E4h
.eh_frame_hdr:0000000000019565                 db  20h
.eh_frame_hdr:0000000000019566                 db    0
.eh_frame_hdr:0000000000019567                 db    0
.eh_frame_hdr:0000000000019568                 db    4
.eh_frame_hdr:0000000000019569                 db  64h ; d
.eh_frame_hdr:000000000001956A                 db 0FFh
.eh_frame_hdr:000000000001956B                 db 0FFh
.eh_frame_hdr:000000000001956C                 db 0F8h
.eh_frame_hdr:000000000001956D                 db  20h
.eh_frame_hdr:000000000001956E                 db    0
.eh_frame_hdr:000000000001956F                 db    0
.eh_frame_hdr:0000000000019570                 db  14h
.eh_frame_hdr:0000000000019571                 db  64h ; d
.eh_frame_hdr:0000000000019572                 db 0FFh
.eh_frame_hdr:0000000000019573                 db 0FFh
.eh_frame_hdr:0000000000019574                 db  0Ch
.eh_frame_hdr:0000000000019575                 db  21h ; !
.eh_frame_hdr:0000000000019576                 db    0
.eh_frame_hdr:0000000000019577                 db    0
.eh_frame_hdr:0000000000019578                 db 0A4h
.eh_frame_hdr:0000000000019579                 db  64h ; d
.eh_frame_hdr:000000000001957A                 db 0FFh
.eh_frame_hdr:000000000001957B                 db 0FFh
.eh_frame_hdr:000000000001957C                 db  28h ; (
.eh_frame_hdr:000000000001957D                 db  21h ; !
.eh_frame_hdr:000000000001957E                 db    0
.eh_frame_hdr:000000000001957F                 db    0
.eh_frame_hdr:0000000000019580                 db  44h ; D
.eh_frame_hdr:0000000000019581                 db  65h ; e
.eh_frame_hdr:0000000000019582                 db 0FFh
.eh_frame_hdr:0000000000019583                 db 0FFh
.eh_frame_hdr:0000000000019584                 db  44h ; D
.eh_frame_hdr:0000000000019585                 db  21h ; !
.eh_frame_hdr:0000000000019586                 db    0
.eh_frame_hdr:0000000000019587                 db    0
.eh_frame_hdr:0000000000019588                 db  54h ; T
.eh_frame_hdr:0000000000019589                 db  65h ; e
.eh_frame_hdr:000000000001958A                 db 0FFh
.eh_frame_hdr:000000000001958B                 db 0FFh
.eh_frame_hdr:000000000001958C                 db  58h ; X
.eh_frame_hdr:000000000001958D                 db  21h ; !
.eh_frame_hdr:000000000001958E                 db    0
.eh_frame_hdr:000000000001958F                 db    0
.eh_frame_hdr:0000000000019590                 db  74h ; t
.eh_frame_hdr:0000000000019591                 db  65h ; e
.eh_frame_hdr:0000000000019592                 db 0FFh
.eh_frame_hdr:0000000000019593                 db 0FFh
.eh_frame_hdr:0000000000019594                 db  6Ch ; l
.eh_frame_hdr:0000000000019595                 db  21h ; !
.eh_frame_hdr:0000000000019596                 db    0
.eh_frame_hdr:0000000000019597                 db    0
.eh_frame_hdr:0000000000019598                 db  94h
.eh_frame_hdr:0000000000019599                 db  65h ; e
.eh_frame_hdr:000000000001959A                 db 0FFh
.eh_frame_hdr:000000000001959B                 db 0FFh
.eh_frame_hdr:000000000001959C                 db  80h
.eh_frame_hdr:000000000001959D                 db  21h ; !
.eh_frame_hdr:000000000001959E                 db    0
.eh_frame_hdr:000000000001959F                 db    0
.eh_frame_hdr:00000000000195A0                 db 0A4h
.eh_frame_hdr:00000000000195A1                 db  65h ; e
.eh_frame_hdr:00000000000195A2                 db 0FFh
.eh_frame_hdr:00000000000195A3                 db 0FFh
.eh_frame_hdr:00000000000195A4                 db  94h
.eh_frame_hdr:00000000000195A5                 db  21h ; !
.eh_frame_hdr:00000000000195A6                 db    0
.eh_frame_hdr:00000000000195A7                 db    0
.eh_frame_hdr:00000000000195A8                 db 0C4h
.eh_frame_hdr:00000000000195A9                 db  65h ; e
.eh_frame_hdr:00000000000195AA                 db 0FFh
.eh_frame_hdr:00000000000195AB                 db 0FFh
.eh_frame_hdr:00000000000195AC                 db 0A8h
.eh_frame_hdr:00000000000195AD                 db  21h ; !
.eh_frame_hdr:00000000000195AE                 db    0
.eh_frame_hdr:00000000000195AF                 db    0
.eh_frame_hdr:00000000000195B0                 db 0E4h
.eh_frame_hdr:00000000000195B1                 db  65h ; e
.eh_frame_hdr:00000000000195B2                 db 0FFh
.eh_frame_hdr:00000000000195B3                 db 0FFh
.eh_frame_hdr:00000000000195B4                 db 0BCh
.eh_frame_hdr:00000000000195B5                 db  21h ; !
.eh_frame_hdr:00000000000195B6                 db    0
.eh_frame_hdr:00000000000195B7                 db    0
.eh_frame_hdr:00000000000195B8                 db    4
.eh_frame_hdr:00000000000195B9                 db  66h ; f
.eh_frame_hdr:00000000000195BA                 db 0FFh
.eh_frame_hdr:00000000000195BB                 db 0FFh
.eh_frame_hdr:00000000000195BC                 db 0D4h
.eh_frame_hdr:00000000000195BD                 db  21h ; !
.eh_frame_hdr:00000000000195BE                 db    0
.eh_frame_hdr:00000000000195BF                 db    0
.eh_frame_hdr:00000000000195C0                 db  74h ; t
.eh_frame_hdr:00000000000195C1                 db  68h ; h
.eh_frame_hdr:00000000000195C2                 db 0FFh
.eh_frame_hdr:00000000000195C3                 db 0FFh
.eh_frame_hdr:00000000000195C4                 db  24h ; $
.eh_frame_hdr:00000000000195C5                 db  22h ; "
.eh_frame_hdr:00000000000195C6                 db    0
.eh_frame_hdr:00000000000195C7                 db    0
.eh_frame_hdr:00000000000195C8                 db 0D4h
.eh_frame_hdr:00000000000195C9                 db  68h ; h
.eh_frame_hdr:00000000000195CA                 db 0FFh
.eh_frame_hdr:00000000000195CB                 db 0FFh
.eh_frame_hdr:00000000000195CC                 db  5Ch ; \
.eh_frame_hdr:00000000000195CD                 db  22h ; "
.eh_frame_hdr:00000000000195CE                 db    0
.eh_frame_hdr:00000000000195CF                 db    0
.eh_frame_hdr:00000000000195D0                 db  34h ; 4
.eh_frame_hdr:00000000000195D1                 db  69h ; i
.eh_frame_hdr:00000000000195D2                 db 0FFh
.eh_frame_hdr:00000000000195D3                 db 0FFh
.eh_frame_hdr:00000000000195D4                 db  94h
.eh_frame_hdr:00000000000195D5                 db  22h ; "
.eh_frame_hdr:00000000000195D6                 db    0
.eh_frame_hdr:00000000000195D7                 db    0
.eh_frame_hdr:00000000000195D8                 db  64h ; d
.eh_frame_hdr:00000000000195D9                 db  6Ah ; j
.eh_frame_hdr:00000000000195DA                 db 0FFh
.eh_frame_hdr:00000000000195DB                 db 0FFh
.eh_frame_hdr:00000000000195DC                 db 0D0h
.eh_frame_hdr:00000000000195DD                 db  22h ; "
.eh_frame_hdr:00000000000195DE                 db    0
.eh_frame_hdr:00000000000195DF                 db    0
.eh_frame_hdr:00000000000195E0                 db    4
.eh_frame_hdr:00000000000195E1                 db  6Bh ; k
.eh_frame_hdr:00000000000195E2                 db 0FFh
.eh_frame_hdr:00000000000195E3                 db 0FFh
.eh_frame_hdr:00000000000195E4                 db  30h ; 0
.eh_frame_hdr:00000000000195E5                 db  23h ; #
.eh_frame_hdr:00000000000195E6                 db    0
.eh_frame_hdr:00000000000195E7                 db    0
.eh_frame_hdr:00000000000195E8                 db  24h ; $
.eh_frame_hdr:00000000000195E9                 db  6Bh ; k
.eh_frame_hdr:00000000000195EA                 db 0FFh
.eh_frame_hdr:00000000000195EB                 db 0FFh
.eh_frame_hdr:00000000000195EC                 db  44h ; D
.eh_frame_hdr:00000000000195ED                 db  23h ; #
.eh_frame_hdr:00000000000195EE                 db    0
.eh_frame_hdr:00000000000195EF                 db    0
.eh_frame_hdr:00000000000195F0                 db  44h ; D
.eh_frame_hdr:00000000000195F1                 db  6Bh ; k
.eh_frame_hdr:00000000000195F2                 db 0FFh
.eh_frame_hdr:00000000000195F3                 db 0FFh
.eh_frame_hdr:00000000000195F4                 db  58h ; X
.eh_frame_hdr:00000000000195F5                 db  23h ; #
.eh_frame_hdr:00000000000195F6                 db    0
.eh_frame_hdr:00000000000195F7                 db    0
.eh_frame_hdr:00000000000195F8                 db  54h ; T
.eh_frame_hdr:00000000000195F9                 db  6Bh ; k
.eh_frame_hdr:00000000000195FA                 db 0FFh
.eh_frame_hdr:00000000000195FB                 db 0FFh
.eh_frame_hdr:00000000000195FC                 db  6Ch ; l
.eh_frame_hdr:00000000000195FD                 db  23h ; #
.eh_frame_hdr:00000000000195FE                 db    0
.eh_frame_hdr:00000000000195FF                 db    0
.eh_frame_hdr:0000000000019600                 db 0D4h
.eh_frame_hdr:0000000000019601                 db  6Eh ; n
.eh_frame_hdr:0000000000019602                 db 0FFh
.eh_frame_hdr:0000000000019603                 db 0FFh
.eh_frame_hdr:0000000000019604                 db 0BCh
.eh_frame_hdr:0000000000019605                 db  23h ; #
.eh_frame_hdr:0000000000019606                 db    0
.eh_frame_hdr:0000000000019607                 db    0
.eh_frame_hdr:0000000000019608                 db  34h ; 4
.eh_frame_hdr:0000000000019609                 db  6Fh ; o
.eh_frame_hdr:000000000001960A                 db 0FFh
.eh_frame_hdr:000000000001960B                 db 0FFh
.eh_frame_hdr:000000000001960C                 db 0ECh
.eh_frame_hdr:000000000001960D                 db  23h ; #
.eh_frame_hdr:000000000001960E                 db    0
.eh_frame_hdr:000000000001960F                 db    0
.eh_frame_hdr:0000000000019610                 db  44h ; D
.eh_frame_hdr:0000000000019611                 db  6Fh ; o
.eh_frame_hdr:0000000000019612                 db 0FFh
.eh_frame_hdr:0000000000019613                 db 0FFh
.eh_frame_hdr:0000000000019614                 db    0
.eh_frame_hdr:0000000000019615                 db  24h ; $
.eh_frame_hdr:0000000000019616                 db    0
.eh_frame_hdr:0000000000019617                 db    0
.eh_frame_hdr:0000000000019618                 db  64h ; d
.eh_frame_hdr:0000000000019619                 db  6Fh ; o
.eh_frame_hdr:000000000001961A                 db 0FFh
.eh_frame_hdr:000000000001961B                 db 0FFh
.eh_frame_hdr:000000000001961C                 db  14h
.eh_frame_hdr:000000000001961D                 db  24h ; $
.eh_frame_hdr:000000000001961E                 db    0
.eh_frame_hdr:000000000001961F                 db    0
.eh_frame_hdr:0000000000019620                 db  14h
.eh_frame_hdr:0000000000019621                 db  72h ; r
.eh_frame_hdr:0000000000019622                 db 0FFh
.eh_frame_hdr:0000000000019623                 db 0FFh
.eh_frame_hdr:0000000000019624                 db  64h ; d
.eh_frame_hdr:0000000000019625                 db  24h ; $
.eh_frame_hdr:0000000000019626                 db    0
.eh_frame_hdr:0000000000019627                 db    0
.eh_frame_hdr:0000000000019628                 db  74h ; t
.eh_frame_hdr:0000000000019629                 db  73h ; s
.eh_frame_hdr:000000000001962A                 db 0FFh
.eh_frame_hdr:000000000001962B                 db 0FFh
.eh_frame_hdr:000000000001962C                 db  98h
.eh_frame_hdr:000000000001962D                 db  24h ; $
.eh_frame_hdr:000000000001962E                 db    0
.eh_frame_hdr:000000000001962F                 db    0
.eh_frame_hdr:0000000000019630                 db 0F4h
.eh_frame_hdr:0000000000019631                 db  73h ; s
.eh_frame_hdr:0000000000019632                 db 0FFh
.eh_frame_hdr:0000000000019633                 db 0FFh
.eh_frame_hdr:0000000000019634                 db 0B4h
.eh_frame_hdr:0000000000019635                 db  24h ; $
.eh_frame_hdr:0000000000019636                 db    0
.eh_frame_hdr:0000000000019637                 db    0
.eh_frame_hdr:0000000000019638                 db  84h
.eh_frame_hdr:0000000000019639                 db  75h ; u
.eh_frame_hdr:000000000001963A                 db 0FFh
.eh_frame_hdr:000000000001963B                 db 0FFh
.eh_frame_hdr:000000000001963C                 db    4
.eh_frame_hdr:000000000001963D                 db  25h ; %
.eh_frame_hdr:000000000001963E                 db    0
.eh_frame_hdr:000000000001963F                 db    0
.eh_frame_hdr:0000000000019640                 db    4
.eh_frame_hdr:0000000000019641                 db  76h ; v
.eh_frame_hdr:0000000000019642                 db 0FFh
.eh_frame_hdr:0000000000019643                 db 0FFh
.eh_frame_hdr:0000000000019644                 db  28h ; (
.eh_frame_hdr:0000000000019645                 db  25h ; %
.eh_frame_hdr:0000000000019646                 db    0
.eh_frame_hdr:0000000000019647                 db    0
.eh_frame_hdr:0000000000019648                 db  14h
.eh_frame_hdr:0000000000019649                 db  76h ; v
.eh_frame_hdr:000000000001964A                 db 0FFh
.eh_frame_hdr:000000000001964B                 db 0FFh
.eh_frame_hdr:000000000001964C                 db  3Ch ; <
.eh_frame_hdr:000000000001964D                 db  25h ; %
.eh_frame_hdr:000000000001964E                 db    0
.eh_frame_hdr:000000000001964F                 db    0
.eh_frame_hdr:0000000000019650                 db  34h ; 4
.eh_frame_hdr:0000000000019651                 db  76h ; v
.eh_frame_hdr:0000000000019652                 db 0FFh
.eh_frame_hdr:0000000000019653                 db 0FFh
.eh_frame_hdr:0000000000019654                 db  50h ; P
.eh_frame_hdr:0000000000019655                 db  25h ; %
.eh_frame_hdr:0000000000019656                 db    0
.eh_frame_hdr:0000000000019657                 db    0
.eh_frame_hdr:0000000000019658                 db 0B4h
.eh_frame_hdr:0000000000019659                 db  77h ; w
.eh_frame_hdr:000000000001965A                 db 0FFh
.eh_frame_hdr:000000000001965B                 db 0FFh
.eh_frame_hdr:000000000001965C                 db  9Ch
.eh_frame_hdr:000000000001965D                 db  25h ; %
.eh_frame_hdr:000000000001965E                 db    0
.eh_frame_hdr:000000000001965F                 db    0
.eh_frame_hdr:0000000000019660                 db  44h ; D
.eh_frame_hdr:0000000000019661                 db  78h ; x
.eh_frame_hdr:0000000000019662                 db 0FFh
.eh_frame_hdr:0000000000019663                 db 0FFh
.eh_frame_hdr:0000000000019664                 db 0C0h
.eh_frame_hdr:0000000000019665                 db  25h ; %
.eh_frame_hdr:0000000000019666                 db    0
.eh_frame_hdr:0000000000019667                 db    0
.eh_frame_hdr:0000000000019668                 db  54h ; T
.eh_frame_hdr:0000000000019669                 db  78h ; x
.eh_frame_hdr:000000000001966A                 db 0FFh
.eh_frame_hdr:000000000001966B                 db 0FFh
.eh_frame_hdr:000000000001966C                 db 0D4h
.eh_frame_hdr:000000000001966D                 db  25h ; %
.eh_frame_hdr:000000000001966E                 db    0
.eh_frame_hdr:000000000001966F                 db    0
.eh_frame_hdr:0000000000019670                 db  64h ; d
.eh_frame_hdr:0000000000019671                 db  78h ; x
.eh_frame_hdr:0000000000019672                 db 0FFh
.eh_frame_hdr:0000000000019673                 db 0FFh
.eh_frame_hdr:0000000000019674                 db 0ECh
.eh_frame_hdr:0000000000019675                 db  25h ; %
.eh_frame_hdr:0000000000019676                 db    0
.eh_frame_hdr:0000000000019677                 db    0
.eh_frame_hdr:0000000000019678                 db 0A4h
.eh_frame_hdr:0000000000019679                 db  78h ; x
.eh_frame_hdr:000000000001967A                 db 0FFh
.eh_frame_hdr:000000000001967B                 db 0FFh
.eh_frame_hdr:000000000001967C                 db  24h ; $
.eh_frame_hdr:000000000001967D                 db  26h ; &
.eh_frame_hdr:000000000001967E                 db    0
.eh_frame_hdr:000000000001967F                 db    0
.eh_frame_hdr:0000000000019680                 db 0B4h
.eh_frame_hdr:0000000000019681                 db  78h ; x
.eh_frame_hdr:0000000000019682                 db 0FFh
.eh_frame_hdr:0000000000019683                 db 0FFh
.eh_frame_hdr:0000000000019684                 db  38h ; 8
.eh_frame_hdr:0000000000019685                 db  26h ; &
.eh_frame_hdr:0000000000019686                 db    0
.eh_frame_hdr:0000000000019687                 db    0
.eh_frame_hdr:0000000000019688                 db 0C4h
.eh_frame_hdr:0000000000019689                 db  78h ; x
.eh_frame_hdr:000000000001968A                 db 0FFh
.eh_frame_hdr:000000000001968B                 db 0FFh
.eh_frame_hdr:000000000001968C                 db  4Ch ; L
.eh_frame_hdr:000000000001968D                 db  26h ; &
.eh_frame_hdr:000000000001968E                 db    0
.eh_frame_hdr:000000000001968F                 db    0
.eh_frame_hdr:0000000000019690                 db  44h ; D
.eh_frame_hdr:0000000000019691                 db  80h
.eh_frame_hdr:0000000000019692                 db 0FFh
.eh_frame_hdr:0000000000019693                 db 0FFh
.eh_frame_hdr:0000000000019694                 db  9Ch
.eh_frame_hdr:0000000000019695                 db  26h ; &
.eh_frame_hdr:0000000000019696                 db    0
.eh_frame_hdr:0000000000019697                 db    0
.eh_frame_hdr:0000000000019698                 db  64h ; d
.eh_frame_hdr:0000000000019699                 db  80h
.eh_frame_hdr:000000000001969A                 db 0FFh
.eh_frame_hdr:000000000001969B                 db 0FFh
.eh_frame_hdr:000000000001969C                 db 0B4h
.eh_frame_hdr:000000000001969D                 db  26h ; &
.eh_frame_hdr:000000000001969E                 db    0
.eh_frame_hdr:000000000001969F                 db    0
.eh_frame_hdr:00000000000196A0                 db  44h ; D
.eh_frame_hdr:00000000000196A1                 db  81h
.eh_frame_hdr:00000000000196A2                 db 0FFh
.eh_frame_hdr:00000000000196A3                 db 0FFh
.eh_frame_hdr:00000000000196A4                 db 0F8h
.eh_frame_hdr:00000000000196A5                 db  26h ; &
.eh_frame_hdr:00000000000196A6                 db    0
.eh_frame_hdr:00000000000196A7                 db    0
.eh_frame_hdr:00000000000196A8                 db 0F4h
.eh_frame_hdr:00000000000196A9                 db  81h
.eh_frame_hdr:00000000000196AA                 db 0FFh
.eh_frame_hdr:00000000000196AB                 db 0FFh
.eh_frame_hdr:00000000000196AC                 db  10h
.eh_frame_hdr:00000000000196AD                 db  27h ; '
.eh_frame_hdr:00000000000196AE                 db    0
.eh_frame_hdr:00000000000196AF                 db    0
.eh_frame_hdr:00000000000196B0                 db    4
.eh_frame_hdr:00000000000196B1                 db  82h
.eh_frame_hdr:00000000000196B2                 db 0FFh
.eh_frame_hdr:00000000000196B3                 db 0FFh
.eh_frame_hdr:00000000000196B4                 db  24h ; $
.eh_frame_hdr:00000000000196B5                 db  27h ; '
.eh_frame_hdr:00000000000196B6                 db    0
.eh_frame_hdr:00000000000196B7                 db    0
.eh_frame_hdr:00000000000196B8                 db  64h ; d
.eh_frame_hdr:00000000000196B9                 db  86h
.eh_frame_hdr:00000000000196BA                 db 0FFh
.eh_frame_hdr:00000000000196BB                 db 0FFh
.eh_frame_hdr:00000000000196BC                 db  6Ch ; l
.eh_frame_hdr:00000000000196BD                 db  27h ; '
.eh_frame_hdr:00000000000196BE                 db    0
.eh_frame_hdr:00000000000196BF                 db    0
.eh_frame_hdr:00000000000196C0                 db  74h ; t
.eh_frame_hdr:00000000000196C1                 db  86h
.eh_frame_hdr:00000000000196C2                 db 0FFh
.eh_frame_hdr:00000000000196C3                 db 0FFh
.eh_frame_hdr:00000000000196C4                 db  80h
.eh_frame_hdr:00000000000196C5                 db  27h ; '
.eh_frame_hdr:00000000000196C6                 db    0
.eh_frame_hdr:00000000000196C7                 db    0
.eh_frame_hdr:00000000000196C8                 db 0D4h
.eh_frame_hdr:00000000000196C9                 db  88h
.eh_frame_hdr:00000000000196CA                 db 0FFh
.eh_frame_hdr:00000000000196CB                 db 0FFh
.eh_frame_hdr:00000000000196CC                 db 0BCh
.eh_frame_hdr:00000000000196CD                 db  27h ; '
.eh_frame_hdr:00000000000196CE                 db    0
.eh_frame_hdr:00000000000196CF                 db    0
.eh_frame_hdr:00000000000196D0                 db 0F4h
.eh_frame_hdr:00000000000196D1                 db  8Ch
.eh_frame_hdr:00000000000196D2                 db 0FFh
.eh_frame_hdr:00000000000196D3                 db 0FFh
.eh_frame_hdr:00000000000196D4                 db 0D0h
.eh_frame_hdr:00000000000196D5                 db  28h ; (
.eh_frame_hdr:00000000000196D6                 db    0
.eh_frame_hdr:00000000000196D7                 db    0
.eh_frame_hdr:00000000000196D8                 db  14h
.eh_frame_hdr:00000000000196D9                 db  8Dh
.eh_frame_hdr:00000000000196DA                 db 0FFh
.eh_frame_hdr:00000000000196DB                 db 0FFh
.eh_frame_hdr:00000000000196DC                 db 0E4h
.eh_frame_hdr:00000000000196DD                 db  28h ; (
.eh_frame_hdr:00000000000196DE                 db    0
.eh_frame_hdr:00000000000196DF                 db    0
.eh_frame_hdr:00000000000196E0                 db  94h
.eh_frame_hdr:00000000000196E1                 db  8Dh
.eh_frame_hdr:00000000000196E2                 db 0FFh
.eh_frame_hdr:00000000000196E3                 db 0FFh
.eh_frame_hdr:00000000000196E4                 db    0
.eh_frame_hdr:00000000000196E5                 db  29h ; )
.eh_frame_hdr:00000000000196E6                 db    0
.eh_frame_hdr:00000000000196E7                 db    0
.eh_frame_hdr:00000000000196E8                 db  74h ; t
.eh_frame_hdr:00000000000196E9                 db  8Eh
.eh_frame_hdr:00000000000196EA                 db 0FFh
.eh_frame_hdr:00000000000196EB                 db 0FFh
.eh_frame_hdr:00000000000196EC                 db  2Ch ; ,
.eh_frame_hdr:00000000000196ED                 db  29h ; )
.eh_frame_hdr:00000000000196EE                 db    0
.eh_frame_hdr:00000000000196EF                 db    0
.eh_frame_hdr:00000000000196F0                 db 0F4h
.eh_frame_hdr:00000000000196F1                 db  8Eh
.eh_frame_hdr:00000000000196F2                 db 0FFh
.eh_frame_hdr:00000000000196F3                 db 0FFh
.eh_frame_hdr:00000000000196F4                 db  4Ch ; L
.eh_frame_hdr:00000000000196F5                 db  29h ; )
.eh_frame_hdr:00000000000196F6                 db    0
.eh_frame_hdr:00000000000196F7                 db    0
.eh_frame_hdr:00000000000196F8                 db  34h ; 4
.eh_frame_hdr:00000000000196F9                 db  8Fh
.eh_frame_hdr:00000000000196FA                 db 0FFh
.eh_frame_hdr:00000000000196FB                 db 0FFh
.eh_frame_hdr:00000000000196FC                 db  64h ; d
.eh_frame_hdr:00000000000196FD                 db  29h ; )
.eh_frame_hdr:00000000000196FE                 db    0
.eh_frame_hdr:00000000000196FF                 db    0
.eh_frame_hdr:0000000000019700                 db  54h ; T
.eh_frame_hdr:0000000000019701                 db  8Fh
.eh_frame_hdr:0000000000019702                 db 0FFh
.eh_frame_hdr:0000000000019703                 db 0FFh
.eh_frame_hdr:0000000000019704                 db  80h
.eh_frame_hdr:0000000000019705                 db  29h ; )
.eh_frame_hdr:0000000000019706                 db    0
.eh_frame_hdr:0000000000019707                 db    0
.eh_frame_hdr:0000000000019708                 db  84h
.eh_frame_hdr:0000000000019709                 db  8Fh
.eh_frame_hdr:000000000001970A                 db 0FFh
.eh_frame_hdr:000000000001970B                 db 0FFh
.eh_frame_hdr:000000000001970C                 db  94h
.eh_frame_hdr:000000000001970D                 db  29h ; )
.eh_frame_hdr:000000000001970E                 db    0
.eh_frame_hdr:000000000001970F                 db    0
.eh_frame_hdr:0000000000019710                 db  94h
.eh_frame_hdr:0000000000019711                 db  8Fh
.eh_frame_hdr:0000000000019712                 db 0FFh
.eh_frame_hdr:0000000000019713                 db 0FFh
.eh_frame_hdr:0000000000019714                 db 0A8h
.eh_frame_hdr:0000000000019715                 db  29h ; )
.eh_frame_hdr:0000000000019716                 db    0
.eh_frame_hdr:0000000000019717                 db    0
.eh_frame_hdr:0000000000019718                 db 0D4h
.eh_frame_hdr:0000000000019719                 db  8Fh
.eh_frame_hdr:000000000001971A                 db 0FFh
.eh_frame_hdr:000000000001971B                 db 0FFh
.eh_frame_hdr:000000000001971C                 db 0CCh
.eh_frame_hdr:000000000001971D                 db  29h ; )
.eh_frame_hdr:000000000001971E                 db    0
.eh_frame_hdr:000000000001971F                 db    0
.eh_frame_hdr:0000000000019720                 db    4
.eh_frame_hdr:0000000000019721                 db  90h
.eh_frame_hdr:0000000000019722                 db 0FFh
.eh_frame_hdr:0000000000019723                 db 0FFh
.eh_frame_hdr:0000000000019724                 db 0E0h
.eh_frame_hdr:0000000000019725                 db  29h ; )
.eh_frame_hdr:0000000000019726                 db    0
.eh_frame_hdr:0000000000019727                 db    0
.eh_frame_hdr:0000000000019728                 db  94h
.eh_frame_hdr:0000000000019729                 db  90h
.eh_frame_hdr:000000000001972A                 db 0FFh
.eh_frame_hdr:000000000001972B                 db 0FFh
.eh_frame_hdr:000000000001972C                 db 0F8h
.eh_frame_hdr:000000000001972D                 db  29h ; )
.eh_frame_hdr:000000000001972E                 db    0
.eh_frame_hdr:000000000001972F                 db    0
.eh_frame_hdr:0000000000019730                 db 0E4h
.eh_frame_hdr:0000000000019731                 db  90h
.eh_frame_hdr:0000000000019732                 db 0FFh
.eh_frame_hdr:0000000000019733                 db 0FFh
.eh_frame_hdr:0000000000019734                 db  10h
.eh_frame_hdr:0000000000019735                 db  2Ah ; *
.eh_frame_hdr:0000000000019736                 db    0
.eh_frame_hdr:0000000000019737                 db    0
.eh_frame_hdr:0000000000019738                 db    4
.eh_frame_hdr:0000000000019739                 db  91h
.eh_frame_hdr:000000000001973A                 db 0FFh
.eh_frame_hdr:000000000001973B                 db 0FFh
.eh_frame_hdr:000000000001973C                 db  2Ch ; ,
.eh_frame_hdr:000000000001973D                 db  2Ah ; *
.eh_frame_hdr:000000000001973E                 db    0
.eh_frame_hdr:000000000001973F                 db    0
.eh_frame_hdr:0000000000019740                 db  34h ; 4
.eh_frame_hdr:0000000000019741                 db  91h
.eh_frame_hdr:0000000000019742                 db 0FFh
.eh_frame_hdr:0000000000019743                 db 0FFh
.eh_frame_hdr:0000000000019744                 db  48h ; H
.eh_frame_hdr:0000000000019745                 db  2Ah ; *
.eh_frame_hdr:0000000000019746                 db    0
.eh_frame_hdr:0000000000019747                 db    0
.eh_frame_hdr:0000000000019748                 db  64h ; d
.eh_frame_hdr:0000000000019749                 db  91h
.eh_frame_hdr:000000000001974A                 db 0FFh
.eh_frame_hdr:000000000001974B                 db 0FFh
.eh_frame_hdr:000000000001974C                 db  70h ; p
.eh_frame_hdr:000000000001974D                 db  2Ah ; *
.eh_frame_hdr:000000000001974E                 db    0
.eh_frame_hdr:000000000001974F                 db    0
.eh_frame_hdr:0000000000019750                 db  84h
.eh_frame_hdr:0000000000019751                 db  91h
.eh_frame_hdr:0000000000019752                 db 0FFh
.eh_frame_hdr:0000000000019753                 db 0FFh
.eh_frame_hdr:0000000000019754                 db  8Ch
.eh_frame_hdr:0000000000019755                 db  2Ah ; *
.eh_frame_hdr:0000000000019756                 db    0
.eh_frame_hdr:0000000000019757                 db    0
.eh_frame_hdr:0000000000019758                 db 0C4h
.eh_frame_hdr:0000000000019759                 db  91h
.eh_frame_hdr:000000000001975A                 db 0FFh
.eh_frame_hdr:000000000001975B                 db 0FFh
.eh_frame_hdr:000000000001975C                 db 0A4h
.eh_frame_hdr:000000000001975D                 db  2Ah ; *
.eh_frame_hdr:000000000001975E                 db    0
.eh_frame_hdr:000000000001975F                 db    0
.eh_frame_hdr:0000000000019760                 db 0E4h
.eh_frame_hdr:0000000000019761                 db  95h
.eh_frame_hdr:0000000000019762                 db 0FFh
.eh_frame_hdr:0000000000019763                 db 0FFh
.eh_frame_hdr:0000000000019764                 db 0F4h
.eh_frame_hdr:0000000000019765                 db  2Ah ; *
.eh_frame_hdr:0000000000019766                 db    0
.eh_frame_hdr:0000000000019767                 db    0
.eh_frame_hdr:0000000000019768                 db  84h
.eh_frame_hdr:0000000000019769                 db  96h
.eh_frame_hdr:000000000001976A                 db 0FFh
.eh_frame_hdr:000000000001976B                 db 0FFh
.eh_frame_hdr:000000000001976C                 db  1Ch
.eh_frame_hdr:000000000001976D                 db  2Bh ; +
.eh_frame_hdr:000000000001976E                 db    0
.eh_frame_hdr:000000000001976F                 db    0
.eh_frame_hdr:0000000000019770                 db 0C4h
.eh_frame_hdr:0000000000019771                 db  96h
.eh_frame_hdr:0000000000019772                 db 0FFh
.eh_frame_hdr:0000000000019773                 db 0FFh
.eh_frame_hdr:0000000000019774                 db  3Ch ; <
.eh_frame_hdr:0000000000019775                 db  2Bh ; +
.eh_frame_hdr:0000000000019776                 db    0
.eh_frame_hdr:0000000000019777                 db    0
.eh_frame_hdr:0000000000019778                 db 0F4h
.eh_frame_hdr:0000000000019779                 db  96h
.eh_frame_hdr:000000000001977A                 db 0FFh
.eh_frame_hdr:000000000001977B                 db 0FFh
.eh_frame_hdr:000000000001977C                 db  54h ; T
.eh_frame_hdr:000000000001977D                 db  2Bh ; +
.eh_frame_hdr:000000000001977E                 db    0
.eh_frame_hdr:000000000001977F                 db    0
.eh_frame_hdr:0000000000019780                 db  54h ; T
.eh_frame_hdr:0000000000019781                 db  97h
.eh_frame_hdr:0000000000019782                 db 0FFh
.eh_frame_hdr:0000000000019783                 db 0FFh
.eh_frame_hdr:0000000000019784                 db  84h
.eh_frame_hdr:0000000000019785                 db  2Bh ; +
.eh_frame_hdr:0000000000019786                 db    0
.eh_frame_hdr:0000000000019787                 db    0
.eh_frame_hdr:0000000000019788                 db 0E4h
.eh_frame_hdr:0000000000019789                 db  97h
.eh_frame_hdr:000000000001978A                 db 0FFh
.eh_frame_hdr:000000000001978B                 db 0FFh
.eh_frame_hdr:000000000001978C                 db 0C4h
.eh_frame_hdr:000000000001978D                 db  2Bh ; +
.eh_frame_hdr:000000000001978E                 db    0
.eh_frame_hdr:000000000001978F                 db    0
.eh_frame_hdr:0000000000019790                 db 0E4h
.eh_frame_hdr:0000000000019791                 db  98h
.eh_frame_hdr:0000000000019792                 db 0FFh
.eh_frame_hdr:0000000000019793                 db 0FFh
.eh_frame_hdr:0000000000019794                 db    4
.eh_frame_hdr:0000000000019795                 db  2Ch ; ,
.eh_frame_hdr:0000000000019796                 db    0
.eh_frame_hdr:0000000000019797                 db    0
.eh_frame_hdr:0000000000019798                 db 0F4h
.eh_frame_hdr:0000000000019799                 db  98h
.eh_frame_hdr:000000000001979A                 db 0FFh
.eh_frame_hdr:000000000001979B                 db 0FFh
.eh_frame_hdr:000000000001979C                 db  1Ch
.eh_frame_hdr:000000000001979D                 db  2Ch ; ,
.eh_frame_hdr:000000000001979E                 db    0
.eh_frame_hdr:000000000001979F                 db    0
.eh_frame_hdr:00000000000197A0                 db    4
.eh_frame_hdr:00000000000197A1                 db  99h
.eh_frame_hdr:00000000000197A2                 db 0FFh
.eh_frame_hdr:00000000000197A3                 db 0FFh
.eh_frame_hdr:00000000000197A4                 db  34h ; 4
.eh_frame_hdr:00000000000197A5                 db  2Ch ; ,
.eh_frame_hdr:00000000000197A6                 db    0
.eh_frame_hdr:00000000000197A7                 db    0
.eh_frame_hdr:00000000000197A8                 db  24h ; $
.eh_frame_hdr:00000000000197A9                 db  99h
.eh_frame_hdr:00000000000197AA                 db 0FFh
.eh_frame_hdr:00000000000197AB                 db 0FFh
.eh_frame_hdr:00000000000197AC                 db  48h ; H
.eh_frame_hdr:00000000000197AD                 db  2Ch ; ,
.eh_frame_hdr:00000000000197AE                 db    0
.eh_frame_hdr:00000000000197AF                 db    0
.eh_frame_hdr:00000000000197B0                 db  54h ; T
.eh_frame_hdr:00000000000197B1                 db  99h
.eh_frame_hdr:00000000000197B2                 db 0FFh
.eh_frame_hdr:00000000000197B3                 db 0FFh
.eh_frame_hdr:00000000000197B4                 db  64h ; d
.eh_frame_hdr:00000000000197B5                 db  2Ch ; ,
.eh_frame_hdr:00000000000197B6                 db    0
.eh_frame_hdr:00000000000197B7                 db    0
.eh_frame_hdr:00000000000197B8                 db  64h ; d
.eh_frame_hdr:00000000000197B9                 db  99h
.eh_frame_hdr:00000000000197BA                 db 0FFh
.eh_frame_hdr:00000000000197BB                 db 0FFh
.eh_frame_hdr:00000000000197BC                 db  78h ; x
.eh_frame_hdr:00000000000197BD                 db  2Ch ; ,
.eh_frame_hdr:00000000000197BE                 db    0
.eh_frame_hdr:00000000000197BF                 db    0
.eh_frame_hdr:00000000000197C0                 db  84h
.eh_frame_hdr:00000000000197C1                 db  9Ah
.eh_frame_hdr:00000000000197C2                 db 0FFh
.eh_frame_hdr:00000000000197C3                 db 0FFh
.eh_frame_hdr:00000000000197C4                 db 0C4h
.eh_frame_hdr:00000000000197C5                 db  2Ch ; ,
.eh_frame_hdr:00000000000197C6                 db    0
.eh_frame_hdr:00000000000197C7                 db    0
.eh_frame_hdr:00000000000197C8                 db    4
.eh_frame_hdr:00000000000197C9                 db  9Bh
.eh_frame_hdr:00000000000197CA                 db 0FFh
.eh_frame_hdr:00000000000197CB                 db 0FFh
.eh_frame_hdr:00000000000197CC                 db 0F0h
.eh_frame_hdr:00000000000197CD                 db  2Ch ; ,
.eh_frame_hdr:00000000000197CE                 db    0
.eh_frame_hdr:00000000000197CF                 db    0
.eh_frame_hdr:00000000000197D0                 db  24h ; $
.eh_frame_hdr:00000000000197D1                 db  9Ch
.eh_frame_hdr:00000000000197D2                 db 0FFh
.eh_frame_hdr:00000000000197D3                 db 0FFh
.eh_frame_hdr:00000000000197D4                 db  50h ; P
.eh_frame_hdr:00000000000197D5                 db  2Dh ; -
.eh_frame_hdr:00000000000197D6                 db    0
.eh_frame_hdr:00000000000197D7                 db    0
.eh_frame_hdr:00000000000197D8                 db  94h
.eh_frame_hdr:00000000000197D9                 db  9Ch
.eh_frame_hdr:00000000000197DA                 db 0FFh
.eh_frame_hdr:00000000000197DB                 db 0FFh
.eh_frame_hdr:00000000000197DC                 db  9Ch
.eh_frame_hdr:00000000000197DD                 db  2Dh ; -
.eh_frame_hdr:00000000000197DE                 db    0
.eh_frame_hdr:00000000000197DF                 db    0
.eh_frame_hdr:00000000000197E0                 db 0E4h
.eh_frame_hdr:00000000000197E1                 db  9Ch
.eh_frame_hdr:00000000000197E2                 db 0FFh
.eh_frame_hdr:00000000000197E3                 db 0FFh
.eh_frame_hdr:00000000000197E4                 db 0DCh
.eh_frame_hdr:00000000000197E5                 db  2Dh ; -
.eh_frame_hdr:00000000000197E6                 db    0
.eh_frame_hdr:00000000000197E7                 db    0
.eh_frame_hdr:00000000000197E8                 db  64h ; d
.eh_frame_hdr:00000000000197E9                 db  9Dh
.eh_frame_hdr:00000000000197EA                 db 0FFh
.eh_frame_hdr:00000000000197EB                 db 0FFh
.eh_frame_hdr:00000000000197EC                 db  2Ch ; ,
.eh_frame_hdr:00000000000197ED                 db  2Eh ; .
.eh_frame_hdr:00000000000197EE                 db    0
.eh_frame_hdr:00000000000197EF                 db    0
.eh_frame_hdr:00000000000197F0                 db    4
.eh_frame_hdr:00000000000197F1                 db  9Eh
.eh_frame_hdr:00000000000197F2                 db 0FFh
.eh_frame_hdr:00000000000197F3                 db 0FFh
.eh_frame_hdr:00000000000197F4                 db  7Ch ; |
.eh_frame_hdr:00000000000197F5                 db  2Eh ; .
.eh_frame_hdr:00000000000197F6                 db    0
.eh_frame_hdr:00000000000197F7                 db    0
.eh_frame_hdr:00000000000197F8                 db  14h
.eh_frame_hdr:00000000000197F9                 db  9Eh
.eh_frame_hdr:00000000000197FA                 db 0FFh
.eh_frame_hdr:00000000000197FB                 db 0FFh
.eh_frame_hdr:00000000000197FC                 db  90h
.eh_frame_hdr:00000000000197FD                 db  2Eh ; .
.eh_frame_hdr:00000000000197FE                 db    0
.eh_frame_hdr:00000000000197FF                 db    0
.eh_frame_hdr:0000000000019800                 db  64h ; d
.eh_frame_hdr:0000000000019801                 db  9Eh
.eh_frame_hdr:0000000000019802                 db 0FFh
.eh_frame_hdr:0000000000019803                 db 0FFh
.eh_frame_hdr:0000000000019804                 db 0ACh
.eh_frame_hdr:0000000000019805                 db  2Eh ; .
.eh_frame_hdr:0000000000019806                 db    0
.eh_frame_hdr:0000000000019807                 db    0
.eh_frame_hdr:0000000000019808                 db 0C4h
.eh_frame_hdr:0000000000019809                 db  9Eh
.eh_frame_hdr:000000000001980A                 db 0FFh
.eh_frame_hdr:000000000001980B                 db 0FFh
.eh_frame_hdr:000000000001980C                 db 0CCh
.eh_frame_hdr:000000000001980D                 db  2Eh ; .
.eh_frame_hdr:000000000001980E                 db    0
.eh_frame_hdr:000000000001980F                 db    0
.eh_frame_hdr:0000000000019810                 db    4
.eh_frame_hdr:0000000000019811                 db  9Fh
.eh_frame_hdr:0000000000019812                 db 0FFh
.eh_frame_hdr:0000000000019813                 db 0FFh
.eh_frame_hdr:0000000000019814                 db 0E4h
.eh_frame_hdr:0000000000019815                 db  2Eh ; .
.eh_frame_hdr:0000000000019816                 db    0
.eh_frame_hdr:0000000000019817                 db    0
.eh_frame_hdr:0000000000019818                 db  44h ; D
.eh_frame_hdr:0000000000019819                 db  9Fh
.eh_frame_hdr:000000000001981A                 db 0FFh
.eh_frame_hdr:000000000001981B                 db 0FFh
.eh_frame_hdr:000000000001981C                 db    4
.eh_frame_hdr:000000000001981D                 db  2Fh ; /
.eh_frame_hdr:000000000001981E                 db    0
.eh_frame_hdr:000000000001981F                 db    0
.eh_frame_hdr:0000000000019820                 db  64h ; d
.eh_frame_hdr:0000000000019821                 db 0A1h
.eh_frame_hdr:0000000000019822                 db 0FFh
.eh_frame_hdr:0000000000019823                 db 0FFh
.eh_frame_hdr:0000000000019824                 db  54h ; T
.eh_frame_hdr:0000000000019825                 db  2Fh ; /
.eh_frame_hdr:0000000000019826                 db    0
.eh_frame_hdr:0000000000019827                 db    0
.eh_frame_hdr:0000000000019828                 db 0D4h
.eh_frame_hdr:0000000000019829                 db 0A1h
.eh_frame_hdr:000000000001982A                 db 0FFh
.eh_frame_hdr:000000000001982B                 db 0FFh
.eh_frame_hdr:000000000001982C                 db  74h ; t
.eh_frame_hdr:000000000001982D                 db  2Fh ; /
.eh_frame_hdr:000000000001982E                 db    0
.eh_frame_hdr:000000000001982F                 db    0
.eh_frame_hdr:0000000000019830                 db    4
.eh_frame_hdr:0000000000019831                 db 0A2h
.eh_frame_hdr:0000000000019832                 db 0FFh
.eh_frame_hdr:0000000000019833                 db 0FFh
.eh_frame_hdr:0000000000019834                 db  90h
.eh_frame_hdr:0000000000019835                 db  2Fh ; /
.eh_frame_hdr:0000000000019836                 db    0
.eh_frame_hdr:0000000000019837                 db    0
.eh_frame_hdr:0000000000019838                 db  44h ; D
.eh_frame_hdr:0000000000019839                 db 0A2h
.eh_frame_hdr:000000000001983A                 db 0FFh
.eh_frame_hdr:000000000001983B                 db 0FFh
.eh_frame_hdr:000000000001983C                 db 0B0h
.eh_frame_hdr:000000000001983D                 db  2Fh ; /
.eh_frame_hdr:000000000001983E                 db    0
.eh_frame_hdr:000000000001983F                 db    0
.eh_frame_hdr:0000000000019840                 db  54h ; T
.eh_frame_hdr:0000000000019841                 db 0A2h
.eh_frame_hdr:0000000000019842                 db 0FFh
.eh_frame_hdr:0000000000019843                 db 0FFh
.eh_frame_hdr:0000000000019844                 db 0C4h
.eh_frame_hdr:0000000000019845                 db  2Fh ; /
.eh_frame_hdr:0000000000019846                 db    0
.eh_frame_hdr:0000000000019847                 db    0
.eh_frame_hdr:0000000000019848                 db  74h ; t
.eh_frame_hdr:0000000000019849                 db 0A3h
.eh_frame_hdr:000000000001984A                 db 0FFh
.eh_frame_hdr:000000000001984B                 db 0FFh
.eh_frame_hdr:000000000001984C                 db  10h
.eh_frame_hdr:000000000001984D                 db  30h ; 0
.eh_frame_hdr:000000000001984E                 db    0
.eh_frame_hdr:000000000001984F                 db    0
.eh_frame_hdr:0000000000019850                 db  94h
.eh_frame_hdr:0000000000019851                 db 0A3h
.eh_frame_hdr:0000000000019852                 db 0FFh
.eh_frame_hdr:0000000000019853                 db 0FFh
.eh_frame_hdr:0000000000019854                 db  2Ch ; ,
.eh_frame_hdr:0000000000019855                 db  30h ; 0
.eh_frame_hdr:0000000000019856                 db    0
.eh_frame_hdr:0000000000019857                 db    0
.eh_frame_hdr:0000000000019858                 db 0F4h
.eh_frame_hdr:0000000000019859                 db 0A3h
.eh_frame_hdr:000000000001985A                 db 0FFh
.eh_frame_hdr:000000000001985B                 db 0FFh
.eh_frame_hdr:000000000001985C                 db  64h ; d
.eh_frame_hdr:000000000001985D                 db  30h ; 0
.eh_frame_hdr:000000000001985E                 db    0
.eh_frame_hdr:000000000001985F                 db    0
.eh_frame_hdr:0000000000019860                 db  54h ; T
.eh_frame_hdr:0000000000019861                 db 0A4h
.eh_frame_hdr:0000000000019862                 db 0FFh
.eh_frame_hdr:0000000000019863                 db 0FFh
.eh_frame_hdr:0000000000019864                 db  84h
.eh_frame_hdr:0000000000019865                 db  30h ; 0
.eh_frame_hdr:0000000000019866                 db    0
.eh_frame_hdr:0000000000019867                 db    0
.eh_frame_hdr:0000000000019868                 db  84h
.eh_frame_hdr:0000000000019869                 db 0A7h
.eh_frame_hdr:000000000001986A                 db 0FFh
.eh_frame_hdr:000000000001986B                 db 0FFh
.eh_frame_hdr:000000000001986C                 db 0D0h
.eh_frame_hdr:000000000001986D                 db  30h ; 0
.eh_frame_hdr:000000000001986E                 db    0
.eh_frame_hdr:000000000001986F                 db    0
.eh_frame_hdr:0000000000019870                 db  94h
.eh_frame_hdr:0000000000019871                 db 0A7h
.eh_frame_hdr:0000000000019872                 db 0FFh
.eh_frame_hdr:0000000000019873                 db 0FFh
.eh_frame_hdr:0000000000019874                 db 0E4h
.eh_frame_hdr:0000000000019875                 db  30h ; 0
.eh_frame_hdr:0000000000019876                 db    0
.eh_frame_hdr:0000000000019877                 db    0
.eh_frame_hdr:0000000000019878                 db 0A4h
.eh_frame_hdr:0000000000019879                 db 0A7h
.eh_frame_hdr:000000000001987A                 db 0FFh
.eh_frame_hdr:000000000001987B                 db 0FFh
.eh_frame_hdr:000000000001987C                 db 0F8h
.eh_frame_hdr:000000000001987D                 db  30h ; 0
.eh_frame_hdr:000000000001987E                 db    0
.eh_frame_hdr:000000000001987F                 db    0
.eh_frame_hdr:0000000000019880                 db  44h ; D
.eh_frame_hdr:0000000000019881                 db 0A9h
.eh_frame_hdr:0000000000019882                 db 0FFh
.eh_frame_hdr:0000000000019883                 db 0FFh
.eh_frame_hdr:0000000000019884                 db  5Ch ; \
.eh_frame_hdr:0000000000019885                 db  31h ; 1
.eh_frame_hdr:0000000000019886                 db    0
.eh_frame_hdr:0000000000019887                 db    0
.eh_frame_hdr:0000000000019888                 db  94h
.eh_frame_hdr:0000000000019889                 db 0A9h
.eh_frame_hdr:000000000001988A                 db 0FFh
.eh_frame_hdr:000000000001988B                 db 0FFh
.eh_frame_hdr:000000000001988C                 db  94h
.eh_frame_hdr:000000000001988D                 db  31h ; 1
.eh_frame_hdr:000000000001988E                 db    0
.eh_frame_hdr:000000000001988F                 db    0
.eh_frame_hdr:0000000000019890                 db  24h ; $
.eh_frame_hdr:0000000000019891                 db 0ACh
.eh_frame_hdr:0000000000019892                 db 0FFh
.eh_frame_hdr:0000000000019893                 db 0FFh
.eh_frame_hdr:0000000000019894                 db 0A8h
.eh_frame_hdr:0000000000019895                 db  31h ; 1
.eh_frame_hdr:0000000000019896                 db    0
.eh_frame_hdr:0000000000019897                 db    0
.eh_frame_hdr:0000000000019898                 db  64h ; d
.eh_frame_hdr:0000000000019899                 db 0AEh
.eh_frame_hdr:000000000001989A                 db 0FFh
.eh_frame_hdr:000000000001989B                 db 0FFh
.eh_frame_hdr:000000000001989C                 db 0DCh
.eh_frame_hdr:000000000001989D                 db  31h ; 1
.eh_frame_hdr:000000000001989E                 db    0
.eh_frame_hdr:000000000001989F                 db    0
.eh_frame_hdr:00000000000198A0                 db  74h ; t
.eh_frame_hdr:00000000000198A1                 db 0AEh
.eh_frame_hdr:00000000000198A2                 db 0FFh
.eh_frame_hdr:00000000000198A3                 db 0FFh
.eh_frame_hdr:00000000000198A4                 db 0F4h
.eh_frame_hdr:00000000000198A5                 db  31h ; 1
.eh_frame_hdr:00000000000198A6                 db    0
.eh_frame_hdr:00000000000198A7                 db    0
.eh_frame_hdr:00000000000198A8                 db 0F4h
.eh_frame_hdr:00000000000198A9                 db 0AEh
.eh_frame_hdr:00000000000198AA                 db 0FFh
.eh_frame_hdr:00000000000198AB                 db 0FFh
.eh_frame_hdr:00000000000198AC                 db  2Ch ; ,
.eh_frame_hdr:00000000000198AD                 db  32h ; 2
.eh_frame_hdr:00000000000198AE                 db    0
.eh_frame_hdr:00000000000198AF                 db    0
.eh_frame_hdr:00000000000198B0                 db  74h ; t
.eh_frame_hdr:00000000000198B1                 db 0B1h
.eh_frame_hdr:00000000000198B2                 db 0FFh
.eh_frame_hdr:00000000000198B3                 db 0FFh
.eh_frame_hdr:00000000000198B4                 db  64h ; d
.eh_frame_hdr:00000000000198B5                 db  32h ; 2
.eh_frame_hdr:00000000000198B6                 db    0
.eh_frame_hdr:00000000000198B7                 db    0
.eh_frame_hdr:00000000000198B8                 db  84h
.eh_frame_hdr:00000000000198B9                 db 0B1h
.eh_frame_hdr:00000000000198BA                 db 0FFh
.eh_frame_hdr:00000000000198BB                 db 0FFh
.eh_frame_hdr:00000000000198BC                 db  7Ch ; |
.eh_frame_hdr:00000000000198BD                 db  32h ; 2
.eh_frame_hdr:00000000000198BE                 db    0
.eh_frame_hdr:00000000000198BF                 db    0
.eh_frame_hdr:00000000000198C0                 db 0A4h
.eh_frame_hdr:00000000000198C1                 db 0C2h
.eh_frame_hdr:00000000000198C2                 db 0FFh
.eh_frame_hdr:00000000000198C3                 db 0FFh
.eh_frame_hdr:00000000000198C4                 db 0ACh
.eh_frame_hdr:00000000000198C5                 db  32h ; 2
.eh_frame_hdr:00000000000198C6                 db    0
.eh_frame_hdr:00000000000198C7                 db    0
.eh_frame_hdr:00000000000198C8                 db  44h ; D
.eh_frame_hdr:00000000000198C9                 db 0C3h
.eh_frame_hdr:00000000000198CA                 db 0FFh
.eh_frame_hdr:00000000000198CB                 db 0FFh
.eh_frame_hdr:00000000000198CC                 db 0DCh
.eh_frame_hdr:00000000000198CD                 db  32h ; 2
.eh_frame_hdr:00000000000198CE                 db    0
.eh_frame_hdr:00000000000198CF                 db    0
.eh_frame_hdr:00000000000198D0                 db  44h ; D
.eh_frame_hdr:00000000000198D1                 db 0C5h
.eh_frame_hdr:00000000000198D2                 db 0FFh
.eh_frame_hdr:00000000000198D3                 db 0FFh
.eh_frame_hdr:00000000000198D4                 db 0F4h
.eh_frame_hdr:00000000000198D5                 db  32h ; 2
.eh_frame_hdr:00000000000198D6                 db    0
.eh_frame_hdr:00000000000198D7                 db    0
.eh_frame_hdr:00000000000198D8                 db  34h ; 4
.eh_frame_hdr:00000000000198D9                 db 0D2h
.eh_frame_hdr:00000000000198DA                 db 0FFh
.eh_frame_hdr:00000000000198DB                 db 0FFh
.eh_frame_hdr:00000000000198DC                 db  44h ; D
.eh_frame_hdr:00000000000198DD                 db  33h ; 3
.eh_frame_hdr:00000000000198DE                 db    0
.eh_frame_hdr:00000000000198DF                 db    0
.eh_frame_hdr:00000000000198E0                 db 0A4h
.eh_frame_hdr:00000000000198E1                 db 0D2h
.eh_frame_hdr:00000000000198E2                 db 0FFh
.eh_frame_hdr:00000000000198E3                 db 0FFh
.eh_frame_hdr:00000000000198E4                 db  8Ch
.eh_frame_hdr:00000000000198E5                 db  33h ; 3
.eh_frame_hdr:00000000000198E6                 db    0
.eh_frame_hdr:00000000000198E7                 db    0
.eh_frame_hdr:00000000000198E8                 db 0B4h
.eh_frame_hdr:00000000000198E9                 db 0D2h
.eh_frame_hdr:00000000000198EA                 db 0FFh
.eh_frame_hdr:00000000000198EB                 db 0FFh
.eh_frame_hdr:00000000000198EC                 db 0A4h
.eh_frame_hdr:00000000000198ED                 db  33h ; 3
.eh_frame_hdr:00000000000198EE                 db    0
.eh_frame_hdr:00000000000198EF                 db    0
.eh_frame_hdr:00000000000198EF _eh_frame_hdr   ends
.eh_frame_hdr:00000000000198EF
.eh_frame:00000000000198F0 ; ===========================================================================
.eh_frame:00000000000198F0
.eh_frame:00000000000198F0 ; Segment type: Pure data
.eh_frame:00000000000198F0 ; Segment permissions: Read
.eh_frame:00000000000198F0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000198F0                 assume cs:_eh_frame
.eh_frame:00000000000198F0                 ;org 198F0h
.eh_frame:00000000000198F0                 db  14h
.eh_frame:00000000000198F1                 db    0
.eh_frame:00000000000198F2                 db    0
.eh_frame:00000000000198F3                 db    0
.eh_frame:00000000000198F4                 db    0
.eh_frame:00000000000198F5                 db    0
.eh_frame:00000000000198F6                 db    0
.eh_frame:00000000000198F7                 db    0
.eh_frame:00000000000198F8                 db    1
.eh_frame:00000000000198F9                 db  7Ah ; z
.eh_frame:00000000000198FA                 db  52h ; R
.eh_frame:00000000000198FB                 db    0
.eh_frame:00000000000198FC                 db    1
.eh_frame:00000000000198FD                 db  78h ; x
.eh_frame:00000000000198FE                 db  10h
.eh_frame:00000000000198FF                 db    1
.eh_frame:0000000000019900                 db  1Bh
.eh_frame:0000000000019901                 db  0Ch
.eh_frame:0000000000019902                 db    7
.eh_frame:0000000000019903                 db    8
.eh_frame:0000000000019904                 db  90h
.eh_frame:0000000000019905                 db    1
.eh_frame:0000000000019906                 db    7
.eh_frame:0000000000019907                 db  10h
.eh_frame:0000000000019908                 db  14h
.eh_frame:0000000000019909                 db    0
.eh_frame:000000000001990A                 db    0
.eh_frame:000000000001990B                 db    0
.eh_frame:000000000001990C                 db  1Ch
.eh_frame:000000000001990D                 db    0
.eh_frame:000000000001990E                 db    0
.eh_frame:000000000001990F                 db    0
.eh_frame:0000000000019910                 db  20h
.eh_frame:0000000000019911                 db 0A5h
.eh_frame:0000000000019912                 db 0FEh
.eh_frame:0000000000019913                 db 0FFh
.eh_frame:0000000000019914                 db  2Bh ; +
.eh_frame:0000000000019915                 db    0
.eh_frame:0000000000019916                 db    0
.eh_frame:0000000000019917                 db    0
.eh_frame:0000000000019918                 db    0
.eh_frame:0000000000019919                 db    0
.eh_frame:000000000001991A                 db    0
.eh_frame:000000000001991B                 db    0
.eh_frame:000000000001991C                 db    0
.eh_frame:000000000001991D                 db    0
.eh_frame:000000000001991E                 db    0
.eh_frame:000000000001991F                 db    0
.eh_frame:0000000000019920                 db  14h
.eh_frame:0000000000019921                 db    0
.eh_frame:0000000000019922                 db    0
.eh_frame:0000000000019923                 db    0
.eh_frame:0000000000019924                 db    0
.eh_frame:0000000000019925                 db    0
.eh_frame:0000000000019926                 db    0
.eh_frame:0000000000019927                 db    0
.eh_frame:0000000000019928                 db    1
.eh_frame:0000000000019929                 db  7Ah ; z
.eh_frame:000000000001992A                 db  52h ; R
.eh_frame:000000000001992B                 db    0
.eh_frame:000000000001992C                 db    1
.eh_frame:000000000001992D                 db  78h ; x
.eh_frame:000000000001992E                 db  10h
.eh_frame:000000000001992F                 db    1
.eh_frame:0000000000019930                 db  1Bh
.eh_frame:0000000000019931                 db  0Ch
.eh_frame:0000000000019932                 db    7
.eh_frame:0000000000019933                 db    8
.eh_frame:0000000000019934                 db  90h
.eh_frame:0000000000019935                 db    1
.eh_frame:0000000000019936                 db    0
.eh_frame:0000000000019937                 db    0
.eh_frame:0000000000019938                 db  24h ; $
.eh_frame:0000000000019939                 db    0
.eh_frame:000000000001993A                 db    0
.eh_frame:000000000001993B                 db    0
.eh_frame:000000000001993C                 db  1Ch
.eh_frame:000000000001993D                 db    0
.eh_frame:000000000001993E                 db    0
.eh_frame:000000000001993F                 db    0
.eh_frame:0000000000019940                 db 0A0h
.eh_frame:0000000000019941                 db  8Fh
.eh_frame:0000000000019942                 db 0FEh
.eh_frame:0000000000019943                 db 0FFh
.eh_frame:0000000000019944                 db 0F0h
.eh_frame:0000000000019945                 db    7
.eh_frame:0000000000019946                 db    0
.eh_frame:0000000000019947                 db    0
.eh_frame:0000000000019948                 db    0
.eh_frame:0000000000019949                 db  0Eh
.eh_frame:000000000001994A                 db  10h
.eh_frame:000000000001994B                 db  46h ; F
.eh_frame:000000000001994C                 db  0Eh
.eh_frame:000000000001994D                 db  18h
.eh_frame:000000000001994E                 db  4Ah ; J
.eh_frame:000000000001994F                 db  0Fh
.eh_frame:0000000000019950                 db  0Bh
.eh_frame:0000000000019951                 db  77h ; w
.eh_frame:0000000000019952                 db    8
.eh_frame:0000000000019953                 db  80h
.eh_frame:0000000000019954                 db    0
.eh_frame:0000000000019955                 db  3Fh ; ?
.eh_frame:0000000000019956                 db  1Ah
.eh_frame:0000000000019957                 db  3Bh ; ;
.eh_frame:0000000000019958                 db  2Ah ; *
.eh_frame:0000000000019959                 db  33h ; 3
.eh_frame:000000000001995A                 db  24h ; $
.eh_frame:000000000001995B                 db  22h ; "
.eh_frame:000000000001995C                 db    0
.eh_frame:000000000001995D                 db    0
.eh_frame:000000000001995E                 db    0
.eh_frame:000000000001995F                 db    0
.eh_frame:0000000000019960                 db  14h
.eh_frame:0000000000019961                 db    0
.eh_frame:0000000000019962                 db    0
.eh_frame:0000000000019963                 db    0
.eh_frame:0000000000019964                 db  44h ; D
.eh_frame:0000000000019965                 db    0
.eh_frame:0000000000019966                 db    0
.eh_frame:0000000000019967                 db    0
.eh_frame:0000000000019968                 db  68h ; h
.eh_frame:0000000000019969                 db  97h
.eh_frame:000000000001996A                 db 0FEh
.eh_frame:000000000001996B                 db 0FFh
.eh_frame:000000000001996C                 db  10h
.eh_frame:000000000001996D                 db    0
.eh_frame:000000000001996E                 db    0
.eh_frame:000000000001996F                 db    0
.eh_frame:0000000000019970                 db    0
.eh_frame:0000000000019971                 db    0
.eh_frame:0000000000019972                 db    0
.eh_frame:0000000000019973                 db    0
.eh_frame:0000000000019974                 db    0
.eh_frame:0000000000019975                 db    0
.eh_frame:0000000000019976                 db    0
.eh_frame:0000000000019977                 db    0
.eh_frame:0000000000019978                 db  38h ; 8
.eh_frame:0000000000019979                 db    0
.eh_frame:000000000001997A                 db    0
.eh_frame:000000000001997B                 db    0
.eh_frame:000000000001997C                 db  5Ch ; \
.eh_frame:000000000001997D                 db    0
.eh_frame:000000000001997E                 db    0
.eh_frame:000000000001997F                 db    0
.eh_frame:0000000000019980                 db 0C0h
.eh_frame:0000000000019981                 db 0A5h
.eh_frame:0000000000019982                 db 0FEh
.eh_frame:0000000000019983                 db 0FFh
.eh_frame:0000000000019984                 db 0D2h
.eh_frame:0000000000019985                 db    1
.eh_frame:0000000000019986                 db    0
.eh_frame:0000000000019987                 db    0
.eh_frame:0000000000019988                 db    0
.eh_frame:0000000000019989                 db  42h ; B
.eh_frame:000000000001998A                 db  0Eh
.eh_frame:000000000001998B                 db  10h
.eh_frame:000000000001998C                 db  8Dh
.eh_frame:000000000001998D                 db    2
.eh_frame:000000000001998E                 db  42h ; B
.eh_frame:000000000001998F                 db  0Eh
.eh_frame:0000000000019990                 db  18h
.eh_frame:0000000000019991                 db  8Ch
.eh_frame:0000000000019992                 db    3
.eh_frame:0000000000019993                 db  41h ; A
.eh_frame:0000000000019994                 db  0Eh
.eh_frame:0000000000019995                 db  20h
.eh_frame:0000000000019996                 db  86h
.eh_frame:0000000000019997                 db    4
.eh_frame:0000000000019998                 db  41h ; A
.eh_frame:0000000000019999                 db  0Eh
.eh_frame:000000000001999A                 db  28h ; (
.eh_frame:000000000001999B                 db  83h
.eh_frame:000000000001999C                 db    5
.eh_frame:000000000001999D                 db  47h ; G
.eh_frame:000000000001999E                 db  0Eh
.eh_frame:000000000001999F                 db  50h ; P
.eh_frame:00000000000199A0                 db    2
.eh_frame:00000000000199A1                 db 0B4h
.eh_frame:00000000000199A2                 db  0Ah
.eh_frame:00000000000199A3                 db  0Eh
.eh_frame:00000000000199A4                 db  28h ; (
.eh_frame:00000000000199A5                 db  41h ; A
.eh_frame:00000000000199A6                 db  0Eh
.eh_frame:00000000000199A7                 db  20h
.eh_frame:00000000000199A8                 db  41h ; A
.eh_frame:00000000000199A9                 db  0Eh
.eh_frame:00000000000199AA                 db  18h
.eh_frame:00000000000199AB                 db  42h ; B
.eh_frame:00000000000199AC                 db  0Eh
.eh_frame:00000000000199AD                 db  10h
.eh_frame:00000000000199AE                 db  42h ; B
.eh_frame:00000000000199AF                 db  0Eh
.eh_frame:00000000000199B0                 db    8
.eh_frame:00000000000199B1                 db  49h ; I
.eh_frame:00000000000199B2                 db  0Bh
.eh_frame:00000000000199B3                 db    0
.eh_frame:00000000000199B4                 db  34h ; 4
.eh_frame:00000000000199B5                 db    0
.eh_frame:00000000000199B6                 db    0
.eh_frame:00000000000199B7                 db    0
.eh_frame:00000000000199B8                 db  98h
.eh_frame:00000000000199B9                 db    0
.eh_frame:00000000000199BA                 db    0
.eh_frame:00000000000199BB                 db    0
.eh_frame:00000000000199BC                 db  64h ; d
.eh_frame:00000000000199BD                 db 0A7h
.eh_frame:00000000000199BE                 db 0FEh
.eh_frame:00000000000199BF                 db 0FFh
.eh_frame:00000000000199C0                 db  65h ; e
.eh_frame:00000000000199C1                 db    0
.eh_frame:00000000000199C2                 db    0
.eh_frame:00000000000199C3                 db    0
.eh_frame:00000000000199C4                 db    0
.eh_frame:00000000000199C5                 db  41h ; A
.eh_frame:00000000000199C6                 db  0Eh
.eh_frame:00000000000199C7                 db  10h
.eh_frame:00000000000199C8                 db  86h
.eh_frame:00000000000199C9                 db    2
.eh_frame:00000000000199CA                 db  41h ; A
.eh_frame:00000000000199CB                 db  0Eh
.eh_frame:00000000000199CC                 db  18h
.eh_frame:00000000000199CD                 db  83h
.eh_frame:00000000000199CE                 db    3
.eh_frame:00000000000199CF                 db  58h ; X
.eh_frame:00000000000199D0                 db  0Eh
.eh_frame:00000000000199D1                 db  20h
.eh_frame:00000000000199D2                 db  4Fh ; O
.eh_frame:00000000000199D3                 db  0Eh
.eh_frame:00000000000199D4                 db  28h ; (
.eh_frame:00000000000199D5                 db  41h ; A
.eh_frame:00000000000199D6                 db  0Eh
.eh_frame:00000000000199D7                 db  30h ; 0
.eh_frame:00000000000199D8                 db  47h ; G
.eh_frame:00000000000199D9                 db  0Eh
.eh_frame:00000000000199DA                 db  38h ; 8
.eh_frame:00000000000199DB                 db  47h ; G
.eh_frame:00000000000199DC                 db  0Eh
.eh_frame:00000000000199DD                 db  40h ; @
.eh_frame:00000000000199DE                 db  4Ch ; L
.eh_frame:00000000000199DF                 db  0Eh
.eh_frame:00000000000199E0                 db  20h
.eh_frame:00000000000199E1                 db  5Ch ; \
.eh_frame:00000000000199E2                 db  0Eh
.eh_frame:00000000000199E3                 db  18h
.eh_frame:00000000000199E4                 db  43h ; C
.eh_frame:00000000000199E5                 db  0Eh
.eh_frame:00000000000199E6                 db  10h
.eh_frame:00000000000199E7                 db  41h ; A
.eh_frame:00000000000199E8                 db  0Eh
.eh_frame:00000000000199E9                 db    8
.eh_frame:00000000000199EA                 db    0
.eh_frame:00000000000199EB                 db    0
.eh_frame:00000000000199EC                 db  18h
.eh_frame:00000000000199ED                 db    0
.eh_frame:00000000000199EE                 db    0
.eh_frame:00000000000199EF                 db    0
.eh_frame:00000000000199F0                 db 0D0h
.eh_frame:00000000000199F1                 db    0
.eh_frame:00000000000199F2                 db    0
.eh_frame:00000000000199F3                 db    0
.eh_frame:00000000000199F4                 db  9Ch
.eh_frame:00000000000199F5                 db 0A7h
.eh_frame:00000000000199F6                 db 0FEh
.eh_frame:00000000000199F7                 db 0FFh
.eh_frame:00000000000199F8                 db  39h ; 9
.eh_frame:00000000000199F9                 db    0
.eh_frame:00000000000199FA                 db    0
.eh_frame:00000000000199FB                 db    0
.eh_frame:00000000000199FC                 db    0
.eh_frame:00000000000199FD                 db  41h ; A
.eh_frame:00000000000199FE                 db  0Eh
.eh_frame:00000000000199FF                 db  10h
.eh_frame:0000000000019A00                 db  83h
.eh_frame:0000000000019A01                 db    2
.eh_frame:0000000000019A02                 db  71h ; q
.eh_frame:0000000000019A03                 db  0Eh
.eh_frame:0000000000019A04                 db    8
.eh_frame:0000000000019A05                 db    0
.eh_frame:0000000000019A06                 db    0
.eh_frame:0000000000019A07                 db    0
.eh_frame:0000000000019A08                 db  10h
.eh_frame:0000000000019A09                 db    0
.eh_frame:0000000000019A0A                 db    0
.eh_frame:0000000000019A0B                 db    0
.eh_frame:0000000000019A0C                 db 0ECh
.eh_frame:0000000000019A0D                 db    0
.eh_frame:0000000000019A0E                 db    0
.eh_frame:0000000000019A0F                 db    0
.eh_frame:0000000000019A10                 db 0C0h
.eh_frame:0000000000019A11                 db 0A7h
.eh_frame:0000000000019A12                 db 0FEh
.eh_frame:0000000000019A13                 db 0FFh
.eh_frame:0000000000019A14                 db  12h
.eh_frame:0000000000019A15                 db    0
.eh_frame:0000000000019A16                 db    0
.eh_frame:0000000000019A17                 db    0
.eh_frame:0000000000019A18                 db    0
.eh_frame:0000000000019A19                 db    0
.eh_frame:0000000000019A1A                 db    0
.eh_frame:0000000000019A1B                 db    0
.eh_frame:0000000000019A1C                 db  3Ch ; <
.eh_frame:0000000000019A1D                 db    0
.eh_frame:0000000000019A1E                 db    0
.eh_frame:0000000000019A1F                 db    0
.eh_frame:0000000000019A20                 db    0
.eh_frame:0000000000019A21                 db    1
.eh_frame:0000000000019A22                 db    0
.eh_frame:0000000000019A23                 db    0
.eh_frame:0000000000019A24                 db 0CCh
.eh_frame:0000000000019A25                 db 0A7h
.eh_frame:0000000000019A26                 db 0FEh
.eh_frame:0000000000019A27                 db 0FFh
.eh_frame:0000000000019A28                 db  61h ; a
.eh_frame:0000000000019A29                 db    0
.eh_frame:0000000000019A2A                 db    0
.eh_frame:0000000000019A2B                 db    0
.eh_frame:0000000000019A2C                 db    0
.eh_frame:0000000000019A2D                 db  42h ; B
.eh_frame:0000000000019A2E                 db  0Eh
.eh_frame:0000000000019A2F                 db  10h
.eh_frame:0000000000019A30                 db  8Ch
.eh_frame:0000000000019A31                 db    2
.eh_frame:0000000000019A32                 db  41h ; A
.eh_frame:0000000000019A33                 db  0Eh
.eh_frame:0000000000019A34                 db  18h
.eh_frame:0000000000019A35                 db  86h
.eh_frame:0000000000019A36                 db    3
.eh_frame:0000000000019A37                 db  44h ; D
.eh_frame:0000000000019A38                 db  0Eh
.eh_frame:0000000000019A39                 db  20h
.eh_frame:0000000000019A3A                 db  83h
.eh_frame:0000000000019A3B                 db    4
.eh_frame:0000000000019A3C                 db  4Ah ; J
.eh_frame:0000000000019A3D                 db  0Eh
.eh_frame:0000000000019A3E                 db  30h ; 0
.eh_frame:0000000000019A3F                 db  6Ch ; l
.eh_frame:0000000000019A40                 db  0Ah
.eh_frame:0000000000019A41                 db  0Eh
.eh_frame:0000000000019A42                 db  20h
.eh_frame:0000000000019A43                 db  41h ; A
.eh_frame:0000000000019A44                 db  0Eh
.eh_frame:0000000000019A45                 db  18h
.eh_frame:0000000000019A46                 db  41h ; A
.eh_frame:0000000000019A47                 db  0Eh
.eh_frame:0000000000019A48                 db  10h
.eh_frame:0000000000019A49                 db  42h ; B
.eh_frame:0000000000019A4A                 db  0Eh
.eh_frame:0000000000019A4B                 db    8
.eh_frame:0000000000019A4C                 db  47h ; G
.eh_frame:0000000000019A4D                 db  0Bh
.eh_frame:0000000000019A4E                 db  54h ; T
.eh_frame:0000000000019A4F                 db  0Eh
.eh_frame:0000000000019A50                 db  20h
.eh_frame:0000000000019A51                 db  41h ; A
.eh_frame:0000000000019A52                 db  0Eh
.eh_frame:0000000000019A53                 db  18h
.eh_frame:0000000000019A54                 db  41h ; A
.eh_frame:0000000000019A55                 db  0Eh
.eh_frame:0000000000019A56                 db  10h
.eh_frame:0000000000019A57                 db  42h ; B
.eh_frame:0000000000019A58                 db  0Eh
.eh_frame:0000000000019A59                 db    8
.eh_frame:0000000000019A5A                 db    0
.eh_frame:0000000000019A5B                 db    0
.eh_frame:0000000000019A5C                 db  48h ; H
.eh_frame:0000000000019A5D                 db    0
.eh_frame:0000000000019A5E                 db    0
.eh_frame:0000000000019A5F                 db    0
.eh_frame:0000000000019A60                 db  40h ; @
.eh_frame:0000000000019A61                 db    1
.eh_frame:0000000000019A62                 db    0
.eh_frame:0000000000019A63                 db    0
.eh_frame:0000000000019A64                 db 0FCh
.eh_frame:0000000000019A65                 db 0A7h
.eh_frame:0000000000019A66                 db 0FEh
.eh_frame:0000000000019A67                 db 0FFh
.eh_frame:0000000000019A68                 db 0BAh
.eh_frame:0000000000019A69                 db    6
.eh_frame:0000000000019A6A                 db    0
.eh_frame:0000000000019A6B                 db    0
.eh_frame:0000000000019A6C                 db    0
.eh_frame:0000000000019A6D                 db  42h ; B
.eh_frame:0000000000019A6E                 db  0Eh
.eh_frame:0000000000019A6F                 db  10h
.eh_frame:0000000000019A70                 db  8Fh
.eh_frame:0000000000019A71                 db    2
.eh_frame:0000000000019A72                 db  42h ; B
.eh_frame:0000000000019A73                 db  0Eh
.eh_frame:0000000000019A74                 db  18h
.eh_frame:0000000000019A75                 db  8Eh
.eh_frame:0000000000019A76                 db    3
.eh_frame:0000000000019A77                 db  42h ; B
.eh_frame:0000000000019A78                 db  0Eh
.eh_frame:0000000000019A79                 db  20h
.eh_frame:0000000000019A7A                 db  8Dh
.eh_frame:0000000000019A7B                 db    4
.eh_frame:0000000000019A7C                 db  42h ; B
.eh_frame:0000000000019A7D                 db  0Eh
.eh_frame:0000000000019A7E                 db  28h ; (
.eh_frame:0000000000019A7F                 db  8Ch
.eh_frame:0000000000019A80                 db    5
.eh_frame:0000000000019A81                 db  44h ; D
.eh_frame:0000000000019A82                 db  0Eh
.eh_frame:0000000000019A83                 db  30h ; 0
.eh_frame:0000000000019A84                 db  86h
.eh_frame:0000000000019A85                 db    6
.eh_frame:0000000000019A86                 db  41h ; A
.eh_frame:0000000000019A87                 db  0Eh
.eh_frame:0000000000019A88                 db  38h ; 8
.eh_frame:0000000000019A89                 db  83h
.eh_frame:0000000000019A8A                 db    7
.eh_frame:0000000000019A8B                 db  4Dh ; M
.eh_frame:0000000000019A8C                 db  0Eh
.eh_frame:0000000000019A8D                 db 0A0h
.eh_frame:0000000000019A8E                 db    4
.eh_frame:0000000000019A8F                 db    2
.eh_frame:0000000000019A90                 db  8Eh
.eh_frame:0000000000019A91                 db  0Ah
.eh_frame:0000000000019A92                 db  0Eh
.eh_frame:0000000000019A93                 db  38h ; 8
.eh_frame:0000000000019A94                 db  41h ; A
.eh_frame:0000000000019A95                 db  0Eh
.eh_frame:0000000000019A96                 db  30h ; 0
.eh_frame:0000000000019A97                 db  41h ; A
.eh_frame:0000000000019A98                 db  0Eh
.eh_frame:0000000000019A99                 db  28h ; (
.eh_frame:0000000000019A9A                 db  42h ; B
.eh_frame:0000000000019A9B                 db  0Eh
.eh_frame:0000000000019A9C                 db  20h
.eh_frame:0000000000019A9D                 db  42h ; B
.eh_frame:0000000000019A9E                 db  0Eh
.eh_frame:0000000000019A9F                 db  18h
.eh_frame:0000000000019AA0                 db  42h ; B
.eh_frame:0000000000019AA1                 db  0Eh
.eh_frame:0000000000019AA2                 db  10h
.eh_frame:0000000000019AA3                 db  42h ; B
.eh_frame:0000000000019AA4                 db  0Eh
.eh_frame:0000000000019AA5                 db    8
.eh_frame:0000000000019AA6                 db  41h ; A
.eh_frame:0000000000019AA7                 db  0Bh
.eh_frame:0000000000019AA8                 db  28h ; (
.eh_frame:0000000000019AA9                 db    0
.eh_frame:0000000000019AAA                 db    0
.eh_frame:0000000000019AAB                 db    0
.eh_frame:0000000000019AAC                 db  8Ch
.eh_frame:0000000000019AAD                 db    1
.eh_frame:0000000000019AAE                 db    0
.eh_frame:0000000000019AAF                 db    0
.eh_frame:0000000000019AB0                 db  70h ; p
.eh_frame:0000000000019AB1                 db 0AEh
.eh_frame:0000000000019AB2                 db 0FEh
.eh_frame:0000000000019AB3                 db 0FFh
.eh_frame:0000000000019AB4                 db  4Ah ; J
.eh_frame:0000000000019AB5                 db    4
.eh_frame:0000000000019AB6                 db    0
.eh_frame:0000000000019AB7                 db    0
.eh_frame:0000000000019AB8                 db    0
.eh_frame:0000000000019AB9                 db  42h ; B
.eh_frame:0000000000019ABA                 db  0Eh
.eh_frame:0000000000019ABB                 db  10h
.eh_frame:0000000000019ABC                 db  8Dh
.eh_frame:0000000000019ABD                 db    2
.eh_frame:0000000000019ABE                 db  42h ; B
.eh_frame:0000000000019ABF                 db  0Eh
.eh_frame:0000000000019AC0                 db  18h
.eh_frame:0000000000019AC1                 db  8Ch
.eh_frame:0000000000019AC2                 db    3
.eh_frame:0000000000019AC3                 db  46h ; F
.eh_frame:0000000000019AC4                 db  0Eh
.eh_frame:0000000000019AC5                 db  20h
.eh_frame:0000000000019AC6                 db  86h
.eh_frame:0000000000019AC7                 db    4
.eh_frame:0000000000019AC8                 db  41h ; A
.eh_frame:0000000000019AC9                 db  0Eh
.eh_frame:0000000000019ACA                 db  28h ; (
.eh_frame:0000000000019ACB                 db  83h
.eh_frame:0000000000019ACC                 db    5
.eh_frame:0000000000019ACD                 db  49h ; I
.eh_frame:0000000000019ACE                 db  0Eh
.eh_frame:0000000000019ACF                 db 0B0h
.eh_frame:0000000000019AD0                 db    1
.eh_frame:0000000000019AD1                 db    0
.eh_frame:0000000000019AD2                 db    0
.eh_frame:0000000000019AD3                 db    0
.eh_frame:0000000000019AD4                 db  50h ; P
.eh_frame:0000000000019AD5                 db    0
.eh_frame:0000000000019AD6                 db    0
.eh_frame:0000000000019AD7                 db    0
.eh_frame:0000000000019AD8                 db 0B8h
.eh_frame:0000000000019AD9                 db    1
.eh_frame:0000000000019ADA                 db    0
.eh_frame:0000000000019ADB                 db    0
.eh_frame:0000000000019ADC                 db  54h ; T
.eh_frame:0000000000019ADD                 db  96h
.eh_frame:0000000000019ADE                 db 0FEh
.eh_frame:0000000000019ADF                 db 0FFh
.eh_frame:0000000000019AE0                 db 0FDh
.eh_frame:0000000000019AE1                 db  0Ch
.eh_frame:0000000000019AE2                 db    0
.eh_frame:0000000000019AE3                 db    0
.eh_frame:0000000000019AE4                 db    0
.eh_frame:0000000000019AE5                 db  42h ; B
.eh_frame:0000000000019AE6                 db  0Eh
.eh_frame:0000000000019AE7                 db  10h
.eh_frame:0000000000019AE8                 db  8Fh
.eh_frame:0000000000019AE9                 db    2
.eh_frame:0000000000019AEA                 db  42h ; B
.eh_frame:0000000000019AEB                 db  0Eh
.eh_frame:0000000000019AEC                 db  18h
.eh_frame:0000000000019AED                 db  8Eh
.eh_frame:0000000000019AEE                 db    3
.eh_frame:0000000000019AEF                 db  45h ; E
.eh_frame:0000000000019AF0                 db  0Eh
.eh_frame:0000000000019AF1                 db  20h
.eh_frame:0000000000019AF2                 db  8Dh
.eh_frame:0000000000019AF3                 db    4
.eh_frame:0000000000019AF4                 db  42h ; B
.eh_frame:0000000000019AF5                 db  0Eh
.eh_frame:0000000000019AF6                 db  28h ; (
.eh_frame:0000000000019AF7                 db  8Ch
.eh_frame:0000000000019AF8                 db    5
.eh_frame:0000000000019AF9                 db  48h ; H
.eh_frame:0000000000019AFA                 db  0Eh
.eh_frame:0000000000019AFB                 db  30h ; 0
.eh_frame:0000000000019AFC                 db  86h
.eh_frame:0000000000019AFD                 db    6
.eh_frame:0000000000019AFE                 db  41h ; A
.eh_frame:0000000000019AFF                 db  0Eh
.eh_frame:0000000000019B00                 db  38h ; 8
.eh_frame:0000000000019B01                 db  83h
.eh_frame:0000000000019B02                 db    7
.eh_frame:0000000000019B03                 db  52h ; R
.eh_frame:0000000000019B04                 db  0Eh
.eh_frame:0000000000019B05                 db 0F0h
.eh_frame:0000000000019B06                 db    2
.eh_frame:0000000000019B07                 db    3
.eh_frame:0000000000019B08                 db  59h ; Y
.eh_frame:0000000000019B09                 db    7
.eh_frame:0000000000019B0A                 db  0Ah
.eh_frame:0000000000019B0B                 db  0Eh
.eh_frame:0000000000019B0C                 db  38h ; 8
.eh_frame:0000000000019B0D                 db  41h ; A
.eh_frame:0000000000019B0E                 db  0Eh
.eh_frame:0000000000019B0F                 db  30h ; 0
.eh_frame:0000000000019B10                 db  41h ; A
.eh_frame:0000000000019B11                 db  0Eh
.eh_frame:0000000000019B12                 db  28h ; (
.eh_frame:0000000000019B13                 db  42h ; B
.eh_frame:0000000000019B14                 db  0Eh
.eh_frame:0000000000019B15                 db  20h
.eh_frame:0000000000019B16                 db  42h ; B
.eh_frame:0000000000019B17                 db  0Eh
.eh_frame:0000000000019B18                 db  18h
.eh_frame:0000000000019B19                 db  42h ; B
.eh_frame:0000000000019B1A                 db  0Eh
.eh_frame:0000000000019B1B                 db  10h
.eh_frame:0000000000019B1C                 db  42h ; B
.eh_frame:0000000000019B1D                 db  0Eh
.eh_frame:0000000000019B1E                 db    8
.eh_frame:0000000000019B1F                 db  41h ; A
.eh_frame:0000000000019B20                 db  0Bh
.eh_frame:0000000000019B21                 db    0
.eh_frame:0000000000019B22                 db    0
.eh_frame:0000000000019B23                 db    0
.eh_frame:0000000000019B24                 db    0
.eh_frame:0000000000019B25                 db    0
.eh_frame:0000000000019B26                 db    0
.eh_frame:0000000000019B27                 db    0
.eh_frame:0000000000019B28                 db  2Ch ; ,
.eh_frame:0000000000019B29                 db    0
.eh_frame:0000000000019B2A                 db    0
.eh_frame:0000000000019B2B                 db    0
.eh_frame:0000000000019B2C                 db  0Ch
.eh_frame:0000000000019B2D                 db    2
.eh_frame:0000000000019B2E                 db    0
.eh_frame:0000000000019B2F                 db    0
.eh_frame:0000000000019B30                 db  40h ; @
.eh_frame:0000000000019B31                 db 0B2h
.eh_frame:0000000000019B32                 db 0FEh
.eh_frame:0000000000019B33                 db 0FFh
.eh_frame:0000000000019B34                 db  14h
.eh_frame:0000000000019B35                 db    1
.eh_frame:0000000000019B36                 db    0
.eh_frame:0000000000019B37                 db    0
.eh_frame:0000000000019B38                 db    0
.eh_frame:0000000000019B39                 db  41h ; A
.eh_frame:0000000000019B3A                 db  0Eh
.eh_frame:0000000000019B3B                 db  10h
.eh_frame:0000000000019B3C                 db  86h
.eh_frame:0000000000019B3D                 db    2
.eh_frame:0000000000019B3E                 db  41h ; A
.eh_frame:0000000000019B3F                 db  0Eh
.eh_frame:0000000000019B40                 db  18h
.eh_frame:0000000000019B41                 db  83h
.eh_frame:0000000000019B42                 db    3
.eh_frame:0000000000019B43                 db  4Dh ; M
.eh_frame:0000000000019B44                 db  0Eh
.eh_frame:0000000000019B45                 db 0F0h
.eh_frame:0000000000019B46                 db    1
.eh_frame:0000000000019B47                 db    2
.eh_frame:0000000000019B48                 db 0E7h
.eh_frame:0000000000019B49                 db  0Ah
.eh_frame:0000000000019B4A                 db  0Eh
.eh_frame:0000000000019B4B                 db  18h
.eh_frame:0000000000019B4C                 db  41h ; A
.eh_frame:0000000000019B4D                 db  0Eh
.eh_frame:0000000000019B4E                 db  10h
.eh_frame:0000000000019B4F                 db  41h ; A
.eh_frame:0000000000019B50                 db  0Eh
.eh_frame:0000000000019B51                 db    8
.eh_frame:0000000000019B52                 db  48h ; H
.eh_frame:0000000000019B53                 db  0Bh
.eh_frame:0000000000019B54                 db    0
.eh_frame:0000000000019B55                 db    0
.eh_frame:0000000000019B56                 db    0
.eh_frame:0000000000019B57                 db    0
.eh_frame:0000000000019B58                 db  20h
.eh_frame:0000000000019B59                 db    0
.eh_frame:0000000000019B5A                 db    0
.eh_frame:0000000000019B5B                 db    0
.eh_frame:0000000000019B5C                 db  3Ch ; <
.eh_frame:0000000000019B5D                 db    2
.eh_frame:0000000000019B5E                 db    0
.eh_frame:0000000000019B5F                 db    0
.eh_frame:0000000000019B60                 db  30h ; 0
.eh_frame:0000000000019B61                 db 0B3h
.eh_frame:0000000000019B62                 db 0FEh
.eh_frame:0000000000019B63                 db 0FFh
.eh_frame:0000000000019B64                 db  44h ; D
.eh_frame:0000000000019B65                 db    0
.eh_frame:0000000000019B66                 db    0
.eh_frame:0000000000019B67                 db    0
.eh_frame:0000000000019B68                 db    0
.eh_frame:0000000000019B69                 db  4Fh ; O
.eh_frame:0000000000019B6A                 db  0Eh
.eh_frame:0000000000019B6B                 db  10h
.eh_frame:0000000000019B6C                 db  83h
.eh_frame:0000000000019B6D                 db    2
.eh_frame:0000000000019B6E                 db  52h ; R
.eh_frame:0000000000019B6F                 db  0Eh
.eh_frame:0000000000019B70                 db    8
.eh_frame:0000000000019B71                 db  47h ; G
.eh_frame:0000000000019B72                 db 0C3h
.eh_frame:0000000000019B73                 db  48h ; H
.eh_frame:0000000000019B74                 db  0Eh
.eh_frame:0000000000019B75                 db  10h
.eh_frame:0000000000019B76                 db  83h
.eh_frame:0000000000019B77                 db    2
.eh_frame:0000000000019B78                 db  53h ; S
.eh_frame:0000000000019B79                 db  0Eh
.eh_frame:0000000000019B7A                 db    8
.eh_frame:0000000000019B7B                 db    0
.eh_frame:0000000000019B7C                 db  38h ; 8
.eh_frame:0000000000019B7D                 db    0
.eh_frame:0000000000019B7E                 db    0
.eh_frame:0000000000019B7F                 db    0
.eh_frame:0000000000019B80                 db  60h ; `
.eh_frame:0000000000019B81                 db    2
.eh_frame:0000000000019B82                 db    0
.eh_frame:0000000000019B83                 db    0
.eh_frame:0000000000019B84                 db  5Ch ; \
.eh_frame:0000000000019B85                 db 0B3h
.eh_frame:0000000000019B86                 db 0FEh
.eh_frame:0000000000019B87                 db 0FFh
.eh_frame:0000000000019B88                 db 0A5h
.eh_frame:0000000000019B89                 db    0
.eh_frame:0000000000019B8A                 db    0
.eh_frame:0000000000019B8B                 db    0
.eh_frame:0000000000019B8C                 db    0
.eh_frame:0000000000019B8D                 db  4Ah ; J
.eh_frame:0000000000019B8E                 db  0Eh
.eh_frame:0000000000019B8F                 db  10h
.eh_frame:0000000000019B90                 db  8Ch
.eh_frame:0000000000019B91                 db    2
.eh_frame:0000000000019B92                 db  44h ; D
.eh_frame:0000000000019B93                 db  0Eh
.eh_frame:0000000000019B94                 db  18h
.eh_frame:0000000000019B95                 db  86h
.eh_frame:0000000000019B96                 db    3
.eh_frame:0000000000019B97                 db  41h ; A
.eh_frame:0000000000019B98                 db  0Eh
.eh_frame:0000000000019B99                 db  20h
.eh_frame:0000000000019B9A                 db  83h
.eh_frame:0000000000019B9B                 db    4
.eh_frame:0000000000019B9C                 db    2
.eh_frame:0000000000019B9D                 db  40h ; @
.eh_frame:0000000000019B9E                 db  0Ah
.eh_frame:0000000000019B9F                 db  0Eh
.eh_frame:0000000000019BA0                 db  18h
.eh_frame:0000000000019BA1                 db  43h ; C
.eh_frame:0000000000019BA2                 db  0Eh
.eh_frame:0000000000019BA3                 db  10h
.eh_frame:0000000000019BA4                 db  42h ; B
.eh_frame:0000000000019BA5                 db  0Eh
.eh_frame:0000000000019BA6                 db    8
.eh_frame:0000000000019BA7                 db  44h ; D
.eh_frame:0000000000019BA8                 db  0Bh
.eh_frame:0000000000019BA9                 db  41h ; A
.eh_frame:0000000000019BAA                 db  0Ah
.eh_frame:0000000000019BAB                 db  0Eh
.eh_frame:0000000000019BAC                 db  18h
.eh_frame:0000000000019BAD                 db  46h ; F
.eh_frame:0000000000019BAE                 db  0Eh
.eh_frame:0000000000019BAF                 db  10h
.eh_frame:0000000000019BB0                 db  42h ; B
.eh_frame:0000000000019BB1                 db  0Eh
.eh_frame:0000000000019BB2                 db    8
.eh_frame:0000000000019BB3                 db  47h ; G
.eh_frame:0000000000019BB4                 db  0Bh
.eh_frame:0000000000019BB5                 db    0
.eh_frame:0000000000019BB6                 db    0
.eh_frame:0000000000019BB7                 db    0
.eh_frame:0000000000019BB8                 db  1Ch
.eh_frame:0000000000019BB9                 db    0
.eh_frame:0000000000019BBA                 db    0
.eh_frame:0000000000019BBB                 db    0
.eh_frame:0000000000019BBC                 db  9Ch
.eh_frame:0000000000019BBD                 db    2
.eh_frame:0000000000019BBE                 db    0
.eh_frame:0000000000019BBF                 db    0
.eh_frame:0000000000019BC0                 db 0D0h
.eh_frame:0000000000019BC1                 db 0B3h
.eh_frame:0000000000019BC2                 db 0FEh
.eh_frame:0000000000019BC3                 db 0FFh
.eh_frame:0000000000019BC4                 db  37h ; 7
.eh_frame:0000000000019BC5                 db    0
.eh_frame:0000000000019BC6                 db    0
.eh_frame:0000000000019BC7                 db    0
.eh_frame:0000000000019BC8                 db    0
.eh_frame:0000000000019BC9                 db  41h ; A
.eh_frame:0000000000019BCA                 db  0Eh
.eh_frame:0000000000019BCB                 db  10h
.eh_frame:0000000000019BCC                 db  83h
.eh_frame:0000000000019BCD                 db    2
.eh_frame:0000000000019BCE                 db  59h ; Y
.eh_frame:0000000000019BCF                 db  0Ah
.eh_frame:0000000000019BD0                 db  0Eh
.eh_frame:0000000000019BD1                 db    8
.eh_frame:0000000000019BD2                 db  46h ; F
.eh_frame:0000000000019BD3                 db  0Bh
.eh_frame:0000000000019BD4                 db  56h ; V
.eh_frame:0000000000019BD5                 db  0Eh
.eh_frame:0000000000019BD6                 db    8
.eh_frame:0000000000019BD7                 db    0
.eh_frame:0000000000019BD8                 db  10h
.eh_frame:0000000000019BD9                 db    0
.eh_frame:0000000000019BDA                 db    0
.eh_frame:0000000000019BDB                 db    0
.eh_frame:0000000000019BDC                 db 0BCh
.eh_frame:0000000000019BDD                 db    2
.eh_frame:0000000000019BDE                 db    0
.eh_frame:0000000000019BDF                 db    0
.eh_frame:0000000000019BE0                 db    0
.eh_frame:0000000000019BE1                 db  95h
.eh_frame:0000000000019BE2                 db 0FEh
.eh_frame:0000000000019BE3                 db 0FFh
.eh_frame:0000000000019BE4                 db  16h
.eh_frame:0000000000019BE5                 db    0
.eh_frame:0000000000019BE6                 db    0
.eh_frame:0000000000019BE7                 db    0
.eh_frame:0000000000019BE8                 db    0
.eh_frame:0000000000019BE9                 db    0
.eh_frame:0000000000019BEA                 db    0
.eh_frame:0000000000019BEB                 db    0
.eh_frame:0000000000019BEC                 db  14h
.eh_frame:0000000000019BED                 db    0
.eh_frame:0000000000019BEE                 db    0
.eh_frame:0000000000019BEF                 db    0
.eh_frame:0000000000019BF0                 db 0D0h
.eh_frame:0000000000019BF1                 db    2
.eh_frame:0000000000019BF2                 db    0
.eh_frame:0000000000019BF3                 db    0
.eh_frame:0000000000019BF4                 db    2
.eh_frame:0000000000019BF5                 db  95h
.eh_frame:0000000000019BF6                 db 0FEh
.eh_frame:0000000000019BF7                 db 0FFh
.eh_frame:0000000000019BF8                 db  33h ; 3
.eh_frame:0000000000019BF9                 db    0
.eh_frame:0000000000019BFA                 db    0
.eh_frame:0000000000019BFB                 db    0
.eh_frame:0000000000019BFC                 db    0
.eh_frame:0000000000019BFD                 db  41h ; A
.eh_frame:0000000000019BFE                 db  0Eh
.eh_frame:0000000000019BFF                 db  10h
.eh_frame:0000000000019C00                 db  83h
.eh_frame:0000000000019C01                 db    2
.eh_frame:0000000000019C02                 db    0
.eh_frame:0000000000019C03                 db    0
.eh_frame:0000000000019C04                 db  34h ; 4
.eh_frame:0000000000019C05                 db    0
.eh_frame:0000000000019C06                 db    0
.eh_frame:0000000000019C07                 db    0
.eh_frame:0000000000019C08                 db 0E8h
.eh_frame:0000000000019C09                 db    2
.eh_frame:0000000000019C0A                 db    0
.eh_frame:0000000000019C0B                 db    0
.eh_frame:0000000000019C0C                 db 0C4h
.eh_frame:0000000000019C0D                 db 0B3h
.eh_frame:0000000000019C0E                 db 0FEh
.eh_frame:0000000000019C0F                 db 0FFh
.eh_frame:0000000000019C10                 db 0B6h
.eh_frame:0000000000019C11                 db    0
.eh_frame:0000000000019C12                 db    0
.eh_frame:0000000000019C13                 db    0
.eh_frame:0000000000019C14                 db    0
.eh_frame:0000000000019C15                 db  42h ; B
.eh_frame:0000000000019C16                 db  0Eh
.eh_frame:0000000000019C17                 db  10h
.eh_frame:0000000000019C18                 db  8Ch
.eh_frame:0000000000019C19                 db    2
.eh_frame:0000000000019C1A                 db  41h ; A
.eh_frame:0000000000019C1B                 db  0Eh
.eh_frame:0000000000019C1C                 db  18h
.eh_frame:0000000000019C1D                 db  86h
.eh_frame:0000000000019C1E                 db    3
.eh_frame:0000000000019C1F                 db  44h ; D
.eh_frame:0000000000019C20                 db  0Eh
.eh_frame:0000000000019C21                 db  20h
.eh_frame:0000000000019C22                 db  83h
.eh_frame:0000000000019C23                 db    4
.eh_frame:0000000000019C24                 db    2
.eh_frame:0000000000019C25                 db  97h
.eh_frame:0000000000019C26                 db  0Ah
.eh_frame:0000000000019C27                 db  0Eh
.eh_frame:0000000000019C28                 db  18h
.eh_frame:0000000000019C29                 db  41h ; A
.eh_frame:0000000000019C2A                 db  0Eh
.eh_frame:0000000000019C2B                 db  10h
.eh_frame:0000000000019C2C                 db  42h ; B
.eh_frame:0000000000019C2D                 db  0Eh
.eh_frame:0000000000019C2E                 db    8
.eh_frame:0000000000019C2F                 db  47h ; G
.eh_frame:0000000000019C30                 db  0Bh
.eh_frame:0000000000019C31                 db  41h ; A
.eh_frame:0000000000019C32                 db  0Eh
.eh_frame:0000000000019C33                 db  18h
.eh_frame:0000000000019C34                 db  41h ; A
.eh_frame:0000000000019C35                 db  0Eh
.eh_frame:0000000000019C36                 db  10h
.eh_frame:0000000000019C37                 db  42h ; B
.eh_frame:0000000000019C38                 db  0Eh
.eh_frame:0000000000019C39                 db    8
.eh_frame:0000000000019C3A                 db    0
.eh_frame:0000000000019C3B                 db    0
.eh_frame:0000000000019C3C                 db  64h ; d
.eh_frame:0000000000019C3D                 db    0
.eh_frame:0000000000019C3E                 db    0
.eh_frame:0000000000019C3F                 db    0
.eh_frame:0000000000019C40                 db  20h
.eh_frame:0000000000019C41                 db    3
.eh_frame:0000000000019C42                 db    0
.eh_frame:0000000000019C43                 db    0
.eh_frame:0000000000019C44                 db  4Ch ; L
.eh_frame:0000000000019C45                 db 0B4h
.eh_frame:0000000000019C46                 db 0FEh
.eh_frame:0000000000019C47                 db 0FFh
.eh_frame:0000000000019C48                 db    5
.eh_frame:0000000000019C49                 db    1
.eh_frame:0000000000019C4A                 db    0
.eh_frame:0000000000019C4B                 db    0
.eh_frame:0000000000019C4C                 db    0
.eh_frame:0000000000019C4D                 db  42h ; B
.eh_frame:0000000000019C4E                 db  0Eh
.eh_frame:0000000000019C4F                 db  10h
.eh_frame:0000000000019C50                 db  8Dh
.eh_frame:0000000000019C51                 db    2
.eh_frame:0000000000019C52                 db  42h ; B
.eh_frame:0000000000019C53                 db  0Eh
.eh_frame:0000000000019C54                 db  18h
.eh_frame:0000000000019C55                 db  8Ch
.eh_frame:0000000000019C56                 db    3
.eh_frame:0000000000019C57                 db  45h ; E
.eh_frame:0000000000019C58                 db  0Eh
.eh_frame:0000000000019C59                 db  20h
.eh_frame:0000000000019C5A                 db  86h
.eh_frame:0000000000019C5B                 db    4
.eh_frame:0000000000019C5C                 db  41h ; A
.eh_frame:0000000000019C5D                 db  0Eh
.eh_frame:0000000000019C5E                 db  28h ; (
.eh_frame:0000000000019C5F                 db  83h
.eh_frame:0000000000019C60                 db    5
.eh_frame:0000000000019C61                 db  51h ; Q
.eh_frame:0000000000019C62                 db  0Eh
.eh_frame:0000000000019C63                 db  38h ; 8
.eh_frame:0000000000019C64                 db  4Ch ; L
.eh_frame:0000000000019C65                 db  0Eh
.eh_frame:0000000000019C66                 db  40h ; @
.eh_frame:0000000000019C67                 db  57h ; W
.eh_frame:0000000000019C68                 db  0Eh
.eh_frame:0000000000019C69                 db  38h ; 8
.eh_frame:0000000000019C6A                 db  41h ; A
.eh_frame:0000000000019C6B                 db  0Eh
.eh_frame:0000000000019C6C                 db  30h ; 0
.eh_frame:0000000000019C6D                 db  4Eh ; N
.eh_frame:0000000000019C6E                 db  0Ah
.eh_frame:0000000000019C6F                 db  0Eh
.eh_frame:0000000000019C70                 db  28h ; (
.eh_frame:0000000000019C71                 db  48h ; H
.eh_frame:0000000000019C72                 db  0Eh
.eh_frame:0000000000019C73                 db  20h
.eh_frame:0000000000019C74                 db  41h ; A
.eh_frame:0000000000019C75                 db  0Eh
.eh_frame:0000000000019C76                 db  18h
.eh_frame:0000000000019C77                 db  42h ; B
.eh_frame:0000000000019C78                 db  0Eh
.eh_frame:0000000000019C79                 db  10h
.eh_frame:0000000000019C7A                 db  42h ; B
.eh_frame:0000000000019C7B                 db  0Eh
.eh_frame:0000000000019C7C                 db    8
.eh_frame:0000000000019C7D                 db  46h ; F
.eh_frame:0000000000019C7E                 db  0Bh
.eh_frame:0000000000019C7F                 db  79h ; y
.eh_frame:0000000000019C80                 db  0Ah
.eh_frame:0000000000019C81                 db  0Eh
.eh_frame:0000000000019C82                 db  28h ; (
.eh_frame:0000000000019C83                 db  43h ; C
.eh_frame:0000000000019C84                 db  0Eh
.eh_frame:0000000000019C85                 db  20h
.eh_frame:0000000000019C86                 db  41h ; A
.eh_frame:0000000000019C87                 db  0Eh
.eh_frame:0000000000019C88                 db  18h
.eh_frame:0000000000019C89                 db  42h ; B
.eh_frame:0000000000019C8A                 db  0Eh
.eh_frame:0000000000019C8B                 db  10h
.eh_frame:0000000000019C8C                 db  42h ; B
.eh_frame:0000000000019C8D                 db  0Eh
.eh_frame:0000000000019C8E                 db    8
.eh_frame:0000000000019C8F                 db  47h ; G
.eh_frame:0000000000019C90                 db  0Bh
.eh_frame:0000000000019C91                 db    2
.eh_frame:0000000000019C92                 db  54h ; T
.eh_frame:0000000000019C93                 db  0Eh
.eh_frame:0000000000019C94                 db  28h ; (
.eh_frame:0000000000019C95                 db  43h ; C
.eh_frame:0000000000019C96                 db  0Eh
.eh_frame:0000000000019C97                 db  20h
.eh_frame:0000000000019C98                 db  41h ; A
.eh_frame:0000000000019C99                 db  0Eh
.eh_frame:0000000000019C9A                 db  18h
.eh_frame:0000000000019C9B                 db  42h ; B
.eh_frame:0000000000019C9C                 db  0Eh
.eh_frame:0000000000019C9D                 db  10h
.eh_frame:0000000000019C9E                 db  42h ; B
.eh_frame:0000000000019C9F                 db  0Eh
.eh_frame:0000000000019CA0                 db    8
.eh_frame:0000000000019CA1                 db    0
.eh_frame:0000000000019CA2                 db    0
.eh_frame:0000000000019CA3                 db    0
.eh_frame:0000000000019CA4                 db  4Ch ; L
.eh_frame:0000000000019CA5                 db    0
.eh_frame:0000000000019CA6                 db    0
.eh_frame:0000000000019CA7                 db    0
.eh_frame:0000000000019CA8                 db  88h
.eh_frame:0000000000019CA9                 db    3
.eh_frame:0000000000019CAA                 db    0
.eh_frame:0000000000019CAB                 db    0
.eh_frame:0000000000019CAC                 db 0F4h
.eh_frame:0000000000019CAD                 db 0B4h
.eh_frame:0000000000019CAE                 db 0FEh
.eh_frame:0000000000019CAF                 db 0FFh
.eh_frame:0000000000019CB0                 db  4Bh ; K
.eh_frame:0000000000019CB1                 db    1
.eh_frame:0000000000019CB2                 db    0
.eh_frame:0000000000019CB3                 db    0
.eh_frame:0000000000019CB4                 db    0
.eh_frame:0000000000019CB5                 db  42h ; B
.eh_frame:0000000000019CB6                 db  0Eh
.eh_frame:0000000000019CB7                 db  10h
.eh_frame:0000000000019CB8                 db  8Eh
.eh_frame:0000000000019CB9                 db    2
.eh_frame:0000000000019CBA                 db  42h ; B
.eh_frame:0000000000019CBB                 db  0Eh
.eh_frame:0000000000019CBC                 db  18h
.eh_frame:0000000000019CBD                 db  8Dh
.eh_frame:0000000000019CBE                 db    3
.eh_frame:0000000000019CBF                 db  45h ; E
.eh_frame:0000000000019CC0                 db  0Eh
.eh_frame:0000000000019CC1                 db  20h
.eh_frame:0000000000019CC2                 db  8Ch
.eh_frame:0000000000019CC3                 db    4
.eh_frame:0000000000019CC4                 db  41h ; A
.eh_frame:0000000000019CC5                 db  0Eh
.eh_frame:0000000000019CC6                 db  28h ; (
.eh_frame:0000000000019CC7                 db  86h
.eh_frame:0000000000019CC8                 db    5
.eh_frame:0000000000019CC9                 db  44h ; D
.eh_frame:0000000000019CCA                 db  0Eh
.eh_frame:0000000000019CCB                 db  30h ; 0
.eh_frame:0000000000019CCC                 db  83h
.eh_frame:0000000000019CCD                 db    6
.eh_frame:0000000000019CCE                 db  4Ah ; J
.eh_frame:0000000000019CCF                 db  0Eh
.eh_frame:0000000000019CD0                 db  50h ; P
.eh_frame:0000000000019CD1                 db    2
.eh_frame:0000000000019CD2                 db  83h
.eh_frame:0000000000019CD3                 db  0Eh
.eh_frame:0000000000019CD4                 db  58h ; X
.eh_frame:0000000000019CD5                 db  4Dh ; M
.eh_frame:0000000000019CD6                 db  0Eh
.eh_frame:0000000000019CD7                 db  60h ; `
.eh_frame:0000000000019CD8                 db  56h ; V
.eh_frame:0000000000019CD9                 db  0Eh
.eh_frame:0000000000019CDA                 db  58h ; X
.eh_frame:0000000000019CDB                 db  41h ; A
.eh_frame:0000000000019CDC                 db  0Eh
.eh_frame:0000000000019CDD                 db  50h ; P
.eh_frame:0000000000019CDE                 db    2
.eh_frame:0000000000019CDF                 db  68h ; h
.eh_frame:0000000000019CE0                 db  0Ah
.eh_frame:0000000000019CE1                 db  0Eh
.eh_frame:0000000000019CE2                 db  30h ; 0
.eh_frame:0000000000019CE3                 db  41h ; A
.eh_frame:0000000000019CE4                 db  0Eh
.eh_frame:0000000000019CE5                 db  28h ; (
.eh_frame:0000000000019CE6                 db  41h ; A
.eh_frame:0000000000019CE7                 db  0Eh
.eh_frame:0000000000019CE8                 db  20h
.eh_frame:0000000000019CE9                 db  42h ; B
.eh_frame:0000000000019CEA                 db  0Eh
.eh_frame:0000000000019CEB                 db  18h
.eh_frame:0000000000019CEC                 db  42h ; B
.eh_frame:0000000000019CED                 db  0Eh
.eh_frame:0000000000019CEE                 db  10h
.eh_frame:0000000000019CEF                 db  42h ; B
.eh_frame:0000000000019CF0                 db  0Eh
.eh_frame:0000000000019CF1                 db    8
.eh_frame:0000000000019CF2                 db  41h ; A
.eh_frame:0000000000019CF3                 db  0Bh
.eh_frame:0000000000019CF4                 db  4Ch ; L
.eh_frame:0000000000019CF5                 db    0
.eh_frame:0000000000019CF6                 db    0
.eh_frame:0000000000019CF7                 db    0
.eh_frame:0000000000019CF8                 db 0D8h
.eh_frame:0000000000019CF9                 db    3
.eh_frame:0000000000019CFA                 db    0
.eh_frame:0000000000019CFB                 db    0
.eh_frame:0000000000019CFC                 db 0F4h
.eh_frame:0000000000019CFD                 db 0B5h
.eh_frame:0000000000019CFE                 db 0FEh
.eh_frame:0000000000019CFF                 db 0FFh
.eh_frame:0000000000019D00                 db 0BEh
.eh_frame:0000000000019D01                 db    0
.eh_frame:0000000000019D02                 db    0
.eh_frame:0000000000019D03                 db    0
.eh_frame:0000000000019D04                 db    0
.eh_frame:0000000000019D05                 db  42h ; B
.eh_frame:0000000000019D06                 db  0Eh
.eh_frame:0000000000019D07                 db  10h
.eh_frame:0000000000019D08                 db  8Dh
.eh_frame:0000000000019D09                 db    2
.eh_frame:0000000000019D0A                 db  42h ; B
.eh_frame:0000000000019D0B                 db  0Eh
.eh_frame:0000000000019D0C                 db  18h
.eh_frame:0000000000019D0D                 db  8Ch
.eh_frame:0000000000019D0E                 db    3
.eh_frame:0000000000019D0F                 db  44h ; D
.eh_frame:0000000000019D10                 db  0Eh
.eh_frame:0000000000019D11                 db  20h
.eh_frame:0000000000019D12                 db  86h
.eh_frame:0000000000019D13                 db    4
.eh_frame:0000000000019D14                 db  41h ; A
.eh_frame:0000000000019D15                 db  0Eh
.eh_frame:0000000000019D16                 db  28h ; (
.eh_frame:0000000000019D17                 db  83h
.eh_frame:0000000000019D18                 db    5
.eh_frame:0000000000019D19                 db  51h ; Q
.eh_frame:0000000000019D1A                 db  0Eh
.eh_frame:0000000000019D1B                 db  30h ; 0
.eh_frame:0000000000019D1C                 db  56h ; V
.eh_frame:0000000000019D1D                 db  0Ah
.eh_frame:0000000000019D1E                 db  0Eh
.eh_frame:0000000000019D1F                 db  28h ; (
.eh_frame:0000000000019D20                 db  46h ; F
.eh_frame:0000000000019D21                 db  0Eh
.eh_frame:0000000000019D22                 db  20h
.eh_frame:0000000000019D23                 db  41h ; A
.eh_frame:0000000000019D24                 db  0Eh
.eh_frame:0000000000019D25                 db  18h
.eh_frame:0000000000019D26                 db  42h ; B
.eh_frame:0000000000019D27                 db  0Eh
.eh_frame:0000000000019D28                 db  10h
.eh_frame:0000000000019D29                 db  42h ; B
.eh_frame:0000000000019D2A                 db  0Eh
.eh_frame:0000000000019D2B                 db    8
.eh_frame:0000000000019D2C                 db  45h ; E
.eh_frame:0000000000019D2D                 db  0Bh
.eh_frame:0000000000019D2E                 db    2
.eh_frame:0000000000019D2F                 db  54h ; T
.eh_frame:0000000000019D30                 db  0Ah
.eh_frame:0000000000019D31                 db  0Eh
.eh_frame:0000000000019D32                 db  28h ; (
.eh_frame:0000000000019D33                 db  43h ; C
.eh_frame:0000000000019D34                 db  0Eh
.eh_frame:0000000000019D35                 db  20h
.eh_frame:0000000000019D36                 db  41h ; A
.eh_frame:0000000000019D37                 db  0Eh
.eh_frame:0000000000019D38                 db  18h
.eh_frame:0000000000019D39                 db  42h ; B
.eh_frame:0000000000019D3A                 db  0Eh
.eh_frame:0000000000019D3B                 db  10h
.eh_frame:0000000000019D3C                 db  42h ; B
.eh_frame:0000000000019D3D                 db  0Eh
.eh_frame:0000000000019D3E                 db    8
.eh_frame:0000000000019D3F                 db  44h ; D
.eh_frame:0000000000019D40                 db  0Bh
.eh_frame:0000000000019D41                 db    0
.eh_frame:0000000000019D42                 db    0
.eh_frame:0000000000019D43                 db    0
.eh_frame:0000000000019D44                 db  64h ; d
.eh_frame:0000000000019D45                 db    0
.eh_frame:0000000000019D46                 db    0
.eh_frame:0000000000019D47                 db    0
.eh_frame:0000000000019D48                 db  28h ; (
.eh_frame:0000000000019D49                 db    4
.eh_frame:0000000000019D4A                 db    0
.eh_frame:0000000000019D4B                 db    0
.eh_frame:0000000000019D4C                 db  64h ; d
.eh_frame:0000000000019D4D                 db 0B6h
.eh_frame:0000000000019D4E                 db 0FEh
.eh_frame:0000000000019D4F                 db 0FFh
.eh_frame:0000000000019D50                 db  0Eh
.eh_frame:0000000000019D51                 db    4
.eh_frame:0000000000019D52                 db    0
.eh_frame:0000000000019D53                 db    0
.eh_frame:0000000000019D54                 db    0
.eh_frame:0000000000019D55                 db  42h ; B
.eh_frame:0000000000019D56                 db  0Eh
.eh_frame:0000000000019D57                 db  10h
.eh_frame:0000000000019D58                 db  8Fh
.eh_frame:0000000000019D59                 db    2
.eh_frame:0000000000019D5A                 db  42h ; B
.eh_frame:0000000000019D5B                 db  0Eh
.eh_frame:0000000000019D5C                 db  18h
.eh_frame:0000000000019D5D                 db  8Eh
.eh_frame:0000000000019D5E                 db    3
.eh_frame:0000000000019D5F                 db  42h ; B
.eh_frame:0000000000019D60                 db  0Eh
.eh_frame:0000000000019D61                 db  20h
.eh_frame:0000000000019D62                 db  8Dh
.eh_frame:0000000000019D63                 db    4
.eh_frame:0000000000019D64                 db  42h ; B
.eh_frame:0000000000019D65                 db  0Eh
.eh_frame:0000000000019D66                 db  28h ; (
.eh_frame:0000000000019D67                 db  8Ch
.eh_frame:0000000000019D68                 db    5
.eh_frame:0000000000019D69                 db  41h ; A
.eh_frame:0000000000019D6A                 db  0Eh
.eh_frame:0000000000019D6B                 db  30h ; 0
.eh_frame:0000000000019D6C                 db  86h
.eh_frame:0000000000019D6D                 db    6
.eh_frame:0000000000019D6E                 db  41h ; A
.eh_frame:0000000000019D6F                 db  0Eh
.eh_frame:0000000000019D70                 db  38h ; 8
.eh_frame:0000000000019D71                 db  83h
.eh_frame:0000000000019D72                 db    7
.eh_frame:0000000000019D73                 db  44h ; D
.eh_frame:0000000000019D74                 db  0Eh
.eh_frame:0000000000019D75                 db 0B0h
.eh_frame:0000000000019D76                 db    1
.eh_frame:0000000000019D77                 db    2
.eh_frame:0000000000019D78                 db 0FBh
.eh_frame:0000000000019D79                 db  0Ah
.eh_frame:0000000000019D7A                 db  0Eh
.eh_frame:0000000000019D7B                 db  38h ; 8
.eh_frame:0000000000019D7C                 db  44h ; D
.eh_frame:0000000000019D7D                 db  0Eh
.eh_frame:0000000000019D7E                 db  30h ; 0
.eh_frame:0000000000019D7F                 db  41h ; A
.eh_frame:0000000000019D80                 db  0Eh
.eh_frame:0000000000019D81                 db  28h ; (
.eh_frame:0000000000019D82                 db  42h ; B
.eh_frame:0000000000019D83                 db  0Eh
.eh_frame:0000000000019D84                 db  20h
.eh_frame:0000000000019D85                 db  42h ; B
.eh_frame:0000000000019D86                 db  0Eh
.eh_frame:0000000000019D87                 db  18h
.eh_frame:0000000000019D88                 db  42h ; B
.eh_frame:0000000000019D89                 db  0Eh
.eh_frame:0000000000019D8A                 db  10h
.eh_frame:0000000000019D8B                 db  42h ; B
.eh_frame:0000000000019D8C                 db  0Eh
.eh_frame:0000000000019D8D                 db    8
.eh_frame:0000000000019D8E                 db  4Ah ; J
.eh_frame:0000000000019D8F                 db  0Bh
.eh_frame:0000000000019D90                 db    3
.eh_frame:0000000000019D91                 db  4Dh ; M
.eh_frame:0000000000019D92                 db    1
.eh_frame:0000000000019D93                 db  0Ah
.eh_frame:0000000000019D94                 db  0Eh
.eh_frame:0000000000019D95                 db  38h ; 8
.eh_frame:0000000000019D96                 db  41h ; A
.eh_frame:0000000000019D97                 db  0Eh
.eh_frame:0000000000019D98                 db  30h ; 0
.eh_frame:0000000000019D99                 db  41h ; A
.eh_frame:0000000000019D9A                 db  0Eh
.eh_frame:0000000000019D9B                 db  28h ; (
.eh_frame:0000000000019D9C                 db  42h ; B
.eh_frame:0000000000019D9D                 db  0Eh
.eh_frame:0000000000019D9E                 db  20h
.eh_frame:0000000000019D9F                 db  42h ; B
.eh_frame:0000000000019DA0                 db  0Eh
.eh_frame:0000000000019DA1                 db  18h
.eh_frame:0000000000019DA2                 db  42h ; B
.eh_frame:0000000000019DA3                 db  0Eh
.eh_frame:0000000000019DA4                 db  10h
.eh_frame:0000000000019DA5                 db  42h ; B
.eh_frame:0000000000019DA6                 db  0Eh
.eh_frame:0000000000019DA7                 db    8
.eh_frame:0000000000019DA8                 db  49h ; I
.eh_frame:0000000000019DA9                 db  0Bh
.eh_frame:0000000000019DAA                 db    0
.eh_frame:0000000000019DAB                 db    0
.eh_frame:0000000000019DAC                 db  58h ; X
.eh_frame:0000000000019DAD                 db    0
.eh_frame:0000000000019DAE                 db    0
.eh_frame:0000000000019DAF                 db    0
.eh_frame:0000000000019DB0                 db  90h
.eh_frame:0000000000019DB1                 db    4
.eh_frame:0000000000019DB2                 db    0
.eh_frame:0000000000019DB3                 db    0
.eh_frame:0000000000019DB4                 db  0Ch
.eh_frame:0000000000019DB5                 db 0BAh
.eh_frame:0000000000019DB6                 db 0FEh
.eh_frame:0000000000019DB7                 db 0FFh
.eh_frame:0000000000019DB8                 db 0D0h
.eh_frame:0000000000019DB9                 db    0
.eh_frame:0000000000019DBA                 db    0
.eh_frame:0000000000019DBB                 db    0
.eh_frame:0000000000019DBC                 db    0
.eh_frame:0000000000019DBD                 db  42h ; B
.eh_frame:0000000000019DBE                 db  0Eh
.eh_frame:0000000000019DBF                 db  10h
.eh_frame:0000000000019DC0                 db  8Dh
.eh_frame:0000000000019DC1                 db    2
.eh_frame:0000000000019DC2                 db  42h ; B
.eh_frame:0000000000019DC3                 db  0Eh
.eh_frame:0000000000019DC4                 db  18h
.eh_frame:0000000000019DC5                 db  8Ch
.eh_frame:0000000000019DC6                 db    3
.eh_frame:0000000000019DC7                 db  41h ; A
.eh_frame:0000000000019DC8                 db  0Eh
.eh_frame:0000000000019DC9                 db  20h
.eh_frame:0000000000019DCA                 db  86h
.eh_frame:0000000000019DCB                 db    4
.eh_frame:0000000000019DCC                 db  41h ; A
.eh_frame:0000000000019DCD                 db  0Eh
.eh_frame:0000000000019DCE                 db  28h ; (
.eh_frame:0000000000019DCF                 db  83h
.eh_frame:0000000000019DD0                 db    5
.eh_frame:0000000000019DD1                 db  47h ; G
.eh_frame:0000000000019DD2                 db  0Eh
.eh_frame:0000000000019DD3                 db  30h ; 0
.eh_frame:0000000000019DD4                 db    2
.eh_frame:0000000000019DD5                 db  5Eh ; ^
.eh_frame:0000000000019DD6                 db  0Ah
.eh_frame:0000000000019DD7                 db  0Eh
.eh_frame:0000000000019DD8                 db  28h ; (
.eh_frame:0000000000019DD9                 db  46h ; F
.eh_frame:0000000000019DDA                 db  0Eh
.eh_frame:0000000000019DDB                 db  20h
.eh_frame:0000000000019DDC                 db  41h ; A
.eh_frame:0000000000019DDD                 db  0Eh
.eh_frame:0000000000019DDE                 db  18h
.eh_frame:0000000000019DDF                 db  42h ; B
.eh_frame:0000000000019DE0                 db  0Eh
.eh_frame:0000000000019DE1                 db  10h
.eh_frame:0000000000019DE2                 db  42h ; B
.eh_frame:0000000000019DE3                 db  0Eh
.eh_frame:0000000000019DE4                 db    8
.eh_frame:0000000000019DE5                 db  4Ah ; J
.eh_frame:0000000000019DE6                 db  0Bh
.eh_frame:0000000000019DE7                 db  4Ch ; L
.eh_frame:0000000000019DE8                 db  0Ah
.eh_frame:0000000000019DE9                 db  0Eh
.eh_frame:0000000000019DEA                 db  28h ; (
.eh_frame:0000000000019DEB                 db  48h ; H
.eh_frame:0000000000019DEC                 db  0Eh
.eh_frame:0000000000019DED                 db  20h
.eh_frame:0000000000019DEE                 db  41h ; A
.eh_frame:0000000000019DEF                 db  0Eh
.eh_frame:0000000000019DF0                 db  18h
.eh_frame:0000000000019DF1                 db  42h ; B
.eh_frame:0000000000019DF2                 db  0Eh
.eh_frame:0000000000019DF3                 db  10h
.eh_frame:0000000000019DF4                 db  42h ; B
.eh_frame:0000000000019DF5                 db  0Eh
.eh_frame:0000000000019DF6                 db    8
.eh_frame:0000000000019DF7                 db  47h ; G
.eh_frame:0000000000019DF8                 db  0Bh
.eh_frame:0000000000019DF9                 db  67h ; g
.eh_frame:0000000000019DFA                 db  0Eh
.eh_frame:0000000000019DFB                 db  28h ; (
.eh_frame:0000000000019DFC                 db  43h ; C
.eh_frame:0000000000019DFD                 db  0Eh
.eh_frame:0000000000019DFE                 db  20h
.eh_frame:0000000000019DFF                 db  41h ; A
.eh_frame:0000000000019E00                 db  0Eh
.eh_frame:0000000000019E01                 db  18h
.eh_frame:0000000000019E02                 db  42h ; B
.eh_frame:0000000000019E03                 db  0Eh
.eh_frame:0000000000019E04                 db  10h
.eh_frame:0000000000019E05                 db  42h ; B
.eh_frame:0000000000019E06                 db  0Eh
.eh_frame:0000000000019E07                 db    8
.eh_frame:0000000000019E08                 db  34h ; 4
.eh_frame:0000000000019E09                 db    0
.eh_frame:0000000000019E0A                 db    0
.eh_frame:0000000000019E0B                 db    0
.eh_frame:0000000000019E0C                 db 0ECh
.eh_frame:0000000000019E0D                 db    4
.eh_frame:0000000000019E0E                 db    0
.eh_frame:0000000000019E0F                 db    0
.eh_frame:0000000000019E10                 db  80h
.eh_frame:0000000000019E11                 db 0BAh
.eh_frame:0000000000019E12                 db 0FEh
.eh_frame:0000000000019E13                 db 0FFh
.eh_frame:0000000000019E14                 db  75h ; u
.eh_frame:0000000000019E15                 db    0
.eh_frame:0000000000019E16                 db    0
.eh_frame:0000000000019E17                 db    0
.eh_frame:0000000000019E18                 db    0
.eh_frame:0000000000019E19                 db  42h ; B
.eh_frame:0000000000019E1A                 db  0Eh
.eh_frame:0000000000019E1B                 db  10h
.eh_frame:0000000000019E1C                 db  8Ch
.eh_frame:0000000000019E1D                 db    2
.eh_frame:0000000000019E1E                 db  41h ; A
.eh_frame:0000000000019E1F                 db  0Eh
.eh_frame:0000000000019E20                 db  18h
.eh_frame:0000000000019E21                 db  86h
.eh_frame:0000000000019E22                 db    3
.eh_frame:0000000000019E23                 db  44h ; D
.eh_frame:0000000000019E24                 db  0Eh
.eh_frame:0000000000019E25                 db  20h
.eh_frame:0000000000019E26                 db  83h
.eh_frame:0000000000019E27                 db    4
.eh_frame:0000000000019E28                 db    2
.eh_frame:0000000000019E29                 db  54h ; T
.eh_frame:0000000000019E2A                 db  0Ah
.eh_frame:0000000000019E2B                 db  0Eh
.eh_frame:0000000000019E2C                 db  18h
.eh_frame:0000000000019E2D                 db  43h ; C
.eh_frame:0000000000019E2E                 db  0Eh
.eh_frame:0000000000019E2F                 db  10h
.eh_frame:0000000000019E30                 db  42h ; B
.eh_frame:0000000000019E31                 db  0Eh
.eh_frame:0000000000019E32                 db    8
.eh_frame:0000000000019E33                 db  48h ; H
.eh_frame:0000000000019E34                 db  0Bh
.eh_frame:0000000000019E35                 db  49h ; I
.eh_frame:0000000000019E36                 db  0Eh
.eh_frame:0000000000019E37                 db  18h
.eh_frame:0000000000019E38                 db  41h ; A
.eh_frame:0000000000019E39                 db  0Eh
.eh_frame:0000000000019E3A                 db  10h
.eh_frame:0000000000019E3B                 db  42h ; B
.eh_frame:0000000000019E3C                 db  0Eh
.eh_frame:0000000000019E3D                 db    8
.eh_frame:0000000000019E3E                 db    0
.eh_frame:0000000000019E3F                 db    0
.eh_frame:0000000000019E40                 db  18h
.eh_frame:0000000000019E41                 db    0
.eh_frame:0000000000019E42                 db    0
.eh_frame:0000000000019E43                 db    0
.eh_frame:0000000000019E44                 db  24h ; $
.eh_frame:0000000000019E45                 db    5
.eh_frame:0000000000019E46                 db    0
.eh_frame:0000000000019E47                 db    0
.eh_frame:0000000000019E48                 db 0C8h
.eh_frame:0000000000019E49                 db 0BAh
.eh_frame:0000000000019E4A                 db 0FEh
.eh_frame:0000000000019E4B                 db 0FFh
.eh_frame:0000000000019E4C                 db  2Bh ; +
.eh_frame:0000000000019E4D                 db    0
.eh_frame:0000000000019E4E                 db    0
.eh_frame:0000000000019E4F                 db    0
.eh_frame:0000000000019E50                 db    0
.eh_frame:0000000000019E51                 db  58h ; X
.eh_frame:0000000000019E52                 db  0Eh
.eh_frame:0000000000019E53                 db  10h
.eh_frame:0000000000019E54                 db  83h
.eh_frame:0000000000019E55                 db    2
.eh_frame:0000000000019E56                 db  52h ; R
.eh_frame:0000000000019E57                 db  0Eh
.eh_frame:0000000000019E58                 db    8
.eh_frame:0000000000019E59                 db    0
.eh_frame:0000000000019E5A                 db    0
.eh_frame:0000000000019E5B                 db    0
.eh_frame:0000000000019E5C                 db  18h
.eh_frame:0000000000019E5D                 db    0
.eh_frame:0000000000019E5E                 db    0
.eh_frame:0000000000019E5F                 db    0
.eh_frame:0000000000019E60                 db  40h ; @
.eh_frame:0000000000019E61                 db    5
.eh_frame:0000000000019E62                 db    0
.eh_frame:0000000000019E63                 db    0
.eh_frame:0000000000019E64                 db 0DCh
.eh_frame:0000000000019E65                 db 0BAh
.eh_frame:0000000000019E66                 db 0FEh
.eh_frame:0000000000019E67                 db 0FFh
.eh_frame:0000000000019E68                 db  2Bh ; +
.eh_frame:0000000000019E69                 db    0
.eh_frame:0000000000019E6A                 db    0
.eh_frame:0000000000019E6B                 db    0
.eh_frame:0000000000019E6C                 db    0
.eh_frame:0000000000019E6D                 db  58h ; X
.eh_frame:0000000000019E6E                 db  0Eh
.eh_frame:0000000000019E6F                 db  10h
.eh_frame:0000000000019E70                 db  83h
.eh_frame:0000000000019E71                 db    2
.eh_frame:0000000000019E72                 db  52h ; R
.eh_frame:0000000000019E73                 db  0Eh
.eh_frame:0000000000019E74                 db    8
.eh_frame:0000000000019E75                 db    0
.eh_frame:0000000000019E76                 db    0
.eh_frame:0000000000019E77                 db    0
.eh_frame:0000000000019E78                 db  18h
.eh_frame:0000000000019E79                 db    0
.eh_frame:0000000000019E7A                 db    0
.eh_frame:0000000000019E7B                 db    0
.eh_frame:0000000000019E7C                 db  5Ch ; \
.eh_frame:0000000000019E7D                 db    5
.eh_frame:0000000000019E7E                 db    0
.eh_frame:0000000000019E7F                 db    0
.eh_frame:0000000000019E80                 db 0F0h
.eh_frame:0000000000019E81                 db 0BAh
.eh_frame:0000000000019E82                 db 0FEh
.eh_frame:0000000000019E83                 db 0FFh
.eh_frame:0000000000019E84                 db  34h ; 4
.eh_frame:0000000000019E85                 db    0
.eh_frame:0000000000019E86                 db    0
.eh_frame:0000000000019E87                 db    0
.eh_frame:0000000000019E88                 db    0
.eh_frame:0000000000019E89                 db  45h ; E
.eh_frame:0000000000019E8A                 db  0Eh
.eh_frame:0000000000019E8B                 db  10h
.eh_frame:0000000000019E8C                 db  83h
.eh_frame:0000000000019E8D                 db    2
.eh_frame:0000000000019E8E                 db  6Eh ; n
.eh_frame:0000000000019E8F                 db  0Eh
.eh_frame:0000000000019E90                 db    8
.eh_frame:0000000000019E91                 db    0
.eh_frame:0000000000019E92                 db    0
.eh_frame:0000000000019E93                 db    0
.eh_frame:0000000000019E94                 db  18h
.eh_frame:0000000000019E95                 db    0
.eh_frame:0000000000019E96                 db    0
.eh_frame:0000000000019E97                 db    0
.eh_frame:0000000000019E98                 db  78h ; x
.eh_frame:0000000000019E99                 db    5
.eh_frame:0000000000019E9A                 db    0
.eh_frame:0000000000019E9B                 db    0
.eh_frame:0000000000019E9C                 db  14h
.eh_frame:0000000000019E9D                 db 0BBh
.eh_frame:0000000000019E9E                 db 0FEh
.eh_frame:0000000000019E9F                 db 0FFh
.eh_frame:0000000000019EA0                 db  24h ; $
.eh_frame:0000000000019EA1                 db    0
.eh_frame:0000000000019EA2                 db    0
.eh_frame:0000000000019EA3                 db    0
.eh_frame:0000000000019EA4                 db    0
.eh_frame:0000000000019EA5                 db  41h ; A
.eh_frame:0000000000019EA6                 db  0Eh
.eh_frame:0000000000019EA7                 db  10h
.eh_frame:0000000000019EA8                 db  83h
.eh_frame:0000000000019EA9                 db    2
.eh_frame:0000000000019EAA                 db  62h ; b
.eh_frame:0000000000019EAB                 db  0Eh
.eh_frame:0000000000019EAC                 db    8
.eh_frame:0000000000019EAD                 db    0
.eh_frame:0000000000019EAE                 db    0
.eh_frame:0000000000019EAF                 db    0
.eh_frame:0000000000019EB0                 db  7Ch ; |
.eh_frame:0000000000019EB1                 db    0
.eh_frame:0000000000019EB2                 db    0
.eh_frame:0000000000019EB3                 db    0
.eh_frame:0000000000019EB4                 db  94h
.eh_frame:0000000000019EB5                 db    5
.eh_frame:0000000000019EB6                 db    0
.eh_frame:0000000000019EB7                 db    0
.eh_frame:0000000000019EB8                 db  28h ; (
.eh_frame:0000000000019EB9                 db 0BBh
.eh_frame:0000000000019EBA                 db 0FEh
.eh_frame:0000000000019EBB                 db 0FFh
.eh_frame:0000000000019EBC                 db  0Ch
.eh_frame:0000000000019EBD                 db    2
.eh_frame:0000000000019EBE                 db    0
.eh_frame:0000000000019EBF                 db    0
.eh_frame:0000000000019EC0                 db    0
.eh_frame:0000000000019EC1                 db  42h ; B
.eh_frame:0000000000019EC2                 db  0Eh
.eh_frame:0000000000019EC3                 db  10h
.eh_frame:0000000000019EC4                 db  8Fh
.eh_frame:0000000000019EC5                 db    2
.eh_frame:0000000000019EC6                 db  42h ; B
.eh_frame:0000000000019EC7                 db  0Eh
.eh_frame:0000000000019EC8                 db  18h
.eh_frame:0000000000019EC9                 db  8Eh
.eh_frame:0000000000019ECA                 db    3
.eh_frame:0000000000019ECB                 db  42h ; B
.eh_frame:0000000000019ECC                 db  0Eh
.eh_frame:0000000000019ECD                 db  20h
.eh_frame:0000000000019ECE                 db  8Dh
.eh_frame:0000000000019ECF                 db    4
.eh_frame:0000000000019ED0                 db  42h ; B
.eh_frame:0000000000019ED1                 db  0Eh
.eh_frame:0000000000019ED2                 db  28h ; (
.eh_frame:0000000000019ED3                 db  8Ch
.eh_frame:0000000000019ED4                 db    5
.eh_frame:0000000000019ED5                 db  44h ; D
.eh_frame:0000000000019ED6                 db  0Eh
.eh_frame:0000000000019ED7                 db  30h ; 0
.eh_frame:0000000000019ED8                 db  86h
.eh_frame:0000000000019ED9                 db    6
.eh_frame:0000000000019EDA                 db  41h ; A
.eh_frame:0000000000019EDB                 db  0Eh
.eh_frame:0000000000019EDC                 db  38h ; 8
.eh_frame:0000000000019EDD                 db  83h
.eh_frame:0000000000019EDE                 db    7
.eh_frame:0000000000019EDF                 db  49h ; I
.eh_frame:0000000000019EE0                 db  0Eh
.eh_frame:0000000000019EE1                 db  40h ; @
.eh_frame:0000000000019EE2                 db    2
.eh_frame:0000000000019EE3                 db  8Ch
.eh_frame:0000000000019EE4                 db  0Ah
.eh_frame:0000000000019EE5                 db  0Eh
.eh_frame:0000000000019EE6                 db  38h ; 8
.eh_frame:0000000000019EE7                 db  41h ; A
.eh_frame:0000000000019EE8                 db  0Eh
.eh_frame:0000000000019EE9                 db  30h ; 0
.eh_frame:0000000000019EEA                 db  41h ; A
.eh_frame:0000000000019EEB                 db  0Eh
.eh_frame:0000000000019EEC                 db  28h ; (
.eh_frame:0000000000019EED                 db  42h ; B
.eh_frame:0000000000019EEE                 db  0Eh
.eh_frame:0000000000019EEF                 db  20h
.eh_frame:0000000000019EF0                 db  42h ; B
.eh_frame:0000000000019EF1                 db  0Eh
.eh_frame:0000000000019EF2                 db  18h
.eh_frame:0000000000019EF3                 db  42h ; B
.eh_frame:0000000000019EF4                 db  0Eh
.eh_frame:0000000000019EF5                 db  10h
.eh_frame:0000000000019EF6                 db  42h ; B
.eh_frame:0000000000019EF7                 db  0Eh
.eh_frame:0000000000019EF8                 db    8
.eh_frame:0000000000019EF9                 db  44h ; D
.eh_frame:0000000000019EFA                 db  0Bh
.eh_frame:0000000000019EFB                 db  50h ; P
.eh_frame:0000000000019EFC                 db  0Ah
.eh_frame:0000000000019EFD                 db  0Eh
.eh_frame:0000000000019EFE                 db  38h ; 8
.eh_frame:0000000000019EFF                 db  46h ; F
.eh_frame:0000000000019F00                 db  0Eh
.eh_frame:0000000000019F01                 db  30h ; 0
.eh_frame:0000000000019F02                 db  41h ; A
.eh_frame:0000000000019F03                 db  0Eh
.eh_frame:0000000000019F04                 db  28h ; (
.eh_frame:0000000000019F05                 db  42h ; B
.eh_frame:0000000000019F06                 db  0Eh
.eh_frame:0000000000019F07                 db  20h
.eh_frame:0000000000019F08                 db  42h ; B
.eh_frame:0000000000019F09                 db  0Eh
.eh_frame:0000000000019F0A                 db  18h
.eh_frame:0000000000019F0B                 db  42h ; B
.eh_frame:0000000000019F0C                 db  0Eh
.eh_frame:0000000000019F0D                 db  10h
.eh_frame:0000000000019F0E                 db  42h ; B
.eh_frame:0000000000019F0F                 db  0Eh
.eh_frame:0000000000019F10                 db    8
.eh_frame:0000000000019F11                 db  41h ; A
.eh_frame:0000000000019F12                 db  0Bh
.eh_frame:0000000000019F13                 db    3
.eh_frame:0000000000019F14                 db    4
.eh_frame:0000000000019F15                 db    1
.eh_frame:0000000000019F16                 db  0Ah
.eh_frame:0000000000019F17                 db  0Eh
.eh_frame:0000000000019F18                 db  38h ; 8
.eh_frame:0000000000019F19                 db  41h ; A
.eh_frame:0000000000019F1A                 db  0Eh
.eh_frame:0000000000019F1B                 db  30h ; 0
.eh_frame:0000000000019F1C                 db  41h ; A
.eh_frame:0000000000019F1D                 db  0Eh
.eh_frame:0000000000019F1E                 db  28h ; (
.eh_frame:0000000000019F1F                 db  42h ; B
.eh_frame:0000000000019F20                 db  0Eh
.eh_frame:0000000000019F21                 db  20h
.eh_frame:0000000000019F22                 db  44h ; D
.eh_frame:0000000000019F23                 db  0Eh
.eh_frame:0000000000019F24                 db  18h
.eh_frame:0000000000019F25                 db  42h ; B
.eh_frame:0000000000019F26                 db  0Eh
.eh_frame:0000000000019F27                 db  10h
.eh_frame:0000000000019F28                 db  42h ; B
.eh_frame:0000000000019F29                 db  0Eh
.eh_frame:0000000000019F2A                 db    8
.eh_frame:0000000000019F2B                 db  48h ; H
.eh_frame:0000000000019F2C                 db  0Bh
.eh_frame:0000000000019F2D                 db    0
.eh_frame:0000000000019F2E                 db    0
.eh_frame:0000000000019F2F                 db    0
.eh_frame:0000000000019F30                 db  1Ch
.eh_frame:0000000000019F31                 db    0
.eh_frame:0000000000019F32                 db    0
.eh_frame:0000000000019F33                 db    0
.eh_frame:0000000000019F34                 db  14h
.eh_frame:0000000000019F35                 db    6
.eh_frame:0000000000019F36                 db    0
.eh_frame:0000000000019F37                 db    0
.eh_frame:0000000000019F38                 db 0B8h
.eh_frame:0000000000019F39                 db 0BCh
.eh_frame:0000000000019F3A                 db 0FEh
.eh_frame:0000000000019F3B                 db 0FFh
.eh_frame:0000000000019F3C                 db  2Ah ; *
.eh_frame:0000000000019F3D                 db    0
.eh_frame:0000000000019F3E                 db    0
.eh_frame:0000000000019F3F                 db    0
.eh_frame:0000000000019F40                 db    0
.eh_frame:0000000000019F41                 db  41h ; A
.eh_frame:0000000000019F42                 db  0Eh
.eh_frame:0000000000019F43                 db  10h
.eh_frame:0000000000019F44                 db  83h
.eh_frame:0000000000019F45                 db    2
.eh_frame:0000000000019F46                 db  4Eh ; N
.eh_frame:0000000000019F47                 db  0Ah
.eh_frame:0000000000019F48                 db  0Eh
.eh_frame:0000000000019F49                 db    8
.eh_frame:0000000000019F4A                 db  41h ; A
.eh_frame:0000000000019F4B                 db  0Bh
.eh_frame:0000000000019F4C                 db  59h ; Y
.eh_frame:0000000000019F4D                 db  0Eh
.eh_frame:0000000000019F4E                 db    8
.eh_frame:0000000000019F4F                 db    0
.eh_frame:0000000000019F50                 db  2Ch ; ,
.eh_frame:0000000000019F51                 db    0
.eh_frame:0000000000019F52                 db    0
.eh_frame:0000000000019F53                 db    0
.eh_frame:0000000000019F54                 db  34h ; 4
.eh_frame:0000000000019F55                 db    6
.eh_frame:0000000000019F56                 db    0
.eh_frame:0000000000019F57                 db    0
.eh_frame:0000000000019F58                 db 0C8h
.eh_frame:0000000000019F59                 db 0BCh
.eh_frame:0000000000019F5A                 db 0FEh
.eh_frame:0000000000019F5B                 db 0FFh
.eh_frame:0000000000019F5C                 db  0Ch
.eh_frame:0000000000019F5D                 db  41h ; A
.eh_frame:0000000000019F5E                 db    0
.eh_frame:0000000000019F5F                 db    0
.eh_frame:0000000000019F60                 db    0
.eh_frame:0000000000019F61                 db  41h ; A
.eh_frame:0000000000019F62                 db  0Eh
.eh_frame:0000000000019F63                 db  10h
.eh_frame:0000000000019F64                 db  86h
.eh_frame:0000000000019F65                 db    2
.eh_frame:0000000000019F66                 db  43h ; C
.eh_frame:0000000000019F67                 db  0Dh
.eh_frame:0000000000019F68                 db    6
.eh_frame:0000000000019F69                 db  48h ; H
.eh_frame:0000000000019F6A                 db  8Fh
.eh_frame:0000000000019F6B                 db    3
.eh_frame:0000000000019F6C                 db  8Eh
.eh_frame:0000000000019F6D                 db    4
.eh_frame:0000000000019F6E                 db  8Dh
.eh_frame:0000000000019F6F                 db    5
.eh_frame:0000000000019F70                 db  8Ch
.eh_frame:0000000000019F71                 db    6
.eh_frame:0000000000019F72                 db  44h ; D
.eh_frame:0000000000019F73                 db  83h
.eh_frame:0000000000019F74                 db    7
.eh_frame:0000000000019F75                 db    3
.eh_frame:0000000000019F76                 db  5Ah ; Z
.eh_frame:0000000000019F77                 db    8
.eh_frame:0000000000019F78                 db  0Ah
.eh_frame:0000000000019F79                 db  0Ch
.eh_frame:0000000000019F7A                 db    7
.eh_frame:0000000000019F7B                 db    8
.eh_frame:0000000000019F7C                 db  46h ; F
.eh_frame:0000000000019F7D                 db  0Bh
.eh_frame:0000000000019F7E                 db    0
.eh_frame:0000000000019F7F                 db    0
.eh_frame:0000000000019F80                 db  2Ch ; ,
.eh_frame:0000000000019F81                 db    0
.eh_frame:0000000000019F82                 db    0
.eh_frame:0000000000019F83                 db    0
.eh_frame:0000000000019F84                 db  64h ; d
.eh_frame:0000000000019F85                 db    6
.eh_frame:0000000000019F86                 db    0
.eh_frame:0000000000019F87                 db    0
.eh_frame:0000000000019F88                 db 0A8h
.eh_frame:0000000000019F89                 db 0FDh
.eh_frame:0000000000019F8A                 db 0FEh
.eh_frame:0000000000019F8B                 db 0FFh
.eh_frame:0000000000019F8C                 db  65h ; e
.eh_frame:0000000000019F8D                 db    1
.eh_frame:0000000000019F8E                 db    0
.eh_frame:0000000000019F8F                 db    0
.eh_frame:0000000000019F90                 db    0
.eh_frame:0000000000019F91                 db  44h ; D
.eh_frame:0000000000019F92                 db  0Eh
.eh_frame:0000000000019F93                 db  20h
.eh_frame:0000000000019F94                 db    2
.eh_frame:0000000000019F95                 db  59h ; Y
.eh_frame:0000000000019F96                 db  0Eh
.eh_frame:0000000000019F97                 db  28h ; (
.eh_frame:0000000000019F98                 db  45h ; E
.eh_frame:0000000000019F99                 db  0Eh
.eh_frame:0000000000019F9A                 db  30h ; 0
.eh_frame:0000000000019F9B                 db  5Ch ; \
.eh_frame:0000000000019F9C                 db  0Eh
.eh_frame:0000000000019F9D                 db  38h ; 8
.eh_frame:0000000000019F9E                 db  42h ; B
.eh_frame:0000000000019F9F                 db  0Eh
.eh_frame:0000000000019FA0                 db  40h ; @
.eh_frame:0000000000019FA1                 db  49h ; I
.eh_frame:0000000000019FA2                 db  0Eh
.eh_frame:0000000000019FA3                 db  20h
.eh_frame:0000000000019FA4                 db  54h ; T
.eh_frame:0000000000019FA5                 db  0Ah
.eh_frame:0000000000019FA6                 db  0Eh
.eh_frame:0000000000019FA7                 db    8
.eh_frame:0000000000019FA8                 db  43h ; C
.eh_frame:0000000000019FA9                 db  0Bh
.eh_frame:0000000000019FAA                 db    0
.eh_frame:0000000000019FAB                 db    0
.eh_frame:0000000000019FAC                 db    0
.eh_frame:0000000000019FAD                 db    0
.eh_frame:0000000000019FAE                 db    0
.eh_frame:0000000000019FAF                 db    0
.eh_frame:0000000000019FB0                 db  10h
.eh_frame:0000000000019FB1                 db    0
.eh_frame:0000000000019FB2                 db    0
.eh_frame:0000000000019FB3                 db    0
.eh_frame:0000000000019FB4                 db  94h
.eh_frame:0000000000019FB5                 db    6
.eh_frame:0000000000019FB6                 db    0
.eh_frame:0000000000019FB7                 db    0
.eh_frame:0000000000019FB8                 db 0E8h
.eh_frame:0000000000019FB9                 db 0FEh
.eh_frame:0000000000019FBA                 db 0FEh
.eh_frame:0000000000019FBB                 db 0FFh
.eh_frame:0000000000019FBC                 db  0Ch
.eh_frame:0000000000019FBD                 db    0
.eh_frame:0000000000019FBE                 db    0
.eh_frame:0000000000019FBF                 db    0
.eh_frame:0000000000019FC0                 db    0
.eh_frame:0000000000019FC1                 db    0
.eh_frame:0000000000019FC2                 db    0
.eh_frame:0000000000019FC3                 db    0
.eh_frame:0000000000019FC4                 db  10h
.eh_frame:0000000000019FC5                 db    0
.eh_frame:0000000000019FC6                 db    0
.eh_frame:0000000000019FC7                 db    0
.eh_frame:0000000000019FC8                 db 0A8h
.eh_frame:0000000000019FC9                 db    6
.eh_frame:0000000000019FCA                 db    0
.eh_frame:0000000000019FCB                 db    0
.eh_frame:0000000000019FCC                 db 0E4h
.eh_frame:0000000000019FCD                 db 0FEh
.eh_frame:0000000000019FCE                 db 0FEh
.eh_frame:0000000000019FCF                 db 0FFh
.eh_frame:0000000000019FD0                 db  1Ch
.eh_frame:0000000000019FD1                 db    0
.eh_frame:0000000000019FD2                 db    0
.eh_frame:0000000000019FD3                 db    0
.eh_frame:0000000000019FD4                 db    0
.eh_frame:0000000000019FD5                 db    0
.eh_frame:0000000000019FD6                 db    0
.eh_frame:0000000000019FD7                 db    0
.eh_frame:0000000000019FD8                 db  18h
.eh_frame:0000000000019FD9                 db    0
.eh_frame:0000000000019FDA                 db    0
.eh_frame:0000000000019FDB                 db    0
.eh_frame:0000000000019FDC                 db 0BCh
.eh_frame:0000000000019FDD                 db    6
.eh_frame:0000000000019FDE                 db    0
.eh_frame:0000000000019FDF                 db    0
.eh_frame:0000000000019FE0                 db 0F0h
.eh_frame:0000000000019FE1                 db 0FEh
.eh_frame:0000000000019FE2                 db 0FEh
.eh_frame:0000000000019FE3                 db 0FFh
.eh_frame:0000000000019FE4                 db  16h
.eh_frame:0000000000019FE5                 db    0
.eh_frame:0000000000019FE6                 db    0
.eh_frame:0000000000019FE7                 db    0
.eh_frame:0000000000019FE8                 db    0
.eh_frame:0000000000019FE9                 db  41h ; A
.eh_frame:0000000000019FEA                 db  0Eh
.eh_frame:0000000000019FEB                 db  10h
.eh_frame:0000000000019FEC                 db  83h
.eh_frame:0000000000019FED                 db    2
.eh_frame:0000000000019FEE                 db  50h ; P
.eh_frame:0000000000019FEF                 db  0Eh
.eh_frame:0000000000019FF0                 db    8
.eh_frame:0000000000019FF1                 db    0
.eh_frame:0000000000019FF2                 db    0
.eh_frame:0000000000019FF3                 db    0
.eh_frame:0000000000019FF4                 db  20h
.eh_frame:0000000000019FF5                 db    0
.eh_frame:0000000000019FF6                 db    0
.eh_frame:0000000000019FF7                 db    0
.eh_frame:0000000000019FF8                 db 0D8h
.eh_frame:0000000000019FF9                 db    6
.eh_frame:0000000000019FFA                 db    0
.eh_frame:0000000000019FFB                 db    0
.eh_frame:0000000000019FFC                 db 0F4h
.eh_frame:0000000000019FFD                 db 0FEh
.eh_frame:0000000000019FFE                 db 0FEh
.eh_frame:0000000000019FFF                 db 0FFh
.eh_frame:000000000001A000                 db  6Ah ; j
.eh_frame:000000000001A001                 db    0
.eh_frame:000000000001A002                 db    0
.eh_frame:000000000001A003                 db    0
.eh_frame:000000000001A004                 db    0
.eh_frame:000000000001A005                 db  41h ; A
.eh_frame:000000000001A006                 db  0Eh
.eh_frame:000000000001A007                 db  10h
.eh_frame:000000000001A008                 db  83h
.eh_frame:000000000001A009                 db    2
.eh_frame:000000000001A00A                 db  44h ; D
.eh_frame:000000000001A00B                 db  0Eh
.eh_frame:000000000001A00C                 db  30h ; 0
.eh_frame:000000000001A00D                 db    2
.eh_frame:000000000001A00E                 db  5Eh ; ^
.eh_frame:000000000001A00F                 db  0Ah
.eh_frame:000000000001A010                 db  0Eh
.eh_frame:000000000001A011                 db  10h
.eh_frame:000000000001A012                 db  41h ; A
.eh_frame:000000000001A013                 db  0Eh
.eh_frame:000000000001A014                 db    8
.eh_frame:000000000001A015                 db  41h ; A
.eh_frame:000000000001A016                 db  0Bh
.eh_frame:000000000001A017                 db    0
.eh_frame:000000000001A018                 db  18h
.eh_frame:000000000001A019                 db    0
.eh_frame:000000000001A01A                 db    0
.eh_frame:000000000001A01B                 db    0
.eh_frame:000000000001A01C                 db 0FCh
.eh_frame:000000000001A01D                 db    6
.eh_frame:000000000001A01E                 db    0
.eh_frame:000000000001A01F                 db    0
.eh_frame:000000000001A020                 db  40h ; @
.eh_frame:000000000001A021                 db 0FFh
.eh_frame:000000000001A022                 db 0FEh
.eh_frame:000000000001A023                 db 0FFh
.eh_frame:000000000001A024                 db  59h ; Y
.eh_frame:000000000001A025                 db    0
.eh_frame:000000000001A026                 db    0
.eh_frame:000000000001A027                 db    0
.eh_frame:000000000001A028                 db    0
.eh_frame:000000000001A029                 db  44h ; D
.eh_frame:000000000001A02A                 db  0Eh
.eh_frame:000000000001A02B                 db  30h ; 0
.eh_frame:000000000001A02C                 db    2
.eh_frame:000000000001A02D                 db  45h ; E
.eh_frame:000000000001A02E                 db  0Ah
.eh_frame:000000000001A02F                 db  0Eh
.eh_frame:000000000001A030                 db    8
.eh_frame:000000000001A031                 db  47h ; G
.eh_frame:000000000001A032                 db  0Bh
.eh_frame:000000000001A033                 db    0
.eh_frame:000000000001A034                 db  38h ; 8
.eh_frame:000000000001A035                 db    0
.eh_frame:000000000001A036                 db    0
.eh_frame:000000000001A037                 db    0
.eh_frame:000000000001A038                 db  18h
.eh_frame:000000000001A039                 db    7
.eh_frame:000000000001A03A                 db    0
.eh_frame:000000000001A03B                 db    0
.eh_frame:000000000001A03C                 db  84h
.eh_frame:000000000001A03D                 db 0FFh
.eh_frame:000000000001A03E                 db 0FEh
.eh_frame:000000000001A03F                 db 0FFh
.eh_frame:000000000001A040                 db  79h ; y
.eh_frame:000000000001A041                 db    0
.eh_frame:000000000001A042                 db    0
.eh_frame:000000000001A043                 db    0
.eh_frame:000000000001A044                 db    0
.eh_frame:000000000001A045                 db  42h ; B
.eh_frame:000000000001A046                 db  0Eh
.eh_frame:000000000001A047                 db  10h
.eh_frame:000000000001A048                 db  8Dh
.eh_frame:000000000001A049                 db    2
.eh_frame:000000000001A04A                 db  42h ; B
.eh_frame:000000000001A04B                 db  0Eh
.eh_frame:000000000001A04C                 db  18h
.eh_frame:000000000001A04D                 db  8Ch
.eh_frame:000000000001A04E                 db    3
.eh_frame:000000000001A04F                 db  44h ; D
.eh_frame:000000000001A050                 db  0Eh
.eh_frame:000000000001A051                 db  20h
.eh_frame:000000000001A052                 db  86h
.eh_frame:000000000001A053                 db    4
.eh_frame:000000000001A054                 db  41h ; A
.eh_frame:000000000001A055                 db  0Eh
.eh_frame:000000000001A056                 db  28h ; (
.eh_frame:000000000001A057                 db  83h
.eh_frame:000000000001A058                 db    5
.eh_frame:000000000001A059                 db  4Fh ; O
.eh_frame:000000000001A05A                 db  0Eh
.eh_frame:000000000001A05B                 db  30h ; 0
.eh_frame:000000000001A05C                 db    2
.eh_frame:000000000001A05D                 db  50h ; P
.eh_frame:000000000001A05E                 db  0Ah
.eh_frame:000000000001A05F                 db  0Eh
.eh_frame:000000000001A060                 db  28h ; (
.eh_frame:000000000001A061                 db  41h ; A
.eh_frame:000000000001A062                 db  0Eh
.eh_frame:000000000001A063                 db  20h
.eh_frame:000000000001A064                 db  41h ; A
.eh_frame:000000000001A065                 db  0Eh
.eh_frame:000000000001A066                 db  18h
.eh_frame:000000000001A067                 db  42h ; B
.eh_frame:000000000001A068                 db  0Eh
.eh_frame:000000000001A069                 db  10h
.eh_frame:000000000001A06A                 db  42h ; B
.eh_frame:000000000001A06B                 db  0Eh
.eh_frame:000000000001A06C                 db    8
.eh_frame:000000000001A06D                 db  42h ; B
.eh_frame:000000000001A06E                 db  0Bh
.eh_frame:000000000001A06F                 db    0
.eh_frame:000000000001A070                 db  18h
.eh_frame:000000000001A071                 db    0
.eh_frame:000000000001A072                 db    0
.eh_frame:000000000001A073                 db    0
.eh_frame:000000000001A074                 db  54h ; T
.eh_frame:000000000001A075                 db    7
.eh_frame:000000000001A076                 db    0
.eh_frame:000000000001A077                 db    0
.eh_frame:000000000001A078                 db 0C8h
.eh_frame:000000000001A079                 db 0FFh
.eh_frame:000000000001A07A                 db 0FEh
.eh_frame:000000000001A07B                 db 0FFh
.eh_frame:000000000001A07C                 db  3Bh ; ;
.eh_frame:000000000001A07D                 db    0
.eh_frame:000000000001A07E                 db    0
.eh_frame:000000000001A07F                 db    0
.eh_frame:000000000001A080                 db    0
.eh_frame:000000000001A081                 db  59h ; Y
.eh_frame:000000000001A082                 db  0Eh
.eh_frame:000000000001A083                 db  10h
.eh_frame:000000000001A084                 db  5Ch ; \
.eh_frame:000000000001A085                 db  0Ah
.eh_frame:000000000001A086                 db  0Eh
.eh_frame:000000000001A087                 db    8
.eh_frame:000000000001A088                 db  41h ; A
.eh_frame:000000000001A089                 db  0Bh
.eh_frame:000000000001A08A                 db    0
.eh_frame:000000000001A08B                 db    0
.eh_frame:000000000001A08C                 db  10h
.eh_frame:000000000001A08D                 db    0
.eh_frame:000000000001A08E                 db    0
.eh_frame:000000000001A08F                 db    0
.eh_frame:000000000001A090                 db  70h ; p
.eh_frame:000000000001A091                 db    7
.eh_frame:000000000001A092                 db    0
.eh_frame:000000000001A093                 db    0
.eh_frame:000000000001A094                 db 0ECh
.eh_frame:000000000001A095                 db 0FFh
.eh_frame:000000000001A096                 db 0FEh
.eh_frame:000000000001A097                 db 0FFh
.eh_frame:000000000001A098                 db  0Ch
.eh_frame:000000000001A099                 db    0
.eh_frame:000000000001A09A                 db    0
.eh_frame:000000000001A09B                 db    0
.eh_frame:000000000001A09C                 db    0
.eh_frame:000000000001A09D                 db    0
.eh_frame:000000000001A09E                 db    0
.eh_frame:000000000001A09F                 db    0
.eh_frame:000000000001A0A0                 db  10h
.eh_frame:000000000001A0A1                 db    0
.eh_frame:000000000001A0A2                 db    0
.eh_frame:000000000001A0A3                 db    0
.eh_frame:000000000001A0A4                 db  84h
.eh_frame:000000000001A0A5                 db    7
.eh_frame:000000000001A0A6                 db    0
.eh_frame:000000000001A0A7                 db    0
.eh_frame:000000000001A0A8                 db 0E8h
.eh_frame:000000000001A0A9                 db 0FFh
.eh_frame:000000000001A0AA                 db 0FEh
.eh_frame:000000000001A0AB                 db 0FFh
.eh_frame:000000000001A0AC                 db  2Ah ; *
.eh_frame:000000000001A0AD                 db    0
.eh_frame:000000000001A0AE                 db    0
.eh_frame:000000000001A0AF                 db    0
.eh_frame:000000000001A0B0                 db    0
.eh_frame:000000000001A0B1                 db    0
.eh_frame:000000000001A0B2                 db    0
.eh_frame:000000000001A0B3                 db    0
.eh_frame:000000000001A0B4                 db  50h ; P
.eh_frame:000000000001A0B5                 db    0
.eh_frame:000000000001A0B6                 db    0
.eh_frame:000000000001A0B7                 db    0
.eh_frame:000000000001A0B8                 db  98h
.eh_frame:000000000001A0B9                 db    7
.eh_frame:000000000001A0BA                 db    0
.eh_frame:000000000001A0BB                 db    0
.eh_frame:000000000001A0BC                 db    4
.eh_frame:000000000001A0BD                 db    0
.eh_frame:000000000001A0BE                 db 0FFh
.eh_frame:000000000001A0BF                 db 0FFh
.eh_frame:000000000001A0C0                 db  0Dh
.eh_frame:000000000001A0C1                 db    3
.eh_frame:000000000001A0C2                 db    0
.eh_frame:000000000001A0C3                 db    0
.eh_frame:000000000001A0C4                 db    0
.eh_frame:000000000001A0C5                 db  42h ; B
.eh_frame:000000000001A0C6                 db  0Eh
.eh_frame:000000000001A0C7                 db  10h
.eh_frame:000000000001A0C8                 db  8Fh
.eh_frame:000000000001A0C9                 db    2
.eh_frame:000000000001A0CA                 db  42h ; B
.eh_frame:000000000001A0CB                 db  0Eh
.eh_frame:000000000001A0CC                 db  18h
.eh_frame:000000000001A0CD                 db  8Eh
.eh_frame:000000000001A0CE                 db    3
.eh_frame:000000000001A0CF                 db  45h ; E
.eh_frame:000000000001A0D0                 db  0Eh
.eh_frame:000000000001A0D1                 db  20h
.eh_frame:000000000001A0D2                 db  8Dh
.eh_frame:000000000001A0D3                 db    4
.eh_frame:000000000001A0D4                 db  42h ; B
.eh_frame:000000000001A0D5                 db  0Eh
.eh_frame:000000000001A0D6                 db  28h ; (
.eh_frame:000000000001A0D7                 db  8Ch
.eh_frame:000000000001A0D8                 db    5
.eh_frame:000000000001A0D9                 db  44h ; D
.eh_frame:000000000001A0DA                 db  0Eh
.eh_frame:000000000001A0DB                 db  30h ; 0
.eh_frame:000000000001A0DC                 db  86h
.eh_frame:000000000001A0DD                 db    6
.eh_frame:000000000001A0DE                 db  41h ; A
.eh_frame:000000000001A0DF                 db  0Eh
.eh_frame:000000000001A0E0                 db  38h ; 8
.eh_frame:000000000001A0E1                 db  83h
.eh_frame:000000000001A0E2                 db    7
.eh_frame:000000000001A0E3                 db  51h ; Q
.eh_frame:000000000001A0E4                 db  0Eh
.eh_frame:000000000001A0E5                 db 0D0h
.eh_frame:000000000001A0E6                 db  20h
.eh_frame:000000000001A0E7                 db    3
.eh_frame:000000000001A0E8                 db  5Dh ; ]
.eh_frame:000000000001A0E9                 db    1
.eh_frame:000000000001A0EA                 db  0Ah
.eh_frame:000000000001A0EB                 db  0Eh
.eh_frame:000000000001A0EC                 db  38h ; 8
.eh_frame:000000000001A0ED                 db  41h ; A
.eh_frame:000000000001A0EE                 db  0Eh
.eh_frame:000000000001A0EF                 db  30h ; 0
.eh_frame:000000000001A0F0                 db  41h ; A
.eh_frame:000000000001A0F1                 db  0Eh
.eh_frame:000000000001A0F2                 db  28h ; (
.eh_frame:000000000001A0F3                 db  42h ; B
.eh_frame:000000000001A0F4                 db  0Eh
.eh_frame:000000000001A0F5                 db  20h
.eh_frame:000000000001A0F6                 db  42h ; B
.eh_frame:000000000001A0F7                 db  0Eh
.eh_frame:000000000001A0F8                 db  18h
.eh_frame:000000000001A0F9                 db  42h ; B
.eh_frame:000000000001A0FA                 db  0Eh
.eh_frame:000000000001A0FB                 db  10h
.eh_frame:000000000001A0FC                 db  42h ; B
.eh_frame:000000000001A0FD                 db  0Eh
.eh_frame:000000000001A0FE                 db    8
.eh_frame:000000000001A0FF                 db  48h ; H
.eh_frame:000000000001A100                 db  0Bh
.eh_frame:000000000001A101                 db    0
.eh_frame:000000000001A102                 db    0
.eh_frame:000000000001A103                 db    0
.eh_frame:000000000001A104                 db    0
.eh_frame:000000000001A105                 db    0
.eh_frame:000000000001A106                 db    0
.eh_frame:000000000001A107                 db    0
.eh_frame:000000000001A108                 db  10h
.eh_frame:000000000001A109                 db    0
.eh_frame:000000000001A10A                 db    0
.eh_frame:000000000001A10B                 db    0
.eh_frame:000000000001A10C                 db 0ECh
.eh_frame:000000000001A10D                 db    7
.eh_frame:000000000001A10E                 db    0
.eh_frame:000000000001A10F                 db    0
.eh_frame:000000000001A110                 db 0C0h
.eh_frame:000000000001A111                 db    2
.eh_frame:000000000001A112                 db 0FFh
.eh_frame:000000000001A113                 db 0FFh
.eh_frame:000000000001A114                 db  18h
.eh_frame:000000000001A115                 db    0
.eh_frame:000000000001A116                 db    0
.eh_frame:000000000001A117                 db    0
.eh_frame:000000000001A118                 db    0
.eh_frame:000000000001A119                 db    0
.eh_frame:000000000001A11A                 db    0
.eh_frame:000000000001A11B                 db    0
.eh_frame:000000000001A11C                 db  28h ; (
.eh_frame:000000000001A11D                 db    0
.eh_frame:000000000001A11E                 db    0
.eh_frame:000000000001A11F                 db    0
.eh_frame:000000000001A120                 db    0
.eh_frame:000000000001A121                 db    8
.eh_frame:000000000001A122                 db    0
.eh_frame:000000000001A123                 db    0
.eh_frame:000000000001A124                 db 0CCh
.eh_frame:000000000001A125                 db    2
.eh_frame:000000000001A126                 db 0FFh
.eh_frame:000000000001A127                 db 0FFh
.eh_frame:000000000001A128                 db  58h ; X
.eh_frame:000000000001A129                 db    0
.eh_frame:000000000001A12A                 db    0
.eh_frame:000000000001A12B                 db    0
.eh_frame:000000000001A12C                 db    0
.eh_frame:000000000001A12D                 db  42h ; B
.eh_frame:000000000001A12E                 db  0Eh
.eh_frame:000000000001A12F                 db  10h
.eh_frame:000000000001A130                 db  8Ch
.eh_frame:000000000001A131                 db    2
.eh_frame:000000000001A132                 db  41h ; A
.eh_frame:000000000001A133                 db  0Eh
.eh_frame:000000000001A134                 db  18h
.eh_frame:000000000001A135                 db  86h
.eh_frame:000000000001A136                 db    3
.eh_frame:000000000001A137                 db  44h ; D
.eh_frame:000000000001A138                 db  0Eh
.eh_frame:000000000001A139                 db  20h
.eh_frame:000000000001A13A                 db  83h
.eh_frame:000000000001A13B                 db    4
.eh_frame:000000000001A13C                 db    2
.eh_frame:000000000001A13D                 db  4Dh ; M
.eh_frame:000000000001A13E                 db  0Eh
.eh_frame:000000000001A13F                 db  18h
.eh_frame:000000000001A140                 db  41h ; A
.eh_frame:000000000001A141                 db  0Eh
.eh_frame:000000000001A142                 db  10h
.eh_frame:000000000001A143                 db  42h ; B
.eh_frame:000000000001A144                 db  0Eh
.eh_frame:000000000001A145                 db    8
.eh_frame:000000000001A146                 db    0
.eh_frame:000000000001A147                 db    0
.eh_frame:000000000001A148                 db  10h
.eh_frame:000000000001A149                 db    0
.eh_frame:000000000001A14A                 db    0
.eh_frame:000000000001A14B                 db    0
.eh_frame:000000000001A14C                 db  2Ch ; ,
.eh_frame:000000000001A14D                 db    8
.eh_frame:000000000001A14E                 db    0
.eh_frame:000000000001A14F                 db    0
.eh_frame:000000000001A150                 db    0
.eh_frame:000000000001A151                 db    3
.eh_frame:000000000001A152                 db 0FFh
.eh_frame:000000000001A153                 db 0FFh
.eh_frame:000000000001A154                 db  11h
.eh_frame:000000000001A155                 db    0
.eh_frame:000000000001A156                 db    0
.eh_frame:000000000001A157                 db    0
.eh_frame:000000000001A158                 db    0
.eh_frame:000000000001A159                 db    0
.eh_frame:000000000001A15A                 db    0
.eh_frame:000000000001A15B                 db    0
.eh_frame:000000000001A15C                 db  48h ; H
.eh_frame:000000000001A15D                 db    0
.eh_frame:000000000001A15E                 db    0
.eh_frame:000000000001A15F                 db    0
.eh_frame:000000000001A160                 db  40h ; @
.eh_frame:000000000001A161                 db    8
.eh_frame:000000000001A162                 db    0
.eh_frame:000000000001A163                 db    0
.eh_frame:000000000001A164                 db  0Ch
.eh_frame:000000000001A165                 db    3
.eh_frame:000000000001A166                 db 0FFh
.eh_frame:000000000001A167                 db 0FFh
.eh_frame:000000000001A168                 db  61h ; a
.eh_frame:000000000001A169                 db    1
.eh_frame:000000000001A16A                 db    0
.eh_frame:000000000001A16B                 db    0
.eh_frame:000000000001A16C                 db    0
.eh_frame:000000000001A16D                 db  42h ; B
.eh_frame:000000000001A16E                 db  0Eh
.eh_frame:000000000001A16F                 db  10h
.eh_frame:000000000001A170                 db  8Fh
.eh_frame:000000000001A171                 db    2
.eh_frame:000000000001A172                 db  42h ; B
.eh_frame:000000000001A173                 db  0Eh
.eh_frame:000000000001A174                 db  18h
.eh_frame:000000000001A175                 db  8Eh
.eh_frame:000000000001A176                 db    3
.eh_frame:000000000001A177                 db  45h ; E
.eh_frame:000000000001A178                 db  0Eh
.eh_frame:000000000001A179                 db  20h
.eh_frame:000000000001A17A                 db  8Dh
.eh_frame:000000000001A17B                 db    4
.eh_frame:000000000001A17C                 db  42h ; B
.eh_frame:000000000001A17D                 db  0Eh
.eh_frame:000000000001A17E                 db  28h ; (
.eh_frame:000000000001A17F                 db  8Ch
.eh_frame:000000000001A180                 db    5
.eh_frame:000000000001A181                 db  44h ; D
.eh_frame:000000000001A182                 db  0Eh
.eh_frame:000000000001A183                 db  30h ; 0
.eh_frame:000000000001A184                 db  86h
.eh_frame:000000000001A185                 db    6
.eh_frame:000000000001A186                 db  41h ; A
.eh_frame:000000000001A187                 db  0Eh
.eh_frame:000000000001A188                 db  38h ; 8
.eh_frame:000000000001A189                 db  83h
.eh_frame:000000000001A18A                 db    7
.eh_frame:000000000001A18B                 db  4Fh ; O
.eh_frame:000000000001A18C                 db  0Eh
.eh_frame:000000000001A18D                 db  80h
.eh_frame:000000000001A18E                 db    3
.eh_frame:000000000001A18F                 db    2
.eh_frame:000000000001A190                 db 0C1h
.eh_frame:000000000001A191                 db  0Ah
.eh_frame:000000000001A192                 db  0Eh
.eh_frame:000000000001A193                 db  38h ; 8
.eh_frame:000000000001A194                 db  41h ; A
.eh_frame:000000000001A195                 db  0Eh
.eh_frame:000000000001A196                 db  30h ; 0
.eh_frame:000000000001A197                 db  41h ; A
.eh_frame:000000000001A198                 db  0Eh
.eh_frame:000000000001A199                 db  28h ; (
.eh_frame:000000000001A19A                 db  42h ; B
.eh_frame:000000000001A19B                 db  0Eh
.eh_frame:000000000001A19C                 db  20h
.eh_frame:000000000001A19D                 db  42h ; B
.eh_frame:000000000001A19E                 db  0Eh
.eh_frame:000000000001A19F                 db  18h
.eh_frame:000000000001A1A0                 db  42h ; B
.eh_frame:000000000001A1A1                 db  0Eh
.eh_frame:000000000001A1A2                 db  10h
.eh_frame:000000000001A1A3                 db  42h ; B
.eh_frame:000000000001A1A4                 db  0Eh
.eh_frame:000000000001A1A5                 db    8
.eh_frame:000000000001A1A6                 db  46h ; F
.eh_frame:000000000001A1A7                 db  0Bh
.eh_frame:000000000001A1A8                 db  44h ; D
.eh_frame:000000000001A1A9                 db    0
.eh_frame:000000000001A1AA                 db    0
.eh_frame:000000000001A1AB                 db    0
.eh_frame:000000000001A1AC                 db  8Ch
.eh_frame:000000000001A1AD                 db    8
.eh_frame:000000000001A1AE                 db    0
.eh_frame:000000000001A1AF                 db    0
.eh_frame:000000000001A1B0                 db  30h ; 0
.eh_frame:000000000001A1B1                 db    4
.eh_frame:000000000001A1B2                 db 0FFh
.eh_frame:000000000001A1B3                 db 0FFh
.eh_frame:000000000001A1B4                 db  52h ; R
.eh_frame:000000000001A1B5                 db    1
.eh_frame:000000000001A1B6                 db    0
.eh_frame:000000000001A1B7                 db    0
.eh_frame:000000000001A1B8                 db    0
.eh_frame:000000000001A1B9                 db  42h ; B
.eh_frame:000000000001A1BA                 db  0Eh
.eh_frame:000000000001A1BB                 db  10h
.eh_frame:000000000001A1BC                 db  8Eh
.eh_frame:000000000001A1BD                 db    2
.eh_frame:000000000001A1BE                 db  42h ; B
.eh_frame:000000000001A1BF                 db  0Eh
.eh_frame:000000000001A1C0                 db  18h
.eh_frame:000000000001A1C1                 db  8Dh
.eh_frame:000000000001A1C2                 db    3
.eh_frame:000000000001A1C3                 db  42h ; B
.eh_frame:000000000001A1C4                 db  0Eh
.eh_frame:000000000001A1C5                 db  20h
.eh_frame:000000000001A1C6                 db  8Ch
.eh_frame:000000000001A1C7                 db    4
.eh_frame:000000000001A1C8                 db  41h ; A
.eh_frame:000000000001A1C9                 db  0Eh
.eh_frame:000000000001A1CA                 db  28h ; (
.eh_frame:000000000001A1CB                 db  86h
.eh_frame:000000000001A1CC                 db    5
.eh_frame:000000000001A1CD                 db  44h ; D
.eh_frame:000000000001A1CE                 db  0Eh
.eh_frame:000000000001A1CF                 db  30h ; 0
.eh_frame:000000000001A1D0                 db  83h
.eh_frame:000000000001A1D1                 db    6
.eh_frame:000000000001A1D2                 db  4Ch ; L
.eh_frame:000000000001A1D3                 db  0Eh
.eh_frame:000000000001A1D4                 db 0E0h
.eh_frame:000000000001A1D5                 db    2
.eh_frame:000000000001A1D6                 db    2
.eh_frame:000000000001A1D7                 db 0B2h
.eh_frame:000000000001A1D8                 db  0Ah
.eh_frame:000000000001A1D9                 db  0Eh
.eh_frame:000000000001A1DA                 db  30h ; 0
.eh_frame:000000000001A1DB                 db  41h ; A
.eh_frame:000000000001A1DC                 db  0Eh
.eh_frame:000000000001A1DD                 db  28h ; (
.eh_frame:000000000001A1DE                 db  41h ; A
.eh_frame:000000000001A1DF                 db  0Eh
.eh_frame:000000000001A1E0                 db  20h
.eh_frame:000000000001A1E1                 db  42h ; B
.eh_frame:000000000001A1E2                 db  0Eh
.eh_frame:000000000001A1E3                 db  18h
.eh_frame:000000000001A1E4                 db  42h ; B
.eh_frame:000000000001A1E5                 db  0Eh
.eh_frame:000000000001A1E6                 db  10h
.eh_frame:000000000001A1E7                 db  42h ; B
.eh_frame:000000000001A1E8                 db  0Eh
.eh_frame:000000000001A1E9                 db    8
.eh_frame:000000000001A1EA                 db  47h ; G
.eh_frame:000000000001A1EB                 db  0Bh
.eh_frame:000000000001A1EC                 db    0
.eh_frame:000000000001A1ED                 db    0
.eh_frame:000000000001A1EE                 db    0
.eh_frame:000000000001A1EF                 db    0
.eh_frame:000000000001A1F0                 db  34h ; 4
.eh_frame:000000000001A1F1                 db    0
.eh_frame:000000000001A1F2                 db    0
.eh_frame:000000000001A1F3                 db    0
.eh_frame:000000000001A1F4                 db 0D4h
.eh_frame:000000000001A1F5                 db    8
.eh_frame:000000000001A1F6                 db    0
.eh_frame:000000000001A1F7                 db    0
.eh_frame:000000000001A1F8                 db  48h ; H
.eh_frame:000000000001A1F9                 db    5
.eh_frame:000000000001A1FA                 db 0FFh
.eh_frame:000000000001A1FB                 db 0FFh
.eh_frame:000000000001A1FC                 db  8Ch
.eh_frame:000000000001A1FD                 db    0
.eh_frame:000000000001A1FE                 db    0
.eh_frame:000000000001A1FF                 db    0
.eh_frame:000000000001A200                 db    0
.eh_frame:000000000001A201                 db  42h ; B
.eh_frame:000000000001A202                 db  0Eh
.eh_frame:000000000001A203                 db  10h
.eh_frame:000000000001A204                 db  8Ch
.eh_frame:000000000001A205                 db    2
.eh_frame:000000000001A206                 db  41h ; A
.eh_frame:000000000001A207                 db  0Eh
.eh_frame:000000000001A208                 db  18h
.eh_frame:000000000001A209                 db  86h
.eh_frame:000000000001A20A                 db    3
.eh_frame:000000000001A20B                 db  44h ; D
.eh_frame:000000000001A20C                 db  0Eh
.eh_frame:000000000001A20D                 db  20h
.eh_frame:000000000001A20E                 db  83h
.eh_frame:000000000001A20F                 db    4
.eh_frame:000000000001A210                 db    2
.eh_frame:000000000001A211                 db  4Eh ; N
.eh_frame:000000000001A212                 db  0Ah
.eh_frame:000000000001A213                 db  0Eh
.eh_frame:000000000001A214                 db  18h
.eh_frame:000000000001A215                 db  41h ; A
.eh_frame:000000000001A216                 db  0Eh
.eh_frame:000000000001A217                 db  10h
.eh_frame:000000000001A218                 db  42h ; B
.eh_frame:000000000001A219                 db  0Eh
.eh_frame:000000000001A21A                 db    8
.eh_frame:000000000001A21B                 db  48h ; H
.eh_frame:000000000001A21C                 db  0Bh
.eh_frame:000000000001A21D                 db  68h ; h
.eh_frame:000000000001A21E                 db  0Eh
.eh_frame:000000000001A21F                 db  18h
.eh_frame:000000000001A220                 db  41h ; A
.eh_frame:000000000001A221                 db  0Eh
.eh_frame:000000000001A222                 db  10h
.eh_frame:000000000001A223                 db  42h ; B
.eh_frame:000000000001A224                 db  0Eh
.eh_frame:000000000001A225                 db    8
.eh_frame:000000000001A226                 db    0
.eh_frame:000000000001A227                 db    0
.eh_frame:000000000001A228                 db  2Ch ; ,
.eh_frame:000000000001A229                 db    0
.eh_frame:000000000001A22A                 db    0
.eh_frame:000000000001A22B                 db    0
.eh_frame:000000000001A22C                 db  0Ch
.eh_frame:000000000001A22D                 db    9
.eh_frame:000000000001A22E                 db    0
.eh_frame:000000000001A22F                 db    0
.eh_frame:000000000001A230                 db 0A0h
.eh_frame:000000000001A231                 db    5
.eh_frame:000000000001A232                 db 0FFh
.eh_frame:000000000001A233                 db 0FFh
.eh_frame:000000000001A234                 db  50h ; P
.eh_frame:000000000001A235                 db    0
.eh_frame:000000000001A236                 db    0
.eh_frame:000000000001A237                 db    0
.eh_frame:000000000001A238                 db    0
.eh_frame:000000000001A239                 db  42h ; B
.eh_frame:000000000001A23A                 db  0Eh
.eh_frame:000000000001A23B                 db  10h
.eh_frame:000000000001A23C                 db  8Ch
.eh_frame:000000000001A23D                 db    2
.eh_frame:000000000001A23E                 db  41h ; A
.eh_frame:000000000001A23F                 db  0Eh
.eh_frame:000000000001A240                 db  18h
.eh_frame:000000000001A241                 db  86h
.eh_frame:000000000001A242                 db    3
.eh_frame:000000000001A243                 db  44h ; D
.eh_frame:000000000001A244                 db  0Eh
.eh_frame:000000000001A245                 db  20h
.eh_frame:000000000001A246                 db  83h
.eh_frame:000000000001A247                 db    4
.eh_frame:000000000001A248                 db    2
.eh_frame:000000000001A249                 db  45h ; E
.eh_frame:000000000001A24A                 db  0Eh
.eh_frame:000000000001A24B                 db  18h
.eh_frame:000000000001A24C                 db  41h ; A
.eh_frame:000000000001A24D                 db  0Eh
.eh_frame:000000000001A24E                 db  10h
.eh_frame:000000000001A24F                 db  42h ; B
.eh_frame:000000000001A250                 db  0Eh
.eh_frame:000000000001A251                 db    8
.eh_frame:000000000001A252                 db    0
.eh_frame:000000000001A253                 db    0
.eh_frame:000000000001A254                 db    0
.eh_frame:000000000001A255                 db    0
.eh_frame:000000000001A256                 db    0
.eh_frame:000000000001A257                 db    0
.eh_frame:000000000001A258                 db  4Ch ; L
.eh_frame:000000000001A259                 db    0
.eh_frame:000000000001A25A                 db    0
.eh_frame:000000000001A25B                 db    0
.eh_frame:000000000001A25C                 db  3Ch ; <
.eh_frame:000000000001A25D                 db    9
.eh_frame:000000000001A25E                 db    0
.eh_frame:000000000001A25F                 db    0
.eh_frame:000000000001A260                 db 0C0h
.eh_frame:000000000001A261                 db    5
.eh_frame:000000000001A262                 db 0FFh
.eh_frame:000000000001A263                 db 0FFh
.eh_frame:000000000001A264                 db 0EFh
.eh_frame:000000000001A265                 db    0
.eh_frame:000000000001A266                 db    0
.eh_frame:000000000001A267                 db    0
.eh_frame:000000000001A268                 db    0
.eh_frame:000000000001A269                 db  42h ; B
.eh_frame:000000000001A26A                 db  0Eh
.eh_frame:000000000001A26B                 db  10h
.eh_frame:000000000001A26C                 db  8Fh
.eh_frame:000000000001A26D                 db    2
.eh_frame:000000000001A26E                 db  42h ; B
.eh_frame:000000000001A26F                 db  0Eh
.eh_frame:000000000001A270                 db  18h
.eh_frame:000000000001A271                 db  8Eh
.eh_frame:000000000001A272                 db    3
.eh_frame:000000000001A273                 db  47h ; G
.eh_frame:000000000001A274                 db  0Eh
.eh_frame:000000000001A275                 db  20h
.eh_frame:000000000001A276                 db  8Dh
.eh_frame:000000000001A277                 db    4
.eh_frame:000000000001A278                 db  42h ; B
.eh_frame:000000000001A279                 db  0Eh
.eh_frame:000000000001A27A                 db  28h ; (
.eh_frame:000000000001A27B                 db  8Ch
.eh_frame:000000000001A27C                 db    5
.eh_frame:000000000001A27D                 db  44h ; D
.eh_frame:000000000001A27E                 db  0Eh
.eh_frame:000000000001A27F                 db  30h ; 0
.eh_frame:000000000001A280                 db  86h
.eh_frame:000000000001A281                 db    6
.eh_frame:000000000001A282                 db  41h ; A
.eh_frame:000000000001A283                 db  0Eh
.eh_frame:000000000001A284                 db  38h ; 8
.eh_frame:000000000001A285                 db  83h
.eh_frame:000000000001A286                 db    7
.eh_frame:000000000001A287                 db  5Ch ; \
.eh_frame:000000000001A288                 db  0Eh
.eh_frame:000000000001A289                 db  40h ; @
.eh_frame:000000000001A28A                 db    2
.eh_frame:000000000001A28B                 db  61h ; a
.eh_frame:000000000001A28C                 db  0Ah
.eh_frame:000000000001A28D                 db  0Eh
.eh_frame:000000000001A28E                 db  38h ; 8
.eh_frame:000000000001A28F                 db  44h ; D
.eh_frame:000000000001A290                 db  0Eh
.eh_frame:000000000001A291                 db  30h ; 0
.eh_frame:000000000001A292                 db  41h ; A
.eh_frame:000000000001A293                 db  0Eh
.eh_frame:000000000001A294                 db  28h ; (
.eh_frame:000000000001A295                 db  42h ; B
.eh_frame:000000000001A296                 db  0Eh
.eh_frame:000000000001A297                 db  20h
.eh_frame:000000000001A298                 db  42h ; B
.eh_frame:000000000001A299                 db  0Eh
.eh_frame:000000000001A29A                 db  18h
.eh_frame:000000000001A29B                 db  42h ; B
.eh_frame:000000000001A29C                 db  0Eh
.eh_frame:000000000001A29D                 db  10h
.eh_frame:000000000001A29E                 db  42h ; B
.eh_frame:000000000001A29F                 db  0Eh
.eh_frame:000000000001A2A0                 db    8
.eh_frame:000000000001A2A1                 db  44h ; D
.eh_frame:000000000001A2A2                 db  0Bh
.eh_frame:000000000001A2A3                 db    0
.eh_frame:000000000001A2A4                 db    0
.eh_frame:000000000001A2A5                 db    0
.eh_frame:000000000001A2A6                 db    0
.eh_frame:000000000001A2A7                 db    0
.eh_frame:000000000001A2A8                 db  18h
.eh_frame:000000000001A2A9                 db    0
.eh_frame:000000000001A2AA                 db    0
.eh_frame:000000000001A2AB                 db    0
.eh_frame:000000000001A2AC                 db  8Ch
.eh_frame:000000000001A2AD                 db    9
.eh_frame:000000000001A2AE                 db    0
.eh_frame:000000000001A2AF                 db    0
.eh_frame:000000000001A2B0                 db  60h ; `
.eh_frame:000000000001A2B1                 db    6
.eh_frame:000000000001A2B2                 db 0FFh
.eh_frame:000000000001A2B3                 db 0FFh
.eh_frame:000000000001A2B4                 db  46h ; F
.eh_frame:000000000001A2B5                 db    0
.eh_frame:000000000001A2B6                 db    0
.eh_frame:000000000001A2B7                 db    0
.eh_frame:000000000001A2B8                 db    0
.eh_frame:000000000001A2B9                 db  44h ; D
.eh_frame:000000000001A2BA                 db  0Eh
.eh_frame:000000000001A2BB                 db  10h
.eh_frame:000000000001A2BC                 db  83h
.eh_frame:000000000001A2BD                 db    2
.eh_frame:000000000001A2BE                 db  59h ; Y
.eh_frame:000000000001A2BF                 db  0Ah
.eh_frame:000000000001A2C0                 db  0Eh
.eh_frame:000000000001A2C1                 db    8
.eh_frame:000000000001A2C2                 db  43h ; C
.eh_frame:000000000001A2C3                 db  0Bh
.eh_frame:000000000001A2C4                 db  50h ; P
.eh_frame:000000000001A2C5                 db    0
.eh_frame:000000000001A2C6                 db    0
.eh_frame:000000000001A2C7                 db    0
.eh_frame:000000000001A2C8                 db 0A8h
.eh_frame:000000000001A2C9                 db    9
.eh_frame:000000000001A2CA                 db    0
.eh_frame:000000000001A2CB                 db    0
.eh_frame:000000000001A2CC                 db  94h
.eh_frame:000000000001A2CD                 db    6
.eh_frame:000000000001A2CE                 db 0FFh
.eh_frame:000000000001A2CF                 db 0FFh
.eh_frame:000000000001A2D0                 db  12h
.eh_frame:000000000001A2D1                 db    6
.eh_frame:000000000001A2D2                 db    0
.eh_frame:000000000001A2D3                 db    0
.eh_frame:000000000001A2D4                 db    0
.eh_frame:000000000001A2D5                 db  42h ; B
.eh_frame:000000000001A2D6                 db  0Eh
.eh_frame:000000000001A2D7                 db  10h
.eh_frame:000000000001A2D8                 db  8Fh
.eh_frame:000000000001A2D9                 db    2
.eh_frame:000000000001A2DA                 db  42h ; B
.eh_frame:000000000001A2DB                 db  0Eh
.eh_frame:000000000001A2DC                 db  18h
.eh_frame:000000000001A2DD                 db  8Eh
.eh_frame:000000000001A2DE                 db    3
.eh_frame:000000000001A2DF                 db  42h ; B
.eh_frame:000000000001A2E0                 db  0Eh
.eh_frame:000000000001A2E1                 db  20h
.eh_frame:000000000001A2E2                 db  8Dh
.eh_frame:000000000001A2E3                 db    4
.eh_frame:000000000001A2E4                 db  42h ; B
.eh_frame:000000000001A2E5                 db  0Eh
.eh_frame:000000000001A2E6                 db  28h ; (
.eh_frame:000000000001A2E7                 db  8Ch
.eh_frame:000000000001A2E8                 db    5
.eh_frame:000000000001A2E9                 db  41h ; A
.eh_frame:000000000001A2EA                 db  0Eh
.eh_frame:000000000001A2EB                 db  30h ; 0
.eh_frame:000000000001A2EC                 db  86h
.eh_frame:000000000001A2ED                 db    6
.eh_frame:000000000001A2EE                 db  41h ; A
.eh_frame:000000000001A2EF                 db  0Eh
.eh_frame:000000000001A2F0                 db  38h ; 8
.eh_frame:000000000001A2F1                 db  83h
.eh_frame:000000000001A2F2                 db    7
.eh_frame:000000000001A2F3                 db  4Ah ; J
.eh_frame:000000000001A2F4                 db  0Eh
.eh_frame:000000000001A2F5                 db 0C0h
.eh_frame:000000000001A2F6                 db    1
.eh_frame:000000000001A2F7                 db    3
.eh_frame:000000000001A2F8                 db  9Ah
.eh_frame:000000000001A2F9                 db    3
.eh_frame:000000000001A2FA                 db  0Ah
.eh_frame:000000000001A2FB                 db  0Eh
.eh_frame:000000000001A2FC                 db  38h ; 8
.eh_frame:000000000001A2FD                 db  41h ; A
.eh_frame:000000000001A2FE                 db  0Eh
.eh_frame:000000000001A2FF                 db  30h ; 0
.eh_frame:000000000001A300                 db  41h ; A
.eh_frame:000000000001A301                 db  0Eh
.eh_frame:000000000001A302                 db  28h ; (
.eh_frame:000000000001A303                 db  42h ; B
.eh_frame:000000000001A304                 db  0Eh
.eh_frame:000000000001A305                 db  20h
.eh_frame:000000000001A306                 db  42h ; B
.eh_frame:000000000001A307                 db  0Eh
.eh_frame:000000000001A308                 db  18h
.eh_frame:000000000001A309                 db  42h ; B
.eh_frame:000000000001A30A                 db  0Eh
.eh_frame:000000000001A30B                 db  10h
.eh_frame:000000000001A30C                 db  42h ; B
.eh_frame:000000000001A30D                 db  0Eh
.eh_frame:000000000001A30E                 db    8
.eh_frame:000000000001A30F                 db  48h ; H
.eh_frame:000000000001A310                 db  0Bh
.eh_frame:000000000001A311                 db    0
.eh_frame:000000000001A312                 db    0
.eh_frame:000000000001A313                 db    0
.eh_frame:000000000001A314                 db    0
.eh_frame:000000000001A315                 db    0
.eh_frame:000000000001A316                 db    0
.eh_frame:000000000001A317                 db    0
.eh_frame:000000000001A318                 db  14h
.eh_frame:000000000001A319                 db    0
.eh_frame:000000000001A31A                 db    0
.eh_frame:000000000001A31B                 db    0
.eh_frame:000000000001A31C                 db 0FCh
.eh_frame:000000000001A31D                 db    9
.eh_frame:000000000001A31E                 db    0
.eh_frame:000000000001A31F                 db    0
.eh_frame:000000000001A320                 db  60h ; `
.eh_frame:000000000001A321                 db  0Ch
.eh_frame:000000000001A322                 db 0FFh
.eh_frame:000000000001A323                 db 0FFh
.eh_frame:000000000001A324                 db  0Ah
.eh_frame:000000000001A325                 db    0
.eh_frame:000000000001A326                 db    0
.eh_frame:000000000001A327                 db    0
.eh_frame:000000000001A328                 db    0
.eh_frame:000000000001A329                 db    0
.eh_frame:000000000001A32A                 db    0
.eh_frame:000000000001A32B                 db    0
.eh_frame:000000000001A32C                 db    0
.eh_frame:000000000001A32D                 db    0
.eh_frame:000000000001A32E                 db    0
.eh_frame:000000000001A32F                 db    0
.eh_frame:000000000001A330                 db  14h
.eh_frame:000000000001A331                 db    0
.eh_frame:000000000001A332                 db    0
.eh_frame:000000000001A333                 db    0
.eh_frame:000000000001A334                 db  14h
.eh_frame:000000000001A335                 db  0Ah
.eh_frame:000000000001A336                 db    0
.eh_frame:000000000001A337                 db    0
.eh_frame:000000000001A338                 db  58h ; X
.eh_frame:000000000001A339                 db  0Ch
.eh_frame:000000000001A33A                 db 0FFh
.eh_frame:000000000001A33B                 db 0FFh
.eh_frame:000000000001A33C                 db  33h ; 3
.eh_frame:000000000001A33D                 db    0
.eh_frame:000000000001A33E                 db    0
.eh_frame:000000000001A33F                 db    0
.eh_frame:000000000001A340                 db    0
.eh_frame:000000000001A341                 db  44h ; D
.eh_frame:000000000001A342                 db  0Eh
.eh_frame:000000000001A343                 db  10h
.eh_frame:000000000001A344                 db  6Eh ; n
.eh_frame:000000000001A345                 db  0Eh
.eh_frame:000000000001A346                 db    8
.eh_frame:000000000001A347                 db    0
.eh_frame:000000000001A348                 db  18h
.eh_frame:000000000001A349                 db    0
.eh_frame:000000000001A34A                 db    0
.eh_frame:000000000001A34B                 db    0
.eh_frame:000000000001A34C                 db  2Ch ; ,
.eh_frame:000000000001A34D                 db  0Ah
.eh_frame:000000000001A34E                 db    0
.eh_frame:000000000001A34F                 db    0
.eh_frame:000000000001A350                 db  80h
.eh_frame:000000000001A351                 db  0Ch
.eh_frame:000000000001A352                 db 0FFh
.eh_frame:000000000001A353                 db 0FFh
.eh_frame:000000000001A354                 db  1Ah
.eh_frame:000000000001A355                 db    0
.eh_frame:000000000001A356                 db    0
.eh_frame:000000000001A357                 db    0
.eh_frame:000000000001A358                 db    0
.eh_frame:000000000001A359                 db  44h ; D
.eh_frame:000000000001A35A                 db  0Eh
.eh_frame:000000000001A35B                 db  10h
.eh_frame:000000000001A35C                 db  50h ; P
.eh_frame:000000000001A35D                 db  0Ah
.eh_frame:000000000001A35E                 db  0Eh
.eh_frame:000000000001A35F                 db    8
.eh_frame:000000000001A360                 db  41h ; A
.eh_frame:000000000001A361                 db  0Bh
.eh_frame:000000000001A362                 db    0
.eh_frame:000000000001A363                 db    0
.eh_frame:000000000001A364                 db  10h
.eh_frame:000000000001A365                 db    0
.eh_frame:000000000001A366                 db    0
.eh_frame:000000000001A367                 db    0
.eh_frame:000000000001A368                 db  48h ; H
.eh_frame:000000000001A369                 db  0Ah
.eh_frame:000000000001A36A                 db    0
.eh_frame:000000000001A36B                 db    0
.eh_frame:000000000001A36C                 db  84h
.eh_frame:000000000001A36D                 db  0Ch
.eh_frame:000000000001A36E                 db 0FFh
.eh_frame:000000000001A36F                 db 0FFh
.eh_frame:000000000001A370                 db  16h
.eh_frame:000000000001A371                 db    0
.eh_frame:000000000001A372                 db    0
.eh_frame:000000000001A373                 db    0
.eh_frame:000000000001A374                 db    0
.eh_frame:000000000001A375                 db    0
.eh_frame:000000000001A376                 db    0
.eh_frame:000000000001A377                 db    0
.eh_frame:000000000001A378                 db  1Ch
.eh_frame:000000000001A379                 db    0
.eh_frame:000000000001A37A                 db    0
.eh_frame:000000000001A37B                 db    0
.eh_frame:000000000001A37C                 db  5Ch ; \
.eh_frame:000000000001A37D                 db  0Ah
.eh_frame:000000000001A37E                 db    0
.eh_frame:000000000001A37F                 db    0
.eh_frame:000000000001A380                 db  90h
.eh_frame:000000000001A381                 db  0Ch
.eh_frame:000000000001A382                 db 0FFh
.eh_frame:000000000001A383                 db 0FFh
.eh_frame:000000000001A384                 db  4Ah ; J
.eh_frame:000000000001A385                 db    0
.eh_frame:000000000001A386                 db    0
.eh_frame:000000000001A387                 db    0
.eh_frame:000000000001A388                 db    0
.eh_frame:000000000001A389                 db  55h ; U
.eh_frame:000000000001A38A                 db  0Eh
.eh_frame:000000000001A38B                 db  10h
.eh_frame:000000000001A38C                 db  5Dh ; ]
.eh_frame:000000000001A38D                 db  0Eh
.eh_frame:000000000001A38E                 db    8
.eh_frame:000000000001A38F                 db  4Eh ; N
.eh_frame:000000000001A390                 db  0Eh
.eh_frame:000000000001A391                 db  10h
.eh_frame:000000000001A392                 db  49h ; I
.eh_frame:000000000001A393                 db  0Eh
.eh_frame:000000000001A394                 db    8
.eh_frame:000000000001A395                 db    0
.eh_frame:000000000001A396                 db    0
.eh_frame:000000000001A397                 db    0
.eh_frame:000000000001A398                 db  14h
.eh_frame:000000000001A399                 db    0
.eh_frame:000000000001A39A                 db    0
.eh_frame:000000000001A39B                 db    0
.eh_frame:000000000001A39C                 db  7Ch ; |
.eh_frame:000000000001A39D                 db  0Ah
.eh_frame:000000000001A39E                 db    0
.eh_frame:000000000001A39F                 db    0
.eh_frame:000000000001A3A0                 db 0C0h
.eh_frame:000000000001A3A1                 db  0Ch
.eh_frame:000000000001A3A2                 db 0FFh
.eh_frame:000000000001A3A3                 db 0FFh
.eh_frame:000000000001A3A4                 db  70h ; p
.eh_frame:000000000001A3A5                 db    0
.eh_frame:000000000001A3A6                 db    0
.eh_frame:000000000001A3A7                 db    0
.eh_frame:000000000001A3A8                 db    0
.eh_frame:000000000001A3A9                 db    0
.eh_frame:000000000001A3AA                 db    0
.eh_frame:000000000001A3AB                 db    0
.eh_frame:000000000001A3AC                 db    0
.eh_frame:000000000001A3AD                 db    0
.eh_frame:000000000001A3AE                 db    0
.eh_frame:000000000001A3AF                 db    0
.eh_frame:000000000001A3B0                 db  10h
.eh_frame:000000000001A3B1                 db    0
.eh_frame:000000000001A3B2                 db    0
.eh_frame:000000000001A3B3                 db    0
.eh_frame:000000000001A3B4                 db  94h
.eh_frame:000000000001A3B5                 db  0Ah
.eh_frame:000000000001A3B6                 db    0
.eh_frame:000000000001A3B7                 db    0
.eh_frame:000000000001A3B8                 db  18h
.eh_frame:000000000001A3B9                 db  0Dh
.eh_frame:000000000001A3BA                 db 0FFh
.eh_frame:000000000001A3BB                 db 0FFh
.eh_frame:000000000001A3BC                 db    8
.eh_frame:000000000001A3BD                 db    0
.eh_frame:000000000001A3BE                 db    0
.eh_frame:000000000001A3BF                 db    0
.eh_frame:000000000001A3C0                 db    0
.eh_frame:000000000001A3C1                 db    0
.eh_frame:000000000001A3C2                 db    0
.eh_frame:000000000001A3C3                 db    0
.eh_frame:000000000001A3C4                 db  38h ; 8
.eh_frame:000000000001A3C5                 db    0
.eh_frame:000000000001A3C6                 db    0
.eh_frame:000000000001A3C7                 db    0
.eh_frame:000000000001A3C8                 db 0A8h
.eh_frame:000000000001A3C9                 db  0Ah
.eh_frame:000000000001A3CA                 db    0
.eh_frame:000000000001A3CB                 db    0
.eh_frame:000000000001A3CC                 db  14h
.eh_frame:000000000001A3CD                 db  0Dh
.eh_frame:000000000001A3CE                 db 0FFh
.eh_frame:000000000001A3CF                 db 0FFh
.eh_frame:000000000001A3D0                 db    7
.eh_frame:000000000001A3D1                 db    1
.eh_frame:000000000001A3D2                 db    0
.eh_frame:000000000001A3D3                 db    0
.eh_frame:000000000001A3D4                 db    0
.eh_frame:000000000001A3D5                 db  42h ; B
.eh_frame:000000000001A3D6                 db  0Eh
.eh_frame:000000000001A3D7                 db  10h
.eh_frame:000000000001A3D8                 db  8Ch
.eh_frame:000000000001A3D9                 db    2
.eh_frame:000000000001A3DA                 db  41h ; A
.eh_frame:000000000001A3DB                 db  0Eh
.eh_frame:000000000001A3DC                 db  18h
.eh_frame:000000000001A3DD                 db  86h
.eh_frame:000000000001A3DE                 db    3
.eh_frame:000000000001A3DF                 db  41h ; A
.eh_frame:000000000001A3E0                 db  0Eh
.eh_frame:000000000001A3E1                 db  20h
.eh_frame:000000000001A3E2                 db  83h
.eh_frame:000000000001A3E3                 db    4
.eh_frame:000000000001A3E4                 db  65h ; e
.eh_frame:000000000001A3E5                 db  0Ah
.eh_frame:000000000001A3E6                 db  0Eh
.eh_frame:000000000001A3E7                 db  18h
.eh_frame:000000000001A3E8                 db  41h ; A
.eh_frame:000000000001A3E9                 db  0Eh
.eh_frame:000000000001A3EA                 db  10h
.eh_frame:000000000001A3EB                 db  42h ; B
.eh_frame:000000000001A3EC                 db  0Eh
.eh_frame:000000000001A3ED                 db    8
.eh_frame:000000000001A3EE                 db  4Ch ; L
.eh_frame:000000000001A3EF                 db  0Bh
.eh_frame:000000000001A3F0                 db    2
.eh_frame:000000000001A3F1                 db 0ACh
.eh_frame:000000000001A3F2                 db  0Ah
.eh_frame:000000000001A3F3                 db  0Eh
.eh_frame:000000000001A3F4                 db  18h
.eh_frame:000000000001A3F5                 db  41h ; A
.eh_frame:000000000001A3F6                 db  0Eh
.eh_frame:000000000001A3F7                 db  10h
.eh_frame:000000000001A3F8                 db  42h ; B
.eh_frame:000000000001A3F9                 db  0Eh
.eh_frame:000000000001A3FA                 db    8
.eh_frame:000000000001A3FB                 db  49h ; I
.eh_frame:000000000001A3FC                 db  0Bh
.eh_frame:000000000001A3FD                 db    0
.eh_frame:000000000001A3FE                 db    0
.eh_frame:000000000001A3FF                 db    0
.eh_frame:000000000001A400                 db  10h
.eh_frame:000000000001A401                 db    0
.eh_frame:000000000001A402                 db    0
.eh_frame:000000000001A403                 db    0
.eh_frame:000000000001A404                 db 0E4h
.eh_frame:000000000001A405                 db  0Ah
.eh_frame:000000000001A406                 db    0
.eh_frame:000000000001A407                 db    0
.eh_frame:000000000001A408                 db 0E8h
.eh_frame:000000000001A409                 db  0Dh
.eh_frame:000000000001A40A                 db 0FFh
.eh_frame:000000000001A40B                 db 0FFh
.eh_frame:000000000001A40C                 db    8
.eh_frame:000000000001A40D                 db    0
.eh_frame:000000000001A40E                 db    0
.eh_frame:000000000001A40F                 db    0
.eh_frame:000000000001A410                 db    0
.eh_frame:000000000001A411                 db    0
.eh_frame:000000000001A412                 db    0
.eh_frame:000000000001A413                 db    0
.eh_frame:000000000001A414                 db  10h
.eh_frame:000000000001A415                 db    0
.eh_frame:000000000001A416                 db    0
.eh_frame:000000000001A417                 db    0
.eh_frame:000000000001A418                 db 0F8h
.eh_frame:000000000001A419                 db  0Ah
.eh_frame:000000000001A41A                 db    0
.eh_frame:000000000001A41B                 db    0
.eh_frame:000000000001A41C                 db 0E4h
.eh_frame:000000000001A41D                 db  0Dh
.eh_frame:000000000001A41E                 db 0FFh
.eh_frame:000000000001A41F                 db 0FFh
.eh_frame:000000000001A420                 db    8
.eh_frame:000000000001A421                 db    0
.eh_frame:000000000001A422                 db    0
.eh_frame:000000000001A423                 db    0
.eh_frame:000000000001A424                 db    0
.eh_frame:000000000001A425                 db    0
.eh_frame:000000000001A426                 db    0
.eh_frame:000000000001A427                 db    0
.eh_frame:000000000001A428                 db  2Ch ; ,
.eh_frame:000000000001A429                 db    0
.eh_frame:000000000001A42A                 db    0
.eh_frame:000000000001A42B                 db    0
.eh_frame:000000000001A42C                 db  0Ch
.eh_frame:000000000001A42D                 db  0Bh
.eh_frame:000000000001A42E                 db    0
.eh_frame:000000000001A42F                 db    0
.eh_frame:000000000001A430                 db 0E0h
.eh_frame:000000000001A431                 db  0Dh
.eh_frame:000000000001A432                 db 0FFh
.eh_frame:000000000001A433                 db 0FFh
.eh_frame:000000000001A434                 db 0A4h
.eh_frame:000000000001A435                 db    0
.eh_frame:000000000001A436                 db    0
.eh_frame:000000000001A437                 db    0
.eh_frame:000000000001A438                 db    0
.eh_frame:000000000001A439                 db  41h ; A
.eh_frame:000000000001A43A                 db  0Eh
.eh_frame:000000000001A43B                 db  10h
.eh_frame:000000000001A43C                 db  86h
.eh_frame:000000000001A43D                 db    2
.eh_frame:000000000001A43E                 db  41h ; A
.eh_frame:000000000001A43F                 db  0Eh
.eh_frame:000000000001A440                 db  18h
.eh_frame:000000000001A441                 db  83h
.eh_frame:000000000001A442                 db    3
.eh_frame:000000000001A443                 db  44h ; D
.eh_frame:000000000001A444                 db  0Eh
.eh_frame:000000000001A445                 db  20h
.eh_frame:000000000001A446                 db  7Ah ; z
.eh_frame:000000000001A447                 db  0Ah
.eh_frame:000000000001A448                 db  0Eh
.eh_frame:000000000001A449                 db  18h
.eh_frame:000000000001A44A                 db  41h ; A
.eh_frame:000000000001A44B                 db  0Eh
.eh_frame:000000000001A44C                 db  10h
.eh_frame:000000000001A44D                 db  41h ; A
.eh_frame:000000000001A44E                 db  0Eh
.eh_frame:000000000001A44F                 db    8
.eh_frame:000000000001A450                 db  41h ; A
.eh_frame:000000000001A451                 db  0Bh
.eh_frame:000000000001A452                 db    0
.eh_frame:000000000001A453                 db    0
.eh_frame:000000000001A454                 db    0
.eh_frame:000000000001A455                 db    0
.eh_frame:000000000001A456                 db    0
.eh_frame:000000000001A457                 db    0
.eh_frame:000000000001A458                 db  1Ch
.eh_frame:000000000001A459                 db    0
.eh_frame:000000000001A45A                 db    0
.eh_frame:000000000001A45B                 db    0
.eh_frame:000000000001A45C                 db  3Ch ; <
.eh_frame:000000000001A45D                 db  0Bh
.eh_frame:000000000001A45E                 db    0
.eh_frame:000000000001A45F                 db    0
.eh_frame:000000000001A460                 db  60h ; `
.eh_frame:000000000001A461                 db  0Eh
.eh_frame:000000000001A462                 db 0FFh
.eh_frame:000000000001A463                 db 0FFh
.eh_frame:000000000001A464                 db  18h
.eh_frame:000000000001A465                 db    0
.eh_frame:000000000001A466                 db    0
.eh_frame:000000000001A467                 db    0
.eh_frame:000000000001A468                 db    0
.eh_frame:000000000001A469                 db  44h ; D
.eh_frame:000000000001A46A                 db  0Eh
.eh_frame:000000000001A46B                 db  10h
.eh_frame:000000000001A46C                 db  4Eh ; N
.eh_frame:000000000001A46D                 db  0Ah
.eh_frame:000000000001A46E                 db  0Eh
.eh_frame:000000000001A46F                 db    8
.eh_frame:000000000001A470                 db  41h ; A
.eh_frame:000000000001A471                 db  0Bh
.eh_frame:000000000001A472                 db    0
.eh_frame:000000000001A473                 db    0
.eh_frame:000000000001A474                 db    0
.eh_frame:000000000001A475                 db    0
.eh_frame:000000000001A476                 db    0
.eh_frame:000000000001A477                 db    0
.eh_frame:000000000001A478                 db  30h ; 0
.eh_frame:000000000001A479                 db    0
.eh_frame:000000000001A47A                 db    0
.eh_frame:000000000001A47B                 db    0
.eh_frame:000000000001A47C                 db  5Ch ; \
.eh_frame:000000000001A47D                 db  0Bh
.eh_frame:000000000001A47E                 db    0
.eh_frame:000000000001A47F                 db    0
.eh_frame:000000000001A480                 db  60h ; `
.eh_frame:000000000001A481                 db  0Eh
.eh_frame:000000000001A482                 db 0FFh
.eh_frame:000000000001A483                 db 0FFh
.eh_frame:000000000001A484                 db  5Dh ; ]
.eh_frame:000000000001A485                 db    0
.eh_frame:000000000001A486                 db    0
.eh_frame:000000000001A487                 db    0
.eh_frame:000000000001A488                 db    0
.eh_frame:000000000001A489                 db  41h ; A
.eh_frame:000000000001A48A                 db  0Eh
.eh_frame:000000000001A48B                 db  10h
.eh_frame:000000000001A48C                 db  86h
.eh_frame:000000000001A48D                 db    2
.eh_frame:000000000001A48E                 db  41h ; A
.eh_frame:000000000001A48F                 db  0Eh
.eh_frame:000000000001A490                 db  18h
.eh_frame:000000000001A491                 db  83h
.eh_frame:000000000001A492                 db    3
.eh_frame:000000000001A493                 db  49h ; I
.eh_frame:000000000001A494                 db  0Eh
.eh_frame:000000000001A495                 db  20h
.eh_frame:000000000001A496                 db  7Ch ; |
.eh_frame:000000000001A497                 db  0Ah
.eh_frame:000000000001A498                 db  0Eh
.eh_frame:000000000001A499                 db  18h
.eh_frame:000000000001A49A                 db  44h ; D
.eh_frame:000000000001A49B                 db  0Eh
.eh_frame:000000000001A49C                 db  10h
.eh_frame:000000000001A49D                 db  41h ; A
.eh_frame:000000000001A49E                 db  0Eh
.eh_frame:000000000001A49F                 db    8
.eh_frame:000000000001A4A0                 db  44h ; D
.eh_frame:000000000001A4A1                 db  0Bh
.eh_frame:000000000001A4A2                 db  44h ; D
.eh_frame:000000000001A4A3                 db  0Eh
.eh_frame:000000000001A4A4                 db  18h
.eh_frame:000000000001A4A5                 db  47h ; G
.eh_frame:000000000001A4A6                 db  0Eh
.eh_frame:000000000001A4A7                 db  10h
.eh_frame:000000000001A4A8                 db  41h ; A
.eh_frame:000000000001A4A9                 db  0Eh
.eh_frame:000000000001A4AA                 db    8
.eh_frame:000000000001A4AB                 db    0
.eh_frame:000000000001A4AC                 db  28h ; (
.eh_frame:000000000001A4AD                 db    0
.eh_frame:000000000001A4AE                 db    0
.eh_frame:000000000001A4AF                 db    0
.eh_frame:000000000001A4B0                 db  90h
.eh_frame:000000000001A4B1                 db  0Bh
.eh_frame:000000000001A4B2                 db    0
.eh_frame:000000000001A4B3                 db    0
.eh_frame:000000000001A4B4                 db  8Ch
.eh_frame:000000000001A4B5                 db  0Eh
.eh_frame:000000000001A4B6                 db 0FFh
.eh_frame:000000000001A4B7                 db 0FFh
.eh_frame:000000000001A4B8                 db  5Ah ; Z
.eh_frame:000000000001A4B9                 db    0
.eh_frame:000000000001A4BA                 db    0
.eh_frame:000000000001A4BB                 db    0
.eh_frame:000000000001A4BC                 db    0
.eh_frame:000000000001A4BD                 db  41h ; A
.eh_frame:000000000001A4BE                 db  0Eh
.eh_frame:000000000001A4BF                 db  10h
.eh_frame:000000000001A4C0                 db  86h
.eh_frame:000000000001A4C1                 db    2
.eh_frame:000000000001A4C2                 db  41h ; A
.eh_frame:000000000001A4C3                 db  0Eh
.eh_frame:000000000001A4C4                 db  18h
.eh_frame:000000000001A4C5                 db  83h
.eh_frame:000000000001A4C6                 db    3
.eh_frame:000000000001A4C7                 db  47h ; G
.eh_frame:000000000001A4C8                 db  0Eh
.eh_frame:000000000001A4C9                 db  20h
.eh_frame:000000000001A4CA                 db    2
.eh_frame:000000000001A4CB                 db  41h ; A
.eh_frame:000000000001A4CC                 db  0Ah
.eh_frame:000000000001A4CD                 db  0Eh
.eh_frame:000000000001A4CE                 db  18h
.eh_frame:000000000001A4CF                 db  44h ; D
.eh_frame:000000000001A4D0                 db  0Eh
.eh_frame:000000000001A4D1                 db  10h
.eh_frame:000000000001A4D2                 db  41h ; A
.eh_frame:000000000001A4D3                 db  0Eh
.eh_frame:000000000001A4D4                 db    8
.eh_frame:000000000001A4D5                 db  41h ; A
.eh_frame:000000000001A4D6                 db  0Bh
.eh_frame:000000000001A4D7                 db    0
.eh_frame:000000000001A4D8                 db  10h
.eh_frame:000000000001A4D9                 db    0
.eh_frame:000000000001A4DA                 db    0
.eh_frame:000000000001A4DB                 db    0
.eh_frame:000000000001A4DC                 db 0BCh
.eh_frame:000000000001A4DD                 db  0Bh
.eh_frame:000000000001A4DE                 db    0
.eh_frame:000000000001A4DF                 db    0
.eh_frame:000000000001A4E0                 db 0C0h
.eh_frame:000000000001A4E1                 db  0Eh
.eh_frame:000000000001A4E2                 db 0FFh
.eh_frame:000000000001A4E3                 db 0FFh
.eh_frame:000000000001A4E4                 db  5Ch ; \
.eh_frame:000000000001A4E5                 db    0
.eh_frame:000000000001A4E6                 db    0
.eh_frame:000000000001A4E7                 db    0
.eh_frame:000000000001A4E8                 db    0
.eh_frame:000000000001A4E9                 db    0
.eh_frame:000000000001A4EA                 db    0
.eh_frame:000000000001A4EB                 db    0
.eh_frame:000000000001A4EC                 db  28h ; (
.eh_frame:000000000001A4ED                 db    0
.eh_frame:000000000001A4EE                 db    0
.eh_frame:000000000001A4EF                 db    0
.eh_frame:000000000001A4F0                 db 0D0h
.eh_frame:000000000001A4F1                 db  0Bh
.eh_frame:000000000001A4F2                 db    0
.eh_frame:000000000001A4F3                 db    0
.eh_frame:000000000001A4F4                 db  0Ch
.eh_frame:000000000001A4F5                 db  0Fh
.eh_frame:000000000001A4F6                 db 0FFh
.eh_frame:000000000001A4F7                 db 0FFh
.eh_frame:000000000001A4F8                 db  47h ; G
.eh_frame:000000000001A4F9                 db    0
.eh_frame:000000000001A4FA                 db    0
.eh_frame:000000000001A4FB                 db    0
.eh_frame:000000000001A4FC                 db    0
.eh_frame:000000000001A4FD                 db  41h ; A
.eh_frame:000000000001A4FE                 db  0Eh
.eh_frame:000000000001A4FF                 db  10h
.eh_frame:000000000001A500                 db  83h
.eh_frame:000000000001A501                 db    2
.eh_frame:000000000001A502                 db  5Ah ; Z
.eh_frame:000000000001A503                 db  0Ah
.eh_frame:000000000001A504                 db  0Eh
.eh_frame:000000000001A505                 db    8
.eh_frame:000000000001A506                 db  45h ; E
.eh_frame:000000000001A507                 db  0Bh
.eh_frame:000000000001A508                 db  5Dh ; ]
.eh_frame:000000000001A509                 db  0Ah
.eh_frame:000000000001A50A                 db  0Eh
.eh_frame:000000000001A50B                 db    8
.eh_frame:000000000001A50C                 db  43h ; C
.eh_frame:000000000001A50D                 db  0Bh
.eh_frame:000000000001A50E                 db  46h ; F
.eh_frame:000000000001A50F                 db  0Eh
.eh_frame:000000000001A510                 db    8
.eh_frame:000000000001A511                 db    0
.eh_frame:000000000001A512                 db    0
.eh_frame:000000000001A513                 db    0
.eh_frame:000000000001A514                 db    0
.eh_frame:000000000001A515                 db    0
.eh_frame:000000000001A516                 db    0
.eh_frame:000000000001A517                 db    0
.eh_frame:000000000001A518                 db  10h
.eh_frame:000000000001A519                 db    0
.eh_frame:000000000001A51A                 db    0
.eh_frame:000000000001A51B                 db    0
.eh_frame:000000000001A51C                 db 0FCh
.eh_frame:000000000001A51D                 db  0Bh
.eh_frame:000000000001A51E                 db    0
.eh_frame:000000000001A51F                 db    0
.eh_frame:000000000001A520                 db  30h ; 0
.eh_frame:000000000001A521                 db  0Fh
.eh_frame:000000000001A522                 db 0FFh
.eh_frame:000000000001A523                 db 0FFh
.eh_frame:000000000001A524                 db    5
.eh_frame:000000000001A525                 db    0
.eh_frame:000000000001A526                 db    0
.eh_frame:000000000001A527                 db    0
.eh_frame:000000000001A528                 db    0
.eh_frame:000000000001A529                 db    0
.eh_frame:000000000001A52A                 db    0
.eh_frame:000000000001A52B                 db    0
.eh_frame:000000000001A52C                 db  18h
.eh_frame:000000000001A52D                 db    0
.eh_frame:000000000001A52E                 db    0
.eh_frame:000000000001A52F                 db    0
.eh_frame:000000000001A530                 db  10h
.eh_frame:000000000001A531                 db  0Ch
.eh_frame:000000000001A532                 db    0
.eh_frame:000000000001A533                 db    0
.eh_frame:000000000001A534                 db  2Ch ; ,
.eh_frame:000000000001A535                 db  0Fh
.eh_frame:000000000001A536                 db 0FFh
.eh_frame:000000000001A537                 db 0FFh
.eh_frame:000000000001A538                 db  22h ; "
.eh_frame:000000000001A539                 db    0
.eh_frame:000000000001A53A                 db    0
.eh_frame:000000000001A53B                 db    0
.eh_frame:000000000001A53C                 db    0
.eh_frame:000000000001A53D                 db  46h ; F
.eh_frame:000000000001A53E                 db  0Eh
.eh_frame:000000000001A53F                 db  10h
.eh_frame:000000000001A540                 db  83h
.eh_frame:000000000001A541                 db    2
.eh_frame:000000000001A542                 db  4Eh ; N
.eh_frame:000000000001A543                 db 0C3h
.eh_frame:000000000001A544                 db  0Eh
.eh_frame:000000000001A545                 db    8
.eh_frame:000000000001A546                 db    0
.eh_frame:000000000001A547                 db    0
.eh_frame:000000000001A548                 db  1Ch
.eh_frame:000000000001A549                 db    0
.eh_frame:000000000001A54A                 db    0
.eh_frame:000000000001A54B                 db    0
.eh_frame:000000000001A54C                 db  2Ch ; ,
.eh_frame:000000000001A54D                 db  0Ch
.eh_frame:000000000001A54E                 db    0
.eh_frame:000000000001A54F                 db    0
.eh_frame:000000000001A550                 db  40h ; @
.eh_frame:000000000001A551                 db  0Fh
.eh_frame:000000000001A552                 db 0FFh
.eh_frame:000000000001A553                 db 0FFh
.eh_frame:000000000001A554                 db  6Eh ; n
.eh_frame:000000000001A555                 db    0
.eh_frame:000000000001A556                 db    0
.eh_frame:000000000001A557                 db    0
.eh_frame:000000000001A558                 db    0
.eh_frame:000000000001A559                 db  44h ; D
.eh_frame:000000000001A55A                 db  0Eh
.eh_frame:000000000001A55B                 db  60h ; `
.eh_frame:000000000001A55C                 db  7Fh ; 
.eh_frame:000000000001A55D                 db  0Ah
.eh_frame:000000000001A55E                 db  0Eh
.eh_frame:000000000001A55F                 db    8
.eh_frame:000000000001A560                 db  45h ; E
.eh_frame:000000000001A561                 db  0Bh
.eh_frame:000000000001A562                 db    0
.eh_frame:000000000001A563                 db    0
.eh_frame:000000000001A564                 db    0
.eh_frame:000000000001A565                 db    0
.eh_frame:000000000001A566                 db    0
.eh_frame:000000000001A567                 db    0
.eh_frame:000000000001A568                 db  5Ch ; \
.eh_frame:000000000001A569                 db    0
.eh_frame:000000000001A56A                 db    0
.eh_frame:000000000001A56B                 db    0
.eh_frame:000000000001A56C                 db  4Ch ; L
.eh_frame:000000000001A56D                 db  0Ch
.eh_frame:000000000001A56E                 db    0
.eh_frame:000000000001A56F                 db    0
.eh_frame:000000000001A570                 db  90h
.eh_frame:000000000001A571                 db  0Fh
.eh_frame:000000000001A572                 db 0FFh
.eh_frame:000000000001A573                 db 0FFh
.eh_frame:000000000001A574                 db  87h
.eh_frame:000000000001A575                 db    0
.eh_frame:000000000001A576                 db    0
.eh_frame:000000000001A577                 db    0
.eh_frame:000000000001A578                 db    0
.eh_frame:000000000001A579                 db  47h ; G
.eh_frame:000000000001A57A                 db  0Eh
.eh_frame:000000000001A57B                 db  10h
.eh_frame:000000000001A57C                 db  8Dh
.eh_frame:000000000001A57D                 db    2
.eh_frame:000000000001A57E                 db  42h ; B
.eh_frame:000000000001A57F                 db  0Eh
.eh_frame:000000000001A580                 db  18h
.eh_frame:000000000001A581                 db  8Ch
.eh_frame:000000000001A582                 db    3
.eh_frame:000000000001A583                 db  44h ; D
.eh_frame:000000000001A584                 db  0Eh
.eh_frame:000000000001A585                 db  20h
.eh_frame:000000000001A586                 db  86h
.eh_frame:000000000001A587                 db    4
.eh_frame:000000000001A588                 db  41h ; A
.eh_frame:000000000001A589                 db  0Eh
.eh_frame:000000000001A58A                 db  28h ; (
.eh_frame:000000000001A58B                 db  83h
.eh_frame:000000000001A58C                 db    5
.eh_frame:000000000001A58D                 db  4Fh ; O
.eh_frame:000000000001A58E                 db  0Eh
.eh_frame:000000000001A58F                 db  30h ; 0
.eh_frame:000000000001A590                 db  7Ch ; |
.eh_frame:000000000001A591                 db  0Ah
.eh_frame:000000000001A592                 db  0Eh
.eh_frame:000000000001A593                 db  28h ; (
.eh_frame:000000000001A594                 db  44h ; D
.eh_frame:000000000001A595                 db 0C3h
.eh_frame:000000000001A596                 db  0Eh
.eh_frame:000000000001A597                 db  20h
.eh_frame:000000000001A598                 db  41h ; A
.eh_frame:000000000001A599                 db 0C6h
.eh_frame:000000000001A59A                 db  0Eh
.eh_frame:000000000001A59B                 db  18h
.eh_frame:000000000001A59C                 db  42h ; B
.eh_frame:000000000001A59D                 db 0CCh
.eh_frame:000000000001A59E                 db  0Eh
.eh_frame:000000000001A59F                 db  10h
.eh_frame:000000000001A5A0                 db  42h ; B
.eh_frame:000000000001A5A1                 db 0CDh
.eh_frame:000000000001A5A2                 db  0Eh
.eh_frame:000000000001A5A3                 db    8
.eh_frame:000000000001A5A4                 db  4Eh ; N
.eh_frame:000000000001A5A5                 db  0Bh
.eh_frame:000000000001A5A6                 db  44h ; D
.eh_frame:000000000001A5A7                 db  0Eh
.eh_frame:000000000001A5A8                 db  28h ; (
.eh_frame:000000000001A5A9                 db  41h ; A
.eh_frame:000000000001A5AA                 db  0Eh
.eh_frame:000000000001A5AB                 db  20h
.eh_frame:000000000001A5AC                 db  41h ; A
.eh_frame:000000000001A5AD                 db  0Eh
.eh_frame:000000000001A5AE                 db  18h
.eh_frame:000000000001A5AF                 db  42h ; B
.eh_frame:000000000001A5B0                 db  0Eh
.eh_frame:000000000001A5B1                 db  10h
.eh_frame:000000000001A5B2                 db  42h ; B
.eh_frame:000000000001A5B3                 db  0Eh
.eh_frame:000000000001A5B4                 db    8
.eh_frame:000000000001A5B5                 db  46h ; F
.eh_frame:000000000001A5B6                 db 0C3h
.eh_frame:000000000001A5B7                 db 0C6h
.eh_frame:000000000001A5B8                 db 0CCh
.eh_frame:000000000001A5B9                 db 0CDh
.eh_frame:000000000001A5BA                 db  42h ; B
.eh_frame:000000000001A5BB                 db  0Eh
.eh_frame:000000000001A5BC                 db  30h ; 0
.eh_frame:000000000001A5BD                 db  83h
.eh_frame:000000000001A5BE                 db    5
.eh_frame:000000000001A5BF                 db  86h
.eh_frame:000000000001A5C0                 db    4
.eh_frame:000000000001A5C1                 db  8Ch
.eh_frame:000000000001A5C2                 db    3
.eh_frame:000000000001A5C3                 db  8Dh
.eh_frame:000000000001A5C4                 db    2
.eh_frame:000000000001A5C5                 db    0
.eh_frame:000000000001A5C6                 db    0
.eh_frame:000000000001A5C7                 db    0
.eh_frame:000000000001A5C8                 db  1Ch
.eh_frame:000000000001A5C9                 db    0
.eh_frame:000000000001A5CA                 db    0
.eh_frame:000000000001A5CB                 db    0
.eh_frame:000000000001A5CC                 db 0ACh
.eh_frame:000000000001A5CD                 db  0Ch
.eh_frame:000000000001A5CE                 db    0
.eh_frame:000000000001A5CF                 db    0
.eh_frame:000000000001A5D0                 db 0C0h
.eh_frame:000000000001A5D1                 db  0Fh
.eh_frame:000000000001A5D2                 db 0FFh
.eh_frame:000000000001A5D3                 db 0FFh
.eh_frame:000000000001A5D4                 db  56h ; V
.eh_frame:000000000001A5D5                 db    0
.eh_frame:000000000001A5D6                 db    0
.eh_frame:000000000001A5D7                 db    0
.eh_frame:000000000001A5D8                 db    0
.eh_frame:000000000001A5D9                 db  44h ; D
.eh_frame:000000000001A5DA                 db  0Eh
.eh_frame:000000000001A5DB                 db  30h ; 0
.eh_frame:000000000001A5DC                 db    2
.eh_frame:000000000001A5DD                 db  4Ch ; L
.eh_frame:000000000001A5DE                 db  0Ah
.eh_frame:000000000001A5DF                 db  0Eh
.eh_frame:000000000001A5E0                 db    8
.eh_frame:000000000001A5E1                 db  41h ; A
.eh_frame:000000000001A5E2                 db  0Bh
.eh_frame:000000000001A5E3                 db    0
.eh_frame:000000000001A5E4                 db    0
.eh_frame:000000000001A5E5                 db    0
.eh_frame:000000000001A5E6                 db    0
.eh_frame:000000000001A5E7                 db    0
.eh_frame:000000000001A5E8                 db  10h
.eh_frame:000000000001A5E9                 db    0
.eh_frame:000000000001A5EA                 db    0
.eh_frame:000000000001A5EB                 db    0
.eh_frame:000000000001A5EC                 db 0CCh
.eh_frame:000000000001A5ED                 db  0Ch
.eh_frame:000000000001A5EE                 db    0
.eh_frame:000000000001A5EF                 db    0
.eh_frame:000000000001A5F0                 db    0
.eh_frame:000000000001A5F1                 db  10h
.eh_frame:000000000001A5F2                 db 0FFh
.eh_frame:000000000001A5F3                 db 0FFh
.eh_frame:000000000001A5F4                 db  83h
.eh_frame:000000000001A5F5                 db    1
.eh_frame:000000000001A5F6                 db    0
.eh_frame:000000000001A5F7                 db    0
.eh_frame:000000000001A5F8                 db    0
.eh_frame:000000000001A5F9                 db    0
.eh_frame:000000000001A5FA                 db    0
.eh_frame:000000000001A5FB                 db    0
.eh_frame:000000000001A5FC                 db  10h
.eh_frame:000000000001A5FD                 db    0
.eh_frame:000000000001A5FE                 db    0
.eh_frame:000000000001A5FF                 db    0
.eh_frame:000000000001A600                 db 0E0h
.eh_frame:000000000001A601                 db  0Ch
.eh_frame:000000000001A602                 db    0
.eh_frame:000000000001A603                 db    0
.eh_frame:000000000001A604                 db  7Ch ; |
.eh_frame:000000000001A605                 db  11h
.eh_frame:000000000001A606                 db 0FFh
.eh_frame:000000000001A607                 db 0FFh
.eh_frame:000000000001A608                 db    8
.eh_frame:000000000001A609                 db    0
.eh_frame:000000000001A60A                 db    0
.eh_frame:000000000001A60B                 db    0
.eh_frame:000000000001A60C                 db    0
.eh_frame:000000000001A60D                 db    0
.eh_frame:000000000001A60E                 db    0
.eh_frame:000000000001A60F                 db    0
.eh_frame:000000000001A610                 db  1Ch
.eh_frame:000000000001A611                 db    0
.eh_frame:000000000001A612                 db    0
.eh_frame:000000000001A613                 db    0
.eh_frame:000000000001A614                 db 0F4h
.eh_frame:000000000001A615                 db  0Ch
.eh_frame:000000000001A616                 db    0
.eh_frame:000000000001A617                 db    0
.eh_frame:000000000001A618                 db  78h ; x
.eh_frame:000000000001A619                 db  11h
.eh_frame:000000000001A61A                 db 0FFh
.eh_frame:000000000001A61B                 db 0FFh
.eh_frame:000000000001A61C                 db  18h
.eh_frame:000000000001A61D                 db    0
.eh_frame:000000000001A61E                 db    0
.eh_frame:000000000001A61F                 db    0
.eh_frame:000000000001A620                 db    0
.eh_frame:000000000001A621                 db  44h ; D
.eh_frame:000000000001A622                 db  0Eh
.eh_frame:000000000001A623                 db  10h
.eh_frame:000000000001A624                 db  4Eh ; N
.eh_frame:000000000001A625                 db  0Ah
.eh_frame:000000000001A626                 db  0Eh
.eh_frame:000000000001A627                 db    8
.eh_frame:000000000001A628                 db  41h ; A
.eh_frame:000000000001A629                 db  0Bh
.eh_frame:000000000001A62A                 db    0
.eh_frame:000000000001A62B                 db    0
.eh_frame:000000000001A62C                 db    0
.eh_frame:000000000001A62D                 db    0
.eh_frame:000000000001A62E                 db    0
.eh_frame:000000000001A62F                 db    0
.eh_frame:000000000001A630                 db  4Ch ; L
.eh_frame:000000000001A631                 db    0
.eh_frame:000000000001A632                 db    0
.eh_frame:000000000001A633                 db    0
.eh_frame:000000000001A634                 db  14h
.eh_frame:000000000001A635                 db  0Dh
.eh_frame:000000000001A636                 db    0
.eh_frame:000000000001A637                 db    0
.eh_frame:000000000001A638                 db  78h ; x
.eh_frame:000000000001A639                 db  11h
.eh_frame:000000000001A63A                 db 0FFh
.eh_frame:000000000001A63B                 db 0FFh
.eh_frame:000000000001A63C                 db 0FFh
.eh_frame:000000000001A63D                 db    0
.eh_frame:000000000001A63E                 db    0
.eh_frame:000000000001A63F                 db    0
.eh_frame:000000000001A640                 db    0
.eh_frame:000000000001A641                 db  42h ; B
.eh_frame:000000000001A642                 db  0Eh
.eh_frame:000000000001A643                 db  10h
.eh_frame:000000000001A644                 db  8Fh
.eh_frame:000000000001A645                 db    2
.eh_frame:000000000001A646                 db  42h ; B
.eh_frame:000000000001A647                 db  0Eh
.eh_frame:000000000001A648                 db  18h
.eh_frame:000000000001A649                 db  8Eh
.eh_frame:000000000001A64A                 db    3
.eh_frame:000000000001A64B                 db  45h ; E
.eh_frame:000000000001A64C                 db  0Eh
.eh_frame:000000000001A64D                 db  20h
.eh_frame:000000000001A64E                 db  8Dh
.eh_frame:000000000001A64F                 db    4
.eh_frame:000000000001A650                 db  42h ; B
.eh_frame:000000000001A651                 db  0Eh
.eh_frame:000000000001A652                 db  28h ; (
.eh_frame:000000000001A653                 db  8Ch
.eh_frame:000000000001A654                 db    5
.eh_frame:000000000001A655                 db  44h ; D
.eh_frame:000000000001A656                 db  0Eh
.eh_frame:000000000001A657                 db  30h ; 0
.eh_frame:000000000001A658                 db  86h
.eh_frame:000000000001A659                 db    6
.eh_frame:000000000001A65A                 db  41h ; A
.eh_frame:000000000001A65B                 db  0Eh
.eh_frame:000000000001A65C                 db  38h ; 8
.eh_frame:000000000001A65D                 db  83h
.eh_frame:000000000001A65E                 db    7
.eh_frame:000000000001A65F                 db  47h ; G
.eh_frame:000000000001A660                 db  0Eh
.eh_frame:000000000001A661                 db  50h ; P
.eh_frame:000000000001A662                 db    2
.eh_frame:000000000001A663                 db 0C3h
.eh_frame:000000000001A664                 db  0Ah
.eh_frame:000000000001A665                 db  0Eh
.eh_frame:000000000001A666                 db  38h ; 8
.eh_frame:000000000001A667                 db  44h ; D
.eh_frame:000000000001A668                 db  0Eh
.eh_frame:000000000001A669                 db  30h ; 0
.eh_frame:000000000001A66A                 db  41h ; A
.eh_frame:000000000001A66B                 db  0Eh
.eh_frame:000000000001A66C                 db  28h ; (
.eh_frame:000000000001A66D                 db  42h ; B
.eh_frame:000000000001A66E                 db  0Eh
.eh_frame:000000000001A66F                 db  20h
.eh_frame:000000000001A670                 db  42h ; B
.eh_frame:000000000001A671                 db  0Eh
.eh_frame:000000000001A672                 db  18h
.eh_frame:000000000001A673                 db  42h ; B
.eh_frame:000000000001A674                 db  0Eh
.eh_frame:000000000001A675                 db  10h
.eh_frame:000000000001A676                 db  42h ; B
.eh_frame:000000000001A677                 db  0Eh
.eh_frame:000000000001A678                 db    8
.eh_frame:000000000001A679                 db  49h ; I
.eh_frame:000000000001A67A                 db  0Bh
.eh_frame:000000000001A67B                 db    0
.eh_frame:000000000001A67C                 db    0
.eh_frame:000000000001A67D                 db    0
.eh_frame:000000000001A67E                 db    0
.eh_frame:000000000001A67F                 db    0
.eh_frame:000000000001A680                 db  4Ch ; L
.eh_frame:000000000001A681                 db    0
.eh_frame:000000000001A682                 db    0
.eh_frame:000000000001A683                 db    0
.eh_frame:000000000001A684                 db  64h ; d
.eh_frame:000000000001A685                 db  0Dh
.eh_frame:000000000001A686                 db    0
.eh_frame:000000000001A687                 db    0
.eh_frame:000000000001A688                 db  28h ; (
.eh_frame:000000000001A689                 db  12h
.eh_frame:000000000001A68A                 db 0FFh
.eh_frame:000000000001A68B                 db 0FFh
.eh_frame:000000000001A68C                 db  76h ; v
.eh_frame:000000000001A68D                 db    0
.eh_frame:000000000001A68E                 db    0
.eh_frame:000000000001A68F                 db    0
.eh_frame:000000000001A690                 db    0
.eh_frame:000000000001A691                 db  42h ; B
.eh_frame:000000000001A692                 db  0Eh
.eh_frame:000000000001A693                 db  10h
.eh_frame:000000000001A694                 db  8Dh
.eh_frame:000000000001A695                 db    2
.eh_frame:000000000001A696                 db  42h ; B
.eh_frame:000000000001A697                 db  0Eh
.eh_frame:000000000001A698                 db  18h
.eh_frame:000000000001A699                 db  8Ch
.eh_frame:000000000001A69A                 db    3
.eh_frame:000000000001A69B                 db  41h ; A
.eh_frame:000000000001A69C                 db  0Eh
.eh_frame:000000000001A69D                 db  20h
.eh_frame:000000000001A69E                 db  86h
.eh_frame:000000000001A69F                 db    4
.eh_frame:000000000001A6A0                 db  41h ; A
.eh_frame:000000000001A6A1                 db  0Eh
.eh_frame:000000000001A6A2                 db  28h ; (
.eh_frame:000000000001A6A3                 db  83h
.eh_frame:000000000001A6A4                 db    5
.eh_frame:000000000001A6A5                 db  44h ; D
.eh_frame:000000000001A6A6                 db  0Eh
.eh_frame:000000000001A6A7                 db  30h ; 0
.eh_frame:000000000001A6A8                 db  7Eh ; ~
.eh_frame:000000000001A6A9                 db  0Ah
.eh_frame:000000000001A6AA                 db  0Eh
.eh_frame:000000000001A6AB                 db  28h ; (
.eh_frame:000000000001A6AC                 db  44h ; D
.eh_frame:000000000001A6AD                 db  0Eh
.eh_frame:000000000001A6AE                 db  20h
.eh_frame:000000000001A6AF                 db  41h ; A
.eh_frame:000000000001A6B0                 db  0Eh
.eh_frame:000000000001A6B1                 db  18h
.eh_frame:000000000001A6B2                 db  42h ; B
.eh_frame:000000000001A6B3                 db  0Eh
.eh_frame:000000000001A6B4                 db  10h
.eh_frame:000000000001A6B5                 db  42h ; B
.eh_frame:000000000001A6B6                 db  0Eh
.eh_frame:000000000001A6B7                 db    8
.eh_frame:000000000001A6B8                 db  47h ; G
.eh_frame:000000000001A6B9                 db  0Bh
.eh_frame:000000000001A6BA                 db  4Fh ; O
.eh_frame:000000000001A6BB                 db  0Ah
.eh_frame:000000000001A6BC                 db  0Eh
.eh_frame:000000000001A6BD                 db  28h ; (
.eh_frame:000000000001A6BE                 db  44h ; D
.eh_frame:000000000001A6BF                 db  0Eh
.eh_frame:000000000001A6C0                 db  20h
.eh_frame:000000000001A6C1                 db  41h ; A
.eh_frame:000000000001A6C2                 db  0Eh
.eh_frame:000000000001A6C3                 db  18h
.eh_frame:000000000001A6C4                 db  42h ; B
.eh_frame:000000000001A6C5                 db  0Eh
.eh_frame:000000000001A6C6                 db  10h
.eh_frame:000000000001A6C7                 db  42h ; B
.eh_frame:000000000001A6C8                 db  0Eh
.eh_frame:000000000001A6C9                 db    8
.eh_frame:000000000001A6CA                 db  41h ; A
.eh_frame:000000000001A6CB                 db  0Bh
.eh_frame:000000000001A6CC                 db    0
.eh_frame:000000000001A6CD                 db    0
.eh_frame:000000000001A6CE                 db    0
.eh_frame:000000000001A6CF                 db    0
.eh_frame:000000000001A6D0                 db  4Ch ; L
.eh_frame:000000000001A6D1                 db    0
.eh_frame:000000000001A6D2                 db    0
.eh_frame:000000000001A6D3                 db    0
.eh_frame:000000000001A6D4                 db 0B4h
.eh_frame:000000000001A6D5                 db  0Dh
.eh_frame:000000000001A6D6                 db    0
.eh_frame:000000000001A6D7                 db    0
.eh_frame:000000000001A6D8                 db  58h ; X
.eh_frame:000000000001A6D9                 db  12h
.eh_frame:000000000001A6DA                 db 0FFh
.eh_frame:000000000001A6DB                 db 0FFh
.eh_frame:000000000001A6DC                 db  76h ; v
.eh_frame:000000000001A6DD                 db    0
.eh_frame:000000000001A6DE                 db    0
.eh_frame:000000000001A6DF                 db    0
.eh_frame:000000000001A6E0                 db    0
.eh_frame:000000000001A6E1                 db  42h ; B
.eh_frame:000000000001A6E2                 db  0Eh
.eh_frame:000000000001A6E3                 db  10h
.eh_frame:000000000001A6E4                 db  8Dh
.eh_frame:000000000001A6E5                 db    2
.eh_frame:000000000001A6E6                 db  42h ; B
.eh_frame:000000000001A6E7                 db  0Eh
.eh_frame:000000000001A6E8                 db  18h
.eh_frame:000000000001A6E9                 db  8Ch
.eh_frame:000000000001A6EA                 db    3
.eh_frame:000000000001A6EB                 db  41h ; A
.eh_frame:000000000001A6EC                 db  0Eh
.eh_frame:000000000001A6ED                 db  20h
.eh_frame:000000000001A6EE                 db  86h
.eh_frame:000000000001A6EF                 db    4
.eh_frame:000000000001A6F0                 db  41h ; A
.eh_frame:000000000001A6F1                 db  0Eh
.eh_frame:000000000001A6F2                 db  28h ; (
.eh_frame:000000000001A6F3                 db  83h
.eh_frame:000000000001A6F4                 db    5
.eh_frame:000000000001A6F5                 db  44h ; D
.eh_frame:000000000001A6F6                 db  0Eh
.eh_frame:000000000001A6F7                 db  30h ; 0
.eh_frame:000000000001A6F8                 db  7Eh ; ~
.eh_frame:000000000001A6F9                 db  0Ah
.eh_frame:000000000001A6FA                 db  0Eh
.eh_frame:000000000001A6FB                 db  28h ; (
.eh_frame:000000000001A6FC                 db  44h ; D
.eh_frame:000000000001A6FD                 db  0Eh
.eh_frame:000000000001A6FE                 db  20h
.eh_frame:000000000001A6FF                 db  41h ; A
.eh_frame:000000000001A700                 db  0Eh
.eh_frame:000000000001A701                 db  18h
.eh_frame:000000000001A702                 db  42h ; B
.eh_frame:000000000001A703                 db  0Eh
.eh_frame:000000000001A704                 db  10h
.eh_frame:000000000001A705                 db  42h ; B
.eh_frame:000000000001A706                 db  0Eh
.eh_frame:000000000001A707                 db    8
.eh_frame:000000000001A708                 db  47h ; G
.eh_frame:000000000001A709                 db  0Bh
.eh_frame:000000000001A70A                 db  4Fh ; O
.eh_frame:000000000001A70B                 db  0Ah
.eh_frame:000000000001A70C                 db  0Eh
.eh_frame:000000000001A70D                 db  28h ; (
.eh_frame:000000000001A70E                 db  44h ; D
.eh_frame:000000000001A70F                 db  0Eh
.eh_frame:000000000001A710                 db  20h
.eh_frame:000000000001A711                 db  41h ; A
.eh_frame:000000000001A712                 db  0Eh
.eh_frame:000000000001A713                 db  18h
.eh_frame:000000000001A714                 db  42h ; B
.eh_frame:000000000001A715                 db  0Eh
.eh_frame:000000000001A716                 db  10h
.eh_frame:000000000001A717                 db  42h ; B
.eh_frame:000000000001A718                 db  0Eh
.eh_frame:000000000001A719                 db    8
.eh_frame:000000000001A71A                 db  41h ; A
.eh_frame:000000000001A71B                 db  0Bh
.eh_frame:000000000001A71C                 db    0
.eh_frame:000000000001A71D                 db    0
.eh_frame:000000000001A71E                 db    0
.eh_frame:000000000001A71F                 db    0
.eh_frame:000000000001A720                 db  10h
.eh_frame:000000000001A721                 db    0
.eh_frame:000000000001A722                 db    0
.eh_frame:000000000001A723                 db    0
.eh_frame:000000000001A724                 db    4
.eh_frame:000000000001A725                 db  0Eh
.eh_frame:000000000001A726                 db    0
.eh_frame:000000000001A727                 db    0
.eh_frame:000000000001A728                 db  88h
.eh_frame:000000000001A729                 db  12h
.eh_frame:000000000001A72A                 db 0FFh
.eh_frame:000000000001A72B                 db 0FFh
.eh_frame:000000000001A72C                 db  93h
.eh_frame:000000000001A72D                 db    0
.eh_frame:000000000001A72E                 db    0
.eh_frame:000000000001A72F                 db    0
.eh_frame:000000000001A730                 db    0
.eh_frame:000000000001A731                 db    0
.eh_frame:000000000001A732                 db    0
.eh_frame:000000000001A733                 db    0
.eh_frame:000000000001A734                 db  10h
.eh_frame:000000000001A735                 db    0
.eh_frame:000000000001A736                 db    0
.eh_frame:000000000001A737                 db    0
.eh_frame:000000000001A738                 db  18h
.eh_frame:000000000001A739                 db  0Eh
.eh_frame:000000000001A73A                 db    0
.eh_frame:000000000001A73B                 db    0
.eh_frame:000000000001A73C                 db  14h
.eh_frame:000000000001A73D                 db  13h
.eh_frame:000000000001A73E                 db 0FFh
.eh_frame:000000000001A73F                 db 0FFh
.eh_frame:000000000001A740                 db  10h
.eh_frame:000000000001A741                 db    0
.eh_frame:000000000001A742                 db    0
.eh_frame:000000000001A743                 db    0
.eh_frame:000000000001A744                 db    0
.eh_frame:000000000001A745                 db    0
.eh_frame:000000000001A746                 db    0
.eh_frame:000000000001A747                 db    0
.eh_frame:000000000001A748                 db  10h
.eh_frame:000000000001A749                 db    0
.eh_frame:000000000001A74A                 db    0
.eh_frame:000000000001A74B                 db    0
.eh_frame:000000000001A74C                 db  2Ch ; ,
.eh_frame:000000000001A74D                 db  0Eh
.eh_frame:000000000001A74E                 db    0
.eh_frame:000000000001A74F                 db    0
.eh_frame:000000000001A750                 db  10h
.eh_frame:000000000001A751                 db  13h
.eh_frame:000000000001A752                 db 0FFh
.eh_frame:000000000001A753                 db 0FFh
.eh_frame:000000000001A754                 db    7
.eh_frame:000000000001A755                 db    0
.eh_frame:000000000001A756                 db    0
.eh_frame:000000000001A757                 db    0
.eh_frame:000000000001A758                 db    0
.eh_frame:000000000001A759                 db    0
.eh_frame:000000000001A75A                 db    0
.eh_frame:000000000001A75B                 db    0
.eh_frame:000000000001A75C                 db  18h
.eh_frame:000000000001A75D                 db    0
.eh_frame:000000000001A75E                 db    0
.eh_frame:000000000001A75F                 db    0
.eh_frame:000000000001A760                 db  40h ; @
.eh_frame:000000000001A761                 db  0Eh
.eh_frame:000000000001A762                 db    0
.eh_frame:000000000001A763                 db    0
.eh_frame:000000000001A764                 db  0Ch
.eh_frame:000000000001A765                 db  13h
.eh_frame:000000000001A766                 db 0FFh
.eh_frame:000000000001A767                 db 0FFh
.eh_frame:000000000001A768                 db  22h ; "
.eh_frame:000000000001A769                 db    0
.eh_frame:000000000001A76A                 db    0
.eh_frame:000000000001A76B                 db    0
.eh_frame:000000000001A76C                 db    0
.eh_frame:000000000001A76D                 db  41h ; A
.eh_frame:000000000001A76E                 db  0Eh
.eh_frame:000000000001A76F                 db  10h
.eh_frame:000000000001A770                 db  83h
.eh_frame:000000000001A771                 db    2
.eh_frame:000000000001A772                 db  5Bh ; [
.eh_frame:000000000001A773                 db  0Ah
.eh_frame:000000000001A774                 db  0Eh
.eh_frame:000000000001A775                 db    8
.eh_frame:000000000001A776                 db  41h ; A
.eh_frame:000000000001A777                 db  0Bh
.eh_frame:000000000001A778                 db  5Ch ; \
.eh_frame:000000000001A779                 db    0
.eh_frame:000000000001A77A                 db    0
.eh_frame:000000000001A77B                 db    0
.eh_frame:000000000001A77C                 db  5Ch ; \
.eh_frame:000000000001A77D                 db  0Eh
.eh_frame:000000000001A77E                 db    0
.eh_frame:000000000001A77F                 db    0
.eh_frame:000000000001A780                 db  20h
.eh_frame:000000000001A781                 db  13h
.eh_frame:000000000001A782                 db 0FFh
.eh_frame:000000000001A783                 db 0FFh
.eh_frame:000000000001A784                 db  1Eh
.eh_frame:000000000001A785                 db    1
.eh_frame:000000000001A786                 db    0
.eh_frame:000000000001A787                 db    0
.eh_frame:000000000001A788                 db    0
.eh_frame:000000000001A789                 db  42h ; B
.eh_frame:000000000001A78A                 db  0Eh
.eh_frame:000000000001A78B                 db  10h
.eh_frame:000000000001A78C                 db  8Eh
.eh_frame:000000000001A78D                 db    2
.eh_frame:000000000001A78E                 db  42h ; B
.eh_frame:000000000001A78F                 db  0Eh
.eh_frame:000000000001A790                 db  18h
.eh_frame:000000000001A791                 db  8Dh
.eh_frame:000000000001A792                 db    3
.eh_frame:000000000001A793                 db  45h ; E
.eh_frame:000000000001A794                 db  0Eh
.eh_frame:000000000001A795                 db  20h
.eh_frame:000000000001A796                 db  8Ch
.eh_frame:000000000001A797                 db    4
.eh_frame:000000000001A798                 db  41h ; A
.eh_frame:000000000001A799                 db  0Eh
.eh_frame:000000000001A79A                 db  28h ; (
.eh_frame:000000000001A79B                 db  86h
.eh_frame:000000000001A79C                 db    5
.eh_frame:000000000001A79D                 db  44h ; D
.eh_frame:000000000001A79E                 db  0Eh
.eh_frame:000000000001A79F                 db  30h ; 0
.eh_frame:000000000001A7A0                 db  83h
.eh_frame:000000000001A7A1                 db    6
.eh_frame:000000000001A7A2                 db    2
.eh_frame:000000000001A7A3                 db 0A1h
.eh_frame:000000000001A7A4                 db  0Ah
.eh_frame:000000000001A7A5                 db  0Eh
.eh_frame:000000000001A7A6                 db  28h ; (
.eh_frame:000000000001A7A7                 db  44h ; D
.eh_frame:000000000001A7A8                 db  0Eh
.eh_frame:000000000001A7A9                 db  20h
.eh_frame:000000000001A7AA                 db  42h ; B
.eh_frame:000000000001A7AB                 db  0Eh
.eh_frame:000000000001A7AC                 db  18h
.eh_frame:000000000001A7AD                 db  42h ; B
.eh_frame:000000000001A7AE                 db  0Eh
.eh_frame:000000000001A7AF                 db  10h
.eh_frame:000000000001A7B0                 db  42h ; B
.eh_frame:000000000001A7B1                 db  0Eh
.eh_frame:000000000001A7B2                 db    8
.eh_frame:000000000001A7B3                 db  47h ; G
.eh_frame:000000000001A7B4                 db  0Bh
.eh_frame:000000000001A7B5                 db  71h ; q
.eh_frame:000000000001A7B6                 db  0Ah
.eh_frame:000000000001A7B7                 db  0Eh
.eh_frame:000000000001A7B8                 db  28h ; (
.eh_frame:000000000001A7B9                 db  41h ; A
.eh_frame:000000000001A7BA                 db  0Eh
.eh_frame:000000000001A7BB                 db  20h
.eh_frame:000000000001A7BC                 db  42h ; B
.eh_frame:000000000001A7BD                 db  0Eh
.eh_frame:000000000001A7BE                 db  18h
.eh_frame:000000000001A7BF                 db  42h ; B
.eh_frame:000000000001A7C0                 db  0Eh
.eh_frame:000000000001A7C1                 db  10h
.eh_frame:000000000001A7C2                 db  42h ; B
.eh_frame:000000000001A7C3                 db  0Eh
.eh_frame:000000000001A7C4                 db    8
.eh_frame:000000000001A7C5                 db  48h ; H
.eh_frame:000000000001A7C6                 db  0Bh
.eh_frame:000000000001A7C7                 db  53h ; S
.eh_frame:000000000001A7C8                 db  0Eh
.eh_frame:000000000001A7C9                 db  28h ; (
.eh_frame:000000000001A7CA                 db  44h ; D
.eh_frame:000000000001A7CB                 db  0Eh
.eh_frame:000000000001A7CC                 db  20h
.eh_frame:000000000001A7CD                 db  42h ; B
.eh_frame:000000000001A7CE                 db  0Eh
.eh_frame:000000000001A7CF                 db  18h
.eh_frame:000000000001A7D0                 db  42h ; B
.eh_frame:000000000001A7D1                 db  0Eh
.eh_frame:000000000001A7D2                 db  10h
.eh_frame:000000000001A7D3                 db  42h ; B
.eh_frame:000000000001A7D4                 db  0Eh
.eh_frame:000000000001A7D5                 db    8
.eh_frame:000000000001A7D6                 db    0
.eh_frame:000000000001A7D7                 db    0
.eh_frame:000000000001A7D8                 db  10h
.eh_frame:000000000001A7D9                 db    0
.eh_frame:000000000001A7DA                 db    0
.eh_frame:000000000001A7DB                 db    0
.eh_frame:000000000001A7DC                 db 0BCh
.eh_frame:000000000001A7DD                 db  0Eh
.eh_frame:000000000001A7DE                 db    0
.eh_frame:000000000001A7DF                 db    0
.eh_frame:000000000001A7E0                 db 0E0h
.eh_frame:000000000001A7E1                 db  13h
.eh_frame:000000000001A7E2                 db 0FFh
.eh_frame:000000000001A7E3                 db 0FFh
.eh_frame:000000000001A7E4                 db  77h ; w
.eh_frame:000000000001A7E5                 db    0
.eh_frame:000000000001A7E6                 db    0
.eh_frame:000000000001A7E7                 db    0
.eh_frame:000000000001A7E8                 db    0
.eh_frame:000000000001A7E9                 db    0
.eh_frame:000000000001A7EA                 db    0
.eh_frame:000000000001A7EB                 db    0
.eh_frame:000000000001A7EC                 db  5Ch ; \
.eh_frame:000000000001A7ED                 db    0
.eh_frame:000000000001A7EE                 db    0
.eh_frame:000000000001A7EF                 db    0
.eh_frame:000000000001A7F0                 db 0D0h
.eh_frame:000000000001A7F1                 db  0Eh
.eh_frame:000000000001A7F2                 db    0
.eh_frame:000000000001A7F3                 db    0
.eh_frame:000000000001A7F4                 db  4Ch ; L
.eh_frame:000000000001A7F5                 db  14h
.eh_frame:000000000001A7F6                 db 0FFh
.eh_frame:000000000001A7F7                 db 0FFh
.eh_frame:000000000001A7F8                 db  40h ; @
.eh_frame:000000000001A7F9                 db    1
.eh_frame:000000000001A7FA                 db    0
.eh_frame:000000000001A7FB                 db    0
.eh_frame:000000000001A7FC                 db    0
.eh_frame:000000000001A7FD                 db  42h ; B
.eh_frame:000000000001A7FE                 db  0Eh
.eh_frame:000000000001A7FF                 db  10h
.eh_frame:000000000001A800                 db  8Fh
.eh_frame:000000000001A801                 db    2
.eh_frame:000000000001A802                 db  42h ; B
.eh_frame:000000000001A803                 db  0Eh
.eh_frame:000000000001A804                 db  18h
.eh_frame:000000000001A805                 db  8Eh
.eh_frame:000000000001A806                 db    3
.eh_frame:000000000001A807                 db  42h ; B
.eh_frame:000000000001A808                 db  0Eh
.eh_frame:000000000001A809                 db  20h
.eh_frame:000000000001A80A                 db  8Dh
.eh_frame:000000000001A80B                 db    4
.eh_frame:000000000001A80C                 db  42h ; B
.eh_frame:000000000001A80D                 db  0Eh
.eh_frame:000000000001A80E                 db  28h ; (
.eh_frame:000000000001A80F                 db  8Ch
.eh_frame:000000000001A810                 db    5
.eh_frame:000000000001A811                 db  41h ; A
.eh_frame:000000000001A812                 db  0Eh
.eh_frame:000000000001A813                 db  30h ; 0
.eh_frame:000000000001A814                 db  86h
.eh_frame:000000000001A815                 db    6
.eh_frame:000000000001A816                 db  41h ; A
.eh_frame:000000000001A817                 db  0Eh
.eh_frame:000000000001A818                 db  38h ; 8
.eh_frame:000000000001A819                 db  83h
.eh_frame:000000000001A81A                 db    7
.eh_frame:000000000001A81B                 db  44h ; D
.eh_frame:000000000001A81C                 db  0Eh
.eh_frame:000000000001A81D                 db  40h ; @
.eh_frame:000000000001A81E                 db    2
.eh_frame:000000000001A81F                 db 0EEh
.eh_frame:000000000001A820                 db  0Ah
.eh_frame:000000000001A821                 db  0Eh
.eh_frame:000000000001A822                 db  38h ; 8
.eh_frame:000000000001A823                 db  46h ; F
.eh_frame:000000000001A824                 db  0Eh
.eh_frame:000000000001A825                 db  30h ; 0
.eh_frame:000000000001A826                 db  41h ; A
.eh_frame:000000000001A827                 db  0Eh
.eh_frame:000000000001A828                 db  28h ; (
.eh_frame:000000000001A829                 db  42h ; B
.eh_frame:000000000001A82A                 db  0Eh
.eh_frame:000000000001A82B                 db  20h
.eh_frame:000000000001A82C                 db  42h ; B
.eh_frame:000000000001A82D                 db  0Eh
.eh_frame:000000000001A82E                 db  18h
.eh_frame:000000000001A82F                 db  42h ; B
.eh_frame:000000000001A830                 db  0Eh
.eh_frame:000000000001A831                 db  10h
.eh_frame:000000000001A832                 db  42h ; B
.eh_frame:000000000001A833                 db  0Eh
.eh_frame:000000000001A834                 db    8
.eh_frame:000000000001A835                 db  45h ; E
.eh_frame:000000000001A836                 db  0Bh
.eh_frame:000000000001A837                 db  63h ; c
.eh_frame:000000000001A838                 db  0Eh
.eh_frame:000000000001A839                 db  38h ; 8
.eh_frame:000000000001A83A                 db  43h ; C
.eh_frame:000000000001A83B                 db  0Eh
.eh_frame:000000000001A83C                 db  30h ; 0
.eh_frame:000000000001A83D                 db  41h ; A
.eh_frame:000000000001A83E                 db  0Eh
.eh_frame:000000000001A83F                 db  28h ; (
.eh_frame:000000000001A840                 db  42h ; B
.eh_frame:000000000001A841                 db  0Eh
.eh_frame:000000000001A842                 db  20h
.eh_frame:000000000001A843                 db  42h ; B
.eh_frame:000000000001A844                 db  0Eh
.eh_frame:000000000001A845                 db  18h
.eh_frame:000000000001A846                 db  42h ; B
.eh_frame:000000000001A847                 db  0Eh
.eh_frame:000000000001A848                 db  10h
.eh_frame:000000000001A849                 db  42h ; B
.eh_frame:000000000001A84A                 db  0Eh
.eh_frame:000000000001A84B                 db    8
.eh_frame:000000000001A84C                 db  10h
.eh_frame:000000000001A84D                 db    0
.eh_frame:000000000001A84E                 db    0
.eh_frame:000000000001A84F                 db    0
.eh_frame:000000000001A850                 db  30h ; 0
.eh_frame:000000000001A851                 db  0Fh
.eh_frame:000000000001A852                 db    0
.eh_frame:000000000001A853                 db    0
.eh_frame:000000000001A854                 db  2Ch ; ,
.eh_frame:000000000001A855                 db  15h
.eh_frame:000000000001A856                 db 0FFh
.eh_frame:000000000001A857                 db 0FFh
.eh_frame:000000000001A858                 db    5
.eh_frame:000000000001A859                 db    0
.eh_frame:000000000001A85A                 db    0
.eh_frame:000000000001A85B                 db    0
.eh_frame:000000000001A85C                 db    0
.eh_frame:000000000001A85D                 db    0
.eh_frame:000000000001A85E                 db    0
.eh_frame:000000000001A85F                 db    0
.eh_frame:000000000001A860                 db  10h
.eh_frame:000000000001A861                 db    0
.eh_frame:000000000001A862                 db    0
.eh_frame:000000000001A863                 db    0
.eh_frame:000000000001A864                 db  44h ; D
.eh_frame:000000000001A865                 db  0Fh
.eh_frame:000000000001A866                 db    0
.eh_frame:000000000001A867                 db    0
.eh_frame:000000000001A868                 db  28h ; (
.eh_frame:000000000001A869                 db  15h
.eh_frame:000000000001A86A                 db 0FFh
.eh_frame:000000000001A86B                 db 0FFh
.eh_frame:000000000001A86C                 db    5
.eh_frame:000000000001A86D                 db    0
.eh_frame:000000000001A86E                 db    0
.eh_frame:000000000001A86F                 db    0
.eh_frame:000000000001A870                 db    0
.eh_frame:000000000001A871                 db    0
.eh_frame:000000000001A872                 db    0
.eh_frame:000000000001A873                 db    0
.eh_frame:000000000001A874                 db  10h
.eh_frame:000000000001A875                 db    0
.eh_frame:000000000001A876                 db    0
.eh_frame:000000000001A877                 db    0
.eh_frame:000000000001A878                 db  58h ; X
.eh_frame:000000000001A879                 db  0Fh
.eh_frame:000000000001A87A                 db    0
.eh_frame:000000000001A87B                 db    0
.eh_frame:000000000001A87C                 db  24h ; $
.eh_frame:000000000001A87D                 db  15h
.eh_frame:000000000001A87E                 db 0FFh
.eh_frame:000000000001A87F                 db 0FFh
.eh_frame:000000000001A880                 db    5
.eh_frame:000000000001A881                 db    0
.eh_frame:000000000001A882                 db    0
.eh_frame:000000000001A883                 db    0
.eh_frame:000000000001A884                 db    0
.eh_frame:000000000001A885                 db    0
.eh_frame:000000000001A886                 db    0
.eh_frame:000000000001A887                 db    0
.eh_frame:000000000001A888                 db  10h
.eh_frame:000000000001A889                 db    0
.eh_frame:000000000001A88A                 db    0
.eh_frame:000000000001A88B                 db    0
.eh_frame:000000000001A88C                 db  6Ch ; l
.eh_frame:000000000001A88D                 db  0Fh
.eh_frame:000000000001A88E                 db    0
.eh_frame:000000000001A88F                 db    0
.eh_frame:000000000001A890                 db  20h
.eh_frame:000000000001A891                 db  15h
.eh_frame:000000000001A892                 db 0FFh
.eh_frame:000000000001A893                 db 0FFh
.eh_frame:000000000001A894                 db  49h ; I
.eh_frame:000000000001A895                 db    0
.eh_frame:000000000001A896                 db    0
.eh_frame:000000000001A897                 db    0
.eh_frame:000000000001A898                 db    0
.eh_frame:000000000001A899                 db    0
.eh_frame:000000000001A89A                 db    0
.eh_frame:000000000001A89B                 db    0
.eh_frame:000000000001A89C                 db  10h
.eh_frame:000000000001A89D                 db    0
.eh_frame:000000000001A89E                 db    0
.eh_frame:000000000001A89F                 db    0
.eh_frame:000000000001A8A0                 db  80h
.eh_frame:000000000001A8A1                 db  0Fh
.eh_frame:000000000001A8A2                 db    0
.eh_frame:000000000001A8A3                 db    0
.eh_frame:000000000001A8A4                 db  5Ch ; \
.eh_frame:000000000001A8A5                 db  15h
.eh_frame:000000000001A8A6                 db 0FFh
.eh_frame:000000000001A8A7                 db 0FFh
.eh_frame:000000000001A8A8                 db  58h ; X
.eh_frame:000000000001A8A9                 db    0
.eh_frame:000000000001A8AA                 db    0
.eh_frame:000000000001A8AB                 db    0
.eh_frame:000000000001A8AC                 db    0
.eh_frame:000000000001A8AD                 db    0
.eh_frame:000000000001A8AE                 db    0
.eh_frame:000000000001A8AF                 db    0
.eh_frame:000000000001A8B0                 db  38h ; 8
.eh_frame:000000000001A8B1                 db    0
.eh_frame:000000000001A8B2                 db    0
.eh_frame:000000000001A8B3                 db    0
.eh_frame:000000000001A8B4                 db  94h
.eh_frame:000000000001A8B5                 db  0Fh
.eh_frame:000000000001A8B6                 db    0
.eh_frame:000000000001A8B7                 db    0
.eh_frame:000000000001A8B8                 db 0A8h
.eh_frame:000000000001A8B9                 db  15h
.eh_frame:000000000001A8BA                 db 0FFh
.eh_frame:000000000001A8BB                 db 0FFh
.eh_frame:000000000001A8BC                 db  47h ; G
.eh_frame:000000000001A8BD                 db    1
.eh_frame:000000000001A8BE                 db    0
.eh_frame:000000000001A8BF                 db    0
.eh_frame:000000000001A8C0                 db    0
.eh_frame:000000000001A8C1                 db  42h ; B
.eh_frame:000000000001A8C2                 db  0Eh
.eh_frame:000000000001A8C3                 db  10h
.eh_frame:000000000001A8C4                 db  8Dh
.eh_frame:000000000001A8C5                 db    2
.eh_frame:000000000001A8C6                 db  42h ; B
.eh_frame:000000000001A8C7                 db  0Eh
.eh_frame:000000000001A8C8                 db  18h
.eh_frame:000000000001A8C9                 db  8Ch
.eh_frame:000000000001A8CA                 db    3
.eh_frame:000000000001A8CB                 db  44h ; D
.eh_frame:000000000001A8CC                 db  0Eh
.eh_frame:000000000001A8CD                 db  20h
.eh_frame:000000000001A8CE                 db  86h
.eh_frame:000000000001A8CF                 db    4
.eh_frame:000000000001A8D0                 db  41h ; A
.eh_frame:000000000001A8D1                 db  0Eh
.eh_frame:000000000001A8D2                 db  28h ; (
.eh_frame:000000000001A8D3                 db  83h
.eh_frame:000000000001A8D4                 db    5
.eh_frame:000000000001A8D5                 db  46h ; F
.eh_frame:000000000001A8D6                 db  0Eh
.eh_frame:000000000001A8D7                 db  30h ; 0
.eh_frame:000000000001A8D8                 db    2
.eh_frame:000000000001A8D9                 db 0CDh
.eh_frame:000000000001A8DA                 db  0Ah
.eh_frame:000000000001A8DB                 db  0Eh
.eh_frame:000000000001A8DC                 db  28h ; (
.eh_frame:000000000001A8DD                 db  47h ; G
.eh_frame:000000000001A8DE                 db  0Eh
.eh_frame:000000000001A8DF                 db  20h
.eh_frame:000000000001A8E0                 db  41h ; A
.eh_frame:000000000001A8E1                 db  0Eh
.eh_frame:000000000001A8E2                 db  18h
.eh_frame:000000000001A8E3                 db  42h ; B
.eh_frame:000000000001A8E4                 db  0Eh
.eh_frame:000000000001A8E5                 db  10h
.eh_frame:000000000001A8E6                 db  42h ; B
.eh_frame:000000000001A8E7                 db  0Eh
.eh_frame:000000000001A8E8                 db    8
.eh_frame:000000000001A8E9                 db  58h ; X
.eh_frame:000000000001A8EA                 db  0Bh
.eh_frame:000000000001A8EB                 db    0
.eh_frame:000000000001A8EC                 db  34h ; 4
.eh_frame:000000000001A8ED                 db    0
.eh_frame:000000000001A8EE                 db    0
.eh_frame:000000000001A8EF                 db    0
.eh_frame:000000000001A8F0                 db 0D0h
.eh_frame:000000000001A8F1                 db  0Fh
.eh_frame:000000000001A8F2                 db    0
.eh_frame:000000000001A8F3                 db    0
.eh_frame:000000000001A8F4                 db 0BCh
.eh_frame:000000000001A8F5                 db  16h
.eh_frame:000000000001A8F6                 db 0FFh
.eh_frame:000000000001A8F7                 db 0FFh
.eh_frame:000000000001A8F8                 db  5Bh ; [
.eh_frame:000000000001A8F9                 db    0
.eh_frame:000000000001A8FA                 db    0
.eh_frame:000000000001A8FB                 db    0
.eh_frame:000000000001A8FC                 db    0
.eh_frame:000000000001A8FD                 db  42h ; B
.eh_frame:000000000001A8FE                 db  0Eh
.eh_frame:000000000001A8FF                 db  10h
.eh_frame:000000000001A900                 db  8Ch
.eh_frame:000000000001A901                 db    2
.eh_frame:000000000001A902                 db  41h ; A
.eh_frame:000000000001A903                 db  0Eh
.eh_frame:000000000001A904                 db  18h
.eh_frame:000000000001A905                 db  86h
.eh_frame:000000000001A906                 db    3
.eh_frame:000000000001A907                 db  44h ; D
.eh_frame:000000000001A908                 db  0Eh
.eh_frame:000000000001A909                 db  20h
.eh_frame:000000000001A90A                 db  83h
.eh_frame:000000000001A90B                 db    4
.eh_frame:000000000001A90C                 db  79h ; y
.eh_frame:000000000001A90D                 db  0Ah
.eh_frame:000000000001A90E                 db  0Eh
.eh_frame:000000000001A90F                 db  18h
.eh_frame:000000000001A910                 db  44h ; D
.eh_frame:000000000001A911                 db  0Eh
.eh_frame:000000000001A912                 db  10h
.eh_frame:000000000001A913                 db  42h ; B
.eh_frame:000000000001A914                 db  0Eh
.eh_frame:000000000001A915                 db    8
.eh_frame:000000000001A916                 db  4Ah ; J
.eh_frame:000000000001A917                 db  0Bh
.eh_frame:000000000001A918                 db  44h ; D
.eh_frame:000000000001A919                 db  0Eh
.eh_frame:000000000001A91A                 db  18h
.eh_frame:000000000001A91B                 db  41h ; A
.eh_frame:000000000001A91C                 db  0Eh
.eh_frame:000000000001A91D                 db  10h
.eh_frame:000000000001A91E                 db  45h ; E
.eh_frame:000000000001A91F                 db  0Eh
.eh_frame:000000000001A920                 db    8
.eh_frame:000000000001A921                 db    0
.eh_frame:000000000001A922                 db    0
.eh_frame:000000000001A923                 db    0
.eh_frame:000000000001A924                 db  10h
.eh_frame:000000000001A925                 db    0
.eh_frame:000000000001A926                 db    0
.eh_frame:000000000001A927                 db    0
.eh_frame:000000000001A928                 db    8
.eh_frame:000000000001A929                 db  10h
.eh_frame:000000000001A92A                 db    0
.eh_frame:000000000001A92B                 db    0
.eh_frame:000000000001A92C                 db 0E4h
.eh_frame:000000000001A92D                 db  16h
.eh_frame:000000000001A92E                 db 0FFh
.eh_frame:000000000001A92F                 db 0FFh
.eh_frame:000000000001A930                 db  41h ; A
.eh_frame:000000000001A931                 db    0
.eh_frame:000000000001A932                 db    0
.eh_frame:000000000001A933                 db    0
.eh_frame:000000000001A934                 db    0
.eh_frame:000000000001A935                 db  7Ch ; |
.eh_frame:000000000001A936                 db  0Eh
.eh_frame:000000000001A937                 db  10h
.eh_frame:000000000001A938                 db  30h ; 0
.eh_frame:000000000001A939                 db    0
.eh_frame:000000000001A93A                 db    0
.eh_frame:000000000001A93B                 db    0
.eh_frame:000000000001A93C                 db  1Ch
.eh_frame:000000000001A93D                 db  10h
.eh_frame:000000000001A93E                 db    0
.eh_frame:000000000001A93F                 db    0
.eh_frame:000000000001A940                 db  20h
.eh_frame:000000000001A941                 db  17h
.eh_frame:000000000001A942                 db 0FFh
.eh_frame:000000000001A943                 db 0FFh
.eh_frame:000000000001A944                 db  72h ; r
.eh_frame:000000000001A945                 db    0
.eh_frame:000000000001A946                 db    0
.eh_frame:000000000001A947                 db    0
.eh_frame:000000000001A948                 db    0
.eh_frame:000000000001A949                 db  41h ; A
.eh_frame:000000000001A94A                 db  0Eh
.eh_frame:000000000001A94B                 db  10h
.eh_frame:000000000001A94C                 db  86h
.eh_frame:000000000001A94D                 db    2
.eh_frame:000000000001A94E                 db  41h ; A
.eh_frame:000000000001A94F                 db  0Eh
.eh_frame:000000000001A950                 db  18h
.eh_frame:000000000001A951                 db  83h
.eh_frame:000000000001A952                 db    3
.eh_frame:000000000001A953                 db  4Ah ; J
.eh_frame:000000000001A954                 db  0Eh
.eh_frame:000000000001A955                 db  20h
.eh_frame:000000000001A956                 db    2
.eh_frame:000000000001A957                 db  53h ; S
.eh_frame:000000000001A958                 db  0Ah
.eh_frame:000000000001A959                 db  0Eh
.eh_frame:000000000001A95A                 db  18h
.eh_frame:000000000001A95B                 db  41h ; A
.eh_frame:000000000001A95C                 db  0Eh
.eh_frame:000000000001A95D                 db  10h
.eh_frame:000000000001A95E                 db  41h ; A
.eh_frame:000000000001A95F                 db  0Eh
.eh_frame:000000000001A960                 db    8
.eh_frame:000000000001A961                 db  47h ; G
.eh_frame:000000000001A962                 db  0Bh
.eh_frame:000000000001A963                 db  47h ; G
.eh_frame:000000000001A964                 db  0Eh
.eh_frame:000000000001A965                 db  18h
.eh_frame:000000000001A966                 db  41h ; A
.eh_frame:000000000001A967                 db  0Eh
.eh_frame:000000000001A968                 db  10h
.eh_frame:000000000001A969                 db  41h ; A
.eh_frame:000000000001A96A                 db  0Eh
.eh_frame:000000000001A96B                 db    8
.eh_frame:000000000001A96C                 db  10h
.eh_frame:000000000001A96D                 db    0
.eh_frame:000000000001A96E                 db    0
.eh_frame:000000000001A96F                 db    0
.eh_frame:000000000001A970                 db  50h ; P
.eh_frame:000000000001A971                 db  10h
.eh_frame:000000000001A972                 db    0
.eh_frame:000000000001A973                 db    0
.eh_frame:000000000001A974                 db  6Ch ; l
.eh_frame:000000000001A975                 db  17h
.eh_frame:000000000001A976                 db 0FFh
.eh_frame:000000000001A977                 db 0FFh
.eh_frame:000000000001A978                 db  65h ; e
.eh_frame:000000000001A979                 db    0
.eh_frame:000000000001A97A                 db    0
.eh_frame:000000000001A97B                 db    0
.eh_frame:000000000001A97C                 db    0
.eh_frame:000000000001A97D                 db    0
.eh_frame:000000000001A97E                 db    0
.eh_frame:000000000001A97F                 db    0
.eh_frame:000000000001A980                 db  48h ; H
.eh_frame:000000000001A981                 db    0
.eh_frame:000000000001A982                 db    0
.eh_frame:000000000001A983                 db    0
.eh_frame:000000000001A984                 db  64h ; d
.eh_frame:000000000001A985                 db  10h
.eh_frame:000000000001A986                 db    0
.eh_frame:000000000001A987                 db    0
.eh_frame:000000000001A988                 db 0C8h
.eh_frame:000000000001A989                 db  17h
.eh_frame:000000000001A98A                 db 0FFh
.eh_frame:000000000001A98B                 db 0FFh
.eh_frame:000000000001A98C                 db  6Ah ; j
.eh_frame:000000000001A98D                 db    0
.eh_frame:000000000001A98E                 db    0
.eh_frame:000000000001A98F                 db    0
.eh_frame:000000000001A990                 db    0
.eh_frame:000000000001A991                 db  42h ; B
.eh_frame:000000000001A992                 db  0Eh
.eh_frame:000000000001A993                 db  10h
.eh_frame:000000000001A994                 db  8Fh
.eh_frame:000000000001A995                 db    2
.eh_frame:000000000001A996                 db  42h ; B
.eh_frame:000000000001A997                 db  0Eh
.eh_frame:000000000001A998                 db  18h
.eh_frame:000000000001A999                 db  8Eh
.eh_frame:000000000001A99A                 db    3
.eh_frame:000000000001A99B                 db  42h ; B
.eh_frame:000000000001A99C                 db  0Eh
.eh_frame:000000000001A99D                 db  20h
.eh_frame:000000000001A99E                 db  8Dh
.eh_frame:000000000001A99F                 db    4
.eh_frame:000000000001A9A0                 db  42h ; B
.eh_frame:000000000001A9A1                 db  0Eh
.eh_frame:000000000001A9A2                 db  28h ; (
.eh_frame:000000000001A9A3                 db  8Ch
.eh_frame:000000000001A9A4                 db    5
.eh_frame:000000000001A9A5                 db  41h ; A
.eh_frame:000000000001A9A6                 db  0Eh
.eh_frame:000000000001A9A7                 db  30h ; 0
.eh_frame:000000000001A9A8                 db  86h
.eh_frame:000000000001A9A9                 db    6
.eh_frame:000000000001A9AA                 db  41h ; A
.eh_frame:000000000001A9AB                 db  0Eh
.eh_frame:000000000001A9AC                 db  38h ; 8
.eh_frame:000000000001A9AD                 db  83h
.eh_frame:000000000001A9AE                 db    7
.eh_frame:000000000001A9AF                 db  44h ; D
.eh_frame:000000000001A9B0                 db  0Eh
.eh_frame:000000000001A9B1                 db  40h ; @
.eh_frame:000000000001A9B2                 db    2
.eh_frame:000000000001A9B3                 db  4Ah ; J
.eh_frame:000000000001A9B4                 db  0Ah
.eh_frame:000000000001A9B5                 db  0Eh
.eh_frame:000000000001A9B6                 db  38h ; 8
.eh_frame:000000000001A9B7                 db  44h ; D
.eh_frame:000000000001A9B8                 db  0Eh
.eh_frame:000000000001A9B9                 db  30h ; 0
.eh_frame:000000000001A9BA                 db  41h ; A
.eh_frame:000000000001A9BB                 db  0Eh
.eh_frame:000000000001A9BC                 db  28h ; (
.eh_frame:000000000001A9BD                 db  42h ; B
.eh_frame:000000000001A9BE                 db  0Eh
.eh_frame:000000000001A9BF                 db  20h
.eh_frame:000000000001A9C0                 db  42h ; B
.eh_frame:000000000001A9C1                 db  0Eh
.eh_frame:000000000001A9C2                 db  18h
.eh_frame:000000000001A9C3                 db  42h ; B
.eh_frame:000000000001A9C4                 db  0Eh
.eh_frame:000000000001A9C5                 db  10h
.eh_frame:000000000001A9C6                 db  42h ; B
.eh_frame:000000000001A9C7                 db  0Eh
.eh_frame:000000000001A9C8                 db    8
.eh_frame:000000000001A9C9                 db  41h ; A
.eh_frame:000000000001A9CA                 db  0Bh
.eh_frame:000000000001A9CB                 db    0
.eh_frame:000000000001A9CC                 db  10h
.eh_frame:000000000001A9CD                 db    0
.eh_frame:000000000001A9CE                 db    0
.eh_frame:000000000001A9CF                 db    0
.eh_frame:000000000001A9D0                 db 0B0h
.eh_frame:000000000001A9D1                 db  10h
.eh_frame:000000000001A9D2                 db    0
.eh_frame:000000000001A9D3                 db    0
.eh_frame:000000000001A9D4                 db 0ECh
.eh_frame:000000000001A9D5                 db  17h
.eh_frame:000000000001A9D6                 db 0FFh
.eh_frame:000000000001A9D7                 db 0FFh
.eh_frame:000000000001A9D8                 db  31h ; 1
.eh_frame:000000000001A9D9                 db    0
.eh_frame:000000000001A9DA                 db    0
.eh_frame:000000000001A9DB                 db    0
.eh_frame:000000000001A9DC                 db    0
.eh_frame:000000000001A9DD                 db    0
.eh_frame:000000000001A9DE                 db    0
.eh_frame:000000000001A9DF                 db    0
.eh_frame:000000000001A9E0                 db  10h
.eh_frame:000000000001A9E1                 db    0
.eh_frame:000000000001A9E2                 db    0
.eh_frame:000000000001A9E3                 db    0
.eh_frame:000000000001A9E4                 db 0C4h
.eh_frame:000000000001A9E5                 db  10h
.eh_frame:000000000001A9E6                 db    0
.eh_frame:000000000001A9E7                 db    0
.eh_frame:000000000001A9E8                 db  18h
.eh_frame:000000000001A9E9                 db  18h
.eh_frame:000000000001A9EA                 db 0FFh
.eh_frame:000000000001A9EB                 db 0FFh
.eh_frame:000000000001A9EC                 db  20h
.eh_frame:000000000001A9ED                 db    0
.eh_frame:000000000001A9EE                 db    0
.eh_frame:000000000001A9EF                 db    0
.eh_frame:000000000001A9F0                 db    0
.eh_frame:000000000001A9F1                 db    0
.eh_frame:000000000001A9F2                 db    0
.eh_frame:000000000001A9F3                 db    0
.eh_frame:000000000001A9F4                 db  48h ; H
.eh_frame:000000000001A9F5                 db    0
.eh_frame:000000000001A9F6                 db    0
.eh_frame:000000000001A9F7                 db    0
.eh_frame:000000000001A9F8                 db 0D8h
.eh_frame:000000000001A9F9                 db  10h
.eh_frame:000000000001A9FA                 db    0
.eh_frame:000000000001A9FB                 db    0
.eh_frame:000000000001A9FC                 db  24h ; $
.eh_frame:000000000001A9FD                 db  18h
.eh_frame:000000000001A9FE                 db 0FFh
.eh_frame:000000000001A9FF                 db 0FFh
.eh_frame:000000000001AA00                 db 0B4h
.eh_frame:000000000001AA01                 db    1
.eh_frame:000000000001AA02                 db    0
.eh_frame:000000000001AA03                 db    0
.eh_frame:000000000001AA04                 db    0
.eh_frame:000000000001AA05                 db  42h ; B
.eh_frame:000000000001AA06                 db  0Eh
.eh_frame:000000000001AA07                 db  10h
.eh_frame:000000000001AA08                 db  8Fh
.eh_frame:000000000001AA09                 db    2
.eh_frame:000000000001AA0A                 db  42h ; B
.eh_frame:000000000001AA0B                 db  0Eh
.eh_frame:000000000001AA0C                 db  18h
.eh_frame:000000000001AA0D                 db  8Eh
.eh_frame:000000000001AA0E                 db    3
.eh_frame:000000000001AA0F                 db  49h ; I
.eh_frame:000000000001AA10                 db  0Eh
.eh_frame:000000000001AA11                 db  20h
.eh_frame:000000000001AA12                 db  8Dh
.eh_frame:000000000001AA13                 db    4
.eh_frame:000000000001AA14                 db  42h ; B
.eh_frame:000000000001AA15                 db  0Eh
.eh_frame:000000000001AA16                 db  28h ; (
.eh_frame:000000000001AA17                 db  8Ch
.eh_frame:000000000001AA18                 db    5
.eh_frame:000000000001AA19                 db  44h ; D
.eh_frame:000000000001AA1A                 db  0Eh
.eh_frame:000000000001AA1B                 db  30h ; 0
.eh_frame:000000000001AA1C                 db  86h
.eh_frame:000000000001AA1D                 db    6
.eh_frame:000000000001AA1E                 db  41h ; A
.eh_frame:000000000001AA1F                 db  0Eh
.eh_frame:000000000001AA20                 db  38h ; 8
.eh_frame:000000000001AA21                 db  83h
.eh_frame:000000000001AA22                 db    7
.eh_frame:000000000001AA23                 db  52h ; R
.eh_frame:000000000001AA24                 db  0Eh
.eh_frame:000000000001AA25                 db  40h ; @
.eh_frame:000000000001AA26                 db    2
.eh_frame:000000000001AA27                 db 0D8h
.eh_frame:000000000001AA28                 db  0Ah
.eh_frame:000000000001AA29                 db  0Eh
.eh_frame:000000000001AA2A                 db  38h ; 8
.eh_frame:000000000001AA2B                 db  44h ; D
.eh_frame:000000000001AA2C                 db  0Eh
.eh_frame:000000000001AA2D                 db  30h ; 0
.eh_frame:000000000001AA2E                 db  41h ; A
.eh_frame:000000000001AA2F                 db  0Eh
.eh_frame:000000000001AA30                 db  28h ; (
.eh_frame:000000000001AA31                 db  42h ; B
.eh_frame:000000000001AA32                 db  0Eh
.eh_frame:000000000001AA33                 db  20h
.eh_frame:000000000001AA34                 db  42h ; B
.eh_frame:000000000001AA35                 db  0Eh
.eh_frame:000000000001AA36                 db  18h
.eh_frame:000000000001AA37                 db  42h ; B
.eh_frame:000000000001AA38                 db  0Eh
.eh_frame:000000000001AA39                 db  10h
.eh_frame:000000000001AA3A                 db  42h ; B
.eh_frame:000000000001AA3B                 db  0Eh
.eh_frame:000000000001AA3C                 db    8
.eh_frame:000000000001AA3D                 db  45h ; E
.eh_frame:000000000001AA3E                 db  0Bh
.eh_frame:000000000001AA3F                 db    0
.eh_frame:000000000001AA40                 db  28h ; (
.eh_frame:000000000001AA41                 db    0
.eh_frame:000000000001AA42                 db    0
.eh_frame:000000000001AA43                 db    0
.eh_frame:000000000001AA44                 db  24h ; $
.eh_frame:000000000001AA45                 db  11h
.eh_frame:000000000001AA46                 db    0
.eh_frame:000000000001AA47                 db    0
.eh_frame:000000000001AA48                 db  98h
.eh_frame:000000000001AA49                 db  19h
.eh_frame:000000000001AA4A                 db 0FFh
.eh_frame:000000000001AA4B                 db 0FFh
.eh_frame:000000000001AA4C                 db  90h
.eh_frame:000000000001AA4D                 db    0
.eh_frame:000000000001AA4E                 db    0
.eh_frame:000000000001AA4F                 db    0
.eh_frame:000000000001AA50                 db    0
.eh_frame:000000000001AA51                 db  42h ; B
.eh_frame:000000000001AA52                 db  0Eh
.eh_frame:000000000001AA53                 db  10h
.eh_frame:000000000001AA54                 db  8Ch
.eh_frame:000000000001AA55                 db    2
.eh_frame:000000000001AA56                 db  41h ; A
.eh_frame:000000000001AA57                 db  0Eh
.eh_frame:000000000001AA58                 db  18h
.eh_frame:000000000001AA59                 db  86h
.eh_frame:000000000001AA5A                 db    3
.eh_frame:000000000001AA5B                 db  44h ; D
.eh_frame:000000000001AA5C                 db  0Eh
.eh_frame:000000000001AA5D                 db  20h
.eh_frame:000000000001AA5E                 db  83h
.eh_frame:000000000001AA5F                 db    4
.eh_frame:000000000001AA60                 db    2
.eh_frame:000000000001AA61                 db  85h
.eh_frame:000000000001AA62                 db  0Eh
.eh_frame:000000000001AA63                 db  18h
.eh_frame:000000000001AA64                 db  41h ; A
.eh_frame:000000000001AA65                 db  0Eh
.eh_frame:000000000001AA66                 db  10h
.eh_frame:000000000001AA67                 db  42h ; B
.eh_frame:000000000001AA68                 db  0Eh
.eh_frame:000000000001AA69                 db    8
.eh_frame:000000000001AA6A                 db    0
.eh_frame:000000000001AA6B                 db    0
.eh_frame:000000000001AA6C                 db  28h ; (
.eh_frame:000000000001AA6D                 db    0
.eh_frame:000000000001AA6E                 db    0
.eh_frame:000000000001AA6F                 db    0
.eh_frame:000000000001AA70                 db  50h ; P
.eh_frame:000000000001AA71                 db  11h
.eh_frame:000000000001AA72                 db    0
.eh_frame:000000000001AA73                 db    0
.eh_frame:000000000001AA74                 db 0FCh
.eh_frame:000000000001AA75                 db  19h
.eh_frame:000000000001AA76                 db 0FFh
.eh_frame:000000000001AA77                 db 0FFh
.eh_frame:000000000001AA78                 db 0D6h
.eh_frame:000000000001AA79                 db    0
.eh_frame:000000000001AA7A                 db    0
.eh_frame:000000000001AA7B                 db    0
.eh_frame:000000000001AA7C                 db    0
.eh_frame:000000000001AA7D                 db  42h ; B
.eh_frame:000000000001AA7E                 db  0Eh
.eh_frame:000000000001AA7F                 db  10h
.eh_frame:000000000001AA80                 db  8Ch
.eh_frame:000000000001AA81                 db    2
.eh_frame:000000000001AA82                 db  41h ; A
.eh_frame:000000000001AA83                 db  0Eh
.eh_frame:000000000001AA84                 db  18h
.eh_frame:000000000001AA85                 db  86h
.eh_frame:000000000001AA86                 db    3
.eh_frame:000000000001AA87                 db  44h ; D
.eh_frame:000000000001AA88                 db  0Eh
.eh_frame:000000000001AA89                 db  20h
.eh_frame:000000000001AA8A                 db  83h
.eh_frame:000000000001AA8B                 db    4
.eh_frame:000000000001AA8C                 db    2
.eh_frame:000000000001AA8D                 db 0C4h
.eh_frame:000000000001AA8E                 db  0Eh
.eh_frame:000000000001AA8F                 db  18h
.eh_frame:000000000001AA90                 db  44h ; D
.eh_frame:000000000001AA91                 db  0Eh
.eh_frame:000000000001AA92                 db  10h
.eh_frame:000000000001AA93                 db  42h ; B
.eh_frame:000000000001AA94                 db  0Eh
.eh_frame:000000000001AA95                 db    8
.eh_frame:000000000001AA96                 db    0
.eh_frame:000000000001AA97                 db    0
.eh_frame:000000000001AA98                 db  34h ; 4
.eh_frame:000000000001AA99                 db    0
.eh_frame:000000000001AA9A                 db    0
.eh_frame:000000000001AA9B                 db    0
.eh_frame:000000000001AA9C                 db  7Ch ; |
.eh_frame:000000000001AA9D                 db  11h
.eh_frame:000000000001AA9E                 db    0
.eh_frame:000000000001AA9F                 db    0
.eh_frame:000000000001AAA0                 db 0B0h
.eh_frame:000000000001AAA1                 db  1Ah
.eh_frame:000000000001AAA2                 db 0FFh
.eh_frame:000000000001AAA3                 db 0FFh
.eh_frame:000000000001AAA4                 db  3Eh ; >
.eh_frame:000000000001AAA5                 db    2
.eh_frame:000000000001AAA6                 db    0
.eh_frame:000000000001AAA7                 db    0
.eh_frame:000000000001AAA8                 db    0
.eh_frame:000000000001AAA9                 db  42h ; B
.eh_frame:000000000001AAAA                 db  0Eh
.eh_frame:000000000001AAAB                 db  10h
.eh_frame:000000000001AAAC                 db  8Ch
.eh_frame:000000000001AAAD                 db    2
.eh_frame:000000000001AAAE                 db  41h ; A
.eh_frame:000000000001AAAF                 db  0Eh
.eh_frame:000000000001AAB0                 db  18h
.eh_frame:000000000001AAB1                 db  86h
.eh_frame:000000000001AAB2                 db    3
.eh_frame:000000000001AAB3                 db  44h ; D
.eh_frame:000000000001AAB4                 db  0Eh
.eh_frame:000000000001AAB5                 db  20h
.eh_frame:000000000001AAB6                 db  83h
.eh_frame:000000000001AAB7                 db    4
.eh_frame:000000000001AAB8                 db  44h ; D
.eh_frame:000000000001AAB9                 db  0Eh
.eh_frame:000000000001AABA                 db  80h
.eh_frame:000000000001AABB                 db    1
.eh_frame:000000000001AABC                 db    3
.eh_frame:000000000001AABD                 db  91h
.eh_frame:000000000001AABE                 db    1
.eh_frame:000000000001AABF                 db  0Ah
.eh_frame:000000000001AAC0                 db  0Eh
.eh_frame:000000000001AAC1                 db  20h
.eh_frame:000000000001AAC2                 db  41h ; A
.eh_frame:000000000001AAC3                 db  0Eh
.eh_frame:000000000001AAC4                 db  18h
.eh_frame:000000000001AAC5                 db  41h ; A
.eh_frame:000000000001AAC6                 db  0Eh
.eh_frame:000000000001AAC7                 db  10h
.eh_frame:000000000001AAC8                 db  42h ; B
.eh_frame:000000000001AAC9                 db  0Eh
.eh_frame:000000000001AACA                 db    8
.eh_frame:000000000001AACB                 db  48h ; H
.eh_frame:000000000001AACC                 db  0Bh
.eh_frame:000000000001AACD                 db    0
.eh_frame:000000000001AACE                 db    0
.eh_frame:000000000001AACF                 db    0
.eh_frame:000000000001AAD0                 db  38h ; 8
.eh_frame:000000000001AAD1                 db    0
.eh_frame:000000000001AAD2                 db    0
.eh_frame:000000000001AAD3                 db    0
.eh_frame:000000000001AAD4                 db 0B4h
.eh_frame:000000000001AAD5                 db  11h
.eh_frame:000000000001AAD6                 db    0
.eh_frame:000000000001AAD7                 db    0
.eh_frame:000000000001AAD8                 db 0B8h
.eh_frame:000000000001AAD9                 db  1Ch
.eh_frame:000000000001AADA                 db 0FFh
.eh_frame:000000000001AADB                 db 0FFh
.eh_frame:000000000001AADC                 db  84h
.eh_frame:000000000001AADD                 db    2
.eh_frame:000000000001AADE                 db    0
.eh_frame:000000000001AADF                 db    0
.eh_frame:000000000001AAE0                 db    0
.eh_frame:000000000001AAE1                 db  42h ; B
.eh_frame:000000000001AAE2                 db  0Eh
.eh_frame:000000000001AAE3                 db  10h
.eh_frame:000000000001AAE4                 db  8Dh
.eh_frame:000000000001AAE5                 db    2
.eh_frame:000000000001AAE6                 db  42h ; B
.eh_frame:000000000001AAE7                 db  0Eh
.eh_frame:000000000001AAE8                 db  18h
.eh_frame:000000000001AAE9                 db  8Ch
.eh_frame:000000000001AAEA                 db    3
.eh_frame:000000000001AAEB                 db  41h ; A
.eh_frame:000000000001AAEC                 db  0Eh
.eh_frame:000000000001AAED                 db  20h
.eh_frame:000000000001AAEE                 db  86h
.eh_frame:000000000001AAEF                 db    4
.eh_frame:000000000001AAF0                 db  41h ; A
.eh_frame:000000000001AAF1                 db  0Eh
.eh_frame:000000000001AAF2                 db  28h ; (
.eh_frame:000000000001AAF3                 db  83h
.eh_frame:000000000001AAF4                 db    5
.eh_frame:000000000001AAF5                 db  44h ; D
.eh_frame:000000000001AAF6                 db  0Eh
.eh_frame:000000000001AAF7                 db  40h ; @
.eh_frame:000000000001AAF8                 db    2
.eh_frame:000000000001AAF9                 db  5Ah ; Z
.eh_frame:000000000001AAFA                 db  0Ah
.eh_frame:000000000001AAFB                 db  0Eh
.eh_frame:000000000001AAFC                 db  28h ; (
.eh_frame:000000000001AAFD                 db  41h ; A
.eh_frame:000000000001AAFE                 db  0Eh
.eh_frame:000000000001AAFF                 db  20h
.eh_frame:000000000001AB00                 db  41h ; A
.eh_frame:000000000001AB01                 db  0Eh
.eh_frame:000000000001AB02                 db  18h
.eh_frame:000000000001AB03                 db  42h ; B
.eh_frame:000000000001AB04                 db  0Eh
.eh_frame:000000000001AB05                 db  10h
.eh_frame:000000000001AB06                 db  42h ; B
.eh_frame:000000000001AB07                 db  0Eh
.eh_frame:000000000001AB08                 db    8
.eh_frame:000000000001AB09                 db  46h ; F
.eh_frame:000000000001AB0A                 db  0Bh
.eh_frame:000000000001AB0B                 db    0
.eh_frame:000000000001AB0C                 db  20h
.eh_frame:000000000001AB0D                 db    0
.eh_frame:000000000001AB0E                 db    0
.eh_frame:000000000001AB0F                 db    0
.eh_frame:000000000001AB10                 db 0F0h
.eh_frame:000000000001AB11                 db  11h
.eh_frame:000000000001AB12                 db    0
.eh_frame:000000000001AB13                 db    0
.eh_frame:000000000001AB14                 db  0Ch
.eh_frame:000000000001AB15                 db  1Fh
.eh_frame:000000000001AB16                 db 0FFh
.eh_frame:000000000001AB17                 db 0FFh
.eh_frame:000000000001AB18                 db  59h ; Y
.eh_frame:000000000001AB19                 db    0
.eh_frame:000000000001AB1A                 db    0
.eh_frame:000000000001AB1B                 db    0
.eh_frame:000000000001AB1C                 db    0
.eh_frame:000000000001AB1D                 db  41h ; A
.eh_frame:000000000001AB1E                 db  0Eh
.eh_frame:000000000001AB1F                 db  10h
.eh_frame:000000000001AB20                 db  83h
.eh_frame:000000000001AB21                 db    2
.eh_frame:000000000001AB22                 db  47h ; G
.eh_frame:000000000001AB23                 db  0Eh
.eh_frame:000000000001AB24                 db  20h
.eh_frame:000000000001AB25                 db  7Ch ; |
.eh_frame:000000000001AB26                 db  0Ah
.eh_frame:000000000001AB27                 db  0Eh
.eh_frame:000000000001AB28                 db  10h
.eh_frame:000000000001AB29                 db  41h ; A
.eh_frame:000000000001AB2A                 db  0Eh
.eh_frame:000000000001AB2B                 db    8
.eh_frame:000000000001AB2C                 db  4Bh ; K
.eh_frame:000000000001AB2D                 db  0Bh
.eh_frame:000000000001AB2E                 db    0
.eh_frame:000000000001AB2F                 db    0
.eh_frame:000000000001AB30                 db  34h ; 4
.eh_frame:000000000001AB31                 db    0
.eh_frame:000000000001AB32                 db    0
.eh_frame:000000000001AB33                 db    0
.eh_frame:000000000001AB34                 db  14h
.eh_frame:000000000001AB35                 db  12h
.eh_frame:000000000001AB36                 db    0
.eh_frame:000000000001AB37                 db    0
.eh_frame:000000000001AB38                 db  48h ; H
.eh_frame:000000000001AB39                 db  1Fh
.eh_frame:000000000001AB3A                 db 0FFh
.eh_frame:000000000001AB3B                 db 0FFh
.eh_frame:000000000001AB3C                 db    3
.eh_frame:000000000001AB3D                 db    2
.eh_frame:000000000001AB3E                 db    0
.eh_frame:000000000001AB3F                 db    0
.eh_frame:000000000001AB40                 db    0
.eh_frame:000000000001AB41                 db  42h ; B
.eh_frame:000000000001AB42                 db  0Eh
.eh_frame:000000000001AB43                 db  10h
.eh_frame:000000000001AB44                 db  8Ch
.eh_frame:000000000001AB45                 db    2
.eh_frame:000000000001AB46                 db  41h ; A
.eh_frame:000000000001AB47                 db  0Eh
.eh_frame:000000000001AB48                 db  18h
.eh_frame:000000000001AB49                 db  86h
.eh_frame:000000000001AB4A                 db    3
.eh_frame:000000000001AB4B                 db  46h ; F
.eh_frame:000000000001AB4C                 db  0Eh
.eh_frame:000000000001AB4D                 db  20h
.eh_frame:000000000001AB4E                 db  83h
.eh_frame:000000000001AB4F                 db    4
.eh_frame:000000000001AB50                 db  47h ; G
.eh_frame:000000000001AB51                 db  0Eh
.eh_frame:000000000001AB52                 db  30h ; 0
.eh_frame:000000000001AB53                 db    2
.eh_frame:000000000001AB54                 db  4Ah ; J
.eh_frame:000000000001AB55                 db  0Ah
.eh_frame:000000000001AB56                 db  0Eh
.eh_frame:000000000001AB57                 db  20h
.eh_frame:000000000001AB58                 db  41h ; A
.eh_frame:000000000001AB59                 db  0Eh
.eh_frame:000000000001AB5A                 db  18h
.eh_frame:000000000001AB5B                 db  41h ; A
.eh_frame:000000000001AB5C                 db  0Eh
.eh_frame:000000000001AB5D                 db  10h
.eh_frame:000000000001AB5E                 db  42h ; B
.eh_frame:000000000001AB5F                 db  0Eh
.eh_frame:000000000001AB60                 db    8
.eh_frame:000000000001AB61                 db  42h ; B
.eh_frame:000000000001AB62                 db  0Bh
.eh_frame:000000000001AB63                 db    0
.eh_frame:000000000001AB64                 db    0
.eh_frame:000000000001AB65                 db    0
.eh_frame:000000000001AB66                 db    0
.eh_frame:000000000001AB67                 db    0
.eh_frame:000000000001AB68                 db  24h ; $
.eh_frame:000000000001AB69                 db    0
.eh_frame:000000000001AB6A                 db    0
.eh_frame:000000000001AB6B                 db    0
.eh_frame:000000000001AB6C                 db  4Ch ; L
.eh_frame:000000000001AB6D                 db  12h
.eh_frame:000000000001AB6E                 db    0
.eh_frame:000000000001AB6F                 db    0
.eh_frame:000000000001AB70                 db  20h
.eh_frame:000000000001AB71                 db  21h ; !
.eh_frame:000000000001AB72                 db 0FFh
.eh_frame:000000000001AB73                 db 0FFh
.eh_frame:000000000001AB74                 db  27h ; '
.eh_frame:000000000001AB75                 db    0
.eh_frame:000000000001AB76                 db    0
.eh_frame:000000000001AB77                 db    0
.eh_frame:000000000001AB78                 db    0
.eh_frame:000000000001AB79                 db  41h ; A
.eh_frame:000000000001AB7A                 db  0Eh
.eh_frame:000000000001AB7B                 db  10h
.eh_frame:000000000001AB7C                 db  86h
.eh_frame:000000000001AB7D                 db    2
.eh_frame:000000000001AB7E                 db  41h ; A
.eh_frame:000000000001AB7F                 db  0Eh
.eh_frame:000000000001AB80                 db  18h
.eh_frame:000000000001AB81                 db  83h
.eh_frame:000000000001AB82                 db    3
.eh_frame:000000000001AB83                 db  4Ah ; J
.eh_frame:000000000001AB84                 db  0Eh
.eh_frame:000000000001AB85                 db  20h
.eh_frame:000000000001AB86                 db  52h ; R
.eh_frame:000000000001AB87                 db  0Eh
.eh_frame:000000000001AB88                 db  18h
.eh_frame:000000000001AB89                 db  44h ; D
.eh_frame:000000000001AB8A                 db  0Eh
.eh_frame:000000000001AB8B                 db  10h
.eh_frame:000000000001AB8C                 db  41h ; A
.eh_frame:000000000001AB8D                 db  0Eh
.eh_frame:000000000001AB8E                 db    8
.eh_frame:000000000001AB8F                 db    0
.eh_frame:000000000001AB90                 db  10h
.eh_frame:000000000001AB91                 db    0
.eh_frame:000000000001AB92                 db    0
.eh_frame:000000000001AB93                 db    0
.eh_frame:000000000001AB94                 db  74h ; t
.eh_frame:000000000001AB95                 db  12h
.eh_frame:000000000001AB96                 db    0
.eh_frame:000000000001AB97                 db    0
.eh_frame:000000000001AB98                 db  28h ; (
.eh_frame:000000000001AB99                 db  21h ; !
.eh_frame:000000000001AB9A                 db 0FFh
.eh_frame:000000000001AB9B                 db 0FFh
.eh_frame:000000000001AB9C                 db  0Dh
.eh_frame:000000000001AB9D                 db    0
.eh_frame:000000000001AB9E                 db    0
.eh_frame:000000000001AB9F                 db    0
.eh_frame:000000000001ABA0                 db    0
.eh_frame:000000000001ABA1                 db    0
.eh_frame:000000000001ABA2                 db    0
.eh_frame:000000000001ABA3                 db    0
.eh_frame:000000000001ABA4                 db  14h
.eh_frame:000000000001ABA5                 db    0
.eh_frame:000000000001ABA6                 db    0
.eh_frame:000000000001ABA7                 db    0
.eh_frame:000000000001ABA8                 db  88h
.eh_frame:000000000001ABA9                 db  12h
.eh_frame:000000000001ABAA                 db    0
.eh_frame:000000000001ABAB                 db    0
.eh_frame:000000000001ABAC                 db  24h ; $
.eh_frame:000000000001ABAD                 db  21h ; !
.eh_frame:000000000001ABAE                 db 0FFh
.eh_frame:000000000001ABAF                 db 0FFh
.eh_frame:000000000001ABB0                 db  2Eh ; .
.eh_frame:000000000001ABB1                 db    0
.eh_frame:000000000001ABB2                 db    0
.eh_frame:000000000001ABB3                 db    0
.eh_frame:000000000001ABB4                 db    0
.eh_frame:000000000001ABB5                 db  5Eh ; ^
.eh_frame:000000000001ABB6                 db  0Eh
.eh_frame:000000000001ABB7                 db  10h
.eh_frame:000000000001ABB8                 db  4Fh ; O
.eh_frame:000000000001ABB9                 db  0Eh
.eh_frame:000000000001ABBA                 db    8
.eh_frame:000000000001ABBB                 db    0
.eh_frame:000000000001ABBC                 db  14h
.eh_frame:000000000001ABBD                 db    0
.eh_frame:000000000001ABBE                 db    0
.eh_frame:000000000001ABBF                 db    0
.eh_frame:000000000001ABC0                 db 0A0h
.eh_frame:000000000001ABC1                 db  12h
.eh_frame:000000000001ABC2                 db    0
.eh_frame:000000000001ABC3                 db    0
.eh_frame:000000000001ABC4                 db  3Ch ; <
.eh_frame:000000000001ABC5                 db  21h ; !
.eh_frame:000000000001ABC6                 db 0FFh
.eh_frame:000000000001ABC7                 db 0FFh
.eh_frame:000000000001ABC8                 db  33h ; 3
.eh_frame:000000000001ABC9                 db    0
.eh_frame:000000000001ABCA                 db    0
.eh_frame:000000000001ABCB                 db    0
.eh_frame:000000000001ABCC                 db    0
.eh_frame:000000000001ABCD                 db  5Eh ; ^
.eh_frame:000000000001ABCE                 db  0Eh
.eh_frame:000000000001ABCF                 db  10h
.eh_frame:000000000001ABD0                 db  54h ; T
.eh_frame:000000000001ABD1                 db  0Eh
.eh_frame:000000000001ABD2                 db    8
.eh_frame:000000000001ABD3                 db    0
.eh_frame:000000000001ABD4                 db  18h
.eh_frame:000000000001ABD5                 db    0
.eh_frame:000000000001ABD6                 db    0
.eh_frame:000000000001ABD7                 db    0
.eh_frame:000000000001ABD8                 db 0B8h
.eh_frame:000000000001ABD9                 db  12h
.eh_frame:000000000001ABDA                 db    0
.eh_frame:000000000001ABDB                 db    0
.eh_frame:000000000001ABDC                 db  64h ; d
.eh_frame:000000000001ABDD                 db  21h ; !
.eh_frame:000000000001ABDE                 db 0FFh
.eh_frame:000000000001ABDF                 db 0FFh
.eh_frame:000000000001ABE0                 db  15h
.eh_frame:000000000001ABE1                 db    0
.eh_frame:000000000001ABE2                 db    0
.eh_frame:000000000001ABE3                 db    0
.eh_frame:000000000001ABE4                 db    0
.eh_frame:000000000001ABE5                 db  41h ; A
.eh_frame:000000000001ABE6                 db  0Eh
.eh_frame:000000000001ABE7                 db  10h
.eh_frame:000000000001ABE8                 db  83h
.eh_frame:000000000001ABE9                 db    2
.eh_frame:000000000001ABEA                 db  4Fh ; O
.eh_frame:000000000001ABEB                 db  0Eh
.eh_frame:000000000001ABEC                 db    8
.eh_frame:000000000001ABED                 db    0
.eh_frame:000000000001ABEE                 db    0
.eh_frame:000000000001ABEF                 db    0
.eh_frame:000000000001ABF0                 db  4Ch ; L
.eh_frame:000000000001ABF1                 db    0
.eh_frame:000000000001ABF2                 db    0
.eh_frame:000000000001ABF3                 db    0
.eh_frame:000000000001ABF4                 db 0D4h
.eh_frame:000000000001ABF5                 db  12h
.eh_frame:000000000001ABF6                 db    0
.eh_frame:000000000001ABF7                 db    0
.eh_frame:000000000001ABF8                 db  68h ; h
.eh_frame:000000000001ABF9                 db  21h ; !
.eh_frame:000000000001ABFA                 db 0FFh
.eh_frame:000000000001ABFB                 db 0FFh
.eh_frame:000000000001ABFC                 db  68h ; h
.eh_frame:000000000001ABFD                 db    1
.eh_frame:000000000001ABFE                 db    0
.eh_frame:000000000001ABFF                 db    0
.eh_frame:000000000001AC00                 db    0
.eh_frame:000000000001AC01                 db  42h ; B
.eh_frame:000000000001AC02                 db  0Eh
.eh_frame:000000000001AC03                 db  10h
.eh_frame:000000000001AC04                 db  8Fh
.eh_frame:000000000001AC05                 db    2
.eh_frame:000000000001AC06                 db  42h ; B
.eh_frame:000000000001AC07                 db  0Eh
.eh_frame:000000000001AC08                 db  18h
.eh_frame:000000000001AC09                 db  8Eh
.eh_frame:000000000001AC0A                 db    3
.eh_frame:000000000001AC0B                 db  45h ; E
.eh_frame:000000000001AC0C                 db  0Eh
.eh_frame:000000000001AC0D                 db  20h
.eh_frame:000000000001AC0E                 db  8Dh
.eh_frame:000000000001AC0F                 db    4
.eh_frame:000000000001AC10                 db  42h ; B
.eh_frame:000000000001AC11                 db  0Eh
.eh_frame:000000000001AC12                 db  28h ; (
.eh_frame:000000000001AC13                 db  8Ch
.eh_frame:000000000001AC14                 db    5
.eh_frame:000000000001AC15                 db  44h ; D
.eh_frame:000000000001AC16                 db  0Eh
.eh_frame:000000000001AC17                 db  30h ; 0
.eh_frame:000000000001AC18                 db  86h
.eh_frame:000000000001AC19                 db    6
.eh_frame:000000000001AC1A                 db  41h ; A
.eh_frame:000000000001AC1B                 db  0Eh
.eh_frame:000000000001AC1C                 db  38h ; 8
.eh_frame:000000000001AC1D                 db  83h
.eh_frame:000000000001AC1E                 db    7
.eh_frame:000000000001AC1F                 db  4Dh ; M
.eh_frame:000000000001AC20                 db  0Eh
.eh_frame:000000000001AC21                 db  60h ; `
.eh_frame:000000000001AC22                 db    2
.eh_frame:000000000001AC23                 db 0C5h
.eh_frame:000000000001AC24                 db  0Ah
.eh_frame:000000000001AC25                 db  0Eh
.eh_frame:000000000001AC26                 db  38h ; 8
.eh_frame:000000000001AC27                 db  41h ; A
.eh_frame:000000000001AC28                 db  0Eh
.eh_frame:000000000001AC29                 db  30h ; 0
.eh_frame:000000000001AC2A                 db  41h ; A
.eh_frame:000000000001AC2B                 db  0Eh
.eh_frame:000000000001AC2C                 db  28h ; (
.eh_frame:000000000001AC2D                 db  42h ; B
.eh_frame:000000000001AC2E                 db  0Eh
.eh_frame:000000000001AC2F                 db  20h
.eh_frame:000000000001AC30                 db  42h ; B
.eh_frame:000000000001AC31                 db  0Eh
.eh_frame:000000000001AC32                 db  18h
.eh_frame:000000000001AC33                 db  42h ; B
.eh_frame:000000000001AC34                 db  0Eh
.eh_frame:000000000001AC35                 db  10h
.eh_frame:000000000001AC36                 db  42h ; B
.eh_frame:000000000001AC37                 db  0Eh
.eh_frame:000000000001AC38                 db    8
.eh_frame:000000000001AC39                 db  44h ; D
.eh_frame:000000000001AC3A                 db  0Bh
.eh_frame:000000000001AC3B                 db    0
.eh_frame:000000000001AC3C                 db    0
.eh_frame:000000000001AC3D                 db    0
.eh_frame:000000000001AC3E                 db    0
.eh_frame:000000000001AC3F                 db    0
.eh_frame:000000000001AC40                 db  5Ch ; \
.eh_frame:000000000001AC41                 db    0
.eh_frame:000000000001AC42                 db    0
.eh_frame:000000000001AC43                 db    0
.eh_frame:000000000001AC44                 db  24h ; $
.eh_frame:000000000001AC45                 db  13h
.eh_frame:000000000001AC46                 db    0
.eh_frame:000000000001AC47                 db    0
.eh_frame:000000000001AC48                 db  88h
.eh_frame:000000000001AC49                 db  22h ; "
.eh_frame:000000000001AC4A                 db 0FFh
.eh_frame:000000000001AC4B                 db 0FFh
.eh_frame:000000000001AC4C                 db 0C9h
.eh_frame:000000000001AC4D                 db    3
.eh_frame:000000000001AC4E                 db    0
.eh_frame:000000000001AC4F                 db    0
.eh_frame:000000000001AC50                 db    0
.eh_frame:000000000001AC51                 db  42h ; B
.eh_frame:000000000001AC52                 db  0Eh
.eh_frame:000000000001AC53                 db  10h
.eh_frame:000000000001AC54                 db  8Fh
.eh_frame:000000000001AC55                 db    2
.eh_frame:000000000001AC56                 db  42h ; B
.eh_frame:000000000001AC57                 db  0Eh
.eh_frame:000000000001AC58                 db  18h
.eh_frame:000000000001AC59                 db  8Eh
.eh_frame:000000000001AC5A                 db    3
.eh_frame:000000000001AC5B                 db  45h ; E
.eh_frame:000000000001AC5C                 db  0Eh
.eh_frame:000000000001AC5D                 db  20h
.eh_frame:000000000001AC5E                 db  8Dh
.eh_frame:000000000001AC5F                 db    4
.eh_frame:000000000001AC60                 db  42h ; B
.eh_frame:000000000001AC61                 db  0Eh
.eh_frame:000000000001AC62                 db  28h ; (
.eh_frame:000000000001AC63                 db  8Ch
.eh_frame:000000000001AC64                 db    5
.eh_frame:000000000001AC65                 db  44h ; D
.eh_frame:000000000001AC66                 db  0Eh
.eh_frame:000000000001AC67                 db  30h ; 0
.eh_frame:000000000001AC68                 db  86h
.eh_frame:000000000001AC69                 db    6
.eh_frame:000000000001AC6A                 db  41h ; A
.eh_frame:000000000001AC6B                 db  0Eh
.eh_frame:000000000001AC6C                 db  38h ; 8
.eh_frame:000000000001AC6D                 db  83h
.eh_frame:000000000001AC6E                 db    7
.eh_frame:000000000001AC6F                 db  50h ; P
.eh_frame:000000000001AC70                 db  0Eh
.eh_frame:000000000001AC71                 db  80h
.eh_frame:000000000001AC72                 db    2
.eh_frame:000000000001AC73                 db    3
.eh_frame:000000000001AC74                 db 0CEh
.eh_frame:000000000001AC75                 db    1
.eh_frame:000000000001AC76                 db  0Ah
.eh_frame:000000000001AC77                 db  0Eh
.eh_frame:000000000001AC78                 db  38h ; 8
.eh_frame:000000000001AC79                 db  41h ; A
.eh_frame:000000000001AC7A                 db  0Eh
.eh_frame:000000000001AC7B                 db  30h ; 0
.eh_frame:000000000001AC7C                 db  41h ; A
.eh_frame:000000000001AC7D                 db  0Eh
.eh_frame:000000000001AC7E                 db  28h ; (
.eh_frame:000000000001AC7F                 db  42h ; B
.eh_frame:000000000001AC80                 db  0Eh
.eh_frame:000000000001AC81                 db  20h
.eh_frame:000000000001AC82                 db  42h ; B
.eh_frame:000000000001AC83                 db  0Eh
.eh_frame:000000000001AC84                 db  18h
.eh_frame:000000000001AC85                 db  42h ; B
.eh_frame:000000000001AC86                 db  0Eh
.eh_frame:000000000001AC87                 db  10h
.eh_frame:000000000001AC88                 db  42h ; B
.eh_frame:000000000001AC89                 db  0Eh
.eh_frame:000000000001AC8A                 db    8
.eh_frame:000000000001AC8B                 db  48h ; H
.eh_frame:000000000001AC8C                 db  0Bh
.eh_frame:000000000001AC8D                 db    2
.eh_frame:000000000001AC8E                 db 0ABh
.eh_frame:000000000001AC8F                 db  0Eh
.eh_frame:000000000001AC90                 db  88h
.eh_frame:000000000001AC91                 db    2
.eh_frame:000000000001AC92                 db  4Bh ; K
.eh_frame:000000000001AC93                 db  0Eh
.eh_frame:000000000001AC94                 db  90h
.eh_frame:000000000001AC95                 db    2
.eh_frame:000000000001AC96                 db  5Fh ; _
.eh_frame:000000000001AC97                 db  0Eh
.eh_frame:000000000001AC98                 db  88h
.eh_frame:000000000001AC99                 db    2
.eh_frame:000000000001AC9A                 db  41h ; A
.eh_frame:000000000001AC9B                 db  0Eh
.eh_frame:000000000001AC9C                 db  80h
.eh_frame:000000000001AC9D                 db    2
.eh_frame:000000000001AC9E                 db    0
.eh_frame:000000000001AC9F                 db    0
.eh_frame:000000000001ACA0                 db  44h ; D
.eh_frame:000000000001ACA1                 db    0
.eh_frame:000000000001ACA2                 db    0
.eh_frame:000000000001ACA3                 db    0
.eh_frame:000000000001ACA4                 db  84h
.eh_frame:000000000001ACA5                 db  13h
.eh_frame:000000000001ACA6                 db    0
.eh_frame:000000000001ACA7                 db    0
.eh_frame:000000000001ACA8                 db 0F8h
.eh_frame:000000000001ACA9                 db  25h ; %
.eh_frame:000000000001ACAA                 db 0FFh
.eh_frame:000000000001ACAB                 db 0FFh
.eh_frame:000000000001ACAC                 db 0A9h
.eh_frame:000000000001ACAD                 db    3
.eh_frame:000000000001ACAE                 db    0
.eh_frame:000000000001ACAF                 db    0
.eh_frame:000000000001ACB0                 db    0
.eh_frame:000000000001ACB1                 db  41h ; A
.eh_frame:000000000001ACB2                 db  0Eh
.eh_frame:000000000001ACB3                 db  10h
.eh_frame:000000000001ACB4                 db  86h
.eh_frame:000000000001ACB5                 db    2
.eh_frame:000000000001ACB6                 db  41h ; A
.eh_frame:000000000001ACB7                 db  0Eh
.eh_frame:000000000001ACB8                 db  18h
.eh_frame:000000000001ACB9                 db  83h
.eh_frame:000000000001ACBA                 db    3
.eh_frame:000000000001ACBB                 db  47h ; G
.eh_frame:000000000001ACBC                 db  0Eh
.eh_frame:000000000001ACBD                 db  20h
.eh_frame:000000000001ACBE                 db    2
.eh_frame:000000000001ACBF                 db 0B8h
.eh_frame:000000000001ACC0                 db  0Ah
.eh_frame:000000000001ACC1                 db  0Eh
.eh_frame:000000000001ACC2                 db  18h
.eh_frame:000000000001ACC3                 db  41h ; A
.eh_frame:000000000001ACC4                 db  0Eh
.eh_frame:000000000001ACC5                 db  10h
.eh_frame:000000000001ACC6                 db  41h ; A
.eh_frame:000000000001ACC7                 db  0Eh
.eh_frame:000000000001ACC8                 db    8
.eh_frame:000000000001ACC9                 db  45h ; E
.eh_frame:000000000001ACCA                 db  0Bh
.eh_frame:000000000001ACCB                 db  6Bh ; k
.eh_frame:000000000001ACCC                 db  0Ah
.eh_frame:000000000001ACCD                 db  0Eh
.eh_frame:000000000001ACCE                 db  18h
.eh_frame:000000000001ACCF                 db  43h ; C
.eh_frame:000000000001ACD0                 db  0Eh
.eh_frame:000000000001ACD1                 db  10h
.eh_frame:000000000001ACD2                 db  41h ; A
.eh_frame:000000000001ACD3                 db  0Eh
.eh_frame:000000000001ACD4                 db    8
.eh_frame:000000000001ACD5                 db  49h ; I
.eh_frame:000000000001ACD6                 db  0Bh
.eh_frame:000000000001ACD7                 db    3
.eh_frame:000000000001ACD8                 db  6Ch ; l
.eh_frame:000000000001ACD9                 db    2
.eh_frame:000000000001ACDA                 db  0Ah
.eh_frame:000000000001ACDB                 db  0Eh
.eh_frame:000000000001ACDC                 db  18h
.eh_frame:000000000001ACDD                 db  41h ; A
.eh_frame:000000000001ACDE                 db  0Eh
.eh_frame:000000000001ACDF                 db  10h
.eh_frame:000000000001ACE0                 db  41h ; A
.eh_frame:000000000001ACE1                 db  0Eh
.eh_frame:000000000001ACE2                 db    8
.eh_frame:000000000001ACE3                 db  41h ; A
.eh_frame:000000000001ACE4                 db  0Bh
.eh_frame:000000000001ACE5                 db    0
.eh_frame:000000000001ACE6                 db    0
.eh_frame:000000000001ACE7                 db    0
.eh_frame:000000000001ACE8                 db  20h
.eh_frame:000000000001ACE9                 db    0
.eh_frame:000000000001ACEA                 db    0
.eh_frame:000000000001ACEB                 db    0
.eh_frame:000000000001ACEC                 db 0CCh
.eh_frame:000000000001ACED                 db  13h
.eh_frame:000000000001ACEE                 db    0
.eh_frame:000000000001ACEF                 db    0
.eh_frame:000000000001ACF0                 db  60h ; `
.eh_frame:000000000001ACF1                 db  29h ; )
.eh_frame:000000000001ACF2                 db 0FFh
.eh_frame:000000000001ACF3                 db 0FFh
.eh_frame:000000000001ACF4                 db  89h
.eh_frame:000000000001ACF5                 db    0
.eh_frame:000000000001ACF6                 db    0
.eh_frame:000000000001ACF7                 db    0
.eh_frame:000000000001ACF8                 db    0
.eh_frame:000000000001ACF9                 db  41h ; A
.eh_frame:000000000001ACFA                 db  0Eh
.eh_frame:000000000001ACFB                 db  10h
.eh_frame:000000000001ACFC                 db  83h
.eh_frame:000000000001ACFD                 db    2
.eh_frame:000000000001ACFE                 db  4Fh ; O
.eh_frame:000000000001ACFF                 db  0Eh
.eh_frame:000000000001AD00                 db 0B0h
.eh_frame:000000000001AD01                 db    1
.eh_frame:000000000001AD02                 db    2
.eh_frame:000000000001AD03                 db  64h ; d
.eh_frame:000000000001AD04                 db  0Ah
.eh_frame:000000000001AD05                 db  0Eh
.eh_frame:000000000001AD06                 db  10h
.eh_frame:000000000001AD07                 db  41h ; A
.eh_frame:000000000001AD08                 db  0Eh
.eh_frame:000000000001AD09                 db    8
.eh_frame:000000000001AD0A                 db  4Bh ; K
.eh_frame:000000000001AD0B                 db  0Bh
.eh_frame:000000000001AD0C                 db  30h ; 0
.eh_frame:000000000001AD0D                 db    0
.eh_frame:000000000001AD0E                 db    0
.eh_frame:000000000001AD0F                 db    0
.eh_frame:000000000001AD10                 db 0F0h
.eh_frame:000000000001AD11                 db  13h
.eh_frame:000000000001AD12                 db    0
.eh_frame:000000000001AD13                 db    0
.eh_frame:000000000001AD14                 db 0CCh
.eh_frame:000000000001AD15                 db  29h ; )
.eh_frame:000000000001AD16                 db 0FFh
.eh_frame:000000000001AD17                 db 0FFh
.eh_frame:000000000001AD18                 db  6Dh ; m
.eh_frame:000000000001AD19                 db    1
.eh_frame:000000000001AD1A                 db    0
.eh_frame:000000000001AD1B                 db    0
.eh_frame:000000000001AD1C                 db    0
.eh_frame:000000000001AD1D                 db  5Bh ; [
.eh_frame:000000000001AD1E                 db  0Eh
.eh_frame:000000000001AD1F                 db  10h
.eh_frame:000000000001AD20                 db  8Ch
.eh_frame:000000000001AD21                 db    2
.eh_frame:000000000001AD22                 db  41h ; A
.eh_frame:000000000001AD23                 db  0Eh
.eh_frame:000000000001AD24                 db  18h
.eh_frame:000000000001AD25                 db  86h
.eh_frame:000000000001AD26                 db    3
.eh_frame:000000000001AD27                 db  41h ; A
.eh_frame:000000000001AD28                 db  0Eh
.eh_frame:000000000001AD29                 db  20h
.eh_frame:000000000001AD2A                 db  83h
.eh_frame:000000000001AD2B                 db    4
.eh_frame:000000000001AD2C                 db    3
.eh_frame:000000000001AD2D                 db    8
.eh_frame:000000000001AD2E                 db    1
.eh_frame:000000000001AD2F                 db  0Ah
.eh_frame:000000000001AD30                 db  0Eh
.eh_frame:000000000001AD31                 db  18h
.eh_frame:000000000001AD32                 db  41h ; A
.eh_frame:000000000001AD33                 db  0Eh
.eh_frame:000000000001AD34                 db  10h
.eh_frame:000000000001AD35                 db  42h ; B
.eh_frame:000000000001AD36                 db  0Eh
.eh_frame:000000000001AD37                 db    8
.eh_frame:000000000001AD38                 db  48h ; H
.eh_frame:000000000001AD39                 db  0Bh
.eh_frame:000000000001AD3A                 db  70h ; p
.eh_frame:000000000001AD3B                 db  0Eh
.eh_frame:000000000001AD3C                 db    8
.eh_frame:000000000001AD3D                 db 0C3h
.eh_frame:000000000001AD3E                 db 0C6h
.eh_frame:000000000001AD3F                 db 0CCh
.eh_frame:000000000001AD40                 db  5Ch ; \
.eh_frame:000000000001AD41                 db    0
.eh_frame:000000000001AD42                 db    0
.eh_frame:000000000001AD43                 db    0
.eh_frame:000000000001AD44                 db  24h ; $
.eh_frame:000000000001AD45                 db  14h
.eh_frame:000000000001AD46                 db    0
.eh_frame:000000000001AD47                 db    0
.eh_frame:000000000001AD48                 db    8
.eh_frame:000000000001AD49                 db  2Bh ; +
.eh_frame:000000000001AD4A                 db 0FFh
.eh_frame:000000000001AD4B                 db 0FFh
.eh_frame:000000000001AD4C                 db  80h
.eh_frame:000000000001AD4D                 db    0
.eh_frame:000000000001AD4E                 db    0
.eh_frame:000000000001AD4F                 db    0
.eh_frame:000000000001AD50                 db    0
.eh_frame:000000000001AD51                 db  42h ; B
.eh_frame:000000000001AD52                 db  0Eh
.eh_frame:000000000001AD53                 db  10h
.eh_frame:000000000001AD54                 db  8Dh
.eh_frame:000000000001AD55                 db    2
.eh_frame:000000000001AD56                 db  42h ; B
.eh_frame:000000000001AD57                 db  0Eh
.eh_frame:000000000001AD58                 db  18h
.eh_frame:000000000001AD59                 db  8Ch
.eh_frame:000000000001AD5A                 db    3
.eh_frame:000000000001AD5B                 db  47h ; G
.eh_frame:000000000001AD5C                 db  0Eh
.eh_frame:000000000001AD5D                 db  20h
.eh_frame:000000000001AD5E                 db  86h
.eh_frame:000000000001AD5F                 db    4
.eh_frame:000000000001AD60                 db  41h ; A
.eh_frame:000000000001AD61                 db  0Eh
.eh_frame:000000000001AD62                 db  28h ; (
.eh_frame:000000000001AD63                 db  83h
.eh_frame:000000000001AD64                 db    5
.eh_frame:000000000001AD65                 db  49h ; I
.eh_frame:000000000001AD66                 db  0Eh
.eh_frame:000000000001AD67                 db  30h ; 0
.eh_frame:000000000001AD68                 db  62h ; b
.eh_frame:000000000001AD69                 db  0Ah
.eh_frame:000000000001AD6A                 db  0Eh
.eh_frame:000000000001AD6B                 db  28h ; (
.eh_frame:000000000001AD6C                 db  44h ; D
.eh_frame:000000000001AD6D                 db  0Eh
.eh_frame:000000000001AD6E                 db  20h
.eh_frame:000000000001AD6F                 db  41h ; A
.eh_frame:000000000001AD70                 db  0Eh
.eh_frame:000000000001AD71                 db  18h
.eh_frame:000000000001AD72                 db  42h ; B
.eh_frame:000000000001AD73                 db  0Eh
.eh_frame:000000000001AD74                 db  10h
.eh_frame:000000000001AD75                 db  42h ; B
.eh_frame:000000000001AD76                 db  0Eh
.eh_frame:000000000001AD77                 db    8
.eh_frame:000000000001AD78                 db  48h ; H
.eh_frame:000000000001AD79                 db  0Bh
.eh_frame:000000000001AD7A                 db  5Dh ; ]
.eh_frame:000000000001AD7B                 db  0Ah
.eh_frame:000000000001AD7C                 db  0Eh
.eh_frame:000000000001AD7D                 db  28h ; (
.eh_frame:000000000001AD7E                 db  41h ; A
.eh_frame:000000000001AD7F                 db  0Eh
.eh_frame:000000000001AD80                 db  20h
.eh_frame:000000000001AD81                 db  41h ; A
.eh_frame:000000000001AD82                 db  0Eh
.eh_frame:000000000001AD83                 db  18h
.eh_frame:000000000001AD84                 db  42h ; B
.eh_frame:000000000001AD85                 db  0Eh
.eh_frame:000000000001AD86                 db  10h
.eh_frame:000000000001AD87                 db  42h ; B
.eh_frame:000000000001AD88                 db  0Eh
.eh_frame:000000000001AD89                 db    8
.eh_frame:000000000001AD8A                 db  45h ; E
.eh_frame:000000000001AD8B                 db  0Bh
.eh_frame:000000000001AD8C                 db  44h ; D
.eh_frame:000000000001AD8D                 db  0Eh
.eh_frame:000000000001AD8E                 db  28h ; (
.eh_frame:000000000001AD8F                 db  43h ; C
.eh_frame:000000000001AD90                 db  0Eh
.eh_frame:000000000001AD91                 db  20h
.eh_frame:000000000001AD92                 db  44h ; D
.eh_frame:000000000001AD93                 db  0Eh
.eh_frame:000000000001AD94                 db  18h
.eh_frame:000000000001AD95                 db  42h ; B
.eh_frame:000000000001AD96                 db  0Eh
.eh_frame:000000000001AD97                 db  10h
.eh_frame:000000000001AD98                 db  42h ; B
.eh_frame:000000000001AD99                 db  0Eh
.eh_frame:000000000001AD9A                 db    8
.eh_frame:000000000001AD9B                 db    0
.eh_frame:000000000001AD9C                 db    0
.eh_frame:000000000001AD9D                 db    0
.eh_frame:000000000001AD9E                 db    0
.eh_frame:000000000001AD9F                 db    0
.eh_frame:000000000001ADA0                 db  1Ch
.eh_frame:000000000001ADA1                 db    0
.eh_frame:000000000001ADA2                 db    0
.eh_frame:000000000001ADA3                 db    0
.eh_frame:000000000001ADA4                 db  84h
.eh_frame:000000000001ADA5                 db  14h
.eh_frame:000000000001ADA6                 db    0
.eh_frame:000000000001ADA7                 db    0
.eh_frame:000000000001ADA8                 db  28h ; (
.eh_frame:000000000001ADA9                 db  2Bh ; +
.eh_frame:000000000001ADAA                 db 0FFh
.eh_frame:000000000001ADAB                 db 0FFh
.eh_frame:000000000001ADAC                 db  9Fh
.eh_frame:000000000001ADAD                 db    0
.eh_frame:000000000001ADAE                 db    0
.eh_frame:000000000001ADAF                 db    0
.eh_frame:000000000001ADB0                 db    0
.eh_frame:000000000001ADB1                 db  44h ; D
.eh_frame:000000000001ADB2                 db  0Eh
.eh_frame:000000000001ADB3                 db  10h
.eh_frame:000000000001ADB4                 db  83h
.eh_frame:000000000001ADB5                 db    2
.eh_frame:000000000001ADB6                 db    2
.eh_frame:000000000001ADB7                 db  78h ; x
.eh_frame:000000000001ADB8                 db  0Ah
.eh_frame:000000000001ADB9                 db  0Eh
.eh_frame:000000000001ADBA                 db    8
.eh_frame:000000000001ADBB                 db  41h ; A
.eh_frame:000000000001ADBC                 db  0Bh
.eh_frame:000000000001ADBD                 db    0
.eh_frame:000000000001ADBE                 db    0
.eh_frame:000000000001ADBF                 db    0
.eh_frame:000000000001ADC0                 db  34h ; 4
.eh_frame:000000000001ADC1                 db    0
.eh_frame:000000000001ADC2                 db    0
.eh_frame:000000000001ADC3                 db    0
.eh_frame:000000000001ADC4                 db 0A4h
.eh_frame:000000000001ADC5                 db  14h
.eh_frame:000000000001ADC6                 db    0
.eh_frame:000000000001ADC7                 db    0
.eh_frame:000000000001ADC8                 db 0A8h
.eh_frame:000000000001ADC9                 db  2Bh ; +
.eh_frame:000000000001ADCA                 db 0FFh
.eh_frame:000000000001ADCB                 db 0FFh
.eh_frame:000000000001ADCC                 db  74h ; t
.eh_frame:000000000001ADCD                 db    0
.eh_frame:000000000001ADCE                 db    0
.eh_frame:000000000001ADCF                 db    0
.eh_frame:000000000001ADD0                 db    0
.eh_frame:000000000001ADD1                 db  42h ; B
.eh_frame:000000000001ADD2                 db  0Eh
.eh_frame:000000000001ADD3                 db  10h
.eh_frame:000000000001ADD4                 db  8Ch
.eh_frame:000000000001ADD5                 db    2
.eh_frame:000000000001ADD6                 db  41h ; A
.eh_frame:000000000001ADD7                 db  0Eh
.eh_frame:000000000001ADD8                 db  18h
.eh_frame:000000000001ADD9                 db  86h
.eh_frame:000000000001ADDA                 db    3
.eh_frame:000000000001ADDB                 db  44h ; D
.eh_frame:000000000001ADDC                 db  0Eh
.eh_frame:000000000001ADDD                 db  20h
.eh_frame:000000000001ADDE                 db  83h
.eh_frame:000000000001ADDF                 db    4
.eh_frame:000000000001ADE0                 db  4Ah ; J
.eh_frame:000000000001ADE1                 db  0Eh
.eh_frame:000000000001ADE2                 db  30h ; 0
.eh_frame:000000000001ADE3                 db    2
.eh_frame:000000000001ADE4                 db  4Fh ; O
.eh_frame:000000000001ADE5                 db  0Ah
.eh_frame:000000000001ADE6                 db  0Eh
.eh_frame:000000000001ADE7                 db  20h
.eh_frame:000000000001ADE8                 db  41h ; A
.eh_frame:000000000001ADE9                 db  0Eh
.eh_frame:000000000001ADEA                 db  18h
.eh_frame:000000000001ADEB                 db  41h ; A
.eh_frame:000000000001ADEC                 db  0Eh
.eh_frame:000000000001ADED                 db  10h
.eh_frame:000000000001ADEE                 db  42h ; B
.eh_frame:000000000001ADEF                 db  0Eh
.eh_frame:000000000001ADF0                 db    8
.eh_frame:000000000001ADF1                 db  44h ; D
.eh_frame:000000000001ADF2                 db  0Bh
.eh_frame:000000000001ADF3                 db    0
.eh_frame:000000000001ADF4                 db    0
.eh_frame:000000000001ADF5                 db    0
.eh_frame:000000000001ADF6                 db    0
.eh_frame:000000000001ADF7                 db    0
.eh_frame:000000000001ADF8                 db  2Ch ; ,
.eh_frame:000000000001ADF9                 db    0
.eh_frame:000000000001ADFA                 db    0
.eh_frame:000000000001ADFB                 db    0
.eh_frame:000000000001ADFC                 db 0DCh
.eh_frame:000000000001ADFD                 db  14h
.eh_frame:000000000001ADFE                 db    0
.eh_frame:000000000001ADFF                 db    0
.eh_frame:000000000001AE00                 db 0F0h
.eh_frame:000000000001AE01                 db  2Bh ; +
.eh_frame:000000000001AE02                 db 0FFh
.eh_frame:000000000001AE03                 db 0FFh
.eh_frame:000000000001AE04                 db  54h ; T
.eh_frame:000000000001AE05                 db    0
.eh_frame:000000000001AE06                 db    0
.eh_frame:000000000001AE07                 db    0
.eh_frame:000000000001AE08                 db    0
.eh_frame:000000000001AE09                 db  41h ; A
.eh_frame:000000000001AE0A                 db  0Eh
.eh_frame:000000000001AE0B                 db  10h
.eh_frame:000000000001AE0C                 db  86h
.eh_frame:000000000001AE0D                 db    2
.eh_frame:000000000001AE0E                 db  41h ; A
.eh_frame:000000000001AE0F                 db  0Eh
.eh_frame:000000000001AE10                 db  18h
.eh_frame:000000000001AE11                 db  83h
.eh_frame:000000000001AE12                 db    3
.eh_frame:000000000001AE13                 db  44h ; D
.eh_frame:000000000001AE14                 db  0Eh
.eh_frame:000000000001AE15                 db  30h ; 0
.eh_frame:000000000001AE16                 db    2
.eh_frame:000000000001AE17                 db  44h ; D
.eh_frame:000000000001AE18                 db  0Ah
.eh_frame:000000000001AE19                 db  0Eh
.eh_frame:000000000001AE1A                 db  18h
.eh_frame:000000000001AE1B                 db  43h ; C
.eh_frame:000000000001AE1C                 db  0Eh
.eh_frame:000000000001AE1D                 db  10h
.eh_frame:000000000001AE1E                 db  41h ; A
.eh_frame:000000000001AE1F                 db  0Eh
.eh_frame:000000000001AE20                 db    8
.eh_frame:000000000001AE21                 db  41h ; A
.eh_frame:000000000001AE22                 db  0Bh
.eh_frame:000000000001AE23                 db    0
.eh_frame:000000000001AE24                 db    0
.eh_frame:000000000001AE25                 db    0
.eh_frame:000000000001AE26                 db    0
.eh_frame:000000000001AE27                 db    0
.eh_frame:000000000001AE28                 db  40h ; @
.eh_frame:000000000001AE29                 db    0
.eh_frame:000000000001AE2A                 db    0
.eh_frame:000000000001AE2B                 db    0
.eh_frame:000000000001AE2C                 db  0Ch
.eh_frame:000000000001AE2D                 db  15h
.eh_frame:000000000001AE2E                 db    0
.eh_frame:000000000001AE2F                 db    0
.eh_frame:000000000001AE30                 db  20h
.eh_frame:000000000001AE31                 db  2Ch ; ,
.eh_frame:000000000001AE32                 db 0FFh
.eh_frame:000000000001AE33                 db 0FFh
.eh_frame:000000000001AE34                 db 0E7h
.eh_frame:000000000001AE35                 db    0
.eh_frame:000000000001AE36                 db    0
.eh_frame:000000000001AE37                 db    0
.eh_frame:000000000001AE38                 db    0
.eh_frame:000000000001AE39                 db  41h ; A
.eh_frame:000000000001AE3A                 db  0Eh
.eh_frame:000000000001AE3B                 db  10h
.eh_frame:000000000001AE3C                 db  86h
.eh_frame:000000000001AE3D                 db    2
.eh_frame:000000000001AE3E                 db  41h ; A
.eh_frame:000000000001AE3F                 db  0Eh
.eh_frame:000000000001AE40                 db  18h
.eh_frame:000000000001AE41                 db  83h
.eh_frame:000000000001AE42                 db    3
.eh_frame:000000000001AE43                 db  49h ; I
.eh_frame:000000000001AE44                 db  0Eh
.eh_frame:000000000001AE45                 db  20h
.eh_frame:000000000001AE46                 db  6Eh ; n
.eh_frame:000000000001AE47                 db  0Ah
.eh_frame:000000000001AE48                 db  0Eh
.eh_frame:000000000001AE49                 db  18h
.eh_frame:000000000001AE4A                 db  41h ; A
.eh_frame:000000000001AE4B                 db  0Eh
.eh_frame:000000000001AE4C                 db  10h
.eh_frame:000000000001AE4D                 db  41h ; A
.eh_frame:000000000001AE4E                 db  0Eh
.eh_frame:000000000001AE4F                 db    8
.eh_frame:000000000001AE50                 db  45h ; E
.eh_frame:000000000001AE51                 db  0Bh
.eh_frame:000000000001AE52                 db    2
.eh_frame:000000000001AE53                 db  4Ah ; J
.eh_frame:000000000001AE54                 db  0Ah
.eh_frame:000000000001AE55                 db  0Eh
.eh_frame:000000000001AE56                 db  18h
.eh_frame:000000000001AE57                 db  41h ; A
.eh_frame:000000000001AE58                 db  0Eh
.eh_frame:000000000001AE59                 db  10h
.eh_frame:000000000001AE5A                 db  41h ; A
.eh_frame:000000000001AE5B                 db  0Eh
.eh_frame:000000000001AE5C                 db    8
.eh_frame:000000000001AE5D                 db  44h ; D
.eh_frame:000000000001AE5E                 db  0Bh
.eh_frame:000000000001AE5F                 db    2
.eh_frame:000000000001AE60                 db  54h ; T
.eh_frame:000000000001AE61                 db  0Eh
.eh_frame:000000000001AE62                 db  18h
.eh_frame:000000000001AE63                 db  41h ; A
.eh_frame:000000000001AE64                 db  0Eh
.eh_frame:000000000001AE65                 db  10h
.eh_frame:000000000001AE66                 db  41h ; A
.eh_frame:000000000001AE67                 db  0Eh
.eh_frame:000000000001AE68                 db    8
.eh_frame:000000000001AE69                 db    0
.eh_frame:000000000001AE6A                 db    0
.eh_frame:000000000001AE6B                 db    0
.eh_frame:000000000001AE6C                 db  74h ; t
.eh_frame:000000000001AE6D                 db    0
.eh_frame:000000000001AE6E                 db    0
.eh_frame:000000000001AE6F                 db    0
.eh_frame:000000000001AE70                 db  50h ; P
.eh_frame:000000000001AE71                 db  15h
.eh_frame:000000000001AE72                 db    0
.eh_frame:000000000001AE73                 db    0
.eh_frame:000000000001AE74                 db 0CCh
.eh_frame:000000000001AE75                 db  2Ch ; ,
.eh_frame:000000000001AE76                 db 0FFh
.eh_frame:000000000001AE77                 db 0FFh
.eh_frame:000000000001AE78                 db  34h ; 4
.eh_frame:000000000001AE79                 db  12h
.eh_frame:000000000001AE7A                 db    0
.eh_frame:000000000001AE7B                 db    0
.eh_frame:000000000001AE7C                 db    0
.eh_frame:000000000001AE7D                 db  42h ; B
.eh_frame:000000000001AE7E                 db  0Eh
.eh_frame:000000000001AE7F                 db  10h
.eh_frame:000000000001AE80                 db  8Fh
.eh_frame:000000000001AE81                 db    2
.eh_frame:000000000001AE82                 db  42h ; B
.eh_frame:000000000001AE83                 db  0Eh
.eh_frame:000000000001AE84                 db  18h
.eh_frame:000000000001AE85                 db  8Eh
.eh_frame:000000000001AE86                 db    3
.eh_frame:000000000001AE87                 db  45h ; E
.eh_frame:000000000001AE88                 db  0Eh
.eh_frame:000000000001AE89                 db  20h
.eh_frame:000000000001AE8A                 db  8Dh
.eh_frame:000000000001AE8B                 db    4
.eh_frame:000000000001AE8C                 db  42h ; B
.eh_frame:000000000001AE8D                 db  0Eh
.eh_frame:000000000001AE8E                 db  28h ; (
.eh_frame:000000000001AE8F                 db  8Ch
.eh_frame:000000000001AE90                 db    5
.eh_frame:000000000001AE91                 db  44h ; D
.eh_frame:000000000001AE92                 db  0Eh
.eh_frame:000000000001AE93                 db  30h ; 0
.eh_frame:000000000001AE94                 db  86h
.eh_frame:000000000001AE95                 db    6
.eh_frame:000000000001AE96                 db  41h ; A
.eh_frame:000000000001AE97                 db  0Eh
.eh_frame:000000000001AE98                 db  38h ; 8
.eh_frame:000000000001AE99                 db  83h
.eh_frame:000000000001AE9A                 db    7
.eh_frame:000000000001AE9B                 db  53h ; S
.eh_frame:000000000001AE9C                 db  0Eh
.eh_frame:000000000001AE9D                 db 0F0h
.eh_frame:000000000001AE9E                 db    1
.eh_frame:000000000001AE9F                 db    3
.eh_frame:000000000001AEA0                 db  81h
.eh_frame:000000000001AEA1                 db  0Bh
.eh_frame:000000000001AEA2                 db  0Eh
.eh_frame:000000000001AEA3                 db 0F8h
.eh_frame:000000000001AEA4                 db    1
.eh_frame:000000000001AEA5                 db  4Ah ; J
.eh_frame:000000000001AEA6                 db  0Eh
.eh_frame:000000000001AEA7                 db  80h
.eh_frame:000000000001AEA8                 db    2
.eh_frame:000000000001AEA9                 db  44h ; D
.eh_frame:000000000001AEAA                 db  0Eh
.eh_frame:000000000001AEAB                 db  88h
.eh_frame:000000000001AEAC                 db    2
.eh_frame:000000000001AEAD                 db  45h ; E
.eh_frame:000000000001AEAE                 db  0Eh
.eh_frame:000000000001AEAF                 db  90h
.eh_frame:000000000001AEB0                 db    2
.eh_frame:000000000001AEB1                 db  5Fh ; _
.eh_frame:000000000001AEB2                 db  0Eh
.eh_frame:000000000001AEB3                 db 0F0h
.eh_frame:000000000001AEB4                 db    1
.eh_frame:000000000001AEB5                 db  64h ; d
.eh_frame:000000000001AEB6                 db  0Ah
.eh_frame:000000000001AEB7                 db  0Eh
.eh_frame:000000000001AEB8                 db  38h ; 8
.eh_frame:000000000001AEB9                 db  41h ; A
.eh_frame:000000000001AEBA                 db  0Eh
.eh_frame:000000000001AEBB                 db  30h ; 0
.eh_frame:000000000001AEBC                 db  41h ; A
.eh_frame:000000000001AEBD                 db  0Eh
.eh_frame:000000000001AEBE                 db  28h ; (
.eh_frame:000000000001AEBF                 db  42h ; B
.eh_frame:000000000001AEC0                 db  0Eh
.eh_frame:000000000001AEC1                 db  20h
.eh_frame:000000000001AEC2                 db  42h ; B
.eh_frame:000000000001AEC3                 db  0Eh
.eh_frame:000000000001AEC4                 db  18h
.eh_frame:000000000001AEC5                 db  42h ; B
.eh_frame:000000000001AEC6                 db  0Eh
.eh_frame:000000000001AEC7                 db  10h
.eh_frame:000000000001AEC8                 db  42h ; B
.eh_frame:000000000001AEC9                 db  0Eh
.eh_frame:000000000001AECA                 db    8
.eh_frame:000000000001AECB                 db  44h ; D
.eh_frame:000000000001AECC                 db  0Bh
.eh_frame:000000000001AECD                 db    3
.eh_frame:000000000001AECE                 db  99h
.eh_frame:000000000001AECF                 db    5
.eh_frame:000000000001AED0                 db  0Eh
.eh_frame:000000000001AED1                 db 0F8h
.eh_frame:000000000001AED2                 db    1
.eh_frame:000000000001AED3                 db  4Dh ; M
.eh_frame:000000000001AED4                 db  0Eh
.eh_frame:000000000001AED5                 db  80h
.eh_frame:000000000001AED6                 db    2
.eh_frame:000000000001AED7                 db  44h ; D
.eh_frame:000000000001AED8                 db  0Eh
.eh_frame:000000000001AED9                 db  88h
.eh_frame:000000000001AEDA                 db    2
.eh_frame:000000000001AEDB                 db  47h ; G
.eh_frame:000000000001AEDC                 db  0Eh
.eh_frame:000000000001AEDD                 db  90h
.eh_frame:000000000001AEDE                 db    2
.eh_frame:000000000001AEDF                 db  5Bh ; [
.eh_frame:000000000001AEE0                 db  0Eh
.eh_frame:000000000001AEE1                 db 0F0h
.eh_frame:000000000001AEE2                 db    1
.eh_frame:000000000001AEE3                 db    0
.eh_frame:000000000001AEE4                 db  68h ; h
.eh_frame:000000000001AEE5                 db    0
.eh_frame:000000000001AEE6                 db    0
.eh_frame:000000000001AEE7                 db    0
.eh_frame:000000000001AEE8                 db 0C8h
.eh_frame:000000000001AEE9                 db  15h
.eh_frame:000000000001AEEA                 db    0
.eh_frame:000000000001AEEB                 db    0
.eh_frame:000000000001AEEC                 db  94h
.eh_frame:000000000001AEED                 db  3Eh ; >
.eh_frame:000000000001AEEE                 db 0FFh
.eh_frame:000000000001AEEF                 db 0FFh
.eh_frame:000000000001AEF0                 db 0ABh
.eh_frame:000000000001AEF1                 db    1
.eh_frame:000000000001AEF2                 db    0
.eh_frame:000000000001AEF3                 db    0
.eh_frame:000000000001AEF4                 db    0
.eh_frame:000000000001AEF5                 db  42h ; B
.eh_frame:000000000001AEF6                 db  0Eh
.eh_frame:000000000001AEF7                 db  10h
.eh_frame:000000000001AEF8                 db  8Fh
.eh_frame:000000000001AEF9                 db    2
.eh_frame:000000000001AEFA                 db  42h ; B
.eh_frame:000000000001AEFB                 db  0Eh
.eh_frame:000000000001AEFC                 db  18h
.eh_frame:000000000001AEFD                 db  8Eh
.eh_frame:000000000001AEFE                 db    3
.eh_frame:000000000001AEFF                 db  45h ; E
.eh_frame:000000000001AF00                 db  0Eh
.eh_frame:000000000001AF01                 db  20h
.eh_frame:000000000001AF02                 db  8Dh
.eh_frame:000000000001AF03                 db    4
.eh_frame:000000000001AF04                 db  42h ; B
.eh_frame:000000000001AF05                 db  0Eh
.eh_frame:000000000001AF06                 db  28h ; (
.eh_frame:000000000001AF07                 db  8Ch
.eh_frame:000000000001AF08                 db    5
.eh_frame:000000000001AF09                 db  44h ; D
.eh_frame:000000000001AF0A                 db  0Eh
.eh_frame:000000000001AF0B                 db  30h ; 0
.eh_frame:000000000001AF0C                 db  86h
.eh_frame:000000000001AF0D                 db    6
.eh_frame:000000000001AF0E                 db  41h ; A
.eh_frame:000000000001AF0F                 db  0Eh
.eh_frame:000000000001AF10                 db  38h ; 8
.eh_frame:000000000001AF11                 db  83h
.eh_frame:000000000001AF12                 db    7
.eh_frame:000000000001AF13                 db  47h ; G
.eh_frame:000000000001AF14                 db  0Eh
.eh_frame:000000000001AF15                 db  60h ; `
.eh_frame:000000000001AF16                 db    2
.eh_frame:000000000001AF17                 db  99h
.eh_frame:000000000001AF18                 db  0Eh
.eh_frame:000000000001AF19                 db  68h ; h
.eh_frame:000000000001AF1A                 db  5Fh ; _
.eh_frame:000000000001AF1B                 db  0Eh
.eh_frame:000000000001AF1C                 db  70h ; p
.eh_frame:000000000001AF1D                 db  46h ; F
.eh_frame:000000000001AF1E                 db  0Eh
.eh_frame:000000000001AF1F                 db  78h ; x
.eh_frame:000000000001AF20                 db  42h ; B
.eh_frame:000000000001AF21                 db  0Eh
.eh_frame:000000000001AF22                 db  80h
.eh_frame:000000000001AF23                 db    1
.eh_frame:000000000001AF24                 db  59h ; Y
.eh_frame:000000000001AF25                 db  0Eh
.eh_frame:000000000001AF26                 db  60h ; `
.eh_frame:000000000001AF27                 db    2
.eh_frame:000000000001AF28                 db  40h ; @
.eh_frame:000000000001AF29                 db  0Eh
.eh_frame:000000000001AF2A                 db  68h ; h
.eh_frame:000000000001AF2B                 db  4Bh ; K
.eh_frame:000000000001AF2C                 db  0Eh
.eh_frame:000000000001AF2D                 db  70h ; p
.eh_frame:000000000001AF2E                 db  43h ; C
.eh_frame:000000000001AF2F                 db  0Eh
.eh_frame:000000000001AF30                 db  78h ; x
.eh_frame:000000000001AF31                 db  45h ; E
.eh_frame:000000000001AF32                 db  0Eh
.eh_frame:000000000001AF33                 db  80h
.eh_frame:000000000001AF34                 db    1
.eh_frame:000000000001AF35                 db  5Eh ; ^
.eh_frame:000000000001AF36                 db  0Eh
.eh_frame:000000000001AF37                 db  60h ; `
.eh_frame:000000000001AF38                 db  4Ch ; L
.eh_frame:000000000001AF39                 db  0Ah
.eh_frame:000000000001AF3A                 db  0Eh
.eh_frame:000000000001AF3B                 db  38h ; 8
.eh_frame:000000000001AF3C                 db  44h ; D
.eh_frame:000000000001AF3D                 db  0Eh
.eh_frame:000000000001AF3E                 db  30h ; 0
.eh_frame:000000000001AF3F                 db  41h ; A
.eh_frame:000000000001AF40                 db  0Eh
.eh_frame:000000000001AF41                 db  28h ; (
.eh_frame:000000000001AF42                 db  42h ; B
.eh_frame:000000000001AF43                 db  0Eh
.eh_frame:000000000001AF44                 db  20h
.eh_frame:000000000001AF45                 db  42h ; B
.eh_frame:000000000001AF46                 db  0Eh
.eh_frame:000000000001AF47                 db  18h
.eh_frame:000000000001AF48                 db  42h ; B
.eh_frame:000000000001AF49                 db  0Eh
.eh_frame:000000000001AF4A                 db  10h
.eh_frame:000000000001AF4B                 db  42h ; B
.eh_frame:000000000001AF4C                 db  0Eh
.eh_frame:000000000001AF4D                 db    8
.eh_frame:000000000001AF4E                 db  46h ; F
.eh_frame:000000000001AF4F                 db  0Bh
.eh_frame:000000000001AF50                 db  28h ; (
.eh_frame:000000000001AF51                 db    0
.eh_frame:000000000001AF52                 db    0
.eh_frame:000000000001AF53                 db    0
.eh_frame:000000000001AF54                 db  34h ; 4
.eh_frame:000000000001AF55                 db  16h
.eh_frame:000000000001AF56                 db    0
.eh_frame:000000000001AF57                 db    0
.eh_frame:000000000001AF58                 db 0D8h
.eh_frame:000000000001AF59                 db  3Fh ; ?
.eh_frame:000000000001AF5A                 db 0FFh
.eh_frame:000000000001AF5B                 db 0FFh
.eh_frame:000000000001AF5C                 db  36h ; 6
.eh_frame:000000000001AF5D                 db    0
.eh_frame:000000000001AF5E                 db    0
.eh_frame:000000000001AF5F                 db    0
.eh_frame:000000000001AF60                 db    0
.eh_frame:000000000001AF61                 db  42h ; B
.eh_frame:000000000001AF62                 db  0Eh
.eh_frame:000000000001AF63                 db  10h
.eh_frame:000000000001AF64                 db  8Ch
.eh_frame:000000000001AF65                 db    2
.eh_frame:000000000001AF66                 db  41h ; A
.eh_frame:000000000001AF67                 db  0Eh
.eh_frame:000000000001AF68                 db  18h
.eh_frame:000000000001AF69                 db  86h
.eh_frame:000000000001AF6A                 db    3
.eh_frame:000000000001AF6B                 db  41h ; A
.eh_frame:000000000001AF6C                 db  0Eh
.eh_frame:000000000001AF6D                 db  20h
.eh_frame:000000000001AF6E                 db  83h
.eh_frame:000000000001AF6F                 db    4
.eh_frame:000000000001AF70                 db  6Eh ; n
.eh_frame:000000000001AF71                 db  0Eh
.eh_frame:000000000001AF72                 db  18h
.eh_frame:000000000001AF73                 db  41h ; A
.eh_frame:000000000001AF74                 db  0Eh
.eh_frame:000000000001AF75                 db  10h
.eh_frame:000000000001AF76                 db  42h ; B
.eh_frame:000000000001AF77                 db  0Eh
.eh_frame:000000000001AF78                 db    8
.eh_frame:000000000001AF79                 db    0
.eh_frame:000000000001AF7A                 db    0
.eh_frame:000000000001AF7B                 db    0
.eh_frame:000000000001AF7C                 db  10h
.eh_frame:000000000001AF7D                 db    0
.eh_frame:000000000001AF7E                 db    0
.eh_frame:000000000001AF7F                 db    0
.eh_frame:000000000001AF80                 db  60h ; `
.eh_frame:000000000001AF81                 db  16h
.eh_frame:000000000001AF82                 db    0
.eh_frame:000000000001AF83                 db    0
.eh_frame:000000000001AF84                 db 0ECh
.eh_frame:000000000001AF85                 db  3Fh ; ?
.eh_frame:000000000001AF86                 db 0FFh
.eh_frame:000000000001AF87                 db 0FFh
.eh_frame:000000000001AF88                 db  11h
.eh_frame:000000000001AF89                 db    0
.eh_frame:000000000001AF8A                 db    0
.eh_frame:000000000001AF8B                 db    0
.eh_frame:000000000001AF8C                 db    0
.eh_frame:000000000001AF8D                 db    0
.eh_frame:000000000001AF8E                 db    0
.eh_frame:000000000001AF8F                 db    0
.eh_frame:000000000001AF90                 db  10h
.eh_frame:000000000001AF91                 db    0
.eh_frame:000000000001AF92                 db    0
.eh_frame:000000000001AF93                 db    0
.eh_frame:000000000001AF94                 db  74h ; t
.eh_frame:000000000001AF95                 db  16h
.eh_frame:000000000001AF96                 db    0
.eh_frame:000000000001AF97                 db    0
.eh_frame:000000000001AF98                 db 0F8h
.eh_frame:000000000001AF99                 db  3Fh ; ?
.eh_frame:000000000001AF9A                 db 0FFh
.eh_frame:000000000001AF9B                 db 0FFh
.eh_frame:000000000001AF9C                 db  11h
.eh_frame:000000000001AF9D                 db    0
.eh_frame:000000000001AF9E                 db    0
.eh_frame:000000000001AF9F                 db    0
.eh_frame:000000000001AFA0                 db    0
.eh_frame:000000000001AFA1                 db    0
.eh_frame:000000000001AFA2                 db    0
.eh_frame:000000000001AFA3                 db    0
.eh_frame:000000000001AFA4                 db  10h
.eh_frame:000000000001AFA5                 db    0
.eh_frame:000000000001AFA6                 db    0
.eh_frame:000000000001AFA7                 db    0
.eh_frame:000000000001AFA8                 db  88h
.eh_frame:000000000001AFA9                 db  16h
.eh_frame:000000000001AFAA                 db    0
.eh_frame:000000000001AFAB                 db    0
.eh_frame:000000000001AFAC                 db    4
.eh_frame:000000000001AFAD                 db  40h ; @
.eh_frame:000000000001AFAE                 db 0FFh
.eh_frame:000000000001AFAF                 db 0FFh
.eh_frame:000000000001AFB0                 db  35h ; 5
.eh_frame:000000000001AFB1                 db    0
.eh_frame:000000000001AFB2                 db    0
.eh_frame:000000000001AFB3                 db    0
.eh_frame:000000000001AFB4                 db    0
.eh_frame:000000000001AFB5                 db    0
.eh_frame:000000000001AFB6                 db    0
.eh_frame:000000000001AFB7                 db    0
.eh_frame:000000000001AFB8                 db  10h
.eh_frame:000000000001AFB9                 db    0
.eh_frame:000000000001AFBA                 db    0
.eh_frame:000000000001AFBB                 db    0
.eh_frame:000000000001AFBC                 db  9Ch
.eh_frame:000000000001AFBD                 db  16h
.eh_frame:000000000001AFBE                 db    0
.eh_frame:000000000001AFBF                 db    0
.eh_frame:000000000001AFC0                 db  30h ; 0
.eh_frame:000000000001AFC1                 db  40h ; @
.eh_frame:000000000001AFC2                 db 0FFh
.eh_frame:000000000001AFC3                 db 0FFh
.eh_frame:000000000001AFC4                 db  15h
.eh_frame:000000000001AFC5                 db    0
.eh_frame:000000000001AFC6                 db    0
.eh_frame:000000000001AFC7                 db    0
.eh_frame:000000000001AFC8                 db    0
.eh_frame:000000000001AFC9                 db    0
.eh_frame:000000000001AFCA                 db    0
.eh_frame:000000000001AFCB                 db    0
.eh_frame:000000000001AFCC                 db  10h
.eh_frame:000000000001AFCD                 db    0
.eh_frame:000000000001AFCE                 db    0
.eh_frame:000000000001AFCF                 db    0
.eh_frame:000000000001AFD0                 db 0B0h
.eh_frame:000000000001AFD1                 db  16h
.eh_frame:000000000001AFD2                 db    0
.eh_frame:000000000001AFD3                 db    0
.eh_frame:000000000001AFD4                 db  3Ch ; <
.eh_frame:000000000001AFD5                 db  40h ; @
.eh_frame:000000000001AFD6                 db 0FFh
.eh_frame:000000000001AFD7                 db 0FFh
.eh_frame:000000000001AFD8                 db  30h ; 0
.eh_frame:000000000001AFD9                 db    0
.eh_frame:000000000001AFDA                 db    0
.eh_frame:000000000001AFDB                 db    0
.eh_frame:000000000001AFDC                 db    0
.eh_frame:000000000001AFDD                 db  6Bh ; k
.eh_frame:000000000001AFDE                 db  0Eh
.eh_frame:000000000001AFDF                 db  10h
.eh_frame:000000000001AFE0                 db  50h ; P
.eh_frame:000000000001AFE1                 db    0
.eh_frame:000000000001AFE2                 db    0
.eh_frame:000000000001AFE3                 db    0
.eh_frame:000000000001AFE4                 db 0C4h
.eh_frame:000000000001AFE5                 db  16h
.eh_frame:000000000001AFE6                 db    0
.eh_frame:000000000001AFE7                 db    0
.eh_frame:000000000001AFE8                 db  58h ; X
.eh_frame:000000000001AFE9                 db  40h ; @
.eh_frame:000000000001AFEA                 db 0FFh
.eh_frame:000000000001AFEB                 db 0FFh
.eh_frame:000000000001AFEC                 db  74h ; t
.eh_frame:000000000001AFED                 db    0
.eh_frame:000000000001AFEE                 db    0
.eh_frame:000000000001AFEF                 db    0
.eh_frame:000000000001AFF0                 db    0
.eh_frame:000000000001AFF1                 db  42h ; B
.eh_frame:000000000001AFF2                 db  0Eh
.eh_frame:000000000001AFF3                 db  10h
.eh_frame:000000000001AFF4                 db  8Fh
.eh_frame:000000000001AFF5                 db    2
.eh_frame:000000000001AFF6                 db  42h ; B
.eh_frame:000000000001AFF7                 db  0Eh
.eh_frame:000000000001AFF8                 db  18h
.eh_frame:000000000001AFF9                 db  8Eh
.eh_frame:000000000001AFFA                 db    3
.eh_frame:000000000001AFFB                 db  49h ; I
.eh_frame:000000000001AFFC                 db  0Eh
.eh_frame:000000000001AFFD                 db  20h
.eh_frame:000000000001AFFE                 db  8Dh
.eh_frame:000000000001AFFF                 db    4
.eh_frame:000000000001B000                 db  42h ; B
.eh_frame:000000000001B001                 db  0Eh
.eh_frame:000000000001B002                 db  28h ; (
.eh_frame:000000000001B003                 db  8Ch
.eh_frame:000000000001B004                 db    5
.eh_frame:000000000001B005                 db  44h ; D
.eh_frame:000000000001B006                 db  0Eh
.eh_frame:000000000001B007                 db  30h ; 0
.eh_frame:000000000001B008                 db  86h
.eh_frame:000000000001B009                 db    6
.eh_frame:000000000001B00A                 db  41h ; A
.eh_frame:000000000001B00B                 db  0Eh
.eh_frame:000000000001B00C                 db  38h ; 8
.eh_frame:000000000001B00D                 db  83h
.eh_frame:000000000001B00E                 db    7
.eh_frame:000000000001B00F                 db  4Dh ; M
.eh_frame:000000000001B010                 db  0Eh
.eh_frame:000000000001B011                 db  50h ; P
.eh_frame:000000000001B012                 db  5Fh ; _
.eh_frame:000000000001B013                 db  0Eh
.eh_frame:000000000001B014                 db  58h ; X
.eh_frame:000000000001B015                 db  47h ; G
.eh_frame:000000000001B016                 db  0Eh
.eh_frame:000000000001B017                 db  60h ; `
.eh_frame:000000000001B018                 db  46h ; F
.eh_frame:000000000001B019                 db  0Eh
.eh_frame:000000000001B01A                 db  68h ; h
.eh_frame:000000000001B01B                 db  44h ; D
.eh_frame:000000000001B01C                 db  0Eh
.eh_frame:000000000001B01D                 db  70h ; p
.eh_frame:000000000001B01E                 db  58h ; X
.eh_frame:000000000001B01F                 db  0Eh
.eh_frame:000000000001B020                 db  38h ; 8
.eh_frame:000000000001B021                 db  41h ; A
.eh_frame:000000000001B022                 db  0Eh
.eh_frame:000000000001B023                 db  30h ; 0
.eh_frame:000000000001B024                 db  41h ; A
.eh_frame:000000000001B025                 db  0Eh
.eh_frame:000000000001B026                 db  28h ; (
.eh_frame:000000000001B027                 db  42h ; B
.eh_frame:000000000001B028                 db  0Eh
.eh_frame:000000000001B029                 db  20h
.eh_frame:000000000001B02A                 db  42h ; B
.eh_frame:000000000001B02B                 db  0Eh
.eh_frame:000000000001B02C                 db  18h
.eh_frame:000000000001B02D                 db  42h ; B
.eh_frame:000000000001B02E                 db  0Eh
.eh_frame:000000000001B02F                 db  10h
.eh_frame:000000000001B030                 db  42h ; B
.eh_frame:000000000001B031                 db  0Eh
.eh_frame:000000000001B032                 db    8
.eh_frame:000000000001B033                 db    0
.eh_frame:000000000001B034                 db  68h ; h
.eh_frame:000000000001B035                 db    0
.eh_frame:000000000001B036                 db    0
.eh_frame:000000000001B037                 db    0
.eh_frame:000000000001B038                 db  18h
.eh_frame:000000000001B039                 db  17h
.eh_frame:000000000001B03A                 db    0
.eh_frame:000000000001B03B                 db    0
.eh_frame:000000000001B03C                 db  84h
.eh_frame:000000000001B03D                 db  40h ; @
.eh_frame:000000000001B03E                 db 0FFh
.eh_frame:000000000001B03F                 db 0FFh
.eh_frame:000000000001B040                 db 0E3h
.eh_frame:000000000001B041                 db    0
.eh_frame:000000000001B042                 db    0
.eh_frame:000000000001B043                 db    0
.eh_frame:000000000001B044                 db    0
.eh_frame:000000000001B045                 db  42h ; B
.eh_frame:000000000001B046                 db  0Eh
.eh_frame:000000000001B047                 db  10h
.eh_frame:000000000001B048                 db  8Fh
.eh_frame:000000000001B049                 db    2
.eh_frame:000000000001B04A                 db  42h ; B
.eh_frame:000000000001B04B                 db  0Eh
.eh_frame:000000000001B04C                 db  18h
.eh_frame:000000000001B04D                 db  8Eh
.eh_frame:000000000001B04E                 db    3
.eh_frame:000000000001B04F                 db  49h ; I
.eh_frame:000000000001B050                 db  0Eh
.eh_frame:000000000001B051                 db  20h
.eh_frame:000000000001B052                 db  8Dh
.eh_frame:000000000001B053                 db    4
.eh_frame:000000000001B054                 db  42h ; B
.eh_frame:000000000001B055                 db  0Eh
.eh_frame:000000000001B056                 db  28h ; (
.eh_frame:000000000001B057                 db  8Ch
.eh_frame:000000000001B058                 db    5
.eh_frame:000000000001B059                 db  44h ; D
.eh_frame:000000000001B05A                 db  0Eh
.eh_frame:000000000001B05B                 db  30h ; 0
.eh_frame:000000000001B05C                 db  86h
.eh_frame:000000000001B05D                 db    6
.eh_frame:000000000001B05E                 db  41h ; A
.eh_frame:000000000001B05F                 db  0Eh
.eh_frame:000000000001B060                 db  38h ; 8
.eh_frame:000000000001B061                 db  83h
.eh_frame:000000000001B062                 db    7
.eh_frame:000000000001B063                 db  4Dh ; M
.eh_frame:000000000001B064                 db  0Eh
.eh_frame:000000000001B065                 db  70h ; p
.eh_frame:000000000001B066                 db  65h ; e
.eh_frame:000000000001B067                 db  0Eh
.eh_frame:000000000001B068                 db  78h ; x
.eh_frame:000000000001B069                 db  4Dh ; M
.eh_frame:000000000001B06A                 db  0Eh
.eh_frame:000000000001B06B                 db  80h
.eh_frame:000000000001B06C                 db    1
.eh_frame:000000000001B06D                 db  46h ; F
.eh_frame:000000000001B06E                 db  0Eh
.eh_frame:000000000001B06F                 db  88h
.eh_frame:000000000001B070                 db    1
.eh_frame:000000000001B071                 db  42h ; B
.eh_frame:000000000001B072                 db  0Eh
.eh_frame:000000000001B073                 db  90h
.eh_frame:000000000001B074                 db    1
.eh_frame:000000000001B075                 db  5Eh ; ^
.eh_frame:000000000001B076                 db  0Eh
.eh_frame:000000000001B077                 db  70h ; p
.eh_frame:000000000001B078                 db  56h ; V
.eh_frame:000000000001B079                 db  0Eh
.eh_frame:000000000001B07A                 db  78h ; x
.eh_frame:000000000001B07B                 db  43h ; C
.eh_frame:000000000001B07C                 db  0Eh
.eh_frame:000000000001B07D                 db  80h
.eh_frame:000000000001B07E                 db    1
.eh_frame:000000000001B07F                 db  43h ; C
.eh_frame:000000000001B080                 db  0Eh
.eh_frame:000000000001B081                 db  88h
.eh_frame:000000000001B082                 db    1
.eh_frame:000000000001B083                 db  56h ; V
.eh_frame:000000000001B084                 db  0Eh
.eh_frame:000000000001B085                 db  90h
.eh_frame:000000000001B086                 db    1
.eh_frame:000000000001B087                 db  52h ; R
.eh_frame:000000000001B088                 db  0Eh
.eh_frame:000000000001B089                 db  70h ; p
.eh_frame:000000000001B08A                 db  5Bh ; [
.eh_frame:000000000001B08B                 db  0Eh
.eh_frame:000000000001B08C                 db  38h ; 8
.eh_frame:000000000001B08D                 db  41h ; A
.eh_frame:000000000001B08E                 db  0Eh
.eh_frame:000000000001B08F                 db  30h ; 0
.eh_frame:000000000001B090                 db  41h ; A
.eh_frame:000000000001B091                 db  0Eh
.eh_frame:000000000001B092                 db  28h ; (
.eh_frame:000000000001B093                 db  42h ; B
.eh_frame:000000000001B094                 db  0Eh
.eh_frame:000000000001B095                 db  20h
.eh_frame:000000000001B096                 db  42h ; B
.eh_frame:000000000001B097                 db  0Eh
.eh_frame:000000000001B098                 db  18h
.eh_frame:000000000001B099                 db  42h ; B
.eh_frame:000000000001B09A                 db  0Eh
.eh_frame:000000000001B09B                 db  10h
.eh_frame:000000000001B09C                 db  42h ; B
.eh_frame:000000000001B09D                 db  0Eh
.eh_frame:000000000001B09E                 db    8
.eh_frame:000000000001B09F                 db    0
.eh_frame:000000000001B0A0                 db  10h
.eh_frame:000000000001B0A1                 db    0
.eh_frame:000000000001B0A2                 db    0
.eh_frame:000000000001B0A3                 db    0
.eh_frame:000000000001B0A4                 db  84h
.eh_frame:000000000001B0A5                 db  17h
.eh_frame:000000000001B0A6                 db    0
.eh_frame:000000000001B0A7                 db    0
.eh_frame:000000000001B0A8                 db    8
.eh_frame:000000000001B0A9                 db  41h ; A
.eh_frame:000000000001B0AA                 db 0FFh
.eh_frame:000000000001B0AB                 db 0FFh
.eh_frame:000000000001B0AC                 db  0Ah
.eh_frame:000000000001B0AD                 db    0
.eh_frame:000000000001B0AE                 db    0
.eh_frame:000000000001B0AF                 db    0
.eh_frame:000000000001B0B0                 db    0
.eh_frame:000000000001B0B1                 db    0
.eh_frame:000000000001B0B2                 db    0
.eh_frame:000000000001B0B3                 db    0
.eh_frame:000000000001B0B4                 db  28h ; (
.eh_frame:000000000001B0B5                 db    0
.eh_frame:000000000001B0B6                 db    0
.eh_frame:000000000001B0B7                 db    0
.eh_frame:000000000001B0B8                 db  98h
.eh_frame:000000000001B0B9                 db  17h
.eh_frame:000000000001B0BA                 db    0
.eh_frame:000000000001B0BB                 db    0
.eh_frame:000000000001B0BC                 db    4
.eh_frame:000000000001B0BD                 db  41h ; A
.eh_frame:000000000001B0BE                 db 0FFh
.eh_frame:000000000001B0BF                 db 0FFh
.eh_frame:000000000001B0C0                 db  93h
.eh_frame:000000000001B0C1                 db    0
.eh_frame:000000000001B0C2                 db    0
.eh_frame:000000000001B0C3                 db    0
.eh_frame:000000000001B0C4                 db    0
.eh_frame:000000000001B0C5                 db  48h ; H
.eh_frame:000000000001B0C6                 db  0Eh
.eh_frame:000000000001B0C7                 db  10h
.eh_frame:000000000001B0C8                 db  8Ch
.eh_frame:000000000001B0C9                 db    2
.eh_frame:000000000001B0CA                 db  48h ; H
.eh_frame:000000000001B0CB                 db  0Eh
.eh_frame:000000000001B0CC                 db  18h
.eh_frame:000000000001B0CD                 db  86h
.eh_frame:000000000001B0CE                 db    3
.eh_frame:000000000001B0CF                 db  41h ; A
.eh_frame:000000000001B0D0                 db  0Eh
.eh_frame:000000000001B0D1                 db  20h
.eh_frame:000000000001B0D2                 db  83h
.eh_frame:000000000001B0D3                 db    4
.eh_frame:000000000001B0D4                 db    2
.eh_frame:000000000001B0D5                 db  74h ; t
.eh_frame:000000000001B0D6                 db  0Eh
.eh_frame:000000000001B0D7                 db  18h
.eh_frame:000000000001B0D8                 db  4Bh ; K
.eh_frame:000000000001B0D9                 db  0Eh
.eh_frame:000000000001B0DA                 db  10h
.eh_frame:000000000001B0DB                 db  42h ; B
.eh_frame:000000000001B0DC                 db  0Eh
.eh_frame:000000000001B0DD                 db    8
.eh_frame:000000000001B0DE                 db    0
.eh_frame:000000000001B0DF                 db    0
.eh_frame:000000000001B0E0                 db  10h
.eh_frame:000000000001B0E1                 db    0
.eh_frame:000000000001B0E2                 db    0
.eh_frame:000000000001B0E3                 db    0
.eh_frame:000000000001B0E4                 db 0C4h
.eh_frame:000000000001B0E5                 db  17h
.eh_frame:000000000001B0E6                 db    0
.eh_frame:000000000001B0E7                 db    0
.eh_frame:000000000001B0E8                 db  78h ; x
.eh_frame:000000000001B0E9                 db  41h ; A
.eh_frame:000000000001B0EA                 db 0FFh
.eh_frame:000000000001B0EB                 db 0FFh
.eh_frame:000000000001B0EC                 db  13h
.eh_frame:000000000001B0ED                 db    0
.eh_frame:000000000001B0EE                 db    0
.eh_frame:000000000001B0EF                 db    0
.eh_frame:000000000001B0F0                 db    0
.eh_frame:000000000001B0F1                 db    0
.eh_frame:000000000001B0F2                 db    0
.eh_frame:000000000001B0F3                 db    0
.eh_frame:000000000001B0F4                 db  10h
.eh_frame:000000000001B0F5                 db    0
.eh_frame:000000000001B0F6                 db    0
.eh_frame:000000000001B0F7                 db    0
.eh_frame:000000000001B0F8                 db 0D8h
.eh_frame:000000000001B0F9                 db  17h
.eh_frame:000000000001B0FA                 db    0
.eh_frame:000000000001B0FB                 db    0
.eh_frame:000000000001B0FC                 db  84h
.eh_frame:000000000001B0FD                 db  41h ; A
.eh_frame:000000000001B0FE                 db 0FFh
.eh_frame:000000000001B0FF                 db 0FFh
.eh_frame:000000000001B100                 db  0Ch
.eh_frame:000000000001B101                 db    0
.eh_frame:000000000001B102                 db    0
.eh_frame:000000000001B103                 db    0
.eh_frame:000000000001B104                 db    0
.eh_frame:000000000001B105                 db    0
.eh_frame:000000000001B106                 db    0
.eh_frame:000000000001B107                 db    0
.eh_frame:000000000001B108                 db  10h
.eh_frame:000000000001B109                 db    0
.eh_frame:000000000001B10A                 db    0
.eh_frame:000000000001B10B                 db    0
.eh_frame:000000000001B10C                 db 0ECh
.eh_frame:000000000001B10D                 db  17h
.eh_frame:000000000001B10E                 db    0
.eh_frame:000000000001B10F                 db    0
.eh_frame:000000000001B110                 db  80h
.eh_frame:000000000001B111                 db  41h ; A
.eh_frame:000000000001B112                 db 0FFh
.eh_frame:000000000001B113                 db 0FFh
.eh_frame:000000000001B114                 db  18h
.eh_frame:000000000001B115                 db    0
.eh_frame:000000000001B116                 db    0
.eh_frame:000000000001B117                 db    0
.eh_frame:000000000001B118                 db    0
.eh_frame:000000000001B119                 db    0
.eh_frame:000000000001B11A                 db    0
.eh_frame:000000000001B11B                 db    0
.eh_frame:000000000001B11C                 db  10h
.eh_frame:000000000001B11D                 db    0
.eh_frame:000000000001B11E                 db    0
.eh_frame:000000000001B11F                 db    0
.eh_frame:000000000001B120                 db    0
.eh_frame:000000000001B121                 db  18h
.eh_frame:000000000001B122                 db    0
.eh_frame:000000000001B123                 db    0
.eh_frame:000000000001B124                 db  8Ch
.eh_frame:000000000001B125                 db  41h ; A
.eh_frame:000000000001B126                 db 0FFh
.eh_frame:000000000001B127                 db 0FFh
.eh_frame:000000000001B128                 db  14h
.eh_frame:000000000001B129                 db    0
.eh_frame:000000000001B12A                 db    0
.eh_frame:000000000001B12B                 db    0
.eh_frame:000000000001B12C                 db    0
.eh_frame:000000000001B12D                 db    0
.eh_frame:000000000001B12E                 db    0
.eh_frame:000000000001B12F                 db    0
.eh_frame:000000000001B130                 db  18h
.eh_frame:000000000001B131                 db    0
.eh_frame:000000000001B132                 db    0
.eh_frame:000000000001B133                 db    0
.eh_frame:000000000001B134                 db  14h
.eh_frame:000000000001B135                 db  18h
.eh_frame:000000000001B136                 db    0
.eh_frame:000000000001B137                 db    0
.eh_frame:000000000001B138                 db  98h
.eh_frame:000000000001B139                 db  41h ; A
.eh_frame:000000000001B13A                 db 0FFh
.eh_frame:000000000001B13B                 db 0FFh
.eh_frame:000000000001B13C                 db  8Eh
.eh_frame:000000000001B13D                 db    0
.eh_frame:000000000001B13E                 db    0
.eh_frame:000000000001B13F                 db    0
.eh_frame:000000000001B140                 db    0
.eh_frame:000000000001B141                 db  44h ; D
.eh_frame:000000000001B142                 db  0Eh
.eh_frame:000000000001B143                 db  50h ; P
.eh_frame:000000000001B144                 db    2
.eh_frame:000000000001B145                 db  7Fh ; 
.eh_frame:000000000001B146                 db  0Ah
.eh_frame:000000000001B147                 db  0Eh
.eh_frame:000000000001B148                 db    8
.eh_frame:000000000001B149                 db  41h ; A
.eh_frame:000000000001B14A                 db  0Bh
.eh_frame:000000000001B14B                 db    0
.eh_frame:000000000001B14C                 db  18h
.eh_frame:000000000001B14D                 db    0
.eh_frame:000000000001B14E                 db    0
.eh_frame:000000000001B14F                 db    0
.eh_frame:000000000001B150                 db  30h ; 0
.eh_frame:000000000001B151                 db  18h
.eh_frame:000000000001B152                 db    0
.eh_frame:000000000001B153                 db    0
.eh_frame:000000000001B154                 db  0Ch
.eh_frame:000000000001B155                 db  42h ; B
.eh_frame:000000000001B156                 db 0FFh
.eh_frame:000000000001B157                 db 0FFh
.eh_frame:000000000001B158                 db  8Ah
.eh_frame:000000000001B159                 db    0
.eh_frame:000000000001B15A                 db    0
.eh_frame:000000000001B15B                 db    0
.eh_frame:000000000001B15C                 db    0
.eh_frame:000000000001B15D                 db  44h ; D
.eh_frame:000000000001B15E                 db  0Eh
.eh_frame:000000000001B15F                 db  50h ; P
.eh_frame:000000000001B160                 db    2
.eh_frame:000000000001B161                 db  7Bh ; {
.eh_frame:000000000001B162                 db  0Ah
.eh_frame:000000000001B163                 db  0Eh
.eh_frame:000000000001B164                 db    8
.eh_frame:000000000001B165                 db  41h ; A
.eh_frame:000000000001B166                 db  0Bh
.eh_frame:000000000001B167                 db    0
.eh_frame:000000000001B168                 db  10h
.eh_frame:000000000001B169                 db    0
.eh_frame:000000000001B16A                 db    0
.eh_frame:000000000001B16B                 db    0
.eh_frame:000000000001B16C                 db  4Ch ; L
.eh_frame:000000000001B16D                 db  18h
.eh_frame:000000000001B16E                 db    0
.eh_frame:000000000001B16F                 db    0
.eh_frame:000000000001B170                 db  80h
.eh_frame:000000000001B171                 db  42h ; B
.eh_frame:000000000001B172                 db 0FFh
.eh_frame:000000000001B173                 db 0FFh
.eh_frame:000000000001B174                 db  0Ch
.eh_frame:000000000001B175                 db    0
.eh_frame:000000000001B176                 db    0
.eh_frame:000000000001B177                 db    0
.eh_frame:000000000001B178                 db    0
.eh_frame:000000000001B179                 db    0
.eh_frame:000000000001B17A                 db    0
.eh_frame:000000000001B17B                 db    0
.eh_frame:000000000001B17C                 db  10h
.eh_frame:000000000001B17D                 db    0
.eh_frame:000000000001B17E                 db    0
.eh_frame:000000000001B17F                 db    0
.eh_frame:000000000001B180                 db  60h ; `
.eh_frame:000000000001B181                 db  18h
.eh_frame:000000000001B182                 db    0
.eh_frame:000000000001B183                 db    0
.eh_frame:000000000001B184                 db  7Ch ; |
.eh_frame:000000000001B185                 db  42h ; B
.eh_frame:000000000001B186                 db 0FFh
.eh_frame:000000000001B187                 db 0FFh
.eh_frame:000000000001B188                 db  0Fh
.eh_frame:000000000001B189                 db    0
.eh_frame:000000000001B18A                 db    0
.eh_frame:000000000001B18B                 db    0
.eh_frame:000000000001B18C                 db    0
.eh_frame:000000000001B18D                 db    0
.eh_frame:000000000001B18E                 db    0
.eh_frame:000000000001B18F                 db    0
.eh_frame:000000000001B190                 db  18h
.eh_frame:000000000001B191                 db    0
.eh_frame:000000000001B192                 db    0
.eh_frame:000000000001B193                 db    0
.eh_frame:000000000001B194                 db  74h ; t
.eh_frame:000000000001B195                 db  18h
.eh_frame:000000000001B196                 db    0
.eh_frame:000000000001B197                 db    0
.eh_frame:000000000001B198                 db  78h ; x
.eh_frame:000000000001B199                 db  42h ; B
.eh_frame:000000000001B19A                 db 0FFh
.eh_frame:000000000001B19B                 db 0FFh
.eh_frame:000000000001B19C                 db  98h
.eh_frame:000000000001B19D                 db    0
.eh_frame:000000000001B19E                 db    0
.eh_frame:000000000001B19F                 db    0
.eh_frame:000000000001B1A0                 db    0
.eh_frame:000000000001B1A1                 db  44h ; D
.eh_frame:000000000001B1A2                 db  0Eh
.eh_frame:000000000001B1A3                 db  50h ; P
.eh_frame:000000000001B1A4                 db    2
.eh_frame:000000000001B1A5                 db  8Eh
.eh_frame:000000000001B1A6                 db  0Ah
.eh_frame:000000000001B1A7                 db  0Eh
.eh_frame:000000000001B1A8                 db    8
.eh_frame:000000000001B1A9                 db  41h ; A
.eh_frame:000000000001B1AA                 db  0Bh
.eh_frame:000000000001B1AB                 db    0
.eh_frame:000000000001B1AC                 db  10h
.eh_frame:000000000001B1AD                 db    0
.eh_frame:000000000001B1AE                 db    0
.eh_frame:000000000001B1AF                 db    0
.eh_frame:000000000001B1B0                 db  90h
.eh_frame:000000000001B1B1                 db  18h
.eh_frame:000000000001B1B2                 db    0
.eh_frame:000000000001B1B3                 db    0
.eh_frame:000000000001B1B4                 db 0FCh
.eh_frame:000000000001B1B5                 db  42h ; B
.eh_frame:000000000001B1B6                 db 0FFh
.eh_frame:000000000001B1B7                 db 0FFh
.eh_frame:000000000001B1B8                 db  10h
.eh_frame:000000000001B1B9                 db    0
.eh_frame:000000000001B1BA                 db    0
.eh_frame:000000000001B1BB                 db    0
.eh_frame:000000000001B1BC                 db    0
.eh_frame:000000000001B1BD                 db    0
.eh_frame:000000000001B1BE                 db    0
.eh_frame:000000000001B1BF                 db    0
.eh_frame:000000000001B1C0                 db  10h
.eh_frame:000000000001B1C1                 db    0
.eh_frame:000000000001B1C2                 db    0
.eh_frame:000000000001B1C3                 db    0
.eh_frame:000000000001B1C4                 db 0A4h
.eh_frame:000000000001B1C5                 db  18h
.eh_frame:000000000001B1C6                 db    0
.eh_frame:000000000001B1C7                 db    0
.eh_frame:000000000001B1C8                 db 0F8h
.eh_frame:000000000001B1C9                 db  42h ; B
.eh_frame:000000000001B1CA                 db 0FFh
.eh_frame:000000000001B1CB                 db 0FFh
.eh_frame:000000000001B1CC                 db  11h
.eh_frame:000000000001B1CD                 db    0
.eh_frame:000000000001B1CE                 db    0
.eh_frame:000000000001B1CF                 db    0
.eh_frame:000000000001B1D0                 db    0
.eh_frame:000000000001B1D1                 db    0
.eh_frame:000000000001B1D2                 db    0
.eh_frame:000000000001B1D3                 db    0
.eh_frame:000000000001B1D4                 db  10h
.eh_frame:000000000001B1D5                 db    0
.eh_frame:000000000001B1D6                 db    0
.eh_frame:000000000001B1D7                 db    0
.eh_frame:000000000001B1D8                 db 0B8h
.eh_frame:000000000001B1D9                 db  18h
.eh_frame:000000000001B1DA                 db    0
.eh_frame:000000000001B1DB                 db    0
.eh_frame:000000000001B1DC                 db    4
.eh_frame:000000000001B1DD                 db  43h ; C
.eh_frame:000000000001B1DE                 db 0FFh
.eh_frame:000000000001B1DF                 db 0FFh
.eh_frame:000000000001B1E0                 db  0Ah
.eh_frame:000000000001B1E1                 db    0
.eh_frame:000000000001B1E2                 db    0
.eh_frame:000000000001B1E3                 db    0
.eh_frame:000000000001B1E4                 db    0
.eh_frame:000000000001B1E5                 db    0
.eh_frame:000000000001B1E6                 db    0
.eh_frame:000000000001B1E7                 db    0
.eh_frame:000000000001B1E8                 db  18h
.eh_frame:000000000001B1E9                 db    0
.eh_frame:000000000001B1EA                 db    0
.eh_frame:000000000001B1EB                 db    0
.eh_frame:000000000001B1EC                 db 0CCh
.eh_frame:000000000001B1ED                 db  18h
.eh_frame:000000000001B1EE                 db    0
.eh_frame:000000000001B1EF                 db    0
.eh_frame:000000000001B1F0                 db    0
.eh_frame:000000000001B1F1                 db  43h ; C
.eh_frame:000000000001B1F2                 db 0FFh
.eh_frame:000000000001B1F3                 db 0FFh
.eh_frame:000000000001B1F4                 db  8Eh
.eh_frame:000000000001B1F5                 db    0
.eh_frame:000000000001B1F6                 db    0
.eh_frame:000000000001B1F7                 db    0
.eh_frame:000000000001B1F8                 db    0
.eh_frame:000000000001B1F9                 db  44h ; D
.eh_frame:000000000001B1FA                 db  0Eh
.eh_frame:000000000001B1FB                 db  50h ; P
.eh_frame:000000000001B1FC                 db    2
.eh_frame:000000000001B1FD                 db  7Fh ; 
.eh_frame:000000000001B1FE                 db  0Ah
.eh_frame:000000000001B1FF                 db  0Eh
.eh_frame:000000000001B200                 db    8
.eh_frame:000000000001B201                 db  41h ; A
.eh_frame:000000000001B202                 db  0Bh
.eh_frame:000000000001B203                 db    0
.eh_frame:000000000001B204                 db  18h
.eh_frame:000000000001B205                 db    0
.eh_frame:000000000001B206                 db    0
.eh_frame:000000000001B207                 db    0
.eh_frame:000000000001B208                 db 0E8h
.eh_frame:000000000001B209                 db  18h
.eh_frame:000000000001B20A                 db    0
.eh_frame:000000000001B20B                 db    0
.eh_frame:000000000001B20C                 db  74h ; t
.eh_frame:000000000001B20D                 db  43h ; C
.eh_frame:000000000001B20E                 db 0FFh
.eh_frame:000000000001B20F                 db 0FFh
.eh_frame:000000000001B210                 db  91h
.eh_frame:000000000001B211                 db    0
.eh_frame:000000000001B212                 db    0
.eh_frame:000000000001B213                 db    0
.eh_frame:000000000001B214                 db    0
.eh_frame:000000000001B215                 db  44h ; D
.eh_frame:000000000001B216                 db  0Eh
.eh_frame:000000000001B217                 db  50h ; P
.eh_frame:000000000001B218                 db    2
.eh_frame:000000000001B219                 db  82h
.eh_frame:000000000001B21A                 db  0Ah
.eh_frame:000000000001B21B                 db  0Eh
.eh_frame:000000000001B21C                 db    8
.eh_frame:000000000001B21D                 db  41h ; A
.eh_frame:000000000001B21E                 db  0Bh
.eh_frame:000000000001B21F                 db    0
.eh_frame:000000000001B220                 db  10h
.eh_frame:000000000001B221                 db    0
.eh_frame:000000000001B222                 db    0
.eh_frame:000000000001B223                 db    0
.eh_frame:000000000001B224                 db    4
.eh_frame:000000000001B225                 db  19h
.eh_frame:000000000001B226                 db    0
.eh_frame:000000000001B227                 db    0
.eh_frame:000000000001B228                 db 0F8h
.eh_frame:000000000001B229                 db  43h ; C
.eh_frame:000000000001B22A                 db 0FFh
.eh_frame:000000000001B22B                 db 0FFh
.eh_frame:000000000001B22C                 db  0Ch
.eh_frame:000000000001B22D                 db    0
.eh_frame:000000000001B22E                 db    0
.eh_frame:000000000001B22F                 db    0
.eh_frame:000000000001B230                 db    0
.eh_frame:000000000001B231                 db    0
.eh_frame:000000000001B232                 db    0
.eh_frame:000000000001B233                 db    0
.eh_frame:000000000001B234                 db  10h
.eh_frame:000000000001B235                 db    0
.eh_frame:000000000001B236                 db    0
.eh_frame:000000000001B237                 db    0
.eh_frame:000000000001B238                 db  18h
.eh_frame:000000000001B239                 db  19h
.eh_frame:000000000001B23A                 db    0
.eh_frame:000000000001B23B                 db    0
.eh_frame:000000000001B23C                 db 0F4h
.eh_frame:000000000001B23D                 db  43h ; C
.eh_frame:000000000001B23E                 db 0FFh
.eh_frame:000000000001B23F                 db 0FFh
.eh_frame:000000000001B240                 db  17h
.eh_frame:000000000001B241                 db    0
.eh_frame:000000000001B242                 db    0
.eh_frame:000000000001B243                 db    0
.eh_frame:000000000001B244                 db    0
.eh_frame:000000000001B245                 db    0
.eh_frame:000000000001B246                 db    0
.eh_frame:000000000001B247                 db    0
.eh_frame:000000000001B248                 db  10h
.eh_frame:000000000001B249                 db    0
.eh_frame:000000000001B24A                 db    0
.eh_frame:000000000001B24B                 db    0
.eh_frame:000000000001B24C                 db  2Ch ; ,
.eh_frame:000000000001B24D                 db  19h
.eh_frame:000000000001B24E                 db    0
.eh_frame:000000000001B24F                 db    0
.eh_frame:000000000001B250                 db    0
.eh_frame:000000000001B251                 db  44h ; D
.eh_frame:000000000001B252                 db 0FFh
.eh_frame:000000000001B253                 db 0FFh
.eh_frame:000000000001B254                 db  13h
.eh_frame:000000000001B255                 db    0
.eh_frame:000000000001B256                 db    0
.eh_frame:000000000001B257                 db    0
.eh_frame:000000000001B258                 db    0
.eh_frame:000000000001B259                 db    0
.eh_frame:000000000001B25A                 db    0
.eh_frame:000000000001B25B                 db    0
.eh_frame:000000000001B25C                 db  10h
.eh_frame:000000000001B25D                 db    0
.eh_frame:000000000001B25E                 db    0
.eh_frame:000000000001B25F                 db    0
.eh_frame:000000000001B260                 db  40h ; @
.eh_frame:000000000001B261                 db  19h
.eh_frame:000000000001B262                 db    0
.eh_frame:000000000001B263                 db    0
.eh_frame:000000000001B264                 db  0Ch
.eh_frame:000000000001B265                 db  44h ; D
.eh_frame:000000000001B266                 db 0FFh
.eh_frame:000000000001B267                 db 0FFh
.eh_frame:000000000001B268                 db  0Ch
.eh_frame:000000000001B269                 db    0
.eh_frame:000000000001B26A                 db    0
.eh_frame:000000000001B26B                 db    0
.eh_frame:000000000001B26C                 db    0
.eh_frame:000000000001B26D                 db    0
.eh_frame:000000000001B26E                 db    0
.eh_frame:000000000001B26F                 db    0
.eh_frame:000000000001B270                 db  10h
.eh_frame:000000000001B271                 db    0
.eh_frame:000000000001B272                 db    0
.eh_frame:000000000001B273                 db    0
.eh_frame:000000000001B274                 db  54h ; T
.eh_frame:000000000001B275                 db  19h
.eh_frame:000000000001B276                 db    0
.eh_frame:000000000001B277                 db    0
.eh_frame:000000000001B278                 db    8
.eh_frame:000000000001B279                 db  44h ; D
.eh_frame:000000000001B27A                 db 0FFh
.eh_frame:000000000001B27B                 db 0FFh
.eh_frame:000000000001B27C                 db  14h
.eh_frame:000000000001B27D                 db    0
.eh_frame:000000000001B27E                 db    0
.eh_frame:000000000001B27F                 db    0
.eh_frame:000000000001B280                 db    0
.eh_frame:000000000001B281                 db    0
.eh_frame:000000000001B282                 db    0
.eh_frame:000000000001B283                 db    0
.eh_frame:000000000001B284                 db  10h
.eh_frame:000000000001B285                 db    0
.eh_frame:000000000001B286                 db    0
.eh_frame:000000000001B287                 db    0
.eh_frame:000000000001B288                 db  68h ; h
.eh_frame:000000000001B289                 db  19h
.eh_frame:000000000001B28A                 db    0
.eh_frame:000000000001B28B                 db    0
.eh_frame:000000000001B28C                 db  14h
.eh_frame:000000000001B28D                 db  44h ; D
.eh_frame:000000000001B28E                 db 0FFh
.eh_frame:000000000001B28F                 db 0FFh
.eh_frame:000000000001B290                 db  13h
.eh_frame:000000000001B291                 db    0
.eh_frame:000000000001B292                 db    0
.eh_frame:000000000001B293                 db    0
.eh_frame:000000000001B294                 db    0
.eh_frame:000000000001B295                 db    0
.eh_frame:000000000001B296                 db    0
.eh_frame:000000000001B297                 db    0
.eh_frame:000000000001B298                 db  14h
.eh_frame:000000000001B299                 db    0
.eh_frame:000000000001B29A                 db    0
.eh_frame:000000000001B29B                 db    0
.eh_frame:000000000001B29C                 db  7Ch ; |
.eh_frame:000000000001B29D                 db  19h
.eh_frame:000000000001B29E                 db    0
.eh_frame:000000000001B29F                 db    0
.eh_frame:000000000001B2A0                 db  20h
.eh_frame:000000000001B2A1                 db  44h ; D
.eh_frame:000000000001B2A2                 db 0FFh
.eh_frame:000000000001B2A3                 db 0FFh
.eh_frame:000000000001B2A4                 db  18h
.eh_frame:000000000001B2A5                 db    0
.eh_frame:000000000001B2A6                 db    0
.eh_frame:000000000001B2A7                 db    0
.eh_frame:000000000001B2A8                 db    0
.eh_frame:000000000001B2A9                 db    0
.eh_frame:000000000001B2AA                 db    0
.eh_frame:000000000001B2AB                 db    0
.eh_frame:000000000001B2AC                 db    0
.eh_frame:000000000001B2AD                 db    0
.eh_frame:000000000001B2AE                 db    0
.eh_frame:000000000001B2AF                 db    0
.eh_frame:000000000001B2B0                 db  4Ch ; L
.eh_frame:000000000001B2B1                 db    0
.eh_frame:000000000001B2B2                 db    0
.eh_frame:000000000001B2B3                 db    0
.eh_frame:000000000001B2B4                 db  94h
.eh_frame:000000000001B2B5                 db  19h
.eh_frame:000000000001B2B6                 db    0
.eh_frame:000000000001B2B7                 db    0
.eh_frame:000000000001B2B8                 db  28h ; (
.eh_frame:000000000001B2B9                 db  44h ; D
.eh_frame:000000000001B2BA                 db 0FFh
.eh_frame:000000000001B2BB                 db 0FFh
.eh_frame:000000000001B2BC                 db  6Ah ; j
.eh_frame:000000000001B2BD                 db    2
.eh_frame:000000000001B2BE                 db    0
.eh_frame:000000000001B2BF                 db    0
.eh_frame:000000000001B2C0                 db    0
.eh_frame:000000000001B2C1                 db  42h ; B
.eh_frame:000000000001B2C2                 db  0Eh
.eh_frame:000000000001B2C3                 db  10h
.eh_frame:000000000001B2C4                 db  8Fh
.eh_frame:000000000001B2C5                 db    2
.eh_frame:000000000001B2C6                 db  42h ; B
.eh_frame:000000000001B2C7                 db  0Eh
.eh_frame:000000000001B2C8                 db  18h
.eh_frame:000000000001B2C9                 db  8Eh
.eh_frame:000000000001B2CA                 db    3
.eh_frame:000000000001B2CB                 db  45h ; E
.eh_frame:000000000001B2CC                 db  0Eh
.eh_frame:000000000001B2CD                 db  20h
.eh_frame:000000000001B2CE                 db  8Dh
.eh_frame:000000000001B2CF                 db    4
.eh_frame:000000000001B2D0                 db  42h ; B
.eh_frame:000000000001B2D1                 db  0Eh
.eh_frame:000000000001B2D2                 db  28h ; (
.eh_frame:000000000001B2D3                 db  8Ch
.eh_frame:000000000001B2D4                 db    5
.eh_frame:000000000001B2D5                 db  44h ; D
.eh_frame:000000000001B2D6                 db  0Eh
.eh_frame:000000000001B2D7                 db  30h ; 0
.eh_frame:000000000001B2D8                 db  86h
.eh_frame:000000000001B2D9                 db    6
.eh_frame:000000000001B2DA                 db  41h ; A
.eh_frame:000000000001B2DB                 db  0Eh
.eh_frame:000000000001B2DC                 db  38h ; 8
.eh_frame:000000000001B2DD                 db  83h
.eh_frame:000000000001B2DE                 db    7
.eh_frame:000000000001B2DF                 db  53h ; S
.eh_frame:000000000001B2E0                 db  0Eh
.eh_frame:000000000001B2E1                 db  80h
.eh_frame:000000000001B2E2                 db    3
.eh_frame:000000000001B2E3                 db    2
.eh_frame:000000000001B2E4                 db  58h ; X
.eh_frame:000000000001B2E5                 db  0Ah
.eh_frame:000000000001B2E6                 db  0Eh
.eh_frame:000000000001B2E7                 db  38h ; 8
.eh_frame:000000000001B2E8                 db  41h ; A
.eh_frame:000000000001B2E9                 db  0Eh
.eh_frame:000000000001B2EA                 db  30h ; 0
.eh_frame:000000000001B2EB                 db  41h ; A
.eh_frame:000000000001B2EC                 db  0Eh
.eh_frame:000000000001B2ED                 db  28h ; (
.eh_frame:000000000001B2EE                 db  42h ; B
.eh_frame:000000000001B2EF                 db  0Eh
.eh_frame:000000000001B2F0                 db  20h
.eh_frame:000000000001B2F1                 db  42h ; B
.eh_frame:000000000001B2F2                 db  0Eh
.eh_frame:000000000001B2F3                 db  18h
.eh_frame:000000000001B2F4                 db  42h ; B
.eh_frame:000000000001B2F5                 db  0Eh
.eh_frame:000000000001B2F6                 db  10h
.eh_frame:000000000001B2F7                 db  42h ; B
.eh_frame:000000000001B2F8                 db  0Eh
.eh_frame:000000000001B2F9                 db    8
.eh_frame:000000000001B2FA                 db  4Bh ; K
.eh_frame:000000000001B2FB                 db  0Bh
.eh_frame:000000000001B2FC                 db    0
.eh_frame:000000000001B2FD                 db    0
.eh_frame:000000000001B2FE                 db    0
.eh_frame:000000000001B2FF                 db    0
.eh_frame:000000000001B300                 db  34h ; 4
.eh_frame:000000000001B301                 db    0
.eh_frame:000000000001B302                 db    0
.eh_frame:000000000001B303                 db    0
.eh_frame:000000000001B304                 db 0E4h
.eh_frame:000000000001B305                 db  19h
.eh_frame:000000000001B306                 db    0
.eh_frame:000000000001B307                 db    0
.eh_frame:000000000001B308                 db  48h ; H
.eh_frame:000000000001B309                 db  46h ; F
.eh_frame:000000000001B30A                 db 0FFh
.eh_frame:000000000001B30B                 db 0FFh
.eh_frame:000000000001B30C                 db  5Eh ; ^
.eh_frame:000000000001B30D                 db    0
.eh_frame:000000000001B30E                 db    0
.eh_frame:000000000001B30F                 db    0
.eh_frame:000000000001B310                 db    0
.eh_frame:000000000001B311                 db  42h ; B
.eh_frame:000000000001B312                 db  0Eh
.eh_frame:000000000001B313                 db  10h
.eh_frame:000000000001B314                 db  8Dh
.eh_frame:000000000001B315                 db    2
.eh_frame:000000000001B316                 db  42h ; B
.eh_frame:000000000001B317                 db  0Eh
.eh_frame:000000000001B318                 db  18h
.eh_frame:000000000001B319                 db  8Ch
.eh_frame:000000000001B31A                 db    3
.eh_frame:000000000001B31B                 db  44h ; D
.eh_frame:000000000001B31C                 db  0Eh
.eh_frame:000000000001B31D                 db  20h
.eh_frame:000000000001B31E                 db  86h
.eh_frame:000000000001B31F                 db    4
.eh_frame:000000000001B320                 db  41h ; A
.eh_frame:000000000001B321                 db  0Eh
.eh_frame:000000000001B322                 db  28h ; (
.eh_frame:000000000001B323                 db  83h
.eh_frame:000000000001B324                 db    5
.eh_frame:000000000001B325                 db  4Ah ; J
.eh_frame:000000000001B326                 db  0Eh
.eh_frame:000000000001B327                 db  30h ; 0
.eh_frame:000000000001B328                 db    2
.eh_frame:000000000001B329                 db  41h ; A
.eh_frame:000000000001B32A                 db  0Eh
.eh_frame:000000000001B32B                 db  28h ; (
.eh_frame:000000000001B32C                 db  44h ; D
.eh_frame:000000000001B32D                 db  0Eh
.eh_frame:000000000001B32E                 db  20h
.eh_frame:000000000001B32F                 db  41h ; A
.eh_frame:000000000001B330                 db  0Eh
.eh_frame:000000000001B331                 db  18h
.eh_frame:000000000001B332                 db  42h ; B
.eh_frame:000000000001B333                 db  0Eh
.eh_frame:000000000001B334                 db  10h
.eh_frame:000000000001B335                 db  42h ; B
.eh_frame:000000000001B336                 db  0Eh
.eh_frame:000000000001B337                 db    8
.eh_frame:000000000001B338                 db  34h ; 4
.eh_frame:000000000001B339                 db    0
.eh_frame:000000000001B33A                 db    0
.eh_frame:000000000001B33B                 db    0
.eh_frame:000000000001B33C                 db  1Ch
.eh_frame:000000000001B33D                 db  1Ah
.eh_frame:000000000001B33E                 db    0
.eh_frame:000000000001B33F                 db    0
.eh_frame:000000000001B340                 db  70h ; p
.eh_frame:000000000001B341                 db  46h ; F
.eh_frame:000000000001B342                 db 0FFh
.eh_frame:000000000001B343                 db 0FFh
.eh_frame:000000000001B344                 db  5Eh ; ^
.eh_frame:000000000001B345                 db    0
.eh_frame:000000000001B346                 db    0
.eh_frame:000000000001B347                 db    0
.eh_frame:000000000001B348                 db    0
.eh_frame:000000000001B349                 db  42h ; B
.eh_frame:000000000001B34A                 db  0Eh
.eh_frame:000000000001B34B                 db  10h
.eh_frame:000000000001B34C                 db  8Dh
.eh_frame:000000000001B34D                 db    2
.eh_frame:000000000001B34E                 db  42h ; B
.eh_frame:000000000001B34F                 db  0Eh
.eh_frame:000000000001B350                 db  18h
.eh_frame:000000000001B351                 db  8Ch
.eh_frame:000000000001B352                 db    3
.eh_frame:000000000001B353                 db  44h ; D
.eh_frame:000000000001B354                 db  0Eh
.eh_frame:000000000001B355                 db  20h
.eh_frame:000000000001B356                 db  86h
.eh_frame:000000000001B357                 db    4
.eh_frame:000000000001B358                 db  41h ; A
.eh_frame:000000000001B359                 db  0Eh
.eh_frame:000000000001B35A                 db  28h ; (
.eh_frame:000000000001B35B                 db  83h
.eh_frame:000000000001B35C                 db    5
.eh_frame:000000000001B35D                 db  4Ah ; J
.eh_frame:000000000001B35E                 db  0Eh
.eh_frame:000000000001B35F                 db  30h ; 0
.eh_frame:000000000001B360                 db    2
.eh_frame:000000000001B361                 db  41h ; A
.eh_frame:000000000001B362                 db  0Eh
.eh_frame:000000000001B363                 db  28h ; (
.eh_frame:000000000001B364                 db  44h ; D
.eh_frame:000000000001B365                 db  0Eh
.eh_frame:000000000001B366                 db  20h
.eh_frame:000000000001B367                 db  41h ; A
.eh_frame:000000000001B368                 db  0Eh
.eh_frame:000000000001B369                 db  18h
.eh_frame:000000000001B36A                 db  42h ; B
.eh_frame:000000000001B36B                 db  0Eh
.eh_frame:000000000001B36C                 db  10h
.eh_frame:000000000001B36D                 db  42h ; B
.eh_frame:000000000001B36E                 db  0Eh
.eh_frame:000000000001B36F                 db    8
.eh_frame:000000000001B370                 db  38h ; 8
.eh_frame:000000000001B371                 db    0
.eh_frame:000000000001B372                 db    0
.eh_frame:000000000001B373                 db    0
.eh_frame:000000000001B374                 db  54h ; T
.eh_frame:000000000001B375                 db  1Ah
.eh_frame:000000000001B376                 db    0
.eh_frame:000000000001B377                 db    0
.eh_frame:000000000001B378                 db  98h
.eh_frame:000000000001B379                 db  46h ; F
.eh_frame:000000000001B37A                 db 0FFh
.eh_frame:000000000001B37B                 db 0FFh
.eh_frame:000000000001B37C                 db  27h ; '
.eh_frame:000000000001B37D                 db    1
.eh_frame:000000000001B37E                 db    0
.eh_frame:000000000001B37F                 db    0
.eh_frame:000000000001B380                 db    0
.eh_frame:000000000001B381                 db  42h ; B
.eh_frame:000000000001B382                 db  0Eh
.eh_frame:000000000001B383                 db  10h
.eh_frame:000000000001B384                 db  8Dh
.eh_frame:000000000001B385                 db    2
.eh_frame:000000000001B386                 db  42h ; B
.eh_frame:000000000001B387                 db  0Eh
.eh_frame:000000000001B388                 db  18h
.eh_frame:000000000001B389                 db  8Ch
.eh_frame:000000000001B38A                 db    3
.eh_frame:000000000001B38B                 db  44h ; D
.eh_frame:000000000001B38C                 db  0Eh
.eh_frame:000000000001B38D                 db  20h
.eh_frame:000000000001B38E                 db  86h
.eh_frame:000000000001B38F                 db    4
.eh_frame:000000000001B390                 db  41h ; A
.eh_frame:000000000001B391                 db  0Eh
.eh_frame:000000000001B392                 db  28h ; (
.eh_frame:000000000001B393                 db  83h
.eh_frame:000000000001B394                 db    5
.eh_frame:000000000001B395                 db  4Fh ; O
.eh_frame:000000000001B396                 db  0Eh
.eh_frame:000000000001B397                 db 0E0h
.eh_frame:000000000001B398                 db    2
.eh_frame:000000000001B399                 db    2
.eh_frame:000000000001B39A                 db 0B5h
.eh_frame:000000000001B39B                 db  0Ah
.eh_frame:000000000001B39C                 db  0Eh
.eh_frame:000000000001B39D                 db  28h ; (
.eh_frame:000000000001B39E                 db  41h ; A
.eh_frame:000000000001B39F                 db  0Eh
.eh_frame:000000000001B3A0                 db  20h
.eh_frame:000000000001B3A1                 db  41h ; A
.eh_frame:000000000001B3A2                 db  0Eh
.eh_frame:000000000001B3A3                 db  18h
.eh_frame:000000000001B3A4                 db  42h ; B
.eh_frame:000000000001B3A5                 db  0Eh
.eh_frame:000000000001B3A6                 db  10h
.eh_frame:000000000001B3A7                 db  42h ; B
.eh_frame:000000000001B3A8                 db  0Eh
.eh_frame:000000000001B3A9                 db    8
.eh_frame:000000000001B3AA                 db  45h ; E
.eh_frame:000000000001B3AB                 db  0Bh
.eh_frame:000000000001B3AC                 db  5Ch ; \
.eh_frame:000000000001B3AD                 db    0
.eh_frame:000000000001B3AE                 db    0
.eh_frame:000000000001B3AF                 db    0
.eh_frame:000000000001B3B0                 db  90h
.eh_frame:000000000001B3B1                 db  1Ah
.eh_frame:000000000001B3B2                 db    0
.eh_frame:000000000001B3B3                 db    0
.eh_frame:000000000001B3B4                 db  8Ch
.eh_frame:000000000001B3B5                 db  47h ; G
.eh_frame:000000000001B3B6                 db 0FFh
.eh_frame:000000000001B3B7                 db 0FFh
.eh_frame:000000000001B3B8                 db  92h
.eh_frame:000000000001B3B9                 db    0
.eh_frame:000000000001B3BA                 db    0
.eh_frame:000000000001B3BB                 db    0
.eh_frame:000000000001B3BC                 db    0
.eh_frame:000000000001B3BD                 db  42h ; B
.eh_frame:000000000001B3BE                 db  0Eh
.eh_frame:000000000001B3BF                 db  10h
.eh_frame:000000000001B3C0                 db  8Fh
.eh_frame:000000000001B3C1                 db    2
.eh_frame:000000000001B3C2                 db  42h ; B
.eh_frame:000000000001B3C3                 db  0Eh
.eh_frame:000000000001B3C4                 db  18h
.eh_frame:000000000001B3C5                 db  8Eh
.eh_frame:000000000001B3C6                 db    3
.eh_frame:000000000001B3C7                 db  45h ; E
.eh_frame:000000000001B3C8                 db  0Eh
.eh_frame:000000000001B3C9                 db  20h
.eh_frame:000000000001B3CA                 db  8Dh
.eh_frame:000000000001B3CB                 db    4
.eh_frame:000000000001B3CC                 db  42h ; B
.eh_frame:000000000001B3CD                 db  0Eh
.eh_frame:000000000001B3CE                 db  28h ; (
.eh_frame:000000000001B3CF                 db  8Ch
.eh_frame:000000000001B3D0                 db    5
.eh_frame:000000000001B3D1                 db  41h ; A
.eh_frame:000000000001B3D2                 db  0Eh
.eh_frame:000000000001B3D3                 db  30h ; 0
.eh_frame:000000000001B3D4                 db  86h
.eh_frame:000000000001B3D5                 db    6
.eh_frame:000000000001B3D6                 db  41h ; A
.eh_frame:000000000001B3D7                 db  0Eh
.eh_frame:000000000001B3D8                 db  38h ; 8
.eh_frame:000000000001B3D9                 db  83h
.eh_frame:000000000001B3DA                 db    7
.eh_frame:000000000001B3DB                 db  4Ah ; J
.eh_frame:000000000001B3DC                 db  0Eh
.eh_frame:000000000001B3DD                 db  50h ; P
.eh_frame:000000000001B3DE                 db  76h ; v
.eh_frame:000000000001B3DF                 db  0Ah
.eh_frame:000000000001B3E0                 db  0Eh
.eh_frame:000000000001B3E1                 db  38h ; 8
.eh_frame:000000000001B3E2                 db  43h ; C
.eh_frame:000000000001B3E3                 db  0Eh
.eh_frame:000000000001B3E4                 db  30h ; 0
.eh_frame:000000000001B3E5                 db  41h ; A
.eh_frame:000000000001B3E6                 db  0Eh
.eh_frame:000000000001B3E7                 db  28h ; (
.eh_frame:000000000001B3E8                 db  42h ; B
.eh_frame:000000000001B3E9                 db  0Eh
.eh_frame:000000000001B3EA                 db  20h
.eh_frame:000000000001B3EB                 db  42h ; B
.eh_frame:000000000001B3EC                 db  0Eh
.eh_frame:000000000001B3ED                 db  18h
.eh_frame:000000000001B3EE                 db  42h ; B
.eh_frame:000000000001B3EF                 db  0Eh
.eh_frame:000000000001B3F0                 db  10h
.eh_frame:000000000001B3F1                 db  42h ; B
.eh_frame:000000000001B3F2                 db  0Eh
.eh_frame:000000000001B3F3                 db    8
.eh_frame:000000000001B3F4                 db  47h ; G
.eh_frame:000000000001B3F5                 db  0Bh
.eh_frame:000000000001B3F6                 db  5Ah ; Z
.eh_frame:000000000001B3F7                 db  0Eh
.eh_frame:000000000001B3F8                 db  38h ; 8
.eh_frame:000000000001B3F9                 db  4Ah ; J
.eh_frame:000000000001B3FA                 db  0Eh
.eh_frame:000000000001B3FB                 db  30h ; 0
.eh_frame:000000000001B3FC                 db  41h ; A
.eh_frame:000000000001B3FD                 db  0Eh
.eh_frame:000000000001B3FE                 db  28h ; (
.eh_frame:000000000001B3FF                 db  42h ; B
.eh_frame:000000000001B400                 db  0Eh
.eh_frame:000000000001B401                 db  20h
.eh_frame:000000000001B402                 db  42h ; B
.eh_frame:000000000001B403                 db  0Eh
.eh_frame:000000000001B404                 db  18h
.eh_frame:000000000001B405                 db  42h ; B
.eh_frame:000000000001B406                 db  0Eh
.eh_frame:000000000001B407                 db  10h
.eh_frame:000000000001B408                 db  42h ; B
.eh_frame:000000000001B409                 db  0Eh
.eh_frame:000000000001B40A                 db    8
.eh_frame:000000000001B40B                 db    0
.eh_frame:000000000001B40C                 db  10h
.eh_frame:000000000001B40D                 db    0
.eh_frame:000000000001B40E                 db    0
.eh_frame:000000000001B40F                 db    0
.eh_frame:000000000001B410                 db 0F0h
.eh_frame:000000000001B411                 db  1Ah
.eh_frame:000000000001B412                 db    0
.eh_frame:000000000001B413                 db    0
.eh_frame:000000000001B414                 db 0CCh
.eh_frame:000000000001B415                 db  47h ; G
.eh_frame:000000000001B416                 db 0FFh
.eh_frame:000000000001B417                 db 0FFh
.eh_frame:000000000001B418                 db  12h
.eh_frame:000000000001B419                 db    0
.eh_frame:000000000001B41A                 db    0
.eh_frame:000000000001B41B                 db    0
.eh_frame:000000000001B41C                 db    0
.eh_frame:000000000001B41D                 db    0
.eh_frame:000000000001B41E                 db    0
.eh_frame:000000000001B41F                 db    0
.eh_frame:000000000001B420                 db  10h
.eh_frame:000000000001B421                 db    0
.eh_frame:000000000001B422                 db    0
.eh_frame:000000000001B423                 db    0
.eh_frame:000000000001B424                 db    4
.eh_frame:000000000001B425                 db  1Bh
.eh_frame:000000000001B426                 db    0
.eh_frame:000000000001B427                 db    0
.eh_frame:000000000001B428                 db 0D8h
.eh_frame:000000000001B429                 db  47h ; G
.eh_frame:000000000001B42A                 db 0FFh
.eh_frame:000000000001B42B                 db 0FFh
.eh_frame:000000000001B42C                 db  1Eh
.eh_frame:000000000001B42D                 db    0
.eh_frame:000000000001B42E                 db    0
.eh_frame:000000000001B42F                 db    0
.eh_frame:000000000001B430                 db    0
.eh_frame:000000000001B431                 db    0
.eh_frame:000000000001B432                 db    0
.eh_frame:000000000001B433                 db    0
.eh_frame:000000000001B434                 db  10h
.eh_frame:000000000001B435                 db    0
.eh_frame:000000000001B436                 db    0
.eh_frame:000000000001B437                 db    0
.eh_frame:000000000001B438                 db  18h
.eh_frame:000000000001B439                 db  1Bh
.eh_frame:000000000001B43A                 db    0
.eh_frame:000000000001B43B                 db    0
.eh_frame:000000000001B43C                 db 0E4h
.eh_frame:000000000001B43D                 db  47h ; G
.eh_frame:000000000001B43E                 db 0FFh
.eh_frame:000000000001B43F                 db 0FFh
.eh_frame:000000000001B440                 db  0Bh
.eh_frame:000000000001B441                 db    0
.eh_frame:000000000001B442                 db    0
.eh_frame:000000000001B443                 db    0
.eh_frame:000000000001B444                 db    0
.eh_frame:000000000001B445                 db    0
.eh_frame:000000000001B446                 db    0
.eh_frame:000000000001B447                 db    0
.eh_frame:000000000001B448                 db  4Ch ; L
.eh_frame:000000000001B449                 db    0
.eh_frame:000000000001B44A                 db    0
.eh_frame:000000000001B44B                 db    0
.eh_frame:000000000001B44C                 db  2Ch ; ,
.eh_frame:000000000001B44D                 db  1Bh
.eh_frame:000000000001B44E                 db    0
.eh_frame:000000000001B44F                 db    0
.eh_frame:000000000001B450                 db 0E0h
.eh_frame:000000000001B451                 db  47h ; G
.eh_frame:000000000001B452                 db 0FFh
.eh_frame:000000000001B453                 db 0FFh
.eh_frame:000000000001B454                 db  78h ; x
.eh_frame:000000000001B455                 db    3
.eh_frame:000000000001B456                 db    0
.eh_frame:000000000001B457                 db    0
.eh_frame:000000000001B458                 db    0
.eh_frame:000000000001B459                 db  42h ; B
.eh_frame:000000000001B45A                 db  0Eh
.eh_frame:000000000001B45B                 db  10h
.eh_frame:000000000001B45C                 db  8Fh
.eh_frame:000000000001B45D                 db    2
.eh_frame:000000000001B45E                 db  49h ; I
.eh_frame:000000000001B45F                 db  0Eh
.eh_frame:000000000001B460                 db  18h
.eh_frame:000000000001B461                 db  8Eh
.eh_frame:000000000001B462                 db    3
.eh_frame:000000000001B463                 db  42h ; B
.eh_frame:000000000001B464                 db  0Eh
.eh_frame:000000000001B465                 db  20h
.eh_frame:000000000001B466                 db  8Dh
.eh_frame:000000000001B467                 db    4
.eh_frame:000000000001B468                 db  42h ; B
.eh_frame:000000000001B469                 db  0Eh
.eh_frame:000000000001B46A                 db  28h ; (
.eh_frame:000000000001B46B                 db  8Ch
.eh_frame:000000000001B46C                 db    5
.eh_frame:000000000001B46D                 db  43h ; C
.eh_frame:000000000001B46E                 db  0Eh
.eh_frame:000000000001B46F                 db  30h ; 0
.eh_frame:000000000001B470                 db  86h
.eh_frame:000000000001B471                 db    6
.eh_frame:000000000001B472                 db  41h ; A
.eh_frame:000000000001B473                 db  0Eh
.eh_frame:000000000001B474                 db  38h ; 8
.eh_frame:000000000001B475                 db  83h
.eh_frame:000000000001B476                 db    7
.eh_frame:000000000001B477                 db  44h ; D
.eh_frame:000000000001B478                 db  0Eh
.eh_frame:000000000001B479                 db  80h
.eh_frame:000000000001B47A                 db    1
.eh_frame:000000000001B47B                 db    3
.eh_frame:000000000001B47C                 db  48h ; H
.eh_frame:000000000001B47D                 db    1
.eh_frame:000000000001B47E                 db  0Ah
.eh_frame:000000000001B47F                 db  0Eh
.eh_frame:000000000001B480                 db  38h ; 8
.eh_frame:000000000001B481                 db  44h ; D
.eh_frame:000000000001B482                 db  0Eh
.eh_frame:000000000001B483                 db  30h ; 0
.eh_frame:000000000001B484                 db  41h ; A
.eh_frame:000000000001B485                 db  0Eh
.eh_frame:000000000001B486                 db  28h ; (
.eh_frame:000000000001B487                 db  42h ; B
.eh_frame:000000000001B488                 db  0Eh
.eh_frame:000000000001B489                 db  20h
.eh_frame:000000000001B48A                 db  42h ; B
.eh_frame:000000000001B48B                 db  0Eh
.eh_frame:000000000001B48C                 db  18h
.eh_frame:000000000001B48D                 db  42h ; B
.eh_frame:000000000001B48E                 db  0Eh
.eh_frame:000000000001B48F                 db  10h
.eh_frame:000000000001B490                 db  42h ; B
.eh_frame:000000000001B491                 db  0Eh
.eh_frame:000000000001B492                 db    8
.eh_frame:000000000001B493                 db  44h ; D
.eh_frame:000000000001B494                 db  0Bh
.eh_frame:000000000001B495                 db    0
.eh_frame:000000000001B496                 db    0
.eh_frame:000000000001B497                 db    0
.eh_frame:000000000001B498                 db  2Ch ; ,
.eh_frame:000000000001B499                 db    0
.eh_frame:000000000001B49A                 db    0
.eh_frame:000000000001B49B                 db    0
.eh_frame:000000000001B49C                 db  7Ch ; |
.eh_frame:000000000001B49D                 db  1Bh
.eh_frame:000000000001B49E                 db    0
.eh_frame:000000000001B49F                 db    0
.eh_frame:000000000001B4A0                 db  10h
.eh_frame:000000000001B4A1                 db  4Bh ; K
.eh_frame:000000000001B4A2                 db 0FFh
.eh_frame:000000000001B4A3                 db 0FFh
.eh_frame:000000000001B4A4                 db  5Ah ; Z
.eh_frame:000000000001B4A5                 db    0
.eh_frame:000000000001B4A6                 db    0
.eh_frame:000000000001B4A7                 db    0
.eh_frame:000000000001B4A8                 db    0
.eh_frame:000000000001B4A9                 db  42h ; B
.eh_frame:000000000001B4AA                 db  0Eh
.eh_frame:000000000001B4AB                 db  10h
.eh_frame:000000000001B4AC                 db  8Ch
.eh_frame:000000000001B4AD                 db    2
.eh_frame:000000000001B4AE                 db  41h ; A
.eh_frame:000000000001B4AF                 db  0Eh
.eh_frame:000000000001B4B0                 db  18h
.eh_frame:000000000001B4B1                 db  86h
.eh_frame:000000000001B4B2                 db    3
.eh_frame:000000000001B4B3                 db  43h ; C
.eh_frame:000000000001B4B4                 db  0Eh
.eh_frame:000000000001B4B5                 db  20h
.eh_frame:000000000001B4B6                 db  83h
.eh_frame:000000000001B4B7                 db    4
.eh_frame:000000000001B4B8                 db  6Ah ; j
.eh_frame:000000000001B4B9                 db  0Ah
.eh_frame:000000000001B4BA                 db  0Eh
.eh_frame:000000000001B4BB                 db  18h
.eh_frame:000000000001B4BC                 db  41h ; A
.eh_frame:000000000001B4BD                 db  0Eh
.eh_frame:000000000001B4BE                 db  10h
.eh_frame:000000000001B4BF                 db  42h ; B
.eh_frame:000000000001B4C0                 db  0Eh
.eh_frame:000000000001B4C1                 db    8
.eh_frame:000000000001B4C2                 db  45h ; E
.eh_frame:000000000001B4C3                 db  0Bh
.eh_frame:000000000001B4C4                 db    0
.eh_frame:000000000001B4C5                 db    0
.eh_frame:000000000001B4C6                 db    0
.eh_frame:000000000001B4C7                 db    0
.eh_frame:000000000001B4C8                 db  10h
.eh_frame:000000000001B4C9                 db    0
.eh_frame:000000000001B4CA                 db    0
.eh_frame:000000000001B4CB                 db    0
.eh_frame:000000000001B4CC                 db 0ACh
.eh_frame:000000000001B4CD                 db  1Bh
.eh_frame:000000000001B4CE                 db    0
.eh_frame:000000000001B4CF                 db    0
.eh_frame:000000000001B4D0                 db  40h ; @
.eh_frame:000000000001B4D1                 db  4Bh ; K
.eh_frame:000000000001B4D2                 db 0FFh
.eh_frame:000000000001B4D3                 db 0FFh
.eh_frame:000000000001B4D4                 db    7
.eh_frame:000000000001B4D5                 db    0
.eh_frame:000000000001B4D6                 db    0
.eh_frame:000000000001B4D7                 db    0
.eh_frame:000000000001B4D8                 db    0
.eh_frame:000000000001B4D9                 db    0
.eh_frame:000000000001B4DA                 db    0
.eh_frame:000000000001B4DB                 db    0
.eh_frame:000000000001B4DC                 db  10h
.eh_frame:000000000001B4DD                 db    0
.eh_frame:000000000001B4DE                 db    0
.eh_frame:000000000001B4DF                 db    0
.eh_frame:000000000001B4E0                 db 0C0h
.eh_frame:000000000001B4E1                 db  1Bh
.eh_frame:000000000001B4E2                 db    0
.eh_frame:000000000001B4E3                 db    0
.eh_frame:000000000001B4E4                 db  3Ch ; <
.eh_frame:000000000001B4E5                 db  4Bh ; K
.eh_frame:000000000001B4E6                 db 0FFh
.eh_frame:000000000001B4E7                 db 0FFh
.eh_frame:000000000001B4E8                 db  14h
.eh_frame:000000000001B4E9                 db    0
.eh_frame:000000000001B4EA                 db    0
.eh_frame:000000000001B4EB                 db    0
.eh_frame:000000000001B4EC                 db    0
.eh_frame:000000000001B4ED                 db    0
.eh_frame:000000000001B4EE                 db    0
.eh_frame:000000000001B4EF                 db    0
.eh_frame:000000000001B4F0                 db  4Ch ; L
.eh_frame:000000000001B4F1                 db    0
.eh_frame:000000000001B4F2                 db    0
.eh_frame:000000000001B4F3                 db    0
.eh_frame:000000000001B4F4                 db 0D4h
.eh_frame:000000000001B4F5                 db  1Bh
.eh_frame:000000000001B4F6                 db    0
.eh_frame:000000000001B4F7                 db    0
.eh_frame:000000000001B4F8                 db  48h ; H
.eh_frame:000000000001B4F9                 db  4Bh ; K
.eh_frame:000000000001B4FA                 db 0FFh
.eh_frame:000000000001B4FB                 db 0FFh
.eh_frame:000000000001B4FC                 db 0A9h
.eh_frame:000000000001B4FD                 db    2
.eh_frame:000000000001B4FE                 db    0
.eh_frame:000000000001B4FF                 db    0
.eh_frame:000000000001B500                 db    0
.eh_frame:000000000001B501                 db  45h ; E
.eh_frame:000000000001B502                 db  0Eh
.eh_frame:000000000001B503                 db  10h
.eh_frame:000000000001B504                 db  8Eh
.eh_frame:000000000001B505                 db    2
.eh_frame:000000000001B506                 db  45h ; E
.eh_frame:000000000001B507                 db  0Eh
.eh_frame:000000000001B508                 db  18h
.eh_frame:000000000001B509                 db  8Dh
.eh_frame:000000000001B50A                 db    3
.eh_frame:000000000001B50B                 db  45h ; E
.eh_frame:000000000001B50C                 db  0Eh
.eh_frame:000000000001B50D                 db  20h
.eh_frame:000000000001B50E                 db  8Ch
.eh_frame:000000000001B50F                 db    4
.eh_frame:000000000001B510                 db  44h ; D
.eh_frame:000000000001B511                 db  0Eh
.eh_frame:000000000001B512                 db  28h ; (
.eh_frame:000000000001B513                 db  86h
.eh_frame:000000000001B514                 db    5
.eh_frame:000000000001B515                 db  44h ; D
.eh_frame:000000000001B516                 db  0Eh
.eh_frame:000000000001B517                 db  30h ; 0
.eh_frame:000000000001B518                 db  83h
.eh_frame:000000000001B519                 db    6
.eh_frame:000000000001B51A                 db    2
.eh_frame:000000000001B51B                 db  60h ; `
.eh_frame:000000000001B51C                 db  0Ah
.eh_frame:000000000001B51D                 db  0Eh
.eh_frame:000000000001B51E                 db  28h ; (
.eh_frame:000000000001B51F                 db  44h ; D
.eh_frame:000000000001B520                 db  0Eh
.eh_frame:000000000001B521                 db  20h
.eh_frame:000000000001B522                 db  42h ; B
.eh_frame:000000000001B523                 db  0Eh
.eh_frame:000000000001B524                 db  18h
.eh_frame:000000000001B525                 db  42h ; B
.eh_frame:000000000001B526                 db  0Eh
.eh_frame:000000000001B527                 db  10h
.eh_frame:000000000001B528                 db  42h ; B
.eh_frame:000000000001B529                 db  0Eh
.eh_frame:000000000001B52A                 db    8
.eh_frame:000000000001B52B                 db  47h ; G
.eh_frame:000000000001B52C                 db  0Bh
.eh_frame:000000000001B52D                 db    2
.eh_frame:000000000001B52E                 db 0A0h
.eh_frame:000000000001B52F                 db  0Ah
.eh_frame:000000000001B530                 db  0Eh
.eh_frame:000000000001B531                 db  28h ; (
.eh_frame:000000000001B532                 db  44h ; D
.eh_frame:000000000001B533                 db  0Eh
.eh_frame:000000000001B534                 db  20h
.eh_frame:000000000001B535                 db  42h ; B
.eh_frame:000000000001B536                 db  0Eh
.eh_frame:000000000001B537                 db  18h
.eh_frame:000000000001B538                 db  42h ; B
.eh_frame:000000000001B539                 db  0Eh
.eh_frame:000000000001B53A                 db  10h
.eh_frame:000000000001B53B                 db  42h ; B
.eh_frame:000000000001B53C                 db  0Eh
.eh_frame:000000000001B53D                 db    8
.eh_frame:000000000001B53E                 db  46h ; F
.eh_frame:000000000001B53F                 db  0Bh
.eh_frame:000000000001B540                 db  30h ; 0
.eh_frame:000000000001B541                 db    0
.eh_frame:000000000001B542                 db    0
.eh_frame:000000000001B543                 db    0
.eh_frame:000000000001B544                 db  24h ; $
.eh_frame:000000000001B545                 db  1Ch
.eh_frame:000000000001B546                 db    0
.eh_frame:000000000001B547                 db    0
.eh_frame:000000000001B548                 db 0A8h
.eh_frame:000000000001B549                 db  4Dh ; M
.eh_frame:000000000001B54A                 db 0FFh
.eh_frame:000000000001B54B                 db 0FFh
.eh_frame:000000000001B54C                 db  53h ; S
.eh_frame:000000000001B54D                 db    1
.eh_frame:000000000001B54E                 db    0
.eh_frame:000000000001B54F                 db    0
.eh_frame:000000000001B550                 db    0
.eh_frame:000000000001B551                 db  42h ; B
.eh_frame:000000000001B552                 db  0Eh
.eh_frame:000000000001B553                 db  10h
.eh_frame:000000000001B554                 db  8Ch
.eh_frame:000000000001B555                 db    2
.eh_frame:000000000001B556                 db  41h ; A
.eh_frame:000000000001B557                 db  0Eh
.eh_frame:000000000001B558                 db  18h
.eh_frame:000000000001B559                 db  86h
.eh_frame:000000000001B55A                 db    3
.eh_frame:000000000001B55B                 db  41h ; A
.eh_frame:000000000001B55C                 db  0Eh
.eh_frame:000000000001B55D                 db  20h
.eh_frame:000000000001B55E                 db  83h
.eh_frame:000000000001B55F                 db    4
.eh_frame:000000000001B560                 db  44h ; D
.eh_frame:000000000001B561                 db  0Eh
.eh_frame:000000000001B562                 db  30h ; 0
.eh_frame:000000000001B563                 db    2
.eh_frame:000000000001B564                 db  65h ; e
.eh_frame:000000000001B565                 db  0Ah
.eh_frame:000000000001B566                 db  0Eh
.eh_frame:000000000001B567                 db  20h
.eh_frame:000000000001B568                 db  41h ; A
.eh_frame:000000000001B569                 db  0Eh
.eh_frame:000000000001B56A                 db  18h
.eh_frame:000000000001B56B                 db  41h ; A
.eh_frame:000000000001B56C                 db  0Eh
.eh_frame:000000000001B56D                 db  10h
.eh_frame:000000000001B56E                 db  42h ; B
.eh_frame:000000000001B56F                 db  0Eh
.eh_frame:000000000001B570                 db    8
.eh_frame:000000000001B571                 db  47h ; G
.eh_frame:000000000001B572                 db  0Bh
.eh_frame:000000000001B573                 db    0
.eh_frame:000000000001B574                 db  18h
.eh_frame:000000000001B575                 db    0
.eh_frame:000000000001B576                 db    0
.eh_frame:000000000001B577                 db    0
.eh_frame:000000000001B578                 db  58h ; X
.eh_frame:000000000001B579                 db  1Ch
.eh_frame:000000000001B57A                 db    0
.eh_frame:000000000001B57B                 db    0
.eh_frame:000000000001B57C                 db 0D4h
.eh_frame:000000000001B57D                 db  4Eh ; N
.eh_frame:000000000001B57E                 db 0FFh
.eh_frame:000000000001B57F                 db 0FFh
.eh_frame:000000000001B580                 db  75h ; u
.eh_frame:000000000001B581                 db    0
.eh_frame:000000000001B582                 db    0
.eh_frame:000000000001B583                 db    0
.eh_frame:000000000001B584                 db    0
.eh_frame:000000000001B585                 db  41h ; A
.eh_frame:000000000001B586                 db  0Eh
.eh_frame:000000000001B587                 db  10h
.eh_frame:000000000001B588                 db  83h
.eh_frame:000000000001B589                 db    2
.eh_frame:000000000001B58A                 db  6Eh ; n
.eh_frame:000000000001B58B                 db  0Ah
.eh_frame:000000000001B58C                 db  0Eh
.eh_frame:000000000001B58D                 db    8
.eh_frame:000000000001B58E                 db  41h ; A
.eh_frame:000000000001B58F                 db  0Bh
.eh_frame:000000000001B590                 db  4Ch ; L
.eh_frame:000000000001B591                 db    0
.eh_frame:000000000001B592                 db    0
.eh_frame:000000000001B593                 db    0
.eh_frame:000000000001B594                 db  74h ; t
.eh_frame:000000000001B595                 db  1Ch
.eh_frame:000000000001B596                 db    0
.eh_frame:000000000001B597                 db    0
.eh_frame:000000000001B598                 db  38h ; 8
.eh_frame:000000000001B599                 db  4Fh ; O
.eh_frame:000000000001B59A                 db 0FFh
.eh_frame:000000000001B59B                 db 0FFh
.eh_frame:000000000001B59C                 db  8Ch
.eh_frame:000000000001B59D                 db    1
.eh_frame:000000000001B59E                 db    0
.eh_frame:000000000001B59F                 db    0
.eh_frame:000000000001B5A0                 db    0
.eh_frame:000000000001B5A1                 db  42h ; B
.eh_frame:000000000001B5A2                 db  0Eh
.eh_frame:000000000001B5A3                 db  10h
.eh_frame:000000000001B5A4                 db  8Fh
.eh_frame:000000000001B5A5                 db    2
.eh_frame:000000000001B5A6                 db  42h ; B
.eh_frame:000000000001B5A7                 db  0Eh
.eh_frame:000000000001B5A8                 db  18h
.eh_frame:000000000001B5A9                 db  8Eh
.eh_frame:000000000001B5AA                 db    3
.eh_frame:000000000001B5AB                 db  44h ; D
.eh_frame:000000000001B5AC                 db  0Eh
.eh_frame:000000000001B5AD                 db  20h
.eh_frame:000000000001B5AE                 db  8Dh
.eh_frame:000000000001B5AF                 db    4
.eh_frame:000000000001B5B0                 db  42h ; B
.eh_frame:000000000001B5B1                 db  0Eh
.eh_frame:000000000001B5B2                 db  28h ; (
.eh_frame:000000000001B5B3                 db  8Ch
.eh_frame:000000000001B5B4                 db    5
.eh_frame:000000000001B5B5                 db  44h ; D
.eh_frame:000000000001B5B6                 db  0Eh
.eh_frame:000000000001B5B7                 db  30h ; 0
.eh_frame:000000000001B5B8                 db  86h
.eh_frame:000000000001B5B9                 db    6
.eh_frame:000000000001B5BA                 db  41h ; A
.eh_frame:000000000001B5BB                 db  0Eh
.eh_frame:000000000001B5BC                 db  38h ; 8
.eh_frame:000000000001B5BD                 db  83h
.eh_frame:000000000001B5BE                 db    7
.eh_frame:000000000001B5BF                 db  4Ah ; J
.eh_frame:000000000001B5C0                 db  0Eh
.eh_frame:000000000001B5C1                 db  70h ; p
.eh_frame:000000000001B5C2                 db    2
.eh_frame:000000000001B5C3                 db 0DDh
.eh_frame:000000000001B5C4                 db  0Ah
.eh_frame:000000000001B5C5                 db  0Eh
.eh_frame:000000000001B5C6                 db  38h ; 8
.eh_frame:000000000001B5C7                 db  41h ; A
.eh_frame:000000000001B5C8                 db  0Eh
.eh_frame:000000000001B5C9                 db  30h ; 0
.eh_frame:000000000001B5CA                 db  41h ; A
.eh_frame:000000000001B5CB                 db  0Eh
.eh_frame:000000000001B5CC                 db  28h ; (
.eh_frame:000000000001B5CD                 db  42h ; B
.eh_frame:000000000001B5CE                 db  0Eh
.eh_frame:000000000001B5CF                 db  20h
.eh_frame:000000000001B5D0                 db  42h ; B
.eh_frame:000000000001B5D1                 db  0Eh
.eh_frame:000000000001B5D2                 db  18h
.eh_frame:000000000001B5D3                 db  42h ; B
.eh_frame:000000000001B5D4                 db  0Eh
.eh_frame:000000000001B5D5                 db  10h
.eh_frame:000000000001B5D6                 db  42h ; B
.eh_frame:000000000001B5D7                 db  0Eh
.eh_frame:000000000001B5D8                 db    8
.eh_frame:000000000001B5D9                 db  48h ; H
.eh_frame:000000000001B5DA                 db  0Bh
.eh_frame:000000000001B5DB                 db    0
.eh_frame:000000000001B5DC                 db    0
.eh_frame:000000000001B5DD                 db    0
.eh_frame:000000000001B5DE                 db    0
.eh_frame:000000000001B5DF                 db    0
.eh_frame:000000000001B5E0                 db  20h
.eh_frame:000000000001B5E1                 db    0
.eh_frame:000000000001B5E2                 db    0
.eh_frame:000000000001B5E3                 db    0
.eh_frame:000000000001B5E4                 db 0C4h
.eh_frame:000000000001B5E5                 db  1Ch
.eh_frame:000000000001B5E6                 db    0
.eh_frame:000000000001B5E7                 db    0
.eh_frame:000000000001B5E8                 db  78h ; x
.eh_frame:000000000001B5E9                 db  50h ; P
.eh_frame:000000000001B5EA                 db 0FFh
.eh_frame:000000000001B5EB                 db 0FFh
.eh_frame:000000000001B5EC                 db  7Ch ; |
.eh_frame:000000000001B5ED                 db    0
.eh_frame:000000000001B5EE                 db    0
.eh_frame:000000000001B5EF                 db    0
.eh_frame:000000000001B5F0                 db    0
.eh_frame:000000000001B5F1                 db  41h ; A
.eh_frame:000000000001B5F2                 db  0Eh
.eh_frame:000000000001B5F3                 db  10h
.eh_frame:000000000001B5F4                 db  83h
.eh_frame:000000000001B5F5                 db    2
.eh_frame:000000000001B5F6                 db  4Fh ; O
.eh_frame:000000000001B5F7                 db  0Eh
.eh_frame:000000000001B5F8                 db 0B0h
.eh_frame:000000000001B5F9                 db    1
.eh_frame:000000000001B5FA                 db    2
.eh_frame:000000000001B5FB                 db  65h ; e
.eh_frame:000000000001B5FC                 db  0Ah
.eh_frame:000000000001B5FD                 db  0Eh
.eh_frame:000000000001B5FE                 db  10h
.eh_frame:000000000001B5FF                 db  41h ; A
.eh_frame:000000000001B600                 db  0Eh
.eh_frame:000000000001B601                 db    8
.eh_frame:000000000001B602                 db  41h ; A
.eh_frame:000000000001B603                 db  0Bh
.eh_frame:000000000001B604                 db  10h
.eh_frame:000000000001B605                 db    0
.eh_frame:000000000001B606                 db    0
.eh_frame:000000000001B607                 db    0
.eh_frame:000000000001B608                 db 0E8h
.eh_frame:000000000001B609                 db  1Ch
.eh_frame:000000000001B60A                 db    0
.eh_frame:000000000001B60B                 db    0
.eh_frame:000000000001B60C                 db 0D4h
.eh_frame:000000000001B60D                 db  50h ; P
.eh_frame:000000000001B60E                 db 0FFh
.eh_frame:000000000001B60F                 db 0FFh
.eh_frame:000000000001B610                 db  0Ah
.eh_frame:000000000001B611                 db    0
.eh_frame:000000000001B612                 db    0
.eh_frame:000000000001B613                 db    0
.eh_frame:000000000001B614                 db    0
.eh_frame:000000000001B615                 db    0
.eh_frame:000000000001B616                 db    0
.eh_frame:000000000001B617                 db    0
.eh_frame:000000000001B618                 db  10h
.eh_frame:000000000001B619                 db    0
.eh_frame:000000000001B61A                 db    0
.eh_frame:000000000001B61B                 db    0
.eh_frame:000000000001B61C                 db 0FCh
.eh_frame:000000000001B61D                 db  1Ch
.eh_frame:000000000001B61E                 db    0
.eh_frame:000000000001B61F                 db    0
.eh_frame:000000000001B620                 db 0D0h
.eh_frame:000000000001B621                 db  50h ; P
.eh_frame:000000000001B622                 db 0FFh
.eh_frame:000000000001B623                 db 0FFh
.eh_frame:000000000001B624                 db  16h
.eh_frame:000000000001B625                 db    0
.eh_frame:000000000001B626                 db    0
.eh_frame:000000000001B627                 db    0
.eh_frame:000000000001B628                 db    0
.eh_frame:000000000001B629                 db    0
.eh_frame:000000000001B62A                 db    0
.eh_frame:000000000001B62B                 db    0
.eh_frame:000000000001B62C                 db  48h ; H
.eh_frame:000000000001B62D                 db    0
.eh_frame:000000000001B62E                 db    0
.eh_frame:000000000001B62F                 db    0
.eh_frame:000000000001B630                 db  10h
.eh_frame:000000000001B631                 db  1Dh
.eh_frame:000000000001B632                 db    0
.eh_frame:000000000001B633                 db    0
.eh_frame:000000000001B634                 db 0DCh
.eh_frame:000000000001B635                 db  50h ; P
.eh_frame:000000000001B636                 db 0FFh
.eh_frame:000000000001B637                 db 0FFh
.eh_frame:000000000001B638                 db  74h ; t
.eh_frame:000000000001B639                 db    1
.eh_frame:000000000001B63A                 db    0
.eh_frame:000000000001B63B                 db    0
.eh_frame:000000000001B63C                 db    0
.eh_frame:000000000001B63D                 db  42h ; B
.eh_frame:000000000001B63E                 db  0Eh
.eh_frame:000000000001B63F                 db  10h
.eh_frame:000000000001B640                 db  8Fh
.eh_frame:000000000001B641                 db    2
.eh_frame:000000000001B642                 db  42h ; B
.eh_frame:000000000001B643                 db  0Eh
.eh_frame:000000000001B644                 db  18h
.eh_frame:000000000001B645                 db  8Eh
.eh_frame:000000000001B646                 db    3
.eh_frame:000000000001B647                 db  45h ; E
.eh_frame:000000000001B648                 db  0Eh
.eh_frame:000000000001B649                 db  20h
.eh_frame:000000000001B64A                 db  8Dh
.eh_frame:000000000001B64B                 db    4
.eh_frame:000000000001B64C                 db  42h ; B
.eh_frame:000000000001B64D                 db  0Eh
.eh_frame:000000000001B64E                 db  28h ; (
.eh_frame:000000000001B64F                 db  8Ch
.eh_frame:000000000001B650                 db    5
.eh_frame:000000000001B651                 db  44h ; D
.eh_frame:000000000001B652                 db  0Eh
.eh_frame:000000000001B653                 db  30h ; 0
.eh_frame:000000000001B654                 db  86h
.eh_frame:000000000001B655                 db    6
.eh_frame:000000000001B656                 db  41h ; A
.eh_frame:000000000001B657                 db  0Eh
.eh_frame:000000000001B658                 db  38h ; 8
.eh_frame:000000000001B659                 db  83h
.eh_frame:000000000001B65A                 db    7
.eh_frame:000000000001B65B                 db  46h ; F
.eh_frame:000000000001B65C                 db  0Eh
.eh_frame:000000000001B65D                 db  70h ; p
.eh_frame:000000000001B65E                 db    3
.eh_frame:000000000001B65F                 db  31h ; 1
.eh_frame:000000000001B660                 db    1
.eh_frame:000000000001B661                 db  0Ah
.eh_frame:000000000001B662                 db  0Eh
.eh_frame:000000000001B663                 db  38h ; 8
.eh_frame:000000000001B664                 db  43h ; C
.eh_frame:000000000001B665                 db  0Eh
.eh_frame:000000000001B666                 db  30h ; 0
.eh_frame:000000000001B667                 db  41h ; A
.eh_frame:000000000001B668                 db  0Eh
.eh_frame:000000000001B669                 db  28h ; (
.eh_frame:000000000001B66A                 db  42h ; B
.eh_frame:000000000001B66B                 db  0Eh
.eh_frame:000000000001B66C                 db  20h
.eh_frame:000000000001B66D                 db  42h ; B
.eh_frame:000000000001B66E                 db  0Eh
.eh_frame:000000000001B66F                 db  18h
.eh_frame:000000000001B670                 db  42h ; B
.eh_frame:000000000001B671                 db  0Eh
.eh_frame:000000000001B672                 db  10h
.eh_frame:000000000001B673                 db  42h ; B
.eh_frame:000000000001B674                 db  0Eh
.eh_frame:000000000001B675                 db    8
.eh_frame:000000000001B676                 db  41h ; A
.eh_frame:000000000001B677                 db  0Bh
.eh_frame:000000000001B678                 db  20h
.eh_frame:000000000001B679                 db    0
.eh_frame:000000000001B67A                 db    0
.eh_frame:000000000001B67B                 db    0
.eh_frame:000000000001B67C                 db  5Ch ; \
.eh_frame:000000000001B67D                 db  1Dh
.eh_frame:000000000001B67E                 db    0
.eh_frame:000000000001B67F                 db    0
.eh_frame:000000000001B680                 db  10h
.eh_frame:000000000001B681                 db  52h ; R
.eh_frame:000000000001B682                 db 0FFh
.eh_frame:000000000001B683                 db 0FFh
.eh_frame:000000000001B684                 db  86h
.eh_frame:000000000001B685                 db    0
.eh_frame:000000000001B686                 db    0
.eh_frame:000000000001B687                 db    0
.eh_frame:000000000001B688                 db    0
.eh_frame:000000000001B689                 db  44h ; D
.eh_frame:000000000001B68A                 db  0Eh
.eh_frame:000000000001B68B                 db  20h
.eh_frame:000000000001B68C                 db    2
.eh_frame:000000000001B68D                 db  49h ; I
.eh_frame:000000000001B68E                 db  0Ah
.eh_frame:000000000001B68F                 db  0Eh
.eh_frame:000000000001B690                 db    8
.eh_frame:000000000001B691                 db  43h ; C
.eh_frame:000000000001B692                 db  0Bh
.eh_frame:000000000001B693                 db  55h ; U
.eh_frame:000000000001B694                 db  0Ah
.eh_frame:000000000001B695                 db  0Eh
.eh_frame:000000000001B696                 db    8
.eh_frame:000000000001B697                 db  4Bh ; K
.eh_frame:000000000001B698                 db  0Bh
.eh_frame:000000000001B699                 db  55h ; U
.eh_frame:000000000001B69A                 db  0Eh
.eh_frame:000000000001B69B                 db    8
.eh_frame:000000000001B69C                 db  10h
.eh_frame:000000000001B69D                 db    0
.eh_frame:000000000001B69E                 db    0
.eh_frame:000000000001B69F                 db    0
.eh_frame:000000000001B6A0                 db  80h
.eh_frame:000000000001B6A1                 db  1Dh
.eh_frame:000000000001B6A2                 db    0
.eh_frame:000000000001B6A3                 db    0
.eh_frame:000000000001B6A4                 db  7Ch ; |
.eh_frame:000000000001B6A5                 db  52h ; R
.eh_frame:000000000001B6A6                 db 0FFh
.eh_frame:000000000001B6A7                 db 0FFh
.eh_frame:000000000001B6A8                 db  0Bh
.eh_frame:000000000001B6A9                 db    0
.eh_frame:000000000001B6AA                 db    0
.eh_frame:000000000001B6AB                 db    0
.eh_frame:000000000001B6AC                 db    0
.eh_frame:000000000001B6AD                 db    0
.eh_frame:000000000001B6AE                 db    0
.eh_frame:000000000001B6AF                 db    0
.eh_frame:000000000001B6B0                 db  14h
.eh_frame:000000000001B6B1                 db    0
.eh_frame:000000000001B6B2                 db    0
.eh_frame:000000000001B6B3                 db    0
.eh_frame:000000000001B6B4                 db  94h
.eh_frame:000000000001B6B5                 db  1Dh
.eh_frame:000000000001B6B6                 db    0
.eh_frame:000000000001B6B7                 db    0
.eh_frame:000000000001B6B8                 db  78h ; x
.eh_frame:000000000001B6B9                 db  52h ; R
.eh_frame:000000000001B6BA                 db 0FFh
.eh_frame:000000000001B6BB                 db 0FFh
.eh_frame:000000000001B6BC                 db  0Bh
.eh_frame:000000000001B6BD                 db    0
.eh_frame:000000000001B6BE                 db    0
.eh_frame:000000000001B6BF                 db    0
.eh_frame:000000000001B6C0                 db    0
.eh_frame:000000000001B6C1                 db    0
.eh_frame:000000000001B6C2                 db    0
.eh_frame:000000000001B6C3                 db    0
.eh_frame:000000000001B6C4                 db    0
.eh_frame:000000000001B6C5                 db    0
.eh_frame:000000000001B6C6                 db    0
.eh_frame:000000000001B6C7                 db    0
.eh_frame:000000000001B6C8                 db  34h ; 4
.eh_frame:000000000001B6C9                 db    0
.eh_frame:000000000001B6CA                 db    0
.eh_frame:000000000001B6CB                 db    0
.eh_frame:000000000001B6CC                 db 0ACh
.eh_frame:000000000001B6CD                 db  1Dh
.eh_frame:000000000001B6CE                 db    0
.eh_frame:000000000001B6CF                 db    0
.eh_frame:000000000001B6D0                 db  70h ; p
.eh_frame:000000000001B6D1                 db  52h ; R
.eh_frame:000000000001B6D2                 db 0FFh
.eh_frame:000000000001B6D3                 db 0FFh
.eh_frame:000000000001B6D4                 db  3Fh ; ?
.eh_frame:000000000001B6D5                 db    0
.eh_frame:000000000001B6D6                 db    0
.eh_frame:000000000001B6D7                 db    0
.eh_frame:000000000001B6D8                 db    0
.eh_frame:000000000001B6D9                 db  42h ; B
.eh_frame:000000000001B6DA                 db  0Eh
.eh_frame:000000000001B6DB                 db  10h
.eh_frame:000000000001B6DC                 db  8Dh
.eh_frame:000000000001B6DD                 db    2
.eh_frame:000000000001B6DE                 db  42h ; B
.eh_frame:000000000001B6DF                 db  0Eh
.eh_frame:000000000001B6E0                 db  18h
.eh_frame:000000000001B6E1                 db  8Ch
.eh_frame:000000000001B6E2                 db    3
.eh_frame:000000000001B6E3                 db  41h ; A
.eh_frame:000000000001B6E4                 db  0Eh
.eh_frame:000000000001B6E5                 db  20h
.eh_frame:000000000001B6E6                 db  86h
.eh_frame:000000000001B6E7                 db    4
.eh_frame:000000000001B6E8                 db  41h ; A
.eh_frame:000000000001B6E9                 db  0Eh
.eh_frame:000000000001B6EA                 db  28h ; (
.eh_frame:000000000001B6EB                 db  83h
.eh_frame:000000000001B6EC                 db    5
.eh_frame:000000000001B6ED                 db  46h ; F
.eh_frame:000000000001B6EE                 db  0Eh
.eh_frame:000000000001B6EF                 db  30h ; 0
.eh_frame:000000000001B6F0                 db  6Ah ; j
.eh_frame:000000000001B6F1                 db  0Eh
.eh_frame:000000000001B6F2                 db  28h ; (
.eh_frame:000000000001B6F3                 db  43h ; C
.eh_frame:000000000001B6F4                 db  0Eh
.eh_frame:000000000001B6F5                 db  20h
.eh_frame:000000000001B6F6                 db  41h ; A
.eh_frame:000000000001B6F7                 db  0Eh
.eh_frame:000000000001B6F8                 db  18h
.eh_frame:000000000001B6F9                 db  42h ; B
.eh_frame:000000000001B6FA                 db  0Eh
.eh_frame:000000000001B6FB                 db  10h
.eh_frame:000000000001B6FC                 db  42h ; B
.eh_frame:000000000001B6FD                 db  0Eh
.eh_frame:000000000001B6FE                 db    8
.eh_frame:000000000001B6FF                 db    0
.eh_frame:000000000001B700                 db  10h
.eh_frame:000000000001B701                 db    0
.eh_frame:000000000001B702                 db    0
.eh_frame:000000000001B703                 db    0
.eh_frame:000000000001B704                 db 0E4h
.eh_frame:000000000001B705                 db  1Dh
.eh_frame:000000000001B706                 db    0
.eh_frame:000000000001B707                 db    0
.eh_frame:000000000001B708                 db  78h ; x
.eh_frame:000000000001B709                 db  52h ; R
.eh_frame:000000000001B70A                 db 0FFh
.eh_frame:000000000001B70B                 db 0FFh
.eh_frame:000000000001B70C                 db  0Ch
.eh_frame:000000000001B70D                 db    0
.eh_frame:000000000001B70E                 db    0
.eh_frame:000000000001B70F                 db    0
.eh_frame:000000000001B710                 db    0
.eh_frame:000000000001B711                 db    0
.eh_frame:000000000001B712                 db    0
.eh_frame:000000000001B713                 db    0
.eh_frame:000000000001B714                 db  10h
.eh_frame:000000000001B715                 db    0
.eh_frame:000000000001B716                 db    0
.eh_frame:000000000001B717                 db    0
.eh_frame:000000000001B718                 db 0F8h
.eh_frame:000000000001B719                 db  1Dh
.eh_frame:000000000001B71A                 db    0
.eh_frame:000000000001B71B                 db    0
.eh_frame:000000000001B71C                 db  74h ; t
.eh_frame:000000000001B71D                 db  52h ; R
.eh_frame:000000000001B71E                 db 0FFh
.eh_frame:000000000001B71F                 db 0FFh
.eh_frame:000000000001B720                 db  0Ah
.eh_frame:000000000001B721                 db    0
.eh_frame:000000000001B722                 db    0
.eh_frame:000000000001B723                 db    0
.eh_frame:000000000001B724                 db    0
.eh_frame:000000000001B725                 db    0
.eh_frame:000000000001B726                 db    0
.eh_frame:000000000001B727                 db    0
.eh_frame:000000000001B728                 db  4Ch ; L
.eh_frame:000000000001B729                 db    0
.eh_frame:000000000001B72A                 db    0
.eh_frame:000000000001B72B                 db    0
.eh_frame:000000000001B72C                 db  0Ch
.eh_frame:000000000001B72D                 db  1Eh
.eh_frame:000000000001B72E                 db    0
.eh_frame:000000000001B72F                 db    0
.eh_frame:000000000001B730                 db  70h ; p
.eh_frame:000000000001B731                 db  52h ; R
.eh_frame:000000000001B732                 db 0FFh
.eh_frame:000000000001B733                 db 0FFh
.eh_frame:000000000001B734                 db  7Eh ; ~
.eh_frame:000000000001B735                 db    7
.eh_frame:000000000001B736                 db    0
.eh_frame:000000000001B737                 db    0
.eh_frame:000000000001B738                 db    0
.eh_frame:000000000001B739                 db  42h ; B
.eh_frame:000000000001B73A                 db  0Eh
.eh_frame:000000000001B73B                 db  10h
.eh_frame:000000000001B73C                 db  8Fh
.eh_frame:000000000001B73D                 db    2
.eh_frame:000000000001B73E                 db  42h ; B
.eh_frame:000000000001B73F                 db  0Eh
.eh_frame:000000000001B740                 db  18h
.eh_frame:000000000001B741                 db  8Eh
.eh_frame:000000000001B742                 db    3
.eh_frame:000000000001B743                 db  42h ; B
.eh_frame:000000000001B744                 db  0Eh
.eh_frame:000000000001B745                 db  20h
.eh_frame:000000000001B746                 db  8Dh
.eh_frame:000000000001B747                 db    4
.eh_frame:000000000001B748                 db  42h ; B
.eh_frame:000000000001B749                 db  0Eh
.eh_frame:000000000001B74A                 db  28h ; (
.eh_frame:000000000001B74B                 db  8Ch
.eh_frame:000000000001B74C                 db    5
.eh_frame:000000000001B74D                 db  41h ; A
.eh_frame:000000000001B74E                 db  0Eh
.eh_frame:000000000001B74F                 db  30h ; 0
.eh_frame:000000000001B750                 db  86h
.eh_frame:000000000001B751                 db    6
.eh_frame:000000000001B752                 db  41h ; A
.eh_frame:000000000001B753                 db  0Eh
.eh_frame:000000000001B754                 db  38h ; 8
.eh_frame:000000000001B755                 db  83h
.eh_frame:000000000001B756                 db    7
.eh_frame:000000000001B757                 db  4Dh ; M
.eh_frame:000000000001B758                 db  0Eh
.eh_frame:000000000001B759                 db 0E0h
.eh_frame:000000000001B75A                 db    2
.eh_frame:000000000001B75B                 db    3
.eh_frame:000000000001B75C                 db  48h ; H
.eh_frame:000000000001B75D                 db    1
.eh_frame:000000000001B75E                 db  0Ah
.eh_frame:000000000001B75F                 db  0Eh
.eh_frame:000000000001B760                 db  38h ; 8
.eh_frame:000000000001B761                 db  41h ; A
.eh_frame:000000000001B762                 db  0Eh
.eh_frame:000000000001B763                 db  30h ; 0
.eh_frame:000000000001B764                 db  41h ; A
.eh_frame:000000000001B765                 db  0Eh
.eh_frame:000000000001B766                 db  28h ; (
.eh_frame:000000000001B767                 db  42h ; B
.eh_frame:000000000001B768                 db  0Eh
.eh_frame:000000000001B769                 db  20h
.eh_frame:000000000001B76A                 db  42h ; B
.eh_frame:000000000001B76B                 db  0Eh
.eh_frame:000000000001B76C                 db  18h
.eh_frame:000000000001B76D                 db  42h ; B
.eh_frame:000000000001B76E                 db  0Eh
.eh_frame:000000000001B76F                 db  10h
.eh_frame:000000000001B770                 db  42h ; B
.eh_frame:000000000001B771                 db  0Eh
.eh_frame:000000000001B772                 db    8
.eh_frame:000000000001B773                 db  47h ; G
.eh_frame:000000000001B774                 db  0Bh
.eh_frame:000000000001B775                 db    0
.eh_frame:000000000001B776                 db    0
.eh_frame:000000000001B777                 db    0
.eh_frame:000000000001B778                 db  14h
.eh_frame:000000000001B779                 db    0
.eh_frame:000000000001B77A                 db    0
.eh_frame:000000000001B77B                 db    0
.eh_frame:000000000001B77C                 db  5Ch ; \
.eh_frame:000000000001B77D                 db  1Eh
.eh_frame:000000000001B77E                 db    0
.eh_frame:000000000001B77F                 db    0
.eh_frame:000000000001B780                 db 0A0h
.eh_frame:000000000001B781                 db  59h ; Y
.eh_frame:000000000001B782                 db 0FFh
.eh_frame:000000000001B783                 db 0FFh
.eh_frame:000000000001B784                 db  16h
.eh_frame:000000000001B785                 db    0
.eh_frame:000000000001B786                 db    0
.eh_frame:000000000001B787                 db    0
.eh_frame:000000000001B788                 db    0
.eh_frame:000000000001B789                 db    0
.eh_frame:000000000001B78A                 db    0
.eh_frame:000000000001B78B                 db    0
.eh_frame:000000000001B78C                 db    0
.eh_frame:000000000001B78D                 db    0
.eh_frame:000000000001B78E                 db    0
.eh_frame:000000000001B78F                 db    0
.eh_frame:000000000001B790                 db  40h ; @
.eh_frame:000000000001B791                 db    0
.eh_frame:000000000001B792                 db    0
.eh_frame:000000000001B793                 db    0
.eh_frame:000000000001B794                 db  74h ; t
.eh_frame:000000000001B795                 db  1Eh
.eh_frame:000000000001B796                 db    0
.eh_frame:000000000001B797                 db    0
.eh_frame:000000000001B798                 db 0A8h
.eh_frame:000000000001B799                 db  59h ; Y
.eh_frame:000000000001B79A                 db 0FFh
.eh_frame:000000000001B79B                 db 0FFh
.eh_frame:000000000001B79C                 db 0D6h
.eh_frame:000000000001B79D                 db    0
.eh_frame:000000000001B79E                 db    0
.eh_frame:000000000001B79F                 db    0
.eh_frame:000000000001B7A0                 db    0
.eh_frame:000000000001B7A1                 db  41h ; A
.eh_frame:000000000001B7A2                 db  0Eh
.eh_frame:000000000001B7A3                 db  10h
.eh_frame:000000000001B7A4                 db  86h
.eh_frame:000000000001B7A5                 db    2
.eh_frame:000000000001B7A6                 db  41h ; A
.eh_frame:000000000001B7A7                 db  0Eh
.eh_frame:000000000001B7A8                 db  18h
.eh_frame:000000000001B7A9                 db  83h
.eh_frame:000000000001B7AA                 db    3
.eh_frame:000000000001B7AB                 db  47h ; G
.eh_frame:000000000001B7AC                 db  0Eh
.eh_frame:000000000001B7AD                 db  30h ; 0
.eh_frame:000000000001B7AE                 db  73h ; s
.eh_frame:000000000001B7AF                 db  0Ah
.eh_frame:000000000001B7B0                 db  0Eh
.eh_frame:000000000001B7B1                 db  18h
.eh_frame:000000000001B7B2                 db  41h ; A
.eh_frame:000000000001B7B3                 db  0Eh
.eh_frame:000000000001B7B4                 db  10h
.eh_frame:000000000001B7B5                 db  41h ; A
.eh_frame:000000000001B7B6                 db  0Eh
.eh_frame:000000000001B7B7                 db    8
.eh_frame:000000000001B7B8                 db  42h ; B
.eh_frame:000000000001B7B9                 db  0Bh
.eh_frame:000000000001B7BA                 db  72h ; r
.eh_frame:000000000001B7BB                 db  0Ah
.eh_frame:000000000001B7BC                 db  0Eh
.eh_frame:000000000001B7BD                 db  18h
.eh_frame:000000000001B7BE                 db  43h ; C
.eh_frame:000000000001B7BF                 db  0Eh
.eh_frame:000000000001B7C0                 db  10h
.eh_frame:000000000001B7C1                 db  41h ; A
.eh_frame:000000000001B7C2                 db  0Eh
.eh_frame:000000000001B7C3                 db    8
.eh_frame:000000000001B7C4                 db  4Ah ; J
.eh_frame:000000000001B7C5                 db  0Bh
.eh_frame:000000000001B7C6                 db  7Eh ; ~
.eh_frame:000000000001B7C7                 db  0Ah
.eh_frame:000000000001B7C8                 db  0Eh
.eh_frame:000000000001B7C9                 db  18h
.eh_frame:000000000001B7CA                 db  41h ; A
.eh_frame:000000000001B7CB                 db  0Eh
.eh_frame:000000000001B7CC                 db  10h
.eh_frame:000000000001B7CD                 db  41h ; A
.eh_frame:000000000001B7CE                 db  0Eh
.eh_frame:000000000001B7CF                 db    8
.eh_frame:000000000001B7D0                 db  48h ; H
.eh_frame:000000000001B7D1                 db  0Bh
.eh_frame:000000000001B7D2                 db    0
.eh_frame:000000000001B7D3                 db    0
.eh_frame:000000000001B7D4                 db  14h
.eh_frame:000000000001B7D5                 db    0
.eh_frame:000000000001B7D6                 db    0
.eh_frame:000000000001B7D7                 db    0
.eh_frame:000000000001B7D8                 db 0B8h
.eh_frame:000000000001B7D9                 db  1Eh
.eh_frame:000000000001B7DA                 db    0
.eh_frame:000000000001B7DB                 db    0
.eh_frame:000000000001B7DC                 db  44h ; D
.eh_frame:000000000001B7DD                 db  5Ah ; Z
.eh_frame:000000000001B7DE                 db 0FFh
.eh_frame:000000000001B7DF                 db 0FFh
.eh_frame:000000000001B7E0                 db 0A9h
.eh_frame:000000000001B7E1                 db    0
.eh_frame:000000000001B7E2                 db    0
.eh_frame:000000000001B7E3                 db    0
.eh_frame:000000000001B7E4                 db    0
.eh_frame:000000000001B7E5                 db    2
.eh_frame:000000000001B7E6                 db  94h
.eh_frame:000000000001B7E7                 db  0Eh
.eh_frame:000000000001B7E8                 db  10h
.eh_frame:000000000001B7E9                 db  54h ; T
.eh_frame:000000000001B7EA                 db  0Eh
.eh_frame:000000000001B7EB                 db    8
.eh_frame:000000000001B7EC                 db  10h
.eh_frame:000000000001B7ED                 db    0
.eh_frame:000000000001B7EE                 db    0
.eh_frame:000000000001B7EF                 db    0
.eh_frame:000000000001B7F0                 db 0D0h
.eh_frame:000000000001B7F1                 db  1Eh
.eh_frame:000000000001B7F2                 db    0
.eh_frame:000000000001B7F3                 db    0
.eh_frame:000000000001B7F4                 db 0DCh
.eh_frame:000000000001B7F5                 db  5Ah ; Z
.eh_frame:000000000001B7F6                 db 0FFh
.eh_frame:000000000001B7F7                 db 0FFh
.eh_frame:000000000001B7F8                 db  0Ah
.eh_frame:000000000001B7F9                 db    0
.eh_frame:000000000001B7FA                 db    0
.eh_frame:000000000001B7FB                 db    0
.eh_frame:000000000001B7FC                 db    0
.eh_frame:000000000001B7FD                 db    0
.eh_frame:000000000001B7FE                 db    0
.eh_frame:000000000001B7FF                 db    0
.eh_frame:000000000001B800                 db  44h ; D
.eh_frame:000000000001B801                 db    0
.eh_frame:000000000001B802                 db    0
.eh_frame:000000000001B803                 db    0
.eh_frame:000000000001B804                 db 0E4h
.eh_frame:000000000001B805                 db  1Eh
.eh_frame:000000000001B806                 db    0
.eh_frame:000000000001B807                 db    0
.eh_frame:000000000001B808                 db 0D8h
.eh_frame:000000000001B809                 db  5Ah ; Z
.eh_frame:000000000001B80A                 db 0FFh
.eh_frame:000000000001B80B                 db 0FFh
.eh_frame:000000000001B80C                 db  5Eh ; ^
.eh_frame:000000000001B80D                 db    4
.eh_frame:000000000001B80E                 db    0
.eh_frame:000000000001B80F                 db    0
.eh_frame:000000000001B810                 db    0
.eh_frame:000000000001B811                 db  42h ; B
.eh_frame:000000000001B812                 db  0Eh
.eh_frame:000000000001B813                 db  10h
.eh_frame:000000000001B814                 db  8Eh
.eh_frame:000000000001B815                 db    2
.eh_frame:000000000001B816                 db  42h ; B
.eh_frame:000000000001B817                 db  0Eh
.eh_frame:000000000001B818                 db  18h
.eh_frame:000000000001B819                 db  8Dh
.eh_frame:000000000001B81A                 db    3
.eh_frame:000000000001B81B                 db  42h ; B
.eh_frame:000000000001B81C                 db  0Eh
.eh_frame:000000000001B81D                 db  20h
.eh_frame:000000000001B81E                 db  8Ch
.eh_frame:000000000001B81F                 db    4
.eh_frame:000000000001B820                 db  41h ; A
.eh_frame:000000000001B821                 db  0Eh
.eh_frame:000000000001B822                 db  28h ; (
.eh_frame:000000000001B823                 db  86h
.eh_frame:000000000001B824                 db    5
.eh_frame:000000000001B825                 db  44h ; D
.eh_frame:000000000001B826                 db  0Eh
.eh_frame:000000000001B827                 db  30h ; 0
.eh_frame:000000000001B828                 db  83h
.eh_frame:000000000001B829                 db    6
.eh_frame:000000000001B82A                 db  49h ; I
.eh_frame:000000000001B82B                 db  0Eh
.eh_frame:000000000001B82C                 db 0C0h
.eh_frame:000000000001B82D                 db    2
.eh_frame:000000000001B82E                 db    3
.eh_frame:000000000001B82F                 db  23h ; #
.eh_frame:000000000001B830                 db    3
.eh_frame:000000000001B831                 db  0Ah
.eh_frame:000000000001B832                 db  0Eh
.eh_frame:000000000001B833                 db  30h ; 0
.eh_frame:000000000001B834                 db  41h ; A
.eh_frame:000000000001B835                 db  0Eh
.eh_frame:000000000001B836                 db  28h ; (
.eh_frame:000000000001B837                 db  41h ; A
.eh_frame:000000000001B838                 db  0Eh
.eh_frame:000000000001B839                 db  20h
.eh_frame:000000000001B83A                 db  42h ; B
.eh_frame:000000000001B83B                 db  0Eh
.eh_frame:000000000001B83C                 db  18h
.eh_frame:000000000001B83D                 db  42h ; B
.eh_frame:000000000001B83E                 db  0Eh
.eh_frame:000000000001B83F                 db  10h
.eh_frame:000000000001B840                 db  42h ; B
.eh_frame:000000000001B841                 db  0Eh
.eh_frame:000000000001B842                 db    8
.eh_frame:000000000001B843                 db  41h ; A
.eh_frame:000000000001B844                 db  0Bh
.eh_frame:000000000001B845                 db    0
.eh_frame:000000000001B846                 db    0
.eh_frame:000000000001B847                 db    0
.eh_frame:000000000001B848                 db  10h
.eh_frame:000000000001B849                 db    0
.eh_frame:000000000001B84A                 db    0
.eh_frame:000000000001B84B                 db    0
.eh_frame:000000000001B84C                 db  2Ch ; ,
.eh_frame:000000000001B84D                 db  1Fh
.eh_frame:000000000001B84E                 db    0
.eh_frame:000000000001B84F                 db    0
.eh_frame:000000000001B850                 db 0F0h
.eh_frame:000000000001B851                 db  5Eh ; ^
.eh_frame:000000000001B852                 db 0FFh
.eh_frame:000000000001B853                 db 0FFh
.eh_frame:000000000001B854                 db  10h
.eh_frame:000000000001B855                 db    0
.eh_frame:000000000001B856                 db    0
.eh_frame:000000000001B857                 db    0
.eh_frame:000000000001B858                 db    0
.eh_frame:000000000001B859                 db    0
.eh_frame:000000000001B85A                 db    0
.eh_frame:000000000001B85B                 db    0
.eh_frame:000000000001B85C                 db  38h ; 8
.eh_frame:000000000001B85D                 db    0
.eh_frame:000000000001B85E                 db    0
.eh_frame:000000000001B85F                 db    0
.eh_frame:000000000001B860                 db  40h ; @
.eh_frame:000000000001B861                 db  1Fh
.eh_frame:000000000001B862                 db    0
.eh_frame:000000000001B863                 db    0
.eh_frame:000000000001B864                 db 0ECh
.eh_frame:000000000001B865                 db  5Eh ; ^
.eh_frame:000000000001B866                 db 0FFh
.eh_frame:000000000001B867                 db 0FFh
.eh_frame:000000000001B868                 db  5Eh ; ^
.eh_frame:000000000001B869                 db    2
.eh_frame:000000000001B86A                 db    0
.eh_frame:000000000001B86B                 db    0
.eh_frame:000000000001B86C                 db    0
.eh_frame:000000000001B86D                 db  42h ; B
.eh_frame:000000000001B86E                 db  0Eh
.eh_frame:000000000001B86F                 db  10h
.eh_frame:000000000001B870                 db  8Ch
.eh_frame:000000000001B871                 db    2
.eh_frame:000000000001B872                 db  41h ; A
.eh_frame:000000000001B873                 db  0Eh
.eh_frame:000000000001B874                 db  18h
.eh_frame:000000000001B875                 db  86h
.eh_frame:000000000001B876                 db    3
.eh_frame:000000000001B877                 db  44h ; D
.eh_frame:000000000001B878                 db  0Eh
.eh_frame:000000000001B879                 db  20h
.eh_frame:000000000001B87A                 db  83h
.eh_frame:000000000001B87B                 db    4
.eh_frame:000000000001B87C                 db  47h ; G
.eh_frame:000000000001B87D                 db  0Eh
.eh_frame:000000000001B87E                 db 0F0h
.eh_frame:000000000001B87F                 db    1
.eh_frame:000000000001B880                 db    3
.eh_frame:000000000001B881                 db  0Ah
.eh_frame:000000000001B882                 db    1
.eh_frame:000000000001B883                 db  0Ah
.eh_frame:000000000001B884                 db  0Eh
.eh_frame:000000000001B885                 db  20h
.eh_frame:000000000001B886                 db  41h ; A
.eh_frame:000000000001B887                 db  0Eh
.eh_frame:000000000001B888                 db  18h
.eh_frame:000000000001B889                 db  41h ; A
.eh_frame:000000000001B88A                 db  0Eh
.eh_frame:000000000001B88B                 db  10h
.eh_frame:000000000001B88C                 db  42h ; B
.eh_frame:000000000001B88D                 db  0Eh
.eh_frame:000000000001B88E                 db    8
.eh_frame:000000000001B88F                 db  44h ; D
.eh_frame:000000000001B890                 db  0Bh
.eh_frame:000000000001B891                 db    0
.eh_frame:000000000001B892                 db    0
.eh_frame:000000000001B893                 db    0
.eh_frame:000000000001B894                 db    0
.eh_frame:000000000001B895                 db    0
.eh_frame:000000000001B896                 db    0
.eh_frame:000000000001B897                 db    0
.eh_frame:000000000001B898                 db  10h
.eh_frame:000000000001B899                 db    1
.eh_frame:000000000001B89A                 db    0
.eh_frame:000000000001B89B                 db    0
.eh_frame:000000000001B89C                 db  7Ch ; |
.eh_frame:000000000001B89D                 db  1Fh
.eh_frame:000000000001B89E                 db    0
.eh_frame:000000000001B89F                 db    0
.eh_frame:000000000001B8A0                 db  10h
.eh_frame:000000000001B8A1                 db  61h ; a
.eh_frame:000000000001B8A2                 db 0FFh
.eh_frame:000000000001B8A3                 db 0FFh
.eh_frame:000000000001B8A4                 db  17h
.eh_frame:000000000001B8A5                 db    4
.eh_frame:000000000001B8A6                 db    0
.eh_frame:000000000001B8A7                 db    0
.eh_frame:000000000001B8A8                 db    0
.eh_frame:000000000001B8A9                 db  42h ; B
.eh_frame:000000000001B8AA                 db  0Eh
.eh_frame:000000000001B8AB                 db  10h
.eh_frame:000000000001B8AC                 db  8Fh
.eh_frame:000000000001B8AD                 db    2
.eh_frame:000000000001B8AE                 db  42h ; B
.eh_frame:000000000001B8AF                 db  0Eh
.eh_frame:000000000001B8B0                 db  18h
.eh_frame:000000000001B8B1                 db  8Eh
.eh_frame:000000000001B8B2                 db    3
.eh_frame:000000000001B8B3                 db  42h ; B
.eh_frame:000000000001B8B4                 db  0Eh
.eh_frame:000000000001B8B5                 db  20h
.eh_frame:000000000001B8B6                 db  8Dh
.eh_frame:000000000001B8B7                 db    4
.eh_frame:000000000001B8B8                 db  42h ; B
.eh_frame:000000000001B8B9                 db  0Eh
.eh_frame:000000000001B8BA                 db  28h ; (
.eh_frame:000000000001B8BB                 db  8Ch
.eh_frame:000000000001B8BC                 db    5
.eh_frame:000000000001B8BD                 db  44h ; D
.eh_frame:000000000001B8BE                 db  0Eh
.eh_frame:000000000001B8BF                 db  30h ; 0
.eh_frame:000000000001B8C0                 db  86h
.eh_frame:000000000001B8C1                 db    6
.eh_frame:000000000001B8C2                 db  41h ; A
.eh_frame:000000000001B8C3                 db  0Eh
.eh_frame:000000000001B8C4                 db  38h ; 8
.eh_frame:000000000001B8C5                 db  83h
.eh_frame:000000000001B8C6                 db    7
.eh_frame:000000000001B8C7                 db  4Ah ; J
.eh_frame:000000000001B8C8                 db  0Eh
.eh_frame:000000000001B8C9                 db  60h ; `
.eh_frame:000000000001B8CA                 db    2
.eh_frame:000000000001B8CB                 db 0DDh
.eh_frame:000000000001B8CC                 db  0Eh
.eh_frame:000000000001B8CD                 db  68h ; h
.eh_frame:000000000001B8CE                 db  57h ; W
.eh_frame:000000000001B8CF                 db  0Eh
.eh_frame:000000000001B8D0                 db  70h ; p
.eh_frame:000000000001B8D1                 db  42h ; B
.eh_frame:000000000001B8D2                 db  0Eh
.eh_frame:000000000001B8D3                 db  78h ; x
.eh_frame:000000000001B8D4                 db  42h ; B
.eh_frame:000000000001B8D5                 db  0Eh
.eh_frame:000000000001B8D6                 db  80h
.eh_frame:000000000001B8D7                 db    1
.eh_frame:000000000001B8D8                 db  42h ; B
.eh_frame:000000000001B8D9                 db  0Eh
.eh_frame:000000000001B8DA                 db  88h
.eh_frame:000000000001B8DB                 db    1
.eh_frame:000000000001B8DC                 db  42h ; B
.eh_frame:000000000001B8DD                 db  0Eh
.eh_frame:000000000001B8DE                 db  90h
.eh_frame:000000000001B8DF                 db    1
.eh_frame:000000000001B8E0                 db  53h ; S
.eh_frame:000000000001B8E1                 db  0Eh
.eh_frame:000000000001B8E2                 db  60h ; `
.eh_frame:000000000001B8E3                 db  44h ; D
.eh_frame:000000000001B8E4                 db  0Ah
.eh_frame:000000000001B8E5                 db  0Eh
.eh_frame:000000000001B8E6                 db  38h ; 8
.eh_frame:000000000001B8E7                 db  41h ; A
.eh_frame:000000000001B8E8                 db  0Eh
.eh_frame:000000000001B8E9                 db  30h ; 0
.eh_frame:000000000001B8EA                 db  41h ; A
.eh_frame:000000000001B8EB                 db  0Eh
.eh_frame:000000000001B8EC                 db  28h ; (
.eh_frame:000000000001B8ED                 db  42h ; B
.eh_frame:000000000001B8EE                 db  0Eh
.eh_frame:000000000001B8EF                 db  20h
.eh_frame:000000000001B8F0                 db  42h ; B
.eh_frame:000000000001B8F1                 db  0Eh
.eh_frame:000000000001B8F2                 db  18h
.eh_frame:000000000001B8F3                 db  42h ; B
.eh_frame:000000000001B8F4                 db  0Eh
.eh_frame:000000000001B8F5                 db  10h
.eh_frame:000000000001B8F6                 db  42h ; B
.eh_frame:000000000001B8F7                 db  0Eh
.eh_frame:000000000001B8F8                 db    8
.eh_frame:000000000001B8F9                 db  44h ; D
.eh_frame:000000000001B8FA                 db  0Bh
.eh_frame:000000000001B8FB                 db    2
.eh_frame:000000000001B8FC                 db  78h ; x
.eh_frame:000000000001B8FD                 db  0Ah
.eh_frame:000000000001B8FE                 db  0Eh
.eh_frame:000000000001B8FF                 db  68h ; h
.eh_frame:000000000001B900                 db  48h ; H
.eh_frame:000000000001B901                 db  0Bh
.eh_frame:000000000001B902                 db  5Ah ; Z
.eh_frame:000000000001B903                 db  0Ah
.eh_frame:000000000001B904                 db  0Eh
.eh_frame:000000000001B905                 db  38h ; 8
.eh_frame:000000000001B906                 db  47h ; G
.eh_frame:000000000001B907                 db  0Eh
.eh_frame:000000000001B908                 db  30h ; 0
.eh_frame:000000000001B909                 db  41h ; A
.eh_frame:000000000001B90A                 db  0Eh
.eh_frame:000000000001B90B                 db  28h ; (
.eh_frame:000000000001B90C                 db  42h ; B
.eh_frame:000000000001B90D                 db  0Eh
.eh_frame:000000000001B90E                 db  20h
.eh_frame:000000000001B90F                 db  42h ; B
.eh_frame:000000000001B910                 db  0Eh
.eh_frame:000000000001B911                 db  18h
.eh_frame:000000000001B912                 db  42h ; B
.eh_frame:000000000001B913                 db  0Eh
.eh_frame:000000000001B914                 db  10h
.eh_frame:000000000001B915                 db  42h ; B
.eh_frame:000000000001B916                 db  0Eh
.eh_frame:000000000001B917                 db    8
.eh_frame:000000000001B918                 db  56h ; V
.eh_frame:000000000001B919                 db  0Bh
.eh_frame:000000000001B91A                 db  5Eh ; ^
.eh_frame:000000000001B91B                 db  0Ah
.eh_frame:000000000001B91C                 db  0Eh
.eh_frame:000000000001B91D                 db  38h ; 8
.eh_frame:000000000001B91E                 db  52h ; R
.eh_frame:000000000001B91F                 db  0Eh
.eh_frame:000000000001B920                 db  30h ; 0
.eh_frame:000000000001B921                 db  41h ; A
.eh_frame:000000000001B922                 db  0Eh
.eh_frame:000000000001B923                 db  28h ; (
.eh_frame:000000000001B924                 db  42h ; B
.eh_frame:000000000001B925                 db  0Eh
.eh_frame:000000000001B926                 db  20h
.eh_frame:000000000001B927                 db  42h ; B
.eh_frame:000000000001B928                 db  0Eh
.eh_frame:000000000001B929                 db  18h
.eh_frame:000000000001B92A                 db  42h ; B
.eh_frame:000000000001B92B                 db  0Eh
.eh_frame:000000000001B92C                 db  10h
.eh_frame:000000000001B92D                 db  42h ; B
.eh_frame:000000000001B92E                 db  0Eh
.eh_frame:000000000001B92F                 db    8
.eh_frame:000000000001B930                 db  4Fh ; O
.eh_frame:000000000001B931                 db  0Bh
.eh_frame:000000000001B932                 db  62h ; b
.eh_frame:000000000001B933                 db  0Ah
.eh_frame:000000000001B934                 db  0Eh
.eh_frame:000000000001B935                 db  38h ; 8
.eh_frame:000000000001B936                 db  50h ; P
.eh_frame:000000000001B937                 db  0Eh
.eh_frame:000000000001B938                 db  30h ; 0
.eh_frame:000000000001B939                 db  41h ; A
.eh_frame:000000000001B93A                 db  0Eh
.eh_frame:000000000001B93B                 db  28h ; (
.eh_frame:000000000001B93C                 db  42h ; B
.eh_frame:000000000001B93D                 db  0Eh
.eh_frame:000000000001B93E                 db  20h
.eh_frame:000000000001B93F                 db  42h ; B
.eh_frame:000000000001B940                 db  0Eh
.eh_frame:000000000001B941                 db  18h
.eh_frame:000000000001B942                 db  42h ; B
.eh_frame:000000000001B943                 db  0Eh
.eh_frame:000000000001B944                 db  10h
.eh_frame:000000000001B945                 db  42h ; B
.eh_frame:000000000001B946                 db  0Eh
.eh_frame:000000000001B947                 db    8
.eh_frame:000000000001B948                 db  55h ; U
.eh_frame:000000000001B949                 db  0Bh
.eh_frame:000000000001B94A                 db  66h ; f
.eh_frame:000000000001B94B                 db  0Eh
.eh_frame:000000000001B94C                 db  68h ; h
.eh_frame:000000000001B94D                 db  42h ; B
.eh_frame:000000000001B94E                 db  0Eh
.eh_frame:000000000001B94F                 db  70h ; p
.eh_frame:000000000001B950                 db  5Ch ; \
.eh_frame:000000000001B951                 db  0Eh
.eh_frame:000000000001B952                 db  68h ; h
.eh_frame:000000000001B953                 db  41h ; A
.eh_frame:000000000001B954                 db  0Eh
.eh_frame:000000000001B955                 db  60h ; `
.eh_frame:000000000001B956                 db  44h ; D
.eh_frame:000000000001B957                 db  0Ah
.eh_frame:000000000001B958                 db  0Eh
.eh_frame:000000000001B959                 db  38h ; 8
.eh_frame:000000000001B95A                 db  41h ; A
.eh_frame:000000000001B95B                 db  0Eh
.eh_frame:000000000001B95C                 db  30h ; 0
.eh_frame:000000000001B95D                 db  41h ; A
.eh_frame:000000000001B95E                 db  0Eh
.eh_frame:000000000001B95F                 db  28h ; (
.eh_frame:000000000001B960                 db  42h ; B
.eh_frame:000000000001B961                 db  0Eh
.eh_frame:000000000001B962                 db  20h
.eh_frame:000000000001B963                 db  42h ; B
.eh_frame:000000000001B964                 db  0Eh
.eh_frame:000000000001B965                 db  18h
.eh_frame:000000000001B966                 db  42h ; B
.eh_frame:000000000001B967                 db  0Eh
.eh_frame:000000000001B968                 db  10h
.eh_frame:000000000001B969                 db  42h ; B
.eh_frame:000000000001B96A                 db  0Eh
.eh_frame:000000000001B96B                 db    8
.eh_frame:000000000001B96C                 db  45h ; E
.eh_frame:000000000001B96D                 db  0Bh
.eh_frame:000000000001B96E                 db  68h ; h
.eh_frame:000000000001B96F                 db  0Ah
.eh_frame:000000000001B970                 db  0Eh
.eh_frame:000000000001B971                 db  68h ; h
.eh_frame:000000000001B972                 db  48h ; H
.eh_frame:000000000001B973                 db  0Bh
.eh_frame:000000000001B974                 db  72h ; r
.eh_frame:000000000001B975                 db  0Eh
.eh_frame:000000000001B976                 db  68h ; h
.eh_frame:000000000001B977                 db  45h ; E
.eh_frame:000000000001B978                 db  0Eh
.eh_frame:000000000001B979                 db  70h ; p
.eh_frame:000000000001B97A                 db  42h ; B
.eh_frame:000000000001B97B                 db  0Eh
.eh_frame:000000000001B97C                 db  78h ; x
.eh_frame:000000000001B97D                 db  42h ; B
.eh_frame:000000000001B97E                 db  0Eh
.eh_frame:000000000001B97F                 db  80h
.eh_frame:000000000001B980                 db    1
.eh_frame:000000000001B981                 db  5Eh ; ^
.eh_frame:000000000001B982                 db  0Eh
.eh_frame:000000000001B983                 db  60h ; `
.eh_frame:000000000001B984                 db  44h ; D
.eh_frame:000000000001B985                 db  0Ah
.eh_frame:000000000001B986                 db  0Eh
.eh_frame:000000000001B987                 db  38h ; 8
.eh_frame:000000000001B988                 db  41h ; A
.eh_frame:000000000001B989                 db  0Eh
.eh_frame:000000000001B98A                 db  30h ; 0
.eh_frame:000000000001B98B                 db  41h ; A
.eh_frame:000000000001B98C                 db  0Eh
.eh_frame:000000000001B98D                 db  28h ; (
.eh_frame:000000000001B98E                 db  42h ; B
.eh_frame:000000000001B98F                 db  0Eh
.eh_frame:000000000001B990                 db  20h
.eh_frame:000000000001B991                 db  42h ; B
.eh_frame:000000000001B992                 db  0Eh
.eh_frame:000000000001B993                 db  18h
.eh_frame:000000000001B994                 db  42h ; B
.eh_frame:000000000001B995                 db  0Eh
.eh_frame:000000000001B996                 db  10h
.eh_frame:000000000001B997                 db  42h ; B
.eh_frame:000000000001B998                 db  0Eh
.eh_frame:000000000001B999                 db    8
.eh_frame:000000000001B99A                 db  41h ; A
.eh_frame:000000000001B99B                 db  0Bh
.eh_frame:000000000001B99C                 db  79h ; y
.eh_frame:000000000001B99D                 db  0Ah
.eh_frame:000000000001B99E                 db  0Eh
.eh_frame:000000000001B99F                 db  68h ; h
.eh_frame:000000000001B9A0                 db  42h ; B
.eh_frame:000000000001B9A1                 db  0Eh
.eh_frame:000000000001B9A2                 db  70h ; p
.eh_frame:000000000001B9A3                 db  42h ; B
.eh_frame:000000000001B9A4                 db  0Eh
.eh_frame:000000000001B9A5                 db  78h ; x
.eh_frame:000000000001B9A6                 db  42h ; B
.eh_frame:000000000001B9A7                 db  0Eh
.eh_frame:000000000001B9A8                 db  80h
.eh_frame:000000000001B9A9                 db    1
.eh_frame:000000000001B9AA                 db  51h ; Q
.eh_frame:000000000001B9AB                 db  0Bh
.eh_frame:000000000001B9AC                 db  10h
.eh_frame:000000000001B9AD                 db    0
.eh_frame:000000000001B9AE                 db    0
.eh_frame:000000000001B9AF                 db    0
.eh_frame:000000000001B9B0                 db  90h
.eh_frame:000000000001B9B1                 db  20h
.eh_frame:000000000001B9B2                 db    0
.eh_frame:000000000001B9B3                 db    0
.eh_frame:000000000001B9B4                 db  1Ch
.eh_frame:000000000001B9B5                 db  64h ; d
.eh_frame:000000000001B9B6                 db 0FFh
.eh_frame:000000000001B9B7                 db 0FFh
.eh_frame:000000000001B9B8                 db  20h
.eh_frame:000000000001B9B9                 db    0
.eh_frame:000000000001B9BA                 db    0
.eh_frame:000000000001B9BB                 db    0
.eh_frame:000000000001B9BC                 db    0
.eh_frame:000000000001B9BD                 db    0
.eh_frame:000000000001B9BE                 db    0
.eh_frame:000000000001B9BF                 db    0
.eh_frame:000000000001B9C0                 db  18h
.eh_frame:000000000001B9C1                 db    0
.eh_frame:000000000001B9C2                 db    0
.eh_frame:000000000001B9C3                 db    0
.eh_frame:000000000001B9C4                 db 0A4h
.eh_frame:000000000001B9C5                 db  20h
.eh_frame:000000000001B9C6                 db    0
.eh_frame:000000000001B9C7                 db    0
.eh_frame:000000000001B9C8                 db  28h ; (
.eh_frame:000000000001B9C9                 db  64h ; d
.eh_frame:000000000001B9CA                 db 0FFh
.eh_frame:000000000001B9CB                 db 0FFh
.eh_frame:000000000001B9CC                 db  78h ; x
.eh_frame:000000000001B9CD                 db    0
.eh_frame:000000000001B9CE                 db    0
.eh_frame:000000000001B9CF                 db    0
.eh_frame:000000000001B9D0                 db    0
.eh_frame:000000000001B9D1                 db  44h ; D
.eh_frame:000000000001B9D2                 db  0Eh
.eh_frame:000000000001B9D3                 db  70h ; p
.eh_frame:000000000001B9D4                 db    2
.eh_frame:000000000001B9D5                 db  60h ; `
.eh_frame:000000000001B9D6                 db  0Ah
.eh_frame:000000000001B9D7                 db  0Eh
.eh_frame:000000000001B9D8                 db    8
.eh_frame:000000000001B9D9                 db  41h ; A
.eh_frame:000000000001B9DA                 db  0Bh
.eh_frame:000000000001B9DB                 db    0
.eh_frame:000000000001B9DC                 db  28h ; (
.eh_frame:000000000001B9DD                 db    0
.eh_frame:000000000001B9DE                 db    0
.eh_frame:000000000001B9DF                 db    0
.eh_frame:000000000001B9E0                 db 0C0h
.eh_frame:000000000001B9E1                 db  20h
.eh_frame:000000000001B9E2                 db    0
.eh_frame:000000000001B9E3                 db    0
.eh_frame:000000000001B9E4                 db  8Ch
.eh_frame:000000000001B9E5                 db  64h ; d
.eh_frame:000000000001B9E6                 db 0FFh
.eh_frame:000000000001B9E7                 db 0FFh
.eh_frame:000000000001B9E8                 db 0D5h
.eh_frame:000000000001B9E9                 db    0
.eh_frame:000000000001B9EA                 db    0
.eh_frame:000000000001B9EB                 db    0
.eh_frame:000000000001B9EC                 db    0
.eh_frame:000000000001B9ED                 db  41h ; A
.eh_frame:000000000001B9EE                 db  0Eh
.eh_frame:000000000001B9EF                 db  10h
.eh_frame:000000000001B9F0                 db  86h
.eh_frame:000000000001B9F1                 db    2
.eh_frame:000000000001B9F2                 db  41h ; A
.eh_frame:000000000001B9F3                 db  0Eh
.eh_frame:000000000001B9F4                 db  18h
.eh_frame:000000000001B9F5                 db  83h
.eh_frame:000000000001B9F6                 db    3
.eh_frame:000000000001B9F7                 db  50h ; P
.eh_frame:000000000001B9F8                 db  0Eh
.eh_frame:000000000001B9F9                 db 0D0h
.eh_frame:000000000001B9FA                 db    1
.eh_frame:000000000001B9FB                 db    2
.eh_frame:000000000001B9FC                 db 0ABh
.eh_frame:000000000001B9FD                 db  0Ah
.eh_frame:000000000001B9FE                 db  0Eh
.eh_frame:000000000001B9FF                 db  18h
.eh_frame:000000000001BA00                 db  41h ; A
.eh_frame:000000000001BA01                 db  0Eh
.eh_frame:000000000001BA02                 db  10h
.eh_frame:000000000001BA03                 db  41h ; A
.eh_frame:000000000001BA04                 db  0Eh
.eh_frame:000000000001BA05                 db    8
.eh_frame:000000000001BA06                 db  41h ; A
.eh_frame:000000000001BA07                 db  0Bh
.eh_frame:000000000001BA08                 db  1Ch
.eh_frame:000000000001BA09                 db    0
.eh_frame:000000000001BA0A                 db    0
.eh_frame:000000000001BA0B                 db    0
.eh_frame:000000000001BA0C                 db 0ECh
.eh_frame:000000000001BA0D                 db  20h
.eh_frame:000000000001BA0E                 db    0
.eh_frame:000000000001BA0F                 db    0
.eh_frame:000000000001BA10                 db  40h ; @
.eh_frame:000000000001BA11                 db  65h ; e
.eh_frame:000000000001BA12                 db 0FFh
.eh_frame:000000000001BA13                 db 0FFh
.eh_frame:000000000001BA14                 db  80h
.eh_frame:000000000001BA15                 db    0
.eh_frame:000000000001BA16                 db    0
.eh_frame:000000000001BA17                 db    0
.eh_frame:000000000001BA18                 db    0
.eh_frame:000000000001BA19                 db  41h ; A
.eh_frame:000000000001BA1A                 db  0Eh
.eh_frame:000000000001BA1B                 db  10h
.eh_frame:000000000001BA1C                 db  83h
.eh_frame:000000000001BA1D                 db    2
.eh_frame:000000000001BA1E                 db    2
.eh_frame:000000000001BA1F                 db  7Ah ; z
.eh_frame:000000000001BA20                 db  0Eh
.eh_frame:000000000001BA21                 db    8
.eh_frame:000000000001BA22                 db    0
.eh_frame:000000000001BA23                 db    0
.eh_frame:000000000001BA24                 db    0
.eh_frame:000000000001BA25                 db    0
.eh_frame:000000000001BA26                 db    0
.eh_frame:000000000001BA27                 db    0
.eh_frame:000000000001BA28                 db  14h
.eh_frame:000000000001BA29                 db    0
.eh_frame:000000000001BA2A                 db    0
.eh_frame:000000000001BA2B                 db    0
.eh_frame:000000000001BA2C                 db  0Ch
.eh_frame:000000000001BA2D                 db  21h ; !
.eh_frame:000000000001BA2E                 db    0
.eh_frame:000000000001BA2F                 db    0
.eh_frame:000000000001BA30                 db 0A0h
.eh_frame:000000000001BA31                 db  65h ; e
.eh_frame:000000000001BA32                 db 0FFh
.eh_frame:000000000001BA33                 db 0FFh
.eh_frame:000000000001BA34                 db  38h ; 8
.eh_frame:000000000001BA35                 db    0
.eh_frame:000000000001BA36                 db    0
.eh_frame:000000000001BA37                 db    0
.eh_frame:000000000001BA38                 db    0
.eh_frame:000000000001BA39                 db  5Ch ; \
.eh_frame:000000000001BA3A                 db  0Eh
.eh_frame:000000000001BA3B                 db  10h
.eh_frame:000000000001BA3C                 db  5Bh ; [
.eh_frame:000000000001BA3D                 db  0Eh
.eh_frame:000000000001BA3E                 db    8
.eh_frame:000000000001BA3F                 db    0
.eh_frame:000000000001BA40                 db  18h
.eh_frame:000000000001BA41                 db    0
.eh_frame:000000000001BA42                 db    0
.eh_frame:000000000001BA43                 db    0
.eh_frame:000000000001BA44                 db  24h ; $
.eh_frame:000000000001BA45                 db  21h ; !
.eh_frame:000000000001BA46                 db    0
.eh_frame:000000000001BA47                 db    0
.eh_frame:000000000001BA48                 db 0C8h
.eh_frame:000000000001BA49                 db  65h ; e
.eh_frame:000000000001BA4A                 db 0FFh
.eh_frame:000000000001BA4B                 db 0FFh
.eh_frame:000000000001BA4C                 db  1Ah
.eh_frame:000000000001BA4D                 db    0
.eh_frame:000000000001BA4E                 db    0
.eh_frame:000000000001BA4F                 db    0
.eh_frame:000000000001BA50                 db    0
.eh_frame:000000000001BA51                 db  41h ; A
.eh_frame:000000000001BA52                 db  0Eh
.eh_frame:000000000001BA53                 db  10h
.eh_frame:000000000001BA54                 db  83h
.eh_frame:000000000001BA55                 db    2
.eh_frame:000000000001BA56                 db  53h ; S
.eh_frame:000000000001BA57                 db  0Ah
.eh_frame:000000000001BA58                 db  0Eh
.eh_frame:000000000001BA59                 db    8
.eh_frame:000000000001BA5A                 db  41h ; A
.eh_frame:000000000001BA5B                 db  0Bh
.eh_frame:000000000001BA5C                 db  10h
.eh_frame:000000000001BA5D                 db    0
.eh_frame:000000000001BA5E                 db    0
.eh_frame:000000000001BA5F                 db    0
.eh_frame:000000000001BA60                 db  40h ; @
.eh_frame:000000000001BA61                 db  21h ; !
.eh_frame:000000000001BA62                 db    0
.eh_frame:000000000001BA63                 db    0
.eh_frame:000000000001BA64                 db 0CCh
.eh_frame:000000000001BA65                 db  65h ; e
.eh_frame:000000000001BA66                 db 0FFh
.eh_frame:000000000001BA67                 db 0FFh
.eh_frame:000000000001BA68                 db  24h ; $
.eh_frame:000000000001BA69                 db    0
.eh_frame:000000000001BA6A                 db    0
.eh_frame:000000000001BA6B                 db    0
.eh_frame:000000000001BA6C                 db    0
.eh_frame:000000000001BA6D                 db  5Fh ; _
.eh_frame:000000000001BA6E                 db  0Eh
.eh_frame:000000000001BA6F                 db  10h
.eh_frame:000000000001BA70                 db  10h
.eh_frame:000000000001BA71                 db    0
.eh_frame:000000000001BA72                 db    0
.eh_frame:000000000001BA73                 db    0
.eh_frame:000000000001BA74                 db  54h ; T
.eh_frame:000000000001BA75                 db  21h ; !
.eh_frame:000000000001BA76                 db    0
.eh_frame:000000000001BA77                 db    0
.eh_frame:000000000001BA78                 db 0E8h
.eh_frame:000000000001BA79                 db  65h ; e
.eh_frame:000000000001BA7A                 db 0FFh
.eh_frame:000000000001BA7B                 db 0FFh
.eh_frame:000000000001BA7C                 db    2
.eh_frame:000000000001BA7D                 db    0
.eh_frame:000000000001BA7E                 db    0
.eh_frame:000000000001BA7F                 db    0
.eh_frame:000000000001BA80                 db    0
.eh_frame:000000000001BA81                 db    0
.eh_frame:000000000001BA82                 db    0
.eh_frame:000000000001BA83                 db    0
.eh_frame:000000000001BA84                 db  20h
.eh_frame:000000000001BA85                 db    0
.eh_frame:000000000001BA86                 db    0
.eh_frame:000000000001BA87                 db    0
.eh_frame:000000000001BA88                 db  68h ; h
.eh_frame:000000000001BA89                 db  21h ; !
.eh_frame:000000000001BA8A                 db    0
.eh_frame:000000000001BA8B                 db    0
.eh_frame:000000000001BA8C                 db 0E4h
.eh_frame:000000000001BA8D                 db  65h ; e
.eh_frame:000000000001BA8E                 db 0FFh
.eh_frame:000000000001BA8F                 db 0FFh
.eh_frame:000000000001BA90                 db  36h ; 6
.eh_frame:000000000001BA91                 db    0
.eh_frame:000000000001BA92                 db    0
.eh_frame:000000000001BA93                 db    0
.eh_frame:000000000001BA94                 db    0
.eh_frame:000000000001BA95                 db  44h ; D
.eh_frame:000000000001BA96                 db  0Eh
.eh_frame:000000000001BA97                 db  10h
.eh_frame:000000000001BA98                 db  83h
.eh_frame:000000000001BA99                 db    2
.eh_frame:000000000001BA9A                 db  5Dh ; ]
.eh_frame:000000000001BA9B                 db  0Ah
.eh_frame:000000000001BA9C                 db  0Eh
.eh_frame:000000000001BA9D                 db    8
.eh_frame:000000000001BA9E                 db  47h ; G
.eh_frame:000000000001BA9F                 db  0Bh
.eh_frame:000000000001BAA0                 db  48h ; H
.eh_frame:000000000001BAA1                 db  0Ah
.eh_frame:000000000001BAA2                 db  0Eh
.eh_frame:000000000001BAA3                 db    8
.eh_frame:000000000001BAA4                 db  41h ; A
.eh_frame:000000000001BAA5                 db  0Bh
.eh_frame:000000000001BAA6                 db    0
.eh_frame:000000000001BAA7                 db    0
.eh_frame:000000000001BAA8                 db  10h
.eh_frame:000000000001BAA9                 db    0
.eh_frame:000000000001BAAA                 db    0
.eh_frame:000000000001BAAB                 db    0
.eh_frame:000000000001BAAC                 db  8Ch
.eh_frame:000000000001BAAD                 db  21h ; !
.eh_frame:000000000001BAAE                 db    0
.eh_frame:000000000001BAAF                 db    0
.eh_frame:000000000001BAB0                 db    0
.eh_frame:000000000001BAB1                 db  66h ; f
.eh_frame:000000000001BAB2                 db 0FFh
.eh_frame:000000000001BAB3                 db 0FFh
.eh_frame:000000000001BAB4                 db  24h ; $
.eh_frame:000000000001BAB5                 db    0
.eh_frame:000000000001BAB6                 db    0
.eh_frame:000000000001BAB7                 db    0
.eh_frame:000000000001BAB8                 db    0
.eh_frame:000000000001BAB9                 db  5Fh ; _
.eh_frame:000000000001BABA                 db  0Eh
.eh_frame:000000000001BABB                 db  10h
.eh_frame:000000000001BABC                 db  14h
.eh_frame:000000000001BABD                 db    0
.eh_frame:000000000001BABE                 db    0
.eh_frame:000000000001BABF                 db    0
.eh_frame:000000000001BAC0                 db 0A0h
.eh_frame:000000000001BAC1                 db  21h ; !
.eh_frame:000000000001BAC2                 db    0
.eh_frame:000000000001BAC3                 db    0
.eh_frame:000000000001BAC4                 db  1Ch
.eh_frame:000000000001BAC5                 db  66h ; f
.eh_frame:000000000001BAC6                 db 0FFh
.eh_frame:000000000001BAC7                 db 0FFh
.eh_frame:000000000001BAC8                 db  82h
.eh_frame:000000000001BAC9                 db    0
.eh_frame:000000000001BACA                 db    0
.eh_frame:000000000001BACB                 db    0
.eh_frame:000000000001BACC                 db    0
.eh_frame:000000000001BACD                 db    2
.eh_frame:000000000001BACE                 db  5Fh ; _
.eh_frame:000000000001BACF                 db  0Eh
.eh_frame:000000000001BAD0                 db  10h
.eh_frame:000000000001BAD1                 db  49h ; I
.eh_frame:000000000001BAD2                 db  0Eh
.eh_frame:000000000001BAD3                 db    8
.eh_frame:000000000001BAD4                 db  14h
.eh_frame:000000000001BAD5                 db    0
.eh_frame:000000000001BAD6                 db    0
.eh_frame:000000000001BAD7                 db    0
.eh_frame:000000000001BAD8                 db 0B8h
.eh_frame:000000000001BAD9                 db  21h ; !
.eh_frame:000000000001BADA                 db    0
.eh_frame:000000000001BADB                 db    0
.eh_frame:000000000001BADC                 db  94h
.eh_frame:000000000001BADD                 db  66h ; f
.eh_frame:000000000001BADE                 db 0FFh
.eh_frame:000000000001BADF                 db 0FFh
.eh_frame:000000000001BAE0                 db  4Ah ; J
.eh_frame:000000000001BAE1                 db    0
.eh_frame:000000000001BAE2                 db    0
.eh_frame:000000000001BAE3                 db    0
.eh_frame:000000000001BAE4                 db    0
.eh_frame:000000000001BAE5                 db    2
.eh_frame:000000000001BAE6                 db  45h ; E
.eh_frame:000000000001BAE7                 db  0Eh
.eh_frame:000000000001BAE8                 db  10h
.eh_frame:000000000001BAE9                 db    0
.eh_frame:000000000001BAEA                 db    0
.eh_frame:000000000001BAEB                 db    0
.eh_frame:000000000001BAEC                 db  18h
.eh_frame:000000000001BAED                 db    0
.eh_frame:000000000001BAEE                 db    0
.eh_frame:000000000001BAEF                 db    0
.eh_frame:000000000001BAF0                 db 0D0h
.eh_frame:000000000001BAF1                 db  21h ; !
.eh_frame:000000000001BAF2                 db    0
.eh_frame:000000000001BAF3                 db    0
.eh_frame:000000000001BAF4                 db 0CCh
.eh_frame:000000000001BAF5                 db  66h ; f
.eh_frame:000000000001BAF6                 db 0FFh
.eh_frame:000000000001BAF7                 db 0FFh
.eh_frame:000000000001BAF8                 db  17h
.eh_frame:000000000001BAF9                 db    0
.eh_frame:000000000001BAFA                 db    0
.eh_frame:000000000001BAFB                 db    0
.eh_frame:000000000001BAFC                 db    0
.eh_frame:000000000001BAFD                 db  41h ; A
.eh_frame:000000000001BAFE                 db  0Eh
.eh_frame:000000000001BAFF                 db  10h
.eh_frame:000000000001BB00                 db  83h
.eh_frame:000000000001BB01                 db    2
.eh_frame:000000000001BB02                 db  51h ; Q
.eh_frame:000000000001BB03                 db  0Eh
.eh_frame:000000000001BB04                 db    8
.eh_frame:000000000001BB05                 db    0
.eh_frame:000000000001BB06                 db    0
.eh_frame:000000000001BB07                 db    0
.eh_frame:000000000001BB08                 db  18h
.eh_frame:000000000001BB09                 db    0
.eh_frame:000000000001BB0A                 db    0
.eh_frame:000000000001BB0B                 db    0
.eh_frame:000000000001BB0C                 db 0ECh
.eh_frame:000000000001BB0D                 db  21h ; !
.eh_frame:000000000001BB0E                 db    0
.eh_frame:000000000001BB0F                 db    0
.eh_frame:000000000001BB10                 db 0D0h
.eh_frame:000000000001BB11                 db  66h ; f
.eh_frame:000000000001BB12                 db 0FFh
.eh_frame:000000000001BB13                 db 0FFh
.eh_frame:000000000001BB14                 db  2Eh ; .
.eh_frame:000000000001BB15                 db    0
.eh_frame:000000000001BB16                 db    0
.eh_frame:000000000001BB17                 db    0
.eh_frame:000000000001BB18                 db    0
.eh_frame:000000000001BB19                 db  47h ; G
.eh_frame:000000000001BB1A                 db  0Eh
.eh_frame:000000000001BB1B                 db  10h
.eh_frame:000000000001BB1C                 db  61h ; a
.eh_frame:000000000001BB1D                 db  0Ah
.eh_frame:000000000001BB1E                 db  0Eh
.eh_frame:000000000001BB1F                 db    8
.eh_frame:000000000001BB20                 db  41h ; A
.eh_frame:000000000001BB21                 db  0Bh
.eh_frame:000000000001BB22                 db    0
.eh_frame:000000000001BB23                 db    0
.eh_frame:000000000001BB24                 db  24h ; $
.eh_frame:000000000001BB25                 db    0
.eh_frame:000000000001BB26                 db    0
.eh_frame:000000000001BB27                 db    0
.eh_frame:000000000001BB28                 db    8
.eh_frame:000000000001BB29                 db  22h ; "
.eh_frame:000000000001BB2A                 db    0
.eh_frame:000000000001BB2B                 db    0
.eh_frame:000000000001BB2C                 db 0E4h
.eh_frame:000000000001BB2D                 db  66h ; f
.eh_frame:000000000001BB2E                 db 0FFh
.eh_frame:000000000001BB2F                 db 0FFh
.eh_frame:000000000001BB30                 db  28h ; (
.eh_frame:000000000001BB31                 db    0
.eh_frame:000000000001BB32                 db    0
.eh_frame:000000000001BB33                 db    0
.eh_frame:000000000001BB34                 db    0
.eh_frame:000000000001BB35                 db  41h ; A
.eh_frame:000000000001BB36                 db  0Eh
.eh_frame:000000000001BB37                 db  10h
.eh_frame:000000000001BB38                 db  86h
.eh_frame:000000000001BB39                 db    2
.eh_frame:000000000001BB3A                 db  41h ; A
.eh_frame:000000000001BB3B                 db  0Eh
.eh_frame:000000000001BB3C                 db  18h
.eh_frame:000000000001BB3D                 db  83h
.eh_frame:000000000001BB3E                 db    3
.eh_frame:000000000001BB3F                 db  4Dh ; M
.eh_frame:000000000001BB40                 db  0Eh
.eh_frame:000000000001BB41                 db  20h
.eh_frame:000000000001BB42                 db  49h ; I
.eh_frame:000000000001BB43                 db  0Eh
.eh_frame:000000000001BB44                 db  18h
.eh_frame:000000000001BB45                 db  47h ; G
.eh_frame:000000000001BB46                 db  0Eh
.eh_frame:000000000001BB47                 db  10h
.eh_frame:000000000001BB48                 db  41h ; A
.eh_frame:000000000001BB49                 db  0Eh
.eh_frame:000000000001BB4A                 db    8
.eh_frame:000000000001BB4B                 db    0
.eh_frame:000000000001BB4C                 db  18h
.eh_frame:000000000001BB4D                 db    0
.eh_frame:000000000001BB4E                 db    0
.eh_frame:000000000001BB4F                 db    0
.eh_frame:000000000001BB50                 db  30h ; 0
.eh_frame:000000000001BB51                 db  22h ; "
.eh_frame:000000000001BB52                 db    0
.eh_frame:000000000001BB53                 db    0
.eh_frame:000000000001BB54                 db 0ECh
.eh_frame:000000000001BB55                 db  66h ; f
.eh_frame:000000000001BB56                 db 0FFh
.eh_frame:000000000001BB57                 db 0FFh
.eh_frame:000000000001BB58                 db  13h
.eh_frame:000000000001BB59                 db    0
.eh_frame:000000000001BB5A                 db    0
.eh_frame:000000000001BB5B                 db    0
.eh_frame:000000000001BB5C                 db    0
.eh_frame:000000000001BB5D                 db  41h ; A
.eh_frame:000000000001BB5E                 db  0Eh
.eh_frame:000000000001BB5F                 db  10h
.eh_frame:000000000001BB60                 db  83h
.eh_frame:000000000001BB61                 db    2
.eh_frame:000000000001BB62                 db  50h ; P
.eh_frame:000000000001BB63                 db  0Eh
.eh_frame:000000000001BB64                 db    8
.eh_frame:000000000001BB65                 db    0
.eh_frame:000000000001BB66                 db    0
.eh_frame:000000000001BB67                 db    0
.eh_frame:000000000001BB68                 db  14h
.eh_frame:000000000001BB69                 db    0
.eh_frame:000000000001BB6A                 db    0
.eh_frame:000000000001BB6B                 db    0
.eh_frame:000000000001BB6C                 db  4Ch ; L
.eh_frame:000000000001BB6D                 db  22h ; "
.eh_frame:000000000001BB6E                 db    0
.eh_frame:000000000001BB6F                 db    0
.eh_frame:000000000001BB70                 db 0F0h
.eh_frame:000000000001BB71                 db  66h ; f
.eh_frame:000000000001BB72                 db 0FFh
.eh_frame:000000000001BB73                 db 0FFh
.eh_frame:000000000001BB74                 db  35h ; 5
.eh_frame:000000000001BB75                 db    0
.eh_frame:000000000001BB76                 db    0
.eh_frame:000000000001BB77                 db    0
.eh_frame:000000000001BB78                 db    0
.eh_frame:000000000001BB79                 db  4Bh ; K
.eh_frame:000000000001BB7A                 db  0Eh
.eh_frame:000000000001BB7B                 db  10h
.eh_frame:000000000001BB7C                 db    0
.eh_frame:000000000001BB7D                 db    0
.eh_frame:000000000001BB7E                 db    0
.eh_frame:000000000001BB7F                 db    0
.eh_frame:000000000001BB80                 db  4Ch ; L
.eh_frame:000000000001BB81                 db    0
.eh_frame:000000000001BB82                 db    0
.eh_frame:000000000001BB83                 db    0
.eh_frame:000000000001BB84                 db  64h ; d
.eh_frame:000000000001BB85                 db  22h ; "
.eh_frame:000000000001BB86                 db    0
.eh_frame:000000000001BB87                 db    0
.eh_frame:000000000001BB88                 db  18h
.eh_frame:000000000001BB89                 db  67h ; g
.eh_frame:000000000001BB8A                 db 0FFh
.eh_frame:000000000001BB8B                 db 0FFh
.eh_frame:000000000001BB8C                 db  1Ch
.eh_frame:000000000001BB8D                 db    4
.eh_frame:000000000001BB8E                 db    0
.eh_frame:000000000001BB8F                 db    0
.eh_frame:000000000001BB90                 db    0
.eh_frame:000000000001BB91                 db  42h ; B
.eh_frame:000000000001BB92                 db  0Eh
.eh_frame:000000000001BB93                 db  10h
.eh_frame:000000000001BB94                 db  8Fh
.eh_frame:000000000001BB95                 db    2
.eh_frame:000000000001BB96                 db  42h ; B
.eh_frame:000000000001BB97                 db  0Eh
.eh_frame:000000000001BB98                 db  18h
.eh_frame:000000000001BB99                 db  8Eh
.eh_frame:000000000001BB9A                 db    3
.eh_frame:000000000001BB9B                 db  42h ; B
.eh_frame:000000000001BB9C                 db  0Eh
.eh_frame:000000000001BB9D                 db  20h
.eh_frame:000000000001BB9E                 db  8Dh
.eh_frame:000000000001BB9F                 db    4
.eh_frame:000000000001BBA0                 db  42h ; B
.eh_frame:000000000001BBA1                 db  0Eh
.eh_frame:000000000001BBA2                 db  28h ; (
.eh_frame:000000000001BBA3                 db  8Ch
.eh_frame:000000000001BBA4                 db    5
.eh_frame:000000000001BBA5                 db  41h ; A
.eh_frame:000000000001BBA6                 db  0Eh
.eh_frame:000000000001BBA7                 db  30h ; 0
.eh_frame:000000000001BBA8                 db  86h
.eh_frame:000000000001BBA9                 db    6
.eh_frame:000000000001BBAA                 db  41h ; A
.eh_frame:000000000001BBAB                 db  0Eh
.eh_frame:000000000001BBAC                 db  38h ; 8
.eh_frame:000000000001BBAD                 db  83h
.eh_frame:000000000001BBAE                 db    7
.eh_frame:000000000001BBAF                 db  44h ; D
.eh_frame:000000000001BBB0                 db  0Eh
.eh_frame:000000000001BBB1                 db  60h ; `
.eh_frame:000000000001BBB2                 db    2
.eh_frame:000000000001BBB3                 db 0E9h
.eh_frame:000000000001BBB4                 db  0Ah
.eh_frame:000000000001BBB5                 db  0Eh
.eh_frame:000000000001BBB6                 db  38h ; 8
.eh_frame:000000000001BBB7                 db  41h ; A
.eh_frame:000000000001BBB8                 db  0Eh
.eh_frame:000000000001BBB9                 db  30h ; 0
.eh_frame:000000000001BBBA                 db  41h ; A
.eh_frame:000000000001BBBB                 db  0Eh
.eh_frame:000000000001BBBC                 db  28h ; (
.eh_frame:000000000001BBBD                 db  42h ; B
.eh_frame:000000000001BBBE                 db  0Eh
.eh_frame:000000000001BBBF                 db  20h
.eh_frame:000000000001BBC0                 db  42h ; B
.eh_frame:000000000001BBC1                 db  0Eh
.eh_frame:000000000001BBC2                 db  18h
.eh_frame:000000000001BBC3                 db  42h ; B
.eh_frame:000000000001BBC4                 db  0Eh
.eh_frame:000000000001BBC5                 db  10h
.eh_frame:000000000001BBC6                 db  42h ; B
.eh_frame:000000000001BBC7                 db  0Eh
.eh_frame:000000000001BBC8                 db    8
.eh_frame:000000000001BBC9                 db  47h ; G
.eh_frame:000000000001BBCA                 db  0Bh
.eh_frame:000000000001BBCB                 db    0
.eh_frame:000000000001BBCC                 db    0
.eh_frame:000000000001BBCD                 db    0
.eh_frame:000000000001BBCE                 db    0
.eh_frame:000000000001BBCF                 db    0
.eh_frame:000000000001BBD0                 db  24h ; $
.eh_frame:000000000001BBD1                 db    0
.eh_frame:000000000001BBD2                 db    0
.eh_frame:000000000001BBD3                 db    0
.eh_frame:000000000001BBD4                 db 0B4h
.eh_frame:000000000001BBD5                 db  22h ; "
.eh_frame:000000000001BBD6                 db    0
.eh_frame:000000000001BBD7                 db    0
.eh_frame:000000000001BBD8                 db 0E8h
.eh_frame:000000000001BBD9                 db  6Ah ; j
.eh_frame:000000000001BBDA                 db 0FFh
.eh_frame:000000000001BBDB                 db 0FFh
.eh_frame:000000000001BBDC                 db  97h
.eh_frame:000000000001BBDD                 db    0
.eh_frame:000000000001BBDE                 db    0
.eh_frame:000000000001BBDF                 db    0
.eh_frame:000000000001BBE0                 db    0
.eh_frame:000000000001BBE1                 db  41h ; A
.eh_frame:000000000001BBE2                 db  0Eh
.eh_frame:000000000001BBE3                 db  10h
.eh_frame:000000000001BBE4                 db  83h
.eh_frame:000000000001BBE5                 db    2
.eh_frame:000000000001BBE6                 db  4Bh ; K
.eh_frame:000000000001BBE7                 db  0Eh
.eh_frame:000000000001BBE8                 db  30h ; 0
.eh_frame:000000000001BBE9                 db    2
.eh_frame:000000000001BBEA                 db  76h ; v
.eh_frame:000000000001BBEB                 db  0Ah
.eh_frame:000000000001BBEC                 db  0Eh
.eh_frame:000000000001BBED                 db  10h
.eh_frame:000000000001BBEE                 db  41h ; A
.eh_frame:000000000001BBEF                 db  0Eh
.eh_frame:000000000001BBF0                 db    8
.eh_frame:000000000001BBF1                 db  45h ; E
.eh_frame:000000000001BBF2                 db  0Bh
.eh_frame:000000000001BBF3                 db    0
.eh_frame:000000000001BBF4                 db    0
.eh_frame:000000000001BBF5                 db    0
.eh_frame:000000000001BBF6                 db    0
.eh_frame:000000000001BBF7                 db    0
.eh_frame:000000000001BBF8                 db  1Ch
.eh_frame:000000000001BBF9                 db    0
.eh_frame:000000000001BBFA                 db    0
.eh_frame:000000000001BBFB                 db    0
.eh_frame:000000000001BBFC                 db 0DCh
.eh_frame:000000000001BBFD                 db  22h ; "
.eh_frame:000000000001BBFE                 db    0
.eh_frame:000000000001BBFF                 db    0
.eh_frame:000000000001BC00                 db  60h ; `
.eh_frame:000000000001BC01                 db  6Bh ; k
.eh_frame:000000000001BC02                 db 0FFh
.eh_frame:000000000001BC03                 db 0FFh
.eh_frame:000000000001BC04                 db  40h ; @
.eh_frame:000000000001BC05                 db    0
.eh_frame:000000000001BC06                 db    0
.eh_frame:000000000001BC07                 db    0
.eh_frame:000000000001BC08                 db    0
.eh_frame:000000000001BC09                 db  44h ; D
.eh_frame:000000000001BC0A                 db  0Eh
.eh_frame:000000000001BC0B                 db  10h
.eh_frame:000000000001BC0C                 db  83h
.eh_frame:000000000001BC0D                 db    2
.eh_frame:000000000001BC0E                 db  5Ah ; Z
.eh_frame:000000000001BC0F                 db  0Ah
.eh_frame:000000000001BC10                 db  0Eh
.eh_frame:000000000001BC11                 db    8
.eh_frame:000000000001BC12                 db  4Ah ; J
.eh_frame:000000000001BC13                 db  0Bh
.eh_frame:000000000001BC14                 db  53h ; S
.eh_frame:000000000001BC15                 db  0Eh
.eh_frame:000000000001BC16                 db    8
.eh_frame:000000000001BC17                 db    0
.eh_frame:000000000001BC18                 db  14h
.eh_frame:000000000001BC19                 db    0
.eh_frame:000000000001BC1A                 db    0
.eh_frame:000000000001BC1B                 db    0
.eh_frame:000000000001BC1C                 db 0FCh
.eh_frame:000000000001BC1D                 db  22h ; "
.eh_frame:000000000001BC1E                 db    0
.eh_frame:000000000001BC1F                 db    0
.eh_frame:000000000001BC20                 db  80h
.eh_frame:000000000001BC21                 db  6Bh ; k
.eh_frame:000000000001BC22                 db 0FFh
.eh_frame:000000000001BC23                 db 0FFh
.eh_frame:000000000001BC24                 db  29h ; )
.eh_frame:000000000001BC25                 db    0
.eh_frame:000000000001BC26                 db    0
.eh_frame:000000000001BC27                 db    0
.eh_frame:000000000001BC28                 db    0
.eh_frame:000000000001BC29                 db    0
.eh_frame:000000000001BC2A                 db    0
.eh_frame:000000000001BC2B                 db    0
.eh_frame:000000000001BC2C                 db    0
.eh_frame:000000000001BC2D                 db    0
.eh_frame:000000000001BC2E                 db    0
.eh_frame:000000000001BC2F                 db    0
.eh_frame:000000000001BC30                 db  2Ch ; ,
.eh_frame:000000000001BC31                 db    0
.eh_frame:000000000001BC32                 db    0
.eh_frame:000000000001BC33                 db    0
.eh_frame:000000000001BC34                 db  14h
.eh_frame:000000000001BC35                 db  23h ; #
.eh_frame:000000000001BC36                 db    0
.eh_frame:000000000001BC37                 db    0
.eh_frame:000000000001BC38                 db  98h
.eh_frame:000000000001BC39                 db  6Bh ; k
.eh_frame:000000000001BC3A                 db 0FFh
.eh_frame:000000000001BC3B                 db 0FFh
.eh_frame:000000000001BC3C                 db  57h ; W
.eh_frame:000000000001BC3D                 db    0
.eh_frame:000000000001BC3E                 db    0
.eh_frame:000000000001BC3F                 db    0
.eh_frame:000000000001BC40                 db    0
.eh_frame:000000000001BC41                 db  63h ; c
.eh_frame:000000000001BC42                 db  0Eh
.eh_frame:000000000001BC43                 db  10h
.eh_frame:000000000001BC44                 db  8Ch
.eh_frame:000000000001BC45                 db    2
.eh_frame:000000000001BC46                 db  41h ; A
.eh_frame:000000000001BC47                 db  0Eh
.eh_frame:000000000001BC48                 db  18h
.eh_frame:000000000001BC49                 db  86h
.eh_frame:000000000001BC4A                 db    3
.eh_frame:000000000001BC4B                 db  44h ; D
.eh_frame:000000000001BC4C                 db  0Eh
.eh_frame:000000000001BC4D                 db  20h
.eh_frame:000000000001BC4E                 db  83h
.eh_frame:000000000001BC4F                 db    4
.eh_frame:000000000001BC50                 db  6Bh ; k
.eh_frame:000000000001BC51                 db  0Eh
.eh_frame:000000000001BC52                 db  18h
.eh_frame:000000000001BC53                 db  41h ; A
.eh_frame:000000000001BC54                 db  0Eh
.eh_frame:000000000001BC55                 db  10h
.eh_frame:000000000001BC56                 db  42h ; B
.eh_frame:000000000001BC57                 db  0Eh
.eh_frame:000000000001BC58                 db    8
.eh_frame:000000000001BC59                 db    0
.eh_frame:000000000001BC5A                 db    0
.eh_frame:000000000001BC5B                 db    0
.eh_frame:000000000001BC5C                 db    0
.eh_frame:000000000001BC5D                 db    0
.eh_frame:000000000001BC5E                 db    0
.eh_frame:000000000001BC5F                 db    0
.eh_frame:000000000001BC60                 db  3Ch ; <
.eh_frame:000000000001BC61                 db    0
.eh_frame:000000000001BC62                 db    0
.eh_frame:000000000001BC63                 db    0
.eh_frame:000000000001BC64                 db  44h ; D
.eh_frame:000000000001BC65                 db  23h ; #
.eh_frame:000000000001BC66                 db    0
.eh_frame:000000000001BC67                 db    0
.eh_frame:000000000001BC68                 db 0C8h
.eh_frame:000000000001BC69                 db  6Bh ; k
.eh_frame:000000000001BC6A                 db 0FFh
.eh_frame:000000000001BC6B                 db 0FFh
.eh_frame:000000000001BC6C                 db  83h
.eh_frame:000000000001BC6D                 db    0
.eh_frame:000000000001BC6E                 db    0
.eh_frame:000000000001BC6F                 db    0
.eh_frame:000000000001BC70                 db    0
.eh_frame:000000000001BC71                 db  42h ; B
.eh_frame:000000000001BC72                 db  0Eh
.eh_frame:000000000001BC73                 db  10h
.eh_frame:000000000001BC74                 db  8Dh
.eh_frame:000000000001BC75                 db    2
.eh_frame:000000000001BC76                 db  42h ; B
.eh_frame:000000000001BC77                 db  0Eh
.eh_frame:000000000001BC78                 db  18h
.eh_frame:000000000001BC79                 db  8Ch
.eh_frame:000000000001BC7A                 db    3
.eh_frame:000000000001BC7B                 db  44h ; D
.eh_frame:000000000001BC7C                 db  0Eh
.eh_frame:000000000001BC7D                 db  20h
.eh_frame:000000000001BC7E                 db  86h
.eh_frame:000000000001BC7F                 db    4
.eh_frame:000000000001BC80                 db  41h ; A
.eh_frame:000000000001BC81                 db  0Eh
.eh_frame:000000000001BC82                 db  28h ; (
.eh_frame:000000000001BC83                 db  83h
.eh_frame:000000000001BC84                 db    5
.eh_frame:000000000001BC85                 db  4Ah ; J
.eh_frame:000000000001BC86                 db  0Eh
.eh_frame:000000000001BC87                 db  40h ; @
.eh_frame:000000000001BC88                 db    2
.eh_frame:000000000001BC89                 db  64h ; d
.eh_frame:000000000001BC8A                 db  0Ah
.eh_frame:000000000001BC8B                 db  0Eh
.eh_frame:000000000001BC8C                 db  28h ; (
.eh_frame:000000000001BC8D                 db  41h ; A
.eh_frame:000000000001BC8E                 db  0Eh
.eh_frame:000000000001BC8F                 db  20h
.eh_frame:000000000001BC90                 db  41h ; A
.eh_frame:000000000001BC91                 db  0Eh
.eh_frame:000000000001BC92                 db  18h
.eh_frame:000000000001BC93                 db  42h ; B
.eh_frame:000000000001BC94                 db  0Eh
.eh_frame:000000000001BC95                 db  10h
.eh_frame:000000000001BC96                 db  42h ; B
.eh_frame:000000000001BC97                 db  0Eh
.eh_frame:000000000001BC98                 db    8
.eh_frame:000000000001BC99                 db  41h ; A
.eh_frame:000000000001BC9A                 db  0Bh
.eh_frame:000000000001BC9B                 db    0
.eh_frame:000000000001BC9C                 db    0
.eh_frame:000000000001BC9D                 db    0
.eh_frame:000000000001BC9E                 db    0
.eh_frame:000000000001BC9F                 db    0
.eh_frame:000000000001BCA0                 db  3Ch ; <
.eh_frame:000000000001BCA1                 db    0
.eh_frame:000000000001BCA2                 db    0
.eh_frame:000000000001BCA3                 db    0
.eh_frame:000000000001BCA4                 db  84h
.eh_frame:000000000001BCA5                 db  23h ; #
.eh_frame:000000000001BCA6                 db    0
.eh_frame:000000000001BCA7                 db    0
.eh_frame:000000000001BCA8                 db  18h
.eh_frame:000000000001BCA9                 db  6Ch ; l
.eh_frame:000000000001BCAA                 db 0FFh
.eh_frame:000000000001BCAB                 db 0FFh
.eh_frame:000000000001BCAC                 db 0F2h
.eh_frame:000000000001BCAD                 db    0
.eh_frame:000000000001BCAE                 db    0
.eh_frame:000000000001BCAF                 db    0
.eh_frame:000000000001BCB0                 db    0
.eh_frame:000000000001BCB1                 db  42h ; B
.eh_frame:000000000001BCB2                 db  0Eh
.eh_frame:000000000001BCB3                 db  10h
.eh_frame:000000000001BCB4                 db  8Dh
.eh_frame:000000000001BCB5                 db    2
.eh_frame:000000000001BCB6                 db  42h ; B
.eh_frame:000000000001BCB7                 db  0Eh
.eh_frame:000000000001BCB8                 db  18h
.eh_frame:000000000001BCB9                 db  8Ch
.eh_frame:000000000001BCBA                 db    3
.eh_frame:000000000001BCBB                 db  44h ; D
.eh_frame:000000000001BCBC                 db  0Eh
.eh_frame:000000000001BCBD                 db  20h
.eh_frame:000000000001BCBE                 db  86h
.eh_frame:000000000001BCBF                 db    4
.eh_frame:000000000001BCC0                 db  41h ; A
.eh_frame:000000000001BCC1                 db  0Eh
.eh_frame:000000000001BCC2                 db  28h ; (
.eh_frame:000000000001BCC3                 db  83h
.eh_frame:000000000001BCC4                 db    5
.eh_frame:000000000001BCC5                 db  4Ah ; J
.eh_frame:000000000001BCC6                 db  0Eh
.eh_frame:000000000001BCC7                 db 0A0h
.eh_frame:000000000001BCC8                 db  10h
.eh_frame:000000000001BCC9                 db    2
.eh_frame:000000000001BCCA                 db  8Fh
.eh_frame:000000000001BCCB                 db  0Ah
.eh_frame:000000000001BCCC                 db  0Eh
.eh_frame:000000000001BCCD                 db  28h ; (
.eh_frame:000000000001BCCE                 db  41h ; A
.eh_frame:000000000001BCCF                 db  0Eh
.eh_frame:000000000001BCD0                 db  20h
.eh_frame:000000000001BCD1                 db  41h ; A
.eh_frame:000000000001BCD2                 db  0Eh
.eh_frame:000000000001BCD3                 db  18h
.eh_frame:000000000001BCD4                 db  42h ; B
.eh_frame:000000000001BCD5                 db  0Eh
.eh_frame:000000000001BCD6                 db  10h
.eh_frame:000000000001BCD7                 db  42h ; B
.eh_frame:000000000001BCD8                 db  0Eh
.eh_frame:000000000001BCD9                 db    8
.eh_frame:000000000001BCDA                 db  48h ; H
.eh_frame:000000000001BCDB                 db  0Bh
.eh_frame:000000000001BCDC                 db    0
.eh_frame:000000000001BCDD                 db    0
.eh_frame:000000000001BCDE                 db    0
.eh_frame:000000000001BCDF                 db    0
.eh_frame:000000000001BCE0                 db  14h
.eh_frame:000000000001BCE1                 db    0
.eh_frame:000000000001BCE2                 db    0
.eh_frame:000000000001BCE3                 db    0
.eh_frame:000000000001BCE4                 db 0C4h
.eh_frame:000000000001BCE5                 db  23h ; #
.eh_frame:000000000001BCE6                 db    0
.eh_frame:000000000001BCE7                 db    0
.eh_frame:000000000001BCE8                 db 0D8h
.eh_frame:000000000001BCE9                 db  6Ch ; l
.eh_frame:000000000001BCEA                 db 0FFh
.eh_frame:000000000001BCEB                 db 0FFh
.eh_frame:000000000001BCEC                 db    2
.eh_frame:000000000001BCED                 db    0
.eh_frame:000000000001BCEE                 db    0
.eh_frame:000000000001BCEF                 db    0
.eh_frame:000000000001BCF0                 db    0
.eh_frame:000000000001BCF1                 db    0
.eh_frame:000000000001BCF2                 db    0
.eh_frame:000000000001BCF3                 db    0
.eh_frame:000000000001BCF4                 db    0
.eh_frame:000000000001BCF5                 db    0
.eh_frame:000000000001BCF6                 db    0
.eh_frame:000000000001BCF7                 db    0
.eh_frame:000000000001BCF8                 db  14h
.eh_frame:000000000001BCF9                 db    0
.eh_frame:000000000001BCFA                 db    0
.eh_frame:000000000001BCFB                 db    0
.eh_frame:000000000001BCFC                 db 0DCh
.eh_frame:000000000001BCFD                 db  23h ; #
.eh_frame:000000000001BCFE                 db    0
.eh_frame:000000000001BCFF                 db    0
.eh_frame:000000000001BD00                 db 0D0h
.eh_frame:000000000001BD01                 db  6Ch ; l
.eh_frame:000000000001BD02                 db 0FFh
.eh_frame:000000000001BD03                 db 0FFh
.eh_frame:000000000001BD04                 db    5
.eh_frame:000000000001BD05                 db    0
.eh_frame:000000000001BD06                 db    0
.eh_frame:000000000001BD07                 db    0
.eh_frame:000000000001BD08                 db    0
.eh_frame:000000000001BD09                 db    0
.eh_frame:000000000001BD0A                 db    0
.eh_frame:000000000001BD0B                 db    0
.eh_frame:000000000001BD0C                 db    0
.eh_frame:000000000001BD0D                 db    0
.eh_frame:000000000001BD0E                 db    0
.eh_frame:000000000001BD0F                 db    0
.eh_frame:000000000001BD10                 db  10h
.eh_frame:000000000001BD11                 db    0
.eh_frame:000000000001BD12                 db    0
.eh_frame:000000000001BD13                 db    0
.eh_frame:000000000001BD14                 db 0F4h
.eh_frame:000000000001BD15                 db  23h ; #
.eh_frame:000000000001BD16                 db    0
.eh_frame:000000000001BD17                 db    0
.eh_frame:000000000001BD18                 db 0C8h
.eh_frame:000000000001BD19                 db  6Ch ; l
.eh_frame:000000000001BD1A                 db 0FFh
.eh_frame:000000000001BD1B                 db 0FFh
.eh_frame:000000000001BD1C                 db  15h
.eh_frame:000000000001BD1D                 db    0
.eh_frame:000000000001BD1E                 db    0
.eh_frame:000000000001BD1F                 db    0
.eh_frame:000000000001BD20                 db    0
.eh_frame:000000000001BD21                 db    0
.eh_frame:000000000001BD22                 db    0
.eh_frame:000000000001BD23                 db    0
.eh_frame:000000000001BD24                 db  18h
.eh_frame:000000000001BD25                 db    0
.eh_frame:000000000001BD26                 db    0
.eh_frame:000000000001BD27                 db    0
.eh_frame:000000000001BD28                 db    8
.eh_frame:000000000001BD29                 db  24h ; $
.eh_frame:000000000001BD2A                 db    0
.eh_frame:000000000001BD2B                 db    0
.eh_frame:000000000001BD2C                 db 0D4h
.eh_frame:000000000001BD2D                 db  6Ch ; l
.eh_frame:000000000001BD2E                 db 0FFh
.eh_frame:000000000001BD2F                 db 0FFh
.eh_frame:000000000001BD30                 db  22h ; "
.eh_frame:000000000001BD31                 db    0
.eh_frame:000000000001BD32                 db    0
.eh_frame:000000000001BD33                 db    0
.eh_frame:000000000001BD34                 db    0
.eh_frame:000000000001BD35                 db  44h ; D
.eh_frame:000000000001BD36                 db  0Eh
.eh_frame:000000000001BD37                 db  10h
.eh_frame:000000000001BD38                 db  58h ; X
.eh_frame:000000000001BD39                 db  0Eh
.eh_frame:000000000001BD3A                 db    8
.eh_frame:000000000001BD3B                 db    0
.eh_frame:000000000001BD3C                 db    0
.eh_frame:000000000001BD3D                 db    0
.eh_frame:000000000001BD3E                 db    0
.eh_frame:000000000001BD3F                 db    0
.eh_frame:000000000001BD40                 db  10h
.eh_frame:000000000001BD41                 db    0
.eh_frame:000000000001BD42                 db    0
.eh_frame:000000000001BD43                 db    0
.eh_frame:000000000001BD44                 db  24h ; $
.eh_frame:000000000001BD45                 db  24h ; $
.eh_frame:000000000001BD46                 db    0
.eh_frame:000000000001BD47                 db    0
.eh_frame:000000000001BD48                 db 0E8h
.eh_frame:000000000001BD49                 db  6Ch ; l
.eh_frame:000000000001BD4A                 db 0FFh
.eh_frame:000000000001BD4B                 db 0FFh
.eh_frame:000000000001BD4C                 db  0Ah
.eh_frame:000000000001BD4D                 db    0
.eh_frame:000000000001BD4E                 db    0
.eh_frame:000000000001BD4F                 db    0
.eh_frame:000000000001BD50                 db    0
.eh_frame:000000000001BD51                 db    0
.eh_frame:000000000001BD52                 db    0
.eh_frame:000000000001BD53                 db    0
.eh_frame:000000000001BD54                 db  48h ; H
.eh_frame:000000000001BD55                 db    0
.eh_frame:000000000001BD56                 db    0
.eh_frame:000000000001BD57                 db    0
.eh_frame:000000000001BD58                 db  38h ; 8
.eh_frame:000000000001BD59                 db  24h ; $
.eh_frame:000000000001BD5A                 db    0
.eh_frame:000000000001BD5B                 db    0
.eh_frame:000000000001BD5C                 db 0E4h
.eh_frame:000000000001BD5D                 db  6Ch ; l
.eh_frame:000000000001BD5E                 db 0FFh
.eh_frame:000000000001BD5F                 db 0FFh
.eh_frame:000000000001BD60                 db  16h
.eh_frame:000000000001BD61                 db    1
.eh_frame:000000000001BD62                 db    0
.eh_frame:000000000001BD63                 db    0
.eh_frame:000000000001BD64                 db    0
.eh_frame:000000000001BD65                 db  42h ; B
.eh_frame:000000000001BD66                 db  0Eh
.eh_frame:000000000001BD67                 db  10h
.eh_frame:000000000001BD68                 db  8Fh
.eh_frame:000000000001BD69                 db    2
.eh_frame:000000000001BD6A                 db  42h ; B
.eh_frame:000000000001BD6B                 db  0Eh
.eh_frame:000000000001BD6C                 db  18h
.eh_frame:000000000001BD6D                 db  8Eh
.eh_frame:000000000001BD6E                 db    3
.eh_frame:000000000001BD6F                 db  45h ; E
.eh_frame:000000000001BD70                 db  0Eh
.eh_frame:000000000001BD71                 db  20h
.eh_frame:000000000001BD72                 db  8Dh
.eh_frame:000000000001BD73                 db    4
.eh_frame:000000000001BD74                 db  42h ; B
.eh_frame:000000000001BD75                 db  0Eh
.eh_frame:000000000001BD76                 db  28h ; (
.eh_frame:000000000001BD77                 db  8Ch
.eh_frame:000000000001BD78                 db    5
.eh_frame:000000000001BD79                 db  44h ; D
.eh_frame:000000000001BD7A                 db  0Eh
.eh_frame:000000000001BD7B                 db  30h ; 0
.eh_frame:000000000001BD7C                 db  86h
.eh_frame:000000000001BD7D                 db    6
.eh_frame:000000000001BD7E                 db  41h ; A
.eh_frame:000000000001BD7F                 db  0Eh
.eh_frame:000000000001BD80                 db  38h ; 8
.eh_frame:000000000001BD81                 db  83h
.eh_frame:000000000001BD82                 db    7
.eh_frame:000000000001BD83                 db  47h ; G
.eh_frame:000000000001BD84                 db  0Eh
.eh_frame:000000000001BD85                 db  60h ; `
.eh_frame:000000000001BD86                 db    2
.eh_frame:000000000001BD87                 db 0DEh
.eh_frame:000000000001BD88                 db  0Ah
.eh_frame:000000000001BD89                 db  0Eh
.eh_frame:000000000001BD8A                 db  38h ; 8
.eh_frame:000000000001BD8B                 db  41h ; A
.eh_frame:000000000001BD8C                 db  0Eh
.eh_frame:000000000001BD8D                 db  30h ; 0
.eh_frame:000000000001BD8E                 db  41h ; A
.eh_frame:000000000001BD8F                 db  0Eh
.eh_frame:000000000001BD90                 db  28h ; (
.eh_frame:000000000001BD91                 db  42h ; B
.eh_frame:000000000001BD92                 db  0Eh
.eh_frame:000000000001BD93                 db  20h
.eh_frame:000000000001BD94                 db  42h ; B
.eh_frame:000000000001BD95                 db  0Eh
.eh_frame:000000000001BD96                 db  18h
.eh_frame:000000000001BD97                 db  42h ; B
.eh_frame:000000000001BD98                 db  0Eh
.eh_frame:000000000001BD99                 db  10h
.eh_frame:000000000001BD9A                 db  42h ; B
.eh_frame:000000000001BD9B                 db  0Eh
.eh_frame:000000000001BD9C                 db    8
.eh_frame:000000000001BD9D                 db  41h ; A
.eh_frame:000000000001BD9E                 db  0Bh
.eh_frame:000000000001BD9F                 db    0
.eh_frame:000000000001BDA0                 db  28h ; (
.eh_frame:000000000001BDA1                 db    0
.eh_frame:000000000001BDA2                 db    0
.eh_frame:000000000001BDA3                 db    0
.eh_frame:000000000001BDA4                 db  84h
.eh_frame:000000000001BDA5                 db  24h ; $
.eh_frame:000000000001BDA6                 db    0
.eh_frame:000000000001BDA7                 db    0
.eh_frame:000000000001BDA8                 db 0B8h
.eh_frame:000000000001BDA9                 db  6Dh ; m
.eh_frame:000000000001BDAA                 db 0FFh
.eh_frame:000000000001BDAB                 db 0FFh
.eh_frame:000000000001BDAC                 db  73h ; s
.eh_frame:000000000001BDAD                 db    0
.eh_frame:000000000001BDAE                 db    0
.eh_frame:000000000001BDAF                 db    0
.eh_frame:000000000001BDB0                 db    0
.eh_frame:000000000001BDB1                 db  46h ; F
.eh_frame:000000000001BDB2                 db  0Eh
.eh_frame:000000000001BDB3                 db  10h
.eh_frame:000000000001BDB4                 db  8Ch
.eh_frame:000000000001BDB5                 db    2
.eh_frame:000000000001BDB6                 db  46h ; F
.eh_frame:000000000001BDB7                 db  0Eh
.eh_frame:000000000001BDB8                 db  18h
.eh_frame:000000000001BDB9                 db  86h
.eh_frame:000000000001BDBA                 db    3
.eh_frame:000000000001BDBB                 db  44h ; D
.eh_frame:000000000001BDBC                 db  0Eh
.eh_frame:000000000001BDBD                 db  20h
.eh_frame:000000000001BDBE                 db  83h
.eh_frame:000000000001BDBF                 db    4
.eh_frame:000000000001BDC0                 db  7Fh ; 
.eh_frame:000000000001BDC1                 db  0Ah
.eh_frame:000000000001BDC2                 db  0Eh
.eh_frame:000000000001BDC3                 db  18h
.eh_frame:000000000001BDC4                 db  41h ; A
.eh_frame:000000000001BDC5                 db  0Eh
.eh_frame:000000000001BDC6                 db  10h
.eh_frame:000000000001BDC7                 db  42h ; B
.eh_frame:000000000001BDC8                 db  0Eh
.eh_frame:000000000001BDC9                 db    8
.eh_frame:000000000001BDCA                 db  4Eh ; N
.eh_frame:000000000001BDCB                 db  0Bh
.eh_frame:000000000001BDCC                 db  5Ch ; \
.eh_frame:000000000001BDCD                 db    0
.eh_frame:000000000001BDCE                 db    0
.eh_frame:000000000001BDCF                 db    0
.eh_frame:000000000001BDD0                 db 0B0h
.eh_frame:000000000001BDD1                 db  24h ; $
.eh_frame:000000000001BDD2                 db    0
.eh_frame:000000000001BDD3                 db    0
.eh_frame:000000000001BDD4                 db  0Ch
.eh_frame:000000000001BDD5                 db  6Eh ; n
.eh_frame:000000000001BDD6                 db 0FFh
.eh_frame:000000000001BDD7                 db 0FFh
.eh_frame:000000000001BDD8                 db  20h
.eh_frame:000000000001BDD9                 db    1
.eh_frame:000000000001BDDA                 db    0
.eh_frame:000000000001BDDB                 db    0
.eh_frame:000000000001BDDC                 db    0
.eh_frame:000000000001BDDD                 db  42h ; B
.eh_frame:000000000001BDDE                 db  0Eh
.eh_frame:000000000001BDDF                 db  10h
.eh_frame:000000000001BDE0                 db  8Fh
.eh_frame:000000000001BDE1                 db    2
.eh_frame:000000000001BDE2                 db  42h ; B
.eh_frame:000000000001BDE3                 db  0Eh
.eh_frame:000000000001BDE4                 db  18h
.eh_frame:000000000001BDE5                 db  8Eh
.eh_frame:000000000001BDE6                 db    3
.eh_frame:000000000001BDE7                 db  45h ; E
.eh_frame:000000000001BDE8                 db  0Eh
.eh_frame:000000000001BDE9                 db  20h
.eh_frame:000000000001BDEA                 db  8Dh
.eh_frame:000000000001BDEB                 db    4
.eh_frame:000000000001BDEC                 db  42h ; B
.eh_frame:000000000001BDED                 db  0Eh
.eh_frame:000000000001BDEE                 db  28h ; (
.eh_frame:000000000001BDEF                 db  8Ch
.eh_frame:000000000001BDF0                 db    5
.eh_frame:000000000001BDF1                 db  43h ; C
.eh_frame:000000000001BDF2                 db  0Eh
.eh_frame:000000000001BDF3                 db  30h ; 0
.eh_frame:000000000001BDF4                 db  86h
.eh_frame:000000000001BDF5                 db    6
.eh_frame:000000000001BDF6                 db  41h ; A
.eh_frame:000000000001BDF7                 db  0Eh
.eh_frame:000000000001BDF8                 db  38h ; 8
.eh_frame:000000000001BDF9                 db  83h
.eh_frame:000000000001BDFA                 db    7
.eh_frame:000000000001BDFB                 db  56h ; V
.eh_frame:000000000001BDFC                 db  0Eh
.eh_frame:000000000001BDFD                 db  40h ; @
.eh_frame:000000000001BDFE                 db    2
.eh_frame:000000000001BDFF                 db 0D3h
.eh_frame:000000000001BE00                 db  0Ah
.eh_frame:000000000001BE01                 db  0Eh
.eh_frame:000000000001BE02                 db  38h ; 8
.eh_frame:000000000001BE03                 db  41h ; A
.eh_frame:000000000001BE04                 db  0Eh
.eh_frame:000000000001BE05                 db  30h ; 0
.eh_frame:000000000001BE06                 db  41h ; A
.eh_frame:000000000001BE07                 db  0Eh
.eh_frame:000000000001BE08                 db  28h ; (
.eh_frame:000000000001BE09                 db  42h ; B
.eh_frame:000000000001BE0A                 db  0Eh
.eh_frame:000000000001BE0B                 db  20h
.eh_frame:000000000001BE0C                 db  42h ; B
.eh_frame:000000000001BE0D                 db  0Eh
.eh_frame:000000000001BE0E                 db  18h
.eh_frame:000000000001BE0F                 db  42h ; B
.eh_frame:000000000001BE10                 db  0Eh
.eh_frame:000000000001BE11                 db  10h
.eh_frame:000000000001BE12                 db  42h ; B
.eh_frame:000000000001BE13                 db  0Eh
.eh_frame:000000000001BE14                 db    8
.eh_frame:000000000001BE15                 db  46h ; F
.eh_frame:000000000001BE16                 db  0Bh
.eh_frame:000000000001BE17                 db  44h ; D
.eh_frame:000000000001BE18                 db  0Eh
.eh_frame:000000000001BE19                 db  38h ; 8
.eh_frame:000000000001BE1A                 db  46h ; F
.eh_frame:000000000001BE1B                 db  0Eh
.eh_frame:000000000001BE1C                 db  30h ; 0
.eh_frame:000000000001BE1D                 db  41h ; A
.eh_frame:000000000001BE1E                 db  0Eh
.eh_frame:000000000001BE1F                 db  28h ; (
.eh_frame:000000000001BE20                 db  42h ; B
.eh_frame:000000000001BE21                 db  0Eh
.eh_frame:000000000001BE22                 db  20h
.eh_frame:000000000001BE23                 db  42h ; B
.eh_frame:000000000001BE24                 db  0Eh
.eh_frame:000000000001BE25                 db  18h
.eh_frame:000000000001BE26                 db  42h ; B
.eh_frame:000000000001BE27                 db  0Eh
.eh_frame:000000000001BE28                 db  10h
.eh_frame:000000000001BE29                 db  42h ; B
.eh_frame:000000000001BE2A                 db  0Eh
.eh_frame:000000000001BE2B                 db    8
.eh_frame:000000000001BE2C                 db  48h ; H
.eh_frame:000000000001BE2D                 db    0
.eh_frame:000000000001BE2E                 db    0
.eh_frame:000000000001BE2F                 db    0
.eh_frame:000000000001BE30                 db  10h
.eh_frame:000000000001BE31                 db  25h ; %
.eh_frame:000000000001BE32                 db    0
.eh_frame:000000000001BE33                 db    0
.eh_frame:000000000001BE34                 db 0CCh
.eh_frame:000000000001BE35                 db  6Eh ; n
.eh_frame:000000000001BE36                 db 0FFh
.eh_frame:000000000001BE37                 db 0FFh
.eh_frame:000000000001BE38                 db  6Dh ; m
.eh_frame:000000000001BE39                 db    0
.eh_frame:000000000001BE3A                 db    0
.eh_frame:000000000001BE3B                 db    0
.eh_frame:000000000001BE3C                 db    0
.eh_frame:000000000001BE3D                 db  42h ; B
.eh_frame:000000000001BE3E                 db  0Eh
.eh_frame:000000000001BE3F                 db  10h
.eh_frame:000000000001BE40                 db  8Fh
.eh_frame:000000000001BE41                 db    2
.eh_frame:000000000001BE42                 db  42h ; B
.eh_frame:000000000001BE43                 db  0Eh
.eh_frame:000000000001BE44                 db  18h
.eh_frame:000000000001BE45                 db  8Eh
.eh_frame:000000000001BE46                 db    3
.eh_frame:000000000001BE47                 db  45h ; E
.eh_frame:000000000001BE48                 db  0Eh
.eh_frame:000000000001BE49                 db  20h
.eh_frame:000000000001BE4A                 db  8Dh
.eh_frame:000000000001BE4B                 db    4
.eh_frame:000000000001BE4C                 db  42h ; B
.eh_frame:000000000001BE4D                 db  0Eh
.eh_frame:000000000001BE4E                 db  28h ; (
.eh_frame:000000000001BE4F                 db  8Ch
.eh_frame:000000000001BE50                 db    5
.eh_frame:000000000001BE51                 db  44h ; D
.eh_frame:000000000001BE52                 db  0Eh
.eh_frame:000000000001BE53                 db  30h ; 0
.eh_frame:000000000001BE54                 db  86h
.eh_frame:000000000001BE55                 db    6
.eh_frame:000000000001BE56                 db  41h ; A
.eh_frame:000000000001BE57                 db  0Eh
.eh_frame:000000000001BE58                 db  38h ; 8
.eh_frame:000000000001BE59                 db  83h
.eh_frame:000000000001BE5A                 db    7
.eh_frame:000000000001BE5B                 db  50h ; P
.eh_frame:000000000001BE5C                 db  0Eh
.eh_frame:000000000001BE5D                 db  40h ; @
.eh_frame:000000000001BE5E                 db  5Ah ; Z
.eh_frame:000000000001BE5F                 db  0Ah
.eh_frame:000000000001BE60                 db  0Eh
.eh_frame:000000000001BE61                 db  38h ; 8
.eh_frame:000000000001BE62                 db  41h ; A
.eh_frame:000000000001BE63                 db  0Eh
.eh_frame:000000000001BE64                 db  30h ; 0
.eh_frame:000000000001BE65                 db  41h ; A
.eh_frame:000000000001BE66                 db  0Eh
.eh_frame:000000000001BE67                 db  28h ; (
.eh_frame:000000000001BE68                 db  42h ; B
.eh_frame:000000000001BE69                 db  0Eh
.eh_frame:000000000001BE6A                 db  20h
.eh_frame:000000000001BE6B                 db  42h ; B
.eh_frame:000000000001BE6C                 db  0Eh
.eh_frame:000000000001BE6D                 db  18h
.eh_frame:000000000001BE6E                 db  42h ; B
.eh_frame:000000000001BE6F                 db  0Eh
.eh_frame:000000000001BE70                 db  10h
.eh_frame:000000000001BE71                 db  42h ; B
.eh_frame:000000000001BE72                 db  0Eh
.eh_frame:000000000001BE73                 db    8
.eh_frame:000000000001BE74                 db  41h ; A
.eh_frame:000000000001BE75                 db  0Bh
.eh_frame:000000000001BE76                 db    0
.eh_frame:000000000001BE77                 db    0
.eh_frame:000000000001BE78                 db  3Ch ; <
.eh_frame:000000000001BE79                 db    0
.eh_frame:000000000001BE7A                 db    0
.eh_frame:000000000001BE7B                 db    0
.eh_frame:000000000001BE7C                 db  5Ch ; \
.eh_frame:000000000001BE7D                 db  25h ; %
.eh_frame:000000000001BE7E                 db    0
.eh_frame:000000000001BE7F                 db    0
.eh_frame:000000000001BE80                 db 0F0h
.eh_frame:000000000001BE81                 db  6Eh ; n
.eh_frame:000000000001BE82                 db 0FFh
.eh_frame:000000000001BE83                 db 0FFh
.eh_frame:000000000001BE84                 db  4Dh ; M
.eh_frame:000000000001BE85                 db    0
.eh_frame:000000000001BE86                 db    0
.eh_frame:000000000001BE87                 db    0
.eh_frame:000000000001BE88                 db    0
.eh_frame:000000000001BE89                 db  42h ; B
.eh_frame:000000000001BE8A                 db  0Eh
.eh_frame:000000000001BE8B                 db  10h
.eh_frame:000000000001BE8C                 db  8Eh
.eh_frame:000000000001BE8D                 db    2
.eh_frame:000000000001BE8E                 db  42h ; B
.eh_frame:000000000001BE8F                 db  0Eh
.eh_frame:000000000001BE90                 db  18h
.eh_frame:000000000001BE91                 db  8Dh
.eh_frame:000000000001BE92                 db    3
.eh_frame:000000000001BE93                 db  42h ; B
.eh_frame:000000000001BE94                 db  0Eh
.eh_frame:000000000001BE95                 db  20h
.eh_frame:000000000001BE96                 db  8Ch
.eh_frame:000000000001BE97                 db    4
.eh_frame:000000000001BE98                 db  41h ; A
.eh_frame:000000000001BE99                 db  0Eh
.eh_frame:000000000001BE9A                 db  28h ; (
.eh_frame:000000000001BE9B                 db  86h
.eh_frame:000000000001BE9C                 db    5
.eh_frame:000000000001BE9D                 db  41h ; A
.eh_frame:000000000001BE9E                 db  0Eh
.eh_frame:000000000001BE9F                 db  30h ; 0
.eh_frame:000000000001BEA0                 db  83h
.eh_frame:000000000001BEA1                 db    6
.eh_frame:000000000001BEA2                 db  7Ah ; z
.eh_frame:000000000001BEA3                 db  0Eh
.eh_frame:000000000001BEA4                 db  28h ; (
.eh_frame:000000000001BEA5                 db  44h ; D
.eh_frame:000000000001BEA6                 db  0Eh
.eh_frame:000000000001BEA7                 db  20h
.eh_frame:000000000001BEA8                 db  42h ; B
.eh_frame:000000000001BEA9                 db  0Eh
.eh_frame:000000000001BEAA                 db  18h
.eh_frame:000000000001BEAB                 db  42h ; B
.eh_frame:000000000001BEAC                 db  0Eh
.eh_frame:000000000001BEAD                 db  10h
.eh_frame:000000000001BEAE                 db  42h ; B
.eh_frame:000000000001BEAF                 db  0Eh
.eh_frame:000000000001BEB0                 db    8
.eh_frame:000000000001BEB1                 db    0
.eh_frame:000000000001BEB2                 db    0
.eh_frame:000000000001BEB3                 db    0
.eh_frame:000000000001BEB4                 db    0
.eh_frame:000000000001BEB5                 db    0
.eh_frame:000000000001BEB6                 db    0
.eh_frame:000000000001BEB7                 db    0
.eh_frame:000000000001BEB8                 db  4Ch ; L
.eh_frame:000000000001BEB9                 db    0
.eh_frame:000000000001BEBA                 db    0
.eh_frame:000000000001BEBB                 db    0
.eh_frame:000000000001BEBC                 db  9Ch
.eh_frame:000000000001BEBD                 db  25h ; %
.eh_frame:000000000001BEBE                 db    0
.eh_frame:000000000001BEBF                 db    0
.eh_frame:000000000001BEC0                 db    0
.eh_frame:000000000001BEC1                 db  6Fh ; o
.eh_frame:000000000001BEC2                 db 0FFh
.eh_frame:000000000001BEC3                 db 0FFh
.eh_frame:000000000001BEC4                 db  7Dh ; }
.eh_frame:000000000001BEC5                 db    0
.eh_frame:000000000001BEC6                 db    0
.eh_frame:000000000001BEC7                 db    0
.eh_frame:000000000001BEC8                 db    0
.eh_frame:000000000001BEC9                 db  42h ; B
.eh_frame:000000000001BECA                 db  0Eh
.eh_frame:000000000001BECB                 db  10h
.eh_frame:000000000001BECC                 db  8Ch
.eh_frame:000000000001BECD                 db    2
.eh_frame:000000000001BECE                 db  41h ; A
.eh_frame:000000000001BECF                 db  0Eh
.eh_frame:000000000001BED0                 db  18h
.eh_frame:000000000001BED1                 db  86h
.eh_frame:000000000001BED2                 db    3
.eh_frame:000000000001BED3                 db  44h ; D
.eh_frame:000000000001BED4                 db  0Eh
.eh_frame:000000000001BED5                 db  20h
.eh_frame:000000000001BED6                 db  83h
.eh_frame:000000000001BED7                 db    4
.eh_frame:000000000001BED8                 db  69h ; i
.eh_frame:000000000001BED9                 db  0Ah
.eh_frame:000000000001BEDA                 db  0Eh
.eh_frame:000000000001BEDB                 db  18h
.eh_frame:000000000001BEDC                 db  41h ; A
.eh_frame:000000000001BEDD                 db  0Eh
.eh_frame:000000000001BEDE                 db  10h
.eh_frame:000000000001BEDF                 db  42h ; B
.eh_frame:000000000001BEE0                 db  0Eh
.eh_frame:000000000001BEE1                 db    8
.eh_frame:000000000001BEE2                 db  45h ; E
.eh_frame:000000000001BEE3                 db  0Bh
.eh_frame:000000000001BEE4                 db  55h ; U
.eh_frame:000000000001BEE5                 db  0Ah
.eh_frame:000000000001BEE6                 db  0Eh
.eh_frame:000000000001BEE7                 db  18h
.eh_frame:000000000001BEE8                 db  41h ; A
.eh_frame:000000000001BEE9                 db  0Eh
.eh_frame:000000000001BEEA                 db  10h
.eh_frame:000000000001BEEB                 db  42h ; B
.eh_frame:000000000001BEEC                 db  0Eh
.eh_frame:000000000001BEED                 db    8
.eh_frame:000000000001BEEE                 db  48h ; H
.eh_frame:000000000001BEEF                 db  0Bh
.eh_frame:000000000001BEF0                 db  41h ; A
.eh_frame:000000000001BEF1                 db  0Ah
.eh_frame:000000000001BEF2                 db  0Eh
.eh_frame:000000000001BEF3                 db  18h
.eh_frame:000000000001BEF4                 db  46h ; F
.eh_frame:000000000001BEF5                 db  0Eh
.eh_frame:000000000001BEF6                 db  10h
.eh_frame:000000000001BEF7                 db  42h ; B
.eh_frame:000000000001BEF8                 db  0Eh
.eh_frame:000000000001BEF9                 db    8
.eh_frame:000000000001BEFA                 db  47h ; G
.eh_frame:000000000001BEFB                 db  0Bh
.eh_frame:000000000001BEFC                 db  49h ; I
.eh_frame:000000000001BEFD                 db  0Eh
.eh_frame:000000000001BEFE                 db  18h
.eh_frame:000000000001BEFF                 db  41h ; A
.eh_frame:000000000001BF00                 db  0Eh
.eh_frame:000000000001BF01                 db  10h
.eh_frame:000000000001BF02                 db  42h ; B
.eh_frame:000000000001BF03                 db  0Eh
.eh_frame:000000000001BF04                 db    8
.eh_frame:000000000001BF05                 db    0
.eh_frame:000000000001BF06                 db    0
.eh_frame:000000000001BF07                 db    0
.eh_frame:000000000001BF08                 db  4Ch ; L
.eh_frame:000000000001BF09                 db    0
.eh_frame:000000000001BF0A                 db    0
.eh_frame:000000000001BF0B                 db    0
.eh_frame:000000000001BF0C                 db 0ECh
.eh_frame:000000000001BF0D                 db  25h ; %
.eh_frame:000000000001BF0E                 db    0
.eh_frame:000000000001BF0F                 db    0
.eh_frame:000000000001BF10                 db  30h ; 0
.eh_frame:000000000001BF11                 db  6Fh ; o
.eh_frame:000000000001BF12                 db 0FFh
.eh_frame:000000000001BF13                 db 0FFh
.eh_frame:000000000001BF14                 db  96h
.eh_frame:000000000001BF15                 db    0
.eh_frame:000000000001BF16                 db    0
.eh_frame:000000000001BF17                 db    0
.eh_frame:000000000001BF18                 db    0
.eh_frame:000000000001BF19                 db  42h ; B
.eh_frame:000000000001BF1A                 db  0Eh
.eh_frame:000000000001BF1B                 db  10h
.eh_frame:000000000001BF1C                 db  8Eh
.eh_frame:000000000001BF1D                 db    2
.eh_frame:000000000001BF1E                 db  42h ; B
.eh_frame:000000000001BF1F                 db  0Eh
.eh_frame:000000000001BF20                 db  18h
.eh_frame:000000000001BF21                 db  8Dh
.eh_frame:000000000001BF22                 db    3
.eh_frame:000000000001BF23                 db  42h ; B
.eh_frame:000000000001BF24                 db  0Eh
.eh_frame:000000000001BF25                 db  20h
.eh_frame:000000000001BF26                 db  8Ch
.eh_frame:000000000001BF27                 db    4
.eh_frame:000000000001BF28                 db  41h ; A
.eh_frame:000000000001BF29                 db  0Eh
.eh_frame:000000000001BF2A                 db  28h ; (
.eh_frame:000000000001BF2B                 db  86h
.eh_frame:000000000001BF2C                 db    5
.eh_frame:000000000001BF2D                 db  41h ; A
.eh_frame:000000000001BF2E                 db  0Eh
.eh_frame:000000000001BF2F                 db  30h ; 0
.eh_frame:000000000001BF30                 db  83h
.eh_frame:000000000001BF31                 db    6
.eh_frame:000000000001BF32                 db  5Eh ; ^
.eh_frame:000000000001BF33                 db  0Ah
.eh_frame:000000000001BF34                 db  0Eh
.eh_frame:000000000001BF35                 db  28h ; (
.eh_frame:000000000001BF36                 db  41h ; A
.eh_frame:000000000001BF37                 db  0Eh
.eh_frame:000000000001BF38                 db  20h
.eh_frame:000000000001BF39                 db  42h ; B
.eh_frame:000000000001BF3A                 db  0Eh
.eh_frame:000000000001BF3B                 db  18h
.eh_frame:000000000001BF3C                 db  42h ; B
.eh_frame:000000000001BF3D                 db  0Eh
.eh_frame:000000000001BF3E                 db  10h
.eh_frame:000000000001BF3F                 db  42h ; B
.eh_frame:000000000001BF40                 db  0Eh
.eh_frame:000000000001BF41                 db    8
.eh_frame:000000000001BF42                 db  43h ; C
.eh_frame:000000000001BF43                 db  0Bh
.eh_frame:000000000001BF44                 db  7Ch ; |
.eh_frame:000000000001BF45                 db  0Ah
.eh_frame:000000000001BF46                 db  0Eh
.eh_frame:000000000001BF47                 db  28h ; (
.eh_frame:000000000001BF48                 db  41h ; A
.eh_frame:000000000001BF49                 db  0Eh
.eh_frame:000000000001BF4A                 db  20h
.eh_frame:000000000001BF4B                 db  42h ; B
.eh_frame:000000000001BF4C                 db  0Eh
.eh_frame:000000000001BF4D                 db  18h
.eh_frame:000000000001BF4E                 db  42h ; B
.eh_frame:000000000001BF4F                 db  0Eh
.eh_frame:000000000001BF50                 db  10h
.eh_frame:000000000001BF51                 db  42h ; B
.eh_frame:000000000001BF52                 db  0Eh
.eh_frame:000000000001BF53                 db    8
.eh_frame:000000000001BF54                 db  45h ; E
.eh_frame:000000000001BF55                 db  0Bh
.eh_frame:000000000001BF56                 db    0
.eh_frame:000000000001BF57                 db    0
.eh_frame:000000000001BF58                 db  10h
.eh_frame:000000000001BF59                 db    0
.eh_frame:000000000001BF5A                 db    0
.eh_frame:000000000001BF5B                 db    0
.eh_frame:000000000001BF5C                 db  3Ch ; <
.eh_frame:000000000001BF5D                 db  26h ; &
.eh_frame:000000000001BF5E                 db    0
.eh_frame:000000000001BF5F                 db    0
.eh_frame:000000000001BF60                 db  80h
.eh_frame:000000000001BF61                 db  6Fh ; o
.eh_frame:000000000001BF62                 db 0FFh
.eh_frame:000000000001BF63                 db 0FFh
.eh_frame:000000000001BF64                 db  0Ah
.eh_frame:000000000001BF65                 db    0
.eh_frame:000000000001BF66                 db    0
.eh_frame:000000000001BF67                 db    0
.eh_frame:000000000001BF68                 db    0
.eh_frame:000000000001BF69                 db    0
.eh_frame:000000000001BF6A                 db    0
.eh_frame:000000000001BF6B                 db    0
.eh_frame:000000000001BF6C                 db  18h
.eh_frame:000000000001BF6D                 db    0
.eh_frame:000000000001BF6E                 db    0
.eh_frame:000000000001BF6F                 db    0
.eh_frame:000000000001BF70                 db  50h ; P
.eh_frame:000000000001BF71                 db  26h ; &
.eh_frame:000000000001BF72                 db    0
.eh_frame:000000000001BF73                 db    0
.eh_frame:000000000001BF74                 db  7Ch ; |
.eh_frame:000000000001BF75                 db  6Fh ; o
.eh_frame:000000000001BF76                 db 0FFh
.eh_frame:000000000001BF77                 db 0FFh
.eh_frame:000000000001BF78                 db  41h ; A
.eh_frame:000000000001BF79                 db    0
.eh_frame:000000000001BF7A                 db    0
.eh_frame:000000000001BF7B                 db    0
.eh_frame:000000000001BF7C                 db    0
.eh_frame:000000000001BF7D                 db  44h ; D
.eh_frame:000000000001BF7E                 db  0Eh
.eh_frame:000000000001BF7F                 db  30h ; 0
.eh_frame:000000000001BF80                 db  77h ; w
.eh_frame:000000000001BF81                 db  0Ah
.eh_frame:000000000001BF82                 db  0Eh
.eh_frame:000000000001BF83                 db    8
.eh_frame:000000000001BF84                 db  41h ; A
.eh_frame:000000000001BF85                 db  0Bh
.eh_frame:000000000001BF86                 db    0
.eh_frame:000000000001BF87                 db    0
.eh_frame:000000000001BF88                 db  1Ch
.eh_frame:000000000001BF89                 db    0
.eh_frame:000000000001BF8A                 db    0
.eh_frame:000000000001BF8B                 db    0
.eh_frame:000000000001BF8C                 db  6Ch ; l
.eh_frame:000000000001BF8D                 db  26h ; &
.eh_frame:000000000001BF8E                 db    0
.eh_frame:000000000001BF8F                 db    0
.eh_frame:000000000001BF90                 db 0B0h
.eh_frame:000000000001BF91                 db  6Fh ; o
.eh_frame:000000000001BF92                 db 0FFh
.eh_frame:000000000001BF93                 db 0FFh
.eh_frame:000000000001BF94                 db  60h ; `
.eh_frame:000000000001BF95                 db    0
.eh_frame:000000000001BF96                 db    0
.eh_frame:000000000001BF97                 db    0
.eh_frame:000000000001BF98                 db    0
.eh_frame:000000000001BF99                 db  44h ; D
.eh_frame:000000000001BF9A                 db  0Eh
.eh_frame:000000000001BF9B                 db  10h
.eh_frame:000000000001BF9C                 db  75h ; u
.eh_frame:000000000001BF9D                 db  0Ah
.eh_frame:000000000001BF9E                 db  0Eh
.eh_frame:000000000001BF9F                 db    8
.eh_frame:000000000001BFA0                 db  47h ; G
.eh_frame:000000000001BFA1                 db  0Bh
.eh_frame:000000000001BFA2                 db  5Fh ; _
.eh_frame:000000000001BFA3                 db  0Eh
.eh_frame:000000000001BFA4                 db    8
.eh_frame:000000000001BFA5                 db    0
.eh_frame:000000000001BFA6                 db    0
.eh_frame:000000000001BFA7                 db    0
.eh_frame:000000000001BFA8                 db  14h
.eh_frame:000000000001BFA9                 db    0
.eh_frame:000000000001BFAA                 db    0
.eh_frame:000000000001BFAB                 db    0
.eh_frame:000000000001BFAC                 db  8Ch
.eh_frame:000000000001BFAD                 db  26h ; &
.eh_frame:000000000001BFAE                 db    0
.eh_frame:000000000001BFAF                 db    0
.eh_frame:000000000001BFB0                 db 0F0h
.eh_frame:000000000001BFB1                 db  6Fh ; o
.eh_frame:000000000001BFB2                 db 0FFh
.eh_frame:000000000001BFB3                 db 0FFh
.eh_frame:000000000001BFB4                 db  36h ; 6
.eh_frame:000000000001BFB5                 db    0
.eh_frame:000000000001BFB6                 db    0
.eh_frame:000000000001BFB7                 db    0
.eh_frame:000000000001BFB8                 db    0
.eh_frame:000000000001BFB9                 db    0
.eh_frame:000000000001BFBA                 db    0
.eh_frame:000000000001BFBB                 db    0
.eh_frame:000000000001BFBC                 db    0
.eh_frame:000000000001BFBD                 db    0
.eh_frame:000000000001BFBE                 db    0
.eh_frame:000000000001BFBF                 db    0
.eh_frame:000000000001BFC0                 db  1Ch
.eh_frame:000000000001BFC1                 db    0
.eh_frame:000000000001BFC2                 db    0
.eh_frame:000000000001BFC3                 db    0
.eh_frame:000000000001BFC4                 db 0A4h
.eh_frame:000000000001BFC5                 db  26h ; &
.eh_frame:000000000001BFC6                 db    0
.eh_frame:000000000001BFC7                 db    0
.eh_frame:000000000001BFC8                 db  18h
.eh_frame:000000000001BFC9                 db  70h ; p
.eh_frame:000000000001BFCA                 db 0FFh
.eh_frame:000000000001BFCB                 db 0FFh
.eh_frame:000000000001BFCC                 db  3Ch ; <
.eh_frame:000000000001BFCD                 db    0
.eh_frame:000000000001BFCE                 db    0
.eh_frame:000000000001BFCF                 db    0
.eh_frame:000000000001BFD0                 db    0
.eh_frame:000000000001BFD1                 db  44h ; D
.eh_frame:000000000001BFD2                 db  0Eh
.eh_frame:000000000001BFD3                 db  10h
.eh_frame:000000000001BFD4                 db  61h ; a
.eh_frame:000000000001BFD5                 db  0Ah
.eh_frame:000000000001BFD6                 db  0Eh
.eh_frame:000000000001BFD7                 db    8
.eh_frame:000000000001BFD8                 db  4Bh ; K
.eh_frame:000000000001BFD9                 db  0Bh
.eh_frame:000000000001BFDA                 db  4Bh ; K
.eh_frame:000000000001BFDB                 db  0Eh
.eh_frame:000000000001BFDC                 db    8
.eh_frame:000000000001BFDD                 db    0
.eh_frame:000000000001BFDE                 db    0
.eh_frame:000000000001BFDF                 db    0
.eh_frame:000000000001BFE0                 db  4Ch ; L
.eh_frame:000000000001BFE1                 db    0
.eh_frame:000000000001BFE2                 db    0
.eh_frame:000000000001BFE3                 db    0
.eh_frame:000000000001BFE4                 db 0C4h
.eh_frame:000000000001BFE5                 db  26h ; &
.eh_frame:000000000001BFE6                 db    0
.eh_frame:000000000001BFE7                 db    0
.eh_frame:000000000001BFE8                 db  38h ; 8
.eh_frame:000000000001BFE9                 db  70h ; p
.eh_frame:000000000001BFEA                 db 0FFh
.eh_frame:000000000001BFEB                 db 0FFh
.eh_frame:000000000001BFEC                 db  15h
.eh_frame:000000000001BFED                 db    2
.eh_frame:000000000001BFEE                 db    0
.eh_frame:000000000001BFEF                 db    0
.eh_frame:000000000001BFF0                 db    0
.eh_frame:000000000001BFF1                 db  42h ; B
.eh_frame:000000000001BFF2                 db  0Eh
.eh_frame:000000000001BFF3                 db  10h
.eh_frame:000000000001BFF4                 db  8Fh
.eh_frame:000000000001BFF5                 db    2
.eh_frame:000000000001BFF6                 db  42h ; B
.eh_frame:000000000001BFF7                 db  0Eh
.eh_frame:000000000001BFF8                 db  18h
.eh_frame:000000000001BFF9                 db  8Eh
.eh_frame:000000000001BFFA                 db    3
.eh_frame:000000000001BFFB                 db  45h ; E
.eh_frame:000000000001BFFC                 db  0Eh
.eh_frame:000000000001BFFD                 db  20h
.eh_frame:000000000001BFFE                 db  8Dh
.eh_frame:000000000001BFFF                 db    4
.eh_frame:000000000001C000                 db  42h ; B
.eh_frame:000000000001C001                 db  0Eh
.eh_frame:000000000001C002                 db  28h ; (
.eh_frame:000000000001C003                 db  8Ch
.eh_frame:000000000001C004                 db    5
.eh_frame:000000000001C005                 db  44h ; D
.eh_frame:000000000001C006                 db  0Eh
.eh_frame:000000000001C007                 db  30h ; 0
.eh_frame:000000000001C008                 db  86h
.eh_frame:000000000001C009                 db    6
.eh_frame:000000000001C00A                 db  41h ; A
.eh_frame:000000000001C00B                 db  0Eh
.eh_frame:000000000001C00C                 db  38h ; 8
.eh_frame:000000000001C00D                 db  83h
.eh_frame:000000000001C00E                 db    7
.eh_frame:000000000001C00F                 db  4Fh ; O
.eh_frame:000000000001C010                 db  0Eh
.eh_frame:000000000001C011                 db 0F0h
.eh_frame:000000000001C012                 db    1
.eh_frame:000000000001C013                 db    2
.eh_frame:000000000001C014                 db 0E5h
.eh_frame:000000000001C015                 db  0Ah
.eh_frame:000000000001C016                 db  0Eh
.eh_frame:000000000001C017                 db  38h ; 8
.eh_frame:000000000001C018                 db  41h ; A
.eh_frame:000000000001C019                 db  0Eh
.eh_frame:000000000001C01A                 db  30h ; 0
.eh_frame:000000000001C01B                 db  41h ; A
.eh_frame:000000000001C01C                 db  0Eh
.eh_frame:000000000001C01D                 db  28h ; (
.eh_frame:000000000001C01E                 db  42h ; B
.eh_frame:000000000001C01F                 db  0Eh
.eh_frame:000000000001C020                 db  20h
.eh_frame:000000000001C021                 db  42h ; B
.eh_frame:000000000001C022                 db  0Eh
.eh_frame:000000000001C023                 db  18h
.eh_frame:000000000001C024                 db  42h ; B
.eh_frame:000000000001C025                 db  0Eh
.eh_frame:000000000001C026                 db  10h
.eh_frame:000000000001C027                 db  42h ; B
.eh_frame:000000000001C028                 db  0Eh
.eh_frame:000000000001C029                 db    8
.eh_frame:000000000001C02A                 db  42h ; B
.eh_frame:000000000001C02B                 db  0Bh
.eh_frame:000000000001C02C                 db    0
.eh_frame:000000000001C02D                 db    0
.eh_frame:000000000001C02E                 db    0
.eh_frame:000000000001C02F                 db    0
.eh_frame:000000000001C030                 db  1Ch
.eh_frame:000000000001C031                 db    0
.eh_frame:000000000001C032                 db    0
.eh_frame:000000000001C033                 db    0
.eh_frame:000000000001C034                 db  14h
.eh_frame:000000000001C035                 db  27h ; '
.eh_frame:000000000001C036                 db    0
.eh_frame:000000000001C037                 db    0
.eh_frame:000000000001C038                 db    8
.eh_frame:000000000001C039                 db  72h ; r
.eh_frame:000000000001C03A                 db 0FFh
.eh_frame:000000000001C03B                 db 0FFh
.eh_frame:000000000001C03C                 db  6Eh ; n
.eh_frame:000000000001C03D                 db    0
.eh_frame:000000000001C03E                 db    0
.eh_frame:000000000001C03F                 db    0
.eh_frame:000000000001C040                 db    0
.eh_frame:000000000001C041                 db  44h ; D
.eh_frame:000000000001C042                 db  0Eh
.eh_frame:000000000001C043                 db  60h ; `
.eh_frame:000000000001C044                 db  7Eh ; ~
.eh_frame:000000000001C045                 db  0Ah
.eh_frame:000000000001C046                 db  0Eh
.eh_frame:000000000001C047                 db    8
.eh_frame:000000000001C048                 db  46h ; F
.eh_frame:000000000001C049                 db  0Bh
.eh_frame:000000000001C04A                 db    0
.eh_frame:000000000001C04B                 db    0
.eh_frame:000000000001C04C                 db    0
.eh_frame:000000000001C04D                 db    0
.eh_frame:000000000001C04E                 db    0
.eh_frame:000000000001C04F                 db    0
.eh_frame:000000000001C050                 db  18h
.eh_frame:000000000001C051                 db    0
.eh_frame:000000000001C052                 db    0
.eh_frame:000000000001C053                 db    0
.eh_frame:000000000001C054                 db  34h ; 4
.eh_frame:000000000001C055                 db  27h ; '
.eh_frame:000000000001C056                 db    0
.eh_frame:000000000001C057                 db    0
.eh_frame:000000000001C058                 db  58h ; X
.eh_frame:000000000001C059                 db  72h ; r
.eh_frame:000000000001C05A                 db 0FFh
.eh_frame:000000000001C05B                 db 0FFh
.eh_frame:000000000001C05C                 db  23h ; #
.eh_frame:000000000001C05D                 db    0
.eh_frame:000000000001C05E                 db    0
.eh_frame:000000000001C05F                 db    0
.eh_frame:000000000001C060                 db    0
.eh_frame:000000000001C061                 db  41h ; A
.eh_frame:000000000001C062                 db  0Eh
.eh_frame:000000000001C063                 db  10h
.eh_frame:000000000001C064                 db  83h
.eh_frame:000000000001C065                 db    2
.eh_frame:000000000001C066                 db  61h ; a
.eh_frame:000000000001C067                 db  0Eh
.eh_frame:000000000001C068                 db    8
.eh_frame:000000000001C069                 db    0
.eh_frame:000000000001C06A                 db    0
.eh_frame:000000000001C06B                 db    0
.eh_frame:000000000001C06C                 db  1Ch
.eh_frame:000000000001C06D                 db    0
.eh_frame:000000000001C06E                 db    0
.eh_frame:000000000001C06F                 db    0
.eh_frame:000000000001C070                 db  50h ; P
.eh_frame:000000000001C071                 db  27h ; '
.eh_frame:000000000001C072                 db    0
.eh_frame:000000000001C073                 db    0
.eh_frame:000000000001C074                 db  6Ch ; l
.eh_frame:000000000001C075                 db  72h ; r
.eh_frame:000000000001C076                 db 0FFh
.eh_frame:000000000001C077                 db 0FFh
.eh_frame:000000000001C078                 db  34h ; 4
.eh_frame:000000000001C079                 db    0
.eh_frame:000000000001C07A                 db    0
.eh_frame:000000000001C07B                 db    0
.eh_frame:000000000001C07C                 db    0
.eh_frame:000000000001C07D                 db  41h ; A
.eh_frame:000000000001C07E                 db  0Eh
.eh_frame:000000000001C07F                 db  10h
.eh_frame:000000000001C080                 db  83h
.eh_frame:000000000001C081                 db    2
.eh_frame:000000000001C082                 db  6Bh ; k
.eh_frame:000000000001C083                 db  0Ah
.eh_frame:000000000001C084                 db  0Eh
.eh_frame:000000000001C085                 db    8
.eh_frame:000000000001C086                 db  44h ; D
.eh_frame:000000000001C087                 db  0Bh
.eh_frame:000000000001C088                 db  43h ; C
.eh_frame:000000000001C089                 db  0Eh
.eh_frame:000000000001C08A                 db    8
.eh_frame:000000000001C08B                 db    0
.eh_frame:000000000001C08C                 db  10h
.eh_frame:000000000001C08D                 db    0
.eh_frame:000000000001C08E                 db    0
.eh_frame:000000000001C08F                 db    0
.eh_frame:000000000001C090                 db  70h ; p
.eh_frame:000000000001C091                 db  27h ; '
.eh_frame:000000000001C092                 db    0
.eh_frame:000000000001C093                 db    0
.eh_frame:000000000001C094                 db  8Ch
.eh_frame:000000000001C095                 db  72h ; r
.eh_frame:000000000001C096                 db 0FFh
.eh_frame:000000000001C097                 db 0FFh
.eh_frame:000000000001C098                 db    4
.eh_frame:000000000001C099                 db    0
.eh_frame:000000000001C09A                 db    0
.eh_frame:000000000001C09B                 db    0
.eh_frame:000000000001C09C                 db    0
.eh_frame:000000000001C09D                 db    0
.eh_frame:000000000001C09E                 db    0
.eh_frame:000000000001C09F                 db    0
.eh_frame:000000000001C0A0                 db  48h ; H
.eh_frame:000000000001C0A1                 db    0
.eh_frame:000000000001C0A2                 db    0
.eh_frame:000000000001C0A3                 db    0
.eh_frame:000000000001C0A4                 db  84h
.eh_frame:000000000001C0A5                 db  27h ; '
.eh_frame:000000000001C0A6                 db    0
.eh_frame:000000000001C0A7                 db    0
.eh_frame:000000000001C0A8                 db  88h
.eh_frame:000000000001C0A9                 db  72h ; r
.eh_frame:000000000001C0AA                 db 0FFh
.eh_frame:000000000001C0AB                 db 0FFh
.eh_frame:000000000001C0AC                 db  1Ah
.eh_frame:000000000001C0AD                 db    1
.eh_frame:000000000001C0AE                 db    0
.eh_frame:000000000001C0AF                 db    0
.eh_frame:000000000001C0B0                 db    0
.eh_frame:000000000001C0B1                 db  42h ; B
.eh_frame:000000000001C0B2                 db  0Eh
.eh_frame:000000000001C0B3                 db  10h
.eh_frame:000000000001C0B4                 db  8Fh
.eh_frame:000000000001C0B5                 db    2
.eh_frame:000000000001C0B6                 db  42h ; B
.eh_frame:000000000001C0B7                 db  0Eh
.eh_frame:000000000001C0B8                 db  18h
.eh_frame:000000000001C0B9                 db  8Eh
.eh_frame:000000000001C0BA                 db    3
.eh_frame:000000000001C0BB                 db  46h ; F
.eh_frame:000000000001C0BC                 db  0Eh
.eh_frame:000000000001C0BD                 db  20h
.eh_frame:000000000001C0BE                 db  8Dh
.eh_frame:000000000001C0BF                 db    4
.eh_frame:000000000001C0C0                 db  42h ; B
.eh_frame:000000000001C0C1                 db  0Eh
.eh_frame:000000000001C0C2                 db  28h ; (
.eh_frame:000000000001C0C3                 db  8Ch
.eh_frame:000000000001C0C4                 db    5
.eh_frame:000000000001C0C5                 db  44h ; D
.eh_frame:000000000001C0C6                 db  0Eh
.eh_frame:000000000001C0C7                 db  30h ; 0
.eh_frame:000000000001C0C8                 db  86h
.eh_frame:000000000001C0C9                 db    6
.eh_frame:000000000001C0CA                 db  41h ; A
.eh_frame:000000000001C0CB                 db  0Eh
.eh_frame:000000000001C0CC                 db  38h ; 8
.eh_frame:000000000001C0CD                 db  83h
.eh_frame:000000000001C0CE                 db    7
.eh_frame:000000000001C0CF                 db  47h ; G
.eh_frame:000000000001C0D0                 db  0Eh
.eh_frame:000000000001C0D1                 db  60h ; `
.eh_frame:000000000001C0D2                 db    2
.eh_frame:000000000001C0D3                 db 0DEh
.eh_frame:000000000001C0D4                 db  0Ah
.eh_frame:000000000001C0D5                 db  0Eh
.eh_frame:000000000001C0D6                 db  38h ; 8
.eh_frame:000000000001C0D7                 db  41h ; A
.eh_frame:000000000001C0D8                 db  0Eh
.eh_frame:000000000001C0D9                 db  30h ; 0
.eh_frame:000000000001C0DA                 db  41h ; A
.eh_frame:000000000001C0DB                 db  0Eh
.eh_frame:000000000001C0DC                 db  28h ; (
.eh_frame:000000000001C0DD                 db  42h ; B
.eh_frame:000000000001C0DE                 db  0Eh
.eh_frame:000000000001C0DF                 db  20h
.eh_frame:000000000001C0E0                 db  42h ; B
.eh_frame:000000000001C0E1                 db  0Eh
.eh_frame:000000000001C0E2                 db  18h
.eh_frame:000000000001C0E3                 db  42h ; B
.eh_frame:000000000001C0E4                 db  0Eh
.eh_frame:000000000001C0E5                 db  10h
.eh_frame:000000000001C0E6                 db  42h ; B
.eh_frame:000000000001C0E7                 db  0Eh
.eh_frame:000000000001C0E8                 db    8
.eh_frame:000000000001C0E9                 db  48h ; H
.eh_frame:000000000001C0EA                 db  0Bh
.eh_frame:000000000001C0EB                 db    0
.eh_frame:000000000001C0EC                 db  18h
.eh_frame:000000000001C0ED                 db    0
.eh_frame:000000000001C0EE                 db    0
.eh_frame:000000000001C0EF                 db    0
.eh_frame:000000000001C0F0                 db 0D0h
.eh_frame:000000000001C0F1                 db  27h ; '
.eh_frame:000000000001C0F2                 db    0
.eh_frame:000000000001C0F3                 db    0
.eh_frame:000000000001C0F4                 db  5Ch ; \
.eh_frame:000000000001C0F5                 db  73h ; s
.eh_frame:000000000001C0F6                 db 0FFh
.eh_frame:000000000001C0F7                 db 0FFh
.eh_frame:000000000001C0F8                 db  1Eh
.eh_frame:000000000001C0F9                 db    0
.eh_frame:000000000001C0FA                 db    0
.eh_frame:000000000001C0FB                 db    0
.eh_frame:000000000001C0FC                 db    0
.eh_frame:000000000001C0FD                 db  41h ; A
.eh_frame:000000000001C0FE                 db  0Eh
.eh_frame:000000000001C0FF                 db  10h
.eh_frame:000000000001C100                 db  83h
.eh_frame:000000000001C101                 db    2
.eh_frame:000000000001C102                 db  58h ; X
.eh_frame:000000000001C103                 db  0Eh
.eh_frame:000000000001C104                 db    8
.eh_frame:000000000001C105                 db    0
.eh_frame:000000000001C106                 db    0
.eh_frame:000000000001C107                 db    0
.eh_frame:000000000001C108                 db  34h ; 4
.eh_frame:000000000001C109                 db    0
.eh_frame:000000000001C10A                 db    0
.eh_frame:000000000001C10B                 db    0
.eh_frame:000000000001C10C                 db 0ECh
.eh_frame:000000000001C10D                 db  27h ; '
.eh_frame:000000000001C10E                 db    0
.eh_frame:000000000001C10F                 db    0
.eh_frame:000000000001C110                 db  60h ; `
.eh_frame:000000000001C111                 db  73h ; s
.eh_frame:000000000001C112                 db 0FFh
.eh_frame:000000000001C113                 db 0FFh
.eh_frame:000000000001C114                 db  51h ; Q
.eh_frame:000000000001C115                 db    0
.eh_frame:000000000001C116                 db    0
.eh_frame:000000000001C117                 db    0
.eh_frame:000000000001C118                 db    0
.eh_frame:000000000001C119                 db  42h ; B
.eh_frame:000000000001C11A                 db  0Eh
.eh_frame:000000000001C11B                 db  10h
.eh_frame:000000000001C11C                 db  8Dh
.eh_frame:000000000001C11D                 db    2
.eh_frame:000000000001C11E                 db  42h ; B
.eh_frame:000000000001C11F                 db  0Eh
.eh_frame:000000000001C120                 db  18h
.eh_frame:000000000001C121                 db  8Ch
.eh_frame:000000000001C122                 db    3
.eh_frame:000000000001C123                 db  41h ; A
.eh_frame:000000000001C124                 db  0Eh
.eh_frame:000000000001C125                 db  20h
.eh_frame:000000000001C126                 db  86h
.eh_frame:000000000001C127                 db    4
.eh_frame:000000000001C128                 db  41h ; A
.eh_frame:000000000001C129                 db  0Eh
.eh_frame:000000000001C12A                 db  28h ; (
.eh_frame:000000000001C12B                 db  83h
.eh_frame:000000000001C12C                 db    5
.eh_frame:000000000001C12D                 db  47h ; G
.eh_frame:000000000001C12E                 db  0Eh
.eh_frame:000000000001C12F                 db  30h ; 0
.eh_frame:000000000001C130                 db  7Ah ; z
.eh_frame:000000000001C131                 db  0Eh
.eh_frame:000000000001C132                 db  28h ; (
.eh_frame:000000000001C133                 db  44h ; D
.eh_frame:000000000001C134                 db  0Eh
.eh_frame:000000000001C135                 db  20h
.eh_frame:000000000001C136                 db  41h ; A
.eh_frame:000000000001C137                 db  0Eh
.eh_frame:000000000001C138                 db  18h
.eh_frame:000000000001C139                 db  42h ; B
.eh_frame:000000000001C13A                 db  0Eh
.eh_frame:000000000001C13B                 db  10h
.eh_frame:000000000001C13C                 db  42h ; B
.eh_frame:000000000001C13D                 db  0Eh
.eh_frame:000000000001C13E                 db    8
.eh_frame:000000000001C13F                 db    0
.eh_frame:000000000001C140                 db  1Ch
.eh_frame:000000000001C141                 db    0
.eh_frame:000000000001C142                 db    0
.eh_frame:000000000001C143                 db    0
.eh_frame:000000000001C144                 db  24h ; $
.eh_frame:000000000001C145                 db  28h ; (
.eh_frame:000000000001C146                 db    0
.eh_frame:000000000001C147                 db    0
.eh_frame:000000000001C148                 db  88h
.eh_frame:000000000001C149                 db  73h ; s
.eh_frame:000000000001C14A                 db 0FFh
.eh_frame:000000000001C14B                 db 0FFh
.eh_frame:000000000001C14C                 db  5Dh ; ]
.eh_frame:000000000001C14D                 db    0
.eh_frame:000000000001C14E                 db    0
.eh_frame:000000000001C14F                 db    0
.eh_frame:000000000001C150                 db    0
.eh_frame:000000000001C151                 db  41h ; A
.eh_frame:000000000001C152                 db  0Eh
.eh_frame:000000000001C153                 db  10h
.eh_frame:000000000001C154                 db  86h
.eh_frame:000000000001C155                 db    2
.eh_frame:000000000001C156                 db  41h ; A
.eh_frame:000000000001C157                 db  0Eh
.eh_frame:000000000001C158                 db  18h
.eh_frame:000000000001C159                 db  83h
.eh_frame:000000000001C15A                 db    3
.eh_frame:000000000001C15B                 db  44h ; D
.eh_frame:000000000001C15C                 db  0Eh
.eh_frame:000000000001C15D                 db  20h
.eh_frame:000000000001C15E                 db    0
.eh_frame:000000000001C15F                 db    0
.eh_frame:000000000001C160                 db  48h ; H
.eh_frame:000000000001C161                 db    0
.eh_frame:000000000001C162                 db    0
.eh_frame:000000000001C163                 db    0
.eh_frame:000000000001C164                 db  44h ; D
.eh_frame:000000000001C165                 db  28h ; (
.eh_frame:000000000001C166                 db    0
.eh_frame:000000000001C167                 db    0
.eh_frame:000000000001C168                 db 0C8h
.eh_frame:000000000001C169                 db  73h ; s
.eh_frame:000000000001C16A                 db 0FFh
.eh_frame:000000000001C16B                 db 0FFh
.eh_frame:000000000001C16C                 db  29h ; )
.eh_frame:000000000001C16D                 db    3
.eh_frame:000000000001C16E                 db    0
.eh_frame:000000000001C16F                 db    0
.eh_frame:000000000001C170                 db    0
.eh_frame:000000000001C171                 db  42h ; B
.eh_frame:000000000001C172                 db  0Eh
.eh_frame:000000000001C173                 db  10h
.eh_frame:000000000001C174                 db  8Fh
.eh_frame:000000000001C175                 db    2
.eh_frame:000000000001C176                 db  42h ; B
.eh_frame:000000000001C177                 db  0Eh
.eh_frame:000000000001C178                 db  18h
.eh_frame:000000000001C179                 db  8Eh
.eh_frame:000000000001C17A                 db    3
.eh_frame:000000000001C17B                 db  42h ; B
.eh_frame:000000000001C17C                 db  0Eh
.eh_frame:000000000001C17D                 db  20h
.eh_frame:000000000001C17E                 db  8Dh
.eh_frame:000000000001C17F                 db    4
.eh_frame:000000000001C180                 db  42h ; B
.eh_frame:000000000001C181                 db  0Eh
.eh_frame:000000000001C182                 db  28h ; (
.eh_frame:000000000001C183                 db  8Ch
.eh_frame:000000000001C184                 db    5
.eh_frame:000000000001C185                 db  41h ; A
.eh_frame:000000000001C186                 db  0Eh
.eh_frame:000000000001C187                 db  30h ; 0
.eh_frame:000000000001C188                 db  86h
.eh_frame:000000000001C189                 db    6
.eh_frame:000000000001C18A                 db  41h ; A
.eh_frame:000000000001C18B                 db  0Eh
.eh_frame:000000000001C18C                 db  38h ; 8
.eh_frame:000000000001C18D                 db  83h
.eh_frame:000000000001C18E                 db    7
.eh_frame:000000000001C18F                 db  44h ; D
.eh_frame:000000000001C190                 db  0Eh
.eh_frame:000000000001C191                 db  70h ; p
.eh_frame:000000000001C192                 db    2
.eh_frame:000000000001C193                 db  94h
.eh_frame:000000000001C194                 db  0Ah
.eh_frame:000000000001C195                 db  0Eh
.eh_frame:000000000001C196                 db  38h ; 8
.eh_frame:000000000001C197                 db  41h ; A
.eh_frame:000000000001C198                 db  0Eh
.eh_frame:000000000001C199                 db  30h ; 0
.eh_frame:000000000001C19A                 db  41h ; A
.eh_frame:000000000001C19B                 db  0Eh
.eh_frame:000000000001C19C                 db  28h ; (
.eh_frame:000000000001C19D                 db  42h ; B
.eh_frame:000000000001C19E                 db  0Eh
.eh_frame:000000000001C19F                 db  20h
.eh_frame:000000000001C1A0                 db  42h ; B
.eh_frame:000000000001C1A1                 db  0Eh
.eh_frame:000000000001C1A2                 db  18h
.eh_frame:000000000001C1A3                 db  42h ; B
.eh_frame:000000000001C1A4                 db  0Eh
.eh_frame:000000000001C1A5                 db  10h
.eh_frame:000000000001C1A6                 db  42h ; B
.eh_frame:000000000001C1A7                 db  0Eh
.eh_frame:000000000001C1A8                 db    8
.eh_frame:000000000001C1A9                 db  44h ; D
.eh_frame:000000000001C1AA                 db  0Bh
.eh_frame:000000000001C1AB                 db    0
.eh_frame:000000000001C1AC                 db  10h
.eh_frame:000000000001C1AD                 db    0
.eh_frame:000000000001C1AE                 db    0
.eh_frame:000000000001C1AF                 db    0
.eh_frame:000000000001C1B0                 db  90h
.eh_frame:000000000001C1B1                 db  28h ; (
.eh_frame:000000000001C1B2                 db    0
.eh_frame:000000000001C1B3                 db    0
.eh_frame:000000000001C1B4                 db 0ACh
.eh_frame:000000000001C1B5                 db  76h ; v
.eh_frame:000000000001C1B6                 db 0FFh
.eh_frame:000000000001C1B7                 db 0FFh
.eh_frame:000000000001C1B8                 db    5
.eh_frame:000000000001C1B9                 db    0
.eh_frame:000000000001C1BA                 db    0
.eh_frame:000000000001C1BB                 db    0
.eh_frame:000000000001C1BC                 db    0
.eh_frame:000000000001C1BD                 db    0
.eh_frame:000000000001C1BE                 db    0
.eh_frame:000000000001C1BF                 db    0
.eh_frame:000000000001C1C0                 db  10h
.eh_frame:000000000001C1C1                 db    0
.eh_frame:000000000001C1C2                 db    0
.eh_frame:000000000001C1C3                 db    0
.eh_frame:000000000001C1C4                 db 0A4h
.eh_frame:000000000001C1C5                 db  28h ; (
.eh_frame:000000000001C1C6                 db    0
.eh_frame:000000000001C1C7                 db    0
.eh_frame:000000000001C1C8                 db 0A8h
.eh_frame:000000000001C1C9                 db  76h ; v
.eh_frame:000000000001C1CA                 db 0FFh
.eh_frame:000000000001C1CB                 db 0FFh
.eh_frame:000000000001C1CC                 db    5
.eh_frame:000000000001C1CD                 db    0
.eh_frame:000000000001C1CE                 db    0
.eh_frame:000000000001C1CF                 db    0
.eh_frame:000000000001C1D0                 db    0
.eh_frame:000000000001C1D1                 db    0
.eh_frame:000000000001C1D2                 db    0
.eh_frame:000000000001C1D3                 db    0
.eh_frame:000000000001C1D4                 db  60h ; `
.eh_frame:000000000001C1D5                 db    0
.eh_frame:000000000001C1D6                 db    0
.eh_frame:000000000001C1D7                 db    0
.eh_frame:000000000001C1D8                 db 0B8h
.eh_frame:000000000001C1D9                 db  28h ; (
.eh_frame:000000000001C1DA                 db    0
.eh_frame:000000000001C1DB                 db    0
.eh_frame:000000000001C1DC                 db 0A4h
.eh_frame:000000000001C1DD                 db  76h ; v
.eh_frame:000000000001C1DE                 db 0FFh
.eh_frame:000000000001C1DF                 db 0FFh
.eh_frame:000000000001C1E0                 db  96h
.eh_frame:000000000001C1E1                 db    1
.eh_frame:000000000001C1E2                 db    0
.eh_frame:000000000001C1E3                 db    0
.eh_frame:000000000001C1E4                 db    0
.eh_frame:000000000001C1E5                 db  42h ; B
.eh_frame:000000000001C1E6                 db  0Eh
.eh_frame:000000000001C1E7                 db  10h
.eh_frame:000000000001C1E8                 db  8Fh
.eh_frame:000000000001C1E9                 db    2
.eh_frame:000000000001C1EA                 db  42h ; B
.eh_frame:000000000001C1EB                 db  0Eh
.eh_frame:000000000001C1EC                 db  18h
.eh_frame:000000000001C1ED                 db  8Eh
.eh_frame:000000000001C1EE                 db    3
.eh_frame:000000000001C1EF                 db  42h ; B
.eh_frame:000000000001C1F0                 db  0Eh
.eh_frame:000000000001C1F1                 db  20h
.eh_frame:000000000001C1F2                 db  8Dh
.eh_frame:000000000001C1F3                 db    4
.eh_frame:000000000001C1F4                 db  42h ; B
.eh_frame:000000000001C1F5                 db  0Eh
.eh_frame:000000000001C1F6                 db  28h ; (
.eh_frame:000000000001C1F7                 db  8Ch
.eh_frame:000000000001C1F8                 db    5
.eh_frame:000000000001C1F9                 db  44h ; D
.eh_frame:000000000001C1FA                 db  0Eh
.eh_frame:000000000001C1FB                 db  30h ; 0
.eh_frame:000000000001C1FC                 db  86h
.eh_frame:000000000001C1FD                 db    6
.eh_frame:000000000001C1FE                 db  41h ; A
.eh_frame:000000000001C1FF                 db  0Eh
.eh_frame:000000000001C200                 db  38h ; 8
.eh_frame:000000000001C201                 db  83h
.eh_frame:000000000001C202                 db    7
.eh_frame:000000000001C203                 db  4Ah ; J
.eh_frame:000000000001C204                 db  0Eh
.eh_frame:000000000001C205                 db  50h ; P
.eh_frame:000000000001C206                 db    2
.eh_frame:000000000001C207                 db  5Fh ; _
.eh_frame:000000000001C208                 db  0Ah
.eh_frame:000000000001C209                 db  0Eh
.eh_frame:000000000001C20A                 db  38h ; 8
.eh_frame:000000000001C20B                 db  41h ; A
.eh_frame:000000000001C20C                 db  0Eh
.eh_frame:000000000001C20D                 db  30h ; 0
.eh_frame:000000000001C20E                 db  41h ; A
.eh_frame:000000000001C20F                 db  0Eh
.eh_frame:000000000001C210                 db  28h ; (
.eh_frame:000000000001C211                 db  42h ; B
.eh_frame:000000000001C212                 db  0Eh
.eh_frame:000000000001C213                 db  20h
.eh_frame:000000000001C214                 db  42h ; B
.eh_frame:000000000001C215                 db  0Eh
.eh_frame:000000000001C216                 db  18h
.eh_frame:000000000001C217                 db  42h ; B
.eh_frame:000000000001C218                 db  0Eh
.eh_frame:000000000001C219                 db  10h
.eh_frame:000000000001C21A                 db  42h ; B
.eh_frame:000000000001C21B                 db  0Eh
.eh_frame:000000000001C21C                 db    8
.eh_frame:000000000001C21D                 db  48h ; H
.eh_frame:000000000001C21E                 db  0Bh
.eh_frame:000000000001C21F                 db    2
.eh_frame:000000000001C220                 db  9Bh
.eh_frame:000000000001C221                 db  0Ah
.eh_frame:000000000001C222                 db  0Eh
.eh_frame:000000000001C223                 db  38h ; 8
.eh_frame:000000000001C224                 db  41h ; A
.eh_frame:000000000001C225                 db  0Eh
.eh_frame:000000000001C226                 db  30h ; 0
.eh_frame:000000000001C227                 db  41h ; A
.eh_frame:000000000001C228                 db  0Eh
.eh_frame:000000000001C229                 db  28h ; (
.eh_frame:000000000001C22A                 db  42h ; B
.eh_frame:000000000001C22B                 db  0Eh
.eh_frame:000000000001C22C                 db  20h
.eh_frame:000000000001C22D                 db  42h ; B
.eh_frame:000000000001C22E                 db  0Eh
.eh_frame:000000000001C22F                 db  18h
.eh_frame:000000000001C230                 db  42h ; B
.eh_frame:000000000001C231                 db  0Eh
.eh_frame:000000000001C232                 db  10h
.eh_frame:000000000001C233                 db  42h ; B
.eh_frame:000000000001C234                 db  0Eh
.eh_frame:000000000001C235                 db    8
.eh_frame:000000000001C236                 db  43h ; C
.eh_frame:000000000001C237                 db  0Bh
.eh_frame:000000000001C238                 db  34h ; 4
.eh_frame:000000000001C239                 db    0
.eh_frame:000000000001C23A                 db    0
.eh_frame:000000000001C23B                 db    0
.eh_frame:000000000001C23C                 db  1Ch
.eh_frame:000000000001C23D                 db  29h ; )
.eh_frame:000000000001C23E                 db    0
.eh_frame:000000000001C23F                 db    0
.eh_frame:000000000001C240                 db 0E0h
.eh_frame:000000000001C241                 db  77h ; w
.eh_frame:000000000001C242                 db 0FFh
.eh_frame:000000000001C243                 db 0FFh
.eh_frame:000000000001C244                 db  49h ; I
.eh_frame:000000000001C245                 db    0
.eh_frame:000000000001C246                 db    0
.eh_frame:000000000001C247                 db    0
.eh_frame:000000000001C248                 db    0
.eh_frame:000000000001C249                 db  41h ; A
.eh_frame:000000000001C24A                 db  0Eh
.eh_frame:000000000001C24B                 db  10h
.eh_frame:000000000001C24C                 db  86h
.eh_frame:000000000001C24D                 db    2
.eh_frame:000000000001C24E                 db  41h ; A
.eh_frame:000000000001C24F                 db  0Eh
.eh_frame:000000000001C250                 db  18h
.eh_frame:000000000001C251                 db  83h
.eh_frame:000000000001C252                 db    3
.eh_frame:000000000001C253                 db  53h ; S
.eh_frame:000000000001C254                 db  0Eh
.eh_frame:000000000001C255                 db  20h
.eh_frame:000000000001C256                 db  59h ; Y
.eh_frame:000000000001C257                 db  0Ah
.eh_frame:000000000001C258                 db  0Eh
.eh_frame:000000000001C259                 db  18h
.eh_frame:000000000001C25A                 db  44h ; D
.eh_frame:000000000001C25B                 db  0Eh
.eh_frame:000000000001C25C                 db  10h
.eh_frame:000000000001C25D                 db  41h ; A
.eh_frame:000000000001C25E                 db  0Eh
.eh_frame:000000000001C25F                 db    8
.eh_frame:000000000001C260                 db  4Dh ; M
.eh_frame:000000000001C261                 db  0Bh
.eh_frame:000000000001C262                 db  44h ; D
.eh_frame:000000000001C263                 db  0Eh
.eh_frame:000000000001C264                 db  18h
.eh_frame:000000000001C265                 db  43h ; C
.eh_frame:000000000001C266                 db  0Eh
.eh_frame:000000000001C267                 db  10h
.eh_frame:000000000001C268                 db  41h ; A
.eh_frame:000000000001C269                 db  0Eh
.eh_frame:000000000001C26A                 db    8
.eh_frame:000000000001C26B                 db    0
.eh_frame:000000000001C26C                 db    0
.eh_frame:000000000001C26D                 db    0
.eh_frame:000000000001C26E                 db    0
.eh_frame:000000000001C26F                 db    0
.eh_frame:000000000001C270                 db  10h
.eh_frame:000000000001C271                 db    0
.eh_frame:000000000001C272                 db    0
.eh_frame:000000000001C273                 db    0
.eh_frame:000000000001C274                 db  54h ; T
.eh_frame:000000000001C275                 db  29h ; )
.eh_frame:000000000001C276                 db    0
.eh_frame:000000000001C277                 db    0
.eh_frame:000000000001C278                 db 0F8h
.eh_frame:000000000001C279                 db  77h ; w
.eh_frame:000000000001C27A                 db 0FFh
.eh_frame:000000000001C27B                 db 0FFh
.eh_frame:000000000001C27C                 db  8Eh
.eh_frame:000000000001C27D                 db    2
.eh_frame:000000000001C27E                 db    0
.eh_frame:000000000001C27F                 db    0
.eh_frame:000000000001C280                 db    0
.eh_frame:000000000001C281                 db    0
.eh_frame:000000000001C282                 db    0
.eh_frame:000000000001C283                 db    0
.eh_frame:000000000001C284                 db  30h ; 0
.eh_frame:000000000001C285                 db    0
.eh_frame:000000000001C286                 db    0
.eh_frame:000000000001C287                 db    0
.eh_frame:000000000001C288                 db  68h ; h
.eh_frame:000000000001C289                 db  29h ; )
.eh_frame:000000000001C28A                 db    0
.eh_frame:000000000001C28B                 db    0
.eh_frame:000000000001C28C                 db  74h ; t
.eh_frame:000000000001C28D                 db  7Ah ; z
.eh_frame:000000000001C28E                 db 0FFh
.eh_frame:000000000001C28F                 db 0FFh
.eh_frame:000000000001C290                 db  40h ; @
.eh_frame:000000000001C291                 db    2
.eh_frame:000000000001C292                 db    0
.eh_frame:000000000001C293                 db    0
.eh_frame:000000000001C294                 db    0
.eh_frame:000000000001C295                 db  42h ; B
.eh_frame:000000000001C296                 db  0Eh
.eh_frame:000000000001C297                 db  10h
.eh_frame:000000000001C298                 db  8Dh
.eh_frame:000000000001C299                 db    2
.eh_frame:000000000001C29A                 db  42h ; B
.eh_frame:000000000001C29B                 db  0Eh
.eh_frame:000000000001C29C                 db  18h
.eh_frame:000000000001C29D                 db  8Ch
.eh_frame:000000000001C29E                 db    3
.eh_frame:000000000001C29F                 db  48h ; H
.eh_frame:000000000001C2A0                 db  0Eh
.eh_frame:000000000001C2A1                 db  20h
.eh_frame:000000000001C2A2                 db  86h
.eh_frame:000000000001C2A3                 db    4
.eh_frame:000000000001C2A4                 db  44h ; D
.eh_frame:000000000001C2A5                 db  0Eh
.eh_frame:000000000001C2A6                 db  28h ; (
.eh_frame:000000000001C2A7                 db  83h
.eh_frame:000000000001C2A8                 db    5
.eh_frame:000000000001C2A9                 db    3
.eh_frame:000000000001C2AA                 db    9
.eh_frame:000000000001C2AB                 db    2
.eh_frame:000000000001C2AC                 db  0Eh
.eh_frame:000000000001C2AD                 db  20h
.eh_frame:000000000001C2AE                 db  57h ; W
.eh_frame:000000000001C2AF                 db  0Eh
.eh_frame:000000000001C2B0                 db  18h
.eh_frame:000000000001C2B1                 db  4Dh ; M
.eh_frame:000000000001C2B2                 db  0Eh
.eh_frame:000000000001C2B3                 db  10h
.eh_frame:000000000001C2B4                 db  42h ; B
.eh_frame:000000000001C2B5                 db  0Eh
.eh_frame:000000000001C2B6                 db    8
.eh_frame:000000000001C2B7                 db    0
.eh_frame:000000000001C2B8                 db  14h
.eh_frame:000000000001C2B9                 db    0
.eh_frame:000000000001C2BA                 db    0
.eh_frame:000000000001C2BB                 db    0
.eh_frame:000000000001C2BC                 db  9Ch
.eh_frame:000000000001C2BD                 db  29h ; )
.eh_frame:000000000001C2BE                 db    0
.eh_frame:000000000001C2BF                 db    0
.eh_frame:000000000001C2C0                 db  80h
.eh_frame:000000000001C2C1                 db  7Ch ; |
.eh_frame:000000000001C2C2                 db 0FFh
.eh_frame:000000000001C2C3                 db 0FFh
.eh_frame:000000000001C2C4                 db  0Eh
.eh_frame:000000000001C2C5                 db    0
.eh_frame:000000000001C2C6                 db    0
.eh_frame:000000000001C2C7                 db    0
.eh_frame:000000000001C2C8                 db    0
.eh_frame:000000000001C2C9                 db    0
.eh_frame:000000000001C2CA                 db    0
.eh_frame:000000000001C2CB                 db    0
.eh_frame:000000000001C2CC                 db    0
.eh_frame:000000000001C2CD                 db    0
.eh_frame:000000000001C2CE                 db    0
.eh_frame:000000000001C2CF                 db    0
.eh_frame:000000000001C2D0                 db  34h ; 4
.eh_frame:000000000001C2D1                 db    0
.eh_frame:000000000001C2D2                 db    0
.eh_frame:000000000001C2D3                 db    0
.eh_frame:000000000001C2D4                 db 0B4h
.eh_frame:000000000001C2D5                 db  29h ; )
.eh_frame:000000000001C2D6                 db    0
.eh_frame:000000000001C2D7                 db    0
.eh_frame:000000000001C2D8                 db  78h ; x
.eh_frame:000000000001C2D9                 db  7Ch ; |
.eh_frame:000000000001C2DA                 db 0FFh
.eh_frame:000000000001C2DB                 db 0FFh
.eh_frame:000000000001C2DC                 db  7Bh ; {
.eh_frame:000000000001C2DD                 db    0
.eh_frame:000000000001C2DE                 db    0
.eh_frame:000000000001C2DF                 db    0
.eh_frame:000000000001C2E0                 db    0
.eh_frame:000000000001C2E1                 db  42h ; B
.eh_frame:000000000001C2E2                 db  0Eh
.eh_frame:000000000001C2E3                 db  10h
.eh_frame:000000000001C2E4                 db  8Ch
.eh_frame:000000000001C2E5                 db    2
.eh_frame:000000000001C2E6                 db  41h ; A
.eh_frame:000000000001C2E7                 db  0Eh
.eh_frame:000000000001C2E8                 db  18h
.eh_frame:000000000001C2E9                 db  86h
.eh_frame:000000000001C2EA                 db    3
.eh_frame:000000000001C2EB                 db  41h ; A
.eh_frame:000000000001C2EC                 db  0Eh
.eh_frame:000000000001C2ED                 db  20h
.eh_frame:000000000001C2EE                 db  83h
.eh_frame:000000000001C2EF                 db    4
.eh_frame:000000000001C2F0                 db  7Dh ; }
.eh_frame:000000000001C2F1                 db  0Ah
.eh_frame:000000000001C2F2                 db  0Eh
.eh_frame:000000000001C2F3                 db  18h
.eh_frame:000000000001C2F4                 db  41h ; A
.eh_frame:000000000001C2F5                 db  0Eh
.eh_frame:000000000001C2F6                 db  10h
.eh_frame:000000000001C2F7                 db  42h ; B
.eh_frame:000000000001C2F8                 db  0Eh
.eh_frame:000000000001C2F9                 db    8
.eh_frame:000000000001C2FA                 db  44h ; D
.eh_frame:000000000001C2FB                 db  0Bh
.eh_frame:000000000001C2FC                 db  60h ; `
.eh_frame:000000000001C2FD                 db  0Ah
.eh_frame:000000000001C2FE                 db  0Eh
.eh_frame:000000000001C2FF                 db  18h
.eh_frame:000000000001C300                 db  41h ; A
.eh_frame:000000000001C301                 db  0Eh
.eh_frame:000000000001C302                 db  10h
.eh_frame:000000000001C303                 db  42h ; B
.eh_frame:000000000001C304                 db  0Eh
.eh_frame:000000000001C305                 db    8
.eh_frame:000000000001C306                 db  45h ; E
.eh_frame:000000000001C307                 db  0Bh
.eh_frame:000000000001C308                 db  34h ; 4
.eh_frame:000000000001C309                 db    0
.eh_frame:000000000001C30A                 db    0
.eh_frame:000000000001C30B                 db    0
.eh_frame:000000000001C30C                 db 0ECh
.eh_frame:000000000001C30D                 db  29h ; )
.eh_frame:000000000001C30E                 db    0
.eh_frame:000000000001C30F                 db    0
.eh_frame:000000000001C310                 db 0C0h
.eh_frame:000000000001C311                 db  7Ch ; |
.eh_frame:000000000001C312                 db 0FFh
.eh_frame:000000000001C313                 db 0FFh
.eh_frame:000000000001C314                 db  7Eh ; ~
.eh_frame:000000000001C315                 db    2
.eh_frame:000000000001C316                 db    0
.eh_frame:000000000001C317                 db    0
.eh_frame:000000000001C318                 db    0
.eh_frame:000000000001C319                 db  42h ; B
.eh_frame:000000000001C31A                 db  0Eh
.eh_frame:000000000001C31B                 db  10h
.eh_frame:000000000001C31C                 db  8Ch
.eh_frame:000000000001C31D                 db    2
.eh_frame:000000000001C31E                 db  41h ; A
.eh_frame:000000000001C31F                 db  0Eh
.eh_frame:000000000001C320                 db  18h
.eh_frame:000000000001C321                 db  86h
.eh_frame:000000000001C322                 db    3
.eh_frame:000000000001C323                 db  43h ; C
.eh_frame:000000000001C324                 db  0Eh
.eh_frame:000000000001C325                 db  20h
.eh_frame:000000000001C326                 db  83h
.eh_frame:000000000001C327                 db    4
.eh_frame:000000000001C328                 db  44h ; D
.eh_frame:000000000001C329                 db  0Eh
.eh_frame:000000000001C32A                 db  70h ; p
.eh_frame:000000000001C32B                 db    2
.eh_frame:000000000001C32C                 db 0F0h
.eh_frame:000000000001C32D                 db  0Ah
.eh_frame:000000000001C32E                 db  0Eh
.eh_frame:000000000001C32F                 db  20h
.eh_frame:000000000001C330                 db  41h ; A
.eh_frame:000000000001C331                 db  0Eh
.eh_frame:000000000001C332                 db  18h
.eh_frame:000000000001C333                 db  41h ; A
.eh_frame:000000000001C334                 db  0Eh
.eh_frame:000000000001C335                 db  10h
.eh_frame:000000000001C336                 db  42h ; B
.eh_frame:000000000001C337                 db  0Eh
.eh_frame:000000000001C338                 db    8
.eh_frame:000000000001C339                 db  42h ; B
.eh_frame:000000000001C33A                 db  0Bh
.eh_frame:000000000001C33B                 db    0
.eh_frame:000000000001C33C                 db    0
.eh_frame:000000000001C33D                 db    0
.eh_frame:000000000001C33E                 db    0
.eh_frame:000000000001C33F                 db    0
.eh_frame:000000000001C340                 db  14h
.eh_frame:000000000001C341                 db    0
.eh_frame:000000000001C342                 db    0
.eh_frame:000000000001C343                 db    0
.eh_frame:000000000001C344                 db  24h ; $
.eh_frame:000000000001C345                 db  2Ah ; *
.eh_frame:000000000001C346                 db    0
.eh_frame:000000000001C347                 db    0
.eh_frame:000000000001C348                 db    8
.eh_frame:000000000001C349                 db  7Fh ; 
.eh_frame:000000000001C34A                 db 0FFh
.eh_frame:000000000001C34B                 db 0FFh
.eh_frame:000000000001C34C                 db    4
.eh_frame:000000000001C34D                 db    0
.eh_frame:000000000001C34E                 db    0
.eh_frame:000000000001C34F                 db    0
.eh_frame:000000000001C350                 db    0
.eh_frame:000000000001C351                 db    0
.eh_frame:000000000001C352                 db    0
.eh_frame:000000000001C353                 db    0
.eh_frame:000000000001C354                 db    0
.eh_frame:000000000001C355                 db    0
.eh_frame:000000000001C356                 db    0
.eh_frame:000000000001C357                 db    0
.eh_frame:000000000001C358                 db  2Ch ; ,
.eh_frame:000000000001C359                 db    0
.eh_frame:000000000001C35A                 db    0
.eh_frame:000000000001C35B                 db    0
.eh_frame:000000000001C35C                 db  3Ch ; <
.eh_frame:000000000001C35D                 db  2Ah ; *
.eh_frame:000000000001C35E                 db    0
.eh_frame:000000000001C35F                 db    0
.eh_frame:000000000001C360                 db    0
.eh_frame:000000000001C361                 db  7Fh ; 
.eh_frame:000000000001C362                 db 0FFh
.eh_frame:000000000001C363                 db 0FFh
.eh_frame:000000000001C364                 db  1Fh
.eh_frame:000000000001C365                 db  11h
.eh_frame:000000000001C366                 db    0
.eh_frame:000000000001C367                 db    0
.eh_frame:000000000001C368                 db    0
.eh_frame:000000000001C369                 db  41h ; A
.eh_frame:000000000001C36A                 db  0Eh
.eh_frame:000000000001C36B                 db  10h
.eh_frame:000000000001C36C                 db  86h
.eh_frame:000000000001C36D                 db    2
.eh_frame:000000000001C36E                 db  43h ; C
.eh_frame:000000000001C36F                 db  0Dh
.eh_frame:000000000001C370                 db    6
.eh_frame:000000000001C371                 db  48h ; H
.eh_frame:000000000001C372                 db  8Fh
.eh_frame:000000000001C373                 db    3
.eh_frame:000000000001C374                 db  8Eh
.eh_frame:000000000001C375                 db    4
.eh_frame:000000000001C376                 db  8Dh
.eh_frame:000000000001C377                 db    5
.eh_frame:000000000001C378                 db  8Ch
.eh_frame:000000000001C379                 db    6
.eh_frame:000000000001C37A                 db  48h ; H
.eh_frame:000000000001C37B                 db  83h
.eh_frame:000000000001C37C                 db    7
.eh_frame:000000000001C37D                 db    3
.eh_frame:000000000001C37E                 db 0EFh
.eh_frame:000000000001C37F                 db    1
.eh_frame:000000000001C380                 db  0Ah
.eh_frame:000000000001C381                 db  0Ch
.eh_frame:000000000001C382                 db    7
.eh_frame:000000000001C383                 db    8
.eh_frame:000000000001C384                 db  45h ; E
.eh_frame:000000000001C385                 db  0Bh
.eh_frame:000000000001C386                 db    0
.eh_frame:000000000001C387                 db    0
.eh_frame:000000000001C388                 db  2Ch ; ,
.eh_frame:000000000001C389                 db    0
.eh_frame:000000000001C38A                 db    0
.eh_frame:000000000001C38B                 db    0
.eh_frame:000000000001C38C                 db  6Ch ; l
.eh_frame:000000000001C38D                 db  2Ah ; *
.eh_frame:000000000001C38E                 db    0
.eh_frame:000000000001C38F                 db    0
.eh_frame:000000000001C390                 db 0F0h
.eh_frame:000000000001C391                 db  8Fh
.eh_frame:000000000001C392                 db 0FFh
.eh_frame:000000000001C393                 db 0FFh
.eh_frame:000000000001C394                 db  93h
.eh_frame:000000000001C395                 db    0
.eh_frame:000000000001C396                 db    0
.eh_frame:000000000001C397                 db    0
.eh_frame:000000000001C398                 db    0
.eh_frame:000000000001C399                 db  42h ; B
.eh_frame:000000000001C39A                 db  0Eh
.eh_frame:000000000001C39B                 db  10h
.eh_frame:000000000001C39C                 db  8Ch
.eh_frame:000000000001C39D                 db    2
.eh_frame:000000000001C39E                 db  41h ; A
.eh_frame:000000000001C39F                 db  0Eh
.eh_frame:000000000001C3A0                 db  18h
.eh_frame:000000000001C3A1                 db  86h
.eh_frame:000000000001C3A2                 db    3
.eh_frame:000000000001C3A3                 db  44h ; D
.eh_frame:000000000001C3A4                 db  0Eh
.eh_frame:000000000001C3A5                 db  20h
.eh_frame:000000000001C3A6                 db  83h
.eh_frame:000000000001C3A7                 db    4
.eh_frame:000000000001C3A8                 db  5Eh ; ^
.eh_frame:000000000001C3A9                 db  0Ah
.eh_frame:000000000001C3AA                 db  0Eh
.eh_frame:000000000001C3AB                 db  18h
.eh_frame:000000000001C3AC                 db  41h ; A
.eh_frame:000000000001C3AD                 db  0Eh
.eh_frame:000000000001C3AE                 db  10h
.eh_frame:000000000001C3AF                 db  42h ; B
.eh_frame:000000000001C3B0                 db  0Eh
.eh_frame:000000000001C3B1                 db    8
.eh_frame:000000000001C3B2                 db  48h ; H
.eh_frame:000000000001C3B3                 db  0Bh
.eh_frame:000000000001C3B4                 db    0
.eh_frame:000000000001C3B5                 db    0
.eh_frame:000000000001C3B6                 db    0
.eh_frame:000000000001C3B7                 db    0
.eh_frame:000000000001C3B8                 db  14h
.eh_frame:000000000001C3B9                 db    0
.eh_frame:000000000001C3BA                 db    0
.eh_frame:000000000001C3BB                 db    0
.eh_frame:000000000001C3BC                 db  9Ch
.eh_frame:000000000001C3BD                 db  2Ah ; *
.eh_frame:000000000001C3BE                 db    0
.eh_frame:000000000001C3BF                 db    0
.eh_frame:000000000001C3C0                 db  60h ; `
.eh_frame:000000000001C3C1                 db  90h
.eh_frame:000000000001C3C2                 db 0FFh
.eh_frame:000000000001C3C3                 db 0FFh
.eh_frame:000000000001C3C4                 db 0FEh
.eh_frame:000000000001C3C5                 db    1
.eh_frame:000000000001C3C6                 db    0
.eh_frame:000000000001C3C7                 db    0
.eh_frame:000000000001C3C8                 db    0
.eh_frame:000000000001C3C9                 db    0
.eh_frame:000000000001C3CA                 db    0
.eh_frame:000000000001C3CB                 db    0
.eh_frame:000000000001C3CC                 db    0
.eh_frame:000000000001C3CD                 db    0
.eh_frame:000000000001C3CE                 db    0
.eh_frame:000000000001C3CF                 db    0
.eh_frame:000000000001C3D0                 db  4Ch ; L
.eh_frame:000000000001C3D1                 db    0
.eh_frame:000000000001C3D2                 db    0
.eh_frame:000000000001C3D3                 db    0
.eh_frame:000000000001C3D4                 db 0B4h
.eh_frame:000000000001C3D5                 db  2Ah ; *
.eh_frame:000000000001C3D6                 db    0
.eh_frame:000000000001C3D7                 db    0
.eh_frame:000000000001C3D8                 db  48h ; H
.eh_frame:000000000001C3D9                 db  92h
.eh_frame:000000000001C3DA                 db 0FFh
.eh_frame:000000000001C3DB                 db 0FFh
.eh_frame:000000000001C3DC                 db 0ECh
.eh_frame:000000000001C3DD                 db  0Ch
.eh_frame:000000000001C3DE                 db    0
.eh_frame:000000000001C3DF                 db    0
.eh_frame:000000000001C3E0                 db    0
.eh_frame:000000000001C3E1                 db  42h ; B
.eh_frame:000000000001C3E2                 db  0Eh
.eh_frame:000000000001C3E3                 db  10h
.eh_frame:000000000001C3E4                 db  8Fh
.eh_frame:000000000001C3E5                 db    2
.eh_frame:000000000001C3E6                 db  42h ; B
.eh_frame:000000000001C3E7                 db  0Eh
.eh_frame:000000000001C3E8                 db  18h
.eh_frame:000000000001C3E9                 db  8Eh
.eh_frame:000000000001C3EA                 db    3
.eh_frame:000000000001C3EB                 db  46h ; F
.eh_frame:000000000001C3EC                 db  0Eh
.eh_frame:000000000001C3ED                 db  20h
.eh_frame:000000000001C3EE                 db  8Dh
.eh_frame:000000000001C3EF                 db    4
.eh_frame:000000000001C3F0                 db  42h ; B
.eh_frame:000000000001C3F1                 db  0Eh
.eh_frame:000000000001C3F2                 db  28h ; (
.eh_frame:000000000001C3F3                 db  8Ch
.eh_frame:000000000001C3F4                 db    5
.eh_frame:000000000001C3F5                 db  45h ; E
.eh_frame:000000000001C3F6                 db  0Eh
.eh_frame:000000000001C3F7                 db  30h ; 0
.eh_frame:000000000001C3F8                 db  86h
.eh_frame:000000000001C3F9                 db    6
.eh_frame:000000000001C3FA                 db  41h ; A
.eh_frame:000000000001C3FB                 db  0Eh
.eh_frame:000000000001C3FC                 db  38h ; 8
.eh_frame:000000000001C3FD                 db  83h
.eh_frame:000000000001C3FE                 db    7
.eh_frame:000000000001C3FF                 db  52h ; R
.eh_frame:000000000001C400                 db  0Eh
.eh_frame:000000000001C401                 db  90h
.eh_frame:000000000001C402                 db    1
.eh_frame:000000000001C403                 db    2
.eh_frame:000000000001C404                 db  82h
.eh_frame:000000000001C405                 db  0Ah
.eh_frame:000000000001C406                 db  0Eh
.eh_frame:000000000001C407                 db  38h ; 8
.eh_frame:000000000001C408                 db  41h ; A
.eh_frame:000000000001C409                 db  0Eh
.eh_frame:000000000001C40A                 db  30h ; 0
.eh_frame:000000000001C40B                 db  41h ; A
.eh_frame:000000000001C40C                 db  0Eh
.eh_frame:000000000001C40D                 db  28h ; (
.eh_frame:000000000001C40E                 db  42h ; B
.eh_frame:000000000001C40F                 db  0Eh
.eh_frame:000000000001C410                 db  20h
.eh_frame:000000000001C411                 db  42h ; B
.eh_frame:000000000001C412                 db  0Eh
.eh_frame:000000000001C413                 db  18h
.eh_frame:000000000001C414                 db  42h ; B
.eh_frame:000000000001C415                 db  0Eh
.eh_frame:000000000001C416                 db  10h
.eh_frame:000000000001C417                 db  42h ; B
.eh_frame:000000000001C418                 db  0Eh
.eh_frame:000000000001C419                 db    8
.eh_frame:000000000001C41A                 db  48h ; H
.eh_frame:000000000001C41B                 db  0Bh
.eh_frame:000000000001C41C                 db    0
.eh_frame:000000000001C41D                 db    0
.eh_frame:000000000001C41E                 db    0
.eh_frame:000000000001C41F                 db    0
.eh_frame:000000000001C420                 db  44h ; D
.eh_frame:000000000001C421                 db    0
.eh_frame:000000000001C422                 db    0
.eh_frame:000000000001C423                 db    0
.eh_frame:000000000001C424                 db    4
.eh_frame:000000000001C425                 db  2Bh ; +
.eh_frame:000000000001C426                 db    0
.eh_frame:000000000001C427                 db    0
.eh_frame:000000000001C428                 db 0E8h
.eh_frame:000000000001C429                 db  9Eh
.eh_frame:000000000001C42A                 db 0FFh
.eh_frame:000000000001C42B                 db 0FFh
.eh_frame:000000000001C42C                 db  65h ; e
.eh_frame:000000000001C42D                 db    0
.eh_frame:000000000001C42E                 db    0
.eh_frame:000000000001C42F                 db    0
.eh_frame:000000000001C430                 db    0
.eh_frame:000000000001C431                 db  42h ; B
.eh_frame:000000000001C432                 db  0Eh
.eh_frame:000000000001C433                 db  10h
.eh_frame:000000000001C434                 db  8Fh
.eh_frame:000000000001C435                 db    2
.eh_frame:000000000001C436                 db  42h ; B
.eh_frame:000000000001C437                 db  0Eh
.eh_frame:000000000001C438                 db  18h
.eh_frame:000000000001C439                 db  8Eh
.eh_frame:000000000001C43A                 db    3
.eh_frame:000000000001C43B                 db  45h ; E
.eh_frame:000000000001C43C                 db  0Eh
.eh_frame:000000000001C43D                 db  20h
.eh_frame:000000000001C43E                 db  8Dh
.eh_frame:000000000001C43F                 db    4
.eh_frame:000000000001C440                 db  42h ; B
.eh_frame:000000000001C441                 db  0Eh
.eh_frame:000000000001C442                 db  28h ; (
.eh_frame:000000000001C443                 db  8Ch
.eh_frame:000000000001C444                 db    5
.eh_frame:000000000001C445                 db  48h ; H
.eh_frame:000000000001C446                 db  0Eh
.eh_frame:000000000001C447                 db  30h ; 0
.eh_frame:000000000001C448                 db  86h
.eh_frame:000000000001C449                 db    6
.eh_frame:000000000001C44A                 db  48h ; H
.eh_frame:000000000001C44B                 db  0Eh
.eh_frame:000000000001C44C                 db  38h ; 8
.eh_frame:000000000001C44D                 db  83h
.eh_frame:000000000001C44E                 db    7
.eh_frame:000000000001C44F                 db  4Dh ; M
.eh_frame:000000000001C450                 db  0Eh
.eh_frame:000000000001C451                 db  40h ; @
.eh_frame:000000000001C452                 db  72h ; r
.eh_frame:000000000001C453                 db  0Eh
.eh_frame:000000000001C454                 db  38h ; 8
.eh_frame:000000000001C455                 db  41h ; A
.eh_frame:000000000001C456                 db  0Eh
.eh_frame:000000000001C457                 db  30h ; 0
.eh_frame:000000000001C458                 db  41h ; A
.eh_frame:000000000001C459                 db  0Eh
.eh_frame:000000000001C45A                 db  28h ; (
.eh_frame:000000000001C45B                 db  42h ; B
.eh_frame:000000000001C45C                 db  0Eh
.eh_frame:000000000001C45D                 db  20h
.eh_frame:000000000001C45E                 db  42h ; B
.eh_frame:000000000001C45F                 db  0Eh
.eh_frame:000000000001C460                 db  18h
.eh_frame:000000000001C461                 db  42h ; B
.eh_frame:000000000001C462                 db  0Eh
.eh_frame:000000000001C463                 db  10h
.eh_frame:000000000001C464                 db  42h ; B
.eh_frame:000000000001C465                 db  0Eh
.eh_frame:000000000001C466                 db    8
.eh_frame:000000000001C467                 db    0
.eh_frame:000000000001C468                 db  14h
.eh_frame:000000000001C469                 db    0
.eh_frame:000000000001C46A                 db    0
.eh_frame:000000000001C46B                 db    0
.eh_frame:000000000001C46C                 db  4Ch ; L
.eh_frame:000000000001C46D                 db  2Bh ; +
.eh_frame:000000000001C46E                 db    0
.eh_frame:000000000001C46F                 db    0
.eh_frame:000000000001C470                 db  10h
.eh_frame:000000000001C471                 db  9Fh
.eh_frame:000000000001C472                 db 0FFh
.eh_frame:000000000001C473                 db 0FFh
.eh_frame:000000000001C474                 db    2
.eh_frame:000000000001C475                 db    0
.eh_frame:000000000001C476                 db    0
.eh_frame:000000000001C477                 db    0
.eh_frame:000000000001C478                 db    0
.eh_frame:000000000001C479                 db    0
.eh_frame:000000000001C47A                 db    0
.eh_frame:000000000001C47B                 db    0
.eh_frame:000000000001C47C                 db    0
.eh_frame:000000000001C47D                 db    0
.eh_frame:000000000001C47E                 db    0
.eh_frame:000000000001C47F                 db    0
.eh_frame:000000000001C480                 db  10h
.eh_frame:000000000001C481                 db    0
.eh_frame:000000000001C482                 db    0
.eh_frame:000000000001C483                 db    0
.eh_frame:000000000001C484                 db  64h ; d
.eh_frame:000000000001C485                 db  2Bh ; +
.eh_frame:000000000001C486                 db    0
.eh_frame:000000000001C487                 db    0
.eh_frame:000000000001C488                 db    8
.eh_frame:000000000001C489                 db  9Fh
.eh_frame:000000000001C48A                 db 0FFh
.eh_frame:000000000001C48B                 db 0FFh
.eh_frame:000000000001C48C                 db  0Eh
.eh_frame:000000000001C48D                 db    0
.eh_frame:000000000001C48E                 db    0
.eh_frame:000000000001C48F                 db    0
.eh_frame:000000000001C490                 db    0
.eh_frame:000000000001C491                 db    0
.eh_frame:000000000001C492                 db    0
.eh_frame:000000000001C493                 db    0
.eh_frame:000000000001C494 __FRAME_END__   db    0
.eh_frame:000000000001C495                 db    0
.eh_frame:000000000001C496                 db    0
.eh_frame:000000000001C497                 db    0
.eh_frame:000000000001C497 _eh_frame       ends
.eh_frame:000000000001C497
.init_array:000000000021C6B0 ; ELF Initialization Function Table
.init_array:000000000021C6B0 ; ===========================================================================
.init_array:000000000021C6B0
.init_array:000000000021C6B0 ; Segment type: Pure data
.init_array:000000000021C6B0 ; Segment permissions: Read/Write
.init_array:000000000021C6B0 _init_array     segment qword public 'DATA' use64
.init_array:000000000021C6B0                 assume cs:_init_array
.init_array:000000000021C6B0                 ;org 21C6B0h
.init_array:000000000021C6B0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000021C6B0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000021C6B0                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000021C6B0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000021C6B0
.fini_array:000000000021C6B8 ; ELF Termination Function Table
.fini_array:000000000021C6B8 ; ===========================================================================
.fini_array:000000000021C6B8
.fini_array:000000000021C6B8 ; Segment type: Pure data
.fini_array:000000000021C6B8 ; Segment permissions: Read/Write
.fini_array:000000000021C6B8 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000021C6B8                 assume cs:_fini_array
.fini_array:000000000021C6B8                 ;org 21C6B8h
.fini_array:000000000021C6B8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000021C6B8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000021C6B8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000021C6B8
.data.rel.ro:000000000021C6C0 ; ===========================================================================
.data.rel.ro:000000000021C6C0
.data.rel.ro:000000000021C6C0 ; Segment type: Pure data
.data.rel.ro:000000000021C6C0 ; Segment permissions: Read/Write
.data.rel.ro:000000000021C6C0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000021C6C0                 assume cs:_data_rel_ro
.data.rel.ro:000000000021C6C0                 ;org 21C6C0h
.data.rel.ro:000000000021C6C0 ; struct option long_options
.data.rel.ro:000000000021C6C0 long_options    dq offset aBackup       ; name
.data.rel.ro:000000000021C6C0                                         ; DATA XREF: main+B↑o
.data.rel.ro:000000000021C6C0                 dd 2                    ; has_arg ; "backup"
.data.rel.ro:000000000021C6C0                 db 4 dup(0)
.data.rel.ro:000000000021C6C0                 dq 0                    ; flag
.data.rel.ro:000000000021C6C0                 dd 62h                  ; val
.data.rel.ro:000000000021C6C0                 db 4 dup(0)
.data.rel.ro:000000000021C6E0                 dq offset aCompare      ; "compare"
.data.rel.ro:000000000021C6E8                 db    0
.data.rel.ro:000000000021C6E9                 db    0
.data.rel.ro:000000000021C6EA                 db    0
.data.rel.ro:000000000021C6EB                 db    0
.data.rel.ro:000000000021C6EC                 db    0
.data.rel.ro:000000000021C6ED                 db    0
.data.rel.ro:000000000021C6EE                 db    0
.data.rel.ro:000000000021C6EF                 db    0
.data.rel.ro:000000000021C6F0                 db    0
.data.rel.ro:000000000021C6F1                 db    0
.data.rel.ro:000000000021C6F2                 db    0
.data.rel.ro:000000000021C6F3                 db    0
.data.rel.ro:000000000021C6F4                 db    0
.data.rel.ro:000000000021C6F5                 db    0
.data.rel.ro:000000000021C6F6                 db    0
.data.rel.ro:000000000021C6F7                 db    0
.data.rel.ro:000000000021C6F8                 db  43h ; C
.data.rel.ro:000000000021C6F9                 db    0
.data.rel.ro:000000000021C6FA                 db    0
.data.rel.ro:000000000021C6FB                 db    0
.data.rel.ro:000000000021C6FC                 db    0
.data.rel.ro:000000000021C6FD                 db    0
.data.rel.ro:000000000021C6FE                 db    0
.data.rel.ro:000000000021C6FF                 db    0
.data.rel.ro:000000000021C700                 dq offset aPreserveContex_0+9 ; "context"
.data.rel.ro:000000000021C708                 db    2
.data.rel.ro:000000000021C709                 db    0
.data.rel.ro:000000000021C70A                 db    0
.data.rel.ro:000000000021C70B                 db    0
.data.rel.ro:000000000021C70C                 db    0
.data.rel.ro:000000000021C70D                 db    0
.data.rel.ro:000000000021C70E                 db    0
.data.rel.ro:000000000021C70F                 db    0
.data.rel.ro:000000000021C710                 db    0
.data.rel.ro:000000000021C711                 db    0
.data.rel.ro:000000000021C712                 db    0
.data.rel.ro:000000000021C713                 db    0
.data.rel.ro:000000000021C714                 db    0
.data.rel.ro:000000000021C715                 db    0
.data.rel.ro:000000000021C716                 db    0
.data.rel.ro:000000000021C717                 db    0
.data.rel.ro:000000000021C718                 db  5Ah ; Z
.data.rel.ro:000000000021C719                 db    0
.data.rel.ro:000000000021C71A                 db    0
.data.rel.ro:000000000021C71B                 db    0
.data.rel.ro:000000000021C71C                 db    0
.data.rel.ro:000000000021C71D                 db    0
.data.rel.ro:000000000021C71E                 db    0
.data.rel.ro:000000000021C71F                 db    0
.data.rel.ro:000000000021C720                 dq offset aTargetSIsNotAD+13h ; "directory"
.data.rel.ro:000000000021C728                 db    0
.data.rel.ro:000000000021C729                 db    0
.data.rel.ro:000000000021C72A                 db    0
.data.rel.ro:000000000021C72B                 db    0
.data.rel.ro:000000000021C72C                 db    0
.data.rel.ro:000000000021C72D                 db    0
.data.rel.ro:000000000021C72E                 db    0
.data.rel.ro:000000000021C72F                 db    0
.data.rel.ro:000000000021C730                 db    0
.data.rel.ro:000000000021C731                 db    0
.data.rel.ro:000000000021C732                 db    0
.data.rel.ro:000000000021C733                 db    0
.data.rel.ro:000000000021C734                 db    0
.data.rel.ro:000000000021C735                 db    0
.data.rel.ro:000000000021C736                 db    0
.data.rel.ro:000000000021C737                 db    0
.data.rel.ro:000000000021C738                 db  64h ; d
.data.rel.ro:000000000021C739                 db    0
.data.rel.ro:000000000021C73A                 db    0
.data.rel.ro:000000000021C73B                 db    0
.data.rel.ro:000000000021C73C                 db    0
.data.rel.ro:000000000021C73D                 db    0
.data.rel.ro:000000000021C73E                 db    0
.data.rel.ro:000000000021C73F                 db    0
.data.rel.ro:000000000021C740                 dq offset aGroup        ; "group"
.data.rel.ro:000000000021C748                 db    1
.data.rel.ro:000000000021C749                 db    0
.data.rel.ro:000000000021C74A                 db    0
.data.rel.ro:000000000021C74B                 db    0
.data.rel.ro:000000000021C74C                 db    0
.data.rel.ro:000000000021C74D                 db    0
.data.rel.ro:000000000021C74E                 db    0
.data.rel.ro:000000000021C74F                 db    0
.data.rel.ro:000000000021C750                 db    0
.data.rel.ro:000000000021C751                 db    0
.data.rel.ro:000000000021C752                 db    0
.data.rel.ro:000000000021C753                 db    0
.data.rel.ro:000000000021C754                 db    0
.data.rel.ro:000000000021C755                 db    0
.data.rel.ro:000000000021C756                 db    0
.data.rel.ro:000000000021C757                 db    0
.data.rel.ro:000000000021C758                 db  67h ; g
.data.rel.ro:000000000021C759                 db    0
.data.rel.ro:000000000021C75A                 db    0
.data.rel.ro:000000000021C75B                 db    0
.data.rel.ro:000000000021C75C                 db    0
.data.rel.ro:000000000021C75D                 db    0
.data.rel.ro:000000000021C75E                 db    0
.data.rel.ro:000000000021C75F                 db    0
.data.rel.ro:000000000021C760                 dq offset aMode         ; "mode"
.data.rel.ro:000000000021C768                 db    1
.data.rel.ro:000000000021C769                 db    0
.data.rel.ro:000000000021C76A                 db    0
.data.rel.ro:000000000021C76B                 db    0
.data.rel.ro:000000000021C76C                 db    0
.data.rel.ro:000000000021C76D                 db    0
.data.rel.ro:000000000021C76E                 db    0
.data.rel.ro:000000000021C76F                 db    0
.data.rel.ro:000000000021C770                 db    0
.data.rel.ro:000000000021C771                 db    0
.data.rel.ro:000000000021C772                 db    0
.data.rel.ro:000000000021C773                 db    0
.data.rel.ro:000000000021C774                 db    0
.data.rel.ro:000000000021C775                 db    0
.data.rel.ro:000000000021C776                 db    0
.data.rel.ro:000000000021C777                 db    0
.data.rel.ro:000000000021C778                 db  6Dh ; m
.data.rel.ro:000000000021C779                 db    0
.data.rel.ro:000000000021C77A                 db    0
.data.rel.ro:000000000021C77B                 db    0
.data.rel.ro:000000000021C77C                 db    0
.data.rel.ro:000000000021C77D                 db    0
.data.rel.ro:000000000021C77E                 db    0
.data.rel.ro:000000000021C77F                 db    0
.data.rel.ro:000000000021C780                 dq offset aNoTargetDirect ; "no-target-directory"
.data.rel.ro:000000000021C788                 db    0
.data.rel.ro:000000000021C789                 db    0
.data.rel.ro:000000000021C78A                 db    0
.data.rel.ro:000000000021C78B                 db    0
.data.rel.ro:000000000021C78C                 db    0
.data.rel.ro:000000000021C78D                 db    0
.data.rel.ro:000000000021C78E                 db    0
.data.rel.ro:000000000021C78F                 db    0
.data.rel.ro:000000000021C790                 db    0
.data.rel.ro:000000000021C791                 db    0
.data.rel.ro:000000000021C792                 db    0
.data.rel.ro:000000000021C793                 db    0
.data.rel.ro:000000000021C794                 db    0
.data.rel.ro:000000000021C795                 db    0
.data.rel.ro:000000000021C796                 db    0
.data.rel.ro:000000000021C797                 db    0
.data.rel.ro:000000000021C798                 db  54h ; T
.data.rel.ro:000000000021C799                 db    0
.data.rel.ro:000000000021C79A                 db    0
.data.rel.ro:000000000021C79B                 db    0
.data.rel.ro:000000000021C79C                 db    0
.data.rel.ro:000000000021C79D                 db    0
.data.rel.ro:000000000021C79E                 db    0
.data.rel.ro:000000000021C79F                 db    0
.data.rel.ro:000000000021C7A0                 dq offset aOwner        ; "owner"
.data.rel.ro:000000000021C7A8                 db    1
.data.rel.ro:000000000021C7A9                 db    0
.data.rel.ro:000000000021C7AA                 db    0
.data.rel.ro:000000000021C7AB                 db    0
.data.rel.ro:000000000021C7AC                 db    0
.data.rel.ro:000000000021C7AD                 db    0
.data.rel.ro:000000000021C7AE                 db    0
.data.rel.ro:000000000021C7AF                 db    0
.data.rel.ro:000000000021C7B0                 db    0
.data.rel.ro:000000000021C7B1                 db    0
.data.rel.ro:000000000021C7B2                 db    0
.data.rel.ro:000000000021C7B3                 db    0
.data.rel.ro:000000000021C7B4                 db    0
.data.rel.ro:000000000021C7B5                 db    0
.data.rel.ro:000000000021C7B6                 db    0
.data.rel.ro:000000000021C7B7                 db    0
.data.rel.ro:000000000021C7B8                 db  6Fh ; o
.data.rel.ro:000000000021C7B9                 db    0
.data.rel.ro:000000000021C7BA                 db    0
.data.rel.ro:000000000021C7BB                 db    0
.data.rel.ro:000000000021C7BC                 db    0
.data.rel.ro:000000000021C7BD                 db    0
.data.rel.ro:000000000021C7BE                 db    0
.data.rel.ro:000000000021C7BF                 db    0
.data.rel.ro:000000000021C7C0                 dq offset aPreserveTimest ; "preserve-timestamps"
.data.rel.ro:000000000021C7C8                 db    0
.data.rel.ro:000000000021C7C9                 db    0
.data.rel.ro:000000000021C7CA                 db    0
.data.rel.ro:000000000021C7CB                 db    0
.data.rel.ro:000000000021C7CC                 db    0
.data.rel.ro:000000000021C7CD                 db    0
.data.rel.ro:000000000021C7CE                 db    0
.data.rel.ro:000000000021C7CF                 db    0
.data.rel.ro:000000000021C7D0                 db    0
.data.rel.ro:000000000021C7D1                 db    0
.data.rel.ro:000000000021C7D2                 db    0
.data.rel.ro:000000000021C7D3                 db    0
.data.rel.ro:000000000021C7D4                 db    0
.data.rel.ro:000000000021C7D5                 db    0
.data.rel.ro:000000000021C7D6                 db    0
.data.rel.ro:000000000021C7D7                 db    0
.data.rel.ro:000000000021C7D8                 db  70h ; p
.data.rel.ro:000000000021C7D9                 db    0
.data.rel.ro:000000000021C7DA                 db    0
.data.rel.ro:000000000021C7DB                 db    0
.data.rel.ro:000000000021C7DC                 db    0
.data.rel.ro:000000000021C7DD                 db    0
.data.rel.ro:000000000021C7DE                 db    0
.data.rel.ro:000000000021C7DF                 db    0
.data.rel.ro:000000000021C7E0                 dq offset aPreserveContex_0 ; "preserve-context"
.data.rel.ro:000000000021C7E8                 db    0
.data.rel.ro:000000000021C7E9                 db    0
.data.rel.ro:000000000021C7EA                 db    0
.data.rel.ro:000000000021C7EB                 db    0
.data.rel.ro:000000000021C7EC                 db    0
.data.rel.ro:000000000021C7ED                 db    0
.data.rel.ro:000000000021C7EE                 db    0
.data.rel.ro:000000000021C7EF                 db    0
.data.rel.ro:000000000021C7F0                 db    0
.data.rel.ro:000000000021C7F1                 db    0
.data.rel.ro:000000000021C7F2                 db    0
.data.rel.ro:000000000021C7F3                 db    0
.data.rel.ro:000000000021C7F4                 db    0
.data.rel.ro:000000000021C7F5                 db    0
.data.rel.ro:000000000021C7F6                 db    0
.data.rel.ro:000000000021C7F7                 db    0
.data.rel.ro:000000000021C7F8                 db  80h
.data.rel.ro:000000000021C7F9                 db    0
.data.rel.ro:000000000021C7FA                 db    0
.data.rel.ro:000000000021C7FB                 db    0
.data.rel.ro:000000000021C7FC                 db    0
.data.rel.ro:000000000021C7FD                 db    0
.data.rel.ro:000000000021C7FE                 db    0
.data.rel.ro:000000000021C7FF                 db    0
.data.rel.ro:000000000021C800                 dq offset aWaitingForStri+0Ch ; "strip"
.data.rel.ro:000000000021C808                 db    0
.data.rel.ro:000000000021C809                 db    0
.data.rel.ro:000000000021C80A                 db    0
.data.rel.ro:000000000021C80B                 db    0
.data.rel.ro:000000000021C80C                 db    0
.data.rel.ro:000000000021C80D                 db    0
.data.rel.ro:000000000021C80E                 db    0
.data.rel.ro:000000000021C80F                 db    0
.data.rel.ro:000000000021C810                 db    0
.data.rel.ro:000000000021C811                 db    0
.data.rel.ro:000000000021C812                 db    0
.data.rel.ro:000000000021C813                 db    0
.data.rel.ro:000000000021C814                 db    0
.data.rel.ro:000000000021C815                 db    0
.data.rel.ro:000000000021C816                 db    0
.data.rel.ro:000000000021C817                 db    0
.data.rel.ro:000000000021C818                 db  73h ; s
.data.rel.ro:000000000021C819                 db    0
.data.rel.ro:000000000021C81A                 db    0
.data.rel.ro:000000000021C81B                 db    0
.data.rel.ro:000000000021C81C                 db    0
.data.rel.ro:000000000021C81D                 db    0
.data.rel.ro:000000000021C81E                 db    0
.data.rel.ro:000000000021C81F                 db    0
.data.rel.ro:000000000021C820                 dq offset aStripProgram ; "strip-program"
.data.rel.ro:000000000021C828                 db    1
.data.rel.ro:000000000021C829                 db    0
.data.rel.ro:000000000021C82A                 db    0
.data.rel.ro:000000000021C82B                 db    0
.data.rel.ro:000000000021C82C                 db    0
.data.rel.ro:000000000021C82D                 db    0
.data.rel.ro:000000000021C82E                 db    0
.data.rel.ro:000000000021C82F                 db    0
.data.rel.ro:000000000021C830                 db    0
.data.rel.ro:000000000021C831                 db    0
.data.rel.ro:000000000021C832                 db    0
.data.rel.ro:000000000021C833                 db    0
.data.rel.ro:000000000021C834                 db    0
.data.rel.ro:000000000021C835                 db    0
.data.rel.ro:000000000021C836                 db    0
.data.rel.ro:000000000021C837                 db    0
.data.rel.ro:000000000021C838                 db  81h
.data.rel.ro:000000000021C839                 db    0
.data.rel.ro:000000000021C83A                 db    0
.data.rel.ro:000000000021C83B                 db    0
.data.rel.ro:000000000021C83C                 db    0
.data.rel.ro:000000000021C83D                 db    0
.data.rel.ro:000000000021C83E                 db    0
.data.rel.ro:000000000021C83F                 db    0
.data.rel.ro:000000000021C840                 dq offset aSuffix       ; "suffix"
.data.rel.ro:000000000021C848                 db    1
.data.rel.ro:000000000021C849                 db    0
.data.rel.ro:000000000021C84A                 db    0
.data.rel.ro:000000000021C84B                 db    0
.data.rel.ro:000000000021C84C                 db    0
.data.rel.ro:000000000021C84D                 db    0
.data.rel.ro:000000000021C84E                 db    0
.data.rel.ro:000000000021C84F                 db    0
.data.rel.ro:000000000021C850                 db    0
.data.rel.ro:000000000021C851                 db    0
.data.rel.ro:000000000021C852                 db    0
.data.rel.ro:000000000021C853                 db    0
.data.rel.ro:000000000021C854                 db    0
.data.rel.ro:000000000021C855                 db    0
.data.rel.ro:000000000021C856                 db    0
.data.rel.ro:000000000021C857                 db    0
.data.rel.ro:000000000021C858                 db  53h ; S
.data.rel.ro:000000000021C859                 db    0
.data.rel.ro:000000000021C85A                 db    0
.data.rel.ro:000000000021C85B                 db    0
.data.rel.ro:000000000021C85C                 db    0
.data.rel.ro:000000000021C85D                 db    0
.data.rel.ro:000000000021C85E                 db    0
.data.rel.ro:000000000021C85F                 db    0
.data.rel.ro:000000000021C860                 dq offset aNoTargetDirect+3 ; "target-directory"
.data.rel.ro:000000000021C868                 db    1
.data.rel.ro:000000000021C869                 db    0
.data.rel.ro:000000000021C86A                 db    0
.data.rel.ro:000000000021C86B                 db    0
.data.rel.ro:000000000021C86C                 db    0
.data.rel.ro:000000000021C86D                 db    0
.data.rel.ro:000000000021C86E                 db    0
.data.rel.ro:000000000021C86F                 db    0
.data.rel.ro:000000000021C870                 db    0
.data.rel.ro:000000000021C871                 db    0
.data.rel.ro:000000000021C872                 db    0
.data.rel.ro:000000000021C873                 db    0
.data.rel.ro:000000000021C874                 db    0
.data.rel.ro:000000000021C875                 db    0
.data.rel.ro:000000000021C876                 db    0
.data.rel.ro:000000000021C877                 db    0
.data.rel.ro:000000000021C878                 db  74h ; t
.data.rel.ro:000000000021C879                 db    0
.data.rel.ro:000000000021C87A                 db    0
.data.rel.ro:000000000021C87B                 db    0
.data.rel.ro:000000000021C87C                 db    0
.data.rel.ro:000000000021C87D                 db    0
.data.rel.ro:000000000021C87E                 db    0
.data.rel.ro:000000000021C87F                 db    0
.data.rel.ro:000000000021C880                 dq offset aVerbose      ; "verbose"
.data.rel.ro:000000000021C888                 db    0
.data.rel.ro:000000000021C889                 db    0
.data.rel.ro:000000000021C88A                 db    0
.data.rel.ro:000000000021C88B                 db    0
.data.rel.ro:000000000021C88C                 db    0
.data.rel.ro:000000000021C88D                 db    0
.data.rel.ro:000000000021C88E                 db    0
.data.rel.ro:000000000021C88F                 db    0
.data.rel.ro:000000000021C890                 db    0
.data.rel.ro:000000000021C891                 db    0
.data.rel.ro:000000000021C892                 db    0
.data.rel.ro:000000000021C893                 db    0
.data.rel.ro:000000000021C894                 db    0
.data.rel.ro:000000000021C895                 db    0
.data.rel.ro:000000000021C896                 db    0
.data.rel.ro:000000000021C897                 db    0
.data.rel.ro:000000000021C898                 db  76h ; v
.data.rel.ro:000000000021C899                 db    0
.data.rel.ro:000000000021C89A                 db    0
.data.rel.ro:000000000021C89B                 db    0
.data.rel.ro:000000000021C89C                 db    0
.data.rel.ro:000000000021C89D                 db    0
.data.rel.ro:000000000021C89E                 db    0
.data.rel.ro:000000000021C89F                 db    0
.data.rel.ro:000000000021C8A0                 dq offset aHelp         ; "help"
.data.rel.ro:000000000021C8A8                 db    0
.data.rel.ro:000000000021C8A9                 db    0
.data.rel.ro:000000000021C8AA                 db    0
.data.rel.ro:000000000021C8AB                 db    0
.data.rel.ro:000000000021C8AC                 db    0
.data.rel.ro:000000000021C8AD                 db    0
.data.rel.ro:000000000021C8AE                 db    0
.data.rel.ro:000000000021C8AF                 db    0
.data.rel.ro:000000000021C8B0                 db    0
.data.rel.ro:000000000021C8B1                 db    0
.data.rel.ro:000000000021C8B2                 db    0
.data.rel.ro:000000000021C8B3                 db    0
.data.rel.ro:000000000021C8B4                 db    0
.data.rel.ro:000000000021C8B5                 db    0
.data.rel.ro:000000000021C8B6                 db    0
.data.rel.ro:000000000021C8B7                 db    0
.data.rel.ro:000000000021C8B8                 db  7Eh ; ~
.data.rel.ro:000000000021C8B9                 db 0FFh
.data.rel.ro:000000000021C8BA                 db 0FFh
.data.rel.ro:000000000021C8BB                 db 0FFh
.data.rel.ro:000000000021C8BC                 db    0
.data.rel.ro:000000000021C8BD                 db    0
.data.rel.ro:000000000021C8BE                 db    0
.data.rel.ro:000000000021C8BF                 db    0
.data.rel.ro:000000000021C8C0                 dq offset aVersion      ; "version"
.data.rel.ro:000000000021C8C8                 db    0
.data.rel.ro:000000000021C8C9                 db    0
.data.rel.ro:000000000021C8CA                 db    0
.data.rel.ro:000000000021C8CB                 db    0
.data.rel.ro:000000000021C8CC                 db    0
.data.rel.ro:000000000021C8CD                 db    0
.data.rel.ro:000000000021C8CE                 db    0
.data.rel.ro:000000000021C8CF                 db    0
.data.rel.ro:000000000021C8D0                 db    0
.data.rel.ro:000000000021C8D1                 db    0
.data.rel.ro:000000000021C8D2                 db    0
.data.rel.ro:000000000021C8D3                 db    0
.data.rel.ro:000000000021C8D4                 db    0
.data.rel.ro:000000000021C8D5                 db    0
.data.rel.ro:000000000021C8D6                 db    0
.data.rel.ro:000000000021C8D7                 db    0
.data.rel.ro:000000000021C8D8                 db  7Dh ; }
.data.rel.ro:000000000021C8D9                 db 0FFh
.data.rel.ro:000000000021C8DA                 db 0FFh
.data.rel.ro:000000000021C8DB                 db 0FFh
.data.rel.ro:000000000021C8DC                 db    0
.data.rel.ro:000000000021C8DD                 db    0
.data.rel.ro:000000000021C8DE                 db    0
.data.rel.ro:000000000021C8DF                 db    0
.data.rel.ro:000000000021C8E0                 db    0
.data.rel.ro:000000000021C8E1                 db    0
.data.rel.ro:000000000021C8E2                 db    0
.data.rel.ro:000000000021C8E3                 db    0
.data.rel.ro:000000000021C8E4                 db    0
.data.rel.ro:000000000021C8E5                 db    0
.data.rel.ro:000000000021C8E6                 db    0
.data.rel.ro:000000000021C8E7                 db    0
.data.rel.ro:000000000021C8E8                 db    0
.data.rel.ro:000000000021C8E9                 db    0
.data.rel.ro:000000000021C8EA                 db    0
.data.rel.ro:000000000021C8EB                 db    0
.data.rel.ro:000000000021C8EC                 db    0
.data.rel.ro:000000000021C8ED                 db    0
.data.rel.ro:000000000021C8EE                 db    0
.data.rel.ro:000000000021C8EF                 db    0
.data.rel.ro:000000000021C8F0                 db    0
.data.rel.ro:000000000021C8F1                 db    0
.data.rel.ro:000000000021C8F2                 db    0
.data.rel.ro:000000000021C8F3                 db    0
.data.rel.ro:000000000021C8F4                 db    0
.data.rel.ro:000000000021C8F5                 db    0
.data.rel.ro:000000000021C8F6                 db    0
.data.rel.ro:000000000021C8F7                 db    0
.data.rel.ro:000000000021C8F8                 db    0
.data.rel.ro:000000000021C8F9                 db    0
.data.rel.ro:000000000021C8FA                 db    0
.data.rel.ro:000000000021C8FB                 db    0
.data.rel.ro:000000000021C8FC                 db    0
.data.rel.ro:000000000021C8FD                 db    0
.data.rel.ro:000000000021C8FE                 db    0
.data.rel.ro:000000000021C8FF                 db    0
.data.rel.ro:000000000021C900 backup_args     dq offset aNone         ; DATA XREF: get_version_part_0+B↑o
.data.rel.ro:000000000021C900                                         ; "none"
.data.rel.ro:000000000021C908                 dq offset aOff          ; "off"
.data.rel.ro:000000000021C910                 dq offset aSimple       ; "simple"
.data.rel.ro:000000000021C918                 dq offset aNever        ; "never"
.data.rel.ro:000000000021C920                 dq offset aExisting     ; "existing"
.data.rel.ro:000000000021C928                 dq offset aNil          ; "nil"
.data.rel.ro:000000000021C930                 dq offset aNumbered     ; "numbered"
.data.rel.ro:000000000021C938                 dq offset aPreserveContex_0+0Fh ; "t"
.data.rel.ro:000000000021C940                 db    0
.data.rel.ro:000000000021C941                 db    0
.data.rel.ro:000000000021C942                 db    0
.data.rel.ro:000000000021C943                 db    0
.data.rel.ro:000000000021C944                 db    0
.data.rel.ro:000000000021C945                 db    0
.data.rel.ro:000000000021C946                 db    0
.data.rel.ro:000000000021C947                 db    0
.data.rel.ro:000000000021C948                 db    0
.data.rel.ro:000000000021C949                 db    0
.data.rel.ro:000000000021C94A                 db    0
.data.rel.ro:000000000021C94B                 db    0
.data.rel.ro:000000000021C94C                 db    0
.data.rel.ro:000000000021C94D                 db    0
.data.rel.ro:000000000021C94E                 db    0
.data.rel.ro:000000000021C94F                 db    0
.data.rel.ro:000000000021C950                 db    0
.data.rel.ro:000000000021C951                 db    0
.data.rel.ro:000000000021C952                 db    0
.data.rel.ro:000000000021C953                 db    0
.data.rel.ro:000000000021C954                 db    0
.data.rel.ro:000000000021C955                 db    0
.data.rel.ro:000000000021C956                 db    0
.data.rel.ro:000000000021C957                 db    0
.data.rel.ro:000000000021C958                 db    0
.data.rel.ro:000000000021C959                 db    0
.data.rel.ro:000000000021C95A                 db    0
.data.rel.ro:000000000021C95B                 db    0
.data.rel.ro:000000000021C95C                 db    0
.data.rel.ro:000000000021C95D                 db    0
.data.rel.ro:000000000021C95E                 db    0
.data.rel.ro:000000000021C95F                 db    0
.data.rel.ro:000000000021C960                 public quoting_style_args
.data.rel.ro:000000000021C960 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000021C968                 dq offset aShell        ; "shell"
.data.rel.ro:000000000021C970                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000021C978                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000021C980                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000021C988                 dq offset file+1Bh      ; "c"
.data.rel.ro:000000000021C990                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000021C998                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000021C9A0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000021C9A8                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000021C9B0                 align 20h
.data.rel.ro:000000000021C9C0 comparison_function_table db    0       ; DATA XREF: streamsavedir+2↑o
.data.rel.ro:000000000021C9C1                 db    0
.data.rel.ro:000000000021C9C2                 db    0
.data.rel.ro:000000000021C9C3                 db    0
.data.rel.ro:000000000021C9C4                 db    0
.data.rel.ro:000000000021C9C5                 db    0
.data.rel.ro:000000000021C9C6                 db    0
.data.rel.ro:000000000021C9C7                 db    0
.data.rel.ro:000000000021C9C8                 dq offset direntry_cmp_name
.data.rel.ro:000000000021C9D0                 dq offset direntry_cmp_inode
.data.rel.ro:000000000021C9D0 _data_rel_ro    ends
.data.rel.ro:000000000021C9D0
LOAD:000000000021C9D8 ; ELF Dynamic Information
LOAD:000000000021C9D8 ; ===========================================================================
LOAD:000000000021C9D8
LOAD:000000000021C9D8 ; Segment type: Pure data
LOAD:000000000021C9D8 ; Segment permissions: Read/Write
LOAD:000000000021C9D8 LOAD            segment byte public 'DATA' use64
LOAD:000000000021C9D8                 assume cs:LOAD
LOAD:000000000021C9D8                 ;org 21C9D8h
LOAD:000000000021C9D8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000021C9D8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000021C9D8                                         ; DT_NEEDED libc.so.6
LOAD:000000000021C9E8                 Elf64_Dyn <0Ch, 28C0h>  ; DT_INIT
LOAD:000000000021C9F8                 Elf64_Dyn <0Dh, 163A0h> ; DT_FINI
LOAD:000000000021CA08                 Elf64_Dyn <19h, 21C6B0h> ; DT_INIT_ARRAY
LOAD:000000000021CA18                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000021CA28                 Elf64_Dyn <1Ah, 21C6B8h> ; DT_FINI_ARRAY
LOAD:000000000021CA38                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000021CA48                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000021CA58                 Elf64_Dyn <5, 1030h>    ; DT_STRTAB
LOAD:000000000021CA68                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000021CA78                 Elf64_Dyn <0Ah, 57Eh>   ; DT_STRSZ
LOAD:000000000021CA88                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000021CA98                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000021CAA8                 Elf64_Dyn <3, 21CBC8h>  ; DT_PLTGOT
LOAD:000000000021CAB8                 Elf64_Dyn <2, 0BD0h>    ; DT_PLTRELSZ
LOAD:000000000021CAC8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000021CAD8                 Elf64_Dyn <17h, 1CF0h>  ; DT_JMPREL
LOAD:000000000021CAE8                 Elf64_Dyn <7, 1780h>    ; DT_RELA
LOAD:000000000021CAF8                 Elf64_Dyn <8, 570h>     ; DT_RELASZ
LOAD:000000000021CB08                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000021CB18                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000021CB28                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000021CB38                 Elf64_Dyn <6FFFFFFEh, 16D0h> ; DT_VERNEED
LOAD:000000000021CB48                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000021CB58                 Elf64_Dyn <6FFFFFF0h, 15AEh> ; DT_VERSYM
LOAD:000000000021CB68                 Elf64_Dyn <6FFFFFF9h, 2Dh> ; DT_RELACOUNT
LOAD:000000000021CB78                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000021CB88                 db    0
LOAD:000000000021CB89                 db    0
LOAD:000000000021CB8A                 db    0
LOAD:000000000021CB8B                 db    0
LOAD:000000000021CB8C                 db    0
LOAD:000000000021CB8D                 db    0
LOAD:000000000021CB8E                 db    0
LOAD:000000000021CB8F                 db    0
LOAD:000000000021CB90                 db    0
LOAD:000000000021CB91                 db    0
LOAD:000000000021CB92                 db    0
LOAD:000000000021CB93                 db    0
LOAD:000000000021CB94                 db    0
LOAD:000000000021CB95                 db    0
LOAD:000000000021CB96                 db    0
LOAD:000000000021CB97                 db    0
LOAD:000000000021CB98                 db    0
LOAD:000000000021CB99                 db    0
LOAD:000000000021CB9A                 db    0
LOAD:000000000021CB9B                 db    0
LOAD:000000000021CB9C                 db    0
LOAD:000000000021CB9D                 db    0
LOAD:000000000021CB9E                 db    0
LOAD:000000000021CB9F                 db    0
LOAD:000000000021CBA0                 db    0
LOAD:000000000021CBA1                 db    0
LOAD:000000000021CBA2                 db    0
LOAD:000000000021CBA3                 db    0
LOAD:000000000021CBA4                 db    0
LOAD:000000000021CBA5                 db    0
LOAD:000000000021CBA6                 db    0
LOAD:000000000021CBA7                 db    0
LOAD:000000000021CBA8                 db    0
LOAD:000000000021CBA9                 db    0
LOAD:000000000021CBAA                 db    0
LOAD:000000000021CBAB                 db    0
LOAD:000000000021CBAC                 db    0
LOAD:000000000021CBAD                 db    0
LOAD:000000000021CBAE                 db    0
LOAD:000000000021CBAF                 db    0
LOAD:000000000021CBB0                 db    0
LOAD:000000000021CBB1                 db    0
LOAD:000000000021CBB2                 db    0
LOAD:000000000021CBB3                 db    0
LOAD:000000000021CBB4                 db    0
LOAD:000000000021CBB5                 db    0
LOAD:000000000021CBB6                 db    0
LOAD:000000000021CBB7                 db    0
LOAD:000000000021CBB8                 db    0
LOAD:000000000021CBB9                 db    0
LOAD:000000000021CBBA                 db    0
LOAD:000000000021CBBB                 db    0
LOAD:000000000021CBBC                 db    0
LOAD:000000000021CBBD                 db    0
LOAD:000000000021CBBE                 db    0
LOAD:000000000021CBBF                 db    0
LOAD:000000000021CBC0                 db    0
LOAD:000000000021CBC1                 db    0
LOAD:000000000021CBC2                 db    0
LOAD:000000000021CBC3                 db    0
LOAD:000000000021CBC4                 db    0
LOAD:000000000021CBC5                 db    0
LOAD:000000000021CBC6                 db    0
LOAD:000000000021CBC7                 db    0
LOAD:000000000021CBC7 LOAD            ends
LOAD:000000000021CBC7
.got:000000000021CBC8 ; ===========================================================================
.got:000000000021CBC8
.got:000000000021CBC8 ; Segment type: Pure data
.got:000000000021CBC8 ; Segment permissions: Read/Write
.got:000000000021CBC8 _got            segment qword public 'DATA' use64
.got:000000000021CBC8                 assume cs:_got
.got:000000000021CBC8                 ;org 21CBC8h
.got:000000000021CBC8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000021CBD0 qword_21CBD0    dq 0                    ; DATA XREF: sub_28E0↑r
.got:000000000021CBD8 qword_21CBD8    dq 0                    ; DATA XREF: sub_28E0+6↑r
.got:000000000021CBE0 endgrent_ptr    dq offset endgrent      ; DATA XREF: _endgrent↑r
.got:000000000021CBE8 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:000000000021CBF0 __snprintf_chk_ptr dq offset __snprintf_chk
.got:000000000021CBF0                                         ; DATA XREF: ___snprintf_chk↑r
.got:000000000021CBF8 raise_ptr       dq offset raise         ; DATA XREF: _raise↑r
.got:000000000021CC00 utimensat_ptr   dq offset utimensat     ; DATA XREF: _utimensat↑r
.got:000000000021CC08 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000021CC10 __errno_location_ptr dq offset __errno_location
.got:000000000021CC10                                         ; DATA XREF: ___errno_location↑r
.got:000000000021CC18 unlink_ptr      dq offset unlink        ; DATA XREF: _unlink↑r
.got:000000000021CC20 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000021CC28 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000021CC30 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:000000000021CC38 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000021CC40 __read_chk_ptr  dq offset __read_chk    ; DATA XREF: ___read_chk↑r
.got:000000000021CC48 mkdir_ptr       dq offset mkdir         ; DATA XREF: _mkdir↑r
.got:000000000021CC50 unlinkat_ptr    dq offset unlinkat      ; DATA XREF: _unlinkat↑r
.got:000000000021CC58 qsort_ptr       dq offset qsort         ; DATA XREF: _qsort↑r
.got:000000000021CC60 readlink_ptr    dq offset readlink      ; DATA XREF: _readlink↑r
.got:000000000021CC68 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000021CC70 clock_gettime_ptr dq offset clock_gettime
.got:000000000021CC70                                         ; DATA XREF: _clock_gettime↑r
.got:000000000021CC78 write_ptr       dq offset write         ; DATA XREF: _write↑r
.got:000000000021CC80 getpid_ptr      dq offset getpid        ; DATA XREF: _getpid↑r
.got:000000000021CC88 fread_unlocked_ptr dq offset fread_unlocked
.got:000000000021CC88                                         ; DATA XREF: _fread_unlocked↑r
.got:000000000021CC90 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000021CC98 pathconf_ptr    dq offset pathconf      ; DATA XREF: _pathconf↑r
.got:000000000021CCA0 __open_2_ptr    dq offset __open_2      ; DATA XREF: ___open_2↑r
.got:000000000021CCA8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000021CCB0 opendir_ptr     dq offset opendir       ; DATA XREF: _opendir↑r
.got:000000000021CCB8 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000021CCB8                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000021CCC0 stpcpy_ptr      dq offset stpcpy        ; DATA XREF: _stpcpy↑r
.got:000000000021CCC8 rmdir_ptr       dq offset rmdir         ; DATA XREF: _rmdir↑r
.got:000000000021CCD0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000021CCD8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000021CCD8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000021CCE0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000021CCE8 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:000000000021CCF0 openat_ptr      dq offset openat        ; DATA XREF: _openat↑r
.got:000000000021CCF8 chdir_ptr       dq offset chdir         ; DATA XREF: _chdir↑r
.got:000000000021CD00 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000021CD00                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000021CD08 getuid_ptr      dq offset getuid        ; DATA XREF: _getuid↑r
.got:000000000021CD10 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000021CD18 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000021CD20 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000021CD28 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:000000000021CD30 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000021CD38 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000021CD40 ftruncate_ptr   dq offset ftruncate     ; DATA XREF: _ftruncate↑r
.got:000000000021CD48 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000021CD50 gettimeofday_ptr dq offset gettimeofday ; DATA XREF: _gettimeofday↑r
.got:000000000021CD58 __assert_fail_ptr dq offset __assert_fail
.got:000000000021CD58                                         ; DATA XREF: ___assert_fail↑r
.got:000000000021CD60 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000021CD68 geteuid_ptr     dq offset geteuid       ; DATA XREF: _geteuid↑r
.got:000000000021CD70 ioctl_ptr       dq offset ioctl         ; DATA XREF: _ioctl↑r
.got:000000000021CD78 canonicalize_file_name_ptr dq offset canonicalize_file_name
.got:000000000021CD78                                         ; DATA XREF: _canonicalize_file_name↑r
.got:000000000021CD80 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000021CD88 rewinddir_ptr   dq offset rewinddir     ; DATA XREF: _rewinddir↑r
.got:000000000021CD90 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:000000000021CD98 closedir_ptr    dq offset closedir      ; DATA XREF: _closedir↑r
.got:000000000021CDA0 posix_fadvise_ptr dq offset posix_fadvise
.got:000000000021CDA0                                         ; DATA XREF: _posix_fadvise↑r
.got:000000000021CDA8 read_ptr        dq offset read          ; DATA XREF: _read↑r
.got:000000000021CDB0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000021CDB8 fallocate_ptr   dq offset fallocate     ; DATA XREF: _fallocate↑r
.got:000000000021CDC0 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000021CDC0                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000021CDC8 utimes_ptr      dq offset utimes        ; DATA XREF: _utimes↑r
.got:000000000021CDD0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000021CDD8 __getdelim_ptr  dq offset __getdelim    ; DATA XREF: ___getdelim↑r
.got:000000000021CDE0 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000021CDE8 signal_ptr      dq offset signal        ; DATA XREF: _signal↑r
.got:000000000021CDF0 dirfd_ptr       dq offset dirfd         ; DATA XREF: _dirfd↑r
.got:000000000021CDF8 getpwnam_ptr    dq offset getpwnam      ; DATA XREF: _getpwnam↑r
.got:000000000021CE00 fpathconf_ptr   dq offset fpathconf     ; DATA XREF: _fpathconf↑r
.got:000000000021CE08 rpmatch_ptr     dq offset rpmatch       ; DATA XREF: _rpmatch↑r
.got:000000000021CE10 syscall_ptr     dq offset syscall       ; DATA XREF: _syscall↑r
.got:000000000021CE18 mkfifo_ptr      dq offset mkfifo        ; DATA XREF: _mkfifo↑r
.got:000000000021CE20 umask_ptr       dq offset umask         ; DATA XREF: _umask↑r
.got:000000000021CE28 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000021CE30 getgrnam_ptr    dq offset getgrnam      ; DATA XREF: _getgrnam↑r
.got:000000000021CE38 __xmknod_ptr    dq offset __xmknod      ; DATA XREF: ___xmknod↑r
.got:000000000021CE40 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000021CE48 getgid_ptr      dq offset getgid        ; DATA XREF: _getgid↑r
.got:000000000021CE50 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000021CE58 readdir_ptr     dq offset readdir       ; DATA XREF: _readdir↑r
.got:000000000021CE60 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000021CE68 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000021CE70 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000021CE78 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:000000000021CE80 endpwent_ptr    dq offset endpwent      ; DATA XREF: _endpwent↑r
.got:000000000021CE88 lchown_ptr      dq offset lchown        ; DATA XREF: _lchown↑r
.got:000000000021CE90 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000021CE98 fchdir_ptr      dq offset fchdir        ; DATA XREF: _fchdir↑r
.got:000000000021CEA0 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:000000000021CEA0                                         ; DATA XREF: _fwrite_unlocked↑r
.got:000000000021CEA8 chown_ptr       dq offset chown         ; DATA XREF: _chown↑r
.got:000000000021CEB0 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000021CEB8 stpncpy_ptr     dq offset stpncpy       ; DATA XREF: _stpncpy↑r
.got:000000000021CEC0 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:000000000021CEC8 linkat_ptr      dq offset linkat        ; DATA XREF: _linkat↑r
.got:000000000021CED0 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000021CED8 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000021CEE0 fchmod_ptr      dq offset fchmod        ; DATA XREF: _fchmod↑r
.got:000000000021CEE8 setvbuf_ptr     dq offset setvbuf       ; DATA XREF: _setvbuf↑r
.got:000000000021CEF0 chmod_ptr       dq offset chmod         ; DATA XREF: _chmod↑r
.got:000000000021CEF8 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:000000000021CF00 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000021CF08 waitpid_ptr     dq offset waitpid       ; DATA XREF: _waitpid↑r
.got:000000000021CF10 __explicit_bzero_chk_ptr dq offset __explicit_bzero_chk
.got:000000000021CF10                                         ; DATA XREF: ___explicit_bzero_chk↑r
.got:000000000021CF18 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:000000000021CF20 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000021CF28 fchown_ptr      dq offset fchown        ; DATA XREF: _fchown↑r
.got:000000000021CF30 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:000000000021CF38 rename_ptr      dq offset rename        ; DATA XREF: _rename↑r
.got:000000000021CF40 fdopendir_ptr   dq offset fdopendir     ; DATA XREF: _fdopendir↑r
.got:000000000021CF48 futimens_ptr    dq offset futimens      ; DATA XREF: _futimens↑r
.got:000000000021CF50 euidaccess_ptr  dq offset euidaccess    ; DATA XREF: _euidaccess↑r
.got:000000000021CF58 strtoul_ptr     dq offset strtoul       ; DATA XREF: _strtoul↑r
.got:000000000021CF60 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000021CF68 renameat_ptr    dq offset renameat      ; DATA XREF: _renameat↑r
.got:000000000021CF70 getpagesize_ptr dq offset getpagesize   ; DATA XREF: _getpagesize↑r
.got:000000000021CF78 getppid_ptr     dq offset getppid       ; DATA XREF: _getppid↑r
.got:000000000021CF80 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000021CF88 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000021CF90 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000021CF90                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000021CF98 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000021CFA0 symlinkat_ptr   dq offset symlinkat     ; DATA XREF: _symlinkat↑r
.got:000000000021CFA8 execlp_ptr      dq offset execlp        ; DATA XREF: _execlp↑r
.got:000000000021CFB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000021CFB8 fork_ptr        dq offset fork          ; DATA XREF: _fork↑r
.got:000000000021CFC0 futimesat_ptr   dq offset futimesat     ; DATA XREF: _futimesat↑r
.got:000000000021CFC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000021CFC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000021CFD0 free_ptr        dq offset __imp_free    ; DATA XREF: free↑r
.got:000000000021CFD0                                         ; utimecmpat:loc_10FD0↑r
.got:000000000021CFD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000021CFD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000021CFE0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000021CFE0                                         ; DATA XREF: start+24↑r
.got:000000000021CFE8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000021CFE8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000021CFF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000021CFF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000021CFF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000021CFF8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000021CFF8                                         ; __do_global_dtors_aux+9↑r
.got:000000000021CFF8 _got            ends
.got:000000000021CFF8
.data:000000000021D000 ; ===========================================================================
.data:000000000021D000
.data:000000000021D000 ; Segment type: Pure data
.data:000000000021D000 ; Segment permissions: Read/Write
.data:000000000021D000 _data           segment align_32 public 'DATA' use64
.data:000000000021D000                 assume cs:_data
.data:000000000021D000                 ;org 21D000h
.data:000000000021D000                 public __data_start ; weak
.data:000000000021D000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000021D000                                         ; data_start
.data:000000000021D001                 db    0
.data:000000000021D002                 db    0
.data:000000000021D003                 db    0
.data:000000000021D004                 db    0
.data:000000000021D005                 db    0
.data:000000000021D006                 db    0
.data:000000000021D007                 db    0
.data:000000000021D008                 public __dso_handle
.data:000000000021D008 ; void *_dso_handle
.data:000000000021D008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000021D008                                         ; atexit↑r ...
.data:000000000021D010 first_call_7488 db 1                    ; DATA XREF: install_file_in_file+1F8↑r
.data:000000000021D010                                         ; install_file_in_file:loc_446B↑w
.data:000000000021D011                 align 4
.data:000000000021D014 dir_mode_bits   dd 0FFFh                ; DATA XREF: main+56C↑o
.data:000000000021D014                                         ; process_dir+31↑r
.data:000000000021D018 dir_mode        dd 1EDh                 ; DATA XREF: main+58D↑w
.data:000000000021D018                                         ; process_dir+20↑r
.data:000000000021D01C ; __mode_t mode
.data:000000000021D01C mode            dd 1EDh                 ; DATA XREF: main+57F↑w
.data:000000000021D01C                                         ; main+5D9↑r ...
.data:000000000021D020 use_default_selinux_context db 1        ; DATA XREF: main+30E↑w
.data:000000000021D020                                         ; main+3F3↑w ...
.data:000000000021D021                 align 8
.data:000000000021D028 ; char *strip_program
.data:000000000021D028 strip_program   dq offset aWaitingForStri+0Ch
.data:000000000021D028                                         ; DATA XREF: main+292↑w
.data:000000000021D028                                         ; install_file_in_file:loc_484D↑r
.data:000000000021D028                                         ; "strip"
.data:000000000021D030 mask_7898       dd 0FFFFFFFFh           ; DATA XREF: cached_umask+1↑r
.data:000000000021D030                                         ; cached_umask+1B↑w
.data:000000000021D034                 align 8
.data:000000000021D038 ; size_t nz_7571
.data:000000000021D038 nz_7571         dq 20000h               ; DATA XREF: write_zeros:loc_4F05↑r
.data:000000000021D038                                         ; write_zeros+36↑r ...
.data:000000000021D040                 public Version
.data:000000000021D040 Version         dq offset a831          ; DATA XREF: main+343↑r
.data:000000000021D040                                         ; "8.31"
.data:000000000021D048                 public exit_failure
.data:000000000021D048 ; int exit_failure
.data:000000000021D048 exit_failure    dd 1                    ; DATA XREF: close_stdin+A8↑r
.data:000000000021D048                                         ; close_stdout:loc_B292↑r ...
.data:000000000021D04C                 align 20h
.data:000000000021D060                 public quote_quoting_options
.data:000000000021D060 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000021D060                                         ; quote_mem↑o ...
.data:000000000021D061                 db    0
.data:000000000021D062                 db    0
.data:000000000021D063                 db    0
.data:000000000021D064                 db    0
.data:000000000021D065                 db    0
.data:000000000021D066                 db    0
.data:000000000021D067                 db    0
.data:000000000021D068                 db    0
.data:000000000021D069                 db    0
.data:000000000021D06A                 db    0
.data:000000000021D06B                 db    0
.data:000000000021D06C                 db    0
.data:000000000021D06D                 db    0
.data:000000000021D06E                 db    0
.data:000000000021D06F                 db    0
.data:000000000021D070                 db    0
.data:000000000021D071                 db    0
.data:000000000021D072                 db    0
.data:000000000021D073                 db    0
.data:000000000021D074                 db    0
.data:000000000021D075                 db    0
.data:000000000021D076                 db    0
.data:000000000021D077                 db    0
.data:000000000021D078                 db    0
.data:000000000021D079                 db    0
.data:000000000021D07A                 db    0
.data:000000000021D07B                 db    0
.data:000000000021D07C                 db    0
.data:000000000021D07D                 db    0
.data:000000000021D07E                 db    0
.data:000000000021D07F                 db    0
.data:000000000021D080                 db    0
.data:000000000021D081                 db    0
.data:000000000021D082                 db    0
.data:000000000021D083                 db    0
.data:000000000021D084                 db    0
.data:000000000021D085                 db    0
.data:000000000021D086                 db    0
.data:000000000021D087                 db    0
.data:000000000021D088                 db    0
.data:000000000021D089                 db    0
.data:000000000021D08A                 db    0
.data:000000000021D08B                 db    0
.data:000000000021D08C                 db    0
.data:000000000021D08D                 db    0
.data:000000000021D08E                 db    0
.data:000000000021D08F                 db    0
.data:000000000021D090                 db    0
.data:000000000021D091                 db    0
.data:000000000021D092                 db    0
.data:000000000021D093                 db    0
.data:000000000021D094                 db    0
.data:000000000021D095                 db    0
.data:000000000021D096                 db    0
.data:000000000021D097                 db    0
.data:000000000021D098 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000021D098                                         ; quotearg_n_options:loc_EDFD↑r ...
.data:000000000021D09C                 align 20h
.data:000000000021D0A0 ; void *slotvec
.data:000000000021D0A0 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000021D0A0                                         ; quotearg_n_options+76↑w ...
.data:000000000021D0A8                 align 10h
.data:000000000021D0B0 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000021D0B0                                         ; quotearg_n_options+187↑r ...
.data:000000000021D0B8 off_21D0B8      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000021D0C0                 public argmatch_die
.data:000000000021D0C0 argmatch_die    dq offset __argmatch_die
.data:000000000021D0C0                                         ; DATA XREF: get_version_part_0+4↑r
.data:000000000021D0C0 _data           ends
.data:000000000021D0C0
LOAD:000000000021D0C8 ; ===========================================================================
LOAD:000000000021D0C8
LOAD:000000000021D0C8 ; Segment type: Pure data
LOAD:000000000021D0C8 ; Segment permissions: Read/Write
LOAD:000000000021D0C8 LOAD            segment byte public 'DATA' use64
LOAD:000000000021D0C8                 assume cs:LOAD
LOAD:000000000021D0C8                 ;org 21D0C8h
LOAD:000000000021D0C8                 public __bss_start
LOAD:000000000021D0C8 __bss_start     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
LOAD:000000000021D0C8                                         ; deregister_tm_clones+8↑o ...
LOAD:000000000021D0C8                                         ; Alternative name is '_edata'
LOAD:000000000021D0C8                                         ; __TMC_END__
LOAD:000000000021D0C8                                         ; _edata
LOAD:000000000021D0C9                 db    ? ;
LOAD:000000000021D0CA                 db    ? ;
LOAD:000000000021D0CB                 db    ? ;
LOAD:000000000021D0CC                 db    ? ;
LOAD:000000000021D0CD                 db    ? ;
LOAD:000000000021D0CE                 db    ? ;
LOAD:000000000021D0CF                 db    ? ;
LOAD:000000000021D0D0                 db    ? ;
LOAD:000000000021D0D1                 db    ? ;
LOAD:000000000021D0D2                 db    ? ;
LOAD:000000000021D0D3                 db    ? ;
LOAD:000000000021D0D4                 db    ? ;
LOAD:000000000021D0D5                 db    ? ;
LOAD:000000000021D0D6                 db    ? ;
LOAD:000000000021D0D7                 db    ? ;
LOAD:000000000021D0D8                 db    ? ;
LOAD:000000000021D0D9                 db    ? ;
LOAD:000000000021D0DA                 db    ? ;
LOAD:000000000021D0DB                 db    ? ;
LOAD:000000000021D0DC                 db    ? ;
LOAD:000000000021D0DD                 db    ? ;
LOAD:000000000021D0DE                 db    ? ;
LOAD:000000000021D0DF                 db    ? ;
LOAD:000000000021D0DF LOAD            ends
LOAD:000000000021D0DF
.bss:000000000021D0E0 ; ===========================================================================
.bss:000000000021D0E0
.bss:000000000021D0E0 ; Segment type: Uninitialized
.bss:000000000021D0E0 ; Segment permissions: Read/Write
.bss:000000000021D0E0 _bss            segment align_32 public 'BSS' use64
.bss:000000000021D0E0                 assume cs:_bss
.bss:000000000021D0E0                 ;org 21D0E0h
.bss:000000000021D0E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000021D0E0                 public program_invocation_short_name@@GLIBC_2_2_5 ; weak
.bss:000000000021D0E0 program_invocation_short_name@@GLIBC_2_2_5 dq ?
.bss:000000000021D0E0                                         ; DATA XREF: LOAD:0000000000000F70↑o
.bss:000000000021D0E0                                         ; LOAD:0000000000000FD0↑o ...
.bss:000000000021D0E0                                         ; Alternative name is '__progname'
.bss:000000000021D0E0                                         ; Copy of shared data
.bss:000000000021D0E8                 public stdout@@GLIBC_2_2_5
.bss:000000000021D0E8 ; FILE *stdout
.bss:000000000021D0E8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000F58↑o
.bss:000000000021D0E8                                         ; main+33C↑r ...
.bss:000000000021D0E8                                         ; Alternative name is 'stdout'
.bss:000000000021D0E8                                         ; Copy of shared data
.bss:000000000021D0F0                 public stdin@@GLIBC_2_2_5
.bss:000000000021D0F0 ; FILE *stdin
.bss:000000000021D0F0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000F88↑o
.bss:000000000021D0F0                                         ; close_stdin+4↑r ...
.bss:000000000021D0F0                                         ; Alternative name is 'stdin'
.bss:000000000021D0F0                                         ; Copy of shared data
.bss:000000000021D0F8                 public optind@@GLIBC_2_2_5
.bss:000000000021D0F8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000001000↑o
.bss:000000000021D0F8                                         ; main:loc_3620↑r
.bss:000000000021D0F8                                         ; Alternative name is 'optind'
.bss:000000000021D0F8                                         ; Copy of shared data
.bss:000000000021D0FC                 align 20h
.bss:000000000021D100                 public optarg@@GLIBC_2_2_5
.bss:000000000021D100 ; void *optarg
.bss:000000000021D100 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000001018↑o
.bss:000000000021D100                                         ; main+281↑r ...
.bss:000000000021D100                                         ; Alternative name is 'optarg'
.bss:000000000021D100                                         ; Copy of shared data
.bss:000000000021D108                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000021D108 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000021D108                                         ; DATA XREF: LOAD:0000000000000FA0↑o
.bss:000000000021D108                                         ; LOAD:0000000000000FB8↑o ...
.bss:000000000021D108                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000021D108                                         ; Copy of shared data
.bss:000000000021D110                 align 20h
.bss:000000000021D120                 public stderr@@GLIBC_2_2_5
.bss:000000000021D120 ; FILE *stderr
.bss:000000000021D120 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000FE8↑o
.bss:000000000021D120                                         ; usage+3D↑r ...
.bss:000000000021D120                                         ; Alternative name is 'stderr'
.bss:000000000021D120                                         ; Copy of shared data
.bss:000000000021D128 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000021D128                                         ; __do_global_dtors_aux+28↑w
.bss:000000000021D129                 align 20h
.bss:000000000021D140 a_buff_7455     db    ? ;               ; DATA XREF: install_file_in_file+347↑o
.bss:000000000021D141                 db    ? ;
.bss:000000000021D142                 db    ? ;
.bss:000000000021D143                 db    ? ;
.bss:000000000021D144                 db    ? ;
.bss:000000000021D145                 db    ? ;
.bss:000000000021D146                 db    ? ;
.bss:000000000021D147                 db    ? ;
.bss:000000000021D148                 db    ? ;
.bss:000000000021D149                 db    ? ;
.bss:000000000021D14A                 db    ? ;
.bss:000000000021D14B                 db    ? ;
.bss:000000000021D14C                 db    ? ;
.bss:000000000021D14D                 db    ? ;
.bss:000000000021D14E                 db    ? ;
.bss:000000000021D14F                 db    ? ;
.bss:000000000021D150                 db    ? ;
.bss:000000000021D151                 db    ? ;
.bss:000000000021D152                 db    ? ;
.bss:000000000021D153                 db    ? ;
.bss:000000000021D154                 db    ? ;
.bss:000000000021D155                 db    ? ;
.bss:000000000021D156                 db    ? ;
.bss:000000000021D157                 db    ? ;
.bss:000000000021D158                 db    ? ;
.bss:000000000021D159                 db    ? ;
.bss:000000000021D15A                 db    ? ;
.bss:000000000021D15B                 db    ? ;
.bss:000000000021D15C                 db    ? ;
.bss:000000000021D15D                 db    ? ;
.bss:000000000021D15E                 db    ? ;
.bss:000000000021D15F                 db    ? ;
.bss:000000000021D160                 db    ? ;
.bss:000000000021D161                 db    ? ;
.bss:000000000021D162                 db    ? ;
.bss:000000000021D163                 db    ? ;
.bss:000000000021D164                 db    ? ;
.bss:000000000021D165                 db    ? ;
.bss:000000000021D166                 db    ? ;
.bss:000000000021D167                 db    ? ;
.bss:000000000021D168                 db    ? ;
.bss:000000000021D169                 db    ? ;
.bss:000000000021D16A                 db    ? ;
.bss:000000000021D16B                 db    ? ;
.bss:000000000021D16C                 db    ? ;
.bss:000000000021D16D                 db    ? ;
.bss:000000000021D16E                 db    ? ;
.bss:000000000021D16F                 db    ? ;
.bss:000000000021D170                 db    ? ;
.bss:000000000021D171                 db    ? ;
.bss:000000000021D172                 db    ? ;
.bss:000000000021D173                 db    ? ;
.bss:000000000021D174                 db    ? ;
.bss:000000000021D175                 db    ? ;
.bss:000000000021D176                 db    ? ;
.bss:000000000021D177                 db    ? ;
.bss:000000000021D178                 db    ? ;
.bss:000000000021D179                 db    ? ;
.bss:000000000021D17A                 db    ? ;
.bss:000000000021D17B                 db    ? ;
.bss:000000000021D17C                 db    ? ;
.bss:000000000021D17D                 db    ? ;
.bss:000000000021D17E                 db    ? ;
.bss:000000000021D17F                 db    ? ;
.bss:000000000021D180                 db    ? ;
.bss:000000000021D181                 db    ? ;
.bss:000000000021D182                 db    ? ;
.bss:000000000021D183                 db    ? ;
.bss:000000000021D184                 db    ? ;
.bss:000000000021D185                 db    ? ;
.bss:000000000021D186                 db    ? ;
.bss:000000000021D187                 db    ? ;
.bss:000000000021D188                 db    ? ;
.bss:000000000021D189                 db    ? ;
.bss:000000000021D18A                 db    ? ;
.bss:000000000021D18B                 db    ? ;
.bss:000000000021D18C                 db    ? ;
.bss:000000000021D18D                 db    ? ;
.bss:000000000021D18E                 db    ? ;
.bss:000000000021D18F                 db    ? ;
.bss:000000000021D190                 db    ? ;
.bss:000000000021D191                 db    ? ;
.bss:000000000021D192                 db    ? ;
.bss:000000000021D193                 db    ? ;
.bss:000000000021D194                 db    ? ;
.bss:000000000021D195                 db    ? ;
.bss:000000000021D196                 db    ? ;
.bss:000000000021D197                 db    ? ;
.bss:000000000021D198                 db    ? ;
.bss:000000000021D199                 db    ? ;
.bss:000000000021D19A                 db    ? ;
.bss:000000000021D19B                 db    ? ;
.bss:000000000021D19C                 db    ? ;
.bss:000000000021D19D                 db    ? ;
.bss:000000000021D19E                 db    ? ;
.bss:000000000021D19F                 db    ? ;
.bss:000000000021D1A0                 db    ? ;
.bss:000000000021D1A1                 db    ? ;
.bss:000000000021D1A2                 db    ? ;
.bss:000000000021D1A3                 db    ? ;
.bss:000000000021D1A4                 db    ? ;
.bss:000000000021D1A5                 db    ? ;
.bss:000000000021D1A6                 db    ? ;
.bss:000000000021D1A7                 db    ? ;
.bss:000000000021D1A8                 db    ? ;
.bss:000000000021D1A9                 db    ? ;
.bss:000000000021D1AA                 db    ? ;
.bss:000000000021D1AB                 db    ? ;
.bss:000000000021D1AC                 db    ? ;
.bss:000000000021D1AD                 db    ? ;
.bss:000000000021D1AE                 db    ? ;
.bss:000000000021D1AF                 db    ? ;
.bss:000000000021D1B0                 db    ? ;
.bss:000000000021D1B1                 db    ? ;
.bss:000000000021D1B2                 db    ? ;
.bss:000000000021D1B3                 db    ? ;
.bss:000000000021D1B4                 db    ? ;
.bss:000000000021D1B5                 db    ? ;
.bss:000000000021D1B6                 db    ? ;
.bss:000000000021D1B7                 db    ? ;
.bss:000000000021D1B8                 db    ? ;
.bss:000000000021D1B9                 db    ? ;
.bss:000000000021D1BA                 db    ? ;
.bss:000000000021D1BB                 db    ? ;
.bss:000000000021D1BC                 db    ? ;
.bss:000000000021D1BD                 db    ? ;
.bss:000000000021D1BE                 db    ? ;
.bss:000000000021D1BF                 db    ? ;
.bss:000000000021D1C0                 db    ? ;
.bss:000000000021D1C1                 db    ? ;
.bss:000000000021D1C2                 db    ? ;
.bss:000000000021D1C3                 db    ? ;
.bss:000000000021D1C4                 db    ? ;
.bss:000000000021D1C5                 db    ? ;
.bss:000000000021D1C6                 db    ? ;
.bss:000000000021D1C7                 db    ? ;
.bss:000000000021D1C8                 db    ? ;
.bss:000000000021D1C9                 db    ? ;
.bss:000000000021D1CA                 db    ? ;
.bss:000000000021D1CB                 db    ? ;
.bss:000000000021D1CC                 db    ? ;
.bss:000000000021D1CD                 db    ? ;
.bss:000000000021D1CE                 db    ? ;
.bss:000000000021D1CF                 db    ? ;
.bss:000000000021D1D0                 db    ? ;
.bss:000000000021D1D1                 db    ? ;
.bss:000000000021D1D2                 db    ? ;
.bss:000000000021D1D3                 db    ? ;
.bss:000000000021D1D4                 db    ? ;
.bss:000000000021D1D5                 db    ? ;
.bss:000000000021D1D6                 db    ? ;
.bss:000000000021D1D7                 db    ? ;
.bss:000000000021D1D8                 db    ? ;
.bss:000000000021D1D9                 db    ? ;
.bss:000000000021D1DA                 db    ? ;
.bss:000000000021D1DB                 db    ? ;
.bss:000000000021D1DC                 db    ? ;
.bss:000000000021D1DD                 db    ? ;
.bss:000000000021D1DE                 db    ? ;
.bss:000000000021D1DF                 db    ? ;
.bss:000000000021D1E0                 db    ? ;
.bss:000000000021D1E1                 db    ? ;
.bss:000000000021D1E2                 db    ? ;
.bss:000000000021D1E3                 db    ? ;
.bss:000000000021D1E4                 db    ? ;
.bss:000000000021D1E5                 db    ? ;
.bss:000000000021D1E6                 db    ? ;
.bss:000000000021D1E7                 db    ? ;
.bss:000000000021D1E8                 db    ? ;
.bss:000000000021D1E9                 db    ? ;
.bss:000000000021D1EA                 db    ? ;
.bss:000000000021D1EB                 db    ? ;
.bss:000000000021D1EC                 db    ? ;
.bss:000000000021D1ED                 db    ? ;
.bss:000000000021D1EE                 db    ? ;
.bss:000000000021D1EF                 db    ? ;
.bss:000000000021D1F0                 db    ? ;
.bss:000000000021D1F1                 db    ? ;
.bss:000000000021D1F2                 db    ? ;
.bss:000000000021D1F3                 db    ? ;
.bss:000000000021D1F4                 db    ? ;
.bss:000000000021D1F5                 db    ? ;
.bss:000000000021D1F6                 db    ? ;
.bss:000000000021D1F7                 db    ? ;
.bss:000000000021D1F8                 db    ? ;
.bss:000000000021D1F9                 db    ? ;
.bss:000000000021D1FA                 db    ? ;
.bss:000000000021D1FB                 db    ? ;
.bss:000000000021D1FC                 db    ? ;
.bss:000000000021D1FD                 db    ? ;
.bss:000000000021D1FE                 db    ? ;
.bss:000000000021D1FF                 db    ? ;
.bss:000000000021D200                 db    ? ;
.bss:000000000021D201                 db    ? ;
.bss:000000000021D202                 db    ? ;
.bss:000000000021D203                 db    ? ;
.bss:000000000021D204                 db    ? ;
.bss:000000000021D205                 db    ? ;
.bss:000000000021D206                 db    ? ;
.bss:000000000021D207                 db    ? ;
.bss:000000000021D208                 db    ? ;
.bss:000000000021D209                 db    ? ;
.bss:000000000021D20A                 db    ? ;
.bss:000000000021D20B                 db    ? ;
.bss:000000000021D20C                 db    ? ;
.bss:000000000021D20D                 db    ? ;
.bss:000000000021D20E                 db    ? ;
.bss:000000000021D20F                 db    ? ;
.bss:000000000021D210                 db    ? ;
.bss:000000000021D211                 db    ? ;
.bss:000000000021D212                 db    ? ;
.bss:000000000021D213                 db    ? ;
.bss:000000000021D214                 db    ? ;
.bss:000000000021D215                 db    ? ;
.bss:000000000021D216                 db    ? ;
.bss:000000000021D217                 db    ? ;
.bss:000000000021D218                 db    ? ;
.bss:000000000021D219                 db    ? ;
.bss:000000000021D21A                 db    ? ;
.bss:000000000021D21B                 db    ? ;
.bss:000000000021D21C                 db    ? ;
.bss:000000000021D21D                 db    ? ;
.bss:000000000021D21E                 db    ? ;
.bss:000000000021D21F                 db    ? ;
.bss:000000000021D220                 db    ? ;
.bss:000000000021D221                 db    ? ;
.bss:000000000021D222                 db    ? ;
.bss:000000000021D223                 db    ? ;
.bss:000000000021D224                 db    ? ;
.bss:000000000021D225                 db    ? ;
.bss:000000000021D226                 db    ? ;
.bss:000000000021D227                 db    ? ;
.bss:000000000021D228                 db    ? ;
.bss:000000000021D229                 db    ? ;
.bss:000000000021D22A                 db    ? ;
.bss:000000000021D22B                 db    ? ;
.bss:000000000021D22C                 db    ? ;
.bss:000000000021D22D                 db    ? ;
.bss:000000000021D22E                 db    ? ;
.bss:000000000021D22F                 db    ? ;
.bss:000000000021D230                 db    ? ;
.bss:000000000021D231                 db    ? ;
.bss:000000000021D232                 db    ? ;
.bss:000000000021D233                 db    ? ;
.bss:000000000021D234                 db    ? ;
.bss:000000000021D235                 db    ? ;
.bss:000000000021D236                 db    ? ;
.bss:000000000021D237                 db    ? ;
.bss:000000000021D238                 db    ? ;
.bss:000000000021D239                 db    ? ;
.bss:000000000021D23A                 db    ? ;
.bss:000000000021D23B                 db    ? ;
.bss:000000000021D23C                 db    ? ;
.bss:000000000021D23D                 db    ? ;
.bss:000000000021D23E                 db    ? ;
.bss:000000000021D23F                 db    ? ;
.bss:000000000021D240                 db    ? ;
.bss:000000000021D241                 db    ? ;
.bss:000000000021D242                 db    ? ;
.bss:000000000021D243                 db    ? ;
.bss:000000000021D244                 db    ? ;
.bss:000000000021D245                 db    ? ;
.bss:000000000021D246                 db    ? ;
.bss:000000000021D247                 db    ? ;
.bss:000000000021D248                 db    ? ;
.bss:000000000021D249                 db    ? ;
.bss:000000000021D24A                 db    ? ;
.bss:000000000021D24B                 db    ? ;
.bss:000000000021D24C                 db    ? ;
.bss:000000000021D24D                 db    ? ;
.bss:000000000021D24E                 db    ? ;
.bss:000000000021D24F                 db    ? ;
.bss:000000000021D250                 db    ? ;
.bss:000000000021D251                 db    ? ;
.bss:000000000021D252                 db    ? ;
.bss:000000000021D253                 db    ? ;
.bss:000000000021D254                 db    ? ;
.bss:000000000021D255                 db    ? ;
.bss:000000000021D256                 db    ? ;
.bss:000000000021D257                 db    ? ;
.bss:000000000021D258                 db    ? ;
.bss:000000000021D259                 db    ? ;
.bss:000000000021D25A                 db    ? ;
.bss:000000000021D25B                 db    ? ;
.bss:000000000021D25C                 db    ? ;
.bss:000000000021D25D                 db    ? ;
.bss:000000000021D25E                 db    ? ;
.bss:000000000021D25F                 db    ? ;
.bss:000000000021D260                 db    ? ;
.bss:000000000021D261                 db    ? ;
.bss:000000000021D262                 db    ? ;
.bss:000000000021D263                 db    ? ;
.bss:000000000021D264                 db    ? ;
.bss:000000000021D265                 db    ? ;
.bss:000000000021D266                 db    ? ;
.bss:000000000021D267                 db    ? ;
.bss:000000000021D268                 db    ? ;
.bss:000000000021D269                 db    ? ;
.bss:000000000021D26A                 db    ? ;
.bss:000000000021D26B                 db    ? ;
.bss:000000000021D26C                 db    ? ;
.bss:000000000021D26D                 db    ? ;
.bss:000000000021D26E                 db    ? ;
.bss:000000000021D26F                 db    ? ;
.bss:000000000021D270                 db    ? ;
.bss:000000000021D271                 db    ? ;
.bss:000000000021D272                 db    ? ;
.bss:000000000021D273                 db    ? ;
.bss:000000000021D274                 db    ? ;
.bss:000000000021D275                 db    ? ;
.bss:000000000021D276                 db    ? ;
.bss:000000000021D277                 db    ? ;
.bss:000000000021D278                 db    ? ;
.bss:000000000021D279                 db    ? ;
.bss:000000000021D27A                 db    ? ;
.bss:000000000021D27B                 db    ? ;
.bss:000000000021D27C                 db    ? ;
.bss:000000000021D27D                 db    ? ;
.bss:000000000021D27E                 db    ? ;
.bss:000000000021D27F                 db    ? ;
.bss:000000000021D280                 db    ? ;
.bss:000000000021D281                 db    ? ;
.bss:000000000021D282                 db    ? ;
.bss:000000000021D283                 db    ? ;
.bss:000000000021D284                 db    ? ;
.bss:000000000021D285                 db    ? ;
.bss:000000000021D286                 db    ? ;
.bss:000000000021D287                 db    ? ;
.bss:000000000021D288                 db    ? ;
.bss:000000000021D289                 db    ? ;
.bss:000000000021D28A                 db    ? ;
.bss:000000000021D28B                 db    ? ;
.bss:000000000021D28C                 db    ? ;
.bss:000000000021D28D                 db    ? ;
.bss:000000000021D28E                 db    ? ;
.bss:000000000021D28F                 db    ? ;
.bss:000000000021D290                 db    ? ;
.bss:000000000021D291                 db    ? ;
.bss:000000000021D292                 db    ? ;
.bss:000000000021D293                 db    ? ;
.bss:000000000021D294                 db    ? ;
.bss:000000000021D295                 db    ? ;
.bss:000000000021D296                 db    ? ;
.bss:000000000021D297                 db    ? ;
.bss:000000000021D298                 db    ? ;
.bss:000000000021D299                 db    ? ;
.bss:000000000021D29A                 db    ? ;
.bss:000000000021D29B                 db    ? ;
.bss:000000000021D29C                 db    ? ;
.bss:000000000021D29D                 db    ? ;
.bss:000000000021D29E                 db    ? ;
.bss:000000000021D29F                 db    ? ;
.bss:000000000021D2A0                 db    ? ;
.bss:000000000021D2A1                 db    ? ;
.bss:000000000021D2A2                 db    ? ;
.bss:000000000021D2A3                 db    ? ;
.bss:000000000021D2A4                 db    ? ;
.bss:000000000021D2A5                 db    ? ;
.bss:000000000021D2A6                 db    ? ;
.bss:000000000021D2A7                 db    ? ;
.bss:000000000021D2A8                 db    ? ;
.bss:000000000021D2A9                 db    ? ;
.bss:000000000021D2AA                 db    ? ;
.bss:000000000021D2AB                 db    ? ;
.bss:000000000021D2AC                 db    ? ;
.bss:000000000021D2AD                 db    ? ;
.bss:000000000021D2AE                 db    ? ;
.bss:000000000021D2AF                 db    ? ;
.bss:000000000021D2B0                 db    ? ;
.bss:000000000021D2B1                 db    ? ;
.bss:000000000021D2B2                 db    ? ;
.bss:000000000021D2B3                 db    ? ;
.bss:000000000021D2B4                 db    ? ;
.bss:000000000021D2B5                 db    ? ;
.bss:000000000021D2B6                 db    ? ;
.bss:000000000021D2B7                 db    ? ;
.bss:000000000021D2B8                 db    ? ;
.bss:000000000021D2B9                 db    ? ;
.bss:000000000021D2BA                 db    ? ;
.bss:000000000021D2BB                 db    ? ;
.bss:000000000021D2BC                 db    ? ;
.bss:000000000021D2BD                 db    ? ;
.bss:000000000021D2BE                 db    ? ;
.bss:000000000021D2BF                 db    ? ;
.bss:000000000021D2C0                 db    ? ;
.bss:000000000021D2C1                 db    ? ;
.bss:000000000021D2C2                 db    ? ;
.bss:000000000021D2C3                 db    ? ;
.bss:000000000021D2C4                 db    ? ;
.bss:000000000021D2C5                 db    ? ;
.bss:000000000021D2C6                 db    ? ;
.bss:000000000021D2C7                 db    ? ;
.bss:000000000021D2C8                 db    ? ;
.bss:000000000021D2C9                 db    ? ;
.bss:000000000021D2CA                 db    ? ;
.bss:000000000021D2CB                 db    ? ;
.bss:000000000021D2CC                 db    ? ;
.bss:000000000021D2CD                 db    ? ;
.bss:000000000021D2CE                 db    ? ;
.bss:000000000021D2CF                 db    ? ;
.bss:000000000021D2D0                 db    ? ;
.bss:000000000021D2D1                 db    ? ;
.bss:000000000021D2D2                 db    ? ;
.bss:000000000021D2D3                 db    ? ;
.bss:000000000021D2D4                 db    ? ;
.bss:000000000021D2D5                 db    ? ;
.bss:000000000021D2D6                 db    ? ;
.bss:000000000021D2D7                 db    ? ;
.bss:000000000021D2D8                 db    ? ;
.bss:000000000021D2D9                 db    ? ;
.bss:000000000021D2DA                 db    ? ;
.bss:000000000021D2DB                 db    ? ;
.bss:000000000021D2DC                 db    ? ;
.bss:000000000021D2DD                 db    ? ;
.bss:000000000021D2DE                 db    ? ;
.bss:000000000021D2DF                 db    ? ;
.bss:000000000021D2E0                 db    ? ;
.bss:000000000021D2E1                 db    ? ;
.bss:000000000021D2E2                 db    ? ;
.bss:000000000021D2E3                 db    ? ;
.bss:000000000021D2E4                 db    ? ;
.bss:000000000021D2E5                 db    ? ;
.bss:000000000021D2E6                 db    ? ;
.bss:000000000021D2E7                 db    ? ;
.bss:000000000021D2E8                 db    ? ;
.bss:000000000021D2E9                 db    ? ;
.bss:000000000021D2EA                 db    ? ;
.bss:000000000021D2EB                 db    ? ;
.bss:000000000021D2EC                 db    ? ;
.bss:000000000021D2ED                 db    ? ;
.bss:000000000021D2EE                 db    ? ;
.bss:000000000021D2EF                 db    ? ;
.bss:000000000021D2F0                 db    ? ;
.bss:000000000021D2F1                 db    ? ;
.bss:000000000021D2F2                 db    ? ;
.bss:000000000021D2F3                 db    ? ;
.bss:000000000021D2F4                 db    ? ;
.bss:000000000021D2F5                 db    ? ;
.bss:000000000021D2F6                 db    ? ;
.bss:000000000021D2F7                 db    ? ;
.bss:000000000021D2F8                 db    ? ;
.bss:000000000021D2F9                 db    ? ;
.bss:000000000021D2FA                 db    ? ;
.bss:000000000021D2FB                 db    ? ;
.bss:000000000021D2FC                 db    ? ;
.bss:000000000021D2FD                 db    ? ;
.bss:000000000021D2FE                 db    ? ;
.bss:000000000021D2FF                 db    ? ;
.bss:000000000021D300                 db    ? ;
.bss:000000000021D301                 db    ? ;
.bss:000000000021D302                 db    ? ;
.bss:000000000021D303                 db    ? ;
.bss:000000000021D304                 db    ? ;
.bss:000000000021D305                 db    ? ;
.bss:000000000021D306                 db    ? ;
.bss:000000000021D307                 db    ? ;
.bss:000000000021D308                 db    ? ;
.bss:000000000021D309                 db    ? ;
.bss:000000000021D30A                 db    ? ;
.bss:000000000021D30B                 db    ? ;
.bss:000000000021D30C                 db    ? ;
.bss:000000000021D30D                 db    ? ;
.bss:000000000021D30E                 db    ? ;
.bss:000000000021D30F                 db    ? ;
.bss:000000000021D310                 db    ? ;
.bss:000000000021D311                 db    ? ;
.bss:000000000021D312                 db    ? ;
.bss:000000000021D313                 db    ? ;
.bss:000000000021D314                 db    ? ;
.bss:000000000021D315                 db    ? ;
.bss:000000000021D316                 db    ? ;
.bss:000000000021D317                 db    ? ;
.bss:000000000021D318                 db    ? ;
.bss:000000000021D319                 db    ? ;
.bss:000000000021D31A                 db    ? ;
.bss:000000000021D31B                 db    ? ;
.bss:000000000021D31C                 db    ? ;
.bss:000000000021D31D                 db    ? ;
.bss:000000000021D31E                 db    ? ;
.bss:000000000021D31F                 db    ? ;
.bss:000000000021D320                 db    ? ;
.bss:000000000021D321                 db    ? ;
.bss:000000000021D322                 db    ? ;
.bss:000000000021D323                 db    ? ;
.bss:000000000021D324                 db    ? ;
.bss:000000000021D325                 db    ? ;
.bss:000000000021D326                 db    ? ;
.bss:000000000021D327                 db    ? ;
.bss:000000000021D328                 db    ? ;
.bss:000000000021D329                 db    ? ;
.bss:000000000021D32A                 db    ? ;
.bss:000000000021D32B                 db    ? ;
.bss:000000000021D32C                 db    ? ;
.bss:000000000021D32D                 db    ? ;
.bss:000000000021D32E                 db    ? ;
.bss:000000000021D32F                 db    ? ;
.bss:000000000021D330                 db    ? ;
.bss:000000000021D331                 db    ? ;
.bss:000000000021D332                 db    ? ;
.bss:000000000021D333                 db    ? ;
.bss:000000000021D334                 db    ? ;
.bss:000000000021D335                 db    ? ;
.bss:000000000021D336                 db    ? ;
.bss:000000000021D337                 db    ? ;
.bss:000000000021D338                 db    ? ;
.bss:000000000021D339                 db    ? ;
.bss:000000000021D33A                 db    ? ;
.bss:000000000021D33B                 db    ? ;
.bss:000000000021D33C                 db    ? ;
.bss:000000000021D33D                 db    ? ;
.bss:000000000021D33E                 db    ? ;
.bss:000000000021D33F                 db    ? ;
.bss:000000000021D340                 db    ? ;
.bss:000000000021D341                 db    ? ;
.bss:000000000021D342                 db    ? ;
.bss:000000000021D343                 db    ? ;
.bss:000000000021D344                 db    ? ;
.bss:000000000021D345                 db    ? ;
.bss:000000000021D346                 db    ? ;
.bss:000000000021D347                 db    ? ;
.bss:000000000021D348                 db    ? ;
.bss:000000000021D349                 db    ? ;
.bss:000000000021D34A                 db    ? ;
.bss:000000000021D34B                 db    ? ;
.bss:000000000021D34C                 db    ? ;
.bss:000000000021D34D                 db    ? ;
.bss:000000000021D34E                 db    ? ;
.bss:000000000021D34F                 db    ? ;
.bss:000000000021D350                 db    ? ;
.bss:000000000021D351                 db    ? ;
.bss:000000000021D352                 db    ? ;
.bss:000000000021D353                 db    ? ;
.bss:000000000021D354                 db    ? ;
.bss:000000000021D355                 db    ? ;
.bss:000000000021D356                 db    ? ;
.bss:000000000021D357                 db    ? ;
.bss:000000000021D358                 db    ? ;
.bss:000000000021D359                 db    ? ;
.bss:000000000021D35A                 db    ? ;
.bss:000000000021D35B                 db    ? ;
.bss:000000000021D35C                 db    ? ;
.bss:000000000021D35D                 db    ? ;
.bss:000000000021D35E                 db    ? ;
.bss:000000000021D35F                 db    ? ;
.bss:000000000021D360                 db    ? ;
.bss:000000000021D361                 db    ? ;
.bss:000000000021D362                 db    ? ;
.bss:000000000021D363                 db    ? ;
.bss:000000000021D364                 db    ? ;
.bss:000000000021D365                 db    ? ;
.bss:000000000021D366                 db    ? ;
.bss:000000000021D367                 db    ? ;
.bss:000000000021D368                 db    ? ;
.bss:000000000021D369                 db    ? ;
.bss:000000000021D36A                 db    ? ;
.bss:000000000021D36B                 db    ? ;
.bss:000000000021D36C                 db    ? ;
.bss:000000000021D36D                 db    ? ;
.bss:000000000021D36E                 db    ? ;
.bss:000000000021D36F                 db    ? ;
.bss:000000000021D370                 db    ? ;
.bss:000000000021D371                 db    ? ;
.bss:000000000021D372                 db    ? ;
.bss:000000000021D373                 db    ? ;
.bss:000000000021D374                 db    ? ;
.bss:000000000021D375                 db    ? ;
.bss:000000000021D376                 db    ? ;
.bss:000000000021D377                 db    ? ;
.bss:000000000021D378                 db    ? ;
.bss:000000000021D379                 db    ? ;
.bss:000000000021D37A                 db    ? ;
.bss:000000000021D37B                 db    ? ;
.bss:000000000021D37C                 db    ? ;
.bss:000000000021D37D                 db    ? ;
.bss:000000000021D37E                 db    ? ;
.bss:000000000021D37F                 db    ? ;
.bss:000000000021D380                 db    ? ;
.bss:000000000021D381                 db    ? ;
.bss:000000000021D382                 db    ? ;
.bss:000000000021D383                 db    ? ;
.bss:000000000021D384                 db    ? ;
.bss:000000000021D385                 db    ? ;
.bss:000000000021D386                 db    ? ;
.bss:000000000021D387                 db    ? ;
.bss:000000000021D388                 db    ? ;
.bss:000000000021D389                 db    ? ;
.bss:000000000021D38A                 db    ? ;
.bss:000000000021D38B                 db    ? ;
.bss:000000000021D38C                 db    ? ;
.bss:000000000021D38D                 db    ? ;
.bss:000000000021D38E                 db    ? ;
.bss:000000000021D38F                 db    ? ;
.bss:000000000021D390                 db    ? ;
.bss:000000000021D391                 db    ? ;
.bss:000000000021D392                 db    ? ;
.bss:000000000021D393                 db    ? ;
.bss:000000000021D394                 db    ? ;
.bss:000000000021D395                 db    ? ;
.bss:000000000021D396                 db    ? ;
.bss:000000000021D397                 db    ? ;
.bss:000000000021D398                 db    ? ;
.bss:000000000021D399                 db    ? ;
.bss:000000000021D39A                 db    ? ;
.bss:000000000021D39B                 db    ? ;
.bss:000000000021D39C                 db    ? ;
.bss:000000000021D39D                 db    ? ;
.bss:000000000021D39E                 db    ? ;
.bss:000000000021D39F                 db    ? ;
.bss:000000000021D3A0                 db    ? ;
.bss:000000000021D3A1                 db    ? ;
.bss:000000000021D3A2                 db    ? ;
.bss:000000000021D3A3                 db    ? ;
.bss:000000000021D3A4                 db    ? ;
.bss:000000000021D3A5                 db    ? ;
.bss:000000000021D3A6                 db    ? ;
.bss:000000000021D3A7                 db    ? ;
.bss:000000000021D3A8                 db    ? ;
.bss:000000000021D3A9                 db    ? ;
.bss:000000000021D3AA                 db    ? ;
.bss:000000000021D3AB                 db    ? ;
.bss:000000000021D3AC                 db    ? ;
.bss:000000000021D3AD                 db    ? ;
.bss:000000000021D3AE                 db    ? ;
.bss:000000000021D3AF                 db    ? ;
.bss:000000000021D3B0                 db    ? ;
.bss:000000000021D3B1                 db    ? ;
.bss:000000000021D3B2                 db    ? ;
.bss:000000000021D3B3                 db    ? ;
.bss:000000000021D3B4                 db    ? ;
.bss:000000000021D3B5                 db    ? ;
.bss:000000000021D3B6                 db    ? ;
.bss:000000000021D3B7                 db    ? ;
.bss:000000000021D3B8                 db    ? ;
.bss:000000000021D3B9                 db    ? ;
.bss:000000000021D3BA                 db    ? ;
.bss:000000000021D3BB                 db    ? ;
.bss:000000000021D3BC                 db    ? ;
.bss:000000000021D3BD                 db    ? ;
.bss:000000000021D3BE                 db    ? ;
.bss:000000000021D3BF                 db    ? ;
.bss:000000000021D3C0                 db    ? ;
.bss:000000000021D3C1                 db    ? ;
.bss:000000000021D3C2                 db    ? ;
.bss:000000000021D3C3                 db    ? ;
.bss:000000000021D3C4                 db    ? ;
.bss:000000000021D3C5                 db    ? ;
.bss:000000000021D3C6                 db    ? ;
.bss:000000000021D3C7                 db    ? ;
.bss:000000000021D3C8                 db    ? ;
.bss:000000000021D3C9                 db    ? ;
.bss:000000000021D3CA                 db    ? ;
.bss:000000000021D3CB                 db    ? ;
.bss:000000000021D3CC                 db    ? ;
.bss:000000000021D3CD                 db    ? ;
.bss:000000000021D3CE                 db    ? ;
.bss:000000000021D3CF                 db    ? ;
.bss:000000000021D3D0                 db    ? ;
.bss:000000000021D3D1                 db    ? ;
.bss:000000000021D3D2                 db    ? ;
.bss:000000000021D3D3                 db    ? ;
.bss:000000000021D3D4                 db    ? ;
.bss:000000000021D3D5                 db    ? ;
.bss:000000000021D3D6                 db    ? ;
.bss:000000000021D3D7                 db    ? ;
.bss:000000000021D3D8                 db    ? ;
.bss:000000000021D3D9                 db    ? ;
.bss:000000000021D3DA                 db    ? ;
.bss:000000000021D3DB                 db    ? ;
.bss:000000000021D3DC                 db    ? ;
.bss:000000000021D3DD                 db    ? ;
.bss:000000000021D3DE                 db    ? ;
.bss:000000000021D3DF                 db    ? ;
.bss:000000000021D3E0                 db    ? ;
.bss:000000000021D3E1                 db    ? ;
.bss:000000000021D3E2                 db    ? ;
.bss:000000000021D3E3                 db    ? ;
.bss:000000000021D3E4                 db    ? ;
.bss:000000000021D3E5                 db    ? ;
.bss:000000000021D3E6                 db    ? ;
.bss:000000000021D3E7                 db    ? ;
.bss:000000000021D3E8                 db    ? ;
.bss:000000000021D3E9                 db    ? ;
.bss:000000000021D3EA                 db    ? ;
.bss:000000000021D3EB                 db    ? ;
.bss:000000000021D3EC                 db    ? ;
.bss:000000000021D3ED                 db    ? ;
.bss:000000000021D3EE                 db    ? ;
.bss:000000000021D3EF                 db    ? ;
.bss:000000000021D3F0                 db    ? ;
.bss:000000000021D3F1                 db    ? ;
.bss:000000000021D3F2                 db    ? ;
.bss:000000000021D3F3                 db    ? ;
.bss:000000000021D3F4                 db    ? ;
.bss:000000000021D3F5                 db    ? ;
.bss:000000000021D3F6                 db    ? ;
.bss:000000000021D3F7                 db    ? ;
.bss:000000000021D3F8                 db    ? ;
.bss:000000000021D3F9                 db    ? ;
.bss:000000000021D3FA                 db    ? ;
.bss:000000000021D3FB                 db    ? ;
.bss:000000000021D3FC                 db    ? ;
.bss:000000000021D3FD                 db    ? ;
.bss:000000000021D3FE                 db    ? ;
.bss:000000000021D3FF                 db    ? ;
.bss:000000000021D400                 db    ? ;
.bss:000000000021D401                 db    ? ;
.bss:000000000021D402                 db    ? ;
.bss:000000000021D403                 db    ? ;
.bss:000000000021D404                 db    ? ;
.bss:000000000021D405                 db    ? ;
.bss:000000000021D406                 db    ? ;
.bss:000000000021D407                 db    ? ;
.bss:000000000021D408                 db    ? ;
.bss:000000000021D409                 db    ? ;
.bss:000000000021D40A                 db    ? ;
.bss:000000000021D40B                 db    ? ;
.bss:000000000021D40C                 db    ? ;
.bss:000000000021D40D                 db    ? ;
.bss:000000000021D40E                 db    ? ;
.bss:000000000021D40F                 db    ? ;
.bss:000000000021D410                 db    ? ;
.bss:000000000021D411                 db    ? ;
.bss:000000000021D412                 db    ? ;
.bss:000000000021D413                 db    ? ;
.bss:000000000021D414                 db    ? ;
.bss:000000000021D415                 db    ? ;
.bss:000000000021D416                 db    ? ;
.bss:000000000021D417                 db    ? ;
.bss:000000000021D418                 db    ? ;
.bss:000000000021D419                 db    ? ;
.bss:000000000021D41A                 db    ? ;
.bss:000000000021D41B                 db    ? ;
.bss:000000000021D41C                 db    ? ;
.bss:000000000021D41D                 db    ? ;
.bss:000000000021D41E                 db    ? ;
.bss:000000000021D41F                 db    ? ;
.bss:000000000021D420                 db    ? ;
.bss:000000000021D421                 db    ? ;
.bss:000000000021D422                 db    ? ;
.bss:000000000021D423                 db    ? ;
.bss:000000000021D424                 db    ? ;
.bss:000000000021D425                 db    ? ;
.bss:000000000021D426                 db    ? ;
.bss:000000000021D427                 db    ? ;
.bss:000000000021D428                 db    ? ;
.bss:000000000021D429                 db    ? ;
.bss:000000000021D42A                 db    ? ;
.bss:000000000021D42B                 db    ? ;
.bss:000000000021D42C                 db    ? ;
.bss:000000000021D42D                 db    ? ;
.bss:000000000021D42E                 db    ? ;
.bss:000000000021D42F                 db    ? ;
.bss:000000000021D430                 db    ? ;
.bss:000000000021D431                 db    ? ;
.bss:000000000021D432                 db    ? ;
.bss:000000000021D433                 db    ? ;
.bss:000000000021D434                 db    ? ;
.bss:000000000021D435                 db    ? ;
.bss:000000000021D436                 db    ? ;
.bss:000000000021D437                 db    ? ;
.bss:000000000021D438                 db    ? ;
.bss:000000000021D439                 db    ? ;
.bss:000000000021D43A                 db    ? ;
.bss:000000000021D43B                 db    ? ;
.bss:000000000021D43C                 db    ? ;
.bss:000000000021D43D                 db    ? ;
.bss:000000000021D43E                 db    ? ;
.bss:000000000021D43F                 db    ? ;
.bss:000000000021D440                 db    ? ;
.bss:000000000021D441                 db    ? ;
.bss:000000000021D442                 db    ? ;
.bss:000000000021D443                 db    ? ;
.bss:000000000021D444                 db    ? ;
.bss:000000000021D445                 db    ? ;
.bss:000000000021D446                 db    ? ;
.bss:000000000021D447                 db    ? ;
.bss:000000000021D448                 db    ? ;
.bss:000000000021D449                 db    ? ;
.bss:000000000021D44A                 db    ? ;
.bss:000000000021D44B                 db    ? ;
.bss:000000000021D44C                 db    ? ;
.bss:000000000021D44D                 db    ? ;
.bss:000000000021D44E                 db    ? ;
.bss:000000000021D44F                 db    ? ;
.bss:000000000021D450                 db    ? ;
.bss:000000000021D451                 db    ? ;
.bss:000000000021D452                 db    ? ;
.bss:000000000021D453                 db    ? ;
.bss:000000000021D454                 db    ? ;
.bss:000000000021D455                 db    ? ;
.bss:000000000021D456                 db    ? ;
.bss:000000000021D457                 db    ? ;
.bss:000000000021D458                 db    ? ;
.bss:000000000021D459                 db    ? ;
.bss:000000000021D45A                 db    ? ;
.bss:000000000021D45B                 db    ? ;
.bss:000000000021D45C                 db    ? ;
.bss:000000000021D45D                 db    ? ;
.bss:000000000021D45E                 db    ? ;
.bss:000000000021D45F                 db    ? ;
.bss:000000000021D460                 db    ? ;
.bss:000000000021D461                 db    ? ;
.bss:000000000021D462                 db    ? ;
.bss:000000000021D463                 db    ? ;
.bss:000000000021D464                 db    ? ;
.bss:000000000021D465                 db    ? ;
.bss:000000000021D466                 db    ? ;
.bss:000000000021D467                 db    ? ;
.bss:000000000021D468                 db    ? ;
.bss:000000000021D469                 db    ? ;
.bss:000000000021D46A                 db    ? ;
.bss:000000000021D46B                 db    ? ;
.bss:000000000021D46C                 db    ? ;
.bss:000000000021D46D                 db    ? ;
.bss:000000000021D46E                 db    ? ;
.bss:000000000021D46F                 db    ? ;
.bss:000000000021D470                 db    ? ;
.bss:000000000021D471                 db    ? ;
.bss:000000000021D472                 db    ? ;
.bss:000000000021D473                 db    ? ;
.bss:000000000021D474                 db    ? ;
.bss:000000000021D475                 db    ? ;
.bss:000000000021D476                 db    ? ;
.bss:000000000021D477                 db    ? ;
.bss:000000000021D478                 db    ? ;
.bss:000000000021D479                 db    ? ;
.bss:000000000021D47A                 db    ? ;
.bss:000000000021D47B                 db    ? ;
.bss:000000000021D47C                 db    ? ;
.bss:000000000021D47D                 db    ? ;
.bss:000000000021D47E                 db    ? ;
.bss:000000000021D47F                 db    ? ;
.bss:000000000021D480                 db    ? ;
.bss:000000000021D481                 db    ? ;
.bss:000000000021D482                 db    ? ;
.bss:000000000021D483                 db    ? ;
.bss:000000000021D484                 db    ? ;
.bss:000000000021D485                 db    ? ;
.bss:000000000021D486                 db    ? ;
.bss:000000000021D487                 db    ? ;
.bss:000000000021D488                 db    ? ;
.bss:000000000021D489                 db    ? ;
.bss:000000000021D48A                 db    ? ;
.bss:000000000021D48B                 db    ? ;
.bss:000000000021D48C                 db    ? ;
.bss:000000000021D48D                 db    ? ;
.bss:000000000021D48E                 db    ? ;
.bss:000000000021D48F                 db    ? ;
.bss:000000000021D490                 db    ? ;
.bss:000000000021D491                 db    ? ;
.bss:000000000021D492                 db    ? ;
.bss:000000000021D493                 db    ? ;
.bss:000000000021D494                 db    ? ;
.bss:000000000021D495                 db    ? ;
.bss:000000000021D496                 db    ? ;
.bss:000000000021D497                 db    ? ;
.bss:000000000021D498                 db    ? ;
.bss:000000000021D499                 db    ? ;
.bss:000000000021D49A                 db    ? ;
.bss:000000000021D49B                 db    ? ;
.bss:000000000021D49C                 db    ? ;
.bss:000000000021D49D                 db    ? ;
.bss:000000000021D49E                 db    ? ;
.bss:000000000021D49F                 db    ? ;
.bss:000000000021D4A0                 db    ? ;
.bss:000000000021D4A1                 db    ? ;
.bss:000000000021D4A2                 db    ? ;
.bss:000000000021D4A3                 db    ? ;
.bss:000000000021D4A4                 db    ? ;
.bss:000000000021D4A5                 db    ? ;
.bss:000000000021D4A6                 db    ? ;
.bss:000000000021D4A7                 db    ? ;
.bss:000000000021D4A8                 db    ? ;
.bss:000000000021D4A9                 db    ? ;
.bss:000000000021D4AA                 db    ? ;
.bss:000000000021D4AB                 db    ? ;
.bss:000000000021D4AC                 db    ? ;
.bss:000000000021D4AD                 db    ? ;
.bss:000000000021D4AE                 db    ? ;
.bss:000000000021D4AF                 db    ? ;
.bss:000000000021D4B0                 db    ? ;
.bss:000000000021D4B1                 db    ? ;
.bss:000000000021D4B2                 db    ? ;
.bss:000000000021D4B3                 db    ? ;
.bss:000000000021D4B4                 db    ? ;
.bss:000000000021D4B5                 db    ? ;
.bss:000000000021D4B6                 db    ? ;
.bss:000000000021D4B7                 db    ? ;
.bss:000000000021D4B8                 db    ? ;
.bss:000000000021D4B9                 db    ? ;
.bss:000000000021D4BA                 db    ? ;
.bss:000000000021D4BB                 db    ? ;
.bss:000000000021D4BC                 db    ? ;
.bss:000000000021D4BD                 db    ? ;
.bss:000000000021D4BE                 db    ? ;
.bss:000000000021D4BF                 db    ? ;
.bss:000000000021D4C0                 db    ? ;
.bss:000000000021D4C1                 db    ? ;
.bss:000000000021D4C2                 db    ? ;
.bss:000000000021D4C3                 db    ? ;
.bss:000000000021D4C4                 db    ? ;
.bss:000000000021D4C5                 db    ? ;
.bss:000000000021D4C6                 db    ? ;
.bss:000000000021D4C7                 db    ? ;
.bss:000000000021D4C8                 db    ? ;
.bss:000000000021D4C9                 db    ? ;
.bss:000000000021D4CA                 db    ? ;
.bss:000000000021D4CB                 db    ? ;
.bss:000000000021D4CC                 db    ? ;
.bss:000000000021D4CD                 db    ? ;
.bss:000000000021D4CE                 db    ? ;
.bss:000000000021D4CF                 db    ? ;
.bss:000000000021D4D0                 db    ? ;
.bss:000000000021D4D1                 db    ? ;
.bss:000000000021D4D2                 db    ? ;
.bss:000000000021D4D3                 db    ? ;
.bss:000000000021D4D4                 db    ? ;
.bss:000000000021D4D5                 db    ? ;
.bss:000000000021D4D6                 db    ? ;
.bss:000000000021D4D7                 db    ? ;
.bss:000000000021D4D8                 db    ? ;
.bss:000000000021D4D9                 db    ? ;
.bss:000000000021D4DA                 db    ? ;
.bss:000000000021D4DB                 db    ? ;
.bss:000000000021D4DC                 db    ? ;
.bss:000000000021D4DD                 db    ? ;
.bss:000000000021D4DE                 db    ? ;
.bss:000000000021D4DF                 db    ? ;
.bss:000000000021D4E0                 db    ? ;
.bss:000000000021D4E1                 db    ? ;
.bss:000000000021D4E2                 db    ? ;
.bss:000000000021D4E3                 db    ? ;
.bss:000000000021D4E4                 db    ? ;
.bss:000000000021D4E5                 db    ? ;
.bss:000000000021D4E6                 db    ? ;
.bss:000000000021D4E7                 db    ? ;
.bss:000000000021D4E8                 db    ? ;
.bss:000000000021D4E9                 db    ? ;
.bss:000000000021D4EA                 db    ? ;
.bss:000000000021D4EB                 db    ? ;
.bss:000000000021D4EC                 db    ? ;
.bss:000000000021D4ED                 db    ? ;
.bss:000000000021D4EE                 db    ? ;
.bss:000000000021D4EF                 db    ? ;
.bss:000000000021D4F0                 db    ? ;
.bss:000000000021D4F1                 db    ? ;
.bss:000000000021D4F2                 db    ? ;
.bss:000000000021D4F3                 db    ? ;
.bss:000000000021D4F4                 db    ? ;
.bss:000000000021D4F5                 db    ? ;
.bss:000000000021D4F6                 db    ? ;
.bss:000000000021D4F7                 db    ? ;
.bss:000000000021D4F8                 db    ? ;
.bss:000000000021D4F9                 db    ? ;
.bss:000000000021D4FA                 db    ? ;
.bss:000000000021D4FB                 db    ? ;
.bss:000000000021D4FC                 db    ? ;
.bss:000000000021D4FD                 db    ? ;
.bss:000000000021D4FE                 db    ? ;
.bss:000000000021D4FF                 db    ? ;
.bss:000000000021D500                 db    ? ;
.bss:000000000021D501                 db    ? ;
.bss:000000000021D502                 db    ? ;
.bss:000000000021D503                 db    ? ;
.bss:000000000021D504                 db    ? ;
.bss:000000000021D505                 db    ? ;
.bss:000000000021D506                 db    ? ;
.bss:000000000021D507                 db    ? ;
.bss:000000000021D508                 db    ? ;
.bss:000000000021D509                 db    ? ;
.bss:000000000021D50A                 db    ? ;
.bss:000000000021D50B                 db    ? ;
.bss:000000000021D50C                 db    ? ;
.bss:000000000021D50D                 db    ? ;
.bss:000000000021D50E                 db    ? ;
.bss:000000000021D50F                 db    ? ;
.bss:000000000021D510                 db    ? ;
.bss:000000000021D511                 db    ? ;
.bss:000000000021D512                 db    ? ;
.bss:000000000021D513                 db    ? ;
.bss:000000000021D514                 db    ? ;
.bss:000000000021D515                 db    ? ;
.bss:000000000021D516                 db    ? ;
.bss:000000000021D517                 db    ? ;
.bss:000000000021D518                 db    ? ;
.bss:000000000021D519                 db    ? ;
.bss:000000000021D51A                 db    ? ;
.bss:000000000021D51B                 db    ? ;
.bss:000000000021D51C                 db    ? ;
.bss:000000000021D51D                 db    ? ;
.bss:000000000021D51E                 db    ? ;
.bss:000000000021D51F                 db    ? ;
.bss:000000000021D520                 db    ? ;
.bss:000000000021D521                 db    ? ;
.bss:000000000021D522                 db    ? ;
.bss:000000000021D523                 db    ? ;
.bss:000000000021D524                 db    ? ;
.bss:000000000021D525                 db    ? ;
.bss:000000000021D526                 db    ? ;
.bss:000000000021D527                 db    ? ;
.bss:000000000021D528                 db    ? ;
.bss:000000000021D529                 db    ? ;
.bss:000000000021D52A                 db    ? ;
.bss:000000000021D52B                 db    ? ;
.bss:000000000021D52C                 db    ? ;
.bss:000000000021D52D                 db    ? ;
.bss:000000000021D52E                 db    ? ;
.bss:000000000021D52F                 db    ? ;
.bss:000000000021D530                 db    ? ;
.bss:000000000021D531                 db    ? ;
.bss:000000000021D532                 db    ? ;
.bss:000000000021D533                 db    ? ;
.bss:000000000021D534                 db    ? ;
.bss:000000000021D535                 db    ? ;
.bss:000000000021D536                 db    ? ;
.bss:000000000021D537                 db    ? ;
.bss:000000000021D538                 db    ? ;
.bss:000000000021D539                 db    ? ;
.bss:000000000021D53A                 db    ? ;
.bss:000000000021D53B                 db    ? ;
.bss:000000000021D53C                 db    ? ;
.bss:000000000021D53D                 db    ? ;
.bss:000000000021D53E                 db    ? ;
.bss:000000000021D53F                 db    ? ;
.bss:000000000021D540                 db    ? ;
.bss:000000000021D541                 db    ? ;
.bss:000000000021D542                 db    ? ;
.bss:000000000021D543                 db    ? ;
.bss:000000000021D544                 db    ? ;
.bss:000000000021D545                 db    ? ;
.bss:000000000021D546                 db    ? ;
.bss:000000000021D547                 db    ? ;
.bss:000000000021D548                 db    ? ;
.bss:000000000021D549                 db    ? ;
.bss:000000000021D54A                 db    ? ;
.bss:000000000021D54B                 db    ? ;
.bss:000000000021D54C                 db    ? ;
.bss:000000000021D54D                 db    ? ;
.bss:000000000021D54E                 db    ? ;
.bss:000000000021D54F                 db    ? ;
.bss:000000000021D550                 db    ? ;
.bss:000000000021D551                 db    ? ;
.bss:000000000021D552                 db    ? ;
.bss:000000000021D553                 db    ? ;
.bss:000000000021D554                 db    ? ;
.bss:000000000021D555                 db    ? ;
.bss:000000000021D556                 db    ? ;
.bss:000000000021D557                 db    ? ;
.bss:000000000021D558                 db    ? ;
.bss:000000000021D559                 db    ? ;
.bss:000000000021D55A                 db    ? ;
.bss:000000000021D55B                 db    ? ;
.bss:000000000021D55C                 db    ? ;
.bss:000000000021D55D                 db    ? ;
.bss:000000000021D55E                 db    ? ;
.bss:000000000021D55F                 db    ? ;
.bss:000000000021D560                 db    ? ;
.bss:000000000021D561                 db    ? ;
.bss:000000000021D562                 db    ? ;
.bss:000000000021D563                 db    ? ;
.bss:000000000021D564                 db    ? ;
.bss:000000000021D565                 db    ? ;
.bss:000000000021D566                 db    ? ;
.bss:000000000021D567                 db    ? ;
.bss:000000000021D568                 db    ? ;
.bss:000000000021D569                 db    ? ;
.bss:000000000021D56A                 db    ? ;
.bss:000000000021D56B                 db    ? ;
.bss:000000000021D56C                 db    ? ;
.bss:000000000021D56D                 db    ? ;
.bss:000000000021D56E                 db    ? ;
.bss:000000000021D56F                 db    ? ;
.bss:000000000021D570                 db    ? ;
.bss:000000000021D571                 db    ? ;
.bss:000000000021D572                 db    ? ;
.bss:000000000021D573                 db    ? ;
.bss:000000000021D574                 db    ? ;
.bss:000000000021D575                 db    ? ;
.bss:000000000021D576                 db    ? ;
.bss:000000000021D577                 db    ? ;
.bss:000000000021D578                 db    ? ;
.bss:000000000021D579                 db    ? ;
.bss:000000000021D57A                 db    ? ;
.bss:000000000021D57B                 db    ? ;
.bss:000000000021D57C                 db    ? ;
.bss:000000000021D57D                 db    ? ;
.bss:000000000021D57E                 db    ? ;
.bss:000000000021D57F                 db    ? ;
.bss:000000000021D580                 db    ? ;
.bss:000000000021D581                 db    ? ;
.bss:000000000021D582                 db    ? ;
.bss:000000000021D583                 db    ? ;
.bss:000000000021D584                 db    ? ;
.bss:000000000021D585                 db    ? ;
.bss:000000000021D586                 db    ? ;
.bss:000000000021D587                 db    ? ;
.bss:000000000021D588                 db    ? ;
.bss:000000000021D589                 db    ? ;
.bss:000000000021D58A                 db    ? ;
.bss:000000000021D58B                 db    ? ;
.bss:000000000021D58C                 db    ? ;
.bss:000000000021D58D                 db    ? ;
.bss:000000000021D58E                 db    ? ;
.bss:000000000021D58F                 db    ? ;
.bss:000000000021D590                 db    ? ;
.bss:000000000021D591                 db    ? ;
.bss:000000000021D592                 db    ? ;
.bss:000000000021D593                 db    ? ;
.bss:000000000021D594                 db    ? ;
.bss:000000000021D595                 db    ? ;
.bss:000000000021D596                 db    ? ;
.bss:000000000021D597                 db    ? ;
.bss:000000000021D598                 db    ? ;
.bss:000000000021D599                 db    ? ;
.bss:000000000021D59A                 db    ? ;
.bss:000000000021D59B                 db    ? ;
.bss:000000000021D59C                 db    ? ;
.bss:000000000021D59D                 db    ? ;
.bss:000000000021D59E                 db    ? ;
.bss:000000000021D59F                 db    ? ;
.bss:000000000021D5A0                 db    ? ;
.bss:000000000021D5A1                 db    ? ;
.bss:000000000021D5A2                 db    ? ;
.bss:000000000021D5A3                 db    ? ;
.bss:000000000021D5A4                 db    ? ;
.bss:000000000021D5A5                 db    ? ;
.bss:000000000021D5A6                 db    ? ;
.bss:000000000021D5A7                 db    ? ;
.bss:000000000021D5A8                 db    ? ;
.bss:000000000021D5A9                 db    ? ;
.bss:000000000021D5AA                 db    ? ;
.bss:000000000021D5AB                 db    ? ;
.bss:000000000021D5AC                 db    ? ;
.bss:000000000021D5AD                 db    ? ;
.bss:000000000021D5AE                 db    ? ;
.bss:000000000021D5AF                 db    ? ;
.bss:000000000021D5B0                 db    ? ;
.bss:000000000021D5B1                 db    ? ;
.bss:000000000021D5B2                 db    ? ;
.bss:000000000021D5B3                 db    ? ;
.bss:000000000021D5B4                 db    ? ;
.bss:000000000021D5B5                 db    ? ;
.bss:000000000021D5B6                 db    ? ;
.bss:000000000021D5B7                 db    ? ;
.bss:000000000021D5B8                 db    ? ;
.bss:000000000021D5B9                 db    ? ;
.bss:000000000021D5BA                 db    ? ;
.bss:000000000021D5BB                 db    ? ;
.bss:000000000021D5BC                 db    ? ;
.bss:000000000021D5BD                 db    ? ;
.bss:000000000021D5BE                 db    ? ;
.bss:000000000021D5BF                 db    ? ;
.bss:000000000021D5C0                 db    ? ;
.bss:000000000021D5C1                 db    ? ;
.bss:000000000021D5C2                 db    ? ;
.bss:000000000021D5C3                 db    ? ;
.bss:000000000021D5C4                 db    ? ;
.bss:000000000021D5C5                 db    ? ;
.bss:000000000021D5C6                 db    ? ;
.bss:000000000021D5C7                 db    ? ;
.bss:000000000021D5C8                 db    ? ;
.bss:000000000021D5C9                 db    ? ;
.bss:000000000021D5CA                 db    ? ;
.bss:000000000021D5CB                 db    ? ;
.bss:000000000021D5CC                 db    ? ;
.bss:000000000021D5CD                 db    ? ;
.bss:000000000021D5CE                 db    ? ;
.bss:000000000021D5CF                 db    ? ;
.bss:000000000021D5D0                 db    ? ;
.bss:000000000021D5D1                 db    ? ;
.bss:000000000021D5D2                 db    ? ;
.bss:000000000021D5D3                 db    ? ;
.bss:000000000021D5D4                 db    ? ;
.bss:000000000021D5D5                 db    ? ;
.bss:000000000021D5D6                 db    ? ;
.bss:000000000021D5D7                 db    ? ;
.bss:000000000021D5D8                 db    ? ;
.bss:000000000021D5D9                 db    ? ;
.bss:000000000021D5DA                 db    ? ;
.bss:000000000021D5DB                 db    ? ;
.bss:000000000021D5DC                 db    ? ;
.bss:000000000021D5DD                 db    ? ;
.bss:000000000021D5DE                 db    ? ;
.bss:000000000021D5DF                 db    ? ;
.bss:000000000021D5E0                 db    ? ;
.bss:000000000021D5E1                 db    ? ;
.bss:000000000021D5E2                 db    ? ;
.bss:000000000021D5E3                 db    ? ;
.bss:000000000021D5E4                 db    ? ;
.bss:000000000021D5E5                 db    ? ;
.bss:000000000021D5E6                 db    ? ;
.bss:000000000021D5E7                 db    ? ;
.bss:000000000021D5E8                 db    ? ;
.bss:000000000021D5E9                 db    ? ;
.bss:000000000021D5EA                 db    ? ;
.bss:000000000021D5EB                 db    ? ;
.bss:000000000021D5EC                 db    ? ;
.bss:000000000021D5ED                 db    ? ;
.bss:000000000021D5EE                 db    ? ;
.bss:000000000021D5EF                 db    ? ;
.bss:000000000021D5F0                 db    ? ;
.bss:000000000021D5F1                 db    ? ;
.bss:000000000021D5F2                 db    ? ;
.bss:000000000021D5F3                 db    ? ;
.bss:000000000021D5F4                 db    ? ;
.bss:000000000021D5F5                 db    ? ;
.bss:000000000021D5F6                 db    ? ;
.bss:000000000021D5F7                 db    ? ;
.bss:000000000021D5F8                 db    ? ;
.bss:000000000021D5F9                 db    ? ;
.bss:000000000021D5FA                 db    ? ;
.bss:000000000021D5FB                 db    ? ;
.bss:000000000021D5FC                 db    ? ;
.bss:000000000021D5FD                 db    ? ;
.bss:000000000021D5FE                 db    ? ;
.bss:000000000021D5FF                 db    ? ;
.bss:000000000021D600                 db    ? ;
.bss:000000000021D601                 db    ? ;
.bss:000000000021D602                 db    ? ;
.bss:000000000021D603                 db    ? ;
.bss:000000000021D604                 db    ? ;
.bss:000000000021D605                 db    ? ;
.bss:000000000021D606                 db    ? ;
.bss:000000000021D607                 db    ? ;
.bss:000000000021D608                 db    ? ;
.bss:000000000021D609                 db    ? ;
.bss:000000000021D60A                 db    ? ;
.bss:000000000021D60B                 db    ? ;
.bss:000000000021D60C                 db    ? ;
.bss:000000000021D60D                 db    ? ;
.bss:000000000021D60E                 db    ? ;
.bss:000000000021D60F                 db    ? ;
.bss:000000000021D610                 db    ? ;
.bss:000000000021D611                 db    ? ;
.bss:000000000021D612                 db    ? ;
.bss:000000000021D613                 db    ? ;
.bss:000000000021D614                 db    ? ;
.bss:000000000021D615                 db    ? ;
.bss:000000000021D616                 db    ? ;
.bss:000000000021D617                 db    ? ;
.bss:000000000021D618                 db    ? ;
.bss:000000000021D619                 db    ? ;
.bss:000000000021D61A                 db    ? ;
.bss:000000000021D61B                 db    ? ;
.bss:000000000021D61C                 db    ? ;
.bss:000000000021D61D                 db    ? ;
.bss:000000000021D61E                 db    ? ;
.bss:000000000021D61F                 db    ? ;
.bss:000000000021D620                 db    ? ;
.bss:000000000021D621                 db    ? ;
.bss:000000000021D622                 db    ? ;
.bss:000000000021D623                 db    ? ;
.bss:000000000021D624                 db    ? ;
.bss:000000000021D625                 db    ? ;
.bss:000000000021D626                 db    ? ;
.bss:000000000021D627                 db    ? ;
.bss:000000000021D628                 db    ? ;
.bss:000000000021D629                 db    ? ;
.bss:000000000021D62A                 db    ? ;
.bss:000000000021D62B                 db    ? ;
.bss:000000000021D62C                 db    ? ;
.bss:000000000021D62D                 db    ? ;
.bss:000000000021D62E                 db    ? ;
.bss:000000000021D62F                 db    ? ;
.bss:000000000021D630                 db    ? ;
.bss:000000000021D631                 db    ? ;
.bss:000000000021D632                 db    ? ;
.bss:000000000021D633                 db    ? ;
.bss:000000000021D634                 db    ? ;
.bss:000000000021D635                 db    ? ;
.bss:000000000021D636                 db    ? ;
.bss:000000000021D637                 db    ? ;
.bss:000000000021D638                 db    ? ;
.bss:000000000021D639                 db    ? ;
.bss:000000000021D63A                 db    ? ;
.bss:000000000021D63B                 db    ? ;
.bss:000000000021D63C                 db    ? ;
.bss:000000000021D63D                 db    ? ;
.bss:000000000021D63E                 db    ? ;
.bss:000000000021D63F                 db    ? ;
.bss:000000000021D640                 db    ? ;
.bss:000000000021D641                 db    ? ;
.bss:000000000021D642                 db    ? ;
.bss:000000000021D643                 db    ? ;
.bss:000000000021D644                 db    ? ;
.bss:000000000021D645                 db    ? ;
.bss:000000000021D646                 db    ? ;
.bss:000000000021D647                 db    ? ;
.bss:000000000021D648                 db    ? ;
.bss:000000000021D649                 db    ? ;
.bss:000000000021D64A                 db    ? ;
.bss:000000000021D64B                 db    ? ;
.bss:000000000021D64C                 db    ? ;
.bss:000000000021D64D                 db    ? ;
.bss:000000000021D64E                 db    ? ;
.bss:000000000021D64F                 db    ? ;
.bss:000000000021D650                 db    ? ;
.bss:000000000021D651                 db    ? ;
.bss:000000000021D652                 db    ? ;
.bss:000000000021D653                 db    ? ;
.bss:000000000021D654                 db    ? ;
.bss:000000000021D655                 db    ? ;
.bss:000000000021D656                 db    ? ;
.bss:000000000021D657                 db    ? ;
.bss:000000000021D658                 db    ? ;
.bss:000000000021D659                 db    ? ;
.bss:000000000021D65A                 db    ? ;
.bss:000000000021D65B                 db    ? ;
.bss:000000000021D65C                 db    ? ;
.bss:000000000021D65D                 db    ? ;
.bss:000000000021D65E                 db    ? ;
.bss:000000000021D65F                 db    ? ;
.bss:000000000021D660                 db    ? ;
.bss:000000000021D661                 db    ? ;
.bss:000000000021D662                 db    ? ;
.bss:000000000021D663                 db    ? ;
.bss:000000000021D664                 db    ? ;
.bss:000000000021D665                 db    ? ;
.bss:000000000021D666                 db    ? ;
.bss:000000000021D667                 db    ? ;
.bss:000000000021D668                 db    ? ;
.bss:000000000021D669                 db    ? ;
.bss:000000000021D66A                 db    ? ;
.bss:000000000021D66B                 db    ? ;
.bss:000000000021D66C                 db    ? ;
.bss:000000000021D66D                 db    ? ;
.bss:000000000021D66E                 db    ? ;
.bss:000000000021D66F                 db    ? ;
.bss:000000000021D670                 db    ? ;
.bss:000000000021D671                 db    ? ;
.bss:000000000021D672                 db    ? ;
.bss:000000000021D673                 db    ? ;
.bss:000000000021D674                 db    ? ;
.bss:000000000021D675                 db    ? ;
.bss:000000000021D676                 db    ? ;
.bss:000000000021D677                 db    ? ;
.bss:000000000021D678                 db    ? ;
.bss:000000000021D679                 db    ? ;
.bss:000000000021D67A                 db    ? ;
.bss:000000000021D67B                 db    ? ;
.bss:000000000021D67C                 db    ? ;
.bss:000000000021D67D                 db    ? ;
.bss:000000000021D67E                 db    ? ;
.bss:000000000021D67F                 db    ? ;
.bss:000000000021D680                 db    ? ;
.bss:000000000021D681                 db    ? ;
.bss:000000000021D682                 db    ? ;
.bss:000000000021D683                 db    ? ;
.bss:000000000021D684                 db    ? ;
.bss:000000000021D685                 db    ? ;
.bss:000000000021D686                 db    ? ;
.bss:000000000021D687                 db    ? ;
.bss:000000000021D688                 db    ? ;
.bss:000000000021D689                 db    ? ;
.bss:000000000021D68A                 db    ? ;
.bss:000000000021D68B                 db    ? ;
.bss:000000000021D68C                 db    ? ;
.bss:000000000021D68D                 db    ? ;
.bss:000000000021D68E                 db    ? ;
.bss:000000000021D68F                 db    ? ;
.bss:000000000021D690                 db    ? ;
.bss:000000000021D691                 db    ? ;
.bss:000000000021D692                 db    ? ;
.bss:000000000021D693                 db    ? ;
.bss:000000000021D694                 db    ? ;
.bss:000000000021D695                 db    ? ;
.bss:000000000021D696                 db    ? ;
.bss:000000000021D697                 db    ? ;
.bss:000000000021D698                 db    ? ;
.bss:000000000021D699                 db    ? ;
.bss:000000000021D69A                 db    ? ;
.bss:000000000021D69B                 db    ? ;
.bss:000000000021D69C                 db    ? ;
.bss:000000000021D69D                 db    ? ;
.bss:000000000021D69E                 db    ? ;
.bss:000000000021D69F                 db    ? ;
.bss:000000000021D6A0                 db    ? ;
.bss:000000000021D6A1                 db    ? ;
.bss:000000000021D6A2                 db    ? ;
.bss:000000000021D6A3                 db    ? ;
.bss:000000000021D6A4                 db    ? ;
.bss:000000000021D6A5                 db    ? ;
.bss:000000000021D6A6                 db    ? ;
.bss:000000000021D6A7                 db    ? ;
.bss:000000000021D6A8                 db    ? ;
.bss:000000000021D6A9                 db    ? ;
.bss:000000000021D6AA                 db    ? ;
.bss:000000000021D6AB                 db    ? ;
.bss:000000000021D6AC                 db    ? ;
.bss:000000000021D6AD                 db    ? ;
.bss:000000000021D6AE                 db    ? ;
.bss:000000000021D6AF                 db    ? ;
.bss:000000000021D6B0                 db    ? ;
.bss:000000000021D6B1                 db    ? ;
.bss:000000000021D6B2                 db    ? ;
.bss:000000000021D6B3                 db    ? ;
.bss:000000000021D6B4                 db    ? ;
.bss:000000000021D6B5                 db    ? ;
.bss:000000000021D6B6                 db    ? ;
.bss:000000000021D6B7                 db    ? ;
.bss:000000000021D6B8                 db    ? ;
.bss:000000000021D6B9                 db    ? ;
.bss:000000000021D6BA                 db    ? ;
.bss:000000000021D6BB                 db    ? ;
.bss:000000000021D6BC                 db    ? ;
.bss:000000000021D6BD                 db    ? ;
.bss:000000000021D6BE                 db    ? ;
.bss:000000000021D6BF                 db    ? ;
.bss:000000000021D6C0                 db    ? ;
.bss:000000000021D6C1                 db    ? ;
.bss:000000000021D6C2                 db    ? ;
.bss:000000000021D6C3                 db    ? ;
.bss:000000000021D6C4                 db    ? ;
.bss:000000000021D6C5                 db    ? ;
.bss:000000000021D6C6                 db    ? ;
.bss:000000000021D6C7                 db    ? ;
.bss:000000000021D6C8                 db    ? ;
.bss:000000000021D6C9                 db    ? ;
.bss:000000000021D6CA                 db    ? ;
.bss:000000000021D6CB                 db    ? ;
.bss:000000000021D6CC                 db    ? ;
.bss:000000000021D6CD                 db    ? ;
.bss:000000000021D6CE                 db    ? ;
.bss:000000000021D6CF                 db    ? ;
.bss:000000000021D6D0                 db    ? ;
.bss:000000000021D6D1                 db    ? ;
.bss:000000000021D6D2                 db    ? ;
.bss:000000000021D6D3                 db    ? ;
.bss:000000000021D6D4                 db    ? ;
.bss:000000000021D6D5                 db    ? ;
.bss:000000000021D6D6                 db    ? ;
.bss:000000000021D6D7                 db    ? ;
.bss:000000000021D6D8                 db    ? ;
.bss:000000000021D6D9                 db    ? ;
.bss:000000000021D6DA                 db    ? ;
.bss:000000000021D6DB                 db    ? ;
.bss:000000000021D6DC                 db    ? ;
.bss:000000000021D6DD                 db    ? ;
.bss:000000000021D6DE                 db    ? ;
.bss:000000000021D6DF                 db    ? ;
.bss:000000000021D6E0                 db    ? ;
.bss:000000000021D6E1                 db    ? ;
.bss:000000000021D6E2                 db    ? ;
.bss:000000000021D6E3                 db    ? ;
.bss:000000000021D6E4                 db    ? ;
.bss:000000000021D6E5                 db    ? ;
.bss:000000000021D6E6                 db    ? ;
.bss:000000000021D6E7                 db    ? ;
.bss:000000000021D6E8                 db    ? ;
.bss:000000000021D6E9                 db    ? ;
.bss:000000000021D6EA                 db    ? ;
.bss:000000000021D6EB                 db    ? ;
.bss:000000000021D6EC                 db    ? ;
.bss:000000000021D6ED                 db    ? ;
.bss:000000000021D6EE                 db    ? ;
.bss:000000000021D6EF                 db    ? ;
.bss:000000000021D6F0                 db    ? ;
.bss:000000000021D6F1                 db    ? ;
.bss:000000000021D6F2                 db    ? ;
.bss:000000000021D6F3                 db    ? ;
.bss:000000000021D6F4                 db    ? ;
.bss:000000000021D6F5                 db    ? ;
.bss:000000000021D6F6                 db    ? ;
.bss:000000000021D6F7                 db    ? ;
.bss:000000000021D6F8                 db    ? ;
.bss:000000000021D6F9                 db    ? ;
.bss:000000000021D6FA                 db    ? ;
.bss:000000000021D6FB                 db    ? ;
.bss:000000000021D6FC                 db    ? ;
.bss:000000000021D6FD                 db    ? ;
.bss:000000000021D6FE                 db    ? ;
.bss:000000000021D6FF                 db    ? ;
.bss:000000000021D700                 db    ? ;
.bss:000000000021D701                 db    ? ;
.bss:000000000021D702                 db    ? ;
.bss:000000000021D703                 db    ? ;
.bss:000000000021D704                 db    ? ;
.bss:000000000021D705                 db    ? ;
.bss:000000000021D706                 db    ? ;
.bss:000000000021D707                 db    ? ;
.bss:000000000021D708                 db    ? ;
.bss:000000000021D709                 db    ? ;
.bss:000000000021D70A                 db    ? ;
.bss:000000000021D70B                 db    ? ;
.bss:000000000021D70C                 db    ? ;
.bss:000000000021D70D                 db    ? ;
.bss:000000000021D70E                 db    ? ;
.bss:000000000021D70F                 db    ? ;
.bss:000000000021D710                 db    ? ;
.bss:000000000021D711                 db    ? ;
.bss:000000000021D712                 db    ? ;
.bss:000000000021D713                 db    ? ;
.bss:000000000021D714                 db    ? ;
.bss:000000000021D715                 db    ? ;
.bss:000000000021D716                 db    ? ;
.bss:000000000021D717                 db    ? ;
.bss:000000000021D718                 db    ? ;
.bss:000000000021D719                 db    ? ;
.bss:000000000021D71A                 db    ? ;
.bss:000000000021D71B                 db    ? ;
.bss:000000000021D71C                 db    ? ;
.bss:000000000021D71D                 db    ? ;
.bss:000000000021D71E                 db    ? ;
.bss:000000000021D71F                 db    ? ;
.bss:000000000021D720                 db    ? ;
.bss:000000000021D721                 db    ? ;
.bss:000000000021D722                 db    ? ;
.bss:000000000021D723                 db    ? ;
.bss:000000000021D724                 db    ? ;
.bss:000000000021D725                 db    ? ;
.bss:000000000021D726                 db    ? ;
.bss:000000000021D727                 db    ? ;
.bss:000000000021D728                 db    ? ;
.bss:000000000021D729                 db    ? ;
.bss:000000000021D72A                 db    ? ;
.bss:000000000021D72B                 db    ? ;
.bss:000000000021D72C                 db    ? ;
.bss:000000000021D72D                 db    ? ;
.bss:000000000021D72E                 db    ? ;
.bss:000000000021D72F                 db    ? ;
.bss:000000000021D730                 db    ? ;
.bss:000000000021D731                 db    ? ;
.bss:000000000021D732                 db    ? ;
.bss:000000000021D733                 db    ? ;
.bss:000000000021D734                 db    ? ;
.bss:000000000021D735                 db    ? ;
.bss:000000000021D736                 db    ? ;
.bss:000000000021D737                 db    ? ;
.bss:000000000021D738                 db    ? ;
.bss:000000000021D739                 db    ? ;
.bss:000000000021D73A                 db    ? ;
.bss:000000000021D73B                 db    ? ;
.bss:000000000021D73C                 db    ? ;
.bss:000000000021D73D                 db    ? ;
.bss:000000000021D73E                 db    ? ;
.bss:000000000021D73F                 db    ? ;
.bss:000000000021D740                 db    ? ;
.bss:000000000021D741                 db    ? ;
.bss:000000000021D742                 db    ? ;
.bss:000000000021D743                 db    ? ;
.bss:000000000021D744                 db    ? ;
.bss:000000000021D745                 db    ? ;
.bss:000000000021D746                 db    ? ;
.bss:000000000021D747                 db    ? ;
.bss:000000000021D748                 db    ? ;
.bss:000000000021D749                 db    ? ;
.bss:000000000021D74A                 db    ? ;
.bss:000000000021D74B                 db    ? ;
.bss:000000000021D74C                 db    ? ;
.bss:000000000021D74D                 db    ? ;
.bss:000000000021D74E                 db    ? ;
.bss:000000000021D74F                 db    ? ;
.bss:000000000021D750                 db    ? ;
.bss:000000000021D751                 db    ? ;
.bss:000000000021D752                 db    ? ;
.bss:000000000021D753                 db    ? ;
.bss:000000000021D754                 db    ? ;
.bss:000000000021D755                 db    ? ;
.bss:000000000021D756                 db    ? ;
.bss:000000000021D757                 db    ? ;
.bss:000000000021D758                 db    ? ;
.bss:000000000021D759                 db    ? ;
.bss:000000000021D75A                 db    ? ;
.bss:000000000021D75B                 db    ? ;
.bss:000000000021D75C                 db    ? ;
.bss:000000000021D75D                 db    ? ;
.bss:000000000021D75E                 db    ? ;
.bss:000000000021D75F                 db    ? ;
.bss:000000000021D760                 db    ? ;
.bss:000000000021D761                 db    ? ;
.bss:000000000021D762                 db    ? ;
.bss:000000000021D763                 db    ? ;
.bss:000000000021D764                 db    ? ;
.bss:000000000021D765                 db    ? ;
.bss:000000000021D766                 db    ? ;
.bss:000000000021D767                 db    ? ;
.bss:000000000021D768                 db    ? ;
.bss:000000000021D769                 db    ? ;
.bss:000000000021D76A                 db    ? ;
.bss:000000000021D76B                 db    ? ;
.bss:000000000021D76C                 db    ? ;
.bss:000000000021D76D                 db    ? ;
.bss:000000000021D76E                 db    ? ;
.bss:000000000021D76F                 db    ? ;
.bss:000000000021D770                 db    ? ;
.bss:000000000021D771                 db    ? ;
.bss:000000000021D772                 db    ? ;
.bss:000000000021D773                 db    ? ;
.bss:000000000021D774                 db    ? ;
.bss:000000000021D775                 db    ? ;
.bss:000000000021D776                 db    ? ;
.bss:000000000021D777                 db    ? ;
.bss:000000000021D778                 db    ? ;
.bss:000000000021D779                 db    ? ;
.bss:000000000021D77A                 db    ? ;
.bss:000000000021D77B                 db    ? ;
.bss:000000000021D77C                 db    ? ;
.bss:000000000021D77D                 db    ? ;
.bss:000000000021D77E                 db    ? ;
.bss:000000000021D77F                 db    ? ;
.bss:000000000021D780                 db    ? ;
.bss:000000000021D781                 db    ? ;
.bss:000000000021D782                 db    ? ;
.bss:000000000021D783                 db    ? ;
.bss:000000000021D784                 db    ? ;
.bss:000000000021D785                 db    ? ;
.bss:000000000021D786                 db    ? ;
.bss:000000000021D787                 db    ? ;
.bss:000000000021D788                 db    ? ;
.bss:000000000021D789                 db    ? ;
.bss:000000000021D78A                 db    ? ;
.bss:000000000021D78B                 db    ? ;
.bss:000000000021D78C                 db    ? ;
.bss:000000000021D78D                 db    ? ;
.bss:000000000021D78E                 db    ? ;
.bss:000000000021D78F                 db    ? ;
.bss:000000000021D790                 db    ? ;
.bss:000000000021D791                 db    ? ;
.bss:000000000021D792                 db    ? ;
.bss:000000000021D793                 db    ? ;
.bss:000000000021D794                 db    ? ;
.bss:000000000021D795                 db    ? ;
.bss:000000000021D796                 db    ? ;
.bss:000000000021D797                 db    ? ;
.bss:000000000021D798                 db    ? ;
.bss:000000000021D799                 db    ? ;
.bss:000000000021D79A                 db    ? ;
.bss:000000000021D79B                 db    ? ;
.bss:000000000021D79C                 db    ? ;
.bss:000000000021D79D                 db    ? ;
.bss:000000000021D79E                 db    ? ;
.bss:000000000021D79F                 db    ? ;
.bss:000000000021D7A0                 db    ? ;
.bss:000000000021D7A1                 db    ? ;
.bss:000000000021D7A2                 db    ? ;
.bss:000000000021D7A3                 db    ? ;
.bss:000000000021D7A4                 db    ? ;
.bss:000000000021D7A5                 db    ? ;
.bss:000000000021D7A6                 db    ? ;
.bss:000000000021D7A7                 db    ? ;
.bss:000000000021D7A8                 db    ? ;
.bss:000000000021D7A9                 db    ? ;
.bss:000000000021D7AA                 db    ? ;
.bss:000000000021D7AB                 db    ? ;
.bss:000000000021D7AC                 db    ? ;
.bss:000000000021D7AD                 db    ? ;
.bss:000000000021D7AE                 db    ? ;
.bss:000000000021D7AF                 db    ? ;
.bss:000000000021D7B0                 db    ? ;
.bss:000000000021D7B1                 db    ? ;
.bss:000000000021D7B2                 db    ? ;
.bss:000000000021D7B3                 db    ? ;
.bss:000000000021D7B4                 db    ? ;
.bss:000000000021D7B5                 db    ? ;
.bss:000000000021D7B6                 db    ? ;
.bss:000000000021D7B7                 db    ? ;
.bss:000000000021D7B8                 db    ? ;
.bss:000000000021D7B9                 db    ? ;
.bss:000000000021D7BA                 db    ? ;
.bss:000000000021D7BB                 db    ? ;
.bss:000000000021D7BC                 db    ? ;
.bss:000000000021D7BD                 db    ? ;
.bss:000000000021D7BE                 db    ? ;
.bss:000000000021D7BF                 db    ? ;
.bss:000000000021D7C0                 db    ? ;
.bss:000000000021D7C1                 db    ? ;
.bss:000000000021D7C2                 db    ? ;
.bss:000000000021D7C3                 db    ? ;
.bss:000000000021D7C4                 db    ? ;
.bss:000000000021D7C5                 db    ? ;
.bss:000000000021D7C6                 db    ? ;
.bss:000000000021D7C7                 db    ? ;
.bss:000000000021D7C8                 db    ? ;
.bss:000000000021D7C9                 db    ? ;
.bss:000000000021D7CA                 db    ? ;
.bss:000000000021D7CB                 db    ? ;
.bss:000000000021D7CC                 db    ? ;
.bss:000000000021D7CD                 db    ? ;
.bss:000000000021D7CE                 db    ? ;
.bss:000000000021D7CF                 db    ? ;
.bss:000000000021D7D0                 db    ? ;
.bss:000000000021D7D1                 db    ? ;
.bss:000000000021D7D2                 db    ? ;
.bss:000000000021D7D3                 db    ? ;
.bss:000000000021D7D4                 db    ? ;
.bss:000000000021D7D5                 db    ? ;
.bss:000000000021D7D6                 db    ? ;
.bss:000000000021D7D7                 db    ? ;
.bss:000000000021D7D8                 db    ? ;
.bss:000000000021D7D9                 db    ? ;
.bss:000000000021D7DA                 db    ? ;
.bss:000000000021D7DB                 db    ? ;
.bss:000000000021D7DC                 db    ? ;
.bss:000000000021D7DD                 db    ? ;
.bss:000000000021D7DE                 db    ? ;
.bss:000000000021D7DF                 db    ? ;
.bss:000000000021D7E0                 db    ? ;
.bss:000000000021D7E1                 db    ? ;
.bss:000000000021D7E2                 db    ? ;
.bss:000000000021D7E3                 db    ? ;
.bss:000000000021D7E4                 db    ? ;
.bss:000000000021D7E5                 db    ? ;
.bss:000000000021D7E6                 db    ? ;
.bss:000000000021D7E7                 db    ? ;
.bss:000000000021D7E8                 db    ? ;
.bss:000000000021D7E9                 db    ? ;
.bss:000000000021D7EA                 db    ? ;
.bss:000000000021D7EB                 db    ? ;
.bss:000000000021D7EC                 db    ? ;
.bss:000000000021D7ED                 db    ? ;
.bss:000000000021D7EE                 db    ? ;
.bss:000000000021D7EF                 db    ? ;
.bss:000000000021D7F0                 db    ? ;
.bss:000000000021D7F1                 db    ? ;
.bss:000000000021D7F2                 db    ? ;
.bss:000000000021D7F3                 db    ? ;
.bss:000000000021D7F4                 db    ? ;
.bss:000000000021D7F5                 db    ? ;
.bss:000000000021D7F6                 db    ? ;
.bss:000000000021D7F7                 db    ? ;
.bss:000000000021D7F8                 db    ? ;
.bss:000000000021D7F9                 db    ? ;
.bss:000000000021D7FA                 db    ? ;
.bss:000000000021D7FB                 db    ? ;
.bss:000000000021D7FC                 db    ? ;
.bss:000000000021D7FD                 db    ? ;
.bss:000000000021D7FE                 db    ? ;
.bss:000000000021D7FF                 db    ? ;
.bss:000000000021D800                 db    ? ;
.bss:000000000021D801                 db    ? ;
.bss:000000000021D802                 db    ? ;
.bss:000000000021D803                 db    ? ;
.bss:000000000021D804                 db    ? ;
.bss:000000000021D805                 db    ? ;
.bss:000000000021D806                 db    ? ;
.bss:000000000021D807                 db    ? ;
.bss:000000000021D808                 db    ? ;
.bss:000000000021D809                 db    ? ;
.bss:000000000021D80A                 db    ? ;
.bss:000000000021D80B                 db    ? ;
.bss:000000000021D80C                 db    ? ;
.bss:000000000021D80D                 db    ? ;
.bss:000000000021D80E                 db    ? ;
.bss:000000000021D80F                 db    ? ;
.bss:000000000021D810                 db    ? ;
.bss:000000000021D811                 db    ? ;
.bss:000000000021D812                 db    ? ;
.bss:000000000021D813                 db    ? ;
.bss:000000000021D814                 db    ? ;
.bss:000000000021D815                 db    ? ;
.bss:000000000021D816                 db    ? ;
.bss:000000000021D817                 db    ? ;
.bss:000000000021D818                 db    ? ;
.bss:000000000021D819                 db    ? ;
.bss:000000000021D81A                 db    ? ;
.bss:000000000021D81B                 db    ? ;
.bss:000000000021D81C                 db    ? ;
.bss:000000000021D81D                 db    ? ;
.bss:000000000021D81E                 db    ? ;
.bss:000000000021D81F                 db    ? ;
.bss:000000000021D820                 db    ? ;
.bss:000000000021D821                 db    ? ;
.bss:000000000021D822                 db    ? ;
.bss:000000000021D823                 db    ? ;
.bss:000000000021D824                 db    ? ;
.bss:000000000021D825                 db    ? ;
.bss:000000000021D826                 db    ? ;
.bss:000000000021D827                 db    ? ;
.bss:000000000021D828                 db    ? ;
.bss:000000000021D829                 db    ? ;
.bss:000000000021D82A                 db    ? ;
.bss:000000000021D82B                 db    ? ;
.bss:000000000021D82C                 db    ? ;
.bss:000000000021D82D                 db    ? ;
.bss:000000000021D82E                 db    ? ;
.bss:000000000021D82F                 db    ? ;
.bss:000000000021D830                 db    ? ;
.bss:000000000021D831                 db    ? ;
.bss:000000000021D832                 db    ? ;
.bss:000000000021D833                 db    ? ;
.bss:000000000021D834                 db    ? ;
.bss:000000000021D835                 db    ? ;
.bss:000000000021D836                 db    ? ;
.bss:000000000021D837                 db    ? ;
.bss:000000000021D838                 db    ? ;
.bss:000000000021D839                 db    ? ;
.bss:000000000021D83A                 db    ? ;
.bss:000000000021D83B                 db    ? ;
.bss:000000000021D83C                 db    ? ;
.bss:000000000021D83D                 db    ? ;
.bss:000000000021D83E                 db    ? ;
.bss:000000000021D83F                 db    ? ;
.bss:000000000021D840                 db    ? ;
.bss:000000000021D841                 db    ? ;
.bss:000000000021D842                 db    ? ;
.bss:000000000021D843                 db    ? ;
.bss:000000000021D844                 db    ? ;
.bss:000000000021D845                 db    ? ;
.bss:000000000021D846                 db    ? ;
.bss:000000000021D847                 db    ? ;
.bss:000000000021D848                 db    ? ;
.bss:000000000021D849                 db    ? ;
.bss:000000000021D84A                 db    ? ;
.bss:000000000021D84B                 db    ? ;
.bss:000000000021D84C                 db    ? ;
.bss:000000000021D84D                 db    ? ;
.bss:000000000021D84E                 db    ? ;
.bss:000000000021D84F                 db    ? ;
.bss:000000000021D850                 db    ? ;
.bss:000000000021D851                 db    ? ;
.bss:000000000021D852                 db    ? ;
.bss:000000000021D853                 db    ? ;
.bss:000000000021D854                 db    ? ;
.bss:000000000021D855                 db    ? ;
.bss:000000000021D856                 db    ? ;
.bss:000000000021D857                 db    ? ;
.bss:000000000021D858                 db    ? ;
.bss:000000000021D859                 db    ? ;
.bss:000000000021D85A                 db    ? ;
.bss:000000000021D85B                 db    ? ;
.bss:000000000021D85C                 db    ? ;
.bss:000000000021D85D                 db    ? ;
.bss:000000000021D85E                 db    ? ;
.bss:000000000021D85F                 db    ? ;
.bss:000000000021D860                 db    ? ;
.bss:000000000021D861                 db    ? ;
.bss:000000000021D862                 db    ? ;
.bss:000000000021D863                 db    ? ;
.bss:000000000021D864                 db    ? ;
.bss:000000000021D865                 db    ? ;
.bss:000000000021D866                 db    ? ;
.bss:000000000021D867                 db    ? ;
.bss:000000000021D868                 db    ? ;
.bss:000000000021D869                 db    ? ;
.bss:000000000021D86A                 db    ? ;
.bss:000000000021D86B                 db    ? ;
.bss:000000000021D86C                 db    ? ;
.bss:000000000021D86D                 db    ? ;
.bss:000000000021D86E                 db    ? ;
.bss:000000000021D86F                 db    ? ;
.bss:000000000021D870                 db    ? ;
.bss:000000000021D871                 db    ? ;
.bss:000000000021D872                 db    ? ;
.bss:000000000021D873                 db    ? ;
.bss:000000000021D874                 db    ? ;
.bss:000000000021D875                 db    ? ;
.bss:000000000021D876                 db    ? ;
.bss:000000000021D877                 db    ? ;
.bss:000000000021D878                 db    ? ;
.bss:000000000021D879                 db    ? ;
.bss:000000000021D87A                 db    ? ;
.bss:000000000021D87B                 db    ? ;
.bss:000000000021D87C                 db    ? ;
.bss:000000000021D87D                 db    ? ;
.bss:000000000021D87E                 db    ? ;
.bss:000000000021D87F                 db    ? ;
.bss:000000000021D880                 db    ? ;
.bss:000000000021D881                 db    ? ;
.bss:000000000021D882                 db    ? ;
.bss:000000000021D883                 db    ? ;
.bss:000000000021D884                 db    ? ;
.bss:000000000021D885                 db    ? ;
.bss:000000000021D886                 db    ? ;
.bss:000000000021D887                 db    ? ;
.bss:000000000021D888                 db    ? ;
.bss:000000000021D889                 db    ? ;
.bss:000000000021D88A                 db    ? ;
.bss:000000000021D88B                 db    ? ;
.bss:000000000021D88C                 db    ? ;
.bss:000000000021D88D                 db    ? ;
.bss:000000000021D88E                 db    ? ;
.bss:000000000021D88F                 db    ? ;
.bss:000000000021D890                 db    ? ;
.bss:000000000021D891                 db    ? ;
.bss:000000000021D892                 db    ? ;
.bss:000000000021D893                 db    ? ;
.bss:000000000021D894                 db    ? ;
.bss:000000000021D895                 db    ? ;
.bss:000000000021D896                 db    ? ;
.bss:000000000021D897                 db    ? ;
.bss:000000000021D898                 db    ? ;
.bss:000000000021D899                 db    ? ;
.bss:000000000021D89A                 db    ? ;
.bss:000000000021D89B                 db    ? ;
.bss:000000000021D89C                 db    ? ;
.bss:000000000021D89D                 db    ? ;
.bss:000000000021D89E                 db    ? ;
.bss:000000000021D89F                 db    ? ;
.bss:000000000021D8A0                 db    ? ;
.bss:000000000021D8A1                 db    ? ;
.bss:000000000021D8A2                 db    ? ;
.bss:000000000021D8A3                 db    ? ;
.bss:000000000021D8A4                 db    ? ;
.bss:000000000021D8A5                 db    ? ;
.bss:000000000021D8A6                 db    ? ;
.bss:000000000021D8A7                 db    ? ;
.bss:000000000021D8A8                 db    ? ;
.bss:000000000021D8A9                 db    ? ;
.bss:000000000021D8AA                 db    ? ;
.bss:000000000021D8AB                 db    ? ;
.bss:000000000021D8AC                 db    ? ;
.bss:000000000021D8AD                 db    ? ;
.bss:000000000021D8AE                 db    ? ;
.bss:000000000021D8AF                 db    ? ;
.bss:000000000021D8B0                 db    ? ;
.bss:000000000021D8B1                 db    ? ;
.bss:000000000021D8B2                 db    ? ;
.bss:000000000021D8B3                 db    ? ;
.bss:000000000021D8B4                 db    ? ;
.bss:000000000021D8B5                 db    ? ;
.bss:000000000021D8B6                 db    ? ;
.bss:000000000021D8B7                 db    ? ;
.bss:000000000021D8B8                 db    ? ;
.bss:000000000021D8B9                 db    ? ;
.bss:000000000021D8BA                 db    ? ;
.bss:000000000021D8BB                 db    ? ;
.bss:000000000021D8BC                 db    ? ;
.bss:000000000021D8BD                 db    ? ;
.bss:000000000021D8BE                 db    ? ;
.bss:000000000021D8BF                 db    ? ;
.bss:000000000021D8C0                 db    ? ;
.bss:000000000021D8C1                 db    ? ;
.bss:000000000021D8C2                 db    ? ;
.bss:000000000021D8C3                 db    ? ;
.bss:000000000021D8C4                 db    ? ;
.bss:000000000021D8C5                 db    ? ;
.bss:000000000021D8C6                 db    ? ;
.bss:000000000021D8C7                 db    ? ;
.bss:000000000021D8C8                 db    ? ;
.bss:000000000021D8C9                 db    ? ;
.bss:000000000021D8CA                 db    ? ;
.bss:000000000021D8CB                 db    ? ;
.bss:000000000021D8CC                 db    ? ;
.bss:000000000021D8CD                 db    ? ;
.bss:000000000021D8CE                 db    ? ;
.bss:000000000021D8CF                 db    ? ;
.bss:000000000021D8D0                 db    ? ;
.bss:000000000021D8D1                 db    ? ;
.bss:000000000021D8D2                 db    ? ;
.bss:000000000021D8D3                 db    ? ;
.bss:000000000021D8D4                 db    ? ;
.bss:000000000021D8D5                 db    ? ;
.bss:000000000021D8D6                 db    ? ;
.bss:000000000021D8D7                 db    ? ;
.bss:000000000021D8D8                 db    ? ;
.bss:000000000021D8D9                 db    ? ;
.bss:000000000021D8DA                 db    ? ;
.bss:000000000021D8DB                 db    ? ;
.bss:000000000021D8DC                 db    ? ;
.bss:000000000021D8DD                 db    ? ;
.bss:000000000021D8DE                 db    ? ;
.bss:000000000021D8DF                 db    ? ;
.bss:000000000021D8E0                 db    ? ;
.bss:000000000021D8E1                 db    ? ;
.bss:000000000021D8E2                 db    ? ;
.bss:000000000021D8E3                 db    ? ;
.bss:000000000021D8E4                 db    ? ;
.bss:000000000021D8E5                 db    ? ;
.bss:000000000021D8E6                 db    ? ;
.bss:000000000021D8E7                 db    ? ;
.bss:000000000021D8E8                 db    ? ;
.bss:000000000021D8E9                 db    ? ;
.bss:000000000021D8EA                 db    ? ;
.bss:000000000021D8EB                 db    ? ;
.bss:000000000021D8EC                 db    ? ;
.bss:000000000021D8ED                 db    ? ;
.bss:000000000021D8EE                 db    ? ;
.bss:000000000021D8EF                 db    ? ;
.bss:000000000021D8F0                 db    ? ;
.bss:000000000021D8F1                 db    ? ;
.bss:000000000021D8F2                 db    ? ;
.bss:000000000021D8F3                 db    ? ;
.bss:000000000021D8F4                 db    ? ;
.bss:000000000021D8F5                 db    ? ;
.bss:000000000021D8F6                 db    ? ;
.bss:000000000021D8F7                 db    ? ;
.bss:000000000021D8F8                 db    ? ;
.bss:000000000021D8F9                 db    ? ;
.bss:000000000021D8FA                 db    ? ;
.bss:000000000021D8FB                 db    ? ;
.bss:000000000021D8FC                 db    ? ;
.bss:000000000021D8FD                 db    ? ;
.bss:000000000021D8FE                 db    ? ;
.bss:000000000021D8FF                 db    ? ;
.bss:000000000021D900                 db    ? ;
.bss:000000000021D901                 db    ? ;
.bss:000000000021D902                 db    ? ;
.bss:000000000021D903                 db    ? ;
.bss:000000000021D904                 db    ? ;
.bss:000000000021D905                 db    ? ;
.bss:000000000021D906                 db    ? ;
.bss:000000000021D907                 db    ? ;
.bss:000000000021D908                 db    ? ;
.bss:000000000021D909                 db    ? ;
.bss:000000000021D90A                 db    ? ;
.bss:000000000021D90B                 db    ? ;
.bss:000000000021D90C                 db    ? ;
.bss:000000000021D90D                 db    ? ;
.bss:000000000021D90E                 db    ? ;
.bss:000000000021D90F                 db    ? ;
.bss:000000000021D910                 db    ? ;
.bss:000000000021D911                 db    ? ;
.bss:000000000021D912                 db    ? ;
.bss:000000000021D913                 db    ? ;
.bss:000000000021D914                 db    ? ;
.bss:000000000021D915                 db    ? ;
.bss:000000000021D916                 db    ? ;
.bss:000000000021D917                 db    ? ;
.bss:000000000021D918                 db    ? ;
.bss:000000000021D919                 db    ? ;
.bss:000000000021D91A                 db    ? ;
.bss:000000000021D91B                 db    ? ;
.bss:000000000021D91C                 db    ? ;
.bss:000000000021D91D                 db    ? ;
.bss:000000000021D91E                 db    ? ;
.bss:000000000021D91F                 db    ? ;
.bss:000000000021D920                 db    ? ;
.bss:000000000021D921                 db    ? ;
.bss:000000000021D922                 db    ? ;
.bss:000000000021D923                 db    ? ;
.bss:000000000021D924                 db    ? ;
.bss:000000000021D925                 db    ? ;
.bss:000000000021D926                 db    ? ;
.bss:000000000021D927                 db    ? ;
.bss:000000000021D928                 db    ? ;
.bss:000000000021D929                 db    ? ;
.bss:000000000021D92A                 db    ? ;
.bss:000000000021D92B                 db    ? ;
.bss:000000000021D92C                 db    ? ;
.bss:000000000021D92D                 db    ? ;
.bss:000000000021D92E                 db    ? ;
.bss:000000000021D92F                 db    ? ;
.bss:000000000021D930                 db    ? ;
.bss:000000000021D931                 db    ? ;
.bss:000000000021D932                 db    ? ;
.bss:000000000021D933                 db    ? ;
.bss:000000000021D934                 db    ? ;
.bss:000000000021D935                 db    ? ;
.bss:000000000021D936                 db    ? ;
.bss:000000000021D937                 db    ? ;
.bss:000000000021D938                 db    ? ;
.bss:000000000021D939                 db    ? ;
.bss:000000000021D93A                 db    ? ;
.bss:000000000021D93B                 db    ? ;
.bss:000000000021D93C                 db    ? ;
.bss:000000000021D93D                 db    ? ;
.bss:000000000021D93E                 db    ? ;
.bss:000000000021D93F                 db    ? ;
.bss:000000000021D940                 db    ? ;
.bss:000000000021D941                 db    ? ;
.bss:000000000021D942                 db    ? ;
.bss:000000000021D943                 db    ? ;
.bss:000000000021D944                 db    ? ;
.bss:000000000021D945                 db    ? ;
.bss:000000000021D946                 db    ? ;
.bss:000000000021D947                 db    ? ;
.bss:000000000021D948                 db    ? ;
.bss:000000000021D949                 db    ? ;
.bss:000000000021D94A                 db    ? ;
.bss:000000000021D94B                 db    ? ;
.bss:000000000021D94C                 db    ? ;
.bss:000000000021D94D                 db    ? ;
.bss:000000000021D94E                 db    ? ;
.bss:000000000021D94F                 db    ? ;
.bss:000000000021D950                 db    ? ;
.bss:000000000021D951                 db    ? ;
.bss:000000000021D952                 db    ? ;
.bss:000000000021D953                 db    ? ;
.bss:000000000021D954                 db    ? ;
.bss:000000000021D955                 db    ? ;
.bss:000000000021D956                 db    ? ;
.bss:000000000021D957                 db    ? ;
.bss:000000000021D958                 db    ? ;
.bss:000000000021D959                 db    ? ;
.bss:000000000021D95A                 db    ? ;
.bss:000000000021D95B                 db    ? ;
.bss:000000000021D95C                 db    ? ;
.bss:000000000021D95D                 db    ? ;
.bss:000000000021D95E                 db    ? ;
.bss:000000000021D95F                 db    ? ;
.bss:000000000021D960                 db    ? ;
.bss:000000000021D961                 db    ? ;
.bss:000000000021D962                 db    ? ;
.bss:000000000021D963                 db    ? ;
.bss:000000000021D964                 db    ? ;
.bss:000000000021D965                 db    ? ;
.bss:000000000021D966                 db    ? ;
.bss:000000000021D967                 db    ? ;
.bss:000000000021D968                 db    ? ;
.bss:000000000021D969                 db    ? ;
.bss:000000000021D96A                 db    ? ;
.bss:000000000021D96B                 db    ? ;
.bss:000000000021D96C                 db    ? ;
.bss:000000000021D96D                 db    ? ;
.bss:000000000021D96E                 db    ? ;
.bss:000000000021D96F                 db    ? ;
.bss:000000000021D970                 db    ? ;
.bss:000000000021D971                 db    ? ;
.bss:000000000021D972                 db    ? ;
.bss:000000000021D973                 db    ? ;
.bss:000000000021D974                 db    ? ;
.bss:000000000021D975                 db    ? ;
.bss:000000000021D976                 db    ? ;
.bss:000000000021D977                 db    ? ;
.bss:000000000021D978                 db    ? ;
.bss:000000000021D979                 db    ? ;
.bss:000000000021D97A                 db    ? ;
.bss:000000000021D97B                 db    ? ;
.bss:000000000021D97C                 db    ? ;
.bss:000000000021D97D                 db    ? ;
.bss:000000000021D97E                 db    ? ;
.bss:000000000021D97F                 db    ? ;
.bss:000000000021D980                 db    ? ;
.bss:000000000021D981                 db    ? ;
.bss:000000000021D982                 db    ? ;
.bss:000000000021D983                 db    ? ;
.bss:000000000021D984                 db    ? ;
.bss:000000000021D985                 db    ? ;
.bss:000000000021D986                 db    ? ;
.bss:000000000021D987                 db    ? ;
.bss:000000000021D988                 db    ? ;
.bss:000000000021D989                 db    ? ;
.bss:000000000021D98A                 db    ? ;
.bss:000000000021D98B                 db    ? ;
.bss:000000000021D98C                 db    ? ;
.bss:000000000021D98D                 db    ? ;
.bss:000000000021D98E                 db    ? ;
.bss:000000000021D98F                 db    ? ;
.bss:000000000021D990                 db    ? ;
.bss:000000000021D991                 db    ? ;
.bss:000000000021D992                 db    ? ;
.bss:000000000021D993                 db    ? ;
.bss:000000000021D994                 db    ? ;
.bss:000000000021D995                 db    ? ;
.bss:000000000021D996                 db    ? ;
.bss:000000000021D997                 db    ? ;
.bss:000000000021D998                 db    ? ;
.bss:000000000021D999                 db    ? ;
.bss:000000000021D99A                 db    ? ;
.bss:000000000021D99B                 db    ? ;
.bss:000000000021D99C                 db    ? ;
.bss:000000000021D99D                 db    ? ;
.bss:000000000021D99E                 db    ? ;
.bss:000000000021D99F                 db    ? ;
.bss:000000000021D9A0                 db    ? ;
.bss:000000000021D9A1                 db    ? ;
.bss:000000000021D9A2                 db    ? ;
.bss:000000000021D9A3                 db    ? ;
.bss:000000000021D9A4                 db    ? ;
.bss:000000000021D9A5                 db    ? ;
.bss:000000000021D9A6                 db    ? ;
.bss:000000000021D9A7                 db    ? ;
.bss:000000000021D9A8                 db    ? ;
.bss:000000000021D9A9                 db    ? ;
.bss:000000000021D9AA                 db    ? ;
.bss:000000000021D9AB                 db    ? ;
.bss:000000000021D9AC                 db    ? ;
.bss:000000000021D9AD                 db    ? ;
.bss:000000000021D9AE                 db    ? ;
.bss:000000000021D9AF                 db    ? ;
.bss:000000000021D9B0                 db    ? ;
.bss:000000000021D9B1                 db    ? ;
.bss:000000000021D9B2                 db    ? ;
.bss:000000000021D9B3                 db    ? ;
.bss:000000000021D9B4                 db    ? ;
.bss:000000000021D9B5                 db    ? ;
.bss:000000000021D9B6                 db    ? ;
.bss:000000000021D9B7                 db    ? ;
.bss:000000000021D9B8                 db    ? ;
.bss:000000000021D9B9                 db    ? ;
.bss:000000000021D9BA                 db    ? ;
.bss:000000000021D9BB                 db    ? ;
.bss:000000000021D9BC                 db    ? ;
.bss:000000000021D9BD                 db    ? ;
.bss:000000000021D9BE                 db    ? ;
.bss:000000000021D9BF                 db    ? ;
.bss:000000000021D9C0                 db    ? ;
.bss:000000000021D9C1                 db    ? ;
.bss:000000000021D9C2                 db    ? ;
.bss:000000000021D9C3                 db    ? ;
.bss:000000000021D9C4                 db    ? ;
.bss:000000000021D9C5                 db    ? ;
.bss:000000000021D9C6                 db    ? ;
.bss:000000000021D9C7                 db    ? ;
.bss:000000000021D9C8                 db    ? ;
.bss:000000000021D9C9                 db    ? ;
.bss:000000000021D9CA                 db    ? ;
.bss:000000000021D9CB                 db    ? ;
.bss:000000000021D9CC                 db    ? ;
.bss:000000000021D9CD                 db    ? ;
.bss:000000000021D9CE                 db    ? ;
.bss:000000000021D9CF                 db    ? ;
.bss:000000000021D9D0                 db    ? ;
.bss:000000000021D9D1                 db    ? ;
.bss:000000000021D9D2                 db    ? ;
.bss:000000000021D9D3                 db    ? ;
.bss:000000000021D9D4                 db    ? ;
.bss:000000000021D9D5                 db    ? ;
.bss:000000000021D9D6                 db    ? ;
.bss:000000000021D9D7                 db    ? ;
.bss:000000000021D9D8                 db    ? ;
.bss:000000000021D9D9                 db    ? ;
.bss:000000000021D9DA                 db    ? ;
.bss:000000000021D9DB                 db    ? ;
.bss:000000000021D9DC                 db    ? ;
.bss:000000000021D9DD                 db    ? ;
.bss:000000000021D9DE                 db    ? ;
.bss:000000000021D9DF                 db    ? ;
.bss:000000000021D9E0                 db    ? ;
.bss:000000000021D9E1                 db    ? ;
.bss:000000000021D9E2                 db    ? ;
.bss:000000000021D9E3                 db    ? ;
.bss:000000000021D9E4                 db    ? ;
.bss:000000000021D9E5                 db    ? ;
.bss:000000000021D9E6                 db    ? ;
.bss:000000000021D9E7                 db    ? ;
.bss:000000000021D9E8                 db    ? ;
.bss:000000000021D9E9                 db    ? ;
.bss:000000000021D9EA                 db    ? ;
.bss:000000000021D9EB                 db    ? ;
.bss:000000000021D9EC                 db    ? ;
.bss:000000000021D9ED                 db    ? ;
.bss:000000000021D9EE                 db    ? ;
.bss:000000000021D9EF                 db    ? ;
.bss:000000000021D9F0                 db    ? ;
.bss:000000000021D9F1                 db    ? ;
.bss:000000000021D9F2                 db    ? ;
.bss:000000000021D9F3                 db    ? ;
.bss:000000000021D9F4                 db    ? ;
.bss:000000000021D9F5                 db    ? ;
.bss:000000000021D9F6                 db    ? ;
.bss:000000000021D9F7                 db    ? ;
.bss:000000000021D9F8                 db    ? ;
.bss:000000000021D9F9                 db    ? ;
.bss:000000000021D9FA                 db    ? ;
.bss:000000000021D9FB                 db    ? ;
.bss:000000000021D9FC                 db    ? ;
.bss:000000000021D9FD                 db    ? ;
.bss:000000000021D9FE                 db    ? ;
.bss:000000000021D9FF                 db    ? ;
.bss:000000000021DA00                 db    ? ;
.bss:000000000021DA01                 db    ? ;
.bss:000000000021DA02                 db    ? ;
.bss:000000000021DA03                 db    ? ;
.bss:000000000021DA04                 db    ? ;
.bss:000000000021DA05                 db    ? ;
.bss:000000000021DA06                 db    ? ;
.bss:000000000021DA07                 db    ? ;
.bss:000000000021DA08                 db    ? ;
.bss:000000000021DA09                 db    ? ;
.bss:000000000021DA0A                 db    ? ;
.bss:000000000021DA0B                 db    ? ;
.bss:000000000021DA0C                 db    ? ;
.bss:000000000021DA0D                 db    ? ;
.bss:000000000021DA0E                 db    ? ;
.bss:000000000021DA0F                 db    ? ;
.bss:000000000021DA10                 db    ? ;
.bss:000000000021DA11                 db    ? ;
.bss:000000000021DA12                 db    ? ;
.bss:000000000021DA13                 db    ? ;
.bss:000000000021DA14                 db    ? ;
.bss:000000000021DA15                 db    ? ;
.bss:000000000021DA16                 db    ? ;
.bss:000000000021DA17                 db    ? ;
.bss:000000000021DA18                 db    ? ;
.bss:000000000021DA19                 db    ? ;
.bss:000000000021DA1A                 db    ? ;
.bss:000000000021DA1B                 db    ? ;
.bss:000000000021DA1C                 db    ? ;
.bss:000000000021DA1D                 db    ? ;
.bss:000000000021DA1E                 db    ? ;
.bss:000000000021DA1F                 db    ? ;
.bss:000000000021DA20                 db    ? ;
.bss:000000000021DA21                 db    ? ;
.bss:000000000021DA22                 db    ? ;
.bss:000000000021DA23                 db    ? ;
.bss:000000000021DA24                 db    ? ;
.bss:000000000021DA25                 db    ? ;
.bss:000000000021DA26                 db    ? ;
.bss:000000000021DA27                 db    ? ;
.bss:000000000021DA28                 db    ? ;
.bss:000000000021DA29                 db    ? ;
.bss:000000000021DA2A                 db    ? ;
.bss:000000000021DA2B                 db    ? ;
.bss:000000000021DA2C                 db    ? ;
.bss:000000000021DA2D                 db    ? ;
.bss:000000000021DA2E                 db    ? ;
.bss:000000000021DA2F                 db    ? ;
.bss:000000000021DA30                 db    ? ;
.bss:000000000021DA31                 db    ? ;
.bss:000000000021DA32                 db    ? ;
.bss:000000000021DA33                 db    ? ;
.bss:000000000021DA34                 db    ? ;
.bss:000000000021DA35                 db    ? ;
.bss:000000000021DA36                 db    ? ;
.bss:000000000021DA37                 db    ? ;
.bss:000000000021DA38                 db    ? ;
.bss:000000000021DA39                 db    ? ;
.bss:000000000021DA3A                 db    ? ;
.bss:000000000021DA3B                 db    ? ;
.bss:000000000021DA3C                 db    ? ;
.bss:000000000021DA3D                 db    ? ;
.bss:000000000021DA3E                 db    ? ;
.bss:000000000021DA3F                 db    ? ;
.bss:000000000021DA40                 db    ? ;
.bss:000000000021DA41                 db    ? ;
.bss:000000000021DA42                 db    ? ;
.bss:000000000021DA43                 db    ? ;
.bss:000000000021DA44                 db    ? ;
.bss:000000000021DA45                 db    ? ;
.bss:000000000021DA46                 db    ? ;
.bss:000000000021DA47                 db    ? ;
.bss:000000000021DA48                 db    ? ;
.bss:000000000021DA49                 db    ? ;
.bss:000000000021DA4A                 db    ? ;
.bss:000000000021DA4B                 db    ? ;
.bss:000000000021DA4C                 db    ? ;
.bss:000000000021DA4D                 db    ? ;
.bss:000000000021DA4E                 db    ? ;
.bss:000000000021DA4F                 db    ? ;
.bss:000000000021DA50                 db    ? ;
.bss:000000000021DA51                 db    ? ;
.bss:000000000021DA52                 db    ? ;
.bss:000000000021DA53                 db    ? ;
.bss:000000000021DA54                 db    ? ;
.bss:000000000021DA55                 db    ? ;
.bss:000000000021DA56                 db    ? ;
.bss:000000000021DA57                 db    ? ;
.bss:000000000021DA58                 db    ? ;
.bss:000000000021DA59                 db    ? ;
.bss:000000000021DA5A                 db    ? ;
.bss:000000000021DA5B                 db    ? ;
.bss:000000000021DA5C                 db    ? ;
.bss:000000000021DA5D                 db    ? ;
.bss:000000000021DA5E                 db    ? ;
.bss:000000000021DA5F                 db    ? ;
.bss:000000000021DA60                 db    ? ;
.bss:000000000021DA61                 db    ? ;
.bss:000000000021DA62                 db    ? ;
.bss:000000000021DA63                 db    ? ;
.bss:000000000021DA64                 db    ? ;
.bss:000000000021DA65                 db    ? ;
.bss:000000000021DA66                 db    ? ;
.bss:000000000021DA67                 db    ? ;
.bss:000000000021DA68                 db    ? ;
.bss:000000000021DA69                 db    ? ;
.bss:000000000021DA6A                 db    ? ;
.bss:000000000021DA6B                 db    ? ;
.bss:000000000021DA6C                 db    ? ;
.bss:000000000021DA6D                 db    ? ;
.bss:000000000021DA6E                 db    ? ;
.bss:000000000021DA6F                 db    ? ;
.bss:000000000021DA70                 db    ? ;
.bss:000000000021DA71                 db    ? ;
.bss:000000000021DA72                 db    ? ;
.bss:000000000021DA73                 db    ? ;
.bss:000000000021DA74                 db    ? ;
.bss:000000000021DA75                 db    ? ;
.bss:000000000021DA76                 db    ? ;
.bss:000000000021DA77                 db    ? ;
.bss:000000000021DA78                 db    ? ;
.bss:000000000021DA79                 db    ? ;
.bss:000000000021DA7A                 db    ? ;
.bss:000000000021DA7B                 db    ? ;
.bss:000000000021DA7C                 db    ? ;
.bss:000000000021DA7D                 db    ? ;
.bss:000000000021DA7E                 db    ? ;
.bss:000000000021DA7F                 db    ? ;
.bss:000000000021DA80                 db    ? ;
.bss:000000000021DA81                 db    ? ;
.bss:000000000021DA82                 db    ? ;
.bss:000000000021DA83                 db    ? ;
.bss:000000000021DA84                 db    ? ;
.bss:000000000021DA85                 db    ? ;
.bss:000000000021DA86                 db    ? ;
.bss:000000000021DA87                 db    ? ;
.bss:000000000021DA88                 db    ? ;
.bss:000000000021DA89                 db    ? ;
.bss:000000000021DA8A                 db    ? ;
.bss:000000000021DA8B                 db    ? ;
.bss:000000000021DA8C                 db    ? ;
.bss:000000000021DA8D                 db    ? ;
.bss:000000000021DA8E                 db    ? ;
.bss:000000000021DA8F                 db    ? ;
.bss:000000000021DA90                 db    ? ;
.bss:000000000021DA91                 db    ? ;
.bss:000000000021DA92                 db    ? ;
.bss:000000000021DA93                 db    ? ;
.bss:000000000021DA94                 db    ? ;
.bss:000000000021DA95                 db    ? ;
.bss:000000000021DA96                 db    ? ;
.bss:000000000021DA97                 db    ? ;
.bss:000000000021DA98                 db    ? ;
.bss:000000000021DA99                 db    ? ;
.bss:000000000021DA9A                 db    ? ;
.bss:000000000021DA9B                 db    ? ;
.bss:000000000021DA9C                 db    ? ;
.bss:000000000021DA9D                 db    ? ;
.bss:000000000021DA9E                 db    ? ;
.bss:000000000021DA9F                 db    ? ;
.bss:000000000021DAA0                 db    ? ;
.bss:000000000021DAA1                 db    ? ;
.bss:000000000021DAA2                 db    ? ;
.bss:000000000021DAA3                 db    ? ;
.bss:000000000021DAA4                 db    ? ;
.bss:000000000021DAA5                 db    ? ;
.bss:000000000021DAA6                 db    ? ;
.bss:000000000021DAA7                 db    ? ;
.bss:000000000021DAA8                 db    ? ;
.bss:000000000021DAA9                 db    ? ;
.bss:000000000021DAAA                 db    ? ;
.bss:000000000021DAAB                 db    ? ;
.bss:000000000021DAAC                 db    ? ;
.bss:000000000021DAAD                 db    ? ;
.bss:000000000021DAAE                 db    ? ;
.bss:000000000021DAAF                 db    ? ;
.bss:000000000021DAB0                 db    ? ;
.bss:000000000021DAB1                 db    ? ;
.bss:000000000021DAB2                 db    ? ;
.bss:000000000021DAB3                 db    ? ;
.bss:000000000021DAB4                 db    ? ;
.bss:000000000021DAB5                 db    ? ;
.bss:000000000021DAB6                 db    ? ;
.bss:000000000021DAB7                 db    ? ;
.bss:000000000021DAB8                 db    ? ;
.bss:000000000021DAB9                 db    ? ;
.bss:000000000021DABA                 db    ? ;
.bss:000000000021DABB                 db    ? ;
.bss:000000000021DABC                 db    ? ;
.bss:000000000021DABD                 db    ? ;
.bss:000000000021DABE                 db    ? ;
.bss:000000000021DABF                 db    ? ;
.bss:000000000021DAC0                 db    ? ;
.bss:000000000021DAC1                 db    ? ;
.bss:000000000021DAC2                 db    ? ;
.bss:000000000021DAC3                 db    ? ;
.bss:000000000021DAC4                 db    ? ;
.bss:000000000021DAC5                 db    ? ;
.bss:000000000021DAC6                 db    ? ;
.bss:000000000021DAC7                 db    ? ;
.bss:000000000021DAC8                 db    ? ;
.bss:000000000021DAC9                 db    ? ;
.bss:000000000021DACA                 db    ? ;
.bss:000000000021DACB                 db    ? ;
.bss:000000000021DACC                 db    ? ;
.bss:000000000021DACD                 db    ? ;
.bss:000000000021DACE                 db    ? ;
.bss:000000000021DACF                 db    ? ;
.bss:000000000021DAD0                 db    ? ;
.bss:000000000021DAD1                 db    ? ;
.bss:000000000021DAD2                 db    ? ;
.bss:000000000021DAD3                 db    ? ;
.bss:000000000021DAD4                 db    ? ;
.bss:000000000021DAD5                 db    ? ;
.bss:000000000021DAD6                 db    ? ;
.bss:000000000021DAD7                 db    ? ;
.bss:000000000021DAD8                 db    ? ;
.bss:000000000021DAD9                 db    ? ;
.bss:000000000021DADA                 db    ? ;
.bss:000000000021DADB                 db    ? ;
.bss:000000000021DADC                 db    ? ;
.bss:000000000021DADD                 db    ? ;
.bss:000000000021DADE                 db    ? ;
.bss:000000000021DADF                 db    ? ;
.bss:000000000021DAE0                 db    ? ;
.bss:000000000021DAE1                 db    ? ;
.bss:000000000021DAE2                 db    ? ;
.bss:000000000021DAE3                 db    ? ;
.bss:000000000021DAE4                 db    ? ;
.bss:000000000021DAE5                 db    ? ;
.bss:000000000021DAE6                 db    ? ;
.bss:000000000021DAE7                 db    ? ;
.bss:000000000021DAE8                 db    ? ;
.bss:000000000021DAE9                 db    ? ;
.bss:000000000021DAEA                 db    ? ;
.bss:000000000021DAEB                 db    ? ;
.bss:000000000021DAEC                 db    ? ;
.bss:000000000021DAED                 db    ? ;
.bss:000000000021DAEE                 db    ? ;
.bss:000000000021DAEF                 db    ? ;
.bss:000000000021DAF0                 db    ? ;
.bss:000000000021DAF1                 db    ? ;
.bss:000000000021DAF2                 db    ? ;
.bss:000000000021DAF3                 db    ? ;
.bss:000000000021DAF4                 db    ? ;
.bss:000000000021DAF5                 db    ? ;
.bss:000000000021DAF6                 db    ? ;
.bss:000000000021DAF7                 db    ? ;
.bss:000000000021DAF8                 db    ? ;
.bss:000000000021DAF9                 db    ? ;
.bss:000000000021DAFA                 db    ? ;
.bss:000000000021DAFB                 db    ? ;
.bss:000000000021DAFC                 db    ? ;
.bss:000000000021DAFD                 db    ? ;
.bss:000000000021DAFE                 db    ? ;
.bss:000000000021DAFF                 db    ? ;
.bss:000000000021DB00                 db    ? ;
.bss:000000000021DB01                 db    ? ;
.bss:000000000021DB02                 db    ? ;
.bss:000000000021DB03                 db    ? ;
.bss:000000000021DB04                 db    ? ;
.bss:000000000021DB05                 db    ? ;
.bss:000000000021DB06                 db    ? ;
.bss:000000000021DB07                 db    ? ;
.bss:000000000021DB08                 db    ? ;
.bss:000000000021DB09                 db    ? ;
.bss:000000000021DB0A                 db    ? ;
.bss:000000000021DB0B                 db    ? ;
.bss:000000000021DB0C                 db    ? ;
.bss:000000000021DB0D                 db    ? ;
.bss:000000000021DB0E                 db    ? ;
.bss:000000000021DB0F                 db    ? ;
.bss:000000000021DB10                 db    ? ;
.bss:000000000021DB11                 db    ? ;
.bss:000000000021DB12                 db    ? ;
.bss:000000000021DB13                 db    ? ;
.bss:000000000021DB14                 db    ? ;
.bss:000000000021DB15                 db    ? ;
.bss:000000000021DB16                 db    ? ;
.bss:000000000021DB17                 db    ? ;
.bss:000000000021DB18                 db    ? ;
.bss:000000000021DB19                 db    ? ;
.bss:000000000021DB1A                 db    ? ;
.bss:000000000021DB1B                 db    ? ;
.bss:000000000021DB1C                 db    ? ;
.bss:000000000021DB1D                 db    ? ;
.bss:000000000021DB1E                 db    ? ;
.bss:000000000021DB1F                 db    ? ;
.bss:000000000021DB20                 db    ? ;
.bss:000000000021DB21                 db    ? ;
.bss:000000000021DB22                 db    ? ;
.bss:000000000021DB23                 db    ? ;
.bss:000000000021DB24                 db    ? ;
.bss:000000000021DB25                 db    ? ;
.bss:000000000021DB26                 db    ? ;
.bss:000000000021DB27                 db    ? ;
.bss:000000000021DB28                 db    ? ;
.bss:000000000021DB29                 db    ? ;
.bss:000000000021DB2A                 db    ? ;
.bss:000000000021DB2B                 db    ? ;
.bss:000000000021DB2C                 db    ? ;
.bss:000000000021DB2D                 db    ? ;
.bss:000000000021DB2E                 db    ? ;
.bss:000000000021DB2F                 db    ? ;
.bss:000000000021DB30                 db    ? ;
.bss:000000000021DB31                 db    ? ;
.bss:000000000021DB32                 db    ? ;
.bss:000000000021DB33                 db    ? ;
.bss:000000000021DB34                 db    ? ;
.bss:000000000021DB35                 db    ? ;
.bss:000000000021DB36                 db    ? ;
.bss:000000000021DB37                 db    ? ;
.bss:000000000021DB38                 db    ? ;
.bss:000000000021DB39                 db    ? ;
.bss:000000000021DB3A                 db    ? ;
.bss:000000000021DB3B                 db    ? ;
.bss:000000000021DB3C                 db    ? ;
.bss:000000000021DB3D                 db    ? ;
.bss:000000000021DB3E                 db    ? ;
.bss:000000000021DB3F                 db    ? ;
.bss:000000000021DB40                 db    ? ;
.bss:000000000021DB41                 db    ? ;
.bss:000000000021DB42                 db    ? ;
.bss:000000000021DB43                 db    ? ;
.bss:000000000021DB44                 db    ? ;
.bss:000000000021DB45                 db    ? ;
.bss:000000000021DB46                 db    ? ;
.bss:000000000021DB47                 db    ? ;
.bss:000000000021DB48                 db    ? ;
.bss:000000000021DB49                 db    ? ;
.bss:000000000021DB4A                 db    ? ;
.bss:000000000021DB4B                 db    ? ;
.bss:000000000021DB4C                 db    ? ;
.bss:000000000021DB4D                 db    ? ;
.bss:000000000021DB4E                 db    ? ;
.bss:000000000021DB4F                 db    ? ;
.bss:000000000021DB50                 db    ? ;
.bss:000000000021DB51                 db    ? ;
.bss:000000000021DB52                 db    ? ;
.bss:000000000021DB53                 db    ? ;
.bss:000000000021DB54                 db    ? ;
.bss:000000000021DB55                 db    ? ;
.bss:000000000021DB56                 db    ? ;
.bss:000000000021DB57                 db    ? ;
.bss:000000000021DB58                 db    ? ;
.bss:000000000021DB59                 db    ? ;
.bss:000000000021DB5A                 db    ? ;
.bss:000000000021DB5B                 db    ? ;
.bss:000000000021DB5C                 db    ? ;
.bss:000000000021DB5D                 db    ? ;
.bss:000000000021DB5E                 db    ? ;
.bss:000000000021DB5F                 db    ? ;
.bss:000000000021DB60                 db    ? ;
.bss:000000000021DB61                 db    ? ;
.bss:000000000021DB62                 db    ? ;
.bss:000000000021DB63                 db    ? ;
.bss:000000000021DB64                 db    ? ;
.bss:000000000021DB65                 db    ? ;
.bss:000000000021DB66                 db    ? ;
.bss:000000000021DB67                 db    ? ;
.bss:000000000021DB68                 db    ? ;
.bss:000000000021DB69                 db    ? ;
.bss:000000000021DB6A                 db    ? ;
.bss:000000000021DB6B                 db    ? ;
.bss:000000000021DB6C                 db    ? ;
.bss:000000000021DB6D                 db    ? ;
.bss:000000000021DB6E                 db    ? ;
.bss:000000000021DB6F                 db    ? ;
.bss:000000000021DB70                 db    ? ;
.bss:000000000021DB71                 db    ? ;
.bss:000000000021DB72                 db    ? ;
.bss:000000000021DB73                 db    ? ;
.bss:000000000021DB74                 db    ? ;
.bss:000000000021DB75                 db    ? ;
.bss:000000000021DB76                 db    ? ;
.bss:000000000021DB77                 db    ? ;
.bss:000000000021DB78                 db    ? ;
.bss:000000000021DB79                 db    ? ;
.bss:000000000021DB7A                 db    ? ;
.bss:000000000021DB7B                 db    ? ;
.bss:000000000021DB7C                 db    ? ;
.bss:000000000021DB7D                 db    ? ;
.bss:000000000021DB7E                 db    ? ;
.bss:000000000021DB7F                 db    ? ;
.bss:000000000021DB80                 db    ? ;
.bss:000000000021DB81                 db    ? ;
.bss:000000000021DB82                 db    ? ;
.bss:000000000021DB83                 db    ? ;
.bss:000000000021DB84                 db    ? ;
.bss:000000000021DB85                 db    ? ;
.bss:000000000021DB86                 db    ? ;
.bss:000000000021DB87                 db    ? ;
.bss:000000000021DB88                 db    ? ;
.bss:000000000021DB89                 db    ? ;
.bss:000000000021DB8A                 db    ? ;
.bss:000000000021DB8B                 db    ? ;
.bss:000000000021DB8C                 db    ? ;
.bss:000000000021DB8D                 db    ? ;
.bss:000000000021DB8E                 db    ? ;
.bss:000000000021DB8F                 db    ? ;
.bss:000000000021DB90                 db    ? ;
.bss:000000000021DB91                 db    ? ;
.bss:000000000021DB92                 db    ? ;
.bss:000000000021DB93                 db    ? ;
.bss:000000000021DB94                 db    ? ;
.bss:000000000021DB95                 db    ? ;
.bss:000000000021DB96                 db    ? ;
.bss:000000000021DB97                 db    ? ;
.bss:000000000021DB98                 db    ? ;
.bss:000000000021DB99                 db    ? ;
.bss:000000000021DB9A                 db    ? ;
.bss:000000000021DB9B                 db    ? ;
.bss:000000000021DB9C                 db    ? ;
.bss:000000000021DB9D                 db    ? ;
.bss:000000000021DB9E                 db    ? ;
.bss:000000000021DB9F                 db    ? ;
.bss:000000000021DBA0                 db    ? ;
.bss:000000000021DBA1                 db    ? ;
.bss:000000000021DBA2                 db    ? ;
.bss:000000000021DBA3                 db    ? ;
.bss:000000000021DBA4                 db    ? ;
.bss:000000000021DBA5                 db    ? ;
.bss:000000000021DBA6                 db    ? ;
.bss:000000000021DBA7                 db    ? ;
.bss:000000000021DBA8                 db    ? ;
.bss:000000000021DBA9                 db    ? ;
.bss:000000000021DBAA                 db    ? ;
.bss:000000000021DBAB                 db    ? ;
.bss:000000000021DBAC                 db    ? ;
.bss:000000000021DBAD                 db    ? ;
.bss:000000000021DBAE                 db    ? ;
.bss:000000000021DBAF                 db    ? ;
.bss:000000000021DBB0                 db    ? ;
.bss:000000000021DBB1                 db    ? ;
.bss:000000000021DBB2                 db    ? ;
.bss:000000000021DBB3                 db    ? ;
.bss:000000000021DBB4                 db    ? ;
.bss:000000000021DBB5                 db    ? ;
.bss:000000000021DBB6                 db    ? ;
.bss:000000000021DBB7                 db    ? ;
.bss:000000000021DBB8                 db    ? ;
.bss:000000000021DBB9                 db    ? ;
.bss:000000000021DBBA                 db    ? ;
.bss:000000000021DBBB                 db    ? ;
.bss:000000000021DBBC                 db    ? ;
.bss:000000000021DBBD                 db    ? ;
.bss:000000000021DBBE                 db    ? ;
.bss:000000000021DBBF                 db    ? ;
.bss:000000000021DBC0                 db    ? ;
.bss:000000000021DBC1                 db    ? ;
.bss:000000000021DBC2                 db    ? ;
.bss:000000000021DBC3                 db    ? ;
.bss:000000000021DBC4                 db    ? ;
.bss:000000000021DBC5                 db    ? ;
.bss:000000000021DBC6                 db    ? ;
.bss:000000000021DBC7                 db    ? ;
.bss:000000000021DBC8                 db    ? ;
.bss:000000000021DBC9                 db    ? ;
.bss:000000000021DBCA                 db    ? ;
.bss:000000000021DBCB                 db    ? ;
.bss:000000000021DBCC                 db    ? ;
.bss:000000000021DBCD                 db    ? ;
.bss:000000000021DBCE                 db    ? ;
.bss:000000000021DBCF                 db    ? ;
.bss:000000000021DBD0                 db    ? ;
.bss:000000000021DBD1                 db    ? ;
.bss:000000000021DBD2                 db    ? ;
.bss:000000000021DBD3                 db    ? ;
.bss:000000000021DBD4                 db    ? ;
.bss:000000000021DBD5                 db    ? ;
.bss:000000000021DBD6                 db    ? ;
.bss:000000000021DBD7                 db    ? ;
.bss:000000000021DBD8                 db    ? ;
.bss:000000000021DBD9                 db    ? ;
.bss:000000000021DBDA                 db    ? ;
.bss:000000000021DBDB                 db    ? ;
.bss:000000000021DBDC                 db    ? ;
.bss:000000000021DBDD                 db    ? ;
.bss:000000000021DBDE                 db    ? ;
.bss:000000000021DBDF                 db    ? ;
.bss:000000000021DBE0                 db    ? ;
.bss:000000000021DBE1                 db    ? ;
.bss:000000000021DBE2                 db    ? ;
.bss:000000000021DBE3                 db    ? ;
.bss:000000000021DBE4                 db    ? ;
.bss:000000000021DBE5                 db    ? ;
.bss:000000000021DBE6                 db    ? ;
.bss:000000000021DBE7                 db    ? ;
.bss:000000000021DBE8                 db    ? ;
.bss:000000000021DBE9                 db    ? ;
.bss:000000000021DBEA                 db    ? ;
.bss:000000000021DBEB                 db    ? ;
.bss:000000000021DBEC                 db    ? ;
.bss:000000000021DBED                 db    ? ;
.bss:000000000021DBEE                 db    ? ;
.bss:000000000021DBEF                 db    ? ;
.bss:000000000021DBF0                 db    ? ;
.bss:000000000021DBF1                 db    ? ;
.bss:000000000021DBF2                 db    ? ;
.bss:000000000021DBF3                 db    ? ;
.bss:000000000021DBF4                 db    ? ;
.bss:000000000021DBF5                 db    ? ;
.bss:000000000021DBF6                 db    ? ;
.bss:000000000021DBF7                 db    ? ;
.bss:000000000021DBF8                 db    ? ;
.bss:000000000021DBF9                 db    ? ;
.bss:000000000021DBFA                 db    ? ;
.bss:000000000021DBFB                 db    ? ;
.bss:000000000021DBFC                 db    ? ;
.bss:000000000021DBFD                 db    ? ;
.bss:000000000021DBFE                 db    ? ;
.bss:000000000021DBFF                 db    ? ;
.bss:000000000021DC00                 db    ? ;
.bss:000000000021DC01                 db    ? ;
.bss:000000000021DC02                 db    ? ;
.bss:000000000021DC03                 db    ? ;
.bss:000000000021DC04                 db    ? ;
.bss:000000000021DC05                 db    ? ;
.bss:000000000021DC06                 db    ? ;
.bss:000000000021DC07                 db    ? ;
.bss:000000000021DC08                 db    ? ;
.bss:000000000021DC09                 db    ? ;
.bss:000000000021DC0A                 db    ? ;
.bss:000000000021DC0B                 db    ? ;
.bss:000000000021DC0C                 db    ? ;
.bss:000000000021DC0D                 db    ? ;
.bss:000000000021DC0E                 db    ? ;
.bss:000000000021DC0F                 db    ? ;
.bss:000000000021DC10                 db    ? ;
.bss:000000000021DC11                 db    ? ;
.bss:000000000021DC12                 db    ? ;
.bss:000000000021DC13                 db    ? ;
.bss:000000000021DC14                 db    ? ;
.bss:000000000021DC15                 db    ? ;
.bss:000000000021DC16                 db    ? ;
.bss:000000000021DC17                 db    ? ;
.bss:000000000021DC18                 db    ? ;
.bss:000000000021DC19                 db    ? ;
.bss:000000000021DC1A                 db    ? ;
.bss:000000000021DC1B                 db    ? ;
.bss:000000000021DC1C                 db    ? ;
.bss:000000000021DC1D                 db    ? ;
.bss:000000000021DC1E                 db    ? ;
.bss:000000000021DC1F                 db    ? ;
.bss:000000000021DC20                 db    ? ;
.bss:000000000021DC21                 db    ? ;
.bss:000000000021DC22                 db    ? ;
.bss:000000000021DC23                 db    ? ;
.bss:000000000021DC24                 db    ? ;
.bss:000000000021DC25                 db    ? ;
.bss:000000000021DC26                 db    ? ;
.bss:000000000021DC27                 db    ? ;
.bss:000000000021DC28                 db    ? ;
.bss:000000000021DC29                 db    ? ;
.bss:000000000021DC2A                 db    ? ;
.bss:000000000021DC2B                 db    ? ;
.bss:000000000021DC2C                 db    ? ;
.bss:000000000021DC2D                 db    ? ;
.bss:000000000021DC2E                 db    ? ;
.bss:000000000021DC2F                 db    ? ;
.bss:000000000021DC30                 db    ? ;
.bss:000000000021DC31                 db    ? ;
.bss:000000000021DC32                 db    ? ;
.bss:000000000021DC33                 db    ? ;
.bss:000000000021DC34                 db    ? ;
.bss:000000000021DC35                 db    ? ;
.bss:000000000021DC36                 db    ? ;
.bss:000000000021DC37                 db    ? ;
.bss:000000000021DC38                 db    ? ;
.bss:000000000021DC39                 db    ? ;
.bss:000000000021DC3A                 db    ? ;
.bss:000000000021DC3B                 db    ? ;
.bss:000000000021DC3C                 db    ? ;
.bss:000000000021DC3D                 db    ? ;
.bss:000000000021DC3E                 db    ? ;
.bss:000000000021DC3F                 db    ? ;
.bss:000000000021DC40                 db    ? ;
.bss:000000000021DC41                 db    ? ;
.bss:000000000021DC42                 db    ? ;
.bss:000000000021DC43                 db    ? ;
.bss:000000000021DC44                 db    ? ;
.bss:000000000021DC45                 db    ? ;
.bss:000000000021DC46                 db    ? ;
.bss:000000000021DC47                 db    ? ;
.bss:000000000021DC48                 db    ? ;
.bss:000000000021DC49                 db    ? ;
.bss:000000000021DC4A                 db    ? ;
.bss:000000000021DC4B                 db    ? ;
.bss:000000000021DC4C                 db    ? ;
.bss:000000000021DC4D                 db    ? ;
.bss:000000000021DC4E                 db    ? ;
.bss:000000000021DC4F                 db    ? ;
.bss:000000000021DC50                 db    ? ;
.bss:000000000021DC51                 db    ? ;
.bss:000000000021DC52                 db    ? ;
.bss:000000000021DC53                 db    ? ;
.bss:000000000021DC54                 db    ? ;
.bss:000000000021DC55                 db    ? ;
.bss:000000000021DC56                 db    ? ;
.bss:000000000021DC57                 db    ? ;
.bss:000000000021DC58                 db    ? ;
.bss:000000000021DC59                 db    ? ;
.bss:000000000021DC5A                 db    ? ;
.bss:000000000021DC5B                 db    ? ;
.bss:000000000021DC5C                 db    ? ;
.bss:000000000021DC5D                 db    ? ;
.bss:000000000021DC5E                 db    ? ;
.bss:000000000021DC5F                 db    ? ;
.bss:000000000021DC60                 db    ? ;
.bss:000000000021DC61                 db    ? ;
.bss:000000000021DC62                 db    ? ;
.bss:000000000021DC63                 db    ? ;
.bss:000000000021DC64                 db    ? ;
.bss:000000000021DC65                 db    ? ;
.bss:000000000021DC66                 db    ? ;
.bss:000000000021DC67                 db    ? ;
.bss:000000000021DC68                 db    ? ;
.bss:000000000021DC69                 db    ? ;
.bss:000000000021DC6A                 db    ? ;
.bss:000000000021DC6B                 db    ? ;
.bss:000000000021DC6C                 db    ? ;
.bss:000000000021DC6D                 db    ? ;
.bss:000000000021DC6E                 db    ? ;
.bss:000000000021DC6F                 db    ? ;
.bss:000000000021DC70                 db    ? ;
.bss:000000000021DC71                 db    ? ;
.bss:000000000021DC72                 db    ? ;
.bss:000000000021DC73                 db    ? ;
.bss:000000000021DC74                 db    ? ;
.bss:000000000021DC75                 db    ? ;
.bss:000000000021DC76                 db    ? ;
.bss:000000000021DC77                 db    ? ;
.bss:000000000021DC78                 db    ? ;
.bss:000000000021DC79                 db    ? ;
.bss:000000000021DC7A                 db    ? ;
.bss:000000000021DC7B                 db    ? ;
.bss:000000000021DC7C                 db    ? ;
.bss:000000000021DC7D                 db    ? ;
.bss:000000000021DC7E                 db    ? ;
.bss:000000000021DC7F                 db    ? ;
.bss:000000000021DC80                 db    ? ;
.bss:000000000021DC81                 db    ? ;
.bss:000000000021DC82                 db    ? ;
.bss:000000000021DC83                 db    ? ;
.bss:000000000021DC84                 db    ? ;
.bss:000000000021DC85                 db    ? ;
.bss:000000000021DC86                 db    ? ;
.bss:000000000021DC87                 db    ? ;
.bss:000000000021DC88                 db    ? ;
.bss:000000000021DC89                 db    ? ;
.bss:000000000021DC8A                 db    ? ;
.bss:000000000021DC8B                 db    ? ;
.bss:000000000021DC8C                 db    ? ;
.bss:000000000021DC8D                 db    ? ;
.bss:000000000021DC8E                 db    ? ;
.bss:000000000021DC8F                 db    ? ;
.bss:000000000021DC90                 db    ? ;
.bss:000000000021DC91                 db    ? ;
.bss:000000000021DC92                 db    ? ;
.bss:000000000021DC93                 db    ? ;
.bss:000000000021DC94                 db    ? ;
.bss:000000000021DC95                 db    ? ;
.bss:000000000021DC96                 db    ? ;
.bss:000000000021DC97                 db    ? ;
.bss:000000000021DC98                 db    ? ;
.bss:000000000021DC99                 db    ? ;
.bss:000000000021DC9A                 db    ? ;
.bss:000000000021DC9B                 db    ? ;
.bss:000000000021DC9C                 db    ? ;
.bss:000000000021DC9D                 db    ? ;
.bss:000000000021DC9E                 db    ? ;
.bss:000000000021DC9F                 db    ? ;
.bss:000000000021DCA0                 db    ? ;
.bss:000000000021DCA1                 db    ? ;
.bss:000000000021DCA2                 db    ? ;
.bss:000000000021DCA3                 db    ? ;
.bss:000000000021DCA4                 db    ? ;
.bss:000000000021DCA5                 db    ? ;
.bss:000000000021DCA6                 db    ? ;
.bss:000000000021DCA7                 db    ? ;
.bss:000000000021DCA8                 db    ? ;
.bss:000000000021DCA9                 db    ? ;
.bss:000000000021DCAA                 db    ? ;
.bss:000000000021DCAB                 db    ? ;
.bss:000000000021DCAC                 db    ? ;
.bss:000000000021DCAD                 db    ? ;
.bss:000000000021DCAE                 db    ? ;
.bss:000000000021DCAF                 db    ? ;
.bss:000000000021DCB0                 db    ? ;
.bss:000000000021DCB1                 db    ? ;
.bss:000000000021DCB2                 db    ? ;
.bss:000000000021DCB3                 db    ? ;
.bss:000000000021DCB4                 db    ? ;
.bss:000000000021DCB5                 db    ? ;
.bss:000000000021DCB6                 db    ? ;
.bss:000000000021DCB7                 db    ? ;
.bss:000000000021DCB8                 db    ? ;
.bss:000000000021DCB9                 db    ? ;
.bss:000000000021DCBA                 db    ? ;
.bss:000000000021DCBB                 db    ? ;
.bss:000000000021DCBC                 db    ? ;
.bss:000000000021DCBD                 db    ? ;
.bss:000000000021DCBE                 db    ? ;
.bss:000000000021DCBF                 db    ? ;
.bss:000000000021DCC0                 db    ? ;
.bss:000000000021DCC1                 db    ? ;
.bss:000000000021DCC2                 db    ? ;
.bss:000000000021DCC3                 db    ? ;
.bss:000000000021DCC4                 db    ? ;
.bss:000000000021DCC5                 db    ? ;
.bss:000000000021DCC6                 db    ? ;
.bss:000000000021DCC7                 db    ? ;
.bss:000000000021DCC8                 db    ? ;
.bss:000000000021DCC9                 db    ? ;
.bss:000000000021DCCA                 db    ? ;
.bss:000000000021DCCB                 db    ? ;
.bss:000000000021DCCC                 db    ? ;
.bss:000000000021DCCD                 db    ? ;
.bss:000000000021DCCE                 db    ? ;
.bss:000000000021DCCF                 db    ? ;
.bss:000000000021DCD0                 db    ? ;
.bss:000000000021DCD1                 db    ? ;
.bss:000000000021DCD2                 db    ? ;
.bss:000000000021DCD3                 db    ? ;
.bss:000000000021DCD4                 db    ? ;
.bss:000000000021DCD5                 db    ? ;
.bss:000000000021DCD6                 db    ? ;
.bss:000000000021DCD7                 db    ? ;
.bss:000000000021DCD8                 db    ? ;
.bss:000000000021DCD9                 db    ? ;
.bss:000000000021DCDA                 db    ? ;
.bss:000000000021DCDB                 db    ? ;
.bss:000000000021DCDC                 db    ? ;
.bss:000000000021DCDD                 db    ? ;
.bss:000000000021DCDE                 db    ? ;
.bss:000000000021DCDF                 db    ? ;
.bss:000000000021DCE0                 db    ? ;
.bss:000000000021DCE1                 db    ? ;
.bss:000000000021DCE2                 db    ? ;
.bss:000000000021DCE3                 db    ? ;
.bss:000000000021DCE4                 db    ? ;
.bss:000000000021DCE5                 db    ? ;
.bss:000000000021DCE6                 db    ? ;
.bss:000000000021DCE7                 db    ? ;
.bss:000000000021DCE8                 db    ? ;
.bss:000000000021DCE9                 db    ? ;
.bss:000000000021DCEA                 db    ? ;
.bss:000000000021DCEB                 db    ? ;
.bss:000000000021DCEC                 db    ? ;
.bss:000000000021DCED                 db    ? ;
.bss:000000000021DCEE                 db    ? ;
.bss:000000000021DCEF                 db    ? ;
.bss:000000000021DCF0                 db    ? ;
.bss:000000000021DCF1                 db    ? ;
.bss:000000000021DCF2                 db    ? ;
.bss:000000000021DCF3                 db    ? ;
.bss:000000000021DCF4                 db    ? ;
.bss:000000000021DCF5                 db    ? ;
.bss:000000000021DCF6                 db    ? ;
.bss:000000000021DCF7                 db    ? ;
.bss:000000000021DCF8                 db    ? ;
.bss:000000000021DCF9                 db    ? ;
.bss:000000000021DCFA                 db    ? ;
.bss:000000000021DCFB                 db    ? ;
.bss:000000000021DCFC                 db    ? ;
.bss:000000000021DCFD                 db    ? ;
.bss:000000000021DCFE                 db    ? ;
.bss:000000000021DCFF                 db    ? ;
.bss:000000000021DD00                 db    ? ;
.bss:000000000021DD01                 db    ? ;
.bss:000000000021DD02                 db    ? ;
.bss:000000000021DD03                 db    ? ;
.bss:000000000021DD04                 db    ? ;
.bss:000000000021DD05                 db    ? ;
.bss:000000000021DD06                 db    ? ;
.bss:000000000021DD07                 db    ? ;
.bss:000000000021DD08                 db    ? ;
.bss:000000000021DD09                 db    ? ;
.bss:000000000021DD0A                 db    ? ;
.bss:000000000021DD0B                 db    ? ;
.bss:000000000021DD0C                 db    ? ;
.bss:000000000021DD0D                 db    ? ;
.bss:000000000021DD0E                 db    ? ;
.bss:000000000021DD0F                 db    ? ;
.bss:000000000021DD10                 db    ? ;
.bss:000000000021DD11                 db    ? ;
.bss:000000000021DD12                 db    ? ;
.bss:000000000021DD13                 db    ? ;
.bss:000000000021DD14                 db    ? ;
.bss:000000000021DD15                 db    ? ;
.bss:000000000021DD16                 db    ? ;
.bss:000000000021DD17                 db    ? ;
.bss:000000000021DD18                 db    ? ;
.bss:000000000021DD19                 db    ? ;
.bss:000000000021DD1A                 db    ? ;
.bss:000000000021DD1B                 db    ? ;
.bss:000000000021DD1C                 db    ? ;
.bss:000000000021DD1D                 db    ? ;
.bss:000000000021DD1E                 db    ? ;
.bss:000000000021DD1F                 db    ? ;
.bss:000000000021DD20                 db    ? ;
.bss:000000000021DD21                 db    ? ;
.bss:000000000021DD22                 db    ? ;
.bss:000000000021DD23                 db    ? ;
.bss:000000000021DD24                 db    ? ;
.bss:000000000021DD25                 db    ? ;
.bss:000000000021DD26                 db    ? ;
.bss:000000000021DD27                 db    ? ;
.bss:000000000021DD28                 db    ? ;
.bss:000000000021DD29                 db    ? ;
.bss:000000000021DD2A                 db    ? ;
.bss:000000000021DD2B                 db    ? ;
.bss:000000000021DD2C                 db    ? ;
.bss:000000000021DD2D                 db    ? ;
.bss:000000000021DD2E                 db    ? ;
.bss:000000000021DD2F                 db    ? ;
.bss:000000000021DD30                 db    ? ;
.bss:000000000021DD31                 db    ? ;
.bss:000000000021DD32                 db    ? ;
.bss:000000000021DD33                 db    ? ;
.bss:000000000021DD34                 db    ? ;
.bss:000000000021DD35                 db    ? ;
.bss:000000000021DD36                 db    ? ;
.bss:000000000021DD37                 db    ? ;
.bss:000000000021DD38                 db    ? ;
.bss:000000000021DD39                 db    ? ;
.bss:000000000021DD3A                 db    ? ;
.bss:000000000021DD3B                 db    ? ;
.bss:000000000021DD3C                 db    ? ;
.bss:000000000021DD3D                 db    ? ;
.bss:000000000021DD3E                 db    ? ;
.bss:000000000021DD3F                 db    ? ;
.bss:000000000021DD40                 db    ? ;
.bss:000000000021DD41                 db    ? ;
.bss:000000000021DD42                 db    ? ;
.bss:000000000021DD43                 db    ? ;
.bss:000000000021DD44                 db    ? ;
.bss:000000000021DD45                 db    ? ;
.bss:000000000021DD46                 db    ? ;
.bss:000000000021DD47                 db    ? ;
.bss:000000000021DD48                 db    ? ;
.bss:000000000021DD49                 db    ? ;
.bss:000000000021DD4A                 db    ? ;
.bss:000000000021DD4B                 db    ? ;
.bss:000000000021DD4C                 db    ? ;
.bss:000000000021DD4D                 db    ? ;
.bss:000000000021DD4E                 db    ? ;
.bss:000000000021DD4F                 db    ? ;
.bss:000000000021DD50                 db    ? ;
.bss:000000000021DD51                 db    ? ;
.bss:000000000021DD52                 db    ? ;
.bss:000000000021DD53                 db    ? ;
.bss:000000000021DD54                 db    ? ;
.bss:000000000021DD55                 db    ? ;
.bss:000000000021DD56                 db    ? ;
.bss:000000000021DD57                 db    ? ;
.bss:000000000021DD58                 db    ? ;
.bss:000000000021DD59                 db    ? ;
.bss:000000000021DD5A                 db    ? ;
.bss:000000000021DD5B                 db    ? ;
.bss:000000000021DD5C                 db    ? ;
.bss:000000000021DD5D                 db    ? ;
.bss:000000000021DD5E                 db    ? ;
.bss:000000000021DD5F                 db    ? ;
.bss:000000000021DD60                 db    ? ;
.bss:000000000021DD61                 db    ? ;
.bss:000000000021DD62                 db    ? ;
.bss:000000000021DD63                 db    ? ;
.bss:000000000021DD64                 db    ? ;
.bss:000000000021DD65                 db    ? ;
.bss:000000000021DD66                 db    ? ;
.bss:000000000021DD67                 db    ? ;
.bss:000000000021DD68                 db    ? ;
.bss:000000000021DD69                 db    ? ;
.bss:000000000021DD6A                 db    ? ;
.bss:000000000021DD6B                 db    ? ;
.bss:000000000021DD6C                 db    ? ;
.bss:000000000021DD6D                 db    ? ;
.bss:000000000021DD6E                 db    ? ;
.bss:000000000021DD6F                 db    ? ;
.bss:000000000021DD70                 db    ? ;
.bss:000000000021DD71                 db    ? ;
.bss:000000000021DD72                 db    ? ;
.bss:000000000021DD73                 db    ? ;
.bss:000000000021DD74                 db    ? ;
.bss:000000000021DD75                 db    ? ;
.bss:000000000021DD76                 db    ? ;
.bss:000000000021DD77                 db    ? ;
.bss:000000000021DD78                 db    ? ;
.bss:000000000021DD79                 db    ? ;
.bss:000000000021DD7A                 db    ? ;
.bss:000000000021DD7B                 db    ? ;
.bss:000000000021DD7C                 db    ? ;
.bss:000000000021DD7D                 db    ? ;
.bss:000000000021DD7E                 db    ? ;
.bss:000000000021DD7F                 db    ? ;
.bss:000000000021DD80                 db    ? ;
.bss:000000000021DD81                 db    ? ;
.bss:000000000021DD82                 db    ? ;
.bss:000000000021DD83                 db    ? ;
.bss:000000000021DD84                 db    ? ;
.bss:000000000021DD85                 db    ? ;
.bss:000000000021DD86                 db    ? ;
.bss:000000000021DD87                 db    ? ;
.bss:000000000021DD88                 db    ? ;
.bss:000000000021DD89                 db    ? ;
.bss:000000000021DD8A                 db    ? ;
.bss:000000000021DD8B                 db    ? ;
.bss:000000000021DD8C                 db    ? ;
.bss:000000000021DD8D                 db    ? ;
.bss:000000000021DD8E                 db    ? ;
.bss:000000000021DD8F                 db    ? ;
.bss:000000000021DD90                 db    ? ;
.bss:000000000021DD91                 db    ? ;
.bss:000000000021DD92                 db    ? ;
.bss:000000000021DD93                 db    ? ;
.bss:000000000021DD94                 db    ? ;
.bss:000000000021DD95                 db    ? ;
.bss:000000000021DD96                 db    ? ;
.bss:000000000021DD97                 db    ? ;
.bss:000000000021DD98                 db    ? ;
.bss:000000000021DD99                 db    ? ;
.bss:000000000021DD9A                 db    ? ;
.bss:000000000021DD9B                 db    ? ;
.bss:000000000021DD9C                 db    ? ;
.bss:000000000021DD9D                 db    ? ;
.bss:000000000021DD9E                 db    ? ;
.bss:000000000021DD9F                 db    ? ;
.bss:000000000021DDA0                 db    ? ;
.bss:000000000021DDA1                 db    ? ;
.bss:000000000021DDA2                 db    ? ;
.bss:000000000021DDA3                 db    ? ;
.bss:000000000021DDA4                 db    ? ;
.bss:000000000021DDA5                 db    ? ;
.bss:000000000021DDA6                 db    ? ;
.bss:000000000021DDA7                 db    ? ;
.bss:000000000021DDA8                 db    ? ;
.bss:000000000021DDA9                 db    ? ;
.bss:000000000021DDAA                 db    ? ;
.bss:000000000021DDAB                 db    ? ;
.bss:000000000021DDAC                 db    ? ;
.bss:000000000021DDAD                 db    ? ;
.bss:000000000021DDAE                 db    ? ;
.bss:000000000021DDAF                 db    ? ;
.bss:000000000021DDB0                 db    ? ;
.bss:000000000021DDB1                 db    ? ;
.bss:000000000021DDB2                 db    ? ;
.bss:000000000021DDB3                 db    ? ;
.bss:000000000021DDB4                 db    ? ;
.bss:000000000021DDB5                 db    ? ;
.bss:000000000021DDB6                 db    ? ;
.bss:000000000021DDB7                 db    ? ;
.bss:000000000021DDB8                 db    ? ;
.bss:000000000021DDB9                 db    ? ;
.bss:000000000021DDBA                 db    ? ;
.bss:000000000021DDBB                 db    ? ;
.bss:000000000021DDBC                 db    ? ;
.bss:000000000021DDBD                 db    ? ;
.bss:000000000021DDBE                 db    ? ;
.bss:000000000021DDBF                 db    ? ;
.bss:000000000021DDC0                 db    ? ;
.bss:000000000021DDC1                 db    ? ;
.bss:000000000021DDC2                 db    ? ;
.bss:000000000021DDC3                 db    ? ;
.bss:000000000021DDC4                 db    ? ;
.bss:000000000021DDC5                 db    ? ;
.bss:000000000021DDC6                 db    ? ;
.bss:000000000021DDC7                 db    ? ;
.bss:000000000021DDC8                 db    ? ;
.bss:000000000021DDC9                 db    ? ;
.bss:000000000021DDCA                 db    ? ;
.bss:000000000021DDCB                 db    ? ;
.bss:000000000021DDCC                 db    ? ;
.bss:000000000021DDCD                 db    ? ;
.bss:000000000021DDCE                 db    ? ;
.bss:000000000021DDCF                 db    ? ;
.bss:000000000021DDD0                 db    ? ;
.bss:000000000021DDD1                 db    ? ;
.bss:000000000021DDD2                 db    ? ;
.bss:000000000021DDD3                 db    ? ;
.bss:000000000021DDD4                 db    ? ;
.bss:000000000021DDD5                 db    ? ;
.bss:000000000021DDD6                 db    ? ;
.bss:000000000021DDD7                 db    ? ;
.bss:000000000021DDD8                 db    ? ;
.bss:000000000021DDD9                 db    ? ;
.bss:000000000021DDDA                 db    ? ;
.bss:000000000021DDDB                 db    ? ;
.bss:000000000021DDDC                 db    ? ;
.bss:000000000021DDDD                 db    ? ;
.bss:000000000021DDDE                 db    ? ;
.bss:000000000021DDDF                 db    ? ;
.bss:000000000021DDE0                 db    ? ;
.bss:000000000021DDE1                 db    ? ;
.bss:000000000021DDE2                 db    ? ;
.bss:000000000021DDE3                 db    ? ;
.bss:000000000021DDE4                 db    ? ;
.bss:000000000021DDE5                 db    ? ;
.bss:000000000021DDE6                 db    ? ;
.bss:000000000021DDE7                 db    ? ;
.bss:000000000021DDE8                 db    ? ;
.bss:000000000021DDE9                 db    ? ;
.bss:000000000021DDEA                 db    ? ;
.bss:000000000021DDEB                 db    ? ;
.bss:000000000021DDEC                 db    ? ;
.bss:000000000021DDED                 db    ? ;
.bss:000000000021DDEE                 db    ? ;
.bss:000000000021DDEF                 db    ? ;
.bss:000000000021DDF0                 db    ? ;
.bss:000000000021DDF1                 db    ? ;
.bss:000000000021DDF2                 db    ? ;
.bss:000000000021DDF3                 db    ? ;
.bss:000000000021DDF4                 db    ? ;
.bss:000000000021DDF5                 db    ? ;
.bss:000000000021DDF6                 db    ? ;
.bss:000000000021DDF7                 db    ? ;
.bss:000000000021DDF8                 db    ? ;
.bss:000000000021DDF9                 db    ? ;
.bss:000000000021DDFA                 db    ? ;
.bss:000000000021DDFB                 db    ? ;
.bss:000000000021DDFC                 db    ? ;
.bss:000000000021DDFD                 db    ? ;
.bss:000000000021DDFE                 db    ? ;
.bss:000000000021DDFF                 db    ? ;
.bss:000000000021DE00                 db    ? ;
.bss:000000000021DE01                 db    ? ;
.bss:000000000021DE02                 db    ? ;
.bss:000000000021DE03                 db    ? ;
.bss:000000000021DE04                 db    ? ;
.bss:000000000021DE05                 db    ? ;
.bss:000000000021DE06                 db    ? ;
.bss:000000000021DE07                 db    ? ;
.bss:000000000021DE08                 db    ? ;
.bss:000000000021DE09                 db    ? ;
.bss:000000000021DE0A                 db    ? ;
.bss:000000000021DE0B                 db    ? ;
.bss:000000000021DE0C                 db    ? ;
.bss:000000000021DE0D                 db    ? ;
.bss:000000000021DE0E                 db    ? ;
.bss:000000000021DE0F                 db    ? ;
.bss:000000000021DE10                 db    ? ;
.bss:000000000021DE11                 db    ? ;
.bss:000000000021DE12                 db    ? ;
.bss:000000000021DE13                 db    ? ;
.bss:000000000021DE14                 db    ? ;
.bss:000000000021DE15                 db    ? ;
.bss:000000000021DE16                 db    ? ;
.bss:000000000021DE17                 db    ? ;
.bss:000000000021DE18                 db    ? ;
.bss:000000000021DE19                 db    ? ;
.bss:000000000021DE1A                 db    ? ;
.bss:000000000021DE1B                 db    ? ;
.bss:000000000021DE1C                 db    ? ;
.bss:000000000021DE1D                 db    ? ;
.bss:000000000021DE1E                 db    ? ;
.bss:000000000021DE1F                 db    ? ;
.bss:000000000021DE20                 db    ? ;
.bss:000000000021DE21                 db    ? ;
.bss:000000000021DE22                 db    ? ;
.bss:000000000021DE23                 db    ? ;
.bss:000000000021DE24                 db    ? ;
.bss:000000000021DE25                 db    ? ;
.bss:000000000021DE26                 db    ? ;
.bss:000000000021DE27                 db    ? ;
.bss:000000000021DE28                 db    ? ;
.bss:000000000021DE29                 db    ? ;
.bss:000000000021DE2A                 db    ? ;
.bss:000000000021DE2B                 db    ? ;
.bss:000000000021DE2C                 db    ? ;
.bss:000000000021DE2D                 db    ? ;
.bss:000000000021DE2E                 db    ? ;
.bss:000000000021DE2F                 db    ? ;
.bss:000000000021DE30                 db    ? ;
.bss:000000000021DE31                 db    ? ;
.bss:000000000021DE32                 db    ? ;
.bss:000000000021DE33                 db    ? ;
.bss:000000000021DE34                 db    ? ;
.bss:000000000021DE35                 db    ? ;
.bss:000000000021DE36                 db    ? ;
.bss:000000000021DE37                 db    ? ;
.bss:000000000021DE38                 db    ? ;
.bss:000000000021DE39                 db    ? ;
.bss:000000000021DE3A                 db    ? ;
.bss:000000000021DE3B                 db    ? ;
.bss:000000000021DE3C                 db    ? ;
.bss:000000000021DE3D                 db    ? ;
.bss:000000000021DE3E                 db    ? ;
.bss:000000000021DE3F                 db    ? ;
.bss:000000000021DE40                 db    ? ;
.bss:000000000021DE41                 db    ? ;
.bss:000000000021DE42                 db    ? ;
.bss:000000000021DE43                 db    ? ;
.bss:000000000021DE44                 db    ? ;
.bss:000000000021DE45                 db    ? ;
.bss:000000000021DE46                 db    ? ;
.bss:000000000021DE47                 db    ? ;
.bss:000000000021DE48                 db    ? ;
.bss:000000000021DE49                 db    ? ;
.bss:000000000021DE4A                 db    ? ;
.bss:000000000021DE4B                 db    ? ;
.bss:000000000021DE4C                 db    ? ;
.bss:000000000021DE4D                 db    ? ;
.bss:000000000021DE4E                 db    ? ;
.bss:000000000021DE4F                 db    ? ;
.bss:000000000021DE50                 db    ? ;
.bss:000000000021DE51                 db    ? ;
.bss:000000000021DE52                 db    ? ;
.bss:000000000021DE53                 db    ? ;
.bss:000000000021DE54                 db    ? ;
.bss:000000000021DE55                 db    ? ;
.bss:000000000021DE56                 db    ? ;
.bss:000000000021DE57                 db    ? ;
.bss:000000000021DE58                 db    ? ;
.bss:000000000021DE59                 db    ? ;
.bss:000000000021DE5A                 db    ? ;
.bss:000000000021DE5B                 db    ? ;
.bss:000000000021DE5C                 db    ? ;
.bss:000000000021DE5D                 db    ? ;
.bss:000000000021DE5E                 db    ? ;
.bss:000000000021DE5F                 db    ? ;
.bss:000000000021DE60                 db    ? ;
.bss:000000000021DE61                 db    ? ;
.bss:000000000021DE62                 db    ? ;
.bss:000000000021DE63                 db    ? ;
.bss:000000000021DE64                 db    ? ;
.bss:000000000021DE65                 db    ? ;
.bss:000000000021DE66                 db    ? ;
.bss:000000000021DE67                 db    ? ;
.bss:000000000021DE68                 db    ? ;
.bss:000000000021DE69                 db    ? ;
.bss:000000000021DE6A                 db    ? ;
.bss:000000000021DE6B                 db    ? ;
.bss:000000000021DE6C                 db    ? ;
.bss:000000000021DE6D                 db    ? ;
.bss:000000000021DE6E                 db    ? ;
.bss:000000000021DE6F                 db    ? ;
.bss:000000000021DE70                 db    ? ;
.bss:000000000021DE71                 db    ? ;
.bss:000000000021DE72                 db    ? ;
.bss:000000000021DE73                 db    ? ;
.bss:000000000021DE74                 db    ? ;
.bss:000000000021DE75                 db    ? ;
.bss:000000000021DE76                 db    ? ;
.bss:000000000021DE77                 db    ? ;
.bss:000000000021DE78                 db    ? ;
.bss:000000000021DE79                 db    ? ;
.bss:000000000021DE7A                 db    ? ;
.bss:000000000021DE7B                 db    ? ;
.bss:000000000021DE7C                 db    ? ;
.bss:000000000021DE7D                 db    ? ;
.bss:000000000021DE7E                 db    ? ;
.bss:000000000021DE7F                 db    ? ;
.bss:000000000021DE80                 db    ? ;
.bss:000000000021DE81                 db    ? ;
.bss:000000000021DE82                 db    ? ;
.bss:000000000021DE83                 db    ? ;
.bss:000000000021DE84                 db    ? ;
.bss:000000000021DE85                 db    ? ;
.bss:000000000021DE86                 db    ? ;
.bss:000000000021DE87                 db    ? ;
.bss:000000000021DE88                 db    ? ;
.bss:000000000021DE89                 db    ? ;
.bss:000000000021DE8A                 db    ? ;
.bss:000000000021DE8B                 db    ? ;
.bss:000000000021DE8C                 db    ? ;
.bss:000000000021DE8D                 db    ? ;
.bss:000000000021DE8E                 db    ? ;
.bss:000000000021DE8F                 db    ? ;
.bss:000000000021DE90                 db    ? ;
.bss:000000000021DE91                 db    ? ;
.bss:000000000021DE92                 db    ? ;
.bss:000000000021DE93                 db    ? ;
.bss:000000000021DE94                 db    ? ;
.bss:000000000021DE95                 db    ? ;
.bss:000000000021DE96                 db    ? ;
.bss:000000000021DE97                 db    ? ;
.bss:000000000021DE98                 db    ? ;
.bss:000000000021DE99                 db    ? ;
.bss:000000000021DE9A                 db    ? ;
.bss:000000000021DE9B                 db    ? ;
.bss:000000000021DE9C                 db    ? ;
.bss:000000000021DE9D                 db    ? ;
.bss:000000000021DE9E                 db    ? ;
.bss:000000000021DE9F                 db    ? ;
.bss:000000000021DEA0                 db    ? ;
.bss:000000000021DEA1                 db    ? ;
.bss:000000000021DEA2                 db    ? ;
.bss:000000000021DEA3                 db    ? ;
.bss:000000000021DEA4                 db    ? ;
.bss:000000000021DEA5                 db    ? ;
.bss:000000000021DEA6                 db    ? ;
.bss:000000000021DEA7                 db    ? ;
.bss:000000000021DEA8                 db    ? ;
.bss:000000000021DEA9                 db    ? ;
.bss:000000000021DEAA                 db    ? ;
.bss:000000000021DEAB                 db    ? ;
.bss:000000000021DEAC                 db    ? ;
.bss:000000000021DEAD                 db    ? ;
.bss:000000000021DEAE                 db    ? ;
.bss:000000000021DEAF                 db    ? ;
.bss:000000000021DEB0                 db    ? ;
.bss:000000000021DEB1                 db    ? ;
.bss:000000000021DEB2                 db    ? ;
.bss:000000000021DEB3                 db    ? ;
.bss:000000000021DEB4                 db    ? ;
.bss:000000000021DEB5                 db    ? ;
.bss:000000000021DEB6                 db    ? ;
.bss:000000000021DEB7                 db    ? ;
.bss:000000000021DEB8                 db    ? ;
.bss:000000000021DEB9                 db    ? ;
.bss:000000000021DEBA                 db    ? ;
.bss:000000000021DEBB                 db    ? ;
.bss:000000000021DEBC                 db    ? ;
.bss:000000000021DEBD                 db    ? ;
.bss:000000000021DEBE                 db    ? ;
.bss:000000000021DEBF                 db    ? ;
.bss:000000000021DEC0                 db    ? ;
.bss:000000000021DEC1                 db    ? ;
.bss:000000000021DEC2                 db    ? ;
.bss:000000000021DEC3                 db    ? ;
.bss:000000000021DEC4                 db    ? ;
.bss:000000000021DEC5                 db    ? ;
.bss:000000000021DEC6                 db    ? ;
.bss:000000000021DEC7                 db    ? ;
.bss:000000000021DEC8                 db    ? ;
.bss:000000000021DEC9                 db    ? ;
.bss:000000000021DECA                 db    ? ;
.bss:000000000021DECB                 db    ? ;
.bss:000000000021DECC                 db    ? ;
.bss:000000000021DECD                 db    ? ;
.bss:000000000021DECE                 db    ? ;
.bss:000000000021DECF                 db    ? ;
.bss:000000000021DED0                 db    ? ;
.bss:000000000021DED1                 db    ? ;
.bss:000000000021DED2                 db    ? ;
.bss:000000000021DED3                 db    ? ;
.bss:000000000021DED4                 db    ? ;
.bss:000000000021DED5                 db    ? ;
.bss:000000000021DED6                 db    ? ;
.bss:000000000021DED7                 db    ? ;
.bss:000000000021DED8                 db    ? ;
.bss:000000000021DED9                 db    ? ;
.bss:000000000021DEDA                 db    ? ;
.bss:000000000021DEDB                 db    ? ;
.bss:000000000021DEDC                 db    ? ;
.bss:000000000021DEDD                 db    ? ;
.bss:000000000021DEDE                 db    ? ;
.bss:000000000021DEDF                 db    ? ;
.bss:000000000021DEE0                 db    ? ;
.bss:000000000021DEE1                 db    ? ;
.bss:000000000021DEE2                 db    ? ;
.bss:000000000021DEE3                 db    ? ;
.bss:000000000021DEE4                 db    ? ;
.bss:000000000021DEE5                 db    ? ;
.bss:000000000021DEE6                 db    ? ;
.bss:000000000021DEE7                 db    ? ;
.bss:000000000021DEE8                 db    ? ;
.bss:000000000021DEE9                 db    ? ;
.bss:000000000021DEEA                 db    ? ;
.bss:000000000021DEEB                 db    ? ;
.bss:000000000021DEEC                 db    ? ;
.bss:000000000021DEED                 db    ? ;
.bss:000000000021DEEE                 db    ? ;
.bss:000000000021DEEF                 db    ? ;
.bss:000000000021DEF0                 db    ? ;
.bss:000000000021DEF1                 db    ? ;
.bss:000000000021DEF2                 db    ? ;
.bss:000000000021DEF3                 db    ? ;
.bss:000000000021DEF4                 db    ? ;
.bss:000000000021DEF5                 db    ? ;
.bss:000000000021DEF6                 db    ? ;
.bss:000000000021DEF7                 db    ? ;
.bss:000000000021DEF8                 db    ? ;
.bss:000000000021DEF9                 db    ? ;
.bss:000000000021DEFA                 db    ? ;
.bss:000000000021DEFB                 db    ? ;
.bss:000000000021DEFC                 db    ? ;
.bss:000000000021DEFD                 db    ? ;
.bss:000000000021DEFE                 db    ? ;
.bss:000000000021DEFF                 db    ? ;
.bss:000000000021DF00                 db    ? ;
.bss:000000000021DF01                 db    ? ;
.bss:000000000021DF02                 db    ? ;
.bss:000000000021DF03                 db    ? ;
.bss:000000000021DF04                 db    ? ;
.bss:000000000021DF05                 db    ? ;
.bss:000000000021DF06                 db    ? ;
.bss:000000000021DF07                 db    ? ;
.bss:000000000021DF08                 db    ? ;
.bss:000000000021DF09                 db    ? ;
.bss:000000000021DF0A                 db    ? ;
.bss:000000000021DF0B                 db    ? ;
.bss:000000000021DF0C                 db    ? ;
.bss:000000000021DF0D                 db    ? ;
.bss:000000000021DF0E                 db    ? ;
.bss:000000000021DF0F                 db    ? ;
.bss:000000000021DF10                 db    ? ;
.bss:000000000021DF11                 db    ? ;
.bss:000000000021DF12                 db    ? ;
.bss:000000000021DF13                 db    ? ;
.bss:000000000021DF14                 db    ? ;
.bss:000000000021DF15                 db    ? ;
.bss:000000000021DF16                 db    ? ;
.bss:000000000021DF17                 db    ? ;
.bss:000000000021DF18                 db    ? ;
.bss:000000000021DF19                 db    ? ;
.bss:000000000021DF1A                 db    ? ;
.bss:000000000021DF1B                 db    ? ;
.bss:000000000021DF1C                 db    ? ;
.bss:000000000021DF1D                 db    ? ;
.bss:000000000021DF1E                 db    ? ;
.bss:000000000021DF1F                 db    ? ;
.bss:000000000021DF20                 db    ? ;
.bss:000000000021DF21                 db    ? ;
.bss:000000000021DF22                 db    ? ;
.bss:000000000021DF23                 db    ? ;
.bss:000000000021DF24                 db    ? ;
.bss:000000000021DF25                 db    ? ;
.bss:000000000021DF26                 db    ? ;
.bss:000000000021DF27                 db    ? ;
.bss:000000000021DF28                 db    ? ;
.bss:000000000021DF29                 db    ? ;
.bss:000000000021DF2A                 db    ? ;
.bss:000000000021DF2B                 db    ? ;
.bss:000000000021DF2C                 db    ? ;
.bss:000000000021DF2D                 db    ? ;
.bss:000000000021DF2E                 db    ? ;
.bss:000000000021DF2F                 db    ? ;
.bss:000000000021DF30                 db    ? ;
.bss:000000000021DF31                 db    ? ;
.bss:000000000021DF32                 db    ? ;
.bss:000000000021DF33                 db    ? ;
.bss:000000000021DF34                 db    ? ;
.bss:000000000021DF35                 db    ? ;
.bss:000000000021DF36                 db    ? ;
.bss:000000000021DF37                 db    ? ;
.bss:000000000021DF38                 db    ? ;
.bss:000000000021DF39                 db    ? ;
.bss:000000000021DF3A                 db    ? ;
.bss:000000000021DF3B                 db    ? ;
.bss:000000000021DF3C                 db    ? ;
.bss:000000000021DF3D                 db    ? ;
.bss:000000000021DF3E                 db    ? ;
.bss:000000000021DF3F                 db    ? ;
.bss:000000000021DF40                 db    ? ;
.bss:000000000021DF41                 db    ? ;
.bss:000000000021DF42                 db    ? ;
.bss:000000000021DF43                 db    ? ;
.bss:000000000021DF44                 db    ? ;
.bss:000000000021DF45                 db    ? ;
.bss:000000000021DF46                 db    ? ;
.bss:000000000021DF47                 db    ? ;
.bss:000000000021DF48                 db    ? ;
.bss:000000000021DF49                 db    ? ;
.bss:000000000021DF4A                 db    ? ;
.bss:000000000021DF4B                 db    ? ;
.bss:000000000021DF4C                 db    ? ;
.bss:000000000021DF4D                 db    ? ;
.bss:000000000021DF4E                 db    ? ;
.bss:000000000021DF4F                 db    ? ;
.bss:000000000021DF50                 db    ? ;
.bss:000000000021DF51                 db    ? ;
.bss:000000000021DF52                 db    ? ;
.bss:000000000021DF53                 db    ? ;
.bss:000000000021DF54                 db    ? ;
.bss:000000000021DF55                 db    ? ;
.bss:000000000021DF56                 db    ? ;
.bss:000000000021DF57                 db    ? ;
.bss:000000000021DF58                 db    ? ;
.bss:000000000021DF59                 db    ? ;
.bss:000000000021DF5A                 db    ? ;
.bss:000000000021DF5B                 db    ? ;
.bss:000000000021DF5C                 db    ? ;
.bss:000000000021DF5D                 db    ? ;
.bss:000000000021DF5E                 db    ? ;
.bss:000000000021DF5F                 db    ? ;
.bss:000000000021DF60                 db    ? ;
.bss:000000000021DF61                 db    ? ;
.bss:000000000021DF62                 db    ? ;
.bss:000000000021DF63                 db    ? ;
.bss:000000000021DF64                 db    ? ;
.bss:000000000021DF65                 db    ? ;
.bss:000000000021DF66                 db    ? ;
.bss:000000000021DF67                 db    ? ;
.bss:000000000021DF68                 db    ? ;
.bss:000000000021DF69                 db    ? ;
.bss:000000000021DF6A                 db    ? ;
.bss:000000000021DF6B                 db    ? ;
.bss:000000000021DF6C                 db    ? ;
.bss:000000000021DF6D                 db    ? ;
.bss:000000000021DF6E                 db    ? ;
.bss:000000000021DF6F                 db    ? ;
.bss:000000000021DF70                 db    ? ;
.bss:000000000021DF71                 db    ? ;
.bss:000000000021DF72                 db    ? ;
.bss:000000000021DF73                 db    ? ;
.bss:000000000021DF74                 db    ? ;
.bss:000000000021DF75                 db    ? ;
.bss:000000000021DF76                 db    ? ;
.bss:000000000021DF77                 db    ? ;
.bss:000000000021DF78                 db    ? ;
.bss:000000000021DF79                 db    ? ;
.bss:000000000021DF7A                 db    ? ;
.bss:000000000021DF7B                 db    ? ;
.bss:000000000021DF7C                 db    ? ;
.bss:000000000021DF7D                 db    ? ;
.bss:000000000021DF7E                 db    ? ;
.bss:000000000021DF7F                 db    ? ;
.bss:000000000021DF80                 db    ? ;
.bss:000000000021DF81                 db    ? ;
.bss:000000000021DF82                 db    ? ;
.bss:000000000021DF83                 db    ? ;
.bss:000000000021DF84                 db    ? ;
.bss:000000000021DF85                 db    ? ;
.bss:000000000021DF86                 db    ? ;
.bss:000000000021DF87                 db    ? ;
.bss:000000000021DF88                 db    ? ;
.bss:000000000021DF89                 db    ? ;
.bss:000000000021DF8A                 db    ? ;
.bss:000000000021DF8B                 db    ? ;
.bss:000000000021DF8C                 db    ? ;
.bss:000000000021DF8D                 db    ? ;
.bss:000000000021DF8E                 db    ? ;
.bss:000000000021DF8F                 db    ? ;
.bss:000000000021DF90                 db    ? ;
.bss:000000000021DF91                 db    ? ;
.bss:000000000021DF92                 db    ? ;
.bss:000000000021DF93                 db    ? ;
.bss:000000000021DF94                 db    ? ;
.bss:000000000021DF95                 db    ? ;
.bss:000000000021DF96                 db    ? ;
.bss:000000000021DF97                 db    ? ;
.bss:000000000021DF98                 db    ? ;
.bss:000000000021DF99                 db    ? ;
.bss:000000000021DF9A                 db    ? ;
.bss:000000000021DF9B                 db    ? ;
.bss:000000000021DF9C                 db    ? ;
.bss:000000000021DF9D                 db    ? ;
.bss:000000000021DF9E                 db    ? ;
.bss:000000000021DF9F                 db    ? ;
.bss:000000000021DFA0                 db    ? ;
.bss:000000000021DFA1                 db    ? ;
.bss:000000000021DFA2                 db    ? ;
.bss:000000000021DFA3                 db    ? ;
.bss:000000000021DFA4                 db    ? ;
.bss:000000000021DFA5                 db    ? ;
.bss:000000000021DFA6                 db    ? ;
.bss:000000000021DFA7                 db    ? ;
.bss:000000000021DFA8                 db    ? ;
.bss:000000000021DFA9                 db    ? ;
.bss:000000000021DFAA                 db    ? ;
.bss:000000000021DFAB                 db    ? ;
.bss:000000000021DFAC                 db    ? ;
.bss:000000000021DFAD                 db    ? ;
.bss:000000000021DFAE                 db    ? ;
.bss:000000000021DFAF                 db    ? ;
.bss:000000000021DFB0                 db    ? ;
.bss:000000000021DFB1                 db    ? ;
.bss:000000000021DFB2                 db    ? ;
.bss:000000000021DFB3                 db    ? ;
.bss:000000000021DFB4                 db    ? ;
.bss:000000000021DFB5                 db    ? ;
.bss:000000000021DFB6                 db    ? ;
.bss:000000000021DFB7                 db    ? ;
.bss:000000000021DFB8                 db    ? ;
.bss:000000000021DFB9                 db    ? ;
.bss:000000000021DFBA                 db    ? ;
.bss:000000000021DFBB                 db    ? ;
.bss:000000000021DFBC                 db    ? ;
.bss:000000000021DFBD                 db    ? ;
.bss:000000000021DFBE                 db    ? ;
.bss:000000000021DFBF                 db    ? ;
.bss:000000000021DFC0                 db    ? ;
.bss:000000000021DFC1                 db    ? ;
.bss:000000000021DFC2                 db    ? ;
.bss:000000000021DFC3                 db    ? ;
.bss:000000000021DFC4                 db    ? ;
.bss:000000000021DFC5                 db    ? ;
.bss:000000000021DFC6                 db    ? ;
.bss:000000000021DFC7                 db    ? ;
.bss:000000000021DFC8                 db    ? ;
.bss:000000000021DFC9                 db    ? ;
.bss:000000000021DFCA                 db    ? ;
.bss:000000000021DFCB                 db    ? ;
.bss:000000000021DFCC                 db    ? ;
.bss:000000000021DFCD                 db    ? ;
.bss:000000000021DFCE                 db    ? ;
.bss:000000000021DFCF                 db    ? ;
.bss:000000000021DFD0                 db    ? ;
.bss:000000000021DFD1                 db    ? ;
.bss:000000000021DFD2                 db    ? ;
.bss:000000000021DFD3                 db    ? ;
.bss:000000000021DFD4                 db    ? ;
.bss:000000000021DFD5                 db    ? ;
.bss:000000000021DFD6                 db    ? ;
.bss:000000000021DFD7                 db    ? ;
.bss:000000000021DFD8                 db    ? ;
.bss:000000000021DFD9                 db    ? ;
.bss:000000000021DFDA                 db    ? ;
.bss:000000000021DFDB                 db    ? ;
.bss:000000000021DFDC                 db    ? ;
.bss:000000000021DFDD                 db    ? ;
.bss:000000000021DFDE                 db    ? ;
.bss:000000000021DFDF                 db    ? ;
.bss:000000000021DFE0                 db    ? ;
.bss:000000000021DFE1                 db    ? ;
.bss:000000000021DFE2                 db    ? ;
.bss:000000000021DFE3                 db    ? ;
.bss:000000000021DFE4                 db    ? ;
.bss:000000000021DFE5                 db    ? ;
.bss:000000000021DFE6                 db    ? ;
.bss:000000000021DFE7                 db    ? ;
.bss:000000000021DFE8                 db    ? ;
.bss:000000000021DFE9                 db    ? ;
.bss:000000000021DFEA                 db    ? ;
.bss:000000000021DFEB                 db    ? ;
.bss:000000000021DFEC                 db    ? ;
.bss:000000000021DFED                 db    ? ;
.bss:000000000021DFEE                 db    ? ;
.bss:000000000021DFEF                 db    ? ;
.bss:000000000021DFF0                 db    ? ;
.bss:000000000021DFF1                 db    ? ;
.bss:000000000021DFF2                 db    ? ;
.bss:000000000021DFF3                 db    ? ;
.bss:000000000021DFF4                 db    ? ;
.bss:000000000021DFF5                 db    ? ;
.bss:000000000021DFF6                 db    ? ;
.bss:000000000021DFF7                 db    ? ;
.bss:000000000021DFF8                 db    ? ;
.bss:000000000021DFF9                 db    ? ;
.bss:000000000021DFFA                 db    ? ;
.bss:000000000021DFFB                 db    ? ;
.bss:000000000021DFFC                 db    ? ;
.bss:000000000021DFFD                 db    ? ;
.bss:000000000021DFFE                 db    ? ;
.bss:000000000021DFFF                 db    ? ;
.bss:000000000021E000                 db    ? ;
.bss:000000000021E001                 db    ? ;
.bss:000000000021E002                 db    ? ;
.bss:000000000021E003                 db    ? ;
.bss:000000000021E004                 db    ? ;
.bss:000000000021E005                 db    ? ;
.bss:000000000021E006                 db    ? ;
.bss:000000000021E007                 db    ? ;
.bss:000000000021E008                 db    ? ;
.bss:000000000021E009                 db    ? ;
.bss:000000000021E00A                 db    ? ;
.bss:000000000021E00B                 db    ? ;
.bss:000000000021E00C                 db    ? ;
.bss:000000000021E00D                 db    ? ;
.bss:000000000021E00E                 db    ? ;
.bss:000000000021E00F                 db    ? ;
.bss:000000000021E010                 db    ? ;
.bss:000000000021E011                 db    ? ;
.bss:000000000021E012                 db    ? ;
.bss:000000000021E013                 db    ? ;
.bss:000000000021E014                 db    ? ;
.bss:000000000021E015                 db    ? ;
.bss:000000000021E016                 db    ? ;
.bss:000000000021E017                 db    ? ;
.bss:000000000021E018                 db    ? ;
.bss:000000000021E019                 db    ? ;
.bss:000000000021E01A                 db    ? ;
.bss:000000000021E01B                 db    ? ;
.bss:000000000021E01C                 db    ? ;
.bss:000000000021E01D                 db    ? ;
.bss:000000000021E01E                 db    ? ;
.bss:000000000021E01F                 db    ? ;
.bss:000000000021E020                 db    ? ;
.bss:000000000021E021                 db    ? ;
.bss:000000000021E022                 db    ? ;
.bss:000000000021E023                 db    ? ;
.bss:000000000021E024                 db    ? ;
.bss:000000000021E025                 db    ? ;
.bss:000000000021E026                 db    ? ;
.bss:000000000021E027                 db    ? ;
.bss:000000000021E028                 db    ? ;
.bss:000000000021E029                 db    ? ;
.bss:000000000021E02A                 db    ? ;
.bss:000000000021E02B                 db    ? ;
.bss:000000000021E02C                 db    ? ;
.bss:000000000021E02D                 db    ? ;
.bss:000000000021E02E                 db    ? ;
.bss:000000000021E02F                 db    ? ;
.bss:000000000021E030                 db    ? ;
.bss:000000000021E031                 db    ? ;
.bss:000000000021E032                 db    ? ;
.bss:000000000021E033                 db    ? ;
.bss:000000000021E034                 db    ? ;
.bss:000000000021E035                 db    ? ;
.bss:000000000021E036                 db    ? ;
.bss:000000000021E037                 db    ? ;
.bss:000000000021E038                 db    ? ;
.bss:000000000021E039                 db    ? ;
.bss:000000000021E03A                 db    ? ;
.bss:000000000021E03B                 db    ? ;
.bss:000000000021E03C                 db    ? ;
.bss:000000000021E03D                 db    ? ;
.bss:000000000021E03E                 db    ? ;
.bss:000000000021E03F                 db    ? ;
.bss:000000000021E040                 db    ? ;
.bss:000000000021E041                 db    ? ;
.bss:000000000021E042                 db    ? ;
.bss:000000000021E043                 db    ? ;
.bss:000000000021E044                 db    ? ;
.bss:000000000021E045                 db    ? ;
.bss:000000000021E046                 db    ? ;
.bss:000000000021E047                 db    ? ;
.bss:000000000021E048                 db    ? ;
.bss:000000000021E049                 db    ? ;
.bss:000000000021E04A                 db    ? ;
.bss:000000000021E04B                 db    ? ;
.bss:000000000021E04C                 db    ? ;
.bss:000000000021E04D                 db    ? ;
.bss:000000000021E04E                 db    ? ;
.bss:000000000021E04F                 db    ? ;
.bss:000000000021E050                 db    ? ;
.bss:000000000021E051                 db    ? ;
.bss:000000000021E052                 db    ? ;
.bss:000000000021E053                 db    ? ;
.bss:000000000021E054                 db    ? ;
.bss:000000000021E055                 db    ? ;
.bss:000000000021E056                 db    ? ;
.bss:000000000021E057                 db    ? ;
.bss:000000000021E058                 db    ? ;
.bss:000000000021E059                 db    ? ;
.bss:000000000021E05A                 db    ? ;
.bss:000000000021E05B                 db    ? ;
.bss:000000000021E05C                 db    ? ;
.bss:000000000021E05D                 db    ? ;
.bss:000000000021E05E                 db    ? ;
.bss:000000000021E05F                 db    ? ;
.bss:000000000021E060                 db    ? ;
.bss:000000000021E061                 db    ? ;
.bss:000000000021E062                 db    ? ;
.bss:000000000021E063                 db    ? ;
.bss:000000000021E064                 db    ? ;
.bss:000000000021E065                 db    ? ;
.bss:000000000021E066                 db    ? ;
.bss:000000000021E067                 db    ? ;
.bss:000000000021E068                 db    ? ;
.bss:000000000021E069                 db    ? ;
.bss:000000000021E06A                 db    ? ;
.bss:000000000021E06B                 db    ? ;
.bss:000000000021E06C                 db    ? ;
.bss:000000000021E06D                 db    ? ;
.bss:000000000021E06E                 db    ? ;
.bss:000000000021E06F                 db    ? ;
.bss:000000000021E070                 db    ? ;
.bss:000000000021E071                 db    ? ;
.bss:000000000021E072                 db    ? ;
.bss:000000000021E073                 db    ? ;
.bss:000000000021E074                 db    ? ;
.bss:000000000021E075                 db    ? ;
.bss:000000000021E076                 db    ? ;
.bss:000000000021E077                 db    ? ;
.bss:000000000021E078                 db    ? ;
.bss:000000000021E079                 db    ? ;
.bss:000000000021E07A                 db    ? ;
.bss:000000000021E07B                 db    ? ;
.bss:000000000021E07C                 db    ? ;
.bss:000000000021E07D                 db    ? ;
.bss:000000000021E07E                 db    ? ;
.bss:000000000021E07F                 db    ? ;
.bss:000000000021E080                 db    ? ;
.bss:000000000021E081                 db    ? ;
.bss:000000000021E082                 db    ? ;
.bss:000000000021E083                 db    ? ;
.bss:000000000021E084                 db    ? ;
.bss:000000000021E085                 db    ? ;
.bss:000000000021E086                 db    ? ;
.bss:000000000021E087                 db    ? ;
.bss:000000000021E088                 db    ? ;
.bss:000000000021E089                 db    ? ;
.bss:000000000021E08A                 db    ? ;
.bss:000000000021E08B                 db    ? ;
.bss:000000000021E08C                 db    ? ;
.bss:000000000021E08D                 db    ? ;
.bss:000000000021E08E                 db    ? ;
.bss:000000000021E08F                 db    ? ;
.bss:000000000021E090                 db    ? ;
.bss:000000000021E091                 db    ? ;
.bss:000000000021E092                 db    ? ;
.bss:000000000021E093                 db    ? ;
.bss:000000000021E094                 db    ? ;
.bss:000000000021E095                 db    ? ;
.bss:000000000021E096                 db    ? ;
.bss:000000000021E097                 db    ? ;
.bss:000000000021E098                 db    ? ;
.bss:000000000021E099                 db    ? ;
.bss:000000000021E09A                 db    ? ;
.bss:000000000021E09B                 db    ? ;
.bss:000000000021E09C                 db    ? ;
.bss:000000000021E09D                 db    ? ;
.bss:000000000021E09E                 db    ? ;
.bss:000000000021E09F                 db    ? ;
.bss:000000000021E0A0                 db    ? ;
.bss:000000000021E0A1                 db    ? ;
.bss:000000000021E0A2                 db    ? ;
.bss:000000000021E0A3                 db    ? ;
.bss:000000000021E0A4                 db    ? ;
.bss:000000000021E0A5                 db    ? ;
.bss:000000000021E0A6                 db    ? ;
.bss:000000000021E0A7                 db    ? ;
.bss:000000000021E0A8                 db    ? ;
.bss:000000000021E0A9                 db    ? ;
.bss:000000000021E0AA                 db    ? ;
.bss:000000000021E0AB                 db    ? ;
.bss:000000000021E0AC                 db    ? ;
.bss:000000000021E0AD                 db    ? ;
.bss:000000000021E0AE                 db    ? ;
.bss:000000000021E0AF                 db    ? ;
.bss:000000000021E0B0                 db    ? ;
.bss:000000000021E0B1                 db    ? ;
.bss:000000000021E0B2                 db    ? ;
.bss:000000000021E0B3                 db    ? ;
.bss:000000000021E0B4                 db    ? ;
.bss:000000000021E0B5                 db    ? ;
.bss:000000000021E0B6                 db    ? ;
.bss:000000000021E0B7                 db    ? ;
.bss:000000000021E0B8                 db    ? ;
.bss:000000000021E0B9                 db    ? ;
.bss:000000000021E0BA                 db    ? ;
.bss:000000000021E0BB                 db    ? ;
.bss:000000000021E0BC                 db    ? ;
.bss:000000000021E0BD                 db    ? ;
.bss:000000000021E0BE                 db    ? ;
.bss:000000000021E0BF                 db    ? ;
.bss:000000000021E0C0                 db    ? ;
.bss:000000000021E0C1                 db    ? ;
.bss:000000000021E0C2                 db    ? ;
.bss:000000000021E0C3                 db    ? ;
.bss:000000000021E0C4                 db    ? ;
.bss:000000000021E0C5                 db    ? ;
.bss:000000000021E0C6                 db    ? ;
.bss:000000000021E0C7                 db    ? ;
.bss:000000000021E0C8                 db    ? ;
.bss:000000000021E0C9                 db    ? ;
.bss:000000000021E0CA                 db    ? ;
.bss:000000000021E0CB                 db    ? ;
.bss:000000000021E0CC                 db    ? ;
.bss:000000000021E0CD                 db    ? ;
.bss:000000000021E0CE                 db    ? ;
.bss:000000000021E0CF                 db    ? ;
.bss:000000000021E0D0                 db    ? ;
.bss:000000000021E0D1                 db    ? ;
.bss:000000000021E0D2                 db    ? ;
.bss:000000000021E0D3                 db    ? ;
.bss:000000000021E0D4                 db    ? ;
.bss:000000000021E0D5                 db    ? ;
.bss:000000000021E0D6                 db    ? ;
.bss:000000000021E0D7                 db    ? ;
.bss:000000000021E0D8                 db    ? ;
.bss:000000000021E0D9                 db    ? ;
.bss:000000000021E0DA                 db    ? ;
.bss:000000000021E0DB                 db    ? ;
.bss:000000000021E0DC                 db    ? ;
.bss:000000000021E0DD                 db    ? ;
.bss:000000000021E0DE                 db    ? ;
.bss:000000000021E0DF                 db    ? ;
.bss:000000000021E0E0                 db    ? ;
.bss:000000000021E0E1                 db    ? ;
.bss:000000000021E0E2                 db    ? ;
.bss:000000000021E0E3                 db    ? ;
.bss:000000000021E0E4                 db    ? ;
.bss:000000000021E0E5                 db    ? ;
.bss:000000000021E0E6                 db    ? ;
.bss:000000000021E0E7                 db    ? ;
.bss:000000000021E0E8                 db    ? ;
.bss:000000000021E0E9                 db    ? ;
.bss:000000000021E0EA                 db    ? ;
.bss:000000000021E0EB                 db    ? ;
.bss:000000000021E0EC                 db    ? ;
.bss:000000000021E0ED                 db    ? ;
.bss:000000000021E0EE                 db    ? ;
.bss:000000000021E0EF                 db    ? ;
.bss:000000000021E0F0                 db    ? ;
.bss:000000000021E0F1                 db    ? ;
.bss:000000000021E0F2                 db    ? ;
.bss:000000000021E0F3                 db    ? ;
.bss:000000000021E0F4                 db    ? ;
.bss:000000000021E0F5                 db    ? ;
.bss:000000000021E0F6                 db    ? ;
.bss:000000000021E0F7                 db    ? ;
.bss:000000000021E0F8                 db    ? ;
.bss:000000000021E0F9                 db    ? ;
.bss:000000000021E0FA                 db    ? ;
.bss:000000000021E0FB                 db    ? ;
.bss:000000000021E0FC                 db    ? ;
.bss:000000000021E0FD                 db    ? ;
.bss:000000000021E0FE                 db    ? ;
.bss:000000000021E0FF                 db    ? ;
.bss:000000000021E100                 db    ? ;
.bss:000000000021E101                 db    ? ;
.bss:000000000021E102                 db    ? ;
.bss:000000000021E103                 db    ? ;
.bss:000000000021E104                 db    ? ;
.bss:000000000021E105                 db    ? ;
.bss:000000000021E106                 db    ? ;
.bss:000000000021E107                 db    ? ;
.bss:000000000021E108                 db    ? ;
.bss:000000000021E109                 db    ? ;
.bss:000000000021E10A                 db    ? ;
.bss:000000000021E10B                 db    ? ;
.bss:000000000021E10C                 db    ? ;
.bss:000000000021E10D                 db    ? ;
.bss:000000000021E10E                 db    ? ;
.bss:000000000021E10F                 db    ? ;
.bss:000000000021E110                 db    ? ;
.bss:000000000021E111                 db    ? ;
.bss:000000000021E112                 db    ? ;
.bss:000000000021E113                 db    ? ;
.bss:000000000021E114                 db    ? ;
.bss:000000000021E115                 db    ? ;
.bss:000000000021E116                 db    ? ;
.bss:000000000021E117                 db    ? ;
.bss:000000000021E118                 db    ? ;
.bss:000000000021E119                 db    ? ;
.bss:000000000021E11A                 db    ? ;
.bss:000000000021E11B                 db    ? ;
.bss:000000000021E11C                 db    ? ;
.bss:000000000021E11D                 db    ? ;
.bss:000000000021E11E                 db    ? ;
.bss:000000000021E11F                 db    ? ;
.bss:000000000021E120                 db    ? ;
.bss:000000000021E121                 db    ? ;
.bss:000000000021E122                 db    ? ;
.bss:000000000021E123                 db    ? ;
.bss:000000000021E124                 db    ? ;
.bss:000000000021E125                 db    ? ;
.bss:000000000021E126                 db    ? ;
.bss:000000000021E127                 db    ? ;
.bss:000000000021E128                 db    ? ;
.bss:000000000021E129                 db    ? ;
.bss:000000000021E12A                 db    ? ;
.bss:000000000021E12B                 db    ? ;
.bss:000000000021E12C                 db    ? ;
.bss:000000000021E12D                 db    ? ;
.bss:000000000021E12E                 db    ? ;
.bss:000000000021E12F                 db    ? ;
.bss:000000000021E130                 db    ? ;
.bss:000000000021E131                 db    ? ;
.bss:000000000021E132                 db    ? ;
.bss:000000000021E133                 db    ? ;
.bss:000000000021E134                 db    ? ;
.bss:000000000021E135                 db    ? ;
.bss:000000000021E136                 db    ? ;
.bss:000000000021E137                 db    ? ;
.bss:000000000021E138                 db    ? ;
.bss:000000000021E139                 db    ? ;
.bss:000000000021E13A                 db    ? ;
.bss:000000000021E13B                 db    ? ;
.bss:000000000021E13C                 db    ? ;
.bss:000000000021E13D                 db    ? ;
.bss:000000000021E13E                 db    ? ;
.bss:000000000021E13F                 db    ? ;
.bss:000000000021E140 b_buff_7456     db    ? ;               ; DATA XREF: install_file_in_file+370↑o
.bss:000000000021E140                                         ; install_file_in_file+393↑o
.bss:000000000021E141                 db    ? ;
.bss:000000000021E142                 db    ? ;
.bss:000000000021E143                 db    ? ;
.bss:000000000021E144                 db    ? ;
.bss:000000000021E145                 db    ? ;
.bss:000000000021E146                 db    ? ;
.bss:000000000021E147                 db    ? ;
.bss:000000000021E148                 db    ? ;
.bss:000000000021E149                 db    ? ;
.bss:000000000021E14A                 db    ? ;
.bss:000000000021E14B                 db    ? ;
.bss:000000000021E14C                 db    ? ;
.bss:000000000021E14D                 db    ? ;
.bss:000000000021E14E                 db    ? ;
.bss:000000000021E14F                 db    ? ;
.bss:000000000021E150                 db    ? ;
.bss:000000000021E151                 db    ? ;
.bss:000000000021E152                 db    ? ;
.bss:000000000021E153                 db    ? ;
.bss:000000000021E154                 db    ? ;
.bss:000000000021E155                 db    ? ;
.bss:000000000021E156                 db    ? ;
.bss:000000000021E157                 db    ? ;
.bss:000000000021E158                 db    ? ;
.bss:000000000021E159                 db    ? ;
.bss:000000000021E15A                 db    ? ;
.bss:000000000021E15B                 db    ? ;
.bss:000000000021E15C                 db    ? ;
.bss:000000000021E15D                 db    ? ;
.bss:000000000021E15E                 db    ? ;
.bss:000000000021E15F                 db    ? ;
.bss:000000000021E160                 db    ? ;
.bss:000000000021E161                 db    ? ;
.bss:000000000021E162                 db    ? ;
.bss:000000000021E163                 db    ? ;
.bss:000000000021E164                 db    ? ;
.bss:000000000021E165                 db    ? ;
.bss:000000000021E166                 db    ? ;
.bss:000000000021E167                 db    ? ;
.bss:000000000021E168                 db    ? ;
.bss:000000000021E169                 db    ? ;
.bss:000000000021E16A                 db    ? ;
.bss:000000000021E16B                 db    ? ;
.bss:000000000021E16C                 db    ? ;
.bss:000000000021E16D                 db    ? ;
.bss:000000000021E16E                 db    ? ;
.bss:000000000021E16F                 db    ? ;
.bss:000000000021E170                 db    ? ;
.bss:000000000021E171                 db    ? ;
.bss:000000000021E172                 db    ? ;
.bss:000000000021E173                 db    ? ;
.bss:000000000021E174                 db    ? ;
.bss:000000000021E175                 db    ? ;
.bss:000000000021E176                 db    ? ;
.bss:000000000021E177                 db    ? ;
.bss:000000000021E178                 db    ? ;
.bss:000000000021E179                 db    ? ;
.bss:000000000021E17A                 db    ? ;
.bss:000000000021E17B                 db    ? ;
.bss:000000000021E17C                 db    ? ;
.bss:000000000021E17D                 db    ? ;
.bss:000000000021E17E                 db    ? ;
.bss:000000000021E17F                 db    ? ;
.bss:000000000021E180                 db    ? ;
.bss:000000000021E181                 db    ? ;
.bss:000000000021E182                 db    ? ;
.bss:000000000021E183                 db    ? ;
.bss:000000000021E184                 db    ? ;
.bss:000000000021E185                 db    ? ;
.bss:000000000021E186                 db    ? ;
.bss:000000000021E187                 db    ? ;
.bss:000000000021E188                 db    ? ;
.bss:000000000021E189                 db    ? ;
.bss:000000000021E18A                 db    ? ;
.bss:000000000021E18B                 db    ? ;
.bss:000000000021E18C                 db    ? ;
.bss:000000000021E18D                 db    ? ;
.bss:000000000021E18E                 db    ? ;
.bss:000000000021E18F                 db    ? ;
.bss:000000000021E190                 db    ? ;
.bss:000000000021E191                 db    ? ;
.bss:000000000021E192                 db    ? ;
.bss:000000000021E193                 db    ? ;
.bss:000000000021E194                 db    ? ;
.bss:000000000021E195                 db    ? ;
.bss:000000000021E196                 db    ? ;
.bss:000000000021E197                 db    ? ;
.bss:000000000021E198                 db    ? ;
.bss:000000000021E199                 db    ? ;
.bss:000000000021E19A                 db    ? ;
.bss:000000000021E19B                 db    ? ;
.bss:000000000021E19C                 db    ? ;
.bss:000000000021E19D                 db    ? ;
.bss:000000000021E19E                 db    ? ;
.bss:000000000021E19F                 db    ? ;
.bss:000000000021E1A0                 db    ? ;
.bss:000000000021E1A1                 db    ? ;
.bss:000000000021E1A2                 db    ? ;
.bss:000000000021E1A3                 db    ? ;
.bss:000000000021E1A4                 db    ? ;
.bss:000000000021E1A5                 db    ? ;
.bss:000000000021E1A6                 db    ? ;
.bss:000000000021E1A7                 db    ? ;
.bss:000000000021E1A8                 db    ? ;
.bss:000000000021E1A9                 db    ? ;
.bss:000000000021E1AA                 db    ? ;
.bss:000000000021E1AB                 db    ? ;
.bss:000000000021E1AC                 db    ? ;
.bss:000000000021E1AD                 db    ? ;
.bss:000000000021E1AE                 db    ? ;
.bss:000000000021E1AF                 db    ? ;
.bss:000000000021E1B0                 db    ? ;
.bss:000000000021E1B1                 db    ? ;
.bss:000000000021E1B2                 db    ? ;
.bss:000000000021E1B3                 db    ? ;
.bss:000000000021E1B4                 db    ? ;
.bss:000000000021E1B5                 db    ? ;
.bss:000000000021E1B6                 db    ? ;
.bss:000000000021E1B7                 db    ? ;
.bss:000000000021E1B8                 db    ? ;
.bss:000000000021E1B9                 db    ? ;
.bss:000000000021E1BA                 db    ? ;
.bss:000000000021E1BB                 db    ? ;
.bss:000000000021E1BC                 db    ? ;
.bss:000000000021E1BD                 db    ? ;
.bss:000000000021E1BE                 db    ? ;
.bss:000000000021E1BF                 db    ? ;
.bss:000000000021E1C0                 db    ? ;
.bss:000000000021E1C1                 db    ? ;
.bss:000000000021E1C2                 db    ? ;
.bss:000000000021E1C3                 db    ? ;
.bss:000000000021E1C4                 db    ? ;
.bss:000000000021E1C5                 db    ? ;
.bss:000000000021E1C6                 db    ? ;
.bss:000000000021E1C7                 db    ? ;
.bss:000000000021E1C8                 db    ? ;
.bss:000000000021E1C9                 db    ? ;
.bss:000000000021E1CA                 db    ? ;
.bss:000000000021E1CB                 db    ? ;
.bss:000000000021E1CC                 db    ? ;
.bss:000000000021E1CD                 db    ? ;
.bss:000000000021E1CE                 db    ? ;
.bss:000000000021E1CF                 db    ? ;
.bss:000000000021E1D0                 db    ? ;
.bss:000000000021E1D1                 db    ? ;
.bss:000000000021E1D2                 db    ? ;
.bss:000000000021E1D3                 db    ? ;
.bss:000000000021E1D4                 db    ? ;
.bss:000000000021E1D5                 db    ? ;
.bss:000000000021E1D6                 db    ? ;
.bss:000000000021E1D7                 db    ? ;
.bss:000000000021E1D8                 db    ? ;
.bss:000000000021E1D9                 db    ? ;
.bss:000000000021E1DA                 db    ? ;
.bss:000000000021E1DB                 db    ? ;
.bss:000000000021E1DC                 db    ? ;
.bss:000000000021E1DD                 db    ? ;
.bss:000000000021E1DE                 db    ? ;
.bss:000000000021E1DF                 db    ? ;
.bss:000000000021E1E0                 db    ? ;
.bss:000000000021E1E1                 db    ? ;
.bss:000000000021E1E2                 db    ? ;
.bss:000000000021E1E3                 db    ? ;
.bss:000000000021E1E4                 db    ? ;
.bss:000000000021E1E5                 db    ? ;
.bss:000000000021E1E6                 db    ? ;
.bss:000000000021E1E7                 db    ? ;
.bss:000000000021E1E8                 db    ? ;
.bss:000000000021E1E9                 db    ? ;
.bss:000000000021E1EA                 db    ? ;
.bss:000000000021E1EB                 db    ? ;
.bss:000000000021E1EC                 db    ? ;
.bss:000000000021E1ED                 db    ? ;
.bss:000000000021E1EE                 db    ? ;
.bss:000000000021E1EF                 db    ? ;
.bss:000000000021E1F0                 db    ? ;
.bss:000000000021E1F1                 db    ? ;
.bss:000000000021E1F2                 db    ? ;
.bss:000000000021E1F3                 db    ? ;
.bss:000000000021E1F4                 db    ? ;
.bss:000000000021E1F5                 db    ? ;
.bss:000000000021E1F6                 db    ? ;
.bss:000000000021E1F7                 db    ? ;
.bss:000000000021E1F8                 db    ? ;
.bss:000000000021E1F9                 db    ? ;
.bss:000000000021E1FA                 db    ? ;
.bss:000000000021E1FB                 db    ? ;
.bss:000000000021E1FC                 db    ? ;
.bss:000000000021E1FD                 db    ? ;
.bss:000000000021E1FE                 db    ? ;
.bss:000000000021E1FF                 db    ? ;
.bss:000000000021E200                 db    ? ;
.bss:000000000021E201                 db    ? ;
.bss:000000000021E202                 db    ? ;
.bss:000000000021E203                 db    ? ;
.bss:000000000021E204                 db    ? ;
.bss:000000000021E205                 db    ? ;
.bss:000000000021E206                 db    ? ;
.bss:000000000021E207                 db    ? ;
.bss:000000000021E208                 db    ? ;
.bss:000000000021E209                 db    ? ;
.bss:000000000021E20A                 db    ? ;
.bss:000000000021E20B                 db    ? ;
.bss:000000000021E20C                 db    ? ;
.bss:000000000021E20D                 db    ? ;
.bss:000000000021E20E                 db    ? ;
.bss:000000000021E20F                 db    ? ;
.bss:000000000021E210                 db    ? ;
.bss:000000000021E211                 db    ? ;
.bss:000000000021E212                 db    ? ;
.bss:000000000021E213                 db    ? ;
.bss:000000000021E214                 db    ? ;
.bss:000000000021E215                 db    ? ;
.bss:000000000021E216                 db    ? ;
.bss:000000000021E217                 db    ? ;
.bss:000000000021E218                 db    ? ;
.bss:000000000021E219                 db    ? ;
.bss:000000000021E21A                 db    ? ;
.bss:000000000021E21B                 db    ? ;
.bss:000000000021E21C                 db    ? ;
.bss:000000000021E21D                 db    ? ;
.bss:000000000021E21E                 db    ? ;
.bss:000000000021E21F                 db    ? ;
.bss:000000000021E220                 db    ? ;
.bss:000000000021E221                 db    ? ;
.bss:000000000021E222                 db    ? ;
.bss:000000000021E223                 db    ? ;
.bss:000000000021E224                 db    ? ;
.bss:000000000021E225                 db    ? ;
.bss:000000000021E226                 db    ? ;
.bss:000000000021E227                 db    ? ;
.bss:000000000021E228                 db    ? ;
.bss:000000000021E229                 db    ? ;
.bss:000000000021E22A                 db    ? ;
.bss:000000000021E22B                 db    ? ;
.bss:000000000021E22C                 db    ? ;
.bss:000000000021E22D                 db    ? ;
.bss:000000000021E22E                 db    ? ;
.bss:000000000021E22F                 db    ? ;
.bss:000000000021E230                 db    ? ;
.bss:000000000021E231                 db    ? ;
.bss:000000000021E232                 db    ? ;
.bss:000000000021E233                 db    ? ;
.bss:000000000021E234                 db    ? ;
.bss:000000000021E235                 db    ? ;
.bss:000000000021E236                 db    ? ;
.bss:000000000021E237                 db    ? ;
.bss:000000000021E238                 db    ? ;
.bss:000000000021E239                 db    ? ;
.bss:000000000021E23A                 db    ? ;
.bss:000000000021E23B                 db    ? ;
.bss:000000000021E23C                 db    ? ;
.bss:000000000021E23D                 db    ? ;
.bss:000000000021E23E                 db    ? ;
.bss:000000000021E23F                 db    ? ;
.bss:000000000021E240                 db    ? ;
.bss:000000000021E241                 db    ? ;
.bss:000000000021E242                 db    ? ;
.bss:000000000021E243                 db    ? ;
.bss:000000000021E244                 db    ? ;
.bss:000000000021E245                 db    ? ;
.bss:000000000021E246                 db    ? ;
.bss:000000000021E247                 db    ? ;
.bss:000000000021E248                 db    ? ;
.bss:000000000021E249                 db    ? ;
.bss:000000000021E24A                 db    ? ;
.bss:000000000021E24B                 db    ? ;
.bss:000000000021E24C                 db    ? ;
.bss:000000000021E24D                 db    ? ;
.bss:000000000021E24E                 db    ? ;
.bss:000000000021E24F                 db    ? ;
.bss:000000000021E250                 db    ? ;
.bss:000000000021E251                 db    ? ;
.bss:000000000021E252                 db    ? ;
.bss:000000000021E253                 db    ? ;
.bss:000000000021E254                 db    ? ;
.bss:000000000021E255                 db    ? ;
.bss:000000000021E256                 db    ? ;
.bss:000000000021E257                 db    ? ;
.bss:000000000021E258                 db    ? ;
.bss:000000000021E259                 db    ? ;
.bss:000000000021E25A                 db    ? ;
.bss:000000000021E25B                 db    ? ;
.bss:000000000021E25C                 db    ? ;
.bss:000000000021E25D                 db    ? ;
.bss:000000000021E25E                 db    ? ;
.bss:000000000021E25F                 db    ? ;
.bss:000000000021E260                 db    ? ;
.bss:000000000021E261                 db    ? ;
.bss:000000000021E262                 db    ? ;
.bss:000000000021E263                 db    ? ;
.bss:000000000021E264                 db    ? ;
.bss:000000000021E265                 db    ? ;
.bss:000000000021E266                 db    ? ;
.bss:000000000021E267                 db    ? ;
.bss:000000000021E268                 db    ? ;
.bss:000000000021E269                 db    ? ;
.bss:000000000021E26A                 db    ? ;
.bss:000000000021E26B                 db    ? ;
.bss:000000000021E26C                 db    ? ;
.bss:000000000021E26D                 db    ? ;
.bss:000000000021E26E                 db    ? ;
.bss:000000000021E26F                 db    ? ;
.bss:000000000021E270                 db    ? ;
.bss:000000000021E271                 db    ? ;
.bss:000000000021E272                 db    ? ;
.bss:000000000021E273                 db    ? ;
.bss:000000000021E274                 db    ? ;
.bss:000000000021E275                 db    ? ;
.bss:000000000021E276                 db    ? ;
.bss:000000000021E277                 db    ? ;
.bss:000000000021E278                 db    ? ;
.bss:000000000021E279                 db    ? ;
.bss:000000000021E27A                 db    ? ;
.bss:000000000021E27B                 db    ? ;
.bss:000000000021E27C                 db    ? ;
.bss:000000000021E27D                 db    ? ;
.bss:000000000021E27E                 db    ? ;
.bss:000000000021E27F                 db    ? ;
.bss:000000000021E280                 db    ? ;
.bss:000000000021E281                 db    ? ;
.bss:000000000021E282                 db    ? ;
.bss:000000000021E283                 db    ? ;
.bss:000000000021E284                 db    ? ;
.bss:000000000021E285                 db    ? ;
.bss:000000000021E286                 db    ? ;
.bss:000000000021E287                 db    ? ;
.bss:000000000021E288                 db    ? ;
.bss:000000000021E289                 db    ? ;
.bss:000000000021E28A                 db    ? ;
.bss:000000000021E28B                 db    ? ;
.bss:000000000021E28C                 db    ? ;
.bss:000000000021E28D                 db    ? ;
.bss:000000000021E28E                 db    ? ;
.bss:000000000021E28F                 db    ? ;
.bss:000000000021E290                 db    ? ;
.bss:000000000021E291                 db    ? ;
.bss:000000000021E292                 db    ? ;
.bss:000000000021E293                 db    ? ;
.bss:000000000021E294                 db    ? ;
.bss:000000000021E295                 db    ? ;
.bss:000000000021E296                 db    ? ;
.bss:000000000021E297                 db    ? ;
.bss:000000000021E298                 db    ? ;
.bss:000000000021E299                 db    ? ;
.bss:000000000021E29A                 db    ? ;
.bss:000000000021E29B                 db    ? ;
.bss:000000000021E29C                 db    ? ;
.bss:000000000021E29D                 db    ? ;
.bss:000000000021E29E                 db    ? ;
.bss:000000000021E29F                 db    ? ;
.bss:000000000021E2A0                 db    ? ;
.bss:000000000021E2A1                 db    ? ;
.bss:000000000021E2A2                 db    ? ;
.bss:000000000021E2A3                 db    ? ;
.bss:000000000021E2A4                 db    ? ;
.bss:000000000021E2A5                 db    ? ;
.bss:000000000021E2A6                 db    ? ;
.bss:000000000021E2A7                 db    ? ;
.bss:000000000021E2A8                 db    ? ;
.bss:000000000021E2A9                 db    ? ;
.bss:000000000021E2AA                 db    ? ;
.bss:000000000021E2AB                 db    ? ;
.bss:000000000021E2AC                 db    ? ;
.bss:000000000021E2AD                 db    ? ;
.bss:000000000021E2AE                 db    ? ;
.bss:000000000021E2AF                 db    ? ;
.bss:000000000021E2B0                 db    ? ;
.bss:000000000021E2B1                 db    ? ;
.bss:000000000021E2B2                 db    ? ;
.bss:000000000021E2B3                 db    ? ;
.bss:000000000021E2B4                 db    ? ;
.bss:000000000021E2B5                 db    ? ;
.bss:000000000021E2B6                 db    ? ;
.bss:000000000021E2B7                 db    ? ;
.bss:000000000021E2B8                 db    ? ;
.bss:000000000021E2B9                 db    ? ;
.bss:000000000021E2BA                 db    ? ;
.bss:000000000021E2BB                 db    ? ;
.bss:000000000021E2BC                 db    ? ;
.bss:000000000021E2BD                 db    ? ;
.bss:000000000021E2BE                 db    ? ;
.bss:000000000021E2BF                 db    ? ;
.bss:000000000021E2C0                 db    ? ;
.bss:000000000021E2C1                 db    ? ;
.bss:000000000021E2C2                 db    ? ;
.bss:000000000021E2C3                 db    ? ;
.bss:000000000021E2C4                 db    ? ;
.bss:000000000021E2C5                 db    ? ;
.bss:000000000021E2C6                 db    ? ;
.bss:000000000021E2C7                 db    ? ;
.bss:000000000021E2C8                 db    ? ;
.bss:000000000021E2C9                 db    ? ;
.bss:000000000021E2CA                 db    ? ;
.bss:000000000021E2CB                 db    ? ;
.bss:000000000021E2CC                 db    ? ;
.bss:000000000021E2CD                 db    ? ;
.bss:000000000021E2CE                 db    ? ;
.bss:000000000021E2CF                 db    ? ;
.bss:000000000021E2D0                 db    ? ;
.bss:000000000021E2D1                 db    ? ;
.bss:000000000021E2D2                 db    ? ;
.bss:000000000021E2D3                 db    ? ;
.bss:000000000021E2D4                 db    ? ;
.bss:000000000021E2D5                 db    ? ;
.bss:000000000021E2D6                 db    ? ;
.bss:000000000021E2D7                 db    ? ;
.bss:000000000021E2D8                 db    ? ;
.bss:000000000021E2D9                 db    ? ;
.bss:000000000021E2DA                 db    ? ;
.bss:000000000021E2DB                 db    ? ;
.bss:000000000021E2DC                 db    ? ;
.bss:000000000021E2DD                 db    ? ;
.bss:000000000021E2DE                 db    ? ;
.bss:000000000021E2DF                 db    ? ;
.bss:000000000021E2E0                 db    ? ;
.bss:000000000021E2E1                 db    ? ;
.bss:000000000021E2E2                 db    ? ;
.bss:000000000021E2E3                 db    ? ;
.bss:000000000021E2E4                 db    ? ;
.bss:000000000021E2E5                 db    ? ;
.bss:000000000021E2E6                 db    ? ;
.bss:000000000021E2E7                 db    ? ;
.bss:000000000021E2E8                 db    ? ;
.bss:000000000021E2E9                 db    ? ;
.bss:000000000021E2EA                 db    ? ;
.bss:000000000021E2EB                 db    ? ;
.bss:000000000021E2EC                 db    ? ;
.bss:000000000021E2ED                 db    ? ;
.bss:000000000021E2EE                 db    ? ;
.bss:000000000021E2EF                 db    ? ;
.bss:000000000021E2F0                 db    ? ;
.bss:000000000021E2F1                 db    ? ;
.bss:000000000021E2F2                 db    ? ;
.bss:000000000021E2F3                 db    ? ;
.bss:000000000021E2F4                 db    ? ;
.bss:000000000021E2F5                 db    ? ;
.bss:000000000021E2F6                 db    ? ;
.bss:000000000021E2F7                 db    ? ;
.bss:000000000021E2F8                 db    ? ;
.bss:000000000021E2F9                 db    ? ;
.bss:000000000021E2FA                 db    ? ;
.bss:000000000021E2FB                 db    ? ;
.bss:000000000021E2FC                 db    ? ;
.bss:000000000021E2FD                 db    ? ;
.bss:000000000021E2FE                 db    ? ;
.bss:000000000021E2FF                 db    ? ;
.bss:000000000021E300                 db    ? ;
.bss:000000000021E301                 db    ? ;
.bss:000000000021E302                 db    ? ;
.bss:000000000021E303                 db    ? ;
.bss:000000000021E304                 db    ? ;
.bss:000000000021E305                 db    ? ;
.bss:000000000021E306                 db    ? ;
.bss:000000000021E307                 db    ? ;
.bss:000000000021E308                 db    ? ;
.bss:000000000021E309                 db    ? ;
.bss:000000000021E30A                 db    ? ;
.bss:000000000021E30B                 db    ? ;
.bss:000000000021E30C                 db    ? ;
.bss:000000000021E30D                 db    ? ;
.bss:000000000021E30E                 db    ? ;
.bss:000000000021E30F                 db    ? ;
.bss:000000000021E310                 db    ? ;
.bss:000000000021E311                 db    ? ;
.bss:000000000021E312                 db    ? ;
.bss:000000000021E313                 db    ? ;
.bss:000000000021E314                 db    ? ;
.bss:000000000021E315                 db    ? ;
.bss:000000000021E316                 db    ? ;
.bss:000000000021E317                 db    ? ;
.bss:000000000021E318                 db    ? ;
.bss:000000000021E319                 db    ? ;
.bss:000000000021E31A                 db    ? ;
.bss:000000000021E31B                 db    ? ;
.bss:000000000021E31C                 db    ? ;
.bss:000000000021E31D                 db    ? ;
.bss:000000000021E31E                 db    ? ;
.bss:000000000021E31F                 db    ? ;
.bss:000000000021E320                 db    ? ;
.bss:000000000021E321                 db    ? ;
.bss:000000000021E322                 db    ? ;
.bss:000000000021E323                 db    ? ;
.bss:000000000021E324                 db    ? ;
.bss:000000000021E325                 db    ? ;
.bss:000000000021E326                 db    ? ;
.bss:000000000021E327                 db    ? ;
.bss:000000000021E328                 db    ? ;
.bss:000000000021E329                 db    ? ;
.bss:000000000021E32A                 db    ? ;
.bss:000000000021E32B                 db    ? ;
.bss:000000000021E32C                 db    ? ;
.bss:000000000021E32D                 db    ? ;
.bss:000000000021E32E                 db    ? ;
.bss:000000000021E32F                 db    ? ;
.bss:000000000021E330                 db    ? ;
.bss:000000000021E331                 db    ? ;
.bss:000000000021E332                 db    ? ;
.bss:000000000021E333                 db    ? ;
.bss:000000000021E334                 db    ? ;
.bss:000000000021E335                 db    ? ;
.bss:000000000021E336                 db    ? ;
.bss:000000000021E337                 db    ? ;
.bss:000000000021E338                 db    ? ;
.bss:000000000021E339                 db    ? ;
.bss:000000000021E33A                 db    ? ;
.bss:000000000021E33B                 db    ? ;
.bss:000000000021E33C                 db    ? ;
.bss:000000000021E33D                 db    ? ;
.bss:000000000021E33E                 db    ? ;
.bss:000000000021E33F                 db    ? ;
.bss:000000000021E340                 db    ? ;
.bss:000000000021E341                 db    ? ;
.bss:000000000021E342                 db    ? ;
.bss:000000000021E343                 db    ? ;
.bss:000000000021E344                 db    ? ;
.bss:000000000021E345                 db    ? ;
.bss:000000000021E346                 db    ? ;
.bss:000000000021E347                 db    ? ;
.bss:000000000021E348                 db    ? ;
.bss:000000000021E349                 db    ? ;
.bss:000000000021E34A                 db    ? ;
.bss:000000000021E34B                 db    ? ;
.bss:000000000021E34C                 db    ? ;
.bss:000000000021E34D                 db    ? ;
.bss:000000000021E34E                 db    ? ;
.bss:000000000021E34F                 db    ? ;
.bss:000000000021E350                 db    ? ;
.bss:000000000021E351                 db    ? ;
.bss:000000000021E352                 db    ? ;
.bss:000000000021E353                 db    ? ;
.bss:000000000021E354                 db    ? ;
.bss:000000000021E355                 db    ? ;
.bss:000000000021E356                 db    ? ;
.bss:000000000021E357                 db    ? ;
.bss:000000000021E358                 db    ? ;
.bss:000000000021E359                 db    ? ;
.bss:000000000021E35A                 db    ? ;
.bss:000000000021E35B                 db    ? ;
.bss:000000000021E35C                 db    ? ;
.bss:000000000021E35D                 db    ? ;
.bss:000000000021E35E                 db    ? ;
.bss:000000000021E35F                 db    ? ;
.bss:000000000021E360                 db    ? ;
.bss:000000000021E361                 db    ? ;
.bss:000000000021E362                 db    ? ;
.bss:000000000021E363                 db    ? ;
.bss:000000000021E364                 db    ? ;
.bss:000000000021E365                 db    ? ;
.bss:000000000021E366                 db    ? ;
.bss:000000000021E367                 db    ? ;
.bss:000000000021E368                 db    ? ;
.bss:000000000021E369                 db    ? ;
.bss:000000000021E36A                 db    ? ;
.bss:000000000021E36B                 db    ? ;
.bss:000000000021E36C                 db    ? ;
.bss:000000000021E36D                 db    ? ;
.bss:000000000021E36E                 db    ? ;
.bss:000000000021E36F                 db    ? ;
.bss:000000000021E370                 db    ? ;
.bss:000000000021E371                 db    ? ;
.bss:000000000021E372                 db    ? ;
.bss:000000000021E373                 db    ? ;
.bss:000000000021E374                 db    ? ;
.bss:000000000021E375                 db    ? ;
.bss:000000000021E376                 db    ? ;
.bss:000000000021E377                 db    ? ;
.bss:000000000021E378                 db    ? ;
.bss:000000000021E379                 db    ? ;
.bss:000000000021E37A                 db    ? ;
.bss:000000000021E37B                 db    ? ;
.bss:000000000021E37C                 db    ? ;
.bss:000000000021E37D                 db    ? ;
.bss:000000000021E37E                 db    ? ;
.bss:000000000021E37F                 db    ? ;
.bss:000000000021E380                 db    ? ;
.bss:000000000021E381                 db    ? ;
.bss:000000000021E382                 db    ? ;
.bss:000000000021E383                 db    ? ;
.bss:000000000021E384                 db    ? ;
.bss:000000000021E385                 db    ? ;
.bss:000000000021E386                 db    ? ;
.bss:000000000021E387                 db    ? ;
.bss:000000000021E388                 db    ? ;
.bss:000000000021E389                 db    ? ;
.bss:000000000021E38A                 db    ? ;
.bss:000000000021E38B                 db    ? ;
.bss:000000000021E38C                 db    ? ;
.bss:000000000021E38D                 db    ? ;
.bss:000000000021E38E                 db    ? ;
.bss:000000000021E38F                 db    ? ;
.bss:000000000021E390                 db    ? ;
.bss:000000000021E391                 db    ? ;
.bss:000000000021E392                 db    ? ;
.bss:000000000021E393                 db    ? ;
.bss:000000000021E394                 db    ? ;
.bss:000000000021E395                 db    ? ;
.bss:000000000021E396                 db    ? ;
.bss:000000000021E397                 db    ? ;
.bss:000000000021E398                 db    ? ;
.bss:000000000021E399                 db    ? ;
.bss:000000000021E39A                 db    ? ;
.bss:000000000021E39B                 db    ? ;
.bss:000000000021E39C                 db    ? ;
.bss:000000000021E39D                 db    ? ;
.bss:000000000021E39E                 db    ? ;
.bss:000000000021E39F                 db    ? ;
.bss:000000000021E3A0                 db    ? ;
.bss:000000000021E3A1                 db    ? ;
.bss:000000000021E3A2                 db    ? ;
.bss:000000000021E3A3                 db    ? ;
.bss:000000000021E3A4                 db    ? ;
.bss:000000000021E3A5                 db    ? ;
.bss:000000000021E3A6                 db    ? ;
.bss:000000000021E3A7                 db    ? ;
.bss:000000000021E3A8                 db    ? ;
.bss:000000000021E3A9                 db    ? ;
.bss:000000000021E3AA                 db    ? ;
.bss:000000000021E3AB                 db    ? ;
.bss:000000000021E3AC                 db    ? ;
.bss:000000000021E3AD                 db    ? ;
.bss:000000000021E3AE                 db    ? ;
.bss:000000000021E3AF                 db    ? ;
.bss:000000000021E3B0                 db    ? ;
.bss:000000000021E3B1                 db    ? ;
.bss:000000000021E3B2                 db    ? ;
.bss:000000000021E3B3                 db    ? ;
.bss:000000000021E3B4                 db    ? ;
.bss:000000000021E3B5                 db    ? ;
.bss:000000000021E3B6                 db    ? ;
.bss:000000000021E3B7                 db    ? ;
.bss:000000000021E3B8                 db    ? ;
.bss:000000000021E3B9                 db    ? ;
.bss:000000000021E3BA                 db    ? ;
.bss:000000000021E3BB                 db    ? ;
.bss:000000000021E3BC                 db    ? ;
.bss:000000000021E3BD                 db    ? ;
.bss:000000000021E3BE                 db    ? ;
.bss:000000000021E3BF                 db    ? ;
.bss:000000000021E3C0                 db    ? ;
.bss:000000000021E3C1                 db    ? ;
.bss:000000000021E3C2                 db    ? ;
.bss:000000000021E3C3                 db    ? ;
.bss:000000000021E3C4                 db    ? ;
.bss:000000000021E3C5                 db    ? ;
.bss:000000000021E3C6                 db    ? ;
.bss:000000000021E3C7                 db    ? ;
.bss:000000000021E3C8                 db    ? ;
.bss:000000000021E3C9                 db    ? ;
.bss:000000000021E3CA                 db    ? ;
.bss:000000000021E3CB                 db    ? ;
.bss:000000000021E3CC                 db    ? ;
.bss:000000000021E3CD                 db    ? ;
.bss:000000000021E3CE                 db    ? ;
.bss:000000000021E3CF                 db    ? ;
.bss:000000000021E3D0                 db    ? ;
.bss:000000000021E3D1                 db    ? ;
.bss:000000000021E3D2                 db    ? ;
.bss:000000000021E3D3                 db    ? ;
.bss:000000000021E3D4                 db    ? ;
.bss:000000000021E3D5                 db    ? ;
.bss:000000000021E3D6                 db    ? ;
.bss:000000000021E3D7                 db    ? ;
.bss:000000000021E3D8                 db    ? ;
.bss:000000000021E3D9                 db    ? ;
.bss:000000000021E3DA                 db    ? ;
.bss:000000000021E3DB                 db    ? ;
.bss:000000000021E3DC                 db    ? ;
.bss:000000000021E3DD                 db    ? ;
.bss:000000000021E3DE                 db    ? ;
.bss:000000000021E3DF                 db    ? ;
.bss:000000000021E3E0                 db    ? ;
.bss:000000000021E3E1                 db    ? ;
.bss:000000000021E3E2                 db    ? ;
.bss:000000000021E3E3                 db    ? ;
.bss:000000000021E3E4                 db    ? ;
.bss:000000000021E3E5                 db    ? ;
.bss:000000000021E3E6                 db    ? ;
.bss:000000000021E3E7                 db    ? ;
.bss:000000000021E3E8                 db    ? ;
.bss:000000000021E3E9                 db    ? ;
.bss:000000000021E3EA                 db    ? ;
.bss:000000000021E3EB                 db    ? ;
.bss:000000000021E3EC                 db    ? ;
.bss:000000000021E3ED                 db    ? ;
.bss:000000000021E3EE                 db    ? ;
.bss:000000000021E3EF                 db    ? ;
.bss:000000000021E3F0                 db    ? ;
.bss:000000000021E3F1                 db    ? ;
.bss:000000000021E3F2                 db    ? ;
.bss:000000000021E3F3                 db    ? ;
.bss:000000000021E3F4                 db    ? ;
.bss:000000000021E3F5                 db    ? ;
.bss:000000000021E3F6                 db    ? ;
.bss:000000000021E3F7                 db    ? ;
.bss:000000000021E3F8                 db    ? ;
.bss:000000000021E3F9                 db    ? ;
.bss:000000000021E3FA                 db    ? ;
.bss:000000000021E3FB                 db    ? ;
.bss:000000000021E3FC                 db    ? ;
.bss:000000000021E3FD                 db    ? ;
.bss:000000000021E3FE                 db    ? ;
.bss:000000000021E3FF                 db    ? ;
.bss:000000000021E400                 db    ? ;
.bss:000000000021E401                 db    ? ;
.bss:000000000021E402                 db    ? ;
.bss:000000000021E403                 db    ? ;
.bss:000000000021E404                 db    ? ;
.bss:000000000021E405                 db    ? ;
.bss:000000000021E406                 db    ? ;
.bss:000000000021E407                 db    ? ;
.bss:000000000021E408                 db    ? ;
.bss:000000000021E409                 db    ? ;
.bss:000000000021E40A                 db    ? ;
.bss:000000000021E40B                 db    ? ;
.bss:000000000021E40C                 db    ? ;
.bss:000000000021E40D                 db    ? ;
.bss:000000000021E40E                 db    ? ;
.bss:000000000021E40F                 db    ? ;
.bss:000000000021E410                 db    ? ;
.bss:000000000021E411                 db    ? ;
.bss:000000000021E412                 db    ? ;
.bss:000000000021E413                 db    ? ;
.bss:000000000021E414                 db    ? ;
.bss:000000000021E415                 db    ? ;
.bss:000000000021E416                 db    ? ;
.bss:000000000021E417                 db    ? ;
.bss:000000000021E418                 db    ? ;
.bss:000000000021E419                 db    ? ;
.bss:000000000021E41A                 db    ? ;
.bss:000000000021E41B                 db    ? ;
.bss:000000000021E41C                 db    ? ;
.bss:000000000021E41D                 db    ? ;
.bss:000000000021E41E                 db    ? ;
.bss:000000000021E41F                 db    ? ;
.bss:000000000021E420                 db    ? ;
.bss:000000000021E421                 db    ? ;
.bss:000000000021E422                 db    ? ;
.bss:000000000021E423                 db    ? ;
.bss:000000000021E424                 db    ? ;
.bss:000000000021E425                 db    ? ;
.bss:000000000021E426                 db    ? ;
.bss:000000000021E427                 db    ? ;
.bss:000000000021E428                 db    ? ;
.bss:000000000021E429                 db    ? ;
.bss:000000000021E42A                 db    ? ;
.bss:000000000021E42B                 db    ? ;
.bss:000000000021E42C                 db    ? ;
.bss:000000000021E42D                 db    ? ;
.bss:000000000021E42E                 db    ? ;
.bss:000000000021E42F                 db    ? ;
.bss:000000000021E430                 db    ? ;
.bss:000000000021E431                 db    ? ;
.bss:000000000021E432                 db    ? ;
.bss:000000000021E433                 db    ? ;
.bss:000000000021E434                 db    ? ;
.bss:000000000021E435                 db    ? ;
.bss:000000000021E436                 db    ? ;
.bss:000000000021E437                 db    ? ;
.bss:000000000021E438                 db    ? ;
.bss:000000000021E439                 db    ? ;
.bss:000000000021E43A                 db    ? ;
.bss:000000000021E43B                 db    ? ;
.bss:000000000021E43C                 db    ? ;
.bss:000000000021E43D                 db    ? ;
.bss:000000000021E43E                 db    ? ;
.bss:000000000021E43F                 db    ? ;
.bss:000000000021E440                 db    ? ;
.bss:000000000021E441                 db    ? ;
.bss:000000000021E442                 db    ? ;
.bss:000000000021E443                 db    ? ;
.bss:000000000021E444                 db    ? ;
.bss:000000000021E445                 db    ? ;
.bss:000000000021E446                 db    ? ;
.bss:000000000021E447                 db    ? ;
.bss:000000000021E448                 db    ? ;
.bss:000000000021E449                 db    ? ;
.bss:000000000021E44A                 db    ? ;
.bss:000000000021E44B                 db    ? ;
.bss:000000000021E44C                 db    ? ;
.bss:000000000021E44D                 db    ? ;
.bss:000000000021E44E                 db    ? ;
.bss:000000000021E44F                 db    ? ;
.bss:000000000021E450                 db    ? ;
.bss:000000000021E451                 db    ? ;
.bss:000000000021E452                 db    ? ;
.bss:000000000021E453                 db    ? ;
.bss:000000000021E454                 db    ? ;
.bss:000000000021E455                 db    ? ;
.bss:000000000021E456                 db    ? ;
.bss:000000000021E457                 db    ? ;
.bss:000000000021E458                 db    ? ;
.bss:000000000021E459                 db    ? ;
.bss:000000000021E45A                 db    ? ;
.bss:000000000021E45B                 db    ? ;
.bss:000000000021E45C                 db    ? ;
.bss:000000000021E45D                 db    ? ;
.bss:000000000021E45E                 db    ? ;
.bss:000000000021E45F                 db    ? ;
.bss:000000000021E460                 db    ? ;
.bss:000000000021E461                 db    ? ;
.bss:000000000021E462                 db    ? ;
.bss:000000000021E463                 db    ? ;
.bss:000000000021E464                 db    ? ;
.bss:000000000021E465                 db    ? ;
.bss:000000000021E466                 db    ? ;
.bss:000000000021E467                 db    ? ;
.bss:000000000021E468                 db    ? ;
.bss:000000000021E469                 db    ? ;
.bss:000000000021E46A                 db    ? ;
.bss:000000000021E46B                 db    ? ;
.bss:000000000021E46C                 db    ? ;
.bss:000000000021E46D                 db    ? ;
.bss:000000000021E46E                 db    ? ;
.bss:000000000021E46F                 db    ? ;
.bss:000000000021E470                 db    ? ;
.bss:000000000021E471                 db    ? ;
.bss:000000000021E472                 db    ? ;
.bss:000000000021E473                 db    ? ;
.bss:000000000021E474                 db    ? ;
.bss:000000000021E475                 db    ? ;
.bss:000000000021E476                 db    ? ;
.bss:000000000021E477                 db    ? ;
.bss:000000000021E478                 db    ? ;
.bss:000000000021E479                 db    ? ;
.bss:000000000021E47A                 db    ? ;
.bss:000000000021E47B                 db    ? ;
.bss:000000000021E47C                 db    ? ;
.bss:000000000021E47D                 db    ? ;
.bss:000000000021E47E                 db    ? ;
.bss:000000000021E47F                 db    ? ;
.bss:000000000021E480                 db    ? ;
.bss:000000000021E481                 db    ? ;
.bss:000000000021E482                 db    ? ;
.bss:000000000021E483                 db    ? ;
.bss:000000000021E484                 db    ? ;
.bss:000000000021E485                 db    ? ;
.bss:000000000021E486                 db    ? ;
.bss:000000000021E487                 db    ? ;
.bss:000000000021E488                 db    ? ;
.bss:000000000021E489                 db    ? ;
.bss:000000000021E48A                 db    ? ;
.bss:000000000021E48B                 db    ? ;
.bss:000000000021E48C                 db    ? ;
.bss:000000000021E48D                 db    ? ;
.bss:000000000021E48E                 db    ? ;
.bss:000000000021E48F                 db    ? ;
.bss:000000000021E490                 db    ? ;
.bss:000000000021E491                 db    ? ;
.bss:000000000021E492                 db    ? ;
.bss:000000000021E493                 db    ? ;
.bss:000000000021E494                 db    ? ;
.bss:000000000021E495                 db    ? ;
.bss:000000000021E496                 db    ? ;
.bss:000000000021E497                 db    ? ;
.bss:000000000021E498                 db    ? ;
.bss:000000000021E499                 db    ? ;
.bss:000000000021E49A                 db    ? ;
.bss:000000000021E49B                 db    ? ;
.bss:000000000021E49C                 db    ? ;
.bss:000000000021E49D                 db    ? ;
.bss:000000000021E49E                 db    ? ;
.bss:000000000021E49F                 db    ? ;
.bss:000000000021E4A0                 db    ? ;
.bss:000000000021E4A1                 db    ? ;
.bss:000000000021E4A2                 db    ? ;
.bss:000000000021E4A3                 db    ? ;
.bss:000000000021E4A4                 db    ? ;
.bss:000000000021E4A5                 db    ? ;
.bss:000000000021E4A6                 db    ? ;
.bss:000000000021E4A7                 db    ? ;
.bss:000000000021E4A8                 db    ? ;
.bss:000000000021E4A9                 db    ? ;
.bss:000000000021E4AA                 db    ? ;
.bss:000000000021E4AB                 db    ? ;
.bss:000000000021E4AC                 db    ? ;
.bss:000000000021E4AD                 db    ? ;
.bss:000000000021E4AE                 db    ? ;
.bss:000000000021E4AF                 db    ? ;
.bss:000000000021E4B0                 db    ? ;
.bss:000000000021E4B1                 db    ? ;
.bss:000000000021E4B2                 db    ? ;
.bss:000000000021E4B3                 db    ? ;
.bss:000000000021E4B4                 db    ? ;
.bss:000000000021E4B5                 db    ? ;
.bss:000000000021E4B6                 db    ? ;
.bss:000000000021E4B7                 db    ? ;
.bss:000000000021E4B8                 db    ? ;
.bss:000000000021E4B9                 db    ? ;
.bss:000000000021E4BA                 db    ? ;
.bss:000000000021E4BB                 db    ? ;
.bss:000000000021E4BC                 db    ? ;
.bss:000000000021E4BD                 db    ? ;
.bss:000000000021E4BE                 db    ? ;
.bss:000000000021E4BF                 db    ? ;
.bss:000000000021E4C0                 db    ? ;
.bss:000000000021E4C1                 db    ? ;
.bss:000000000021E4C2                 db    ? ;
.bss:000000000021E4C3                 db    ? ;
.bss:000000000021E4C4                 db    ? ;
.bss:000000000021E4C5                 db    ? ;
.bss:000000000021E4C6                 db    ? ;
.bss:000000000021E4C7                 db    ? ;
.bss:000000000021E4C8                 db    ? ;
.bss:000000000021E4C9                 db    ? ;
.bss:000000000021E4CA                 db    ? ;
.bss:000000000021E4CB                 db    ? ;
.bss:000000000021E4CC                 db    ? ;
.bss:000000000021E4CD                 db    ? ;
.bss:000000000021E4CE                 db    ? ;
.bss:000000000021E4CF                 db    ? ;
.bss:000000000021E4D0                 db    ? ;
.bss:000000000021E4D1                 db    ? ;
.bss:000000000021E4D2                 db    ? ;
.bss:000000000021E4D3                 db    ? ;
.bss:000000000021E4D4                 db    ? ;
.bss:000000000021E4D5                 db    ? ;
.bss:000000000021E4D6                 db    ? ;
.bss:000000000021E4D7                 db    ? ;
.bss:000000000021E4D8                 db    ? ;
.bss:000000000021E4D9                 db    ? ;
.bss:000000000021E4DA                 db    ? ;
.bss:000000000021E4DB                 db    ? ;
.bss:000000000021E4DC                 db    ? ;
.bss:000000000021E4DD                 db    ? ;
.bss:000000000021E4DE                 db    ? ;
.bss:000000000021E4DF                 db    ? ;
.bss:000000000021E4E0                 db    ? ;
.bss:000000000021E4E1                 db    ? ;
.bss:000000000021E4E2                 db    ? ;
.bss:000000000021E4E3                 db    ? ;
.bss:000000000021E4E4                 db    ? ;
.bss:000000000021E4E5                 db    ? ;
.bss:000000000021E4E6                 db    ? ;
.bss:000000000021E4E7                 db    ? ;
.bss:000000000021E4E8                 db    ? ;
.bss:000000000021E4E9                 db    ? ;
.bss:000000000021E4EA                 db    ? ;
.bss:000000000021E4EB                 db    ? ;
.bss:000000000021E4EC                 db    ? ;
.bss:000000000021E4ED                 db    ? ;
.bss:000000000021E4EE                 db    ? ;
.bss:000000000021E4EF                 db    ? ;
.bss:000000000021E4F0                 db    ? ;
.bss:000000000021E4F1                 db    ? ;
.bss:000000000021E4F2                 db    ? ;
.bss:000000000021E4F3                 db    ? ;
.bss:000000000021E4F4                 db    ? ;
.bss:000000000021E4F5                 db    ? ;
.bss:000000000021E4F6                 db    ? ;
.bss:000000000021E4F7                 db    ? ;
.bss:000000000021E4F8                 db    ? ;
.bss:000000000021E4F9                 db    ? ;
.bss:000000000021E4FA                 db    ? ;
.bss:000000000021E4FB                 db    ? ;
.bss:000000000021E4FC                 db    ? ;
.bss:000000000021E4FD                 db    ? ;
.bss:000000000021E4FE                 db    ? ;
.bss:000000000021E4FF                 db    ? ;
.bss:000000000021E500                 db    ? ;
.bss:000000000021E501                 db    ? ;
.bss:000000000021E502                 db    ? ;
.bss:000000000021E503                 db    ? ;
.bss:000000000021E504                 db    ? ;
.bss:000000000021E505                 db    ? ;
.bss:000000000021E506                 db    ? ;
.bss:000000000021E507                 db    ? ;
.bss:000000000021E508                 db    ? ;
.bss:000000000021E509                 db    ? ;
.bss:000000000021E50A                 db    ? ;
.bss:000000000021E50B                 db    ? ;
.bss:000000000021E50C                 db    ? ;
.bss:000000000021E50D                 db    ? ;
.bss:000000000021E50E                 db    ? ;
.bss:000000000021E50F                 db    ? ;
.bss:000000000021E510                 db    ? ;
.bss:000000000021E511                 db    ? ;
.bss:000000000021E512                 db    ? ;
.bss:000000000021E513                 db    ? ;
.bss:000000000021E514                 db    ? ;
.bss:000000000021E515                 db    ? ;
.bss:000000000021E516                 db    ? ;
.bss:000000000021E517                 db    ? ;
.bss:000000000021E518                 db    ? ;
.bss:000000000021E519                 db    ? ;
.bss:000000000021E51A                 db    ? ;
.bss:000000000021E51B                 db    ? ;
.bss:000000000021E51C                 db    ? ;
.bss:000000000021E51D                 db    ? ;
.bss:000000000021E51E                 db    ? ;
.bss:000000000021E51F                 db    ? ;
.bss:000000000021E520                 db    ? ;
.bss:000000000021E521                 db    ? ;
.bss:000000000021E522                 db    ? ;
.bss:000000000021E523                 db    ? ;
.bss:000000000021E524                 db    ? ;
.bss:000000000021E525                 db    ? ;
.bss:000000000021E526                 db    ? ;
.bss:000000000021E527                 db    ? ;
.bss:000000000021E528                 db    ? ;
.bss:000000000021E529                 db    ? ;
.bss:000000000021E52A                 db    ? ;
.bss:000000000021E52B                 db    ? ;
.bss:000000000021E52C                 db    ? ;
.bss:000000000021E52D                 db    ? ;
.bss:000000000021E52E                 db    ? ;
.bss:000000000021E52F                 db    ? ;
.bss:000000000021E530                 db    ? ;
.bss:000000000021E531                 db    ? ;
.bss:000000000021E532                 db    ? ;
.bss:000000000021E533                 db    ? ;
.bss:000000000021E534                 db    ? ;
.bss:000000000021E535                 db    ? ;
.bss:000000000021E536                 db    ? ;
.bss:000000000021E537                 db    ? ;
.bss:000000000021E538                 db    ? ;
.bss:000000000021E539                 db    ? ;
.bss:000000000021E53A                 db    ? ;
.bss:000000000021E53B                 db    ? ;
.bss:000000000021E53C                 db    ? ;
.bss:000000000021E53D                 db    ? ;
.bss:000000000021E53E                 db    ? ;
.bss:000000000021E53F                 db    ? ;
.bss:000000000021E540                 db    ? ;
.bss:000000000021E541                 db    ? ;
.bss:000000000021E542                 db    ? ;
.bss:000000000021E543                 db    ? ;
.bss:000000000021E544                 db    ? ;
.bss:000000000021E545                 db    ? ;
.bss:000000000021E546                 db    ? ;
.bss:000000000021E547                 db    ? ;
.bss:000000000021E548                 db    ? ;
.bss:000000000021E549                 db    ? ;
.bss:000000000021E54A                 db    ? ;
.bss:000000000021E54B                 db    ? ;
.bss:000000000021E54C                 db    ? ;
.bss:000000000021E54D                 db    ? ;
.bss:000000000021E54E                 db    ? ;
.bss:000000000021E54F                 db    ? ;
.bss:000000000021E550                 db    ? ;
.bss:000000000021E551                 db    ? ;
.bss:000000000021E552                 db    ? ;
.bss:000000000021E553                 db    ? ;
.bss:000000000021E554                 db    ? ;
.bss:000000000021E555                 db    ? ;
.bss:000000000021E556                 db    ? ;
.bss:000000000021E557                 db    ? ;
.bss:000000000021E558                 db    ? ;
.bss:000000000021E559                 db    ? ;
.bss:000000000021E55A                 db    ? ;
.bss:000000000021E55B                 db    ? ;
.bss:000000000021E55C                 db    ? ;
.bss:000000000021E55D                 db    ? ;
.bss:000000000021E55E                 db    ? ;
.bss:000000000021E55F                 db    ? ;
.bss:000000000021E560                 db    ? ;
.bss:000000000021E561                 db    ? ;
.bss:000000000021E562                 db    ? ;
.bss:000000000021E563                 db    ? ;
.bss:000000000021E564                 db    ? ;
.bss:000000000021E565                 db    ? ;
.bss:000000000021E566                 db    ? ;
.bss:000000000021E567                 db    ? ;
.bss:000000000021E568                 db    ? ;
.bss:000000000021E569                 db    ? ;
.bss:000000000021E56A                 db    ? ;
.bss:000000000021E56B                 db    ? ;
.bss:000000000021E56C                 db    ? ;
.bss:000000000021E56D                 db    ? ;
.bss:000000000021E56E                 db    ? ;
.bss:000000000021E56F                 db    ? ;
.bss:000000000021E570                 db    ? ;
.bss:000000000021E571                 db    ? ;
.bss:000000000021E572                 db    ? ;
.bss:000000000021E573                 db    ? ;
.bss:000000000021E574                 db    ? ;
.bss:000000000021E575                 db    ? ;
.bss:000000000021E576                 db    ? ;
.bss:000000000021E577                 db    ? ;
.bss:000000000021E578                 db    ? ;
.bss:000000000021E579                 db    ? ;
.bss:000000000021E57A                 db    ? ;
.bss:000000000021E57B                 db    ? ;
.bss:000000000021E57C                 db    ? ;
.bss:000000000021E57D                 db    ? ;
.bss:000000000021E57E                 db    ? ;
.bss:000000000021E57F                 db    ? ;
.bss:000000000021E580                 db    ? ;
.bss:000000000021E581                 db    ? ;
.bss:000000000021E582                 db    ? ;
.bss:000000000021E583                 db    ? ;
.bss:000000000021E584                 db    ? ;
.bss:000000000021E585                 db    ? ;
.bss:000000000021E586                 db    ? ;
.bss:000000000021E587                 db    ? ;
.bss:000000000021E588                 db    ? ;
.bss:000000000021E589                 db    ? ;
.bss:000000000021E58A                 db    ? ;
.bss:000000000021E58B                 db    ? ;
.bss:000000000021E58C                 db    ? ;
.bss:000000000021E58D                 db    ? ;
.bss:000000000021E58E                 db    ? ;
.bss:000000000021E58F                 db    ? ;
.bss:000000000021E590                 db    ? ;
.bss:000000000021E591                 db    ? ;
.bss:000000000021E592                 db    ? ;
.bss:000000000021E593                 db    ? ;
.bss:000000000021E594                 db    ? ;
.bss:000000000021E595                 db    ? ;
.bss:000000000021E596                 db    ? ;
.bss:000000000021E597                 db    ? ;
.bss:000000000021E598                 db    ? ;
.bss:000000000021E599                 db    ? ;
.bss:000000000021E59A                 db    ? ;
.bss:000000000021E59B                 db    ? ;
.bss:000000000021E59C                 db    ? ;
.bss:000000000021E59D                 db    ? ;
.bss:000000000021E59E                 db    ? ;
.bss:000000000021E59F                 db    ? ;
.bss:000000000021E5A0                 db    ? ;
.bss:000000000021E5A1                 db    ? ;
.bss:000000000021E5A2                 db    ? ;
.bss:000000000021E5A3                 db    ? ;
.bss:000000000021E5A4                 db    ? ;
.bss:000000000021E5A5                 db    ? ;
.bss:000000000021E5A6                 db    ? ;
.bss:000000000021E5A7                 db    ? ;
.bss:000000000021E5A8                 db    ? ;
.bss:000000000021E5A9                 db    ? ;
.bss:000000000021E5AA                 db    ? ;
.bss:000000000021E5AB                 db    ? ;
.bss:000000000021E5AC                 db    ? ;
.bss:000000000021E5AD                 db    ? ;
.bss:000000000021E5AE                 db    ? ;
.bss:000000000021E5AF                 db    ? ;
.bss:000000000021E5B0                 db    ? ;
.bss:000000000021E5B1                 db    ? ;
.bss:000000000021E5B2                 db    ? ;
.bss:000000000021E5B3                 db    ? ;
.bss:000000000021E5B4                 db    ? ;
.bss:000000000021E5B5                 db    ? ;
.bss:000000000021E5B6                 db    ? ;
.bss:000000000021E5B7                 db    ? ;
.bss:000000000021E5B8                 db    ? ;
.bss:000000000021E5B9                 db    ? ;
.bss:000000000021E5BA                 db    ? ;
.bss:000000000021E5BB                 db    ? ;
.bss:000000000021E5BC                 db    ? ;
.bss:000000000021E5BD                 db    ? ;
.bss:000000000021E5BE                 db    ? ;
.bss:000000000021E5BF                 db    ? ;
.bss:000000000021E5C0                 db    ? ;
.bss:000000000021E5C1                 db    ? ;
.bss:000000000021E5C2                 db    ? ;
.bss:000000000021E5C3                 db    ? ;
.bss:000000000021E5C4                 db    ? ;
.bss:000000000021E5C5                 db    ? ;
.bss:000000000021E5C6                 db    ? ;
.bss:000000000021E5C7                 db    ? ;
.bss:000000000021E5C8                 db    ? ;
.bss:000000000021E5C9                 db    ? ;
.bss:000000000021E5CA                 db    ? ;
.bss:000000000021E5CB                 db    ? ;
.bss:000000000021E5CC                 db    ? ;
.bss:000000000021E5CD                 db    ? ;
.bss:000000000021E5CE                 db    ? ;
.bss:000000000021E5CF                 db    ? ;
.bss:000000000021E5D0                 db    ? ;
.bss:000000000021E5D1                 db    ? ;
.bss:000000000021E5D2                 db    ? ;
.bss:000000000021E5D3                 db    ? ;
.bss:000000000021E5D4                 db    ? ;
.bss:000000000021E5D5                 db    ? ;
.bss:000000000021E5D6                 db    ? ;
.bss:000000000021E5D7                 db    ? ;
.bss:000000000021E5D8                 db    ? ;
.bss:000000000021E5D9                 db    ? ;
.bss:000000000021E5DA                 db    ? ;
.bss:000000000021E5DB                 db    ? ;
.bss:000000000021E5DC                 db    ? ;
.bss:000000000021E5DD                 db    ? ;
.bss:000000000021E5DE                 db    ? ;
.bss:000000000021E5DF                 db    ? ;
.bss:000000000021E5E0                 db    ? ;
.bss:000000000021E5E1                 db    ? ;
.bss:000000000021E5E2                 db    ? ;
.bss:000000000021E5E3                 db    ? ;
.bss:000000000021E5E4                 db    ? ;
.bss:000000000021E5E5                 db    ? ;
.bss:000000000021E5E6                 db    ? ;
.bss:000000000021E5E7                 db    ? ;
.bss:000000000021E5E8                 db    ? ;
.bss:000000000021E5E9                 db    ? ;
.bss:000000000021E5EA                 db    ? ;
.bss:000000000021E5EB                 db    ? ;
.bss:000000000021E5EC                 db    ? ;
.bss:000000000021E5ED                 db    ? ;
.bss:000000000021E5EE                 db    ? ;
.bss:000000000021E5EF                 db    ? ;
.bss:000000000021E5F0                 db    ? ;
.bss:000000000021E5F1                 db    ? ;
.bss:000000000021E5F2                 db    ? ;
.bss:000000000021E5F3                 db    ? ;
.bss:000000000021E5F4                 db    ? ;
.bss:000000000021E5F5                 db    ? ;
.bss:000000000021E5F6                 db    ? ;
.bss:000000000021E5F7                 db    ? ;
.bss:000000000021E5F8                 db    ? ;
.bss:000000000021E5F9                 db    ? ;
.bss:000000000021E5FA                 db    ? ;
.bss:000000000021E5FB                 db    ? ;
.bss:000000000021E5FC                 db    ? ;
.bss:000000000021E5FD                 db    ? ;
.bss:000000000021E5FE                 db    ? ;
.bss:000000000021E5FF                 db    ? ;
.bss:000000000021E600                 db    ? ;
.bss:000000000021E601                 db    ? ;
.bss:000000000021E602                 db    ? ;
.bss:000000000021E603                 db    ? ;
.bss:000000000021E604                 db    ? ;
.bss:000000000021E605                 db    ? ;
.bss:000000000021E606                 db    ? ;
.bss:000000000021E607                 db    ? ;
.bss:000000000021E608                 db    ? ;
.bss:000000000021E609                 db    ? ;
.bss:000000000021E60A                 db    ? ;
.bss:000000000021E60B                 db    ? ;
.bss:000000000021E60C                 db    ? ;
.bss:000000000021E60D                 db    ? ;
.bss:000000000021E60E                 db    ? ;
.bss:000000000021E60F                 db    ? ;
.bss:000000000021E610                 db    ? ;
.bss:000000000021E611                 db    ? ;
.bss:000000000021E612                 db    ? ;
.bss:000000000021E613                 db    ? ;
.bss:000000000021E614                 db    ? ;
.bss:000000000021E615                 db    ? ;
.bss:000000000021E616                 db    ? ;
.bss:000000000021E617                 db    ? ;
.bss:000000000021E618                 db    ? ;
.bss:000000000021E619                 db    ? ;
.bss:000000000021E61A                 db    ? ;
.bss:000000000021E61B                 db    ? ;
.bss:000000000021E61C                 db    ? ;
.bss:000000000021E61D                 db    ? ;
.bss:000000000021E61E                 db    ? ;
.bss:000000000021E61F                 db    ? ;
.bss:000000000021E620                 db    ? ;
.bss:000000000021E621                 db    ? ;
.bss:000000000021E622                 db    ? ;
.bss:000000000021E623                 db    ? ;
.bss:000000000021E624                 db    ? ;
.bss:000000000021E625                 db    ? ;
.bss:000000000021E626                 db    ? ;
.bss:000000000021E627                 db    ? ;
.bss:000000000021E628                 db    ? ;
.bss:000000000021E629                 db    ? ;
.bss:000000000021E62A                 db    ? ;
.bss:000000000021E62B                 db    ? ;
.bss:000000000021E62C                 db    ? ;
.bss:000000000021E62D                 db    ? ;
.bss:000000000021E62E                 db    ? ;
.bss:000000000021E62F                 db    ? ;
.bss:000000000021E630                 db    ? ;
.bss:000000000021E631                 db    ? ;
.bss:000000000021E632                 db    ? ;
.bss:000000000021E633                 db    ? ;
.bss:000000000021E634                 db    ? ;
.bss:000000000021E635                 db    ? ;
.bss:000000000021E636                 db    ? ;
.bss:000000000021E637                 db    ? ;
.bss:000000000021E638                 db    ? ;
.bss:000000000021E639                 db    ? ;
.bss:000000000021E63A                 db    ? ;
.bss:000000000021E63B                 db    ? ;
.bss:000000000021E63C                 db    ? ;
.bss:000000000021E63D                 db    ? ;
.bss:000000000021E63E                 db    ? ;
.bss:000000000021E63F                 db    ? ;
.bss:000000000021E640                 db    ? ;
.bss:000000000021E641                 db    ? ;
.bss:000000000021E642                 db    ? ;
.bss:000000000021E643                 db    ? ;
.bss:000000000021E644                 db    ? ;
.bss:000000000021E645                 db    ? ;
.bss:000000000021E646                 db    ? ;
.bss:000000000021E647                 db    ? ;
.bss:000000000021E648                 db    ? ;
.bss:000000000021E649                 db    ? ;
.bss:000000000021E64A                 db    ? ;
.bss:000000000021E64B                 db    ? ;
.bss:000000000021E64C                 db    ? ;
.bss:000000000021E64D                 db    ? ;
.bss:000000000021E64E                 db    ? ;
.bss:000000000021E64F                 db    ? ;
.bss:000000000021E650                 db    ? ;
.bss:000000000021E651                 db    ? ;
.bss:000000000021E652                 db    ? ;
.bss:000000000021E653                 db    ? ;
.bss:000000000021E654                 db    ? ;
.bss:000000000021E655                 db    ? ;
.bss:000000000021E656                 db    ? ;
.bss:000000000021E657                 db    ? ;
.bss:000000000021E658                 db    ? ;
.bss:000000000021E659                 db    ? ;
.bss:000000000021E65A                 db    ? ;
.bss:000000000021E65B                 db    ? ;
.bss:000000000021E65C                 db    ? ;
.bss:000000000021E65D                 db    ? ;
.bss:000000000021E65E                 db    ? ;
.bss:000000000021E65F                 db    ? ;
.bss:000000000021E660                 db    ? ;
.bss:000000000021E661                 db    ? ;
.bss:000000000021E662                 db    ? ;
.bss:000000000021E663                 db    ? ;
.bss:000000000021E664                 db    ? ;
.bss:000000000021E665                 db    ? ;
.bss:000000000021E666                 db    ? ;
.bss:000000000021E667                 db    ? ;
.bss:000000000021E668                 db    ? ;
.bss:000000000021E669                 db    ? ;
.bss:000000000021E66A                 db    ? ;
.bss:000000000021E66B                 db    ? ;
.bss:000000000021E66C                 db    ? ;
.bss:000000000021E66D                 db    ? ;
.bss:000000000021E66E                 db    ? ;
.bss:000000000021E66F                 db    ? ;
.bss:000000000021E670                 db    ? ;
.bss:000000000021E671                 db    ? ;
.bss:000000000021E672                 db    ? ;
.bss:000000000021E673                 db    ? ;
.bss:000000000021E674                 db    ? ;
.bss:000000000021E675                 db    ? ;
.bss:000000000021E676                 db    ? ;
.bss:000000000021E677                 db    ? ;
.bss:000000000021E678                 db    ? ;
.bss:000000000021E679                 db    ? ;
.bss:000000000021E67A                 db    ? ;
.bss:000000000021E67B                 db    ? ;
.bss:000000000021E67C                 db    ? ;
.bss:000000000021E67D                 db    ? ;
.bss:000000000021E67E                 db    ? ;
.bss:000000000021E67F                 db    ? ;
.bss:000000000021E680                 db    ? ;
.bss:000000000021E681                 db    ? ;
.bss:000000000021E682                 db    ? ;
.bss:000000000021E683                 db    ? ;
.bss:000000000021E684                 db    ? ;
.bss:000000000021E685                 db    ? ;
.bss:000000000021E686                 db    ? ;
.bss:000000000021E687                 db    ? ;
.bss:000000000021E688                 db    ? ;
.bss:000000000021E689                 db    ? ;
.bss:000000000021E68A                 db    ? ;
.bss:000000000021E68B                 db    ? ;
.bss:000000000021E68C                 db    ? ;
.bss:000000000021E68D                 db    ? ;
.bss:000000000021E68E                 db    ? ;
.bss:000000000021E68F                 db    ? ;
.bss:000000000021E690                 db    ? ;
.bss:000000000021E691                 db    ? ;
.bss:000000000021E692                 db    ? ;
.bss:000000000021E693                 db    ? ;
.bss:000000000021E694                 db    ? ;
.bss:000000000021E695                 db    ? ;
.bss:000000000021E696                 db    ? ;
.bss:000000000021E697                 db    ? ;
.bss:000000000021E698                 db    ? ;
.bss:000000000021E699                 db    ? ;
.bss:000000000021E69A                 db    ? ;
.bss:000000000021E69B                 db    ? ;
.bss:000000000021E69C                 db    ? ;
.bss:000000000021E69D                 db    ? ;
.bss:000000000021E69E                 db    ? ;
.bss:000000000021E69F                 db    ? ;
.bss:000000000021E6A0                 db    ? ;
.bss:000000000021E6A1                 db    ? ;
.bss:000000000021E6A2                 db    ? ;
.bss:000000000021E6A3                 db    ? ;
.bss:000000000021E6A4                 db    ? ;
.bss:000000000021E6A5                 db    ? ;
.bss:000000000021E6A6                 db    ? ;
.bss:000000000021E6A7                 db    ? ;
.bss:000000000021E6A8                 db    ? ;
.bss:000000000021E6A9                 db    ? ;
.bss:000000000021E6AA                 db    ? ;
.bss:000000000021E6AB                 db    ? ;
.bss:000000000021E6AC                 db    ? ;
.bss:000000000021E6AD                 db    ? ;
.bss:000000000021E6AE                 db    ? ;
.bss:000000000021E6AF                 db    ? ;
.bss:000000000021E6B0                 db    ? ;
.bss:000000000021E6B1                 db    ? ;
.bss:000000000021E6B2                 db    ? ;
.bss:000000000021E6B3                 db    ? ;
.bss:000000000021E6B4                 db    ? ;
.bss:000000000021E6B5                 db    ? ;
.bss:000000000021E6B6                 db    ? ;
.bss:000000000021E6B7                 db    ? ;
.bss:000000000021E6B8                 db    ? ;
.bss:000000000021E6B9                 db    ? ;
.bss:000000000021E6BA                 db    ? ;
.bss:000000000021E6BB                 db    ? ;
.bss:000000000021E6BC                 db    ? ;
.bss:000000000021E6BD                 db    ? ;
.bss:000000000021E6BE                 db    ? ;
.bss:000000000021E6BF                 db    ? ;
.bss:000000000021E6C0                 db    ? ;
.bss:000000000021E6C1                 db    ? ;
.bss:000000000021E6C2                 db    ? ;
.bss:000000000021E6C3                 db    ? ;
.bss:000000000021E6C4                 db    ? ;
.bss:000000000021E6C5                 db    ? ;
.bss:000000000021E6C6                 db    ? ;
.bss:000000000021E6C7                 db    ? ;
.bss:000000000021E6C8                 db    ? ;
.bss:000000000021E6C9                 db    ? ;
.bss:000000000021E6CA                 db    ? ;
.bss:000000000021E6CB                 db    ? ;
.bss:000000000021E6CC                 db    ? ;
.bss:000000000021E6CD                 db    ? ;
.bss:000000000021E6CE                 db    ? ;
.bss:000000000021E6CF                 db    ? ;
.bss:000000000021E6D0                 db    ? ;
.bss:000000000021E6D1                 db    ? ;
.bss:000000000021E6D2                 db    ? ;
.bss:000000000021E6D3                 db    ? ;
.bss:000000000021E6D4                 db    ? ;
.bss:000000000021E6D5                 db    ? ;
.bss:000000000021E6D6                 db    ? ;
.bss:000000000021E6D7                 db    ? ;
.bss:000000000021E6D8                 db    ? ;
.bss:000000000021E6D9                 db    ? ;
.bss:000000000021E6DA                 db    ? ;
.bss:000000000021E6DB                 db    ? ;
.bss:000000000021E6DC                 db    ? ;
.bss:000000000021E6DD                 db    ? ;
.bss:000000000021E6DE                 db    ? ;
.bss:000000000021E6DF                 db    ? ;
.bss:000000000021E6E0                 db    ? ;
.bss:000000000021E6E1                 db    ? ;
.bss:000000000021E6E2                 db    ? ;
.bss:000000000021E6E3                 db    ? ;
.bss:000000000021E6E4                 db    ? ;
.bss:000000000021E6E5                 db    ? ;
.bss:000000000021E6E6                 db    ? ;
.bss:000000000021E6E7                 db    ? ;
.bss:000000000021E6E8                 db    ? ;
.bss:000000000021E6E9                 db    ? ;
.bss:000000000021E6EA                 db    ? ;
.bss:000000000021E6EB                 db    ? ;
.bss:000000000021E6EC                 db    ? ;
.bss:000000000021E6ED                 db    ? ;
.bss:000000000021E6EE                 db    ? ;
.bss:000000000021E6EF                 db    ? ;
.bss:000000000021E6F0                 db    ? ;
.bss:000000000021E6F1                 db    ? ;
.bss:000000000021E6F2                 db    ? ;
.bss:000000000021E6F3                 db    ? ;
.bss:000000000021E6F4                 db    ? ;
.bss:000000000021E6F5                 db    ? ;
.bss:000000000021E6F6                 db    ? ;
.bss:000000000021E6F7                 db    ? ;
.bss:000000000021E6F8                 db    ? ;
.bss:000000000021E6F9                 db    ? ;
.bss:000000000021E6FA                 db    ? ;
.bss:000000000021E6FB                 db    ? ;
.bss:000000000021E6FC                 db    ? ;
.bss:000000000021E6FD                 db    ? ;
.bss:000000000021E6FE                 db    ? ;
.bss:000000000021E6FF                 db    ? ;
.bss:000000000021E700                 db    ? ;
.bss:000000000021E701                 db    ? ;
.bss:000000000021E702                 db    ? ;
.bss:000000000021E703                 db    ? ;
.bss:000000000021E704                 db    ? ;
.bss:000000000021E705                 db    ? ;
.bss:000000000021E706                 db    ? ;
.bss:000000000021E707                 db    ? ;
.bss:000000000021E708                 db    ? ;
.bss:000000000021E709                 db    ? ;
.bss:000000000021E70A                 db    ? ;
.bss:000000000021E70B                 db    ? ;
.bss:000000000021E70C                 db    ? ;
.bss:000000000021E70D                 db    ? ;
.bss:000000000021E70E                 db    ? ;
.bss:000000000021E70F                 db    ? ;
.bss:000000000021E710                 db    ? ;
.bss:000000000021E711                 db    ? ;
.bss:000000000021E712                 db    ? ;
.bss:000000000021E713                 db    ? ;
.bss:000000000021E714                 db    ? ;
.bss:000000000021E715                 db    ? ;
.bss:000000000021E716                 db    ? ;
.bss:000000000021E717                 db    ? ;
.bss:000000000021E718                 db    ? ;
.bss:000000000021E719                 db    ? ;
.bss:000000000021E71A                 db    ? ;
.bss:000000000021E71B                 db    ? ;
.bss:000000000021E71C                 db    ? ;
.bss:000000000021E71D                 db    ? ;
.bss:000000000021E71E                 db    ? ;
.bss:000000000021E71F                 db    ? ;
.bss:000000000021E720                 db    ? ;
.bss:000000000021E721                 db    ? ;
.bss:000000000021E722                 db    ? ;
.bss:000000000021E723                 db    ? ;
.bss:000000000021E724                 db    ? ;
.bss:000000000021E725                 db    ? ;
.bss:000000000021E726                 db    ? ;
.bss:000000000021E727                 db    ? ;
.bss:000000000021E728                 db    ? ;
.bss:000000000021E729                 db    ? ;
.bss:000000000021E72A                 db    ? ;
.bss:000000000021E72B                 db    ? ;
.bss:000000000021E72C                 db    ? ;
.bss:000000000021E72D                 db    ? ;
.bss:000000000021E72E                 db    ? ;
.bss:000000000021E72F                 db    ? ;
.bss:000000000021E730                 db    ? ;
.bss:000000000021E731                 db    ? ;
.bss:000000000021E732                 db    ? ;
.bss:000000000021E733                 db    ? ;
.bss:000000000021E734                 db    ? ;
.bss:000000000021E735                 db    ? ;
.bss:000000000021E736                 db    ? ;
.bss:000000000021E737                 db    ? ;
.bss:000000000021E738                 db    ? ;
.bss:000000000021E739                 db    ? ;
.bss:000000000021E73A                 db    ? ;
.bss:000000000021E73B                 db    ? ;
.bss:000000000021E73C                 db    ? ;
.bss:000000000021E73D                 db    ? ;
.bss:000000000021E73E                 db    ? ;
.bss:000000000021E73F                 db    ? ;
.bss:000000000021E740                 db    ? ;
.bss:000000000021E741                 db    ? ;
.bss:000000000021E742                 db    ? ;
.bss:000000000021E743                 db    ? ;
.bss:000000000021E744                 db    ? ;
.bss:000000000021E745                 db    ? ;
.bss:000000000021E746                 db    ? ;
.bss:000000000021E747                 db    ? ;
.bss:000000000021E748                 db    ? ;
.bss:000000000021E749                 db    ? ;
.bss:000000000021E74A                 db    ? ;
.bss:000000000021E74B                 db    ? ;
.bss:000000000021E74C                 db    ? ;
.bss:000000000021E74D                 db    ? ;
.bss:000000000021E74E                 db    ? ;
.bss:000000000021E74F                 db    ? ;
.bss:000000000021E750                 db    ? ;
.bss:000000000021E751                 db    ? ;
.bss:000000000021E752                 db    ? ;
.bss:000000000021E753                 db    ? ;
.bss:000000000021E754                 db    ? ;
.bss:000000000021E755                 db    ? ;
.bss:000000000021E756                 db    ? ;
.bss:000000000021E757                 db    ? ;
.bss:000000000021E758                 db    ? ;
.bss:000000000021E759                 db    ? ;
.bss:000000000021E75A                 db    ? ;
.bss:000000000021E75B                 db    ? ;
.bss:000000000021E75C                 db    ? ;
.bss:000000000021E75D                 db    ? ;
.bss:000000000021E75E                 db    ? ;
.bss:000000000021E75F                 db    ? ;
.bss:000000000021E760                 db    ? ;
.bss:000000000021E761                 db    ? ;
.bss:000000000021E762                 db    ? ;
.bss:000000000021E763                 db    ? ;
.bss:000000000021E764                 db    ? ;
.bss:000000000021E765                 db    ? ;
.bss:000000000021E766                 db    ? ;
.bss:000000000021E767                 db    ? ;
.bss:000000000021E768                 db    ? ;
.bss:000000000021E769                 db    ? ;
.bss:000000000021E76A                 db    ? ;
.bss:000000000021E76B                 db    ? ;
.bss:000000000021E76C                 db    ? ;
.bss:000000000021E76D                 db    ? ;
.bss:000000000021E76E                 db    ? ;
.bss:000000000021E76F                 db    ? ;
.bss:000000000021E770                 db    ? ;
.bss:000000000021E771                 db    ? ;
.bss:000000000021E772                 db    ? ;
.bss:000000000021E773                 db    ? ;
.bss:000000000021E774                 db    ? ;
.bss:000000000021E775                 db    ? ;
.bss:000000000021E776                 db    ? ;
.bss:000000000021E777                 db    ? ;
.bss:000000000021E778                 db    ? ;
.bss:000000000021E779                 db    ? ;
.bss:000000000021E77A                 db    ? ;
.bss:000000000021E77B                 db    ? ;
.bss:000000000021E77C                 db    ? ;
.bss:000000000021E77D                 db    ? ;
.bss:000000000021E77E                 db    ? ;
.bss:000000000021E77F                 db    ? ;
.bss:000000000021E780                 db    ? ;
.bss:000000000021E781                 db    ? ;
.bss:000000000021E782                 db    ? ;
.bss:000000000021E783                 db    ? ;
.bss:000000000021E784                 db    ? ;
.bss:000000000021E785                 db    ? ;
.bss:000000000021E786                 db    ? ;
.bss:000000000021E787                 db    ? ;
.bss:000000000021E788                 db    ? ;
.bss:000000000021E789                 db    ? ;
.bss:000000000021E78A                 db    ? ;
.bss:000000000021E78B                 db    ? ;
.bss:000000000021E78C                 db    ? ;
.bss:000000000021E78D                 db    ? ;
.bss:000000000021E78E                 db    ? ;
.bss:000000000021E78F                 db    ? ;
.bss:000000000021E790                 db    ? ;
.bss:000000000021E791                 db    ? ;
.bss:000000000021E792                 db    ? ;
.bss:000000000021E793                 db    ? ;
.bss:000000000021E794                 db    ? ;
.bss:000000000021E795                 db    ? ;
.bss:000000000021E796                 db    ? ;
.bss:000000000021E797                 db    ? ;
.bss:000000000021E798                 db    ? ;
.bss:000000000021E799                 db    ? ;
.bss:000000000021E79A                 db    ? ;
.bss:000000000021E79B                 db    ? ;
.bss:000000000021E79C                 db    ? ;
.bss:000000000021E79D                 db    ? ;
.bss:000000000021E79E                 db    ? ;
.bss:000000000021E79F                 db    ? ;
.bss:000000000021E7A0                 db    ? ;
.bss:000000000021E7A1                 db    ? ;
.bss:000000000021E7A2                 db    ? ;
.bss:000000000021E7A3                 db    ? ;
.bss:000000000021E7A4                 db    ? ;
.bss:000000000021E7A5                 db    ? ;
.bss:000000000021E7A6                 db    ? ;
.bss:000000000021E7A7                 db    ? ;
.bss:000000000021E7A8                 db    ? ;
.bss:000000000021E7A9                 db    ? ;
.bss:000000000021E7AA                 db    ? ;
.bss:000000000021E7AB                 db    ? ;
.bss:000000000021E7AC                 db    ? ;
.bss:000000000021E7AD                 db    ? ;
.bss:000000000021E7AE                 db    ? ;
.bss:000000000021E7AF                 db    ? ;
.bss:000000000021E7B0                 db    ? ;
.bss:000000000021E7B1                 db    ? ;
.bss:000000000021E7B2                 db    ? ;
.bss:000000000021E7B3                 db    ? ;
.bss:000000000021E7B4                 db    ? ;
.bss:000000000021E7B5                 db    ? ;
.bss:000000000021E7B6                 db    ? ;
.bss:000000000021E7B7                 db    ? ;
.bss:000000000021E7B8                 db    ? ;
.bss:000000000021E7B9                 db    ? ;
.bss:000000000021E7BA                 db    ? ;
.bss:000000000021E7BB                 db    ? ;
.bss:000000000021E7BC                 db    ? ;
.bss:000000000021E7BD                 db    ? ;
.bss:000000000021E7BE                 db    ? ;
.bss:000000000021E7BF                 db    ? ;
.bss:000000000021E7C0                 db    ? ;
.bss:000000000021E7C1                 db    ? ;
.bss:000000000021E7C2                 db    ? ;
.bss:000000000021E7C3                 db    ? ;
.bss:000000000021E7C4                 db    ? ;
.bss:000000000021E7C5                 db    ? ;
.bss:000000000021E7C6                 db    ? ;
.bss:000000000021E7C7                 db    ? ;
.bss:000000000021E7C8                 db    ? ;
.bss:000000000021E7C9                 db    ? ;
.bss:000000000021E7CA                 db    ? ;
.bss:000000000021E7CB                 db    ? ;
.bss:000000000021E7CC                 db    ? ;
.bss:000000000021E7CD                 db    ? ;
.bss:000000000021E7CE                 db    ? ;
.bss:000000000021E7CF                 db    ? ;
.bss:000000000021E7D0                 db    ? ;
.bss:000000000021E7D1                 db    ? ;
.bss:000000000021E7D2                 db    ? ;
.bss:000000000021E7D3                 db    ? ;
.bss:000000000021E7D4                 db    ? ;
.bss:000000000021E7D5                 db    ? ;
.bss:000000000021E7D6                 db    ? ;
.bss:000000000021E7D7                 db    ? ;
.bss:000000000021E7D8                 db    ? ;
.bss:000000000021E7D9                 db    ? ;
.bss:000000000021E7DA                 db    ? ;
.bss:000000000021E7DB                 db    ? ;
.bss:000000000021E7DC                 db    ? ;
.bss:000000000021E7DD                 db    ? ;
.bss:000000000021E7DE                 db    ? ;
.bss:000000000021E7DF                 db    ? ;
.bss:000000000021E7E0                 db    ? ;
.bss:000000000021E7E1                 db    ? ;
.bss:000000000021E7E2                 db    ? ;
.bss:000000000021E7E3                 db    ? ;
.bss:000000000021E7E4                 db    ? ;
.bss:000000000021E7E5                 db    ? ;
.bss:000000000021E7E6                 db    ? ;
.bss:000000000021E7E7                 db    ? ;
.bss:000000000021E7E8                 db    ? ;
.bss:000000000021E7E9                 db    ? ;
.bss:000000000021E7EA                 db    ? ;
.bss:000000000021E7EB                 db    ? ;
.bss:000000000021E7EC                 db    ? ;
.bss:000000000021E7ED                 db    ? ;
.bss:000000000021E7EE                 db    ? ;
.bss:000000000021E7EF                 db    ? ;
.bss:000000000021E7F0                 db    ? ;
.bss:000000000021E7F1                 db    ? ;
.bss:000000000021E7F2                 db    ? ;
.bss:000000000021E7F3                 db    ? ;
.bss:000000000021E7F4                 db    ? ;
.bss:000000000021E7F5                 db    ? ;
.bss:000000000021E7F6                 db    ? ;
.bss:000000000021E7F7                 db    ? ;
.bss:000000000021E7F8                 db    ? ;
.bss:000000000021E7F9                 db    ? ;
.bss:000000000021E7FA                 db    ? ;
.bss:000000000021E7FB                 db    ? ;
.bss:000000000021E7FC                 db    ? ;
.bss:000000000021E7FD                 db    ? ;
.bss:000000000021E7FE                 db    ? ;
.bss:000000000021E7FF                 db    ? ;
.bss:000000000021E800                 db    ? ;
.bss:000000000021E801                 db    ? ;
.bss:000000000021E802                 db    ? ;
.bss:000000000021E803                 db    ? ;
.bss:000000000021E804                 db    ? ;
.bss:000000000021E805                 db    ? ;
.bss:000000000021E806                 db    ? ;
.bss:000000000021E807                 db    ? ;
.bss:000000000021E808                 db    ? ;
.bss:000000000021E809                 db    ? ;
.bss:000000000021E80A                 db    ? ;
.bss:000000000021E80B                 db    ? ;
.bss:000000000021E80C                 db    ? ;
.bss:000000000021E80D                 db    ? ;
.bss:000000000021E80E                 db    ? ;
.bss:000000000021E80F                 db    ? ;
.bss:000000000021E810                 db    ? ;
.bss:000000000021E811                 db    ? ;
.bss:000000000021E812                 db    ? ;
.bss:000000000021E813                 db    ? ;
.bss:000000000021E814                 db    ? ;
.bss:000000000021E815                 db    ? ;
.bss:000000000021E816                 db    ? ;
.bss:000000000021E817                 db    ? ;
.bss:000000000021E818                 db    ? ;
.bss:000000000021E819                 db    ? ;
.bss:000000000021E81A                 db    ? ;
.bss:000000000021E81B                 db    ? ;
.bss:000000000021E81C                 db    ? ;
.bss:000000000021E81D                 db    ? ;
.bss:000000000021E81E                 db    ? ;
.bss:000000000021E81F                 db    ? ;
.bss:000000000021E820                 db    ? ;
.bss:000000000021E821                 db    ? ;
.bss:000000000021E822                 db    ? ;
.bss:000000000021E823                 db    ? ;
.bss:000000000021E824                 db    ? ;
.bss:000000000021E825                 db    ? ;
.bss:000000000021E826                 db    ? ;
.bss:000000000021E827                 db    ? ;
.bss:000000000021E828                 db    ? ;
.bss:000000000021E829                 db    ? ;
.bss:000000000021E82A                 db    ? ;
.bss:000000000021E82B                 db    ? ;
.bss:000000000021E82C                 db    ? ;
.bss:000000000021E82D                 db    ? ;
.bss:000000000021E82E                 db    ? ;
.bss:000000000021E82F                 db    ? ;
.bss:000000000021E830                 db    ? ;
.bss:000000000021E831                 db    ? ;
.bss:000000000021E832                 db    ? ;
.bss:000000000021E833                 db    ? ;
.bss:000000000021E834                 db    ? ;
.bss:000000000021E835                 db    ? ;
.bss:000000000021E836                 db    ? ;
.bss:000000000021E837                 db    ? ;
.bss:000000000021E838                 db    ? ;
.bss:000000000021E839                 db    ? ;
.bss:000000000021E83A                 db    ? ;
.bss:000000000021E83B                 db    ? ;
.bss:000000000021E83C                 db    ? ;
.bss:000000000021E83D                 db    ? ;
.bss:000000000021E83E                 db    ? ;
.bss:000000000021E83F                 db    ? ;
.bss:000000000021E840                 db    ? ;
.bss:000000000021E841                 db    ? ;
.bss:000000000021E842                 db    ? ;
.bss:000000000021E843                 db    ? ;
.bss:000000000021E844                 db    ? ;
.bss:000000000021E845                 db    ? ;
.bss:000000000021E846                 db    ? ;
.bss:000000000021E847                 db    ? ;
.bss:000000000021E848                 db    ? ;
.bss:000000000021E849                 db    ? ;
.bss:000000000021E84A                 db    ? ;
.bss:000000000021E84B                 db    ? ;
.bss:000000000021E84C                 db    ? ;
.bss:000000000021E84D                 db    ? ;
.bss:000000000021E84E                 db    ? ;
.bss:000000000021E84F                 db    ? ;
.bss:000000000021E850                 db    ? ;
.bss:000000000021E851                 db    ? ;
.bss:000000000021E852                 db    ? ;
.bss:000000000021E853                 db    ? ;
.bss:000000000021E854                 db    ? ;
.bss:000000000021E855                 db    ? ;
.bss:000000000021E856                 db    ? ;
.bss:000000000021E857                 db    ? ;
.bss:000000000021E858                 db    ? ;
.bss:000000000021E859                 db    ? ;
.bss:000000000021E85A                 db    ? ;
.bss:000000000021E85B                 db    ? ;
.bss:000000000021E85C                 db    ? ;
.bss:000000000021E85D                 db    ? ;
.bss:000000000021E85E                 db    ? ;
.bss:000000000021E85F                 db    ? ;
.bss:000000000021E860                 db    ? ;
.bss:000000000021E861                 db    ? ;
.bss:000000000021E862                 db    ? ;
.bss:000000000021E863                 db    ? ;
.bss:000000000021E864                 db    ? ;
.bss:000000000021E865                 db    ? ;
.bss:000000000021E866                 db    ? ;
.bss:000000000021E867                 db    ? ;
.bss:000000000021E868                 db    ? ;
.bss:000000000021E869                 db    ? ;
.bss:000000000021E86A                 db    ? ;
.bss:000000000021E86B                 db    ? ;
.bss:000000000021E86C                 db    ? ;
.bss:000000000021E86D                 db    ? ;
.bss:000000000021E86E                 db    ? ;
.bss:000000000021E86F                 db    ? ;
.bss:000000000021E870                 db    ? ;
.bss:000000000021E871                 db    ? ;
.bss:000000000021E872                 db    ? ;
.bss:000000000021E873                 db    ? ;
.bss:000000000021E874                 db    ? ;
.bss:000000000021E875                 db    ? ;
.bss:000000000021E876                 db    ? ;
.bss:000000000021E877                 db    ? ;
.bss:000000000021E878                 db    ? ;
.bss:000000000021E879                 db    ? ;
.bss:000000000021E87A                 db    ? ;
.bss:000000000021E87B                 db    ? ;
.bss:000000000021E87C                 db    ? ;
.bss:000000000021E87D                 db    ? ;
.bss:000000000021E87E                 db    ? ;
.bss:000000000021E87F                 db    ? ;
.bss:000000000021E880                 db    ? ;
.bss:000000000021E881                 db    ? ;
.bss:000000000021E882                 db    ? ;
.bss:000000000021E883                 db    ? ;
.bss:000000000021E884                 db    ? ;
.bss:000000000021E885                 db    ? ;
.bss:000000000021E886                 db    ? ;
.bss:000000000021E887                 db    ? ;
.bss:000000000021E888                 db    ? ;
.bss:000000000021E889                 db    ? ;
.bss:000000000021E88A                 db    ? ;
.bss:000000000021E88B                 db    ? ;
.bss:000000000021E88C                 db    ? ;
.bss:000000000021E88D                 db    ? ;
.bss:000000000021E88E                 db    ? ;
.bss:000000000021E88F                 db    ? ;
.bss:000000000021E890                 db    ? ;
.bss:000000000021E891                 db    ? ;
.bss:000000000021E892                 db    ? ;
.bss:000000000021E893                 db    ? ;
.bss:000000000021E894                 db    ? ;
.bss:000000000021E895                 db    ? ;
.bss:000000000021E896                 db    ? ;
.bss:000000000021E897                 db    ? ;
.bss:000000000021E898                 db    ? ;
.bss:000000000021E899                 db    ? ;
.bss:000000000021E89A                 db    ? ;
.bss:000000000021E89B                 db    ? ;
.bss:000000000021E89C                 db    ? ;
.bss:000000000021E89D                 db    ? ;
.bss:000000000021E89E                 db    ? ;
.bss:000000000021E89F                 db    ? ;
.bss:000000000021E8A0                 db    ? ;
.bss:000000000021E8A1                 db    ? ;
.bss:000000000021E8A2                 db    ? ;
.bss:000000000021E8A3                 db    ? ;
.bss:000000000021E8A4                 db    ? ;
.bss:000000000021E8A5                 db    ? ;
.bss:000000000021E8A6                 db    ? ;
.bss:000000000021E8A7                 db    ? ;
.bss:000000000021E8A8                 db    ? ;
.bss:000000000021E8A9                 db    ? ;
.bss:000000000021E8AA                 db    ? ;
.bss:000000000021E8AB                 db    ? ;
.bss:000000000021E8AC                 db    ? ;
.bss:000000000021E8AD                 db    ? ;
.bss:000000000021E8AE                 db    ? ;
.bss:000000000021E8AF                 db    ? ;
.bss:000000000021E8B0                 db    ? ;
.bss:000000000021E8B1                 db    ? ;
.bss:000000000021E8B2                 db    ? ;
.bss:000000000021E8B3                 db    ? ;
.bss:000000000021E8B4                 db    ? ;
.bss:000000000021E8B5                 db    ? ;
.bss:000000000021E8B6                 db    ? ;
.bss:000000000021E8B7                 db    ? ;
.bss:000000000021E8B8                 db    ? ;
.bss:000000000021E8B9                 db    ? ;
.bss:000000000021E8BA                 db    ? ;
.bss:000000000021E8BB                 db    ? ;
.bss:000000000021E8BC                 db    ? ;
.bss:000000000021E8BD                 db    ? ;
.bss:000000000021E8BE                 db    ? ;
.bss:000000000021E8BF                 db    ? ;
.bss:000000000021E8C0                 db    ? ;
.bss:000000000021E8C1                 db    ? ;
.bss:000000000021E8C2                 db    ? ;
.bss:000000000021E8C3                 db    ? ;
.bss:000000000021E8C4                 db    ? ;
.bss:000000000021E8C5                 db    ? ;
.bss:000000000021E8C6                 db    ? ;
.bss:000000000021E8C7                 db    ? ;
.bss:000000000021E8C8                 db    ? ;
.bss:000000000021E8C9                 db    ? ;
.bss:000000000021E8CA                 db    ? ;
.bss:000000000021E8CB                 db    ? ;
.bss:000000000021E8CC                 db    ? ;
.bss:000000000021E8CD                 db    ? ;
.bss:000000000021E8CE                 db    ? ;
.bss:000000000021E8CF                 db    ? ;
.bss:000000000021E8D0                 db    ? ;
.bss:000000000021E8D1                 db    ? ;
.bss:000000000021E8D2                 db    ? ;
.bss:000000000021E8D3                 db    ? ;
.bss:000000000021E8D4                 db    ? ;
.bss:000000000021E8D5                 db    ? ;
.bss:000000000021E8D6                 db    ? ;
.bss:000000000021E8D7                 db    ? ;
.bss:000000000021E8D8                 db    ? ;
.bss:000000000021E8D9                 db    ? ;
.bss:000000000021E8DA                 db    ? ;
.bss:000000000021E8DB                 db    ? ;
.bss:000000000021E8DC                 db    ? ;
.bss:000000000021E8DD                 db    ? ;
.bss:000000000021E8DE                 db    ? ;
.bss:000000000021E8DF                 db    ? ;
.bss:000000000021E8E0                 db    ? ;
.bss:000000000021E8E1                 db    ? ;
.bss:000000000021E8E2                 db    ? ;
.bss:000000000021E8E3                 db    ? ;
.bss:000000000021E8E4                 db    ? ;
.bss:000000000021E8E5                 db    ? ;
.bss:000000000021E8E6                 db    ? ;
.bss:000000000021E8E7                 db    ? ;
.bss:000000000021E8E8                 db    ? ;
.bss:000000000021E8E9                 db    ? ;
.bss:000000000021E8EA                 db    ? ;
.bss:000000000021E8EB                 db    ? ;
.bss:000000000021E8EC                 db    ? ;
.bss:000000000021E8ED                 db    ? ;
.bss:000000000021E8EE                 db    ? ;
.bss:000000000021E8EF                 db    ? ;
.bss:000000000021E8F0                 db    ? ;
.bss:000000000021E8F1                 db    ? ;
.bss:000000000021E8F2                 db    ? ;
.bss:000000000021E8F3                 db    ? ;
.bss:000000000021E8F4                 db    ? ;
.bss:000000000021E8F5                 db    ? ;
.bss:000000000021E8F6                 db    ? ;
.bss:000000000021E8F7                 db    ? ;
.bss:000000000021E8F8                 db    ? ;
.bss:000000000021E8F9                 db    ? ;
.bss:000000000021E8FA                 db    ? ;
.bss:000000000021E8FB                 db    ? ;
.bss:000000000021E8FC                 db    ? ;
.bss:000000000021E8FD                 db    ? ;
.bss:000000000021E8FE                 db    ? ;
.bss:000000000021E8FF                 db    ? ;
.bss:000000000021E900                 db    ? ;
.bss:000000000021E901                 db    ? ;
.bss:000000000021E902                 db    ? ;
.bss:000000000021E903                 db    ? ;
.bss:000000000021E904                 db    ? ;
.bss:000000000021E905                 db    ? ;
.bss:000000000021E906                 db    ? ;
.bss:000000000021E907                 db    ? ;
.bss:000000000021E908                 db    ? ;
.bss:000000000021E909                 db    ? ;
.bss:000000000021E90A                 db    ? ;
.bss:000000000021E90B                 db    ? ;
.bss:000000000021E90C                 db    ? ;
.bss:000000000021E90D                 db    ? ;
.bss:000000000021E90E                 db    ? ;
.bss:000000000021E90F                 db    ? ;
.bss:000000000021E910                 db    ? ;
.bss:000000000021E911                 db    ? ;
.bss:000000000021E912                 db    ? ;
.bss:000000000021E913                 db    ? ;
.bss:000000000021E914                 db    ? ;
.bss:000000000021E915                 db    ? ;
.bss:000000000021E916                 db    ? ;
.bss:000000000021E917                 db    ? ;
.bss:000000000021E918                 db    ? ;
.bss:000000000021E919                 db    ? ;
.bss:000000000021E91A                 db    ? ;
.bss:000000000021E91B                 db    ? ;
.bss:000000000021E91C                 db    ? ;
.bss:000000000021E91D                 db    ? ;
.bss:000000000021E91E                 db    ? ;
.bss:000000000021E91F                 db    ? ;
.bss:000000000021E920                 db    ? ;
.bss:000000000021E921                 db    ? ;
.bss:000000000021E922                 db    ? ;
.bss:000000000021E923                 db    ? ;
.bss:000000000021E924                 db    ? ;
.bss:000000000021E925                 db    ? ;
.bss:000000000021E926                 db    ? ;
.bss:000000000021E927                 db    ? ;
.bss:000000000021E928                 db    ? ;
.bss:000000000021E929                 db    ? ;
.bss:000000000021E92A                 db    ? ;
.bss:000000000021E92B                 db    ? ;
.bss:000000000021E92C                 db    ? ;
.bss:000000000021E92D                 db    ? ;
.bss:000000000021E92E                 db    ? ;
.bss:000000000021E92F                 db    ? ;
.bss:000000000021E930                 db    ? ;
.bss:000000000021E931                 db    ? ;
.bss:000000000021E932                 db    ? ;
.bss:000000000021E933                 db    ? ;
.bss:000000000021E934                 db    ? ;
.bss:000000000021E935                 db    ? ;
.bss:000000000021E936                 db    ? ;
.bss:000000000021E937                 db    ? ;
.bss:000000000021E938                 db    ? ;
.bss:000000000021E939                 db    ? ;
.bss:000000000021E93A                 db    ? ;
.bss:000000000021E93B                 db    ? ;
.bss:000000000021E93C                 db    ? ;
.bss:000000000021E93D                 db    ? ;
.bss:000000000021E93E                 db    ? ;
.bss:000000000021E93F                 db    ? ;
.bss:000000000021E940                 db    ? ;
.bss:000000000021E941                 db    ? ;
.bss:000000000021E942                 db    ? ;
.bss:000000000021E943                 db    ? ;
.bss:000000000021E944                 db    ? ;
.bss:000000000021E945                 db    ? ;
.bss:000000000021E946                 db    ? ;
.bss:000000000021E947                 db    ? ;
.bss:000000000021E948                 db    ? ;
.bss:000000000021E949                 db    ? ;
.bss:000000000021E94A                 db    ? ;
.bss:000000000021E94B                 db    ? ;
.bss:000000000021E94C                 db    ? ;
.bss:000000000021E94D                 db    ? ;
.bss:000000000021E94E                 db    ? ;
.bss:000000000021E94F                 db    ? ;
.bss:000000000021E950                 db    ? ;
.bss:000000000021E951                 db    ? ;
.bss:000000000021E952                 db    ? ;
.bss:000000000021E953                 db    ? ;
.bss:000000000021E954                 db    ? ;
.bss:000000000021E955                 db    ? ;
.bss:000000000021E956                 db    ? ;
.bss:000000000021E957                 db    ? ;
.bss:000000000021E958                 db    ? ;
.bss:000000000021E959                 db    ? ;
.bss:000000000021E95A                 db    ? ;
.bss:000000000021E95B                 db    ? ;
.bss:000000000021E95C                 db    ? ;
.bss:000000000021E95D                 db    ? ;
.bss:000000000021E95E                 db    ? ;
.bss:000000000021E95F                 db    ? ;
.bss:000000000021E960                 db    ? ;
.bss:000000000021E961                 db    ? ;
.bss:000000000021E962                 db    ? ;
.bss:000000000021E963                 db    ? ;
.bss:000000000021E964                 db    ? ;
.bss:000000000021E965                 db    ? ;
.bss:000000000021E966                 db    ? ;
.bss:000000000021E967                 db    ? ;
.bss:000000000021E968                 db    ? ;
.bss:000000000021E969                 db    ? ;
.bss:000000000021E96A                 db    ? ;
.bss:000000000021E96B                 db    ? ;
.bss:000000000021E96C                 db    ? ;
.bss:000000000021E96D                 db    ? ;
.bss:000000000021E96E                 db    ? ;
.bss:000000000021E96F                 db    ? ;
.bss:000000000021E970                 db    ? ;
.bss:000000000021E971                 db    ? ;
.bss:000000000021E972                 db    ? ;
.bss:000000000021E973                 db    ? ;
.bss:000000000021E974                 db    ? ;
.bss:000000000021E975                 db    ? ;
.bss:000000000021E976                 db    ? ;
.bss:000000000021E977                 db    ? ;
.bss:000000000021E978                 db    ? ;
.bss:000000000021E979                 db    ? ;
.bss:000000000021E97A                 db    ? ;
.bss:000000000021E97B                 db    ? ;
.bss:000000000021E97C                 db    ? ;
.bss:000000000021E97D                 db    ? ;
.bss:000000000021E97E                 db    ? ;
.bss:000000000021E97F                 db    ? ;
.bss:000000000021E980                 db    ? ;
.bss:000000000021E981                 db    ? ;
.bss:000000000021E982                 db    ? ;
.bss:000000000021E983                 db    ? ;
.bss:000000000021E984                 db    ? ;
.bss:000000000021E985                 db    ? ;
.bss:000000000021E986                 db    ? ;
.bss:000000000021E987                 db    ? ;
.bss:000000000021E988                 db    ? ;
.bss:000000000021E989                 db    ? ;
.bss:000000000021E98A                 db    ? ;
.bss:000000000021E98B                 db    ? ;
.bss:000000000021E98C                 db    ? ;
.bss:000000000021E98D                 db    ? ;
.bss:000000000021E98E                 db    ? ;
.bss:000000000021E98F                 db    ? ;
.bss:000000000021E990                 db    ? ;
.bss:000000000021E991                 db    ? ;
.bss:000000000021E992                 db    ? ;
.bss:000000000021E993                 db    ? ;
.bss:000000000021E994                 db    ? ;
.bss:000000000021E995                 db    ? ;
.bss:000000000021E996                 db    ? ;
.bss:000000000021E997                 db    ? ;
.bss:000000000021E998                 db    ? ;
.bss:000000000021E999                 db    ? ;
.bss:000000000021E99A                 db    ? ;
.bss:000000000021E99B                 db    ? ;
.bss:000000000021E99C                 db    ? ;
.bss:000000000021E99D                 db    ? ;
.bss:000000000021E99E                 db    ? ;
.bss:000000000021E99F                 db    ? ;
.bss:000000000021E9A0                 db    ? ;
.bss:000000000021E9A1                 db    ? ;
.bss:000000000021E9A2                 db    ? ;
.bss:000000000021E9A3                 db    ? ;
.bss:000000000021E9A4                 db    ? ;
.bss:000000000021E9A5                 db    ? ;
.bss:000000000021E9A6                 db    ? ;
.bss:000000000021E9A7                 db    ? ;
.bss:000000000021E9A8                 db    ? ;
.bss:000000000021E9A9                 db    ? ;
.bss:000000000021E9AA                 db    ? ;
.bss:000000000021E9AB                 db    ? ;
.bss:000000000021E9AC                 db    ? ;
.bss:000000000021E9AD                 db    ? ;
.bss:000000000021E9AE                 db    ? ;
.bss:000000000021E9AF                 db    ? ;
.bss:000000000021E9B0                 db    ? ;
.bss:000000000021E9B1                 db    ? ;
.bss:000000000021E9B2                 db    ? ;
.bss:000000000021E9B3                 db    ? ;
.bss:000000000021E9B4                 db    ? ;
.bss:000000000021E9B5                 db    ? ;
.bss:000000000021E9B6                 db    ? ;
.bss:000000000021E9B7                 db    ? ;
.bss:000000000021E9B8                 db    ? ;
.bss:000000000021E9B9                 db    ? ;
.bss:000000000021E9BA                 db    ? ;
.bss:000000000021E9BB                 db    ? ;
.bss:000000000021E9BC                 db    ? ;
.bss:000000000021E9BD                 db    ? ;
.bss:000000000021E9BE                 db    ? ;
.bss:000000000021E9BF                 db    ? ;
.bss:000000000021E9C0                 db    ? ;
.bss:000000000021E9C1                 db    ? ;
.bss:000000000021E9C2                 db    ? ;
.bss:000000000021E9C3                 db    ? ;
.bss:000000000021E9C4                 db    ? ;
.bss:000000000021E9C5                 db    ? ;
.bss:000000000021E9C6                 db    ? ;
.bss:000000000021E9C7                 db    ? ;
.bss:000000000021E9C8                 db    ? ;
.bss:000000000021E9C9                 db    ? ;
.bss:000000000021E9CA                 db    ? ;
.bss:000000000021E9CB                 db    ? ;
.bss:000000000021E9CC                 db    ? ;
.bss:000000000021E9CD                 db    ? ;
.bss:000000000021E9CE                 db    ? ;
.bss:000000000021E9CF                 db    ? ;
.bss:000000000021E9D0                 db    ? ;
.bss:000000000021E9D1                 db    ? ;
.bss:000000000021E9D2                 db    ? ;
.bss:000000000021E9D3                 db    ? ;
.bss:000000000021E9D4                 db    ? ;
.bss:000000000021E9D5                 db    ? ;
.bss:000000000021E9D6                 db    ? ;
.bss:000000000021E9D7                 db    ? ;
.bss:000000000021E9D8                 db    ? ;
.bss:000000000021E9D9                 db    ? ;
.bss:000000000021E9DA                 db    ? ;
.bss:000000000021E9DB                 db    ? ;
.bss:000000000021E9DC                 db    ? ;
.bss:000000000021E9DD                 db    ? ;
.bss:000000000021E9DE                 db    ? ;
.bss:000000000021E9DF                 db    ? ;
.bss:000000000021E9E0                 db    ? ;
.bss:000000000021E9E1                 db    ? ;
.bss:000000000021E9E2                 db    ? ;
.bss:000000000021E9E3                 db    ? ;
.bss:000000000021E9E4                 db    ? ;
.bss:000000000021E9E5                 db    ? ;
.bss:000000000021E9E6                 db    ? ;
.bss:000000000021E9E7                 db    ? ;
.bss:000000000021E9E8                 db    ? ;
.bss:000000000021E9E9                 db    ? ;
.bss:000000000021E9EA                 db    ? ;
.bss:000000000021E9EB                 db    ? ;
.bss:000000000021E9EC                 db    ? ;
.bss:000000000021E9ED                 db    ? ;
.bss:000000000021E9EE                 db    ? ;
.bss:000000000021E9EF                 db    ? ;
.bss:000000000021E9F0                 db    ? ;
.bss:000000000021E9F1                 db    ? ;
.bss:000000000021E9F2                 db    ? ;
.bss:000000000021E9F3                 db    ? ;
.bss:000000000021E9F4                 db    ? ;
.bss:000000000021E9F5                 db    ? ;
.bss:000000000021E9F6                 db    ? ;
.bss:000000000021E9F7                 db    ? ;
.bss:000000000021E9F8                 db    ? ;
.bss:000000000021E9F9                 db    ? ;
.bss:000000000021E9FA                 db    ? ;
.bss:000000000021E9FB                 db    ? ;
.bss:000000000021E9FC                 db    ? ;
.bss:000000000021E9FD                 db    ? ;
.bss:000000000021E9FE                 db    ? ;
.bss:000000000021E9FF                 db    ? ;
.bss:000000000021EA00                 db    ? ;
.bss:000000000021EA01                 db    ? ;
.bss:000000000021EA02                 db    ? ;
.bss:000000000021EA03                 db    ? ;
.bss:000000000021EA04                 db    ? ;
.bss:000000000021EA05                 db    ? ;
.bss:000000000021EA06                 db    ? ;
.bss:000000000021EA07                 db    ? ;
.bss:000000000021EA08                 db    ? ;
.bss:000000000021EA09                 db    ? ;
.bss:000000000021EA0A                 db    ? ;
.bss:000000000021EA0B                 db    ? ;
.bss:000000000021EA0C                 db    ? ;
.bss:000000000021EA0D                 db    ? ;
.bss:000000000021EA0E                 db    ? ;
.bss:000000000021EA0F                 db    ? ;
.bss:000000000021EA10                 db    ? ;
.bss:000000000021EA11                 db    ? ;
.bss:000000000021EA12                 db    ? ;
.bss:000000000021EA13                 db    ? ;
.bss:000000000021EA14                 db    ? ;
.bss:000000000021EA15                 db    ? ;
.bss:000000000021EA16                 db    ? ;
.bss:000000000021EA17                 db    ? ;
.bss:000000000021EA18                 db    ? ;
.bss:000000000021EA19                 db    ? ;
.bss:000000000021EA1A                 db    ? ;
.bss:000000000021EA1B                 db    ? ;
.bss:000000000021EA1C                 db    ? ;
.bss:000000000021EA1D                 db    ? ;
.bss:000000000021EA1E                 db    ? ;
.bss:000000000021EA1F                 db    ? ;
.bss:000000000021EA20                 db    ? ;
.bss:000000000021EA21                 db    ? ;
.bss:000000000021EA22                 db    ? ;
.bss:000000000021EA23                 db    ? ;
.bss:000000000021EA24                 db    ? ;
.bss:000000000021EA25                 db    ? ;
.bss:000000000021EA26                 db    ? ;
.bss:000000000021EA27                 db    ? ;
.bss:000000000021EA28                 db    ? ;
.bss:000000000021EA29                 db    ? ;
.bss:000000000021EA2A                 db    ? ;
.bss:000000000021EA2B                 db    ? ;
.bss:000000000021EA2C                 db    ? ;
.bss:000000000021EA2D                 db    ? ;
.bss:000000000021EA2E                 db    ? ;
.bss:000000000021EA2F                 db    ? ;
.bss:000000000021EA30                 db    ? ;
.bss:000000000021EA31                 db    ? ;
.bss:000000000021EA32                 db    ? ;
.bss:000000000021EA33                 db    ? ;
.bss:000000000021EA34                 db    ? ;
.bss:000000000021EA35                 db    ? ;
.bss:000000000021EA36                 db    ? ;
.bss:000000000021EA37                 db    ? ;
.bss:000000000021EA38                 db    ? ;
.bss:000000000021EA39                 db    ? ;
.bss:000000000021EA3A                 db    ? ;
.bss:000000000021EA3B                 db    ? ;
.bss:000000000021EA3C                 db    ? ;
.bss:000000000021EA3D                 db    ? ;
.bss:000000000021EA3E                 db    ? ;
.bss:000000000021EA3F                 db    ? ;
.bss:000000000021EA40                 db    ? ;
.bss:000000000021EA41                 db    ? ;
.bss:000000000021EA42                 db    ? ;
.bss:000000000021EA43                 db    ? ;
.bss:000000000021EA44                 db    ? ;
.bss:000000000021EA45                 db    ? ;
.bss:000000000021EA46                 db    ? ;
.bss:000000000021EA47                 db    ? ;
.bss:000000000021EA48                 db    ? ;
.bss:000000000021EA49                 db    ? ;
.bss:000000000021EA4A                 db    ? ;
.bss:000000000021EA4B                 db    ? ;
.bss:000000000021EA4C                 db    ? ;
.bss:000000000021EA4D                 db    ? ;
.bss:000000000021EA4E                 db    ? ;
.bss:000000000021EA4F                 db    ? ;
.bss:000000000021EA50                 db    ? ;
.bss:000000000021EA51                 db    ? ;
.bss:000000000021EA52                 db    ? ;
.bss:000000000021EA53                 db    ? ;
.bss:000000000021EA54                 db    ? ;
.bss:000000000021EA55                 db    ? ;
.bss:000000000021EA56                 db    ? ;
.bss:000000000021EA57                 db    ? ;
.bss:000000000021EA58                 db    ? ;
.bss:000000000021EA59                 db    ? ;
.bss:000000000021EA5A                 db    ? ;
.bss:000000000021EA5B                 db    ? ;
.bss:000000000021EA5C                 db    ? ;
.bss:000000000021EA5D                 db    ? ;
.bss:000000000021EA5E                 db    ? ;
.bss:000000000021EA5F                 db    ? ;
.bss:000000000021EA60                 db    ? ;
.bss:000000000021EA61                 db    ? ;
.bss:000000000021EA62                 db    ? ;
.bss:000000000021EA63                 db    ? ;
.bss:000000000021EA64                 db    ? ;
.bss:000000000021EA65                 db    ? ;
.bss:000000000021EA66                 db    ? ;
.bss:000000000021EA67                 db    ? ;
.bss:000000000021EA68                 db    ? ;
.bss:000000000021EA69                 db    ? ;
.bss:000000000021EA6A                 db    ? ;
.bss:000000000021EA6B                 db    ? ;
.bss:000000000021EA6C                 db    ? ;
.bss:000000000021EA6D                 db    ? ;
.bss:000000000021EA6E                 db    ? ;
.bss:000000000021EA6F                 db    ? ;
.bss:000000000021EA70                 db    ? ;
.bss:000000000021EA71                 db    ? ;
.bss:000000000021EA72                 db    ? ;
.bss:000000000021EA73                 db    ? ;
.bss:000000000021EA74                 db    ? ;
.bss:000000000021EA75                 db    ? ;
.bss:000000000021EA76                 db    ? ;
.bss:000000000021EA77                 db    ? ;
.bss:000000000021EA78                 db    ? ;
.bss:000000000021EA79                 db    ? ;
.bss:000000000021EA7A                 db    ? ;
.bss:000000000021EA7B                 db    ? ;
.bss:000000000021EA7C                 db    ? ;
.bss:000000000021EA7D                 db    ? ;
.bss:000000000021EA7E                 db    ? ;
.bss:000000000021EA7F                 db    ? ;
.bss:000000000021EA80                 db    ? ;
.bss:000000000021EA81                 db    ? ;
.bss:000000000021EA82                 db    ? ;
.bss:000000000021EA83                 db    ? ;
.bss:000000000021EA84                 db    ? ;
.bss:000000000021EA85                 db    ? ;
.bss:000000000021EA86                 db    ? ;
.bss:000000000021EA87                 db    ? ;
.bss:000000000021EA88                 db    ? ;
.bss:000000000021EA89                 db    ? ;
.bss:000000000021EA8A                 db    ? ;
.bss:000000000021EA8B                 db    ? ;
.bss:000000000021EA8C                 db    ? ;
.bss:000000000021EA8D                 db    ? ;
.bss:000000000021EA8E                 db    ? ;
.bss:000000000021EA8F                 db    ? ;
.bss:000000000021EA90                 db    ? ;
.bss:000000000021EA91                 db    ? ;
.bss:000000000021EA92                 db    ? ;
.bss:000000000021EA93                 db    ? ;
.bss:000000000021EA94                 db    ? ;
.bss:000000000021EA95                 db    ? ;
.bss:000000000021EA96                 db    ? ;
.bss:000000000021EA97                 db    ? ;
.bss:000000000021EA98                 db    ? ;
.bss:000000000021EA99                 db    ? ;
.bss:000000000021EA9A                 db    ? ;
.bss:000000000021EA9B                 db    ? ;
.bss:000000000021EA9C                 db    ? ;
.bss:000000000021EA9D                 db    ? ;
.bss:000000000021EA9E                 db    ? ;
.bss:000000000021EA9F                 db    ? ;
.bss:000000000021EAA0                 db    ? ;
.bss:000000000021EAA1                 db    ? ;
.bss:000000000021EAA2                 db    ? ;
.bss:000000000021EAA3                 db    ? ;
.bss:000000000021EAA4                 db    ? ;
.bss:000000000021EAA5                 db    ? ;
.bss:000000000021EAA6                 db    ? ;
.bss:000000000021EAA7                 db    ? ;
.bss:000000000021EAA8                 db    ? ;
.bss:000000000021EAA9                 db    ? ;
.bss:000000000021EAAA                 db    ? ;
.bss:000000000021EAAB                 db    ? ;
.bss:000000000021EAAC                 db    ? ;
.bss:000000000021EAAD                 db    ? ;
.bss:000000000021EAAE                 db    ? ;
.bss:000000000021EAAF                 db    ? ;
.bss:000000000021EAB0                 db    ? ;
.bss:000000000021EAB1                 db    ? ;
.bss:000000000021EAB2                 db    ? ;
.bss:000000000021EAB3                 db    ? ;
.bss:000000000021EAB4                 db    ? ;
.bss:000000000021EAB5                 db    ? ;
.bss:000000000021EAB6                 db    ? ;
.bss:000000000021EAB7                 db    ? ;
.bss:000000000021EAB8                 db    ? ;
.bss:000000000021EAB9                 db    ? ;
.bss:000000000021EABA                 db    ? ;
.bss:000000000021EABB                 db    ? ;
.bss:000000000021EABC                 db    ? ;
.bss:000000000021EABD                 db    ? ;
.bss:000000000021EABE                 db    ? ;
.bss:000000000021EABF                 db    ? ;
.bss:000000000021EAC0                 db    ? ;
.bss:000000000021EAC1                 db    ? ;
.bss:000000000021EAC2                 db    ? ;
.bss:000000000021EAC3                 db    ? ;
.bss:000000000021EAC4                 db    ? ;
.bss:000000000021EAC5                 db    ? ;
.bss:000000000021EAC6                 db    ? ;
.bss:000000000021EAC7                 db    ? ;
.bss:000000000021EAC8                 db    ? ;
.bss:000000000021EAC9                 db    ? ;
.bss:000000000021EACA                 db    ? ;
.bss:000000000021EACB                 db    ? ;
.bss:000000000021EACC                 db    ? ;
.bss:000000000021EACD                 db    ? ;
.bss:000000000021EACE                 db    ? ;
.bss:000000000021EACF                 db    ? ;
.bss:000000000021EAD0                 db    ? ;
.bss:000000000021EAD1                 db    ? ;
.bss:000000000021EAD2                 db    ? ;
.bss:000000000021EAD3                 db    ? ;
.bss:000000000021EAD4                 db    ? ;
.bss:000000000021EAD5                 db    ? ;
.bss:000000000021EAD6                 db    ? ;
.bss:000000000021EAD7                 db    ? ;
.bss:000000000021EAD8                 db    ? ;
.bss:000000000021EAD9                 db    ? ;
.bss:000000000021EADA                 db    ? ;
.bss:000000000021EADB                 db    ? ;
.bss:000000000021EADC                 db    ? ;
.bss:000000000021EADD                 db    ? ;
.bss:000000000021EADE                 db    ? ;
.bss:000000000021EADF                 db    ? ;
.bss:000000000021EAE0                 db    ? ;
.bss:000000000021EAE1                 db    ? ;
.bss:000000000021EAE2                 db    ? ;
.bss:000000000021EAE3                 db    ? ;
.bss:000000000021EAE4                 db    ? ;
.bss:000000000021EAE5                 db    ? ;
.bss:000000000021EAE6                 db    ? ;
.bss:000000000021EAE7                 db    ? ;
.bss:000000000021EAE8                 db    ? ;
.bss:000000000021EAE9                 db    ? ;
.bss:000000000021EAEA                 db    ? ;
.bss:000000000021EAEB                 db    ? ;
.bss:000000000021EAEC                 db    ? ;
.bss:000000000021EAED                 db    ? ;
.bss:000000000021EAEE                 db    ? ;
.bss:000000000021EAEF                 db    ? ;
.bss:000000000021EAF0                 db    ? ;
.bss:000000000021EAF1                 db    ? ;
.bss:000000000021EAF2                 db    ? ;
.bss:000000000021EAF3                 db    ? ;
.bss:000000000021EAF4                 db    ? ;
.bss:000000000021EAF5                 db    ? ;
.bss:000000000021EAF6                 db    ? ;
.bss:000000000021EAF7                 db    ? ;
.bss:000000000021EAF8                 db    ? ;
.bss:000000000021EAF9                 db    ? ;
.bss:000000000021EAFA                 db    ? ;
.bss:000000000021EAFB                 db    ? ;
.bss:000000000021EAFC                 db    ? ;
.bss:000000000021EAFD                 db    ? ;
.bss:000000000021EAFE                 db    ? ;
.bss:000000000021EAFF                 db    ? ;
.bss:000000000021EB00                 db    ? ;
.bss:000000000021EB01                 db    ? ;
.bss:000000000021EB02                 db    ? ;
.bss:000000000021EB03                 db    ? ;
.bss:000000000021EB04                 db    ? ;
.bss:000000000021EB05                 db    ? ;
.bss:000000000021EB06                 db    ? ;
.bss:000000000021EB07                 db    ? ;
.bss:000000000021EB08                 db    ? ;
.bss:000000000021EB09                 db    ? ;
.bss:000000000021EB0A                 db    ? ;
.bss:000000000021EB0B                 db    ? ;
.bss:000000000021EB0C                 db    ? ;
.bss:000000000021EB0D                 db    ? ;
.bss:000000000021EB0E                 db    ? ;
.bss:000000000021EB0F                 db    ? ;
.bss:000000000021EB10                 db    ? ;
.bss:000000000021EB11                 db    ? ;
.bss:000000000021EB12                 db    ? ;
.bss:000000000021EB13                 db    ? ;
.bss:000000000021EB14                 db    ? ;
.bss:000000000021EB15                 db    ? ;
.bss:000000000021EB16                 db    ? ;
.bss:000000000021EB17                 db    ? ;
.bss:000000000021EB18                 db    ? ;
.bss:000000000021EB19                 db    ? ;
.bss:000000000021EB1A                 db    ? ;
.bss:000000000021EB1B                 db    ? ;
.bss:000000000021EB1C                 db    ? ;
.bss:000000000021EB1D                 db    ? ;
.bss:000000000021EB1E                 db    ? ;
.bss:000000000021EB1F                 db    ? ;
.bss:000000000021EB20                 db    ? ;
.bss:000000000021EB21                 db    ? ;
.bss:000000000021EB22                 db    ? ;
.bss:000000000021EB23                 db    ? ;
.bss:000000000021EB24                 db    ? ;
.bss:000000000021EB25                 db    ? ;
.bss:000000000021EB26                 db    ? ;
.bss:000000000021EB27                 db    ? ;
.bss:000000000021EB28                 db    ? ;
.bss:000000000021EB29                 db    ? ;
.bss:000000000021EB2A                 db    ? ;
.bss:000000000021EB2B                 db    ? ;
.bss:000000000021EB2C                 db    ? ;
.bss:000000000021EB2D                 db    ? ;
.bss:000000000021EB2E                 db    ? ;
.bss:000000000021EB2F                 db    ? ;
.bss:000000000021EB30                 db    ? ;
.bss:000000000021EB31                 db    ? ;
.bss:000000000021EB32                 db    ? ;
.bss:000000000021EB33                 db    ? ;
.bss:000000000021EB34                 db    ? ;
.bss:000000000021EB35                 db    ? ;
.bss:000000000021EB36                 db    ? ;
.bss:000000000021EB37                 db    ? ;
.bss:000000000021EB38                 db    ? ;
.bss:000000000021EB39                 db    ? ;
.bss:000000000021EB3A                 db    ? ;
.bss:000000000021EB3B                 db    ? ;
.bss:000000000021EB3C                 db    ? ;
.bss:000000000021EB3D                 db    ? ;
.bss:000000000021EB3E                 db    ? ;
.bss:000000000021EB3F                 db    ? ;
.bss:000000000021EB40                 db    ? ;
.bss:000000000021EB41                 db    ? ;
.bss:000000000021EB42                 db    ? ;
.bss:000000000021EB43                 db    ? ;
.bss:000000000021EB44                 db    ? ;
.bss:000000000021EB45                 db    ? ;
.bss:000000000021EB46                 db    ? ;
.bss:000000000021EB47                 db    ? ;
.bss:000000000021EB48                 db    ? ;
.bss:000000000021EB49                 db    ? ;
.bss:000000000021EB4A                 db    ? ;
.bss:000000000021EB4B                 db    ? ;
.bss:000000000021EB4C                 db    ? ;
.bss:000000000021EB4D                 db    ? ;
.bss:000000000021EB4E                 db    ? ;
.bss:000000000021EB4F                 db    ? ;
.bss:000000000021EB50                 db    ? ;
.bss:000000000021EB51                 db    ? ;
.bss:000000000021EB52                 db    ? ;
.bss:000000000021EB53                 db    ? ;
.bss:000000000021EB54                 db    ? ;
.bss:000000000021EB55                 db    ? ;
.bss:000000000021EB56                 db    ? ;
.bss:000000000021EB57                 db    ? ;
.bss:000000000021EB58                 db    ? ;
.bss:000000000021EB59                 db    ? ;
.bss:000000000021EB5A                 db    ? ;
.bss:000000000021EB5B                 db    ? ;
.bss:000000000021EB5C                 db    ? ;
.bss:000000000021EB5D                 db    ? ;
.bss:000000000021EB5E                 db    ? ;
.bss:000000000021EB5F                 db    ? ;
.bss:000000000021EB60                 db    ? ;
.bss:000000000021EB61                 db    ? ;
.bss:000000000021EB62                 db    ? ;
.bss:000000000021EB63                 db    ? ;
.bss:000000000021EB64                 db    ? ;
.bss:000000000021EB65                 db    ? ;
.bss:000000000021EB66                 db    ? ;
.bss:000000000021EB67                 db    ? ;
.bss:000000000021EB68                 db    ? ;
.bss:000000000021EB69                 db    ? ;
.bss:000000000021EB6A                 db    ? ;
.bss:000000000021EB6B                 db    ? ;
.bss:000000000021EB6C                 db    ? ;
.bss:000000000021EB6D                 db    ? ;
.bss:000000000021EB6E                 db    ? ;
.bss:000000000021EB6F                 db    ? ;
.bss:000000000021EB70                 db    ? ;
.bss:000000000021EB71                 db    ? ;
.bss:000000000021EB72                 db    ? ;
.bss:000000000021EB73                 db    ? ;
.bss:000000000021EB74                 db    ? ;
.bss:000000000021EB75                 db    ? ;
.bss:000000000021EB76                 db    ? ;
.bss:000000000021EB77                 db    ? ;
.bss:000000000021EB78                 db    ? ;
.bss:000000000021EB79                 db    ? ;
.bss:000000000021EB7A                 db    ? ;
.bss:000000000021EB7B                 db    ? ;
.bss:000000000021EB7C                 db    ? ;
.bss:000000000021EB7D                 db    ? ;
.bss:000000000021EB7E                 db    ? ;
.bss:000000000021EB7F                 db    ? ;
.bss:000000000021EB80                 db    ? ;
.bss:000000000021EB81                 db    ? ;
.bss:000000000021EB82                 db    ? ;
.bss:000000000021EB83                 db    ? ;
.bss:000000000021EB84                 db    ? ;
.bss:000000000021EB85                 db    ? ;
.bss:000000000021EB86                 db    ? ;
.bss:000000000021EB87                 db    ? ;
.bss:000000000021EB88                 db    ? ;
.bss:000000000021EB89                 db    ? ;
.bss:000000000021EB8A                 db    ? ;
.bss:000000000021EB8B                 db    ? ;
.bss:000000000021EB8C                 db    ? ;
.bss:000000000021EB8D                 db    ? ;
.bss:000000000021EB8E                 db    ? ;
.bss:000000000021EB8F                 db    ? ;
.bss:000000000021EB90                 db    ? ;
.bss:000000000021EB91                 db    ? ;
.bss:000000000021EB92                 db    ? ;
.bss:000000000021EB93                 db    ? ;
.bss:000000000021EB94                 db    ? ;
.bss:000000000021EB95                 db    ? ;
.bss:000000000021EB96                 db    ? ;
.bss:000000000021EB97                 db    ? ;
.bss:000000000021EB98                 db    ? ;
.bss:000000000021EB99                 db    ? ;
.bss:000000000021EB9A                 db    ? ;
.bss:000000000021EB9B                 db    ? ;
.bss:000000000021EB9C                 db    ? ;
.bss:000000000021EB9D                 db    ? ;
.bss:000000000021EB9E                 db    ? ;
.bss:000000000021EB9F                 db    ? ;
.bss:000000000021EBA0                 db    ? ;
.bss:000000000021EBA1                 db    ? ;
.bss:000000000021EBA2                 db    ? ;
.bss:000000000021EBA3                 db    ? ;
.bss:000000000021EBA4                 db    ? ;
.bss:000000000021EBA5                 db    ? ;
.bss:000000000021EBA6                 db    ? ;
.bss:000000000021EBA7                 db    ? ;
.bss:000000000021EBA8                 db    ? ;
.bss:000000000021EBA9                 db    ? ;
.bss:000000000021EBAA                 db    ? ;
.bss:000000000021EBAB                 db    ? ;
.bss:000000000021EBAC                 db    ? ;
.bss:000000000021EBAD                 db    ? ;
.bss:000000000021EBAE                 db    ? ;
.bss:000000000021EBAF                 db    ? ;
.bss:000000000021EBB0                 db    ? ;
.bss:000000000021EBB1                 db    ? ;
.bss:000000000021EBB2                 db    ? ;
.bss:000000000021EBB3                 db    ? ;
.bss:000000000021EBB4                 db    ? ;
.bss:000000000021EBB5                 db    ? ;
.bss:000000000021EBB6                 db    ? ;
.bss:000000000021EBB7                 db    ? ;
.bss:000000000021EBB8                 db    ? ;
.bss:000000000021EBB9                 db    ? ;
.bss:000000000021EBBA                 db    ? ;
.bss:000000000021EBBB                 db    ? ;
.bss:000000000021EBBC                 db    ? ;
.bss:000000000021EBBD                 db    ? ;
.bss:000000000021EBBE                 db    ? ;
.bss:000000000021EBBF                 db    ? ;
.bss:000000000021EBC0                 db    ? ;
.bss:000000000021EBC1                 db    ? ;
.bss:000000000021EBC2                 db    ? ;
.bss:000000000021EBC3                 db    ? ;
.bss:000000000021EBC4                 db    ? ;
.bss:000000000021EBC5                 db    ? ;
.bss:000000000021EBC6                 db    ? ;
.bss:000000000021EBC7                 db    ? ;
.bss:000000000021EBC8                 db    ? ;
.bss:000000000021EBC9                 db    ? ;
.bss:000000000021EBCA                 db    ? ;
.bss:000000000021EBCB                 db    ? ;
.bss:000000000021EBCC                 db    ? ;
.bss:000000000021EBCD                 db    ? ;
.bss:000000000021EBCE                 db    ? ;
.bss:000000000021EBCF                 db    ? ;
.bss:000000000021EBD0                 db    ? ;
.bss:000000000021EBD1                 db    ? ;
.bss:000000000021EBD2                 db    ? ;
.bss:000000000021EBD3                 db    ? ;
.bss:000000000021EBD4                 db    ? ;
.bss:000000000021EBD5                 db    ? ;
.bss:000000000021EBD6                 db    ? ;
.bss:000000000021EBD7                 db    ? ;
.bss:000000000021EBD8                 db    ? ;
.bss:000000000021EBD9                 db    ? ;
.bss:000000000021EBDA                 db    ? ;
.bss:000000000021EBDB                 db    ? ;
.bss:000000000021EBDC                 db    ? ;
.bss:000000000021EBDD                 db    ? ;
.bss:000000000021EBDE                 db    ? ;
.bss:000000000021EBDF                 db    ? ;
.bss:000000000021EBE0                 db    ? ;
.bss:000000000021EBE1                 db    ? ;
.bss:000000000021EBE2                 db    ? ;
.bss:000000000021EBE3                 db    ? ;
.bss:000000000021EBE4                 db    ? ;
.bss:000000000021EBE5                 db    ? ;
.bss:000000000021EBE6                 db    ? ;
.bss:000000000021EBE7                 db    ? ;
.bss:000000000021EBE8                 db    ? ;
.bss:000000000021EBE9                 db    ? ;
.bss:000000000021EBEA                 db    ? ;
.bss:000000000021EBEB                 db    ? ;
.bss:000000000021EBEC                 db    ? ;
.bss:000000000021EBED                 db    ? ;
.bss:000000000021EBEE                 db    ? ;
.bss:000000000021EBEF                 db    ? ;
.bss:000000000021EBF0                 db    ? ;
.bss:000000000021EBF1                 db    ? ;
.bss:000000000021EBF2                 db    ? ;
.bss:000000000021EBF3                 db    ? ;
.bss:000000000021EBF4                 db    ? ;
.bss:000000000021EBF5                 db    ? ;
.bss:000000000021EBF6                 db    ? ;
.bss:000000000021EBF7                 db    ? ;
.bss:000000000021EBF8                 db    ? ;
.bss:000000000021EBF9                 db    ? ;
.bss:000000000021EBFA                 db    ? ;
.bss:000000000021EBFB                 db    ? ;
.bss:000000000021EBFC                 db    ? ;
.bss:000000000021EBFD                 db    ? ;
.bss:000000000021EBFE                 db    ? ;
.bss:000000000021EBFF                 db    ? ;
.bss:000000000021EC00                 db    ? ;
.bss:000000000021EC01                 db    ? ;
.bss:000000000021EC02                 db    ? ;
.bss:000000000021EC03                 db    ? ;
.bss:000000000021EC04                 db    ? ;
.bss:000000000021EC05                 db    ? ;
.bss:000000000021EC06                 db    ? ;
.bss:000000000021EC07                 db    ? ;
.bss:000000000021EC08                 db    ? ;
.bss:000000000021EC09                 db    ? ;
.bss:000000000021EC0A                 db    ? ;
.bss:000000000021EC0B                 db    ? ;
.bss:000000000021EC0C                 db    ? ;
.bss:000000000021EC0D                 db    ? ;
.bss:000000000021EC0E                 db    ? ;
.bss:000000000021EC0F                 db    ? ;
.bss:000000000021EC10                 db    ? ;
.bss:000000000021EC11                 db    ? ;
.bss:000000000021EC12                 db    ? ;
.bss:000000000021EC13                 db    ? ;
.bss:000000000021EC14                 db    ? ;
.bss:000000000021EC15                 db    ? ;
.bss:000000000021EC16                 db    ? ;
.bss:000000000021EC17                 db    ? ;
.bss:000000000021EC18                 db    ? ;
.bss:000000000021EC19                 db    ? ;
.bss:000000000021EC1A                 db    ? ;
.bss:000000000021EC1B                 db    ? ;
.bss:000000000021EC1C                 db    ? ;
.bss:000000000021EC1D                 db    ? ;
.bss:000000000021EC1E                 db    ? ;
.bss:000000000021EC1F                 db    ? ;
.bss:000000000021EC20                 db    ? ;
.bss:000000000021EC21                 db    ? ;
.bss:000000000021EC22                 db    ? ;
.bss:000000000021EC23                 db    ? ;
.bss:000000000021EC24                 db    ? ;
.bss:000000000021EC25                 db    ? ;
.bss:000000000021EC26                 db    ? ;
.bss:000000000021EC27                 db    ? ;
.bss:000000000021EC28                 db    ? ;
.bss:000000000021EC29                 db    ? ;
.bss:000000000021EC2A                 db    ? ;
.bss:000000000021EC2B                 db    ? ;
.bss:000000000021EC2C                 db    ? ;
.bss:000000000021EC2D                 db    ? ;
.bss:000000000021EC2E                 db    ? ;
.bss:000000000021EC2F                 db    ? ;
.bss:000000000021EC30                 db    ? ;
.bss:000000000021EC31                 db    ? ;
.bss:000000000021EC32                 db    ? ;
.bss:000000000021EC33                 db    ? ;
.bss:000000000021EC34                 db    ? ;
.bss:000000000021EC35                 db    ? ;
.bss:000000000021EC36                 db    ? ;
.bss:000000000021EC37                 db    ? ;
.bss:000000000021EC38                 db    ? ;
.bss:000000000021EC39                 db    ? ;
.bss:000000000021EC3A                 db    ? ;
.bss:000000000021EC3B                 db    ? ;
.bss:000000000021EC3C                 db    ? ;
.bss:000000000021EC3D                 db    ? ;
.bss:000000000021EC3E                 db    ? ;
.bss:000000000021EC3F                 db    ? ;
.bss:000000000021EC40                 db    ? ;
.bss:000000000021EC41                 db    ? ;
.bss:000000000021EC42                 db    ? ;
.bss:000000000021EC43                 db    ? ;
.bss:000000000021EC44                 db    ? ;
.bss:000000000021EC45                 db    ? ;
.bss:000000000021EC46                 db    ? ;
.bss:000000000021EC47                 db    ? ;
.bss:000000000021EC48                 db    ? ;
.bss:000000000021EC49                 db    ? ;
.bss:000000000021EC4A                 db    ? ;
.bss:000000000021EC4B                 db    ? ;
.bss:000000000021EC4C                 db    ? ;
.bss:000000000021EC4D                 db    ? ;
.bss:000000000021EC4E                 db    ? ;
.bss:000000000021EC4F                 db    ? ;
.bss:000000000021EC50                 db    ? ;
.bss:000000000021EC51                 db    ? ;
.bss:000000000021EC52                 db    ? ;
.bss:000000000021EC53                 db    ? ;
.bss:000000000021EC54                 db    ? ;
.bss:000000000021EC55                 db    ? ;
.bss:000000000021EC56                 db    ? ;
.bss:000000000021EC57                 db    ? ;
.bss:000000000021EC58                 db    ? ;
.bss:000000000021EC59                 db    ? ;
.bss:000000000021EC5A                 db    ? ;
.bss:000000000021EC5B                 db    ? ;
.bss:000000000021EC5C                 db    ? ;
.bss:000000000021EC5D                 db    ? ;
.bss:000000000021EC5E                 db    ? ;
.bss:000000000021EC5F                 db    ? ;
.bss:000000000021EC60                 db    ? ;
.bss:000000000021EC61                 db    ? ;
.bss:000000000021EC62                 db    ? ;
.bss:000000000021EC63                 db    ? ;
.bss:000000000021EC64                 db    ? ;
.bss:000000000021EC65                 db    ? ;
.bss:000000000021EC66                 db    ? ;
.bss:000000000021EC67                 db    ? ;
.bss:000000000021EC68                 db    ? ;
.bss:000000000021EC69                 db    ? ;
.bss:000000000021EC6A                 db    ? ;
.bss:000000000021EC6B                 db    ? ;
.bss:000000000021EC6C                 db    ? ;
.bss:000000000021EC6D                 db    ? ;
.bss:000000000021EC6E                 db    ? ;
.bss:000000000021EC6F                 db    ? ;
.bss:000000000021EC70                 db    ? ;
.bss:000000000021EC71                 db    ? ;
.bss:000000000021EC72                 db    ? ;
.bss:000000000021EC73                 db    ? ;
.bss:000000000021EC74                 db    ? ;
.bss:000000000021EC75                 db    ? ;
.bss:000000000021EC76                 db    ? ;
.bss:000000000021EC77                 db    ? ;
.bss:000000000021EC78                 db    ? ;
.bss:000000000021EC79                 db    ? ;
.bss:000000000021EC7A                 db    ? ;
.bss:000000000021EC7B                 db    ? ;
.bss:000000000021EC7C                 db    ? ;
.bss:000000000021EC7D                 db    ? ;
.bss:000000000021EC7E                 db    ? ;
.bss:000000000021EC7F                 db    ? ;
.bss:000000000021EC80                 db    ? ;
.bss:000000000021EC81                 db    ? ;
.bss:000000000021EC82                 db    ? ;
.bss:000000000021EC83                 db    ? ;
.bss:000000000021EC84                 db    ? ;
.bss:000000000021EC85                 db    ? ;
.bss:000000000021EC86                 db    ? ;
.bss:000000000021EC87                 db    ? ;
.bss:000000000021EC88                 db    ? ;
.bss:000000000021EC89                 db    ? ;
.bss:000000000021EC8A                 db    ? ;
.bss:000000000021EC8B                 db    ? ;
.bss:000000000021EC8C                 db    ? ;
.bss:000000000021EC8D                 db    ? ;
.bss:000000000021EC8E                 db    ? ;
.bss:000000000021EC8F                 db    ? ;
.bss:000000000021EC90                 db    ? ;
.bss:000000000021EC91                 db    ? ;
.bss:000000000021EC92                 db    ? ;
.bss:000000000021EC93                 db    ? ;
.bss:000000000021EC94                 db    ? ;
.bss:000000000021EC95                 db    ? ;
.bss:000000000021EC96                 db    ? ;
.bss:000000000021EC97                 db    ? ;
.bss:000000000021EC98                 db    ? ;
.bss:000000000021EC99                 db    ? ;
.bss:000000000021EC9A                 db    ? ;
.bss:000000000021EC9B                 db    ? ;
.bss:000000000021EC9C                 db    ? ;
.bss:000000000021EC9D                 db    ? ;
.bss:000000000021EC9E                 db    ? ;
.bss:000000000021EC9F                 db    ? ;
.bss:000000000021ECA0                 db    ? ;
.bss:000000000021ECA1                 db    ? ;
.bss:000000000021ECA2                 db    ? ;
.bss:000000000021ECA3                 db    ? ;
.bss:000000000021ECA4                 db    ? ;
.bss:000000000021ECA5                 db    ? ;
.bss:000000000021ECA6                 db    ? ;
.bss:000000000021ECA7                 db    ? ;
.bss:000000000021ECA8                 db    ? ;
.bss:000000000021ECA9                 db    ? ;
.bss:000000000021ECAA                 db    ? ;
.bss:000000000021ECAB                 db    ? ;
.bss:000000000021ECAC                 db    ? ;
.bss:000000000021ECAD                 db    ? ;
.bss:000000000021ECAE                 db    ? ;
.bss:000000000021ECAF                 db    ? ;
.bss:000000000021ECB0                 db    ? ;
.bss:000000000021ECB1                 db    ? ;
.bss:000000000021ECB2                 db    ? ;
.bss:000000000021ECB3                 db    ? ;
.bss:000000000021ECB4                 db    ? ;
.bss:000000000021ECB5                 db    ? ;
.bss:000000000021ECB6                 db    ? ;
.bss:000000000021ECB7                 db    ? ;
.bss:000000000021ECB8                 db    ? ;
.bss:000000000021ECB9                 db    ? ;
.bss:000000000021ECBA                 db    ? ;
.bss:000000000021ECBB                 db    ? ;
.bss:000000000021ECBC                 db    ? ;
.bss:000000000021ECBD                 db    ? ;
.bss:000000000021ECBE                 db    ? ;
.bss:000000000021ECBF                 db    ? ;
.bss:000000000021ECC0                 db    ? ;
.bss:000000000021ECC1                 db    ? ;
.bss:000000000021ECC2                 db    ? ;
.bss:000000000021ECC3                 db    ? ;
.bss:000000000021ECC4                 db    ? ;
.bss:000000000021ECC5                 db    ? ;
.bss:000000000021ECC6                 db    ? ;
.bss:000000000021ECC7                 db    ? ;
.bss:000000000021ECC8                 db    ? ;
.bss:000000000021ECC9                 db    ? ;
.bss:000000000021ECCA                 db    ? ;
.bss:000000000021ECCB                 db    ? ;
.bss:000000000021ECCC                 db    ? ;
.bss:000000000021ECCD                 db    ? ;
.bss:000000000021ECCE                 db    ? ;
.bss:000000000021ECCF                 db    ? ;
.bss:000000000021ECD0                 db    ? ;
.bss:000000000021ECD1                 db    ? ;
.bss:000000000021ECD2                 db    ? ;
.bss:000000000021ECD3                 db    ? ;
.bss:000000000021ECD4                 db    ? ;
.bss:000000000021ECD5                 db    ? ;
.bss:000000000021ECD6                 db    ? ;
.bss:000000000021ECD7                 db    ? ;
.bss:000000000021ECD8                 db    ? ;
.bss:000000000021ECD9                 db    ? ;
.bss:000000000021ECDA                 db    ? ;
.bss:000000000021ECDB                 db    ? ;
.bss:000000000021ECDC                 db    ? ;
.bss:000000000021ECDD                 db    ? ;
.bss:000000000021ECDE                 db    ? ;
.bss:000000000021ECDF                 db    ? ;
.bss:000000000021ECE0                 db    ? ;
.bss:000000000021ECE1                 db    ? ;
.bss:000000000021ECE2                 db    ? ;
.bss:000000000021ECE3                 db    ? ;
.bss:000000000021ECE4                 db    ? ;
.bss:000000000021ECE5                 db    ? ;
.bss:000000000021ECE6                 db    ? ;
.bss:000000000021ECE7                 db    ? ;
.bss:000000000021ECE8                 db    ? ;
.bss:000000000021ECE9                 db    ? ;
.bss:000000000021ECEA                 db    ? ;
.bss:000000000021ECEB                 db    ? ;
.bss:000000000021ECEC                 db    ? ;
.bss:000000000021ECED                 db    ? ;
.bss:000000000021ECEE                 db    ? ;
.bss:000000000021ECEF                 db    ? ;
.bss:000000000021ECF0                 db    ? ;
.bss:000000000021ECF1                 db    ? ;
.bss:000000000021ECF2                 db    ? ;
.bss:000000000021ECF3                 db    ? ;
.bss:000000000021ECF4                 db    ? ;
.bss:000000000021ECF5                 db    ? ;
.bss:000000000021ECF6                 db    ? ;
.bss:000000000021ECF7                 db    ? ;
.bss:000000000021ECF8                 db    ? ;
.bss:000000000021ECF9                 db    ? ;
.bss:000000000021ECFA                 db    ? ;
.bss:000000000021ECFB                 db    ? ;
.bss:000000000021ECFC                 db    ? ;
.bss:000000000021ECFD                 db    ? ;
.bss:000000000021ECFE                 db    ? ;
.bss:000000000021ECFF                 db    ? ;
.bss:000000000021ED00                 db    ? ;
.bss:000000000021ED01                 db    ? ;
.bss:000000000021ED02                 db    ? ;
.bss:000000000021ED03                 db    ? ;
.bss:000000000021ED04                 db    ? ;
.bss:000000000021ED05                 db    ? ;
.bss:000000000021ED06                 db    ? ;
.bss:000000000021ED07                 db    ? ;
.bss:000000000021ED08                 db    ? ;
.bss:000000000021ED09                 db    ? ;
.bss:000000000021ED0A                 db    ? ;
.bss:000000000021ED0B                 db    ? ;
.bss:000000000021ED0C                 db    ? ;
.bss:000000000021ED0D                 db    ? ;
.bss:000000000021ED0E                 db    ? ;
.bss:000000000021ED0F                 db    ? ;
.bss:000000000021ED10                 db    ? ;
.bss:000000000021ED11                 db    ? ;
.bss:000000000021ED12                 db    ? ;
.bss:000000000021ED13                 db    ? ;
.bss:000000000021ED14                 db    ? ;
.bss:000000000021ED15                 db    ? ;
.bss:000000000021ED16                 db    ? ;
.bss:000000000021ED17                 db    ? ;
.bss:000000000021ED18                 db    ? ;
.bss:000000000021ED19                 db    ? ;
.bss:000000000021ED1A                 db    ? ;
.bss:000000000021ED1B                 db    ? ;
.bss:000000000021ED1C                 db    ? ;
.bss:000000000021ED1D                 db    ? ;
.bss:000000000021ED1E                 db    ? ;
.bss:000000000021ED1F                 db    ? ;
.bss:000000000021ED20                 db    ? ;
.bss:000000000021ED21                 db    ? ;
.bss:000000000021ED22                 db    ? ;
.bss:000000000021ED23                 db    ? ;
.bss:000000000021ED24                 db    ? ;
.bss:000000000021ED25                 db    ? ;
.bss:000000000021ED26                 db    ? ;
.bss:000000000021ED27                 db    ? ;
.bss:000000000021ED28                 db    ? ;
.bss:000000000021ED29                 db    ? ;
.bss:000000000021ED2A                 db    ? ;
.bss:000000000021ED2B                 db    ? ;
.bss:000000000021ED2C                 db    ? ;
.bss:000000000021ED2D                 db    ? ;
.bss:000000000021ED2E                 db    ? ;
.bss:000000000021ED2F                 db    ? ;
.bss:000000000021ED30                 db    ? ;
.bss:000000000021ED31                 db    ? ;
.bss:000000000021ED32                 db    ? ;
.bss:000000000021ED33                 db    ? ;
.bss:000000000021ED34                 db    ? ;
.bss:000000000021ED35                 db    ? ;
.bss:000000000021ED36                 db    ? ;
.bss:000000000021ED37                 db    ? ;
.bss:000000000021ED38                 db    ? ;
.bss:000000000021ED39                 db    ? ;
.bss:000000000021ED3A                 db    ? ;
.bss:000000000021ED3B                 db    ? ;
.bss:000000000021ED3C                 db    ? ;
.bss:000000000021ED3D                 db    ? ;
.bss:000000000021ED3E                 db    ? ;
.bss:000000000021ED3F                 db    ? ;
.bss:000000000021ED40                 db    ? ;
.bss:000000000021ED41                 db    ? ;
.bss:000000000021ED42                 db    ? ;
.bss:000000000021ED43                 db    ? ;
.bss:000000000021ED44                 db    ? ;
.bss:000000000021ED45                 db    ? ;
.bss:000000000021ED46                 db    ? ;
.bss:000000000021ED47                 db    ? ;
.bss:000000000021ED48                 db    ? ;
.bss:000000000021ED49                 db    ? ;
.bss:000000000021ED4A                 db    ? ;
.bss:000000000021ED4B                 db    ? ;
.bss:000000000021ED4C                 db    ? ;
.bss:000000000021ED4D                 db    ? ;
.bss:000000000021ED4E                 db    ? ;
.bss:000000000021ED4F                 db    ? ;
.bss:000000000021ED50                 db    ? ;
.bss:000000000021ED51                 db    ? ;
.bss:000000000021ED52                 db    ? ;
.bss:000000000021ED53                 db    ? ;
.bss:000000000021ED54                 db    ? ;
.bss:000000000021ED55                 db    ? ;
.bss:000000000021ED56                 db    ? ;
.bss:000000000021ED57                 db    ? ;
.bss:000000000021ED58                 db    ? ;
.bss:000000000021ED59                 db    ? ;
.bss:000000000021ED5A                 db    ? ;
.bss:000000000021ED5B                 db    ? ;
.bss:000000000021ED5C                 db    ? ;
.bss:000000000021ED5D                 db    ? ;
.bss:000000000021ED5E                 db    ? ;
.bss:000000000021ED5F                 db    ? ;
.bss:000000000021ED60                 db    ? ;
.bss:000000000021ED61                 db    ? ;
.bss:000000000021ED62                 db    ? ;
.bss:000000000021ED63                 db    ? ;
.bss:000000000021ED64                 db    ? ;
.bss:000000000021ED65                 db    ? ;
.bss:000000000021ED66                 db    ? ;
.bss:000000000021ED67                 db    ? ;
.bss:000000000021ED68                 db    ? ;
.bss:000000000021ED69                 db    ? ;
.bss:000000000021ED6A                 db    ? ;
.bss:000000000021ED6B                 db    ? ;
.bss:000000000021ED6C                 db    ? ;
.bss:000000000021ED6D                 db    ? ;
.bss:000000000021ED6E                 db    ? ;
.bss:000000000021ED6F                 db    ? ;
.bss:000000000021ED70                 db    ? ;
.bss:000000000021ED71                 db    ? ;
.bss:000000000021ED72                 db    ? ;
.bss:000000000021ED73                 db    ? ;
.bss:000000000021ED74                 db    ? ;
.bss:000000000021ED75                 db    ? ;
.bss:000000000021ED76                 db    ? ;
.bss:000000000021ED77                 db    ? ;
.bss:000000000021ED78                 db    ? ;
.bss:000000000021ED79                 db    ? ;
.bss:000000000021ED7A                 db    ? ;
.bss:000000000021ED7B                 db    ? ;
.bss:000000000021ED7C                 db    ? ;
.bss:000000000021ED7D                 db    ? ;
.bss:000000000021ED7E                 db    ? ;
.bss:000000000021ED7F                 db    ? ;
.bss:000000000021ED80                 db    ? ;
.bss:000000000021ED81                 db    ? ;
.bss:000000000021ED82                 db    ? ;
.bss:000000000021ED83                 db    ? ;
.bss:000000000021ED84                 db    ? ;
.bss:000000000021ED85                 db    ? ;
.bss:000000000021ED86                 db    ? ;
.bss:000000000021ED87                 db    ? ;
.bss:000000000021ED88                 db    ? ;
.bss:000000000021ED89                 db    ? ;
.bss:000000000021ED8A                 db    ? ;
.bss:000000000021ED8B                 db    ? ;
.bss:000000000021ED8C                 db    ? ;
.bss:000000000021ED8D                 db    ? ;
.bss:000000000021ED8E                 db    ? ;
.bss:000000000021ED8F                 db    ? ;
.bss:000000000021ED90                 db    ? ;
.bss:000000000021ED91                 db    ? ;
.bss:000000000021ED92                 db    ? ;
.bss:000000000021ED93                 db    ? ;
.bss:000000000021ED94                 db    ? ;
.bss:000000000021ED95                 db    ? ;
.bss:000000000021ED96                 db    ? ;
.bss:000000000021ED97                 db    ? ;
.bss:000000000021ED98                 db    ? ;
.bss:000000000021ED99                 db    ? ;
.bss:000000000021ED9A                 db    ? ;
.bss:000000000021ED9B                 db    ? ;
.bss:000000000021ED9C                 db    ? ;
.bss:000000000021ED9D                 db    ? ;
.bss:000000000021ED9E                 db    ? ;
.bss:000000000021ED9F                 db    ? ;
.bss:000000000021EDA0                 db    ? ;
.bss:000000000021EDA1                 db    ? ;
.bss:000000000021EDA2                 db    ? ;
.bss:000000000021EDA3                 db    ? ;
.bss:000000000021EDA4                 db    ? ;
.bss:000000000021EDA5                 db    ? ;
.bss:000000000021EDA6                 db    ? ;
.bss:000000000021EDA7                 db    ? ;
.bss:000000000021EDA8                 db    ? ;
.bss:000000000021EDA9                 db    ? ;
.bss:000000000021EDAA                 db    ? ;
.bss:000000000021EDAB                 db    ? ;
.bss:000000000021EDAC                 db    ? ;
.bss:000000000021EDAD                 db    ? ;
.bss:000000000021EDAE                 db    ? ;
.bss:000000000021EDAF                 db    ? ;
.bss:000000000021EDB0                 db    ? ;
.bss:000000000021EDB1                 db    ? ;
.bss:000000000021EDB2                 db    ? ;
.bss:000000000021EDB3                 db    ? ;
.bss:000000000021EDB4                 db    ? ;
.bss:000000000021EDB5                 db    ? ;
.bss:000000000021EDB6                 db    ? ;
.bss:000000000021EDB7                 db    ? ;
.bss:000000000021EDB8                 db    ? ;
.bss:000000000021EDB9                 db    ? ;
.bss:000000000021EDBA                 db    ? ;
.bss:000000000021EDBB                 db    ? ;
.bss:000000000021EDBC                 db    ? ;
.bss:000000000021EDBD                 db    ? ;
.bss:000000000021EDBE                 db    ? ;
.bss:000000000021EDBF                 db    ? ;
.bss:000000000021EDC0                 db    ? ;
.bss:000000000021EDC1                 db    ? ;
.bss:000000000021EDC2                 db    ? ;
.bss:000000000021EDC3                 db    ? ;
.bss:000000000021EDC4                 db    ? ;
.bss:000000000021EDC5                 db    ? ;
.bss:000000000021EDC6                 db    ? ;
.bss:000000000021EDC7                 db    ? ;
.bss:000000000021EDC8                 db    ? ;
.bss:000000000021EDC9                 db    ? ;
.bss:000000000021EDCA                 db    ? ;
.bss:000000000021EDCB                 db    ? ;
.bss:000000000021EDCC                 db    ? ;
.bss:000000000021EDCD                 db    ? ;
.bss:000000000021EDCE                 db    ? ;
.bss:000000000021EDCF                 db    ? ;
.bss:000000000021EDD0                 db    ? ;
.bss:000000000021EDD1                 db    ? ;
.bss:000000000021EDD2                 db    ? ;
.bss:000000000021EDD3                 db    ? ;
.bss:000000000021EDD4                 db    ? ;
.bss:000000000021EDD5                 db    ? ;
.bss:000000000021EDD6                 db    ? ;
.bss:000000000021EDD7                 db    ? ;
.bss:000000000021EDD8                 db    ? ;
.bss:000000000021EDD9                 db    ? ;
.bss:000000000021EDDA                 db    ? ;
.bss:000000000021EDDB                 db    ? ;
.bss:000000000021EDDC                 db    ? ;
.bss:000000000021EDDD                 db    ? ;
.bss:000000000021EDDE                 db    ? ;
.bss:000000000021EDDF                 db    ? ;
.bss:000000000021EDE0                 db    ? ;
.bss:000000000021EDE1                 db    ? ;
.bss:000000000021EDE2                 db    ? ;
.bss:000000000021EDE3                 db    ? ;
.bss:000000000021EDE4                 db    ? ;
.bss:000000000021EDE5                 db    ? ;
.bss:000000000021EDE6                 db    ? ;
.bss:000000000021EDE7                 db    ? ;
.bss:000000000021EDE8                 db    ? ;
.bss:000000000021EDE9                 db    ? ;
.bss:000000000021EDEA                 db    ? ;
.bss:000000000021EDEB                 db    ? ;
.bss:000000000021EDEC                 db    ? ;
.bss:000000000021EDED                 db    ? ;
.bss:000000000021EDEE                 db    ? ;
.bss:000000000021EDEF                 db    ? ;
.bss:000000000021EDF0                 db    ? ;
.bss:000000000021EDF1                 db    ? ;
.bss:000000000021EDF2                 db    ? ;
.bss:000000000021EDF3                 db    ? ;
.bss:000000000021EDF4                 db    ? ;
.bss:000000000021EDF5                 db    ? ;
.bss:000000000021EDF6                 db    ? ;
.bss:000000000021EDF7                 db    ? ;
.bss:000000000021EDF8                 db    ? ;
.bss:000000000021EDF9                 db    ? ;
.bss:000000000021EDFA                 db    ? ;
.bss:000000000021EDFB                 db    ? ;
.bss:000000000021EDFC                 db    ? ;
.bss:000000000021EDFD                 db    ? ;
.bss:000000000021EDFE                 db    ? ;
.bss:000000000021EDFF                 db    ? ;
.bss:000000000021EE00                 db    ? ;
.bss:000000000021EE01                 db    ? ;
.bss:000000000021EE02                 db    ? ;
.bss:000000000021EE03                 db    ? ;
.bss:000000000021EE04                 db    ? ;
.bss:000000000021EE05                 db    ? ;
.bss:000000000021EE06                 db    ? ;
.bss:000000000021EE07                 db    ? ;
.bss:000000000021EE08                 db    ? ;
.bss:000000000021EE09                 db    ? ;
.bss:000000000021EE0A                 db    ? ;
.bss:000000000021EE0B                 db    ? ;
.bss:000000000021EE0C                 db    ? ;
.bss:000000000021EE0D                 db    ? ;
.bss:000000000021EE0E                 db    ? ;
.bss:000000000021EE0F                 db    ? ;
.bss:000000000021EE10                 db    ? ;
.bss:000000000021EE11                 db    ? ;
.bss:000000000021EE12                 db    ? ;
.bss:000000000021EE13                 db    ? ;
.bss:000000000021EE14                 db    ? ;
.bss:000000000021EE15                 db    ? ;
.bss:000000000021EE16                 db    ? ;
.bss:000000000021EE17                 db    ? ;
.bss:000000000021EE18                 db    ? ;
.bss:000000000021EE19                 db    ? ;
.bss:000000000021EE1A                 db    ? ;
.bss:000000000021EE1B                 db    ? ;
.bss:000000000021EE1C                 db    ? ;
.bss:000000000021EE1D                 db    ? ;
.bss:000000000021EE1E                 db    ? ;
.bss:000000000021EE1F                 db    ? ;
.bss:000000000021EE20                 db    ? ;
.bss:000000000021EE21                 db    ? ;
.bss:000000000021EE22                 db    ? ;
.bss:000000000021EE23                 db    ? ;
.bss:000000000021EE24                 db    ? ;
.bss:000000000021EE25                 db    ? ;
.bss:000000000021EE26                 db    ? ;
.bss:000000000021EE27                 db    ? ;
.bss:000000000021EE28                 db    ? ;
.bss:000000000021EE29                 db    ? ;
.bss:000000000021EE2A                 db    ? ;
.bss:000000000021EE2B                 db    ? ;
.bss:000000000021EE2C                 db    ? ;
.bss:000000000021EE2D                 db    ? ;
.bss:000000000021EE2E                 db    ? ;
.bss:000000000021EE2F                 db    ? ;
.bss:000000000021EE30                 db    ? ;
.bss:000000000021EE31                 db    ? ;
.bss:000000000021EE32                 db    ? ;
.bss:000000000021EE33                 db    ? ;
.bss:000000000021EE34                 db    ? ;
.bss:000000000021EE35                 db    ? ;
.bss:000000000021EE36                 db    ? ;
.bss:000000000021EE37                 db    ? ;
.bss:000000000021EE38                 db    ? ;
.bss:000000000021EE39                 db    ? ;
.bss:000000000021EE3A                 db    ? ;
.bss:000000000021EE3B                 db    ? ;
.bss:000000000021EE3C                 db    ? ;
.bss:000000000021EE3D                 db    ? ;
.bss:000000000021EE3E                 db    ? ;
.bss:000000000021EE3F                 db    ? ;
.bss:000000000021EE40                 db    ? ;
.bss:000000000021EE41                 db    ? ;
.bss:000000000021EE42                 db    ? ;
.bss:000000000021EE43                 db    ? ;
.bss:000000000021EE44                 db    ? ;
.bss:000000000021EE45                 db    ? ;
.bss:000000000021EE46                 db    ? ;
.bss:000000000021EE47                 db    ? ;
.bss:000000000021EE48                 db    ? ;
.bss:000000000021EE49                 db    ? ;
.bss:000000000021EE4A                 db    ? ;
.bss:000000000021EE4B                 db    ? ;
.bss:000000000021EE4C                 db    ? ;
.bss:000000000021EE4D                 db    ? ;
.bss:000000000021EE4E                 db    ? ;
.bss:000000000021EE4F                 db    ? ;
.bss:000000000021EE50                 db    ? ;
.bss:000000000021EE51                 db    ? ;
.bss:000000000021EE52                 db    ? ;
.bss:000000000021EE53                 db    ? ;
.bss:000000000021EE54                 db    ? ;
.bss:000000000021EE55                 db    ? ;
.bss:000000000021EE56                 db    ? ;
.bss:000000000021EE57                 db    ? ;
.bss:000000000021EE58                 db    ? ;
.bss:000000000021EE59                 db    ? ;
.bss:000000000021EE5A                 db    ? ;
.bss:000000000021EE5B                 db    ? ;
.bss:000000000021EE5C                 db    ? ;
.bss:000000000021EE5D                 db    ? ;
.bss:000000000021EE5E                 db    ? ;
.bss:000000000021EE5F                 db    ? ;
.bss:000000000021EE60                 db    ? ;
.bss:000000000021EE61                 db    ? ;
.bss:000000000021EE62                 db    ? ;
.bss:000000000021EE63                 db    ? ;
.bss:000000000021EE64                 db    ? ;
.bss:000000000021EE65                 db    ? ;
.bss:000000000021EE66                 db    ? ;
.bss:000000000021EE67                 db    ? ;
.bss:000000000021EE68                 db    ? ;
.bss:000000000021EE69                 db    ? ;
.bss:000000000021EE6A                 db    ? ;
.bss:000000000021EE6B                 db    ? ;
.bss:000000000021EE6C                 db    ? ;
.bss:000000000021EE6D                 db    ? ;
.bss:000000000021EE6E                 db    ? ;
.bss:000000000021EE6F                 db    ? ;
.bss:000000000021EE70                 db    ? ;
.bss:000000000021EE71                 db    ? ;
.bss:000000000021EE72                 db    ? ;
.bss:000000000021EE73                 db    ? ;
.bss:000000000021EE74                 db    ? ;
.bss:000000000021EE75                 db    ? ;
.bss:000000000021EE76                 db    ? ;
.bss:000000000021EE77                 db    ? ;
.bss:000000000021EE78                 db    ? ;
.bss:000000000021EE79                 db    ? ;
.bss:000000000021EE7A                 db    ? ;
.bss:000000000021EE7B                 db    ? ;
.bss:000000000021EE7C                 db    ? ;
.bss:000000000021EE7D                 db    ? ;
.bss:000000000021EE7E                 db    ? ;
.bss:000000000021EE7F                 db    ? ;
.bss:000000000021EE80                 db    ? ;
.bss:000000000021EE81                 db    ? ;
.bss:000000000021EE82                 db    ? ;
.bss:000000000021EE83                 db    ? ;
.bss:000000000021EE84                 db    ? ;
.bss:000000000021EE85                 db    ? ;
.bss:000000000021EE86                 db    ? ;
.bss:000000000021EE87                 db    ? ;
.bss:000000000021EE88                 db    ? ;
.bss:000000000021EE89                 db    ? ;
.bss:000000000021EE8A                 db    ? ;
.bss:000000000021EE8B                 db    ? ;
.bss:000000000021EE8C                 db    ? ;
.bss:000000000021EE8D                 db    ? ;
.bss:000000000021EE8E                 db    ? ;
.bss:000000000021EE8F                 db    ? ;
.bss:000000000021EE90                 db    ? ;
.bss:000000000021EE91                 db    ? ;
.bss:000000000021EE92                 db    ? ;
.bss:000000000021EE93                 db    ? ;
.bss:000000000021EE94                 db    ? ;
.bss:000000000021EE95                 db    ? ;
.bss:000000000021EE96                 db    ? ;
.bss:000000000021EE97                 db    ? ;
.bss:000000000021EE98                 db    ? ;
.bss:000000000021EE99                 db    ? ;
.bss:000000000021EE9A                 db    ? ;
.bss:000000000021EE9B                 db    ? ;
.bss:000000000021EE9C                 db    ? ;
.bss:000000000021EE9D                 db    ? ;
.bss:000000000021EE9E                 db    ? ;
.bss:000000000021EE9F                 db    ? ;
.bss:000000000021EEA0                 db    ? ;
.bss:000000000021EEA1                 db    ? ;
.bss:000000000021EEA2                 db    ? ;
.bss:000000000021EEA3                 db    ? ;
.bss:000000000021EEA4                 db    ? ;
.bss:000000000021EEA5                 db    ? ;
.bss:000000000021EEA6                 db    ? ;
.bss:000000000021EEA7                 db    ? ;
.bss:000000000021EEA8                 db    ? ;
.bss:000000000021EEA9                 db    ? ;
.bss:000000000021EEAA                 db    ? ;
.bss:000000000021EEAB                 db    ? ;
.bss:000000000021EEAC                 db    ? ;
.bss:000000000021EEAD                 db    ? ;
.bss:000000000021EEAE                 db    ? ;
.bss:000000000021EEAF                 db    ? ;
.bss:000000000021EEB0                 db    ? ;
.bss:000000000021EEB1                 db    ? ;
.bss:000000000021EEB2                 db    ? ;
.bss:000000000021EEB3                 db    ? ;
.bss:000000000021EEB4                 db    ? ;
.bss:000000000021EEB5                 db    ? ;
.bss:000000000021EEB6                 db    ? ;
.bss:000000000021EEB7                 db    ? ;
.bss:000000000021EEB8                 db    ? ;
.bss:000000000021EEB9                 db    ? ;
.bss:000000000021EEBA                 db    ? ;
.bss:000000000021EEBB                 db    ? ;
.bss:000000000021EEBC                 db    ? ;
.bss:000000000021EEBD                 db    ? ;
.bss:000000000021EEBE                 db    ? ;
.bss:000000000021EEBF                 db    ? ;
.bss:000000000021EEC0                 db    ? ;
.bss:000000000021EEC1                 db    ? ;
.bss:000000000021EEC2                 db    ? ;
.bss:000000000021EEC3                 db    ? ;
.bss:000000000021EEC4                 db    ? ;
.bss:000000000021EEC5                 db    ? ;
.bss:000000000021EEC6                 db    ? ;
.bss:000000000021EEC7                 db    ? ;
.bss:000000000021EEC8                 db    ? ;
.bss:000000000021EEC9                 db    ? ;
.bss:000000000021EECA                 db    ? ;
.bss:000000000021EECB                 db    ? ;
.bss:000000000021EECC                 db    ? ;
.bss:000000000021EECD                 db    ? ;
.bss:000000000021EECE                 db    ? ;
.bss:000000000021EECF                 db    ? ;
.bss:000000000021EED0                 db    ? ;
.bss:000000000021EED1                 db    ? ;
.bss:000000000021EED2                 db    ? ;
.bss:000000000021EED3                 db    ? ;
.bss:000000000021EED4                 db    ? ;
.bss:000000000021EED5                 db    ? ;
.bss:000000000021EED6                 db    ? ;
.bss:000000000021EED7                 db    ? ;
.bss:000000000021EED8                 db    ? ;
.bss:000000000021EED9                 db    ? ;
.bss:000000000021EEDA                 db    ? ;
.bss:000000000021EEDB                 db    ? ;
.bss:000000000021EEDC                 db    ? ;
.bss:000000000021EEDD                 db    ? ;
.bss:000000000021EEDE                 db    ? ;
.bss:000000000021EEDF                 db    ? ;
.bss:000000000021EEE0                 db    ? ;
.bss:000000000021EEE1                 db    ? ;
.bss:000000000021EEE2                 db    ? ;
.bss:000000000021EEE3                 db    ? ;
.bss:000000000021EEE4                 db    ? ;
.bss:000000000021EEE5                 db    ? ;
.bss:000000000021EEE6                 db    ? ;
.bss:000000000021EEE7                 db    ? ;
.bss:000000000021EEE8                 db    ? ;
.bss:000000000021EEE9                 db    ? ;
.bss:000000000021EEEA                 db    ? ;
.bss:000000000021EEEB                 db    ? ;
.bss:000000000021EEEC                 db    ? ;
.bss:000000000021EEED                 db    ? ;
.bss:000000000021EEEE                 db    ? ;
.bss:000000000021EEEF                 db    ? ;
.bss:000000000021EEF0                 db    ? ;
.bss:000000000021EEF1                 db    ? ;
.bss:000000000021EEF2                 db    ? ;
.bss:000000000021EEF3                 db    ? ;
.bss:000000000021EEF4                 db    ? ;
.bss:000000000021EEF5                 db    ? ;
.bss:000000000021EEF6                 db    ? ;
.bss:000000000021EEF7                 db    ? ;
.bss:000000000021EEF8                 db    ? ;
.bss:000000000021EEF9                 db    ? ;
.bss:000000000021EEFA                 db    ? ;
.bss:000000000021EEFB                 db    ? ;
.bss:000000000021EEFC                 db    ? ;
.bss:000000000021EEFD                 db    ? ;
.bss:000000000021EEFE                 db    ? ;
.bss:000000000021EEFF                 db    ? ;
.bss:000000000021EF00                 db    ? ;
.bss:000000000021EF01                 db    ? ;
.bss:000000000021EF02                 db    ? ;
.bss:000000000021EF03                 db    ? ;
.bss:000000000021EF04                 db    ? ;
.bss:000000000021EF05                 db    ? ;
.bss:000000000021EF06                 db    ? ;
.bss:000000000021EF07                 db    ? ;
.bss:000000000021EF08                 db    ? ;
.bss:000000000021EF09                 db    ? ;
.bss:000000000021EF0A                 db    ? ;
.bss:000000000021EF0B                 db    ? ;
.bss:000000000021EF0C                 db    ? ;
.bss:000000000021EF0D                 db    ? ;
.bss:000000000021EF0E                 db    ? ;
.bss:000000000021EF0F                 db    ? ;
.bss:000000000021EF10                 db    ? ;
.bss:000000000021EF11                 db    ? ;
.bss:000000000021EF12                 db    ? ;
.bss:000000000021EF13                 db    ? ;
.bss:000000000021EF14                 db    ? ;
.bss:000000000021EF15                 db    ? ;
.bss:000000000021EF16                 db    ? ;
.bss:000000000021EF17                 db    ? ;
.bss:000000000021EF18                 db    ? ;
.bss:000000000021EF19                 db    ? ;
.bss:000000000021EF1A                 db    ? ;
.bss:000000000021EF1B                 db    ? ;
.bss:000000000021EF1C                 db    ? ;
.bss:000000000021EF1D                 db    ? ;
.bss:000000000021EF1E                 db    ? ;
.bss:000000000021EF1F                 db    ? ;
.bss:000000000021EF20                 db    ? ;
.bss:000000000021EF21                 db    ? ;
.bss:000000000021EF22                 db    ? ;
.bss:000000000021EF23                 db    ? ;
.bss:000000000021EF24                 db    ? ;
.bss:000000000021EF25                 db    ? ;
.bss:000000000021EF26                 db    ? ;
.bss:000000000021EF27                 db    ? ;
.bss:000000000021EF28                 db    ? ;
.bss:000000000021EF29                 db    ? ;
.bss:000000000021EF2A                 db    ? ;
.bss:000000000021EF2B                 db    ? ;
.bss:000000000021EF2C                 db    ? ;
.bss:000000000021EF2D                 db    ? ;
.bss:000000000021EF2E                 db    ? ;
.bss:000000000021EF2F                 db    ? ;
.bss:000000000021EF30                 db    ? ;
.bss:000000000021EF31                 db    ? ;
.bss:000000000021EF32                 db    ? ;
.bss:000000000021EF33                 db    ? ;
.bss:000000000021EF34                 db    ? ;
.bss:000000000021EF35                 db    ? ;
.bss:000000000021EF36                 db    ? ;
.bss:000000000021EF37                 db    ? ;
.bss:000000000021EF38                 db    ? ;
.bss:000000000021EF39                 db    ? ;
.bss:000000000021EF3A                 db    ? ;
.bss:000000000021EF3B                 db    ? ;
.bss:000000000021EF3C                 db    ? ;
.bss:000000000021EF3D                 db    ? ;
.bss:000000000021EF3E                 db    ? ;
.bss:000000000021EF3F                 db    ? ;
.bss:000000000021EF40                 db    ? ;
.bss:000000000021EF41                 db    ? ;
.bss:000000000021EF42                 db    ? ;
.bss:000000000021EF43                 db    ? ;
.bss:000000000021EF44                 db    ? ;
.bss:000000000021EF45                 db    ? ;
.bss:000000000021EF46                 db    ? ;
.bss:000000000021EF47                 db    ? ;
.bss:000000000021EF48                 db    ? ;
.bss:000000000021EF49                 db    ? ;
.bss:000000000021EF4A                 db    ? ;
.bss:000000000021EF4B                 db    ? ;
.bss:000000000021EF4C                 db    ? ;
.bss:000000000021EF4D                 db    ? ;
.bss:000000000021EF4E                 db    ? ;
.bss:000000000021EF4F                 db    ? ;
.bss:000000000021EF50                 db    ? ;
.bss:000000000021EF51                 db    ? ;
.bss:000000000021EF52                 db    ? ;
.bss:000000000021EF53                 db    ? ;
.bss:000000000021EF54                 db    ? ;
.bss:000000000021EF55                 db    ? ;
.bss:000000000021EF56                 db    ? ;
.bss:000000000021EF57                 db    ? ;
.bss:000000000021EF58                 db    ? ;
.bss:000000000021EF59                 db    ? ;
.bss:000000000021EF5A                 db    ? ;
.bss:000000000021EF5B                 db    ? ;
.bss:000000000021EF5C                 db    ? ;
.bss:000000000021EF5D                 db    ? ;
.bss:000000000021EF5E                 db    ? ;
.bss:000000000021EF5F                 db    ? ;
.bss:000000000021EF60                 db    ? ;
.bss:000000000021EF61                 db    ? ;
.bss:000000000021EF62                 db    ? ;
.bss:000000000021EF63                 db    ? ;
.bss:000000000021EF64                 db    ? ;
.bss:000000000021EF65                 db    ? ;
.bss:000000000021EF66                 db    ? ;
.bss:000000000021EF67                 db    ? ;
.bss:000000000021EF68                 db    ? ;
.bss:000000000021EF69                 db    ? ;
.bss:000000000021EF6A                 db    ? ;
.bss:000000000021EF6B                 db    ? ;
.bss:000000000021EF6C                 db    ? ;
.bss:000000000021EF6D                 db    ? ;
.bss:000000000021EF6E                 db    ? ;
.bss:000000000021EF6F                 db    ? ;
.bss:000000000021EF70                 db    ? ;
.bss:000000000021EF71                 db    ? ;
.bss:000000000021EF72                 db    ? ;
.bss:000000000021EF73                 db    ? ;
.bss:000000000021EF74                 db    ? ;
.bss:000000000021EF75                 db    ? ;
.bss:000000000021EF76                 db    ? ;
.bss:000000000021EF77                 db    ? ;
.bss:000000000021EF78                 db    ? ;
.bss:000000000021EF79                 db    ? ;
.bss:000000000021EF7A                 db    ? ;
.bss:000000000021EF7B                 db    ? ;
.bss:000000000021EF7C                 db    ? ;
.bss:000000000021EF7D                 db    ? ;
.bss:000000000021EF7E                 db    ? ;
.bss:000000000021EF7F                 db    ? ;
.bss:000000000021EF80                 db    ? ;
.bss:000000000021EF81                 db    ? ;
.bss:000000000021EF82                 db    ? ;
.bss:000000000021EF83                 db    ? ;
.bss:000000000021EF84                 db    ? ;
.bss:000000000021EF85                 db    ? ;
.bss:000000000021EF86                 db    ? ;
.bss:000000000021EF87                 db    ? ;
.bss:000000000021EF88                 db    ? ;
.bss:000000000021EF89                 db    ? ;
.bss:000000000021EF8A                 db    ? ;
.bss:000000000021EF8B                 db    ? ;
.bss:000000000021EF8C                 db    ? ;
.bss:000000000021EF8D                 db    ? ;
.bss:000000000021EF8E                 db    ? ;
.bss:000000000021EF8F                 db    ? ;
.bss:000000000021EF90                 db    ? ;
.bss:000000000021EF91                 db    ? ;
.bss:000000000021EF92                 db    ? ;
.bss:000000000021EF93                 db    ? ;
.bss:000000000021EF94                 db    ? ;
.bss:000000000021EF95                 db    ? ;
.bss:000000000021EF96                 db    ? ;
.bss:000000000021EF97                 db    ? ;
.bss:000000000021EF98                 db    ? ;
.bss:000000000021EF99                 db    ? ;
.bss:000000000021EF9A                 db    ? ;
.bss:000000000021EF9B                 db    ? ;
.bss:000000000021EF9C                 db    ? ;
.bss:000000000021EF9D                 db    ? ;
.bss:000000000021EF9E                 db    ? ;
.bss:000000000021EF9F                 db    ? ;
.bss:000000000021EFA0                 db    ? ;
.bss:000000000021EFA1                 db    ? ;
.bss:000000000021EFA2                 db    ? ;
.bss:000000000021EFA3                 db    ? ;
.bss:000000000021EFA4                 db    ? ;
.bss:000000000021EFA5                 db    ? ;
.bss:000000000021EFA6                 db    ? ;
.bss:000000000021EFA7                 db    ? ;
.bss:000000000021EFA8                 db    ? ;
.bss:000000000021EFA9                 db    ? ;
.bss:000000000021EFAA                 db    ? ;
.bss:000000000021EFAB                 db    ? ;
.bss:000000000021EFAC                 db    ? ;
.bss:000000000021EFAD                 db    ? ;
.bss:000000000021EFAE                 db    ? ;
.bss:000000000021EFAF                 db    ? ;
.bss:000000000021EFB0                 db    ? ;
.bss:000000000021EFB1                 db    ? ;
.bss:000000000021EFB2                 db    ? ;
.bss:000000000021EFB3                 db    ? ;
.bss:000000000021EFB4                 db    ? ;
.bss:000000000021EFB5                 db    ? ;
.bss:000000000021EFB6                 db    ? ;
.bss:000000000021EFB7                 db    ? ;
.bss:000000000021EFB8                 db    ? ;
.bss:000000000021EFB9                 db    ? ;
.bss:000000000021EFBA                 db    ? ;
.bss:000000000021EFBB                 db    ? ;
.bss:000000000021EFBC                 db    ? ;
.bss:000000000021EFBD                 db    ? ;
.bss:000000000021EFBE                 db    ? ;
.bss:000000000021EFBF                 db    ? ;
.bss:000000000021EFC0                 db    ? ;
.bss:000000000021EFC1                 db    ? ;
.bss:000000000021EFC2                 db    ? ;
.bss:000000000021EFC3                 db    ? ;
.bss:000000000021EFC4                 db    ? ;
.bss:000000000021EFC5                 db    ? ;
.bss:000000000021EFC6                 db    ? ;
.bss:000000000021EFC7                 db    ? ;
.bss:000000000021EFC8                 db    ? ;
.bss:000000000021EFC9                 db    ? ;
.bss:000000000021EFCA                 db    ? ;
.bss:000000000021EFCB                 db    ? ;
.bss:000000000021EFCC                 db    ? ;
.bss:000000000021EFCD                 db    ? ;
.bss:000000000021EFCE                 db    ? ;
.bss:000000000021EFCF                 db    ? ;
.bss:000000000021EFD0                 db    ? ;
.bss:000000000021EFD1                 db    ? ;
.bss:000000000021EFD2                 db    ? ;
.bss:000000000021EFD3                 db    ? ;
.bss:000000000021EFD4                 db    ? ;
.bss:000000000021EFD5                 db    ? ;
.bss:000000000021EFD6                 db    ? ;
.bss:000000000021EFD7                 db    ? ;
.bss:000000000021EFD8                 db    ? ;
.bss:000000000021EFD9                 db    ? ;
.bss:000000000021EFDA                 db    ? ;
.bss:000000000021EFDB                 db    ? ;
.bss:000000000021EFDC                 db    ? ;
.bss:000000000021EFDD                 db    ? ;
.bss:000000000021EFDE                 db    ? ;
.bss:000000000021EFDF                 db    ? ;
.bss:000000000021EFE0                 db    ? ;
.bss:000000000021EFE1                 db    ? ;
.bss:000000000021EFE2                 db    ? ;
.bss:000000000021EFE3                 db    ? ;
.bss:000000000021EFE4                 db    ? ;
.bss:000000000021EFE5                 db    ? ;
.bss:000000000021EFE6                 db    ? ;
.bss:000000000021EFE7                 db    ? ;
.bss:000000000021EFE8                 db    ? ;
.bss:000000000021EFE9                 db    ? ;
.bss:000000000021EFEA                 db    ? ;
.bss:000000000021EFEB                 db    ? ;
.bss:000000000021EFEC                 db    ? ;
.bss:000000000021EFED                 db    ? ;
.bss:000000000021EFEE                 db    ? ;
.bss:000000000021EFEF                 db    ? ;
.bss:000000000021EFF0                 db    ? ;
.bss:000000000021EFF1                 db    ? ;
.bss:000000000021EFF2                 db    ? ;
.bss:000000000021EFF3                 db    ? ;
.bss:000000000021EFF4                 db    ? ;
.bss:000000000021EFF5                 db    ? ;
.bss:000000000021EFF6                 db    ? ;
.bss:000000000021EFF7                 db    ? ;
.bss:000000000021EFF8                 db    ? ;
.bss:000000000021EFF9                 db    ? ;
.bss:000000000021EFFA                 db    ? ;
.bss:000000000021EFFB                 db    ? ;
.bss:000000000021EFFC                 db    ? ;
.bss:000000000021EFFD                 db    ? ;
.bss:000000000021EFFE                 db    ? ;
.bss:000000000021EFFF                 db    ? ;
.bss:000000000021F000                 db    ? ;
.bss:000000000021F001                 db    ? ;
.bss:000000000021F002                 db    ? ;
.bss:000000000021F003                 db    ? ;
.bss:000000000021F004                 db    ? ;
.bss:000000000021F005                 db    ? ;
.bss:000000000021F006                 db    ? ;
.bss:000000000021F007                 db    ? ;
.bss:000000000021F008                 db    ? ;
.bss:000000000021F009                 db    ? ;
.bss:000000000021F00A                 db    ? ;
.bss:000000000021F00B                 db    ? ;
.bss:000000000021F00C                 db    ? ;
.bss:000000000021F00D                 db    ? ;
.bss:000000000021F00E                 db    ? ;
.bss:000000000021F00F                 db    ? ;
.bss:000000000021F010                 db    ? ;
.bss:000000000021F011                 db    ? ;
.bss:000000000021F012                 db    ? ;
.bss:000000000021F013                 db    ? ;
.bss:000000000021F014                 db    ? ;
.bss:000000000021F015                 db    ? ;
.bss:000000000021F016                 db    ? ;
.bss:000000000021F017                 db    ? ;
.bss:000000000021F018                 db    ? ;
.bss:000000000021F019                 db    ? ;
.bss:000000000021F01A                 db    ? ;
.bss:000000000021F01B                 db    ? ;
.bss:000000000021F01C                 db    ? ;
.bss:000000000021F01D                 db    ? ;
.bss:000000000021F01E                 db    ? ;
.bss:000000000021F01F                 db    ? ;
.bss:000000000021F020                 db    ? ;
.bss:000000000021F021                 db    ? ;
.bss:000000000021F022                 db    ? ;
.bss:000000000021F023                 db    ? ;
.bss:000000000021F024                 db    ? ;
.bss:000000000021F025                 db    ? ;
.bss:000000000021F026                 db    ? ;
.bss:000000000021F027                 db    ? ;
.bss:000000000021F028                 db    ? ;
.bss:000000000021F029                 db    ? ;
.bss:000000000021F02A                 db    ? ;
.bss:000000000021F02B                 db    ? ;
.bss:000000000021F02C                 db    ? ;
.bss:000000000021F02D                 db    ? ;
.bss:000000000021F02E                 db    ? ;
.bss:000000000021F02F                 db    ? ;
.bss:000000000021F030                 db    ? ;
.bss:000000000021F031                 db    ? ;
.bss:000000000021F032                 db    ? ;
.bss:000000000021F033                 db    ? ;
.bss:000000000021F034                 db    ? ;
.bss:000000000021F035                 db    ? ;
.bss:000000000021F036                 db    ? ;
.bss:000000000021F037                 db    ? ;
.bss:000000000021F038                 db    ? ;
.bss:000000000021F039                 db    ? ;
.bss:000000000021F03A                 db    ? ;
.bss:000000000021F03B                 db    ? ;
.bss:000000000021F03C                 db    ? ;
.bss:000000000021F03D                 db    ? ;
.bss:000000000021F03E                 db    ? ;
.bss:000000000021F03F                 db    ? ;
.bss:000000000021F040                 db    ? ;
.bss:000000000021F041                 db    ? ;
.bss:000000000021F042                 db    ? ;
.bss:000000000021F043                 db    ? ;
.bss:000000000021F044                 db    ? ;
.bss:000000000021F045                 db    ? ;
.bss:000000000021F046                 db    ? ;
.bss:000000000021F047                 db    ? ;
.bss:000000000021F048                 db    ? ;
.bss:000000000021F049                 db    ? ;
.bss:000000000021F04A                 db    ? ;
.bss:000000000021F04B                 db    ? ;
.bss:000000000021F04C                 db    ? ;
.bss:000000000021F04D                 db    ? ;
.bss:000000000021F04E                 db    ? ;
.bss:000000000021F04F                 db    ? ;
.bss:000000000021F050                 db    ? ;
.bss:000000000021F051                 db    ? ;
.bss:000000000021F052                 db    ? ;
.bss:000000000021F053                 db    ? ;
.bss:000000000021F054                 db    ? ;
.bss:000000000021F055                 db    ? ;
.bss:000000000021F056                 db    ? ;
.bss:000000000021F057                 db    ? ;
.bss:000000000021F058                 db    ? ;
.bss:000000000021F059                 db    ? ;
.bss:000000000021F05A                 db    ? ;
.bss:000000000021F05B                 db    ? ;
.bss:000000000021F05C                 db    ? ;
.bss:000000000021F05D                 db    ? ;
.bss:000000000021F05E                 db    ? ;
.bss:000000000021F05F                 db    ? ;
.bss:000000000021F060                 db    ? ;
.bss:000000000021F061                 db    ? ;
.bss:000000000021F062                 db    ? ;
.bss:000000000021F063                 db    ? ;
.bss:000000000021F064                 db    ? ;
.bss:000000000021F065                 db    ? ;
.bss:000000000021F066                 db    ? ;
.bss:000000000021F067                 db    ? ;
.bss:000000000021F068                 db    ? ;
.bss:000000000021F069                 db    ? ;
.bss:000000000021F06A                 db    ? ;
.bss:000000000021F06B                 db    ? ;
.bss:000000000021F06C                 db    ? ;
.bss:000000000021F06D                 db    ? ;
.bss:000000000021F06E                 db    ? ;
.bss:000000000021F06F                 db    ? ;
.bss:000000000021F070                 db    ? ;
.bss:000000000021F071                 db    ? ;
.bss:000000000021F072                 db    ? ;
.bss:000000000021F073                 db    ? ;
.bss:000000000021F074                 db    ? ;
.bss:000000000021F075                 db    ? ;
.bss:000000000021F076                 db    ? ;
.bss:000000000021F077                 db    ? ;
.bss:000000000021F078                 db    ? ;
.bss:000000000021F079                 db    ? ;
.bss:000000000021F07A                 db    ? ;
.bss:000000000021F07B                 db    ? ;
.bss:000000000021F07C                 db    ? ;
.bss:000000000021F07D                 db    ? ;
.bss:000000000021F07E                 db    ? ;
.bss:000000000021F07F                 db    ? ;
.bss:000000000021F080                 db    ? ;
.bss:000000000021F081                 db    ? ;
.bss:000000000021F082                 db    ? ;
.bss:000000000021F083                 db    ? ;
.bss:000000000021F084                 db    ? ;
.bss:000000000021F085                 db    ? ;
.bss:000000000021F086                 db    ? ;
.bss:000000000021F087                 db    ? ;
.bss:000000000021F088                 db    ? ;
.bss:000000000021F089                 db    ? ;
.bss:000000000021F08A                 db    ? ;
.bss:000000000021F08B                 db    ? ;
.bss:000000000021F08C                 db    ? ;
.bss:000000000021F08D                 db    ? ;
.bss:000000000021F08E                 db    ? ;
.bss:000000000021F08F                 db    ? ;
.bss:000000000021F090                 db    ? ;
.bss:000000000021F091                 db    ? ;
.bss:000000000021F092                 db    ? ;
.bss:000000000021F093                 db    ? ;
.bss:000000000021F094                 db    ? ;
.bss:000000000021F095                 db    ? ;
.bss:000000000021F096                 db    ? ;
.bss:000000000021F097                 db    ? ;
.bss:000000000021F098                 db    ? ;
.bss:000000000021F099                 db    ? ;
.bss:000000000021F09A                 db    ? ;
.bss:000000000021F09B                 db    ? ;
.bss:000000000021F09C                 db    ? ;
.bss:000000000021F09D                 db    ? ;
.bss:000000000021F09E                 db    ? ;
.bss:000000000021F09F                 db    ? ;
.bss:000000000021F0A0                 db    ? ;
.bss:000000000021F0A1                 db    ? ;
.bss:000000000021F0A2                 db    ? ;
.bss:000000000021F0A3                 db    ? ;
.bss:000000000021F0A4                 db    ? ;
.bss:000000000021F0A5                 db    ? ;
.bss:000000000021F0A6                 db    ? ;
.bss:000000000021F0A7                 db    ? ;
.bss:000000000021F0A8                 db    ? ;
.bss:000000000021F0A9                 db    ? ;
.bss:000000000021F0AA                 db    ? ;
.bss:000000000021F0AB                 db    ? ;
.bss:000000000021F0AC                 db    ? ;
.bss:000000000021F0AD                 db    ? ;
.bss:000000000021F0AE                 db    ? ;
.bss:000000000021F0AF                 db    ? ;
.bss:000000000021F0B0                 db    ? ;
.bss:000000000021F0B1                 db    ? ;
.bss:000000000021F0B2                 db    ? ;
.bss:000000000021F0B3                 db    ? ;
.bss:000000000021F0B4                 db    ? ;
.bss:000000000021F0B5                 db    ? ;
.bss:000000000021F0B6                 db    ? ;
.bss:000000000021F0B7                 db    ? ;
.bss:000000000021F0B8                 db    ? ;
.bss:000000000021F0B9                 db    ? ;
.bss:000000000021F0BA                 db    ? ;
.bss:000000000021F0BB                 db    ? ;
.bss:000000000021F0BC                 db    ? ;
.bss:000000000021F0BD                 db    ? ;
.bss:000000000021F0BE                 db    ? ;
.bss:000000000021F0BF                 db    ? ;
.bss:000000000021F0C0                 db    ? ;
.bss:000000000021F0C1                 db    ? ;
.bss:000000000021F0C2                 db    ? ;
.bss:000000000021F0C3                 db    ? ;
.bss:000000000021F0C4                 db    ? ;
.bss:000000000021F0C5                 db    ? ;
.bss:000000000021F0C6                 db    ? ;
.bss:000000000021F0C7                 db    ? ;
.bss:000000000021F0C8                 db    ? ;
.bss:000000000021F0C9                 db    ? ;
.bss:000000000021F0CA                 db    ? ;
.bss:000000000021F0CB                 db    ? ;
.bss:000000000021F0CC                 db    ? ;
.bss:000000000021F0CD                 db    ? ;
.bss:000000000021F0CE                 db    ? ;
.bss:000000000021F0CF                 db    ? ;
.bss:000000000021F0D0                 db    ? ;
.bss:000000000021F0D1                 db    ? ;
.bss:000000000021F0D2                 db    ? ;
.bss:000000000021F0D3                 db    ? ;
.bss:000000000021F0D4                 db    ? ;
.bss:000000000021F0D5                 db    ? ;
.bss:000000000021F0D6                 db    ? ;
.bss:000000000021F0D7                 db    ? ;
.bss:000000000021F0D8                 db    ? ;
.bss:000000000021F0D9                 db    ? ;
.bss:000000000021F0DA                 db    ? ;
.bss:000000000021F0DB                 db    ? ;
.bss:000000000021F0DC                 db    ? ;
.bss:000000000021F0DD                 db    ? ;
.bss:000000000021F0DE                 db    ? ;
.bss:000000000021F0DF                 db    ? ;
.bss:000000000021F0E0                 db    ? ;
.bss:000000000021F0E1                 db    ? ;
.bss:000000000021F0E2                 db    ? ;
.bss:000000000021F0E3                 db    ? ;
.bss:000000000021F0E4                 db    ? ;
.bss:000000000021F0E5                 db    ? ;
.bss:000000000021F0E6                 db    ? ;
.bss:000000000021F0E7                 db    ? ;
.bss:000000000021F0E8                 db    ? ;
.bss:000000000021F0E9                 db    ? ;
.bss:000000000021F0EA                 db    ? ;
.bss:000000000021F0EB                 db    ? ;
.bss:000000000021F0EC                 db    ? ;
.bss:000000000021F0ED                 db    ? ;
.bss:000000000021F0EE                 db    ? ;
.bss:000000000021F0EF                 db    ? ;
.bss:000000000021F0F0                 db    ? ;
.bss:000000000021F0F1                 db    ? ;
.bss:000000000021F0F2                 db    ? ;
.bss:000000000021F0F3                 db    ? ;
.bss:000000000021F0F4                 db    ? ;
.bss:000000000021F0F5                 db    ? ;
.bss:000000000021F0F6                 db    ? ;
.bss:000000000021F0F7                 db    ? ;
.bss:000000000021F0F8                 db    ? ;
.bss:000000000021F0F9                 db    ? ;
.bss:000000000021F0FA                 db    ? ;
.bss:000000000021F0FB                 db    ? ;
.bss:000000000021F0FC                 db    ? ;
.bss:000000000021F0FD                 db    ? ;
.bss:000000000021F0FE                 db    ? ;
.bss:000000000021F0FF                 db    ? ;
.bss:000000000021F100                 db    ? ;
.bss:000000000021F101                 db    ? ;
.bss:000000000021F102                 db    ? ;
.bss:000000000021F103                 db    ? ;
.bss:000000000021F104                 db    ? ;
.bss:000000000021F105                 db    ? ;
.bss:000000000021F106                 db    ? ;
.bss:000000000021F107                 db    ? ;
.bss:000000000021F108                 db    ? ;
.bss:000000000021F109                 db    ? ;
.bss:000000000021F10A                 db    ? ;
.bss:000000000021F10B                 db    ? ;
.bss:000000000021F10C                 db    ? ;
.bss:000000000021F10D                 db    ? ;
.bss:000000000021F10E                 db    ? ;
.bss:000000000021F10F                 db    ? ;
.bss:000000000021F110                 db    ? ;
.bss:000000000021F111                 db    ? ;
.bss:000000000021F112                 db    ? ;
.bss:000000000021F113                 db    ? ;
.bss:000000000021F114                 db    ? ;
.bss:000000000021F115                 db    ? ;
.bss:000000000021F116                 db    ? ;
.bss:000000000021F117                 db    ? ;
.bss:000000000021F118                 db    ? ;
.bss:000000000021F119                 db    ? ;
.bss:000000000021F11A                 db    ? ;
.bss:000000000021F11B                 db    ? ;
.bss:000000000021F11C                 db    ? ;
.bss:000000000021F11D                 db    ? ;
.bss:000000000021F11E                 db    ? ;
.bss:000000000021F11F                 db    ? ;
.bss:000000000021F120                 db    ? ;
.bss:000000000021F121                 db    ? ;
.bss:000000000021F122                 db    ? ;
.bss:000000000021F123                 db    ? ;
.bss:000000000021F124                 db    ? ;
.bss:000000000021F125                 db    ? ;
.bss:000000000021F126                 db    ? ;
.bss:000000000021F127                 db    ? ;
.bss:000000000021F128                 db    ? ;
.bss:000000000021F129                 db    ? ;
.bss:000000000021F12A                 db    ? ;
.bss:000000000021F12B                 db    ? ;
.bss:000000000021F12C                 db    ? ;
.bss:000000000021F12D                 db    ? ;
.bss:000000000021F12E                 db    ? ;
.bss:000000000021F12F                 db    ? ;
.bss:000000000021F130                 db    ? ;
.bss:000000000021F131                 db    ? ;
.bss:000000000021F132                 db    ? ;
.bss:000000000021F133                 db    ? ;
.bss:000000000021F134                 db    ? ;
.bss:000000000021F135                 db    ? ;
.bss:000000000021F136                 db    ? ;
.bss:000000000021F137                 db    ? ;
.bss:000000000021F138                 db    ? ;
.bss:000000000021F139                 db    ? ;
.bss:000000000021F13A                 db    ? ;
.bss:000000000021F13B                 db    ? ;
.bss:000000000021F13C                 db    ? ;
.bss:000000000021F13D                 db    ? ;
.bss:000000000021F13E                 db    ? ;
.bss:000000000021F13F                 db    ? ;
.bss:000000000021F140 dir_arg         db ?                    ; DATA XREF: main+187↑w
.bss:000000000021F140                                         ; main:loc_33F5↑w ...
.bss:000000000021F141 strip_files     db ?                    ; DATA XREF: main+180↑w
.bss:000000000021F141                                         ; main+3A4↑w ...
.bss:000000000021F142 copy_only_if_needed db ?                ; DATA XREF: main:loc_3455↑w
.bss:000000000021F142                                         ; main:loc_36DC↑r ...
.bss:000000000021F143                 align 4
.bss:000000000021F144 ; __gid_t group_id
.bss:000000000021F144 group_id        dd ?                    ; DATA XREF: main:loc_3766↑w
.bss:000000000021F144                                         ; main:loc_39E9↑w ...
.bss:000000000021F148 ; char *group_name
.bss:000000000021F148 group_name      dq ?                    ; DATA XREF: main+175↑w
.bss:000000000021F148                                         ; main+380↑w ...
.bss:000000000021F150 ; __uid_t owner_id
.bss:000000000021F150 owner_id        dd ?                    ; DATA XREF: main:loc_373A↑w
.bss:000000000021F150                                         ; main:loc_39F8↑w ...
.bss:000000000021F154                 align 8
.bss:000000000021F158 ; char *owner_name
.bss:000000000021F158 owner_name      dq ?                    ; DATA XREF: main+16A↑w
.bss:000000000021F158                                         ; main+2D8↑w ...
.bss:000000000021F160 selinux_enabled dd ?                    ; DATA XREF: main+29↑w
.bss:000000000021F160                                         ; main:loc_3427↑r ...
.bss:000000000021F164                 align 20h
.bss:000000000021F180 fallback_7572   db    ? ;               ; DATA XREF: write_zeros:loc_4F67↑o
.bss:000000000021F181                 db    ? ;
.bss:000000000021F182                 db    ? ;
.bss:000000000021F183                 db    ? ;
.bss:000000000021F184                 db    ? ;
.bss:000000000021F185                 db    ? ;
.bss:000000000021F186                 db    ? ;
.bss:000000000021F187                 db    ? ;
.bss:000000000021F188                 db    ? ;
.bss:000000000021F189                 db    ? ;
.bss:000000000021F18A                 db    ? ;
.bss:000000000021F18B                 db    ? ;
.bss:000000000021F18C                 db    ? ;
.bss:000000000021F18D                 db    ? ;
.bss:000000000021F18E                 db    ? ;
.bss:000000000021F18F                 db    ? ;
.bss:000000000021F190                 db    ? ;
.bss:000000000021F191                 db    ? ;
.bss:000000000021F192                 db    ? ;
.bss:000000000021F193                 db    ? ;
.bss:000000000021F194                 db    ? ;
.bss:000000000021F195                 db    ? ;
.bss:000000000021F196                 db    ? ;
.bss:000000000021F197                 db    ? ;
.bss:000000000021F198                 db    ? ;
.bss:000000000021F199                 db    ? ;
.bss:000000000021F19A                 db    ? ;
.bss:000000000021F19B                 db    ? ;
.bss:000000000021F19C                 db    ? ;
.bss:000000000021F19D                 db    ? ;
.bss:000000000021F19E                 db    ? ;
.bss:000000000021F19F                 db    ? ;
.bss:000000000021F1A0                 db    ? ;
.bss:000000000021F1A1                 db    ? ;
.bss:000000000021F1A2                 db    ? ;
.bss:000000000021F1A3                 db    ? ;
.bss:000000000021F1A4                 db    ? ;
.bss:000000000021F1A5                 db    ? ;
.bss:000000000021F1A6                 db    ? ;
.bss:000000000021F1A7                 db    ? ;
.bss:000000000021F1A8                 db    ? ;
.bss:000000000021F1A9                 db    ? ;
.bss:000000000021F1AA                 db    ? ;
.bss:000000000021F1AB                 db    ? ;
.bss:000000000021F1AC                 db    ? ;
.bss:000000000021F1AD                 db    ? ;
.bss:000000000021F1AE                 db    ? ;
.bss:000000000021F1AF                 db    ? ;
.bss:000000000021F1B0                 db    ? ;
.bss:000000000021F1B1                 db    ? ;
.bss:000000000021F1B2                 db    ? ;
.bss:000000000021F1B3                 db    ? ;
.bss:000000000021F1B4                 db    ? ;
.bss:000000000021F1B5                 db    ? ;
.bss:000000000021F1B6                 db    ? ;
.bss:000000000021F1B7                 db    ? ;
.bss:000000000021F1B8                 db    ? ;
.bss:000000000021F1B9                 db    ? ;
.bss:000000000021F1BA                 db    ? ;
.bss:000000000021F1BB                 db    ? ;
.bss:000000000021F1BC                 db    ? ;
.bss:000000000021F1BD                 db    ? ;
.bss:000000000021F1BE                 db    ? ;
.bss:000000000021F1BF                 db    ? ;
.bss:000000000021F1C0                 db    ? ;
.bss:000000000021F1C1                 db    ? ;
.bss:000000000021F1C2                 db    ? ;
.bss:000000000021F1C3                 db    ? ;
.bss:000000000021F1C4                 db    ? ;
.bss:000000000021F1C5                 db    ? ;
.bss:000000000021F1C6                 db    ? ;
.bss:000000000021F1C7                 db    ? ;
.bss:000000000021F1C8                 db    ? ;
.bss:000000000021F1C9                 db    ? ;
.bss:000000000021F1CA                 db    ? ;
.bss:000000000021F1CB                 db    ? ;
.bss:000000000021F1CC                 db    ? ;
.bss:000000000021F1CD                 db    ? ;
.bss:000000000021F1CE                 db    ? ;
.bss:000000000021F1CF                 db    ? ;
.bss:000000000021F1D0                 db    ? ;
.bss:000000000021F1D1                 db    ? ;
.bss:000000000021F1D2                 db    ? ;
.bss:000000000021F1D3                 db    ? ;
.bss:000000000021F1D4                 db    ? ;
.bss:000000000021F1D5                 db    ? ;
.bss:000000000021F1D6                 db    ? ;
.bss:000000000021F1D7                 db    ? ;
.bss:000000000021F1D8                 db    ? ;
.bss:000000000021F1D9                 db    ? ;
.bss:000000000021F1DA                 db    ? ;
.bss:000000000021F1DB                 db    ? ;
.bss:000000000021F1DC                 db    ? ;
.bss:000000000021F1DD                 db    ? ;
.bss:000000000021F1DE                 db    ? ;
.bss:000000000021F1DF                 db    ? ;
.bss:000000000021F1E0                 db    ? ;
.bss:000000000021F1E1                 db    ? ;
.bss:000000000021F1E2                 db    ? ;
.bss:000000000021F1E3                 db    ? ;
.bss:000000000021F1E4                 db    ? ;
.bss:000000000021F1E5                 db    ? ;
.bss:000000000021F1E6                 db    ? ;
.bss:000000000021F1E7                 db    ? ;
.bss:000000000021F1E8                 db    ? ;
.bss:000000000021F1E9                 db    ? ;
.bss:000000000021F1EA                 db    ? ;
.bss:000000000021F1EB                 db    ? ;
.bss:000000000021F1EC                 db    ? ;
.bss:000000000021F1ED                 db    ? ;
.bss:000000000021F1EE                 db    ? ;
.bss:000000000021F1EF                 db    ? ;
.bss:000000000021F1F0                 db    ? ;
.bss:000000000021F1F1                 db    ? ;
.bss:000000000021F1F2                 db    ? ;
.bss:000000000021F1F3                 db    ? ;
.bss:000000000021F1F4                 db    ? ;
.bss:000000000021F1F5                 db    ? ;
.bss:000000000021F1F6                 db    ? ;
.bss:000000000021F1F7                 db    ? ;
.bss:000000000021F1F8                 db    ? ;
.bss:000000000021F1F9                 db    ? ;
.bss:000000000021F1FA                 db    ? ;
.bss:000000000021F1FB                 db    ? ;
.bss:000000000021F1FC                 db    ? ;
.bss:000000000021F1FD                 db    ? ;
.bss:000000000021F1FE                 db    ? ;
.bss:000000000021F1FF                 db    ? ;
.bss:000000000021F200                 db    ? ;
.bss:000000000021F201                 db    ? ;
.bss:000000000021F202                 db    ? ;
.bss:000000000021F203                 db    ? ;
.bss:000000000021F204                 db    ? ;
.bss:000000000021F205                 db    ? ;
.bss:000000000021F206                 db    ? ;
.bss:000000000021F207                 db    ? ;
.bss:000000000021F208                 db    ? ;
.bss:000000000021F209                 db    ? ;
.bss:000000000021F20A                 db    ? ;
.bss:000000000021F20B                 db    ? ;
.bss:000000000021F20C                 db    ? ;
.bss:000000000021F20D                 db    ? ;
.bss:000000000021F20E                 db    ? ;
.bss:000000000021F20F                 db    ? ;
.bss:000000000021F210                 db    ? ;
.bss:000000000021F211                 db    ? ;
.bss:000000000021F212                 db    ? ;
.bss:000000000021F213                 db    ? ;
.bss:000000000021F214                 db    ? ;
.bss:000000000021F215                 db    ? ;
.bss:000000000021F216                 db    ? ;
.bss:000000000021F217                 db    ? ;
.bss:000000000021F218                 db    ? ;
.bss:000000000021F219                 db    ? ;
.bss:000000000021F21A                 db    ? ;
.bss:000000000021F21B                 db    ? ;
.bss:000000000021F21C                 db    ? ;
.bss:000000000021F21D                 db    ? ;
.bss:000000000021F21E                 db    ? ;
.bss:000000000021F21F                 db    ? ;
.bss:000000000021F220                 db    ? ;
.bss:000000000021F221                 db    ? ;
.bss:000000000021F222                 db    ? ;
.bss:000000000021F223                 db    ? ;
.bss:000000000021F224                 db    ? ;
.bss:000000000021F225                 db    ? ;
.bss:000000000021F226                 db    ? ;
.bss:000000000021F227                 db    ? ;
.bss:000000000021F228                 db    ? ;
.bss:000000000021F229                 db    ? ;
.bss:000000000021F22A                 db    ? ;
.bss:000000000021F22B                 db    ? ;
.bss:000000000021F22C                 db    ? ;
.bss:000000000021F22D                 db    ? ;
.bss:000000000021F22E                 db    ? ;
.bss:000000000021F22F                 db    ? ;
.bss:000000000021F230                 db    ? ;
.bss:000000000021F231                 db    ? ;
.bss:000000000021F232                 db    ? ;
.bss:000000000021F233                 db    ? ;
.bss:000000000021F234                 db    ? ;
.bss:000000000021F235                 db    ? ;
.bss:000000000021F236                 db    ? ;
.bss:000000000021F237                 db    ? ;
.bss:000000000021F238                 db    ? ;
.bss:000000000021F239                 db    ? ;
.bss:000000000021F23A                 db    ? ;
.bss:000000000021F23B                 db    ? ;
.bss:000000000021F23C                 db    ? ;
.bss:000000000021F23D                 db    ? ;
.bss:000000000021F23E                 db    ? ;
.bss:000000000021F23F                 db    ? ;
.bss:000000000021F240                 db    ? ;
.bss:000000000021F241                 db    ? ;
.bss:000000000021F242                 db    ? ;
.bss:000000000021F243                 db    ? ;
.bss:000000000021F244                 db    ? ;
.bss:000000000021F245                 db    ? ;
.bss:000000000021F246                 db    ? ;
.bss:000000000021F247                 db    ? ;
.bss:000000000021F248                 db    ? ;
.bss:000000000021F249                 db    ? ;
.bss:000000000021F24A                 db    ? ;
.bss:000000000021F24B                 db    ? ;
.bss:000000000021F24C                 db    ? ;
.bss:000000000021F24D                 db    ? ;
.bss:000000000021F24E                 db    ? ;
.bss:000000000021F24F                 db    ? ;
.bss:000000000021F250                 db    ? ;
.bss:000000000021F251                 db    ? ;
.bss:000000000021F252                 db    ? ;
.bss:000000000021F253                 db    ? ;
.bss:000000000021F254                 db    ? ;
.bss:000000000021F255                 db    ? ;
.bss:000000000021F256                 db    ? ;
.bss:000000000021F257                 db    ? ;
.bss:000000000021F258                 db    ? ;
.bss:000000000021F259                 db    ? ;
.bss:000000000021F25A                 db    ? ;
.bss:000000000021F25B                 db    ? ;
.bss:000000000021F25C                 db    ? ;
.bss:000000000021F25D                 db    ? ;
.bss:000000000021F25E                 db    ? ;
.bss:000000000021F25F                 db    ? ;
.bss:000000000021F260                 db    ? ;
.bss:000000000021F261                 db    ? ;
.bss:000000000021F262                 db    ? ;
.bss:000000000021F263                 db    ? ;
.bss:000000000021F264                 db    ? ;
.bss:000000000021F265                 db    ? ;
.bss:000000000021F266                 db    ? ;
.bss:000000000021F267                 db    ? ;
.bss:000000000021F268                 db    ? ;
.bss:000000000021F269                 db    ? ;
.bss:000000000021F26A                 db    ? ;
.bss:000000000021F26B                 db    ? ;
.bss:000000000021F26C                 db    ? ;
.bss:000000000021F26D                 db    ? ;
.bss:000000000021F26E                 db    ? ;
.bss:000000000021F26F                 db    ? ;
.bss:000000000021F270                 db    ? ;
.bss:000000000021F271                 db    ? ;
.bss:000000000021F272                 db    ? ;
.bss:000000000021F273                 db    ? ;
.bss:000000000021F274                 db    ? ;
.bss:000000000021F275                 db    ? ;
.bss:000000000021F276                 db    ? ;
.bss:000000000021F277                 db    ? ;
.bss:000000000021F278                 db    ? ;
.bss:000000000021F279                 db    ? ;
.bss:000000000021F27A                 db    ? ;
.bss:000000000021F27B                 db    ? ;
.bss:000000000021F27C                 db    ? ;
.bss:000000000021F27D                 db    ? ;
.bss:000000000021F27E                 db    ? ;
.bss:000000000021F27F                 db    ? ;
.bss:000000000021F280                 db    ? ;
.bss:000000000021F281                 db    ? ;
.bss:000000000021F282                 db    ? ;
.bss:000000000021F283                 db    ? ;
.bss:000000000021F284                 db    ? ;
.bss:000000000021F285                 db    ? ;
.bss:000000000021F286                 db    ? ;
.bss:000000000021F287                 db    ? ;
.bss:000000000021F288                 db    ? ;
.bss:000000000021F289                 db    ? ;
.bss:000000000021F28A                 db    ? ;
.bss:000000000021F28B                 db    ? ;
.bss:000000000021F28C                 db    ? ;
.bss:000000000021F28D                 db    ? ;
.bss:000000000021F28E                 db    ? ;
.bss:000000000021F28F                 db    ? ;
.bss:000000000021F290                 db    ? ;
.bss:000000000021F291                 db    ? ;
.bss:000000000021F292                 db    ? ;
.bss:000000000021F293                 db    ? ;
.bss:000000000021F294                 db    ? ;
.bss:000000000021F295                 db    ? ;
.bss:000000000021F296                 db    ? ;
.bss:000000000021F297                 db    ? ;
.bss:000000000021F298                 db    ? ;
.bss:000000000021F299                 db    ? ;
.bss:000000000021F29A                 db    ? ;
.bss:000000000021F29B                 db    ? ;
.bss:000000000021F29C                 db    ? ;
.bss:000000000021F29D                 db    ? ;
.bss:000000000021F29E                 db    ? ;
.bss:000000000021F29F                 db    ? ;
.bss:000000000021F2A0                 db    ? ;
.bss:000000000021F2A1                 db    ? ;
.bss:000000000021F2A2                 db    ? ;
.bss:000000000021F2A3                 db    ? ;
.bss:000000000021F2A4                 db    ? ;
.bss:000000000021F2A5                 db    ? ;
.bss:000000000021F2A6                 db    ? ;
.bss:000000000021F2A7                 db    ? ;
.bss:000000000021F2A8                 db    ? ;
.bss:000000000021F2A9                 db    ? ;
.bss:000000000021F2AA                 db    ? ;
.bss:000000000021F2AB                 db    ? ;
.bss:000000000021F2AC                 db    ? ;
.bss:000000000021F2AD                 db    ? ;
.bss:000000000021F2AE                 db    ? ;
.bss:000000000021F2AF                 db    ? ;
.bss:000000000021F2B0                 db    ? ;
.bss:000000000021F2B1                 db    ? ;
.bss:000000000021F2B2                 db    ? ;
.bss:000000000021F2B3                 db    ? ;
.bss:000000000021F2B4                 db    ? ;
.bss:000000000021F2B5                 db    ? ;
.bss:000000000021F2B6                 db    ? ;
.bss:000000000021F2B7                 db    ? ;
.bss:000000000021F2B8                 db    ? ;
.bss:000000000021F2B9                 db    ? ;
.bss:000000000021F2BA                 db    ? ;
.bss:000000000021F2BB                 db    ? ;
.bss:000000000021F2BC                 db    ? ;
.bss:000000000021F2BD                 db    ? ;
.bss:000000000021F2BE                 db    ? ;
.bss:000000000021F2BF                 db    ? ;
.bss:000000000021F2C0                 db    ? ;
.bss:000000000021F2C1                 db    ? ;
.bss:000000000021F2C2                 db    ? ;
.bss:000000000021F2C3                 db    ? ;
.bss:000000000021F2C4                 db    ? ;
.bss:000000000021F2C5                 db    ? ;
.bss:000000000021F2C6                 db    ? ;
.bss:000000000021F2C7                 db    ? ;
.bss:000000000021F2C8                 db    ? ;
.bss:000000000021F2C9                 db    ? ;
.bss:000000000021F2CA                 db    ? ;
.bss:000000000021F2CB                 db    ? ;
.bss:000000000021F2CC                 db    ? ;
.bss:000000000021F2CD                 db    ? ;
.bss:000000000021F2CE                 db    ? ;
.bss:000000000021F2CF                 db    ? ;
.bss:000000000021F2D0                 db    ? ;
.bss:000000000021F2D1                 db    ? ;
.bss:000000000021F2D2                 db    ? ;
.bss:000000000021F2D3                 db    ? ;
.bss:000000000021F2D4                 db    ? ;
.bss:000000000021F2D5                 db    ? ;
.bss:000000000021F2D6                 db    ? ;
.bss:000000000021F2D7                 db    ? ;
.bss:000000000021F2D8                 db    ? ;
.bss:000000000021F2D9                 db    ? ;
.bss:000000000021F2DA                 db    ? ;
.bss:000000000021F2DB                 db    ? ;
.bss:000000000021F2DC                 db    ? ;
.bss:000000000021F2DD                 db    ? ;
.bss:000000000021F2DE                 db    ? ;
.bss:000000000021F2DF                 db    ? ;
.bss:000000000021F2E0                 db    ? ;
.bss:000000000021F2E1                 db    ? ;
.bss:000000000021F2E2                 db    ? ;
.bss:000000000021F2E3                 db    ? ;
.bss:000000000021F2E4                 db    ? ;
.bss:000000000021F2E5                 db    ? ;
.bss:000000000021F2E6                 db    ? ;
.bss:000000000021F2E7                 db    ? ;
.bss:000000000021F2E8                 db    ? ;
.bss:000000000021F2E9                 db    ? ;
.bss:000000000021F2EA                 db    ? ;
.bss:000000000021F2EB                 db    ? ;
.bss:000000000021F2EC                 db    ? ;
.bss:000000000021F2ED                 db    ? ;
.bss:000000000021F2EE                 db    ? ;
.bss:000000000021F2EF                 db    ? ;
.bss:000000000021F2F0                 db    ? ;
.bss:000000000021F2F1                 db    ? ;
.bss:000000000021F2F2                 db    ? ;
.bss:000000000021F2F3                 db    ? ;
.bss:000000000021F2F4                 db    ? ;
.bss:000000000021F2F5                 db    ? ;
.bss:000000000021F2F6                 db    ? ;
.bss:000000000021F2F7                 db    ? ;
.bss:000000000021F2F8                 db    ? ;
.bss:000000000021F2F9                 db    ? ;
.bss:000000000021F2FA                 db    ? ;
.bss:000000000021F2FB                 db    ? ;
.bss:000000000021F2FC                 db    ? ;
.bss:000000000021F2FD                 db    ? ;
.bss:000000000021F2FE                 db    ? ;
.bss:000000000021F2FF                 db    ? ;
.bss:000000000021F300                 db    ? ;
.bss:000000000021F301                 db    ? ;
.bss:000000000021F302                 db    ? ;
.bss:000000000021F303                 db    ? ;
.bss:000000000021F304                 db    ? ;
.bss:000000000021F305                 db    ? ;
.bss:000000000021F306                 db    ? ;
.bss:000000000021F307                 db    ? ;
.bss:000000000021F308                 db    ? ;
.bss:000000000021F309                 db    ? ;
.bss:000000000021F30A                 db    ? ;
.bss:000000000021F30B                 db    ? ;
.bss:000000000021F30C                 db    ? ;
.bss:000000000021F30D                 db    ? ;
.bss:000000000021F30E                 db    ? ;
.bss:000000000021F30F                 db    ? ;
.bss:000000000021F310                 db    ? ;
.bss:000000000021F311                 db    ? ;
.bss:000000000021F312                 db    ? ;
.bss:000000000021F313                 db    ? ;
.bss:000000000021F314                 db    ? ;
.bss:000000000021F315                 db    ? ;
.bss:000000000021F316                 db    ? ;
.bss:000000000021F317                 db    ? ;
.bss:000000000021F318                 db    ? ;
.bss:000000000021F319                 db    ? ;
.bss:000000000021F31A                 db    ? ;
.bss:000000000021F31B                 db    ? ;
.bss:000000000021F31C                 db    ? ;
.bss:000000000021F31D                 db    ? ;
.bss:000000000021F31E                 db    ? ;
.bss:000000000021F31F                 db    ? ;
.bss:000000000021F320                 db    ? ;
.bss:000000000021F321                 db    ? ;
.bss:000000000021F322                 db    ? ;
.bss:000000000021F323                 db    ? ;
.bss:000000000021F324                 db    ? ;
.bss:000000000021F325                 db    ? ;
.bss:000000000021F326                 db    ? ;
.bss:000000000021F327                 db    ? ;
.bss:000000000021F328                 db    ? ;
.bss:000000000021F329                 db    ? ;
.bss:000000000021F32A                 db    ? ;
.bss:000000000021F32B                 db    ? ;
.bss:000000000021F32C                 db    ? ;
.bss:000000000021F32D                 db    ? ;
.bss:000000000021F32E                 db    ? ;
.bss:000000000021F32F                 db    ? ;
.bss:000000000021F330                 db    ? ;
.bss:000000000021F331                 db    ? ;
.bss:000000000021F332                 db    ? ;
.bss:000000000021F333                 db    ? ;
.bss:000000000021F334                 db    ? ;
.bss:000000000021F335                 db    ? ;
.bss:000000000021F336                 db    ? ;
.bss:000000000021F337                 db    ? ;
.bss:000000000021F338                 db    ? ;
.bss:000000000021F339                 db    ? ;
.bss:000000000021F33A                 db    ? ;
.bss:000000000021F33B                 db    ? ;
.bss:000000000021F33C                 db    ? ;
.bss:000000000021F33D                 db    ? ;
.bss:000000000021F33E                 db    ? ;
.bss:000000000021F33F                 db    ? ;
.bss:000000000021F340                 db    ? ;
.bss:000000000021F341                 db    ? ;
.bss:000000000021F342                 db    ? ;
.bss:000000000021F343                 db    ? ;
.bss:000000000021F344                 db    ? ;
.bss:000000000021F345                 db    ? ;
.bss:000000000021F346                 db    ? ;
.bss:000000000021F347                 db    ? ;
.bss:000000000021F348                 db    ? ;
.bss:000000000021F349                 db    ? ;
.bss:000000000021F34A                 db    ? ;
.bss:000000000021F34B                 db    ? ;
.bss:000000000021F34C                 db    ? ;
.bss:000000000021F34D                 db    ? ;
.bss:000000000021F34E                 db    ? ;
.bss:000000000021F34F                 db    ? ;
.bss:000000000021F350                 db    ? ;
.bss:000000000021F351                 db    ? ;
.bss:000000000021F352                 db    ? ;
.bss:000000000021F353                 db    ? ;
.bss:000000000021F354                 db    ? ;
.bss:000000000021F355                 db    ? ;
.bss:000000000021F356                 db    ? ;
.bss:000000000021F357                 db    ? ;
.bss:000000000021F358                 db    ? ;
.bss:000000000021F359                 db    ? ;
.bss:000000000021F35A                 db    ? ;
.bss:000000000021F35B                 db    ? ;
.bss:000000000021F35C                 db    ? ;
.bss:000000000021F35D                 db    ? ;
.bss:000000000021F35E                 db    ? ;
.bss:000000000021F35F                 db    ? ;
.bss:000000000021F360                 db    ? ;
.bss:000000000021F361                 db    ? ;
.bss:000000000021F362                 db    ? ;
.bss:000000000021F363                 db    ? ;
.bss:000000000021F364                 db    ? ;
.bss:000000000021F365                 db    ? ;
.bss:000000000021F366                 db    ? ;
.bss:000000000021F367                 db    ? ;
.bss:000000000021F368                 db    ? ;
.bss:000000000021F369                 db    ? ;
.bss:000000000021F36A                 db    ? ;
.bss:000000000021F36B                 db    ? ;
.bss:000000000021F36C                 db    ? ;
.bss:000000000021F36D                 db    ? ;
.bss:000000000021F36E                 db    ? ;
.bss:000000000021F36F                 db    ? ;
.bss:000000000021F370                 db    ? ;
.bss:000000000021F371                 db    ? ;
.bss:000000000021F372                 db    ? ;
.bss:000000000021F373                 db    ? ;
.bss:000000000021F374                 db    ? ;
.bss:000000000021F375                 db    ? ;
.bss:000000000021F376                 db    ? ;
.bss:000000000021F377                 db    ? ;
.bss:000000000021F378                 db    ? ;
.bss:000000000021F379                 db    ? ;
.bss:000000000021F37A                 db    ? ;
.bss:000000000021F37B                 db    ? ;
.bss:000000000021F37C                 db    ? ;
.bss:000000000021F37D                 db    ? ;
.bss:000000000021F37E                 db    ? ;
.bss:000000000021F37F                 db    ? ;
.bss:000000000021F380                 db    ? ;
.bss:000000000021F381                 db    ? ;
.bss:000000000021F382                 db    ? ;
.bss:000000000021F383                 db    ? ;
.bss:000000000021F384                 db    ? ;
.bss:000000000021F385                 db    ? ;
.bss:000000000021F386                 db    ? ;
.bss:000000000021F387                 db    ? ;
.bss:000000000021F388                 db    ? ;
.bss:000000000021F389                 db    ? ;
.bss:000000000021F38A                 db    ? ;
.bss:000000000021F38B                 db    ? ;
.bss:000000000021F38C                 db    ? ;
.bss:000000000021F38D                 db    ? ;
.bss:000000000021F38E                 db    ? ;
.bss:000000000021F38F                 db    ? ;
.bss:000000000021F390                 db    ? ;
.bss:000000000021F391                 db    ? ;
.bss:000000000021F392                 db    ? ;
.bss:000000000021F393                 db    ? ;
.bss:000000000021F394                 db    ? ;
.bss:000000000021F395                 db    ? ;
.bss:000000000021F396                 db    ? ;
.bss:000000000021F397                 db    ? ;
.bss:000000000021F398                 db    ? ;
.bss:000000000021F399                 db    ? ;
.bss:000000000021F39A                 db    ? ;
.bss:000000000021F39B                 db    ? ;
.bss:000000000021F39C                 db    ? ;
.bss:000000000021F39D                 db    ? ;
.bss:000000000021F39E                 db    ? ;
.bss:000000000021F39F                 db    ? ;
.bss:000000000021F3A0                 db    ? ;
.bss:000000000021F3A1                 db    ? ;
.bss:000000000021F3A2                 db    ? ;
.bss:000000000021F3A3                 db    ? ;
.bss:000000000021F3A4                 db    ? ;
.bss:000000000021F3A5                 db    ? ;
.bss:000000000021F3A6                 db    ? ;
.bss:000000000021F3A7                 db    ? ;
.bss:000000000021F3A8                 db    ? ;
.bss:000000000021F3A9                 db    ? ;
.bss:000000000021F3AA                 db    ? ;
.bss:000000000021F3AB                 db    ? ;
.bss:000000000021F3AC                 db    ? ;
.bss:000000000021F3AD                 db    ? ;
.bss:000000000021F3AE                 db    ? ;
.bss:000000000021F3AF                 db    ? ;
.bss:000000000021F3B0                 db    ? ;
.bss:000000000021F3B1                 db    ? ;
.bss:000000000021F3B2                 db    ? ;
.bss:000000000021F3B3                 db    ? ;
.bss:000000000021F3B4                 db    ? ;
.bss:000000000021F3B5                 db    ? ;
.bss:000000000021F3B6                 db    ? ;
.bss:000000000021F3B7                 db    ? ;
.bss:000000000021F3B8                 db    ? ;
.bss:000000000021F3B9                 db    ? ;
.bss:000000000021F3BA                 db    ? ;
.bss:000000000021F3BB                 db    ? ;
.bss:000000000021F3BC                 db    ? ;
.bss:000000000021F3BD                 db    ? ;
.bss:000000000021F3BE                 db    ? ;
.bss:000000000021F3BF                 db    ? ;
.bss:000000000021F3C0                 db    ? ;
.bss:000000000021F3C1                 db    ? ;
.bss:000000000021F3C2                 db    ? ;
.bss:000000000021F3C3                 db    ? ;
.bss:000000000021F3C4                 db    ? ;
.bss:000000000021F3C5                 db    ? ;
.bss:000000000021F3C6                 db    ? ;
.bss:000000000021F3C7                 db    ? ;
.bss:000000000021F3C8                 db    ? ;
.bss:000000000021F3C9                 db    ? ;
.bss:000000000021F3CA                 db    ? ;
.bss:000000000021F3CB                 db    ? ;
.bss:000000000021F3CC                 db    ? ;
.bss:000000000021F3CD                 db    ? ;
.bss:000000000021F3CE                 db    ? ;
.bss:000000000021F3CF                 db    ? ;
.bss:000000000021F3D0                 db    ? ;
.bss:000000000021F3D1                 db    ? ;
.bss:000000000021F3D2                 db    ? ;
.bss:000000000021F3D3                 db    ? ;
.bss:000000000021F3D4                 db    ? ;
.bss:000000000021F3D5                 db    ? ;
.bss:000000000021F3D6                 db    ? ;
.bss:000000000021F3D7                 db    ? ;
.bss:000000000021F3D8                 db    ? ;
.bss:000000000021F3D9                 db    ? ;
.bss:000000000021F3DA                 db    ? ;
.bss:000000000021F3DB                 db    ? ;
.bss:000000000021F3DC                 db    ? ;
.bss:000000000021F3DD                 db    ? ;
.bss:000000000021F3DE                 db    ? ;
.bss:000000000021F3DF                 db    ? ;
.bss:000000000021F3E0                 db    ? ;
.bss:000000000021F3E1                 db    ? ;
.bss:000000000021F3E2                 db    ? ;
.bss:000000000021F3E3                 db    ? ;
.bss:000000000021F3E4                 db    ? ;
.bss:000000000021F3E5                 db    ? ;
.bss:000000000021F3E6                 db    ? ;
.bss:000000000021F3E7                 db    ? ;
.bss:000000000021F3E8                 db    ? ;
.bss:000000000021F3E9                 db    ? ;
.bss:000000000021F3EA                 db    ? ;
.bss:000000000021F3EB                 db    ? ;
.bss:000000000021F3EC                 db    ? ;
.bss:000000000021F3ED                 db    ? ;
.bss:000000000021F3EE                 db    ? ;
.bss:000000000021F3EF                 db    ? ;
.bss:000000000021F3F0                 db    ? ;
.bss:000000000021F3F1                 db    ? ;
.bss:000000000021F3F2                 db    ? ;
.bss:000000000021F3F3                 db    ? ;
.bss:000000000021F3F4                 db    ? ;
.bss:000000000021F3F5                 db    ? ;
.bss:000000000021F3F6                 db    ? ;
.bss:000000000021F3F7                 db    ? ;
.bss:000000000021F3F8                 db    ? ;
.bss:000000000021F3F9                 db    ? ;
.bss:000000000021F3FA                 db    ? ;
.bss:000000000021F3FB                 db    ? ;
.bss:000000000021F3FC                 db    ? ;
.bss:000000000021F3FD                 db    ? ;
.bss:000000000021F3FE                 db    ? ;
.bss:000000000021F3FF                 db    ? ;
.bss:000000000021F400                 db    ? ;
.bss:000000000021F401                 db    ? ;
.bss:000000000021F402                 db    ? ;
.bss:000000000021F403                 db    ? ;
.bss:000000000021F404                 db    ? ;
.bss:000000000021F405                 db    ? ;
.bss:000000000021F406                 db    ? ;
.bss:000000000021F407                 db    ? ;
.bss:000000000021F408                 db    ? ;
.bss:000000000021F409                 db    ? ;
.bss:000000000021F40A                 db    ? ;
.bss:000000000021F40B                 db    ? ;
.bss:000000000021F40C                 db    ? ;
.bss:000000000021F40D                 db    ? ;
.bss:000000000021F40E                 db    ? ;
.bss:000000000021F40F                 db    ? ;
.bss:000000000021F410                 db    ? ;
.bss:000000000021F411                 db    ? ;
.bss:000000000021F412                 db    ? ;
.bss:000000000021F413                 db    ? ;
.bss:000000000021F414                 db    ? ;
.bss:000000000021F415                 db    ? ;
.bss:000000000021F416                 db    ? ;
.bss:000000000021F417                 db    ? ;
.bss:000000000021F418                 db    ? ;
.bss:000000000021F419                 db    ? ;
.bss:000000000021F41A                 db    ? ;
.bss:000000000021F41B                 db    ? ;
.bss:000000000021F41C                 db    ? ;
.bss:000000000021F41D                 db    ? ;
.bss:000000000021F41E                 db    ? ;
.bss:000000000021F41F                 db    ? ;
.bss:000000000021F420                 db    ? ;
.bss:000000000021F421                 db    ? ;
.bss:000000000021F422                 db    ? ;
.bss:000000000021F423                 db    ? ;
.bss:000000000021F424                 db    ? ;
.bss:000000000021F425                 db    ? ;
.bss:000000000021F426                 db    ? ;
.bss:000000000021F427                 db    ? ;
.bss:000000000021F428                 db    ? ;
.bss:000000000021F429                 db    ? ;
.bss:000000000021F42A                 db    ? ;
.bss:000000000021F42B                 db    ? ;
.bss:000000000021F42C                 db    ? ;
.bss:000000000021F42D                 db    ? ;
.bss:000000000021F42E                 db    ? ;
.bss:000000000021F42F                 db    ? ;
.bss:000000000021F430                 db    ? ;
.bss:000000000021F431                 db    ? ;
.bss:000000000021F432                 db    ? ;
.bss:000000000021F433                 db    ? ;
.bss:000000000021F434                 db    ? ;
.bss:000000000021F435                 db    ? ;
.bss:000000000021F436                 db    ? ;
.bss:000000000021F437                 db    ? ;
.bss:000000000021F438                 db    ? ;
.bss:000000000021F439                 db    ? ;
.bss:000000000021F43A                 db    ? ;
.bss:000000000021F43B                 db    ? ;
.bss:000000000021F43C                 db    ? ;
.bss:000000000021F43D                 db    ? ;
.bss:000000000021F43E                 db    ? ;
.bss:000000000021F43F                 db    ? ;
.bss:000000000021F440                 db    ? ;
.bss:000000000021F441                 db    ? ;
.bss:000000000021F442                 db    ? ;
.bss:000000000021F443                 db    ? ;
.bss:000000000021F444                 db    ? ;
.bss:000000000021F445                 db    ? ;
.bss:000000000021F446                 db    ? ;
.bss:000000000021F447                 db    ? ;
.bss:000000000021F448                 db    ? ;
.bss:000000000021F449                 db    ? ;
.bss:000000000021F44A                 db    ? ;
.bss:000000000021F44B                 db    ? ;
.bss:000000000021F44C                 db    ? ;
.bss:000000000021F44D                 db    ? ;
.bss:000000000021F44E                 db    ? ;
.bss:000000000021F44F                 db    ? ;
.bss:000000000021F450                 db    ? ;
.bss:000000000021F451                 db    ? ;
.bss:000000000021F452                 db    ? ;
.bss:000000000021F453                 db    ? ;
.bss:000000000021F454                 db    ? ;
.bss:000000000021F455                 db    ? ;
.bss:000000000021F456                 db    ? ;
.bss:000000000021F457                 db    ? ;
.bss:000000000021F458                 db    ? ;
.bss:000000000021F459                 db    ? ;
.bss:000000000021F45A                 db    ? ;
.bss:000000000021F45B                 db    ? ;
.bss:000000000021F45C                 db    ? ;
.bss:000000000021F45D                 db    ? ;
.bss:000000000021F45E                 db    ? ;
.bss:000000000021F45F                 db    ? ;
.bss:000000000021F460                 db    ? ;
.bss:000000000021F461                 db    ? ;
.bss:000000000021F462                 db    ? ;
.bss:000000000021F463                 db    ? ;
.bss:000000000021F464                 db    ? ;
.bss:000000000021F465                 db    ? ;
.bss:000000000021F466                 db    ? ;
.bss:000000000021F467                 db    ? ;
.bss:000000000021F468                 db    ? ;
.bss:000000000021F469                 db    ? ;
.bss:000000000021F46A                 db    ? ;
.bss:000000000021F46B                 db    ? ;
.bss:000000000021F46C                 db    ? ;
.bss:000000000021F46D                 db    ? ;
.bss:000000000021F46E                 db    ? ;
.bss:000000000021F46F                 db    ? ;
.bss:000000000021F470                 db    ? ;
.bss:000000000021F471                 db    ? ;
.bss:000000000021F472                 db    ? ;
.bss:000000000021F473                 db    ? ;
.bss:000000000021F474                 db    ? ;
.bss:000000000021F475                 db    ? ;
.bss:000000000021F476                 db    ? ;
.bss:000000000021F477                 db    ? ;
.bss:000000000021F478                 db    ? ;
.bss:000000000021F479                 db    ? ;
.bss:000000000021F47A                 db    ? ;
.bss:000000000021F47B                 db    ? ;
.bss:000000000021F47C                 db    ? ;
.bss:000000000021F47D                 db    ? ;
.bss:000000000021F47E                 db    ? ;
.bss:000000000021F47F                 db    ? ;
.bss:000000000021F480                 db    ? ;
.bss:000000000021F481                 db    ? ;
.bss:000000000021F482                 db    ? ;
.bss:000000000021F483                 db    ? ;
.bss:000000000021F484                 db    ? ;
.bss:000000000021F485                 db    ? ;
.bss:000000000021F486                 db    ? ;
.bss:000000000021F487                 db    ? ;
.bss:000000000021F488                 db    ? ;
.bss:000000000021F489                 db    ? ;
.bss:000000000021F48A                 db    ? ;
.bss:000000000021F48B                 db    ? ;
.bss:000000000021F48C                 db    ? ;
.bss:000000000021F48D                 db    ? ;
.bss:000000000021F48E                 db    ? ;
.bss:000000000021F48F                 db    ? ;
.bss:000000000021F490                 db    ? ;
.bss:000000000021F491                 db    ? ;
.bss:000000000021F492                 db    ? ;
.bss:000000000021F493                 db    ? ;
.bss:000000000021F494                 db    ? ;
.bss:000000000021F495                 db    ? ;
.bss:000000000021F496                 db    ? ;
.bss:000000000021F497                 db    ? ;
.bss:000000000021F498                 db    ? ;
.bss:000000000021F499                 db    ? ;
.bss:000000000021F49A                 db    ? ;
.bss:000000000021F49B                 db    ? ;
.bss:000000000021F49C                 db    ? ;
.bss:000000000021F49D                 db    ? ;
.bss:000000000021F49E                 db    ? ;
.bss:000000000021F49F                 db    ? ;
.bss:000000000021F4A0                 db    ? ;
.bss:000000000021F4A1                 db    ? ;
.bss:000000000021F4A2                 db    ? ;
.bss:000000000021F4A3                 db    ? ;
.bss:000000000021F4A4                 db    ? ;
.bss:000000000021F4A5                 db    ? ;
.bss:000000000021F4A6                 db    ? ;
.bss:000000000021F4A7                 db    ? ;
.bss:000000000021F4A8                 db    ? ;
.bss:000000000021F4A9                 db    ? ;
.bss:000000000021F4AA                 db    ? ;
.bss:000000000021F4AB                 db    ? ;
.bss:000000000021F4AC                 db    ? ;
.bss:000000000021F4AD                 db    ? ;
.bss:000000000021F4AE                 db    ? ;
.bss:000000000021F4AF                 db    ? ;
.bss:000000000021F4B0                 db    ? ;
.bss:000000000021F4B1                 db    ? ;
.bss:000000000021F4B2                 db    ? ;
.bss:000000000021F4B3                 db    ? ;
.bss:000000000021F4B4                 db    ? ;
.bss:000000000021F4B5                 db    ? ;
.bss:000000000021F4B6                 db    ? ;
.bss:000000000021F4B7                 db    ? ;
.bss:000000000021F4B8                 db    ? ;
.bss:000000000021F4B9                 db    ? ;
.bss:000000000021F4BA                 db    ? ;
.bss:000000000021F4BB                 db    ? ;
.bss:000000000021F4BC                 db    ? ;
.bss:000000000021F4BD                 db    ? ;
.bss:000000000021F4BE                 db    ? ;
.bss:000000000021F4BF                 db    ? ;
.bss:000000000021F4C0                 db    ? ;
.bss:000000000021F4C1                 db    ? ;
.bss:000000000021F4C2                 db    ? ;
.bss:000000000021F4C3                 db    ? ;
.bss:000000000021F4C4                 db    ? ;
.bss:000000000021F4C5                 db    ? ;
.bss:000000000021F4C6                 db    ? ;
.bss:000000000021F4C7                 db    ? ;
.bss:000000000021F4C8                 db    ? ;
.bss:000000000021F4C9                 db    ? ;
.bss:000000000021F4CA                 db    ? ;
.bss:000000000021F4CB                 db    ? ;
.bss:000000000021F4CC                 db    ? ;
.bss:000000000021F4CD                 db    ? ;
.bss:000000000021F4CE                 db    ? ;
.bss:000000000021F4CF                 db    ? ;
.bss:000000000021F4D0                 db    ? ;
.bss:000000000021F4D1                 db    ? ;
.bss:000000000021F4D2                 db    ? ;
.bss:000000000021F4D3                 db    ? ;
.bss:000000000021F4D4                 db    ? ;
.bss:000000000021F4D5                 db    ? ;
.bss:000000000021F4D6                 db    ? ;
.bss:000000000021F4D7                 db    ? ;
.bss:000000000021F4D8                 db    ? ;
.bss:000000000021F4D9                 db    ? ;
.bss:000000000021F4DA                 db    ? ;
.bss:000000000021F4DB                 db    ? ;
.bss:000000000021F4DC                 db    ? ;
.bss:000000000021F4DD                 db    ? ;
.bss:000000000021F4DE                 db    ? ;
.bss:000000000021F4DF                 db    ? ;
.bss:000000000021F4E0                 db    ? ;
.bss:000000000021F4E1                 db    ? ;
.bss:000000000021F4E2                 db    ? ;
.bss:000000000021F4E3                 db    ? ;
.bss:000000000021F4E4                 db    ? ;
.bss:000000000021F4E5                 db    ? ;
.bss:000000000021F4E6                 db    ? ;
.bss:000000000021F4E7                 db    ? ;
.bss:000000000021F4E8                 db    ? ;
.bss:000000000021F4E9                 db    ? ;
.bss:000000000021F4EA                 db    ? ;
.bss:000000000021F4EB                 db    ? ;
.bss:000000000021F4EC                 db    ? ;
.bss:000000000021F4ED                 db    ? ;
.bss:000000000021F4EE                 db    ? ;
.bss:000000000021F4EF                 db    ? ;
.bss:000000000021F4F0                 db    ? ;
.bss:000000000021F4F1                 db    ? ;
.bss:000000000021F4F2                 db    ? ;
.bss:000000000021F4F3                 db    ? ;
.bss:000000000021F4F4                 db    ? ;
.bss:000000000021F4F5                 db    ? ;
.bss:000000000021F4F6                 db    ? ;
.bss:000000000021F4F7                 db    ? ;
.bss:000000000021F4F8                 db    ? ;
.bss:000000000021F4F9                 db    ? ;
.bss:000000000021F4FA                 db    ? ;
.bss:000000000021F4FB                 db    ? ;
.bss:000000000021F4FC                 db    ? ;
.bss:000000000021F4FD                 db    ? ;
.bss:000000000021F4FE                 db    ? ;
.bss:000000000021F4FF                 db    ? ;
.bss:000000000021F500                 db    ? ;
.bss:000000000021F501                 db    ? ;
.bss:000000000021F502                 db    ? ;
.bss:000000000021F503                 db    ? ;
.bss:000000000021F504                 db    ? ;
.bss:000000000021F505                 db    ? ;
.bss:000000000021F506                 db    ? ;
.bss:000000000021F507                 db    ? ;
.bss:000000000021F508                 db    ? ;
.bss:000000000021F509                 db    ? ;
.bss:000000000021F50A                 db    ? ;
.bss:000000000021F50B                 db    ? ;
.bss:000000000021F50C                 db    ? ;
.bss:000000000021F50D                 db    ? ;
.bss:000000000021F50E                 db    ? ;
.bss:000000000021F50F                 db    ? ;
.bss:000000000021F510                 db    ? ;
.bss:000000000021F511                 db    ? ;
.bss:000000000021F512                 db    ? ;
.bss:000000000021F513                 db    ? ;
.bss:000000000021F514                 db    ? ;
.bss:000000000021F515                 db    ? ;
.bss:000000000021F516                 db    ? ;
.bss:000000000021F517                 db    ? ;
.bss:000000000021F518                 db    ? ;
.bss:000000000021F519                 db    ? ;
.bss:000000000021F51A                 db    ? ;
.bss:000000000021F51B                 db    ? ;
.bss:000000000021F51C                 db    ? ;
.bss:000000000021F51D                 db    ? ;
.bss:000000000021F51E                 db    ? ;
.bss:000000000021F51F                 db    ? ;
.bss:000000000021F520                 db    ? ;
.bss:000000000021F521                 db    ? ;
.bss:000000000021F522                 db    ? ;
.bss:000000000021F523                 db    ? ;
.bss:000000000021F524                 db    ? ;
.bss:000000000021F525                 db    ? ;
.bss:000000000021F526                 db    ? ;
.bss:000000000021F527                 db    ? ;
.bss:000000000021F528                 db    ? ;
.bss:000000000021F529                 db    ? ;
.bss:000000000021F52A                 db    ? ;
.bss:000000000021F52B                 db    ? ;
.bss:000000000021F52C                 db    ? ;
.bss:000000000021F52D                 db    ? ;
.bss:000000000021F52E                 db    ? ;
.bss:000000000021F52F                 db    ? ;
.bss:000000000021F530                 db    ? ;
.bss:000000000021F531                 db    ? ;
.bss:000000000021F532                 db    ? ;
.bss:000000000021F533                 db    ? ;
.bss:000000000021F534                 db    ? ;
.bss:000000000021F535                 db    ? ;
.bss:000000000021F536                 db    ? ;
.bss:000000000021F537                 db    ? ;
.bss:000000000021F538                 db    ? ;
.bss:000000000021F539                 db    ? ;
.bss:000000000021F53A                 db    ? ;
.bss:000000000021F53B                 db    ? ;
.bss:000000000021F53C                 db    ? ;
.bss:000000000021F53D                 db    ? ;
.bss:000000000021F53E                 db    ? ;
.bss:000000000021F53F                 db    ? ;
.bss:000000000021F540                 db    ? ;
.bss:000000000021F541                 db    ? ;
.bss:000000000021F542                 db    ? ;
.bss:000000000021F543                 db    ? ;
.bss:000000000021F544                 db    ? ;
.bss:000000000021F545                 db    ? ;
.bss:000000000021F546                 db    ? ;
.bss:000000000021F547                 db    ? ;
.bss:000000000021F548                 db    ? ;
.bss:000000000021F549                 db    ? ;
.bss:000000000021F54A                 db    ? ;
.bss:000000000021F54B                 db    ? ;
.bss:000000000021F54C                 db    ? ;
.bss:000000000021F54D                 db    ? ;
.bss:000000000021F54E                 db    ? ;
.bss:000000000021F54F                 db    ? ;
.bss:000000000021F550                 db    ? ;
.bss:000000000021F551                 db    ? ;
.bss:000000000021F552                 db    ? ;
.bss:000000000021F553                 db    ? ;
.bss:000000000021F554                 db    ? ;
.bss:000000000021F555                 db    ? ;
.bss:000000000021F556                 db    ? ;
.bss:000000000021F557                 db    ? ;
.bss:000000000021F558                 db    ? ;
.bss:000000000021F559                 db    ? ;
.bss:000000000021F55A                 db    ? ;
.bss:000000000021F55B                 db    ? ;
.bss:000000000021F55C                 db    ? ;
.bss:000000000021F55D                 db    ? ;
.bss:000000000021F55E                 db    ? ;
.bss:000000000021F55F                 db    ? ;
.bss:000000000021F560                 db    ? ;
.bss:000000000021F561                 db    ? ;
.bss:000000000021F562                 db    ? ;
.bss:000000000021F563                 db    ? ;
.bss:000000000021F564                 db    ? ;
.bss:000000000021F565                 db    ? ;
.bss:000000000021F566                 db    ? ;
.bss:000000000021F567                 db    ? ;
.bss:000000000021F568                 db    ? ;
.bss:000000000021F569                 db    ? ;
.bss:000000000021F56A                 db    ? ;
.bss:000000000021F56B                 db    ? ;
.bss:000000000021F56C                 db    ? ;
.bss:000000000021F56D                 db    ? ;
.bss:000000000021F56E                 db    ? ;
.bss:000000000021F56F                 db    ? ;
.bss:000000000021F570                 db    ? ;
.bss:000000000021F571                 db    ? ;
.bss:000000000021F572                 db    ? ;
.bss:000000000021F573                 db    ? ;
.bss:000000000021F574                 db    ? ;
.bss:000000000021F575                 db    ? ;
.bss:000000000021F576                 db    ? ;
.bss:000000000021F577                 db    ? ;
.bss:000000000021F578                 db    ? ;
.bss:000000000021F579                 db    ? ;
.bss:000000000021F57A                 db    ? ;
.bss:000000000021F57B                 db    ? ;
.bss:000000000021F57C                 db    ? ;
.bss:000000000021F57D                 db    ? ;
.bss:000000000021F57E                 db    ? ;
.bss:000000000021F57F                 db    ? ;
.bss:000000000021F580 ; void *zeros_7570
.bss:000000000021F580 zeros_7570      dq ?                    ; DATA XREF: write_zeros↑r
.bss:000000000021F580                                         ; write_zeros+2F↑r ...
.bss:000000000021F588 top_level_dst_name dq ?                 ; DATA XREF: copy_internal+10A6↑r
.bss:000000000021F588                                         ; copy_internal:loc_75D0↑r ...
.bss:000000000021F590 top_level_src_name dq ?                 ; DATA XREF: copy_internal+10BC↑r
.bss:000000000021F590                                         ; copy_internal+19C6↑r ...
.bss:000000000021F598 ; void *src_to_dest
.bss:000000000021F598 src_to_dest     dq ?                    ; DATA XREF: forget_created+9↑r
.bss:000000000021F598                                         ; src_to_dest_lookup+8↑r ...
.bss:000000000021F5A0                 public simple_backup_suffix
.bss:000000000021F5A0 ; char *simple_backup_suffix
.bss:000000000021F5A0 simple_backup_suffix dq ?               ; DATA XREF: copy_internal+D94↑r
.bss:000000000021F5A0                                         ; copy_internal+288B↑r ...
.bss:000000000021F5A8 file_name       dq ?                    ; DATA XREF: close_stdin_set_file_name↑w
.bss:000000000021F5A8                                         ; close_stdin+6B↑r
.bss:000000000021F5B0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000021F5B0                                         ; close_stdout+1B↑r
.bss:000000000021F5B1                 align 8
.bss:000000000021F5B8 file_name_0     dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000021F5B8                                         ; close_stdout+56↑r
.bss:000000000021F5C0                 public program_name
.bss:000000000021F5C0 ; char *program_name
.bss:000000000021F5C0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000021F5C0                                         ; prog_fprintf+71↑r ...
.bss:000000000021F5C8                 align 20h
.bss:000000000021F5E0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000021F5E0                                         ; quotearg_free+46↑o ...
.bss:000000000021F5E1                 db    ? ;
.bss:000000000021F5E2                 db    ? ;
.bss:000000000021F5E3                 db    ? ;
.bss:000000000021F5E4                 db    ? ;
.bss:000000000021F5E5                 db    ? ;
.bss:000000000021F5E6                 db    ? ;
.bss:000000000021F5E7                 db    ? ;
.bss:000000000021F5E8                 db    ? ;
.bss:000000000021F5E9                 db    ? ;
.bss:000000000021F5EA                 db    ? ;
.bss:000000000021F5EB                 db    ? ;
.bss:000000000021F5EC                 db    ? ;
.bss:000000000021F5ED                 db    ? ;
.bss:000000000021F5EE                 db    ? ;
.bss:000000000021F5EF                 db    ? ;
.bss:000000000021F5F0                 db    ? ;
.bss:000000000021F5F1                 db    ? ;
.bss:000000000021F5F2                 db    ? ;
.bss:000000000021F5F3                 db    ? ;
.bss:000000000021F5F4                 db    ? ;
.bss:000000000021F5F5                 db    ? ;
.bss:000000000021F5F6                 db    ? ;
.bss:000000000021F5F7                 db    ? ;
.bss:000000000021F5F8                 db    ? ;
.bss:000000000021F5F9                 db    ? ;
.bss:000000000021F5FA                 db    ? ;
.bss:000000000021F5FB                 db    ? ;
.bss:000000000021F5FC                 db    ? ;
.bss:000000000021F5FD                 db    ? ;
.bss:000000000021F5FE                 db    ? ;
.bss:000000000021F5FF                 db    ? ;
.bss:000000000021F600                 db    ? ;
.bss:000000000021F601                 db    ? ;
.bss:000000000021F602                 db    ? ;
.bss:000000000021F603                 db    ? ;
.bss:000000000021F604                 db    ? ;
.bss:000000000021F605                 db    ? ;
.bss:000000000021F606                 db    ? ;
.bss:000000000021F607                 db    ? ;
.bss:000000000021F608                 db    ? ;
.bss:000000000021F609                 db    ? ;
.bss:000000000021F60A                 db    ? ;
.bss:000000000021F60B                 db    ? ;
.bss:000000000021F60C                 db    ? ;
.bss:000000000021F60D                 db    ? ;
.bss:000000000021F60E                 db    ? ;
.bss:000000000021F60F                 db    ? ;
.bss:000000000021F610                 db    ? ;
.bss:000000000021F611                 db    ? ;
.bss:000000000021F612                 db    ? ;
.bss:000000000021F613                 db    ? ;
.bss:000000000021F614                 db    ? ;
.bss:000000000021F615                 db    ? ;
.bss:000000000021F616                 db    ? ;
.bss:000000000021F617                 db    ? ;
.bss:000000000021F618                 db    ? ;
.bss:000000000021F619                 db    ? ;
.bss:000000000021F61A                 db    ? ;
.bss:000000000021F61B                 db    ? ;
.bss:000000000021F61C                 db    ? ;
.bss:000000000021F61D                 db    ? ;
.bss:000000000021F61E                 db    ? ;
.bss:000000000021F61F                 db    ? ;
.bss:000000000021F620                 db    ? ;
.bss:000000000021F621                 db    ? ;
.bss:000000000021F622                 db    ? ;
.bss:000000000021F623                 db    ? ;
.bss:000000000021F624                 db    ? ;
.bss:000000000021F625                 db    ? ;
.bss:000000000021F626                 db    ? ;
.bss:000000000021F627                 db    ? ;
.bss:000000000021F628                 db    ? ;
.bss:000000000021F629                 db    ? ;
.bss:000000000021F62A                 db    ? ;
.bss:000000000021F62B                 db    ? ;
.bss:000000000021F62C                 db    ? ;
.bss:000000000021F62D                 db    ? ;
.bss:000000000021F62E                 db    ? ;
.bss:000000000021F62F                 db    ? ;
.bss:000000000021F630                 db    ? ;
.bss:000000000021F631                 db    ? ;
.bss:000000000021F632                 db    ? ;
.bss:000000000021F633                 db    ? ;
.bss:000000000021F634                 db    ? ;
.bss:000000000021F635                 db    ? ;
.bss:000000000021F636                 db    ? ;
.bss:000000000021F637                 db    ? ;
.bss:000000000021F638                 db    ? ;
.bss:000000000021F639                 db    ? ;
.bss:000000000021F63A                 db    ? ;
.bss:000000000021F63B                 db    ? ;
.bss:000000000021F63C                 db    ? ;
.bss:000000000021F63D                 db    ? ;
.bss:000000000021F63E                 db    ? ;
.bss:000000000021F63F                 db    ? ;
.bss:000000000021F640                 db    ? ;
.bss:000000000021F641                 db    ? ;
.bss:000000000021F642                 db    ? ;
.bss:000000000021F643                 db    ? ;
.bss:000000000021F644                 db    ? ;
.bss:000000000021F645                 db    ? ;
.bss:000000000021F646                 db    ? ;
.bss:000000000021F647                 db    ? ;
.bss:000000000021F648                 db    ? ;
.bss:000000000021F649                 db    ? ;
.bss:000000000021F64A                 db    ? ;
.bss:000000000021F64B                 db    ? ;
.bss:000000000021F64C                 db    ? ;
.bss:000000000021F64D                 db    ? ;
.bss:000000000021F64E                 db    ? ;
.bss:000000000021F64F                 db    ? ;
.bss:000000000021F650                 db    ? ;
.bss:000000000021F651                 db    ? ;
.bss:000000000021F652                 db    ? ;
.bss:000000000021F653                 db    ? ;
.bss:000000000021F654                 db    ? ;
.bss:000000000021F655                 db    ? ;
.bss:000000000021F656                 db    ? ;
.bss:000000000021F657                 db    ? ;
.bss:000000000021F658                 db    ? ;
.bss:000000000021F659                 db    ? ;
.bss:000000000021F65A                 db    ? ;
.bss:000000000021F65B                 db    ? ;
.bss:000000000021F65C                 db    ? ;
.bss:000000000021F65D                 db    ? ;
.bss:000000000021F65E                 db    ? ;
.bss:000000000021F65F                 db    ? ;
.bss:000000000021F660                 db    ? ;
.bss:000000000021F661                 db    ? ;
.bss:000000000021F662                 db    ? ;
.bss:000000000021F663                 db    ? ;
.bss:000000000021F664                 db    ? ;
.bss:000000000021F665                 db    ? ;
.bss:000000000021F666                 db    ? ;
.bss:000000000021F667                 db    ? ;
.bss:000000000021F668                 db    ? ;
.bss:000000000021F669                 db    ? ;
.bss:000000000021F66A                 db    ? ;
.bss:000000000021F66B                 db    ? ;
.bss:000000000021F66C                 db    ? ;
.bss:000000000021F66D                 db    ? ;
.bss:000000000021F66E                 db    ? ;
.bss:000000000021F66F                 db    ? ;
.bss:000000000021F670                 db    ? ;
.bss:000000000021F671                 db    ? ;
.bss:000000000021F672                 db    ? ;
.bss:000000000021F673                 db    ? ;
.bss:000000000021F674                 db    ? ;
.bss:000000000021F675                 db    ? ;
.bss:000000000021F676                 db    ? ;
.bss:000000000021F677                 db    ? ;
.bss:000000000021F678                 db    ? ;
.bss:000000000021F679                 db    ? ;
.bss:000000000021F67A                 db    ? ;
.bss:000000000021F67B                 db    ? ;
.bss:000000000021F67C                 db    ? ;
.bss:000000000021F67D                 db    ? ;
.bss:000000000021F67E                 db    ? ;
.bss:000000000021F67F                 db    ? ;
.bss:000000000021F680                 db    ? ;
.bss:000000000021F681                 db    ? ;
.bss:000000000021F682                 db    ? ;
.bss:000000000021F683                 db    ? ;
.bss:000000000021F684                 db    ? ;
.bss:000000000021F685                 db    ? ;
.bss:000000000021F686                 db    ? ;
.bss:000000000021F687                 db    ? ;
.bss:000000000021F688                 db    ? ;
.bss:000000000021F689                 db    ? ;
.bss:000000000021F68A                 db    ? ;
.bss:000000000021F68B                 db    ? ;
.bss:000000000021F68C                 db    ? ;
.bss:000000000021F68D                 db    ? ;
.bss:000000000021F68E                 db    ? ;
.bss:000000000021F68F                 db    ? ;
.bss:000000000021F690                 db    ? ;
.bss:000000000021F691                 db    ? ;
.bss:000000000021F692                 db    ? ;
.bss:000000000021F693                 db    ? ;
.bss:000000000021F694                 db    ? ;
.bss:000000000021F695                 db    ? ;
.bss:000000000021F696                 db    ? ;
.bss:000000000021F697                 db    ? ;
.bss:000000000021F698                 db    ? ;
.bss:000000000021F699                 db    ? ;
.bss:000000000021F69A                 db    ? ;
.bss:000000000021F69B                 db    ? ;
.bss:000000000021F69C                 db    ? ;
.bss:000000000021F69D                 db    ? ;
.bss:000000000021F69E                 db    ? ;
.bss:000000000021F69F                 db    ? ;
.bss:000000000021F6A0                 db    ? ;
.bss:000000000021F6A1                 db    ? ;
.bss:000000000021F6A2                 db    ? ;
.bss:000000000021F6A3                 db    ? ;
.bss:000000000021F6A4                 db    ? ;
.bss:000000000021F6A5                 db    ? ;
.bss:000000000021F6A6                 db    ? ;
.bss:000000000021F6A7                 db    ? ;
.bss:000000000021F6A8                 db    ? ;
.bss:000000000021F6A9                 db    ? ;
.bss:000000000021F6AA                 db    ? ;
.bss:000000000021F6AB                 db    ? ;
.bss:000000000021F6AC                 db    ? ;
.bss:000000000021F6AD                 db    ? ;
.bss:000000000021F6AE                 db    ? ;
.bss:000000000021F6AF                 db    ? ;
.bss:000000000021F6B0                 db    ? ;
.bss:000000000021F6B1                 db    ? ;
.bss:000000000021F6B2                 db    ? ;
.bss:000000000021F6B3                 db    ? ;
.bss:000000000021F6B4                 db    ? ;
.bss:000000000021F6B5                 db    ? ;
.bss:000000000021F6B6                 db    ? ;
.bss:000000000021F6B7                 db    ? ;
.bss:000000000021F6B8                 db    ? ;
.bss:000000000021F6B9                 db    ? ;
.bss:000000000021F6BA                 db    ? ;
.bss:000000000021F6BB                 db    ? ;
.bss:000000000021F6BC                 db    ? ;
.bss:000000000021F6BD                 db    ? ;
.bss:000000000021F6BE                 db    ? ;
.bss:000000000021F6BF                 db    ? ;
.bss:000000000021F6C0                 db    ? ;
.bss:000000000021F6C1                 db    ? ;
.bss:000000000021F6C2                 db    ? ;
.bss:000000000021F6C3                 db    ? ;
.bss:000000000021F6C4                 db    ? ;
.bss:000000000021F6C5                 db    ? ;
.bss:000000000021F6C6                 db    ? ;
.bss:000000000021F6C7                 db    ? ;
.bss:000000000021F6C8                 db    ? ;
.bss:000000000021F6C9                 db    ? ;
.bss:000000000021F6CA                 db    ? ;
.bss:000000000021F6CB                 db    ? ;
.bss:000000000021F6CC                 db    ? ;
.bss:000000000021F6CD                 db    ? ;
.bss:000000000021F6CE                 db    ? ;
.bss:000000000021F6CF                 db    ? ;
.bss:000000000021F6D0                 db    ? ;
.bss:000000000021F6D1                 db    ? ;
.bss:000000000021F6D2                 db    ? ;
.bss:000000000021F6D3                 db    ? ;
.bss:000000000021F6D4                 db    ? ;
.bss:000000000021F6D5                 db    ? ;
.bss:000000000021F6D6                 db    ? ;
.bss:000000000021F6D7                 db    ? ;
.bss:000000000021F6D8                 db    ? ;
.bss:000000000021F6D9                 db    ? ;
.bss:000000000021F6DA                 db    ? ;
.bss:000000000021F6DB                 db    ? ;
.bss:000000000021F6DC                 db    ? ;
.bss:000000000021F6DD                 db    ? ;
.bss:000000000021F6DE                 db    ? ;
.bss:000000000021F6DF                 db    ? ;
.bss:000000000021F6E0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000021F6E0                                         ; get_quoting_style↑o ...
.bss:000000000021F6F0 xmmword_21F6F0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000021F6F0                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000021F700 xmmword_21F700  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000021F700                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000021F710 qword_21F710    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000021F710                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000021F718 new_dst_res_5308 dq ?                   ; DATA XREF: utimecmpat:loc_10A39↑r
.bss:000000000021F718                                         ; utimecmpat+E4↑r ...
.bss:000000000021F720 ht_5307         dq ?                    ; DATA XREF: utimecmpat+86↑r
.bss:000000000021F720                                         ; utimecmpat:loc_10B78↑r ...
.bss:000000000021F728 lutimensat_works_really dd ?            ; DATA XREF: fdutimens+B5↑w
.bss:000000000021F728                                         ; lutimens+56↑r ...
.bss:000000000021F72C utimensat_works_really dd ?             ; DATA XREF: fdutimens:loc_1134A↑r
.bss:000000000021F72C                                         ; fdutimens+AB↑w ...
.bss:000000000021F730 can_write_3065  db ?                    ; DATA XREF: can_write_any_file+9↑r
.bss:000000000021F730                                         ; can_write_any_file+2D↑w
.bss:000000000021F731 initialized_3064 db ?                   ; DATA XREF: can_write_any_file↑r
.bss:000000000021F731                                         ; can_write_any_file+23↑w
.bss:000000000021F732                 align 4
.bss:000000000021F734 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000021F734                                         ; rpl_fcntl:loc_1405F↑w ...
.bss:000000000021F734 _bss            ends
.bss:000000000021F734
.prgend:000000000021F738 ; ===========================================================================
.prgend:000000000021F738
.prgend:000000000021F738 ; Segment type: Zero-length
.prgend:000000000021F738 _prgend         segment byte public '' use64
.prgend:000000000021F738 _end            label byte
.prgend:000000000021F738 _prgend         ends
.prgend:000000000021F738
extern:000000000021F740 ; ===========================================================================
extern:000000000021F740
extern:000000000021F740 ; Segment type: Externs
extern:000000000021F740 ; extern
extern:000000000021F740 ; void endgrent(void)
extern:000000000021F740                 extrn endgrent:near     ; CODE XREF: _endgrent↑j
extern:000000000021F740                                         ; DATA XREF: .got:endgrent_ptr↑o
extern:000000000021F748 ; char *getenv(const char *name)
extern:000000000021F748                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:000000000021F748                                         ; DATA XREF: .got:getenv_ptr↑o
extern:000000000021F750                 extrn __snprintf_chk:near
extern:000000000021F750                                         ; CODE XREF: ___snprintf_chk↑j
extern:000000000021F750                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:000000000021F758 ; int raise(int sig)
extern:000000000021F758                 extrn raise:near        ; CODE XREF: _raise↑j
extern:000000000021F758                                         ; DATA XREF: .got:raise_ptr↑o
extern:000000000021F760 ; void free(void *ptr)
extern:000000000021F760                 extrn __imp_free:near   ; CODE XREF: free↑j
extern:000000000021F760                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000021F768 ; int utimensat(int fd, const char *path, const struct timespec times[2], int flags)
extern:000000000021F768                 extrn utimensat:near    ; CODE XREF: _utimensat↑j
extern:000000000021F768                                         ; DATA XREF: .got:utimensat_ptr↑o
extern:000000000021F770 ; void __noreturn abort(void)
extern:000000000021F770                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000021F770                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000021F778 ; int *_errno_location(void)
extern:000000000021F778                 extrn __errno_location:near
extern:000000000021F778                                         ; CODE XREF: ___errno_location↑j
extern:000000000021F778                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000021F780 ; int unlink(const char *name)
extern:000000000021F780                 extrn unlink:near       ; CODE XREF: _unlink↑j
extern:000000000021F780                                         ; DATA XREF: .got:unlink_ptr↑o
extern:000000000021F788 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000021F788                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000021F788                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000021F790 ; void __noreturn exit(int status)
extern:000000000021F790                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000021F790                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000021F798 ; char *strcpy(char *dest, const char *src)
extern:000000000021F798                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:000000000021F798                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:000000000021F7A0 ; size_t _fpending(FILE *fp)
extern:000000000021F7A0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000021F7A0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000021F7A8                 extrn __read_chk:near   ; CODE XREF: ___read_chk↑j
extern:000000000021F7A8                                         ; DATA XREF: .got:__read_chk_ptr↑o
extern:000000000021F7B0 ; int mkdir(const char *path, __mode_t mode)
extern:000000000021F7B0                 extrn mkdir:near        ; CODE XREF: _mkdir↑j
extern:000000000021F7B0                                         ; DATA XREF: .got:mkdir_ptr↑o
extern:000000000021F7B8 ; int unlinkat(int fd, const char *name, int flag)
extern:000000000021F7B8                 extrn unlinkat:near     ; CODE XREF: _unlinkat↑j
extern:000000000021F7B8                                         ; DATA XREF: .got:unlinkat_ptr↑o
extern:000000000021F7C0 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
extern:000000000021F7C0                 extrn qsort:near        ; CODE XREF: _qsort↑j
extern:000000000021F7C0                                         ; DATA XREF: .got:qsort_ptr↑o
extern:000000000021F7C8 ; ssize_t readlink(const char *path, char *buf, size_t len)
extern:000000000021F7C8                 extrn readlink:near     ; CODE XREF: _readlink↑j
extern:000000000021F7C8                                         ; DATA XREF: .got:readlink_ptr↑o
extern:000000000021F7D0 ; int fcntl(int fd, int cmd, ...)
extern:000000000021F7D0                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000021F7D0                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000021F7D8 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
extern:000000000021F7D8                 extrn clock_gettime:near
extern:000000000021F7D8                                         ; CODE XREF: _clock_gettime↑j
extern:000000000021F7D8                                         ; DATA XREF: .got:clock_gettime_ptr↑o
extern:000000000021F7E0 ; ssize_t write(int fd, const void *buf, size_t n)
extern:000000000021F7E0                 extrn write:near        ; CODE XREF: _write↑j
extern:000000000021F7E0                                         ; DATA XREF: .got:write_ptr↑o
extern:000000000021F7E8 ; __pid_t getpid(void)
extern:000000000021F7E8                 extrn getpid:near       ; CODE XREF: _getpid↑j
extern:000000000021F7E8                                         ; DATA XREF: .got:getpid_ptr↑o
extern:000000000021F7F0 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000021F7F0                 extrn fread_unlocked:near
extern:000000000021F7F0                                         ; CODE XREF: _fread_unlocked↑j
extern:000000000021F7F0                                         ; DATA XREF: .got:fread_unlocked_ptr↑o
extern:000000000021F7F8 ; char *textdomain(const char *domainname)
extern:000000000021F7F8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000021F7F8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000021F800 ; __int64 pathconf(const char *path, int name)
extern:000000000021F800                 extrn pathconf:near     ; CODE XREF: _pathconf↑j
extern:000000000021F800                                         ; DATA XREF: .got:pathconf_ptr↑o
extern:000000000021F808                 extrn __open_2:near     ; CODE XREF: ___open_2↑j
extern:000000000021F808                                         ; DATA XREF: .got:__open_2_ptr↑o
extern:000000000021F810 ; int fclose(FILE *stream)
extern:000000000021F810                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000021F810                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000021F818 ; DIR *opendir(const char *name)
extern:000000000021F818                 extrn opendir:near      ; CODE XREF: _opendir↑j
extern:000000000021F818                                         ; DATA XREF: .got:opendir_ptr↑o
extern:000000000021F820 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000021F820                 extrn bindtextdomain:near
extern:000000000021F820                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000021F820                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000021F828 ; char *stpcpy(char *dest, const char *src)
extern:000000000021F828                 extrn stpcpy:near       ; CODE XREF: _stpcpy↑j
extern:000000000021F828                                         ; DATA XREF: .got:stpcpy_ptr↑o
extern:000000000021F830 ; int rmdir(const char *path)
extern:000000000021F830                 extrn rmdir:near        ; CODE XREF: _rmdir↑j
extern:000000000021F830                                         ; DATA XREF: .got:rmdir_ptr↑o
extern:000000000021F838 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000021F838                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000021F838                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000021F840 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000021F840                 extrn __ctype_get_mb_cur_max:near
extern:000000000021F840                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000021F840                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000021F848 ; size_t strlen(const char *s)
extern:000000000021F848                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000021F848                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000021F850 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000021F850                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:000000000021F850                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:000000000021F858 ; int openat(int fd, const char *file, int oflag, ...)
extern:000000000021F858                 extrn openat:near       ; CODE XREF: _openat↑j
extern:000000000021F858                                         ; DATA XREF: .got:openat_ptr↑o
extern:000000000021F860 ; int chdir(const char *path)
extern:000000000021F860                 extrn chdir:near        ; CODE XREF: _chdir↑j
extern:000000000021F860                                         ; DATA XREF: .got:chdir_ptr↑o
extern:000000000021F868                 extrn __stack_chk_fail:near
extern:000000000021F868                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000021F868                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000021F870 ; __uid_t getuid(void)
extern:000000000021F870                 extrn getuid:near       ; CODE XREF: _getuid↑j
extern:000000000021F870                                         ; DATA XREF: .got:getuid_ptr↑o
extern:000000000021F878 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000021F878                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000021F878                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000021F880 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000021F880                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000021F880                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000021F888 ; char *strchr(const char *s, int c)
extern:000000000021F888                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000021F888                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000021F890 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:000000000021F890                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:000000000021F890                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:000000000021F898 ; int _overflow(_IO_FILE *, int)
extern:000000000021F898                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000021F898                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000021F8A0 ; char *strrchr(const char *s, int c)
extern:000000000021F8A0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000021F8A0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000021F8A8 ; int ftruncate(int fd, __off_t length)
extern:000000000021F8A8                 extrn ftruncate:near    ; CODE XREF: _ftruncate↑j
extern:000000000021F8A8                                         ; DATA XREF: .got:ftruncate_ptr↑o
extern:000000000021F8B0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000021F8B0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000021F8B0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000021F8B8 ; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
extern:000000000021F8B8                 extrn gettimeofday:near ; CODE XREF: _gettimeofday↑j
extern:000000000021F8B8                                         ; DATA XREF: .got:gettimeofday_ptr↑o
extern:000000000021F8C0 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000021F8C0                 extrn __assert_fail:near
extern:000000000021F8C0                                         ; CODE XREF: ___assert_fail↑j
extern:000000000021F8C0                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000021F8C8 ; void *memset(void *s, int c, size_t n)
extern:000000000021F8C8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000021F8C8                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000021F8D0 ; __uid_t geteuid(void)
extern:000000000021F8D0                 extrn geteuid:near      ; CODE XREF: _geteuid↑j
extern:000000000021F8D0                                         ; DATA XREF: .got:geteuid_ptr↑o
extern:000000000021F8D8 ; int ioctl(int fd, unsigned __int64 request, ...)
extern:000000000021F8D8                 extrn ioctl:near        ; CODE XREF: _ioctl↑j
extern:000000000021F8D8                                         ; DATA XREF: .got:ioctl_ptr↑o
extern:000000000021F8E0 ; char *canonicalize_file_name(const char *name)
extern:000000000021F8E0                 extrn canonicalize_file_name:near
extern:000000000021F8E0                                         ; CODE XREF: _canonicalize_file_name↑j
extern:000000000021F8E0                                         ; DATA XREF: .got:canonicalize_file_name_ptr↑o
extern:000000000021F8E8 ; int close(int fd)
extern:000000000021F8E8                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000021F8E8                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000021F8F0 ; void rewinddir(DIR *dirp)
extern:000000000021F8F0                 extrn rewinddir:near    ; CODE XREF: _rewinddir↑j
extern:000000000021F8F0                                         ; DATA XREF: .got:rewinddir_ptr↑o
extern:000000000021F8F8 ; size_t strspn(const char *s, const char *accept)
extern:000000000021F8F8                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:000000000021F8F8                                         ; DATA XREF: .got:strspn_ptr↑o
extern:000000000021F900 ; int closedir(DIR *dirp)
extern:000000000021F900                 extrn closedir:near     ; CODE XREF: _closedir↑j
extern:000000000021F900                                         ; DATA XREF: .got:closedir_ptr↑o
extern:000000000021F908 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:000000000021F908                 extrn posix_fadvise:near
extern:000000000021F908                                         ; CODE XREF: _posix_fadvise↑j
extern:000000000021F908                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:000000000021F910 ; ssize_t read(int fd, void *buf, size_t nbytes)
extern:000000000021F910                 extrn read:near         ; CODE XREF: _read↑j
extern:000000000021F910                                         ; DATA XREF: .got:read_ptr↑o
extern:000000000021F918 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000021F918                 extrn __libc_start_main:near
extern:000000000021F918                                         ; CODE XREF: start+24↑p
extern:000000000021F918                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000021F920 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000021F920                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000021F920                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000021F928 ; int fallocate(int fd, int mode, __off_t offset, __off_t len)
extern:000000000021F928                 extrn fallocate:near    ; CODE XREF: _fallocate↑j
extern:000000000021F928                                         ; DATA XREF: .got:fallocate_ptr↑o
extern:000000000021F930 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000021F930                 extrn fputs_unlocked:near
extern:000000000021F930                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000021F930                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000021F938 ; int utimes(const char *file, const struct timeval tvp[2])
extern:000000000021F938                 extrn utimes:near       ; CODE XREF: _utimes↑j
extern:000000000021F938                                         ; DATA XREF: .got:utimes_ptr↑o
extern:000000000021F940 ; void *calloc(size_t nmemb, size_t size)
extern:000000000021F940                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000021F940                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000021F948 ; __ssize_t _getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:000000000021F948                 extrn __getdelim:near   ; CODE XREF: ___getdelim↑j
extern:000000000021F948                                         ; DATA XREF: .got:__getdelim_ptr↑o
extern:000000000021F950 ; int strcmp(const char *s1, const char *s2)
extern:000000000021F950                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000021F950                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000021F958 ; __sighandler_t signal(int sig, __sighandler_t handler)
extern:000000000021F958                 extrn signal:near       ; CODE XREF: _signal↑j
extern:000000000021F958                                         ; DATA XREF: .got:signal_ptr↑o
extern:000000000021F960 ; int dirfd(DIR *dirp)
extern:000000000021F960                 extrn dirfd:near        ; CODE XREF: _dirfd↑j
extern:000000000021F960                                         ; DATA XREF: .got:dirfd_ptr↑o
extern:000000000021F968 ; struct passwd *getpwnam(const char *name)
extern:000000000021F968                 extrn getpwnam:near     ; CODE XREF: _getpwnam↑j
extern:000000000021F968                                         ; DATA XREF: .got:getpwnam_ptr↑o
extern:000000000021F970 ; __int64 fpathconf(int fd, int name)
extern:000000000021F970                 extrn fpathconf:near    ; CODE XREF: _fpathconf↑j
extern:000000000021F970                                         ; DATA XREF: .got:fpathconf_ptr↑o
extern:000000000021F978 ; int rpmatch(const char *response)
extern:000000000021F978                 extrn rpmatch:near      ; CODE XREF: _rpmatch↑j
extern:000000000021F978                                         ; DATA XREF: .got:rpmatch_ptr↑o
extern:000000000021F980 ; __int64 syscall(__int64 sysno, ...)
extern:000000000021F980                 extrn syscall:near      ; CODE XREF: _syscall↑j
extern:000000000021F980                                         ; DATA XREF: .got:syscall_ptr↑o
extern:000000000021F988 ; int mkfifo(const char *path, __mode_t mode)
extern:000000000021F988                 extrn mkfifo:near       ; CODE XREF: _mkfifo↑j
extern:000000000021F988                                         ; DATA XREF: .got:mkfifo_ptr↑o
extern:000000000021F990 ; __mode_t umask(__mode_t mask)
extern:000000000021F990                 extrn umask:near        ; CODE XREF: _umask↑j
extern:000000000021F990                                         ; DATA XREF: .got:umask_ptr↑o
extern:000000000021F998 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000021F998                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000021F998                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000021F9A0 ; struct group *getgrnam(const char *name)
extern:000000000021F9A0                 extrn getgrnam:near     ; CODE XREF: _getgrnam↑j
extern:000000000021F9A0                                         ; DATA XREF: .got:getgrnam_ptr↑o
extern:000000000021F9A8 ; int _xmknod(int ver, const char *path, __mode_t mode, __dev_t *dev)
extern:000000000021F9A8                 extrn __xmknod:near     ; CODE XREF: ___xmknod↑j
extern:000000000021F9A8                                         ; DATA XREF: .got:__xmknod_ptr↑o
extern:000000000021F9B0 ; int fileno(FILE *stream)
extern:000000000021F9B0                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000021F9B0                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000021F9B8 ; __gid_t getgid(void)
extern:000000000021F9B8                 extrn getgid:near       ; CODE XREF: _getgid↑j
extern:000000000021F9B8                                         ; DATA XREF: .got:getgid_ptr↑o
extern:000000000021F9C0 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000021F9C0                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000021F9C0                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000021F9C8 ; struct dirent *readdir(DIR *dirp)
extern:000000000021F9C8                 extrn readdir:near      ; CODE XREF: _readdir↑j
extern:000000000021F9C8                                         ; DATA XREF: .got:readdir_ptr↑o
extern:000000000021F9D0 ; void *malloc(size_t size)
extern:000000000021F9D0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000021F9D0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000021F9D8 ; int fflush(FILE *stream)
extern:000000000021F9D8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000021F9D8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000021F9E0 ; char *nl_langinfo(nl_item item)
extern:000000000021F9E0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000021F9E0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000021F9E8 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:000000000021F9E8                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:000000000021F9E8                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:000000000021F9F0 ; void endpwent(void)
extern:000000000021F9F0                 extrn endpwent:near     ; CODE XREF: _endpwent↑j
extern:000000000021F9F0                                         ; DATA XREF: .got:endpwent_ptr↑o
extern:000000000021F9F8 ; int lchown(const char *file, __uid_t owner, __gid_t group)
extern:000000000021F9F8                 extrn lchown:near       ; CODE XREF: _lchown↑j
extern:000000000021F9F8                                         ; DATA XREF: .got:lchown_ptr↑o
extern:000000000021FA00 ; int _freading(FILE *fp)
extern:000000000021FA00                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000021FA00                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000021FA08 ; int fchdir(int fd)
extern:000000000021FA08                 extrn fchdir:near       ; CODE XREF: _fchdir↑j
extern:000000000021FA08                                         ; DATA XREF: .got:fchdir_ptr↑o
extern:000000000021FA10 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000021FA10                 extrn fwrite_unlocked:near
extern:000000000021FA10                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000021FA10                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000021FA18 ; int chown(const char *file, __uid_t owner, __gid_t group)
extern:000000000021FA18                 extrn chown:near        ; CODE XREF: _chown↑j
extern:000000000021FA18                                         ; DATA XREF: .got:chown_ptr↑o
extern:000000000021FA20 ; void *realloc(void *ptr, size_t size)
extern:000000000021FA20                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000021FA20                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000021FA28 ; char *stpncpy(char *dest, const char *src, size_t n)
extern:000000000021FA28                 extrn stpncpy:near      ; CODE XREF: _stpncpy↑j
extern:000000000021FA28                                         ; DATA XREF: .got:stpncpy_ptr↑o
extern:000000000021FA30 ; FILE *fdopen(int fd, const char *modes)
extern:000000000021FA30                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:000000000021FA30                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:000000000021FA38 ; int linkat(int fromfd, const char *from, int tofd, const char *to, int flags)
extern:000000000021FA38                 extrn linkat:near       ; CODE XREF: _linkat↑j
extern:000000000021FA38                                         ; DATA XREF: .got:linkat_ptr↑o
extern:000000000021FA40 ; char *setlocale(int category, const char *locale)
extern:000000000021FA40                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000021FA40                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000021FA48                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000021FA48                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000021FA50 ; int fchmod(int fd, __mode_t mode)
extern:000000000021FA50                 extrn fchmod:near       ; CODE XREF: _fchmod↑j
extern:000000000021FA50                                         ; DATA XREF: .got:fchmod_ptr↑o
extern:000000000021FA58 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
extern:000000000021FA58                 extrn setvbuf:near      ; CODE XREF: _setvbuf↑j
extern:000000000021FA58                                         ; DATA XREF: .got:setvbuf_ptr↑o
extern:000000000021FA60 ; int chmod(const char *file, __mode_t mode)
extern:000000000021FA60                 extrn chmod:near        ; CODE XREF: _chmod↑j
extern:000000000021FA60                                         ; DATA XREF: .got:chmod_ptr↑o
extern:000000000021FA68 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:000000000021FA68                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:000000000021FA68                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:000000000021FA70 ; void error(int status, int errnum, const char *format, ...)
extern:000000000021FA70                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000021FA70                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000021FA78 ; __pid_t waitpid(__pid_t pid, int *stat_loc, int options)
extern:000000000021FA78                 extrn waitpid:near      ; CODE XREF: _waitpid↑j
extern:000000000021FA78                                         ; DATA XREF: .got:waitpid_ptr↑o
extern:000000000021FA80                 extrn __explicit_bzero_chk:near
extern:000000000021FA80                                         ; CODE XREF: ___explicit_bzero_chk↑j
extern:000000000021FA80                                         ; DATA XREF: .got:__explicit_bzero_chk_ptr↑o
extern:000000000021FA88 ; int open(const char *file, int oflag, ...)
extern:000000000021FA88                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000021FA88                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000021FA90 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000021FA90                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000021FA90                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000021FA98 ; int fchown(int fd, __uid_t owner, __gid_t group)
extern:000000000021FA98                 extrn fchown:near       ; CODE XREF: _fchown↑j
extern:000000000021FA98                                         ; DATA XREF: .got:fchown_ptr↑o
extern:000000000021FAA0 ; FILE *fopen(const char *filename, const char *modes)
extern:000000000021FAA0                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:000000000021FAA0                                         ; DATA XREF: .got:fopen_ptr↑o
extern:000000000021FAA8 ; int rename(const char *old, const char *new)
extern:000000000021FAA8                 extrn rename:near       ; CODE XREF: _rename↑j
extern:000000000021FAA8                                         ; DATA XREF: .got:rename_ptr↑o
extern:000000000021FAB0 ; DIR *fdopendir(int fd)
extern:000000000021FAB0                 extrn fdopendir:near    ; CODE XREF: _fdopendir↑j
extern:000000000021FAB0                                         ; DATA XREF: .got:fdopendir_ptr↑o
extern:000000000021FAB8 ; int futimens(int fd, const struct timespec times[2])
extern:000000000021FAB8                 extrn futimens:near     ; CODE XREF: _futimens↑j
extern:000000000021FAB8                                         ; DATA XREF: .got:futimens_ptr↑o
extern:000000000021FAC0 ; int euidaccess(const char *name, int type)
extern:000000000021FAC0                 extrn euidaccess:near   ; CODE XREF: _euidaccess↑j
extern:000000000021FAC0                                         ; DATA XREF: .got:euidaccess_ptr↑o
extern:000000000021FAC8 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
extern:000000000021FAC8                 extrn strtoul:near      ; CODE XREF: _strtoul↑j
extern:000000000021FAC8                                         ; DATA XREF: .got:strtoul_ptr↑o
extern:000000000021FAD0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000021FAD0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000021FAD0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000021FAD8 ; int renameat(int oldfd, const char *old, int newfd, const char *new)
extern:000000000021FAD8                 extrn renameat:near     ; CODE XREF: _renameat↑j
extern:000000000021FAD8                                         ; DATA XREF: .got:renameat_ptr↑o
extern:000000000021FAE0 ; int getpagesize(void)
extern:000000000021FAE0                 extrn getpagesize:near  ; CODE XREF: _getpagesize↑j
extern:000000000021FAE0                                         ; DATA XREF: .got:getpagesize_ptr↑o
extern:000000000021FAE8 ; __pid_t getppid(void)
extern:000000000021FAE8                 extrn getppid:near      ; CODE XREF: _getppid↑j
extern:000000000021FAE8                                         ; DATA XREF: .got:getppid_ptr↑o
extern:000000000021FAF0 ; void __noreturn exit(int status)
extern:000000000021FAF0                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000021FAF0                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000021FAF8 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000021FAF8                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000021FAF8                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000021FB00                 extrn __fprintf_chk:near
extern:000000000021FB00                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000021FB00                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000021FB08 ; int mbsinit(const mbstate_t *ps)
extern:000000000021FB08                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000021FB08                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000021FB10 ; int symlinkat(const char *from, int tofd, const char *to)
extern:000000000021FB10                 extrn symlinkat:near    ; CODE XREF: _symlinkat↑j
extern:000000000021FB10                                         ; DATA XREF: .got:symlinkat_ptr↑o
extern:000000000021FB18 ; int execlp(const char *file, const char *arg, ...)
extern:000000000021FB18                 extrn execlp:near       ; CODE XREF: _execlp↑j
extern:000000000021FB18                                         ; DATA XREF: .got:execlp_ptr↑o
extern:000000000021FB20 ; int iswprint(wint_t wc)
extern:000000000021FB20                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000021FB20                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000021FB28 ; int __fastcall __cxa_finalize(void *)
extern:000000000021FB28                 extrn __imp___cxa_finalize:near ; weak
extern:000000000021FB28                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000021FB28                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000021FB30 ; __pid_t fork(void)
extern:000000000021FB30                 extrn fork:near         ; CODE XREF: _fork↑j
extern:000000000021FB30                                         ; DATA XREF: .got:fork_ptr↑o
extern:000000000021FB38 ; int futimesat(int fd, const char *file, const struct timeval tvp[2])
extern:000000000021FB38                 extrn futimesat:near    ; CODE XREF: _futimesat↑j
extern:000000000021FB38                                         ; DATA XREF: .got:futimesat_ptr↑o
extern:000000000021FB40 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000021FB40                 extrn __ctype_b_loc:near
extern:000000000021FB40                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000021FB40                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000021FB48                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000021FB48                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000021FB50                 extrn __gmon_start__:near ; weak
extern:000000000021FB50                                         ; CODE XREF: _init_proc+10↑p
extern:000000000021FB50                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000021FB58                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000021FB58                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000021FB58
extern:000000000021FB58
extern:000000000021FB58                 end start
