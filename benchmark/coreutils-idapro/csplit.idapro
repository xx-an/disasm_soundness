LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 23B85330B50346B6E13B3D6E3168A2E6491955A33A72415BD9BC62FA6F1EC56D
LOAD:0000000000000000 ; Input MD5    : 0F548EEFC54DCA5644A40FA44358F190
LOAD:0000000000000000 ; Input CRC32  : 9D30BFA2
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/csplit
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'csplit.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fd-reopen.c'
LOAD:0000000000000000 ; Source File : 'fopen-safer.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'safe-read.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xdectoimax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoimax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'regex.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 86490h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 1AA00h               ; Size in file image
LOAD:00000000000000D8                 dq 1AA00h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 1B9B0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 21B9B0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 6F0h                 ; Size in file image
LOAD:0000000000000110                 dq 9D8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 1BB78h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 21BB78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 17EA0h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 17EA0h               ; Physical address
LOAD:00000000000001B0                 dq 5ECh                 ; Size in file image
LOAD:00000000000001B8                 dq 5ECh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 1B9B0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 21B9B0h              ; Physical address
LOAD:0000000000000220                 dq 650h                 ; Size in file image
LOAD:0000000000000228                 dq 650h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 8Fh, 19h, 71h, 81h, 4Ah, 2, 7Dh, 98h, 12h, 34h, 0B0h ; Desc
LOAD:0000000000000284                 db 63h, 99h, 5Ch, 2Fh, 0A9h, 0C2h, 43h, 58h, 32h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 51h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 51h, 52h, 57h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aCtypeToupperLo - offset byte_B38, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aSigprocmask - offset byte_B38, 12h, 0, 0, \ ; "sigprocmask"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aSnprintfChk - offset byte_B38, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aRaise - offset byte_B38, 12h, 0, 0, offset dword_0,\ ; "raise"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aFree - offset byte_B38, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000358                            0>
LOAD:0000000000000370                 Elf64_Sym <offset aAbort - offset byte_B38, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aErrnoLocation - offset byte_B38, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aUnlink - offset byte_B38, 12h, 0, 0, \ ; "unlink"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aStrncmp - offset byte_B38, 12h, 0, 0, \ ; "strncmp"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aItmDeregistert - offset byte_B38, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aExit - offset byte_B38, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003E8                            0>
LOAD:0000000000000400                 Elf64_Sym <offset aStrcpy - offset byte_B38, 12h, 0, 0, \ ; "strcpy"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aFpending - offset byte_B38, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aSigaction - offset byte_B38, 12h, 0, 0, \ ; "sigaction"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aFcntl - offset byte_B38, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000448                            0>
LOAD:0000000000000460                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_B38, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStrtolInternal - offset byte_B38, 12h, 0, 0, \ ; "__strtol_internal"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aIswctype - offset byte_B38, 12h, 0, 0, \ ; "iswctype"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aFclose - offset byte_B38, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aBindtextdomain - offset byte_B38, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aDcgettext - offset byte_B38, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_B38, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStrlen - offset byte_B38, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStackChkFail - offset byte_B38, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aGetoptLong - offset byte_B38, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMbrtowc - offset byte_B38, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aDup2 - offset byte_B38, 12h, 0, 0, offset dword_0, \ ; "dup2"
LOAD:0000000000000568                            0>
LOAD:0000000000000580                 Elf64_Sym <offset aStrchr - offset byte_B38, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aStrrchr - offset byte_B38, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aLseek - offset byte_B38, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000005B0                            0>
LOAD:00000000000005C8                 Elf64_Sym <offset aAssertFail - offset byte_B38, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aStrtoulInterna - offset byte_B38, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aMemset - offset byte_B38, 12h, 0, 0, \ ; "memset"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFclose+1 - offset byte_B38, 12h, 0, 0, \ ; "close"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFputc - offset byte_B38, 12h, 0, 0, offset dword_0,\ ; "fputc"
LOAD:0000000000000628                            0>
LOAD:0000000000000640                 Elf64_Sym <offset aMemchr - offset byte_B38, 12h, 0, 0, \ ; "memchr"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aRead - offset byte_B38, 12h, 0, 0, offset dword_0, \ ; "read"
LOAD:0000000000000658                            0>
LOAD:0000000000000670                 Elf64_Sym <offset aLibcStartMain - offset byte_B38, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aMemcmp - offset byte_B38, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aIswctype+2 - offset byte_B38, 12h, 0, 0, \ ; "wctype"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFputsUnlocked - offset byte_B38, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aCalloc - offset byte_B38, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aStrcmp - offset byte_B38, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aSignal - offset byte_B38, 12h, 0, 0, \ ; "signal"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aSigemptyset - offset byte_B38, 12h, 0, 0, \ ; "sigemptyset"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aGmonStart - offset byte_B38, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aMemcpy - offset byte_B38, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFileno - offset byte_B38, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aIswalnum - offset byte_B38, 12h, 0, 0, \ ; "iswalnum"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aMalloc - offset byte_B38, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aWcrtomb - offset byte_B38, 12h, 0, 0, \ ; "wcrtomb"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aFflush - offset byte_B38, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aNlLanginfo - offset byte_B38, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aFreading - offset byte_B38, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFwriteUnlocked - offset byte_B38, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aRealloc - offset byte_B38, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aFdopen - offset byte_B38, 12h, 0, 0, \ ; "fdopen"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aSetlocale - offset byte_B38, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aPrintfChk - offset byte_B38, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aBtowc - offset byte_B38, 12h, 0, 0, offset dword_0,\ ; "btowc"
LOAD:0000000000000880                            0>
LOAD:0000000000000898                 Elf64_Sym <offset aMemmove - offset byte_B38, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aError - offset byte_B38, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000008B0                            0>
LOAD:00000000000008C8                 Elf64_Sym <offset aFdopen+2 - offset byte_B38, 12h, 0, 0, \ ; "open"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aFseeko - offset byte_B38, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aFopen - offset byte_B38, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:00000000000008F8                            0>
LOAD:0000000000000910                 Elf64_Sym <offset aTowlower - offset byte_B38, 12h, 0, 0, \ ; "towlower"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aTowupper - offset byte_B38, 12h, 0, 0, \ ; "towupper"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aCxaAtexit - offset byte_B38, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aSigismember - offset byte_B38, 12h, 0, 0, \ ; "sigismember"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aExit+1 - offset byte_B38, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aFwrite - offset byte_B38, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aFprintfChk - offset byte_B38, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aItmRegistertmc - offset byte_B38, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aMbsinit - offset byte_B38, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aIswprint - offset byte_B38, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000009E8                            offset dword_0, 0>
LOAD:0000000000000A00                 Elf64_Sym <offset aCxaFinalize - offset byte_B38, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000A00                            offset dword_0, 0>
LOAD:0000000000000A18                 Elf64_Sym <offset aSigaddset - offset byte_B38, 12h, 0, 0, \ ; "sigaddset"
LOAD:0000000000000A18                            offset dword_0, 0>
LOAD:0000000000000A30                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_B38, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:0000000000000A30                            offset dword_0, 0>
LOAD:0000000000000A48                 Elf64_Sym <offset aCtypeBLoc - offset byte_B38, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000A48                            offset dword_0, 0>
LOAD:0000000000000A60                 Elf64_Sym <offset aSprintfChk - offset byte_B38, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000A60                            offset dword_0, 0>
LOAD:0000000000000A78                 Elf64_Sym <offset aStdout - offset byte_B38, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000A78                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000A90                 Elf64_Sym <offset aProgname - offset byte_B38, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000A90                            offset __bss_start, 8>
LOAD:0000000000000AA8                 Elf64_Sym <offset aProgramInvocat - offset byte_B38, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000AA8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000AC0                 Elf64_Sym <offset aPrognameFull - offset byte_B38, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000AC0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000AD8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_B38, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000AD8                            offset __bss_start, 8>
LOAD:0000000000000AF0                 Elf64_Sym <offset aStderr - offset byte_B38, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000AF0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000B08                 Elf64_Sym <offset aOptind - offset byte_B38, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000B08                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000B20                 Elf64_Sym <offset aOptarg - offset byte_B38, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000B20                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000B38 ; ELF String Table
LOAD:0000000000000B38 byte_B38        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B38                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000B39 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000FB8↓o
LOAD:0000000000000B43 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000B4A aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000B51 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B5E aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000B68 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000B70 aTowlower       db 'towlower',0         ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000B79 aFopen          db 'fopen',0            ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000B7F aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000B87 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000B08↑o
LOAD:0000000000000B8E aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000B96 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000BA0 aWcrtomb        db 'wcrtomb',0          ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000BA8 aError          db 'error',0            ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000BAE aSignal         db 'signal',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000BB5 aSigprocmask    db 'sigprocmask',0      ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000BC1 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000BD2 aUnlink         db 'unlink',0           ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000BD9 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000BE2 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000BEA aBtowc          db 'btowc',0            ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000BF0 aTowupper       db 'towupper',0         ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000BF9 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000BFF aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000BFF                                         ; LOAD:0000000000000970↑o
LOAD:0000000000000C05 aMemchr         db 'memchr',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000C0C aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000C0C                                         ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000000C24 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000C32 aIswalnum       db 'iswalnum',0         ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000C3B aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000C3B                                         ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000C52 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000C59 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000C60 aIswctype       db 'iswctype',0         ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000C60                                         ; LOAD:00000000000006A0↑o
LOAD:0000000000000C69 aSigemptyset    db 'sigemptyset',0      ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000C75 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000C7C aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000C8D aRead           db 'read',0             ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000C92 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000C99 aDup2           db 'dup2',0             ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000C9E aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000CAC aSigaddset      db 'sigaddset',0        ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000CB6 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000CBD aFputc          db 'fputc',0            ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000CC3 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000CC9 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000CD0 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000CD0                                         ; LOAD:0000000000000610↑o
LOAD:0000000000000CD7 aStrtolInternal db '__strtol_internal',0
LOAD:0000000000000CD7                                         ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000CE9 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000CF0 aRaise          db 'raise',0            ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000CF6 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000CFE aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000D0A aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000D18 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000B20↑o
LOAD:0000000000000D1F aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000D2A aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000AF0↑o
LOAD:0000000000000D31 aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000D40 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000D4C aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000D53 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000D5A aSigaction      db 'sigaction',0        ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000D64 aSigismember    db 'sigismember',0      ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000D70 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000D7B aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000D82 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000D82                                         ; DATA XREF: LOAD:0000000000000AD8↑o
LOAD:0000000000000DA0 aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000DA0                                         ; LOAD:00000000000008C8↑o
LOAD:0000000000000DA7 aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000DA7                                         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000DBB aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000000DBB                                         ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000DCF aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000DDE aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000DE4 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000DF2 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000DFA aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000DFA                                         ; LOAD:0000000000000460↑o
LOAD:0000000000000E09 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000E19 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000E20 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000E20                                         ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000E32 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000E39 aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000E39                                         ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000E4C aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000E5B aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000E60 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000E6B aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:0000000000000E7B aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000E88 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000FC8↓o
LOAD:0000000000000E93 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000FD8↓o
LOAD:0000000000000E9D aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000FE8↓o
LOAD:0000000000000EA9 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000FF8↓o
LOAD:0000000000000EB5 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000001008↓o
LOAD:0000000000000EBF aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000EBF                                         ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000EDB aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000EEA aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000EEA                                         ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000F04 ; ELF GNU Symbol Version Table
LOAD:0000000000000F04                 dw 0
LOAD:0000000000000F06                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:0000000000000F08                 dw 3                    ; sigprocmask@@GLIBC_2.2.5
LOAD:0000000000000F0A                 dw 4                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000F0C                 dw 3                    ; raise@@GLIBC_2.2.5
LOAD:0000000000000F0E                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000000F10                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000F12                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000F14                 dw 3                    ; unlink@@GLIBC_2.2.5
LOAD:0000000000000F16                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000F18                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000F1A                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000F1C                 dw 3                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000000F1E                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000F20                 dw 3                    ; sigaction@@GLIBC_2.2.5
LOAD:0000000000000F22                 dw 3                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000F24                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000F26                 dw 3                    ; __strtol_internal@@GLIBC_2.2.5
LOAD:0000000000000F28                 dw 3                    ; iswctype@@GLIBC_2.2.5
LOAD:0000000000000F2A                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000F2C                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000F2E                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000F30                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000F32                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000F34                 dw 5                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000F36                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000F38                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000F3A                 dw 3                    ; dup2@@GLIBC_2.2.5
LOAD:0000000000000F3C                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000F3E                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000F40                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000F42                 dw 3                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000F44                 dw 3                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000F46                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000F48                 dw 3                    ; close@@GLIBC_2.2.5
LOAD:0000000000000F4A                 dw 3                    ; fputc@@GLIBC_2.2.5
LOAD:0000000000000F4C                 dw 3                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000000F4E                 dw 3                    ; read@@GLIBC_2.2.5
LOAD:0000000000000F50                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000F52                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000F54                 dw 3                    ; wctype@@GLIBC_2.2.5
LOAD:0000000000000F56                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000F58                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000F5A                 dw 3                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000F5C                 dw 3                    ; signal@@GLIBC_2.2.5
LOAD:0000000000000F5E                 dw 3                    ; sigemptyset@@GLIBC_2.2.5
LOAD:0000000000000F60                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000F62                 dw 6                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000F64                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000F66                 dw 3                    ; iswalnum@@GLIBC_2.2.5
LOAD:0000000000000F68                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000F6A                 dw 3                    ; wcrtomb@@GLIBC_2.2.5
LOAD:0000000000000F6C                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000F6E                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000F70                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000F72                 dw 3                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000F74                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000F76                 dw 3                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000000F78                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000F7A                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000F7C                 dw 3                    ; btowc@@GLIBC_2.2.5
LOAD:0000000000000F7E                 dw 3                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000F80                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000000F82                 dw 3                    ; open@@GLIBC_2.2.5
LOAD:0000000000000F84                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000F86                 dw 3                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000F88                 dw 3                    ; towlower@@GLIBC_2.2.5
LOAD:0000000000000F8A                 dw 3                    ; towupper@@GLIBC_2.2.5
LOAD:0000000000000F8C                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000F8E                 dw 3                    ; sigismember@@GLIBC_2.2.5
LOAD:0000000000000F90                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000F92                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000F94                 dw 4                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000F96                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000F98                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000F9A                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000F9C                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000F9E                 dw 3                    ; sigaddset@@GLIBC_2.2.5
LOAD:0000000000000FA0                 dw 2                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:0000000000000FA2                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000FA4                 dw 4                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000FA6                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000FA8                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000FAA                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000FAC                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000FAE                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000FB0                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000FB2                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000FB4                 dw 3                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000FB6                 dw 0
LOAD:0000000000000FB8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000FB8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_B38, 10h, 0> ; "libc.so.6"
LOAD:0000000000000FC8                 Elf64_Vernaux <6969194h, 0, 6, offset aGlibc214 - offset byte_B38, \ ; "GLIBC_2.14"
LOAD:0000000000000FC8                                10h>
LOAD:0000000000000FD8                 Elf64_Vernaux <0D696914h, 0, 5, offset aGlibc24 - offset byte_B38, \ ; "GLIBC_2.4"
LOAD:0000000000000FD8                                10h>
LOAD:0000000000000FE8                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset byte_B38, \ ; "GLIBC_2.3.4"
LOAD:0000000000000FE8                                10h>
LOAD:0000000000000FF8                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_B38, \ ; "GLIBC_2.2.5"
LOAD:0000000000000FF8                                10h>
LOAD:0000000000001008                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_B38, 0> ; "GLIBC_2.3"
LOAD:0000000000001018 ; ELF RELA Relocation Table
LOAD:0000000000001018                 Elf64_Rela <21B9B0h, 8, 3090h> ; R_X86_64_RELATIVE +3090h
LOAD:0000000000001030                 Elf64_Rela <21B9B8h, 8, 3050h> ; R_X86_64_RELATIVE +3050h
LOAD:0000000000001048                 Elf64_Rela <21B9C0h, 8, 16189h> ; R_X86_64_RELATIVE +16189h
LOAD:0000000000001060                 Elf64_Rela <21B9E0h, 8, 16190h> ; R_X86_64_RELATIVE +16190h
LOAD:0000000000001078                 Elf64_Rela <21BA00h, 8, 16196h> ; R_X86_64_RELATIVE +16196h
LOAD:0000000000001090                 Elf64_Rela <21BA20h, 8, 1619Dh> ; R_X86_64_RELATIVE +1619Dh
LOAD:00000000000010A8                 Elf64_Rela <21BA40h, 8, 161A8h> ; R_X86_64_RELATIVE +161A8h
LOAD:00000000000010C0                 Elf64_Rela <21BA60h, 8, 161BAh> ; R_X86_64_RELATIVE +161BAh
LOAD:00000000000010D8                 Elf64_Rela <21BA80h, 8, 161C1h> ; R_X86_64_RELATIVE +161C1h
LOAD:00000000000010F0                 Elf64_Rela <21BAA0h, 8, 161CFh> ; R_X86_64_RELATIVE +161CFh
LOAD:0000000000001108                 Elf64_Rela <21BAC0h, 8, 161E0h> ; R_X86_64_RELATIVE +161E0h
LOAD:0000000000001120                 Elf64_Rela <21BAE0h, 8, 161E5h> ; R_X86_64_RELATIVE +161E5h
LOAD:0000000000001138                 Elf64_Rela <21BB20h, 8, 16BC1h> ; R_X86_64_RELATIVE +16BC1h
LOAD:0000000000001150                 Elf64_Rela <21BB28h, 8, 16BC9h> ; R_X86_64_RELATIVE +16BC9h
LOAD:0000000000001168                 Elf64_Rela <21BB30h, 8, 16BCFh> ; R_X86_64_RELATIVE +16BCFh
LOAD:0000000000001180                 Elf64_Rela <21BB38h, 8, 16BDCh> ; R_X86_64_RELATIVE +16BDCh
LOAD:0000000000001198                 Elf64_Rela <21BB40h, 8, 16BE9h> ; R_X86_64_RELATIVE +16BE9h
LOAD:00000000000011B0                 Elf64_Rela <21BB48h, 8, 16BFDh> ; R_X86_64_RELATIVE +16BFDh
LOAD:00000000000011C8                 Elf64_Rela <21BB50h, 8, 16BFFh> ; R_X86_64_RELATIVE +16BFFh
LOAD:00000000000011E0                 Elf64_Rela <21BB58h, 8, 16BE2h> ; R_X86_64_RELATIVE +16BE2h
LOAD:00000000000011F8                 Elf64_Rela <21BB60h, 8, 160D4h> ; R_X86_64_RELATIVE +160D4h
LOAD:0000000000001210                 Elf64_Rela <21BB68h, 8, 16C07h> ; R_X86_64_RELATIVE +16C07h
LOAD:0000000000001228                 Elf64_Rela <21C008h, 8, 21C008h> ; R_X86_64_RELATIVE +21C008h
LOAD:0000000000001240                 Elf64_Rela <21C018h, 8, 16B4Ch> ; R_X86_64_RELATIVE +16B4Ch
LOAD:0000000000001258                 Elf64_Rela <21C080h, 8, 21C090h> ; R_X86_64_RELATIVE +21C090h
LOAD:0000000000001270                 Elf64_Rela <21C098h, 8, 21C240h> ; R_X86_64_RELATIVE +21C240h
LOAD:0000000000001288                 Elf64_Rela <21BFD8h, 0A00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000012A0                 Elf64_Rela <21BFE0h, 2600000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000012B8                 Elf64_Rela <21BFE8h, 2E00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000012D0                 Elf64_Rela <21BFF0h, 4900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000000000012E8                 Elf64_Rela <21BFF8h, 4C00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001300                 Elf64_Rela <21C0A0h, 5200000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001318                 Elf64_Rela <21C0A8h, 5100000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001330                 Elf64_Rela <21C0B0h, 5700000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001348                 Elf64_Rela <21C0B8h, 5800000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001360                 Elf64_Rela <21C0C0h, 5400000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001378                 Elf64_Rela <21C0E0h, 5600000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001390 ; ELF JMPREL Relocation Table
LOAD:0000000000001390                 Elf64_Rela <21BD80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:00000000000013A8                 Elf64_Rela <21BD88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT sigprocmask
LOAD:00000000000013C0                 Elf64_Rela <21BD90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:00000000000013D8                 Elf64_Rela <21BD98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT raise
LOAD:00000000000013F0                 Elf64_Rela <21BDA0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001408                 Elf64_Rela <21BDA8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001420                 Elf64_Rela <21BDB0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001438                 Elf64_Rela <21BDB8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT unlink
LOAD:0000000000001450                 Elf64_Rela <21BDC0h, 900000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001468                 Elf64_Rela <21BDC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001480                 Elf64_Rela <21BDD0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:0000000000001498                 Elf64_Rela <21BDD8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000014B0                 Elf64_Rela <21BDE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT sigaction
LOAD:00000000000014C8                 Elf64_Rela <21BDE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:00000000000014E0                 Elf64_Rela <21BDF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000014F8                 Elf64_Rela <21BDF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __strtol_internal
LOAD:0000000000001510                 Elf64_Rela <21BE00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT iswctype
LOAD:0000000000001528                 Elf64_Rela <21BE08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001540                 Elf64_Rela <21BE10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001558                 Elf64_Rela <21BE18h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001570                 Elf64_Rela <21BE20h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001588                 Elf64_Rela <21BE28h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000015A0                 Elf64_Rela <21BE30h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000015B8                 Elf64_Rela <21BE38h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000015D0                 Elf64_Rela <21BE40h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000015E8                 Elf64_Rela <21BE48h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT dup2
LOAD:0000000000001600                 Elf64_Rela <21BE50h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001618                 Elf64_Rela <21BE58h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001630                 Elf64_Rela <21BE60h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001648                 Elf64_Rela <21BE68h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001660                 Elf64_Rela <21BE70h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000001678                 Elf64_Rela <21BE78h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001690                 Elf64_Rela <21BE80h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:00000000000016A8                 Elf64_Rela <21BE88h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fputc
LOAD:00000000000016C0                 Elf64_Rela <21BE90h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:00000000000016D8                 Elf64_Rela <21BE98h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT read
LOAD:00000000000016F0                 Elf64_Rela <21BEA0h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001708                 Elf64_Rela <21BEA8h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT wctype
LOAD:0000000000001720                 Elf64_Rela <21BEB0h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001738                 Elf64_Rela <21BEB8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001750                 Elf64_Rela <21BEC0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001768                 Elf64_Rela <21BEC8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT signal
LOAD:0000000000001780                 Elf64_Rela <21BED0h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT sigemptyset
LOAD:0000000000001798                 Elf64_Rela <21BED8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000017B0                 Elf64_Rela <21BEE0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000017C8                 Elf64_Rela <21BEE8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT iswalnum
LOAD:00000000000017E0                 Elf64_Rela <21BEF0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000017F8                 Elf64_Rela <21BEF8h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT wcrtomb
LOAD:0000000000001810                 Elf64_Rela <21BF00h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001828                 Elf64_Rela <21BF08h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001840                 Elf64_Rela <21BF10h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001858                 Elf64_Rela <21BF18h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001870                 Elf64_Rela <21BF20h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001888                 Elf64_Rela <21BF28h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:00000000000018A0                 Elf64_Rela <21BF30h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000018B8                 Elf64_Rela <21BF38h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000018D0                 Elf64_Rela <21BF40h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT btowc
LOAD:00000000000018E8                 Elf64_Rela <21BF48h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001900                 Elf64_Rela <21BF50h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001918                 Elf64_Rela <21BF58h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001930                 Elf64_Rela <21BF60h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001948                 Elf64_Rela <21BF68h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001960                 Elf64_Rela <21BF70h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT towlower
LOAD:0000000000001978                 Elf64_Rela <21BF78h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT towupper
LOAD:0000000000001990                 Elf64_Rela <21BF80h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000019A8                 Elf64_Rela <21BF88h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT sigismember
LOAD:00000000000019C0                 Elf64_Rela <21BF90h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000019D8                 Elf64_Rela <21BF98h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000019F0                 Elf64_Rela <21BFA0h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001A08                 Elf64_Rela <21BFA8h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001A20                 Elf64_Rela <21BFB0h, 4B00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001A38                 Elf64_Rela <21BFB8h, 4D00000007h, 0> ; R_X86_64_JUMP_SLOT sigaddset
LOAD:0000000000001A50                 Elf64_Rela <21BFC0h, 4E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:0000000000001A68                 Elf64_Rela <21BFC8h, 4F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001A80                 Elf64_Rela <21BFD0h, 5000000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000001A80 LOAD            ends
LOAD:0000000000001A80
.init:0000000000001A98 ; ===========================================================================
.init:0000000000001A98
.init:0000000000001A98 ; Segment type: Pure code
.init:0000000000001A98 ; Segment permissions: Read/Execute
.init:0000000000001A98 _init           segment dword public 'CODE' use64
.init:0000000000001A98                 assume cs:_init
.init:0000000000001A98                 ;org 1A98h
.init:0000000000001A98                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001A98
.init:0000000000001A98 ; =============== S U B R O U T I N E =======================================
.init:0000000000001A98
.init:0000000000001A98
.init:0000000000001A98                 public _init_proc
.init:0000000000001A98 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001A98                 sub     rsp, 8          ; _init
.init:0000000000001A9C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001AA3                 test    rax, rax
.init:0000000000001AA6                 jz      short loc_1AAA
.init:0000000000001AA8                 call    rax ; __gmon_start__
.init:0000000000001AAA
.init:0000000000001AAA loc_1AAA:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001AAA                 add     rsp, 8
.init:0000000000001AAE                 retn
.init:0000000000001AAE _init_proc      endp
.init:0000000000001AAE
.init:0000000000001AAE _init           ends
.init:0000000000001AAE
LOAD:0000000000001AAF ; ===========================================================================
LOAD:0000000000001AAF
LOAD:0000000000001AAF ; Segment type: Pure code
LOAD:0000000000001AAF ; Segment permissions: Read/Execute
LOAD:0000000000001AAF LOAD            segment byte public 'CODE' use64
LOAD:0000000000001AAF                 assume cs:LOAD
LOAD:0000000000001AAF                 ;org 1AAFh
LOAD:0000000000001AAF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001AAF                 align 10h
LOAD:0000000000001AAF LOAD            ends
LOAD:0000000000001AAF
.plt:0000000000001AB0 ; ===========================================================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Segment type: Pure code
.plt:0000000000001AB0 ; Segment permissions: Read/Execute
.plt:0000000000001AB0 _plt            segment para public 'CODE' use64
.plt:0000000000001AB0                 assume cs:_plt
.plt:0000000000001AB0                 ;org 1AB0h
.plt:0000000000001AB0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0
.plt:0000000000001AB0 sub_1AB0        proc near               ; CODE XREF: .plt:0000000000001ACB↓j
.plt:0000000000001AB0                                         ; .plt:0000000000001ADB↓j ...
.plt:0000000000001AB0 ; __unwind {
.plt:0000000000001AB0                 push    cs:qword_21BD70
.plt:0000000000001AB6                 jmp     cs:qword_21BD78
.plt:0000000000001AB6 sub_1AB0        endp
.plt:0000000000001AB6
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001ABC                 align 20h
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; const __int32_t **__ctype_toupper_loc(void)
.plt:0000000000001AC0 ___ctype_toupper_loc proc near          ; CODE XREF: build_upper_buffer+1D↓p
.plt:0000000000001AC0                                         ; build_wcs_upper_buffer:loc_8918↓p
.plt:0000000000001AC0                 jmp     cs:__ctype_toupper_loc_ptr
.plt:0000000000001AC0 ___ctype_toupper_loc endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    0
.plt:0000000000001ACB                 jmp     sub_1AB0
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; int sigprocmask(int how, const sigset_t *set, sigset_t *oset)
.plt:0000000000001AD0 _sigprocmask    proc near               ; CODE XREF: cleanup_fatal+2F↓p
.plt:0000000000001AD0                                         ; cleanup_fatal+50↓p ...
.plt:0000000000001AD0                 jmp     cs:sigprocmask_ptr
.plt:0000000000001AD0 _sigprocmask    endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    1
.plt:0000000000001ADB                 jmp     sub_1AB0
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ___snprintf_chk proc near               ; CODE XREF: main+A67↓p
.plt:0000000000001AE0                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000001AE0 ___snprintf_chk endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    2
.plt:0000000000001AEB                 jmp     sub_1AB0
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; int raise(int sig)
.plt:0000000000001AF0 _raise          proc near               ; CODE XREF: interrupt_handler+24↓j
.plt:0000000000001AF0                 jmp     cs:raise_ptr
.plt:0000000000001AF0 _raise          endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    3
.plt:0000000000001AFB                 jmp     sub_1AB0
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; void free(void *ptr)
.plt:0000000000001B00 _free           proc near               ; CODE XREF: free_buffer_isra_4+1F↓p
.plt:0000000000001B00                                         ; free_buffer_isra_4+38↓p ...
.plt:0000000000001B00                 jmp     cs:free_ptr
.plt:0000000000001B00 _free           endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    4
.plt:0000000000001B0B                 jmp     sub_1AB0
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: noreturn thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; void __noreturn abort(void)
.plt:0000000000001B10 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001B10                                         ; quotearg_buffer_restyled:def_4771↓p ...
.plt:0000000000001B10                 jmp     cs:abort_ptr
.plt:0000000000001B10 _abort          endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    5
.plt:0000000000001B1B                 jmp     sub_1AB0
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; int *__errno_location(void)
.plt:0000000000001B20 ___errno_location proc near             ; CODE XREF: main+ACB↓p
.plt:0000000000001B20                                         ; main+D5B↓p ...
.plt:0000000000001B20                 jmp     cs:__errno_location_ptr
.plt:0000000000001B20 ___errno_location endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    6
.plt:0000000000001B2B                 jmp     sub_1AB0
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; int unlink(const char *name)
.plt:0000000000001B30 _unlink         proc near               ; CODE XREF: delete_all_files_part_0+4A↓p
.plt:0000000000001B30                                         ; close_output_file+DC↓p
.plt:0000000000001B30                 jmp     cs:unlink_ptr
.plt:0000000000001B30 _unlink         endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    7
.plt:0000000000001B3B                 jmp     sub_1AB0
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001B40 _strncmp        proc near               ; CODE XREF: usage+2DC↓p
.plt:0000000000001B40                                         ; usage+39D↓p
.plt:0000000000001B40                 jmp     cs:strncmp_ptr
.plt:0000000000001B40 _strncmp        endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    8
.plt:0000000000001B4B                 jmp     sub_1AB0
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: noreturn thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; void __noreturn _exit(int status)
.plt:0000000000001B50 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001B50                 jmp     cs:_exit_ptr
.plt:0000000000001B50 __exit          endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    9
.plt:0000000000001B5B                 jmp     sub_1AB0
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; char *strcpy(char *dest, const char *src)
.plt:0000000000001B60 _strcpy         proc near               ; CODE XREF: make_filename+14↓p
.plt:0000000000001B60                 jmp     cs:strcpy_ptr
.plt:0000000000001B60 _strcpy         endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    0Ah
.plt:0000000000001B6B                 jmp     sub_1AB0
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; size_t __fpending(FILE *fp)
.plt:0000000000001B70 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001B70                 jmp     cs:__fpending_ptr
.plt:0000000000001B70 ___fpending     endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    0Bh
.plt:0000000000001B7B                 jmp     sub_1AB0
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
.plt:0000000000001B80 _sigaction      proc near               ; CODE XREF: main+53A↓p
.plt:0000000000001B80                                         ; main+5B7↓p
.plt:0000000000001B80                 jmp     cs:sigaction_ptr
.plt:0000000000001B80 _sigaction      endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    0Ch
.plt:0000000000001B8B                 jmp     sub_1AB0
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001B90 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001B90                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001B90                 jmp     cs:fcntl_ptr
.plt:0000000000001B90 _fcntl          endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    0Dh
.plt:0000000000001B9B                 jmp     sub_1AB0
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; char *textdomain(const char *domainname)
.plt:0000000000001BA0 _textdomain     proc near               ; CODE XREF: main+65↓p
.plt:0000000000001BA0                 jmp     cs:textdomain_ptr
.plt:0000000000001BA0 _textdomain     endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    0Eh
.plt:0000000000001BAB                 jmp     sub_1AB0
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; __int64 __strtol_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001BB0 ___strtol_internal proc near            ; CODE XREF: xstrtoimax+59↓p
.plt:0000000000001BB0                 jmp     cs:__strtol_internal_ptr
.plt:0000000000001BB0 ___strtol_internal endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    0Fh
.plt:0000000000001BBB                 jmp     sub_1AB0
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; int iswctype(wint_t wc, wctype_t desc)
.plt:0000000000001BC0 _iswctype       proc near               ; CODE XREF: check_node_accept_bytes_isra_31+D9↓p
.plt:0000000000001BC0                 jmp     cs:iswctype_ptr
.plt:0000000000001BC0 _iswctype       endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    10h
.plt:0000000000001BCB                 jmp     sub_1AB0
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; int fclose(FILE *stream)
.plt:0000000000001BD0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001BD0                                         ; rpl_fclose+6B↓j
.plt:0000000000001BD0                 jmp     cs:fclose_ptr
.plt:0000000000001BD0 _fclose         endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    11h
.plt:0000000000001BDB                 jmp     sub_1AB0
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001BE0 _bindtextdomain proc near               ; CODE XREF: main+59↓p
.plt:0000000000001BE0                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001BE0 _bindtextdomain endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    12h
.plt:0000000000001BEB                 jmp     sub_1AB0
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001BF0 _dcgettext      proc near               ; CODE XREF: regexp_error+4B↓p
.plt:0000000000001BF0                                         ; regexp_error+8D↓p ...
.plt:0000000000001BF0                 jmp     cs:dcgettext_ptr
.plt:0000000000001BF0 _dcgettext      endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    13h
.plt:0000000000001BFB                 jmp     sub_1AB0
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001C00 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001C00                                         ; re_compile_internal+122↓p
.plt:0000000000001C00                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001C00 ___ctype_get_mb_cur_max endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    14h
.plt:0000000000001C0B                 jmp     sub_1AB0
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; size_t strlen(const char *s)
.plt:0000000000001C10 _strlen         proc near               ; CODE XREF: make_filename+3A↓p
.plt:0000000000001C10                                         ; make_filename+85↓p ...
.plt:0000000000001C10                 jmp     cs:strlen_ptr
.plt:0000000000001C10 _strlen         endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    15h
.plt:0000000000001C1B                 jmp     sub_1AB0
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: noreturn thunk
.plt:0000000000001C20
.plt:0000000000001C20 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2DA0↓p
.plt:0000000000001C20                                         ; close_output_file:loc_33C1↓p ...
.plt:0000000000001C20                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001C20 ___stack_chk_fail endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    16h
.plt:0000000000001C2B                 jmp     sub_1AB0
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001C30 _getopt_long    proc near               ; CODE XREF: main+D4↓p
.plt:0000000000001C30                 jmp     cs:getopt_long_ptr
.plt:0000000000001C30 _getopt_long    endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    17h
.plt:0000000000001C3B                 jmp     sub_1AB0
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001C40 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001C40                 jmp     cs:mbrtowc_ptr
.plt:0000000000001C40 _mbrtowc        endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    18h
.plt:0000000000001C4B                 jmp     sub_1AB0
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; int dup2(int fd, int fd2)
.plt:0000000000001C50 _dup2           proc near               ; CODE XREF: fd_reopen+28↓p
.plt:0000000000001C50                 jmp     cs:dup2_ptr
.plt:0000000000001C50 _dup2           endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    19h
.plt:0000000000001C5B                 jmp     sub_1AB0
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; char *strchr(const char *s, int c)
.plt:0000000000001C60 _strchr         proc near               ; CODE XREF: xstrtoimax+EC↓p
.plt:0000000000001C60                                         ; xstrtoimax+10F↓p ...
.plt:0000000000001C60                 jmp     cs:strchr_ptr
.plt:0000000000001C60 _strchr         endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    1Ah
.plt:0000000000001C6B                 jmp     sub_1AB0
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; char *strrchr(const char *s, int c)
.plt:0000000000001C70 _strrchr        proc near               ; CODE XREF: main+42A↓p
.plt:0000000000001C70                                         ; set_program_name+E↓p
.plt:0000000000001C70                 jmp     cs:strrchr_ptr
.plt:0000000000001C70 _strrchr        endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    1Bh
.plt:0000000000001C7B                 jmp     sub_1AB0
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001C80 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001C80                                         ; rpl_fseeko+3B↓p
.plt:0000000000001C80                 jmp     cs:lseek_ptr
.plt:0000000000001C80 _lseek          endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    1Ch
.plt:0000000000001C8B                 jmp     sub_1AB0
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: noreturn thunk
.plt:0000000000001C90
.plt:0000000000001C90 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001C90 ___assert_fail  proc near               ; CODE XREF: find_line+81↓p
.plt:0000000000001C90                                         ; xstrtoimax+6A9↓p ...
.plt:0000000000001C90                 jmp     cs:__assert_fail_ptr
.plt:0000000000001C90 ___assert_fail  endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    1Dh
.plt:0000000000001C9B                 jmp     sub_1AB0
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001CA0 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001CA0                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001CA0 ___strtoul_internal endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    1Eh
.plt:0000000000001CAB                 jmp     sub_1AB0
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001CB0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001CB0                                         ; xzalloc+12↓j ...
.plt:0000000000001CB0                 jmp     cs:memset_ptr
.plt:0000000000001CB0 _memset         endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    1Fh
.plt:0000000000001CBB                 jmp     sub_1AB0
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ; int close(int fd)
.plt:0000000000001CC0 _close          proc near               ; CODE XREF: main+B56↓p
.plt:0000000000001CC0                                         ; fd_reopen+3D↓p ...
.plt:0000000000001CC0                 jmp     cs:close_ptr
.plt:0000000000001CC0 _close          endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    20h ; ' '
.plt:0000000000001CCB                 jmp     sub_1AB0
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ; int fputc(int c, FILE *stream)
.plt:0000000000001CD0 _fputc          proc near               ; CODE XREF: regexp_error+B9↓p
.plt:0000000000001CD0                                         ; handle_line_error_isra_1+B9↓p
.plt:0000000000001CD0                 jmp     cs:fputc_ptr
.plt:0000000000001CD0 _fputc          endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    21h ; '!'
.plt:0000000000001CDB                 jmp     sub_1AB0
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000001CE0 _memchr         proc near               ; CODE XREF: load_buffer_part_5+144↓p
.plt:0000000000001CE0                 jmp     cs:memchr_ptr
.plt:0000000000001CE0 _memchr         endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    22h ; '"'
.plt:0000000000001CEB                 jmp     sub_1AB0
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ; ssize_t read(int fd, void *buf, size_t nbytes)
.plt:0000000000001CF0 _read           proc near               ; CODE XREF: safe_read+21↓p
.plt:0000000000001CF0                 jmp     cs:read_ptr
.plt:0000000000001CF0 _read           endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    23h ; '#'
.plt:0000000000001CFB                 jmp     sub_1AB0
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001D00 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001D00                                         ; set_regs+411↓p ...
.plt:0000000000001D00                 jmp     cs:memcmp_ptr
.plt:0000000000001D00 _memcmp         endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    24h ; '$'
.plt:0000000000001D0B                 jmp     sub_1AB0
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; wctype_t wctype(const char *property)
.plt:0000000000001D10 _wctype         proc near               ; CODE XREF: build_charclass_isra_29+67↓p
.plt:0000000000001D10                 jmp     cs:wctype_ptr
.plt:0000000000001D10 _wctype         endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    25h ; '%'
.plt:0000000000001D1B                 jmp     sub_1AB0
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001D20 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001D20                                         ; usage+C2↓p ...
.plt:0000000000001D20                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001D20 _fputs_unlocked endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    26h ; '&'
.plt:0000000000001D2B                 jmp     sub_1AB0
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001D30 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001D30                                         ; re_acquire_state_context+CA↓p ...
.plt:0000000000001D30                 jmp     cs:calloc_ptr
.plt:0000000000001D30 _calloc         endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    27h ; '''
.plt:0000000000001D3B                 jmp     sub_1AB0
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: thunk
.plt:0000000000001D40
.plt:0000000000001D40 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001D40 _strcmp         proc near               ; CODE XREF: main+310↓p
.plt:0000000000001D40                                         ; build_charclass_isra_29+5C8↓p ...
.plt:0000000000001D40                 jmp     cs:strcmp_ptr
.plt:0000000000001D40 _strcmp         endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    28h ; '('
.plt:0000000000001D4B                 jmp     sub_1AB0
.plt:0000000000001D50
.plt:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D50
.plt:0000000000001D50 ; Attributes: thunk
.plt:0000000000001D50
.plt:0000000000001D50 ; __sighandler_t signal(int sig, __sighandler_t handler)
.plt:0000000000001D50 _signal         proc near               ; CODE XREF: interrupt_handler+1C↓p
.plt:0000000000001D50                 jmp     cs:signal_ptr
.plt:0000000000001D50 _signal         endp
.plt:0000000000001D50
.plt:0000000000001D56 ; ---------------------------------------------------------------------------
.plt:0000000000001D56                 push    29h ; ')'
.plt:0000000000001D5B                 jmp     sub_1AB0
.plt:0000000000001D60
.plt:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D60
.plt:0000000000001D60 ; Attributes: thunk
.plt:0000000000001D60
.plt:0000000000001D60 ; int sigemptyset(sigset_t *set)
.plt:0000000000001D60 _sigemptyset    proc near               ; CODE XREF: main+529↓p
.plt:0000000000001D60                 jmp     cs:sigemptyset_ptr
.plt:0000000000001D60 _sigemptyset    endp
.plt:0000000000001D60
.plt:0000000000001D66 ; ---------------------------------------------------------------------------
.plt:0000000000001D66                 push    2Ah ; '*'
.plt:0000000000001D6B                 jmp     sub_1AB0
.plt:0000000000001D70
.plt:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D70
.plt:0000000000001D70 ; Attributes: thunk
.plt:0000000000001D70
.plt:0000000000001D70 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001D70 _memcpy         proc near               ; CODE XREF: load_buffer_part_5+21D↓p
.plt:0000000000001D70                                         ; xmemdup+23↓j ...
.plt:0000000000001D70                 jmp     cs:memcpy_ptr
.plt:0000000000001D70 _memcpy         endp
.plt:0000000000001D70
.plt:0000000000001D76 ; ---------------------------------------------------------------------------
.plt:0000000000001D76                 push    2Bh ; '+'
.plt:0000000000001D7B                 jmp     sub_1AB0
.plt:0000000000001D80
.plt:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D80
.plt:0000000000001D80 ; Attributes: thunk
.plt:0000000000001D80
.plt:0000000000001D80 ; int fileno(FILE *stream)
.plt:0000000000001D80 _fileno         proc near               ; CODE XREF: fopen_safer+17↓p
.plt:0000000000001D80                                         ; rpl_fclose+7↓p ...
.plt:0000000000001D80                 jmp     cs:fileno_ptr
.plt:0000000000001D80 _fileno         endp
.plt:0000000000001D80
.plt:0000000000001D86 ; ---------------------------------------------------------------------------
.plt:0000000000001D86                 push    2Ch ; ','
.plt:0000000000001D8B                 jmp     sub_1AB0
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Attributes: thunk
.plt:0000000000001D90
.plt:0000000000001D90 ; int iswalnum(wint_t wc)
.plt:0000000000001D90 _iswalnum       proc near               ; CODE XREF: re_string_context_at+CA↓p
.plt:0000000000001D90                                         ; re_string_reconstruct+6FE↓p ...
.plt:0000000000001D90                 jmp     cs:iswalnum_ptr
.plt:0000000000001D90 _iswalnum       endp
.plt:0000000000001D90
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D96                 push    2Dh ; '-'
.plt:0000000000001D9B                 jmp     sub_1AB0
.plt:0000000000001DA0
.plt:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DA0
.plt:0000000000001DA0 ; Attributes: thunk
.plt:0000000000001DA0
.plt:0000000000001DA0 ; void *malloc(size_t size)
.plt:0000000000001DA0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001DA0                                         ; re_node_set_insert+4C↓p ...
.plt:0000000000001DA0                 jmp     cs:malloc_ptr
.plt:0000000000001DA0 _malloc         endp
.plt:0000000000001DA0
.plt:0000000000001DA6 ; ---------------------------------------------------------------------------
.plt:0000000000001DA6                 push    2Eh ; '.'
.plt:0000000000001DAB                 jmp     sub_1AB0
.plt:0000000000001DB0
.plt:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DB0
.plt:0000000000001DB0 ; Attributes: thunk
.plt:0000000000001DB0
.plt:0000000000001DB0 ; size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
.plt:0000000000001DB0 _wcrtomb        proc near               ; CODE XREF: build_wcs_upper_buffer+139↓p
.plt:0000000000001DB0                                         ; build_wcs_upper_buffer+29C↓p ...
.plt:0000000000001DB0                 jmp     cs:wcrtomb_ptr
.plt:0000000000001DB0 _wcrtomb        endp
.plt:0000000000001DB0
.plt:0000000000001DB6 ; ---------------------------------------------------------------------------
.plt:0000000000001DB6                 push    2Fh ; '/'
.plt:0000000000001DBB                 jmp     sub_1AB0
.plt:0000000000001DC0
.plt:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DC0
.plt:0000000000001DC0 ; Attributes: thunk
.plt:0000000000001DC0
.plt:0000000000001DC0 ; int fflush(FILE *stream)
.plt:0000000000001DC0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001DC0                                         ; rpl_fflush+3B↓j
.plt:0000000000001DC0                 jmp     cs:fflush_ptr
.plt:0000000000001DC0 _fflush         endp
.plt:0000000000001DC0
.plt:0000000000001DC6 ; ---------------------------------------------------------------------------
.plt:0000000000001DC6                 push    30h ; '0'
.plt:0000000000001DCB                 jmp     sub_1AB0
.plt:0000000000001DD0
.plt:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DD0
.plt:0000000000001DD0 ; Attributes: thunk
.plt:0000000000001DD0
.plt:0000000000001DD0 ; char *nl_langinfo(nl_item item)
.plt:0000000000001DD0 _nl_langinfo    proc near               ; CODE XREF: re_compile_internal+132↓p
.plt:0000000000001DD0                                         ; locale_charset+9↓p
.plt:0000000000001DD0                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001DD0 _nl_langinfo    endp
.plt:0000000000001DD0
.plt:0000000000001DD6 ; ---------------------------------------------------------------------------
.plt:0000000000001DD6                 push    31h ; '1'
.plt:0000000000001DDB                 jmp     sub_1AB0
.plt:0000000000001DE0
.plt:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DE0
.plt:0000000000001DE0 ; Attributes: thunk
.plt:0000000000001DE0
.plt:0000000000001DE0 ; int __freading(FILE *fp)
.plt:0000000000001DE0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001DE0                                         ; rpl_fflush+9↓p
.plt:0000000000001DE0                 jmp     cs:__freading_ptr
.plt:0000000000001DE0 ___freading     endp
.plt:0000000000001DE0
.plt:0000000000001DE6 ; ---------------------------------------------------------------------------
.plt:0000000000001DE6                 push    32h ; '2'
.plt:0000000000001DEB                 jmp     sub_1AB0
.plt:0000000000001DF0
.plt:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DF0
.plt:0000000000001DF0 ; Attributes: thunk
.plt:0000000000001DF0
.plt:0000000000001DF0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001DF0 _fwrite_unlocked proc near              ; CODE XREF: save_line_to_file+1C↓p
.plt:0000000000001DF0                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001DF0 _fwrite_unlocked endp
.plt:0000000000001DF0
.plt:0000000000001DF6 ; ---------------------------------------------------------------------------
.plt:0000000000001DF6                 push    33h ; '3'
.plt:0000000000001DFB                 jmp     sub_1AB0
.plt:0000000000001E00
.plt:0000000000001E00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E00
.plt:0000000000001E00 ; Attributes: thunk
.plt:0000000000001E00
.plt:0000000000001E00 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001E00 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001E00                                         ; re_string_realloc_buffers+30↓p ...
.plt:0000000000001E00                 jmp     cs:realloc_ptr
.plt:0000000000001E00 _realloc        endp
.plt:0000000000001E00
.plt:0000000000001E06 ; ---------------------------------------------------------------------------
.plt:0000000000001E06                 push    34h ; '4'
.plt:0000000000001E0B                 jmp     sub_1AB0
.plt:0000000000001E10
.plt:0000000000001E10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E10
.plt:0000000000001E10 ; Attributes: thunk
.plt:0000000000001E10
.plt:0000000000001E10 ; FILE *fdopen(int fd, const char *modes)
.plt:0000000000001E10 _fdopen         proc near               ; CODE XREF: fopen_safer+50↓p
.plt:0000000000001E10                 jmp     cs:fdopen_ptr
.plt:0000000000001E10 _fdopen         endp
.plt:0000000000001E10
.plt:0000000000001E16 ; ---------------------------------------------------------------------------
.plt:0000000000001E16                 push    35h ; '5'
.plt:0000000000001E1B                 jmp     sub_1AB0
.plt:0000000000001E20
.plt:0000000000001E20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E20
.plt:0000000000001E20 ; Attributes: thunk
.plt:0000000000001E20
.plt:0000000000001E20 ; char *setlocale(int category, const char *locale)
.plt:0000000000001E20 _setlocale      proc near               ; CODE XREF: main+46↓p
.plt:0000000000001E20                                         ; usage+2C3↓p ...
.plt:0000000000001E20                 jmp     cs:setlocale_ptr
.plt:0000000000001E20 _setlocale      endp
.plt:0000000000001E20
.plt:0000000000001E26 ; ---------------------------------------------------------------------------
.plt:0000000000001E26                 push    36h ; '6'
.plt:0000000000001E2B                 jmp     sub_1AB0
.plt:0000000000001E30
.plt:0000000000001E30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E30
.plt:0000000000001E30 ; Attributes: thunk
.plt:0000000000001E30
.plt:0000000000001E30 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001E30                                         ; usage+2B7↓p ...
.plt:0000000000001E30                 jmp     cs:__printf_chk_ptr
.plt:0000000000001E30 ___printf_chk   endp
.plt:0000000000001E30
.plt:0000000000001E36 ; ---------------------------------------------------------------------------
.plt:0000000000001E36                 push    37h ; '7'
.plt:0000000000001E3B                 jmp     sub_1AB0
.plt:0000000000001E40
.plt:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E40
.plt:0000000000001E40 ; Attributes: thunk
.plt:0000000000001E40
.plt:0000000000001E40 ; wint_t btowc(int c)
.plt:0000000000001E40 _btowc          proc near               ; CODE XREF: parse_expression+F23↓p
.plt:0000000000001E40                                         ; parse_expression+11F7↓p ...
.plt:0000000000001E40                 jmp     cs:btowc_ptr
.plt:0000000000001E40 _btowc          endp
.plt:0000000000001E40
.plt:0000000000001E46 ; ---------------------------------------------------------------------------
.plt:0000000000001E46                 push    38h ; '8'
.plt:0000000000001E4B                 jmp     sub_1AB0
.plt:0000000000001E50
.plt:0000000000001E50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E50
.plt:0000000000001E50 ; Attributes: thunk
.plt:0000000000001E50
.plt:0000000000001E50 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001E50 _memmove        proc near               ; CODE XREF: re_string_reconstruct+190↓p
.plt:0000000000001E50                                         ; re_string_reconstruct+358↓p ...
.plt:0000000000001E50                 jmp     cs:memmove_ptr
.plt:0000000000001E50 _memmove        endp
.plt:0000000000001E50
.plt:0000000000001E56 ; ---------------------------------------------------------------------------
.plt:0000000000001E56                 push    39h ; '9'
.plt:0000000000001E5B                 jmp     sub_1AB0
.plt:0000000000001E60
.plt:0000000000001E60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E60
.plt:0000000000001E60 ; Attributes: thunk
.plt:0000000000001E60
.plt:0000000000001E60 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001E60 _error          proc near               ; CODE XREF: main+4FD↓p
.plt:0000000000001E60                                         ; main+765↓p ...
.plt:0000000000001E60                 jmp     cs:error_ptr
.plt:0000000000001E60 _error          endp
.plt:0000000000001E60
.plt:0000000000001E66 ; ---------------------------------------------------------------------------
.plt:0000000000001E66                 push    3Ah ; ':'
.plt:0000000000001E6B                 jmp     sub_1AB0
.plt:0000000000001E70
.plt:0000000000001E70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E70
.plt:0000000000001E70 ; Attributes: thunk
.plt:0000000000001E70
.plt:0000000000001E70 ; int open(const char *file, int oflag, ...)
.plt:0000000000001E70 _open           proc near               ; CODE XREF: fd_reopen+15↓p
.plt:0000000000001E70                 jmp     cs:open_ptr
.plt:0000000000001E70 _open           endp
.plt:0000000000001E70
.plt:0000000000001E76 ; ---------------------------------------------------------------------------
.plt:0000000000001E76                 push    3Bh ; ';'
.plt:0000000000001E7B                 jmp     sub_1AB0
.plt:0000000000001E80
.plt:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E80
.plt:0000000000001E80 ; Attributes: thunk
.plt:0000000000001E80
.plt:0000000000001E80 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001E80 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_7ADA↓j
.plt:0000000000001E80                 jmp     cs:fseeko_ptr
.plt:0000000000001E80 _fseeko         endp
.plt:0000000000001E80
.plt:0000000000001E86 ; ---------------------------------------------------------------------------
.plt:0000000000001E86                 push    3Ch ; '<'
.plt:0000000000001E8B                 jmp     sub_1AB0
.plt:0000000000001E90
.plt:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E90
.plt:0000000000001E90 ; Attributes: thunk
.plt:0000000000001E90
.plt:0000000000001E90 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001E90 _fopen          proc near               ; CODE XREF: fopen_safer+7↓p
.plt:0000000000001E90                 jmp     cs:fopen_ptr
.plt:0000000000001E90 _fopen          endp
.plt:0000000000001E90
.plt:0000000000001E96 ; ---------------------------------------------------------------------------
.plt:0000000000001E96                 push    3Dh ; '='
.plt:0000000000001E9B                 jmp     sub_1AB0
.plt:0000000000001EA0
.plt:0000000000001EA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EA0
.plt:0000000000001EA0 ; Attributes: thunk
.plt:0000000000001EA0
.plt:0000000000001EA0 ; wint_t towlower(wint_t wc)
.plt:0000000000001EA0 _towlower       proc near               ; CODE XREF: re_compile_fastmap_iter_isra_30+205↓p
.plt:0000000000001EA0                                         ; re_compile_fastmap_iter_isra_30+30E↓p
.plt:0000000000001EA0                 jmp     cs:towlower_ptr
.plt:0000000000001EA0 _towlower       endp
.plt:0000000000001EA0
.plt:0000000000001EA6 ; ---------------------------------------------------------------------------
.plt:0000000000001EA6                 push    3Eh ; '>'
.plt:0000000000001EAB                 jmp     sub_1AB0
.plt:0000000000001EB0
.plt:0000000000001EB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EB0
.plt:0000000000001EB0 ; Attributes: thunk
.plt:0000000000001EB0
.plt:0000000000001EB0 ; wint_t towupper(wint_t wc)
.plt:0000000000001EB0 _towupper       proc near               ; CODE XREF: build_wcs_upper_buffer+10C↓p
.plt:0000000000001EB0                                         ; build_wcs_upper_buffer+280↓p
.plt:0000000000001EB0                 jmp     cs:towupper_ptr
.plt:0000000000001EB0 _towupper       endp
.plt:0000000000001EB0
.plt:0000000000001EB6 ; ---------------------------------------------------------------------------
.plt:0000000000001EB6                 push    3Fh ; '?'
.plt:0000000000001EBB                 jmp     sub_1AB0
.plt:0000000000001EC0
.plt:0000000000001EC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EC0
.plt:0000000000001EC0 ; Attributes: thunk
.plt:0000000000001EC0
.plt:0000000000001EC0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001EC0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001EC0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001EC0 ___cxa_atexit   endp
.plt:0000000000001EC0
.plt:0000000000001EC6 ; ---------------------------------------------------------------------------
.plt:0000000000001EC6                 push    40h ; '@'
.plt:0000000000001ECB                 jmp     sub_1AB0
.plt:0000000000001ED0
.plt:0000000000001ED0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001ED0
.plt:0000000000001ED0 ; Attributes: thunk
.plt:0000000000001ED0
.plt:0000000000001ED0 ; int sigismember(const sigset_t *set, int signo)
.plt:0000000000001ED0 _sigismember    proc near               ; CODE XREF: main+5A2↓p
.plt:0000000000001ED0                 jmp     cs:sigismember_ptr
.plt:0000000000001ED0 _sigismember    endp
.plt:0000000000001ED0
.plt:0000000000001ED6 ; ---------------------------------------------------------------------------
.plt:0000000000001ED6                 push    41h ; 'A'
.plt:0000000000001EDB                 jmp     sub_1AB0
.plt:0000000000001EE0
.plt:0000000000001EE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EE0
.plt:0000000000001EE0 ; Attributes: noreturn thunk
.plt:0000000000001EE0
.plt:0000000000001EE0 ; void __noreturn exit(int status)
.plt:0000000000001EE0 _exit           proc near               ; CODE XREF: main+22C↓p
.plt:0000000000001EE0                                         ; main+6BD↓p ...
.plt:0000000000001EE0                 jmp     cs:exit_ptr
.plt:0000000000001EE0 _exit           endp
.plt:0000000000001EE0
.plt:0000000000001EE6 ; ---------------------------------------------------------------------------
.plt:0000000000001EE6                 push    42h ; 'B'
.plt:0000000000001EEB                 jmp     sub_1AB0
.plt:0000000000001EF0
.plt:0000000000001EF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EF0
.plt:0000000000001EF0 ; Attributes: thunk
.plt:0000000000001EF0
.plt:0000000000001EF0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001EF0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001EF0                 jmp     cs:fwrite_ptr
.plt:0000000000001EF0 _fwrite         endp
.plt:0000000000001EF0
.plt:0000000000001EF6 ; ---------------------------------------------------------------------------
.plt:0000000000001EF6                 push    43h ; 'C'
.plt:0000000000001EFB                 jmp     sub_1AB0
.plt:0000000000001F00
.plt:0000000000001F00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F00
.plt:0000000000001F00 ; Attributes: thunk
.plt:0000000000001F00
.plt:0000000000001F00 ___fprintf_chk  proc near               ; CODE XREF: regexp_error+67↓p
.plt:0000000000001F00                                         ; regexp_error+A6↓p ...
.plt:0000000000001F00                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001F00 ___fprintf_chk  endp
.plt:0000000000001F00
.plt:0000000000001F06 ; ---------------------------------------------------------------------------
.plt:0000000000001F06                 push    44h ; 'D'
.plt:0000000000001F0B                 jmp     sub_1AB0
.plt:0000000000001F10
.plt:0000000000001F10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F10
.plt:0000000000001F10 ; Attributes: thunk
.plt:0000000000001F10
.plt:0000000000001F10 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001F10 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001F10                                         ; build_wcs_upper_buffer+22D↓p
.plt:0000000000001F10                 jmp     cs:mbsinit_ptr
.plt:0000000000001F10 _mbsinit        endp
.plt:0000000000001F10
.plt:0000000000001F16 ; ---------------------------------------------------------------------------
.plt:0000000000001F16                 push    45h ; 'E'
.plt:0000000000001F1B                 jmp     sub_1AB0
.plt:0000000000001F20
.plt:0000000000001F20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F20
.plt:0000000000001F20 ; Attributes: thunk
.plt:0000000000001F20
.plt:0000000000001F20 ; int iswprint(wint_t wc)
.plt:0000000000001F20 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001F20                 jmp     cs:iswprint_ptr
.plt:0000000000001F20 _iswprint       endp
.plt:0000000000001F20
.plt:0000000000001F26 ; ---------------------------------------------------------------------------
.plt:0000000000001F26                 push    46h ; 'F'
.plt:0000000000001F2B                 jmp     sub_1AB0
.plt:0000000000001F30
.plt:0000000000001F30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F30
.plt:0000000000001F30 ; Attributes: thunk
.plt:0000000000001F30
.plt:0000000000001F30 ; int sigaddset(sigset_t *set, int signo)
.plt:0000000000001F30 _sigaddset      proc near               ; CODE XREF: main+54D↓p
.plt:0000000000001F30                 jmp     cs:sigaddset_ptr
.plt:0000000000001F30 _sigaddset      endp
.plt:0000000000001F30
.plt:0000000000001F36 ; ---------------------------------------------------------------------------
.plt:0000000000001F36                 push    47h ; 'G'
.plt:0000000000001F3B                 jmp     sub_1AB0
.plt:0000000000001F40
.plt:0000000000001F40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F40
.plt:0000000000001F40 ; Attributes: thunk
.plt:0000000000001F40
.plt:0000000000001F40 ; const __int32_t **__ctype_tolower_loc(void)
.plt:0000000000001F40 ___ctype_tolower_loc proc near          ; CODE XREF: re_compile_fastmap_iter_isra_30+11F↓p
.plt:0000000000001F40                                         ; re_compile_fastmap_iter_isra_30+2D9↓p ...
.plt:0000000000001F40                 jmp     cs:__ctype_tolower_loc_ptr
.plt:0000000000001F40 ___ctype_tolower_loc endp
.plt:0000000000001F40
.plt:0000000000001F46 ; ---------------------------------------------------------------------------
.plt:0000000000001F46                 push    48h ; 'H'
.plt:0000000000001F4B                 jmp     sub_1AB0
.plt:0000000000001F50
.plt:0000000000001F50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F50
.plt:0000000000001F50 ; Attributes: thunk
.plt:0000000000001F50
.plt:0000000000001F50 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001F50 ___ctype_b_loc  proc near               ; CODE XREF: main:loc_2B61↓p
.plt:0000000000001F50                                         ; quotearg_buffer_restyled+513↓p ...
.plt:0000000000001F50                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001F50 ___ctype_b_loc  endp
.plt:0000000000001F50
.plt:0000000000001F56 ; ---------------------------------------------------------------------------
.plt:0000000000001F56                 push    49h ; 'I'
.plt:0000000000001F5B                 jmp     sub_1AB0
.plt:0000000000001F60
.plt:0000000000001F60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F60
.plt:0000000000001F60 ; Attributes: thunk
.plt:0000000000001F60
.plt:0000000000001F60 ___sprintf_chk  proc near               ; CODE XREF: make_filename+57↓p
.plt:0000000000001F60                                         ; make_filename+A9↓p
.plt:0000000000001F60                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000001F60 ___sprintf_chk  endp
.plt:0000000000001F60
.plt:0000000000001F66 ; ---------------------------------------------------------------------------
.plt:0000000000001F66                 push    4Ah ; 'J'
.plt:0000000000001F6B                 jmp     sub_1AB0
.plt:0000000000001F6B ; } // starts at 1AB0
.plt:0000000000001F6B _plt            ends
.plt:0000000000001F6B
.plt.got:0000000000001F70 ; ===========================================================================
.plt.got:0000000000001F70
.plt.got:0000000000001F70 ; Segment type: Pure code
.plt.got:0000000000001F70 ; Segment permissions: Read/Execute
.plt.got:0000000000001F70 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001F70                 assume cs:_plt_got
.plt.got:0000000000001F70                 ;org 1F70h
.plt.got:0000000000001F70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001F70
.plt.got:0000000000001F70 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001F70
.plt.got:0000000000001F70 ; Attributes: thunk
.plt.got:0000000000001F70
.plt.got:0000000000001F70 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001F70 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001F70 ; __unwind {
.plt.got:0000000000001F70                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001F70 __cxa_finalize  endp
.plt.got:0000000000001F70
.plt.got:0000000000001F70 ; ---------------------------------------------------------------------------
.plt.got:0000000000001F76                 align 8
.plt.got:0000000000001F76 ; } // starts at 1F70
.plt.got:0000000000001F76 _plt_got        ends
.plt.got:0000000000001F76
LOAD:0000000000001F78 ; ===========================================================================
LOAD:0000000000001F78
LOAD:0000000000001F78 ; Segment type: Pure code
LOAD:0000000000001F78 ; Segment permissions: Read/Execute
LOAD:0000000000001F78 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001F78                 assume cs:LOAD
LOAD:0000000000001F78                 ;org 1F78h
LOAD:0000000000001F78                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001F78                 align 20h
LOAD:0000000000001F78 LOAD            ends
LOAD:0000000000001F78
.text:0000000000001F80 ; ===========================================================================
.text:0000000000001F80
.text:0000000000001F80 ; Segment type: Pure code
.text:0000000000001F80 ; Segment permissions: Read/Execute
.text:0000000000001F80 _text           segment para public 'CODE' use64
.text:0000000000001F80                 assume cs:_text
.text:0000000000001F80                 ;org 1F80h
.text:0000000000001F80                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001F80
.text:0000000000001F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F80
.text:0000000000001F80 ; Attributes: noreturn
.text:0000000000001F80
.text:0000000000001F80 regexp_error    proc near               ; CODE XREF: main+E46↓p
.text:0000000000001F80
.text:0000000000001F80 var_30          = qword ptr -30h
.text:0000000000001F80
.text:0000000000001F80 ; __unwind {
.text:0000000000001F80                 push    r13
.text:0000000000001F82                 push    r12
.text:0000000000001F84                 push    rbp
.text:0000000000001F85                 push    rbx
.text:0000000000001F86                 mov     ebp, edx
.text:0000000000001F88                 mov     rbx, rsi
.text:0000000000001F8B                 sub     rsp, 28h
.text:0000000000001F8F                 movsxd  rdx, dword ptr [rdi+18h]
.text:0000000000001F93                 mov     rax, fs:28h
.text:0000000000001F9C                 mov     [rsp+48h+var_30], rax
.text:0000000000001FA1                 xor     eax, eax
.text:0000000000001FA3                 mov     rax, cs:global_argv
.text:0000000000001FAA                 mov     rdi, [rax+rdx*8]
.text:0000000000001FAE                 call    quote
.text:0000000000001FB3                 lea     rsi, msgid      ; "%s: %s: match not found"
.text:0000000000001FBA                 xor     edi, edi        ; domainname
.text:0000000000001FBC                 mov     r12, cs:program_name
.text:0000000000001FC3                 mov     edx, 5          ; category
.text:0000000000001FC8                 mov     r13, rax
.text:0000000000001FCB                 call    _dcgettext
.text:0000000000001FD0                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001FD7                 mov     rdx, rax
.text:0000000000001FDA                 mov     r8, r13
.text:0000000000001FDD                 xor     eax, eax
.text:0000000000001FDF                 mov     rcx, r12
.text:0000000000001FE2                 mov     esi, 1
.text:0000000000001FE7                 call    ___fprintf_chk
.text:0000000000001FEC                 test    rbx, rbx
.text:0000000000001FEF                 jz      short loc_202D
.text:0000000000001FF1                 mov     rsi, rsp
.text:0000000000001FF4                 mov     rdi, rbx
.text:0000000000001FF7                 call    umaxtostr
.text:0000000000001FFC                 lea     rsi, aOnRepetitionS ; " on repetition %s\n"
.text:0000000000002003                 xor     edi, edi        ; domainname
.text:0000000000002005                 mov     edx, 5          ; category
.text:000000000000200A                 mov     rbx, rax
.text:000000000000200D                 call    _dcgettext
.text:0000000000002012                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002019                 mov     rdx, rax
.text:000000000000201C                 mov     rcx, rbx
.text:000000000000201F                 mov     esi, 1
.text:0000000000002024                 xor     eax, eax
.text:0000000000002026                 call    ___fprintf_chk
.text:000000000000202B                 jmp     short loc_203E
.text:000000000000202D ; ---------------------------------------------------------------------------
.text:000000000000202D
.text:000000000000202D loc_202D:                               ; CODE XREF: regexp_error+6F↑j
.text:000000000000202D                 mov     rsi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002034                 mov     edi, 0Ah        ; c
.text:0000000000002039                 call    _fputc
.text:000000000000203E
.text:000000000000203E loc_203E:                               ; CODE XREF: regexp_error+AB↑j
.text:000000000000203E                 test    bpl, bpl
.text:0000000000002041                 jnz     short loc_204D
.text:0000000000002043                 call    dump_rest_of_file
.text:0000000000002048                 call    close_output_file
.text:000000000000204D
.text:000000000000204D loc_204D:                               ; CODE XREF: regexp_error+C1↑j
.text:000000000000204D                 call    cleanup_fatal
.text:000000000000204D ; } // starts at 1F80
.text:000000000000204D regexp_error    endp
.text:000000000000204D
.text:000000000000204D ; ---------------------------------------------------------------------------
.text:0000000000002052                 align 20h
.text:0000000000002060
.text:0000000000002060 ; =============== S U B R O U T I N E =======================================
.text:0000000000002060
.text:0000000000002060
.text:0000000000002060 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000002060                 public main
.text:0000000000002060 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000002060
.text:0000000000002060 argc            = dword ptr -130h
.text:0000000000002060 var_128         = qword ptr -128h
.text:0000000000002060 var_120         = qword ptr -120h
.text:0000000000002060 var_118         = qword ptr -118h
.text:0000000000002060 var_110         = qword ptr -110h
.text:0000000000002060 var_108         = qword ptr -108h
.text:0000000000002060 var_100         = qword ptr -100h
.text:0000000000002060 var_F8          = qword ptr -0F8h
.text:0000000000002060 var_F0          = byte ptr -0F0h
.text:0000000000002060 var_70          = dword ptr -70h
.text:0000000000002060 var_58          = byte ptr -58h
.text:0000000000002060 var_40          = qword ptr -40h
.text:0000000000002060
.text:0000000000002060 ; __unwind {
.text:0000000000002060                 push    r15
.text:0000000000002062                 push    r14
.text:0000000000002064                 push    r13
.text:0000000000002066                 push    r12
.text:0000000000002068                 mov     r12, rsi
.text:000000000000206B                 push    rbp
.text:000000000000206C                 push    rbx
.text:000000000000206D                 lea     rbx, longopts
.text:0000000000002074                 sub     rsp, 108h
.text:000000000000207B                 mov     [rsp+138h+argc], edi
.text:000000000000207F                 mov     rdi, [rsi]
.text:0000000000002082                 mov     rax, fs:28h
.text:000000000000208B                 mov     [rsp+138h+var_40], rax
.text:0000000000002093                 xor     eax, eax
.text:0000000000002095                 call    set_program_name
.text:000000000000209A                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000020A1                 mov     edi, 6          ; category
.text:00000000000020A6                 call    _setlocale
.text:00000000000020AB                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000020B2                 lea     rdi, domainname ; "coreutils"
.text:00000000000020B9                 call    _bindtextdomain
.text:00000000000020BE                 lea     rdi, domainname ; "coreutils"
.text:00000000000020C5                 call    _textdomain
.text:00000000000020CA                 lea     rdi, close_stdout
.text:00000000000020D1                 call    atexit
.text:00000000000020D6                 lea     rax, aXx        ; "xx"
.text:00000000000020DD                 mov     cs:remove_files, 1
.text:00000000000020E4                 mov     cs:global_argv, r12
.text:00000000000020EB                 mov     cs:controls, 0
.text:00000000000020F6                 mov     cs:control_used, 0
.text:0000000000002101                 mov     cs:suppress_count, 0
.text:0000000000002108                 mov     cs:suppress_matched, 0
.text:000000000000210F                 mov     cs:prefix, rax
.text:0000000000002116                 db      2Eh
.text:0000000000002116                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002120
.text:0000000000002120 loc_2120:                               ; CODE XREF: main+111↓j
.text:0000000000002120                                         ; main+149↓j ...
.text:0000000000002120                 mov     edi, [rsp+138h+argc] ; argc
.text:0000000000002124                 lea     rdx, shortopts  ; "f:b:kn:sqz"
.text:000000000000212B                 xor     r8d, r8d        ; longind
.text:000000000000212E                 mov     rcx, rbx        ; longopts
.text:0000000000002131                 mov     rsi, r12        ; argv
.text:0000000000002134                 call    _getopt_long
.text:0000000000002139                 cmp     eax, 0FFFFFFFFh
.text:000000000000213C                 jz      loc_2291
.text:0000000000002142                 cmp     eax, 6Bh ; 'k'
.text:0000000000002145                 jz      loc_2210
.text:000000000000214B                 jle     short loc_2178
.text:000000000000214D                 cmp     eax, 73h ; 's'
.text:0000000000002150                 jz      loc_21FC
.text:0000000000002156                 jle     short loc_21B0
.text:0000000000002158                 cmp     eax, 7Ah ; 'z'
.text:000000000000215B                 jz      loc_2220
.text:0000000000002161                 add     eax, 0FFFFFF80h
.text:0000000000002164                 jnz     loc_2D8F
.text:000000000000216A                 mov     cs:suppress_matched, 1
.text:0000000000002171                 jmp     short loc_2120
.text:0000000000002171 ; ---------------------------------------------------------------------------
.text:0000000000002173                 align 8
.text:0000000000002178
.text:0000000000002178 loc_2178:                               ; CODE XREF: main+EB↑j
.text:0000000000002178                 cmp     eax, 0FFFFFF7Eh
.text:000000000000217D                 jz      loc_2D99
.text:0000000000002183                 jle     loc_2248
.text:0000000000002189                 cmp     eax, 62h ; 'b'
.text:000000000000218C                 jz      loc_2230
.text:0000000000002192                 cmp     eax, 66h ; 'f'
.text:0000000000002195                 jnz     loc_2D8F
.text:000000000000219B                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:00000000000021A2                 mov     cs:prefix, rax
.text:00000000000021A9                 jmp     loc_2120
.text:00000000000021A9 ; ---------------------------------------------------------------------------
.text:00000000000021AE                 align 10h
.text:00000000000021B0
.text:00000000000021B0 loc_21B0:                               ; CODE XREF: main+F6↑j
.text:00000000000021B0                 cmp     eax, 6Eh ; 'n'
.text:00000000000021B3                 jnz     short loc_21F3
.text:00000000000021B5                 lea     rsi, aInvalidNumber ; "invalid number"
.text:00000000000021BC                 mov     edx, 5          ; category
.text:00000000000021C1                 xor     edi, edi        ; domainname
.text:00000000000021C3                 call    _dcgettext
.text:00000000000021C8                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000021CF                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000021D6                 mov     r8, rax
.text:00000000000021D9                 xor     r9d, r9d
.text:00000000000021DC                 mov     edx, 7FFFFFFFh
.text:00000000000021E1                 xor     esi, esi
.text:00000000000021E3                 call    xdectoumax
.text:00000000000021E8                 mov     cs:digits, eax
.text:00000000000021EE                 jmp     loc_2120
.text:00000000000021F3 ; ---------------------------------------------------------------------------
.text:00000000000021F3
.text:00000000000021F3 loc_21F3:                               ; CODE XREF: main+153↑j
.text:00000000000021F3                 cmp     eax, 71h ; 'q'
.text:00000000000021F6                 jnz     loc_2D8F
.text:00000000000021FC
.text:00000000000021FC loc_21FC:                               ; CODE XREF: main+F0↑j
.text:00000000000021FC                 mov     cs:suppress_count, 1
.text:0000000000002203                 jmp     loc_2120
.text:0000000000002203 ; ---------------------------------------------------------------------------
.text:0000000000002208                 align 10h
.text:0000000000002210
.text:0000000000002210 loc_2210:                               ; CODE XREF: main+E5↑j
.text:0000000000002210                 mov     cs:remove_files, 0
.text:0000000000002217                 jmp     loc_2120
.text:0000000000002217 ; ---------------------------------------------------------------------------
.text:000000000000221C                 align 20h
.text:0000000000002220
.text:0000000000002220 loc_2220:                               ; CODE XREF: main+FB↑j
.text:0000000000002220                 mov     cs:elide_empty_files, 1
.text:0000000000002227                 jmp     loc_2120
.text:0000000000002227 ; ---------------------------------------------------------------------------
.text:000000000000222C                 align 10h
.text:0000000000002230
.text:0000000000002230 loc_2230:                               ; CODE XREF: main+12C↑j
.text:0000000000002230                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000002237                 mov     cs:suffix, rax
.text:000000000000223E                 jmp     loc_2120
.text:000000000000223E ; ---------------------------------------------------------------------------
.text:0000000000002243                 align 8
.text:0000000000002248
.text:0000000000002248 loc_2248:                               ; CODE XREF: main+123↑j
.text:0000000000002248                 cmp     eax, 0FFFFFF7Dh
.text:000000000000224D                 jnz     loc_2D8F
.text:0000000000002253                 sub     rsp, 8
.text:0000000000002257                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000225E                 mov     rcx, cs:Version
.text:0000000000002265                 push    0
.text:0000000000002267                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:000000000000226E                 lea     r8, aStuartKemp ; "Stuart Kemp"
.text:0000000000002275                 lea     rdx, unk_16096
.text:000000000000227C                 lea     rsi, aCsplit    ; "csplit"
.text:0000000000002283                 xor     eax, eax
.text:0000000000002285                 call    version_etc
.text:000000000000228A                 xor     edi, edi        ; status
.text:000000000000228C                 call    _exit
.text:0000000000002291 ; ---------------------------------------------------------------------------
.text:0000000000002291
.text:0000000000002291 loc_2291:                               ; CODE XREF: main+DC↑j
.text:0000000000002291                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000002297                 mov     edx, [rsp+138h+argc]
.text:000000000000229B                 sub     edx, eax
.text:000000000000229D                 sub     edx, 1
.text:00000000000022A0                 jle     loc_2D64
.text:00000000000022A6                 mov     rdi, cs:prefix
.text:00000000000022AD                 xor     eax, eax
.text:00000000000022AF                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000022B3                 repne scasb
.text:00000000000022B5                 mov     rax, rcx
.text:00000000000022B8                 not     rax
.text:00000000000022BB                 lea     rbx, [rax-1]
.text:00000000000022BF                 mov     rax, cs:suffix
.text:00000000000022C6                 test    rax, rax
.text:00000000000022C9                 jz      short loc_2316
.text:00000000000022CB                 mov     r8, cs:suffix
.text:00000000000022D2                 xor     edi, edi
.text:00000000000022D4                 movzx   ecx, byte ptr [r8]
.text:00000000000022D8                 mov     rdx, r8
.text:00000000000022DB                 test    cl, cl
.text:00000000000022DD                 jnz     short loc_22F5
.text:00000000000022DF                 jmp     loc_2C3B
.text:00000000000022DF ; ---------------------------------------------------------------------------
.text:00000000000022E4                 align 8
.text:00000000000022E8
.text:00000000000022E8 loc_22E8:                               ; CODE XREF: main+2A0↓j
.text:00000000000022E8                 mov     ecx, esi
.text:00000000000022EA
.text:00000000000022EA loc_22EA:                               ; CODE XREF: main+2B4↓j
.text:00000000000022EA                                         ; main+98B↓j
.text:00000000000022EA                 test    cl, cl
.text:00000000000022EC                 mov     rdx, rax
.text:00000000000022EF                 jz      loc_2AAB
.text:00000000000022F5
.text:00000000000022F5 loc_22F5:                               ; CODE XREF: main+27D↑j
.text:00000000000022F5                 cmp     cl, 25h ; '%'
.text:00000000000022F8                 lea     rax, [rdx+1]
.text:00000000000022FC                 movzx   esi, byte ptr [rdx+1]
.text:0000000000002300                 jnz     short loc_22E8
.text:0000000000002302                 cmp     sil, 25h ; '%'
.text:0000000000002306                 jnz     loc_2942
.text:000000000000230C                 movzx   ecx, byte ptr [rdx+2]
.text:0000000000002310                 lea     rax, [rdx+2]
.text:0000000000002314                 jmp     short loc_22EA
.text:0000000000002316 ; ---------------------------------------------------------------------------
.text:0000000000002316
.text:0000000000002316 loc_2316:                               ; CODE XREF: main+269↑j
.text:0000000000002316                 mov     eax, cs:digits
.text:000000000000231C                 cmp     eax, 9
.text:000000000000231F                 jbe     loc_2B9B
.text:0000000000002325                 movsxd  rdx, cs:digits
.text:000000000000232C                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002333                 sub     rax, rbx
.text:0000000000002336                 cmp     rax, rdx
.text:0000000000002339                 jb      loc_2AD7
.text:000000000000233F
.text:000000000000233F loc_233F:                               ; CODE XREF: main+A71↓j
.text:000000000000233F                                         ; main+B40↓j
.text:000000000000233F                 lea     rdi, [rbx+rdx+1]
.text:0000000000002344                 call    xmalloc
.text:0000000000002349                 mov     ebx, cs:optind@@GLIBC_2_2_5
.text:000000000000234F                 mov     cs:filename_space, rax
.text:0000000000002356                 lea     rsi, aLt+2      ; s2
.text:000000000000235D                 movsxd  rax, ebx
.text:0000000000002360                 mov     rbp, [r12+rax*8]
.text:0000000000002364                 lea     ebx, [rax+1]
.text:0000000000002367                 mov     cs:optind@@GLIBC_2_2_5, ebx
.text:000000000000236D                 mov     rdi, rbp        ; s1
.text:0000000000002370                 call    _strcmp
.text:0000000000002375                 test    eax, eax
.text:0000000000002377                 jnz     loc_2AE9
.text:000000000000237D
.text:000000000000237D loc_237D:                               ; CODE XREF: main+A9F↓j
.text:000000000000237D                 cmp     ebx, [rsp+138h+argc]
.text:0000000000002381                 jge     loc_2568
.text:0000000000002387                 movsxd  rax, ebx
.text:000000000000238A                 mov     rbp, [r12+rax*8]
.text:000000000000238E                 mov     [rsp+138h+var_128], rax
.text:0000000000002393                 lea     rax, [rsp+138h+var_108]
.text:0000000000002398                 mov     [rsp+138h+var_118], rax
.text:000000000000239D                 lea     rax, [rsp+138h+var_100]
.text:00000000000023A2                 mov     [rsp+138h+var_110], rax
.text:00000000000023A7                 movzx   eax, byte ptr [rbp+0]
.text:00000000000023AB                 cmp     al, 25h ; '%'
.text:00000000000023AD                 setz    r15b
.text:00000000000023B1                 cmp     al, 2Fh ; '/'
.text:00000000000023B3                 jz      loc_2478
.text:00000000000023B9                 nop     dword ptr [rax+00000000h]
.text:00000000000023C0
.text:00000000000023C0 loc_23C0:                               ; CODE XREF: main+412↓j
.text:00000000000023C0                 test    r15b, r15b
.text:00000000000023C3                 jnz     loc_2478
.text:00000000000023C9                 mov     rax, [rsp+138h+var_128]
.text:00000000000023CE                 lea     rbp, [r12+rax*8]
.text:00000000000023D2                 call    new_control_record
.text:00000000000023D7                 mov     rcx, [rsp+138h+var_118]
.text:00000000000023DC                 mov     rdi, [rbp+0]    ; nptr
.text:00000000000023E0                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:00000000000023E7                 xor     esi, esi
.text:00000000000023E9                 mov     [rax+18h], ebx
.text:00000000000023EC                 mov     edx, 0Ah
.text:00000000000023F1                 mov     r14, rax
.text:00000000000023F4                 call    xstrtoumax
.text:00000000000023F9                 test    eax, eax
.text:00000000000023FB                 jnz     loc_2C8A
.text:0000000000002401                 mov     rax, [rsp+138h+var_108]
.text:0000000000002406                 test    rax, rax
.text:0000000000002409                 jz      loc_2C5F
.text:000000000000240F                 mov     rdi, cs:last_val_7392
.text:0000000000002416                 cmp     rax, rdi
.text:0000000000002419                 jb      loc_2D1E
.text:000000000000241F                 jz      loc_279A
.text:0000000000002425
.text:0000000000002425 loc_2425:                               ; CODE XREF: main+76F↓j
.text:0000000000002425                 mov     cs:last_val_7392, rax
.text:000000000000242C                 mov     [r14+8], rax
.text:0000000000002430
.text:0000000000002430 loc_2430:                               ; CODE XREF: main+4A8↓j
.text:0000000000002430                                         ; main+4CA↓j
.text:0000000000002430                 lea     eax, [rbx+1]
.text:0000000000002433                 cmp     [rsp+138h+argc], eax
.text:0000000000002437                 jle     loc_2568
.text:000000000000243D                 mov     r13, [rsp+138h+var_128]
.text:0000000000002442                 add     r13, 1
.text:0000000000002446                 mov     rbp, [r12+r13*8]
.text:000000000000244A                 lea     r15, ds:0[r13*8]
.text:0000000000002452                 cmp     byte ptr [rbp+0], 7Bh ; '{'
.text:0000000000002456                 jz      loc_2722
.text:000000000000245C
.text:000000000000245C loc_245C:                               ; CODE XREF: main+735↓j
.text:000000000000245C                 cdqe
.text:000000000000245E                 mov     rbx, rax
.text:0000000000002461                 mov     [rsp+138h+var_128], rax
.text:0000000000002466                 movzx   eax, byte ptr [rbp+0]
.text:000000000000246A                 cmp     al, 25h ; '%'
.text:000000000000246C                 setz    r15b
.text:0000000000002470                 cmp     al, 2Fh ; '/'
.text:0000000000002472                 jnz     loc_23C0
.text:0000000000002478
.text:0000000000002478 loc_2478:                               ; CODE XREF: main+353↑j
.text:0000000000002478                                         ; main+363↑j
.text:0000000000002478                 movsx   esi, al         ; c
.text:000000000000247B                 lea     rax, [rbp+1]
.text:000000000000247F                 mov     r14d, esi
.text:0000000000002482                 mov     rdi, rax        ; s
.text:0000000000002485                 mov     [rsp+138h+var_120], rax
.text:000000000000248A                 call    _strrchr
.text:000000000000248F                 test    rax, rax
.text:0000000000002492                 mov     r13, rax
.text:0000000000002495                 jz      loc_2CF4
.text:000000000000249B                 call    new_control_record
.text:00000000000024A0                 mov     edi, 100h
.text:00000000000024A5                 mov     [rax+1Dh], r15b
.text:00000000000024A9                 mov     [rax+18h], ebx
.text:00000000000024AC                 mov     byte ptr [rax+1Eh], 1
.text:00000000000024B0                 mov     qword ptr [rax+20h], 0
.text:00000000000024B8                 mov     r14, rax
.text:00000000000024BB                 mov     qword ptr [rax+28h], 0
.text:00000000000024C3                 call    xmalloc
.text:00000000000024C8                 mov     rsi, r13
.text:00000000000024CB                 mov     rdi, [rsp+138h+var_120]
.text:00000000000024D0                 lea     rdx, [r14+20h]
.text:00000000000024D4                 sub     rsi, rbp
.text:00000000000024D7                 mov     [r14+40h], rax
.text:00000000000024DB                 mov     qword ptr [r14+48h], 0
.text:00000000000024E3                 sub     rsi, 1
.text:00000000000024E7                 mov     cs:rpl_re_syntax_options, 2C6h
.text:00000000000024F2                 call    rpl_re_compile_pattern
.text:00000000000024F7                 test    rax, rax
.text:00000000000024FA                 mov     r15, rax
.text:00000000000024FD                 jnz     loc_2CBD
.text:0000000000002503                 cmp     byte ptr [r13+1], 0
.text:0000000000002508                 jz      loc_2430
.text:000000000000250E                 lea     rdi, [r13+1]    ; nptr
.text:0000000000002512                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002519                 xor     esi, esi
.text:000000000000251B                 mov     rcx, r14
.text:000000000000251E                 mov     edx, 0Ah
.text:0000000000002523                 call    xstrtoimax
.text:0000000000002528                 test    eax, eax
.text:000000000000252A                 jz      loc_2430
.text:0000000000002530                 mov     rdi, rbp
.text:0000000000002533                 call    quote
.text:0000000000002538                 lea     rsi, aSIntegerExpect ; "%s: integer expected after delimiter"
.text:000000000000253F                 mov     rbx, rax
.text:0000000000002542                 mov     edx, 5          ; category
.text:0000000000002547                 xor     edi, edi        ; domainname
.text:0000000000002549                 call    _dcgettext
.text:000000000000254E                 mov     rcx, rbx
.text:0000000000002551                 mov     rdx, rax        ; format
.text:0000000000002554                 xor     esi, esi        ; errnum
.text:0000000000002556                 mov     edi, 1          ; status
.text:000000000000255B                 xor     eax, eax
.text:000000000000255D                 call    _error
.text:0000000000002562                 nop     word ptr [rax+rax+00h]
.text:0000000000002568
.text:0000000000002568 loc_2568:                               ; CODE XREF: main+321↑j
.text:0000000000002568                                         ; main+3D7↑j ...
.text:0000000000002568                 lea     rbx, sig_7486
.text:000000000000256F                 lea     rdi, caught_signals ; set
.text:0000000000002576                 lea     r13, [rsp+138h+var_F8]
.text:000000000000257B                 lea     r15, caught_signals
.text:0000000000002582                 lea     r14, [rbx+2Ch]
.text:0000000000002586                 mov     rbp, rbx
.text:0000000000002589                 call    _sigemptyset
.text:000000000000258E
.text:000000000000258E loc_258E:                               ; CODE XREF: main+559↓j
.text:000000000000258E                 mov     r12d, [rbp+0]
.text:0000000000002592                 xor     esi, esi        ; act
.text:0000000000002594                 mov     rdx, r13        ; oact
.text:0000000000002597                 mov     edi, r12d       ; sig
.text:000000000000259A                 call    _sigaction
.text:000000000000259F                 cmp     [rsp+138h+var_F8], 1
.text:00000000000025A5                 jz      short loc_25B2
.text:00000000000025A7                 mov     esi, r12d       ; signo
.text:00000000000025AA                 mov     rdi, r15        ; set
.text:00000000000025AD                 call    _sigaddset
.text:00000000000025B2
.text:00000000000025B2 loc_25B2:                               ; CODE XREF: main+545↑j
.text:00000000000025B2                 add     rbp, 4
.text:00000000000025B6                 cmp     r14, rbp
.text:00000000000025B9                 jnz     short loc_258E
.text:00000000000025BB                 lea     rax, interrupt_handler
.text:00000000000025C2                 lea     rdi, [rsp+138h+var_F0]
.text:00000000000025C7                 lea     rsi, caught_signals
.text:00000000000025CE                 mov     ecx, 20h ; ' '
.text:00000000000025D3                 mov     [rsp+138h+var_70], 0
.text:00000000000025DE                 lea     r14, caught_signals
.text:00000000000025E5                 mov     [rsp+138h+var_F8], rax
.text:00000000000025EA                 rep movsd
.text:00000000000025EC                 jmp     short loc_25F9
.text:00000000000025EC ; ---------------------------------------------------------------------------
.text:00000000000025EE                 align 10h
.text:00000000000025F0
.text:00000000000025F0 loc_25F0:                               ; CODE XREF: main+5A9↓j
.text:00000000000025F0                 add     rbx, 4
.text:00000000000025F4                 cmp     rbp, rbx
.text:00000000000025F7                 jz      short loc_2621
.text:00000000000025F9
.text:00000000000025F9 loc_25F9:                               ; CODE XREF: main+58C↑j
.text:00000000000025F9                                         ; main+5BF↓j
.text:00000000000025F9                 mov     r12d, [rbx]
.text:00000000000025FC                 mov     rdi, r14        ; set
.text:00000000000025FF                 mov     esi, r12d       ; signo
.text:0000000000002602                 call    _sigismember
.text:0000000000002607                 test    eax, eax
.text:0000000000002609                 jz      short loc_25F0
.text:000000000000260B                 xor     edx, edx        ; oact
.text:000000000000260D                 mov     rsi, r13        ; act
.text:0000000000002610                 mov     edi, r12d       ; sig
.text:0000000000002613                 add     rbx, 4
.text:0000000000002617                 call    _sigaction
.text:000000000000261C                 cmp     rbp, rbx
.text:000000000000261F                 jnz     short loc_25F9
.text:0000000000002621
.text:0000000000002621 loc_2621:                               ; CODE XREF: main+597↑j
.text:0000000000002621                 mov     qword ptr [rsp+138h+argc], 0
.text:000000000000262A
.text:000000000000262A loc_262A:                               ; CODE XREF: main+9AF↓j
.text:000000000000262A                 mov     rax, qword ptr [rsp+138h+argc]
.text:000000000000262F                 cmp     rax, cs:control_used
.text:0000000000002636                 jnb     loc_2BA5
.text:000000000000263C                 imul    r15, qword ptr [rsp+138h+argc], 60h
.text:0000000000002642                 mov     r12, cs:controls
.text:0000000000002649                 xor     r14d, r14d
.text:000000000000264C                 cmp     byte ptr [r12+r15+1Eh], 0
.text:0000000000002652                 jz      loc_2823
.text:0000000000002658
.text:0000000000002658 loc_2658:                               ; CODE XREF: main+A3C↓j
.text:0000000000002658                 lea     rbx, [r12+r15]
.text:000000000000265C                 cmp     byte ptr [rbx+1Ch], 0
.text:0000000000002660                 jnz     short loc_266C
.text:0000000000002662                 cmp     r14, [rbx+10h]
.text:0000000000002666                 ja      loc_2A09
.text:000000000000266C
.text:000000000000266C loc_266C:                               ; CODE XREF: main+600↑j
.text:000000000000266C                 movzx   r12d, byte ptr [rbx+1Dh]
.text:0000000000002671                 test    r12b, r12b
.text:0000000000002674                 jz      loc_2AA1
.text:000000000000267A
.text:000000000000267A loc_267A:                               ; CODE XREF: main+A46↓j
.text:000000000000267A                 cmp     cs:suppress_matched, 0
.text:0000000000002681                 jz      short loc_2691
.text:0000000000002683                 cmp     cs:current_line, 0
.text:000000000000268B                 jnz     loc_2C05
.text:0000000000002691
.text:0000000000002691 loc_2691:                               ; CODE XREF: main+621↑j
.text:0000000000002691                                         ; main+BAA↓j
.text:0000000000002691                 cmp     qword ptr [rbx], 0
.text:0000000000002695                 lea     rbp, [rbx+20h]
.text:0000000000002699                 jns     short loc_26E6
.text:000000000000269B                 jmp     loc_28F8
.text:00000000000026A0 ; ---------------------------------------------------------------------------
.text:00000000000026A0
.text:00000000000026A0 loc_26A0:                               ; CODE XREF: main+6A0↓j
.text:00000000000026A0                 mov     rcx, [rax]
.text:00000000000026A3                 mov     rsi, [rax+8]
.text:00000000000026A7                 mov     rdi, rbp
.text:00000000000026AA                 cmp     byte ptr [rsi+rcx-1], 0Ah
.text:00000000000026AF                 lea     rdx, [rcx-1]
.text:00000000000026B3                 cmovnz  rdx, rcx
.text:00000000000026B7                 xor     r9d, r9d
.text:00000000000026BA                 xor     ecx, ecx
.text:00000000000026BC                 mov     r8, rdx
.text:00000000000026BF                 call    rpl_re_search
.text:00000000000026C4                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000026C8                 jz      loc_2E0A
.text:00000000000026CE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000026D2                 jnz     loc_2A14
.text:00000000000026D8                 call    remove_line
.text:00000000000026DD                 test    r12b, r12b
.text:00000000000026E0                 jz      loc_2ADC
.text:00000000000026E6
.text:00000000000026E6 loc_26E6:                               ; CODE XREF: main+639↑j
.text:00000000000026E6                                         ; main+A84↓j
.text:00000000000026E6                 mov     rax, cs:current_line
.text:00000000000026ED                 lea     rdi, [rax+1]
.text:00000000000026F1                 mov     cs:current_line, rdi
.text:00000000000026F8                 call    find_line
.text:00000000000026FD                 test    rax, rax
.text:0000000000002700                 jnz     short loc_26A0
.text:0000000000002702
.text:0000000000002702 loc_2702:                               ; CODE XREF: main+8B4↓j
.text:0000000000002702                 cmp     byte ptr [rbx+1Ch], 0
.text:0000000000002706                 jz      loc_2E9C
.text:000000000000270C                 test    r12b, r12b
.text:000000000000270F                 jnz     short loc_271B
.text:0000000000002711                 call    dump_rest_of_file
.text:0000000000002716                 call    close_output_file
.text:000000000000271B
.text:000000000000271B loc_271B:                               ; CODE XREF: main+6AF↑j
.text:000000000000271B                 xor     edi, edi        ; status
.text:000000000000271D                 call    _exit
.text:0000000000002722 ; ---------------------------------------------------------------------------
.text:0000000000002722
.text:0000000000002722 loc_2722:                               ; CODE XREF: main+3F6↑j
.text:0000000000002722                 xor     eax, eax
.text:0000000000002724                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002728                 mov     rdi, rbp
.text:000000000000272B                 repne scasb
.text:000000000000272D                 mov     rax, rcx
.text:0000000000002730                 not     rax
.text:0000000000002733                 lea     r13, [rbp+rax-2]
.text:0000000000002738                 cmp     byte ptr [r13+0], 7Dh ; '}'
.text:000000000000273D                 jnz     loc_2E6A
.text:0000000000002743                 lea     rdi, [rbp+1]    ; nptr
.text:0000000000002747                 lea     rax, [r13-1]
.text:000000000000274B                 mov     byte ptr [r13+0], 0
.text:0000000000002750                 cmp     rdi, rax
.text:0000000000002753                 jz      short loc_27D4
.text:0000000000002755
.text:0000000000002755 loc_2755:                               ; CODE XREF: main+778↓j
.text:0000000000002755                 mov     rcx, [rsp+138h+var_110]
.text:000000000000275A                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002761                 xor     esi, esi
.text:0000000000002763                 mov     edx, 0Ah
.text:0000000000002768                 call    xstrtoumax
.text:000000000000276D                 test    eax, eax
.text:000000000000276F                 jnz     loc_2E30
.text:0000000000002775                 mov     rax, [rsp+138h+var_100]
.text:000000000000277A                 mov     [r14+10h], rax
.text:000000000000277E
.text:000000000000277E loc_277E:                               ; CODE XREF: main+783↓j
.text:000000000000277E                 lea     eax, [rbx+2]
.text:0000000000002781                 cmp     [rsp+138h+argc], eax
.text:0000000000002785                 mov     byte ptr [r13+0], 7Dh ; '}'
.text:000000000000278A                 jle     loc_2568
.text:0000000000002790                 mov     rbp, [r12+r15+8]
.text:0000000000002795                 jmp     loc_245C
.text:000000000000279A ; ---------------------------------------------------------------------------
.text:000000000000279A
.text:000000000000279A loc_279A:                               ; CODE XREF: main+3BF↑j
.text:000000000000279A                 mov     rdi, [rbp+0]
.text:000000000000279E                 call    quote
.text:00000000000027A3                 lea     rsi, aWarningLineNum ; "warning: line number %s is the same as "...
.text:00000000000027AA                 mov     rbp, rax
.text:00000000000027AD                 mov     edx, 5          ; category
.text:00000000000027B2                 xor     edi, edi        ; domainname
.text:00000000000027B4                 call    _dcgettext
.text:00000000000027B9                 mov     rcx, rbp
.text:00000000000027BC                 mov     rdx, rax        ; format
.text:00000000000027BF                 xor     esi, esi        ; errnum
.text:00000000000027C1                 xor     eax, eax
.text:00000000000027C3                 xor     edi, edi        ; status
.text:00000000000027C5                 call    _error
.text:00000000000027CA                 mov     rax, [rsp+138h+var_108]
.text:00000000000027CF                 jmp     loc_2425
.text:00000000000027D4 ; ---------------------------------------------------------------------------
.text:00000000000027D4
.text:00000000000027D4 loc_27D4:                               ; CODE XREF: main+6F3↑j
.text:00000000000027D4                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:00000000000027D8                 jnz     loc_2755
.text:00000000000027DE                 mov     byte ptr [r14+1Ch], 1
.text:00000000000027E3                 jmp     short loc_277E
.text:00000000000027E5 ; ---------------------------------------------------------------------------
.text:00000000000027E5
.text:00000000000027E5 loc_27E5:                               ; CODE XREF: main+810↓j
.text:00000000000027E5                 call    close_output_file
.text:00000000000027EA                 cmp     cs:suppress_matched, 0
.text:00000000000027F1                 jnz     loc_28B1
.text:00000000000027F7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002800
.text:0000000000002800 loc_2800:                               ; CODE XREF: main+84B↓j
.text:0000000000002800                                         ; main+856↓j
.text:0000000000002800                 mov     rax, cs:current_line
.text:0000000000002807                 lea     rdi, [rax+1]
.text:000000000000280B                 call    find_line
.text:0000000000002810                 test    rax, rax
.text:0000000000002813                 jz      loc_2933
.text:0000000000002819
.text:0000000000002819 loc_2819:                               ; CODE XREF: main+8DA↓j
.text:0000000000002819                 mov     r12, cs:controls
.text:0000000000002820                 mov     r14, r13
.text:0000000000002823
.text:0000000000002823 loc_2823:                               ; CODE XREF: main+5F2↑j
.text:0000000000002823                 add     r12, r15
.text:0000000000002826                 cmp     byte ptr [r12+1Ch], 0
.text:000000000000282C                 jnz     short loc_2839
.text:000000000000282E                 cmp     r14, [r12+10h]
.text:0000000000002833                 ja      loc_2A09
.text:0000000000002839
.text:0000000000002839 loc_2839:                               ; CODE XREF: main+7CC↑j
.text:0000000000002839                 mov     rbp, [r12+8]
.text:000000000000283E                 lea     r13, [r14+1]
.text:0000000000002842                 call    create_output_file
.text:0000000000002847                 mov     rax, cs:current_line
.text:000000000000284E                 imul    rbp, r13
.text:0000000000002852                 lea     rdi, [rax+1]
.text:0000000000002856                 call    find_line
.text:000000000000285B                 test    rax, rax
.text:000000000000285E                 jz      loc_2919
.text:0000000000002864
.text:0000000000002864 loc_2864:                               ; CODE XREF: main+8C0↓j
.text:0000000000002864                 call    get_first_line_in_buffer
.text:0000000000002869                 cmp     rbp, rax
.text:000000000000286C                 lea     rbx, [rax+1]
.text:0000000000002870                 jbe     loc_27E5
.text:0000000000002876                 add     rbp, 1
.text:000000000000287A                 nop     word ptr [rax+rax+00h]
.text:0000000000002880
.text:0000000000002880 loc_2880:                               ; CODE XREF: main+83D↓j
.text:0000000000002880                 call    remove_line
.text:0000000000002885                 test    rax, rax
.text:0000000000002888                 jz      loc_2926
.text:000000000000288E                 mov     rdi, rax
.text:0000000000002891                 add     rbx, 1
.text:0000000000002895                 call    save_line_to_file
.text:000000000000289A                 cmp     rbx, rbp
.text:000000000000289D                 jnz     short loc_2880
.text:000000000000289F                 call    close_output_file
.text:00000000000028A4                 cmp     cs:suppress_matched, 0
.text:00000000000028AB                 jz      loc_2800
.text:00000000000028B1
.text:00000000000028B1 loc_28B1:                               ; CODE XREF: main+791↑j
.text:00000000000028B1                 call    remove_line
.text:00000000000028B6                 jmp     loc_2800
.text:00000000000028B6 ; ---------------------------------------------------------------------------
.text:00000000000028BB                 align 20h
.text:00000000000028C0
.text:00000000000028C0 loc_28C0:                               ; CODE XREF: main+8B2↓j
.text:00000000000028C0                 mov     rcx, [rax]
.text:00000000000028C3                 mov     rsi, [rax+8]
.text:00000000000028C7                 mov     rdi, rbp
.text:00000000000028CA                 cmp     byte ptr [rsi+rcx-1], 0Ah
.text:00000000000028CF                 lea     rdx, [rcx-1]
.text:00000000000028D3                 cmovnz  rdx, rcx
.text:00000000000028D7                 xor     r9d, r9d
.text:00000000000028DA                 xor     ecx, ecx
.text:00000000000028DC                 mov     r8, rdx
.text:00000000000028DF                 call    rpl_re_search
.text:00000000000028E4                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000028E8                 jz      loc_2E0A
.text:00000000000028EE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000028F2                 jnz     loc_2A14
.text:00000000000028F8
.text:00000000000028F8 loc_28F8:                               ; CODE XREF: main+63B↑j
.text:00000000000028F8                 mov     rax, cs:current_line
.text:00000000000028FF                 lea     rdi, [rax+1]
.text:0000000000002903                 mov     cs:current_line, rdi
.text:000000000000290A                 call    find_line
.text:000000000000290F                 test    rax, rax
.text:0000000000002912                 jnz     short loc_28C0
.text:0000000000002914                 jmp     loc_2702
.text:0000000000002919 ; ---------------------------------------------------------------------------
.text:0000000000002919
.text:0000000000002919 loc_2919:                               ; CODE XREF: main+7FE↑j
.text:0000000000002919                 cmp     cs:suppress_matched, 0
.text:0000000000002920                 jz      loc_2864
.text:0000000000002926
.text:0000000000002926 loc_2926:                               ; CODE XREF: main+828↑j
.text:0000000000002926                                         ; main+8E0↓j
.text:0000000000002926                 mov     rdi, [r12+8]
.text:000000000000292B                 mov     rsi, r14
.text:000000000000292E                 call    handle_line_error_isra_1
.text:0000000000002933 ; ---------------------------------------------------------------------------
.text:0000000000002933
.text:0000000000002933 loc_2933:                               ; CODE XREF: main+7B3↑j
.text:0000000000002933                 cmp     cs:suppress_matched, 0
.text:000000000000293A                 jnz     loc_2819
.text:0000000000002940                 jmp     short loc_2926
.text:0000000000002942 ; ---------------------------------------------------------------------------
.text:0000000000002942
.text:0000000000002942 loc_2942:                               ; CODE XREF: main+2A6↑j
.text:0000000000002942                 test    dil, dil
.text:0000000000002945                 jnz     loc_2EAB
.text:000000000000294B                 xor     edi, edi
.text:000000000000294D
.text:000000000000294D loc_294D:                               ; CODE XREF: main+90A↓j
.text:000000000000294D                 movzx   edx, byte ptr [rax]
.text:0000000000002950                 mov     rsi, rax
.text:0000000000002953                 cmp     dl, 27h ; '''
.text:0000000000002956                 jz      loc_2A01
.text:000000000000295C                 jg      short loc_296C
.text:000000000000295E                 cmp     dl, 23h ; '#'
.text:0000000000002961                 jnz     short loc_2976
.text:0000000000002963                 or      edi, 2
.text:0000000000002966
.text:0000000000002966 loc_2966:                               ; CODE XREF: main+90F↓j
.text:0000000000002966                                         ; main+914↓j ...
.text:0000000000002966                 add     rax, 1
.text:000000000000296A                 jmp     short loc_294D
.text:000000000000296C ; ---------------------------------------------------------------------------
.text:000000000000296C
.text:000000000000296C loc_296C:                               ; CODE XREF: main+8FC↑j
.text:000000000000296C                 cmp     dl, 2Dh ; '-'
.text:000000000000296F                 jz      short loc_2966
.text:0000000000002971                 cmp     dl, 30h ; '0'
.text:0000000000002974                 jz      short loc_2966
.text:0000000000002976
.text:0000000000002976 loc_2976:                               ; CODE XREF: main+901↑j
.text:0000000000002976                 movsx   eax, dl
.text:0000000000002979                 sub     eax, 30h ; '0'
.text:000000000000297C                 cmp     eax, 9
.text:000000000000297F                 ja      short loc_2999
.text:0000000000002981                 nop     dword ptr [rax+00000000h]
.text:0000000000002988
.text:0000000000002988 loc_2988:                               ; CODE XREF: main+937↓j
.text:0000000000002988                 add     rsi, 1
.text:000000000000298C                 movsx   eax, byte ptr [rsi]
.text:000000000000298F                 mov     edx, eax
.text:0000000000002991                 sub     eax, 30h ; '0'
.text:0000000000002994                 cmp     eax, 9
.text:0000000000002997                 jbe     short loc_2988
.text:0000000000002999
.text:0000000000002999 loc_2999:                               ; CODE XREF: main+91F↑j
.text:0000000000002999                 cmp     dl, 2Eh ; '.'
.text:000000000000299C                 jz      short loc_29F0
.text:000000000000299E
.text:000000000000299E loc_299E:                               ; CODE XREF: main+99D↓j
.text:000000000000299E                 movzx   r13d, byte ptr [rsi]
.text:00000000000029A2                 cmp     r13b, 69h ; 'i'
.text:00000000000029A6                 mov     rbp, r13
.text:00000000000029A9                 jz      loc_2BF8
.text:00000000000029AF                 jle     loc_2B44
.text:00000000000029B5                 cmp     r13b, 75h ; 'u'
.text:00000000000029B9                 jz      loc_2BEE
.text:00000000000029BF                 cmp     r13b, 78h ; 'x'
.text:00000000000029C3                 jz      short loc_29CF
.text:00000000000029C5                 cmp     r13b, 6Fh ; 'o'
.text:00000000000029C9                 jnz     loc_2B61
.text:00000000000029CF
.text:00000000000029CF loc_29CF:                               ; CODE XREF: main+963↑j
.text:00000000000029CF                                         ; main+AE8↓j
.text:00000000000029CF                 mov     eax, 2
.text:00000000000029D4
.text:00000000000029D4 loc_29D4:                               ; CODE XREF: main+B93↓j
.text:00000000000029D4                                         ; main+BA0↓j
.text:00000000000029D4                 not     eax
.text:00000000000029D6                 and     edi, eax
.text:00000000000029D8                 jnz     loc_2DD3
.text:00000000000029DE                 movzx   ecx, byte ptr [rsi+1]
.text:00000000000029E2                 lea     rax, [rsi+1]
.text:00000000000029E6                 mov     edi, 1
.text:00000000000029EB                 jmp     loc_22EA
.text:00000000000029F0 ; ---------------------------------------------------------------------------
.text:00000000000029F0
.text:00000000000029F0 loc_29F0:                               ; CODE XREF: main+93C↑j
.text:00000000000029F0                                         ; main+99F↓j
.text:00000000000029F0                 add     rsi, 1
.text:00000000000029F4                 movsx   eax, byte ptr [rsi]
.text:00000000000029F7                 sub     eax, 30h ; '0'
.text:00000000000029FA                 cmp     eax, 9
.text:00000000000029FD                 ja      short loc_299E
.text:00000000000029FF                 jmp     short loc_29F0
.text:0000000000002A01 ; ---------------------------------------------------------------------------
.text:0000000000002A01
.text:0000000000002A01 loc_2A01:                               ; CODE XREF: main+8F6↑j
.text:0000000000002A01                 or      edi, 1
.text:0000000000002A04                 jmp     loc_2966
.text:0000000000002A09 ; ---------------------------------------------------------------------------
.text:0000000000002A09
.text:0000000000002A09 loc_2A09:                               ; CODE XREF: main+606↑j
.text:0000000000002A09                                         ; main+7D3↑j
.text:0000000000002A09                 add     qword ptr [rsp+138h+argc], 1
.text:0000000000002A0F                 jmp     loc_262A
.text:0000000000002A14 ; ---------------------------------------------------------------------------
.text:0000000000002A14
.text:0000000000002A14 loc_2A14:                               ; CODE XREF: main+672↑j
.text:0000000000002A14                                         ; main+892↑j
.text:0000000000002A14                 mov     rax, cs:current_line
.text:0000000000002A1B                 add     rax, [rbx]
.text:0000000000002A1E                 mov     rbp, rax
.text:0000000000002A21                 mov     [rsp+138h+var_128], rax
.text:0000000000002A26                 mov     eax, [rbx+18h]
.text:0000000000002A29                 mov     dword ptr [rsp+138h+var_120], eax
.text:0000000000002A2D                 call    get_first_line_in_buffer
.text:0000000000002A32                 cmp     rbp, rax
.text:0000000000002A35                 jb      loc_2F10
.text:0000000000002A3B                 mov     r13, [rsp+138h+var_128]
.text:0000000000002A40                 sub     r13, rax
.text:0000000000002A43                 jz      short loc_2A76
.text:0000000000002A45                 xor     ebp, ebp
.text:0000000000002A47                 jmp     short loc_2A59
.text:0000000000002A47 ; ---------------------------------------------------------------------------
.text:0000000000002A49                 align 10h
.text:0000000000002A50
.text:0000000000002A50 loc_2A50:                               ; CODE XREF: main+A0A↓j
.text:0000000000002A50                                         ; main+A14↓j
.text:0000000000002A50                 add     rbp, 1
.text:0000000000002A54                 cmp     r13, rbp
.text:0000000000002A57                 jz      short loc_2A76
.text:0000000000002A59
.text:0000000000002A59 loc_2A59:                               ; CODE XREF: main+9E7↑j
.text:0000000000002A59                 call    remove_line
.text:0000000000002A5E                 test    rax, rax
.text:0000000000002A61                 jz      loc_2ECF
.text:0000000000002A67                 test    r12b, r12b
.text:0000000000002A6A                 jnz     short loc_2A50
.text:0000000000002A6C                 mov     rdi, rax
.text:0000000000002A6F                 call    save_line_to_file
.text:0000000000002A74                 jmp     short loc_2A50
.text:0000000000002A76 ; ---------------------------------------------------------------------------
.text:0000000000002A76
.text:0000000000002A76 loc_2A76:                               ; CODE XREF: main+9E3↑j
.text:0000000000002A76                                         ; main+9F7↑j
.text:0000000000002A76                 test    r12b, r12b
.text:0000000000002A79                 jz      loc_2C0F
.text:0000000000002A7F
.text:0000000000002A7F loc_2A7F:                               ; CODE XREF: main+BB4↓j
.text:0000000000002A7F                 cmp     qword ptr [rbx], 0
.text:0000000000002A83                 jle     short loc_2A91
.text:0000000000002A85                 mov     rax, [rsp+138h+var_128]
.text:0000000000002A8A                 mov     cs:current_line, rax
.text:0000000000002A91
.text:0000000000002A91 loc_2A91:                               ; CODE XREF: main+A23↑j
.text:0000000000002A91                 add     r14, 1
.text:0000000000002A95                 mov     r12, cs:controls
.text:0000000000002A9C                 jmp     loc_2658
.text:0000000000002AA1 ; ---------------------------------------------------------------------------
.text:0000000000002AA1
.text:0000000000002AA1 loc_2AA1:                               ; CODE XREF: main+614↑j
.text:0000000000002AA1                 call    create_output_file
.text:0000000000002AA6                 jmp     loc_267A
.text:0000000000002AAB ; ---------------------------------------------------------------------------
.text:0000000000002AAB
.text:0000000000002AAB loc_2AAB:                               ; CODE XREF: main+28F↑j
.text:0000000000002AAB                 test    dil, dil
.text:0000000000002AAE                 jz      loc_2C3B
.text:0000000000002AB4                 or      r9d, 0FFFFFFFFh
.text:0000000000002AB8                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002ABC                 mov     edx, 1
.text:0000000000002AC1                 xor     esi, esi
.text:0000000000002AC3                 xor     edi, edi
.text:0000000000002AC5                 xor     eax, eax
.text:0000000000002AC7                 call    ___snprintf_chk
.text:0000000000002ACC                 test    eax, eax
.text:0000000000002ACE                 movsxd  rdx, eax
.text:0000000000002AD1                 jns     loc_233F
.text:0000000000002AD7
.text:0000000000002AD7 loc_2AD7:                               ; CODE XREF: main+2D9↑j
.text:0000000000002AD7                 call    xalloc_die
.text:0000000000002ADC ; ---------------------------------------------------------------------------
.text:0000000000002ADC
.text:0000000000002ADC loc_2ADC:                               ; CODE XREF: main+680↑j
.text:0000000000002ADC                 mov     rdi, rax
.text:0000000000002ADF                 call    save_line_to_file
.text:0000000000002AE4                 jmp     loc_26E6
.text:0000000000002AE9 ; ---------------------------------------------------------------------------
.text:0000000000002AE9
.text:0000000000002AE9 loc_2AE9:                               ; CODE XREF: main+317↑j
.text:0000000000002AE9                 xor     ecx, ecx
.text:0000000000002AEB                 xor     edx, edx        ; oflag
.text:0000000000002AED                 xor     edi, edi        ; fd2
.text:0000000000002AEF                 mov     rsi, rbp        ; file
.text:0000000000002AF2                 call    fd_reopen
.text:0000000000002AF7                 test    eax, eax
.text:0000000000002AF9                 mov     ebx, cs:optind@@GLIBC_2_2_5
.text:0000000000002AFF                 jns     loc_237D
.text:0000000000002B05                 mov     rsi, rbp
.text:0000000000002B08                 mov     edi, 4
.text:0000000000002B0D                 call    quotearg_style
.text:0000000000002B12                 lea     rsi, aCannotOpenSFor ; "cannot open %s for reading"
.text:0000000000002B19                 mov     edx, 5          ; category
.text:0000000000002B1E                 xor     edi, edi        ; domainname
.text:0000000000002B20                 mov     rbp, rax
.text:0000000000002B23                 call    _dcgettext
.text:0000000000002B28                 mov     rbx, rax
.text:0000000000002B2B                 call    ___errno_location
.text:0000000000002B30                 mov     esi, [rax]      ; errnum
.text:0000000000002B32                 mov     rcx, rbp
.text:0000000000002B35                 mov     rdx, rbx        ; format
.text:0000000000002B38                 mov     edi, 1          ; status
.text:0000000000002B3D                 xor     eax, eax
.text:0000000000002B3F                 call    _error
.text:0000000000002B44
.text:0000000000002B44 loc_2B44:                               ; CODE XREF: main+94F↑j
.text:0000000000002B44                 cmp     r13b, 58h ; 'X'
.text:0000000000002B48                 jz      loc_29CF
.text:0000000000002B4E                 cmp     r13b, 64h ; 'd'
.text:0000000000002B52                 jz      loc_2BF8
.text:0000000000002B58                 test    r13b, r13b
.text:0000000000002B5B                 jz      loc_2F22
.text:0000000000002B61
.text:0000000000002B61 loc_2B61:                               ; CODE XREF: main+969↑j
.text:0000000000002B61                 call    ___ctype_b_loc
.text:0000000000002B66                 mov     rax, [rax]
.text:0000000000002B69                 mov     edx, 5          ; category
.text:0000000000002B6E                 test    byte ptr [rax+rbp*2+1], 40h
.text:0000000000002B73                 jz      loc_2C19
.text:0000000000002B79                 lea     rsi, aInvalidConvers ; "invalid conversion specifier in suffix:"...
.text:0000000000002B80                 xor     edi, edi        ; domainname
.text:0000000000002B82                 call    _dcgettext
.text:0000000000002B87                 mov     ecx, r13d
.text:0000000000002B8A                 mov     rdx, rax        ; format
.text:0000000000002B8D                 xor     esi, esi        ; errnum
.text:0000000000002B8F                 mov     edi, 1          ; status
.text:0000000000002B94                 xor     eax, eax
.text:0000000000002B96                 call    _error
.text:0000000000002B9B
.text:0000000000002B9B loc_2B9B:                               ; CODE XREF: main+2BF↑j
.text:0000000000002B9B                 mov     edx, 0Ah
.text:0000000000002BA0                 jmp     loc_233F
.text:0000000000002BA5 ; ---------------------------------------------------------------------------
.text:0000000000002BA5
.text:0000000000002BA5 loc_2BA5:                               ; CODE XREF: main+5D6↑j
.text:0000000000002BA5                 call    create_output_file
.text:0000000000002BAA                 call    dump_rest_of_file
.text:0000000000002BAF                 call    close_output_file
.text:0000000000002BB4                 xor     edi, edi        ; fd
.text:0000000000002BB6                 call    _close
.text:0000000000002BBB                 test    eax, eax
.text:0000000000002BBD                 jnz     loc_2DA5
.text:0000000000002BC3                 xor     eax, eax
.text:0000000000002BC5                 mov     rcx, [rsp+138h+var_40]
.text:0000000000002BCD                 xor     rcx, fs:28h
.text:0000000000002BD6                 jnz     loc_2DA0
.text:0000000000002BDC                 add     rsp, 108h
.text:0000000000002BE3                 pop     rbx
.text:0000000000002BE4                 pop     rbp
.text:0000000000002BE5                 pop     r12
.text:0000000000002BE7                 pop     r13
.text:0000000000002BE9                 pop     r14
.text:0000000000002BEB                 pop     r15
.text:0000000000002BED                 retn
.text:0000000000002BEE ; ---------------------------------------------------------------------------
.text:0000000000002BEE
.text:0000000000002BEE loc_2BEE:                               ; CODE XREF: main+959↑j
.text:0000000000002BEE                 mov     eax, 1
.text:0000000000002BF3                 jmp     loc_29D4
.text:0000000000002BF8 ; ---------------------------------------------------------------------------
.text:0000000000002BF8
.text:0000000000002BF8 loc_2BF8:                               ; CODE XREF: main+949↑j
.text:0000000000002BF8                                         ; main+AF2↑j
.text:0000000000002BF8                 mov     byte ptr [rsi], 75h ; 'u'
.text:0000000000002BFB                 mov     eax, 1
.text:0000000000002C00                 jmp     loc_29D4
.text:0000000000002C05 ; ---------------------------------------------------------------------------
.text:0000000000002C05
.text:0000000000002C05 loc_2C05:                               ; CODE XREF: main+62B↑j
.text:0000000000002C05                 call    remove_line
.text:0000000000002C0A                 jmp     loc_2691
.text:0000000000002C0F ; ---------------------------------------------------------------------------
.text:0000000000002C0F
.text:0000000000002C0F loc_2C0F:                               ; CODE XREF: main+A19↑j
.text:0000000000002C0F                 call    close_output_file
.text:0000000000002C14                 jmp     loc_2A7F
.text:0000000000002C19 ; ---------------------------------------------------------------------------
.text:0000000000002C19
.text:0000000000002C19 loc_2C19:                               ; CODE XREF: main+B13↑j
.text:0000000000002C19                 lea     rsi, aInvalidConvers_0 ; "invalid conversion specifier in suffix:"...
.text:0000000000002C20                 xor     edi, edi        ; domainname
.text:0000000000002C22                 call    _dcgettext
.text:0000000000002C27                 mov     ecx, r13d
.text:0000000000002C2A                 mov     rdx, rax        ; format
.text:0000000000002C2D                 xor     esi, esi        ; errnum
.text:0000000000002C2F                 mov     edi, 1          ; status
.text:0000000000002C34                 xor     eax, eax
.text:0000000000002C36                 call    _error
.text:0000000000002C3B
.text:0000000000002C3B loc_2C3B:                               ; CODE XREF: main+27F↑j
.text:0000000000002C3B                                         ; main+A4E↑j
.text:0000000000002C3B                 lea     rsi, aMissingConvers ; "missing %% conversion specification in "...
.text:0000000000002C42                 mov     edx, 5          ; category
.text:0000000000002C47                 xor     edi, edi        ; domainname
.text:0000000000002C49                 call    _dcgettext
.text:0000000000002C4E                 xor     esi, esi        ; errnum
.text:0000000000002C50                 mov     rdx, rax        ; format
.text:0000000000002C53                 mov     edi, 1          ; status
.text:0000000000002C58                 xor     eax, eax
.text:0000000000002C5A                 call    _error
.text:0000000000002C5F
.text:0000000000002C5F loc_2C5F:                               ; CODE XREF: main+3A9↑j
.text:0000000000002C5F                 mov     rbx, [rbp+0]
.text:0000000000002C63                 lea     rsi, aSLineNumberMus ; "%s: line number must be greater than ze"...
.text:0000000000002C6A                 mov     edx, 5          ; category
.text:0000000000002C6F                 xor     edi, edi        ; domainname
.text:0000000000002C71                 call    _dcgettext
.text:0000000000002C76                 mov     rcx, rbx
.text:0000000000002C79                 mov     rdx, rax        ; format
.text:0000000000002C7C                 xor     esi, esi        ; errnum
.text:0000000000002C7E                 mov     edi, 1          ; status
.text:0000000000002C83                 xor     eax, eax
.text:0000000000002C85                 call    _error
.text:0000000000002C8A
.text:0000000000002C8A loc_2C8A:                               ; CODE XREF: main+39B↑j
.text:0000000000002C8A                 mov     rdi, [rbp+0]
.text:0000000000002C8E                 call    quote
.text:0000000000002C93                 lea     rsi, aSInvalidPatter ; "%s: invalid pattern"
.text:0000000000002C9A                 mov     rbx, rax
.text:0000000000002C9D                 mov     edx, 5          ; category
.text:0000000000002CA2                 xor     edi, edi        ; domainname
.text:0000000000002CA4                 call    _dcgettext
.text:0000000000002CA9                 mov     rcx, rbx
.text:0000000000002CAC                 mov     rdx, rax        ; format
.text:0000000000002CAF                 xor     esi, esi        ; errnum
.text:0000000000002CB1                 mov     edi, 1          ; status
.text:0000000000002CB6                 xor     eax, eax
.text:0000000000002CB8                 call    _error
.text:0000000000002CBD
.text:0000000000002CBD loc_2CBD:                               ; CODE XREF: main+49D↑j
.text:0000000000002CBD                 mov     rdi, rbp
.text:0000000000002CC0                 call    quote
.text:0000000000002CC5                 lea     rsi, aSInvalidRegula ; "%s: invalid regular expression: %s"
.text:0000000000002CCC                 mov     rbx, rax
.text:0000000000002CCF                 mov     edx, 5          ; category
.text:0000000000002CD4                 xor     edi, edi        ; domainname
.text:0000000000002CD6                 call    _dcgettext
.text:0000000000002CDB                 mov     r8, r15
.text:0000000000002CDE                 mov     rdx, rax        ; format
.text:0000000000002CE1                 mov     rcx, rbx
.text:0000000000002CE4                 xor     esi, esi        ; errnum
.text:0000000000002CE6                 xor     edi, edi        ; status
.text:0000000000002CE8                 xor     eax, eax
.text:0000000000002CEA                 call    _error
.text:0000000000002CEF                 call    cleanup_fatal
.text:0000000000002CF4 ; ---------------------------------------------------------------------------
.text:0000000000002CF4
.text:0000000000002CF4 loc_2CF4:                               ; CODE XREF: main+435↑j
.text:0000000000002CF4                 lea     rsi, aSClosingDelimi ; "%s: closing delimiter '%c' missing"
.text:0000000000002CFB                 mov     edx, 5          ; category
.text:0000000000002D00                 xor     edi, edi        ; domainname
.text:0000000000002D02                 call    _dcgettext
.text:0000000000002D07                 mov     r8d, r14d
.text:0000000000002D0A                 mov     rdx, rax        ; format
.text:0000000000002D0D                 mov     rcx, rbp
.text:0000000000002D10                 xor     esi, esi        ; errnum
.text:0000000000002D12                 mov     edi, 1          ; status
.text:0000000000002D17                 xor     eax, eax
.text:0000000000002D19                 call    _error
.text:0000000000002D1E
.text:0000000000002D1E loc_2D1E:                               ; CODE XREF: main+3B9↑j
.text:0000000000002D1E                 lea     rsi, [rsp+138h+var_58]
.text:0000000000002D26                 call    umaxtostr
.text:0000000000002D2B                 mov     rdi, [rbp+0]
.text:0000000000002D2F                 mov     r12, rax
.text:0000000000002D32                 call    quote
.text:0000000000002D37                 lea     rsi, aLineNumberSIsS ; "line number %s is smaller than precedin"...
.text:0000000000002D3E                 mov     rbx, rax
.text:0000000000002D41                 mov     edx, 5          ; category
.text:0000000000002D46                 xor     edi, edi        ; domainname
.text:0000000000002D48                 call    _dcgettext
.text:0000000000002D4D                 mov     r8, r12
.text:0000000000002D50                 mov     rdx, rax        ; format
.text:0000000000002D53                 mov     rcx, rbx
.text:0000000000002D56                 xor     esi, esi        ; errnum
.text:0000000000002D58                 mov     edi, 1          ; status
.text:0000000000002D5D                 xor     eax, eax
.text:0000000000002D5F                 call    _error
.text:0000000000002D64
.text:0000000000002D64 loc_2D64:                               ; CODE XREF: main+240↑j
.text:0000000000002D64                 cmp     eax, [rsp+138h+argc]
.text:0000000000002D68                 jl      loc_2F46
.text:0000000000002D6E                 lea     rsi, aMissingOperand ; "missing operand"
.text:0000000000002D75                 mov     edx, 5          ; category
.text:0000000000002D7A                 xor     edi, edi        ; domainname
.text:0000000000002D7C                 call    _dcgettext
.text:0000000000002D81                 xor     esi, esi        ; errnum
.text:0000000000002D83                 mov     rdx, rax        ; format
.text:0000000000002D86                 xor     edi, edi        ; status
.text:0000000000002D88                 xor     eax, eax
.text:0000000000002D8A                 call    _error
.text:0000000000002D8F
.text:0000000000002D8F loc_2D8F:                               ; CODE XREF: main+104↑j
.text:0000000000002D8F                                         ; main+135↑j ...
.text:0000000000002D8F                 mov     edi, 1          ; status
.text:0000000000002D94                 call    usage
.text:0000000000002D99 ; ---------------------------------------------------------------------------
.text:0000000000002D99
.text:0000000000002D99 loc_2D99:                               ; CODE XREF: main+11D↑j
.text:0000000000002D99                 xor     edi, edi        ; status
.text:0000000000002D9B                 call    usage
.text:0000000000002DA0 ; ---------------------------------------------------------------------------
.text:0000000000002DA0
.text:0000000000002DA0 loc_2DA0:                               ; CODE XREF: main+B76↑j
.text:0000000000002DA0                 call    ___stack_chk_fail
.text:0000000000002DA5 ; ---------------------------------------------------------------------------
.text:0000000000002DA5
.text:0000000000002DA5 loc_2DA5:                               ; CODE XREF: main+B5D↑j
.text:0000000000002DA5                 lea     rsi, aReadError ; "read error"
.text:0000000000002DAC                 mov     edx, 5          ; category
.text:0000000000002DB1                 xor     edi, edi        ; domainname
.text:0000000000002DB3                 call    _dcgettext
.text:0000000000002DB8                 mov     rbx, rax
.text:0000000000002DBB                 call    ___errno_location
.text:0000000000002DC0                 mov     esi, [rax]      ; errnum
.text:0000000000002DC2                 mov     rdx, rbx        ; format
.text:0000000000002DC5                 xor     edi, edi        ; status
.text:0000000000002DC7                 xor     eax, eax
.text:0000000000002DC9                 call    _error
.text:0000000000002DCE                 call    cleanup_fatal
.text:0000000000002DD3 ; ---------------------------------------------------------------------------
.text:0000000000002DD3
.text:0000000000002DD3 loc_2DD3:                               ; CODE XREF: main+978↑j
.text:0000000000002DD3                 and     edi, 2
.text:0000000000002DD6                 lea     rsi, aInvalidFlagsIn ; "invalid flags in conversion specificati"...
.text:0000000000002DDD                 mov     edx, 5          ; category
.text:0000000000002DE2                 cmp     edi, 1
.text:0000000000002DE5                 sbb     ebx, ebx
.text:0000000000002DE7                 xor     edi, edi        ; domainname
.text:0000000000002DE9                 and     ebx, 4
.text:0000000000002DEC                 add     ebx, 23h ; '#'
.text:0000000000002DEF                 call    _dcgettext
.text:0000000000002DF4                 mov     r8d, r13d
.text:0000000000002DF7                 mov     rdx, rax        ; format
.text:0000000000002DFA                 mov     ecx, ebx
.text:0000000000002DFC                 xor     esi, esi        ; errnum
.text:0000000000002DFE                 mov     edi, 1          ; status
.text:0000000000002E03                 xor     eax, eax
.text:0000000000002E05                 call    _error
.text:0000000000002E0A
.text:0000000000002E0A loc_2E0A:                               ; CODE XREF: main+668↑j
.text:0000000000002E0A                                         ; main+888↑j
.text:0000000000002E0A                 lea     rsi, aErrorInRegular ; "error in regular expression search"
.text:0000000000002E11                 mov     edx, 5          ; category
.text:0000000000002E16                 xor     edi, edi        ; domainname
.text:0000000000002E18                 call    _dcgettext
.text:0000000000002E1D                 xor     esi, esi        ; errnum
.text:0000000000002E1F                 mov     rdx, rax        ; format
.text:0000000000002E22                 xor     edi, edi        ; status
.text:0000000000002E24                 xor     eax, eax
.text:0000000000002E26                 call    _error
.text:0000000000002E2B                 call    cleanup_fatal
.text:0000000000002E30 ; ---------------------------------------------------------------------------
.text:0000000000002E30
.text:0000000000002E30 loc_2E30:                               ; CODE XREF: main+70F↑j
.text:0000000000002E30                 mov     rax, cs:global_argv
.text:0000000000002E37                 mov     rdi, [rax+r15]
.text:0000000000002E3B                 call    quote
.text:0000000000002E40                 lea     rsi, aSIntegerRequir ; "%s}: integer required between '{' and '"...
.text:0000000000002E47                 mov     rbx, rax
.text:0000000000002E4A                 mov     edx, 5          ; category
.text:0000000000002E4F                 xor     edi, edi        ; domainname
.text:0000000000002E51                 call    _dcgettext
.text:0000000000002E56                 mov     rcx, rbx
.text:0000000000002E59                 mov     rdx, rax        ; format
.text:0000000000002E5C                 xor     esi, esi        ; errnum
.text:0000000000002E5E                 mov     edi, 1          ; status
.text:0000000000002E63                 xor     eax, eax
.text:0000000000002E65                 call    _error
.text:0000000000002E6A
.text:0000000000002E6A loc_2E6A:                               ; CODE XREF: main+6DD↑j
.text:0000000000002E6A                 mov     rdi, rbp
.text:0000000000002E6D                 call    quote
.text:0000000000002E72                 lea     rsi, aSIsRequiredInR ; "%s: '}' is required in repeat count"
.text:0000000000002E79                 mov     rbx, rax
.text:0000000000002E7C                 mov     edx, 5          ; category
.text:0000000000002E81                 xor     edi, edi        ; domainname
.text:0000000000002E83                 call    _dcgettext
.text:0000000000002E88                 mov     rcx, rbx
.text:0000000000002E8B                 mov     rdx, rax        ; format
.text:0000000000002E8E                 xor     esi, esi        ; errnum
.text:0000000000002E90                 mov     edi, 1          ; status
.text:0000000000002E95                 xor     eax, eax
.text:0000000000002E97                 call    _error
.text:0000000000002E9C
.text:0000000000002E9C loc_2E9C:                               ; CODE XREF: main+6A6↑j
.text:0000000000002E9C                 movzx   edx, r12b
.text:0000000000002EA0                 mov     rsi, r14
.text:0000000000002EA3                 mov     rdi, rbx
.text:0000000000002EA6                 call    regexp_error
.text:0000000000002EAB ; ---------------------------------------------------------------------------
.text:0000000000002EAB
.text:0000000000002EAB loc_2EAB:                               ; CODE XREF: main+8E5↑j
.text:0000000000002EAB                 lea     rsi, aTooManyConvers ; "too many %% conversion specifications i"...
.text:0000000000002EB2                 mov     edx, 5          ; category
.text:0000000000002EB7                 xor     edi, edi        ; domainname
.text:0000000000002EB9                 call    _dcgettext
.text:0000000000002EBE                 xor     esi, esi        ; errnum
.text:0000000000002EC0                 mov     rdx, rax        ; format
.text:0000000000002EC3                 mov     edi, 1          ; status
.text:0000000000002EC8                 xor     eax, eax
.text:0000000000002ECA                 call    _error
.text:0000000000002ECF
.text:0000000000002ECF loc_2ECF:                               ; CODE XREF: main+A01↑j
.text:0000000000002ECF                 movsxd  rax, dword ptr [rsp+138h+var_120]
.text:0000000000002ED4                 mov     rdx, cs:global_argv
.text:0000000000002EDB                 mov     rdi, [rdx+rax*8]
.text:0000000000002EDF
.text:0000000000002EDF loc_2EDF:                               ; CODE XREF: main+EC0↓j
.text:0000000000002EDF                 call    quote
.text:0000000000002EE4                 lea     rsi, aSLineNumberOut ; "%s: line number out of range"
.text:0000000000002EEB                 mov     rbx, rax
.text:0000000000002EEE                 mov     edx, 5          ; category
.text:0000000000002EF3                 xor     edi, edi        ; domainname
.text:0000000000002EF5                 call    _dcgettext
.text:0000000000002EFA                 mov     rcx, rbx
.text:0000000000002EFD                 mov     rdx, rax        ; format
.text:0000000000002F00                 xor     esi, esi        ; errnum
.text:0000000000002F02                 xor     edi, edi        ; status
.text:0000000000002F04                 xor     eax, eax
.text:0000000000002F06                 call    _error
.text:0000000000002F0B                 call    cleanup_fatal
.text:0000000000002F10 ; ---------------------------------------------------------------------------
.text:0000000000002F10
.text:0000000000002F10 loc_2F10:                               ; CODE XREF: main+9D5↑j
.text:0000000000002F10                 movsxd  rdx, dword ptr [rsp+138h+var_120]
.text:0000000000002F15                 mov     rax, cs:global_argv
.text:0000000000002F1C                 mov     rdi, [rax+rdx*8]
.text:0000000000002F20                 jmp     short loc_2EDF
.text:0000000000002F22 ; ---------------------------------------------------------------------------
.text:0000000000002F22
.text:0000000000002F22 loc_2F22:                               ; CODE XREF: main+AFB↑j
.text:0000000000002F22                 lea     rsi, aMissingConvers_0 ; "missing conversion specifier in suffix"
.text:0000000000002F29                 mov     edx, 5          ; category
.text:0000000000002F2E                 xor     edi, edi        ; domainname
.text:0000000000002F30                 call    _dcgettext
.text:0000000000002F35                 xor     esi, esi        ; errnum
.text:0000000000002F37                 mov     rdx, rax        ; format
.text:0000000000002F3A                 mov     edi, 1          ; status
.text:0000000000002F3F                 xor     eax, eax
.text:0000000000002F41                 call    _error
.text:0000000000002F46
.text:0000000000002F46 loc_2F46:                               ; CODE XREF: main+D08↑j
.text:0000000000002F46                 movsxd  r14, [rsp+138h+argc]
.text:0000000000002F4B                 mov     rdi, [r12+r14*8-8]
.text:0000000000002F50                 call    quote
.text:0000000000002F55                 lea     rsi, aMissingOperand_0 ; "missing operand after %s"
.text:0000000000002F5C                 mov     rbx, rax
.text:0000000000002F5F                 xor     edi, edi        ; domainname
.text:0000000000002F61                 mov     edx, 5          ; category
.text:0000000000002F66                 call    _dcgettext
.text:0000000000002F6B                 mov     rcx, rbx
.text:0000000000002F6E                 mov     rdx, rax        ; format
.text:0000000000002F71                 xor     esi, esi        ; errnum
.text:0000000000002F73                 xor     edi, edi        ; status
.text:0000000000002F75                 xor     eax, eax
.text:0000000000002F77                 call    _error
.text:0000000000002F7C                 jmp     loc_2D8F
.text:0000000000002F7C ; } // starts at 2060
.text:0000000000002F7C main            endp
.text:0000000000002F7C
.text:0000000000002F7C ; ---------------------------------------------------------------------------
.text:0000000000002F81                 align 10h
.text:0000000000002F90
.text:0000000000002F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F90
.text:0000000000002F90 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002F90
.text:0000000000002F90 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002F90                 public start
.text:0000000000002F90 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002F90 ; __unwind {
.text:0000000000002F90                 xor     ebp, ebp
.text:0000000000002F92                 mov     r9, rdx         ; rtld_fini
.text:0000000000002F95                 pop     rsi             ; argc
.text:0000000000002F96                 mov     rdx, rsp        ; ubp_av
.text:0000000000002F99                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000002F9D                 push    rax
.text:0000000000002F9E                 push    rsp             ; stack_end
.text:0000000000002F9F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002FA6                 lea     rcx, __libc_csu_init ; init
.text:0000000000002FAD                 lea     rdi, main       ; main
.text:0000000000002FB4                 call    cs:__libc_start_main_ptr
.text:0000000000002FBA                 hlt
.text:0000000000002FBA ; } // starts at 2F90
.text:0000000000002FBA start           endp
.text:0000000000002FBA
.text:0000000000002FBA ; ---------------------------------------------------------------------------
.text:0000000000002FBB                 align 20h
.text:0000000000002FC0
.text:0000000000002FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FC0
.text:0000000000002FC0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002FC0
.text:0000000000002FC0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_3073↓p
.text:0000000000002FC0                 lea     rdi, __bss_start
.text:0000000000002FC7                 push    rbp
.text:0000000000002FC8                 lea     rax, __bss_start
.text:0000000000002FCF                 cmp     rax, rdi
.text:0000000000002FD2                 mov     rbp, rsp
.text:0000000000002FD5                 jz      short loc_2FF0
.text:0000000000002FD7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000002FDE                 test    rax, rax
.text:0000000000002FE1                 jz      short loc_2FF0
.text:0000000000002FE3                 pop     rbp
.text:0000000000002FE4                 jmp     rax
.text:0000000000002FE4 ; ---------------------------------------------------------------------------
.text:0000000000002FE6                 align 10h
.text:0000000000002FF0
.text:0000000000002FF0 loc_2FF0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002FF0                                         ; deregister_tm_clones+21↑j
.text:0000000000002FF0                 pop     rbp
.text:0000000000002FF1                 retn
.text:0000000000002FF1 deregister_tm_clones endp
.text:0000000000002FF1
.text:0000000000002FF1 ; ---------------------------------------------------------------------------
.text:0000000000002FF2                 align 20h
.text:0000000000003000
.text:0000000000003000 ; =============== S U B R O U T I N E =======================================
.text:0000000000003000
.text:0000000000003000 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003000
.text:0000000000003000 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000003000                 lea     rdi, __bss_start
.text:0000000000003007                 lea     rsi, __bss_start
.text:000000000000300E                 push    rbp
.text:000000000000300F                 sub     rsi, rdi
.text:0000000000003012                 mov     rbp, rsp
.text:0000000000003015                 sar     rsi, 3
.text:0000000000003019                 mov     rax, rsi
.text:000000000000301C                 shr     rax, 3Fh
.text:0000000000003020                 add     rsi, rax
.text:0000000000003023                 sar     rsi, 1
.text:0000000000003026                 jz      short loc_3040
.text:0000000000003028                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000302F                 test    rax, rax
.text:0000000000003032                 jz      short loc_3040
.text:0000000000003034                 pop     rbp
.text:0000000000003035                 jmp     rax
.text:0000000000003035 ; ---------------------------------------------------------------------------
.text:0000000000003037                 align 20h
.text:0000000000003040
.text:0000000000003040 loc_3040:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000003040                                         ; register_tm_clones+32↑j
.text:0000000000003040                 pop     rbp
.text:0000000000003041                 retn
.text:0000000000003041 register_tm_clones endp
.text:0000000000003041
.text:0000000000003041 ; ---------------------------------------------------------------------------
.text:0000000000003042                 align 10h
.text:0000000000003050
.text:0000000000003050 ; =============== S U B R O U T I N E =======================================
.text:0000000000003050
.text:0000000000003050 ; Attributes: info_from_lumina
.text:0000000000003050
.text:0000000000003050 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000003050                 cmp     cs:completed_7697, 0
.text:0000000000003057                 jnz     short locret_3088
.text:0000000000003059                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000003061                 push    rbp
.text:0000000000003062                 mov     rbp, rsp
.text:0000000000003065                 jz      short loc_3073
.text:0000000000003067                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000306E                 call    __cxa_finalize
.text:0000000000003073
.text:0000000000003073 loc_3073:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000003073                 call    deregister_tm_clones
.text:0000000000003078                 mov     cs:completed_7697, 1
.text:000000000000307F                 pop     rbp
.text:0000000000003080                 retn
.text:0000000000003080 ; ---------------------------------------------------------------------------
.text:0000000000003081                 align 8
.text:0000000000003088
.text:0000000000003088 locret_3088:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000003088                 rep retn
.text:0000000000003088 __do_global_dtors_aux endp
.text:0000000000003088
.text:0000000000003088 ; ---------------------------------------------------------------------------
.text:000000000000308A                 align 10h
.text:0000000000003090
.text:0000000000003090 ; =============== S U B R O U T I N E =======================================
.text:0000000000003090
.text:0000000000003090 ; Attributes: bp-based frame
.text:0000000000003090
.text:0000000000003090 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000003090                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000003090                 push    rbp
.text:0000000000003091                 mov     rbp, rsp
.text:0000000000003094                 pop     rbp
.text:0000000000003095                 jmp     register_tm_clones
.text:0000000000003095 frame_dummy     endp
.text:0000000000003095
.text:0000000000003095 ; ---------------------------------------------------------------------------
.text:000000000000309A                 align 20h
.text:00000000000030A0
.text:00000000000030A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000030A0
.text:00000000000030A0
.text:00000000000030A0 make_filename   proc near               ; CODE XREF: delete_all_files_part_0+3F↓p
.text:00000000000030A0                                         ; create_output_file+29↓p
.text:00000000000030A0 ; __unwind {
.text:00000000000030A0                 push    r12
.text:00000000000030A2                 mov     rsi, cs:prefix  ; src
.text:00000000000030A9                 push    rbp
.text:00000000000030AA                 mov     ebp, edi
.text:00000000000030AC                 mov     rdi, cs:filename_space ; dest
.text:00000000000030B3                 push    rbx
.text:00000000000030B4                 call    _strcpy
.text:00000000000030B9                 mov     rax, cs:suffix
.text:00000000000030C0                 test    rax, rax
.text:00000000000030C3                 jz      short loc_3110
.text:00000000000030C5                 mov     r12, cs:suffix
.text:00000000000030CC                 mov     rbx, cs:filename_space
.text:00000000000030D3                 mov     rdi, cs:prefix  ; s
.text:00000000000030DA                 call    _strlen
.text:00000000000030DF                 lea     rdi, [rbx+rax]
.text:00000000000030E3                 mov     r8d, ebp
.text:00000000000030E6                 mov     rcx, r12
.text:00000000000030E9                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000030F0                 mov     esi, 1
.text:00000000000030F5                 xor     eax, eax
.text:00000000000030F7                 call    ___sprintf_chk
.text:00000000000030FC                 pop     rbx
.text:00000000000030FD                 mov     rax, cs:filename_space
.text:0000000000003104                 pop     rbp
.text:0000000000003105                 pop     r12
.text:0000000000003107                 retn
.text:0000000000003107 ; ---------------------------------------------------------------------------
.text:0000000000003108                 align 10h
.text:0000000000003110
.text:0000000000003110 loc_3110:                               ; CODE XREF: make_filename+23↑j
.text:0000000000003110                 mov     r12d, cs:digits
.text:0000000000003117                 mov     rbx, cs:filename_space
.text:000000000000311E                 mov     rdi, cs:prefix  ; s
.text:0000000000003125                 call    _strlen
.text:000000000000312A                 lea     rcx, a0U        ; "%0*u"
.text:0000000000003131                 lea     rdi, [rbx+rax]
.text:0000000000003135                 mov     r9d, ebp
.text:0000000000003138                 mov     r8d, r12d
.text:000000000000313B                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003142                 mov     esi, 1
.text:0000000000003147                 xor     eax, eax
.text:0000000000003149                 call    ___sprintf_chk
.text:000000000000314E                 pop     rbx
.text:000000000000314F                 mov     rax, cs:filename_space
.text:0000000000003156                 pop     rbp
.text:0000000000003157                 pop     r12
.text:0000000000003159                 retn
.text:0000000000003159 ; } // starts at 30A0
.text:0000000000003159 make_filename   endp
.text:0000000000003159
.text:0000000000003159 ; ---------------------------------------------------------------------------
.text:000000000000315A                 align 20h
.text:0000000000003160
.text:0000000000003160 ; =============== S U B R O U T I N E =======================================
.text:0000000000003160
.text:0000000000003160
.text:0000000000003160 delete_all_files_part_0 proc near       ; CODE XREF: cleanup_fatal+41↓p
.text:0000000000003160                                         ; interrupt_handler+13↓p
.text:0000000000003160 ; __unwind {
.text:0000000000003160                 mov     eax, cs:files_created
.text:0000000000003166                 test    eax, eax
.text:0000000000003168                 jz      loc_3208
.text:000000000000316E                 push    r13
.text:0000000000003170                 push    r12
.text:0000000000003172                 lea     r13, format
.text:0000000000003179                 push    rbp
.text:000000000000317A                 push    rbx
.text:000000000000317B                 mov     r12d, edi
.text:000000000000317E                 xor     ebx, ebx
.text:0000000000003180                 sub     rsp, 8
.text:0000000000003184                 jmp     short loc_319D
.text:0000000000003184 ; ---------------------------------------------------------------------------
.text:0000000000003186                 align 10h
.text:0000000000003190
.text:0000000000003190 loc_3190:                               ; CODE XREF: delete_all_files_part_0+51↓j
.text:0000000000003190                                         ; delete_all_files_part_0+56↓j
.text:0000000000003190                 mov     eax, cs:files_created
.text:0000000000003196                 add     ebx, 1
.text:0000000000003199                 cmp     ebx, eax
.text:000000000000319B                 jnb     short loc_31ED
.text:000000000000319D
.text:000000000000319D loc_319D:                               ; CODE XREF: delete_all_files_part_0+24↑j
.text:000000000000319D                                         ; delete_all_files_part_0+8B↓j
.text:000000000000319D                 mov     edi, ebx
.text:000000000000319F                 call    make_filename
.text:00000000000031A4                 mov     rdi, rax        ; name
.text:00000000000031A7                 mov     rbp, rax
.text:00000000000031AA                 call    _unlink
.text:00000000000031AF                 test    eax, eax
.text:00000000000031B1                 jz      short loc_3190
.text:00000000000031B3                 test    r12b, r12b
.text:00000000000031B6                 jnz     short loc_3190
.text:00000000000031B8                 mov     rdx, rbp
.text:00000000000031BB                 xor     edi, edi
.text:00000000000031BD                 mov     esi, 3
.text:00000000000031C2                 call    quotearg_n_style_colon
.text:00000000000031C7                 mov     rbp, rax
.text:00000000000031CA                 add     ebx, 1
.text:00000000000031CD                 call    ___errno_location
.text:00000000000031D2                 mov     esi, [rax]      ; errnum
.text:00000000000031D4                 xor     edi, edi        ; status
.text:00000000000031D6                 xor     eax, eax
.text:00000000000031D8                 mov     rcx, rbp
.text:00000000000031DB                 mov     rdx, r13        ; format
.text:00000000000031DE                 call    _error
.text:00000000000031E3                 mov     eax, cs:files_created
.text:00000000000031E9                 cmp     ebx, eax
.text:00000000000031EB                 jb      short loc_319D
.text:00000000000031ED
.text:00000000000031ED loc_31ED:                               ; CODE XREF: delete_all_files_part_0+3B↑j
.text:00000000000031ED                 mov     cs:files_created, 0
.text:00000000000031F7                 add     rsp, 8
.text:00000000000031FB                 pop     rbx
.text:00000000000031FC                 pop     rbp
.text:00000000000031FD                 pop     r12
.text:00000000000031FF                 pop     r13
.text:0000000000003201                 retn
.text:0000000000003201 ; ---------------------------------------------------------------------------
.text:0000000000003202                 align 8
.text:0000000000003208
.text:0000000000003208 loc_3208:                               ; CODE XREF: delete_all_files_part_0+8↑j
.text:0000000000003208                 mov     cs:files_created, 0
.text:0000000000003212                 retn
.text:0000000000003212 ; } // starts at 3160
.text:0000000000003212 delete_all_files_part_0 endp
.text:0000000000003212
.text:0000000000003212 ; ---------------------------------------------------------------------------
.text:0000000000003213                 align 20h
.text:0000000000003220
.text:0000000000003220 ; =============== S U B R O U T I N E =======================================
.text:0000000000003220
.text:0000000000003220 ; Attributes: noreturn
.text:0000000000003220
.text:0000000000003220 cleanup_fatal   proc near               ; CODE XREF: regexp_error:loc_204D↑p
.text:0000000000003220                                         ; main+C8F↑p ...
.text:0000000000003220
.text:0000000000003220 var_10          = qword ptr -10h
.text:0000000000003220
.text:0000000000003220 ; __unwind {
.text:0000000000003220                 push    rbx
.text:0000000000003221                 sub     rsp, 90h
.text:0000000000003228                 mov     rax, fs:28h
.text:0000000000003231                 mov     [rsp+98h+var_10], rax
.text:0000000000003239                 xor     eax, eax
.text:000000000000323B                 mov     rbx, rsp
.text:000000000000323E                 call    close_output_file
.text:0000000000003243                 lea     rsi, caught_signals ; set
.text:000000000000324A                 xor     edi, edi        ; how
.text:000000000000324C                 mov     rdx, rbx        ; oset
.text:000000000000324F                 call    _sigprocmask
.text:0000000000003254                 movzx   eax, cs:remove_files
.text:000000000000325B                 test    al, al
.text:000000000000325D                 jz      short loc_3266
.text:000000000000325F                 xor     edi, edi
.text:0000000000003261                 call    delete_all_files_part_0
.text:0000000000003266
.text:0000000000003266 loc_3266:                               ; CODE XREF: cleanup_fatal+3D↑j
.text:0000000000003266                 mov     edi, 2          ; how
.text:000000000000326B                 xor     edx, edx        ; oset
.text:000000000000326D                 mov     rsi, rbx        ; set
.text:0000000000003270                 call    _sigprocmask
.text:0000000000003275                 mov     edi, 1          ; status
.text:000000000000327A                 call    _exit
.text:000000000000327A ; } // starts at 3220
.text:000000000000327A cleanup_fatal   endp
.text:000000000000327A
.text:000000000000327A ; ---------------------------------------------------------------------------
.text:000000000000327F                 align 20h
.text:0000000000003280
.text:0000000000003280 ; =============== S U B R O U T I N E =======================================
.text:0000000000003280
.text:0000000000003280
.text:0000000000003280 close_output_file proc near             ; CODE XREF: regexp_error+C8↑p
.text:0000000000003280                                         ; main+6B6↑p ...
.text:0000000000003280
.text:0000000000003280 var_48          = byte ptr -48h
.text:0000000000003280 var_30          = qword ptr -30h
.text:0000000000003280
.text:0000000000003280 ; __unwind {
.text:0000000000003280                 push    r13
.text:0000000000003282                 push    r12
.text:0000000000003284                 push    rbp
.text:0000000000003285                 push    rbx
.text:0000000000003286                 sub     rsp, 0A8h
.text:000000000000328D                 mov     rdi, cs:output_stream ; stream
.text:0000000000003294                 mov     rax, fs:28h
.text:000000000000329D                 mov     [rsp+0C8h+var_30], rax
.text:00000000000032A5                 xor     eax, eax
.text:00000000000032A7                 test    rdi, rdi
.text:00000000000032AA                 jz      short loc_32EB
.text:00000000000032AC                 test    byte ptr [rdi], 20h
.text:00000000000032AF                 jnz     loc_3406
.text:00000000000032B5                 call    rpl_fclose
.text:00000000000032BA                 test    eax, eax
.text:00000000000032BC                 jnz     loc_33C6
.text:00000000000032C2                 mov     rdi, cs:bytes_written ; how
.text:00000000000032C9                 test    rdi, rdi
.text:00000000000032CC                 jnz     short loc_32D7
.text:00000000000032CE                 cmp     cs:elide_empty_files, 0
.text:00000000000032D5                 jnz     short loc_3340
.text:00000000000032D7
.text:00000000000032D7 loc_32D7:                               ; CODE XREF: close_output_file+4C↑j
.text:00000000000032D7                 cmp     cs:suppress_count, 0
.text:00000000000032DE                 jz      short loc_3310
.text:00000000000032E0
.text:00000000000032E0 loc_32E0:                               ; CODE XREF: close_output_file+BA↓j
.text:00000000000032E0                                         ; close_output_file+111↓j ...
.text:00000000000032E0                 mov     cs:output_stream, 0
.text:00000000000032EB
.text:00000000000032EB loc_32EB:                               ; CODE XREF: close_output_file+2A↑j
.text:00000000000032EB                 mov     rax, [rsp+0C8h+var_30]
.text:00000000000032F3                 xor     rax, fs:28h
.text:00000000000032FC                 jnz     loc_33C1
.text:0000000000003302                 add     rsp, 0A8h
.text:0000000000003309                 pop     rbx
.text:000000000000330A                 pop     rbp
.text:000000000000330B                 pop     r12
.text:000000000000330D                 pop     r13
.text:000000000000330F                 retn
.text:0000000000003310 ; ---------------------------------------------------------------------------
.text:0000000000003310
.text:0000000000003310 loc_3310:                               ; CODE XREF: close_output_file+5E↑j
.text:0000000000003310                 lea     rsi, [rsp+0C8h+var_48]
.text:0000000000003318                 call    umaxtostr
.text:000000000000331D                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000003324                 lea     rdx, aSSS+8     ; "%s\n"
.text:000000000000332B                 mov     rcx, rax
.text:000000000000332E                 mov     esi, 1
.text:0000000000003333                 xor     eax, eax
.text:0000000000003335                 call    ___fprintf_chk
.text:000000000000333A                 jmp     short loc_32E0
.text:000000000000333A ; ---------------------------------------------------------------------------
.text:000000000000333C                 align 20h
.text:0000000000003340
.text:0000000000003340 loc_3340:                               ; CODE XREF: close_output_file+55↑j
.text:0000000000003340                 lea     rsi, caught_signals ; set
.text:0000000000003347                 mov     rbp, rsp
.text:000000000000334A                 mov     rdx, rbp        ; oset
.text:000000000000334D                 call    _sigprocmask
.text:0000000000003352                 mov     r12, cs:output_filename
.text:0000000000003359                 mov     rdi, r12        ; name
.text:000000000000335C                 call    _unlink
.text:0000000000003361                 mov     ebx, eax
.text:0000000000003363                 call    ___errno_location
.text:0000000000003368                 mov     r13d, [rax]
.text:000000000000336B                 mov     eax, cs:files_created
.text:0000000000003371                 xor     edx, edx
.text:0000000000003373                 test    ebx, ebx
.text:0000000000003375                 mov     rsi, rbp        ; set
.text:0000000000003378                 mov     edi, 2          ; how
.text:000000000000337D                 setz    dl
.text:0000000000003380                 sub     eax, edx
.text:0000000000003382                 xor     edx, edx        ; oset
.text:0000000000003384                 mov     cs:files_created, eax
.text:000000000000338A                 call    _sigprocmask
.text:000000000000338F                 test    ebx, ebx
.text:0000000000003391                 jz      loc_32E0
.text:0000000000003397                 mov     rdx, r12
.text:000000000000339A                 xor     edi, edi
.text:000000000000339C                 mov     esi, 3
.text:00000000000033A1                 call    quotearg_n_style_colon
.text:00000000000033A6                 lea     rdx, format     ; format
.text:00000000000033AD                 mov     rcx, rax
.text:00000000000033B0                 mov     esi, r13d       ; errnum
.text:00000000000033B3                 xor     edi, edi        ; status
.text:00000000000033B5                 xor     eax, eax
.text:00000000000033B7                 call    _error
.text:00000000000033BC                 jmp     loc_32E0
.text:00000000000033C1 ; ---------------------------------------------------------------------------
.text:00000000000033C1
.text:00000000000033C1 loc_33C1:                               ; CODE XREF: close_output_file+7C↑j
.text:00000000000033C1                 call    ___stack_chk_fail
.text:00000000000033C6 ; ---------------------------------------------------------------------------
.text:00000000000033C6
.text:00000000000033C6 loc_33C6:                               ; CODE XREF: close_output_file+3C↑j
.text:00000000000033C6                 mov     rdx, cs:output_filename
.text:00000000000033CD                 mov     esi, 3
.text:00000000000033D2                 xor     edi, edi
.text:00000000000033D4                 call    quotearg_n_style_colon
.text:00000000000033D9                 mov     rbx, rax
.text:00000000000033DC                 call    ___errno_location
.text:00000000000033E1                 mov     esi, [rax]      ; errnum
.text:00000000000033E3                 lea     rdx, format     ; format
.text:00000000000033EA                 mov     rcx, rbx
.text:00000000000033ED
.text:00000000000033ED loc_33ED:                               ; CODE XREF: close_output_file+1B5↓j
.text:00000000000033ED                 xor     edi, edi        ; status
.text:00000000000033EF                 xor     eax, eax
.text:00000000000033F1                 call    _error
.text:00000000000033F6                 mov     cs:output_stream, 0
.text:0000000000003401                 call    cleanup_fatal
.text:0000000000003406 ; ---------------------------------------------------------------------------
.text:0000000000003406
.text:0000000000003406 loc_3406:                               ; CODE XREF: close_output_file+2F↑j
.text:0000000000003406                 mov     rsi, cs:output_filename
.text:000000000000340D                 mov     edi, 4
.text:0000000000003412                 call    quotearg_style
.text:0000000000003417                 lea     rsi, aWriteErrorForS ; "write error for %s"
.text:000000000000341E                 mov     rbx, rax
.text:0000000000003421                 mov     edx, 5          ; category
.text:0000000000003426                 xor     edi, edi        ; domainname
.text:0000000000003428                 call    _dcgettext
.text:000000000000342D                 mov     rcx, rbx
.text:0000000000003430                 mov     rdx, rax
.text:0000000000003433                 xor     esi, esi
.text:0000000000003435                 jmp     short loc_33ED
.text:0000000000003435 ; } // starts at 3280
.text:0000000000003435 close_output_file endp
.text:0000000000003435
.text:0000000000003435 ; ---------------------------------------------------------------------------
.text:0000000000003437                 align 20h
.text:0000000000003440
.text:0000000000003440 ; =============== S U B R O U T I N E =======================================
.text:0000000000003440
.text:0000000000003440
.text:0000000000003440 save_line_to_file proc near             ; CODE XREF: main+835↑p
.text:0000000000003440                                         ; main+A0F↑p ...
.text:0000000000003440 ; __unwind {
.text:0000000000003440                 push    rbp
.text:0000000000003441                 push    rbx
.text:0000000000003442                 mov     rbx, rdi
.text:0000000000003445                 mov     esi, 1          ; size
.text:000000000000344A                 sub     rsp, 8
.text:000000000000344E                 mov     rdx, [rbx]      ; n
.text:0000000000003451                 mov     rdi, [rdi+8]    ; ptr
.text:0000000000003455                 mov     rcx, cs:output_stream ; stream
.text:000000000000345C                 call    _fwrite_unlocked
.text:0000000000003461                 mov     rdx, [rbx]
.text:0000000000003464                 cmp     rdx, rax
.text:0000000000003467                 jnz     short loc_3477
.text:0000000000003469                 add     cs:bytes_written, rdx
.text:0000000000003470                 add     rsp, 8
.text:0000000000003474                 pop     rbx
.text:0000000000003475                 pop     rbp
.text:0000000000003476                 retn
.text:0000000000003477 ; ---------------------------------------------------------------------------
.text:0000000000003477
.text:0000000000003477 loc_3477:                               ; CODE XREF: save_line_to_file+27↑j
.text:0000000000003477                 mov     rsi, cs:output_filename
.text:000000000000347E                 mov     edi, 4
.text:0000000000003483                 call    quotearg_style
.text:0000000000003488                 lea     rsi, aWriteErrorForS ; "write error for %s"
.text:000000000000348F                 mov     edx, 5          ; category
.text:0000000000003494                 xor     edi, edi        ; domainname
.text:0000000000003496                 mov     rbp, rax
.text:0000000000003499                 call    _dcgettext
.text:000000000000349E                 mov     rbx, rax
.text:00000000000034A1                 call    ___errno_location
.text:00000000000034A6                 mov     esi, [rax]      ; errnum
.text:00000000000034A8                 mov     rcx, rbp
.text:00000000000034AB                 mov     rdx, rbx        ; format
.text:00000000000034AE                 xor     edi, edi        ; status
.text:00000000000034B0                 xor     eax, eax
.text:00000000000034B2                 call    _error
.text:00000000000034B7                 mov     cs:output_stream, 0
.text:00000000000034C2                 call    cleanup_fatal
.text:00000000000034C2 ; } // starts at 3440
.text:00000000000034C2 save_line_to_file endp
.text:00000000000034C2
.text:00000000000034C2 ; ---------------------------------------------------------------------------
.text:00000000000034C7                 align 10h
.text:00000000000034D0
.text:00000000000034D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034D0
.text:00000000000034D0
.text:00000000000034D0 create_output_file proc near            ; CODE XREF: main+7E2↑p
.text:00000000000034D0                                         ; main:loc_2AA1↑p ...
.text:00000000000034D0
.text:00000000000034D0 var_20          = qword ptr -20h
.text:00000000000034D0
.text:00000000000034D0 ; __unwind {
.text:00000000000034D0                 push    r12
.text:00000000000034D2                 push    rbp
.text:00000000000034D3                 mov     ebp, 4Bh ; 'K'
.text:00000000000034D8                 push    rbx
.text:00000000000034D9                 sub     rsp, 90h
.text:00000000000034E0                 mov     rax, fs:28h
.text:00000000000034E9                 mov     [rsp+0A8h+var_20], rax
.text:00000000000034F1                 xor     eax, eax
.text:00000000000034F3                 mov     edi, cs:files_created
.text:00000000000034F9                 call    make_filename
.text:00000000000034FE                 mov     rbx, rax
.text:0000000000003501                 mov     cs:output_filename, rax
.text:0000000000003508                 mov     eax, cs:files_created
.text:000000000000350E                 cmp     eax, 0FFFFFFFFh
.text:0000000000003511                 jnz     short loc_3540
.text:0000000000003513
.text:0000000000003513 loc_3513:                               ; CODE XREF: create_output_file+104↓j
.text:0000000000003513                 mov     rdx, rbx
.text:0000000000003516                 mov     esi, 3
.text:000000000000351B                 xor     edi, edi
.text:000000000000351D                 call    quotearg_n_style_colon
.text:0000000000003522                 lea     rdx, format     ; format
.text:0000000000003529                 mov     rcx, rax
.text:000000000000352C                 mov     esi, ebp        ; errnum
.text:000000000000352E                 xor     edi, edi        ; status
.text:0000000000003530                 xor     eax, eax
.text:0000000000003532                 call    _error
.text:0000000000003537                 call    cleanup_fatal
.text:0000000000003537 ; ---------------------------------------------------------------------------
.text:000000000000353C                 align 20h
.text:0000000000003540
.text:0000000000003540 loc_3540:                               ; CODE XREF: create_output_file+41↑j
.text:0000000000003540                 mov     r12, rsp
.text:0000000000003543                 lea     rsi, caught_signals ; set
.text:000000000000354A                 xor     edi, edi        ; how
.text:000000000000354C                 mov     rdx, r12        ; oset
.text:000000000000354F                 call    _sigprocmask
.text:0000000000003554                 lea     rsi, aW         ; "w"
.text:000000000000355B                 mov     rdi, rbx
.text:000000000000355E                 call    fopen_safer
.text:0000000000003563                 mov     rbx, rax
.text:0000000000003566                 mov     cs:output_stream, rax
.text:000000000000356D                 call    ___errno_location
.text:0000000000003572                 mov     edx, cs:files_created
.text:0000000000003578                 mov     ebp, [rax]
.text:000000000000357A                 xor     eax, eax
.text:000000000000357C                 test    rbx, rbx
.text:000000000000357F                 mov     rsi, r12        ; set
.text:0000000000003582                 mov     edi, 2          ; how
.text:0000000000003587                 setnz   al
.text:000000000000358A                 add     eax, edx
.text:000000000000358C                 xor     edx, edx        ; oset
.text:000000000000358E                 mov     cs:files_created, eax
.text:0000000000003594                 call    _sigprocmask
.text:0000000000003599                 test    rbx, rbx
.text:000000000000359C                 jz      short loc_35CD
.text:000000000000359E                 mov     rax, [rsp+0A8h+var_20]
.text:00000000000035A6                 xor     rax, fs:28h
.text:00000000000035AF                 mov     cs:bytes_written, 0
.text:00000000000035BA                 jnz     short loc_35C8
.text:00000000000035BC                 add     rsp, 90h
.text:00000000000035C3                 pop     rbx
.text:00000000000035C4                 pop     rbp
.text:00000000000035C5                 pop     r12
.text:00000000000035C7                 retn
.text:00000000000035C8 ; ---------------------------------------------------------------------------
.text:00000000000035C8
.text:00000000000035C8 loc_35C8:                               ; CODE XREF: create_output_file+EA↑j
.text:00000000000035C8                 call    ___stack_chk_fail
.text:00000000000035CD ; ---------------------------------------------------------------------------
.text:00000000000035CD
.text:00000000000035CD loc_35CD:                               ; CODE XREF: create_output_file+CC↑j
.text:00000000000035CD                 mov     rbx, cs:output_filename
.text:00000000000035D4                 jmp     loc_3513
.text:00000000000035D4 ; } // starts at 34D0
.text:00000000000035D4 create_output_file endp
.text:00000000000035D4
.text:00000000000035D4 ; ---------------------------------------------------------------------------
.text:00000000000035D9                 align 20h
.text:00000000000035E0
.text:00000000000035E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035E0
.text:00000000000035E0
.text:00000000000035E0 ; __int64 __fastcall interrupt_handler(int sig)
.text:00000000000035E0 interrupt_handler proc near             ; DATA XREF: main+55B↑o
.text:00000000000035E0 ; __unwind {
.text:00000000000035E0                 movzx   eax, cs:remove_files
.text:00000000000035E7                 push    rbx
.text:00000000000035E8                 mov     ebx, edi
.text:00000000000035EA                 test    al, al
.text:00000000000035EC                 jz      short loc_35F8
.text:00000000000035EE                 mov     edi, 1
.text:00000000000035F3                 call    delete_all_files_part_0
.text:00000000000035F8
.text:00000000000035F8 loc_35F8:                               ; CODE XREF: interrupt_handler+C↑j
.text:00000000000035F8                 mov     edi, ebx        ; sig
.text:00000000000035FA                 xor     esi, esi        ; handler
.text:00000000000035FC                 call    _signal
.text:0000000000003601                 mov     edi, ebx        ; sig
.text:0000000000003603                 pop     rbx
.text:0000000000003604                 jmp     _raise
.text:0000000000003604 ; } // starts at 35E0
.text:0000000000003604 interrupt_handler endp
.text:0000000000003604
.text:0000000000003604 ; ---------------------------------------------------------------------------
.text:0000000000003609                 align 10h
.text:0000000000003610
.text:0000000000003610 ; =============== S U B R O U T I N E =======================================
.text:0000000000003610
.text:0000000000003610 ; Attributes: noreturn bp-based frame
.text:0000000000003610
.text:0000000000003610 handle_line_error_isra_1 proc near      ; CODE XREF: main+8CE↑p
.text:0000000000003610
.text:0000000000003610 var_s18         = qword ptr  18h
.text:0000000000003610
.text:0000000000003610 ; __unwind {
.text:0000000000003610                 push    r13
.text:0000000000003612                 push    r12
.text:0000000000003614                 push    rbp
.text:0000000000003615                 push    rbx
.text:0000000000003616                 mov     rbx, rsi
.text:0000000000003619                 sub     rsp, 28h
.text:000000000000361D                 mov     rbp, rsp
.text:0000000000003620                 mov     rsi, rbp
.text:0000000000003623                 mov     rax, fs:28h
.text:000000000000362C                 mov     [rsp+var_s18], rax
.text:0000000000003631                 xor     eax, eax
.text:0000000000003633                 call    umaxtostr
.text:0000000000003638                 mov     rdi, rax
.text:000000000000363B                 call    quote
.text:0000000000003640                 lea     rsi, aSSLineNumberOu ; "%s: %s: line number out of range"
.text:0000000000003647                 xor     edi, edi        ; domainname
.text:0000000000003649                 mov     r12, cs:program_name
.text:0000000000003650                 mov     edx, 5          ; category
.text:0000000000003655                 mov     r13, rax
.text:0000000000003658                 call    _dcgettext
.text:000000000000365D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003664                 mov     rdx, rax
.text:0000000000003667                 mov     r8, r13
.text:000000000000366A                 xor     eax, eax
.text:000000000000366C                 mov     rcx, r12
.text:000000000000366F                 mov     esi, 1
.text:0000000000003674                 call    ___fprintf_chk
.text:0000000000003679                 test    rbx, rbx
.text:000000000000367C                 jz      short loc_36BD
.text:000000000000367E                 mov     rdi, rbx
.text:0000000000003681                 mov     rsi, rbp
.text:0000000000003684                 call    umaxtostr
.text:0000000000003689                 lea     rsi, aOnRepetitionS ; " on repetition %s\n"
.text:0000000000003690                 mov     edx, 5          ; category
.text:0000000000003695                 xor     edi, edi        ; domainname
.text:0000000000003697                 mov     rbx, rax
.text:000000000000369A                 call    _dcgettext
.text:000000000000369F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000036A6                 mov     rdx, rax
.text:00000000000036A9                 mov     rcx, rbx
.text:00000000000036AC                 mov     esi, 1
.text:00000000000036B1                 xor     eax, eax
.text:00000000000036B3                 call    ___fprintf_chk
.text:00000000000036B8
.text:00000000000036B8 loc_36B8:                               ; CODE XREF: handle_line_error_isra_1+BE↓j
.text:00000000000036B8                 call    cleanup_fatal
.text:00000000000036BD ; ---------------------------------------------------------------------------
.text:00000000000036BD
.text:00000000000036BD loc_36BD:                               ; CODE XREF: handle_line_error_isra_1+6C↑j
.text:00000000000036BD                 mov     rsi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000036C4                 mov     edi, 0Ah        ; c
.text:00000000000036C9                 call    _fputc
.text:00000000000036CE                 jmp     short loc_36B8
.text:00000000000036CE ; } // starts at 3610
.text:00000000000036CE handle_line_error_isra_1 endp
.text:00000000000036CE
.text:00000000000036D0
.text:00000000000036D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036D0
.text:00000000000036D0
.text:00000000000036D0 keep_new_line_isra_2 proc near          ; CODE XREF: load_buffer_part_5+134↓p
.text:00000000000036D0                                         ; load_buffer_part_5+175↓p
.text:00000000000036D0 ; __unwind {
.text:00000000000036D0                 push    r13
.text:00000000000036D2                 push    r12
.text:00000000000036D4                 mov     r13, rdx
.text:00000000000036D7                 push    rbp
.text:00000000000036D8                 push    rbx
.text:00000000000036D9                 mov     rbp, rsi
.text:00000000000036DC                 mov     r12, rcx
.text:00000000000036DF                 sub     rsp, 8
.text:00000000000036E3                 cmp     qword ptr [rdi], 0
.text:00000000000036E7                 jz      loc_3780
.text:00000000000036ED
.text:00000000000036ED loc_36ED:                               ; CODE XREF: keep_new_line_isra_2+E6↓j
.text:00000000000036ED                 mov     rbx, [rbp+0]
.text:00000000000036F1                 mov     rax, [rbx]
.text:00000000000036F4                 cmp     rax, 50h ; 'P'
.text:00000000000036F8                 jz      short loc_3730
.text:00000000000036FA
.text:00000000000036FA loc_36FA:                               ; CODE XREF: keep_new_line_isra_2+A5↓j
.text:00000000000036FA                 mov     rsi, [rbx+8]
.text:00000000000036FE                 add     rax, 1
.text:0000000000003702                 mov     rdi, rsi
.text:0000000000003705                 add     rsi, 1
.text:0000000000003709                 shl     rdi, 4
.text:000000000000370D                 add     rdi, rbx
.text:0000000000003710                 mov     [rdi+20h], r13
.text:0000000000003714                 mov     [rdi+18h], r12
.text:0000000000003718                 mov     [rbx], rax
.text:000000000000371B                 mov     [rbx+8], rsi
.text:000000000000371F                 add     rsp, 8
.text:0000000000003723                 pop     rbx
.text:0000000000003724                 pop     rbp
.text:0000000000003725                 pop     r12
.text:0000000000003727                 pop     r13
.text:0000000000003729                 retn
.text:0000000000003729 ; ---------------------------------------------------------------------------
.text:000000000000372A                 align 10h
.text:0000000000003730
.text:0000000000003730 loc_3730:                               ; CODE XREF: keep_new_line_isra_2+28↑j
.text:0000000000003730                 mov     edi, 520h
.text:0000000000003735                 call    xmalloc
.text:000000000000373A                 mov     qword ptr [rax+518h], 0
.text:0000000000003745                 mov     qword ptr [rax], 0
.text:000000000000374C                 mov     qword ptr [rax+8], 0
.text:0000000000003754                 mov     qword ptr [rax+10h], 0
.text:000000000000375C                 mov     [rbx+518h], rax
.text:0000000000003763                 mov     rax, [rbp+0]
.text:0000000000003767                 mov     rbx, [rax+518h]
.text:000000000000376E                 mov     [rbp+0], rbx
.text:0000000000003772                 mov     rax, [rbx]
.text:0000000000003775                 jmp     loc_36FA
.text:0000000000003775 ; ---------------------------------------------------------------------------
.text:000000000000377A                 align 20h
.text:0000000000003780
.text:0000000000003780 loc_3780:                               ; CODE XREF: keep_new_line_isra_2+17↑j
.text:0000000000003780                 mov     rbx, rdi
.text:0000000000003783                 mov     edi, 520h
.text:0000000000003788                 call    xmalloc
.text:000000000000378D                 mov     [rbp+0], rax
.text:0000000000003791                 mov     qword ptr [rax+518h], 0
.text:000000000000379C                 mov     qword ptr [rax], 0
.text:00000000000037A3                 mov     qword ptr [rax+8], 0
.text:00000000000037AB                 mov     qword ptr [rax+10h], 0
.text:00000000000037B3                 mov     [rbx], rax
.text:00000000000037B6                 jmp     loc_36ED
.text:00000000000037B6 ; } // starts at 36D0
.text:00000000000037B6 keep_new_line_isra_2 endp
.text:00000000000037B6
.text:00000000000037B6 ; ---------------------------------------------------------------------------
.text:00000000000037BB                 align 20h
.text:00000000000037C0
.text:00000000000037C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037C0
.text:00000000000037C0
.text:00000000000037C0 free_buffer_isra_4 proc near            ; CODE XREF: load_buffer_part_5+1E2↓p
.text:00000000000037C0                                         ; load_buffer_part_5+308↓p ...
.text:00000000000037C0 ; __unwind {
.text:00000000000037C0                 push    r12
.text:00000000000037C2                 push    rbp
.text:00000000000037C3                 mov     rbp, rdi
.text:00000000000037C6                 mov     rdi, [rsi]      ; ptr
.text:00000000000037C9                 push    rbx
.text:00000000000037CA                 mov     r12, rsi
.text:00000000000037CD                 test    rdi, rdi
.text:00000000000037D0                 jz      short loc_37EC
.text:00000000000037D2                 nop     word ptr [rax+rax+00h]
.text:00000000000037D8
.text:00000000000037D8 loc_37D8:                               ; CODE XREF: free_buffer_isra_4+2A↓j
.text:00000000000037D8                 mov     rbx, [rdi+518h]
.text:00000000000037DF                 call    _free
.text:00000000000037E4                 test    rbx, rbx
.text:00000000000037E7                 mov     rdi, rbx
.text:00000000000037EA                 jnz     short loc_37D8
.text:00000000000037EC
.text:00000000000037EC loc_37EC:                               ; CODE XREF: free_buffer_isra_4+10↑j
.text:00000000000037EC                 mov     rdi, [rbp+0]    ; ptr
.text:00000000000037F0                 mov     qword ptr [r12], 0
.text:00000000000037F8                 call    _free
.text:00000000000037FD                 mov     qword ptr [rbp+0], 0
.text:0000000000003805                 pop     rbx
.text:0000000000003806                 pop     rbp
.text:0000000000003807                 pop     r12
.text:0000000000003809                 retn
.text:0000000000003809 ; } // starts at 37C0
.text:0000000000003809 free_buffer_isra_4 endp
.text:0000000000003809
.text:0000000000003809 ; ---------------------------------------------------------------------------
.text:000000000000380A                 align 10h
.text:0000000000003810
.text:0000000000003810 ; =============== S U B R O U T I N E =======================================
.text:0000000000003810
.text:0000000000003810 ; Attributes: noreturn
.text:0000000000003810
.text:0000000000003810                 public xalloc_die
.text:0000000000003810 xalloc_die      proc near               ; CODE XREF: main:loc_2AD7↑p
.text:0000000000003810                                         ; new_control_record:loc_391D↓p ...
.text:0000000000003810 ; __unwind {
.text:0000000000003810                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000003817                 sub     rsp, 8
.text:000000000000381B                 mov     edx, 5          ; category
.text:0000000000003820                 xor     edi, edi        ; domainname
.text:0000000000003822                 call    _dcgettext
.text:0000000000003827                 lea     rdx, format     ; format
.text:000000000000382E                 mov     rcx, rax
.text:0000000000003831                 xor     esi, esi        ; errnum
.text:0000000000003833                 xor     edi, edi        ; status
.text:0000000000003835                 xor     eax, eax
.text:0000000000003837                 call    _error
.text:000000000000383C                 call    cleanup_fatal
.text:000000000000383C ; } // starts at 3810
.text:000000000000383C xalloc_die      endp
.text:000000000000383C
.text:000000000000383C ; ---------------------------------------------------------------------------
.text:0000000000003841                 align 10h
.text:0000000000003850
.text:0000000000003850 ; =============== S U B R O U T I N E =======================================
.text:0000000000003850
.text:0000000000003850
.text:0000000000003850 new_control_record proc near            ; CODE XREF: main+372↑p
.text:0000000000003850                                         ; main+43B↑p
.text:0000000000003850 ; __unwind {
.text:0000000000003850                 sub     rsp, 8
.text:0000000000003854                 mov     rcx, cs:control_used
.text:000000000000385B                 cmp     rcx, cs:control_allocated_7351
.text:0000000000003862                 mov     rdi, cs:controls
.text:0000000000003869                 jz      short loc_38A8
.text:000000000000386B
.text:000000000000386B loc_386B:                               ; CODE XREF: new_control_record+9C↓j
.text:000000000000386B                 lea     rax, [rcx+1]
.text:000000000000386F                 mov     cs:control_used, rax
.text:0000000000003876                 lea     rax, [rcx+rcx*2]
.text:000000000000387A                 shl     rax, 5
.text:000000000000387E                 add     rax, rdi
.text:0000000000003881                 mov     byte ptr [rax+1Eh], 0
.text:0000000000003885                 mov     qword ptr [rax+10h], 0
.text:000000000000388D                 mov     byte ptr [rax+1Ch], 0
.text:0000000000003891                 mov     qword ptr [rax+8], 0
.text:0000000000003899                 mov     qword ptr [rax], 0
.text:00000000000038A0                 add     rsp, 8
.text:00000000000038A4                 retn
.text:00000000000038A4 ; ---------------------------------------------------------------------------
.text:00000000000038A5                 align 8
.text:00000000000038A8
.text:00000000000038A8 loc_38A8:                               ; CODE XREF: new_control_record+19↑j
.text:00000000000038A8                 test    rdi, rdi
.text:00000000000038AB                 jz      short loc_38F8
.text:00000000000038AD                 mov     rax, 0E38E38E38E38E2h
.text:00000000000038B7                 cmp     rcx, rax
.text:00000000000038BA                 ja      short loc_391D
.text:00000000000038BC                 mov     rax, rcx
.text:00000000000038BF                 shr     rax, 1
.text:00000000000038C2                 lea     rcx, [rcx+rax+1]
.text:00000000000038C7
.text:00000000000038C7 loc_38C7:                               ; CODE XREF: new_control_record+CB↓j
.text:00000000000038C7                 lea     rsi, [rcx+rcx*2]
.text:00000000000038CB                 mov     cs:control_allocated_7351, rcx
.text:00000000000038D2                 shl     rsi, 5
.text:00000000000038D6                 call    xrealloc
.text:00000000000038DB                 mov     rcx, cs:control_used
.text:00000000000038E2                 mov     rdi, rax
.text:00000000000038E5                 mov     cs:controls, rax
.text:00000000000038EC                 jmp     loc_386B
.text:00000000000038EC ; ---------------------------------------------------------------------------
.text:00000000000038F1                 align 8
.text:00000000000038F8
.text:00000000000038F8 loc_38F8:                               ; CODE XREF: new_control_record+5B↑j
.text:00000000000038F8                 test    rcx, rcx
.text:00000000000038FB                 mov     eax, 1
.text:0000000000003900                 mov     edx, 60h ; '`'
.text:0000000000003905                 cmovz   rcx, rax
.text:0000000000003909                 mov     rax, rdx
.text:000000000000390C                 xor     esi, esi
.text:000000000000390E                 mul     rcx
.text:0000000000003911                 jo      short loc_3922
.text:0000000000003913
.text:0000000000003913 loc_3913:                               ; CODE XREF: new_control_record+D7↓j
.text:0000000000003913                 test    rax, rax
.text:0000000000003916                 js      short loc_391D
.text:0000000000003918                 test    rsi, rsi
.text:000000000000391B                 jz      short loc_38C7
.text:000000000000391D
.text:000000000000391D loc_391D:                               ; CODE XREF: new_control_record+6A↑j
.text:000000000000391D                                         ; new_control_record+C6↑j
.text:000000000000391D                 call    xalloc_die
.text:0000000000003922 ; ---------------------------------------------------------------------------
.text:0000000000003922
.text:0000000000003922 loc_3922:                               ; CODE XREF: new_control_record+C1↑j
.text:0000000000003922                 mov     esi, 1
.text:0000000000003927                 jmp     short loc_3913
.text:0000000000003927 ; } // starts at 3850
.text:0000000000003927 new_control_record endp
.text:0000000000003927
.text:0000000000003927 ; ---------------------------------------------------------------------------
.text:0000000000003929                 align 10h
.text:0000000000003930
.text:0000000000003930 ; =============== S U B R O U T I N E =======================================
.text:0000000000003930
.text:0000000000003930
.text:0000000000003930 load_buffer_part_5 proc near            ; CODE XREF: remove_line+B9↓p
.text:0000000000003930                                         ; find_line+55↓p ...
.text:0000000000003930
.text:0000000000003930 var_40          = qword ptr -40h
.text:0000000000003930
.text:0000000000003930 ; __unwind {
.text:0000000000003930                 push    r15
.text:0000000000003932                 push    r14
.text:0000000000003934                 mov     ecx, 1FFFh
.text:0000000000003939                 push    r13
.text:000000000000393B                 push    r12
.text:000000000000393D                 push    rbp
.text:000000000000393E                 push    rbx
.text:000000000000393F                 sub     rsp, 18h
.text:0000000000003943                 cmp     cs:hold_count, 1FFFh
.text:000000000000394E                 cmovnb  rcx, cs:hold_count
.text:0000000000003956                 mov     rbp, rcx
.text:0000000000003959                 cmp     rbp, 1FFFh
.text:0000000000003960                 jbe     loc_3B2C
.text:0000000000003966                 db      2Eh
.text:0000000000003966                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003970
.text:0000000000003970 loc_3970:                               ; CODE XREF: load_buffer_part_5+1F6↓j
.text:0000000000003970                 sub     rbp, 1800h
.text:0000000000003977                 and     rbp, 0FFFFFFFFFFFFF800h
.text:000000000000397E                 lea     r13, [rbp+1FFFh]
.text:0000000000003985                 add     rbp, 2000h
.text:000000000000398C
.text:000000000000398C loc_398C:                               ; CODE XREF: load_buffer_part_5+207↓j
.text:000000000000398C                 mov     edi, 48h ; 'H'
.text:0000000000003991                 call    xmalloc
.text:0000000000003996                 mov     rdi, rbp
.text:0000000000003999                 mov     rbx, rax
.text:000000000000399C                 call    xmalloc
.text:00000000000039A1                 mov     rbp, cs:hold_count
.text:00000000000039A8                 mov     r12, rax
.text:00000000000039AB                 mov     [rbx+28h], rax
.text:00000000000039AF                 mov     rax, cs:last_line_number
.text:00000000000039B6                 mov     [rbx], r13
.text:00000000000039B9                 mov     qword ptr [rbx+38h], 0
.text:00000000000039C1                 mov     qword ptr [rbx+30h], 0
.text:00000000000039C9                 mov     qword ptr [rbx+20h], 0
.text:00000000000039D1                 mov     qword ptr [rbx+8], 0
.text:00000000000039D9                 add     rax, 1
.text:00000000000039DD                 test    rbp, rbp
.text:00000000000039E0                 mov     qword ptr [rbx+40h], 0
.text:00000000000039E8                 mov     [rbx+18h], rax
.text:00000000000039EC                 mov     [rbx+10h], rax
.text:00000000000039F0                 jnz     loc_3B40
.text:00000000000039F6
.text:00000000000039F6 loc_39F6:                               ; CODE XREF: load_buffer_part_5+23D↓j
.text:00000000000039F6                 xor     edi, edi        ; fd
.text:00000000000039F8                 mov     rdx, r13        ; nbytes
.text:00000000000039FB                 mov     rsi, r12        ; buf
.text:00000000000039FE                 call    safe_read
.text:0000000000003A03                 test    rax, rax
.text:0000000000003A06                 jnz     loc_3B78
.text:0000000000003A0C                 mov     cs:have_read_eof, 1
.text:0000000000003A13
.text:0000000000003A13 loc_3A13:                               ; CODE XREF: load_buffer_part_5+24C↓j
.text:0000000000003A13                 add     rax, [rbx+8]
.text:0000000000003A17                 test    rax, rax
.text:0000000000003A1A                 mov     rbp, rax
.text:0000000000003A1D                 mov     [rbx+8], rax
.text:0000000000003A21                 jz      loc_3AD4
.text:0000000000003A27                 mov     r12, [rbx+28h]
.text:0000000000003A2B
.text:0000000000003A2B loc_3A2B:                               ; CODE XREF: load_buffer_part_5+234↓j
.text:0000000000003A2B                 lea     rax, [rbx+38h]
.text:0000000000003A2F                 xor     r14d, r14d
.text:0000000000003A32                 mov     [rsp+48h+var_40], rax
.text:0000000000003A37                 jmp     short loc_3A69
.text:0000000000003A37 ; ---------------------------------------------------------------------------
.text:0000000000003A39                 align 20h
.text:0000000000003A40
.text:0000000000003A40 loc_3A40:                               ; CODE XREF: load_buffer_part_5+14F↓j
.text:0000000000003A40                 mov     r13, rax
.text:0000000000003A43                 mov     rsi, [rsp+48h+var_40]
.text:0000000000003A48                 mov     rdx, r12
.text:0000000000003A4B                 sub     r13, r12
.text:0000000000003A4E                 lea     rdi, [rbx+30h]
.text:0000000000003A52                 lea     r12, [r15+1]
.text:0000000000003A56                 add     r13, 1
.text:0000000000003A5A                 add     r14, 1
.text:0000000000003A5E                 mov     rcx, r13
.text:0000000000003A61                 sub     rbp, r13
.text:0000000000003A64                 call    keep_new_line_isra_2
.text:0000000000003A69
.text:0000000000003A69 loc_3A69:                               ; CODE XREF: load_buffer_part_5+107↑j
.text:0000000000003A69                 mov     rdx, rbp        ; n
.text:0000000000003A6C                 mov     esi, 0Ah        ; c
.text:0000000000003A71                 mov     rdi, r12        ; s
.text:0000000000003A74                 call    _memchr
.text:0000000000003A79                 test    rax, rax
.text:0000000000003A7C                 mov     r15, rax
.text:0000000000003A7F                 jnz     short loc_3A40
.text:0000000000003A81                 test    rbp, rbp
.text:0000000000003A84                 jz      short loc_3AAA
.text:0000000000003A86                 cmp     cs:have_read_eof, 0
.text:0000000000003A8D                 jz      loc_3C00
.text:0000000000003A93                 lea     rsi, [rbx+38h]
.text:0000000000003A97                 lea     rdi, [rbx+30h]
.text:0000000000003A9B                 mov     rcx, rbp
.text:0000000000003A9E                 mov     rdx, r12
.text:0000000000003AA1                 add     r14, 1
.text:0000000000003AA5                 call    keep_new_line_isra_2
.text:0000000000003AAA
.text:0000000000003AAA loc_3AAA:                               ; CODE XREF: load_buffer_part_5+154↑j
.text:0000000000003AAA                                         ; load_buffer_part_5+2F8↓j
.text:0000000000003AAA                 mov     rax, cs:last_line_number
.text:0000000000003AB1                 mov     [rbx+20h], r14
.text:0000000000003AB5                 lea     rdx, [rax+1]
.text:0000000000003AB9                 add     rax, r14
.text:0000000000003ABC                 test    r14, r14
.text:0000000000003ABF                 mov     cs:last_line_number, rax
.text:0000000000003AC6                 mov     [rbx+10h], rdx
.text:0000000000003ACA                 mov     [rbx+18h], rdx
.text:0000000000003ACE                 jnz     loc_3BB0
.text:0000000000003AD4
.text:0000000000003AD4 loc_3AD4:                               ; CODE XREF: load_buffer_part_5+F1↑j
.text:0000000000003AD4                 cmp     cs:have_read_eof, 0
.text:0000000000003ADB                 jnz     loc_3C30
.text:0000000000003AE1                 mov     rcx, [rbx]
.text:0000000000003AE4                 mov     eax, 2
.text:0000000000003AE9                 xor     esi, esi
.text:0000000000003AEB                 mul     rcx
.text:0000000000003AEE                 jo      loc_3C7B
.text:0000000000003AF4
.text:0000000000003AF4 loc_3AF4:                               ; CODE XREF: load_buffer_part_5+350↓j
.text:0000000000003AF4                 test    rax, rax
.text:0000000000003AF7                 js      loc_3C85
.text:0000000000003AFD                 test    rsi, rsi
.text:0000000000003B00                 jnz     loc_3C85
.text:0000000000003B06                 lea     rsi, [rbx+30h]
.text:0000000000003B0A                 lea     rdi, [rbx+28h]
.text:0000000000003B0E                 lea     rbp, [rcx+rcx]
.text:0000000000003B12                 call    free_buffer_isra_4
.text:0000000000003B17                 mov     rdi, rbx        ; ptr
.text:0000000000003B1A                 call    _free
.text:0000000000003B1F                 cmp     rbp, 1FFFh
.text:0000000000003B26                 ja      loc_3970
.text:0000000000003B2C
.text:0000000000003B2C loc_3B2C:                               ; CODE XREF: load_buffer_part_5+30↑j
.text:0000000000003B2C                 mov     ebp, 2000h
.text:0000000000003B31                 mov     r13d, 1FFFh
.text:0000000000003B37                 jmp     loc_398C
.text:0000000000003B37 ; ---------------------------------------------------------------------------
.text:0000000000003B3C                 align 20h
.text:0000000000003B40
.text:0000000000003B40 loc_3B40:                               ; CODE XREF: load_buffer_part_5+C0↑j
.text:0000000000003B40                 mov     rsi, cs:hold_area ; src
.text:0000000000003B47                 mov     rdx, rbp        ; n
.text:0000000000003B4A                 mov     rdi, r12        ; dest
.text:0000000000003B4D                 call    _memcpy
.text:0000000000003B52                 sub     r13, rbp
.text:0000000000003B55                 mov     [rbx+8], rbp
.text:0000000000003B59                 mov     cs:hold_count, 0
.text:0000000000003B64                 jz      loc_3A2B
.text:0000000000003B6A                 add     r12, rbp
.text:0000000000003B6D                 jmp     loc_39F6
.text:0000000000003B6D ; ---------------------------------------------------------------------------
.text:0000000000003B72                 align 8
.text:0000000000003B78
.text:0000000000003B78 loc_3B78:                               ; CODE XREF: load_buffer_part_5+D6↑j
.text:0000000000003B78                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B7C                 jnz     loc_3A13
.text:0000000000003B82                 lea     rsi, aReadError ; "read error"
.text:0000000000003B89                 mov     edx, 5          ; category
.text:0000000000003B8E                 xor     edi, edi        ; domainname
.text:0000000000003B90                 call    _dcgettext
.text:0000000000003B95                 mov     rbx, rax
.text:0000000000003B98                 call    ___errno_location
.text:0000000000003B9D                 mov     esi, [rax]      ; errnum
.text:0000000000003B9F                 mov     rdx, rbx        ; format
.text:0000000000003BA2                 xor     edi, edi        ; status
.text:0000000000003BA4                 xor     eax, eax
.text:0000000000003BA6                 call    _error
.text:0000000000003BAB                 call    cleanup_fatal
.text:0000000000003BB0 ; ---------------------------------------------------------------------------
.text:0000000000003BB0
.text:0000000000003BB0 loc_3BB0:                               ; CODE XREF: load_buffer_part_5+19E↑j
.text:0000000000003BB0                 mov     rax, [rbx+30h]
.text:0000000000003BB4                 mov     qword ptr [rbx+40h], 0
.text:0000000000003BBC                 mov     [rbx+38h], rax
.text:0000000000003BC0                 mov     rax, cs:head
.text:0000000000003BC7                 test    rax, rax
.text:0000000000003BCA                 jnz     short loc_3BDB
.text:0000000000003BCC                 jmp     loc_3C60
.text:0000000000003BCC ; ---------------------------------------------------------------------------
.text:0000000000003BD1                 align 8
.text:0000000000003BD8
.text:0000000000003BD8 loc_3BD8:                               ; CODE XREF: load_buffer_part_5+2B2↓j
.text:0000000000003BD8                 mov     rax, rdx
.text:0000000000003BDB
.text:0000000000003BDB loc_3BDB:                               ; CODE XREF: load_buffer_part_5+29A↑j
.text:0000000000003BDB                 mov     rdx, [rax+40h]
.text:0000000000003BDF                 test    rdx, rdx
.text:0000000000003BE2                 jnz     short loc_3BD8
.text:0000000000003BE4                 mov     [rax+40h], rbx
.text:0000000000003BE8                 add     rsp, 18h
.text:0000000000003BEC                 mov     eax, 1
.text:0000000000003BF1                 pop     rbx
.text:0000000000003BF2                 pop     rbp
.text:0000000000003BF3                 pop     r12
.text:0000000000003BF5                 pop     r13
.text:0000000000003BF7                 pop     r14
.text:0000000000003BF9                 pop     r15
.text:0000000000003BFB                 retn
.text:0000000000003BFB ; ---------------------------------------------------------------------------
.text:0000000000003BFC                 align 20h
.text:0000000000003C00
.text:0000000000003C00 loc_3C00:                               ; CODE XREF: load_buffer_part_5+15D↑j
.text:0000000000003C00                 mov     rdi, r12        ; src
.text:0000000000003C03                 mov     rsi, rbp        ; n
.text:0000000000003C06                 call    xmemdup
.text:0000000000003C0B                 mov     rdi, cs:hold_area ; ptr
.text:0000000000003C12                 mov     r12, rax
.text:0000000000003C15                 call    _free
.text:0000000000003C1A                 mov     cs:hold_area, r12
.text:0000000000003C21                 mov     cs:hold_count, rbp
.text:0000000000003C28                 jmp     loc_3AAA
.text:0000000000003C28 ; ---------------------------------------------------------------------------
.text:0000000000003C2D                 align 10h
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: load_buffer_part_5+1AB↑j
.text:0000000000003C30                 lea     rsi, [rbx+30h]
.text:0000000000003C34                 lea     rdi, [rbx+28h]
.text:0000000000003C38                 call    free_buffer_isra_4
.text:0000000000003C3D                 mov     rdi, rbx        ; ptr
.text:0000000000003C40                 call    _free
.text:0000000000003C45                 add     rsp, 18h
.text:0000000000003C49                 xor     eax, eax
.text:0000000000003C4B                 pop     rbx
.text:0000000000003C4C                 pop     rbp
.text:0000000000003C4D                 pop     r12
.text:0000000000003C4F                 pop     r13
.text:0000000000003C51                 pop     r14
.text:0000000000003C53                 pop     r15
.text:0000000000003C55                 retn
.text:0000000000003C55 ; ---------------------------------------------------------------------------
.text:0000000000003C56                 align 20h
.text:0000000000003C60
.text:0000000000003C60 loc_3C60:                               ; CODE XREF: load_buffer_part_5+29C↑j
.text:0000000000003C60                 mov     cs:head, rbx
.text:0000000000003C67                 add     rsp, 18h
.text:0000000000003C6B                 mov     eax, 1
.text:0000000000003C70                 pop     rbx
.text:0000000000003C71                 pop     rbp
.text:0000000000003C72                 pop     r12
.text:0000000000003C74                 pop     r13
.text:0000000000003C76                 pop     r14
.text:0000000000003C78                 pop     r15
.text:0000000000003C7A                 retn
.text:0000000000003C7B ; ---------------------------------------------------------------------------
.text:0000000000003C7B
.text:0000000000003C7B loc_3C7B:                               ; CODE XREF: load_buffer_part_5+1BE↑j
.text:0000000000003C7B                 mov     esi, 1
.text:0000000000003C80                 jmp     loc_3AF4
.text:0000000000003C85 ; ---------------------------------------------------------------------------
.text:0000000000003C85
.text:0000000000003C85 loc_3C85:                               ; CODE XREF: load_buffer_part_5+1C7↑j
.text:0000000000003C85                                         ; load_buffer_part_5+1D0↑j
.text:0000000000003C85                 call    xalloc_die
.text:0000000000003C85 ; } // starts at 3930
.text:0000000000003C85 load_buffer_part_5 endp
.text:0000000000003C85
.text:0000000000003C85 ; ---------------------------------------------------------------------------
.text:0000000000003C8A                 align 10h
.text:0000000000003C90
.text:0000000000003C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C90
.text:0000000000003C90
.text:0000000000003C90 remove_line     proc near               ; CODE XREF: main+678↑p
.text:0000000000003C90                                         ; main:loc_2880↑p ...
.text:0000000000003C90 ; __unwind {
.text:0000000000003C90                 push    rbx
.text:0000000000003C91                 mov     rbx, cs:prev_buf_7217
.text:0000000000003C98                 test    rbx, rbx
.text:0000000000003C9B                 jz      short loc_3CBD
.text:0000000000003C9D                 lea     rsi, [rbx+30h]
.text:0000000000003CA1                 lea     rdi, [rbx+28h]
.text:0000000000003CA5                 call    free_buffer_isra_4
.text:0000000000003CAA                 mov     rdi, rbx        ; ptr
.text:0000000000003CAD                 call    _free
.text:0000000000003CB2                 mov     cs:prev_buf_7217, 0
.text:0000000000003CBD
.text:0000000000003CBD loc_3CBD:                               ; CODE XREF: remove_line+B↑j
.text:0000000000003CBD                 mov     rdx, cs:head
.text:0000000000003CC4                 test    rdx, rdx
.text:0000000000003CC7                 jz      short loc_3D40
.text:0000000000003CC9
.text:0000000000003CC9 loc_3CC9:                               ; CODE XREF: remove_line+C9↓j
.text:0000000000003CC9                 mov     rax, [rdx+18h]
.text:0000000000003CCD                 cmp     rax, cs:current_line
.text:0000000000003CD4                 jbe     short loc_3CDD
.text:0000000000003CD6                 mov     cs:current_line, rax
.text:0000000000003CDD
.text:0000000000003CDD loc_3CDD:                               ; CODE XREF: remove_line+44↑j
.text:0000000000003CDD                 mov     rsi, [rdx+38h]
.text:0000000000003CE1                 add     rax, 1
.text:0000000000003CE5                 mov     [rdx+18h], rax
.text:0000000000003CE9                 mov     rax, [rsi+10h]
.text:0000000000003CED                 lea     rcx, [rax+1]
.text:0000000000003CF1                 mov     rax, rcx
.text:0000000000003CF4                 mov     [rsi+10h], rcx
.text:0000000000003CF8                 shl     rax, 4
.text:0000000000003CFC                 cmp     [rsi], rcx
.text:0000000000003CFF                 lea     rax, [rsi+rax+8]
.text:0000000000003D04                 jz      short loc_3D10
.text:0000000000003D06
.text:0000000000003D06 loc_3D06:                               ; CODE XREF: remove_line+94↓j
.text:0000000000003D06                 pop     rbx
.text:0000000000003D07                 retn
.text:0000000000003D07 ; ---------------------------------------------------------------------------
.text:0000000000003D08                 align 10h
.text:0000000000003D10
.text:0000000000003D10 loc_3D10:                               ; CODE XREF: remove_line+74↑j
.text:0000000000003D10                 mov     rcx, [rsi+518h]
.text:0000000000003D17                 test    rcx, rcx
.text:0000000000003D1A                 mov     [rdx+38h], rcx
.text:0000000000003D1E                 jz      short loc_3D26
.text:0000000000003D20                 cmp     qword ptr [rcx], 0
.text:0000000000003D24                 jnz     short loc_3D06
.text:0000000000003D26
.text:0000000000003D26 loc_3D26:                               ; CODE XREF: remove_line+8E↑j
.text:0000000000003D26                 mov     cs:prev_buf_7217, rdx
.text:0000000000003D2D                 mov     rdx, [rdx+40h]
.text:0000000000003D31                 pop     rbx
.text:0000000000003D32                 mov     cs:head, rdx
.text:0000000000003D39                 retn
.text:0000000000003D39 ; ---------------------------------------------------------------------------
.text:0000000000003D3A                 align 20h
.text:0000000000003D40
.text:0000000000003D40 loc_3D40:                               ; CODE XREF: remove_line+37↑j
.text:0000000000003D40                 cmp     cs:have_read_eof, 0
.text:0000000000003D47                 jnz     short loc_3D60
.text:0000000000003D49                 call    load_buffer_part_5
.text:0000000000003D4E                 test    al, al
.text:0000000000003D50                 jz      short loc_3D60
.text:0000000000003D52                 mov     rdx, cs:head
.text:0000000000003D59                 jmp     loc_3CC9
.text:0000000000003D59 ; ---------------------------------------------------------------------------
.text:0000000000003D5E                 align 20h
.text:0000000000003D60
.text:0000000000003D60 loc_3D60:                               ; CODE XREF: remove_line+B7↑j
.text:0000000000003D60                                         ; remove_line+C0↑j
.text:0000000000003D60                 xor     eax, eax
.text:0000000000003D62                 pop     rbx
.text:0000000000003D63                 retn
.text:0000000000003D63 ; } // starts at 3C90
.text:0000000000003D63 remove_line     endp
.text:0000000000003D63
.text:0000000000003D63 ; ---------------------------------------------------------------------------
.text:0000000000003D64                 align 10h
.text:0000000000003D70
.text:0000000000003D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D70
.text:0000000000003D70
.text:0000000000003D70 dump_rest_of_file proc near             ; CODE XREF: regexp_error+C3↑p
.text:0000000000003D70                                         ; main+6B1↑p ...
.text:0000000000003D70 ; __unwind {
.text:0000000000003D70                 sub     rsp, 8
.text:0000000000003D74                 jmp     short loc_3D88
.text:0000000000003D74 ; ---------------------------------------------------------------------------
.text:0000000000003D76                 align 20h
.text:0000000000003D80
.text:0000000000003D80 loc_3D80:                               ; CODE XREF: dump_rest_of_file+20↓j
.text:0000000000003D80                 mov     rdi, rax
.text:0000000000003D83                 call    save_line_to_file
.text:0000000000003D88
.text:0000000000003D88 loc_3D88:                               ; CODE XREF: dump_rest_of_file+4↑j
.text:0000000000003D88                 call    remove_line
.text:0000000000003D8D                 test    rax, rax
.text:0000000000003D90                 jnz     short loc_3D80
.text:0000000000003D92                 add     rsp, 8
.text:0000000000003D96                 retn
.text:0000000000003D96 ; } // starts at 3D70
.text:0000000000003D96 dump_rest_of_file endp
.text:0000000000003D96
.text:0000000000003D96 ; ---------------------------------------------------------------------------
.text:0000000000003D97                 align 20h
.text:0000000000003DA0
.text:0000000000003DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DA0
.text:0000000000003DA0
.text:0000000000003DA0 find_line       proc near               ; CODE XREF: main+698↑p
.text:0000000000003DA0                                         ; main+7AB↑p ...
.text:0000000000003DA0 ; __unwind {
.text:0000000000003DA0                 push    rbp
.text:0000000000003DA1                 push    rbx
.text:0000000000003DA2                 mov     rbp, rdi
.text:0000000000003DA5                 sub     rsp, 8
.text:0000000000003DA9                 mov     rbx, cs:head
.text:0000000000003DB0                 test    rbx, rbx
.text:0000000000003DB3                 jz      loc_3E78
.text:0000000000003DB9
.text:0000000000003DB9 loc_3DB9:                               ; CODE XREF: find_line+F1↓j
.text:0000000000003DB9                 mov     rdx, [rbx+10h]
.text:0000000000003DBD                 cmp     rdx, rbp
.text:0000000000003DC0                 jbe     short loc_3DD7
.text:0000000000003DC2                 jmp     loc_3E68
.text:0000000000003DC2 ; ---------------------------------------------------------------------------
.text:0000000000003DC7                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 loc_3DD0:                               ; CODE XREF: find_line+4A↓j
.text:0000000000003DD0                                         ; find_line+65↓j
.text:0000000000003DD0                 mov     rdx, [rax+10h]
.text:0000000000003DD4                 mov     rbx, rax
.text:0000000000003DD7
.text:0000000000003DD7 loc_3DD7:                               ; CODE XREF: find_line+20↑j
.text:0000000000003DD7                 mov     rax, [rbx+20h]
.text:0000000000003DDB                 add     rax, rdx
.text:0000000000003DDE                 cmp     rax, rbp
.text:0000000000003DE1                 ja      short loc_3E30
.text:0000000000003DE3                 mov     rax, [rbx+40h]
.text:0000000000003DE7                 test    rax, rax
.text:0000000000003DEA                 jnz     short loc_3DD0
.text:0000000000003DEC                 cmp     cs:have_read_eof, 0
.text:0000000000003DF3                 jnz     short loc_3E68
.text:0000000000003DF5                 call    load_buffer_part_5
.text:0000000000003DFA                 test    al, al
.text:0000000000003DFC                 jz      short loc_3E68
.text:0000000000003DFE                 mov     rax, [rbx+40h]
.text:0000000000003E02                 test    rax, rax
.text:0000000000003E05                 jnz     short loc_3DD0
.text:0000000000003E07                 lea     rcx, __PRETTY_FUNCTION___7224 ; "find_line"
.text:0000000000003E0E                 lea     rsi, file       ; "../coreutils-8.31/src/csplit.c"
.text:0000000000003E15                 lea     rdi, assertion  ; "b"
.text:0000000000003E1C                 mov     edx, 26Ah       ; line
.text:0000000000003E21                 call    ___assert_fail
.text:0000000000003E21 ; ---------------------------------------------------------------------------
.text:0000000000003E26                 align 10h
.text:0000000000003E30
.text:0000000000003E30 loc_3E30:                               ; CODE XREF: find_line+41↑j
.text:0000000000003E30                 sub     rbp, rdx
.text:0000000000003E33                 mov     rax, [rbx+30h]
.text:0000000000003E37                 cmp     rbp, 4Fh ; 'O'
.text:0000000000003E3B                 jbe     short loc_3E51
.text:0000000000003E3D                 nop     dword ptr [rax]
.text:0000000000003E40
.text:0000000000003E40 loc_3E40:                               ; CODE XREF: find_line+AF↓j
.text:0000000000003E40                 sub     rbp, 50h ; 'P'
.text:0000000000003E44                 mov     rax, [rax+518h]
.text:0000000000003E4B                 cmp     rbp, 4Fh ; 'O'
.text:0000000000003E4F                 ja      short loc_3E40
.text:0000000000003E51
.text:0000000000003E51 loc_3E51:                               ; CODE XREF: find_line+9B↑j
.text:0000000000003E51                 shl     rbp, 4
.text:0000000000003E55                 add     rsp, 8
.text:0000000000003E59                 lea     rax, [rax+rbp+18h]
.text:0000000000003E5E                 pop     rbx
.text:0000000000003E5F                 pop     rbp
.text:0000000000003E60                 retn
.text:0000000000003E60 ; ---------------------------------------------------------------------------
.text:0000000000003E61                 align 8
.text:0000000000003E68
.text:0000000000003E68 loc_3E68:                               ; CODE XREF: find_line+22↑j
.text:0000000000003E68                                         ; find_line+53↑j ...
.text:0000000000003E68                 add     rsp, 8
.text:0000000000003E6C                 xor     eax, eax
.text:0000000000003E6E                 pop     rbx
.text:0000000000003E6F                 pop     rbp
.text:0000000000003E70                 retn
.text:0000000000003E70 ; ---------------------------------------------------------------------------
.text:0000000000003E71                 align 8
.text:0000000000003E78
.text:0000000000003E78 loc_3E78:                               ; CODE XREF: find_line+13↑j
.text:0000000000003E78                 cmp     cs:have_read_eof, 0
.text:0000000000003E7F                 jnz     short loc_3E68
.text:0000000000003E81                 call    load_buffer_part_5
.text:0000000000003E86                 test    al, al
.text:0000000000003E88                 jz      short loc_3E68
.text:0000000000003E8A                 mov     rbx, cs:head
.text:0000000000003E91                 jmp     loc_3DB9
.text:0000000000003E91 ; } // starts at 3DA0
.text:0000000000003E91 find_line       endp
.text:0000000000003E91
.text:0000000000003E91 ; ---------------------------------------------------------------------------
.text:0000000000003E96                 align 20h
.text:0000000000003EA0
.text:0000000000003EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EA0
.text:0000000000003EA0
.text:0000000000003EA0 get_first_line_in_buffer proc near      ; CODE XREF: main:loc_2864↑p
.text:0000000000003EA0                                         ; main+9CD↑p
.text:0000000000003EA0 ; __unwind {
.text:0000000000003EA0                 mov     rax, cs:head
.text:0000000000003EA7                 test    rax, rax
.text:0000000000003EAA                 jz      short loc_3EB8
.text:0000000000003EAC                 mov     rax, [rax+18h]
.text:0000000000003EB0                 retn
.text:0000000000003EB0 ; ---------------------------------------------------------------------------
.text:0000000000003EB1                 align 8
.text:0000000000003EB8
.text:0000000000003EB8 loc_3EB8:                               ; CODE XREF: get_first_line_in_buffer+A↑j
.text:0000000000003EB8                 cmp     cs:have_read_eof, 0
.text:0000000000003EBF                 push    rbx
.text:0000000000003EC0                 jnz     short loc_3ED8
.text:0000000000003EC2                 call    load_buffer_part_5
.text:0000000000003EC7                 test    al, al
.text:0000000000003EC9                 jz      short loc_3ED8
.text:0000000000003ECB                 mov     rax, cs:head
.text:0000000000003ED2                 pop     rbx
.text:0000000000003ED3                 mov     rax, [rax+18h]
.text:0000000000003ED7                 retn
.text:0000000000003ED8 ; ---------------------------------------------------------------------------
.text:0000000000003ED8
.text:0000000000003ED8 loc_3ED8:                               ; CODE XREF: get_first_line_in_buffer+20↑j
.text:0000000000003ED8                                         ; get_first_line_in_buffer+29↑j
.text:0000000000003ED8                 lea     rsi, aInputDisappear ; "input disappeared"
.text:0000000000003EDF                 mov     edx, 5          ; category
.text:0000000000003EE4                 xor     edi, edi        ; domainname
.text:0000000000003EE6                 call    _dcgettext
.text:0000000000003EEB                 mov     rbx, rax
.text:0000000000003EEE                 call    ___errno_location
.text:0000000000003EF3                 mov     esi, [rax]      ; errnum
.text:0000000000003EF5                 mov     rdx, rbx        ; format
.text:0000000000003EF8                 mov     edi, 1          ; status
.text:0000000000003EFD                 xor     eax, eax
.text:0000000000003EFF                 call    _error
.text:0000000000003EFF ; } // starts at 3EA0
.text:0000000000003F04                 xchg    ax, ax
.text:0000000000003F06                 db      2Eh
.text:0000000000003F06                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003F06 get_first_line_in_buffer endp ; sp-analysis failed
.text:0000000000003F06
.text:0000000000003F10
.text:0000000000003F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F10
.text:0000000000003F10 ; Attributes: noreturn
.text:0000000000003F10
.text:0000000000003F10 ; void __fastcall __noreturn usage(int status)
.text:0000000000003F10                 public usage
.text:0000000000003F10 usage           proc near               ; CODE XREF: main+D34↑p
.text:0000000000003F10                                         ; main+D3B↑p
.text:0000000000003F10
.text:0000000000003F10 var_A8          = qword ptr -0A8h
.text:0000000000003F10 var_A0          = qword ptr -0A0h
.text:0000000000003F10 var_98          = qword ptr -98h
.text:0000000000003F10 var_90          = qword ptr -90h
.text:0000000000003F10 var_88          = qword ptr -88h
.text:0000000000003F10 var_80          = qword ptr -80h
.text:0000000000003F10 var_78          = qword ptr -78h
.text:0000000000003F10 var_70          = qword ptr -70h
.text:0000000000003F10 var_68          = qword ptr -68h
.text:0000000000003F10 var_60          = qword ptr -60h
.text:0000000000003F10 var_58          = qword ptr -58h
.text:0000000000003F10 var_50          = qword ptr -50h
.text:0000000000003F10 var_48          = qword ptr -48h
.text:0000000000003F10 var_40          = qword ptr -40h
.text:0000000000003F10 var_30          = qword ptr -30h
.text:0000000000003F10
.text:0000000000003F10 ; __unwind {
.text:0000000000003F10                 push    r13
.text:0000000000003F12                 push    r12
.text:0000000000003F14                 mov     edx, 5          ; category
.text:0000000000003F19                 push    rbp
.text:0000000000003F1A                 push    rbx
.text:0000000000003F1B                 mov     ebp, edi
.text:0000000000003F1D                 sub     rsp, 88h
.text:0000000000003F24                 mov     rbx, cs:program_name
.text:0000000000003F2B                 mov     rax, fs:28h
.text:0000000000003F34                 mov     [rsp+0A8h+var_30], rax
.text:0000000000003F39                 xor     eax, eax
.text:0000000000003F3B                 test    edi, edi
.text:0000000000003F3D                 jz      short loc_3F6D
.text:0000000000003F3F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000003F46                 xor     edi, edi        ; domainname
.text:0000000000003F48                 call    _dcgettext
.text:0000000000003F4D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003F54                 mov     rdx, rax
.text:0000000000003F57                 mov     rcx, rbx
.text:0000000000003F5A                 mov     esi, 1
.text:0000000000003F5F                 xor     eax, eax
.text:0000000000003F61                 call    ___fprintf_chk
.text:0000000000003F66
.text:0000000000003F66 loc_3F66:                               ; CODE XREF: usage+356↓j
.text:0000000000003F66                 mov     edi, ebp        ; status
.text:0000000000003F68                 call    _exit
.text:0000000000003F6D ; ---------------------------------------------------------------------------
.text:0000000000003F6D
.text:0000000000003F6D loc_3F6D:                               ; CODE XREF: usage+2D↑j
.text:0000000000003F6D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... FILE PATTERN...\n"
.text:0000000000003F74                 xor     edi, edi        ; domainname
.text:0000000000003F76                 call    _dcgettext
.text:0000000000003F7B                 mov     rdx, rbx
.text:0000000000003F7E                 mov     rsi, rax
.text:0000000000003F81                 mov     edi, 1
.text:0000000000003F86                 xor     eax, eax
.text:0000000000003F88                 call    ___printf_chk
.text:0000000000003F8D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003F94                 lea     rsi, aOutputPiecesOf ; "Output pieces of FILE separated by PATT"...
.text:0000000000003F9B                 mov     edx, 5          ; category
.text:0000000000003FA0                 xor     edi, edi        ; domainname
.text:0000000000003FA2                 call    _dcgettext
.text:0000000000003FA7                 mov     rsi, rbx        ; stream
.text:0000000000003FAA                 mov     rdi, rax        ; s
.text:0000000000003FAD                 call    _fputs_unlocked
.text:0000000000003FB2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003FB9                 lea     rsi, aReadStandardIn ; "\nRead standard input if FILE is -\n"
.text:0000000000003FC0                 mov     edx, 5          ; category
.text:0000000000003FC5                 xor     edi, edi        ; domainname
.text:0000000000003FC7                 call    _dcgettext
.text:0000000000003FCC                 mov     rsi, rbx        ; stream
.text:0000000000003FCF                 mov     rdi, rax        ; s
.text:0000000000003FD2                 call    _fputs_unlocked
.text:0000000000003FD7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003FDE                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000003FE5                 mov     edx, 5          ; category
.text:0000000000003FEA                 xor     edi, edi        ; domainname
.text:0000000000003FEC                 call    _dcgettext
.text:0000000000003FF1                 mov     rsi, rbx        ; stream
.text:0000000000003FF4                 mov     rdi, rax        ; s
.text:0000000000003FF7                 call    _fputs_unlocked
.text:0000000000003FFC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004003                 lea     rsi, aBSuffixFormatF ; "  -b, --suffix-format=FORMAT  use sprin"...
.text:000000000000400A                 mov     edx, 5          ; category
.text:000000000000400F                 xor     edi, edi        ; domainname
.text:0000000000004011                 call    _dcgettext
.text:0000000000004016                 mov     rsi, rbx        ; stream
.text:0000000000004019                 mov     rdi, rax        ; s
.text:000000000000401C                 call    _fputs_unlocked
.text:0000000000004021                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004028                 lea     rsi, aSuppressMatche ; "      --suppress-matched     suppress t"...
.text:000000000000402F                 mov     edx, 5          ; category
.text:0000000000004034                 xor     edi, edi        ; domainname
.text:0000000000004036                 call    _dcgettext
.text:000000000000403B                 mov     rsi, rbx        ; stream
.text:000000000000403E                 mov     rdi, rax        ; s
.text:0000000000004041                 call    _fputs_unlocked
.text:0000000000004046                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000404D                 lea     rsi, aNDigitsDigitsU ; "  -n, --digits=DIGITS        use specif"...
.text:0000000000004054                 mov     edx, 5          ; category
.text:0000000000004059                 xor     edi, edi        ; domainname
.text:000000000000405B                 call    _dcgettext
.text:0000000000004060                 mov     rsi, rbx        ; stream
.text:0000000000004063                 mov     rdi, rax        ; s
.text:0000000000004066                 call    _fputs_unlocked
.text:000000000000406B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004072                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000004079                 mov     edx, 5          ; category
.text:000000000000407E                 xor     edi, edi        ; domainname
.text:0000000000004080                 call    _dcgettext
.text:0000000000004085                 mov     rsi, rbx        ; stream
.text:0000000000004088                 mov     rdi, rax        ; s
.text:000000000000408B                 call    _fputs_unlocked
.text:0000000000004090                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004097                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:000000000000409E                 mov     edx, 5          ; category
.text:00000000000040A3                 xor     edi, edi        ; domainname
.text:00000000000040A5                 call    _dcgettext
.text:00000000000040AA                 mov     rsi, rbx        ; stream
.text:00000000000040AD                 mov     rdi, rax        ; s
.text:00000000000040B0                 call    _fputs_unlocked
.text:00000000000040B5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000040BC                 lea     rsi, aEachPatternMay ; "\nEach PATTERN may be:\n  INTEGER      "...
.text:00000000000040C3                 mov     edx, 5          ; category
.text:00000000000040C8                 xor     edi, edi        ; domainname
.text:00000000000040CA                 call    _dcgettext
.text:00000000000040CF                 mov     rsi, rbx        ; stream
.text:00000000000040D2                 mov     rdi, rax        ; s
.text:00000000000040D5                 lea     rbx, aCsplit    ; "csplit"
.text:00000000000040DC                 call    _fputs_unlocked
.text:00000000000040E1                 lea     rax, asc_16020  ; "["
.text:00000000000040E8                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000040EF                 mov     [rsp+0A8h+var_48], 0
.text:00000000000040F8                 mov     [rsp+0A8h+var_40], 0
.text:0000000000004101                 mov     rdx, rsp
.text:0000000000004104                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000004108                 lea     rax, aTestInvocation ; "test invocation"
.text:000000000000410F                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000004114                 lea     rcx, aSha384sum ; "sha384sum"
.text:000000000000411B                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000004120                 lea     rax, domainname ; "coreutils"
.text:0000000000004127                 mov     [rsp+0A8h+var_68], rcx
.text:000000000000412C                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000004133                 mov     [rsp+0A8h+var_98], rax
.text:0000000000004138                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000413F                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000004144                 mov     [rsp+0A8h+var_90], rax
.text:0000000000004149                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000004150                 mov     [rsp+0A8h+var_88], rax
.text:0000000000004155                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000415C                 mov     [rsp+0A8h+var_80], rax
.text:0000000000004161                 mov     [rsp+0A8h+var_70], rax
.text:0000000000004166                 mov     [rsp+0A8h+var_60], rax
.text:000000000000416B                 mov     [rsp+0A8h+var_50], rax
.text:0000000000004170
.text:0000000000004170 loc_4170:                               ; CODE XREF: usage+27D↓j
.text:0000000000004170                 add     rdx, 10h
.text:0000000000004174                 mov     rdi, [rdx]
.text:0000000000004177                 test    rdi, rdi
.text:000000000000417A                 jz      short loc_418F
.text:000000000000417C                 mov     ecx, 7
.text:0000000000004181                 mov     rsi, rbx
.text:0000000000004184                 repe cmpsb
.text:0000000000004186                 setnbe  al
.text:0000000000004189                 sbb     al, 0
.text:000000000000418B                 test    al, al
.text:000000000000418D                 jnz     short loc_4170
.text:000000000000418F
.text:000000000000418F loc_418F:                               ; CODE XREF: usage+26A↑j
.text:000000000000418F                 mov     r12, [rdx+8]
.text:0000000000004193                 xor     edi, edi        ; domainname
.text:0000000000004195                 mov     edx, 5          ; category
.text:000000000000419A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000041A1                 test    r12, r12
.text:00000000000041A4                 jz      loc_426B
.text:00000000000041AA                 call    _dcgettext
.text:00000000000041AF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000041B6                 lea     rdx, unk_16096
.text:00000000000041BD                 mov     rsi, rax
.text:00000000000041C0                 mov     edi, 1
.text:00000000000041C5                 xor     eax, eax
.text:00000000000041C7                 call    ___printf_chk
.text:00000000000041CC                 xor     esi, esi        ; locale
.text:00000000000041CE                 mov     edi, 5          ; category
.text:00000000000041D3                 call    _setlocale
.text:00000000000041D8                 test    rax, rax
.text:00000000000041DB                 jz      short loc_41F9
.text:00000000000041DD                 lea     rsi, s2         ; "en_"
.text:00000000000041E4                 mov     edx, 3          ; n
.text:00000000000041E9                 mov     rdi, rax        ; s1
.text:00000000000041EC                 call    _strncmp
.text:00000000000041F1                 test    eax, eax
.text:00000000000041F3                 jnz     loc_4300
.text:00000000000041F9
.text:00000000000041F9 loc_41F9:                               ; CODE XREF: usage+2CB↑j
.text:00000000000041F9                                         ; usage+415↓j
.text:00000000000041F9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000004200                 xor     edi, edi        ; domainname
.text:0000000000004202                 mov     edx, 5          ; category
.text:0000000000004207                 call    _dcgettext
.text:000000000000420C                 lea     rcx, aCsplit    ; "csplit"
.text:0000000000004213                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000421A                 mov     rsi, rax
.text:000000000000421D                 mov     edi, 1
.text:0000000000004222                 xor     eax, eax
.text:0000000000004224                 call    ___printf_chk
.text:0000000000004229                 cmp     r12, rbx
.text:000000000000422C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000004233                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000423A                 cmovz   rbx, rcx
.text:000000000000423E
.text:000000000000423E loc_423E:                               ; CODE XREF: usage+3E4↓j
.text:000000000000423E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000004245                 xor     edi, edi        ; domainname
.text:0000000000004247                 mov     edx, 5          ; category
.text:000000000000424C                 call    _dcgettext
.text:0000000000004251                 mov     rcx, rbx
.text:0000000000004254                 mov     rsi, rax
.text:0000000000004257                 mov     rdx, r12
.text:000000000000425A                 mov     edi, 1
.text:000000000000425F                 xor     eax, eax
.text:0000000000004261                 call    ___printf_chk
.text:0000000000004266                 jmp     loc_3F66
.text:000000000000426B ; ---------------------------------------------------------------------------
.text:000000000000426B
.text:000000000000426B loc_426B:                               ; CODE XREF: usage+294↑j
.text:000000000000426B                 call    _dcgettext
.text:0000000000004270                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004277                 lea     rdx, unk_16096
.text:000000000000427E                 mov     rsi, rax
.text:0000000000004281                 mov     edi, 1
.text:0000000000004286                 xor     eax, eax
.text:0000000000004288                 call    ___printf_chk
.text:000000000000428D                 xor     esi, esi        ; locale
.text:000000000000428F                 mov     edi, 5          ; category
.text:0000000000004294                 call    _setlocale
.text:0000000000004299                 test    rax, rax
.text:000000000000429C                 jz      short loc_42B6
.text:000000000000429E                 lea     rsi, s2         ; "en_"
.text:00000000000042A5                 mov     edx, 3          ; n
.text:00000000000042AA                 mov     rdi, rax        ; s1
.text:00000000000042AD                 call    _strncmp
.text:00000000000042B2                 test    eax, eax
.text:00000000000042B4                 jnz     short loc_42F9
.text:00000000000042B6
.text:00000000000042B6 loc_42B6:                               ; CODE XREF: usage+38C↑j
.text:00000000000042B6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000042BD                 mov     edx, 5          ; category
.text:00000000000042C2                 xor     edi, edi        ; domainname
.text:00000000000042C4                 lea     r12, aCsplit    ; "csplit"
.text:00000000000042CB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000042D2                 call    _dcgettext
.text:00000000000042D7                 lea     rcx, aCsplit    ; "csplit"
.text:00000000000042DE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000042E5                 mov     rsi, rax
.text:00000000000042E8                 mov     edi, 1
.text:00000000000042ED                 xor     eax, eax
.text:00000000000042EF                 call    ___printf_chk
.text:00000000000042F4                 jmp     loc_423E
.text:00000000000042F9 ; ---------------------------------------------------------------------------
.text:00000000000042F9
.text:00000000000042F9 loc_42F9:                               ; CODE XREF: usage+3A4↑j
.text:00000000000042F9                 lea     r12, aCsplit    ; "csplit"
.text:0000000000004300
.text:0000000000004300 loc_4300:                               ; CODE XREF: usage+2E3↑j
.text:0000000000004300                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000004307                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000430E                 xor     edi, edi        ; domainname
.text:0000000000004310                 mov     edx, 5          ; category
.text:0000000000004315                 call    _dcgettext
.text:000000000000431A                 mov     rsi, r13        ; stream
.text:000000000000431D                 mov     rdi, rax        ; s
.text:0000000000004320                 call    _fputs_unlocked
.text:0000000000004325                 jmp     loc_41F9
.text:0000000000004325 ; } // starts at 3F10
.text:0000000000004325 usage           endp
.text:0000000000004325
.text:0000000000004325 ; ---------------------------------------------------------------------------
.text:000000000000432A                 align 10h
.text:0000000000004330
.text:0000000000004330 ; =============== S U B R O U T I N E =======================================
.text:0000000000004330
.text:0000000000004330
.text:0000000000004330                 public close_stdout_set_file_name
.text:0000000000004330 close_stdout_set_file_name proc near
.text:0000000000004330 ; __unwind {
.text:0000000000004330                 mov     cs:file_name, rdi
.text:0000000000004337                 retn
.text:0000000000004337 ; } // starts at 4330
.text:0000000000004337 close_stdout_set_file_name endp
.text:0000000000004337
.text:0000000000004337 ; ---------------------------------------------------------------------------
.text:0000000000004338                 align 20h
.text:0000000000004340
.text:0000000000004340 ; =============== S U B R O U T I N E =======================================
.text:0000000000004340
.text:0000000000004340
.text:0000000000004340                 public close_stdout_set_ignore_EPIPE
.text:0000000000004340 close_stdout_set_ignore_EPIPE proc near
.text:0000000000004340 ; __unwind {
.text:0000000000004340                 mov     cs:ignore_EPIPE, dil
.text:0000000000004347                 retn
.text:0000000000004347 ; } // starts at 4340
.text:0000000000004347 close_stdout_set_ignore_EPIPE endp
.text:0000000000004347
.text:0000000000004347 ; ---------------------------------------------------------------------------
.text:0000000000004348                 align 10h
.text:0000000000004350
.text:0000000000004350 ; =============== S U B R O U T I N E =======================================
.text:0000000000004350
.text:0000000000004350 ; Attributes: info_from_lumina
.text:0000000000004350
.text:0000000000004350 ; void __cdecl close_stdout()
.text:0000000000004350                 public close_stdout
.text:0000000000004350 close_stdout    proc near               ; DATA XREF: main+6A↑o
.text:0000000000004350 ; __unwind {
.text:0000000000004350                 push    rbp
.text:0000000000004351                 push    rbx
.text:0000000000004352                 sub     rsp, 8
.text:0000000000004356                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000435D                 call    close_stream
.text:0000000000004362                 test    eax, eax
.text:0000000000004364                 jz      short loc_437C
.text:0000000000004366                 call    ___errno_location
.text:000000000000436B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000004372                 mov     rbx, rax
.text:0000000000004375                 jz      short loc_4393
.text:0000000000004377                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000437A                 jnz     short loc_4393
.text:000000000000437C
.text:000000000000437C loc_437C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000437C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000004383                 call    close_stream
.text:0000000000004388                 test    eax, eax
.text:000000000000438A                 jnz     short loc_43D2
.text:000000000000438C                 add     rsp, 8
.text:0000000000004390                 pop     rbx
.text:0000000000004391                 pop     rbp
.text:0000000000004392                 retn
.text:0000000000004393 ; ---------------------------------------------------------------------------
.text:0000000000004393
.text:0000000000004393 loc_4393:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000004393                                         ; close_stdout+2A↑j
.text:0000000000004393                 lea     rsi, aWriteError ; "write error"
.text:000000000000439A                 xor     edi, edi        ; domainname
.text:000000000000439C                 mov     edx, 5          ; category
.text:00000000000043A1                 call    _dcgettext
.text:00000000000043A6                 mov     rdi, cs:file_name
.text:00000000000043AD                 mov     rbp, rax
.text:00000000000043B0                 test    rdi, rdi
.text:00000000000043B3                 jz      short loc_43DD
.text:00000000000043B5                 call    quotearg_colon
.text:00000000000043BA                 mov     esi, [rbx]      ; errnum
.text:00000000000043BC                 lea     rdx, aS         ; "%s: "
.text:00000000000043C3                 mov     rcx, rax
.text:00000000000043C6                 mov     r8, rbp
.text:00000000000043C9                 xor     edi, edi        ; status
.text:00000000000043CB                 xor     eax, eax
.text:00000000000043CD                 call    _error
.text:00000000000043D2
.text:00000000000043D2 loc_43D2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000043D2                                         ; close_stdout+A2↓j
.text:00000000000043D2                 mov     edi, cs:exit_failure ; status
.text:00000000000043D8                 call    __exit
.text:00000000000043DD ; ---------------------------------------------------------------------------
.text:00000000000043DD
.text:00000000000043DD loc_43DD:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000043DD                 mov     esi, [rbx]      ; errnum
.text:00000000000043DF                 lea     rdx, format     ; format
.text:00000000000043E6                 mov     rcx, rax
.text:00000000000043E9                 xor     edi, edi        ; status
.text:00000000000043EB                 xor     eax, eax
.text:00000000000043ED                 call    _error
.text:00000000000043F2                 jmp     short loc_43D2
.text:00000000000043F2 ; } // starts at 4350
.text:00000000000043F2 close_stdout    endp
.text:00000000000043F2
.text:00000000000043F2 ; ---------------------------------------------------------------------------
.text:00000000000043F4                 align 20h
.text:0000000000004400
.text:0000000000004400 ; =============== S U B R O U T I N E =======================================
.text:0000000000004400
.text:0000000000004400
.text:0000000000004400 ; __int64 __fastcall fd_reopen(int fd2, char *file, int oflag)
.text:0000000000004400                 public fd_reopen
.text:0000000000004400 fd_reopen       proc near               ; CODE XREF: main+A92↑p
.text:0000000000004400 ; __unwind {
.text:0000000000004400                 push    r13
.text:0000000000004402                 push    r12
.text:0000000000004404                 xor     eax, eax
.text:0000000000004406                 push    rbp
.text:0000000000004407                 push    rbx
.text:0000000000004408                 mov     ebp, edi
.text:000000000000440A                 mov     rdi, rsi        ; file
.text:000000000000440D                 mov     esi, edx        ; oflag
.text:000000000000440F                 mov     edx, ecx
.text:0000000000004411                 sub     rsp, 8
.text:0000000000004415                 call    _open
.text:000000000000441A                 cmp     ebp, eax
.text:000000000000441C                 mov     ebx, eax
.text:000000000000441E                 jz      short loc_4449
.text:0000000000004420                 test    eax, eax
.text:0000000000004422                 js      short loc_4449
.text:0000000000004424                 mov     esi, ebp        ; fd2
.text:0000000000004426                 mov     edi, eax        ; fd
.text:0000000000004428                 call    _dup2
.text:000000000000442D                 mov     r12d, eax
.text:0000000000004430                 call    ___errno_location
.text:0000000000004435                 mov     r13d, [rax]
.text:0000000000004438                 mov     rbp, rax
.text:000000000000443B                 mov     edi, ebx        ; fd
.text:000000000000443D                 call    _close
.text:0000000000004442                 mov     ebx, r12d
.text:0000000000004445                 mov     [rbp+0], r13d
.text:0000000000004449
.text:0000000000004449 loc_4449:                               ; CODE XREF: fd_reopen+1E↑j
.text:0000000000004449                                         ; fd_reopen+22↑j
.text:0000000000004449                 add     rsp, 8
.text:000000000000444D                 mov     eax, ebx
.text:000000000000444F                 pop     rbx
.text:0000000000004450                 pop     rbp
.text:0000000000004451                 pop     r12
.text:0000000000004453                 pop     r13
.text:0000000000004455                 retn
.text:0000000000004455 ; } // starts at 4400
.text:0000000000004455 fd_reopen       endp
.text:0000000000004455
.text:0000000000004455 ; ---------------------------------------------------------------------------
.text:0000000000004456                 align 20h
.text:0000000000004460
.text:0000000000004460 ; =============== S U B R O U T I N E =======================================
.text:0000000000004460
.text:0000000000004460
.text:0000000000004460                 public fopen_safer
.text:0000000000004460 fopen_safer     proc near               ; CODE XREF: create_output_file+8E↑p
.text:0000000000004460 ; __unwind {
.text:0000000000004460                 push    r12
.text:0000000000004462                 push    rbp
.text:0000000000004463                 mov     rbp, rsi
.text:0000000000004466                 push    rbx
.text:0000000000004467                 call    _fopen
.text:000000000000446C                 test    rax, rax
.text:000000000000446F                 mov     rbx, rax
.text:0000000000004472                 jz      short loc_4481
.text:0000000000004474                 mov     rdi, rax        ; stream
.text:0000000000004477                 call    _fileno
.text:000000000000447C                 cmp     eax, 2
.text:000000000000447F                 jbe     short loc_4490
.text:0000000000004481
.text:0000000000004481 loc_4481:                               ; CODE XREF: fopen_safer+12↑j
.text:0000000000004481                                         ; fopen_safer+5B↓j ...
.text:0000000000004481                 mov     rax, rbx
.text:0000000000004484                 pop     rbx
.text:0000000000004485                 pop     rbp
.text:0000000000004486                 pop     r12
.text:0000000000004488                 retn
.text:0000000000004488 ; ---------------------------------------------------------------------------
.text:0000000000004489                 align 10h
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: fopen_safer+1F↑j
.text:0000000000004490                 mov     edi, eax
.text:0000000000004492                 call    dup_safer
.text:0000000000004497                 test    eax, eax
.text:0000000000004499                 mov     r12d, eax
.text:000000000000449C                 js      short loc_44D8
.text:000000000000449E                 mov     rdi, rbx        ; stream
.text:00000000000044A1                 call    rpl_fclose
.text:00000000000044A6                 test    eax, eax
.text:00000000000044A8                 jnz     short loc_44BD
.text:00000000000044AA                 mov     rsi, rbp        ; modes
.text:00000000000044AD                 mov     edi, r12d       ; fd
.text:00000000000044B0                 call    _fdopen
.text:00000000000044B5                 test    rax, rax
.text:00000000000044B8                 mov     rbx, rax
.text:00000000000044BB                 jnz     short loc_4481
.text:00000000000044BD
.text:00000000000044BD loc_44BD:                               ; CODE XREF: fopen_safer+48↑j
.text:00000000000044BD                 call    ___errno_location
.text:00000000000044C2                 mov     ebp, [rax]
.text:00000000000044C4                 mov     rbx, rax
.text:00000000000044C7                 mov     edi, r12d       ; fd
.text:00000000000044CA                 call    _close
.text:00000000000044CF                 mov     [rbx], ebp
.text:00000000000044D1                 xor     ebx, ebx
.text:00000000000044D3                 jmp     short loc_4481
.text:00000000000044D3 ; ---------------------------------------------------------------------------
.text:00000000000044D5                 align 8
.text:00000000000044D8
.text:00000000000044D8 loc_44D8:                               ; CODE XREF: fopen_safer+3C↑j
.text:00000000000044D8                 call    ___errno_location
.text:00000000000044DD                 mov     r12d, [rax]
.text:00000000000044E0                 mov     rbp, rax
.text:00000000000044E3                 mov     rdi, rbx        ; stream
.text:00000000000044E6                 call    rpl_fclose
.text:00000000000044EB                 xor     ebx, ebx
.text:00000000000044ED                 mov     [rbp+0], r12d
.text:00000000000044F1                 jmp     short loc_4481
.text:00000000000044F1 ; } // starts at 4460
.text:00000000000044F1 fopen_safer     endp
.text:00000000000044F1
.text:00000000000044F1 ; ---------------------------------------------------------------------------
.text:00000000000044F3                 align 20h
.text:0000000000004500
.text:0000000000004500 ; =============== S U B R O U T I N E =======================================
.text:0000000000004500
.text:0000000000004500 ; Attributes: info_from_lumina
.text:0000000000004500
.text:0000000000004500 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:0000000000004500                 public umaxtostr
.text:0000000000004500 umaxtostr       proc near               ; CODE XREF: regexp_error+77↑p
.text:0000000000004500                                         ; main+CC6↑p ...
.text:0000000000004500 ; __unwind {
.text:0000000000004500                 lea     rcx, [rsi+14h]
.text:0000000000004504                 mov     byte ptr [rsi+14h], 0
.text:0000000000004508                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:0000000000004512                 nop     word ptr [rax+rax+00h]
.text:0000000000004518
.text:0000000000004518 loc_4518:                               ; CODE XREF: umaxtostr+3C↓j
.text:0000000000004518                 mov     rax, rdi
.text:000000000000451B                 sub     rcx, 1
.text:000000000000451F                 mul     rsi
.text:0000000000004522                 shr     rdx, 3
.text:0000000000004526                 lea     rax, [rdx+rdx*4]
.text:000000000000452A                 add     rax, rax
.text:000000000000452D                 sub     rdi, rax
.text:0000000000004530                 add     edi, 30h ; '0'
.text:0000000000004533                 test    rdx, rdx
.text:0000000000004536                 mov     [rcx], dil
.text:0000000000004539                 mov     rdi, rdx
.text:000000000000453C                 jnz     short loc_4518
.text:000000000000453E                 mov     rax, rcx
.text:0000000000004541                 retn
.text:0000000000004541 ; } // starts at 4500
.text:0000000000004541 umaxtostr       endp
.text:0000000000004541
.text:0000000000004541 ; ---------------------------------------------------------------------------
.text:0000000000004542                 align 10h
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550
.text:0000000000004550                 public set_program_name
.text:0000000000004550 set_program_name proc near              ; CODE XREF: main+35↑p
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 test    rdi, rdi
.text:0000000000004553                 push    rbx
.text:0000000000004554                 jz      short loc_45CD
.text:0000000000004556                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000455B                 mov     rbx, rdi
.text:000000000000455E                 call    _strrchr
.text:0000000000004563                 test    rax, rax
.text:0000000000004566                 jz      short loc_45BD
.text:0000000000004568                 lea     r8, [rax+1]
.text:000000000000456C                 mov     rdx, r8
.text:000000000000456F                 sub     rdx, rbx
.text:0000000000004572                 cmp     rdx, 6
.text:0000000000004576                 jle     short loc_45BD
.text:0000000000004578                 lea     rsi, [rax-6]
.text:000000000000457C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000004583                 mov     ecx, 7
.text:0000000000004588                 repe cmpsb
.text:000000000000458A                 setnbe  dl
.text:000000000000458D                 sbb     dl, 0
.text:0000000000004590                 test    dl, dl
.text:0000000000004592                 jnz     short loc_45BD
.text:0000000000004594                 lea     rdi, aLt        ; "lt-"
.text:000000000000459B                 mov     ecx, 3
.text:00000000000045A0                 mov     rsi, r8
.text:00000000000045A3                 mov     rbx, r8
.text:00000000000045A6                 repe cmpsb
.text:00000000000045A8                 setnbe  dl
.text:00000000000045AB                 sbb     dl, 0
.text:00000000000045AE                 test    dl, dl
.text:00000000000045B0                 jnz     short loc_45BD
.text:00000000000045B2                 lea     rbx, [rax+4]
.text:00000000000045B6                 mov     cs:__bss_start, rbx
.text:00000000000045BD
.text:00000000000045BD loc_45BD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000045BD                                         ; set_program_name+26↑j ...
.text:00000000000045BD                 mov     cs:program_name, rbx
.text:00000000000045C4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000045CB                 pop     rbx
.text:00000000000045CC                 retn
.text:00000000000045CD ; ---------------------------------------------------------------------------
.text:00000000000045CD
.text:00000000000045CD loc_45CD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000045CD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000045D4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000045DB                 mov     edx, 37h ; '7'  ; n
.text:00000000000045E0                 mov     esi, 1          ; size
.text:00000000000045E5                 call    _fwrite
.text:00000000000045EA                 call    _abort
.text:00000000000045EA ; } // starts at 4550
.text:00000000000045EA set_program_name endp
.text:00000000000045EA
.text:00000000000045EA ; ---------------------------------------------------------------------------
.text:00000000000045EF                 align 10h
.text:00000000000045F0
.text:00000000000045F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045F0
.text:00000000000045F0 ; Attributes: info_from_lumina
.text:00000000000045F0
.text:00000000000045F0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000045F0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000045F0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000045F0 ; __unwind {
.text:00000000000045F0                 push    rbp
.text:00000000000045F1                 push    rbx
.text:00000000000045F2                 mov     rbp, rdi
.text:00000000000045F5                 mov     ebx, esi
.text:00000000000045F7                 sub     rsp, 8
.text:00000000000045FB                 call    locale_charset
.text:0000000000004600                 movzx   edx, byte ptr [rax]
.text:0000000000004603                 and     edx, 0FFFFFFDFh
.text:0000000000004606                 cmp     dl, 55h ; 'U'
.text:0000000000004609                 jz      short loc_4680
.text:000000000000460B                 cmp     dl, 47h ; 'G'
.text:000000000000460E                 jz      short loc_4630
.text:0000000000004610
.text:0000000000004610 loc_4610:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000004610                                         ; gettext_quote+50↓j ...
.text:0000000000004610                 lea     rax, unk_16BBB
.text:0000000000004617                 lea     rdx, asc_16BBD  ; "'"
.text:000000000000461E                 cmp     ebx, 9
.text:0000000000004621                 cmovnz  rax, rdx
.text:0000000000004625                 add     rsp, 8
.text:0000000000004629                 pop     rbx
.text:000000000000462A                 pop     rbp
.text:000000000000462B                 retn
.text:000000000000462B ; ---------------------------------------------------------------------------
.text:000000000000462C                 align 10h
.text:0000000000004630
.text:0000000000004630 loc_4630:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000004630                 movzx   edx, byte ptr [rax+1]
.text:0000000000004634                 and     edx, 0FFFFFFDFh
.text:0000000000004637                 cmp     dl, 42h ; 'B'
.text:000000000000463A                 jnz     short loc_4610
.text:000000000000463C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000004640                 jnz     short loc_4610
.text:0000000000004642                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000004646                 jnz     short loc_4610
.text:0000000000004648                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000464C                 jnz     short loc_4610
.text:000000000000464E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000004652                 jnz     short loc_4610
.text:0000000000004654                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000004658                 jnz     short loc_4610
.text:000000000000465A                 cmp     byte ptr [rax+7], 0
.text:000000000000465E                 jnz     short loc_4610
.text:0000000000004660                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000004664                 lea     rax, unk_16BB4
.text:000000000000466B                 lea     rdx, unk_16BB8
.text:0000000000004672                 cmovnz  rax, rdx
.text:0000000000004676                 add     rsp, 8
.text:000000000000467A                 pop     rbx
.text:000000000000467B                 pop     rbp
.text:000000000000467C                 retn
.text:000000000000467C ; ---------------------------------------------------------------------------
.text:000000000000467D                 align 20h
.text:0000000000004680
.text:0000000000004680 loc_4680:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000004680                 movzx   edx, byte ptr [rax+1]
.text:0000000000004684                 and     edx, 0FFFFFFDFh
.text:0000000000004687                 cmp     dl, 54h ; 'T'
.text:000000000000468A                 jnz     short loc_4610
.text:000000000000468C                 movzx   edx, byte ptr [rax+2]
.text:0000000000004690                 and     edx, 0FFFFFFDFh
.text:0000000000004693                 cmp     dl, 46h ; 'F'
.text:0000000000004696                 jnz     loc_4610
.text:000000000000469C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000046A0                 jnz     loc_4610
.text:00000000000046A6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000046AA                 jnz     loc_4610
.text:00000000000046B0                 cmp     byte ptr [rax+5], 0
.text:00000000000046B4                 jnz     loc_4610
.text:00000000000046BA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000046BE                 lea     rax, unk_16BAC
.text:00000000000046C5                 lea     rdx, unk_16BB0
.text:00000000000046CC                 cmovnz  rax, rdx
.text:00000000000046D0                 add     rsp, 8
.text:00000000000046D4                 pop     rbx
.text:00000000000046D5                 pop     rbp
.text:00000000000046D6                 retn
.text:00000000000046D6 ; } // starts at 45F0
.text:00000000000046D6 gettext_quote   endp
.text:00000000000046D6
.text:00000000000046D6 ; ---------------------------------------------------------------------------
.text:00000000000046D7                 align 20h
.text:00000000000046E0
.text:00000000000046E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046E0
.text:00000000000046E0 ; Attributes: info_from_lumina
.text:00000000000046E0
.text:00000000000046E0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000046E0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000046E0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000046E0
.text:00000000000046E0 var_E0          = dword ptr -0E0h
.text:00000000000046E0 var_DB          = byte ptr -0DBh
.text:00000000000046E0 var_DA          = byte ptr -0DAh
.text:00000000000046E0 var_D9          = byte ptr -0D9h
.text:00000000000046E0 s               = qword ptr -0D8h
.text:00000000000046E0 n               = qword ptr -0D0h
.text:00000000000046E0 var_C8          = qword ptr -0C8h
.text:00000000000046E0 ps              = qword ptr -0C0h
.text:00000000000046E0 var_B8          = qword ptr -0B8h
.text:00000000000046E0 var_B0          = qword ptr -0B0h
.text:00000000000046E0 var_A8          = qword ptr -0A8h
.text:00000000000046E0 s2              = qword ptr -0A0h
.text:00000000000046E0 var_98          = qword ptr -98h
.text:00000000000046E0 var_90          = qword ptr -90h
.text:00000000000046E0 var_88          = qword ptr -88h
.text:00000000000046E0 var_80          = qword ptr -80h
.text:00000000000046E0 var_78          = qword ptr -78h
.text:00000000000046E0 var_70          = dword ptr -70h
.text:00000000000046E0 var_6C          = byte ptr -6Ch
.text:00000000000046E0 var_6B          = byte ptr -6Bh
.text:00000000000046E0 var_6A          = byte ptr -6Ah
.text:00000000000046E0 var_69          = byte ptr -69h
.text:00000000000046E0 var_68          = qword ptr -68h
.text:00000000000046E0 var_60          = qword ptr -60h
.text:00000000000046E0 wc              = dword ptr -4Ch
.text:00000000000046E0 var_48          = qword ptr -48h
.text:00000000000046E0 var_40          = qword ptr -40h
.text:00000000000046E0 arg_0           = qword ptr  8
.text:00000000000046E0 arg_8           = qword ptr  10h
.text:00000000000046E0 arg_10          = qword ptr  18h
.text:00000000000046E0
.text:00000000000046E0 ; __unwind {
.text:00000000000046E0                 push    r15
.text:00000000000046E2                 push    r14
.text:00000000000046E4                 mov     r15d, r8d
.text:00000000000046E7                 push    r13
.text:00000000000046E9                 push    r12
.text:00000000000046EB                 mov     r14, rdi
.text:00000000000046EE                 push    rbp
.text:00000000000046EF                 push    rbx
.text:00000000000046F0                 mov     ebx, r9d
.text:00000000000046F3                 mov     r13, rsi
.text:00000000000046F6                 mov     rbp, rcx
.text:00000000000046F9                 and     ebx, 2
.text:00000000000046FC                 sub     rsp, 0B8h
.text:0000000000004703                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000470B                 mov     [rsp+0E8h+s], rdx
.text:0000000000004710                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000004715                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000471A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000471F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000004727                 mov     [rsp+0E8h+var_80], rax
.text:000000000000472C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000004734                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004739                 mov     rax, fs:28h
.text:0000000000004742                 mov     [rsp+0E8h+var_40], rax
.text:000000000000474A                 xor     eax, eax
.text:000000000000474C                 call    ___ctype_get_mb_cur_max
.text:0000000000004751                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000004755                 mov     [rsp+0E8h+var_90], rax
.text:000000000000475A                 ja      def_4771        ; jumptable 00000000000121F1 default case
.text:0000000000004760                 lea     rcx, jpt_4771
.text:0000000000004767                 mov     edx, r15d
.text:000000000000476A                 movsxd  rax, ds:(jpt_4771 - 16C20h)[rcx+rdx*4]
.text:000000000000476E                 add     rax, rcx
.text:0000000000004771                 jmp     rax             ; switch jump
.text:0000000000004773 ; ---------------------------------------------------------------------------
.text:0000000000004773
.text:0000000000004773 loc_4773:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004773                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000004773                                         ; DATA XREF: ...
.text:0000000000004773                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000004778                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000477D                 xor     r12d, r12d
.text:0000000000004780                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004789                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000478E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004793
.text:0000000000004793 loc_4793:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000004793                 lea     rax, asc_16BBD  ; "'"
.text:000000000000479A                 mov     [rsp+0E8h+n], 1
.text:00000000000047A3                 xor     r15d, r15d
.text:00000000000047A6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000047AE                 mov     [rsp+0E8h+s2], rax
.text:00000000000047B3
.text:00000000000047B3 loc_47B3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000047B3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000047B3                 xor     r11d, r11d
.text:00000000000047B6                 mov     rax, rbp
.text:00000000000047B9                 mov     r8d, r12d
.text:00000000000047BC                 mov     rbp, r11
.text:00000000000047BF                 mov     r11, rax
.text:00000000000047C2                 nop     word ptr [rax+rax+00h]
.text:00000000000047C8
.text:00000000000047C8 loc_47C8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000047C8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000047C8                 cmp     r11, rbp
.text:00000000000047CB                 setnz   r12b
.text:00000000000047CF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000047D3                 jnz     short loc_47E2
.text:00000000000047D5                 mov     rax, [rsp+0E8h+s]
.text:00000000000047DA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000047DE                 setnz   r12b
.text:00000000000047E2
.text:00000000000047E2 loc_47E2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000047E2                 test    r12b, r12b
.text:00000000000047E5                 jz      loc_4E40
.text:00000000000047EB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000047F0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000047F5                 lea     r9, [rdi+rbp]
.text:00000000000047F9                 setnz   al
.text:00000000000047FC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004800                 mov     r10d, eax
.text:0000000000004803                 jz      loc_48B0
.text:0000000000004809                 mov     rax, [rsp+0E8h+n]
.text:000000000000480E                 test    rax, rax
.text:0000000000004811                 jz      loc_4C40
.text:0000000000004817                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000481B                 lea     rbx, [rbp+rax+0]
.text:0000000000004820                 jnz     short loc_4850
.text:0000000000004822                 cmp     rax, 1
.text:0000000000004826                 jbe     short loc_4850
.text:0000000000004828                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000482D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000004832                 mov     [rsp+0E8h+ps], r9
.text:0000000000004837                 call    _strlen
.text:000000000000483C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004842                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000004848                 mov     r11, rax
.text:000000000000484B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000004850                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000004850                 cmp     rbx, r11
.text:0000000000004853                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004858                 ja      loc_4E10
.text:000000000000485E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000004863                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000004868                 mov     rdi, r9         ; s1
.text:000000000000486B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000004870                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000004875                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000487A                 call    _memcmp
.text:000000000000487F                 test    eax, eax
.text:0000000000004881                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004886                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000488C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000004891                 jnz     loc_4E10
.text:0000000000004897                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000489C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000048A2                 jnz     loc_5825
.text:00000000000048A8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000048B0
.text:00000000000048B0 loc_48B0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000048B0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000048B0                 movzx   ebx, byte ptr [r9]
.text:00000000000048B4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000048B7                 ja      def_48CE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000048BD                 lea     rcx, jpt_48CE
.text:00000000000048C4                 movzx   edx, bl
.text:00000000000048C7                 movsxd  rax, ds:(jpt_48CE - 16C4Ch)[rcx+rdx*4]
.text:00000000000048CB                 add     rax, rcx
.text:00000000000048CE                 jmp     rax             ; switch jump
.text:00000000000048D0 ; ---------------------------------------------------------------------------
.text:00000000000048D0
.text:00000000000048D0 loc_48D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000048D0                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:00000000000048D0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000048D3
.text:00000000000048D3 loc_48D3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000048D3                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:00000000000048D3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000048D7                 setnz   al
.text:00000000000048DA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000048DE                 jnz     short loc_48EC
.text:00000000000048E0                 mov     rax, [rsp+0E8h+s]
.text:00000000000048E5                 cmp     byte ptr [rax+1], 0
.text:00000000000048E9                 setnz   al
.text:00000000000048EC
.text:00000000000048EC loc_48EC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000048EC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000048F1                 setz    dl
.text:00000000000048F4                 test    al, al
.text:00000000000048F6                 jz      loc_4B48
.text:00000000000048FC
.text:00000000000048FC loc_48FC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000048FC                 xor     r12d, r12d
.text:00000000000048FF                 xor     eax, eax
.text:0000000000004901                 nop     dword ptr [rax+00000000h]
.text:0000000000004908
.text:0000000000004908 loc_4908:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000004908                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000004908                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000490D                 jnz     loc_4A22
.text:0000000000004913                 test    dl, dl
.text:0000000000004915                 jnz     loc_4A22
.text:000000000000491B
.text:000000000000491B loc_491B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000491B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000004920                 test    rsi, rsi
.text:0000000000004923                 jz      short loc_4939
.text:0000000000004925                 mov     edx, ebx
.text:0000000000004927                 shr     dl, 5
.text:000000000000492A                 movzx   edx, dl
.text:000000000000492D                 mov     edx, [rsi+rdx*4]
.text:0000000000004930                 bt      edx, ebx
.text:0000000000004933                 jb      loc_4A83
.text:0000000000004939
.text:0000000000004939 loc_4939:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000004939                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000004939                 test    r10b, r10b
.text:000000000000493C                 jnz     loc_4A83
.text:0000000000004942                 xor     eax, 1
.text:0000000000004945                 add     rbp, 1
.text:0000000000004949                 and     eax, r8d
.text:000000000000494C
.text:000000000000494C loc_494C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000494C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000494C                 test    al, al
.text:000000000000494E                 jz      short loc_4970
.text:0000000000004950                 cmp     r13, r15
.text:0000000000004953                 jbe     short loc_495A
.text:0000000000004955                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000495A
.text:000000000000495A loc_495A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000495A                 lea     rax, [r15+1]
.text:000000000000495E                 cmp     r13, rax
.text:0000000000004961                 jbe     short loc_4969
.text:0000000000004963                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004969
.text:0000000000004969 loc_4969:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000004969                 add     r15, 2
.text:000000000000496D                 xor     r8d, r8d
.text:0000000000004970
.text:0000000000004970 loc_4970:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000004970                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000004970                 cmp     r15, r13
.text:0000000000004973                 jnb     short loc_4979
.text:0000000000004975                 mov     [r14+r15], bl
.text:0000000000004979
.text:0000000000004979 loc_4979:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000004979                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000497E                 add     r15, 1
.text:0000000000004982                 mov     eax, 0
.text:0000000000004987                 test    r12b, r12b
.text:000000000000498A                 cmovz   edi, eax
.text:000000000000498D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000004992                 jmp     loc_47C8
.text:0000000000004992 ; ---------------------------------------------------------------------------
.text:0000000000004997                 align 20h
.text:00000000000049A0
.text:00000000000049A0 loc_49A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000049A0                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:00000000000049A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000049A3
.text:00000000000049A3 loc_49A3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000049A3                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:00000000000049A3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000049A7                 cmp     eax, 2
.text:00000000000049AA                 jz      loc_4F68
.text:00000000000049B0                 cmp     eax, 5
.text:00000000000049B3                 jz      loc_4F28
.text:00000000000049B9                 cmp     eax, 2
.text:00000000000049BC                 mov     ebx, 3Fh ; '?'
.text:00000000000049C1                 setz    dl
.text:00000000000049C4                 xor     r12d, r12d
.text:00000000000049C7                 xor     eax, eax
.text:00000000000049C9                 jmp     loc_4908
.text:00000000000049C9 ; ---------------------------------------------------------------------------
.text:00000000000049CE                 align 10h
.text:00000000000049D0
.text:00000000000049D0 loc_49D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000049D0                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:00000000000049D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000049D3
.text:00000000000049D3 loc_49D3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000049D3                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:00000000000049D3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000049D8                 jz      loc_4EE0
.text:00000000000049DE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000049E3                 xor     edx, edx
.text:00000000000049E5                 xor     eax, eax
.text:00000000000049E7                 mov     ebx, 27h ; '''
.text:00000000000049EC                 jmp     loc_4908
.text:00000000000049EC ; ---------------------------------------------------------------------------
.text:00000000000049F1                 align 8
.text:00000000000049F8
.text:00000000000049F8 loc_49F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000049F8                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:00000000000049F8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000049FD                 mov     ebx, 74h ; 't'
.text:0000000000004A02
.text:0000000000004A02 loc_4A02:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000004A02                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000004A02                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004A07                 setz    al
.text:0000000000004A0A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004A0E                 jnz     loc_4B5E
.text:0000000000004A14
.text:0000000000004A14 loc_4A14:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000004A14                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000004A14                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004A19                 jnz     short loc_4A80
.text:0000000000004A1B
.text:0000000000004A1B loc_4A1B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000004A1B                 mov     ebx, edx
.text:0000000000004A1D                 xor     r12d, r12d
.text:0000000000004A20                 xor     eax, eax
.text:0000000000004A22
.text:0000000000004A22 loc_4A22:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000004A22                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000004A22                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004A27                 jnz     loc_491B
.text:0000000000004A2D                 jmp     loc_4939
.text:0000000000004A2D ; ---------------------------------------------------------------------------
.text:0000000000004A32                 align 8
.text:0000000000004A38
.text:0000000000004A38 loc_4A38:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004A38                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:0000000000004A38                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000004A3D                 mov     ebx, 62h ; 'b'
.text:0000000000004A42                 jmp     short loc_4A14
.text:0000000000004A42 ; ---------------------------------------------------------------------------
.text:0000000000004A44                 align 8
.text:0000000000004A48
.text:0000000000004A48 loc_4A48:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004A48                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:0000000000004A48                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000004A4D                 jz      loc_4E20
.text:0000000000004A53                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004A58                 jz      loc_4C70
.text:0000000000004A5E
.text:0000000000004A5E loc_4A5E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000004A5E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004A63                 jz      loc_4C70
.text:0000000000004A69                 cmp     [rsp+0E8h+n], 0
.text:0000000000004A6F                 jnz     loc_4E2B
.text:0000000000004A75                 mov     ebx, 5Ch ; '\'
.text:0000000000004A7A                 nop     word ptr [rax+rax+00h]
.text:0000000000004A80
.text:0000000000004A80 loc_4A80:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000004A80                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000004A80                 xor     r12d, r12d
.text:0000000000004A83
.text:0000000000004A83 loc_4A83:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000004A83                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000004A83                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004A88                 setz    dl
.text:0000000000004A8B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004A90                 mov     eax, edx
.text:0000000000004A92                 jnz     loc_52E8
.text:0000000000004A98                 mov     eax, r8d
.text:0000000000004A9B                 xor     eax, 1
.text:0000000000004A9E                 and     al, dl
.text:0000000000004AA0                 jz      short loc_4AD1
.text:0000000000004AA2                 cmp     r13, r15
.text:0000000000004AA5                 jbe     short loc_4AAC
.text:0000000000004AA7                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004AAC
.text:0000000000004AAC loc_4AAC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000004AAC                 lea     rdx, [r15+1]
.text:0000000000004AB0                 cmp     r13, rdx
.text:0000000000004AB3                 jbe     short loc_4ABB
.text:0000000000004AB5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004ABB
.text:0000000000004ABB loc_4ABB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000004ABB                 lea     rdx, [r15+2]
.text:0000000000004ABF                 cmp     r13, rdx
.text:0000000000004AC2                 jbe     short loc_4ACA
.text:0000000000004AC4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004ACA
.text:0000000000004ACA loc_4ACA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000004ACA                 add     r15, 3
.text:0000000000004ACE                 mov     r8d, eax
.text:0000000000004AD1
.text:0000000000004AD1 loc_4AD1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000004AD1                 cmp     r13, r15
.text:0000000000004AD4                 jbe     short loc_4ADB
.text:0000000000004AD6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004ADB
.text:0000000000004ADB loc_4ADB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000004ADB                 add     r15, 1
.text:0000000000004ADF                 add     rbp, 1
.text:0000000000004AE3                 jmp     loc_4970
.text:0000000000004AE3 ; ---------------------------------------------------------------------------
.text:0000000000004AE8                 align 10h
.text:0000000000004AF0
.text:0000000000004AF0 loc_4AF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004AF0                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:0000000000004AF0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000004AF5                 jnz     loc_4CC3
.text:0000000000004AFB                 xor     edx, edx
.text:0000000000004AFD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000004B02                 jz      loc_4A1B
.text:0000000000004B08                 add     rbp, 1
.text:0000000000004B0C                 jmp     loc_47C8
.text:0000000000004B0C ; ---------------------------------------------------------------------------
.text:0000000000004B11                 align 8
.text:0000000000004B18
.text:0000000000004B18 loc_4B18:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004B18                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:0000000000004B18                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000004B1D                 setz    dl
.text:0000000000004B20                 xor     eax, eax
.text:0000000000004B22                 jmp     loc_4908
.text:0000000000004B22 ; ---------------------------------------------------------------------------
.text:0000000000004B27                 align 10h
.text:0000000000004B30
.text:0000000000004B30 loc_4B30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004B30                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:0000000000004B30                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000004B35                 mov     ebx, 61h ; 'a'
.text:0000000000004B3A                 jmp     loc_4A14
.text:0000000000004B3A ; ---------------------------------------------------------------------------
.text:0000000000004B3F                 align 20h
.text:0000000000004B40
.text:0000000000004B40 loc_4B40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004B40                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:0000000000004B40                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000004B45                 setz    dl
.text:0000000000004B48
.text:0000000000004B48 loc_4B48:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000004B48                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000004B48                 test    rbp, rbp
.text:0000000000004B4B                 jnz     loc_48FC
.text:0000000000004B51
.text:0000000000004B51 loc_4B51:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000004B51                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000004B51                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004B56                 and     al, dl
.text:0000000000004B58                 jz      loc_4908
.text:0000000000004B5E
.text:0000000000004B5E loc_4B5E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000004B5E                 mov     rbp, r11
.text:0000000000004B61                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004B69                 jmp     loc_5269
.text:0000000000004B69 ; ---------------------------------------------------------------------------
.text:0000000000004B6E                 align 10h
.text:0000000000004B70
.text:0000000000004B70 loc_4B70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004B70                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:0000000000004B70                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004B75                 setz    dl
.text:0000000000004B78                 xor     r12d, r12d
.text:0000000000004B7B                 jmp     short loc_4B51
.text:0000000000004B7B ; ---------------------------------------------------------------------------
.text:0000000000004B7D                 align 20h
.text:0000000000004B80
.text:0000000000004B80 loc_4B80:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004B80                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:0000000000004B80                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000004B85                 mov     ebx, 20h ; ' '
.text:0000000000004B8A                 setz    dl
.text:0000000000004B8D                 jmp     short loc_4B51
.text:0000000000004B8D ; ---------------------------------------------------------------------------
.text:0000000000004B8F                 align 10h
.text:0000000000004B90
.text:0000000000004B90 loc_4B90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004B90                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:0000000000004B90                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000004B95                 mov     ebx, 72h ; 'r'
.text:0000000000004B9A                 jmp     loc_4A02
.text:0000000000004B9A ; ---------------------------------------------------------------------------
.text:0000000000004B9F                 align 20h
.text:0000000000004BA0
.text:0000000000004BA0 loc_4BA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004BA0                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:0000000000004BA0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000004BA5                 mov     ebx, 66h ; 'f'
.text:0000000000004BAA                 jmp     loc_4A14
.text:0000000000004BAA ; ---------------------------------------------------------------------------
.text:0000000000004BAF                 align 10h
.text:0000000000004BB0
.text:0000000000004BB0 loc_4BB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004BB0                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:0000000000004BB0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000004BB5                 mov     ebx, 76h ; 'v'
.text:0000000000004BBA                 jmp     loc_4A14
.text:0000000000004BBA ; ---------------------------------------------------------------------------
.text:0000000000004BBF                 align 20h
.text:0000000000004BC0
.text:0000000000004BC0 loc_4BC0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004BC0                                         ; DATA XREF: .rodata:jpt_48CE↓o
.text:0000000000004BC0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000004BC5                 mov     ebx, 6Eh ; 'n'
.text:0000000000004BCA                 jmp     loc_4A02
.text:0000000000004BCA ; ---------------------------------------------------------------------------
.text:0000000000004BCF                 align 10h
.text:0000000000004BD0
.text:0000000000004BD0 def_4C5A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000004BD0                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000004BD0                                         ; DATA XREF: ...
.text:0000000000004BD0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004BD3                 nop     dword ptr [rax+rax+00h]
.text:0000000000004BD8
.text:0000000000004BD8 def_48CE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000004BD8                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000004BD8                                         ; DATA XREF: ...
.text:0000000000004BD8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000004BDE                 jnz     loc_4F88
.text:0000000000004BE4                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000004BE9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000004BEE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004BF3                 call    ___ctype_b_loc
.text:0000000000004BF8                 mov     rcx, [rax]
.text:0000000000004BFB                 movzx   edx, bl
.text:0000000000004BFE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000004C04                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000004C0A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000004C0F                 mov     edi, 1
.text:0000000000004C14                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000004C18                 and     ax, 4000h
.text:0000000000004C1C                 setnz   r12b
.text:0000000000004C20                 setz    al
.text:0000000000004C23                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004C27
.text:0000000000004C27 loc_4C27:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000004C27                 test    al, al
.text:0000000000004C29                 jnz     loc_55C1
.text:0000000000004C2F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004C34                 setz    dl
.text:0000000000004C37                 jmp     loc_4908
.text:0000000000004C37 ; ---------------------------------------------------------------------------
.text:0000000000004C3C                 align 20h
.text:0000000000004C40
.text:0000000000004C40 loc_4C40:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000004C40                 movzx   ebx, byte ptr [r9]
.text:0000000000004C44                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004C47                 ja      short def_4C5A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004C49                 lea     rcx, jpt_4C5A
.text:0000000000004C50                 movzx   edx, bl
.text:0000000000004C53                 movsxd  rax, ds:(jpt_4C5A - 16E48h)[rcx+rdx*4]
.text:0000000000004C57                 add     rax, rcx
.text:0000000000004C5A                 jmp     rax             ; switch jump
.text:0000000000004C5A ; ---------------------------------------------------------------------------
.text:0000000000004C5C                 align 20h
.text:0000000000004C60
.text:0000000000004C60 loc_4C60:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004C60                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:0000000000004C60                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000004C63                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004C68                 jnz     loc_4A5E
.text:0000000000004C6E                 xchg    ax, ax
.text:0000000000004C70
.text:0000000000004C70 loc_4C70:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000004C70                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000004C70                 mov     edx, 5Ch ; '\'
.text:0000000000004C75                 mov     ebx, 5Ch ; '\'
.text:0000000000004C7A                 jmp     loc_4A14
.text:0000000000004C7A ; ---------------------------------------------------------------------------
.text:0000000000004C7F                 align 20h
.text:0000000000004C80
.text:0000000000004C80 loc_4C80:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004C80                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:0000000000004C80                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000004C85                 xor     r10d, r10d
.text:0000000000004C88                 mov     ebx, 66h ; 'f'
.text:0000000000004C8D                 jmp     loc_4A14
.text:0000000000004C8D ; ---------------------------------------------------------------------------
.text:0000000000004C92                 align 8
.text:0000000000004C98
.text:0000000000004C98 loc_4C98:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004C98                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:0000000000004C98                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000004C9D                 xor     r10d, r10d
.text:0000000000004CA0                 mov     ebx, 6Eh ; 'n'
.text:0000000000004CA5                 jmp     loc_4A02
.text:0000000000004CA5 ; ---------------------------------------------------------------------------
.text:0000000000004CAA                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 loc_4CB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004CB0                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:0000000000004CB0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000004CB5                 jmp     loc_4A80
.text:0000000000004CB5 ; ---------------------------------------------------------------------------
.text:0000000000004CBA                 align 20h
.text:0000000000004CC0
.text:0000000000004CC0 loc_4CC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004CC0                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:0000000000004CC0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000004CC3
.text:0000000000004CC3 loc_4CC3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000004CC3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004CC8                 setz    dl
.text:0000000000004CCB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004CD0                 jnz     loc_586A
.text:0000000000004CD6                 mov     eax, r8d
.text:0000000000004CD9                 mov     rcx, r15
.text:0000000000004CDC                 xor     eax, 1
.text:0000000000004CDF                 and     al, dl
.text:0000000000004CE1                 jz      short loc_4D10
.text:0000000000004CE3                 cmp     r13, r15
.text:0000000000004CE6                 jbe     short loc_4CED
.text:0000000000004CE8                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004CED
.text:0000000000004CED loc_4CED:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000004CED                 lea     rcx, [r15+1]
.text:0000000000004CF1                 cmp     r13, rcx
.text:0000000000004CF4                 jbe     short loc_4CFC
.text:0000000000004CF6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004CFC
.text:0000000000004CFC loc_4CFC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000004CFC                 lea     rcx, [r15+2]
.text:0000000000004D00                 cmp     r13, rcx
.text:0000000000004D03                 ja      loc_5339
.text:0000000000004D09
.text:0000000000004D09 loc_4D09:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000004D09                 lea     rcx, [r15+3]
.text:0000000000004D0D                 mov     r8d, eax
.text:0000000000004D10
.text:0000000000004D10 loc_4D10:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000004D10                 cmp     r13, rcx
.text:0000000000004D13                 jbe     short loc_4D1A
.text:0000000000004D15                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000004D1A
.text:0000000000004D1A loc_4D1A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000004D1A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004D1F                 lea     r15, [rcx+1]
.text:0000000000004D23                 jz      loc_5329
.text:0000000000004D29                 lea     rax, [rbp+1]
.text:0000000000004D2D                 cmp     rax, r11
.text:0000000000004D30                 jnb     short loc_4D4B
.text:0000000000004D32                 mov     rax, [rsp+0E8h+s]
.text:0000000000004D37                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000004D3C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000004D40                 sub     eax, 30h ; '0'
.text:0000000000004D43                 cmp     al, 9
.text:0000000000004D45                 jbe     loc_5579
.text:0000000000004D4B
.text:0000000000004D4B loc_4D4B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000004D4B                 mov     eax, r12d
.text:0000000000004D4E                 mov     ebx, 30h ; '0'
.text:0000000000004D53                 xor     r12d, r12d
.text:0000000000004D56                 jmp     loc_4908
.text:0000000000004D56 ; ---------------------------------------------------------------------------
.text:0000000000004D5B                 align 20h
.text:0000000000004D60
.text:0000000000004D60 loc_4D60:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004D60                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:0000000000004D60                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000004D65                 mov     r12d, r10d
.text:0000000000004D68                 setz    dl
.text:0000000000004D6B                 xor     r10d, r10d
.text:0000000000004D6E                 xor     eax, eax
.text:0000000000004D70                 jmp     loc_4908
.text:0000000000004D70 ; ---------------------------------------------------------------------------
.text:0000000000004D75                 align 8
.text:0000000000004D78
.text:0000000000004D78 loc_4D78:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004D78                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:0000000000004D78                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000004D7D                 setz    dl
.text:0000000000004D80                 xor     r10d, r10d
.text:0000000000004D83                 jmp     loc_4B48
.text:0000000000004D83 ; ---------------------------------------------------------------------------
.text:0000000000004D88                 align 10h
.text:0000000000004D90
.text:0000000000004D90 loc_4D90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004D90                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:0000000000004D90                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004D95                 setz    dl
.text:0000000000004D98                 xor     r10d, r10d
.text:0000000000004D9B                 xor     r12d, r12d
.text:0000000000004D9E                 jmp     loc_4B51
.text:0000000000004D9E ; ---------------------------------------------------------------------------
.text:0000000000004DA3                 align 8
.text:0000000000004DA8
.text:0000000000004DA8 loc_4DA8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004DA8                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:0000000000004DA8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000004DAD                 mov     r12d, r10d
.text:0000000000004DB0                 mov     ebx, 20h ; ' '
.text:0000000000004DB5                 setz    dl
.text:0000000000004DB8                 xor     r10d, r10d
.text:0000000000004DBB                 jmp     loc_4B51
.text:0000000000004DC0 ; ---------------------------------------------------------------------------
.text:0000000000004DC0
.text:0000000000004DC0 loc_4DC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004DC0                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:0000000000004DC0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000004DC5                 xor     r10d, r10d
.text:0000000000004DC8                 mov     ebx, 72h ; 'r'
.text:0000000000004DCD                 jmp     loc_4A02
.text:0000000000004DCD ; ---------------------------------------------------------------------------
.text:0000000000004DD2                 align 8
.text:0000000000004DD8
.text:0000000000004DD8 loc_4DD8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004DD8                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:0000000000004DD8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000004DDD                 jmp     loc_4A80
.text:0000000000004DDD ; ---------------------------------------------------------------------------
.text:0000000000004DE2                 align 8
.text:0000000000004DE8
.text:0000000000004DE8 loc_4DE8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004DE8                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:0000000000004DE8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000004DED                 xor     r10d, r10d
.text:0000000000004DF0                 mov     ebx, 74h ; 't'
.text:0000000000004DF5                 jmp     loc_4A02
.text:0000000000004DF5 ; ---------------------------------------------------------------------------
.text:0000000000004DFA                 align 20h
.text:0000000000004E00
.text:0000000000004E00 loc_4E00:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004E00                                         ; DATA XREF: .rodata:jpt_4C5A↓o
.text:0000000000004E00                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000004E05                 jmp     loc_4A80
.text:0000000000004E05 ; ---------------------------------------------------------------------------
.text:0000000000004E0A                 align 10h
.text:0000000000004E10
.text:0000000000004E10 loc_4E10:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000004E10                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000004E10                 xor     r10d, r10d
.text:0000000000004E13                 jmp     loc_48B0
.text:0000000000004E13 ; ---------------------------------------------------------------------------
.text:0000000000004E18                 align 20h
.text:0000000000004E20
.text:0000000000004E20 loc_4E20:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000004E20                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004E25                 jnz     loc_5790
.text:0000000000004E2B
.text:0000000000004E2B loc_4E2B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000004E2B                 add     rbp, 1
.text:0000000000004E2F                 mov     eax, r8d
.text:0000000000004E32                 xor     r12d, r12d
.text:0000000000004E35                 mov     ebx, 5Ch ; '\'
.text:0000000000004E3A                 jmp     loc_494C
.text:0000000000004E3A ; ---------------------------------------------------------------------------
.text:0000000000004E3F                 align 20h
.text:0000000000004E40
.text:0000000000004E40 loc_4E40:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000004E40                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004E45                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004E4A                 mov     r12d, r8d
.text:0000000000004E4D                 mov     rbp, r11
.text:0000000000004E50                 setz    dl
.text:0000000000004E53                 mov     eax, ebx
.text:0000000000004E55                 test    r15, r15
.text:0000000000004E58                 setz    cl
.text:0000000000004E5B                 and     eax, edx
.text:0000000000004E5D                 and     al, cl
.text:0000000000004E5F                 jnz     loc_58C6
.text:0000000000004E65                 mov     eax, ebx
.text:0000000000004E67                 xor     eax, 1
.text:0000000000004E6A                 and     dl, al
.text:0000000000004E6C                 jz      loc_57DC
.text:0000000000004E72                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000004E77                 jz      loc_57DA
.text:0000000000004E7D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000004E82                 jnz     loc_587D
.text:0000000000004E88                 test    r13, r13
.text:0000000000004E8B                 setz    al
.text:0000000000004E8E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004E94                 setnz   dl
.text:0000000000004E97                 and     al, dl
.text:0000000000004E99                 jz      loc_58BC
.text:0000000000004E9F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004EA4
.text:0000000000004EA4 loc_4EA4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000004EA4                 lea     rbx, asc_16BBD  ; "'"
.text:0000000000004EAB                 mov     byte ptr [r14], 27h ; '''
.text:0000000000004EAF                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004EB7                 mov     r15d, 1
.text:0000000000004EBD                 mov     [rsp+0E8h+n], 1
.text:0000000000004EC6                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004ECB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004ED0                 mov     [rsp+0E8h+var_6C], al
.text:0000000000004ED4                 jmp     loc_47B3
.text:0000000000004ED4 ; ---------------------------------------------------------------------------
.text:0000000000004ED9                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 loc_4EE0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000004EE0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004EE5                 jnz     loc_5790
.text:0000000000004EEB                 test    r13, r13
.text:0000000000004EEE                 jz      loc_52F0
.text:0000000000004EF4                 xor     edx, edx
.text:0000000000004EF6                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004EFC                 jnz     loc_52F0
.text:0000000000004F02
.text:0000000000004F02 loc_4F02:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000004F02                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000004F02                 mov     [rsp+0E8h+var_98], r13
.text:0000000000004F07                 add     r15, 3
.text:0000000000004F0B                 xor     eax, eax
.text:0000000000004F0D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004F12                 xor     r8d, r8d
.text:0000000000004F15                 mov     r13, rdx
.text:0000000000004F18                 mov     ebx, 27h ; '''
.text:0000000000004F1D                 jmp     loc_4939
.text:0000000000004F1D ; ---------------------------------------------------------------------------
.text:0000000000004F22                 align 8
.text:0000000000004F28
.text:0000000000004F28 loc_4F28:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000004F28                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000004F2D                 jz      short loc_4F50
.text:0000000000004F2F                 lea     rcx, [rbp+2]
.text:0000000000004F33                 cmp     rcx, r11
.text:0000000000004F36                 jnb     short loc_4F50
.text:0000000000004F38                 mov     rax, [rsp+0E8h+s]
.text:0000000000004F3D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000004F42                 jz      loc_56D2
.text:0000000000004F48                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004F50
.text:0000000000004F50 loc_4F50:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000004F50                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000004F50                 xor     edx, edx
.text:0000000000004F52                 xor     r12d, r12d
.text:0000000000004F55                 xor     eax, eax
.text:0000000000004F57                 mov     ebx, 3Fh ; '?'
.text:0000000000004F5C                 jmp     loc_4908
.text:0000000000004F5C ; ---------------------------------------------------------------------------
.text:0000000000004F61                 align 8
.text:0000000000004F68
.text:0000000000004F68 loc_4F68:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000004F68                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004F6D                 jnz     loc_5790
.text:0000000000004F73                 xor     r12d, r12d
.text:0000000000004F76                 xor     eax, eax
.text:0000000000004F78                 mov     ebx, 3Fh ; '?'
.text:0000000000004F7D                 jmp     loc_4939
.text:0000000000004F7D ; ---------------------------------------------------------------------------
.text:0000000000004F82                 align 8
.text:0000000000004F88
.text:0000000000004F88 loc_4F88:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000004F88                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000004F90                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F94                 mov     [rsp+0E8h+var_48], 0
.text:0000000000004FA0                 mov     [rsp+0E8h+ps], rax
.text:0000000000004FA5                 jnz     short loc_4FD4
.text:0000000000004FA7                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000004FAC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000004FB1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000004FB6                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000004FBB                 call    _strlen
.text:0000000000004FC0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000004FC6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004FCC                 mov     r11, rax
.text:0000000000004FCF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004FD4
.text:0000000000004FD4 loc_4FD4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000004FD4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000004FDC                 xor     ecx, ecx
.text:0000000000004FDE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000004FE2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000004FE7                 mov     rbx, rcx
.text:0000000000004FEA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000004FF2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000004FF7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000004FFC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000005004                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000005009                 mov     [rsp+0E8h+var_78], r13
.text:000000000000500E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000005013
.text:0000000000005013 loc_5013:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000005013                 mov     rax, [rsp+0E8h+s]
.text:0000000000005018                 lea     r14, [rbp+rbx+0]
.text:000000000000501D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000005022                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000005027                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000502C                 lea     r13, [rax+r14]
.text:0000000000005030                 sub     rdx, r14
.text:0000000000005033                 mov     rsi, r13
.text:0000000000005036                 call    rpl_mbrtowc
.text:000000000000503B                 test    rax, rax
.text:000000000000503E                 mov     r15, rax
.text:0000000000005041                 jz      short loc_5091
.text:0000000000005043                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005047                 jz      loc_5665
.text:000000000000504D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000005051                 jz      loc_55F1
.text:0000000000005057                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000505C                 setz    al
.text:000000000000505F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000005063                 jnz     loc_5200
.text:0000000000005069
.text:0000000000005069 loc_5069:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000005069                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000005069                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000005070                 call    _iswprint
.text:0000000000005075                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000507A                 test    eax, eax
.text:000000000000507C                 mov     eax, 0
.text:0000000000005081                 cmovz   r12d, eax
.text:0000000000005085                 add     rbx, r15
.text:0000000000005088                 call    _mbsinit
.text:000000000000508D                 test    eax, eax
.text:000000000000508F                 jz      short loc_5013
.text:0000000000005091
.text:0000000000005091 loc_5091:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000005091                 mov     edx, r12d
.text:0000000000005094                 mov     rdi, rbx
.text:0000000000005097                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000509D                 xor     edx, 1
.text:00000000000050A0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000050A5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000050AB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000050AF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000050B7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000050BC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000050C1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000050C6
.text:00000000000050C6 loc_50C6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000050C6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000050C6                 cmp     rdi, 1
.text:00000000000050CA                 jbe     loc_56CB
.text:00000000000050D0
.text:00000000000050D0 loc_50D0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000050D0                 mov     rcx, rdi
.text:00000000000050D3                 xor     esi, esi
.text:00000000000050D5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000050DB                 add     rcx, rbp
.text:00000000000050DE                 mov     rdi, [rsp+0E8h+s]
.text:00000000000050E3                 jmp     loc_519E
.text:00000000000050E3 ; ---------------------------------------------------------------------------
.text:00000000000050E8                 align 10h
.text:00000000000050F0
.text:00000000000050F0 loc_50F0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000050F0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000050F5                 setz    al
.text:00000000000050F8                 test    r9b, r9b
.text:00000000000050FB                 jnz     loc_55B0
.text:0000000000005101                 mov     esi, r8d
.text:0000000000005104                 xor     esi, 1
.text:0000000000005107                 and     al, sil
.text:000000000000510A                 jz      short loc_513B
.text:000000000000510C                 cmp     r13, r15
.text:000000000000510F                 jbe     short loc_5116
.text:0000000000005111                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000005116
.text:0000000000005116 loc_5116:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000005116                 lea     rsi, [r15+1]
.text:000000000000511A                 cmp     r13, rsi
.text:000000000000511D                 jbe     short loc_5125
.text:000000000000511F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000005125
.text:0000000000005125 loc_5125:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000005125                 lea     rsi, [r15+2]
.text:0000000000005129                 cmp     r13, rsi
.text:000000000000512C                 jbe     short loc_5134
.text:000000000000512E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000005134
.text:0000000000005134 loc_5134:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000005134                 add     r15, 3
.text:0000000000005138                 mov     r8d, eax
.text:000000000000513B
.text:000000000000513B loc_513B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000513B                 cmp     r13, r15
.text:000000000000513E                 jbe     short loc_5145
.text:0000000000005140                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000005145
.text:0000000000005145 loc_5145:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000005145                 lea     rax, [r15+1]
.text:0000000000005149                 cmp     r13, rax
.text:000000000000514C                 jbe     short loc_515B
.text:000000000000514E                 mov     eax, ebx
.text:0000000000005150                 shr     al, 6
.text:0000000000005153                 add     eax, 30h ; '0'
.text:0000000000005156                 mov     [r14+r15+1], al
.text:000000000000515B
.text:000000000000515B loc_515B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000515B                 lea     rax, [r15+2]
.text:000000000000515F                 cmp     r13, rax
.text:0000000000005162                 jbe     short loc_5174
.text:0000000000005164                 mov     eax, ebx
.text:0000000000005166                 shr     al, 3
.text:0000000000005169                 and     eax, 7
.text:000000000000516C                 add     eax, 30h ; '0'
.text:000000000000516F                 mov     [r14+r15+2], al
.text:0000000000005174
.text:0000000000005174 loc_5174:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000005174                 and     ebx, 7
.text:0000000000005177                 add     rbp, 1
.text:000000000000517B                 add     r15, 3
.text:000000000000517F                 add     ebx, 30h ; '0'
.text:0000000000005182                 cmp     rbp, rcx
.text:0000000000005185                 jnb     loc_4970
.text:000000000000518B                 mov     esi, edx
.text:000000000000518D
.text:000000000000518D loc_518D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000518D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000518D                 cmp     r13, r15
.text:0000000000005190                 jbe     short loc_5196
.text:0000000000005192                 mov     [r14+r15], bl
.text:0000000000005196
.text:0000000000005196 loc_5196:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000005196                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000519A                 add     r15, 1
.text:000000000000519E
.text:000000000000519E loc_519E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000519E                 test    dl, dl
.text:00000000000051A0                 jnz     loc_50F0
.text:00000000000051A6                 mov     eax, esi
.text:00000000000051A8                 xor     eax, 1
.text:00000000000051AB                 and     eax, r8d
.text:00000000000051AE                 test    r10b, r10b
.text:00000000000051B1                 jz      short loc_51C1
.text:00000000000051B3                 cmp     r13, r15
.text:00000000000051B6                 jbe     short loc_51BD
.text:00000000000051B8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000051BD
.text:00000000000051BD loc_51BD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000051BD                 add     r15, 1
.text:00000000000051C1
.text:00000000000051C1 loc_51C1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000051C1                 add     rbp, 1
.text:00000000000051C5                 cmp     rbp, rcx
.text:00000000000051C8                 jnb     loc_494C
.text:00000000000051CE                 test    al, al
.text:00000000000051D0                 jz      loc_55CE
.text:00000000000051D6                 cmp     r13, r15
.text:00000000000051D9                 jbe     short loc_51E0
.text:00000000000051DB                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000051E0
.text:00000000000051E0 loc_51E0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000051E0                 lea     rax, [r15+1]
.text:00000000000051E4                 cmp     r13, rax
.text:00000000000051E7                 jbe     short loc_51EF
.text:00000000000051E9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000051EF
.text:00000000000051EF loc_51EF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000051EF                 add     r15, 2
.text:00000000000051F3                 xor     r10d, r10d
.text:00000000000051F6                 xor     r8d, r8d
.text:00000000000051F9                 jmp     short loc_518D
.text:00000000000051F9 ; ---------------------------------------------------------------------------
.text:00000000000051FB                 align 20h
.text:0000000000005200
.text:0000000000005200 loc_5200:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000005200                 cmp     r15, 1
.text:0000000000005204                 jz      loc_5069
.text:000000000000520A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000520F                 lea     rcx, [rdi+r15]
.text:0000000000005213                 lea     rdx, [rdi+r14+1]
.text:0000000000005218                 lea     r8, [rcx+r14]
.text:000000000000521C                 jmp     short loc_522D
.text:000000000000521C ; ---------------------------------------------------------------------------
.text:000000000000521E                 align 20h
.text:0000000000005220
.text:0000000000005220 loc_5220:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000005220                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000005220                 add     rdx, 1
.text:0000000000005224                 cmp     r8, rdx
.text:0000000000005227                 jz      loc_5069
.text:000000000000522D
.text:000000000000522D loc_522D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000522D                 movzx   ecx, byte ptr [rdx]
.text:0000000000005230                 sub     ecx, 5Bh ; '['
.text:0000000000005233                 cmp     cl, 21h ; '!'
.text:0000000000005236                 ja      short loc_5220
.text:0000000000005238                 mov     esi, 1
.text:000000000000523D                 shl     rsi, cl
.text:0000000000005240                 mov     rcx, rsi
.text:0000000000005243                 mov     rsi, 20000002Bh
.text:000000000000524D                 test    rcx, rsi
.text:0000000000005250                 jz      short loc_5220
.text:0000000000005252                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000005257                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000525C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000005261                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005269
.text:0000000000005269 loc_5269:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000005269                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000005269                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000526E                 jz      short loc_5280
.text:0000000000005270                 test    al, al
.text:0000000000005272                 mov     eax, 4
.text:0000000000005277                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000527C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000005280
.text:0000000000005280 loc_5280:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000005280                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000005280                 sub     rsp, 8
.text:0000000000005284                 mov     rcx, rbp
.text:0000000000005287                 mov     rsi, r13
.text:000000000000528A                 push    [rsp+0F0h+var_88]
.text:000000000000528E                 push    [rsp+0F8h+var_80]
.text:0000000000005292                 mov     rdi, r14
.text:0000000000005295                 push    0
.text:0000000000005297                 mov     r9d, [rsp+108h+var_70]
.text:000000000000529F                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000052A4                 mov     rdx, [rsp+108h+s]
.text:00000000000052A9                 and     r9d, 0FFFFFFFDh
.text:00000000000052AD                 call    quotearg_buffer_restyled
.text:00000000000052B2                 add     rsp, 20h
.text:00000000000052B6                 mov     r15, rax
.text:00000000000052B9
.text:00000000000052B9 loc_52B9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000052B9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000052B9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000052C1                 xor     rbx, fs:28h
.text:00000000000052CA                 mov     rax, r15
.text:00000000000052CD                 jnz     loc_58D3
.text:00000000000052D3                 add     rsp, 0B8h
.text:00000000000052DA                 pop     rbx
.text:00000000000052DB                 pop     rbp
.text:00000000000052DC                 pop     r12
.text:00000000000052DE                 pop     r13
.text:00000000000052E0                 pop     r14
.text:00000000000052E2                 pop     r15
.text:00000000000052E4                 retn
.text:00000000000052E4 ; ---------------------------------------------------------------------------
.text:00000000000052E5                 align 8
.text:00000000000052E8
.text:00000000000052E8 loc_52E8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000052E8                 mov     rbp, r11
.text:00000000000052EB                 jmp     loc_5269
.text:00000000000052F0 ; ---------------------------------------------------------------------------
.text:00000000000052F0
.text:00000000000052F0 loc_52F0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:00000000000052F0                                         ; quotearg_buffer_restyled+81C↑j
.text:00000000000052F0                 cmp     r13, r15
.text:00000000000052F3                 jbe     short loc_52FA
.text:00000000000052F5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000052FA
.text:00000000000052FA loc_52FA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:00000000000052FA                 lea     rax, [r15+1]
.text:00000000000052FE                 cmp     r13, rax
.text:0000000000005301                 jbe     short loc_5309
.text:0000000000005303                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000005309
.text:0000000000005309 loc_5309:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000005309                 lea     rax, [r15+2]
.text:000000000000530D                 cmp     r13, rax
.text:0000000000005310                 jbe     loc_5902
.text:0000000000005316                 mov     rdx, r13
.text:0000000000005319                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000531F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000005324                 jmp     loc_4F02
.text:0000000000005329 ; ---------------------------------------------------------------------------
.text:0000000000005329
.text:0000000000005329 loc_5329:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000005329                 mov     eax, r12d
.text:000000000000532C                 mov     ebx, 30h ; '0'
.text:0000000000005331                 xor     r12d, r12d
.text:0000000000005334                 jmp     loc_4939
.text:0000000000005339 ; ---------------------------------------------------------------------------
.text:0000000000005339
.text:0000000000005339 loc_5339:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000005339                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000533F                 jmp     loc_4D09
.text:0000000000005344 ; ---------------------------------------------------------------------------
.text:0000000000005344
.text:0000000000005344 loc_5344:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005344                                         ; DATA XREF: .rodata:jpt_4771↓o
.text:0000000000005344                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000005346                 jnz     loc_4773        ; jumptable 00000000000121F1 case 1
.text:000000000000534C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005351
.text:0000000000005351 loc_5351:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000005351                 test    r13, r13
.text:0000000000005354                 jnz     loc_58EA
.text:000000000000535A                 lea     rax, asc_16BBD  ; "'"
.text:0000000000005361                 mov     [rsp+0E8h+var_98], 0
.text:000000000000536A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000536F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005374                 xor     r12d, r12d
.text:0000000000005377                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000537C                 mov     [rsp+0E8h+n], 1
.text:0000000000005385                 mov     [rsp+0E8h+s2], rax
.text:000000000000538A                 mov     r15d, 1
.text:0000000000005390                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005398                 jmp     loc_47B3
.text:0000000000005398 ; ---------------------------------------------------------------------------
.text:000000000000539D                 align 20h
.text:00000000000053A0
.text:00000000000053A0 loc_53A0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000053A0                                         ; DATA XREF: .rodata:jpt_4771↓o
.text:00000000000053A0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000053A2                 jnz     loc_579D
.text:00000000000053A8                 test    r13, r13
.text:00000000000053AB                 jz      loc_55D6
.text:00000000000053B1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000053B5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000053BA                 xor     r12d, r12d
.text:00000000000053BD                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000053C2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000053CB
.text:00000000000053CB loc_53CB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000053CB                 lea     rax, unk_16BBB
.text:00000000000053D2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000053D7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000053DC                 mov     [rsp+0E8h+n], 1
.text:00000000000053E5                 mov     r15d, 1
.text:00000000000053EB                 mov     [rsp+0E8h+s2], rax
.text:00000000000053F0                 jmp     loc_47B3
.text:00000000000053F5 ; ---------------------------------------------------------------------------
.text:00000000000053F5
.text:00000000000053F5 loc_53F5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000053F5                                         ; DATA XREF: .rodata:jpt_4771↓o
.text:00000000000053F5                 lea     rax, unk_16BBB  ; jumptable 00000000000121F1 case 6
.text:00000000000053FC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005401                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005406                 xor     r12d, r12d
.text:0000000000005409                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005412                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005417                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000541C                 mov     [rsp+0E8h+n], 1
.text:0000000000005425                 xor     r15d, r15d
.text:0000000000005428                 mov     [rsp+0E8h+s2], rax
.text:000000000000542D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000005435                 jmp     loc_47B3
.text:000000000000543A ; ---------------------------------------------------------------------------
.text:000000000000543A
.text:000000000000543A loc_543A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000543A                                         ; DATA XREF: .rodata:jpt_4771↓o
.text:000000000000543A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000543F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005444                 xor     r12d, r12d
.text:0000000000005447                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005450                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005455                 xor     r15d, r15d
.text:0000000000005458                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000545D                 mov     [rsp+0E8h+n], 0
.text:0000000000005466                 mov     [rsp+0E8h+s2], 0
.text:000000000000546F                 jmp     loc_47B3
.text:0000000000005474 ; ---------------------------------------------------------------------------
.text:0000000000005474
.text:0000000000005474 loc_5474:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005474                                         ; DATA XREF: .rodata:jpt_4771↓o
.text:0000000000005474                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000005479                 jz      short loc_54D1
.text:000000000000547B                 lea     rsi, asc_16BBF  ; "`"
.text:0000000000005482                 xor     edi, edi        ; domainname
.text:0000000000005484                 mov     edx, 5          ; category
.text:0000000000005489                 call    _dcgettext
.text:000000000000548E                 mov     rcx, rax
.text:0000000000005491                 mov     [rsp+0E8h+var_80], rax
.text:0000000000005496                 lea     rax, asc_16BBF  ; "`"
.text:000000000000549D                 cmp     rcx, rax
.text:00000000000054A0                 jz      loc_583E
.text:00000000000054A6
.text:00000000000054A6 loc_54A6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000054A6                 lea     rsi, asc_16BBD  ; "'"
.text:00000000000054AD                 xor     edi, edi        ; domainname
.text:00000000000054AF                 mov     edx, 5          ; category
.text:00000000000054B4                 call    _dcgettext
.text:00000000000054B9                 mov     rcx, rax
.text:00000000000054BC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000054C1                 lea     rax, asc_16BBD  ; "'"
.text:00000000000054C8                 cmp     rcx, rax
.text:00000000000054CB                 jz      loc_5854
.text:00000000000054D1
.text:00000000000054D1 loc_54D1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000054D1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000054D1                 xor     r15d, r15d
.text:00000000000054D4                 test    ebx, ebx
.text:00000000000054D6                 jz      loc_569D
.text:00000000000054DC
.text:00000000000054DC loc_54DC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000054DC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000054DC                 test    ebx, ebx
.text:00000000000054DE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000054E3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000054E8                 xor     r12d, r12d
.text:00000000000054EB                 mov     rdi, rbx        ; s
.text:00000000000054EE                 call    _strlen
.text:00000000000054F3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000054F8                 mov     [rsp+0E8h+n], rax
.text:00000000000054FD                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005502                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005507                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005510                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005515                 jmp     loc_47B3
.text:000000000000551A ; ---------------------------------------------------------------------------
.text:000000000000551A
.text:000000000000551A loc_551A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000551A                                         ; DATA XREF: .rodata:jpt_4771↓o
.text:000000000000551A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000551F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005524                 xor     r12d, r12d
.text:0000000000005527                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005530                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005535                 xor     r15d, r15d
.text:0000000000005538                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000553D                 mov     [rsp+0E8h+n], 0
.text:0000000000005546                 mov     [rsp+0E8h+s2], 0
.text:000000000000554F                 jmp     loc_47B3
.text:0000000000005554 ; ---------------------------------------------------------------------------
.text:0000000000005554
.text:0000000000005554 loc_5554:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005554                                         ; DATA XREF: .rodata:jpt_4771↓o
.text:0000000000005554                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000005559                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000555E                 xor     r12d, r12d
.text:0000000000005561                 mov     [rsp+0E8h+var_98], 0
.text:000000000000556A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000556F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005574                 jmp     loc_4793
.text:0000000000005579 ; ---------------------------------------------------------------------------
.text:0000000000005579
.text:0000000000005579 loc_5579:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000005579                 cmp     r13, r15
.text:000000000000557C                 jbe     short loc_5583
.text:000000000000557E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000005583
.text:0000000000005583 loc_5583:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000005583                 lea     rax, [rcx+2]
.text:0000000000005587                 cmp     r13, rax
.text:000000000000558A                 jbe     short loc_5592
.text:000000000000558C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000005592
.text:0000000000005592 loc_5592:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000005592                 mov     eax, r12d
.text:0000000000005595                 lea     r15, [rcx+3]
.text:0000000000005599                 xor     r12d, r12d
.text:000000000000559C                 mov     ebx, 30h ; '0'
.text:00000000000055A1                 jmp     loc_4908
.text:00000000000055A1 ; ---------------------------------------------------------------------------
.text:00000000000055A6                 align 10h
.text:00000000000055B0
.text:00000000000055B0 loc_55B0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000055B0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000055B5                 mov     rbp, r11
.text:00000000000055B8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000055BC                 jmp     loc_5269
.text:00000000000055C1 ; ---------------------------------------------------------------------------
.text:00000000000055C1
.text:00000000000055C1 loc_55C1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000055C1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000055C6                 xor     r12d, r12d
.text:00000000000055C9                 jmp     loc_50D0
.text:00000000000055CE ; ---------------------------------------------------------------------------
.text:00000000000055CE
.text:00000000000055CE loc_55CE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000055CE                 xor     r10d, r10d
.text:00000000000055D1                 jmp     loc_518D
.text:00000000000055D6 ; ---------------------------------------------------------------------------
.text:00000000000055D6
.text:00000000000055D6 loc_55D6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000055D6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000055DF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000055E4                 xor     r12d, r12d
.text:00000000000055E7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000055EC                 jmp     loc_53CB
.text:00000000000055F1 ; ---------------------------------------------------------------------------
.text:00000000000055F1
.text:00000000000055F1 loc_55F1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000055F1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000055F6                 mov     rsi, r14
.text:00000000000055F9                 mov     rcx, r13
.text:00000000000055FC                 mov     rax, rbx
.text:00000000000055FF                 mov     rdi, rbx
.text:0000000000005602                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000005608                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000560D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000005615                 cmp     rsi, r11
.text:0000000000005618                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000561E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005626                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000562B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000005630                 jnb     short loc_5658
.text:0000000000005632                 cmp     byte ptr [rcx], 0
.text:0000000000005635                 jnz     short loc_5647
.text:0000000000005637                 jmp     short loc_5658
.text:0000000000005637 ; ---------------------------------------------------------------------------
.text:0000000000005639                 align 20h
.text:0000000000005640
.text:0000000000005640 loc_5640:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000005640                 cmp     byte ptr [r9+rax], 0
.text:0000000000005645                 jz      short loc_5655
.text:0000000000005647
.text:0000000000005647 loc_5647:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000005647                 add     rax, 1
.text:000000000000564B                 lea     rdx, [rbp+rax+0]
.text:0000000000005650                 cmp     r11, rdx
.text:0000000000005653                 ja      short loc_5640
.text:0000000000005655
.text:0000000000005655 loc_5655:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000005655                 mov     rdi, rax
.text:0000000000005658
.text:0000000000005658 loc_5658:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000005658                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000005658                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000565D                 xor     r12d, r12d
.text:0000000000005660                 jmp     loc_50C6
.text:0000000000005665 ; ---------------------------------------------------------------------------
.text:0000000000005665
.text:0000000000005665 loc_5665:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000005665                 mov     rdi, rbx
.text:0000000000005668                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000566E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000005673                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000005679                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005681                 xor     r12d, r12d
.text:0000000000005684                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000005689                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000568E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000005693                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000005698                 jmp     loc_50C6
.text:000000000000569D ; ---------------------------------------------------------------------------
.text:000000000000569D
.text:000000000000569D loc_569D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000569D                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000056A2                 movzx   eax, byte ptr [rdx]
.text:00000000000056A5                 test    al, al
.text:00000000000056A7                 jz      loc_54DC
.text:00000000000056AD                 nop     dword ptr [rax]
.text:00000000000056B0
.text:00000000000056B0 loc_56B0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000056B0                 cmp     r13, r15
.text:00000000000056B3                 jbe     short loc_56B9
.text:00000000000056B5                 mov     [r14+r15], al
.text:00000000000056B9
.text:00000000000056B9 loc_56B9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000056B9                 add     r15, 1
.text:00000000000056BD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000056C2                 test    al, al
.text:00000000000056C4                 jnz     short loc_56B0
.text:00000000000056C6                 jmp     loc_54DC
.text:00000000000056CB ; ---------------------------------------------------------------------------
.text:00000000000056CB
.text:00000000000056CB loc_56CB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000056CB                 mov     eax, edx
.text:00000000000056CD                 jmp     loc_4C27
.text:00000000000056D2 ; ---------------------------------------------------------------------------
.text:00000000000056D2
.text:00000000000056D2 loc_56D2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000056D2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000056D6                 cmp     bl, 3Eh ; '>'
.text:00000000000056D9                 ja      loc_4F50
.text:00000000000056DF                 mov     rax, 7000A38200000000h
.text:00000000000056E9                 bt      rax, rbx
.text:00000000000056ED                 jnb     loc_4F50
.text:00000000000056F3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000056F8                 jnz     loc_58E2
.text:00000000000056FE                 cmp     r13, r15
.text:0000000000005701                 jbe     short loc_5708
.text:0000000000005703                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000005708
.text:0000000000005708 loc_5708:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000005708                 lea     rax, [r15+1]
.text:000000000000570C                 cmp     r13, rax
.text:000000000000570F                 jbe     short loc_5717
.text:0000000000005711                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000005717
.text:0000000000005717 loc_5717:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000005717                 lea     rax, [r15+2]
.text:000000000000571B                 cmp     r13, rax
.text:000000000000571E                 jbe     short loc_5726
.text:0000000000005720                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000005726
.text:0000000000005726 loc_5726:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000005726                 lea     rax, [r15+3]
.text:000000000000572A                 cmp     r13, rax
.text:000000000000572D                 jbe     short loc_5735
.text:000000000000572F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000005735
.text:0000000000005735 loc_5735:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000005735                 add     r15, 4
.text:0000000000005739                 xor     edx, edx
.text:000000000000573B                 xor     r12d, r12d
.text:000000000000573E                 xor     eax, eax
.text:0000000000005740                 mov     rbp, rcx
.text:0000000000005743                 jmp     loc_4908
.text:0000000000005748 ; ---------------------------------------------------------------------------
.text:0000000000005748
.text:0000000000005748 loc_5748:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005748                                         ; DATA XREF: .rodata:jpt_4771↓o
.text:0000000000005748                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000574A                 jz      loc_58D8
.text:0000000000005750                 lea     rax, asc_16BBD  ; "'"
.text:0000000000005757                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000575C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005761                 xor     r12d, r12d
.text:0000000000005764                 mov     [rsp+0E8h+var_98], 0
.text:000000000000576D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005772                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000005777                 mov     [rsp+0E8h+n], 1
.text:0000000000005780                 xor     r15d, r15d
.text:0000000000005783                 mov     [rsp+0E8h+s2], rax
.text:0000000000005788                 jmp     loc_47B3
.text:0000000000005788 ; ---------------------------------------------------------------------------
.text:000000000000578D                 align 10h
.text:0000000000005790
.text:0000000000005790 loc_5790:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000005790                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000005790                 mov     rbp, r11
.text:0000000000005793                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000005798                 jmp     loc_5269
.text:000000000000579D ; ---------------------------------------------------------------------------
.text:000000000000579D
.text:000000000000579D loc_579D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000579D                 lea     rax, unk_16BBB
.text:00000000000057A4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000057A9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000057AE                 xor     r12d, r12d
.text:00000000000057B1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000057BA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000057BF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000057C4                 mov     [rsp+0E8h+n], 1
.text:00000000000057CD                 xor     r15d, r15d
.text:00000000000057D0                 mov     [rsp+0E8h+s2], rax
.text:00000000000057D5                 jmp     loc_47B3
.text:00000000000057DA ; ---------------------------------------------------------------------------
.text:00000000000057DA
.text:00000000000057DA loc_57DA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000057DA                 mov     eax, edx
.text:00000000000057DC
.text:00000000000057DC loc_57DC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000057DC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000057DC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000057E1                 test    rbx, rbx
.text:00000000000057E4                 jz      short loc_5812
.text:00000000000057E6                 test    al, al
.text:00000000000057E8                 jz      short loc_5812
.text:00000000000057EA                 movzx   ecx, byte ptr [rbx]
.text:00000000000057ED                 mov     rax, rbx
.text:00000000000057F0                 test    cl, cl
.text:00000000000057F2                 jz      short loc_5812
.text:00000000000057F4                 mov     rdx, r15
.text:00000000000057F7                 sub     rax, r15
.text:00000000000057FA
.text:00000000000057FA loc_57FA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000057FA                 cmp     r13, rdx
.text:00000000000057FD                 jbe     short loc_5803
.text:00000000000057FF                 mov     [r14+rdx], cl
.text:0000000000005803
.text:0000000000005803 loc_5803:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000005803                 add     rdx, 1
.text:0000000000005807                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000580B                 test    cl, cl
.text:000000000000580D                 jnz     short loc_57FA
.text:000000000000580F                 mov     r15, rdx
.text:0000000000005812
.text:0000000000005812 loc_5812:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000005812                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000005812                 cmp     r13, r15
.text:0000000000005815                 jbe     loc_52B9
.text:000000000000581B                 mov     byte ptr [r14+r15], 0
.text:0000000000005820                 jmp     loc_52B9
.text:0000000000005825 ; ---------------------------------------------------------------------------
.text:0000000000005825
.text:0000000000005825 loc_5825:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000005825                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000582A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000582F                 mov     rbp, r11
.text:0000000000005832                 setz    al
.text:0000000000005835                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005839                 jmp     loc_5269
.text:000000000000583E ; ---------------------------------------------------------------------------
.text:000000000000583E
.text:000000000000583E loc_583E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000583E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005842                 mov     rdi, rcx
.text:0000000000005845                 call    gettext_quote
.text:000000000000584A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000584F                 jmp     loc_54A6
.text:0000000000005854 ; ---------------------------------------------------------------------------
.text:0000000000005854
.text:0000000000005854 loc_5854:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000005854                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005858                 mov     rdi, rcx
.text:000000000000585B                 call    gettext_quote
.text:0000000000005860                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005865                 jmp     loc_54D1
.text:000000000000586A ; ---------------------------------------------------------------------------
.text:000000000000586A
.text:000000000000586A loc_586A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000586A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000586F                 mov     rbp, r11
.text:0000000000005872                 mov     eax, edx
.text:0000000000005874                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005878                 jmp     loc_5269
.text:000000000000587D ; ---------------------------------------------------------------------------
.text:000000000000587D
.text:000000000000587D loc_587D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000587D                 sub     rsp, 8
.text:0000000000005881                 mov     r8d, 5
.text:0000000000005887                 mov     rcx, r11
.text:000000000000588A                 push    [rsp+0F0h+var_88]
.text:000000000000588E                 push    [rsp+0F8h+var_80]
.text:0000000000005892                 mov     rdi, r14
.text:0000000000005895                 push    [rsp+100h+var_C8]
.text:0000000000005899                 mov     r9d, [rsp+108h+var_70]
.text:00000000000058A1                 mov     rdx, [rsp+108h+s]
.text:00000000000058A6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000058AB                 call    quotearg_buffer_restyled
.text:00000000000058B0                 add     rsp, 20h
.text:00000000000058B4                 mov     r15, rax
.text:00000000000058B7                 jmp     loc_52B9
.text:00000000000058BC ; ---------------------------------------------------------------------------
.text:00000000000058BC
.text:00000000000058BC loc_58BC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000058BC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000058C1                 jmp     loc_57DC
.text:00000000000058C6 ; ---------------------------------------------------------------------------
.text:00000000000058C6
.text:00000000000058C6 loc_58C6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000058C6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000058CE                 jmp     loc_5269
.text:00000000000058D3 ; ---------------------------------------------------------------------------
.text:00000000000058D3
.text:00000000000058D3 loc_58D3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000058D3                 call    ___stack_chk_fail
.text:00000000000058D8 ; ---------------------------------------------------------------------------
.text:00000000000058D8
.text:00000000000058D8 loc_58D8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000058D8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000058DD                 jmp     loc_5351
.text:00000000000058E2 ; ---------------------------------------------------------------------------
.text:00000000000058E2
.text:00000000000058E2 loc_58E2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000058E2                 mov     rbp, r11
.text:00000000000058E5                 jmp     loc_5280
.text:00000000000058EA ; ---------------------------------------------------------------------------
.text:00000000000058EA
.text:00000000000058EA loc_58EA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000058EA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000058EF                 xor     eax, eax
.text:00000000000058F1                 xor     r12d, r12d
.text:00000000000058F4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000058FD                 jmp     loc_4EA4
.text:0000000000005902 ; ---------------------------------------------------------------------------
.text:0000000000005902
.text:0000000000005902 loc_5902:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000005902                 mov     rdx, r13
.text:0000000000005905                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000590A                 jmp     loc_4F02
.text:000000000000590F ; ---------------------------------------------------------------------------
.text:000000000000590F
.text:000000000000590F def_4771:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000590F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000590F ; } // starts at 46E0
.text:000000000000590F quotearg_buffer_restyled endp
.text:000000000000590F
.text:000000000000590F ; ---------------------------------------------------------------------------
.text:0000000000005914                 align 20h
.text:0000000000005920
.text:0000000000005920 ; =============== S U B R O U T I N E =======================================
.text:0000000000005920
.text:0000000000005920
.text:0000000000005920 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000005920                                         ; quotearg_n_mem+7↓j ...
.text:0000000000005920
.text:0000000000005920 var_50          = qword ptr -50h
.text:0000000000005920 var_48          = qword ptr -48h
.text:0000000000005920 var_40          = dword ptr -40h
.text:0000000000005920 var_3C          = dword ptr -3Ch
.text:0000000000005920
.text:0000000000005920 ; __unwind {
.text:0000000000005920                 push    r15
.text:0000000000005922                 push    r14
.text:0000000000005924                 movsxd  r15, edi
.text:0000000000005927                 push    r13
.text:0000000000005929                 push    r12
.text:000000000000592B                 mov     r14, rdx
.text:000000000000592E                 push    rbp
.text:000000000000592F                 push    rbx
.text:0000000000005930                 mov     rbp, rcx
.text:0000000000005933                 sub     rsp, 28h
.text:0000000000005937                 mov     [rsp+58h+var_50], rsi
.text:000000000000593C                 call    ___errno_location
.text:0000000000005941                 mov     r13, rax
.text:0000000000005944                 mov     eax, [rax]
.text:0000000000005946                 test    r15d, r15d
.text:0000000000005949                 mov     rbx, cs:slotvec
.text:0000000000005950                 mov     [rsp+58h+var_40], eax
.text:0000000000005954                 js      loc_5AC1
.text:000000000000595A                 cmp     cs:nslots, r15d
.text:0000000000005961                 jg      short loc_59C5
.text:0000000000005963                 cmp     r15d, 7FFFFFFFh
.text:000000000000596A                 jz      loc_5AC6
.text:0000000000005970                 lea     r12d, [r15+1]
.text:0000000000005974                 lea     rax, slotvec0
.text:000000000000597B                 movsxd  rsi, r12d
.text:000000000000597E                 shl     rsi, 4
.text:0000000000005982                 cmp     rbx, rax
.text:0000000000005985                 jz      loc_5AA0
.text:000000000000598B                 mov     rdi, rbx
.text:000000000000598E                 call    xrealloc
.text:0000000000005993                 mov     rbx, rax
.text:0000000000005996                 mov     cs:slotvec, rax
.text:000000000000599D
.text:000000000000599D loc_599D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000599D                 movsxd  rdi, cs:nslots
.text:00000000000059A4                 mov     edx, r12d
.text:00000000000059A7                 xor     esi, esi        ; c
.text:00000000000059A9                 sub     edx, edi
.text:00000000000059AB                 shl     rdi, 4
.text:00000000000059AF                 movsxd  rdx, edx
.text:00000000000059B2                 add     rdi, rbx        ; s
.text:00000000000059B5                 shl     rdx, 4          ; n
.text:00000000000059B9                 call    _memset
.text:00000000000059BE                 mov     cs:nslots, r12d
.text:00000000000059C5
.text:00000000000059C5 loc_59C5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000059C5                 mov     eax, [rbp+4]
.text:00000000000059C8                 shl     r15, 4
.text:00000000000059CC                 sub     rsp, 8
.text:00000000000059D0                 add     rbx, r15
.text:00000000000059D3                 lea     r15, [rbp+8]
.text:00000000000059D7                 mov     r8d, [rbp+0]
.text:00000000000059DB                 mov     r11, [rbx]
.text:00000000000059DE                 mov     r12, [rbx+8]
.text:00000000000059E2                 mov     rcx, r14
.text:00000000000059E5                 or      eax, 1
.text:00000000000059E8                 mov     [rsp+60h+var_3C], eax
.text:00000000000059EC                 push    qword ptr [rbp+30h]
.text:00000000000059EF                 mov     r9d, eax
.text:00000000000059F2                 push    qword ptr [rbp+28h]
.text:00000000000059F5                 push    r15
.text:00000000000059F7                 mov     rsi, r11
.text:00000000000059FA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000059FF                 mov     rdi, r12
.text:0000000000005A02                 mov     [rsp+78h+var_48], r11
.text:0000000000005A07                 call    quotearg_buffer_restyled
.text:0000000000005A0C                 add     rsp, 20h
.text:0000000000005A10                 mov     r11, [rsp+58h+var_48]
.text:0000000000005A15                 cmp     r11, rax
.text:0000000000005A18                 ja      short loc_5A81
.text:0000000000005A1A                 lea     rsi, [rax+1]
.text:0000000000005A1E                 lea     rax, slot0
.text:0000000000005A25                 cmp     r12, rax
.text:0000000000005A28                 mov     [rbx], rsi
.text:0000000000005A2B                 jz      short loc_5A3F
.text:0000000000005A2D                 mov     rdi, r12        ; ptr
.text:0000000000005A30                 mov     [rsp+58h+var_48], rsi
.text:0000000000005A35                 call    _free
.text:0000000000005A3A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000005A3F
.text:0000000000005A3F loc_5A3F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000005A3F                 mov     rdi, rsi
.text:0000000000005A42                 mov     [rsp+58h+var_48], rsi
.text:0000000000005A47                 call    xmalloc
.text:0000000000005A4C                 sub     rsp, 8
.text:0000000000005A50                 mov     [rbx+8], rax
.text:0000000000005A54                 mov     r8d, [rbp+0]
.text:0000000000005A58                 push    qword ptr [rbp+30h]
.text:0000000000005A5B                 push    qword ptr [rbp+28h]
.text:0000000000005A5E                 mov     rcx, r14
.text:0000000000005A61                 push    r15
.text:0000000000005A63                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000005A68                 mov     rdi, rax
.text:0000000000005A6B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000005A70                 mov     rsi, [rsp+78h+var_48]
.text:0000000000005A75                 mov     r12, rax
.text:0000000000005A78                 call    quotearg_buffer_restyled
.text:0000000000005A7D                 add     rsp, 20h
.text:0000000000005A81
.text:0000000000005A81 loc_5A81:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000005A81                 mov     eax, [rsp+58h+var_40]
.text:0000000000005A85                 mov     [r13+0], eax
.text:0000000000005A89                 add     rsp, 28h
.text:0000000000005A8D                 mov     rax, r12
.text:0000000000005A90                 pop     rbx
.text:0000000000005A91                 pop     rbp
.text:0000000000005A92                 pop     r12
.text:0000000000005A94                 pop     r13
.text:0000000000005A96                 pop     r14
.text:0000000000005A98                 pop     r15
.text:0000000000005A9A                 retn
.text:0000000000005A9A ; ---------------------------------------------------------------------------
.text:0000000000005A9B                 align 20h
.text:0000000000005AA0
.text:0000000000005AA0 loc_5AA0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000005AA0                 xor     edi, edi
.text:0000000000005AA2                 call    xrealloc
.text:0000000000005AA7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000005AAF                 mov     rbx, rax
.text:0000000000005AB2                 mov     cs:slotvec, rax
.text:0000000000005AB9                 movups  xmmword ptr [rax], xmm0
.text:0000000000005ABC                 jmp     loc_599D
.text:0000000000005AC1 ; ---------------------------------------------------------------------------
.text:0000000000005AC1
.text:0000000000005AC1 loc_5AC1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000005AC1                 call    _abort
.text:0000000000005AC6 ; ---------------------------------------------------------------------------
.text:0000000000005AC6
.text:0000000000005AC6 loc_5AC6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000005AC6                 call    xalloc_die
.text:0000000000005AC6 ; } // starts at 5920
.text:0000000000005AC6 quotearg_n_options endp
.text:0000000000005AC6
.text:0000000000005AC6 ; ---------------------------------------------------------------------------
.text:0000000000005ACB                 align 10h
.text:0000000000005AD0
.text:0000000000005AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AD0
.text:0000000000005AD0 ; Attributes: info_from_lumina
.text:0000000000005AD0
.text:0000000000005AD0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000005AD0                 public clone_quoting_options
.text:0000000000005AD0 clone_quoting_options proc near
.text:0000000000005AD0 ; __unwind {
.text:0000000000005AD0                 push    r12
.text:0000000000005AD2                 push    rbp
.text:0000000000005AD3                 push    rbx
.text:0000000000005AD4                 mov     rbx, rdi
.text:0000000000005AD7                 call    ___errno_location
.text:0000000000005ADC                 mov     r12d, [rax]
.text:0000000000005ADF                 mov     rbp, rax
.text:0000000000005AE2                 lea     rax, default_quoting_options
.text:0000000000005AE9                 test    rbx, rbx
.text:0000000000005AEC                 mov     esi, 38h ; '8'  ; n
.text:0000000000005AF1                 cmovz   rbx, rax
.text:0000000000005AF5                 mov     rdi, rbx        ; src
.text:0000000000005AF8                 call    xmemdup
.text:0000000000005AFD                 mov     [rbp+0], r12d
.text:0000000000005B01                 pop     rbx
.text:0000000000005B02                 pop     rbp
.text:0000000000005B03                 pop     r12
.text:0000000000005B05                 retn
.text:0000000000005B05 ; } // starts at 5AD0
.text:0000000000005B05 clone_quoting_options endp
.text:0000000000005B05
.text:0000000000005B05 ; ---------------------------------------------------------------------------
.text:0000000000005B06                 align 10h
.text:0000000000005B10
.text:0000000000005B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B10
.text:0000000000005B10
.text:0000000000005B10                 public get_quoting_style
.text:0000000000005B10 get_quoting_style proc near
.text:0000000000005B10 ; __unwind {
.text:0000000000005B10                 lea     rax, default_quoting_options
.text:0000000000005B17                 test    rdi, rdi
.text:0000000000005B1A                 cmovz   rdi, rax
.text:0000000000005B1E                 mov     eax, [rdi]
.text:0000000000005B20                 retn
.text:0000000000005B20 ; } // starts at 5B10
.text:0000000000005B20 get_quoting_style endp
.text:0000000000005B20
.text:0000000000005B20 ; ---------------------------------------------------------------------------
.text:0000000000005B21                 align 10h
.text:0000000000005B30
.text:0000000000005B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B30
.text:0000000000005B30
.text:0000000000005B30                 public set_quoting_style
.text:0000000000005B30 set_quoting_style proc near
.text:0000000000005B30 ; __unwind {
.text:0000000000005B30                 lea     rax, default_quoting_options
.text:0000000000005B37                 test    rdi, rdi
.text:0000000000005B3A                 cmovz   rdi, rax
.text:0000000000005B3E                 mov     [rdi], esi
.text:0000000000005B40                 retn
.text:0000000000005B40 ; } // starts at 5B30
.text:0000000000005B40 set_quoting_style endp
.text:0000000000005B40
.text:0000000000005B40 ; ---------------------------------------------------------------------------
.text:0000000000005B41                 align 10h
.text:0000000000005B50
.text:0000000000005B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B50
.text:0000000000005B50 ; Attributes: info_from_lumina
.text:0000000000005B50
.text:0000000000005B50 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000005B50                 public set_char_quoting
.text:0000000000005B50 set_char_quoting proc near
.text:0000000000005B50 ; __unwind {
.text:0000000000005B50                 lea     rax, default_quoting_options
.text:0000000000005B57                 test    rdi, rdi
.text:0000000000005B5A                 mov     ecx, esi
.text:0000000000005B5C                 cmovz   rdi, rax
.text:0000000000005B60                 mov     eax, esi
.text:0000000000005B62                 and     ecx, 1Fh
.text:0000000000005B65                 shr     al, 5
.text:0000000000005B68                 movzx   eax, al
.text:0000000000005B6B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000005B70                 mov     esi, [rdi]
.text:0000000000005B72                 mov     eax, esi
.text:0000000000005B74                 shr     eax, cl
.text:0000000000005B76                 xor     edx, eax
.text:0000000000005B78                 and     eax, 1
.text:0000000000005B7B                 and     edx, 1
.text:0000000000005B7E                 shl     edx, cl
.text:0000000000005B80                 xor     edx, esi
.text:0000000000005B82                 mov     [rdi], edx
.text:0000000000005B84                 retn
.text:0000000000005B84 ; } // starts at 5B50
.text:0000000000005B84 set_char_quoting endp
.text:0000000000005B84
.text:0000000000005B84 ; ---------------------------------------------------------------------------
.text:0000000000005B85                 align 10h
.text:0000000000005B90
.text:0000000000005B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B90
.text:0000000000005B90
.text:0000000000005B90                 public set_quoting_flags
.text:0000000000005B90 set_quoting_flags proc near
.text:0000000000005B90 ; __unwind {
.text:0000000000005B90                 lea     rax, default_quoting_options
.text:0000000000005B97                 test    rdi, rdi
.text:0000000000005B9A                 cmovz   rdi, rax
.text:0000000000005B9E                 mov     eax, [rdi+4]
.text:0000000000005BA1                 mov     [rdi+4], esi
.text:0000000000005BA4                 retn
.text:0000000000005BA4 ; } // starts at 5B90
.text:0000000000005BA4 set_quoting_flags endp
.text:0000000000005BA4
.text:0000000000005BA4 ; ---------------------------------------------------------------------------
.text:0000000000005BA5                 align 10h
.text:0000000000005BB0
.text:0000000000005BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BB0
.text:0000000000005BB0 ; Attributes: info_from_lumina
.text:0000000000005BB0
.text:0000000000005BB0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000005BB0                 public set_custom_quoting
.text:0000000000005BB0 set_custom_quoting proc near
.text:0000000000005BB0 ; __unwind {
.text:0000000000005BB0                 lea     rax, default_quoting_options
.text:0000000000005BB7                 test    rdi, rdi
.text:0000000000005BBA                 cmovz   rdi, rax
.text:0000000000005BBE                 test    rsi, rsi
.text:0000000000005BC1                 mov     dword ptr [rdi], 0Ah
.text:0000000000005BC7                 jz      short loc_5BD7
.text:0000000000005BC9                 test    rdx, rdx
.text:0000000000005BCC                 jz      short loc_5BD7
.text:0000000000005BCE                 mov     [rdi+28h], rsi
.text:0000000000005BD2                 mov     [rdi+30h], rdx
.text:0000000000005BD6                 retn
.text:0000000000005BD7 ; ---------------------------------------------------------------------------
.text:0000000000005BD7
.text:0000000000005BD7 loc_5BD7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000005BD7                                         ; set_custom_quoting+1C↑j
.text:0000000000005BD7                 sub     rsp, 8
.text:0000000000005BDB                 call    _abort
.text:0000000000005BDB ; } // starts at 5BB0
.text:0000000000005BDB set_custom_quoting endp
.text:0000000000005BDB
.text:0000000000005BE0
.text:0000000000005BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BE0
.text:0000000000005BE0 ; Attributes: info_from_lumina
.text:0000000000005BE0
.text:0000000000005BE0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000005BE0                 public quotearg_buffer
.text:0000000000005BE0 quotearg_buffer proc near
.text:0000000000005BE0
.text:0000000000005BE0 var_40          = qword ptr -40h
.text:0000000000005BE0
.text:0000000000005BE0 ; __unwind {
.text:0000000000005BE0                 push    r15
.text:0000000000005BE2                 push    r14
.text:0000000000005BE4                 lea     rax, default_quoting_options
.text:0000000000005BEB                 push    r13
.text:0000000000005BED                 push    r12
.text:0000000000005BEF                 mov     r13, rdi
.text:0000000000005BF2                 push    rbp
.text:0000000000005BF3                 push    rbx
.text:0000000000005BF4                 mov     rbx, r8
.text:0000000000005BF7                 mov     r14, rsi
.text:0000000000005BFA                 mov     r15, rdx
.text:0000000000005BFD                 sub     rsp, 18h
.text:0000000000005C01                 test    r8, r8
.text:0000000000005C04                 cmovz   rbx, rax
.text:0000000000005C08                 mov     [rsp+48h+var_40], rcx
.text:0000000000005C0D                 call    ___errno_location
.text:0000000000005C12                 mov     r12d, [rax]
.text:0000000000005C15                 mov     rbp, rax
.text:0000000000005C18                 lea     rax, [rbx+8]
.text:0000000000005C1C                 sub     rsp, 8
.text:0000000000005C20                 mov     r9d, [rbx+4]
.text:0000000000005C24                 push    qword ptr [rbx+30h]
.text:0000000000005C27                 mov     r8d, [rbx]
.text:0000000000005C2A                 push    qword ptr [rbx+28h]
.text:0000000000005C2D                 mov     rdx, r15
.text:0000000000005C30                 push    rax
.text:0000000000005C31                 mov     rcx, [rsp+68h+var_40]
.text:0000000000005C36                 mov     rsi, r14
.text:0000000000005C39                 mov     rdi, r13
.text:0000000000005C3C                 call    quotearg_buffer_restyled
.text:0000000000005C41                 mov     [rbp+0], r12d
.text:0000000000005C45                 add     rsp, 38h
.text:0000000000005C49                 pop     rbx
.text:0000000000005C4A                 pop     rbp
.text:0000000000005C4B                 pop     r12
.text:0000000000005C4D                 pop     r13
.text:0000000000005C4F                 pop     r14
.text:0000000000005C51                 pop     r15
.text:0000000000005C53                 retn
.text:0000000000005C53 ; } // starts at 5BE0
.text:0000000000005C53 quotearg_buffer endp
.text:0000000000005C53
.text:0000000000005C53 ; ---------------------------------------------------------------------------
.text:0000000000005C54                 align 20h
.text:0000000000005C60
.text:0000000000005C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C60
.text:0000000000005C60 ; Attributes: info_from_lumina
.text:0000000000005C60
.text:0000000000005C60 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000005C60                 public quotearg_alloc_mem
.text:0000000000005C60 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000005C60
.text:0000000000005C60 var_5C          = dword ptr -5Ch
.text:0000000000005C60 var_58          = qword ptr -58h
.text:0000000000005C60 var_50          = qword ptr -50h
.text:0000000000005C60 var_48          = qword ptr -48h
.text:0000000000005C60 var_40          = qword ptr -40h
.text:0000000000005C60
.text:0000000000005C60 ; __unwind {
.text:0000000000005C60                 push    r15
.text:0000000000005C62                 push    r14
.text:0000000000005C64                 lea     rax, default_quoting_options
.text:0000000000005C6B                 push    r13
.text:0000000000005C6D                 push    r12
.text:0000000000005C6F                 mov     r12, rdx
.text:0000000000005C72                 push    rbp
.text:0000000000005C73                 push    rbx
.text:0000000000005C74                 mov     rbx, rcx
.text:0000000000005C77                 mov     r14, rdi
.text:0000000000005C7A                 mov     r15, rsi
.text:0000000000005C7D                 sub     rsp, 38h
.text:0000000000005C81                 test    rcx, rcx
.text:0000000000005C84                 cmovz   rbx, rax
.text:0000000000005C88                 xor     ebp, ebp
.text:0000000000005C8A                 call    ___errno_location
.text:0000000000005C8F                 test    r12, r12
.text:0000000000005C92                 mov     r13, rax
.text:0000000000005C95                 mov     eax, [rax]
.text:0000000000005C97                 setz    bpl
.text:0000000000005C9B                 or      ebp, [rbx+4]
.text:0000000000005C9E                 lea     r10, [rbx+8]
.text:0000000000005CA2                 sub     rsp, 8
.text:0000000000005CA6                 mov     r8d, [rbx]
.text:0000000000005CA9                 mov     rcx, r15
.text:0000000000005CAC                 mov     [rsp+70h+var_5C], eax
.text:0000000000005CB0                 push    qword ptr [rbx+30h]
.text:0000000000005CB3                 mov     rdx, r14
.text:0000000000005CB6                 push    qword ptr [rbx+28h]
.text:0000000000005CB9                 push    r10
.text:0000000000005CBB                 xor     esi, esi
.text:0000000000005CBD                 mov     r9d, ebp
.text:0000000000005CC0                 xor     edi, edi
.text:0000000000005CC2                 mov     [rsp+88h+var_48], r10
.text:0000000000005CC7                 call    quotearg_buffer_restyled
.text:0000000000005CCC                 lea     rsi, [rax+1]
.text:0000000000005CD0                 mov     [rsp+88h+var_40], rax
.text:0000000000005CD5                 add     rsp, 20h
.text:0000000000005CD9                 mov     rdi, rsi
.text:0000000000005CDC                 mov     [rsp+68h+var_50], rsi
.text:0000000000005CE1                 call    xmalloc
.text:0000000000005CE6                 mov     [rsp+68h+var_58], rax
.text:0000000000005CEB                 sub     rsp, 8
.text:0000000000005CEF                 push    qword ptr [rbx+30h]
.text:0000000000005CF2                 push    qword ptr [rbx+28h]
.text:0000000000005CF5                 mov     r10, [rsp+80h+var_48]
.text:0000000000005CFA                 mov     r9d, ebp
.text:0000000000005CFD                 mov     r8d, [rbx]
.text:0000000000005D00                 mov     rcx, r15
.text:0000000000005D03                 mov     rdx, r14
.text:0000000000005D06                 mov     rdi, rax
.text:0000000000005D09                 push    r10
.text:0000000000005D0B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000005D10                 call    quotearg_buffer_restyled
.text:0000000000005D15                 mov     eax, [rsp+88h+var_5C]
.text:0000000000005D19                 add     rsp, 20h
.text:0000000000005D1D                 test    r12, r12
.text:0000000000005D20                 mov     [r13+0], eax
.text:0000000000005D24                 jz      short loc_5D2F
.text:0000000000005D26                 mov     r11, [rsp+68h+var_40]
.text:0000000000005D2B                 mov     [r12], r11
.text:0000000000005D2F
.text:0000000000005D2F loc_5D2F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000005D2F                 mov     rax, [rsp+68h+var_58]
.text:0000000000005D34                 add     rsp, 38h
.text:0000000000005D38                 pop     rbx
.text:0000000000005D39                 pop     rbp
.text:0000000000005D3A                 pop     r12
.text:0000000000005D3C                 pop     r13
.text:0000000000005D3E                 pop     r14
.text:0000000000005D40                 pop     r15
.text:0000000000005D42                 retn
.text:0000000000005D42 ; } // starts at 5C60
.text:0000000000005D42 quotearg_alloc_mem endp
.text:0000000000005D42
.text:0000000000005D42 ; ---------------------------------------------------------------------------
.text:0000000000005D43                 align 10h
.text:0000000000005D50
.text:0000000000005D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D50
.text:0000000000005D50
.text:0000000000005D50                 public quotearg_alloc
.text:0000000000005D50 quotearg_alloc  proc near
.text:0000000000005D50 ; __unwind {
.text:0000000000005D50                 mov     rcx, rdx
.text:0000000000005D53                 xor     edx, edx
.text:0000000000005D55                 jmp     quotearg_alloc_mem
.text:0000000000005D55 ; } // starts at 5D50
.text:0000000000005D55 quotearg_alloc  endp
.text:0000000000005D55
.text:0000000000005D55 ; ---------------------------------------------------------------------------
.text:0000000000005D5A                 align 20h
.text:0000000000005D60
.text:0000000000005D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D60
.text:0000000000005D60 ; Attributes: info_from_lumina
.text:0000000000005D60
.text:0000000000005D60 ; void __cdecl quotearg_free()
.text:0000000000005D60                 public quotearg_free
.text:0000000000005D60 quotearg_free   proc near
.text:0000000000005D60 ; __unwind {
.text:0000000000005D60                 mov     eax, cs:nslots
.text:0000000000005D66                 push    r12
.text:0000000000005D68                 mov     r12, cs:slotvec
.text:0000000000005D6F                 push    rbp
.text:0000000000005D70                 push    rbx
.text:0000000000005D71                 cmp     eax, 1
.text:0000000000005D74                 jle     short loc_5DA1
.text:0000000000005D76                 sub     eax, 2
.text:0000000000005D79                 lea     rbx, [r12+18h]
.text:0000000000005D7E                 shl     rax, 4
.text:0000000000005D82                 lea     rbp, [r12+rax+28h]
.text:0000000000005D87                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005D90
.text:0000000000005D90 loc_5D90:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000005D90                 mov     rdi, [rbx]      ; ptr
.text:0000000000005D93                 add     rbx, 10h
.text:0000000000005D97                 call    _free
.text:0000000000005D9C                 cmp     rbx, rbp
.text:0000000000005D9F                 jnz     short loc_5D90
.text:0000000000005DA1
.text:0000000000005DA1 loc_5DA1:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000005DA1                 mov     rdi, [r12+8]    ; ptr
.text:0000000000005DA6                 lea     rbx, slot0
.text:0000000000005DAD                 cmp     rdi, rbx
.text:0000000000005DB0                 jz      short loc_5DC9
.text:0000000000005DB2                 call    _free
.text:0000000000005DB7                 mov     cs:slotvec0, 100h
.text:0000000000005DC2                 mov     cs:off_21C098, rbx
.text:0000000000005DC9
.text:0000000000005DC9 loc_5DC9:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000005DC9                 lea     rbx, slotvec0
.text:0000000000005DD0                 cmp     r12, rbx
.text:0000000000005DD3                 jz      short loc_5DE4
.text:0000000000005DD5                 mov     rdi, r12        ; ptr
.text:0000000000005DD8                 call    _free
.text:0000000000005DDD                 mov     cs:slotvec, rbx
.text:0000000000005DE4
.text:0000000000005DE4 loc_5DE4:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000005DE4                 pop     rbx
.text:0000000000005DE5                 mov     cs:nslots, 1
.text:0000000000005DEF                 pop     rbp
.text:0000000000005DF0                 pop     r12
.text:0000000000005DF2                 retn
.text:0000000000005DF2 ; } // starts at 5D60
.text:0000000000005DF2 quotearg_free   endp
.text:0000000000005DF2
.text:0000000000005DF2 ; ---------------------------------------------------------------------------
.text:0000000000005DF3                 align 20h
.text:0000000000005E00
.text:0000000000005E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E00
.text:0000000000005E00
.text:0000000000005E00                 public quotearg_n
.text:0000000000005E00 quotearg_n      proc near
.text:0000000000005E00 ; __unwind {
.text:0000000000005E00                 lea     rcx, default_quoting_options
.text:0000000000005E07                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005E0E                 jmp     quotearg_n_options
.text:0000000000005E0E ; } // starts at 5E00
.text:0000000000005E0E quotearg_n      endp
.text:0000000000005E0E
.text:0000000000005E0E ; ---------------------------------------------------------------------------
.text:0000000000005E13                 align 20h
.text:0000000000005E20
.text:0000000000005E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E20
.text:0000000000005E20
.text:0000000000005E20                 public quotearg_n_mem
.text:0000000000005E20 quotearg_n_mem  proc near
.text:0000000000005E20 ; __unwind {
.text:0000000000005E20                 lea     rcx, default_quoting_options
.text:0000000000005E27                 jmp     quotearg_n_options
.text:0000000000005E27 ; } // starts at 5E20
.text:0000000000005E27 quotearg_n_mem  endp
.text:0000000000005E27
.text:0000000000005E27 ; ---------------------------------------------------------------------------
.text:0000000000005E2C                 align 10h
.text:0000000000005E30
.text:0000000000005E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E30
.text:0000000000005E30
.text:0000000000005E30                 public quotearg
.text:0000000000005E30 quotearg        proc near
.text:0000000000005E30 ; __unwind {
.text:0000000000005E30                 lea     rcx, default_quoting_options
.text:0000000000005E37                 mov     rsi, rdi
.text:0000000000005E3A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005E41                 xor     edi, edi
.text:0000000000005E43                 jmp     quotearg_n_options
.text:0000000000005E43 ; } // starts at 5E30
.text:0000000000005E43 quotearg        endp
.text:0000000000005E43
.text:0000000000005E43 ; ---------------------------------------------------------------------------
.text:0000000000005E48                 align 10h
.text:0000000000005E50
.text:0000000000005E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E50
.text:0000000000005E50
.text:0000000000005E50                 public quotearg_mem
.text:0000000000005E50 quotearg_mem    proc near
.text:0000000000005E50 ; __unwind {
.text:0000000000005E50                 lea     rcx, default_quoting_options
.text:0000000000005E57                 mov     rdx, rsi
.text:0000000000005E5A                 mov     rsi, rdi
.text:0000000000005E5D                 xor     edi, edi
.text:0000000000005E5F                 jmp     quotearg_n_options
.text:0000000000005E5F ; } // starts at 5E50
.text:0000000000005E5F quotearg_mem    endp
.text:0000000000005E5F
.text:0000000000005E5F ; ---------------------------------------------------------------------------
.text:0000000000005E64                 align 10h
.text:0000000000005E70
.text:0000000000005E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E70
.text:0000000000005E70 ; Attributes: info_from_lumina
.text:0000000000005E70
.text:0000000000005E70 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000005E70                 public quotearg_n_style
.text:0000000000005E70 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000005E70
.text:0000000000005E70 var_48          = dword ptr -48h
.text:0000000000005E70 var_44          = qword ptr -44h
.text:0000000000005E70 var_3C          = qword ptr -3Ch
.text:0000000000005E70 var_34          = qword ptr -34h
.text:0000000000005E70 var_2C          = qword ptr -2Ch
.text:0000000000005E70 var_24          = qword ptr -24h
.text:0000000000005E70 var_1C          = qword ptr -1Ch
.text:0000000000005E70 var_14          = dword ptr -14h
.text:0000000000005E70 var_10          = qword ptr -10h
.text:0000000000005E70
.text:0000000000005E70 ; __unwind {
.text:0000000000005E70                 sub     rsp, 48h
.text:0000000000005E74                 mov     rax, rdx
.text:0000000000005E77                 mov     rdx, fs:28h
.text:0000000000005E80                 mov     [rsp+48h+var_10], rdx
.text:0000000000005E85                 xor     edx, edx
.text:0000000000005E87                 cmp     esi, 0Ah
.text:0000000000005E8A                 jz      short loc_5EF4
.text:0000000000005E8C                 mov     [rsp+48h+var_48], esi
.text:0000000000005E8F                 mov     rcx, rsp
.text:0000000000005E92                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005E99                 mov     rsi, rax
.text:0000000000005E9C                 mov     [rsp+48h+var_44], 0
.text:0000000000005EA5                 mov     [rsp+48h+var_3C], 0
.text:0000000000005EAE                 mov     [rsp+48h+var_34], 0
.text:0000000000005EB7                 mov     [rsp+48h+var_2C], 0
.text:0000000000005EC0                 mov     [rsp+48h+var_24], 0
.text:0000000000005EC9                 mov     [rsp+48h+var_1C], 0
.text:0000000000005ED2                 mov     [rsp+48h+var_14], 0
.text:0000000000005EDA                 call    quotearg_n_options
.text:0000000000005EDF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005EE4                 xor     rcx, fs:28h
.text:0000000000005EED                 jnz     short loc_5EF9
.text:0000000000005EEF                 add     rsp, 48h
.text:0000000000005EF3                 retn
.text:0000000000005EF4 ; ---------------------------------------------------------------------------
.text:0000000000005EF4
.text:0000000000005EF4 loc_5EF4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000005EF4                 call    _abort
.text:0000000000005EF9 ; ---------------------------------------------------------------------------
.text:0000000000005EF9
.text:0000000000005EF9 loc_5EF9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000005EF9                 call    ___stack_chk_fail
.text:0000000000005EF9 ; } // starts at 5E70
.text:0000000000005EF9 quotearg_n_style endp
.text:0000000000005EF9
.text:0000000000005EF9 ; ---------------------------------------------------------------------------
.text:0000000000005EFE                 align 20h
.text:0000000000005F00
.text:0000000000005F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F00
.text:0000000000005F00 ; Attributes: info_from_lumina
.text:0000000000005F00
.text:0000000000005F00 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000005F00                 public quotearg_n_style_mem
.text:0000000000005F00 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000005F00
.text:0000000000005F00 var_48          = dword ptr -48h
.text:0000000000005F00 var_44          = qword ptr -44h
.text:0000000000005F00 var_3C          = qword ptr -3Ch
.text:0000000000005F00 var_34          = qword ptr -34h
.text:0000000000005F00 var_2C          = qword ptr -2Ch
.text:0000000000005F00 var_24          = qword ptr -24h
.text:0000000000005F00 var_1C          = qword ptr -1Ch
.text:0000000000005F00 var_14          = dword ptr -14h
.text:0000000000005F00 var_10          = qword ptr -10h
.text:0000000000005F00
.text:0000000000005F00 ; __unwind {
.text:0000000000005F00                 sub     rsp, 48h
.text:0000000000005F04                 mov     rax, rdx
.text:0000000000005F07                 mov     rdx, rcx
.text:0000000000005F0A                 mov     rcx, fs:28h
.text:0000000000005F13                 mov     [rsp+48h+var_10], rcx
.text:0000000000005F18                 xor     ecx, ecx
.text:0000000000005F1A                 cmp     esi, 0Ah
.text:0000000000005F1D                 jz      short loc_5F80
.text:0000000000005F1F                 mov     [rsp+48h+var_48], esi
.text:0000000000005F22                 mov     rcx, rsp
.text:0000000000005F25                 mov     rsi, rax
.text:0000000000005F28                 mov     [rsp+48h+var_44], 0
.text:0000000000005F31                 mov     [rsp+48h+var_3C], 0
.text:0000000000005F3A                 mov     [rsp+48h+var_34], 0
.text:0000000000005F43                 mov     [rsp+48h+var_2C], 0
.text:0000000000005F4C                 mov     [rsp+48h+var_24], 0
.text:0000000000005F55                 mov     [rsp+48h+var_1C], 0
.text:0000000000005F5E                 mov     [rsp+48h+var_14], 0
.text:0000000000005F66                 call    quotearg_n_options
.text:0000000000005F6B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000005F70                 xor     rdx, fs:28h
.text:0000000000005F79                 jnz     short loc_5F85
.text:0000000000005F7B                 add     rsp, 48h
.text:0000000000005F7F                 retn
.text:0000000000005F80 ; ---------------------------------------------------------------------------
.text:0000000000005F80
.text:0000000000005F80 loc_5F80:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000005F80                 call    _abort
.text:0000000000005F85 ; ---------------------------------------------------------------------------
.text:0000000000005F85
.text:0000000000005F85 loc_5F85:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000005F85                 call    ___stack_chk_fail
.text:0000000000005F85 ; } // starts at 5F00
.text:0000000000005F85 quotearg_n_style_mem endp
.text:0000000000005F85
.text:0000000000005F85 ; ---------------------------------------------------------------------------
.text:0000000000005F8A                 align 10h
.text:0000000000005F90
.text:0000000000005F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F90
.text:0000000000005F90
.text:0000000000005F90                 public quotearg_style
.text:0000000000005F90 quotearg_style  proc near               ; CODE XREF: main+AAD↑p
.text:0000000000005F90                                         ; close_output_file+192↑p ...
.text:0000000000005F90 ; __unwind {
.text:0000000000005F90                 mov     rdx, rsi
.text:0000000000005F93                 mov     esi, edi
.text:0000000000005F95                 xor     edi, edi
.text:0000000000005F97                 jmp     quotearg_n_style
.text:0000000000005F97 ; } // starts at 5F90
.text:0000000000005F97 quotearg_style  endp
.text:0000000000005F97
.text:0000000000005F97 ; ---------------------------------------------------------------------------
.text:0000000000005F9C                 align 20h
.text:0000000000005FA0
.text:0000000000005FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FA0
.text:0000000000005FA0
.text:0000000000005FA0                 public quotearg_style_mem
.text:0000000000005FA0 quotearg_style_mem proc near
.text:0000000000005FA0 ; __unwind {
.text:0000000000005FA0                 mov     rcx, rdx
.text:0000000000005FA3                 mov     rdx, rsi
.text:0000000000005FA6                 mov     esi, edi
.text:0000000000005FA8                 xor     edi, edi
.text:0000000000005FAA                 jmp     quotearg_n_style_mem
.text:0000000000005FAA ; } // starts at 5FA0
.text:0000000000005FAA quotearg_style_mem endp
.text:0000000000005FAA
.text:0000000000005FAA ; ---------------------------------------------------------------------------
.text:0000000000005FAF                 align 10h
.text:0000000000005FB0
.text:0000000000005FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FB0
.text:0000000000005FB0 ; Attributes: info_from_lumina
.text:0000000000005FB0
.text:0000000000005FB0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000005FB0                 public quotearg_char_mem
.text:0000000000005FB0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000005FB0                                         ; quotearg_colon+C↓j ...
.text:0000000000005FB0
.text:0000000000005FB0 var_48          = xmmword ptr -48h
.text:0000000000005FB0 var_38          = xmmword ptr -38h
.text:0000000000005FB0 var_28          = xmmword ptr -28h
.text:0000000000005FB0 var_18          = qword ptr -18h
.text:0000000000005FB0 var_10          = qword ptr -10h
.text:0000000000005FB0
.text:0000000000005FB0 ; __unwind {
.text:0000000000005FB0                 sub     rsp, 48h
.text:0000000000005FB4                 mov     ecx, edx
.text:0000000000005FB6                 mov     rax, fs:28h
.text:0000000000005FBF                 mov     [rsp+48h+var_10], rax
.text:0000000000005FC4                 xor     eax, eax
.text:0000000000005FC6                 mov     rax, cs:qword_21C370
.text:0000000000005FCD                 mov     r8, rsp
.text:0000000000005FD0                 and     ecx, 1Fh
.text:0000000000005FD3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005FDB                 mov     [rsp+48h+var_18], rax
.text:0000000000005FE0                 mov     eax, edx
.text:0000000000005FE2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005FE6                 shr     al, 5
.text:0000000000005FE9                 movzx   eax, al
.text:0000000000005FEC                 lea     r9, [r8+rax*4+8]
.text:0000000000005FF1                 movdqa  xmm0, cs:xmmword_21C350
.text:0000000000005FF9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005FFE                 movdqa  xmm0, cs:xmmword_21C360
.text:0000000000006006                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000600B                 mov     edx, [r9]
.text:000000000000600E                 mov     eax, edx
.text:0000000000006010                 shr     eax, cl
.text:0000000000006012                 not     eax
.text:0000000000006014                 and     eax, 1
.text:0000000000006017                 shl     eax, cl
.text:0000000000006019                 mov     rcx, r8
.text:000000000000601C                 xor     eax, edx
.text:000000000000601E                 mov     rdx, rsi
.text:0000000000006021                 mov     rsi, rdi
.text:0000000000006024                 mov     [r9], eax
.text:0000000000006027                 xor     edi, edi
.text:0000000000006029                 call    quotearg_n_options
.text:000000000000602E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000006033                 xor     rsi, fs:28h
.text:000000000000603C                 jnz     short loc_6043
.text:000000000000603E                 add     rsp, 48h
.text:0000000000006042                 retn
.text:0000000000006043 ; ---------------------------------------------------------------------------
.text:0000000000006043
.text:0000000000006043 loc_6043:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000006043                 call    ___stack_chk_fail
.text:0000000000006043 ; } // starts at 5FB0
.text:0000000000006043 quotearg_char_mem endp
.text:0000000000006043
.text:0000000000006043 ; ---------------------------------------------------------------------------
.text:0000000000006048                 align 10h
.text:0000000000006050
.text:0000000000006050 ; =============== S U B R O U T I N E =======================================
.text:0000000000006050
.text:0000000000006050
.text:0000000000006050                 public quotearg_char
.text:0000000000006050 quotearg_char   proc near
.text:0000000000006050 ; __unwind {
.text:0000000000006050                 movsx   edx, sil
.text:0000000000006054                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000605B                 jmp     quotearg_char_mem
.text:000000000000605B ; } // starts at 6050
.text:000000000000605B quotearg_char   endp
.text:000000000000605B
.text:0000000000006060
.text:0000000000006060 ; =============== S U B R O U T I N E =======================================
.text:0000000000006060
.text:0000000000006060
.text:0000000000006060                 public quotearg_colon
.text:0000000000006060 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000006060 ; __unwind {
.text:0000000000006060                 mov     edx, 3Ah ; ':'
.text:0000000000006065                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000606C                 jmp     quotearg_char_mem
.text:000000000000606C ; } // starts at 6060
.text:000000000000606C quotearg_colon  endp
.text:000000000000606C
.text:000000000000606C ; ---------------------------------------------------------------------------
.text:0000000000006071                 align 20h
.text:0000000000006080
.text:0000000000006080 ; =============== S U B R O U T I N E =======================================
.text:0000000000006080
.text:0000000000006080
.text:0000000000006080                 public quotearg_colon_mem
.text:0000000000006080 quotearg_colon_mem proc near
.text:0000000000006080 ; __unwind {
.text:0000000000006080                 mov     edx, 3Ah ; ':'
.text:0000000000006085                 jmp     quotearg_char_mem
.text:0000000000006085 ; } // starts at 6080
.text:0000000000006085 quotearg_colon_mem endp
.text:0000000000006085
.text:0000000000006085 ; ---------------------------------------------------------------------------
.text:000000000000608A                 align 10h
.text:0000000000006090
.text:0000000000006090 ; =============== S U B R O U T I N E =======================================
.text:0000000000006090
.text:0000000000006090 ; Attributes: info_from_lumina
.text:0000000000006090
.text:0000000000006090 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000006090                 public quotearg_n_style_colon
.text:0000000000006090 quotearg_n_style_colon proc near        ; CODE XREF: delete_all_files_part_0+62↑p
.text:0000000000006090                                         ; close_output_file+121↑p ...
.text:0000000000006090
.text:0000000000006090 var_48          = dword ptr -48h
.text:0000000000006090 var_44          = qword ptr -44h
.text:0000000000006090 var_3C          = qword ptr -3Ch
.text:0000000000006090 var_34          = qword ptr -34h
.text:0000000000006090 var_2C          = qword ptr -2Ch
.text:0000000000006090 var_24          = qword ptr -24h
.text:0000000000006090 var_1C          = qword ptr -1Ch
.text:0000000000006090 var_14          = dword ptr -14h
.text:0000000000006090 var_10          = qword ptr -10h
.text:0000000000006090
.text:0000000000006090 ; __unwind {
.text:0000000000006090                 sub     rsp, 48h
.text:0000000000006094                 mov     rax, rdx
.text:0000000000006097                 mov     rdx, fs:28h
.text:00000000000060A0                 mov     [rsp+48h+var_10], rdx
.text:00000000000060A5                 xor     edx, edx
.text:00000000000060A7                 cmp     esi, 0Ah
.text:00000000000060AA                 jz      short loc_6114
.text:00000000000060AC                 mov     [rsp+48h+var_48], esi
.text:00000000000060AF                 mov     rcx, rsp
.text:00000000000060B2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000060B9                 mov     rsi, rax
.text:00000000000060BC                 mov     [rsp+48h+var_44], 0
.text:00000000000060C5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000060CE                 mov     [rsp+48h+var_34], 0
.text:00000000000060D7                 mov     [rsp+48h+var_2C], 0
.text:00000000000060E0                 mov     [rsp+48h+var_24], 0
.text:00000000000060E9                 mov     [rsp+48h+var_1C], 0
.text:00000000000060F2                 mov     [rsp+48h+var_14], 0
.text:00000000000060FA                 call    quotearg_n_options
.text:00000000000060FF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000006104                 xor     rcx, fs:28h
.text:000000000000610D                 jnz     short loc_6119
.text:000000000000610F                 add     rsp, 48h
.text:0000000000006113                 retn
.text:0000000000006114 ; ---------------------------------------------------------------------------
.text:0000000000006114
.text:0000000000006114 loc_6114:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000006114                 call    _abort
.text:0000000000006119 ; ---------------------------------------------------------------------------
.text:0000000000006119
.text:0000000000006119 loc_6119:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000006119                 call    ___stack_chk_fail
.text:0000000000006119 ; } // starts at 6090
.text:0000000000006119 quotearg_n_style_colon endp
.text:0000000000006119
.text:0000000000006119 ; ---------------------------------------------------------------------------
.text:000000000000611E                 align 20h
.text:0000000000006120
.text:0000000000006120 ; =============== S U B R O U T I N E =======================================
.text:0000000000006120
.text:0000000000006120 ; Attributes: info_from_lumina
.text:0000000000006120
.text:0000000000006120 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000006120                 public quotearg_n_custom_mem
.text:0000000000006120 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000006120                                         ; quotearg_custom+12↓j ...
.text:0000000000006120
.text:0000000000006120 var_48          = xmmword ptr -48h
.text:0000000000006120 var_38          = xmmword ptr -38h
.text:0000000000006120 var_28          = xmmword ptr -28h
.text:0000000000006120 var_18          = qword ptr -18h
.text:0000000000006120 var_10          = qword ptr -10h
.text:0000000000006120
.text:0000000000006120 ; __unwind {
.text:0000000000006120                 sub     rsp, 48h
.text:0000000000006124                 mov     r9, rcx
.text:0000000000006127                 mov     rcx, cs:qword_21C370
.text:000000000000612E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000006136                 mov     rax, fs:28h
.text:000000000000613F                 mov     [rsp+48h+var_10], rax
.text:0000000000006144                 xor     eax, eax
.text:0000000000006146                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000614A                 test    rsi, rsi
.text:000000000000614D                 mov     [rsp+48h+var_18], rcx
.text:0000000000006152                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000006159                 movdqa  xmm0, cs:xmmword_21C350
.text:0000000000006161                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000006166                 movdqa  xmm0, cs:xmmword_21C360
.text:000000000000616E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000006173                 jz      short loc_61A7
.text:0000000000006175                 test    rdx, rdx
.text:0000000000006178                 jz      short loc_61A7
.text:000000000000617A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000617F                 mov     [rsp+48h+var_18], rdx
.text:0000000000006184                 mov     rcx, rsp
.text:0000000000006187                 mov     rdx, r8
.text:000000000000618A                 mov     rsi, r9
.text:000000000000618D                 call    quotearg_n_options
.text:0000000000006192                 mov     rdi, [rsp+48h+var_10]
.text:0000000000006197                 xor     rdi, fs:28h
.text:00000000000061A0                 jnz     short loc_61AC
.text:00000000000061A2                 add     rsp, 48h
.text:00000000000061A6                 retn
.text:00000000000061A7 ; ---------------------------------------------------------------------------
.text:00000000000061A7
.text:00000000000061A7 loc_61A7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000061A7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000061A7                 call    _abort
.text:00000000000061AC ; ---------------------------------------------------------------------------
.text:00000000000061AC
.text:00000000000061AC loc_61AC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000061AC                 call    ___stack_chk_fail
.text:00000000000061AC ; } // starts at 6120
.text:00000000000061AC quotearg_n_custom_mem endp
.text:00000000000061AC
.text:00000000000061AC ; ---------------------------------------------------------------------------
.text:00000000000061B1                 align 20h
.text:00000000000061C0
.text:00000000000061C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061C0
.text:00000000000061C0
.text:00000000000061C0                 public quotearg_n_custom
.text:00000000000061C0 quotearg_n_custom proc near
.text:00000000000061C0 ; __unwind {
.text:00000000000061C0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000061C7                 jmp     quotearg_n_custom_mem
.text:00000000000061C7 ; } // starts at 61C0
.text:00000000000061C7 quotearg_n_custom endp
.text:00000000000061C7
.text:00000000000061C7 ; ---------------------------------------------------------------------------
.text:00000000000061CC                 align 10h
.text:00000000000061D0
.text:00000000000061D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061D0
.text:00000000000061D0
.text:00000000000061D0                 public quotearg_custom
.text:00000000000061D0 quotearg_custom proc near
.text:00000000000061D0 ; __unwind {
.text:00000000000061D0                 mov     rcx, rdx
.text:00000000000061D3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000061DA                 mov     rdx, rsi
.text:00000000000061DD                 mov     rsi, rdi
.text:00000000000061E0                 xor     edi, edi
.text:00000000000061E2                 jmp     quotearg_n_custom_mem
.text:00000000000061E2 ; } // starts at 61D0
.text:00000000000061E2 quotearg_custom endp
.text:00000000000061E2
.text:00000000000061E2 ; ---------------------------------------------------------------------------
.text:00000000000061E7                 align 10h
.text:00000000000061F0
.text:00000000000061F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061F0
.text:00000000000061F0
.text:00000000000061F0                 public quotearg_custom_mem
.text:00000000000061F0 quotearg_custom_mem proc near
.text:00000000000061F0 ; __unwind {
.text:00000000000061F0                 mov     r8, rcx
.text:00000000000061F3                 mov     rcx, rdx
.text:00000000000061F6                 mov     rdx, rsi
.text:00000000000061F9                 mov     rsi, rdi
.text:00000000000061FC                 xor     edi, edi
.text:00000000000061FE                 jmp     quotearg_n_custom_mem
.text:00000000000061FE ; } // starts at 61F0
.text:00000000000061FE quotearg_custom_mem endp
.text:00000000000061FE
.text:00000000000061FE ; ---------------------------------------------------------------------------
.text:0000000000006203                 align 10h
.text:0000000000006210
.text:0000000000006210 ; =============== S U B R O U T I N E =======================================
.text:0000000000006210
.text:0000000000006210
.text:0000000000006210                 public quote_n_mem
.text:0000000000006210 quote_n_mem     proc near
.text:0000000000006210 ; __unwind {
.text:0000000000006210                 lea     rcx, quote_quoting_options
.text:0000000000006217                 jmp     quotearg_n_options
.text:0000000000006217 ; } // starts at 6210
.text:0000000000006217 quote_n_mem     endp
.text:0000000000006217
.text:0000000000006217 ; ---------------------------------------------------------------------------
.text:000000000000621C                 align 20h
.text:0000000000006220
.text:0000000000006220 ; =============== S U B R O U T I N E =======================================
.text:0000000000006220
.text:0000000000006220
.text:0000000000006220                 public quote_mem
.text:0000000000006220 quote_mem       proc near
.text:0000000000006220 ; __unwind {
.text:0000000000006220                 lea     rcx, quote_quoting_options
.text:0000000000006227                 mov     rdx, rsi
.text:000000000000622A                 mov     rsi, rdi
.text:000000000000622D                 xor     edi, edi
.text:000000000000622F                 jmp     quotearg_n_options
.text:000000000000622F ; } // starts at 6220
.text:000000000000622F quote_mem       endp
.text:000000000000622F
.text:000000000000622F ; ---------------------------------------------------------------------------
.text:0000000000006234                 align 20h
.text:0000000000006240
.text:0000000000006240 ; =============== S U B R O U T I N E =======================================
.text:0000000000006240
.text:0000000000006240
.text:0000000000006240                 public quote_n
.text:0000000000006240 quote_n         proc near
.text:0000000000006240 ; __unwind {
.text:0000000000006240                 lea     rcx, quote_quoting_options
.text:0000000000006247                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000624E                 jmp     quotearg_n_options
.text:000000000000624E ; } // starts at 6240
.text:000000000000624E quote_n         endp
.text:000000000000624E
.text:000000000000624E ; ---------------------------------------------------------------------------
.text:0000000000006253                 align 20h
.text:0000000000006260
.text:0000000000006260 ; =============== S U B R O U T I N E =======================================
.text:0000000000006260
.text:0000000000006260
.text:0000000000006260                 public quote
.text:0000000000006260 quote           proc near               ; CODE XREF: regexp_error+2E↑p
.text:0000000000006260                                         ; main+4D3↑p ...
.text:0000000000006260 ; __unwind {
.text:0000000000006260                 lea     rcx, quote_quoting_options
.text:0000000000006267                 mov     rsi, rdi
.text:000000000000626A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006271                 xor     edi, edi
.text:0000000000006273                 jmp     quotearg_n_options
.text:0000000000006273 ; } // starts at 6260
.text:0000000000006273 quote           endp
.text:0000000000006273
.text:0000000000006273 ; ---------------------------------------------------------------------------
.text:0000000000006278                 align 20h
.text:0000000000006280
.text:0000000000006280 ; =============== S U B R O U T I N E =======================================
.text:0000000000006280
.text:0000000000006280
.text:0000000000006280 ; __int64 __fastcall safe_read(int fd, void *buf, size_t nbytes)
.text:0000000000006280                 public safe_read
.text:0000000000006280 safe_read       proc near               ; CODE XREF: load_buffer_part_5+CE↑p
.text:0000000000006280 ; __unwind {
.text:0000000000006280                 push    r13
.text:0000000000006282                 push    r12
.text:0000000000006284                 mov     r13d, edi
.text:0000000000006287                 push    rbp
.text:0000000000006288                 push    rbx
.text:0000000000006289                 mov     r12, rsi
.text:000000000000628C                 mov     rbx, rdx
.text:000000000000628F                 sub     rsp, 8
.text:0000000000006293                 nop     dword ptr [rax+rax+00h]
.text:0000000000006298
.text:0000000000006298 loc_6298:                               ; CODE XREF: safe_read+38↓j
.text:0000000000006298                                         ; safe_read+4D↓j
.text:0000000000006298                 mov     rdx, rbx        ; nbytes
.text:000000000000629B                 mov     rsi, r12        ; buf
.text:000000000000629E                 mov     edi, r13d       ; fd
.text:00000000000062A1                 call    _read
.text:00000000000062A6                 test    rax, rax
.text:00000000000062A9                 mov     rbp, rax
.text:00000000000062AC                 jns     short loc_62D0
.text:00000000000062AE                 call    ___errno_location
.text:00000000000062B3                 mov     eax, [rax]
.text:00000000000062B5                 cmp     eax, 4
.text:00000000000062B8                 jz      short loc_6298
.text:00000000000062BA                 cmp     rbx, 7FF00000h
.text:00000000000062C1                 jbe     short loc_62D0
.text:00000000000062C3                 cmp     eax, 16h
.text:00000000000062C6                 jnz     short loc_62D0
.text:00000000000062C8                 mov     ebx, 7FF00000h
.text:00000000000062CD                 jmp     short loc_6298
.text:00000000000062CD ; ---------------------------------------------------------------------------
.text:00000000000062CF                 align 10h
.text:00000000000062D0
.text:00000000000062D0 loc_62D0:                               ; CODE XREF: safe_read+2C↑j
.text:00000000000062D0                                         ; safe_read+41↑j ...
.text:00000000000062D0                 add     rsp, 8
.text:00000000000062D4                 mov     rax, rbp
.text:00000000000062D7                 pop     rbx
.text:00000000000062D8                 pop     rbp
.text:00000000000062D9                 pop     r12
.text:00000000000062DB                 pop     r13
.text:00000000000062DD                 retn
.text:00000000000062DD ; } // starts at 6280
.text:00000000000062DD safe_read       endp
.text:00000000000062DD
.text:00000000000062DD ; ---------------------------------------------------------------------------
.text:00000000000062DE                 align 20h
.text:00000000000062E0
.text:00000000000062E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062E0
.text:00000000000062E0
.text:00000000000062E0                 public dup_safer
.text:00000000000062E0 dup_safer       proc near               ; CODE XREF: fopen_safer+32↑p
.text:00000000000062E0 ; __unwind {
.text:00000000000062E0                 mov     edx, 3
.text:00000000000062E5                 xor     esi, esi
.text:00000000000062E7                 xor     eax, eax
.text:00000000000062E9                 jmp     rpl_fcntl
.text:00000000000062E9 ; } // starts at 62E0
.text:00000000000062E9 dup_safer       endp
.text:00000000000062E9
.text:00000000000062E9 ; ---------------------------------------------------------------------------
.text:00000000000062EE                 align 10h
.text:00000000000062F0
.text:00000000000062F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062F0
.text:00000000000062F0
.text:00000000000062F0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000062F0                 public version_etc_arn
.text:00000000000062F0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_672B↓j
.text:00000000000062F0                                         ; version_etc_va:loc_677B↓p ...
.text:00000000000062F0
.text:00000000000062F0 var_58          = qword ptr -58h
.text:00000000000062F0 var_50          = qword ptr -50h
.text:00000000000062F0 var_48          = qword ptr -48h
.text:00000000000062F0 var_40          = qword ptr -40h
.text:00000000000062F0
.text:00000000000062F0 ; __unwind {
.text:00000000000062F0                 push    r15
.text:00000000000062F2                 push    r14
.text:00000000000062F4                 push    r13
.text:00000000000062F6                 push    r12
.text:00000000000062F8                 mov     r12, r9
.text:00000000000062FB                 push    rbp
.text:00000000000062FC                 push    rbx
.text:00000000000062FD                 mov     rbp, rdi
.text:0000000000006300                 mov     rbx, r8
.text:0000000000006303                 sub     rsp, 28h
.text:0000000000006307                 test    rsi, rsi
.text:000000000000630A                 jz      loc_6428
.text:0000000000006310                 mov     r8, rdx
.text:0000000000006313                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000631A                 mov     r9, rcx
.text:000000000000631D                 xor     eax, eax
.text:000000000000631F                 mov     rcx, rsi
.text:0000000000006322                 mov     esi, 1
.text:0000000000006327                 call    ___fprintf_chk
.text:000000000000632C
.text:000000000000632C loc_632C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000632C                 lea     rsi, aC         ; "(C)"
.text:0000000000006333                 xor     edi, edi        ; domainname
.text:0000000000006335                 mov     edx, 5          ; category
.text:000000000000633A                 call    _dcgettext
.text:000000000000633F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000006346                 mov     rcx, rax
.text:0000000000006349                 mov     r8d, 7E3h
.text:000000000000634F                 mov     esi, 1
.text:0000000000006354                 mov     rdi, rbp
.text:0000000000006357                 xor     eax, eax
.text:0000000000006359                 call    ___fprintf_chk
.text:000000000000635E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000006365                 xor     edi, edi        ; domainname
.text:0000000000006367                 mov     edx, 5          ; category
.text:000000000000636C                 call    _dcgettext
.text:0000000000006371                 mov     rsi, rbp        ; stream
.text:0000000000006374                 mov     rdi, rax        ; s
.text:0000000000006377                 call    _fputs_unlocked
.text:000000000000637C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000006380                 ja      def_6394        ; jumptable 0000000000006394 default case
.text:0000000000006386                 lea     rdx, jpt_6394
.text:000000000000638D                 movsxd  rax, ds:(jpt_6394 - 17384h)[rdx+r12*4]
.text:0000000000006391                 add     rax, rdx
.text:0000000000006394                 jmp     rax             ; switch jump
.text:0000000000006394 ; ---------------------------------------------------------------------------
.text:0000000000006396                 align 20h
.text:00000000000063A0
.text:00000000000063A0 loc_63A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000063A0                                         ; DATA XREF: .rodata:jpt_6394↓o
.text:00000000000063A0                 mov     r9, [rbx+38h]   ; jumptable 0000000000006394 case 8
.text:00000000000063A4                 mov     rax, [rbx+10h]
.text:00000000000063A8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000063AF                 mov     r8, [rbx+8]
.text:00000000000063B3                 mov     edx, 5          ; category
.text:00000000000063B8                 xor     edi, edi        ; domainname
.text:00000000000063BA                 mov     r13, [rbx+30h]
.text:00000000000063BE                 mov     r12, [rbx+28h]
.text:00000000000063C2                 mov     [rsp+58h+var_48], r9
.text:00000000000063C7                 mov     r15, [rbx+20h]
.text:00000000000063CB                 mov     r14, [rbx+18h]
.text:00000000000063CF                 mov     [rsp+58h+var_58], rax
.text:00000000000063D3                 mov     [rsp+58h+var_50], r8
.text:00000000000063D8                 mov     rbx, [rbx]
.text:00000000000063DB                 call    _dcgettext
.text:00000000000063E0                 sub     rsp, 8
.text:00000000000063E4
.text:00000000000063E4 loc_63E4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000063E4                 mov     r9, [rsp+60h+var_48]
.text:00000000000063E9                 mov     rdx, rax
.text:00000000000063EC                 mov     rcx, rbx
.text:00000000000063EF                 mov     esi, 1
.text:00000000000063F4                 mov     rdi, rbp
.text:00000000000063F7                 xor     eax, eax
.text:00000000000063F9                 push    r9
.text:00000000000063FB                 push    r13
.text:00000000000063FD                 push    r12
.text:00000000000063FF                 push    r15
.text:0000000000006401                 push    r14
.text:0000000000006403                 mov     r9, [rsp+88h+var_58]
.text:0000000000006408                 mov     r8, [rsp+88h+var_50]
.text:000000000000640D                 call    ___fprintf_chk
.text:0000000000006412                 add     rsp, 30h
.text:0000000000006416
.text:0000000000006416 loc_6416:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006416                                         ; DATA XREF: .rodata:jpt_6394↓o
.text:0000000000006416                 add     rsp, 28h        ; jumptable 0000000000006394 case 0
.text:000000000000641A                 pop     rbx
.text:000000000000641B                 pop     rbp
.text:000000000000641C                 pop     r12
.text:000000000000641E                 pop     r13
.text:0000000000006420                 pop     r14
.text:0000000000006422                 pop     r15
.text:0000000000006424                 retn
.text:0000000000006424 ; ---------------------------------------------------------------------------
.text:0000000000006425                 align 8
.text:0000000000006428
.text:0000000000006428 loc_6428:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000006428                 mov     r8, rcx
.text:000000000000642B                 mov     rcx, rdx
.text:000000000000642E                 lea     rdx, aSS        ; "%s %s\n"
.text:0000000000006435                 mov     esi, 1
.text:000000000000643A                 xor     eax, eax
.text:000000000000643C                 call    ___fprintf_chk
.text:0000000000006441                 jmp     loc_632C
.text:0000000000006441 ; ---------------------------------------------------------------------------
.text:0000000000006446                 align 10h
.text:0000000000006450
.text:0000000000006450 loc_6450:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006450                                         ; DATA XREF: .rodata:jpt_6394↓o
.text:0000000000006450                 mov     r10, [rbx+40h]  ; jumptable 0000000000006394 case 9
.text:0000000000006454                 mov     r9, [rbx+38h]
.text:0000000000006458                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000645F                 mov     rax, [rbx+10h]
.text:0000000000006463                 mov     r8, [rbx+8]
.text:0000000000006467                 mov     edx, 5          ; category
.text:000000000000646C                 mov     r13, [rbx+30h]
.text:0000000000006470                 mov     r12, [rbx+28h]
.text:0000000000006474                 mov     r15, [rbx+20h]
.text:0000000000006478                 mov     r14, [rbx+18h]
.text:000000000000647C                 mov     rbx, [rbx]
.text:000000000000647F                 mov     [rsp+58h+var_40], r10
.text:0000000000006484                 mov     [rsp+58h+var_48], r9
.text:0000000000006489                 mov     [rsp+58h+var_58], rax
.text:000000000000648D                 mov     [rsp+58h+var_50], r8
.text:0000000000006492
.text:0000000000006492 loc_6492:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000006492                 xor     edi, edi        ; domainname
.text:0000000000006494                 call    _dcgettext
.text:0000000000006499                 mov     r10, [rsp+58h+var_40]
.text:000000000000649E                 push    r10
.text:00000000000064A0                 jmp     loc_63E4
.text:00000000000064A0 ; ---------------------------------------------------------------------------
.text:00000000000064A5                 align 8
.text:00000000000064A8
.text:00000000000064A8 loc_64A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000064A8                                         ; DATA XREF: .rodata:jpt_6394↓o
.text:00000000000064A8                 mov     rbx, [rbx]      ; jumptable 0000000000006394 case 1
.text:00000000000064AB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000064B2                 mov     edx, 5          ; category
.text:00000000000064B7                 xor     edi, edi        ; domainname
.text:00000000000064B9                 call    _dcgettext
.text:00000000000064BE                 add     rsp, 28h
.text:00000000000064C2                 mov     rcx, rbx
.text:00000000000064C5                 mov     rdi, rbp
.text:00000000000064C8                 pop     rbx
.text:00000000000064C9                 pop     rbp
.text:00000000000064CA                 pop     r12
.text:00000000000064CC                 pop     r13
.text:00000000000064CE                 pop     r14
.text:00000000000064D0                 pop     r15
.text:00000000000064D2                 mov     rdx, rax
.text:00000000000064D5                 mov     esi, 1
.text:00000000000064DA                 xor     eax, eax
.text:00000000000064DC                 jmp     ___fprintf_chk
.text:00000000000064DC ; ---------------------------------------------------------------------------
.text:00000000000064E1                 align 8
.text:00000000000064E8
.text:00000000000064E8 loc_64E8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000064E8                                         ; DATA XREF: .rodata:jpt_6394↓o
.text:00000000000064E8                 mov     r12, [rbx+8]    ; jumptable 0000000000006394 case 2
.text:00000000000064EC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000064F3                 mov     rbx, [rbx]
.text:00000000000064F6                 mov     edx, 5          ; category
.text:00000000000064FB                 xor     edi, edi        ; domainname
.text:00000000000064FD                 call    _dcgettext
.text:0000000000006502                 add     rsp, 28h
.text:0000000000006506                 mov     r8, r12
.text:0000000000006509                 mov     rcx, rbx
.text:000000000000650C                 mov     rdi, rbp
.text:000000000000650F                 mov     rdx, rax
.text:0000000000006512                 mov     esi, 1
.text:0000000000006517                 pop     rbx
.text:0000000000006518                 pop     rbp
.text:0000000000006519                 pop     r12
.text:000000000000651B                 pop     r13
.text:000000000000651D                 pop     r14
.text:000000000000651F                 pop     r15
.text:0000000000006521                 xor     eax, eax
.text:0000000000006523                 jmp     ___fprintf_chk
.text:0000000000006523 ; ---------------------------------------------------------------------------
.text:0000000000006528                 align 10h
.text:0000000000006530
.text:0000000000006530 loc_6530:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006530                                         ; DATA XREF: .rodata:jpt_6394↓o
.text:0000000000006530                 mov     r13, [rbx+10h]  ; jumptable 0000000000006394 case 3
.text:0000000000006534                 mov     r12, [rbx+8]
.text:0000000000006538                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000653F                 mov     rbx, [rbx]
.text:0000000000006542                 mov     edx, 5          ; category
.text:0000000000006547                 xor     edi, edi        ; domainname
.text:0000000000006549                 call    _dcgettext
.text:000000000000654E                 add     rsp, 28h
.text:0000000000006552                 mov     r9, r13
.text:0000000000006555                 mov     r8, r12
.text:0000000000006558                 mov     rcx, rbx
.text:000000000000655B                 mov     rdi, rbp
.text:000000000000655E                 mov     rdx, rax
.text:0000000000006561                 pop     rbx
.text:0000000000006562                 pop     rbp
.text:0000000000006563                 pop     r12
.text:0000000000006565                 pop     r13
.text:0000000000006567                 pop     r14
.text:0000000000006569                 pop     r15
.text:000000000000656B                 mov     esi, 1
.text:0000000000006570                 xor     eax, eax
.text:0000000000006572                 jmp     ___fprintf_chk
.text:0000000000006572 ; ---------------------------------------------------------------------------
.text:0000000000006577                 align 20h
.text:0000000000006580
.text:0000000000006580 loc_6580:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006580                                         ; DATA XREF: .rodata:jpt_6394↓o
.text:0000000000006580                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000006394 case 4
.text:0000000000006587                 mov     edx, 5          ; category
.text:000000000000658C                 xor     edi, edi        ; domainname
.text:000000000000658E                 mov     r14, [rbx+18h]
.text:0000000000006592                 mov     r13, [rbx+10h]
.text:0000000000006596                 mov     r12, [rbx+8]
.text:000000000000659A                 mov     rbx, [rbx]
.text:000000000000659D                 call    _dcgettext
.text:00000000000065A2                 sub     rsp, 8
.text:00000000000065A6
.text:00000000000065A6 loc_65A6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000065A6                 push    r14
.text:00000000000065A8                 mov     rdx, rax
.text:00000000000065AB                 mov     r9, r13
.text:00000000000065AE                 mov     r8, r12
.text:00000000000065B1                 mov     rcx, rbx
.text:00000000000065B4                 mov     rdi, rbp
.text:00000000000065B7                 mov     esi, 1
.text:00000000000065BC                 xor     eax, eax
.text:00000000000065BE                 call    ___fprintf_chk
.text:00000000000065C3                 pop     rax
.text:00000000000065C4                 pop     rdx
.text:00000000000065C5                 add     rsp, 28h
.text:00000000000065C9                 pop     rbx
.text:00000000000065CA                 pop     rbp
.text:00000000000065CB                 pop     r12
.text:00000000000065CD                 pop     r13
.text:00000000000065CF                 pop     r14
.text:00000000000065D1                 pop     r15
.text:00000000000065D3                 retn
.text:00000000000065D3 ; ---------------------------------------------------------------------------
.text:00000000000065D4                 align 8
.text:00000000000065D8
.text:00000000000065D8 loc_65D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000065D8                                         ; DATA XREF: .rodata:jpt_6394↓o
.text:00000000000065D8                 mov     r15, [rbx+20h]  ; jumptable 0000000000006394 case 5
.text:00000000000065DC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000065E3                 mov     edx, 5          ; category
.text:00000000000065E8                 xor     edi, edi        ; domainname
.text:00000000000065EA                 mov     r14, [rbx+18h]
.text:00000000000065EE                 mov     r13, [rbx+10h]
.text:00000000000065F2                 mov     r12, [rbx+8]
.text:00000000000065F6                 mov     rbx, [rbx]
.text:00000000000065F9                 call    _dcgettext
.text:00000000000065FE                 push    r15
.text:0000000000006600                 jmp     short loc_65A6
.text:0000000000006600 ; ---------------------------------------------------------------------------
.text:0000000000006602                 align 8
.text:0000000000006608
.text:0000000000006608 loc_6608:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006608                                         ; DATA XREF: .rodata:jpt_6394↓o
.text:0000000000006608                 mov     r8, [rbx+8]     ; jumptable 0000000000006394 case 6
.text:000000000000660C                 mov     r12, [rbx+28h]
.text:0000000000006610                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000006617                 mov     r15, [rbx+20h]
.text:000000000000661B                 mov     r14, [rbx+18h]
.text:000000000000661F                 mov     edx, 5          ; category
.text:0000000000006624                 mov     r13, [rbx+10h]
.text:0000000000006628                 xor     edi, edi        ; domainname
.text:000000000000662A                 mov     rbx, [rbx]
.text:000000000000662D                 mov     [rsp+58h+var_58], r8
.text:0000000000006631                 call    _dcgettext
.text:0000000000006636                 sub     rsp, 8
.text:000000000000663A                 mov     r9, r13
.text:000000000000663D                 push    r12
.text:000000000000663F                 push    r15
.text:0000000000006641                 push    r14
.text:0000000000006643
.text:0000000000006643 loc_6643:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000006643                 mov     r8, [rsp+78h+var_58]
.text:0000000000006648                 mov     rcx, rbx
.text:000000000000664B                 mov     rdx, rax
.text:000000000000664E                 mov     rdi, rbp
.text:0000000000006651                 mov     esi, 1
.text:0000000000006656                 xor     eax, eax
.text:0000000000006658                 call    ___fprintf_chk
.text:000000000000665D                 add     rsp, 20h
.text:0000000000006661                 add     rsp, 28h
.text:0000000000006665                 pop     rbx
.text:0000000000006666                 pop     rbp
.text:0000000000006667                 pop     r12
.text:0000000000006669                 pop     r13
.text:000000000000666B                 pop     r14
.text:000000000000666D                 pop     r15
.text:000000000000666F                 retn
.text:0000000000006670 ; ---------------------------------------------------------------------------
.text:0000000000006670
.text:0000000000006670 loc_6670:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006670                                         ; DATA XREF: .rodata:jpt_6394↓o
.text:0000000000006670                 mov     r9, [rbx+10h]   ; jumptable 0000000000006394 case 7
.text:0000000000006674                 mov     r13, [rbx+30h]
.text:0000000000006678                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000667F                 mov     r12, [rbx+28h]
.text:0000000000006683                 mov     r15, [rbx+20h]
.text:0000000000006687                 mov     edx, 5          ; category
.text:000000000000668C                 mov     r14, [rbx+18h]
.text:0000000000006690                 mov     r8, [rbx+8]
.text:0000000000006694                 xor     edi, edi        ; domainname
.text:0000000000006696                 mov     [rsp+58h+var_50], r9
.text:000000000000669B                 mov     rbx, [rbx]
.text:000000000000669E                 mov     [rsp+58h+var_58], r8
.text:00000000000066A2                 call    _dcgettext
.text:00000000000066A7                 push    r13
.text:00000000000066A9                 push    r12
.text:00000000000066AB                 push    r15
.text:00000000000066AD                 push    r14
.text:00000000000066AF                 mov     r9, [rsp+78h+var_50]
.text:00000000000066B4                 jmp     short loc_6643
.text:00000000000066B4 ; ---------------------------------------------------------------------------
.text:00000000000066B6                 align 20h
.text:00000000000066C0
.text:00000000000066C0 def_6394:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000066C0                 mov     r10, [rbx+40h]  ; jumptable 0000000000006394 default case
.text:00000000000066C4                 mov     r9, [rbx+38h]
.text:00000000000066C8                 mov     edx, 5
.text:00000000000066CD                 mov     rax, [rbx+10h]
.text:00000000000066D1                 mov     r8, [rbx+8]
.text:00000000000066D5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000066DC                 mov     r13, [rbx+30h]
.text:00000000000066E0                 mov     r12, [rbx+28h]
.text:00000000000066E4                 mov     r15, [rbx+20h]
.text:00000000000066E8                 mov     r14, [rbx+18h]
.text:00000000000066EC                 mov     [rsp+58h+var_40], r10
.text:00000000000066F1                 mov     [rsp+58h+var_48], r9
.text:00000000000066F6                 mov     [rsp+58h+var_58], rax
.text:00000000000066FA                 mov     [rsp+58h+var_50], r8
.text:00000000000066FF                 mov     rbx, [rbx]
.text:0000000000006702                 jmp     loc_6492
.text:0000000000006702 ; } // starts at 62F0
.text:0000000000006702 version_etc_arn endp
.text:0000000000006702
.text:0000000000006702 ; ---------------------------------------------------------------------------
.text:0000000000006707                 align 10h
.text:0000000000006710
.text:0000000000006710 ; =============== S U B R O U T I N E =======================================
.text:0000000000006710
.text:0000000000006710 ; Attributes: info_from_lumina
.text:0000000000006710
.text:0000000000006710 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000006710                 public version_etc_ar
.text:0000000000006710 version_etc_ar  proc near
.text:0000000000006710 ; __unwind {
.text:0000000000006710                 xor     r9d, r9d
.text:0000000000006713                 cmp     qword ptr [r8], 0
.text:0000000000006717                 jz      short loc_672B
.text:0000000000006719                 nop     dword ptr [rax+00000000h]
.text:0000000000006720
.text:0000000000006720 loc_6720:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000006720                 add     r9, 1
.text:0000000000006724                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000006729                 jnz     short loc_6720
.text:000000000000672B
.text:000000000000672B loc_672B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000672B                 jmp     version_etc_arn
.text:000000000000672B ; } // starts at 6710
.text:000000000000672B version_etc_ar  endp
.text:000000000000672B
.text:0000000000006730
.text:0000000000006730 ; =============== S U B R O U T I N E =======================================
.text:0000000000006730
.text:0000000000006730 ; Attributes: info_from_lumina
.text:0000000000006730
.text:0000000000006730 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000006730                 public version_etc_va
.text:0000000000006730 version_etc_va  proc near
.text:0000000000006730
.text:0000000000006730 authtab         = qword ptr -68h
.text:0000000000006730 var_10          = qword ptr -10h
.text:0000000000006730
.text:0000000000006730 ; __unwind {
.text:0000000000006730                 sub     rsp, 68h
.text:0000000000006734                 mov     r10, r8
.text:0000000000006737                 xor     r9d, r9d
.text:000000000000673A                 mov     rax, fs:28h
.text:0000000000006743                 mov     [rsp+68h+var_10], rax
.text:0000000000006748                 xor     eax, eax
.text:000000000000674A                 mov     r8, rsp
.text:000000000000674D                 nop     dword ptr [rax]
.text:0000000000006750
.text:0000000000006750 loc_6750:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000006750                 mov     eax, [r10]
.text:0000000000006753                 cmp     eax, 2Fh ; '/'
.text:0000000000006756                 ja      short loc_679A
.text:0000000000006758                 mov     r11d, eax
.text:000000000000675B                 add     r11, [r10+10h]
.text:000000000000675F                 add     eax, 8
.text:0000000000006762                 mov     [r10], eax
.text:0000000000006765
.text:0000000000006765 loc_6765:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000006765                 mov     rax, [r11]
.text:0000000000006768                 test    rax, rax
.text:000000000000676B                 mov     [r8+r9*8], rax
.text:000000000000676F                 jz      short loc_677B
.text:0000000000006771                 add     r9, 1
.text:0000000000006775                 cmp     r9, 0Ah
.text:0000000000006779                 jnz     short loc_6750
.text:000000000000677B
.text:000000000000677B loc_677B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000677B                 call    version_etc_arn
.text:0000000000006780                 mov     rax, [rsp+68h+var_10]
.text:0000000000006785                 xor     rax, fs:28h
.text:000000000000678E                 jnz     short loc_6795
.text:0000000000006790                 add     rsp, 68h
.text:0000000000006794                 retn
.text:0000000000006795 ; ---------------------------------------------------------------------------
.text:0000000000006795
.text:0000000000006795 loc_6795:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000006795                 call    ___stack_chk_fail
.text:000000000000679A ; ---------------------------------------------------------------------------
.text:000000000000679A
.text:000000000000679A loc_679A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000679A                 mov     r11, [r10+8]
.text:000000000000679E                 lea     rax, [r11+8]
.text:00000000000067A2                 mov     [r10+8], rax
.text:00000000000067A6                 jmp     short loc_6765
.text:00000000000067A6 ; } // starts at 6730
.text:00000000000067A6 version_etc_va  endp
.text:00000000000067A6
.text:00000000000067A6 ; ---------------------------------------------------------------------------
.text:00000000000067A8                 align 10h
.text:00000000000067B0
.text:00000000000067B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067B0
.text:00000000000067B0 ; Attributes: info_from_lumina
.text:00000000000067B0
.text:00000000000067B0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000067B0                 public version_etc
.text:00000000000067B0 version_etc     proc near               ; CODE XREF: main+225↑p
.text:00000000000067B0
.text:00000000000067B0 var_C0          = dword ptr -0C0h
.text:00000000000067B0 var_B8          = qword ptr -0B8h
.text:00000000000067B0 var_B0          = qword ptr -0B0h
.text:00000000000067B0 var_A8          = byte ptr -0A8h
.text:00000000000067B0 var_50          = qword ptr -50h
.text:00000000000067B0 var_48          = byte ptr -48h
.text:00000000000067B0 var_28          = qword ptr -28h
.text:00000000000067B0 var_20          = qword ptr -20h
.text:00000000000067B0 arg_0           = byte ptr  8
.text:00000000000067B0
.text:00000000000067B0 ; __unwind {
.text:00000000000067B0                 push    rbp
.text:00000000000067B1                 push    rbx
.text:00000000000067B2                 mov     r10d, 20h ; ' '
.text:00000000000067B8                 xor     r11d, r11d
.text:00000000000067BB                 sub     rsp, 0B8h
.text:00000000000067C2                 mov     rax, fs:28h
.text:00000000000067CB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000067D0                 xor     eax, eax
.text:00000000000067D2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000067DA                 mov     [rsp+0C8h+var_28], r8
.text:00000000000067E2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000067EA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000067EF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000067F7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000067FF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000006804                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000680C                 xor     r9d, r9d
.text:000000000000680F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000006814                 mov     rbp, rax
.text:0000000000006817                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006820
.text:0000000000006820 loc_6820:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000006820                 cmp     r10d, 2Fh ; '/'
.text:0000000000006824                 ja      short loc_687C
.text:0000000000006826                 mov     eax, r10d
.text:0000000000006829                 mov     r11d, 1
.text:000000000000682F                 add     r10d, 8
.text:0000000000006833                 add     rax, rbp
.text:0000000000006836
.text:0000000000006836 loc_6836:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000006836                 mov     rax, [rax]
.text:0000000000006839                 test    rax, rax
.text:000000000000683C                 mov     [r8+r9*8], rax
.text:0000000000006840                 jz      short loc_684C
.text:0000000000006842                 add     r9, 1
.text:0000000000006846                 cmp     r9, 0Ah
.text:000000000000684A                 jnz     short loc_6820
.text:000000000000684C
.text:000000000000684C loc_684C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000684C                 test    r11b, r11b
.text:000000000000684F                 jnz     short loc_6875
.text:0000000000006851
.text:0000000000006851 loc_6851:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000006851                 call    version_etc_arn
.text:0000000000006856                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000685B                 xor     rax, fs:28h
.text:0000000000006864                 jnz     short loc_6870
.text:0000000000006866                 add     rsp, 0B8h
.text:000000000000686D                 pop     rbx
.text:000000000000686E                 pop     rbp
.text:000000000000686F                 retn
.text:0000000000006870 ; ---------------------------------------------------------------------------
.text:0000000000006870
.text:0000000000006870 loc_6870:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000006870                 call    ___stack_chk_fail
.text:0000000000006875 ; ---------------------------------------------------------------------------
.text:0000000000006875
.text:0000000000006875 loc_6875:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000006875                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000687A                 jmp     short loc_6851
.text:000000000000687C ; ---------------------------------------------------------------------------
.text:000000000000687C
.text:000000000000687C loc_687C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000687C                 mov     rax, rbx
.text:000000000000687F                 add     rbx, 8
.text:0000000000006883                 jmp     short loc_6836
.text:0000000000006883 ; } // starts at 67B0
.text:0000000000006883 version_etc     endp
.text:0000000000006883
.text:0000000000006883 ; ---------------------------------------------------------------------------
.text:0000000000006885                 align 10h
.text:0000000000006890
.text:0000000000006890 ; =============== S U B R O U T I N E =======================================
.text:0000000000006890
.text:0000000000006890 ; Attributes: info_from_lumina
.text:0000000000006890
.text:0000000000006890 ; void __cdecl emit_bug_reporting_address()
.text:0000000000006890                 public emit_bug_reporting_address
.text:0000000000006890 emit_bug_reporting_address proc near
.text:0000000000006890 ; __unwind {
.text:0000000000006890                 push    rbx
.text:0000000000006891                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000006898                 mov     edx, 5          ; category
.text:000000000000689D                 xor     edi, edi        ; domainname
.text:000000000000689F                 call    _dcgettext
.text:00000000000068A4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000068AB                 mov     rsi, rax
.text:00000000000068AE                 mov     edi, 1
.text:00000000000068B3                 xor     eax, eax
.text:00000000000068B5                 call    ___printf_chk
.text:00000000000068BA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000068C1                 mov     edx, 5          ; category
.text:00000000000068C6                 xor     edi, edi        ; domainname
.text:00000000000068C8                 call    _dcgettext
.text:00000000000068CD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000068D4                 lea     rdx, unk_16096
.text:00000000000068DB                 mov     rsi, rax
.text:00000000000068DE                 mov     edi, 1
.text:00000000000068E3                 xor     eax, eax
.text:00000000000068E5                 call    ___printf_chk
.text:00000000000068EA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000068F1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000068F8                 xor     edi, edi        ; domainname
.text:00000000000068FA                 mov     edx, 5          ; category
.text:00000000000068FF                 call    _dcgettext
.text:0000000000006904                 mov     rsi, rbx        ; stream
.text:0000000000006907                 mov     rdi, rax        ; s
.text:000000000000690A                 pop     rbx
.text:000000000000690B                 jmp     _fputs_unlocked
.text:000000000000690B ; } // starts at 6890
.text:000000000000690B emit_bug_reporting_address endp
.text:000000000000690B
.text:0000000000006910
.text:0000000000006910 ; =============== S U B R O U T I N E =======================================
.text:0000000000006910
.text:0000000000006910
.text:0000000000006910                 public xmalloc
.text:0000000000006910 xmalloc         proc near               ; CODE XREF: main+2E4↑p
.text:0000000000006910                                         ; main+463↑p ...
.text:0000000000006910 ; __unwind {
.text:0000000000006910                 push    rbx
.text:0000000000006911                 mov     rbx, rdi
.text:0000000000006914                 call    _malloc
.text:0000000000006919                 test    rax, rax
.text:000000000000691C                 jnz     short loc_6923
.text:000000000000691E                 test    rbx, rbx
.text:0000000000006921                 jnz     short loc_6925
.text:0000000000006923
.text:0000000000006923 loc_6923:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000006923                 pop     rbx
.text:0000000000006924                 retn
.text:0000000000006925 ; ---------------------------------------------------------------------------
.text:0000000000006925
.text:0000000000006925 loc_6925:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000006925                 call    xalloc_die
.text:0000000000006925 ; } // starts at 6910
.text:0000000000006925 xmalloc         endp
.text:0000000000006925
.text:0000000000006925 ; ---------------------------------------------------------------------------
.text:000000000000692A                 align 10h
.text:0000000000006930
.text:0000000000006930 ; =============== S U B R O U T I N E =======================================
.text:0000000000006930
.text:0000000000006930 ; Attributes: info_from_lumina
.text:0000000000006930
.text:0000000000006930 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000006930                 public xnmalloc
.text:0000000000006930 xnmalloc        proc near
.text:0000000000006930 ; __unwind {
.text:0000000000006930                 mov     rax, rdi
.text:0000000000006933                 mul     rsi
.text:0000000000006936                 mov     rdi, rax
.text:0000000000006939                 seto    al
.text:000000000000693C                 test    rdi, rdi
.text:000000000000693F                 js      short loc_694B
.text:0000000000006941                 movzx   eax, al
.text:0000000000006944                 test    rax, rax
.text:0000000000006947                 jnz     short loc_694B
.text:0000000000006949                 jmp     short xmalloc
.text:000000000000694B ; ---------------------------------------------------------------------------
.text:000000000000694B
.text:000000000000694B loc_694B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000694B                                         ; xnmalloc+17↑j
.text:000000000000694B                 sub     rsp, 8
.text:000000000000694F                 call    xalloc_die
.text:000000000000694F ; } // starts at 6930
.text:000000000000694F xnmalloc        endp
.text:000000000000694F
.text:000000000000694F ; ---------------------------------------------------------------------------
.text:0000000000006954                 align 20h
.text:0000000000006960
.text:0000000000006960 ; =============== S U B R O U T I N E =======================================
.text:0000000000006960
.text:0000000000006960
.text:0000000000006960                 public xcharalloc
.text:0000000000006960 xcharalloc      proc near
.text:0000000000006960 ; __unwind {
.text:0000000000006960                 jmp     short xmalloc
.text:0000000000006960 ; } // starts at 6960
.text:0000000000006960 xcharalloc      endp
.text:0000000000006960
.text:0000000000006960 ; ---------------------------------------------------------------------------
.text:0000000000006962                 align 10h
.text:0000000000006970
.text:0000000000006970 ; =============== S U B R O U T I N E =======================================
.text:0000000000006970
.text:0000000000006970 ; Attributes: info_from_lumina
.text:0000000000006970
.text:0000000000006970 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000006970                 public xrealloc
.text:0000000000006970 xrealloc        proc near               ; CODE XREF: new_control_record+86↑p
.text:0000000000006970                                         ; quotearg_n_options+6E↑p ...
.text:0000000000006970 ; __unwind {
.text:0000000000006970                 test    rsi, rsi
.text:0000000000006973                 push    rbx
.text:0000000000006974                 mov     rbx, rsi
.text:0000000000006977                 jnz     short loc_697E
.text:0000000000006979                 test    rdi, rdi
.text:000000000000697C                 jnz     short loc_6998
.text:000000000000697E
.text:000000000000697E loc_697E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000697E                 mov     rsi, rbx        ; size
.text:0000000000006981                 call    _realloc
.text:0000000000006986                 test    rax, rax
.text:0000000000006989                 jnz     short loc_6990
.text:000000000000698B                 test    rbx, rbx
.text:000000000000698E                 jnz     short loc_69A1
.text:0000000000006990
.text:0000000000006990 loc_6990:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000006990                 pop     rbx
.text:0000000000006991                 retn
.text:0000000000006991 ; ---------------------------------------------------------------------------
.text:0000000000006992                 align 8
.text:0000000000006998
.text:0000000000006998 loc_6998:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000006998                 call    _free
.text:000000000000699D                 xor     eax, eax
.text:000000000000699F                 pop     rbx
.text:00000000000069A0                 retn
.text:00000000000069A1 ; ---------------------------------------------------------------------------
.text:00000000000069A1
.text:00000000000069A1 loc_69A1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000069A1                 call    xalloc_die
.text:00000000000069A1 ; } // starts at 6970
.text:00000000000069A1 xrealloc        endp
.text:00000000000069A1
.text:00000000000069A1 ; ---------------------------------------------------------------------------
.text:00000000000069A6                 align 10h
.text:00000000000069B0
.text:00000000000069B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069B0
.text:00000000000069B0 ; Attributes: info_from_lumina
.text:00000000000069B0
.text:00000000000069B0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000069B0                 public xnrealloc
.text:00000000000069B0 xnrealloc       proc near
.text:00000000000069B0 ; __unwind {
.text:00000000000069B0                 mov     rax, rsi
.text:00000000000069B3                 mul     rdx
.text:00000000000069B6                 mov     rsi, rax
.text:00000000000069B9                 seto    al
.text:00000000000069BC                 test    rsi, rsi
.text:00000000000069BF                 js      short loc_69CB
.text:00000000000069C1                 movzx   eax, al
.text:00000000000069C4                 test    rax, rax
.text:00000000000069C7                 jnz     short loc_69CB
.text:00000000000069C9                 jmp     short xrealloc
.text:00000000000069CB ; ---------------------------------------------------------------------------
.text:00000000000069CB
.text:00000000000069CB loc_69CB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000069CB                                         ; xnrealloc+17↑j
.text:00000000000069CB                 sub     rsp, 8
.text:00000000000069CF                 call    xalloc_die
.text:00000000000069CF ; } // starts at 69B0
.text:00000000000069CF xnrealloc       endp
.text:00000000000069CF
.text:00000000000069CF ; ---------------------------------------------------------------------------
.text:00000000000069D4                 align 20h
.text:00000000000069E0
.text:00000000000069E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069E0
.text:00000000000069E0 ; Attributes: info_from_lumina
.text:00000000000069E0
.text:00000000000069E0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000069E0                 public x2nrealloc
.text:00000000000069E0 x2nrealloc      proc near
.text:00000000000069E0 ; __unwind {
.text:00000000000069E0                 test    rdi, rdi
.text:00000000000069E3                 mov     r9, rdx
.text:00000000000069E6                 mov     rcx, [rsi]
.text:00000000000069E9                 jz      short loc_6A20
.text:00000000000069EB                 xor     edx, edx
.text:00000000000069ED                 mov     rax, 5555555555555554h
.text:00000000000069F7                 div     r9
.text:00000000000069FA                 cmp     rax, rcx
.text:00000000000069FD                 jbe     short loc_6A3B
.text:00000000000069FF                 mov     rax, rcx
.text:0000000000006A02                 shr     rax, 1
.text:0000000000006A05                 lea     rcx, [rax+rcx+1]
.text:0000000000006A0A
.text:0000000000006A0A loc_6A0A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000006A0A                 mov     [rsi], rcx
.text:0000000000006A0D                 imul    rcx, r9
.text:0000000000006A11                 mov     rsi, rcx
.text:0000000000006A14                 jmp     xrealloc
.text:0000000000006A14 ; ---------------------------------------------------------------------------
.text:0000000000006A19                 align 20h
.text:0000000000006A20
.text:0000000000006A20 loc_6A20:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000006A20                 test    rcx, rcx
.text:0000000000006A23                 jz      short loc_6A48
.text:0000000000006A25
.text:0000000000006A25 loc_6A25:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000006A25                 mov     rax, rcx
.text:0000000000006A28                 mul     r9
.text:0000000000006A2B                 seto    dl
.text:0000000000006A2E                 test    rax, rax
.text:0000000000006A31                 movzx   edx, dl
.text:0000000000006A34                 js      short loc_6A3B
.text:0000000000006A36                 test    rdx, rdx
.text:0000000000006A39                 jz      short loc_6A0A
.text:0000000000006A3B
.text:0000000000006A3B loc_6A3B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000006A3B                                         ; x2nrealloc+54↑j
.text:0000000000006A3B                 sub     rsp, 8
.text:0000000000006A3F                 call    xalloc_die
.text:0000000000006A3F ; ---------------------------------------------------------------------------
.text:0000000000006A44                 align 8
.text:0000000000006A48
.text:0000000000006A48 loc_6A48:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000006A48                 xor     edx, edx
.text:0000000000006A4A                 mov     eax, 80h
.text:0000000000006A4F                 xor     r8d, r8d
.text:0000000000006A52                 div     r9
.text:0000000000006A55                 test    rax, rax
.text:0000000000006A58                 setz    r8b
.text:0000000000006A5C                 lea     rcx, [r8+rax]
.text:0000000000006A60                 jmp     short loc_6A25
.text:0000000000006A60 ; } // starts at 69E0
.text:0000000000006A60 x2nrealloc      endp
.text:0000000000006A60
.text:0000000000006A60 ; ---------------------------------------------------------------------------
.text:0000000000006A62                 align 10h
.text:0000000000006A70
.text:0000000000006A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A70
.text:0000000000006A70 ; Attributes: info_from_lumina
.text:0000000000006A70
.text:0000000000006A70 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000006A70                 public x2realloc
.text:0000000000006A70 x2realloc       proc near
.text:0000000000006A70 ; __unwind {
.text:0000000000006A70                 test    rdi, rdi
.text:0000000000006A73                 mov     rax, [rsi]
.text:0000000000006A76                 jz      short loc_6AA0
.text:0000000000006A78                 mov     rdx, 5555555555555553h
.text:0000000000006A82                 cmp     rax, rdx
.text:0000000000006A85                 ja      short loc_6AB1
.text:0000000000006A87                 mov     rdx, rax
.text:0000000000006A8A                 shr     rdx, 1
.text:0000000000006A8D                 lea     rax, [rdx+rax+1]
.text:0000000000006A92
.text:0000000000006A92 loc_6A92:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000006A92                 mov     [rsi], rax
.text:0000000000006A95                 mov     rsi, rax
.text:0000000000006A98                 jmp     xrealloc
.text:0000000000006A98 ; ---------------------------------------------------------------------------
.text:0000000000006A9D                 align 20h
.text:0000000000006AA0
.text:0000000000006AA0 loc_6AA0:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000006AA0                 test    rax, rax
.text:0000000000006AA3                 mov     edx, 80h
.text:0000000000006AA8                 cmovz   rax, rdx
.text:0000000000006AAC                 test    rax, rax
.text:0000000000006AAF                 jns     short loc_6A92
.text:0000000000006AB1
.text:0000000000006AB1 loc_6AB1:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000006AB1                 sub     rsp, 8
.text:0000000000006AB5                 call    xalloc_die
.text:0000000000006AB5 ; } // starts at 6A70
.text:0000000000006AB5 x2realloc       endp
.text:0000000000006AB5
.text:0000000000006AB5 ; ---------------------------------------------------------------------------
.text:0000000000006ABA                 align 20h
.text:0000000000006AC0
.text:0000000000006AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AC0
.text:0000000000006AC0
.text:0000000000006AC0 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000006AC0                 public xzalloc
.text:0000000000006AC0 xzalloc         proc near
.text:0000000000006AC0 ; __unwind {
.text:0000000000006AC0                 push    rbx
.text:0000000000006AC1                 mov     rbx, rdi
.text:0000000000006AC4                 call    xmalloc
.text:0000000000006AC9                 mov     rdx, rbx        ; n
.text:0000000000006ACC                 xor     esi, esi        ; c
.text:0000000000006ACE                 mov     rdi, rax        ; s
.text:0000000000006AD1                 pop     rbx
.text:0000000000006AD2                 jmp     _memset
.text:0000000000006AD2 ; } // starts at 6AC0
.text:0000000000006AD2 xzalloc         endp
.text:0000000000006AD2
.text:0000000000006AD2 ; ---------------------------------------------------------------------------
.text:0000000000006AD7                 align 20h
.text:0000000000006AE0
.text:0000000000006AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AE0
.text:0000000000006AE0 ; Attributes: info_from_lumina
.text:0000000000006AE0
.text:0000000000006AE0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000006AE0                 public xcalloc
.text:0000000000006AE0 xcalloc         proc near
.text:0000000000006AE0 ; __unwind {
.text:0000000000006AE0                 mov     rax, rdi
.text:0000000000006AE3                 sub     rsp, 8
.text:0000000000006AE7                 mul     rsi
.text:0000000000006AEA                 seto    dl
.text:0000000000006AED                 test    rax, rax
.text:0000000000006AF0                 js      short loc_6B09
.text:0000000000006AF2                 movzx   edx, dl
.text:0000000000006AF5                 test    rdx, rdx
.text:0000000000006AF8                 jnz     short loc_6B09
.text:0000000000006AFA                 call    _calloc
.text:0000000000006AFF                 test    rax, rax
.text:0000000000006B02                 jz      short loc_6B09
.text:0000000000006B04                 add     rsp, 8
.text:0000000000006B08                 retn
.text:0000000000006B09 ; ---------------------------------------------------------------------------
.text:0000000000006B09
.text:0000000000006B09 loc_6B09:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000006B09                                         ; xcalloc+18↑j ...
.text:0000000000006B09                 call    xalloc_die
.text:0000000000006B09 ; } // starts at 6AE0
.text:0000000000006B09 xcalloc         endp
.text:0000000000006B09
.text:0000000000006B09 ; ---------------------------------------------------------------------------
.text:0000000000006B0E                 align 10h
.text:0000000000006B10
.text:0000000000006B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B10
.text:0000000000006B10 ; Attributes: info_from_lumina
.text:0000000000006B10
.text:0000000000006B10 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000006B10                 public xmemdup
.text:0000000000006B10 xmemdup         proc near               ; CODE XREF: load_buffer_part_5+2D6↑p
.text:0000000000006B10                                         ; clone_quoting_options+28↑p ...
.text:0000000000006B10 ; __unwind {
.text:0000000000006B10                 push    rbp
.text:0000000000006B11                 push    rbx
.text:0000000000006B12                 mov     rbp, rdi
.text:0000000000006B15                 mov     rdi, rsi
.text:0000000000006B18                 mov     rbx, rsi
.text:0000000000006B1B                 sub     rsp, 8
.text:0000000000006B1F                 call    xmalloc
.text:0000000000006B24                 add     rsp, 8
.text:0000000000006B28                 mov     rdx, rbx        ; n
.text:0000000000006B2B                 mov     rsi, rbp        ; src
.text:0000000000006B2E                 pop     rbx
.text:0000000000006B2F                 pop     rbp
.text:0000000000006B30                 mov     rdi, rax        ; dest
.text:0000000000006B33                 jmp     _memcpy
.text:0000000000006B33 ; } // starts at 6B10
.text:0000000000006B33 xmemdup         endp
.text:0000000000006B33
.text:0000000000006B33 ; ---------------------------------------------------------------------------
.text:0000000000006B38                 align 20h
.text:0000000000006B40
.text:0000000000006B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B40
.text:0000000000006B40
.text:0000000000006B40 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000006B40                 public xstrdup
.text:0000000000006B40 xstrdup         proc near
.text:0000000000006B40 ; __unwind {
.text:0000000000006B40                 push    rbx
.text:0000000000006B41                 mov     rbx, rdi
.text:0000000000006B44                 call    _strlen
.text:0000000000006B49                 mov     rdi, rbx        ; src
.text:0000000000006B4C                 lea     rsi, [rax+1]    ; n
.text:0000000000006B50                 pop     rbx
.text:0000000000006B51                 jmp     short xmemdup
.text:0000000000006B51 ; } // starts at 6B40
.text:0000000000006B51 xstrdup         endp
.text:0000000000006B51
.text:0000000000006B51 ; ---------------------------------------------------------------------------
.text:0000000000006B53                 align 20h
.text:0000000000006B60
.text:0000000000006B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B60
.text:0000000000006B60
.text:0000000000006B60                 public xnumtoimax
.text:0000000000006B60 xnumtoimax      proc near               ; CODE XREF: xdectoumax+17↓p
.text:0000000000006B60
.text:0000000000006B60 var_48          = qword ptr -48h
.text:0000000000006B60 var_40          = qword ptr -40h
.text:0000000000006B60 arg_0           = dword ptr  8
.text:0000000000006B60
.text:0000000000006B60 ; __unwind {
.text:0000000000006B60                 push    r15
.text:0000000000006B62                 push    r14
.text:0000000000006B64                 mov     r15, rcx
.text:0000000000006B67                 push    r13
.text:0000000000006B69                 push    r12
.text:0000000000006B6B                 mov     r14, rdx
.text:0000000000006B6E                 push    rbp
.text:0000000000006B6F                 push    rbx
.text:0000000000006B70                 mov     edx, esi
.text:0000000000006B72                 xor     esi, esi
.text:0000000000006B74                 mov     r12, rdi
.text:0000000000006B77                 mov     r13, r9
.text:0000000000006B7A                 sub     rsp, 18h
.text:0000000000006B7E                 mov     rcx, rsp
.text:0000000000006B81                 mov     ebx, [rsp+48h+arg_0]
.text:0000000000006B85                 mov     rax, fs:28h
.text:0000000000006B8E                 mov     [rsp+48h+var_40], rax
.text:0000000000006B93                 xor     eax, eax
.text:0000000000006B95                 call    xstrtoimax
.text:0000000000006B9A                 test    eax, eax
.text:0000000000006B9C                 jnz     loc_6C30
.text:0000000000006BA2                 mov     rbp, [rsp+48h+var_48]
.text:0000000000006BA6                 cmp     rbp, r14
.text:0000000000006BA9                 jl      short loc_6BB0
.text:0000000000006BAB                 cmp     rbp, r15
.text:0000000000006BAE                 jle     short loc_6C06
.text:0000000000006BB0
.text:0000000000006BB0 loc_6BB0:                               ; CODE XREF: xnumtoimax+49↑j
.text:0000000000006BB0                 call    ___errno_location
.text:0000000000006BB5                 cmp     rbp, 3FFFFFFFh
.text:0000000000006BBC                 mov     r14, rax
.text:0000000000006BBF                 jle     loc_6C50
.text:0000000000006BC5
.text:0000000000006BC5 loc_6BC5:                               ; CODE XREF: xnumtoimax+DD↓j
.text:0000000000006BC5                 mov     dword ptr [r14], 4Bh ; 'K'
.text:0000000000006BCC
.text:0000000000006BCC loc_6BCC:                               ; CODE XREF: xnumtoimax+E2↓j
.text:0000000000006BCC                                         ; xnumtoimax+EA↓j ...
.text:0000000000006BCC                 mov     rdi, r12
.text:0000000000006BCF                 call    quote
.text:0000000000006BD4                 mov     esi, [r14]
.text:0000000000006BD7                 mov     r8, rax
.text:0000000000006BDA                 mov     eax, 0
.text:0000000000006BDF                 lea     rdx, aS         ; "%s: "
.text:0000000000006BE6                 mov     rcx, r13
.text:0000000000006BE9                 cmp     esi, 16h
.text:0000000000006BEC                 cmovz   esi, eax        ; errnum
.text:0000000000006BEF                 test    ebx, ebx
.text:0000000000006BF1                 mov     eax, 1
.text:0000000000006BF6                 cmovz   ebx, eax
.text:0000000000006BF9                 xor     eax, eax
.text:0000000000006BFB                 mov     edi, ebx        ; status
.text:0000000000006BFD                 call    _error
.text:0000000000006C02                 mov     rbp, [rsp+48h+var_48]
.text:0000000000006C06
.text:0000000000006C06 loc_6C06:                               ; CODE XREF: xnumtoimax+4E↑j
.text:0000000000006C06                 mov     rdx, [rsp+48h+var_40]
.text:0000000000006C0B                 xor     rdx, fs:28h
.text:0000000000006C14                 mov     rax, rbp
.text:0000000000006C17                 jnz     short loc_6C6C
.text:0000000000006C19                 add     rsp, 18h
.text:0000000000006C1D                 pop     rbx
.text:0000000000006C1E                 pop     rbp
.text:0000000000006C1F                 pop     r12
.text:0000000000006C21                 pop     r13
.text:0000000000006C23                 pop     r14
.text:0000000000006C25                 pop     r15
.text:0000000000006C27                 retn
.text:0000000000006C27 ; ---------------------------------------------------------------------------
.text:0000000000006C28                 align 10h
.text:0000000000006C30
.text:0000000000006C30 loc_6C30:                               ; CODE XREF: xnumtoimax+3C↑j
.text:0000000000006C30                 mov     ebp, eax
.text:0000000000006C32                 call    ___errno_location
.text:0000000000006C37                 cmp     ebp, 1
.text:0000000000006C3A                 mov     r14, rax
.text:0000000000006C3D                 jz      short loc_6BC5
.text:0000000000006C3F                 cmp     ebp, 3
.text:0000000000006C42                 jnz     short loc_6BCC
.text:0000000000006C44                 mov     dword ptr [rax], 0
.text:0000000000006C4A                 jmp     short loc_6BCC
.text:0000000000006C4A ; ---------------------------------------------------------------------------
.text:0000000000006C4C                 align 10h
.text:0000000000006C50
.text:0000000000006C50 loc_6C50:                               ; CODE XREF: xnumtoimax+5F↑j
.text:0000000000006C50                 cmp     rbp, 0FFFFFFFFBFFFFFFFh
.text:0000000000006C57                 mov     eax, 22h ; '"'
.text:0000000000006C5C                 mov     edx, 4Bh ; 'K'
.text:0000000000006C61                 cmovle  eax, edx
.text:0000000000006C64                 mov     [r14], eax
.text:0000000000006C67                 jmp     loc_6BCC
.text:0000000000006C6C ; ---------------------------------------------------------------------------
.text:0000000000006C6C
.text:0000000000006C6C loc_6C6C:                               ; CODE XREF: xnumtoimax+B7↑j
.text:0000000000006C6C                 call    ___stack_chk_fail
.text:0000000000006C6C ; } // starts at 6B60
.text:0000000000006C6C xnumtoimax      endp
.text:0000000000006C6C
.text:0000000000006C6C ; ---------------------------------------------------------------------------
.text:0000000000006C71                 align 20h
.text:0000000000006C80
.text:0000000000006C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C80
.text:0000000000006C80 ; Attributes: info_from_lumina
.text:0000000000006C80
.text:0000000000006C80 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000006C80                 public xdectoumax
.text:0000000000006C80 xdectoumax      proc near               ; CODE XREF: main+183↑p
.text:0000000000006C80 ; __unwind {
.text:0000000000006C80                 sub     rsp, 10h
.text:0000000000006C84                 push    r9
.text:0000000000006C86                 mov     r9, r8
.text:0000000000006C89                 mov     r8, rcx
.text:0000000000006C8C                 mov     rcx, rdx
.text:0000000000006C8F                 mov     rdx, rsi
.text:0000000000006C92                 mov     esi, 0Ah
.text:0000000000006C97                 call    xnumtoimax
.text:0000000000006C9C                 add     rsp, 18h
.text:0000000000006CA0                 retn
.text:0000000000006CA0 ; } // starts at 6C80
.text:0000000000006CA0 xdectoumax      endp
.text:0000000000006CA0
.text:0000000000006CA0 ; ---------------------------------------------------------------------------
.text:0000000000006CA1                 align 10h
.text:0000000000006CB0
.text:0000000000006CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006CB0
.text:0000000000006CB0
.text:0000000000006CB0 ; __int64 __fastcall xstrtoimax(char *nptr)
.text:0000000000006CB0                 public xstrtoimax
.text:0000000000006CB0 xstrtoimax      proc near               ; CODE XREF: main+4C3↑p
.text:0000000000006CB0                                         ; xnumtoimax+35↑p
.text:0000000000006CB0
.text:0000000000006CB0 var_50          = qword ptr -50h
.text:0000000000006CB0 endptr          = qword ptr -48h
.text:0000000000006CB0 var_40          = qword ptr -40h
.text:0000000000006CB0
.text:0000000000006CB0 ; __unwind {
.text:0000000000006CB0                 push    r15
.text:0000000000006CB2                 push    r14
.text:0000000000006CB4                 push    r13
.text:0000000000006CB6                 push    r12
.text:0000000000006CB8                 push    rbp
.text:0000000000006CB9                 push    rbx
.text:0000000000006CBA                 sub     rsp, 28h
.text:0000000000006CBE                 mov     rax, fs:28h
.text:0000000000006CC7                 mov     [rsp+58h+var_40], rax
.text:0000000000006CCC                 xor     eax, eax
.text:0000000000006CCE                 cmp     edx, 24h ; '$'
.text:0000000000006CD1                 ja      loc_733F
.text:0000000000006CD7                 lea     rax, [rsp+58h+endptr]
.text:0000000000006CDC                 test    rsi, rsi
.text:0000000000006CDF                 mov     rbx, rsi
.text:0000000000006CE2                 mov     r12, rdi
.text:0000000000006CE5                 mov     ebp, edx
.text:0000000000006CE7                 mov     r14, rcx
.text:0000000000006CEA                 cmovz   rbx, rax
.text:0000000000006CEE                 mov     r15, r8
.text:0000000000006CF1                 call    ___errno_location
.text:0000000000006CF6                 xor     ecx, ecx        ; group
.text:0000000000006CF8                 mov     edx, ebp        ; base
.text:0000000000006CFA                 mov     dword ptr [rax], 0
.text:0000000000006D00                 mov     rsi, rbx        ; endptr
.text:0000000000006D03                 mov     rdi, r12        ; nptr
.text:0000000000006D06                 mov     r13, rax
.text:0000000000006D09                 call    ___strtol_internal
.text:0000000000006D0E                 mov     rcx, [rbx]
.text:0000000000006D11                 mov     rbp, rax
.text:0000000000006D14                 cmp     rcx, r12
.text:0000000000006D17                 jz      short loc_6D78
.text:0000000000006D19                 mov     eax, [r13+0]
.text:0000000000006D1D                 test    eax, eax
.text:0000000000006D1F                 jnz     short loc_6D60
.text:0000000000006D21                 xor     r12d, r12d
.text:0000000000006D24
.text:0000000000006D24 loc_6D24:                               ; CODE XREF: xstrtoimax+C1↓j
.text:0000000000006D24                 test    r15, r15
.text:0000000000006D27                 jz      short loc_6D36
.text:0000000000006D29                 movzx   r13d, byte ptr [rcx]
.text:0000000000006D2D                 test    r13b, r13b
.text:0000000000006D30                 jnz     loc_6DB3
.text:0000000000006D36
.text:0000000000006D36 loc_6D36:                               ; CODE XREF: xstrtoimax+77↑j
.text:0000000000006D36                                         ; xstrtoimax+226↓j
.text:0000000000006D36                 mov     [r14], rbp
.text:0000000000006D39
.text:0000000000006D39 loc_6D39:                               ; CODE XREF: xstrtoimax+B9↓j
.text:0000000000006D39                                         ; xstrtoimax+E3↓j ...
.text:0000000000006D39                 mov     rdi, [rsp+58h+var_40]
.text:0000000000006D3E                 xor     rdi, fs:28h
.text:0000000000006D47                 mov     eax, r12d
.text:0000000000006D4A                 jnz     loc_735E
.text:0000000000006D50                 add     rsp, 28h
.text:0000000000006D54                 pop     rbx
.text:0000000000006D55                 pop     rbp
.text:0000000000006D56                 pop     r12
.text:0000000000006D58                 pop     r13
.text:0000000000006D5A                 pop     r14
.text:0000000000006D5C                 pop     r15
.text:0000000000006D5E                 retn
.text:0000000000006D5E ; ---------------------------------------------------------------------------
.text:0000000000006D5F                 align 20h
.text:0000000000006D60
.text:0000000000006D60 loc_6D60:                               ; CODE XREF: xstrtoimax+6F↑j
.text:0000000000006D60                 cmp     eax, 22h ; '"'
.text:0000000000006D63                 mov     r12d, 4
.text:0000000000006D69                 jnz     short loc_6D39
.text:0000000000006D6B                 mov     r12d, 1
.text:0000000000006D71                 jmp     short loc_6D24
.text:0000000000006D71 ; ---------------------------------------------------------------------------
.text:0000000000006D73                 align 8
.text:0000000000006D78
.text:0000000000006D78 loc_6D78:                               ; CODE XREF: xstrtoimax+67↑j
.text:0000000000006D78                 test    r15, r15
.text:0000000000006D7B                 jz      loc_7210
.text:0000000000006D81                 movzx   r13d, byte ptr [rcx]
.text:0000000000006D85                 mov     [rsp+58h+var_50], rcx
.text:0000000000006D8A                 mov     r12d, 4
.text:0000000000006D90                 test    r13b, r13b
.text:0000000000006D93                 jz      short loc_6D39
.text:0000000000006D95                 movsx   esi, r13b       ; c
.text:0000000000006D99                 mov     rdi, r15        ; s
.text:0000000000006D9C                 call    _strchr
.text:0000000000006DA1                 test    rax, rax
.text:0000000000006DA4                 mov     rcx, [rsp+58h+var_50]
.text:0000000000006DA9                 jz      short loc_6D39
.text:0000000000006DAB                 mov     ebp, 1
.text:0000000000006DB0                 xor     r12d, r12d
.text:0000000000006DB3
.text:0000000000006DB3 loc_6DB3:                               ; CODE XREF: xstrtoimax+80↑j
.text:0000000000006DB3                 movsx   esi, r13b       ; c
.text:0000000000006DB7                 mov     rdi, r15        ; s
.text:0000000000006DBA                 mov     [rsp+58h+var_50], rcx
.text:0000000000006DBF                 call    _strchr
.text:0000000000006DC4                 test    rax, rax
.text:0000000000006DC7                 mov     rcx, [rsp+58h+var_50]
.text:0000000000006DCC                 jz      short def_6E5E  ; jumptable 0000000000006E5E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000006DCE                 lea     eax, [r13-45h]
.text:0000000000006DD2                 cmp     al, 2Fh ; '/'
.text:0000000000006DD4                 ja      short loc_6E38
.text:0000000000006DD6                 mov     rdx, 814400308945h
.text:0000000000006DE0                 bt      rdx, rax
.text:0000000000006DE4                 jnb     short loc_6E38
.text:0000000000006DE6                 mov     esi, 30h ; '0'  ; c
.text:0000000000006DEB                 mov     rdi, r15        ; s
.text:0000000000006DEE                 mov     [rsp+58h+var_50], rcx
.text:0000000000006DF3                 call    _strchr
.text:0000000000006DF8                 test    rax, rax
.text:0000000000006DFB                 mov     rcx, [rsp+58h+var_50]
.text:0000000000006E00                 jz      short loc_6E38
.text:0000000000006E02                 movzx   eax, byte ptr [rcx+1]
.text:0000000000006E06                 cmp     al, 44h ; 'D'
.text:0000000000006E08                 jz      short loc_6E16
.text:0000000000006E0A                 cmp     al, 69h ; 'i'
.text:0000000000006E0C                 jz      loc_72F8
.text:0000000000006E12                 cmp     al, 42h ; 'B'
.text:0000000000006E14                 jnz     short loc_6E38
.text:0000000000006E16
.text:0000000000006E16 loc_6E16:                               ; CODE XREF: xstrtoimax+158↑j
.text:0000000000006E16                 mov     edi, 2
.text:0000000000006E1B                 mov     eax, 3E8h
.text:0000000000006E20                 jmp     short loc_6E42
.text:0000000000006E20 ; ---------------------------------------------------------------------------
.text:0000000000006E22                 align 8
.text:0000000000006E28
.text:0000000000006E28 def_6E5E:                               ; CODE XREF: xstrtoimax+11C↑j
.text:0000000000006E28                                         ; xstrtoimax+19A↓j ...
.text:0000000000006E28                 mov     [r14], rbp      ; jumptable 0000000000006E5E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000006E2B                 or      r12d, 2
.text:0000000000006E2F                 jmp     loc_6D39
.text:0000000000006E2F ; ---------------------------------------------------------------------------
.text:0000000000006E34                 align 8
.text:0000000000006E38
.text:0000000000006E38 loc_6E38:                               ; CODE XREF: xstrtoimax+124↑j
.text:0000000000006E38                                         ; xstrtoimax+134↑j ...
.text:0000000000006E38                 mov     edi, 1
.text:0000000000006E3D                 mov     eax, 400h
.text:0000000000006E42
.text:0000000000006E42 loc_6E42:                               ; CODE XREF: xstrtoimax+170↑j
.text:0000000000006E42                                         ; xstrtoimax+65B↓j
.text:0000000000006E42                 sub     r13d, 42h ; 'B' ; switch 54 cases
.text:0000000000006E46                 cmp     r13b, 35h
.text:0000000000006E4A                 ja      short def_6E5E  ; jumptable 0000000000006E5E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000006E4C                 lea     rsi, jpt_6E5E
.text:0000000000006E53                 movzx   r13d, r13b
.text:0000000000006E57                 movsxd  rdx, ds:(jpt_6E5E - 17438h)[rsi+r13*4]
.text:0000000000006E5B                 add     rdx, rsi
.text:0000000000006E5E                 jmp     rdx             ; switch jump
.text:0000000000006E60 ; ---------------------------------------------------------------------------
.text:0000000000006E60
.text:0000000000006E60 loc_6E60:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000006E60                                         ; DATA XREF: .rodata:jpt_6E5E↓o
.text:0000000000006E60                 mov     r8, 8000000000000000h ; jumptable 0000000000006E5E cases 77,109
.text:0000000000006E6A                 movsxd  rsi, eax
.text:0000000000006E6D                 mov     rax, r8
.text:0000000000006E70                 cqo
.text:0000000000006E72                 idiv    rsi
.text:0000000000006E75                 cmp     rbp, rax
.text:0000000000006E78                 mov     r9, rax
.text:0000000000006E7B                 jl      loc_7325
.text:0000000000006E81                 mov     r10, 7FFFFFFFFFFFFFFFh
.text:0000000000006E8B                 mov     rax, r10
.text:0000000000006E8E                 cqo
.text:0000000000006E90                 idiv    rsi
.text:0000000000006E93                 cmp     rbp, rax
.text:0000000000006E96                 jg      loc_7332
.text:0000000000006E9C                 imul    rbp, rsi
.text:0000000000006EA0                 cmp     r9, rbp
.text:0000000000006EA3                 jg      loc_7325
.text:0000000000006EA9                 cmp     rax, rbp
.text:0000000000006EAC                 jl      loc_7332
.text:0000000000006EB2                 imul    rbp, rsi
.text:0000000000006EB6                 xor     eax, eax
.text:0000000000006EB8
.text:0000000000006EB8 loc_6EB8:                               ; CODE XREF: xstrtoimax+67D↓j
.text:0000000000006EB8                                         ; xstrtoimax+68A↓j
.text:0000000000006EB8                 or      r12d, eax
.text:0000000000006EBB                 nop     dword ptr [rax+rax+00h]
.text:0000000000006EC0
.text:0000000000006EC0 loc_6EC0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000006EC0                                         ; xstrtoimax+259↓j ...
.text:0000000000006EC0                 movsxd  rax, edi        ; jumptable 0000000000006E5E case 99
.text:0000000000006EC3                 add     rcx, rax
.text:0000000000006EC6                 mov     eax, r12d
.text:0000000000006EC9                 or      eax, 2
.text:0000000000006ECC                 mov     [rbx], rcx
.text:0000000000006ECF                 cmp     byte ptr [rcx], 0
.text:0000000000006ED2                 cmovnz  r12d, eax
.text:0000000000006ED6                 jmp     loc_6D36
.text:0000000000006ED6 ; ---------------------------------------------------------------------------
.text:0000000000006EDB                 align 20h
.text:0000000000006EE0
.text:0000000000006EE0 loc_6EE0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000006EE0                                         ; DATA XREF: .rodata:jpt_6E5E↓o
.text:0000000000006EE0                 mov     rax, 0C000000000000000h ; jumptable 0000000000006E5E case 119
.text:0000000000006EEA                 cmp     rbp, rax
.text:0000000000006EED                 jl      loc_7220
.text:0000000000006EF3                 mov     rax, 3FFFFFFFFFFFFFFFh
.text:0000000000006EFD                 cmp     rbp, rax
.text:0000000000006F00                 jg      loc_72E0
.text:0000000000006F06                 add     rbp, rbp
.text:0000000000006F09                 jmp     short loc_6EC0  ; jumptable 0000000000006E5E case 99
.text:0000000000006F09 ; ---------------------------------------------------------------------------
.text:0000000000006F0B                 align 10h
.text:0000000000006F10
.text:0000000000006F10 loc_6F10:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000006F10                                         ; DATA XREF: .rodata:jpt_6E5E↓o
.text:0000000000006F10                 mov     rax, 0FFC0000000000000h ; jumptable 0000000000006E5E case 98
.text:0000000000006F1A                 cmp     rbp, rax
.text:0000000000006F1D                 jl      loc_7220
.text:0000000000006F23                 mov     rax, 3FFFFFFFFFFFFFh
.text:0000000000006F2D                 cmp     rbp, rax
.text:0000000000006F30                 jg      loc_72E0
.text:0000000000006F36                 shl     rbp, 9
.text:0000000000006F3A                 jmp     short loc_6EC0  ; jumptable 0000000000006E5E case 99
.text:0000000000006F3A ; ---------------------------------------------------------------------------
.text:0000000000006F3C                 align 20h
.text:0000000000006F40
.text:0000000000006F40 loc_6F40:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000006F40                                         ; DATA XREF: .rodata:jpt_6E5E↓o
.text:0000000000006F40                 movsxd  rsi, eax        ; jumptable 0000000000006E5E case 90
.text:0000000000006F43                 mov     rax, 8000000000000000h
.text:0000000000006F4D                 mov     r8d, 7
.text:0000000000006F53                 cqo
.text:0000000000006F55                 xor     r11d, r11d
.text:0000000000006F58                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000006F62                 idiv    rsi
.text:0000000000006F65                 mov     r10, rax
.text:0000000000006F68                 jmp     short loc_6F8F
.text:0000000000006F68 ; ---------------------------------------------------------------------------
.text:0000000000006F6A                 align 10h
.text:0000000000006F70
.text:0000000000006F70 loc_6F70:                               ; CODE XREF: xstrtoimax+2E2↓j
.text:0000000000006F70                 mov     rax, r9
.text:0000000000006F73                 cqo
.text:0000000000006F75                 idiv    rsi
.text:0000000000006F78                 cmp     rax, rbp
.text:0000000000006F7B                 jl      loc_7268
.text:0000000000006F81                 imul    rbp, rsi
.text:0000000000006F85
.text:0000000000006F85 loc_6F85:                               ; CODE XREF: xstrtoimax+2F4↓j
.text:0000000000006F85                                         ; xstrtoimax+5C8↓j
.text:0000000000006F85                 sub     r8d, 1
.text:0000000000006F89                 jz      loc_70B0
.text:0000000000006F8F
.text:0000000000006F8F loc_6F8F:                               ; CODE XREF: xstrtoimax+2B8↑j
.text:0000000000006F8F                 cmp     r10, rbp
.text:0000000000006F92                 jle     short loc_6F70
.text:0000000000006F94                 mov     r11d, 1
.text:0000000000006F9A                 mov     rbp, 8000000000000000h
.text:0000000000006FA4                 jmp     short loc_6F85
.text:0000000000006FA4 ; ---------------------------------------------------------------------------
.text:0000000000006FA6                 align 10h
.text:0000000000006FB0
.text:0000000000006FB0 loc_6FB0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000006FB0                                         ; DATA XREF: .rodata:jpt_6E5E↓o
.text:0000000000006FB0                 movsxd  rsi, eax        ; jumptable 0000000000006E5E case 89
.text:0000000000006FB3                 mov     rax, 8000000000000000h
.text:0000000000006FBD                 mov     r8d, 8
.text:0000000000006FC3                 cqo
.text:0000000000006FC5                 xor     r11d, r11d
.text:0000000000006FC8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000006FD2                 idiv    rsi
.text:0000000000006FD5                 mov     r10, rax
.text:0000000000006FD8                 jmp     short loc_6FFF
.text:0000000000006FD8 ; ---------------------------------------------------------------------------
.text:0000000000006FDA                 align 20h
.text:0000000000006FE0
.text:0000000000006FE0 loc_6FE0:                               ; CODE XREF: xstrtoimax+352↓j
.text:0000000000006FE0                 mov     rax, r9
.text:0000000000006FE3                 cqo
.text:0000000000006FE5                 idiv    rsi
.text:0000000000006FE8                 cmp     rax, rbp
.text:0000000000006FEB                 jl      loc_7238
.text:0000000000006FF1                 imul    rbp, rsi
.text:0000000000006FF5
.text:0000000000006FF5 loc_6FF5:                               ; CODE XREF: xstrtoimax+364↓j
.text:0000000000006FF5                                         ; xstrtoimax+598↓j
.text:0000000000006FF5                 sub     r8d, 1
.text:0000000000006FF9                 jz      loc_70B0
.text:0000000000006FFF
.text:0000000000006FFF loc_6FFF:                               ; CODE XREF: xstrtoimax+328↑j
.text:0000000000006FFF                 cmp     r10, rbp
.text:0000000000007002                 jle     short loc_6FE0
.text:0000000000007004                 mov     r11d, 1
.text:000000000000700A                 mov     rbp, 8000000000000000h
.text:0000000000007014                 jmp     short loc_6FF5
.text:0000000000007014 ; ---------------------------------------------------------------------------
.text:0000000000007016                 align 20h
.text:0000000000007020
.text:0000000000007020 loc_7020:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000007020                                         ; DATA XREF: .rodata:jpt_6E5E↓o
.text:0000000000007020                 mov     r8, 8000000000000000h ; jumptable 0000000000006E5E cases 75,107
.text:000000000000702A                 movsxd  rsi, eax
.text:000000000000702D                 mov     rax, r8
.text:0000000000007030                 cqo
.text:0000000000007032                 idiv    rsi
.text:0000000000007035                 cmp     rbp, rax
.text:0000000000007038                 jl      loc_7220
.text:000000000000703E                 sub     r8, 1
.text:0000000000007042                 mov     rax, r8
.text:0000000000007045                 cqo
.text:0000000000007047                 idiv    rsi
.text:000000000000704A                 cmp     rbp, rax
.text:000000000000704D                 jg      loc_72E0
.text:0000000000007053                 imul    rbp, rsi
.text:0000000000007057                 jmp     loc_6EC0        ; jumptable 0000000000006E5E case 99
.text:0000000000007057 ; ---------------------------------------------------------------------------
.text:000000000000705C                 align 20h
.text:0000000000007060
.text:0000000000007060 loc_7060:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000007060                                         ; DATA XREF: .rodata:jpt_6E5E↓o
.text:0000000000007060                 movsxd  rsi, eax        ; jumptable 0000000000006E5E cases 71,103
.text:0000000000007063                 mov     rax, 8000000000000000h
.text:000000000000706D                 mov     r8d, 3
.text:0000000000007073                 cqo
.text:0000000000007075                 xor     r11d, r11d
.text:0000000000007078                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000007082                 idiv    rsi
.text:0000000000007085                 mov     r10, rax
.text:0000000000007088
.text:0000000000007088 loc_7088:                               ; CODE XREF: xstrtoimax+3FA↓j
.text:0000000000007088                 cmp     r10, rbp
.text:000000000000708B                 jg      loc_7280
.text:0000000000007091                 mov     rax, r9
.text:0000000000007094                 cqo
.text:0000000000007096                 idiv    rsi
.text:0000000000007099                 cmp     rax, rbp
.text:000000000000709C                 jl      loc_7310
.text:00000000000070A2                 imul    rbp, rsi
.text:00000000000070A6
.text:00000000000070A6 loc_70A6:                               ; CODE XREF: xstrtoimax+5E0↓j
.text:00000000000070A6                                         ; xstrtoimax+670↓j
.text:00000000000070A6                 sub     r8d, 1
.text:00000000000070AA                 jnz     short loc_7088
.text:00000000000070AC                 nop     dword ptr [rax+00h]
.text:00000000000070B0
.text:00000000000070B0 loc_70B0:                               ; CODE XREF: xstrtoimax+2D9↑j
.text:00000000000070B0                                         ; xstrtoimax+349↑j ...
.text:00000000000070B0                 or      r12d, r11d
.text:00000000000070B3                 jmp     loc_6EC0        ; jumptable 0000000000006E5E case 99
.text:00000000000070B3 ; ---------------------------------------------------------------------------
.text:00000000000070B8                 align 20h
.text:00000000000070C0
.text:00000000000070C0 loc_70C0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:00000000000070C0                                         ; DATA XREF: .rodata:jpt_6E5E↓o
.text:00000000000070C0                 movsxd  rsi, eax        ; jumptable 0000000000006E5E case 69
.text:00000000000070C3                 mov     rax, 8000000000000000h
.text:00000000000070CD                 mov     r8d, 6
.text:00000000000070D3                 cqo
.text:00000000000070D5                 xor     r11d, r11d
.text:00000000000070D8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:00000000000070E2                 idiv    rsi
.text:00000000000070E5                 mov     r10, rax
.text:00000000000070E8                 jmp     short loc_710B
.text:00000000000070E8 ; ---------------------------------------------------------------------------
.text:00000000000070EA                 align 10h
.text:00000000000070F0
.text:00000000000070F0 loc_70F0:                               ; CODE XREF: xstrtoimax+45E↓j
.text:00000000000070F0                 mov     rax, r9
.text:00000000000070F3                 cqo
.text:00000000000070F5                 idiv    rsi
.text:00000000000070F8                 cmp     rax, rbp
.text:00000000000070FB                 jl      loc_7298
.text:0000000000007101                 imul    rbp, rsi
.text:0000000000007105
.text:0000000000007105 loc_7105:                               ; CODE XREF: xstrtoimax+470↓j
.text:0000000000007105                                         ; xstrtoimax+5F8↓j
.text:0000000000007105                 sub     r8d, 1
.text:0000000000007109                 jz      short loc_70B0
.text:000000000000710B
.text:000000000000710B loc_710B:                               ; CODE XREF: xstrtoimax+438↑j
.text:000000000000710B                 cmp     r10, rbp
.text:000000000000710E                 jle     short loc_70F0
.text:0000000000007110                 mov     r11d, 1
.text:0000000000007116                 mov     rbp, 8000000000000000h
.text:0000000000007120                 jmp     short loc_7105
.text:0000000000007120 ; ---------------------------------------------------------------------------
.text:0000000000007122                 align 8
.text:0000000000007128
.text:0000000000007128 loc_7128:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000007128                                         ; DATA XREF: .rodata:jpt_6E5E↓o
.text:0000000000007128                 movsxd  rsi, eax        ; jumptable 0000000000006E5E case 80
.text:000000000000712B                 mov     rax, 8000000000000000h
.text:0000000000007135                 mov     r8d, 5
.text:000000000000713B                 cqo
.text:000000000000713D                 xor     r11d, r11d
.text:0000000000007140                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000714A                 idiv    rsi
.text:000000000000714D                 mov     r10, rax
.text:0000000000007150                 jmp     short loc_7177
.text:0000000000007150 ; ---------------------------------------------------------------------------
.text:0000000000007152                 align 8
.text:0000000000007158
.text:0000000000007158 loc_7158:                               ; CODE XREF: xstrtoimax+4CA↓j
.text:0000000000007158                 mov     rax, r9
.text:000000000000715B                 cqo
.text:000000000000715D                 idiv    rsi
.text:0000000000007160                 cmp     rax, rbp
.text:0000000000007163                 jl      loc_72B0
.text:0000000000007169                 imul    rbp, rsi
.text:000000000000716D
.text:000000000000716D loc_716D:                               ; CODE XREF: xstrtoimax+4DC↓j
.text:000000000000716D                                         ; xstrtoimax+610↓j
.text:000000000000716D                 sub     r8d, 1
.text:0000000000007171                 jz      loc_70B0
.text:0000000000007177
.text:0000000000007177 loc_7177:                               ; CODE XREF: xstrtoimax+4A0↑j
.text:0000000000007177                 cmp     r10, rbp
.text:000000000000717A                 jle     short loc_7158
.text:000000000000717C                 mov     r11d, 1
.text:0000000000007182                 mov     rbp, 8000000000000000h
.text:000000000000718C                 jmp     short loc_716D
.text:000000000000718C ; ---------------------------------------------------------------------------
.text:000000000000718E                 align 10h
.text:0000000000007190
.text:0000000000007190 loc_7190:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000007190                                         ; DATA XREF: .rodata:jpt_6E5E↓o
.text:0000000000007190                 mov     rax, 0FFE0000000000000h ; jumptable 0000000000006E5E case 66
.text:000000000000719A                 cmp     rbp, rax
.text:000000000000719D                 jl      loc_7220
.text:00000000000071A3                 mov     rax, 1FFFFFFFFFFFFFh
.text:00000000000071AD                 cmp     rbp, rax
.text:00000000000071B0                 jg      loc_72E0
.text:00000000000071B6                 shl     rbp, 0Ah
.text:00000000000071BA                 jmp     loc_6EC0        ; jumptable 0000000000006E5E case 99
.text:00000000000071BA ; ---------------------------------------------------------------------------
.text:00000000000071BF                 align 20h
.text:00000000000071C0
.text:00000000000071C0 loc_71C0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:00000000000071C0                                         ; DATA XREF: .rodata:jpt_6E5E↓o
.text:00000000000071C0                 movsxd  rsi, eax        ; jumptable 0000000000006E5E cases 84,116
.text:00000000000071C3                 mov     rax, 8000000000000000h
.text:00000000000071CD                 mov     r8d, 4
.text:00000000000071D3                 cqo
.text:00000000000071D5                 xor     r11d, r11d
.text:00000000000071D8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:00000000000071E2                 idiv    rsi
.text:00000000000071E5                 mov     r10, rax
.text:00000000000071E8
.text:00000000000071E8 loc_71E8:                               ; CODE XREF: xstrtoimax+556↓j
.text:00000000000071E8                 cmp     r10, rbp
.text:00000000000071EB                 jg      short loc_7250
.text:00000000000071ED                 mov     rax, r9
.text:00000000000071F0                 cqo
.text:00000000000071F2                 idiv    rsi
.text:00000000000071F5                 cmp     rax, rbp
.text:00000000000071F8                 jl      loc_72C8
.text:00000000000071FE                 imul    rbp, rsi
.text:0000000000007202
.text:0000000000007202 loc_7202:                               ; CODE XREF: xstrtoimax+5B0↓j
.text:0000000000007202                                         ; xstrtoimax+628↓j
.text:0000000000007202                 sub     r8d, 1
.text:0000000000007206                 jnz     short loc_71E8
.text:0000000000007208                 jmp     loc_70B0
.text:0000000000007208 ; ---------------------------------------------------------------------------
.text:000000000000720D                 align 10h
.text:0000000000007210
.text:0000000000007210 loc_7210:                               ; CODE XREF: xstrtoimax+CB↑j
.text:0000000000007210                 mov     r12d, 4
.text:0000000000007216                 jmp     loc_6D39
.text:0000000000007216 ; ---------------------------------------------------------------------------
.text:000000000000721B                 align 20h
.text:0000000000007220
.text:0000000000007220 loc_7220:                               ; CODE XREF: xstrtoimax+23D↑j
.text:0000000000007220                                         ; xstrtoimax+26D↑j ...
.text:0000000000007220                 mov     r12d, 1
.text:0000000000007226                 mov     rbp, 8000000000000000h
.text:0000000000007230                 jmp     loc_6EC0        ; jumptable 0000000000006E5E case 99
.text:0000000000007230 ; ---------------------------------------------------------------------------
.text:0000000000007235                 align 8
.text:0000000000007238
.text:0000000000007238 loc_7238:                               ; CODE XREF: xstrtoimax+33B↑j
.text:0000000000007238                 mov     r11d, 1
.text:000000000000723E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000007248                 jmp     loc_6FF5
.text:0000000000007248 ; ---------------------------------------------------------------------------
.text:000000000000724D                 align 10h
.text:0000000000007250
.text:0000000000007250 loc_7250:                               ; CODE XREF: xstrtoimax+53B↑j
.text:0000000000007250                 mov     r11d, 1
.text:0000000000007256                 mov     rbp, 8000000000000000h
.text:0000000000007260                 jmp     short loc_7202
.text:0000000000007260 ; ---------------------------------------------------------------------------
.text:0000000000007262                 align 8
.text:0000000000007268
.text:0000000000007268 loc_7268:                               ; CODE XREF: xstrtoimax+2CB↑j
.text:0000000000007268                 mov     r11d, 1
.text:000000000000726E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000007278                 jmp     loc_6F85
.text:0000000000007278 ; ---------------------------------------------------------------------------
.text:000000000000727D                 align 20h
.text:0000000000007280
.text:0000000000007280 loc_7280:                               ; CODE XREF: xstrtoimax+3DB↑j
.text:0000000000007280                 mov     r11d, 1
.text:0000000000007286                 mov     rbp, 8000000000000000h
.text:0000000000007290                 jmp     loc_70A6
.text:0000000000007290 ; ---------------------------------------------------------------------------
.text:0000000000007295                 align 8
.text:0000000000007298
.text:0000000000007298 loc_7298:                               ; CODE XREF: xstrtoimax+44B↑j
.text:0000000000007298                 mov     r11d, 1
.text:000000000000729E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:00000000000072A8                 jmp     loc_7105
.text:00000000000072A8 ; ---------------------------------------------------------------------------
.text:00000000000072AD                 align 10h
.text:00000000000072B0
.text:00000000000072B0 loc_72B0:                               ; CODE XREF: xstrtoimax+4B3↑j
.text:00000000000072B0                 mov     r11d, 1
.text:00000000000072B6                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:00000000000072C0                 jmp     loc_716D
.text:00000000000072C0 ; ---------------------------------------------------------------------------
.text:00000000000072C5                 align 8
.text:00000000000072C8
.text:00000000000072C8 loc_72C8:                               ; CODE XREF: xstrtoimax+548↑j
.text:00000000000072C8                 mov     r11d, 1
.text:00000000000072CE                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:00000000000072D8                 jmp     loc_7202
.text:00000000000072D8 ; ---------------------------------------------------------------------------
.text:00000000000072DD                 align 20h
.text:00000000000072E0
.text:00000000000072E0 loc_72E0:                               ; CODE XREF: xstrtoimax+250↑j
.text:00000000000072E0                                         ; xstrtoimax+280↑j ...
.text:00000000000072E0                 mov     r12d, 1
.text:00000000000072E6                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:00000000000072F0                 jmp     loc_6EC0        ; jumptable 0000000000006E5E case 99
.text:00000000000072F0 ; ---------------------------------------------------------------------------
.text:00000000000072F5                 align 8
.text:00000000000072F8
.text:00000000000072F8 loc_72F8:                               ; CODE XREF: xstrtoimax+15C↑j
.text:00000000000072F8                 xor     edi, edi
.text:00000000000072FA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:00000000000072FE                 mov     eax, 400h
.text:0000000000007303                 setz    dil
.text:0000000000007307                 lea     edi, [rdi+rdi+1]
.text:000000000000730B                 jmp     loc_6E42
.text:0000000000007310 ; ---------------------------------------------------------------------------
.text:0000000000007310
.text:0000000000007310 loc_7310:                               ; CODE XREF: xstrtoimax+3EC↑j
.text:0000000000007310                 mov     r11d, 1
.text:0000000000007316                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000007320                 jmp     loc_70A6
.text:0000000000007325 ; ---------------------------------------------------------------------------
.text:0000000000007325
.text:0000000000007325 loc_7325:                               ; CODE XREF: xstrtoimax+1CB↑j
.text:0000000000007325                                         ; xstrtoimax+1F3↑j
.text:0000000000007325                                         ; DATA XREF: ...
.text:0000000000007325                 mov     eax, 1
.text:000000000000732A                 mov     rbp, r8
.text:000000000000732D                 jmp     loc_6EB8
.text:0000000000007332 ; ---------------------------------------------------------------------------
.text:0000000000007332
.text:0000000000007332 loc_7332:                               ; CODE XREF: xstrtoimax+1E6↑j
.text:0000000000007332                                         ; xstrtoimax+1FC↑j
.text:0000000000007332                 mov     eax, 1
.text:0000000000007337                 mov     rbp, r10
.text:000000000000733A                 jmp     loc_6EB8
.text:000000000000733F ; ---------------------------------------------------------------------------
.text:000000000000733F
.text:000000000000733F loc_733F:                               ; CODE XREF: xstrtoimax+21↑j
.text:000000000000733F                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoimax"
.text:0000000000007346                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:000000000000734D                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000007354                 mov     edx, 54h ; 'T'  ; line
.text:0000000000007359                 call    ___assert_fail
.text:000000000000735E ; ---------------------------------------------------------------------------
.text:000000000000735E
.text:000000000000735E loc_735E:                               ; CODE XREF: xstrtoimax+9A↑j
.text:000000000000735E                 call    ___stack_chk_fail
.text:000000000000735E ; } // starts at 6CB0
.text:000000000000735E xstrtoimax      endp
.text:000000000000735E
.text:000000000000735E ; ---------------------------------------------------------------------------
.text:0000000000007363                 align 10h
.text:0000000000007370
.text:0000000000007370 ; =============== S U B R O U T I N E =======================================
.text:0000000000007370
.text:0000000000007370
.text:0000000000007370 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000007370                 public xstrtoumax
.text:0000000000007370 xstrtoumax      proc near               ; CODE XREF: main+394↑p
.text:0000000000007370                                         ; main+708↑p
.text:0000000000007370
.text:0000000000007370 base            = dword ptr -50h
.text:0000000000007370 endptr          = qword ptr -48h
.text:0000000000007370 var_40          = qword ptr -40h
.text:0000000000007370
.text:0000000000007370 ; __unwind {
.text:0000000000007370                 push    r15
.text:0000000000007372                 push    r14
.text:0000000000007374                 push    r13
.text:0000000000007376                 push    r12
.text:0000000000007378                 push    rbp
.text:0000000000007379                 push    rbx
.text:000000000000737A                 sub     rsp, 28h
.text:000000000000737E                 mov     rax, fs:28h
.text:0000000000007387                 mov     [rsp+58h+var_40], rax
.text:000000000000738C                 xor     eax, eax
.text:000000000000738E                 cmp     edx, 24h ; '$'
.text:0000000000007391                 ja      loc_76F5
.text:0000000000007397                 lea     rax, [rsp+58h+endptr]
.text:000000000000739C                 mov     r15, rsi
.text:000000000000739F                 test    rsi, rsi
.text:00000000000073A2                 mov     rbp, rdi
.text:00000000000073A5                 mov     [rsp+58h+base], edx
.text:00000000000073A9                 mov     r14, rcx
.text:00000000000073AC                 mov     r13, r8
.text:00000000000073AF                 cmovz   r15, rax
.text:00000000000073B3                 call    ___errno_location
.text:00000000000073B8                 mov     dword ptr [rax], 0
.text:00000000000073BE                 mov     r12, rax
.text:00000000000073C1                 movzx   ebx, byte ptr [rbp+0]
.text:00000000000073C5                 call    ___ctype_b_loc
.text:00000000000073CA                 mov     edx, [rsp+58h+base] ; base
.text:00000000000073CE                 mov     rsi, [rax]
.text:00000000000073D1                 mov     rax, rbp
.text:00000000000073D4                 jmp     short loc_73E7
.text:00000000000073D4 ; ---------------------------------------------------------------------------
.text:00000000000073D6                 align 20h
.text:00000000000073E0
.text:00000000000073E0 loc_73E0:                               ; CODE XREF: xstrtoumax+7F↓j
.text:00000000000073E0                 add     rax, 1
.text:00000000000073E4                 movzx   ebx, byte ptr [rax]
.text:00000000000073E7
.text:00000000000073E7 loc_73E7:                               ; CODE XREF: xstrtoumax+64↑j
.text:00000000000073E7                 movzx   ecx, bl
.text:00000000000073EA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:00000000000073EF                 jnz     short loc_73E0
.text:00000000000073F1                 cmp     bl, 2Dh ; '-'
.text:00000000000073F4                 jz      short loc_7448
.text:00000000000073F6                 xor     ecx, ecx        ; group
.text:00000000000073F8                 mov     rsi, r15        ; endptr
.text:00000000000073FB                 mov     rdi, rbp        ; nptr
.text:00000000000073FE                 call    ___strtoul_internal
.text:0000000000007403                 mov     rcx, [r15]
.text:0000000000007406                 mov     rbx, rax
.text:0000000000007409                 cmp     rcx, rbp
.text:000000000000740C                 jz      short loc_7438
.text:000000000000740E                 mov     eax, [r12]
.text:0000000000007412                 test    eax, eax
.text:0000000000007414                 jz      short loc_7478
.text:0000000000007416                 cmp     eax, 22h ; '"'
.text:0000000000007419                 mov     ebp, 1
.text:000000000000741E                 jnz     short loc_7448
.text:0000000000007420
.text:0000000000007420 loc_7420:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000007420                 test    r13, r13
.text:0000000000007423                 jz      short loc_742E
.text:0000000000007425                 movzx   r12d, byte ptr [rcx]
.text:0000000000007429                 test    r12b, r12b
.text:000000000000742C                 jnz     short loc_74A7
.text:000000000000742E
.text:000000000000742E loc_742E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:000000000000742E                 mov     [r14], rbx
.text:0000000000007431                 jmp     short loc_744D
.text:0000000000007431 ; ---------------------------------------------------------------------------
.text:0000000000007433                 align 8
.text:0000000000007438
.text:0000000000007438 loc_7438:                               ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000007438                 test    r13, r13
.text:000000000000743B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000007440                 jnz     short loc_7480
.text:0000000000007442                 nop     word ptr [rax+rax+00h]
.text:0000000000007448
.text:0000000000007448 loc_7448:                               ; CODE XREF: xstrtoumax+84↑j
.text:0000000000007448                                         ; xstrtoumax+AE↑j ...
.text:0000000000007448                 mov     ebp, 4
.text:000000000000744D
.text:000000000000744D loc_744D:                               ; CODE XREF: xstrtoumax+C1↑j
.text:000000000000744D                                         ; xstrtoumax+217↓j ...
.text:000000000000744D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000007452                 xor     rdi, fs:28h
.text:000000000000745B                 mov     eax, ebp
.text:000000000000745D                 jnz     loc_76F0
.text:0000000000007463                 add     rsp, 28h
.text:0000000000007467                 pop     rbx
.text:0000000000007468                 pop     rbp
.text:0000000000007469                 pop     r12
.text:000000000000746B                 pop     r13
.text:000000000000746D                 pop     r14
.text:000000000000746F                 pop     r15
.text:0000000000007471                 retn
.text:0000000000007471 ; ---------------------------------------------------------------------------
.text:0000000000007472                 align 8
.text:0000000000007478
.text:0000000000007478 loc_7478:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000007478                 xor     ebp, ebp
.text:000000000000747A                 jmp     short loc_7420
.text:000000000000747A ; ---------------------------------------------------------------------------
.text:000000000000747C                 align 20h
.text:0000000000007480
.text:0000000000007480 loc_7480:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000007480                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000007485                 test    r12b, r12b
.text:0000000000007488                 jz      short loc_7448
.text:000000000000748A                 movsx   esi, r12b       ; c
.text:000000000000748E                 mov     rdi, r13        ; s
.text:0000000000007491                 xor     ebp, ebp
.text:0000000000007493                 call    _strchr
.text:0000000000007498                 test    rax, rax
.text:000000000000749B                 mov     ebx, 1
.text:00000000000074A0                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000074A5                 jz      short loc_7448
.text:00000000000074A7
.text:00000000000074A7 loc_74A7:                               ; CODE XREF: xstrtoumax+BC↑j
.text:00000000000074A7                 movsx   esi, r12b       ; c
.text:00000000000074AB                 mov     rdi, r13        ; s
.text:00000000000074AE                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000074B3                 call    _strchr
.text:00000000000074B8                 test    rax, rax
.text:00000000000074BB                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000074C0                 jz      def_7546        ; jumptable 0000000000007546 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000074C6                 lea     eax, [r12-45h]
.text:00000000000074CB                 cmp     al, 2Fh ; '/'
.text:00000000000074CD                 ja      short loc_7520
.text:00000000000074CF                 mov     rdx, 814400308945h
.text:00000000000074D9                 bt      rdx, rax
.text:00000000000074DD                 jnb     short loc_7520
.text:00000000000074DF                 mov     esi, 30h ; '0'  ; c
.text:00000000000074E4                 mov     rdi, r13        ; s
.text:00000000000074E7                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000074EC                 call    _strchr
.text:00000000000074F1                 test    rax, rax
.text:00000000000074F4                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000074F9                 jz      short loc_7520
.text:00000000000074FB                 movzx   eax, byte ptr [rcx+1]
.text:00000000000074FF                 cmp     al, 44h ; 'D'
.text:0000000000007501                 jz      short loc_750F
.text:0000000000007503                 cmp     al, 69h ; 'i'
.text:0000000000007505                 jz      loc_76D8
.text:000000000000750B                 cmp     al, 42h ; 'B'
.text:000000000000750D                 jnz     short loc_7520
.text:000000000000750F
.text:000000000000750F loc_750F:                               ; CODE XREF: xstrtoumax+191↑j
.text:000000000000750F                 mov     edi, 2
.text:0000000000007514                 mov     esi, 3E8h
.text:0000000000007519                 jmp     short loc_752A
.text:0000000000007519 ; ---------------------------------------------------------------------------
.text:000000000000751B                 align 20h
.text:0000000000007520
.text:0000000000007520 loc_7520:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000007520                                         ; xstrtoumax+16D↑j ...
.text:0000000000007520                 mov     edi, 1
.text:0000000000007525                 mov     esi, 400h
.text:000000000000752A
.text:000000000000752A loc_752A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:000000000000752A                                         ; xstrtoumax+37B↓j
.text:000000000000752A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000752E                 cmp     r12b, 35h
.text:0000000000007532                 ja      short def_7546  ; jumptable 0000000000007546 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000007534                 lea     rdx, jpt_7546
.text:000000000000753B                 movzx   r12d, r12b
.text:000000000000753F                 movsxd  rax, ds:(jpt_7546 - 17520h)[rdx+r12*4]
.text:0000000000007543                 add     rax, rdx
.text:0000000000007546                 jmp     rax             ; switch jump
.text:0000000000007548 ; ---------------------------------------------------------------------------
.text:0000000000007548
.text:0000000000007548 loc_7548:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000007548                                         ; DATA XREF: .rodata:jpt_7546↓o
.text:0000000000007548                 mov     rax, rbx        ; jumptable 0000000000007546 cases 77,109
.text:000000000000754B                 mul     rsi
.text:000000000000754E                 jo      loc_7741
.text:0000000000007554                 xor     r8d, r8d
.text:0000000000007557
.text:0000000000007557 loc_7557:                               ; CODE XREF: xstrtoumax+34E↓j
.text:0000000000007557                                         ; xstrtoumax+35E↓j ...
.text:0000000000007557                 mul     rsi
.text:000000000000755A                 jo      loc_7732
.text:0000000000007560                 mov     rbx, rax
.text:0000000000007563
.text:0000000000007563 loc_7563:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000007563                 or      ebp, r8d
.text:0000000000007566                 db      2Eh
.text:0000000000007566                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007570
.text:0000000000007570 loc_7570:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000007570                                         ; xstrtoumax+23B↓j ...
.text:0000000000007570                 movsxd  rdi, edi        ; jumptable 0000000000007546 case 99
.text:0000000000007573                 mov     eax, ebp
.text:0000000000007575                 add     rcx, rdi
.text:0000000000007578                 or      eax, 2
.text:000000000000757B                 mov     [r15], rcx
.text:000000000000757E                 cmp     byte ptr [rcx], 0
.text:0000000000007581                 mov     [r14], rbx
.text:0000000000007584                 cmovnz  ebp, eax
.text:0000000000007587                 jmp     loc_744D
.text:000000000000758C ; ---------------------------------------------------------------------------
.text:000000000000758C
.text:000000000000758C def_7546:                               ; CODE XREF: xstrtoumax+150↑j
.text:000000000000758C                                         ; xstrtoumax+1C2↑j ...
.text:000000000000758C                 mov     [r14], rbx      ; jumptable 0000000000007546 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000758F                 or      ebp, 2
.text:0000000000007592                 jmp     loc_744D
.text:0000000000007597 ; ---------------------------------------------------------------------------
.text:0000000000007597
.text:0000000000007597 loc_7597:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000007597                                         ; DATA XREF: .rodata:jpt_7546↓o
.text:0000000000007597                 mov     edx, 2          ; jumptable 0000000000007546 case 119
.text:000000000000759C                 mov     rax, rdx
.text:000000000000759F                 mul     rbx
.text:00000000000075A2                 jo      loc_763E
.text:00000000000075A8                 add     rbx, rbx
.text:00000000000075AB                 jmp     short loc_7570  ; jumptable 0000000000007546 case 99
.text:00000000000075AD ; ---------------------------------------------------------------------------
.text:00000000000075AD
.text:00000000000075AD loc_75AD:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000075AD                                         ; DATA XREF: .rodata:jpt_7546↓o
.text:00000000000075AD                 mov     edx, 200h       ; jumptable 0000000000007546 case 98
.text:00000000000075B2                 mov     rax, rdx
.text:00000000000075B5                 mul     rbx
.text:00000000000075B8                 jo      loc_763E
.text:00000000000075BE                 shl     rbx, 9
.text:00000000000075C2                 jmp     short loc_7570  ; jumptable 0000000000007546 case 99
.text:00000000000075C4 ; ---------------------------------------------------------------------------
.text:00000000000075C4
.text:00000000000075C4 loc_75C4:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000075C4                                         ; DATA XREF: .rodata:jpt_7546↓o
.text:00000000000075C4                 mov     r8d, 7          ; jumptable 0000000000007546 case 90
.text:00000000000075CA                 xor     r9d, r9d
.text:00000000000075CD                 nop     dword ptr [rax]
.text:00000000000075D0
.text:00000000000075D0 loc_75D0:                               ; CODE XREF: xstrtoumax+273↓j
.text:00000000000075D0                 mov     rax, rbx
.text:00000000000075D3                 mul     rsi
.text:00000000000075D6                 mov     rbx, rax
.text:00000000000075D9                 jo      loc_776E
.text:00000000000075DF
.text:00000000000075DF loc_75DF:                               ; CODE XREF: xstrtoumax+408↓j
.text:00000000000075DF                 sub     r8d, 1
.text:00000000000075E3                 jnz     short loc_75D0
.text:00000000000075E5
.text:00000000000075E5 loc_75E5:                               ; CODE XREF: xstrtoumax+29D↓j
.text:00000000000075E5                                         ; xstrtoumax+2BD↓j ...
.text:00000000000075E5                 or      ebp, r9d
.text:00000000000075E8                 jmp     short loc_7570  ; jumptable 0000000000007546 case 99
.text:00000000000075EA ; ---------------------------------------------------------------------------
.text:00000000000075EA
.text:00000000000075EA loc_75EA:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000075EA                                         ; DATA XREF: .rodata:jpt_7546↓o
.text:00000000000075EA                 mov     r8d, 8          ; jumptable 0000000000007546 case 89
.text:00000000000075F0                 xor     r9d, r9d
.text:00000000000075F3                 nop     dword ptr [rax+rax+00h]
.text:00000000000075F8
.text:00000000000075F8 loc_75F8:                               ; CODE XREF: xstrtoumax+29B↓j
.text:00000000000075F8                 mov     rax, rbx
.text:00000000000075FB                 mul     rsi
.text:00000000000075FE                 mov     rbx, rax
.text:0000000000007601                 jo      loc_7750
.text:0000000000007607
.text:0000000000007607 loc_7607:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:0000000000007607                 sub     r8d, 1
.text:000000000000760B                 jnz     short loc_75F8
.text:000000000000760D                 jmp     short loc_75E5
.text:000000000000760F ; ---------------------------------------------------------------------------
.text:000000000000760F
.text:000000000000760F loc_760F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000760F                                         ; DATA XREF: .rodata:jpt_7546↓o
.text:000000000000760F                 mov     r8d, 4          ; jumptable 0000000000007546 cases 84,116
.text:0000000000007615                 xor     r9d, r9d
.text:0000000000007618
.text:0000000000007618 loc_7618:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:0000000000007618                 mov     rax, rbx
.text:000000000000761B                 mul     rsi
.text:000000000000761E                 mov     rbx, rax
.text:0000000000007621                 jo      loc_7723
.text:0000000000007627
.text:0000000000007627 loc_7627:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000007627                 sub     r8d, 1
.text:000000000000762B                 jnz     short loc_7618
.text:000000000000762D                 jmp     short loc_75E5
.text:000000000000762F ; ---------------------------------------------------------------------------
.text:000000000000762F
.text:000000000000762F loc_762F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000762F                                         ; DATA XREF: .rodata:jpt_7546↓o
.text:000000000000762F                 mov     rax, rbx        ; jumptable 0000000000007546 cases 75,107
.text:0000000000007632                 mul     rsi
.text:0000000000007635                 mov     rbx, rax
.text:0000000000007638                 jno     loc_7570        ; jumptable 0000000000007546 case 99
.text:000000000000763E
.text:000000000000763E loc_763E:                               ; CODE XREF: xstrtoumax+232↑j
.text:000000000000763E                                         ; xstrtoumax+248↑j ...
.text:000000000000763E                 mov     ebp, 1
.text:0000000000007643                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007647                 jmp     loc_7570        ; jumptable 0000000000007546 case 99
.text:0000000000007647 ; ---------------------------------------------------------------------------
.text:000000000000764C                 align 10h
.text:0000000000007650
.text:0000000000007650 loc_7650:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000007650                                         ; DATA XREF: .rodata:jpt_7546↓o
.text:0000000000007650                 mov     r8d, 5          ; jumptable 0000000000007546 case 80
.text:0000000000007656                 xor     r9d, r9d
.text:0000000000007659
.text:0000000000007659 loc_7659:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000007659                 mov     rax, rbx
.text:000000000000765C                 mul     rsi
.text:000000000000765F                 mov     rbx, rax
.text:0000000000007662                 jo      loc_775F
.text:0000000000007668
.text:0000000000007668 loc_7668:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000007668                 sub     r8d, 1
.text:000000000000766C                 jnz     short loc_7659
.text:000000000000766E                 jmp     loc_75E5
.text:0000000000007673 ; ---------------------------------------------------------------------------
.text:0000000000007673
.text:0000000000007673 loc_7673:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000007673                                         ; DATA XREF: .rodata:jpt_7546↓o
.text:0000000000007673                 mov     r8d, 6          ; jumptable 0000000000007546 case 69
.text:0000000000007679                 xor     r9d, r9d
.text:000000000000767C
.text:000000000000767C loc_767C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:000000000000767C                 mov     rax, rbx
.text:000000000000767F                 mul     rsi
.text:0000000000007682                 mov     rbx, rax
.text:0000000000007685                 jo      loc_7714
.text:000000000000768B
.text:000000000000768B loc_768B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:000000000000768B                 sub     r8d, 1
.text:000000000000768F                 jnz     short loc_767C
.text:0000000000007691                 jmp     loc_75E5
.text:0000000000007696 ; ---------------------------------------------------------------------------
.text:0000000000007696
.text:0000000000007696 loc_7696:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000007696                                         ; DATA XREF: .rodata:jpt_7546↓o
.text:0000000000007696                 mov     edx, 400h       ; jumptable 0000000000007546 case 66
.text:000000000000769B                 mov     rax, rdx
.text:000000000000769E                 mul     rbx
.text:00000000000076A1                 jo      short loc_763E
.text:00000000000076A3                 shl     rbx, 0Ah
.text:00000000000076A7                 jmp     loc_7570        ; jumptable 0000000000007546 case 99
.text:00000000000076AC ; ---------------------------------------------------------------------------
.text:00000000000076AC
.text:00000000000076AC loc_76AC:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000076AC                                         ; DATA XREF: .rodata:jpt_7546↓o
.text:00000000000076AC                 mov     rax, rbx        ; jumptable 0000000000007546 cases 71,103
.text:00000000000076AF                 mul     rsi
.text:00000000000076B2                 jo      loc_777D
.text:00000000000076B8                 xor     r8d, r8d
.text:00000000000076BB
.text:00000000000076BB loc_76BB:                               ; CODE XREF: xstrtoumax+417↓j
.text:00000000000076BB                 mul     rsi
.text:00000000000076BE                 jno     loc_7557
.text:00000000000076C4                 mov     r8d, 1
.text:00000000000076CA                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000076CE                 jmp     loc_7557
.text:00000000000076CE ; ---------------------------------------------------------------------------
.text:00000000000076D3                 align 8
.text:00000000000076D8
.text:00000000000076D8 loc_76D8:                               ; CODE XREF: xstrtoumax+195↑j
.text:00000000000076D8                 xor     edi, edi
.text:00000000000076DA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:00000000000076DE                 mov     esi, 400h
.text:00000000000076E3                 setz    dil
.text:00000000000076E7                 lea     edi, [rdi+rdi+1]
.text:00000000000076EB                 jmp     loc_752A
.text:00000000000076F0 ; ---------------------------------------------------------------------------
.text:00000000000076F0
.text:00000000000076F0 loc_76F0:                               ; CODE XREF: xstrtoumax+ED↑j
.text:00000000000076F0                 call    ___stack_chk_fail
.text:00000000000076F5 ; ---------------------------------------------------------------------------
.text:00000000000076F5
.text:00000000000076F5 loc_76F5:                               ; CODE XREF: xstrtoumax+21↑j
.text:00000000000076F5                 lea     rcx, __PRETTY_FUNCTION___4162_0 ; "xstrtoumax"
.text:00000000000076FC                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000007703                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000770A                 mov     edx, 54h ; 'T'  ; line
.text:000000000000770F                 call    ___assert_fail
.text:0000000000007714 ; ---------------------------------------------------------------------------
.text:0000000000007714
.text:0000000000007714 loc_7714:                               ; CODE XREF: xstrtoumax+315↑j
.text:0000000000007714                 mov     r9d, 1
.text:000000000000771A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000771E                 jmp     loc_768B
.text:0000000000007723 ; ---------------------------------------------------------------------------
.text:0000000000007723
.text:0000000000007723 loc_7723:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:0000000000007723                 mov     r9d, 1
.text:0000000000007729                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000772D                 jmp     loc_7627
.text:0000000000007732 ; ---------------------------------------------------------------------------
.text:0000000000007732
.text:0000000000007732 loc_7732:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:0000000000007732                 mov     r8d, 1
.text:0000000000007738                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000773C                 jmp     loc_7563
.text:0000000000007741 ; ---------------------------------------------------------------------------
.text:0000000000007741
.text:0000000000007741 loc_7741:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:0000000000007741                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007745                 mov     r8d, 1
.text:000000000000774B                 jmp     loc_7557
.text:0000000000007750 ; ---------------------------------------------------------------------------
.text:0000000000007750
.text:0000000000007750 loc_7750:                               ; CODE XREF: xstrtoumax+291↑j
.text:0000000000007750                 mov     r9d, 1
.text:0000000000007756                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000775A                 jmp     loc_7607
.text:000000000000775F ; ---------------------------------------------------------------------------
.text:000000000000775F
.text:000000000000775F loc_775F:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:000000000000775F                 mov     r9d, 1
.text:0000000000007765                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007769                 jmp     loc_7668
.text:000000000000776E ; ---------------------------------------------------------------------------
.text:000000000000776E
.text:000000000000776E loc_776E:                               ; CODE XREF: xstrtoumax+269↑j
.text:000000000000776E                 mov     r9d, 1
.text:0000000000007774                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007778                 jmp     loc_75DF
.text:000000000000777D ; ---------------------------------------------------------------------------
.text:000000000000777D
.text:000000000000777D loc_777D:                               ; CODE XREF: xstrtoumax+342↑j
.text:000000000000777D                 mov     r8d, 1
.text:0000000000007783                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007787                 jmp     loc_76BB
.text:0000000000007787 ; } // starts at 7370
.text:0000000000007787 xstrtoumax      endp
.text:0000000000007787
.text:0000000000007787 ; ---------------------------------------------------------------------------
.text:000000000000778C                 align 10h
.text:0000000000007790
.text:0000000000007790 ; =============== S U B R O U T I N E =======================================
.text:0000000000007790
.text:0000000000007790 ; Attributes: info_from_lumina
.text:0000000000007790
.text:0000000000007790 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000007790                 public rpl_fclose
.text:0000000000007790 rpl_fclose      proc near               ; CODE XREF: close_output_file+35↑p
.text:0000000000007790                                         ; fopen_safer+41↑p ...
.text:0000000000007790 ; __unwind {
.text:0000000000007790                 push    r12
.text:0000000000007792                 push    rbp
.text:0000000000007793                 push    rbx
.text:0000000000007794                 mov     rbx, rdi
.text:0000000000007797                 call    _fileno
.text:000000000000779C                 test    eax, eax
.text:000000000000779E                 mov     rdi, rbx        ; fp
.text:00000000000077A1                 js      short loc_77F7
.text:00000000000077A3                 call    ___freading
.text:00000000000077A8                 test    eax, eax
.text:00000000000077AA                 jnz     short loc_77D8
.text:00000000000077AC
.text:00000000000077AC loc_77AC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000077AC                 mov     rdi, rbx        ; stream
.text:00000000000077AF                 call    rpl_fflush
.text:00000000000077B4                 test    eax, eax
.text:00000000000077B6                 jz      short loc_77F4
.text:00000000000077B8                 call    ___errno_location
.text:00000000000077BD                 mov     r12d, [rax]
.text:00000000000077C0                 mov     rdi, rbx        ; stream
.text:00000000000077C3                 mov     rbp, rax
.text:00000000000077C6                 call    _fclose
.text:00000000000077CB                 test    r12d, r12d
.text:00000000000077CE                 jnz     short loc_7800
.text:00000000000077D0
.text:00000000000077D0 loc_77D0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000077D0                 pop     rbx
.text:00000000000077D1                 pop     rbp
.text:00000000000077D2                 pop     r12
.text:00000000000077D4                 retn
.text:00000000000077D4 ; ---------------------------------------------------------------------------
.text:00000000000077D5                 align 8
.text:00000000000077D8
.text:00000000000077D8 loc_77D8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000077D8                 mov     rdi, rbx        ; stream
.text:00000000000077DB                 call    _fileno
.text:00000000000077E0                 xor     esi, esi        ; offset
.text:00000000000077E2                 mov     edx, 1          ; whence
.text:00000000000077E7                 mov     edi, eax        ; fd
.text:00000000000077E9                 call    _lseek
.text:00000000000077EE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000077F2                 jnz     short loc_77AC
.text:00000000000077F4
.text:00000000000077F4 loc_77F4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000077F4                 mov     rdi, rbx        ; stream
.text:00000000000077F7
.text:00000000000077F7 loc_77F7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000077F7                 pop     rbx
.text:00000000000077F8                 pop     rbp
.text:00000000000077F9                 pop     r12
.text:00000000000077FB                 jmp     _fclose
.text:0000000000007800 ; ---------------------------------------------------------------------------
.text:0000000000007800
.text:0000000000007800 loc_7800:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000007800                 mov     [rbp+0], r12d
.text:0000000000007804                 mov     eax, 0FFFFFFFFh
.text:0000000000007809                 jmp     short loc_77D0
.text:0000000000007809 ; } // starts at 7790
.text:0000000000007809 rpl_fclose      endp
.text:0000000000007809
.text:0000000000007809 ; ---------------------------------------------------------------------------
.text:000000000000780B                 align 10h
.text:0000000000007810
.text:0000000000007810 ; =============== S U B R O U T I N E =======================================
.text:0000000000007810
.text:0000000000007810
.text:0000000000007810 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000007810                 public rpl_fcntl
.text:0000000000007810 rpl_fcntl       proc near               ; CODE XREF: dup_safer+9↑j
.text:0000000000007810
.text:0000000000007810 var_68          = dword ptr -68h
.text:0000000000007810 var_60          = qword ptr -60h
.text:0000000000007810 var_58          = qword ptr -58h
.text:0000000000007810 var_50          = qword ptr -50h
.text:0000000000007810 var_48          = byte ptr -48h
.text:0000000000007810 var_38          = qword ptr -38h
.text:0000000000007810 var_30          = qword ptr -30h
.text:0000000000007810 var_28          = qword ptr -28h
.text:0000000000007810 var_20          = qword ptr -20h
.text:0000000000007810 arg_0           = byte ptr  8
.text:0000000000007810
.text:0000000000007810 ; __unwind {
.text:0000000000007810                 push    r12
.text:0000000000007812                 push    rbp
.text:0000000000007813                 mov     ebp, edi
.text:0000000000007815                 push    rbx
.text:0000000000007816                 sub     rsp, 50h
.text:000000000000781A                 mov     rax, fs:28h
.text:0000000000007823                 mov     [rsp+68h+var_50], rax
.text:0000000000007828                 xor     eax, eax
.text:000000000000782A                 lea     rax, [rsp+68h+arg_0]
.text:000000000000782F                 test    esi, esi
.text:0000000000007831                 mov     [rsp+68h+var_38], rdx
.text:0000000000007836                 mov     [rsp+68h+var_30], rcx
.text:000000000000783B                 mov     [rsp+68h+var_28], r8
.text:0000000000007840                 mov     [rsp+68h+var_60], rax
.text:0000000000007845                 lea     rax, [rsp+68h+var_48]
.text:000000000000784A                 mov     [rsp+68h+var_20], r9
.text:000000000000784F                 mov     [rsp+68h+var_68], 10h
.text:0000000000007856                 mov     [rsp+68h+var_58], rax
.text:000000000000785B                 jz      loc_7A62
.text:0000000000007861                 cmp     esi, 406h
.text:0000000000007867                 jnz     short loc_78B0
.text:0000000000007869                 mov     rax, [rsp+68h+var_58]
.text:000000000000786E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000007875                 mov     [rsp+68h+var_68], 18h
.text:000000000000787C                 mov     r12d, [rax+10h]
.text:0000000000007880                 mov     edx, r12d
.text:0000000000007883                 js      loc_79B3
.text:0000000000007889                 xor     eax, eax
.text:000000000000788B                 mov     esi, 406h       ; cmd
.text:0000000000007890                 call    _fcntl
.text:0000000000007895                 test    eax, eax
.text:0000000000007897                 mov     ebx, eax
.text:0000000000007899                 js      loc_7A28
.text:000000000000789F
.text:000000000000789F loc_789F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000789F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:00000000000078A9                 jmp     short loc_78F0
.text:00000000000078A9 ; ---------------------------------------------------------------------------
.text:00000000000078AB                 align 10h
.text:00000000000078B0
.text:00000000000078B0 loc_78B0:                               ; CODE XREF: rpl_fcntl+57↑j
.text:00000000000078B0                 cmp     esi, 0Bh
.text:00000000000078B3                 jz      short loc_78E0
.text:00000000000078B5                 jg      short loc_7910
.text:00000000000078B7                 cmp     esi, 4
.text:00000000000078BA                 jz      loc_7990
.text:00000000000078C0                 jg      loc_7980
.text:00000000000078C6                 cmp     esi, 2
.text:00000000000078C9                 jz      loc_7990
.text:00000000000078CF                 jg      short loc_78E0
.text:00000000000078D1                 cmp     esi, 1
.text:00000000000078D4                 jnz     short loc_7938
.text:00000000000078D6                 db      2Eh
.text:00000000000078D6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000078E0
.text:00000000000078E0 loc_78E0:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:00000000000078E0                                         ; rpl_fcntl+BF↑j ...
.text:00000000000078E0                 mov     edi, ebp        ; fd
.text:00000000000078E2                 xor     eax, eax
.text:00000000000078E4                 call    _fcntl
.text:00000000000078E9                 mov     ebx, eax
.text:00000000000078EB                 nop     dword ptr [rax+rax+00h]
.text:00000000000078F0
.text:00000000000078F0 loc_78F0:                               ; CODE XREF: rpl_fcntl+99↑j
.text:00000000000078F0                                         ; rpl_fcntl+147↓j ...
.text:00000000000078F0                 mov     rcx, [rsp+68h+var_50]
.text:00000000000078F5                 xor     rcx, fs:28h
.text:00000000000078FE                 mov     eax, ebx
.text:0000000000007900                 jnz     loc_7A5D
.text:0000000000007906                 add     rsp, 50h
.text:000000000000790A                 pop     rbx
.text:000000000000790B                 pop     rbp
.text:000000000000790C                 pop     r12
.text:000000000000790E                 retn
.text:000000000000790E ; ---------------------------------------------------------------------------
.text:000000000000790F                 align 10h
.text:0000000000007910
.text:0000000000007910 loc_7910:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000007910                 cmp     esi, 407h
.text:0000000000007916                 jg      short loc_7960
.text:0000000000007918                 cmp     esi, 406h
.text:000000000000791E                 jge     short loc_7990
.text:0000000000007920                 cmp     esi, 401h
.text:0000000000007926                 jz      short loc_78E0
.text:0000000000007928                 cmp     esi, 402h
.text:000000000000792E                 jz      short loc_7990
.text:0000000000007930                 cmp     esi, 400h
.text:0000000000007936                 jz      short loc_7990
.text:0000000000007938
.text:0000000000007938 loc_7938:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000007938                                         ; rpl_fcntl+164↓j ...
.text:0000000000007938                 mov     eax, [rsp+68h+var_68]
.text:000000000000793B                 cmp     eax, 2Fh ; '/'
.text:000000000000793E                 ja      loc_7A7A
.text:0000000000007944                 add     rax, [rsp+68h+var_58]
.text:0000000000007949
.text:0000000000007949 loc_7949:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000007949                 mov     rdx, [rax]
.text:000000000000794C                 mov     edi, ebp        ; fd
.text:000000000000794E                 xor     eax, eax
.text:0000000000007950                 call    _fcntl
.text:0000000000007955                 mov     ebx, eax
.text:0000000000007957                 jmp     short loc_78F0
.text:0000000000007957 ; ---------------------------------------------------------------------------
.text:0000000000007959                 align 20h
.text:0000000000007960
.text:0000000000007960 loc_7960:                               ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000007960                 cmp     esi, 409h
.text:0000000000007966                 jz      short loc_7990
.text:0000000000007968                 jl      loc_78E0
.text:000000000000796E                 cmp     esi, 40Ah
.text:0000000000007974                 jnz     short loc_7938
.text:0000000000007976                 jmp     loc_78E0
.text:0000000000007976 ; ---------------------------------------------------------------------------
.text:000000000000797B                 align 20h
.text:0000000000007980
.text:0000000000007980 loc_7980:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000007980                 cmp     esi, 9
.text:0000000000007983                 jz      loc_78E0
.text:0000000000007989                 jg      short loc_7990
.text:000000000000798B                 cmp     esi, 8
.text:000000000000798E                 jnz     short loc_7938
.text:0000000000007990
.text:0000000000007990 loc_7990:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000007990                                         ; rpl_fcntl+B9↑j ...
.text:0000000000007990                 mov     eax, [rsp+68h+var_68]
.text:0000000000007993                 cmp     eax, 2Fh ; '/'
.text:0000000000007996                 ja      loc_7A84
.text:000000000000799C                 add     rax, [rsp+68h+var_58]
.text:00000000000079A1
.text:00000000000079A1 loc_79A1:                               ; CODE XREF: rpl_fcntl+279↓j
.text:00000000000079A1                 mov     edx, [rax]
.text:00000000000079A3                 mov     edi, ebp        ; fd
.text:00000000000079A5                 xor     eax, eax
.text:00000000000079A7                 call    _fcntl
.text:00000000000079AC                 mov     ebx, eax
.text:00000000000079AE                 jmp     loc_78F0
.text:00000000000079B3 ; ---------------------------------------------------------------------------
.text:00000000000079B3
.text:00000000000079B3 loc_79B3:                               ; CODE XREF: rpl_fcntl+73↑j
.text:00000000000079B3                 xor     esi, esi        ; cmd
.text:00000000000079B5                 xor     eax, eax
.text:00000000000079B7                 call    _fcntl
.text:00000000000079BC                 test    eax, eax
.text:00000000000079BE                 mov     ebx, eax
.text:00000000000079C0                 js      loc_78F0
.text:00000000000079C6                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:00000000000079CD                 jnz     loc_78F0
.text:00000000000079D3
.text:00000000000079D3 loc_79D3:                               ; CODE XREF: rpl_fcntl+248↓j
.text:00000000000079D3                 xor     eax, eax
.text:00000000000079D5                 mov     esi, 1          ; cmd
.text:00000000000079DA                 mov     edi, ebx        ; fd
.text:00000000000079DC                 call    _fcntl
.text:00000000000079E1                 test    eax, eax
.text:00000000000079E3                 js      short loc_7A01
.text:00000000000079E5                 or      eax, 1
.text:00000000000079E8                 mov     esi, 2          ; cmd
.text:00000000000079ED                 mov     edi, ebx        ; fd
.text:00000000000079EF                 mov     edx, eax
.text:00000000000079F1                 xor     eax, eax
.text:00000000000079F3                 call    _fcntl
.text:00000000000079F8                 cmp     eax, 0FFFFFFFFh
.text:00000000000079FB                 jnz     loc_78F0
.text:0000000000007A01
.text:0000000000007A01 loc_7A01:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000007A01                 call    ___errno_location
.text:0000000000007A06                 mov     r12d, [rax]
.text:0000000000007A09                 mov     rbp, rax
.text:0000000000007A0C                 mov     edi, ebx        ; fd
.text:0000000000007A0E                 call    _close
.text:0000000000007A13                 mov     ebx, 0FFFFFFFFh
.text:0000000000007A18                 mov     [rbp+0], r12d
.text:0000000000007A1C                 jmp     loc_78F0
.text:0000000000007A1C ; ---------------------------------------------------------------------------
.text:0000000000007A21                 align 8
.text:0000000000007A28
.text:0000000000007A28 loc_7A28:                               ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000007A28                 call    ___errno_location
.text:0000000000007A2D                 cmp     dword ptr [rax], 16h
.text:0000000000007A30                 jnz     loc_789F
.text:0000000000007A36                 xor     esi, esi        ; cmd
.text:0000000000007A38                 xor     eax, eax
.text:0000000000007A3A                 mov     edx, r12d
.text:0000000000007A3D                 mov     edi, ebp        ; fd
.text:0000000000007A3F                 call    _fcntl
.text:0000000000007A44                 test    eax, eax
.text:0000000000007A46                 mov     ebx, eax
.text:0000000000007A48                 js      loc_78F0
.text:0000000000007A4E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000007A58                 jmp     loc_79D3
.text:0000000000007A5D ; ---------------------------------------------------------------------------
.text:0000000000007A5D
.text:0000000000007A5D loc_7A5D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:0000000000007A5D                 call    ___stack_chk_fail
.text:0000000000007A62 ; ---------------------------------------------------------------------------
.text:0000000000007A62
.text:0000000000007A62 loc_7A62:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000007A62                 mov     rax, [rsp+68h+var_58]
.text:0000000000007A67                 xor     esi, esi        ; cmd
.text:0000000000007A69                 mov     edx, [rax+10h]
.text:0000000000007A6C                 xor     eax, eax
.text:0000000000007A6E                 call    _fcntl
.text:0000000000007A73                 mov     ebx, eax
.text:0000000000007A75                 jmp     loc_78F0
.text:0000000000007A7A ; ---------------------------------------------------------------------------
.text:0000000000007A7A
.text:0000000000007A7A loc_7A7A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:0000000000007A7A                 mov     rax, [rsp+68h+var_60]
.text:0000000000007A7F                 jmp     loc_7949
.text:0000000000007A84 ; ---------------------------------------------------------------------------
.text:0000000000007A84
.text:0000000000007A84 loc_7A84:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000007A84                 mov     rax, [rsp+68h+var_60]
.text:0000000000007A89                 jmp     loc_79A1
.text:0000000000007A89 ; } // starts at 7810
.text:0000000000007A89 rpl_fcntl       endp
.text:0000000000007A89
.text:0000000000007A89 ; ---------------------------------------------------------------------------
.text:0000000000007A8E                 align 10h
.text:0000000000007A90
.text:0000000000007A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000007A90
.text:0000000000007A90 ; Attributes: info_from_lumina
.text:0000000000007A90
.text:0000000000007A90 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000007A90                 public rpl_fflush
.text:0000000000007A90 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000007A90 ; __unwind {
.text:0000000000007A90                 test    rdi, rdi
.text:0000000000007A93                 push    rbx
.text:0000000000007A94                 mov     rbx, rdi
.text:0000000000007A97                 jz      short loc_7AAA
.text:0000000000007A99                 call    ___freading
.text:0000000000007A9E                 test    eax, eax
.text:0000000000007AA0                 jz      short loc_7AAA
.text:0000000000007AA2                 test    dword ptr [rbx], 100h
.text:0000000000007AA8                 jnz     short loc_7AB8
.text:0000000000007AAA
.text:0000000000007AAA loc_7AAA:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000007AAA                                         ; rpl_fflush+10↑j
.text:0000000000007AAA                 mov     rdi, rbx        ; stream
.text:0000000000007AAD                 pop     rbx
.text:0000000000007AAE                 jmp     _fflush
.text:0000000000007AAE ; ---------------------------------------------------------------------------
.text:0000000000007AB3                 align 8
.text:0000000000007AB8
.text:0000000000007AB8 loc_7AB8:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000007AB8                 mov     rdi, rbx
.text:0000000000007ABB                 mov     edx, 1
.text:0000000000007AC0                 xor     esi, esi
.text:0000000000007AC2                 call    rpl_fseeko
.text:0000000000007AC7                 mov     rdi, rbx        ; stream
.text:0000000000007ACA                 pop     rbx
.text:0000000000007ACB                 jmp     _fflush
.text:0000000000007ACB ; } // starts at 7A90
.text:0000000000007ACB rpl_fflush      endp
.text:0000000000007ACB
.text:0000000000007AD0
.text:0000000000007AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007AD0
.text:0000000000007AD0 ; Attributes: info_from_lumina
.text:0000000000007AD0
.text:0000000000007AD0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000007AD0                 public rpl_fseeko
.text:0000000000007AD0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000007AD0 ; __unwind {
.text:0000000000007AD0                 mov     rax, [rdi+8]
.text:0000000000007AD4                 cmp     [rdi+10h], rax
.text:0000000000007AD8                 jz      short loc_7AE0
.text:0000000000007ADA
.text:0000000000007ADA loc_7ADA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000007ADA                                         ; rpl_fseeko+1F↓j
.text:0000000000007ADA                 jmp     _fseeko
.text:0000000000007ADA ; ---------------------------------------------------------------------------
.text:0000000000007ADF                 align 20h
.text:0000000000007AE0
.text:0000000000007AE0 loc_7AE0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000007AE0                 mov     rax, [rdi+20h]
.text:0000000000007AE4                 cmp     [rdi+28h], rax
.text:0000000000007AE8                 jnz     short loc_7ADA
.text:0000000000007AEA                 cmp     qword ptr [rdi+48h], 0
.text:0000000000007AEF                 jnz     short loc_7ADA
.text:0000000000007AF1                 push    r12
.text:0000000000007AF3                 push    rbp
.text:0000000000007AF4                 mov     r12d, edx
.text:0000000000007AF7                 push    rbx
.text:0000000000007AF8                 mov     rbp, rsi
.text:0000000000007AFB                 mov     rbx, rdi
.text:0000000000007AFE                 call    _fileno
.text:0000000000007B03                 mov     edx, r12d       ; whence
.text:0000000000007B06                 mov     rsi, rbp        ; offset
.text:0000000000007B09                 mov     edi, eax        ; fd
.text:0000000000007B0B                 call    _lseek
.text:0000000000007B10                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007B14                 jz      short loc_7B22
.text:0000000000007B16                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000007B19                 mov     [rbx+90h], rax
.text:0000000000007B20                 xor     eax, eax
.text:0000000000007B22
.text:0000000000007B22 loc_7B22:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000007B22                 pop     rbx
.text:0000000000007B23                 pop     rbp
.text:0000000000007B24                 pop     r12
.text:0000000000007B26                 retn
.text:0000000000007B26 ; } // starts at 7AD0
.text:0000000000007B26 rpl_fseeko      endp
.text:0000000000007B26
.text:0000000000007B26 ; ---------------------------------------------------------------------------
.text:0000000000007B27                 align 10h
.text:0000000000007B30
.text:0000000000007B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B30
.text:0000000000007B30 ; Attributes: info_from_lumina
.text:0000000000007B30
.text:0000000000007B30 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000007B30                 public rpl_mbrtowc
.text:0000000000007B30 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000007B30                                         ; build_wcs_buffer+6F↓p ...
.text:0000000000007B30
.text:0000000000007B30 pwc             = dword ptr -34h
.text:0000000000007B30 var_30          = qword ptr -30h
.text:0000000000007B30
.text:0000000000007B30 ; __unwind {
.text:0000000000007B30                 push    r13
.text:0000000000007B32                 push    r12
.text:0000000000007B34                 mov     r13, rsi
.text:0000000000007B37                 push    rbp
.text:0000000000007B38                 push    rbx
.text:0000000000007B39                 mov     rbx, rdi
.text:0000000000007B3C                 mov     r12, rdx
.text:0000000000007B3F                 sub     rsp, 18h
.text:0000000000007B43                 mov     rax, fs:28h
.text:0000000000007B4C                 mov     [rsp+38h+var_30], rax
.text:0000000000007B51                 xor     eax, eax
.text:0000000000007B53                 lea     rax, [rsp+38h+pwc]
.text:0000000000007B58                 test    rdi, rdi
.text:0000000000007B5B                 cmovz   rbx, rax
.text:0000000000007B5F                 mov     rdi, rbx        ; pwc
.text:0000000000007B62                 call    _mbrtowc
.text:0000000000007B67                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000007B6B                 mov     rbp, rax
.text:0000000000007B6E                 jbe     short loc_7B90
.text:0000000000007B70                 test    r12, r12
.text:0000000000007B73                 jz      short loc_7B90
.text:0000000000007B75                 xor     edi, edi
.text:0000000000007B77                 call    hard_locale
.text:0000000000007B7C                 test    al, al
.text:0000000000007B7E                 jnz     short loc_7B90
.text:0000000000007B80                 movzx   eax, byte ptr [r13+0]
.text:0000000000007B85                 mov     ebp, 1
.text:0000000000007B8A                 mov     [rbx], eax
.text:0000000000007B8C                 nop     dword ptr [rax+00h]
.text:0000000000007B90
.text:0000000000007B90 loc_7B90:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000007B90                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000007B90                 mov     rdx, [rsp+38h+var_30]
.text:0000000000007B95                 xor     rdx, fs:28h
.text:0000000000007B9E                 mov     rax, rbp
.text:0000000000007BA1                 jnz     short loc_7BAE
.text:0000000000007BA3                 add     rsp, 18h
.text:0000000000007BA7                 pop     rbx
.text:0000000000007BA8                 pop     rbp
.text:0000000000007BA9                 pop     r12
.text:0000000000007BAB                 pop     r13
.text:0000000000007BAD                 retn
.text:0000000000007BAE ; ---------------------------------------------------------------------------
.text:0000000000007BAE
.text:0000000000007BAE loc_7BAE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000007BAE                 call    ___stack_chk_fail
.text:0000000000007BAE ; } // starts at 7B30
.text:0000000000007BAE rpl_mbrtowc     endp
.text:0000000000007BAE
.text:0000000000007BAE ; ---------------------------------------------------------------------------
.text:0000000000007BB3                 align 20h
.text:0000000000007BC0
.text:0000000000007BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007BC0
.text:0000000000007BC0
.text:0000000000007BC0 peek_token_bracket proc near            ; CODE XREF: parse_bracket_element_constprop_37+1FB↓p
.text:0000000000007BC0                                         ; parse_expression+854↓p ...
.text:0000000000007BC0 ; __unwind {
.text:0000000000007BC0                 mov     rax, [rsi+48h]
.text:0000000000007BC4                 cmp     [rsi+68h], rax
.text:0000000000007BC8                 jle     short loc_7C20
.text:0000000000007BCA                 mov     r8, [rsi+8]
.text:0000000000007BCE                 cmp     dword ptr [rsi+90h], 1
.text:0000000000007BD5                 movzx   ecx, byte ptr [r8+rax]
.text:0000000000007BDA                 mov     [rdi], cl
.text:0000000000007BDC                 jle     short loc_7BF3
.text:0000000000007BDE                 cmp     rax, [rsi+30h]
.text:0000000000007BE2                 jz      short loc_7BF3
.text:0000000000007BE4                 mov     r9, [rsi+10h]
.text:0000000000007BE8                 cmp     dword ptr [r9+rax*4], 0FFFFFFFFh
.text:0000000000007BED                 jz      loc_7C6F
.text:0000000000007BF3
.text:0000000000007BF3 loc_7BF3:                               ; CODE XREF: peek_token_bracket+1C↑j
.text:0000000000007BF3                                         ; peek_token_bracket+22↑j
.text:0000000000007BF3                 cmp     cl, 5Ch ; '\'
.text:0000000000007BF6                 jz      short loc_7C60
.text:0000000000007BF8                 cmp     cl, 5Bh ; '['
.text:0000000000007BFB                 jz      short loc_7C30
.text:0000000000007BFD                 cmp     cl, 5Dh ; ']'
.text:0000000000007C00                 jz      loc_7CA0
.text:0000000000007C06                 cmp     cl, 5Eh ; '^'
.text:0000000000007C09                 jz      loc_7C90
.text:0000000000007C0F                 cmp     cl, 2Dh ; '-'
.text:0000000000007C12                 jnz     short loc_7C6F
.text:0000000000007C14                 mov     byte ptr [rdi+8], 16h
.text:0000000000007C18                 mov     eax, 1
.text:0000000000007C1D                 retn
.text:0000000000007C1D ; ---------------------------------------------------------------------------
.text:0000000000007C1E                 align 20h
.text:0000000000007C20
.text:0000000000007C20 loc_7C20:                               ; CODE XREF: peek_token_bracket+8↑j
.text:0000000000007C20                 mov     byte ptr [rdi+8], 2
.text:0000000000007C24                 xor     eax, eax
.text:0000000000007C26                 retn
.text:0000000000007C26 ; ---------------------------------------------------------------------------
.text:0000000000007C27                 align 10h
.text:0000000000007C30
.text:0000000000007C30 loc_7C30:                               ; CODE XREF: peek_token_bracket+3B↑j
.text:0000000000007C30                 lea     rcx, [rax+1]
.text:0000000000007C34                 cmp     rcx, [rsi+58h]
.text:0000000000007C38                 jge     short loc_7C80
.text:0000000000007C3A                 movzx   eax, byte ptr [r8+rax+1]
.text:0000000000007C40                 cmp     al, 3Ah ; ':'
.text:0000000000007C42                 mov     [rdi], al
.text:0000000000007C44                 jz      loc_7CE0
.text:0000000000007C4A                 cmp     al, 3Dh ; '='
.text:0000000000007C4C                 jz      loc_7CD0
.text:0000000000007C52                 cmp     al, 2Eh ; '.'
.text:0000000000007C54                 jnz     short loc_7C80
.text:0000000000007C56                 mov     byte ptr [rdi+8], 1Ah
.text:0000000000007C5A                 mov     eax, 2
.text:0000000000007C5F                 retn
.text:0000000000007C60 ; ---------------------------------------------------------------------------
.text:0000000000007C60
.text:0000000000007C60 loc_7C60:                               ; CODE XREF: peek_token_bracket+36↑j
.text:0000000000007C60                 and     edx, 1
.text:0000000000007C63                 jz      short loc_7C6F
.text:0000000000007C65                 lea     rdx, [rax+1]
.text:0000000000007C69                 cmp     rdx, [rsi+58h]
.text:0000000000007C6D                 jl      short loc_7CB0
.text:0000000000007C6F
.text:0000000000007C6F loc_7C6F:                               ; CODE XREF: peek_token_bracket+2D↑j
.text:0000000000007C6F                                         ; peek_token_bracket+52↑j ...
.text:0000000000007C6F                 mov     byte ptr [rdi+8], 1
.text:0000000000007C73                 mov     eax, 1
.text:0000000000007C78                 retn
.text:0000000000007C78 ; ---------------------------------------------------------------------------
.text:0000000000007C79                 align 20h
.text:0000000000007C80
.text:0000000000007C80 loc_7C80:                               ; CODE XREF: peek_token_bracket+78↑j
.text:0000000000007C80                                         ; peek_token_bracket+94↑j ...
.text:0000000000007C80                 mov     byte ptr [rdi+8], 1
.text:0000000000007C84                 mov     byte ptr [rdi], 5Bh ; '['
.text:0000000000007C87                 mov     eax, 1
.text:0000000000007C8C                 retn
.text:0000000000007C8C ; ---------------------------------------------------------------------------
.text:0000000000007C8D                 align 10h
.text:0000000000007C90
.text:0000000000007C90 loc_7C90:                               ; CODE XREF: peek_token_bracket+49↑j
.text:0000000000007C90                 mov     byte ptr [rdi+8], 19h
.text:0000000000007C94                 mov     eax, 1
.text:0000000000007C99                 retn
.text:0000000000007C99 ; ---------------------------------------------------------------------------
.text:0000000000007C9A                 align 20h
.text:0000000000007CA0
.text:0000000000007CA0 loc_7CA0:                               ; CODE XREF: peek_token_bracket+40↑j
.text:0000000000007CA0                 mov     byte ptr [rdi+8], 15h
.text:0000000000007CA4                 mov     eax, 1
.text:0000000000007CA9                 retn
.text:0000000000007CA9 ; ---------------------------------------------------------------------------
.text:0000000000007CAA                 align 10h
.text:0000000000007CB0
.text:0000000000007CB0 loc_7CB0:                               ; CODE XREF: peek_token_bracket+AD↑j
.text:0000000000007CB0                 mov     [rsi+48h], rdx
.text:0000000000007CB4                 movzx   eax, byte ptr [r8+rax+1]
.text:0000000000007CBA                 mov     byte ptr [rdi+8], 1
.text:0000000000007CBE                 mov     [rdi], al
.text:0000000000007CC0                 mov     eax, 1
.text:0000000000007CC5                 retn
.text:0000000000007CC5 ; ---------------------------------------------------------------------------
.text:0000000000007CC6                 align 10h
.text:0000000000007CD0
.text:0000000000007CD0 loc_7CD0:                               ; CODE XREF: peek_token_bracket+8C↑j
.text:0000000000007CD0                 mov     byte ptr [rdi+8], 1Ch
.text:0000000000007CD4                 mov     eax, 2
.text:0000000000007CD9                 retn
.text:0000000000007CD9 ; ---------------------------------------------------------------------------
.text:0000000000007CDA                 align 20h
.text:0000000000007CE0
.text:0000000000007CE0 loc_7CE0:                               ; CODE XREF: peek_token_bracket+84↑j
.text:0000000000007CE0                 and     edx, 4
.text:0000000000007CE3                 jz      short loc_7C80
.text:0000000000007CE5                 mov     byte ptr [rdi+8], 1Eh
.text:0000000000007CE9                 mov     eax, 2
.text:0000000000007CEE                 retn
.text:0000000000007CEE ; } // starts at 7BC0
.text:0000000000007CEE peek_token_bracket endp
.text:0000000000007CEE
.text:0000000000007CEE ; ---------------------------------------------------------------------------
.text:0000000000007CEF                 align 10h
.text:0000000000007CF0
.text:0000000000007CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007CF0
.text:0000000000007CF0
.text:0000000000007CF0 mark_opt_subexp proc near               ; DATA XREF: parse_expression+594↓o
.text:0000000000007CF0 ; __unwind {
.text:0000000000007CF0                 cmp     byte ptr [rsi+30h], 11h
.text:0000000000007CF4                 jz      short loc_7D00
.text:0000000000007CF6
.text:0000000000007CF6 loc_7CF6:                               ; CODE XREF: mark_opt_subexp+14↓j
.text:0000000000007CF6                 xor     eax, eax
.text:0000000000007CF8                 retn
.text:0000000000007CF8 ; ---------------------------------------------------------------------------
.text:0000000000007CF9                 align 20h
.text:0000000000007D00
.text:0000000000007D00 loc_7D00:                               ; CODE XREF: mark_opt_subexp+4↑j
.text:0000000000007D00                 cmp     rdi, [rsi+28h]
.text:0000000000007D04                 jnz     short loc_7CF6
.text:0000000000007D06                 or      byte ptr [rsi+32h], 8
.text:0000000000007D0A                 xor     eax, eax
.text:0000000000007D0C                 retn
.text:0000000000007D0C ; } // starts at 7CF0
.text:0000000000007D0C mark_opt_subexp endp
.text:0000000000007D0C
.text:0000000000007D0C ; ---------------------------------------------------------------------------
.text:0000000000007D0D                 align 10h
.text:0000000000007D10
.text:0000000000007D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D10
.text:0000000000007D10
.text:0000000000007D10 check_dst_limits_calc_pos_1 proc near   ; CODE XREF: check_dst_limits_calc_pos_1+15D↓p
.text:0000000000007D10                                         ; check_dst_limits_calc_pos+58↓j
.text:0000000000007D10
.text:0000000000007D10 var_78          = qword ptr -78h
.text:0000000000007D10 var_70          = dword ptr -70h
.text:0000000000007D10 var_6C          = dword ptr -6Ch
.text:0000000000007D10 var_68          = qword ptr -68h
.text:0000000000007D10 var_60          = qword ptr -60h
.text:0000000000007D10 var_58          = dword ptr -58h
.text:0000000000007D10 var_52          = word ptr -52h
.text:0000000000007D10 var_50          = qword ptr -50h
.text:0000000000007D10 var_48          = qword ptr -48h
.text:0000000000007D10 var_40          = qword ptr -40h
.text:0000000000007D10
.text:0000000000007D10 ; __unwind {
.text:0000000000007D10                 push    r15
.text:0000000000007D12                 push    r14
.text:0000000000007D14                 mov     r9, rdx
.text:0000000000007D17                 push    r13
.text:0000000000007D19                 push    r12
.text:0000000000007D1B                 lea     rdx, [rcx+rcx*2]
.text:0000000000007D1F                 push    rbp
.text:0000000000007D20                 push    rbx
.text:0000000000007D21                 mov     r15d, esi
.text:0000000000007D24                 sub     rsp, 48h
.text:0000000000007D28                 mov     r14, [rdi+98h]
.text:0000000000007D2F                 mov     [rsp+78h+var_78], rdi
.text:0000000000007D33                 mov     rax, [r14+30h]
.text:0000000000007D37                 lea     r12, [rax+rdx*8]
.text:0000000000007D3B                 cmp     qword ptr [r12+8], 0
.text:0000000000007D41                 jle     loc_7ED5
.text:0000000000007D47                 lea     rax, [r8+r8*4]
.text:0000000000007D4B                 mov     r11, rcx
.text:0000000000007D4E                 mov     ecx, r9d
.text:0000000000007D51                 mov     r10, r8
.text:0000000000007D54                 xor     ebx, ebx
.text:0000000000007D56                 mov     [rsp+78h+var_58], esi
.text:0000000000007D5A                 shl     rax, 3
.text:0000000000007D5E                 mov     r15, r9
.text:0000000000007D61                 mov     [rsp+78h+var_68], r11
.text:0000000000007D66                 mov     [rsp+78h+var_50], rax
.text:0000000000007D6B                 mov     eax, 1
.text:0000000000007D70                 shl     rax, cl
.text:0000000000007D73                 mov     [rsp+78h+var_60], rax
.text:0000000000007D78                 not     eax
.text:0000000000007D7A                 mov     [rsp+78h+var_52], ax
.text:0000000000007D7F                 mov     eax, esi
.text:0000000000007D81                 and     eax, 1
.text:0000000000007D84                 mov     [rsp+78h+var_6C], eax
.text:0000000000007D88                 mov     eax, esi
.text:0000000000007D8A                 and     eax, 2
.text:0000000000007D8D                 mov     [rsp+78h+var_70], eax
.text:0000000000007D91                 jmp     short loc_7DB5
.text:0000000000007D91 ; ---------------------------------------------------------------------------
.text:0000000000007D93                 align 8
.text:0000000000007D98
.text:0000000000007D98 loc_7D98:                               ; CODE XREF: check_dst_limits_calc_pos_1+BF↓j
.text:0000000000007D98                 cmp     dl, 9
.text:0000000000007D9B                 jz      loc_7EF0
.text:0000000000007DA1                 cmp     dl, 4
.text:0000000000007DA4                 jz      short loc_7DF8
.text:0000000000007DA6
.text:0000000000007DA6 loc_7DA6:                               ; CODE XREF: check_dst_limits_calc_pos_1+C7↓j
.text:0000000000007DA6                                         ; check_dst_limits_calc_pos_1+CC↓j ...
.text:0000000000007DA6                 add     rbx, 1
.text:0000000000007DAA                 cmp     [r12+8], rbx
.text:0000000000007DAF                 jle     loc_7ED0
.text:0000000000007DB5
.text:0000000000007DB5 loc_7DB5:                               ; CODE XREF: check_dst_limits_calc_pos_1+81↑j
.text:0000000000007DB5                                         ; check_dst_limits_calc_pos_1+1B4↓j
.text:0000000000007DB5                 mov     rax, [r12+10h]
.text:0000000000007DBA                 mov     rbp, [rax+rbx*8]
.text:0000000000007DBE                 mov     rax, rbp
.text:0000000000007DC1                 shl     rax, 4
.text:0000000000007DC5                 add     rax, [r14]
.text:0000000000007DC8                 movzx   edx, byte ptr [rax+8]
.text:0000000000007DCC                 cmp     dl, 8
.text:0000000000007DCF                 jnz     short loc_7D98
.text:0000000000007DD1                 mov     ecx, [rsp+78h+var_6C]
.text:0000000000007DD5                 test    ecx, ecx
.text:0000000000007DD7                 jz      short loc_7DA6
.text:0000000000007DD9                 cmp     [rax], r15
.text:0000000000007DDC                 jnz     short loc_7DA6
.text:0000000000007DDE
.text:0000000000007DDE loc_7DDE:                               ; CODE XREF: check_dst_limits_calc_pos_1+165↓j
.text:0000000000007DDE                 add     rsp, 48h
.text:0000000000007DE2                 mov     eax, 0FFFFFFFFh
.text:0000000000007DE7                 pop     rbx
.text:0000000000007DE8                 pop     rbp
.text:0000000000007DE9                 pop     r12
.text:0000000000007DEB                 pop     r13
.text:0000000000007DED                 pop     r14
.text:0000000000007DEF                 pop     r15
.text:0000000000007DF1                 retn
.text:0000000000007DF1 ; ---------------------------------------------------------------------------
.text:0000000000007DF2                 align 8
.text:0000000000007DF8
.text:0000000000007DF8 loc_7DF8:                               ; CODE XREF: check_dst_limits_calc_pos_1+94↑j
.text:0000000000007DF8                 cmp     r10, 0FFFFFFFFFFFFFFFFh
.text:0000000000007DFC                 jz      short loc_7DA6
.text:0000000000007DFE                 mov     rax, [rsp+78h+var_78]
.text:0000000000007E02                 mov     r13, [rsp+78h+var_50]
.text:0000000000007E07                 mov     rdi, rbp
.text:0000000000007E0A                 mov     [rsp+78h+var_48], r12
.text:0000000000007E0F                 mov     [rsp+78h+var_40], rbx
.text:0000000000007E14                 mov     r12, r10
.text:0000000000007E17                 add     r13, [rax+0D8h]
.text:0000000000007E1E                 lea     rax, [rbp+rbp*2+0]
.text:0000000000007E23                 mov     rbp, r14
.text:0000000000007E26                 mov     r14, rdi
.text:0000000000007E29                 shl     rax, 3
.text:0000000000007E2D                 mov     rbx, rax
.text:0000000000007E30
.text:0000000000007E30 loc_7E30:                               ; CODE XREF: check_dst_limits_calc_pos_1+199↓j
.text:0000000000007E30                 cmp     [r13+0], r14
.text:0000000000007E34                 jnz     short loc_7EA0
.text:0000000000007E36                 cmp     r15, 3Fh ; '?'
.text:0000000000007E3A                 jg      short loc_7E48
.text:0000000000007E3C                 movzx   eax, word ptr [r13+22h]
.text:0000000000007E41                 test    [rsp+78h+var_60], rax
.text:0000000000007E46                 jz      short loc_7EA0
.text:0000000000007E48
.text:0000000000007E48 loc_7E48:                               ; CODE XREF: check_dst_limits_calc_pos_1+12A↑j
.text:0000000000007E48                 mov     rax, [rbp+28h]
.text:0000000000007E4C                 mov     rax, [rax+rbx+10h]
.text:0000000000007E51                 mov     rcx, [rax]
.text:0000000000007E54                 cmp     [rsp+78h+var_68], rcx
.text:0000000000007E59                 jz      loc_7F20
.text:0000000000007E5F                 mov     esi, [rsp+78h+var_58]
.text:0000000000007E63                 mov     rdi, [rsp+78h+var_78]
.text:0000000000007E67                 mov     r8, r12
.text:0000000000007E6A                 mov     rdx, r15
.text:0000000000007E6D                 call    check_dst_limits_calc_pos_1
.text:0000000000007E72                 cmp     eax, 0FFFFFFFFh
.text:0000000000007E75                 jz      loc_7DDE
.text:0000000000007E7B                 test    eax, eax
.text:0000000000007E7D                 jnz     short loc_7E87
.text:0000000000007E7F                 mov     esi, [rsp+78h+var_70]
.text:0000000000007E83                 test    esi, esi
.text:0000000000007E85                 jnz     short loc_7F05
.text:0000000000007E87
.text:0000000000007E87 loc_7E87:                               ; CODE XREF: check_dst_limits_calc_pos_1+16D↑j
.text:0000000000007E87                 cmp     r15, 3Fh ; '?'
.text:0000000000007E8B                 jg      short loc_7EA0
.text:0000000000007E8D                 movzx   eax, [rsp+78h+var_52]
.text:0000000000007E92                 and     [r13+22h], ax
.text:0000000000007E97                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007EA0
.text:0000000000007EA0 loc_7EA0:                               ; CODE XREF: check_dst_limits_calc_pos_1+124↑j
.text:0000000000007EA0                                         ; check_dst_limits_calc_pos_1+136↑j ...
.text:0000000000007EA0                 add     r13, 28h ; '('
.text:0000000000007EA4                 cmp     byte ptr [r13-8], 0
.text:0000000000007EA9                 jnz     short loc_7E30
.text:0000000000007EAB                 mov     rbx, [rsp+78h+var_40]
.text:0000000000007EB0                 mov     r10, r12
.text:0000000000007EB3                 mov     r12, [rsp+78h+var_48]
.text:0000000000007EB8                 mov     r14, rbp
.text:0000000000007EBB                 add     rbx, 1
.text:0000000000007EBF                 cmp     [r12+8], rbx
.text:0000000000007EC4                 jg      loc_7DB5
.text:0000000000007ECA                 nop     word ptr [rax+rax+00h]
.text:0000000000007ED0
.text:0000000000007ED0 loc_7ED0:                               ; CODE XREF: check_dst_limits_calc_pos_1+9F↑j
.text:0000000000007ED0                 mov     r15d, [rsp+78h+var_58]
.text:0000000000007ED5
.text:0000000000007ED5 loc_7ED5:                               ; CODE XREF: check_dst_limits_calc_pos_1+31↑j
.text:0000000000007ED5                 add     rsp, 48h
.text:0000000000007ED9                 mov     eax, r15d
.text:0000000000007EDC                 pop     rbx
.text:0000000000007EDD                 sar     eax, 1
.text:0000000000007EDF                 pop     rbp
.text:0000000000007EE0                 pop     r12
.text:0000000000007EE2                 pop     r13
.text:0000000000007EE4                 pop     r14
.text:0000000000007EE6                 pop     r15
.text:0000000000007EE8                 retn
.text:0000000000007EE8 ; ---------------------------------------------------------------------------
.text:0000000000007EE9                 align 10h
.text:0000000000007EF0
.text:0000000000007EF0 loc_7EF0:                               ; CODE XREF: check_dst_limits_calc_pos_1+8B↑j
.text:0000000000007EF0                 mov     edx, [rsp+78h+var_70]
.text:0000000000007EF4                 test    edx, edx
.text:0000000000007EF6                 jz      loc_7DA6
.text:0000000000007EFC                 cmp     [rax], r15
.text:0000000000007EFF                 jnz     loc_7DA6
.text:0000000000007F05
.text:0000000000007F05 loc_7F05:                               ; CODE XREF: check_dst_limits_calc_pos_1+175↑j
.text:0000000000007F05                 add     rsp, 48h
.text:0000000000007F09                 xor     eax, eax
.text:0000000000007F0B                 pop     rbx
.text:0000000000007F0C                 pop     rbp
.text:0000000000007F0D                 pop     r12
.text:0000000000007F0F                 pop     r13
.text:0000000000007F11                 pop     r14
.text:0000000000007F13                 pop     r15
.text:0000000000007F15                 retn
.text:0000000000007F15 ; ---------------------------------------------------------------------------
.text:0000000000007F16                 align 20h
.text:0000000000007F20
.text:0000000000007F20 loc_7F20:                               ; CODE XREF: check_dst_limits_calc_pos_1+149↑j
.text:0000000000007F20                 mov     r15d, [rsp+78h+var_58]
.text:0000000000007F25                 add     rsp, 48h
.text:0000000000007F29                 pop     rbx
.text:0000000000007F2A                 pop     rbp
.text:0000000000007F2B                 mov     eax, r15d
.text:0000000000007F2E                 and     eax, 1
.text:0000000000007F31                 pop     r12
.text:0000000000007F33                 neg     eax
.text:0000000000007F35                 pop     r13
.text:0000000000007F37                 pop     r14
.text:0000000000007F39                 pop     r15
.text:0000000000007F3B                 retn
.text:0000000000007F3B ; } // starts at 7D10
.text:0000000000007F3B check_dst_limits_calc_pos_1 endp
.text:0000000000007F3B
.text:0000000000007F3B ; ---------------------------------------------------------------------------
.text:0000000000007F3C                 align 20h
.text:0000000000007F40
.text:0000000000007F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F40
.text:0000000000007F40
.text:0000000000007F40 check_dst_limits_calc_pos proc near     ; CODE XREF: check_dst_limits_isra_13+1AE↓p
.text:0000000000007F40                                         ; check_dst_limits_isra_13+1D0↓p
.text:0000000000007F40 ; __unwind {
.text:0000000000007F40                 mov     rax, [rdi+0D8h]
.text:0000000000007F47                 lea     rsi, [rsi+rsi*4]
.text:0000000000007F4B                 lea     rax, [rax+rsi*8]
.text:0000000000007F4F                 mov     r10, [rax+10h]
.text:0000000000007F53                 cmp     r10, r8
.text:0000000000007F56                 jg      short loc_7FA0
.text:0000000000007F58                 mov     rax, [rax+18h]
.text:0000000000007F5C                 cmp     rax, r8
.text:0000000000007F5F                 jl      short loc_7F80
.text:0000000000007F61                 xor     esi, esi
.text:0000000000007F63                 cmp     r10, r8
.text:0000000000007F66                 setz    sil
.text:0000000000007F6A                 or      esi, 2
.text:0000000000007F6D                 cmp     rax, r8
.text:0000000000007F70                 jz      short loc_7F95
.text:0000000000007F72                 xor     eax, eax
.text:0000000000007F74                 cmp     r10, r8
.text:0000000000007F77                 jz      short loc_7F90
.text:0000000000007F79                 rep retn
.text:0000000000007F79 ; ---------------------------------------------------------------------------
.text:0000000000007F7B                 align 20h
.text:0000000000007F80
.text:0000000000007F80 loc_7F80:                               ; CODE XREF: check_dst_limits_calc_pos+1F↑j
.text:0000000000007F80                 mov     eax, 1
.text:0000000000007F85                 retn
.text:0000000000007F85 ; ---------------------------------------------------------------------------
.text:0000000000007F86                 align 10h
.text:0000000000007F90
.text:0000000000007F90 loc_7F90:                               ; CODE XREF: check_dst_limits_calc_pos+37↑j
.text:0000000000007F90                 mov     esi, 1
.text:0000000000007F95
.text:0000000000007F95 loc_7F95:                               ; CODE XREF: check_dst_limits_calc_pos+30↑j
.text:0000000000007F95                 mov     r8, r9
.text:0000000000007F98                 jmp     check_dst_limits_calc_pos_1
.text:0000000000007F98 ; ---------------------------------------------------------------------------
.text:0000000000007F9D                 align 20h
.text:0000000000007FA0
.text:0000000000007FA0 loc_7FA0:                               ; CODE XREF: check_dst_limits_calc_pos+16↑j
.text:0000000000007FA0                 mov     eax, 0FFFFFFFFh
.text:0000000000007FA5                 retn
.text:0000000000007FA5 ; } // starts at 7F40
.text:0000000000007FA5 check_dst_limits_calc_pos endp
.text:0000000000007FA5
.text:0000000000007FA5 ; ---------------------------------------------------------------------------
.text:0000000000007FA6                 align 10h
.text:0000000000007FB0
.text:0000000000007FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007FB0
.text:0000000000007FB0
.text:0000000000007FB0 postorder       proc near               ; CODE XREF: parse_expression+ED↓p
.text:0000000000007FB0                                         ; parse_expression+398↓p ...
.text:0000000000007FB0 ; __unwind {
.text:0000000000007FB0                 push    r12
.text:0000000000007FB2                 mov     r12, rsi
.text:0000000000007FB5                 push    rbp
.text:0000000000007FB6                 mov     rbp, rdx
.text:0000000000007FB9                 push    rbx
.text:0000000000007FBA                 mov     rbx, rdi
.text:0000000000007FBD                 jmp     short loc_7FC3
.text:0000000000007FBD ; ---------------------------------------------------------------------------
.text:0000000000007FBF                 align 20h
.text:0000000000007FC0
.text:0000000000007FC0 loc_7FC0:                               ; CODE XREF: postorder+1A↓j
.text:0000000000007FC0                                         ; postorder+23↓j ...
.text:0000000000007FC0                 mov     rbx, rax
.text:0000000000007FC3
.text:0000000000007FC3 loc_7FC3:                               ; CODE XREF: postorder+D↑j
.text:0000000000007FC3                 mov     rax, [rbx+8]
.text:0000000000007FC7                 test    rax, rax
.text:0000000000007FCA                 jnz     short loc_7FC0
.text:0000000000007FCC                 mov     rax, [rbx+10h]
.text:0000000000007FD0                 test    rax, rax
.text:0000000000007FD3                 jnz     short loc_7FC0
.text:0000000000007FD5                 mov     rsi, rbx
.text:0000000000007FD8                 mov     rdi, rbp
.text:0000000000007FDB                 call    r12
.text:0000000000007FDE                 test    eax, eax
.text:0000000000007FE0                 jnz     short loc_8016
.text:0000000000007FE2                 nop     word ptr [rax+rax+00h]
.text:0000000000007FE8
.text:0000000000007FE8 loc_7FE8:                               ; CODE XREF: postorder+64↓j
.text:0000000000007FE8                 mov     rdx, [rbx]
.text:0000000000007FEB                 test    rdx, rdx
.text:0000000000007FEE                 jz      short loc_8016
.text:0000000000007FF0                 mov     rax, [rdx+10h]
.text:0000000000007FF4                 cmp     rax, rbx
.text:0000000000007FF7                 mov     rbx, rdx
.text:0000000000007FFA                 setz    sil
.text:0000000000007FFE                 test    rax, rax
.text:0000000000008001                 setz    cl
.text:0000000000008004                 or      sil, cl
.text:0000000000008007                 jz      short loc_7FC0
.text:0000000000008009                 mov     rsi, rbx
.text:000000000000800C                 mov     rdi, rbp
.text:000000000000800F                 call    r12
.text:0000000000008012                 test    eax, eax
.text:0000000000008014                 jz      short loc_7FE8
.text:0000000000008016
.text:0000000000008016 loc_8016:                               ; CODE XREF: postorder+30↑j
.text:0000000000008016                                         ; postorder+3E↑j
.text:0000000000008016                 pop     rbx
.text:0000000000008017                 pop     rbp
.text:0000000000008018                 pop     r12
.text:000000000000801A                 retn
.text:000000000000801A ; } // starts at 7FB0
.text:000000000000801A postorder       endp
.text:000000000000801A
.text:000000000000801A ; ---------------------------------------------------------------------------
.text:000000000000801B                 align 20h
.text:0000000000008020
.text:0000000000008020 ; =============== S U B R O U T I N E =======================================
.text:0000000000008020
.text:0000000000008020
.text:0000000000008020 preorder        proc near               ; CODE XREF: re_compile_internal+61B↓p
.text:0000000000008020                                         ; re_compile_internal+6A3↓p
.text:0000000000008020 ; __unwind {
.text:0000000000008020                 push    r12
.text:0000000000008022                 mov     r12, rsi
.text:0000000000008025                 push    rbp
.text:0000000000008026                 mov     rbp, rdx
.text:0000000000008029                 push    rbx
.text:000000000000802A                 mov     rbx, rdi
.text:000000000000802D                 jmp     short loc_8033
.text:000000000000802D ; ---------------------------------------------------------------------------
.text:000000000000802F                 align 10h
.text:0000000000008030
.text:0000000000008030 loc_8030:                               ; CODE XREF: preorder+29↓j
.text:0000000000008030                                         ; preorder+3F↓j
.text:0000000000008030                 mov     rbx, rdx
.text:0000000000008033
.text:0000000000008033 loc_8033:                               ; CODE XREF: preorder+D↑j
.text:0000000000008033                 mov     rsi, rbx
.text:0000000000008036                 mov     rdi, rbp
.text:0000000000008039                 call    r12
.text:000000000000803C                 test    eax, eax
.text:000000000000803E                 jnz     short loc_806C
.text:0000000000008040                 mov     rdx, [rbx+8]
.text:0000000000008044                 xor     ecx, ecx
.text:0000000000008046                 test    rdx, rdx
.text:0000000000008049                 jnz     short loc_8030
.text:000000000000804B                 jmp     short loc_8053
.text:000000000000804B ; ---------------------------------------------------------------------------
.text:000000000000804D                 align 10h
.text:0000000000008050
.text:0000000000008050 loc_8050:                               ; CODE XREF: preorder+4A↓j
.text:0000000000008050                 mov     rbx, rdx
.text:0000000000008053
.text:0000000000008053 loc_8053:                               ; CODE XREF: preorder+2B↑j
.text:0000000000008053                 mov     rdx, [rbx+10h]
.text:0000000000008057                 cmp     rdx, rcx
.text:000000000000805A                 jz      short loc_8061
.text:000000000000805C                 test    rdx, rdx
.text:000000000000805F                 jnz     short loc_8030
.text:0000000000008061
.text:0000000000008061 loc_8061:                               ; CODE XREF: preorder+3A↑j
.text:0000000000008061                 mov     rdx, [rbx]
.text:0000000000008064                 mov     rcx, rbx
.text:0000000000008067                 test    rdx, rdx
.text:000000000000806A                 jnz     short loc_8050
.text:000000000000806C
.text:000000000000806C loc_806C:                               ; CODE XREF: preorder+1E↑j
.text:000000000000806C                 pop     rbx
.text:000000000000806D                 pop     rbp
.text:000000000000806E                 pop     r12
.text:0000000000008070                 retn
.text:0000000000008070 ; } // starts at 8020
.text:0000000000008070 preorder        endp
.text:0000000000008070
.text:0000000000008070 ; ---------------------------------------------------------------------------
.text:0000000000008071                 align 20h
.text:0000000000008080
.text:0000000000008080 ; =============== S U B R O U T I N E =======================================
.text:0000000000008080
.text:0000000000008080
.text:0000000000008080 re_string_realloc_buffers proc near     ; CODE XREF: extend_buffers+38↓p
.text:0000000000008080                                         ; re_search_internal+24B↓p ...
.text:0000000000008080 ; __unwind {
.text:0000000000008080                 push    rbp
.text:0000000000008081                 push    rbx
.text:0000000000008082                 mov     rbp, rsi
.text:0000000000008085                 mov     rbx, rdi
.text:0000000000008088                 sub     rsp, 8
.text:000000000000808C                 cmp     dword ptr [rdi+90h], 1
.text:0000000000008093                 jle     short loc_80DD
.text:0000000000008095                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:000000000000809F                 cmp     rsi, rax
.text:00000000000080A2                 ja      short loc_8110
.text:00000000000080A4                 mov     rdi, [rdi+10h]  ; ptr
.text:00000000000080A8                 lea     rsi, ds:0[rsi*4] ; size
.text:00000000000080B0                 call    _realloc
.text:00000000000080B5                 test    rax, rax
.text:00000000000080B8                 jz      short loc_8110
.text:00000000000080BA                 mov     rdi, [rbx+18h]  ; ptr
.text:00000000000080BE                 mov     [rbx+10h], rax
.text:00000000000080C2                 test    rdi, rdi
.text:00000000000080C5                 jz      short loc_80DD
.text:00000000000080C7                 lea     rsi, ds:0[rbp*8] ; size
.text:00000000000080CF                 call    _realloc
.text:00000000000080D4                 test    rax, rax
.text:00000000000080D7                 jz      short loc_8110
.text:00000000000080D9                 mov     [rbx+18h], rax
.text:00000000000080DD
.text:00000000000080DD loc_80DD:                               ; CODE XREF: re_string_realloc_buffers+13↑j
.text:00000000000080DD                                         ; re_string_realloc_buffers+45↑j
.text:00000000000080DD                 cmp     byte ptr [rbx+8Bh], 0
.text:00000000000080E4                 jnz     short loc_80F8
.text:00000000000080E6
.text:00000000000080E6 loc_80E6:                               ; CODE XREF: re_string_realloc_buffers+8D↓j
.text:00000000000080E6                 mov     [rbx+40h], rbp
.text:00000000000080EA                 add     rsp, 8
.text:00000000000080EE                 xor     eax, eax
.text:00000000000080F0                 pop     rbx
.text:00000000000080F1                 pop     rbp
.text:00000000000080F2                 retn
.text:00000000000080F2 ; ---------------------------------------------------------------------------
.text:00000000000080F3                 align 8
.text:00000000000080F8
.text:00000000000080F8 loc_80F8:                               ; CODE XREF: re_string_realloc_buffers+64↑j
.text:00000000000080F8                 mov     rdi, [rbx+8]    ; ptr
.text:00000000000080FC                 mov     rsi, rbp        ; size
.text:00000000000080FF                 call    _realloc
.text:0000000000008104                 test    rax, rax
.text:0000000000008107                 jz      short loc_8110
.text:0000000000008109                 mov     [rbx+8], rax
.text:000000000000810D                 jmp     short loc_80E6
.text:000000000000810D ; ---------------------------------------------------------------------------
.text:000000000000810F                 align 10h
.text:0000000000008110
.text:0000000000008110 loc_8110:                               ; CODE XREF: re_string_realloc_buffers+22↑j
.text:0000000000008110                                         ; re_string_realloc_buffers+38↑j ...
.text:0000000000008110                 add     rsp, 8
.text:0000000000008114                 mov     eax, 0Ch
.text:0000000000008119                 pop     rbx
.text:000000000000811A                 pop     rbp
.text:000000000000811B                 retn
.text:000000000000811B ; } // starts at 8080
.text:000000000000811B re_string_realloc_buffers endp
.text:000000000000811B
.text:000000000000811B ; ---------------------------------------------------------------------------
.text:000000000000811C                 align 20h
.text:0000000000008120
.text:0000000000008120 ; =============== S U B R O U T I N E =======================================
.text:0000000000008120
.text:0000000000008120
.text:0000000000008120 re_node_set_insert_last proc near       ; CODE XREF: register_state+75↓p
.text:0000000000008120                                         ; re_compile_internal+B61↓p
.text:0000000000008120 ; __unwind {
.text:0000000000008120                 push    rbp
.text:0000000000008121                 push    rbx
.text:0000000000008122                 mov     rbp, rsi
.text:0000000000008125                 mov     rbx, rdi
.text:0000000000008128                 sub     rsp, 8
.text:000000000000812C                 mov     rsi, [rdi+8]
.text:0000000000008130                 cmp     [rdi], rsi
.text:0000000000008133                 mov     rax, [rdi+10h]
.text:0000000000008137                 jz      short loc_8158
.text:0000000000008139
.text:0000000000008139 loc_8139:                               ; CODE XREF: re_node_set_insert_last+5C↓j
.text:0000000000008139                 lea     rdx, [rsi+1]
.text:000000000000813D                 mov     [rbx+8], rdx
.text:0000000000008141                 mov     [rax+rsi*8], rbp
.text:0000000000008145                 mov     eax, 1
.text:000000000000814A
.text:000000000000814A loc_814A:                               ; CODE XREF: re_node_set_insert_last+62↓j
.text:000000000000814A                 add     rsp, 8
.text:000000000000814E                 pop     rbx
.text:000000000000814F                 pop     rbp
.text:0000000000008150                 retn
.text:0000000000008150 ; ---------------------------------------------------------------------------
.text:0000000000008151                 align 8
.text:0000000000008158
.text:0000000000008158 loc_8158:                               ; CODE XREF: re_node_set_insert_last+17↑j
.text:0000000000008158                 add     rsi, 1
.text:000000000000815C                 lea     rdx, [rsi+rsi]
.text:0000000000008160                 shl     rsi, 4          ; size
.text:0000000000008164                 mov     [rdi], rdx
.text:0000000000008167                 mov     rdi, rax        ; ptr
.text:000000000000816A                 call    _realloc
.text:000000000000816F                 test    rax, rax
.text:0000000000008172                 jz      short loc_8180
.text:0000000000008174                 mov     [rbx+10h], rax
.text:0000000000008178                 mov     rsi, [rbx+8]
.text:000000000000817C                 jmp     short loc_8139
.text:000000000000817C ; ---------------------------------------------------------------------------
.text:000000000000817E                 align 20h
.text:0000000000008180
.text:0000000000008180 loc_8180:                               ; CODE XREF: re_node_set_insert_last+52↑j
.text:0000000000008180                 xor     eax, eax
.text:0000000000008182                 jmp     short loc_814A
.text:0000000000008182 ; } // starts at 8120
.text:0000000000008182 re_node_set_insert_last endp
.text:0000000000008182
.text:0000000000008182 ; ---------------------------------------------------------------------------
.text:0000000000008184                 align 10h
.text:0000000000008190
.text:0000000000008190 ; =============== S U B R O U T I N E =======================================
.text:0000000000008190
.text:0000000000008190
.text:0000000000008190 re_node_set_insert proc near            ; CODE XREF: duplicate_node_closure+E0↓p
.text:0000000000008190                                         ; duplicate_node_closure+11A↓p ...
.text:0000000000008190 ; __unwind {
.text:0000000000008190                 push    rbp
.text:0000000000008191                 push    rbx
.text:0000000000008192                 mov     rbp, rsi
.text:0000000000008195                 mov     rbx, rdi
.text:0000000000008198                 sub     rsp, 8
.text:000000000000819C                 mov     rdx, [rdi]
.text:000000000000819F                 test    rdx, rdx
.text:00000000000081A2                 jz      short loc_81C8
.text:00000000000081A4                 mov     rsi, [rdi+8]
.text:00000000000081A8                 mov     rax, [rdi+10h]
.text:00000000000081AC                 test    rsi, rsi
.text:00000000000081AF                 jnz     short loc_8200
.text:00000000000081B1                 mov     [rax], rbp
.text:00000000000081B4                 add     qword ptr [rdi+8], 1
.text:00000000000081B9                 mov     eax, 1
.text:00000000000081BE
.text:00000000000081BE loc_81BE:                               ; CODE XREF: re_node_set_insert+B1↓j
.text:00000000000081BE                                         ; re_node_set_insert+F7↓j ...
.text:00000000000081BE                 add     rsp, 8
.text:00000000000081C2                 pop     rbx
.text:00000000000081C3                 pop     rbp
.text:00000000000081C4                 retn
.text:00000000000081C4 ; ---------------------------------------------------------------------------
.text:00000000000081C5                 align 8
.text:00000000000081C8
.text:00000000000081C8 loc_81C8:                               ; CODE XREF: re_node_set_insert+12↑j
.text:00000000000081C8                 mov     qword ptr [rdi], 1
.text:00000000000081CF                 mov     qword ptr [rdi+8], 1
.text:00000000000081D7                 mov     edi, 8          ; size
.text:00000000000081DC                 call    _malloc
.text:00000000000081E1                 test    rax, rax
.text:00000000000081E4                 mov     [rbx+10h], rax
.text:00000000000081E8                 jz      loc_8278
.text:00000000000081EE                 mov     [rax], rbp
.text:00000000000081F1                 add     rsp, 8
.text:00000000000081F5                 mov     eax, 1
.text:00000000000081FA                 pop     rbx
.text:00000000000081FB                 pop     rbp
.text:00000000000081FC                 retn
.text:00000000000081FC ; ---------------------------------------------------------------------------
.text:00000000000081FD                 align 20h
.text:0000000000008200
.text:0000000000008200 loc_8200:                               ; CODE XREF: re_node_set_insert+1F↑j
.text:0000000000008200                 cmp     rdx, rsi
.text:0000000000008203                 jz      loc_8290
.text:0000000000008209
.text:0000000000008209 loc_8209:                               ; CODE XREF: re_node_set_insert+120↓j
.text:0000000000008209                 cmp     [rax], rbp
.text:000000000000820C                 lea     rdx, ds:0[rsi*8]
.text:0000000000008214                 jle     short loc_8250
.text:0000000000008216                 test    rsi, rsi
.text:0000000000008219                 jle     short loc_8233
.text:000000000000821B                 add     rdx, rax
.text:000000000000821E                 xchg    ax, ax
.text:0000000000008220
.text:0000000000008220 loc_8220:                               ; CODE XREF: re_node_set_insert+9F↓j
.text:0000000000008220                 mov     rcx, [rdx-8]
.text:0000000000008224                 sub     rdx, 8
.text:0000000000008228                 mov     [rdx+8], rcx
.text:000000000000822C                 cmp     rax, rdx
.text:000000000000822F                 jnz     short loc_8220
.text:0000000000008231                 xor     edx, edx
.text:0000000000008233
.text:0000000000008233 loc_8233:                               ; CODE XREF: re_node_set_insert+89↑j
.text:0000000000008233                                         ; re_node_set_insert+C8↓j ...
.text:0000000000008233                 mov     [rax+rdx], rbp
.text:0000000000008237                 mov     eax, 1
.text:000000000000823C                 add     qword ptr [rbx+8], 1
.text:0000000000008241                 jmp     loc_81BE
.text:0000000000008241 ; ---------------------------------------------------------------------------
.text:0000000000008246                 align 10h
.text:0000000000008250
.text:0000000000008250 loc_8250:                               ; CODE XREF: re_node_set_insert+84↑j
.text:0000000000008250                 mov     rcx, [rax+rdx-8]
.text:0000000000008255                 cmp     rbp, rcx
.text:0000000000008258                 jge     short loc_8233
.text:000000000000825A                 nop     word ptr [rax+rax+00h]
.text:0000000000008260
.text:0000000000008260 loc_8260:                               ; CODE XREF: re_node_set_insert+E0↓j
.text:0000000000008260                 mov     [rax+rdx], rcx
.text:0000000000008264                 sub     rdx, 8
.text:0000000000008268                 mov     rcx, [rax+rdx-8]
.text:000000000000826D                 cmp     rcx, rbp
.text:0000000000008270                 jg      short loc_8260
.text:0000000000008272                 jmp     short loc_8233
.text:0000000000008272 ; ---------------------------------------------------------------------------
.text:0000000000008274                 align 8
.text:0000000000008278
.text:0000000000008278 loc_8278:                               ; CODE XREF: re_node_set_insert+58↑j
.text:0000000000008278                 mov     qword ptr [rbx+8], 0
.text:0000000000008280                 mov     qword ptr [rbx], 0
.text:0000000000008287                 jmp     loc_81BE
.text:0000000000008287 ; ---------------------------------------------------------------------------
.text:000000000000828C                 align 10h
.text:0000000000008290
.text:0000000000008290 loc_8290:                               ; CODE XREF: re_node_set_insert+73↑j
.text:0000000000008290                 lea     rdx, [rsi+rsi]
.text:0000000000008294                 shl     rsi, 4          ; size
.text:0000000000008298                 mov     [rdi], rdx
.text:000000000000829B                 mov     rdi, rax        ; ptr
.text:000000000000829E                 call    _realloc
.text:00000000000082A3                 test    rax, rax
.text:00000000000082A6                 jz      short loc_82B5
.text:00000000000082A8                 mov     [rbx+10h], rax
.text:00000000000082AC                 mov     rsi, [rbx+8]
.text:00000000000082B0                 jmp     loc_8209
.text:00000000000082B5 ; ---------------------------------------------------------------------------
.text:00000000000082B5
.text:00000000000082B5 loc_82B5:                               ; CODE XREF: re_node_set_insert+116↑j
.text:00000000000082B5                 xor     eax, eax
.text:00000000000082B7                 jmp     loc_81BE
.text:00000000000082B7 ; } // starts at 8190
.text:00000000000082B7 re_node_set_insert endp
.text:00000000000082B7
.text:00000000000082B7 ; ---------------------------------------------------------------------------
.text:00000000000082BC                 align 20h
.text:00000000000082C0
.text:00000000000082C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000082C0
.text:00000000000082C0
.text:00000000000082C0 register_state  proc near               ; CODE XREF: re_acquire_state_context+201↓p
.text:00000000000082C0                                         ; re_acquire_state+186↓p
.text:00000000000082C0 ; __unwind {
.text:00000000000082C0                 push    r14
.text:00000000000082C2                 push    r13
.text:00000000000082C4                 mov     r14, rdi
.text:00000000000082C7                 push    r12
.text:00000000000082C9                 push    rbp
.text:00000000000082CA                 mov     r12, rdx
.text:00000000000082CD                 push    rbx
.text:00000000000082CE                 mov     rbx, [rsi+10h]
.text:00000000000082D2                 mov     rbp, rsi
.text:00000000000082D5                 mov     [rsi], rdx
.text:00000000000082D8                 mov     qword ptr [rsi+28h], 0
.text:00000000000082E0                 lea     r13, [rsi+20h]
.text:00000000000082E4                 lea     rdi, ds:0[rbx*8] ; size
.text:00000000000082EC                 mov     [rsi+20h], rbx
.text:00000000000082F0                 call    _malloc
.text:00000000000082F5                 test    rax, rax
.text:00000000000082F8                 mov     [rbp+30h], rax
.text:00000000000082FC                 jz      short loc_833E
.text:00000000000082FE                 test    rbx, rbx
.text:0000000000008301                 jle     short loc_8350
.text:0000000000008303                 xor     ebx, ebx
.text:0000000000008305                 jmp     short loc_831A
.text:0000000000008305 ; ---------------------------------------------------------------------------
.text:0000000000008307                 align 10h
.text:0000000000008310
.text:0000000000008310 loc_8310:                               ; CODE XREF: register_state+70↓j
.text:0000000000008310                                         ; register_state+7C↓j
.text:0000000000008310                 add     rbx, 1
.text:0000000000008314                 cmp     [rbp+10h], rbx
.text:0000000000008318                 jle     short loc_8350
.text:000000000000831A
.text:000000000000831A loc_831A:                               ; CODE XREF: register_state+45↑j
.text:000000000000831A                 mov     rax, [rbp+18h]
.text:000000000000831E                 mov     rsi, [rax+rbx*8]
.text:0000000000008322                 mov     rax, rsi
.text:0000000000008325                 shl     rax, 4
.text:0000000000008329                 add     rax, [r14]
.text:000000000000832C                 test    byte ptr [rax+8], 8
.text:0000000000008330                 jnz     short loc_8310
.text:0000000000008332                 mov     rdi, r13
.text:0000000000008335                 call    re_node_set_insert_last
.text:000000000000833A                 test    al, al
.text:000000000000833C                 jnz     short loc_8310
.text:000000000000833E
.text:000000000000833E loc_833E:                               ; CODE XREF: register_state+3C↑j
.text:000000000000833E                                         ; register_state+D9↓j
.text:000000000000833E                 pop     rbx
.text:000000000000833F                 mov     eax, 0Ch
.text:0000000000008344                 pop     rbp
.text:0000000000008345                 pop     r12
.text:0000000000008347                 pop     r13
.text:0000000000008349                 pop     r14
.text:000000000000834B                 retn
.text:000000000000834B ; ---------------------------------------------------------------------------
.text:000000000000834C                 align 10h
.text:0000000000008350
.text:0000000000008350 loc_8350:                               ; CODE XREF: register_state+41↑j
.text:0000000000008350                                         ; register_state+58↑j
.text:0000000000008350                 and     r12, [r14+88h]
.text:0000000000008357                 mov     rax, [r14+40h]
.text:000000000000835B                 lea     rdx, [r12+r12*2]
.text:000000000000835F                 lea     rbx, [rax+rdx*8]
.text:0000000000008363                 mov     rdx, [rbx]
.text:0000000000008366                 cmp     [rbx+8], rdx
.text:000000000000836A                 mov     rax, [rbx+10h]
.text:000000000000836E                 lea     rsi, [rdx+1]
.text:0000000000008372                 jle     short loc_8386
.text:0000000000008374
.text:0000000000008374 loc_8374:                               ; CODE XREF: register_state+EA↓j
.text:0000000000008374                 mov     [rbx], rsi
.text:0000000000008377                 mov     [rax+rdx*8], rbp
.text:000000000000837B                 xor     eax, eax
.text:000000000000837D                 pop     rbx
.text:000000000000837E                 pop     rbp
.text:000000000000837F                 pop     r12
.text:0000000000008381                 pop     r13
.text:0000000000008383                 pop     r14
.text:0000000000008385                 retn
.text:0000000000008386 ; ---------------------------------------------------------------------------
.text:0000000000008386
.text:0000000000008386 loc_8386:                               ; CODE XREF: register_state+B2↑j
.text:0000000000008386                 lea     r12, [rsi+rsi]
.text:000000000000838A                 mov     rdi, rax        ; ptr
.text:000000000000838D                 shl     rsi, 4          ; size
.text:0000000000008391                 call    _realloc
.text:0000000000008396                 test    rax, rax
.text:0000000000008399                 jz      short loc_833E
.text:000000000000839B                 mov     rdx, [rbx]
.text:000000000000839E                 mov     [rbx+10h], rax
.text:00000000000083A2                 mov     [rbx+8], r12
.text:00000000000083A6                 lea     rsi, [rdx+1]
.text:00000000000083AA                 jmp     short loc_8374
.text:00000000000083AA ; } // starts at 82C0
.text:00000000000083AA register_state  endp
.text:00000000000083AA
.text:00000000000083AA ; ---------------------------------------------------------------------------
.text:00000000000083AC                 align 10h
.text:00000000000083B0
.text:00000000000083B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000083B0
.text:00000000000083B0
.text:00000000000083B0 build_upper_buffer proc near            ; CODE XREF: extend_buffers:loc_8D50↓p
.text:00000000000083B0                                         ; re_string_reconstruct+673↓p ...
.text:00000000000083B0 ; __unwind {
.text:00000000000083B0                 push    r12
.text:00000000000083B2                 mov     r12, [rdi+58h]
.text:00000000000083B6                 cmp     [rdi+40h], r12
.text:00000000000083BA                 push    rbp
.text:00000000000083BB                 mov     rbp, rdi
.text:00000000000083BE                 cmovle  r12, [rdi+40h]
.text:00000000000083C3                 push    rbx
.text:00000000000083C4                 mov     rbx, [rdi+30h]
.text:00000000000083C8                 cmp     r12, rbx
.text:00000000000083CB                 jle     short loc_8405
.text:00000000000083CD                 call    ___ctype_toupper_loc
.text:00000000000083D2                 nop     word ptr [rax+rax+00h]
.text:00000000000083D8
.text:00000000000083D8 loc_83D8:                               ; CODE XREF: build_upper_buffer+53↓j
.text:00000000000083D8                 mov     rdx, [rbp+0]
.text:00000000000083DC                 mov     rcx, [rbp+78h]
.text:00000000000083E0                 add     rdx, rbx
.text:00000000000083E3                 add     rdx, [rbp+28h]
.text:00000000000083E7                 test    rcx, rcx
.text:00000000000083EA                 movzx   edx, byte ptr [rdx]
.text:00000000000083ED                 jnz     short loc_8418
.text:00000000000083EF
.text:00000000000083EF loc_83EF:                               ; CODE XREF: build_upper_buffer+6C↓j
.text:00000000000083EF                 mov     rsi, [rax]
.text:00000000000083F2                 mov     rcx, [rbp+8]
.text:00000000000083F6                 mov     edx, [rsi+rdx*4]
.text:00000000000083F9                 mov     [rcx+rbx], dl
.text:00000000000083FC                 add     rbx, 1
.text:0000000000008400                 cmp     r12, rbx
.text:0000000000008403                 jnz     short loc_83D8
.text:0000000000008405
.text:0000000000008405 loc_8405:                               ; CODE XREF: build_upper_buffer+1B↑j
.text:0000000000008405                 mov     [rbp+30h], rbx
.text:0000000000008409                 mov     [rbp+38h], rbx
.text:000000000000840D                 pop     rbx
.text:000000000000840E                 pop     rbp
.text:000000000000840F                 pop     r12
.text:0000000000008411                 retn
.text:0000000000008411 ; ---------------------------------------------------------------------------
.text:0000000000008412                 align 8
.text:0000000000008418
.text:0000000000008418 loc_8418:                               ; CODE XREF: build_upper_buffer+3D↑j
.text:0000000000008418                 movzx   edx, byte ptr [rcx+rdx]
.text:000000000000841C                 jmp     short loc_83EF
.text:000000000000841C ; } // starts at 83B0
.text:000000000000841C build_upper_buffer endp
.text:000000000000841C
.text:000000000000841C ; ---------------------------------------------------------------------------
.text:000000000000841E                 align 20h
.text:0000000000008420
.text:0000000000008420 ; =============== S U B R O U T I N E =======================================
.text:0000000000008420
.text:0000000000008420
.text:0000000000008420 build_wcs_buffer proc near              ; CODE XREF: extend_buffers+113↓p
.text:0000000000008420                                         ; re_string_reconstruct:loc_B928↓p ...
.text:0000000000008420
.text:0000000000008420 var_8C          = dword ptr -8Ch
.text:0000000000008420 var_88          = byte ptr -88h
.text:0000000000008420 var_40          = qword ptr -40h
.text:0000000000008420
.text:0000000000008420 ; __unwind {
.text:0000000000008420                 push    r15
.text:0000000000008422                 push    r14
.text:0000000000008424                 push    r13
.text:0000000000008426                 push    r12
.text:0000000000008428                 push    rbp
.text:0000000000008429                 push    rbx
.text:000000000000842A                 mov     rbx, rdi
.text:000000000000842D                 sub     rsp, 68h
.text:0000000000008431                 mov     r12, [rdi+58h]
.text:0000000000008435                 mov     rbp, [rdi+30h]
.text:0000000000008439                 mov     rax, fs:28h
.text:0000000000008442                 mov     [rsp+98h+var_40], rax
.text:0000000000008447                 xor     eax, eax
.text:0000000000008449                 cmp     [rdi+40h], r12
.text:000000000000844D                 cmovle  r12, [rdi+40h]
.text:0000000000008452                 cmp     r12, rbp
.text:0000000000008455                 jle     loc_84E4
.text:000000000000845B                 lea     r14, [rdi+20h]
.text:000000000000845F                 lea     r13, [rsp+98h+var_8C]
.text:0000000000008464                 nop     dword ptr [rax+00h]
.text:0000000000008468
.text:0000000000008468 loc_8468:                               ; CODE XREF: build_wcs_buffer+C2↓j
.text:0000000000008468                                         ; build_wcs_buffer+F6↓j
.text:0000000000008468                 mov     rdi, [rbx+78h]
.text:000000000000846C                 mov     rdx, r12
.text:000000000000846F                 mov     r15, [rbx+20h]
.text:0000000000008473                 sub     rdx, rbp
.text:0000000000008476                 test    rdi, rdi
.text:0000000000008479                 jnz     loc_8560
.text:000000000000847F                 mov     rsi, [rbx+28h]
.text:0000000000008483                 add     rsi, rbp
.text:0000000000008486                 add     rsi, [rbx]
.text:0000000000008489
.text:0000000000008489 loc_8489:                               ; CODE XREF: build_wcs_buffer+151↓j
.text:0000000000008489                                         ; build_wcs_buffer+167↓j ...
.text:0000000000008489                 mov     rcx, r14
.text:000000000000848C                 mov     rdi, r13
.text:000000000000848F                 call    rpl_mbrtowc
.text:0000000000008494                 lea     rdx, [rax-1]
.text:0000000000008498                 cmp     rdx, 0FFFFFFFFFFFFFFFDh
.text:000000000000849C                 ja      loc_8530
.text:00000000000084A2                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000084A6                 mov     edx, [rsp+98h+var_8C]
.text:00000000000084AA                 jz      short loc_8520
.text:00000000000084AC
.text:00000000000084AC loc_84AC:                               ; CODE XREF: build_wcs_buffer+137↓j
.text:00000000000084AC                 mov     rcx, [rbx+10h]
.text:00000000000084B0                 lea     rsi, [rbp+1]
.text:00000000000084B4                 lea     rdi, ds:0[rbp*4]
.text:00000000000084BC                 mov     [rcx+rbp*4], edx
.text:00000000000084BF                 add     rbp, rax
.text:00000000000084C2                 cmp     rsi, rbp
.text:00000000000084C5                 jge     short loc_8510
.text:00000000000084C7                 lea     rdx, [rcx+rdi+4]
.text:00000000000084CC                 lea     rax, [rcx+rbp*4]
.text:00000000000084D0
.text:00000000000084D0 loc_84D0:                               ; CODE XREF: build_wcs_buffer+BD↓j
.text:00000000000084D0                 mov     dword ptr [rdx], 0FFFFFFFFh
.text:00000000000084D6                 add     rdx, 4
.text:00000000000084DA                 cmp     rax, rdx
.text:00000000000084DD                 jnz     short loc_84D0
.text:00000000000084DF                 cmp     rbp, r12
.text:00000000000084E2                 jl      short loc_8468
.text:00000000000084E4
.text:00000000000084E4 loc_84E4:                               ; CODE XREF: build_wcs_buffer+35↑j
.text:00000000000084E4                                         ; build_wcs_buffer+FC↓j ...
.text:00000000000084E4                 mov     rax, [rsp+98h+var_40]
.text:00000000000084E9                 xor     rax, fs:28h
.text:00000000000084F2                 mov     [rbx+30h], rbp
.text:00000000000084F6                 mov     [rbx+38h], rbp
.text:00000000000084FA                 jnz     loc_85DE
.text:0000000000008500                 add     rsp, 68h
.text:0000000000008504                 pop     rbx
.text:0000000000008505                 pop     rbp
.text:0000000000008506                 pop     r12
.text:0000000000008508                 pop     r13
.text:000000000000850A                 pop     r14
.text:000000000000850C                 pop     r15
.text:000000000000850E                 retn
.text:000000000000850E ; ---------------------------------------------------------------------------
.text:000000000000850F                 align 10h
.text:0000000000008510
.text:0000000000008510 loc_8510:                               ; CODE XREF: build_wcs_buffer+A5↑j
.text:0000000000008510                 mov     rbp, rsi
.text:0000000000008513                 cmp     rbp, r12
.text:0000000000008516                 jl      loc_8468
.text:000000000000851C                 jmp     short loc_84E4
.text:000000000000851C ; ---------------------------------------------------------------------------
.text:000000000000851E                 align 20h
.text:0000000000008520
.text:0000000000008520 loc_8520:                               ; CODE XREF: build_wcs_buffer+8A↑j
.text:0000000000008520                 mov     rax, [rbx+58h]
.text:0000000000008524                 cmp     [rbx+40h], rax
.text:0000000000008528                 jl      loc_85C8
.text:000000000000852E                 xchg    ax, ax
.text:0000000000008530
.text:0000000000008530 loc_8530:                               ; CODE XREF: build_wcs_buffer+7C↑j
.text:0000000000008530                 mov     rax, [rbx]
.text:0000000000008533                 mov     rcx, [rbx+78h]
.text:0000000000008537                 add     rax, rbp
.text:000000000000853A                 add     rax, [rbx+28h]
.text:000000000000853E                 test    rcx, rcx
.text:0000000000008541                 movzx   edx, byte ptr [rax]
.text:0000000000008544                 mov     [rsp+98h+var_8C], edx
.text:0000000000008548                 jnz     loc_85D1
.text:000000000000854E
.text:000000000000854E loc_854E:                               ; CODE XREF: build_wcs_buffer+1B9↓j
.text:000000000000854E                 mov     [rbx+20h], r15
.text:0000000000008552                 mov     eax, 1
.text:0000000000008557                 jmp     loc_84AC
.text:0000000000008557 ; ---------------------------------------------------------------------------
.text:000000000000855C                 align 20h
.text:0000000000008560
.text:0000000000008560 loc_8560:                               ; CODE XREF: build_wcs_buffer+59↑j
.text:0000000000008560                 mov     ecx, [rbx+90h]
.text:0000000000008566                 xor     eax, eax
.text:0000000000008568                 lea     rsi, [rsp+98h+var_88]
.text:000000000000856D                 test    ecx, ecx
.text:000000000000856F                 jg      short loc_8591
.text:0000000000008571                 jmp     loc_8489
.text:0000000000008571 ; ---------------------------------------------------------------------------
.text:0000000000008576                 align 20h
.text:0000000000008580
.text:0000000000008580 loc_8580:                               ; CODE XREF: build_wcs_buffer+19B↓j
.text:0000000000008580                 add     rax, 1
.text:0000000000008584                 cmp     rdx, rax
.text:0000000000008587                 jz      loc_8489
.text:000000000000858D                 mov     rdi, [rbx+78h]
.text:0000000000008591
.text:0000000000008591 loc_8591:                               ; CODE XREF: build_wcs_buffer+14F↑j
.text:0000000000008591                 mov     rcx, [rbx]
.text:0000000000008594                 add     rcx, rbp
.text:0000000000008597                 add     rcx, rax
.text:000000000000859A                 add     rcx, [rbx+28h]
.text:000000000000859E                 movzx   ecx, byte ptr [rcx]
.text:00000000000085A1                 movzx   ecx, byte ptr [rdi+rcx]
.text:00000000000085A5                 mov     rdi, [rbx+8]
.text:00000000000085A9                 add     rdi, rbp
.text:00000000000085AC                 mov     [rdi+rax], cl
.text:00000000000085AF                 mov     [rsi+rax], cl
.text:00000000000085B2                 lea     ecx, [rax+1]
.text:00000000000085B5                 cmp     ecx, [rbx+90h]
.text:00000000000085BB                 jl      short loc_8580
.text:00000000000085BD                 jmp     loc_8489
.text:00000000000085BD ; ---------------------------------------------------------------------------
.text:00000000000085C2                 align 8
.text:00000000000085C8
.text:00000000000085C8 loc_85C8:                               ; CODE XREF: build_wcs_buffer+108↑j
.text:00000000000085C8                 mov     [rbx+20h], r15
.text:00000000000085CC                 jmp     loc_84E4
.text:00000000000085D1 ; ---------------------------------------------------------------------------
.text:00000000000085D1
.text:00000000000085D1 loc_85D1:                               ; CODE XREF: build_wcs_buffer+128↑j
.text:00000000000085D1                 movzx   edx, byte ptr [rcx+rdx]
.text:00000000000085D5                 mov     [rsp+98h+var_8C], edx
.text:00000000000085D9                 jmp     loc_854E
.text:00000000000085DE ; ---------------------------------------------------------------------------
.text:00000000000085DE
.text:00000000000085DE loc_85DE:                               ; CODE XREF: build_wcs_buffer+DA↑j
.text:00000000000085DE                 call    ___stack_chk_fail
.text:00000000000085DE ; } // starts at 8420
.text:00000000000085DE build_wcs_buffer endp
.text:00000000000085DE
.text:00000000000085DE ; ---------------------------------------------------------------------------
.text:00000000000085E3                 align 10h
.text:00000000000085F0
.text:00000000000085F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000085F0
.text:00000000000085F0
.text:00000000000085F0 build_wcs_upper_buffer proc near        ; CODE XREF: extend_buffers+95↓j
.text:00000000000085F0                                         ; re_string_reconstruct+12A↓p ...
.text:00000000000085F0
.text:00000000000085F0 var_D0          = qword ptr -0D0h
.text:00000000000085F0 src             = qword ptr -0C8h
.text:00000000000085F0 var_C0          = qword ptr -0C0h
.text:00000000000085F0 var_B8          = qword ptr -0B8h
.text:00000000000085F0 var_B0          = qword ptr -0B0h
.text:00000000000085F0 var_A8          = qword ptr -0A8h
.text:00000000000085F0 var_A0          = qword ptr -0A0h
.text:00000000000085F0 wc              = dword ptr -94h
.text:00000000000085F0 ps              = mbstate_t ptr -90h
.text:00000000000085F0 s               = byte ptr -88h
.text:00000000000085F0 var_40          = qword ptr -40h
.text:00000000000085F0
.text:00000000000085F0 ; __unwind {
.text:00000000000085F0                 push    r15
.text:00000000000085F2                 push    r14
.text:00000000000085F4                 mov     r14, rdi
.text:00000000000085F7                 push    r13
.text:00000000000085F9                 push    r12
.text:00000000000085FB                 push    rbp
.text:00000000000085FC                 push    rbx
.text:00000000000085FD                 sub     rsp, 0A8h
.text:0000000000008604                 mov     rbx, [rdi+58h]
.text:0000000000008608                 mov     r15, [rdi+30h]
.text:000000000000860C                 mov     rax, fs:28h
.text:0000000000008615                 mov     [rsp+0D8h+var_40], rax
.text:000000000000861D                 xor     eax, eax
.text:000000000000861F                 cmp     [rdi+40h], rbx
.text:0000000000008623                 cmovle  rbx, [rdi+40h]
.text:0000000000008628                 cmp     byte ptr [rdi+8Ah], 0
.text:000000000000862F                 jnz     short loc_863C
.text:0000000000008631                 cmp     qword ptr [rdi+78h], 0
.text:0000000000008636                 jz      loc_87C0
.text:000000000000863C
.text:000000000000863C loc_863C:                               ; CODE XREF: build_wcs_upper_buffer+3F↑j
.text:000000000000863C                                         ; build_wcs_upper_buffer+1D7↓j
.text:000000000000863C                 mov     r13, [r14+38h]
.text:0000000000008640
.text:0000000000008640 loc_8640:                               ; CODE XREF: build_wcs_upper_buffer+198↓j
.text:0000000000008640                                         ; build_wcs_upper_buffer+1C2↓j ...
.text:0000000000008640                 cmp     r15, rbx
.text:0000000000008643                 jl      short loc_8680
.text:0000000000008645
.text:0000000000008645 loc_8645:                               ; CODE XREF: build_wcs_upper_buffer+4D1↓j
.text:0000000000008645                 mov     [r14+30h], r15
.text:0000000000008649                 mov     [r14+38h], r13
.text:000000000000864D                 xor     eax, eax
.text:000000000000864F
.text:000000000000864F loc_864F:                               ; CODE XREF: build_wcs_upper_buffer+382↓j
.text:000000000000864F                                         ; build_wcs_upper_buffer+5EB↓j
.text:000000000000864F                 mov     rcx, [rsp+0D8h+var_40]
.text:0000000000008657                 xor     rcx, fs:28h
.text:0000000000008660                 jnz     loc_8BEA
.text:0000000000008666                 add     rsp, 0A8h
.text:000000000000866D                 pop     rbx
.text:000000000000866E                 pop     rbp
.text:000000000000866F                 pop     r12
.text:0000000000008671                 pop     r13
.text:0000000000008673                 pop     r14
.text:0000000000008675                 pop     r15
.text:0000000000008677                 retn
.text:0000000000008677 ; ---------------------------------------------------------------------------
.text:0000000000008678                 align 20h
.text:0000000000008680
.text:0000000000008680 loc_8680:                               ; CODE XREF: build_wcs_upper_buffer+53↑j
.text:0000000000008680                 lea     rax, [r14+20h]
.text:0000000000008684                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000008689                 mov     rax, rbx
.text:000000000000868C                 sub     rax, r15
.text:000000000000868F                 mov     [rsp+0D8h+src], rax
.text:0000000000008694                 lea     rax, [rsp+0D8h+wc]
.text:0000000000008699                 mov     [rsp+0D8h+var_B8], rax
.text:000000000000869E
.text:000000000000869E loc_869E:                               ; CODE XREF: build_wcs_upper_buffer+41B↓j
.text:000000000000869E                 mov     rdx, [r14+78h]
.text:00000000000086A2                 mov     rax, [r14+20h]
.text:00000000000086A6                 test    rdx, rdx
.text:00000000000086A9                 mov     qword ptr [rsp+0D8h+ps.__count], rax
.text:00000000000086AE                 jnz     loc_89B9
.text:00000000000086B4                 mov     rbp, [r14+28h]
.text:00000000000086B8                 add     rbp, r13
.text:00000000000086BB                 add     rbp, [r14]
.text:00000000000086BE                 mov     [rsp+0D8h+var_C0], rbp
.text:00000000000086C3
.text:00000000000086C3 loc_86C3:                               ; CODE XREF: build_wcs_upper_buffer+410↓j
.text:00000000000086C3                 mov     rcx, [rsp+0D8h+var_D0]
.text:00000000000086C8                 mov     rdx, [rsp+0D8h+src]
.text:00000000000086CD                 mov     rsi, [rsp+0D8h+var_C0]
.text:00000000000086D2                 mov     rdi, [rsp+0D8h+var_B8]
.text:00000000000086D7                 call    rpl_mbrtowc
.text:00000000000086DC                 mov     rbp, rax
.text:00000000000086DF                 lea     rax, [rax-1]
.text:00000000000086E3                 cmp     rax, 0FFFFFFFFFFFFFFFCh
.text:00000000000086E7                 mov     [rsp+0D8h+var_B8], rax
.text:00000000000086EC                 ja      loc_8A29
.text:00000000000086F2                 mov     edx, [rsp+0D8h+wc]
.text:00000000000086F6                 mov     edi, edx        ; wc
.text:00000000000086F8                 mov     dword ptr [rsp+0D8h+src], edx
.text:00000000000086FC                 call    _towupper
.text:0000000000008701                 mov     edx, dword ptr [rsp+0D8h+src]
.text:0000000000008705                 mov     r12d, eax
.text:0000000000008708                 mov     [rsp+0D8h+var_D0], r15
.text:000000000000870D                 cmp     edx, eax
.text:000000000000870F                 jz      loc_8A10
.text:0000000000008715                 lea     rcx, [rsp+0D8h+s]
.text:000000000000871A                 lea     rdx, [rsp+0D8h+ps] ; ps
.text:000000000000871F                 mov     esi, eax        ; wc
.text:0000000000008721                 mov     rdi, rcx        ; s
.text:0000000000008724                 mov     [rsp+0D8h+src], rcx
.text:0000000000008729                 call    _wcrtomb
.text:000000000000872E                 cmp     rbp, rax
.text:0000000000008731                 mov     r11, rax
.text:0000000000008734                 mov     rcx, [rsp+0D8h+src]
.text:0000000000008739                 jnz     loc_8AC6
.text:000000000000873F                 mov     rdi, [r14+8]
.text:0000000000008743                 mov     rdx, rbp        ; n
.text:0000000000008746                 mov     rsi, rcx        ; src
.text:0000000000008749                 add     rdi, r15        ; dest
.text:000000000000874C                 call    _memcpy
.text:0000000000008751
.text:0000000000008751 loc_8751:                               ; CODE XREF: build_wcs_upper_buffer+434↓j
.text:0000000000008751                 cmp     byte ptr [r14+8Ch], 0
.text:0000000000008759                 lea     rax, [rbp+r13+0]
.text:000000000000875E                 jnz     loc_8A95
.text:0000000000008764
.text:0000000000008764 loc_8764:                               ; CODE XREF: build_wcs_upper_buffer+4C3↓j
.text:0000000000008764                 add     r15, 1
.text:0000000000008768                 mov     rsi, [rsp+0D8h+var_D0]
.text:000000000000876D                 mov     rdx, [r14+10h]
.text:0000000000008771                 lea     rcx, [r15+rbp-1]
.text:0000000000008776                 mov     r13, rax
.text:0000000000008779                 cmp     r15, rcx
.text:000000000000877C                 lea     rax, ds:0[rsi*4]
.text:0000000000008784                 mov     [rdx+rsi*4], r12d
.text:0000000000008788                 jge     loc_8640
.text:000000000000878E                 lea     rax, [rdx+rax+4]
.text:0000000000008793                 lea     rdx, [rdx+rcx*4]
.text:0000000000008797                 nop     word ptr [rax+rax+00000000h]
.text:00000000000087A0
.text:00000000000087A0 loc_87A0:                               ; CODE XREF: build_wcs_upper_buffer+1BD↓j
.text:00000000000087A0                 mov     dword ptr [rax], 0FFFFFFFFh
.text:00000000000087A6                 add     rax, 4
.text:00000000000087AA                 cmp     rdx, rax
.text:00000000000087AD                 jnz     short loc_87A0
.text:00000000000087AF                 mov     r15, rcx
.text:00000000000087B2                 jmp     loc_8640
.text:00000000000087B2 ; ---------------------------------------------------------------------------
.text:00000000000087B7                 align 20h
.text:00000000000087C0
.text:00000000000087C0 loc_87C0:                               ; CODE XREF: build_wcs_upper_buffer+46↑j
.text:00000000000087C0                 cmp     byte ptr [rdi+8Ch], 0
.text:00000000000087C7                 jnz     loc_863C
.text:00000000000087CD                 cmp     r15, rbx
.text:00000000000087D0                 jge     loc_8968
.text:00000000000087D6                 lea     rax, [rdi+20h]
.text:00000000000087DA                 mov     [rsp+0D8h+var_D0], rax
.text:00000000000087DF                 lea     rax, [rsp+0D8h+wc]
.text:00000000000087E4                 mov     [rsp+0D8h+var_A8], rax
.text:00000000000087E9                 lea     rax, [rsp+0D8h+ps]
.text:00000000000087EE                 mov     [rsp+0D8h+var_A0], rax
.text:00000000000087F3                 lea     rax, [rsp+0D8h+s]
.text:00000000000087F8                 mov     [rsp+0D8h+var_B0], rax
.text:00000000000087FD                 nop     dword ptr [rax]
.text:0000000000008800
.text:0000000000008800 loc_8800:                               ; CODE XREF: build_wcs_upper_buffer+2FD↓j
.text:0000000000008800                 mov     rbp, [r14+28h]
.text:0000000000008804                 mov     r13, r15
.text:0000000000008807                 add     rbp, r15
.text:000000000000880A                 add     rbp, [r14]
.text:000000000000880D                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000008812                 test    r12b, 80h
.text:0000000000008816                 jnz     short loc_882A
.text:0000000000008818                 mov     rdi, [rsp+0D8h+var_D0] ; ps
.text:000000000000881D                 call    _mbsinit
.text:0000000000008822                 test    eax, eax
.text:0000000000008824                 jnz     loc_8918
.text:000000000000882A
.text:000000000000882A loc_882A:                               ; CODE XREF: build_wcs_upper_buffer+226↑j
.text:000000000000882A                 mov     rax, [r14+20h]
.text:000000000000882E                 mov     rdi, [rsp+0D8h+var_A8]
.text:0000000000008833                 mov     rdx, rbx
.text:0000000000008836                 mov     rcx, [rsp+0D8h+var_D0]
.text:000000000000883B                 sub     rdx, r15
.text:000000000000883E                 mov     rsi, rbp
.text:0000000000008841                 mov     [rsp+0D8h+src], rdx
.text:0000000000008846                 mov     qword ptr [rsp+0D8h+ps.__count], rax
.text:000000000000884B                 mov     [rsp+0D8h+var_B8], rdi
.text:0000000000008850                 call    rpl_mbrtowc
.text:0000000000008855                 mov     rbp, rax
.text:0000000000008858                 lea     rax, [rax-1]
.text:000000000000885C                 cmp     rax, 0FFFFFFFFFFFFFFFCh
.text:0000000000008860                 ja      loc_8948
.text:0000000000008866                 mov     edx, [rsp+0D8h+wc]
.text:000000000000886A                 mov     edi, edx        ; wc
.text:000000000000886C                 mov     dword ptr [rsp+0D8h+var_C0], edx
.text:0000000000008870                 call    _towupper
.text:0000000000008875                 mov     edx, dword ptr [rsp+0D8h+var_C0]
.text:0000000000008879                 mov     r12d, eax
.text:000000000000887C                 cmp     edx, eax
.text:000000000000887E                 jz      short loc_88F8
.text:0000000000008880                 mov     rdx, [rsp+0D8h+var_A0] ; ps
.text:0000000000008885                 mov     rdi, [rsp+0D8h+var_B0] ; s
.text:000000000000888A                 mov     esi, eax        ; wc
.text:000000000000888C                 call    _wcrtomb
.text:0000000000008891                 cmp     rbp, rax
.text:0000000000008894                 jnz     loc_8A08
.text:000000000000889A                 mov     rdi, [r14+8]
.text:000000000000889E                 mov     rsi, [rsp+0D8h+var_B0] ; src
.text:00000000000088A3                 mov     rdx, rbp        ; n
.text:00000000000088A6                 add     rdi, r15        ; dest
.text:00000000000088A9                 call    _memcpy
.text:00000000000088AE
.text:00000000000088AE loc_88AE:                               ; CODE XREF: build_wcs_upper_buffer+321↓j
.text:00000000000088AE                 add     r15, 1
.text:00000000000088B2                 mov     rdx, [r14+10h]
.text:00000000000088B6                 lea     rax, ds:0[r13*4]
.text:00000000000088BE                 lea     rcx, [r15+rbp-1]
.text:00000000000088C3                 cmp     r15, rcx
.text:00000000000088C6                 mov     [rdx+r13*4], r12d
.text:00000000000088CA                 jge     short loc_88EA
.text:00000000000088CC                 lea     rax, [rdx+rax+4]
.text:00000000000088D1                 lea     rdx, [rdx+rcx*4]
.text:00000000000088D5                 nop     dword ptr [rax]
.text:00000000000088D8
.text:00000000000088D8 loc_88D8:                               ; CODE XREF: build_wcs_upper_buffer+2F5↓j
.text:00000000000088D8                 mov     dword ptr [rax], 0FFFFFFFFh
.text:00000000000088DE                 add     rax, 4
.text:00000000000088E2                 cmp     rdx, rax
.text:00000000000088E5                 jnz     short loc_88D8
.text:00000000000088E7                 mov     r15, rcx
.text:00000000000088EA
.text:00000000000088EA loc_88EA:                               ; CODE XREF: build_wcs_upper_buffer+2DA↑j
.text:00000000000088EA                                         ; build_wcs_upper_buffer+351↓j ...
.text:00000000000088EA                 cmp     rbx, r15
.text:00000000000088ED                 jg      loc_8800
.text:00000000000088F3                 jmp     short loc_8968
.text:00000000000088F3 ; ---------------------------------------------------------------------------
.text:00000000000088F5                 align 8
.text:00000000000088F8
.text:00000000000088F8 loc_88F8:                               ; CODE XREF: build_wcs_upper_buffer+28E↑j
.text:00000000000088F8                 mov     rsi, [r14+28h]
.text:00000000000088FC                 mov     rdi, [r14+8]
.text:0000000000008900                 mov     rdx, rbp        ; n
.text:0000000000008903                 add     rsi, r15
.text:0000000000008906                 add     rsi, [r14]      ; src
.text:0000000000008909                 add     rdi, r15        ; dest
.text:000000000000890C                 call    _memcpy
.text:0000000000008911                 jmp     short loc_88AE
.text:0000000000008911 ; ---------------------------------------------------------------------------
.text:0000000000008913                 align 8
.text:0000000000008918
.text:0000000000008918 loc_8918:                               ; CODE XREF: build_wcs_upper_buffer+234↑j
.text:0000000000008918                 call    ___ctype_toupper_loc
.text:000000000000891D                 mov     rax, [rax]
.text:0000000000008920                 mov     rdx, [r14+8]
.text:0000000000008924                 mov     eax, [rax+r12*4]
.text:0000000000008928                 mov     [rdx+r15], al
.text:000000000000892C                 mov     rdx, [r14+8]
.text:0000000000008930                 mov     rax, [r14+10h]
.text:0000000000008934                 movzx   edx, byte ptr [rdx+r15]
.text:0000000000008939                 mov     [rax+r15*4], edx
.text:000000000000893D                 add     r15, 1
.text:0000000000008941                 jmp     short loc_88EA
.text:0000000000008941 ; ---------------------------------------------------------------------------
.text:0000000000008943                 align 8
.text:0000000000008948
.text:0000000000008948 loc_8948:                               ; CODE XREF: build_wcs_upper_buffer+270↑j
.text:0000000000008948                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000894C                 jnz     short loc_8980
.text:000000000000894E                 mov     rax, [r14+58h]
.text:0000000000008952                 cmp     [r14+40h], rax
.text:0000000000008956                 jge     short loc_8980
.text:0000000000008958                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:000000000000895D                 mov     [r14+20h], rax
.text:0000000000008961                 nop     dword ptr [rax+00000000h]
.text:0000000000008968
.text:0000000000008968 loc_8968:                               ; CODE XREF: build_wcs_upper_buffer+1E0↑j
.text:0000000000008968                                         ; build_wcs_upper_buffer+303↑j
.text:0000000000008968                 mov     [r14+30h], r15
.text:000000000000896C                 mov     [r14+38h], r15
.text:0000000000008970                 xor     eax, eax
.text:0000000000008972                 jmp     loc_864F
.text:0000000000008972 ; ---------------------------------------------------------------------------
.text:0000000000008977                 align 20h
.text:0000000000008980
.text:0000000000008980 loc_8980:                               ; CODE XREF: build_wcs_upper_buffer+35C↑j
.text:0000000000008980                                         ; build_wcs_upper_buffer+366↑j
.text:0000000000008980                 mov     rax, [r14]
.text:0000000000008983                 mov     rdx, [r14+8]
.text:0000000000008987                 add     rax, r15
.text:000000000000898A                 add     rax, [r14+28h]
.text:000000000000898E                 movzx   eax, byte ptr [rax]
.text:0000000000008991                 mov     [rdx+r15], al
.text:0000000000008995                 mov     rdx, [r14+10h]
.text:0000000000008999                 add     r15, 1
.text:000000000000899D                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:00000000000089A1                 mov     [rdx+r13*4], eax
.text:00000000000089A5                 jnz     loc_88EA
.text:00000000000089AB                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:00000000000089B0                 mov     [r14+20h], rax
.text:00000000000089B4                 jmp     loc_88EA
.text:00000000000089B9 ; ---------------------------------------------------------------------------
.text:00000000000089B9
.text:00000000000089B9 loc_89B9:                               ; CODE XREF: build_wcs_upper_buffer+BE↑j
.text:00000000000089B9                 mov     eax, [r14+90h]
.text:00000000000089C0                 test    eax, eax
.text:00000000000089C2                 jle     loc_8BE0
.text:00000000000089C8                 mov     rdi, [r14+28h]
.text:00000000000089CC                 lea     r11d, [rax-1]
.text:00000000000089D0                 lea     rcx, [rsp+0D8h+s]
.text:00000000000089D5                 xor     eax, eax
.text:00000000000089D7                 add     rdi, r13
.text:00000000000089DA                 add     rdi, [r14]
.text:00000000000089DD                 jmp     short loc_89EA
.text:00000000000089DF ; ---------------------------------------------------------------------------
.text:00000000000089DF
.text:00000000000089DF loc_89DF:                               ; CODE XREF: build_wcs_upper_buffer+409↓j
.text:00000000000089DF                 add     rax, 1
.text:00000000000089E3                 cmp     [rsp+0D8h+src], rax
.text:00000000000089E8                 jz      short loc_89FB
.text:00000000000089EA
.text:00000000000089EA loc_89EA:                               ; CODE XREF: build_wcs_upper_buffer+3ED↑j
.text:00000000000089EA                 movzx   esi, byte ptr [rdi+rax]
.text:00000000000089EE                 cmp     r11, rax
.text:00000000000089F1                 movzx   esi, byte ptr [rdx+rsi]
.text:00000000000089F5                 mov     [rcx+rax], sil
.text:00000000000089F9                 jnz     short loc_89DF
.text:00000000000089FB
.text:00000000000089FB loc_89FB:                               ; CODE XREF: build_wcs_upper_buffer+3F8↑j
.text:00000000000089FB                                         ; build_wcs_upper_buffer+5F5↓j
.text:00000000000089FB                 mov     [rsp+0D8h+var_C0], rcx
.text:0000000000008A00                 jmp     loc_86C3
.text:0000000000008A00 ; ---------------------------------------------------------------------------
.text:0000000000008A05                 align 8
.text:0000000000008A08
.text:0000000000008A08 loc_8A08:                               ; CODE XREF: build_wcs_upper_buffer+2A4↑j
.text:0000000000008A08                 mov     r13, r15
.text:0000000000008A0B                 jmp     loc_869E
.text:0000000000008A10 ; ---------------------------------------------------------------------------
.text:0000000000008A10
.text:0000000000008A10 loc_8A10:                               ; CODE XREF: build_wcs_upper_buffer+11F↑j
.text:0000000000008A10                                         ; build_wcs_upper_buffer+4DA↓j
.text:0000000000008A10                 mov     rdi, [r14+8]
.text:0000000000008A14                 mov     rsi, [rsp+0D8h+var_C0] ; src
.text:0000000000008A19                 mov     rdx, rbp        ; n
.text:0000000000008A1C                 add     rdi, r15        ; dest
.text:0000000000008A1F                 call    _memcpy
.text:0000000000008A24                 jmp     loc_8751
.text:0000000000008A29 ; ---------------------------------------------------------------------------
.text:0000000000008A29
.text:0000000000008A29 loc_8A29:                               ; CODE XREF: build_wcs_upper_buffer+FC↑j
.text:0000000000008A29                 cmp     [rsp+0D8h+var_B8], 0FFFFFFFFFFFFFFFDh
.text:0000000000008A2F                 jnz     short loc_8A3B
.text:0000000000008A31                 mov     rax, [r14+58h]
.text:0000000000008A35                 cmp     [r14+40h], rax
.text:0000000000008A39                 jl      short loc_8AB8
.text:0000000000008A3B
.text:0000000000008A3B loc_8A3B:                               ; CODE XREF: build_wcs_upper_buffer+43F↑j
.text:0000000000008A3B                 mov     rax, [r14]
.text:0000000000008A3E                 mov     rdx, [r14+78h]
.text:0000000000008A42                 add     rax, r13
.text:0000000000008A45                 add     rax, [r14+28h]
.text:0000000000008A49                 test    rdx, rdx
.text:0000000000008A4C                 movzx   eax, byte ptr [rax]
.text:0000000000008A4F                 jnz     loc_8BFC
.text:0000000000008A55
.text:0000000000008A55 loc_8A55:                               ; CODE XREF: build_wcs_upper_buffer+610↓j
.text:0000000000008A55                 mov     rdx, [r14+8]
.text:0000000000008A59                 mov     rcx, r15
.text:0000000000008A5C                 mov     [rdx+r15], al
.text:0000000000008A60                 cmp     byte ptr [r14+8Ch], 0
.text:0000000000008A68                 jnz     loc_8BEF
.text:0000000000008A6E
.text:0000000000008A6E loc_8A6E:                               ; CODE XREF: build_wcs_upper_buffer+607↓j
.text:0000000000008A6E                 mov     rdx, [r14+10h]
.text:0000000000008A72                 add     r13, 1
.text:0000000000008A76                 add     r15, 1
.text:0000000000008A7A                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000008A7E                 mov     [rdx+rcx*4], eax
.text:0000000000008A81                 jnz     loc_8640
.text:0000000000008A87                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:0000000000008A8C                 mov     [r14+20h], rax
.text:0000000000008A90                 jmp     loc_8640
.text:0000000000008A95 ; ---------------------------------------------------------------------------
.text:0000000000008A95
.text:0000000000008A95 loc_8A95:                               ; CODE XREF: build_wcs_upper_buffer+16E↑j
.text:0000000000008A95                 mov     rdx, [r14+18h]
.text:0000000000008A99                 mov     rcx, r15
.text:0000000000008A9C                 mov     r10, r13
.text:0000000000008A9F                 sub     rcx, r13
.text:0000000000008AA2                 lea     rdx, [rdx+rcx*8]
.text:0000000000008AA6
.text:0000000000008AA6 loc_8AA6:                               ; CODE XREF: build_wcs_upper_buffer+4C1↓j
.text:0000000000008AA6                 mov     [rdx+r10*8], r10
.text:0000000000008AAA                 add     r10, 1
.text:0000000000008AAE                 cmp     rax, r10
.text:0000000000008AB1                 jnz     short loc_8AA6
.text:0000000000008AB3                 jmp     loc_8764
.text:0000000000008AB8 ; ---------------------------------------------------------------------------
.text:0000000000008AB8
.text:0000000000008AB8 loc_8AB8:                               ; CODE XREF: build_wcs_upper_buffer+449↑j
.text:0000000000008AB8                                         ; build_wcs_upper_buffer+4F3↓j
.text:0000000000008AB8                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:0000000000008ABD                 mov     [r14+20h], rax
.text:0000000000008AC1                 jmp     loc_8645
.text:0000000000008AC6 ; ---------------------------------------------------------------------------
.text:0000000000008AC6
.text:0000000000008AC6 loc_8AC6:                               ; CODE XREF: build_wcs_upper_buffer+149↑j
.text:0000000000008AC6                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008ACA                 jz      loc_8A10
.text:0000000000008AD0                 lea     rax, [rax+r15]
.text:0000000000008AD4                 mov     rsi, rax
.text:0000000000008AD7                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000008ADC                 mov     rax, [r14+40h]
.text:0000000000008AE0                 cmp     rsi, rax
.text:0000000000008AE3                 ja      short loc_8AB8
.text:0000000000008AE5                 cmp     qword ptr [r14+18h], 0
.text:0000000000008AEA                 jz      loc_8BA8
.text:0000000000008AF0
.text:0000000000008AF0 loc_8AF0:                               ; CODE XREF: build_wcs_upper_buffer+5E0↓j
.text:0000000000008AF0                 cmp     byte ptr [r14+8Ch], 0
.text:0000000000008AF8                 jnz     short loc_8B1A
.text:0000000000008AFA                 test    r15, r15
.text:0000000000008AFD                 jz      short loc_8B12
.text:0000000000008AFF                 mov     rdx, [r14+18h]
.text:0000000000008B03                 xor     eax, eax
.text:0000000000008B05
.text:0000000000008B05 loc_8B05:                               ; CODE XREF: build_wcs_upper_buffer+520↓j
.text:0000000000008B05                 mov     [rdx+rax*8], rax
.text:0000000000008B09                 add     rax, 1
.text:0000000000008B0D                 cmp     rax, r15
.text:0000000000008B10                 jnz     short loc_8B05
.text:0000000000008B12
.text:0000000000008B12 loc_8B12:                               ; CODE XREF: build_wcs_upper_buffer+50D↑j
.text:0000000000008B12                 mov     byte ptr [r14+8Ch], 1
.text:0000000000008B1A
.text:0000000000008B1A loc_8B1A:                               ; CODE XREF: build_wcs_upper_buffer+508↑j
.text:0000000000008B1A                 mov     rdi, [r14+8]
.text:0000000000008B1E                 mov     rsi, rcx        ; src
.text:0000000000008B21                 mov     rdx, r11        ; n
.text:0000000000008B24                 mov     [rsp+0D8h+src], r11
.text:0000000000008B29                 add     rdi, r15        ; dest
.text:0000000000008B2C                 call    _memcpy
.text:0000000000008B31                 mov     rax, [r14+10h]
.text:0000000000008B35                 mov     r11, [rsp+0D8h+src]
.text:0000000000008B3A                 lea     rcx, [rax+r15*4]
.text:0000000000008B3E                 mov     rax, [r14+18h]
.text:0000000000008B42                 cmp     r11, 1
.text:0000000000008B46                 mov     [rcx], r12d
.text:0000000000008B49                 lea     rsi, [rax+r15*8]
.text:0000000000008B4D                 mov     [rsi], r13
.text:0000000000008B50                 jbe     short loc_8B7A
.text:0000000000008B52                 mov     eax, 1
.text:0000000000008B57
.text:0000000000008B57 loc_8B57:                               ; CODE XREF: build_wcs_upper_buffer+588↓j
.text:0000000000008B57                 mov     rdx, [rsp+0D8h+var_B8]
.text:0000000000008B5C                 cmp     rax, rbp
.text:0000000000008B5F                 cmovb   rdx, rax
.text:0000000000008B63                 add     rdx, r13
.text:0000000000008B66                 mov     [rsi+rax*8], rdx
.text:0000000000008B6A                 mov     dword ptr [rcx+rax*4], 0FFFFFFFFh
.text:0000000000008B71                 add     rax, 1
.text:0000000000008B75                 cmp     rax, r11
.text:0000000000008B78                 jnz     short loc_8B57
.text:0000000000008B7A
.text:0000000000008B7A loc_8B7A:                               ; CODE XREF: build_wcs_upper_buffer+560↑j
.text:0000000000008B7A                 mov     rbx, [r14+58h]
.text:0000000000008B7E                 sub     r11, rbp
.text:0000000000008B81                 add     rbx, r11
.text:0000000000008B84                 cmp     r13, [r14+60h]
.text:0000000000008B88                 mov     [r14+58h], rbx
.text:0000000000008B8C                 jge     short loc_8B92
.text:0000000000008B8E                 add     [r14+68h], r11
.text:0000000000008B92
.text:0000000000008B92 loc_8B92:                               ; CODE XREF: build_wcs_upper_buffer+59C↑j
.text:0000000000008B92                 cmp     [r14+40h], rbx
.text:0000000000008B96                 mov     r15, [rsp+0D8h+var_D0]
.text:0000000000008B9B                 cmovle  rbx, [r14+40h]
.text:0000000000008BA0                 add     r13, rbp
.text:0000000000008BA3                 jmp     loc_8640
.text:0000000000008BA8 ; ---------------------------------------------------------------------------
.text:0000000000008BA8
.text:0000000000008BA8 loc_8BA8:                               ; CODE XREF: build_wcs_upper_buffer+4FA↑j
.text:0000000000008BA8                 lea     rdi, ds:0[rax*8] ; size
.text:0000000000008BB0                 mov     [rsp+0D8h+var_C0], rcx
.text:0000000000008BB5                 mov     [rsp+0D8h+src], r11
.text:0000000000008BBA                 call    _malloc
.text:0000000000008BBF                 test    rax, rax
.text:0000000000008BC2                 mov     [r14+18h], rax
.text:0000000000008BC6                 mov     r11, [rsp+0D8h+src]
.text:0000000000008BCB                 mov     rcx, [rsp+0D8h+var_C0]
.text:0000000000008BD0                 jnz     loc_8AF0
.text:0000000000008BD6                 mov     eax, 0Ch
.text:0000000000008BDB                 jmp     loc_864F
.text:0000000000008BE0 ; ---------------------------------------------------------------------------
.text:0000000000008BE0
.text:0000000000008BE0 loc_8BE0:                               ; CODE XREF: build_wcs_upper_buffer+3D2↑j
.text:0000000000008BE0                 lea     rcx, [rsp+0D8h+s]
.text:0000000000008BE5                 jmp     loc_89FB
.text:0000000000008BEA ; ---------------------------------------------------------------------------
.text:0000000000008BEA
.text:0000000000008BEA loc_8BEA:                               ; CODE XREF: build_wcs_upper_buffer+70↑j
.text:0000000000008BEA                 call    ___stack_chk_fail
.text:0000000000008BEF ; ---------------------------------------------------------------------------
.text:0000000000008BEF
.text:0000000000008BEF loc_8BEF:                               ; CODE XREF: build_wcs_upper_buffer+478↑j
.text:0000000000008BEF                 mov     rdx, [r14+18h]
.text:0000000000008BF3                 mov     [rdx+r15*8], r13
.text:0000000000008BF7                 jmp     loc_8A6E
.text:0000000000008BFC ; ---------------------------------------------------------------------------
.text:0000000000008BFC
.text:0000000000008BFC loc_8BFC:                               ; CODE XREF: build_wcs_upper_buffer+45F↑j
.text:0000000000008BFC                 movzx   eax, byte ptr [rdx+rax]
.text:0000000000008C00                 jmp     loc_8A55
.text:0000000000008C00 ; } // starts at 85F0
.text:0000000000008C00 build_wcs_upper_buffer endp
.text:0000000000008C00
.text:0000000000008C00 ; ---------------------------------------------------------------------------
.text:0000000000008C05                 align 10h
.text:0000000000008C10
.text:0000000000008C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C10
.text:0000000000008C10
.text:0000000000008C10 extend_buffers  proc near               ; CODE XREF: clean_state_log_if_needed+26↓p
.text:0000000000008C10                                         ; clean_state_log_if_needed+55↓p ...
.text:0000000000008C10 ; __unwind {
.text:0000000000008C10                 push    rbp
.text:0000000000008C11                 push    rbx
.text:0000000000008C12                 mov     rdx, 0FFFFFFFFFFFFFFEh
.text:0000000000008C1C                 sub     rsp, 8
.text:0000000000008C20                 mov     rax, [rdi+40h]
.text:0000000000008C24                 cmp     rax, rdx
.text:0000000000008C27                 ja      loc_8D38
.text:0000000000008C2D                 mov     rdx, [rdi+58h]
.text:0000000000008C31                 add     rax, rax
.text:0000000000008C34                 movsxd  rsi, esi
.text:0000000000008C37                 mov     rbx, rdi
.text:0000000000008C3A                 cmp     rax, rdx
.text:0000000000008C3D                 cmovg   rax, rdx
.text:0000000000008C41                 cmp     rax, rsi
.text:0000000000008C44                 cmovge  rsi, rax
.text:0000000000008C48                 call    re_string_realloc_buffers
.text:0000000000008C4D                 test    eax, eax
.text:0000000000008C4F                 mov     ebp, eax
.text:0000000000008C51                 jnz     loc_8D0D
.text:0000000000008C57                 mov     rdi, [rbx+0B8h] ; ptr
.text:0000000000008C5E                 test    rdi, rdi
.text:0000000000008C61                 jz      short loc_8C84
.text:0000000000008C63                 mov     rax, [rbx+40h]
.text:0000000000008C67                 lea     rsi, ds:8[rax*8] ; size
.text:0000000000008C6F                 call    _realloc
.text:0000000000008C74                 test    rax, rax
.text:0000000000008C77                 jz      loc_8D38
.text:0000000000008C7D                 mov     [rbx+0B8h], rax
.text:0000000000008C84
.text:0000000000008C84 loc_8C84:                               ; CODE XREF: extend_buffers+51↑j
.text:0000000000008C84                 cmp     byte ptr [rbx+88h], 0
.text:0000000000008C8B                 mov     eax, [rbx+90h]
.text:0000000000008C91                 jz      short loc_8CB0
.text:0000000000008C93                 cmp     eax, 1
.text:0000000000008C96                 mov     rdi, rbx
.text:0000000000008C99                 jle     loc_8D50
.text:0000000000008C9F                 add     rsp, 8
.text:0000000000008CA3                 pop     rbx
.text:0000000000008CA4                 pop     rbp
.text:0000000000008CA5                 jmp     build_wcs_upper_buffer
.text:0000000000008CA5 ; ---------------------------------------------------------------------------
.text:0000000000008CAA                 align 10h
.text:0000000000008CB0
.text:0000000000008CB0 loc_8CB0:                               ; CODE XREF: extend_buffers+81↑j
.text:0000000000008CB0                 cmp     eax, 1
.text:0000000000008CB3                 jg      short loc_8D20
.text:0000000000008CB5                 mov     rcx, [rbx+78h]
.text:0000000000008CB9                 test    rcx, rcx
.text:0000000000008CBC                 jz      short loc_8D0D
.text:0000000000008CBE                 mov     rsi, [rbx+58h]
.text:0000000000008CC2                 cmp     [rbx+40h], rsi
.text:0000000000008CC6                 cmovle  rsi, [rbx+40h]
.text:0000000000008CCB                 mov     rax, [rbx+30h]
.text:0000000000008CCF                 cmp     rsi, rax
.text:0000000000008CD2                 jg      short loc_8CE4
.text:0000000000008CD4                 jmp     short loc_8D05
.text:0000000000008CD4 ; ---------------------------------------------------------------------------
.text:0000000000008CD6                 align 20h
.text:0000000000008CE0
.text:0000000000008CE0 loc_8CE0:                               ; CODE XREF: extend_buffers+F3↓j
.text:0000000000008CE0                 mov     rcx, [rbx+78h]
.text:0000000000008CE4
.text:0000000000008CE4 loc_8CE4:                               ; CODE XREF: extend_buffers+C2↑j
.text:0000000000008CE4                 mov     rdx, [rbx]
.text:0000000000008CE7                 add     rdx, rax
.text:0000000000008CEA                 add     rdx, [rbx+28h]
.text:0000000000008CEE                 movzx   edx, byte ptr [rdx]
.text:0000000000008CF1                 movzx   ecx, byte ptr [rcx+rdx]
.text:0000000000008CF5                 mov     rdx, [rbx+8]
.text:0000000000008CF9                 mov     [rdx+rax], cl
.text:0000000000008CFC                 add     rax, 1
.text:0000000000008D00                 cmp     rsi, rax
.text:0000000000008D03                 jnz     short loc_8CE0
.text:0000000000008D05
.text:0000000000008D05 loc_8D05:                               ; CODE XREF: extend_buffers+C4↑j
.text:0000000000008D05                 mov     [rbx+30h], rax
.text:0000000000008D09                 mov     [rbx+38h], rax
.text:0000000000008D0D
.text:0000000000008D0D loc_8D0D:                               ; CODE XREF: extend_buffers+41↑j
.text:0000000000008D0D                                         ; extend_buffers+AC↑j
.text:0000000000008D0D                 add     rsp, 8
.text:0000000000008D11                 mov     eax, ebp
.text:0000000000008D13                 pop     rbx
.text:0000000000008D14                 pop     rbp
.text:0000000000008D15                 retn
.text:0000000000008D15 ; ---------------------------------------------------------------------------
.text:0000000000008D16                 align 20h
.text:0000000000008D20
.text:0000000000008D20 loc_8D20:                               ; CODE XREF: extend_buffers+A3↑j
.text:0000000000008D20                 mov     rdi, rbx
.text:0000000000008D23                 call    build_wcs_buffer
.text:0000000000008D28                 add     rsp, 8
.text:0000000000008D2C                 mov     eax, ebp
.text:0000000000008D2E                 pop     rbx
.text:0000000000008D2F                 pop     rbp
.text:0000000000008D30                 retn
.text:0000000000008D30 ; ---------------------------------------------------------------------------
.text:0000000000008D31                 align 8
.text:0000000000008D38
.text:0000000000008D38 loc_8D38:                               ; CODE XREF: extend_buffers+17↑j
.text:0000000000008D38                                         ; extend_buffers+67↑j
.text:0000000000008D38                 mov     ebp, 0Ch
.text:0000000000008D3D                 add     rsp, 8
.text:0000000000008D41                 mov     eax, ebp
.text:0000000000008D43                 pop     rbx
.text:0000000000008D44                 pop     rbp
.text:0000000000008D45                 retn
.text:0000000000008D45 ; ---------------------------------------------------------------------------
.text:0000000000008D46                 align 10h
.text:0000000000008D50
.text:0000000000008D50 loc_8D50:                               ; CODE XREF: extend_buffers+89↑j
.text:0000000000008D50                 call    build_upper_buffer
.text:0000000000008D55                 add     rsp, 8
.text:0000000000008D59                 mov     eax, ebp
.text:0000000000008D5B                 pop     rbx
.text:0000000000008D5C                 pop     rbp
.text:0000000000008D5D                 retn
.text:0000000000008D5D ; } // starts at 8C10
.text:0000000000008D5D extend_buffers  endp
.text:0000000000008D5D
.text:0000000000008D5D ; ---------------------------------------------------------------------------
.text:0000000000008D5E                 align 20h
.text:0000000000008D60
.text:0000000000008D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D60
.text:0000000000008D60
.text:0000000000008D60 clean_state_log_if_needed proc near     ; CODE XREF: get_subexp_sub_isra_32+F4↓j
.text:0000000000008D60                                         ; transit_state_bkref_isra_34+330↓p ...
.text:0000000000008D60 ; __unwind {
.text:0000000000008D60                 push    r12
.text:0000000000008D62                 push    rbp
.text:0000000000008D63                 mov     rbp, rsi
.text:0000000000008D66                 push    rbx
.text:0000000000008D67                 mov     rax, [rdi+40h]
.text:0000000000008D6B                 mov     rbx, rdi
.text:0000000000008D6E                 mov     r12, [rdi+0C0h]
.text:0000000000008D75                 cmp     rax, rsi
.text:0000000000008D78                 jg      short loc_8DA0
.text:0000000000008D7A                 cmp     rax, [rdi+58h]
.text:0000000000008D7E                 jge     short loc_8DA0
.text:0000000000008D80                 lea     esi, [rbp+1]
.text:0000000000008D83                 mov     rdi, rbx
.text:0000000000008D86                 call    extend_buffers
.text:0000000000008D8B                 test    eax, eax
.text:0000000000008D8D                 jnz     short loc_8D96
.text:0000000000008D8F
.text:0000000000008D8F loc_8D8F:                               ; CODE XREF: clean_state_log_if_needed+47↓j
.text:0000000000008D8F                                         ; clean_state_log_if_needed+4D↓j ...
.text:0000000000008D8F                 cmp     r12, rbp
.text:0000000000008D92                 jl      short loc_8DC0
.text:0000000000008D94
.text:0000000000008D94 loc_8D94:                               ; CODE XREF: clean_state_log_if_needed+84↓j
.text:0000000000008D94                 xor     eax, eax
.text:0000000000008D96
.text:0000000000008D96 loc_8D96:                               ; CODE XREF: clean_state_log_if_needed+2D↑j
.text:0000000000008D96                                         ; clean_state_log_if_needed+5E↓j
.text:0000000000008D96                 pop     rbx
.text:0000000000008D97                 pop     rbp
.text:0000000000008D98                 pop     r12
.text:0000000000008D9A                 retn
.text:0000000000008D9A ; ---------------------------------------------------------------------------
.text:0000000000008D9B                 align 20h
.text:0000000000008DA0
.text:0000000000008DA0 loc_8DA0:                               ; CODE XREF: clean_state_log_if_needed+18↑j
.text:0000000000008DA0                                         ; clean_state_log_if_needed+1E↑j
.text:0000000000008DA0                 mov     rax, [rbx+30h]
.text:0000000000008DA4                 cmp     rax, rbp
.text:0000000000008DA7                 jg      short loc_8D8F
.text:0000000000008DA9                 cmp     rax, [rbx+58h]
.text:0000000000008DAD                 jge     short loc_8D8F
.text:0000000000008DAF                 lea     esi, [rbp+1]
.text:0000000000008DB2                 mov     rdi, rbx
.text:0000000000008DB5                 call    extend_buffers
.text:0000000000008DBA                 test    eax, eax
.text:0000000000008DBC                 jz      short loc_8D8F
.text:0000000000008DBE                 jmp     short loc_8D96
.text:0000000000008DC0 ; ---------------------------------------------------------------------------
.text:0000000000008DC0
.text:0000000000008DC0 loc_8DC0:                               ; CODE XREF: clean_state_log_if_needed+32↑j
.text:0000000000008DC0                 mov     rax, [rbx+0B8h]
.text:0000000000008DC7                 mov     rdx, rbp
.text:0000000000008DCA                 xor     esi, esi        ; c
.text:0000000000008DCC                 sub     rdx, r12
.text:0000000000008DCF                 shl     rdx, 3          ; n
.text:0000000000008DD3                 lea     rdi, [rax+r12*8+8] ; s
.text:0000000000008DD8                 call    _memset
.text:0000000000008DDD                 mov     [rbx+0C0h], rbp
.text:0000000000008DE4                 jmp     short loc_8D94
.text:0000000000008DE4 ; } // starts at 8D60
.text:0000000000008DE4 clean_state_log_if_needed endp
.text:0000000000008DE4
.text:0000000000008DE4 ; ---------------------------------------------------------------------------
.text:0000000000008DE6                 align 10h
.text:0000000000008DF0
.text:0000000000008DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008DF0
.text:0000000000008DF0 ; Attributes: info_from_lumina
.text:0000000000008DF0
.text:0000000000008DF0 ; isl_union_flow_0 *__fastcall isl_union_flow_free_0(isl_union_flow_0 *flow)
.text:0000000000008DF0 isl_union_flow_free_0 proc near         ; CODE XREF: free_token+23↓j
.text:0000000000008DF0                                         ; build_charclass_op+1F3↓p ...
.text:0000000000008DF0 ; __unwind {
.text:0000000000008DF0                 push    rbx
.text:0000000000008DF1                 mov     rbx, rdi
.text:0000000000008DF4                 mov     rdi, [rdi]      ; ptr
.text:0000000000008DF7                 call    _free
.text:0000000000008DFC                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000008E00                 call    _free
.text:0000000000008E05                 mov     rdi, [rbx+10h]  ; ptr
.text:0000000000008E09                 call    _free
.text:0000000000008E0E                 mov     rdi, [rbx+18h]  ; ptr
.text:0000000000008E12                 call    _free
.text:0000000000008E17                 mov     rdi, rbx        ; ptr
.text:0000000000008E1A                 pop     rbx
.text:0000000000008E1B                 jmp     _free
.text:0000000000008E1B ; } // starts at 8DF0
.text:0000000000008E1B isl_union_flow_free_0 endp
.text:0000000000008E1B
.text:0000000000008E20
.text:0000000000008E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000008E20
.text:0000000000008E20
.text:0000000000008E20 free_token      proc near               ; CODE XREF: free_tree+8↓p
.text:0000000000008E20                                         ; free_dfa_content+32↓p
.text:0000000000008E20 ; __unwind {
.text:0000000000008E20                 mov     eax, [rdi+8]
.text:0000000000008E23                 and     eax, 400FFh
.text:0000000000008E28                 cmp     eax, 6
.text:0000000000008E2B                 jz      short loc_8E40
.text:0000000000008E2D                 cmp     eax, 3
.text:0000000000008E30                 jz      short loc_8E38
.text:0000000000008E32                 rep retn
.text:0000000000008E32 ; ---------------------------------------------------------------------------
.text:0000000000008E34                 align 8
.text:0000000000008E38
.text:0000000000008E38 loc_8E38:                               ; CODE XREF: free_token+10↑j
.text:0000000000008E38                 mov     rdi, [rdi]      ; ptr
.text:0000000000008E3B                 jmp     _free
.text:0000000000008E40 ; ---------------------------------------------------------------------------
.text:0000000000008E40
.text:0000000000008E40 loc_8E40:                               ; CODE XREF: free_token+B↑j
.text:0000000000008E40                 mov     rdi, [rdi]      ; ptr
.text:0000000000008E43                 jmp     short isl_union_flow_free_0
.text:0000000000008E43 ; } // starts at 8E20
.text:0000000000008E43 free_token      endp
.text:0000000000008E43
.text:0000000000008E43 ; ---------------------------------------------------------------------------
.text:0000000000008E45                 align 10h
.text:0000000000008E50
.text:0000000000008E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000008E50
.text:0000000000008E50
.text:0000000000008E50 free_tree       proc near               ; DATA XREF: parse_expression+E1↓o
.text:0000000000008E50                                         ; parse_expression+38C↓o ...
.text:0000000000008E50 ; __unwind {
.text:0000000000008E50                 lea     rdi, [rsi+28h]
.text:0000000000008E54                 sub     rsp, 8
.text:0000000000008E58                 call    free_token
.text:0000000000008E5D                 xor     eax, eax
.text:0000000000008E5F                 add     rsp, 8
.text:0000000000008E63                 retn
.text:0000000000008E63 ; } // starts at 8E50
.text:0000000000008E63 free_tree       endp
.text:0000000000008E63
.text:0000000000008E63 ; ---------------------------------------------------------------------------
.text:0000000000008E64                 align 10h
.text:0000000000008E70
.text:0000000000008E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000008E70
.text:0000000000008E70
.text:0000000000008E70 re_dfa_add_node proc near               ; CODE XREF: duplicate_node+26↓p
.text:0000000000008E70                                         ; calc_first+1E↓p
.text:0000000000008E70
.text:0000000000008E70 ptr             = qword ptr -48h
.text:0000000000008E70 var_40          = qword ptr -40h
.text:0000000000008E70
.text:0000000000008E70 ; __unwind {
.text:0000000000008E70                 push    r15
.text:0000000000008E72                 push    r14
.text:0000000000008E74                 mov     r14, rsi
.text:0000000000008E77                 push    r13
.text:0000000000008E79                 push    r12
.text:0000000000008E7B                 push    rbp
.text:0000000000008E7C                 push    rbx
.text:0000000000008E7D                 mov     rbx, rdi
.text:0000000000008E80                 sub     rsp, 18h
.text:0000000000008E84                 mov     rsi, [rdi+10h]
.text:0000000000008E88                 mov     rbp, [rdi+8]
.text:0000000000008E8C                 cmp     rsi, rbp
.text:0000000000008E8F                 jnb     loc_8F40
.text:0000000000008E95                 mov     r12, [rdi+18h]
.text:0000000000008E99                 mov     rbp, [rdi+28h]
.text:0000000000008E9D
.text:0000000000008E9D loc_8E9D:                               ; CODE XREF: re_dfa_add_node+187↓j
.text:0000000000008E9D                 mov     rax, rsi
.text:0000000000008EA0                 mov     ecx, edx
.text:0000000000008EA2                 shl     rax, 4
.text:0000000000008EA6                 add     rax, [rbx]
.text:0000000000008EA9                 and     ecx, 0FFFC00FFh
.text:0000000000008EAF                 mov     [rax+8], rdx
.text:0000000000008EB3                 mov     [rax+8], ecx
.text:0000000000008EB6                 xor     ecx, ecx
.text:0000000000008EB8                 cmp     dl, 6
.text:0000000000008EBB                 mov     [rax], r14
.text:0000000000008EBE                 setz    cl
.text:0000000000008EC1                 cmp     dl, 5
.text:0000000000008EC4                 jnz     short loc_8ED2
.text:0000000000008EC6                 xor     ecx, ecx
.text:0000000000008EC8                 cmp     dword ptr [rbx+0B4h], 1
.text:0000000000008ECF                 setnle  cl
.text:0000000000008ED2
.text:0000000000008ED2 loc_8ED2:                               ; CODE XREF: re_dfa_add_node+54↑j
.text:0000000000008ED2                 movzx   edx, byte ptr [rax+0Ah]
.text:0000000000008ED6                 shl     ecx, 4
.text:0000000000008ED9                 pxor    xmm0, xmm0
.text:0000000000008EDD                 and     edx, 0FFFFFFEFh
.text:0000000000008EE0                 or      edx, ecx
.text:0000000000008EE2                 mov     [rax+0Ah], dl
.text:0000000000008EE5                 mov     qword ptr [r12+rsi*8], 0FFFFFFFFFFFFFFFFh
.text:0000000000008EED                 mov     rax, [rbx+10h]
.text:0000000000008EF1                 lea     rax, [rax+rax*2]
.text:0000000000008EF5                 lea     rax, [rbp+rax*8+0]
.text:0000000000008EFA                 movups  xmmword ptr [rax], xmm0
.text:0000000000008EFD                 mov     qword ptr [rax+10h], 0
.text:0000000000008F05                 mov     rax, [rbx+10h]
.text:0000000000008F09                 lea     rdx, [rax+rax*2]
.text:0000000000008F0D                 mov     rax, [rbx+30h]
.text:0000000000008F11                 lea     rax, [rax+rdx*8]
.text:0000000000008F15                 movups  xmmword ptr [rax], xmm0
.text:0000000000008F18                 mov     qword ptr [rax+10h], 0
.text:0000000000008F20                 mov     rax, [rbx+10h]
.text:0000000000008F24                 lea     rdx, [rax+1]
.text:0000000000008F28                 mov     [rbx+10h], rdx
.text:0000000000008F2C
.text:0000000000008F2C loc_8F2C:                               ; CODE XREF: re_dfa_add_node+1C9↓j
.text:0000000000008F2C                 add     rsp, 18h
.text:0000000000008F30                 pop     rbx
.text:0000000000008F31                 pop     rbp
.text:0000000000008F32                 pop     r12
.text:0000000000008F34                 pop     r13
.text:0000000000008F36                 pop     r14
.text:0000000000008F38                 pop     r15
.text:0000000000008F3A                 retn
.text:0000000000008F3A ; ---------------------------------------------------------------------------
.text:0000000000008F3B                 align 20h
.text:0000000000008F40
.text:0000000000008F40 loc_8F40:                               ; CODE XREF: re_dfa_add_node+1F↑j
.text:0000000000008F40                 lea     r13, [rbp+rbp+0]
.text:0000000000008F45                 mov     rax, 0AAAAAAAAAAAAAAAh
.text:0000000000008F4F                 cmp     r13, rax
.text:0000000000008F52                 ja      loc_9032
.text:0000000000008F58                 mov     rdi, [rdi]      ; ptr
.text:0000000000008F5B                 mov     rsi, rbp
.text:0000000000008F5E                 mov     [rsp+48h+var_40], rdx
.text:0000000000008F63                 shl     rsi, 5          ; size
.text:0000000000008F67                 call    _realloc
.text:0000000000008F6C                 test    rax, rax
.text:0000000000008F6F                 jz      loc_9032
.text:0000000000008F75                 mov     r15, rbp
.text:0000000000008F78                 mov     rdi, [rbx+18h]  ; ptr
.text:0000000000008F7C                 mov     [rbx], rax
.text:0000000000008F7F                 shl     r15, 4
.text:0000000000008F83                 mov     rsi, r15        ; size
.text:0000000000008F86                 call    _realloc
.text:0000000000008F8B                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000008F8F                 mov     rsi, r15        ; size
.text:0000000000008F92                 lea     r15, [r13+rbp*4+0]
.text:0000000000008F97                 mov     r12, rax
.text:0000000000008F9A                 shl     r15, 3
.text:0000000000008F9E                 call    _realloc
.text:0000000000008FA3                 mov     rdi, [rbx+28h]  ; ptr
.text:0000000000008FA7                 mov     rsi, r15        ; size
.text:0000000000008FAA                 mov     [rsp+48h+ptr], rax
.text:0000000000008FAE                 call    _realloc
.text:0000000000008FB3                 mov     rdi, [rbx+30h]  ; ptr
.text:0000000000008FB7                 mov     rsi, r15        ; size
.text:0000000000008FBA                 mov     rbp, rax
.text:0000000000008FBD                 call    _realloc
.text:0000000000008FC2                 test    r12, r12
.text:0000000000008FC5                 mov     rcx, [rsp+48h+ptr]
.text:0000000000008FC9                 jz      short loc_9000
.text:0000000000008FCB                 test    rcx, rcx
.text:0000000000008FCE                 jz      short loc_9000
.text:0000000000008FD0                 test    rbp, rbp
.text:0000000000008FD3                 jz      short loc_9000
.text:0000000000008FD5                 test    rax, rax
.text:0000000000008FD8                 mov     rdx, [rsp+48h+var_40]
.text:0000000000008FDD                 jz      short loc_9000
.text:0000000000008FDF                 mov     [rbx+18h], r12
.text:0000000000008FE3                 mov     [rbx+20h], rcx
.text:0000000000008FE7                 mov     [rbx+28h], rbp
.text:0000000000008FEB                 mov     [rbx+30h], rax
.text:0000000000008FEF                 mov     [rbx+8], r13
.text:0000000000008FF3                 mov     rsi, [rbx+10h]
.text:0000000000008FF7                 jmp     loc_8E9D
.text:0000000000008FF7 ; ---------------------------------------------------------------------------
.text:0000000000008FFC                 align 20h
.text:0000000000009000
.text:0000000000009000 loc_9000:                               ; CODE XREF: re_dfa_add_node+159↑j
.text:0000000000009000                                         ; re_dfa_add_node+15E↑j ...
.text:0000000000009000                 mov     rdi, r12        ; ptr
.text:0000000000009003                 mov     [rsp+48h+var_40], rax
.text:0000000000009008                 mov     [rsp+48h+ptr], rcx
.text:000000000000900C                 call    _free
.text:0000000000009011                 mov     rcx, [rsp+48h+ptr]
.text:0000000000009015                 mov     rdi, rcx        ; ptr
.text:0000000000009018                 call    _free
.text:000000000000901D                 mov     rdi, rbp        ; ptr
.text:0000000000009020                 call    _free
.text:0000000000009025                 mov     rax, [rsp+48h+var_40]
.text:000000000000902A                 mov     rdi, rax        ; ptr
.text:000000000000902D                 call    _free
.text:0000000000009032
.text:0000000000009032 loc_9032:                               ; CODE XREF: re_dfa_add_node+E2↑j
.text:0000000000009032                                         ; re_dfa_add_node+FF↑j
.text:0000000000009032                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009039                 jmp     loc_8F2C
.text:0000000000009039 ; } // starts at 8E70
.text:0000000000009039 re_dfa_add_node endp
.text:0000000000009039
.text:0000000000009039 ; ---------------------------------------------------------------------------
.text:000000000000903E                 align 20h
.text:0000000000009040
.text:0000000000009040 ; =============== S U B R O U T I N E =======================================
.text:0000000000009040
.text:0000000000009040
.text:0000000000009040 duplicate_node  proc near               ; CODE XREF: duplicate_node_closure+102↓p
.text:0000000000009040                                         ; duplicate_node_closure+148↓p ...
.text:0000000000009040 ; __unwind {
.text:0000000000009040                 push    r13
.text:0000000000009042                 push    r12
.text:0000000000009044                 mov     r13, rsi
.text:0000000000009047                 push    rbp
.text:0000000000009048                 push    rbx
.text:0000000000009049                 shl     r13, 4
.text:000000000000904D                 mov     rbp, rsi
.text:0000000000009050                 mov     r12d, edx
.text:0000000000009053                 mov     rbx, rdi
.text:0000000000009056                 sub     rsp, 8
.text:000000000000905A                 mov     rax, [rdi]
.text:000000000000905D                 mov     rsi, [rax+r13]
.text:0000000000009061                 mov     rdx, [rax+r13+8]
.text:0000000000009066                 call    re_dfa_add_node
.text:000000000000906B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000906F                 jz      short loc_90D4
.text:0000000000009071                 mov     edi, r12d
.text:0000000000009074                 mov     r8, [rbx]
.text:0000000000009077                 mov     rsi, rax
.text:000000000000907A                 and     di, 3FFh
.text:000000000000907F                 shl     rsi, 4
.text:0000000000009083                 mov     ecx, edi
.text:0000000000009085                 and     ecx, 3FFh
.text:000000000000908B                 add     rsi, r8
.text:000000000000908E                 shl     ecx, 8
.text:0000000000009091                 mov     edx, ecx
.text:0000000000009093                 mov     ecx, [rsi+8]
.text:0000000000009096                 and     ecx, 0FFFC00FFh
.text:000000000000909C                 or      ecx, edx
.text:000000000000909E                 mov     [rsi+8], ecx
.text:00000000000090A1                 mov     edx, [r8+r13+8]
.text:00000000000090A6                 and     ecx, 0FFFC00FFh
.text:00000000000090AC                 shr     edx, 8
.text:00000000000090AF                 or      edx, edi
.text:00000000000090B1                 and     edx, 3FFh
.text:00000000000090B7                 shl     edx, 8
.text:00000000000090BA                 or      edx, ecx
.text:00000000000090BC                 mov     ecx, edx
.text:00000000000090BE                 mov     [rsi+8], edx
.text:00000000000090C1                 shr     ecx, 10h
.text:00000000000090C4                 mov     edx, ecx
.text:00000000000090C6                 or      edx, 4
.text:00000000000090C9                 mov     [rsi+0Ah], dl
.text:00000000000090CC                 mov     rdx, [rbx+20h]
.text:00000000000090D0                 mov     [rdx+rax*8], rbp
.text:00000000000090D4
.text:00000000000090D4 loc_90D4:                               ; CODE XREF: duplicate_node+2F↑j
.text:00000000000090D4                 add     rsp, 8
.text:00000000000090D8                 pop     rbx
.text:00000000000090D9                 pop     rbp
.text:00000000000090DA                 pop     r12
.text:00000000000090DC                 pop     r13
.text:00000000000090DE                 retn
.text:00000000000090DE ; } // starts at 9040
.text:00000000000090DE duplicate_node  endp
.text:00000000000090DE
.text:00000000000090DE ; ---------------------------------------------------------------------------
.text:00000000000090DF                 align 20h
.text:00000000000090E0
.text:00000000000090E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090E0
.text:00000000000090E0
.text:00000000000090E0 duplicate_node_closure proc near        ; CODE XREF: duplicate_node_closure+17A↓p
.text:00000000000090E0                                         ; calc_eclosure_iter+26A↓p
.text:00000000000090E0
.text:00000000000090E0 var_48          = qword ptr -48h
.text:00000000000090E0 var_40          = qword ptr -40h
.text:00000000000090E0
.text:00000000000090E0 ; __unwind {
.text:00000000000090E0                 push    r15
.text:00000000000090E2                 push    r14
.text:00000000000090E4                 mov     r9, rsi
.text:00000000000090E7                 push    r13
.text:00000000000090E9                 push    r12
.text:00000000000090EB                 mov     r14, rdi
.text:00000000000090EE                 push    rbp
.text:00000000000090EF                 push    rbx
.text:00000000000090F0                 mov     r13, rdx
.text:00000000000090F3                 mov     ebp, r8d
.text:00000000000090F6                 sub     rsp, 18h
.text:00000000000090FA                 mov     [rsp+48h+var_40], rcx
.text:00000000000090FF
.text:00000000000090FF loc_90FF:                               ; CODE XREF: duplicate_node_closure+125↓j
.text:00000000000090FF                                         ; duplicate_node_closure+1E1↓j
.text:00000000000090FF                 mov     r8, [r14]
.text:0000000000009102                 mov     rax, r9
.text:0000000000009105                 mov     rdi, [r14+28h]
.text:0000000000009109                 shl     rax, 4
.text:000000000000910D                 mov     r12, r13
.text:0000000000009110                 add     rax, r8
.text:0000000000009113                 cmp     byte ptr [rax+8], 4
.text:0000000000009117                 jz      loc_92D0
.text:000000000000911D                 lea     r12, [r9+r9*2]
.text:0000000000009121                 shl     r12, 3
.text:0000000000009125                 lea     rsi, [rdi+r12]
.text:0000000000009129                 mov     rcx, [rsi+8]
.text:000000000000912D                 test    rcx, rcx
.text:0000000000009130                 jz      loc_9329
.text:0000000000009136                 lea     rbx, [r13+r13*2+0]
.text:000000000000913B                 mov     rsi, [rsi+10h]
.text:000000000000913F                 shl     rbx, 3
.text:0000000000009143                 add     rdi, rbx
.text:0000000000009146                 cmp     rcx, 1
.text:000000000000914A                 mov     r15, [rsi]
.text:000000000000914D                 mov     qword ptr [rdi+8], 0
.text:0000000000009155                 jz      loc_9270
.text:000000000000915B                 mov     rdx, [r14+10h]
.text:000000000000915F                 lea     rsi, [rdx-1]
.text:0000000000009163                 mov     rax, rsi
.text:0000000000009166                 shl     rax, 4
.text:000000000000916A                 add     rax, r8
.text:000000000000916D                 test    byte ptr [rax+0Ah], 4
.text:0000000000009171                 jz      loc_9220
.text:0000000000009177                 test    rsi, rsi
.text:000000000000917A                 jle     loc_9220
.text:0000000000009180                 shl     rdx, 4
.text:0000000000009184                 sub     r8, rax
.text:0000000000009187                 mov     rcx, [r14+20h]
.text:000000000000918B                 lea     r8, [r8+rdx-20h]
.text:0000000000009190                 jmp     short loc_91AA
.text:0000000000009190 ; ---------------------------------------------------------------------------
.text:0000000000009192                 align 8
.text:0000000000009198
.text:0000000000009198 loc_9198:                               ; CODE XREF: duplicate_node_closure+CE↓j
.text:0000000000009198                                         ; duplicate_node_closure+DE↓j
.text:0000000000009198                 add     rax, r8
.text:000000000000919B                 sub     rsi, 1
.text:000000000000919F                 test    byte ptr [rax+0Ah], 4
.text:00000000000091A3                 jz      short loc_9220
.text:00000000000091A5                 test    rsi, rsi
.text:00000000000091A8                 jle     short loc_9220
.text:00000000000091AA
.text:00000000000091AA loc_91AA:                               ; CODE XREF: duplicate_node_closure+B0↑j
.text:00000000000091AA                 cmp     [rcx+rsi*8], r15
.text:00000000000091AE                 jnz     short loc_9198
.text:00000000000091B0                 mov     edx, [rax+8]
.text:00000000000091B3                 shr     edx, 8
.text:00000000000091B6                 and     edx, 3FFh
.text:00000000000091BC                 cmp     ebp, edx
.text:00000000000091BE                 jnz     short loc_9198
.text:00000000000091C0                 call    re_node_set_insert
.text:00000000000091C5                 test    al, al
.text:00000000000091C7                 jz      short loc_920B
.text:00000000000091C9
.text:00000000000091C9 loc_91C9:                               ; CODE XREF: duplicate_node_closure+181↓j
.text:00000000000091C9                 mov     rax, [r14+28h]
.text:00000000000091CD                 mov     edx, ebp
.text:00000000000091CF                 mov     rdi, r14
.text:00000000000091D2                 mov     rax, [rax+r12+10h]
.text:00000000000091D7                 mov     r9, [rax+8]
.text:00000000000091DB                 mov     rsi, r9
.text:00000000000091DE                 mov     [rsp+48h+var_48], r9
.text:00000000000091E2                 call    duplicate_node
.text:00000000000091E7                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000091EB                 mov     r13, rax
.text:00000000000091EE                 jz      short loc_920B
.text:00000000000091F0
.text:00000000000091F0 loc_91F0:                               ; CODE XREF: duplicate_node_closure+244↓j
.text:00000000000091F0                 add     rbx, [r14+28h]
.text:00000000000091F4                 mov     rsi, r13
.text:00000000000091F7                 mov     rdi, rbx
.text:00000000000091FA                 call    re_node_set_insert
.text:00000000000091FF                 test    al, al
.text:0000000000009201                 mov     r9, [rsp+48h+var_48]
.text:0000000000009205                 jnz     loc_90FF
.text:000000000000920B
.text:000000000000920B loc_920B:                               ; CODE XREF: duplicate_node_closure+E7↑j
.text:000000000000920B                                         ; duplicate_node_closure+10E↑j ...
.text:000000000000920B                 mov     eax, 0Ch
.text:0000000000009210
.text:0000000000009210 loc_9210:                               ; CODE XREF: duplicate_node_closure+187↓j
.text:0000000000009210                                         ; duplicate_node_closure+257↓j ...
.text:0000000000009210                 add     rsp, 18h
.text:0000000000009214                 pop     rbx
.text:0000000000009215                 pop     rbp
.text:0000000000009216                 pop     r12
.text:0000000000009218                 pop     r13
.text:000000000000921A                 pop     r14
.text:000000000000921C                 pop     r15
.text:000000000000921E                 retn
.text:000000000000921E ; ---------------------------------------------------------------------------
.text:000000000000921F                 align 20h
.text:0000000000009220
.text:0000000000009220 loc_9220:                               ; CODE XREF: duplicate_node_closure+91↑j
.text:0000000000009220                                         ; duplicate_node_closure+9A↑j ...
.text:0000000000009220                 mov     edx, ebp
.text:0000000000009222                 mov     rsi, r15
.text:0000000000009225                 mov     rdi, r14
.text:0000000000009228                 call    duplicate_node
.text:000000000000922D                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009231                 mov     r13, rax
.text:0000000000009234                 jz      short loc_920B
.text:0000000000009236                 mov     rdi, [r14+28h]
.text:000000000000923A                 mov     rsi, r13
.text:000000000000923D                 add     rdi, rbx
.text:0000000000009240                 call    re_node_set_insert
.text:0000000000009245                 test    al, al
.text:0000000000009247                 jz      short loc_920B
.text:0000000000009249                 mov     rcx, [rsp+48h+var_40]
.text:000000000000924E                 mov     r8d, ebp
.text:0000000000009251                 mov     rdx, r13
.text:0000000000009254                 mov     rsi, r15
.text:0000000000009257                 mov     rdi, r14
.text:000000000000925A                 call    duplicate_node_closure
.text:000000000000925F                 test    eax, eax
.text:0000000000009261                 jz      loc_91C9
.text:0000000000009267                 jmp     short loc_9210
.text:0000000000009267 ; ---------------------------------------------------------------------------
.text:0000000000009269                 align 10h
.text:0000000000009270
.text:0000000000009270 loc_9270:                               ; CODE XREF: duplicate_node_closure+75↑j
.text:0000000000009270                 cmp     r9, [rsp+48h+var_40]
.text:0000000000009275                 jnz     short loc_9280
.text:0000000000009277                 cmp     r9, r13
.text:000000000000927A                 jnz     loc_933C
.text:0000000000009280
.text:0000000000009280 loc_9280:                               ; CODE XREF: duplicate_node_closure+195↑j
.text:0000000000009280                 mov     eax, [rax+8]
.text:0000000000009283                 mov     rsi, r15
.text:0000000000009286                 mov     rdi, r14
.text:0000000000009289                 shr     eax, 8
.text:000000000000928C                 and     eax, 3FFh
.text:0000000000009291                 or      ebp, eax
.text:0000000000009293                 mov     edx, ebp
.text:0000000000009295                 call    duplicate_node
.text:000000000000929A                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000929E                 mov     r13, rax
.text:00000000000092A1                 jz      loc_920B
.text:00000000000092A7                 add     rbx, [r14+28h]
.text:00000000000092AB                 mov     rsi, rax
.text:00000000000092AE                 mov     rdi, rbx
.text:00000000000092B1                 call    re_node_set_insert
.text:00000000000092B6                 test    al, al
.text:00000000000092B8                 jz      loc_920B
.text:00000000000092BE                 mov     r9, r15
.text:00000000000092C1                 jmp     loc_90FF
.text:00000000000092C1 ; ---------------------------------------------------------------------------
.text:00000000000092C6                 align 10h
.text:00000000000092D0
.text:00000000000092D0 loc_92D0:                               ; CODE XREF: duplicate_node_closure+37↑j
.text:00000000000092D0                 mov     rax, [r14+18h]
.text:00000000000092D4                 lea     rbx, [r13+r13*2+0]
.text:00000000000092D9                 lea     r15, ds:0[r9*8]
.text:00000000000092E1                 mov     edx, ebp
.text:00000000000092E3                 shl     rbx, 3
.text:00000000000092E7                 mov     r9, [rax+r9*8]
.text:00000000000092EB                 mov     qword ptr [rdi+rbx+8], 0
.text:00000000000092F4                 mov     rdi, r14
.text:00000000000092F7                 mov     rsi, r9
.text:00000000000092FA                 mov     [rsp+48h+var_48], r9
.text:00000000000092FE                 call    duplicate_node
.text:0000000000009303                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009307                 mov     r13, rax
.text:000000000000930A                 mov     r9, [rsp+48h+var_48]
.text:000000000000930E                 jz      loc_920B
.text:0000000000009314                 mov     rax, [r14+18h]
.text:0000000000009318                 mov     [rsp+48h+var_48], r9
.text:000000000000931C                 mov     rcx, [rax+r15]
.text:0000000000009320                 mov     [rax+r12*8], rcx
.text:0000000000009324                 jmp     loc_91F0
.text:0000000000009329 ; ---------------------------------------------------------------------------
.text:0000000000009329
.text:0000000000009329 loc_9329:                               ; CODE XREF: duplicate_node_closure+50↑j
.text:0000000000009329                 mov     rax, [r14+18h]
.text:000000000000932D                 mov     rcx, [rax+r9*8]
.text:0000000000009331                 mov     [rax+r13*8], rcx
.text:0000000000009335                 xor     eax, eax
.text:0000000000009337                 jmp     loc_9210
.text:000000000000933C ; ---------------------------------------------------------------------------
.text:000000000000933C
.text:000000000000933C loc_933C:                               ; CODE XREF: duplicate_node_closure+19A↑j
.text:000000000000933C                 mov     rsi, r15
.text:000000000000933F                 call    re_node_set_insert
.text:0000000000009344                 mov     edx, eax
.text:0000000000009346                 xor     eax, eax
.text:0000000000009348                 test    dl, dl
.text:000000000000934A                 jnz     loc_9210
.text:0000000000009350                 jmp     loc_920B
.text:0000000000009350 ; } // starts at 90E0
.text:0000000000009350 duplicate_node_closure endp
.text:0000000000009350
.text:0000000000009350 ; ---------------------------------------------------------------------------
.text:0000000000009355                 align 20h
.text:0000000000009360
.text:0000000000009360 ; =============== S U B R O U T I N E =======================================
.text:0000000000009360
.text:0000000000009360
.text:0000000000009360 ; __int64 __fastcall free_state(void *ptr)
.text:0000000000009360 free_state      proc near               ; CODE XREF: free_dfa_content+FC↓p
.text:0000000000009360                                         ; re_acquire_state_context+211↓p ...
.text:0000000000009360 ; __unwind {
.text:0000000000009360                 push    rbx
.text:0000000000009361                 mov     rbx, rdi
.text:0000000000009364                 mov     rdi, [rdi+30h]  ; ptr
.text:0000000000009368                 call    _free
.text:000000000000936D                 mov     rdi, [rbx+48h]  ; ptr
.text:0000000000009371                 call    _free
.text:0000000000009376                 mov     rax, [rbx+50h]
.text:000000000000937A                 lea     rdx, [rbx+8]
.text:000000000000937E                 cmp     rax, rdx
.text:0000000000009381                 jz      short loc_9395
.text:0000000000009383                 mov     rdi, [rax+10h]  ; ptr
.text:0000000000009387                 call    _free
.text:000000000000938C                 mov     rdi, [rbx+50h]  ; ptr
.text:0000000000009390                 call    _free
.text:0000000000009395
.text:0000000000009395 loc_9395:                               ; CODE XREF: free_state+21↑j
.text:0000000000009395                 mov     rdi, [rbx+18h]  ; ptr
.text:0000000000009399                 call    _free
.text:000000000000939E                 mov     rdi, [rbx+60h]  ; ptr
.text:00000000000093A2                 call    _free
.text:00000000000093A7                 mov     rdi, [rbx+58h]  ; ptr
.text:00000000000093AB                 call    _free
.text:00000000000093B0                 mov     rdi, rbx        ; ptr
.text:00000000000093B3                 pop     rbx
.text:00000000000093B4                 jmp     _free
.text:00000000000093B4 ; } // starts at 9360
.text:00000000000093B4 free_state      endp
.text:00000000000093B4
.text:00000000000093B4 ; ---------------------------------------------------------------------------
.text:00000000000093B9                 align 20h
.text:00000000000093C0
.text:00000000000093C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000093C0
.text:00000000000093C0
.text:00000000000093C0 re_string_destruct proc near            ; CODE XREF: re_search_internal+B74↓p
.text:00000000000093C0                                         ; re_compile_internal+377↓p ...
.text:00000000000093C0 ; __unwind {
.text:00000000000093C0                 push    rbx
.text:00000000000093C1                 mov     rbx, rdi
.text:00000000000093C4                 mov     rdi, [rdi+10h]  ; ptr
.text:00000000000093C8                 call    _free
.text:00000000000093CD                 mov     rdi, [rbx+18h]  ; ptr
.text:00000000000093D1                 call    _free
.text:00000000000093D6                 cmp     byte ptr [rbx+8Bh], 0
.text:00000000000093DD                 jnz     short loc_93E8
.text:00000000000093DF                 pop     rbx
.text:00000000000093E0                 retn
.text:00000000000093E0 ; ---------------------------------------------------------------------------
.text:00000000000093E1                 align 8
.text:00000000000093E8
.text:00000000000093E8 loc_93E8:                               ; CODE XREF: re_string_destruct+1D↑j
.text:00000000000093E8                 mov     rdi, [rbx+8]    ; ptr
.text:00000000000093EC                 pop     rbx
.text:00000000000093ED                 jmp     _free
.text:00000000000093ED ; } // starts at 93C0
.text:00000000000093ED re_string_destruct endp
.text:00000000000093ED
.text:00000000000093ED ; ---------------------------------------------------------------------------
.text:00000000000093F2                 align 20h
.text:0000000000009400
.text:0000000000009400 ; =============== S U B R O U T I N E =======================================
.text:0000000000009400
.text:0000000000009400
.text:0000000000009400 ; __int64 __fastcall free_dfa_content(void *ptr)
.text:0000000000009400 free_dfa_content proc near              ; CODE XREF: re_compile_internal+37F↓p
.text:0000000000009400                                         ; regfree+C↓p
.text:0000000000009400 ; __unwind {
.text:0000000000009400                 push    r14
.text:0000000000009402                 push    r13
.text:0000000000009404                 push    r12
.text:0000000000009406                 mov     r12, rdi
.text:0000000000009409                 push    rbp
.text:000000000000940A                 push    rbx
.text:000000000000940B                 mov     rdi, [rdi]
.text:000000000000940E                 test    rdi, rdi
.text:0000000000009411                 jz      short loc_943E
.text:0000000000009413                 cmp     qword ptr [r12+10h], 0
.text:0000000000009419                 jz      short loc_943E
.text:000000000000941B                 xor     ebx, ebx
.text:000000000000941D                 jmp     short loc_9424
.text:000000000000941D ; ---------------------------------------------------------------------------
.text:000000000000941F                 align 20h
.text:0000000000009420
.text:0000000000009420 loc_9420:                               ; CODE XREF: free_dfa_content+3C↓j
.text:0000000000009420                 mov     rdi, [r12]
.text:0000000000009424
.text:0000000000009424 loc_9424:                               ; CODE XREF: free_dfa_content+1D↑j
.text:0000000000009424                 mov     rax, rbx
.text:0000000000009427                 add     rbx, 1
.text:000000000000942B                 shl     rax, 4
.text:000000000000942F                 add     rdi, rax
.text:0000000000009432                 call    free_token
.text:0000000000009437                 cmp     [r12+10h], rbx
.text:000000000000943C                 ja      short loc_9420
.text:000000000000943E
.text:000000000000943E loc_943E:                               ; CODE XREF: free_dfa_content+11↑j
.text:000000000000943E                                         ; free_dfa_content+19↑j
.text:000000000000943E                 mov     rdi, [r12+18h]  ; ptr
.text:0000000000009443                 call    _free
.text:0000000000009448                 cmp     qword ptr [r12+10h], 0
.text:000000000000944E                 jz      short loc_94A3
.text:0000000000009450                 xor     ebx, ebx
.text:0000000000009452                 xor     ebp, ebp
.text:0000000000009454                 nop     dword ptr [rax+00h]
.text:0000000000009458
.text:0000000000009458 loc_9458:                               ; CODE XREF: free_dfa_content+A1↓j
.text:0000000000009458                 mov     rax, [r12+30h]
.text:000000000000945D                 test    rax, rax
.text:0000000000009460                 jz      short loc_946C
.text:0000000000009462                 mov     rdi, [rax+rbx+10h] ; ptr
.text:0000000000009467                 call    _free
.text:000000000000946C
.text:000000000000946C loc_946C:                               ; CODE XREF: free_dfa_content+60↑j
.text:000000000000946C                 mov     rax, [r12+38h]
.text:0000000000009471                 test    rax, rax
.text:0000000000009474                 jz      short loc_9480
.text:0000000000009476                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000947B                 call    _free
.text:0000000000009480
.text:0000000000009480 loc_9480:                               ; CODE XREF: free_dfa_content+74↑j
.text:0000000000009480                 mov     rax, [r12+28h]
.text:0000000000009485                 test    rax, rax
.text:0000000000009488                 jz      short loc_9494
.text:000000000000948A                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000948F                 call    _free
.text:0000000000009494
.text:0000000000009494 loc_9494:                               ; CODE XREF: free_dfa_content+88↑j
.text:0000000000009494                 add     rbp, 1
.text:0000000000009498                 add     rbx, 18h
.text:000000000000949C                 cmp     [r12+10h], rbp
.text:00000000000094A1                 ja      short loc_9458
.text:00000000000094A3
.text:00000000000094A3 loc_94A3:                               ; CODE XREF: free_dfa_content+4E↑j
.text:00000000000094A3                 mov     rdi, [r12+28h]  ; ptr
.text:00000000000094A8                 call    _free
.text:00000000000094AD                 mov     rdi, [r12+30h]  ; ptr
.text:00000000000094B2                 call    _free
.text:00000000000094B7                 mov     rdi, [r12+38h]  ; ptr
.text:00000000000094BC                 call    _free
.text:00000000000094C1                 mov     rdi, [r12]      ; ptr
.text:00000000000094C5                 call    _free
.text:00000000000094CA                 mov     rdi, [r12+40h]
.text:00000000000094CF                 test    rdi, rdi
.text:00000000000094D2                 jz      short loc_9527
.text:00000000000094D4                 xor     r14d, r14d
.text:00000000000094D7                 xor     r13d, r13d
.text:00000000000094DA                 nop     word ptr [rax+rax+00h]
.text:00000000000094E0
.text:00000000000094E0 loc_94E0:                               ; CODE XREF: free_dfa_content+125↓j
.text:00000000000094E0                 lea     rbp, [rdi+r14]
.text:00000000000094E4                 cmp     qword ptr [rbp+0], 0
.text:00000000000094E9                 jle     short loc_9507
.text:00000000000094EB                 xor     ebx, ebx
.text:00000000000094ED                 nop     dword ptr [rax]
.text:00000000000094F0
.text:00000000000094F0 loc_94F0:                               ; CODE XREF: free_dfa_content+105↓j
.text:00000000000094F0                 mov     rax, [rbp+10h]
.text:00000000000094F4                 mov     rdi, [rax+rbx*8] ; ptr
.text:00000000000094F8                 add     rbx, 1
.text:00000000000094FC                 call    free_state
.text:0000000000009501                 cmp     [rbp+0], rbx
.text:0000000000009505                 jg      short loc_94F0
.text:0000000000009507
.text:0000000000009507 loc_9507:                               ; CODE XREF: free_dfa_content+E9↑j
.text:0000000000009507                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000950B                 add     r13, 1
.text:000000000000950F                 add     r14, 18h
.text:0000000000009513                 call    _free
.text:0000000000009518                 cmp     [r12+88h], r13
.text:0000000000009520                 mov     rdi, [r12+40h]  ; ptr
.text:0000000000009525                 jnb     short loc_94E0
.text:0000000000009527
.text:0000000000009527 loc_9527:                               ; CODE XREF: free_dfa_content+D2↑j
.text:0000000000009527                 call    _free
.text:000000000000952C                 mov     rdi, [r12+78h]  ; ptr
.text:0000000000009531                 lea     rax, utf8_sb_map
.text:0000000000009538                 cmp     rdi, rax
.text:000000000000953B                 jz      short loc_9542
.text:000000000000953D                 call    _free
.text:0000000000009542
.text:0000000000009542 loc_9542:                               ; CODE XREF: free_dfa_content+13B↑j
.text:0000000000009542                 mov     rdi, [r12+0E0h] ; ptr
.text:000000000000954A                 call    _free
.text:000000000000954F                 pop     rbx
.text:0000000000009550                 mov     rdi, r12        ; ptr
.text:0000000000009553                 pop     rbp
.text:0000000000009554                 pop     r12
.text:0000000000009556                 pop     r13
.text:0000000000009558                 pop     r14
.text:000000000000955A                 jmp     _free
.text:000000000000955A ; } // starts at 9400
.text:000000000000955A free_dfa_content endp
.text:000000000000955A
.text:000000000000955A ; ---------------------------------------------------------------------------
.text:000000000000955F                 align 20h
.text:0000000000009560
.text:0000000000009560 ; =============== S U B R O U T I N E =======================================
.text:0000000000009560
.text:0000000000009560
.text:0000000000009560 match_ctx_clean proc near               ; CODE XREF: re_search_internal+F34↓p
.text:0000000000009560                                         ; re_search_internal+1494↓p
.text:0000000000009560 ; __unwind {
.text:0000000000009560                 push    r14
.text:0000000000009562                 push    r13
.text:0000000000009564                 mov     r14, rdi
.text:0000000000009567                 push    r12
.text:0000000000009569                 push    rbp
.text:000000000000956A                 push    rbx
.text:000000000000956B                 cmp     qword ptr [rdi+0E8h], 0
.text:0000000000009573                 jle     loc_95F9
.text:0000000000009579                 xor     r13d, r13d
.text:000000000000957C                 nop     dword ptr [rax+00h]
.text:0000000000009580
.text:0000000000009580 loc_9580:                               ; CODE XREF: match_ctx_clean+97↓j
.text:0000000000009580                 mov     rax, [r14+0F8h]
.text:0000000000009587                 mov     r12, [rax+r13*8]
.text:000000000000958B                 cmp     qword ptr [r12+20h], 0
.text:0000000000009591                 jle     short loc_95BD
.text:0000000000009593                 xor     ebx, ebx
.text:0000000000009595                 nop     dword ptr [rax]
.text:0000000000009598
.text:0000000000009598 loc_9598:                               ; CODE XREF: match_ctx_clean+5B↓j
.text:0000000000009598                 mov     rax, [r12+28h]
.text:000000000000959D                 mov     rbp, [rax+rbx*8]
.text:00000000000095A1                 add     rbx, 1
.text:00000000000095A5                 mov     rdi, [rbp+20h]  ; ptr
.text:00000000000095A9                 call    _free
.text:00000000000095AE                 mov     rdi, rbp        ; ptr
.text:00000000000095B1                 call    _free
.text:00000000000095B6                 cmp     [r12+20h], rbx
.text:00000000000095BB                 jg      short loc_9598
.text:00000000000095BD
.text:00000000000095BD loc_95BD:                               ; CODE XREF: match_ctx_clean+31↑j
.text:00000000000095BD                 mov     rdi, [r12+28h]  ; ptr
.text:00000000000095C2                 call    _free
.text:00000000000095C7                 mov     rax, [r12+10h]
.text:00000000000095CC                 test    rax, rax
.text:00000000000095CF                 jz      short loc_95E4
.text:00000000000095D1                 mov     rdi, [rax+10h]  ; ptr
.text:00000000000095D5                 call    _free
.text:00000000000095DA                 mov     rdi, [r12+10h]  ; ptr
.text:00000000000095DF                 call    _free
.text:00000000000095E4
.text:00000000000095E4 loc_95E4:                               ; CODE XREF: match_ctx_clean+6F↑j
.text:00000000000095E4                 mov     rdi, r12        ; ptr
.text:00000000000095E7                 add     r13, 1
.text:00000000000095EB                 call    _free
.text:00000000000095F0                 cmp     [r14+0E8h], r13
.text:00000000000095F7                 jg      short loc_9580
.text:00000000000095F9
.text:00000000000095F9 loc_95F9:                               ; CODE XREF: match_ctx_clean+13↑j
.text:00000000000095F9                 pop     rbx
.text:00000000000095FA                 mov     qword ptr [r14+0E8h], 0
.text:0000000000009605                 mov     qword ptr [r14+0C8h], 0
.text:0000000000009610                 pop     rbp
.text:0000000000009611                 pop     r12
.text:0000000000009613                 pop     r13
.text:0000000000009615                 pop     r14
.text:0000000000009617                 retn
.text:0000000000009617 ; } // starts at 9560
.text:0000000000009617 match_ctx_clean endp
.text:0000000000009617
.text:0000000000009617 ; ---------------------------------------------------------------------------
.text:0000000000009618                 align 20h
.text:0000000000009620
.text:0000000000009620 ; =============== S U B R O U T I N E =======================================
.text:0000000000009620
.text:0000000000009620
.text:0000000000009620 re_string_char_size_at_part_0 proc near ; CODE XREF: check_node_accept_bytes_isra_31+3A↓p
.text:0000000000009620                                         ; parse_bracket_element_constprop_37+3B↓p ...
.text:0000000000009620 ; __unwind {
.text:0000000000009620                 mov     rcx, [rdi+30h]
.text:0000000000009624                 lea     rax, [rsi+1]
.text:0000000000009628                 cmp     rax, rcx
.text:000000000000962B                 jge     short loc_9668
.text:000000000000962D                 mov     rdx, [rdi+10h]
.text:0000000000009631                 lea     rdi, ds:0[rax*4]
.text:0000000000009639                 cmp     dword ptr [rdx+rax*4], 0FFFFFFFFh
.text:000000000000963D                 jnz     short loc_9668
.text:000000000000963F                 sub     rcx, rsi
.text:0000000000009642                 lea     rsi, [rdx+rdi-4]
.text:0000000000009647                 mov     edx, 2
.text:000000000000964C                 jmp     short loc_965B
.text:000000000000964C ; ---------------------------------------------------------------------------
.text:000000000000964E                 align 10h
.text:0000000000009650
.text:0000000000009650 loc_9650:                               ; CODE XREF: re_string_char_size_at_part_0+40↓j
.text:0000000000009650                 add     rdx, 1
.text:0000000000009654                 cmp     dword ptr [rsi+rdx*4-4], 0FFFFFFFFh
.text:0000000000009659                 jnz     short locret_966D
.text:000000000000965B
.text:000000000000965B loc_965B:                               ; CODE XREF: re_string_char_size_at_part_0+2C↑j
.text:000000000000965B                 cmp     rdx, rcx
.text:000000000000965E                 mov     eax, edx
.text:0000000000009660                 jnz     short loc_9650
.text:0000000000009662                 rep retn
.text:0000000000009662 ; ---------------------------------------------------------------------------
.text:0000000000009664                 align 8
.text:0000000000009668
.text:0000000000009668 loc_9668:                               ; CODE XREF: re_string_char_size_at_part_0+B↑j
.text:0000000000009668                                         ; re_string_char_size_at_part_0+1D↑j
.text:0000000000009668                 mov     eax, 1
.text:000000000000966D
.text:000000000000966D locret_966D:                            ; CODE XREF: re_string_char_size_at_part_0+39↑j
.text:000000000000966D                 rep retn
.text:000000000000966D ; } // starts at 9620
.text:000000000000966D re_string_char_size_at_part_0 endp
.text:000000000000966D
.text:000000000000966D ; ---------------------------------------------------------------------------
.text:000000000000966F                 align 10h
.text:0000000000009670
.text:0000000000009670 ; =============== S U B R O U T I N E =======================================
.text:0000000000009670
.text:0000000000009670
.text:0000000000009670 re_node_set_compare_part_2 proc near    ; CODE XREF: re_acquire_state_context+A3↓p
.text:0000000000009670                                         ; re_acquire_state+80↓p
.text:0000000000009670 ; __unwind {
.text:0000000000009670                 mov     rdx, [rdi+8]
.text:0000000000009674                 xor     eax, eax
.text:0000000000009676                 cmp     rdx, [rsi+8]
.text:000000000000967A                 jz      short loc_9680
.text:000000000000967C                 rep retn
.text:000000000000967C ; ---------------------------------------------------------------------------
.text:000000000000967E                 align 20h
.text:0000000000009680
.text:0000000000009680 loc_9680:                               ; CODE XREF: re_node_set_compare_part_2+A↑j
.text:0000000000009680                 lea     rax, [rdx-1]
.text:0000000000009684                 lea     rdx, ds:0[rax*8]
.text:000000000000968C                 jmp     short loc_96AD
.text:000000000000968C ; ---------------------------------------------------------------------------
.text:000000000000968E                 align 10h
.text:0000000000009690
.text:0000000000009690 loc_9690:                               ; CODE XREF: re_node_set_compare_part_2+40↓j
.text:0000000000009690                 mov     rcx, [rdi+10h]
.text:0000000000009694                 mov     r8, [rcx+rdx]
.text:0000000000009698                 mov     rcx, [rsi+10h]
.text:000000000000969C                 mov     rcx, [rcx+rdx]
.text:00000000000096A0                 sub     rdx, 8
.text:00000000000096A4                 cmp     r8, rcx
.text:00000000000096A7                 jnz     short loc_96C0
.text:00000000000096A9                 sub     rax, 1
.text:00000000000096AD
.text:00000000000096AD loc_96AD:                               ; CODE XREF: re_node_set_compare_part_2+1C↑j
.text:00000000000096AD                 test    rax, rax
.text:00000000000096B0                 jns     short loc_9690
.text:00000000000096B2                 mov     eax, 1
.text:00000000000096B7                 retn
.text:00000000000096B7 ; ---------------------------------------------------------------------------
.text:00000000000096B8                 align 20h
.text:00000000000096C0
.text:00000000000096C0 loc_96C0:                               ; CODE XREF: re_node_set_compare_part_2+37↑j
.text:00000000000096C0                 xor     eax, eax
.text:00000000000096C2                 retn
.text:00000000000096C2 ; } // starts at 9670
.text:00000000000096C2 re_node_set_compare_part_2 endp
.text:00000000000096C2
.text:00000000000096C2 ; ---------------------------------------------------------------------------
.text:00000000000096C3                 align 10h
.text:00000000000096D0
.text:00000000000096D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096D0
.text:00000000000096D0
.text:00000000000096D0 re_node_set_contains_isra_3 proc near   ; CODE XREF: check_arrival_expand_ecl_sub+2B↓p
.text:00000000000096D0                                         ; expand_bkref_cache+173↓p ...
.text:00000000000096D0 ; __unwind {
.text:00000000000096D0                 xor     eax, eax
.text:00000000000096D2                 test    rdi, rdi
.text:00000000000096D5                 jle     short locret_9715
.text:00000000000096D7                 mov     r8, [rsi]
.text:00000000000096DA                 sub     rdi, 1
.text:00000000000096DE                 xor     esi, esi
.text:00000000000096E0
.text:00000000000096E0 loc_96E0:                               ; CODE XREF: re_node_set_contains_isra_3+67↓j
.text:00000000000096E0                 cmp     rsi, rdi
.text:00000000000096E3                 jnb     short loc_970D
.text:00000000000096E5                 lea     rcx, [rsi+rdi]
.text:00000000000096E9                 shr     rcx, 1
.text:00000000000096EC                 cmp     rdx, [r8+rcx*8]
.text:00000000000096F0                 jle     short loc_9708
.text:00000000000096F2                 jmp     short loc_9720
.text:00000000000096F2 ; ---------------------------------------------------------------------------
.text:00000000000096F4                 align 8
.text:00000000000096F8
.text:00000000000096F8 loc_96F8:                               ; CODE XREF: re_node_set_contains_isra_3+3B↓j
.text:00000000000096F8                 lea     rax, [rsi+rcx]
.text:00000000000096FC                 shr     rax, 1
.text:00000000000096FF                 cmp     [r8+rax*8], rdx
.text:0000000000009703                 jl      short loc_9730
.text:0000000000009705                 mov     rcx, rax
.text:0000000000009708
.text:0000000000009708 loc_9708:                               ; CODE XREF: re_node_set_contains_isra_3+20↑j
.text:0000000000009708                 cmp     rsi, rcx
.text:000000000000970B                 jb      short loc_96F8
.text:000000000000970D
.text:000000000000970D loc_970D:                               ; CODE XREF: re_node_set_contains_isra_3+13↑j
.text:000000000000970D                 xor     eax, eax
.text:000000000000970F                 cmp     rdx, [r8+rsi*8]
.text:0000000000009713                 jz      short loc_9740
.text:0000000000009715
.text:0000000000009715 locret_9715:                            ; CODE XREF: re_node_set_contains_isra_3+5↑j
.text:0000000000009715                 rep retn
.text:0000000000009715 ; ---------------------------------------------------------------------------
.text:0000000000009717                 align 20h
.text:0000000000009720
.text:0000000000009720 loc_9720:                               ; CODE XREF: re_node_set_contains_isra_3+22↑j
.text:0000000000009720                 mov     rax, rcx
.text:0000000000009723                 mov     rcx, rdi
.text:0000000000009726                 db      2Eh
.text:0000000000009726                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009730
.text:0000000000009730 loc_9730:                               ; CODE XREF: re_node_set_contains_isra_3+33↑j
.text:0000000000009730                 lea     rsi, [rax+1]
.text:0000000000009734                 mov     rdi, rcx
.text:0000000000009737                 jmp     short loc_96E0
.text:0000000000009737 ; ---------------------------------------------------------------------------
.text:0000000000009739                 align 20h
.text:0000000000009740
.text:0000000000009740 loc_9740:                               ; CODE XREF: re_node_set_contains_isra_3+43↑j
.text:0000000000009740                 lea     rax, [rsi+1]
.text:0000000000009744                 retn
.text:0000000000009744 ; } // starts at 96D0
.text:0000000000009744 re_node_set_contains_isra_3 endp
.text:0000000000009744
.text:0000000000009744 ; ---------------------------------------------------------------------------
.text:0000000000009745                 align 10h
.text:0000000000009750
.text:0000000000009750 ; =============== S U B R O U T I N E =======================================
.text:0000000000009750
.text:0000000000009750
.text:0000000000009750 check_arrival_expand_ecl_sub proc near  ; CODE XREF: check_arrival_expand_ecl_sub+E0↓p
.text:0000000000009750                                         ; check_arrival_expand_ecl+D8↓p
.text:0000000000009750 ; __unwind {
.text:0000000000009750                 push    r15
.text:0000000000009752                 push    r14
.text:0000000000009754                 lea     r14, [rsi+10h]
.text:0000000000009758                 push    r13
.text:000000000000975A                 push    r12
.text:000000000000975C                 mov     r15, rcx
.text:000000000000975F                 push    rbp
.text:0000000000009760                 push    rbx
.text:0000000000009761                 mov     r12, rdi
.text:0000000000009764                 mov     rbp, rsi
.text:0000000000009767                 mov     rbx, rdx
.text:000000000000976A                 mov     r13d, r8d
.text:000000000000976D                 sub     rsp, 8
.text:0000000000009771
.text:0000000000009771 loc_9771:                               ; CODE XREF: check_arrival_expand_ecl_sub+83↓j
.text:0000000000009771                 mov     rdi, [rbp+8]
.text:0000000000009775                 mov     rdx, rbx
.text:0000000000009778                 mov     rsi, r14
.text:000000000000977B                 call    re_node_set_contains_isra_3
.text:0000000000009780                 test    rax, rax
.text:0000000000009783                 jnz     short loc_97F0
.text:0000000000009785                 mov     rax, rbx
.text:0000000000009788                 shl     rax, 4
.text:000000000000978C                 add     rax, [r12]
.text:0000000000009790                 movzx   edx, byte ptr [rax+8]
.text:0000000000009794                 cmp     edx, r13d
.text:0000000000009797                 jnz     short loc_979E
.text:0000000000009799                 cmp     [rax], r15
.text:000000000000979C                 jz      short loc_97D8
.text:000000000000979E
.text:000000000000979E loc_979E:                               ; CODE XREF: check_arrival_expand_ecl_sub+47↑j
.text:000000000000979E                 mov     rsi, rbx
.text:00000000000097A1                 mov     rdi, rbp
.text:00000000000097A4                 call    re_node_set_insert
.text:00000000000097A9                 test    al, al
.text:00000000000097AB                 jz      short loc_9808
.text:00000000000097AD                 lea     rbx, [rbx+rbx*2]
.text:00000000000097B1                 mov     rdx, [r12+28h]
.text:00000000000097B6                 shl     rbx, 3
.text:00000000000097BA                 add     rdx, rbx
.text:00000000000097BD                 mov     rax, [rdx+8]
.text:00000000000097C1                 test    rax, rax
.text:00000000000097C4                 jz      short loc_97F0
.text:00000000000097C6                 cmp     rax, 2
.text:00000000000097CA                 mov     rdx, [rdx+10h]
.text:00000000000097CE                 jz      short loc_9820
.text:00000000000097D0
.text:00000000000097D0 loc_97D0:                               ; CODE XREF: check_arrival_expand_ecl_sub+F3↓j
.text:00000000000097D0                 mov     rbx, [rdx]
.text:00000000000097D3                 jmp     short loc_9771
.text:00000000000097D3 ; ---------------------------------------------------------------------------
.text:00000000000097D5                 align 8
.text:00000000000097D8
.text:00000000000097D8 loc_97D8:                               ; CODE XREF: check_arrival_expand_ecl_sub+4C↑j
.text:00000000000097D8                 cmp     r13d, 9
.text:00000000000097DC                 jnz     short loc_97F0
.text:00000000000097DE                 mov     rsi, rbx
.text:00000000000097E1                 mov     rdi, rbp
.text:00000000000097E4                 call    re_node_set_insert
.text:00000000000097E9                 test    al, al
.text:00000000000097EB                 jz      short loc_9808
.text:00000000000097ED                 nop     dword ptr [rax]
.text:00000000000097F0
.text:00000000000097F0 loc_97F0:                               ; CODE XREF: check_arrival_expand_ecl_sub+33↑j
.text:00000000000097F0                                         ; check_arrival_expand_ecl_sub+74↑j ...
.text:00000000000097F0                 xor     eax, eax
.text:00000000000097F2
.text:00000000000097F2 loc_97F2:                               ; CODE XREF: check_arrival_expand_ecl_sub+E7↓j
.text:00000000000097F2                 add     rsp, 8
.text:00000000000097F6                 pop     rbx
.text:00000000000097F7                 pop     rbp
.text:00000000000097F8                 pop     r12
.text:00000000000097FA                 pop     r13
.text:00000000000097FC                 pop     r14
.text:00000000000097FE                 pop     r15
.text:0000000000009800                 retn
.text:0000000000009800 ; ---------------------------------------------------------------------------
.text:0000000000009801                 align 8
.text:0000000000009808
.text:0000000000009808 loc_9808:                               ; CODE XREF: check_arrival_expand_ecl_sub+5B↑j
.text:0000000000009808                                         ; check_arrival_expand_ecl_sub+9B↑j
.text:0000000000009808                 add     rsp, 8
.text:000000000000980C                 mov     eax, 0Ch
.text:0000000000009811                 pop     rbx
.text:0000000000009812                 pop     rbp
.text:0000000000009813                 pop     r12
.text:0000000000009815                 pop     r13
.text:0000000000009817                 pop     r14
.text:0000000000009819                 pop     r15
.text:000000000000981B                 retn
.text:000000000000981B ; ---------------------------------------------------------------------------
.text:000000000000981C                 align 20h
.text:0000000000009820
.text:0000000000009820 loc_9820:                               ; CODE XREF: check_arrival_expand_ecl_sub+7E↑j
.text:0000000000009820                 mov     rdx, [rdx+8]
.text:0000000000009824                 mov     r8d, r13d
.text:0000000000009827                 mov     rcx, r15
.text:000000000000982A                 mov     rsi, rbp
.text:000000000000982D                 mov     rdi, r12
.text:0000000000009830                 call    check_arrival_expand_ecl_sub
.text:0000000000009835                 test    eax, eax
.text:0000000000009837                 jnz     short loc_97F2
.text:0000000000009839                 mov     rax, [r12+28h]
.text:000000000000983E                 mov     rdx, [rax+rbx+10h]
.text:0000000000009843                 jmp     short loc_97D0
.text:0000000000009843 ; } // starts at 9750
.text:0000000000009843 check_arrival_expand_ecl_sub endp
.text:0000000000009843
.text:0000000000009843 ; ---------------------------------------------------------------------------
.text:0000000000009845                 align 10h
.text:0000000000009850
.text:0000000000009850 ; =============== S U B R O U T I N E =======================================
.text:0000000000009850
.text:0000000000009850
.text:0000000000009850 re_node_set_remove_at_isra_4_part_5 proc near
.text:0000000000009850                                         ; CODE XREF: re_acquire_state_context+1D9↓p
.text:0000000000009850                                         ; _sub_epsilon_src_nodes+1DD↓p ...
.text:0000000000009850 ; __unwind {
.text:0000000000009850                 mov     rax, [rdi]
.text:0000000000009853                 cmp     rax, rdx
.text:0000000000009856                 jle     short locret_9882
.text:0000000000009858                 sub     rax, 1
.text:000000000000985C                 cmp     rdx, rax
.text:000000000000985F                 mov     [rdi], rax
.text:0000000000009862                 jge     short locret_9882
.text:0000000000009864                 mov     rax, [rsi]
.text:0000000000009867                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009870
.text:0000000000009870 loc_9870:                               ; CODE XREF: re_node_set_remove_at_isra_4_part_5+30↓j
.text:0000000000009870                 mov     rcx, [rax+rdx*8+8]
.text:0000000000009875                 mov     [rax+rdx*8], rcx
.text:0000000000009879                 add     rdx, 1
.text:000000000000987D                 cmp     rdx, [rdi]
.text:0000000000009880                 jl      short loc_9870
.text:0000000000009882
.text:0000000000009882 locret_9882:                            ; CODE XREF: re_node_set_remove_at_isra_4_part_5+6↑j
.text:0000000000009882                                         ; re_node_set_remove_at_isra_4_part_5+12↑j
.text:0000000000009882                 rep retn
.text:0000000000009882 ; } // starts at 9850
.text:0000000000009882 re_node_set_remove_at_isra_4_part_5 endp
.text:0000000000009882
.text:0000000000009882 ; ---------------------------------------------------------------------------
.text:0000000000009884                 align 10h
.text:0000000000009890
.text:0000000000009890 ; =============== S U B R O U T I N E =======================================
.text:0000000000009890
.text:0000000000009890
.text:0000000000009890 optimize_subexps proc near              ; DATA XREF: re_compile_internal+611↓o
.text:0000000000009890 ; __unwind {
.text:0000000000009890                 movzx   eax, byte ptr [rsi+30h]
.text:0000000000009894                 cmp     al, 4
.text:0000000000009896                 jz      short loc_98F0
.text:0000000000009898                 cmp     al, 11h
.text:000000000000989A                 jz      short loc_98A0
.text:000000000000989C
.text:000000000000989C loc_989C:                               ; CODE XREF: optimize_subexps+17↓j
.text:000000000000989C                                         ; optimize_subexps+1D↓j ...
.text:000000000000989C                 xor     eax, eax
.text:000000000000989E                 retn
.text:000000000000989E ; ---------------------------------------------------------------------------
.text:000000000000989F                 align 20h
.text:00000000000098A0
.text:00000000000098A0 loc_98A0:                               ; CODE XREF: optimize_subexps+A↑j
.text:00000000000098A0                 mov     rax, [rsi+8]
.text:00000000000098A4                 test    rax, rax
.text:00000000000098A7                 jz      short loc_989C
.text:00000000000098A9                 cmp     byte ptr [rax+30h], 11h
.text:00000000000098AD                 jnz     short loc_989C
.text:00000000000098AF                 mov     rcx, [rax+28h]
.text:00000000000098B3                 mov     rax, [rax+8]
.text:00000000000098B7                 test    rax, rax
.text:00000000000098BA                 mov     [rsi+8], rax
.text:00000000000098BE                 jz      short loc_98C3
.text:00000000000098C0                 mov     [rax], rsi
.text:00000000000098C3
.text:00000000000098C3 loc_98C3:                               ; CODE XREF: optimize_subexps+2E↑j
.text:00000000000098C3                 mov     rax, [rdi+0E0h]
.text:00000000000098CA                 mov     rdx, [rsi+28h]
.text:00000000000098CE                 cmp     rcx, 3Fh ; '?'
.text:00000000000098D2                 mov     rdx, [rax+rdx*8]
.text:00000000000098D6                 mov     [rax+rcx*8], rdx
.text:00000000000098DA                 jg      short loc_989C
.text:00000000000098DC                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000098E3                 rol     rax, cl
.text:00000000000098E6                 and     [rdi+0A0h], rax
.text:00000000000098ED                 jmp     short loc_989C
.text:00000000000098ED ; ---------------------------------------------------------------------------
.text:00000000000098EF                 align 10h
.text:00000000000098F0
.text:00000000000098F0 loc_98F0:                               ; CODE XREF: optimize_subexps+6↑j
.text:00000000000098F0                 mov     rax, [rdi+0E0h]
.text:00000000000098F7                 test    rax, rax
.text:00000000000098FA                 jz      short loc_989C
.text:00000000000098FC                 movsxd  rdx, dword ptr [rsi+28h]
.text:0000000000009900                 mov     rcx, [rax+rdx*8]
.text:0000000000009904                 mov     eax, 1
.text:0000000000009909                 shl     eax, cl
.text:000000000000990B                 mov     [rsi+28h], rcx
.text:000000000000990F                 cdqe
.text:0000000000009911                 or      [rdi+0A0h], rax
.text:0000000000009918                 xor     eax, eax
.text:000000000000991A                 retn
.text:000000000000991A ; } // starts at 9890
.text:000000000000991A optimize_subexps endp
.text:000000000000991A
.text:000000000000991A ; ---------------------------------------------------------------------------
.text:000000000000991B                 align 20h
.text:0000000000009920
.text:0000000000009920 ; =============== S U B R O U T I N E =======================================
.text:0000000000009920
.text:0000000000009920
.text:0000000000009920 calc_next       proc near               ; DATA XREF: re_compile_internal+699↓o
.text:0000000000009920 ; __unwind {
.text:0000000000009920                 movzx   eax, byte ptr [rsi+30h]
.text:0000000000009924                 mov     rdx, [rsi+8]
.text:0000000000009928                 cmp     al, 0Bh
.text:000000000000992A                 jz      short loc_9970
.text:000000000000992C                 cmp     al, 10h
.text:000000000000992E                 jz      short loc_9958
.text:0000000000009930                 test    rdx, rdx
.text:0000000000009933                 jz      short loc_993D
.text:0000000000009935                 mov     rax, [rsi+20h]
.text:0000000000009939                 mov     [rdx+20h], rax
.text:000000000000993D
.text:000000000000993D loc_993D:                               ; CODE XREF: calc_next+13↑j
.text:000000000000993D                 mov     rax, [rsi+10h]
.text:0000000000009941                 test    rax, rax
.text:0000000000009944                 jz      short loc_994E
.text:0000000000009946                 mov     rdx, [rsi+20h]
.text:000000000000994A                 mov     [rax+20h], rdx
.text:000000000000994E
.text:000000000000994E loc_994E:                               ; CODE XREF: calc_next+24↑j
.text:000000000000994E                 xor     eax, eax
.text:0000000000009950                 retn
.text:0000000000009950 ; ---------------------------------------------------------------------------
.text:0000000000009951                 align 8
.text:0000000000009958
.text:0000000000009958 loc_9958:                               ; CODE XREF: calc_next+E↑j
.text:0000000000009958                 mov     rax, [rsi+10h]
.text:000000000000995C                 mov     rcx, [rax+18h]
.text:0000000000009960                 mov     [rdx+20h], rcx
.text:0000000000009964                 mov     rdx, [rsi+20h]
.text:0000000000009968                 mov     [rax+20h], rdx
.text:000000000000996C                 xor     eax, eax
.text:000000000000996E                 retn
.text:000000000000996E ; ---------------------------------------------------------------------------
.text:000000000000996F                 align 10h
.text:0000000000009970
.text:0000000000009970 loc_9970:                               ; CODE XREF: calc_next+A↑j
.text:0000000000009970                 mov     [rdx+20h], rsi
.text:0000000000009974                 xor     eax, eax
.text:0000000000009976                 retn
.text:0000000000009976 ; } // starts at 9920
.text:0000000000009976 calc_next       endp
.text:0000000000009976
.text:0000000000009976 ; ---------------------------------------------------------------------------
.text:0000000000009977                 align 20h
.text:0000000000009980
.text:0000000000009980 ; =============== S U B R O U T I N E =======================================
.text:0000000000009980
.text:0000000000009980
.text:0000000000009980 check_dst_limits_isra_13 proc near      ; CODE XREF: sift_states_backward+18C↓p
.text:0000000000009980                                         ; update_cur_sifted_state+6A3↓p
.text:0000000000009980
.text:0000000000009980 var_70          = qword ptr -70h
.text:0000000000009980 var_68          = qword ptr -68h
.text:0000000000009980 var_60          = qword ptr -60h
.text:0000000000009980 var_58          = qword ptr -58h
.text:0000000000009980 var_50          = qword ptr -50h
.text:0000000000009980 var_48          = qword ptr -48h
.text:0000000000009980 var_40          = qword ptr -40h
.text:0000000000009980 arg_0           = qword ptr  8
.text:0000000000009980
.text:0000000000009980 ; __unwind {
.text:0000000000009980                 push    r15
.text:0000000000009982                 push    r14
.text:0000000000009984                 push    r13
.text:0000000000009986                 push    r12
.text:0000000000009988                 push    rbp
.text:0000000000009989                 push    rbx
.text:000000000000998A                 xor     ebx, ebx
.text:000000000000998C                 sub     rsp, 48h
.text:0000000000009990                 mov     rax, [rdi+98h]
.text:0000000000009997                 mov     r15, [rdi+0C8h]
.text:000000000000999E                 mov     r12, [rsp+78h+arg_0]
.text:00000000000099A6                 mov     [rsp+78h+var_70], rax
.text:00000000000099AB                 mov     rbp, r15
.text:00000000000099AE
.text:00000000000099AE loc_99AE:                               ; CODE XREF: check_dst_limits_isra_13+207↓j
.text:00000000000099AE                 cmp     rbx, rbp
.text:00000000000099B1                 jge     short loc_9A0B
.text:00000000000099B3                 lea     rax, [rbx+rbp]
.text:00000000000099B7                 mov     r13, [rdi+0D8h]
.text:00000000000099BE                 mov     r10, rax
.text:00000000000099C1                 shr     r10, 3Fh
.text:00000000000099C5                 add     r10, rax
.text:00000000000099C8                 sar     r10, 1
.text:00000000000099CB                 lea     rax, [r10+r10*4]
.text:00000000000099CF                 cmp     r8, [r13+rax*8+8]
.text:00000000000099D4                 jle     short loc_9A06
.text:00000000000099D6                 jmp     loc_9B70
.text:00000000000099D6 ; ---------------------------------------------------------------------------
.text:00000000000099DB                 align 20h
.text:00000000000099E0
.text:00000000000099E0 loc_99E0:                               ; CODE XREF: check_dst_limits_isra_13+89↓j
.text:00000000000099E0                 lea     r11, [rbx+r10]
.text:00000000000099E4                 mov     rax, r11
.text:00000000000099E7                 shr     rax, 3Fh
.text:00000000000099EB                 add     rax, r11
.text:00000000000099EE                 sar     rax, 1
.text:00000000000099F1                 lea     r11, [rax+rax*4]
.text:00000000000099F5                 mov     r14, rax
.text:00000000000099F8                 cmp     [r13+r11*8+8], r8
.text:00000000000099FD                 jl      loc_9B80
.text:0000000000009A03                 mov     r10, rax
.text:0000000000009A06
.text:0000000000009A06 loc_9A06:                               ; CODE XREF: check_dst_limits_isra_13+54↑j
.text:0000000000009A06                 cmp     rbx, r10
.text:0000000000009A09                 jl      short loc_99E0
.text:0000000000009A0B
.text:0000000000009A0B loc_9A0B:                               ; CODE XREF: check_dst_limits_isra_13+31↑j
.text:0000000000009A0B                 cmp     r15, rbx
.text:0000000000009A0E                 jle     loc_9BB0
.text:0000000000009A14                 mov     r11, [rdi+0D8h]
.text:0000000000009A1B                 lea     rax, [rbx+rbx*4]
.text:0000000000009A1F                 lea     rax, [r11+rax*8]
.text:0000000000009A23                 cmp     r8, [rax+8]
.text:0000000000009A27                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009A2E                 cmovnz  rbx, rax
.text:0000000000009A32
.text:0000000000009A32 loc_9A32:                               ; CODE XREF: check_dst_limits_isra_13+237↓j
.text:0000000000009A32                 mov     rax, r15
.text:0000000000009A35                 xor     ebp, ebp
.text:0000000000009A37
.text:0000000000009A37 loc_9A37:                               ; CODE XREF: check_dst_limits_isra_13+227↓j
.text:0000000000009A37                 cmp     rbp, rax
.text:0000000000009A3A                 jge     short loc_9A94
.text:0000000000009A3C                 lea     r11, [rbp+rax+0]
.text:0000000000009A41                 mov     r10, r11
.text:0000000000009A44                 shr     r10, 3Fh
.text:0000000000009A48                 add     r10, r11
.text:0000000000009A4B                 mov     r11, [rdi+0D8h]
.text:0000000000009A52                 sar     r10, 1
.text:0000000000009A55                 lea     r13, [r10+r10*4]
.text:0000000000009A59                 cmp     r12, [r11+r13*8+8]
.text:0000000000009A5E                 jle     short loc_9A8F
.text:0000000000009A60                 jmp     loc_9B90
.text:0000000000009A60 ; ---------------------------------------------------------------------------
.text:0000000000009A65                 align 8
.text:0000000000009A68
.text:0000000000009A68 loc_9A68:                               ; CODE XREF: check_dst_limits_isra_13+112↓j
.text:0000000000009A68                 lea     r13, [rbp+r10+0]
.text:0000000000009A6D                 mov     rax, r13
.text:0000000000009A70                 shr     rax, 3Fh
.text:0000000000009A74                 add     rax, r13
.text:0000000000009A77                 sar     rax, 1
.text:0000000000009A7A                 lea     r13, [rax+rax*4]
.text:0000000000009A7E                 mov     r14, rax
.text:0000000000009A81                 cmp     [r11+r13*8+8], r12
.text:0000000000009A86                 jl      loc_9BA0
.text:0000000000009A8C                 mov     r10, rax
.text:0000000000009A8F
.text:0000000000009A8F loc_9A8F:                               ; CODE XREF: check_dst_limits_isra_13+DE↑j
.text:0000000000009A8F                 cmp     rbp, r10
.text:0000000000009A92                 jl      short loc_9A68
.text:0000000000009A94
.text:0000000000009A94 loc_9A94:                               ; CODE XREF: check_dst_limits_isra_13+BA↑j
.text:0000000000009A94                 cmp     r15, rbp
.text:0000000000009A97                 jle     loc_9BC0
.text:0000000000009A9D                 mov     r10, [rdi+0D8h]
.text:0000000000009AA4                 lea     rax, [rbp+rbp*4+0]
.text:0000000000009AA9                 lea     rax, [r10+rax*8]
.text:0000000000009AAD                 cmp     r12, [rax+8]
.text:0000000000009AB1                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009AB8                 cmovnz  rbp, rax
.text:0000000000009ABC
.text:0000000000009ABC loc_9ABC:                               ; CODE XREF: check_dst_limits_isra_13+247↓j
.text:0000000000009ABC                 cmp     qword ptr [rsi], 0
.text:0000000000009AC0                 jle     loc_9BE2
.text:0000000000009AC6                 mov     [rsp+78h+var_48], rbp
.text:0000000000009ACB                 mov     [rsp+78h+var_58], r9
.text:0000000000009AD0                 mov     r13, rdi
.text:0000000000009AD3                 mov     [rsp+78h+var_60], r8
.text:0000000000009AD8                 mov     [rsp+78h+var_68], rcx
.text:0000000000009ADD                 xor     r14d, r14d
.text:0000000000009AE0                 mov     [rsp+78h+var_40], rsi
.text:0000000000009AE5                 mov     [rsp+78h+var_50], rbx
.text:0000000000009AEA                 mov     rbp, rdx
.text:0000000000009AED                 mov     r15, r12
.text:0000000000009AF0
.text:0000000000009AF0 loc_9AF0:                               ; CODE XREF: check_dst_limits_isra_13+25C↓j
.text:0000000000009AF0                 mov     rax, [rbp+0]
.text:0000000000009AF4                 mov     rdx, [r13+0D8h]
.text:0000000000009AFB                 mov     rdi, r13
.text:0000000000009AFE                 mov     r9, [rsp+78h+var_50]
.text:0000000000009B03                 mov     r8, [rsp+78h+var_60]
.text:0000000000009B08                 mov     rcx, [rsp+78h+var_68]
.text:0000000000009B0D                 mov     rsi, [rax+r14*8]
.text:0000000000009B11                 lea     rax, [rsi+rsi*4]
.text:0000000000009B15                 lea     rax, [rdx+rax*8]
.text:0000000000009B19                 mov     rdx, [rsp+78h+var_70]
.text:0000000000009B1E                 mov     rax, [rax]
.text:0000000000009B21                 shl     rax, 4
.text:0000000000009B25                 add     rax, [rdx]
.text:0000000000009B28                 mov     r12, [rax]
.text:0000000000009B2B                 mov     rdx, r12
.text:0000000000009B2E                 call    check_dst_limits_calc_pos
.text:0000000000009B33                 mov     ebx, eax
.text:0000000000009B35                 mov     rax, [rbp+0]
.text:0000000000009B39                 mov     r9, [rsp+78h+var_48]
.text:0000000000009B3E                 mov     rcx, [rsp+78h+var_58]
.text:0000000000009B43                 mov     r8, r15
.text:0000000000009B46                 mov     rdx, r12
.text:0000000000009B49                 mov     rdi, r13
.text:0000000000009B4C                 mov     rsi, [rax+r14*8]
.text:0000000000009B50                 call    check_dst_limits_calc_pos
.text:0000000000009B55                 cmp     ebx, eax
.text:0000000000009B57                 jz      short loc_9BD0
.text:0000000000009B59                 mov     eax, 1
.text:0000000000009B5E
.text:0000000000009B5E loc_9B5E:                               ; CODE XREF: check_dst_limits_isra_13+264↓j
.text:0000000000009B5E                 add     rsp, 48h
.text:0000000000009B62                 pop     rbx
.text:0000000000009B63                 pop     rbp
.text:0000000000009B64                 pop     r12
.text:0000000000009B66                 pop     r13
.text:0000000000009B68                 pop     r14
.text:0000000000009B6A                 pop     r15
.text:0000000000009B6C                 retn
.text:0000000000009B6C ; ---------------------------------------------------------------------------
.text:0000000000009B6D                 align 10h
.text:0000000000009B70
.text:0000000000009B70 loc_9B70:                               ; CODE XREF: check_dst_limits_isra_13+56↑j
.text:0000000000009B70                 mov     r14, r10
.text:0000000000009B73                 mov     r10, rbp
.text:0000000000009B76                 db      2Eh
.text:0000000000009B76                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009B80
.text:0000000000009B80 loc_9B80:                               ; CODE XREF: check_dst_limits_isra_13+7D↑j
.text:0000000000009B80                 lea     rbx, [r14+1]
.text:0000000000009B84                 mov     rbp, r10
.text:0000000000009B87                 jmp     loc_99AE
.text:0000000000009B87 ; ---------------------------------------------------------------------------
.text:0000000000009B8C                 align 10h
.text:0000000000009B90
.text:0000000000009B90 loc_9B90:                               ; CODE XREF: check_dst_limits_isra_13+E0↑j
.text:0000000000009B90                 mov     r14, r10
.text:0000000000009B93                 mov     r10, rax
.text:0000000000009B96                 db      2Eh
.text:0000000000009B96                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009BA0
.text:0000000000009BA0 loc_9BA0:                               ; CODE XREF: check_dst_limits_isra_13+106↑j
.text:0000000000009BA0                 lea     rbp, [r14+1]
.text:0000000000009BA4                 mov     rax, r10
.text:0000000000009BA7                 jmp     loc_9A37
.text:0000000000009BA7 ; ---------------------------------------------------------------------------
.text:0000000000009BAC                 align 10h
.text:0000000000009BB0
.text:0000000000009BB0 loc_9BB0:                               ; CODE XREF: check_dst_limits_isra_13+8E↑j
.text:0000000000009BB0                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009BB7                 jmp     loc_9A32
.text:0000000000009BB7 ; ---------------------------------------------------------------------------
.text:0000000000009BBC                 align 20h
.text:0000000000009BC0
.text:0000000000009BC0 loc_9BC0:                               ; CODE XREF: check_dst_limits_isra_13+117↑j
.text:0000000000009BC0                 mov     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000009BC7                 jmp     loc_9ABC
.text:0000000000009BC7 ; ---------------------------------------------------------------------------
.text:0000000000009BCC                 align 10h
.text:0000000000009BD0
.text:0000000000009BD0 loc_9BD0:                               ; CODE XREF: check_dst_limits_isra_13+1D7↑j
.text:0000000000009BD0                 mov     rax, [rsp+78h+var_40]
.text:0000000000009BD5                 add     r14, 1
.text:0000000000009BD9                 cmp     r14, [rax]
.text:0000000000009BDC                 jl      loc_9AF0
.text:0000000000009BE2
.text:0000000000009BE2 loc_9BE2:                               ; CODE XREF: check_dst_limits_isra_13+140↑j
.text:0000000000009BE2                 xor     eax, eax
.text:0000000000009BE4                 jmp     loc_9B5E
.text:0000000000009BE4 ; } // starts at 9980
.text:0000000000009BE4 check_dst_limits_isra_13 endp
.text:0000000000009BE4
.text:0000000000009BE4 ; ---------------------------------------------------------------------------
.text:0000000000009BE9                 align 10h
.text:0000000000009BF0
.text:0000000000009BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BF0
.text:0000000000009BF0
.text:0000000000009BF0 re_node_set_merge proc near             ; CODE XREF: calc_eclosure_iter+132↓p
.text:0000000000009BF0                                         ; check_arrival_expand_ecl+113↓p ...
.text:0000000000009BF0 ; __unwind {
.text:0000000000009BF0                 test    rsi, rsi
.text:0000000000009BF3                 jz      loc_9CE8
.text:0000000000009BF9                 mov     rdx, [rsi+8]
.text:0000000000009BFD                 test    rdx, rdx
.text:0000000000009C00                 jz      loc_9CE8
.text:0000000000009C06                 push    r12
.text:0000000000009C08                 push    rbp
.text:0000000000009C09                 mov     r12, rsi
.text:0000000000009C0C                 push    rbx
.text:0000000000009C0D                 mov     rax, [rdi+8]
.text:0000000000009C11                 mov     rbx, rdi
.text:0000000000009C14                 mov     rsi, [rdi]
.text:0000000000009C17                 lea     rcx, [rax+rdx*2]
.text:0000000000009C1B                 cmp     rsi, rcx
.text:0000000000009C1E                 jl      loc_9D68
.text:0000000000009C24
.text:0000000000009C24 loc_9C24:                               ; CODE XREF: re_node_set_merge+1A4↓j
.text:0000000000009C24                 test    rax, rax
.text:0000000000009C27                 jz      loc_9DA0
.text:0000000000009C2D                 lea     rbp, [rax+rdx*2]
.text:0000000000009C31                 sub     rdx, 1
.text:0000000000009C35                 sub     rax, 1
.text:0000000000009C39                 mov     rdi, rdx
.text:0000000000009C3C                 not     rdi
.text:0000000000009C3F
.text:0000000000009C3F loc_9C3F:                               ; CODE XREF: re_node_set_merge+10E↓j
.text:0000000000009C3F                                         ; re_node_set_merge+11C↓j
.text:0000000000009C3F                 test    rdi, rdi
.text:0000000000009C42                 jns     short loc_9C80
.text:0000000000009C44
.text:0000000000009C44 loc_9C44:                               ; CODE XREF: re_node_set_merge+8B↓j
.text:0000000000009C44                 test    rax, rax
.text:0000000000009C47                 js      short loc_9C80
.text:0000000000009C49                 mov     rcx, [rbx+10h]
.text:0000000000009C4D                 mov     rsi, [r12+10h]
.text:0000000000009C52                 mov     rsi, [rsi+rdx*8]
.text:0000000000009C56                 cmp     [rcx+rax*8], rsi
.text:0000000000009C5A                 jz      loc_9CF0
.text:0000000000009C60                 jge     loc_9D08
.text:0000000000009C66                 sub     rdx, 1
.text:0000000000009C6A                 sub     rbp, 1
.text:0000000000009C6E                 mov     rdi, rdx
.text:0000000000009C71                 mov     [rcx+rbp*8], rsi
.text:0000000000009C75                 not     rdi
.text:0000000000009C78                 test    rdi, rdi
.text:0000000000009C7B                 js      short loc_9C44
.text:0000000000009C7D                 nop     dword ptr [rax]
.text:0000000000009C80
.text:0000000000009C80 loc_9C80:                               ; CODE XREF: re_node_set_merge+52↑j
.text:0000000000009C80                                         ; re_node_set_merge+57↑j
.text:0000000000009C80                 test    rdx, rdx
.text:0000000000009C83                 jns     loc_9D18
.text:0000000000009C89
.text:0000000000009C89 loc_9C89:                               ; CODE XREF: re_node_set_merge+145↓j
.text:0000000000009C89                 mov     rcx, [rbx+8]
.text:0000000000009C8D                 mov     rax, [r12+8]
.text:0000000000009C92                 lea     r8, [rcx+rax*2-1]
.text:0000000000009C97                 mov     rdx, r8
.text:0000000000009C9A                 sub     rdx, rbp
.text:0000000000009C9D                 add     rdx, 1
.text:0000000000009CA1                 jz      short loc_9CDA
.text:0000000000009CA3                 mov     rdi, [rbx+10h]  ; dest
.text:0000000000009CA7                 lea     rax, [rcx-1]
.text:0000000000009CAB                 add     rcx, rdx
.text:0000000000009CAE                 mov     [rbx+8], rcx
.text:0000000000009CB2                 nop     word ptr [rax+rax+00h]
.text:0000000000009CB8
.text:0000000000009CB8 loc_9CB8:                               ; CODE XREF: re_node_set_merge+E8↓j
.text:0000000000009CB8                                         ; re_node_set_merge+157↓j
.text:0000000000009CB8                 mov     rsi, [rdi+r8*8]
.text:0000000000009CBC                 mov     rcx, [rdi+rax*8]
.text:0000000000009CC0                 lea     r9, [rax+rdx]
.text:0000000000009CC4                 lea     r9, [rdi+r9*8]
.text:0000000000009CC8                 cmp     rsi, rcx
.text:0000000000009CCB                 jle     short loc_9D40
.text:0000000000009CCD                 sub     r8, 1
.text:0000000000009CD1                 sub     rdx, 1
.text:0000000000009CD5                 mov     [r9], rsi
.text:0000000000009CD8                 jnz     short loc_9CB8
.text:0000000000009CDA
.text:0000000000009CDA loc_9CDA:                               ; CODE XREF: re_node_set_merge+B1↑j
.text:0000000000009CDA                                         ; re_node_set_merge+1CF↓j
.text:0000000000009CDA                 xor     eax, eax
.text:0000000000009CDC
.text:0000000000009CDC loc_9CDC:                               ; CODE XREF: re_node_set_merge+16C↓j
.text:0000000000009CDC                                         ; re_node_set_merge+1D9↓j
.text:0000000000009CDC                 pop     rbx
.text:0000000000009CDD                 pop     rbp
.text:0000000000009CDE                 pop     r12
.text:0000000000009CE0                 retn
.text:0000000000009CE0 ; ---------------------------------------------------------------------------
.text:0000000000009CE1                 align 8
.text:0000000000009CE8
.text:0000000000009CE8 loc_9CE8:                               ; CODE XREF: re_node_set_merge+3↑j
.text:0000000000009CE8                                         ; re_node_set_merge+10↑j
.text:0000000000009CE8                 xor     eax, eax
.text:0000000000009CEA                 retn
.text:0000000000009CEA ; ---------------------------------------------------------------------------
.text:0000000000009CEB                 align 10h
.text:0000000000009CF0
.text:0000000000009CF0 loc_9CF0:                               ; CODE XREF: re_node_set_merge+6A↑j
.text:0000000000009CF0                 sub     rdx, 1
.text:0000000000009CF4                 sub     rax, 1
.text:0000000000009CF8                 mov     rdi, rdx
.text:0000000000009CFB                 not     rdi
.text:0000000000009CFE                 jmp     loc_9C3F
.text:0000000000009CFE ; ---------------------------------------------------------------------------
.text:0000000000009D03                 align 8
.text:0000000000009D08
.text:0000000000009D08 loc_9D08:                               ; CODE XREF: re_node_set_merge+70↑j
.text:0000000000009D08                 sub     rax, 1
.text:0000000000009D0C                 jmp     loc_9C3F
.text:0000000000009D0C ; ---------------------------------------------------------------------------
.text:0000000000009D11                 align 8
.text:0000000000009D18
.text:0000000000009D18 loc_9D18:                               ; CODE XREF: re_node_set_merge+93↑j
.text:0000000000009D18                 mov     rax, [rbx+10h]
.text:0000000000009D1C                 add     rdx, 1
.text:0000000000009D20                 mov     rsi, [r12+10h]  ; src
.text:0000000000009D25                 sub     rbp, rdx
.text:0000000000009D28                 shl     rdx, 3          ; n
.text:0000000000009D2C                 lea     rdi, [rax+rbp*8] ; dest
.text:0000000000009D30                 call    _memcpy
.text:0000000000009D35                 jmp     loc_9C89
.text:0000000000009D35 ; ---------------------------------------------------------------------------
.text:0000000000009D3A                 align 20h
.text:0000000000009D40
.text:0000000000009D40 loc_9D40:                               ; CODE XREF: re_node_set_merge+DB↑j
.text:0000000000009D40                 sub     rax, 1
.text:0000000000009D44                 mov     [r9], rcx
.text:0000000000009D47                 jns     loc_9CB8
.text:0000000000009D4D                 lea     rsi, [rdi+rbp*8] ; src
.text:0000000000009D51                 shl     rdx, 3          ; n
.text:0000000000009D55                 call    _memcpy
.text:0000000000009D5A                 xor     eax, eax
.text:0000000000009D5C                 jmp     loc_9CDC
.text:0000000000009D5C ; ---------------------------------------------------------------------------
.text:0000000000009D61                 align 8
.text:0000000000009D68
.text:0000000000009D68 loc_9D68:                               ; CODE XREF: re_node_set_merge+2E↑j
.text:0000000000009D68                 add     rdx, rsi
.text:0000000000009D6B                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000009D6F                 lea     rbp, [rdx+rdx]
.text:0000000000009D73                 shl     rdx, 4
.text:0000000000009D77                 mov     rsi, rdx        ; size
.text:0000000000009D7A                 call    _realloc
.text:0000000000009D7F                 test    rax, rax
.text:0000000000009D82                 jz      short loc_9DC4
.text:0000000000009D84                 mov     [rbx+10h], rax
.text:0000000000009D88                 mov     [rbx], rbp
.text:0000000000009D8B                 mov     rax, [rbx+8]
.text:0000000000009D8F                 mov     rdx, [r12+8]
.text:0000000000009D94                 jmp     loc_9C24
.text:0000000000009D94 ; ---------------------------------------------------------------------------
.text:0000000000009D99                 align 20h
.text:0000000000009DA0
.text:0000000000009DA0 loc_9DA0:                               ; CODE XREF: re_node_set_merge+37↑j
.text:0000000000009DA0                 mov     [rbx+8], rdx
.text:0000000000009DA4                 mov     rax, [r12+8]
.text:0000000000009DA9                 mov     rdi, [rbx+10h]  ; dest
.text:0000000000009DAD                 mov     rsi, [r12+10h]  ; src
.text:0000000000009DB2                 lea     rdx, ds:0[rax*8] ; n
.text:0000000000009DBA                 call    _memcpy
.text:0000000000009DBF                 jmp     loc_9CDA
.text:0000000000009DC4 ; ---------------------------------------------------------------------------
.text:0000000000009DC4
.text:0000000000009DC4 loc_9DC4:                               ; CODE XREF: re_node_set_merge+192↑j
.text:0000000000009DC4                 mov     eax, 0Ch
.text:0000000000009DC9                 jmp     loc_9CDC
.text:0000000000009DC9 ; } // starts at 9BF0
.text:0000000000009DC9 re_node_set_merge endp
.text:0000000000009DC9
.text:0000000000009DC9 ; ---------------------------------------------------------------------------
.text:0000000000009DCE                 align 10h
.text:0000000000009DD0
.text:0000000000009DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DD0
.text:0000000000009DD0
.text:0000000000009DD0 calc_eclosure_iter proc near            ; CODE XREF: calc_eclosure_iter+28E↓p
.text:0000000000009DD0                                         ; re_compile_internal+A2A↓p
.text:0000000000009DD0
.text:0000000000009DD0 var_90          = qword ptr -90h
.text:0000000000009DD0 var_88          = qword ptr -88h
.text:0000000000009DD0 var_7D          = byte ptr -7Dh
.text:0000000000009DD0 var_7C          = dword ptr -7Ch
.text:0000000000009DD0 var_78          = xmmword ptr -78h
.text:0000000000009DD0 var_68          = qword ptr -68h
.text:0000000000009DD0 var_58          = xmmword ptr -58h
.text:0000000000009DD0 ptr             = qword ptr -48h
.text:0000000000009DD0 var_40          = qword ptr -40h
.text:0000000000009DD0
.text:0000000000009DD0 ; __unwind {
.text:0000000000009DD0                 push    r15
.text:0000000000009DD2                 push    r14
.text:0000000000009DD4                 mov     r15, rsi
.text:0000000000009DD7                 push    r13
.text:0000000000009DD9                 push    r12
.text:0000000000009DDB                 push    rbp
.text:0000000000009DDC                 push    rbx
.text:0000000000009DDD                 lea     rbx, [rdx+rdx*2]
.text:0000000000009DE1                 mov     rbp, rdx
.text:0000000000009DE4                 sub     rsp, 68h
.text:0000000000009DE8                 mov     r12, [rsi+28h]
.text:0000000000009DEC                 shl     rbx, 3
.text:0000000000009DF0                 mov     rax, fs:28h
.text:0000000000009DF9                 mov     [rsp+98h+var_40], rax
.text:0000000000009DFE                 xor     eax, eax
.text:0000000000009E00                 mov     [rsp+98h+var_88], rdi
.text:0000000000009E05                 mov     [rsp+98h+var_7C], ecx
.text:0000000000009E09                 add     r12, rbx
.text:0000000000009E0C                 mov     rax, [r12+8]
.text:0000000000009E11                 mov     qword ptr [rsp+98h+var_78+8], 0
.text:0000000000009E1A                 lea     rdi, [rax+1]
.text:0000000000009E1E                 mov     qword ptr [rsp+98h+var_78], rdi
.text:0000000000009E23                 shl     rdi, 3          ; size
.text:0000000000009E27                 call    _malloc
.text:0000000000009E2C                 test    rax, rax
.text:0000000000009E2F                 mov     [rsp+98h+var_68], rax
.text:0000000000009E34                 jz      loc_A070
.text:0000000000009E3A                 mov     rax, [r15+30h]
.text:0000000000009E3E                 mov     rdx, [r15]
.text:0000000000009E41                 mov     r13, rbp
.text:0000000000009E44                 shl     r13, 4
.text:0000000000009E48                 mov     qword ptr [rax+rbx+8], 0FFFFFFFFFFFFFFFFh
.text:0000000000009E51                 lea     rax, [rdx+r13]
.text:0000000000009E55                 mov     r8d, [rax+8]
.text:0000000000009E59                 test    r8d, 3FF00h
.text:0000000000009E60                 jnz     loc_A000
.text:0000000000009E66
.text:0000000000009E66 loc_9E66:                               ; CODE XREF: calc_eclosure_iter+24D↓j
.text:0000000000009E66                                         ; calc_eclosure_iter+27D↓j
.text:0000000000009E66                 test    byte ptr [rax+8], 8
.text:0000000000009E6A                 jz      loc_9F30
.text:0000000000009E70                 mov     rsi, [r15+28h]
.text:0000000000009E74                 lea     rax, [rsi+rbx]
.text:0000000000009E78                 cmp     qword ptr [rax+8], 0
.text:0000000000009E7D                 jle     loc_9F30
.text:0000000000009E83                 lea     rdx, [rsp+98h+var_78]
.text:0000000000009E88                 mov     [rsp+98h+var_7D], 0
.text:0000000000009E8D                 xor     r14d, r14d
.text:0000000000009E90                 lea     r12, [rsp+98h+var_58]
.text:0000000000009E95                 mov     [rsp+98h+var_90], rdx
.text:0000000000009E9A                 jmp     short loc_9EB6
.text:0000000000009E9A ; ---------------------------------------------------------------------------
.text:0000000000009E9C                 align 20h
.text:0000000000009EA0
.text:0000000000009EA0 loc_9EA0:                               ; CODE XREF: calc_eclosure_iter+145↓j
.text:0000000000009EA0                                         ; calc_eclosure_iter+156↓j
.text:0000000000009EA0                 mov     rsi, [r15+28h]
.text:0000000000009EA4                 add     r14, 1
.text:0000000000009EA8                 lea     rax, [rsi+rbx]
.text:0000000000009EAC                 cmp     [rax+8], r14
.text:0000000000009EB0                 jle     loc_9FB7
.text:0000000000009EB6
.text:0000000000009EB6 loc_9EB6:                               ; CODE XREF: calc_eclosure_iter+CA↑j
.text:0000000000009EB6                                         ; calc_eclosure_iter+1E1↓j
.text:0000000000009EB6                 mov     rax, [rax+10h]
.text:0000000000009EBA                 mov     rdx, [rax+r14*8]
.text:0000000000009EBE                 mov     rax, [r15+30h]
.text:0000000000009EC2                 lea     r8, [rdx+rdx*2]
.text:0000000000009EC6                 lea     r13, ds:0[r8*8]
.text:0000000000009ECE                 add     rax, r13
.text:0000000000009ED1                 mov     rcx, [rax+8]
.text:0000000000009ED5                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009ED9                 jz      loc_9FA0
.text:0000000000009EDF                 test    rcx, rcx
.text:0000000000009EE2                 jz      loc_A058
.text:0000000000009EE8                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000009EEC                 movaps  [rsp+98h+var_58], xmm0
.text:0000000000009EF1                 mov     rax, [rax+10h]
.text:0000000000009EF5                 mov     [rsp+98h+ptr], rax
.text:0000000000009EFA
.text:0000000000009EFA loc_9EFA:                               ; CODE XREF: calc_eclosure_iter+295↓j
.text:0000000000009EFA                 mov     rdi, [rsp+98h+var_90]
.text:0000000000009EFF                 mov     rsi, r12
.text:0000000000009F02                 call    re_node_set_merge
.text:0000000000009F07                 test    eax, eax
.text:0000000000009F09                 jnz     short loc_9F76
.text:0000000000009F0B                 mov     rax, [r15+30h]
.text:0000000000009F0F                 cmp     qword ptr [rax+r13+8], 0
.text:0000000000009F15                 jnz     short loc_9EA0
.text:0000000000009F17                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:0000000000009F1C                 call    _free
.text:0000000000009F21                 mov     [rsp+98h+var_7D], 1
.text:0000000000009F26                 jmp     loc_9EA0
.text:0000000000009F26 ; ---------------------------------------------------------------------------
.text:0000000000009F2B                 align 10h
.text:0000000000009F30
.text:0000000000009F30 loc_9F30:                               ; CODE XREF: calc_eclosure_iter+9A↑j
.text:0000000000009F30                                         ; calc_eclosure_iter+AD↑j ...
.text:0000000000009F30                 lea     rdi, [rsp+98h+var_78]
.text:0000000000009F35                 mov     rsi, rbp
.text:0000000000009F38                 call    re_node_set_insert
.text:0000000000009F3D                 test    al, al
.text:0000000000009F3F                 jz      loc_A070
.text:0000000000009F45                 mov     rax, [r15+30h]
.text:0000000000009F49
.text:0000000000009F49 loc_9F49:                               ; CODE XREF: calc_eclosure_iter+209↓j
.text:0000000000009F49                                         ; calc_eclosure_iter+214↓j
.text:0000000000009F49                 movdqa  xmm0, [rsp+98h+var_78]
.text:0000000000009F4F                 movups  xmmword ptr [rax+rbx], xmm0
.text:0000000000009F53                 mov     rdx, [rsp+98h+var_68]
.text:0000000000009F58                 mov     [rax+rbx+10h], rdx
.text:0000000000009F5D
.text:0000000000009F5D loc_9F5D:                               ; CODE XREF: calc_eclosure_iter+222↓j
.text:0000000000009F5D                 mov     rbx, [rsp+98h+var_88]
.text:0000000000009F62                 mov     rax, [rsp+98h+var_68]
.text:0000000000009F67                 movdqa  xmm0, [rsp+98h+var_78]
.text:0000000000009F6D                 movaps  xmmword ptr [rbx], xmm0
.text:0000000000009F70                 mov     [rbx+10h], rax
.text:0000000000009F74                 xor     eax, eax
.text:0000000000009F76
.text:0000000000009F76 loc_9F76:                               ; CODE XREF: calc_eclosure_iter+139↑j
.text:0000000000009F76                                         ; calc_eclosure_iter+271↓j ...
.text:0000000000009F76                 mov     rsi, [rsp+98h+var_40]
.text:0000000000009F7B                 xor     rsi, fs:28h
.text:0000000000009F84                 jnz     loc_A07A
.text:0000000000009F8A                 add     rsp, 68h
.text:0000000000009F8E                 pop     rbx
.text:0000000000009F8F                 pop     rbp
.text:0000000000009F90                 pop     r12
.text:0000000000009F92                 pop     r13
.text:0000000000009F94                 pop     r14
.text:0000000000009F96                 pop     r15
.text:0000000000009F98                 retn
.text:0000000000009F98 ; ---------------------------------------------------------------------------
.text:0000000000009F99                 align 20h
.text:0000000000009FA0
.text:0000000000009FA0 loc_9FA0:                               ; CODE XREF: calc_eclosure_iter+109↑j
.text:0000000000009FA0                 lea     rax, [rsi+rbx]
.text:0000000000009FA4                 add     r14, 1
.text:0000000000009FA8                 mov     [rsp+98h+var_7D], 1
.text:0000000000009FAD                 cmp     [rax+8], r14
.text:0000000000009FB1                 jg      loc_9EB6
.text:0000000000009FB7
.text:0000000000009FB7 loc_9FB7:                               ; CODE XREF: calc_eclosure_iter+E0↑j
.text:0000000000009FB7                 lea     rdi, [rsp+98h+var_78]
.text:0000000000009FBC                 mov     rsi, rbp
.text:0000000000009FBF                 call    re_node_set_insert
.text:0000000000009FC4                 test    al, al
.text:0000000000009FC6                 jz      loc_A070
.text:0000000000009FCC                 cmp     byte ptr [rsp+98h+var_7C], 1
.text:0000000000009FD1                 mov     rax, [r15+30h]
.text:0000000000009FD5                 lea     rdx, [rax+rbx]
.text:0000000000009FD9                 jz      loc_9F49
.text:0000000000009FDF                 cmp     [rsp+98h+var_7D], 0
.text:0000000000009FE4                 jz      loc_9F49
.text:0000000000009FEA                 mov     qword ptr [rdx+8], 0
.text:0000000000009FF2                 jmp     loc_9F5D
.text:0000000000009FF2 ; ---------------------------------------------------------------------------
.text:0000000000009FF7                 align 20h
.text:000000000000A000
.text:000000000000A000 loc_A000:                               ; CODE XREF: calc_eclosure_iter+90↑j
.text:000000000000A000                 cmp     qword ptr [r12+8], 0
.text:000000000000A006                 jz      loc_9F30
.text:000000000000A00C                 mov     rcx, [r12+10h]
.text:000000000000A011                 mov     rcx, [rcx]
.text:000000000000A014                 shl     rcx, 4
.text:000000000000A018                 test    byte ptr [rdx+rcx+0Ah], 4
.text:000000000000A01D                 jnz     loc_9E66
.text:000000000000A023                 shr     r8d, 8
.text:000000000000A027                 mov     rcx, rbp
.text:000000000000A02A                 mov     rdx, rbp
.text:000000000000A02D                 and     r8d, 3FFh
.text:000000000000A034                 mov     rsi, rbp
.text:000000000000A037                 mov     rdi, r15
.text:000000000000A03A                 call    duplicate_node_closure
.text:000000000000A03F                 test    eax, eax
.text:000000000000A041                 jnz     loc_9F76
.text:000000000000A047                 mov     rax, [r15]
.text:000000000000A04A                 add     rax, r13
.text:000000000000A04D                 jmp     loc_9E66
.text:000000000000A04D ; ---------------------------------------------------------------------------
.text:000000000000A052                 align 8
.text:000000000000A058
.text:000000000000A058 loc_A058:                               ; CODE XREF: calc_eclosure_iter+112↑j
.text:000000000000A058                 mov     rsi, r15
.text:000000000000A05B                 mov     rdi, r12
.text:000000000000A05E                 call    calc_eclosure_iter
.text:000000000000A063                 test    eax, eax
.text:000000000000A065                 jz      loc_9EFA
.text:000000000000A06B                 jmp     loc_9F76
.text:000000000000A070 ; ---------------------------------------------------------------------------
.text:000000000000A070
.text:000000000000A070 loc_A070:                               ; CODE XREF: calc_eclosure_iter+64↑j
.text:000000000000A070                                         ; calc_eclosure_iter+16F↑j ...
.text:000000000000A070                 mov     eax, 0Ch
.text:000000000000A075                 jmp     loc_9F76
.text:000000000000A07A ; ---------------------------------------------------------------------------
.text:000000000000A07A
.text:000000000000A07A loc_A07A:                               ; CODE XREF: calc_eclosure_iter+1B4↑j
.text:000000000000A07A                 call    ___stack_chk_fail
.text:000000000000A07A ; } // starts at 9DD0
.text:000000000000A07A calc_eclosure_iter endp
.text:000000000000A07A
.text:000000000000A07A ; ---------------------------------------------------------------------------
.text:000000000000A07F                 align 20h
.text:000000000000A080
.text:000000000000A080 ; =============== S U B R O U T I N E =======================================
.text:000000000000A080
.text:000000000000A080
.text:000000000000A080 check_arrival_expand_ecl proc near      ; CODE XREF: expand_bkref_cache+2A8↓p
.text:000000000000A080                                         ; check_arrival+374↓p ...
.text:000000000000A080
.text:000000000000A080 var_5C          = dword ptr -5Ch
.text:000000000000A080 var_58          = xmmword ptr -58h
.text:000000000000A080 ptr             = qword ptr -48h
.text:000000000000A080 var_40          = qword ptr -40h
.text:000000000000A080
.text:000000000000A080 ; __unwind {
.text:000000000000A080                 push    r15
.text:000000000000A082                 push    r14
.text:000000000000A084                 mov     r14, rdi
.text:000000000000A087                 push    r13
.text:000000000000A089                 push    r12
.text:000000000000A08B                 mov     r15, rsi
.text:000000000000A08E                 push    rbp
.text:000000000000A08F                 push    rbx
.text:000000000000A090                 mov     rbp, rdx
.text:000000000000A093                 mov     ebx, ecx
.text:000000000000A095                 sub     rsp, 38h
.text:000000000000A099                 mov     r12, [rsi+8]
.text:000000000000A09D                 mov     rax, fs:28h
.text:000000000000A0A6                 mov     [rsp+68h+var_40], rax
.text:000000000000A0AB                 xor     eax, eax
.text:000000000000A0AD                 mov     qword ptr [rsp+68h+var_58+8], 0
.text:000000000000A0B6                 lea     rdi, ds:0[r12*8] ; size
.text:000000000000A0BE                 mov     qword ptr [rsp+68h+var_58], r12
.text:000000000000A0C3                 call    _malloc
.text:000000000000A0C8                 test    rax, rax
.text:000000000000A0CB                 mov     [rsp+68h+ptr], rax
.text:000000000000A0D0                 jz      loc_A1CD
.text:000000000000A0D6                 test    r12, r12
.text:000000000000A0D9                 jle     loc_A16B
.text:000000000000A0DF                 lea     r12, [rsp+68h+var_58]
.text:000000000000A0E4                 xor     r13d, r13d
.text:000000000000A0E7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A0F0
.text:000000000000A0F0 loc_A0F0:                               ; CODE XREF: check_arrival_expand_ecl+E9↓j
.text:000000000000A0F0                 mov     rax, [r15+10h]
.text:000000000000A0F4                 mov     rdx, [rax+r13*8]
.text:000000000000A0F8                 mov     rax, [r14+30h]
.text:000000000000A0FC                 lea     rcx, [rdx+rdx*2]
.text:000000000000A100                 lea     rsi, [rax+rcx*8]
.text:000000000000A104                 mov     r8, [rsi+8]
.text:000000000000A108                 test    r8, r8
.text:000000000000A10B                 jle     loc_A190
.text:000000000000A111                 mov     r10, [rsi+10h]
.text:000000000000A115                 mov     r9, [r14]
.text:000000000000A118                 xor     ecx, ecx
.text:000000000000A11A                 jmp     short loc_A129
.text:000000000000A11A ; ---------------------------------------------------------------------------
.text:000000000000A11C                 align 20h
.text:000000000000A120
.text:000000000000A120 loc_A120:                               ; CODE XREF: check_arrival_expand_ecl+BF↓j
.text:000000000000A120                                         ; check_arrival_expand_ecl+C4↓j
.text:000000000000A120                 add     rcx, 1
.text:000000000000A124                 cmp     r8, rcx
.text:000000000000A127                 jz      short loc_A190
.text:000000000000A129
.text:000000000000A129 loc_A129:                               ; CODE XREF: check_arrival_expand_ecl+9A↑j
.text:000000000000A129                 mov     rdi, [r10+rcx*8]
.text:000000000000A12D                 mov     rax, rdi
.text:000000000000A130                 shl     rax, 4
.text:000000000000A134                 add     rax, r9
.text:000000000000A137                 movzx   r11d, byte ptr [rax+8]
.text:000000000000A13C                 cmp     ebx, r11d
.text:000000000000A13F                 jnz     short loc_A120
.text:000000000000A141                 cmp     rbp, [rax]
.text:000000000000A144                 jnz     short loc_A120
.text:000000000000A146                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000A14A                 jz      short loc_A190
.text:000000000000A14C                 mov     r8d, ebx
.text:000000000000A14F                 mov     rcx, rbp
.text:000000000000A152                 mov     rsi, r12
.text:000000000000A155                 mov     rdi, r14
.text:000000000000A158                 call    check_arrival_expand_ecl_sub
.text:000000000000A15D                 test    eax, eax
.text:000000000000A15F                 jnz     short loc_A19C
.text:000000000000A161
.text:000000000000A161 loc_A161:                               ; CODE XREF: check_arrival_expand_ecl+11A↓j
.text:000000000000A161                 add     r13, 1
.text:000000000000A165                 cmp     [r15+8], r13
.text:000000000000A169                 jg      short loc_A0F0
.text:000000000000A16B
.text:000000000000A16B loc_A16B:                               ; CODE XREF: check_arrival_expand_ecl+59↑j
.text:000000000000A16B                 mov     rdi, [r15+10h]  ; ptr
.text:000000000000A16F                 call    _free
.text:000000000000A174                 mov     rax, [rsp+68h+ptr]
.text:000000000000A179                 movdqa  xmm0, [rsp+68h+var_58]
.text:000000000000A17F                 mov     [r15+10h], rax
.text:000000000000A183                 xor     eax, eax
.text:000000000000A185                 movaps  xmmword ptr [r15], xmm0
.text:000000000000A189                 jmp     short loc_A1AE
.text:000000000000A189 ; ---------------------------------------------------------------------------
.text:000000000000A18B                 align 10h
.text:000000000000A190
.text:000000000000A190 loc_A190:                               ; CODE XREF: check_arrival_expand_ecl+8B↑j
.text:000000000000A190                                         ; check_arrival_expand_ecl+A7↑j ...
.text:000000000000A190                 mov     rdi, r12
.text:000000000000A193                 call    re_node_set_merge
.text:000000000000A198                 test    eax, eax
.text:000000000000A19A                 jz      short loc_A161
.text:000000000000A19C
.text:000000000000A19C loc_A19C:                               ; CODE XREF: check_arrival_expand_ecl+DF↑j
.text:000000000000A19C                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:000000000000A1A1                 mov     [rsp+68h+var_5C], eax
.text:000000000000A1A5                 call    _free
.text:000000000000A1AA                 mov     eax, [rsp+68h+var_5C]
.text:000000000000A1AE
.text:000000000000A1AE loc_A1AE:                               ; CODE XREF: check_arrival_expand_ecl+109↑j
.text:000000000000A1AE                                         ; check_arrival_expand_ecl+152↓j
.text:000000000000A1AE                 mov     rdx, [rsp+68h+var_40]
.text:000000000000A1B3                 xor     rdx, fs:28h
.text:000000000000A1BC                 jnz     short loc_A1D4
.text:000000000000A1BE                 add     rsp, 38h
.text:000000000000A1C2                 pop     rbx
.text:000000000000A1C3                 pop     rbp
.text:000000000000A1C4                 pop     r12
.text:000000000000A1C6                 pop     r13
.text:000000000000A1C8                 pop     r14
.text:000000000000A1CA                 pop     r15
.text:000000000000A1CC                 retn
.text:000000000000A1CD ; ---------------------------------------------------------------------------
.text:000000000000A1CD
.text:000000000000A1CD loc_A1CD:                               ; CODE XREF: check_arrival_expand_ecl+50↑j
.text:000000000000A1CD                 mov     eax, 0Ch
.text:000000000000A1D2                 jmp     short loc_A1AE
.text:000000000000A1D4 ; ---------------------------------------------------------------------------
.text:000000000000A1D4
.text:000000000000A1D4 loc_A1D4:                               ; CODE XREF: check_arrival_expand_ecl+13C↑j
.text:000000000000A1D4                 call    ___stack_chk_fail
.text:000000000000A1D4 ; } // starts at A080
.text:000000000000A1D4 check_arrival_expand_ecl endp
.text:000000000000A1D4
.text:000000000000A1D4 ; ---------------------------------------------------------------------------
.text:000000000000A1D9                 align 20h
.text:000000000000A1E0
.text:000000000000A1E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A1E0
.text:000000000000A1E0
.text:000000000000A1E0 re_node_set_add_intersect proc near     ; CODE XREF: _sub_epsilon_src_nodes+9C↓p
.text:000000000000A1E0                                         ; update_cur_sifted_state+107↓p
.text:000000000000A1E0 ; __unwind {
.text:000000000000A1E0                 mov     r9, [rsi+8]
.text:000000000000A1E4                 xor     eax, eax
.text:000000000000A1E6                 test    r9, r9
.text:000000000000A1E9                 jz      locret_A2A8
.text:000000000000A1EF                 mov     r11, [rdx+8]
.text:000000000000A1F3                 test    r11, r11
.text:000000000000A1F6                 jz      locret_A2A8
.text:000000000000A1FC                 push    r13
.text:000000000000A1FE                 push    r12
.text:000000000000A200                 lea     rax, [r9+r11]
.text:000000000000A204                 push    rbp
.text:000000000000A205                 push    rbx
.text:000000000000A206                 mov     r12, rdx
.text:000000000000A209                 mov     rbx, rdi
.text:000000000000A20C                 mov     rbp, rsi
.text:000000000000A20F                 sub     rsp, 8
.text:000000000000A213                 mov     rcx, [rdi+8]
.text:000000000000A217                 mov     r13, [rdi]
.text:000000000000A21A                 mov     rdi, [rdi+10h]  ; ptr
.text:000000000000A21E                 lea     rdx, [rax+rcx]
.text:000000000000A222                 cmp     rdx, r13
.text:000000000000A225                 jg      loc_A350
.text:000000000000A22B
.text:000000000000A22B loc_A22B:                               ; CODE XREF: re_node_set_add_intersect+19C↓j
.text:000000000000A22B                 lea     rsi, [rcx+r9]
.text:000000000000A22F                 mov     r13, [rbp+10h]
.text:000000000000A233                 mov     rdx, [r12+10h]
.text:000000000000A238                 sub     r9, 1
.text:000000000000A23C                 sub     rcx, 1
.text:000000000000A240                 add     rsi, r11
.text:000000000000A243                 sub     r11, 1
.text:000000000000A247                 mov     rax, [r13+r9*8+0]
.text:000000000000A24C                 mov     r8, [rdx+r11*8]
.text:000000000000A250
.text:000000000000A250 loc_A250:                               ; CODE XREF: re_node_set_add_intersect+DB↓j
.text:000000000000A250                 cmp     rax, r8
.text:000000000000A253                 jz      short loc_A266
.text:000000000000A255
.text:000000000000A255 loc_A255:                               ; CODE XREF: re_node_set_add_intersect+84↓j
.text:000000000000A255                 jge     short loc_A2B0
.text:000000000000A257                 sub     r11, 1
.text:000000000000A25B                 js      short loc_A2C0
.text:000000000000A25D
.text:000000000000A25D loc_A25D:                               ; CODE XREF: re_node_set_add_intersect+C1↓j
.text:000000000000A25D                 mov     r8, [rdx+r11*8]
.text:000000000000A261                 cmp     rax, r8
.text:000000000000A264                 jnz     short loc_A255
.text:000000000000A266
.text:000000000000A266 loc_A266:                               ; CODE XREF: re_node_set_add_intersect+73↑j
.text:000000000000A266                 test    rcx, rcx
.text:000000000000A269                 jns     short loc_A27A
.text:000000000000A26B                 jmp     short loc_A288
.text:000000000000A26B ; ---------------------------------------------------------------------------
.text:000000000000A26D                 align 10h
.text:000000000000A270
.text:000000000000A270 loc_A270:                               ; CODE XREF: re_node_set_add_intersect+A1↓j
.text:000000000000A270                 sub     rcx, 1
.text:000000000000A274                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A278                 jz      short loc_A288
.text:000000000000A27A
.text:000000000000A27A loc_A27A:                               ; CODE XREF: re_node_set_add_intersect+89↑j
.text:000000000000A27A                 mov     r10, [rdi+rcx*8]
.text:000000000000A27E                 cmp     r10, r8
.text:000000000000A281                 jg      short loc_A270
.text:000000000000A283                 cmp     r10, r8
.text:000000000000A286                 jz      short loc_A290
.text:000000000000A288
.text:000000000000A288 loc_A288:                               ; CODE XREF: re_node_set_add_intersect+8B↑j
.text:000000000000A288                                         ; re_node_set_add_intersect+98↑j
.text:000000000000A288                 sub     rsi, 1
.text:000000000000A28C                 mov     [rdi+rsi*8], r8
.text:000000000000A290
.text:000000000000A290 loc_A290:                               ; CODE XREF: re_node_set_add_intersect+A6↑j
.text:000000000000A290                 sub     r9, 1
.text:000000000000A294                 js      short loc_A2C0
.text:000000000000A296                 sub     r11, 1
.text:000000000000A29A                 js      short loc_A2C0
.text:000000000000A29C                 mov     rax, [r13+r9*8+0]
.text:000000000000A2A1                 jmp     short loc_A25D
.text:000000000000A2A1 ; ---------------------------------------------------------------------------
.text:000000000000A2A3                 align 8
.text:000000000000A2A8
.text:000000000000A2A8 locret_A2A8:                            ; CODE XREF: re_node_set_add_intersect+9↑j
.text:000000000000A2A8                                         ; re_node_set_add_intersect+16↑j
.text:000000000000A2A8                 rep retn
.text:000000000000A2A8 ; ---------------------------------------------------------------------------
.text:000000000000A2AA                 align 10h
.text:000000000000A2B0
.text:000000000000A2B0 loc_A2B0:                               ; CODE XREF: re_node_set_add_intersect:loc_A255↑j
.text:000000000000A2B0                 sub     r9, 1
.text:000000000000A2B4                 js      short loc_A2C0
.text:000000000000A2B6                 mov     rax, [r13+r9*8+0]
.text:000000000000A2BB                 jmp     short loc_A250
.text:000000000000A2BB ; ---------------------------------------------------------------------------
.text:000000000000A2BD                 align 20h
.text:000000000000A2C0
.text:000000000000A2C0 loc_A2C0:                               ; CODE XREF: re_node_set_add_intersect+7B↑j
.text:000000000000A2C0                                         ; re_node_set_add_intersect+B4↑j ...
.text:000000000000A2C0                 mov     rcx, [rbx+8]
.text:000000000000A2C4                 mov     rdx, [rbp+8]
.text:000000000000A2C8                 add     rdx, rcx
.text:000000000000A2CB                 add     rdx, [r12+8]
.text:000000000000A2D0                 lea     rax, [rcx-1]
.text:000000000000A2D4                 lea     r9, [rdx-1]
.text:000000000000A2D8                 sub     rdx, rsi
.text:000000000000A2DB                 add     rcx, rdx
.text:000000000000A2DE                 test    rdx, rdx
.text:000000000000A2E1                 mov     [rbx+8], rcx
.text:000000000000A2E5                 jle     short loc_A32D
.text:000000000000A2E7                 test    rax, rax
.text:000000000000A2EA                 js      short loc_A32D
.text:000000000000A2EC                 nop     dword ptr [rax+00h]
.text:000000000000A2F0
.text:000000000000A2F0 loc_A2F0:                               ; CODE XREF: re_node_set_add_intersect+130↓j
.text:000000000000A2F0                                         ; re_node_set_add_intersect+14B↓j
.text:000000000000A2F0                 mov     r8, [rdi+r9*8]
.text:000000000000A2F4                 mov     rcx, [rdi+rax*8]
.text:000000000000A2F8                 lea     r10, [rax+rdx]
.text:000000000000A2FC                 lea     r10, [rdi+r10*8]
.text:000000000000A300                 cmp     r8, rcx
.text:000000000000A303                 jle     short loc_A320
.text:000000000000A305                 sub     r9, 1
.text:000000000000A309                 sub     rdx, 1
.text:000000000000A30D                 mov     [r10], r8
.text:000000000000A310                 jnz     short loc_A2F0
.text:000000000000A312                 xor     edx, edx
.text:000000000000A314                 jmp     short loc_A331
.text:000000000000A314 ; ---------------------------------------------------------------------------
.text:000000000000A316                 align 20h
.text:000000000000A320
.text:000000000000A320 loc_A320:                               ; CODE XREF: re_node_set_add_intersect+123↑j
.text:000000000000A320                 sub     rax, 1
.text:000000000000A324                 mov     [r10], rcx
.text:000000000000A327                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A32B                 jnz     short loc_A2F0
.text:000000000000A32D
.text:000000000000A32D loc_A32D:                               ; CODE XREF: re_node_set_add_intersect+105↑j
.text:000000000000A32D                                         ; re_node_set_add_intersect+10A↑j
.text:000000000000A32D                 shl     rdx, 3          ; n
.text:000000000000A331
.text:000000000000A331 loc_A331:                               ; CODE XREF: re_node_set_add_intersect+134↑j
.text:000000000000A331                 lea     rsi, [rdi+rsi*8] ; src
.text:000000000000A335                 call    _memcpy
.text:000000000000A33A                 xor     eax, eax
.text:000000000000A33C
.text:000000000000A33C loc_A33C:                               ; CODE XREF: re_node_set_add_intersect+1A6↓j
.text:000000000000A33C                 add     rsp, 8
.text:000000000000A340                 pop     rbx
.text:000000000000A341                 pop     rbp
.text:000000000000A342                 pop     r12
.text:000000000000A344                 pop     r13
.text:000000000000A346                 retn
.text:000000000000A346 ; ---------------------------------------------------------------------------
.text:000000000000A347                 align 10h
.text:000000000000A350
.text:000000000000A350 loc_A350:                               ; CODE XREF: re_node_set_add_intersect+45↑j
.text:000000000000A350                 add     r13, rax
.text:000000000000A353                 lea     rsi, ds:0[r13*8] ; size
.text:000000000000A35B                 call    _realloc
.text:000000000000A360                 test    rax, rax
.text:000000000000A363                 mov     rdi, rax
.text:000000000000A366                 jz      short loc_A381
.text:000000000000A368                 mov     [rbx+10h], rax
.text:000000000000A36C                 mov     [rbx], r13
.text:000000000000A36F                 mov     rcx, [rbx+8]
.text:000000000000A373                 mov     r9, [rbp+8]
.text:000000000000A377                 mov     r11, [r12+8]
.text:000000000000A37C                 jmp     loc_A22B
.text:000000000000A381 ; ---------------------------------------------------------------------------
.text:000000000000A381
.text:000000000000A381 loc_A381:                               ; CODE XREF: re_node_set_add_intersect+186↑j
.text:000000000000A381                 mov     eax, 0Ch
.text:000000000000A386                 jmp     short loc_A33C
.text:000000000000A386 ; } // starts at A1E0
.text:000000000000A386 re_node_set_add_intersect endp
.text:000000000000A386
.text:000000000000A386 ; ---------------------------------------------------------------------------
.text:000000000000A388                 align 10h
.text:000000000000A390
.text:000000000000A390 ; =============== S U B R O U T I N E =======================================
.text:000000000000A390
.text:000000000000A390
.text:000000000000A390 create_token_tree_isra_16 proc near     ; CODE XREF: duplicate_tree+3E↓p
.text:000000000000A390                                         ; lower_subexp+82↓p ...
.text:000000000000A390
.text:000000000000A390 var_28          = qword ptr -28h
.text:000000000000A390 var_20          = qword ptr -20h
.text:000000000000A390 var_18          = qword ptr -18h
.text:000000000000A390 var_10          = qword ptr -10h
.text:000000000000A390
.text:000000000000A390 ; __unwind {
.text:000000000000A390                 push    rbx
.text:000000000000A391                 mov     rbx, rdi
.text:000000000000A394                 sub     rsp, 20h
.text:000000000000A398                 mov     eax, [rsi]
.text:000000000000A39A                 cmp     eax, 0Fh
.text:000000000000A39D                 jz      short loc_A418
.text:000000000000A39F                 movsxd  r9, eax
.text:000000000000A3A2                 lea     r10d, [rax+1]
.text:000000000000A3A6                 mov     rdi, [rdi]
.text:000000000000A3A9                 mov     rax, r9
.text:000000000000A3AC                 shl     rax, 6
.text:000000000000A3B0                 add     rax, 8
.text:000000000000A3B4
.text:000000000000A3B4 loc_A3B4:                               ; CODE XREF: create_token_tree_isra_16+D7↓j
.text:000000000000A3B4                 shl     r9, 6
.text:000000000000A3B8                 mov     [rsi], r10d
.text:000000000000A3BB                 add     rax, rdi
.text:000000000000A3BE                 lea     rsi, [rdi+r9]
.text:000000000000A3C2                 mov     qword ptr [rsi+8], 0
.text:000000000000A3CA                 mov     [rsi+10h], rdx
.text:000000000000A3CE                 lea     rdi, [rsi+20h]
.text:000000000000A3D2                 mov     [rsi+18h], rcx
.text:000000000000A3D6                 movdqu  xmm0, xmmword ptr [r8]
.text:000000000000A3DB                 movups  xmmword ptr [rsi+30h], xmm0
.text:000000000000A3DF                 and     byte ptr [rdi+1Ah], 0F3h
.text:000000000000A3E3                 test    rdx, rdx
.text:000000000000A3E6                 mov     qword ptr [rsi+20h], 0
.text:000000000000A3EE                 mov     qword ptr [rsi+28h], 0
.text:000000000000A3F6                 mov     qword ptr [rsi+40h], 0FFFFFFFFFFFFFFFFh
.text:000000000000A3FE                 jz      short loc_A403
.text:000000000000A400                 mov     [rdx], rax
.text:000000000000A403
.text:000000000000A403 loc_A403:                               ; CODE XREF: create_token_tree_isra_16+6E↑j
.text:000000000000A403                 test    rcx, rcx
.text:000000000000A406                 jz      short loc_A40B
.text:000000000000A408                 mov     [rcx], rax
.text:000000000000A40B
.text:000000000000A40B loc_A40B:                               ; CODE XREF: create_token_tree_isra_16+76↑j
.text:000000000000A40B                                         ; create_token_tree_isra_16+DE↓j
.text:000000000000A40B                 add     rsp, 20h
.text:000000000000A40F                 pop     rbx
.text:000000000000A410                 retn
.text:000000000000A410 ; ---------------------------------------------------------------------------
.text:000000000000A411                 align 8
.text:000000000000A418
.text:000000000000A418 loc_A418:                               ; CODE XREF: create_token_tree_isra_16+D↑j
.text:000000000000A418                 mov     edi, 3C8h       ; size
.text:000000000000A41D                 mov     [rsp+28h+var_10], r8
.text:000000000000A422                 mov     [rsp+28h+var_18], rcx
.text:000000000000A427                 mov     [rsp+28h+var_20], rdx
.text:000000000000A42C                 mov     [rsp+28h+var_28], rsi
.text:000000000000A430                 call    _malloc
.text:000000000000A435                 test    rax, rax
.text:000000000000A438                 mov     rdi, rax
.text:000000000000A43B                 jz      short loc_A46C
.text:000000000000A43D                 mov     rax, [rbx]
.text:000000000000A440                 mov     r10d, 1
.text:000000000000A446                 mov     [rbx], rdi
.text:000000000000A449                 xor     r9d, r9d
.text:000000000000A44C                 mov     r8, [rsp+28h+var_10]
.text:000000000000A451                 mov     rcx, [rsp+28h+var_18]
.text:000000000000A456                 mov     rdx, [rsp+28h+var_20]
.text:000000000000A45B                 mov     rsi, [rsp+28h+var_28]
.text:000000000000A45F                 mov     [rdi], rax
.text:000000000000A462                 mov     eax, 8
.text:000000000000A467                 jmp     loc_A3B4
.text:000000000000A46C ; ---------------------------------------------------------------------------
.text:000000000000A46C
.text:000000000000A46C loc_A46C:                               ; CODE XREF: create_token_tree_isra_16+AB↑j
.text:000000000000A46C                 xor     eax, eax
.text:000000000000A46E                 jmp     short loc_A40B
.text:000000000000A46E ; } // starts at A390
.text:000000000000A46E create_token_tree_isra_16 endp
.text:000000000000A46E
.text:000000000000A470
.text:000000000000A470 ; =============== S U B R O U T I N E =======================================
.text:000000000000A470
.text:000000000000A470
.text:000000000000A470 duplicate_tree  proc near               ; CODE XREF: parse_expression+2AC↓p
.text:000000000000A470                                         ; parse_expression+408↓p ...
.text:000000000000A470
.text:000000000000A470 var_38          = qword ptr -38h
.text:000000000000A470 var_30          = qword ptr -30h
.text:000000000000A470
.text:000000000000A470 ; __unwind {
.text:000000000000A470                 push    r14
.text:000000000000A472                 push    r13
.text:000000000000A474                 lea     r13, [rsi+70h]
.text:000000000000A478                 push    r12
.text:000000000000A47A                 push    rbp
.text:000000000000A47B                 lea     r12, [rsi+80h]
.text:000000000000A482                 push    rbx
.text:000000000000A483                 mov     rbx, rdi
.text:000000000000A486                 sub     rsp, 10h
.text:000000000000A48A                 mov     rbp, [rdi]
.text:000000000000A48D                 mov     rax, fs:28h
.text:000000000000A496                 mov     [rsp+38h+var_30], rax
.text:000000000000A49B                 xor     eax, eax
.text:000000000000A49D                 mov     r14, rsp
.text:000000000000A4A0
.text:000000000000A4A0 loc_A4A0:                               ; CODE XREF: duplicate_tree+65↓j
.text:000000000000A4A0                                         ; duplicate_tree+C7↓j
.text:000000000000A4A0                 lea     r8, [rbx+28h]
.text:000000000000A4A4                 xor     ecx, ecx
.text:000000000000A4A6                 xor     edx, edx
.text:000000000000A4A8                 mov     rsi, r12
.text:000000000000A4AB                 mov     rdi, r13
.text:000000000000A4AE                 call    create_token_tree_isra_16
.text:000000000000A4B3                 test    rax, rax
.text:000000000000A4B6                 mov     [r14], rax
.text:000000000000A4B9                 jz      short loc_A50C
.text:000000000000A4BB                 mov     [rax], rbp
.text:000000000000A4BE                 mov     rbp, [r14]
.text:000000000000A4C1                 or      byte ptr [rbp+32h], 4
.text:000000000000A4C5                 mov     rax, [rbx+8]
.text:000000000000A4C9                 test    rax, rax
.text:000000000000A4CC                 jz      short loc_A4E0
.text:000000000000A4CE                 lea     r14, [rbp+8]
.text:000000000000A4D2                 mov     rbx, rax
.text:000000000000A4D5                 jmp     short loc_A4A0
.text:000000000000A4D5 ; ---------------------------------------------------------------------------
.text:000000000000A4D7                 align 20h
.text:000000000000A4E0
.text:000000000000A4E0 loc_A4E0:                               ; CODE XREF: duplicate_tree+5C↑j
.text:000000000000A4E0                 xor     edx, edx
.text:000000000000A4E2                 jmp     short loc_A4EB
.text:000000000000A4E2 ; ---------------------------------------------------------------------------
.text:000000000000A4E4                 align 8
.text:000000000000A4E8
.text:000000000000A4E8 loc_A4E8:                               ; CODE XREF: duplicate_tree+96↓j
.text:000000000000A4E8                 mov     rbx, rax
.text:000000000000A4EB
.text:000000000000A4EB loc_A4EB:                               ; CODE XREF: duplicate_tree+72↑j
.text:000000000000A4EB                 mov     rax, [rbx+10h]
.text:000000000000A4EF                 test    rax, rax
.text:000000000000A4F2                 jz      short loc_A4F9
.text:000000000000A4F4                 cmp     rax, rdx
.text:000000000000A4F7                 jnz     short loc_A530
.text:000000000000A4F9
.text:000000000000A4F9 loc_A4F9:                               ; CODE XREF: duplicate_tree+82↑j
.text:000000000000A4F9                 mov     rax, [rbx]
.text:000000000000A4FC                 mov     rbp, [rbp+0]
.text:000000000000A500                 mov     rdx, rbx
.text:000000000000A503                 test    rax, rax
.text:000000000000A506                 jnz     short loc_A4E8
.text:000000000000A508                 mov     rax, [rsp+38h+var_38]
.text:000000000000A50C
.text:000000000000A50C loc_A50C:                               ; CODE XREF: duplicate_tree+49↑j
.text:000000000000A50C                 mov     rcx, [rsp+38h+var_30]
.text:000000000000A511                 xor     rcx, fs:28h
.text:000000000000A51A                 jnz     short loc_A53C
.text:000000000000A51C                 add     rsp, 10h
.text:000000000000A520                 pop     rbx
.text:000000000000A521                 pop     rbp
.text:000000000000A522                 pop     r12
.text:000000000000A524                 pop     r13
.text:000000000000A526                 pop     r14
.text:000000000000A528                 retn
.text:000000000000A528 ; ---------------------------------------------------------------------------
.text:000000000000A529                 align 10h
.text:000000000000A530
.text:000000000000A530 loc_A530:                               ; CODE XREF: duplicate_tree+87↑j
.text:000000000000A530                 lea     r14, [rbp+10h]
.text:000000000000A534                 mov     rbx, rax
.text:000000000000A537                 jmp     loc_A4A0
.text:000000000000A53C ; ---------------------------------------------------------------------------
.text:000000000000A53C
.text:000000000000A53C loc_A53C:                               ; CODE XREF: duplicate_tree+AA↑j
.text:000000000000A53C                 call    ___stack_chk_fail
.text:000000000000A53C ; } // starts at A470
.text:000000000000A53C duplicate_tree  endp
.text:000000000000A53C
.text:000000000000A53C ; ---------------------------------------------------------------------------
.text:000000000000A541                 align 10h
.text:000000000000A550
.text:000000000000A550 ; =============== S U B R O U T I N E =======================================
.text:000000000000A550
.text:000000000000A550
.text:000000000000A550 lower_subexp    proc near               ; CODE XREF: lower_subexps+68↓p
.text:000000000000A550                                         ; lower_subexps+88↓p
.text:000000000000A550
.text:000000000000A550 var_70          = qword ptr -70h
.text:000000000000A550 var_68          = qword ptr -68h
.text:000000000000A550 var_60          = qword ptr -60h
.text:000000000000A550 var_58          = byte ptr -58h
.text:000000000000A550 var_50          = byte ptr -50h
.text:000000000000A550 var_40          = qword ptr -40h
.text:000000000000A550
.text:000000000000A550 ; __unwind {
.text:000000000000A550                 push    r15
.text:000000000000A552                 push    r14
.text:000000000000A554                 push    r13
.text:000000000000A556                 push    r12
.text:000000000000A558                 mov     r13, rdx
.text:000000000000A55B                 push    rbp
.text:000000000000A55C                 push    rbx
.text:000000000000A55D                 sub     rsp, 48h
.text:000000000000A561                 mov     rbx, [rsi]
.text:000000000000A564                 mov     rbp, [rdx+8]
.text:000000000000A568                 mov     rax, fs:28h
.text:000000000000A571                 mov     [rsp+78h+var_40], rax
.text:000000000000A576                 xor     eax, eax
.text:000000000000A578                 test    byte ptr [rsi+38h], 10h
.text:000000000000A57C                 mov     [rsp+78h+var_60], rdi
.text:000000000000A581                 jz      loc_A6F8
.text:000000000000A587                 test    rbp, rbp
.text:000000000000A58A                 jz      short loc_A600
.text:000000000000A58C                 mov     rax, [rdx+28h]
.text:000000000000A590                 cmp     rax, 3Fh ; '?'
.text:000000000000A594                 jg      loc_A6CD
.text:000000000000A59A                 mov     rdx, [rbx+0A0h]
.text:000000000000A5A1                 bt      rdx, rax
.text:000000000000A5A5                 jnb     loc_A6CD
.text:000000000000A5AB                 lea     rax, [rbx+70h]
.text:000000000000A5AF                 lea     r14, [rsp+78h+var_58]
.text:000000000000A5B4                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:000000000000A5B8                 xor     ecx, ecx
.text:000000000000A5BA                 xor     edx, edx
.text:000000000000A5BC                 mov     rsi, rbx
.text:000000000000A5BF                 mov     r15, rax
.text:000000000000A5C2                 mov     r8, r14
.text:000000000000A5C5                 mov     rdi, rax
.text:000000000000A5C8                 mov     [rsp+78h+var_50], 8
.text:000000000000A5CD                 mov     [rsp+78h+var_70], rax
.text:000000000000A5D2                 call    create_token_tree_isra_16
.text:000000000000A5D7                 mov     rdi, r15
.text:000000000000A5DA                 mov     r8, r14
.text:000000000000A5DD                 xor     ecx, ecx
.text:000000000000A5DF                 xor     edx, edx
.text:000000000000A5E1                 mov     rsi, rbx
.text:000000000000A5E4                 mov     r12, rax
.text:000000000000A5E7                 mov     [rsp+78h+var_50], 9
.text:000000000000A5EC                 call    create_token_tree_isra_16
.text:000000000000A5F1                 mov     r15, rax
.text:000000000000A5F4                 jmp     loc_A74D
.text:000000000000A5F4 ; ---------------------------------------------------------------------------
.text:000000000000A5F9                 align 20h
.text:000000000000A600
.text:000000000000A600 loc_A600:                               ; CODE XREF: lower_subexp+3A↑j
.text:000000000000A600                 lea     rax, [rbx+70h]
.text:000000000000A604                 lea     r14, [rsp+78h+var_58]
.text:000000000000A609                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:000000000000A60D                 xor     ecx, ecx
.text:000000000000A60F                 xor     edx, edx
.text:000000000000A611                 mov     rsi, rbx
.text:000000000000A614                 mov     r15, rax
.text:000000000000A617                 mov     r8, r14
.text:000000000000A61A                 mov     rdi, rax
.text:000000000000A61D                 mov     [rsp+78h+var_50], 8
.text:000000000000A622                 mov     [rsp+78h+var_70], rax
.text:000000000000A627                 call    create_token_tree_isra_16
.text:000000000000A62C                 mov     rdi, r15
.text:000000000000A62F                 mov     r8, r14
.text:000000000000A632                 xor     ecx, ecx
.text:000000000000A634                 xor     edx, edx
.text:000000000000A636                 mov     rsi, rbx
.text:000000000000A639                 mov     r12, rax
.text:000000000000A63C                 mov     [rsp+78h+var_50], 9
.text:000000000000A641                 call    create_token_tree_isra_16
.text:000000000000A646                 mov     r11, rax
.text:000000000000A649                 mov     r15, rax
.text:000000000000A64C
.text:000000000000A64C loc_A64C:                               ; CODE XREF: lower_subexp+1F7↓j
.text:000000000000A64C                                         ; lower_subexp+21B↓j
.text:000000000000A64C                 mov     rdi, [rsp+78h+var_70]
.text:000000000000A651                 mov     r8, r14
.text:000000000000A654                 mov     rcx, r11
.text:000000000000A657                 mov     rdx, r12
.text:000000000000A65A                 mov     rsi, rbx
.text:000000000000A65D                 mov     [rsp+78h+var_50], 10h
.text:000000000000A662                 mov     [rsp+78h+var_68], r11
.text:000000000000A667                 call    create_token_tree_isra_16
.text:000000000000A66C                 test    rax, rax
.text:000000000000A66F                 mov     rbp, rax
.text:000000000000A672                 jz      loc_A770
.text:000000000000A678                 mov     r11, [rsp+78h+var_68]
.text:000000000000A67D                 test    r11, r11
.text:000000000000A680                 jz      loc_A770
.text:000000000000A686                 test    r12, r12
.text:000000000000A689                 jz      loc_A770
.text:000000000000A68F                 test    r15, r15
.text:000000000000A692                 jz      loc_A770
.text:000000000000A698                 mov     rax, [r13+28h]
.text:000000000000A69C                 mov     [r15+28h], rax
.text:000000000000A6A0                 mov     [r12+28h], rax
.text:000000000000A6A5                 movzx   eax, byte ptr [r13+32h]
.text:000000000000A6AA                 movzx   edx, byte ptr [r15+32h]
.text:000000000000A6AF                 and     eax, 8
.text:000000000000A6B2                 and     edx, 0FFFFFFF7h
.text:000000000000A6B5                 mov     ecx, eax
.text:000000000000A6B7                 or      edx, ecx
.text:000000000000A6B9                 mov     [r15+32h], dl
.text:000000000000A6BD                 movzx   eax, byte ptr [r12+32h]
.text:000000000000A6C3                 and     eax, 0FFFFFFF7h
.text:000000000000A6C6                 or      eax, ecx
.text:000000000000A6C8                 mov     [r12+32h], al
.text:000000000000A6CD
.text:000000000000A6CD loc_A6CD:                               ; CODE XREF: lower_subexp+44↑j
.text:000000000000A6CD                                         ; lower_subexp+55↑j ...
.text:000000000000A6CD                 mov     rdi, [rsp+78h+var_40]
.text:000000000000A6D2                 xor     rdi, fs:28h
.text:000000000000A6DB                 mov     rax, rbp
.text:000000000000A6DE                 jnz     loc_A782
.text:000000000000A6E4                 add     rsp, 48h
.text:000000000000A6E8                 pop     rbx
.text:000000000000A6E9                 pop     rbp
.text:000000000000A6EA                 pop     r12
.text:000000000000A6EC                 pop     r13
.text:000000000000A6EE                 pop     r14
.text:000000000000A6F0                 pop     r15
.text:000000000000A6F2                 retn
.text:000000000000A6F2 ; ---------------------------------------------------------------------------
.text:000000000000A6F3                 align 8
.text:000000000000A6F8
.text:000000000000A6F8 loc_A6F8:                               ; CODE XREF: lower_subexp+31↑j
.text:000000000000A6F8                 lea     rax, [rbx+70h]
.text:000000000000A6FC                 lea     r14, [rsp+78h+var_58]
.text:000000000000A701                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:000000000000A705                 xor     ecx, ecx
.text:000000000000A707                 xor     edx, edx
.text:000000000000A709                 mov     rsi, rbx
.text:000000000000A70C                 mov     r15, rax
.text:000000000000A70F                 mov     r8, r14
.text:000000000000A712                 mov     rdi, rax
.text:000000000000A715                 mov     [rsp+78h+var_50], 8
.text:000000000000A71A                 mov     [rsp+78h+var_70], rax
.text:000000000000A71F                 call    create_token_tree_isra_16
.text:000000000000A724                 xor     ecx, ecx
.text:000000000000A726                 xor     edx, edx
.text:000000000000A728                 mov     rdi, r15
.text:000000000000A72B                 mov     r8, r14
.text:000000000000A72E                 mov     rsi, rbx
.text:000000000000A731                 mov     r12, rax
.text:000000000000A734                 mov     [rsp+78h+var_50], 9
.text:000000000000A739                 call    create_token_tree_isra_16
.text:000000000000A73E                 test    rbp, rbp
.text:000000000000A741                 mov     r15, rax
.text:000000000000A744                 mov     r11, rax
.text:000000000000A747                 jz      loc_A64C
.text:000000000000A74D
.text:000000000000A74D loc_A74D:                               ; CODE XREF: lower_subexp+A4↑j
.text:000000000000A74D                 mov     rdi, [rsp+78h+var_70]
.text:000000000000A752                 mov     r8, r14
.text:000000000000A755                 mov     rcx, r15
.text:000000000000A758                 mov     rdx, rbp
.text:000000000000A75B                 mov     rsi, rbx
.text:000000000000A75E                 mov     [rsp+78h+var_50], 10h
.text:000000000000A763                 call    create_token_tree_isra_16
.text:000000000000A768                 mov     r11, rax
.text:000000000000A76B                 jmp     loc_A64C
.text:000000000000A770 ; ---------------------------------------------------------------------------
.text:000000000000A770
.text:000000000000A770 loc_A770:                               ; CODE XREF: lower_subexp+122↑j
.text:000000000000A770                                         ; lower_subexp+130↑j ...
.text:000000000000A770                 mov     rax, [rsp+78h+var_60]
.text:000000000000A775                 xor     ebp, ebp
.text:000000000000A777                 mov     dword ptr [rax], 0Ch
.text:000000000000A77D                 jmp     loc_A6CD
.text:000000000000A782 ; ---------------------------------------------------------------------------
.text:000000000000A782
.text:000000000000A782 loc_A782:                               ; CODE XREF: lower_subexp+18E↑j
.text:000000000000A782                 call    ___stack_chk_fail
.text:000000000000A782 ; } // starts at A550
.text:000000000000A782 lower_subexp    endp
.text:000000000000A782
.text:000000000000A782 ; ---------------------------------------------------------------------------
.text:000000000000A787                 align 10h
.text:000000000000A790
.text:000000000000A790 ; =============== S U B R O U T I N E =======================================
.text:000000000000A790
.text:000000000000A790
.text:000000000000A790 lower_subexps   proc near               ; DATA XREF: re_compile_internal+666↓o
.text:000000000000A790
.text:000000000000A790 var_24          = dword ptr -24h
.text:000000000000A790 var_20          = qword ptr -20h
.text:000000000000A790
.text:000000000000A790 ; __unwind {
.text:000000000000A790                 push    rbp
.text:000000000000A791                 push    rbx
.text:000000000000A792                 mov     rbp, rdi
.text:000000000000A795                 mov     rbx, rsi
.text:000000000000A798                 sub     rsp, 18h
.text:000000000000A79C                 mov     rdx, [rsi+8]
.text:000000000000A7A0                 mov     rax, fs:28h
.text:000000000000A7A9                 mov     [rsp+28h+var_20], rax
.text:000000000000A7AE                 xor     eax, eax
.text:000000000000A7B0                 mov     [rsp+28h+var_24], 0
.text:000000000000A7B8                 test    rdx, rdx
.text:000000000000A7BB                 jz      short loc_A7C3
.text:000000000000A7BD                 cmp     byte ptr [rdx+30h], 11h
.text:000000000000A7C1                 jz      short loc_A810
.text:000000000000A7C3
.text:000000000000A7C3 loc_A7C3:                               ; CODE XREF: lower_subexps+2B↑j
.text:000000000000A7C3                                         ; lower_subexps+94↓j ...
.text:000000000000A7C3                 mov     rdx, [rbx+10h]
.text:000000000000A7C7                 test    rdx, rdx
.text:000000000000A7CA                 jz      short loc_A7D2
.text:000000000000A7CC                 cmp     byte ptr [rdx+30h], 11h
.text:000000000000A7D0                 jz      short loc_A7F0
.text:000000000000A7D2
.text:000000000000A7D2 loc_A7D2:                               ; CODE XREF: lower_subexps+3A↑j
.text:000000000000A7D2                                         ; lower_subexps+74↓j ...
.text:000000000000A7D2                 mov     rcx, [rsp+28h+var_20]
.text:000000000000A7D7                 xor     rcx, fs:28h
.text:000000000000A7E0                 mov     eax, [rsp+28h+var_24]
.text:000000000000A7E4                 jnz     short loc_A82B
.text:000000000000A7E6                 add     rsp, 18h
.text:000000000000A7EA                 pop     rbx
.text:000000000000A7EB                 pop     rbp
.text:000000000000A7EC                 retn
.text:000000000000A7EC ; ---------------------------------------------------------------------------
.text:000000000000A7ED                 align 10h
.text:000000000000A7F0
.text:000000000000A7F0 loc_A7F0:                               ; CODE XREF: lower_subexps+40↑j
.text:000000000000A7F0                 lea     rdi, [rsp+28h+var_24]
.text:000000000000A7F5                 mov     rsi, rbp
.text:000000000000A7F8                 call    lower_subexp
.text:000000000000A7FD                 test    rax, rax
.text:000000000000A800                 mov     [rbx+10h], rax
.text:000000000000A804                 jz      short loc_A7D2
.text:000000000000A806                 mov     [rax], rbx
.text:000000000000A809                 jmp     short loc_A7D2
.text:000000000000A809 ; ---------------------------------------------------------------------------
.text:000000000000A80B                 align 10h
.text:000000000000A810
.text:000000000000A810 loc_A810:                               ; CODE XREF: lower_subexps+31↑j
.text:000000000000A810                 lea     rdi, [rsp+28h+var_24]
.text:000000000000A815                 mov     rsi, rbp
.text:000000000000A818                 call    lower_subexp
.text:000000000000A81D                 test    rax, rax
.text:000000000000A820                 mov     [rbx+8], rax
.text:000000000000A824                 jz      short loc_A7C3
.text:000000000000A826                 mov     [rax], rbx
.text:000000000000A829                 jmp     short loc_A7C3
.text:000000000000A82B ; ---------------------------------------------------------------------------
.text:000000000000A82B
.text:000000000000A82B loc_A82B:                               ; CODE XREF: lower_subexps+54↑j
.text:000000000000A82B                 call    ___stack_chk_fail
.text:000000000000A82B ; } // starts at A790
.text:000000000000A82B lower_subexps   endp
.text:000000000000A82B
.text:000000000000A830
.text:000000000000A830 ; =============== S U B R O U T I N E =======================================
.text:000000000000A830
.text:000000000000A830
.text:000000000000A830 re_node_set_init_copy proc near         ; CODE XREF: re_node_set_init_union+EB↓j
.text:000000000000A830                                         ; re_acquire_state_context+E8↓p ...
.text:000000000000A830 ; __unwind {
.text:000000000000A830                 push    r12
.text:000000000000A832                 push    rbp
.text:000000000000A833                 push    rbx
.text:000000000000A834                 mov     rax, [rsi+8]
.text:000000000000A838                 mov     [rdi+8], rax
.text:000000000000A83C                 mov     r12, [rsi+8]
.text:000000000000A840                 test    r12, r12
.text:000000000000A843                 jle     short loc_A880
.text:000000000000A845                 mov     rbx, rdi
.text:000000000000A848                 mov     [rdi], rax
.text:000000000000A84B                 lea     rdi, ds:0[rax*8] ; size
.text:000000000000A853                 mov     rbp, rsi
.text:000000000000A856                 call    _malloc
.text:000000000000A85B                 test    rax, rax
.text:000000000000A85E                 mov     [rbx+10h], rax
.text:000000000000A862                 jz      short loc_A8A0
.text:000000000000A864                 mov     rsi, [rbp+10h]  ; src
.text:000000000000A868                 lea     rdx, ds:0[r12*8] ; n
.text:000000000000A870                 mov     rdi, rax        ; dest
.text:000000000000A873                 call    _memcpy
.text:000000000000A878                 xor     eax, eax
.text:000000000000A87A
.text:000000000000A87A loc_A87A:                               ; CODE XREF: re_node_set_init_copy+84↓j
.text:000000000000A87A                 pop     rbx
.text:000000000000A87B                 pop     rbp
.text:000000000000A87C                 pop     r12
.text:000000000000A87E                 retn
.text:000000000000A87E ; ---------------------------------------------------------------------------
.text:000000000000A87F                 align 20h
.text:000000000000A880
.text:000000000000A880 loc_A880:                               ; CODE XREF: re_node_set_init_copy+13↑j
.text:000000000000A880                 pxor    xmm0, xmm0
.text:000000000000A884                 mov     qword ptr [rdi+10h], 0
.text:000000000000A88C                 xor     eax, eax
.text:000000000000A88E                 movups  xmmword ptr [rdi], xmm0
.text:000000000000A891                 pop     rbx
.text:000000000000A892                 pop     rbp
.text:000000000000A893                 pop     r12
.text:000000000000A895                 retn
.text:000000000000A895 ; ---------------------------------------------------------------------------
.text:000000000000A896                 align 20h
.text:000000000000A8A0
.text:000000000000A8A0 loc_A8A0:                               ; CODE XREF: re_node_set_init_copy+32↑j
.text:000000000000A8A0                 mov     qword ptr [rbx+8], 0
.text:000000000000A8A8                 mov     qword ptr [rbx], 0
.text:000000000000A8AF                 mov     eax, 0Ch
.text:000000000000A8B4                 jmp     short loc_A87A
.text:000000000000A8B4 ; } // starts at A830
.text:000000000000A8B4 re_node_set_init_copy endp
.text:000000000000A8B4
.text:000000000000A8B4 ; ---------------------------------------------------------------------------
.text:000000000000A8B6                 align 20h
.text:000000000000A8C0
.text:000000000000A8C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A8C0
.text:000000000000A8C0
.text:000000000000A8C0 re_node_set_init_union proc near        ; CODE XREF: merge_state_array+60↓p
.text:000000000000A8C0                                         ; transit_state_bkref_isra_34+4A1↓p ...
.text:000000000000A8C0 ; __unwind {
.text:000000000000A8C0                 test    rsi, rsi
.text:000000000000A8C3                 push    r14
.text:000000000000A8C5                 push    r13
.text:000000000000A8C7                 push    r12
.text:000000000000A8C9                 push    rbp
.text:000000000000A8CA                 push    rbx
.text:000000000000A8CB                 jz      loc_A975
.text:000000000000A8D1                 test    rdx, rdx
.text:000000000000A8D4                 mov     r13, [rsi+8]
.text:000000000000A8D8                 jz      loc_A970
.text:000000000000A8DE                 test    r13, r13
.text:000000000000A8E1                 jle     loc_A970
.text:000000000000A8E7                 mov     r14, [rdx+8]
.text:000000000000A8EB                 test    r14, r14
.text:000000000000A8EE                 jle     loc_A9A3
.text:000000000000A8F4                 mov     r12, rdi
.text:000000000000A8F7                 lea     rdi, [r13+r14+0]
.text:000000000000A8FC                 mov     rbx, rdx
.text:000000000000A8FF                 mov     rbp, rsi
.text:000000000000A902                 mov     [r12], rdi
.text:000000000000A906                 shl     rdi, 3          ; size
.text:000000000000A90A                 call    _malloc
.text:000000000000A90F                 test    rax, rax
.text:000000000000A912                 mov     [r12+10h], rax
.text:000000000000A917                 jz      loc_AA08
.text:000000000000A91D                 mov     r9, [rbx+10h]
.text:000000000000A921                 mov     r8, [rbp+10h]
.text:000000000000A925                 xor     ebx, ebx
.text:000000000000A927                 xor     ecx, ecx
.text:000000000000A929                 xor     esi, esi
.text:000000000000A92B                 jmp     short loc_A94E
.text:000000000000A92B ; ---------------------------------------------------------------------------
.text:000000000000A92D                 align 10h
.text:000000000000A930
.text:000000000000A930 loc_A930:                               ; CODE XREF: re_node_set_init_union+9D↓j
.text:000000000000A930                 setz    dil
.text:000000000000A934                 mov     [rax+rbx*8-8], rdx
.text:000000000000A939                 add     rsi, 1
.text:000000000000A93D                 movzx   edi, dil
.text:000000000000A941                 add     rcx, rdi
.text:000000000000A944
.text:000000000000A944 loc_A944:                               ; CODE XREF: re_node_set_init_union+A8↓j
.text:000000000000A944                 cmp     r13, rsi
.text:000000000000A947                 jle     short loc_A9B0
.text:000000000000A949                 cmp     r14, rcx
.text:000000000000A94C                 jle     short loc_A9C8
.text:000000000000A94E
.text:000000000000A94E loc_A94E:                               ; CODE XREF: re_node_set_init_union+6B↑j
.text:000000000000A94E                 mov     rdx, [r8+rsi*8]
.text:000000000000A952                 mov     rdi, [r9+rcx*8]
.text:000000000000A956                 add     rbx, 1
.text:000000000000A95A                 cmp     rdx, rdi
.text:000000000000A95D                 jle     short loc_A930
.text:000000000000A95F                 add     rcx, 1
.text:000000000000A963                 mov     [rax+rbx*8-8], rdi
.text:000000000000A968                 jmp     short loc_A944
.text:000000000000A968 ; ---------------------------------------------------------------------------
.text:000000000000A96A                 align 10h
.text:000000000000A970
.text:000000000000A970 loc_A970:                               ; CODE XREF: re_node_set_init_union+18↑j
.text:000000000000A970                                         ; re_node_set_init_union+21↑j
.text:000000000000A970                 test    r13, r13
.text:000000000000A973                 jg      short loc_A9A3
.text:000000000000A975
.text:000000000000A975 loc_A975:                               ; CODE XREF: re_node_set_init_union+B↑j
.text:000000000000A975                 test    rdx, rdx
.text:000000000000A978                 jz      short loc_A981
.text:000000000000A97A                 cmp     qword ptr [rdx+8], 0
.text:000000000000A97F                 jg      short loc_A9A0
.text:000000000000A981
.text:000000000000A981 loc_A981:                               ; CODE XREF: re_node_set_init_union+B8↑j
.text:000000000000A981                 pxor    xmm0, xmm0
.text:000000000000A985                 mov     qword ptr [rdi+10h], 0
.text:000000000000A98D                 xor     eax, eax
.text:000000000000A98F                 movaps  xmmword ptr [rdi], xmm0
.text:000000000000A992
.text:000000000000A992 loc_A992:                               ; CODE XREF: re_node_set_init_union+14D↓j
.text:000000000000A992                 pop     rbx
.text:000000000000A993                 pop     rbp
.text:000000000000A994                 pop     r12
.text:000000000000A996                 pop     r13
.text:000000000000A998                 pop     r14
.text:000000000000A99A                 retn
.text:000000000000A99A ; ---------------------------------------------------------------------------
.text:000000000000A99B                 align 20h
.text:000000000000A9A0
.text:000000000000A9A0 loc_A9A0:                               ; CODE XREF: re_node_set_init_union+BF↑j
.text:000000000000A9A0                 mov     rsi, rdx
.text:000000000000A9A3
.text:000000000000A9A3 loc_A9A3:                               ; CODE XREF: re_node_set_init_union+2E↑j
.text:000000000000A9A3                                         ; re_node_set_init_union+B3↑j
.text:000000000000A9A3                 pop     rbx
.text:000000000000A9A4                 pop     rbp
.text:000000000000A9A5                 pop     r12
.text:000000000000A9A7                 pop     r13
.text:000000000000A9A9                 pop     r14
.text:000000000000A9AB                 jmp     re_node_set_init_copy
.text:000000000000A9B0 ; ---------------------------------------------------------------------------
.text:000000000000A9B0
.text:000000000000A9B0 loc_A9B0:                               ; CODE XREF: re_node_set_init_union+87↑j
.text:000000000000A9B0                 cmp     r14, rcx
.text:000000000000A9B3                 jg      short loc_A9E8
.text:000000000000A9B5
.text:000000000000A9B5 loc_A9B5:                               ; CODE XREF: re_node_set_init_union+123↓j
.text:000000000000A9B5                                         ; re_node_set_init_union+143↓j
.text:000000000000A9B5                 mov     [r12+8], rbx
.text:000000000000A9BA                 xor     eax, eax
.text:000000000000A9BC                 pop     rbx
.text:000000000000A9BD                 pop     rbp
.text:000000000000A9BE                 pop     r12
.text:000000000000A9C0                 pop     r13
.text:000000000000A9C2                 pop     r14
.text:000000000000A9C4                 retn
.text:000000000000A9C4 ; ---------------------------------------------------------------------------
.text:000000000000A9C5                 align 8
.text:000000000000A9C8
.text:000000000000A9C8 loc_A9C8:                               ; CODE XREF: re_node_set_init_union+8C↑j
.text:000000000000A9C8                 sub     r13, rsi
.text:000000000000A9CB                 lea     rdi, [rax+rbx*8] ; dest
.text:000000000000A9CF                 lea     rsi, [r8+rsi*8] ; src
.text:000000000000A9D3                 lea     rdx, ds:0[r13*8] ; n
.text:000000000000A9DB                 add     rbx, r13
.text:000000000000A9DE                 call    _memcpy
.text:000000000000A9E3                 jmp     short loc_A9B5
.text:000000000000A9E3 ; ---------------------------------------------------------------------------
.text:000000000000A9E5                 align 8
.text:000000000000A9E8
.text:000000000000A9E8 loc_A9E8:                               ; CODE XREF: re_node_set_init_union+F3↑j
.text:000000000000A9E8                 sub     r14, rcx
.text:000000000000A9EB                 lea     rdi, [rax+rbx*8] ; dest
.text:000000000000A9EF                 lea     rsi, [r9+rcx*8] ; src
.text:000000000000A9F3                 lea     rdx, ds:0[r14*8] ; n
.text:000000000000A9FB                 add     rbx, r14
.text:000000000000A9FE                 call    _memcpy
.text:000000000000AA03                 jmp     short loc_A9B5
.text:000000000000AA03 ; ---------------------------------------------------------------------------
.text:000000000000AA05                 align 8
.text:000000000000AA08
.text:000000000000AA08 loc_AA08:                               ; CODE XREF: re_node_set_init_union+57↑j
.text:000000000000AA08                 mov     eax, 0Ch
.text:000000000000AA0D                 jmp     loc_A992
.text:000000000000AA0D ; } // starts at A8C0
.text:000000000000AA0D re_node_set_init_union endp
.text:000000000000AA0D
.text:000000000000AA0D ; ---------------------------------------------------------------------------
.text:000000000000AA12                 align 20h
.text:000000000000AA20
.text:000000000000AA20 ; =============== S U B R O U T I N E =======================================
.text:000000000000AA20
.text:000000000000AA20
.text:000000000000AA20 re_acquire_state_context proc near      ; CODE XREF: build_trtable+255↓p
.text:000000000000AA20                                         ; build_trtable+9A0↓p ...
.text:000000000000AA20
.text:000000000000AA20 var_54          = dword ptr -54h
.text:000000000000AA20 var_50          = qword ptr -50h
.text:000000000000AA20 var_48          = qword ptr -48h
.text:000000000000AA20 var_40          = qword ptr -40h
.text:000000000000AA20
.text:000000000000AA20 ; __unwind {
.text:000000000000AA20                 push    r15
.text:000000000000AA22                 push    r14
.text:000000000000AA24                 push    r13
.text:000000000000AA26                 push    r12
.text:000000000000AA28                 push    rbp
.text:000000000000AA29                 push    rbx
.text:000000000000AA2A                 sub     rsp, 28h
.text:000000000000AA2E                 mov     r10, [rdx+8]
.text:000000000000AA32                 test    r10, r10
.text:000000000000AA35                 jz      loc_ACBF
.text:000000000000AA3B                 mov     r8d, ecx
.text:000000000000AA3E                 test    r10, r10
.text:000000000000AA41                 lea     r12, [r8+r10]
.text:000000000000AA45                 jle     short loc_AA5C
.text:000000000000AA47                 mov     rax, [rdx+10h]
.text:000000000000AA4B                 lea     r10, [rax+r10*8]
.text:000000000000AA4F                 nop
.text:000000000000AA50
.text:000000000000AA50 loc_AA50:                               ; CODE XREF: re_acquire_state_context+3A↓j
.text:000000000000AA50                 add     r12, [rax]
.text:000000000000AA53                 add     rax, 8
.text:000000000000AA57                 cmp     r10, rax
.text:000000000000AA5A                 jnz     short loc_AA50
.text:000000000000AA5C
.text:000000000000AA5C loc_AA5C:                               ; CODE XREF: re_acquire_state_context+25↑j
.text:000000000000AA5C                 mov     rax, [rsi+88h]
.text:000000000000AA63                 mov     rbp, rdx
.text:000000000000AA66                 mov     [rsp+58h+var_54], ecx
.text:000000000000AA6A                 mov     r13, rsi
.text:000000000000AA6D                 mov     [rsp+58h+var_40], rdi
.text:000000000000AA72                 and     rax, r12
.text:000000000000AA75                 lea     rdx, [rax+rax*2]
.text:000000000000AA79                 mov     rax, [rsi+40h]
.text:000000000000AA7D                 lea     rax, [rax+rdx*8]
.text:000000000000AA81                 mov     r11, [rax]
.text:000000000000AA84                 test    r11, r11
.text:000000000000AA87                 jle     short loc_AAE0
.text:000000000000AA89                 mov     rbx, [rax+10h]
.text:000000000000AA8D                 xor     r10d, r10d
.text:000000000000AA90                 mov     r9d, ecx
.text:000000000000AA93                 jmp     short loc_AAA1
.text:000000000000AA93 ; ---------------------------------------------------------------------------
.text:000000000000AA95                 align 8
.text:000000000000AA98
.text:000000000000AA98 loc_AA98:                               ; CODE XREF: re_acquire_state_context+88↓j
.text:000000000000AA98                                         ; re_acquire_state_context+95↓j ...
.text:000000000000AA98                 add     r10, 1
.text:000000000000AA9C                 cmp     r10, r11
.text:000000000000AA9F                 jz      short loc_AAE0
.text:000000000000AAA1
.text:000000000000AAA1 loc_AAA1:                               ; CODE XREF: re_acquire_state_context+73↑j
.text:000000000000AAA1                 mov     r14, [rbx+r10*8]
.text:000000000000AAA5                 cmp     [r14], r12
.text:000000000000AAA8                 jnz     short loc_AA98
.text:000000000000AAAA                 movzx   eax, byte ptr [r14+68h]
.text:000000000000AAAF                 and     eax, 0Fh
.text:000000000000AAB2                 cmp     eax, r9d
.text:000000000000AAB5                 jnz     short loc_AA98
.text:000000000000AAB7                 mov     rdi, [r14+50h]
.text:000000000000AABB                 test    rdi, rdi
.text:000000000000AABE                 jz      short loc_AA98
.text:000000000000AAC0                 mov     rsi, rbp
.text:000000000000AAC3                 call    re_node_set_compare_part_2
.text:000000000000AAC8                 test    al, al
.text:000000000000AACA                 jz      short loc_AA98
.text:000000000000AACC
.text:000000000000AACC loc_AACC:                               ; CODE XREF: re_acquire_state_context+208↓j
.text:000000000000AACC                                         ; re_acquire_state_context+224↓j ...
.text:000000000000AACC                 add     rsp, 28h
.text:000000000000AAD0                 mov     rax, r14
.text:000000000000AAD3                 pop     rbx
.text:000000000000AAD4                 pop     rbp
.text:000000000000AAD5                 pop     r12
.text:000000000000AAD7                 pop     r13
.text:000000000000AAD9                 pop     r14
.text:000000000000AADB                 pop     r15
.text:000000000000AADD                 retn
.text:000000000000AADD ; ---------------------------------------------------------------------------
.text:000000000000AADE                 align 20h
.text:000000000000AAE0
.text:000000000000AAE0 loc_AAE0:                               ; CODE XREF: re_acquire_state_context+67↑j
.text:000000000000AAE0                                         ; re_acquire_state_context+7F↑j
.text:000000000000AAE0                 mov     esi, 1          ; size
.text:000000000000AAE5                 mov     edi, 70h ; 'p'  ; nmemb
.text:000000000000AAEA                 call    _calloc
.text:000000000000AAEF                 test    rax, rax
.text:000000000000AAF2                 mov     r14, rax
.text:000000000000AAF5                 jz      loc_AC36
.text:000000000000AAFB                 lea     rax, [rax+8]
.text:000000000000AAFF                 mov     rsi, rbp
.text:000000000000AB02                 mov     rdi, rax
.text:000000000000AB05                 mov     rbx, rax
.text:000000000000AB08                 call    re_node_set_init_copy
.text:000000000000AB0D                 test    eax, eax
.text:000000000000AB0F                 jnz     loc_ACCD
.text:000000000000AB15                 movzx   eax, byte ptr [r14+68h]
.text:000000000000AB1A                 movzx   edx, byte ptr [rsp+58h+var_54]
.text:000000000000AB1F                 mov     [r14+50h], rbx
.text:000000000000AB23                 and     edx, 0Fh
.text:000000000000AB26                 and     eax, 0FFFFFFF0h
.text:000000000000AB29                 or      eax, edx
.text:000000000000AB2B                 cmp     qword ptr [rbp+8], 0
.text:000000000000AB30                 mov     [r14+68h], al
.text:000000000000AB34                 jle     loc_AC18
.text:000000000000AB3A                 lea     rcx, [r14+18h]
.text:000000000000AB3E                 xor     r15d, r15d
.text:000000000000AB41                 mov     [rsp+58h+var_48], r12
.text:000000000000AB46                 xor     r10d, r10d
.text:000000000000AB49                 mov     r12, r13
.text:000000000000AB4C                 mov     r13, r15
.text:000000000000AB4F                 mov     [rsp+58h+var_50], rcx
.text:000000000000AB54                 mov     r15, rbx
.text:000000000000AB57                 nop     word ptr [rax+rax+00000000h]
.text:000000000000AB60
.text:000000000000AB60 loc_AB60:                               ; CODE XREF: re_acquire_state_context+1EA↓j
.text:000000000000AB60                 mov     rax, [rbp+10h]
.text:000000000000AB64                 mov     rax, [rax+r13*8]
.text:000000000000AB68                 shl     rax, 4
.text:000000000000AB6C                 add     rax, [r12]
.text:000000000000AB70                 movzx   esi, byte ptr [rax+8]
.text:000000000000AB74                 mov     ebx, [rax+8]
.text:000000000000AB77                 shr     ebx, 8
.text:000000000000AB7A                 and     bx, 3FFh
.text:000000000000AB7F                 cmp     esi, 1
.text:000000000000AB82                 movzx   edi, bx
.text:000000000000AB85                 jnz     short loc_AB8B
.text:000000000000AB87                 test    edi, edi
.text:000000000000AB89                 jz      short loc_AC02
.text:000000000000AB8B
.text:000000000000AB8B loc_AB8B:                               ; CODE XREF: re_acquire_state_context+165↑j
.text:000000000000AB8B                 movzx   edx, byte ptr [r14+68h]
.text:000000000000AB90                 movzx   eax, byte ptr [rax+0Ah]
.text:000000000000AB94                 mov     r9d, edx
.text:000000000000AB97                 shr     al, 4
.text:000000000000AB9A                 and     edx, 0FFFFFFDFh
.text:000000000000AB9D                 shr     r9b, 5
.text:000000000000ABA1                 or      eax, r9d
.text:000000000000ABA4                 and     eax, 1
.text:000000000000ABA7                 shl     eax, 5
.text:000000000000ABAA                 or      eax, edx
.text:000000000000ABAC                 cmp     esi, 2
.text:000000000000ABAF                 mov     [r14+68h], al
.text:000000000000ABB3                 jz      loc_AC80
.text:000000000000ABB9                 cmp     esi, 4
.text:000000000000ABBC                 jnz     short loc_ABC5
.text:000000000000ABBE                 or      eax, 40h
.text:000000000000ABC1                 mov     [r14+68h], al
.text:000000000000ABC5
.text:000000000000ABC5 loc_ABC5:                               ; CODE XREF: re_acquire_state_context+19C↑j
.text:000000000000ABC5                                         ; re_acquire_state_context+267↓j
.text:000000000000ABC5                 test    edi, edi
.text:000000000000ABC7                 jz      short loc_AC02
.text:000000000000ABC9                 cmp     r15, [r14+50h]
.text:000000000000ABCD                 jz      loc_AC90
.text:000000000000ABD3
.text:000000000000ABD3 loc_ABD3:                               ; CODE XREF: re_acquire_state_context+29A↓j
.text:000000000000ABD3                 test    bl, 1
.text:000000000000ABD6                 jz      short loc_AC50
.text:000000000000ABD8                 test    byte ptr [rsp+58h+var_54], 1
.text:000000000000ABDD                 jz      short loc_ABE8
.text:000000000000ABDF                 test    bl, 2
.text:000000000000ABE2                 jz      short loc_AC5C
.text:000000000000ABE4                 nop     dword ptr [rax+00h]
.text:000000000000ABE8
.text:000000000000ABE8 loc_ABE8:                               ; CODE XREF: re_acquire_state_context+1BD↑j
.text:000000000000ABE8                                         ; re_acquire_state_context+23A↓j ...
.text:000000000000ABE8                 mov     rdx, r13
.text:000000000000ABEB                 sub     rdx, r10
.text:000000000000ABEE                 js      short loc_ABFE
.text:000000000000ABF0                 mov     rsi, [rsp+58h+var_50]
.text:000000000000ABF5                 lea     rdi, [r14+10h]
.text:000000000000ABF9                 call    re_node_set_remove_at_isra_4_part_5
.text:000000000000ABFE
.text:000000000000ABFE loc_ABFE:                               ; CODE XREF: re_acquire_state_context+1CE↑j
.text:000000000000ABFE                 add     r10, 1
.text:000000000000AC02
.text:000000000000AC02 loc_AC02:                               ; CODE XREF: re_acquire_state_context+169↑j
.text:000000000000AC02                                         ; re_acquire_state_context+1A7↑j ...
.text:000000000000AC02                 add     r13, 1
.text:000000000000AC06                 cmp     r13, [rbp+8]
.text:000000000000AC0A                 jl      loc_AB60
.text:000000000000AC10                 mov     r13, r12
.text:000000000000AC13                 mov     r12, [rsp+58h+var_48]
.text:000000000000AC18
.text:000000000000AC18 loc_AC18:                               ; CODE XREF: re_acquire_state_context+114↑j
.text:000000000000AC18                 mov     rdx, r12
.text:000000000000AC1B                 mov     rsi, r14
.text:000000000000AC1E                 mov     rdi, r13
.text:000000000000AC21                 call    register_state
.text:000000000000AC26                 test    eax, eax
.text:000000000000AC28                 jz      loc_AACC
.text:000000000000AC2E
.text:000000000000AC2E loc_AC2E:                               ; CODE XREF: re_acquire_state_context+281↓j
.text:000000000000AC2E                 mov     rdi, r14        ; ptr
.text:000000000000AC31                 call    free_state
.text:000000000000AC36
.text:000000000000AC36 loc_AC36:                               ; CODE XREF: re_acquire_state_context+D5↑j
.text:000000000000AC36                                         ; re_acquire_state_context+290↓j ...
.text:000000000000AC36                 mov     rax, [rsp+58h+var_40]
.text:000000000000AC3B                 xor     r14d, r14d
.text:000000000000AC3E                 mov     dword ptr [rax], 0Ch
.text:000000000000AC44                 jmp     loc_AACC
.text:000000000000AC44 ; ---------------------------------------------------------------------------
.text:000000000000AC49                 align 10h
.text:000000000000AC50
.text:000000000000AC50 loc_AC50:                               ; CODE XREF: re_acquire_state_context+1B6↑j
.text:000000000000AC50                 test    bl, 2
.text:000000000000AC53                 jz      short loc_AC5C
.text:000000000000AC55                 test    byte ptr [rsp+58h+var_54], 1
.text:000000000000AC5A                 jnz     short loc_ABE8
.text:000000000000AC5C
.text:000000000000AC5C loc_AC5C:                               ; CODE XREF: re_acquire_state_context+1C2↑j
.text:000000000000AC5C                                         ; re_acquire_state_context+233↑j
.text:000000000000AC5C                 test    bl, 10h
.text:000000000000AC5F                 jz      short loc_AC68
.text:000000000000AC61                 test    byte ptr [rsp+58h+var_54], 2
.text:000000000000AC66                 jz      short loc_ABE8
.text:000000000000AC68
.text:000000000000AC68 loc_AC68:                               ; CODE XREF: re_acquire_state_context+23F↑j
.text:000000000000AC68                 and     ebx, 40h
.text:000000000000AC6B                 jz      short loc_AC02
.text:000000000000AC6D                 test    byte ptr [rsp+58h+var_54], 4
.text:000000000000AC72                 jnz     short loc_AC02
.text:000000000000AC74                 jmp     loc_ABE8
.text:000000000000AC74 ; ---------------------------------------------------------------------------
.text:000000000000AC79                 align 20h
.text:000000000000AC80
.text:000000000000AC80 loc_AC80:                               ; CODE XREF: re_acquire_state_context+193↑j
.text:000000000000AC80                 or      eax, 10h
.text:000000000000AC83                 mov     [r14+68h], al
.text:000000000000AC87                 jmp     loc_ABC5
.text:000000000000AC87 ; ---------------------------------------------------------------------------
.text:000000000000AC8C                 align 10h
.text:000000000000AC90
.text:000000000000AC90 loc_AC90:                               ; CODE XREF: re_acquire_state_context+1AD↑j
.text:000000000000AC90                 mov     edi, 18h        ; size
.text:000000000000AC95                 call    _malloc
.text:000000000000AC9A                 test    rax, rax
.text:000000000000AC9D                 mov     [r14+50h], rax
.text:000000000000ACA1                 jz      short loc_AC2E
.text:000000000000ACA3                 mov     rsi, rbp
.text:000000000000ACA6                 mov     rdi, rax
.text:000000000000ACA9                 call    re_node_set_init_copy
.text:000000000000ACAE                 test    eax, eax
.text:000000000000ACB0                 jnz     short loc_AC36
.text:000000000000ACB2                 or      byte ptr [r14+68h], 80h
.text:000000000000ACB7                 xor     r10d, r10d
.text:000000000000ACBA                 jmp     loc_ABD3
.text:000000000000ACBF ; ---------------------------------------------------------------------------
.text:000000000000ACBF
.text:000000000000ACBF loc_ACBF:                               ; CODE XREF: re_acquire_state_context+15↑j
.text:000000000000ACBF                 mov     dword ptr [rdi], 0
.text:000000000000ACC5                 xor     r14d, r14d
.text:000000000000ACC8                 jmp     loc_AACC
.text:000000000000ACCD ; ---------------------------------------------------------------------------
.text:000000000000ACCD
.text:000000000000ACCD loc_ACCD:                               ; CODE XREF: re_acquire_state_context+EF↑j
.text:000000000000ACCD                 mov     rdi, r14        ; ptr
.text:000000000000ACD0                 call    _free
.text:000000000000ACD5                 jmp     loc_AC36
.text:000000000000ACD5 ; } // starts at AA20
.text:000000000000ACD5 re_acquire_state_context endp
.text:000000000000ACD5
.text:000000000000ACD5 ; ---------------------------------------------------------------------------
.text:000000000000ACDA                 align 20h
.text:000000000000ACE0
.text:000000000000ACE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ACE0
.text:000000000000ACE0
.text:000000000000ACE0 re_acquire_state proc near              ; CODE XREF: merge_state_array+78↓p
.text:000000000000ACE0                                         ; expand_bkref_cache+1D0↓p ...
.text:000000000000ACE0 ; __unwind {
.text:000000000000ACE0                 push    r15
.text:000000000000ACE2                 push    r14
.text:000000000000ACE4                 push    r13
.text:000000000000ACE6                 push    r12
.text:000000000000ACE8                 push    rbp
.text:000000000000ACE9                 push    rbx
.text:000000000000ACEA                 sub     rsp, 8
.text:000000000000ACEE                 mov     rbp, [rdx+8]
.text:000000000000ACF2                 test    rbp, rbp
.text:000000000000ACF5                 jz      loc_AED0
.text:000000000000ACFB                 test    rbp, rbp
.text:000000000000ACFE                 jle     short loc_AD1C
.text:000000000000AD00                 mov     rax, [rdx+10h]
.text:000000000000AD04                 lea     rcx, [rax+rbp*8]
.text:000000000000AD08                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000AD10
.text:000000000000AD10 loc_AD10:                               ; CODE XREF: re_acquire_state+3A↓j
.text:000000000000AD10                 add     rbp, [rax]
.text:000000000000AD13                 add     rax, 8
.text:000000000000AD17                 cmp     rcx, rax
.text:000000000000AD1A                 jnz     short loc_AD10
.text:000000000000AD1C
.text:000000000000AD1C loc_AD1C:                               ; CODE XREF: re_acquire_state+1E↑j
.text:000000000000AD1C                 mov     rax, [rsi+88h]
.text:000000000000AD23                 mov     r14, rdx
.text:000000000000AD26                 mov     r12, rsi
.text:000000000000AD29                 mov     r13, rdi
.text:000000000000AD2C                 and     rax, rbp
.text:000000000000AD2F                 lea     rdx, [rax+rax*2]
.text:000000000000AD33                 mov     rax, [rsi+40h]
.text:000000000000AD37                 lea     rax, [rax+rdx*8]
.text:000000000000AD3B                 mov     r10, [rax]
.text:000000000000AD3E                 test    r10, r10
.text:000000000000AD41                 jle     short loc_AD76
.text:000000000000AD43                 mov     r11, [rax+10h]
.text:000000000000AD47                 xor     r9d, r9d
.text:000000000000AD4A                 nop     word ptr [rax+rax+00h]
.text:000000000000AD50
.text:000000000000AD50 loc_AD50:                               ; CODE XREF: re_acquire_state+94↓j
.text:000000000000AD50                 mov     rbx, [r11+r9*8]
.text:000000000000AD54                 cmp     [rbx], rbp
.text:000000000000AD57                 jnz     short loc_AD6D
.text:000000000000AD59                 lea     rdi, [rbx+8]
.text:000000000000AD5D                 mov     rsi, r14
.text:000000000000AD60                 call    re_node_set_compare_part_2
.text:000000000000AD65                 test    al, al
.text:000000000000AD67                 jnz     loc_AE6F
.text:000000000000AD6D
.text:000000000000AD6D loc_AD6D:                               ; CODE XREF: re_acquire_state+77↑j
.text:000000000000AD6D                 add     r9, 1
.text:000000000000AD71                 cmp     r10, r9
.text:000000000000AD74                 jnz     short loc_AD50
.text:000000000000AD76
.text:000000000000AD76 loc_AD76:                               ; CODE XREF: re_acquire_state+61↑j
.text:000000000000AD76                 mov     esi, 1          ; size
.text:000000000000AD7B                 mov     edi, 70h ; 'p'  ; nmemb
.text:000000000000AD80                 call    _calloc
.text:000000000000AD85                 test    rax, rax
.text:000000000000AD88                 mov     rbx, rax
.text:000000000000AD8B                 jz      loc_AEB8
.text:000000000000AD91                 lea     r15, [rax+8]
.text:000000000000AD95                 mov     rsi, r14
.text:000000000000AD98                 mov     rdi, r15
.text:000000000000AD9B                 call    re_node_set_init_copy
.text:000000000000ADA0                 test    eax, eax
.text:000000000000ADA2                 jnz     loc_AEB0
.text:000000000000ADA8                 mov     rax, [r14+8]
.text:000000000000ADAC                 mov     [rbx+50h], r15
.text:000000000000ADB0                 test    rax, rax
.text:000000000000ADB3                 jle     loc_AE5D
.text:000000000000ADB9                 mov     rsi, [r14+10h]
.text:000000000000ADBD                 mov     r8, [r12]
.text:000000000000ADC1                 lea     r9, [rsi+rax*8]
.text:000000000000ADC5                 jmp     short loc_AE14
.text:000000000000ADC5 ; ---------------------------------------------------------------------------
.text:000000000000ADC7                 align 10h
.text:000000000000ADD0
.text:000000000000ADD0 loc_ADD0:                               ; CODE XREF: re_acquire_state+145↓j
.text:000000000000ADD0                 movzx   ecx, byte ptr [rbx+68h]
.text:000000000000ADD4                 movzx   edx, byte ptr [rax+0Ah]
.text:000000000000ADD8                 mov     r10d, ecx
.text:000000000000ADDB                 shr     dl, 4
.text:000000000000ADDE                 and     ecx, 0FFFFFFDFh
.text:000000000000ADE1                 shr     r10b, 5
.text:000000000000ADE5                 or      edx, r10d
.text:000000000000ADE8                 and     edx, 1
.text:000000000000ADEB                 shl     edx, 5
.text:000000000000ADEE                 or      edx, ecx
.text:000000000000ADF0                 cmp     edi, 2
.text:000000000000ADF3                 mov     [rbx+68h], dl
.text:000000000000ADF6                 jz      loc_AE88
.text:000000000000ADFC                 cmp     edi, 4
.text:000000000000ADFF                 jnz     loc_AE98
.text:000000000000AE05                 or      edx, 40h
.text:000000000000AE08                 mov     [rbx+68h], dl
.text:000000000000AE0B
.text:000000000000AE0B loc_AE0B:                               ; CODE XREF: re_acquire_state+14E↓j
.text:000000000000AE0B                                         ; re_acquire_state+1AE↓j ...
.text:000000000000AE0B                 add     rsi, 8
.text:000000000000AE0F                 cmp     r9, rsi
.text:000000000000AE12                 jz      short loc_AE5D
.text:000000000000AE14
.text:000000000000AE14 loc_AE14:                               ; CODE XREF: re_acquire_state+E5↑j
.text:000000000000AE14                                         ; re_acquire_state+17B↓j
.text:000000000000AE14                 mov     rax, [rsi]
.text:000000000000AE17                 shl     rax, 4
.text:000000000000AE1B                 add     rax, r8
.text:000000000000AE1E                 movzx   edi, byte ptr [rax+8]
.text:000000000000AE22                 cmp     edi, 1
.text:000000000000AE25                 jnz     short loc_ADD0
.text:000000000000AE27                 test    dword ptr [rax+8], 3FF00h
.text:000000000000AE2E                 jz      short loc_AE0B
.text:000000000000AE30                 movzx   edx, byte ptr [rbx+68h]
.text:000000000000AE34                 movzx   eax, byte ptr [rax+0Ah]
.text:000000000000AE38                 mov     ecx, edx
.text:000000000000AE3A                 shr     al, 4
.text:000000000000AE3D                 and     edx, 0FFFFFFDFh
.text:000000000000AE40                 shr     cl, 5
.text:000000000000AE43                 or      eax, ecx
.text:000000000000AE45                 and     eax, 1
.text:000000000000AE48                 shl     eax, 5
.text:000000000000AE4B                 or      eax, edx
.text:000000000000AE4D                 mov     [rbx+68h], al
.text:000000000000AE50
.text:000000000000AE50 loc_AE50:                               ; CODE XREF: re_acquire_state+1BB↓j
.text:000000000000AE50                                         ; re_acquire_state+1CA↓j
.text:000000000000AE50                 add     rsi, 8
.text:000000000000AE54                 or      byte ptr [rbx+68h], 80h
.text:000000000000AE58                 cmp     r9, rsi
.text:000000000000AE5B                 jnz     short loc_AE14
.text:000000000000AE5D
.text:000000000000AE5D loc_AE5D:                               ; CODE XREF: re_acquire_state+D3↑j
.text:000000000000AE5D                                         ; re_acquire_state+132↑j
.text:000000000000AE5D                 mov     rdx, rbp
.text:000000000000AE60                 mov     rsi, rbx
.text:000000000000AE63                 mov     rdi, r12
.text:000000000000AE66                 call    register_state
.text:000000000000AE6B                 test    eax, eax
.text:000000000000AE6D                 jnz     short loc_AEC4
.text:000000000000AE6F
.text:000000000000AE6F loc_AE6F:                               ; CODE XREF: re_acquire_state+87↑j
.text:000000000000AE6F                                         ; re_acquire_state+1E2↓j ...
.text:000000000000AE6F                 add     rsp, 8
.text:000000000000AE73                 mov     rax, rbx
.text:000000000000AE76                 pop     rbx
.text:000000000000AE77                 pop     rbp
.text:000000000000AE78                 pop     r12
.text:000000000000AE7A                 pop     r13
.text:000000000000AE7C                 pop     r14
.text:000000000000AE7E                 pop     r15
.text:000000000000AE80                 retn
.text:000000000000AE80 ; ---------------------------------------------------------------------------
.text:000000000000AE81                 align 8
.text:000000000000AE88
.text:000000000000AE88 loc_AE88:                               ; CODE XREF: re_acquire_state+116↑j
.text:000000000000AE88                 or      edx, 10h
.text:000000000000AE8B                 mov     [rbx+68h], dl
.text:000000000000AE8E                 jmp     loc_AE0B
.text:000000000000AE8E ; ---------------------------------------------------------------------------
.text:000000000000AE93                 align 8
.text:000000000000AE98
.text:000000000000AE98 loc_AE98:                               ; CODE XREF: re_acquire_state+11F↑j
.text:000000000000AE98                 cmp     edi, 0Ch
.text:000000000000AE9B                 jz      short loc_AE50
.text:000000000000AE9D                 test    dword ptr [rax+8], 3FF00h
.text:000000000000AEA4                 jz      loc_AE0B
.text:000000000000AEAA                 jmp     short loc_AE50
.text:000000000000AEAA ; ---------------------------------------------------------------------------
.text:000000000000AEAC                 align 10h
.text:000000000000AEB0
.text:000000000000AEB0 loc_AEB0:                               ; CODE XREF: re_acquire_state+C2↑j
.text:000000000000AEB0                 mov     rdi, rbx        ; ptr
.text:000000000000AEB3                 call    _free
.text:000000000000AEB8
.text:000000000000AEB8 loc_AEB8:                               ; CODE XREF: re_acquire_state+AB↑j
.text:000000000000AEB8                                         ; re_acquire_state+1EC↓j
.text:000000000000AEB8                 mov     dword ptr [r13+0], 0Ch
.text:000000000000AEC0                 xor     ebx, ebx
.text:000000000000AEC2                 jmp     short loc_AE6F
.text:000000000000AEC4 ; ---------------------------------------------------------------------------
.text:000000000000AEC4
.text:000000000000AEC4 loc_AEC4:                               ; CODE XREF: re_acquire_state+18D↑j
.text:000000000000AEC4                 mov     rdi, rbx        ; ptr
.text:000000000000AEC7                 call    free_state
.text:000000000000AECC                 jmp     short loc_AEB8
.text:000000000000AECC ; ---------------------------------------------------------------------------
.text:000000000000AECE                 align 10h
.text:000000000000AED0
.text:000000000000AED0 loc_AED0:                               ; CODE XREF: re_acquire_state+15↑j
.text:000000000000AED0                 mov     dword ptr [rdi], 0
.text:000000000000AED6                 xor     ebx, ebx
.text:000000000000AED8                 jmp     short loc_AE6F
.text:000000000000AED8 ; } // starts at ACE0
.text:000000000000AED8 re_acquire_state endp
.text:000000000000AED8
.text:000000000000AED8 ; ---------------------------------------------------------------------------
.text:000000000000AEDA                 align 20h
.text:000000000000AEE0
.text:000000000000AEE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AEE0
.text:000000000000AEE0
.text:000000000000AEE0 merge_state_array proc near             ; CODE XREF: re_search_internal+167B↓p
.text:000000000000AEE0                                         ; update_cur_sifted_state+71B↓p
.text:000000000000AEE0
.text:000000000000AEE0 var_70          = qword ptr -70h
.text:000000000000AEE0 var_5C          = dword ptr -5Ch
.text:000000000000AEE0 var_58          = byte ptr -58h
.text:000000000000AEE0 ptr             = qword ptr -48h
.text:000000000000AEE0 var_40          = qword ptr -40h
.text:000000000000AEE0
.text:000000000000AEE0 ; __unwind {
.text:000000000000AEE0                 push    r15
.text:000000000000AEE2                 push    r14
.text:000000000000AEE4                 push    r13
.text:000000000000AEE6                 push    r12
.text:000000000000AEE8                 push    rbp
.text:000000000000AEE9                 push    rbx
.text:000000000000AEEA                 sub     rsp, 48h
.text:000000000000AEEE                 mov     rax, fs:28h
.text:000000000000AEF7                 mov     [rsp+78h+var_40], rax
.text:000000000000AEFC                 xor     eax, eax
.text:000000000000AEFE                 test    rcx, rcx
.text:000000000000AF01                 jle     loc_AF96
.text:000000000000AF07                 lea     rax, [rsp+78h+var_5C]
.text:000000000000AF0C                 mov     r14, rdi
.text:000000000000AF0F                 mov     rbx, rsi
.text:000000000000AF12                 mov     r12, rdx
.text:000000000000AF15                 mov     rbp, rcx
.text:000000000000AF18                 xor     r15d, r15d
.text:000000000000AF1B                 lea     r13, [rsp+78h+var_58]
.text:000000000000AF20                 mov     [rsp+78h+var_70], rax
.text:000000000000AF25                 jmp     short loc_AF7C
.text:000000000000AF25 ; ---------------------------------------------------------------------------
.text:000000000000AF27                 align 10h
.text:000000000000AF30
.text:000000000000AF30 loc_AF30:                               ; CODE XREF: merge_state_array+A7↓j
.text:000000000000AF30                 test    rdx, rdx
.text:000000000000AF33                 jz      short loc_AF73
.text:000000000000AF35                 add     rdx, 8
.text:000000000000AF39                 add     rsi, 8
.text:000000000000AF3D                 mov     rdi, r13
.text:000000000000AF40                 call    re_node_set_init_union
.text:000000000000AF45                 test    eax, eax
.text:000000000000AF47                 mov     [rsp+78h+var_5C], eax
.text:000000000000AF4B                 jnz     short loc_AF98
.text:000000000000AF4D                 mov     rdi, [rsp+78h+var_70]
.text:000000000000AF52                 mov     rdx, r13
.text:000000000000AF55                 mov     rsi, r14
.text:000000000000AF58                 call    re_acquire_state
.text:000000000000AF5D                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000AF62                 mov     [rbx+r15*8], rax
.text:000000000000AF66                 call    _free
.text:000000000000AF6B                 mov     eax, [rsp+78h+var_5C]
.text:000000000000AF6F                 test    eax, eax
.text:000000000000AF71                 jnz     short loc_AF98
.text:000000000000AF73
.text:000000000000AF73 loc_AF73:                               ; CODE XREF: merge_state_array+53↑j
.text:000000000000AF73                 add     r15, 1
.text:000000000000AF77                 cmp     rbp, r15
.text:000000000000AF7A                 jz      short loc_AF96
.text:000000000000AF7C
.text:000000000000AF7C loc_AF7C:                               ; CODE XREF: merge_state_array+45↑j
.text:000000000000AF7C                                         ; merge_state_array+B4↓j
.text:000000000000AF7C                 mov     rsi, [rbx+r15*8]
.text:000000000000AF80                 mov     rdx, [r12+r15*8]
.text:000000000000AF84                 test    rsi, rsi
.text:000000000000AF87                 jnz     short loc_AF30
.text:000000000000AF89                 mov     [rbx+r15*8], rdx
.text:000000000000AF8D                 add     r15, 1
.text:000000000000AF91                 cmp     rbp, r15
.text:000000000000AF94                 jnz     short loc_AF7C
.text:000000000000AF96
.text:000000000000AF96 loc_AF96:                               ; CODE XREF: merge_state_array+21↑j
.text:000000000000AF96                                         ; merge_state_array+9A↑j
.text:000000000000AF96                 xor     eax, eax
.text:000000000000AF98
.text:000000000000AF98 loc_AF98:                               ; CODE XREF: merge_state_array+6B↑j
.text:000000000000AF98                                         ; merge_state_array+91↑j
.text:000000000000AF98                 mov     rcx, [rsp+78h+var_40]
.text:000000000000AF9D                 xor     rcx, fs:28h
.text:000000000000AFA6                 jnz     short loc_AFB7
.text:000000000000AFA8                 add     rsp, 48h
.text:000000000000AFAC                 pop     rbx
.text:000000000000AFAD                 pop     rbp
.text:000000000000AFAE                 pop     r12
.text:000000000000AFB0                 pop     r13
.text:000000000000AFB2                 pop     r14
.text:000000000000AFB4                 pop     r15
.text:000000000000AFB6                 retn
.text:000000000000AFB7 ; ---------------------------------------------------------------------------
.text:000000000000AFB7
.text:000000000000AFB7 loc_AFB7:                               ; CODE XREF: merge_state_array+C6↑j
.text:000000000000AFB7                 call    ___stack_chk_fail
.text:000000000000AFB7 ; } // starts at AEE0
.text:000000000000AFB7 merge_state_array endp
.text:000000000000AFB7
.text:000000000000AFB7 ; ---------------------------------------------------------------------------
.text:000000000000AFBC                 align 20h
.text:000000000000AFC0
.text:000000000000AFC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AFC0
.text:000000000000AFC0
.text:000000000000AFC0 expand_bkref_cache proc near            ; CODE XREF: check_arrival+3A0↓p
.text:000000000000AFC0                                         ; check_arrival+64E↓p
.text:000000000000AFC0
.text:000000000000AFC0 var_A8          = qword ptr -0A8h
.text:000000000000AFC0 var_A0          = qword ptr -0A0h
.text:000000000000AFC0 var_98          = qword ptr -98h
.text:000000000000AFC0 var_90          = qword ptr -90h
.text:000000000000AFC0 var_88          = qword ptr -88h
.text:000000000000AFC0 var_7C          = dword ptr -7Ch
.text:000000000000AFC0 var_78          = qword ptr -78h
.text:000000000000AFC0 var_70          = qword ptr -70h
.text:000000000000AFC0 var_5C          = dword ptr -5Ch
.text:000000000000AFC0 var_58          = qword ptr -58h
.text:000000000000AFC0 var_50          = qword ptr -50h
.text:000000000000AFC0 ptr             = qword ptr -48h
.text:000000000000AFC0 var_40          = qword ptr -40h
.text:000000000000AFC0
.text:000000000000AFC0 ; __unwind {
.text:000000000000AFC0                 push    r15
.text:000000000000AFC2                 push    r14
.text:000000000000AFC4                 push    r13
.text:000000000000AFC6                 push    r12
.text:000000000000AFC8                 mov     r12, rdx
.text:000000000000AFCB                 push    rbp
.text:000000000000AFCC                 push    rbx
.text:000000000000AFCD                 mov     rbx, rdi
.text:000000000000AFD0                 mov     rbp, rsi
.text:000000000000AFD3                 xor     esi, esi
.text:000000000000AFD5                 sub     rsp, 78h
.text:000000000000AFD9                 mov     rdi, [rdi+0C8h]
.text:000000000000AFE0                 mov     rax, fs:28h
.text:000000000000AFE9                 mov     [rsp+0A8h+var_40], rax
.text:000000000000AFEE                 xor     eax, eax
.text:000000000000AFF0                 mov     [rsp+0A8h+var_88], rcx
.text:000000000000AFF5                 mov     [rsp+0A8h+var_7C], r8d
.text:000000000000AFFA                 mov     rdx, rdi
.text:000000000000AFFD
.text:000000000000AFFD loc_AFFD:                               ; CODE XREF: expand_bkref_cache+F7↓j
.text:000000000000AFFD                 cmp     rsi, rdx
.text:000000000000B000                 jge     short loc_B057
.text:000000000000B002                 lea     rax, [rsi+rdx]
.text:000000000000B006                 mov     r8, [rbx+0D8h]
.text:000000000000B00D                 mov     rcx, rax
.text:000000000000B010                 shr     rcx, 3Fh
.text:000000000000B014                 add     rcx, rax
.text:000000000000B017                 sar     rcx, 1
.text:000000000000B01A                 lea     rax, [rcx+rcx*4]
.text:000000000000B01E                 cmp     r12, [r8+rax*8+8]
.text:000000000000B023                 jle     short loc_B052
.text:000000000000B025                 jmp     loc_B0A8
.text:000000000000B025 ; ---------------------------------------------------------------------------
.text:000000000000B02A                 align 10h
.text:000000000000B030
.text:000000000000B030 loc_B030:                               ; CODE XREF: expand_bkref_cache+95↓j
.text:000000000000B030                 lea     rdx, [rsi+rcx]
.text:000000000000B034                 mov     rax, rdx
.text:000000000000B037                 shr     rax, 3Fh
.text:000000000000B03B                 add     rax, rdx
.text:000000000000B03E                 sar     rax, 1
.text:000000000000B041                 lea     rdx, [rax+rax*4]
.text:000000000000B045                 mov     r9, rax
.text:000000000000B048                 cmp     r12, [r8+rdx*8+8]
.text:000000000000B04D                 jg      short loc_B0B0
.text:000000000000B04F                 mov     rcx, rax
.text:000000000000B052
.text:000000000000B052 loc_B052:                               ; CODE XREF: expand_bkref_cache+63↑j
.text:000000000000B052                 cmp     rsi, rcx
.text:000000000000B055                 jl      short loc_B030
.text:000000000000B057
.text:000000000000B057 loc_B057:                               ; CODE XREF: expand_bkref_cache+40↑j
.text:000000000000B057                 cmp     rdi, rsi
.text:000000000000B05A                 jle     short loc_B07D
.text:000000000000B05C                 mov     rcx, [rbx+0D8h]
.text:000000000000B063                 lea     rax, [rsi+rsi*4]
.text:000000000000B067                 shl     rax, 3
.text:000000000000B06B                 cmp     [rcx+rax+8], r12
.text:000000000000B070                 mov     [rsp+0A8h+var_78], rax
.text:000000000000B075                 jnz     short loc_B07D
.text:000000000000B077                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000B07B                 jnz     short loc_B0C0
.text:000000000000B07D
.text:000000000000B07D loc_B07D:                               ; CODE XREF: expand_bkref_cache+9A↑j
.text:000000000000B07D                                         ; expand_bkref_cache+B5↑j ...
.text:000000000000B07D                 xor     eax, eax
.text:000000000000B07F
.text:000000000000B07F loc_B07F:                               ; CODE XREF: expand_bkref_cache+341↓j
.text:000000000000B07F                                         ; expand_bkref_cache+356↓j ...
.text:000000000000B07F                 mov     rbx, [rsp+0A8h+var_40]
.text:000000000000B084                 xor     rbx, fs:28h
.text:000000000000B08D                 jnz     loc_B359
.text:000000000000B093                 add     rsp, 78h
.text:000000000000B097                 pop     rbx
.text:000000000000B098                 pop     rbp
.text:000000000000B099                 pop     r12
.text:000000000000B09B                 pop     r13
.text:000000000000B09D                 pop     r14
.text:000000000000B09F                 pop     r15
.text:000000000000B0A1                 retn
.text:000000000000B0A1 ; ---------------------------------------------------------------------------
.text:000000000000B0A2                 align 8
.text:000000000000B0A8
.text:000000000000B0A8 loc_B0A8:                               ; CODE XREF: expand_bkref_cache+65↑j
.text:000000000000B0A8                 mov     r9, rcx
.text:000000000000B0AB                 mov     rcx, rdx
.text:000000000000B0AE                 xchg    ax, ax
.text:000000000000B0B0
.text:000000000000B0B0 loc_B0B0:                               ; CODE XREF: expand_bkref_cache+8D↑j
.text:000000000000B0B0                 lea     rsi, [r9+1]
.text:000000000000B0B4                 mov     rdx, rcx
.text:000000000000B0B7                 jmp     loc_AFFD
.text:000000000000B0B7 ; ---------------------------------------------------------------------------
.text:000000000000B0BC                 align 20h
.text:000000000000B0C0
.text:000000000000B0C0 loc_B0C0:                               ; CODE XREF: expand_bkref_cache+BB↑j
.text:000000000000B0C0                 lea     rax, [rbp+10h]
.text:000000000000B0C4                 mov     r13, [rbx+98h]
.text:000000000000B0CB                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000B0CF                 lea     rax, [rsp+0A8h+var_5C]
.text:000000000000B0D4                 mov     [rsp+0A8h+var_70], rax
.text:000000000000B0D9                 lea     rax, [rsp+0A8h+var_58]
.text:000000000000B0DE                 mov     [rsp+0A8h+var_98], rax
.text:000000000000B0E3
.text:000000000000B0E3 loc_B0E3:                               ; CODE XREF: expand_bkref_cache+2E1↓j
.text:000000000000B0E3                 mov     rax, [rsp+0A8h+var_78]
.text:000000000000B0E8                 lea     r15, [rcx+rax]
.text:000000000000B0EC                 jmp     loc_B1C8
.text:000000000000B0EC ; ---------------------------------------------------------------------------
.text:000000000000B0F1                 align 8
.text:000000000000B0F8
.text:000000000000B0F8 loc_B0F8:                               ; CODE XREF: expand_bkref_cache+234↓j
.text:000000000000B0F8                 mov     rax, [r13+18h]
.text:000000000000B0FC                 mov     rcx, [rax+r10*8]
.text:000000000000B100                 mov     r10, [rbx+0B8h]
.text:000000000000B107                 lea     rax, ds:0[r14*8]
.text:000000000000B10F                 mov     [rsp+0A8h+var_90], rax
.text:000000000000B114                 add     r10, rax
.text:000000000000B117                 mov     [rsp+0A8h+var_A0], rcx
.text:000000000000B11C                 mov     r9, [r10]
.text:000000000000B11F                 test    r9, r9
.text:000000000000B122                 jz      loc_B2B0
.text:000000000000B128                 mov     rdi, [r9+10h]
.text:000000000000B12C                 lea     rsi, [r9+18h]
.text:000000000000B130                 mov     rdx, rcx
.text:000000000000B133                 call    re_node_set_contains_isra_3
.text:000000000000B138                 test    rax, rax
.text:000000000000B13B                 jnz     short loc_B1B9
.text:000000000000B13D                 mov     rdi, [rsp+0A8h+var_98]
.text:000000000000B142                 lea     rsi, [r9+8]
.text:000000000000B146                 call    re_node_set_init_copy
.text:000000000000B14B                 mov     rsi, [rsp+0A8h+var_A0]
.text:000000000000B150                 mov     rdi, [rsp+0A8h+var_98]
.text:000000000000B155                 mov     [rsp+0A8h+var_5C], eax
.text:000000000000B159                 call    re_node_set_insert
.text:000000000000B15E                 mov     edx, [rsp+0A8h+var_5C]
.text:000000000000B162                 test    edx, edx
.text:000000000000B164                 jnz     loc_B306
.text:000000000000B16A                 cmp     al, 1
.text:000000000000B16C                 jnz     loc_B306
.text:000000000000B172                 mov     r10, [rsp+0A8h+var_90]
.text:000000000000B177                 add     r10, [rbx+0B8h]
.text:000000000000B17E
.text:000000000000B17E loc_B17E:                               ; CODE XREF: expand_bkref_cache+330↓j
.text:000000000000B17E                 mov     rdx, [rsp+0A8h+var_98]
.text:000000000000B183                 mov     rdi, [rsp+0A8h+var_70]
.text:000000000000B188                 mov     rsi, r13
.text:000000000000B18B                 mov     [rsp+0A8h+var_A0], r10
.text:000000000000B190                 call    re_acquire_state
.text:000000000000B195                 mov     r10, [rsp+0A8h+var_A0]
.text:000000000000B19A                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000B19F                 mov     [r10], rax
.text:000000000000B1A2                 call    _free
.text:000000000000B1A7                 mov     rax, [rbx+0B8h]
.text:000000000000B1AE                 cmp     qword ptr [rax+r14*8], 0
.text:000000000000B1B3                 jz      loc_B2F5
.text:000000000000B1B9
.text:000000000000B1B9 loc_B1B9:                               ; CODE XREF: expand_bkref_cache+17B↑j
.text:000000000000B1B9                                         ; expand_bkref_cache+221↓j ...
.text:000000000000B1B9                 add     r15, 28h ; '('
.text:000000000000B1BD                 cmp     byte ptr [r15-8], 0
.text:000000000000B1C2                 jz      loc_B07D
.text:000000000000B1C8
.text:000000000000B1C8 loc_B1C8:                               ; CODE XREF: expand_bkref_cache+12C↑j
.text:000000000000B1C8                 mov     r10, [r15]
.text:000000000000B1CB                 mov     r9, [rbp+8]
.text:000000000000B1CF                 mov     rsi, [rsp+0A8h+var_A8]
.text:000000000000B1D3                 mov     rdx, r10
.text:000000000000B1D6                 mov     rdi, r9
.text:000000000000B1D9                 call    re_node_set_contains_isra_3
.text:000000000000B1DE                 test    rax, rax
.text:000000000000B1E1                 jz      short loc_B1B9
.text:000000000000B1E3                 mov     r8, [r15+18h]
.text:000000000000B1E7                 add     r8, r12
.text:000000000000B1EA                 mov     r14, r8
.text:000000000000B1ED                 sub     r14, [r15+10h]
.text:000000000000B1F1                 cmp     r12, r14
.text:000000000000B1F4                 jnz     loc_B0F8
.text:000000000000B1FA                 mov     rcx, [r13+28h]
.text:000000000000B1FE                 lea     rax, [r10+r10*2]
.text:000000000000B202                 mov     rsi, [rsp+0A8h+var_A8]
.text:000000000000B206                 mov     rdi, r9
.text:000000000000B209                 lea     rax, [rcx+rax*8]
.text:000000000000B20D                 mov     rax, [rax+10h]
.text:000000000000B211                 mov     r14, [rax]
.text:000000000000B214                 mov     rdx, r14
.text:000000000000B217                 call    re_node_set_contains_isra_3
.text:000000000000B21C                 test    rax, rax
.text:000000000000B21F                 jnz     short loc_B1B9
.text:000000000000B221                 mov     edi, 8          ; size
.text:000000000000B226                 mov     [rsp+0A8h+var_58], 1
.text:000000000000B22F                 mov     [rsp+0A8h+var_50], 1
.text:000000000000B238                 call    _malloc
.text:000000000000B23D                 test    rax, rax
.text:000000000000B240                 mov     [rsp+0A8h+ptr], rax
.text:000000000000B245                 jz      loc_B33D
.text:000000000000B24B                 mov     [rax], r14
.text:000000000000B24E                 xor     eax, eax
.text:000000000000B250
.text:000000000000B250 loc_B250:                               ; CODE XREF: expand_bkref_cache+394↓j
.text:000000000000B250                 mov     r15, [rsp+0A8h+var_98]
.text:000000000000B255                 mov     rdx, [rsp+0A8h+var_88]
.text:000000000000B25A                 mov     rdi, r13
.text:000000000000B25D                 mov     ecx, [rsp+0A8h+var_7C]
.text:000000000000B261                 mov     [rsp+0A8h+var_5C], eax
.text:000000000000B265                 mov     rsi, r15
.text:000000000000B268                 call    check_arrival_expand_ecl
.text:000000000000B26D                 mov     rsi, r15
.text:000000000000B270                 mov     rdi, rbp
.text:000000000000B273                 mov     r14d, eax
.text:000000000000B276                 call    re_node_set_merge
.text:000000000000B27B                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000B280                 mov     r15d, eax
.text:000000000000B283                 call    _free
.text:000000000000B288                 mov     eax, [rsp+0A8h+var_5C]
.text:000000000000B28C                 mov     edx, r14d
.text:000000000000B28F                 or      edx, r15d
.text:000000000000B292                 or      edx, eax
.text:000000000000B294                 jnz     loc_B326
.text:000000000000B29A                 mov     rcx, [rbx+0D8h]
.text:000000000000B2A1                 jmp     loc_B0E3
.text:000000000000B2A1 ; ---------------------------------------------------------------------------
.text:000000000000B2A6                 align 10h
.text:000000000000B2B0
.text:000000000000B2B0 loc_B2B0:                               ; CODE XREF: expand_bkref_cache+162↑j
.text:000000000000B2B0                 mov     edi, 8          ; size
.text:000000000000B2B5                 mov     [rsp+0A8h+var_90], r10
.text:000000000000B2BA                 mov     [rsp+0A8h+var_58], 1
.text:000000000000B2C3                 mov     [rsp+0A8h+var_50], 1
.text:000000000000B2CC                 call    _malloc
.text:000000000000B2D1                 test    rax, rax
.text:000000000000B2D4                 mov     [rsp+0A8h+ptr], rax
.text:000000000000B2D9                 jz      short loc_B31C
.text:000000000000B2DB                 mov     rdi, [rsp+0A8h+var_A0]
.text:000000000000B2E0                 mov     [rsp+0A8h+var_5C], 0
.text:000000000000B2E8                 mov     r10, [rsp+0A8h+var_90]
.text:000000000000B2ED                 mov     [rax], rdi
.text:000000000000B2F0                 jmp     loc_B17E
.text:000000000000B2F5 ; ---------------------------------------------------------------------------
.text:000000000000B2F5
.text:000000000000B2F5 loc_B2F5:                               ; CODE XREF: expand_bkref_cache+1F3↑j
.text:000000000000B2F5                 mov     eax, [rsp+0A8h+var_5C]
.text:000000000000B2F9                 test    eax, eax
.text:000000000000B2FB                 jz      loc_B1B9
.text:000000000000B301                 jmp     loc_B07F
.text:000000000000B306 ; ---------------------------------------------------------------------------
.text:000000000000B306
.text:000000000000B306 loc_B306:                               ; CODE XREF: expand_bkref_cache+1A4↑j
.text:000000000000B306                                         ; expand_bkref_cache+1AC↑j
.text:000000000000B306                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000B30B                 call    _free
.text:000000000000B310                 mov     eax, [rsp+0A8h+var_5C]
.text:000000000000B314                 test    eax, eax
.text:000000000000B316                 jnz     loc_B07F
.text:000000000000B31C
.text:000000000000B31C loc_B31C:                               ; CODE XREF: expand_bkref_cache+319↑j
.text:000000000000B31C                 mov     eax, 0Ch
.text:000000000000B321                 jmp     loc_B07F
.text:000000000000B326 ; ---------------------------------------------------------------------------
.text:000000000000B326
.text:000000000000B326 loc_B326:                               ; CODE XREF: expand_bkref_cache+2D4↑j
.text:000000000000B326                 test    eax, eax
.text:000000000000B328                 jnz     loc_B07F
.text:000000000000B32E                 test    r14d, r14d
.text:000000000000B331                 mov     eax, r14d
.text:000000000000B334                 cmovz   eax, r15d
.text:000000000000B338                 jmp     loc_B07F
.text:000000000000B33D ; ---------------------------------------------------------------------------
.text:000000000000B33D
.text:000000000000B33D loc_B33D:                               ; CODE XREF: expand_bkref_cache+285↑j
.text:000000000000B33D                 mov     [rsp+0A8h+var_50], 0
.text:000000000000B346                 mov     [rsp+0A8h+var_58], 0
.text:000000000000B34F                 mov     eax, 0Ch
.text:000000000000B354                 jmp     loc_B250
.text:000000000000B359 ; ---------------------------------------------------------------------------
.text:000000000000B359
.text:000000000000B359 loc_B359:                               ; CODE XREF: expand_bkref_cache+CD↑j
.text:000000000000B359                 call    ___stack_chk_fail
.text:000000000000B359 ; } // starts at AFC0
.text:000000000000B359 expand_bkref_cache endp
.text:000000000000B359
.text:000000000000B359 ; ---------------------------------------------------------------------------
.text:000000000000B35E                 align 20h
.text:000000000000B360
.text:000000000000B360 ; =============== S U B R O U T I N E =======================================
.text:000000000000B360
.text:000000000000B360
.text:000000000000B360 check_subexp_matching_top_isra_18 proc near
.text:000000000000B360                                         ; CODE XREF: transit_state_bkref_isra_34+808↓p
.text:000000000000B360                                         ; merge_state_with_log+1A1↓p ...
.text:000000000000B360
.text:000000000000B360 var_50          = qword ptr -50h
.text:000000000000B360 var_48          = qword ptr -48h
.text:000000000000B360 var_40          = qword ptr -40h
.text:000000000000B360
.text:000000000000B360 ; __unwind {
.text:000000000000B360                 push    r15
.text:000000000000B362                 push    r14
.text:000000000000B364                 push    r13
.text:000000000000B366                 push    r12
.text:000000000000B368                 push    rbp
.text:000000000000B369                 push    rbx
.text:000000000000B36A                 sub     rsp, 28h
.text:000000000000B36E                 cmp     qword ptr [rsi], 0
.text:000000000000B372                 mov     r13, [rdi+98h]
.text:000000000000B379                 jle     loc_B440
.text:000000000000B37F                 mov     r14, rdx
.text:000000000000B382                 mov     r12, rsi
.text:000000000000B385                 mov     r15, rdi
.text:000000000000B388                 xor     ebx, ebx
.text:000000000000B38A                 jmp     short loc_B39E
.text:000000000000B38A ; ---------------------------------------------------------------------------
.text:000000000000B38C                 align 10h
.text:000000000000B390
.text:000000000000B390 loc_B390:                               ; CODE XREF: check_subexp_matching_top_isra_18+54↓j
.text:000000000000B390                                         ; check_subexp_matching_top_isra_18+5D↓j ...
.text:000000000000B390                 add     rbx, 1
.text:000000000000B394                 cmp     rbx, [r12]
.text:000000000000B398                 jge     loc_B440
.text:000000000000B39E
.text:000000000000B39E loc_B39E:                               ; CODE XREF: check_subexp_matching_top_isra_18+2A↑j
.text:000000000000B39E                                         ; check_subexp_matching_top_isra_18+D3↓j
.text:000000000000B39E                 mov     rax, [r14]
.text:000000000000B3A1                 mov     rbp, [rax+rbx*8]
.text:000000000000B3A5                 mov     rax, rbp
.text:000000000000B3A8                 shl     rax, 4
.text:000000000000B3AC                 add     rax, [r13+0]
.text:000000000000B3B0                 cmp     byte ptr [rax+8], 8
.text:000000000000B3B4                 jnz     short loc_B390
.text:000000000000B3B6                 mov     rax, [rax]
.text:000000000000B3B9                 cmp     rax, 3Fh ; '?'
.text:000000000000B3BD                 jg      short loc_B390
.text:000000000000B3BF                 mov     rsi, [r13+0A0h]
.text:000000000000B3C6                 bt      rsi, rax
.text:000000000000B3CA                 jnb     short loc_B390
.text:000000000000B3CC                 mov     r8, [r15+0E8h]
.text:000000000000B3D3                 cmp     r8, [r15+0F0h]
.text:000000000000B3DA                 mov     r9, [r15+0F8h]
.text:000000000000B3E1                 jz      short loc_B458
.text:000000000000B3E3
.text:000000000000B3E3 loc_B3E3:                               ; CODE XREF: check_subexp_matching_top_isra_18+13C↓j
.text:000000000000B3E3                 mov     esi, 30h ; '0'  ; size
.text:000000000000B3E8                 mov     edi, 1          ; nmemb
.text:000000000000B3ED                 mov     [rsp+58h+var_48], r9
.text:000000000000B3F2                 mov     [rsp+58h+var_50], r8
.text:000000000000B3F7                 mov     [rsp+58h+var_40], rcx
.text:000000000000B3FC                 call    _calloc
.text:000000000000B401                 mov     r8, [rsp+58h+var_50]
.text:000000000000B406                 mov     r9, [rsp+58h+var_48]
.text:000000000000B40B                 test    rax, rax
.text:000000000000B40E                 mov     [r9+r8*8], rax
.text:000000000000B412                 jz      short loc_B451
.text:000000000000B414                 add     r8, 1
.text:000000000000B418                 add     rbx, 1
.text:000000000000B41C                 mov     rcx, [rsp+58h+var_40]
.text:000000000000B421                 mov     [r15+0E8h], r8
.text:000000000000B428                 cmp     rbx, [r12]
.text:000000000000B42C                 mov     [rax+8], rbp
.text:000000000000B430                 mov     [rax], rcx
.text:000000000000B433                 jl      loc_B39E
.text:000000000000B439                 nop     dword ptr [rax+00000000h]
.text:000000000000B440
.text:000000000000B440 loc_B440:                               ; CODE XREF: check_subexp_matching_top_isra_18+19↑j
.text:000000000000B440                                         ; check_subexp_matching_top_isra_18+38↑j
.text:000000000000B440                 xor     eax, eax
.text:000000000000B442
.text:000000000000B442 loc_B442:                               ; CODE XREF: check_subexp_matching_top_isra_18+F6↓j
.text:000000000000B442                 add     rsp, 28h
.text:000000000000B446                 pop     rbx
.text:000000000000B447                 pop     rbp
.text:000000000000B448                 pop     r12
.text:000000000000B44A                 pop     r13
.text:000000000000B44C                 pop     r14
.text:000000000000B44E                 pop     r15
.text:000000000000B450                 retn
.text:000000000000B451 ; ---------------------------------------------------------------------------
.text:000000000000B451
.text:000000000000B451 loc_B451:                               ; CODE XREF: check_subexp_matching_top_isra_18+B2↑j
.text:000000000000B451                                         ; check_subexp_matching_top_isra_18+120↓j
.text:000000000000B451                 mov     eax, 0Ch
.text:000000000000B456                 jmp     short loc_B442
.text:000000000000B458 ; ---------------------------------------------------------------------------
.text:000000000000B458
.text:000000000000B458 loc_B458:                               ; CODE XREF: check_subexp_matching_top_isra_18+81↑j
.text:000000000000B458                 lea     rax, [r8+r8]
.text:000000000000B45C                 mov     rsi, r8
.text:000000000000B45F                 mov     rdi, r9         ; ptr
.text:000000000000B462                 shl     rsi, 4          ; size
.text:000000000000B466                 mov     [rsp+58h+var_50], rcx
.text:000000000000B46B                 mov     [rsp+58h+var_48], rax
.text:000000000000B470                 call    _realloc
.text:000000000000B475                 test    rax, rax
.text:000000000000B478                 mov     r9, rax
.text:000000000000B47B                 mov     rcx, [rsp+58h+var_50]
.text:000000000000B480                 jz      short loc_B451
.text:000000000000B482                 mov     [r15+0F8h], rax
.text:000000000000B489                 mov     rax, [rsp+58h+var_48]
.text:000000000000B48E                 mov     r8, [r15+0E8h]
.text:000000000000B495                 mov     [r15+0F0h], rax
.text:000000000000B49C                 jmp     loc_B3E3
.text:000000000000B49C ; } // starts at B360
.text:000000000000B49C check_subexp_matching_top_isra_18 endp
.text:000000000000B49C
.text:000000000000B49C ; ---------------------------------------------------------------------------
.text:000000000000B4A1                 align 10h
.text:000000000000B4B0
.text:000000000000B4B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B4B0
.text:000000000000B4B0
.text:000000000000B4B0 re_string_context_at proc near          ; CODE XREF: check_node_accept+6D↓p
.text:000000000000B4B0                                         ; check_halt_state_context_isra_20+16↓p ...
.text:000000000000B4B0 ; __unwind {
.text:000000000000B4B0                 push    rbp
.text:000000000000B4B1                 push    rbx
.text:000000000000B4B2                 mov     rbp, rdi
.text:000000000000B4B5                 sub     rsp, 8
.text:000000000000B4B9                 test    rsi, rsi
.text:000000000000B4BC                 js      short loc_B510
.text:000000000000B4BE                 cmp     [rdi+58h], rsi
.text:000000000000B4C2                 jz      loc_B568
.text:000000000000B4C8                 cmp     dword ptr [rdi+90h], 1
.text:000000000000B4CF                 jle     short loc_B520
.text:000000000000B4D1                 mov     rax, [rdi+10h]
.text:000000000000B4D5                 jmp     short loc_B4EA
.text:000000000000B4D5 ; ---------------------------------------------------------------------------
.text:000000000000B4D7                 align 20h
.text:000000000000B4E0
.text:000000000000B4E0 loc_B4E0:                               ; CODE XREF: re_string_context_at+40↓j
.text:000000000000B4E0                 sub     rsi, 1
.text:000000000000B4E4                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000B4E8                 jz      short loc_B510
.text:000000000000B4EA
.text:000000000000B4EA loc_B4EA:                               ; CODE XREF: re_string_context_at+25↑j
.text:000000000000B4EA                 mov     ebx, [rax+rsi*4]
.text:000000000000B4ED                 cmp     ebx, 0FFFFFFFFh
.text:000000000000B4F0                 jz      short loc_B4E0
.text:000000000000B4F2                 cmp     byte ptr [rbp+8Eh], 0
.text:000000000000B4F9                 jnz     short loc_B578
.text:000000000000B4FB
.text:000000000000B4FB loc_B4FB:                               ; CODE XREF: re_string_context_at+D6↓j
.text:000000000000B4FB                 xor     eax, eax
.text:000000000000B4FD                 cmp     ebx, 0Ah
.text:000000000000B500                 jz      short loc_B54C
.text:000000000000B502
.text:000000000000B502 loc_B502:                               ; CODE XREF: re_string_context_at+93↓j
.text:000000000000B502                                         ; re_string_context_at+9A↓j ...
.text:000000000000B502                 add     rsp, 8
.text:000000000000B506                 pop     rbx
.text:000000000000B507                 pop     rbp
.text:000000000000B508                 retn
.text:000000000000B508 ; ---------------------------------------------------------------------------
.text:000000000000B509                 align 10h
.text:000000000000B510
.text:000000000000B510 loc_B510:                               ; CODE XREF: re_string_context_at+C↑j
.text:000000000000B510                                         ; re_string_context_at+38↑j
.text:000000000000B510                 mov     eax, [rbp+70h]
.text:000000000000B513                 add     rsp, 8
.text:000000000000B517                 pop     rbx
.text:000000000000B518                 pop     rbp
.text:000000000000B519                 retn
.text:000000000000B519 ; ---------------------------------------------------------------------------
.text:000000000000B51A                 align 20h
.text:000000000000B520
.text:000000000000B520 loc_B520:                               ; CODE XREF: re_string_context_at+1F↑j
.text:000000000000B520                 mov     rax, [rdi+8]
.text:000000000000B524                 mov     rcx, [rdi+80h]
.text:000000000000B52B                 movzx   eax, byte ptr [rax+rsi]
.text:000000000000B52F                 mov     rdx, rax
.text:000000000000B532                 sar     rax, 6
.text:000000000000B536                 mov     rcx, [rcx+rax*8]
.text:000000000000B53A                 mov     eax, 1
.text:000000000000B53F                 bt      rcx, rdx
.text:000000000000B543                 jb      short loc_B502
.text:000000000000B545                 xor     eax, eax
.text:000000000000B547                 cmp     dl, 0Ah
.text:000000000000B54A                 jnz     short loc_B502
.text:000000000000B54C
.text:000000000000B54C loc_B54C:                               ; CODE XREF: re_string_context_at+50↑j
.text:000000000000B54C                 xor     eax, eax
.text:000000000000B54E                 cmp     byte ptr [rbp+8Dh], 0
.text:000000000000B555                 setnz   al
.text:000000000000B558                 add     rsp, 8
.text:000000000000B55C                 add     eax, eax
.text:000000000000B55E                 pop     rbx
.text:000000000000B55F                 pop     rbp
.text:000000000000B560                 retn
.text:000000000000B560 ; ---------------------------------------------------------------------------
.text:000000000000B561                 align 8
.text:000000000000B568
.text:000000000000B568 loc_B568:                               ; CODE XREF: re_string_context_at+12↑j
.text:000000000000B568                 and     edx, 2
.text:000000000000B56B                 cmp     edx, 1
.text:000000000000B56E                 sbb     eax, eax
.text:000000000000B570                 and     eax, 2
.text:000000000000B573                 add     eax, 8
.text:000000000000B576                 jmp     short loc_B502
.text:000000000000B578 ; ---------------------------------------------------------------------------
.text:000000000000B578
.text:000000000000B578 loc_B578:                               ; CODE XREF: re_string_context_at+49↑j
.text:000000000000B578                 mov     edi, ebx        ; wc
.text:000000000000B57A                 call    _iswalnum
.text:000000000000B57F                 test    eax, eax
.text:000000000000B581                 jnz     short loc_B58C
.text:000000000000B583                 cmp     ebx, 5Fh ; '_'
.text:000000000000B586                 jnz     loc_B4FB
.text:000000000000B58C
.text:000000000000B58C loc_B58C:                               ; CODE XREF: re_string_context_at+D1↑j
.text:000000000000B58C                 mov     eax, 1
.text:000000000000B591                 jmp     loc_B502
.text:000000000000B591 ; } // starts at B4B0
.text:000000000000B591 re_string_context_at endp
.text:000000000000B591
.text:000000000000B591 ; ---------------------------------------------------------------------------
.text:000000000000B596                 align 20h
.text:000000000000B5A0
.text:000000000000B5A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B5A0
.text:000000000000B5A0
.text:000000000000B5A0 check_node_accept proc near             ; CODE XREF: check_arrival+1EF↓p
.text:000000000000B5A0                                         ; set_regs+17A↓p ...
.text:000000000000B5A0 ; __unwind {
.text:000000000000B5A0                 mov     rax, [rdi+8]
.text:000000000000B5A4                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000B5A8                 movzx   eax, byte ptr [rsi+8]
.text:000000000000B5AC                 cmp     al, 3
.text:000000000000B5AE                 jz      loc_B668
.text:000000000000B5B4                 jbe     loc_B650
.text:000000000000B5BA                 cmp     al, 5
.text:000000000000B5BC                 jz      short loc_B5D0
.text:000000000000B5BE                 cmp     al, 7
.text:000000000000B5C0                 jnz     loc_B660
.text:000000000000B5C6                 xor     eax, eax
.text:000000000000B5C8                 test    cl, cl
.text:000000000000B5CA                 js      locret_B65A
.text:000000000000B5D0
.text:000000000000B5D0 loc_B5D0:                               ; CODE XREF: check_node_accept+1C↑j
.text:000000000000B5D0                 cmp     cl, 0Ah
.text:000000000000B5D3                 jz      loc_B698
.text:000000000000B5D9                 test    cl, cl
.text:000000000000B5DB                 jnz     short loc_B5F0
.text:000000000000B5DD                 mov     rcx, [rdi+98h]
.text:000000000000B5E4                 xor     eax, eax
.text:000000000000B5E6                 test    byte ptr [rcx+0D8h], 80h
.text:000000000000B5ED                 jnz     short locret_B65A
.text:000000000000B5EF                 nop
.text:000000000000B5F0
.text:000000000000B5F0 loc_B5F0:                               ; CODE XREF: check_node_accept+3B↑j
.text:000000000000B5F0                                         ; check_node_accept+B8↓j ...
.text:000000000000B5F0                 push    rbx
.text:000000000000B5F1                 mov     ebx, [rsi+8]
.text:000000000000B5F4                 mov     eax, 1
.text:000000000000B5F9                 test    ebx, 3FF00h
.text:000000000000B5FF                 jz      short loc_B64C
.text:000000000000B601                 mov     rsi, rdx
.text:000000000000B604                 mov     edx, [rdi+0A0h]
.text:000000000000B60A                 shr     ebx, 8
.text:000000000000B60D                 call    re_string_context_at
.text:000000000000B612                 mov     ecx, ebx
.text:000000000000B614                 mov     edx, eax
.text:000000000000B616                 and     cx, 3FFh
.text:000000000000B61B                 test    bl, 4
.text:000000000000B61E                 jz      short loc_B688
.text:000000000000B620                 xor     eax, eax
.text:000000000000B622                 test    dl, 1
.text:000000000000B625                 jz      short loc_B64C
.text:000000000000B627                 and     ebx, 8
.text:000000000000B62A                 jnz     short loc_B64C
.text:000000000000B62C
.text:000000000000B62C loc_B62C:                               ; CODE XREF: check_node_accept+EB↓j
.text:000000000000B62C                                         ; check_node_accept+EF↓j
.text:000000000000B62C                 test    cl, 20h
.text:000000000000B62F                 jz      short loc_B638
.text:000000000000B631                 xor     eax, eax
.text:000000000000B633                 test    dl, 2
.text:000000000000B636                 jz      short loc_B64C
.text:000000000000B638
.text:000000000000B638 loc_B638:                               ; CODE XREF: check_node_accept+8F↑j
.text:000000000000B638                 shr     edx, 3
.text:000000000000B63B                 mov     eax, 1
.text:000000000000B640                 and     edx, 1
.text:000000000000B643                 and     ecx, 80h
.text:000000000000B649                 cmovnz  eax, edx
.text:000000000000B64C
.text:000000000000B64C loc_B64C:                               ; CODE XREF: check_node_accept+5F↑j
.text:000000000000B64C                                         ; check_node_accept+85↑j ...
.text:000000000000B64C                 pop     rbx
.text:000000000000B64D                 retn
.text:000000000000B64D ; ---------------------------------------------------------------------------
.text:000000000000B64E                 align 10h
.text:000000000000B650
.text:000000000000B650 loc_B650:                               ; CODE XREF: check_node_accept+14↑j
.text:000000000000B650                 cmp     al, 1
.text:000000000000B652                 jnz     short loc_B660
.text:000000000000B654                 xor     eax, eax
.text:000000000000B656                 cmp     [rsi], cl
.text:000000000000B658                 jz      short loc_B5F0
.text:000000000000B65A
.text:000000000000B65A locret_B65A:                            ; CODE XREF: check_node_accept+2A↑j
.text:000000000000B65A                                         ; check_node_accept+4D↑j
.text:000000000000B65A                 rep retn
.text:000000000000B65A ; ---------------------------------------------------------------------------
.text:000000000000B65C                 align 20h
.text:000000000000B660
.text:000000000000B660 loc_B660:                               ; CODE XREF: check_node_accept+20↑j
.text:000000000000B660                                         ; check_node_accept+B2↑j
.text:000000000000B660                 xor     eax, eax
.text:000000000000B662                 retn
.text:000000000000B662 ; ---------------------------------------------------------------------------
.text:000000000000B663                 align 8
.text:000000000000B668
.text:000000000000B668 loc_B668:                               ; CODE XREF: check_node_accept+E↑j
.text:000000000000B668                 mov     r8, [rsi]
.text:000000000000B66B                 movzx   eax, cl
.text:000000000000B66E                 sar     rax, 6
.text:000000000000B672                 mov     r8, [r8+rax*8]
.text:000000000000B676                 xor     eax, eax
.text:000000000000B678                 bt      r8, rcx
.text:000000000000B67C                 jb      loc_B5F0
.text:000000000000B682                 rep retn
.text:000000000000B682 ; ---------------------------------------------------------------------------
.text:000000000000B684                 align 8
.text:000000000000B688
.text:000000000000B688 loc_B688:                               ; CODE XREF: check_node_accept+7E↑j
.text:000000000000B688                 and     ebx, 8
.text:000000000000B68B                 jz      short loc_B62C
.text:000000000000B68D                 test    al, 1
.text:000000000000B68F                 jz      short loc_B62C
.text:000000000000B691                 xor     eax, eax
.text:000000000000B693                 pop     rbx
.text:000000000000B694                 retn
.text:000000000000B694 ; ---------------------------------------------------------------------------
.text:000000000000B695                 align 8
.text:000000000000B698
.text:000000000000B698 loc_B698:                               ; CODE XREF: check_node_accept+33↑j
.text:000000000000B698                 mov     rcx, [rdi+98h]
.text:000000000000B69F                 xor     eax, eax
.text:000000000000B6A1                 test    byte ptr [rcx+0D8h], 40h
.text:000000000000B6A8                 jnz     loc_B5F0
.text:000000000000B6AE                 rep retn
.text:000000000000B6AE ; } // starts at B5A0
.text:000000000000B6AE check_node_accept endp
.text:000000000000B6AE
.text:000000000000B6B0
.text:000000000000B6B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B6B0
.text:000000000000B6B0
.text:000000000000B6B0 check_halt_state_context_isra_20 proc near
.text:000000000000B6B0                                         ; CODE XREF: re_search_internal+8C7↓p
.text:000000000000B6B0                                         ; re_search_internal+A3C↓p ...
.text:000000000000B6B0 ; __unwind {
.text:000000000000B6B0                 push    r12
.text:000000000000B6B2                 mov     r12, rdx
.text:000000000000B6B5                 push    rbp
.text:000000000000B6B6                 push    rbx
.text:000000000000B6B7                 mov     edx, [rdi+0A0h]
.text:000000000000B6BD                 mov     rbx, rsi
.text:000000000000B6C0                 mov     rsi, rcx
.text:000000000000B6C3                 mov     rbp, rdi
.text:000000000000B6C6                 call    re_string_context_at
.text:000000000000B6CB                 test    rbx, rbx
.text:000000000000B6CE                 jle     loc_B778
.text:000000000000B6D4                 mov     rdx, [rbp+98h]
.text:000000000000B6DB                 mov     r11d, eax
.text:000000000000B6DE                 mov     ebp, eax
.text:000000000000B6E0                 and     eax, 1
.text:000000000000B6E3                 mov     r9, [r12]
.text:000000000000B6E7                 xor     esi, esi
.text:000000000000B6E9                 and     ebp, 8
.text:000000000000B6EC                 and     r11d, 2
.text:000000000000B6F0                 mov     r10d, eax
.text:000000000000B6F3                 mov     r8, [rdx]
.text:000000000000B6F6                 jmp     short loc_B709
.text:000000000000B6F6 ; ---------------------------------------------------------------------------
.text:000000000000B6F8                 align 20h
.text:000000000000B700
.text:000000000000B700 loc_B700:                               ; CODE XREF: check_halt_state_context_isra_20+78↓j
.text:000000000000B700                                         ; check_halt_state_context_isra_20+87↓j ...
.text:000000000000B700                 add     rsi, 1
.text:000000000000B704                 cmp     rsi, rbx
.text:000000000000B707                 jz      short loc_B778
.text:000000000000B709
.text:000000000000B709 loc_B709:                               ; CODE XREF: check_halt_state_context_isra_20+46↑j
.text:000000000000B709                 mov     rax, [r9+rsi*8]
.text:000000000000B70D                 mov     rdx, rax
.text:000000000000B710                 shl     rdx, 4
.text:000000000000B714                 add     rdx, r8
.text:000000000000B717                 mov     ecx, [rdx+8]
.text:000000000000B71A                 shr     ecx, 8
.text:000000000000B71D                 mov     edi, ecx
.text:000000000000B71F                 and     di, 3FFh
.text:000000000000B724                 cmp     byte ptr [rdx+8], 2
.text:000000000000B728                 jnz     short loc_B700
.text:000000000000B72A                 test    di, di
.text:000000000000B72D                 jz      short loc_B755
.text:000000000000B72F                 test    cl, 4
.text:000000000000B732                 jz      short loc_B760
.text:000000000000B734                 test    r10d, r10d
.text:000000000000B737                 jz      short loc_B700
.text:000000000000B739                 and     ecx, 8
.text:000000000000B73C                 jnz     short loc_B700
.text:000000000000B73E
.text:000000000000B73E loc_B73E:                               ; CODE XREF: check_halt_state_context_isra_20+B3↓j
.text:000000000000B73E                 test    dil, 20h
.text:000000000000B742                 jz      short loc_B749
.text:000000000000B744
.text:000000000000B744 loc_B744:                               ; CODE XREF: check_halt_state_context_isra_20+C0↓j
.text:000000000000B744                 test    r11d, r11d
.text:000000000000B747                 jz      short loc_B700
.text:000000000000B749
.text:000000000000B749 loc_B749:                               ; CODE XREF: check_halt_state_context_isra_20+92↑j
.text:000000000000B749                                         ; check_halt_state_context_isra_20+BE↓j
.text:000000000000B749                 and     edi, 80h
.text:000000000000B74F                 jz      short loc_B755
.text:000000000000B751                 test    ebp, ebp
.text:000000000000B753                 jz      short loc_B700
.text:000000000000B755
.text:000000000000B755 loc_B755:                               ; CODE XREF: check_halt_state_context_isra_20+7D↑j
.text:000000000000B755                                         ; check_halt_state_context_isra_20+9F↑j
.text:000000000000B755                 pop     rbx
.text:000000000000B756                 pop     rbp
.text:000000000000B757                 pop     r12
.text:000000000000B759                 retn
.text:000000000000B759 ; ---------------------------------------------------------------------------
.text:000000000000B75A                 align 20h
.text:000000000000B760
.text:000000000000B760 loc_B760:                               ; CODE XREF: check_halt_state_context_isra_20+82↑j
.text:000000000000B760                 and     ecx, 8
.text:000000000000B763                 jz      short loc_B73E
.text:000000000000B765                 test    r10d, r10d
.text:000000000000B768                 jnz     short loc_B700
.text:000000000000B76A                 test    dil, 20h
.text:000000000000B76E                 jz      short loc_B749
.text:000000000000B770                 jmp     short loc_B744
.text:000000000000B770 ; ---------------------------------------------------------------------------
.text:000000000000B772                 align 8
.text:000000000000B778
.text:000000000000B778 loc_B778:                               ; CODE XREF: check_halt_state_context_isra_20+1E↑j
.text:000000000000B778                                         ; check_halt_state_context_isra_20+57↑j
.text:000000000000B778                 pop     rbx
.text:000000000000B779                 xor     eax, eax
.text:000000000000B77B                 pop     rbp
.text:000000000000B77C                 pop     r12
.text:000000000000B77E                 retn
.text:000000000000B77E ; } // starts at B6B0
.text:000000000000B77E check_halt_state_context_isra_20 endp
.text:000000000000B77E
.text:000000000000B77E ; ---------------------------------------------------------------------------
.text:000000000000B77F                 align 20h
.text:000000000000B780
.text:000000000000B780 ; =============== S U B R O U T I N E =======================================
.text:000000000000B780
.text:000000000000B780
.text:000000000000B780 re_string_reconstruct proc near         ; CODE XREF: re_search_internal+5E6↓p
.text:000000000000B780                                         ; re_search_internal+115B↓p
.text:000000000000B780
.text:000000000000B780 var_78          = qword ptr -78h
.text:000000000000B780 var_6C          = dword ptr -6Ch
.text:000000000000B780 var_68          = qword ptr -68h
.text:000000000000B780 var_60          = qword ptr -60h
.text:000000000000B780 wc              = dword ptr -54h
.text:000000000000B780 var_50          = qword ptr -50h
.text:000000000000B780 var_46          = byte ptr -46h
.text:000000000000B780 var_40          = qword ptr -40h
.text:000000000000B780
.text:000000000000B780 ; __unwind {
.text:000000000000B780                 push    r15
.text:000000000000B782                 push    r14
.text:000000000000B784                 mov     r15, rsi
.text:000000000000B787                 push    r13
.text:000000000000B789                 push    r12
.text:000000000000B78B                 mov     r10d, edx
.text:000000000000B78E                 push    rbp
.text:000000000000B78F                 push    rbx
.text:000000000000B790                 mov     rbp, rsi
.text:000000000000B793                 mov     rbx, rdi
.text:000000000000B796                 sub     rsp, 48h
.text:000000000000B79A                 mov     rax, fs:28h
.text:000000000000B7A3                 mov     [rsp+78h+var_40], rax
.text:000000000000B7A8                 xor     eax, eax
.text:000000000000B7AA                 mov     rax, [rdi+28h]
.text:000000000000B7AE                 sub     rbp, rax
.text:000000000000B7B1                 cmp     rax, rsi
.text:000000000000B7B4                 jle     short loc_B816
.text:000000000000B7B6                 cmp     dword ptr [rdi+90h], 1
.text:000000000000B7BD                 jg      loc_B8F0
.text:000000000000B7C3
.text:000000000000B7C3 loc_B7C3:                               ; CODE XREF: re_string_reconstruct+178↓j
.text:000000000000B7C3                 mov     rax, [rbx+50h]
.text:000000000000B7C7                 mov     qword ptr [rbx+30h], 0
.text:000000000000B7CF                 mov     rbp, r15
.text:000000000000B7D2                 mov     qword ptr [rbx+28h], 0
.text:000000000000B7DA                 mov     qword ptr [rbx+38h], 0
.text:000000000000B7E2                 mov     byte ptr [rbx+8Ch], 0
.text:000000000000B7E9                 mov     [rbx+58h], rax
.text:000000000000B7ED                 mov     rax, [rbx+60h]
.text:000000000000B7F1                 mov     [rbx+68h], rax
.text:000000000000B7F5                 mov     eax, r10d
.text:000000000000B7F8                 and     eax, 1
.text:000000000000B7FB                 cmp     eax, 1
.text:000000000000B7FE                 sbb     eax, eax
.text:000000000000B800                 and     eax, 2
.text:000000000000B803                 add     eax, 4
.text:000000000000B806                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000B80D                 mov     [rbx+70h], eax
.text:000000000000B810                 jz      loc_B8E0
.text:000000000000B816
.text:000000000000B816 loc_B816:                               ; CODE XREF: re_string_reconstruct+34↑j
.text:000000000000B816                                         ; re_string_reconstruct+167↓j
.text:000000000000B816                 test    rbp, rbp
.text:000000000000B819                 jz      short loc_B87E
.text:000000000000B81B                 mov     rax, [rbx+38h]
.text:000000000000B81F                 movzx   edx, byte ptr [rbx+8Ch]
.text:000000000000B826                 mov     r8, [rbx+30h]
.text:000000000000B82A                 cmp     rax, rbp
.text:000000000000B82D                 jle     loc_B950
.text:000000000000B833                 test    dl, dl
.text:000000000000B835                 jnz     loc_BA48
.text:000000000000B83B                 lea     rsi, [rbp-1]
.text:000000000000B83F                 mov     edx, r10d
.text:000000000000B842                 mov     rdi, rbx
.text:000000000000B845                 mov     [rsp+78h+var_78], r8
.text:000000000000B849                 call    re_string_context_at
.text:000000000000B84E                 mov     r8, [rsp+78h+var_78]
.text:000000000000B852                 mov     [rbx+70h], eax
.text:000000000000B855                 sub     r8, rbp
.text:000000000000B858                 cmp     dword ptr [rbx+90h], 1
.text:000000000000B85F                 jg      loc_B900
.text:000000000000B865
.text:000000000000B865 loc_B865:                               ; CODE XREF: re_string_reconstruct+19C↓j
.text:000000000000B865                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000B86C                 jnz     loc_BC10
.text:000000000000B872                 sub     [rbx+38h], rbp
.text:000000000000B876                 mov     [rbx+30h], r8
.text:000000000000B87A
.text:000000000000B87A loc_B87A:                               ; CODE XREF: re_string_reconstruct+47E↓j
.text:000000000000B87A                                         ; re_string_reconstruct+6F4↓j
.text:000000000000B87A                 add     [rbx+8], rbp
.text:000000000000B87E
.text:000000000000B87E loc_B87E:                               ; CODE XREF: re_string_reconstruct+99↑j
.text:000000000000B87E                                         ; re_string_reconstruct+484↓j
.text:000000000000B87E                 mov     rax, [rbx+58h]
.text:000000000000B882                 sub     [rbx+68h], rbp
.text:000000000000B886                 mov     [rbx+28h], r15
.text:000000000000B88A                 sub     rax, rbp
.text:000000000000B88D                 cmp     dword ptr [rbx+90h], 1
.text:000000000000B894                 mov     [rbx+58h], rax
.text:000000000000B898                 jle     loc_B938
.text:000000000000B89E                 cmp     byte ptr [rbx+88h], 0
.text:000000000000B8A5                 mov     rdi, rbx
.text:000000000000B8A8                 jz      short loc_B928
.text:000000000000B8AA                 call    build_wcs_upper_buffer
.text:000000000000B8AF                 test    eax, eax
.text:000000000000B8B1                 jnz     short loc_B8BD
.text:000000000000B8B3
.text:000000000000B8B3 loc_B8B3:                               ; CODE XREF: re_string_reconstruct+1AD↓j
.text:000000000000B8B3                                         ; re_string_reconstruct+1C9↓j ...
.text:000000000000B8B3                 mov     qword ptr [rbx+48h], 0
.text:000000000000B8BB                 xor     eax, eax
.text:000000000000B8BD
.text:000000000000B8BD loc_B8BD:                               ; CODE XREF: re_string_reconstruct+131↑j
.text:000000000000B8BD                 mov     rcx, [rsp+78h+var_40]
.text:000000000000B8C2                 xor     rcx, fs:28h
.text:000000000000B8CB                 jnz     loc_BF1A
.text:000000000000B8D1                 add     rsp, 48h
.text:000000000000B8D5                 pop     rbx
.text:000000000000B8D6                 pop     rbp
.text:000000000000B8D7                 pop     r12
.text:000000000000B8D9                 pop     r13
.text:000000000000B8DB                 pop     r14
.text:000000000000B8DD                 pop     r15
.text:000000000000B8DF                 retn
.text:000000000000B8E0 ; ---------------------------------------------------------------------------
.text:000000000000B8E0
.text:000000000000B8E0 loc_B8E0:                               ; CODE XREF: re_string_reconstruct+90↑j
.text:000000000000B8E0                 mov     rax, [rbx]
.text:000000000000B8E3                 mov     [rbx+8], rax
.text:000000000000B8E7                 jmp     loc_B816
.text:000000000000B8E7 ; ---------------------------------------------------------------------------
.text:000000000000B8EC                 align 10h
.text:000000000000B8F0
.text:000000000000B8F0 loc_B8F0:                               ; CODE XREF: re_string_reconstruct+3D↑j
.text:000000000000B8F0                 mov     qword ptr [rdi+20h], 0
.text:000000000000B8F8                 jmp     loc_B7C3
.text:000000000000B8F8 ; ---------------------------------------------------------------------------
.text:000000000000B8FD                 align 20h
.text:000000000000B900
.text:000000000000B900 loc_B900:                               ; CODE XREF: re_string_reconstruct+DF↑j
.text:000000000000B900                 mov     rdi, [rbx+10h]  ; dest
.text:000000000000B904                 lea     rdx, ds:0[r8*4] ; n
.text:000000000000B90C                 lea     rsi, [rdi+rbp*4] ; src
.text:000000000000B910                 call    _memmove
.text:000000000000B915                 mov     r8, [rbx+30h]
.text:000000000000B919                 sub     r8, rbp
.text:000000000000B91C                 jmp     loc_B865
.text:000000000000B91C ; ---------------------------------------------------------------------------
.text:000000000000B921                 align 8
.text:000000000000B928
.text:000000000000B928 loc_B928:                               ; CODE XREF: re_string_reconstruct+128↑j
.text:000000000000B928                 call    build_wcs_buffer
.text:000000000000B92D                 jmp     loc_B8B3
.text:000000000000B92D ; ---------------------------------------------------------------------------
.text:000000000000B932                 align 8
.text:000000000000B938
.text:000000000000B938 loc_B938:                               ; CODE XREF: re_string_reconstruct+118↑j
.text:000000000000B938                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000B93F                 jnz     loc_BCF0
.text:000000000000B945                 mov     [rbx+30h], rax
.text:000000000000B949                 jmp     loc_B8B3
.text:000000000000B949 ; ---------------------------------------------------------------------------
.text:000000000000B94E                 align 10h
.text:000000000000B950
.text:000000000000B950 loc_B950:                               ; CODE XREF: re_string_reconstruct+AD↑j
.text:000000000000B950                 test    dl, dl
.text:000000000000B952                 jnz     loc_BDFD
.text:000000000000B958
.text:000000000000B958 loc_B958:                               ; CODE XREF: re_string_reconstruct+6A0↓j
.text:000000000000B958                 movsxd  rdx, dword ptr [rbx+90h]
.text:000000000000B95F                 mov     qword ptr [rbx+30h], 0
.text:000000000000B967                 mov     r11, [rbx+28h]
.text:000000000000B96B                 cmp     edx, 1
.text:000000000000B96E                 jle     loc_BD58
.text:000000000000B974                 cmp     byte ptr [rbx+89h], 0
.text:000000000000B97B                 jnz     loc_BC38
.text:000000000000B981
.text:000000000000B981 loc_B981:                               ; CODE XREF: re_string_reconstruct+4DC↓j
.text:000000000000B981                                         ; re_string_reconstruct+4EF↓j ...
.text:000000000000B981                 lea     r14, [r11+rax]
.text:000000000000B985                 cmp     r15, r14
.text:000000000000B988                 jle     loc_BDCF
.text:000000000000B98E                 lea     rax, [rbx+20h]
.text:000000000000B992                 lea     r13, [rsp+78h+wc]
.text:000000000000B997                 mov     [rsp+78h+var_68], rax
.text:000000000000B99C                 nop     dword ptr [rax+00h]
.text:000000000000B9A0
.text:000000000000B9A0 loc_B9A0:                               ; CODE XREF: re_string_reconstruct+270↓j
.text:000000000000B9A0                 mov     r12, [rbx+50h]
.text:000000000000B9A4                 mov     rsi, [rbx]
.text:000000000000B9A7                 mov     rdi, r13
.text:000000000000B9AA                 mov     rax, [rbx+20h]
.text:000000000000B9AE                 mov     rcx, [rsp+78h+var_68]
.text:000000000000B9B3                 mov     [rsp+78h+var_6C], r10d
.text:000000000000B9B8                 mov     [rsp+78h+var_78], r8
.text:000000000000B9BC                 sub     r12, r14
.text:000000000000B9BF                 add     rsi, r14
.text:000000000000B9C2                 mov     rdx, r12
.text:000000000000B9C5                 mov     [rsp+78h+var_60], rax
.text:000000000000B9CA                 call    rpl_mbrtowc
.text:000000000000B9CF                 lea     rcx, [rax-1]
.text:000000000000B9D3                 mov     edx, [rsp+78h+wc]
.text:000000000000B9D7                 mov     r8, [rsp+78h+var_78]
.text:000000000000B9DB                 mov     r10d, [rsp+78h+var_6C]
.text:000000000000B9E0                 cmp     rcx, 0FFFFFFFFFFFFFFFCh
.text:000000000000B9E4                 ja      loc_BE25
.text:000000000000B9EA
.text:000000000000B9EA loc_B9EA:                               ; CODE XREF: re_string_reconstruct+6C5↓j
.text:000000000000B9EA                 add     r14, rax
.text:000000000000B9ED                 cmp     r15, r14
.text:000000000000B9F0                 jg      short loc_B9A0
.text:000000000000B9F2                 sub     r14, r15
.text:000000000000B9F5                 cmp     edx, 0FFFFFFFFh
.text:000000000000B9F8                 mov     r12, r14
.text:000000000000B9FB                 mov     [rbx+30h], r14
.text:000000000000B9FF                 jz      loc_BDD9
.text:000000000000BA05
.text:000000000000BA05 loc_BA05:                               ; CODE XREF: re_string_reconstruct+73A↓j
.text:000000000000BA05                 cmp     byte ptr [rbx+8Eh], 0
.text:000000000000BA0C                 jnz     loc_BE79
.text:000000000000BA12
.text:000000000000BA12 loc_BA12:                               ; CODE XREF: re_string_reconstruct+70D↓j
.text:000000000000BA12                 xor     eax, eax
.text:000000000000BA14                 cmp     edx, 0Ah
.text:000000000000BA17                 jnz     short loc_BA27
.text:000000000000BA19                 xor     eax, eax
.text:000000000000BA1B                 cmp     byte ptr [rbx+8Dh], 0
.text:000000000000BA22                 setnz   al
.text:000000000000BA25                 add     eax, eax
.text:000000000000BA27
.text:000000000000BA27 loc_BA27:                               ; CODE XREF: re_string_reconstruct+297↑j
.text:000000000000BA27                                         ; re_string_reconstruct+718↓j
.text:000000000000BA27                 mov     [rbx+70h], eax
.text:000000000000BA2A
.text:000000000000BA2A loc_BA2A:                               ; CODE XREF: re_string_reconstruct+66B↓j
.text:000000000000BA2A                 cmp     r12, 0
.text:000000000000BA2E                 jnz     loc_BE4A
.text:000000000000BA34
.text:000000000000BA34 loc_BA34:                               ; CODE XREF: re_string_reconstruct+75D↓j
.text:000000000000BA34                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000BA3B                 mov     [rbx+38h], r12
.text:000000000000BA3F                 jmp     loc_BBFC
.text:000000000000BA3F ; ---------------------------------------------------------------------------
.text:000000000000BA44                 align 8
.text:000000000000BA48
.text:000000000000BA48 loc_BA48:                               ; CODE XREF: re_string_reconstruct+B5↑j
.text:000000000000BA48                 mov     r14, [rbx+18h]
.text:000000000000BA4C                 mov     rcx, r8
.text:000000000000BA4F                 xor     esi, esi
.text:000000000000BA51                 jmp     short loc_BA63
.text:000000000000BA51 ; ---------------------------------------------------------------------------
.text:000000000000BA53                 align 8
.text:000000000000BA58
.text:000000000000BA58 loc_BA58:                               ; CODE XREF: re_string_reconstruct+2FE↓j
.text:000000000000BA58                 jge     short loc_BA93
.text:000000000000BA5A                 lea     rsi, [rax+1]
.text:000000000000BA5E
.text:000000000000BA5E loc_BA5E:                               ; CODE XREF: re_string_reconstruct+303↓j
.text:000000000000BA5E                 cmp     rsi, rcx
.text:000000000000BA61                 jge     short loc_BA88
.text:000000000000BA63
.text:000000000000BA63 loc_BA63:                               ; CODE XREF: re_string_reconstruct+2D1↑j
.text:000000000000BA63                 lea     rdx, [rsi+rcx]
.text:000000000000BA67                 mov     rax, rdx
.text:000000000000BA6A                 shr     rax, 3Fh
.text:000000000000BA6E                 add     rax, rdx
.text:000000000000BA71                 sar     rax, 1
.text:000000000000BA74                 mov     rdx, [r14+rax*8]
.text:000000000000BA78                 mov     r12, rax
.text:000000000000BA7B                 cmp     rdx, rbp
.text:000000000000BA7E                 jle     short loc_BA58
.text:000000000000BA80                 mov     rcx, rax
.text:000000000000BA83                 jmp     short loc_BA5E
.text:000000000000BA83 ; ---------------------------------------------------------------------------
.text:000000000000BA85                 align 8
.text:000000000000BA88
.text:000000000000BA88 loc_BA88:                               ; CODE XREF: re_string_reconstruct+2E1↑j
.text:000000000000BA88                 lea     r12, [rax+1]
.text:000000000000BA8C                 cmp     rdx, rbp
.text:000000000000BA8F                 cmovge  r12, rax
.text:000000000000BA93
.text:000000000000BA93 loc_BA93:                               ; CODE XREF: re_string_reconstruct:loc_BA58↑j
.text:000000000000BA93                 lea     r13, [r12-1]
.text:000000000000BA98                 mov     edx, r10d
.text:000000000000BA9B                 mov     rdi, rbx
.text:000000000000BA9E                 mov     [rsp+78h+var_78], r8
.text:000000000000BAA2                 mov     rsi, r13
.text:000000000000BAA5                 call    re_string_context_at
.text:000000000000BAAA                 cmp     rbp, r12
.text:000000000000BAAD                 mov     [rbx+70h], eax
.text:000000000000BAB0                 mov     r8, [rsp+78h+var_78]
.text:000000000000BAB4                 jnz     loc_BB38
.text:000000000000BABA                 cmp     rbp, r8
.text:000000000000BABD                 jge     short loc_BB38
.text:000000000000BABF                 cmp     [r14+r12*8], rbp
.text:000000000000BAC3                 jnz     short loc_BB38
.text:000000000000BAC5                 mov     rdi, [rbx+10h]  ; dest
.text:000000000000BAC9                 sub     r8, rbp
.text:000000000000BACC                 lea     rdx, ds:0[r8*4] ; n
.text:000000000000BAD4                 lea     rsi, [rdi+rbp*4] ; src
.text:000000000000BAD8                 call    _memmove
.text:000000000000BADD                 mov     rdi, [rbx+8]    ; dest
.text:000000000000BAE1                 mov     rdx, [rbx+30h]
.text:000000000000BAE5                 lea     rsi, [rdi+rbp]  ; src
.text:000000000000BAE9                 sub     rdx, rbp        ; n
.text:000000000000BAEC                 call    _memmove
.text:000000000000BAF1                 mov     rax, [rbx+30h]
.text:000000000000BAF5                 sub     [rbx+38h], rbp
.text:000000000000BAF9                 sub     rax, rbp
.text:000000000000BAFC                 test    rax, rax
.text:000000000000BAFF                 mov     [rbx+30h], rax
.text:000000000000BB03                 jle     short loc_BB28
.text:000000000000BB05                 mov     rcx, [rbx+18h]
.text:000000000000BB09                 xor     eax, eax
.text:000000000000BB0B                 lea     rsi, [rcx+rbp*8]
.text:000000000000BB0F                 nop
.text:000000000000BB10
.text:000000000000BB10 loc_BB10:                               ; CODE XREF: re_string_reconstruct+3A3↓j
.text:000000000000BB10                 mov     rdx, [rsi+rax*8]
.text:000000000000BB14                 sub     rdx, rbp
.text:000000000000BB17                 mov     [rcx+rax*8], rdx
.text:000000000000BB1B                 add     rax, 1
.text:000000000000BB1F                 cmp     [rbx+30h], rax
.text:000000000000BB23                 jg      short loc_BB10
.text:000000000000BB25                 nop     dword ptr [rax]
.text:000000000000BB28
.text:000000000000BB28 loc_BB28:                               ; CODE XREF: re_string_reconstruct+383↑j
.text:000000000000BB28                                         ; re_string_reconstruct+633↓j
.text:000000000000BB28                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000BB2F                 jmp     loc_BBFC
.text:000000000000BB2F ; ---------------------------------------------------------------------------
.text:000000000000BB34                 align 8
.text:000000000000BB38
.text:000000000000BB38 loc_BB38:                               ; CODE XREF: re_string_reconstruct+334↑j
.text:000000000000BB38                                         ; re_string_reconstruct+33D↑j ...
.text:000000000000BB38                 mov     rax, [rbx+50h]
.text:000000000000BB3C                 mov     byte ptr [rbx+8Ch], 0
.text:000000000000BB43                 add     rax, rbp
.text:000000000000BB46                 sub     rax, r15
.text:000000000000BB49                 mov     [rbx+58h], rax
.text:000000000000BB4D                 mov     rax, [rbx+60h]
.text:000000000000BB51                 add     rax, rbp
.text:000000000000BB54                 sub     rax, r15
.text:000000000000BB57                 test    r12, r12
.text:000000000000BB5A                 mov     [rbx+68h], rax
.text:000000000000BB5E                 jle     short loc_BB83
.text:000000000000BB60                 cmp     [r14+r12*8-8], rbp
.text:000000000000BB65                 jz      short loc_BB7B
.text:000000000000BB67                 jmp     short loc_BB83
.text:000000000000BB67 ; ---------------------------------------------------------------------------
.text:000000000000BB69                 align 10h
.text:000000000000BB70
.text:000000000000BB70 loc_BB70:                               ; CODE XREF: re_string_reconstruct+401↓j
.text:000000000000BB70                 cmp     [r14+r13*8-8], rbp
.text:000000000000BB75                 jnz     short loc_BB83
.text:000000000000BB77                 sub     r13, 1
.text:000000000000BB7B
.text:000000000000BB7B loc_BB7B:                               ; CODE XREF: re_string_reconstruct+3E5↑j
.text:000000000000BB7B                 test    r13, r13
.text:000000000000BB7E                 mov     r12, r13
.text:000000000000BB81                 jnz     short loc_BB70
.text:000000000000BB83
.text:000000000000BB83 loc_BB83:                               ; CODE XREF: re_string_reconstruct+3DE↑j
.text:000000000000BB83                                         ; re_string_reconstruct+3E7↑j ...
.text:000000000000BB83                 cmp     r12, r8
.text:000000000000BB86                 jge     loc_BDB8
.text:000000000000BB8C                 mov     rax, [rbx+10h]
.text:000000000000BB90                 jmp     short loc_BBA5
.text:000000000000BB90 ; ---------------------------------------------------------------------------
.text:000000000000BB92                 align 8
.text:000000000000BB98
.text:000000000000BB98 loc_BB98:                               ; CODE XREF: re_string_reconstruct+42A↓j
.text:000000000000BB98                 add     r12, 1
.text:000000000000BB9C                 cmp     r12, r8
.text:000000000000BB9F                 jz      loc_BDC0
.text:000000000000BBA5
.text:000000000000BBA5 loc_BBA5:                               ; CODE XREF: re_string_reconstruct+410↑j
.text:000000000000BBA5                 cmp     dword ptr [rax+r12*4], 0FFFFFFFFh
.text:000000000000BBAA                 jz      short loc_BB98
.text:000000000000BBAC
.text:000000000000BBAC loc_BBAC:                               ; CODE XREF: re_string_reconstruct:loc_BDB8↓j
.text:000000000000BBAC                 mov     rdx, [r14+r12*8]
.text:000000000000BBB0                 sub     rdx, rbp        ; n
.text:000000000000BBB3                 cmp     rdx, 0
.text:000000000000BBB7                 mov     [rbx+30h], rdx
.text:000000000000BBBB                 jz      short loc_BBF1
.text:000000000000BBBD                 jle     short loc_BBDF
.text:000000000000BBBF                 mov     rax, [rbx+10h]
.text:000000000000BBC3                 lea     rcx, [rax+rdx*4]
.text:000000000000BBC7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000BBD0
.text:000000000000BBD0 loc_BBD0:                               ; CODE XREF: re_string_reconstruct+45D↓j
.text:000000000000BBD0                 mov     dword ptr [rax], 0FFFFFFFFh
.text:000000000000BBD6                 add     rax, 4
.text:000000000000BBDA                 cmp     rcx, rax
.text:000000000000BBDD                 jnz     short loc_BBD0
.text:000000000000BBDF
.text:000000000000BBDF loc_BBDF:                               ; CODE XREF: re_string_reconstruct+43D↑j
.text:000000000000BBDF                 mov     rdi, [rbx+8]    ; s
.text:000000000000BBE3                 mov     esi, 0FFh       ; c
.text:000000000000BBE8                 call    _memset
.text:000000000000BBED                 mov     rdx, [rbx+30h]
.text:000000000000BBF1
.text:000000000000BBF1 loc_BBF1:                               ; CODE XREF: re_string_reconstruct+43B↑j
.text:000000000000BBF1                                         ; re_string_reconstruct+64A↓j
.text:000000000000BBF1                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000BBF8                 mov     [rbx+38h], rdx
.text:000000000000BBFC
.text:000000000000BBFC loc_BBFC:                               ; CODE XREF: re_string_reconstruct+2BF↑j
.text:000000000000BBFC                                         ; re_string_reconstruct+3AF↑j ...
.text:000000000000BBFC                 test    al, al
.text:000000000000BBFE                 jz      loc_B87A
.text:000000000000BC04                 jmp     loc_B87E
.text:000000000000BC04 ; ---------------------------------------------------------------------------
.text:000000000000BC09                 align 10h
.text:000000000000BC10
.text:000000000000BC10 loc_BC10:                               ; CODE XREF: re_string_reconstruct+EC↑j
.text:000000000000BC10                 mov     rdi, [rbx+8]    ; dest
.text:000000000000BC14                 mov     rdx, r8         ; n
.text:000000000000BC17                 lea     rsi, [rdi+rbp]  ; src
.text:000000000000BC1B                 call    _memmove
.text:000000000000BC20                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000BC27                 sub     [rbx+30h], rbp
.text:000000000000BC2B                 sub     [rbx+38h], rbp
.text:000000000000BC2F                 jmp     short loc_BBFC
.text:000000000000BC2F ; ---------------------------------------------------------------------------
.text:000000000000BC31                 align 8
.text:000000000000BC38
.text:000000000000BC38 loc_BC38:                               ; CODE XREF: re_string_reconstruct+1FB↑j
.text:000000000000BC38                 mov     rcx, [rbx]
.text:000000000000BC3B                 mov     rdi, rbp
.text:000000000000BC3E                 sub     rdi, rdx
.text:000000000000BC41                 mov     rdx, rdi
.text:000000000000BC44                 lea     r12, [rcx+r11]
.text:000000000000BC48                 add     rdx, r12
.text:000000000000BC4B                 lea     rsi, [r12+rbp-1]
.text:000000000000BC50                 cmp     rcx, rdx
.text:000000000000BC53                 cmovb   rcx, rdx
.text:000000000000BC57                 cmp     rcx, rsi
.text:000000000000BC5A                 jbe     short loc_BC75
.text:000000000000BC5C                 jmp     loc_B981
.text:000000000000BC5C ; ---------------------------------------------------------------------------
.text:000000000000BC61                 align 8
.text:000000000000BC68
.text:000000000000BC68 loc_BC68:                               ; CODE XREF: re_string_reconstruct+4FE↓j
.text:000000000000BC68                 sub     rsi, 1
.text:000000000000BC6C                 cmp     rcx, rsi
.text:000000000000BC6F                 ja      loc_B981
.text:000000000000BC75
.text:000000000000BC75 loc_BC75:                               ; CODE XREF: re_string_reconstruct+4DA↑j
.text:000000000000BC75                 movzx   edx, byte ptr [rsi]
.text:000000000000BC78                 and     edx, 0FFFFFFC0h
.text:000000000000BC7B                 cmp     dl, 80h
.text:000000000000BC7E                 jz      short loc_BC68
.text:000000000000BC80                 mov     rdx, [rbx+58h]
.text:000000000000BC84                 mov     rcx, [rbx+78h]
.text:000000000000BC88                 mov     r14, rsi
.text:000000000000BC8B                 add     rdx, r12
.text:000000000000BC8E                 sub     rdx, rsi
.text:000000000000BC91                 test    rcx, rcx
.text:000000000000BC94                 jnz     loc_BEE2
.text:000000000000BC9A
.text:000000000000BC9A loc_BC9A:                               ; CODE XREF: re_string_reconstruct+795↓j
.text:000000000000BC9A                 lea     r13, [rsp+78h+wc]
.text:000000000000BC9F                 add     r12, rbp
.text:000000000000BCA2                 lea     rcx, [rsp+78h+var_50]
.text:000000000000BCA7                 sub     r12, r14
.text:000000000000BCAA                 mov     [rsp+78h+var_6C], r10d
.text:000000000000BCAF                 mov     [rsp+78h+var_78], r8
.text:000000000000BCB3                 mov     rdi, r13
.text:000000000000BCB6                 mov     [rsp+78h+var_50], 0
.text:000000000000BCBF                 call    rpl_mbrtowc
.text:000000000000BCC4                 cmp     r12, rax
.text:000000000000BCC7                 mov     r8, [rsp+78h+var_78]
.text:000000000000BCCB                 mov     r10d, [rsp+78h+var_6C]
.text:000000000000BCD0                 ja      short loc_BCDC
.text:000000000000BCD2                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000BCD6                 jbe     loc_BEA1
.text:000000000000BCDC
.text:000000000000BCDC loc_BCDC:                               ; CODE XREF: re_string_reconstruct+550↑j
.text:000000000000BCDC                                         ; re_string_reconstruct+740↓j
.text:000000000000BCDC                 mov     r11, [rbx+28h]
.text:000000000000BCE0                 mov     rax, [rbx+38h]
.text:000000000000BCE4                 jmp     loc_B981
.text:000000000000BCE4 ; ---------------------------------------------------------------------------
.text:000000000000BCE9                 align 10h
.text:000000000000BCF0
.text:000000000000BCF0 loc_BCF0:                               ; CODE XREF: re_string_reconstruct+1BF↑j
.text:000000000000BCF0                 cmp     byte ptr [rbx+88h], 0
.text:000000000000BCF7                 jnz     loc_BDF0
.text:000000000000BCFD                 mov     rcx, [rbx+78h]
.text:000000000000BD01                 test    rcx, rcx
.text:000000000000BD04                 jz      loc_B8B3
.text:000000000000BD0A                 cmp     [rbx+40h], rax
.text:000000000000BD0E                 mov     rdx, [rbx+30h]
.text:000000000000BD12                 cmovle  rax, [rbx+40h]
.text:000000000000BD17                 cmp     rax, rdx
.text:000000000000BD1A                 jg      short loc_BD28
.text:000000000000BD1C                 jmp     short loc_BD48
.text:000000000000BD1C ; ---------------------------------------------------------------------------
.text:000000000000BD1E                 align 20h
.text:000000000000BD20
.text:000000000000BD20 loc_BD20:                               ; CODE XREF: re_string_reconstruct+5C6↓j
.text:000000000000BD20                 mov     r15, [rbx+28h]
.text:000000000000BD24                 mov     rcx, [rbx+78h]
.text:000000000000BD28
.text:000000000000BD28 loc_BD28:                               ; CODE XREF: re_string_reconstruct+59A↑j
.text:000000000000BD28                 mov     rsi, [rbx]
.text:000000000000BD2B                 add     rsi, rdx
.text:000000000000BD2E                 movzx   esi, byte ptr [rsi+r15]
.text:000000000000BD33                 movzx   esi, byte ptr [rcx+rsi]
.text:000000000000BD37                 mov     rcx, [rbx+8]
.text:000000000000BD3B                 mov     [rcx+rdx], sil
.text:000000000000BD3F                 add     rdx, 1
.text:000000000000BD43                 cmp     rax, rdx
.text:000000000000BD46                 jnz     short loc_BD20
.text:000000000000BD48
.text:000000000000BD48 loc_BD48:                               ; CODE XREF: re_string_reconstruct+59C↑j
.text:000000000000BD48                 mov     [rbx+30h], rdx
.text:000000000000BD4C                 mov     [rbx+38h], rdx
.text:000000000000BD50                 jmp     loc_B8B3
.text:000000000000BD50 ; ---------------------------------------------------------------------------
.text:000000000000BD55                 align 8
.text:000000000000BD58
.text:000000000000BD58 loc_BD58:                               ; CODE XREF: re_string_reconstruct+1EE↑j
.text:000000000000BD58                 mov     rax, [rbx]
.text:000000000000BD5B                 mov     rdx, [rbx+78h]
.text:000000000000BD5F                 add     rax, rbp
.text:000000000000BD62                 test    rdx, rdx
.text:000000000000BD65                 movzx   eax, byte ptr [r11+rax-1]
.text:000000000000BD6B                 mov     qword ptr [rbx+38h], 0
.text:000000000000BD73                 jz      short loc_BD79
.text:000000000000BD75                 movzx   eax, byte ptr [rdx+rax]
.text:000000000000BD79
.text:000000000000BD79 loc_BD79:                               ; CODE XREF: re_string_reconstruct+5F3↑j
.text:000000000000BD79                 mov     rcx, [rbx+80h]
.text:000000000000BD80                 movzx   edx, al
.text:000000000000BD83                 sar     rdx, 6
.text:000000000000BD87                 mov     rcx, [rcx+rdx*8]
.text:000000000000BD8B                 mov     edx, 1
.text:000000000000BD90                 bt      rcx, rax
.text:000000000000BD94                 jb      short loc_BDB0
.text:000000000000BD96                 xor     edx, edx
.text:000000000000BD98                 cmp     al, 0Ah
.text:000000000000BD9A                 jnz     short loc_BDB0
.text:000000000000BD9C                 xor     edx, edx
.text:000000000000BD9E                 cmp     byte ptr [rbx+8Dh], 0
.text:000000000000BDA5                 setnz   dl
.text:000000000000BDA8                 add     edx, edx
.text:000000000000BDAA                 nop     word ptr [rax+rax+00h]
.text:000000000000BDB0
.text:000000000000BDB0 loc_BDB0:                               ; CODE XREF: re_string_reconstruct+614↑j
.text:000000000000BDB0                                         ; re_string_reconstruct+61A↑j
.text:000000000000BDB0                 mov     [rbx+70h], edx
.text:000000000000BDB3                 jmp     loc_BB28
.text:000000000000BDB8 ; ---------------------------------------------------------------------------
.text:000000000000BDB8
.text:000000000000BDB8 loc_BDB8:                               ; CODE XREF: re_string_reconstruct+406↑j
.text:000000000000BDB8                 jnz     loc_BBAC
.text:000000000000BDBE                 xchg    ax, ax
.text:000000000000BDC0
.text:000000000000BDC0 loc_BDC0:                               ; CODE XREF: re_string_reconstruct+41F↑j
.text:000000000000BDC0                 mov     qword ptr [rbx+30h], 0
.text:000000000000BDC8                 xor     edx, edx
.text:000000000000BDCA                 jmp     loc_BBF1
.text:000000000000BDCF ; ---------------------------------------------------------------------------
.text:000000000000BDCF
.text:000000000000BDCF loc_BDCF:                               ; CODE XREF: re_string_reconstruct+208↑j
.text:000000000000BDCF                 sub     r14, r15
.text:000000000000BDD2                 mov     r12, r14
.text:000000000000BDD5                 mov     [rbx+30h], r14
.text:000000000000BDD9
.text:000000000000BDD9 loc_BDD9:                               ; CODE XREF: re_string_reconstruct+27F↑j
.text:000000000000BDD9                 lea     rsi, [r8-1]
.text:000000000000BDDD                 mov     edx, r10d
.text:000000000000BDE0                 mov     rdi, rbx
.text:000000000000BDE3                 call    re_string_context_at
.text:000000000000BDE8                 mov     [rbx+70h], eax
.text:000000000000BDEB                 jmp     loc_BA2A
.text:000000000000BDF0 ; ---------------------------------------------------------------------------
.text:000000000000BDF0
.text:000000000000BDF0 loc_BDF0:                               ; CODE XREF: re_string_reconstruct+577↑j
.text:000000000000BDF0                 mov     rdi, rbx
.text:000000000000BDF3                 call    build_upper_buffer
.text:000000000000BDF8                 jmp     loc_B8B3
.text:000000000000BDFD ; ---------------------------------------------------------------------------
.text:000000000000BDFD
.text:000000000000BDFD loc_BDFD:                               ; CODE XREF: re_string_reconstruct+1D2↑j
.text:000000000000BDFD                 mov     rdx, [rbx+50h]
.text:000000000000BE01                 mov     byte ptr [rbx+8Ch], 0
.text:000000000000BE08                 add     rdx, rbp
.text:000000000000BE0B                 sub     rdx, r15
.text:000000000000BE0E                 mov     [rbx+58h], rdx
.text:000000000000BE12                 mov     rdx, [rbx+60h]
.text:000000000000BE16                 add     rdx, rbp
.text:000000000000BE19                 sub     rdx, r15
.text:000000000000BE1C                 mov     [rbx+68h], rdx
.text:000000000000BE20                 jmp     loc_B958
.text:000000000000BE25 ; ---------------------------------------------------------------------------
.text:000000000000BE25
.text:000000000000BE25 loc_BE25:                               ; CODE XREF: re_string_reconstruct+264↑j
.text:000000000000BE25                 test    rax, rax
.text:000000000000BE28                 jz      short loc_BE9D
.text:000000000000BE2A                 test    r12, r12
.text:000000000000BE2D                 jz      short loc_BE9D
.text:000000000000BE2F                 mov     rax, [rbx]
.text:000000000000BE32                 movzx   edx, byte ptr [rax+r14]
.text:000000000000BE37
.text:000000000000BE37 loc_BE37:                               ; CODE XREF: re_string_reconstruct+71F↓j
.text:000000000000BE37                 mov     rax, [rsp+78h+var_60]
.text:000000000000BE3C                 mov     [rbx+20h], rax
.text:000000000000BE40                 mov     eax, 1
.text:000000000000BE45                 jmp     loc_B9EA
.text:000000000000BE4A ; ---------------------------------------------------------------------------
.text:000000000000BE4A
.text:000000000000BE4A loc_BE4A:                               ; CODE XREF: re_string_reconstruct+2AE↑j
.text:000000000000BE4A                 jle     short loc_BE67
.text:000000000000BE4C                 mov     rax, [rbx+10h]
.text:000000000000BE50                 lea     rdx, [rax+r12*4]
.text:000000000000BE54                 nop     dword ptr [rax+00h]
.text:000000000000BE58
.text:000000000000BE58 loc_BE58:                               ; CODE XREF: re_string_reconstruct+6E5↓j
.text:000000000000BE58                 mov     dword ptr [rax], 0FFFFFFFFh
.text:000000000000BE5E                 add     rax, 4
.text:000000000000BE62                 cmp     rdx, rax
.text:000000000000BE65                 jnz     short loc_BE58
.text:000000000000BE67
.text:000000000000BE67 loc_BE67:                               ; CODE XREF: re_string_reconstruct:loc_BE4A↑j
.text:000000000000BE67                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000BE6E                 jnz     short loc_BEC8
.text:000000000000BE70                 mov     [rbx+38h], r12
.text:000000000000BE74                 jmp     loc_B87A
.text:000000000000BE79 ; ---------------------------------------------------------------------------
.text:000000000000BE79
.text:000000000000BE79 loc_BE79:                               ; CODE XREF: re_string_reconstruct+28C↑j
.text:000000000000BE79                 mov     edi, edx        ; wc
.text:000000000000BE7B                 mov     dword ptr [rsp+78h+var_78], edx
.text:000000000000BE7E                 call    _iswalnum
.text:000000000000BE83                 test    eax, eax
.text:000000000000BE85                 jnz     short loc_BE93
.text:000000000000BE87                 mov     edx, dword ptr [rsp+78h+var_78]
.text:000000000000BE8A                 cmp     edx, 5Fh ; '_'
.text:000000000000BE8D                 jnz     loc_BA12
.text:000000000000BE93
.text:000000000000BE93 loc_BE93:                               ; CODE XREF: re_string_reconstruct+705↑j
.text:000000000000BE93                 mov     eax, 1
.text:000000000000BE98                 jmp     loc_BA27
.text:000000000000BE9D ; ---------------------------------------------------------------------------
.text:000000000000BE9D
.text:000000000000BE9D loc_BE9D:                               ; CODE XREF: re_string_reconstruct+6A8↑j
.text:000000000000BE9D                                         ; re_string_reconstruct+6AD↑j
.text:000000000000BE9D                 xor     edx, edx
.text:000000000000BE9F                 jmp     short loc_BE37
.text:000000000000BEA1 ; ---------------------------------------------------------------------------
.text:000000000000BEA1
.text:000000000000BEA1 loc_BEA1:                               ; CODE XREF: re_string_reconstruct+556↑j
.text:000000000000BEA1                 mov     edx, [rsp+78h+wc]
.text:000000000000BEA5                 sub     rax, r12
.text:000000000000BEA8                 mov     qword ptr [rbx+20h], 0
.text:000000000000BEB0                 mov     r12, rax
.text:000000000000BEB3                 mov     [rbx+30h], rax
.text:000000000000BEB7                 cmp     edx, 0FFFFFFFFh
.text:000000000000BEBA                 jnz     loc_BA05
.text:000000000000BEC0                 jmp     loc_BCDC
.text:000000000000BEC0 ; ---------------------------------------------------------------------------
.text:000000000000BEC5                 align 8
.text:000000000000BEC8
.text:000000000000BEC8 loc_BEC8:                               ; CODE XREF: re_string_reconstruct+6EE↑j
.text:000000000000BEC8                 mov     rdi, [rbx+8]    ; s
.text:000000000000BECC                 mov     rdx, r12        ; n
.text:000000000000BECF                 mov     esi, 0FFh       ; c
.text:000000000000BED4                 call    _memset
.text:000000000000BED9                 mov     r12, [rbx+30h]
.text:000000000000BEDD                 jmp     loc_BA34
.text:000000000000BEE2 ; ---------------------------------------------------------------------------
.text:000000000000BEE2
.text:000000000000BEE2 loc_BEE2:                               ; CODE XREF: re_string_reconstruct+514↑j
.text:000000000000BEE2                 cmp     rdx, 6
.text:000000000000BEE6                 mov     edi, 6
.text:000000000000BEEB                 lea     r11, [rsp+78h+var_46]
.text:000000000000BEF0                 cmovle  rdi, rdx
.text:000000000000BEF4                 sub     edi, 1
.text:000000000000BEF7                 test    edi, edi
.text:000000000000BEF9                 movsxd  rax, edi
.text:000000000000BEFC                 js      short loc_BF12
.text:000000000000BEFE
.text:000000000000BEFE loc_BEFE:                               ; CODE XREF: re_string_reconstruct+790↓j
.text:000000000000BEFE                 movzx   edi, byte ptr [rsi+rax]
.text:000000000000BF02                 movzx   edi, byte ptr [rcx+rdi]
.text:000000000000BF06                 mov     [r11+rax], dil
.text:000000000000BF0A                 sub     rax, 1
.text:000000000000BF0E                 test    eax, eax
.text:000000000000BF10                 jns     short loc_BEFE
.text:000000000000BF12
.text:000000000000BF12 loc_BF12:                               ; CODE XREF: re_string_reconstruct+77C↑j
.text:000000000000BF12                 mov     rsi, r11
.text:000000000000BF15                 jmp     loc_BC9A
.text:000000000000BF1A ; ---------------------------------------------------------------------------
.text:000000000000BF1A
.text:000000000000BF1A loc_BF1A:                               ; CODE XREF: re_string_reconstruct+14B↑j
.text:000000000000BF1A                 call    ___stack_chk_fail
.text:000000000000BF1A ; } // starts at B780
.text:000000000000BF1A re_string_reconstruct endp
.text:000000000000BF1A
.text:000000000000BF1A ; ---------------------------------------------------------------------------
.text:000000000000BF1F                 align 20h
.text:000000000000BF20
.text:000000000000BF20 ; =============== S U B R O U T I N E =======================================
.text:000000000000BF20
.text:000000000000BF20
.text:000000000000BF20 _sub_epsilon_src_nodes proc near        ; CODE XREF: update_cur_sifted_state+44C↓p
.text:000000000000BF20                                         ; update_cur_sifted_state+50A↓p ...
.text:000000000000BF20
.text:000000000000BF20 var_78          = qword ptr -78h
.text:000000000000BF20 var_70          = qword ptr -70h
.text:000000000000BF20 var_68          = qword ptr -68h
.text:000000000000BF20 var_60          = qword ptr -60h
.text:000000000000BF20 var_58          = xmmword ptr -58h
.text:000000000000BF20 ptr             = qword ptr -48h
.text:000000000000BF20 var_40          = qword ptr -40h
.text:000000000000BF20
.text:000000000000BF20 ; __unwind {
.text:000000000000BF20                 push    r15
.text:000000000000BF22                 push    r14
.text:000000000000BF24                 mov     r14, rdx
.text:000000000000BF27                 push    r13
.text:000000000000BF29                 push    r12
.text:000000000000BF2B                 lea     rdx, [rsi+rsi*2]
.text:000000000000BF2F                 push    rbp
.text:000000000000BF30                 push    rbx
.text:000000000000BF31                 pxor    xmm0, xmm0
.text:000000000000BF35                 sub     rsp, 48h
.text:000000000000BF39                 mov     rax, fs:28h
.text:000000000000BF42                 mov     [rsp+78h+var_40], rax
.text:000000000000BF47                 xor     eax, eax
.text:000000000000BF49                 mov     rax, [rdi+38h]
.text:000000000000BF4D                 mov     [rsp+78h+ptr], 0
.text:000000000000BF56                 movaps  [rsp+78h+var_58], xmm0
.text:000000000000BF5B                 mov     [rsp+78h+var_68], rcx
.text:000000000000BF60                 lea     rbp, [rax+rdx*8]
.text:000000000000BF64                 mov     r10, [rbp+8]
.text:000000000000BF68                 test    r10, r10
.text:000000000000BF6B                 jle     loc_C152
.text:000000000000BF71                 lea     rax, [rsp+78h+var_58]
.text:000000000000BF76                 mov     r12, rdi
.text:000000000000BF79                 mov     r13, rsi
.text:000000000000BF7C                 xor     ebx, ebx
.text:000000000000BF7E                 mov     [rsp+78h+var_60], rax
.text:000000000000BF83                 jmp     short loc_BFDD
.text:000000000000BF83 ; ---------------------------------------------------------------------------
.text:000000000000BF85                 align 8
.text:000000000000BF88
.text:000000000000BF88 loc_BF88:                               ; CODE XREF: _sub_epsilon_src_nodes+11B↓j
.text:000000000000BF88                 test    rax, rax
.text:000000000000BF8B                 jnz     loc_C068
.text:000000000000BF91                 mov     rdi, [r14+8]
.text:000000000000BF95                 lea     rsi, [r14+10h]
.text:000000000000BF99                 mov     rdx, r8
.text:000000000000BF9C                 call    re_node_set_contains_isra_3
.text:000000000000BFA1                 test    rax, rax
.text:000000000000BFA4                 jz      loc_C068
.text:000000000000BFAA
.text:000000000000BFAA loc_BFAA:                               ; CODE XREF: _sub_epsilon_src_nodes+139↓j
.text:000000000000BFAA                                         ; _sub_epsilon_src_nodes+182↓j
.text:000000000000BFAA                 mov     rdx, [r12+38h]
.text:000000000000BFAF                 mov     rsi, [rsp+78h+var_68]
.text:000000000000BFB4                 mov     rdi, [rsp+78h+var_60]
.text:000000000000BFB9                 add     rdx, r9
.text:000000000000BFBC                 call    re_node_set_add_intersect
.text:000000000000BFC1                 test    eax, eax
.text:000000000000BFC3                 jnz     loc_C140
.text:000000000000BFC9                 mov     r10, [rbp+8]
.text:000000000000BFCD                 nop     dword ptr [rax]
.text:000000000000BFD0
.text:000000000000BFD0 loc_BFD0:                               ; CODE XREF: _sub_epsilon_src_nodes+C8↓j
.text:000000000000BFD0                                         ; _sub_epsilon_src_nodes+D9↓j ...
.text:000000000000BFD0                 add     rbx, 1
.text:000000000000BFD4                 cmp     r10, rbx
.text:000000000000BFD7                 jle     loc_C0B0
.text:000000000000BFDD
.text:000000000000BFDD loc_BFDD:                               ; CODE XREF: _sub_epsilon_src_nodes+63↑j
.text:000000000000BFDD                 mov     rax, [rbp+10h]
.text:000000000000BFE1                 mov     rax, [rax+rbx*8]
.text:000000000000BFE5                 cmp     r13, rax
.text:000000000000BFE8                 jz      short loc_BFD0
.text:000000000000BFEA                 mov     rdx, rax
.text:000000000000BFED                 shl     rdx, 4
.text:000000000000BFF1                 add     rdx, [r12]
.text:000000000000BFF5                 test    byte ptr [rdx+8], 8
.text:000000000000BFF9                 jz      short loc_BFD0
.text:000000000000BFFB                 lea     r9, [rax+rax*2]
.text:000000000000BFFF                 mov     rcx, [r12+28h]
.text:000000000000C004                 lea     r11, [rbp+10h]
.text:000000000000C008                 mov     rdi, r10
.text:000000000000C00B                 shl     r9, 3
.text:000000000000C00F                 mov     rsi, r11
.text:000000000000C012                 add     rcx, r9
.text:000000000000C015                 mov     r15, [rcx+10h]
.text:000000000000C019                 mov     [rsp+78h+var_70], rcx
.text:000000000000C01E                 mov     r8, [r15]
.text:000000000000C021                 mov     rdx, r8
.text:000000000000C024                 mov     [rsp+78h+var_78], r8
.text:000000000000C028                 call    re_node_set_contains_isra_3
.text:000000000000C02D                 mov     rcx, [rsp+78h+var_70]
.text:000000000000C032                 mov     r8, [rsp+78h+var_78]
.text:000000000000C036                 cmp     qword ptr [rcx+8], 1
.text:000000000000C03B                 jg      loc_BF88
.text:000000000000C041                 test    rax, rax
.text:000000000000C044                 jnz     short loc_BFD0
.text:000000000000C046                 mov     rdi, [r14+8]
.text:000000000000C04A                 lea     rsi, [r14+10h]
.text:000000000000C04E                 mov     rdx, r8
.text:000000000000C051                 call    re_node_set_contains_isra_3
.text:000000000000C056                 test    rax, rax
.text:000000000000C059                 jnz     loc_BFAA
.text:000000000000C05F                 jmp     loc_BFD0
.text:000000000000C05F ; ---------------------------------------------------------------------------
.text:000000000000C064                 align 8
.text:000000000000C068
.text:000000000000C068 loc_C068:                               ; CODE XREF: _sub_epsilon_src_nodes+6B↑j
.text:000000000000C068                                         ; _sub_epsilon_src_nodes+84↑j
.text:000000000000C068                 mov     r15, [r15+8]
.text:000000000000C06C                 test    r15, r15
.text:000000000000C06F                 jle     loc_BFD0
.text:000000000000C075                 mov     rdx, r15
.text:000000000000C078                 mov     rsi, r11
.text:000000000000C07B                 mov     rdi, r10
.text:000000000000C07E                 call    re_node_set_contains_isra_3
.text:000000000000C083                 test    rax, rax
.text:000000000000C086                 jnz     loc_BFD0
.text:000000000000C08C                 mov     rdi, [r14+8]
.text:000000000000C090                 lea     rsi, [r14+10h]
.text:000000000000C094                 call    re_node_set_contains_isra_3
.text:000000000000C099                 test    rax, rax
.text:000000000000C09C                 jz      loc_BFD0
.text:000000000000C0A2                 jmp     loc_BFAA
.text:000000000000C0A2 ; ---------------------------------------------------------------------------
.text:000000000000C0A7                 align 10h
.text:000000000000C0B0
.text:000000000000C0B0 loc_C0B0:                               ; CODE XREF: _sub_epsilon_src_nodes+B7↑j
.text:000000000000C0B0                 xor     r9d, r9d
.text:000000000000C0B3                 test    r10, r10
.text:000000000000C0B6                 lea     r11, [rsp+78h+ptr]
.text:000000000000C0BB                 jle     short loc_C10C
.text:000000000000C0BD                 nop     dword ptr [rax]
.text:000000000000C0C0
.text:000000000000C0C0 loc_C0C0:                               ; CODE XREF: _sub_epsilon_src_nodes+1EA↓j
.text:000000000000C0C0                 mov     rax, [rbp+10h]
.text:000000000000C0C4                 mov     rdi, qword ptr [rsp+78h+var_58+8]
.text:000000000000C0C9                 mov     rsi, r11
.text:000000000000C0CC                 mov     r10, [rax+r9*8]
.text:000000000000C0D0                 mov     rdx, r10
.text:000000000000C0D3                 call    re_node_set_contains_isra_3
.text:000000000000C0D8                 test    rax, rax
.text:000000000000C0DB                 jnz     short loc_C102
.text:000000000000C0DD                 lea     rbx, [r14+10h]
.text:000000000000C0E1                 mov     rdi, [r14+8]
.text:000000000000C0E5                 mov     rsi, rbx
.text:000000000000C0E8                 call    re_node_set_contains_isra_3
.text:000000000000C0ED                 sub     rax, 1
.text:000000000000C0F1                 mov     rdx, rax
.text:000000000000C0F4                 js      short loc_C102
.text:000000000000C0F6                 lea     rdi, [r14+8]
.text:000000000000C0FA                 mov     rsi, rbx
.text:000000000000C0FD                 call    re_node_set_remove_at_isra_4_part_5
.text:000000000000C102
.text:000000000000C102 loc_C102:                               ; CODE XREF: _sub_epsilon_src_nodes+1BB↑j
.text:000000000000C102                                         ; _sub_epsilon_src_nodes+1D4↑j
.text:000000000000C102                 add     r9, 1
.text:000000000000C106                 cmp     [rbp+8], r9
.text:000000000000C10A                 jg      short loc_C0C0
.text:000000000000C10C
.text:000000000000C10C loc_C10C:                               ; CODE XREF: _sub_epsilon_src_nodes+19B↑j
.text:000000000000C10C                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000C111
.text:000000000000C111 loc_C111:                               ; CODE XREF: _sub_epsilon_src_nodes+234↓j
.text:000000000000C111                 call    _free
.text:000000000000C116                 xor     eax, eax
.text:000000000000C118
.text:000000000000C118 loc_C118:                               ; CODE XREF: _sub_epsilon_src_nodes+230↓j
.text:000000000000C118                 mov     rsi, [rsp+78h+var_40]
.text:000000000000C11D                 xor     rsi, fs:28h
.text:000000000000C126                 jnz     short loc_C156
.text:000000000000C128                 add     rsp, 48h
.text:000000000000C12C                 pop     rbx
.text:000000000000C12D                 pop     rbp
.text:000000000000C12E                 pop     r12
.text:000000000000C130                 pop     r13
.text:000000000000C132                 pop     r14
.text:000000000000C134                 pop     r15
.text:000000000000C136                 retn
.text:000000000000C136 ; ---------------------------------------------------------------------------
.text:000000000000C137                 align 20h
.text:000000000000C140
.text:000000000000C140 loc_C140:                               ; CODE XREF: _sub_epsilon_src_nodes+A3↑j
.text:000000000000C140                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000C145                 mov     dword ptr [rsp+78h+var_78], eax
.text:000000000000C148                 call    _free
.text:000000000000C14D                 mov     eax, dword ptr [rsp+78h+var_78]
.text:000000000000C150                 jmp     short loc_C118
.text:000000000000C152 ; ---------------------------------------------------------------------------
.text:000000000000C152
.text:000000000000C152 loc_C152:                               ; CODE XREF: _sub_epsilon_src_nodes+4B↑j
.text:000000000000C152                 xor     edi, edi
.text:000000000000C154                 jmp     short loc_C111
.text:000000000000C156 ; ---------------------------------------------------------------------------
.text:000000000000C156
.text:000000000000C156 loc_C156:                               ; CODE XREF: _sub_epsilon_src_nodes+206↑j
.text:000000000000C156                 call    ___stack_chk_fail
.text:000000000000C156 ; } // starts at BF20
.text:000000000000C156 _sub_epsilon_src_nodes endp
.text:000000000000C156
.text:000000000000C156 ; ---------------------------------------------------------------------------
.text:000000000000C15B                 align 20h
.text:000000000000C160
.text:000000000000C160 ; =============== S U B R O U T I N E =======================================
.text:000000000000C160
.text:000000000000C160
.text:000000000000C160 build_trtable   proc near               ; CODE XREF: re_search_internal+1090↓p
.text:000000000000C160
.text:000000000000C160 var_130         = qword ptr -130h
.text:000000000000C160 ptr             = qword ptr -128h
.text:000000000000C160 var_120         = qword ptr -120h
.text:000000000000C160 var_118         = qword ptr -118h
.text:000000000000C160 var_110         = qword ptr -110h
.text:000000000000C160 var_108         = qword ptr -108h
.text:000000000000C160 var_100         = qword ptr -100h
.text:000000000000C160 var_F8          = qword ptr -0F8h
.text:000000000000C160 var_E9          = byte ptr -0E9h
.text:000000000000C160 var_E8          = qword ptr -0E8h
.text:000000000000C160 var_E0          = qword ptr -0E0h
.text:000000000000C160 var_CC          = dword ptr -0CCh
.text:000000000000C160 var_C8          = qword ptr -0C8h
.text:000000000000C160 var_C0          = qword ptr -0C0h
.text:000000000000C160 var_B8          = qword ptr -0B8h
.text:000000000000C160 var_A8          = xmmword ptr -0A8h
.text:000000000000C160 var_98          = xmmword ptr -98h
.text:000000000000C160 var_88          = xmmword ptr -88h
.text:000000000000C160 var_78          = xmmword ptr -78h
.text:000000000000C160 var_68          = xmmword ptr -68h
.text:000000000000C160 var_58          = xmmword ptr -58h
.text:000000000000C160 var_40          = qword ptr -40h
.text:000000000000C160
.text:000000000000C160 ; __unwind {
.text:000000000000C160                 push    r15
.text:000000000000C162                 push    r14
.text:000000000000C164                 mov     r15, rdi
.text:000000000000C167                 push    r13
.text:000000000000C169                 push    r12
.text:000000000000C16B                 mov     edi, 3800h      ; size
.text:000000000000C170                 push    rbp
.text:000000000000C171                 push    rbx
.text:000000000000C172                 sub     rsp, 108h
.text:000000000000C179                 mov     rax, fs:28h
.text:000000000000C182                 mov     [rsp+138h+var_40], rax
.text:000000000000C18A                 xor     eax, eax
.text:000000000000C18C                 mov     [rsp+138h+var_130], rsi
.text:000000000000C191                 call    _malloc
.text:000000000000C196                 test    rax, rax
.text:000000000000C199                 mov     [rsp+138h+var_120], rax
.text:000000000000C19E                 jz      loc_C570
.text:000000000000C1A4                 mov     rax, [rsp+138h+var_120]
.text:000000000000C1A9                 pxor    xmm0, xmm0
.text:000000000000C1AD                 lea     rbx, [rax+1800h]
.text:000000000000C1B4                 mov     rax, [rsp+138h+var_130]
.text:000000000000C1B9                 movaps  [rsp+138h+var_A8], xmm0
.text:000000000000C1C1                 mov     [rsp+138h+var_F8], rbx
.text:000000000000C1C6                 movaps  [rsp+138h+var_98], xmm0
.text:000000000000C1CE                 cmp     qword ptr [rax+10h], 0
.text:000000000000C1D3                 mov     qword ptr [rax+58h], 0
.text:000000000000C1DB                 mov     qword ptr [rax+60h], 0
.text:000000000000C1E3                 jle     loc_CC5A
.text:000000000000C1E9                 mov     [rsp+138h+var_108], r15
.text:000000000000C1EE                 xor     ebp, ebp
.text:000000000000C1F0                 mov     [rsp+138h+ptr], 0
.text:000000000000C1F9                 mov     r15, rbx
.text:000000000000C1FC
.text:000000000000C1FC loc_C1FC:                               ; CODE XREF: build_trtable+113↓j
.text:000000000000C1FC                 mov     rbx, [rsp+138h+ptr]
.text:000000000000C201                 lea     rax, ds:0[rbx*8]
.text:000000000000C209                 mov     [rsp+138h+var_118], rax
.text:000000000000C20E                 mov     rax, [rsp+138h+var_130]
.text:000000000000C213                 mov     rax, [rax+18h]
.text:000000000000C217                 mov     r13, [rax+rbx*8]
.text:000000000000C21B                 mov     rax, [rsp+138h+var_108]
.text:000000000000C220                 shl     r13, 4
.text:000000000000C224                 add     r13, [rax]
.text:000000000000C227                 movzx   r14d, byte ptr [r13+8]
.text:000000000000C22C                 mov     eax, [r13+8]
.text:000000000000C230                 shr     eax, 8
.text:000000000000C233                 and     ax, 3FFh
.text:000000000000C237                 cmp     r14d, 1
.text:000000000000C23B                 jz      loc_C5A0
.text:000000000000C241                 cmp     r14d, 3
.text:000000000000C245                 jz      loc_CA10
.text:000000000000C24B                 cmp     r14d, 5
.text:000000000000C24F                 jz      loc_C8D0
.text:000000000000C255                 cmp     r14d, 7
.text:000000000000C259                 jz      loc_CA39
.text:000000000000C25F
.text:000000000000C25F loc_C25F:                               ; CODE XREF: build_trtable+4CF↓j
.text:000000000000C25F                                         ; build_trtable+524↓j ...
.text:000000000000C25F                 mov     rbx, [rsp+138h+var_130]
.text:000000000000C264                 add     [rsp+138h+ptr], 1
.text:000000000000C26A                 mov     rax, [rsp+138h+ptr]
.text:000000000000C26F                 cmp     rax, [rbx+10h]
.text:000000000000C273                 jl      short loc_C1FC
.text:000000000000C275                 test    rbp, rbp
.text:000000000000C278                 mov     r15, [rsp+138h+var_108]
.text:000000000000C27D                 jle     loc_CCD9
.text:000000000000C283                 lea     rbx, [rbp+1]
.text:000000000000C287                 mov     [rsp+138h+var_C0], 0
.text:000000000000C290                 mov     [rsp+138h+var_C8], rbx
.text:000000000000C295                 shl     rbx, 3
.text:000000000000C299                 mov     rdi, rbx        ; size
.text:000000000000C29C                 call    _malloc
.text:000000000000C2A1                 test    rax, rax
.text:000000000000C2A4                 mov     r12, rax
.text:000000000000C2A7                 mov     [rsp+138h+var_B8], rax
.text:000000000000C2AF                 jz      loc_CAAF
.text:000000000000C2B5                 mov     rax, 0AAAAAAAAAAAA855h
.text:000000000000C2BF                 mov     [rsp+138h+var_CC], 0
.text:000000000000C2C7                 cmp     rbp, rax
.text:000000000000C2CA                 jg      loc_CAAF
.text:000000000000C2D0                 lea     rax, [rbp+rbp*2+0]
.text:000000000000C2D5                 shl     rax, 3
.text:000000000000C2D9                 mov     rdi, rax        ; size
.text:000000000000C2DC                 mov     [rsp+138h+var_E0], rax
.text:000000000000C2E1                 call    _malloc
.text:000000000000C2E6                 test    rax, rax
.text:000000000000C2E9                 mov     [rsp+138h+ptr], rax
.text:000000000000C2EE                 jz      loc_CAAF
.text:000000000000C2F4                 mov     rax, [rsp+138h+ptr]
.text:000000000000C2F9                 sub     rbx, 8
.text:000000000000C2FD                 mov     r12, [rsp+138h+var_F8]
.text:000000000000C302                 pxor    xmm0, xmm0
.text:000000000000C306                 lea     r14, [rsp+138h+var_C8]
.text:000000000000C30B                 mov     [rsp+138h+var_118], rbp
.text:000000000000C310                 mov     [rsp+138h+var_E9], 0
.text:000000000000C315                 mov     rbp, r15
.text:000000000000C318                 add     rax, rbx
.text:000000000000C31B                 mov     [rsp+138h+var_E8], r12
.text:000000000000C320                 add     rbx, rax
.text:000000000000C323                 mov     [rsp+138h+var_108], rax
.text:000000000000C328                 mov     rax, [rsp+138h+var_120]
.text:000000000000C32D                 movaps  [rsp+138h+var_68], xmm0
.text:000000000000C335                 mov     [rsp+138h+var_100], rbx
.text:000000000000C33A                 xor     ebx, ebx
.text:000000000000C33C                 lea     r13, [rax+8]
.text:000000000000C340                 lea     rax, [rsp+138h+var_CC]
.text:000000000000C345                 movaps  [rsp+138h+var_58], xmm0
.text:000000000000C34D                 mov     [rsp+138h+var_110], rax
.text:000000000000C352
.text:000000000000C352 loc_C352:                               ; CODE XREF: build_trtable+2C2↓j
.text:000000000000C352                 mov     [rsp+138h+var_C0], 0
.text:000000000000C35B                 cmp     qword ptr [r13+0], 0
.text:000000000000C360                 jle     short loc_C3A8
.text:000000000000C362                 xor     r15d, r15d
.text:000000000000C365                 nop     dword ptr [rax]
.text:000000000000C368
.text:000000000000C368 loc_C368:                               ; CODE XREF: build_trtable+246↓j
.text:000000000000C368                 mov     rax, [r13+8]
.text:000000000000C36C                 mov     rdx, [rax+r15*8]
.text:000000000000C370                 mov     rax, [rbp+18h]
.text:000000000000C374                 mov     rax, [rax+rdx*8]
.text:000000000000C378                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000C37C                 jz      short loc_C39E
.text:000000000000C37E                 lea     rdx, [rax+rax*2]
.text:000000000000C382                 mov     rax, [rbp+30h]
.text:000000000000C386                 mov     rdi, r14
.text:000000000000C389                 lea     rsi, [rax+rdx*8]
.text:000000000000C38D                 call    re_node_set_merge
.text:000000000000C392                 test    eax, eax
.text:000000000000C394                 mov     [rsp+138h+var_CC], eax
.text:000000000000C398                 jnz     loc_CA98
.text:000000000000C39E
.text:000000000000C39E loc_C39E:                               ; CODE XREF: build_trtable+21C↑j
.text:000000000000C39E                 add     r15, 1
.text:000000000000C3A2                 cmp     [r13+0], r15
.text:000000000000C3A6                 jg      short loc_C368
.text:000000000000C3A8
.text:000000000000C3A8 loc_C3A8:                               ; CODE XREF: build_trtable+200↑j
.text:000000000000C3A8                 mov     rdi, [rsp+138h+var_110]
.text:000000000000C3AD                 xor     ecx, ecx
.text:000000000000C3AF                 mov     rsi, rbp
.text:000000000000C3B2                 mov     rdx, r14
.text:000000000000C3B5                 call    re_acquire_state_context
.text:000000000000C3BA                 mov     rsi, [rsp+138h+ptr]
.text:000000000000C3BF                 test    rax, rax
.text:000000000000C3C2                 mov     [rsi+rbx*8], rax
.text:000000000000C3C6                 jz      loc_CB78
.text:000000000000C3CC
.text:000000000000C3CC loc_C3CC:                               ; CODE XREF: build_trtable+A1E↓j
.text:000000000000C3CC                 cmp     byte ptr [rax+68h], 0
.text:000000000000C3D0                 js      loc_CAF0
.text:000000000000C3D6                 mov     rdi, [rsp+138h+var_108]
.text:000000000000C3DB                 mov     rsi, [rsp+138h+var_100]
.text:000000000000C3E0                 mov     [rdi+rbx*8], rax
.text:000000000000C3E4                 mov     rax, [rsp+138h+ptr]
.text:000000000000C3E9                 mov     rax, [rax+rbx*8]
.text:000000000000C3ED                 mov     [rsi+rbx*8], rax
.text:000000000000C3F1
.text:000000000000C3F1 loc_C3F1:                               ; CODE XREF: build_trtable+9FC↓j
.text:000000000000C3F1                                         ; build_trtable+A08↓j
.text:000000000000C3F1                 lea     rdx, [rsp+138h+var_68]
.text:000000000000C3F9                 xor     eax, eax
.text:000000000000C3FB
.text:000000000000C3FB loc_C3FB:                               ; CODE XREF: build_trtable+2AF↓j
.text:000000000000C3FB                 mov     rcx, [rdx+rax]
.text:000000000000C3FF                 or      rcx, [r12+rax]
.text:000000000000C403                 mov     [rdx+rax], rcx
.text:000000000000C407                 add     rax, 8
.text:000000000000C40B                 cmp     rax, 20h ; ' '
.text:000000000000C40F                 jnz     short loc_C3FB
.text:000000000000C411                 add     rbx, 1
.text:000000000000C415                 add     r13, 18h
.text:000000000000C419                 add     r12, 20h ; ' '
.text:000000000000C41D                 cmp     rbx, [rsp+138h+var_118]
.text:000000000000C422                 jnz     loc_C352
.text:000000000000C428                 cmp     [rsp+138h+var_E9], 0
.text:000000000000C42D                 mov     r15, rbp
.text:000000000000C430                 mov     rbp, [rsp+138h+var_118]
.text:000000000000C435                 mov     [rsp+138h+var_118], rdx
.text:000000000000C43A                 jnz     loc_CB89
.text:000000000000C440                 mov     esi, 100h       ; size
.text:000000000000C445                 mov     edi, 8          ; nmemb
.text:000000000000C44A                 call    _calloc
.text:000000000000C44F                 mov     r11, rax
.text:000000000000C452                 mov     rax, [rsp+138h+var_130]
.text:000000000000C457                 test    r11, r11
.text:000000000000C45A                 mov     [rax+58h], r11
.text:000000000000C45E                 jz      loc_CA9D
.text:000000000000C464                 mov     rbx, [rsp+138h+var_F8]
.text:000000000000C469                 mov     r12, [rsp+138h+ptr]
.text:000000000000C46E                 xor     r9d, r9d
.text:000000000000C471                 mov     r13, [rsp+138h+var_108]
.text:000000000000C476                 mov     rdx, [rsp+138h+var_118]
.text:000000000000C47B                 add     rbx, 20h ; ' '
.text:000000000000C47F
.text:000000000000C47F loc_C47F:                               ; CODE XREF: build_trtable+35C↓j
.text:000000000000C47F                 mov     rax, [rdx+r9]
.text:000000000000C483                 test    rax, rax
.text:000000000000C486                 jz      short loc_C4B4
.text:000000000000C488                 mov     rsi, r9
.text:000000000000C48B                 mov     ecx, 1
.text:000000000000C490                 shl     rsi, 6
.text:000000000000C494                 add     rsi, r11
.text:000000000000C497                 nop     word ptr [rax+rax+00000000h]
.text:000000000000C4A0
.text:000000000000C4A0 loc_C4A0:                               ; CODE XREF: build_trtable+352↓j
.text:000000000000C4A0                 test    al, 1
.text:000000000000C4A2                 jnz     loc_CC08
.text:000000000000C4A8
.text:000000000000C4A8 loc_C4A8:                               ; CODE XREF: build_trtable+AE9↓j
.text:000000000000C4A8                                         ; build_trtable+AF5↓j
.text:000000000000C4A8                 add     rcx, rcx
.text:000000000000C4AB                 add     rsi, 8
.text:000000000000C4AF                 shr     rax, 1
.text:000000000000C4B2                 jnz     short loc_C4A0
.text:000000000000C4B4
.text:000000000000C4B4 loc_C4B4:                               ; CODE XREF: build_trtable+326↑j
.text:000000000000C4B4                 add     r9, 8
.text:000000000000C4B8                 cmp     r9, 20h ; ' '
.text:000000000000C4BC                 jnz     short loc_C47F
.text:000000000000C4BE
.text:000000000000C4BE loc_C4BE:                               ; CODE XREF: build_trtable+AA0↓j
.text:000000000000C4BE                 test    byte ptr [rsp+138h+var_68+1], 4
.text:000000000000C4C6                 jz      short loc_C502
.text:000000000000C4C8                 xor     eax, eax
.text:000000000000C4CA                 mov     rdx, [rsp+138h+var_E8]
.text:000000000000C4CF                 jmp     short loc_C4DE
.text:000000000000C4D1 ; ---------------------------------------------------------------------------
.text:000000000000C4D1
.text:000000000000C4D1 loc_C4D1:                               ; CODE XREF: build_trtable+385↓j
.text:000000000000C4D1                 add     rax, 1
.text:000000000000C4D5                 add     rdx, 20h ; ' '
.text:000000000000C4D9                 cmp     rax, rbp
.text:000000000000C4DC                 jz      short loc_C502
.text:000000000000C4DE
.text:000000000000C4DE loc_C4DE:                               ; CODE XREF: build_trtable+36F↑j
.text:000000000000C4DE                 test    qword ptr [rdx], 400h
.text:000000000000C4E5                 jz      short loc_C4D1
.text:000000000000C4E7                 mov     rbx, [rsp+138h+var_100]
.text:000000000000C4EC                 cmp     [rsp+138h+var_E9], 0
.text:000000000000C4F1                 mov     rax, [rbx+rax*8]
.text:000000000000C4F5                 mov     [r11+50h], rax
.text:000000000000C4F9                 jz      short loc_C502
.text:000000000000C4FB                 mov     [r11+850h], rax
.text:000000000000C502
.text:000000000000C502 loc_C502:                               ; CODE XREF: build_trtable+366↑j
.text:000000000000C502                                         ; build_trtable+37C↑j ...
.text:000000000000C502                 mov     rdi, [rsp+138h+ptr] ; ptr
.text:000000000000C507                 call    _free
.text:000000000000C50C                 mov     rdi, [rsp+138h+var_B8] ; ptr
.text:000000000000C514                 call    _free
.text:000000000000C519                 mov     rax, [rsp+138h+var_120]
.text:000000000000C51E                 mov     rbx, [rsp+138h+var_E0]
.text:000000000000C523                 lea     rbp, [rax+10h]
.text:000000000000C527                 add     rbx, rbp
.text:000000000000C52A
.text:000000000000C52A loc_C52A:                               ; CODE XREF: build_trtable+3DA↓j
.text:000000000000C52A                 mov     rdi, [rbp+0]    ; ptr
.text:000000000000C52E                 add     rbp, 18h
.text:000000000000C532                 call    _free
.text:000000000000C537                 cmp     rbx, rbp
.text:000000000000C53A                 jnz     short loc_C52A
.text:000000000000C53C                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000C541                 call    _free
.text:000000000000C546                 mov     eax, 1
.text:000000000000C54B                 jmp     short loc_C572
.text:000000000000C54D ; ---------------------------------------------------------------------------
.text:000000000000C54D
.text:000000000000C54D loc_C54D:                               ; CODE XREF: build_trtable+707↓j
.text:000000000000C54D                 test    rbp, rbp
.text:000000000000C550                 mov     qword ptr [rbx+8], 0
.text:000000000000C558                 mov     qword ptr [rbx], 0
.text:000000000000C55F                 jnz     loc_C890
.text:000000000000C565                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000C56A                 call    _free
.text:000000000000C56F                 nop
.text:000000000000C570
.text:000000000000C570 loc_C570:                               ; CODE XREF: build_trtable+3E↑j
.text:000000000000C570                                         ; build_trtable+763↓j ...
.text:000000000000C570                 xor     eax, eax
.text:000000000000C572
.text:000000000000C572 loc_C572:                               ; CODE XREF: build_trtable+3EB↑j
.text:000000000000C572                                         ; build_trtable+B22↓j
.text:000000000000C572                 mov     rbx, [rsp+138h+var_40]
.text:000000000000C57A                 xor     rbx, fs:28h
.text:000000000000C583                 jnz     loc_CCD4
.text:000000000000C589                 add     rsp, 108h
.text:000000000000C590                 pop     rbx
.text:000000000000C591                 pop     rbp
.text:000000000000C592                 pop     r12
.text:000000000000C594                 pop     r13
.text:000000000000C596                 pop     r14
.text:000000000000C598                 pop     r15
.text:000000000000C59A                 retn
.text:000000000000C59A ; ---------------------------------------------------------------------------
.text:000000000000C59B                 align 20h
.text:000000000000C5A0
.text:000000000000C5A0 loc_C5A0:                               ; CODE XREF: build_trtable+DB↑j
.text:000000000000C5A0                 movzx   ecx, byte ptr [r13+0]
.text:000000000000C5A5                 lea     r12, [rsp+138h+var_A8]
.text:000000000000C5AD                 mov     edi, 1
.text:000000000000C5B2                 mov     rdx, rcx
.text:000000000000C5B5                 and     ecx, 3Fh
.text:000000000000C5B8                 shr     rdx, 3
.text:000000000000C5BC                 shl     rdi, cl
.text:000000000000C5BF                 and     edx, 18h
.text:000000000000C5C2                 or      [r12+rdx], rdi
.text:000000000000C5C6
.text:000000000000C5C6 loc_C5C6:                               ; CODE XREF: build_trtable+7C9↓j
.text:000000000000C5C6                                         ; build_trtable+7D8↓j ...
.text:000000000000C5C6                 test    ax, ax
.text:000000000000C5C9                 jz      loc_C690
.text:000000000000C5CF                 test    al, 20h
.text:000000000000C5D1                 jnz     loc_C940
.text:000000000000C5D7
.text:000000000000C5D7 loc_C5D7:                               ; CODE XREF: build_trtable+80C↓j
.text:000000000000C5D7                 test    al, 80h
.text:000000000000C5D9                 jnz     loc_C874
.text:000000000000C5DF                 test    al, 4
.text:000000000000C5E1                 jz      short loc_C635
.text:000000000000C5E3                 cmp     r14d, 1
.text:000000000000C5E7                 jz      loc_C9C5
.text:000000000000C5ED                 mov     r8, [rsp+138h+var_108]
.text:000000000000C5F2                 cmp     dword ptr [r8+0B4h], 1
.text:000000000000C5FA                 jle     loc_CA52
.text:000000000000C600
.text:000000000000C600 loc_C600:                               ; CODE XREF: build_trtable+87D↓j
.text:000000000000C600                 mov     rdi, [r8+78h]
.text:000000000000C604                 xor     esi, esi
.text:000000000000C606                 xor     ecx, ecx
.text:000000000000C608
.text:000000000000C608 loc_C608:                               ; CODE XREF: build_trtable+4CA↓j
.text:000000000000C608                 mov     rdx, [rdi+rcx*8]
.text:000000000000C60C                 not     rdx
.text:000000000000C60F                 or      rdx, [r8+rcx*8+0B8h]
.text:000000000000C617                 and     rdx, [r12+rcx*8]
.text:000000000000C61B                 mov     [r12+rcx*8], rdx
.text:000000000000C61F                 add     rcx, 1
.text:000000000000C623                 or      rsi, rdx
.text:000000000000C626                 cmp     rcx, 4
.text:000000000000C62A                 jnz     short loc_C608
.text:000000000000C62C                 test    rsi, rsi
.text:000000000000C62F                 jz      loc_C25F
.text:000000000000C635
.text:000000000000C635 loc_C635:                               ; CODE XREF: build_trtable+481↑j
.text:000000000000C635                                         ; build_trtable+91B↓j
.text:000000000000C635                 test    al, 8
.text:000000000000C637                 jz      short loc_C690
.text:000000000000C639                 cmp     r14d, 1
.text:000000000000C63D                 jz      loc_C971
.text:000000000000C643                 mov     rdi, [rsp+138h+var_108]
.text:000000000000C648                 cmp     dword ptr [rdi+0B4h], 1
.text:000000000000C64F                 jle     loc_C98E
.text:000000000000C655
.text:000000000000C655 loc_C655:                               ; CODE XREF: build_trtable+828↓j
.text:000000000000C655                 mov     rsi, [rdi+78h]
.text:000000000000C659                 xor     ecx, ecx
.text:000000000000C65B                 xor     edx, edx
.text:000000000000C65D
.text:000000000000C65D loc_C65D:                               ; CODE XREF: build_trtable+51F↓j
.text:000000000000C65D                 mov     rax, [rdi+rdx*8+0B8h]
.text:000000000000C665                 and     rax, [rsi+rdx*8]
.text:000000000000C669                 not     rax
.text:000000000000C66C                 and     rax, [r12+rdx*8]
.text:000000000000C670                 mov     [r12+rdx*8], rax
.text:000000000000C674                 add     rdx, 1
.text:000000000000C678                 or      rcx, rax
.text:000000000000C67B                 cmp     rdx, 4
.text:000000000000C67F                 jnz     short loc_C65D
.text:000000000000C681                 test    rcx, rcx
.text:000000000000C684                 jz      loc_C25F
.text:000000000000C68A                 nop     word ptr [rax+rax+00h]
.text:000000000000C690
.text:000000000000C690 loc_C690:                               ; CODE XREF: build_trtable+469↑j
.text:000000000000C690                                         ; build_trtable+4D7↑j ...
.text:000000000000C690                 xor     ebx, ebx
.text:000000000000C692                 test    rbp, rbp
.text:000000000000C695                 jle     loc_C7FB
.text:000000000000C69B                 mov     [rsp+138h+var_110], r13
.text:000000000000C6A0                 mov     r13, r15
.text:000000000000C6A3                 nop     dword ptr [rax+rax+00h]
.text:000000000000C6A8
.text:000000000000C6A8 loc_C6A8:                               ; CODE XREF: build_trtable+692↓j
.text:000000000000C6A8                 mov     r10, rbx
.text:000000000000C6AB                 shl     r10, 5
.text:000000000000C6AF                 cmp     r14d, 1
.text:000000000000C6B3                 jnz     short loc_C6D8
.text:000000000000C6B5                 mov     rax, [rsp+138h+var_110]
.text:000000000000C6BA                 movzx   edx, byte ptr [rax]
.text:000000000000C6BD                 mov     rax, rdx
.text:000000000000C6C0                 shr     rax, 3
.text:000000000000C6C4                 and     eax, 18h
.text:000000000000C6C7                 add     rax, r13
.text:000000000000C6CA                 mov     rax, [rax+r10]
.text:000000000000C6CE                 bt      rax, rdx
.text:000000000000C6D2                 jnb     loc_C7EB
.text:000000000000C6D8
.text:000000000000C6D8 loc_C6D8:                               ; CODE XREF: build_trtable+553↑j
.text:000000000000C6D8                 lea     rdi, [r13+r10+0]
.text:000000000000C6DD                 lea     rsi, [rsp+138h+var_88]
.text:000000000000C6E5                 xor     ecx, ecx
.text:000000000000C6E7                 xor     eax, eax
.text:000000000000C6E9
.text:000000000000C6E9 loc_C6E9:                               ; CODE XREF: build_trtable+5A0↓j
.text:000000000000C6E9                 mov     rdx, [r12+rax*8]
.text:000000000000C6ED                 and     rdx, [rdi+rax*8]
.text:000000000000C6F1                 mov     [rsi+rax*8], rdx
.text:000000000000C6F5                 add     rax, 1
.text:000000000000C6F9                 or      rcx, rdx
.text:000000000000C6FC                 cmp     rax, 4
.text:000000000000C700                 jnz     short loc_C6E9
.text:000000000000C702                 test    rcx, rcx
.text:000000000000C705                 jz      loc_C7EB
.text:000000000000C70B                 lea     r11, [rsp+138h+var_68]
.text:000000000000C713                 xor     r15d, r15d
.text:000000000000C716                 xor     r9d, r9d
.text:000000000000C719                 xor     ecx, ecx
.text:000000000000C71B
.text:000000000000C71B loc_C71B:                               ; CODE XREF: build_trtable+5E8↓j
.text:000000000000C71B                 mov     rsi, [r12+rcx*8]
.text:000000000000C71F                 mov     rax, [rdi+rcx*8]
.text:000000000000C723                 mov     rdx, rsi
.text:000000000000C726                 not     rdx
.text:000000000000C729                 and     rdx, rax
.text:000000000000C72C                 not     rax
.text:000000000000C72F                 and     rax, rsi
.text:000000000000C732                 mov     [r11+rcx*8], rdx
.text:000000000000C736                 or      r9, rdx
.text:000000000000C739                 mov     [r12+rcx*8], rax
.text:000000000000C73D                 add     rcx, 1
.text:000000000000C741                 or      r15, rax
.text:000000000000C744                 cmp     rcx, 4
.text:000000000000C748                 jnz     short loc_C71B
.text:000000000000C74A                 mov     rdi, [rsp+138h+var_120]
.text:000000000000C74F                 lea     rax, [rbx+rbx*2]
.text:000000000000C753                 test    r9, r9
.text:000000000000C756                 lea     rdx, [rdi+rax*8]
.text:000000000000C75A                 jz      short loc_C7C4
.text:000000000000C75C                 mov     rax, rbp
.text:000000000000C75F                 movdqa  xmm0, [rsp+138h+var_68]
.text:000000000000C768                 shl     rax, 5
.text:000000000000C76C                 mov     rsi, rdx
.text:000000000000C76F                 mov     [rsp+138h+var_100], rdx
.text:000000000000C774                 add     rax, r13
.text:000000000000C777                 movups  xmmword ptr [rax], xmm0
.text:000000000000C77A                 movdqa  xmm0, [rsp+138h+var_58]
.text:000000000000C783                 movups  xmmword ptr [rax+10h], xmm0
.text:000000000000C787                 lea     rax, [rbp+rbp*2+0]
.text:000000000000C78C                 lea     rdi, [rdi+rax*8]
.text:000000000000C790                 movdqa  xmm0, [rsp+138h+var_88]
.text:000000000000C799                 movups  xmmword ptr [r13+r10+0], xmm0
.text:000000000000C79F                 movdqa  xmm0, [rsp+138h+var_78]
.text:000000000000C7A8                 movups  xmmword ptr [r13+r10+10h], xmm0
.text:000000000000C7AE                 call    re_node_set_init_copy
.text:000000000000C7B3                 test    eax, eax
.text:000000000000C7B5                 jnz     loc_C890
.text:000000000000C7BB                 mov     rdx, [rsp+138h+var_100]
.text:000000000000C7C0                 add     rbp, 1
.text:000000000000C7C4
.text:000000000000C7C4 loc_C7C4:                               ; CODE XREF: build_trtable+5FA↑j
.text:000000000000C7C4                 mov     rax, [rsp+138h+var_130]
.text:000000000000C7C9                 mov     rsi, [rsp+138h+var_118]
.text:000000000000C7CE                 mov     rdi, rdx
.text:000000000000C7D1                 mov     rax, [rax+18h]
.text:000000000000C7D5                 mov     rsi, [rax+rsi]
.text:000000000000C7D9                 call    re_node_set_insert
.text:000000000000C7DE                 test    al, al
.text:000000000000C7E0                 jz      loc_C890
.text:000000000000C7E6                 test    r15, r15
.text:000000000000C7E9                 jz      short loc_C7F8
.text:000000000000C7EB
.text:000000000000C7EB loc_C7EB:                               ; CODE XREF: build_trtable+572↑j
.text:000000000000C7EB                                         ; build_trtable+5A5↑j
.text:000000000000C7EB                 add     rbx, 1
.text:000000000000C7EF                 cmp     rbx, rbp
.text:000000000000C7F2                 jl      loc_C6A8
.text:000000000000C7F8
.text:000000000000C7F8 loc_C7F8:                               ; CODE XREF: build_trtable+689↑j
.text:000000000000C7F8                 mov     r15, r13
.text:000000000000C7FB
.text:000000000000C7FB loc_C7FB:                               ; CODE XREF: build_trtable+535↑j
.text:000000000000C7FB                 cmp     rbp, rbx
.text:000000000000C7FE                 jnz     loc_C25F
.text:000000000000C804                 mov     rax, rbp
.text:000000000000C807                 movdqa  xmm0, [rsp+138h+var_A8]
.text:000000000000C810                 shl     rax, 5
.text:000000000000C814                 mov     rbx, [rsp+138h+var_118]
.text:000000000000C819                 mov     edi, 8          ; size
.text:000000000000C81E                 add     rax, r15
.text:000000000000C821                 movups  xmmword ptr [rax], xmm0
.text:000000000000C824                 movdqa  xmm0, [rsp+138h+var_98]
.text:000000000000C82D                 movups  xmmword ptr [rax+10h], xmm0
.text:000000000000C831                 mov     rax, [rsp+138h+var_130]
.text:000000000000C836                 mov     rax, [rax+18h]
.text:000000000000C83A                 mov     r13, [rax+rbx]
.text:000000000000C83E                 mov     rbx, [rsp+138h+var_120]
.text:000000000000C843                 lea     rax, [rbp+rbp*2+0]
.text:000000000000C848                 lea     rbx, [rbx+rax*8]
.text:000000000000C84C                 mov     qword ptr [rbx], 1
.text:000000000000C853                 mov     qword ptr [rbx+8], 1
.text:000000000000C85B                 call    _malloc
.text:000000000000C860                 test    rax, rax
.text:000000000000C863                 mov     [rbx+10h], rax
.text:000000000000C867                 jz      loc_C54D
.text:000000000000C86D                 mov     [rax], r13
.text:000000000000C870                 add     rbp, 1
.text:000000000000C874
.text:000000000000C874 loc_C874:                               ; CODE XREF: build_trtable+479↑j
.text:000000000000C874                                         ; build_trtable+816↓j ...
.text:000000000000C874                 pxor    xmm0, xmm0
.text:000000000000C878                 movaps  xmmword ptr [r12], xmm0
.text:000000000000C87D                 movaps  xmmword ptr [r12+10h], xmm0
.text:000000000000C883                 jmp     loc_C25F
.text:000000000000C883 ; ---------------------------------------------------------------------------
.text:000000000000C888                 align 10h
.text:000000000000C890
.text:000000000000C890 loc_C890:                               ; CODE XREF: build_trtable+3FF↑j
.text:000000000000C890                                         ; build_trtable+655↑j ...
.text:000000000000C890                 mov     rax, [rsp+138h+var_120]
.text:000000000000C895                 lea     rbx, [rax+10h]
.text:000000000000C899                 lea     rax, [rbp+rbp*2+0]
.text:000000000000C89E                 lea     rbp, [rbx+rax*8]
.text:000000000000C8A2                 nop     word ptr [rax+rax+00h]
.text:000000000000C8A8
.text:000000000000C8A8 loc_C8A8:                               ; CODE XREF: build_trtable+757↓j
.text:000000000000C8A8                 mov     rdi, [rbx]      ; ptr
.text:000000000000C8AB                 add     rbx, 18h
.text:000000000000C8AF                 call    _free
.text:000000000000C8B4                 cmp     rbp, rbx
.text:000000000000C8B7                 jnz     short loc_C8A8
.text:000000000000C8B9                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000C8BE                 call    _free
.text:000000000000C8C3                 jmp     loc_C570
.text:000000000000C8C3 ; ---------------------------------------------------------------------------
.text:000000000000C8C8                 align 10h
.text:000000000000C8D0
.text:000000000000C8D0 loc_C8D0:                               ; CODE XREF: build_trtable+EF↑j
.text:000000000000C8D0                 mov     rsi, [rsp+138h+var_108]
.text:000000000000C8D5                 cmp     dword ptr [rsi+0B4h], 1
.text:000000000000C8DC                 jle     loc_C9E5
.text:000000000000C8E2                 mov     rsi, [rsi+78h]
.text:000000000000C8E6                 lea     r12, [rsp+138h+var_A8]
.text:000000000000C8EE                 xor     edx, edx
.text:000000000000C8F0
.text:000000000000C8F0 loc_C8F0:                               ; CODE XREF: build_trtable+7A4↓j
.text:000000000000C8F0                 mov     rcx, [r12+rdx]
.text:000000000000C8F4                 or      rcx, [rsi+rdx]
.text:000000000000C8F8                 mov     [r12+rdx], rcx
.text:000000000000C8FC                 add     rdx, 8
.text:000000000000C900                 cmp     rdx, 20h ; ' '
.text:000000000000C904                 jnz     short loc_C8F0
.text:000000000000C906
.text:000000000000C906 loc_C906:                               ; CODE XREF: build_trtable+8A1↓j
.text:000000000000C906                                         ; build_trtable+8ED↓j
.text:000000000000C906                 mov     rbx, [rsp+138h+var_108]
.text:000000000000C90B                 mov     rdx, [rbx+0D8h]
.text:000000000000C912                 test    dl, 40h
.text:000000000000C915                 jnz     short loc_C923
.text:000000000000C917                 and     qword ptr [rsp+138h+var_A8], 0FFFFFFFFFFFFFBFFh
.text:000000000000C923
.text:000000000000C923 loc_C923:                               ; CODE XREF: build_trtable+7B5↑j
.text:000000000000C923                 and     edx, 80h
.text:000000000000C929                 jz      loc_C5C6
.text:000000000000C92F                 and     qword ptr [rsp+138h+var_A8], 0FFFFFFFFFFFFFFFEh
.text:000000000000C938                 jmp     loc_C5C6
.text:000000000000C938 ; ---------------------------------------------------------------------------
.text:000000000000C93D                 align 20h
.text:000000000000C940
.text:000000000000C940 loc_C940:                               ; CODE XREF: build_trtable+471↑j
.text:000000000000C940                 mov     rdx, qword ptr [rsp+138h+var_A8]
.text:000000000000C948                 pxor    xmm0, xmm0
.text:000000000000C94C                 and     dh, 4
.text:000000000000C94F                 movaps  xmmword ptr [r12], xmm0
.text:000000000000C954                 movaps  xmmword ptr [r12+10h], xmm0
.text:000000000000C95A                 jz      loc_C25F
.text:000000000000C960                 mov     qword ptr [rsp+138h+var_A8], 400h
.text:000000000000C96C                 jmp     loc_C5D7
.text:000000000000C971 ; ---------------------------------------------------------------------------
.text:000000000000C971
.text:000000000000C971 loc_C971:                               ; CODE XREF: build_trtable+4DD↑j
.text:000000000000C971                 test    byte ptr [r13+0Ah], 40h
.text:000000000000C976                 jnz     loc_C874
.text:000000000000C97C                 mov     rdi, [rsp+138h+var_108]
.text:000000000000C981                 cmp     dword ptr [rdi+0B4h], 1
.text:000000000000C988                 jg      loc_C655
.text:000000000000C98E
.text:000000000000C98E loc_C98E:                               ; CODE XREF: build_trtable+4EF↑j
.text:000000000000C98E                 mov     rsi, [rsp+138h+var_108]
.text:000000000000C993                 xor     ecx, ecx
.text:000000000000C995                 xor     edx, edx
.text:000000000000C997
.text:000000000000C997 loc_C997:                               ; CODE XREF: build_trtable+855↓j
.text:000000000000C997                 mov     rax, [rsi+rdx*8+0B8h]
.text:000000000000C99F                 not     rax
.text:000000000000C9A2                 and     rax, [r12+rdx*8]
.text:000000000000C9A6                 mov     [r12+rdx*8], rax
.text:000000000000C9AA                 add     rdx, 1
.text:000000000000C9AE                 or      rcx, rax
.text:000000000000C9B1                 cmp     rdx, 4
.text:000000000000C9B5                 jnz     short loc_C997
.text:000000000000C9B7                 test    rcx, rcx
.text:000000000000C9BA                 jnz     loc_C690
.text:000000000000C9C0                 jmp     loc_C25F
.text:000000000000C9C5 ; ---------------------------------------------------------------------------
.text:000000000000C9C5
.text:000000000000C9C5 loc_C9C5:                               ; CODE XREF: build_trtable+487↑j
.text:000000000000C9C5                 test    byte ptr [r13+0Ah], 40h
.text:000000000000C9CA                 jz      loc_C874
.text:000000000000C9D0                 mov     r8, [rsp+138h+var_108]
.text:000000000000C9D5                 cmp     dword ptr [r8+0B4h], 1
.text:000000000000C9DD                 jg      loc_C600
.text:000000000000C9E3                 jmp     short loc_CA52
.text:000000000000C9E5 ; ---------------------------------------------------------------------------
.text:000000000000C9E5
.text:000000000000C9E5 loc_C9E5:                               ; CODE XREF: build_trtable+77C↑j
.text:000000000000C9E5                 pcmpeqd xmm0, xmm0
.text:000000000000C9E9                 lea     r12, [rsp+138h+var_A8]
.text:000000000000C9F1                 movaps  [rsp+138h+var_A8], xmm0
.text:000000000000C9F9                 movaps  [rsp+138h+var_98], xmm0
.text:000000000000CA01                 jmp     loc_C906
.text:000000000000CA01 ; ---------------------------------------------------------------------------
.text:000000000000CA06                 align 10h
.text:000000000000CA10
.text:000000000000CA10 loc_CA10:                               ; CODE XREF: build_trtable+E5↑j
.text:000000000000CA10                 mov     rsi, [r13+0]
.text:000000000000CA14                 lea     r12, [rsp+138h+var_A8]
.text:000000000000CA1C                 xor     edx, edx
.text:000000000000CA1E
.text:000000000000CA1E loc_CA1E:                               ; CODE XREF: build_trtable+8D2↓j
.text:000000000000CA1E                 mov     rcx, [r12+rdx]
.text:000000000000CA22                 or      rcx, [rsi+rdx]
.text:000000000000CA26                 mov     [r12+rdx], rcx
.text:000000000000CA2A                 add     rdx, 8
.text:000000000000CA2E                 cmp     rdx, 20h ; ' '
.text:000000000000CA32                 jnz     short loc_CA1E
.text:000000000000CA34                 jmp     loc_C5C6
.text:000000000000CA39 ; ---------------------------------------------------------------------------
.text:000000000000CA39
.text:000000000000CA39 loc_CA39:                               ; CODE XREF: build_trtable+F9↑j
.text:000000000000CA39                 pcmpeqd xmm0, xmm0
.text:000000000000CA3D                 lea     r12, [rsp+138h+var_A8]
.text:000000000000CA45                 movaps  [rsp+138h+var_A8], xmm0
.text:000000000000CA4D                 jmp     loc_C906
.text:000000000000CA52 ; ---------------------------------------------------------------------------
.text:000000000000CA52
.text:000000000000CA52 loc_CA52:                               ; CODE XREF: build_trtable+49A↑j
.text:000000000000CA52                                         ; build_trtable+883↑j
.text:000000000000CA52                 mov     rdi, [rsp+138h+var_108]
.text:000000000000CA57                 xor     esi, esi
.text:000000000000CA59                 xor     edx, edx
.text:000000000000CA5B
.text:000000000000CA5B loc_CA5B:                               ; CODE XREF: build_trtable+916↓j
.text:000000000000CA5B                 mov     rcx, [r12+rdx*8]
.text:000000000000CA5F                 and     rcx, [rdi+rdx*8+0B8h]
.text:000000000000CA67                 mov     [r12+rdx*8], rcx
.text:000000000000CA6B                 add     rdx, 1
.text:000000000000CA6F                 or      rsi, rcx
.text:000000000000CA72                 cmp     rdx, 4
.text:000000000000CA76                 jnz     short loc_CA5B
.text:000000000000CA78                 test    rsi, rsi
.text:000000000000CA7B                 jnz     loc_C635
.text:000000000000CA81                 jmp     loc_C25F
.text:000000000000CA86 ; ---------------------------------------------------------------------------
.text:000000000000CA86
.text:000000000000CA86 loc_CA86:                               ; CODE XREF: build_trtable+9B1↓j
.text:000000000000CA86                 mov     edx, [rsp+138h+var_CC]
.text:000000000000CA8A                 test    edx, edx
.text:000000000000CA8C                 jz      loc_CB17
.text:000000000000CA92                 nop     word ptr [rax+rax+00h]
.text:000000000000CA98
.text:000000000000CA98 loc_CA98:                               ; CODE XREF: build_trtable+238↑j
.text:000000000000CA98                                         ; build_trtable+A0E↓j ...
.text:000000000000CA98                 mov     rbp, [rsp+138h+var_118]
.text:000000000000CA9D
.text:000000000000CA9D loc_CA9D:                               ; CODE XREF: build_trtable+2FE↑j
.text:000000000000CA9D                                         ; build_trtable+A47↓j
.text:000000000000CA9D                 mov     rdi, [rsp+138h+ptr] ; ptr
.text:000000000000CAA2                 call    _free
.text:000000000000CAA7                 mov     r12, [rsp+138h+var_B8]
.text:000000000000CAAF
.text:000000000000CAAF loc_CAAF:                               ; CODE XREF: build_trtable+14F↑j
.text:000000000000CAAF                                         ; build_trtable+16A↑j ...
.text:000000000000CAAF                 mov     rdi, r12        ; ptr
.text:000000000000CAB2                 call    _free
.text:000000000000CAB7                 mov     rax, [rsp+138h+var_120]
.text:000000000000CABC                 lea     rbx, [rax+10h]
.text:000000000000CAC0                 lea     rax, [rbp+rbp*2+0]
.text:000000000000CAC5                 lea     rbp, [rbx+rax*8]
.text:000000000000CAC9                 nop     dword ptr [rax+00000000h]
.text:000000000000CAD0
.text:000000000000CAD0 loc_CAD0:                               ; CODE XREF: build_trtable+97F↓j
.text:000000000000CAD0                 mov     rdi, [rbx]      ; ptr
.text:000000000000CAD3                 add     rbx, 18h
.text:000000000000CAD7                 call    _free
.text:000000000000CADC                 cmp     rbp, rbx
.text:000000000000CADF                 jnz     short loc_CAD0
.text:000000000000CAE1                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000CAE6                 call    _free
.text:000000000000CAEB                 jmp     loc_C570
.text:000000000000CAF0 ; ---------------------------------------------------------------------------
.text:000000000000CAF0
.text:000000000000CAF0 loc_CAF0:                               ; CODE XREF: build_trtable+270↑j
.text:000000000000CAF0                 mov     rdi, [rsp+138h+var_110]
.text:000000000000CAF5                 mov     ecx, 1
.text:000000000000CAFA                 mov     rdx, r14
.text:000000000000CAFD                 mov     rsi, rbp
.text:000000000000CB00                 call    re_acquire_state_context
.text:000000000000CB05                 mov     rdi, [rsp+138h+var_108]
.text:000000000000CB0A                 test    rax, rax
.text:000000000000CB0D                 mov     [rdi+rbx*8], rax
.text:000000000000CB11                 jz      loc_CA86
.text:000000000000CB17
.text:000000000000CB17 loc_CB17:                               ; CODE XREF: build_trtable+92C↑j
.text:000000000000CB17                 mov     rdi, [rsp+138h+ptr]
.text:000000000000CB1C                 cmp     rax, [rdi+rbx*8]
.text:000000000000CB20                 jz      short loc_CB3B
.text:000000000000CB22                 movzx   edi, [rsp+138h+var_E9]
.text:000000000000CB27                 cmp     dword ptr [rbp+0B4h], 2
.text:000000000000CB2E                 mov     eax, 1
.text:000000000000CB33                 cmovge  edi, eax
.text:000000000000CB36                 mov     [rsp+138h+var_E9], dil
.text:000000000000CB3B
.text:000000000000CB3B loc_CB3B:                               ; CODE XREF: build_trtable+9C0↑j
.text:000000000000CB3B                 mov     rdi, [rsp+138h+var_110]
.text:000000000000CB40                 mov     rsi, rbp
.text:000000000000CB43                 mov     ecx, 2
.text:000000000000CB48                 mov     rdx, r14
.text:000000000000CB4B                 call    re_acquire_state_context
.text:000000000000CB50                 mov     rsi, [rsp+138h+var_100]
.text:000000000000CB55                 test    rax, rax
.text:000000000000CB58                 mov     [rsi+rbx*8], rax
.text:000000000000CB5C                 jnz     loc_C3F1
.text:000000000000CB62                 mov     eax, [rsp+138h+var_CC]
.text:000000000000CB66                 test    eax, eax
.text:000000000000CB68                 jz      loc_C3F1
.text:000000000000CB6E                 jmp     loc_CA98
.text:000000000000CB6E ; ---------------------------------------------------------------------------
.text:000000000000CB73                 align 8
.text:000000000000CB78
.text:000000000000CB78 loc_CB78:                               ; CODE XREF: build_trtable+266↑j
.text:000000000000CB78                 mov     ecx, [rsp+138h+var_CC]
.text:000000000000CB7C                 test    ecx, ecx
.text:000000000000CB7E                 jz      loc_C3CC
.text:000000000000CB84                 jmp     loc_CA98
.text:000000000000CB89 ; ---------------------------------------------------------------------------
.text:000000000000CB89
.text:000000000000CB89 loc_CB89:                               ; CODE XREF: build_trtable+2DA↑j
.text:000000000000CB89                 mov     esi, 200h       ; size
.text:000000000000CB8E                 mov     edi, 8          ; nmemb
.text:000000000000CB93                 call    _calloc
.text:000000000000CB98                 mov     r11, rax
.text:000000000000CB9B                 mov     rax, [rsp+138h+var_130]
.text:000000000000CBA0                 test    r11, r11
.text:000000000000CBA3                 mov     [rax+60h], r11
.text:000000000000CBA7                 jz      loc_CA9D
.text:000000000000CBAD                 mov     r13, [rsp+138h+var_F8]
.text:000000000000CBB2                 mov     r10, [rsp+138h+ptr]
.text:000000000000CBB7                 mov     r12, r11
.text:000000000000CBBA                 mov     r14, [rsp+138h+var_108]
.text:000000000000CBBF                 mov     rdx, [rsp+138h+var_118]
.text:000000000000CBC4                 xor     ebx, ebx
.text:000000000000CBC6                 add     r13, 20h ; ' '
.text:000000000000CBCA
.text:000000000000CBCA loc_CBCA:                               ; CODE XREF: build_trtable+A9E↓j
.text:000000000000CBCA                 mov     rax, [rdx+rbx]
.text:000000000000CBCE                 test    rax, rax
.text:000000000000CBD1                 jz      short loc_CBEF
.text:000000000000CBD3                 mov     rsi, r12
.text:000000000000CBD6                 mov     ecx, 1
.text:000000000000CBDB
.text:000000000000CBDB loc_CBDB:                               ; CODE XREF: build_trtable+A8D↓j
.text:000000000000CBDB                 test    al, 1
.text:000000000000CBDD                 jnz     loc_CC8C
.text:000000000000CBE3
.text:000000000000CBE3 loc_CBE3:                               ; CODE XREF: build_trtable+B6B↓j
.text:000000000000CBE3                 add     rcx, rcx
.text:000000000000CBE6                 add     rsi, 8
.text:000000000000CBEA                 shr     rax, 1
.text:000000000000CBED                 jnz     short loc_CBDB
.text:000000000000CBEF
.text:000000000000CBEF loc_CBEF:                               ; CODE XREF: build_trtable+A71↑j
.text:000000000000CBEF                 add     rbx, 8
.text:000000000000CBF3                 add     r12, 200h
.text:000000000000CBFA                 cmp     rbx, 20h ; ' '
.text:000000000000CBFE                 jnz     short loc_CBCA
.text:000000000000CC00                 jmp     loc_C4BE
.text:000000000000CC00 ; ---------------------------------------------------------------------------
.text:000000000000CC05                 align 8
.text:000000000000CC08
.text:000000000000CC08 loc_CC08:                               ; CODE XREF: build_trtable+342↑j
.text:000000000000CC08                 mov     rdi, [rsp+138h+var_120]
.text:000000000000CC0D                 test    [rdi+r9+1800h], rcx
.text:000000000000CC15                 jnz     short loc_CC87
.text:000000000000CC17                 lea     rdi, [rbx+r9]
.text:000000000000CC1B                 xor     r8d, r8d
.text:000000000000CC1E                 xchg    ax, ax
.text:000000000000CC20
.text:000000000000CC20 loc_CC20:                               ; CODE XREF: build_trtable+AD1↓j
.text:000000000000CC20                 mov     r10, [rdi]
.text:000000000000CC23                 add     r8, 1
.text:000000000000CC27                 add     rdi, 20h ; ' '
.text:000000000000CC2B                 and     r10, rcx
.text:000000000000CC2E                 test    r10, r10
.text:000000000000CC31                 jz      short loc_CC20
.text:000000000000CC33                 shl     r8, 3
.text:000000000000CC37
.text:000000000000CC37 loc_CC37:                               ; CODE XREF: build_trtable+B2A↓j
.text:000000000000CC37                 test    [r15+r9+0B8h], rcx
.text:000000000000CC3F                 jz      short loc_CC4E
.text:000000000000CC41                 mov     rdi, [r13+r8+0]
.text:000000000000CC46                 mov     [rsi], rdi
.text:000000000000CC49                 jmp     loc_C4A8
.text:000000000000CC4E ; ---------------------------------------------------------------------------
.text:000000000000CC4E
.text:000000000000CC4E loc_CC4E:                               ; CODE XREF: build_trtable+ADF↑j
.text:000000000000CC4E                 mov     rdi, [r12+r8]
.text:000000000000CC52                 mov     [rsi], rdi
.text:000000000000CC55                 jmp     loc_C4A8
.text:000000000000CC5A ; ---------------------------------------------------------------------------
.text:000000000000CC5A
.text:000000000000CC5A loc_CC5A:                               ; CODE XREF: build_trtable+83↑j
.text:000000000000CC5A                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000CC5F                 call    _free
.text:000000000000CC64
.text:000000000000CC64 loc_CC64:                               ; CODE XREF: build_trtable+B8C↓j
.text:000000000000CC64                 mov     esi, 100h       ; size
.text:000000000000CC69                 mov     edi, 8          ; nmemb
.text:000000000000CC6E                 call    _calloc
.text:000000000000CC73                 mov     rbx, [rsp+138h+var_130]
.text:000000000000CC78                 test    rax, rax
.text:000000000000CC7B                 mov     [rbx+58h], rax
.text:000000000000CC7F                 setnz   al
.text:000000000000CC82                 jmp     loc_C572
.text:000000000000CC87 ; ---------------------------------------------------------------------------
.text:000000000000CC87
.text:000000000000CC87 loc_CC87:                               ; CODE XREF: build_trtable+AB5↑j
.text:000000000000CC87                 xor     r8d, r8d
.text:000000000000CC8A                 jmp     short loc_CC37
.text:000000000000CC8C ; ---------------------------------------------------------------------------
.text:000000000000CC8C
.text:000000000000CC8C loc_CC8C:                               ; CODE XREF: build_trtable+A7D↑j
.text:000000000000CC8C                 mov     rdi, [rsp+138h+var_120]
.text:000000000000CC91                 test    [rdi+rbx+1800h], rcx
.text:000000000000CC99                 jnz     short loc_CCD0
.text:000000000000CC9B                 lea     r9, [r13+rbx+0]
.text:000000000000CCA0                 xor     r8d, r8d
.text:000000000000CCA3
.text:000000000000CCA3 loc_CCA3:                               ; CODE XREF: build_trtable+B57↓j
.text:000000000000CCA3                 mov     r15, [r9]
.text:000000000000CCA6                 add     r8, 1
.text:000000000000CCAA                 add     r9, 20h ; ' '
.text:000000000000CCAE                 mov     rdi, r8
.text:000000000000CCB1                 and     r15, rcx
.text:000000000000CCB4                 test    r15, r15
.text:000000000000CCB7                 jz      short loc_CCA3
.text:000000000000CCB9
.text:000000000000CCB9 loc_CCB9:                               ; CODE XREF: build_trtable+B72↓j
.text:000000000000CCB9                 mov     r8, [r10+rdi*8]
.text:000000000000CCBD                 mov     [rsi], r8
.text:000000000000CCC0                 mov     rdi, [r14+rdi*8]
.text:000000000000CCC4                 mov     [rsi+800h], rdi
.text:000000000000CCCB                 jmp     loc_CBE3
.text:000000000000CCD0 ; ---------------------------------------------------------------------------
.text:000000000000CCD0
.text:000000000000CCD0 loc_CCD0:                               ; CODE XREF: build_trtable+B39↑j
.text:000000000000CCD0                 xor     edi, edi
.text:000000000000CCD2                 jmp     short loc_CCB9
.text:000000000000CCD4 ; ---------------------------------------------------------------------------
.text:000000000000CCD4
.text:000000000000CCD4 loc_CCD4:                               ; CODE XREF: build_trtable+423↑j
.text:000000000000CCD4                 call    ___stack_chk_fail
.text:000000000000CCD9 ; ---------------------------------------------------------------------------
.text:000000000000CCD9
.text:000000000000CCD9 loc_CCD9:                               ; CODE XREF: build_trtable+11D↑j
.text:000000000000CCD9                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000CCDE                 call    _free
.text:000000000000CCE3                 test    rbp, rbp
.text:000000000000CCE6                 jnz     loc_C570
.text:000000000000CCEC                 jmp     loc_CC64
.text:000000000000CCEC ; } // starts at C160
.text:000000000000CCEC build_trtable   endp
.text:000000000000CCEC
.text:000000000000CCEC ; ---------------------------------------------------------------------------
.text:000000000000CCF1                 align 20h
.text:000000000000CD00
.text:000000000000CD00 ; =============== S U B R O U T I N E =======================================
.text:000000000000CD00
.text:000000000000CD00
.text:000000000000CD00 calc_first      proc near               ; DATA XREF: re_compile_internal+67E↓o
.text:000000000000CD00 ; __unwind {
.text:000000000000CD00                 cmp     byte ptr [rsi+30h], 10h
.text:000000000000CD04                 jz      short loc_CD68
.text:000000000000CD06                 push    rbp
.text:000000000000CD07                 push    rbx
.text:000000000000CD08                 mov     rbx, rsi
.text:000000000000CD0B                 mov     rbp, rdi
.text:000000000000CD0E                 sub     rsp, 8
.text:000000000000CD12                 mov     [rbx+18h], rsi
.text:000000000000CD16                 mov     rdx, [rbx+30h]
.text:000000000000CD1A                 mov     rsi, [rsi+28h]
.text:000000000000CD1E                 call    re_dfa_add_node
.text:000000000000CD23                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000CD27                 mov     rdx, rax
.text:000000000000CD2A                 mov     [rbx+38h], rax
.text:000000000000CD2E                 jz      short loc_CD80
.text:000000000000CD30                 xor     eax, eax
.text:000000000000CD32                 cmp     byte ptr [rbx+30h], 0Ch
.text:000000000000CD36                 jnz     short loc_CD5C
.text:000000000000CD38                 mov     ecx, [rbx+28h]
.text:000000000000CD3B                 shl     rdx, 4
.text:000000000000CD3F                 add     rdx, [rbp+0]
.text:000000000000CD43                 and     ecx, 3FFh
.text:000000000000CD49                 shl     ecx, 8
.text:000000000000CD4C                 mov     esi, ecx
.text:000000000000CD4E                 mov     ecx, [rdx+8]
.text:000000000000CD51                 and     ecx, 0FFFC00FFh
.text:000000000000CD57                 or      ecx, esi
.text:000000000000CD59                 mov     [rdx+8], ecx
.text:000000000000CD5C
.text:000000000000CD5C loc_CD5C:                               ; CODE XREF: calc_first+36↑j
.text:000000000000CD5C                                         ; calc_first+85↓j
.text:000000000000CD5C                 add     rsp, 8
.text:000000000000CD60                 pop     rbx
.text:000000000000CD61                 pop     rbp
.text:000000000000CD62                 retn
.text:000000000000CD62 ; ---------------------------------------------------------------------------
.text:000000000000CD63                 align 8
.text:000000000000CD68
.text:000000000000CD68 loc_CD68:                               ; CODE XREF: calc_first+4↑j
.text:000000000000CD68                 mov     rax, [rsi+8]
.text:000000000000CD6C                 mov     rdx, [rax+18h]
.text:000000000000CD70                 mov     rax, [rax+38h]
.text:000000000000CD74                 mov     [rsi+18h], rdx
.text:000000000000CD78                 mov     [rsi+38h], rax
.text:000000000000CD7C                 xor     eax, eax
.text:000000000000CD7E                 retn
.text:000000000000CD7E ; ---------------------------------------------------------------------------
.text:000000000000CD7F                 align 20h
.text:000000000000CD80
.text:000000000000CD80 loc_CD80:                               ; CODE XREF: calc_first+2E↑j
.text:000000000000CD80                 mov     eax, 0Ch
.text:000000000000CD85                 jmp     short loc_CD5C
.text:000000000000CD85 ; } // starts at CD00
.text:000000000000CD85 calc_first      endp
.text:000000000000CD85
.text:000000000000CD85 ; ---------------------------------------------------------------------------
.text:000000000000CD87                 align 10h
.text:000000000000CD90
.text:000000000000CD90 ; =============== S U B R O U T I N E =======================================
.text:000000000000CD90
.text:000000000000CD90
.text:000000000000CD90 free_fail_stack_return_part_24 proc near
.text:000000000000CD90                                         ; CODE XREF: set_regs+4FF↓p
.text:000000000000CD90                                         ; set_regs+567↓p ...
.text:000000000000CD90 ; __unwind {
.text:000000000000CD90                 push    r12
.text:000000000000CD92                 push    rbp
.text:000000000000CD93                 mov     rbp, rdi
.text:000000000000CD96                 push    rbx
.text:000000000000CD97                 cmp     qword ptr [rdi], 0
.text:000000000000CD9B                 jle     short loc_CDD2
.text:000000000000CD9D                 xor     ebx, ebx
.text:000000000000CD9F                 xor     r12d, r12d
.text:000000000000CDA2                 nop     word ptr [rax+rax+00h]
.text:000000000000CDA8
.text:000000000000CDA8 loc_CDA8:                               ; CODE XREF: free_fail_stack_return_part_24+40↓j
.text:000000000000CDA8                 mov     rax, [rbp+10h]
.text:000000000000CDAC                 add     r12, 1
.text:000000000000CDB0                 mov     rdi, [rax+rbx+28h] ; ptr
.text:000000000000CDB5                 call    _free
.text:000000000000CDBA                 mov     rax, [rbp+10h]
.text:000000000000CDBE                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000CDC3                 add     rbx, 30h ; '0'
.text:000000000000CDC7                 call    _free
.text:000000000000CDCC                 cmp     r12, [rbp+0]
.text:000000000000CDD0                 jl      short loc_CDA8
.text:000000000000CDD2
.text:000000000000CDD2 loc_CDD2:                               ; CODE XREF: free_fail_stack_return_part_24+B↑j
.text:000000000000CDD2                 pop     rbx
.text:000000000000CDD3                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000CDD7                 pop     rbp
.text:000000000000CDD8                 pop     r12
.text:000000000000CDDA                 jmp     _free
.text:000000000000CDDA ; } // starts at CD90
.text:000000000000CDDA free_fail_stack_return_part_24 endp
.text:000000000000CDDA
.text:000000000000CDDA ; ---------------------------------------------------------------------------
.text:000000000000CDDF                 align 20h
.text:000000000000CDE0
.text:000000000000CDE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CDE0
.text:000000000000CDE0
.text:000000000000CDE0 pop_fail_stack_isra_25 proc near        ; CODE XREF: set_regs+5B3↓p
.text:000000000000CDE0                                         ; set_regs+606↓p
.text:000000000000CDE0 ; __unwind {
.text:000000000000CDE0                 push    r12
.text:000000000000CDE2                 push    rbp
.text:000000000000CDE3                 push    rbx
.text:000000000000CDE4                 mov     rax, [rdi]
.text:000000000000CDE7                 sub     rax, 1
.text:000000000000CDEB                 test    rax, rax
.text:000000000000CDEE                 mov     [rdi], rax
.text:000000000000CDF1                 js      short loc_CE55
.text:000000000000CDF3                 lea     rbx, [rax+rax*2]
.text:000000000000CDF7                 mov     rax, [rsi]
.text:000000000000CDFA                 mov     r12, rsi
.text:000000000000CDFD                 shl     rcx, 4
.text:000000000000CE01                 mov     rbp, r9
.text:000000000000CE04                 mov     rdi, r8         ; dest
.text:000000000000CE07                 shl     rbx, 4
.text:000000000000CE0B                 add     rax, rbx
.text:000000000000CE0E                 mov     rsi, [rax]
.text:000000000000CE11                 mov     [rdx], rsi
.text:000000000000CE14                 mov     rsi, [rax+10h]  ; src
.text:000000000000CE18                 mov     rdx, rcx        ; n
.text:000000000000CE1B                 call    _memcpy
.text:000000000000CE20                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000CE24                 call    _free
.text:000000000000CE29                 mov     rax, [r12]
.text:000000000000CE2D                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000CE32                 call    _free
.text:000000000000CE37                 add     rbx, [r12]
.text:000000000000CE3B                 movdqu  xmm0, xmmword ptr [rbx+18h]
.text:000000000000CE40                 movaps  xmmword ptr [rbp+0], xmm0
.text:000000000000CE44                 mov     rax, [rbx+28h]
.text:000000000000CE48                 mov     [rbp+10h], rax
.text:000000000000CE4C                 mov     rax, [rbx+8]
.text:000000000000CE50                 pop     rbx
.text:000000000000CE51                 pop     rbp
.text:000000000000CE52                 pop     r12
.text:000000000000CE54                 retn
.text:000000000000CE55 ; ---------------------------------------------------------------------------
.text:000000000000CE55
.text:000000000000CE55 loc_CE55:                               ; CODE XREF: pop_fail_stack_isra_25+11↑j
.text:000000000000CE55                 lea     rcx, __PRETTY_FUNCTION___8040 ; "pop_fail_stack"
.text:000000000000CE5C                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000000CE63                 lea     rdi, aNum0      ; "num >= 0"
.text:000000000000CE6A                 mov     edx, 555h       ; line
.text:000000000000CE6F                 call    ___assert_fail
.text:000000000000CE6F ; } // starts at CDE0
.text:000000000000CE6F pop_fail_stack_isra_25 endp
.text:000000000000CE6F
.text:000000000000CE6F ; ---------------------------------------------------------------------------
.text:000000000000CE74                 align 20h
.text:000000000000CE80
.text:000000000000CE80 ; =============== S U B R O U T I N E =======================================
.text:000000000000CE80
.text:000000000000CE80
.text:000000000000CE80 build_equiv_class_isra_27 proc near     ; CODE XREF: parse_expression+C30↓p
.text:000000000000CE80                                         ; parse_expression+C68↓p
.text:000000000000CE80 ; __unwind {
.text:000000000000CE80                 push    rbp
.text:000000000000CE81                 push    rbx
.text:000000000000CE82                 mov     rbp, rdi
.text:000000000000CE85                 mov     rdi, rsi        ; s
.text:000000000000CE88                 mov     rbx, rsi
.text:000000000000CE8B                 sub     rsp, 8
.text:000000000000CE8F                 call    _strlen
.text:000000000000CE94                 cmp     rax, 1
.text:000000000000CE98                 jnz     short loc_CEC0
.text:000000000000CE9A                 movzx   ecx, byte ptr [rbx]
.text:000000000000CE9D                 mov     rdx, rcx
.text:000000000000CEA0                 and     ecx, 3Fh
.text:000000000000CEA3                 shr     rdx, 3
.text:000000000000CEA7                 shl     rax, cl
.text:000000000000CEAA                 and     edx, 18h
.text:000000000000CEAD                 or      [rbp+rdx+0], rax
.text:000000000000CEB2                 add     rsp, 8
.text:000000000000CEB6                 xor     eax, eax
.text:000000000000CEB8                 pop     rbx
.text:000000000000CEB9                 pop     rbp
.text:000000000000CEBA                 retn
.text:000000000000CEBA ; ---------------------------------------------------------------------------
.text:000000000000CEBB                 align 20h
.text:000000000000CEC0
.text:000000000000CEC0 loc_CEC0:                               ; CODE XREF: build_equiv_class_isra_27+18↑j
.text:000000000000CEC0                 add     rsp, 8
.text:000000000000CEC4                 mov     eax, 3
.text:000000000000CEC9                 pop     rbx
.text:000000000000CECA                 pop     rbp
.text:000000000000CECB                 retn
.text:000000000000CECB ; } // starts at CE80
.text:000000000000CECB build_equiv_class_isra_27 endp
.text:000000000000CECB
.text:000000000000CECB ; ---------------------------------------------------------------------------
.text:000000000000CECC                 align 10h
.text:000000000000CED0
.text:000000000000CED0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CED0
.text:000000000000CED0
.text:000000000000CED0 build_charclass_isra_29 proc near       ; CODE XREF: build_charclass_op+A3↓p
.text:000000000000CED0                                         ; parse_expression+D1D↓p
.text:000000000000CED0
.text:000000000000CED0 var_38          = qword ptr -38h
.text:000000000000CED0 var_30          = qword ptr -30h
.text:000000000000CED0 arg_0           = qword ptr  8
.text:000000000000CED0
.text:000000000000CED0 ; __unwind {
.text:000000000000CED0                 push    r14
.text:000000000000CED2                 push    r13
.text:000000000000CED4                 mov     r13, rcx
.text:000000000000CED7                 push    r12
.text:000000000000CED9                 push    rbp
.text:000000000000CEDA                 mov     r12, r9
.text:000000000000CEDD                 push    rbx
.text:000000000000CEDE                 mov     rbp, rdi
.text:000000000000CEE1                 mov     rbx, rsi
.text:000000000000CEE4                 sub     rsp, 10h
.text:000000000000CEE8                 test    [rsp+38h+arg_0], 400000h
.text:000000000000CEF1                 jz      short loc_CF18
.text:000000000000CEF3                 lea     rdi, aUpper     ; "upper"
.text:000000000000CEFA                 mov     ecx, 6
.text:000000000000CEFF                 mov     rsi, r9
.text:000000000000CF02                 repe cmpsb
.text:000000000000CF04                 setnbe  al
.text:000000000000CF07                 sbb     al, 0
.text:000000000000CF09                 test    al, al
.text:000000000000CF0B                 jnz     loc_D006
.text:000000000000CF11                 lea     r12, aAlpha     ; "alpha"
.text:000000000000CF18
.text:000000000000CF18 loc_CF18:                               ; CODE XREF: build_charclass_isra_29+21↑j
.text:000000000000CF18                 mov     rcx, [r13+0]
.text:000000000000CF1C                 cmp     [r8], rcx
.text:000000000000CF1F                 mov     rax, [rdx]
.text:000000000000CF22                 jz      loc_D039
.text:000000000000CF28
.text:000000000000CF28 loc_CF28:                               ; CODE XREF: build_charclass_isra_29+163↓j
.text:000000000000CF28                                         ; build_charclass_isra_29+1A3↓j
.text:000000000000CF28                 lea     rdx, [rcx+1]
.text:000000000000CF2C                 mov     rdi, r12        ; property
.text:000000000000CF2F                 mov     [r13+0], rdx
.text:000000000000CF33                 lea     r13, [rax+rcx*8]
.text:000000000000CF37                 call    _wctype
.text:000000000000CF3C                 lea     rdi, aAlnum     ; "alnum"
.text:000000000000CF43                 mov     [r13+0], rax
.text:000000000000CF47                 mov     ecx, 6
.text:000000000000CF4C                 mov     rsi, r12
.text:000000000000CF4F                 repe cmpsb
.text:000000000000CF51                 setnbe  al
.text:000000000000CF54                 sbb     al, 0
.text:000000000000CF56                 test    al, al
.text:000000000000CF58                 jz      short loc_CFC8
.text:000000000000CF5A                 lea     rdi, aCntrl     ; "cntrl"
.text:000000000000CF61                 mov     ecx, 6
.text:000000000000CF66                 mov     rsi, r12
.text:000000000000CF69                 repe cmpsb
.text:000000000000CF6B                 setnbe  al
.text:000000000000CF6E                 sbb     al, 0
.text:000000000000CF70                 test    al, al
.text:000000000000CF72                 jnz     loc_D078
.text:000000000000CF78                 call    ___ctype_b_loc
.text:000000000000CF7D                 xor     ecx, ecx
.text:000000000000CF7F                 test    rbp, rbp
.text:000000000000CF82                 mov     rdx, [rax]
.text:000000000000CF85                 mov     edi, 1
.text:000000000000CF8A                 jnz     loc_D24A
.text:000000000000CF90
.text:000000000000CF90 loc_CF90:                               ; CODE XREF: build_charclass_isra_29+E2↓j
.text:000000000000CF90                 test    byte ptr [rdx+rcx*2], 2
.text:000000000000CF94                 jz      short loc_CFA7
.text:000000000000CF96                 mov     rax, rcx
.text:000000000000CF99                 mov     rsi, rdi
.text:000000000000CF9C                 sar     rax, 6
.text:000000000000CFA0                 shl     rsi, cl
.text:000000000000CFA3                 or      [rbx+rax*8], rsi
.text:000000000000CFA7
.text:000000000000CFA7 loc_CFA7:                               ; CODE XREF: build_charclass_isra_29+C4↑j
.text:000000000000CFA7                 add     rcx, 1
.text:000000000000CFAB                 cmp     rcx, 100h
.text:000000000000CFB2                 jnz     short loc_CF90
.text:000000000000CFB4
.text:000000000000CFB4 loc_CFB4:                               ; CODE XREF: build_charclass_isra_29+134↓j
.text:000000000000CFB4                                         ; build_charclass_isra_29+225↓j ...
.text:000000000000CFB4                 xor     eax, eax
.text:000000000000CFB6
.text:000000000000CFB6 loc_CFB6:                               ; CODE XREF: build_charclass_isra_29+4AD↓j
.text:000000000000CFB6                                         ; build_charclass_isra_29+765↓j
.text:000000000000CFB6                 add     rsp, 10h
.text:000000000000CFBA                 pop     rbx
.text:000000000000CFBB                 pop     rbp
.text:000000000000CFBC                 pop     r12
.text:000000000000CFBE                 pop     r13
.text:000000000000CFC0                 pop     r14
.text:000000000000CFC2                 retn
.text:000000000000CFC2 ; ---------------------------------------------------------------------------
.text:000000000000CFC3                 align 8
.text:000000000000CFC8
.text:000000000000CFC8 loc_CFC8:                               ; CODE XREF: build_charclass_isra_29+88↑j
.text:000000000000CFC8                 call    ___ctype_b_loc
.text:000000000000CFCD                 xor     ecx, ecx
.text:000000000000CFCF                 test    rbp, rbp
.text:000000000000CFD2                 mov     rdx, [rax]
.text:000000000000CFD5                 mov     edi, 1
.text:000000000000CFDA                 jnz     loc_D1CA
.text:000000000000CFE0
.text:000000000000CFE0 loc_CFE0:                               ; CODE XREF: build_charclass_isra_29+132↓j
.text:000000000000CFE0                 test    byte ptr [rdx+rcx*2], 8
.text:000000000000CFE4                 jz      short loc_CFF7
.text:000000000000CFE6                 mov     rax, rcx
.text:000000000000CFE9                 mov     rsi, rdi
.text:000000000000CFEC                 sar     rax, 6
.text:000000000000CFF0                 shl     rsi, cl
.text:000000000000CFF3                 or      [rbx+rax*8], rsi
.text:000000000000CFF7
.text:000000000000CFF7 loc_CFF7:                               ; CODE XREF: build_charclass_isra_29+114↑j
.text:000000000000CFF7                 add     rcx, 1
.text:000000000000CFFB                 cmp     rcx, 100h
.text:000000000000D002                 jnz     short loc_CFE0
.text:000000000000D004                 jmp     short loc_CFB4
.text:000000000000D006 ; ---------------------------------------------------------------------------
.text:000000000000D006
.text:000000000000D006 loc_D006:                               ; CODE XREF: build_charclass_isra_29+3B↑j
.text:000000000000D006                 lea     rdi, aLower     ; "lower"
.text:000000000000D00D                 mov     ecx, 6
.text:000000000000D012                 mov     rsi, r9
.text:000000000000D015                 repe cmpsb
.text:000000000000D017                 mov     rcx, [r13+0]
.text:000000000000D01B                 setnbe  al
.text:000000000000D01E                 sbb     al, 0
.text:000000000000D020                 test    al, al
.text:000000000000D022                 lea     rax, aAlpha     ; "alpha"
.text:000000000000D029                 cmovz   r12, rax
.text:000000000000D02D                 cmp     [r8], rcx
.text:000000000000D030                 mov     rax, [rdx]
.text:000000000000D033                 jnz     loc_CF28
.text:000000000000D039
.text:000000000000D039 loc_D039:                               ; CODE XREF: build_charclass_isra_29+52↑j
.text:000000000000D039                 lea     r14, [rcx+rcx+1]
.text:000000000000D03E                 mov     rdi, rax        ; ptr
.text:000000000000D041                 mov     [rsp+38h+var_30], r8
.text:000000000000D046                 mov     [rsp+38h+var_38], rdx
.text:000000000000D04A                 lea     rsi, ds:0[r14*8] ; size
.text:000000000000D052                 call    _realloc
.text:000000000000D057                 test    rax, rax
.text:000000000000D05A                 jz      loc_D378
.text:000000000000D060                 mov     rdx, [rsp+38h+var_38]
.text:000000000000D064                 mov     r8, [rsp+38h+var_30]
.text:000000000000D069                 mov     [rdx], rax
.text:000000000000D06C                 mov     [r8], r14
.text:000000000000D06F                 mov     rcx, [r13+0]
.text:000000000000D073                 jmp     loc_CF28
.text:000000000000D078 ; ---------------------------------------------------------------------------
.text:000000000000D078
.text:000000000000D078 loc_D078:                               ; CODE XREF: build_charclass_isra_29+A2↑j
.text:000000000000D078                 lea     rdi, aLower     ; "lower"
.text:000000000000D07F                 mov     ecx, 6
.text:000000000000D084                 mov     rsi, r12
.text:000000000000D087                 repe cmpsb
.text:000000000000D089                 setnbe  al
.text:000000000000D08C                 sbb     al, 0
.text:000000000000D08E                 test    al, al
.text:000000000000D090                 jz      short loc_D0FA
.text:000000000000D092                 lea     rdi, aSpace     ; "space"
.text:000000000000D099                 mov     ecx, 6
.text:000000000000D09E                 mov     rsi, r12
.text:000000000000D0A1                 repe cmpsb
.text:000000000000D0A3                 setnbe  al
.text:000000000000D0A6                 sbb     al, 0
.text:000000000000D0A8                 test    al, al
.text:000000000000D0AA                 jnz     loc_D142
.text:000000000000D0B0                 call    ___ctype_b_loc
.text:000000000000D0B5                 xor     ecx, ecx
.text:000000000000D0B7                 test    rbp, rbp
.text:000000000000D0BA                 mov     rdx, [rax]
.text:000000000000D0BD                 mov     edi, 1
.text:000000000000D0C2                 jnz     loc_D41E
.text:000000000000D0C8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000D0D0
.text:000000000000D0D0 loc_D0D0:                               ; CODE XREF: build_charclass_isra_29+223↓j
.text:000000000000D0D0                 test    byte ptr [rdx+rcx*2+1], 20h
.text:000000000000D0D5                 jz      short loc_D0E8
.text:000000000000D0D7                 mov     rax, rcx
.text:000000000000D0DA                 mov     rsi, rdi
.text:000000000000D0DD                 sar     rax, 6
.text:000000000000D0E1                 shl     rsi, cl
.text:000000000000D0E4                 or      [rbx+rax*8], rsi
.text:000000000000D0E8
.text:000000000000D0E8 loc_D0E8:                               ; CODE XREF: build_charclass_isra_29+205↑j
.text:000000000000D0E8                 add     rcx, 1
.text:000000000000D0EC                 cmp     rcx, 100h
.text:000000000000D0F3                 jnz     short loc_D0D0
.text:000000000000D0F5                 jmp     loc_CFB4
.text:000000000000D0FA ; ---------------------------------------------------------------------------
.text:000000000000D0FA
.text:000000000000D0FA loc_D0FA:                               ; CODE XREF: build_charclass_isra_29+1C0↑j
.text:000000000000D0FA                 call    ___ctype_b_loc
.text:000000000000D0FF                 xor     ecx, ecx
.text:000000000000D101                 test    rbp, rbp
.text:000000000000D104                 mov     rdx, [rax]
.text:000000000000D107                 mov     edi, 1
.text:000000000000D10C                 jnz     loc_D2E2
.text:000000000000D112                 nop     word ptr [rax+rax+00h]
.text:000000000000D118
.text:000000000000D118 loc_D118:                               ; CODE XREF: build_charclass_isra_29+26B↓j
.text:000000000000D118                 test    byte ptr [rdx+rcx*2+1], 2
.text:000000000000D11D                 jz      short loc_D130
.text:000000000000D11F                 mov     rax, rcx
.text:000000000000D122                 mov     rsi, rdi
.text:000000000000D125                 sar     rax, 6
.text:000000000000D129                 shl     rsi, cl
.text:000000000000D12C                 or      [rbx+rax*8], rsi
.text:000000000000D130
.text:000000000000D130 loc_D130:                               ; CODE XREF: build_charclass_isra_29+24D↑j
.text:000000000000D130                 add     rcx, 1
.text:000000000000D134                 cmp     rcx, 100h
.text:000000000000D13B                 jnz     short loc_D118
.text:000000000000D13D                 jmp     loc_CFB4
.text:000000000000D142 ; ---------------------------------------------------------------------------
.text:000000000000D142
.text:000000000000D142 loc_D142:                               ; CODE XREF: build_charclass_isra_29+1DA↑j
.text:000000000000D142                 lea     rdi, aAlpha     ; "alpha"
.text:000000000000D149                 mov     ecx, 6
.text:000000000000D14E                 mov     rsi, r12
.text:000000000000D151                 repe cmpsb
.text:000000000000D153                 setnbe  al
.text:000000000000D156                 sbb     al, 0
.text:000000000000D158                 test    al, al
.text:000000000000D15A                 jz      loc_D203
.text:000000000000D160                 lea     rdi, aDigit     ; "digit"
.text:000000000000D167                 mov     ecx, 6
.text:000000000000D16C                 mov     rsi, r12
.text:000000000000D16F                 repe cmpsb
.text:000000000000D171                 setnbe  al
.text:000000000000D174                 sbb     al, 0
.text:000000000000D176                 test    al, al
.text:000000000000D178                 jnz     loc_D283
.text:000000000000D17E                 call    ___ctype_b_loc
.text:000000000000D183                 xor     ecx, ecx
.text:000000000000D185                 test    rbp, rbp
.text:000000000000D188                 mov     rdx, [rax]
.text:000000000000D18B                 mov     edi, 1
.text:000000000000D190                 jnz     loc_D63A
.text:000000000000D196                 db      2Eh
.text:000000000000D196                 nop     word ptr [rax+rax+00000000h]
.text:000000000000D1A0
.text:000000000000D1A0 loc_D1A0:                               ; CODE XREF: build_charclass_isra_29+2F3↓j
.text:000000000000D1A0                 test    byte ptr [rdx+rcx*2+1], 8
.text:000000000000D1A5                 jz      short loc_D1B8
.text:000000000000D1A7                 mov     rax, rcx
.text:000000000000D1AA                 mov     rsi, rdi
.text:000000000000D1AD                 sar     rax, 6
.text:000000000000D1B1                 shl     rsi, cl
.text:000000000000D1B4                 or      [rbx+rax*8], rsi
.text:000000000000D1B8
.text:000000000000D1B8 loc_D1B8:                               ; CODE XREF: build_charclass_isra_29+2D5↑j
.text:000000000000D1B8                 add     rcx, 1
.text:000000000000D1BC                 cmp     rcx, 100h
.text:000000000000D1C3                 jnz     short loc_D1A0
.text:000000000000D1C5                 jmp     loc_CFB4
.text:000000000000D1CA ; ---------------------------------------------------------------------------
.text:000000000000D1CA
.text:000000000000D1CA loc_D1CA:                               ; CODE XREF: build_charclass_isra_29+10A↑j
.text:000000000000D1CA                 xor     eax, eax
.text:000000000000D1CC                 nop     dword ptr [rax+00h]
.text:000000000000D1D0
.text:000000000000D1D0 loc_D1D0:                               ; CODE XREF: build_charclass_isra_29+32C↓j
.text:000000000000D1D0                 test    byte ptr [rdx+rax*2], 8
.text:000000000000D1D4                 jz      short loc_D1F2
.text:000000000000D1D6                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000D1DB                 mov     r10, rdi
.text:000000000000D1DE                 mov     rsi, rcx
.text:000000000000D1E1                 and     ecx, 3Fh
.text:000000000000D1E4                 shr     rsi, 3
.text:000000000000D1E8                 shl     r10, cl
.text:000000000000D1EB                 and     esi, 18h
.text:000000000000D1EE                 or      [rbx+rsi], r10
.text:000000000000D1F2
.text:000000000000D1F2 loc_D1F2:                               ; CODE XREF: build_charclass_isra_29+304↑j
.text:000000000000D1F2                 add     rax, 1
.text:000000000000D1F6                 cmp     rax, 100h
.text:000000000000D1FC                 jnz     short loc_D1D0
.text:000000000000D1FE                 jmp     loc_CFB4
.text:000000000000D203 ; ---------------------------------------------------------------------------
.text:000000000000D203
.text:000000000000D203 loc_D203:                               ; CODE XREF: build_charclass_isra_29+28A↑j
.text:000000000000D203                 call    ___ctype_b_loc
.text:000000000000D208                 xor     ecx, ecx
.text:000000000000D20A                 test    rbp, rbp
.text:000000000000D20D                 mov     rdx, [rax]
.text:000000000000D210                 mov     edi, 1
.text:000000000000D215                 jnz     loc_D3E8
.text:000000000000D21B                 nop     dword ptr [rax+rax+00h]
.text:000000000000D220
.text:000000000000D220 loc_D220:                               ; CODE XREF: build_charclass_isra_29+373↓j
.text:000000000000D220                 test    byte ptr [rdx+rcx*2+1], 4
.text:000000000000D225                 jz      short loc_D238
.text:000000000000D227                 mov     rax, rcx
.text:000000000000D22A                 mov     rsi, rdi
.text:000000000000D22D                 sar     rax, 6
.text:000000000000D231                 shl     rsi, cl
.text:000000000000D234                 or      [rbx+rax*8], rsi
.text:000000000000D238
.text:000000000000D238 loc_D238:                               ; CODE XREF: build_charclass_isra_29+355↑j
.text:000000000000D238                 add     rcx, 1
.text:000000000000D23C                 cmp     rcx, 100h
.text:000000000000D243                 jnz     short loc_D220
.text:000000000000D245                 jmp     loc_CFB4
.text:000000000000D24A ; ---------------------------------------------------------------------------
.text:000000000000D24A
.text:000000000000D24A loc_D24A:                               ; CODE XREF: build_charclass_isra_29+BA↑j
.text:000000000000D24A                 xor     eax, eax
.text:000000000000D24C                 nop     dword ptr [rax+00h]
.text:000000000000D250
.text:000000000000D250 loc_D250:                               ; CODE XREF: build_charclass_isra_29+3AC↓j
.text:000000000000D250                 test    byte ptr [rdx+rax*2], 2
.text:000000000000D254                 jz      short loc_D272
.text:000000000000D256                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000D25B                 mov     r11, rdi
.text:000000000000D25E                 mov     rsi, rcx
.text:000000000000D261                 and     ecx, 3Fh
.text:000000000000D264                 shr     rsi, 3
.text:000000000000D268                 shl     r11, cl
.text:000000000000D26B                 and     esi, 18h
.text:000000000000D26E                 or      [rbx+rsi], r11
.text:000000000000D272
.text:000000000000D272 loc_D272:                               ; CODE XREF: build_charclass_isra_29+384↑j
.text:000000000000D272                 add     rax, 1
.text:000000000000D276                 cmp     rax, 100h
.text:000000000000D27C                 jnz     short loc_D250
.text:000000000000D27E                 jmp     loc_CFB4
.text:000000000000D283 ; ---------------------------------------------------------------------------
.text:000000000000D283
.text:000000000000D283 loc_D283:                               ; CODE XREF: build_charclass_isra_29+2A8↑j
.text:000000000000D283                 lea     rdi, aPrint     ; "print"
.text:000000000000D28A                 mov     ecx, 6
.text:000000000000D28F                 mov     rsi, r12
.text:000000000000D292                 repe cmpsb
.text:000000000000D294                 setnbe  al
.text:000000000000D297                 sbb     al, 0
.text:000000000000D299                 test    al, al
.text:000000000000D29B                 jnz     short loc_D31C
.text:000000000000D29D                 call    ___ctype_b_loc
.text:000000000000D2A2                 xor     ecx, ecx
.text:000000000000D2A4                 test    rbp, rbp
.text:000000000000D2A7                 mov     rdx, [rax]
.text:000000000000D2AA                 mov     edi, 1
.text:000000000000D2AF                 jnz     loc_D6A7
.text:000000000000D2B5                 nop     dword ptr [rax]
.text:000000000000D2B8
.text:000000000000D2B8 loc_D2B8:                               ; CODE XREF: build_charclass_isra_29+40B↓j
.text:000000000000D2B8                 test    byte ptr [rdx+rcx*2+1], 40h
.text:000000000000D2BD                 jz      short loc_D2D0
.text:000000000000D2BF                 mov     rax, rcx
.text:000000000000D2C2                 mov     rsi, rdi
.text:000000000000D2C5                 sar     rax, 6
.text:000000000000D2C9                 shl     rsi, cl
.text:000000000000D2CC                 or      [rbx+rax*8], rsi
.text:000000000000D2D0
.text:000000000000D2D0 loc_D2D0:                               ; CODE XREF: build_charclass_isra_29+3ED↑j
.text:000000000000D2D0                 add     rcx, 1
.text:000000000000D2D4                 cmp     rcx, 100h
.text:000000000000D2DB                 jnz     short loc_D2B8
.text:000000000000D2DD                 jmp     loc_CFB4
.text:000000000000D2E2 ; ---------------------------------------------------------------------------
.text:000000000000D2E2
.text:000000000000D2E2 loc_D2E2:                               ; CODE XREF: build_charclass_isra_29+23C↑j
.text:000000000000D2E2                 xor     eax, eax
.text:000000000000D2E4                 nop     dword ptr [rax+00h]
.text:000000000000D2E8
.text:000000000000D2E8 loc_D2E8:                               ; CODE XREF: build_charclass_isra_29+445↓j
.text:000000000000D2E8                 test    byte ptr [rdx+rax*2+1], 2
.text:000000000000D2ED                 jz      short loc_D30B
.text:000000000000D2EF                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000D2F4                 mov     r14, rdi
.text:000000000000D2F7                 mov     rsi, rcx
.text:000000000000D2FA                 and     ecx, 3Fh
.text:000000000000D2FD                 shr     rsi, 3
.text:000000000000D301                 shl     r14, cl
.text:000000000000D304                 and     esi, 18h
.text:000000000000D307                 or      [rbx+rsi], r14
.text:000000000000D30B
.text:000000000000D30B loc_D30B:                               ; CODE XREF: build_charclass_isra_29+41D↑j
.text:000000000000D30B                 add     rax, 1
.text:000000000000D30F                 cmp     rax, 100h
.text:000000000000D315                 jnz     short loc_D2E8
.text:000000000000D317                 jmp     loc_CFB4
.text:000000000000D31C ; ---------------------------------------------------------------------------
.text:000000000000D31C
.text:000000000000D31C loc_D31C:                               ; CODE XREF: build_charclass_isra_29+3CB↑j
.text:000000000000D31C                 lea     rdi, aUpper     ; "upper"
.text:000000000000D323                 mov     ecx, 6
.text:000000000000D328                 mov     rsi, r12
.text:000000000000D32B                 repe cmpsb
.text:000000000000D32D                 setnbe  al
.text:000000000000D330                 sbb     al, 0
.text:000000000000D332                 test    al, al
.text:000000000000D334                 jnz     short loc_D382
.text:000000000000D336                 call    ___ctype_b_loc
.text:000000000000D33B                 xor     ecx, ecx
.text:000000000000D33D                 test    rbp, rbp
.text:000000000000D340                 mov     rax, [rax]
.text:000000000000D343                 mov     edi, 1
.text:000000000000D348                 jnz     loc_D670
.text:000000000000D34E
.text:000000000000D34E loc_D34E:                               ; CODE XREF: build_charclass_isra_29+4A1↓j
.text:000000000000D34E                 test    byte ptr [rax+rcx*2+1], 1
.text:000000000000D353                 jz      short loc_D366
.text:000000000000D355                 mov     rdx, rcx
.text:000000000000D358                 mov     rsi, rdi
.text:000000000000D35B                 sar     rdx, 6
.text:000000000000D35F                 shl     rsi, cl
.text:000000000000D362                 or      [rbx+rdx*8], rsi
.text:000000000000D366
.text:000000000000D366 loc_D366:                               ; CODE XREF: build_charclass_isra_29+483↑j
.text:000000000000D366                 add     rcx, 1
.text:000000000000D36A                 cmp     rcx, 100h
.text:000000000000D371                 jnz     short loc_D34E
.text:000000000000D373                 jmp     loc_CFB4
.text:000000000000D378 ; ---------------------------------------------------------------------------
.text:000000000000D378
.text:000000000000D378 loc_D378:                               ; CODE XREF: build_charclass_isra_29+18A↑j
.text:000000000000D378                 mov     eax, 0Ch
.text:000000000000D37D                 jmp     loc_CFB6
.text:000000000000D382 ; ---------------------------------------------------------------------------
.text:000000000000D382
.text:000000000000D382 loc_D382:                               ; CODE XREF: build_charclass_isra_29+464↑j
.text:000000000000D382                 lea     rdi, aBlank     ; "blank"
.text:000000000000D389                 mov     ecx, 6
.text:000000000000D38E                 mov     rsi, r12
.text:000000000000D391                 repe cmpsb
.text:000000000000D393                 setnbe  al
.text:000000000000D396                 sbb     al, 0
.text:000000000000D398                 test    al, al
.text:000000000000D39A                 jnz     loc_D48E
.text:000000000000D3A0                 call    ___ctype_b_loc
.text:000000000000D3A5                 xor     ecx, ecx
.text:000000000000D3A7                 test    rbp, rbp
.text:000000000000D3AA                 mov     rdx, [rax]
.text:000000000000D3AD                 mov     esi, 1
.text:000000000000D3B2                 jnz     loc_D454
.text:000000000000D3B8
.text:000000000000D3B8 loc_D3B8:                               ; CODE XREF: build_charclass_isra_29+50A↓j
.text:000000000000D3B8                 test    byte ptr [rdx+rcx*2], 1
.text:000000000000D3BC                 jz      short loc_D3CF
.text:000000000000D3BE                 mov     rax, rcx
.text:000000000000D3C1                 mov     rdi, rsi
.text:000000000000D3C4                 sar     rax, 6
.text:000000000000D3C8                 shl     rdi, cl
.text:000000000000D3CB                 or      [rbx+rax*8], rdi
.text:000000000000D3CF
.text:000000000000D3CF loc_D3CF:                               ; CODE XREF: build_charclass_isra_29+4EC↑j
.text:000000000000D3CF                 add     rcx, 1
.text:000000000000D3D3                 cmp     rcx, 100h
.text:000000000000D3DA                 jnz     short loc_D3B8
.text:000000000000D3DC                 jmp     loc_CFB4
.text:000000000000D3DC ; ---------------------------------------------------------------------------
.text:000000000000D3E1                 align 8
.text:000000000000D3E8
.text:000000000000D3E8 loc_D3E8:                               ; CODE XREF: build_charclass_isra_29+345↑j
.text:000000000000D3E8                 xor     eax, eax
.text:000000000000D3EA
.text:000000000000D3EA loc_D3EA:                               ; CODE XREF: build_charclass_isra_29+547↓j
.text:000000000000D3EA                 test    byte ptr [rdx+rax*2+1], 4
.text:000000000000D3EF                 jz      short loc_D40D
.text:000000000000D3F1                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000D3F6                 mov     r9, rdi
.text:000000000000D3F9                 mov     rsi, rcx
.text:000000000000D3FC                 and     ecx, 3Fh
.text:000000000000D3FF                 shr     rsi, 3
.text:000000000000D403                 shl     r9, cl
.text:000000000000D406                 and     esi, 18h
.text:000000000000D409                 or      [rbx+rsi], r9
.text:000000000000D40D
.text:000000000000D40D loc_D40D:                               ; CODE XREF: build_charclass_isra_29+51F↑j
.text:000000000000D40D                 add     rax, 1
.text:000000000000D411                 cmp     rax, 100h
.text:000000000000D417                 jnz     short loc_D3EA
.text:000000000000D419                 jmp     loc_CFB4
.text:000000000000D41E ; ---------------------------------------------------------------------------
.text:000000000000D41E
.text:000000000000D41E loc_D41E:                               ; CODE XREF: build_charclass_isra_29+1F2↑j
.text:000000000000D41E                 xor     eax, eax
.text:000000000000D420
.text:000000000000D420 loc_D420:                               ; CODE XREF: build_charclass_isra_29+57D↓j
.text:000000000000D420                 test    byte ptr [rdx+rax*2+1], 20h
.text:000000000000D425                 jz      short loc_D443
.text:000000000000D427                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000D42C                 mov     r9, rdi
.text:000000000000D42F                 mov     rsi, rcx
.text:000000000000D432                 and     ecx, 3Fh
.text:000000000000D435                 shr     rsi, 3
.text:000000000000D439                 shl     r9, cl
.text:000000000000D43C                 and     esi, 18h
.text:000000000000D43F                 or      [rbx+rsi], r9
.text:000000000000D443
.text:000000000000D443 loc_D443:                               ; CODE XREF: build_charclass_isra_29+555↑j
.text:000000000000D443                 add     rax, 1
.text:000000000000D447                 cmp     rax, 100h
.text:000000000000D44D                 jnz     short loc_D420
.text:000000000000D44F                 jmp     loc_CFB4
.text:000000000000D454 ; ---------------------------------------------------------------------------
.text:000000000000D454
.text:000000000000D454 loc_D454:                               ; CODE XREF: build_charclass_isra_29+4E2↑j
.text:000000000000D454                 xor     eax, eax
.text:000000000000D456                 mov     edi, 1
.text:000000000000D45B
.text:000000000000D45B loc_D45B:                               ; CODE XREF: build_charclass_isra_29+5B7↓j
.text:000000000000D45B                 test    byte ptr [rdx+rax*2], 1
.text:000000000000D45F                 jz      short loc_D47D
.text:000000000000D461                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000D466                 mov     r14, rdi
.text:000000000000D469                 mov     rsi, rcx
.text:000000000000D46C                 and     ecx, 3Fh
.text:000000000000D46F                 shr     rsi, 3
.text:000000000000D473                 shl     r14, cl
.text:000000000000D476                 and     esi, 18h
.text:000000000000D479                 or      [rbx+rsi], r14
.text:000000000000D47D
.text:000000000000D47D loc_D47D:                               ; CODE XREF: build_charclass_isra_29+58F↑j
.text:000000000000D47D                 add     rax, 1
.text:000000000000D481                 cmp     rax, 100h
.text:000000000000D487                 jnz     short loc_D45B
.text:000000000000D489                 jmp     loc_CFB4
.text:000000000000D48E ; ---------------------------------------------------------------------------
.text:000000000000D48E
.text:000000000000D48E loc_D48E:                               ; CODE XREF: build_charclass_isra_29+4CA↑j
.text:000000000000D48E                 lea     rsi, aGraph     ; "graph"
.text:000000000000D495                 mov     rdi, r12        ; s1
.text:000000000000D498                 call    _strcmp
.text:000000000000D49D                 test    eax, eax
.text:000000000000D49F                 jnz     short loc_D51A
.text:000000000000D4A1                 call    ___ctype_b_loc
.text:000000000000D4A6                 xor     ecx, ecx
.text:000000000000D4A8                 test    rbp, rbp
.text:000000000000D4AB                 mov     rsi, [rax]
.text:000000000000D4AE                 mov     edx, 1
.text:000000000000D4B3                 jnz     short loc_D4DF
.text:000000000000D4B5
.text:000000000000D4B5 loc_D4B5:                               ; CODE XREF: build_charclass_isra_29+608↓j
.text:000000000000D4B5                 cmp     word ptr [rsi+rcx*2], 0
.text:000000000000D4BA                 jns     short loc_D4CD
.text:000000000000D4BC                 mov     rax, rcx
.text:000000000000D4BF                 mov     rdi, rdx
.text:000000000000D4C2                 sar     rax, 6
.text:000000000000D4C6                 shl     rdi, cl
.text:000000000000D4C9                 or      [rbx+rax*8], rdi
.text:000000000000D4CD
.text:000000000000D4CD loc_D4CD:                               ; CODE XREF: build_charclass_isra_29+5EA↑j
.text:000000000000D4CD                 add     rcx, 1
.text:000000000000D4D1                 cmp     rcx, 100h
.text:000000000000D4D8                 jnz     short loc_D4B5
.text:000000000000D4DA                 jmp     loc_CFB4
.text:000000000000D4DF ; ---------------------------------------------------------------------------
.text:000000000000D4DF
.text:000000000000D4DF loc_D4DF:                               ; CODE XREF: build_charclass_isra_29+5E3↑j
.text:000000000000D4DF                 xor     eax, eax
.text:000000000000D4E1                 mov     edi, 1
.text:000000000000D4E6
.text:000000000000D4E6 loc_D4E6:                               ; CODE XREF: build_charclass_isra_29+643↓j
.text:000000000000D4E6                 cmp     word ptr [rsi+rax*2], 0
.text:000000000000D4EB                 jns     short loc_D509
.text:000000000000D4ED                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000D4F2                 mov     r9, rdi
.text:000000000000D4F5                 mov     rdx, rcx
.text:000000000000D4F8                 and     ecx, 3Fh
.text:000000000000D4FB                 shr     rdx, 3
.text:000000000000D4FF                 shl     r9, cl
.text:000000000000D502                 and     edx, 18h
.text:000000000000D505                 or      [rbx+rdx], r9
.text:000000000000D509
.text:000000000000D509 loc_D509:                               ; CODE XREF: build_charclass_isra_29+61B↑j
.text:000000000000D509                 add     rax, 1
.text:000000000000D50D                 cmp     rax, 100h
.text:000000000000D513                 jnz     short loc_D4E6
.text:000000000000D515                 jmp     loc_CFB4
.text:000000000000D51A ; ---------------------------------------------------------------------------
.text:000000000000D51A
.text:000000000000D51A loc_D51A:                               ; CODE XREF: build_charclass_isra_29+5CF↑j
.text:000000000000D51A                 lea     rsi, aPunct     ; "punct"
.text:000000000000D521                 mov     rdi, r12        ; s1
.text:000000000000D524                 call    _strcmp
.text:000000000000D529                 test    eax, eax
.text:000000000000D52B                 jnz     short loc_D5A4
.text:000000000000D52D                 call    ___ctype_b_loc
.text:000000000000D532                 xor     ecx, ecx
.text:000000000000D534                 test    rbp, rbp
.text:000000000000D537                 mov     rsi, [rax]
.text:000000000000D53A                 mov     edx, 1
.text:000000000000D53F                 jnz     short loc_D56A
.text:000000000000D541
.text:000000000000D541 loc_D541:                               ; CODE XREF: build_charclass_isra_29+693↓j
.text:000000000000D541                 test    byte ptr [rsi+rcx*2], 4
.text:000000000000D545                 jz      short loc_D558
.text:000000000000D547                 mov     rax, rcx
.text:000000000000D54A                 mov     rdi, rdx
.text:000000000000D54D                 sar     rax, 6
.text:000000000000D551                 shl     rdi, cl
.text:000000000000D554                 or      [rbx+rax*8], rdi
.text:000000000000D558
.text:000000000000D558 loc_D558:                               ; CODE XREF: build_charclass_isra_29+675↑j
.text:000000000000D558                 add     rcx, 1
.text:000000000000D55C                 cmp     rcx, 100h
.text:000000000000D563                 jnz     short loc_D541
.text:000000000000D565                 jmp     loc_CFB4
.text:000000000000D56A ; ---------------------------------------------------------------------------
.text:000000000000D56A
.text:000000000000D56A loc_D56A:                               ; CODE XREF: build_charclass_isra_29+66F↑j
.text:000000000000D56A                 xor     eax, eax
.text:000000000000D56C                 mov     edi, 1
.text:000000000000D571
.text:000000000000D571 loc_D571:                               ; CODE XREF: build_charclass_isra_29+6CD↓j
.text:000000000000D571                 test    byte ptr [rsi+rax*2], 4
.text:000000000000D575                 jz      short loc_D593
.text:000000000000D577                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000D57C                 mov     r14, rdi
.text:000000000000D57F                 mov     rdx, rcx
.text:000000000000D582                 and     ecx, 3Fh
.text:000000000000D585                 shr     rdx, 3
.text:000000000000D589                 shl     r14, cl
.text:000000000000D58C                 and     edx, 18h
.text:000000000000D58F                 or      [rbx+rdx], r14
.text:000000000000D593
.text:000000000000D593 loc_D593:                               ; CODE XREF: build_charclass_isra_29+6A5↑j
.text:000000000000D593                 add     rax, 1
.text:000000000000D597                 cmp     rax, 100h
.text:000000000000D59D                 jnz     short loc_D571
.text:000000000000D59F                 jmp     loc_CFB4
.text:000000000000D5A4 ; ---------------------------------------------------------------------------
.text:000000000000D5A4
.text:000000000000D5A4 loc_D5A4:                               ; CODE XREF: build_charclass_isra_29+65B↑j
.text:000000000000D5A4                 lea     rsi, asc_176B5  ; "x"
.text:000000000000D5AB                 mov     rdi, r12        ; s1
.text:000000000000D5AE                 call    _strcmp
.text:000000000000D5B3                 test    eax, eax
.text:000000000000D5B5                 jnz     short loc_D630
.text:000000000000D5B7                 call    ___ctype_b_loc
.text:000000000000D5BC                 xor     ecx, ecx
.text:000000000000D5BE                 test    rbp, rbp
.text:000000000000D5C1                 mov     rsi, [rax]
.text:000000000000D5C4                 mov     edx, 1
.text:000000000000D5C9                 jnz     short loc_D5F5
.text:000000000000D5CB
.text:000000000000D5CB loc_D5CB:                               ; CODE XREF: build_charclass_isra_29+71E↓j
.text:000000000000D5CB                 test    byte ptr [rsi+rcx*2+1], 10h
.text:000000000000D5D0                 jz      short loc_D5E3
.text:000000000000D5D2                 mov     rax, rcx
.text:000000000000D5D5                 mov     rdi, rdx
.text:000000000000D5D8                 sar     rax, 6
.text:000000000000D5DC                 shl     rdi, cl
.text:000000000000D5DF                 or      [rbx+rax*8], rdi
.text:000000000000D5E3
.text:000000000000D5E3 loc_D5E3:                               ; CODE XREF: build_charclass_isra_29+700↑j
.text:000000000000D5E3                 add     rcx, 1
.text:000000000000D5E7                 cmp     rcx, 100h
.text:000000000000D5EE                 jnz     short loc_D5CB
.text:000000000000D5F0                 jmp     loc_CFB4
.text:000000000000D5F5 ; ---------------------------------------------------------------------------
.text:000000000000D5F5
.text:000000000000D5F5 loc_D5F5:                               ; CODE XREF: build_charclass_isra_29+6F9↑j
.text:000000000000D5F5                 xor     eax, eax
.text:000000000000D5F7                 mov     edi, 1
.text:000000000000D5FC
.text:000000000000D5FC loc_D5FC:                               ; CODE XREF: build_charclass_isra_29+759↓j
.text:000000000000D5FC                 test    byte ptr [rsi+rax*2+1], 10h
.text:000000000000D601                 jz      short loc_D61F
.text:000000000000D603                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000D608                 mov     r9, rdi
.text:000000000000D60B                 mov     rdx, rcx
.text:000000000000D60E                 and     ecx, 3Fh
.text:000000000000D611                 shr     rdx, 3
.text:000000000000D615                 shl     r9, cl
.text:000000000000D618                 and     edx, 18h
.text:000000000000D61B                 or      [rbx+rdx], r9
.text:000000000000D61F
.text:000000000000D61F loc_D61F:                               ; CODE XREF: build_charclass_isra_29+731↑j
.text:000000000000D61F                 add     rax, 1
.text:000000000000D623                 cmp     rax, 100h
.text:000000000000D629                 jnz     short loc_D5FC
.text:000000000000D62B                 jmp     loc_CFB4
.text:000000000000D630 ; ---------------------------------------------------------------------------
.text:000000000000D630
.text:000000000000D630 loc_D630:                               ; CODE XREF: build_charclass_isra_29+6E5↑j
.text:000000000000D630                 mov     eax, 4
.text:000000000000D635                 jmp     loc_CFB6
.text:000000000000D63A ; ---------------------------------------------------------------------------
.text:000000000000D63A
.text:000000000000D63A loc_D63A:                               ; CODE XREF: build_charclass_isra_29+2C0↑j
.text:000000000000D63A                 xor     eax, eax
.text:000000000000D63C
.text:000000000000D63C loc_D63C:                               ; CODE XREF: build_charclass_isra_29+799↓j
.text:000000000000D63C                 test    byte ptr [rdx+rax*2+1], 8
.text:000000000000D641                 jz      short loc_D65F
.text:000000000000D643                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000D648                 mov     r14, rdi
.text:000000000000D64B                 mov     rsi, rcx
.text:000000000000D64E                 and     ecx, 3Fh
.text:000000000000D651                 shr     rsi, 3
.text:000000000000D655                 shl     r14, cl
.text:000000000000D658                 and     esi, 18h
.text:000000000000D65B                 or      [rbx+rsi], r14
.text:000000000000D65F
.text:000000000000D65F loc_D65F:                               ; CODE XREF: build_charclass_isra_29+771↑j
.text:000000000000D65F                 add     rax, 1
.text:000000000000D663                 cmp     rax, 100h
.text:000000000000D669                 jnz     short loc_D63C
.text:000000000000D66B                 jmp     loc_CFB4
.text:000000000000D670 ; ---------------------------------------------------------------------------
.text:000000000000D670
.text:000000000000D670 loc_D670:                               ; CODE XREF: build_charclass_isra_29+478↑j
.text:000000000000D670                 xor     edx, edx
.text:000000000000D672
.text:000000000000D672 loc_D672:                               ; CODE XREF: build_charclass_isra_29+7D0↓j
.text:000000000000D672                 test    byte ptr [rax+rdx*2+1], 1
.text:000000000000D677                 jz      short loc_D695
.text:000000000000D679                 movzx   ecx, byte ptr [rbp+rdx+0]
.text:000000000000D67E                 mov     r9, rdi
.text:000000000000D681                 mov     rsi, rcx
.text:000000000000D684                 and     ecx, 3Fh
.text:000000000000D687                 shr     rsi, 3
.text:000000000000D68B                 shl     r9, cl
.text:000000000000D68E                 and     esi, 18h
.text:000000000000D691                 or      [rbx+rsi], r9
.text:000000000000D695
.text:000000000000D695 loc_D695:                               ; CODE XREF: build_charclass_isra_29+7A7↑j
.text:000000000000D695                 add     rdx, 1
.text:000000000000D699                 cmp     rdx, 100h
.text:000000000000D6A0                 jnz     short loc_D672
.text:000000000000D6A2                 jmp     loc_CFB4
.text:000000000000D6A7 ; ---------------------------------------------------------------------------
.text:000000000000D6A7
.text:000000000000D6A7 loc_D6A7:                               ; CODE XREF: build_charclass_isra_29+3DF↑j
.text:000000000000D6A7                 xor     eax, eax
.text:000000000000D6A9
.text:000000000000D6A9 loc_D6A9:                               ; CODE XREF: build_charclass_isra_29+806↓j
.text:000000000000D6A9                 test    byte ptr [rdx+rax*2+1], 40h
.text:000000000000D6AE                 jz      short loc_D6CC
.text:000000000000D6B0                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000D6B5                 mov     r14, rdi
.text:000000000000D6B8                 mov     rsi, rcx
.text:000000000000D6BB                 and     ecx, 3Fh
.text:000000000000D6BE                 shr     rsi, 3
.text:000000000000D6C2                 shl     r14, cl
.text:000000000000D6C5                 and     esi, 18h
.text:000000000000D6C8                 or      [rbx+rsi], r14
.text:000000000000D6CC
.text:000000000000D6CC loc_D6CC:                               ; CODE XREF: build_charclass_isra_29+7DE↑j
.text:000000000000D6CC                 add     rax, 1
.text:000000000000D6D0                 cmp     rax, 100h
.text:000000000000D6D6                 jnz     short loc_D6A9
.text:000000000000D6D8                 jmp     loc_CFB4
.text:000000000000D6D8 ; } // starts at CED0
.text:000000000000D6D8 build_charclass_isra_29 endp
.text:000000000000D6D8
.text:000000000000D6D8 ; ---------------------------------------------------------------------------
.text:000000000000D6DD                 align 20h
.text:000000000000D6E0
.text:000000000000D6E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D6E0
.text:000000000000D6E0
.text:000000000000D6E0 build_charclass_op proc near            ; CODE XREF: parse_expression+992↓p
.text:000000000000D6E0
.text:000000000000D6E0 var_88          = qword ptr -88h
.text:000000000000D6E0 var_80          = qword ptr -80h
.text:000000000000D6E0 var_70          = qword ptr -70h
.text:000000000000D6E0 var_68          = qword ptr -68h
.text:000000000000D6E0 var_60          = byte ptr -60h
.text:000000000000D6E0 var_58          = byte ptr -58h
.text:000000000000D6E0 var_50          = byte ptr -50h
.text:000000000000D6E0 var_40          = qword ptr -40h
.text:000000000000D6E0
.text:000000000000D6E0 ; __unwind {
.text:000000000000D6E0                 push    r15
.text:000000000000D6E2                 push    r14
.text:000000000000D6E4                 mov     r14, rdx
.text:000000000000D6E7                 push    r13
.text:000000000000D6E9                 push    r12
.text:000000000000D6EB                 mov     r13, rcx
.text:000000000000D6EE                 push    rbp
.text:000000000000D6EF                 push    rbx
.text:000000000000D6F0                 mov     rbp, rdi
.text:000000000000D6F3                 mov     edi, 20h ; ' '  ; nmemb
.text:000000000000D6F8                 mov     r12d, r8d
.text:000000000000D6FB                 sub     rsp, 58h
.text:000000000000D6FF                 mov     [rsp+88h+var_88], rsi
.text:000000000000D703                 mov     esi, 1          ; size
.text:000000000000D708                 mov     [rsp+88h+var_80], r9
.text:000000000000D70D                 mov     rax, fs:28h
.text:000000000000D716                 mov     [rsp+88h+var_40], rax
.text:000000000000D71B                 xor     eax, eax
.text:000000000000D71D                 mov     [rsp+88h+var_70], 0
.text:000000000000D726                 call    _calloc
.text:000000000000D72B                 test    rax, rax
.text:000000000000D72E                 jz      loc_D8F0
.text:000000000000D734                 mov     esi, 1          ; size
.text:000000000000D739                 mov     edi, 50h ; 'P'  ; nmemb
.text:000000000000D73E                 mov     rbx, rax
.text:000000000000D741                 call    _calloc
.text:000000000000D746                 test    rax, rax
.text:000000000000D749                 mov     r15, rax
.text:000000000000D74C                 jz      loc_D900
.text:000000000000D752                 movzx   eax, byte ptr [rax+20h]
.text:000000000000D756                 sub     rsp, 8
.text:000000000000D75A                 mov     edx, r12d
.text:000000000000D75D                 push    0
.text:000000000000D75F                 and     edx, 1
.text:000000000000D762                 mov     rdi, [rsp+98h+var_88]
.text:000000000000D767                 lea     rcx, [r15+48h]
.text:000000000000D76B                 mov     r9, r14
.text:000000000000D76E                 mov     rsi, rbx
.text:000000000000D771                 lea     r8, [rsp+98h+var_70]
.text:000000000000D776                 and     eax, 0FFFFFFFEh
.text:000000000000D779                 or      eax, edx
.text:000000000000D77B                 lea     rdx, [r15+18h]
.text:000000000000D77F                 mov     [r15+20h], al
.text:000000000000D783                 call    build_charclass_isra_29
.text:000000000000D788                 test    eax, eax
.text:000000000000D78A                 pop     rdx
.text:000000000000D78B                 pop     rcx
.text:000000000000D78C                 jnz     loc_D920
.text:000000000000D792                 movsx   rcx, byte ptr [r13+0]
.text:000000000000D797                 mov     esi, 1
.text:000000000000D79C                 test    cl, cl
.text:000000000000D79E                 jz      short loc_D7DA
.text:000000000000D7A0
.text:000000000000D7A0 loc_D7A0:                               ; CODE XREF: build_charclass_op+F8↓j
.text:000000000000D7A0                 lea     rax, [rcx+3Fh]
.text:000000000000D7A4                 test    rcx, rcx
.text:000000000000D7A7                 mov     rdx, rcx
.text:000000000000D7AA                 cmovns  rax, rcx
.text:000000000000D7AE                 sar     rdx, 3Fh
.text:000000000000D7B2                 add     r13, 1
.text:000000000000D7B6                 shr     rdx, 3Ah
.text:000000000000D7BA                 sar     rax, 6
.text:000000000000D7BE                 add     rcx, rdx
.text:000000000000D7C1                 and     ecx, 3Fh
.text:000000000000D7C4                 sub     rcx, rdx
.text:000000000000D7C7                 mov     rdx, rsi
.text:000000000000D7CA                 shl     rdx, cl
.text:000000000000D7CD                 movsx   rcx, byte ptr [r13+0]
.text:000000000000D7D2                 or      [rbx+rax*8], rdx
.text:000000000000D7D6                 test    cl, cl
.text:000000000000D7D8                 jnz     short loc_D7A0
.text:000000000000D7DA
.text:000000000000D7DA loc_D7DA:                               ; CODE XREF: build_charclass_op+BE↑j
.text:000000000000D7DA                 test    r12b, r12b
.text:000000000000D7DD                 jz      short loc_D7F2
.text:000000000000D7DF                 lea     rdx, [rbx+20h]
.text:000000000000D7E3                 mov     rax, rbx
.text:000000000000D7E6
.text:000000000000D7E6 loc_D7E6:                               ; CODE XREF: build_charclass_op+110↓j
.text:000000000000D7E6                 not     qword ptr [rax]
.text:000000000000D7E9                 add     rax, 8
.text:000000000000D7ED                 cmp     rdx, rax
.text:000000000000D7F0                 jnz     short loc_D7E6
.text:000000000000D7F2
.text:000000000000D7F2 loc_D7F2:                               ; CODE XREF: build_charclass_op+FD↑j
.text:000000000000D7F2                 cmp     dword ptr [rbp+0B4h], 1
.text:000000000000D7F9                 jle     short loc_D813
.text:000000000000D7FB                 mov     rcx, [rbp+78h]
.text:000000000000D7FF                 xor     eax, eax
.text:000000000000D801
.text:000000000000D801 loc_D801:                               ; CODE XREF: build_charclass_op+131↓j
.text:000000000000D801                 mov     rdx, [rcx+rax]
.text:000000000000D805                 and     [rbx+rax], rdx
.text:000000000000D809                 add     rax, 8
.text:000000000000D80D                 cmp     rax, 20h ; ' '
.text:000000000000D811                 jnz     short loc_D801
.text:000000000000D813
.text:000000000000D813 loc_D813:                               ; CODE XREF: build_charclass_op+119↑j
.text:000000000000D813                 lea     r9, [rsp+88h+var_68]
.text:000000000000D818                 lea     r12, [rbp+70h]
.text:000000000000D81C                 lea     r13, [rbp+80h]
.text:000000000000D823                 xor     ecx, ecx
.text:000000000000D825                 xor     edx, edx
.text:000000000000D827                 mov     [rsp+88h+var_60], 3
.text:000000000000D82C                 mov     r8, r9
.text:000000000000D82F                 mov     rsi, r13
.text:000000000000D832                 mov     rdi, r12
.text:000000000000D835                 mov     [rsp+88h+var_68], rbx
.text:000000000000D83A                 mov     [rsp+88h+var_88], r9
.text:000000000000D83E                 call    create_token_tree_isra_16
.text:000000000000D843                 test    rax, rax
.text:000000000000D846                 mov     r14, rax
.text:000000000000D849                 jz      loc_D8E0
.text:000000000000D84F                 cmp     dword ptr [rbp+0B4h], 1
.text:000000000000D856                 jle     short loc_D8D0
.text:000000000000D858                 or      byte ptr [rbp+0B0h], 2
.text:000000000000D85F                 mov     r9, [rsp+88h+var_88]
.text:000000000000D863                 xor     ecx, ecx
.text:000000000000D865                 xor     edx, edx
.text:000000000000D867                 mov     rsi, r13
.text:000000000000D86A                 mov     rdi, r12
.text:000000000000D86D                 mov     [rsp+88h+var_60], 6
.text:000000000000D872                 mov     [rsp+88h+var_68], r15
.text:000000000000D877                 mov     r8, r9
.text:000000000000D87A                 call    create_token_tree_isra_16
.text:000000000000D87F                 test    rax, rax
.text:000000000000D882                 jz      short loc_D8E0
.text:000000000000D884                 lea     r8, [rsp+88h+var_58]
.text:000000000000D889                 mov     rdx, r14
.text:000000000000D88C                 mov     rcx, rax
.text:000000000000D88F                 mov     rsi, r13
.text:000000000000D892                 mov     rdi, r12
.text:000000000000D895                 mov     [rsp+88h+var_50], 0Ah
.text:000000000000D89A                 call    create_token_tree_isra_16
.text:000000000000D89F                 mov     r14, rax
.text:000000000000D8A2
.text:000000000000D8A2 loc_D8A2:                               ; CODE XREF: build_charclass_op+1F8↓j
.text:000000000000D8A2                                         ; build_charclass_op+21E↓j ...
.text:000000000000D8A2                 mov     rdi, [rsp+88h+var_40]
.text:000000000000D8A7                 xor     rdi, fs:28h
.text:000000000000D8B0                 mov     rax, r14
.text:000000000000D8B3                 jnz     loc_D945
.text:000000000000D8B9                 add     rsp, 58h
.text:000000000000D8BD                 pop     rbx
.text:000000000000D8BE                 pop     rbp
.text:000000000000D8BF                 pop     r12
.text:000000000000D8C1                 pop     r13
.text:000000000000D8C3                 pop     r14
.text:000000000000D8C5                 pop     r15
.text:000000000000D8C7                 retn
.text:000000000000D8C7 ; ---------------------------------------------------------------------------
.text:000000000000D8C8                 align 10h
.text:000000000000D8D0
.text:000000000000D8D0 loc_D8D0:                               ; CODE XREF: build_charclass_op+176↑j
.text:000000000000D8D0                 mov     rdi, r15        ; ptr
.text:000000000000D8D3                 call    isl_union_flow_free_0
.text:000000000000D8D8                 jmp     short loc_D8A2
.text:000000000000D8D8 ; ---------------------------------------------------------------------------
.text:000000000000D8DA                 align 20h
.text:000000000000D8E0
.text:000000000000D8E0 loc_D8E0:                               ; CODE XREF: build_charclass_op+169↑j
.text:000000000000D8E0                                         ; build_charclass_op+1A2↑j
.text:000000000000D8E0                 mov     rdi, rbx        ; ptr
.text:000000000000D8E3                 call    _free
.text:000000000000D8E8                 mov     rdi, r15        ; ptr
.text:000000000000D8EB                 call    isl_union_flow_free_0
.text:000000000000D8F0
.text:000000000000D8F0 loc_D8F0:                               ; CODE XREF: build_charclass_op+4E↑j
.text:000000000000D8F0                 mov     rax, [rsp+88h+var_80]
.text:000000000000D8F5                 xor     r14d, r14d
.text:000000000000D8F8                 mov     dword ptr [rax], 0Ch
.text:000000000000D8FE                 jmp     short loc_D8A2
.text:000000000000D900 ; ---------------------------------------------------------------------------
.text:000000000000D900
.text:000000000000D900 loc_D900:                               ; CODE XREF: build_charclass_op+6C↑j
.text:000000000000D900                 mov     rdi, rbx        ; ptr
.text:000000000000D903                 xor     r14d, r14d
.text:000000000000D906                 call    _free
.text:000000000000D90B                 mov     rax, [rsp+88h+var_80]
.text:000000000000D910                 mov     dword ptr [rax], 0Ch
.text:000000000000D916                 jmp     short loc_D8A2
.text:000000000000D916 ; ---------------------------------------------------------------------------
.text:000000000000D918                 align 20h
.text:000000000000D920
.text:000000000000D920 loc_D920:                               ; CODE XREF: build_charclass_op+AC↑j
.text:000000000000D920                 mov     rdi, rbx        ; ptr
.text:000000000000D923                 mov     dword ptr [rsp+88h+var_88], eax
.text:000000000000D926                 xor     r14d, r14d
.text:000000000000D929                 call    _free
.text:000000000000D92E                 mov     rdi, r15        ; ptr
.text:000000000000D931                 call    isl_union_flow_free_0
.text:000000000000D936                 mov     rdi, [rsp+88h+var_80]
.text:000000000000D93B                 mov     eax, dword ptr [rsp+88h+var_88]
.text:000000000000D93E                 mov     [rdi], eax
.text:000000000000D940                 jmp     loc_D8A2
.text:000000000000D945 ; ---------------------------------------------------------------------------
.text:000000000000D945
.text:000000000000D945 loc_D945:                               ; CODE XREF: build_charclass_op+1D3↑j
.text:000000000000D945                 call    ___stack_chk_fail
.text:000000000000D945 ; } // starts at D6E0
.text:000000000000D945 build_charclass_op endp
.text:000000000000D945
.text:000000000000D945 ; ---------------------------------------------------------------------------
.text:000000000000D94A                 align 10h
.text:000000000000D950
.text:000000000000D950 ; =============== S U B R O U T I N E =======================================
.text:000000000000D950
.text:000000000000D950
.text:000000000000D950 re_compile_fastmap_iter_isra_30 proc near
.text:000000000000D950                                         ; CODE XREF: rpl_re_compile_fastmap+50↓p
.text:000000000000D950                                         ; rpl_re_compile_fastmap+6F↓p ...
.text:000000000000D950
.text:000000000000D950 var_1A8         = qword ptr -1A8h
.text:000000000000D950 var_1A0         = qword ptr -1A0h
.text:000000000000D950 var_198         = qword ptr -198h
.text:000000000000D950 var_190         = qword ptr -190h
.text:000000000000D950 var_188         = qword ptr -188h
.text:000000000000D950 var_180         = qword ptr -180h
.text:000000000000D950 var_178         = qword ptr -178h
.text:000000000000D950 s               = qword ptr -170h
.text:000000000000D950 ps              = qword ptr -168h
.text:000000000000D950 var_160         = qword ptr -160h
.text:000000000000D950 wc              = dword ptr -154h
.text:000000000000D950 var_150         = byte ptr -150h
.text:000000000000D950 var_148         = byte ptr -148h
.text:000000000000D950 var_40          = qword ptr -40h
.text:000000000000D950
.text:000000000000D950 ; __unwind {
.text:000000000000D950                 push    r15
.text:000000000000D952                 push    r14
.text:000000000000D954                 mov     rax, rdi
.text:000000000000D957                 push    r13
.text:000000000000D959                 push    r12
.text:000000000000D95B                 push    rbp
.text:000000000000D95C                 push    rbx
.text:000000000000D95D                 xor     ebx, ebx
.text:000000000000D95F                 mov     rbp, rcx
.text:000000000000D962                 sub     rsp, 178h
.text:000000000000D969                 mov     rax, [rax]
.text:000000000000D96C                 mov     [rsp+1A8h+var_178], rdi
.text:000000000000D971                 mov     [rsp+1A8h+var_188], rsi
.text:000000000000D976                 mov     rdi, fs:28h
.text:000000000000D97F                 mov     [rsp+1A8h+var_40], rdi
.text:000000000000D987                 xor     edi, edi
.text:000000000000D989                 cmp     dword ptr [rax+0B4h], 1
.text:000000000000D990                 mov     [rsp+1A8h+var_180], rdx
.text:000000000000D995                 mov     [rsp+1A8h+var_1A0], rax
.text:000000000000D99A                 jnz     short loc_D9B3
.text:000000000000D99C                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000D9A1                 mov     rax, [rax+18h]
.text:000000000000D9A5                 mov     rbx, rax
.text:000000000000D9A8                 mov     [rsp+1A8h+var_1A8], rax
.text:000000000000D9AC                 shr     rbx, 16h
.text:000000000000D9B0                 and     ebx, 1
.text:000000000000D9B3
.text:000000000000D9B3 loc_D9B3:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+4A↑j
.text:000000000000D9B3                 mov     rax, [rsp+1A8h+var_188]
.text:000000000000D9B8                 cmp     qword ptr [rax], 0
.text:000000000000D9BC                 jle     loc_DDCD
.text:000000000000D9C2                 lea     rax, [rsp+1A8h+var_150]
.text:000000000000D9C7                 mov     [rsp+1A8h+var_1A8], 0
.text:000000000000D9CF                 mov     [rsp+1A8h+ps], rax
.text:000000000000D9D4                 lea     rax, [rsp+1A8h+wc]
.text:000000000000D9D9                 mov     [rsp+1A8h+var_160], rax
.text:000000000000D9DE                 lea     rax, [rsp+1A8h+var_148]
.text:000000000000D9E3                 mov     [rsp+1A8h+s], rax
.text:000000000000D9E8                 jmp     short loc_DA2E
.text:000000000000D9E8 ; ---------------------------------------------------------------------------
.text:000000000000D9EA                 align 10h
.text:000000000000D9F0
.text:000000000000D9F0 loc_D9F0:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+10F↓j
.text:000000000000D9F0                 cmp     eax, 3
.text:000000000000D9F3                 jz      loc_DCE6
.text:000000000000D9F9                 cmp     eax, 6
.text:000000000000D9FC                 jz      loc_DB88
.text:000000000000DA02                 and     edx, 0FFFFFFFDh
.text:000000000000DA05                 cmp     dl, 5
.text:000000000000DA08                 jz      loc_DE04
.text:000000000000DA0E                 cmp     eax, 2
.text:000000000000DA11                 jz      loc_DD64
.text:000000000000DA17
.text:000000000000DA17 loc_DA17:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+139↓j
.text:000000000000DA17                                         ; re_compile_fastmap_iter_isra_30+147↓j ...
.text:000000000000DA17                 mov     rdi, [rsp+1A8h+var_188]
.text:000000000000DA1C                 add     [rsp+1A8h+var_1A8], 1
.text:000000000000DA21                 mov     rax, [rsp+1A8h+var_1A8]
.text:000000000000DA25                 cmp     rax, [rdi]
.text:000000000000DA28                 jge     loc_DDCD
.text:000000000000DA2E
.text:000000000000DA2E loc_DA2E:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+98↑j
.text:000000000000DA2E                 mov     rax, [rsp+1A8h+var_180]
.text:000000000000DA33                 mov     rdi, [rsp+1A8h+var_1A8]
.text:000000000000DA37                 mov     rax, [rax]
.text:000000000000DA3A                 mov     r12, [rax+rdi*8]
.text:000000000000DA3E                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000DA43                 mov     rcx, [rax]
.text:000000000000DA46                 mov     rax, r12
.text:000000000000DA49                 shl     rax, 4
.text:000000000000DA4D                 mov     [rsp+1A8h+var_198], rax
.text:000000000000DA52                 lea     rsi, [rcx+rax]
.text:000000000000DA56                 movzx   eax, byte ptr [rsi+8]
.text:000000000000DA5A                 cmp     eax, 1
.text:000000000000DA5D                 mov     edx, eax
.text:000000000000DA5F                 jnz     short loc_D9F0
.text:000000000000DA61                 movzx   r13d, byte ptr [rsi]
.text:000000000000DA65                 test    ebx, ebx
.text:000000000000DA67                 mov     byte ptr [rbp+r13+0], 1
.text:000000000000DA6D                 jz      short loc_DA80
.text:000000000000DA6F                 call    ___ctype_tolower_loc
.text:000000000000DA74                 mov     rax, [rax]
.text:000000000000DA77                 movsxd  rax, dword ptr [rax+r13*4]
.text:000000000000DA7B                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000DA80
.text:000000000000DA80 loc_DA80:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+11D↑j
.text:000000000000DA80                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000DA85                 test    byte ptr [rax+1Ah], 40h
.text:000000000000DA89                 jz      short loc_DA17
.text:000000000000DA8B                 mov     rsi, [rsp+1A8h+var_1A0]
.text:000000000000DA90                 cmp     dword ptr [rsi+0B4h], 1
.text:000000000000DA97                 jle     loc_DA17
.text:000000000000DA9D                 mov     rax, [rsi]
.text:000000000000DAA0                 mov     rdi, [rsp+1A8h+var_198]
.text:000000000000DAA5                 movzx   edx, byte ptr [rax+rdi]
.text:000000000000DAA9                 mov     [rsp+1A8h+var_148], dl
.text:000000000000DAAD                 lea     rdx, [r12+1]
.text:000000000000DAB2                 cmp     [rsi+10h], rdx
.text:000000000000DAB6                 jbe     loc_DDF6
.text:000000000000DABC                 lea     rcx, [rax+rdi+10h]
.text:000000000000DAC1                 mov     eax, [rcx+8]
.text:000000000000DAC4                 and     eax, 2000FFh
.text:000000000000DAC9                 cmp     eax, 200001h
.text:000000000000DACE                 jnz     loc_DDF6
.text:000000000000DAD4                 add     rdi, 20h ; ' '
.text:000000000000DAD8                 mov     r13, rdi
.text:000000000000DADB                 mov     rdi, [rsp+1A8h+s]
.text:000000000000DAE0                 lea     rax, [rdi+1]
.text:000000000000DAE4                 jmp     short loc_DB0B
.text:000000000000DAE4 ; ---------------------------------------------------------------------------
.text:000000000000DAE6                 align 10h
.text:000000000000DAF0
.text:000000000000DAF0 loc_DAF0:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+1D2↓j
.text:000000000000DAF0                 mov     rcx, [rsi]
.text:000000000000DAF3                 add     rcx, r13
.text:000000000000DAF6                 add     r13, 10h
.text:000000000000DAFA                 mov     edx, [rcx+8]
.text:000000000000DAFD                 and     edx, 2000FFh
.text:000000000000DB03                 cmp     edx, 200001h
.text:000000000000DB09                 jnz     short loc_DB24
.text:000000000000DB0B
.text:000000000000DB0B loc_DB0B:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+194↑j
.text:000000000000DB0B                 movzx   edx, byte ptr [rcx]
.text:000000000000DB0E                 add     rax, 1
.text:000000000000DB12                 mov     [rax-1], dl
.text:000000000000DB15                 mov     rdx, rax
.text:000000000000DB18                 sub     rdx, rdi
.text:000000000000DB1B                 add     rdx, r12
.text:000000000000DB1E                 cmp     [rsi+10h], rdx
.text:000000000000DB22                 ja      short loc_DAF0
.text:000000000000DB24
.text:000000000000DB24 loc_DB24:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+1B9↑j
.text:000000000000DB24                                         ; re_compile_fastmap_iter_isra_30+4AF↓j
.text:000000000000DB24                 mov     rsi, [rsp+1A8h+s]
.text:000000000000DB29                 mov     rcx, [rsp+1A8h+ps]
.text:000000000000DB2E                 mov     rdi, [rsp+1A8h+var_160]
.text:000000000000DB33                 sub     rax, rsi
.text:000000000000DB36                 mov     qword ptr [rcx], 0
.text:000000000000DB3D                 mov     r12, rax
.text:000000000000DB40                 mov     rdx, rax
.text:000000000000DB43                 call    rpl_mbrtowc
.text:000000000000DB48                 cmp     r12, rax
.text:000000000000DB4B                 jnz     loc_DA17
.text:000000000000DB51                 mov     edi, [rsp+1A8h+wc] ; wc
.text:000000000000DB55                 call    _towlower
.text:000000000000DB5A                 mov     rdx, [rsp+1A8h+ps] ; ps
.text:000000000000DB5F                 mov     rdi, [rsp+1A8h+s] ; s
.text:000000000000DB64                 mov     esi, eax        ; wc
.text:000000000000DB66                 call    _wcrtomb
.text:000000000000DB6B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DB6F                 jz      loc_DA17
.text:000000000000DB75                 movzx   eax, [rsp+1A8h+var_148]
.text:000000000000DB7A                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000DB7F                 jmp     loc_DA17
.text:000000000000DB7F ; ---------------------------------------------------------------------------
.text:000000000000DB84                 align 8
.text:000000000000DB88
.text:000000000000DB88 loc_DB88:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+AC↑j
.text:000000000000DB88                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000DB8D                 mov     r12, [rsi]
.text:000000000000DB90                 cmp     dword ptr [rax+0B4h], 1
.text:000000000000DB97                 jle     short loc_DBBD
.text:000000000000DB99                 cmp     qword ptr [r12+48h], 0
.text:000000000000DB9F                 jnz     loc_DC9F
.text:000000000000DBA5                 test    byte ptr [r12+20h], 1
.text:000000000000DBAB                 jnz     loc_DC9F
.text:000000000000DBB1                 cmp     qword ptr [r12+40h], 0
.text:000000000000DBB7                 jnz     loc_DC9F
.text:000000000000DBBD
.text:000000000000DBBD loc_DBBD:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+247↑j
.text:000000000000DBBD                 xor     r13d, r13d
.text:000000000000DBC0                 cmp     qword ptr [r12+28h], 0
.text:000000000000DBC6                 jle     loc_DA17
.text:000000000000DBCC                 mov     r15, r12
.text:000000000000DBCF                 mov     r14, [rsp+1A8h+ps]
.text:000000000000DBD4                 mov     r12, rbp
.text:000000000000DBD7                 mov     rbp, r13
.text:000000000000DBDA                 mov     r13d, ebx
.text:000000000000DBDD                 jmp     short loc_DBED
.text:000000000000DBDF ; ---------------------------------------------------------------------------
.text:000000000000DBDF
.text:000000000000DBDF loc_DBDF:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+2F8↓j
.text:000000000000DBDF                                         ; re_compile_fastmap_iter_isra_30+306↓j ...
.text:000000000000DBDF                 add     rbp, 1
.text:000000000000DBE3                 cmp     rbp, [r15+28h]
.text:000000000000DBE7                 jge     loc_DC94
.text:000000000000DBED
.text:000000000000DBED loc_DBED:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+28D↑j
.text:000000000000DBED                                         ; re_compile_fastmap_iter_isra_30+33E↓j
.text:000000000000DBED                 mov     qword ptr [r14], 0
.text:000000000000DBF4                 mov     rax, [r15]
.text:000000000000DBF7                 mov     rdx, r14        ; ps
.text:000000000000DBFA                 mov     rdi, [rsp+1A8h+s] ; s
.text:000000000000DBFF                 lea     rbx, ds:0[rbp*4]
.text:000000000000DC07                 mov     esi, [rax+rbp*4] ; wc
.text:000000000000DC0A                 call    _wcrtomb
.text:000000000000DC0F                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DC13                 jz      short loc_DC3F
.text:000000000000DC15                 movzx   edx, [rsp+1A8h+var_148]
.text:000000000000DC1A                 test    r13d, r13d
.text:000000000000DC1D                 mov     byte ptr [r12+rdx], 1
.text:000000000000DC22                 mov     [rsp+1A8h+var_198], rdx
.text:000000000000DC27                 jz      short loc_DC3F
.text:000000000000DC29                 call    ___ctype_tolower_loc
.text:000000000000DC2E                 mov     rdx, [rsp+1A8h+var_198]
.text:000000000000DC33                 mov     rax, [rax]
.text:000000000000DC36                 movsxd  rax, dword ptr [rax+rdx*4]
.text:000000000000DC3A                 mov     byte ptr [r12+rax], 1
.text:000000000000DC3F
.text:000000000000DC3F loc_DC3F:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+2C3↑j
.text:000000000000DC3F                                         ; re_compile_fastmap_iter_isra_30+2D7↑j
.text:000000000000DC3F                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000DC44                 test    byte ptr [rax+1Ah], 40h
.text:000000000000DC48                 jz      short loc_DBDF
.text:000000000000DC4A                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000DC4F                 cmp     dword ptr [rax+0B4h], 1
.text:000000000000DC56                 jle     short loc_DBDF
.text:000000000000DC58                 mov     rax, [r15]
.text:000000000000DC5B                 mov     edi, [rax+rbx]  ; wc
.text:000000000000DC5E                 call    _towlower
.text:000000000000DC63                 mov     rdi, [rsp+1A8h+s] ; s
.text:000000000000DC68                 mov     rdx, r14        ; ps
.text:000000000000DC6B                 mov     esi, eax        ; wc
.text:000000000000DC6D                 call    _wcrtomb
.text:000000000000DC72                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DC76                 jz      loc_DBDF
.text:000000000000DC7C                 movzx   eax, [rsp+1A8h+var_148]
.text:000000000000DC81                 add     rbp, 1
.text:000000000000DC85                 mov     byte ptr [r12+rax], 1
.text:000000000000DC8A                 cmp     rbp, [r15+28h]
.text:000000000000DC8E                 jl      loc_DBED
.text:000000000000DC94
.text:000000000000DC94 loc_DC94:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+297↑j
.text:000000000000DC94                 mov     ebx, r13d
.text:000000000000DC97                 mov     rbp, r12
.text:000000000000DC9A                 jmp     loc_DA17
.text:000000000000DC9F ; ---------------------------------------------------------------------------
.text:000000000000DC9F
.text:000000000000DC9F loc_DC9F:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+24F↑j
.text:000000000000DC9F                                         ; re_compile_fastmap_iter_isra_30+25B↑j ...
.text:000000000000DC9F                 mov     r12, [rsp+1A8h+ps]
.text:000000000000DCA4                 mov     r13, [rsp+1A8h+var_160]
.text:000000000000DCA9                 mov     byte ptr [rsp+1A8h+wc], 0
.text:000000000000DCAE                 xchg    ax, ax
.text:000000000000DCB0
.text:000000000000DCB0 loc_DCB0:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+38F↓j
.text:000000000000DCB0                 xor     edi, edi
.text:000000000000DCB2                 mov     qword ptr [r12], 0
.text:000000000000DCBA                 mov     rcx, r12
.text:000000000000DCBD                 mov     edx, 1
.text:000000000000DCC2                 mov     rsi, r13
.text:000000000000DCC5                 call    rpl_mbrtowc
.text:000000000000DCCA                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000DCCE                 jnz     short loc_DCDA
.text:000000000000DCD0                 movzx   eax, byte ptr [rsp+1A8h+wc]
.text:000000000000DCD5                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000DCDA
.text:000000000000DCDA loc_DCDA:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+37E↑j
.text:000000000000DCDA                 add     byte ptr [rsp+1A8h+wc], 1
.text:000000000000DCDF                 jnz     short loc_DCB0
.text:000000000000DCE1                 jmp     loc_DA17
.text:000000000000DCE6 ; ---------------------------------------------------------------------------
.text:000000000000DCE6
.text:000000000000DCE6 loc_DCE6:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+A3↑j
.text:000000000000DCE6                 mov     r13, rbp
.text:000000000000DCE9                 xor     r12d, r12d
.text:000000000000DCEC                 mov     [rsp+1A8h+var_190], 0
.text:000000000000DCF5
.text:000000000000DCF5 loc_DCF5:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+412↓j
.text:000000000000DCF5                 mov     rax, [rsp+1A8h+var_198]
.text:000000000000DCFA                 mov     rsi, [rsp+1A8h+var_190]
.text:000000000000DCFF                 xor     r14d, r14d
.text:000000000000DD02                 mov     rax, [rcx+rax]
.text:000000000000DD06                 mov     r15, [rax+rsi]
.text:000000000000DD0A                 nop     word ptr [rax+rax+00h]
.text:000000000000DD10
.text:000000000000DD10 loc_DD10:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+3ED↓j
.text:000000000000DD10                 bt      r15, r14
.text:000000000000DD14                 jnb     short loc_DD35
.text:000000000000DD16                 test    ebx, ebx
.text:000000000000DD18                 mov     byte ptr [r13+r14+0], 1
.text:000000000000DD1E                 jz      short loc_DD35
.text:000000000000DD20                 call    ___ctype_tolower_loc
.text:000000000000DD25                 mov     rax, [rax]
.text:000000000000DD28                 lea     rdx, [r12+r14]
.text:000000000000DD2C                 movsxd  rax, dword ptr [rax+rdx*4]
.text:000000000000DD30                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000DD35
.text:000000000000DD35 loc_DD35:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+3C4↑j
.text:000000000000DD35                                         ; re_compile_fastmap_iter_isra_30+3CE↑j
.text:000000000000DD35                 add     r14, 1
.text:000000000000DD39                 cmp     r14, 40h ; '@'
.text:000000000000DD3D                 jnz     short loc_DD10
.text:000000000000DD3F                 add     r12, 40h ; '@'
.text:000000000000DD43                 add     [rsp+1A8h+var_190], 8
.text:000000000000DD49                 add     r13, 40h ; '@'
.text:000000000000DD4D                 cmp     r12, 100h
.text:000000000000DD54                 jz      loc_DA17
.text:000000000000DD5A                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000DD5F                 mov     rcx, [rax]
.text:000000000000DD62                 jmp     short loc_DCF5
.text:000000000000DD64 ; ---------------------------------------------------------------------------
.text:000000000000DD64
.text:000000000000DD64 loc_DD64:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+C1↑j
.text:000000000000DD64                 movdqa  xmm0, cs:xmmword_17E80
.text:000000000000DD6C                 movups  xmmword ptr [rbp+0], xmm0
.text:000000000000DD70                 movups  xmmword ptr [rbp+10h], xmm0
.text:000000000000DD74                 movups  xmmword ptr [rbp+20h], xmm0
.text:000000000000DD78                 movups  xmmword ptr [rbp+30h], xmm0
.text:000000000000DD7C                 movups  xmmword ptr [rbp+40h], xmm0
.text:000000000000DD80                 movups  xmmword ptr [rbp+50h], xmm0
.text:000000000000DD84                 movups  xmmword ptr [rbp+60h], xmm0
.text:000000000000DD88                 movups  xmmword ptr [rbp+70h], xmm0
.text:000000000000DD8C                 movups  xmmword ptr [rbp+80h], xmm0
.text:000000000000DD93                 movups  xmmword ptr [rbp+90h], xmm0
.text:000000000000DD9A                 movups  xmmword ptr [rbp+0A0h], xmm0
.text:000000000000DDA1                 movups  xmmword ptr [rbp+0B0h], xmm0
.text:000000000000DDA8                 movups  xmmword ptr [rbp+0C0h], xmm0
.text:000000000000DDAF                 movups  xmmword ptr [rbp+0D0h], xmm0
.text:000000000000DDB6                 movups  xmmword ptr [rbp+0E0h], xmm0
.text:000000000000DDBD                 movups  xmmword ptr [rbp+0F0h], xmm0
.text:000000000000DDC4
.text:000000000000DDC4 loc_DDC4:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+51D↓j
.text:000000000000DDC4                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000DDC9                 or      byte ptr [rax+38h], 1
.text:000000000000DDCD
.text:000000000000DDCD loc_DDCD:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+6C↑j
.text:000000000000DDCD                                         ; re_compile_fastmap_iter_isra_30+D8↑j ...
.text:000000000000DDCD                 mov     rax, [rsp+1A8h+var_40]
.text:000000000000DDD5                 xor     rax, fs:28h
.text:000000000000DDDE                 jnz     loc_DE72
.text:000000000000DDE4                 add     rsp, 178h
.text:000000000000DDEB                 pop     rbx
.text:000000000000DDEC                 pop     rbp
.text:000000000000DDED                 pop     r12
.text:000000000000DDEF                 pop     r13
.text:000000000000DDF1                 pop     r14
.text:000000000000DDF3                 pop     r15
.text:000000000000DDF5                 retn
.text:000000000000DDF6 ; ---------------------------------------------------------------------------
.text:000000000000DDF6
.text:000000000000DDF6 loc_DDF6:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+166↑j
.text:000000000000DDF6                                         ; re_compile_fastmap_iter_isra_30+17E↑j
.text:000000000000DDF6                 mov     rax, [rsp+1A8h+s]
.text:000000000000DDFB                 add     rax, 1
.text:000000000000DDFF                 jmp     loc_DB24
.text:000000000000DE04 ; ---------------------------------------------------------------------------
.text:000000000000DE04
.text:000000000000DE04 loc_DE04:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+B8↑j
.text:000000000000DE04                 movdqa  xmm0, cs:xmmword_17E80
.text:000000000000DE0C                 cmp     eax, 2
.text:000000000000DE0F                 movups  xmmword ptr [rbp+0], xmm0
.text:000000000000DE13                 movups  xmmword ptr [rbp+10h], xmm0
.text:000000000000DE17                 movups  xmmword ptr [rbp+20h], xmm0
.text:000000000000DE1B                 movups  xmmword ptr [rbp+30h], xmm0
.text:000000000000DE1F                 movups  xmmword ptr [rbp+40h], xmm0
.text:000000000000DE23                 movups  xmmword ptr [rbp+50h], xmm0
.text:000000000000DE27                 movups  xmmword ptr [rbp+60h], xmm0
.text:000000000000DE2B                 movups  xmmword ptr [rbp+70h], xmm0
.text:000000000000DE2F                 movups  xmmword ptr [rbp+80h], xmm0
.text:000000000000DE36                 movups  xmmword ptr [rbp+90h], xmm0
.text:000000000000DE3D                 movups  xmmword ptr [rbp+0A0h], xmm0
.text:000000000000DE44                 movups  xmmword ptr [rbp+0B0h], xmm0
.text:000000000000DE4B                 movups  xmmword ptr [rbp+0C0h], xmm0
.text:000000000000DE52                 movups  xmmword ptr [rbp+0D0h], xmm0
.text:000000000000DE59                 movups  xmmword ptr [rbp+0E0h], xmm0
.text:000000000000DE60                 movups  xmmword ptr [rbp+0F0h], xmm0
.text:000000000000DE67                 jnz     loc_DDCD
.text:000000000000DE6D                 jmp     loc_DDC4
.text:000000000000DE72 ; ---------------------------------------------------------------------------
.text:000000000000DE72
.text:000000000000DE72 loc_DE72:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+48E↑j
.text:000000000000DE72                 call    ___stack_chk_fail
.text:000000000000DE72 ; } // starts at D950
.text:000000000000DE72 re_compile_fastmap_iter_isra_30 endp
.text:000000000000DE72
.text:000000000000DE72 ; ---------------------------------------------------------------------------
.text:000000000000DE77                 align 20h
.text:000000000000DE80
.text:000000000000DE80 ; =============== S U B R O U T I N E =======================================
.text:000000000000DE80
.text:000000000000DE80
.text:000000000000DE80 check_node_accept_bytes_isra_31 proc near
.text:000000000000DE80                                         ; CODE XREF: check_arrival+255↓p
.text:000000000000DE80                                         ; set_regs+378↓p ...
.text:000000000000DE80 ; __unwind {
.text:000000000000DE80                 shl     rdx, 4
.text:000000000000DE84                 push    r13
.text:000000000000DE86                 push    r12
.text:000000000000DE88                 lea     r9, [rdi+rdx]
.text:000000000000DE8C                 push    rbp
.text:000000000000DE8D                 push    rbx
.text:000000000000DE8E                 sub     rsp, 8
.text:000000000000DE92                 movzx   r11d, byte ptr [r9+8]
.text:000000000000DE97                 cmp     r11b, 7
.text:000000000000DE9B                 jz      loc_DFB0
.text:000000000000DEA1                 cmp     dword ptr [rcx+90h], 1
.text:000000000000DEA8                 jz      loc_DF70
.text:000000000000DEAE                 mov     rbx, rsi
.text:000000000000DEB1                 mov     rdi, rcx
.text:000000000000DEB4                 mov     rsi, r8
.text:000000000000DEB7                 mov     r10, rcx
.text:000000000000DEBA                 call    re_string_char_size_at_part_0
.text:000000000000DEBF                 cmp     r11b, 5
.text:000000000000DEC3                 mov     ebp, eax
.text:000000000000DEC5                 jz      loc_DF80
.text:000000000000DECB                 cmp     r11b, 6
.text:000000000000DECF                 jnz     loc_DF70
.text:000000000000DED5                 cmp     eax, 1
.text:000000000000DED8                 jle     loc_DF70
.text:000000000000DEDE                 mov     r13, [r9]
.text:000000000000DEE1                 mov     rsi, [r13+40h]
.text:000000000000DEE5                 mov     rdx, [r13+28h]
.text:000000000000DEE9                 test    rsi, rsi
.text:000000000000DEEC                 jnz     short loc_DEF9
.text:000000000000DEEE                 cmp     qword ptr [r13+48h], 0
.text:000000000000DEF3                 jz      loc_DFE8
.text:000000000000DEF9
.text:000000000000DEF9 loc_DEF9:                               ; CODE XREF: check_node_accept_bytes_isra_31+6C↑j
.text:000000000000DEF9                                         ; check_node_accept_bytes_isra_31+16B↓j
.text:000000000000DEF9                 mov     rax, [r10+10h]
.text:000000000000DEFD                 test    rdx, rdx
.text:000000000000DF00                 mov     r12d, [rax+r8*4]
.text:000000000000DF04                 jle     short loc_DF27
.text:000000000000DF06                 mov     rcx, [r13+0]
.text:000000000000DF0A                 cmp     r12d, [rcx]
.text:000000000000DF0D                 jz      short loc_DF62
.text:000000000000DF0F                 xor     eax, eax
.text:000000000000DF11                 jmp     short loc_DF1E
.text:000000000000DF11 ; ---------------------------------------------------------------------------
.text:000000000000DF13                 align 8
.text:000000000000DF18
.text:000000000000DF18 loc_DF18:                               ; CODE XREF: check_node_accept_bytes_isra_31+A5↓j
.text:000000000000DF18                 cmp     r12d, [rcx+rax*4]
.text:000000000000DF1C                 jz      short loc_DF62
.text:000000000000DF1E
.text:000000000000DF1E loc_DF1E:                               ; CODE XREF: check_node_accept_bytes_isra_31+91↑j
.text:000000000000DF1E                 add     rax, 1
.text:000000000000DF22                 cmp     rax, rdx
.text:000000000000DF25                 jnz     short loc_DF18
.text:000000000000DF27
.text:000000000000DF27 loc_DF27:                               ; CODE XREF: check_node_accept_bytes_isra_31+84↑j
.text:000000000000DF27                 mov     rax, [r13+48h]
.text:000000000000DF2B                 test    rax, rax
.text:000000000000DF2E                 jle     loc_E00C
.text:000000000000DF34                 xor     ebx, ebx
.text:000000000000DF36                 jmp     short loc_DF4E
.text:000000000000DF36 ; ---------------------------------------------------------------------------
.text:000000000000DF38                 align 20h
.text:000000000000DF40
.text:000000000000DF40 loc_DF40:                               ; CODE XREF: check_node_accept_bytes_isra_31+E0↓j
.text:000000000000DF40                 add     rbx, 1
.text:000000000000DF44                 cmp     rbx, [r13+48h]
.text:000000000000DF48                 jge     loc_E008
.text:000000000000DF4E
.text:000000000000DF4E loc_DF4E:                               ; CODE XREF: check_node_accept_bytes_isra_31+B6↑j
.text:000000000000DF4E                 mov     rax, [r13+18h]
.text:000000000000DF52                 mov     edi, r12d       ; wc
.text:000000000000DF55                 mov     rsi, [rax+rbx*8] ; desc
.text:000000000000DF59                 call    _iswctype
.text:000000000000DF5E                 test    eax, eax
.text:000000000000DF60                 jz      short loc_DF40
.text:000000000000DF62
.text:000000000000DF62 loc_DF62:                               ; CODE XREF: check_node_accept_bytes_isra_31+8D↑j
.text:000000000000DF62                                         ; check_node_accept_bytes_isra_31+9C↑j ...
.text:000000000000DF62                 test    byte ptr [r13+20h], 1
.text:000000000000DF67                 jz      short loc_DF72
.text:000000000000DF69                 nop     dword ptr [rax+00000000h]
.text:000000000000DF70
.text:000000000000DF70 loc_DF70:                               ; CODE XREF: check_node_accept_bytes_isra_31+28↑j
.text:000000000000DF70                                         ; check_node_accept_bytes_isra_31+4F↑j ...
.text:000000000000DF70                 xor     ebp, ebp
.text:000000000000DF72
.text:000000000000DF72 loc_DF72:                               ; CODE XREF: check_node_accept_bytes_isra_31+E7↑j
.text:000000000000DF72                                         ; check_node_accept_bytes_isra_31+10E↓j ...
.text:000000000000DF72                 add     rsp, 8
.text:000000000000DF76                 mov     eax, ebp
.text:000000000000DF78                 pop     rbx
.text:000000000000DF79                 pop     rbp
.text:000000000000DF7A                 pop     r12
.text:000000000000DF7C                 pop     r13
.text:000000000000DF7E                 retn
.text:000000000000DF7E ; ---------------------------------------------------------------------------
.text:000000000000DF7F                 align 20h
.text:000000000000DF80
.text:000000000000DF80 loc_DF80:                               ; CODE XREF: check_node_accept_bytes_isra_31+45↑j
.text:000000000000DF80                 cmp     eax, 1
.text:000000000000DF83                 jle     short loc_DF70
.text:000000000000DF85                 mov     rax, [rbx]
.text:000000000000DF88                 test    al, 40h
.text:000000000000DF8A                 jz      short loc_DFA0
.text:000000000000DF8C
.text:000000000000DF8C loc_DF8C:                               ; CODE XREF: check_node_accept_bytes_isra_31+129↓j
.text:000000000000DF8C                 test    al, 80h
.text:000000000000DF8E                 jz      short loc_DF72
.text:000000000000DF90                 mov     rax, [r10+8]
.text:000000000000DF94                 cmp     byte ptr [rax+r8], 0
.text:000000000000DF99                 jz      short loc_DF70
.text:000000000000DF9B                 jmp     short loc_DF72
.text:000000000000DF9B ; ---------------------------------------------------------------------------
.text:000000000000DF9D                 align 20h
.text:000000000000DFA0
.text:000000000000DFA0 loc_DFA0:                               ; CODE XREF: check_node_accept_bytes_isra_31+10A↑j
.text:000000000000DFA0                 mov     rdx, [r10+8]
.text:000000000000DFA4                 cmp     byte ptr [rdx+r8], 0Ah
.text:000000000000DFA9                 jnz     short loc_DF8C
.text:000000000000DFAB                 jmp     short loc_DF70
.text:000000000000DFAB ; ---------------------------------------------------------------------------
.text:000000000000DFAD                 align 10h
.text:000000000000DFB0
.text:000000000000DFB0 loc_DFB0:                               ; CODE XREF: check_node_accept_bytes_isra_31+1B↑j
.text:000000000000DFB0                 mov     rdx, [rcx+8]
.text:000000000000DFB4                 lea     rsi, [rdx+r8]
.text:000000000000DFB8                 movzx   eax, byte ptr [rsi]
.text:000000000000DFBB                 cmp     al, 0C1h
.text:000000000000DFBD                 jbe     short loc_DF70
.text:000000000000DFBF                 mov     rcx, [rcx+58h]
.text:000000000000DFC3                 lea     rdi, [r8+1]
.text:000000000000DFC7                 cmp     rdi, rcx
.text:000000000000DFCA                 jge     short loc_DF70
.text:000000000000DFCC                 cmp     al, 0DFh
.text:000000000000DFCE                 movzx   edx, byte ptr [rdx+r8+1]
.text:000000000000DFD4                 ja      short loc_E03E
.text:000000000000DFD6                 add     edx, 0FFFFFF80h
.text:000000000000DFD9                 mov     ebp, 2
.text:000000000000DFDE                 cmp     dl, 3Fh ; '?'
.text:000000000000DFE1                 ja      short loc_DF70
.text:000000000000DFE3                 jmp     short loc_DF72
.text:000000000000DFE3 ; ---------------------------------------------------------------------------
.text:000000000000DFE5                 align 8
.text:000000000000DFE8
.text:000000000000DFE8 loc_DFE8:                               ; CODE XREF: check_node_accept_bytes_isra_31+73↑j
.text:000000000000DFE8                 test    rdx, rdx
.text:000000000000DFEB                 jnz     loc_DEF9
.text:000000000000DFF1
.text:000000000000DFF1 loc_DFF1:                               ; CODE XREF: check_node_accept_bytes_isra_31+18F↓j
.text:000000000000DFF1                                         ; check_node_accept_bytes_isra_31+1A7↓j
.text:000000000000DFF1                 test    byte ptr [r13+20h], 1
.text:000000000000DFF6                 jnz     loc_DF72
.text:000000000000DFFC                 jmp     loc_DF70
.text:000000000000DFFC ; ---------------------------------------------------------------------------
.text:000000000000E001                 align 8
.text:000000000000E008
.text:000000000000E008 loc_E008:                               ; CODE XREF: check_node_accept_bytes_isra_31+C8↑j
.text:000000000000E008                 mov     rsi, [r13+40h]
.text:000000000000E00C
.text:000000000000E00C loc_E00C:                               ; CODE XREF: check_node_accept_bytes_isra_31+AE↑j
.text:000000000000E00C                 test    rsi, rsi
.text:000000000000E00F                 jle     short loc_DFF1
.text:000000000000E011                 mov     rdx, [r13+8]
.text:000000000000E015                 xor     eax, eax
.text:000000000000E017                 jmp     short loc_E029
.text:000000000000E017 ; ---------------------------------------------------------------------------
.text:000000000000E019                 align 20h
.text:000000000000E020
.text:000000000000E020 loc_E020:                               ; CODE XREF: check_node_accept_bytes_isra_31+1AD↓j
.text:000000000000E020                                         ; check_node_accept_bytes_isra_31+1B7↓j
.text:000000000000E020                 add     rax, 1
.text:000000000000E024                 cmp     rax, rsi
.text:000000000000E027                 jz      short loc_DFF1
.text:000000000000E029
.text:000000000000E029 loc_E029:                               ; CODE XREF: check_node_accept_bytes_isra_31+197↑j
.text:000000000000E029                 cmp     r12d, [rdx+rax*4]
.text:000000000000E02D                 jl      short loc_E020
.text:000000000000E02F                 mov     rcx, [r13+10h]
.text:000000000000E033                 cmp     r12d, [rcx+rax*4]
.text:000000000000E037                 jg      short loc_E020
.text:000000000000E039                 jmp     loc_DF62
.text:000000000000E03E ; ---------------------------------------------------------------------------
.text:000000000000E03E
.text:000000000000E03E loc_E03E:                               ; CODE XREF: check_node_accept_bytes_isra_31+154↑j
.text:000000000000E03E                 cmp     al, 0EFh
.text:000000000000E040                 ja      short loc_E088
.text:000000000000E042                 cmp     al, 0E0h
.text:000000000000E044                 jnz     short loc_E04F
.text:000000000000E046                 cmp     dl, 9Fh
.text:000000000000E049                 jbe     loc_DF70
.text:000000000000E04F
.text:000000000000E04F loc_E04F:                               ; CODE XREF: check_node_accept_bytes_isra_31+1C4↑j
.text:000000000000E04F                 mov     ebp, 3
.text:000000000000E054
.text:000000000000E054 loc_E054:                               ; CODE XREF: check_node_accept_bytes_isra_31+21E↓j
.text:000000000000E054                                         ; check_node_accept_bytes_isra_31+236↓j ...
.text:000000000000E054                 movsxd  rdi, ebp
.text:000000000000E057                 add     r8, rdi
.text:000000000000E05A                 cmp     rcx, r8
.text:000000000000E05D                 jl      loc_DF70
.text:000000000000E063                 mov     eax, 1
.text:000000000000E068                 jmp     short loc_E077
.text:000000000000E06A ; ---------------------------------------------------------------------------
.text:000000000000E06A
.text:000000000000E06A loc_E06A:                               ; CODE XREF: check_node_accept_bytes_isra_31+201↓j
.text:000000000000E06A                 add     rax, 1
.text:000000000000E06E                 cmp     rdi, rax
.text:000000000000E071                 jle     loc_DF72
.text:000000000000E077
.text:000000000000E077 loc_E077:                               ; CODE XREF: check_node_accept_bytes_isra_31+1E8↑j
.text:000000000000E077                 movzx   ebx, byte ptr [rsi+rax]
.text:000000000000E07B                 lea     edx, [rbx-80h]
.text:000000000000E07E                 cmp     dl, 3Fh ; '?'
.text:000000000000E081                 jbe     short loc_E06A
.text:000000000000E083                 jmp     loc_DF70
.text:000000000000E088 ; ---------------------------------------------------------------------------
.text:000000000000E088
.text:000000000000E088 loc_E088:                               ; CODE XREF: check_node_accept_bytes_isra_31+1C0↑j
.text:000000000000E088                 cmp     al, 0F7h
.text:000000000000E08A                 ja      short loc_E0A0
.text:000000000000E08C                 cmp     al, 0F0h
.text:000000000000E08E                 jnz     short loc_E099
.text:000000000000E090                 cmp     dl, 8Fh
.text:000000000000E093                 jbe     loc_DF70
.text:000000000000E099
.text:000000000000E099 loc_E099:                               ; CODE XREF: check_node_accept_bytes_isra_31+20E↑j
.text:000000000000E099                 mov     ebp, 4
.text:000000000000E09E                 jmp     short loc_E054
.text:000000000000E0A0 ; ---------------------------------------------------------------------------
.text:000000000000E0A0
.text:000000000000E0A0 loc_E0A0:                               ; CODE XREF: check_node_accept_bytes_isra_31+20A↑j
.text:000000000000E0A0                 cmp     al, 0FBh
.text:000000000000E0A2                 ja      short loc_E0B8
.text:000000000000E0A4                 cmp     al, 0F8h
.text:000000000000E0A6                 jnz     short loc_E0B1
.text:000000000000E0A8                 cmp     dl, 87h
.text:000000000000E0AB                 jbe     loc_DF70
.text:000000000000E0B1
.text:000000000000E0B1 loc_E0B1:                               ; CODE XREF: check_node_accept_bytes_isra_31+226↑j
.text:000000000000E0B1                 mov     ebp, 5
.text:000000000000E0B6                 jmp     short loc_E054
.text:000000000000E0B8 ; ---------------------------------------------------------------------------
.text:000000000000E0B8
.text:000000000000E0B8 loc_E0B8:                               ; CODE XREF: check_node_accept_bytes_isra_31+222↑j
.text:000000000000E0B8                 cmp     al, 0FDh
.text:000000000000E0BA                 ja      loc_DF70
.text:000000000000E0C0                 cmp     al, 0FCh
.text:000000000000E0C2                 jnz     short loc_E0CD
.text:000000000000E0C4                 cmp     dl, 83h
.text:000000000000E0C7                 jbe     loc_DF70
.text:000000000000E0CD
.text:000000000000E0CD loc_E0CD:                               ; CODE XREF: check_node_accept_bytes_isra_31+242↑j
.text:000000000000E0CD                 mov     ebp, 6
.text:000000000000E0D2                 jmp     short loc_E054
.text:000000000000E0D2 ; } // starts at DE80
.text:000000000000E0D2 check_node_accept_bytes_isra_31 endp
.text:000000000000E0D2
.text:000000000000E0D2 ; ---------------------------------------------------------------------------
.text:000000000000E0D4                 align 20h
.text:000000000000E0E0
.text:000000000000E0E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E0E0
.text:000000000000E0E0
.text:000000000000E0E0 check_arrival   proc near               ; CODE XREF: get_subexp_sub_isra_32+30↓p
.text:000000000000E0E0                                         ; transit_state_bkref_isra_34+68B↓p
.text:000000000000E0E0
.text:000000000000E0E0 var_108         = qword ptr -108h
.text:000000000000E0E0 var_100         = qword ptr -100h
.text:000000000000E0E0 var_F8          = qword ptr -0F8h
.text:000000000000E0E0 var_F0          = qword ptr -0F0h
.text:000000000000E0E0 var_E8          = qword ptr -0E8h
.text:000000000000E0E0 var_E0          = qword ptr -0E0h
.text:000000000000E0E0 var_D8          = qword ptr -0D8h
.text:000000000000E0E0 var_D0          = qword ptr -0D0h
.text:000000000000E0E0 var_C8          = qword ptr -0C8h
.text:000000000000E0E0 var_C0          = qword ptr -0C0h
.text:000000000000E0E0 var_B8          = qword ptr -0B8h
.text:000000000000E0E0 var_B0          = qword ptr -0B0h
.text:000000000000E0E0 var_A8          = qword ptr -0A8h
.text:000000000000E0E0 var_A0          = qword ptr -0A0h
.text:000000000000E0E0 var_98          = qword ptr -98h
.text:000000000000E0E0 var_90          = qword ptr -90h
.text:000000000000E0E0 var_80          = dword ptr -80h
.text:000000000000E0E0 var_7C          = dword ptr -7Ch
.text:000000000000E0E0 var_78          = xmmword ptr -78h
.text:000000000000E0E0 var_68          = qword ptr -68h
.text:000000000000E0E0 var_58          = byte ptr -58h
.text:000000000000E0E0 var_50          = qword ptr -50h
.text:000000000000E0E0 ptr             = qword ptr -48h
.text:000000000000E0E0 var_40          = qword ptr -40h
.text:000000000000E0E0 arg_0           = dword ptr  8
.text:000000000000E0E0
.text:000000000000E0E0 ; __unwind {
.text:000000000000E0E0                 push    r15
.text:000000000000E0E2                 push    r14
.text:000000000000E0E4                 mov     r15, rdi
.text:000000000000E0E7                 push    r13
.text:000000000000E0E9                 push    r12
.text:000000000000E0EB                 push    rbp
.text:000000000000E0EC                 push    rbx
.text:000000000000E0ED                 mov     rbp, rcx
.text:000000000000E0F0                 mov     rbx, rdx
.text:000000000000E0F3                 sub     rsp, 0D8h
.text:000000000000E0FA                 mov     rcx, [rdi+98h]
.text:000000000000E101                 mov     r13, [rsi+8]
.text:000000000000E105                 mov     rax, fs:28h
.text:000000000000E10E                 mov     [rsp+108h+var_40], rax
.text:000000000000E116                 xor     eax, eax
.text:000000000000E118                 mov     rax, rdx
.text:000000000000E11B                 mov     [rsp+108h+var_A8], rsi
.text:000000000000E120                 mov     [rsp+108h+var_90], r8
.text:000000000000E125                 shl     rax, 4
.text:000000000000E129                 add     rax, [rcx]
.text:000000000000E12C                 mov     [rsp+108h+var_C8], r9
.text:000000000000E131                 mov     [rsp+108h+var_D8], rcx
.text:000000000000E136                 mov     [rsp+108h+var_80], 0
.text:000000000000E141                 mov     rax, [rax]
.text:000000000000E144                 mov     [rsp+108h+var_C0], rax
.text:000000000000E149                 movsxd  rax, dword ptr [rdi+0E0h]
.text:000000000000E150                 add     rax, r9
.text:000000000000E153                 cmp     rax, r13
.text:000000000000E156                 jge     loc_E776
.text:000000000000E15C
.text:000000000000E15C loc_E15C:                               ; CODE XREF: check_arrival+6FB↓j
.text:000000000000E15C                 mov     rax, [rsp+108h+var_A8]
.text:000000000000E161                 mov     rdx, [r15+0B8h]
.text:000000000000E168                 mov     rcx, [r15+48h]
.text:000000000000E16C                 mov     r12, [rax]
.text:000000000000E16F                 mov     r14, [rax+10h]
.text:000000000000E173                 mov     [rsp+108h+var_A0], rdx
.text:000000000000E178                 mov     [rsp+108h+var_98], rcx
.text:000000000000E17D                 mov     edx, [r15+0A0h]
.text:000000000000E184                 test    r12, r12
.text:000000000000E187                 mov     [r15+0B8h], r14
.text:000000000000E18E                 jz      loc_E570
.text:000000000000E194                 lea     rsi, [r12-1]
.text:000000000000E199                 mov     [r15+48h], r12
.text:000000000000E19D                 mov     rdi, r15
.text:000000000000E1A0                 call    re_string_context_at
.text:000000000000E1A5                 cmp     r12, rbp
.text:000000000000E1A8                 mov     r13d, eax
.text:000000000000E1AB                 jz      loc_E583
.text:000000000000E1B1                 mov     rbp, [r14+r12*8]
.text:000000000000E1B5                 test    rbp, rbp
.text:000000000000E1B8                 jz      short loc_E1C4
.text:000000000000E1BA                 test    byte ptr [rbp+68h], 40h
.text:000000000000E1BE                 jnz     loc_E6E0
.text:000000000000E1C4
.text:000000000000E1C4 loc_E1C4:                               ; CODE XREF: check_arrival+D8↑j
.text:000000000000E1C4                 pxor    xmm0, xmm0
.text:000000000000E1C8                 mov     [rsp+108h+var_68], 0
.text:000000000000E1D4                 movaps  [rsp+108h+var_78], xmm0
.text:000000000000E1DC
.text:000000000000E1DC loc_E1DC:                               ; CODE XREF: check_arrival+627↓j
.text:000000000000E1DC                                         ; check_arrival+691↓j
.text:000000000000E1DC                 cmp     r12, [rsp+108h+var_C8]
.text:000000000000E1E1                 jge     loc_E508
.text:000000000000E1E7                 mov     ecx, [r15+0E0h]
.text:000000000000E1EE                 test    ecx, ecx
.text:000000000000E1F0                 js      loc_E508
.text:000000000000E1F6                 lea     rbx, [rsp+108h+var_78]
.text:000000000000E1FE                 lea     rax, ds:8[r12*8]
.text:000000000000E206                 mov     [rsp+108h+var_108], r12
.text:000000000000E20A                 mov     [rsp+108h+var_E8], 0
.text:000000000000E213                 mov     [rsp+108h+var_100], rbx
.text:000000000000E218                 lea     rbx, [rsp+108h+var_58]
.text:000000000000E220                 mov     [rsp+108h+var_F8], rax
.text:000000000000E225                 mov     rax, [r15+0B8h]
.text:000000000000E22C                 mov     [rsp+108h+var_F0], rbx
.text:000000000000E231                 lea     rbx, [rsp+108h+var_7C]
.text:000000000000E239                 mov     [rsp+108h+var_B0], rbx
.text:000000000000E23E
.text:000000000000E23E loc_E23E:                               ; CODE XREF: check_arrival+422↓j
.text:000000000000E23E                 mov     rcx, [rsp+108h+var_F8]
.text:000000000000E243                 mov     qword ptr [rsp+108h+var_78+8], 0
.text:000000000000E24F                 mov     rsi, [rax+rcx]
.text:000000000000E253                 test    rsi, rsi
.text:000000000000E256                 jz      loc_E618
.text:000000000000E25C                 mov     rdi, [rsp+108h+var_100]
.text:000000000000E261                 add     rsi, 8
.text:000000000000E265                 call    re_node_set_merge
.text:000000000000E26A                 test    eax, eax
.text:000000000000E26C                 mov     [rsp+108h+var_80], eax
.text:000000000000E273                 jnz     loc_E650
.text:000000000000E279                 test    rbp, rbp
.text:000000000000E27C                 jz      loc_E428
.text:000000000000E282
.text:000000000000E282 loc_E282:                               ; CODE XREF: check_arrival+53B↓j
.text:000000000000E282                 cmp     qword ptr [rbp+28h], 0
.text:000000000000E287                 mov     rax, [rsp+108h+var_F0]
.text:000000000000E28C                 pxor    xmm0, xmm0
.text:000000000000E290                 mov     r12, [r15+98h]
.text:000000000000E297                 mov     [rsp+108h+var_7C], 0
.text:000000000000E2A2                 mov     qword ptr [rax+10h], 0
.text:000000000000E2AA                 movaps  xmmword ptr [rax], xmm0
.text:000000000000E2AD                 jle     loc_E7E0
.text:000000000000E2B3                 lea     rax, [r12+0D8h]
.text:000000000000E2BB                 xor     ebx, ebx
.text:000000000000E2BD                 mov     [rsp+108h+var_E0], rax
.text:000000000000E2C2                 jmp     short loc_E309
.text:000000000000E2C2 ; ---------------------------------------------------------------------------
.text:000000000000E2C4                 align 8
.text:000000000000E2C8
.text:000000000000E2C8 loc_E2C8:                               ; CODE XREF: check_arrival+244↓j
.text:000000000000E2C8                                         ; check_arrival+52F↓j
.text:000000000000E2C8                 mov     rdx, [rsp+108h+var_108]
.text:000000000000E2CC                 mov     rdi, r15
.text:000000000000E2CF                 call    check_node_accept
.text:000000000000E2D4                 test    al, al
.text:000000000000E2D6                 jz      short loc_E2FB
.text:000000000000E2D8
.text:000000000000E2D8 loc_E2D8:                               ; CODE XREF: check_arrival+522↓j
.text:000000000000E2D8                 lea     r13, ds:0[r14*8]
.text:000000000000E2E0
.text:000000000000E2E0 loc_E2E0:                               ; CODE XREF: check_arrival+30B↓j
.text:000000000000E2E0                                         ; check_arrival+31A↓j
.text:000000000000E2E0                 mov     rax, [r12+18h]
.text:000000000000E2E5                 mov     rdi, [rsp+108h+var_100]
.text:000000000000E2EA                 mov     rsi, [rax+r13]
.text:000000000000E2EE                 call    re_node_set_insert
.text:000000000000E2F3                 test    al, al
.text:000000000000E2F5                 jz      loc_E638
.text:000000000000E2FB
.text:000000000000E2FB loc_E2FB:                               ; CODE XREF: check_arrival+1F6↑j
.text:000000000000E2FB                 add     rbx, 1
.text:000000000000E2FF                 cmp     rbx, [rbp+28h]
.text:000000000000E303                 jge     loc_E690
.text:000000000000E309
.text:000000000000E309 loc_E309:                               ; CODE XREF: check_arrival+1E2↑j
.text:000000000000E309                 mov     rax, [rbp+30h]
.text:000000000000E30D                 mov     rdi, [r12]
.text:000000000000E311                 mov     r14, [rax+rbx*8]
.text:000000000000E315                 mov     r13, r14
.text:000000000000E318                 shl     r13, 4
.text:000000000000E31C                 lea     rsi, [rdi+r13]
.text:000000000000E320                 test    byte ptr [rsi+0Ah], 10h
.text:000000000000E324                 jz      short loc_E2C8
.text:000000000000E326                 mov     r8, [rsp+108h+var_108]
.text:000000000000E32A                 mov     rsi, [rsp+108h+var_E0]
.text:000000000000E32F                 mov     rcx, r15
.text:000000000000E332                 mov     rdx, r14
.text:000000000000E335                 call    check_node_accept_bytes_isra_31
.text:000000000000E33A                 cmp     eax, 1
.text:000000000000E33D                 jle     loc_E600
.text:000000000000E343                 cdqe
.text:000000000000E345                 add     rax, [rsp+108h+var_108]
.text:000000000000E349                 mov     rdx, [r12+18h]
.text:000000000000E34E                 lea     r13, ds:0[r14*8]
.text:000000000000E356                 mov     rdx, [rdx+r14*8]
.text:000000000000E35A                 mov     rcx, rax
.text:000000000000E35D                 mov     [rsp+108h+var_D0], rax
.text:000000000000E362                 lea     r14, ds:0[rax*8]
.text:000000000000E36A                 mov     rax, [r15+0B8h]
.text:000000000000E371                 mov     rsi, [rax+rcx*8]
.text:000000000000E375                 mov     [rsp+108h+var_50], 0
.text:000000000000E381                 test    rsi, rsi
.text:000000000000E384                 jz      short loc_E3A9
.text:000000000000E386                 mov     rdi, [rsp+108h+var_F0]
.text:000000000000E38B                 add     rsi, 8
.text:000000000000E38F                 mov     [rsp+108h+var_B8], rdx
.text:000000000000E394                 call    re_node_set_merge
.text:000000000000E399                 test    eax, eax
.text:000000000000E39B                 mov     [rsp+108h+var_7C], eax
.text:000000000000E3A2                 mov     rdx, [rsp+108h+var_B8]
.text:000000000000E3A7                 jnz     short loc_E400
.text:000000000000E3A9
.text:000000000000E3A9 loc_E3A9:                               ; CODE XREF: check_arrival+2A4↑j
.text:000000000000E3A9                 mov     rdi, [rsp+108h+var_F0]
.text:000000000000E3AE                 mov     rsi, rdx
.text:000000000000E3B1                 call    re_node_set_insert
.text:000000000000E3B6                 test    al, al
.text:000000000000E3B8                 jz      loc_E638
.text:000000000000E3BE                 add     r14, [r15+0B8h]
.text:000000000000E3C5                 mov     rdx, [rsp+108h+var_F0]
.text:000000000000E3CA                 mov     rsi, r12
.text:000000000000E3CD                 mov     rdi, [rsp+108h+var_B0]
.text:000000000000E3D2                 call    re_acquire_state
.text:000000000000E3D7                 mov     rdx, [rsp+108h+var_D0]
.text:000000000000E3DC                 mov     [r14], rax
.text:000000000000E3DF                 mov     rax, [r15+0B8h]
.text:000000000000E3E6                 cmp     qword ptr [rax+rdx*8], 0
.text:000000000000E3EB                 jnz     loc_E2E0
.text:000000000000E3F1                 mov     edx, [rsp+108h+var_7C]
.text:000000000000E3F8                 test    edx, edx
.text:000000000000E3FA                 jz      loc_E2E0
.text:000000000000E400
.text:000000000000E400 loc_E400:                               ; CODE XREF: check_arrival+2C7↑j
.text:000000000000E400                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:000000000000E408                 call    _free
.text:000000000000E40D                 mov     eax, [rsp+108h+var_7C]
.text:000000000000E414                 test    eax, eax
.text:000000000000E416                 mov     [rsp+108h+var_80], eax
.text:000000000000E41D                 jnz     loc_E650
.text:000000000000E423                 nop     dword ptr [rax+rax+00h]
.text:000000000000E428
.text:000000000000E428 loc_E428:                               ; CODE XREF: check_arrival+19C↑j
.text:000000000000E428                                         ; check_arrival+5C8↓j
.text:000000000000E428                 mov     rax, [rsp+108h+var_108]
.text:000000000000E42C                 cmp     qword ptr [rsp+108h+var_78+8], 0
.text:000000000000E435                 lea     rbx, [rax+1]
.text:000000000000E439                 mov     r12, rbx
.text:000000000000E43C                 jz      short loc_E494
.text:000000000000E43E                 mov     ecx, [rsp+108h+arg_0]
.text:000000000000E445                 mov     rdx, [rsp+108h+var_C0]
.text:000000000000E44A                 mov     rsi, [rsp+108h+var_100]
.text:000000000000E44F                 mov     rdi, [rsp+108h+var_D8]
.text:000000000000E454                 call    check_arrival_expand_ecl
.text:000000000000E459                 test    eax, eax
.text:000000000000E45B                 mov     [rsp+108h+var_80], eax
.text:000000000000E462                 jnz     loc_E650
.text:000000000000E468                 mov     r8d, [rsp+108h+arg_0]
.text:000000000000E470                 mov     rcx, [rsp+108h+var_C0]
.text:000000000000E475                 mov     rdx, rbx
.text:000000000000E478                 mov     rsi, [rsp+108h+var_100]
.text:000000000000E47D                 mov     rdi, r15
.text:000000000000E480                 call    expand_bkref_cache
.text:000000000000E485                 test    eax, eax
.text:000000000000E487                 mov     [rsp+108h+var_80], eax
.text:000000000000E48E                 jnz     loc_E650
.text:000000000000E494
.text:000000000000E494 loc_E494:                               ; CODE XREF: check_arrival+35C↑j
.text:000000000000E494                                         ; check_arrival+54C↓j
.text:000000000000E494                 mov     edx, [r15+0A0h]
.text:000000000000E49B                 mov     rsi, [rsp+108h+var_108]
.text:000000000000E49F                 mov     rdi, r15
.text:000000000000E4A2                 call    re_string_context_at
.text:000000000000E4A7                 mov     rdx, [rsp+108h+var_100]
.text:000000000000E4AC                 mov     rsi, [rsp+108h+var_D8]
.text:000000000000E4B1                 lea     rdi, [rsp+108h+var_80]
.text:000000000000E4B9                 mov     ecx, eax
.text:000000000000E4BB                 call    re_acquire_state_context
.text:000000000000E4C0                 test    rax, rax
.text:000000000000E4C3                 mov     rbp, rax
.text:000000000000E4C6                 jz      loc_E6B0
.text:000000000000E4CC                 mov     rax, [r15+0B8h]
.text:000000000000E4D3                 mov     rdx, [rsp+108h+var_F8]
.text:000000000000E4D8                 mov     [rsp+108h+var_E8], 0
.text:000000000000E4E1                 mov     [rax+rdx], rbp
.text:000000000000E4E5
.text:000000000000E4E5 loc_E4E5:                               ; CODE XREF: check_arrival+5F5↓j
.text:000000000000E4E5                 cmp     [rsp+108h+var_C8], rbx
.text:000000000000E4EA                 jle     short loc_E508
.text:000000000000E4EC                 movsxd  rdx, dword ptr [r15+0E0h]
.text:000000000000E4F3                 add     [rsp+108h+var_F8], 8
.text:000000000000E4F9                 cmp     rdx, [rsp+108h+var_E8]
.text:000000000000E4FE                 mov     [rsp+108h+var_108], rbx
.text:000000000000E502                 jge     loc_E23E
.text:000000000000E508
.text:000000000000E508 loc_E508:                               ; CODE XREF: check_arrival+101↑j
.text:000000000000E508                                         ; check_arrival+110↑j ...
.text:000000000000E508                 mov     rdi, [rsp+108h+var_68] ; ptr
.text:000000000000E510                 call    _free
.text:000000000000E515                 mov     rax, [r15+0B8h]
.text:000000000000E51C                 mov     rbx, [rsp+108h+var_C8]
.text:000000000000E521                 mov     rax, [rax+rbx*8]
.text:000000000000E525                 test    rax, rax
.text:000000000000E528                 jz      loc_E805
.text:000000000000E52E                 mov     rbx, [rsp+108h+var_A8]
.text:000000000000E533                 mov     rdx, [rsp+108h+var_90]
.text:000000000000E538                 lea     rsi, [rax+18h]
.text:000000000000E53C                 mov     [rbx], r12
.text:000000000000E53F                 mov     rbx, [rsp+108h+var_A0]
.text:000000000000E544                 mov     [r15+0B8h], rbx
.text:000000000000E54B                 mov     rbx, [rsp+108h+var_98]
.text:000000000000E550                 mov     [r15+48h], rbx
.text:000000000000E554                 mov     rdi, [rax+10h]
.text:000000000000E558                 call    re_node_set_contains_isra_3
.text:000000000000E55D                 test    rax, rax
.text:000000000000E560                 setz    al
.text:000000000000E563                 movzx   eax, al
.text:000000000000E566                 jmp     loc_E664
.text:000000000000E566 ; ---------------------------------------------------------------------------
.text:000000000000E56B                 align 10h
.text:000000000000E570
.text:000000000000E570 loc_E570:                               ; CODE XREF: check_arrival+AE↑j
.text:000000000000E570                 lea     rsi, [rbp-1]
.text:000000000000E574                 mov     [r15+48h], rbp
.text:000000000000E578                 mov     rdi, r15
.text:000000000000E57B                 call    re_string_context_at
.text:000000000000E580                 mov     r13d, eax
.text:000000000000E583
.text:000000000000E583 loc_E583:                               ; CODE XREF: check_arrival+CB↑j
.text:000000000000E583                 mov     edi, 8          ; size
.text:000000000000E588                 mov     qword ptr [rsp+108h+var_78], 1
.text:000000000000E594                 mov     qword ptr [rsp+108h+var_78+8], 1
.text:000000000000E5A0                 call    _malloc
.text:000000000000E5A5                 test    rax, rax
.text:000000000000E5A8                 mov     [rsp+108h+var_68], rax
.text:000000000000E5B0                 jz      loc_E7FB
.text:000000000000E5B6                 mov     [rax], rbx
.text:000000000000E5B9                 mov     ecx, [rsp+108h+arg_0]
.text:000000000000E5C0                 lea     rbx, [rsp+108h+var_78]
.text:000000000000E5C8                 mov     rdx, [rsp+108h+var_C0]
.text:000000000000E5CD                 mov     rdi, [rsp+108h+var_D8]
.text:000000000000E5D2                 mov     r12, rbp
.text:000000000000E5D5                 mov     rsi, rbx
.text:000000000000E5D8                 mov     [rsp+108h+var_80], 0
.text:000000000000E5E3                 call    check_arrival_expand_ecl
.text:000000000000E5E8                 test    eax, eax
.text:000000000000E5EA                 mov     [rsp+108h+var_80], eax
.text:000000000000E5F1                 jz      loc_E70D
.text:000000000000E5F7                 jmp     short loc_E650
.text:000000000000E5F7 ; ---------------------------------------------------------------------------
.text:000000000000E5F9                 align 20h
.text:000000000000E600
.text:000000000000E600 loc_E600:                               ; CODE XREF: check_arrival+25D↑j
.text:000000000000E600                 test    eax, eax
.text:000000000000E602                 jnz     loc_E2D8
.text:000000000000E608                 mov     rsi, [r12]
.text:000000000000E60C                 add     rsi, r13
.text:000000000000E60F                 jmp     loc_E2C8
.text:000000000000E60F ; ---------------------------------------------------------------------------
.text:000000000000E614                 align 8
.text:000000000000E618
.text:000000000000E618 loc_E618:                               ; CODE XREF: check_arrival+176↑j
.text:000000000000E618                 test    rbp, rbp
.text:000000000000E61B                 jnz     loc_E282
.text:000000000000E621                 mov     rax, [rsp+108h+var_108]
.text:000000000000E625                 lea     rbx, [rax+1]
.text:000000000000E629                 mov     r12, rbx
.text:000000000000E62C                 jmp     loc_E494
.text:000000000000E62C ; ---------------------------------------------------------------------------
.text:000000000000E631                 align 8
.text:000000000000E638
.text:000000000000E638 loc_E638:                               ; CODE XREF: check_arrival+215↑j
.text:000000000000E638                                         ; check_arrival+2D8↑j
.text:000000000000E638                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:000000000000E640                 call    _free
.text:000000000000E645                 mov     [rsp+108h+var_80], 0Ch
.text:000000000000E650
.text:000000000000E650 loc_E650:                               ; CODE XREF: check_arrival+193↑j
.text:000000000000E650                                         ; check_arrival+33D↑j ...
.text:000000000000E650                 mov     rdi, [rsp+108h+var_68] ; ptr
.text:000000000000E658                 call    _free
.text:000000000000E65D                 mov     eax, [rsp+108h+var_80]
.text:000000000000E664
.text:000000000000E664 loc_E664:                               ; CODE XREF: check_arrival+486↑j
.text:000000000000E664                                         ; check_arrival+61D↓j ...
.text:000000000000E664                 mov     rbx, [rsp+108h+var_40]
.text:000000000000E66C                 xor     rbx, fs:28h
.text:000000000000E675                 jnz     loc_E82C
.text:000000000000E67B                 add     rsp, 0D8h
.text:000000000000E682                 pop     rbx
.text:000000000000E683                 pop     rbp
.text:000000000000E684                 pop     r12
.text:000000000000E686                 pop     r13
.text:000000000000E688                 pop     r14
.text:000000000000E68A                 pop     r15
.text:000000000000E68C                 retn
.text:000000000000E68C ; ---------------------------------------------------------------------------
.text:000000000000E68D                 align 10h
.text:000000000000E690
.text:000000000000E690 loc_E690:                               ; CODE XREF: check_arrival+223↑j
.text:000000000000E690                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:000000000000E698
.text:000000000000E698 loc_E698:                               ; CODE XREF: check_arrival+702↓j
.text:000000000000E698                 call    _free
.text:000000000000E69D                 mov     [rsp+108h+var_80], 0
.text:000000000000E6A8                 jmp     loc_E428
.text:000000000000E6A8 ; ---------------------------------------------------------------------------
.text:000000000000E6AD                 align 10h
.text:000000000000E6B0
.text:000000000000E6B0 loc_E6B0:                               ; CODE XREF: check_arrival+3E6↑j
.text:000000000000E6B0                 mov     eax, [rsp+108h+var_80]
.text:000000000000E6B7                 test    eax, eax
.text:000000000000E6B9                 jnz     short loc_E650
.text:000000000000E6BB                 mov     rax, [r15+0B8h]
.text:000000000000E6C2                 mov     rdx, [rsp+108h+var_F8]
.text:000000000000E6C7                 add     [rsp+108h+var_E8], 1
.text:000000000000E6CD                 mov     qword ptr [rax+rdx], 0
.text:000000000000E6D5                 jmp     loc_E4E5
.text:000000000000E6D5 ; ---------------------------------------------------------------------------
.text:000000000000E6DA                 align 20h
.text:000000000000E6E0
.text:000000000000E6E0 loc_E6E0:                               ; CODE XREF: check_arrival+DE↑j
.text:000000000000E6E0                 lea     rbx, [rsp+108h+var_78]
.text:000000000000E6E8                 lea     rsi, [rbp+8]
.text:000000000000E6EC                 mov     rdi, rbx
.text:000000000000E6EF                 call    re_node_set_init_copy
.text:000000000000E6F4                 test    eax, eax
.text:000000000000E6F6                 mov     [rsp+108h+var_80], eax
.text:000000000000E6FD                 jnz     loc_E664
.text:000000000000E703                 test    byte ptr [rbp+68h], 40h
.text:000000000000E707                 jz      loc_E1DC
.text:000000000000E70D
.text:000000000000E70D loc_E70D:                               ; CODE XREF: check_arrival+511↑j
.text:000000000000E70D                 cmp     qword ptr [rsp+108h+var_78+8], 0
.text:000000000000E716                 jz      short loc_E742
.text:000000000000E718                 mov     r8d, [rsp+108h+arg_0]
.text:000000000000E720                 mov     rcx, [rsp+108h+var_C0]
.text:000000000000E725                 mov     rdx, r12
.text:000000000000E728                 mov     rsi, rbx
.text:000000000000E72B                 mov     rdi, r15
.text:000000000000E72E                 call    expand_bkref_cache
.text:000000000000E733                 test    eax, eax
.text:000000000000E735                 mov     [rsp+108h+var_80], eax
.text:000000000000E73C                 jnz     loc_E650
.text:000000000000E742
.text:000000000000E742 loc_E742:                               ; CODE XREF: check_arrival+636↑j
.text:000000000000E742                 mov     rsi, [rsp+108h+var_D8]
.text:000000000000E747                 lea     rdi, [rsp+108h+var_80]
.text:000000000000E74F                 mov     ecx, r13d
.text:000000000000E752                 mov     rdx, rbx
.text:000000000000E755                 call    re_acquire_state_context
.text:000000000000E75A                 test    rax, rax
.text:000000000000E75D                 mov     rbp, rax
.text:000000000000E760                 jz      loc_E7E7
.text:000000000000E766
.text:000000000000E766 loc_E766:                               ; CODE XREF: check_arrival+710↓j
.text:000000000000E766                 mov     rax, [r15+0B8h]
.text:000000000000E76D                 mov     [rax+r12*8], rbp
.text:000000000000E771                 jmp     loc_E1DC
.text:000000000000E776 ; ---------------------------------------------------------------------------
.text:000000000000E776
.text:000000000000E776 loc_E776:                               ; CODE XREF: check_arrival+76↑j
.text:000000000000E776                 lea     r12, [rax+1]
.text:000000000000E77A                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:000000000000E784                 sub     rax, r13
.text:000000000000E787                 cmp     rax, r12
.text:000000000000E78A                 jl      short loc_E7FB
.text:000000000000E78C                 lea     r14, [r13+r12+0]
.text:000000000000E791                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:000000000000E79B                 cmp     r14, rax
.text:000000000000E79E                 ja      short loc_E7FB
.text:000000000000E7A0                 mov     rax, [rsp+108h+var_A8]
.text:000000000000E7A5                 lea     rsi, ds:0[r14*8] ; size
.text:000000000000E7AD                 mov     rdi, [rax+10h]  ; ptr
.text:000000000000E7B1                 call    _realloc
.text:000000000000E7B6                 test    rax, rax
.text:000000000000E7B9                 jz      short loc_E7FB
.text:000000000000E7BB                 mov     rcx, [rsp+108h+var_A8]
.text:000000000000E7C0                 lea     rdx, ds:0[r12*8] ; n
.text:000000000000E7C8                 lea     rdi, [rax+r13*8] ; s
.text:000000000000E7CC                 xor     esi, esi        ; c
.text:000000000000E7CE                 mov     [rcx+10h], rax
.text:000000000000E7D2                 mov     [rcx+8], r14
.text:000000000000E7D6                 call    _memset
.text:000000000000E7DB                 jmp     loc_E15C
.text:000000000000E7E0 ; ---------------------------------------------------------------------------
.text:000000000000E7E0
.text:000000000000E7E0 loc_E7E0:                               ; CODE XREF: check_arrival+1CD↑j
.text:000000000000E7E0                 xor     edi, edi
.text:000000000000E7E2                 jmp     loc_E698
.text:000000000000E7E7 ; ---------------------------------------------------------------------------
.text:000000000000E7E7
.text:000000000000E7E7 loc_E7E7:                               ; CODE XREF: check_arrival+680↑j
.text:000000000000E7E7                 mov     esi, [rsp+108h+var_80]
.text:000000000000E7EE                 test    esi, esi
.text:000000000000E7F0                 jz      loc_E766
.text:000000000000E7F6                 jmp     loc_E650
.text:000000000000E7FB ; ---------------------------------------------------------------------------
.text:000000000000E7FB
.text:000000000000E7FB loc_E7FB:                               ; CODE XREF: check_arrival+4D0↑j
.text:000000000000E7FB                                         ; check_arrival+6AA↑j ...
.text:000000000000E7FB                 mov     eax, 0Ch
.text:000000000000E800                 jmp     loc_E664
.text:000000000000E805 ; ---------------------------------------------------------------------------
.text:000000000000E805
.text:000000000000E805 loc_E805:                               ; CODE XREF: check_arrival+448↑j
.text:000000000000E805                 mov     rax, [rsp+108h+var_A8]
.text:000000000000E80A                 mov     [rax], r12
.text:000000000000E80D                 mov     rax, [rsp+108h+var_A0]
.text:000000000000E812                 mov     [r15+0B8h], rax
.text:000000000000E819                 mov     rax, [rsp+108h+var_98]
.text:000000000000E81E                 mov     [r15+48h], rax
.text:000000000000E822                 mov     eax, 1
.text:000000000000E827                 jmp     loc_E664
.text:000000000000E82C ; ---------------------------------------------------------------------------
.text:000000000000E82C
.text:000000000000E82C loc_E82C:                               ; CODE XREF: check_arrival+595↑j
.text:000000000000E82C                 call    ___stack_chk_fail
.text:000000000000E82C ; } // starts at E0E0
.text:000000000000E82C check_arrival   endp
.text:000000000000E82C
.text:000000000000E82C ; ---------------------------------------------------------------------------
.text:000000000000E831                 align 20h
.text:000000000000E840
.text:000000000000E840 ; =============== S U B R O U T I N E =======================================
.text:000000000000E840
.text:000000000000E840 ; Attributes: bp-based frame
.text:000000000000E840
.text:000000000000E840 set_regs        proc near               ; CODE XREF: re_search_internal+1351↓p
.text:000000000000E840
.text:000000000000E840 var_D1          = byte ptr -0D1h
.text:000000000000E840 var_C9          = byte ptr -0C9h
.text:000000000000E840 var_C8          = qword ptr -0C8h
.text:000000000000E840 dest            = qword ptr -0C0h
.text:000000000000E840 n               = qword ptr -0B8h
.text:000000000000E840 var_B0          = qword ptr -0B0h
.text:000000000000E840 var_A8          = qword ptr -0A8h
.text:000000000000E840 var_A0          = qword ptr -0A0h
.text:000000000000E840 var_98          = qword ptr -98h
.text:000000000000E840 var_90          = qword ptr -90h
.text:000000000000E840 var_88          = qword ptr -88h
.text:000000000000E840 var_78          = qword ptr -78h
.text:000000000000E840 var_70          = xmmword ptr -70h
.text:000000000000E840 ptr             = qword ptr -60h
.text:000000000000E840 var_50          = qword ptr -50h
.text:000000000000E840 var_48          = qword ptr -48h
.text:000000000000E840 var_40          = qword ptr -40h
.text:000000000000E840 var_38          = qword ptr -38h
.text:000000000000E840
.text:000000000000E840 ; __unwind {
.text:000000000000E840                 push    rbp
.text:000000000000E841                 mov     rbp, rsp
.text:000000000000E844                 push    r15
.text:000000000000E846                 push    r14
.text:000000000000E848                 push    r13
.text:000000000000E84A                 push    r12
.text:000000000000E84C                 mov     r13, rcx
.text:000000000000E84F                 push    rbx
.text:000000000000E850                 mov     r12, rsi
.text:000000000000E853                 sub     rsp, 0B8h
.text:000000000000E85A                 mov     [rbp+var_98], rdx
.text:000000000000E861                 mov     [rbp+var_50], 0
.text:000000000000E869                 mov     rax, fs:28h
.text:000000000000E872                 mov     [rbp+var_38], rax
.text:000000000000E876                 xor     eax, eax
.text:000000000000E878                 mov     rax, [rdi]
.text:000000000000E87B                 test    r8b, r8b
.text:000000000000E87E                 mov     [rbp+var_48], 2
.text:000000000000E886                 mov     [rbp+var_40], 0
.text:000000000000E88E                 mov     [rbp+var_90], rax
.text:000000000000E895                 jz      loc_F03D
.text:000000000000E89B                 mov     edi, 60h ; '`'  ; size
.text:000000000000E8A0                 call    _malloc
.text:000000000000E8A5                 lea     rcx, [rbp+var_50]
.text:000000000000E8A9                 test    rax, rax
.text:000000000000E8AC                 mov     [rbp+var_40], rax
.text:000000000000E8B0                 mov     [rbp+var_88], rcx
.text:000000000000E8B7                 jz      loc_EFDC
.text:000000000000E8BD
.text:000000000000E8BD loc_E8BD:                               ; CODE XREF: set_regs+808↓j
.text:000000000000E8BD                 mov     rax, [rbp+var_90]
.text:000000000000E8C4                 pxor    xmm0, xmm0
.text:000000000000E8C8                 mov     [rbp+ptr], 0
.text:000000000000E8D0                 mov     rbx, [rax+90h]
.text:000000000000E8D7                 mov     rax, [rbp+var_98]
.text:000000000000E8DE                 movaps  [rbp+var_70], xmm0
.text:000000000000E8E2                 shl     rax, 4
.text:000000000000E8E6                 cmp     rax, 0FBFh
.text:000000000000E8EC                 mov     [rbp+n], rax
.text:000000000000E8F3                 ja      loc_EFE6
.text:000000000000E8F9                 add     rax, 10h
.text:000000000000E8FD                 mov     [rbp+var_C9], 0
.text:000000000000E904                 sub     rsp, rax
.text:000000000000E907                 lea     rax, [rsp+0E0h+var_D1]
.text:000000000000E90C                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000E910                 mov     [rbp+dest], rax
.text:000000000000E917
.text:000000000000E917 loc_E917:                               ; CODE XREF: set_regs+7C3↓j
.text:000000000000E917                 mov     rdx, [rbp+n]    ; n
.text:000000000000E91E                 mov     rdi, [rbp+dest] ; dest
.text:000000000000E925                 mov     rsi, r13        ; src
.text:000000000000E928                 call    _memcpy
.text:000000000000E92D                 lea     rax, [rbp+var_70]
.text:000000000000E931                 mov     rcx, [r13+0]
.text:000000000000E935                 mov     [rbp+var_A8], rax
.text:000000000000E93C                 add     rax, 10h
.text:000000000000E940                 mov     [rbp+var_78], rcx
.text:000000000000E944                 mov     [rbp+var_C8], rax
.text:000000000000E94B
.text:000000000000E94B loc_E94B:                               ; CODE XREF: set_regs+612↓j
.text:000000000000E94B                 lea     rax, [rbp+var_78]
.text:000000000000E94F                 mov     [rbp+var_B0], rax
.text:000000000000E956                 jmp     loc_EA39
.text:000000000000E956 ; ---------------------------------------------------------------------------
.text:000000000000E95B                 align 20h
.text:000000000000E960
.text:000000000000E960 loc_E960:                               ; CODE XREF: set_regs+224↓j
.text:000000000000E960                 cmp     esi, 9
.text:000000000000E963                 jz      loc_EB50
.text:000000000000E969
.text:000000000000E969 loc_E969:                               ; CODE XREF: set_regs+238↓j
.text:000000000000E969                                         ; set_regs+254↓j ...
.text:000000000000E969                 cmp     rax, rcx
.text:000000000000E96C                 jnz     short loc_E97C
.text:000000000000E96E                 cmp     [r12+0B0h], rbx
.text:000000000000E976                 jz      loc_ED50
.text:000000000000E97C
.text:000000000000E97C loc_E97C:                               ; CODE XREF: set_regs+12C↑j
.text:000000000000E97C                                         ; set_regs+5C5↓j
.text:000000000000E97C                 mov     r14, [r12+98h]
.text:000000000000E984                 mov     rdi, [r14]
.text:000000000000E987                 lea     rsi, [rdi+r9]
.text:000000000000E98B                 movzx   eax, byte ptr [rsi+8]
.text:000000000000E98F                 test    al, 8
.text:000000000000E991                 jnz     loc_EAA0
.text:000000000000E997                 test    byte ptr [rsi+0Ah], 10h
.text:000000000000E99B                 jnz     loc_EBA0
.text:000000000000E9A1                 cmp     al, 4
.text:000000000000E9A3                 jz      loc_EBE0
.text:000000000000E9A9                 mov     rcx, [rbp+var_78]
.text:000000000000E9AD
.text:000000000000E9AD loc_E9AD:                               ; CODE XREF: set_regs+39A↓j
.text:000000000000E9AD                                         ; set_regs+6A5↓j
.text:000000000000E9AD                 mov     rdx, rcx
.text:000000000000E9B0                 mov     rdi, r12
.text:000000000000E9B3                 mov     [rbp+var_A0], rcx
.text:000000000000E9BA                 call    check_node_accept
.text:000000000000E9BF                 test    al, al
.text:000000000000E9C1                 mov     rcx, [rbp+var_A0]
.text:000000000000E9C8                 jz      loc_EE18
.text:000000000000E9CE                 mov     rax, [r14+18h]
.text:000000000000E9D2                 lea     rdx, [rcx+1]
.text:000000000000E9D6                 mov     rbx, [rax+r15*8]
.text:000000000000E9DA
.text:000000000000E9DA loc_E9DA:                               ; CODE XREF: set_regs+431↓j
.text:000000000000E9DA                 cmp     [rbp+var_88], 0
.text:000000000000E9E2                 mov     [rbp+var_78], rdx
.text:000000000000E9E6                 jz      short loc_EA24
.text:000000000000E9E8                 cmp     rdx, [r12+0A8h]
.text:000000000000E9F0                 jg      loc_EE26
.text:000000000000E9F6                 mov     rax, [r12+0B8h]
.text:000000000000E9FE                 mov     rax, [rax+rdx*8]
.text:000000000000EA02                 test    rax, rax
.text:000000000000EA05                 jz      loc_EE26
.text:000000000000EA0B                 mov     rdi, [rax+10h]
.text:000000000000EA0F                 lea     rsi, [rax+18h]
.text:000000000000EA13                 mov     rdx, rbx
.text:000000000000EA16                 call    re_node_set_contains_isra_3
.text:000000000000EA1B                 test    rax, rax
.text:000000000000EA1E                 jz      loc_EE26
.text:000000000000EA24
.text:000000000000EA24 loc_EA24:                               ; CODE XREF: set_regs+1A6↑j
.text:000000000000EA24                 mov     qword ptr [rbp+var_70+8], 0
.text:000000000000EA2C
.text:000000000000EA2C loc_EA2C:                               ; CODE XREF: set_regs+304↓j
.text:000000000000EA2C                                         ; set_regs+470↓j ...
.text:000000000000EA2C                 test    rbx, rbx
.text:000000000000EA2F                 js      loc_EE0A
.text:000000000000EA35                 mov     rcx, [rbp+var_78]
.text:000000000000EA39
.text:000000000000EA39 loc_EA39:                               ; CODE XREF: set_regs+116↑j
.text:000000000000EA39                 mov     rax, [r13+8]
.text:000000000000EA3D                 cmp     rax, rcx
.text:000000000000EA40                 jl      loc_EF30
.text:000000000000EA46                 mov     rdi, [rbp+var_90]
.text:000000000000EA4D                 mov     r9, rbx
.text:000000000000EA50                 mov     r15, rbx
.text:000000000000EA53                 shl     r9, 4
.text:000000000000EA57                 mov     rdx, [rdi]
.text:000000000000EA5A                 add     rdx, r9
.text:000000000000EA5D                 movzx   esi, byte ptr [rdx+8]
.text:000000000000EA61                 cmp     esi, 8
.text:000000000000EA64                 jnz     loc_E960
.text:000000000000EA6A                 mov     rdx, [rdx]
.text:000000000000EA6D                 add     rdx, 1
.text:000000000000EA71                 cmp     [rbp+var_98], rdx
.text:000000000000EA78                 jle     loc_E969
.text:000000000000EA7E                 shl     rdx, 4
.text:000000000000EA82                 add     rdx, r13
.text:000000000000EA85                 mov     qword ptr [rdx+8], 0FFFFFFFFFFFFFFFFh
.text:000000000000EA8D                 mov     [rdx], rcx
.text:000000000000EA90                 mov     rax, [r13+8]
.text:000000000000EA94                 jmp     loc_E969
.text:000000000000EA94 ; ---------------------------------------------------------------------------
.text:000000000000EA99                 align 20h
.text:000000000000EAA0
.text:000000000000EAA0 loc_EAA0:                               ; CODE XREF: set_regs+151↑j
.text:000000000000EAA0                 mov     rax, [r12+0B8h]
.text:000000000000EAA8                 mov     rdx, [rbp+var_78]
.text:000000000000EAAC                 mov     rsi, rbx
.text:000000000000EAAF                 mov     rdi, [rbp+var_A8]
.text:000000000000EAB6                 mov     r9, [rax+rdx*8]
.text:000000000000EABA                 mov     rax, [r14+28h]
.text:000000000000EABE                 lea     rdx, [rbx+rbx*2]
.text:000000000000EAC2                 mov     [rbp+var_A0], r9
.text:000000000000EAC9                 lea     r15, [rax+rdx*8]
.text:000000000000EACD                 call    re_node_set_insert
.text:000000000000EAD2                 test    al, al
.text:000000000000EAD4                 mov     r9, [rbp+var_A0]
.text:000000000000EADB                 jz      loc_EFB8
.text:000000000000EAE1                 mov     r10, [r15+8]
.text:000000000000EAE5                 test    r10, r10
.text:000000000000EAE8                 jle     loc_EE18
.text:000000000000EAEE                 mov     r15, [r15+10h]
.text:000000000000EAF2                 mov     r11, [r9+10h]
.text:000000000000EAF6                 lea     r14, [r9+18h]
.text:000000000000EAFA                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000EB01                 xor     r9d, r9d
.text:000000000000EB04                 mov     [rbp+var_A0], r12
.text:000000000000EB0B                 nop     dword ptr [rax+rax+00h]
.text:000000000000EB10
.text:000000000000EB10 loc_EB10:                               ; CODE XREF: set_regs+2FB↓j
.text:000000000000EB10                 mov     r12, [r15+r9*8]
.text:000000000000EB14                 mov     rsi, r14
.text:000000000000EB17                 mov     rdi, r11
.text:000000000000EB1A                 mov     rdx, r12
.text:000000000000EB1D                 call    re_node_set_contains_isra_3
.text:000000000000EB22                 test    rax, rax
.text:000000000000EB25                 jz      short loc_EB34
.text:000000000000EB27                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000EB2B                 jnz     loc_EC80
.text:000000000000EB31                 mov     rbx, r12
.text:000000000000EB34
.text:000000000000EB34 loc_EB34:                               ; CODE XREF: set_regs+2E5↑j
.text:000000000000EB34                 add     r9, 1
.text:000000000000EB38                 cmp     r10, r9
.text:000000000000EB3B                 jnz     short loc_EB10
.text:000000000000EB3D                 mov     r12, [rbp+var_A0]
.text:000000000000EB44                 jmp     loc_EA2C
.text:000000000000EB44 ; ---------------------------------------------------------------------------
.text:000000000000EB49                 align 10h
.text:000000000000EB50
.text:000000000000EB50 loc_EB50:                               ; CODE XREF: set_regs+123↑j
.text:000000000000EB50                 mov     rdi, [rdx]
.text:000000000000EB53                 lea     rsi, [rdi+1]
.text:000000000000EB57                 cmp     [rbp+var_98], rsi
.text:000000000000EB5E                 jle     loc_E969
.text:000000000000EB64                 shl     rsi, 4
.text:000000000000EB68                 lea     rax, [r13+rsi+0]
.text:000000000000EB6D                 cmp     [rax], rcx
.text:000000000000EB70                 jl      loc_EEF0
.text:000000000000EB76                 test    byte ptr [rdx+0Ah], 8
.text:000000000000EB7A                 jz      short loc_EB8E
.text:000000000000EB7C                 mov     rdi, [rbp+dest]
.text:000000000000EB83                 cmp     qword ptr [rdi+rsi], 0FFFFFFFFFFFFFFFFh
.text:000000000000EB88                 jnz     loc_EF7B
.text:000000000000EB8E
.text:000000000000EB8E loc_EB8E:                               ; CODE XREF: set_regs+33A↑j
.text:000000000000EB8E                 mov     [rax+8], rcx
.text:000000000000EB92                 mov     rax, [r13+8]
.text:000000000000EB96                 jmp     loc_E969
.text:000000000000EB96 ; ---------------------------------------------------------------------------
.text:000000000000EB9B                 align 20h
.text:000000000000EBA0
.text:000000000000EBA0 loc_EBA0:                               ; CODE XREF: set_regs+15B↑j
.text:000000000000EBA0                 mov     r8, [rbp+var_78]
.text:000000000000EBA4                 lea     rsi, [r14+0D8h]
.text:000000000000EBAB                 mov     rcx, r12
.text:000000000000EBAE                 mov     rdx, rbx
.text:000000000000EBB1                 mov     [rbp+var_A0], r9
.text:000000000000EBB8                 call    check_node_accept_bytes_isra_31
.text:000000000000EBBD                 movsxd  rcx, eax
.text:000000000000EBC0                 test    rcx, rcx
.text:000000000000EBC3                 jnz     loc_EDC1
.text:000000000000EBC9                 mov     r9, [rbp+var_A0]
.text:000000000000EBD0                 mov     rsi, [r14]
.text:000000000000EBD3                 mov     rcx, [rbp+var_78]
.text:000000000000EBD7                 add     rsi, r9
.text:000000000000EBDA                 jmp     loc_E9AD
.text:000000000000EBDA ; ---------------------------------------------------------------------------
.text:000000000000EBDF                 align 20h
.text:000000000000EBE0
.text:000000000000EBE0 loc_EBE0:                               ; CODE XREF: set_regs+163↑j
.text:000000000000EBE0                 mov     rax, [rsi]
.text:000000000000EBE3                 add     rax, 1
.text:000000000000EBE7                 shl     rax, 4
.text:000000000000EBEB                 add     rax, r13
.text:000000000000EBEE                 mov     rdx, [rax+8]
.text:000000000000EBF2                 mov     rdi, [rax]
.text:000000000000EBF5                 mov     rcx, rdx
.text:000000000000EBF8                 sub     rcx, rdi
.text:000000000000EBFB                 cmp     [rbp+var_88], 0
.text:000000000000EC03                 jz      loc_EDB8
.text:000000000000EC09                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000EC0D                 jz      loc_EE26
.text:000000000000EC13                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000EC17                 jz      loc_EE26
.text:000000000000EC1D                 test    rcx, rcx
.text:000000000000EC20                 jz      loc_EE70
.text:000000000000EC26                 mov     r15, [rbp+var_78]
.text:000000000000EC2A                 mov     rdx, [r12+30h]
.text:000000000000EC2F                 mov     rax, [r12+8]
.text:000000000000EC34                 sub     rdx, r15
.text:000000000000EC37                 cmp     rcx, rdx
.text:000000000000EC3A                 jg      loc_EE26
.text:000000000000EC40                 lea     rsi, [rax+r15]  ; s2
.text:000000000000EC44                 add     rdi, rax        ; s1
.text:000000000000EC47                 mov     rdx, rcx        ; n
.text:000000000000EC4A                 mov     [rbp+var_A0], rcx
.text:000000000000EC51                 call    _memcmp
.text:000000000000EC56                 test    eax, eax
.text:000000000000EC58                 mov     rcx, [rbp+var_A0]
.text:000000000000EC5F                 jnz     loc_EE26
.text:000000000000EC65
.text:000000000000EC65 loc_EC65:                               ; CODE XREF: set_regs+585↓j
.text:000000000000EC65                 mov     rax, [r14+18h]
.text:000000000000EC69                 lea     rdx, [r15+rcx]
.text:000000000000EC6D                 mov     rbx, [rax+rbx*8]
.text:000000000000EC71                 jmp     loc_E9DA
.text:000000000000EC71 ; ---------------------------------------------------------------------------
.text:000000000000EC76                 align 20h
.text:000000000000EC80
.text:000000000000EC80 loc_EC80:                               ; CODE XREF: set_regs+2EB↑j
.text:000000000000EC80                 mov     rsi, [rbp+var_C8]
.text:000000000000EC87                 mov     rdi, qword ptr [rbp+var_70+8]
.text:000000000000EC8B                 mov     rdx, rbx
.text:000000000000EC8E                 mov     r14, r12
.text:000000000000EC91                 mov     r12, [rbp+var_A0]
.text:000000000000EC98                 call    re_node_set_contains_isra_3
.text:000000000000EC9D                 test    rax, rax
.text:000000000000ECA0                 jnz     loc_EE60
.text:000000000000ECA6                 mov     rcx, [rbp+var_88]
.text:000000000000ECAD                 test    rcx, rcx
.text:000000000000ECB0                 jz      loc_EA2C
.text:000000000000ECB6                 mov     r15, [rcx]
.text:000000000000ECB9                 mov     rdx, [rbp+var_78]
.text:000000000000ECBD                 lea     rax, [r15+1]
.text:000000000000ECC1                 cmp     rax, [rcx+8]
.text:000000000000ECC5                 mov     [rcx], rax
.text:000000000000ECC8                 jz      loc_F04D
.text:000000000000ECCE                 mov     rax, [rcx+10h]
.text:000000000000ECD2
.text:000000000000ECD2 loc_ECD2:                               ; CODE XREF: set_regs+847↓j
.text:000000000000ECD2                 lea     r15, [r15+r15*2]
.text:000000000000ECD6                 shl     r15, 4
.text:000000000000ECDA                 add     r15, rax
.text:000000000000ECDD                 mov     [r15+8], r14
.text:000000000000ECE1                 mov     r14, [rbp+n]
.text:000000000000ECE8                 mov     [r15], rdx
.text:000000000000ECEB                 mov     rdi, r14        ; size
.text:000000000000ECEE                 call    _malloc
.text:000000000000ECF3                 test    rax, rax
.text:000000000000ECF6                 mov     [r15+10h], rax
.text:000000000000ECFA                 jz      short loc_ED22
.text:000000000000ECFC                 mov     rdx, r14        ; n
.text:000000000000ECFF                 mov     rsi, r13        ; src
.text:000000000000ED02                 mov     rdi, rax        ; dest
.text:000000000000ED05                 call    _memcpy
.text:000000000000ED0A                 mov     rsi, [rbp+var_A8]
.text:000000000000ED11                 lea     rdi, [r15+18h]
.text:000000000000ED15                 call    re_node_set_init_copy
.text:000000000000ED1A                 test    eax, eax
.text:000000000000ED1C                 jz      loc_EA2C
.text:000000000000ED22
.text:000000000000ED22 loc_ED22:                               ; CODE XREF: set_regs+4BA↑j
.text:000000000000ED22                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000ED26                 call    _free
.text:000000000000ED2B                 cmp     [rbp+var_C9], 0
.text:000000000000ED32                 jnz     loc_F0CB
.text:000000000000ED38
.text:000000000000ED38 loc_ED38:                               ; CODE XREF: set_regs+796↓j
.text:000000000000ED38                                         ; set_regs+885↓j
.text:000000000000ED38                 mov     rdi, [rbp+var_88]
.text:000000000000ED3F                 call    free_fail_stack_return_part_24
.text:000000000000ED44                 mov     eax, 0Ch
.text:000000000000ED49                 jmp     loc_EF59
.text:000000000000ED49 ; ---------------------------------------------------------------------------
.text:000000000000ED4E                 align 10h
.text:000000000000ED50
.text:000000000000ED50 loc_ED50:                               ; CODE XREF: set_regs+136↑j
.text:000000000000ED50                 cmp     [rbp+var_88], 0
.text:000000000000ED58                 jz      loc_F08C
.text:000000000000ED5E                 mov     rcx, [rbp+var_98]
.text:000000000000ED65                 test    rcx, rcx
.text:000000000000ED68                 jz      short loc_ED8A
.text:000000000000ED6A                 mov     rax, r13
.text:000000000000ED6D                 xor     edx, edx
.text:000000000000ED6F                 nop
.text:000000000000ED70
.text:000000000000ED70 loc_ED70:                               ; CODE XREF: set_regs+548↓j
.text:000000000000ED70                 cmp     qword ptr [rax], 0
.text:000000000000ED74                 js      short loc_ED7D
.text:000000000000ED76                 cmp     qword ptr [rax+8], 0FFFFFFFFFFFFFFFFh
.text:000000000000ED7B                 jz      short loc_EDD0
.text:000000000000ED7D
.text:000000000000ED7D loc_ED7D:                               ; CODE XREF: set_regs+534↑j
.text:000000000000ED7D                 add     rdx, 1
.text:000000000000ED81                 add     rax, 10h
.text:000000000000ED85                 cmp     rcx, rdx
.text:000000000000ED88                 jnz     short loc_ED70
.text:000000000000ED8A
.text:000000000000ED8A loc_ED8A:                               ; CODE XREF: set_regs+528↑j
.text:000000000000ED8A                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000ED8E                 call    _free
.text:000000000000ED93                 cmp     [rbp+var_C9], 0
.text:000000000000ED9A                 jnz     loc_F114
.text:000000000000EDA0
.text:000000000000EDA0 loc_EDA0:                               ; CODE XREF: set_regs+8E0↓j
.text:000000000000EDA0                 mov     rdi, [rbp+var_88]
.text:000000000000EDA7                 call    free_fail_stack_return_part_24
.text:000000000000EDAC                 xor     eax, eax
.text:000000000000EDAE                 jmp     loc_EF59
.text:000000000000EDAE ; ---------------------------------------------------------------------------
.text:000000000000EDB3                 align 8
.text:000000000000EDB8
.text:000000000000EDB8 loc_EDB8:                               ; CODE XREF: set_regs+3C3↑j
.text:000000000000EDB8                 test    rcx, rcx
.text:000000000000EDBB                 jz      loc_EE70
.text:000000000000EDC1
.text:000000000000EDC1 loc_EDC1:                               ; CODE XREF: set_regs+383↑j
.text:000000000000EDC1                 mov     r15, [rbp+var_78]
.text:000000000000EDC5                 jmp     loc_EC65
.text:000000000000EDC5 ; ---------------------------------------------------------------------------
.text:000000000000EDCA                 align 10h
.text:000000000000EDD0
.text:000000000000EDD0 loc_EDD0:                               ; CODE XREF: set_regs+53B↑j
.text:000000000000EDD0                 mov     rdi, [rbp+var_88]
.text:000000000000EDD7                 mov     r9, [rbp+var_A8]
.text:000000000000EDDE                 mov     r8, r13
.text:000000000000EDE1                 mov     rcx, [rbp+var_98]
.text:000000000000EDE8                 mov     rdx, [rbp+var_B0]
.text:000000000000EDEF                 lea     rsi, [rdi+10h]
.text:000000000000EDF3                 call    pop_fail_stack_isra_25
.text:000000000000EDF8                 mov     r9, rax
.text:000000000000EDFB                 mov     rbx, rax
.text:000000000000EDFE                 mov     r15, rax
.text:000000000000EE01                 shl     r9, 4
.text:000000000000EE05                 jmp     loc_E97C
.text:000000000000EE0A ; ---------------------------------------------------------------------------
.text:000000000000EE0A
.text:000000000000EE0A loc_EE0A:                               ; CODE XREF: set_regs+1EF↑j
.text:000000000000EE0A                 cmp     rbx, 0FFFFFFFFFFFFFFFEh
.text:000000000000EE0E                 jz      loc_EFB8
.text:000000000000EE14                 nop     dword ptr [rax+00h]
.text:000000000000EE18
.text:000000000000EE18 loc_EE18:                               ; CODE XREF: set_regs+188↑j
.text:000000000000EE18                                         ; set_regs+2A8↑j
.text:000000000000EE18                 cmp     [rbp+var_88], 0
.text:000000000000EE20                 jz      loc_F0DC
.text:000000000000EE26
.text:000000000000EE26 loc_EE26:                               ; CODE XREF: set_regs+1B0↑j
.text:000000000000EE26                                         ; set_regs+1C5↑j ...
.text:000000000000EE26                 mov     rdi, [rbp+var_88]
.text:000000000000EE2D                 mov     rcx, [rbp+var_98]
.text:000000000000EE34                 lea     rdx, [rbp+var_78]
.text:000000000000EE38                 mov     r9, [rbp+var_A8]
.text:000000000000EE3F                 mov     r8, r13
.text:000000000000EE42                 lea     rsi, [rdi+10h]
.text:000000000000EE46                 call    pop_fail_stack_isra_25
.text:000000000000EE4B                 mov     rcx, [rbp+var_78]
.text:000000000000EE4F                 mov     rbx, rax
.text:000000000000EE52                 jmp     loc_E94B
.text:000000000000EE52 ; ---------------------------------------------------------------------------
.text:000000000000EE57                 align 20h
.text:000000000000EE60
.text:000000000000EE60 loc_EE60:                               ; CODE XREF: set_regs+460↑j
.text:000000000000EE60                 mov     rbx, r14
.text:000000000000EE63                 jmp     loc_EA2C
.text:000000000000EE63 ; ---------------------------------------------------------------------------
.text:000000000000EE68                 align 10h
.text:000000000000EE70
.text:000000000000EE70 loc_EE70:                               ; CODE XREF: set_regs+3E0↑j
.text:000000000000EE70                                         ; set_regs+57B↑j
.text:000000000000EE70                 mov     rdi, [rbp+var_A8]
.text:000000000000EE77                 mov     rsi, rbx
.text:000000000000EE7A                 mov     [rbp+var_A0], r9
.text:000000000000EE81                 call    re_node_set_insert
.text:000000000000EE86                 test    al, al
.text:000000000000EE88                 jz      loc_EFB8
.text:000000000000EE8E                 mov     rdx, [r14+28h]
.text:000000000000EE92                 lea     rax, [rbx+rbx*2]
.text:000000000000EE96                 mov     rcx, [rbp+var_78]
.text:000000000000EE9A                 lea     rax, [rdx+rax*8]
.text:000000000000EE9E                 mov     [rbp-0D8h], rcx
.text:000000000000EEA5                 mov     rax, [rax+10h]
.text:000000000000EEA9                 mov     rbx, [rax]
.text:000000000000EEAC                 mov     rax, [r12+0B8h]
.text:000000000000EEB4                 mov     rax, [rax+rcx*8]
.text:000000000000EEB8                 mov     rdx, rbx
.text:000000000000EEBB                 mov     rdi, [rax+10h]
.text:000000000000EEBF                 lea     rsi, [rax+18h]
.text:000000000000EEC3                 call    re_node_set_contains_isra_3
.text:000000000000EEC8                 test    rax, rax
.text:000000000000EECB                 jnz     loc_EA2C
.text:000000000000EED1                 mov     r9, [rbp+var_A0]
.text:000000000000EED8                 mov     rsi, [r14]
.text:000000000000EEDB                 mov     rcx, [rbp-0D8h]
.text:000000000000EEE2                 add     rsi, r9
.text:000000000000EEE5                 jmp     loc_E9AD
.text:000000000000EEE5 ; ---------------------------------------------------------------------------
.text:000000000000EEEA                 align 10h
.text:000000000000EEF0
.text:000000000000EEF0 loc_EEF0:                               ; CODE XREF: set_regs+330↑j
.text:000000000000EEF0                 mov     rdx, [rbp+n]    ; n
.text:000000000000EEF7                 mov     rdi, [rbp+dest] ; dest
.text:000000000000EEFE                 mov     rsi, r13        ; src
.text:000000000000EF01                 mov     [rax+8], rcx
.text:000000000000EF05                 mov     [rbp-0D8h], r9
.text:000000000000EF0C                 mov     [rbp+var_A0], rcx
.text:000000000000EF13                 call    _memcpy
.text:000000000000EF18                 mov     rax, [r13+8]
.text:000000000000EF1C                 mov     rcx, [rbp+var_A0]
.text:000000000000EF23                 mov     r9, [rbp-0D8h]
.text:000000000000EF2A                 jmp     loc_E969
.text:000000000000EF2A ; ---------------------------------------------------------------------------
.text:000000000000EF2F                 align 10h
.text:000000000000EF30
.text:000000000000EF30 loc_EF30:                               ; CODE XREF: set_regs+200↑j
.text:000000000000EF30                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000EF34                 call    _free
.text:000000000000EF39                 cmp     [rbp+var_C9], 0
.text:000000000000EF40                 jnz     loc_F01C
.text:000000000000EF46                 mov     rdi, [rbp+var_88]
.text:000000000000EF4D                 test    rdi, rdi
.text:000000000000EF50                 jz      short loc_EF57
.text:000000000000EF52
.text:000000000000EF52 loc_EF52:                               ; CODE XREF: set_regs+7F2↓j
.text:000000000000EF52                 call    free_fail_stack_return_part_24
.text:000000000000EF57
.text:000000000000EF57 loc_EF57:                               ; CODE XREF: set_regs+710↑j
.text:000000000000EF57                                         ; set_regs+7F8↓j ...
.text:000000000000EF57                 xor     eax, eax
.text:000000000000EF59
.text:000000000000EF59 loc_EF59:                               ; CODE XREF: set_regs+509↑j
.text:000000000000EF59                                         ; set_regs+56E↑j ...
.text:000000000000EF59                 mov     rbx, [rbp+var_38]
.text:000000000000EF5D                 xor     rbx, fs:28h
.text:000000000000EF66                 jnz     loc_F125
.text:000000000000EF6C                 lea     rsp, [rbp-28h]
.text:000000000000EF70                 pop     rbx
.text:000000000000EF71                 pop     r12
.text:000000000000EF73                 pop     r13
.text:000000000000EF75                 pop     r14
.text:000000000000EF77                 pop     r15
.text:000000000000EF79                 pop     rbp
.text:000000000000EF7A                 retn
.text:000000000000EF7B ; ---------------------------------------------------------------------------
.text:000000000000EF7B
.text:000000000000EF7B loc_EF7B:                               ; CODE XREF: set_regs+348↑j
.text:000000000000EF7B                 mov     rdx, [rbp+n]    ; n
.text:000000000000EF82                 mov     rsi, rdi        ; src
.text:000000000000EF85                 mov     rdi, r13        ; dest
.text:000000000000EF88                 mov     [rbp-0D8h], rcx
.text:000000000000EF8F                 mov     [rbp+var_A0], r9
.text:000000000000EF96                 call    _memcpy
.text:000000000000EF9B                 mov     rax, [r13+8]
.text:000000000000EF9F                 mov     r9, [rbp+var_A0]
.text:000000000000EFA6                 mov     rcx, [rbp-0D8h]
.text:000000000000EFAD                 jmp     loc_E969
.text:000000000000EFAD ; ---------------------------------------------------------------------------
.text:000000000000EFB2                 align 8
.text:000000000000EFB8
.text:000000000000EFB8 loc_EFB8:                               ; CODE XREF: set_regs+29B↑j
.text:000000000000EFB8                                         ; set_regs+5CE↑j ...
.text:000000000000EFB8                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000EFBC                 call    _free
.text:000000000000EFC1                 cmp     [rbp+var_C9], 0
.text:000000000000EFC8                 jnz     loc_F0CB
.text:000000000000EFCE
.text:000000000000EFCE loc_EFCE:                               ; CODE XREF: set_regs+897↓j
.text:000000000000EFCE                 cmp     [rbp+var_88], 0
.text:000000000000EFD6                 jnz     loc_ED38
.text:000000000000EFDC
.text:000000000000EFDC loc_EFDC:                               ; CODE XREF: set_regs+77↑j
.text:000000000000EFDC                                         ; set_regs+7D3↓j ...
.text:000000000000EFDC                 mov     eax, 0Ch
.text:000000000000EFE1                 jmp     loc_EF59
.text:000000000000EFE6 ; ---------------------------------------------------------------------------
.text:000000000000EFE6
.text:000000000000EFE6 loc_EFE6:                               ; CODE XREF: set_regs+B3↑j
.text:000000000000EFE6                 mov     rdi, [rbp+n]    ; size
.text:000000000000EFED                 call    _malloc
.text:000000000000EFF2                 test    rax, rax
.text:000000000000EFF5                 mov     [rbp+dest], rax
.text:000000000000EFFC                 mov     [rbp+var_C9], 1
.text:000000000000F003                 jnz     loc_E917
.text:000000000000F009                 mov     rdi, [rbp+var_88]
.text:000000000000F010                 test    rdi, rdi
.text:000000000000F013                 jz      short loc_EFDC
.text:000000000000F015                 call    free_fail_stack_return_part_24
.text:000000000000F01A                 jmp     short loc_EFDC
.text:000000000000F01C ; ---------------------------------------------------------------------------
.text:000000000000F01C
.text:000000000000F01C loc_F01C:                               ; CODE XREF: set_regs+700↑j
.text:000000000000F01C                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000F023                 call    _free
.text:000000000000F028                 mov     rdi, [rbp+var_88]
.text:000000000000F02F                 test    rdi, rdi
.text:000000000000F032                 jnz     loc_EF52
.text:000000000000F038                 jmp     loc_EF57
.text:000000000000F03D ; ---------------------------------------------------------------------------
.text:000000000000F03D
.text:000000000000F03D loc_F03D:                               ; CODE XREF: set_regs+55↑j
.text:000000000000F03D                 mov     [rbp+var_88], 0
.text:000000000000F048                 jmp     loc_E8BD
.text:000000000000F04D ; ---------------------------------------------------------------------------
.text:000000000000F04D
.text:000000000000F04D loc_F04D:                               ; CODE XREF: set_regs+488↑j
.text:000000000000F04D                 lea     rsi, [rax+rax*2]
.text:000000000000F051                 mov     rax, [rbp+var_88]
.text:000000000000F058                 mov     [rbp+var_A0], rdx
.text:000000000000F05F                 shl     rsi, 5          ; size
.text:000000000000F063                 mov     rdi, [rax+10h]  ; ptr
.text:000000000000F067                 call    _realloc
.text:000000000000F06C                 test    rax, rax
.text:000000000000F06F                 jz      short loc_F0B5
.text:000000000000F071                 mov     rcx, [rbp+var_88]
.text:000000000000F078                 mov     rdx, [rbp+var_A0]
.text:000000000000F07F                 shl     qword ptr [rcx+8], 1
.text:000000000000F083                 mov     [rcx+10h], rax
.text:000000000000F087                 jmp     loc_ECD2
.text:000000000000F08C ; ---------------------------------------------------------------------------
.text:000000000000F08C
.text:000000000000F08C loc_F08C:                               ; CODE XREF: set_regs+518↑j
.text:000000000000F08C                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000F090                 call    _free
.text:000000000000F095                 cmp     [rbp+var_C9], 0
.text:000000000000F09C                 jz      loc_EF57
.text:000000000000F0A2                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000F0A9                 call    _free
.text:000000000000F0AE                 xor     eax, eax
.text:000000000000F0B0                 jmp     loc_EF59
.text:000000000000F0B5 ; ---------------------------------------------------------------------------
.text:000000000000F0B5
.text:000000000000F0B5 loc_F0B5:                               ; CODE XREF: set_regs+82F↑j
.text:000000000000F0B5                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000F0B9                 call    _free
.text:000000000000F0BE                 cmp     [rbp+var_C9], 0
.text:000000000000F0C5                 jz      loc_ED38
.text:000000000000F0CB
.text:000000000000F0CB loc_F0CB:                               ; CODE XREF: set_regs+4F2↑j
.text:000000000000F0CB                                         ; set_regs+788↑j
.text:000000000000F0CB                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000F0D2                 call    _free
.text:000000000000F0D7                 jmp     loc_EFCE
.text:000000000000F0DC ; ---------------------------------------------------------------------------
.text:000000000000F0DC
.text:000000000000F0DC loc_F0DC:                               ; CODE XREF: set_regs+5E0↑j
.text:000000000000F0DC                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000F0E0                 call    _free
.text:000000000000F0E5                 cmp     [rbp+var_C9], 0
.text:000000000000F0EC                 mov     eax, 1
.text:000000000000F0F1                 jz      loc_EF59
.text:000000000000F0F7                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000F0FE                 mov     dword ptr [rbp+var_88], eax
.text:000000000000F104                 call    _free
.text:000000000000F109                 mov     eax, dword ptr [rbp+var_88]
.text:000000000000F10F                 jmp     loc_EF59
.text:000000000000F114 ; ---------------------------------------------------------------------------
.text:000000000000F114
.text:000000000000F114 loc_F114:                               ; CODE XREF: set_regs+55A↑j
.text:000000000000F114                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000F11B                 call    _free
.text:000000000000F120                 jmp     loc_EDA0
.text:000000000000F125 ; ---------------------------------------------------------------------------
.text:000000000000F125
.text:000000000000F125 loc_F125:                               ; CODE XREF: set_regs+726↑j
.text:000000000000F125                 call    ___stack_chk_fail
.text:000000000000F125 ; } // starts at E840
.text:000000000000F125 set_regs        endp
.text:000000000000F125
.text:000000000000F125 ; ---------------------------------------------------------------------------
.text:000000000000F12A                 align 10h
.text:000000000000F130
.text:000000000000F130 ; =============== S U B R O U T I N E =======================================
.text:000000000000F130
.text:000000000000F130
.text:000000000000F130 get_subexp_sub_isra_32 proc near        ; CODE XREF: transit_state_bkref_isra_34+2C6↓p
.text:000000000000F130                                         ; transit_state_bkref_isra_34+6FD↓p
.text:000000000000F130
.text:000000000000F130 var_40          = qword ptr -40h
.text:000000000000F130
.text:000000000000F130 ; __unwind {
.text:000000000000F130                 push    r15
.text:000000000000F132                 push    r14
.text:000000000000F134                 mov     r14, rcx
.text:000000000000F137                 push    r13
.text:000000000000F139                 push    r12
.text:000000000000F13B                 mov     r13, rsi
.text:000000000000F13E                 push    rbp
.text:000000000000F13F                 push    rbx
.text:000000000000F140                 lea     rsi, [rdx+10h]
.text:000000000000F144                 mov     rbp, rdx
.text:000000000000F147                 mov     r9, r8
.text:000000000000F14A                 mov     r12, r8
.text:000000000000F14D                 sub     rsp, 20h
.text:000000000000F151                 mov     rcx, [rdx+8]
.text:000000000000F155                 mov     r8, r14
.text:000000000000F158                 push    8
.text:000000000000F15A                 mov     rdx, [rdx]
.text:000000000000F15D                 mov     rbx, rdi
.text:000000000000F160                 call    check_arrival
.text:000000000000F165                 test    eax, eax
.text:000000000000F167                 pop     rdx
.text:000000000000F168                 pop     rcx
.text:000000000000F169                 jz      short loc_F180
.text:000000000000F16B
.text:000000000000F16B loc_F16B:                               ; CODE XREF: get_subexp_sub_isra_32+191↓j
.text:000000000000F16B                 add     rsp, 18h
.text:000000000000F16F                 pop     rbx
.text:000000000000F170                 pop     rbp
.text:000000000000F171                 pop     r12
.text:000000000000F173                 pop     r13
.text:000000000000F175                 pop     r14
.text:000000000000F177                 pop     r15
.text:000000000000F179                 retn
.text:000000000000F179 ; ---------------------------------------------------------------------------
.text:000000000000F17A                 align 20h
.text:000000000000F180
.text:000000000000F180 loc_F180:                               ; CODE XREF: get_subexp_sub_isra_32+39↑j
.text:000000000000F180                 mov     rax, [rbx+0C8h]
.text:000000000000F187                 mov     rdx, [rbx+0D0h]
.text:000000000000F18E                 mov     r15, [rbp+8]
.text:000000000000F192                 mov     rcx, [r13+0]
.text:000000000000F196                 mov     rdi, [rbx+0D8h] ; ptr
.text:000000000000F19D                 cmp     rax, rdx
.text:000000000000F1A0                 mov     rsi, r15
.text:000000000000F1A3                 jge     loc_F240
.text:000000000000F1A9
.text:000000000000F1A9 loc_F1A9:                               ; CODE XREF: get_subexp_sub_isra_32+17B↓j
.text:000000000000F1A9                 lea     rdx, [rax+rax*4]
.text:000000000000F1AD                 shl     rdx, 3
.text:000000000000F1B1                 test    rax, rax
.text:000000000000F1B4                 jle     short loc_F1C1
.text:000000000000F1B6                 lea     r8, [rdi+rdx-28h]
.text:000000000000F1BB                 cmp     r12, [r8+8]
.text:000000000000F1BF                 jz      short loc_F230
.text:000000000000F1C1
.text:000000000000F1C1 loc_F1C1:                               ; CODE XREF: get_subexp_sub_isra_32+84↑j
.text:000000000000F1C1                                         ; get_subexp_sub_isra_32+105↓j
.text:000000000000F1C1                 add     rdi, rdx
.text:000000000000F1C4                 xor     edx, edx
.text:000000000000F1C6                 cmp     r15, rcx
.text:000000000000F1C9                 setz    dl
.text:000000000000F1CC                 add     rax, 1
.text:000000000000F1D0                 mov     [rdi], r14
.text:000000000000F1D3                 neg     edx
.text:000000000000F1D5                 mov     [rdi+8], r12
.text:000000000000F1D9                 mov     [rdi+10h], rcx
.text:000000000000F1DD                 mov     [rdi+22h], dx
.text:000000000000F1E1                 mov     [rdi+18h], r15
.text:000000000000F1E5                 mov     [rbx+0C8h], rax
.text:000000000000F1EC                 mov     byte ptr [rdi+20h], 0
.text:000000000000F1F0                 mov     rax, r15
.text:000000000000F1F3                 movsxd  rdx, dword ptr [rbx+0E0h]
.text:000000000000F1FA                 sub     rax, rcx
.text:000000000000F1FD                 cmp     rdx, rax
.text:000000000000F200                 jge     short loc_F20C
.text:000000000000F202                 sub     r15d, ecx
.text:000000000000F205                 mov     [rbx+0E0h], r15d
.text:000000000000F20C
.text:000000000000F20C loc_F20C:                               ; CODE XREF: get_subexp_sub_isra_32+D0↑j
.text:000000000000F20C                 add     rsi, r12
.text:000000000000F20F                 sub     rsi, [r13+0]
.text:000000000000F213                 add     rsp, 18h
.text:000000000000F217                 mov     rdi, rbx
.text:000000000000F21A                 pop     rbx
.text:000000000000F21B                 pop     rbp
.text:000000000000F21C                 pop     r12
.text:000000000000F21E                 pop     r13
.text:000000000000F220                 pop     r14
.text:000000000000F222                 pop     r15
.text:000000000000F224                 jmp     clean_state_log_if_needed
.text:000000000000F224 ; ---------------------------------------------------------------------------
.text:000000000000F229                 align 10h
.text:000000000000F230
.text:000000000000F230 loc_F230:                               ; CODE XREF: get_subexp_sub_isra_32+8F↑j
.text:000000000000F230                 mov     byte ptr [r8+20h], 1
.text:000000000000F235                 jmp     short loc_F1C1
.text:000000000000F235 ; ---------------------------------------------------------------------------
.text:000000000000F237                 align 20h
.text:000000000000F240
.text:000000000000F240 loc_F240:                               ; CODE XREF: get_subexp_sub_isra_32+73↑j
.text:000000000000F240                 lea     rsi, [rdx+rdx*4]
.text:000000000000F244                 mov     [rsp+48h+var_40], rcx
.text:000000000000F249                 shl     rsi, 4          ; size
.text:000000000000F24D                 call    _realloc
.text:000000000000F252                 test    rax, rax
.text:000000000000F255                 mov     rcx, [rsp+48h+var_40]
.text:000000000000F25A                 jz      short loc_F2B0
.text:000000000000F25C                 mov     rsi, [rbx+0C8h]
.text:000000000000F263                 mov     rdx, [rbx+0D0h]
.text:000000000000F26A                 mov     [rbx+0D8h], rax
.text:000000000000F271                 mov     [rsp+48h+var_40], rcx
.text:000000000000F276                 lea     rsi, [rsi+rsi*4]
.text:000000000000F27A                 lea     rdx, [rdx+rdx*4]
.text:000000000000F27E                 lea     rdi, [rax+rsi*8] ; s
.text:000000000000F282                 shl     rdx, 3          ; n
.text:000000000000F286                 xor     esi, esi        ; c
.text:000000000000F288                 call    _memset
.text:000000000000F28D                 shl     qword ptr [rbx+0D0h], 1
.text:000000000000F294                 mov     rax, [rbx+0C8h]
.text:000000000000F29B                 mov     rdi, [rbx+0D8h]
.text:000000000000F2A2                 mov     rsi, [rbp+8]
.text:000000000000F2A6                 mov     rcx, [rsp+48h+var_40]
.text:000000000000F2AB                 jmp     loc_F1A9
.text:000000000000F2B0 ; ---------------------------------------------------------------------------
.text:000000000000F2B0
.text:000000000000F2B0 loc_F2B0:                               ; CODE XREF: get_subexp_sub_isra_32+12A↑j
.text:000000000000F2B0                 mov     rdi, [rbx+0D8h] ; ptr
.text:000000000000F2B7                 call    _free
.text:000000000000F2BC                 mov     eax, 0Ch
.text:000000000000F2C1                 jmp     loc_F16B
.text:000000000000F2C1 ; } // starts at F130
.text:000000000000F2C1 get_subexp_sub_isra_32 endp
.text:000000000000F2C1
.text:000000000000F2C1 ; ---------------------------------------------------------------------------
.text:000000000000F2C6                 align 10h
.text:000000000000F2D0
.text:000000000000F2D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F2D0
.text:000000000000F2D0
.text:000000000000F2D0 transit_state_bkref_isra_34 proc near   ; CODE XREF: transit_state_bkref_isra_34+82A↓p
.text:000000000000F2D0                                         ; merge_state_with_log+1C1↓p ...
.text:000000000000F2D0
.text:000000000000F2D0 var_E8          = qword ptr -0E8h
.text:000000000000F2D0 var_E0          = qword ptr -0E0h
.text:000000000000F2D0 var_D8          = qword ptr -0D8h
.text:000000000000F2D0 var_D0          = qword ptr -0D0h
.text:000000000000F2D0 var_C8          = qword ptr -0C8h
.text:000000000000F2D0 var_C0          = qword ptr -0C0h
.text:000000000000F2D0 var_B8          = qword ptr -0B8h
.text:000000000000F2D0 var_B0          = qword ptr -0B0h
.text:000000000000F2D0 var_A8          = qword ptr -0A8h
.text:000000000000F2D0 var_A0          = qword ptr -0A0h
.text:000000000000F2D0 var_98          = qword ptr -98h
.text:000000000000F2D0 var_90          = qword ptr -90h
.text:000000000000F2D0 var_88          = qword ptr -88h
.text:000000000000F2D0 var_80          = qword ptr -80h
.text:000000000000F2D0 var_78          = qword ptr -78h
.text:000000000000F2D0 var_70          = qword ptr -70h
.text:000000000000F2D0 var_5C          = byte ptr -5Ch
.text:000000000000F2D0 var_58          = byte ptr -58h
.text:000000000000F2D0 ptr             = qword ptr -48h
.text:000000000000F2D0 var_40          = qword ptr -40h
.text:000000000000F2D0
.text:000000000000F2D0 ; __unwind {
.text:000000000000F2D0                 push    r15
.text:000000000000F2D2                 push    r14
.text:000000000000F2D4                 push    r13
.text:000000000000F2D6                 push    r12
.text:000000000000F2D8                 push    rbp
.text:000000000000F2D9                 push    rbx
.text:000000000000F2DA                 sub     rsp, 0B8h
.text:000000000000F2E1                 mov     r15, [rdi+48h]
.text:000000000000F2E5                 mov     rax, fs:28h
.text:000000000000F2EE                 mov     [rsp+0E8h+var_40], rax
.text:000000000000F2F6                 xor     eax, eax
.text:000000000000F2F8                 cmp     qword ptr [rsi], 0
.text:000000000000F2FC                 mov     rax, [rdi+98h]
.text:000000000000F303                 mov     [rsp+0E8h+var_A0], rsi
.text:000000000000F308                 mov     [rsp+0E8h+var_A8], rdx
.text:000000000000F30D                 mov     [rsp+0E8h+var_B0], rax
.text:000000000000F312                 jle     loc_F640
.text:000000000000F318                 lea     rax, ds:0[r15*8]
.text:000000000000F320                 mov     r14, rdi
.text:000000000000F323                 mov     [rsp+0E8h+var_E8], 0
.text:000000000000F32B                 mov     [rsp+0E8h+var_E0], r15
.text:000000000000F330                 mov     [rsp+0E8h+var_88], rax
.text:000000000000F335                 lea     rax, [rsp+0E8h+var_58]
.text:000000000000F33D                 mov     [rsp+0E8h+var_80], rax
.text:000000000000F342                 lea     rax, [rsp+0E8h+var_5C]
.text:000000000000F34A                 mov     [rsp+0E8h+var_70], rax
.text:000000000000F34F                 jmp     short loc_F397
.text:000000000000F34F ; ---------------------------------------------------------------------------
.text:000000000000F351                 align 8
.text:000000000000F358
.text:000000000000F358 loc_F358:                               ; CODE XREF: transit_state_bkref_isra_34+11D↓j
.text:000000000000F358                 test    al, 1
.text:000000000000F35A                 jz      short loc_F380
.text:000000000000F35C                 and     edx, 8
.text:000000000000F35F                 jnz     short loc_F380
.text:000000000000F361
.text:000000000000F361 loc_F361:                               ; CODE XREF: transit_state_bkref_isra_34+126↓j
.text:000000000000F361                                         ; transit_state_bkref_isra_34+12E↓j
.text:000000000000F361                 test    cl, 20h
.text:000000000000F364                 jz      short loc_F36A
.text:000000000000F366                 test    al, 2
.text:000000000000F368                 jz      short loc_F380
.text:000000000000F36A
.text:000000000000F36A loc_F36A:                               ; CODE XREF: transit_state_bkref_isra_34+94↑j
.text:000000000000F36A                 and     ecx, 80h
.text:000000000000F370                 jz      loc_F410
.text:000000000000F376                 test    al, 8
.text:000000000000F378                 jnz     loc_F410
.text:000000000000F37E                 xchg    ax, ax
.text:000000000000F380
.text:000000000000F380 loc_F380:                               ; CODE XREF: transit_state_bkref_isra_34+8A↑j
.text:000000000000F380                                         ; transit_state_bkref_isra_34+8F↑j ...
.text:000000000000F380                 mov     rdi, [rsp+0E8h+var_A0]
.text:000000000000F385                 add     [rsp+0E8h+var_E8], 1
.text:000000000000F38A                 mov     rax, [rsp+0E8h+var_E8]
.text:000000000000F38E                 cmp     rax, [rdi]
.text:000000000000F391                 jge     loc_F640
.text:000000000000F397
.text:000000000000F397 loc_F397:                               ; CODE XREF: transit_state_bkref_isra_34+7F↑j
.text:000000000000F397                 mov     rax, [rsp+0E8h+var_A8]
.text:000000000000F39C                 mov     rdi, [rsp+0E8h+var_E8]
.text:000000000000F3A0                 mov     rax, [rax]
.text:000000000000F3A3                 mov     r13, [rax+rdi*8]
.text:000000000000F3A7                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000F3AC                 mov     rax, [rdi]
.text:000000000000F3AF                 mov     rbx, r13
.text:000000000000F3B2                 shl     rbx, 4
.text:000000000000F3B6                 add     rax, rbx
.text:000000000000F3B9                 cmp     byte ptr [rax+8], 4
.text:000000000000F3BD                 jnz     short loc_F380
.text:000000000000F3BF                 mov     ebp, [rax+8]
.text:000000000000F3C2                 test    ebp, 3FF00h
.text:000000000000F3C8                 jz      short loc_F410
.text:000000000000F3CA                 mov     edx, [r14+0A0h]
.text:000000000000F3D1                 mov     rsi, [rsp+0E8h+var_E0]
.text:000000000000F3D6                 mov     rdi, r14
.text:000000000000F3D9                 call    re_string_context_at
.text:000000000000F3DE                 mov     edx, ebp
.text:000000000000F3E0                 shr     edx, 8
.text:000000000000F3E3                 mov     ecx, edx
.text:000000000000F3E5                 and     cx, 3FFh
.text:000000000000F3EA                 test    dl, 4
.text:000000000000F3ED                 jnz     loc_F358
.text:000000000000F3F3                 and     edx, 8
.text:000000000000F3F6                 jz      loc_F361
.text:000000000000F3FC                 test    al, 1
.text:000000000000F3FE                 jz      loc_F361
.text:000000000000F404                 jmp     loc_F380
.text:000000000000F404 ; ---------------------------------------------------------------------------
.text:000000000000F409                 align 10h
.text:000000000000F410
.text:000000000000F410 loc_F410:                               ; CODE XREF: transit_state_bkref_isra_34+A0↑j
.text:000000000000F410                                         ; transit_state_bkref_isra_34+A8↑j ...
.text:000000000000F410                 mov     rdi, [r14+0C8h]
.text:000000000000F417                 mov     rax, [r14+98h]
.text:000000000000F41E                 xor     ecx, ecx
.text:000000000000F420                 mov     r10, [r14+8]
.text:000000000000F424                 mov     r9, [rsp+0E8h+var_E0]
.text:000000000000F429                 mov     [rsp+0E8h+var_78], rdi
.text:000000000000F42E                 mov     [rsp+0E8h+var_98], rax
.text:000000000000F433
.text:000000000000F433 loc_F433:                               ; CODE XREF: transit_state_bkref_isra_34+367↓j
.text:000000000000F433                 cmp     rcx, rdi
.text:000000000000F436                 jge     short loc_F48B
.text:000000000000F438                 lea     rax, [rcx+rdi]
.text:000000000000F43C                 mov     r11, [r14+0D8h]
.text:000000000000F443                 mov     rsi, rax
.text:000000000000F446                 shr     rsi, 3Fh
.text:000000000000F44A                 add     rsi, rax
.text:000000000000F44D                 sar     rsi, 1
.text:000000000000F450                 lea     rax, [rsi+rsi*4]
.text:000000000000F454                 cmp     r9, [r11+rax*8+8]
.text:000000000000F459                 jle     short loc_F486
.text:000000000000F45B                 jmp     loc_F628
.text:000000000000F460 ; ---------------------------------------------------------------------------
.text:000000000000F460
.text:000000000000F460 loc_F460:                               ; CODE XREF: transit_state_bkref_isra_34+1B9↓j
.text:000000000000F460                 lea     rdx, [rsi+rcx]
.text:000000000000F464                 mov     rax, rdx
.text:000000000000F467                 shr     rax, 3Fh
.text:000000000000F46B                 add     rax, rdx
.text:000000000000F46E                 sar     rax, 1
.text:000000000000F471                 lea     rdx, [rax+rax*4]
.text:000000000000F475                 mov     r8, rax
.text:000000000000F478                 cmp     r9, [r11+rdx*8+8]
.text:000000000000F47D                 jg      loc_F630
.text:000000000000F483                 mov     rsi, rax
.text:000000000000F486
.text:000000000000F486 loc_F486:                               ; CODE XREF: transit_state_bkref_isra_34+189↑j
.text:000000000000F486                 cmp     rsi, rcx
.text:000000000000F489                 jg      short loc_F460
.text:000000000000F48B
.text:000000000000F48B loc_F48B:                               ; CODE XREF: transit_state_bkref_isra_34+166↑j
.text:000000000000F48B                 cmp     [rsp+0E8h+var_78], rcx
.text:000000000000F490                 jle     short loc_F4B6
.text:000000000000F492                 mov     rdx, [r14+0D8h]
.text:000000000000F499                 lea     rax, [rcx+rcx*4]
.text:000000000000F49D                 mov     rdi, [rsp+0E8h+var_E0]
.text:000000000000F4A2                 lea     rax, [rdx+rax*8]
.text:000000000000F4A6                 cmp     [rax+8], rdi
.text:000000000000F4AA                 jnz     short loc_F4B6
.text:000000000000F4AC                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F4B0                 jnz     loc_F686
.text:000000000000F4B6
.text:000000000000F4B6 loc_F4B6:                               ; CODE XREF: transit_state_bkref_isra_34+1C0↑j
.text:000000000000F4B6                                         ; transit_state_bkref_isra_34+1DA↑j ...
.text:000000000000F4B6                 mov     rax, [rsp+0E8h+var_98]
.text:000000000000F4BB                 cmp     qword ptr [r14+0E8h], 0
.text:000000000000F4C3                 mov     rdx, [rax]
.text:000000000000F4C6                 mov     rax, [rdx+rbx]
.text:000000000000F4CA                 mov     [rsp+0E8h+var_90], rax
.text:000000000000F4CF                 jle     loc_F68B
.text:000000000000F4D5                 mov     [rsp+0E8h+var_B8], r13
.text:000000000000F4DA                 mov     [rsp+0E8h+var_C0], 0
.text:000000000000F4E3                 mov     r13, r10
.text:000000000000F4E6
.text:000000000000F4E6 loc_F4E6:                               ; CODE XREF: transit_state_bkref_isra_34+259↓j
.text:000000000000F4E6                 mov     rax, [r14+0F8h]
.text:000000000000F4ED                 mov     rbx, [rsp+0E8h+var_C0]
.text:000000000000F4F2                 mov     rdi, [rsp+0E8h+var_90]
.text:000000000000F4F7                 mov     rbx, [rax+rbx*8]
.text:000000000000F4FB                 mov     rax, [rbx+8]
.text:000000000000F4FF                 shl     rax, 4
.text:000000000000F503                 cmp     rdi, [rdx+rax]
.text:000000000000F507                 jz      short loc_F530
.text:000000000000F509
.text:000000000000F509 loc_F509:                               ; CODE XREF: transit_state_bkref_isra_34+5A7↓j
.text:000000000000F509                                         ; transit_state_bkref_isra_34+725↓j ...
.text:000000000000F509                 add     [rsp+0E8h+var_C0], 1
.text:000000000000F50F                 mov     rax, [rsp+0E8h+var_C0]
.text:000000000000F514                 cmp     rax, [r14+0E8h]
.text:000000000000F51B                 jge     loc_FB91
.text:000000000000F521                 mov     rax, [rsp+0E8h+var_98]
.text:000000000000F526                 mov     rdx, [rax]
.text:000000000000F529                 jmp     short loc_F4E6
.text:000000000000F529 ; ---------------------------------------------------------------------------
.text:000000000000F52B                 align 10h
.text:000000000000F530
.text:000000000000F530 loc_F530:                               ; CODE XREF: transit_state_bkref_isra_34+237↑j
.text:000000000000F530                 cmp     qword ptr [rbx+20h], 0
.text:000000000000F535                 mov     r11, [rbx]
.text:000000000000F538                 jle     loc_FBA2
.text:000000000000F53E                 mov     rcx, [rsp+0E8h+var_E0]
.text:000000000000F543                 mov     r8, r13
.text:000000000000F546                 xor     ebp, ebp
.text:000000000000F548                 mov     r13, rbx
.text:000000000000F54B                 mov     rbx, rcx
.text:000000000000F54E                 jmp     short loc_F5BC
.text:000000000000F550 ; ---------------------------------------------------------------------------
.text:000000000000F550
.text:000000000000F550 loc_F550:                               ; CODE XREF: transit_state_bkref_isra_34+30B↓j
.text:000000000000F550                                         ; transit_state_bkref_isra_34+34C↓j
.text:000000000000F550                 lea     rsi, [r8+r11]   ; s2
.text:000000000000F554                 lea     rdi, [r8+rbx]   ; s1
.text:000000000000F558                 mov     [rsp+0E8h+var_C8], r9
.text:000000000000F55D                 mov     [rsp+0E8h+var_D0], r11
.text:000000000000F562                 mov     [rsp+0E8h+var_D8], r8
.text:000000000000F567                 call    _memcmp
.text:000000000000F56C                 test    eax, eax
.text:000000000000F56E                 mov     r8, [rsp+0E8h+var_D8]
.text:000000000000F573                 mov     r11, [rsp+0E8h+var_D0]
.text:000000000000F578                 mov     r9, [rsp+0E8h+var_C8]
.text:000000000000F57D                 jnz     loc_FA48
.text:000000000000F583
.text:000000000000F583 loc_F583:                               ; CODE XREF: transit_state_bkref_isra_34+305↓j
.text:000000000000F583                 mov     r8, [rsp+0E8h+var_E0]
.text:000000000000F588                 mov     rcx, [rsp+0E8h+var_B8]
.text:000000000000F58D                 mov     rdx, r9
.text:000000000000F590                 mov     rsi, r13
.text:000000000000F593                 mov     rdi, r14
.text:000000000000F596                 call    get_subexp_sub_isra_32
.text:000000000000F59B                 cmp     eax, 1
.text:000000000000F59E                 mov     r8, [r14+8]
.text:000000000000F5A2                 ja      loc_F648
.text:000000000000F5A8                 add     rbp, 1
.text:000000000000F5AC                 cmp     rbp, [r13+20h]
.text:000000000000F5B0                 mov     r11, r15
.text:000000000000F5B3                 mov     rbx, r12
.text:000000000000F5B6                 jge     loc_F868
.text:000000000000F5BC
.text:000000000000F5BC loc_F5BC:                               ; CODE XREF: transit_state_bkref_isra_34+27E↑j
.text:000000000000F5BC                 mov     rax, [r13+28h]
.text:000000000000F5C0                 mov     r9, [rax+rbp*8]
.text:000000000000F5C4                 mov     r15, [r9+8]
.text:000000000000F5C8                 mov     rdx, r15
.text:000000000000F5CB                 sub     rdx, r11        ; n
.text:000000000000F5CE                 test    rdx, rdx
.text:000000000000F5D1                 lea     r12, [rdx+rbx]
.text:000000000000F5D5                 jle     short loc_F583
.text:000000000000F5D7                 cmp     [r14+30h], r12
.text:000000000000F5DB                 jge     loc_F550
.text:000000000000F5E1                 cmp     [r14+58h], r12
.text:000000000000F5E5                 mov     [rsp+0E8h+var_D0], rdx
.text:000000000000F5EA                 mov     [rsp+0E8h+var_D8], r9
.text:000000000000F5EF                 jl      loc_FA48
.text:000000000000F5F5                 mov     rsi, r12
.text:000000000000F5F8                 mov     rdi, r14
.text:000000000000F5FB                 mov     [rsp+0E8h+var_C8], r11
.text:000000000000F600                 call    clean_state_log_if_needed
.text:000000000000F605                 test    eax, eax
.text:000000000000F607                 jnz     short loc_F648
.text:000000000000F609                 mov     r8, [r14+8]
.text:000000000000F60D                 mov     rdx, [rsp+0E8h+var_D0]
.text:000000000000F612                 mov     r9, [rsp+0E8h+var_D8]
.text:000000000000F617                 mov     r11, [rsp+0E8h+var_C8]
.text:000000000000F61C                 jmp     loc_F550
.text:000000000000F61C ; ---------------------------------------------------------------------------
.text:000000000000F621                 align 8
.text:000000000000F628
.text:000000000000F628 loc_F628:                               ; CODE XREF: transit_state_bkref_isra_34+18B↑j
.text:000000000000F628                 mov     r8, rsi
.text:000000000000F62B                 mov     rsi, rdi
.text:000000000000F62E                 xchg    ax, ax
.text:000000000000F630
.text:000000000000F630 loc_F630:                               ; CODE XREF: transit_state_bkref_isra_34+1AD↑j
.text:000000000000F630                 lea     rcx, [r8+1]
.text:000000000000F634                 mov     rdi, rsi
.text:000000000000F637                 jmp     loc_F433
.text:000000000000F637 ; ---------------------------------------------------------------------------
.text:000000000000F63C                 align 20h
.text:000000000000F640
.text:000000000000F640 loc_F640:                               ; CODE XREF: transit_state_bkref_isra_34+42↑j
.text:000000000000F640                                         ; transit_state_bkref_isra_34+C1↑j
.text:000000000000F640                 xor     eax, eax
.text:000000000000F642                 nop     word ptr [rax+rax+00h]
.text:000000000000F648
.text:000000000000F648 loc_F648:                               ; CODE XREF: transit_state_bkref_isra_34+2D2↑j
.text:000000000000F648                                         ; transit_state_bkref_isra_34+337↑j ...
.text:000000000000F648                 mov     rbx, [rsp+0E8h+var_40]
.text:000000000000F650                 xor     rbx, fs:28h
.text:000000000000F659                 jnz     loc_FBAC
.text:000000000000F65F                 add     rsp, 0B8h
.text:000000000000F666                 pop     rbx
.text:000000000000F667                 pop     rbp
.text:000000000000F668                 pop     r12
.text:000000000000F66A                 pop     r13
.text:000000000000F66C                 pop     r14
.text:000000000000F66E                 pop     r15
.text:000000000000F670                 retn
.text:000000000000F670 ; ---------------------------------------------------------------------------
.text:000000000000F671                 align 8
.text:000000000000F678
.text:000000000000F678 loc_F678:                               ; CODE XREF: transit_state_bkref_isra_34+3B9↓j
.text:000000000000F678                 add     rax, 28h ; '('
.text:000000000000F67C                 cmp     byte ptr [rax-8], 0
.text:000000000000F680                 jz      loc_F4B6
.text:000000000000F686
.text:000000000000F686 loc_F686:                               ; CODE XREF: transit_state_bkref_isra_34+1E0↑j
.text:000000000000F686                 cmp     r13, [rax]
.text:000000000000F689                 jnz     short loc_F678
.text:000000000000F68B
.text:000000000000F68B loc_F68B:                               ; CODE XREF: transit_state_bkref_isra_34+1FF↑j
.text:000000000000F68B                 mov     rax, [rsp+0E8h+var_78]
.text:000000000000F690
.text:000000000000F690 loc_F690:                               ; CODE XREF: transit_state_bkref_isra_34+8CD↓j
.text:000000000000F690                 cmp     [rsp+0E8h+var_78], rax
.text:000000000000F695                 mov     dword ptr [rsp+0E8h+var_5C], 0
.text:000000000000F6A0                 jge     loc_F380
.text:000000000000F6A6                 lea     rax, ds:0[r13*8]
.text:000000000000F6AE                 mov     r12, [rsp+0E8h+var_78]
.text:000000000000F6B3                 mov     rbp, [rsp+0E8h+var_B0]
.text:000000000000F6B8                 mov     [rsp+0E8h+var_98], rax
.text:000000000000F6BD                 lea     rax, [r13+r13*2+0]
.text:000000000000F6C2                 lea     r8, [r12+r12*4]
.text:000000000000F6C6                 shl     rax, 3
.text:000000000000F6CA                 mov     [rsp+0E8h+var_90], rax
.text:000000000000F6CF                 lea     r15, ds:0[r8*8]
.text:000000000000F6D7                 jmp     loc_F80D
.text:000000000000F6D7 ; ---------------------------------------------------------------------------
.text:000000000000F6DC                 align 20h
.text:000000000000F6E0
.text:000000000000F6E0 loc_F6E0:                               ; CODE XREF: transit_state_bkref_isra_34+56E↓j
.text:000000000000F6E0                 mov     rcx, [rbp+28h]
.text:000000000000F6E4                 mov     rdi, [rsp+0E8h+var_90]
.text:000000000000F6E9                 mov     rcx, [rcx+rdi+10h]
.text:000000000000F6EE                 mov     rcx, [rcx]
.text:000000000000F6F1                 lea     rcx, [rcx+rcx*2]
.text:000000000000F6F5                 lea     rcx, [rdx+rcx*8]
.text:000000000000F6F9                 mov     [rsp+0E8h+var_D0], rcx
.text:000000000000F6FE
.text:000000000000F6FE loc_F6FE:                               ; CODE XREF: transit_state_bkref_isra_34+58E↓j
.text:000000000000F6FE                 add     rbx, [rsp+0E8h+var_E0]
.text:000000000000F703                 mov     edx, [r14+0A0h]
.text:000000000000F70A                 mov     rdi, r14
.text:000000000000F70D                 sub     rbx, rax
.text:000000000000F710                 lea     rsi, [rbx-1]
.text:000000000000F714                 call    re_string_context_at
.text:000000000000F719                 mov     rsi, [rsp+0E8h+var_88]
.text:000000000000F71E                 mov     ecx, eax
.text:000000000000F720                 mov     rax, [r14+0B8h]
.text:000000000000F727                 lea     r10, ds:0[rbx*8]
.text:000000000000F72F                 mov     [rsp+0E8h+var_D8], 0
.text:000000000000F738                 lea     r11, [rax+r10]
.text:000000000000F73C                 mov     rax, [rax+rsi]
.text:000000000000F740                 mov     rdx, [r11]
.text:000000000000F743                 test    rax, rax
.text:000000000000F746                 jz      short loc_F751
.text:000000000000F748                 mov     rax, [rax+10h]
.text:000000000000F74C                 mov     [rsp+0E8h+var_D8], rax
.text:000000000000F751
.text:000000000000F751 loc_F751:                               ; CODE XREF: transit_state_bkref_isra_34+476↑j
.text:000000000000F751                 test    rdx, rdx
.text:000000000000F754                 jz      loc_FA70
.text:000000000000F75A                 mov     rsi, [rdx+50h]
.text:000000000000F75E                 mov     rdi, [rsp+0E8h+var_80]
.text:000000000000F763                 mov     rdx, [rsp+0E8h+var_D0]
.text:000000000000F768                 mov     [rsp+0E8h+var_B8], r10
.text:000000000000F76D                 mov     dword ptr [rsp+0E8h+var_C0], ecx
.text:000000000000F771                 call    re_node_set_init_union
.text:000000000000F776                 test    eax, eax
.text:000000000000F778                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:000000000000F77F                 mov     ecx, dword ptr [rsp+0E8h+var_C0]
.text:000000000000F783                 mov     r10, [rsp+0E8h+var_B8]
.text:000000000000F788                 jnz     loc_FB18
.text:000000000000F78E                 add     r10, [r14+0B8h]
.text:000000000000F795                 mov     rdx, [rsp+0E8h+var_80]
.text:000000000000F79A                 mov     rsi, rbp
.text:000000000000F79D                 mov     rdi, [rsp+0E8h+var_70]
.text:000000000000F7A2                 mov     [rsp+0E8h+var_C0], r10
.text:000000000000F7A7                 call    re_acquire_state_context
.text:000000000000F7AC                 mov     r10, [rsp+0E8h+var_C0]
.text:000000000000F7B1                 mov     rdi, [rsp+0E8h+ptr] ; ptr
.text:000000000000F7B9                 mov     [r10], rax
.text:000000000000F7BC                 call    _free
.text:000000000000F7C1                 mov     rdx, [r14+0B8h]
.text:000000000000F7C8                 cmp     qword ptr [rdx+rbx*8], 0
.text:000000000000F7CD                 jz      loc_FAA1
.text:000000000000F7D3
.text:000000000000F7D3 loc_F7D3:                               ; CODE XREF: transit_state_bkref_isra_34+7CB↓j
.text:000000000000F7D3                                         ; transit_state_bkref_isra_34+7DA↓j
.text:000000000000F7D3                 cmp     [rsp+0E8h+var_C8], 0
.text:000000000000F7D9                 jnz     short loc_F7F8
.text:000000000000F7DB                 mov     rax, [rsp+0E8h+var_88]
.text:000000000000F7E0                 mov     rbx, [rsp+0E8h+var_D8]
.text:000000000000F7E5                 mov     rax, [rdx+rax]
.text:000000000000F7E9                 cmp     [rax+10h], rbx
.text:000000000000F7ED                 jg      loc_FAB8
.text:000000000000F7F3                 nop     dword ptr [rax+rax+00h]
.text:000000000000F7F8
.text:000000000000F7F8 loc_F7F8:                               ; CODE XREF: transit_state_bkref_isra_34+509↑j
.text:000000000000F7F8                                         ; transit_state_bkref_isra_34+54A↓j ...
.text:000000000000F7F8                 add     r12, 1
.text:000000000000F7FC                 add     r15, 28h ; '('
.text:000000000000F800                 cmp     r12, [r14+0C8h]
.text:000000000000F807                 jge     loc_F380
.text:000000000000F80D
.text:000000000000F80D loc_F80D:                               ; CODE XREF: transit_state_bkref_isra_34+407↑j
.text:000000000000F80D                 mov     rax, [r14+0D8h]
.text:000000000000F814                 add     rax, r15
.text:000000000000F817                 cmp     r13, [rax]
.text:000000000000F81A                 jnz     short loc_F7F8
.text:000000000000F81C                 mov     rdi, [rsp+0E8h+var_E0]
.text:000000000000F821                 cmp     rdi, [rax+8]
.text:000000000000F825                 jnz     short loc_F7F8
.text:000000000000F827                 mov     rbx, [rax+18h]
.text:000000000000F82B                 mov     rax, [rax+10h]
.text:000000000000F82F                 mov     rdx, [rbp+30h]
.text:000000000000F833                 mov     rcx, rbx
.text:000000000000F836                 sub     rcx, rax
.text:000000000000F839                 mov     [rsp+0E8h+var_C8], rcx
.text:000000000000F83E                 jz      loc_F6E0
.text:000000000000F844                 mov     rcx, [rbp+18h]
.text:000000000000F848                 mov     rdi, [rsp+0E8h+var_98]
.text:000000000000F84D                 mov     rcx, [rcx+rdi]
.text:000000000000F851                 lea     rcx, [rcx+rcx*2]
.text:000000000000F855                 lea     rcx, [rdx+rcx*8]
.text:000000000000F859                 mov     [rsp+0E8h+var_D0], rcx
.text:000000000000F85E                 jmp     loc_F6FE
.text:000000000000F85E ; ---------------------------------------------------------------------------
.text:000000000000F863                 align 8
.text:000000000000F868
.text:000000000000F868 loc_F868:                               ; CODE XREF: transit_state_bkref_isra_34+2E6↑j
.text:000000000000F868                 mov     rbx, r13
.text:000000000000F86B                 mov     r13, r8
.text:000000000000F86E
.text:000000000000F86E loc_F86E:                               ; CODE XREF: transit_state_bkref_isra_34+79A↓j
.text:000000000000F86E                 lea     r11, [r15+1]
.text:000000000000F872
.text:000000000000F872 loc_F872:                               ; CODE XREF: transit_state_bkref_isra_34+791↓j
.text:000000000000F872                                         ; transit_state_bkref_isra_34+8D7↓j
.text:000000000000F872                 cmp     [rsp+0E8h+var_E0], r11
.text:000000000000F877                 jl      loc_F509
.text:000000000000F87D                 mov     rax, r12
.text:000000000000F880                 lea     r15, ds:0[r11*8]
.text:000000000000F888                 mov     r12, rbx
.text:000000000000F88B                 mov     rbx, r11
.text:000000000000F88E                 mov     r11, r13
.text:000000000000F891                 mov     r13, rax
.text:000000000000F894                 nop     dword ptr [rax+00h]
.text:000000000000F898
.text:000000000000F898 loc_F898:                               ; CODE XREF: transit_state_bkref_isra_34+71C↓j
.text:000000000000F898                 mov     rax, rbx
.text:000000000000F89B                 sub     rax, [r12]
.text:000000000000F89F                 test    rax, rax
.text:000000000000F8A2                 jle     short loc_F8C5
.text:000000000000F8A4                 cmp     [r14+30h], r13
.text:000000000000F8A8                 jle     loc_FB31
.text:000000000000F8AE
.text:000000000000F8AE loc_F8AE:                               ; CODE XREF: transit_state_bkref_isra_34+883↓j
.text:000000000000F8AE                 movzx   ecx, byte ptr [r11+rbx-1]
.text:000000000000F8B4                 lea     rax, [r13+1]
.text:000000000000F8B8                 cmp     [r11+r13], cl
.text:000000000000F8BC                 jnz     loc_F9F2
.text:000000000000F8C2                 mov     r13, rax
.text:000000000000F8C5
.text:000000000000F8C5 loc_F8C5:                               ; CODE XREF: transit_state_bkref_isra_34+5D2↑j
.text:000000000000F8C5                 mov     rax, [r14+0B8h]
.text:000000000000F8CC                 mov     rax, [rax+r15]
.text:000000000000F8D0                 test    rax, rax
.text:000000000000F8D3                 jz      loc_F9DF
.text:000000000000F8D9                 mov     rcx, [rax+10h]
.text:000000000000F8DD                 test    rcx, rcx
.text:000000000000F8E0                 jle     loc_F9DF
.text:000000000000F8E6                 mov     rdi, [rax+18h]
.text:000000000000F8EA                 mov     rax, [rsp+0E8h+var_98]
.text:000000000000F8EF                 xor     edx, edx
.text:000000000000F8F1                 mov     r8, [rsp+0E8h+var_90]
.text:000000000000F8F6                 mov     rsi, [rax]
.text:000000000000F8F9                 jmp     short loc_F90D
.text:000000000000F8F9 ; ---------------------------------------------------------------------------
.text:000000000000F8FB                 align 20h
.text:000000000000F900
.text:000000000000F900 loc_F900:                               ; CODE XREF: transit_state_bkref_isra_34+64F↓j
.text:000000000000F900                                         ; transit_state_bkref_isra_34+654↓j
.text:000000000000F900                 add     rdx, 1
.text:000000000000F904                 cmp     rcx, rdx
.text:000000000000F907                 jz      loc_F9DF
.text:000000000000F90D
.text:000000000000F90D loc_F90D:                               ; CODE XREF: transit_state_bkref_isra_34+629↑j
.text:000000000000F90D                 mov     rbp, [rdi+rdx*8]
.text:000000000000F911                 mov     rax, rbp
.text:000000000000F914                 shl     rax, 4
.text:000000000000F918                 add     rax, rsi
.text:000000000000F91B                 cmp     byte ptr [rax+8], 9
.text:000000000000F91F                 jnz     short loc_F900
.text:000000000000F921                 cmp     r8, [rax]
.text:000000000000F924                 jnz     short loc_F900
.text:000000000000F926                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:000000000000F92A                 jz      loc_F9DF
.text:000000000000F930                 mov     rsi, [r12+10h]
.text:000000000000F935                 mov     rcx, [r12]
.text:000000000000F939                 test    rsi, rsi
.text:000000000000F93C                 jz      loc_FA00
.text:000000000000F942
.text:000000000000F942 loc_F942:                               ; CODE XREF: transit_state_bkref_isra_34+763↓j
.text:000000000000F942                 mov     [rsp+0E8h+var_D8], r11
.text:000000000000F947                 mov     rdx, [r12+8]
.text:000000000000F94C                 sub     rsp, 8
.text:000000000000F950                 push    9
.text:000000000000F952                 mov     r9, rbx
.text:000000000000F955                 mov     r8, rbp
.text:000000000000F958                 mov     rdi, r14
.text:000000000000F95B                 call    check_arrival
.text:000000000000F960                 pop     rdx
.text:000000000000F961                 cmp     eax, 1
.text:000000000000F964                 pop     rcx
.text:000000000000F965                 mov     r11, [rsp+0E8h+var_D8]
.text:000000000000F96A                 jz      short loc_F9DF
.text:000000000000F96C                 test    eax, eax
.text:000000000000F96E                 jnz     loc_F648
.text:000000000000F974                 mov     rax, [r12+20h]
.text:000000000000F979                 cmp     rax, [r12+18h]
.text:000000000000F97E                 jz      loc_FB58
.text:000000000000F984
.text:000000000000F984 loc_F984:                               ; CODE XREF: transit_state_bkref_isra_34+8BC↓j
.text:000000000000F984                 mov     esi, 28h ; '('  ; size
.text:000000000000F989                 mov     edi, 1          ; nmemb
.text:000000000000F98E                 call    _calloc
.text:000000000000F993                 test    rax, rax
.text:000000000000F996                 jz      loc_FA39
.text:000000000000F99C                 mov     rdx, [r12+20h]
.text:000000000000F9A1                 mov     rcx, [r12+28h]
.text:000000000000F9A6                 mov     rsi, r12
.text:000000000000F9A9                 mov     r8, [rsp+0E8h+var_E0]
.text:000000000000F9AE                 mov     rdi, r14
.text:000000000000F9B1                 mov     [rcx+rdx*8], rax
.text:000000000000F9B5                 mov     rcx, [rsp+0E8h+var_B8]
.text:000000000000F9BA                 add     rdx, 1
.text:000000000000F9BE                 mov     [rax], rbp
.text:000000000000F9C1                 mov     [rax+8], rbx
.text:000000000000F9C5                 mov     [r12+20h], rdx
.text:000000000000F9CA                 mov     rdx, rax
.text:000000000000F9CD                 call    get_subexp_sub_isra_32
.text:000000000000F9D2                 cmp     eax, 1
.text:000000000000F9D5                 mov     r11, [r14+8]
.text:000000000000F9D9                 ja      loc_F648
.text:000000000000F9DF
.text:000000000000F9DF loc_F9DF:                               ; CODE XREF: transit_state_bkref_isra_34+603↑j
.text:000000000000F9DF                                         ; transit_state_bkref_isra_34+610↑j ...
.text:000000000000F9DF                 add     rbx, 1
.text:000000000000F9E3                 add     r15, 8
.text:000000000000F9E7                 cmp     [rsp+0E8h+var_E0], rbx
.text:000000000000F9EC                 jge     loc_F898
.text:000000000000F9F2
.text:000000000000F9F2 loc_F9F2:                               ; CODE XREF: transit_state_bkref_isra_34+5EC↑j
.text:000000000000F9F2                                         ; transit_state_bkref_isra_34+865↓j
.text:000000000000F9F2                 mov     r13, r11
.text:000000000000F9F5                 jmp     loc_F509
.text:000000000000F9F5 ; ---------------------------------------------------------------------------
.text:000000000000F9FA                 align 20h
.text:000000000000FA00
.text:000000000000FA00 loc_FA00:                               ; CODE XREF: transit_state_bkref_isra_34+66C↑j
.text:000000000000FA00                 mov     rsi, rbx
.text:000000000000FA03                 mov     edi, 18h        ; nmemb
.text:000000000000FA08                 mov     [rsp+0E8h+var_D0], r11
.text:000000000000FA0D                 sub     rsi, rcx
.text:000000000000FA10                 mov     [rsp+0E8h+var_D8], rcx
.text:000000000000FA15                 add     rsi, 1          ; size
.text:000000000000FA19                 call    _calloc
.text:000000000000FA1E                 test    rax, rax
.text:000000000000FA21                 mov     rsi, rax
.text:000000000000FA24                 mov     [r12+10h], rax
.text:000000000000FA29                 mov     rcx, [rsp+0E8h+var_D8]
.text:000000000000FA2E                 mov     r11, [rsp+0E8h+var_D0]
.text:000000000000FA33                 jnz     loc_F942
.text:000000000000FA39
.text:000000000000FA39 loc_FA39:                               ; CODE XREF: transit_state_bkref_isra_34+6C6↑j
.text:000000000000FA39                                         ; transit_state_bkref_isra_34+8A7↓j
.text:000000000000FA39                 mov     eax, 0Ch
.text:000000000000FA3E                 jmp     loc_F648
.text:000000000000FA3E ; ---------------------------------------------------------------------------
.text:000000000000FA43                 align 8
.text:000000000000FA48
.text:000000000000FA48 loc_FA48:                               ; CODE XREF: transit_state_bkref_isra_34+2AD↑j
.text:000000000000FA48                                         ; transit_state_bkref_isra_34+31F↑j
.text:000000000000FA48                 mov     rcx, rbx
.text:000000000000FA4B                 mov     rbx, r13
.text:000000000000FA4E                 mov     r13, r8
.text:000000000000FA51                 cmp     [rbx+20h], rbp
.text:000000000000FA55                 jg      loc_F509
.text:000000000000FA5B                 test    rbp, rbp
.text:000000000000FA5E                 mov     r12, rcx
.text:000000000000FA61                 jz      loc_F872
.text:000000000000FA67                 mov     r15, r11
.text:000000000000FA6A                 jmp     loc_F86E
.text:000000000000FA6A ; ---------------------------------------------------------------------------
.text:000000000000FA6F                 align 10h
.text:000000000000FA70
.text:000000000000FA70 loc_FA70:                               ; CODE XREF: transit_state_bkref_isra_34+484↑j
.text:000000000000FA70                 mov     rdx, [rsp+0E8h+var_D0]
.text:000000000000FA75                 mov     rdi, [rsp+0E8h+var_70]
.text:000000000000FA7A                 mov     rsi, rbp
.text:000000000000FA7D                 mov     [rsp+0E8h+var_C0], r11
.text:000000000000FA82                 call    re_acquire_state_context
.text:000000000000FA87                 mov     r11, [rsp+0E8h+var_C0]
.text:000000000000FA8C                 mov     rdx, [r14+0B8h]
.text:000000000000FA93                 mov     [r11], rax
.text:000000000000FA96                 cmp     qword ptr [rdx+rbx*8], 0
.text:000000000000FA9B                 jnz     loc_F7D3
.text:000000000000FAA1
.text:000000000000FAA1 loc_FAA1:                               ; CODE XREF: transit_state_bkref_isra_34+4FD↑j
.text:000000000000FAA1                 mov     eax, dword ptr [rsp+0E8h+var_5C]
.text:000000000000FAA8                 test    eax, eax
.text:000000000000FAAA                 jz      loc_F7D3
.text:000000000000FAB0                 jmp     loc_F648
.text:000000000000FAB0 ; ---------------------------------------------------------------------------
.text:000000000000FAB5                 align 8
.text:000000000000FAB8
.text:000000000000FAB8 loc_FAB8:                               ; CODE XREF: transit_state_bkref_isra_34+51D↑j
.text:000000000000FAB8                 mov     rax, [rsp+0E8h+var_D0]
.text:000000000000FABD                 mov     rcx, [rsp+0E8h+var_E0]
.text:000000000000FAC2                 mov     rdi, r14
.text:000000000000FAC5                 lea     r8, [rax+10h]
.text:000000000000FAC9                 lea     rbx, [rax+8]
.text:000000000000FACD                 mov     rdx, r8
.text:000000000000FAD0                 mov     rsi, rbx
.text:000000000000FAD3                 mov     [rsp+0E8h+var_D8], r8
.text:000000000000FAD8                 call    check_subexp_matching_top_isra_18
.text:000000000000FADD                 test    eax, eax
.text:000000000000FADF                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:000000000000FAE6                 jnz     loc_F648
.text:000000000000FAEC                 mov     r8, [rsp+0E8h+var_D8]
.text:000000000000FAF1                 mov     rsi, rbx
.text:000000000000FAF4                 mov     rdi, r14
.text:000000000000FAF7                 mov     rdx, r8
.text:000000000000FAFA                 call    transit_state_bkref_isra_34
.text:000000000000FAFF                 test    eax, eax
.text:000000000000FB01                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:000000000000FB08                 jz      loc_F7F8
.text:000000000000FB0E                 jmp     loc_F648
.text:000000000000FB0E ; ---------------------------------------------------------------------------
.text:000000000000FB13                 align 8
.text:000000000000FB18
.text:000000000000FB18 loc_FB18:                               ; CODE XREF: transit_state_bkref_isra_34+4B8↑j
.text:000000000000FB18                 mov     rdi, [rsp+0E8h+ptr] ; ptr
.text:000000000000FB20                 call    _free
.text:000000000000FB25                 mov     eax, dword ptr [rsp+0E8h+var_5C]
.text:000000000000FB2C                 jmp     loc_F648
.text:000000000000FB31 ; ---------------------------------------------------------------------------
.text:000000000000FB31
.text:000000000000FB31 loc_FB31:                               ; CODE XREF: transit_state_bkref_isra_34+5D8↑j
.text:000000000000FB31                 cmp     [r14+58h], r13
.text:000000000000FB35                 jle     loc_F9F2
.text:000000000000FB3B                 lea     esi, [r13+1]
.text:000000000000FB3F                 mov     rdi, r14
.text:000000000000FB42                 call    extend_buffers
.text:000000000000FB47                 test    eax, eax
.text:000000000000FB49                 jnz     loc_F648
.text:000000000000FB4F                 mov     r11, [r14+8]
.text:000000000000FB53                 jmp     loc_F8AE
.text:000000000000FB58 ; ---------------------------------------------------------------------------
.text:000000000000FB58
.text:000000000000FB58 loc_FB58:                               ; CODE XREF: transit_state_bkref_isra_34+6AE↑j
.text:000000000000FB58                 lea     rdx, [rax+rax+1]
.text:000000000000FB5D                 mov     rdi, [r12+28h]  ; ptr
.text:000000000000FB62                 lea     rsi, ds:0[rdx*8] ; size
.text:000000000000FB6A                 mov     [rsp+0E8h+var_D8], rdx
.text:000000000000FB6F                 call    _realloc
.text:000000000000FB74                 test    rax, rax
.text:000000000000FB77                 jz      loc_FA39
.text:000000000000FB7D                 mov     rdx, [rsp+0E8h+var_D8]
.text:000000000000FB82                 mov     [r12+28h], rax
.text:000000000000FB87                 mov     [r12+18h], rdx
.text:000000000000FB8C                 jmp     loc_F984
.text:000000000000FB91 ; ---------------------------------------------------------------------------
.text:000000000000FB91
.text:000000000000FB91 loc_FB91:                               ; CODE XREF: transit_state_bkref_isra_34+24B↑j
.text:000000000000FB91                 mov     r13, [rsp+0E8h+var_B8]
.text:000000000000FB96                 mov     rax, [r14+0C8h]
.text:000000000000FB9D                 jmp     loc_F690
.text:000000000000FBA2 ; ---------------------------------------------------------------------------
.text:000000000000FBA2
.text:000000000000FBA2 loc_FBA2:                               ; CODE XREF: transit_state_bkref_isra_34+268↑j
.text:000000000000FBA2                 mov     r12, [rsp+0E8h+var_E0]
.text:000000000000FBA7                 jmp     loc_F872
.text:000000000000FBAC ; ---------------------------------------------------------------------------
.text:000000000000FBAC
.text:000000000000FBAC loc_FBAC:                               ; CODE XREF: transit_state_bkref_isra_34+389↑j
.text:000000000000FBAC                 call    ___stack_chk_fail
.text:000000000000FBAC ; } // starts at F2D0
.text:000000000000FBAC transit_state_bkref_isra_34 endp
.text:000000000000FBAC
.text:000000000000FBAC ; ---------------------------------------------------------------------------
.text:000000000000FBB1                 align 20h
.text:000000000000FBC0
.text:000000000000FBC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000FBC0
.text:000000000000FBC0
.text:000000000000FBC0 merge_state_with_log proc near          ; CODE XREF: re_search_internal+7DC↓p
.text:000000000000FBC0                                         ; re_search_internal+BC3↓p
.text:000000000000FBC0
.text:000000000000FBC0 var_68          = qword ptr -68h
.text:000000000000FBC0 var_60          = qword ptr -60h
.text:000000000000FBC0 var_58          = xmmword ptr -58h
.text:000000000000FBC0 ptr             = qword ptr -48h
.text:000000000000FBC0 var_40          = qword ptr -40h
.text:000000000000FBC0
.text:000000000000FBC0 ; __unwind {
.text:000000000000FBC0                 push    r15
.text:000000000000FBC2                 push    r14
.text:000000000000FBC4                 push    r13
.text:000000000000FBC6                 push    r12
.text:000000000000FBC8                 mov     r13, rdi
.text:000000000000FBCB                 push    rbp
.text:000000000000FBCC                 push    rbx
.text:000000000000FBCD                 mov     rbx, rsi
.text:000000000000FBD0                 sub     rsp, 38h
.text:000000000000FBD4                 mov     r12, [rsi+48h]
.text:000000000000FBD8                 mov     r14, [rsi+0B8h]
.text:000000000000FBDF                 mov     rax, fs:28h
.text:000000000000FBE8                 mov     [rsp+68h+var_40], rax
.text:000000000000FBED                 xor     eax, eax
.text:000000000000FBEF                 mov     r15, [rsi+98h]
.text:000000000000FBF6                 lea     rbp, ds:0[r12*8]
.text:000000000000FBFE                 add     r14, rbp
.text:000000000000FC01                 cmp     [rsi+0C0h], r12
.text:000000000000FC08                 jge     short loc_FC50
.text:000000000000FC0A                 mov     [r14], rdx
.text:000000000000FC0D                 mov     rbp, rdx
.text:000000000000FC10                 mov     [rsi+0C0h], r12
.text:000000000000FC17
.text:000000000000FC17 loc_FC17:                               ; CODE XREF: merge_state_with_log+111↓j
.text:000000000000FC17                                         ; merge_state_with_log+121↓j ...
.text:000000000000FC17                 cmp     qword ptr [r15+98h], 0
.text:000000000000FC1F                 jnz     loc_FD48
.text:000000000000FC25
.text:000000000000FC25 loc_FC25:                               ; CODE XREF: merge_state_with_log+1B2↓j
.text:000000000000FC25                                         ; merge_state_with_log+1D9↓j ...
.text:000000000000FC25                 mov     rcx, [rsp+68h+var_40]
.text:000000000000FC2A                 xor     rcx, fs:28h
.text:000000000000FC33                 mov     rax, rbp
.text:000000000000FC36                 jnz     loc_FDA7
.text:000000000000FC3C                 add     rsp, 38h
.text:000000000000FC40                 pop     rbx
.text:000000000000FC41                 pop     rbp
.text:000000000000FC42                 pop     r12
.text:000000000000FC44                 pop     r13
.text:000000000000FC46                 pop     r14
.text:000000000000FC48                 pop     r15
.text:000000000000FC4A                 retn
.text:000000000000FC4A ; ---------------------------------------------------------------------------
.text:000000000000FC4B                 align 10h
.text:000000000000FC50
.text:000000000000FC50 loc_FC50:                               ; CODE XREF: merge_state_with_log+48↑j
.text:000000000000FC50                 mov     rax, [r14]
.text:000000000000FC53                 test    rax, rax
.text:000000000000FC56                 jz      loc_FD38
.text:000000000000FC5C                 test    rdx, rdx
.text:000000000000FC5F                 mov     rax, [rax+50h]
.text:000000000000FC63                 jz      loc_FCF0
.text:000000000000FC69                 mov     r14, [rdx+50h]
.text:000000000000FC6D                 lea     rdi, [rsp+68h+var_58]
.text:000000000000FC72                 mov     rdx, rax
.text:000000000000FC75                 mov     [rsp+68h+var_68], rdi
.text:000000000000FC79                 mov     rsi, r14
.text:000000000000FC7C                 call    re_node_set_init_union
.text:000000000000FC81                 test    eax, eax
.text:000000000000FC83                 mov     [r13+0], eax
.text:000000000000FC87                 jnz     loc_FDA0
.text:000000000000FC8D                 mov     rax, [rbx+48h]
.text:000000000000FC91                 mov     edx, [rbx+0A0h]
.text:000000000000FC97                 mov     rdi, rbx
.text:000000000000FC9A                 lea     rsi, [rax-1]
.text:000000000000FC9E                 call    re_string_context_at
.text:000000000000FCA3                 mov     r8, [rbx+0B8h]
.text:000000000000FCAA                 mov     rdx, [rsp+68h+var_68]
.text:000000000000FCAE                 mov     ecx, eax
.text:000000000000FCB0                 mov     rsi, r15
.text:000000000000FCB3                 mov     rdi, r13
.text:000000000000FCB6                 add     r8, rbp
.text:000000000000FCB9                 mov     [rsp+68h+var_60], r8
.text:000000000000FCBE                 call    re_acquire_state_context
.text:000000000000FCC3                 mov     r8, [rsp+68h+var_60]
.text:000000000000FCC8                 test    r14, r14
.text:000000000000FCCB                 mov     rbp, rax
.text:000000000000FCCE                 mov     [r8], rax
.text:000000000000FCD1                 jz      loc_FC17
.text:000000000000FCD7                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:000000000000FCDC                 call    _free
.text:000000000000FCE1                 jmp     loc_FC17
.text:000000000000FCE1 ; ---------------------------------------------------------------------------
.text:000000000000FCE6                 align 10h
.text:000000000000FCF0
.text:000000000000FCF0 loc_FCF0:                               ; CODE XREF: merge_state_with_log+A3↑j
.text:000000000000FCF0                 movdqu  xmm0, xmmword ptr [rax]
.text:000000000000FCF4                 mov     rdi, rbx
.text:000000000000FCF7                 mov     edx, [rsi+0A0h]
.text:000000000000FCFD                 lea     rsi, [r12-1]
.text:000000000000FD02                 movaps  [rsp+68h+var_58], xmm0
.text:000000000000FD07                 mov     rax, [rax+10h]
.text:000000000000FD0B                 mov     [rsp+68h+ptr], rax
.text:000000000000FD10                 call    re_string_context_at
.text:000000000000FD15                 lea     rdx, [rsp+68h+var_58]
.text:000000000000FD1A                 mov     ecx, eax
.text:000000000000FD1C                 mov     rsi, r15
.text:000000000000FD1F                 mov     rdi, r13
.text:000000000000FD22                 call    re_acquire_state_context
.text:000000000000FD27                 mov     rbp, rax
.text:000000000000FD2A                 mov     [r14], rax
.text:000000000000FD2D                 jmp     loc_FC17
.text:000000000000FD2D ; ---------------------------------------------------------------------------
.text:000000000000FD32                 align 8
.text:000000000000FD38
.text:000000000000FD38 loc_FD38:                               ; CODE XREF: merge_state_with_log+96↑j
.text:000000000000FD38                 mov     [r14], rdx
.text:000000000000FD3B                 mov     rbp, rdx
.text:000000000000FD3E                 jmp     loc_FC17
.text:000000000000FD3E ; ---------------------------------------------------------------------------
.text:000000000000FD43                 align 8
.text:000000000000FD48
.text:000000000000FD48 loc_FD48:                               ; CODE XREF: merge_state_with_log+5F↑j
.text:000000000000FD48                 test    rbp, rbp
.text:000000000000FD4B                 jz      short loc_FDA0
.text:000000000000FD4D                 lea     r14, [rbp+10h]
.text:000000000000FD51                 lea     r15, [rbp+18h]
.text:000000000000FD55                 mov     rcx, r12
.text:000000000000FD58                 mov     rdi, rbx
.text:000000000000FD5B                 mov     rdx, r15
.text:000000000000FD5E                 mov     rsi, r14
.text:000000000000FD61                 call    check_subexp_matching_top_isra_18
.text:000000000000FD66                 test    eax, eax
.text:000000000000FD68                 mov     [r13+0], eax
.text:000000000000FD6C                 jnz     short loc_FDA0
.text:000000000000FD6E                 test    byte ptr [rbp+68h], 40h
.text:000000000000FD72                 jz      loc_FC25
.text:000000000000FD78                 mov     rdx, r15
.text:000000000000FD7B                 mov     rsi, r14
.text:000000000000FD7E                 mov     rdi, rbx
.text:000000000000FD81                 call    transit_state_bkref_isra_34
.text:000000000000FD86                 test    eax, eax
.text:000000000000FD88                 mov     [r13+0], eax
.text:000000000000FD8C                 jnz     short loc_FDA0
.text:000000000000FD8E                 mov     rax, [rbx+0B8h]
.text:000000000000FD95                 mov     rbp, [rax+r12*8]
.text:000000000000FD99                 jmp     loc_FC25
.text:000000000000FD99 ; ---------------------------------------------------------------------------
.text:000000000000FD9E                 align 20h
.text:000000000000FDA0
.text:000000000000FDA0 loc_FDA0:                               ; CODE XREF: merge_state_with_log+C7↑j
.text:000000000000FDA0                                         ; merge_state_with_log+18B↑j ...
.text:000000000000FDA0                 xor     ebp, ebp
.text:000000000000FDA2                 jmp     loc_FC25
.text:000000000000FDA7 ; ---------------------------------------------------------------------------
.text:000000000000FDA7
.text:000000000000FDA7 loc_FDA7:                               ; CODE XREF: merge_state_with_log+76↑j
.text:000000000000FDA7                 call    ___stack_chk_fail
.text:000000000000FDA7 ; } // starts at FBC0
.text:000000000000FDA7 merge_state_with_log endp
.text:000000000000FDA7
.text:000000000000FDA7 ; ---------------------------------------------------------------------------
.text:000000000000FDAC                 align 10h
.text:000000000000FDB0
.text:000000000000FDB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000FDB0
.text:000000000000FDB0
.text:000000000000FDB0 sift_states_backward proc near          ; CODE XREF: re_search_internal+9CE↓p
.text:000000000000FDB0                                         ; re_search_internal+1235↓p ...
.text:000000000000FDB0
.text:000000000000FDB0 var_98          = qword ptr -98h
.text:000000000000FDB0 n               = qword ptr -90h
.text:000000000000FDB0 var_88          = qword ptr -88h
.text:000000000000FDB0 var_80          = qword ptr -80h
.text:000000000000FDB0 var_78          = qword ptr -78h
.text:000000000000FDB0 var_6C          = dword ptr -6Ch
.text:000000000000FDB0 var_68          = qword ptr -68h
.text:000000000000FDB0 var_60          = qword ptr -60h
.text:000000000000FDB0 var_58          = qword ptr -58h
.text:000000000000FDB0 var_50          = qword ptr -50h
.text:000000000000FDB0 ptr             = qword ptr -48h
.text:000000000000FDB0 var_40          = qword ptr -40h
.text:000000000000FDB0
.text:000000000000FDB0 ; __unwind {
.text:000000000000FDB0                 push    r15
.text:000000000000FDB2                 push    r14
.text:000000000000FDB4                 mov     r14, rdi
.text:000000000000FDB7                 push    r13
.text:000000000000FDB9                 push    r12
.text:000000000000FDBB                 mov     r13, rsi
.text:000000000000FDBE                 push    rbp
.text:000000000000FDBF                 push    rbx
.text:000000000000FDC0                 sub     rsp, 68h
.text:000000000000FDC4                 mov     r15, [rsi+18h]
.text:000000000000FDC8                 mov     rbx, [rsi+10h]
.text:000000000000FDCC                 mov     [rsp+98h+var_98], rdi
.text:000000000000FDD0                 mov     edi, 8          ; size
.text:000000000000FDD5                 mov     [rsp+98h+var_58], 1
.text:000000000000FDDE                 mov     rax, fs:28h
.text:000000000000FDE7                 mov     [rsp+98h+var_40], rax
.text:000000000000FDEC                 xor     eax, eax
.text:000000000000FDEE                 mov     [rsp+98h+var_50], 1
.text:000000000000FDF7                 call    _malloc
.text:000000000000FDFC                 test    rax, rax
.text:000000000000FDFF                 mov     [rsp+98h+ptr], rax
.text:000000000000FE04                 jz      loc_100E4
.text:000000000000FE0A                 lea     rcx, [rsp+98h+var_58]
.text:000000000000FE0F                 mov     [rax], rbx
.text:000000000000FE12                 mov     rdx, r15
.text:000000000000FE15                 mov     rsi, r13
.text:000000000000FE18                 mov     rdi, r14
.text:000000000000FE1B                 mov     [rsp+98h+var_88], rcx
.text:000000000000FE20                 call    update_cur_sifted_state
.text:000000000000FE25                 test    eax, eax
.text:000000000000FE27                 jnz     loc_100B5
.text:000000000000FE2D                 lea     rax, ds:0[r15*8]
.text:000000000000FE35                 test    r15, r15
.text:000000000000FE38                 mov     [rsp+98h+var_6C], 0
.text:000000000000FE40                 mov     [rsp+98h+n], rax
.text:000000000000FE45                 lea     rax, [r13+30h]
.text:000000000000FE49                 mov     [rsp+98h+var_60], rax
.text:000000000000FE4E                 jle     loc_10057
.text:000000000000FE54
.text:000000000000FE54 loc_FE54:                               ; CODE XREF: sift_states_backward+2A1↓j
.text:000000000000FE54                 mov     rdi, [r13+0]    ; s
.text:000000000000FE58                 mov     rax, [rsp+98h+n]
.text:000000000000FE5D                 cmp     qword ptr [rdi+rax], 0
.text:000000000000FE62                 jz      loc_10078
.text:000000000000FE68                 mov     rax, [rsp+98h+var_98]
.text:000000000000FE6C                 mov     [rsp+98h+var_6C], 0
.text:000000000000FE74                 mov     ecx, [rsp+98h+var_6C]
.text:000000000000FE78                 cmp     [rax+0E0h], ecx
.text:000000000000FE7E                 jl      loc_10091
.text:000000000000FE84
.text:000000000000FE84 loc_FE84:                               ; CODE XREF: sift_states_backward+2DB↓j
.text:000000000000FE84                 mov     rbx, [rsp+98h+var_98]
.text:000000000000FE88                 mov     rdi, [rsp+98h+n]
.text:000000000000FE8D                 sub     r15, 1
.text:000000000000FE91                 mov     [rsp+98h+var_50], 0
.text:000000000000FE9A                 mov     rax, [rbx+0B8h]
.text:000000000000FEA1                 mov     r12, [rax+rdi-8]
.text:000000000000FEA6                 test    r12, r12
.text:000000000000FEA9                 jz      loc_10030
.text:000000000000FEAF                 cmp     qword ptr [r12+28h], 0
.text:000000000000FEB5                 mov     r14, [rbx+98h]
.text:000000000000FEBC                 jle     loc_10030
.text:000000000000FEC2                 xor     ebx, ebx
.text:000000000000FEC4                 jmp     loc_FF6B
.text:000000000000FEC4 ; ---------------------------------------------------------------------------
.text:000000000000FEC9                 align 10h
.text:000000000000FED0
.text:000000000000FED0 loc_FED0:                               ; CODE XREF: sift_states_backward+1D5↓j
.text:000000000000FED0                                         ; sift_states_backward+271↓j ...
.text:000000000000FED0                 mov     rdi, [rsp+98h+var_98]
.text:000000000000FED4                 mov     rdx, r15
.text:000000000000FED7                 call    check_node_accept
.text:000000000000FEDC                 test    al, al
.text:000000000000FEDE                 jz      short loc_FF5C
.text:000000000000FEE0                 mov     rax, [r13+0]
.text:000000000000FEE4                 mov     rcx, [rsp+98h+n]
.text:000000000000FEE9                 mov     rax, [rax+rcx]
.text:000000000000FEED                 test    rax, rax
.text:000000000000FEF0                 jz      short loc_FF5C
.text:000000000000FEF2                 mov     rdx, [r14+18h]
.text:000000000000FEF6                 mov     rdi, [rax+10h]
.text:000000000000FEFA                 lea     rsi, [rax+18h]
.text:000000000000FEFE                 mov     rdx, [rdx+rbp*8]
.text:000000000000FF02                 call    re_node_set_contains_isra_3
.text:000000000000FF07                 test    rax, rax
.text:000000000000FF0A                 jz      short loc_FF5C
.text:000000000000FF0C                 mov     r10d, 1
.text:000000000000FF12
.text:000000000000FF12 loc_FF12:                               ; CODE XREF: sift_states_backward+22B↓j
.text:000000000000FF12                                         ; sift_states_backward+260↓j ...
.text:000000000000FF12                 cmp     qword ptr [r13+28h], 0
.text:000000000000FF17                 jz      short loc_FF47
.text:000000000000FF19                 mov     rax, [r14+18h]
.text:000000000000FF1D                 sub     rsp, 8
.text:000000000000FF21                 lea     rsi, [r13+28h]
.text:000000000000FF25                 lea     r8, [r10+r15]
.text:000000000000FF29                 mov     r9, rbp
.text:000000000000FF2C                 mov     rcx, [rax+rbp*8]
.text:000000000000FF30                 push    r15
.text:000000000000FF32                 mov     rdx, [rsp+0A8h+var_60]
.text:000000000000FF37                 mov     rdi, [rsp+0A8h+var_98]
.text:000000000000FF3C                 call    check_dst_limits_isra_13
.text:000000000000FF41                 test    al, al
.text:000000000000FF43                 pop     rdx
.text:000000000000FF44                 pop     rcx
.text:000000000000FF45                 jnz     short loc_FF5C
.text:000000000000FF47
.text:000000000000FF47 loc_FF47:                               ; CODE XREF: sift_states_backward+167↑j
.text:000000000000FF47                 mov     rdi, [rsp+98h+var_88]
.text:000000000000FF4C                 mov     rsi, rbp
.text:000000000000FF4F                 call    re_node_set_insert
.text:000000000000FF54                 test    al, al
.text:000000000000FF56                 jz      loc_100B0
.text:000000000000FF5C
.text:000000000000FF5C loc_FF5C:                               ; CODE XREF: sift_states_backward+12E↑j
.text:000000000000FF5C                                         ; sift_states_backward+140↑j ...
.text:000000000000FF5C                 add     rbx, 1
.text:000000000000FF60                 cmp     rbx, [r12+28h]
.text:000000000000FF65                 jge     loc_10030
.text:000000000000FF6B
.text:000000000000FF6B loc_FF6B:                               ; CODE XREF: sift_states_backward+114↑j
.text:000000000000FF6B                 mov     rax, [r12+30h]
.text:000000000000FF70                 mov     rsi, [r14]
.text:000000000000FF73                 mov     rbp, [rax+rbx*8]
.text:000000000000FF77                 mov     r9, rbp
.text:000000000000FF7A                 shl     r9, 4
.text:000000000000FF7E                 add     rsi, r9
.text:000000000000FF81                 test    byte ptr [rsi+0Ah], 10h
.text:000000000000FF85                 jz      loc_FED0
.text:000000000000FF8B                 mov     rcx, [rsp+98h+var_98]
.text:000000000000FF8F                 mov     rax, [r13+18h]
.text:000000000000FF93                 mov     r8, r15
.text:000000000000FF96                 mov     rdx, rbp
.text:000000000000FF99                 mov     [rsp+98h+var_80], r9
.text:000000000000FF9E                 mov     r11, [rcx+98h]
.text:000000000000FFA5                 mov     [rsp+98h+var_78], rax
.text:000000000000FFAA                 mov     rdi, [r11]
.text:000000000000FFAD                 lea     rsi, [r11+0D8h]
.text:000000000000FFB4                 mov     [rsp+98h+var_68], r11
.text:000000000000FFB9                 call    check_node_accept_bytes_isra_31
.text:000000000000FFBE                 movsxd  r10, eax
.text:000000000000FFC1                 mov     r9, [rsp+98h+var_80]
.text:000000000000FFC6                 cmp     r10d, 0
.text:000000000000FFCA                 jle     loc_10060
.text:000000000000FFD0                 movsxd  rax, r10d
.text:000000000000FFD3                 add     rax, r15
.text:000000000000FFD6                 cmp     [rsp+98h+var_78], rax
.text:000000000000FFDB                 jl      loc_FF12
.text:000000000000FFE1                 mov     rdx, [r13+0]
.text:000000000000FFE5                 mov     r11, [rsp+98h+var_68]
.text:000000000000FFEA                 mov     rax, [rdx+rax*8]
.text:000000000000FFEE                 test    rax, rax
.text:000000000000FFF1                 jz      short loc_10066
.text:000000000000FFF3                 mov     rdx, [r11+18h]
.text:000000000000FFF7                 mov     rdi, [rax+10h]
.text:000000000000FFFB                 lea     rsi, [rax+18h]
.text:000000000000FFFF                 mov     [rsp+98h+var_80], r9
.text:0000000000010004                 mov     rdx, [rdx+rbp*8]
.text:0000000000010008                 call    re_node_set_contains_isra_3
.text:000000000001000D                 test    rax, rax
.text:0000000000010010                 jnz     loc_FF12
.text:0000000000010016                 mov     r9, [rsp+98h+var_80]
.text:000000000001001B                 mov     rsi, [r14]
.text:000000000001001E                 add     rsi, r9
.text:0000000000010021                 jmp     loc_FED0
.text:0000000000010021 ; ---------------------------------------------------------------------------
.text:0000000000010026                 align 10h
.text:0000000000010030
.text:0000000000010030 loc_10030:                              ; CODE XREF: sift_states_backward+F9↑j
.text:0000000000010030                                         ; sift_states_backward+10C↑j ...
.text:0000000000010030                 mov     rcx, [rsp+98h+var_88]
.text:0000000000010035                 mov     rdi, [rsp+98h+var_98]
.text:0000000000010039                 mov     rdx, r15
.text:000000000001003C                 mov     rsi, r13
.text:000000000001003F                 call    update_cur_sifted_state
.text:0000000000010044                 test    eax, eax
.text:0000000000010046                 jnz     short loc_100B5
.text:0000000000010048                 sub     [rsp+98h+n], 8
.text:000000000001004E                 test    r15, r15
.text:0000000000010051                 jnz     loc_FE54
.text:0000000000010057
.text:0000000000010057 loc_10057:                              ; CODE XREF: sift_states_backward+9E↑j
.text:0000000000010057                 xor     eax, eax
.text:0000000000010059                 jmp     short loc_100B5
.text:0000000000010059 ; ---------------------------------------------------------------------------
.text:000000000001005B                 align 20h
.text:0000000000010060
.text:0000000000010060 loc_10060:                              ; CODE XREF: sift_states_backward+21A↑j
.text:0000000000010060                 jnz     loc_FF12
.text:0000000000010066
.text:0000000000010066 loc_10066:                              ; CODE XREF: sift_states_backward+241↑j
.text:0000000000010066                 mov     rsi, [r14]
.text:0000000000010069                 add     rsi, r9
.text:000000000001006C                 jmp     loc_FED0
.text:000000000001006C ; ---------------------------------------------------------------------------
.text:0000000000010071                 align 8
.text:0000000000010078
.text:0000000000010078 loc_10078:                              ; CODE XREF: sift_states_backward+B2↑j
.text:0000000000010078                 mov     rax, [rsp+98h+var_98]
.text:000000000001007C                 add     [rsp+98h+var_6C], 1
.text:0000000000010081                 mov     ecx, [rsp+98h+var_6C]
.text:0000000000010085                 cmp     [rax+0E0h], ecx
.text:000000000001008B                 jge     loc_FE84
.text:0000000000010091
.text:0000000000010091 loc_10091:                              ; CODE XREF: sift_states_backward+CE↑j
.text:0000000000010091                 mov     rdx, [rsp+98h+n] ; n
.text:0000000000010096                 xor     esi, esi        ; c
.text:0000000000010098                 call    _memset
.text:000000000001009D                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:00000000000100A2                 call    _free
.text:00000000000100A7                 xor     eax, eax
.text:00000000000100A9                 jmp     short loc_100C5
.text:00000000000100A9 ; ---------------------------------------------------------------------------
.text:00000000000100AB                 align 10h
.text:00000000000100B0
.text:00000000000100B0 loc_100B0:                              ; CODE XREF: sift_states_backward+1A6↑j
.text:00000000000100B0                 mov     eax, 0Ch
.text:00000000000100B5
.text:00000000000100B5 loc_100B5:                              ; CODE XREF: sift_states_backward+77↑j
.text:00000000000100B5                                         ; sift_states_backward+296↑j ...
.text:00000000000100B5                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:00000000000100BA                 mov     dword ptr [rsp+98h+var_98], eax
.text:00000000000100BD                 call    _free
.text:00000000000100C2                 mov     eax, dword ptr [rsp+98h+var_98]
.text:00000000000100C5
.text:00000000000100C5 loc_100C5:                              ; CODE XREF: sift_states_backward+2F9↑j
.text:00000000000100C5                                         ; sift_states_backward+339↓j
.text:00000000000100C5                 mov     rdx, [rsp+98h+var_40]
.text:00000000000100CA                 xor     rdx, fs:28h
.text:00000000000100D3                 jnz     short loc_100EB
.text:00000000000100D5                 add     rsp, 68h
.text:00000000000100D9                 pop     rbx
.text:00000000000100DA                 pop     rbp
.text:00000000000100DB                 pop     r12
.text:00000000000100DD                 pop     r13
.text:00000000000100DF                 pop     r14
.text:00000000000100E1                 pop     r15
.text:00000000000100E3                 retn
.text:00000000000100E4 ; ---------------------------------------------------------------------------
.text:00000000000100E4
.text:00000000000100E4 loc_100E4:                              ; CODE XREF: sift_states_backward+54↑j
.text:00000000000100E4                 mov     eax, 0Ch
.text:00000000000100E9                 jmp     short loc_100C5
.text:00000000000100EB ; ---------------------------------------------------------------------------
.text:00000000000100EB
.text:00000000000100EB loc_100EB:                              ; CODE XREF: sift_states_backward+323↑j
.text:00000000000100EB                 call    ___stack_chk_fail
.text:00000000000100EB ; } // starts at FDB0
.text:00000000000100EB sift_states_backward endp
.text:00000000000100EB
.text:00000000000100F0
.text:00000000000100F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000100F0
.text:00000000000100F0
.text:00000000000100F0 re_search_internal proc near            ; CODE XREF: re_search_stub+10A↓p
.text:00000000000100F0                                         ; rpl_regexec+58↓p
.text:00000000000100F0
.text:00000000000100F0 var_268         = qword ptr -268h
.text:00000000000100F0 var_260         = qword ptr -260h
.text:00000000000100F0 var_258         = qword ptr -258h
.text:00000000000100F0 var_250         = qword ptr -250h
.text:00000000000100F0 var_248         = qword ptr -248h
.text:00000000000100F0 var_240         = qword ptr -240h
.text:00000000000100F0 var_238         = qword ptr -238h
.text:00000000000100F0 var_230         = qword ptr -230h
.text:00000000000100F0 var_228         = qword ptr -228h
.text:00000000000100F0 var_220         = qword ptr -220h
.text:00000000000100F0 var_218         = qword ptr -218h
.text:00000000000100F0 var_210         = dword ptr -210h
.text:00000000000100F0 var_20C         = dword ptr -20Ch
.text:00000000000100F0 var_208         = qword ptr -208h
.text:00000000000100F0 var_200         = qword ptr -200h
.text:00000000000100F0 var_1F8         = qword ptr -1F8h
.text:00000000000100F0 var_1F0         = qword ptr -1F0h
.text:00000000000100F0 var_1E8         = qword ptr -1E8h
.text:00000000000100F0 var_1E0         = qword ptr -1E0h
.text:00000000000100F0 var_1D8         = qword ptr -1D8h
.text:00000000000100F0 var_1D0         = qword ptr -1D0h
.text:00000000000100F0 var_1C8         = qword ptr -1C8h
.text:00000000000100F0 var_1C0         = dword ptr -1C0h
.text:00000000000100F0 var_1BC         = dword ptr -1BCh
.text:00000000000100F0 var_1B8         = qword ptr -1B8h
.text:00000000000100F0 var_1B0         = qword ptr -1B0h
.text:00000000000100F0 var_1A8         = qword ptr -1A8h
.text:00000000000100F0 var_1A0         = dword ptr -1A0h
.text:00000000000100F0 var_19A         = byte ptr -19Ah
.text:00000000000100F0 var_199         = byte ptr -199h
.text:00000000000100F0 var_198         = dword ptr -198h
.text:00000000000100F0 var_194         = dword ptr -194h
.text:00000000000100F0 var_190         = qword ptr -190h
.text:00000000000100F0 var_188         = xmmword ptr -188h
.text:00000000000100F0 var_178         = qword ptr -178h
.text:00000000000100F0 var_170         = qword ptr -170h
.text:00000000000100F0 var_168         = xmmword ptr -168h
.text:00000000000100F0 ptr             = qword ptr -158h
.text:00000000000100F0 var_148         = qword ptr -148h
.text:00000000000100F0 var_140         = qword ptr -140h
.text:00000000000100F0 var_138         = qword ptr -138h
.text:00000000000100F0 var_130         = qword ptr -130h
.text:00000000000100F0 var_120         = qword ptr -120h
.text:00000000000100F0 var_118         = qword ptr -118h
.text:00000000000100F0 var_110         = qword ptr -110h
.text:00000000000100F0 var_108         = qword ptr -108h
.text:00000000000100F0 var_100         = qword ptr -100h
.text:00000000000100F0 var_F8          = qword ptr -0F8h
.text:00000000000100F0 var_F0          = qword ptr -0F0h
.text:00000000000100F0 var_E8          = qword ptr -0E8h
.text:00000000000100F0 var_E0          = qword ptr -0E0h
.text:00000000000100F0 var_D8          = dword ptr -0D8h
.text:00000000000100F0 var_D0          = qword ptr -0D0h
.text:00000000000100F0 var_C8          = qword ptr -0C8h
.text:00000000000100F0 var_C0          = byte ptr -0C0h
.text:00000000000100F0 var_BF          = byte ptr -0BFh
.text:00000000000100F0 var_BE          = byte ptr -0BEh
.text:00000000000100F0 var_BD          = byte ptr -0BDh
.text:00000000000100F0 var_BC          = byte ptr -0BCh
.text:00000000000100F0 var_BB          = byte ptr -0BBh
.text:00000000000100F0 var_BA          = byte ptr -0BAh
.text:00000000000100F0 var_B8          = dword ptr -0B8h
.text:00000000000100F0 var_B0          = qword ptr -0B0h
.text:00000000000100F0 var_A8          = dword ptr -0A8h
.text:00000000000100F0 var_A0          = qword ptr -0A0h
.text:00000000000100F0 var_98          = qword ptr -98h
.text:00000000000100F0 var_90          = qword ptr -90h
.text:00000000000100F0 var_88          = qword ptr -88h
.text:00000000000100F0 var_80          = qword ptr -80h
.text:00000000000100F0 var_78          = qword ptr -78h
.text:00000000000100F0 var_70          = qword ptr -70h
.text:00000000000100F0 var_68          = dword ptr -68h
.text:00000000000100F0 var_58          = qword ptr -58h
.text:00000000000100F0 var_50          = qword ptr -50h
.text:00000000000100F0 var_40          = qword ptr -40h
.text:00000000000100F0 arg_0           = qword ptr  8
.text:00000000000100F0 arg_8           = qword ptr  10h
.text:00000000000100F0 arg_10          = dword ptr  18h
.text:00000000000100F0
.text:00000000000100F0 ; __unwind {
.text:00000000000100F0                 push    r15
.text:00000000000100F2                 push    r14
.text:00000000000100F4                 push    r13
.text:00000000000100F6                 push    r12
.text:00000000000100F8                 mov     r13, r9
.text:00000000000100FB                 push    rbp
.text:00000000000100FC                 push    rbx
.text:00000000000100FD                 mov     rbp, rcx
.text:0000000000010100                 mov     ecx, 20h ; ' '
.text:0000000000010105                 mov     r12, r8
.text:0000000000010108                 sub     rsp, 238h
.text:000000000001010F                 mov     rbx, [rdi]
.text:0000000000010112                 mov     rax, [rsp+268h+arg_8]
.text:000000000001011A                 mov     [rsp+268h+var_220], rdi
.text:000000000001011F                 mov     [rsp+268h+var_1F0], rsi
.text:0000000000010124                 mov     rsi, rdi
.text:0000000000010127                 lea     rdi, [rsp+268h+var_148]
.text:000000000001012F                 mov     [rsp+268h+var_1E0], rdx
.text:0000000000010137                 mov     [rsp+268h+var_230], rbx
.text:000000000001013C                 mov     [rsp+268h+var_1B0], rax
.text:0000000000010144                 mov     [rsp+268h+var_268], rdi
.text:0000000000010148                 mov     rax, fs:28h
.text:0000000000010151                 mov     [rsp+268h+var_40], rax
.text:0000000000010159                 xor     eax, eax
.text:000000000001015B                 rep stosq
.text:000000000001015E                 mov     rdi, [rsi+20h]
.text:0000000000010162                 mov     [rsp+268h+var_B0], rbx
.text:000000000001016A                 test    rdi, rdi
.text:000000000001016D                 mov     [rsp+268h+var_200], rdi
.text:0000000000010172                 jz      short loc_10196
.text:0000000000010174                 movzx   edx, byte ptr [rsi+38h]
.text:0000000000010178                 test    dl, 8
.text:000000000001017B                 jz      loc_10610
.text:0000000000010181                 cmp     rbp, r8
.text:0000000000010184                 jz      loc_10610
.text:000000000001018A                 and     edx, 1
.text:000000000001018D                 cmovz   rax, rdi
.text:0000000000010191                 mov     [rsp+268h+var_200], rax
.text:0000000000010196
.text:0000000000010196 loc_10196:                              ; CODE XREF: re_search_internal+82↑j
.text:0000000000010196                                         ; re_search_internal+529↓j
.text:0000000000010196                 mov     rax, [rsp+268h+var_220]
.text:000000000001019B                 mov     [rsp+268h+var_1D0], 0
.text:00000000000101A7                 mov     rax, [rax+30h]
.text:00000000000101AB                 cmp     rax, [rsp+268h+arg_0]
.text:00000000000101B3                 jnb     short loc_101D4
.text:00000000000101B5                 mov     rcx, [rsp+268h+arg_0]
.text:00000000000101BD                 lea     rdx, [rcx-1]
.text:00000000000101C1                 sub     rdx, rax
.text:00000000000101C4                 sub     [rsp+268h+arg_0], rdx
.text:00000000000101CC                 mov     [rsp+268h+var_1D0], rdx
.text:00000000000101D4
.text:00000000000101D4 loc_101D4:                              ; CODE XREF: re_search_internal+C3↑j
.text:00000000000101D4                 mov     rsi, [rsp+268h+var_220]
.text:00000000000101D9                 cmp     qword ptr [rsi+10h], 0
.text:00000000000101DE                 jz      loc_11070
.text:00000000000101E4                 mov     rdi, [rsp+268h+var_230]
.text:00000000000101E9                 mov     rax, [rdi+48h]
.text:00000000000101ED                 test    rax, rax
.text:00000000000101F0                 jz      loc_11070
.text:00000000000101F6                 mov     rdx, [rdi+50h]
.text:00000000000101FA                 test    rdx, rdx
.text:00000000000101FD                 jz      loc_11070
.text:0000000000010203                 mov     rcx, [rdi+58h]
.text:0000000000010207                 test    rcx, rcx
.text:000000000001020A                 jz      loc_11070
.text:0000000000010210                 cmp     qword ptr [rdi+60h], 0
.text:0000000000010215                 jz      loc_11070
.text:000000000001021B                 cmp     qword ptr [rax+10h], 0
.text:0000000000010220                 jnz     short loc_10258
.text:0000000000010222                 cmp     qword ptr [rdx+10h], 0
.text:0000000000010227                 jnz     short loc_10258
.text:0000000000010229                 cmp     qword ptr [rcx+10h], 0
.text:000000000001022E                 jz      short loc_10236
.text:0000000000010230                 cmp     byte ptr [rsi+38h], 0
.text:0000000000010234                 js      short loc_10258
.text:0000000000010236
.text:0000000000010236 loc_10236:                              ; CODE XREF: re_search_internal+13E↑j
.text:0000000000010236                 test    rbp, rbp
.text:0000000000010239                 jz      short loc_1024C
.text:000000000001023B                 test    r12, r12
.text:000000000001023E                 mov     [rsp+268h+var_20C], 1
.text:0000000000010246                 jnz     loc_10C69
.text:000000000001024C
.text:000000000001024C loc_1024C:                              ; CODE XREF: re_search_internal+149↑j
.text:000000000001024C                 xor     r12d, r12d
.text:000000000001024F                 xor     ebp, ebp
.text:0000000000010251                 nop     dword ptr [rax+00000000h]
.text:0000000000010258
.text:0000000000010258 loc_10258:                              ; CODE XREF: re_search_internal+130↑j
.text:0000000000010258                                         ; re_search_internal+137↑j ...
.text:0000000000010258                 cmp     [rsp+268h+arg_0], 0
.text:0000000000010261                 mov     [rsp+268h+var_210], 1
.text:0000000000010269                 jz      loc_105F0
.text:000000000001026F
.text:000000000001026F loc_1026F:                              ; CODE XREF: re_search_internal+517↓j
.text:000000000001026F                 mov     r11, [rsp+268h+var_230]
.text:0000000000010274                 mov     rax, [rsp+268h+var_220]
.text:0000000000010279                 mov     rdi, [rsp+268h+var_1E0]
.text:0000000000010281                 mov     rsi, [r11+10h]
.text:0000000000010285                 mov     rbx, [rax+28h]
.text:0000000000010289                 mov     edx, [r11+0B4h]
.text:0000000000010290                 mov     rax, [rax+18h]
.text:0000000000010294                 mov     [rsp+268h+var_F0], rdi
.text:000000000001029C                 mov     [rsp+268h+var_F8], rdi
.text:00000000000102A4                 mov     [rsp+268h+var_260], rsi
.text:00000000000102A9                 lea     rsi, [rsi+1]
.text:00000000000102AD                 mov     [rsp+268h+var_1B8], rbx
.text:00000000000102B5                 movsxd  rcx, edx
.text:00000000000102B8                 shr     rax, 16h
.text:00000000000102BC                 mov     [rsp+268h+var_D0], rbx
.text:00000000000102C4                 and     eax, 1
.text:00000000000102C7                 cmp     rsi, rcx
.text:00000000000102CA                 mov     [rsp+268h+var_B8], edx
.text:00000000000102D1                 cmovl   rsi, rcx
.text:00000000000102D5                 lea     rcx, [rdi+1]
.text:00000000000102D9                 mov     [rsp+268h+var_C0], al
.text:00000000000102E0                 mov     [rsp+268h+var_E0], rdi
.text:00000000000102E8                 mov     [rsp+268h+var_E8], rdi
.text:00000000000102F0                 cmp     rsi, rcx
.text:00000000000102F3                 mov     rdi, [rsp+268h+var_268]
.text:00000000000102F7                 cmovg   rsi, rcx
.text:00000000000102FB                 test    rbx, rbx
.text:00000000000102FE                 mov     rcx, [rsp+268h+var_1F0]
.text:0000000000010303                 setnz   bl
.text:0000000000010306                 or      eax, ebx
.text:0000000000010308                 mov     [rsp+268h+var_BD], al
.text:000000000001030F                 movzx   eax, byte ptr [r11+0B0h]
.text:0000000000010317                 mov     [rsp+268h+var_148], rcx
.text:000000000001031F                 mov     edx, eax
.text:0000000000010321                 shr     al, 3
.text:0000000000010324                 shr     dl, 2
.text:0000000000010327                 and     eax, 1
.text:000000000001032A                 and     edx, 1
.text:000000000001032D                 mov     [rsp+268h+var_BE], al
.text:0000000000010334                 mov     [rsp+268h+var_BF], dl
.text:000000000001033B                 call    re_string_realloc_buffers
.text:0000000000010340                 test    eax, eax
.text:0000000000010342                 mov     [rsp+268h+var_20C], eax
.text:0000000000010346                 jnz     loc_10C40
.text:000000000001034C                 mov     rdi, [rsp+268h+var_230]
.text:0000000000010351                 lea     rax, [rdi+0B8h]
.text:0000000000010358                 mov     [rsp+268h+var_C8], rax
.text:0000000000010360                 movzx   eax, byte ptr [rdi+0B0h]
.text:0000000000010367                 mov     byte ptr [rsp+268h+var_260], al
.text:000000000001036B                 shr     al, 4
.text:000000000001036E                 and     eax, 1
.text:0000000000010371                 cmp     [rsp+268h+var_BD], 0
.text:0000000000010379                 mov     [rsp+268h+var_BA], al
.text:0000000000010380                 jnz     short loc_103A5
.text:0000000000010382                 mov     rsi, [rsp+268h+var_230]
.text:0000000000010387                 mov     rax, [rsp+268h+var_1F0]
.text:000000000001038C                 cmp     dword ptr [rsi+0B4h], 1
.text:0000000000010393                 mov     [rsp+268h+var_140], rax
.text:000000000001039B                 mov     rax, [rsp+268h+var_1E0]
.text:00000000000103A3                 jle     short loc_103A7
.text:00000000000103A5
.text:00000000000103A5 loc_103A5:                              ; CODE XREF: re_search_internal+290↑j
.text:00000000000103A5                 xor     eax, eax
.text:00000000000103A7
.text:00000000000103A7 loc_103A7:                              ; CODE XREF: re_search_internal+2B3↑j
.text:00000000000103A7                 mov     [rsp+268h+var_118], rax
.text:00000000000103AF                 mov     [rsp+268h+var_110], rax
.text:00000000000103B7                 mov     rax, [rsp+268h+var_220]
.text:00000000000103BC                 mov     [rsp+268h+var_E0], r13
.text:00000000000103C4                 mov     [rsp+268h+var_E8], r13
.text:00000000000103CC                 movzx   eax, byte ptr [rax+38h]
.text:00000000000103D0                 mov     byte ptr [rsp+268h+var_260], al
.text:00000000000103D4                 shr     al, 7
.text:00000000000103D7                 mov     [rsp+268h+var_BB], al
.text:00000000000103DE                 mov     rax, [rsp+268h+var_230]
.text:00000000000103E3                 mov     r14, [rax+98h]
.text:00000000000103EA                 mov     eax, [rsp+268h+arg_10]
.text:00000000000103F1                 mov     [rsp+268h+var_A0], 0FFFFFFFFFFFFFFFFh
.text:00000000000103FD                 lea     r13, [r14+r14]
.text:0000000000010401                 mov     [rsp+268h+var_A8], eax
.text:0000000000010408                 test    r13, r13
.text:000000000001040B                 jle     short loc_1045F
.text:000000000001040D                 mov     rax, 666666666666666h
.text:0000000000010417                 cmp     r13, rax
.text:000000000001041A                 jg      loc_11160
.text:0000000000010420                 lea     rdi, [r13+r14*8+0]
.text:0000000000010425                 shl     rdi, 3          ; size
.text:0000000000010429                 call    _malloc
.text:000000000001042E                 mov     rdi, r14
.text:0000000000010431                 mov     r15, rax
.text:0000000000010434                 mov     [rsp+268h+var_70], rax
.text:000000000001043C                 shl     rdi, 4          ; size
.text:0000000000010440                 call    _malloc
.text:0000000000010445                 test    rax, rax
.text:0000000000010448                 mov     [rsp+268h+var_50], rax
.text:0000000000010450                 jz      loc_11160
.text:0000000000010456                 test    r15, r15
.text:0000000000010459                 jz      loc_11160
.text:000000000001045F
.text:000000000001045F loc_1045F:                              ; CODE XREF: re_search_internal+31B↑j
.text:000000000001045F                 cmp     [rsp+268h+arg_0], 1
.text:0000000000010468                 mov     [rsp+268h+var_78], r13
.text:0000000000010470                 mov     [rsp+268h+var_68], 1
.text:000000000001047B                 mov     [rsp+268h+var_58], r13
.text:0000000000010483                 jbe     loc_115A8
.text:0000000000010489
.text:0000000000010489 loc_10489:                              ; CODE XREF: re_search_internal+14C4↓j
.text:0000000000010489                 mov     rax, [rsp+268h+var_108]
.text:0000000000010491                 mov     rdx, 1FFFFFFFFFFFFFFEh
.text:000000000001049B                 cmp     rax, rdx
.text:000000000001049E                 ja      loc_11160
.text:00000000000104A4                 lea     rdi, ds:8[rax*8] ; size
.text:00000000000104AC                 call    _malloc
.text:00000000000104B1                 test    rax, rax
.text:00000000000104B4                 mov     rdi, rax
.text:00000000000104B7                 mov     [rsp+268h+var_90], rax
.text:00000000000104BF                 jz      loc_111B0
.text:00000000000104C5
.text:00000000000104C5 loc_104C5:                              ; CODE XREF: re_search_internal+14D6↓j
.text:00000000000104C5                 mov     eax, [rsp+268h+arg_10]
.text:00000000000104CC                 mov     [rsp+268h+var_190], rbp
.text:00000000000104D4                 and     eax, 1
.text:00000000000104D7                 cmp     eax, 1
.text:00000000000104DA                 sbb     eax, eax
.text:00000000000104DC                 and     eax, 2
.text:00000000000104DF                 add     eax, 4
.text:00000000000104E2                 mov     [rsp+268h+var_D8], eax
.text:00000000000104E9                 xor     eax, eax
.text:00000000000104EB                 cmp     rbp, r12
.text:00000000000104EE                 setle   al
.text:00000000000104F1                 lea     eax, [rax+rax-1]
.text:00000000000104F5                 mov     [rsp+268h+var_1BC], eax
.text:00000000000104FC                 mov     rax, r12
.text:00000000000104FF                 cmovle  rax, rbp
.text:0000000000010503                 mov     [rsp+268h+var_1D8], rax
.text:000000000001050B                 mov     rax, r12
.text:000000000001050E                 cmovge  rax, rbp
.text:0000000000010512                 cmp     [rsp+268h+var_200], 0
.text:0000000000010518                 mov     [rsp+268h+var_1F8], rax
.text:000000000001051D                 mov     rax, [rsp+268h+var_230]
.text:0000000000010522                 mov     esi, [rax+0B4h]
.text:0000000000010528                 mov     eax, 8
.text:000000000001052D                 mov     [rsp+268h+var_1A0], esi
.text:0000000000010534                 jz      short loc_1056F
.text:0000000000010536                 cmp     esi, 1
.text:0000000000010539                 mov     ecx, 4
.text:000000000001053E                 jz      short loc_1055E
.text:0000000000010540                 mov     rax, [rsp+268h+var_220]
.text:0000000000010545                 test    byte ptr [rax+1Ah], 40h
.text:0000000000010549                 jnz     loc_112CE
.text:000000000001054F                 cmp     [rsp+268h+var_1B8], 0
.text:0000000000010558                 jnz     loc_112CE
.text:000000000001055E
.text:000000000001055E loc_1055E:                              ; CODE XREF: re_search_internal+44E↑j
.text:000000000001055E                                         ; re_search_internal+11E0↓j
.text:000000000001055E                 xor     edx, edx
.text:0000000000010560                 cmp     rbp, r12
.text:0000000000010563                 movzx   eax, bl
.text:0000000000010566                 setle   dl
.text:0000000000010569                 or      eax, ecx
.text:000000000001056B                 add     edx, edx
.text:000000000001056D                 or      eax, edx
.text:000000000001056F
.text:000000000001056F loc_1056F:                              ; CODE XREF: re_search_internal+444↑j
.text:000000000001056F                 cmp     rbp, [rsp+268h+var_1F8]
.text:0000000000010574                 setnle  cl
.text:0000000000010577                 cmp     rbp, [rsp+268h+var_1D8]
.text:000000000001057F                 setl    dl
.text:0000000000010582                 or      cl, dl
.text:0000000000010584                 jnz     loc_11059
.text:000000000001058A                 lea     rcx, [rsp+268h+var_190]
.text:0000000000010592                 cmp     rbp, r12
.text:0000000000010595                 mov     edx, 0
.text:000000000001059A                 cmovle  rdx, rcx
.text:000000000001059E                 test    rdx, rdx
.text:00000000000105A1                 mov     [rsp+268h+var_1A8], rdx
.text:00000000000105A9                 setnz   [rsp+268h+var_199]
.text:00000000000105B1                 sub     eax, 4
.text:00000000000105B4                 mov     [rsp+268h+var_1C0], eax
.text:00000000000105BB                 lea     rax, [rsp+268h+var_198]
.text:00000000000105C3                 mov     [rsp+268h+var_240], rax
.text:00000000000105C8
.text:00000000000105C8 loc_105C8:                              ; CODE XREF: re_search_internal+F63↓j
.text:00000000000105C8                 mov     eax, [rsp+268h+var_1C0]
.text:00000000000105CF                 cmp     eax, 4          ; switch 5 cases
.text:00000000000105D2                 ja      def_105E6       ; jumptable 00000000000105E6 default case
.text:00000000000105D8                 lea     rcx, jpt_105E6
.text:00000000000105DF                 movsxd  rax, ds:(jpt_105E6 - 17760h)[rcx+rax*4]
.text:00000000000105E3                 add     rax, rcx
.text:00000000000105E6                 jmp     rax             ; switch jump
.text:00000000000105E6 ; ---------------------------------------------------------------------------
.text:00000000000105E8                 align 10h
.text:00000000000105F0
.text:00000000000105F0 loc_105F0:                              ; CODE XREF: re_search_internal+179↑j
.text:00000000000105F0                 mov     rax, [rsp+268h+var_230]
.text:00000000000105F5                 cmp     qword ptr [rax+98h], 0
.text:00000000000105FD                 setnz   al
.text:0000000000010600                 movzx   eax, al
.text:0000000000010603                 mov     [rsp+268h+var_210], eax
.text:0000000000010607                 jmp     loc_1026F
.text:0000000000010607 ; ---------------------------------------------------------------------------
.text:000000000001060C                 align 10h
.text:0000000000010610
.text:0000000000010610 loc_10610:                              ; CODE XREF: re_search_internal+8B↑j
.text:0000000000010610                                         ; re_search_internal+94↑j
.text:0000000000010610                 mov     [rsp+268h+var_200], 0
.text:0000000000010619                 jmp     loc_10196
.text:000000000001061E ; ---------------------------------------------------------------------------
.text:000000000001061E
.text:000000000001061E loc_1061E:                              ; CODE XREF: re_search_internal+4F6↑j
.text:000000000001061E                                         ; DATA XREF: .rodata:jpt_105E6↓o
.text:000000000001061E                 cmp     [rsp+268h+var_1F8], rbp ; jumptable 00000000000105E6 case 2
.text:0000000000010623                 jle     short loc_1067F
.text:0000000000010625                 mov     rax, [rsp+268h+var_1F0]
.text:000000000001062A                 mov     rdi, [rsp+268h+var_200]
.text:000000000001062F                 movzx   edx, byte ptr [rax+rbp]
.text:0000000000010633                 lea     rax, [rbp+1]
.text:0000000000010637                 cmp     byte ptr [rdi+rdx], 0
.text:000000000001063B                 jnz     loc_106C8       ; jumptable 00000000000105E6 case 4
.text:0000000000010641                 mov     rsi, [rsp+268h+var_200]
.text:0000000000010646                 mov     rcx, [rsp+268h+var_1F8]
.text:000000000001064B                 mov     rdi, [rsp+268h+var_1F0]
.text:0000000000010650                 jmp     short loc_1066A
.text:0000000000010650 ; ---------------------------------------------------------------------------
.text:0000000000010652                 align 8
.text:0000000000010658
.text:0000000000010658 loc_10658:                              ; CODE XREF: re_search_internal+580↓j
.text:0000000000010658                 movzx   edx, byte ptr [rdi+rax]
.text:000000000001065C                 lea     rax, [rax+1]
.text:0000000000010660                 cmp     byte ptr [rsi+rdx], 0
.text:0000000000010664                 jnz     loc_11801
.text:000000000001066A
.text:000000000001066A loc_1066A:                              ; CODE XREF: re_search_internal+560↑j
.text:000000000001066A                 cmp     rcx, rax
.text:000000000001066D                 mov     rbp, rax
.text:0000000000010670                 jnz     short loc_10658
.text:0000000000010672
.text:0000000000010672 loc_10672:                              ; CODE XREF: re_search_internal+ABF↓j
.text:0000000000010672                 mov     rax, [rsp+268h+var_1F8]
.text:0000000000010677                 mov     [rsp+268h+var_190], rax
.text:000000000001067F
.text:000000000001067F loc_1067F:                              ; CODE XREF: re_search_internal+533↑j
.text:000000000001067F                                         ; re_search_internal+A57↓j
.text:000000000001067F                 cmp     [rsp+268h+var_1F8], rbp
.text:0000000000010684                 jnz     short loc_106C8 ; jumptable 00000000000105E6 case 4
.text:0000000000010686                 xor     eax, eax
.text:0000000000010688                 mov     rsi, [rsp+268h+var_1F8]
.text:000000000001068D                 cmp     [rsp+268h+var_1E0], rsi
.text:0000000000010695                 jle     short loc_106A0
.text:0000000000010697                 mov     rax, [rsp+268h+var_1F0]
.text:000000000001069C                 movzx   eax, byte ptr [rax+rsi]
.text:00000000000106A0
.text:00000000000106A0 loc_106A0:                              ; CODE XREF: re_search_internal+5A5↑j
.text:00000000000106A0                 mov     rsi, [rsp+268h+var_1B8]
.text:00000000000106A8                 test    rsi, rsi
.text:00000000000106AB                 jz      short loc_106B1
.text:00000000000106AD                 movzx   eax, byte ptr [rsi+rax]
.text:00000000000106B1
.text:00000000000106B1 loc_106B1:                              ; CODE XREF: re_search_internal+5BB↑j
.text:00000000000106B1                 mov     rdi, [rsp+268h+var_200]
.text:00000000000106B6                 cmp     byte ptr [rdi+rax], 0
.text:00000000000106BA                 jz      loc_11059
.text:00000000000106C0                 mov     rbp, [rsp+268h+var_1F8]
.text:00000000000106C5                 nop     dword ptr [rax]
.text:00000000000106C8
.text:00000000000106C8 loc_106C8:                              ; CODE XREF: re_search_internal+4F6↑j
.text:00000000000106C8                                         ; re_search_internal+54B↑j ...
.text:00000000000106C8                 mov     edx, [rsp+268h+arg_10] ; jumptable 00000000000105E6 case 4
.text:00000000000106CF                 mov     rdi, [rsp+268h+var_268]
.text:00000000000106D3                 mov     rsi, rbp
.text:00000000000106D6                 call    re_string_reconstruct
.text:00000000000106DB                 test    eax, eax
.text:00000000000106DD                 mov     [rsp+268h+var_20C], eax
.text:00000000000106E1                 jnz     loc_10C40
.text:00000000000106E7                 cmp     [rsp+268h+var_1A0], 1
.text:00000000000106EF                 jz      short loc_1070D
.text:00000000000106F1                 cmp     [rsp+268h+var_118], 0
.text:00000000000106FA                 jz      short loc_1070D
.text:00000000000106FC                 mov     rax, [rsp+268h+var_138]
.text:0000000000010704                 cmp     dword ptr [rax], 0FFFFFFFFh
.text:0000000000010707                 jz      loc_11031
.text:000000000001070D
.text:000000000001070D loc_1070D:                              ; CODE XREF: re_search_internal+5FF↑j
.text:000000000001070D                                         ; re_search_internal+60A↑j
.text:000000000001070D                 mov     rbx, [rsp+268h+var_B0]
.text:0000000000010715                 movzx   eax, byte ptr [rsp+268h+var_210]
.text:000000000001071A                 mov     [rsp+268h+var_68], 0
.text:0000000000010725                 mov     [rsp+268h+var_80], 0
.text:0000000000010731                 mov     [rsp+268h+var_88], 0
.text:000000000001073D                 mov     [rsp+268h+var_198], 0
.text:0000000000010748                 mov     r14, [rbx+48h]
.text:000000000001074C                 and     eax, 1
.text:000000000001074F                 mov     [rsp+268h+var_19A], al
.text:0000000000010756                 mov     rax, [rsp+268h+var_100]
.text:000000000001075E                 cmp     byte ptr [r14+68h], 0
.text:0000000000010763                 mov     [rsp+268h+var_260], rax
.text:0000000000010768                 js      loc_110E0
.text:000000000001076E
.text:000000000001076E loc_1076E:                              ; CODE XREF: re_search_internal+1013↓j
.text:000000000001076E                                         ; re_search_internal+1177↓j ...
.text:000000000001076E                 mov     rax, [rsp+268h+var_90]
.text:0000000000010776                 test    rax, rax
.text:0000000000010779                 jz      short loc_10792
.text:000000000001077B                 cmp     qword ptr [rbx+98h], 0
.text:0000000000010783                 mov     rdi, [rsp+268h+var_260]
.text:0000000000010788                 mov     [rax+rdi*8], r14
.text:000000000001078C                 jnz     loc_1167B
.text:0000000000010792
.text:0000000000010792 loc_10792:                              ; CODE XREF: re_search_internal+689↑j
.text:0000000000010792                 movzx   eax, [rsp+268h+var_199]
.text:000000000001079A                 mov     byte ptr [rsp+268h+var_250], al
.text:000000000001079E                 movzx   eax, byte ptr [r14+68h]
.text:00000000000107A3
.text:00000000000107A3 loc_107A3:                              ; CODE XREF: re_search_internal+15C1↓j
.text:00000000000107A3                 test    al, 10h
.text:00000000000107A5                 mov     [rsp+268h+var_248], 0FFFFFFFFFFFFFFFFh
.text:00000000000107AE                 mov     [rsp+268h+var_238], 0
.text:00000000000107B7                 jnz     loc_11640
.text:00000000000107BD
.text:00000000000107BD loc_107BD:                              ; CODE XREF: re_search_internal+1576↓j
.text:00000000000107BD                                         ; re_search_internal+15E4↓j
.text:00000000000107BD                 mov     rax, [rsp+268h+var_1A8]
.text:00000000000107C5                 mov     r8, [rsp+268h+var_100]
.text:00000000000107CD                 mov     [rsp+268h+var_218], rax
.text:00000000000107D2                 lea     rax, [rsp+268h+var_188]
.text:00000000000107DA                 mov     [rsp+268h+var_208], rax
.text:00000000000107DF                 lea     rax, [rsp+268h+var_194]
.text:00000000000107E7                 mov     [rsp+268h+var_1E8], rax
.text:00000000000107EF                 jmp     short loc_1084C
.text:00000000000107EF ; ---------------------------------------------------------------------------
.text:00000000000107F1                 align 8
.text:00000000000107F8
.text:00000000000107F8 loc_107F8:                              ; CODE XREF: re_search_internal+7E7↓j
.text:00000000000107F8                                         ; re_search_internal+1513↓j ...
.text:00000000000107F8                 cmp     r14, r13
.text:00000000000107FB                 mov     r8, [rsp+268h+var_100]
.text:0000000000010803                 setz    al
.text:0000000000010806                 and     byte ptr [rsp+268h+var_250], al
.text:000000000001080A                 movzx   eax, byte ptr [r13+68h]
.text:000000000001080F                 cmovz   rbx, [rsp+268h+var_260]
.text:0000000000010815                 test    al, 10h
.text:0000000000010817                 mov     [rsp+268h+var_260], rbx
.text:000000000001081C                 jz      short loc_10849
.text:000000000001081E                 test    al, al
.text:0000000000010820                 js      loc_10CE0
.text:0000000000010826
.text:0000000000010826 loc_10826:                              ; CODE XREF: re_search_internal+C17↓j
.text:0000000000010826                 mov     eax, [rsp+268h+var_210]
.text:000000000001082A                 mov     [rsp+268h+var_248], r8
.text:000000000001082F                 test    eax, eax
.text:0000000000010831                 jz      loc_10956
.text:0000000000010837                 mov     [rsp+268h+var_238], 1
.text:0000000000010840                 mov     [rsp+268h+var_218], 0
.text:0000000000010849
.text:0000000000010849 loc_10849:                              ; CODE XREF: re_search_internal+72C↑j
.text:0000000000010849                                         ; re_search_internal+C11↓j
.text:0000000000010849                 mov     r14, r13
.text:000000000001084C
.text:000000000001084C loc_1084C:                              ; CODE XREF: re_search_internal+6FF↑j
.text:000000000001084C                 cmp     [rsp+268h+var_E0], r8
.text:0000000000010854                 jle     loc_10944
.text:000000000001085A                 mov     rax, [rsp+268h+var_108]
.text:0000000000010862                 lea     rbx, [r8+1]
.text:0000000000010866                 cmp     rbx, rax
.text:0000000000010869                 jge     loc_10D10
.text:000000000001086F
.text:000000000001086F loc_1086F:                              ; CODE XREF: re_search_internal+C28↓j
.text:000000000001086F                 mov     rax, [rsp+268h+var_118]
.text:0000000000010877                 cmp     rbx, rax
.text:000000000001087A                 jge     loc_11000
.text:0000000000010880
.text:0000000000010880 loc_10880:                              ; CODE XREF: re_search_internal+F18↓j
.text:0000000000010880                 test    byte ptr [r14+68h], 20h
.text:0000000000010885                 jnz     loc_10D50
.text:000000000001088B
.text:000000000001088B loc_1088B:                              ; CODE XREF: re_search_internal+C56↓j
.text:000000000001088B                                         ; re_search_internal+FA6↓j
.text:000000000001088B                 lea     rax, [r8+1]
.text:000000000001088F                 mov     [rsp+268h+var_100], rax
.text:0000000000010897                 mov     rax, [rsp+268h+var_140]
.text:000000000001089F                 movzx   r13d, byte ptr [rax+r8]
.text:00000000000108A4
.text:00000000000108A4 loc_108A4:                              ; CODE XREF: re_search_internal+1097↓j
.text:00000000000108A4                 mov     rax, [r14+58h]
.text:00000000000108A8                 test    rax, rax
.text:00000000000108AB                 jz      loc_10FC0
.text:00000000000108B1                 mov     r13, [rax+r13*8]
.text:00000000000108B5
.text:00000000000108B5 loc_108B5:                              ; CODE XREF: re_search_internal+F09↓j
.text:00000000000108B5                                         ; re_search_internal+FB5↓j
.text:00000000000108B5                 cmp     [rsp+268h+var_90], 0
.text:00000000000108BE                 jz      short loc_108D4
.text:00000000000108C0
.text:00000000000108C0 loc_108C0:                              ; CODE XREF: re_search_internal+FE3↓j
.text:00000000000108C0                 mov     rsi, [rsp+268h+var_268]
.text:00000000000108C4                 mov     rdi, [rsp+268h+var_240]
.text:00000000000108C9                 mov     rdx, r13
.text:00000000000108CC                 call    merge_state_with_log
.text:00000000000108D1                 mov     r13, rax
.text:00000000000108D4
.text:00000000000108D4 loc_108D4:                              ; CODE XREF: re_search_internal+7CE↑j
.text:00000000000108D4                 test    r13, r13
.text:00000000000108D7                 jnz     loc_107F8
.text:00000000000108DD                 mov     ecx, [rsp+268h+var_198]
.text:00000000000108E4                 mov     rdi, [rsp+268h+var_90]
.text:00000000000108EC                 test    ecx, ecx
.text:00000000000108EE                 jnz     loc_111B0
.text:00000000000108F4                 test    rdi, rdi
.text:00000000000108F7                 jz      short loc_10944
.text:00000000000108F9                 movzx   eax, [rsp+268h+var_19A]
.text:0000000000010901                 xor     eax, 1
.text:0000000000010904                 test    byte ptr [rsp+268h+var_238], al
.text:0000000000010908                 jnz     short loc_10944
.text:000000000001090A
.text:000000000001090A loc_1090A:                              ; CODE XREF: re_search_internal+BE8↓j
.text:000000000001090A                 mov     rsi, [rsp+268h+var_88]
.text:0000000000010912                 mov     rax, [rsp+268h+var_100]
.text:000000000001091A                 xor     ecx, ecx
.text:000000000001091C                 jmp     short loc_10933
.text:000000000001091C ; ---------------------------------------------------------------------------
.text:000000000001091E                 align 20h
.text:0000000000010920
.text:0000000000010920 loc_10920:                              ; CODE XREF: re_search_internal+84A↓j
.text:0000000000010920                 cmp     qword ptr [rdi+rdx*8], 0
.text:0000000000010925                 mov     rax, rdx
.text:0000000000010928                 mov     ecx, 1
.text:000000000001092D                 jnz     loc_10CA0
.text:0000000000010933
.text:0000000000010933 loc_10933:                              ; CODE XREF: re_search_internal+82C↑j
.text:0000000000010933                 lea     rdx, [rax+1]
.text:0000000000010937                 cmp     rsi, rdx
.text:000000000001093A                 jge     short loc_10920
.text:000000000001093C                 test    cl, cl
.text:000000000001093E                 jnz     loc_1180E
.text:0000000000010944
.text:0000000000010944 loc_10944:                              ; CODE XREF: re_search_internal+764↑j
.text:0000000000010944                                         ; re_search_internal+807↑j ...
.text:0000000000010944                 mov     rax, [rsp+268h+var_218]
.text:0000000000010949                 test    rax, rax
.text:000000000001094C                 jz      short loc_10956
.text:000000000001094E                 mov     rdi, [rsp+268h+var_260]
.text:0000000000010953                 add     [rax], rdi
.text:0000000000010956
.text:0000000000010956 loc_10956:                              ; CODE XREF: re_search_internal+741↑j
.text:0000000000010956                                         ; re_search_internal+85C↑j ...
.text:0000000000010956                 mov     rax, [rsp+268h+var_248]
.text:000000000001095B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001095F                 jz      loc_11020
.text:0000000000010965                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000010969                 jz      loc_11160
.text:000000000001096F                 mov     rax, [rsp+268h+var_248]
.text:0000000000010974                 mov     [rsp+268h+var_A0], rax
.text:000000000001097C                 mov     rax, [rsp+268h+var_220]
.text:0000000000010981                 test    byte ptr [rax+38h], 10h
.text:0000000000010985                 jnz     loc_11140
.text:000000000001098B                 cmp     [rsp+268h+arg_0], 1
.text:0000000000010994                 jbe     loc_1128C
.text:000000000001099A                 mov     rcx, [rsp+268h+var_248]
.text:000000000001099F                 mov     rbx, [rsp+268h+var_90]
.text:00000000000109A7                 mov     rdi, [rsp+268h+var_268]
.text:00000000000109AB                 mov     rax, [rbx+rcx*8]
.text:00000000000109AF                 mov     rsi, [rax+10h]
.text:00000000000109B3                 lea     rdx, [rax+18h]
.text:00000000000109B7                 call    check_halt_state_context_isra_20
.text:00000000000109BC                 mov     r13, rax
.text:00000000000109BF                 mov     [rsp+268h+var_98], rax
.text:00000000000109C7                 mov     rax, [rsp+268h+var_230]
.text:00000000000109CC                 test    byte ptr [rax+0B0h], 1
.text:00000000000109D3                 jnz     short loc_109F0
.text:00000000000109D5                 mov     rax, [rsp+268h+var_230]
.text:00000000000109DA                 cmp     qword ptr [rax+98h], 0
.text:00000000000109E2                 jz      loc_1137C
.text:00000000000109E8
.text:00000000000109E8 loc_109E8:                              ; CODE XREF: re_search_internal+11D9↓j
.text:00000000000109E8                 mov     r13, [rsp+268h+var_98]
.text:00000000000109F0
.text:00000000000109F0 loc_109F0:                              ; CODE XREF: re_search_internal+8E3↑j
.text:00000000000109F0                 mov     rsi, 1FFFFFFFFFFFFFFEh
.text:00000000000109FA                 cmp     [rsp+268h+var_248], rsi
.text:00000000000109FF                 mov     r15, [rsp+268h+var_B0]
.text:0000000000010A07                 ja      loc_1166B
.text:0000000000010A0D                 mov     rax, [rsp+268h+var_248]
.text:0000000000010A12                 add     rax, 1
.text:0000000000010A16                 lea     rbx, ds:0[rax*8]
.text:0000000000010A1E                 mov     [rsp+268h+var_260], rax
.text:0000000000010A23                 mov     rdi, rbx        ; size
.text:0000000000010A26                 call    _malloc
.text:0000000000010A2B                 test    rax, rax
.text:0000000000010A2E                 mov     r12, rax
.text:0000000000010A31                 jz      loc_11160
.text:0000000000010A37                 cmp     qword ptr [r15+98h], 0
.text:0000000000010A3F                 jz      loc_112D5
.text:0000000000010A45                 mov     rdi, rbx        ; size
.text:0000000000010A48                 call    _malloc
.text:0000000000010A4D                 test    rax, rax
.text:0000000000010A50                 mov     rbp, rax
.text:0000000000010A53                 jz      loc_11158
.text:0000000000010A59                 mov     r14, [rsp+268h+var_248]
.text:0000000000010A5E                 lea     rbx, [rsp+268h+var_188]
.text:0000000000010A66                 mov     [rsp+268h+var_258], r15
.text:0000000000010A6B                 mov     [rsp+268h+var_250], rax
.text:0000000000010A70
.text:0000000000010A70 loc_10A70:                              ; CODE XREF: re_search_internal+A4D↓j
.text:0000000000010A70                 mov     rax, [rsp+268h+var_260]
.text:0000000000010A75                 xor     esi, esi        ; c
.text:0000000000010A77                 mov     rdi, rbp        ; s
.text:0000000000010A7A                 lea     rdx, ds:0[rax*8] ; n
.text:0000000000010A82                 call    _memset
.text:0000000000010A87                 pxor    xmm0, xmm0
.text:0000000000010A8B                 mov     qword ptr [rsp+268h+var_188], r12
.text:0000000000010A93                 mov     qword ptr [rsp+268h+var_188+8], rbp
.text:0000000000010A9B                 mov     [rsp+268h+var_178], r13
.text:0000000000010AA3                 mov     rsi, rbx
.text:0000000000010AA6                 mov     [rsp+268h+var_170], r14
.text:0000000000010AAE                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010AB2                 movaps  xmmword ptr [rbx+20h], xmm0
.text:0000000000010AB6                 mov     qword ptr [rbx+30h], 0
.text:0000000000010ABE                 call    sift_states_backward
.text:0000000000010AC3                 mov     rdi, [rsp+268h+ptr] ; ptr
.text:0000000000010ACB                 mov     r15d, eax
.text:0000000000010ACE                 call    _free
.text:0000000000010AD3                 test    r15d, r15d
.text:0000000000010AD6                 jnz     loc_116F4
.text:0000000000010ADC                 cmp     qword ptr [r12], 0
.text:0000000000010AE1                 jnz     loc_11753
.text:0000000000010AE7                 cmp     qword ptr [rbp+0], 0
.text:0000000000010AEC                 jnz     loc_11753
.text:0000000000010AF2                 mov     rdx, [rsp+268h+var_90]
.text:0000000000010AFA                 nop     word ptr [rax+rax+00h]
.text:0000000000010B00
.text:0000000000010B00 loc_10B00:                              ; CODE XREF: re_search_internal+A25↓j
.text:0000000000010B00                                         ; re_search_internal+A2B↓j
.text:0000000000010B00                 sub     r14, 1
.text:0000000000010B04                 cmp     r14, 0FFFFFFFFFFFFFFFFh
.text:0000000000010B08                 jz      loc_115CB
.text:0000000000010B0E                 mov     rax, [rdx+r14*8]
.text:0000000000010B12                 test    rax, rax
.text:0000000000010B15                 jz      short loc_10B00
.text:0000000000010B17                 test    byte ptr [rax+68h], 10h
.text:0000000000010B1B                 jz      short loc_10B00
.text:0000000000010B1D                 mov     rsi, [rax+10h]
.text:0000000000010B21                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010B25                 lea     rdx, [rax+18h]
.text:0000000000010B29                 mov     rcx, r14
.text:0000000000010B2C                 call    check_halt_state_context_isra_20
.text:0000000000010B31                 mov     r13, rax
.text:0000000000010B34                 lea     rax, [r14+1]
.text:0000000000010B38                 mov     [rsp+268h+var_260], rax
.text:0000000000010B3D                 jmp     loc_10A70
.text:0000000000010B42 ; ---------------------------------------------------------------------------
.text:0000000000010B42
.text:0000000000010B42 loc_10B42:                              ; CODE XREF: re_search_internal+4F6↑j
.text:0000000000010B42                                         ; DATA XREF: .rodata:jpt_105E6↓o
.text:0000000000010B42                 cmp     [rsp+268h+var_1F8], rbp ; jumptable 00000000000105E6 case 3
.text:0000000000010B47                 jle     loc_1067F
.text:0000000000010B4D                 mov     rax, [rsp+268h+var_1F0]
.text:0000000000010B52                 mov     rdi, [rsp+268h+var_1B8]
.text:0000000000010B5A                 mov     rsi, [rsp+268h+var_200]
.text:0000000000010B5F                 movzx   eax, byte ptr [rax+rbp]
.text:0000000000010B63                 movzx   edx, byte ptr [rdi+rax]
.text:0000000000010B67                 lea     rax, [rbp+1]
.text:0000000000010B6B                 cmp     byte ptr [rsi+rdx], 0
.text:0000000000010B6F                 jnz     loc_106C8       ; jumptable 00000000000105E6 case 4
.text:0000000000010B75                 mov     rsi, [rsp+268h+var_200]
.text:0000000000010B7A                 mov     rdi, [rsp+268h+var_1B8]
.text:0000000000010B82                 mov     rcx, [rsp+268h+var_1F8]
.text:0000000000010B87                 mov     r8, [rsp+268h+var_1F0]
.text:0000000000010B8C                 jmp     short loc_10BA7
.text:0000000000010B8C ; ---------------------------------------------------------------------------
.text:0000000000010B8E                 align 10h
.text:0000000000010B90
.text:0000000000010B90 loc_10B90:                              ; CODE XREF: re_search_internal+ABD↓j
.text:0000000000010B90                 movzx   eax, byte ptr [r8+rax]
.text:0000000000010B95                 movzx   edx, byte ptr [rdi+rax]
.text:0000000000010B99                 lea     rax, [rbp+1]
.text:0000000000010B9D                 cmp     byte ptr [rsi+rdx], 0
.text:0000000000010BA1                 jnz     loc_11801
.text:0000000000010BA7
.text:0000000000010BA7 loc_10BA7:                              ; CODE XREF: re_search_internal+A9C↑j
.text:0000000000010BA7                 cmp     rcx, rax
.text:0000000000010BAA                 mov     rbp, rax
.text:0000000000010BAD                 jnz     short loc_10B90
.text:0000000000010BAF                 jmp     loc_10672
.text:0000000000010BB4 ; ---------------------------------------------------------------------------
.text:0000000000010BB4
.text:0000000000010BB4 loc_10BB4:                              ; CODE XREF: re_search_internal+4F6↑j
.text:0000000000010BB4                                         ; DATA XREF: .rodata:jpt_105E6↓o
.text:0000000000010BB4                 cmp     [rsp+268h+var_1D8], rbp ; jumptable 00000000000105E6 cases 0,1
.text:0000000000010BBC                 jg      loc_11059
.text:0000000000010BC2                 xor     ecx, ecx
.text:0000000000010BC4                 mov     rax, rbp
.text:0000000000010BC7                 mov     rdi, [rsp+268h+var_200]
.text:0000000000010BCC                 mov     rsi, [rsp+268h+var_1B8]
.text:0000000000010BD4                 mov     r9, [rsp+268h+var_1D8]
.text:0000000000010BDC                 mov     r10, [rsp+268h+var_1F0]
.text:0000000000010BE1                 mov     r8, [rsp+268h+var_1E0]
.text:0000000000010BE9                 jmp     short loc_10C02
.text:0000000000010BE9 ; ---------------------------------------------------------------------------
.text:0000000000010BEB                 align 10h
.text:0000000000010BF0
.text:0000000000010BF0 loc_10BF0:                              ; CODE XREF: re_search_internal+B2B↓j
.text:0000000000010BF0                 sub     rax, 1
.text:0000000000010BF4                 mov     ecx, 1
.text:0000000000010BF9                 cmp     rax, r9
.text:0000000000010BFC                 jl      loc_115E0
.text:0000000000010C02
.text:0000000000010C02 loc_10C02:                              ; CODE XREF: re_search_internal+AF9↑j
.text:0000000000010C02                 xor     edx, edx
.text:0000000000010C04                 cmp     r8, rax
.text:0000000000010C07                 jle     short loc_10C0E
.text:0000000000010C09                 movzx   edx, byte ptr [r10+rax]
.text:0000000000010C0E
.text:0000000000010C0E loc_10C0E:                              ; CODE XREF: re_search_internal+B17↑j
.text:0000000000010C0E                 test    rsi, rsi
.text:0000000000010C11                 jz      short loc_10C17
.text:0000000000010C13                 movzx   edx, byte ptr [rsi+rdx]
.text:0000000000010C17
.text:0000000000010C17 loc_10C17:                              ; CODE XREF: re_search_internal+B21↑j
.text:0000000000010C17                 cmp     byte ptr [rdi+rdx], 0
.text:0000000000010C1B                 jz      short loc_10BF0
.text:0000000000010C1D                 test    cl, cl
.text:0000000000010C1F                 jz      loc_106C8       ; jumptable 00000000000105E6 case 4
.text:0000000000010C25                 mov     [rsp+268h+var_190], rax
.text:0000000000010C2D                 mov     rbp, rax
.text:0000000000010C30                 jmp     loc_106C8       ; jumptable 00000000000105E6 case 4
.text:0000000000010C30 ; ---------------------------------------------------------------------------
.text:0000000000010C35                 align 8
.text:0000000000010C38
.text:0000000000010C38 loc_10C38:                              ; CODE XREF: re_search_internal+1162↓j
.text:0000000000010C38                 mov     [rsp+268h+var_20C], eax
.text:0000000000010C3C                 nop     dword ptr [rax+00h]
.text:0000000000010C40
.text:0000000000010C40 loc_10C40:                              ; CODE XREF: re_search_internal+256↑j
.text:0000000000010C40                                         ; re_search_internal+5F1↑j ...
.text:0000000000010C40                 mov     rdi, [rsp+268h+var_90] ; ptr
.text:0000000000010C48
.text:0000000000010C48 loc_10C48:                              ; CODE XREF: re_search_internal+F79↓j
.text:0000000000010C48                                         ; re_search_internal+1080↓j ...
.text:0000000000010C48                 call    _free
.text:0000000000010C4D                 mov     rax, [rsp+268h+var_230]
.text:0000000000010C52                 cmp     qword ptr [rax+98h], 0
.text:0000000000010C5A                 jnz     loc_11580
.text:0000000000010C60
.text:0000000000010C60 loc_10C60:                              ; CODE XREF: re_search_internal+14B3↓j
.text:0000000000010C60                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010C64                 call    re_string_destruct
.text:0000000000010C69
.text:0000000000010C69 loc_10C69:                              ; CODE XREF: re_search_internal+156↑j
.text:0000000000010C69                                         ; re_search_internal+F88↓j
.text:0000000000010C69                 mov     rsi, [rsp+268h+var_40]
.text:0000000000010C71                 xor     rsi, fs:28h
.text:0000000000010C7A                 mov     eax, [rsp+268h+var_20C]
.text:0000000000010C7E                 jnz     loc_1181B
.text:0000000000010C84                 add     rsp, 238h
.text:0000000000010C8B                 pop     rbx
.text:0000000000010C8C                 pop     rbp
.text:0000000000010C8D                 pop     r12
.text:0000000000010C8F                 pop     r13
.text:0000000000010C91                 pop     r14
.text:0000000000010C93                 pop     r15
.text:0000000000010C95                 retn
.text:0000000000010C95 ; ---------------------------------------------------------------------------
.text:0000000000010C96                 align 20h
.text:0000000000010CA0
.text:0000000000010CA0 loc_10CA0:                              ; CODE XREF: re_search_internal+83D↑j
.text:0000000000010CA0                 mov     rsi, [rsp+268h+var_268]
.text:0000000000010CA4                 mov     rdi, [rsp+268h+var_240]
.text:0000000000010CA9                 mov     [rsp+268h+var_100], rdx
.text:0000000000010CB1                 xor     edx, edx
.text:0000000000010CB3                 call    merge_state_with_log
.text:0000000000010CB8                 mov     edx, [rsp+268h+var_198]
.text:0000000000010CBF                 test    edx, edx
.text:0000000000010CC1                 jnz     loc_115FD
.text:0000000000010CC7                 test    rax, rax
.text:0000000000010CCA                 jnz     loc_11610
.text:0000000000010CD0                 mov     rdi, [rsp+268h+var_90]
.text:0000000000010CD8                 jmp     loc_1090A
.text:0000000000010CD8 ; ---------------------------------------------------------------------------
.text:0000000000010CDD                 align 20h
.text:0000000000010CE0
.text:0000000000010CE0 loc_10CE0:                              ; CODE XREF: re_search_internal+730↑j
.text:0000000000010CE0                 mov     rsi, [r13+10h]
.text:0000000000010CE4                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010CE8                 lea     rdx, [r13+18h]
.text:0000000000010CEC                 mov     rcx, r8
.text:0000000000010CEF                 mov     [rsp+268h+var_258], r8
.text:0000000000010CF4                 call    check_halt_state_context_isra_20
.text:0000000000010CF9                 test    rax, rax
.text:0000000000010CFC                 mov     r8, [rsp+268h+var_258]
.text:0000000000010D01                 jz      loc_10849
.text:0000000000010D07                 jmp     loc_10826
.text:0000000000010D07 ; ---------------------------------------------------------------------------
.text:0000000000010D0C                 align 10h
.text:0000000000010D10
.text:0000000000010D10 loc_10D10:                              ; CODE XREF: re_search_internal+779↑j
.text:0000000000010D10                 cmp     rax, [rsp+268h+var_F0]
.text:0000000000010D18                 jge     loc_1086F
.text:0000000000010D1E
.text:0000000000010D1E loc_10D1E:                              ; CODE XREF: re_search_internal+F1E↓j
.text:0000000000010D1E                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010D22                 lea     esi, [rbx+1]
.text:0000000000010D25                 call    extend_buffers
.text:0000000000010D2A                 test    eax, eax
.text:0000000000010D2C                 mov     [rsp+268h+var_198], eax
.text:0000000000010D33                 jnz     loc_11618
.text:0000000000010D39                 test    byte ptr [r14+68h], 20h
.text:0000000000010D3E                 mov     r8, [rsp+268h+var_100]
.text:0000000000010D46                 jz      loc_1088B
.text:0000000000010D4C                 nop     dword ptr [rax+00h]
.text:0000000000010D50
.text:0000000000010D50 loc_10D50:                              ; CODE XREF: re_search_internal+795↑j
.text:0000000000010D50                 cmp     qword ptr [r14+10h], 0
.text:0000000000010D55                 mov     r13, [rsp+268h+var_B0]
.text:0000000000010D5D                 jle     loc_1108B
.text:0000000000010D63                 lea     rax, [r13+0D8h]
.text:0000000000010D6A                 xor     r12d, r12d
.text:0000000000010D6D                 mov     [rsp+268h+var_1C8], rbx
.text:0000000000010D75                 mov     rbx, r12
.text:0000000000010D78                 mov     r12, r8
.text:0000000000010D7B                 mov     [rsp+268h+var_228], rax
.text:0000000000010D80                 jmp     loc_10ED8
.text:0000000000010D80 ; ---------------------------------------------------------------------------
.text:0000000000010D85                 align 8
.text:0000000000010D88
.text:0000000000010D88 loc_10D88:                              ; CODE XREF: re_search_internal+E3B↓j
.text:0000000000010D88                 test    al, 1
.text:0000000000010D8A                 jz      loc_10ECA
.text:0000000000010D90                 and     ecx, 8
.text:0000000000010D93                 jnz     loc_10ECA
.text:0000000000010D99
.text:0000000000010D99 loc_10D99:                              ; CODE XREF: re_search_internal+E44↓j
.text:0000000000010D99                                         ; re_search_internal+E4C↓j
.text:0000000000010D99                 test    dl, 20h
.text:0000000000010D9C                 jz      short loc_10DA6
.text:0000000000010D9E                 test    al, 2
.text:0000000000010DA0                 jz      loc_10ECA
.text:0000000000010DA6
.text:0000000000010DA6 loc_10DA6:                              ; CODE XREF: re_search_internal+CAC↑j
.text:0000000000010DA6                 and     edx, 80h
.text:0000000000010DAC                 jz      short loc_10DC0
.text:0000000000010DAE                 test    al, 8
.text:0000000000010DB0                 jz      loc_10ECA
.text:0000000000010DB6                 db      2Eh
.text:0000000000010DB6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000010DC0
.text:0000000000010DC0 loc_10DC0:                              ; CODE XREF: re_search_internal+CBC↑j
.text:0000000000010DC0                                         ; re_search_internal+E11↓j
.text:0000000000010DC0                 mov     rcx, [rsp+268h+var_268]
.text:0000000000010DC4                 mov     rsi, [rsp+268h+var_228]
.text:0000000000010DC9                 mov     r8, r12
.text:0000000000010DCC                 mov     rdx, r15
.text:0000000000010DCF                 mov     rdi, rbp
.text:0000000000010DD2                 call    check_node_accept_bytes_isra_31
.text:0000000000010DD7                 test    eax, eax
.text:0000000000010DD9                 jz      loc_10EC2
.text:0000000000010DDF                 movsxd  rbp, eax
.text:0000000000010DE2                 add     rbp, [rsp+268h+var_100]
.text:0000000000010DEA                 cmp     [rsp+268h+var_68], eax
.text:0000000000010DF1                 cmovge  eax, [rsp+268h+var_68]
.text:0000000000010DF9                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010DFD                 mov     rsi, rbp
.text:0000000000010E00                 mov     [rsp+268h+var_68], eax
.text:0000000000010E07                 call    clean_state_log_if_needed
.text:0000000000010E0C                 test    eax, eax
.text:0000000000010E0E                 mov     [rsp+268h+var_194], eax
.text:0000000000010E15                 jnz     loc_110B0
.text:0000000000010E1B                 mov     rax, [r13+18h]
.text:0000000000010E1F                 lea     r12, ds:0[rbp*8]
.text:0000000000010E27                 mov     rax, [rax+r15*8]
.text:0000000000010E2B                 mov     r15, [rsp+268h+var_90]
.text:0000000000010E33                 lea     rdx, [rax+rax*2]
.text:0000000000010E37                 mov     rax, [r13+30h]
.text:0000000000010E3B                 add     r15, r12
.text:0000000000010E3E                 lea     rdx, [rax+rdx*8]
.text:0000000000010E42                 mov     rax, [r15]
.text:0000000000010E45                 test    rax, rax
.text:0000000000010E48                 jz      loc_10F48
.text:0000000000010E4E                 mov     rsi, [rax+50h]
.text:0000000000010E52                 mov     rdi, [rsp+268h+var_208]
.text:0000000000010E57                 call    re_node_set_init_union
.text:0000000000010E5C                 test    eax, eax
.text:0000000000010E5E                 mov     [rsp+268h+var_194], eax
.text:0000000000010E65                 jnz     loc_110B0
.text:0000000000010E6B                 mov     edx, [rsp+268h+var_A8]
.text:0000000000010E72                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010E76                 lea     rsi, [rbp-1]
.text:0000000000010E7A                 call    re_string_context_at
.text:0000000000010E7F                 mov     rdx, [rsp+268h+var_208]
.text:0000000000010E84                 mov     rdi, [rsp+268h+var_1E8]
.text:0000000000010E8C                 mov     ecx, eax
.text:0000000000010E8E                 add     r12, [rsp+268h+var_90]
.text:0000000000010E96                 mov     rsi, r13
.text:0000000000010E99                 call    re_acquire_state_context
.text:0000000000010E9E                 mov     rdi, [rsp+268h+var_178] ; ptr
.text:0000000000010EA6                 mov     [r12], rax
.text:0000000000010EAA                 call    _free
.text:0000000000010EAF                 mov     rdi, [rsp+268h+var_90]
.text:0000000000010EB7                 cmp     qword ptr [rdi+rbp*8], 0
.text:0000000000010EBC                 jz      loc_10FA1
.text:0000000000010EC2
.text:0000000000010EC2 loc_10EC2:                              ; CODE XREF: re_search_internal+CE9↑j
.text:0000000000010EC2                                         ; re_search_internal+EAB↓j ...
.text:0000000000010EC2                 mov     r12, [rsp+268h+var_100]
.text:0000000000010ECA
.text:0000000000010ECA loc_10ECA:                              ; CODE XREF: re_search_internal+C9A↑j
.text:0000000000010ECA                                         ; re_search_internal+CA3↑j ...
.text:0000000000010ECA                 add     rbx, 1
.text:0000000000010ECE                 cmp     rbx, [r14+10h]
.text:0000000000010ED2                 jge     loc_11080
.text:0000000000010ED8
.text:0000000000010ED8 loc_10ED8:                              ; CODE XREF: re_search_internal+C90↑j
.text:0000000000010ED8                 mov     rax, [r14+18h]
.text:0000000000010EDC                 mov     rbp, [r13+0]
.text:0000000000010EE0                 mov     r15, [rax+rbx*8]
.text:0000000000010EE4                 mov     rax, r15
.text:0000000000010EE7                 shl     rax, 4
.text:0000000000010EEB                 add     rax, rbp
.text:0000000000010EEE                 test    byte ptr [rax+0Ah], 10h
.text:0000000000010EF2                 jz      short loc_10ECA
.text:0000000000010EF4                 mov     ecx, [rax+8]
.text:0000000000010EF7                 test    ecx, 3FF00h
.text:0000000000010EFD                 mov     dword ptr [rsp+268h+var_258], ecx
.text:0000000000010F01                 jz      loc_10DC0
.text:0000000000010F07                 mov     edx, [rsp+268h+var_A8]
.text:0000000000010F0E                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010F12                 mov     rsi, r12
.text:0000000000010F15                 call    re_string_context_at
.text:0000000000010F1A                 mov     ecx, dword ptr [rsp+268h+var_258]
.text:0000000000010F1E                 shr     ecx, 8
.text:0000000000010F21                 mov     edx, ecx
.text:0000000000010F23                 and     dx, 3FFh
.text:0000000000010F28                 test    cl, 4
.text:0000000000010F2B                 jnz     loc_10D88
.text:0000000000010F31                 and     ecx, 8
.text:0000000000010F34                 jz      loc_10D99
.text:0000000000010F3A                 test    al, 1
.text:0000000000010F3C                 jz      loc_10D99
.text:0000000000010F42                 jmp     short loc_10ECA
.text:0000000000010F42 ; ---------------------------------------------------------------------------
.text:0000000000010F44                 align 8
.text:0000000000010F48
.text:0000000000010F48 loc_10F48:                              ; CODE XREF: re_search_internal+D58↑j
.text:0000000000010F48                 movdqu  xmm0, xmmword ptr [rdx]
.text:0000000000010F4C                 lea     rsi, [rbp-1]
.text:0000000000010F50                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010F54                 movaps  [rsp+268h+var_188], xmm0
.text:0000000000010F5C                 mov     rax, [rdx+10h]
.text:0000000000010F60                 mov     edx, [rsp+268h+var_A8]
.text:0000000000010F67                 mov     [rsp+268h+var_178], rax
.text:0000000000010F6F                 call    re_string_context_at
.text:0000000000010F74                 mov     rdi, [rsp+268h+var_1E8]
.text:0000000000010F7C                 mov     rdx, [rsp+268h+var_208]
.text:0000000000010F81                 mov     ecx, eax
.text:0000000000010F83                 mov     rsi, r13
.text:0000000000010F86                 call    re_acquire_state_context
.text:0000000000010F8B                 mov     rdi, [rsp+268h+var_90]
.text:0000000000010F93                 mov     [r15], rax
.text:0000000000010F96                 cmp     qword ptr [rdi+rbp*8], 0
.text:0000000000010F9B                 jnz     loc_10EC2
.text:0000000000010FA1
.text:0000000000010FA1 loc_10FA1:                              ; CODE XREF: re_search_internal+DCC↑j
.text:0000000000010FA1                 mov     eax, [rsp+268h+var_194]
.text:0000000000010FA8                 test    eax, eax
.text:0000000000010FAA                 jz      loc_10EC2
.text:0000000000010FB0                 mov     rbx, [rsp+268h+var_1C8]
.text:0000000000010FB8                 jmp     loc_110C0
.text:0000000000010FB8 ; ---------------------------------------------------------------------------
.text:0000000000010FBD                 align 20h
.text:0000000000010FC0
.text:0000000000010FC0 loc_10FC0:                              ; CODE XREF: re_search_internal+7BB↑j
.text:0000000000010FC0                 mov     rbp, [r14+60h]
.text:0000000000010FC4                 test    rbp, rbp
.text:0000000000010FC7                 jz      loc_11175
.text:0000000000010FCD                 mov     rax, [rsp+268h+var_100]
.text:0000000000010FD5                 mov     edx, [rsp+268h+var_A8]
.text:0000000000010FDC                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010FE0                 lea     rsi, [rax-1]
.text:0000000000010FE4                 call    re_string_context_at
.text:0000000000010FE9                 test    al, 1
.text:0000000000010FEB                 jz      loc_110A0
.text:0000000000010FF1                 mov     r13, [rbp+r13*8+800h]
.text:0000000000010FF9                 jmp     loc_108B5
.text:0000000000010FF9 ; ---------------------------------------------------------------------------
.text:0000000000010FFE                 align 20h
.text:0000000000011000
.text:0000000000011000 loc_11000:                              ; CODE XREF: re_search_internal+78A↑j
.text:0000000000011000                 cmp     rax, [rsp+268h+var_F0]
.text:0000000000011008                 jge     loc_10880
.text:000000000001100E                 jmp     loc_10D1E
.text:0000000000011013 ; ---------------------------------------------------------------------------
.text:0000000000011013
.text:0000000000011013 loc_11013:                              ; CODE XREF: re_search_internal+125C↓j
.text:0000000000011013                 mov     rdi, r12        ; ptr
.text:0000000000011016                 call    _free
.text:000000000001101B                 nop     dword ptr [rax+rax+00h]
.text:0000000000011020
.text:0000000000011020 loc_11020:                              ; CODE XREF: re_search_internal+86F↑j
.text:0000000000011020                                         ; re_search_internal+14EB↓j ...
.text:0000000000011020                 mov     rdi, [rsp+268h+var_268]
.text:0000000000011024                 call    match_ctx_clean
.text:0000000000011029                 mov     rbp, [rsp+268h+var_190]
.text:0000000000011031
.text:0000000000011031 loc_11031:                              ; CODE XREF: re_search_internal+617↑j
.text:0000000000011031                 movsxd  rax, [rsp+268h+var_1BC]
.text:0000000000011039                 add     rbp, rax
.text:000000000001103C                 cmp     rbp, [rsp+268h+var_1D8]
.text:0000000000011044                 mov     [rsp+268h+var_190], rbp
.text:000000000001104C                 jl      short loc_11059
.text:000000000001104E                 cmp     rbp, [rsp+268h+var_1F8]
.text:0000000000011053                 jle     loc_105C8
.text:0000000000011059
.text:0000000000011059 loc_11059:                              ; CODE XREF: re_search_internal+494↑j
.text:0000000000011059                                         ; re_search_internal+5CA↑j ...
.text:0000000000011059                 mov     rdi, [rsp+268h+var_90]
.text:0000000000011061                 mov     [rsp+268h+var_20C], 1
.text:0000000000011069                 jmp     loc_10C48
.text:0000000000011069 ; ---------------------------------------------------------------------------
.text:000000000001106E                 align 10h
.text:0000000000011070
.text:0000000000011070 loc_11070:                              ; CODE XREF: re_search_internal+EE↑j
.text:0000000000011070                                         ; re_search_internal+100↑j ...
.text:0000000000011070                 mov     [rsp+268h+var_20C], 1
.text:0000000000011078                 jmp     loc_10C69
.text:0000000000011078 ; ---------------------------------------------------------------------------
.text:000000000001107D                 align 20h
.text:0000000000011080
.text:0000000000011080 loc_11080:                              ; CODE XREF: re_search_internal+DE2↑j
.text:0000000000011080                 mov     rbx, [rsp+268h+var_1C8]
.text:0000000000011088                 mov     r8, r12
.text:000000000001108B
.text:000000000001108B loc_1108B:                              ; CODE XREF: re_search_internal+C6D↑j
.text:000000000001108B                 mov     [rsp+268h+var_198], 0
.text:0000000000011096                 jmp     loc_1088B
.text:0000000000011096 ; ---------------------------------------------------------------------------
.text:000000000001109B                 align 20h
.text:00000000000110A0
.text:00000000000110A0 loc_110A0:                              ; CODE XREF: re_search_internal+EFB↑j
.text:00000000000110A0                 mov     r13, [rbp+r13*8+0]
.text:00000000000110A5                 jmp     loc_108B5
.text:00000000000110A5 ; ---------------------------------------------------------------------------
.text:00000000000110AA                 align 10h
.text:00000000000110B0
.text:00000000000110B0 loc_110B0:                              ; CODE XREF: re_search_internal+D25↑j
.text:00000000000110B0                                         ; re_search_internal+D75↑j
.text:00000000000110B0                 mov     rbx, [rsp+268h+var_1C8]
.text:00000000000110B8                 mov     rdi, [rsp+268h+var_90]
.text:00000000000110C0
.text:00000000000110C0 loc_110C0:                              ; CODE XREF: re_search_internal+EC8↑j
.text:00000000000110C0                 test    rdi, rdi
.text:00000000000110C3                 mov     [rsp+268h+var_198], eax
.text:00000000000110CA                 jz      loc_111B0
.text:00000000000110D0
.text:00000000000110D0 loc_110D0:                              ; CODE XREF: re_search_internal+10B3↓j
.text:00000000000110D0                 xor     r13d, r13d
.text:00000000000110D3                 jmp     loc_108C0
.text:00000000000110D3 ; ---------------------------------------------------------------------------
.text:00000000000110D8                 align 20h
.text:00000000000110E0
.text:00000000000110E0 loc_110E0:                              ; CODE XREF: re_search_internal+678↑j
.text:00000000000110E0                 mov     edx, [rsp+268h+var_A8]
.text:00000000000110E7                 mov     rdi, [rsp+268h+var_268]
.text:00000000000110EB                 lea     rsi, [rax-1]
.text:00000000000110EF                 call    re_string_context_at
.text:00000000000110F4                 test    al, 1
.text:00000000000110F6                 jz      loc_11265
.text:00000000000110FC                 mov     r14, [rbx+50h]
.text:0000000000011100
.text:0000000000011100 loc_11100:                              ; CODE XREF: re_search_internal+1197↓j
.text:0000000000011100                                         ; re_search_internal+15F3↓j ...
.text:0000000000011100                 test    r14, r14
.text:0000000000011103                 jnz     loc_1076E
.text:0000000000011109                 mov     eax, [rsp+268h+var_198]
.text:0000000000011110                 cmp     eax, 0Ch
.text:0000000000011113                 mov     [rsp+268h+var_20C], eax
.text:0000000000011117                 jz      loc_10C40
.text:000000000001111D                 lea     rcx, __PRETTY_FUNCTION___7972 ; "check_matching"
.text:0000000000011124                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000001112B                 lea     rdi, aErrRegEspace ; "err == REG_ESPACE"
.text:0000000000011132                 mov     edx, 435h       ; line
.text:0000000000011137                 call    ___assert_fail
.text:0000000000011137 ; ---------------------------------------------------------------------------
.text:000000000001113C                 align 20h
.text:0000000000011140
.text:0000000000011140 loc_11140:                              ; CODE XREF: re_search_internal+895↑j
.text:0000000000011140                 mov     rax, [rsp+268h+var_230]
.text:0000000000011145                 cmp     qword ptr [rax+98h], 0
.text:000000000001114D                 jz      loc_1137C
.text:0000000000011153                 jmp     loc_1129F
.text:0000000000011158 ; ---------------------------------------------------------------------------
.text:0000000000011158
.text:0000000000011158 loc_11158:                              ; CODE XREF: re_search_internal+963↑j
.text:0000000000011158                 mov     rdi, r12        ; ptr
.text:000000000001115B                 call    _free
.text:0000000000011160
.text:0000000000011160 loc_11160:                              ; CODE XREF: re_search_internal+32A↑j
.text:0000000000011160                                         ; re_search_internal+360↑j ...
.text:0000000000011160                 mov     rdi, [rsp+268h+var_90]
.text:0000000000011168                 mov     [rsp+268h+var_20C], 0Ch
.text:0000000000011170                 jmp     loc_10C48
.text:0000000000011175 ; ---------------------------------------------------------------------------
.text:0000000000011175
.text:0000000000011175 loc_11175:                              ; CODE XREF: re_search_internal+ED7↑j
.text:0000000000011175                 mov     rdi, [rsp+268h+var_B0]
.text:000000000001117D                 mov     rsi, r14
.text:0000000000011180                 call    build_trtable
.text:0000000000011185                 test    al, al
.text:0000000000011187                 jnz     loc_108A4
.text:000000000001118D                 mov     rdi, [rsp+268h+var_90]
.text:0000000000011195                 mov     [rsp+268h+var_198], 0Ch
.text:00000000000111A0                 test    rdi, rdi
.text:00000000000111A3                 jnz     loc_110D0
.text:00000000000111A9                 nop     dword ptr [rax+00000000h]
.text:00000000000111B0
.text:00000000000111B0 loc_111B0:                              ; CODE XREF: re_search_internal+3CF↑j
.text:00000000000111B0                                         ; re_search_internal+7FE↑j ...
.text:00000000000111B0                 mov     [rsp+268h+var_20C], 0Ch
.text:00000000000111B8                 jmp     loc_10C48
.text:00000000000111BD ; ---------------------------------------------------------------------------
.text:00000000000111BD
.text:00000000000111BD def_105E6:                              ; CODE XREF: re_search_internal+4E2↑j
.text:00000000000111BD                 mov     rbx, [rsp+268h+var_200] ; jumptable 00000000000105E6 default case
.text:00000000000111C2                 mov     r13d, [rsp+268h+var_1BC]
.text:00000000000111CA                 mov     r14, [rsp+268h+var_1D8]
.text:00000000000111D2                 mov     r15, [rsp+268h+var_1F8]
.text:00000000000111D7                 mov     r12, [rsp+268h+var_1E0]
.text:00000000000111DF                 jmp     short loc_11228
.text:00000000000111DF ; ---------------------------------------------------------------------------
.text:00000000000111E1                 align 8
.text:00000000000111E8
.text:00000000000111E8 loc_111E8:                              ; CODE XREF: re_search_internal+114B↓j
.text:00000000000111E8                                         ; re_search_internal+1173↓j
.text:00000000000111E8                 cmp     r12, rbp
.text:00000000000111EB                 mov     rax, rbx
.text:00000000000111EE                 jle     short loc_111FF
.text:00000000000111F0                 mov     rax, [rsp+268h+var_140]
.text:00000000000111F8                 movzx   eax, byte ptr [rax+rdx]
.text:00000000000111FC                 add     rax, rbx
.text:00000000000111FF
.text:00000000000111FF loc_111FF:                              ; CODE XREF: re_search_internal+10FE↑j
.text:00000000000111FF                 cmp     byte ptr [rax], 0
.text:0000000000011202                 jnz     loc_106C8       ; jumptable 00000000000105E6 case 4
.text:0000000000011208                 movsxd  rax, r13d
.text:000000000001120B                 add     rbp, rax
.text:000000000001120E                 cmp     rbp, r14
.text:0000000000011211                 mov     [rsp+268h+var_190], rbp
.text:0000000000011219                 jl      loc_11059
.text:000000000001121F                 cmp     rbp, r15
.text:0000000000011222                 jg      loc_11059
.text:0000000000011228
.text:0000000000011228 loc_11228:                              ; CODE XREF: re_search_internal+10EF↑j
.text:0000000000011228                 mov     rdx, rbp
.text:000000000001122B                 sub     rdx, [rsp+268h+var_120]
.text:0000000000011233                 cmp     [rsp+268h+var_110], rdx
.text:000000000001123B                 ja      short loc_111E8
.text:000000000001123D                 mov     edx, [rsp+268h+arg_10]
.text:0000000000011244                 mov     rdi, [rsp+268h+var_268]
.text:0000000000011248                 mov     rsi, rbp
.text:000000000001124B                 call    re_string_reconstruct
.text:0000000000011250                 test    eax, eax
.text:0000000000011252                 jnz     loc_10C38
.text:0000000000011258                 mov     rdx, rbp
.text:000000000001125B                 sub     rdx, [rsp+268h+var_120]
.text:0000000000011263                 jmp     short loc_111E8
.text:0000000000011265 ; ---------------------------------------------------------------------------
.text:0000000000011265
.text:0000000000011265 loc_11265:                              ; CODE XREF: re_search_internal+1006↑j
.text:0000000000011265                 test    eax, eax
.text:0000000000011267                 jz      loc_1076E
.text:000000000001126D                 mov     edx, eax
.text:000000000001126F                 and     edx, 6
.text:0000000000011272                 cmp     edx, 6
.text:0000000000011275                 jz      loc_116DF
.text:000000000001127B                 test    al, 2
.text:000000000001127D                 jz      loc_11730
.text:0000000000011283                 mov     r14, [rbx+58h]
.text:0000000000011287                 jmp     loc_11100
.text:000000000001128C ; ---------------------------------------------------------------------------
.text:000000000001128C
.text:000000000001128C loc_1128C:                              ; CODE XREF: re_search_internal+8A4↑j
.text:000000000001128C                 mov     rax, [rsp+268h+var_230]
.text:0000000000011291                 cmp     qword ptr [rax+98h], 0
.text:0000000000011299                 jz      loc_1137C
.text:000000000001129F
.text:000000000001129F loc_1129F:                              ; CODE XREF: re_search_internal+1063↑j
.text:000000000001129F                 mov     rcx, [rsp+268h+var_248]
.text:00000000000112A4                 mov     rbx, [rsp+268h+var_90]
.text:00000000000112AC                 mov     rdi, [rsp+268h+var_268]
.text:00000000000112B0                 mov     rax, [rbx+rcx*8]
.text:00000000000112B4                 mov     rsi, [rax+10h]
.text:00000000000112B8                 lea     rdx, [rax+18h]
.text:00000000000112BC                 call    check_halt_state_context_isra_20
.text:00000000000112C1                 mov     [rsp+268h+var_98], rax
.text:00000000000112C9                 jmp     loc_109E8
.text:00000000000112CE ; ---------------------------------------------------------------------------
.text:00000000000112CE
.text:00000000000112CE loc_112CE:                              ; CODE XREF: re_search_internal+459↑j
.text:00000000000112CE                                         ; re_search_internal+468↑j
.text:00000000000112CE                 xor     ecx, ecx
.text:00000000000112D0                 jmp     loc_1055E
.text:00000000000112D5 ; ---------------------------------------------------------------------------
.text:00000000000112D5
.text:00000000000112D5 loc_112D5:                              ; CODE XREF: re_search_internal+94F↑j
.text:00000000000112D5                 pxor    xmm0, xmm0
.text:00000000000112D9                 mov     qword ptr [rsp+268h+var_188], rax
.text:00000000000112E1                 mov     rdi, [rsp+268h+var_268]
.text:00000000000112E5                 mov     rax, [rsp+268h+var_248]
.text:00000000000112EA                 lea     rbx, [rsp+268h+var_188]
.text:00000000000112F2                 mov     qword ptr [rsp+268h+var_188+8], 0
.text:00000000000112FE                 mov     [rsp+268h+var_178], r13
.text:0000000000011306                 mov     rsi, rbx
.text:0000000000011309                 mov     [rsp+268h+ptr], 0
.text:0000000000011315                 movaps  [rsp+268h+var_168], xmm0
.text:000000000001131D                 mov     [rsp+268h+var_170], rax
.text:0000000000011325                 call    sift_states_backward
.text:000000000001132A                 mov     rdi, [rsp+268h+ptr] ; ptr
.text:0000000000011332                 mov     dword ptr [rsp+268h+var_260], eax
.text:0000000000011336                 call    _free
.text:000000000001133B                 mov     eax, dword ptr [rsp+268h+var_260]
.text:000000000001133F                 test    eax, eax
.text:0000000000011341                 jnz     loc_11788
.text:0000000000011347                 cmp     qword ptr [r12], 0
.text:000000000001134C                 jz      loc_11013
.text:0000000000011352
.text:0000000000011352 loc_11352:                              ; CODE XREF: re_search_internal+1692↓j
.text:0000000000011352                 mov     rdi, [rsp+268h+var_90] ; ptr
.text:000000000001135A                 call    _free
.text:000000000001135F                 mov     rax, [rsp+268h+var_248]
.text:0000000000011364                 mov     [rsp+268h+var_90], r12
.text:000000000001136C                 mov     [rsp+268h+var_98], r13
.text:0000000000011374                 mov     [rsp+268h+var_A0], rax
.text:000000000001137C
.text:000000000001137C loc_1137C:                              ; CODE XREF: re_search_internal+8F2↑j
.text:000000000001137C                                         ; re_search_internal+105D↑j ...
.text:000000000001137C                 cmp     [rsp+268h+arg_0], 0
.text:0000000000011385                 jz      loc_10C40
.text:000000000001138B                 cmp     [rsp+268h+arg_0], 1
.text:0000000000011394                 jz      loc_117B8
.text:000000000001139A                 mov     rsi, [rsp+268h+var_1B0]
.text:00000000000113A2                 mov     rcx, [rsp+268h+arg_0]
.text:00000000000113AA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000113B1                 shl     rcx, 4
.text:00000000000113B5                 lea     rax, [rsi+10h]
.text:00000000000113B9                 add     rcx, rsi
.text:00000000000113BC
.text:00000000000113BC loc_113BC:                              ; CODE XREF: re_search_internal+12DA↓j
.text:00000000000113BC                 mov     [rax+8], rdx
.text:00000000000113C0                 mov     [rax], rdx
.text:00000000000113C3                 add     rax, 10h
.text:00000000000113C7                 cmp     rcx, rax
.text:00000000000113CA                 jnz     short loc_113BC
.text:00000000000113CC                 mov     rdi, [rsp+268h+var_1B0]
.text:00000000000113D4                 mov     rax, [rsp+268h+var_A0]
.text:00000000000113DC                 mov     [rdi+8], rax
.text:00000000000113E0                 mov     rax, [rsp+268h+var_220]
.text:00000000000113E5                 mov     qword ptr [rdi], 0
.text:00000000000113EC                 test    byte ptr [rax+38h], 10h
.text:00000000000113F0                 jnz     loc_117D3
.text:00000000000113F6                 cmp     [rsp+268h+arg_0], 1
.text:00000000000113FF                 jz      loc_117D3
.text:0000000000011405                 mov     rax, [rsp+268h+var_230]
.text:000000000001140A                 xor     r8d, r8d
.text:000000000001140D                 test    byte ptr [rax+0B0h], 1
.text:0000000000011414                 jz      short loc_11425
.text:0000000000011416                 xor     r8d, r8d
.text:0000000000011419                 cmp     qword ptr [rax+98h], 0
.text:0000000000011421                 setnle  r8b
.text:0000000000011425
.text:0000000000011425 loc_11425:                              ; CODE XREF: re_search_internal+1324↑j
.text:0000000000011425                 mov     rbx, [rsp+268h+var_1B0]
.text:000000000001142D                 mov     rdx, [rsp+268h+arg_0]
.text:0000000000011435                 mov     rsi, [rsp+268h+var_268]
.text:0000000000011439                 mov     rdi, [rsp+268h+var_220]
.text:000000000001143E                 mov     rcx, rbx
.text:0000000000011441                 call    set_regs
.text:0000000000011446                 test    eax, eax
.text:0000000000011448                 jnz     loc_1171D
.text:000000000001144E                 mov     rax, [rbx]
.text:0000000000011451
.text:0000000000011451 loc_11451:                              ; CODE XREF: re_search_internal+16E5↓j
.text:0000000000011451                 movzx   r11d, [rsp+268h+var_BC]
.text:000000000001145A                 mov     r10, [rsp+268h+var_118]
.text:0000000000011462                 xor     ecx, ecx
.text:0000000000011464                 mov     r9, [rsp+268h+var_130]
.text:000000000001146C                 mov     r8, [rsp+268h+var_110]
.text:0000000000011474                 mov     rdi, [rsp+268h+var_190]
.text:000000000001147C                 mov     rdx, [rsp+268h+var_1B0]
.text:0000000000011484                 jmp     short loc_11489
.text:0000000000011486 ; ---------------------------------------------------------------------------
.text:0000000000011486
.text:0000000000011486 loc_11486:                              ; CODE XREF: re_search_internal+13C9↓j
.text:0000000000011486                 mov     rax, [rdx]
.text:0000000000011489
.text:0000000000011489 loc_11489:                              ; CODE XREF: re_search_internal+1394↑j
.text:0000000000011489                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001148D                 jz      short loc_114A9
.text:000000000001148F                 test    r11b, r11b
.text:0000000000011492                 mov     rsi, [rdx+8]
.text:0000000000011496                 jnz     loc_117DA
.text:000000000001149C
.text:000000000001149C loc_1149C:                              ; CODE XREF: re_search_internal+16FF↓j
.text:000000000001149C                                         ; re_search_internal+1707↓j
.text:000000000001149C                 add     rax, rdi
.text:000000000001149F                 add     rsi, rdi
.text:00000000000114A2                 mov     [rdx], rax
.text:00000000000114A5                 mov     [rdx+8], rsi
.text:00000000000114A9
.text:00000000000114A9 loc_114A9:                              ; CODE XREF: re_search_internal+139D↑j
.text:00000000000114A9                 add     rcx, 1
.text:00000000000114AD                 add     rdx, 10h
.text:00000000000114B1                 cmp     rcx, [rsp+268h+arg_0]
.text:00000000000114B9                 jnz     short loc_11486
.text:00000000000114BB                 cmp     [rsp+268h+var_1D0], 0
.text:00000000000114C4                 jle     short loc_11505
.text:00000000000114C6                 mov     rdx, [rsp+268h+var_1D0]
.text:00000000000114CE                 mov     rdi, [rsp+268h+var_1B0]
.text:00000000000114D6                 mov     rax, rcx
.text:00000000000114D9                 shl     rax, 4
.text:00000000000114DD                 add     rdx, rcx
.text:00000000000114E0                 lea     rax, [rdi+rax+8]
.text:00000000000114E5                 shl     rdx, 4
.text:00000000000114E9                 lea     rsi, [rdi+rdx+8]
.text:00000000000114EE                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000114F5
.text:00000000000114F5 loc_114F5:                              ; CODE XREF: re_search_internal+1413↓j
.text:00000000000114F5                 mov     [rax-8], rdx
.text:00000000000114F9                 mov     [rax], rdx
.text:00000000000114FC                 add     rax, 10h
.text:0000000000011500                 cmp     rsi, rax
.text:0000000000011503                 jnz     short loc_114F5
.text:0000000000011505
.text:0000000000011505 loc_11505:                              ; CODE XREF: re_search_internal+13D4↑j
.text:0000000000011505                 mov     rax, [rsp+268h+var_230]
.text:000000000001150A                 mov     rdi, [rsp+268h+var_90]
.text:0000000000011512                 mov     r9, [rax+0E0h]
.text:0000000000011519                 test    r9, r9
.text:000000000001151C                 jz      loc_10C48
.text:0000000000011522                 mov     r10, [rsp+268h+var_1B0]
.text:000000000001152A                 xor     r8d, r8d
.text:000000000001152D                 lea     rdx, [r10+10h]
.text:0000000000011531                 jmp     short loc_11569
.text:0000000000011533 ; ---------------------------------------------------------------------------
.text:0000000000011533
.text:0000000000011533 loc_11533:                              ; CODE XREF: re_search_internal+1480↓j
.text:0000000000011533                 mov     rax, [r9+rsi*8-8]
.text:0000000000011538                 cmp     rax, r8
.text:000000000001153B                 jz      short loc_11562
.text:000000000001153D                 add     rax, 1
.text:0000000000011541                 shl     rax, 4
.text:0000000000011545                 mov     rax, [r10+rax]
.text:0000000000011549                 mov     [rdx], rax
.text:000000000001154C                 mov     rax, [r9+rsi*8-8]
.text:0000000000011551                 add     rax, 1
.text:0000000000011555                 shl     rax, 4
.text:0000000000011559                 mov     rax, [r10+rax+8]
.text:000000000001155E                 mov     [rdx+8], rax
.text:0000000000011562
.text:0000000000011562 loc_11562:                              ; CODE XREF: re_search_internal+144B↑j
.text:0000000000011562                 add     rdx, 10h
.text:0000000000011566                 mov     r8, rsi
.text:0000000000011569
.text:0000000000011569 loc_11569:                              ; CODE XREF: re_search_internal+1441↑j
.text:0000000000011569                 lea     rsi, [r8+1]
.text:000000000001156D                 cmp     rsi, rcx
.text:0000000000011570                 jnz     short loc_11533
.text:0000000000011572                 jmp     loc_10C48
.text:0000000000011572 ; ---------------------------------------------------------------------------
.text:0000000000011577                 align 20h
.text:0000000000011580
.text:0000000000011580 loc_11580:                              ; CODE XREF: re_search_internal+B6A↑j
.text:0000000000011580                 mov     rdi, [rsp+268h+var_268]
.text:0000000000011584                 call    match_ctx_clean
.text:0000000000011589                 mov     rdi, [rsp+268h+var_50] ; ptr
.text:0000000000011591                 call    _free
.text:0000000000011596                 mov     rdi, [rsp+268h+var_70] ; ptr
.text:000000000001159E                 call    _free
.text:00000000000115A3                 jmp     loc_10C60
.text:00000000000115A8 ; ---------------------------------------------------------------------------
.text:00000000000115A8
.text:00000000000115A8 loc_115A8:                              ; CODE XREF: re_search_internal+393↑j
.text:00000000000115A8                 mov     rax, [rsp+268h+var_230]
.text:00000000000115AD                 test    byte ptr [rax+0B0h], 2
.text:00000000000115B4                 jnz     loc_10489
.text:00000000000115BA                 mov     [rsp+268h+var_90], 0
.text:00000000000115C6                 jmp     loc_104C5
.text:00000000000115CB ; ---------------------------------------------------------------------------
.text:00000000000115CB
.text:00000000000115CB loc_115CB:                              ; CODE XREF: re_search_internal+A18↑j
.text:00000000000115CB                 mov     rdi, r12        ; ptr
.text:00000000000115CE                 call    _free
.text:00000000000115D3                 mov     rdi, rbp        ; ptr
.text:00000000000115D6                 call    _free
.text:00000000000115DB                 jmp     loc_11020
.text:00000000000115E0 ; ---------------------------------------------------------------------------
.text:00000000000115E0
.text:00000000000115E0 loc_115E0:                              ; CODE XREF: re_search_internal+B0C↑j
.text:00000000000115E0                 mov     [rsp+268h+var_190], rax
.text:00000000000115E8                 mov     rdi, [rsp+268h+var_90]
.text:00000000000115F0                 mov     [rsp+268h+var_20C], 1
.text:00000000000115F8                 jmp     loc_10C48
.text:00000000000115FD ; ---------------------------------------------------------------------------
.text:00000000000115FD
.text:00000000000115FD loc_115FD:                              ; CODE XREF: re_search_internal+BD1↑j
.text:00000000000115FD                 test    rax, rax
.text:0000000000011600                 mov     r13, rax
.text:0000000000011603                 jnz     loc_107F8
.text:0000000000011609                 jmp     loc_10944
.text:0000000000011609 ; ---------------------------------------------------------------------------
.text:000000000001160E                 align 10h
.text:0000000000011610
.text:0000000000011610 loc_11610:                              ; CODE XREF: re_search_internal+BDA↑j
.text:0000000000011610                 mov     r13, rax
.text:0000000000011613                 jmp     loc_107F8
.text:0000000000011618 ; ---------------------------------------------------------------------------
.text:0000000000011618
.text:0000000000011618 loc_11618:                              ; CODE XREF: re_search_internal+C43↑j
.text:0000000000011618                 cmp     eax, 0Ch
.text:000000000001161B                 jz      loc_11160
.text:0000000000011621                 lea     rcx, __PRETTY_FUNCTION___7972 ; "check_matching"
.text:0000000000011628                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000001162F                 lea     rdi, aErrRegEspace ; "err == REG_ESPACE"
.text:0000000000011636                 mov     edx, 46Ch       ; line
.text:000000000001163B                 call    ___assert_fail
.text:0000000000011640 ; ---------------------------------------------------------------------------
.text:0000000000011640
.text:0000000000011640 loc_11640:                              ; CODE XREF: re_search_internal+6C7↑j
.text:0000000000011640                 cmp     byte ptr [r14+68h], 0
.text:0000000000011645                 js      short loc_116B6
.text:0000000000011647
.text:0000000000011647 loc_11647:                              ; CODE XREF: re_search_internal+15EA↓j
.text:0000000000011647                 mov     esi, [rsp+268h+var_210]
.text:000000000001164B                 mov     rax, [rsp+268h+var_260]
.text:0000000000011650                 test    esi, esi
.text:0000000000011652                 mov     [rsp+268h+var_248], rax
.text:0000000000011657                 jz      loc_10956
.text:000000000001165D                 mov     [rsp+268h+var_238], 1
.text:0000000000011666                 jmp     loc_107BD
.text:000000000001166B ; ---------------------------------------------------------------------------
.text:000000000001166B
.text:000000000001166B loc_1166B:                              ; CODE XREF: re_search_internal+917↑j
.text:000000000001166B                 mov     rdi, rbx
.text:000000000001166E                 mov     [rsp+268h+var_20C], 0Ch
.text:0000000000011676                 jmp     loc_10C48
.text:000000000001167B ; ---------------------------------------------------------------------------
.text:000000000001167B
.text:000000000001167B loc_1167B:                              ; CODE XREF: re_search_internal+69C↑j
.text:000000000001167B                 lea     rbx, [r14+10h]
.text:000000000001167F                 lea     rbp, [r14+18h]
.text:0000000000011683                 mov     rdi, [rsp+268h+var_268]
.text:0000000000011687                 xor     ecx, ecx
.text:0000000000011689                 mov     rdx, rbp
.text:000000000001168C                 mov     rsi, rbx
.text:000000000001168F                 call    check_subexp_matching_top_isra_18
.text:0000000000011694                 test    eax, eax
.text:0000000000011696                 mov     [rsp+268h+var_198], eax
.text:000000000001169D                 jnz     short loc_116E8
.text:000000000001169F                 movzx   eax, byte ptr [r14+68h]
.text:00000000000116A4                 test    al, 40h
.text:00000000000116A6                 jnz     loc_11790
.text:00000000000116AC
.text:00000000000116AC loc_116AC:                              ; CODE XREF: re_search_internal+16C3↓j
.text:00000000000116AC                 mov     byte ptr [rsp+268h+var_250], 0
.text:00000000000116B1                 jmp     loc_107A3
.text:00000000000116B6 ; ---------------------------------------------------------------------------
.text:00000000000116B6
.text:00000000000116B6 loc_116B6:                              ; CODE XREF: re_search_internal+1555↑j
.text:00000000000116B6                 mov     rsi, [r14+10h]
.text:00000000000116BA                 mov     rcx, [rsp+268h+var_260]
.text:00000000000116BF                 lea     rdx, [r14+18h]
.text:00000000000116C3                 mov     rdi, [rsp+268h+var_268]
.text:00000000000116C7                 call    check_halt_state_context_isra_20
.text:00000000000116CC                 test    rax, rax
.text:00000000000116CF                 mov     [rsp+268h+var_238], rax
.text:00000000000116D4                 jz      loc_107BD
.text:00000000000116DA                 jmp     loc_11647
.text:00000000000116DF ; ---------------------------------------------------------------------------
.text:00000000000116DF
.text:00000000000116DF loc_116DF:                              ; CODE XREF: re_search_internal+1185↑j
.text:00000000000116DF                 mov     r14, [rbx+60h]
.text:00000000000116E3                 jmp     loc_11100
.text:00000000000116E8 ; ---------------------------------------------------------------------------
.text:00000000000116E8
.text:00000000000116E8 loc_116E8:                              ; CODE XREF: re_search_internal+15AD↑j
.text:00000000000116E8                                         ; re_search_internal+16B8↓j
.text:00000000000116E8                 cdqe
.text:00000000000116EA                 mov     [rsp+268h+var_248], rax
.text:00000000000116EF                 jmp     loc_10956
.text:00000000000116F4 ; ---------------------------------------------------------------------------
.text:00000000000116F4
.text:00000000000116F4 loc_116F4:                              ; CODE XREF: re_search_internal+9E6↑j
.text:00000000000116F4                 mov     r14, [rsp+268h+var_250]
.text:00000000000116F9                 mov     eax, r15d
.text:00000000000116FC
.text:00000000000116FC loc_116FC:                              ; CODE XREF: re_search_internal+169B↓j
.text:00000000000116FC                 mov     rdi, r12        ; ptr
.text:00000000000116FF                 mov     dword ptr [rsp+268h+var_260], eax
.text:0000000000011703                 call    _free
.text:0000000000011708                 mov     rdi, r14        ; ptr
.text:000000000001170B                 call    _free
.text:0000000000011710                 mov     eax, dword ptr [rsp+268h+var_260]
.text:0000000000011714                 cmp     eax, 1
.text:0000000000011717                 jz      loc_11020
.text:000000000001171D
.text:000000000001171D loc_1171D:                              ; CODE XREF: re_search_internal+1358↑j
.text:000000000001171D                 mov     rdi, [rsp+268h+var_90]
.text:0000000000011725                 mov     [rsp+268h+var_20C], eax
.text:0000000000011729                 jmp     loc_10C48
.text:0000000000011729 ; ---------------------------------------------------------------------------
.text:000000000001172E                 align 10h
.text:0000000000011730
.text:0000000000011730 loc_11730:                              ; CODE XREF: re_search_internal+118D↑j
.text:0000000000011730                 test    al, 4
.text:0000000000011732                 jz      loc_1076E
.text:0000000000011738                 mov     rdx, [r14+50h]
.text:000000000001173C                 mov     rdi, [rsp+268h+var_240]
.text:0000000000011741                 mov     ecx, eax
.text:0000000000011743                 mov     rsi, rbx
.text:0000000000011746                 call    re_acquire_state_context
.text:000000000001174B                 mov     r14, rax
.text:000000000001174E                 jmp     loc_11100
.text:0000000000011753 ; ---------------------------------------------------------------------------
.text:0000000000011753
.text:0000000000011753 loc_11753:                              ; CODE XREF: re_search_internal+9F1↑j
.text:0000000000011753                                         ; re_search_internal+9FC↑j
.text:0000000000011753                 mov     r15, [rsp+268h+var_258]
.text:0000000000011758                 mov     rcx, [rsp+268h+var_260]
.text:000000000001175D                 mov     rdx, rbp
.text:0000000000011760                 mov     rsi, r12
.text:0000000000011763                 mov     [rsp+268h+var_248], r14
.text:0000000000011768                 mov     rdi, r15
.text:000000000001176B                 call    merge_state_array
.text:0000000000011770                 mov     rdi, rbp        ; ptr
.text:0000000000011773                 mov     dword ptr [rsp+268h+var_260], eax
.text:0000000000011777                 call    _free
.text:000000000001177C                 mov     eax, dword ptr [rsp+268h+var_260]
.text:0000000000011780                 test    eax, eax
.text:0000000000011782                 jz      loc_11352
.text:0000000000011788
.text:0000000000011788 loc_11788:                              ; CODE XREF: re_search_internal+1251↑j
.text:0000000000011788                 xor     r14d, r14d
.text:000000000001178B                 jmp     loc_116FC
.text:0000000000011790 ; ---------------------------------------------------------------------------
.text:0000000000011790
.text:0000000000011790 loc_11790:                              ; CODE XREF: re_search_internal+15B6↑j
.text:0000000000011790                 mov     rdi, [rsp+268h+var_268]
.text:0000000000011794                 mov     rdx, rbp
.text:0000000000011797                 mov     rsi, rbx
.text:000000000001179A                 call    transit_state_bkref_isra_34
.text:000000000001179F                 test    eax, eax
.text:00000000000117A1                 mov     [rsp+268h+var_198], eax
.text:00000000000117A8                 jnz     loc_116E8
.text:00000000000117AE                 movzx   eax, byte ptr [r14+68h]
.text:00000000000117B3                 jmp     loc_116AC
.text:00000000000117B8 ; ---------------------------------------------------------------------------
.text:00000000000117B8
.text:00000000000117B8 loc_117B8:                              ; CODE XREF: re_search_internal+12A4↑j
.text:00000000000117B8                 mov     rsi, [rsp+268h+var_1B0]
.text:00000000000117C0                 mov     rax, [rsp+268h+var_A0]
.text:00000000000117C8                 mov     qword ptr [rsi], 0
.text:00000000000117CF                 mov     [rsi+8], rax
.text:00000000000117D3
.text:00000000000117D3 loc_117D3:                              ; CODE XREF: re_search_internal+1300↑j
.text:00000000000117D3                                         ; re_search_internal+130F↑j
.text:00000000000117D3                 xor     eax, eax
.text:00000000000117D5                 jmp     loc_11451
.text:00000000000117DA ; ---------------------------------------------------------------------------
.text:00000000000117DA
.text:00000000000117DA loc_117DA:                              ; CODE XREF: re_search_internal+13A6↑j
.text:00000000000117DA                 cmp     r10, rax
.text:00000000000117DD                 jz      short loc_117FC
.text:00000000000117DF                 mov     rax, [r9+rax*8]
.text:00000000000117E3
.text:00000000000117E3 loc_117E3:                              ; CODE XREF: re_search_internal+170F↓j
.text:00000000000117E3                 cmp     r10, rsi
.text:00000000000117E6                 mov     [rdx], rax
.text:00000000000117E9                 jz      short loc_117F4
.text:00000000000117EB                 mov     rsi, [r9+rsi*8]
.text:00000000000117EF                 jmp     loc_1149C
.text:00000000000117F4 ; ---------------------------------------------------------------------------
.text:00000000000117F4
.text:00000000000117F4 loc_117F4:                              ; CODE XREF: re_search_internal+16F9↑j
.text:00000000000117F4                 mov     rsi, r8
.text:00000000000117F7                 jmp     loc_1149C
.text:00000000000117FC ; ---------------------------------------------------------------------------
.text:00000000000117FC
.text:00000000000117FC loc_117FC:                              ; CODE XREF: re_search_internal+16ED↑j
.text:00000000000117FC                 mov     rax, r8
.text:00000000000117FF                 jmp     short loc_117E3
.text:0000000000011801 ; ---------------------------------------------------------------------------
.text:0000000000011801
.text:0000000000011801 loc_11801:                              ; CODE XREF: re_search_internal+574↑j
.text:0000000000011801                                         ; re_search_internal+AB1↑j
.text:0000000000011801                 mov     [rsp+268h+var_190], rbp
.text:0000000000011809                 jmp     loc_106C8       ; jumptable 00000000000105E6 case 4
.text:000000000001180E ; ---------------------------------------------------------------------------
.text:000000000001180E
.text:000000000001180E loc_1180E:                              ; CODE XREF: re_search_internal+84E↑j
.text:000000000001180E                 mov     [rsp+268h+var_100], rax
.text:0000000000011816                 jmp     loc_10944
.text:000000000001181B ; ---------------------------------------------------------------------------
.text:000000000001181B
.text:000000000001181B loc_1181B:                              ; CODE XREF: re_search_internal+B8E↑j
.text:000000000001181B                 call    ___stack_chk_fail
.text:000000000001181B ; } // starts at 100F0
.text:000000000001181B re_search_internal endp
.text:000000000001181B
.text:0000000000011820
.text:0000000000011820 ; =============== S U B R O U T I N E =======================================
.text:0000000000011820
.text:0000000000011820
.text:0000000000011820 update_cur_sifted_state proc near       ; CODE XREF: sift_states_backward+70↑p
.text:0000000000011820                                         ; sift_states_backward+28F↑p
.text:0000000000011820
.text:0000000000011820 var_D0          = qword ptr -0D0h
.text:0000000000011820 var_C8          = qword ptr -0C8h
.text:0000000000011820 var_C0          = qword ptr -0C0h
.text:0000000000011820 var_B8          = qword ptr -0B8h
.text:0000000000011820 var_B0          = qword ptr -0B0h
.text:0000000000011820 var_A8          = qword ptr -0A8h
.text:0000000000011820 var_A0          = qword ptr -0A0h
.text:0000000000011820 var_98          = qword ptr -98h
.text:0000000000011820 var_90          = qword ptr -90h
.text:0000000000011820 var_7C          = dword ptr -7Ch
.text:0000000000011820 var_78          = xmmword ptr -78h
.text:0000000000011820 var_68          = xmmword ptr -68h
.text:0000000000011820 var_50          = qword ptr -50h
.text:0000000000011820 ptr             = qword ptr -48h
.text:0000000000011820 var_40          = qword ptr -40h
.text:0000000000011820
.text:0000000000011820 ; __unwind {
.text:0000000000011820                 push    r15
.text:0000000000011822                 push    r14
.text:0000000000011824                 mov     rax, rdi
.text:0000000000011827                 push    r13
.text:0000000000011829                 push    r12
.text:000000000001182B                 mov     r13, rsi
.text:000000000001182E                 push    rbp
.text:000000000001182F                 push    rbx
.text:0000000000011830                 mov     rbp, rdx
.text:0000000000011833                 mov     rbx, rcx
.text:0000000000011836                 lea     rcx, ds:0[rdx*8]
.text:000000000001183E                 sub     rsp, 0A8h
.text:0000000000011845                 mov     r12, [rax+98h]
.text:000000000001184C                 mov     rax, [rax+0B8h]
.text:0000000000011853                 mov     [rsp+0D8h+var_D0], rdi
.text:0000000000011858                 mov     [rsp+0D8h+var_C0], rcx
.text:000000000001185D                 mov     rdi, fs:28h
.text:0000000000011866                 mov     [rsp+0D8h+var_40], rdi
.text:000000000001186E                 xor     edi, edi
.text:0000000000011870                 mov     rdx, [rax+rdx*8]
.text:0000000000011874                 mov     [rsp+0D8h+var_7C], 0
.text:000000000001187C                 mov     rcx, [rbx+8]
.text:0000000000011880                 test    rdx, rdx
.text:0000000000011883                 jz      loc_11AD8
.text:0000000000011889                 lea     rdi, [rdx+8]
.text:000000000001188D                 test    rcx, rcx
.text:0000000000011890                 mov     [rsp+0D8h+var_C8], rdi
.text:0000000000011895                 jnz     short loc_118E8
.text:0000000000011897                 mov     rdx, [rsi]
.text:000000000001189A                 mov     qword ptr [rdx+rbp*8], 0
.text:00000000000118A2                 mov     rdx, [rax+rbp*8]
.text:00000000000118A6                 xor     eax, eax
.text:00000000000118A8                 test    byte ptr [rdx+68h], 40h
.text:00000000000118AC                 jnz     loc_1198F
.text:00000000000118B2                 nop     word ptr [rax+rax+00h]
.text:00000000000118B8
.text:00000000000118B8 loc_118B8:                              ; CODE XREF: update_cur_sifted_state+E9↓j
.text:00000000000118B8                                         ; update_cur_sifted_state+112↓j ...
.text:00000000000118B8                 mov     rdi, [rsp+0D8h+var_40]
.text:00000000000118C0                 xor     rdi, fs:28h
.text:00000000000118C9                 jnz     loc_1206B
.text:00000000000118CF                 add     rsp, 0A8h
.text:00000000000118D6                 pop     rbx
.text:00000000000118D7                 pop     rbp
.text:00000000000118D8                 pop     r12
.text:00000000000118DA                 pop     r13
.text:00000000000118DC                 pop     r14
.text:00000000000118DE                 pop     r15
.text:00000000000118E0                 retn
.text:00000000000118E0 ; ---------------------------------------------------------------------------
.text:00000000000118E1                 align 8
.text:00000000000118E8
.text:00000000000118E8 loc_118E8:                              ; CODE XREF: update_cur_sifted_state+75↑j
.text:00000000000118E8                 lea     rdi, [rsp+0D8h+var_78]
.text:00000000000118ED                 mov     rdx, rbx
.text:00000000000118F0                 mov     rsi, r12
.text:00000000000118F3                 mov     dword ptr [rsp+0D8h+var_78], 0
.text:00000000000118FB                 call    re_acquire_state
.text:0000000000011900                 mov     rdx, rax
.text:0000000000011903                 mov     eax, dword ptr [rsp+0D8h+var_78]
.text:0000000000011907                 test    eax, eax
.text:0000000000011909                 jnz     short loc_118B8
.text:000000000001190B                 mov     r15, [rdx+38h]
.text:000000000001190F                 lea     r14, [rdx+38h]
.text:0000000000011913                 test    r15, r15
.text:0000000000011916                 jz      loc_11B20
.text:000000000001191C
.text:000000000001191C loc_1191C:                              ; CODE XREF: update_cur_sifted_state+33B↓j
.text:000000000001191C                                         ; update_cur_sifted_state+348↓j
.text:000000000001191C                 mov     rsi, [rsp+0D8h+var_C8]
.text:0000000000011921                 mov     rdx, r14
.text:0000000000011924                 mov     rdi, rbx
.text:0000000000011927                 call    re_node_set_add_intersect
.text:000000000001192C                 test    eax, eax
.text:000000000001192E                 mov     [rsp+0D8h+var_7C], eax
.text:0000000000011932                 jnz     short loc_118B8
.text:0000000000011934                 cmp     qword ptr [r13+28h], 0
.text:0000000000011939                 jnz     loc_11BB0
.text:000000000001193F
.text:000000000001193F loc_1193F:                              ; CODE XREF: update_cur_sifted_state+483↓j
.text:000000000001193F                 mov     r14, [rsp+0D8h+var_C0]
.text:0000000000011944                 add     r14, [r13+0]
.text:0000000000011948
.text:0000000000011948 loc_11948:                              ; CODE XREF: update_cur_sifted_state+389↓j
.text:0000000000011948                 lea     rdi, [rsp+0D8h+var_7C]
.text:000000000001194D                 mov     rdx, rbx
.text:0000000000011950                 mov     rsi, r12
.text:0000000000011953                 call    re_acquire_state
.text:0000000000011958                 mov     [r14], rax
.text:000000000001195B                 mov     eax, [rsp+0D8h+var_7C]
.text:000000000001195F                 test    eax, eax
.text:0000000000011961                 jnz     loc_118B8
.text:0000000000011967                 cmp     [rsp+0D8h+var_C8], 0
.text:000000000001196D                 jz      loc_118B8
.text:0000000000011973                 mov     rax, [rsp+0D8h+var_D0]
.text:0000000000011978                 mov     rax, [rax+0B8h]
.text:000000000001197F                 mov     rdx, [rax+rbp*8]
.text:0000000000011983                 xor     eax, eax
.text:0000000000011985                 test    byte ptr [rdx+68h], 40h
.text:0000000000011989                 jz      loc_118B8
.text:000000000001198F
.text:000000000001198F loc_1198F:                              ; CODE XREF: update_cur_sifted_state+8C↑j
.text:000000000001198F                 mov     rax, [rsp+0D8h+var_D0]
.text:0000000000011994                 xor     ebx, ebx
.text:0000000000011996                 mov     rsi, [rax+0C8h]
.text:000000000001199D                 mov     rdx, rsi
.text:00000000000119A0
.text:00000000000119A0 loc_119A0:                              ; CODE XREF: update_cur_sifted_state+2F7↓j
.text:00000000000119A0                 cmp     rbx, rdx
.text:00000000000119A3                 jge     short loc_11A03
.text:00000000000119A5                 lea     rax, [rbx+rdx]
.text:00000000000119A9                 mov     rcx, rax
.text:00000000000119AC                 shr     rcx, 3Fh
.text:00000000000119B0                 add     rcx, rax
.text:00000000000119B3                 mov     rax, [rsp+0D8h+var_D0]
.text:00000000000119B8                 sar     rcx, 1
.text:00000000000119BB                 mov     rdi, [rax+0D8h]
.text:00000000000119C2                 lea     rax, [rcx+rcx*4]
.text:00000000000119C6                 cmp     rbp, [rdi+rax*8+8]
.text:00000000000119CB                 jle     short loc_119FE
.text:00000000000119CD                 jmp     loc_11B07
.text:00000000000119CD ; ---------------------------------------------------------------------------
.text:00000000000119D2                 align 8
.text:00000000000119D8
.text:00000000000119D8 loc_119D8:                              ; CODE XREF: update_cur_sifted_state+1E1↓j
.text:00000000000119D8                 lea     rdx, [rbx+rcx]
.text:00000000000119DC                 mov     rax, rdx
.text:00000000000119DF                 shr     rax, 3Fh
.text:00000000000119E3                 add     rax, rdx
.text:00000000000119E6                 sar     rax, 1
.text:00000000000119E9                 lea     rdx, [rax+rax*4]
.text:00000000000119ED                 mov     r8, rax
.text:00000000000119F0                 cmp     rbp, [rdi+rdx*8+8]
.text:00000000000119F5                 jg      loc_11B10
.text:00000000000119FB                 mov     rcx, rax
.text:00000000000119FE
.text:00000000000119FE loc_119FE:                              ; CODE XREF: update_cur_sifted_state+1AB↑j
.text:00000000000119FE                 cmp     rbx, rcx
.text:0000000000011A01                 jl      short loc_119D8
.text:0000000000011A03
.text:0000000000011A03 loc_11A03:                              ; CODE XREF: update_cur_sifted_state+183↑j
.text:0000000000011A03                 cmp     rsi, rbx
.text:0000000000011A06                 jle     loc_11B00
.text:0000000000011A0C                 lea     rax, [rbx+rbx*4]
.text:0000000000011A10                 lea     rsi, ds:0[rax*8]
.text:0000000000011A18                 mov     rax, [rsp+0D8h+var_D0]
.text:0000000000011A1D                 mov     [rsp+0D8h+var_98], rsi
.text:0000000000011A22                 mov     rax, [rax+0D8h]
.text:0000000000011A29                 cmp     rbp, [rax+rsi+8]
.text:0000000000011A2E                 jnz     loc_11B00
.text:0000000000011A34                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000011A38                 jz      loc_11B00
.text:0000000000011A3E                 mov     rax, [rsp+0D8h+var_D0]
.text:0000000000011A43                 mov     qword ptr [rsp+0D8h+var_78], 0
.text:0000000000011A4C                 mov     r12, [rax+98h]
.text:0000000000011A53                 mov     rax, [rsp+0D8h+var_C8]
.text:0000000000011A58                 cmp     qword ptr [rax+8], 0
.text:0000000000011A5D                 jle     loc_11B00
.text:0000000000011A63                 lea     rax, [rsp+0D8h+var_78]
.text:0000000000011A68                 mov     [rsp+0D8h+var_B8], 0
.text:0000000000011A71                 mov     [rsp+0D8h+var_90], rbx
.text:0000000000011A76                 mov     r15, r13
.text:0000000000011A79                 mov     [rsp+0D8h+var_A0], rax
.text:0000000000011A7E                 jmp     short loc_11AA2
.text:0000000000011A80 ; ---------------------------------------------------------------------------
.text:0000000000011A80
.text:0000000000011A80 loc_11A80:                              ; CODE XREF: update_cur_sifted_state+2A7↓j
.text:0000000000011A80                                         ; update_cur_sifted_state+2AD↓j
.text:0000000000011A80                 cmp     al, 4
.text:0000000000011A82                 jz      loc_11E08
.text:0000000000011A88
.text:0000000000011A88 loc_11A88:                              ; CODE XREF: update_cur_sifted_state+2AF↓j
.text:0000000000011A88                                         ; update_cur_sifted_state+7C3↓j
.text:0000000000011A88                 mov     rcx, [rsp+0D8h+var_C8]
.text:0000000000011A8D                 add     [rsp+0D8h+var_B8], 1
.text:0000000000011A93                 mov     rax, [rsp+0D8h+var_B8]
.text:0000000000011A98                 cmp     rax, [rcx+8]
.text:0000000000011A9C                 jge     loc_1205B
.text:0000000000011AA2
.text:0000000000011AA2 loc_11AA2:                              ; CODE XREF: update_cur_sifted_state+25E↑j
.text:0000000000011AA2                 mov     rax, [rsp+0D8h+var_C8]
.text:0000000000011AA7                 mov     rdi, [rsp+0D8h+var_B8]
.text:0000000000011AAC                 mov     rax, [rax+10h]
.text:0000000000011AB0                 mov     r14, [rax+rdi*8]
.text:0000000000011AB4                 mov     rax, r14
.text:0000000000011AB7                 shl     rax, 4
.text:0000000000011ABB                 add     rax, [r12]
.text:0000000000011ABF                 cmp     r14, [r15+10h]
.text:0000000000011AC3                 movzx   eax, byte ptr [rax+8]
.text:0000000000011AC7                 jnz     short loc_11A80
.text:0000000000011AC9                 cmp     rbp, [r15+18h]
.text:0000000000011ACD                 jnz     short loc_11A80
.text:0000000000011ACF                 jmp     short loc_11A88
.text:0000000000011ACF ; ---------------------------------------------------------------------------
.text:0000000000011AD1                 align 8
.text:0000000000011AD8
.text:0000000000011AD8 loc_11AD8:                              ; CODE XREF: update_cur_sifted_state+63↑j
.text:0000000000011AD8                 lea     r14, ds:0[rbp*8]
.text:0000000000011AE0                 add     r14, [rsi]
.text:0000000000011AE3                 test    rcx, rcx
.text:0000000000011AE6                 jnz     loc_11BA0
.text:0000000000011AEC                 mov     qword ptr [r14], 0
.text:0000000000011AF3                 xor     eax, eax
.text:0000000000011AF5                 jmp     loc_118B8
.text:0000000000011AF5 ; ---------------------------------------------------------------------------
.text:0000000000011AFA                 align 20h
.text:0000000000011B00
.text:0000000000011B00 loc_11B00:                              ; CODE XREF: update_cur_sifted_state+1E6↑j
.text:0000000000011B00                                         ; update_cur_sifted_state+20E↑j ...
.text:0000000000011B00                 xor     eax, eax
.text:0000000000011B02                 jmp     loc_118B8
.text:0000000000011B07 ; ---------------------------------------------------------------------------
.text:0000000000011B07
.text:0000000000011B07 loc_11B07:                              ; CODE XREF: update_cur_sifted_state+1AD↑j
.text:0000000000011B07                 mov     r8, rcx
.text:0000000000011B0A                 mov     rcx, rdx
.text:0000000000011B0D                 nop     dword ptr [rax]
.text:0000000000011B10
.text:0000000000011B10 loc_11B10:                              ; CODE XREF: update_cur_sifted_state+1D5↑j
.text:0000000000011B10                 lea     rbx, [r8+1]
.text:0000000000011B14                 mov     rdx, rcx
.text:0000000000011B17                 jmp     loc_119A0
.text:0000000000011B17 ; ---------------------------------------------------------------------------
.text:0000000000011B1C                 align 20h
.text:0000000000011B20
.text:0000000000011B20 loc_11B20:                              ; CODE XREF: update_cur_sifted_state+F6↑j
.text:0000000000011B20                 mov     rdi, [rbx+8]
.text:0000000000011B24                 mov     qword ptr [rdx+40h], 0
.text:0000000000011B2C                 mov     [rsp+0D8h+var_B8], rdx
.text:0000000000011B31                 mov     [rdx+38h], rdi
.text:0000000000011B35                 shl     rdi, 3          ; size
.text:0000000000011B39                 call    _malloc
.text:0000000000011B3E                 mov     rdx, [rsp+0D8h+var_B8]
.text:0000000000011B43                 test    rax, rax
.text:0000000000011B46                 mov     [rdx+48h], rax
.text:0000000000011B4A                 jz      short loc_11B93
.text:0000000000011B4C                 cmp     qword ptr [rbx+8], 0
.text:0000000000011B51                 mov     dword ptr [rsp+0D8h+var_78], 0
.text:0000000000011B59                 jg      short loc_11B6E
.text:0000000000011B5B                 jmp     loc_1191C
.text:0000000000011B60 ; ---------------------------------------------------------------------------
.text:0000000000011B60
.text:0000000000011B60 loc_11B60:                              ; CODE XREF: update_cur_sifted_state+371↓j
.text:0000000000011B60                 add     r15, 1
.text:0000000000011B64                 cmp     r15, [rbx+8]
.text:0000000000011B68                 jge     loc_1191C
.text:0000000000011B6E
.text:0000000000011B6E loc_11B6E:                              ; CODE XREF: update_cur_sifted_state+339↑j
.text:0000000000011B6E                 mov     rax, [rbx+10h]
.text:0000000000011B72                 mov     rdi, r14
.text:0000000000011B75                 mov     rax, [rax+r15*8]
.text:0000000000011B79                 lea     rdx, [rax+rax*2]
.text:0000000000011B7D                 mov     rax, [r12+38h]
.text:0000000000011B82                 lea     rsi, [rax+rdx*8]
.text:0000000000011B86                 call    re_node_set_merge
.text:0000000000011B8B                 test    eax, eax
.text:0000000000011B8D                 mov     dword ptr [rsp+0D8h+var_78], eax
.text:0000000000011B91                 jz      short loc_11B60
.text:0000000000011B93
.text:0000000000011B93 loc_11B93:                              ; CODE XREF: update_cur_sifted_state+32A↑j
.text:0000000000011B93                 mov     eax, 0Ch
.text:0000000000011B98                 jmp     loc_118B8
.text:0000000000011B98 ; ---------------------------------------------------------------------------
.text:0000000000011B9D                 align 20h
.text:0000000000011BA0
.text:0000000000011BA0 loc_11BA0:                              ; CODE XREF: update_cur_sifted_state+2C6↑j
.text:0000000000011BA0                 mov     [rsp+0D8h+var_C8], 0
.text:0000000000011BA9                 jmp     loc_11948
.text:0000000000011BA9 ; ---------------------------------------------------------------------------
.text:0000000000011BAE                 align 10h
.text:0000000000011BB0
.text:0000000000011BB0 loc_11BB0:                              ; CODE XREF: update_cur_sifted_state+119↑j
.text:0000000000011BB0                 mov     rax, [rsp+0D8h+var_D0]
.text:0000000000011BB5                 mov     rax, [rax+0D8h]
.text:0000000000011BBC                 mov     [rsp+0D8h+var_B8], rax
.text:0000000000011BC1                 jle     loc_11C9B
.text:0000000000011BC7                 xor     r15d, r15d
.text:0000000000011BCA                 nop     word ptr [rax+rax+00h]
.text:0000000000011BD0
.text:0000000000011BD0 loc_11BD0:                              ; CODE XREF: update_cur_sifted_state+475↓j
.text:0000000000011BD0                 mov     rax, [r13+30h]
.text:0000000000011BD4                 mov     rdi, [rsp+0D8h+var_B8]
.text:0000000000011BD9                 mov     rax, [rax+r15*8]
.text:0000000000011BDD                 lea     rax, [rax+rax*4]
.text:0000000000011BE1                 lea     rdx, [rdi+rax*8]
.text:0000000000011BE5                 cmp     rbp, [rdx+10h]
.text:0000000000011BE9                 jle     loc_11C8D
.text:0000000000011BEF                 cmp     rbp, [rdx+8]
.text:0000000000011BF3                 jg      loc_11C8D
.text:0000000000011BF9                 mov     rcx, [rdx]
.text:0000000000011BFC                 mov     rax, [r12]
.text:0000000000011C00                 mov     rsi, [rbx+8]
.text:0000000000011C04                 shl     rcx, 4
.text:0000000000011C08                 cmp     rbp, [rdx+18h]
.text:0000000000011C0C                 mov     r8, [rax+rcx]
.text:0000000000011C10                 jz      loc_11CB0
.text:0000000000011C16                 xor     r14d, r14d
.text:0000000000011C19                 test    rsi, rsi
.text:0000000000011C1C                 jle     short loc_11C8D
.text:0000000000011C1E                 mov     [rsp+0D8h+var_B0], rbp
.text:0000000000011C23                 mov     rbp, r8
.text:0000000000011C26                 jmp     short loc_11C3E
.text:0000000000011C26 ; ---------------------------------------------------------------------------
.text:0000000000011C28                 align 10h
.text:0000000000011C30
.text:0000000000011C30 loc_11C30:                              ; CODE XREF: update_cur_sifted_state+43A↓j
.text:0000000000011C30                                         ; update_cur_sifted_state+43F↓j
.text:0000000000011C30                 add     r14, 1
.text:0000000000011C34                 cmp     r14, [rbx+8]
.text:0000000000011C38                 jge     short loc_11C88
.text:0000000000011C3A
.text:0000000000011C3A loc_11C3A:                              ; CODE XREF: update_cur_sifted_state+461↓j
.text:0000000000011C3A                 mov     rax, [r12]
.text:0000000000011C3E
.text:0000000000011C3E loc_11C3E:                              ; CODE XREF: update_cur_sifted_state+406↑j
.text:0000000000011C3E                 mov     rdx, [rbx+10h]
.text:0000000000011C42                 mov     rsi, [rdx+r14*8]
.text:0000000000011C46                 mov     rdx, rsi
.text:0000000000011C49                 shl     rdx, 4
.text:0000000000011C4D                 add     rax, rdx
.text:0000000000011C50                 movzx   edx, byte ptr [rax+8]
.text:0000000000011C54                 sub     edx, 8
.text:0000000000011C57                 cmp     edx, 1
.text:0000000000011C5A                 ja      short loc_11C30
.text:0000000000011C5C                 cmp     rbp, [rax]
.text:0000000000011C5F                 jnz     short loc_11C30
.text:0000000000011C61                 mov     rcx, [rsp+0D8h+var_C8]
.text:0000000000011C66                 mov     rdx, rbx
.text:0000000000011C69                 mov     rdi, r12
.text:0000000000011C6C                 call    _sub_epsilon_src_nodes
.text:0000000000011C71                 test    eax, eax
.text:0000000000011C73                 jnz     loc_118B8
.text:0000000000011C79                 add     r14, 1
.text:0000000000011C7D                 cmp     r14, [rbx+8]
.text:0000000000011C81                 jl      short loc_11C3A
.text:0000000000011C83                 nop     dword ptr [rax+rax+00h]
.text:0000000000011C88
.text:0000000000011C88 loc_11C88:                              ; CODE XREF: update_cur_sifted_state+418↑j
.text:0000000000011C88                 mov     rbp, [rsp+0D8h+var_B0]
.text:0000000000011C8D
.text:0000000000011C8D loc_11C8D:                              ; CODE XREF: update_cur_sifted_state+3C9↑j
.text:0000000000011C8D                                         ; update_cur_sifted_state+3D3↑j ...
.text:0000000000011C8D                 add     r15, 1
.text:0000000000011C91                 cmp     r15, [r13+28h]
.text:0000000000011C95                 jl      loc_11BD0
.text:0000000000011C9B
.text:0000000000011C9B loc_11C9B:                              ; CODE XREF: update_cur_sifted_state+3A1↑j
.text:0000000000011C9B                 mov     [rsp+0D8h+var_7C], 0
.text:0000000000011CA3                 jmp     loc_1193F
.text:0000000000011CA3 ; ---------------------------------------------------------------------------
.text:0000000000011CA8                 align 10h
.text:0000000000011CB0
.text:0000000000011CB0 loc_11CB0:                              ; CODE XREF: update_cur_sifted_state+3F0↑j
.text:0000000000011CB0                 test    rsi, rsi
.text:0000000000011CB3                 jle     short loc_11C8D
.text:0000000000011CB5                 mov     r10, [rbx+10h]
.text:0000000000011CB9                 mov     r9, 0FFFFFFFFFFFFFFFFh
.text:0000000000011CC0                 lea     r11, [r10+rsi*8]
.text:0000000000011CC4                 mov     rcx, r10
.text:0000000000011CC7                 mov     rsi, r9
.text:0000000000011CCA                 jmp     short loc_11CE6
.text:0000000000011CCA ; ---------------------------------------------------------------------------
.text:0000000000011CCC                 align 10h
.text:0000000000011CD0
.text:0000000000011CD0 loc_11CD0:                              ; CODE XREF: update_cur_sifted_state+4DC↓j
.text:0000000000011CD0                 cmp     r14d, 9
.text:0000000000011CD4                 jnz     short loc_11CDD
.text:0000000000011CD6                 cmp     r8, [rdx]
.text:0000000000011CD9                 cmovz   r9, rdi
.text:0000000000011CDD
.text:0000000000011CDD loc_11CDD:                              ; CODE XREF: update_cur_sifted_state+4B4↑j
.text:0000000000011CDD                 add     rcx, 8
.text:0000000000011CE1                 cmp     r11, rcx
.text:0000000000011CE4                 jz      short loc_11D0E
.text:0000000000011CE6
.text:0000000000011CE6 loc_11CE6:                              ; CODE XREF: update_cur_sifted_state+4AA↑j
.text:0000000000011CE6                                         ; update_cur_sifted_state+4EC↓j
.text:0000000000011CE6                 mov     rdi, [rcx]
.text:0000000000011CE9                 mov     rdx, rdi
.text:0000000000011CEC                 shl     rdx, 4
.text:0000000000011CF0                 add     rdx, rax
.text:0000000000011CF3                 movzx   r14d, byte ptr [rdx+8]
.text:0000000000011CF8                 cmp     r14d, 8
.text:0000000000011CFC                 jnz     short loc_11CD0
.text:0000000000011CFE                 cmp     r8, [rdx]
.text:0000000000011D01                 cmovz   rsi, rdi
.text:0000000000011D05                 add     rcx, 8
.text:0000000000011D09                 cmp     r11, rcx
.text:0000000000011D0C                 jnz     short loc_11CE6
.text:0000000000011D0E
.text:0000000000011D0E loc_11D0E:                              ; CODE XREF: update_cur_sifted_state+4C4↑j
.text:0000000000011D0E                 test    rsi, rsi
.text:0000000000011D11                 mov     r14, r9
.text:0000000000011D14                 mov     [rsp+0D8h+var_B0], r9
.text:0000000000011D19                 js      loc_11DE0
.text:0000000000011D1F                 mov     rcx, [rsp+0D8h+var_C8]
.text:0000000000011D24                 mov     rdx, rbx
.text:0000000000011D27                 mov     rdi, r12
.text:0000000000011D2A                 call    _sub_epsilon_src_nodes
.text:0000000000011D2F                 test    eax, eax
.text:0000000000011D31                 jnz     loc_118B8
.text:0000000000011D37                 test    r14, r14
.text:0000000000011D3A                 js      loc_11C8D
.text:0000000000011D40                 cmp     qword ptr [rbx+8], 0
.text:0000000000011D45                 jle     loc_11C8D
.text:0000000000011D4B                 mov     r10, [rbx+10h]
.text:0000000000011D4F
.text:0000000000011D4F loc_11D4F:                              ; CODE XREF: update_cur_sifted_state+5C6↓j
.text:0000000000011D4F                 xor     r14d, r14d
.text:0000000000011D52                 mov     [rsp+0D8h+var_A8], rbp
.text:0000000000011D57                 mov     rbp, r14
.text:0000000000011D5A                 mov     r14, [rsp+0D8h+var_B0]
.text:0000000000011D5F                 jmp     short loc_11D7A
.text:0000000000011D5F ; ---------------------------------------------------------------------------
.text:0000000000011D61                 align 8
.text:0000000000011D68
.text:0000000000011D68 loc_11D68:                              ; CODE XREF: update_cur_sifted_state+581↓j
.text:0000000000011D68                                         ; update_cur_sifted_state+598↓j ...
.text:0000000000011D68                 add     rbp, 1
.text:0000000000011D6C                 cmp     rbp, [rbx+8]
.text:0000000000011D70                 jge     loc_11DF8
.text:0000000000011D76                 mov     r10, [rbx+10h]
.text:0000000000011D7A
.text:0000000000011D7A loc_11D7A:                              ; CODE XREF: update_cur_sifted_state+53F↑j
.text:0000000000011D7A                 mov     r10, [r10+rbp*8]
.text:0000000000011D7E                 mov     rax, [r12+38h]
.text:0000000000011D83                 mov     rdx, r14
.text:0000000000011D86                 lea     r9, [r10+r10*2]
.text:0000000000011D8A                 shl     r9, 3
.text:0000000000011D8E                 add     rax, r9
.text:0000000000011D91                 mov     rdi, [rax+8]
.text:0000000000011D95                 lea     rsi, [rax+10h]
.text:0000000000011D99                 call    re_node_set_contains_isra_3
.text:0000000000011D9E                 test    rax, rax
.text:0000000000011DA1                 jnz     short loc_11D68
.text:0000000000011DA3                 add     r9, [r12+30h]
.text:0000000000011DA8                 mov     rdi, [r9+8]
.text:0000000000011DAC                 lea     rsi, [r9+10h]
.text:0000000000011DB0                 call    re_node_set_contains_isra_3
.text:0000000000011DB5                 test    rax, rax
.text:0000000000011DB8                 jnz     short loc_11D68
.text:0000000000011DBA                 mov     rcx, [rsp+0D8h+var_C8]
.text:0000000000011DBF                 mov     rdx, rbx
.text:0000000000011DC2                 mov     rsi, r10
.text:0000000000011DC5                 mov     rdi, r12
.text:0000000000011DC8                 call    _sub_epsilon_src_nodes
.text:0000000000011DCD                 test    eax, eax
.text:0000000000011DCF                 jnz     loc_118B8
.text:0000000000011DD5                 sub     rbp, 1
.text:0000000000011DD9                 jmp     short loc_11D68
.text:0000000000011DD9 ; ---------------------------------------------------------------------------
.text:0000000000011DDB                 align 20h
.text:0000000000011DE0
.text:0000000000011DE0 loc_11DE0:                              ; CODE XREF: update_cur_sifted_state+4F9↑j
.text:0000000000011DE0                 cmp     [rsp+0D8h+var_B0], 0
.text:0000000000011DE6                 jns     loc_11D4F
.text:0000000000011DEC                 jmp     loc_11C8D
.text:0000000000011DEC ; ---------------------------------------------------------------------------
.text:0000000000011DF1                 align 8
.text:0000000000011DF8
.text:0000000000011DF8 loc_11DF8:                              ; CODE XREF: update_cur_sifted_state+550↑j
.text:0000000000011DF8                 mov     rbp, [rsp+0D8h+var_A8]
.text:0000000000011DFD                 jmp     loc_11C8D
.text:0000000000011DFD ; ---------------------------------------------------------------------------
.text:0000000000011E02                 align 8
.text:0000000000011E08
.text:0000000000011E08 loc_11E08:                              ; CODE XREF: update_cur_sifted_state+262↑j
.text:0000000000011E08                 mov     rax, [rsp+0D8h+var_D0]
.text:0000000000011E0D                 mov     r13, [rsp+0D8h+var_98]
.text:0000000000011E12                 mov     rbx, [rsp+0D8h+var_90]
.text:0000000000011E17                 add     r13, [rax+0D8h]
.text:0000000000011E1E                 lea     rax, [r14+r14*2]
.text:0000000000011E22                 shl     rax, 3
.text:0000000000011E26                 mov     [rsp+0D8h+var_A8], rax
.text:0000000000011E2B                 lea     rax, ds:0[r14*8]
.text:0000000000011E33                 mov     [rsp+0D8h+var_B0], rax
.text:0000000000011E38                 mov     rax, r15
.text:0000000000011E3B                 mov     r15, r13
.text:0000000000011E3E                 mov     r13, rbx
.text:0000000000011E41                 mov     rbx, rax
.text:0000000000011E44                 jmp     loc_11FAE
.text:0000000000011E44 ; ---------------------------------------------------------------------------
.text:0000000000011E49                 align 10h
.text:0000000000011E50
.text:0000000000011E50 loc_11E50:                              ; CODE XREF: update_cur_sifted_state+791↓j
.text:0000000000011E50                 mov     rax, [r15+18h]
.text:0000000000011E54                 sub     rax, [r15+10h]
.text:0000000000011E58                 test    rax, rax
.text:0000000000011E5B                 lea     r9, [rbp+rax+0]
.text:0000000000011E60                 jz      loc_11FC0
.text:0000000000011E66                 mov     rax, [r12+18h]
.text:0000000000011E6B                 mov     rsi, [rsp+0D8h+var_B0]
.text:0000000000011E70                 mov     r10, [rax+rsi]
.text:0000000000011E74
.text:0000000000011E74 loc_11E74:                              ; CODE XREF: update_cur_sifted_state+7B2↓j
.text:0000000000011E74                 cmp     r9, [rbx+18h]
.text:0000000000011E78                 jg      loc_11FB7
.text:0000000000011E7E                 mov     rax, [rbx]
.text:0000000000011E81                 mov     rax, [rax+r9*8]
.text:0000000000011E85                 test    rax, rax
.text:0000000000011E88                 jz      loc_11FB7
.text:0000000000011E8E                 mov     rdi, [rax+10h]
.text:0000000000011E92                 lea     rsi, [rax+18h]
.text:0000000000011E96                 mov     rdx, r10
.text:0000000000011E99                 call    re_node_set_contains_isra_3
.text:0000000000011E9E                 test    rax, rax
.text:0000000000011EA1                 jz      loc_11FB7
.text:0000000000011EA7                 sub     rsp, 8
.text:0000000000011EAB                 lea     rdx, [rbx+30h]
.text:0000000000011EAF                 lea     rsi, [rbx+28h]
.text:0000000000011EB3                 push    r9
.text:0000000000011EB5                 mov     rdi, [rsp+0E8h+var_D0]
.text:0000000000011EBA                 mov     rcx, r14
.text:0000000000011EBD                 mov     r9, r10
.text:0000000000011EC0                 mov     r8, rbp
.text:0000000000011EC3                 call    check_dst_limits_isra_13
.text:0000000000011EC8                 test    al, al
.text:0000000000011ECA                 pop     rdx
.text:0000000000011ECB                 pop     rcx
.text:0000000000011ECC                 jnz     loc_11FB7
.text:0000000000011ED2                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:0000000000011ED8                 jz      loc_11FE8
.text:0000000000011EDE
.text:0000000000011EDE loc_11EDE:                              ; CODE XREF: update_cur_sifted_state+808↓j
.text:0000000000011EDE                 mov     rax, [rsp+0D8h+var_A0]
.text:0000000000011EE3                 mov     rsi, r13
.text:0000000000011EE6                 mov     qword ptr [rsp+0D8h+var_68], r14
.text:0000000000011EEB                 mov     qword ptr [rsp+0D8h+var_68+8], rbp
.text:0000000000011EF0                 lea     rdi, [rax+20h]
.text:0000000000011EF4                 call    re_node_set_insert
.text:0000000000011EF9                 test    al, al
.text:0000000000011EFB                 jz      loc_12054
.text:0000000000011F01                 mov     rdi, [rsp+0D8h+var_C0]
.text:0000000000011F06                 mov     rax, qword ptr [rsp+0D8h+var_78]
.text:0000000000011F0B                 mov     rsi, [rsp+0D8h+var_A0]
.text:0000000000011F10                 mov     r15, [rax+rdi]
.text:0000000000011F14                 mov     rdi, [rsp+0D8h+var_D0]
.text:0000000000011F19                 call    sift_states_backward
.text:0000000000011F1E                 test    eax, eax
.text:0000000000011F20                 jnz     loc_1202E
.text:0000000000011F26                 mov     rsi, [rbx+8]
.text:0000000000011F2A                 mov     rdx, qword ptr [rsp+0D8h+var_78]
.text:0000000000011F2F                 test    rsi, rsi
.text:0000000000011F32                 jz      short loc_11F4D
.text:0000000000011F34                 lea     rcx, [rbp+1]
.text:0000000000011F38                 mov     rdi, r12
.text:0000000000011F3B                 call    merge_state_array
.text:0000000000011F40                 test    eax, eax
.text:0000000000011F42                 jnz     loc_1202E
.text:0000000000011F48                 mov     rdx, qword ptr [rsp+0D8h+var_78]
.text:0000000000011F4D
.text:0000000000011F4D loc_11F4D:                              ; CODE XREF: update_cur_sifted_state+712↑j
.text:0000000000011F4D                 mov     r11, [rsp+0D8h+var_A0]
.text:0000000000011F52                 mov     rax, [rsp+0D8h+var_C0]
.text:0000000000011F57                 mov     rdi, [rsp+0D8h+var_50]
.text:0000000000011F5F                 lea     r9, [r11+30h]
.text:0000000000011F63                 mov     [rdx+rax], r15
.text:0000000000011F67                 mov     rdx, r13
.text:0000000000011F6A                 mov     rsi, r9
.text:0000000000011F6D                 call    re_node_set_contains_isra_3
.text:0000000000011F72                 sub     rax, 1
.text:0000000000011F76                 mov     rdx, rax
.text:0000000000011F79                 js      short loc_11F87
.text:0000000000011F7B                 lea     rdi, [r11+28h]
.text:0000000000011F7F                 mov     rsi, r9
.text:0000000000011F82                 call    re_node_set_remove_at_isra_4_part_5
.text:0000000000011F87
.text:0000000000011F87 loc_11F87:                              ; CODE XREF: update_cur_sifted_state+759↑j
.text:0000000000011F87                 mov     rcx, [rsp+0D8h+var_D0]
.text:0000000000011F8C                 lea     rax, [r13+r13*4+0]
.text:0000000000011F91                 mov     rdx, [rcx+0D8h]
.text:0000000000011F98                 lea     rax, [rdx+rax*8]
.text:0000000000011F9C                 nop     dword ptr [rax+00h]
.text:0000000000011FA0
.text:0000000000011FA0 loc_11FA0:                              ; CODE XREF: update_cur_sifted_state+79A↓j
.text:0000000000011FA0                 add     r13, 1
.text:0000000000011FA4                 cmp     byte ptr [rax+20h], 0
.text:0000000000011FA8                 lea     r15, [rax+28h]
.text:0000000000011FAC                 jz      short loc_11FE0
.text:0000000000011FAE
.text:0000000000011FAE loc_11FAE:                              ; CODE XREF: update_cur_sifted_state+624↑j
.text:0000000000011FAE                 cmp     r14, [r15]
.text:0000000000011FB1                 jz      loc_11E50
.text:0000000000011FB7
.text:0000000000011FB7 loc_11FB7:                              ; CODE XREF: update_cur_sifted_state+658↑j
.text:0000000000011FB7                                         ; update_cur_sifted_state+668↑j ...
.text:0000000000011FB7                 mov     rax, r15
.text:0000000000011FBA                 jmp     short loc_11FA0
.text:0000000000011FBA ; ---------------------------------------------------------------------------
.text:0000000000011FBC                 align 20h
.text:0000000000011FC0
.text:0000000000011FC0 loc_11FC0:                              ; CODE XREF: update_cur_sifted_state+640↑j
.text:0000000000011FC0                 mov     rax, [r12+28h]
.text:0000000000011FC5                 mov     rdi, [rsp+0D8h+var_A8]
.text:0000000000011FCA                 mov     rax, [rax+rdi+10h]
.text:0000000000011FCF                 mov     r10, [rax]
.text:0000000000011FD2                 jmp     loc_11E74
.text:0000000000011FD2 ; ---------------------------------------------------------------------------
.text:0000000000011FD7                 align 20h
.text:0000000000011FE0
.text:0000000000011FE0 loc_11FE0:                              ; CODE XREF: update_cur_sifted_state+78C↑j
.text:0000000000011FE0                 mov     r15, rbx
.text:0000000000011FE3                 jmp     loc_11A88
.text:0000000000011FE8 ; ---------------------------------------------------------------------------
.text:0000000000011FE8
.text:0000000000011FE8 loc_11FE8:                              ; CODE XREF: update_cur_sifted_state+6B8↑j
.text:0000000000011FE8                 mov     rax, [rbx+30h]
.text:0000000000011FEC                 lea     rsi, [rbx+20h]
.text:0000000000011FF0                 movdqa  xmm0, xmmword ptr [rbx]
.text:0000000000011FF4                 mov     [rsp+0D8h+ptr], rax
.text:0000000000011FFC                 mov     rax, [rsp+0D8h+var_A0]
.text:0000000000012001                 movaps  [rsp+0D8h+var_78], xmm0
.text:0000000000012006                 lea     rdi, [rax+20h]
.text:000000000001200A                 movdqa  xmm0, xmmword ptr [rbx+10h]
.text:000000000001200F                 movaps  [rsp+0D8h+var_68], xmm0
.text:0000000000012014                 movdqa  xmm0, xmmword ptr [rbx+20h]
.text:0000000000012019                 movaps  xmmword ptr [rsp+80h], xmm0
.text:0000000000012021                 call    re_node_set_init_copy
.text:0000000000012026                 test    eax, eax
.text:0000000000012028                 jz      loc_11EDE
.text:000000000001202E
.text:000000000001202E loc_1202E:                              ; CODE XREF: update_cur_sifted_state+700↑j
.text:000000000001202E                                         ; update_cur_sifted_state+722↑j ...
.text:000000000001202E                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:0000000000012034                 jz      loc_118B8
.text:000000000001203A
.text:000000000001203A loc_1203A:                              ; CODE XREF: update_cur_sifted_state+849↓j
.text:000000000001203A                 mov     rdi, [rsp+0D8h+ptr] ; ptr
.text:0000000000012042                 mov     dword ptr [rsp+0D8h+var_D0], eax
.text:0000000000012046                 call    _free
.text:000000000001204B                 mov     eax, dword ptr [rsp+0D8h+var_D0]
.text:000000000001204F                 jmp     loc_118B8
.text:0000000000012054 ; ---------------------------------------------------------------------------
.text:0000000000012054
.text:0000000000012054 loc_12054:                              ; CODE XREF: update_cur_sifted_state+6DB↑j
.text:0000000000012054                 mov     eax, 0Ch
.text:0000000000012059                 jmp     short loc_1202E
.text:000000000001205B ; ---------------------------------------------------------------------------
.text:000000000001205B
.text:000000000001205B loc_1205B:                              ; CODE XREF: update_cur_sifted_state+27C↑j
.text:000000000001205B                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:0000000000012061                 jz      loc_11B00
.text:0000000000012067                 xor     eax, eax
.text:0000000000012069                 jmp     short loc_1203A
.text:000000000001206B ; ---------------------------------------------------------------------------
.text:000000000001206B
.text:000000000001206B loc_1206B:                              ; CODE XREF: update_cur_sifted_state+A9↑j
.text:000000000001206B                 call    ___stack_chk_fail
.text:000000000001206B ; } // starts at 11820
.text:000000000001206B update_cur_sifted_state endp
.text:000000000001206B
.text:0000000000012070
.text:0000000000012070 ; =============== S U B R O U T I N E =======================================
.text:0000000000012070
.text:0000000000012070
.text:0000000000012070 parse_bracket_element_constprop_37 proc near
.text:0000000000012070                                         ; CODE XREF: parse_expression+90F↓p
.text:0000000000012070                                         ; parse_expression+E67↓p
.text:0000000000012070
.text:0000000000012070 var_40          = byte ptr -40h
.text:0000000000012070 var_30          = qword ptr -30h
.text:0000000000012070
.text:0000000000012070 ; __unwind {
.text:0000000000012070                 push    r14
.text:0000000000012072                 push    r13
.text:0000000000012074                 mov     r10, rsi
.text:0000000000012077                 push    r12
.text:0000000000012079                 push    rbp
.text:000000000001207A                 movsxd  r11, ecx
.text:000000000001207D                 push    rbx
.text:000000000001207E                 mov     rbp, rdx
.text:0000000000012081                 mov     rbx, rdi
.text:0000000000012084                 sub     rsp, 20h
.text:0000000000012088                 mov     r12, [rsi+48h]
.text:000000000001208C                 mov     rax, fs:28h
.text:0000000000012095                 mov     [rsp+48h+var_30], rax
.text:000000000001209A                 xor     eax, eax
.text:000000000001209C                 cmp     dword ptr [rsi+90h], 1
.text:00000000000120A3                 jz      short loc_120F8
.text:00000000000120A5                 mov     rsi, r12
.text:00000000000120A8                 mov     rdi, r10
.text:00000000000120AB                 call    re_string_char_size_at_part_0
.text:00000000000120B0                 cmp     eax, 1
.text:00000000000120B3                 jle     short loc_120F8
.text:00000000000120B5                 mov     rdx, [r10+10h]
.text:00000000000120B9                 cdqe
.text:00000000000120BB                 mov     dword ptr [rbx], 1
.text:00000000000120C1                 add     rax, r12
.text:00000000000120C4                 mov     edx, [rdx+r12*4]
.text:00000000000120C8                 mov     [rbx+8], edx
.text:00000000000120CB                 mov     [r10+48h], rax
.text:00000000000120CF                 xor     eax, eax
.text:00000000000120D1
.text:00000000000120D1 loc_120D1:                              ; CODE XREF: parse_bracket_element_constprop_37+BD↓j
.text:00000000000120D1                                         ; parse_bracket_element_constprop_37+161↓j ...
.text:00000000000120D1                 mov     rcx, [rsp+48h+var_30]
.text:00000000000120D6                 xor     rcx, fs:28h
.text:00000000000120DF                 jnz     loc_122C8
.text:00000000000120E5                 add     rsp, 20h
.text:00000000000120E9                 pop     rbx
.text:00000000000120EA                 pop     rbp
.text:00000000000120EB                 pop     r12
.text:00000000000120ED                 pop     r13
.text:00000000000120EF                 pop     r14
.text:00000000000120F1                 retn
.text:00000000000120F1 ; ---------------------------------------------------------------------------
.text:00000000000120F2                 align 8
.text:00000000000120F8
.text:00000000000120F8 loc_120F8:                              ; CODE XREF: parse_bracket_element_constprop_37+33↑j
.text:00000000000120F8                                         ; parse_bracket_element_constprop_37+43↑j
.text:00000000000120F8                 movzx   eax, byte ptr [rbp+8]
.text:00000000000120FC                 add     r11, r12
.text:00000000000120FF                 mov     [r10+48h], r11
.text:0000000000012103                 mov     edx, eax
.text:0000000000012105                 and     edx, 0FFFFFFFBh
.text:0000000000012108                 cmp     dl, 1Ah
.text:000000000001210B                 jz      short loc_12130
.text:000000000001210D                 cmp     al, 1Ch
.text:000000000001210F                 jz      short loc_12130
.text:0000000000012111                 cmp     al, 16h
.text:0000000000012113                 jnz     short loc_1211E
.text:0000000000012115                 test    r9b, r9b
.text:0000000000012118                 jz      loc_12262
.text:000000000001211E
.text:000000000001211E loc_1211E:                              ; CODE XREF: parse_bracket_element_constprop_37+A3↑j
.text:000000000001211E                                         ; parse_bracket_element_constprop_37+20A↓j
.text:000000000001211E                 movzx   eax, byte ptr [rbp+0]
.text:0000000000012122                 mov     dword ptr [rbx], 0
.text:0000000000012128                 mov     [rbx+8], al
.text:000000000001212B                 xor     eax, eax
.text:000000000001212D                 jmp     short loc_120D1
.text:000000000001212D ; ---------------------------------------------------------------------------
.text:000000000001212F                 align 10h
.text:0000000000012130
.text:0000000000012130 loc_12130:                              ; CODE XREF: parse_bracket_element_constprop_37+9B↑j
.text:0000000000012130                                         ; parse_bracket_element_constprop_37+9F↑j
.text:0000000000012130                 mov     r12, [r10+68h]
.text:0000000000012134                 cmp     r11, r12
.text:0000000000012137                 jge     loc_12258
.text:000000000001213D                 movzx   r13d, byte ptr [rbp+0]
.text:0000000000012142                 xor     r8d, r8d
.text:0000000000012145                 jmp     short loc_12172
.text:0000000000012145 ; ---------------------------------------------------------------------------
.text:0000000000012147                 align 10h
.text:0000000000012150
.text:0000000000012150 loc_12150:                              ; CODE XREF: parse_bracket_element_constprop_37+126↓j
.text:0000000000012150                                         ; parse_bracket_element_constprop_37+130↓j
.text:0000000000012150                 mov     rax, [rbx+8]
.text:0000000000012154                 mov     [rax+r8], r9b
.text:0000000000012158                 add     r8, 1
.text:000000000001215C                 cmp     r8, 20h ; ' '
.text:0000000000012160                 jz      loc_12258
.text:0000000000012166                 movzx   eax, byte ptr [rbp+8]
.text:000000000001216A                 mov     r11, [r10+48h]
.text:000000000001216E                 mov     r12, [r10+68h]
.text:0000000000012172
.text:0000000000012172 loc_12172:                              ; CODE XREF: parse_bracket_element_constprop_37+D5↑j
.text:0000000000012172                 cmp     al, 1Eh
.text:0000000000012174                 movsxd  r14, r8d
.text:0000000000012177                 jz      short loc_121E0
.text:0000000000012179
.text:0000000000012179 loc_12179:                              ; CODE XREF: parse_bracket_element_constprop_37+178↓j
.text:0000000000012179                                         ; parse_bracket_element_constprop_37+197↓j ...
.text:0000000000012179                 mov     rdx, [r10+8]
.text:000000000001217D                 lea     rax, [r11+1]
.text:0000000000012181                 mov     [r10+48h], rax
.text:0000000000012185                 movzx   r9d, byte ptr [rdx+r11]
.text:000000000001218A
.text:000000000001218A loc_1218A:                              ; CODE XREF: parse_bracket_element_constprop_37+1DD↓j
.text:000000000001218A                                         ; parse_bracket_element_constprop_37+22C↓j
.text:000000000001218A                 cmp     rax, r12
.text:000000000001218D                 jge     loc_12258
.text:0000000000012193                 cmp     r13b, r9b
.text:0000000000012196                 jnz     short loc_12150
.text:0000000000012198                 mov     rdx, [r10+8]
.text:000000000001219C                 cmp     byte ptr [rdx+rax], 5Dh ; ']'
.text:00000000000121A0                 jnz     short loc_12150
.text:00000000000121A2                 add     rax, 1
.text:00000000000121A6                 mov     [r10+48h], rax
.text:00000000000121AA                 mov     rax, [rbx+8]
.text:00000000000121AE                 mov     byte ptr [rax+r14], 0
.text:00000000000121B3                 movzx   eax, byte ptr [rbp+8]
.text:00000000000121B7                 cmp     al, 1Ch
.text:00000000000121B9                 jz      loc_122BB
.text:00000000000121BF                 cmp     al, 1Eh
.text:00000000000121C1                 jz      loc_122AE
.text:00000000000121C7                 cmp     al, 1Ah
.text:00000000000121C9                 jz      loc_122A1
.text:00000000000121CF                 xor     eax, eax
.text:00000000000121D1                 jmp     loc_120D1
.text:00000000000121D1 ; ---------------------------------------------------------------------------
.text:00000000000121D6                 align 20h
.text:00000000000121E0
.text:00000000000121E0 loc_121E0:                              ; CODE XREF: parse_bracket_element_constprop_37+107↑j
.text:00000000000121E0                 cmp     byte ptr [r10+8Bh], 0
.text:00000000000121E8                 jz      short loc_12179
.text:00000000000121EA                 cmp     byte ptr [r10+8Ch], 0
.text:00000000000121F2                 jz      loc_12288
.text:00000000000121F8                 cmp     r11, [r10+30h]
.text:00000000000121FC                 jz      short loc_1220D
.text:00000000000121FE                 mov     rax, [r10+10h]
.text:0000000000012202                 cmp     dword ptr [rax+r11*4], 0FFFFFFFFh
.text:0000000000012207                 jz      loc_12179
.text:000000000001220D
.text:000000000001220D loc_1220D:                              ; CODE XREF: parse_bracket_element_constprop_37+18C↑j
.text:000000000001220D                 mov     rax, [r10+18h]
.text:0000000000012211                 mov     rax, [rax+r11*8]
.text:0000000000012215                 add     rax, [r10]
.text:0000000000012218                 add     rax, [r10+28h]
.text:000000000001221C                 movzx   r9d, byte ptr [rax]
.text:0000000000012220                 test    r9b, 80h
.text:0000000000012224                 jnz     loc_12179
.text:000000000001222A                 cmp     dword ptr [r10+90h], 1
.text:0000000000012232                 mov     eax, 1
.text:0000000000012237                 jz      short loc_12246
.text:0000000000012239                 mov     rsi, r11
.text:000000000001223C                 mov     rdi, r10
.text:000000000001223F                 call    re_string_char_size_at_part_0
.text:0000000000012244                 cdqe
.text:0000000000012246
.text:0000000000012246 loc_12246:                              ; CODE XREF: parse_bracket_element_constprop_37+1C7↑j
.text:0000000000012246                 add     rax, r11
.text:0000000000012249                 mov     [r10+48h], rax
.text:000000000001224D                 jmp     loc_1218A
.text:000000000001224D ; ---------------------------------------------------------------------------
.text:0000000000012252                 align 8
.text:0000000000012258
.text:0000000000012258 loc_12258:                              ; CODE XREF: parse_bracket_element_constprop_37+C7↑j
.text:0000000000012258                                         ; parse_bracket_element_constprop_37+F0↑j ...
.text:0000000000012258                 mov     eax, 7
.text:000000000001225D                 jmp     loc_120D1
.text:0000000000012262 ; ---------------------------------------------------------------------------
.text:0000000000012262
.text:0000000000012262 loc_12262:                              ; CODE XREF: parse_bracket_element_constprop_37+A8↑j
.text:0000000000012262                 mov     rdi, rsp
.text:0000000000012265                 mov     rdx, r8
.text:0000000000012268                 mov     rsi, r10
.text:000000000001226B                 call    peek_token_bracket
.text:0000000000012270                 cmp     [rsp+48h+var_40], 15h
.text:0000000000012275                 mov     eax, 0Bh
.text:000000000001227A                 jz      loc_1211E
.text:0000000000012280                 jmp     loc_120D1
.text:0000000000012280 ; ---------------------------------------------------------------------------
.text:0000000000012285                 align 8
.text:0000000000012288
.text:0000000000012288 loc_12288:                              ; CODE XREF: parse_bracket_element_constprop_37+182↑j
.text:0000000000012288                 lea     rax, [r11+1]
.text:000000000001228C                 add     r11, [r10]
.text:000000000001228F                 mov     rdx, [r10+28h]
.text:0000000000012293                 mov     [r10+48h], rax
.text:0000000000012297                 movzx   r9d, byte ptr [r11+rdx]
.text:000000000001229C                 jmp     loc_1218A
.text:00000000000122A1 ; ---------------------------------------------------------------------------
.text:00000000000122A1
.text:00000000000122A1 loc_122A1:                              ; CODE XREF: parse_bracket_element_constprop_37+159↑j
.text:00000000000122A1                 mov     dword ptr [rbx], 3
.text:00000000000122A7                 xor     eax, eax
.text:00000000000122A9                 jmp     loc_120D1
.text:00000000000122AE ; ---------------------------------------------------------------------------
.text:00000000000122AE
.text:00000000000122AE loc_122AE:                              ; CODE XREF: parse_bracket_element_constprop_37+151↑j
.text:00000000000122AE                 mov     dword ptr [rbx], 4
.text:00000000000122B4                 xor     eax, eax
.text:00000000000122B6                 jmp     loc_120D1
.text:00000000000122BB ; ---------------------------------------------------------------------------
.text:00000000000122BB
.text:00000000000122BB loc_122BB:                              ; CODE XREF: parse_bracket_element_constprop_37+149↑j
.text:00000000000122BB                 mov     dword ptr [rbx], 2
.text:00000000000122C1                 xor     eax, eax
.text:00000000000122C3                 jmp     loc_120D1
.text:00000000000122C8 ; ---------------------------------------------------------------------------
.text:00000000000122C8
.text:00000000000122C8 loc_122C8:                              ; CODE XREF: parse_bracket_element_constprop_37+6F↑j
.text:00000000000122C8                 call    ___stack_chk_fail
.text:00000000000122C8 ; } // starts at 12070
.text:00000000000122C8 parse_bracket_element_constprop_37 endp
.text:00000000000122C8
.text:00000000000122C8 ; ---------------------------------------------------------------------------
.text:00000000000122CD                 align 10h
.text:00000000000122D0
.text:00000000000122D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000122D0
.text:00000000000122D0
.text:00000000000122D0 peek_token      proc near               ; CODE XREF: peek_token+6BA↓p
.text:00000000000122D0                                         ; fetch_number+29↓p ...
.text:00000000000122D0
.text:00000000000122D0 var_68          = qword ptr -68h
.text:00000000000122D0 var_60          = qword ptr -60h
.text:00000000000122D0 var_58          = byte ptr -58h
.text:00000000000122D0 var_50          = byte ptr -50h
.text:00000000000122D0 var_40          = qword ptr -40h
.text:00000000000122D0
.text:00000000000122D0 ; __unwind {
.text:00000000000122D0                 push    r15
.text:00000000000122D2                 push    r14
.text:00000000000122D4                 push    r13
.text:00000000000122D6                 push    r12
.text:00000000000122D8                 push    rbp
.text:00000000000122D9                 push    rbx
.text:00000000000122DA                 mov     rbp, rdi
.text:00000000000122DD                 sub     rsp, 38h
.text:00000000000122E1                 mov     r14, [rsi+48h]
.text:00000000000122E5                 mov     rax, fs:28h
.text:00000000000122EE                 mov     [rsp+68h+var_40], rax
.text:00000000000122F3                 xor     eax, eax
.text:00000000000122F5                 cmp     [rsi+68h], r14
.text:00000000000122F9                 jle     loc_12390
.text:00000000000122FF                 movzx   r13d, byte ptr [rdi+0Ah]
.text:0000000000012304                 mov     r15, rdx
.text:0000000000012307                 mov     rdx, [rsi+8]
.text:000000000001230B                 mov     rbx, rsi
.text:000000000001230E                 movzx   r12d, byte ptr [rdx+r14]
.text:0000000000012313                 and     r13d, 0FFFFFF9Fh
.text:0000000000012317                 mov     [rdi+0Ah], r13b
.text:000000000001231B                 mov     eax, [rsi+90h]
.text:0000000000012321                 mov     [rdi], r12b
.text:0000000000012324                 cmp     eax, 1
.text:0000000000012327                 jle     loc_123C0
.text:000000000001232D                 cmp     r14, [rsi+30h]
.text:0000000000012331                 jz      loc_124D0
.text:0000000000012337                 mov     rcx, [rsi+10h]
.text:000000000001233B                 mov     ecx, [rcx+r14*4]
.text:000000000001233F                 cmp     ecx, 0FFFFFFFFh
.text:0000000000012342                 jz      loc_12420
.text:0000000000012348                 cmp     r12b, 5Ch ; '\'
.text:000000000001234C                 jz      loc_12440
.text:0000000000012352                 mov     byte ptr [rdi+8], 1
.text:0000000000012356
.text:0000000000012356 loc_12356:                              ; CODE XREF: peek_token+216↓j
.text:0000000000012356                 mov     edi, ecx        ; wc
.text:0000000000012358                 mov     [rsp+68h+var_60], rdx
.text:000000000001235D                 mov     dword ptr [rsp+68h+var_68], ecx
.text:0000000000012360                 call    _iswalnum
.text:0000000000012365                 mov     ecx, dword ptr [rsp+68h+var_68]
.text:0000000000012368                 test    eax, eax
.text:000000000001236A                 setnz   al
.text:000000000001236D                 cmp     ecx, 5Fh ; '_'
.text:0000000000012370                 setz    cl
.text:0000000000012373                 or      eax, ecx
.text:0000000000012375                 shl     eax, 6
.text:0000000000012378                 or      r13d, eax
.text:000000000001237B                 mov     [rbp+0Ah], r13b
.text:000000000001237F                 mov     rdx, [rsp+68h+var_60]
.text:0000000000012384                 jmp     short loc_123FC
.text:0000000000012384 ; ---------------------------------------------------------------------------
.text:0000000000012386                 align 10h
.text:0000000000012390
.text:0000000000012390 loc_12390:                              ; CODE XREF: peek_token+29↑j
.text:0000000000012390                 mov     byte ptr [rdi+8], 2
.text:0000000000012394
.text:0000000000012394 loc_12394:                              ; CODE XREF: peek_token+161↓j
.text:0000000000012394                                         ; peek_token+229↓j ...
.text:0000000000012394                 mov     rdi, [rsp+68h+var_40]
.text:0000000000012399                 xor     rdi, fs:28h
.text:00000000000123A2                 jnz     loc_129C8
.text:00000000000123A8                 add     rsp, 38h
.text:00000000000123AC                 pop     rbx
.text:00000000000123AD                 pop     rbp
.text:00000000000123AE                 pop     r12
.text:00000000000123B0                 pop     r13
.text:00000000000123B2                 pop     r14
.text:00000000000123B4                 pop     r15
.text:00000000000123B6                 retn
.text:00000000000123B6 ; ---------------------------------------------------------------------------
.text:00000000000123B7                 align 20h
.text:00000000000123C0
.text:00000000000123C0 loc_123C0:                              ; CODE XREF: peek_token+57↑j
.text:00000000000123C0                 cmp     r12b, 5Ch ; '\'
.text:00000000000123C4                 jz      short loc_12440
.text:00000000000123C6                 mov     byte ptr [rbp+8], 1
.text:00000000000123CA                 mov     [rsp+68h+var_68], rdx
.text:00000000000123CE                 call    ___ctype_b_loc
.text:00000000000123D3                 mov     rsi, [rax]
.text:00000000000123D6                 movzx   ecx, r12b
.text:00000000000123DA                 movzx   eax, word ptr [rsi+rcx*2]
.text:00000000000123DE                 shr     ax, 3
.text:00000000000123E2                 and     eax, 1
.text:00000000000123E5                 cmp     r12b, 5Fh ; '_'
.text:00000000000123E9                 setz    cl
.text:00000000000123EC                 or      eax, ecx
.text:00000000000123EE                 shl     eax, 6
.text:00000000000123F1                 or      r13d, eax
.text:00000000000123F4                 mov     [rbp+0Ah], r13b
.text:00000000000123F8                 mov     rdx, [rsp+68h+var_68]
.text:00000000000123FC
.text:00000000000123FC loc_123FC:                              ; CODE XREF: peek_token+B4↑j
.text:00000000000123FC                 sub     r12d, 0Ah       ; switch 116 cases
.text:0000000000012400                 cmp     r12b, 73h
.text:0000000000012404                 ja      def_1241C       ; jumptable 000000000001241C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:000000000001240A                 lea     rcx, jpt_1241C
.text:0000000000012411                 movzx   r12d, r12b
.text:0000000000012415                 movsxd  rax, ds:(jpt_1241C - 17774h)[rcx+r12*4]
.text:0000000000012419                 add     rax, rcx
.text:000000000001241C                 jmp     rax             ; switch jump
.text:000000000001241C ; ---------------------------------------------------------------------------
.text:000000000001241E                 align 20h
.text:0000000000012420
.text:0000000000012420 loc_12420:                              ; CODE XREF: peek_token+72↑j
.text:0000000000012420                 or      r13d, 20h
.text:0000000000012424                 mov     byte ptr [rdi+8], 1
.text:0000000000012428                 mov     eax, 1
.text:000000000001242D                 mov     [rdi+0Ah], r13b
.text:0000000000012431                 jmp     loc_12394
.text:0000000000012431 ; ---------------------------------------------------------------------------
.text:0000000000012436                 align 20h
.text:0000000000012440
.text:0000000000012440 loc_12440:                              ; CODE XREF: peek_token+7C↑j
.text:0000000000012440                                         ; peek_token+F4↑j ...
.text:0000000000012440                 lea     rsi, [r14+1]
.text:0000000000012444                 cmp     rsi, [rbx+58h]
.text:0000000000012448                 jge     loc_124F0
.text:000000000001244E                 cmp     byte ptr [rbx+8Bh], 0
.text:0000000000012455                 jnz     loc_128E0
.text:000000000001245B
.text:000000000001245B loc_1245B:                              ; CODE XREF: peek_token+66F↓j
.text:000000000001245B                 movzx   edi, byte ptr [rdx+r14+1]
.text:0000000000012461                 mov     r12d, edi
.text:0000000000012464                 mov     dword ptr [rsp+68h+var_60], edi
.text:0000000000012468
.text:0000000000012468 loc_12468:                              ; CODE XREF: peek_token+675↓j
.text:0000000000012468                                         ; peek_token+6A6↓j
.text:0000000000012468                 cmp     eax, 1
.text:000000000001246B                 mov     [rbp+0], r12b
.text:000000000001246F                 mov     byte ptr [rbp+8], 1
.text:0000000000012473                 jle     loc_128C0
.text:0000000000012479                 mov     rax, [rbx+10h]
.text:000000000001247D                 mov     r8d, [rax+rsi*4]
.text:0000000000012481
.text:0000000000012481 loc_12481:                              ; CODE XREF: peek_token+6F3↓j
.text:0000000000012481                 mov     edi, r8d        ; wc
.text:0000000000012484                 mov     dword ptr [rsp+68h+var_68], r8d
.text:0000000000012488                 call    _iswalnum
.text:000000000001248D                 mov     r8d, dword ptr [rsp+68h+var_68]
.text:0000000000012491                 test    eax, eax
.text:0000000000012493                 setnz   al
.text:0000000000012496                 cmp     r8d, 5Fh ; '_'
.text:000000000001249A
.text:000000000001249A loc_1249A:                              ; CODE XREF: peek_token+60B↓j
.text:000000000001249A                 setz    dl
.text:000000000001249D                 lea     ecx, [r12-27h]  ; switch 87 cases
.text:00000000000124A2                 or      eax, edx
.text:00000000000124A4                 shl     eax, 6
.text:00000000000124A7                 or      r13d, eax
.text:00000000000124AA                 cmp     cl, 56h
.text:00000000000124AD                 mov     [rbp+0Ah], r13b
.text:00000000000124B1                 ja      def_124C8       ; jumptable 00000000000124C8 default case, cases 42,44-48,58,59,61,64,65,67-82,84-86,88-95,97,99-114,116-118,120-122
.text:00000000000124B7                 lea     rdx, jpt_124C8
.text:00000000000124BE                 movzx   ecx, cl
.text:00000000000124C1                 movsxd  rax, ds:(jpt_124C8 - 17944h)[rdx+rcx*4]
.text:00000000000124C5                 add     rax, rdx
.text:00000000000124C8                 jmp     rax             ; switch jump
.text:00000000000124C8 ; ---------------------------------------------------------------------------
.text:00000000000124CA                 align 10h
.text:00000000000124D0
.text:00000000000124D0 loc_124D0:                              ; CODE XREF: peek_token+61↑j
.text:00000000000124D0                 cmp     r12b, 5Ch ; '\'
.text:00000000000124D4                 jz      loc_12440
.text:00000000000124DA                 mov     rax, [rbx+10h]
.text:00000000000124DE                 mov     byte ptr [rbp+8], 1
.text:00000000000124E2                 mov     ecx, [rax+r14*4]
.text:00000000000124E6                 jmp     loc_12356
.text:00000000000124E6 ; ---------------------------------------------------------------------------
.text:00000000000124EB                 align 10h
.text:00000000000124F0
.text:00000000000124F0 loc_124F0:                              ; CODE XREF: peek_token+178↑j
.text:00000000000124F0                 mov     byte ptr [rbp+8], 24h ; '$'
.text:00000000000124F4                 mov     eax, 1
.text:00000000000124F9                 jmp     loc_12394
.text:00000000000124F9 ; ---------------------------------------------------------------------------
.text:00000000000124FE                 align 20h
.text:0000000000012500
.text:0000000000012500 loc_12500:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000012500                                         ; DATA XREF: .rodata:jpt_1241C↓o
.text:0000000000012500                 and     r15d, 1200h     ; jumptable 000000000001241C case 125
.text:0000000000012507                 mov     eax, 1
.text:000000000001250C                 cmp     r15, 1200h
.text:0000000000012513                 jnz     loc_12394
.text:0000000000012519
.text:0000000000012519 loc_12519:                              ; CODE XREF: peek_token+451↓j
.text:0000000000012519                 mov     byte ptr [rbp+8], 18h
.text:000000000001251D                 jmp     loc_12394
.text:000000000001251D ; ---------------------------------------------------------------------------
.text:0000000000012522                 align 8
.text:0000000000012528
.text:0000000000012528 loc_12528:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000012528                                         ; DATA XREF: .rodata:jpt_1241C↓o
.text:0000000000012528                 and     r15d, 8400h     ; jumptable 000000000001241C case 124
.text:000000000001252F                 cmp     r15, 8000h
.text:0000000000012536                 jz      loc_12612
.text:000000000001253C
.text:000000000001253C def_1241C:                              ; CODE XREF: peek_token+134↑j
.text:000000000001253C                                         ; peek_token+14C↑j ...
.text:000000000001253C                 mov     eax, 1          ; jumptable 000000000001241C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:0000000000012541                 jmp     loc_12394
.text:0000000000012541 ; ---------------------------------------------------------------------------
.text:0000000000012546                 align 10h
.text:0000000000012550
.text:0000000000012550 loc_12550:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000012550                                         ; DATA XREF: .rodata:jpt_1241C↓o
.text:0000000000012550                 and     r15d, 1200h     ; jumptable 000000000001241C case 123
.text:0000000000012557                 mov     eax, 1
.text:000000000001255C                 cmp     r15, 1200h
.text:0000000000012563                 jnz     loc_12394
.text:0000000000012569
.text:0000000000012569 loc_12569:                              ; CODE XREF: peek_token+3FD↓j
.text:0000000000012569                 mov     byte ptr [rbp+8], 17h
.text:000000000001256D                 jmp     loc_12394
.text:000000000001256D ; ---------------------------------------------------------------------------
.text:0000000000012572                 align 8
.text:0000000000012578
.text:0000000000012578 loc_12578:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000012578                                         ; DATA XREF: .rodata:jpt_1241C↓o
.text:0000000000012578                 test    r15d, 800008h   ; jumptable 000000000001241C case 94
.text:000000000001257F                 jnz     short loc_1258A
.text:0000000000012581                 test    r14, r14
.text:0000000000012584                 jnz     loc_1294A
.text:000000000001258A
.text:000000000001258A loc_1258A:                              ; CODE XREF: peek_token+2AF↑j
.text:000000000001258A                                         ; peek_token+693↓j
.text:000000000001258A                 mov     byte ptr [rbp+8], 0Ch
.text:000000000001258E                 mov     dword ptr [rbp+0], 10h
.text:0000000000012595                 mov     eax, 1
.text:000000000001259A                 jmp     loc_12394
.text:000000000001259A ; ---------------------------------------------------------------------------
.text:000000000001259F                 align 20h
.text:00000000000125A0
.text:00000000000125A0 loc_125A0:                              ; CODE XREF: peek_token+14C↑j
.text:00000000000125A0                                         ; DATA XREF: .rodata:jpt_1241C↓o
.text:00000000000125A0                 mov     byte ptr [rbp+8], 14h ; jumptable 000000000001241C case 91
.text:00000000000125A4                 mov     eax, 1
.text:00000000000125A9                 jmp     loc_12394
.text:00000000000125A9 ; ---------------------------------------------------------------------------
.text:00000000000125AE                 align 10h
.text:00000000000125B0
.text:00000000000125B0 loc_125B0:                              ; CODE XREF: peek_token+14C↑j
.text:00000000000125B0                                         ; DATA XREF: .rodata:jpt_1241C↓o
.text:00000000000125B0                 test    r15d, 402h      ; jumptable 000000000001241C case 63
.text:00000000000125B7                 mov     eax, 1
.text:00000000000125BC                 jnz     loc_12394
.text:00000000000125C2
.text:00000000000125C2 loc_125C2:                              ; CODE XREF: peek_token+508↓j
.text:00000000000125C2                 mov     byte ptr [rbp+8], 13h
.text:00000000000125C6                 jmp     loc_12394
.text:00000000000125C6 ; ---------------------------------------------------------------------------
.text:00000000000125CB                 align 10h
.text:00000000000125D0
.text:00000000000125D0 loc_125D0:                              ; CODE XREF: peek_token+14C↑j
.text:00000000000125D0                                         ; DATA XREF: .rodata:jpt_1241C↓o
.text:00000000000125D0                 mov     byte ptr [rbp+8], 5 ; jumptable 000000000001241C case 46
.text:00000000000125D4                 mov     eax, 1
.text:00000000000125D9                 jmp     loc_12394
.text:00000000000125D9 ; ---------------------------------------------------------------------------
.text:00000000000125DE                 align 20h
.text:00000000000125E0
.text:00000000000125E0 loc_125E0:                              ; CODE XREF: peek_token+14C↑j
.text:00000000000125E0                                         ; DATA XREF: .rodata:jpt_1241C↓o
.text:00000000000125E0                 test    r15d, 402h      ; jumptable 000000000001241C case 43
.text:00000000000125E7                 mov     eax, 1
.text:00000000000125EC                 jnz     loc_12394
.text:00000000000125F2
.text:00000000000125F2 loc_125F2:                              ; CODE XREF: peek_token+590↓j
.text:00000000000125F2                 mov     byte ptr [rbp+8], 12h
.text:00000000000125F6                 jmp     loc_12394
.text:00000000000125F6 ; ---------------------------------------------------------------------------
.text:00000000000125FB                 align 20h
.text:0000000000012600
.text:0000000000012600 loc_12600:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000012600                                         ; DATA XREF: .rodata:jpt_1241C↓o
.text:0000000000012600                 test    r15d, 800h      ; jumptable 000000000001241C case 10
.text:0000000000012607                 mov     eax, 1
.text:000000000001260C                 jz      loc_12394
.text:0000000000012612
.text:0000000000012612 loc_12612:                              ; CODE XREF: peek_token+266↑j
.text:0000000000012612                 mov     byte ptr [rbp+8], 0Ah
.text:0000000000012616                 mov     eax, 1
.text:000000000001261B                 jmp     loc_12394
.text:0000000000012620 ; ---------------------------------------------------------------------------
.text:0000000000012620
.text:0000000000012620 loc_12620:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000012620                                         ; DATA XREF: .rodata:jpt_1241C↓o
.text:0000000000012620                 mov     byte ptr [rbp+8], 0Bh ; jumptable 000000000001241C case 42
.text:0000000000012624                 mov     eax, 1
.text:0000000000012629                 jmp     loc_12394
.text:0000000000012629 ; ---------------------------------------------------------------------------
.text:000000000001262E                 align 10h
.text:0000000000012630
.text:0000000000012630 loc_12630:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000012630                                         ; DATA XREF: .rodata:jpt_1241C↓o
.text:0000000000012630                 test    r15d, 2000h     ; jumptable 000000000001241C case 41
.text:0000000000012637                 mov     eax, 1
.text:000000000001263C                 jz      loc_12394
.text:0000000000012642
.text:0000000000012642 loc_12642:                              ; CODE XREF: peek_token+5A7↓j
.text:0000000000012642                 mov     byte ptr [rbp+8], 9
.text:0000000000012646                 jmp     loc_12394
.text:0000000000012646 ; ---------------------------------------------------------------------------
.text:000000000001264B                 align 10h
.text:0000000000012650
.text:0000000000012650 loc_12650:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000012650                                         ; DATA XREF: .rodata:jpt_1241C↓o
.text:0000000000012650                 test    r15d, 2000h     ; jumptable 000000000001241C case 40
.text:0000000000012657                 mov     eax, 1
.text:000000000001265C                 jz      loc_12394
.text:0000000000012662
.text:0000000000012662 loc_12662:                              ; CODE XREF: peek_token+5BE↓j
.text:0000000000012662                 mov     byte ptr [rbp+8], 8
.text:0000000000012666                 jmp     loc_12394
.text:0000000000012666 ; ---------------------------------------------------------------------------
.text:000000000001266B                 align 10h
.text:0000000000012670
.text:0000000000012670 loc_12670:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000012670                                         ; DATA XREF: .rodata:jpt_1241C↓o
.text:0000000000012670                 test    r15b, 8         ; jumptable 000000000001241C case 36
.text:0000000000012674                 jnz     short loc_12684
.text:0000000000012676                 add     r14, 1
.text:000000000001267A                 cmp     r14, [rbx+58h]
.text:000000000001267E                 jnz     loc_1297B
.text:0000000000012684
.text:0000000000012684 loc_12684:                              ; CODE XREF: peek_token+3A4↑j
.text:0000000000012684                                         ; peek_token+6DA↓j
.text:0000000000012684                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000012688                 mov     dword ptr [rbp+0], 20h ; ' '
.text:000000000001268F                 mov     eax, 1
.text:0000000000012694                 jmp     loc_12394
.text:0000000000012699 ; ---------------------------------------------------------------------------
.text:0000000000012699
.text:0000000000012699 loc_12699:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000012699                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:0000000000012699                 test    r15d, 8400h     ; jumptable 00000000000124C8 case 124
.text:00000000000126A0                 mov     eax, 2
.text:00000000000126A5                 jnz     loc_12394
.text:00000000000126AB                 mov     byte ptr [rbp+8], 0Ah
.text:00000000000126AF                 jmp     loc_12394
.text:00000000000126B4 ; ---------------------------------------------------------------------------
.text:00000000000126B4
.text:00000000000126B4 loc_126B4:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000126B4                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:00000000000126B4                 and     r15d, 1200h     ; jumptable 00000000000124C8 case 123
.text:00000000000126BB                 mov     eax, 2
.text:00000000000126C0                 cmp     r15, 200h
.text:00000000000126C7                 jnz     loc_12394
.text:00000000000126CD                 jmp     loc_12569
.text:00000000000126D2 ; ---------------------------------------------------------------------------
.text:00000000000126D2
.text:00000000000126D2 loc_126D2:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000126D2                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:00000000000126D2                 test    r15d, 80000h    ; jumptable 00000000000124C8 case 119
.text:00000000000126D9                 mov     eax, 2
.text:00000000000126DE                 jnz     loc_12394
.text:00000000000126E4                 mov     byte ptr [rbp+8], 20h ; ' '
.text:00000000000126E8                 jmp     loc_12394
.text:00000000000126ED ; ---------------------------------------------------------------------------
.text:00000000000126ED
.text:00000000000126ED loc_126ED:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000126ED                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:00000000000126ED                 test    r15d, 80000h    ; jumptable 00000000000124C8 case 115
.text:00000000000126F4                 mov     eax, 2
.text:00000000000126F9                 jnz     loc_12394
.text:00000000000126FF                 mov     byte ptr [rbp+8], 22h ; '"'
.text:0000000000012703                 jmp     loc_12394
.text:0000000000012708 ; ---------------------------------------------------------------------------
.text:0000000000012708
.text:0000000000012708 loc_12708:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000012708                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:0000000000012708                 and     r15d, 1200h     ; jumptable 00000000000124C8 case 125
.text:000000000001270F                 mov     eax, 2
.text:0000000000012714                 cmp     r15, 200h
.text:000000000001271B                 jnz     loc_12394
.text:0000000000012721                 jmp     loc_12519
.text:0000000000012726 ; ---------------------------------------------------------------------------
.text:0000000000012726
.text:0000000000012726 loc_12726:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000012726                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:0000000000012726                 test    r15d, 80000h    ; jumptable 00000000000124C8 case 98
.text:000000000001272D                 mov     eax, 2
.text:0000000000012732                 jnz     loc_12394
.text:0000000000012738                 mov     byte ptr [rbp+8], 0Ch
.text:000000000001273C                 mov     dword ptr [rbp+0], 100h
.text:0000000000012743                 jmp     loc_12394
.text:0000000000012748 ; ---------------------------------------------------------------------------
.text:0000000000012748
.text:0000000000012748 loc_12748:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000012748                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:0000000000012748                 test    r15d, 80000h    ; jumptable 00000000000124C8 case 96
.text:000000000001274F                 mov     eax, 2
.text:0000000000012754                 jnz     loc_12394
.text:000000000001275A                 mov     byte ptr [rbp+8], 0Ch
.text:000000000001275E                 mov     dword ptr [rbp+0], 40h ; '@'
.text:0000000000012765                 jmp     loc_12394
.text:000000000001276A ; ---------------------------------------------------------------------------
.text:000000000001276A
.text:000000000001276A loc_1276A:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001276A                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:000000000001276A                 test    r15d, 80000h    ; jumptable 00000000000124C8 case 87
.text:0000000000012771                 mov     eax, 2
.text:0000000000012776                 jnz     loc_12394
.text:000000000001277C                 mov     byte ptr [rbp+8], 21h ; '!'
.text:0000000000012780                 jmp     loc_12394
.text:0000000000012785 ; ---------------------------------------------------------------------------
.text:0000000000012785
.text:0000000000012785 loc_12785:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000012785                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:0000000000012785                 test    r15d, 80000h    ; jumptable 00000000000124C8 case 83
.text:000000000001278C                 mov     eax, 2
.text:0000000000012791                 jnz     loc_12394
.text:0000000000012797                 mov     byte ptr [rbp+8], 23h ; '#'
.text:000000000001279B                 jmp     loc_12394
.text:00000000000127A0 ; ---------------------------------------------------------------------------
.text:00000000000127A0
.text:00000000000127A0 loc_127A0:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000127A0                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:00000000000127A0                 test    r15d, 80000h    ; jumptable 00000000000124C8 case 66
.text:00000000000127A7                 mov     eax, 2
.text:00000000000127AC                 jnz     loc_12394
.text:00000000000127B2                 mov     byte ptr [rbp+8], 0Ch
.text:00000000000127B6                 mov     dword ptr [rbp+0], 200h
.text:00000000000127BD                 jmp     loc_12394
.text:00000000000127C2 ; ---------------------------------------------------------------------------
.text:00000000000127C2
.text:00000000000127C2 loc_127C2:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000127C2                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:00000000000127C2                 and     r15d, 402h      ; jumptable 00000000000124C8 case 63
.text:00000000000127C9                 mov     eax, 2
.text:00000000000127CE                 cmp     r15, 2
.text:00000000000127D2                 jnz     loc_12394
.text:00000000000127D8                 jmp     loc_125C2
.text:00000000000127DD ; ---------------------------------------------------------------------------
.text:00000000000127DD
.text:00000000000127DD loc_127DD:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000127DD                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:00000000000127DD                 test    r15d, 80000h    ; jumptable 00000000000124C8 case 62
.text:00000000000127E4                 mov     eax, 2
.text:00000000000127E9                 jnz     loc_12394
.text:00000000000127EF                 mov     byte ptr [rbp+8], 0Ch
.text:00000000000127F3                 mov     dword ptr [rbp+0], 9
.text:00000000000127FA                 jmp     loc_12394
.text:00000000000127FF ; ---------------------------------------------------------------------------
.text:00000000000127FF
.text:00000000000127FF loc_127FF:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000127FF                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:00000000000127FF                 test    r15d, 80000h    ; jumptable 00000000000124C8 case 60
.text:0000000000012806                 mov     eax, 2
.text:000000000001280B                 jnz     loc_12394
.text:0000000000012811                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000012815                 mov     dword ptr [rbp+0], 6
.text:000000000001281C                 jmp     loc_12394
.text:0000000000012821 ; ---------------------------------------------------------------------------
.text:0000000000012821
.text:0000000000012821 loc_12821:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000012821                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:0000000000012821                 test    r15d, 4000h     ; jumptable 00000000000124C8 cases 49-57
.text:0000000000012828                 mov     eax, 2
.text:000000000001282D                 jnz     loc_12394
.text:0000000000012833                 mov     edx, dword ptr [rsp+68h+var_60]
.text:0000000000012837                 mov     byte ptr [rbp+8], 4
.text:000000000001283B                 sub     edx, 31h ; '1'
.text:000000000001283E                 movsxd  rdx, edx
.text:0000000000012841                 mov     [rbp+0], rdx
.text:0000000000012845                 jmp     loc_12394
.text:000000000001284A ; ---------------------------------------------------------------------------
.text:000000000001284A
.text:000000000001284A loc_1284A:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001284A                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:000000000001284A                 and     r15d, 402h      ; jumptable 00000000000124C8 case 43
.text:0000000000012851                 mov     eax, 2
.text:0000000000012856                 cmp     r15, 2
.text:000000000001285A                 jnz     loc_12394
.text:0000000000012860                 jmp     loc_125F2
.text:0000000000012865 ; ---------------------------------------------------------------------------
.text:0000000000012865
.text:0000000000012865 loc_12865:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000012865                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:0000000000012865                 test    r15d, 2000h     ; jumptable 00000000000124C8 case 41
.text:000000000001286C                 mov     eax, 2
.text:0000000000012871                 jnz     loc_12394
.text:0000000000012877                 jmp     loc_12642
.text:000000000001287C ; ---------------------------------------------------------------------------
.text:000000000001287C
.text:000000000001287C loc_1287C:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001287C                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:000000000001287C                 test    r15d, 2000h     ; jumptable 00000000000124C8 case 40
.text:0000000000012883                 mov     eax, 2
.text:0000000000012888                 jnz     loc_12394
.text:000000000001288E                 jmp     loc_12662
.text:0000000000012893 ; ---------------------------------------------------------------------------
.text:0000000000012893
.text:0000000000012893 loc_12893:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000012893                                         ; DATA XREF: .rodata:jpt_124C8↓o
.text:0000000000012893                 test    r15d, 80000h    ; jumptable 00000000000124C8 case 39
.text:000000000001289A                 mov     eax, 2
.text:000000000001289F                 jnz     loc_12394
.text:00000000000128A5                 mov     byte ptr [rbp+8], 0Ch
.text:00000000000128A9                 mov     dword ptr [rbp+0], 80h
.text:00000000000128B0                 jmp     loc_12394
.text:00000000000128B5 ; ---------------------------------------------------------------------------
.text:00000000000128B5
.text:00000000000128B5 def_124C8:                              ; CODE XREF: peek_token+1E1↑j
.text:00000000000128B5                                         ; peek_token+1F8↑j
.text:00000000000128B5                                         ; DATA XREF: ...
.text:00000000000128B5                 mov     eax, 2          ; jumptable 00000000000124C8 default case, cases 42,44-48,58,59,61,64,65,67-82,84-86,88-95,97,99-114,116-118,120-122
.text:00000000000128BA                 jmp     loc_12394
.text:00000000000128BA ; ---------------------------------------------------------------------------
.text:00000000000128BF                 align 20h
.text:00000000000128C0
.text:00000000000128C0 loc_128C0:                              ; CODE XREF: peek_token+1A3↑j
.text:00000000000128C0                 call    ___ctype_b_loc
.text:00000000000128C5                 mov     rsi, [rax]
.text:00000000000128C8                 movzx   edx, r12b
.text:00000000000128CC                 movzx   eax, word ptr [rsi+rdx*2]
.text:00000000000128D0                 shr     ax, 3
.text:00000000000128D4                 and     eax, 1
.text:00000000000128D7                 cmp     r12b, 5Fh ; '_'
.text:00000000000128DB                 jmp     loc_1249A
.text:00000000000128E0 ; ---------------------------------------------------------------------------
.text:00000000000128E0
.text:00000000000128E0 loc_128E0:                              ; CODE XREF: peek_token+185↑j
.text:00000000000128E0                 cmp     eax, 1
.text:00000000000128E3                 jle     short loc_12914
.text:00000000000128E5                 mov     rcx, [rbx+10h]
.text:00000000000128E9                 lea     rdi, ds:0[rsi*4]
.text:00000000000128F1                 mov     r8d, [rcx+rsi*4]
.text:00000000000128F5                 cmp     r8d, 0FFFFFFFFh
.text:00000000000128F9                 jz      loc_129AF
.text:00000000000128FF                 lea     r9, [r14+2]
.text:0000000000012903                 cmp     [rbx+30h], r9
.text:0000000000012907                 jz      short loc_12914
.text:0000000000012909                 cmp     dword ptr [rcx+rdi+4], 0FFFFFFFFh
.text:000000000001290E                 jz      loc_129AF
.text:0000000000012914
.text:0000000000012914 loc_12914:                              ; CODE XREF: peek_token+613↑j
.text:0000000000012914                                         ; peek_token+637↑j
.text:0000000000012914                 cmp     byte ptr [rbx+8Ch], 0
.text:000000000001291B                 mov     rcx, [rbx]
.text:000000000001291E                 mov     rdi, [rbx+28h]
.text:0000000000012922                 jz      short loc_12968
.text:0000000000012924                 mov     r8, [rbx+18h]
.text:0000000000012928                 add     rcx, rdi
.text:000000000001292B                 add     rcx, [r8+rsi*8]
.text:000000000001292F                 movzx   edi, byte ptr [rcx]
.text:0000000000012932                 mov     r12d, edi
.text:0000000000012935                 mov     dword ptr [rsp+68h+var_60], edi
.text:0000000000012939                 and     edi, 80h
.text:000000000001293F                 jnz     loc_1245B
.text:0000000000012945                 jmp     loc_12468
.text:000000000001294A ; ---------------------------------------------------------------------------
.text:000000000001294A
.text:000000000001294A loc_1294A:                              ; CODE XREF: peek_token+2B4↑j
.text:000000000001294A                 cmp     byte ptr [rdx+r14-1], 0Ah
.text:0000000000012950                 jnz     def_1241C       ; jumptable 000000000001241C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:0000000000012956                 test    r15d, 800h
.text:000000000001295D                 jz      def_1241C       ; jumptable 000000000001241C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:0000000000012963                 jmp     loc_1258A
.text:0000000000012968 ; ---------------------------------------------------------------------------
.text:0000000000012968
.text:0000000000012968 loc_12968:                              ; CODE XREF: peek_token+652↑j
.text:0000000000012968                 add     rcx, rsi
.text:000000000001296B                 movzx   edi, byte ptr [rcx+rdi]
.text:000000000001296F                 mov     r12d, edi
.text:0000000000012972                 mov     dword ptr [rsp+68h+var_60], edi
.text:0000000000012976                 jmp     loc_12468
.text:000000000001297B ; ---------------------------------------------------------------------------
.text:000000000001297B
.text:000000000001297B loc_1297B:                              ; CODE XREF: peek_token+3AE↑j
.text:000000000001297B                 lea     rdi, [rsp+68h+var_58]
.text:0000000000012980                 mov     rdx, r15
.text:0000000000012983                 mov     [rbx+48h], r14
.text:0000000000012987                 mov     rsi, rbx
.text:000000000001298A                 call    peek_token
.text:000000000001298F                 movzx   eax, [rsp+68h+var_50]
.text:0000000000012994                 sub     qword ptr [rbx+48h], 1
.text:0000000000012999                 lea     edx, [rax-9]
.text:000000000001299C                 mov     eax, 1
.text:00000000000129A1                 cmp     dl, 1
.text:00000000000129A4                 ja      loc_12394
.text:00000000000129AA                 jmp     loc_12684
.text:00000000000129AF ; ---------------------------------------------------------------------------
.text:00000000000129AF
.text:00000000000129AF loc_129AF:                              ; CODE XREF: peek_token+629↑j
.text:00000000000129AF                                         ; peek_token+63E↑j
.text:00000000000129AF                 movzx   eax, byte ptr [rdx+r14+1]
.text:00000000000129B5                 mov     byte ptr [rbp+8], 1
.text:00000000000129B9                 mov     r12d, eax
.text:00000000000129BC                 mov     [rbp+0], al
.text:00000000000129BF                 mov     dword ptr [rsp+68h+var_60], eax
.text:00000000000129C3                 jmp     loc_12481
.text:00000000000129C8 ; ---------------------------------------------------------------------------
.text:00000000000129C8
.text:00000000000129C8 loc_129C8:                              ; CODE XREF: peek_token+D2↑j
.text:00000000000129C8                 call    ___stack_chk_fail
.text:00000000000129C8 ; } // starts at 122D0
.text:00000000000129C8 peek_token      endp
.text:00000000000129C8
.text:00000000000129C8 ; ---------------------------------------------------------------------------
.text:00000000000129CD                 align 10h
.text:00000000000129D0
.text:00000000000129D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000129D0
.text:00000000000129D0
.text:00000000000129D0 fetch_number    proc near               ; CODE XREF: parse_expression+527↓p
.text:00000000000129D0                                         ; parse_expression+611↓p
.text:00000000000129D0 ; __unwind {
.text:00000000000129D0                 push    r14
.text:00000000000129D2                 mov     r14, rdi
.text:00000000000129D5                 push    r13
.text:00000000000129D7                 mov     r13, rsi
.text:00000000000129DA                 push    r12
.text:00000000000129DC                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:00000000000129E3                 push    rbp
.text:00000000000129E4                 mov     rbp, rdx
.text:00000000000129E7                 push    rbx
.text:00000000000129E8                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000129EF                 nop
.text:00000000000129F0
.text:00000000000129F0 loc_129F0:                              ; CODE XREF: fetch_number+52↓j
.text:00000000000129F0                                         ; fetch_number+87↓j ...
.text:00000000000129F0                 mov     rdx, rbp
.text:00000000000129F3                 mov     rsi, r14
.text:00000000000129F6                 mov     rdi, r13
.text:00000000000129F9                 call    peek_token
.text:00000000000129FE                 cdqe
.text:0000000000012A00                 add     [r14+48h], rax
.text:0000000000012A04                 movzx   eax, byte ptr [r13+8]
.text:0000000000012A09                 movzx   edx, byte ptr [r13+0]
.text:0000000000012A0E                 cmp     al, 2
.text:0000000000012A10                 jz      short loc_12A60
.text:0000000000012A12                 cmp     al, 18h
.text:0000000000012A14                 jz      short loc_12A67
.text:0000000000012A16                 cmp     dl, 2Ch ; ','
.text:0000000000012A19                 jz      short loc_12A67
.text:0000000000012A1B                 cmp     al, 1
.text:0000000000012A1D                 jz      short loc_12A28
.text:0000000000012A1F
.text:0000000000012A1F loc_12A1F:                              ; CODE XREF: fetch_number+5D↓j
.text:0000000000012A1F                                         ; fetch_number+63↓j
.text:0000000000012A1F                 mov     rbx, r12
.text:0000000000012A22                 jmp     short loc_129F0
.text:0000000000012A22 ; ---------------------------------------------------------------------------
.text:0000000000012A24                 align 8
.text:0000000000012A28
.text:0000000000012A28 loc_12A28:                              ; CODE XREF: fetch_number+4D↑j
.text:0000000000012A28                 lea     eax, [rdx-30h]
.text:0000000000012A2B                 cmp     al, 9
.text:0000000000012A2D                 ja      short loc_12A1F
.text:0000000000012A2F                 cmp     rbx, 0FFFFFFFFFFFFFFFEh
.text:0000000000012A33                 jz      short loc_12A1F
.text:0000000000012A35                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000012A39                 jz      short loc_12A78
.text:0000000000012A3B                 lea     rax, [rbx+rbx*4]
.text:0000000000012A3F                 lea     rbx, [rdx+rax*2]
.text:0000000000012A43                 mov     eax, 8030h
.text:0000000000012A48                 cmp     rbx, 8030h
.text:0000000000012A4F                 cmovg   rbx, rax
.text:0000000000012A53                 sub     rbx, 30h ; '0'
.text:0000000000012A57                 jmp     short loc_129F0
.text:0000000000012A57 ; ---------------------------------------------------------------------------
.text:0000000000012A59                 align 20h
.text:0000000000012A60
.text:0000000000012A60 loc_12A60:                              ; CODE XREF: fetch_number+40↑j
.text:0000000000012A60                 mov     rbx, 0FFFFFFFFFFFFFFFEh
.text:0000000000012A67
.text:0000000000012A67 loc_12A67:                              ; CODE XREF: fetch_number+44↑j
.text:0000000000012A67                                         ; fetch_number+49↑j
.text:0000000000012A67                 mov     rax, rbx
.text:0000000000012A6A                 pop     rbx
.text:0000000000012A6B                 pop     rbp
.text:0000000000012A6C                 pop     r12
.text:0000000000012A6E                 pop     r13
.text:0000000000012A70                 pop     r14
.text:0000000000012A72                 retn
.text:0000000000012A72 ; ---------------------------------------------------------------------------
.text:0000000000012A73                 align 8
.text:0000000000012A78
.text:0000000000012A78 loc_12A78:                              ; CODE XREF: fetch_number+69↑j
.text:0000000000012A78                 movzx   ebx, dl
.text:0000000000012A7B                 sub     ebx, 30h ; '0'
.text:0000000000012A7E                 movsxd  rbx, ebx
.text:0000000000012A81                 jmp     loc_129F0
.text:0000000000012A81 ; } // starts at 129D0
.text:0000000000012A81 fetch_number    endp
.text:0000000000012A81
.text:0000000000012A81 ; ---------------------------------------------------------------------------
.text:0000000000012A86                 align 10h
.text:0000000000012A90
.text:0000000000012A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000012A90
.text:0000000000012A90
.text:0000000000012A90 parse_expression proc near              ; CODE XREF: parse_expression+FFA↓p
.text:0000000000012A90                                         ; parse_branch+39↓p ...
.text:0000000000012A90
.text:0000000000012A90 var_158         = qword ptr -158h
.text:0000000000012A90 var_148         = qword ptr -148h
.text:0000000000012A90 var_140         = qword ptr -140h
.text:0000000000012A90 var_138         = qword ptr -138h
.text:0000000000012A90 var_130         = qword ptr -130h
.text:0000000000012A90 var_128         = xmmword ptr -128h
.text:0000000000012A90 var_118         = qword ptr -118h
.text:0000000000012A90 var_110         = qword ptr -110h
.text:0000000000012A90 var_101         = byte ptr -101h
.text:0000000000012A90 var_100         = qword ptr -100h
.text:0000000000012A90 var_F8          = qword ptr -0F8h
.text:0000000000012A90 var_F0          = qword ptr -0F0h
.text:0000000000012A90 var_E8          = qword ptr -0E8h
.text:0000000000012A90 ptr             = qword ptr -0E0h
.text:0000000000012A90 size            = qword ptr -0D8h
.text:0000000000012A90 var_D0          = dword ptr -0D0h
.text:0000000000012A90 var_CC          = dword ptr -0CCh
.text:0000000000012A90 var_C0          = qword ptr -0C0h
.text:0000000000012A90 var_B8          = dword ptr -0B8h
.text:0000000000012A90 var_B0          = qword ptr -0B0h
.text:0000000000012A90 var_A8          = qword ptr -0A8h
.text:0000000000012A90 var_A0          = qword ptr -0A0h
.text:0000000000012A90 var_98          = byte ptr -98h
.text:0000000000012A90 var_90          = byte ptr -90h
.text:0000000000012A90 var_88          = byte ptr -88h
.text:0000000000012A90 var_68          = byte ptr -68h
.text:0000000000012A90 var_40          = qword ptr -40h
.text:0000000000012A90
.text:0000000000012A90 ; __unwind {
.text:0000000000012A90                 push    r15
.text:0000000000012A92                 push    r14
.text:0000000000012A94                 push    r13
.text:0000000000012A96                 push    r12
.text:0000000000012A98                 push    rbp
.text:0000000000012A99                 push    rbx
.text:0000000000012A9A                 sub     rsp, 128h
.text:0000000000012AA1                 mov     [rsp+158h+var_138], rcx
.text:0000000000012AA6                 movzx   ecx, byte ptr [rdx+8]
.text:0000000000012AAA                 mov     rax, fs:28h
.text:0000000000012AB3                 mov     [rsp+158h+var_40], rax
.text:0000000000012ABB                 xor     eax, eax
.text:0000000000012ABD                 mov     rax, [rsi]
.text:0000000000012AC0                 mov     [rsp+158h+var_140], rdx
.text:0000000000012AC5                 mov     [rsp+158h+var_118], r9
.text:0000000000012ACA                 cmp     cl, 24h         ; switch 37 cases
.text:0000000000012ACD                 mov     [rsp+158h+var_148], rax
.text:0000000000012AD2                 ja      def_12AEF       ; jumptable 0000000000012AEF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000012AD8                 mov     rbp, rsi
.text:0000000000012ADB                 lea     rsi, jpt_12AEF
.text:0000000000012AE2                 movzx   edx, cl
.text:0000000000012AE5                 mov     r14, rdi
.text:0000000000012AE8                 movsxd  rax, ds:(jpt_12AEF - 17AA0h)[rsi+rdx*4]
.text:0000000000012AEC                 add     rax, rsi
.text:0000000000012AEF                 jmp     rax             ; switch jump
.text:0000000000012AF1 ; ---------------------------------------------------------------------------
.text:0000000000012AF1
.text:0000000000012AF1 loc_12AF1:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000012AF1                                         ; DATA XREF: .rodata:jpt_12AEF↓o
.text:0000000000012AF1                 mov     rbx, [rbp+30h]  ; jumptable 0000000000012AEF case 8
.text:0000000000012AF5                 mov     r15, [rsp+158h+var_138]
.text:0000000000012AFA                 mov     rsi, rdi
.text:0000000000012AFD                 mov     r13, [rsp+158h+var_140]
.text:0000000000012B02                 mov     [rsp+158h+var_158], r8
.text:0000000000012B06                 lea     rax, [rbx+1]
.text:0000000000012B0A                 mov     rdx, r15
.text:0000000000012B0D                 or      rdx, 800000h
.text:0000000000012B14                 mov     rdi, r13
.text:0000000000012B17                 mov     [rbp+30h], rax
.text:0000000000012B1B                 call    peek_token
.text:0000000000012B20                 cdqe
.text:0000000000012B22                 add     [r14+48h], rax
.text:0000000000012B26                 xor     eax, eax
.text:0000000000012B28                 cmp     byte ptr [r13+8], 9
.text:0000000000012B2D                 mov     rdx, r13
.text:0000000000012B30                 jz      loc_13630
.text:0000000000012B36                 mov     r13, [rsp+158h+var_118]
.text:0000000000012B3B                 mov     r8, [rsp+158h+var_158]
.text:0000000000012B3F                 mov     rcx, r15
.text:0000000000012B42                 mov     rsi, rbp
.text:0000000000012B45                 mov     rdi, r14
.text:0000000000012B48                 add     r8, 1
.text:0000000000012B4C                 mov     r9, r13
.text:0000000000012B4F                 call    parse_reg_exp
.text:0000000000012B54                 mov     r11d, [r13+0]
.text:0000000000012B58                 test    r11d, r11d
.text:0000000000012B5B                 jnz     short def_12AEF ; jumptable 0000000000012AEF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000012B5D                 mov     rdx, [rsp+158h+var_140]
.text:0000000000012B62                 cmp     byte ptr [rdx+8], 9
.text:0000000000012B66                 jz      loc_13630
.text:0000000000012B6C                 test    rax, rax
.text:0000000000012B6F                 jz      short loc_12B82
.text:0000000000012B71                 lea     rsi, free_tree
.text:0000000000012B78                 xor     edx, edx
.text:0000000000012B7A                 mov     rdi, rax
.text:0000000000012B7D                 call    postorder
.text:0000000000012B82
.text:0000000000012B82 loc_12B82:                              ; CODE XREF: parse_expression+DF↑j
.text:0000000000012B82                 mov     rax, [rsp+158h+var_118]
.text:0000000000012B87                 mov     dword ptr [rax], 8
.text:0000000000012B8D                 nop     dword ptr [rax]
.text:0000000000012B90
.text:0000000000012B90 def_12AEF:                              ; CODE XREF: parse_expression+42↑j
.text:0000000000012B90                                         ; parse_expression+5F↑j ...
.text:0000000000012B90                 mov     [rsp+158h+var_130], 0 ; jumptable 0000000000012AEF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000012B99                 nop     dword ptr [rax+00000000h]
.text:0000000000012BA0
.text:0000000000012BA0 loc_12BA0:                              ; CODE XREF: parse_expression+1CA↓j
.text:0000000000012BA0                                         ; parse_expression+1DE↓j ...
.text:0000000000012BA0                 mov     rdi, [rsp+158h+var_40]
.text:0000000000012BA8                 xor     rdi, fs:28h
.text:0000000000012BB1                 mov     rax, [rsp+158h+var_130]
.text:0000000000012BB6                 jnz     loc_13F2E
.text:0000000000012BBC                 add     rsp, 128h
.text:0000000000012BC3                 pop     rbx
.text:0000000000012BC4                 pop     rbp
.text:0000000000012BC5                 pop     r12
.text:0000000000012BC7                 pop     r13
.text:0000000000012BC9                 pop     r14
.text:0000000000012BCB                 pop     r15
.text:0000000000012BCD                 retn
.text:0000000000012BCE ; ---------------------------------------------------------------------------
.text:0000000000012BCE
.text:0000000000012BCE loc_12BCE:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000012BCE                                         ; DATA XREF: .rodata:jpt_12AEF↓o
.text:0000000000012BCE                 test    [rsp+158h+var_138], 1000000h ; jumptable 0000000000012AEF case 23
.text:0000000000012BD7                 jnz     loc_12E2D
.text:0000000000012BDD
.text:0000000000012BDD loc_12BDD:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000012BDD                                         ; DATA XREF: .rodata:jpt_12AEF↓o
.text:0000000000012BDD                 mov     rax, [rsp+158h+var_138] ; jumptable 0000000000012AEF cases 11,18,19
.text:0000000000012BE2                 test    al, 20h
.text:0000000000012BE4                 jnz     loc_12E2D
.text:0000000000012BEA                 test    al, 10h
.text:0000000000012BEC                 jnz     loc_13A55
.text:0000000000012BF2                 cmp     cl, 9
.text:0000000000012BF5                 jz      loc_13608       ; jumptable 0000000000012AEF case 9
.text:0000000000012BFB
.text:0000000000012BFB loc_12BFB:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000012BFB                                         ; parse_expression+B81↓j
.text:0000000000012BFB                                         ; DATA XREF: ...
.text:0000000000012BFB                 mov     rax, [rsp+158h+var_148] ; jumptable 0000000000012AEF case 24
.text:0000000000012C00                 mov     r8, [rsp+158h+var_140]
.text:0000000000012C05                 xor     ecx, ecx
.text:0000000000012C07                 xor     edx, edx
.text:0000000000012C09                 lea     rsi, [rax+80h]
.text:0000000000012C10                 lea     rdi, [rax+70h]
.text:0000000000012C14                 mov     byte ptr [r8+8], 1
.text:0000000000012C19                 call    create_token_tree_isra_16
.text:0000000000012C1E                 test    rax, rax
.text:0000000000012C21                 mov     [rsp+158h+var_130], rax
.text:0000000000012C26                 jz      loc_135F8
.text:0000000000012C2C
.text:0000000000012C2C loc_12C2C:                              ; CODE XREF: parse_expression+9A0↓j
.text:0000000000012C2C                                         ; parse_expression+9A9↓j ...
.text:0000000000012C2C                 mov     rbx, [rsp+158h+var_140]
.text:0000000000012C31                 mov     rdx, [rsp+158h+var_138]
.text:0000000000012C36                 mov     rsi, r14
.text:0000000000012C39                 lea     r15, [rsp+158h+var_98]
.text:0000000000012C41                 mov     rdi, rbx
.text:0000000000012C44                 call    peek_token
.text:0000000000012C49                 cdqe
.text:0000000000012C4B                 add     [r14+48h], rax
.text:0000000000012C4F                 movzx   eax, byte ptr [rbx+8]
.text:0000000000012C53                 nop     dword ptr [rax+rax+00h]
.text:0000000000012C58
.text:0000000000012C58 loc_12C58:                              ; CODE XREF: parse_expression+370↓j
.text:0000000000012C58                                         ; parse_expression+37C↓j
.text:0000000000012C58                 cmp     al, 17h
.text:0000000000012C5A                 ja      loc_12BA0
.text:0000000000012C60                 cmp     al, 12h
.text:0000000000012C62                 mov     ecx, 8C0800h
.text:0000000000012C67                 setz    bl
.text:0000000000012C6A                 bt      rcx, rax
.text:0000000000012C6E                 jnb     loc_12BA0
.text:0000000000012C74                 mov     rcx, [rsp+158h+var_140]
.text:0000000000012C79                 cmp     al, 17h
.text:0000000000012C7B                 mov     rbp, [r14+48h]
.text:0000000000012C7F                 movdqa  xmm0, xmmword ptr [rcx]
.text:0000000000012C83                 jz      loc_12FA8
.text:0000000000012C89                 cmp     al, 13h
.text:0000000000012C8B                 movzx   ebx, bl
.text:0000000000012C8E                 jz      loc_12F40
.text:0000000000012C94                 mov     rdx, [rsp+158h+var_138]
.text:0000000000012C99                 mov     rdi, [rsp+158h+var_140]
.text:0000000000012C9E                 mov     rsi, r14
.text:0000000000012CA1                 call    peek_token
.text:0000000000012CA6                 cdqe
.text:0000000000012CA8                 add     [r14+48h], rax
.text:0000000000012CAC                 cmp     [rsp+158h+var_130], 0
.text:0000000000012CB2                 jz      loc_13040
.text:0000000000012CB8                 mov     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:0000000000012CC0
.text:0000000000012CC0 loc_12CC0:                              ; CODE XREF: parse_expression+4E3↓j
.text:0000000000012CC0                 test    rbx, rbx
.text:0000000000012CC3                 mov     rbp, [rsp+158h+var_130]
.text:0000000000012CC8                 mov     qword ptr [rsp+158h+var_128], 0
.text:0000000000012CD1                 jg      loc_12E50
.text:0000000000012CD7
.text:0000000000012CD7 loc_12CD7:                              ; CODE XREF: parse_expression+471↓j
.text:0000000000012CD7                 cmp     byte ptr [rbp+30h], 11h
.text:0000000000012CDB                 jz      loc_13020
.text:0000000000012CE1
.text:0000000000012CE1 loc_12CE1:                              ; CODE XREF: parse_expression+5A3↓j
.text:0000000000012CE1                 cmp     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:0000000000012CE6                 mov     rdx, rbp
.text:0000000000012CE9                 mov     r8, r15
.text:0000000000012CEC                 setz    al
.text:0000000000012CEF                 xor     ecx, ecx
.text:0000000000012CF1                 add     eax, 0Ah
.text:0000000000012CF4                 mov     [rsp+158h+var_90], al
.text:0000000000012CFB                 mov     rax, [rsp+158h+var_148]
.text:0000000000012D00                 lea     r12, [rax+70h]
.text:0000000000012D04                 lea     r13, [rax+80h]
.text:0000000000012D0B                 mov     rdi, r12
.text:0000000000012D0E                 mov     rsi, r13
.text:0000000000012D11                 call    create_token_tree_isra_16
.text:0000000000012D16                 test    rax, rax
.text:0000000000012D19                 mov     rdx, rax
.text:0000000000012D1C                 jz      loc_12F10
.text:0000000000012D22                 add     rbx, 2
.text:0000000000012D26                 cmp     rbx, [rsp+158h+var_158]
.text:0000000000012D2A                 jg      short loc_12DAB
.text:0000000000012D2C                 mov     [rsp+158h+var_110], r14
.text:0000000000012D31                 mov     r14, rax
.text:0000000000012D34
.text:0000000000012D34 loc_12D34:                              ; CODE XREF: parse_expression+311↓j
.text:0000000000012D34                 mov     rsi, [rsp+158h+var_148]
.text:0000000000012D39                 mov     rdi, rbp
.text:0000000000012D3C                 call    duplicate_tree
.text:0000000000012D41                 mov     r8, r15
.text:0000000000012D44                 mov     rbp, rax
.text:0000000000012D47                 mov     rcx, rax
.text:0000000000012D4A                 mov     rdx, r14
.text:0000000000012D4D                 mov     rsi, r13
.text:0000000000012D50                 mov     rdi, r12
.text:0000000000012D53                 mov     [rsp+158h+var_90], 10h
.text:0000000000012D5B                 call    create_token_tree_isra_16
.text:0000000000012D60                 test    rbp, rbp
.text:0000000000012D63                 jz      loc_12F10
.text:0000000000012D69                 test    rax, rax
.text:0000000000012D6C                 jz      loc_12F10
.text:0000000000012D72                 xor     ecx, ecx
.text:0000000000012D74                 mov     r8, r15
.text:0000000000012D77                 mov     rdx, rax
.text:0000000000012D7A                 mov     rsi, r13
.text:0000000000012D7D                 mov     rdi, r12
.text:0000000000012D80                 mov     [rsp+158h+var_90], 0Ah
.text:0000000000012D88                 call    create_token_tree_isra_16
.text:0000000000012D8D                 test    rax, rax
.text:0000000000012D90                 mov     r14, rax
.text:0000000000012D93                 jz      loc_12F10
.text:0000000000012D99                 add     rbx, 1
.text:0000000000012D9D                 cmp     rbx, [rsp+158h+var_158]
.text:0000000000012DA1                 jle     short loc_12D34
.text:0000000000012DA3                 mov     r14, [rsp+158h+var_110]
.text:0000000000012DA8                 mov     rdx, rax
.text:0000000000012DAB
.text:0000000000012DAB loc_12DAB:                              ; CODE XREF: parse_expression+29A↑j
.text:0000000000012DAB                 mov     rax, qword ptr [rsp+158h+var_128]
.text:0000000000012DB0                 test    rax, rax
.text:0000000000012DB3                 jz      loc_13060
.text:0000000000012DB9                 mov     rcx, rdx
.text:0000000000012DBC                 mov     r8, r15
.text:0000000000012DBF                 mov     rdx, rax
.text:0000000000012DC2                 mov     rsi, r13
.text:0000000000012DC5                 mov     rdi, r12
.text:0000000000012DC8                 mov     [rsp+158h+var_90], 10h
.text:0000000000012DD0                 call    create_token_tree_isra_16
.text:0000000000012DD5
.text:0000000000012DD5 loc_12DD5:                              ; CODE XREF: parse_expression+581↓j
.text:0000000000012DD5                 mov     rdi, [rsp+158h+var_118]
.text:0000000000012DDA                 mov     edx, [rdi]
.text:0000000000012DDC                 test    edx, edx
.text:0000000000012DDE                 jz      short loc_12DE9
.text:0000000000012DE0                 test    rax, rax
.text:0000000000012DE3                 jz      loc_1313B
.text:0000000000012DE9
.text:0000000000012DE9 loc_12DE9:                              ; CODE XREF: parse_expression+34E↑j
.text:0000000000012DE9                 mov     [rsp+158h+var_130], rax
.text:0000000000012DEE
.text:0000000000012DEE loc_12DEE:                              ; CODE XREF: parse_expression+510↓j
.text:0000000000012DEE                                         ; parse_expression+5D5↓j
.text:0000000000012DEE                 test    [rsp+158h+var_138], 1000000h
.text:0000000000012DF7                 mov     rax, [rsp+158h+var_140]
.text:0000000000012DFC                 movzx   eax, byte ptr [rax+8]
.text:0000000000012E00                 jz      loc_12C58
.text:0000000000012E06                 cmp     al, 0Bh
.text:0000000000012E08                 jz      short loc_12E12
.text:0000000000012E0A                 cmp     al, 17h
.text:0000000000012E0C                 jnz     loc_12C58
.text:0000000000012E12
.text:0000000000012E12 loc_12E12:                              ; CODE XREF: parse_expression+378↑j
.text:0000000000012E12                 mov     rax, [rsp+158h+var_130]
.text:0000000000012E17                 test    rax, rax
.text:0000000000012E1A                 jz      short loc_12E2D
.text:0000000000012E1C                 lea     rsi, free_tree
.text:0000000000012E23                 xor     edx, edx
.text:0000000000012E25                 mov     rdi, rax
.text:0000000000012E28                 call    postorder
.text:0000000000012E2D
.text:0000000000012E2D loc_12E2D:                              ; CODE XREF: parse_expression+147↑j
.text:0000000000012E2D                                         ; parse_expression+154↑j ...
.text:0000000000012E2D                 mov     rax, [rsp+158h+var_118]
.text:0000000000012E32                 mov     [rsp+158h+var_130], 0
.text:0000000000012E3B                 mov     dword ptr [rax], 0Dh
.text:0000000000012E41                 jmp     loc_12BA0
.text:0000000000012E41 ; ---------------------------------------------------------------------------
.text:0000000000012E46                 align 10h
.text:0000000000012E50
.text:0000000000012E50 loc_12E50:                              ; CODE XREF: parse_expression+241↑j
.text:0000000000012E50                 cmp     rbx, 1
.text:0000000000012E54                 jz      loc_1368C
.text:0000000000012E5A                 mov     rax, [rsp+158h+var_148]
.text:0000000000012E5F                 mov     r13, rbp
.text:0000000000012E62                 mov     [rsp+158h+var_110], r14
.text:0000000000012E67                 lea     r12, [rax+80h]
.text:0000000000012E6E                 lea     rdi, [rax+70h]
.text:0000000000012E72                 mov     rax, rbp
.text:0000000000012E75                 mov     r14, rax
.text:0000000000012E78                 mov     ebp, 2
.text:0000000000012E7D                 mov     rsi, r12
.text:0000000000012E80                 mov     qword ptr [rsp+158h+var_128], rdi
.text:0000000000012E85                 mov     r12, r13
.text:0000000000012E88                 mov     r13, rbx
.text:0000000000012E8B                 mov     rbx, rsi
.text:0000000000012E8E                 xchg    ax, ax
.text:0000000000012E90
.text:0000000000012E90 loc_12E90:                              ; CODE XREF: parse_expression+442↓j
.text:0000000000012E90                 mov     rsi, [rsp+158h+var_148]
.text:0000000000012E95                 mov     rdi, r12
.text:0000000000012E98                 call    duplicate_tree
.text:0000000000012E9D                 mov     rdi, qword ptr [rsp+158h+var_128]
.text:0000000000012EA2                 mov     r12, rax
.text:0000000000012EA5                 mov     rdx, r14
.text:0000000000012EA8                 mov     r8, r15
.text:0000000000012EAB                 mov     rcx, rax
.text:0000000000012EAE                 mov     rsi, rbx
.text:0000000000012EB1                 mov     [rsp+158h+var_90], 10h
.text:0000000000012EB9                 call    create_token_tree_isra_16
.text:0000000000012EBE                 test    r12, r12
.text:0000000000012EC1                 mov     r14, rax
.text:0000000000012EC4                 jz      short loc_12F10
.text:0000000000012EC6                 test    rax, rax
.text:0000000000012EC9                 jz      short loc_12F10
.text:0000000000012ECB                 add     rbp, 1
.text:0000000000012ECF                 cmp     rbp, r13
.text:0000000000012ED2                 jle     short loc_12E90
.text:0000000000012ED4                 mov     r14, [rsp+158h+var_110]
.text:0000000000012ED9                 mov     rbx, r13
.text:0000000000012EDC                 mov     qword ptr [rsp+158h+var_128], rax
.text:0000000000012EE1                 mov     r13, r12
.text:0000000000012EE4
.text:0000000000012EE4 loc_12EE4:                              ; CODE XREF: parse_expression+C06↓j
.text:0000000000012EE4                 cmp     [rsp+158h+var_158], rbx
.text:0000000000012EE8                 jz      loc_13054
.text:0000000000012EEE                 mov     rsi, [rsp+158h+var_148]
.text:0000000000012EF3                 mov     rdi, r13
.text:0000000000012EF6                 call    duplicate_tree
.text:0000000000012EFB                 test    rax, rax
.text:0000000000012EFE                 mov     rbp, rax
.text:0000000000012F01                 jnz     loc_12CD7
.text:0000000000012F07                 nop     word ptr [rax+rax+00000000h]
.text:0000000000012F10
.text:0000000000012F10 loc_12F10:                              ; CODE XREF: parse_expression+28C↑j
.text:0000000000012F10                                         ; parse_expression+2D3↑j ...
.text:0000000000012F10                 mov     rax, [rsp+158h+var_118]
.text:0000000000012F15                 mov     dword ptr [rax], 0Ch
.text:0000000000012F1B
.text:0000000000012F1B loc_12F1B:                              ; CODE XREF: parse_expression+505↓j
.text:0000000000012F1B                                         ; parse_expression+6B1↓j
.text:0000000000012F1B                 mov     rdi, [rsp+158h+var_130]
.text:0000000000012F20                 lea     rsi, free_tree
.text:0000000000012F27                 xor     edx, edx
.text:0000000000012F29                 call    postorder
.text:0000000000012F2E                 mov     [rsp+158h+var_130], 0
.text:0000000000012F37                 jmp     loc_12BA0
.text:0000000000012F37 ; ---------------------------------------------------------------------------
.text:0000000000012F3C                 align 20h
.text:0000000000012F40
.text:0000000000012F40 loc_12F40:                              ; CODE XREF: parse_expression+1FE↑j
.text:0000000000012F40                 mov     [rsp+158h+var_158], 1
.text:0000000000012F48
.text:0000000000012F48 loc_12F48:                              ; CODE XREF: parse_expression+65A↓j
.text:0000000000012F48                 mov     rdx, [rsp+158h+var_138]
.text:0000000000012F4D                 mov     rdi, [rsp+158h+var_140]
.text:0000000000012F52                 mov     rsi, r14
.text:0000000000012F55                 call    peek_token
.text:0000000000012F5A                 cdqe
.text:0000000000012F5C                 add     [r14+48h], rax
.text:0000000000012F60                 cmp     [rsp+158h+var_130], 0
.text:0000000000012F66                 jz      loc_13040
.text:0000000000012F6C                 mov     rax, [rsp+158h+var_158]
.text:0000000000012F70                 or      rax, rbx
.text:0000000000012F73                 jnz     loc_12CC0
.text:0000000000012F79                 mov     rdi, [rsp+158h+var_130]
.text:0000000000012F7E                 lea     rsi, free_tree
.text:0000000000012F85                 xor     edx, edx
.text:0000000000012F87                 call    postorder
.text:0000000000012F8C                 mov     rax, [rsp+158h+var_118]
.text:0000000000012F91                 mov     esi, [rax]
.text:0000000000012F93                 test    esi, esi
.text:0000000000012F95                 jnz     short loc_12F1B
.text:0000000000012F97
.text:0000000000012F97 loc_12F97:                              ; CODE XREF: parse_expression+5B9↓j
.text:0000000000012F97                 mov     [rsp+158h+var_130], 0
.text:0000000000012FA0                 jmp     loc_12DEE
.text:0000000000012FA0 ; ---------------------------------------------------------------------------
.text:0000000000012FA5                 align 8
.text:0000000000012FA8
.text:0000000000012FA8 loc_12FA8:                              ; CODE XREF: parse_expression+1F3↑j
.text:0000000000012FA8                 mov     rdx, [rsp+158h+var_138]
.text:0000000000012FAD                 mov     rsi, rcx
.text:0000000000012FB0                 mov     rdi, r14
.text:0000000000012FB3                 movaps  xmmword ptr [rsp+158h+var_158], xmm0
.text:0000000000012FB7                 call    fetch_number
.text:0000000000012FBC                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000012FC0                 mov     rbx, rax
.text:0000000000012FC3                 movdqa  xmm0, xmmword ptr [rsp+158h+var_158]
.text:0000000000012FC8                 jz      loc_13070
.text:0000000000012FCE                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000012FD2                 jz      short loc_12FED
.text:0000000000012FD4                 mov     rax, [rsp+158h+var_140]
.text:0000000000012FD9                 movzx   eax, byte ptr [rax+8]
.text:0000000000012FDD                 cmp     al, 18h
.text:0000000000012FDF                 jz      loc_13100
.text:0000000000012FE5                 cmp     al, 1
.text:0000000000012FE7                 jz      loc_13113
.text:0000000000012FED
.text:0000000000012FED loc_12FED:                              ; CODE XREF: parse_expression+542↑j
.text:0000000000012FED                                         ; parse_expression+624↓j
.text:0000000000012FED                 test    [rsp+158h+var_138], 200000h
.text:0000000000012FF6                 jz      loc_13F33
.text:0000000000012FFC
.text:0000000000012FFC loc_12FFC:                              ; CODE XREF: parse_expression+69A↓j
.text:0000000000012FFC                 mov     rax, [rsp+158h+var_140]
.text:0000000000013001                 mov     [r14+48h], rbp
.text:0000000000013005                 movaps  xmmword ptr [rax], xmm0
.text:0000000000013008                 mov     byte ptr [rax+8], 1
.text:000000000001300C                 mov     rax, [rsp+158h+var_130]
.text:0000000000013011                 jmp     loc_12DD5
.text:0000000000013011 ; ---------------------------------------------------------------------------
.text:0000000000013016                 align 20h
.text:0000000000013020
.text:0000000000013020 loc_13020:                              ; CODE XREF: parse_expression+24B↑j
.text:0000000000013020                 mov     rdx, [rbp+28h]
.text:0000000000013024                 lea     rsi, mark_opt_subexp
.text:000000000001302B                 mov     rdi, rbp
.text:000000000001302E                 call    postorder
.text:0000000000013033                 jmp     loc_12CE1
.text:0000000000013033 ; ---------------------------------------------------------------------------
.text:0000000000013038                 align 20h
.text:0000000000013040
.text:0000000000013040 loc_13040:                              ; CODE XREF: parse_expression+222↑j
.text:0000000000013040                                         ; parse_expression+4D6↑j
.text:0000000000013040                 mov     rax, [rsp+158h+var_118]
.text:0000000000013045                 mov     ecx, [rax]
.text:0000000000013047                 test    ecx, ecx
.text:0000000000013049                 jz      loc_12F97
.text:000000000001304F                 jmp     def_12AEF       ; jumptable 0000000000012AEF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000013054 ; ---------------------------------------------------------------------------
.text:0000000000013054
.text:0000000000013054 loc_13054:                              ; CODE XREF: parse_expression+458↑j
.text:0000000000013054                 mov     rdx, qword ptr [rsp+158h+var_128]
.text:0000000000013059                 nop     dword ptr [rax+00000000h]
.text:0000000000013060
.text:0000000000013060 loc_13060:                              ; CODE XREF: parse_expression+323↑j
.text:0000000000013060                 mov     [rsp+158h+var_130], rdx
.text:0000000000013065                 jmp     loc_12DEE
.text:0000000000013065 ; ---------------------------------------------------------------------------
.text:000000000001306A                 align 10h
.text:0000000000013070
.text:0000000000013070 loc_13070:                              ; CODE XREF: parse_expression+538↑j
.text:0000000000013070                 mov     rax, [rsp+158h+var_140]
.text:0000000000013075                 cmp     byte ptr [rax+8], 1
.text:0000000000013079                 jnz     loc_13130
.text:000000000001307F                 mov     rax, [rsp+158h+var_140]
.text:0000000000013084                 cmp     byte ptr [rax], 2Ch ; ','
.text:0000000000013087                 jnz     loc_13130
.text:000000000001308D                 xor     ebx, ebx
.text:000000000001308F
.text:000000000001308F loc_1308F:                              ; CODE XREF: parse_expression+68B↓j
.text:000000000001308F                 mov     rdx, [rsp+158h+var_138]
.text:0000000000013094                 mov     rsi, [rsp+158h+var_140]
.text:0000000000013099                 mov     rdi, r14
.text:000000000001309C                 movaps  [rsp+158h+var_128], xmm0
.text:00000000000130A1                 call    fetch_number
.text:00000000000130A6                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000130AA                 mov     [rsp+158h+var_158], rax
.text:00000000000130AE                 movdqa  xmm0, [rsp+158h+var_128]
.text:00000000000130B4                 jz      loc_12FED
.text:00000000000130BA                 mov     rax, [rsp+158h+var_158]
.text:00000000000130BE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000130C2                 jz      short loc_130C9
.text:00000000000130C4                 cmp     rax, rbx
.text:00000000000130C7                 jl      short loc_13130
.text:00000000000130C9
.text:00000000000130C9 loc_130C9:                              ; CODE XREF: parse_expression+632↑j
.text:00000000000130C9                 mov     rax, [rsp+158h+var_140]
.text:00000000000130CE                 cmp     byte ptr [rax+8], 18h
.text:00000000000130D2                 jnz     short loc_13130
.text:00000000000130D4                 cmp     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:00000000000130D9                 jnz     short loc_13104
.text:00000000000130DB                 xor     eax, eax
.text:00000000000130DD                 cmp     rbx, 7FFFh
.text:00000000000130E4                 setnle  al
.text:00000000000130E7
.text:00000000000130E7 loc_130E7:                              ; CODE XREF: parse_expression+681↓j
.text:00000000000130E7                 test    rax, rax
.text:00000000000130EA                 jz      loc_12F48
.text:00000000000130F0                 mov     rax, [rsp+158h+var_118]
.text:00000000000130F5                 mov     dword ptr [rax], 0Fh
.text:00000000000130FB                 jmp     short loc_1313B
.text:00000000000130FB ; ---------------------------------------------------------------------------
.text:00000000000130FD                 align 20h
.text:0000000000013100
.text:0000000000013100 loc_13100:                              ; CODE XREF: parse_expression+54F↑j
.text:0000000000013100                 mov     [rsp+158h+var_158], rbx
.text:0000000000013104
.text:0000000000013104 loc_13104:                              ; CODE XREF: parse_expression+649↑j
.text:0000000000013104                 xor     eax, eax
.text:0000000000013106                 cmp     [rsp+158h+var_158], 7FFFh
.text:000000000001310E                 setnle  al
.text:0000000000013111                 jmp     short loc_130E7
.text:0000000000013113 ; ---------------------------------------------------------------------------
.text:0000000000013113
.text:0000000000013113 loc_13113:                              ; CODE XREF: parse_expression+557↑j
.text:0000000000013113                 mov     rax, [rsp+158h+var_140]
.text:0000000000013118                 cmp     byte ptr [rax], 2Ch ; ','
.text:000000000001311B                 jz      loc_1308F
.text:0000000000013121                 test    [rsp+158h+var_138], 200000h
.text:000000000001312A                 jnz     loc_12FFC
.text:0000000000013130
.text:0000000000013130 loc_13130:                              ; CODE XREF: parse_expression+5E9↑j
.text:0000000000013130                                         ; parse_expression+5F7↑j ...
.text:0000000000013130                 mov     rax, [rsp+158h+var_118]
.text:0000000000013135                 mov     dword ptr [rax], 0Ah
.text:000000000001313B
.text:000000000001313B loc_1313B:                              ; CODE XREF: parse_expression+353↑j
.text:000000000001313B                                         ; parse_expression+66B↑j ...
.text:000000000001313B                 cmp     [rsp+158h+var_130], 0
.text:0000000000013141                 jnz     loc_12F1B
.text:0000000000013147                 jmp     def_12AEF       ; jumptable 0000000000012AEF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000013147 ; ---------------------------------------------------------------------------
.text:000000000001314C                 align 10h
.text:0000000000013150
.text:0000000000013150 loc_13150:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000013150                                         ; DATA XREF: .rodata:jpt_12AEF↓o
.text:0000000000013150                 mov     rax, [rsp+158h+var_140] ; jumptable 0000000000012AEF case 12
.text:0000000000013155                 mov     ebp, [rax]
.text:0000000000013157                 test    ebp, 30Fh
.text:000000000001315D                 jz      short loc_131C1
.text:000000000001315F                 mov     rax, [rsp+158h+var_148]
.text:0000000000013164                 movzx   eax, byte ptr [rax+0B0h]
.text:000000000001316B                 test    al, 10h
.text:000000000001316D                 jnz     short loc_131C1
.text:000000000001316F                 mov     rdi, [rsp+158h+var_148]
.text:0000000000013174                 or      eax, 10h
.text:0000000000013177                 test    al, 8
.text:0000000000013179                 mov     [rdi+0B0h], al
.text:000000000001317F                 jnz     loc_13D83
.text:0000000000013185                 mov     rdx, 3FF000000000000h
.text:000000000001318F                 test    al, 4
.text:0000000000013191                 mov     [rdi+0B8h], rdx
.text:0000000000013198                 mov     rdx, 7FFFFFE87FFFFFEh
.text:00000000000131A2                 mov     [rdi+0C0h], rdx
.text:00000000000131A9                 jz      loc_13D08
.text:00000000000131AF                 pxor    xmm0, xmm0
.text:00000000000131B3                 mov     rax, [rsp+158h+var_140]
.text:00000000000131B8                 movups  xmmword ptr [rdi+0C8h], xmm0
.text:00000000000131BF                 mov     ebp, [rax]
.text:00000000000131C1
.text:00000000000131C1 loc_131C1:                              ; CODE XREF: parse_expression+6CD↑j
.text:00000000000131C1                                         ; parse_expression+6DD↑j ...
.text:00000000000131C1                 mov     rax, [rsp+158h+var_148]
.text:00000000000131C6                 lea     rbx, [rax+70h]
.text:00000000000131CA                 lea     r12, [rax+80h]
.text:00000000000131D1                 lea     eax, [rbp-100h]
.text:00000000000131D7                 test    eax, 0FFFFFEFFh
.text:00000000000131DC                 jnz     loc_1384A
.text:00000000000131E2                 cmp     ebp, 100h
.text:00000000000131E8                 mov     r15, [rsp+158h+var_140]
.text:00000000000131ED                 jz      loc_13822
.text:00000000000131F3                 mov     dword ptr [r15], 5
.text:00000000000131FA                 mov     r8, r15
.text:00000000000131FD                 xor     ecx, ecx
.text:00000000000131FF                 xor     edx, edx
.text:0000000000013201                 mov     rsi, r12
.text:0000000000013204                 mov     rdi, rbx
.text:0000000000013207                 call    create_token_tree_isra_16
.text:000000000001320C                 mov     dword ptr [r15], 0Ah
.text:0000000000013213                 mov     rbp, rax
.text:0000000000013216
.text:0000000000013216 loc_13216:                              ; CODE XREF: parse_expression+DB5↓j
.text:0000000000013216                 mov     r8, [rsp+158h+var_140]
.text:000000000001321B                 xor     ecx, ecx
.text:000000000001321D                 xor     edx, edx
.text:000000000001321F                 mov     rsi, r12
.text:0000000000013222                 mov     rdi, rbx
.text:0000000000013225                 call    create_token_tree_isra_16
.text:000000000001322A                 lea     r8, [rsp+158h+var_98]
.text:0000000000013232                 mov     rdx, rbp
.text:0000000000013235                 mov     rdi, rbx
.text:0000000000013238                 mov     rcx, rax
.text:000000000001323B                 mov     rsi, r12
.text:000000000001323E                 mov     r13, rax
.text:0000000000013241                 mov     [rsp+158h+var_90], 0Ah
.text:0000000000013249                 call    create_token_tree_isra_16
.text:000000000001324E                 test    rbp, rbp
.text:0000000000013251                 mov     rdi, rax
.text:0000000000013254                 mov     [rsp+158h+var_130], rax
.text:0000000000013259                 setz    dl
.text:000000000001325C                 test    r13, r13
.text:000000000001325F                 setz    al
.text:0000000000013262                 or      dl, al
.text:0000000000013264                 jnz     loc_135F8
.text:000000000001326A                 test    rdi, rdi
.text:000000000001326D                 jz      loc_135F8
.text:0000000000013273
.text:0000000000013273 loc_13273:                              ; CODE XREF: parse_expression+DD6↓j
.text:0000000000013273                 mov     rdx, [rsp+158h+var_138]
.text:0000000000013278                 mov     rdi, [rsp+158h+var_140]
.text:000000000001327D                 mov     rsi, r14
.text:0000000000013280                 call    peek_token
.text:0000000000013285                 cdqe
.text:0000000000013287                 add     [r14+48h], rax
.text:000000000001328B                 jmp     loc_12BA0
.text:0000000000013290 ; ---------------------------------------------------------------------------
.text:0000000000013290
.text:0000000000013290 loc_13290:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000013290                                         ; DATA XREF: .rodata:jpt_12AEF↓o
.text:0000000000013290                 mov     esi, 1          ; jumptable 0000000000012AEF case 20
.text:0000000000013295                 mov     edi, 20h ; ' '  ; nmemb
.text:000000000001329A                 mov     [rsp+158h+var_C0], 0
.text:00000000000132A6                 call    _calloc
.text:00000000000132AB                 mov     esi, 1          ; size
.text:00000000000132B0                 mov     r12, rax
.text:00000000000132B3                 mov     edi, 50h ; 'P'  ; nmemb
.text:00000000000132B8                 call    _calloc
.text:00000000000132BD                 test    r12, r12
.text:00000000000132C0                 mov     r13, rax
.text:00000000000132C3                 setz    dl
.text:00000000000132C6                 test    rax, rax
.text:00000000000132C9                 setz    al
.text:00000000000132CC                 or      dl, al
.text:00000000000132CE                 jnz     loc_13AA9
.text:00000000000132D4                 mov     r10, [rsp+158h+var_140]
.text:00000000000132D9                 mov     rdx, [rsp+158h+var_138]
.text:00000000000132DE                 mov     rsi, r14
.text:00000000000132E1                 mov     rdi, r10
.text:00000000000132E4                 call    peek_token_bracket
.text:00000000000132E9                 movsxd  rbx, eax
.text:00000000000132EC                 movzx   eax, byte ptr [r10+8]
.text:00000000000132F1                 cmp     al, 2
.text:00000000000132F3                 jz      loc_13A99
.text:00000000000132F9                 cmp     al, 19h
.text:00000000000132FB                 mov     [rsp+158h+var_101], 0
.text:0000000000013300                 jz      loc_137CA
.text:0000000000013306
.text:0000000000013306 loc_13306:                              ; CODE XREF: parse_expression+D7F↓j
.text:0000000000013306                 cmp     al, 15h
.text:0000000000013308                 jz      loc_13814
.text:000000000001330E
.text:000000000001330E loc_1330E:                              ; CODE XREF: parse_expression+D8D↓j
.text:000000000001330E                 lea     rax, [rsp+158h+var_88]
.text:0000000000013316                 mov     r15, [rsp+158h+var_140]
.text:000000000001331B                 lea     rbp, jpt_133F6
.text:0000000000013322                 mov     [rsp+158h+var_110], 0
.text:000000000001332B                 mov     r9d, 1
.text:0000000000013331                 mov     qword ptr [rsp+158h+var_128], 0
.text:000000000001333A                 mov     [rsp+158h+var_130], rax
.text:000000000001333F                 lea     rax, [rsp+158h+var_B8]
.text:0000000000013347                 mov     [rsp+158h+var_158], rax
.text:000000000001334B                 lea     rax, [rsp+158h+var_C0]
.text:0000000000013353                 mov     [rsp+158h+var_100], rax
.text:0000000000013358                 lea     rax, [rsp+158h+var_98]
.text:0000000000013360                 mov     [rsp+158h+var_F8], rax
.text:0000000000013365                 lea     rax, [rsp+158h+var_68]
.text:000000000001336D                 mov     [rsp+158h+var_F0], rax
.text:0000000000013372
.text:0000000000013372 loc_13372:                              ; CODE XREF: parse_expression+C58↓j
.text:0000000000013372                 mov     rax, [rsp+158h+var_130]
.text:0000000000013377                 mov     r8, [rsp+158h+var_138]
.text:000000000001337C                 and     r9d, 1
.text:0000000000013380                 mov     rdi, [rsp+158h+var_158]
.text:0000000000013384                 mov     ecx, ebx
.text:0000000000013386                 mov     rdx, r15
.text:0000000000013389                 mov     rsi, r14
.text:000000000001338C                 mov     [rsp+158h+var_B8], 3
.text:0000000000013397                 mov     [rsp+158h+var_B0], rax
.text:000000000001339F                 call    parse_bracket_element_constprop_37
.text:00000000000133A4                 test    eax, eax
.text:00000000000133A6                 jnz     loc_1388B
.text:00000000000133AC                 mov     rdx, [rsp+158h+var_138]
.text:00000000000133B1                 mov     rsi, r14
.text:00000000000133B4                 mov     rdi, r15
.text:00000000000133B7                 call    peek_token_bracket
.text:00000000000133BC                 movsxd  rbx, eax
.text:00000000000133BF                 mov     eax, [rsp+158h+var_B8]
.text:00000000000133C6                 lea     edx, [rax-2]
.text:00000000000133C9                 and     edx, 0FFFFFFFDh
.text:00000000000133CC                 jz      short loc_133E5
.text:00000000000133CE                 movzx   edx, byte ptr [r15+8]
.text:00000000000133D3                 cmp     dl, 2
.text:00000000000133D6                 jz      loc_13871
.text:00000000000133DC                 cmp     dl, 16h
.text:00000000000133DF                 jz      loc_13897
.text:00000000000133E5
.text:00000000000133E5 loc_133E5:                              ; CODE XREF: parse_expression+93C↑j
.text:00000000000133E5                                         ; parse_expression+105D↓j
.text:00000000000133E5                 cmp     eax, 4          ; switch 5 cases
.text:00000000000133E8                 ja      def_133F6       ; jumptable 00000000000133F6 default case
.text:00000000000133EE                 movsxd  rax, ss:(jpt_133F6 - 17B34h)[rbp+rax*4]
.text:00000000000133F3                 add     rax, rbp
.text:00000000000133F6                 jmp     rax             ; switch jump
.text:00000000000133F8 ; ---------------------------------------------------------------------------
.text:00000000000133F8
.text:00000000000133F8 loc_133F8:                              ; CODE XREF: parse_expression+5F↑j
.text:00000000000133F8                                         ; DATA XREF: .rodata:jpt_12AEF↓o
.text:00000000000133F8                 mov     rbx, [rsp+158h+var_118] ; jumptable 0000000000012AEF cases 34,35
.text:00000000000133FD                 cmp     cl, 23h ; '#'
.text:0000000000013400                 mov     rsi, [rdi+78h]
.text:0000000000013404                 setz    r8b
.text:0000000000013408                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:000000000001340F                 lea     rdx, aSpace     ; "space"
.text:0000000000013416                 movzx   r8d, r8b
.text:000000000001341A                 mov     r9, rbx
.text:000000000001341D
.text:000000000001341D loc_1341D:                              ; CODE XREF: parse_expression+9DD↓j
.text:000000000001341D                 mov     rdi, [rsp+158h+var_148]
.text:0000000000013422                 call    build_charclass_op
.text:0000000000013427                 mov     edi, [rbx]
.text:0000000000013429                 mov     [rsp+158h+var_130], rax
.text:000000000001342E                 test    edi, edi
.text:0000000000013430                 jz      loc_12C2C
.text:0000000000013436                 test    rax, rax
.text:0000000000013439                 jnz     loc_12C2C
.text:000000000001343F                 jmp     def_12AEF       ; jumptable 0000000000012AEF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:000000000001343F ; ---------------------------------------------------------------------------
.text:0000000000013444                 align 8
.text:0000000000013448
.text:0000000000013448 loc_13448:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000013448                                         ; DATA XREF: .rodata:jpt_12AEF↓o
.text:0000000000013448                 mov     rbx, [rsp+158h+var_118] ; jumptable 0000000000012AEF cases 32,33
.text:000000000001344D                 cmp     cl, 21h ; '!'
.text:0000000000013450                 mov     rsi, [rdi+78h]
.text:0000000000013454                 setz    r8b
.text:0000000000013458                 lea     rcx, s2+2       ; "_"
.text:000000000001345F                 lea     rdx, aAlnum     ; "alnum"
.text:0000000000013466                 movzx   r8d, r8b
.text:000000000001346A                 mov     r9, rbx
.text:000000000001346D                 jmp     short loc_1341D
.text:000000000001346F ; ---------------------------------------------------------------------------
.text:000000000001346F
.text:000000000001346F loc_1346F:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001346F                                         ; DATA XREF: .rodata:jpt_12AEF↓o
.text:000000000001346F                 mov     rax, [rsp+158h+var_140] ; jumptable 0000000000012AEF case 4
.text:0000000000013474                 mov     rdi, [rsp+158h+var_148]
.text:0000000000013479                 mov     rcx, [rax]
.text:000000000001347C                 mov     eax, 1
.text:0000000000013481                 shl     eax, cl
.text:0000000000013483                 cdqe
.text:0000000000013485                 test    [rdi+0A8h], rax
.text:000000000001348C                 jz      loc_13ABE
.text:0000000000013492                 mov     rbx, [rsp+158h+var_148]
.text:0000000000013497                 mov     r8, [rsp+158h+var_140]
.text:000000000001349C                 xor     ecx, ecx
.text:000000000001349E                 xor     edx, edx
.text:00000000000134A0                 or      [rbx+0A0h], rax
.text:00000000000134A7                 lea     rsi, [rbx+80h]
.text:00000000000134AE                 lea     rdi, [rbx+70h]
.text:00000000000134B2                 call    create_token_tree_isra_16
.text:00000000000134B7                 test    rax, rax
.text:00000000000134BA                 mov     [rsp+158h+var_130], rax
.text:00000000000134BF                 jz      loc_135F8
.text:00000000000134C5                 add     qword ptr [rbx+98h], 1
.text:00000000000134CD                 or      byte ptr [rbx+0B0h], 2
.text:00000000000134D4                 jmp     loc_12C2C
.text:00000000000134D9 ; ---------------------------------------------------------------------------
.text:00000000000134D9
.text:00000000000134D9 loc_134D9:                              ; CODE XREF: parse_expression+5F↑j
.text:00000000000134D9                                         ; DATA XREF: .rodata:jpt_12AEF↓o
.text:00000000000134D9                 mov     rbx, [rsp+158h+var_148] ; jumptable 0000000000012AEF case 5
.text:00000000000134DE                 mov     r8, [rsp+158h+var_140]
.text:00000000000134E3                 xor     ecx, ecx
.text:00000000000134E5                 xor     edx, edx
.text:00000000000134E7                 lea     rsi, [rbx+80h]
.text:00000000000134EE                 lea     rdi, [rbx+70h]
.text:00000000000134F2                 call    create_token_tree_isra_16
.text:00000000000134F7                 test    rax, rax
.text:00000000000134FA                 mov     [rsp+158h+var_130], rax
.text:00000000000134FF                 jz      loc_135F8
.text:0000000000013505                 cmp     dword ptr [rbx+0B4h], 1
.text:000000000001350C                 jle     loc_12C2C
.text:0000000000013512                 or      byte ptr [rbx+0B0h], 2
.text:0000000000013519                 jmp     loc_12C2C
.text:000000000001351E ; ---------------------------------------------------------------------------
.text:000000000001351E
.text:000000000001351E loc_1351E:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001351E                                         ; DATA XREF: .rodata:jpt_12AEF↓o
.text:000000000001351E                 mov     rax, [rsp+158h+var_148] ; jumptable 0000000000012AEF case 1
.text:0000000000013523                 mov     r8, [rsp+158h+var_140]
.text:0000000000013528                 xor     ecx, ecx
.text:000000000001352A                 xor     edx, edx
.text:000000000001352C                 lea     rbx, [rax+70h]
.text:0000000000013530                 lea     rbp, [rax+80h]
.text:0000000000013537                 mov     rdi, rbx
.text:000000000001353A                 mov     rsi, rbp
.text:000000000001353D                 call    create_token_tree_isra_16
.text:0000000000013542                 test    rax, rax
.text:0000000000013545                 mov     [rsp+158h+var_130], rax
.text:000000000001354A                 jz      loc_135F8
.text:0000000000013550                 mov     rax, [rsp+158h+var_148]
.text:0000000000013555                 lea     r12, [rsp+158h+var_98]
.text:000000000001355D                 mov     r15, [rsp+158h+var_130]
.text:0000000000013562                 cmp     dword ptr [rax+0B4h], 1
.text:0000000000013569                 jle     loc_12C2C
.text:000000000001356F
.text:000000000001356F loc_1356F:                              ; CODE XREF: parse_expression+B62↓j
.text:000000000001356F                 mov     rax, [r14+48h]
.text:0000000000013573                 cmp     [r14+68h], rax
.text:0000000000013577                 jle     loc_13881
.text:000000000001357D                 cmp     rax, [r14+30h]
.text:0000000000013581                 jz      loc_13881
.text:0000000000013587                 mov     rdx, [r14+10h]
.text:000000000001358B                 cmp     dword ptr [rdx+rax*4], 0FFFFFFFFh
.text:000000000001358F                 jnz     loc_13881
.text:0000000000013595                 mov     r13, [rsp+158h+var_140]
.text:000000000001359A                 mov     rdx, [rsp+158h+var_138]
.text:000000000001359F                 mov     rsi, r14
.text:00000000000135A2                 mov     rdi, r13
.text:00000000000135A5                 call    peek_token
.text:00000000000135AA                 cdqe
.text:00000000000135AC                 add     [r14+48h], rax
.text:00000000000135B0                 mov     r8, r13
.text:00000000000135B3                 xor     ecx, ecx
.text:00000000000135B5                 xor     edx, edx
.text:00000000000135B7                 mov     rsi, rbp
.text:00000000000135BA                 mov     rdi, rbx
.text:00000000000135BD                 call    create_token_tree_isra_16
.text:00000000000135C2                 mov     rdx, r15
.text:00000000000135C5                 mov     r13, rax
.text:00000000000135C8                 mov     r8, r12
.text:00000000000135CB                 mov     rcx, rax
.text:00000000000135CE                 mov     rsi, rbp
.text:00000000000135D1                 mov     rdi, rbx
.text:00000000000135D4                 mov     [rsp+158h+var_90], 10h
.text:00000000000135DC                 call    create_token_tree_isra_16
.text:00000000000135E1                 test    r13, r13
.text:00000000000135E4                 mov     r15, rax
.text:00000000000135E7                 setz    dl
.text:00000000000135EA                 test    rax, rax
.text:00000000000135ED                 setz    al
.text:00000000000135F0                 or      dl, al
.text:00000000000135F2                 jz      loc_1356F
.text:00000000000135F8
.text:00000000000135F8 loc_135F8:                              ; CODE XREF: parse_expression+196↑j
.text:00000000000135F8                                         ; parse_expression+7D4↑j ...
.text:00000000000135F8                 mov     rax, [rsp+158h+var_118]
.text:00000000000135FD                 mov     dword ptr [rax], 0Ch
.text:0000000000013603                 jmp     def_12AEF       ; jumptable 0000000000012AEF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000013608 ; ---------------------------------------------------------------------------
.text:0000000000013608
.text:0000000000013608 loc_13608:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000013608                                         ; parse_expression+165↑j
.text:0000000000013608                                         ; DATA XREF: ...
.text:0000000000013608                 test    [rsp+158h+var_138], 20000h ; jumptable 0000000000012AEF case 9
.text:0000000000013611                 jnz     loc_12BFB       ; jumptable 0000000000012AEF case 24
.text:0000000000013617                 mov     rax, [rsp+158h+var_118]
.text:000000000001361C                 mov     [rsp+158h+var_130], 0
.text:0000000000013625                 mov     dword ptr [rax], 10h
.text:000000000001362B                 jmp     loc_12BA0
.text:0000000000013630 ; ---------------------------------------------------------------------------
.text:0000000000013630
.text:0000000000013630 loc_13630:                              ; CODE XREF: parse_expression+A0↑j
.text:0000000000013630                                         ; parse_expression+D6↑j
.text:0000000000013630                 cmp     rbx, 8
.text:0000000000013634                 jbe     short loc_1369B
.text:0000000000013636
.text:0000000000013636 loc_13636:                              ; CODE XREF: parse_expression+C23↓j
.text:0000000000013636                 mov     rdi, [rsp+158h+var_148]
.text:000000000001363B                 lea     r8, [rsp+158h+var_98]
.text:0000000000013643                 xor     ecx, ecx
.text:0000000000013645                 mov     rdx, rax
.text:0000000000013648                 mov     [rsp+158h+var_90], 11h
.text:0000000000013650                 lea     rsi, [rdi+80h]
.text:0000000000013657                 add     rdi, 70h ; 'p'
.text:000000000001365B                 call    create_token_tree_isra_16
.text:0000000000013660                 test    rax, rax
.text:0000000000013663                 mov     [rsp+158h+var_130], rax
.text:0000000000013668                 jz      short loc_135F8
.text:000000000001366A                 mov     [rax+28h], rbx
.text:000000000001366E                 jmp     loc_12C2C
.text:0000000000013673 ; ---------------------------------------------------------------------------
.text:0000000000013673
.text:0000000000013673 loc_13673:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000013673                                         ; DATA XREF: .rodata:jpt_12AEF↓o
.text:0000000000013673                 mov     rax, [rsp+158h+var_118] ; jumptable 0000000000012AEF case 36
.text:0000000000013678                 mov     [rsp+158h+var_130], 0
.text:0000000000013681                 mov     dword ptr [rax], 5
.text:0000000000013687                 jmp     loc_12BA0
.text:000000000001368C ; ---------------------------------------------------------------------------
.text:000000000001368C
.text:000000000001368C loc_1368C:                              ; CODE XREF: parse_expression+3C4↑j
.text:000000000001368C                 mov     r13, [rsp+158h+var_130]
.text:0000000000013691                 mov     qword ptr [rsp+158h+var_128], r13
.text:0000000000013696                 jmp     loc_12EE4
.text:000000000001369B ; ---------------------------------------------------------------------------
.text:000000000001369B
.text:000000000001369B loc_1369B:                              ; CODE XREF: parse_expression+BA4↑j
.text:000000000001369B                 mov     rsi, [rsp+158h+var_148]
.text:00000000000136A0                 mov     edx, 1
.text:00000000000136A5                 mov     ecx, ebx
.text:00000000000136A7                 shl     edx, cl
.text:00000000000136A9                 movsxd  rdx, edx
.text:00000000000136AC                 or      [rsi+0A8h], rdx
.text:00000000000136B3                 jmp     short loc_13636
.text:00000000000136B5 ; ---------------------------------------------------------------------------
.text:00000000000136B5
.text:00000000000136B5 loc_136B5:                              ; CODE XREF: parse_expression+966↑j
.text:00000000000136B5                                         ; DATA XREF: .rodata:jpt_133F6↓o
.text:00000000000136B5                 mov     rsi, [rsp+158h+var_B0] ; jumptable 00000000000133F6 case 3
.text:00000000000136BD                 mov     rdi, r12
.text:00000000000136C0                 call    build_equiv_class_isra_27
.text:00000000000136C5                 mov     rdx, [rsp+158h+var_118]
.text:00000000000136CA                 test    eax, eax
.text:00000000000136CC                 mov     [rdx], eax
.text:00000000000136CE                 jnz     short loc_13708
.text:00000000000136D0
.text:00000000000136D0 loc_136D0:                              ; CODE XREF: parse_expression+C76↓j
.text:00000000000136D0                                         ; parse_expression+CCC↓j ...
.text:00000000000136D0                 movzx   eax, byte ptr [r15+8]
.text:00000000000136D5                 cmp     al, 2
.text:00000000000136D7                 jz      loc_13871
.text:00000000000136DD                 cmp     al, 15h
.text:00000000000136DF                 jz      loc_13AF2
.text:00000000000136E5                 xor     r9d, r9d
.text:00000000000136E8                 jmp     loc_13372
.text:00000000000136ED ; ---------------------------------------------------------------------------
.text:00000000000136ED
.text:00000000000136ED loc_136ED:                              ; CODE XREF: parse_expression+966↑j
.text:00000000000136ED                                         ; DATA XREF: .rodata:jpt_133F6↓o
.text:00000000000136ED                 mov     rsi, [rsp+158h+var_B0] ; jumptable 00000000000133F6 case 2
.text:00000000000136F5                 mov     rdi, r12
.text:00000000000136F8                 call    build_equiv_class_isra_27
.text:00000000000136FD                 mov     rdx, [rsp+158h+var_118]
.text:0000000000013702                 test    eax, eax
.text:0000000000013704                 mov     [rdx], eax
.text:0000000000013706                 jz      short loc_136D0
.text:0000000000013708
.text:0000000000013708 loc_13708:                              ; CODE XREF: parse_expression+C3E↑j
.text:0000000000013708                                         ; parse_expression+D35↓j ...
.text:0000000000013708                 mov     rdi, r12        ; ptr
.text:000000000001370B                 call    _free
.text:0000000000013710                 mov     rdi, r13        ; ptr
.text:0000000000013713                 call    isl_union_flow_free_0
.text:0000000000013718                 mov     rax, [rsp+158h+var_118]
.text:000000000001371D                 mov     r8d, [rax]
.text:0000000000013720                 test    r8d, r8d
.text:0000000000013723                 jnz     def_12AEF       ; jumptable 0000000000012AEF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000013729                 mov     [rsp+158h+var_130], 0
.text:0000000000013732                 jmp     loc_12C2C
.text:0000000000013737 ; ---------------------------------------------------------------------------
.text:0000000000013737
.text:0000000000013737 loc_13737:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000013737                                         ; DATA XREF: .rodata:jpt_133F6↓o
.text:0000000000013737                 mov     rdx, [r13+28h]  ; jumptable 00000000000133F6 case 1
.text:000000000001373B                 cmp     rdx, qword ptr [rsp+158h+var_128]
.text:0000000000013740                 mov     rax, [r13+0]
.text:0000000000013744                 jz      loc_13C3E
.text:000000000001374A
.text:000000000001374A loc_1374A:                              ; CODE XREF: parse_expression+11DE↓j
.text:000000000001374A                 lea     rcx, [rdx+1]
.text:000000000001374E                 mov     [r13+28h], rcx
.text:0000000000013752                 mov     ecx, dword ptr [rsp+158h+var_B0]
.text:0000000000013759                 mov     [rax+rdx*4], ecx
.text:000000000001375C                 jmp     loc_136D0
.text:0000000000013761 ; ---------------------------------------------------------------------------
.text:0000000000013761
.text:0000000000013761 loc_13761:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000013761                                         ; DATA XREF: .rodata:jpt_133F6↓o
.text:0000000000013761                 movzx   edx, byte ptr [rsp+158h+var_B0] ; jumptable 00000000000133F6 case 0
.text:0000000000013769                 mov     esi, 1
.text:000000000001376E                 mov     rax, rdx
.text:0000000000013771                 and     edx, 3Fh
.text:0000000000013774                 shr     rax, 3
.text:0000000000013778                 mov     ecx, edx
.text:000000000001377A                 and     eax, 18h
.text:000000000001377D                 shl     rsi, cl
.text:0000000000013780                 or      [r12+rax], rsi
.text:0000000000013784                 jmp     loc_136D0
.text:0000000000013789 ; ---------------------------------------------------------------------------
.text:0000000000013789
.text:0000000000013789 loc_13789:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000013789                                         ; DATA XREF: .rodata:jpt_133F6↓o
.text:0000000000013789                 sub     rsp, 8          ; jumptable 00000000000133F6 case 4
.text:000000000001378D                 mov     rdi, [r14+78h]
.text:0000000000013791                 lea     rdx, [r13+18h]
.text:0000000000013795                 push    [rsp+160h+var_138]
.text:0000000000013799                 mov     r9, [rsp+168h+var_B0]
.text:00000000000137A1                 lea     rcx, [r13+48h]
.text:00000000000137A5                 mov     r8, [rsp+168h+var_100]
.text:00000000000137AA                 mov     rsi, r12
.text:00000000000137AD                 call    build_charclass_isra_29
.text:00000000000137B2                 mov     rdx, [rsp+168h+var_118]
.text:00000000000137B7                 test    eax, eax
.text:00000000000137B9                 mov     [rdx], eax
.text:00000000000137BB                 pop     r9
.text:00000000000137BD                 pop     r10
.text:00000000000137BF                 jz      loc_136D0
.text:00000000000137C5                 jmp     loc_13708
.text:00000000000137CA ; ---------------------------------------------------------------------------
.text:00000000000137CA
.text:00000000000137CA loc_137CA:                              ; CODE XREF: parse_expression+870↑j
.text:00000000000137CA                 or      byte ptr [r13+20h], 1
.text:00000000000137CF                 test    [rsp+158h+var_138], 100h
.text:00000000000137D8                 jz      short loc_137E2
.text:00000000000137DA                 or      qword ptr [r12], 400h
.text:00000000000137E2
.text:00000000000137E2 loc_137E2:                              ; CODE XREF: parse_expression+D48↑j
.text:00000000000137E2                 add     [r14+48h], rbx
.text:00000000000137E6                 mov     r11, [rsp+158h+var_140]
.text:00000000000137EB                 mov     rsi, r14
.text:00000000000137EE                 mov     rdx, [rsp+158h+var_138]
.text:00000000000137F3                 mov     rdi, r11
.text:00000000000137F6                 call    peek_token_bracket
.text:00000000000137FB                 mov     ebx, eax
.text:00000000000137FD                 movzx   eax, byte ptr [r11+8]
.text:0000000000013802                 cmp     al, 2
.text:0000000000013804                 jz      loc_13A99
.text:000000000001380A                 mov     [rsp+158h+var_101], 1
.text:000000000001380F                 jmp     loc_13306
.text:0000000000013814 ; ---------------------------------------------------------------------------
.text:0000000000013814
.text:0000000000013814 loc_13814:                              ; CODE XREF: parse_expression+878↑j
.text:0000000000013814                 mov     rax, [rsp+158h+var_140]
.text:0000000000013819                 mov     byte ptr [rax+8], 1
.text:000000000001381D                 jmp     loc_1330E
.text:0000000000013822 ; ---------------------------------------------------------------------------
.text:0000000000013822
.text:0000000000013822 loc_13822:                              ; CODE XREF: parse_expression+75D↑j
.text:0000000000013822                 mov     dword ptr [r15], 6
.text:0000000000013829                 mov     r8, r15
.text:000000000001382C                 xor     ecx, ecx
.text:000000000001382E                 xor     edx, edx
.text:0000000000013830                 mov     rsi, r12
.text:0000000000013833                 mov     rdi, rbx
.text:0000000000013836                 call    create_token_tree_isra_16
.text:000000000001383B                 mov     dword ptr [r15], 9
.text:0000000000013842                 mov     rbp, rax
.text:0000000000013845                 jmp     loc_13216
.text:000000000001384A ; ---------------------------------------------------------------------------
.text:000000000001384A
.text:000000000001384A loc_1384A:                              ; CODE XREF: parse_expression+74C↑j
.text:000000000001384A                 mov     r8, [rsp+158h+var_140]
.text:000000000001384F                 xor     ecx, ecx
.text:0000000000013851                 xor     edx, edx
.text:0000000000013853                 mov     rsi, r12
.text:0000000000013856                 mov     rdi, rbx
.text:0000000000013859                 call    create_token_tree_isra_16
.text:000000000001385E                 test    rax, rax
.text:0000000000013861                 mov     [rsp+158h+var_130], rax
.text:0000000000013866                 jnz     loc_13273
.text:000000000001386C                 jmp     loc_135F8
.text:0000000000013871 ; ---------------------------------------------------------------------------
.text:0000000000013871
.text:0000000000013871 loc_13871:                              ; CODE XREF: parse_expression+946↑j
.text:0000000000013871                                         ; parse_expression+C47↑j ...
.text:0000000000013871                 mov     rax, [rsp+158h+var_118]
.text:0000000000013876                 mov     dword ptr [rax], 7
.text:000000000001387C                 jmp     loc_13708
.text:0000000000013881 ; ---------------------------------------------------------------------------
.text:0000000000013881
.text:0000000000013881 loc_13881:                              ; CODE XREF: parse_expression+AE7↑j
.text:0000000000013881                                         ; parse_expression+AF1↑j ...
.text:0000000000013881                 mov     [rsp+158h+var_130], r15
.text:0000000000013886                 jmp     loc_12C2C
.text:000000000001388B ; ---------------------------------------------------------------------------
.text:000000000001388B
.text:000000000001388B loc_1388B:                              ; CODE XREF: parse_expression+916↑j
.text:000000000001388B                                         ; parse_expression+E6E↓j
.text:000000000001388B                 mov     rdx, [rsp+158h+var_118]
.text:0000000000013890                 mov     [rdx], eax
.text:0000000000013892                 jmp     loc_13708
.text:0000000000013897 ; ---------------------------------------------------------------------------
.text:0000000000013897
.text:0000000000013897 loc_13897:                              ; CODE XREF: parse_expression+94F↑j
.text:0000000000013897                 movsxd  rax, ebx
.text:000000000001389A                 mov     r11, [rsp+158h+var_138]
.text:000000000001389F                 add     [r14+48h], rax
.text:00000000000138A3                 mov     r10, [rsp+158h+var_F8]
.text:00000000000138A8                 mov     rdx, r11
.text:00000000000138AB                 mov     rdi, r10
.text:00000000000138AE                 call    peek_token_bracket
.text:00000000000138B3                 movzx   edx, [rsp+158h+var_90]
.text:00000000000138BB                 cmp     dl, 2
.text:00000000000138BE                 jz      short loc_13871
.text:00000000000138C0                 cmp     dl, 15h
.text:00000000000138C3                 jz      loc_13AD7
.text:00000000000138C9                 mov     rdx, [rsp+158h+var_F0]
.text:00000000000138CE                 lea     rdi, [rsp+158h+var_A8]
.text:00000000000138D6                 mov     r9d, 1
.text:00000000000138DC                 mov     r8, r11
.text:00000000000138DF                 mov     ecx, eax
.text:00000000000138E1                 mov     dword ptr [rsp+158h+var_A8], 3
.text:00000000000138EC                 mov     [rsp+158h+var_A0], rdx
.text:00000000000138F4                 mov     rdx, r10
.text:00000000000138F7                 call    parse_bracket_element_constprop_37
.text:00000000000138FC                 test    eax, eax
.text:00000000000138FE                 jnz     short loc_1388B
.text:0000000000013900                 mov     rdx, [rsp+158h+var_138]
.text:0000000000013905                 mov     rsi, r14
.text:0000000000013908                 mov     rdi, r15
.text:000000000001390B                 call    peek_token_bracket
.text:0000000000013910                 movsxd  rbx, eax
.text:0000000000013913                 mov     rax, [rsp+158h+var_148]
.text:0000000000013918                 mov     esi, [rsp+158h+var_B8]
.text:000000000001391F                 mov     r9d, 0
.text:0000000000013925                 cmp     dword ptr [rax+0B4h], 1
.text:000000000001392C                 lea     eax, [rsi-2]
.text:000000000001392F                 cmovg   r9, r13
.text:0000000000013933                 and     eax, 0FFFFFFFDh
.text:0000000000013936                 jz      loc_13DA9
.text:000000000001393C                 mov     r10d, dword ptr [rsp+158h+var_A8]
.text:0000000000013944                 lea     eax, [r10-2]
.text:0000000000013948                 and     eax, 0FFFFFFFDh
.text:000000000001394B                 jz      loc_13DA9
.text:0000000000013951                 cmp     esi, 3
.text:0000000000013954                 setz    r11b
.text:0000000000013958                 jz      loc_13DED
.text:000000000001395E
.text:000000000001395E loc_1395E:                              ; CODE XREF: parse_expression+137B↓j
.text:000000000001395E                 cmp     r10d, 3
.text:0000000000013962                 jz      loc_13DB9
.text:0000000000013968
.text:0000000000013968 loc_13968:                              ; CODE XREF: parse_expression+1347↓j
.text:0000000000013968                 test    esi, esi
.text:000000000001396A                 jnz     loc_13CD9
.text:0000000000013970                 movzx   edx, byte ptr [rsp+158h+var_B0]
.text:0000000000013978
.text:0000000000013978 loc_13978:                              ; CODE XREF: parse_expression+124E↓j
.text:0000000000013978                                         ; parse_expression+125F↓j
.text:0000000000013978                 test    r10d, r10d
.text:000000000001397B                 jnz     loc_13CBD
.text:0000000000013981                 movzx   r8d, byte ptr [rsp+158h+var_A0]
.text:000000000001398A
.text:000000000001398A loc_1398A:                              ; CODE XREF: parse_expression+14CE↓j
.text:000000000001398A                 test    esi, esi
.text:000000000001398C                 jz      loc_13C76
.text:0000000000013992                 test    r11b, r11b
.text:0000000000013995                 jnz     loc_13C76
.text:000000000001399B                 test    r9, r9
.text:000000000001399E                 mov     edx, dword ptr [rsp+158h+var_B0]
.text:00000000000139A5                 jz      short loc_139C4
.text:00000000000139A7
.text:00000000000139A7 loc_139A7:                              ; CODE XREF: parse_expression+1212↓j
.text:00000000000139A7                                         ; parse_expression+121A↓j
.text:00000000000139A7                 mov     edi, r8d        ; c
.text:00000000000139AA                 mov     dword ptr [rsp+158h+ptr], edx
.text:00000000000139AE                 mov     [rsp+158h+var_E8], r9
.text:00000000000139B3                 call    _btowc
.text:00000000000139B8                 mov     r9, [rsp+158h+var_E8]
.text:00000000000139BD                 mov     edx, dword ptr [rsp+158h+ptr]
.text:00000000000139C1                 mov     r8d, eax
.text:00000000000139C4
.text:00000000000139C4 loc_139C4:                              ; CODE XREF: parse_expression+F15↑j
.text:00000000000139C4                                         ; parse_expression+1228↓j
.text:00000000000139C4                 cmp     edx, 0FFFFFFFFh
.text:00000000000139C7                 jz      loc_13DDD
.text:00000000000139CD                 cmp     r8d, 0FFFFFFFFh
.text:00000000000139D1                 jz      loc_13DDD
.text:00000000000139D7
.text:00000000000139D7 loc_139D7:                              ; CODE XREF: parse_expression+1267↓j
.text:00000000000139D7                                         ; parse_expression+1273↓j
.text:00000000000139D7                 test    [rsp+158h+var_138], 10000h
.text:00000000000139E0                 jz      short loc_139EB
.text:00000000000139E2                 cmp     r8d, edx
.text:00000000000139E5                 jb      loc_13DA9
.text:00000000000139EB
.text:00000000000139EB loc_139EB:                              ; CODE XREF: parse_expression+F50↑j
.text:00000000000139EB                 test    r9, r9
.text:00000000000139EE                 jz      short loc_13A16
.text:00000000000139F0                 mov     rax, [r9+40h]
.text:00000000000139F4                 cmp     rax, [rsp+158h+var_110]
.text:00000000000139F9                 mov     rcx, [r9+8]
.text:00000000000139FD                 jz      loc_13E13
.text:0000000000013A03
.text:0000000000013A03 loc_13A03:                              ; CODE XREF: parse_expression+1410↓j
.text:0000000000013A03                 mov     [rcx+rax*4], edx
.text:0000000000013A06                 mov     rcx, [r9+10h]
.text:0000000000013A0A                 lea     rsi, [rax+1]
.text:0000000000013A0E                 mov     [r9+40h], rsi
.text:0000000000013A12                 mov     [rcx+rax*4], r8d
.text:0000000000013A16
.text:0000000000013A16 loc_13A16:                              ; CODE XREF: parse_expression+F5E↑j
.text:0000000000013A16                 xor     eax, eax
.text:0000000000013A18                 mov     edi, 1
.text:0000000000013A1D
.text:0000000000013A1D loc_13A1D:                              ; CODE XREF: parse_expression+FB3↓j
.text:0000000000013A1D                 cmp     edx, eax
.text:0000000000013A1F                 mov     ecx, eax
.text:0000000000013A21                 ja      short loc_13A39
.text:0000000000013A23                 cmp     r8d, eax
.text:0000000000013A26                 jb      short loc_13A39
.text:0000000000013A28                 mov     rsi, rax
.text:0000000000013A2B                 mov     r11, rdi
.text:0000000000013A2E                 sar     rsi, 6
.text:0000000000013A32                 shl     r11, cl
.text:0000000000013A35                 or      [r12+rsi*8], r11
.text:0000000000013A39
.text:0000000000013A39 loc_13A39:                              ; CODE XREF: parse_expression+F91↑j
.text:0000000000013A39                                         ; parse_expression+F96↑j
.text:0000000000013A39                 add     rax, 1
.text:0000000000013A3D                 cmp     rax, 100h
.text:0000000000013A43                 jnz     short loc_13A1D
.text:0000000000013A45                 mov     rax, [rsp+158h+var_118]
.text:0000000000013A4A                 mov     dword ptr [rax], 0
.text:0000000000013A50                 jmp     loc_136D0
.text:0000000000013A55 ; ---------------------------------------------------------------------------
.text:0000000000013A55
.text:0000000000013A55 loc_13A55:                              ; CODE XREF: parse_expression+15C↑j
.text:0000000000013A55                 mov     rbx, [rsp+158h+var_140]
.text:0000000000013A5A                 mov     rdx, rax
.text:0000000000013A5D                 mov     rsi, r14
.text:0000000000013A60                 mov     [rsp+158h+var_158], r8
.text:0000000000013A64                 mov     r15, rax
.text:0000000000013A67                 mov     rdi, rbx
.text:0000000000013A6A                 call    peek_token
.text:0000000000013A6F                 cdqe
.text:0000000000013A71                 add     [r14+48h], rax
.text:0000000000013A75                 mov     r9, [rsp+158h+var_118]
.text:0000000000013A7A                 mov     r8, [rsp+158h+var_158]
.text:0000000000013A7E                 mov     rcx, r15
.text:0000000000013A81                 mov     rdx, rbx
.text:0000000000013A84                 mov     rsi, rbp
.text:0000000000013A87                 mov     rdi, r14
.text:0000000000013A8A                 call    parse_expression
.text:0000000000013A8F                 mov     [rsp+158h+var_130], rax
.text:0000000000013A94                 jmp     loc_12BA0
.text:0000000000013A99 ; ---------------------------------------------------------------------------
.text:0000000000013A99
.text:0000000000013A99 loc_13A99:                              ; CODE XREF: parse_expression+863↑j
.text:0000000000013A99                                         ; parse_expression+D74↑j
.text:0000000000013A99                 mov     rax, [rsp+158h+var_118]
.text:0000000000013A9E                 mov     dword ptr [rax], 2
.text:0000000000013AA4                 jmp     loc_13708
.text:0000000000013AA9 ; ---------------------------------------------------------------------------
.text:0000000000013AA9
.text:0000000000013AA9 loc_13AA9:                              ; CODE XREF: parse_expression+83E↑j
.text:0000000000013AA9                 mov     rdi, r12        ; ptr
.text:0000000000013AAC                 call    _free
.text:0000000000013AB1                 mov     rdi, r13        ; ptr
.text:0000000000013AB4                 call    _free
.text:0000000000013AB9                 jmp     loc_135F8
.text:0000000000013ABE ; ---------------------------------------------------------------------------
.text:0000000000013ABE
.text:0000000000013ABE loc_13ABE:                              ; CODE XREF: parse_expression+9FC↑j
.text:0000000000013ABE                 mov     rax, [rsp+158h+var_118]
.text:0000000000013AC3                 mov     [rsp+158h+var_130], 0
.text:0000000000013ACC                 mov     dword ptr [rax], 6
.text:0000000000013AD2                 jmp     loc_12BA0
.text:0000000000013AD7 ; ---------------------------------------------------------------------------
.text:0000000000013AD7
.text:0000000000013AD7 loc_13AD7:                              ; CODE XREF: parse_expression+E33↑j
.text:0000000000013AD7                 mov     eax, ebx
.text:0000000000013AD9                 neg     eax
.text:0000000000013ADB                 cdqe
.text:0000000000013ADD                 add     [r14+48h], rax
.text:0000000000013AE1                 mov     byte ptr [r15+8], 1
.text:0000000000013AE6                 mov     eax, [rsp+158h+var_B8]
.text:0000000000013AED                 jmp     loc_133E5
.text:0000000000013AF2 ; ---------------------------------------------------------------------------
.text:0000000000013AF2
.text:0000000000013AF2 loc_13AF2:                              ; CODE XREF: parse_expression+C4F↑j
.text:0000000000013AF2                 add     [r14+48h], rbx
.text:0000000000013AF6                 cmp     [rsp+158h+var_101], 0
.text:0000000000013AFB                 jz      short loc_13B11
.text:0000000000013AFD                 lea     rdx, [r12+20h]
.text:0000000000013B02                 mov     rax, r12
.text:0000000000013B05
.text:0000000000013B05 loc_13B05:                              ; CODE XREF: parse_expression+107F↓j
.text:0000000000013B05                 not     qword ptr [rax]
.text:0000000000013B08                 add     rax, 8
.text:0000000000013B0C                 cmp     rdx, rax
.text:0000000000013B0F                 jnz     short loc_13B05
.text:0000000000013B11
.text:0000000000013B11 loc_13B11:                              ; CODE XREF: parse_expression+106B↑j
.text:0000000000013B11                 mov     rax, [rsp+158h+var_148]
.text:0000000000013B16                 mov     edx, [rax+0B4h]
.text:0000000000013B1C                 cmp     edx, 1
.text:0000000000013B1F                 jle     short loc_13B39
.text:0000000000013B21                 mov     rcx, [rax+78h]
.text:0000000000013B25                 xor     eax, eax
.text:0000000000013B27
.text:0000000000013B27 loc_13B27:                              ; CODE XREF: parse_expression+10A7↓j
.text:0000000000013B27                 mov     rsi, [rcx+rax]
.text:0000000000013B2B                 and     [r12+rax], rsi
.text:0000000000013B2F                 add     rax, 8
.text:0000000000013B33                 cmp     rax, 20h ; ' '
.text:0000000000013B37                 jnz     short loc_13B27
.text:0000000000013B39
.text:0000000000013B39 loc_13B39:                              ; CODE XREF: parse_expression+108F↑j
.text:0000000000013B39                 cmp     qword ptr [r13+28h], 0
.text:0000000000013B3E                 jnz     loc_13BC8
.text:0000000000013B44                 cmp     qword ptr [r13+30h], 0
.text:0000000000013B49                 jnz     short loc_13BC8
.text:0000000000013B4B                 cmp     qword ptr [r13+38h], 0
.text:0000000000013B50                 jnz     short loc_13BC8
.text:0000000000013B52                 cmp     qword ptr [r13+40h], 0
.text:0000000000013B57                 jnz     short loc_13BC8
.text:0000000000013B59                 sub     edx, 1
.text:0000000000013B5C                 jle     short loc_13B6C
.text:0000000000013B5E                 cmp     qword ptr [r13+48h], 0
.text:0000000000013B63                 jnz     short loc_13BC8
.text:0000000000013B65                 test    byte ptr [r13+20h], 1
.text:0000000000013B6A                 jnz     short loc_13BC8
.text:0000000000013B6C
.text:0000000000013B6C loc_13B6C:                              ; CODE XREF: parse_expression+10CC↑j
.text:0000000000013B6C                 mov     rdi, r13        ; ptr
.text:0000000000013B6F                 call    isl_union_flow_free_0
.text:0000000000013B74                 mov     rax, [rsp+158h+var_148]
.text:0000000000013B79                 lea     r8, [rsp+158h+var_A8]
.text:0000000000013B81                 xor     ecx, ecx
.text:0000000000013B83                 xor     edx, edx
.text:0000000000013B85                 mov     byte ptr [rsp+158h+var_A0], 3
.text:0000000000013B8D                 mov     [rsp+158h+var_A8], r12
.text:0000000000013B95                 lea     rsi, [rax+80h]
.text:0000000000013B9C                 lea     rdi, [rax+70h]
.text:0000000000013BA0                 call    create_token_tree_isra_16
.text:0000000000013BA5                 test    rax, rax
.text:0000000000013BA8                 mov     [rsp+158h+var_130], rax
.text:0000000000013BAD                 jnz     loc_12C2C
.text:0000000000013BB3
.text:0000000000013BB3 loc_13BB3:                              ; CODE XREF: parse_expression+118C↓j
.text:0000000000013BB3                                         ; parse_expression+11D0↓j ...
.text:0000000000013BB3                 mov     rax, [rsp+158h+var_118]
.text:0000000000013BB8                 mov     dword ptr [rax], 0Ch
.text:0000000000013BBE                 jmp     loc_13708
.text:0000000000013BBE ; ---------------------------------------------------------------------------
.text:0000000000013BC3                 align 8
.text:0000000000013BC8
.text:0000000000013BC8 loc_13BC8:                              ; CODE XREF: parse_expression+10AE↑j
.text:0000000000013BC8                                         ; parse_expression+10B9↑j ...
.text:0000000000013BC8                 mov     rax, [rsp+158h+var_148]
.text:0000000000013BCD                 lea     r15, [rsp+158h+var_A8]
.text:0000000000013BD5                 xor     edx, edx
.text:0000000000013BD7                 xor     ecx, ecx
.text:0000000000013BD9                 mov     r8, r15
.text:0000000000013BDC                 or      byte ptr [rax+0B0h], 2
.text:0000000000013BE3                 lea     rbx, [rax+70h]
.text:0000000000013BE7                 lea     rbp, [rax+80h]
.text:0000000000013BEE                 mov     byte ptr [rsp+158h+var_A0], 6
.text:0000000000013BF6                 mov     [rsp+158h+var_A8], r13
.text:0000000000013BFE                 mov     rdi, rbx
.text:0000000000013C01                 mov     rsi, rbp
.text:0000000000013C04                 call    create_token_tree_isra_16
.text:0000000000013C09                 mov     rdi, rax
.text:0000000000013C0C                 mov     [rsp+158h+var_130], rax
.text:0000000000013C11                 lea     rdx, [r12+20h]
.text:0000000000013C16                 test    rdi, rdi
.text:0000000000013C19                 mov     rax, r12
.text:0000000000013C1C                 jz      short loc_13BB3
.text:0000000000013C1E
.text:0000000000013C1E loc_13C1E:                              ; CODE XREF: parse_expression+119F↓j
.text:0000000000013C1E                 cmp     qword ptr [rax], 0
.text:0000000000013C22                 jnz     loc_13ECD
.text:0000000000013C28                 add     rax, 8
.text:0000000000013C2C                 cmp     rdx, rax
.text:0000000000013C2F                 jnz     short loc_13C1E
.text:0000000000013C31                 mov     rdi, r12        ; ptr
.text:0000000000013C34                 call    _free
.text:0000000000013C39                 jmp     loc_12C2C
.text:0000000000013C3E ; ---------------------------------------------------------------------------
.text:0000000000013C3E
.text:0000000000013C3E loc_13C3E:                              ; CODE XREF: parse_expression+CB4↑j
.text:0000000000013C3E                 mov     rdx, qword ptr [rsp+158h+var_128]
.text:0000000000013C43                 lea     rdi, [rdx+rdx+1]
.text:0000000000013C48                 lea     rsi, ds:0[rdi*4] ; size
.text:0000000000013C50                 mov     qword ptr [rsp+158h+var_128], rdi
.text:0000000000013C55                 mov     rdi, rax        ; ptr
.text:0000000000013C58                 call    _realloc
.text:0000000000013C5D                 test    rax, rax
.text:0000000000013C60                 jz      loc_13BB3
.text:0000000000013C66                 mov     [r13+0], rax
.text:0000000000013C6A                 mov     rdx, [r13+28h]
.text:0000000000013C6E                 jmp     loc_1374A
.text:0000000000013C73 ; ---------------------------------------------------------------------------
.text:0000000000013C73
.text:0000000000013C73 loc_13C73:                              ; CODE XREF: parse_expression+1239↓j
.text:0000000000013C73                                         ; parse_expression+123E↓j
.text:0000000000013C73                 xor     r8d, r8d
.text:0000000000013C76
.text:0000000000013C76 loc_13C76:                              ; CODE XREF: parse_expression+EFC↑j
.text:0000000000013C76                                         ; parse_expression+F05↑j
.text:0000000000013C76                 test    r9, r9
.text:0000000000013C79                 jz      short loc_13CF4
.text:0000000000013C7B                 mov     edi, edx        ; c
.text:0000000000013C7D                 mov     dword ptr [rsp+158h+ptr], r8d
.text:0000000000013C82                 mov     [rsp+158h+var_E8], r9
.text:0000000000013C87                 call    _btowc
.text:0000000000013C8C                 mov     edx, eax
.text:0000000000013C8E                 mov     eax, dword ptr [rsp+158h+var_A8]
.text:0000000000013C95                 mov     r9, [rsp+158h+var_E8]
.text:0000000000013C9A                 mov     r8d, dword ptr [rsp+158h+ptr]
.text:0000000000013C9F                 cmp     eax, 3
.text:0000000000013CA2                 jz      loc_139A7
.text:0000000000013CA8                 test    eax, eax
.text:0000000000013CAA                 jz      loc_139A7
.text:0000000000013CB0
.text:0000000000013CB0 loc_13CB0:                              ; CODE XREF: parse_expression+1247↓j
.text:0000000000013CB0                                         ; parse_expression+1271↓j
.text:0000000000013CB0                 mov     r8d, dword ptr [rsp+158h+var_A0]
.text:0000000000013CB8                 jmp     loc_139C4
.text:0000000000013CBD ; ---------------------------------------------------------------------------
.text:0000000000013CBD
.text:0000000000013CBD loc_13CBD:                              ; CODE XREF: parse_expression+EEB↑j
.text:0000000000013CBD                 cmp     r10d, 3
.text:0000000000013CC1                 jz      loc_13F52
.text:0000000000013CC7                 test    esi, esi
.text:0000000000013CC9                 jz      short loc_13C73
.text:0000000000013CCB                 test    r11b, r11b
.text:0000000000013CCE                 jnz     short loc_13C73
.text:0000000000013CD0                 mov     edx, dword ptr [rsp+158h+var_B0]
.text:0000000000013CD7                 jmp     short loc_13CB0
.text:0000000000013CD9 ; ---------------------------------------------------------------------------
.text:0000000000013CD9
.text:0000000000013CD9 loc_13CD9:                              ; CODE XREF: parse_expression+EDA↑j
.text:0000000000013CD9                 xor     edx, edx
.text:0000000000013CDB                 cmp     esi, 3
.text:0000000000013CDE                 jnz     loc_13978
.text:0000000000013CE4                 mov     rax, [rsp+158h+var_B0]
.text:0000000000013CEC                 movzx   edx, byte ptr [rax]
.text:0000000000013CEF                 jmp     loc_13978
.text:0000000000013CF4 ; ---------------------------------------------------------------------------
.text:0000000000013CF4
.text:0000000000013CF4 loc_13CF4:                              ; CODE XREF: parse_expression+11E9↑j
.text:0000000000013CF4                 test    r10d, r10d
.text:0000000000013CF7                 jz      loc_139D7
.text:0000000000013CFD                 cmp     r10d, 3
.text:0000000000013D01                 jnz     short loc_13CB0
.text:0000000000013D03                 jmp     loc_139D7
.text:0000000000013D08 ; ---------------------------------------------------------------------------
.text:0000000000013D08
.text:0000000000013D08 loc_13D08:                              ; CODE XREF: parse_expression+719↑j
.text:0000000000013D08                 mov     ebx, 80h
.text:0000000000013D0D                 mov     r12d, 2
.text:0000000000013D13
.text:0000000000013D13 loc_13D13:                              ; CODE XREF: parse_expression+12F8↓j
.text:0000000000013D13                 call    ___ctype_b_loc
.text:0000000000013D18                 movsxd  rdx, ebx
.text:0000000000013D1B                 movsxd  r9, r12d
.text:0000000000013D1E                 mov     r8d, 1
.text:0000000000013D24                 add     rdx, rdx
.text:0000000000013D27                 add     rdx, [rax]
.text:0000000000013D2A                 mov     rax, [rsp+158h+var_148]
.text:0000000000013D2F                 lea     rdi, [rax+r9*8]
.text:0000000000013D33
.text:0000000000013D33 loc_13D33:                              ; CODE XREF: parse_expression+12EC↓j
.text:0000000000013D33                 xor     eax, eax
.text:0000000000013D35                 jmp     short loc_13D52
.text:0000000000013D35 ; ---------------------------------------------------------------------------
.text:0000000000013D37                 align 20h
.text:0000000000013D40
.text:0000000000013D40 loc_13D40:                              ; CODE XREF: parse_expression+12C8↓j
.text:0000000000013D40                 lea     esi, [rbx+rax]
.text:0000000000013D43                 cmp     esi, 5Fh ; '_'
.text:0000000000013D46                 jz      short loc_13D5A
.text:0000000000013D48
.text:0000000000013D48 loc_13D48:                              ; CODE XREF: parse_expression+12D7↓j
.text:0000000000013D48                 add     rax, 1
.text:0000000000013D4C                 cmp     rax, 40h ; '@'
.text:0000000000013D50                 jz      short loc_13D69
.text:0000000000013D52
.text:0000000000013D52 loc_13D52:                              ; CODE XREF: parse_expression+12A5↑j
.text:0000000000013D52                 test    byte ptr [rdx+rax*2], 8
.text:0000000000013D56                 mov     ecx, eax
.text:0000000000013D58                 jz      short loc_13D40
.text:0000000000013D5A
.text:0000000000013D5A loc_13D5A:                              ; CODE XREF: parse_expression+12B6↑j
.text:0000000000013D5A                 mov     rsi, r8
.text:0000000000013D5D                 shl     rsi, cl
.text:0000000000013D60                 or      [rdi+0B8h], rsi
.text:0000000000013D67                 jmp     short loc_13D48
.text:0000000000013D69 ; ---------------------------------------------------------------------------
.text:0000000000013D69
.text:0000000000013D69 loc_13D69:                              ; CODE XREF: parse_expression+12C0↑j
.text:0000000000013D69                 add     r9, 1
.text:0000000000013D6D                 add     ebx, 40h ; '@'
.text:0000000000013D70                 sub     rdx, 0FFFFFFFFFFFFFF80h
.text:0000000000013D74                 add     rdi, 8
.text:0000000000013D78                 cmp     r9d, 3
.text:0000000000013D7C                 jle     short loc_13D33
.text:0000000000013D7E                 jmp     loc_131C1
.text:0000000000013D83 ; ---------------------------------------------------------------------------
.text:0000000000013D83
.text:0000000000013D83 loc_13D83:                              ; CODE XREF: parse_expression+6EF↑j
.text:0000000000013D83                 xor     ebx, ebx
.text:0000000000013D85                 xor     r12d, r12d
.text:0000000000013D88                 jmp     short loc_13D13
.text:0000000000013D8A ; ---------------------------------------------------------------------------
.text:0000000000013D8A
.text:0000000000013D8A def_133F6:                              ; CODE XREF: parse_expression+958↑j
.text:0000000000013D8A                 lea     rcx, __PRETTY_FUNCTION___7327 ; jumptable 00000000000133F6 default case
.text:0000000000013D91                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000013D98                 lea     rdi, aNum0+7    ; assertion
.text:0000000000013D9F                 mov     edx, 0CEDh      ; line
.text:0000000000013DA4                 call    ___assert_fail
.text:0000000000013DA9 ; ---------------------------------------------------------------------------
.text:0000000000013DA9
.text:0000000000013DA9 loc_13DA9:                              ; CODE XREF: parse_expression+EA6↑j
.text:0000000000013DA9                                         ; parse_expression+EBB↑j ...
.text:0000000000013DA9                 mov     rax, [rsp+158h+var_118]
.text:0000000000013DAE                 mov     dword ptr [rax], 0Bh
.text:0000000000013DB4                 jmp     loc_13708
.text:0000000000013DB9 ; ---------------------------------------------------------------------------
.text:0000000000013DB9
.text:0000000000013DB9 loc_13DB9:                              ; CODE XREF: parse_expression+ED2↑j
.text:0000000000013DB9                 mov     rdi, [rsp+158h+var_A0]
.text:0000000000013DC1                 xor     eax, eax
.text:0000000000013DC3                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013DC7                 repne scasb
.text:0000000000013DC9                 mov     rax, rcx
.text:0000000000013DCC                 not     rax
.text:0000000000013DCF                 sub     rax, 1
.text:0000000000013DD3                 cmp     rax, 1
.text:0000000000013DD7                 jbe     loc_13968
.text:0000000000013DDD
.text:0000000000013DDD loc_13DDD:                              ; CODE XREF: parse_expression+F37↑j
.text:0000000000013DDD                                         ; parse_expression+F41↑j ...
.text:0000000000013DDD                 mov     rax, [rsp+158h+var_118]
.text:0000000000013DE2                 mov     dword ptr [rax], 3
.text:0000000000013DE8                 jmp     loc_13708
.text:0000000000013DED ; ---------------------------------------------------------------------------
.text:0000000000013DED
.text:0000000000013DED loc_13DED:                              ; CODE XREF: parse_expression+EC8↑j
.text:0000000000013DED                 mov     rdi, [rsp+158h+var_B0]
.text:0000000000013DF5                 xor     eax, eax
.text:0000000000013DF7                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013DFB                 repne scasb
.text:0000000000013DFD                 mov     rax, rcx
.text:0000000000013E00                 not     rax
.text:0000000000013E03                 sub     rax, 1
.text:0000000000013E07                 cmp     rax, 1
.text:0000000000013E0B                 jbe     loc_1395E
.text:0000000000013E11                 jmp     short loc_13DDD
.text:0000000000013E13 ; ---------------------------------------------------------------------------
.text:0000000000013E13
.text:0000000000013E13 loc_13E13:                              ; CODE XREF: parse_expression+F6D↑j
.text:0000000000013E13                 mov     rax, [rsp+158h+var_110]
.text:0000000000013E18                 mov     rdi, rcx        ; ptr
.text:0000000000013E1B                 mov     [rsp+158h+var_CC], r8d
.text:0000000000013E23                 mov     [rsp+158h+var_D0], edx
.text:0000000000013E2A                 mov     [rsp+158h+var_E8], r9
.text:0000000000013E2F                 add     rax, rax
.text:0000000000013E32                 add     rax, 1
.text:0000000000013E36                 lea     r10, ds:0[rax*4]
.text:0000000000013E3E                 mov     [rsp+158h+var_110], rax
.text:0000000000013E43                 mov     rsi, r10        ; size
.text:0000000000013E46                 mov     [rsp+158h+size], r10
.text:0000000000013E4E                 call    _realloc
.text:0000000000013E53                 mov     r9, [rsp+158h+var_E8]
.text:0000000000013E58                 mov     r10, [rsp+158h+size]
.text:0000000000013E60                 mov     [rsp+158h+ptr], rax
.text:0000000000013E65                 mov     rdi, [r9+10h]   ; ptr
.text:0000000000013E69                 mov     rsi, r10        ; size
.text:0000000000013E6C                 call    _realloc
.text:0000000000013E71                 mov     rcx, [rsp+158h+ptr]
.text:0000000000013E76                 test    rcx, rcx
.text:0000000000013E79                 jz      short loc_13EA5
.text:0000000000013E7B                 test    rax, rax
.text:0000000000013E7E                 mov     r9, [rsp+158h+var_E8]
.text:0000000000013E83                 mov     edx, [rsp+158h+var_D0]
.text:0000000000013E8A                 mov     r8d, [rsp+158h+var_CC]
.text:0000000000013E92                 jz      short loc_13EA5
.text:0000000000013E94                 mov     [r9+10h], rax
.text:0000000000013E98                 mov     [r9+8], rcx
.text:0000000000013E9C                 mov     rax, [r9+40h]
.text:0000000000013EA0                 jmp     loc_13A03
.text:0000000000013EA5 ; ---------------------------------------------------------------------------
.text:0000000000013EA5
.text:0000000000013EA5 loc_13EA5:                              ; CODE XREF: parse_expression+13E9↑j
.text:0000000000013EA5                                         ; parse_expression+1402↑j
.text:0000000000013EA5                 mov     rdi, rcx        ; ptr
.text:0000000000013EA8                 mov     [rsp+158h+var_158], rax
.text:0000000000013EAC                 call    _free
.text:0000000000013EB1                 mov     rax, [rsp+158h+var_158]
.text:0000000000013EB5                 mov     rdi, rax        ; ptr
.text:0000000000013EB8                 call    _free
.text:0000000000013EBD                 mov     rax, [rsp+158h+var_118]
.text:0000000000013EC2                 mov     dword ptr [rax], 0Ch
.text:0000000000013EC8                 jmp     loc_13708
.text:0000000000013ECD ; ---------------------------------------------------------------------------
.text:0000000000013ECD
.text:0000000000013ECD loc_13ECD:                              ; CODE XREF: parse_expression+1192↑j
.text:0000000000013ECD                 xor     ecx, ecx
.text:0000000000013ECF                 xor     edx, edx
.text:0000000000013ED1                 mov     r8, r15
.text:0000000000013ED4                 mov     rsi, rbp
.text:0000000000013ED7                 mov     rdi, rbx
.text:0000000000013EDA                 mov     byte ptr [rsp+158h+var_A0], 3
.text:0000000000013EE2                 mov     [rsp+158h+var_A8], r12
.text:0000000000013EEA                 call    create_token_tree_isra_16
.text:0000000000013EEF                 test    rax, rax
.text:0000000000013EF2                 jz      loc_13BB3
.text:0000000000013EF8                 mov     rcx, [rsp+158h+var_130]
.text:0000000000013EFD                 lea     r8, [rsp+158h+var_98]
.text:0000000000013F05                 mov     rdx, rax
.text:0000000000013F08                 mov     rsi, rbp
.text:0000000000013F0B                 mov     rdi, rbx
.text:0000000000013F0E                 mov     [rsp+158h+var_90], 0Ah
.text:0000000000013F16                 call    create_token_tree_isra_16
.text:0000000000013F1B                 test    rax, rax
.text:0000000000013F1E                 mov     [rsp+158h+var_130], rax
.text:0000000000013F23                 jnz     loc_12C2C
.text:0000000000013F29                 jmp     loc_13BB3
.text:0000000000013F2E ; ---------------------------------------------------------------------------
.text:0000000000013F2E
.text:0000000000013F2E loc_13F2E:                              ; CODE XREF: parse_expression+126↑j
.text:0000000000013F2E                 call    ___stack_chk_fail
.text:0000000000013F33 ; ---------------------------------------------------------------------------
.text:0000000000013F33
.text:0000000000013F33 loc_13F33:                              ; CODE XREF: parse_expression+566↑j
.text:0000000000013F33                 mov     rax, [rsp+158h+var_140]
.text:0000000000013F38                 cmp     byte ptr [rax+8], 2
.text:0000000000013F3C                 jnz     loc_13130
.text:0000000000013F42                 mov     rax, [rsp+158h+var_118]
.text:0000000000013F47                 mov     dword ptr [rax], 9
.text:0000000000013F4D                 jmp     loc_1313B
.text:0000000000013F52 ; ---------------------------------------------------------------------------
.text:0000000000013F52
.text:0000000000013F52 loc_13F52:                              ; CODE XREF: parse_expression+1231↑j
.text:0000000000013F52                 mov     rax, [rsp+158h+var_A0]
.text:0000000000013F5A                 movzx   r8d, byte ptr [rax]
.text:0000000000013F5E                 jmp     loc_1398A
.text:0000000000013F5E ; } // starts at 12A90
.text:0000000000013F5E parse_expression endp
.text:0000000000013F5E
.text:0000000000013F5E ; ---------------------------------------------------------------------------
.text:0000000000013F63                 align 10h
.text:0000000000013F70
.text:0000000000013F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000013F70
.text:0000000000013F70
.text:0000000000013F70 parse_branch    proc near               ; CODE XREF: parse_reg_exp+43↓p
.text:0000000000013F70                                         ; parse_reg_exp+AE↓p
.text:0000000000013F70
.text:0000000000013F70 var_78          = qword ptr -78h
.text:0000000000013F70 var_70          = qword ptr -70h
.text:0000000000013F70 var_68          = qword ptr -68h
.text:0000000000013F70 var_60          = qword ptr -60h
.text:0000000000013F70 var_58          = byte ptr -58h
.text:0000000000013F70 var_50          = byte ptr -50h
.text:0000000000013F70 var_40          = qword ptr -40h
.text:0000000000013F70
.text:0000000000013F70 ; __unwind {
.text:0000000000013F70                 push    r15
.text:0000000000013F72                 push    r14
.text:0000000000013F74                 mov     r15, rcx
.text:0000000000013F77                 push    r13
.text:0000000000013F79                 push    r12
.text:0000000000013F7B                 mov     r13, rsi
.text:0000000000013F7E                 push    rbp
.text:0000000000013F7F                 push    rbx
.text:0000000000013F80                 mov     rbx, r9
.text:0000000000013F83                 mov     rbp, rdx
.text:0000000000013F86                 mov     r12, r8
.text:0000000000013F89                 sub     rsp, 48h
.text:0000000000013F8D                 mov     rax, fs:28h
.text:0000000000013F96                 mov     [rsp+78h+var_40], rax
.text:0000000000013F9B                 xor     eax, eax
.text:0000000000013F9D                 mov     rax, [rsi]
.text:0000000000013FA0                 mov     [rsp+78h+var_78], rdi
.text:0000000000013FA4                 mov     [rsp+78h+var_68], rax
.text:0000000000013FA9                 call    parse_expression
.text:0000000000013FAE                 mov     edx, [rbx]
.text:0000000000013FB0                 mov     r14, rax
.text:0000000000013FB3                 test    edx, edx
.text:0000000000013FB5                 jz      short loc_13FC0
.text:0000000000013FB7                 test    rax, rax
.text:0000000000013FBA                 jz      loc_140BA
.text:0000000000013FC0
.text:0000000000013FC0 loc_13FC0:                              ; CODE XREF: parse_branch+45↑j
.text:0000000000013FC0                 lea     rax, [rsp+78h+var_58]
.text:0000000000013FC5                 mov     [rsp+78h+var_60], rax
.text:0000000000013FCA                 nop     word ptr [rax+rax+00h]
.text:0000000000013FD0
.text:0000000000013FD0 loc_13FD0:                              ; CODE XREF: parse_branch+12F↓j
.text:0000000000013FD0                 movzx   eax, byte ptr [rbp+8]
.text:0000000000013FD4                 mov     edx, eax
.text:0000000000013FD6                 and     edx, 0FFFFFFF7h
.text:0000000000013FD9                 cmp     dl, 2
.text:0000000000013FDC                 jz      loc_14070
.text:0000000000013FE2
.text:0000000000013FE2 loc_13FE2:                              ; CODE XREF: parse_branch+F6↓j
.text:0000000000013FE2                 cmp     al, 9
.text:0000000000013FE4                 jnz     short loc_13FEF
.text:0000000000013FE6                 test    r12, r12
.text:0000000000013FE9                 jnz     loc_14070
.text:0000000000013FEF
.text:0000000000013FEF loc_13FEF:                              ; CODE XREF: parse_branch+74↑j
.text:0000000000013FEF                 mov     rdi, [rsp+78h+var_78]
.text:0000000000013FF3                 mov     r9, rbx
.text:0000000000013FF6                 mov     r8, r12
.text:0000000000013FF9                 mov     rcx, r15
.text:0000000000013FFC                 mov     rdx, rbp
.text:0000000000013FFF                 mov     rsi, r13
.text:0000000000014002                 call    parse_expression
.text:0000000000014007                 mov     r9, rax
.text:000000000001400A                 mov     eax, [rbx]
.text:000000000001400C                 test    eax, eax
.text:000000000001400E                 jz      short loc_14019
.text:0000000000014010                 test    r9, r9
.text:0000000000014013                 jz      loc_140A4
.text:0000000000014019
.text:0000000000014019 loc_14019:                              ; CODE XREF: parse_branch+9E↑j
.text:0000000000014019                 test    r14, r14
.text:000000000001401C                 jz      short loc_14098
.text:000000000001401E                 test    r9, r9
.text:0000000000014021                 jz      short loc_14098
.text:0000000000014023                 mov     rax, [rsp+78h+var_68]
.text:0000000000014028                 mov     r8, [rsp+78h+var_60]
.text:000000000001402D                 mov     rcx, r9
.text:0000000000014030                 mov     rdx, r14
.text:0000000000014033                 mov     [rsp+78h+var_70], r9
.text:0000000000014038                 mov     [rsp+78h+var_50], 10h
.text:000000000001403D                 lea     rsi, [rax+80h]
.text:0000000000014044                 lea     rdi, [rax+70h]
.text:0000000000014048                 call    create_token_tree_isra_16
.text:000000000001404D                 test    rax, rax
.text:0000000000014050                 mov     r9, [rsp+78h+var_70]
.text:0000000000014055                 jz      short loc_140C0
.text:0000000000014057                 mov     r14, rax
.text:000000000001405A                 movzx   eax, byte ptr [rbp+8]
.text:000000000001405E                 mov     edx, eax
.text:0000000000014060                 and     edx, 0FFFFFFF7h
.text:0000000000014063                 cmp     dl, 2
.text:0000000000014066                 jnz     loc_13FE2
.text:000000000001406C                 nop     dword ptr [rax+00h]
.text:0000000000014070
.text:0000000000014070 loc_14070:                              ; CODE XREF: parse_branch+6C↑j
.text:0000000000014070                                         ; parse_branch+79↑j ...
.text:0000000000014070                 mov     rcx, [rsp+78h+var_40]
.text:0000000000014075                 xor     rcx, fs:28h
.text:000000000001407E                 mov     rax, r14
.text:0000000000014081                 jnz     short loc_140ED
.text:0000000000014083                 add     rsp, 48h
.text:0000000000014087                 pop     rbx
.text:0000000000014088                 pop     rbp
.text:0000000000014089                 pop     r12
.text:000000000001408B                 pop     r13
.text:000000000001408D                 pop     r14
.text:000000000001408F                 pop     r15
.text:0000000000014091                 retn
.text:0000000000014091 ; ---------------------------------------------------------------------------
.text:0000000000014092                 align 8
.text:0000000000014098
.text:0000000000014098 loc_14098:                              ; CODE XREF: parse_branch+AC↑j
.text:0000000000014098                                         ; parse_branch+B1↑j
.text:0000000000014098                 test    r14, r14
.text:000000000001409B                 cmovz   r14, r9
.text:000000000001409F                 jmp     loc_13FD0
.text:00000000000140A4 ; ---------------------------------------------------------------------------
.text:00000000000140A4
.text:00000000000140A4 loc_140A4:                              ; CODE XREF: parse_branch+A3↑j
.text:00000000000140A4                 test    r14, r14
.text:00000000000140A7                 jz      short loc_140BA
.text:00000000000140A9                 lea     rsi, free_tree
.text:00000000000140B0                 xor     edx, edx
.text:00000000000140B2                 mov     rdi, r14
.text:00000000000140B5                 call    postorder
.text:00000000000140BA
.text:00000000000140BA loc_140BA:                              ; CODE XREF: parse_branch+4A↑j
.text:00000000000140BA                                         ; parse_branch+137↑j
.text:00000000000140BA                 xor     r14d, r14d
.text:00000000000140BD                 jmp     short loc_14070
.text:00000000000140BD ; ---------------------------------------------------------------------------
.text:00000000000140BF                 align 20h
.text:00000000000140C0
.text:00000000000140C0 loc_140C0:                              ; CODE XREF: parse_branch+E5↑j
.text:00000000000140C0                 lea     rsi, free_tree
.text:00000000000140C7                 mov     rdi, r9
.text:00000000000140CA                 xor     edx, edx
.text:00000000000140CC                 call    postorder
.text:00000000000140D1                 lea     rsi, free_tree
.text:00000000000140D8                 mov     rdi, r14
.text:00000000000140DB                 xor     edx, edx
.text:00000000000140DD                 xor     r14d, r14d
.text:00000000000140E0                 call    postorder
.text:00000000000140E5                 mov     dword ptr [rbx], 0Ch
.text:00000000000140EB                 jmp     short loc_14070
.text:00000000000140ED ; ---------------------------------------------------------------------------
.text:00000000000140ED
.text:00000000000140ED loc_140ED:                              ; CODE XREF: parse_branch+111↑j
.text:00000000000140ED                 call    ___stack_chk_fail
.text:00000000000140ED ; } // starts at 13F70
.text:00000000000140ED parse_branch    endp
.text:00000000000140ED
.text:00000000000140ED ; ---------------------------------------------------------------------------
.text:00000000000140F2                 align 20h
.text:0000000000014100
.text:0000000000014100 ; =============== S U B R O U T I N E =======================================
.text:0000000000014100
.text:0000000000014100
.text:0000000000014100 parse_reg_exp   proc near               ; CODE XREF: parse_expression+BF↑p
.text:0000000000014100                                         ; re_compile_internal+4B3↓p
.text:0000000000014100
.text:0000000000014100 var_80          = qword ptr -80h
.text:0000000000014100 var_78          = qword ptr -78h
.text:0000000000014100 var_70          = qword ptr -70h
.text:0000000000014100 var_68          = qword ptr -68h
.text:0000000000014100 var_60          = qword ptr -60h
.text:0000000000014100 var_58          = byte ptr -58h
.text:0000000000014100 var_50          = byte ptr -50h
.text:0000000000014100 var_40          = qword ptr -40h
.text:0000000000014100
.text:0000000000014100 ; __unwind {
.text:0000000000014100                 push    r15
.text:0000000000014102                 push    r14
.text:0000000000014104                 mov     r14, rcx
.text:0000000000014107                 push    r13
.text:0000000000014109                 push    r12
.text:000000000001410B                 mov     r13, r9
.text:000000000001410E                 push    rbp
.text:000000000001410F                 push    rbx
.text:0000000000014110                 mov     rbp, rdx
.text:0000000000014113                 mov     r12, rdi
.text:0000000000014116                 sub     rsp, 58h
.text:000000000001411A                 mov     rbx, [rsi]
.text:000000000001411D                 mov     rax, fs:28h
.text:0000000000014126                 mov     [rsp+88h+var_40], rax
.text:000000000001412B                 xor     eax, eax
.text:000000000001412D                 mov     [rsp+88h+var_60], rsi
.text:0000000000014132                 mov     [rsp+88h+var_78], r8
.text:0000000000014137                 mov     rax, [rbx+0A8h]
.text:000000000001413E                 mov     [rsp+88h+var_68], rax
.text:0000000000014143                 call    parse_branch
.text:0000000000014148                 mov     edx, [r13+0]
.text:000000000001414C                 mov     r15, rax
.text:000000000001414F                 test    edx, edx
.text:0000000000014151                 jz      short loc_1415C
.text:0000000000014153                 test    rax, rax
.text:0000000000014156                 jz      loc_14242
.text:000000000001415C
.text:000000000001415C loc_1415C:                              ; CODE XREF: parse_reg_exp+51↑j
.text:000000000001415C                 lea     rax, [rsp+88h+var_58]
.text:0000000000014161                 mov     [rsp+88h+var_80], rax
.text:0000000000014166                 jmp     loc_141F4
.text:0000000000014166 ; ---------------------------------------------------------------------------
.text:000000000001416B                 align 10h
.text:0000000000014170
.text:0000000000014170 loc_14170:                              ; CODE XREF: parse_reg_exp+122↓j
.text:0000000000014170                 cmp     al, 9
.text:0000000000014172                 jnz     short loc_14180
.text:0000000000014174                 cmp     [rsp+88h+var_78], 0
.text:000000000001417A                 jnz     loc_14228
.text:0000000000014180
.text:0000000000014180 loc_14180:                              ; CODE XREF: parse_reg_exp+72↑j
.text:0000000000014180                 mov     rax, [rbx+0A8h]
.text:0000000000014187                 mov     r8, [rsp+88h+var_78]
.text:000000000001418C                 mov     rcx, r14
.text:000000000001418F                 mov     rsi, [rsp+88h+var_60]
.text:0000000000014194                 mov     r9, r13
.text:0000000000014197                 mov     rdx, rbp
.text:000000000001419A                 mov     rdi, r12
.text:000000000001419D                 mov     [rsp+88h+var_70], rax
.text:00000000000141A2                 mov     rax, [rsp+88h+var_68]
.text:00000000000141A7                 mov     [rbx+0A8h], rax
.text:00000000000141AE                 call    parse_branch
.text:00000000000141B3                 mov     rcx, rax
.text:00000000000141B6                 mov     eax, [r13+0]
.text:00000000000141BA                 test    eax, eax
.text:00000000000141BC                 jz      short loc_141C3
.text:00000000000141BE                 test    rcx, rcx
.text:00000000000141C1                 jz      short loc_1422C
.text:00000000000141C3
.text:00000000000141C3 loc_141C3:                              ; CODE XREF: parse_reg_exp+BC↑j
.text:00000000000141C3                 mov     rax, [rsp+88h+var_70]
.text:00000000000141C8                 or      [rbx+0A8h], rax
.text:00000000000141CF
.text:00000000000141CF loc_141CF:                              ; CODE XREF: parse_reg_exp+12A↓j
.text:00000000000141CF                 mov     r8, [rsp+88h+var_80]
.text:00000000000141D4                 lea     rsi, [rbx+80h]
.text:00000000000141DB                 lea     rdi, [rbx+70h]
.text:00000000000141DF                 mov     rdx, r15
.text:00000000000141E2                 mov     [rsp+88h+var_50], 0Ah
.text:00000000000141E7                 call    create_token_tree_isra_16
.text:00000000000141EC                 test    rax, rax
.text:00000000000141EF                 mov     r15, rax
.text:00000000000141F2                 jz      short loc_14270
.text:00000000000141F4
.text:00000000000141F4 loc_141F4:                              ; CODE XREF: parse_reg_exp+66↑j
.text:00000000000141F4                 cmp     byte ptr [rbp+8], 0Ah
.text:00000000000141F8                 jnz     short loc_14248
.text:00000000000141FA                 mov     rdx, r14
.text:00000000000141FD                 mov     rsi, r12
.text:0000000000014200                 mov     rdi, rbp
.text:0000000000014203                 or      rdx, 800000h
.text:000000000001420A                 call    peek_token
.text:000000000001420F                 cdqe
.text:0000000000014211                 add     [r12+48h], rax
.text:0000000000014216                 movzx   eax, byte ptr [rbp+8]
.text:000000000001421A                 mov     edx, eax
.text:000000000001421C                 and     edx, 0FFFFFFF7h
.text:000000000001421F                 cmp     dl, 2
.text:0000000000014222                 jnz     loc_14170
.text:0000000000014228
.text:0000000000014228 loc_14228:                              ; CODE XREF: parse_reg_exp+7A↑j
.text:0000000000014228                 xor     ecx, ecx
.text:000000000001422A                 jmp     short loc_141CF
.text:000000000001422C ; ---------------------------------------------------------------------------
.text:000000000001422C
.text:000000000001422C loc_1422C:                              ; CODE XREF: parse_reg_exp+C1↑j
.text:000000000001422C                 test    r15, r15
.text:000000000001422F                 jz      short loc_14242
.text:0000000000014231                 lea     rsi, free_tree
.text:0000000000014238                 xor     edx, edx
.text:000000000001423A                 mov     rdi, r15
.text:000000000001423D                 call    postorder
.text:0000000000014242
.text:0000000000014242 loc_14242:                              ; CODE XREF: parse_reg_exp+56↑j
.text:0000000000014242                                         ; parse_reg_exp+12F↑j
.text:0000000000014242                 xor     r15d, r15d
.text:0000000000014245                 nop     dword ptr [rax]
.text:0000000000014248
.text:0000000000014248 loc_14248:                              ; CODE XREF: parse_reg_exp+F8↑j
.text:0000000000014248                                         ; parse_reg_exp+178↓j
.text:0000000000014248                 mov     rcx, [rsp+88h+var_40]
.text:000000000001424D                 xor     rcx, fs:28h
.text:0000000000014256                 mov     rax, r15
.text:0000000000014259                 jnz     short loc_1427A
.text:000000000001425B                 add     rsp, 58h
.text:000000000001425F                 pop     rbx
.text:0000000000014260                 pop     rbp
.text:0000000000014261                 pop     r12
.text:0000000000014263                 pop     r13
.text:0000000000014265                 pop     r14
.text:0000000000014267                 pop     r15
.text:0000000000014269                 retn
.text:0000000000014269 ; ---------------------------------------------------------------------------
.text:000000000001426A                 align 10h
.text:0000000000014270
.text:0000000000014270 loc_14270:                              ; CODE XREF: parse_reg_exp+F2↑j
.text:0000000000014270                 mov     dword ptr [r13+0], 0Ch
.text:0000000000014278                 jmp     short loc_14248
.text:000000000001427A ; ---------------------------------------------------------------------------
.text:000000000001427A
.text:000000000001427A loc_1427A:                              ; CODE XREF: parse_reg_exp+159↑j
.text:000000000001427A                 call    ___stack_chk_fail
.text:000000000001427A ; } // starts at 14100
.text:000000000001427A parse_reg_exp   endp
.text:000000000001427A
.text:000000000001427A ; ---------------------------------------------------------------------------
.text:000000000001427F                 align 20h
.text:0000000000014280
.text:0000000000014280 ; =============== S U B R O U T I N E =======================================
.text:0000000000014280
.text:0000000000014280
.text:0000000000014280 re_compile_internal proc near           ; CODE XREF: rpl_re_compile_pattern+35↓p
.text:0000000000014280                                         ; rpl_regcomp+A4↓p
.text:0000000000014280
.text:0000000000014280 size            = qword ptr -158h
.text:0000000000014280 var_150         = qword ptr -150h
.text:0000000000014280 var_148         = qword ptr -148h
.text:0000000000014280 var_140         = qword ptr -140h
.text:0000000000014280 var_138         = qword ptr -138h
.text:0000000000014280 var_130         = qword ptr -130h
.text:0000000000014280 var_128         = qword ptr -128h
.text:0000000000014280 var_120         = qword ptr -120h
.text:0000000000014280 var_10C         = dword ptr -10Ch
.text:0000000000014280 var_108         = dword ptr -108h
.text:0000000000014280 var_F8          = byte ptr -0F8h
.text:0000000000014280 var_F0          = qword ptr -0F0h
.text:0000000000014280 ptr             = qword ptr -0E8h
.text:0000000000014280 var_D8          = qword ptr -0D8h
.text:0000000000014280 var_D0          = qword ptr -0D0h
.text:0000000000014280 var_B0          = qword ptr -0B0h
.text:0000000000014280 var_A8          = qword ptr -0A8h
.text:0000000000014280 var_A0          = qword ptr -0A0h
.text:0000000000014280 var_98          = qword ptr -98h
.text:0000000000014280 var_90          = qword ptr -90h
.text:0000000000014280 var_88          = qword ptr -88h
.text:0000000000014280 var_80          = qword ptr -80h
.text:0000000000014280 var_78          = qword ptr -78h
.text:0000000000014280 var_70          = qword ptr -70h
.text:0000000000014280 var_60          = qword ptr -60h
.text:0000000000014280 var_50          = byte ptr -50h
.text:0000000000014280 var_4F          = byte ptr -4Fh
.text:0000000000014280 var_4E          = byte ptr -4Eh
.text:0000000000014280 var_4D          = byte ptr -4Dh
.text:0000000000014280 var_48          = dword ptr -48h
.text:0000000000014280 var_40          = qword ptr -40h
.text:0000000000014280
.text:0000000000014280 ; __unwind {
.text:0000000000014280                 push    r15
.text:0000000000014282                 push    r14
.text:0000000000014284                 push    r13
.text:0000000000014286                 push    r12
.text:0000000000014288                 push    rbp
.text:0000000000014289                 push    rbx
.text:000000000001428A                 sub     rsp, 128h
.text:0000000000014291                 mov     [rdi+18h], rcx
.text:0000000000014295                 mov     qword ptr [rdi+10h], 0
.text:000000000001429D                 mov     rax, fs:28h
.text:00000000000142A6                 mov     [rsp+158h+var_40], rax
.text:00000000000142AE                 xor     eax, eax
.text:00000000000142B0                 movzx   eax, byte ptr [rdi+38h]
.text:00000000000142B4                 mov     [rsp+158h+var_150], rdi
.text:00000000000142B9                 mov     [rsp+158h+var_148], rsi
.text:00000000000142BE                 mov     [rsp+158h+size], rdx
.text:00000000000142C2                 mov     [rsp+158h+var_140], rcx
.text:00000000000142C7                 mov     [rsp+158h+var_10C], 0
.text:00000000000142CF                 mov     qword ptr [rdi+30h], 0
.text:00000000000142D7                 mov     rbx, [rdi]
.text:00000000000142DA                 mov     byte ptr [rsp+158h+var_138], al
.text:00000000000142DE                 and     eax, 0FFFFFF90h
.text:00000000000142E1                 cmp     qword ptr [rdi+8], 0E7h
.text:00000000000142E9                 mov     [rdi+38h], al
.text:00000000000142EC                 jbe     loc_150E6
.text:00000000000142F2
.text:00000000000142F2 loc_142F2:                              ; CODE XREF: re_compile_internal+E8F↓j
.text:00000000000142F2                 lea     rdi, [rbx+8]
.text:00000000000142F6                 mov     rax, [rsp+158h+var_150]
.text:00000000000142FB                 mov     rcx, rbx
.text:00000000000142FE                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000014302                 sub     rcx, rdi
.text:0000000000014305                 mov     qword ptr [rax+10h], 0E8h
.text:000000000001430D                 xor     eax, eax
.text:000000000001430F                 add     ecx, 0E8h
.text:0000000000014315                 mov     qword ptr [rbx], 0
.text:000000000001431C                 mov     qword ptr [rbx+0E0h], 0
.text:0000000000014327                 shr     ecx, 3
.text:000000000001432A                 rep stosq
.text:000000000001432D                 mov     rax, 555555555555554h
.text:0000000000014337                 mov     dword ptr [rbx+80h], 0Fh
.text:0000000000014341                 cmp     [rsp+158h+size], rax
.text:0000000000014345                 ja      loc_14986
.text:000000000001434B                 mov     r14, [rsp+158h+size]
.text:000000000001434F                 lea     rax, [r14+1]
.text:0000000000014353                 mov     rdi, rax
.text:0000000000014356                 mov     [rbx+8], rax
.text:000000000001435A                 mov     [rsp+158h+var_130], rax
.text:000000000001435F                 shl     rdi, 4          ; size
.text:0000000000014363                 call    _malloc
.text:0000000000014368                 test    r14, r14
.text:000000000001436B                 mov     [rbx], rax
.text:000000000001436E                 jz      loc_15055
.text:0000000000014374                 mov     esi, 1
.text:0000000000014379                 nop     dword ptr [rax+00000000h]
.text:0000000000014380
.text:0000000000014380 loc_14380:                              ; CODE XREF: re_compile_internal+107↓j
.text:0000000000014380                 add     rsi, rsi        ; size
.text:0000000000014383                 cmp     [rsp+158h+size], rsi
.text:0000000000014387                 jnb     short loc_14380
.text:0000000000014389                 lea     rbp, [rsi-1]
.text:000000000001438D
.text:000000000001438D loc_1438D:                              ; CODE XREF: re_compile_internal+DDC↓j
.text:000000000001438D                 mov     edi, 18h        ; nmemb
.text:0000000000014392                 call    _calloc
.text:0000000000014397                 mov     [rbx+88h], rbp
.text:000000000001439E                 mov     [rbx+40h], rax
.text:00000000000143A2                 call    ___ctype_get_mb_cur_max
.text:00000000000143A7                 mov     edi, 0Eh        ; item
.text:00000000000143AC                 mov     [rbx+0B4h], eax
.text:00000000000143B2                 call    _nl_langinfo
.text:00000000000143B7                 movzx   edx, byte ptr [rax]
.text:00000000000143BA                 and     edx, 0FFFFFFDFh
.text:00000000000143BD                 cmp     dl, 55h ; 'U'
.text:00000000000143C0                 jnz     short loc_14410
.text:00000000000143C2                 movzx   edx, byte ptr [rax+1]
.text:00000000000143C6                 and     edx, 0FFFFFFDFh
.text:00000000000143C9                 cmp     dl, 54h ; 'T'
.text:00000000000143CC                 jnz     short loc_14410
.text:00000000000143CE                 movzx   edx, byte ptr [rax+2]
.text:00000000000143D2                 and     edx, 0FFFFFFDFh
.text:00000000000143D5                 cmp     dl, 46h ; 'F'
.text:00000000000143D8                 jnz     short loc_14410
.text:00000000000143DA                 xor     edx, edx
.text:00000000000143DC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000143E0                 lea     rdi, a8         ; "8"
.text:00000000000143E7                 mov     ecx, 2
.text:00000000000143EC                 setz    dl
.text:00000000000143EF                 lea     rsi, [rax+rdx+3]
.text:00000000000143F4                 repe cmpsb
.text:00000000000143F6                 setnbe  al
.text:00000000000143F9                 sbb     al, 0
.text:00000000000143FB                 test    al, al
.text:00000000000143FD                 jnz     short loc_14410
.text:00000000000143FF                 or      byte ptr [rbx+0B0h], 4
.text:0000000000014406                 db      2Eh
.text:0000000000014406                 nop     word ptr [rax+rax+00000000h]
.text:0000000000014410
.text:0000000000014410 loc_14410:                              ; CODE XREF: re_compile_internal+140↑j
.text:0000000000014410                                         ; re_compile_internal+14C↑j ...
.text:0000000000014410                 movzx   eax, byte ptr [rbx+0B0h]
.text:0000000000014417                 mov     edx, eax
.text:0000000000014419                 and     edx, 0FFFFFFF7h
.text:000000000001441C                 cmp     dword ptr [rbx+0B4h], 1
.text:0000000000014423                 mov     [rbx+0B0h], dl
.text:0000000000014429                 jle     short loc_1443E
.text:000000000001442B                 test    al, 4
.text:000000000001442D                 jz      loc_14993
.text:0000000000014433                 lea     rax, utf8_sb_map
.text:000000000001443A                 mov     [rbx+78h], rax
.text:000000000001443E
.text:000000000001443E loc_1443E:                              ; CODE XREF: re_compile_internal+1A9↑j
.text:000000000001443E                                         ; re_compile_internal+793↓j
.text:000000000001443E                 cmp     qword ptr [rbx], 0
.text:0000000000014442                 jz      loc_14986
.text:0000000000014448                 cmp     qword ptr [rbx+40h], 0
.text:000000000001444D                 jz      loc_14986
.text:0000000000014453                 mov     rax, [rsp+158h+var_140]
.text:0000000000014458                 lea     rbp, [rsp+158h+var_D8]
.text:0000000000014460                 mov     ecx, 12h
.text:0000000000014465                 mov     [rsp+158h+var_10C], 0
.text:000000000001446D                 lea     r8, [rbp+8]
.text:0000000000014471                 and     eax, 400000h
.text:0000000000014476                 mov     [rsp+158h+var_138], rax
.text:000000000001447B                 mov     rax, [rsp+158h+var_150]
.text:0000000000014480                 setnz   dl
.text:0000000000014483                 mov     rdi, r8
.text:0000000000014486                 mov     rsi, [rax+28h]
.text:000000000001448A                 xor     eax, eax
.text:000000000001448C                 rep stosq
.text:000000000001448F                 mov     rax, [rsp+158h+var_148]
.text:0000000000014494                 mov     rdi, [rsp+158h+size]
.text:0000000000014498                 test    rsi, rsi
.text:000000000001449B                 mov     [rsp+158h+var_50], dl
.text:00000000000144A2                 mov     ecx, [rbx+0B4h]
.text:00000000000144A8                 setnz   r12b
.text:00000000000144AC                 mov     [rsp+158h+var_60], rsi
.text:00000000000144B4                 mov     [rsp+158h+var_D8], rax
.text:00000000000144BC                 movzx   eax, byte ptr [rbx+0B0h]
.text:00000000000144C3                 or      r12d, edx
.text:00000000000144C6                 mov     [rsp+158h+var_80], rdi
.text:00000000000144CE                 mov     [rsp+158h+var_88], rdi
.text:00000000000144D6                 mov     esi, r12d
.text:00000000000144D9                 mov     [rsp+158h+var_4D], r12b
.text:00000000000144E1                 mov     [rsp+158h+var_48], ecx
.text:00000000000144E8                 mov     [rsp+158h+var_70], rdi
.text:00000000000144F0                 mov     [rsp+158h+var_78], rdi
.text:00000000000144F8                 mov     edx, eax
.text:00000000000144FA                 shr     al, 3
.text:00000000000144FD                 shr     dl, 2
.text:0000000000014500                 and     eax, 1
.text:0000000000014503                 and     edx, 1
.text:0000000000014506                 test    rdi, rdi
.text:0000000000014509                 mov     [rsp+158h+var_4E], al
.text:0000000000014510                 mov     [rsp+158h+var_4F], dl
.text:0000000000014517                 jnz     loc_14955
.text:000000000001451D                 test    sil, sil
.text:0000000000014520                 jz      short loc_1452F
.text:0000000000014522
.text:0000000000014522 loc_14522:                              ; CODE XREF: re_compile_internal+701↓j
.text:0000000000014522                 mov     rax, [rsp+158h+var_D0]
.text:000000000001452A                 mov     [rsp+158h+var_148], rax
.text:000000000001452F
.text:000000000001452F loc_1452F:                              ; CODE XREF: re_compile_internal+2A0↑j
.text:000000000001452F                                         ; re_compile_internal+6FB↓j
.text:000000000001452F                 cmp     [rsp+158h+var_138], 0
.text:0000000000014535                 mov     rax, [rsp+158h+var_148]
.text:000000000001453A                 mov     [rsp+158h+var_D0], rax
.text:0000000000014542                 jz      loc_14645
.text:0000000000014548                 cmp     ecx, 1
.text:000000000001454B                 jle     loc_1513D
.text:0000000000014551
.text:0000000000014551 loc_14551:                              ; CODE XREF: re_compile_internal+31C↓j
.text:0000000000014551                 mov     rdi, rbp
.text:0000000000014554                 call    build_wcs_upper_buffer
.text:0000000000014559                 test    eax, eax
.text:000000000001455B                 jnz     short loc_145A0
.text:000000000001455D                 mov     rax, [rsp+158h+size]
.text:0000000000014561                 cmp     rax, [rsp+158h+var_A0]
.text:0000000000014569                 jle     loc_15120
.text:000000000001456F                 movsxd  rax, dword ptr [rbx+0B4h]
.text:0000000000014576                 mov     rsi, [rsp+158h+var_98]
.text:000000000001457E                 add     rax, [rsp+158h+var_A8]
.text:0000000000014586                 cmp     rsi, rax
.text:0000000000014589                 jg      loc_15120
.text:000000000001458F                 add     rsi, rsi
.text:0000000000014592                 mov     rdi, rbp
.text:0000000000014595                 call    re_string_realloc_buffers
.text:000000000001459A                 test    eax, eax
.text:000000000001459C                 jz      short loc_14551
.text:000000000001459E                 xchg    ax, ax
.text:00000000000145A0
.text:00000000000145A0 loc_145A0:                              ; CODE XREF: re_compile_internal+2DB↑j
.text:00000000000145A0                                         ; re_compile_internal+674↓j ...
.text:00000000000145A0                 mov     [rsp+158h+var_10C], eax
.text:00000000000145A4                 mov     rax, [rsp+158h+var_150]
.text:00000000000145A9                 mov     r13, [rax]
.text:00000000000145AC
.text:00000000000145AC loc_145AC:                              ; CODE XREF: re_compile_internal+D75↓j
.text:00000000000145AC                                         ; re_compile_internal+EE2↓j ...
.text:00000000000145AC                 mov     rdi, [r13+70h]  ; ptr
.text:00000000000145B0                 test    rdi, rdi
.text:00000000000145B3                 jz      short loc_145C8
.text:00000000000145B5                 nop     dword ptr [rax]
.text:00000000000145B8
.text:00000000000145B8 loc_145B8:                              ; CODE XREF: re_compile_internal+346↓j
.text:00000000000145B8                 mov     r12, [rdi]
.text:00000000000145BB                 call    _free
.text:00000000000145C0                 test    r12, r12
.text:00000000000145C3                 mov     rdi, r12
.text:00000000000145C6                 jnz     short loc_145B8
.text:00000000000145C8
.text:00000000000145C8 loc_145C8:                              ; CODE XREF: re_compile_internal+333↑j
.text:00000000000145C8                 mov     rdi, [r13+20h]  ; ptr
.text:00000000000145CC                 mov     qword ptr [r13+70h], 0
.text:00000000000145D4                 mov     dword ptr [r13+80h], 0Fh
.text:00000000000145DF                 mov     qword ptr [r13+68h], 0
.text:00000000000145E7                 call    _free
.text:00000000000145EC                 mov     qword ptr [r13+20h], 0
.text:00000000000145F4                 mov     rdi, rbp
.text:00000000000145F7                 call    re_string_destruct
.text:00000000000145FC
.text:00000000000145FC loc_145FC:                              ; CODE XREF: re_compile_internal+70E↓j
.text:00000000000145FC                                         ; re_compile_internal+D68↓j
.text:00000000000145FC                 mov     rdi, rbx        ; ptr
.text:00000000000145FF                 call    free_dfa_content
.text:0000000000014604                 mov     rax, [rsp+158h+var_150]
.text:0000000000014609                 mov     qword ptr [rax], 0
.text:0000000000014610                 mov     qword ptr [rax+8], 0
.text:0000000000014618                 mov     eax, [rsp+158h+var_10C]
.text:000000000001461C
.text:000000000001461C loc_1461C:                              ; CODE XREF: re_compile_internal+D62↓j
.text:000000000001461C                                         ; re_compile_internal+1016↓j
.text:000000000001461C                 mov     rbx, [rsp+158h+var_40]
.text:0000000000014624                 xor     rbx, fs:28h
.text:000000000001462D                 jnz     loc_15370
.text:0000000000014633                 add     rsp, 128h
.text:000000000001463A                 pop     rbx
.text:000000000001463B                 pop     rbp
.text:000000000001463C                 pop     r12
.text:000000000001463E                 pop     r13
.text:0000000000014640                 pop     r14
.text:0000000000014642                 pop     r15
.text:0000000000014644                 retn
.text:0000000000014645 ; ---------------------------------------------------------------------------
.text:0000000000014645
.text:0000000000014645 loc_14645:                              ; CODE XREF: re_compile_internal+2C2↑j
.text:0000000000014645                 cmp     ecx, 1
.text:0000000000014648                 jg      loc_14FFA
.text:000000000001464E                 test    r12b, r12b
.text:0000000000014651                 mov     rsi, [rsp+158h+var_98]
.text:0000000000014659                 jz      loc_14C74
.text:000000000001465F                 cmp     [rsp+158h+var_80], rsi
.text:0000000000014667                 mov     rax, [rsp+158h+var_A8]
.text:000000000001466F                 cmovle  rsi, [rsp+158h+var_80]
.text:0000000000014678                 cmp     rsi, rax
.text:000000000001467B                 jg      short loc_1468D
.text:000000000001467D                 jmp     short loc_146C0
.text:000000000001467D ; ---------------------------------------------------------------------------
.text:000000000001467F                 align 20h
.text:0000000000014680
.text:0000000000014680 loc_14680:                              ; CODE XREF: re_compile_internal+43E↓j
.text:0000000000014680                 mov     rdx, [rsp+158h+var_D0]
.text:0000000000014688                 mov     [rsp+158h+var_148], rdx
.text:000000000001468D
.text:000000000001468D loc_1468D:                              ; CODE XREF: re_compile_internal+3FB↑j
.text:000000000001468D                 mov     rdx, [rsp+158h+var_D8]
.text:0000000000014695                 mov     rcx, [rsp+158h+var_60]
.text:000000000001469D                 add     rdx, rax
.text:00000000000146A0                 add     rdx, [rsp+158h+var_B0]
.text:00000000000146A8                 movzx   edx, byte ptr [rdx]
.text:00000000000146AB                 movzx   edx, byte ptr [rcx+rdx]
.text:00000000000146AF                 mov     rcx, [rsp+158h+var_148]
.text:00000000000146B4                 mov     [rcx+rax], dl
.text:00000000000146B7                 add     rax, 1
.text:00000000000146BB                 cmp     rsi, rax
.text:00000000000146BE                 jnz     short loc_14680
.text:00000000000146C0
.text:00000000000146C0 loc_146C0:                              ; CODE XREF: re_compile_internal+3FD↑j
.text:00000000000146C0                 mov     [rsp+158h+var_A8], rax
.text:00000000000146C8                 mov     [rsp+158h+var_A0], rax
.text:00000000000146D0                 mov     [rsp+158h+var_10C], 0
.text:00000000000146D8
.text:00000000000146D8 loc_146D8:                              ; CODE XREF: re_compile_internal+A0C↓j
.text:00000000000146D8                                         ; re_compile_internal+D8A↓j ...
.text:00000000000146D8                 mov     r12, [rsp+158h+var_150]
.text:00000000000146DD                 mov     r14, [rsp+158h+var_140]
.text:00000000000146E2                 lea     r13, [rsp+158h+var_108]
.text:00000000000146E7                 mov     rsi, rbp
.text:00000000000146EA                 mov     rdi, r13
.text:00000000000146ED                 mov     [rsp+158h+var_130], r13
.text:00000000000146F2                 mov     r15, [r12]
.text:00000000000146F6                 mov     rdx, r14
.text:00000000000146F9                 mov     qword ptr [r12+30h], 0
.text:0000000000014702                 or      rdx, 800000h
.text:0000000000014709                 mov     [r15+0D8h], r14
.text:0000000000014710                 call    peek_token
.text:0000000000014715                 lea     r9, [rsp+158h+var_10C]
.text:000000000001471A                 xor     r8d, r8d
.text:000000000001471D                 mov     rcx, r14
.text:0000000000014720                 mov     rdx, r13
.text:0000000000014723                 mov     rsi, r12
.text:0000000000014726                 mov     rdi, rbp
.text:0000000000014729                 cdqe
.text:000000000001472B                 add     [rsp+158h+var_90], rax
.text:0000000000014733                 call    parse_reg_exp
.text:0000000000014738                 mov     ecx, [rsp+158h+var_10C]
.text:000000000001473C                 test    ecx, ecx
.text:000000000001473E                 jnz     loc_15167
.text:0000000000014744                 lea     r13, [r15+70h]
.text:0000000000014748                 lea     r12, [rsp+158h+var_F8]
.text:000000000001474D                 sub     r15, 0FFFFFFFFFFFFFF80h
.text:0000000000014751                 xor     edx, edx
.text:0000000000014753                 xor     ecx, ecx
.text:0000000000014755                 mov     rsi, r15
.text:0000000000014758                 mov     r8, r12
.text:000000000001475B                 mov     rdi, r13
.text:000000000001475E                 mov     [rsp+158h+size], rax
.text:0000000000014762                 mov     byte ptr [rsp+158h+var_F0], 2
.text:0000000000014767                 call    create_token_tree_isra_16
.text:000000000001476C                 mov     r9, [rsp+158h+size]
.text:0000000000014770                 mov     r11, rax
.text:0000000000014773                 mov     rdx, rax
.text:0000000000014776                 test    r9, r9
.text:0000000000014779                 jz      short loc_147A2
.text:000000000001477B
.text:000000000001477B loc_1477B:                              ; CODE XREF: re_compile_internal+F1F↓j
.text:000000000001477B                 mov     rcx, r11
.text:000000000001477E                 mov     rdx, r9
.text:0000000000014781                 mov     r8, r12
.text:0000000000014784                 mov     rsi, r15
.text:0000000000014787                 mov     rdi, r13
.text:000000000001478A                 mov     [rsp+158h+size], r11
.text:000000000001478E                 mov     byte ptr [rsp+158h+var_F0], 10h
.text:0000000000014793                 call    create_token_tree_isra_16
.text:0000000000014798                 mov     r11, [rsp+158h+size]
.text:000000000001479C                 mov     rdx, r11
.text:000000000001479F                 mov     r11, rax
.text:00000000000147A2
.text:00000000000147A2 loc_147A2:                              ; CODE XREF: re_compile_internal+4F9↑j
.text:00000000000147A2                 test    rdx, rdx
.text:00000000000147A5                 mov     rcx, [rsp+158h+var_150]
.text:00000000000147AA                 setz    dl
.text:00000000000147AD                 test    r11, r11
.text:00000000000147B0                 setz    al
.text:00000000000147B3                 or      dl, al
.text:00000000000147B5                 mov     r13, [rcx]
.text:00000000000147B8                 jnz     loc_15152
.text:00000000000147BE                 mov     r15, [r13+8]
.text:00000000000147C2                 mov     [rbx+68h], r11
.text:00000000000147C6                 lea     rcx, ds:0[r15*8]
.text:00000000000147CE                 lea     r15, [r15+r15*2]
.text:00000000000147D2                 mov     rdi, rcx        ; size
.text:00000000000147D5                 mov     [rsp+158h+size], rcx
.text:00000000000147D9                 shl     r15, 3
.text:00000000000147DD                 call    _malloc
.text:00000000000147E2                 mov     rcx, [rsp+158h+size]
.text:00000000000147E6                 mov     [r13+18h], rax
.text:00000000000147EA                 mov     [rsp+158h+var_140], rax
.text:00000000000147EF                 mov     rdi, rcx        ; size
.text:00000000000147F2                 call    _malloc
.text:00000000000147F7                 mov     rdi, r15        ; size
.text:00000000000147FA                 mov     [r13+20h], rax
.text:00000000000147FE                 mov     [rsp+158h+var_148], rax
.text:0000000000014803                 call    _malloc
.text:0000000000014808                 mov     rdi, r15        ; size
.text:000000000001480B                 mov     [r13+28h], rax
.text:000000000001480F                 mov     [rsp+158h+size], rax
.text:0000000000014813                 call    _malloc
.text:0000000000014818                 mov     rdx, [rsp+158h+var_140]
.text:000000000001481D                 mov     [r13+30h], rax
.text:0000000000014821                 mov     rsi, [rsp+158h+size]
.text:0000000000014825                 mov     rcx, [rsp+158h+var_148]
.text:000000000001482A                 test    rdx, rdx
.text:000000000001482D                 jz      loc_14FED
.text:0000000000014833                 test    rcx, rcx
.text:0000000000014836                 jz      loc_14FED
.text:000000000001483C                 test    rsi, rsi
.text:000000000001483F                 jz      loc_14FED
.text:0000000000014845                 test    rax, rax
.text:0000000000014848                 jz      loc_14FED
.text:000000000001484E                 mov     rax, [rsp+158h+var_150]
.text:0000000000014853                 mov     r15, [rax+30h]
.text:0000000000014857                 lea     rdi, ds:0[r15*8] ; size
.text:000000000001485F                 call    _malloc
.text:0000000000014864                 test    rax, rax
.text:0000000000014867                 mov     [r13+0E0h], rax
.text:000000000001486E                 jz      short loc_148DD
.text:0000000000014870                 test    r15, r15
.text:0000000000014873                 jz      short loc_1488D
.text:0000000000014875                 xor     edx, edx
.text:0000000000014877                 nop     word ptr [rax+rax+00000000h]
.text:0000000000014880
.text:0000000000014880 loc_14880:                              ; CODE XREF: re_compile_internal+60B↓j
.text:0000000000014880                 mov     [rax+rdx*8], rdx
.text:0000000000014884                 add     rdx, 1
.text:0000000000014888                 cmp     rdx, r15
.text:000000000001488B                 jnz     short loc_14880
.text:000000000001488D
.text:000000000001488D loc_1488D:                              ; CODE XREF: re_compile_internal+5F3↑j
.text:000000000001488D                 mov     rdi, [r13+68h]
.text:0000000000014891                 lea     rsi, optimize_subexps
.text:0000000000014898                 mov     rdx, r13
.text:000000000001489B                 call    preorder
.text:00000000000148A0                 mov     rax, [rsp+158h+var_150]
.text:00000000000148A5                 mov     rdi, [r13+0E0h] ; ptr
.text:00000000000148AC                 mov     rdx, [rax+30h]
.text:00000000000148B0                 test    rdx, rdx
.text:00000000000148B3                 jz      loc_151A4
.text:00000000000148B9                 mov     rax, [rdi]
.text:00000000000148BC                 test    rax, rax
.text:00000000000148BF                 jz      short loc_148CE
.text:00000000000148C1                 jmp     short loc_148DD
.text:00000000000148C1 ; ---------------------------------------------------------------------------
.text:00000000000148C3                 align 8
.text:00000000000148C8
.text:00000000000148C8 loc_148C8:                              ; CODE XREF: re_compile_internal+655↓j
.text:00000000000148C8                 cmp     [rdi+rax*8], rax
.text:00000000000148CC                 jnz     short loc_148DD
.text:00000000000148CE
.text:00000000000148CE loc_148CE:                              ; CODE XREF: re_compile_internal+63F↑j
.text:00000000000148CE                 add     rax, 1
.text:00000000000148D2                 cmp     rdx, rax
.text:00000000000148D5                 ja      short loc_148C8
.text:00000000000148D7                 jz      loc_151A4
.text:00000000000148DD
.text:00000000000148DD loc_148DD:                              ; CODE XREF: re_compile_internal+5EE↑j
.text:00000000000148DD                                         ; re_compile_internal+641↑j ...
.text:00000000000148DD                 mov     rdi, [r13+68h]
.text:00000000000148E1                 mov     rdx, [rsp+158h+var_150]
.text:00000000000148E6                 lea     rsi, lower_subexps
.text:00000000000148ED                 call    postorder
.text:00000000000148F2                 test    eax, eax
.text:00000000000148F4                 jnz     loc_145A0
.text:00000000000148FA                 mov     rdi, [r13+68h]
.text:00000000000148FE                 lea     rsi, calc_first
.text:0000000000014905                 mov     rdx, r13
.text:0000000000014908                 call    postorder
.text:000000000001490D                 test    eax, eax
.text:000000000001490F                 jnz     loc_145A0
.text:0000000000014915                 mov     rdi, [r13+68h]
.text:0000000000014919                 lea     rsi, calc_next
.text:0000000000014920                 mov     rdx, r13
.text:0000000000014923                 call    preorder
.text:0000000000014928                 mov     rdx, [r13+68h]
.text:000000000001492C                 lea     rsi, jpt_14953
.text:0000000000014933                 nop     dword ptr [rax+rax+00h]
.text:0000000000014938
.text:0000000000014938 loc_14938:                              ; CODE XREF: re_compile_internal+7BF↓j
.text:0000000000014938                 movzx   ecx, byte ptr [rdx+30h]
.text:000000000001493C                 mov     rdi, [rdx+38h]
.text:0000000000014940                 cmp     cl, 10h         ; switch 17 cases
.text:0000000000014943                 ja      def_14953       ; jumptable 0000000000014953 default case, cases 0,1,3,5-7,13-15
.text:0000000000014949                 movzx   eax, cl
.text:000000000001494C                 movsxd  rax, ds:(jpt_14953 - 17B48h)[rsi+rax*4]
.text:0000000000014950                 add     rax, rsi
.text:0000000000014953                 jmp     rax             ; switch jump
.text:0000000000014955 ; ---------------------------------------------------------------------------
.text:0000000000014955
.text:0000000000014955 loc_14955:                              ; CODE XREF: re_compile_internal+297↑j
.text:0000000000014955                 mov     rsi, [rsp+158h+var_130]
.text:000000000001495A                 mov     rdi, rbp
.text:000000000001495D                 call    re_string_realloc_buffers
.text:0000000000014962                 test    eax, eax
.text:0000000000014964                 jnz     loc_145A0
.text:000000000001496A                 movzx   esi, [rsp+158h+var_4D]
.text:0000000000014972                 mov     ecx, [rbx+0B4h]
.text:0000000000014978                 test    sil, sil
.text:000000000001497B                 jz      loc_1452F
.text:0000000000014981                 jmp     loc_14522
.text:0000000000014986 ; ---------------------------------------------------------------------------
.text:0000000000014986
.text:0000000000014986 loc_14986:                              ; CODE XREF: re_compile_internal+C5↑j
.text:0000000000014986                                         ; re_compile_internal+1C2↑j ...
.text:0000000000014986                 mov     [rsp+158h+var_10C], 0Ch
.text:000000000001498E                 jmp     loc_145FC
.text:0000000000014993 ; ---------------------------------------------------------------------------
.text:0000000000014993
.text:0000000000014993 loc_14993:                              ; CODE XREF: re_compile_internal+1AD↑j
.text:0000000000014993                 mov     esi, 1          ; size
.text:0000000000014998                 mov     edi, 20h ; ' '  ; nmemb
.text:000000000001499D                 call    _calloc
.text:00000000000149A2                 test    rax, rax
.text:00000000000149A5                 mov     [rbx+78h], rax
.text:00000000000149A9                 jz      short loc_14986
.text:00000000000149AB                 xor     r12d, r12d
.text:00000000000149AE                 xor     ebp, ebp
.text:00000000000149B0                 mov     r13d, 1
.text:00000000000149B6
.text:00000000000149B6 loc_149B6:                              ; CODE XREF: re_compile_internal+791↓j
.text:00000000000149B6                 xor     r15d, r15d
.text:00000000000149B9                 nop     dword ptr [rax+00000000h]
.text:00000000000149C0
.text:00000000000149C0 loc_149C0:                              ; CODE XREF: re_compile_internal+782↓j
.text:00000000000149C0                 lea     r14d, [rbp+r15+0]
.text:00000000000149C5                 mov     edi, r14d       ; c
.text:00000000000149C8                 call    _btowc
.text:00000000000149CD                 cmp     eax, 0FFFFFFFFh
.text:00000000000149D0                 jz      short loc_149E5
.text:00000000000149D2                 mov     rsi, [rbx+78h]
.text:00000000000149D6                 mov     rdi, r13
.text:00000000000149D9                 mov     ecx, r15d
.text:00000000000149DC                 shl     rdi, cl
.text:00000000000149DF                 add     rsi, r12
.text:00000000000149E2                 or      [rsi], rdi
.text:00000000000149E5
.text:00000000000149E5 loc_149E5:                              ; CODE XREF: re_compile_internal+750↑j
.text:00000000000149E5                 test    r14d, 0FFFFFF80h
.text:00000000000149EC                 jnz     short loc_149FA
.text:00000000000149EE                 cmp     eax, r14d
.text:00000000000149F1                 jz      short loc_149FA
.text:00000000000149F3                 or      byte ptr [rbx+0B0h], 8
.text:00000000000149FA
.text:00000000000149FA loc_149FA:                              ; CODE XREF: re_compile_internal+76C↑j
.text:00000000000149FA                                         ; re_compile_internal+771↑j
.text:00000000000149FA                 add     r15, 1
.text:00000000000149FE                 cmp     r15, 40h ; '@'
.text:0000000000014A02                 jnz     short loc_149C0
.text:0000000000014A04                 add     ebp, 40h ; '@'
.text:0000000000014A07                 add     r12, 8
.text:0000000000014A0B                 cmp     ebp, 100h
.text:0000000000014A11                 jnz     short loc_149B6
.text:0000000000014A13                 jmp     loc_1443E
.text:0000000000014A18 ; ---------------------------------------------------------------------------
.text:0000000000014A18
.text:0000000000014A18 def_14953:                              ; CODE XREF: re_compile_internal+6C3↑j
.text:0000000000014A18                                         ; re_compile_internal+6D3↑j
.text:0000000000014A18                                         ; DATA XREF: ...
.text:0000000000014A18                 and     ecx, 8          ; jumptable 0000000000014953 default case, cases 0,1,3,5-7,13-15
.text:0000000000014A1B                 jnz     loc_15332
.text:0000000000014A21                 mov     rax, [rdx+20h]
.text:0000000000014A25                 mov     rcx, [rax+38h]
.text:0000000000014A29                 mov     rax, [r13+18h]
.text:0000000000014A2D                 mov     [rax+rdi*8], rcx
.text:0000000000014A31
.text:0000000000014A31 loc_14A31:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000014A31                                         ; re_compile_internal+955↓j ...
.text:0000000000014A31                 mov     r15, [rdx+8]    ; jumptable 0000000000014953 case 16
.text:0000000000014A35
.text:0000000000014A35 loc_14A35:                              ; CODE XREF: re_compile_internal+8F3↓j
.text:0000000000014A35                                         ; re_compile_internal+94B↓j ...
.text:0000000000014A35                 xor     edi, edi
.text:0000000000014A37                 test    r15, r15
.text:0000000000014A3A                 jz      short loc_14A4B
.text:0000000000014A3C
.text:0000000000014A3C loc_14A3C:                              ; CODE XREF: re_compile_internal+7E1↓j
.text:0000000000014A3C                 mov     rdx, r15
.text:0000000000014A3F                 jmp     loc_14938
.text:0000000000014A3F ; ---------------------------------------------------------------------------
.text:0000000000014A44                 align 8
.text:0000000000014A48
.text:0000000000014A48 loc_14A48:                              ; CODE XREF: re_compile_internal+7EC↓j
.text:0000000000014A48                 mov     rdx, rax
.text:0000000000014A4B
.text:0000000000014A4B loc_14A4B:                              ; CODE XREF: re_compile_internal+7BA↑j
.text:0000000000014A4B                 mov     r15, [rdx+10h]
.text:0000000000014A4F                 test    r15, r15
.text:0000000000014A52                 setz    cl
.text:0000000000014A55                 cmp     r15, rdi
.text:0000000000014A58                 setz    al
.text:0000000000014A5B                 or      cl, al
.text:0000000000014A5D                 mov     byte ptr [rsp+158h+var_148], cl
.text:0000000000014A61                 jz      short loc_14A3C
.text:0000000000014A63                 mov     rax, [rdx]
.text:0000000000014A66                 mov     rdi, rdx
.text:0000000000014A69                 test    rax, rax
.text:0000000000014A6C                 jnz     short loc_14A48
.text:0000000000014A6E                 xor     r14d, r14d
.text:0000000000014A71                 xor     r15d, r15d
.text:0000000000014A74                 nop     dword ptr [rax+00h]
.text:0000000000014A78
.text:0000000000014A78 loc_14A78:                              ; CODE XREF: re_compile_internal+A49↓j
.text:0000000000014A78                 mov     rdx, [r13+10h]
.text:0000000000014A7C                 cmp     rdx, r15
.text:0000000000014A7F                 jz      short loc_14AA6
.text:0000000000014A81
.text:0000000000014A81 loc_14A81:                              ; CODE XREF: re_compile_internal+824↓j
.text:0000000000014A81                                         ; re_compile_internal+835↓j ...
.text:0000000000014A81                 lea     r10, [r15+r15*2]
.text:0000000000014A85                 mov     rax, [r13+30h]
.text:0000000000014A89                 shl     r10, 3
.text:0000000000014A8D                 cmp     qword ptr [rax+r10+8], 0
.text:0000000000014A93                 jz      loc_14C98
.text:0000000000014A99                 mov     rdx, [r13+10h]
.text:0000000000014A9D                 add     r15, 1
.text:0000000000014AA1                 cmp     rdx, r15
.text:0000000000014AA4                 jnz     short loc_14A81
.text:0000000000014AA6
.text:0000000000014AA6 loc_14AA6:                              ; CODE XREF: re_compile_internal+7FF↑j
.text:0000000000014AA6                 test    r14b, r14b
.text:0000000000014AA9                 jz      loc_14CEE
.text:0000000000014AAF
.text:0000000000014AAF loc_14AAF:                              ; CODE XREF: re_compile_internal+A5D↓j
.text:0000000000014AAF                 xor     r14d, r14d
.text:0000000000014AB2                 xor     r15d, r15d
.text:0000000000014AB5                 jmp     short loc_14A81
.text:0000000000014AB7 ; ---------------------------------------------------------------------------
.text:0000000000014AB7
.text:0000000000014AB7 loc_14AB7:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000014AB7                                         ; DATA XREF: .rodata:jpt_14953↓o
.text:0000000000014AB7                 or      byte ptr [r13+0B0h], 1 ; jumptable 0000000000014953 cases 10,11
.text:0000000000014ABF                 mov     r15, [rdx+8]
.text:0000000000014AC3                 test    r15, r15
.text:0000000000014AC6                 jz      loc_150D9
.text:0000000000014ACC                 mov     rax, [r15+18h]
.text:0000000000014AD0                 mov     rcx, [rax+38h]
.text:0000000000014AD4
.text:0000000000014AD4 loc_14AD4:                              ; CODE XREF: re_compile_internal+E61↓j
.text:0000000000014AD4                 mov     rax, [rdx+10h]
.text:0000000000014AD8                 test    rax, rax
.text:0000000000014ADB                 jz      loc_150CC
.text:0000000000014AE1                 mov     rax, [rax+18h]
.text:0000000000014AE5                 mov     r9, [rax+38h]
.text:0000000000014AE9
.text:0000000000014AE9 loc_14AE9:                              ; CODE XREF: re_compile_internal+E54↓j
.text:0000000000014AE9                 test    rcx, rcx
.text:0000000000014AEC                 js      loc_15351
.text:0000000000014AF2                 test    r9, r9
.text:0000000000014AF5                 js      loc_15313
.text:0000000000014AFB                 mov     rax, [r13+28h]
.text:0000000000014AFF                 lea     rdi, [rdi+rdi*2]
.text:0000000000014B03                 mov     [rsp+158h+var_120], rsi
.text:0000000000014B08                 mov     [rsp+158h+var_128], r9
.text:0000000000014B0D                 mov     [rsp+158h+var_140], rcx
.text:0000000000014B12                 mov     [rsp+158h+var_148], rdx
.text:0000000000014B17                 lea     r10, [rax+rdi*8]
.text:0000000000014B1B                 mov     edi, 10h        ; size
.text:0000000000014B20                 mov     qword ptr [r10], 2
.text:0000000000014B27                 mov     [rsp+158h+size], r10
.text:0000000000014B2B                 call    _malloc
.text:0000000000014B30                 mov     r10, [rsp+158h+size]
.text:0000000000014B34                 test    rax, rax
.text:0000000000014B37                 mov     rdx, [rsp+158h+var_148]
.text:0000000000014B3C                 mov     rcx, [rsp+158h+var_140]
.text:0000000000014B41                 mov     r9, [rsp+158h+var_128]
.text:0000000000014B46                 mov     rsi, [rsp+158h+var_120]
.text:0000000000014B4B                 mov     [r10+10h], rax
.text:0000000000014B4F                 jz      loc_14DEA
.text:0000000000014B55                 cmp     rcx, r9
.text:0000000000014B58                 jz      loc_1512D
.text:0000000000014B5E                 mov     qword ptr [r10+8], 2
.text:0000000000014B66                 jl      loc_15114
.text:0000000000014B6C                 mov     [rax], r9
.text:0000000000014B6F                 mov     [rax+8], rcx
.text:0000000000014B73                 jmp     loc_14A35
.text:0000000000014B78 ; ---------------------------------------------------------------------------
.text:0000000000014B78
.text:0000000000014B78 loc_14B78:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000014B78                                         ; DATA XREF: .rodata:jpt_14953↓o
.text:0000000000014B78                 mov     rax, [rdx+20h]  ; jumptable 0000000000014953 cases 8,9,12
.text:0000000000014B7C                 lea     rcx, [rdi+rdi*2]
.text:0000000000014B80                 mov     edi, 8          ; size
.text:0000000000014B85                 mov     [rsp+158h+var_148], rsi
.text:0000000000014B8A                 mov     [rsp+158h+size], rdx
.text:0000000000014B8E                 mov     r14, [rax+38h]
.text:0000000000014B92                 mov     rax, [r13+28h]
.text:0000000000014B96                 lea     r15, [rax+rcx*8]
.text:0000000000014B9A                 mov     qword ptr [r15], 1
.text:0000000000014BA1                 mov     qword ptr [r15+8], 1
.text:0000000000014BA9                 call    _malloc
.text:0000000000014BAE                 test    rax, rax
.text:0000000000014BB1                 mov     [r15+10h], rax
.text:0000000000014BB5                 mov     rdx, [rsp+158h+size]
.text:0000000000014BB9                 mov     rsi, [rsp+158h+var_148]
.text:0000000000014BBE                 jz      loc_15268
.text:0000000000014BC4                 mov     [rax], r14
.text:0000000000014BC7                 mov     r15, [rdx+8]
.text:0000000000014BCB                 jmp     loc_14A35
.text:0000000000014BD0 ; ---------------------------------------------------------------------------
.text:0000000000014BD0
.text:0000000000014BD0 loc_14BD0:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000014BD0                                         ; DATA XREF: .rodata:jpt_14953↓o
.text:0000000000014BD0                 cmp     qword ptr [rdx+20h], 0 ; jumptable 0000000000014953 case 2
.text:0000000000014BD5                 jz      loc_14A31       ; jumptable 0000000000014953 case 16
.text:0000000000014BDB                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000014BE2                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000014BE9                 lea     rdi, aNodeNextNull ; "node->next == NULL"
.text:0000000000014BF0                 mov     edx, 59Fh       ; line
.text:0000000000014BF5                 call    ___assert_fail
.text:0000000000014BF5 ; ---------------------------------------------------------------------------
.text:0000000000014BFA                 align 20h
.text:0000000000014C00
.text:0000000000014C00 loc_14C00:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000014C00                                         ; DATA XREF: .rodata:jpt_14953↓o
.text:0000000000014C00                 mov     rax, [rdx+20h]  ; jumptable 0000000000014953 case 4
.text:0000000000014C04                 mov     r15, [rax+38h]
.text:0000000000014C08                 mov     rax, [r13+18h]
.text:0000000000014C0C                 mov     [rax+rdi*8], r15
.text:0000000000014C10                 cmp     byte ptr [rdx+30h], 4
.text:0000000000014C14                 jnz     loc_14A31       ; jumptable 0000000000014953 case 16
.text:0000000000014C1A                 mov     rax, [r13+28h]
.text:0000000000014C1E                 lea     rcx, [rdi+rdi*2]
.text:0000000000014C22                 mov     edi, 8          ; size
.text:0000000000014C27                 mov     [rsp+158h+var_140], rsi
.text:0000000000014C2C                 mov     [rsp+158h+var_148], rdx
.text:0000000000014C31                 lea     rcx, [rax+rcx*8]
.text:0000000000014C35                 mov     qword ptr [rcx], 1
.text:0000000000014C3C                 mov     qword ptr [rcx+8], 1
.text:0000000000014C44                 mov     [rsp+158h+size], rcx
.text:0000000000014C48                 call    _malloc
.text:0000000000014C4D                 mov     rcx, [rsp+158h+size]
.text:0000000000014C51                 test    rax, rax
.text:0000000000014C54                 mov     rdx, [rsp+158h+var_148]
.text:0000000000014C59                 mov     rsi, [rsp+158h+var_140]
.text:0000000000014C5E                 mov     [rcx+10h], rax
.text:0000000000014C62                 jz      loc_152B0
.text:0000000000014C68                 mov     [rax], r15
.text:0000000000014C6B                 mov     r15, [rdx+8]
.text:0000000000014C6F                 jmp     loc_14A35
.text:0000000000014C74 ; ---------------------------------------------------------------------------
.text:0000000000014C74
.text:0000000000014C74 loc_14C74:                              ; CODE XREF: re_compile_internal+3D9↑j
.text:0000000000014C74                 mov     [rsp+158h+var_A8], rsi
.text:0000000000014C7C                 mov     [rsp+158h+var_A0], rsi
.text:0000000000014C84                 mov     [rsp+158h+var_10C], 0
.text:0000000000014C8C                 jmp     loc_146D8
.text:0000000000014C8C ; ---------------------------------------------------------------------------
.text:0000000000014C91                 align 8
.text:0000000000014C98
.text:0000000000014C98 loc_14C98:                              ; CODE XREF: re_compile_internal+813↑j
.text:0000000000014C98                 mov     ecx, 1
.text:0000000000014C9D                 mov     rdx, r15
.text:0000000000014CA0                 mov     rsi, r13
.text:0000000000014CA3                 mov     rdi, r12
.text:0000000000014CA6                 mov     [rsp+158h+size], r10
.text:0000000000014CAA                 call    calc_eclosure_iter
.text:0000000000014CAF                 test    eax, eax
.text:0000000000014CB1                 jnz     loc_145A0
.text:0000000000014CB7                 mov     rax, [r13+30h]
.text:0000000000014CBB                 mov     r10, [rsp+158h+size]
.text:0000000000014CBF                 add     r15, 1
.text:0000000000014CC3                 cmp     qword ptr [rax+r10+8], 0
.text:0000000000014CC9                 jnz     loc_14A78
.text:0000000000014CCF                 mov     rdi, [rsp+158h+ptr] ; ptr
.text:0000000000014CD4                 call    _free
.text:0000000000014CD9                 cmp     [r13+10h], r15
.text:0000000000014CDD                 jz      loc_14AAF
.text:0000000000014CE3                 movzx   r14d, byte ptr [rsp+158h+var_148]
.text:0000000000014CE9                 jmp     loc_14A81
.text:0000000000014CEE ; ---------------------------------------------------------------------------
.text:0000000000014CEE
.text:0000000000014CEE loc_14CEE:                              ; CODE XREF: re_compile_internal+829↑j
.text:0000000000014CEE                 mov     rax, [rsp+158h+var_150]
.text:0000000000014CF3                 test    byte ptr [rax+38h], 10h
.text:0000000000014CF7                 jnz     short loc_14D0A
.text:0000000000014CF9                 cmp     qword ptr [rax+30h], 0
.text:0000000000014CFE                 jz      short loc_14D0A
.text:0000000000014D00                 test    byte ptr [r13+0B0h], 1
.text:0000000000014D08                 jnz     short loc_14D18
.text:0000000000014D0A
.text:0000000000014D0A loc_14D0A:                              ; CODE XREF: re_compile_internal+A77↑j
.text:0000000000014D0A                                         ; re_compile_internal+A7E↑j
.text:0000000000014D0A                 cmp     qword ptr [r13+98h], 0
.text:0000000000014D12                 jz      loc_14E0B
.text:0000000000014D18
.text:0000000000014D18 loc_14D18:                              ; CODE XREF: re_compile_internal+A88↑j
.text:0000000000014D18                 lea     rdi, [rdx+rdx*2]
.text:0000000000014D1C                 mov     [rsp+158h+size], rdx
.text:0000000000014D20                 shl     rdi, 3          ; size
.text:0000000000014D24                 call    _malloc
.text:0000000000014D29                 test    rax, rax
.text:0000000000014D2C                 mov     [r13+38h], rax
.text:0000000000014D30                 jz      loc_1527C
.text:0000000000014D36                 mov     rdx, [rsp+158h+size]
.text:0000000000014D3A                 xor     esi, esi
.text:0000000000014D3C                 xor     ecx, ecx
.text:0000000000014D3E                 test    rdx, rdx
.text:0000000000014D41                 jnz     short loc_14D54
.text:0000000000014D43                 jmp     loc_14E0B
.text:0000000000014D43 ; ---------------------------------------------------------------------------
.text:0000000000014D48                 align 10h
.text:0000000000014D50
.text:0000000000014D50 loc_14D50:                              ; CODE XREF: re_compile_internal+AF5↓j
.text:0000000000014D50                 mov     rax, [r13+38h]
.text:0000000000014D54
.text:0000000000014D54 loc_14D54:                              ; CODE XREF: re_compile_internal+AC1↑j
.text:0000000000014D54                 pxor    xmm0, xmm0
.text:0000000000014D58                 add     rax, rsi
.text:0000000000014D5B                 add     rcx, 1
.text:0000000000014D5F                 mov     qword ptr [rax+10h], 0
.text:0000000000014D67                 add     rsi, 18h
.text:0000000000014D6B                 movups  xmmword ptr [rax], xmm0
.text:0000000000014D6E                 mov     rax, [r13+10h]
.text:0000000000014D72                 cmp     rcx, rax
.text:0000000000014D75                 jb      short loc_14D50
.text:0000000000014D77                 test    rax, rax
.text:0000000000014D7A                 jz      loc_14E0B
.text:0000000000014D80                 mov     rax, [r13+30h]
.text:0000000000014D84                 mov     [rsp+158h+var_140], 0
.text:0000000000014D8D                 mov     [rsp+158h+var_148], 0
.text:0000000000014D96
.text:0000000000014D96 loc_14D96:                              ; CODE XREF: re_compile_internal+B89↓j
.text:0000000000014D96                 mov     rcx, [rsp+158h+var_140]
.text:0000000000014D9B                 lea     rdx, [rax+rcx]
.text:0000000000014D9F                 cmp     qword ptr [rdx+8], 0
.text:0000000000014DA4                 mov     rcx, [rdx+10h]
.text:0000000000014DA8                 jle     short loc_14DF4
.text:0000000000014DAA                 xor     r15d, r15d
.text:0000000000014DAD                 jmp     short loc_14DC8
.text:0000000000014DAD ; ---------------------------------------------------------------------------
.text:0000000000014DAF                 align 10h
.text:0000000000014DB0
.text:0000000000014DB0 loc_14DB0:                              ; CODE XREF: re_compile_internal+B68↓j
.text:0000000000014DB0                 mov     rax, [r13+30h]
.text:0000000000014DB4                 mov     rdx, [rsp+158h+var_140]
.text:0000000000014DB9                 add     r15, 1
.text:0000000000014DBD                 mov     rcx, [rsp+158h+size]
.text:0000000000014DC1                 cmp     r15, [rax+rdx+8]
.text:0000000000014DC6                 jge     short loc_14DF4
.text:0000000000014DC8
.text:0000000000014DC8 loc_14DC8:                              ; CODE XREF: re_compile_internal+B2D↑j
.text:0000000000014DC8                 mov     rax, [rcx+r15*8]
.text:0000000000014DCC                 mov     [rsp+158h+size], rcx
.text:0000000000014DD0                 lea     rsi, [rax+rax*2]
.text:0000000000014DD4                 mov     rax, [r13+38h]
.text:0000000000014DD8                 lea     rdi, [rax+rsi*8]
.text:0000000000014DDC                 mov     rsi, [rsp+158h+var_148]
.text:0000000000014DE1                 call    re_node_set_insert_last
.text:0000000000014DE6                 test    al, al
.text:0000000000014DE8                 jnz     short loc_14DB0
.text:0000000000014DEA
.text:0000000000014DEA loc_14DEA:                              ; CODE XREF: re_compile_internal+8CF↑j
.text:0000000000014DEA                                         ; re_compile_internal+FF7↓j
.text:0000000000014DEA                 mov     eax, 0Ch
.text:0000000000014DEF                 jmp     loc_145A0
.text:0000000000014DF4 ; ---------------------------------------------------------------------------
.text:0000000000014DF4
.text:0000000000014DF4 loc_14DF4:                              ; CODE XREF: re_compile_internal+B28↑j
.text:0000000000014DF4                                         ; re_compile_internal+B46↑j
.text:0000000000014DF4                 add     [rsp+158h+var_148], 1
.text:0000000000014DFA                 add     [rsp+158h+var_140], 18h
.text:0000000000014E00                 mov     rdx, [rsp+158h+var_148]
.text:0000000000014E05                 cmp     rdx, [r13+10h]
.text:0000000000014E09                 jb      short loc_14D96
.text:0000000000014E0B
.text:0000000000014E0B loc_14E0B:                              ; CODE XREF: re_compile_internal+A92↑j
.text:0000000000014E0B                                         ; re_compile_internal+AC3↑j ...
.text:0000000000014E0B                 movzx   eax, byte ptr [rbx+0B0h]
.text:0000000000014E12                 mov     [rsp+158h+var_10C], 0
.text:0000000000014E1A                 shr     al, 2
.text:0000000000014E1D                 cmp     [rsp+158h+var_138], 0
.text:0000000000014E23                 setz    dl
.text:0000000000014E26                 and     al, dl
.text:0000000000014E28                 jnz     loc_1500F
.text:0000000000014E2E
.text:0000000000014E2E loc_14E2E:                              ; CODE XREF: re_compile_internal+D99↓j
.text:0000000000014E2E                                         ; re_compile_internal+DD3↓j ...
.text:0000000000014E2E                 mov     rax, [rbx+68h]  ; jumptable 0000000000015053 case 6
.text:0000000000014E32                 mov     rdi, r12
.text:0000000000014E35                 mov     rax, [rax+18h]
.text:0000000000014E39                 mov     rax, [rax+38h]
.text:0000000000014E3D                 lea     rdx, [rax+rax*2]
.text:0000000000014E41                 mov     [rbx+90h], rax
.text:0000000000014E48                 mov     rax, [rbx+30h]
.text:0000000000014E4C                 lea     rsi, [rax+rdx*8]
.text:0000000000014E50                 call    re_node_set_init_copy
.text:0000000000014E55                 test    eax, eax
.text:0000000000014E57                 mov     r15d, eax
.text:0000000000014E5A                 mov     [rsp+158h+var_108], eax
.text:0000000000014E5E                 jnz     loc_14F7F
.text:0000000000014E64                 cmp     qword ptr [rbx+98h], 0
.text:0000000000014E6C                 jle     loc_14F40
.text:0000000000014E72                 mov     r9, [rsp+158h+var_F0]
.text:0000000000014E77                 test    r9, r9
.text:0000000000014E7A                 jle     loc_14F40
.text:0000000000014E80                 xor     r10d, r10d
.text:0000000000014E83                 lea     r13, [r12+10h]
.text:0000000000014E88                 jmp     short loc_14E9D
.text:0000000000014E88 ; ---------------------------------------------------------------------------
.text:0000000000014E8A                 align 10h
.text:0000000000014E90
.text:0000000000014E90 loc_14E90:                              ; CODE XREF: re_compile_internal+C37↓j
.text:0000000000014E90                                         ; re_compile_internal+C47↓j ...
.text:0000000000014E90                 add     r10, 1
.text:0000000000014E94                 cmp     r9, r10
.text:0000000000014E97                 jle     loc_14F40
.text:0000000000014E9D
.text:0000000000014E9D loc_14E9D:                              ; CODE XREF: re_compile_internal+C08↑j
.text:0000000000014E9D                                         ; re_compile_internal+CB2↓j
.text:0000000000014E9D                 mov     rcx, [rsp+158h+ptr]
.text:0000000000014EA2                 mov     rsi, [rbx]
.text:0000000000014EA5                 mov     r8, [rcx+r10*8]
.text:0000000000014EA9                 mov     rdi, r8
.text:0000000000014EAC                 shl     rdi, 4
.text:0000000000014EB0                 add     rdi, rsi
.text:0000000000014EB3                 cmp     byte ptr [rdi+8], 4
.text:0000000000014EB7                 jnz     short loc_14E90
.text:0000000000014EB9                 xor     edx, edx
.text:0000000000014EBB                 jmp     short loc_14EC9
.text:0000000000014EBB ; ---------------------------------------------------------------------------
.text:0000000000014EBD                 align 20h
.text:0000000000014EC0
.text:0000000000014EC0 loc_14EC0:                              ; CODE XREF: re_compile_internal+C58↓j
.text:0000000000014EC0                                         ; re_compile_internal+C60↓j
.text:0000000000014EC0                 add     rdx, 1
.text:0000000000014EC4                 cmp     r9, rdx
.text:0000000000014EC7                 jz      short loc_14E90
.text:0000000000014EC9
.text:0000000000014EC9 loc_14EC9:                              ; CODE XREF: re_compile_internal+C3B↑j
.text:0000000000014EC9                 mov     rax, [rcx+rdx*8]
.text:0000000000014ECD                 shl     rax, 4
.text:0000000000014ED1                 add     rax, rsi
.text:0000000000014ED4                 cmp     byte ptr [rax+8], 9
.text:0000000000014ED8                 jnz     short loc_14EC0
.text:0000000000014EDA                 mov     r11, [rdi]
.text:0000000000014EDD                 cmp     [rax], r11
.text:0000000000014EE0                 jnz     short loc_14EC0
.text:0000000000014EE2                 mov     rdx, [rbx+28h]
.text:0000000000014EE6                 lea     rax, [r8+r8*2]
.text:0000000000014EEA                 mov     rsi, r13
.text:0000000000014EED                 mov     rdi, r9
.text:0000000000014EF0                 lea     rax, [rdx+rax*8]
.text:0000000000014EF4                 mov     rax, [rax+10h]
.text:0000000000014EF8                 mov     r11, [rax]
.text:0000000000014EFB                 mov     rdx, r11
.text:0000000000014EFE                 call    re_node_set_contains_isra_3
.text:0000000000014F03                 test    rax, rax
.text:0000000000014F06                 jnz     short loc_14E90
.text:0000000000014F08                 mov     rax, [rbx+30h]
.text:0000000000014F0C                 lea     rdx, [r11+r11*2]
.text:0000000000014F10                 mov     rdi, r12
.text:0000000000014F13                 lea     rsi, [rax+rdx*8]
.text:0000000000014F17                 call    re_node_set_merge
.text:0000000000014F1C                 test    eax, eax
.text:0000000000014F1E                 jnz     loc_15260
.text:0000000000014F24                 mov     r9, [rsp+158h+var_F0]
.text:0000000000014F29                 mov     r10d, 1
.text:0000000000014F2F                 cmp     r9, r10
.text:0000000000014F32                 jg      loc_14E9D
.text:0000000000014F38                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000014F40
.text:0000000000014F40 loc_14F40:                              ; CODE XREF: re_compile_internal+BEC↑j
.text:0000000000014F40                                         ; re_compile_internal+BFA↑j ...
.text:0000000000014F40                 mov     rdi, [rsp+158h+var_130]
.text:0000000000014F45                 xor     ecx, ecx
.text:0000000000014F47                 mov     rdx, r12
.text:0000000000014F4A                 mov     rsi, rbx
.text:0000000000014F4D                 call    re_acquire_state_context
.text:0000000000014F52                 test    rax, rax
.text:0000000000014F55                 mov     [rbx+48h], rax
.text:0000000000014F59                 jz      loc_150C2
.text:0000000000014F5F                 cmp     byte ptr [rax+68h], 0
.text:0000000000014F63                 js      loc_15061
.text:0000000000014F69                 mov     [rbx+60h], rax
.text:0000000000014F6D                 mov     [rbx+58h], rax
.text:0000000000014F71                 mov     [rbx+50h], rax
.text:0000000000014F75
.text:0000000000014F75 loc_14F75:                              ; CODE XREF: re_compile_internal+E3C↓j
.text:0000000000014F75                 mov     rdi, [rsp+158h+ptr] ; ptr
.text:0000000000014F7A                 call    _free
.text:0000000000014F7F
.text:0000000000014F7F loc_14F7F:                              ; CODE XREF: re_compile_internal+BDE↑j
.text:0000000000014F7F                                         ; re_compile_internal+E47↓j ...
.text:0000000000014F7F                 mov     rax, [rsp+158h+var_150]
.text:0000000000014F84                 mov     [rsp+158h+var_10C], r15d
.text:0000000000014F89                 mov     r13, [rax]
.text:0000000000014F8C                 mov     rdi, [r13+70h]  ; ptr
.text:0000000000014F90                 test    rdi, rdi
.text:0000000000014F93                 jz      short loc_14FA8
.text:0000000000014F95                 nop     dword ptr [rax]
.text:0000000000014F98
.text:0000000000014F98 loc_14F98:                              ; CODE XREF: re_compile_internal+D26↓j
.text:0000000000014F98                 mov     r12, [rdi]
.text:0000000000014F9B                 call    _free
.text:0000000000014FA0                 test    r12, r12
.text:0000000000014FA3                 mov     rdi, r12
.text:0000000000014FA6                 jnz     short loc_14F98
.text:0000000000014FA8
.text:0000000000014FA8 loc_14FA8:                              ; CODE XREF: re_compile_internal+D13↑j
.text:0000000000014FA8                 mov     rdi, [r13+20h]  ; ptr
.text:0000000000014FAC                 mov     qword ptr [r13+70h], 0
.text:0000000000014FB4                 mov     dword ptr [r13+80h], 0Fh
.text:0000000000014FBF                 mov     qword ptr [r13+68h], 0
.text:0000000000014FC7                 call    _free
.text:0000000000014FCC                 mov     qword ptr [r13+20h], 0
.text:0000000000014FD4                 mov     rdi, rbp
.text:0000000000014FD7                 call    re_string_destruct
.text:0000000000014FDC                 mov     eax, [rsp+158h+var_10C]
.text:0000000000014FE0                 test    eax, eax
.text:0000000000014FE2                 jz      loc_1461C
.text:0000000000014FE8                 jmp     loc_145FC
.text:0000000000014FED ; ---------------------------------------------------------------------------
.text:0000000000014FED
.text:0000000000014FED loc_14FED:                              ; CODE XREF: re_compile_internal+5AD↑j
.text:0000000000014FED                                         ; re_compile_internal+5B6↑j ...
.text:0000000000014FED                 mov     [rsp+158h+var_10C], 0Ch
.text:0000000000014FF5                 jmp     loc_145AC
.text:0000000000014FFA ; ---------------------------------------------------------------------------
.text:0000000000014FFA
.text:0000000000014FFA loc_14FFA:                              ; CODE XREF: re_compile_internal+3C8↑j
.text:0000000000014FFA                 mov     rdi, rbp
.text:0000000000014FFD                 call    build_wcs_buffer
.text:0000000000015002                 mov     [rsp+158h+var_10C], 0
.text:000000000001500A                 jmp     loc_146D8
.text:000000000001500F ; ---------------------------------------------------------------------------
.text:000000000001500F
.text:000000000001500F loc_1500F:                              ; CODE XREF: re_compile_internal+BA8↑j
.text:000000000001500F                 mov     rcx, [rsp+158h+var_150]
.text:0000000000015014                 cmp     qword ptr [rcx+28h], 0
.text:0000000000015019                 jnz     loc_14E2E       ; jumptable 0000000000015053 case 6
.text:000000000001501F                 mov     r10, [rbx+10h]
.text:0000000000015023                 test    r10, r10
.text:0000000000015026                 jz      loc_152DA
.text:000000000001502C                 mov     rsi, [rbx]
.text:000000000001502F                 lea     r9, jpt_15053
.text:0000000000015036                 xor     r8d, r8d
.text:0000000000015039                 xor     edx, edx
.text:000000000001503B                 mov     rcx, rsi
.text:000000000001503E
.text:000000000001503E loc_1503E:                              ; CODE XREF: re_compile_internal+F47↓j
.text:000000000001503E                 cmp     byte ptr [rcx+8], 0Ch ; switch 13 cases
.text:0000000000015042                 ja      def_15053       ; jumptable 0000000000015053 default case, cases 0,7
.text:0000000000015048                 movzx   edi, byte ptr [rcx+8]
.text:000000000001504C                 movsxd  rdi, ds:(jpt_15053 - 17B8Ch)[r9+rdi*4]
.text:0000000000015050                 add     rdi, r9
.text:0000000000015053                 jmp     rdi             ; switch jump
.text:0000000000015055 ; ---------------------------------------------------------------------------
.text:0000000000015055
.text:0000000000015055 loc_15055:                              ; CODE XREF: re_compile_internal+EE↑j
.text:0000000000015055                 xor     ebp, ebp
.text:0000000000015057                 mov     esi, 1
.text:000000000001505C                 jmp     loc_1438D
.text:0000000000015061 ; ---------------------------------------------------------------------------
.text:0000000000015061
.text:0000000000015061 loc_15061:                              ; CODE XREF: re_compile_internal+CE3↑j
.text:0000000000015061                 mov     r14, [rsp+158h+var_130]
.text:0000000000015066                 mov     ecx, 1
.text:000000000001506B                 mov     rdx, r12
.text:000000000001506E                 mov     rsi, rbx
.text:0000000000015071                 mov     rdi, r14
.text:0000000000015074                 call    re_acquire_state_context
.text:0000000000015079                 mov     ecx, 2
.text:000000000001507E                 mov     rdx, r12
.text:0000000000015081                 mov     rsi, rbx
.text:0000000000015084                 mov     rdi, r14
.text:0000000000015087                 mov     [rbx+50h], rax
.text:000000000001508B                 call    re_acquire_state_context
.text:0000000000015090                 mov     ecx, 6
.text:0000000000015095                 mov     [rbx+58h], rax
.text:0000000000015099                 mov     rdx, r12
.text:000000000001509C                 mov     rsi, rbx
.text:000000000001509F                 mov     rdi, r14
.text:00000000000150A2                 call    re_acquire_state_context
.text:00000000000150A7                 cmp     qword ptr [rbx+50h], 0
.text:00000000000150AC                 mov     [rbx+60h], rax
.text:00000000000150B0                 jz      short loc_150C2
.text:00000000000150B2                 cmp     qword ptr [rbx+58h], 0
.text:00000000000150B7                 jz      short loc_150C2
.text:00000000000150B9                 test    rax, rax
.text:00000000000150BC                 jnz     loc_14F75
.text:00000000000150C2
.text:00000000000150C2 loc_150C2:                              ; CODE XREF: re_compile_internal+CD9↑j
.text:00000000000150C2                                         ; re_compile_internal+E30↑j ...
.text:00000000000150C2                 mov     r15d, [rsp+158h+var_108]
.text:00000000000150C7                 jmp     loc_14F7F
.text:00000000000150CC ; ---------------------------------------------------------------------------
.text:00000000000150CC
.text:00000000000150CC loc_150CC:                              ; CODE XREF: re_compile_internal+85B↑j
.text:00000000000150CC                 mov     rax, [rdx+20h]
.text:00000000000150D0                 mov     r9, [rax+38h]
.text:00000000000150D4                 jmp     loc_14AE9
.text:00000000000150D9 ; ---------------------------------------------------------------------------
.text:00000000000150D9
.text:00000000000150D9 loc_150D9:                              ; CODE XREF: re_compile_internal+846↑j
.text:00000000000150D9                 mov     rax, [rdx+20h]
.text:00000000000150DD                 mov     rcx, [rax+38h]
.text:00000000000150E1                 jmp     loc_14AD4
.text:00000000000150E6 ; ---------------------------------------------------------------------------
.text:00000000000150E6
.text:00000000000150E6 loc_150E6:                              ; CODE XREF: re_compile_internal+6C↑j
.text:00000000000150E6                 mov     rdi, rbx        ; ptr
.text:00000000000150E9                 mov     esi, 0E8h       ; size
.text:00000000000150EE                 call    _realloc
.text:00000000000150F3                 test    rax, rax
.text:00000000000150F6                 mov     rbx, rax
.text:00000000000150F9                 jz      loc_15291
.text:00000000000150FF                 mov     rax, [rsp+158h+var_150]
.text:0000000000015104                 mov     qword ptr [rax+8], 0E8h
.text:000000000001510C                 mov     [rax], rbx
.text:000000000001510F                 jmp     loc_142F2
.text:0000000000015114 ; ---------------------------------------------------------------------------
.text:0000000000015114
.text:0000000000015114 loc_15114:                              ; CODE XREF: re_compile_internal+8E6↑j
.text:0000000000015114                 mov     [rax], rcx
.text:0000000000015117                 mov     [rax+8], r9
.text:000000000001511B                 jmp     loc_14A35
.text:0000000000015120 ; ---------------------------------------------------------------------------
.text:0000000000015120
.text:0000000000015120 loc_15120:                              ; CODE XREF: re_compile_internal+2E9↑j
.text:0000000000015120                                         ; re_compile_internal+309↑j
.text:0000000000015120                 mov     [rsp+158h+var_10C], 0
.text:0000000000015128                 jmp     loc_146D8
.text:000000000001512D ; ---------------------------------------------------------------------------
.text:000000000001512D
.text:000000000001512D loc_1512D:                              ; CODE XREF: re_compile_internal+8D8↑j
.text:000000000001512D                 mov     qword ptr [r10+8], 1
.text:0000000000015135                 mov     [rax], rcx
.text:0000000000015138                 jmp     loc_14A35
.text:000000000001513D ; ---------------------------------------------------------------------------
.text:000000000001513D
.text:000000000001513D loc_1513D:                              ; CODE XREF: re_compile_internal+2CB↑j
.text:000000000001513D                 mov     rdi, rbp
.text:0000000000015140                 call    build_upper_buffer
.text:0000000000015145                 mov     [rsp+158h+var_10C], 0
.text:000000000001514D                 jmp     loc_146D8
.text:0000000000015152 ; ---------------------------------------------------------------------------
.text:0000000000015152
.text:0000000000015152 loc_15152:                              ; CODE XREF: re_compile_internal+538↑j
.text:0000000000015152                 mov     [rsp+158h+var_10C], 0Ch
.text:000000000001515A                 mov     qword ptr [rbx+68h], 0
.text:0000000000015162                 jmp     loc_145AC
.text:0000000000015167 ; ---------------------------------------------------------------------------
.text:0000000000015167
.text:0000000000015167 loc_15167:                              ; CODE XREF: re_compile_internal+4BE↑j
.text:0000000000015167                 test    rax, rax
.text:000000000001516A                 jz      loc_1529B
.text:0000000000015170                 lea     r13, [r15+70h]
.text:0000000000015174                 lea     r12, [rsp+158h+var_F8]
.text:0000000000015179                 sub     r15, 0FFFFFFFFFFFFFF80h
.text:000000000001517D                 xor     ecx, ecx
.text:000000000001517F                 xor     edx, edx
.text:0000000000015181                 mov     rsi, r15
.text:0000000000015184                 mov     r8, r12
.text:0000000000015187                 mov     rdi, r13
.text:000000000001518A                 mov     [rsp+158h+size], rax
.text:000000000001518E                 mov     byte ptr [rsp+158h+var_F0], 2
.text:0000000000015193                 call    create_token_tree_isra_16
.text:0000000000015198                 mov     r9, [rsp+158h+size]
.text:000000000001519C                 mov     r11, rax
.text:000000000001519F                 jmp     loc_1477B
.text:00000000000151A4 ; ---------------------------------------------------------------------------
.text:00000000000151A4
.text:00000000000151A4 loc_151A4:                              ; CODE XREF: re_compile_internal+633↑j
.text:00000000000151A4                                         ; re_compile_internal+657↑j
.text:00000000000151A4                 call    _free
.text:00000000000151A9                 mov     qword ptr [r13+0E0h], 0
.text:00000000000151B4                 jmp     loc_148DD
.text:00000000000151B9 ; ---------------------------------------------------------------------------
.text:00000000000151B9
.text:00000000000151B9 loc_151B9:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:00000000000151B9                                         ; DATA XREF: .rodata:jpt_15053↓o
.text:00000000000151B9                 mov     r8d, eax        ; jumptable 0000000000015053 case 5
.text:00000000000151BC
.text:00000000000151BC loc_151BC:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:00000000000151BC                                         ; re_compile_internal+F97↓j ...
.text:00000000000151BC                 add     rdx, 1          ; jumptable 0000000000015053 cases 2,4,8-11
.text:00000000000151C0                 add     rcx, 10h
.text:00000000000151C4                 cmp     rdx, r10
.text:00000000000151C7                 jnz     loc_1503E
.text:00000000000151CD                 or      r14b, r8b
.text:00000000000151D0                 jz      loc_152DA
.text:00000000000151D6                 mov     rax, rdx
.text:00000000000151D9                 shl     rax, 4
.text:00000000000151DD                 add     rax, rsi
.text:00000000000151E0                 jmp     short loc_151F8
.text:00000000000151E2 ; ---------------------------------------------------------------------------
.text:00000000000151E2
.text:00000000000151E2 loc_151E2:                              ; CODE XREF: re_compile_internal+F7F↓j
.text:00000000000151E2                 cmp     dl, 5
.text:00000000000151E5                 jnz     short loc_151EB
.text:00000000000151E7                 mov     byte ptr [rsi+8], 7
.text:00000000000151EB
.text:00000000000151EB loc_151EB:                              ; CODE XREF: re_compile_internal+F65↑j
.text:00000000000151EB                                         ; re_compile_internal+F84↓j ...
.text:00000000000151EB                 add     rsi, 10h
.text:00000000000151EF                 cmp     rax, rsi
.text:00000000000151F2                 jz      loc_152D7
.text:00000000000151F8
.text:00000000000151F8 loc_151F8:                              ; CODE XREF: re_compile_internal+F60↑j
.text:00000000000151F8                 movzx   edx, byte ptr [rsi+8]
.text:00000000000151FC                 cmp     dl, 1
.text:00000000000151FF                 jnz     short loc_151E2
.text:0000000000015201                 cmp     byte ptr [rsi], 0
.text:0000000000015204                 jns     short loc_151EB
.text:0000000000015206                 and     byte ptr [rsi+0Ah], 0DFh
.text:000000000001520A                 jmp     short loc_151EB
.text:000000000001520A ; ---------------------------------------------------------------------------
.text:000000000001520C                 align 10h
.text:0000000000015210
.text:0000000000015210 loc_15210:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000015210                                         ; DATA XREF: .rodata:jpt_15053↓o
.text:0000000000015210                 cmp     byte ptr [rcx], 0 ; jumptable 0000000000015053 case 1
.text:0000000000015213                 cmovs   r14d, eax
.text:0000000000015217                 jmp     short loc_151BC ; jumptable 0000000000015053 cases 2,4,8-11
.text:0000000000015219 ; ---------------------------------------------------------------------------
.text:0000000000015219
.text:0000000000015219 loc_15219:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000015219                                         ; DATA XREF: .rodata:jpt_15053↓o
.text:0000000000015219                 mov     edi, [rcx]      ; jumptable 0000000000015053 case 12
.text:000000000001521B                 cmp     edi, 20h ; ' '
.text:000000000001521E                 jz      short loc_151BC ; jumptable 0000000000015053 cases 2,4,8-11
.text:0000000000015220                 jbe     loc_152C9
.text:0000000000015226                 cmp     edi, 40h ; '@'
.text:0000000000015229                 jz      short loc_151BC ; jumptable 0000000000015053 cases 2,4,8-11
.text:000000000001522B                 add     edi, 0FFFFFF80h
.text:000000000001522E                 jz      short loc_151BC ; jumptable 0000000000015053 cases 2,4,8-11
.text:0000000000015230                 jmp     loc_14E2E       ; jumptable 0000000000015053 case 6
.text:0000000000015230 ; ---------------------------------------------------------------------------
.text:0000000000015235                 align 8
.text:0000000000015238
.text:0000000000015238 loc_15238:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000015238                                         ; DATA XREF: .rodata:jpt_15053↓o
.text:0000000000015238                 mov     rdi, [rcx]      ; jumptable 0000000000015053 case 3
.text:000000000001523B                 cmp     qword ptr [rdi+10h], 0
.text:0000000000015240                 jnz     loc_14E2E       ; jumptable 0000000000015053 case 6
.text:0000000000015246                 cmp     qword ptr [rdi+18h], 0
.text:000000000001524B                 jz      loc_151BC       ; jumptable 0000000000015053 cases 2,4,8-11
.text:0000000000015251                 jmp     loc_14E2E       ; jumptable 0000000000015053 case 6
.text:0000000000015251 ; ---------------------------------------------------------------------------
.text:0000000000015256                 align 20h
.text:0000000000015260
.text:0000000000015260 loc_15260:                              ; CODE XREF: re_compile_internal+C9E↑j
.text:0000000000015260                 mov     r15d, eax
.text:0000000000015263                 jmp     loc_14F7F
.text:0000000000015268 ; ---------------------------------------------------------------------------
.text:0000000000015268
.text:0000000000015268 loc_15268:                              ; CODE XREF: re_compile_internal+93E↑j
.text:0000000000015268                 mov     qword ptr [r15+8], 0
.text:0000000000015270                 mov     qword ptr [r15], 0
.text:0000000000015277                 jmp     loc_14DEA
.text:000000000001527C ; ---------------------------------------------------------------------------
.text:000000000001527C
.text:000000000001527C loc_1527C:                              ; CODE XREF: re_compile_internal+AB0↑j
.text:000000000001527C                 mov     rax, [rsp+158h+var_150]
.text:0000000000015281                 mov     [rsp+158h+var_10C], 0Ch
.text:0000000000015289                 mov     r13, [rax]
.text:000000000001528C                 jmp     loc_145AC
.text:0000000000015291 ; ---------------------------------------------------------------------------
.text:0000000000015291
.text:0000000000015291 loc_15291:                              ; CODE XREF: re_compile_internal+E79↑j
.text:0000000000015291                 mov     eax, 0Ch
.text:0000000000015296                 jmp     loc_1461C
.text:000000000001529B ; ---------------------------------------------------------------------------
.text:000000000001529B
.text:000000000001529B loc_1529B:                              ; CODE XREF: re_compile_internal+EEA↑j
.text:000000000001529B                 mov     rax, [rsp+158h+var_150]
.text:00000000000152A0                 mov     qword ptr [rbx+68h], 0
.text:00000000000152A8                 mov     r13, [rax]
.text:00000000000152AB                 jmp     loc_145AC
.text:00000000000152B0 ; ---------------------------------------------------------------------------
.text:00000000000152B0
.text:00000000000152B0 loc_152B0:                              ; CODE XREF: re_compile_internal+9E2↑j
.text:00000000000152B0                 mov     qword ptr [rcx+8], 0
.text:00000000000152B8                 mov     qword ptr [rcx], 0
.text:00000000000152BF                 mov     eax, 0Ch
.text:00000000000152C4                 jmp     loc_145A0
.text:00000000000152C9 ; ---------------------------------------------------------------------------
.text:00000000000152C9
.text:00000000000152C9 loc_152C9:                              ; CODE XREF: re_compile_internal+FA0↑j
.text:00000000000152C9                 cmp     edi, 10h
.text:00000000000152CC                 jz      loc_151BC       ; jumptable 0000000000015053 cases 2,4,8-11
.text:00000000000152D2                 jmp     loc_14E2E       ; jumptable 0000000000015053 case 6
.text:00000000000152D7 ; ---------------------------------------------------------------------------
.text:00000000000152D7
.text:00000000000152D7 loc_152D7:                              ; CODE XREF: re_compile_internal+F72↑j
.text:00000000000152D7                 mov     r14d, r8d
.text:00000000000152DA
.text:00000000000152DA loc_152DA:                              ; CODE XREF: re_compile_internal+DA6↑j
.text:00000000000152DA                                         ; re_compile_internal+F50↑j
.text:00000000000152DA                 cmp     qword ptr [rbx+98h], 0
.text:00000000000152E2                 movzx   edx, byte ptr [rbx+0B0h]
.text:00000000000152E9                 mov     dword ptr [rbx+0B4h], 1
.text:00000000000152F3                 setnle  al
.text:00000000000152F6                 and     edx, 0FFFFFFF9h
.text:00000000000152F9                 or      eax, r14d
.text:00000000000152FC                 and     eax, 1
.text:00000000000152FF                 add     eax, eax
.text:0000000000015301                 or      eax, edx
.text:0000000000015303                 mov     [rbx+0B0h], al
.text:0000000000015309                 jmp     loc_14E2E       ; jumptable 0000000000015053 case 6
.text:000000000001530E ; ---------------------------------------------------------------------------
.text:000000000001530E
.text:000000000001530E def_15053:                              ; CODE XREF: re_compile_internal+DC2↑j
.text:000000000001530E                                         ; re_compile_internal+DD3↑j
.text:000000000001530E                                         ; DATA XREF: ...
.text:000000000001530E                 call    _abort          ; jumptable 0000000000015053 default case, cases 0,7
.text:0000000000015313 ; ---------------------------------------------------------------------------
.text:0000000000015313
.text:0000000000015313 loc_15313:                              ; CODE XREF: re_compile_internal+875↑j
.text:0000000000015313                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:000000000001531A                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000015321                 lea     rdi, aRight1    ; "right > -1"
.text:0000000000015328                 mov     edx, 5B0h       ; line
.text:000000000001532D                 call    ___assert_fail
.text:0000000000015332 ; ---------------------------------------------------------------------------
.text:0000000000015332
.text:0000000000015332 loc_15332:                              ; CODE XREF: re_compile_internal+79B↑j
.text:0000000000015332                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000015339                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000015340                 lea     rdi, aIsEpsilonNodeN ; "!IS_EPSILON_NODE (node->token.type)"
.text:0000000000015347                 mov     edx, 5C2h       ; line
.text:000000000001534C                 call    ___assert_fail
.text:0000000000015351 ; ---------------------------------------------------------------------------
.text:0000000000015351
.text:0000000000015351 loc_15351:                              ; CODE XREF: re_compile_internal+86C↑j
.text:0000000000015351                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000015358                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:000000000001535F                 lea     rdi, aLeft1     ; "left > -1"
.text:0000000000015366                 mov     edx, 5AFh       ; line
.text:000000000001536B                 call    ___assert_fail
.text:0000000000015370 ; ---------------------------------------------------------------------------
.text:0000000000015370
.text:0000000000015370 loc_15370:                              ; CODE XREF: re_compile_internal+3AD↑j
.text:0000000000015370                 call    ___stack_chk_fail
.text:0000000000015370 ; } // starts at 14280
.text:0000000000015370 re_compile_internal endp
.text:0000000000015370
.text:0000000000015370 ; ---------------------------------------------------------------------------
.text:0000000000015375                 align 20h
.text:0000000000015380
.text:0000000000015380 ; =============== S U B R O U T I N E =======================================
.text:0000000000015380
.text:0000000000015380
.text:0000000000015380                 public rpl_re_compile_pattern
.text:0000000000015380 rpl_re_compile_pattern proc near        ; CODE XREF: main+492↑p
.text:0000000000015380 ; __unwind {
.text:0000000000015380                 sub     rsp, 8
.text:0000000000015384                 mov     rcx, cs:rpl_re_syntax_options
.text:000000000001538B                 mov     r8, rdi
.text:000000000001538E                 mov     rdi, rdx
.text:0000000000015391                 mov     rax, rcx
.text:0000000000015394                 shr     rax, 19h
.text:0000000000015398                 and     eax, 1
.text:000000000001539B                 shl     eax, 4
.text:000000000001539E                 mov     edx, eax
.text:00000000000153A0                 movzx   eax, byte ptr [rdi+38h]
.text:00000000000153A4                 and     eax, 0FFFFFFEFh
.text:00000000000153A7                 or      eax, edx
.text:00000000000153A9                 mov     rdx, rsi
.text:00000000000153AC                 mov     rsi, r8
.text:00000000000153AF                 or      eax, 0FFFFFF80h
.text:00000000000153B2                 mov     [rdi+38h], al
.text:00000000000153B5                 call    re_compile_internal
.text:00000000000153BA                 test    eax, eax
.text:00000000000153BC                 jz      short loc_153E8
.text:00000000000153BE                 lea     rdx, __re_error_msgid_idx
.text:00000000000153C5                 cdqe
.text:00000000000153C7                 lea     rsi, __re_error_msgid ; "Success"
.text:00000000000153CE                 xor     edi, edi        ; domainname
.text:00000000000153D0                 add     rsi, [rdx+rax*8] ; msgid
.text:00000000000153D4                 mov     edx, 5          ; category
.text:00000000000153D9                 add     rsp, 8
.text:00000000000153DD                 jmp     _dcgettext
.text:00000000000153DD ; ---------------------------------------------------------------------------
.text:00000000000153E2                 align 8
.text:00000000000153E8
.text:00000000000153E8 loc_153E8:                              ; CODE XREF: rpl_re_compile_pattern+3C↑j
.text:00000000000153E8                 xor     eax, eax
.text:00000000000153EA                 add     rsp, 8
.text:00000000000153EE                 retn
.text:00000000000153EE ; } // starts at 15380
.text:00000000000153EE rpl_re_compile_pattern endp
.text:00000000000153EE
.text:00000000000153EE ; ---------------------------------------------------------------------------
.text:00000000000153EF                 align 10h
.text:00000000000153F0
.text:00000000000153F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000153F0
.text:00000000000153F0
.text:00000000000153F0                 public rpl_re_set_syntax
.text:00000000000153F0 rpl_re_set_syntax proc near
.text:00000000000153F0 ; __unwind {
.text:00000000000153F0                 mov     rax, cs:rpl_re_syntax_options
.text:00000000000153F7                 mov     cs:rpl_re_syntax_options, rdi
.text:00000000000153FE                 retn
.text:00000000000153FE ; } // starts at 153F0
.text:00000000000153FE rpl_re_set_syntax endp
.text:00000000000153FE
.text:00000000000153FE ; ---------------------------------------------------------------------------
.text:00000000000153FF                 align 20h
.text:0000000000015400
.text:0000000000015400 ; =============== S U B R O U T I N E =======================================
.text:0000000000015400
.text:0000000000015400
.text:0000000000015400                 public rpl_re_compile_fastmap
.text:0000000000015400 rpl_re_compile_fastmap proc near        ; CODE XREF: re_search_stub+297↓p
.text:0000000000015400                                         ; rpl_regcomp+B7↓p
.text:0000000000015400 ; __unwind {
.text:0000000000015400                 push    r12
.text:0000000000015402                 push    rbp
.text:0000000000015403                 xor     eax, eax
.text:0000000000015405                 push    rbx
.text:0000000000015406                 mov     rbp, [rdi+20h]
.text:000000000001540A                 mov     rbx, rdi
.text:000000000001540D                 mov     r12, [rdi]
.text:0000000000015410                 lea     rdi, [rbp+8]
.text:0000000000015414                 mov     rcx, rbp
.text:0000000000015417                 mov     qword ptr [rbp+0], 0
.text:000000000001541F                 mov     qword ptr [rbp+0F8h], 0
.text:000000000001542A                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000001542E                 sub     rcx, rdi
.text:0000000000015431                 add     ecx, 100h
.text:0000000000015437                 shr     ecx, 3
.text:000000000001543A                 rep stosq
.text:000000000001543D                 mov     rcx, rbp
.text:0000000000015440                 mov     rdi, rbx
.text:0000000000015443                 mov     rsi, [r12+48h]
.text:0000000000015448                 lea     rdx, [rsi+18h]
.text:000000000001544C                 add     rsi, 10h
.text:0000000000015450                 call    re_compile_fastmap_iter_isra_30
.text:0000000000015455                 mov     rax, [r12+50h]
.text:000000000001545A                 cmp     [r12+48h], rax
.text:000000000001545F                 jz      short loc_15479
.text:0000000000015461                 lea     rdx, [rax+18h]
.text:0000000000015465                 lea     rsi, [rax+10h]
.text:0000000000015469                 mov     rcx, rbp
.text:000000000001546C                 mov     rdi, rbx
.text:000000000001546F                 call    re_compile_fastmap_iter_isra_30
.text:0000000000015474                 mov     rax, [r12+48h]
.text:0000000000015479
.text:0000000000015479 loc_15479:                              ; CODE XREF: rpl_re_compile_fastmap+5F↑j
.text:0000000000015479                 mov     rsi, [r12+58h]
.text:000000000001547E                 cmp     rsi, rax
.text:0000000000015481                 jz      short loc_1549B
.text:0000000000015483                 lea     rdx, [rsi+18h]
.text:0000000000015487                 mov     rcx, rbp
.text:000000000001548A                 add     rsi, 10h
.text:000000000001548E                 mov     rdi, rbx
.text:0000000000015491                 call    re_compile_fastmap_iter_isra_30
.text:0000000000015496                 mov     rax, [r12+48h]
.text:000000000001549B
.text:000000000001549B loc_1549B:                              ; CODE XREF: rpl_re_compile_fastmap+81↑j
.text:000000000001549B                 mov     rsi, [r12+60h]
.text:00000000000154A0                 cmp     rsi, rax
.text:00000000000154A3                 jz      short loc_154B8
.text:00000000000154A5                 lea     rdx, [rsi+18h]
.text:00000000000154A9                 mov     rcx, rbp
.text:00000000000154AC                 add     rsi, 10h
.text:00000000000154B0                 mov     rdi, rbx
.text:00000000000154B3                 call    re_compile_fastmap_iter_isra_30
.text:00000000000154B8
.text:00000000000154B8 loc_154B8:                              ; CODE XREF: rpl_re_compile_fastmap+A3↑j
.text:00000000000154B8                 or      byte ptr [rbx+38h], 8
.text:00000000000154BC                 xor     eax, eax
.text:00000000000154BE                 pop     rbx
.text:00000000000154BF                 pop     rbp
.text:00000000000154C0                 pop     r12
.text:00000000000154C2                 retn
.text:00000000000154C2 ; } // starts at 15400
.text:00000000000154C2 rpl_re_compile_fastmap endp
.text:00000000000154C2
.text:00000000000154C2 ; ---------------------------------------------------------------------------
.text:00000000000154C3                 align 10h
.text:00000000000154D0
.text:00000000000154D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000154D0
.text:00000000000154D0
.text:00000000000154D0 re_search_stub  proc near               ; CODE XREF: re_search_2_stub+88↓p
.text:00000000000154D0                                         ; rpl_re_match+E↓p ...
.text:00000000000154D0
.text:00000000000154D0 size            = qword ptr -60h
.text:00000000000154D0 ptr             = qword ptr -58h
.text:00000000000154D0 var_50          = qword ptr -50h
.text:00000000000154D0 var_48          = qword ptr -48h
.text:00000000000154D0 var_40          = dword ptr -40h
.text:00000000000154D0 var_3C          = dword ptr -3Ch
.text:00000000000154D0 arg_0           = qword ptr  8
.text:00000000000154D0 arg_8           = dword ptr  10h
.text:00000000000154D0
.text:00000000000154D0 ; __unwind {
.text:00000000000154D0                 push    r15
.text:00000000000154D2                 push    r14
.text:00000000000154D4                 mov     rax, r8
.text:00000000000154D7                 push    r13
.text:00000000000154D9                 push    r12
.text:00000000000154DB                 add     r8, rcx
.text:00000000000154DE                 push    rbp
.text:00000000000154DF                 push    rbx
.text:00000000000154E0                 sub     rsp, 38h
.text:00000000000154E4                 test    rcx, rcx
.text:00000000000154E7                 mov     ebx, [rsp+68h+arg_8]
.text:00000000000154EB                 mov     r12, [rsp+68h+arg_0]
.text:00000000000154F0                 mov     [rsp+68h+var_40], ebx
.text:00000000000154F4                 js      loc_15830
.text:00000000000154FA                 cmp     rcx, rdx
.text:00000000000154FD                 jg      loc_15830
.text:0000000000015503                 cmp     r8, rdx
.text:0000000000015506                 mov     rbx, rcx
.text:0000000000015509                 mov     r15, rdi
.text:000000000001550C                 jg      loc_15790
.text:0000000000015512                 test    rax, rax
.text:0000000000015515                 js      short loc_15520
.text:0000000000015517                 cmp     rcx, r8
.text:000000000001551A                 jg      loc_15790
.text:0000000000015520
.text:0000000000015520 loc_15520:                              ; CODE XREF: re_search_stub+45↑j
.text:0000000000015520                 test    r8, r8
.text:0000000000015523                 js      loc_15808
.text:0000000000015529                 test    rax, rax
.text:000000000001552C                 jns     short loc_15537
.text:000000000001552E                 cmp     rbx, r8
.text:0000000000015531                 jle     loc_15808
.text:0000000000015537
.text:0000000000015537 loc_15537:                              ; CODE XREF: re_search_stub+5C↑j
.text:0000000000015537                                         ; re_search_stub+2C3↓j
.text:0000000000015537                 movzx   eax, byte ptr [r15+38h]
.text:000000000001553C                 mov     r13d, eax
.text:000000000001553F                 shr     r13b, 5
.text:0000000000015543                 mov     edi, r13d
.text:0000000000015546                 and     edi, 3
.text:0000000000015549                 cmp     r8, rbx
.text:000000000001554C                 mov     [rsp+68h+var_3C], edi
.text:0000000000015550                 jle     short loc_15561
.text:0000000000015552                 cmp     qword ptr [r15+20h], 0
.text:0000000000015557                 jz      short loc_15561
.text:0000000000015559                 test    al, 8
.text:000000000001555B                 jz      loc_15750
.text:0000000000015561
.text:0000000000015561 loc_15561:                              ; CODE XREF: re_search_stub+80↑j
.text:0000000000015561                                         ; re_search_stub+87↑j ...
.text:0000000000015561                 test    al, 10h
.text:0000000000015563                 jnz     loc_15730
.text:0000000000015569                 test    r12, r12
.text:000000000001556C                 jz      loc_15730
.text:0000000000015572                 and     eax, 6
.text:0000000000015575                 mov     rcx, [r15+30h]
.text:0000000000015579                 cmp     al, 4
.text:000000000001557B                 jz      loc_15710
.text:0000000000015581
.text:0000000000015581 loc_15581:                              ; CODE XREF: re_search_stub+247↓j
.text:0000000000015581                 lea     r14, [rcx+1]
.text:0000000000015585                 mov     r13, r14
.text:0000000000015588
.text:0000000000015588 loc_15588:                              ; CODE XREF: re_search_stub+253↓j
.text:0000000000015588                 mov     rdi, r14
.text:000000000001558B                 shl     rdi, 4          ; size
.text:000000000001558F
.text:000000000001558F loc_1558F:                              ; CODE XREF: re_search_stub+274↓j
.text:000000000001558F                 mov     [rsp+68h+var_48], r9
.text:0000000000015594                 mov     [rsp+68h+var_50], rdx
.text:0000000000015599                 mov     [rsp+68h+ptr], rsi
.text:000000000001559E                 mov     [rsp+68h+size], r8
.text:00000000000155A3                 call    _malloc
.text:00000000000155A8                 test    rax, rax
.text:00000000000155AB                 mov     rbp, rax
.text:00000000000155AE                 jz      loc_15840
.text:00000000000155B4                 sub     rsp, 8
.text:00000000000155B8                 mov     rcx, rbx
.text:00000000000155BB                 mov     rdi, r15
.text:00000000000155BE                 mov     eax, [rsp+70h+var_3C]
.text:00000000000155C2                 push    rax
.text:00000000000155C3                 push    rbp
.text:00000000000155C4                 push    r14
.text:00000000000155C6                 mov     r9, [rsp+88h+var_48]
.text:00000000000155CB                 mov     r8, [rsp+88h+size]
.text:00000000000155D0                 mov     rdx, [rsp+88h+var_50]
.text:00000000000155D5                 mov     rsi, [rsp+88h+ptr]
.text:00000000000155DA                 call    re_search_internal
.text:00000000000155DF                 add     rsp, 20h
.text:00000000000155E3                 test    eax, eax
.text:00000000000155E5                 jz      short loc_15618
.text:00000000000155E7                 cmp     eax, 1
.text:00000000000155EA                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000155F1                 jz      short loc_155FA
.text:00000000000155F3
.text:00000000000155F3 loc_155F3:                              ; CODE XREF: re_search_stub+212↓j
.text:00000000000155F3                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:00000000000155FA
.text:00000000000155FA loc_155FA:                              ; CODE XREF: re_search_stub+121↑j
.text:00000000000155FA                                         ; re_search_stub+221↓j ...
.text:00000000000155FA                 mov     rdi, rbp        ; ptr
.text:00000000000155FD                 call    _free
.text:0000000000015602
.text:0000000000015602 loc_15602:                              ; CODE XREF: re_search_stub+367↓j
.text:0000000000015602                                         ; re_search_stub+377↓j
.text:0000000000015602                 add     rsp, 38h
.text:0000000000015606                 mov     rax, r12
.text:0000000000015609                 pop     rbx
.text:000000000001560A                 pop     rbp
.text:000000000001560B                 pop     r12
.text:000000000001560D                 pop     r13
.text:000000000001560F                 pop     r14
.text:0000000000015611                 pop     r15
.text:0000000000015613                 retn
.text:0000000000015613 ; ---------------------------------------------------------------------------
.text:0000000000015614                 align 8
.text:0000000000015618
.text:0000000000015618 loc_15618:                              ; CODE XREF: re_search_stub+115↑j
.text:0000000000015618                 test    r12, r12
.text:000000000001561B                 jz      loc_156E8
.text:0000000000015621                 movzx   eax, byte ptr [r15+38h]
.text:0000000000015626                 lea     rdx, [r13+1]
.text:000000000001562A                 shr     al, 1
.text:000000000001562C                 and     eax, 3
.text:000000000001562F                 jz      loc_157A0
.text:0000000000015635                 cmp     eax, 1
.text:0000000000015638                 jz      loc_15850
.text:000000000001563E                 cmp     eax, 2
.text:0000000000015641                 jnz     loc_15930
.text:0000000000015647                 cmp     r14, [r12]
.text:000000000001564B                 ja      loc_15911
.text:0000000000015651                 mov     r9d, 2
.text:0000000000015657
.text:0000000000015657 loc_15657:                              ; CODE XREF: re_search_stub+32C↓j
.text:0000000000015657                                         ; re_search_stub+38A↓j ...
.text:0000000000015657                 test    r13, r13
.text:000000000001565A                 jle     loc_158C8
.text:0000000000015660                 mov     r8, [r12+8]
.text:0000000000015665                 mov     rdi, [r12+10h]
.text:000000000001566A                 lea     rsi, ds:0[r13*8]
.text:0000000000015672                 mov     rdx, r13
.text:0000000000015675                 xor     eax, eax
.text:0000000000015677                 nop     word ptr [rax+rax+00000000h]
.text:0000000000015680
.text:0000000000015680 loc_15680:                              ; CODE XREF: re_search_stub+1C9↓j
.text:0000000000015680                 mov     rcx, [rbp+rax*2+0]
.text:0000000000015685                 mov     [r8+rax], rcx
.text:0000000000015689                 mov     rcx, [rbp+rax*2+8]
.text:000000000001568E                 mov     [rdi+rax], rcx
.text:0000000000015692                 add     rax, 8
.text:0000000000015696                 cmp     rsi, rax
.text:0000000000015699                 jnz     short loc_15680
.text:000000000001569B
.text:000000000001569B loc_1569B:                              ; CODE XREF: re_search_stub+3FD↓j
.text:000000000001569B                 cmp     [r12], rdx
.text:000000000001569F                 jbe     short loc_156CD
.text:00000000000156A1                 mov     rsi, [r12+10h]
.text:00000000000156A6                 mov     rcx, [r12+8]
.text:00000000000156AB                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000156B2                 nop     word ptr [rax+rax+00h]
.text:00000000000156B8
.text:00000000000156B8 loc_156B8:                              ; CODE XREF: re_search_stub+1FB↓j
.text:00000000000156B8                 mov     [rsi+rdx*8], rax
.text:00000000000156BC                 add     r13, 1
.text:00000000000156C0                 mov     [rcx+rdx*8], rax
.text:00000000000156C4                 cmp     r13, [r12]
.text:00000000000156C8                 mov     rdx, r13
.text:00000000000156CB                 jb      short loc_156B8
.text:00000000000156CD
.text:00000000000156CD loc_156CD:                              ; CODE XREF: re_search_stub+1CF↑j
.text:00000000000156CD                                         ; re_search_stub+40D↓j ...
.text:00000000000156CD                 movzx   eax, byte ptr [r15+38h]
.text:00000000000156D2                 lea     r13d, [r9+r9]
.text:00000000000156D6                 and     eax, 0FFFFFFF9h
.text:00000000000156D9                 or      eax, r13d
.text:00000000000156DC                 test    al, 6
.text:00000000000156DE                 mov     [r15+38h], al
.text:00000000000156E2                 jz      loc_155F3
.text:00000000000156E8
.text:00000000000156E8 loc_156E8:                              ; CODE XREF: re_search_stub+14B↑j
.text:00000000000156E8                 cmp     byte ptr [rsp+68h+var_40], 0
.text:00000000000156ED                 mov     r12, [rbp+0]
.text:00000000000156F1                 jz      loc_155FA
.text:00000000000156F7                 cmp     r12, rbx
.text:00000000000156FA                 jnz     loc_158F2
.text:0000000000015700                 mov     r12, [rbp+8]
.text:0000000000015704                 sub     r12, rbx
.text:0000000000015707                 jmp     loc_155FA
.text:0000000000015707 ; ---------------------------------------------------------------------------
.text:000000000001570C                 align 10h
.text:0000000000015710
.text:0000000000015710 loc_15710:                              ; CODE XREF: re_search_stub+AB↑j
.text:0000000000015710                 mov     r14, [r12]
.text:0000000000015714                 cmp     r14, rcx
.text:0000000000015717                 ja      loc_15581
.text:000000000001571D                 test    r14, r14
.text:0000000000015720                 mov     r13, r14
.text:0000000000015723                 jg      loc_15588
.text:0000000000015729                 nop     dword ptr [rax+00000000h]
.text:0000000000015730
.text:0000000000015730 loc_15730:                              ; CODE XREF: re_search_stub+93↑j
.text:0000000000015730                                         ; re_search_stub+9C↑j
.text:0000000000015730                 mov     edi, 10h
.text:0000000000015735                 mov     r14d, 1
.text:000000000001573B                 mov     r13d, 1
.text:0000000000015741                 xor     r12d, r12d
.text:0000000000015744                 jmp     loc_1558F
.text:0000000000015744 ; ---------------------------------------------------------------------------
.text:0000000000015749                 align 10h
.text:0000000000015750
.text:0000000000015750 loc_15750:                              ; CODE XREF: re_search_stub+8B↑j
.text:0000000000015750                 mov     rdi, r15
.text:0000000000015753                 mov     [rsp+68h+var_48], r9
.text:0000000000015758                 mov     [rsp+68h+var_50], rdx
.text:000000000001575D                 mov     [rsp+68h+ptr], rsi
.text:0000000000015762                 mov     [rsp+68h+size], r8
.text:0000000000015767                 call    rpl_re_compile_fastmap
.text:000000000001576C                 movzx   eax, byte ptr [r15+38h]
.text:0000000000015771                 mov     r9, [rsp+68h+var_48]
.text:0000000000015776                 mov     rdx, [rsp+68h+var_50]
.text:000000000001577B                 mov     rsi, [rsp+68h+ptr]
.text:0000000000015780                 mov     r8, [rsp+68h+size]
.text:0000000000015785                 jmp     loc_15561
.text:0000000000015785 ; ---------------------------------------------------------------------------
.text:000000000001578A                 align 10h
.text:0000000000015790
.text:0000000000015790 loc_15790:                              ; CODE XREF: re_search_stub+3C↑j
.text:0000000000015790                                         ; re_search_stub+4A↑j
.text:0000000000015790                 mov     r8, rdx
.text:0000000000015793                 jmp     loc_15537
.text:0000000000015793 ; ---------------------------------------------------------------------------
.text:0000000000015798                 align 20h
.text:00000000000157A0
.text:00000000000157A0 loc_157A0:                              ; CODE XREF: re_search_stub+15F↑j
.text:00000000000157A0                 lea     r14, ds:0[rdx*8]
.text:00000000000157A8                 mov     [rsp+68h+size], rdx
.text:00000000000157AD                 mov     rdi, r14        ; size
.text:00000000000157B0                 call    _malloc
.text:00000000000157B5                 test    rax, rax
.text:00000000000157B8                 mov     [r12+8], rax
.text:00000000000157BD                 mov     rdx, [rsp+68h+size]
.text:00000000000157C2                 jz      loc_158DA
.text:00000000000157C8                 mov     rdi, r14        ; size
.text:00000000000157CB                 mov     [rsp+68h+size], rdx
.text:00000000000157D0                 mov     [rsp+68h+ptr], rax
.text:00000000000157D5                 call    _malloc
.text:00000000000157DA                 test    rax, rax
.text:00000000000157DD                 mov     [r12+10h], rax
.text:00000000000157E2                 mov     rdx, [rsp+68h+size]
.text:00000000000157E7                 mov     rcx, [rsp+68h+ptr]
.text:00000000000157EC                 jz      loc_158D2
.text:00000000000157F2                 mov     [r12], rdx
.text:00000000000157F6                 mov     r9d, 1
.text:00000000000157FC                 jmp     loc_15657
.text:00000000000157FC ; ---------------------------------------------------------------------------
.text:0000000000015801                 align 8
.text:0000000000015808
.text:0000000000015808 loc_15808:                              ; CODE XREF: re_search_stub+53↑j
.text:0000000000015808                                         ; re_search_stub+61↑j
.text:0000000000015808                 movzx   eax, byte ptr [r15+38h]
.text:000000000001580D                 xor     r8d, r8d
.text:0000000000015810                 mov     r13d, eax
.text:0000000000015813                 shr     r13b, 5
.text:0000000000015817                 mov     edi, r13d
.text:000000000001581A                 and     edi, 3
.text:000000000001581D                 mov     [rsp+68h+var_3C], edi
.text:0000000000015821                 jmp     loc_15561
.text:0000000000015821 ; ---------------------------------------------------------------------------
.text:0000000000015826                 align 10h
.text:0000000000015830
.text:0000000000015830 loc_15830:                              ; CODE XREF: re_search_stub+24↑j
.text:0000000000015830                                         ; re_search_stub+2D↑j
.text:0000000000015830                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000015837                 jmp     loc_15602
.text:0000000000015837 ; ---------------------------------------------------------------------------
.text:000000000001583C                 align 20h
.text:0000000000015840
.text:0000000000015840 loc_15840:                              ; CODE XREF: re_search_stub+DE↑j
.text:0000000000015840                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:0000000000015847                 jmp     loc_15602
.text:0000000000015847 ; ---------------------------------------------------------------------------
.text:000000000001584C                 align 10h
.text:0000000000015850
.text:0000000000015850 loc_15850:                              ; CODE XREF: re_search_stub+168↑j
.text:0000000000015850                 cmp     [r12], rdx
.text:0000000000015854                 mov     r9d, 1
.text:000000000001585A                 jnb     loc_15657
.text:0000000000015860                 lea     rcx, ds:0[rdx*8]
.text:0000000000015868                 mov     rdi, [r12+8]    ; ptr
.text:000000000001586D                 mov     byte ptr [rsp+68h+var_50], r9b
.text:0000000000015872                 mov     [rsp+68h+ptr], rdx
.text:0000000000015877                 mov     rsi, rcx        ; size
.text:000000000001587A                 mov     [rsp+68h+size], rcx
.text:000000000001587F                 call    _realloc
.text:0000000000015884                 test    rax, rax
.text:0000000000015887                 mov     r14, rax
.text:000000000001588A                 jz      short loc_158DA
.text:000000000001588C                 mov     rcx, [rsp+68h+size]
.text:0000000000015891                 mov     rdi, [r12+10h]  ; ptr
.text:0000000000015896                 mov     rsi, rcx        ; size
.text:0000000000015899                 call    _realloc
.text:000000000001589E                 test    rax, rax
.text:00000000000158A1                 mov     rdx, [rsp+68h+ptr]
.text:00000000000158A6                 movzx   r9d, byte ptr [rsp+68h+var_50]
.text:00000000000158AC                 jz      short loc_158E2
.text:00000000000158AE                 mov     [r12+8], r14
.text:00000000000158B3                 mov     [r12+10h], rax
.text:00000000000158B8                 mov     [r12], rdx
.text:00000000000158BC                 jmp     loc_15657
.text:00000000000158BC ; ---------------------------------------------------------------------------
.text:00000000000158C1                 align 8
.text:00000000000158C8
.text:00000000000158C8 loc_158C8:                              ; CODE XREF: re_search_stub+18A↑j
.text:00000000000158C8                 xor     edx, edx
.text:00000000000158CA                 xor     r13d, r13d
.text:00000000000158CD                 jmp     loc_1569B
.text:00000000000158D2 ; ---------------------------------------------------------------------------
.text:00000000000158D2
.text:00000000000158D2 loc_158D2:                              ; CODE XREF: re_search_stub+31C↑j
.text:00000000000158D2                 mov     rdi, rcx        ; ptr
.text:00000000000158D5                 call    _free
.text:00000000000158DA
.text:00000000000158DA loc_158DA:                              ; CODE XREF: re_search_stub+2F2↑j
.text:00000000000158DA                                         ; re_search_stub+3BA↑j
.text:00000000000158DA                 xor     r9d, r9d
.text:00000000000158DD                 jmp     loc_156CD
.text:00000000000158E2 ; ---------------------------------------------------------------------------
.text:00000000000158E2
.text:00000000000158E2 loc_158E2:                              ; CODE XREF: re_search_stub+3DC↑j
.text:00000000000158E2                 mov     rdi, r14        ; ptr
.text:00000000000158E5                 call    _free
.text:00000000000158EA                 xor     r9d, r9d
.text:00000000000158ED                 jmp     loc_156CD
.text:00000000000158F2 ; ---------------------------------------------------------------------------
.text:00000000000158F2
.text:00000000000158F2 loc_158F2:                              ; CODE XREF: re_search_stub+22A↑j
.text:00000000000158F2                 lea     rcx, __PRETTY_FUNCTION___7847 ; "re_search_stub"
.text:00000000000158F9                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:0000000000015900                 lea     rdi, aPmatch0RmSoSta ; "pmatch[0].rm_so == start"
.text:0000000000015907                 mov     edx, 1BEh       ; line
.text:000000000001590C                 call    ___assert_fail
.text:0000000000015911 ; ---------------------------------------------------------------------------
.text:0000000000015911
.text:0000000000015911 loc_15911:                              ; CODE XREF: re_search_stub+17B↑j
.text:0000000000015911                 lea     rcx, __PRETTY_FUNCTION___7859 ; "re_copy_regs"
.text:0000000000015918                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000001591F                 lea     rdi, aRegsNumRegsNre ; "regs->num_regs >= nregs"
.text:0000000000015926                 mov     edx, 1FBh       ; line
.text:000000000001592B                 call    ___assert_fail
.text:0000000000015930 ; ---------------------------------------------------------------------------
.text:0000000000015930
.text:0000000000015930 loc_15930:                              ; CODE XREF: re_search_stub+171↑j
.text:0000000000015930                 lea     rcx, __PRETTY_FUNCTION___7859 ; "re_copy_regs"
.text:0000000000015937                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000001593E                 lea     rdi, aRegsAllocatedR ; "regs_allocated == REGS_FIXED"
.text:0000000000015945                 mov     edx, 1F9h       ; line
.text:000000000001594A                 call    ___assert_fail
.text:000000000001594A ; } // starts at 154D0
.text:000000000001594A re_search_stub  endp
.text:000000000001594A
.text:000000000001594A ; ---------------------------------------------------------------------------
.text:000000000001594F                 align 10h
.text:0000000000015950
.text:0000000000015950 ; =============== S U B R O U T I N E =======================================
.text:0000000000015950
.text:0000000000015950
.text:0000000000015950 re_search_2_stub proc near              ; CODE XREF: rpl_re_match_2+10↓p
.text:0000000000015950                                         ; rpl_re_search_2+12↓p
.text:0000000000015950
.text:0000000000015950 src             = qword ptr -50h
.text:0000000000015950 var_48          = qword ptr -48h
.text:0000000000015950 var_3C          = dword ptr -3Ch
.text:0000000000015950 arg_0           = qword ptr  8
.text:0000000000015950 arg_8           = qword ptr  10h
.text:0000000000015950 arg_10          = qword ptr  18h
.text:0000000000015950 arg_18          = dword ptr  20h
.text:0000000000015950
.text:0000000000015950 ; __unwind {
.text:0000000000015950                 push    r15
.text:0000000000015952                 push    r14
.text:0000000000015954                 push    r13
.text:0000000000015956                 push    r12
.text:0000000000015958                 mov     r12, rdi
.text:000000000001595B                 push    rbp
.text:000000000001595C                 push    rbx
.text:000000000001595D                 mov     rbp, r8
.text:0000000000015960                 mov     rbx, rdx
.text:0000000000015963                 mov     rdx, rbp
.text:0000000000015966                 sub     rsp, 28h
.text:000000000001596A                 shr     rdx, 3Fh
.text:000000000001596E                 mov     rax, [rsp+58h+arg_10]
.text:0000000000015973                 mov     edi, edx
.text:0000000000015975                 mov     r8d, [rsp+58h+arg_18]
.text:000000000001597A                 shr     rax, 3Fh
.text:000000000001597E                 or      dil, al
.text:0000000000015981                 jnz     loc_15A50
.text:0000000000015987                 test    rbx, rbx
.text:000000000001598A                 js      loc_15A50
.text:0000000000015990                 mov     r15, rbx
.text:0000000000015993                 add     r15, rbp
.text:0000000000015996                 jo      loc_15A50
.text:000000000001599C                 test    rbp, rbp
.text:000000000001599F                 mov     r14, rcx
.text:00000000000159A2                 mov     rcx, r9
.text:00000000000159A5                 jz      loc_15A60
.text:00000000000159AB                 xor     r13d, r13d
.text:00000000000159AE                 test    rbx, rbx
.text:00000000000159B1                 mov     [rsp+58h+src], rsi
.text:00000000000159B6                 jnz     short loc_15A00
.text:00000000000159B8
.text:00000000000159B8 loc_159B8:                              ; CODE XREF: re_search_2_stub+F7↓j
.text:00000000000159B8                                         ; re_search_2_stub+116↓j
.text:00000000000159B8                 movzx   r8d, r8b
.text:00000000000159BC                 mov     rdx, r15
.text:00000000000159BF                 mov     rsi, r14
.text:00000000000159C2                 push    r8
.text:00000000000159C4                 push    [rsp+60h+arg_8]
.text:00000000000159C8                 mov     rdi, r12
.text:00000000000159CB                 mov     r9, [rsp+68h+arg_10]
.text:00000000000159D3                 mov     r8, [rsp+68h+arg_0]
.text:00000000000159D8                 call    re_search_stub
.text:00000000000159DD                 mov     rdi, r13        ; ptr
.text:00000000000159E0                 mov     rbx, rax
.text:00000000000159E3                 call    _free
.text:00000000000159E8                 pop     rax
.text:00000000000159E9                 pop     rdx
.text:00000000000159EA
.text:00000000000159EA loc_159EA:                              ; CODE XREF: re_search_2_stub+107↓j
.text:00000000000159EA                 add     rsp, 28h
.text:00000000000159EE                 mov     rax, rbx
.text:00000000000159F1                 pop     rbx
.text:00000000000159F2                 pop     rbp
.text:00000000000159F3                 pop     r12
.text:00000000000159F5                 pop     r13
.text:00000000000159F7                 pop     r14
.text:00000000000159F9                 pop     r15
.text:00000000000159FB                 retn
.text:00000000000159FB ; ---------------------------------------------------------------------------
.text:00000000000159FC                 align 20h
.text:0000000000015A00
.text:0000000000015A00 loc_15A00:                              ; CODE XREF: re_search_2_stub+66↑j
.text:0000000000015A00                 mov     rdi, r15        ; size
.text:0000000000015A03                 mov     [rsp+58h+var_3C], r8d
.text:0000000000015A08                 mov     [rsp+58h+var_48], r9
.text:0000000000015A0D                 call    _malloc
.text:0000000000015A12                 test    rax, rax
.text:0000000000015A15                 mov     r13, rax
.text:0000000000015A18                 jz      short loc_15A50
.text:0000000000015A1A                 mov     rsi, [rsp+58h+src] ; src
.text:0000000000015A1F                 mov     rdx, rbx        ; n
.text:0000000000015A22                 mov     rdi, rax        ; dest
.text:0000000000015A25                 call    _memcpy
.text:0000000000015A2A                 lea     rdi, [r13+rbx+0] ; dest
.text:0000000000015A2F                 mov     rsi, r14        ; src
.text:0000000000015A32                 mov     rdx, rbp        ; n
.text:0000000000015A35                 mov     r14, r13
.text:0000000000015A38                 call    _memcpy
.text:0000000000015A3D                 mov     rcx, [rsp+58h+var_48]
.text:0000000000015A42                 mov     r8d, [rsp+58h+var_3C]
.text:0000000000015A47                 jmp     loc_159B8
.text:0000000000015A47 ; ---------------------------------------------------------------------------
.text:0000000000015A4C                 align 10h
.text:0000000000015A50
.text:0000000000015A50 loc_15A50:                              ; CODE XREF: re_search_2_stub+31↑j
.text:0000000000015A50                                         ; re_search_2_stub+3A↑j ...
.text:0000000000015A50                 mov     rbx, 0FFFFFFFFFFFFFFFEh
.text:0000000000015A57                 jmp     short loc_159EA
.text:0000000000015A57 ; ---------------------------------------------------------------------------
.text:0000000000015A59                 align 20h
.text:0000000000015A60
.text:0000000000015A60 loc_15A60:                              ; CODE XREF: re_search_2_stub+55↑j
.text:0000000000015A60                 mov     r14, rsi
.text:0000000000015A63                 xor     r13d, r13d
.text:0000000000015A66                 jmp     loc_159B8
.text:0000000000015A66 ; } // starts at 15950
.text:0000000000015A66 re_search_2_stub endp
.text:0000000000015A66
.text:0000000000015A66 ; ---------------------------------------------------------------------------
.text:0000000000015A6B                 align 10h
.text:0000000000015A70
.text:0000000000015A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000015A70
.text:0000000000015A70
.text:0000000000015A70                 public rpl_regcomp
.text:0000000000015A70 rpl_regcomp     proc near
.text:0000000000015A70 ; __unwind {
.text:0000000000015A70                 mov     eax, edx
.text:0000000000015A72                 push    r14
.text:0000000000015A74                 push    r13
.text:0000000000015A76                 and     eax, 1
.text:0000000000015A79                 push    r12
.text:0000000000015A7B                 push    rbp
.text:0000000000015A7C                 cmp     eax, 1
.text:0000000000015A7F                 push    rbx
.text:0000000000015A80                 mov     rbx, rdi
.text:0000000000015A83                 sbb     r14, r14
.text:0000000000015A86                 mov     qword ptr [rdi], 0
.text:0000000000015A8D                 mov     qword ptr [rdi+8], 0
.text:0000000000015A95                 and     r14d, 0FD4FCAh
.text:0000000000015A9C                 mov     qword ptr [rdi+10h], 0
.text:0000000000015AA4                 mov     edi, 100h       ; size
.text:0000000000015AA9                 mov     r12, rsi
.text:0000000000015AAC                 mov     ebp, edx
.text:0000000000015AAE                 add     r14, 3B2FCh
.text:0000000000015AB5                 call    _malloc
.text:0000000000015ABA                 test    rax, rax
.text:0000000000015ABD                 mov     [rbx+20h], rax
.text:0000000000015AC1                 jz      loc_15B70
.text:0000000000015AC7                 mov     r13, rbp
.text:0000000000015ACA                 shl     r13, 15h
.text:0000000000015ACE                 and     r13d, 400000h
.text:0000000000015AD5                 or      r13, r14
.text:0000000000015AD8                 test    bpl, 4
.text:0000000000015ADC                 jnz     short loc_15B40
.text:0000000000015ADE                 and     byte ptr [rbx+38h], 7Fh
.text:0000000000015AE2
.text:0000000000015AE2 loc_15AE2:                              ; CODE XREF: rpl_regcomp+DF↓j
.text:0000000000015AE2                 movzx   edx, byte ptr [rbx+38h]
.text:0000000000015AE6                 shr     ebp, 3
.text:0000000000015AE9                 mov     rdi, r12        ; s
.text:0000000000015AEC                 and     ebp, 1
.text:0000000000015AEF                 mov     qword ptr [rbx+28h], 0
.text:0000000000015AF7                 shl     ebp, 4
.text:0000000000015AFA                 and     edx, 0FFFFFFEFh
.text:0000000000015AFD                 or      ebp, edx
.text:0000000000015AFF                 mov     [rbx+38h], bpl
.text:0000000000015B03                 call    _strlen
.text:0000000000015B08                 mov     rcx, r13
.text:0000000000015B0B                 mov     rdx, rax
.text:0000000000015B0E                 mov     rsi, r12
.text:0000000000015B11                 mov     rdi, rbx
.text:0000000000015B14                 call    re_compile_internal
.text:0000000000015B19                 cmp     eax, 10h
.text:0000000000015B1C                 mov     ebp, eax
.text:0000000000015B1E                 jz      short loc_15B58
.text:0000000000015B20                 test    eax, eax
.text:0000000000015B22                 jnz     short loc_15B5D
.text:0000000000015B24                 mov     rdi, rbx
.text:0000000000015B27                 call    rpl_re_compile_fastmap
.text:0000000000015B2C
.text:0000000000015B2C loc_15B2C:                              ; CODE XREF: rpl_regcomp+FE↓j
.text:0000000000015B2C                 pop     rbx
.text:0000000000015B2D                 mov     eax, ebp
.text:0000000000015B2F                 pop     rbp
.text:0000000000015B30                 pop     r12
.text:0000000000015B32                 pop     r13
.text:0000000000015B34                 pop     r14
.text:0000000000015B36                 retn
.text:0000000000015B36 ; ---------------------------------------------------------------------------
.text:0000000000015B37                 align 20h
.text:0000000000015B40
.text:0000000000015B40 loc_15B40:                              ; CODE XREF: rpl_regcomp+6C↑j
.text:0000000000015B40                 and     r13, 0FFFFFFFFFFFFFFBFh
.text:0000000000015B44                 or      byte ptr [rbx+38h], 80h
.text:0000000000015B48                 or      r13, 100h
.text:0000000000015B4F                 jmp     short loc_15AE2
.text:0000000000015B4F ; ---------------------------------------------------------------------------
.text:0000000000015B51                 align 8
.text:0000000000015B58
.text:0000000000015B58 loc_15B58:                              ; CODE XREF: rpl_regcomp+AE↑j
.text:0000000000015B58                 mov     ebp, 8
.text:0000000000015B5D
.text:0000000000015B5D loc_15B5D:                              ; CODE XREF: rpl_regcomp+B2↑j
.text:0000000000015B5D                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000015B61                 call    _free
.text:0000000000015B66                 mov     qword ptr [rbx+20h], 0
.text:0000000000015B6E                 jmp     short loc_15B2C
.text:0000000000015B70 ; ---------------------------------------------------------------------------
.text:0000000000015B70
.text:0000000000015B70 loc_15B70:                              ; CODE XREF: rpl_regcomp+51↑j
.text:0000000000015B70                 mov     ebp, 0Ch
.text:0000000000015B75                 pop     rbx
.text:0000000000015B76                 mov     eax, ebp
.text:0000000000015B78                 pop     rbp
.text:0000000000015B79                 pop     r12
.text:0000000000015B7B                 pop     r13
.text:0000000000015B7D                 pop     r14
.text:0000000000015B7F                 retn
.text:0000000000015B7F ; } // starts at 15A70
.text:0000000000015B7F rpl_regcomp     endp
.text:0000000000015B7F
.text:0000000000015B80
.text:0000000000015B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000015B80
.text:0000000000015B80
.text:0000000000015B80                 public rpl_regerror
.text:0000000000015B80 rpl_regerror    proc near
.text:0000000000015B80 ; __unwind {
.text:0000000000015B80                 push    r13
.text:0000000000015B82                 push    r12
.text:0000000000015B84                 push    rbp
.text:0000000000015B85                 push    rbx
.text:0000000000015B86                 sub     rsp, 8
.text:0000000000015B8A                 cmp     edi, 10h
.text:0000000000015B8D                 ja      short loc_15BF0
.text:0000000000015B8F                 lea     rax, __re_error_msgid_idx
.text:0000000000015B96                 movsxd  rdi, edi
.text:0000000000015B99                 lea     rsi, __re_error_msgid ; "Success"
.text:0000000000015BA0                 mov     rbp, rdx
.text:0000000000015BA3                 mov     edx, 5          ; category
.text:0000000000015BA8                 mov     r12, rcx
.text:0000000000015BAB                 add     rsi, [rax+rdi*8] ; msgid
.text:0000000000015BAF                 xor     edi, edi        ; domainname
.text:0000000000015BB1                 call    _dcgettext
.text:0000000000015BB6                 mov     rdi, rax        ; s
.text:0000000000015BB9                 mov     r13, rax
.text:0000000000015BBC                 call    _strlen
.text:0000000000015BC1                 test    r12, r12
.text:0000000000015BC4                 lea     rbx, [rax+1]
.text:0000000000015BC8                 jz      short loc_15BDD
.text:0000000000015BCA                 cmp     rbx, r12
.text:0000000000015BCD                 mov     rdx, rbx        ; n
.text:0000000000015BD0                 ja      short loc_15BF8
.text:0000000000015BD2
.text:0000000000015BD2 loc_15BD2:                              ; CODE XREF: rpl_regerror+83↓j
.text:0000000000015BD2                 mov     rsi, r13        ; src
.text:0000000000015BD5                 mov     rdi, rbp        ; dest
.text:0000000000015BD8                 call    _memcpy
.text:0000000000015BDD
.text:0000000000015BDD loc_15BDD:                              ; CODE XREF: rpl_regerror+48↑j
.text:0000000000015BDD                 add     rsp, 8
.text:0000000000015BE1                 mov     rax, rbx
.text:0000000000015BE4                 pop     rbx
.text:0000000000015BE5                 pop     rbp
.text:0000000000015BE6                 pop     r12
.text:0000000000015BE8                 pop     r13
.text:0000000000015BEA                 retn
.text:0000000000015BEA ; ---------------------------------------------------------------------------
.text:0000000000015BEB                 align 10h
.text:0000000000015BF0
.text:0000000000015BF0 loc_15BF0:                              ; CODE XREF: rpl_regerror+D↑j
.text:0000000000015BF0                 call    _abort
.text:0000000000015BF0 ; ---------------------------------------------------------------------------
.text:0000000000015BF5                 align 8
.text:0000000000015BF8
.text:0000000000015BF8 loc_15BF8:                              ; CODE XREF: rpl_regerror+50↑j
.text:0000000000015BF8                 lea     rdx, [r12-1]
.text:0000000000015BFD                 mov     byte ptr [rbp+r12-1], 0
.text:0000000000015C03                 jmp     short loc_15BD2
.text:0000000000015C03 ; } // starts at 15B80
.text:0000000000015C03 rpl_regerror    endp
.text:0000000000015C03
.text:0000000000015C03 ; ---------------------------------------------------------------------------
.text:0000000000015C05                 align 10h
.text:0000000000015C10
.text:0000000000015C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000015C10
.text:0000000000015C10 ; Attributes: info_from_lumina
.text:0000000000015C10
.text:0000000000015C10                 public regfree
.text:0000000000015C10 regfree         proc near
.text:0000000000015C10 ; __unwind {
.text:0000000000015C10                 push    rbx
.text:0000000000015C11                 mov     rbx, rdi
.text:0000000000015C14                 mov     rdi, [rdi]      ; ptr
.text:0000000000015C17                 test    rdi, rdi
.text:0000000000015C1A                 jz      short loc_15C21
.text:0000000000015C1C                 call    free_dfa_content
.text:0000000000015C21
.text:0000000000015C21 loc_15C21:                              ; CODE XREF: regfree+A↑j
.text:0000000000015C21                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000015C25                 mov     qword ptr [rbx], 0
.text:0000000000015C2C                 mov     qword ptr [rbx+8], 0
.text:0000000000015C34                 call    _free
.text:0000000000015C39                 mov     rdi, [rbx+28h]  ; ptr
.text:0000000000015C3D                 mov     qword ptr [rbx+20h], 0
.text:0000000000015C45                 call    _free
.text:0000000000015C4A                 mov     qword ptr [rbx+28h], 0
.text:0000000000015C52                 pop     rbx
.text:0000000000015C53                 retn
.text:0000000000015C53 ; } // starts at 15C10
.text:0000000000015C53 regfree         endp
.text:0000000000015C53
.text:0000000000015C53 ; ---------------------------------------------------------------------------
.text:0000000000015C54                 align 20h
.text:0000000000015C60
.text:0000000000015C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000015C60
.text:0000000000015C60
.text:0000000000015C60                 public rpl_regexec
.text:0000000000015C60 rpl_regexec     proc near
.text:0000000000015C60
.text:0000000000015C60 var_30          = qword ptr -30h
.text:0000000000015C60
.text:0000000000015C60 ; __unwind {
.text:0000000000015C60                 test    r8d, 0FFFFFFF8h
.text:0000000000015C67                 jnz     loc_15CF8
.text:0000000000015C6D                 push    r13
.text:0000000000015C6F                 push    r12
.text:0000000000015C71                 mov     r13, rdx
.text:0000000000015C74                 push    rbp
.text:0000000000015C75                 push    rbx
.text:0000000000015C76                 mov     r12, rcx
.text:0000000000015C79                 mov     ebx, r8d
.text:0000000000015C7C                 mov     rbp, rdi
.text:0000000000015C7F                 sub     rsp, 18h
.text:0000000000015C83                 test    r8b, 4
.text:0000000000015C87                 jnz     short loc_15CD8
.text:0000000000015C89                 mov     rdi, rsi        ; s
.text:0000000000015C8C                 mov     [rsp+38h+var_30], rsi
.text:0000000000015C91                 call    _strlen
.text:0000000000015C96                 xor     ecx, ecx
.text:0000000000015C98                 test    byte ptr [rbp+38h], 10h
.text:0000000000015C9C                 mov     rdx, rax
.text:0000000000015C9F                 mov     rsi, [rsp+38h+var_30]
.text:0000000000015CA4                 jz      short loc_15CE6
.text:0000000000015CA6
.text:0000000000015CA6 loc_15CA6:                              ; CODE XREF: rpl_regexec+84↓j
.text:0000000000015CA6                 sub     rsp, 8
.text:0000000000015CAA                 push    rbx
.text:0000000000015CAB                 push    0
.text:0000000000015CAD                 push    0
.text:0000000000015CAF
.text:0000000000015CAF loc_15CAF:                              ; CODE XREF: rpl_regexec+8F↓j
.text:0000000000015CAF                 mov     rdi, rbp
.text:0000000000015CB2                 mov     r9, rdx
.text:0000000000015CB5                 mov     r8, rdx
.text:0000000000015CB8                 call    re_search_internal
.text:0000000000015CBD                 add     rsp, 20h
.text:0000000000015CC1                 test    eax, eax
.text:0000000000015CC3                 setnz   al
.text:0000000000015CC6                 add     rsp, 18h
.text:0000000000015CCA                 pop     rbx
.text:0000000000015CCB                 movzx   eax, al
.text:0000000000015CCE                 pop     rbp
.text:0000000000015CCF                 pop     r12
.text:0000000000015CD1                 pop     r13
.text:0000000000015CD3                 retn
.text:0000000000015CD3 ; ---------------------------------------------------------------------------
.text:0000000000015CD4                 align 8
.text:0000000000015CD8
.text:0000000000015CD8 loc_15CD8:                              ; CODE XREF: rpl_regexec+27↑j
.text:0000000000015CD8                 test    byte ptr [rbp+38h], 10h
.text:0000000000015CDC                 mov     rcx, [rcx]
.text:0000000000015CDF                 mov     rdx, [r12+8]
.text:0000000000015CE4                 jnz     short loc_15CA6
.text:0000000000015CE6
.text:0000000000015CE6 loc_15CE6:                              ; CODE XREF: rpl_regexec+44↑j
.text:0000000000015CE6                 sub     rsp, 8
.text:0000000000015CEA                 push    rbx
.text:0000000000015CEB                 push    r12
.text:0000000000015CED                 push    r13
.text:0000000000015CEF                 jmp     short loc_15CAF
.text:0000000000015CEF ; ---------------------------------------------------------------------------
.text:0000000000015CF1                 align 8
.text:0000000000015CF8
.text:0000000000015CF8 loc_15CF8:                              ; CODE XREF: rpl_regexec+7↑j
.text:0000000000015CF8                 mov     eax, 2
.text:0000000000015CFD                 retn
.text:0000000000015CFD ; } // starts at 15C60
.text:0000000000015CFD rpl_regexec     endp
.text:0000000000015CFD
.text:0000000000015CFD ; ---------------------------------------------------------------------------
.text:0000000000015CFE                 align 20h
.text:0000000000015D00
.text:0000000000015D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000015D00
.text:0000000000015D00
.text:0000000000015D00                 public rpl_re_match
.text:0000000000015D00 rpl_re_match    proc near
.text:0000000000015D00 ; __unwind {
.text:0000000000015D00                 sub     rsp, 8
.text:0000000000015D04                 mov     r9, rdx
.text:0000000000015D07                 push    1
.text:0000000000015D09                 push    r8
.text:0000000000015D0B                 xor     r8d, r8d
.text:0000000000015D0E                 call    re_search_stub
.text:0000000000015D13                 add     rsp, 18h
.text:0000000000015D17                 retn
.text:0000000000015D17 ; } // starts at 15D00
.text:0000000000015D17 rpl_re_match    endp
.text:0000000000015D17
.text:0000000000015D17 ; ---------------------------------------------------------------------------
.text:0000000000015D18                 align 20h
.text:0000000000015D20
.text:0000000000015D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000015D20
.text:0000000000015D20
.text:0000000000015D20                 public rpl_re_search
.text:0000000000015D20 rpl_re_search   proc near               ; CODE XREF: main+65F↑p
.text:0000000000015D20                                         ; main+87F↑p
.text:0000000000015D20 ; __unwind {
.text:0000000000015D20                 sub     rsp, 8
.text:0000000000015D24                 push    0
.text:0000000000015D26                 push    r9
.text:0000000000015D28                 mov     r9, rdx
.text:0000000000015D2B                 call    re_search_stub
.text:0000000000015D30                 add     rsp, 18h
.text:0000000000015D34                 retn
.text:0000000000015D34 ; } // starts at 15D20
.text:0000000000015D34 rpl_re_search   endp
.text:0000000000015D34
.text:0000000000015D34 ; ---------------------------------------------------------------------------
.text:0000000000015D35                 align 20h
.text:0000000000015D40
.text:0000000000015D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000015D40
.text:0000000000015D40
.text:0000000000015D40                 public rpl_re_match_2
.text:0000000000015D40 rpl_re_match_2  proc near
.text:0000000000015D40
.text:0000000000015D40 arg_0           = qword ptr  8
.text:0000000000015D40 arg_8           = qword ptr  10h
.text:0000000000015D40
.text:0000000000015D40 ; __unwind {
.text:0000000000015D40                 sub     rsp, 8
.text:0000000000015D44                 push    1
.text:0000000000015D46                 push    [rsp+10h+arg_8]
.text:0000000000015D4A                 push    [rsp+18h+arg_0]
.text:0000000000015D4E                 push    0
.text:0000000000015D50                 call    re_search_2_stub
.text:0000000000015D55                 add     rsp, 28h
.text:0000000000015D59                 retn
.text:0000000000015D59 ; } // starts at 15D40
.text:0000000000015D59 rpl_re_match_2  endp
.text:0000000000015D59
.text:0000000000015D59 ; ---------------------------------------------------------------------------
.text:0000000000015D5A                 align 20h
.text:0000000000015D60
.text:0000000000015D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000015D60
.text:0000000000015D60
.text:0000000000015D60                 public rpl_re_search_2
.text:0000000000015D60 rpl_re_search_2 proc near
.text:0000000000015D60
.text:0000000000015D60 arg_0           = qword ptr  8
.text:0000000000015D60 arg_8           = qword ptr  10h
.text:0000000000015D60 arg_10          = qword ptr  18h
.text:0000000000015D60
.text:0000000000015D60 ; __unwind {
.text:0000000000015D60                 sub     rsp, 8
.text:0000000000015D64                 push    0
.text:0000000000015D66                 push    [rsp+10h+arg_10]
.text:0000000000015D6A                 push    [rsp+18h+arg_8]
.text:0000000000015D6E                 push    [rsp+20h+arg_0]
.text:0000000000015D72                 call    re_search_2_stub
.text:0000000000015D77                 add     rsp, 28h
.text:0000000000015D7B                 retn
.text:0000000000015D7B ; } // starts at 15D60
.text:0000000000015D7B rpl_re_search_2 endp
.text:0000000000015D7B
.text:0000000000015D7B ; ---------------------------------------------------------------------------
.text:0000000000015D7C                 align 20h
.text:0000000000015D80
.text:0000000000015D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000015D80
.text:0000000000015D80
.text:0000000000015D80                 public rpl_re_set_registers
.text:0000000000015D80 rpl_re_set_registers proc near
.text:0000000000015D80 ; __unwind {
.text:0000000000015D80                 test    rdx, rdx
.text:0000000000015D83                 jnz     short loc_15DA8
.text:0000000000015D85                 and     byte ptr [rdi+38h], 0F9h
.text:0000000000015D89                 mov     qword ptr [rsi], 0
.text:0000000000015D90                 mov     qword ptr [rsi+10h], 0
.text:0000000000015D98                 mov     qword ptr [rsi+8], 0
.text:0000000000015DA0                 retn
.text:0000000000015DA0 ; ---------------------------------------------------------------------------
.text:0000000000015DA1                 align 8
.text:0000000000015DA8
.text:0000000000015DA8 loc_15DA8:                              ; CODE XREF: rpl_re_set_registers+3↑j
.text:0000000000015DA8                 movzx   eax, byte ptr [rdi+38h]
.text:0000000000015DAC                 and     eax, 0FFFFFFF9h
.text:0000000000015DAF                 or      eax, 2
.text:0000000000015DB2                 mov     [rdi+38h], al
.text:0000000000015DB5                 mov     [rsi], rdx
.text:0000000000015DB8                 mov     [rsi+8], rcx
.text:0000000000015DBC                 mov     [rsi+10h], r8
.text:0000000000015DC0                 retn
.text:0000000000015DC0 ; } // starts at 15D80
.text:0000000000015DC0 rpl_re_set_registers endp
.text:0000000000015DC0
.text:0000000000015DC0 ; ---------------------------------------------------------------------------
.text:0000000000015DC1                 align 10h
.text:0000000000015DD0
.text:0000000000015DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000015DD0
.text:0000000000015DD0 ; Attributes: info_from_lumina
.text:0000000000015DD0
.text:0000000000015DD0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000015DD0                 public close_stream
.text:0000000000015DD0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000015DD0                                         ; close_stdout+33↑p
.text:0000000000015DD0 ; __unwind {
.text:0000000000015DD0                 push    r12
.text:0000000000015DD2                 push    rbp
.text:0000000000015DD3                 mov     rbp, rdi
.text:0000000000015DD6                 push    rbx
.text:0000000000015DD7                 call    ___fpending
.text:0000000000015DDC                 mov     ebx, [rbp+0]
.text:0000000000015DDF                 mov     rdi, rbp        ; stream
.text:0000000000015DE2                 mov     r12, rax
.text:0000000000015DE5                 call    rpl_fclose
.text:0000000000015DEA                 and     ebx, 20h
.text:0000000000015DED                 test    ebx, ebx
.text:0000000000015DEF                 jnz     short loc_15E08
.text:0000000000015DF1                 test    eax, eax
.text:0000000000015DF3                 jz      short loc_15DFF
.text:0000000000015DF5                 test    r12, r12
.text:0000000000015DF8                 mov     eax, 0FFFFFFFFh
.text:0000000000015DFD                 jz      short loc_15E38
.text:0000000000015DFF
.text:0000000000015DFF loc_15DFF:                              ; CODE XREF: close_stream+23↑j
.text:0000000000015DFF                 pop     rbx
.text:0000000000015E00                 pop     rbp
.text:0000000000015E01                 pop     r12
.text:0000000000015E03                 retn
.text:0000000000015E03 ; ---------------------------------------------------------------------------
.text:0000000000015E04                 align 8
.text:0000000000015E08
.text:0000000000015E08 loc_15E08:                              ; CODE XREF: close_stream+1F↑j
.text:0000000000015E08                 test    eax, eax
.text:0000000000015E0A                 jnz     short loc_15E28
.text:0000000000015E0C                 call    ___errno_location
.text:0000000000015E11                 mov     dword ptr [rax], 0
.text:0000000000015E17                 mov     eax, 0FFFFFFFFh
.text:0000000000015E1C                 pop     rbx
.text:0000000000015E1D                 pop     rbp
.text:0000000000015E1E                 pop     r12
.text:0000000000015E20                 retn
.text:0000000000015E20 ; ---------------------------------------------------------------------------
.text:0000000000015E21                 align 8
.text:0000000000015E28
.text:0000000000015E28 loc_15E28:                              ; CODE XREF: close_stream+3A↑j
.text:0000000000015E28                 pop     rbx
.text:0000000000015E29                 mov     eax, 0FFFFFFFFh
.text:0000000000015E2E                 pop     rbp
.text:0000000000015E2F                 pop     r12
.text:0000000000015E31                 retn
.text:0000000000015E31 ; ---------------------------------------------------------------------------
.text:0000000000015E32                 align 8
.text:0000000000015E38
.text:0000000000015E38 loc_15E38:                              ; CODE XREF: close_stream+2D↑j
.text:0000000000015E38                 call    ___errno_location
.text:0000000000015E3D                 cmp     dword ptr [rax], 9
.text:0000000000015E40                 pop     rbx
.text:0000000000015E41                 pop     rbp
.text:0000000000015E42                 pop     r12
.text:0000000000015E44                 setnz   al
.text:0000000000015E47                 movzx   eax, al
.text:0000000000015E4A                 neg     eax
.text:0000000000015E4C                 retn
.text:0000000000015E4C ; } // starts at 15DD0
.text:0000000000015E4C close_stream    endp
.text:0000000000015E4C
.text:0000000000015E4C ; ---------------------------------------------------------------------------
.text:0000000000015E4D                 align 10h
.text:0000000000015E50
.text:0000000000015E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000015E50
.text:0000000000015E50
.text:0000000000015E50                 public hard_locale
.text:0000000000015E50 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000015E50 ; __unwind {
.text:0000000000015E50                 sub     rsp, 8
.text:0000000000015E54                 xor     esi, esi        ; locale
.text:0000000000015E56                 call    _setlocale
.text:0000000000015E5B                 mov     rdx, rax
.text:0000000000015E5E                 mov     eax, 1
.text:0000000000015E63                 test    rdx, rdx
.text:0000000000015E66                 jz      short loc_15E85
.text:0000000000015E68                 lea     rdi, unk_17E90
.text:0000000000015E6F                 mov     ecx, 2
.text:0000000000015E74                 mov     rsi, rdx
.text:0000000000015E77                 repe cmpsb
.text:0000000000015E79                 setnbe  cl
.text:0000000000015E7C                 sbb     cl, 0
.text:0000000000015E7F                 xor     eax, eax
.text:0000000000015E81                 test    cl, cl
.text:0000000000015E83                 jnz     short loc_15E90
.text:0000000000015E85
.text:0000000000015E85 loc_15E85:                              ; CODE XREF: hard_locale+16↑j
.text:0000000000015E85                 add     rsp, 8
.text:0000000000015E89                 retn
.text:0000000000015E89 ; ---------------------------------------------------------------------------
.text:0000000000015E8A                 align 10h
.text:0000000000015E90
.text:0000000000015E90 loc_15E90:                              ; CODE XREF: hard_locale+33↑j
.text:0000000000015E90                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000015E97                 mov     ecx, 6
.text:0000000000015E9C                 mov     rsi, rdx
.text:0000000000015E9F                 repe cmpsb
.text:0000000000015EA1                 setnbe  al
.text:0000000000015EA4                 sbb     al, 0
.text:0000000000015EA6                 test    al, al
.text:0000000000015EA8                 setnz   al
.text:0000000000015EAB                 add     rsp, 8
.text:0000000000015EAF                 retn
.text:0000000000015EAF ; } // starts at 15E50
.text:0000000000015EAF hard_locale     endp
.text:0000000000015EAF
.text:0000000000015EB0
.text:0000000000015EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000015EB0
.text:0000000000015EB0
.text:0000000000015EB0                 public locale_charset
.text:0000000000015EB0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000015EB0 ; __unwind {
.text:0000000000015EB0                 sub     rsp, 8
.text:0000000000015EB4                 mov     edi, 0Eh        ; item
.text:0000000000015EB9                 call    _nl_langinfo
.text:0000000000015EBE                 test    rax, rax
.text:0000000000015EC1                 jz      short loc_15EE0
.text:0000000000015EC3                 cmp     byte ptr [rax], 0
.text:0000000000015EC6                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000015ECD                 cmovz   rax, rdx
.text:0000000000015ED1                 add     rsp, 8
.text:0000000000015ED5                 retn
.text:0000000000015ED5 ; ---------------------------------------------------------------------------
.text:0000000000015ED6                 align 20h
.text:0000000000015EE0
.text:0000000000015EE0 loc_15EE0:                              ; CODE XREF: locale_charset+11↑j
.text:0000000000015EE0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000015EE7                 add     rsp, 8
.text:0000000000015EEB                 retn
.text:0000000000015EEB ; } // starts at 15EB0
.text:0000000000015EEB locale_charset  endp
.text:0000000000015EEB
.text:0000000000015EEB ; ---------------------------------------------------------------------------
.text:0000000000015EEC                 align 10h
.text:0000000000015EF0
.text:0000000000015EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000015EF0
.text:0000000000015EF0 ; Attributes: info_from_lumina
.text:0000000000015EF0
.text:0000000000015EF0 ; void _libc_csu_init(void)
.text:0000000000015EF0                 public __libc_csu_init
.text:0000000000015EF0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000015EF0 ; __unwind {
.text:0000000000015EF0                 push    r15
.text:0000000000015EF2                 push    r14
.text:0000000000015EF4                 mov     r15, rdx
.text:0000000000015EF7                 push    r13
.text:0000000000015EF9                 push    r12
.text:0000000000015EFB                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000015F02                 push    rbp
.text:0000000000015F03                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000015F0A                 push    rbx
.text:0000000000015F0B                 mov     r13d, edi
.text:0000000000015F0E                 mov     r14, rsi
.text:0000000000015F11                 sub     rbp, r12
.text:0000000000015F14                 sub     rsp, 8
.text:0000000000015F18                 sar     rbp, 3
.text:0000000000015F1C                 call    _init_proc
.text:0000000000015F21                 test    rbp, rbp
.text:0000000000015F24                 jz      short loc_15F46
.text:0000000000015F26                 xor     ebx, ebx
.text:0000000000015F28                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000015F30
.text:0000000000015F30 loc_15F30:                              ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000015F30                 mov     rdx, r15
.text:0000000000015F33                 mov     rsi, r14
.text:0000000000015F36                 mov     edi, r13d
.text:0000000000015F39                 call    ds:(__frame_dummy_init_array_entry - 21B9B0h)[r12+rbx*8]
.text:0000000000015F3D                 add     rbx, 1
.text:0000000000015F41                 cmp     rbp, rbx
.text:0000000000015F44                 jnz     short loc_15F30
.text:0000000000015F46
.text:0000000000015F46 loc_15F46:                              ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000015F46                 add     rsp, 8
.text:0000000000015F4A                 pop     rbx
.text:0000000000015F4B                 pop     rbp
.text:0000000000015F4C                 pop     r12
.text:0000000000015F4E                 pop     r13
.text:0000000000015F50                 pop     r14
.text:0000000000015F52                 pop     r15
.text:0000000000015F54                 retn
.text:0000000000015F54 ; } // starts at 15EF0
.text:0000000000015F54 __libc_csu_init endp
.text:0000000000015F54
.text:0000000000015F54 ; ---------------------------------------------------------------------------
.text:0000000000015F55                 align 20h
.text:0000000000015F60
.text:0000000000015F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000015F60
.text:0000000000015F60
.text:0000000000015F60 ; void _libc_csu_fini(void)
.text:0000000000015F60                 public __libc_csu_fini
.text:0000000000015F60 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000015F60 ; __unwind {
.text:0000000000015F60                 rep retn
.text:0000000000015F60 ; } // starts at 15F60
.text:0000000000015F60 __libc_csu_fini endp
.text:0000000000015F60
.text:0000000000015F60 ; ---------------------------------------------------------------------------
.text:0000000000015F62                 align 10h
.text:0000000000015F70
.text:0000000000015F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000015F70
.text:0000000000015F70
.text:0000000000015F70 atexit          proc near               ; CODE XREF: main+71↑p
.text:0000000000015F70 ; __unwind {
.text:0000000000015F70                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000015F77                 xor     esi, esi        ; obj
.text:0000000000015F79                 jmp     ___cxa_atexit
.text:0000000000015F79 ; } // starts at 15F70
.text:0000000000015F79 atexit          endp
.text:0000000000015F79
.text:0000000000015F79 _text           ends
.text:0000000000015F79
LOAD:0000000000015F7E ; ===========================================================================
LOAD:0000000000015F7E
LOAD:0000000000015F7E ; Segment type: Pure code
LOAD:0000000000015F7E ; Segment permissions: Read/Execute
LOAD:0000000000015F7E LOAD            segment byte public 'CODE' use64
LOAD:0000000000015F7E                 assume cs:LOAD
LOAD:0000000000015F7E                 ;org 15F7Eh
LOAD:0000000000015F7E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000015F7E                 align 20h
LOAD:0000000000015F7E LOAD            ends
LOAD:0000000000015F7E
.fini:0000000000015F80 ; ===========================================================================
.fini:0000000000015F80
.fini:0000000000015F80 ; Segment type: Pure code
.fini:0000000000015F80 ; Segment permissions: Read/Execute
.fini:0000000000015F80 _fini           segment dword public 'CODE' use64
.fini:0000000000015F80                 assume cs:_fini
.fini:0000000000015F80                 ;org 15F80h
.fini:0000000000015F80                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000015F80
.fini:0000000000015F80 ; =============== S U B R O U T I N E =======================================
.fini:0000000000015F80
.fini:0000000000015F80
.fini:0000000000015F80                 public _term_proc
.fini:0000000000015F80 _term_proc      proc near
.fini:0000000000015F80                 sub     rsp, 8          ; _fini
.fini:0000000000015F84                 add     rsp, 8
.fini:0000000000015F88                 retn
.fini:0000000000015F88 _term_proc      endp
.fini:0000000000015F88
.fini:0000000000015F88 _fini           ends
.fini:0000000000015F88
LOAD:0000000000015F89 ; ===========================================================================
LOAD:0000000000015F89
LOAD:0000000000015F89 ; Segment type: Pure code
LOAD:0000000000015F89 ; Segment permissions: Read/Execute
LOAD:0000000000015F89 LOAD            segment byte public 'CODE' use64
LOAD:0000000000015F89                 assume cs:LOAD
LOAD:0000000000015F89                 ;org 15F89h
LOAD:0000000000015F89                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000015F89                 align 20h
LOAD:0000000000015F89 LOAD            ends
LOAD:0000000000015F89
.rodata:0000000000015FA0 ; ===========================================================================
.rodata:0000000000015FA0
.rodata:0000000000015FA0 ; Segment type: Pure data
.rodata:0000000000015FA0 ; Segment permissions: Read
.rodata:0000000000015FA0 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000015FA0                 assume cs:_rodata
.rodata:0000000000015FA0                 ;org 15FA0h
.rodata:0000000000015FA0                 public _IO_stdin_used
.rodata:0000000000015FA0 _IO_stdin_used  db    1
.rodata:0000000000015FA1                 db    0
.rodata:0000000000015FA2                 db    2
.rodata:0000000000015FA3                 db    0
.rodata:0000000000015FA4 a0U             db '%0*u',0             ; DATA XREF: make_filename+8A↑o
.rodata:0000000000015FA9 ; const char aWriteErrorForS[]
.rodata:0000000000015FA9 aWriteErrorForS db 'write error for %s',0
.rodata:0000000000015FA9                                         ; DATA XREF: close_output_file+197↑o
.rodata:0000000000015FA9                                         ; save_line_to_file+48↑o
.rodata:0000000000015FBC aW              db 'w',0                ; DATA XREF: create_output_file+84↑o
.rodata:0000000000015FBE ; const char aOnRepetitionS[]
.rodata:0000000000015FBE aOnRepetitionS  db ' on repetition %s',0Ah,0
.rodata:0000000000015FBE                                         ; DATA XREF: regexp_error+7C↑o
.rodata:0000000000015FBE                                         ; handle_line_error_isra_1+79↑o
.rodata:0000000000015FD1 ; const char aMemoryExhauste[]
.rodata:0000000000015FD1 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000015FE2 ; const char aReadError[]
.rodata:0000000000015FE2 aReadError      db 'read error',0       ; DATA XREF: main:loc_2DA5↑o
.rodata:0000000000015FE2                                         ; load_buffer_part_5+252↑o
.rodata:0000000000015FED ; const char msgid[]
.rodata:0000000000015FED msgid           db '%s: %s: match not found',0
.rodata:0000000000015FED                                         ; DATA XREF: regexp_error+33↑o
.rodata:0000000000016005 ; const char assertion[]
.rodata:0000000000016005 assertion       db 'b',0                ; DATA XREF: find_line+75↑o
.rodata:0000000000016007 ; const char aInputDisappear[]
.rodata:0000000000016007 aInputDisappear db 'input disappeared',0
.rodata:0000000000016007                                         ; DATA XREF: get_first_line_in_buffer:loc_3ED8↑o
.rodata:0000000000016019 aCsplit         db 'csplit',0           ; DATA XREF: main+21C↑o
.rodata:0000000000016019                                         ; usage+1C5↑o ...
.rodata:0000000000016020 asc_16020       db '[',0                ; DATA XREF: usage+1D1↑o
.rodata:0000000000016022 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1F8↑o
.rodata:0000000000016032 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000016032                                         ; DATA XREF: usage+228↑o
.rodata:0000000000016032                                         ; usage+31C↑o ...
.rodata:0000000000016048 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+239↑o
.rodata:0000000000016052 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+245↑o
.rodata:0000000000016061 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1D8↑o
.rodata:000000000001606B aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+204↑o
.rodata:0000000000016075 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+21C↑o
.rodata:000000000001607F ; const char aSOnlineHelpS[]
.rodata:000000000001607F aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+28A↑o
.rodata:000000000001607F                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000016096 unk_16096       db  47h ; G             ; DATA XREF: main+215↑o
.rodata:0000000000016096                                         ; usage+2A6↑o ...
.rodata:0000000000016097                 db  4Eh ; N
.rodata:0000000000016098                 db  55h ; U
.rodata:0000000000016099                 db  20h
.rodata:000000000001609A ; const char domainname[]
.rodata:000000000001609A domainname      db 'coreutils',0        ; DATA XREF: main+52↑o
.rodata:000000000001609A                                         ; main+5E↑o ...
.rodata:00000000000160A4 ; const char s2[]
.rodata:00000000000160A4 s2              db 'en_',0              ; DATA XREF: usage+2CD↑o
.rodata:00000000000160A4                                         ; usage+38E↑o ...
.rodata:00000000000160A8 ; const char aFullDocumentat[]
.rodata:00000000000160A8 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000160A8                                         ; DATA XREF: usage:loc_41F9↑o
.rodata:00000000000160A8                                         ; usage:loc_42B6↑o
.rodata:00000000000160C3 ; const char dirname[]
.rodata:00000000000160C3 dirname         db '/usr/local/share/locale',0
.rodata:00000000000160C3                                         ; DATA XREF: main+4B↑o
.rodata:00000000000160DB aXx             db 'xx',0               ; DATA XREF: main+76↑o
.rodata:00000000000160DE ; const char aInvalidNumber[]
.rodata:00000000000160DE aInvalidNumber  db 'invalid number',0   ; DATA XREF: main+155↑o
.rodata:00000000000160ED aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+207↑o
.rodata:00000000000160FD aStuartKemp     db 'Stuart Kemp',0      ; DATA XREF: main+20E↑o
.rodata:0000000000016109 ; const char shortopts[]
.rodata:0000000000016109 shortopts       db 'f:b:kn:sqz',0       ; DATA XREF: main+C4↑o
.rodata:0000000000016114 ; const char aMissingOperand[]
.rodata:0000000000016114 aMissingOperand db 'missing operand',0  ; DATA XREF: main+D0E↑o
.rodata:0000000000016124 ; const char aMissingOperand_0[]
.rodata:0000000000016124 aMissingOperand_0 db 'missing operand after %s',0
.rodata:0000000000016124                                         ; DATA XREF: main+EF5↑o
.rodata:000000000001613D ; const char aCannotOpenSFor[]
.rodata:000000000001613D aCannotOpenSFor db 'cannot open %s for reading',0
.rodata:000000000001613D                                         ; DATA XREF: main+AB2↑o
.rodata:0000000000016158 ; const char aSInvalidPatter[]
.rodata:0000000000016158 aSInvalidPatter db '%s: invalid pattern',0
.rodata:0000000000016158                                         ; DATA XREF: main+C33↑o
.rodata:000000000001616C ; const char aSLineNumberOut[]
.rodata:000000000001616C aSLineNumberOut db '%s: line number out of range',0
.rodata:000000000001616C                                         ; DATA XREF: main+E84↑o
.rodata:0000000000016189 aDigits         db 'digits',0           ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000016190 aQuiet          db 'quiet',0            ; DATA XREF: .data.rel.ro:000000000021B9E0↓o
.rodata:0000000000016196 aSilent         db 'silent',0           ; DATA XREF: .data.rel.ro:000000000021BA00↓o
.rodata:000000000001619D aKeepFiles      db 'keep-files',0       ; DATA XREF: .data.rel.ro:000000000021BA20↓o
.rodata:00000000000161A8 aElideEmptyFile db 'elide-empty-files',0
.rodata:00000000000161A8                                         ; DATA XREF: .data.rel.ro:000000000021BA40↓o
.rodata:00000000000161BA aPrefix         db 'prefix',0           ; DATA XREF: .data.rel.ro:000000000021BA60↓o
.rodata:00000000000161C1 aSuffixFormat   db 'suffix-format',0    ; DATA XREF: .data.rel.ro:000000000021BA80↓o
.rodata:00000000000161CF aSuppressMatche_0 db 'suppress-matched',0
.rodata:00000000000161CF                                         ; DATA XREF: .data.rel.ro:000000000021BAA0↓o
.rodata:00000000000161E0 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000021BAC0↓o
.rodata:00000000000161E5 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000021BAE0↓o
.rodata:00000000000161ED                 align 10h
.rodata:00000000000161F0 ; const char aSSLineNumberOu[]
.rodata:00000000000161F0 aSSLineNumberOu db '%s: %s: line number out of range',0
.rodata:00000000000161F0                                         ; DATA XREF: handle_line_error_isra_1+30↑o
.rodata:0000000000016211                 align 8
.rodata:0000000000016218 ; const char file[]
.rodata:0000000000016218 file            db '../coreutils-8.31/src/csplit.c',0
.rodata:0000000000016218                                         ; DATA XREF: find_line+6E↑o
.rodata:0000000000016237                 align 8
.rodata:0000000000016238 ; const char aTrySHelpForMor[]
.rodata:0000000000016238 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000016238                                         ; DATA XREF: usage+2F↑o
.rodata:000000000001625F                 align 20h
.rodata:0000000000016260 ; const char aUsageSOptionFi[]
.rodata:0000000000016260 aUsageSOptionFi db 'Usage: %s [OPTION]... FILE PATTERN...',0Ah,0
.rodata:0000000000016260                                         ; DATA XREF: usage:loc_3F6D↑o
.rodata:0000000000016287                 align 8
.rodata:0000000000016288 ; const char aOutputPiecesOf[]
.rodata:0000000000016288 aOutputPiecesOf db 'Output pieces of FILE separated by PATTERN(s) to files ',27h,'xx0'
.rodata:0000000000016288                                         ; DATA XREF: usage+84↑o
.rodata:0000000000016288                 db '0',27h,', ',27h,'xx01',27h,', ...,',0Ah
.rodata:0000000000016288                 db 'and output byte counts of each piece to standard output.',0Ah,0
.rodata:000000000001630E                 align 10h
.rodata:0000000000016310 ; const char aReadStandardIn[]
.rodata:0000000000016310 aReadStandardIn db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000016310                 db 'Read standard input if FILE is -',0Ah,0
.rodata:0000000000016333                 align 8
.rodata:0000000000016338 ; const char aMandatoryArgum[]
.rodata:0000000000016338 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:0000000000016338                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000016338                 db 'ns too.',0Ah,0
.rodata:0000000000016383                 align 8
.rodata:0000000000016388 ; const char aBSuffixFormatF[]
.rodata:0000000000016388 aBSuffixFormatF db '  -b, --suffix-format=FORMAT  use sprintf FORMAT instead of %02d',0Ah
.rodata:0000000000016388                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000016388                 db '  -f, --prefix=PREFIX        use PREFIX instead of ',27h,'xx',27h
.rodata:0000000000016388                 db 0Ah
.rodata:0000000000016388                 db '  -k, --keep-files           do not remove output files on errors'
.rodata:0000000000016388                 db 0Ah,0
.rodata:0000000000016444                 align 8
.rodata:0000000000016448 ; const char aSuppressMatche[]
.rodata:0000000000016448 aSuppressMatche db '      --suppress-matched     suppress the lines matching PATTERN',0Ah
.rodata:0000000000016448                                         ; DATA XREF: usage+118↑o
.rodata:0000000000016448                 db 0
.rodata:000000000001648A                 align 10h
.rodata:0000000000016490 ; const char aNDigitsDigitsU[]
.rodata:0000000000016490 aNDigitsDigitsU db '  -n, --digits=DIGITS        use specified number of digits inste'
.rodata:0000000000016490                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000016490                 db 'ad of 2',0Ah
.rodata:0000000000016490                 db '  -s, --quiet, --silent      do not print counts of output file s'
.rodata:0000000000016490                 db 'izes',0Ah
.rodata:0000000000016490                 db '  -z, --elide-empty-files    remove empty output files',0Ah,0
.rodata:0000000000016557                 align 8
.rodata:0000000000016558 ; const char aHelpDisplayThi[]
.rodata:0000000000016558 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000016558                                         ; DATA XREF: usage+162↑o
.rodata:0000000000016585                 align 8
.rodata:0000000000016588 ; const char aVersionOutputV[]
.rodata:0000000000016588 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000016588                                         ; DATA XREF: usage+187↑o
.rodata:00000000000165BE                 align 20h
.rodata:00000000000165C0 ; const char aEachPatternMay[]
.rodata:00000000000165C0 aEachPatternMay db 0Ah                  ; DATA XREF: usage+1AC↑o
.rodata:00000000000165C0                 db 'Each PATTERN may be:',0Ah
.rodata:00000000000165C0                 db '  INTEGER            copy up to but not including specified line '
.rodata:00000000000165C0                 db 'number',0Ah
.rodata:00000000000165C0                 db '  /REGEXP/[OFFSET]   copy up to but not including a matching line'
.rodata:00000000000165C0                 db 0Ah
.rodata:00000000000165C0                 db '  %REGEXP%[OFFSET]   skip to, but not including a matching line',0Ah
.rodata:00000000000165C0                 db '  {INTEGER}          repeat the previous pattern specified number'
.rodata:00000000000165C0                 db ' of times',0Ah
.rodata:00000000000165C0                 db '  {*}                repeat the previous pattern as many times as'
.rodata:00000000000165C0                 db ' possible',0Ah
.rodata:00000000000165C0                 db 0Ah
.rodata:00000000000165C0                 db 'A line OFFSET is a required ',27h,'+',27h,' or ',27h,'-',27h,' fo'
.rodata:00000000000165C0                 db 'llowed by a positive integer.',0Ah,0
.rodata:000000000001677F                 align 20h
.rodata:0000000000016780 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000016780                                         ; DATA XREF: usage+29F↑o
.rodata:0000000000016780                                         ; usage+303↑o ...
.rodata:00000000000167A8 ; const char aReportAnyTrans[]
.rodata:00000000000167A8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000167A8                                         ; DATA XREF: usage+3F7↑o
.rodata:00000000000167A8                 db 'am/>',0Ah,0
.rodata:00000000000167EF                 align 10h
.rodata:00000000000167F0 ; const char aOrAvailableLoc[]
.rodata:00000000000167F0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000167F0                                         ; DATA XREF: usage:loc_423E↑o
.rodata:0000000000016823                 align 8
.rodata:0000000000016828 ; const char aMissingConvers[]
.rodata:0000000000016828 aMissingConvers db 'missing %% conversion specification in suffix',0
.rodata:0000000000016828                                         ; DATA XREF: main:loc_2C3B↑o
.rodata:0000000000016856                 align 8
.rodata:0000000000016858 ; const char aTooManyConvers[]
.rodata:0000000000016858 aTooManyConvers db 'too many %% conversion specifications in suffix',0
.rodata:0000000000016858                                         ; DATA XREF: main:loc_2EAB↑o
.rodata:0000000000016888 ; const char aMissingConvers_0[]
.rodata:0000000000016888 aMissingConvers_0 db 'missing conversion specifier in suffix',0
.rodata:0000000000016888                                         ; DATA XREF: main:loc_2F22↑o
.rodata:00000000000168AF                 align 10h
.rodata:00000000000168B0 ; const char aInvalidConvers[]
.rodata:00000000000168B0 aInvalidConvers db 'invalid conversion specifier in suffix: %c',0
.rodata:00000000000168B0                                         ; DATA XREF: main+B19↑o
.rodata:00000000000168DB                 align 20h
.rodata:00000000000168E0 ; const char aInvalidConvers_0[]
.rodata:00000000000168E0 aInvalidConvers_0 db 'invalid conversion specifier in suffix: \%.3o',0
.rodata:00000000000168E0                                         ; DATA XREF: main:loc_2C19↑o
.rodata:000000000001690E                 align 10h
.rodata:0000000000016910 ; const char aInvalidFlagsIn[]
.rodata:0000000000016910 aInvalidFlagsIn db 'invalid flags in conversion specification: %%%c%c',0
.rodata:0000000000016910                                         ; DATA XREF: main+D76↑o
.rodata:0000000000016942                 align 8
.rodata:0000000000016948 ; const char aSClosingDelimi[]
.rodata:0000000000016948 aSClosingDelimi db '%s: closing delimiter ',27h,'%c',27h,' missing',0
.rodata:0000000000016948                                         ; DATA XREF: main:loc_2CF4↑o
.rodata:000000000001696B                 align 10h
.rodata:0000000000016970 ; const char aSInvalidRegula[]
.rodata:0000000000016970 aSInvalidRegula db '%s: invalid regular expression: %s',0
.rodata:0000000000016970                                         ; DATA XREF: main+C65↑o
.rodata:0000000000016993                 align 8
.rodata:0000000000016998 ; const char aSIntegerExpect[]
.rodata:0000000000016998 aSIntegerExpect db '%s: integer expected after delimiter',0
.rodata:0000000000016998                                         ; DATA XREF: main+4D8↑o
.rodata:00000000000169BD                 align 20h
.rodata:00000000000169C0 ; const char aSLineNumberMus[]
.rodata:00000000000169C0 aSLineNumberMus db '%s: line number must be greater than zero',0
.rodata:00000000000169C0                                         ; DATA XREF: main+C03↑o
.rodata:00000000000169EA                 align 10h
.rodata:00000000000169F0 ; const char aLineNumberSIsS[]
.rodata:00000000000169F0 aLineNumberSIsS db 'line number %s is smaller than preceding line number, %s',0
.rodata:00000000000169F0                                         ; DATA XREF: main+CD7↑o
.rodata:0000000000016A29                 align 10h
.rodata:0000000000016A30 ; const char aWarningLineNum[]
.rodata:0000000000016A30 aWarningLineNum db 'warning: line number %s is the same as preceding line number',0
.rodata:0000000000016A30                                         ; DATA XREF: main+743↑o
.rodata:0000000000016A6D                 align 10h
.rodata:0000000000016A70 ; const char aSIsRequiredInR[]
.rodata:0000000000016A70 aSIsRequiredInR db '%s: ',27h,'}',27h,' is required in repeat count',0
.rodata:0000000000016A70                                         ; DATA XREF: main+E12↑o
.rodata:0000000000016A94                 align 8
.rodata:0000000000016A98 ; const char aSIntegerRequir[]
.rodata:0000000000016A98 aSIntegerRequir db '%s}: integer required between ',27h,'{',27h,' and ',27h,'}',27h,0
.rodata:0000000000016A98                                         ; DATA XREF: main+DE0↑o
.rodata:0000000000016AC2                 align 8
.rodata:0000000000016AC8 ; const char aErrorInRegular[]
.rodata:0000000000016AC8 aErrorInRegular db 'error in regular expression search',0
.rodata:0000000000016AC8                                         ; DATA XREF: main:loc_2E0A↑o
.rodata:0000000000016AEB                 align 20h
.rodata:0000000000016B00 ; const char _PRETTY_FUNCTION___7224[]
.rodata:0000000000016B00 __PRETTY_FUNCTION___7224 db 'find_line',0
.rodata:0000000000016B00                                         ; DATA XREF: find_line+67↑o
.rodata:0000000000016B0A                 align 20h
.rodata:0000000000016B20 sig_7486        db  0Eh                 ; DATA XREF: main:loc_2568↑o
.rodata:0000000000016B21                 db    0
.rodata:0000000000016B22                 db    0
.rodata:0000000000016B23                 db    0
.rodata:0000000000016B24                 db    1
.rodata:0000000000016B25                 db    0
.rodata:0000000000016B26                 db    0
.rodata:0000000000016B27                 db    0
.rodata:0000000000016B28                 db    2
.rodata:0000000000016B29                 db    0
.rodata:0000000000016B2A                 db    0
.rodata:0000000000016B2B                 db    0
.rodata:0000000000016B2C                 db  0Dh
.rodata:0000000000016B2D                 db    0
.rodata:0000000000016B2E                 db    0
.rodata:0000000000016B2F                 db    0
.rodata:0000000000016B30                 db    3
.rodata:0000000000016B31                 db    0
.rodata:0000000000016B32                 db    0
.rodata:0000000000016B33                 db    0
.rodata:0000000000016B34                 db  0Fh
.rodata:0000000000016B35                 db    0
.rodata:0000000000016B36                 db    0
.rodata:0000000000016B37                 db    0
.rodata:0000000000016B38                 db  1Dh
.rodata:0000000000016B39                 db    0
.rodata:0000000000016B3A                 db    0
.rodata:0000000000016B3B                 db    0
.rodata:0000000000016B3C                 db  1Bh
.rodata:0000000000016B3D                 db    0
.rodata:0000000000016B3E                 db    0
.rodata:0000000000016B3F                 db    0
.rodata:0000000000016B40                 db  1Ah
.rodata:0000000000016B41                 db    0
.rodata:0000000000016B42                 db    0
.rodata:0000000000016B43                 db    0
.rodata:0000000000016B44                 db  18h
.rodata:0000000000016B45                 db    0
.rodata:0000000000016B46                 db    0
.rodata:0000000000016B47                 db    0
.rodata:0000000000016B48                 db  19h
.rodata:0000000000016B49                 db    0
.rodata:0000000000016B4A                 db    0
.rodata:0000000000016B4B                 db    0
.rodata:0000000000016B4C a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000016B51 ; const char aWriteError[]
.rodata:0000000000016B51 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_4393↑o
.rodata:0000000000016B5D ; const char aS[4]
.rodata:0000000000016B5D aS              db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000016B5D                                         ; xnumtoimax+7F↑o
.rodata:0000000000016B61 ; const char format[]
.rodata:0000000000016B61 format          dd offset loc_7325      ; DATA XREF: delete_all_files_part_0+12↑o
.rodata:0000000000016B61                                         ; close_output_file+126↑o ...
.rodata:0000000000016B65                 align 8
.rodata:0000000000016B68 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000016B68                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000016BA0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000016BA8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000016BA8                                         ; main+2F6↑o
.rodata:0000000000016BAC unk_16BAC       db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000016BAD                 db  80h
.rodata:0000000000016BAE                 db  98h
.rodata:0000000000016BAF                 db    0
.rodata:0000000000016BB0 unk_16BB0       db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000016BB1                 db  80h
.rodata:0000000000016BB2                 db  99h
.rodata:0000000000016BB3                 db    0
.rodata:0000000000016BB4 unk_16BB4       db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000016BB5                 db    7
.rodata:0000000000016BB6                 db  65h ; e
.rodata:0000000000016BB7                 db    0
.rodata:0000000000016BB8 unk_16BB8       db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000016BB9                 db 0AFh
.rodata:0000000000016BBA                 db    0
.rodata:0000000000016BBB unk_16BBB       db  22h ; "             ; DATA XREF: gettext_quote:loc_4610↑o
.rodata:0000000000016BBB                                         ; quotearg_buffer_restyled:loc_53CB↑o ...
.rodata:0000000000016BBC                 db    0
.rodata:0000000000016BBD ; const char asc_16BBD[2]
.rodata:0000000000016BBD asc_16BBD       db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000016BBD                                         ; quotearg_buffer_restyled:loc_4793↑o ...
.rodata:0000000000016BBF ; const char asc_16BBF[2]
.rodata:0000000000016BBF asc_16BBF       db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000016BBF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000016BC1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000016BC9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000021BB28↓o
.rodata:0000000000016BCF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000021BB30↓o
.rodata:0000000000016BDC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000021BB38↓o
.rodata:0000000000016BDC                                         ; .data.rel.ro:000000000021BB58↓o
.rodata:0000000000016BE9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000016BE9                                         ; DATA XREF: .data.rel.ro:000000000021BB40↓o
.rodata:0000000000016BFD aC_0            db 'c',0                ; DATA XREF: .data.rel.ro:000000000021BB48↓o
.rodata:0000000000016BFF aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000021BB50↓o
.rodata:0000000000016C07 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000021BB68↓o
.rodata:0000000000016C0F                 align 20h
.rodata:0000000000016C20 jpt_4771        dd offset loc_551A - 16C20h
.rodata:0000000000016C20                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000016C20                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000016C20                 dd offset loc_4773 - 16C20h ; jump table for switch statement
.rodata:0000000000016C20                 dd offset loc_5748 - 16C20h
.rodata:0000000000016C20                 dd offset loc_5554 - 16C20h
.rodata:0000000000016C20                 dd offset loc_5344 - 16C20h
.rodata:0000000000016C20                 dd offset loc_53A0 - 16C20h
.rodata:0000000000016C20                 dd offset loc_53F5 - 16C20h
.rodata:0000000000016C20                 dd offset loc_543A - 16C20h
.rodata:0000000000016C20                 dd offset loc_5474 - 16C20h
.rodata:0000000000016C20                 dd offset loc_5474 - 16C20h
.rodata:0000000000016C20                 dd offset loc_5474 - 16C20h
.rodata:0000000000016C4C jpt_48CE        dd offset loc_4AF0 - 16C4Ch, offset def_48CE - 16C4Ch
.rodata:0000000000016C4C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000016C4C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000016C4C                 dd offset def_48CE - 16C4Ch, offset def_48CE - 16C4Ch ; jump table for switch statement
.rodata:0000000000016C4C                 dd offset def_48CE - 16C4Ch, offset def_48CE - 16C4Ch
.rodata:0000000000016C4C                 dd offset def_48CE - 16C4Ch, offset loc_4B30 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4A38 - 16C4Ch, offset loc_49F8 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4BC0 - 16C4Ch, offset loc_4BB0 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4BA0 - 16C4Ch, offset loc_4B90 - 16C4Ch
.rodata:0000000000016C4C                 dd offset def_48CE - 16C4Ch, offset def_48CE - 16C4Ch
.rodata:0000000000016C4C                 dd offset def_48CE - 16C4Ch, offset def_48CE - 16C4Ch
.rodata:0000000000016C4C                 dd offset def_48CE - 16C4Ch, offset def_48CE - 16C4Ch
.rodata:0000000000016C4C                 dd offset def_48CE - 16C4Ch, offset def_48CE - 16C4Ch
.rodata:0000000000016C4C                 dd offset def_48CE - 16C4Ch, offset def_48CE - 16C4Ch
.rodata:0000000000016C4C                 dd offset def_48CE - 16C4Ch, offset def_48CE - 16C4Ch
.rodata:0000000000016C4C                 dd offset def_48CE - 16C4Ch, offset def_48CE - 16C4Ch
.rodata:0000000000016C4C                 dd offset def_48CE - 16C4Ch, offset def_48CE - 16C4Ch
.rodata:0000000000016C4C                 dd offset def_48CE - 16C4Ch, offset def_48CE - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B80 - 16C4Ch, offset loc_4B70 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B70 - 16C4Ch, offset loc_4B40 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B70 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B70 - 16C4Ch, offset loc_49D3 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B70 - 16C4Ch, offset loc_4B70 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B70 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B70 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B70 - 16C4Ch, offset loc_4B70 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B70 - 16C4Ch, offset loc_49A3 - 16C4Ch
.rodata:0000000000016C4C                 dd offset def_48CE - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B70 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4A48 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B70 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B70 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_4B18 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B18 - 16C4Ch, offset loc_48D3 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B70 - 16C4Ch, offset loc_48D3 - 16C4Ch
.rodata:0000000000016C4C                 dd offset loc_4B40 - 16C4Ch
.rodata:0000000000016E48 jpt_4C5A        dd offset loc_4CC0 - 16E48h, offset def_4C5A - 16E48h
.rodata:0000000000016E48                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000016E48                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000016E48                 dd offset def_4C5A - 16E48h, offset def_4C5A - 16E48h ; jump table for switch statement
.rodata:0000000000016E48                 dd offset def_4C5A - 16E48h, offset def_4C5A - 16E48h
.rodata:0000000000016E48                 dd offset def_4C5A - 16E48h, offset loc_4CB0 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4E00 - 16E48h, offset loc_4DE8 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4C98 - 16E48h, offset loc_4DD8 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4C80 - 16E48h, offset loc_4DC0 - 16E48h
.rodata:0000000000016E48                 dd offset def_4C5A - 16E48h, offset def_4C5A - 16E48h
.rodata:0000000000016E48                 dd offset def_4C5A - 16E48h, offset def_4C5A - 16E48h
.rodata:0000000000016E48                 dd offset def_4C5A - 16E48h, offset def_4C5A - 16E48h
.rodata:0000000000016E48                 dd offset def_4C5A - 16E48h, offset def_4C5A - 16E48h
.rodata:0000000000016E48                 dd offset def_4C5A - 16E48h, offset def_4C5A - 16E48h
.rodata:0000000000016E48                 dd offset def_4C5A - 16E48h, offset def_4C5A - 16E48h
.rodata:0000000000016E48                 dd offset def_4C5A - 16E48h, offset def_4C5A - 16E48h
.rodata:0000000000016E48                 dd offset def_4C5A - 16E48h, offset def_4C5A - 16E48h
.rodata:0000000000016E48                 dd offset def_4C5A - 16E48h, offset def_4C5A - 16E48h
.rodata:0000000000016E48                 dd offset loc_4DA8 - 16E48h, offset loc_4D90 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D90 - 16E48h, offset loc_4D78 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D90 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D90 - 16E48h, offset loc_49D0 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D90 - 16E48h, offset loc_4D90 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D90 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D90 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D90 - 16E48h, offset loc_4D90 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D90 - 16E48h, offset loc_49A0 - 16E48h
.rodata:0000000000016E48                 dd offset def_4C5A - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D90 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4C60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D90 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D90 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_4D60 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D60 - 16E48h, offset loc_48D0 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D90 - 16E48h, offset loc_48D0 - 16E48h
.rodata:0000000000016E48                 dd offset loc_4D78 - 16E48h
.rodata:0000000000017044                 align 20h
.rodata:0000000000017060                 public quoting_style_vals
.rodata:0000000000017060 quoting_style_vals db    0
.rodata:0000000000017061                 db    0
.rodata:0000000000017062                 db    0
.rodata:0000000000017063                 db    0
.rodata:0000000000017064                 db    1
.rodata:0000000000017065                 db    0
.rodata:0000000000017066                 db    0
.rodata:0000000000017067                 db    0
.rodata:0000000000017068                 db    2
.rodata:0000000000017069                 db    0
.rodata:000000000001706A                 db    0
.rodata:000000000001706B                 db    0
.rodata:000000000001706C                 db    3
.rodata:000000000001706D                 db    0
.rodata:000000000001706E                 db    0
.rodata:000000000001706F                 db    0
.rodata:0000000000017070                 db    4
.rodata:0000000000017071                 db    0
.rodata:0000000000017072                 db    0
.rodata:0000000000017073                 db    0
.rodata:0000000000017074                 db    5
.rodata:0000000000017075                 db    0
.rodata:0000000000017076                 db    0
.rodata:0000000000017077                 db    0
.rodata:0000000000017078                 db    6
.rodata:0000000000017079                 db    0
.rodata:000000000001707A                 db    0
.rodata:000000000001707B                 db    0
.rodata:000000000001707C                 db    7
.rodata:000000000001707D                 db    0
.rodata:000000000001707E                 db    0
.rodata:000000000001707F                 db    0
.rodata:0000000000017080                 db    8
.rodata:0000000000017081                 db    0
.rodata:0000000000017082                 db    0
.rodata:0000000000017083                 db    0
.rodata:0000000000017084                 db    9
.rodata:0000000000017085                 db    0
.rodata:0000000000017086                 db    0
.rodata:0000000000017087                 db    0
.rodata:0000000000017088 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000017088                                         ; close_output_file+A4↑o
.rodata:0000000000017094 aSS             db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000001709B ; const char aC[]
.rodata:000000000001709B aC              db '(C)',0              ; DATA XREF: version_etc_arn:loc_632C↑o
.rodata:000000000001709F ; const char aWrittenByS[]
.rodata:000000000001709F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000001709F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000170AF ; const char aWrittenBySAndS[]
.rodata:00000000000170AF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000170AF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000170C6 ; const char aWrittenBySSAnd[]
.rodata:00000000000170C6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000170C6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000170E2 ; const char aReportBugsToS[]
.rodata:00000000000170E2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000170E2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000170F7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000170F7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000001710D ; const char aSHomePageS[]
.rodata:000000000001710D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000001710D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000017121                 align 8
.rodata:0000000000017128 ; const char aLicenseGplv3Gn[]
.rodata:0000000000017128 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000017128                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000017128                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000017128                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000017128                 db '.',0Ah
.rodata:0000000000017128                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000017128                 db 0Ah,0
.rodata:00000000000171F4                 align 8
.rodata:00000000000171F8 ; const char aWrittenBySSSAn[]
.rodata:00000000000171F8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000171F8                                         ; DATA XREF: version_etc_arn:loc_6580↑o
.rodata:00000000000171F8                 db 'and %s.',0Ah,0
.rodata:0000000000017218 ; const char aWrittenBySSSSA[]
.rodata:0000000000017218 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000017218                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000017218                 db '%s, and %s.',0Ah,0
.rodata:000000000001723C                 align 20h
.rodata:0000000000017240 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000017240 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000017240                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000017240                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000017268 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000017268 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000017268                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000017268                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000017294                 align 8
.rodata:0000000000017298 ; const char aWrittenBySSSSS[]
.rodata:0000000000017298 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000017298                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000017298                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000017298                 db 'and %s.',0Ah,0
.rodata:00000000000172C8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000172C8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000172C8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000172C8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000172C8                 db '%s, and %s.',0Ah,0
.rodata:00000000000172FC                 align 20h
.rodata:0000000000017300 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000017300                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000017300                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000017300                 db '%s, %s, and others.',0Ah,0
.rodata:000000000001733C                 align 20h
.rodata:0000000000017340 ; const char aGeneralHelpUsi[]
.rodata:0000000000017340 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000017340                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000017340                 db 0
.rodata:0000000000017381                 align 4
.rodata:0000000000017384 jpt_6394        dd offset loc_6416 - 17384h
.rodata:0000000000017384                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000017384                                         ; version_etc_arn+9D↑r
.rodata:0000000000017384                 dd offset loc_64A8 - 17384h ; jump table for switch statement
.rodata:0000000000017384                 dd offset loc_64E8 - 17384h
.rodata:0000000000017384                 dd offset loc_6530 - 17384h
.rodata:0000000000017384                 dd offset loc_6580 - 17384h
.rodata:0000000000017384                 dd offset loc_65D8 - 17384h
.rodata:0000000000017384                 dd offset loc_6608 - 17384h
.rodata:0000000000017384                 dd offset loc_6670 - 17384h
.rodata:0000000000017384                 dd offset loc_63A0 - 17384h
.rodata:0000000000017384                 dd offset loc_6450 - 17384h
.rodata:00000000000173AC                 align 20h
.rodata:00000000000173C0                 public version_etc_copyright
.rodata:00000000000173C0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000173C0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000173EF                 align 10h
.rodata:00000000000173F0 ; const char aCoreutils831Li[]
.rodata:00000000000173F0 aCoreutils831Li db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:00000000000173F0                                         ; DATA XREF: xstrtoimax+696↑o
.rodata:00000000000173F0                                         ; xstrtoumax+38C↑o
.rodata:0000000000017410 ; const char a0StrtolBaseStr[]
.rodata:0000000000017410 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000017410                                         ; DATA XREF: xstrtoimax+69D↑o
.rodata:0000000000017410                                         ; xstrtoumax+393↑o
.rodata:0000000000017436                 align 8
.rodata:0000000000017438 jpt_6E5E        dd offset loc_7190 - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                                         ; DATA XREF: xstrtoimax+19C↑o
.rodata:0000000000017438                                         ; xstrtoimax+1A7↑r
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset loc_70C0 - 17438h ; jump table for switch statement
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset loc_7060 - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset loc_7020 - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset loc_6E60 - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset loc_7128 - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset loc_71C0 - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset loc_6FB0 - 17438h
.rodata:0000000000017438                 dd offset loc_6F40 - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset loc_6F10 - 17438h, offset loc_6EC0 - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset loc_7060 - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset loc_7020 - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset loc_6E60 - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset loc_71C0 - 17438h, offset def_6E5E - 17438h
.rodata:0000000000017438                 dd offset def_6E5E - 17438h, offset loc_6EE0 - 17438h
.rodata:0000000000017510 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000017510 __PRETTY_FUNCTION___4162 db 'xstrtoimax',0
.rodata:0000000000017510                                         ; DATA XREF: xstrtoimax:loc_733F↑o
.rodata:000000000001751B                 align 20h
.rodata:0000000000017520 jpt_7546        dd offset loc_7696 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:0000000000017520                                         ; xstrtoumax+1CF↑r
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset loc_7673 - 17520h ; jump table for switch statement
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset loc_76AC - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset loc_762F - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset loc_7548 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset loc_7650 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset loc_760F - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset loc_75EA - 17520h
.rodata:0000000000017520                 dd offset loc_75C4 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset loc_75AD - 17520h, offset loc_7570 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset loc_76AC - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset loc_762F - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset loc_7548 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset loc_760F - 17520h, offset def_7546 - 17520h
.rodata:0000000000017520                 dd offset def_7546 - 17520h, offset loc_7597 - 17520h
.rodata:00000000000175F8 ; const char _PRETTY_FUNCTION___4162_0[]
.rodata:00000000000175F8 __PRETTY_FUNCTION___4162_0 db 'xstrtoumax',0
.rodata:00000000000175F8                                         ; DATA XREF: xstrtoumax:loc_76F5↑o
.rodata:0000000000017603                 align 8
.rodata:0000000000017608 ; const char aCoreutils831Li_0[]
.rodata:0000000000017608 aCoreutils831Li_0 db '../coreutils-8.31/lib/regexec.c',0
.rodata:0000000000017608                                         ; DATA XREF: pop_fail_stack_isra_25+7C↑o
.rodata:0000000000017608                                         ; re_search_internal+1034↑o ...
.rodata:0000000000017628 ; const char aCoreutils831Li_1[]
.rodata:0000000000017628 aCoreutils831Li_1 db '../coreutils-8.31/lib/regcomp.c',0
.rodata:0000000000017628                                         ; DATA XREF: parse_expression+1301↑o
.rodata:0000000000017628                                         ; re_compile_internal+962↑o ...
.rodata:0000000000017648 ; const char aIsEpsilonNodeN[]
.rodata:0000000000017648 aIsEpsilonNodeN db '!IS_EPSILON_NODE (node->token.type)',0
.rodata:0000000000017648                                         ; DATA XREF: re_compile_internal+10C0↑o
.rodata:000000000001766C                 align 10h
.rodata:0000000000017670 ; const char aNum0[]
.rodata:0000000000017670 aNum0           db 'num >= 0',0         ; DATA XREF: pop_fail_stack_isra_25+83↑o
.rodata:0000000000017670                                         ; parse_expression+1308↑o
.rodata:0000000000017679 aAlpha          db 'alpha',0            ; DATA XREF: build_charclass_isra_29+41↑o
.rodata:0000000000017679                                         ; build_charclass_isra_29+152↑o ...
.rodata:000000000001767F aUpper          db 'upper',0            ; DATA XREF: build_charclass_isra_29+23↑o
.rodata:000000000001767F                                         ; build_charclass_isra_29:loc_D31C↑o
.rodata:0000000000017685 aLower          db 'lower',0            ; DATA XREF: build_charclass_isra_29:loc_D006↑o
.rodata:0000000000017685                                         ; build_charclass_isra_29:loc_D078↑o
.rodata:000000000001768B aAlnum          db 'alnum',0            ; DATA XREF: build_charclass_isra_29+6C↑o
.rodata:000000000001768B                                         ; parse_expression+9CF↑o
.rodata:0000000000017691 aCntrl          db 'cntrl',0            ; DATA XREF: build_charclass_isra_29+8A↑o
.rodata:0000000000017697 aSpace          db 'space',0            ; DATA XREF: build_charclass_isra_29+1C2↑o
.rodata:0000000000017697                                         ; parse_expression+97F↑o
.rodata:000000000001769D aPrint          db 'print',0            ; DATA XREF: build_charclass_isra_29:loc_D283↑o
.rodata:00000000000176A3 aBlank          db 'blank',0            ; DATA XREF: build_charclass_isra_29:loc_D382↑o
.rodata:00000000000176A9 ; const char aGraph[]
.rodata:00000000000176A9 aGraph          db 'graph',0            ; DATA XREF: build_charclass_isra_29:loc_D48E↑o
.rodata:00000000000176AF ; const char aPunct[]
.rodata:00000000000176AF aPunct          db 'punct',0            ; DATA XREF: build_charclass_isra_29:loc_D51A↑o
.rodata:00000000000176B5 ; const char asc_176B5[1]
.rodata:00000000000176B5 asc_176B5       db 'x'                  ; DATA XREF: build_charclass_isra_29:loc_D5A4↑o
.rodata:00000000000176B6 aDigit          db 'digit',0            ; DATA XREF: build_charclass_isra_29+290↑o
.rodata:00000000000176BC ; const char aErrRegEspace[]
.rodata:00000000000176BC aErrRegEspace   db 'err == REG_ESPACE',0
.rodata:00000000000176BC                                         ; DATA XREF: re_search_internal+103B↑o
.rodata:00000000000176BC                                         ; re_search_internal+153F↑o
.rodata:00000000000176CE a8              db '8',0                ; DATA XREF: re_compile_internal+160↑o
.rodata:00000000000176D0 ; const char aNodeNextNull[]
.rodata:00000000000176D0 aNodeNextNull   db 'node->next == NULL',0
.rodata:00000000000176D0                                         ; DATA XREF: re_compile_internal+969↑o
.rodata:00000000000176E3 ; const char aLeft1[]
.rodata:00000000000176E3 aLeft1          db 'left > -1',0        ; DATA XREF: re_compile_internal+10DF↑o
.rodata:00000000000176ED ; const char aRight1[]
.rodata:00000000000176ED aRight1         db 'right > -1',0       ; DATA XREF: re_compile_internal+10A1↑o
.rodata:00000000000176F8 ; const char aRegsAllocatedR[]
.rodata:00000000000176F8 aRegsAllocatedR db 'regs_allocated == REGS_FIXED',0
.rodata:00000000000176F8                                         ; DATA XREF: re_search_stub+46E↑o
.rodata:0000000000017715 ; const char aRegsNumRegsNre[]
.rodata:0000000000017715 aRegsNumRegsNre db 'regs->num_regs >= nregs',0
.rodata:0000000000017715                                         ; DATA XREF: re_search_stub+44F↑o
.rodata:000000000001772D ; const char aPmatch0RmSoSta[]
.rodata:000000000001772D aPmatch0RmSoSta db 'pmatch[0].rm_so == start',0
.rodata:000000000001772D                                         ; DATA XREF: re_search_stub+430↑o
.rodata:0000000000017746                 align 20h
.rodata:0000000000017760 jpt_105E6       dd offset loc_10BB4 - 17760h
.rodata:0000000000017760                                         ; DATA XREF: re_search_internal+4E8↑o
.rodata:0000000000017760                                         ; re_search_internal+4EF↑r
.rodata:0000000000017760                 dd offset loc_10BB4 - 17760h ; jump table for switch statement
.rodata:0000000000017760                 dd offset loc_1061E - 17760h
.rodata:0000000000017760                 dd offset loc_10B42 - 17760h
.rodata:0000000000017760                 dd offset loc_106C8 - 17760h
.rodata:0000000000017774 jpt_1241C       dd offset loc_12600 - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                                         ; DATA XREF: peek_token+13A↑o
.rodata:0000000000017774                                         ; peek_token+145↑r
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h ; jump table for switch statement
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset loc_12670 - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset loc_12650 - 17774h, offset loc_12630 - 17774h
.rodata:0000000000017774                 dd offset loc_12620 - 17774h, offset loc_125E0 - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset loc_125D0 - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset loc_125B0 - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset loc_125A0 - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset loc_12578 - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset def_1241C - 17774h
.rodata:0000000000017774                 dd offset def_1241C - 17774h, offset loc_12550 - 17774h
.rodata:0000000000017774                 dd offset loc_12528 - 17774h, offset loc_12500 - 17774h
.rodata:0000000000017944 jpt_124C8       dd offset loc_12893 - 17944h, offset loc_1287C - 17944h
.rodata:0000000000017944                                         ; DATA XREF: peek_token+1E7↑o
.rodata:0000000000017944                                         ; peek_token+1F1↑r
.rodata:0000000000017944                 dd offset loc_12865 - 17944h, offset def_124C8 - 17944h ; jump table for switch statement
.rodata:0000000000017944                 dd offset loc_1284A - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset loc_12821 - 17944h, offset loc_12821 - 17944h
.rodata:0000000000017944                 dd offset loc_12821 - 17944h, offset loc_12821 - 17944h
.rodata:0000000000017944                 dd offset loc_12821 - 17944h, offset loc_12821 - 17944h
.rodata:0000000000017944                 dd offset loc_12821 - 17944h, offset loc_12821 - 17944h
.rodata:0000000000017944                 dd offset loc_12821 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset loc_127FF - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset loc_127DD - 17944h
.rodata:0000000000017944                 dd offset loc_127C2 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset loc_127A0 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset loc_12785 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset loc_1276A - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset loc_12748 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset loc_12726 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset loc_126ED - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset loc_126D2 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset def_124C8 - 17944h, offset def_124C8 - 17944h
.rodata:0000000000017944                 dd offset loc_126B4 - 17944h, offset loc_12699 - 17944h
.rodata:0000000000017944                 dd offset loc_12708 - 17944h
.rodata:0000000000017AA0 jpt_12AEF       dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                                         ; DATA XREF: parse_expression+4B↑o
.rodata:0000000000017AA0                                         ; parse_expression+58↑r
.rodata:0000000000017AA0                 dd offset loc_1351E - 17AA0h ; jump table for switch statement
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_1346F - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_134D9 - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_12AF1 - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_13608 - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_12BDD - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_13150 - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_12BDD - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_12BDD - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_13290 - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_12BCE - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_12BFB - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset def_12AEF - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_13448 - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_13448 - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_133F8 - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_133F8 - 17AA0h
.rodata:0000000000017AA0                 dd offset loc_13673 - 17AA0h
.rodata:0000000000017B34 jpt_133F6       dd offset loc_13761 - 17B34h
.rodata:0000000000017B34                                         ; DATA XREF: parse_expression+88B↑o
.rodata:0000000000017B34                                         ; parse_expression+95E↑r
.rodata:0000000000017B34                 dd offset loc_13737 - 17B34h ; jump table for switch statement
.rodata:0000000000017B34                 dd offset loc_136ED - 17B34h
.rodata:0000000000017B34                 dd offset loc_136B5 - 17B34h
.rodata:0000000000017B34                 dd offset loc_13789 - 17B34h
.rodata:0000000000017B48 jpt_14953       dd offset def_14953 - 17B48h
.rodata:0000000000017B48                                         ; DATA XREF: re_compile_internal+6AC↑o
.rodata:0000000000017B48                                         ; re_compile_internal+6CC↑r
.rodata:0000000000017B48                 dd offset def_14953 - 17B48h ; jump table for switch statement
.rodata:0000000000017B48                 dd offset loc_14BD0 - 17B48h
.rodata:0000000000017B48                 dd offset def_14953 - 17B48h
.rodata:0000000000017B48                 dd offset loc_14C00 - 17B48h
.rodata:0000000000017B48                 dd offset def_14953 - 17B48h
.rodata:0000000000017B48                 dd offset def_14953 - 17B48h
.rodata:0000000000017B48                 dd offset def_14953 - 17B48h
.rodata:0000000000017B48                 dd offset loc_14B78 - 17B48h
.rodata:0000000000017B48                 dd offset loc_14B78 - 17B48h
.rodata:0000000000017B48                 dd offset loc_14AB7 - 17B48h
.rodata:0000000000017B48                 dd offset loc_14AB7 - 17B48h
.rodata:0000000000017B48                 dd offset loc_14B78 - 17B48h
.rodata:0000000000017B48                 dd offset def_14953 - 17B48h
.rodata:0000000000017B48                 dd offset def_14953 - 17B48h
.rodata:0000000000017B48                 dd offset def_14953 - 17B48h
.rodata:0000000000017B48                 dd offset loc_14A31 - 17B48h
.rodata:0000000000017B8C jpt_15053       dd offset def_15053 - 17B8Ch
.rodata:0000000000017B8C                                         ; DATA XREF: re_compile_internal+DAF↑o
.rodata:0000000000017B8C                                         ; re_compile_internal+DCC↑r
.rodata:0000000000017B8C                 dd offset loc_15210 - 17B8Ch ; jump table for switch statement
.rodata:0000000000017B8C                 dd offset loc_151BC - 17B8Ch
.rodata:0000000000017B8C                 dd offset loc_15238 - 17B8Ch
.rodata:0000000000017B8C                 dd offset loc_151BC - 17B8Ch
.rodata:0000000000017B8C                 dd offset loc_151B9 - 17B8Ch
.rodata:0000000000017B8C                 dd offset loc_14E2E - 17B8Ch
.rodata:0000000000017B8C                 dd offset def_15053 - 17B8Ch
.rodata:0000000000017B8C                 dd offset loc_151BC - 17B8Ch
.rodata:0000000000017B8C                 dd offset loc_151BC - 17B8Ch
.rodata:0000000000017B8C                 dd offset loc_151BC - 17B8Ch
.rodata:0000000000017B8C                 dd offset loc_151BC - 17B8Ch
.rodata:0000000000017B8C                 dd offset loc_15219 - 17B8Ch
.rodata:0000000000017BC0 ; const char _PRETTY_FUNCTION___7859[]
.rodata:0000000000017BC0 __PRETTY_FUNCTION___7859 db 're_copy_regs',0
.rodata:0000000000017BC0                                         ; DATA XREF: re_search_stub:loc_15911↑o
.rodata:0000000000017BC0                                         ; re_search_stub:loc_15930↑o
.rodata:0000000000017BCD                 align 10h
.rodata:0000000000017BD0 ; const char _PRETTY_FUNCTION___7847[]
.rodata:0000000000017BD0 __PRETTY_FUNCTION___7847 db 're_search_stub',0
.rodata:0000000000017BD0                                         ; DATA XREF: re_search_stub:loc_158F2↑o
.rodata:0000000000017BDF                 align 20h
.rodata:0000000000017BE0 ; const char _PRETTY_FUNCTION___8040[]
.rodata:0000000000017BE0 __PRETTY_FUNCTION___8040 db 'pop_fail_stack',0
.rodata:0000000000017BE0                                         ; DATA XREF: pop_fail_stack_isra_25:loc_CE55↑o
.rodata:0000000000017BEF                 align 10h
.rodata:0000000000017BF0 ; const char _PRETTY_FUNCTION___7972[]
.rodata:0000000000017BF0 __PRETTY_FUNCTION___7972 db 'check_matching',0
.rodata:0000000000017BF0                                         ; DATA XREF: re_search_internal+102D↑o
.rodata:0000000000017BF0                                         ; re_search_internal+1531↑o
.rodata:0000000000017BFF                 align 20h
.rodata:0000000000017C00 ; const char _PRETTY_FUNCTION___6981[]
.rodata:0000000000017C00 __PRETTY_FUNCTION___6981 db 'link_nfa_nodes',0
.rodata:0000000000017C00                                         ; DATA XREF: re_compile_internal+95B↑o
.rodata:0000000000017C00                                         ; re_compile_internal:loc_15313↑o ...
.rodata:0000000000017C0F                 align 10h
.rodata:0000000000017C10 ; const char _PRETTY_FUNCTION___7327[]
.rodata:0000000000017C10 __PRETTY_FUNCTION___7327 db 'parse_bracket_exp',0
.rodata:0000000000017C10                                         ; DATA XREF: parse_expression:def_133F6↑o
.rodata:0000000000017C22                 align 20h
.rodata:0000000000017C40 utf8_sb_map     db 0FFh                 ; DATA XREF: free_dfa_content+131↑o
.rodata:0000000000017C40                                         ; re_compile_internal+1B3↑o
.rodata:0000000000017C41                 db 0FFh
.rodata:0000000000017C42                 db 0FFh
.rodata:0000000000017C43                 db 0FFh
.rodata:0000000000017C44                 db 0FFh
.rodata:0000000000017C45                 db 0FFh
.rodata:0000000000017C46                 db 0FFh
.rodata:0000000000017C47                 db 0FFh
.rodata:0000000000017C48                 db 0FFh
.rodata:0000000000017C49                 db 0FFh
.rodata:0000000000017C4A                 db 0FFh
.rodata:0000000000017C4B                 db 0FFh
.rodata:0000000000017C4C                 db 0FFh
.rodata:0000000000017C4D                 db 0FFh
.rodata:0000000000017C4E                 db 0FFh
.rodata:0000000000017C4F                 db 0FFh
.rodata:0000000000017C50                 db    0
.rodata:0000000000017C51                 db    0
.rodata:0000000000017C52                 db    0
.rodata:0000000000017C53                 db    0
.rodata:0000000000017C54                 db    0
.rodata:0000000000017C55                 db    0
.rodata:0000000000017C56                 db    0
.rodata:0000000000017C57                 db    0
.rodata:0000000000017C58                 db    0
.rodata:0000000000017C59                 db    0
.rodata:0000000000017C5A                 db    0
.rodata:0000000000017C5B                 db    0
.rodata:0000000000017C5C                 db    0
.rodata:0000000000017C5D                 db    0
.rodata:0000000000017C5E                 db    0
.rodata:0000000000017C5F                 db    0
.rodata:0000000000017C60 __re_error_msgid_idx db    0            ; DATA XREF: rpl_re_compile_pattern+3E↑o
.rodata:0000000000017C60                                         ; rpl_regerror+F↑o
.rodata:0000000000017C61                 db    0
.rodata:0000000000017C62                 db    0
.rodata:0000000000017C63                 db    0
.rodata:0000000000017C64                 db    0
.rodata:0000000000017C65                 db    0
.rodata:0000000000017C66                 db    0
.rodata:0000000000017C67                 db    0
.rodata:0000000000017C68                 db    8
.rodata:0000000000017C69                 db    0
.rodata:0000000000017C6A                 db    0
.rodata:0000000000017C6B                 db    0
.rodata:0000000000017C6C                 db    0
.rodata:0000000000017C6D                 db    0
.rodata:0000000000017C6E                 db    0
.rodata:0000000000017C6F                 db    0
.rodata:0000000000017C70                 db  11h
.rodata:0000000000017C71                 db    0
.rodata:0000000000017C72                 db    0
.rodata:0000000000017C73                 db    0
.rodata:0000000000017C74                 db    0
.rodata:0000000000017C75                 db    0
.rodata:0000000000017C76                 db    0
.rodata:0000000000017C77                 db    0
.rodata:0000000000017C78                 db  2Ch ; ,
.rodata:0000000000017C79                 db    0
.rodata:0000000000017C7A                 db    0
.rodata:0000000000017C7B                 db    0
.rodata:0000000000017C7C                 db    0
.rodata:0000000000017C7D                 db    0
.rodata:0000000000017C7E                 db    0
.rodata:0000000000017C7F                 db    0
.rodata:0000000000017C80                 db  48h ; H
.rodata:0000000000017C81                 db    0
.rodata:0000000000017C82                 db    0
.rodata:0000000000017C83                 db    0
.rodata:0000000000017C84                 db    0
.rodata:0000000000017C85                 db    0
.rodata:0000000000017C86                 db    0
.rodata:0000000000017C87                 db    0
.rodata:0000000000017C88                 db  65h ; e
.rodata:0000000000017C89                 db    0
.rodata:0000000000017C8A                 db    0
.rodata:0000000000017C8B                 db    0
.rodata:0000000000017C8C                 db    0
.rodata:0000000000017C8D                 db    0
.rodata:0000000000017C8E                 db    0
.rodata:0000000000017C8F                 db    0
.rodata:0000000000017C90                 db  78h ; x
.rodata:0000000000017C91                 db    0
.rodata:0000000000017C92                 db    0
.rodata:0000000000017C93                 db    0
.rodata:0000000000017C94                 db    0
.rodata:0000000000017C95                 db    0
.rodata:0000000000017C96                 db    0
.rodata:0000000000017C97                 db    0
.rodata:0000000000017C98                 db  8Fh
.rodata:0000000000017C99                 db    0
.rodata:0000000000017C9A                 db    0
.rodata:0000000000017C9B                 db    0
.rodata:0000000000017C9C                 db    0
.rodata:0000000000017C9D                 db    0
.rodata:0000000000017C9E                 db    0
.rodata:0000000000017C9F                 db    0
.rodata:0000000000017CA0                 db 0AEh
.rodata:0000000000017CA1                 db    0
.rodata:0000000000017CA2                 db    0
.rodata:0000000000017CA3                 db    0
.rodata:0000000000017CA4                 db    0
.rodata:0000000000017CA5                 db    0
.rodata:0000000000017CA6                 db    0
.rodata:0000000000017CA7                 db    0
.rodata:0000000000017CA8                 db 0C0h
.rodata:0000000000017CA9                 db    0
.rodata:0000000000017CAA                 db    0
.rodata:0000000000017CAB                 db    0
.rodata:0000000000017CAC                 db    0
.rodata:0000000000017CAD                 db    0
.rodata:0000000000017CAE                 db    0
.rodata:0000000000017CAF                 db    0
.rodata:0000000000017CB0                 db 0CDh
.rodata:0000000000017CB1                 db    0
.rodata:0000000000017CB2                 db    0
.rodata:0000000000017CB3                 db    0
.rodata:0000000000017CB4                 db    0
.rodata:0000000000017CB5                 db    0
.rodata:0000000000017CB6                 db    0
.rodata:0000000000017CB7                 db    0
.rodata:0000000000017CB8                 db 0E5h
.rodata:0000000000017CB9                 db    0
.rodata:0000000000017CBA                 db    0
.rodata:0000000000017CBB                 db    0
.rodata:0000000000017CBC                 db    0
.rodata:0000000000017CBD                 db    0
.rodata:0000000000017CBE                 db    0
.rodata:0000000000017CBF                 db    0
.rodata:0000000000017CC0                 db 0F7h
.rodata:0000000000017CC1                 db    0
.rodata:0000000000017CC2                 db    0
.rodata:0000000000017CC3                 db    0
.rodata:0000000000017CC4                 db    0
.rodata:0000000000017CC5                 db    0
.rodata:0000000000017CC6                 db    0
.rodata:0000000000017CC7                 db    0
.rodata:0000000000017CC8                 db    8
.rodata:0000000000017CC9                 db    1
.rodata:0000000000017CCA                 db    0
.rodata:0000000000017CCB                 db    0
.rodata:0000000000017CCC                 db    0
.rodata:0000000000017CCD                 db    0
.rodata:0000000000017CCE                 db    0
.rodata:0000000000017CCF                 db    0
.rodata:0000000000017CD0                 db  2Dh ; -
.rodata:0000000000017CD1                 db    1
.rodata:0000000000017CD2                 db    0
.rodata:0000000000017CD3                 db    0
.rodata:0000000000017CD4                 db    0
.rodata:0000000000017CD5                 db    0
.rodata:0000000000017CD6                 db    0
.rodata:0000000000017CD7                 db    0
.rodata:0000000000017CD8                 db  51h ; Q
.rodata:0000000000017CD9                 db    1
.rodata:0000000000017CDA                 db    0
.rodata:0000000000017CDB                 db    0
.rodata:0000000000017CDC                 db    0
.rodata:0000000000017CDD                 db    0
.rodata:0000000000017CDE                 db    0
.rodata:0000000000017CDF                 db    0
.rodata:0000000000017CE0                 db  6Ch ; l
.rodata:0000000000017CE1                 db    1
.rodata:0000000000017CE2                 db    0
.rodata:0000000000017CE3                 db    0
.rodata:0000000000017CE4                 db    0
.rodata:0000000000017CE5                 db    0
.rodata:0000000000017CE6                 db    0
.rodata:0000000000017CE7                 db    0
.rodata:0000000000017CE8                 db    0
.rodata:0000000000017CE9                 db    0
.rodata:0000000000017CEA                 db    0
.rodata:0000000000017CEB                 db    0
.rodata:0000000000017CEC                 db    0
.rodata:0000000000017CED                 db    0
.rodata:0000000000017CEE                 db    0
.rodata:0000000000017CEF                 db    0
.rodata:0000000000017CF0                 db    0
.rodata:0000000000017CF1                 db    0
.rodata:0000000000017CF2                 db    0
.rodata:0000000000017CF3                 db    0
.rodata:0000000000017CF4                 db    0
.rodata:0000000000017CF5                 db    0
.rodata:0000000000017CF6                 db    0
.rodata:0000000000017CF7                 db    0
.rodata:0000000000017CF8                 db    0
.rodata:0000000000017CF9                 db    0
.rodata:0000000000017CFA                 db    0
.rodata:0000000000017CFB                 db    0
.rodata:0000000000017CFC                 db    0
.rodata:0000000000017CFD                 db    0
.rodata:0000000000017CFE                 db    0
.rodata:0000000000017CFF                 db    0
.rodata:0000000000017D00 __re_error_msgid db 'Success',0         ; DATA XREF: rpl_re_compile_pattern+47↑o
.rodata:0000000000017D00                                         ; rpl_regerror+19↑o
.rodata:0000000000017D08 aNoMatch        db 'No match',0
.rodata:0000000000017D11 aInvalidRegular db 'Invalid regular expression',0
.rodata:0000000000017D2C aInvalidCollati db 'Invalid collation character',0
.rodata:0000000000017D48 aInvalidCharact db 'Invalid character class name',0
.rodata:0000000000017D65 aTrailingBacksl db 'Trailing backslash',0
.rodata:0000000000017D78 aInvalidBackRef db 'Invalid back reference',0
.rodata:0000000000017D8F aUnmatchedOr    db 'Unmatched [, [^, [:, [., or [=',0
.rodata:0000000000017DAE aUnmatchedOr_0  db 'Unmatched ( or \(',0
.rodata:0000000000017DC0 aUnmatched      db 'Unmatched \{',0
.rodata:0000000000017DCD aInvalidContent db 'Invalid content of \{\}',0
.rodata:0000000000017DE5 aInvalidRangeEn db 'Invalid range end',0
.rodata:0000000000017DF7 aMemoryExhauste_0 db 'Memory exhausted',0
.rodata:0000000000017E08 aInvalidPrecedi db 'Invalid preceding regular expression',0
.rodata:0000000000017E2D aPrematureEndOf db 'Premature end of regular expression',0
.rodata:0000000000017E51 aRegularExpress db 'Regular expression too big',0
.rodata:0000000000017E6C aUnmatchedOr_1  db 'Unmatched ) or \)',0
.rodata:0000000000017E7E                 align 20h
.rodata:0000000000017E80 xmmword_17E80   xmmword 1010101010101010101010101010101h
.rodata:0000000000017E80                                         ; DATA XREF: re_compile_fastmap_iter_isra_30:loc_DD64↑r
.rodata:0000000000017E80                                         ; re_compile_fastmap_iter_isra_30:loc_DE04↑r
.rodata:0000000000017E90 unk_17E90       db  43h ; C             ; DATA XREF: hard_locale+18↑o
.rodata:0000000000017E91                 db    0
.rodata:0000000000017E92 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_15E90↑o
.rodata:0000000000017E98 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000017E98                                         ; locale_charset:loc_15EE0↑o
.rodata:0000000000017E98 _rodata         ends
.rodata:0000000000017E98
LOAD:0000000000017E9E ; ===========================================================================
LOAD:0000000000017E9E
LOAD:0000000000017E9E ; Segment type: Pure code
LOAD:0000000000017E9E ; Segment permissions: Read/Execute
LOAD:0000000000017E9E LOAD            segment byte public 'CODE' use64
LOAD:0000000000017E9E                 assume cs:LOAD
LOAD:0000000000017E9E                 ;org 17E9Eh
LOAD:0000000000017E9E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000017E9E                 align 20h
LOAD:0000000000017E9E LOAD            ends
LOAD:0000000000017E9E
.eh_frame_hdr:0000000000017EA0 ; ===========================================================================
.eh_frame_hdr:0000000000017EA0
.eh_frame_hdr:0000000000017EA0 ; Segment type: Pure data
.eh_frame_hdr:0000000000017EA0 ; Segment permissions: Read
.eh_frame_hdr:0000000000017EA0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000017EA0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000017EA0                 ;org 17EA0h
.eh_frame_hdr:0000000000017EA0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000017EA1                 db  1Bh
.eh_frame_hdr:0000000000017EA2                 db    3
.eh_frame_hdr:0000000000017EA3                 db  3Bh ; ;
.eh_frame_hdr:0000000000017EA4                 db 0ECh
.eh_frame_hdr:0000000000017EA5                 db    5
.eh_frame_hdr:0000000000017EA6                 db    0
.eh_frame_hdr:0000000000017EA7                 db    0
.eh_frame_hdr:0000000000017EA8                 db 0BCh
.eh_frame_hdr:0000000000017EA9                 db    0
.eh_frame_hdr:0000000000017EAA                 db    0
.eh_frame_hdr:0000000000017EAB                 db    0
.eh_frame_hdr:0000000000017EAC                 db  10h
.eh_frame_hdr:0000000000017EAD                 db  9Ch
.eh_frame_hdr:0000000000017EAE                 db 0FEh
.eh_frame_hdr:0000000000017EAF                 db 0FFh
.eh_frame_hdr:0000000000017EB0                 db  38h ; 8
.eh_frame_hdr:0000000000017EB1                 db    6
.eh_frame_hdr:0000000000017EB2                 db    0
.eh_frame_hdr:0000000000017EB3                 db    0
.eh_frame_hdr:0000000000017EB4                 db 0D0h
.eh_frame_hdr:0000000000017EB5                 db 0A0h
.eh_frame_hdr:0000000000017EB6                 db 0FEh
.eh_frame_hdr:0000000000017EB7                 db 0FFh
.eh_frame_hdr:0000000000017EB8                 db  60h ; `
.eh_frame_hdr:0000000000017EB9                 db    6
.eh_frame_hdr:0000000000017EBA                 db    0
.eh_frame_hdr:0000000000017EBB                 db    0
.eh_frame_hdr:0000000000017EBC                 db 0E0h
.eh_frame_hdr:0000000000017EBD                 db 0A0h
.eh_frame_hdr:0000000000017EBE                 db 0FEh
.eh_frame_hdr:0000000000017EBF                 db 0FFh
.eh_frame_hdr:0000000000017EC0                 db  44h ; D
.eh_frame_hdr:0000000000017EC1                 db    9
.eh_frame_hdr:0000000000017EC2                 db    0
.eh_frame_hdr:0000000000017EC3                 db    0
.eh_frame_hdr:0000000000017EC4                 db 0C0h
.eh_frame_hdr:0000000000017EC5                 db 0A1h
.eh_frame_hdr:0000000000017EC6                 db 0FEh
.eh_frame_hdr:0000000000017EC7                 db 0FFh
.eh_frame_hdr:0000000000017EC8                 db 0ECh
.eh_frame_hdr:0000000000017EC9                 db    9
.eh_frame_hdr:0000000000017ECA                 db    0
.eh_frame_hdr:0000000000017ECB                 db    0
.eh_frame_hdr:0000000000017ECC                 db 0F0h
.eh_frame_hdr:0000000000017ECD                 db 0B0h
.eh_frame_hdr:0000000000017ECE                 db 0FEh
.eh_frame_hdr:0000000000017ECF                 db 0FFh
.eh_frame_hdr:0000000000017ED0                 db    8
.eh_frame_hdr:0000000000017ED1                 db    6
.eh_frame_hdr:0000000000017ED2                 db    0
.eh_frame_hdr:0000000000017ED3                 db    0
.eh_frame_hdr:0000000000017ED4                 db    0
.eh_frame_hdr:0000000000017ED5                 db 0B2h
.eh_frame_hdr:0000000000017ED6                 db 0FEh
.eh_frame_hdr:0000000000017ED7                 db 0FFh
.eh_frame_hdr:0000000000017ED8                 db  78h ; x
.eh_frame_hdr:0000000000017ED9                 db    6
.eh_frame_hdr:0000000000017EDA                 db    0
.eh_frame_hdr:0000000000017EDB                 db    0
.eh_frame_hdr:0000000000017EDC                 db 0C0h
.eh_frame_hdr:0000000000017EDD                 db 0B2h
.eh_frame_hdr:0000000000017EDE                 db 0FEh
.eh_frame_hdr:0000000000017EDF                 db 0FFh
.eh_frame_hdr:0000000000017EE0                 db 0B0h
.eh_frame_hdr:0000000000017EE1                 db    6
.eh_frame_hdr:0000000000017EE2                 db    0
.eh_frame_hdr:0000000000017EE3                 db    0
.eh_frame_hdr:0000000000017EE4                 db  80h
.eh_frame_hdr:0000000000017EE5                 db 0B3h
.eh_frame_hdr:0000000000017EE6                 db 0FEh
.eh_frame_hdr:0000000000017EE7                 db 0FFh
.eh_frame_hdr:0000000000017EE8                 db 0F0h
.eh_frame_hdr:0000000000017EE9                 db    6
.eh_frame_hdr:0000000000017EEA                 db    0
.eh_frame_hdr:0000000000017EEB                 db    0
.eh_frame_hdr:0000000000017EEC                 db 0E0h
.eh_frame_hdr:0000000000017EED                 db 0B3h
.eh_frame_hdr:0000000000017EEE                 db 0FEh
.eh_frame_hdr:0000000000017EEF                 db 0FFh
.eh_frame_hdr:0000000000017EF0                 db  0Ch
.eh_frame_hdr:0000000000017EF1                 db    7
.eh_frame_hdr:0000000000017EF2                 db    0
.eh_frame_hdr:0000000000017EF3                 db    0
.eh_frame_hdr:0000000000017EF4                 db 0A0h
.eh_frame_hdr:0000000000017EF5                 db 0B5h
.eh_frame_hdr:0000000000017EF6                 db 0FEh
.eh_frame_hdr:0000000000017EF7                 db 0FFh
.eh_frame_hdr:0000000000017EF8                 db  48h ; H
.eh_frame_hdr:0000000000017EF9                 db    7
.eh_frame_hdr:0000000000017EFA                 db    0
.eh_frame_hdr:0000000000017EFB                 db    0
.eh_frame_hdr:0000000000017EFC                 db  30h ; 0
.eh_frame_hdr:0000000000017EFD                 db 0B6h
.eh_frame_hdr:0000000000017EFE                 db 0FEh
.eh_frame_hdr:0000000000017EFF                 db 0FFh
.eh_frame_hdr:0000000000017F00                 db  74h ; t
.eh_frame_hdr:0000000000017F01                 db    7
.eh_frame_hdr:0000000000017F02                 db    0
.eh_frame_hdr:0000000000017F03                 db    0
.eh_frame_hdr:0000000000017F04                 db  40h ; @
.eh_frame_hdr:0000000000017F05                 db 0B7h
.eh_frame_hdr:0000000000017F06                 db 0FEh
.eh_frame_hdr:0000000000017F07                 db 0FFh
.eh_frame_hdr:0000000000017F08                 db 0A8h
.eh_frame_hdr:0000000000017F09                 db    7
.eh_frame_hdr:0000000000017F0A                 db    0
.eh_frame_hdr:0000000000017F0B                 db    0
.eh_frame_hdr:0000000000017F0C                 db  70h ; p
.eh_frame_hdr:0000000000017F0D                 db 0B7h
.eh_frame_hdr:0000000000017F0E                 db 0FEh
.eh_frame_hdr:0000000000017F0F                 db 0FFh
.eh_frame_hdr:0000000000017F10                 db 0C4h
.eh_frame_hdr:0000000000017F11                 db    7
.eh_frame_hdr:0000000000017F12                 db    0
.eh_frame_hdr:0000000000017F13                 db    0
.eh_frame_hdr:0000000000017F14                 db  30h ; 0
.eh_frame_hdr:0000000000017F15                 db 0B8h
.eh_frame_hdr:0000000000017F16                 db 0FEh
.eh_frame_hdr:0000000000017F17                 db 0FFh
.eh_frame_hdr:0000000000017F18                 db 0ECh
.eh_frame_hdr:0000000000017F19                 db    7
.eh_frame_hdr:0000000000017F1A                 db    0
.eh_frame_hdr:0000000000017F1B                 db    0
.eh_frame_hdr:0000000000017F1C                 db  20h
.eh_frame_hdr:0000000000017F1D                 db 0B9h
.eh_frame_hdr:0000000000017F1E                 db 0FEh
.eh_frame_hdr:0000000000017F1F                 db 0FFh
.eh_frame_hdr:0000000000017F20                 db  28h ; (
.eh_frame_hdr:0000000000017F21                 db    8
.eh_frame_hdr:0000000000017F22                 db    0
.eh_frame_hdr:0000000000017F23                 db    0
.eh_frame_hdr:0000000000017F24                 db  70h ; p
.eh_frame_hdr:0000000000017F25                 db 0B9h
.eh_frame_hdr:0000000000017F26                 db 0FEh
.eh_frame_hdr:0000000000017F27                 db 0FFh
.eh_frame_hdr:0000000000017F28                 db  54h ; T
.eh_frame_hdr:0000000000017F29                 db    8
.eh_frame_hdr:0000000000017F2A                 db    0
.eh_frame_hdr:0000000000017F2B                 db    0
.eh_frame_hdr:0000000000017F2C                 db 0B0h
.eh_frame_hdr:0000000000017F2D                 db 0B9h
.eh_frame_hdr:0000000000017F2E                 db 0FEh
.eh_frame_hdr:0000000000017F2F                 db 0FFh
.eh_frame_hdr:0000000000017F30                 db  68h ; h
.eh_frame_hdr:0000000000017F31                 db    8
.eh_frame_hdr:0000000000017F32                 db    0
.eh_frame_hdr:0000000000017F33                 db    0
.eh_frame_hdr:0000000000017F34                 db  90h
.eh_frame_hdr:0000000000017F35                 db 0BAh
.eh_frame_hdr:0000000000017F36                 db 0FEh
.eh_frame_hdr:0000000000017F37                 db 0FFh
.eh_frame_hdr:0000000000017F38                 db  84h
.eh_frame_hdr:0000000000017F39                 db    8
.eh_frame_hdr:0000000000017F3A                 db    0
.eh_frame_hdr:0000000000017F3B                 db    0
.eh_frame_hdr:0000000000017F3C                 db 0F0h
.eh_frame_hdr:0000000000017F3D                 db 0BDh
.eh_frame_hdr:0000000000017F3E                 db 0FEh
.eh_frame_hdr:0000000000017F3F                 db 0FFh
.eh_frame_hdr:0000000000017F40                 db    4
.eh_frame_hdr:0000000000017F41                 db    9
.eh_frame_hdr:0000000000017F42                 db    0
.eh_frame_hdr:0000000000017F43                 db    0
.eh_frame_hdr:0000000000017F44                 db 0D0h
.eh_frame_hdr:0000000000017F45                 db 0BEh
.eh_frame_hdr:0000000000017F46                 db 0FEh
.eh_frame_hdr:0000000000017F47                 db 0FFh
.eh_frame_hdr:0000000000017F48                 db  2Ch ; ,
.eh_frame_hdr:0000000000017F49                 db    9
.eh_frame_hdr:0000000000017F4A                 db    0
.eh_frame_hdr:0000000000017F4B                 db    0
.eh_frame_hdr:0000000000017F4C                 db    0
.eh_frame_hdr:0000000000017F4D                 db 0BFh
.eh_frame_hdr:0000000000017F4E                 db 0FEh
.eh_frame_hdr:0000000000017F4F                 db 0FFh
.eh_frame_hdr:0000000000017F50                 db  6Ch ; l
.eh_frame_hdr:0000000000017F51                 db    9
.eh_frame_hdr:0000000000017F52                 db    0
.eh_frame_hdr:0000000000017F53                 db    0
.eh_frame_hdr:0000000000017F54                 db    0
.eh_frame_hdr:0000000000017F55                 db 0C0h
.eh_frame_hdr:0000000000017F56                 db 0FEh
.eh_frame_hdr:0000000000017F57                 db 0FFh
.eh_frame_hdr:0000000000017F58                 db 0A4h
.eh_frame_hdr:0000000000017F59                 db    9
.eh_frame_hdr:0000000000017F5A                 db    0
.eh_frame_hdr:0000000000017F5B                 db    0
.eh_frame_hdr:0000000000017F5C                 db  70h ; p
.eh_frame_hdr:0000000000017F5D                 db 0C0h
.eh_frame_hdr:0000000000017F5E                 db 0FEh
.eh_frame_hdr:0000000000017F5F                 db 0FFh
.eh_frame_hdr:0000000000017F60                 db 0C0h
.eh_frame_hdr:0000000000017F61                 db    9
.eh_frame_hdr:0000000000017F62                 db    0
.eh_frame_hdr:0000000000017F63                 db    0
.eh_frame_hdr:0000000000017F64                 db  90h
.eh_frame_hdr:0000000000017F65                 db 0C4h
.eh_frame_hdr:0000000000017F66                 db 0FEh
.eh_frame_hdr:0000000000017F67                 db 0FFh
.eh_frame_hdr:0000000000017F68                 db  48h ; H
.eh_frame_hdr:0000000000017F69                 db  0Ah
.eh_frame_hdr:0000000000017F6A                 db    0
.eh_frame_hdr:0000000000017F6B                 db    0
.eh_frame_hdr:0000000000017F6C                 db 0A0h
.eh_frame_hdr:0000000000017F6D                 db 0C4h
.eh_frame_hdr:0000000000017F6E                 db 0FEh
.eh_frame_hdr:0000000000017F6F                 db 0FFh
.eh_frame_hdr:0000000000017F70                 db  5Ch ; \
.eh_frame_hdr:0000000000017F71                 db  0Ah
.eh_frame_hdr:0000000000017F72                 db    0
.eh_frame_hdr:0000000000017F73                 db    0
.eh_frame_hdr:0000000000017F74                 db 0B0h
.eh_frame_hdr:0000000000017F75                 db 0C4h
.eh_frame_hdr:0000000000017F76                 db 0FEh
.eh_frame_hdr:0000000000017F77                 db 0FFh
.eh_frame_hdr:0000000000017F78                 db  70h ; p
.eh_frame_hdr:0000000000017F79                 db  0Ah
.eh_frame_hdr:0000000000017F7A                 db    0
.eh_frame_hdr:0000000000017F7B                 db    0
.eh_frame_hdr:0000000000017F7C                 db  60h ; `
.eh_frame_hdr:0000000000017F7D                 db 0C5h
.eh_frame_hdr:0000000000017F7E                 db 0FEh
.eh_frame_hdr:0000000000017F7F                 db 0FFh
.eh_frame_hdr:0000000000017F80                 db 0A0h
.eh_frame_hdr:0000000000017F81                 db  0Ah
.eh_frame_hdr:0000000000017F82                 db    0
.eh_frame_hdr:0000000000017F83                 db    0
.eh_frame_hdr:0000000000017F84                 db 0C0h
.eh_frame_hdr:0000000000017F85                 db 0C5h
.eh_frame_hdr:0000000000017F86                 db 0FEh
.eh_frame_hdr:0000000000017F87                 db 0FFh
.eh_frame_hdr:0000000000017F88                 db 0D8h
.eh_frame_hdr:0000000000017F89                 db  0Ah
.eh_frame_hdr:0000000000017F8A                 db    0
.eh_frame_hdr:0000000000017F8B                 db    0
.eh_frame_hdr:0000000000017F8C                 db  60h ; `
.eh_frame_hdr:0000000000017F8D                 db 0C6h
.eh_frame_hdr:0000000000017F8E                 db 0FEh
.eh_frame_hdr:0000000000017F8F                 db 0FFh
.eh_frame_hdr:0000000000017F90                 db    8
.eh_frame_hdr:0000000000017F91                 db  0Bh
.eh_frame_hdr:0000000000017F92                 db    0
.eh_frame_hdr:0000000000017F93                 db    0
.eh_frame_hdr:0000000000017F94                 db 0B0h
.eh_frame_hdr:0000000000017F95                 db 0C6h
.eh_frame_hdr:0000000000017F96                 db 0FEh
.eh_frame_hdr:0000000000017F97                 db 0FFh
.eh_frame_hdr:0000000000017F98                 db  20h
.eh_frame_hdr:0000000000017F99                 db  0Bh
.eh_frame_hdr:0000000000017F9A                 db    0
.eh_frame_hdr:0000000000017F9B                 db    0
.eh_frame_hdr:0000000000017F9C                 db  50h ; P
.eh_frame_hdr:0000000000017F9D                 db 0C7h
.eh_frame_hdr:0000000000017F9E                 db 0FEh
.eh_frame_hdr:0000000000017F9F                 db 0FFh
.eh_frame_hdr:0000000000017FA0                 db  40h ; @
.eh_frame_hdr:0000000000017FA1                 db  0Bh
.eh_frame_hdr:0000000000017FA2                 db    0
.eh_frame_hdr:0000000000017FA3                 db    0
.eh_frame_hdr:0000000000017FA4                 db  40h ; @
.eh_frame_hdr:0000000000017FA5                 db 0C8h
.eh_frame_hdr:0000000000017FA6                 db 0FEh
.eh_frame_hdr:0000000000017FA7                 db 0FFh
.eh_frame_hdr:0000000000017FA8                 db  84h
.eh_frame_hdr:0000000000017FA9                 db  0Bh
.eh_frame_hdr:0000000000017FAA                 db    0
.eh_frame_hdr:0000000000017FAB                 db    0
.eh_frame_hdr:0000000000017FAC                 db  80h
.eh_frame_hdr:0000000000017FAD                 db 0DAh
.eh_frame_hdr:0000000000017FAE                 db 0FEh
.eh_frame_hdr:0000000000017FAF                 db 0FFh
.eh_frame_hdr:0000000000017FB0                 db 0FCh
.eh_frame_hdr:0000000000017FB1                 db  0Bh
.eh_frame_hdr:0000000000017FB2                 db    0
.eh_frame_hdr:0000000000017FB3                 db    0
.eh_frame_hdr:0000000000017FB4                 db  30h ; 0
.eh_frame_hdr:0000000000017FB5                 db 0DCh
.eh_frame_hdr:0000000000017FB6                 db 0FEh
.eh_frame_hdr:0000000000017FB7                 db 0FFh
.eh_frame_hdr:0000000000017FB8                 db  68h ; h
.eh_frame_hdr:0000000000017FB9                 db  0Ch
.eh_frame_hdr:0000000000017FBA                 db    0
.eh_frame_hdr:0000000000017FBB                 db    0
.eh_frame_hdr:0000000000017FBC                 db  70h ; p
.eh_frame_hdr:0000000000017FBD                 db 0DCh
.eh_frame_hdr:0000000000017FBE                 db 0FEh
.eh_frame_hdr:0000000000017FBF                 db 0FFh
.eh_frame_hdr:0000000000017FC0                 db  94h
.eh_frame_hdr:0000000000017FC1                 db  0Ch
.eh_frame_hdr:0000000000017FC2                 db    0
.eh_frame_hdr:0000000000017FC3                 db    0
.eh_frame_hdr:0000000000017FC4                 db  90h
.eh_frame_hdr:0000000000017FC5                 db 0DCh
.eh_frame_hdr:0000000000017FC6                 db 0FEh
.eh_frame_hdr:0000000000017FC7                 db 0FFh
.eh_frame_hdr:0000000000017FC8                 db 0A8h
.eh_frame_hdr:0000000000017FC9                 db  0Ch
.eh_frame_hdr:0000000000017FCA                 db    0
.eh_frame_hdr:0000000000017FCB                 db    0
.eh_frame_hdr:0000000000017FCC                 db 0B0h
.eh_frame_hdr:0000000000017FCD                 db 0DCh
.eh_frame_hdr:0000000000017FCE                 db 0FEh
.eh_frame_hdr:0000000000017FCF                 db 0FFh
.eh_frame_hdr:0000000000017FD0                 db 0BCh
.eh_frame_hdr:0000000000017FD1                 db  0Ch
.eh_frame_hdr:0000000000017FD2                 db    0
.eh_frame_hdr:0000000000017FD3                 db    0
.eh_frame_hdr:0000000000017FD4                 db 0F0h
.eh_frame_hdr:0000000000017FD5                 db 0DCh
.eh_frame_hdr:0000000000017FD6                 db 0FEh
.eh_frame_hdr:0000000000017FD7                 db 0FFh
.eh_frame_hdr:0000000000017FD8                 db 0D0h
.eh_frame_hdr:0000000000017FD9                 db  0Ch
.eh_frame_hdr:0000000000017FDA                 db    0
.eh_frame_hdr:0000000000017FDB                 db    0
.eh_frame_hdr:0000000000017FDC                 db  10h
.eh_frame_hdr:0000000000017FDD                 db 0DDh
.eh_frame_hdr:0000000000017FDE                 db 0FEh
.eh_frame_hdr:0000000000017FDF                 db 0FFh
.eh_frame_hdr:0000000000017FE0                 db 0E4h
.eh_frame_hdr:0000000000017FE1                 db  0Ch
.eh_frame_hdr:0000000000017FE2                 db    0
.eh_frame_hdr:0000000000017FE3                 db    0
.eh_frame_hdr:0000000000017FE4                 db  40h ; @
.eh_frame_hdr:0000000000017FE5                 db 0DDh
.eh_frame_hdr:0000000000017FE6                 db 0FEh
.eh_frame_hdr:0000000000017FE7                 db 0FFh
.eh_frame_hdr:0000000000017FE8                 db 0F8h
.eh_frame_hdr:0000000000017FE9                 db  0Ch
.eh_frame_hdr:0000000000017FEA                 db    0
.eh_frame_hdr:0000000000017FEB                 db    0
.eh_frame_hdr:0000000000017FEC                 db 0C0h
.eh_frame_hdr:0000000000017FED                 db 0DDh
.eh_frame_hdr:0000000000017FEE                 db 0FEh
.eh_frame_hdr:0000000000017FEF                 db 0FFh
.eh_frame_hdr:0000000000017FF0                 db  4Ch ; L
.eh_frame_hdr:0000000000017FF1                 db  0Dh
.eh_frame_hdr:0000000000017FF2                 db    0
.eh_frame_hdr:0000000000017FF3                 db    0
.eh_frame_hdr:0000000000017FF4                 db 0B0h
.eh_frame_hdr:0000000000017FF5                 db 0DEh
.eh_frame_hdr:0000000000017FF6                 db 0FEh
.eh_frame_hdr:0000000000017FF7                 db 0FFh
.eh_frame_hdr:0000000000017FF8                 db 0B8h
.eh_frame_hdr:0000000000017FF9                 db  0Dh
.eh_frame_hdr:0000000000017FFA                 db    0
.eh_frame_hdr:0000000000017FFB                 db    0
.eh_frame_hdr:0000000000017FFC                 db 0C0h
.eh_frame_hdr:0000000000017FFD                 db 0DEh
.eh_frame_hdr:0000000000017FFE                 db 0FEh
.eh_frame_hdr:0000000000017FFF                 db 0FFh
.eh_frame_hdr:0000000000018000                 db 0CCh
.eh_frame_hdr:0000000000018001                 db  0Dh
.eh_frame_hdr:0000000000018002                 db    0
.eh_frame_hdr:0000000000018003                 db    0
.eh_frame_hdr:0000000000018004                 db  60h ; `
.eh_frame_hdr:0000000000018005                 db 0DFh
.eh_frame_hdr:0000000000018006                 db 0FEh
.eh_frame_hdr:0000000000018007                 db 0FFh
.eh_frame_hdr:0000000000018008                 db 0F8h
.eh_frame_hdr:0000000000018009                 db  0Dh
.eh_frame_hdr:000000000001800A                 db    0
.eh_frame_hdr:000000000001800B                 db    0
.eh_frame_hdr:000000000001800C                 db  80h
.eh_frame_hdr:000000000001800D                 db 0DFh
.eh_frame_hdr:000000000001800E                 db 0FEh
.eh_frame_hdr:000000000001800F                 db 0FFh
.eh_frame_hdr:0000000000018010                 db  0Ch
.eh_frame_hdr:0000000000018011                 db  0Eh
.eh_frame_hdr:0000000000018012                 db    0
.eh_frame_hdr:0000000000018013                 db    0
.eh_frame_hdr:0000000000018014                 db  90h
.eh_frame_hdr:0000000000018015                 db 0DFh
.eh_frame_hdr:0000000000018016                 db 0FEh
.eh_frame_hdr:0000000000018017                 db 0FFh
.eh_frame_hdr:0000000000018018                 db  20h
.eh_frame_hdr:0000000000018019                 db  0Eh
.eh_frame_hdr:000000000001801A                 db    0
.eh_frame_hdr:000000000001801B                 db    0
.eh_frame_hdr:000000000001801C                 db 0B0h
.eh_frame_hdr:000000000001801D                 db 0DFh
.eh_frame_hdr:000000000001801E                 db 0FEh
.eh_frame_hdr:000000000001801F                 db 0FFh
.eh_frame_hdr:0000000000018020                 db  34h ; 4
.eh_frame_hdr:0000000000018021                 db  0Eh
.eh_frame_hdr:0000000000018022                 db    0
.eh_frame_hdr:0000000000018023                 db    0
.eh_frame_hdr:0000000000018024                 db 0D0h
.eh_frame_hdr:0000000000018025                 db 0DFh
.eh_frame_hdr:0000000000018026                 db 0FEh
.eh_frame_hdr:0000000000018027                 db 0FFh
.eh_frame_hdr:0000000000018028                 db  48h ; H
.eh_frame_hdr:0000000000018029                 db  0Eh
.eh_frame_hdr:000000000001802A                 db    0
.eh_frame_hdr:000000000001802B                 db    0
.eh_frame_hdr:000000000001802C                 db  60h ; `
.eh_frame_hdr:000000000001802D                 db 0E0h
.eh_frame_hdr:000000000001802E                 db 0FEh
.eh_frame_hdr:000000000001802F                 db 0FFh
.eh_frame_hdr:0000000000018030                 db  64h ; d
.eh_frame_hdr:0000000000018031                 db  0Eh
.eh_frame_hdr:0000000000018032                 db    0
.eh_frame_hdr:0000000000018033                 db    0
.eh_frame_hdr:0000000000018034                 db 0F0h
.eh_frame_hdr:0000000000018035                 db 0E0h
.eh_frame_hdr:0000000000018036                 db 0FEh
.eh_frame_hdr:0000000000018037                 db 0FFh
.eh_frame_hdr:0000000000018038                 db  80h
.eh_frame_hdr:0000000000018039                 db  0Eh
.eh_frame_hdr:000000000001803A                 db    0
.eh_frame_hdr:000000000001803B                 db    0
.eh_frame_hdr:000000000001803C                 db    0
.eh_frame_hdr:000000000001803D                 db 0E1h
.eh_frame_hdr:000000000001803E                 db 0FEh
.eh_frame_hdr:000000000001803F                 db 0FFh
.eh_frame_hdr:0000000000018040                 db  94h
.eh_frame_hdr:0000000000018041                 db  0Eh
.eh_frame_hdr:0000000000018042                 db    0
.eh_frame_hdr:0000000000018043                 db    0
.eh_frame_hdr:0000000000018044                 db  10h
.eh_frame_hdr:0000000000018045                 db 0E1h
.eh_frame_hdr:0000000000018046                 db 0FEh
.eh_frame_hdr:0000000000018047                 db 0FFh
.eh_frame_hdr:0000000000018048                 db 0A8h
.eh_frame_hdr:0000000000018049                 db  0Eh
.eh_frame_hdr:000000000001804A                 db    0
.eh_frame_hdr:000000000001804B                 db    0
.eh_frame_hdr:000000000001804C                 db 0B0h
.eh_frame_hdr:000000000001804D                 db 0E1h
.eh_frame_hdr:000000000001804E                 db 0FEh
.eh_frame_hdr:000000000001804F                 db 0FFh
.eh_frame_hdr:0000000000018050                 db 0C4h
.eh_frame_hdr:0000000000018051                 db  0Eh
.eh_frame_hdr:0000000000018052                 db    0
.eh_frame_hdr:0000000000018053                 db    0
.eh_frame_hdr:0000000000018054                 db 0C0h
.eh_frame_hdr:0000000000018055                 db 0E1h
.eh_frame_hdr:0000000000018056                 db 0FEh
.eh_frame_hdr:0000000000018057                 db 0FFh
.eh_frame_hdr:0000000000018058                 db 0D8h
.eh_frame_hdr:0000000000018059                 db  0Eh
.eh_frame_hdr:000000000001805A                 db    0
.eh_frame_hdr:000000000001805B                 db    0
.eh_frame_hdr:000000000001805C                 db 0E0h
.eh_frame_hdr:000000000001805D                 db 0E1h
.eh_frame_hdr:000000000001805E                 db 0FEh
.eh_frame_hdr:000000000001805F                 db 0FFh
.eh_frame_hdr:0000000000018060                 db 0ECh
.eh_frame_hdr:0000000000018061                 db  0Eh
.eh_frame_hdr:0000000000018062                 db    0
.eh_frame_hdr:0000000000018063                 db    0
.eh_frame_hdr:0000000000018064                 db 0F0h
.eh_frame_hdr:0000000000018065                 db 0E1h
.eh_frame_hdr:0000000000018066                 db 0FEh
.eh_frame_hdr:0000000000018067                 db 0FFh
.eh_frame_hdr:0000000000018068                 db    0
.eh_frame_hdr:0000000000018069                 db  0Fh
.eh_frame_hdr:000000000001806A                 db    0
.eh_frame_hdr:000000000001806B                 db    0
.eh_frame_hdr:000000000001806C                 db  80h
.eh_frame_hdr:000000000001806D                 db 0E2h
.eh_frame_hdr:000000000001806E                 db 0FEh
.eh_frame_hdr:000000000001806F                 db 0FFh
.eh_frame_hdr:0000000000018070                 db  1Ch
.eh_frame_hdr:0000000000018071                 db  0Fh
.eh_frame_hdr:0000000000018072                 db    0
.eh_frame_hdr:0000000000018073                 db    0
.eh_frame_hdr:0000000000018074                 db  20h
.eh_frame_hdr:0000000000018075                 db 0E3h
.eh_frame_hdr:0000000000018076                 db 0FEh
.eh_frame_hdr:0000000000018077                 db 0FFh
.eh_frame_hdr:0000000000018078                 db  38h ; 8
.eh_frame_hdr:0000000000018079                 db  0Fh
.eh_frame_hdr:000000000001807A                 db    0
.eh_frame_hdr:000000000001807B                 db    0
.eh_frame_hdr:000000000001807C                 db  30h ; 0
.eh_frame_hdr:000000000001807D                 db 0E3h
.eh_frame_hdr:000000000001807E                 db 0FEh
.eh_frame_hdr:000000000001807F                 db 0FFh
.eh_frame_hdr:0000000000018080                 db  4Ch ; L
.eh_frame_hdr:0000000000018081                 db  0Fh
.eh_frame_hdr:0000000000018082                 db    0
.eh_frame_hdr:0000000000018083                 db    0
.eh_frame_hdr:0000000000018084                 db  50h ; P
.eh_frame_hdr:0000000000018085                 db 0E3h
.eh_frame_hdr:0000000000018086                 db 0FEh
.eh_frame_hdr:0000000000018087                 db 0FFh
.eh_frame_hdr:0000000000018088                 db  60h ; `
.eh_frame_hdr:0000000000018089                 db  0Fh
.eh_frame_hdr:000000000001808A                 db    0
.eh_frame_hdr:000000000001808B                 db    0
.eh_frame_hdr:000000000001808C                 db  70h ; p
.eh_frame_hdr:000000000001808D                 db 0E3h
.eh_frame_hdr:000000000001808E                 db 0FEh
.eh_frame_hdr:000000000001808F                 db 0FFh
.eh_frame_hdr:0000000000018090                 db  74h ; t
.eh_frame_hdr:0000000000018091                 db  0Fh
.eh_frame_hdr:0000000000018092                 db    0
.eh_frame_hdr:0000000000018093                 db    0
.eh_frame_hdr:0000000000018094                 db  80h
.eh_frame_hdr:0000000000018095                 db 0E3h
.eh_frame_hdr:0000000000018096                 db 0FEh
.eh_frame_hdr:0000000000018097                 db 0FFh
.eh_frame_hdr:0000000000018098                 db  88h
.eh_frame_hdr:0000000000018099                 db  0Fh
.eh_frame_hdr:000000000001809A                 db    0
.eh_frame_hdr:000000000001809B                 db    0
.eh_frame_hdr:000000000001809C                 db 0A0h
.eh_frame_hdr:000000000001809D                 db 0E3h
.eh_frame_hdr:000000000001809E                 db 0FEh
.eh_frame_hdr:000000000001809F                 db 0FFh
.eh_frame_hdr:00000000000180A0                 db  9Ch
.eh_frame_hdr:00000000000180A1                 db  0Fh
.eh_frame_hdr:00000000000180A2                 db    0
.eh_frame_hdr:00000000000180A3                 db    0
.eh_frame_hdr:00000000000180A4                 db 0C0h
.eh_frame_hdr:00000000000180A5                 db 0E3h
.eh_frame_hdr:00000000000180A6                 db 0FEh
.eh_frame_hdr:00000000000180A7                 db 0FFh
.eh_frame_hdr:00000000000180A8                 db 0B0h
.eh_frame_hdr:00000000000180A9                 db  0Fh
.eh_frame_hdr:00000000000180AA                 db    0
.eh_frame_hdr:00000000000180AB                 db    0
.eh_frame_hdr:00000000000180AC                 db 0E0h
.eh_frame_hdr:00000000000180AD                 db 0E3h
.eh_frame_hdr:00000000000180AE                 db 0FEh
.eh_frame_hdr:00000000000180AF                 db 0FFh
.eh_frame_hdr:00000000000180B0                 db 0C8h
.eh_frame_hdr:00000000000180B1                 db  0Fh
.eh_frame_hdr:00000000000180B2                 db    0
.eh_frame_hdr:00000000000180B3                 db    0
.eh_frame_hdr:00000000000180B4                 db  40h ; @
.eh_frame_hdr:00000000000180B5                 db 0E4h
.eh_frame_hdr:00000000000180B6                 db 0FEh
.eh_frame_hdr:00000000000180B7                 db 0FFh
.eh_frame_hdr:00000000000180B8                 db    0
.eh_frame_hdr:00000000000180B9                 db  10h
.eh_frame_hdr:00000000000180BA                 db    0
.eh_frame_hdr:00000000000180BB                 db    0
.eh_frame_hdr:00000000000180BC                 db  50h ; P
.eh_frame_hdr:00000000000180BD                 db 0E4h
.eh_frame_hdr:00000000000180BE                 db 0FEh
.eh_frame_hdr:00000000000180BF                 db 0FFh
.eh_frame_hdr:00000000000180C0                 db  18h
.eh_frame_hdr:00000000000180C1                 db  10h
.eh_frame_hdr:00000000000180C2                 db    0
.eh_frame_hdr:00000000000180C3                 db    0
.eh_frame_hdr:00000000000180C4                 db  70h ; p
.eh_frame_hdr:00000000000180C5                 db 0E8h
.eh_frame_hdr:00000000000180C6                 db 0FEh
.eh_frame_hdr:00000000000180C7                 db 0FFh
.eh_frame_hdr:00000000000180C8                 db  2Ch ; ,
.eh_frame_hdr:00000000000180C9                 db  11h
.eh_frame_hdr:00000000000180CA                 db    0
.eh_frame_hdr:00000000000180CB                 db    0
.eh_frame_hdr:00000000000180CC                 db  90h
.eh_frame_hdr:00000000000180CD                 db 0E8h
.eh_frame_hdr:00000000000180CE                 db 0FEh
.eh_frame_hdr:00000000000180CF                 db 0FFh
.eh_frame_hdr:00000000000180D0                 db  40h ; @
.eh_frame_hdr:00000000000180D1                 db  11h
.eh_frame_hdr:00000000000180D2                 db    0
.eh_frame_hdr:00000000000180D3                 db    0
.eh_frame_hdr:00000000000180D4                 db  10h
.eh_frame_hdr:00000000000180D5                 db 0E9h
.eh_frame_hdr:00000000000180D6                 db 0FEh
.eh_frame_hdr:00000000000180D7                 db 0FFh
.eh_frame_hdr:00000000000180D8                 db  5Ch ; \
.eh_frame_hdr:00000000000180D9                 db  11h
.eh_frame_hdr:00000000000180DA                 db    0
.eh_frame_hdr:00000000000180DB                 db    0
.eh_frame_hdr:00000000000180DC                 db 0F0h
.eh_frame_hdr:00000000000180DD                 db 0E9h
.eh_frame_hdr:00000000000180DE                 db 0FEh
.eh_frame_hdr:00000000000180DF                 db 0FFh
.eh_frame_hdr:00000000000180E0                 db  88h
.eh_frame_hdr:00000000000180E1                 db  11h
.eh_frame_hdr:00000000000180E2                 db    0
.eh_frame_hdr:00000000000180E3                 db    0
.eh_frame_hdr:00000000000180E4                 db  70h ; p
.eh_frame_hdr:00000000000180E5                 db 0EAh
.eh_frame_hdr:00000000000180E6                 db 0FEh
.eh_frame_hdr:00000000000180E7                 db 0FFh
.eh_frame_hdr:00000000000180E8                 db 0A8h
.eh_frame_hdr:00000000000180E9                 db  11h
.eh_frame_hdr:00000000000180EA                 db    0
.eh_frame_hdr:00000000000180EB                 db    0
.eh_frame_hdr:00000000000180EC                 db  90h
.eh_frame_hdr:00000000000180ED                 db 0EAh
.eh_frame_hdr:00000000000180EE                 db 0FEh
.eh_frame_hdr:00000000000180EF                 db 0FFh
.eh_frame_hdr:00000000000180F0                 db 0C4h
.eh_frame_hdr:00000000000180F1                 db  11h
.eh_frame_hdr:00000000000180F2                 db    0
.eh_frame_hdr:00000000000180F3                 db    0
.eh_frame_hdr:00000000000180F4                 db 0C0h
.eh_frame_hdr:00000000000180F5                 db 0EAh
.eh_frame_hdr:00000000000180F6                 db 0FEh
.eh_frame_hdr:00000000000180F7                 db 0FFh
.eh_frame_hdr:00000000000180F8                 db 0D8h
.eh_frame_hdr:00000000000180F9                 db  11h
.eh_frame_hdr:00000000000180FA                 db    0
.eh_frame_hdr:00000000000180FB                 db    0
.eh_frame_hdr:00000000000180FC                 db 0D0h
.eh_frame_hdr:00000000000180FD                 db 0EAh
.eh_frame_hdr:00000000000180FE                 db 0FEh
.eh_frame_hdr:00000000000180FF                 db 0FFh
.eh_frame_hdr:0000000000018100                 db 0ECh
.eh_frame_hdr:0000000000018101                 db  11h
.eh_frame_hdr:0000000000018102                 db    0
.eh_frame_hdr:0000000000018103                 db    0
.eh_frame_hdr:0000000000018104                 db  10h
.eh_frame_hdr:0000000000018105                 db 0EBh
.eh_frame_hdr:0000000000018106                 db 0FEh
.eh_frame_hdr:0000000000018107                 db 0FFh
.eh_frame_hdr:0000000000018108                 db  10h
.eh_frame_hdr:0000000000018109                 db  12h
.eh_frame_hdr:000000000001810A                 db    0
.eh_frame_hdr:000000000001810B                 db    0
.eh_frame_hdr:000000000001810C                 db  40h ; @
.eh_frame_hdr:000000000001810D                 db 0EBh
.eh_frame_hdr:000000000001810E                 db 0FEh
.eh_frame_hdr:000000000001810F                 db 0FFh
.eh_frame_hdr:0000000000018110                 db  24h ; $
.eh_frame_hdr:0000000000018111                 db  12h
.eh_frame_hdr:0000000000018112                 db    0
.eh_frame_hdr:0000000000018113                 db    0
.eh_frame_hdr:0000000000018114                 db 0D0h
.eh_frame_hdr:0000000000018115                 db 0EBh
.eh_frame_hdr:0000000000018116                 db 0FEh
.eh_frame_hdr:0000000000018117                 db 0FFh
.eh_frame_hdr:0000000000018118                 db  3Ch ; <
.eh_frame_hdr:0000000000018119                 db  12h
.eh_frame_hdr:000000000001811A                 db    0
.eh_frame_hdr:000000000001811B                 db    0
.eh_frame_hdr:000000000001811C                 db  20h
.eh_frame_hdr:000000000001811D                 db 0ECh
.eh_frame_hdr:000000000001811E                 db 0FEh
.eh_frame_hdr:000000000001811F                 db 0FFh
.eh_frame_hdr:0000000000018120                 db  54h ; T
.eh_frame_hdr:0000000000018121                 db  12h
.eh_frame_hdr:0000000000018122                 db    0
.eh_frame_hdr:0000000000018123                 db    0
.eh_frame_hdr:0000000000018124                 db  40h ; @
.eh_frame_hdr:0000000000018125                 db 0ECh
.eh_frame_hdr:0000000000018126                 db 0FEh
.eh_frame_hdr:0000000000018127                 db 0FFh
.eh_frame_hdr:0000000000018128                 db  70h ; p
.eh_frame_hdr:0000000000018129                 db  12h
.eh_frame_hdr:000000000001812A                 db    0
.eh_frame_hdr:000000000001812B                 db    0
.eh_frame_hdr:000000000001812C                 db  70h ; p
.eh_frame_hdr:000000000001812D                 db 0ECh
.eh_frame_hdr:000000000001812E                 db 0FEh
.eh_frame_hdr:000000000001812F                 db 0FFh
.eh_frame_hdr:0000000000018130                 db  8Ch
.eh_frame_hdr:0000000000018131                 db  12h
.eh_frame_hdr:0000000000018132                 db    0
.eh_frame_hdr:0000000000018133                 db    0
.eh_frame_hdr:0000000000018134                 db 0A0h
.eh_frame_hdr:0000000000018135                 db 0ECh
.eh_frame_hdr:0000000000018136                 db 0FEh
.eh_frame_hdr:0000000000018137                 db 0FFh
.eh_frame_hdr:0000000000018138                 db 0B4h
.eh_frame_hdr:0000000000018139                 db  12h
.eh_frame_hdr:000000000001813A                 db    0
.eh_frame_hdr:000000000001813B                 db    0
.eh_frame_hdr:000000000001813C                 db 0C0h
.eh_frame_hdr:000000000001813D                 db 0ECh
.eh_frame_hdr:000000000001813E                 db 0FEh
.eh_frame_hdr:000000000001813F                 db 0FFh
.eh_frame_hdr:0000000000018140                 db 0D0h
.eh_frame_hdr:0000000000018141                 db  12h
.eh_frame_hdr:0000000000018142                 db    0
.eh_frame_hdr:0000000000018143                 db    0
.eh_frame_hdr:0000000000018144                 db 0E0h
.eh_frame_hdr:0000000000018145                 db 0EDh
.eh_frame_hdr:0000000000018146                 db 0FEh
.eh_frame_hdr:0000000000018147                 db 0FFh
.eh_frame_hdr:0000000000018148                 db  1Ch
.eh_frame_hdr:0000000000018149                 db  13h
.eh_frame_hdr:000000000001814A                 db    0
.eh_frame_hdr:000000000001814B                 db    0
.eh_frame_hdr:000000000001814C                 db  10h
.eh_frame_hdr:000000000001814D                 db 0EEh
.eh_frame_hdr:000000000001814E                 db 0FEh
.eh_frame_hdr:000000000001814F                 db 0FFh
.eh_frame_hdr:0000000000018150                 db  38h ; 8
.eh_frame_hdr:0000000000018151                 db  13h
.eh_frame_hdr:0000000000018152                 db    0
.eh_frame_hdr:0000000000018153                 db    0
.eh_frame_hdr:0000000000018154                 db 0D0h
.eh_frame_hdr:0000000000018155                 db 0F4h
.eh_frame_hdr:0000000000018156                 db 0FEh
.eh_frame_hdr:0000000000018157                 db 0FFh
.eh_frame_hdr:0000000000018158                 db  88h
.eh_frame_hdr:0000000000018159                 db  13h
.eh_frame_hdr:000000000001815A                 db    0
.eh_frame_hdr:000000000001815B                 db    0
.eh_frame_hdr:000000000001815C                 db 0F0h
.eh_frame_hdr:000000000001815D                 db 0F8h
.eh_frame_hdr:000000000001815E                 db 0FEh
.eh_frame_hdr:000000000001815F                 db 0FFh
.eh_frame_hdr:0000000000018160                 db 0D8h
.eh_frame_hdr:0000000000018161                 db  13h
.eh_frame_hdr:0000000000018162                 db    0
.eh_frame_hdr:0000000000018163                 db    0
.eh_frame_hdr:0000000000018164                 db  70h ; p
.eh_frame_hdr:0000000000018165                 db 0F9h
.eh_frame_hdr:0000000000018166                 db 0FEh
.eh_frame_hdr:0000000000018167                 db 0FFh
.eh_frame_hdr:0000000000018168                 db  10h
.eh_frame_hdr:0000000000018169                 db  14h
.eh_frame_hdr:000000000001816A                 db    0
.eh_frame_hdr:000000000001816B                 db    0
.eh_frame_hdr:000000000001816C                 db 0F0h
.eh_frame_hdr:000000000001816D                 db 0FBh
.eh_frame_hdr:000000000001816E                 db 0FEh
.eh_frame_hdr:000000000001816F                 db 0FFh
.eh_frame_hdr:0000000000018170                 db  48h ; H
.eh_frame_hdr:0000000000018171                 db  14h
.eh_frame_hdr:0000000000018172                 db    0
.eh_frame_hdr:0000000000018173                 db    0
.eh_frame_hdr:0000000000018174                 db  30h ; 0
.eh_frame_hdr:0000000000018175                 db 0FCh
.eh_frame_hdr:0000000000018176                 db 0FEh
.eh_frame_hdr:0000000000018177                 db 0FFh
.eh_frame_hdr:0000000000018178                 db  68h ; h
.eh_frame_hdr:0000000000018179                 db  14h
.eh_frame_hdr:000000000001817A                 db    0
.eh_frame_hdr:000000000001817B                 db    0
.eh_frame_hdr:000000000001817C                 db  90h
.eh_frame_hdr:000000000001817D                 db 0FCh
.eh_frame_hdr:000000000001817E                 db 0FEh
.eh_frame_hdr:000000000001817F                 db 0FFh
.eh_frame_hdr:0000000000018180                 db  98h
.eh_frame_hdr:0000000000018181                 db  14h
.eh_frame_hdr:0000000000018182                 db    0
.eh_frame_hdr:0000000000018183                 db    0
.eh_frame_hdr:0000000000018184                 db  20h
.eh_frame_hdr:0000000000018185                 db 0FDh
.eh_frame_hdr:0000000000018186                 db 0FEh
.eh_frame_hdr:0000000000018187                 db 0FFh
.eh_frame_hdr:0000000000018188                 db 0D8h
.eh_frame_hdr:0000000000018189                 db  14h
.eh_frame_hdr:000000000001818A                 db    0
.eh_frame_hdr:000000000001818B                 db    0
.eh_frame_hdr:000000000001818C                 db  50h ; P
.eh_frame_hdr:000000000001818D                 db 0FEh
.eh_frame_hdr:000000000001818E                 db 0FEh
.eh_frame_hdr:000000000001818F                 db 0FFh
.eh_frame_hdr:0000000000018190                 db 0ECh
.eh_frame_hdr:0000000000018191                 db  14h
.eh_frame_hdr:0000000000018192                 db    0
.eh_frame_hdr:0000000000018193                 db    0
.eh_frame_hdr:0000000000018194                 db  70h ; p
.eh_frame_hdr:0000000000018195                 db 0FEh
.eh_frame_hdr:0000000000018196                 db 0FEh
.eh_frame_hdr:0000000000018197                 db 0FFh
.eh_frame_hdr:0000000000018198                 db    0
.eh_frame_hdr:0000000000018199                 db  15h
.eh_frame_hdr:000000000001819A                 db    0
.eh_frame_hdr:000000000001819B                 db    0
.eh_frame_hdr:000000000001819C                 db 0A0h
.eh_frame_hdr:000000000001819D                 db    0
.eh_frame_hdr:000000000001819E                 db 0FFh
.eh_frame_hdr:000000000001819F                 db 0FFh
.eh_frame_hdr:00000000000181A0                 db  94h
.eh_frame_hdr:00000000000181A1                 db  15h
.eh_frame_hdr:00000000000181A2                 db    0
.eh_frame_hdr:00000000000181A3                 db    0
.eh_frame_hdr:00000000000181A4                 db  10h
.eh_frame_hdr:00000000000181A5                 db    1
.eh_frame_hdr:00000000000181A6                 db 0FFh
.eh_frame_hdr:00000000000181A7                 db 0FFh
.eh_frame_hdr:00000000000181A8                 db 0A8h
.eh_frame_hdr:00000000000181A9                 db  15h
.eh_frame_hdr:00000000000181AA                 db    0
.eh_frame_hdr:00000000000181AB                 db    0
.eh_frame_hdr:00000000000181AC                 db  80h
.eh_frame_hdr:00000000000181AD                 db    1
.eh_frame_hdr:00000000000181AE                 db 0FFh
.eh_frame_hdr:00000000000181AF                 db 0FFh
.eh_frame_hdr:00000000000181B0                 db 0D4h
.eh_frame_hdr:00000000000181B1                 db  15h
.eh_frame_hdr:00000000000181B2                 db    0
.eh_frame_hdr:00000000000181B3                 db    0
.eh_frame_hdr:00000000000181B4                 db 0E0h
.eh_frame_hdr:00000000000181B5                 db    1
.eh_frame_hdr:00000000000181B6                 db 0FFh
.eh_frame_hdr:00000000000181B7                 db 0FFh
.eh_frame_hdr:00000000000181B8                 db    0
.eh_frame_hdr:00000000000181B9                 db  16h
.eh_frame_hdr:00000000000181BA                 db    0
.eh_frame_hdr:00000000000181BB                 db    0
.eh_frame_hdr:00000000000181BC                 db  80h
.eh_frame_hdr:00000000000181BD                 db    2
.eh_frame_hdr:00000000000181BE                 db 0FFh
.eh_frame_hdr:00000000000181BF                 db 0FFh
.eh_frame_hdr:00000000000181C0                 db  34h ; 4
.eh_frame_hdr:00000000000181C1                 db  16h
.eh_frame_hdr:00000000000181C2                 db    0
.eh_frame_hdr:00000000000181C3                 db    0
.eh_frame_hdr:00000000000181C4                 db 0F0h
.eh_frame_hdr:00000000000181C5                 db    2
.eh_frame_hdr:00000000000181C6                 db 0FFh
.eh_frame_hdr:00000000000181C7                 db 0FFh
.eh_frame_hdr:00000000000181C8                 db  60h ; `
.eh_frame_hdr:00000000000181C9                 db  16h
.eh_frame_hdr:00000000000181CA                 db    0
.eh_frame_hdr:00000000000181CB                 db    0
.eh_frame_hdr:00000000000181CC                 db  20h
.eh_frame_hdr:00000000000181CD                 db    4
.eh_frame_hdr:00000000000181CE                 db 0FFh
.eh_frame_hdr:00000000000181CF                 db 0FFh
.eh_frame_hdr:00000000000181D0                 db  98h
.eh_frame_hdr:00000000000181D1                 db  16h
.eh_frame_hdr:00000000000181D2                 db    0
.eh_frame_hdr:00000000000181D3                 db    0
.eh_frame_hdr:00000000000181D4                 db  10h
.eh_frame_hdr:00000000000181D5                 db    5
.eh_frame_hdr:00000000000181D6                 db 0FFh
.eh_frame_hdr:00000000000181D7                 db 0FFh
.eh_frame_hdr:00000000000181D8                 db 0E8h
.eh_frame_hdr:00000000000181D9                 db  16h
.eh_frame_hdr:00000000000181DA                 db    0
.eh_frame_hdr:00000000000181DB                 db    0
.eh_frame_hdr:00000000000181DC                 db  80h
.eh_frame_hdr:00000000000181DD                 db    5
.eh_frame_hdr:00000000000181DE                 db 0FFh
.eh_frame_hdr:00000000000181DF                 db 0FFh
.eh_frame_hdr:00000000000181E0                 db  18h
.eh_frame_hdr:00000000000181E1                 db  17h
.eh_frame_hdr:00000000000181E2                 db    0
.eh_frame_hdr:00000000000181E3                 db    0
.eh_frame_hdr:00000000000181E4                 db  50h ; P
.eh_frame_hdr:00000000000181E5                 db    7
.eh_frame_hdr:00000000000181E6                 db 0FFh
.eh_frame_hdr:00000000000181E7                 db 0FFh
.eh_frame_hdr:00000000000181E8                 db  64h ; d
.eh_frame_hdr:00000000000181E9                 db  17h
.eh_frame_hdr:00000000000181EA                 db    0
.eh_frame_hdr:00000000000181EB                 db    0
.eh_frame_hdr:00000000000181EC                 db  70h ; p
.eh_frame_hdr:00000000000181ED                 db  0Dh
.eh_frame_hdr:00000000000181EE                 db 0FFh
.eh_frame_hdr:00000000000181EF                 db 0FFh
.eh_frame_hdr:00000000000181F0                 db 0B0h
.eh_frame_hdr:00000000000181F1                 db  17h
.eh_frame_hdr:00000000000181F2                 db    0
.eh_frame_hdr:00000000000181F3                 db    0
.eh_frame_hdr:00000000000181F4                 db 0C0h
.eh_frame_hdr:00000000000181F5                 db  0Eh
.eh_frame_hdr:00000000000181F6                 db 0FFh
.eh_frame_hdr:00000000000181F7                 db 0FFh
.eh_frame_hdr:00000000000181F8                 db  0Ch
.eh_frame_hdr:00000000000181F9                 db  18h
.eh_frame_hdr:00000000000181FA                 db    0
.eh_frame_hdr:00000000000181FB                 db    0
.eh_frame_hdr:00000000000181FC                 db  50h ; P
.eh_frame_hdr:00000000000181FD                 db  0Fh
.eh_frame_hdr:00000000000181FE                 db 0FFh
.eh_frame_hdr:00000000000181FF                 db 0FFh
.eh_frame_hdr:0000000000018200                 db  38h ; 8
.eh_frame_hdr:0000000000018201                 db  18h
.eh_frame_hdr:0000000000018202                 db    0
.eh_frame_hdr:0000000000018203                 db    0
.eh_frame_hdr:0000000000018204                 db  80h
.eh_frame_hdr:0000000000018205                 db  0Fh
.eh_frame_hdr:0000000000018206                 db 0FFh
.eh_frame_hdr:0000000000018207                 db 0FFh
.eh_frame_hdr:0000000000018208                 db  54h ; T
.eh_frame_hdr:0000000000018209                 db  18h
.eh_frame_hdr:000000000001820A                 db    0
.eh_frame_hdr:000000000001820B                 db    0
.eh_frame_hdr:000000000001820C                 db 0B0h
.eh_frame_hdr:000000000001820D                 db  0Fh
.eh_frame_hdr:000000000001820E                 db 0FFh
.eh_frame_hdr:000000000001820F                 db 0FFh
.eh_frame_hdr:0000000000018210                 db  68h ; h
.eh_frame_hdr:0000000000018211                 db  18h
.eh_frame_hdr:0000000000018212                 db    0
.eh_frame_hdr:0000000000018213                 db    0
.eh_frame_hdr:0000000000018214                 db 0D0h
.eh_frame_hdr:0000000000018215                 db  0Fh
.eh_frame_hdr:0000000000018216                 db 0FFh
.eh_frame_hdr:0000000000018217                 db 0FFh
.eh_frame_hdr:0000000000018218                 db  80h
.eh_frame_hdr:0000000000018219                 db  18h
.eh_frame_hdr:000000000001821A                 db    0
.eh_frame_hdr:000000000001821B                 db    0
.eh_frame_hdr:000000000001821C                 db 0A0h
.eh_frame_hdr:000000000001821D                 db  11h
.eh_frame_hdr:000000000001821E                 db 0FFh
.eh_frame_hdr:000000000001821F                 db 0FFh
.eh_frame_hdr:0000000000018220                 db 0CCh
.eh_frame_hdr:0000000000018221                 db  18h
.eh_frame_hdr:0000000000018222                 db    0
.eh_frame_hdr:0000000000018223                 db    0
.eh_frame_hdr:0000000000018224                 db  40h ; @
.eh_frame_hdr:0000000000018225                 db  12h
.eh_frame_hdr:0000000000018226                 db 0FFh
.eh_frame_hdr:0000000000018227                 db 0FFh
.eh_frame_hdr:0000000000018228                 db    4
.eh_frame_hdr:0000000000018229                 db  19h
.eh_frame_hdr:000000000001822A                 db    0
.eh_frame_hdr:000000000001822B                 db    0
.eh_frame_hdr:000000000001822C                 db 0C0h
.eh_frame_hdr:000000000001822D                 db  14h
.eh_frame_hdr:000000000001822E                 db 0FFh
.eh_frame_hdr:000000000001822F                 db 0FFh
.eh_frame_hdr:0000000000018230                 db  50h ; P
.eh_frame_hdr:0000000000018231                 db  19h
.eh_frame_hdr:0000000000018232                 db    0
.eh_frame_hdr:0000000000018233                 db    0
.eh_frame_hdr:0000000000018234                 db  20h
.eh_frame_hdr:0000000000018235                 db  15h
.eh_frame_hdr:0000000000018236                 db 0FFh
.eh_frame_hdr:0000000000018237                 db 0FFh
.eh_frame_hdr:0000000000018238                 db  6Ch ; l
.eh_frame_hdr:0000000000018239                 db  19h
.eh_frame_hdr:000000000001823A                 db    0
.eh_frame_hdr:000000000001823B                 db    0
.eh_frame_hdr:000000000001823C                 db  60h ; `
.eh_frame_hdr:000000000001823D                 db  15h
.eh_frame_hdr:000000000001823E                 db 0FFh
.eh_frame_hdr:000000000001823F                 db 0FFh
.eh_frame_hdr:0000000000018240                 db  8Ch
.eh_frame_hdr:0000000000018241                 db  19h
.eh_frame_hdr:0000000000018242                 db    0
.eh_frame_hdr:0000000000018243                 db    0
.eh_frame_hdr:0000000000018244                 db 0C0h
.eh_frame_hdr:0000000000018245                 db  16h
.eh_frame_hdr:0000000000018246                 db 0FFh
.eh_frame_hdr:0000000000018247                 db 0FFh
.eh_frame_hdr:0000000000018248                 db 0C8h
.eh_frame_hdr:0000000000018249                 db  19h
.eh_frame_hdr:000000000001824A                 db    0
.eh_frame_hdr:000000000001824B                 db    0
.eh_frame_hdr:000000000001824C                 db  80h
.eh_frame_hdr:000000000001824D                 db  17h
.eh_frame_hdr:000000000001824E                 db 0FFh
.eh_frame_hdr:000000000001824F                 db 0FFh
.eh_frame_hdr:0000000000018250                 db    4
.eh_frame_hdr:0000000000018251                 db  1Ah
.eh_frame_hdr:0000000000018252                 db    0
.eh_frame_hdr:0000000000018253                 db    0
.eh_frame_hdr:0000000000018254                 db 0D0h
.eh_frame_hdr:0000000000018255                 db  17h
.eh_frame_hdr:0000000000018256                 db 0FFh
.eh_frame_hdr:0000000000018257                 db 0FFh
.eh_frame_hdr:0000000000018258                 db  18h
.eh_frame_hdr:0000000000018259                 db  1Ah
.eh_frame_hdr:000000000001825A                 db    0
.eh_frame_hdr:000000000001825B                 db    0
.eh_frame_hdr:000000000001825C                 db  30h ; 0
.eh_frame_hdr:000000000001825D                 db  18h
.eh_frame_hdr:000000000001825E                 db 0FFh
.eh_frame_hdr:000000000001825F                 db 0FFh
.eh_frame_hdr:0000000000018260                 db  2Ch ; ,
.eh_frame_hdr:0000000000018261                 db  1Ah
.eh_frame_hdr:0000000000018262                 db    0
.eh_frame_hdr:0000000000018263                 db    0
.eh_frame_hdr:0000000000018264                 db 0B0h
.eh_frame_hdr:0000000000018265                 db  18h
.eh_frame_hdr:0000000000018266                 db 0FFh
.eh_frame_hdr:0000000000018267                 db 0FFh
.eh_frame_hdr:0000000000018268                 db  40h ; @
.eh_frame_hdr:0000000000018269                 db  1Ah
.eh_frame_hdr:000000000001826A                 db    0
.eh_frame_hdr:000000000001826B                 db    0
.eh_frame_hdr:000000000001826C                 db 0B0h
.eh_frame_hdr:000000000001826D                 db  19h
.eh_frame_hdr:000000000001826E                 db 0FFh
.eh_frame_hdr:000000000001826F                 db 0FFh
.eh_frame_hdr:0000000000018270                 db 0A4h
.eh_frame_hdr:0000000000018271                 db  1Ah
.eh_frame_hdr:0000000000018272                 db    0
.eh_frame_hdr:0000000000018273                 db    0
.eh_frame_hdr:0000000000018274                 db 0F0h
.eh_frame_hdr:0000000000018275                 db  19h
.eh_frame_hdr:0000000000018276                 db 0FFh
.eh_frame_hdr:0000000000018277                 db 0FFh
.eh_frame_hdr:0000000000018278                 db 0B8h
.eh_frame_hdr:0000000000018279                 db  1Ah
.eh_frame_hdr:000000000001827A                 db    0
.eh_frame_hdr:000000000001827B                 db    0
.eh_frame_hdr:000000000001827C                 db  80h
.eh_frame_hdr:000000000001827D                 db  1Ah
.eh_frame_hdr:000000000001827E                 db 0FFh
.eh_frame_hdr:000000000001827F                 db 0FFh
.eh_frame_hdr:0000000000018280                 db 0CCh
.eh_frame_hdr:0000000000018281                 db  1Ah
.eh_frame_hdr:0000000000018282                 db    0
.eh_frame_hdr:0000000000018283                 db    0
.eh_frame_hdr:0000000000018284                 db 0E0h
.eh_frame_hdr:0000000000018285                 db  1Ah
.eh_frame_hdr:0000000000018286                 db 0FFh
.eh_frame_hdr:0000000000018287                 db 0FFh
.eh_frame_hdr:0000000000018288                 db 0E0h
.eh_frame_hdr:0000000000018289                 db  1Ah
.eh_frame_hdr:000000000001828A                 db    0
.eh_frame_hdr:000000000001828B                 db    0
.eh_frame_hdr:000000000001828C                 db  50h ; P
.eh_frame_hdr:000000000001828D                 db  1Dh
.eh_frame_hdr:000000000001828E                 db 0FFh
.eh_frame_hdr:000000000001828F                 db 0FFh
.eh_frame_hdr:0000000000018290                 db  30h ; 0
.eh_frame_hdr:0000000000018291                 db  1Bh
.eh_frame_hdr:0000000000018292                 db    0
.eh_frame_hdr:0000000000018293                 db    0
.eh_frame_hdr:0000000000018294                 db  30h ; 0
.eh_frame_hdr:0000000000018295                 db  1Fh
.eh_frame_hdr:0000000000018296                 db 0FFh
.eh_frame_hdr:0000000000018297                 db 0FFh
.eh_frame_hdr:0000000000018298                 db  68h ; h
.eh_frame_hdr:0000000000018299                 db  1Bh
.eh_frame_hdr:000000000001829A                 db    0
.eh_frame_hdr:000000000001829B                 db    0
.eh_frame_hdr:000000000001829C                 db 0E0h
.eh_frame_hdr:000000000001829D                 db  21h ; !
.eh_frame_hdr:000000000001829E                 db 0FFh
.eh_frame_hdr:000000000001829F                 db 0FFh
.eh_frame_hdr:00000000000182A0                 db 0B8h
.eh_frame_hdr:00000000000182A1                 db  1Bh
.eh_frame_hdr:00000000000182A2                 db    0
.eh_frame_hdr:00000000000182A3                 db    0
.eh_frame_hdr:00000000000182A4                 db  40h ; @
.eh_frame_hdr:00000000000182A5                 db  23h ; #
.eh_frame_hdr:00000000000182A6                 db 0FFh
.eh_frame_hdr:00000000000182A7                 db 0FFh
.eh_frame_hdr:00000000000182A8                 db    4
.eh_frame_hdr:00000000000182A9                 db  1Ch
.eh_frame_hdr:00000000000182AA                 db    0
.eh_frame_hdr:00000000000182AB                 db    0
.eh_frame_hdr:00000000000182AC                 db 0F0h
.eh_frame_hdr:00000000000182AD                 db  24h ; $
.eh_frame_hdr:00000000000182AE                 db 0FFh
.eh_frame_hdr:00000000000182AF                 db 0FFh
.eh_frame_hdr:00000000000182B0                 db  54h ; T
.eh_frame_hdr:00000000000182B1                 db  1Ch
.eh_frame_hdr:00000000000182B2                 db    0
.eh_frame_hdr:00000000000182B3                 db    0
.eh_frame_hdr:00000000000182B4                 db 0D0h
.eh_frame_hdr:00000000000182B5                 db  25h ; %
.eh_frame_hdr:00000000000182B6                 db 0FFh
.eh_frame_hdr:00000000000182B7                 db 0FFh
.eh_frame_hdr:00000000000182B8                 db  78h ; x
.eh_frame_hdr:00000000000182B9                 db  1Ch
.eh_frame_hdr:00000000000182BA                 db    0
.eh_frame_hdr:00000000000182BB                 db    0
.eh_frame_hdr:00000000000182BC                 db 0B0h
.eh_frame_hdr:00000000000182BD                 db  26h ; &
.eh_frame_hdr:00000000000182BE                 db 0FFh
.eh_frame_hdr:00000000000182BF                 db 0FFh
.eh_frame_hdr:00000000000182C0                 db 0BCh
.eh_frame_hdr:00000000000182C1                 db  1Ch
.eh_frame_hdr:00000000000182C2                 db    0
.eh_frame_hdr:00000000000182C3                 db    0
.eh_frame_hdr:00000000000182C4                 db 0F0h
.eh_frame_hdr:00000000000182C5                 db  28h ; (
.eh_frame_hdr:00000000000182C6                 db 0FFh
.eh_frame_hdr:00000000000182C7                 db 0FFh
.eh_frame_hdr:00000000000182C8                 db  0Ch
.eh_frame_hdr:00000000000182C9                 db  1Dh
.eh_frame_hdr:00000000000182CA                 db    0
.eh_frame_hdr:00000000000182CB                 db    0
.eh_frame_hdr:00000000000182CC                 db  90h
.eh_frame_hdr:00000000000182CD                 db  29h ; )
.eh_frame_hdr:00000000000182CE                 db 0FFh
.eh_frame_hdr:00000000000182CF                 db 0FFh
.eh_frame_hdr:00000000000182D0                 db  38h ; 8
.eh_frame_hdr:00000000000182D1                 db  1Dh
.eh_frame_hdr:00000000000182D2                 db    0
.eh_frame_hdr:00000000000182D3                 db    0
.eh_frame_hdr:00000000000182D4                 db  20h
.eh_frame_hdr:00000000000182D5                 db  2Ah ; *
.eh_frame_hdr:00000000000182D6                 db 0FFh
.eh_frame_hdr:00000000000182D7                 db 0FFh
.eh_frame_hdr:00000000000182D8                 db  74h ; t
.eh_frame_hdr:00000000000182D9                 db  1Dh
.eh_frame_hdr:00000000000182DA                 db    0
.eh_frame_hdr:00000000000182DB                 db    0
.eh_frame_hdr:00000000000182DC                 db  80h
.eh_frame_hdr:00000000000182DD                 db  2Bh ; +
.eh_frame_hdr:00000000000182DE                 db 0FFh
.eh_frame_hdr:00000000000182DF                 db 0FFh
.eh_frame_hdr:00000000000182E0                 db 0D8h
.eh_frame_hdr:00000000000182E1                 db  1Dh
.eh_frame_hdr:00000000000182E2                 db    0
.eh_frame_hdr:00000000000182E3                 db    0
.eh_frame_hdr:00000000000182E4                 db  40h ; @
.eh_frame_hdr:00000000000182E5                 db  2Eh ; .
.eh_frame_hdr:00000000000182E6                 db 0FFh
.eh_frame_hdr:00000000000182E7                 db 0FFh
.eh_frame_hdr:00000000000182E8                 db  24h ; $
.eh_frame_hdr:00000000000182E9                 db  1Eh
.eh_frame_hdr:00000000000182EA                 db    0
.eh_frame_hdr:00000000000182EB                 db    0
.eh_frame_hdr:00000000000182EC                 db  40h ; @
.eh_frame_hdr:00000000000182ED                 db  30h ; 0
.eh_frame_hdr:00000000000182EE                 db 0FFh
.eh_frame_hdr:00000000000182EF                 db 0FFh
.eh_frame_hdr:00000000000182F0                 db  70h ; p
.eh_frame_hdr:00000000000182F1                 db  1Eh
.eh_frame_hdr:00000000000182F2                 db    0
.eh_frame_hdr:00000000000182F3                 db    0
.eh_frame_hdr:00000000000182F4                 db  20h
.eh_frame_hdr:00000000000182F5                 db  31h ; 1
.eh_frame_hdr:00000000000182F6                 db 0FFh
.eh_frame_hdr:00000000000182F7                 db 0FFh
.eh_frame_hdr:00000000000182F8                 db 0BCh
.eh_frame_hdr:00000000000182F9                 db  1Eh
.eh_frame_hdr:00000000000182FA                 db    0
.eh_frame_hdr:00000000000182FB                 db    0
.eh_frame_hdr:00000000000182FC                 db 0C0h
.eh_frame_hdr:00000000000182FD                 db  34h ; 4
.eh_frame_hdr:00000000000182FE                 db 0FFh
.eh_frame_hdr:00000000000182FF                 db 0FFh
.eh_frame_hdr:0000000000018300                 db    8
.eh_frame_hdr:0000000000018301                 db  1Fh
.eh_frame_hdr:0000000000018302                 db    0
.eh_frame_hdr:0000000000018303                 db    0
.eh_frame_hdr:0000000000018304                 db  10h
.eh_frame_hdr:0000000000018305                 db  36h ; 6
.eh_frame_hdr:0000000000018306                 db 0FFh
.eh_frame_hdr:0000000000018307                 db 0FFh
.eh_frame_hdr:0000000000018308                 db  54h ; T
.eh_frame_hdr:0000000000018309                 db  1Fh
.eh_frame_hdr:000000000001830A                 db    0
.eh_frame_hdr:000000000001830B                 db    0
.eh_frame_hdr:000000000001830C                 db    0
.eh_frame_hdr:000000000001830D                 db  37h ; 7
.eh_frame_hdr:000000000001830E                 db 0FFh
.eh_frame_hdr:000000000001830F                 db 0FFh
.eh_frame_hdr:0000000000018310                 db  98h
.eh_frame_hdr:0000000000018311                 db  1Fh
.eh_frame_hdr:0000000000018312                 db    0
.eh_frame_hdr:0000000000018313                 db    0
.eh_frame_hdr:0000000000018314                 db  10h
.eh_frame_hdr:0000000000018315                 db  38h ; 8
.eh_frame_hdr:0000000000018316                 db 0FFh
.eh_frame_hdr:0000000000018317                 db 0FFh
.eh_frame_hdr:0000000000018318                 db 0C0h
.eh_frame_hdr:0000000000018319                 db  1Fh
.eh_frame_hdr:000000000001831A                 db    0
.eh_frame_hdr:000000000001831B                 db    0
.eh_frame_hdr:000000000001831C                 db 0E0h
.eh_frame_hdr:000000000001831D                 db  38h ; 8
.eh_frame_hdr:000000000001831E                 db 0FFh
.eh_frame_hdr:000000000001831F                 db 0FFh
.eh_frame_hdr:0000000000018320                 db 0F8h
.eh_frame_hdr:0000000000018321                 db  1Fh
.eh_frame_hdr:0000000000018322                 db    0
.eh_frame_hdr:0000000000018323                 db    0
.eh_frame_hdr:0000000000018324                 db  80h
.eh_frame_hdr:0000000000018325                 db  40h ; @
.eh_frame_hdr:0000000000018326                 db 0FFh
.eh_frame_hdr:0000000000018327                 db 0FFh
.eh_frame_hdr:0000000000018328                 db  48h ; H
.eh_frame_hdr:0000000000018329                 db  20h
.eh_frame_hdr:000000000001832A                 db    0
.eh_frame_hdr:000000000001832B                 db    0
.eh_frame_hdr:000000000001832C                 db 0C0h
.eh_frame_hdr:000000000001832D                 db  42h ; B
.eh_frame_hdr:000000000001832E                 db 0FFh
.eh_frame_hdr:000000000001832F                 db 0FFh
.eh_frame_hdr:0000000000018330                 db  98h
.eh_frame_hdr:0000000000018331                 db  20h
.eh_frame_hdr:0000000000018332                 db    0
.eh_frame_hdr:0000000000018333                 db    0
.eh_frame_hdr:0000000000018334                 db  60h ; `
.eh_frame_hdr:0000000000018335                 db  4Eh ; N
.eh_frame_hdr:0000000000018336                 db 0FFh
.eh_frame_hdr:0000000000018337                 db 0FFh
.eh_frame_hdr:0000000000018338                 db 0E8h
.eh_frame_hdr:0000000000018339                 db  20h
.eh_frame_hdr:000000000001833A                 db    0
.eh_frame_hdr:000000000001833B                 db    0
.eh_frame_hdr:000000000001833C                 db 0F0h
.eh_frame_hdr:000000000001833D                 db  4Eh ; N
.eh_frame_hdr:000000000001833E                 db 0FFh
.eh_frame_hdr:000000000001833F                 db 0FFh
.eh_frame_hdr:0000000000018340                 db  1Ch
.eh_frame_hdr:0000000000018341                 db  21h ; !
.eh_frame_hdr:0000000000018342                 db    0
.eh_frame_hdr:0000000000018343                 db    0
.eh_frame_hdr:0000000000018344                 db  40h ; @
.eh_frame_hdr:0000000000018345                 db  4Fh ; O
.eh_frame_hdr:0000000000018346                 db 0FFh
.eh_frame_hdr:0000000000018347                 db 0FFh
.eh_frame_hdr:0000000000018348                 db  48h ; H
.eh_frame_hdr:0000000000018349                 db  21h ; !
.eh_frame_hdr:000000000001834A                 db    0
.eh_frame_hdr:000000000001834B                 db    0
.eh_frame_hdr:000000000001834C                 db 0E0h
.eh_frame_hdr:000000000001834D                 db  4Fh ; O
.eh_frame_hdr:000000000001834E                 db 0FFh
.eh_frame_hdr:000000000001834F                 db 0FFh
.eh_frame_hdr:0000000000018350                 db  78h ; x
.eh_frame_hdr:0000000000018351                 db  21h ; !
.eh_frame_hdr:0000000000018352                 db    0
.eh_frame_hdr:0000000000018353                 db    0
.eh_frame_hdr:0000000000018354                 db  30h ; 0
.eh_frame_hdr:0000000000018355                 db  50h ; P
.eh_frame_hdr:0000000000018356                 db 0FFh
.eh_frame_hdr:0000000000018357                 db 0FFh
.eh_frame_hdr:0000000000018358                 db 0ACh
.eh_frame_hdr:0000000000018359                 db  21h ; !
.eh_frame_hdr:000000000001835A                 db    0
.eh_frame_hdr:000000000001835B                 db    0
.eh_frame_hdr:000000000001835C                 db  40h ; @
.eh_frame_hdr:000000000001835D                 db  58h ; X
.eh_frame_hdr:000000000001835E                 db 0FFh
.eh_frame_hdr:000000000001835F                 db 0FFh
.eh_frame_hdr:0000000000018360                 db 0F0h
.eh_frame_hdr:0000000000018361                 db  21h ; !
.eh_frame_hdr:0000000000018362                 db    0
.eh_frame_hdr:0000000000018363                 db    0
.eh_frame_hdr:0000000000018364                 db 0B0h
.eh_frame_hdr:0000000000018365                 db  5Ah ; Z
.eh_frame_hdr:0000000000018366                 db 0FFh
.eh_frame_hdr:0000000000018367                 db 0FFh
.eh_frame_hdr:0000000000018368                 db  50h ; P
.eh_frame_hdr:0000000000018369                 db  22h ; "
.eh_frame_hdr:000000000001836A                 db    0
.eh_frame_hdr:000000000001836B                 db    0
.eh_frame_hdr:000000000001836C                 db 0E0h
.eh_frame_hdr:000000000001836D                 db  5Fh ; _
.eh_frame_hdr:000000000001836E                 db 0FFh
.eh_frame_hdr:000000000001836F                 db 0FFh
.eh_frame_hdr:0000000000018370                 db 0A0h
.eh_frame_hdr:0000000000018371                 db  22h ; "
.eh_frame_hdr:0000000000018372                 db    0
.eh_frame_hdr:0000000000018373                 db    0
.eh_frame_hdr:0000000000018374                 db  40h ; @
.eh_frame_hdr:0000000000018375                 db  62h ; b
.eh_frame_hdr:0000000000018376                 db 0FFh
.eh_frame_hdr:0000000000018377                 db 0FFh
.eh_frame_hdr:0000000000018378                 db 0DCh
.eh_frame_hdr:0000000000018379                 db  22h ; "
.eh_frame_hdr:000000000001837A                 db    0
.eh_frame_hdr:000000000001837B                 db    0
.eh_frame_hdr:000000000001837C                 db 0A0h
.eh_frame_hdr:000000000001837D                 db  69h ; i
.eh_frame_hdr:000000000001837E                 db 0FFh
.eh_frame_hdr:000000000001837F                 db 0FFh
.eh_frame_hdr:0000000000018380                 db  2Ch ; ,
.eh_frame_hdr:0000000000018381                 db  23h ; #
.eh_frame_hdr:0000000000018382                 db    0
.eh_frame_hdr:0000000000018383                 db    0
.eh_frame_hdr:0000000000018384                 db  90h
.eh_frame_hdr:0000000000018385                 db  72h ; r
.eh_frame_hdr:0000000000018386                 db 0FFh
.eh_frame_hdr:0000000000018387                 db 0FFh
.eh_frame_hdr:0000000000018388                 db  5Ch ; \
.eh_frame_hdr:0000000000018389                 db  23h ; #
.eh_frame_hdr:000000000001838A                 db    0
.eh_frame_hdr:000000000001838B                 db    0
.eh_frame_hdr:000000000001838C                 db  30h ; 0
.eh_frame_hdr:000000000001838D                 db  74h ; t
.eh_frame_hdr:000000000001838E                 db 0FFh
.eh_frame_hdr:000000000001838F                 db 0FFh
.eh_frame_hdr:0000000000018390                 db 0C8h
.eh_frame_hdr:0000000000018391                 db  23h ; #
.eh_frame_hdr:0000000000018392                 db    0
.eh_frame_hdr:0000000000018393                 db    0
.eh_frame_hdr:0000000000018394                 db  20h
.eh_frame_hdr:0000000000018395                 db  7Dh ; }
.eh_frame_hdr:0000000000018396                 db 0FFh
.eh_frame_hdr:0000000000018397                 db 0FFh
.eh_frame_hdr:0000000000018398                 db  28h ; (
.eh_frame_hdr:0000000000018399                 db  24h ; $
.eh_frame_hdr:000000000001839A                 db    0
.eh_frame_hdr:000000000001839B                 db    0
.eh_frame_hdr:000000000001839C                 db  10h
.eh_frame_hdr:000000000001839D                 db  7Fh ; 
.eh_frame_hdr:000000000001839E                 db 0FFh
.eh_frame_hdr:000000000001839F                 db 0FFh
.eh_frame_hdr:00000000000183A0                 db  74h ; t
.eh_frame_hdr:00000000000183A1                 db  24h ; $
.eh_frame_hdr:00000000000183A2                 db    0
.eh_frame_hdr:00000000000183A3                 db    0
.eh_frame_hdr:00000000000183A4                 db  50h ; P
.eh_frame_hdr:00000000000183A5                 db  82h
.eh_frame_hdr:00000000000183A6                 db 0FFh
.eh_frame_hdr:00000000000183A7                 db 0FFh
.eh_frame_hdr:00000000000183A8                 db 0D4h
.eh_frame_hdr:00000000000183A9                 db  24h ; $
.eh_frame_hdr:00000000000183AA                 db    0
.eh_frame_hdr:00000000000183AB                 db    0
.eh_frame_hdr:00000000000183AC                 db  80h
.eh_frame_hdr:00000000000183AD                 db  99h
.eh_frame_hdr:00000000000183AE                 db 0FFh
.eh_frame_hdr:00000000000183AF                 db 0FFh
.eh_frame_hdr:00000000000183B0                 db  24h ; $
.eh_frame_hdr:00000000000183B1                 db  25h ; %
.eh_frame_hdr:00000000000183B2                 db    0
.eh_frame_hdr:00000000000183B3                 db    0
.eh_frame_hdr:00000000000183B4                 db 0D0h
.eh_frame_hdr:00000000000183B5                 db 0A1h
.eh_frame_hdr:00000000000183B6                 db 0FFh
.eh_frame_hdr:00000000000183B7                 db 0FFh
.eh_frame_hdr:00000000000183B8                 db  84h
.eh_frame_hdr:00000000000183B9                 db  25h ; %
.eh_frame_hdr:00000000000183BA                 db    0
.eh_frame_hdr:00000000000183BB                 db    0
.eh_frame_hdr:00000000000183BC                 db  30h ; 0
.eh_frame_hdr:00000000000183BD                 db 0A4h
.eh_frame_hdr:00000000000183BE                 db 0FFh
.eh_frame_hdr:00000000000183BF                 db 0FFh
.eh_frame_hdr:00000000000183C0                 db 0C8h
.eh_frame_hdr:00000000000183C1                 db  25h ; %
.eh_frame_hdr:00000000000183C2                 db    0
.eh_frame_hdr:00000000000183C3                 db    0
.eh_frame_hdr:00000000000183C4                 db  30h ; 0
.eh_frame_hdr:00000000000183C5                 db 0ABh
.eh_frame_hdr:00000000000183C6                 db 0FFh
.eh_frame_hdr:00000000000183C7                 db 0FFh
.eh_frame_hdr:00000000000183C8                 db  14h
.eh_frame_hdr:00000000000183C9                 db  26h ; &
.eh_frame_hdr:00000000000183CA                 db    0
.eh_frame_hdr:00000000000183CB                 db    0
.eh_frame_hdr:00000000000183CC                 db 0F0h
.eh_frame_hdr:00000000000183CD                 db 0ABh
.eh_frame_hdr:00000000000183CE                 db 0FFh
.eh_frame_hdr:00000000000183CF                 db 0FFh
.eh_frame_hdr:00000000000183D0                 db  54h ; T
.eh_frame_hdr:00000000000183D1                 db  26h ; &
.eh_frame_hdr:00000000000183D2                 db    0
.eh_frame_hdr:00000000000183D3                 db    0
.eh_frame_hdr:00000000000183D4                 db 0D0h
.eh_frame_hdr:00000000000183D5                 db 0C0h
.eh_frame_hdr:00000000000183D6                 db 0FFh
.eh_frame_hdr:00000000000183D7                 db 0FFh
.eh_frame_hdr:00000000000183D8                 db 0B4h
.eh_frame_hdr:00000000000183D9                 db  26h ; &
.eh_frame_hdr:00000000000183DA                 db    0
.eh_frame_hdr:00000000000183DB                 db    0
.eh_frame_hdr:00000000000183DC                 db  60h ; `
.eh_frame_hdr:00000000000183DD                 db 0C2h
.eh_frame_hdr:00000000000183DE                 db 0FFh
.eh_frame_hdr:00000000000183DF                 db 0FFh
.eh_frame_hdr:00000000000183E0                 db    0
.eh_frame_hdr:00000000000183E1                 db  27h ; '
.eh_frame_hdr:00000000000183E2                 db    0
.eh_frame_hdr:00000000000183E3                 db    0
.eh_frame_hdr:00000000000183E4                 db 0E0h
.eh_frame_hdr:00000000000183E5                 db 0C3h
.eh_frame_hdr:00000000000183E6                 db 0FFh
.eh_frame_hdr:00000000000183E7                 db 0FFh
.eh_frame_hdr:00000000000183E8                 db  50h ; P
.eh_frame_hdr:00000000000183E9                 db  27h ; '
.eh_frame_hdr:00000000000183EA                 db    0
.eh_frame_hdr:00000000000183EB                 db    0
.eh_frame_hdr:00000000000183EC                 db 0E0h
.eh_frame_hdr:00000000000183ED                 db 0D4h
.eh_frame_hdr:00000000000183EE                 db 0FFh
.eh_frame_hdr:00000000000183EF                 db 0FFh
.eh_frame_hdr:00000000000183F0                 db 0A0h
.eh_frame_hdr:00000000000183F1                 db  27h ; '
.eh_frame_hdr:00000000000183F2                 db    0
.eh_frame_hdr:00000000000183F3                 db    0
.eh_frame_hdr:00000000000183F4                 db  50h ; P
.eh_frame_hdr:00000000000183F5                 db 0D5h
.eh_frame_hdr:00000000000183F6                 db 0FFh
.eh_frame_hdr:00000000000183F7                 db 0FFh
.eh_frame_hdr:00000000000183F8                 db 0C0h
.eh_frame_hdr:00000000000183F9                 db  27h ; '
.eh_frame_hdr:00000000000183FA                 db    0
.eh_frame_hdr:00000000000183FB                 db    0
.eh_frame_hdr:00000000000183FC                 db  60h ; `
.eh_frame_hdr:00000000000183FD                 db 0D5h
.eh_frame_hdr:00000000000183FE                 db 0FFh
.eh_frame_hdr:00000000000183FF                 db 0FFh
.eh_frame_hdr:0000000000018400                 db 0D4h
.eh_frame_hdr:0000000000018401                 db  27h ; '
.eh_frame_hdr:0000000000018402                 db    0
.eh_frame_hdr:0000000000018403                 db    0
.eh_frame_hdr:0000000000018404                 db  30h ; 0
.eh_frame_hdr:0000000000018405                 db 0D6h
.eh_frame_hdr:0000000000018406                 db 0FFh
.eh_frame_hdr:0000000000018407                 db 0FFh
.eh_frame_hdr:0000000000018408                 db    0
.eh_frame_hdr:0000000000018409                 db  28h ; (
.eh_frame_hdr:000000000001840A                 db    0
.eh_frame_hdr:000000000001840B                 db    0
.eh_frame_hdr:000000000001840C                 db 0B0h
.eh_frame_hdr:000000000001840D                 db 0DAh
.eh_frame_hdr:000000000001840E                 db 0FFh
.eh_frame_hdr:000000000001840F                 db 0FFh
.eh_frame_hdr:0000000000018410                 db  60h ; `
.eh_frame_hdr:0000000000018411                 db  28h ; (
.eh_frame_hdr:0000000000018412                 db    0
.eh_frame_hdr:0000000000018413                 db    0
.eh_frame_hdr:0000000000018414                 db 0D0h
.eh_frame_hdr:0000000000018415                 db 0DBh
.eh_frame_hdr:0000000000018416                 db 0FFh
.eh_frame_hdr:0000000000018417                 db 0FFh
.eh_frame_hdr:0000000000018418                 db 0B8h
.eh_frame_hdr:0000000000018419                 db  28h ; (
.eh_frame_hdr:000000000001841A                 db    0
.eh_frame_hdr:000000000001841B                 db    0
.eh_frame_hdr:000000000001841C                 db 0E0h
.eh_frame_hdr:000000000001841D                 db 0DCh
.eh_frame_hdr:000000000001841E                 db 0FFh
.eh_frame_hdr:000000000001841F                 db 0FFh
.eh_frame_hdr:0000000000018420                 db    4
.eh_frame_hdr:0000000000018421                 db  29h ; )
.eh_frame_hdr:0000000000018422                 db    0
.eh_frame_hdr:0000000000018423                 db    0
.eh_frame_hdr:0000000000018424                 db  70h ; p
.eh_frame_hdr:0000000000018425                 db 0DDh
.eh_frame_hdr:0000000000018426                 db 0FFh
.eh_frame_hdr:0000000000018427                 db 0FFh
.eh_frame_hdr:0000000000018428                 db  40h ; @
.eh_frame_hdr:0000000000018429                 db  29h ; )
.eh_frame_hdr:000000000001842A                 db    0
.eh_frame_hdr:000000000001842B                 db    0
.eh_frame_hdr:000000000001842C                 db 0C0h
.eh_frame_hdr:000000000001842D                 db 0DDh
.eh_frame_hdr:000000000001842E                 db 0FFh
.eh_frame_hdr:000000000001842F                 db 0FFh
.eh_frame_hdr:0000000000018430                 db  5Ch ; \
.eh_frame_hdr:0000000000018431                 db  29h ; )
.eh_frame_hdr:0000000000018432                 db    0
.eh_frame_hdr:0000000000018433                 db    0
.eh_frame_hdr:0000000000018434                 db  60h ; `
.eh_frame_hdr:0000000000018435                 db 0DEh
.eh_frame_hdr:0000000000018436                 db 0FFh
.eh_frame_hdr:0000000000018437                 db 0FFh
.eh_frame_hdr:0000000000018438                 db 0B8h
.eh_frame_hdr:0000000000018439                 db  29h ; )
.eh_frame_hdr:000000000001843A                 db    0
.eh_frame_hdr:000000000001843B                 db    0
.eh_frame_hdr:000000000001843C                 db  80h
.eh_frame_hdr:000000000001843D                 db 0DEh
.eh_frame_hdr:000000000001843E                 db 0FFh
.eh_frame_hdr:000000000001843F                 db 0FFh
.eh_frame_hdr:0000000000018440                 db 0D8h
.eh_frame_hdr:0000000000018441                 db  29h ; )
.eh_frame_hdr:0000000000018442                 db    0
.eh_frame_hdr:0000000000018443                 db    0
.eh_frame_hdr:0000000000018444                 db 0A0h
.eh_frame_hdr:0000000000018445                 db 0DEh
.eh_frame_hdr:0000000000018446                 db 0FFh
.eh_frame_hdr:0000000000018447                 db 0FFh
.eh_frame_hdr:0000000000018448                 db 0F8h
.eh_frame_hdr:0000000000018449                 db  29h ; )
.eh_frame_hdr:000000000001844A                 db    0
.eh_frame_hdr:000000000001844B                 db    0
.eh_frame_hdr:000000000001844C                 db 0C0h
.eh_frame_hdr:000000000001844D                 db 0DEh
.eh_frame_hdr:000000000001844E                 db 0FFh
.eh_frame_hdr:000000000001844F                 db 0FFh
.eh_frame_hdr:0000000000018450                 db  1Ch
.eh_frame_hdr:0000000000018451                 db  2Ah ; *
.eh_frame_hdr:0000000000018452                 db    0
.eh_frame_hdr:0000000000018453                 db    0
.eh_frame_hdr:0000000000018454                 db 0E0h
.eh_frame_hdr:0000000000018455                 db 0DEh
.eh_frame_hdr:0000000000018456                 db 0FFh
.eh_frame_hdr:0000000000018457                 db 0FFh
.eh_frame_hdr:0000000000018458                 db  40h ; @
.eh_frame_hdr:0000000000018459                 db  2Ah ; *
.eh_frame_hdr:000000000001845A                 db    0
.eh_frame_hdr:000000000001845B                 db    0
.eh_frame_hdr:000000000001845C                 db  30h ; 0
.eh_frame_hdr:000000000001845D                 db 0DFh
.eh_frame_hdr:000000000001845E                 db 0FFh
.eh_frame_hdr:000000000001845F                 db 0FFh
.eh_frame_hdr:0000000000018460                 db  58h ; X
.eh_frame_hdr:0000000000018461                 db  2Ah ; *
.eh_frame_hdr:0000000000018462                 db    0
.eh_frame_hdr:0000000000018463                 db    0
.eh_frame_hdr:0000000000018464                 db 0B0h
.eh_frame_hdr:0000000000018465                 db 0DFh
.eh_frame_hdr:0000000000018466                 db 0FFh
.eh_frame_hdr:0000000000018467                 db 0FFh
.eh_frame_hdr:0000000000018468                 db 0A8h
.eh_frame_hdr:0000000000018469                 db  2Ah ; *
.eh_frame_hdr:000000000001846A                 db    0
.eh_frame_hdr:000000000001846B                 db    0
.eh_frame_hdr:000000000001846C                 db  10h
.eh_frame_hdr:000000000001846D                 db 0E0h
.eh_frame_hdr:000000000001846E                 db 0FFh
.eh_frame_hdr:000000000001846F                 db 0FFh
.eh_frame_hdr:0000000000018470                 db 0C8h
.eh_frame_hdr:0000000000018471                 db  2Ah ; *
.eh_frame_hdr:0000000000018472                 db    0
.eh_frame_hdr:0000000000018473                 db    0
.eh_frame_hdr:0000000000018474                 db  50h ; P
.eh_frame_hdr:0000000000018475                 db 0E0h
.eh_frame_hdr:0000000000018476                 db 0FFh
.eh_frame_hdr:0000000000018477                 db 0FFh
.eh_frame_hdr:0000000000018478                 db 0E8h
.eh_frame_hdr:0000000000018479                 db  2Ah ; *
.eh_frame_hdr:000000000001847A                 db    0
.eh_frame_hdr:000000000001847B                 db    0
.eh_frame_hdr:000000000001847C                 db 0C0h
.eh_frame_hdr:000000000001847D                 db 0E0h
.eh_frame_hdr:000000000001847E                 db 0FFh
.eh_frame_hdr:000000000001847F                 db 0FFh
.eh_frame_hdr:0000000000018480                 db  30h ; 0
.eh_frame_hdr:0000000000018481                 db  2Bh ; +
.eh_frame_hdr:0000000000018482                 db    0
.eh_frame_hdr:0000000000018483                 db    0
.eh_frame_hdr:0000000000018484                 db 0D0h
.eh_frame_hdr:0000000000018485                 db 0E0h
.eh_frame_hdr:0000000000018486                 db 0FFh
.eh_frame_hdr:0000000000018487                 db 0FFh
.eh_frame_hdr:0000000000018488                 db  48h ; H
.eh_frame_hdr:0000000000018489                 db  2Bh ; +
.eh_frame_hdr:000000000001848A                 db    0
.eh_frame_hdr:000000000001848B                 db    0
.eh_frame_hdr:000000000001848B _eh_frame_hdr   ends
.eh_frame_hdr:000000000001848B
LOAD:000000000001848C ; ===========================================================================
LOAD:000000000001848C
LOAD:000000000001848C ; Segment type: Pure code
LOAD:000000000001848C ; Segment permissions: Read/Execute
LOAD:000000000001848C LOAD            segment byte public 'CODE' use64
LOAD:000000000001848C                 assume cs:LOAD
LOAD:000000000001848C                 ;org 1848Ch
LOAD:000000000001848C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000001848C                 align 10h
LOAD:000000000001848C LOAD            ends
LOAD:000000000001848C
.eh_frame:0000000000018490 ; ===========================================================================
.eh_frame:0000000000018490
.eh_frame:0000000000018490 ; Segment type: Pure data
.eh_frame:0000000000018490 ; Segment permissions: Read
.eh_frame:0000000000018490 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000018490                 assume cs:_eh_frame
.eh_frame:0000000000018490                 ;org 18490h
.eh_frame:0000000000018490                 db  14h
.eh_frame:0000000000018491                 db    0
.eh_frame:0000000000018492                 db    0
.eh_frame:0000000000018493                 db    0
.eh_frame:0000000000018494                 db    0
.eh_frame:0000000000018495                 db    0
.eh_frame:0000000000018496                 db    0
.eh_frame:0000000000018497                 db    0
.eh_frame:0000000000018498                 db    1
.eh_frame:0000000000018499                 db  7Ah ; z
.eh_frame:000000000001849A                 db  52h ; R
.eh_frame:000000000001849B                 db    0
.eh_frame:000000000001849C                 db    1
.eh_frame:000000000001849D                 db  78h ; x
.eh_frame:000000000001849E                 db  10h
.eh_frame:000000000001849F                 db    1
.eh_frame:00000000000184A0                 db  1Bh
.eh_frame:00000000000184A1                 db  0Ch
.eh_frame:00000000000184A2                 db    7
.eh_frame:00000000000184A3                 db    8
.eh_frame:00000000000184A4                 db  90h
.eh_frame:00000000000184A5                 db    1
.eh_frame:00000000000184A6                 db    7
.eh_frame:00000000000184A7                 db  10h
.eh_frame:00000000000184A8                 db  14h
.eh_frame:00000000000184A9                 db    0
.eh_frame:00000000000184AA                 db    0
.eh_frame:00000000000184AB                 db    0
.eh_frame:00000000000184AC                 db  1Ch
.eh_frame:00000000000184AD                 db    0
.eh_frame:00000000000184AE                 db    0
.eh_frame:00000000000184AF                 db    0
.eh_frame:00000000000184B0                 db 0E0h
.eh_frame:00000000000184B1                 db 0AAh
.eh_frame:00000000000184B2                 db 0FEh
.eh_frame:00000000000184B3                 db 0FFh
.eh_frame:00000000000184B4                 db  2Bh ; +
.eh_frame:00000000000184B5                 db    0
.eh_frame:00000000000184B6                 db    0
.eh_frame:00000000000184B7                 db    0
.eh_frame:00000000000184B8                 db    0
.eh_frame:00000000000184B9                 db    0
.eh_frame:00000000000184BA                 db    0
.eh_frame:00000000000184BB                 db    0
.eh_frame:00000000000184BC                 db    0
.eh_frame:00000000000184BD                 db    0
.eh_frame:00000000000184BE                 db    0
.eh_frame:00000000000184BF                 db    0
.eh_frame:00000000000184C0                 db  14h
.eh_frame:00000000000184C1                 db    0
.eh_frame:00000000000184C2                 db    0
.eh_frame:00000000000184C3                 db    0
.eh_frame:00000000000184C4                 db    0
.eh_frame:00000000000184C5                 db    0
.eh_frame:00000000000184C6                 db    0
.eh_frame:00000000000184C7                 db    0
.eh_frame:00000000000184C8                 db    1
.eh_frame:00000000000184C9                 db  7Ah ; z
.eh_frame:00000000000184CA                 db  52h ; R
.eh_frame:00000000000184CB                 db    0
.eh_frame:00000000000184CC                 db    1
.eh_frame:00000000000184CD                 db  78h ; x
.eh_frame:00000000000184CE                 db  10h
.eh_frame:00000000000184CF                 db    1
.eh_frame:00000000000184D0                 db  1Bh
.eh_frame:00000000000184D1                 db  0Ch
.eh_frame:00000000000184D2                 db    7
.eh_frame:00000000000184D3                 db    8
.eh_frame:00000000000184D4                 db  90h
.eh_frame:00000000000184D5                 db    1
.eh_frame:00000000000184D6                 db    0
.eh_frame:00000000000184D7                 db    0
.eh_frame:00000000000184D8                 db  24h ; $
.eh_frame:00000000000184D9                 db    0
.eh_frame:00000000000184DA                 db    0
.eh_frame:00000000000184DB                 db    0
.eh_frame:00000000000184DC                 db  1Ch
.eh_frame:00000000000184DD                 db    0
.eh_frame:00000000000184DE                 db    0
.eh_frame:00000000000184DF                 db    0
.eh_frame:00000000000184E0                 db 0D0h
.eh_frame:00000000000184E1                 db  95h
.eh_frame:00000000000184E2                 db 0FEh
.eh_frame:00000000000184E3                 db 0FFh
.eh_frame:00000000000184E4                 db 0C0h
.eh_frame:00000000000184E5                 db    4
.eh_frame:00000000000184E6                 db    0
.eh_frame:00000000000184E7                 db    0
.eh_frame:00000000000184E8                 db    0
.eh_frame:00000000000184E9                 db  0Eh
.eh_frame:00000000000184EA                 db  10h
.eh_frame:00000000000184EB                 db  46h ; F
.eh_frame:00000000000184EC                 db  0Eh
.eh_frame:00000000000184ED                 db  18h
.eh_frame:00000000000184EE                 db  4Ah ; J
.eh_frame:00000000000184EF                 db  0Fh
.eh_frame:00000000000184F0                 db  0Bh
.eh_frame:00000000000184F1                 db  77h ; w
.eh_frame:00000000000184F2                 db    8
.eh_frame:00000000000184F3                 db  80h
.eh_frame:00000000000184F4                 db    0
.eh_frame:00000000000184F5                 db  3Fh ; ?
.eh_frame:00000000000184F6                 db  1Ah
.eh_frame:00000000000184F7                 db  3Bh ; ;
.eh_frame:00000000000184F8                 db  2Ah ; *
.eh_frame:00000000000184F9                 db  33h ; 3
.eh_frame:00000000000184FA                 db  24h ; $
.eh_frame:00000000000184FB                 db  22h ; "
.eh_frame:00000000000184FC                 db    0
.eh_frame:00000000000184FD                 db    0
.eh_frame:00000000000184FE                 db    0
.eh_frame:00000000000184FF                 db    0
.eh_frame:0000000000018500                 db  14h
.eh_frame:0000000000018501                 db    0
.eh_frame:0000000000018502                 db    0
.eh_frame:0000000000018503                 db    0
.eh_frame:0000000000018504                 db  44h ; D
.eh_frame:0000000000018505                 db    0
.eh_frame:0000000000018506                 db    0
.eh_frame:0000000000018507                 db    0
.eh_frame:0000000000018508                 db  68h ; h
.eh_frame:0000000000018509                 db  9Ah
.eh_frame:000000000001850A                 db 0FEh
.eh_frame:000000000001850B                 db 0FFh
.eh_frame:000000000001850C                 db    8
.eh_frame:000000000001850D                 db    0
.eh_frame:000000000001850E                 db    0
.eh_frame:000000000001850F                 db    0
.eh_frame:0000000000018510                 db    0
.eh_frame:0000000000018511                 db    0
.eh_frame:0000000000018512                 db    0
.eh_frame:0000000000018513                 db    0
.eh_frame:0000000000018514                 db    0
.eh_frame:0000000000018515                 db    0
.eh_frame:0000000000018516                 db    0
.eh_frame:0000000000018517                 db    0
.eh_frame:0000000000018518                 db  34h ; 4
.eh_frame:0000000000018519                 db    0
.eh_frame:000000000001851A                 db    0
.eh_frame:000000000001851B                 db    0
.eh_frame:000000000001851C                 db  5Ch ; \
.eh_frame:000000000001851D                 db    0
.eh_frame:000000000001851E                 db    0
.eh_frame:000000000001851F                 db    0
.eh_frame:0000000000018520                 db  80h
.eh_frame:0000000000018521                 db 0ABh
.eh_frame:0000000000018522                 db 0FEh
.eh_frame:0000000000018523                 db 0FFh
.eh_frame:0000000000018524                 db 0BAh
.eh_frame:0000000000018525                 db    0
.eh_frame:0000000000018526                 db    0
.eh_frame:0000000000018527                 db    0
.eh_frame:0000000000018528                 db    0
.eh_frame:0000000000018529                 db  42h ; B
.eh_frame:000000000001852A                 db  0Eh
.eh_frame:000000000001852B                 db  10h
.eh_frame:000000000001852C                 db  8Ch
.eh_frame:000000000001852D                 db    2
.eh_frame:000000000001852E                 db  48h ; H
.eh_frame:000000000001852F                 db  0Eh
.eh_frame:0000000000018530                 db  18h
.eh_frame:0000000000018531                 db  86h
.eh_frame:0000000000018532                 db    3
.eh_frame:0000000000018533                 db  4Ah ; J
.eh_frame:0000000000018534                 db  0Eh
.eh_frame:0000000000018535                 db  20h
.eh_frame:0000000000018536                 db  83h
.eh_frame:0000000000018537                 db    4
.eh_frame:0000000000018538                 db    2
.eh_frame:0000000000018539                 db  49h ; I
.eh_frame:000000000001853A                 db  0Ah
.eh_frame:000000000001853B                 db  0Eh
.eh_frame:000000000001853C                 db  18h
.eh_frame:000000000001853D                 db  48h ; H
.eh_frame:000000000001853E                 db  0Eh
.eh_frame:000000000001853F                 db  10h
.eh_frame:0000000000018540                 db  42h ; B
.eh_frame:0000000000018541                 db  0Eh
.eh_frame:0000000000018542                 db    8
.eh_frame:0000000000018543                 db  49h ; I
.eh_frame:0000000000018544                 db  0Bh
.eh_frame:0000000000018545                 db  7Fh ; 
.eh_frame:0000000000018546                 db  0Eh
.eh_frame:0000000000018547                 db  18h
.eh_frame:0000000000018548                 db  48h ; H
.eh_frame:0000000000018549                 db  0Eh
.eh_frame:000000000001854A                 db  10h
.eh_frame:000000000001854B                 db  42h ; B
.eh_frame:000000000001854C                 db  0Eh
.eh_frame:000000000001854D                 db    8
.eh_frame:000000000001854E                 db    0
.eh_frame:000000000001854F                 db    0
.eh_frame:0000000000018550                 db  3Ch ; <
.eh_frame:0000000000018551                 db    0
.eh_frame:0000000000018552                 db    0
.eh_frame:0000000000018553                 db    0
.eh_frame:0000000000018554                 db  94h
.eh_frame:0000000000018555                 db    0
.eh_frame:0000000000018556                 db    0
.eh_frame:0000000000018557                 db    0
.eh_frame:0000000000018558                 db    8
.eh_frame:0000000000018559                 db 0ACh
.eh_frame:000000000001855A                 db 0FEh
.eh_frame:000000000001855B                 db 0FFh
.eh_frame:000000000001855C                 db 0B3h
.eh_frame:000000000001855D                 db    0
.eh_frame:000000000001855E                 db    0
.eh_frame:000000000001855F                 db    0
.eh_frame:0000000000018560                 db    0
.eh_frame:0000000000018561                 db  50h ; P
.eh_frame:0000000000018562                 db  0Eh
.eh_frame:0000000000018563                 db  10h
.eh_frame:0000000000018564                 db  8Dh
.eh_frame:0000000000018565                 db    2
.eh_frame:0000000000018566                 db  42h ; B
.eh_frame:0000000000018567                 db  0Eh
.eh_frame:0000000000018568                 db  18h
.eh_frame:0000000000018569                 db  8Ch
.eh_frame:000000000001856A                 db    3
.eh_frame:000000000001856B                 db  48h ; H
.eh_frame:000000000001856C                 db  0Eh
.eh_frame:000000000001856D                 db  20h
.eh_frame:000000000001856E                 db  86h
.eh_frame:000000000001856F                 db    4
.eh_frame:0000000000018570                 db  41h ; A
.eh_frame:0000000000018571                 db  0Eh
.eh_frame:0000000000018572                 db  28h ; (
.eh_frame:0000000000018573                 db  83h
.eh_frame:0000000000018574                 db    5
.eh_frame:0000000000018575                 db  49h ; I
.eh_frame:0000000000018576                 db  0Eh
.eh_frame:0000000000018577                 db  30h ; 0
.eh_frame:0000000000018578                 db    2
.eh_frame:0000000000018579                 db  77h ; w
.eh_frame:000000000001857A                 db  0Eh
.eh_frame:000000000001857B                 db  28h ; (
.eh_frame:000000000001857C                 db  41h ; A
.eh_frame:000000000001857D                 db  0Eh
.eh_frame:000000000001857E                 db  20h
.eh_frame:000000000001857F                 db  41h ; A
.eh_frame:0000000000018580                 db  0Eh
.eh_frame:0000000000018581                 db  18h
.eh_frame:0000000000018582                 db  42h ; B
.eh_frame:0000000000018583                 db  0Eh
.eh_frame:0000000000018584                 db  10h
.eh_frame:0000000000018585                 db  42h ; B
.eh_frame:0000000000018586                 db  0Eh
.eh_frame:0000000000018587                 db    8
.eh_frame:0000000000018588                 db  47h ; G
.eh_frame:0000000000018589                 db 0C3h
.eh_frame:000000000001858A                 db 0C6h
.eh_frame:000000000001858B                 db 0CCh
.eh_frame:000000000001858C                 db 0CDh
.eh_frame:000000000001858D                 db    0
.eh_frame:000000000001858E                 db    0
.eh_frame:000000000001858F                 db    0
.eh_frame:0000000000018590                 db  18h
.eh_frame:0000000000018591                 db    0
.eh_frame:0000000000018592                 db    0
.eh_frame:0000000000018593                 db    0
.eh_frame:0000000000018594                 db 0D4h
.eh_frame:0000000000018595                 db    0
.eh_frame:0000000000018596                 db    0
.eh_frame:0000000000018597                 db    0
.eh_frame:0000000000018598                 db  88h
.eh_frame:0000000000018599                 db 0ACh
.eh_frame:000000000001859A                 db 0FEh
.eh_frame:000000000001859B                 db 0FFh
.eh_frame:000000000001859C                 db  5Fh ; _
.eh_frame:000000000001859D                 db    0
.eh_frame:000000000001859E                 db    0
.eh_frame:000000000001859F                 db    0
.eh_frame:00000000000185A0                 db    0
.eh_frame:00000000000185A1                 db  41h ; A
.eh_frame:00000000000185A2                 db  0Eh
.eh_frame:00000000000185A3                 db  10h
.eh_frame:00000000000185A4                 db  83h
.eh_frame:00000000000185A5                 db    2
.eh_frame:00000000000185A6                 db  47h ; G
.eh_frame:00000000000185A7                 db  0Eh
.eh_frame:00000000000185A8                 db 0A0h
.eh_frame:00000000000185A9                 db    1
.eh_frame:00000000000185AA                 db    0
.eh_frame:00000000000185AB                 db    0
.eh_frame:00000000000185AC                 db  38h ; 8
.eh_frame:00000000000185AD                 db    0
.eh_frame:00000000000185AE                 db    0
.eh_frame:00000000000185AF                 db    0
.eh_frame:00000000000185B0                 db 0F0h
.eh_frame:00000000000185B1                 db    0
.eh_frame:00000000000185B2                 db    0
.eh_frame:00000000000185B3                 db    0
.eh_frame:00000000000185B4                 db 0CCh
.eh_frame:00000000000185B5                 db 0ACh
.eh_frame:00000000000185B6                 db 0FEh
.eh_frame:00000000000185B7                 db 0FFh
.eh_frame:00000000000185B8                 db 0B7h
.eh_frame:00000000000185B9                 db    1
.eh_frame:00000000000185BA                 db    0
.eh_frame:00000000000185BB                 db    0
.eh_frame:00000000000185BC                 db    0
.eh_frame:00000000000185BD                 db  42h ; B
.eh_frame:00000000000185BE                 db  0Eh
.eh_frame:00000000000185BF                 db  10h
.eh_frame:00000000000185C0                 db  8Dh
.eh_frame:00000000000185C1                 db    2
.eh_frame:00000000000185C2                 db  42h ; B
.eh_frame:00000000000185C3                 db  0Eh
.eh_frame:00000000000185C4                 db  18h
.eh_frame:00000000000185C5                 db  8Ch
.eh_frame:00000000000185C6                 db    3
.eh_frame:00000000000185C7                 db  41h ; A
.eh_frame:00000000000185C8                 db  0Eh
.eh_frame:00000000000185C9                 db  20h
.eh_frame:00000000000185CA                 db  86h
.eh_frame:00000000000185CB                 db    4
.eh_frame:00000000000185CC                 db  41h ; A
.eh_frame:00000000000185CD                 db  0Eh
.eh_frame:00000000000185CE                 db  28h ; (
.eh_frame:00000000000185CF                 db  83h
.eh_frame:00000000000185D0                 db    5
.eh_frame:00000000000185D1                 db  47h ; G
.eh_frame:00000000000185D2                 db  0Eh
.eh_frame:00000000000185D3                 db 0D0h
.eh_frame:00000000000185D4                 db    1
.eh_frame:00000000000185D5                 db    2
.eh_frame:00000000000185D6                 db  7Ch ; |
.eh_frame:00000000000185D7                 db  0Ah
.eh_frame:00000000000185D8                 db  0Eh
.eh_frame:00000000000185D9                 db  28h ; (
.eh_frame:00000000000185DA                 db  41h ; A
.eh_frame:00000000000185DB                 db  0Eh
.eh_frame:00000000000185DC                 db  20h
.eh_frame:00000000000185DD                 db  41h ; A
.eh_frame:00000000000185DE                 db  0Eh
.eh_frame:00000000000185DF                 db  18h
.eh_frame:00000000000185E0                 db  42h ; B
.eh_frame:00000000000185E1                 db  0Eh
.eh_frame:00000000000185E2                 db  10h
.eh_frame:00000000000185E3                 db  42h ; B
.eh_frame:00000000000185E4                 db  0Eh
.eh_frame:00000000000185E5                 db    8
.eh_frame:00000000000185E6                 db  41h ; A
.eh_frame:00000000000185E7                 db  0Bh
.eh_frame:00000000000185E8                 db  28h ; (
.eh_frame:00000000000185E9                 db    0
.eh_frame:00000000000185EA                 db    0
.eh_frame:00000000000185EB                 db    0
.eh_frame:00000000000185EC                 db  2Ch ; ,
.eh_frame:00000000000185ED                 db    1
.eh_frame:00000000000185EE                 db    0
.eh_frame:00000000000185EF                 db    0
.eh_frame:00000000000185F0                 db  50h ; P
.eh_frame:00000000000185F1                 db 0AEh
.eh_frame:00000000000185F2                 db 0FEh
.eh_frame:00000000000185F3                 db 0FFh
.eh_frame:00000000000185F4                 db  87h
.eh_frame:00000000000185F5                 db    0
.eh_frame:00000000000185F6                 db    0
.eh_frame:00000000000185F7                 db    0
.eh_frame:00000000000185F8                 db    0
.eh_frame:00000000000185F9                 db  41h ; A
.eh_frame:00000000000185FA                 db  0Eh
.eh_frame:00000000000185FB                 db  10h
.eh_frame:00000000000185FC                 db  86h
.eh_frame:00000000000185FD                 db    2
.eh_frame:00000000000185FE                 db  41h ; A
.eh_frame:00000000000185FF                 db  0Eh
.eh_frame:0000000000018600                 db  18h
.eh_frame:0000000000018601                 db  83h
.eh_frame:0000000000018602                 db    3
.eh_frame:0000000000018603                 db  4Ch ; L
.eh_frame:0000000000018604                 db  0Eh
.eh_frame:0000000000018605                 db  20h
.eh_frame:0000000000018606                 db  66h ; f
.eh_frame:0000000000018607                 db  0Ah
.eh_frame:0000000000018608                 db  0Eh
.eh_frame:0000000000018609                 db  18h
.eh_frame:000000000001860A                 db  41h ; A
.eh_frame:000000000001860B                 db  0Eh
.eh_frame:000000000001860C                 db  10h
.eh_frame:000000000001860D                 db  41h ; A
.eh_frame:000000000001860E                 db  0Eh
.eh_frame:000000000001860F                 db    8
.eh_frame:0000000000018610                 db  41h ; A
.eh_frame:0000000000018611                 db  0Bh
.eh_frame:0000000000018612                 db    0
.eh_frame:0000000000018613                 db    0
.eh_frame:0000000000018614                 db  30h ; 0
.eh_frame:0000000000018615                 db    0
.eh_frame:0000000000018616                 db    0
.eh_frame:0000000000018617                 db    0
.eh_frame:0000000000018618                 db  58h ; X
.eh_frame:0000000000018619                 db    1
.eh_frame:000000000001861A                 db    0
.eh_frame:000000000001861B                 db    0
.eh_frame:000000000001861C                 db 0B4h
.eh_frame:000000000001861D                 db 0AEh
.eh_frame:000000000001861E                 db 0FEh
.eh_frame:000000000001861F                 db 0FFh
.eh_frame:0000000000018620                 db    9
.eh_frame:0000000000018621                 db    1
.eh_frame:0000000000018622                 db    0
.eh_frame:0000000000018623                 db    0
.eh_frame:0000000000018624                 db    0
.eh_frame:0000000000018625                 db  42h ; B
.eh_frame:0000000000018626                 db  0Eh
.eh_frame:0000000000018627                 db  10h
.eh_frame:0000000000018628                 db  8Ch
.eh_frame:0000000000018629                 db    2
.eh_frame:000000000001862A                 db  41h ; A
.eh_frame:000000000001862B                 db  0Eh
.eh_frame:000000000001862C                 db  18h
.eh_frame:000000000001862D                 db  86h
.eh_frame:000000000001862E                 db    3
.eh_frame:000000000001862F                 db  46h ; F
.eh_frame:0000000000018630                 db  0Eh
.eh_frame:0000000000018631                 db  20h
.eh_frame:0000000000018632                 db  83h
.eh_frame:0000000000018633                 db    4
.eh_frame:0000000000018634                 db  47h ; G
.eh_frame:0000000000018635                 db  0Eh
.eh_frame:0000000000018636                 db 0B0h
.eh_frame:0000000000018637                 db    1
.eh_frame:0000000000018638                 db    2
.eh_frame:0000000000018639                 db 0E3h
.eh_frame:000000000001863A                 db  0Ah
.eh_frame:000000000001863B                 db  0Eh
.eh_frame:000000000001863C                 db  20h
.eh_frame:000000000001863D                 db  41h ; A
.eh_frame:000000000001863E                 db  0Eh
.eh_frame:000000000001863F                 db  18h
.eh_frame:0000000000018640                 db  41h ; A
.eh_frame:0000000000018641                 db  0Eh
.eh_frame:0000000000018642                 db  10h
.eh_frame:0000000000018643                 db  42h ; B
.eh_frame:0000000000018644                 db  0Eh
.eh_frame:0000000000018645                 db    8
.eh_frame:0000000000018646                 db  41h ; A
.eh_frame:0000000000018647                 db  0Bh
.eh_frame:0000000000018648                 db  18h
.eh_frame:0000000000018649                 db    0
.eh_frame:000000000001864A                 db    0
.eh_frame:000000000001864B                 db    0
.eh_frame:000000000001864C                 db  8Ch
.eh_frame:000000000001864D                 db    1
.eh_frame:000000000001864E                 db    0
.eh_frame:000000000001864F                 db    0
.eh_frame:0000000000018650                 db  90h
.eh_frame:0000000000018651                 db 0AFh
.eh_frame:0000000000018652                 db 0FEh
.eh_frame:0000000000018653                 db 0FFh
.eh_frame:0000000000018654                 db  29h ; )
.eh_frame:0000000000018655                 db    0
.eh_frame:0000000000018656                 db    0
.eh_frame:0000000000018657                 db    0
.eh_frame:0000000000018658                 db    0
.eh_frame:0000000000018659                 db  48h ; H
.eh_frame:000000000001865A                 db  0Eh
.eh_frame:000000000001865B                 db  10h
.eh_frame:000000000001865C                 db  83h
.eh_frame:000000000001865D                 db    2
.eh_frame:000000000001865E                 db  5Ch ; \
.eh_frame:000000000001865F                 db  0Eh
.eh_frame:0000000000018660                 db    8
.eh_frame:0000000000018661                 db    0
.eh_frame:0000000000018662                 db    0
.eh_frame:0000000000018663                 db    0
.eh_frame:0000000000018664                 db  24h ; $
.eh_frame:0000000000018665                 db    0
.eh_frame:0000000000018666                 db    0
.eh_frame:0000000000018667                 db    0
.eh_frame:0000000000018668                 db 0A8h
.eh_frame:0000000000018669                 db    1
.eh_frame:000000000001866A                 db    0
.eh_frame:000000000001866B                 db    0
.eh_frame:000000000001866C                 db 0A4h
.eh_frame:000000000001866D                 db 0AFh
.eh_frame:000000000001866E                 db 0FEh
.eh_frame:000000000001866F                 db 0FFh
.eh_frame:0000000000018670                 db 0C0h
.eh_frame:0000000000018671                 db    0
.eh_frame:0000000000018672                 db    0
.eh_frame:0000000000018673                 db    0
.eh_frame:0000000000018674                 db    0
.eh_frame:0000000000018675                 db  42h ; B
.eh_frame:0000000000018676                 db  0Eh
.eh_frame:0000000000018677                 db  10h
.eh_frame:0000000000018678                 db  8Dh
.eh_frame:0000000000018679                 db    2
.eh_frame:000000000001867A                 db  42h ; B
.eh_frame:000000000001867B                 db  0Eh
.eh_frame:000000000001867C                 db  18h
.eh_frame:000000000001867D                 db  8Ch
.eh_frame:000000000001867E                 db    3
.eh_frame:000000000001867F                 db  41h ; A
.eh_frame:0000000000018680                 db  0Eh
.eh_frame:0000000000018681                 db  20h
.eh_frame:0000000000018682                 db  86h
.eh_frame:0000000000018683                 db    4
.eh_frame:0000000000018684                 db  41h ; A
.eh_frame:0000000000018685                 db  0Eh
.eh_frame:0000000000018686                 db  28h ; (
.eh_frame:0000000000018687                 db  83h
.eh_frame:0000000000018688                 db    5
.eh_frame:0000000000018689                 db  47h ; G
.eh_frame:000000000001868A                 db  0Eh
.eh_frame:000000000001868B                 db  50h ; P
.eh_frame:000000000001868C                 db  38h ; 8
.eh_frame:000000000001868D                 db    0
.eh_frame:000000000001868E                 db    0
.eh_frame:000000000001868F                 db    0
.eh_frame:0000000000018690                 db 0D0h
.eh_frame:0000000000018691                 db    1
.eh_frame:0000000000018692                 db    0
.eh_frame:0000000000018693                 db    0
.eh_frame:0000000000018694                 db  3Ch ; <
.eh_frame:0000000000018695                 db 0B0h
.eh_frame:0000000000018696                 db 0FEh
.eh_frame:0000000000018697                 db 0FFh
.eh_frame:0000000000018698                 db 0EBh
.eh_frame:0000000000018699                 db    0
.eh_frame:000000000001869A                 db    0
.eh_frame:000000000001869B                 db    0
.eh_frame:000000000001869C                 db    0
.eh_frame:000000000001869D                 db  42h ; B
.eh_frame:000000000001869E                 db  0Eh
.eh_frame:000000000001869F                 db  10h
.eh_frame:00000000000186A0                 db  8Dh
.eh_frame:00000000000186A1                 db    2
.eh_frame:00000000000186A2                 db  42h ; B
.eh_frame:00000000000186A3                 db  0Eh
.eh_frame:00000000000186A4                 db  18h
.eh_frame:00000000000186A5                 db  8Ch
.eh_frame:00000000000186A6                 db    3
.eh_frame:00000000000186A7                 db  44h ; D
.eh_frame:00000000000186A8                 db  0Eh
.eh_frame:00000000000186A9                 db  20h
.eh_frame:00000000000186AA                 db  86h
.eh_frame:00000000000186AB                 db    4
.eh_frame:00000000000186AC                 db  41h ; A
.eh_frame:00000000000186AD                 db  0Eh
.eh_frame:00000000000186AE                 db  28h ; (
.eh_frame:00000000000186AF                 db  83h
.eh_frame:00000000000186B0                 db    5
.eh_frame:00000000000186B1                 db  4Ah ; J
.eh_frame:00000000000186B2                 db  0Eh
.eh_frame:00000000000186B3                 db  30h ; 0
.eh_frame:00000000000186B4                 db    2
.eh_frame:00000000000186B5                 db  40h ; @
.eh_frame:00000000000186B6                 db  0Ah
.eh_frame:00000000000186B7                 db  0Eh
.eh_frame:00000000000186B8                 db  28h ; (
.eh_frame:00000000000186B9                 db  41h ; A
.eh_frame:00000000000186BA                 db  0Eh
.eh_frame:00000000000186BB                 db  20h
.eh_frame:00000000000186BC                 db  41h ; A
.eh_frame:00000000000186BD                 db  0Eh
.eh_frame:00000000000186BE                 db  18h
.eh_frame:00000000000186BF                 db  42h ; B
.eh_frame:00000000000186C0                 db  0Eh
.eh_frame:00000000000186C1                 db  10h
.eh_frame:00000000000186C2                 db  42h ; B
.eh_frame:00000000000186C3                 db  0Eh
.eh_frame:00000000000186C4                 db    8
.eh_frame:00000000000186C5                 db  47h ; G
.eh_frame:00000000000186C6                 db  0Bh
.eh_frame:00000000000186C7                 db    0
.eh_frame:00000000000186C8                 db  28h ; (
.eh_frame:00000000000186C9                 db    0
.eh_frame:00000000000186CA                 db    0
.eh_frame:00000000000186CB                 db    0
.eh_frame:00000000000186CC                 db  0Ch
.eh_frame:00000000000186CD                 db    2
.eh_frame:00000000000186CE                 db    0
.eh_frame:00000000000186CF                 db    0
.eh_frame:00000000000186D0                 db 0F0h
.eh_frame:00000000000186D1                 db 0B0h
.eh_frame:00000000000186D2                 db 0FEh
.eh_frame:00000000000186D3                 db 0FFh
.eh_frame:00000000000186D4                 db  4Ah ; J
.eh_frame:00000000000186D5                 db    0
.eh_frame:00000000000186D6                 db    0
.eh_frame:00000000000186D7                 db    0
.eh_frame:00000000000186D8                 db    0
.eh_frame:00000000000186D9                 db  42h ; B
.eh_frame:00000000000186DA                 db  0Eh
.eh_frame:00000000000186DB                 db  10h
.eh_frame:00000000000186DC                 db  8Ch
.eh_frame:00000000000186DD                 db    2
.eh_frame:00000000000186DE                 db  41h ; A
.eh_frame:00000000000186DF                 db  0Eh
.eh_frame:00000000000186E0                 db  18h
.eh_frame:00000000000186E1                 db  86h
.eh_frame:00000000000186E2                 db    3
.eh_frame:00000000000186E3                 db  47h ; G
.eh_frame:00000000000186E4                 db  0Eh
.eh_frame:00000000000186E5                 db  20h
.eh_frame:00000000000186E6                 db  83h
.eh_frame:00000000000186E7                 db    4
.eh_frame:00000000000186E8                 db  7Ch ; |
.eh_frame:00000000000186E9                 db  0Eh
.eh_frame:00000000000186EA                 db  18h
.eh_frame:00000000000186EB                 db  41h ; A
.eh_frame:00000000000186EC                 db  0Eh
.eh_frame:00000000000186ED                 db  10h
.eh_frame:00000000000186EE                 db  42h ; B
.eh_frame:00000000000186EF                 db  0Eh
.eh_frame:00000000000186F0                 db    8
.eh_frame:00000000000186F1                 db    0
.eh_frame:00000000000186F2                 db    0
.eh_frame:00000000000186F3                 db    0
.eh_frame:00000000000186F4                 db  10h
.eh_frame:00000000000186F5                 db    0
.eh_frame:00000000000186F6                 db    0
.eh_frame:00000000000186F7                 db    0
.eh_frame:00000000000186F8                 db  38h ; 8
.eh_frame:00000000000186F9                 db    2
.eh_frame:00000000000186FA                 db    0
.eh_frame:00000000000186FB                 db    0
.eh_frame:00000000000186FC                 db  14h
.eh_frame:00000000000186FD                 db 0B1h
.eh_frame:00000000000186FE                 db 0FEh
.eh_frame:00000000000186FF                 db 0FFh
.eh_frame:0000000000018700                 db  31h ; 1
.eh_frame:0000000000018701                 db    0
.eh_frame:0000000000018702                 db    0
.eh_frame:0000000000018703                 db    0
.eh_frame:0000000000018704                 db    0
.eh_frame:0000000000018705                 db  4Bh ; K
.eh_frame:0000000000018706                 db  0Eh
.eh_frame:0000000000018707                 db  10h
.eh_frame:0000000000018708                 db  18h
.eh_frame:0000000000018709                 db    0
.eh_frame:000000000001870A                 db    0
.eh_frame:000000000001870B                 db    0
.eh_frame:000000000001870C                 db  4Ch ; L
.eh_frame:000000000001870D                 db    2
.eh_frame:000000000001870E                 db    0
.eh_frame:000000000001870F                 db    0
.eh_frame:0000000000018710                 db  40h ; @
.eh_frame:0000000000018711                 db 0B1h
.eh_frame:0000000000018712                 db 0FEh
.eh_frame:0000000000018713                 db 0FFh
.eh_frame:0000000000018714                 db 0D9h
.eh_frame:0000000000018715                 db    0
.eh_frame:0000000000018716                 db    0
.eh_frame:0000000000018717                 db    0
.eh_frame:0000000000018718                 db    0
.eh_frame:0000000000018719                 db  44h ; D
.eh_frame:000000000001871A                 db  0Eh
.eh_frame:000000000001871B                 db  10h
.eh_frame:000000000001871C                 db    2
.eh_frame:000000000001871D                 db  50h ; P
.eh_frame:000000000001871E                 db  0Ah
.eh_frame:000000000001871F                 db  0Eh
.eh_frame:0000000000018720                 db    8
.eh_frame:0000000000018721                 db  44h ; D
.eh_frame:0000000000018722                 db  0Bh
.eh_frame:0000000000018723                 db    0
.eh_frame:0000000000018724                 db  7Ch ; |
.eh_frame:0000000000018725                 db    0
.eh_frame:0000000000018726                 db    0
.eh_frame:0000000000018727                 db    0
.eh_frame:0000000000018728                 db  68h ; h
.eh_frame:0000000000018729                 db    2
.eh_frame:000000000001872A                 db    0
.eh_frame:000000000001872B                 db    0
.eh_frame:000000000001872C                 db    4
.eh_frame:000000000001872D                 db 0B2h
.eh_frame:000000000001872E                 db 0FEh
.eh_frame:000000000001872F                 db 0FFh
.eh_frame:0000000000018730                 db  5Ah ; Z
.eh_frame:0000000000018731                 db    3
.eh_frame:0000000000018732                 db    0
.eh_frame:0000000000018733                 db    0
.eh_frame:0000000000018734                 db    0
.eh_frame:0000000000018735                 db  42h ; B
.eh_frame:0000000000018736                 db  0Eh
.eh_frame:0000000000018737                 db  10h
.eh_frame:0000000000018738                 db  8Fh
.eh_frame:0000000000018739                 db    2
.eh_frame:000000000001873A                 db  42h ; B
.eh_frame:000000000001873B                 db  0Eh
.eh_frame:000000000001873C                 db  18h
.eh_frame:000000000001873D                 db  8Eh
.eh_frame:000000000001873E                 db    3
.eh_frame:000000000001873F                 db  47h ; G
.eh_frame:0000000000018740                 db  0Eh
.eh_frame:0000000000018741                 db  20h
.eh_frame:0000000000018742                 db  8Dh
.eh_frame:0000000000018743                 db    4
.eh_frame:0000000000018744                 db  42h ; B
.eh_frame:0000000000018745                 db  0Eh
.eh_frame:0000000000018746                 db  28h ; (
.eh_frame:0000000000018747                 db  8Ch
.eh_frame:0000000000018748                 db    5
.eh_frame:0000000000018749                 db  41h ; A
.eh_frame:000000000001874A                 db  0Eh
.eh_frame:000000000001874B                 db  30h ; 0
.eh_frame:000000000001874C                 db  86h
.eh_frame:000000000001874D                 db    6
.eh_frame:000000000001874E                 db  41h ; A
.eh_frame:000000000001874F                 db  0Eh
.eh_frame:0000000000018750                 db  38h ; 8
.eh_frame:0000000000018751                 db  83h
.eh_frame:0000000000018752                 db    7
.eh_frame:0000000000018753                 db  44h ; D
.eh_frame:0000000000018754                 db  0Eh
.eh_frame:0000000000018755                 db  50h ; P
.eh_frame:0000000000018756                 db    3
.eh_frame:0000000000018757                 db 0A9h
.eh_frame:0000000000018758                 db    2
.eh_frame:0000000000018759                 db  0Ah
.eh_frame:000000000001875A                 db  0Eh
.eh_frame:000000000001875B                 db  38h ; 8
.eh_frame:000000000001875C                 db  46h ; F
.eh_frame:000000000001875D                 db  0Eh
.eh_frame:000000000001875E                 db  30h ; 0
.eh_frame:000000000001875F                 db  41h ; A
.eh_frame:0000000000018760                 db  0Eh
.eh_frame:0000000000018761                 db  28h ; (
.eh_frame:0000000000018762                 db  42h ; B
.eh_frame:0000000000018763                 db  0Eh
.eh_frame:0000000000018764                 db  20h
.eh_frame:0000000000018765                 db  42h ; B
.eh_frame:0000000000018766                 db  0Eh
.eh_frame:0000000000018767                 db  18h
.eh_frame:0000000000018768                 db  42h ; B
.eh_frame:0000000000018769                 db  0Eh
.eh_frame:000000000001876A                 db  10h
.eh_frame:000000000001876B                 db  42h ; B
.eh_frame:000000000001876C                 db  0Eh
.eh_frame:000000000001876D                 db    8
.eh_frame:000000000001876E                 db  45h ; E
.eh_frame:000000000001876F                 db  0Bh
.eh_frame:0000000000018770                 db    2
.eh_frame:0000000000018771                 db  49h ; I
.eh_frame:0000000000018772                 db  0Ah
.eh_frame:0000000000018773                 db  0Eh
.eh_frame:0000000000018774                 db  38h ; 8
.eh_frame:0000000000018775                 db  43h ; C
.eh_frame:0000000000018776                 db  0Eh
.eh_frame:0000000000018777                 db  30h ; 0
.eh_frame:0000000000018778                 db  41h ; A
.eh_frame:0000000000018779                 db  0Eh
.eh_frame:000000000001877A                 db  28h ; (
.eh_frame:000000000001877B                 db  42h ; B
.eh_frame:000000000001877C                 db  0Eh
.eh_frame:000000000001877D                 db  20h
.eh_frame:000000000001877E                 db  42h ; B
.eh_frame:000000000001877F                 db  0Eh
.eh_frame:0000000000018780                 db  18h
.eh_frame:0000000000018781                 db  42h ; B
.eh_frame:0000000000018782                 db  0Eh
.eh_frame:0000000000018783                 db  10h
.eh_frame:0000000000018784                 db  42h ; B
.eh_frame:0000000000018785                 db  0Eh
.eh_frame:0000000000018786                 db    8
.eh_frame:0000000000018787                 db  4Bh ; K
.eh_frame:0000000000018788                 db  0Bh
.eh_frame:0000000000018789                 db  4Bh ; K
.eh_frame:000000000001878A                 db  0Ah
.eh_frame:000000000001878B                 db  0Eh
.eh_frame:000000000001878C                 db  38h ; 8
.eh_frame:000000000001878D                 db  46h ; F
.eh_frame:000000000001878E                 db  0Eh
.eh_frame:000000000001878F                 db  30h ; 0
.eh_frame:0000000000018790                 db  41h ; A
.eh_frame:0000000000018791                 db  0Eh
.eh_frame:0000000000018792                 db  28h ; (
.eh_frame:0000000000018793                 db  42h ; B
.eh_frame:0000000000018794                 db  0Eh
.eh_frame:0000000000018795                 db  20h
.eh_frame:0000000000018796                 db  42h ; B
.eh_frame:0000000000018797                 db  0Eh
.eh_frame:0000000000018798                 db  18h
.eh_frame:0000000000018799                 db  42h ; B
.eh_frame:000000000001879A                 db  0Eh
.eh_frame:000000000001879B                 db  10h
.eh_frame:000000000001879C                 db  42h ; B
.eh_frame:000000000001879D                 db  0Eh
.eh_frame:000000000001879E                 db    8
.eh_frame:000000000001879F                 db  41h ; A
.eh_frame:00000000000187A0                 db  0Bh
.eh_frame:00000000000187A1                 db    0
.eh_frame:00000000000187A2                 db    0
.eh_frame:00000000000187A3                 db    0
.eh_frame:00000000000187A4                 db  24h ; $
.eh_frame:00000000000187A5                 db    0
.eh_frame:00000000000187A6                 db    0
.eh_frame:00000000000187A7                 db    0
.eh_frame:00000000000187A8                 db 0E8h
.eh_frame:00000000000187A9                 db    2
.eh_frame:00000000000187AA                 db    0
.eh_frame:00000000000187AB                 db    0
.eh_frame:00000000000187AC                 db 0E4h
.eh_frame:00000000000187AD                 db 0B4h
.eh_frame:00000000000187AE                 db 0FEh
.eh_frame:00000000000187AF                 db 0FFh
.eh_frame:00000000000187B0                 db 0D4h
.eh_frame:00000000000187B1                 db    0
.eh_frame:00000000000187B2                 db    0
.eh_frame:00000000000187B3                 db    0
.eh_frame:00000000000187B4                 db    0
.eh_frame:00000000000187B5                 db  41h ; A
.eh_frame:00000000000187B6                 db  0Eh
.eh_frame:00000000000187B7                 db  10h
.eh_frame:00000000000187B8                 db  83h
.eh_frame:00000000000187B9                 db    2
.eh_frame:00000000000187BA                 db    2
.eh_frame:00000000000187BB                 db  76h ; v
.eh_frame:00000000000187BC                 db  0Ah
.eh_frame:00000000000187BD                 db  0Eh
.eh_frame:00000000000187BE                 db    8
.eh_frame:00000000000187BF                 db  49h ; I
.eh_frame:00000000000187C0                 db  0Bh
.eh_frame:00000000000187C1                 db  62h ; b
.eh_frame:00000000000187C2                 db  0Ah
.eh_frame:00000000000187C3                 db  0Eh
.eh_frame:00000000000187C4                 db    8
.eh_frame:00000000000187C5                 db  4Eh ; N
.eh_frame:00000000000187C6                 db  0Bh
.eh_frame:00000000000187C7                 db  63h ; c
.eh_frame:00000000000187C8                 db  0Eh
.eh_frame:00000000000187C9                 db    8
.eh_frame:00000000000187CA                 db    0
.eh_frame:00000000000187CB                 db    0
.eh_frame:00000000000187CC                 db  14h
.eh_frame:00000000000187CD                 db    0
.eh_frame:00000000000187CE                 db    0
.eh_frame:00000000000187CF                 db    0
.eh_frame:00000000000187D0                 db  10h
.eh_frame:00000000000187D1                 db    3
.eh_frame:00000000000187D2                 db    0
.eh_frame:00000000000187D3                 db    0
.eh_frame:00000000000187D4                 db  9Ch
.eh_frame:00000000000187D5                 db 0B5h
.eh_frame:00000000000187D6                 db 0FEh
.eh_frame:00000000000187D7                 db 0FFh
.eh_frame:00000000000187D8                 db  27h ; '
.eh_frame:00000000000187D9                 db    0
.eh_frame:00000000000187DA                 db    0
.eh_frame:00000000000187DB                 db    0
.eh_frame:00000000000187DC                 db    0
.eh_frame:00000000000187DD                 db  44h ; D
.eh_frame:00000000000187DE                 db  0Eh
.eh_frame:00000000000187DF                 db  10h
.eh_frame:00000000000187E0                 db  62h ; b
.eh_frame:00000000000187E1                 db  0Eh
.eh_frame:00000000000187E2                 db    8
.eh_frame:00000000000187E3                 db    0
.eh_frame:00000000000187E4                 db  24h ; $
.eh_frame:00000000000187E5                 db    0
.eh_frame:00000000000187E6                 db    0
.eh_frame:00000000000187E7                 db    0
.eh_frame:00000000000187E8                 db  28h ; (
.eh_frame:00000000000187E9                 db    3
.eh_frame:00000000000187EA                 db    0
.eh_frame:00000000000187EB                 db    0
.eh_frame:00000000000187EC                 db  94h
.eh_frame:00000000000187ED                 db  97h
.eh_frame:00000000000187EE                 db 0FEh
.eh_frame:00000000000187EF                 db 0FFh
.eh_frame:00000000000187F0                 db 0D2h
.eh_frame:00000000000187F1                 db    0
.eh_frame:00000000000187F2                 db    0
.eh_frame:00000000000187F3                 db    0
.eh_frame:00000000000187F4                 db    0
.eh_frame:00000000000187F5                 db  42h ; B
.eh_frame:00000000000187F6                 db  0Eh
.eh_frame:00000000000187F7                 db  10h
.eh_frame:00000000000187F8                 db  8Dh
.eh_frame:00000000000187F9                 db    2
.eh_frame:00000000000187FA                 db  42h ; B
.eh_frame:00000000000187FB                 db  0Eh
.eh_frame:00000000000187FC                 db  18h
.eh_frame:00000000000187FD                 db  8Ch
.eh_frame:00000000000187FE                 db    3
.eh_frame:00000000000187FF                 db  41h ; A
.eh_frame:0000000000018800                 db  0Eh
.eh_frame:0000000000018801                 db  20h
.eh_frame:0000000000018802                 db  86h
.eh_frame:0000000000018803                 db    4
.eh_frame:0000000000018804                 db  41h ; A
.eh_frame:0000000000018805                 db  0Eh
.eh_frame:0000000000018806                 db  28h ; (
.eh_frame:0000000000018807                 db  83h
.eh_frame:0000000000018808                 db    5
.eh_frame:0000000000018809                 db  49h ; I
.eh_frame:000000000001880A                 db  0Eh
.eh_frame:000000000001880B                 db  50h ; P
.eh_frame:000000000001880C                 db  34h ; 4
.eh_frame:000000000001880D                 db    0
.eh_frame:000000000001880E                 db    0
.eh_frame:000000000001880F                 db    0
.eh_frame:0000000000018810                 db  50h ; P
.eh_frame:0000000000018811                 db    3
.eh_frame:0000000000018812                 db    0
.eh_frame:0000000000018813                 db    0
.eh_frame:0000000000018814                 db  8Ch
.eh_frame:0000000000018815                 db 0B5h
.eh_frame:0000000000018816                 db 0FEh
.eh_frame:0000000000018817                 db 0FFh
.eh_frame:0000000000018818                 db 0F6h
.eh_frame:0000000000018819                 db    0
.eh_frame:000000000001881A                 db    0
.eh_frame:000000000001881B                 db    0
.eh_frame:000000000001881C                 db    0
.eh_frame:000000000001881D                 db  41h ; A
.eh_frame:000000000001881E                 db  0Eh
.eh_frame:000000000001881F                 db  10h
.eh_frame:0000000000018820                 db  86h
.eh_frame:0000000000018821                 db    2
.eh_frame:0000000000018822                 db  41h ; A
.eh_frame:0000000000018823                 db  0Eh
.eh_frame:0000000000018824                 db  18h
.eh_frame:0000000000018825                 db  83h
.eh_frame:0000000000018826                 db    3
.eh_frame:0000000000018827                 db  47h ; G
.eh_frame:0000000000018828                 db  0Eh
.eh_frame:0000000000018829                 db  20h
.eh_frame:000000000001882A                 db    2
.eh_frame:000000000001882B                 db 0B0h
.eh_frame:000000000001882C                 db  0Ah
.eh_frame:000000000001882D                 db  0Eh
.eh_frame:000000000001882E                 db  18h
.eh_frame:000000000001882F                 db  46h ; F
.eh_frame:0000000000018830                 db  0Eh
.eh_frame:0000000000018831                 db  10h
.eh_frame:0000000000018832                 db  41h ; A
.eh_frame:0000000000018833                 db  0Eh
.eh_frame:0000000000018834                 db    8
.eh_frame:0000000000018835                 db  48h ; H
.eh_frame:0000000000018836                 db  0Bh
.eh_frame:0000000000018837                 db  44h ; D
.eh_frame:0000000000018838                 db  0Ah
.eh_frame:0000000000018839                 db  0Eh
.eh_frame:000000000001883A                 db  18h
.eh_frame:000000000001883B                 db  43h ; C
.eh_frame:000000000001883C                 db  0Eh
.eh_frame:000000000001883D                 db  10h
.eh_frame:000000000001883E                 db  41h ; A
.eh_frame:000000000001883F                 db  0Eh
.eh_frame:0000000000018840                 db    8
.eh_frame:0000000000018841                 db  48h ; H
.eh_frame:0000000000018842                 db  0Bh
.eh_frame:0000000000018843                 db    0
.eh_frame:0000000000018844                 db  18h
.eh_frame:0000000000018845                 db    0
.eh_frame:0000000000018846                 db    0
.eh_frame:0000000000018847                 db    0
.eh_frame:0000000000018848                 db  88h
.eh_frame:0000000000018849                 db    3
.eh_frame:000000000001884A                 db    0
.eh_frame:000000000001884B                 db    0
.eh_frame:000000000001884C                 db  54h ; T
.eh_frame:000000000001884D                 db 0B6h
.eh_frame:000000000001884E                 db 0FEh
.eh_frame:000000000001884F                 db 0FFh
.eh_frame:0000000000018850                 db  64h ; d
.eh_frame:0000000000018851                 db    0
.eh_frame:0000000000018852                 db    0
.eh_frame:0000000000018853                 db    0
.eh_frame:0000000000018854                 db    0
.eh_frame:0000000000018855                 db  60h ; `
.eh_frame:0000000000018856                 db  0Eh
.eh_frame:0000000000018857                 db  10h
.eh_frame:0000000000018858                 db  83h
.eh_frame:0000000000018859                 db    2
.eh_frame:000000000001885A                 db  53h ; S
.eh_frame:000000000001885B                 db  0Ah
.eh_frame:000000000001885C                 db  0Eh
.eh_frame:000000000001885D                 db    8
.eh_frame:000000000001885E                 db  45h ; E
.eh_frame:000000000001885F                 db  0Bh
.eh_frame:0000000000018860                 db  28h ; (
.eh_frame:0000000000018861                 db    0
.eh_frame:0000000000018862                 db    0
.eh_frame:0000000000018863                 db    0
.eh_frame:0000000000018864                 db 0A4h
.eh_frame:0000000000018865                 db    3
.eh_frame:0000000000018866                 db    0
.eh_frame:0000000000018867                 db    0
.eh_frame:0000000000018868                 db 0A8h
.eh_frame:0000000000018869                 db 0B6h
.eh_frame:000000000001886A                 db 0FEh
.eh_frame:000000000001886B                 db 0FFh
.eh_frame:000000000001886C                 db  1Ah
.eh_frame:000000000001886D                 db    4
.eh_frame:000000000001886E                 db    0
.eh_frame:000000000001886F                 db    0
.eh_frame:0000000000018870                 db    0
.eh_frame:0000000000018871                 db  42h ; B
.eh_frame:0000000000018872                 db  0Eh
.eh_frame:0000000000018873                 db  10h
.eh_frame:0000000000018874                 db  8Dh
.eh_frame:0000000000018875                 db    2
.eh_frame:0000000000018876                 db  42h ; B
.eh_frame:0000000000018877                 db  0Eh
.eh_frame:0000000000018878                 db  18h
.eh_frame:0000000000018879                 db  8Ch
.eh_frame:000000000001887A                 db    3
.eh_frame:000000000001887B                 db  46h ; F
.eh_frame:000000000001887C                 db  0Eh
.eh_frame:000000000001887D                 db  20h
.eh_frame:000000000001887E                 db  86h
.eh_frame:000000000001887F                 db    4
.eh_frame:0000000000018880                 db  41h ; A
.eh_frame:0000000000018881                 db  0Eh
.eh_frame:0000000000018882                 db  28h ; (
.eh_frame:0000000000018883                 db  83h
.eh_frame:0000000000018884                 db    5
.eh_frame:0000000000018885                 db  49h ; I
.eh_frame:0000000000018886                 db  0Eh
.eh_frame:0000000000018887                 db 0B0h
.eh_frame:0000000000018888                 db    1
.eh_frame:0000000000018889                 db    0
.eh_frame:000000000001888A                 db    0
.eh_frame:000000000001888B                 db    0
.eh_frame:000000000001888C                 db  58h ; X
.eh_frame:000000000001888D                 db    0
.eh_frame:000000000001888E                 db    0
.eh_frame:000000000001888F                 db    0
.eh_frame:0000000000018890                 db 0D0h
.eh_frame:0000000000018891                 db    3
.eh_frame:0000000000018892                 db    0
.eh_frame:0000000000018893                 db    0
.eh_frame:0000000000018894                 db 0CCh
.eh_frame:0000000000018895                 db  97h
.eh_frame:0000000000018896                 db 0FEh
.eh_frame:0000000000018897                 db 0FFh
.eh_frame:0000000000018898                 db  21h ; !
.eh_frame:0000000000018899                 db  0Fh
.eh_frame:000000000001889A                 db    0
.eh_frame:000000000001889B                 db    0
.eh_frame:000000000001889C                 db    0
.eh_frame:000000000001889D                 db  42h ; B
.eh_frame:000000000001889E                 db  0Eh
.eh_frame:000000000001889F                 db  10h
.eh_frame:00000000000188A0                 db  8Fh
.eh_frame:00000000000188A1                 db    2
.eh_frame:00000000000188A2                 db  42h ; B
.eh_frame:00000000000188A3                 db  0Eh
.eh_frame:00000000000188A4                 db  18h
.eh_frame:00000000000188A5                 db  8Eh
.eh_frame:00000000000188A6                 db    3
.eh_frame:00000000000188A7                 db  42h ; B
.eh_frame:00000000000188A8                 db  0Eh
.eh_frame:00000000000188A9                 db  20h
.eh_frame:00000000000188AA                 db  8Dh
.eh_frame:00000000000188AB                 db    4
.eh_frame:00000000000188AC                 db  42h ; B
.eh_frame:00000000000188AD                 db  0Eh
.eh_frame:00000000000188AE                 db  28h ; (
.eh_frame:00000000000188AF                 db  8Ch
.eh_frame:00000000000188B0                 db    5
.eh_frame:00000000000188B1                 db  44h ; D
.eh_frame:00000000000188B2                 db  0Eh
.eh_frame:00000000000188B3                 db  30h ; 0
.eh_frame:00000000000188B4                 db  86h
.eh_frame:00000000000188B5                 db    6
.eh_frame:00000000000188B6                 db  41h ; A
.eh_frame:00000000000188B7                 db  0Eh
.eh_frame:00000000000188B8                 db  38h ; 8
.eh_frame:00000000000188B9                 db  83h
.eh_frame:00000000000188BA                 db    7
.eh_frame:00000000000188BB                 db  4Eh ; N
.eh_frame:00000000000188BC                 db  0Eh
.eh_frame:00000000000188BD                 db 0C0h
.eh_frame:00000000000188BE                 db    2
.eh_frame:00000000000188BF                 db    3
.eh_frame:00000000000188C0                 db 0DCh
.eh_frame:00000000000188C1                 db    1
.eh_frame:00000000000188C2                 db  0Ah
.eh_frame:00000000000188C3                 db  0Eh
.eh_frame:00000000000188C4                 db 0C8h
.eh_frame:00000000000188C5                 db    2
.eh_frame:00000000000188C6                 db  50h ; P
.eh_frame:00000000000188C7                 db  0Eh
.eh_frame:00000000000188C8                 db 0D0h
.eh_frame:00000000000188C9                 db    2
.eh_frame:00000000000188CA                 db  6Ah ; j
.eh_frame:00000000000188CB                 db  0Bh
.eh_frame:00000000000188CC                 db    3
.eh_frame:00000000000188CD                 db  52h ; R
.eh_frame:00000000000188CE                 db    9
.eh_frame:00000000000188CF                 db  0Ah
.eh_frame:00000000000188D0                 db  0Eh
.eh_frame:00000000000188D1                 db  38h ; 8
.eh_frame:00000000000188D2                 db  41h ; A
.eh_frame:00000000000188D3                 db  0Eh
.eh_frame:00000000000188D4                 db  30h ; 0
.eh_frame:00000000000188D5                 db  41h ; A
.eh_frame:00000000000188D6                 db  0Eh
.eh_frame:00000000000188D7                 db  28h ; (
.eh_frame:00000000000188D8                 db  42h ; B
.eh_frame:00000000000188D9                 db  0Eh
.eh_frame:00000000000188DA                 db  20h
.eh_frame:00000000000188DB                 db  42h ; B
.eh_frame:00000000000188DC                 db  0Eh
.eh_frame:00000000000188DD                 db  18h
.eh_frame:00000000000188DE                 db  42h ; B
.eh_frame:00000000000188DF                 db  0Eh
.eh_frame:00000000000188E0                 db  10h
.eh_frame:00000000000188E1                 db  42h ; B
.eh_frame:00000000000188E2                 db  0Eh
.eh_frame:00000000000188E3                 db    8
.eh_frame:00000000000188E4                 db  41h ; A
.eh_frame:00000000000188E5                 db  0Bh
.eh_frame:00000000000188E6                 db    0
.eh_frame:00000000000188E7                 db    0
.eh_frame:00000000000188E8                 db  10h
.eh_frame:00000000000188E9                 db    0
.eh_frame:00000000000188EA                 db    0
.eh_frame:00000000000188EB                 db    0
.eh_frame:00000000000188EC                 db  2Ch ; ,
.eh_frame:00000000000188ED                 db    4
.eh_frame:00000000000188EE                 db    0
.eh_frame:00000000000188EF                 db    0
.eh_frame:00000000000188F0                 db  40h ; @
.eh_frame:00000000000188F1                 db 0BAh
.eh_frame:00000000000188F2                 db 0FEh
.eh_frame:00000000000188F3                 db 0FFh
.eh_frame:00000000000188F4                 db    8
.eh_frame:00000000000188F5                 db    0
.eh_frame:00000000000188F6                 db    0
.eh_frame:00000000000188F7                 db    0
.eh_frame:00000000000188F8                 db    0
.eh_frame:00000000000188F9                 db    0
.eh_frame:00000000000188FA                 db    0
.eh_frame:00000000000188FB                 db    0
.eh_frame:00000000000188FC                 db  10h
.eh_frame:00000000000188FD                 db    0
.eh_frame:00000000000188FE                 db    0
.eh_frame:00000000000188FF                 db    0
.eh_frame:0000000000018900                 db  40h ; @
.eh_frame:0000000000018901                 db    4
.eh_frame:0000000000018902                 db    0
.eh_frame:0000000000018903                 db    0
.eh_frame:0000000000018904                 db  3Ch ; <
.eh_frame:0000000000018905                 db 0BAh
.eh_frame:0000000000018906                 db 0FEh
.eh_frame:0000000000018907                 db 0FFh
.eh_frame:0000000000018908                 db    8
.eh_frame:0000000000018909                 db    0
.eh_frame:000000000001890A                 db    0
.eh_frame:000000000001890B                 db    0
.eh_frame:000000000001890C                 db    0
.eh_frame:000000000001890D                 db    0
.eh_frame:000000000001890E                 db    0
.eh_frame:000000000001890F                 db    0
.eh_frame:0000000000018910                 db  2Ch ; ,
.eh_frame:0000000000018911                 db    0
.eh_frame:0000000000018912                 db    0
.eh_frame:0000000000018913                 db    0
.eh_frame:0000000000018914                 db  54h ; T
.eh_frame:0000000000018915                 db    4
.eh_frame:0000000000018916                 db    0
.eh_frame:0000000000018917                 db    0
.eh_frame:0000000000018918                 db  38h ; 8
.eh_frame:0000000000018919                 db 0BAh
.eh_frame:000000000001891A                 db 0FEh
.eh_frame:000000000001891B                 db 0FFh
.eh_frame:000000000001891C                 db 0A4h
.eh_frame:000000000001891D                 db    0
.eh_frame:000000000001891E                 db    0
.eh_frame:000000000001891F                 db    0
.eh_frame:0000000000018920                 db    0
.eh_frame:0000000000018921                 db  41h ; A
.eh_frame:0000000000018922                 db  0Eh
.eh_frame:0000000000018923                 db  10h
.eh_frame:0000000000018924                 db  86h
.eh_frame:0000000000018925                 db    2
.eh_frame:0000000000018926                 db  41h ; A
.eh_frame:0000000000018927                 db  0Eh
.eh_frame:0000000000018928                 db  18h
.eh_frame:0000000000018929                 db  83h
.eh_frame:000000000001892A                 db    3
.eh_frame:000000000001892B                 db  44h ; D
.eh_frame:000000000001892C                 db  0Eh
.eh_frame:000000000001892D                 db  20h
.eh_frame:000000000001892E                 db  7Ah ; z
.eh_frame:000000000001892F                 db  0Ah
.eh_frame:0000000000018930                 db  0Eh
.eh_frame:0000000000018931                 db  18h
.eh_frame:0000000000018932                 db  41h ; A
.eh_frame:0000000000018933                 db  0Eh
.eh_frame:0000000000018934                 db  10h
.eh_frame:0000000000018935                 db  41h ; A
.eh_frame:0000000000018936                 db  0Eh
.eh_frame:0000000000018937                 db    8
.eh_frame:0000000000018938                 db  41h ; A
.eh_frame:0000000000018939                 db  0Bh
.eh_frame:000000000001893A                 db    0
.eh_frame:000000000001893B                 db    0
.eh_frame:000000000001893C                 db    0
.eh_frame:000000000001893D                 db    0
.eh_frame:000000000001893E                 db    0
.eh_frame:000000000001893F                 db    0
.eh_frame:0000000000018940                 db  34h ; 4
.eh_frame:0000000000018941                 db    0
.eh_frame:0000000000018942                 db    0
.eh_frame:0000000000018943                 db    0
.eh_frame:0000000000018944                 db  84h
.eh_frame:0000000000018945                 db    4
.eh_frame:0000000000018946                 db    0
.eh_frame:0000000000018947                 db    0
.eh_frame:0000000000018948                 db 0B8h
.eh_frame:0000000000018949                 db 0BAh
.eh_frame:000000000001894A                 db 0FEh
.eh_frame:000000000001894B                 db 0FFh
.eh_frame:000000000001894C                 db  56h ; V
.eh_frame:000000000001894D                 db    0
.eh_frame:000000000001894E                 db    0
.eh_frame:000000000001894F                 db    0
.eh_frame:0000000000018950                 db    0
.eh_frame:0000000000018951                 db  42h ; B
.eh_frame:0000000000018952                 db  0Eh
.eh_frame:0000000000018953                 db  10h
.eh_frame:0000000000018954                 db  8Dh
.eh_frame:0000000000018955                 db    2
.eh_frame:0000000000018956                 db  42h ; B
.eh_frame:0000000000018957                 db  0Eh
.eh_frame:0000000000018958                 db  18h
.eh_frame:0000000000018959                 db  8Ch
.eh_frame:000000000001895A                 db    3
.eh_frame:000000000001895B                 db  43h ; C
.eh_frame:000000000001895C                 db  0Eh
.eh_frame:000000000001895D                 db  20h
.eh_frame:000000000001895E                 db  86h
.eh_frame:000000000001895F                 db    4
.eh_frame:0000000000018960                 db  41h ; A
.eh_frame:0000000000018961                 db  0Eh
.eh_frame:0000000000018962                 db  28h ; (
.eh_frame:0000000000018963                 db  83h
.eh_frame:0000000000018964                 db    5
.eh_frame:0000000000018965                 db  4Dh ; M
.eh_frame:0000000000018966                 db  0Eh
.eh_frame:0000000000018967                 db  30h ; 0
.eh_frame:0000000000018968                 db  78h ; x
.eh_frame:0000000000018969                 db  0Eh
.eh_frame:000000000001896A                 db  28h ; (
.eh_frame:000000000001896B                 db  43h ; C
.eh_frame:000000000001896C                 db  0Eh
.eh_frame:000000000001896D                 db  20h
.eh_frame:000000000001896E                 db  41h ; A
.eh_frame:000000000001896F                 db  0Eh
.eh_frame:0000000000018970                 db  18h
.eh_frame:0000000000018971                 db  42h ; B
.eh_frame:0000000000018972                 db  0Eh
.eh_frame:0000000000018973                 db  10h
.eh_frame:0000000000018974                 db  42h ; B
.eh_frame:0000000000018975                 db  0Eh
.eh_frame:0000000000018976                 db    8
.eh_frame:0000000000018977                 db    0
.eh_frame:0000000000018978                 db  2Ch ; ,
.eh_frame:0000000000018979                 db    0
.eh_frame:000000000001897A                 db    0
.eh_frame:000000000001897B                 db    0
.eh_frame:000000000001897C                 db 0BCh
.eh_frame:000000000001897D                 db    4
.eh_frame:000000000001897E                 db    0
.eh_frame:000000000001897F                 db    0
.eh_frame:0000000000018980                 db 0E0h
.eh_frame:0000000000018981                 db 0BAh
.eh_frame:0000000000018982                 db 0FEh
.eh_frame:0000000000018983                 db 0FFh
.eh_frame:0000000000018984                 db  93h
.eh_frame:0000000000018985                 db    0
.eh_frame:0000000000018986                 db    0
.eh_frame:0000000000018987                 db    0
.eh_frame:0000000000018988                 db    0
.eh_frame:0000000000018989                 db  42h ; B
.eh_frame:000000000001898A                 db  0Eh
.eh_frame:000000000001898B                 db  10h
.eh_frame:000000000001898C                 db  8Ch
.eh_frame:000000000001898D                 db    2
.eh_frame:000000000001898E                 db  41h ; A
.eh_frame:000000000001898F                 db  0Eh
.eh_frame:0000000000018990                 db  18h
.eh_frame:0000000000018991                 db  86h
.eh_frame:0000000000018992                 db    3
.eh_frame:0000000000018993                 db  44h ; D
.eh_frame:0000000000018994                 db  0Eh
.eh_frame:0000000000018995                 db  20h
.eh_frame:0000000000018996                 db  83h
.eh_frame:0000000000018997                 db    4
.eh_frame:0000000000018998                 db  5Eh ; ^
.eh_frame:0000000000018999                 db  0Ah
.eh_frame:000000000001899A                 db  0Eh
.eh_frame:000000000001899B                 db  18h
.eh_frame:000000000001899C                 db  41h ; A
.eh_frame:000000000001899D                 db  0Eh
.eh_frame:000000000001899E                 db  10h
.eh_frame:000000000001899F                 db  42h ; B
.eh_frame:00000000000189A0                 db  0Eh
.eh_frame:00000000000189A1                 db    8
.eh_frame:00000000000189A2                 db  48h ; H
.eh_frame:00000000000189A3                 db  0Bh
.eh_frame:00000000000189A4                 db    0
.eh_frame:00000000000189A5                 db    0
.eh_frame:00000000000189A6                 db    0
.eh_frame:00000000000189A7                 db    0
.eh_frame:00000000000189A8                 db  14h
.eh_frame:00000000000189A9                 db    0
.eh_frame:00000000000189AA                 db    0
.eh_frame:00000000000189AB                 db    0
.eh_frame:00000000000189AC                 db 0ECh
.eh_frame:00000000000189AD                 db    4
.eh_frame:00000000000189AE                 db    0
.eh_frame:00000000000189AF                 db    0
.eh_frame:00000000000189B0                 db  50h ; P
.eh_frame:00000000000189B1                 db 0BBh
.eh_frame:00000000000189B2                 db 0FEh
.eh_frame:00000000000189B3                 db 0FFh
.eh_frame:00000000000189B4                 db  42h ; B
.eh_frame:00000000000189B5                 db    0
.eh_frame:00000000000189B6                 db    0
.eh_frame:00000000000189B7                 db    0
.eh_frame:00000000000189B8                 db    0
.eh_frame:00000000000189B9                 db    0
.eh_frame:00000000000189BA                 db    0
.eh_frame:00000000000189BB                 db    0
.eh_frame:00000000000189BC                 db    0
.eh_frame:00000000000189BD                 db    0
.eh_frame:00000000000189BE                 db    0
.eh_frame:00000000000189BF                 db    0
.eh_frame:00000000000189C0                 db  1Ch
.eh_frame:00000000000189C1                 db    0
.eh_frame:00000000000189C2                 db    0
.eh_frame:00000000000189C3                 db    0
.eh_frame:00000000000189C4                 db    4
.eh_frame:00000000000189C5                 db    5
.eh_frame:00000000000189C6                 db    0
.eh_frame:00000000000189C7                 db    0
.eh_frame:00000000000189C8                 db  88h
.eh_frame:00000000000189C9                 db 0BBh
.eh_frame:00000000000189CA                 db 0FEh
.eh_frame:00000000000189CB                 db 0FFh
.eh_frame:00000000000189CC                 db  9Fh
.eh_frame:00000000000189CD                 db    0
.eh_frame:00000000000189CE                 db    0
.eh_frame:00000000000189CF                 db    0
.eh_frame:00000000000189D0                 db    0
.eh_frame:00000000000189D1                 db  44h ; D
.eh_frame:00000000000189D2                 db  0Eh
.eh_frame:00000000000189D3                 db  10h
.eh_frame:00000000000189D4                 db  83h
.eh_frame:00000000000189D5                 db    2
.eh_frame:00000000000189D6                 db    2
.eh_frame:00000000000189D7                 db  78h ; x
.eh_frame:00000000000189D8                 db  0Ah
.eh_frame:00000000000189D9                 db  0Eh
.eh_frame:00000000000189DA                 db    8
.eh_frame:00000000000189DB                 db  41h ; A
.eh_frame:00000000000189DC                 db  0Bh
.eh_frame:00000000000189DD                 db    0
.eh_frame:00000000000189DE                 db    0
.eh_frame:00000000000189DF                 db    0
.eh_frame:00000000000189E0                 db  40h ; @
.eh_frame:00000000000189E1                 db    0
.eh_frame:00000000000189E2                 db    0
.eh_frame:00000000000189E3                 db    0
.eh_frame:00000000000189E4                 db  24h ; $
.eh_frame:00000000000189E5                 db    5
.eh_frame:00000000000189E6                 db    0
.eh_frame:00000000000189E7                 db    0
.eh_frame:00000000000189E8                 db    8
.eh_frame:00000000000189E9                 db 0BCh
.eh_frame:00000000000189EA                 db 0FEh
.eh_frame:00000000000189EB                 db 0FFh
.eh_frame:00000000000189EC                 db 0E7h
.eh_frame:00000000000189ED                 db    0
.eh_frame:00000000000189EE                 db    0
.eh_frame:00000000000189EF                 db    0
.eh_frame:00000000000189F0                 db    0
.eh_frame:00000000000189F1                 db  41h ; A
.eh_frame:00000000000189F2                 db  0Eh
.eh_frame:00000000000189F3                 db  10h
.eh_frame:00000000000189F4                 db  86h
.eh_frame:00000000000189F5                 db    2
.eh_frame:00000000000189F6                 db  41h ; A
.eh_frame:00000000000189F7                 db  0Eh
.eh_frame:00000000000189F8                 db  18h
.eh_frame:00000000000189F9                 db  83h
.eh_frame:00000000000189FA                 db    3
.eh_frame:00000000000189FB                 db  49h ; I
.eh_frame:00000000000189FC                 db  0Eh
.eh_frame:00000000000189FD                 db  20h
.eh_frame:00000000000189FE                 db  6Eh ; n
.eh_frame:00000000000189FF                 db  0Ah
.eh_frame:0000000000018A00                 db  0Eh
.eh_frame:0000000000018A01                 db  18h
.eh_frame:0000000000018A02                 db  41h ; A
.eh_frame:0000000000018A03                 db  0Eh
.eh_frame:0000000000018A04                 db  10h
.eh_frame:0000000000018A05                 db  41h ; A
.eh_frame:0000000000018A06                 db  0Eh
.eh_frame:0000000000018A07                 db    8
.eh_frame:0000000000018A08                 db  45h ; E
.eh_frame:0000000000018A09                 db  0Bh
.eh_frame:0000000000018A0A                 db    2
.eh_frame:0000000000018A0B                 db  4Ah ; J
.eh_frame:0000000000018A0C                 db  0Ah
.eh_frame:0000000000018A0D                 db  0Eh
.eh_frame:0000000000018A0E                 db  18h
.eh_frame:0000000000018A0F                 db  41h ; A
.eh_frame:0000000000018A10                 db  0Eh
.eh_frame:0000000000018A11                 db  10h
.eh_frame:0000000000018A12                 db  41h ; A
.eh_frame:0000000000018A13                 db  0Eh
.eh_frame:0000000000018A14                 db    8
.eh_frame:0000000000018A15                 db  44h ; D
.eh_frame:0000000000018A16                 db  0Bh
.eh_frame:0000000000018A17                 db    2
.eh_frame:0000000000018A18                 db  54h ; T
.eh_frame:0000000000018A19                 db  0Eh
.eh_frame:0000000000018A1A                 db  18h
.eh_frame:0000000000018A1B                 db  41h ; A
.eh_frame:0000000000018A1C                 db  0Eh
.eh_frame:0000000000018A1D                 db  10h
.eh_frame:0000000000018A1E                 db  41h ; A
.eh_frame:0000000000018A1F                 db  0Eh
.eh_frame:0000000000018A20                 db    8
.eh_frame:0000000000018A21                 db    0
.eh_frame:0000000000018A22                 db    0
.eh_frame:0000000000018A23                 db    0
.eh_frame:0000000000018A24                 db  74h ; t
.eh_frame:0000000000018A25                 db    0
.eh_frame:0000000000018A26                 db    0
.eh_frame:0000000000018A27                 db    0
.eh_frame:0000000000018A28                 db  68h ; h
.eh_frame:0000000000018A29                 db    5
.eh_frame:0000000000018A2A                 db    0
.eh_frame:0000000000018A2B                 db    0
.eh_frame:0000000000018A2C                 db 0B4h
.eh_frame:0000000000018A2D                 db 0BCh
.eh_frame:0000000000018A2E                 db 0FEh
.eh_frame:0000000000018A2F                 db 0FFh
.eh_frame:0000000000018A30                 db  34h ; 4
.eh_frame:0000000000018A31                 db  12h
.eh_frame:0000000000018A32                 db    0
.eh_frame:0000000000018A33                 db    0
.eh_frame:0000000000018A34                 db    0
.eh_frame:0000000000018A35                 db  42h ; B
.eh_frame:0000000000018A36                 db  0Eh
.eh_frame:0000000000018A37                 db  10h
.eh_frame:0000000000018A38                 db  8Fh
.eh_frame:0000000000018A39                 db    2
.eh_frame:0000000000018A3A                 db  42h ; B
.eh_frame:0000000000018A3B                 db  0Eh
.eh_frame:0000000000018A3C                 db  18h
.eh_frame:0000000000018A3D                 db  8Eh
.eh_frame:0000000000018A3E                 db    3
.eh_frame:0000000000018A3F                 db  45h ; E
.eh_frame:0000000000018A40                 db  0Eh
.eh_frame:0000000000018A41                 db  20h
.eh_frame:0000000000018A42                 db  8Dh
.eh_frame:0000000000018A43                 db    4
.eh_frame:0000000000018A44                 db  42h ; B
.eh_frame:0000000000018A45                 db  0Eh
.eh_frame:0000000000018A46                 db  28h ; (
.eh_frame:0000000000018A47                 db  8Ch
.eh_frame:0000000000018A48                 db    5
.eh_frame:0000000000018A49                 db  44h ; D
.eh_frame:0000000000018A4A                 db  0Eh
.eh_frame:0000000000018A4B                 db  30h ; 0
.eh_frame:0000000000018A4C                 db  86h
.eh_frame:0000000000018A4D                 db    6
.eh_frame:0000000000018A4E                 db  41h ; A
.eh_frame:0000000000018A4F                 db  0Eh
.eh_frame:0000000000018A50                 db  38h ; 8
.eh_frame:0000000000018A51                 db  83h
.eh_frame:0000000000018A52                 db    7
.eh_frame:0000000000018A53                 db  53h ; S
.eh_frame:0000000000018A54                 db  0Eh
.eh_frame:0000000000018A55                 db 0F0h
.eh_frame:0000000000018A56                 db    1
.eh_frame:0000000000018A57                 db    3
.eh_frame:0000000000018A58                 db  81h
.eh_frame:0000000000018A59                 db  0Bh
.eh_frame:0000000000018A5A                 db  0Eh
.eh_frame:0000000000018A5B                 db 0F8h
.eh_frame:0000000000018A5C                 db    1
.eh_frame:0000000000018A5D                 db  4Ah ; J
.eh_frame:0000000000018A5E                 db  0Eh
.eh_frame:0000000000018A5F                 db  80h
.eh_frame:0000000000018A60                 db    2
.eh_frame:0000000000018A61                 db  44h ; D
.eh_frame:0000000000018A62                 db  0Eh
.eh_frame:0000000000018A63                 db  88h
.eh_frame:0000000000018A64                 db    2
.eh_frame:0000000000018A65                 db  45h ; E
.eh_frame:0000000000018A66                 db  0Eh
.eh_frame:0000000000018A67                 db  90h
.eh_frame:0000000000018A68                 db    2
.eh_frame:0000000000018A69                 db  5Fh ; _
.eh_frame:0000000000018A6A                 db  0Eh
.eh_frame:0000000000018A6B                 db 0F0h
.eh_frame:0000000000018A6C                 db    1
.eh_frame:0000000000018A6D                 db  64h ; d
.eh_frame:0000000000018A6E                 db  0Ah
.eh_frame:0000000000018A6F                 db  0Eh
.eh_frame:0000000000018A70                 db  38h ; 8
.eh_frame:0000000000018A71                 db  41h ; A
.eh_frame:0000000000018A72                 db  0Eh
.eh_frame:0000000000018A73                 db  30h ; 0
.eh_frame:0000000000018A74                 db  41h ; A
.eh_frame:0000000000018A75                 db  0Eh
.eh_frame:0000000000018A76                 db  28h ; (
.eh_frame:0000000000018A77                 db  42h ; B
.eh_frame:0000000000018A78                 db  0Eh
.eh_frame:0000000000018A79                 db  20h
.eh_frame:0000000000018A7A                 db  42h ; B
.eh_frame:0000000000018A7B                 db  0Eh
.eh_frame:0000000000018A7C                 db  18h
.eh_frame:0000000000018A7D                 db  42h ; B
.eh_frame:0000000000018A7E                 db  0Eh
.eh_frame:0000000000018A7F                 db  10h
.eh_frame:0000000000018A80                 db  42h ; B
.eh_frame:0000000000018A81                 db  0Eh
.eh_frame:0000000000018A82                 db    8
.eh_frame:0000000000018A83                 db  44h ; D
.eh_frame:0000000000018A84                 db  0Bh
.eh_frame:0000000000018A85                 db    3
.eh_frame:0000000000018A86                 db  99h
.eh_frame:0000000000018A87                 db    5
.eh_frame:0000000000018A88                 db  0Eh
.eh_frame:0000000000018A89                 db 0F8h
.eh_frame:0000000000018A8A                 db    1
.eh_frame:0000000000018A8B                 db  4Dh ; M
.eh_frame:0000000000018A8C                 db  0Eh
.eh_frame:0000000000018A8D                 db  80h
.eh_frame:0000000000018A8E                 db    2
.eh_frame:0000000000018A8F                 db  44h ; D
.eh_frame:0000000000018A90                 db  0Eh
.eh_frame:0000000000018A91                 db  88h
.eh_frame:0000000000018A92                 db    2
.eh_frame:0000000000018A93                 db  47h ; G
.eh_frame:0000000000018A94                 db  0Eh
.eh_frame:0000000000018A95                 db  90h
.eh_frame:0000000000018A96                 db    2
.eh_frame:0000000000018A97                 db  5Bh ; [
.eh_frame:0000000000018A98                 db  0Eh
.eh_frame:0000000000018A99                 db 0F0h
.eh_frame:0000000000018A9A                 db    1
.eh_frame:0000000000018A9B                 db    0
.eh_frame:0000000000018A9C                 db  68h ; h
.eh_frame:0000000000018A9D                 db    0
.eh_frame:0000000000018A9E                 db    0
.eh_frame:0000000000018A9F                 db    0
.eh_frame:0000000000018AA0                 db 0E0h
.eh_frame:0000000000018AA1                 db    5
.eh_frame:0000000000018AA2                 db    0
.eh_frame:0000000000018AA3                 db    0
.eh_frame:0000000000018AA4                 db  7Ch ; |
.eh_frame:0000000000018AA5                 db 0CEh
.eh_frame:0000000000018AA6                 db 0FEh
.eh_frame:0000000000018AA7                 db 0FFh
.eh_frame:0000000000018AA8                 db 0ABh
.eh_frame:0000000000018AA9                 db    1
.eh_frame:0000000000018AAA                 db    0
.eh_frame:0000000000018AAB                 db    0
.eh_frame:0000000000018AAC                 db    0
.eh_frame:0000000000018AAD                 db  42h ; B
.eh_frame:0000000000018AAE                 db  0Eh
.eh_frame:0000000000018AAF                 db  10h
.eh_frame:0000000000018AB0                 db  8Fh
.eh_frame:0000000000018AB1                 db    2
.eh_frame:0000000000018AB2                 db  42h ; B
.eh_frame:0000000000018AB3                 db  0Eh
.eh_frame:0000000000018AB4                 db  18h
.eh_frame:0000000000018AB5                 db  8Eh
.eh_frame:0000000000018AB6                 db    3
.eh_frame:0000000000018AB7                 db  45h ; E
.eh_frame:0000000000018AB8                 db  0Eh
.eh_frame:0000000000018AB9                 db  20h
.eh_frame:0000000000018ABA                 db  8Dh
.eh_frame:0000000000018ABB                 db    4
.eh_frame:0000000000018ABC                 db  42h ; B
.eh_frame:0000000000018ABD                 db  0Eh
.eh_frame:0000000000018ABE                 db  28h ; (
.eh_frame:0000000000018ABF                 db  8Ch
.eh_frame:0000000000018AC0                 db    5
.eh_frame:0000000000018AC1                 db  44h ; D
.eh_frame:0000000000018AC2                 db  0Eh
.eh_frame:0000000000018AC3                 db  30h ; 0
.eh_frame:0000000000018AC4                 db  86h
.eh_frame:0000000000018AC5                 db    6
.eh_frame:0000000000018AC6                 db  41h ; A
.eh_frame:0000000000018AC7                 db  0Eh
.eh_frame:0000000000018AC8                 db  38h ; 8
.eh_frame:0000000000018AC9                 db  83h
.eh_frame:0000000000018ACA                 db    7
.eh_frame:0000000000018ACB                 db  47h ; G
.eh_frame:0000000000018ACC                 db  0Eh
.eh_frame:0000000000018ACD                 db  60h ; `
.eh_frame:0000000000018ACE                 db    2
.eh_frame:0000000000018ACF                 db  99h
.eh_frame:0000000000018AD0                 db  0Eh
.eh_frame:0000000000018AD1                 db  68h ; h
.eh_frame:0000000000018AD2                 db  5Fh ; _
.eh_frame:0000000000018AD3                 db  0Eh
.eh_frame:0000000000018AD4                 db  70h ; p
.eh_frame:0000000000018AD5                 db  46h ; F
.eh_frame:0000000000018AD6                 db  0Eh
.eh_frame:0000000000018AD7                 db  78h ; x
.eh_frame:0000000000018AD8                 db  42h ; B
.eh_frame:0000000000018AD9                 db  0Eh
.eh_frame:0000000000018ADA                 db  80h
.eh_frame:0000000000018ADB                 db    1
.eh_frame:0000000000018ADC                 db  59h ; Y
.eh_frame:0000000000018ADD                 db  0Eh
.eh_frame:0000000000018ADE                 db  60h ; `
.eh_frame:0000000000018ADF                 db    2
.eh_frame:0000000000018AE0                 db  40h ; @
.eh_frame:0000000000018AE1                 db  0Eh
.eh_frame:0000000000018AE2                 db  68h ; h
.eh_frame:0000000000018AE3                 db  4Bh ; K
.eh_frame:0000000000018AE4                 db  0Eh
.eh_frame:0000000000018AE5                 db  70h ; p
.eh_frame:0000000000018AE6                 db  43h ; C
.eh_frame:0000000000018AE7                 db  0Eh
.eh_frame:0000000000018AE8                 db  78h ; x
.eh_frame:0000000000018AE9                 db  45h ; E
.eh_frame:0000000000018AEA                 db  0Eh
.eh_frame:0000000000018AEB                 db  80h
.eh_frame:0000000000018AEC                 db    1
.eh_frame:0000000000018AED                 db  5Eh ; ^
.eh_frame:0000000000018AEE                 db  0Eh
.eh_frame:0000000000018AEF                 db  60h ; `
.eh_frame:0000000000018AF0                 db  4Ch ; L
.eh_frame:0000000000018AF1                 db  0Ah
.eh_frame:0000000000018AF2                 db  0Eh
.eh_frame:0000000000018AF3                 db  38h ; 8
.eh_frame:0000000000018AF4                 db  44h ; D
.eh_frame:0000000000018AF5                 db  0Eh
.eh_frame:0000000000018AF6                 db  30h ; 0
.eh_frame:0000000000018AF7                 db  41h ; A
.eh_frame:0000000000018AF8                 db  0Eh
.eh_frame:0000000000018AF9                 db  28h ; (
.eh_frame:0000000000018AFA                 db  42h ; B
.eh_frame:0000000000018AFB                 db  0Eh
.eh_frame:0000000000018AFC                 db  20h
.eh_frame:0000000000018AFD                 db  42h ; B
.eh_frame:0000000000018AFE                 db  0Eh
.eh_frame:0000000000018AFF                 db  18h
.eh_frame:0000000000018B00                 db  42h ; B
.eh_frame:0000000000018B01                 db  0Eh
.eh_frame:0000000000018B02                 db  10h
.eh_frame:0000000000018B03                 db  42h ; B
.eh_frame:0000000000018B04                 db  0Eh
.eh_frame:0000000000018B05                 db    8
.eh_frame:0000000000018B06                 db  46h ; F
.eh_frame:0000000000018B07                 db  0Bh
.eh_frame:0000000000018B08                 db  28h ; (
.eh_frame:0000000000018B09                 db    0
.eh_frame:0000000000018B0A                 db    0
.eh_frame:0000000000018B0B                 db    0
.eh_frame:0000000000018B0C                 db  4Ch ; L
.eh_frame:0000000000018B0D                 db    6
.eh_frame:0000000000018B0E                 db    0
.eh_frame:0000000000018B0F                 db    0
.eh_frame:0000000000018B10                 db 0C0h
.eh_frame:0000000000018B11                 db 0CFh
.eh_frame:0000000000018B12                 db 0FEh
.eh_frame:0000000000018B13                 db 0FFh
.eh_frame:0000000000018B14                 db  36h ; 6
.eh_frame:0000000000018B15                 db    0
.eh_frame:0000000000018B16                 db    0
.eh_frame:0000000000018B17                 db    0
.eh_frame:0000000000018B18                 db    0
.eh_frame:0000000000018B19                 db  42h ; B
.eh_frame:0000000000018B1A                 db  0Eh
.eh_frame:0000000000018B1B                 db  10h
.eh_frame:0000000000018B1C                 db  8Ch
.eh_frame:0000000000018B1D                 db    2
.eh_frame:0000000000018B1E                 db  41h ; A
.eh_frame:0000000000018B1F                 db  0Eh
.eh_frame:0000000000018B20                 db  18h
.eh_frame:0000000000018B21                 db  86h
.eh_frame:0000000000018B22                 db    3
.eh_frame:0000000000018B23                 db  41h ; A
.eh_frame:0000000000018B24                 db  0Eh
.eh_frame:0000000000018B25                 db  20h
.eh_frame:0000000000018B26                 db  83h
.eh_frame:0000000000018B27                 db    4
.eh_frame:0000000000018B28                 db  6Eh ; n
.eh_frame:0000000000018B29                 db  0Eh
.eh_frame:0000000000018B2A                 db  18h
.eh_frame:0000000000018B2B                 db  41h ; A
.eh_frame:0000000000018B2C                 db  0Eh
.eh_frame:0000000000018B2D                 db  10h
.eh_frame:0000000000018B2E                 db  42h ; B
.eh_frame:0000000000018B2F                 db  0Eh
.eh_frame:0000000000018B30                 db    8
.eh_frame:0000000000018B31                 db    0
.eh_frame:0000000000018B32                 db    0
.eh_frame:0000000000018B33                 db    0
.eh_frame:0000000000018B34                 db  10h
.eh_frame:0000000000018B35                 db    0
.eh_frame:0000000000018B36                 db    0
.eh_frame:0000000000018B37                 db    0
.eh_frame:0000000000018B38                 db  78h ; x
.eh_frame:0000000000018B39                 db    6
.eh_frame:0000000000018B3A                 db    0
.eh_frame:0000000000018B3B                 db    0
.eh_frame:0000000000018B3C                 db 0D4h
.eh_frame:0000000000018B3D                 db 0CFh
.eh_frame:0000000000018B3E                 db 0FEh
.eh_frame:0000000000018B3F                 db 0FFh
.eh_frame:0000000000018B40                 db  11h
.eh_frame:0000000000018B41                 db    0
.eh_frame:0000000000018B42                 db    0
.eh_frame:0000000000018B43                 db    0
.eh_frame:0000000000018B44                 db    0
.eh_frame:0000000000018B45                 db    0
.eh_frame:0000000000018B46                 db    0
.eh_frame:0000000000018B47                 db    0
.eh_frame:0000000000018B48                 db  10h
.eh_frame:0000000000018B49                 db    0
.eh_frame:0000000000018B4A                 db    0
.eh_frame:0000000000018B4B                 db    0
.eh_frame:0000000000018B4C                 db  8Ch
.eh_frame:0000000000018B4D                 db    6
.eh_frame:0000000000018B4E                 db    0
.eh_frame:0000000000018B4F                 db    0
.eh_frame:0000000000018B50                 db 0E0h
.eh_frame:0000000000018B51                 db 0CFh
.eh_frame:0000000000018B52                 db 0FEh
.eh_frame:0000000000018B53                 db 0FFh
.eh_frame:0000000000018B54                 db  11h
.eh_frame:0000000000018B55                 db    0
.eh_frame:0000000000018B56                 db    0
.eh_frame:0000000000018B57                 db    0
.eh_frame:0000000000018B58                 db    0
.eh_frame:0000000000018B59                 db    0
.eh_frame:0000000000018B5A                 db    0
.eh_frame:0000000000018B5B                 db    0
.eh_frame:0000000000018B5C                 db  10h
.eh_frame:0000000000018B5D                 db    0
.eh_frame:0000000000018B5E                 db    0
.eh_frame:0000000000018B5F                 db    0
.eh_frame:0000000000018B60                 db 0A0h
.eh_frame:0000000000018B61                 db    6
.eh_frame:0000000000018B62                 db    0
.eh_frame:0000000000018B63                 db    0
.eh_frame:0000000000018B64                 db 0ECh
.eh_frame:0000000000018B65                 db 0CFh
.eh_frame:0000000000018B66                 db 0FEh
.eh_frame:0000000000018B67                 db 0FFh
.eh_frame:0000000000018B68                 db  35h ; 5
.eh_frame:0000000000018B69                 db    0
.eh_frame:0000000000018B6A                 db    0
.eh_frame:0000000000018B6B                 db    0
.eh_frame:0000000000018B6C                 db    0
.eh_frame:0000000000018B6D                 db    0
.eh_frame:0000000000018B6E                 db    0
.eh_frame:0000000000018B6F                 db    0
.eh_frame:0000000000018B70                 db  10h
.eh_frame:0000000000018B71                 db    0
.eh_frame:0000000000018B72                 db    0
.eh_frame:0000000000018B73                 db    0
.eh_frame:0000000000018B74                 db 0B4h
.eh_frame:0000000000018B75                 db    6
.eh_frame:0000000000018B76                 db    0
.eh_frame:0000000000018B77                 db    0
.eh_frame:0000000000018B78                 db  18h
.eh_frame:0000000000018B79                 db 0D0h
.eh_frame:0000000000018B7A                 db 0FEh
.eh_frame:0000000000018B7B                 db 0FFh
.eh_frame:0000000000018B7C                 db  15h
.eh_frame:0000000000018B7D                 db    0
.eh_frame:0000000000018B7E                 db    0
.eh_frame:0000000000018B7F                 db    0
.eh_frame:0000000000018B80                 db    0
.eh_frame:0000000000018B81                 db    0
.eh_frame:0000000000018B82                 db    0
.eh_frame:0000000000018B83                 db    0
.eh_frame:0000000000018B84                 db  10h
.eh_frame:0000000000018B85                 db    0
.eh_frame:0000000000018B86                 db    0
.eh_frame:0000000000018B87                 db    0
.eh_frame:0000000000018B88                 db 0C8h
.eh_frame:0000000000018B89                 db    6
.eh_frame:0000000000018B8A                 db    0
.eh_frame:0000000000018B8B                 db    0
.eh_frame:0000000000018B8C                 db  24h ; $
.eh_frame:0000000000018B8D                 db 0D0h
.eh_frame:0000000000018B8E                 db 0FEh
.eh_frame:0000000000018B8F                 db 0FFh
.eh_frame:0000000000018B90                 db  30h ; 0
.eh_frame:0000000000018B91                 db    0
.eh_frame:0000000000018B92                 db    0
.eh_frame:0000000000018B93                 db    0
.eh_frame:0000000000018B94                 db    0
.eh_frame:0000000000018B95                 db  6Bh ; k
.eh_frame:0000000000018B96                 db  0Eh
.eh_frame:0000000000018B97                 db  10h
.eh_frame:0000000000018B98                 db  50h ; P
.eh_frame:0000000000018B99                 db    0
.eh_frame:0000000000018B9A                 db    0
.eh_frame:0000000000018B9B                 db    0
.eh_frame:0000000000018B9C                 db 0DCh
.eh_frame:0000000000018B9D                 db    6
.eh_frame:0000000000018B9E                 db    0
.eh_frame:0000000000018B9F                 db    0
.eh_frame:0000000000018BA0                 db  40h ; @
.eh_frame:0000000000018BA1                 db 0D0h
.eh_frame:0000000000018BA2                 db 0FEh
.eh_frame:0000000000018BA3                 db 0FFh
.eh_frame:0000000000018BA4                 db  74h ; t
.eh_frame:0000000000018BA5                 db    0
.eh_frame:0000000000018BA6                 db    0
.eh_frame:0000000000018BA7                 db    0
.eh_frame:0000000000018BA8                 db    0
.eh_frame:0000000000018BA9                 db  42h ; B
.eh_frame:0000000000018BAA                 db  0Eh
.eh_frame:0000000000018BAB                 db  10h
.eh_frame:0000000000018BAC                 db  8Fh
.eh_frame:0000000000018BAD                 db    2
.eh_frame:0000000000018BAE                 db  42h ; B
.eh_frame:0000000000018BAF                 db  0Eh
.eh_frame:0000000000018BB0                 db  18h
.eh_frame:0000000000018BB1                 db  8Eh
.eh_frame:0000000000018BB2                 db    3
.eh_frame:0000000000018BB3                 db  49h ; I
.eh_frame:0000000000018BB4                 db  0Eh
.eh_frame:0000000000018BB5                 db  20h
.eh_frame:0000000000018BB6                 db  8Dh
.eh_frame:0000000000018BB7                 db    4
.eh_frame:0000000000018BB8                 db  42h ; B
.eh_frame:0000000000018BB9                 db  0Eh
.eh_frame:0000000000018BBA                 db  28h ; (
.eh_frame:0000000000018BBB                 db  8Ch
.eh_frame:0000000000018BBC                 db    5
.eh_frame:0000000000018BBD                 db  44h ; D
.eh_frame:0000000000018BBE                 db  0Eh
.eh_frame:0000000000018BBF                 db  30h ; 0
.eh_frame:0000000000018BC0                 db  86h
.eh_frame:0000000000018BC1                 db    6
.eh_frame:0000000000018BC2                 db  41h ; A
.eh_frame:0000000000018BC3                 db  0Eh
.eh_frame:0000000000018BC4                 db  38h ; 8
.eh_frame:0000000000018BC5                 db  83h
.eh_frame:0000000000018BC6                 db    7
.eh_frame:0000000000018BC7                 db  4Dh ; M
.eh_frame:0000000000018BC8                 db  0Eh
.eh_frame:0000000000018BC9                 db  50h ; P
.eh_frame:0000000000018BCA                 db  5Fh ; _
.eh_frame:0000000000018BCB                 db  0Eh
.eh_frame:0000000000018BCC                 db  58h ; X
.eh_frame:0000000000018BCD                 db  47h ; G
.eh_frame:0000000000018BCE                 db  0Eh
.eh_frame:0000000000018BCF                 db  60h ; `
.eh_frame:0000000000018BD0                 db  46h ; F
.eh_frame:0000000000018BD1                 db  0Eh
.eh_frame:0000000000018BD2                 db  68h ; h
.eh_frame:0000000000018BD3                 db  44h ; D
.eh_frame:0000000000018BD4                 db  0Eh
.eh_frame:0000000000018BD5                 db  70h ; p
.eh_frame:0000000000018BD6                 db  58h ; X
.eh_frame:0000000000018BD7                 db  0Eh
.eh_frame:0000000000018BD8                 db  38h ; 8
.eh_frame:0000000000018BD9                 db  41h ; A
.eh_frame:0000000000018BDA                 db  0Eh
.eh_frame:0000000000018BDB                 db  30h ; 0
.eh_frame:0000000000018BDC                 db  41h ; A
.eh_frame:0000000000018BDD                 db  0Eh
.eh_frame:0000000000018BDE                 db  28h ; (
.eh_frame:0000000000018BDF                 db  42h ; B
.eh_frame:0000000000018BE0                 db  0Eh
.eh_frame:0000000000018BE1                 db  20h
.eh_frame:0000000000018BE2                 db  42h ; B
.eh_frame:0000000000018BE3                 db  0Eh
.eh_frame:0000000000018BE4                 db  18h
.eh_frame:0000000000018BE5                 db  42h ; B
.eh_frame:0000000000018BE6                 db  0Eh
.eh_frame:0000000000018BE7                 db  10h
.eh_frame:0000000000018BE8                 db  42h ; B
.eh_frame:0000000000018BE9                 db  0Eh
.eh_frame:0000000000018BEA                 db    8
.eh_frame:0000000000018BEB                 db    0
.eh_frame:0000000000018BEC                 db  68h ; h
.eh_frame:0000000000018BED                 db    0
.eh_frame:0000000000018BEE                 db    0
.eh_frame:0000000000018BEF                 db    0
.eh_frame:0000000000018BF0                 db  30h ; 0
.eh_frame:0000000000018BF1                 db    7
.eh_frame:0000000000018BF2                 db    0
.eh_frame:0000000000018BF3                 db    0
.eh_frame:0000000000018BF4                 db  6Ch ; l
.eh_frame:0000000000018BF5                 db 0D0h
.eh_frame:0000000000018BF6                 db 0FEh
.eh_frame:0000000000018BF7                 db 0FFh
.eh_frame:0000000000018BF8                 db 0E3h
.eh_frame:0000000000018BF9                 db    0
.eh_frame:0000000000018BFA                 db    0
.eh_frame:0000000000018BFB                 db    0
.eh_frame:0000000000018BFC                 db    0
.eh_frame:0000000000018BFD                 db  42h ; B
.eh_frame:0000000000018BFE                 db  0Eh
.eh_frame:0000000000018BFF                 db  10h
.eh_frame:0000000000018C00                 db  8Fh
.eh_frame:0000000000018C01                 db    2
.eh_frame:0000000000018C02                 db  42h ; B
.eh_frame:0000000000018C03                 db  0Eh
.eh_frame:0000000000018C04                 db  18h
.eh_frame:0000000000018C05                 db  8Eh
.eh_frame:0000000000018C06                 db    3
.eh_frame:0000000000018C07                 db  49h ; I
.eh_frame:0000000000018C08                 db  0Eh
.eh_frame:0000000000018C09                 db  20h
.eh_frame:0000000000018C0A                 db  8Dh
.eh_frame:0000000000018C0B                 db    4
.eh_frame:0000000000018C0C                 db  42h ; B
.eh_frame:0000000000018C0D                 db  0Eh
.eh_frame:0000000000018C0E                 db  28h ; (
.eh_frame:0000000000018C0F                 db  8Ch
.eh_frame:0000000000018C10                 db    5
.eh_frame:0000000000018C11                 db  44h ; D
.eh_frame:0000000000018C12                 db  0Eh
.eh_frame:0000000000018C13                 db  30h ; 0
.eh_frame:0000000000018C14                 db  86h
.eh_frame:0000000000018C15                 db    6
.eh_frame:0000000000018C16                 db  41h ; A
.eh_frame:0000000000018C17                 db  0Eh
.eh_frame:0000000000018C18                 db  38h ; 8
.eh_frame:0000000000018C19                 db  83h
.eh_frame:0000000000018C1A                 db    7
.eh_frame:0000000000018C1B                 db  4Dh ; M
.eh_frame:0000000000018C1C                 db  0Eh
.eh_frame:0000000000018C1D                 db  70h ; p
.eh_frame:0000000000018C1E                 db  65h ; e
.eh_frame:0000000000018C1F                 db  0Eh
.eh_frame:0000000000018C20                 db  78h ; x
.eh_frame:0000000000018C21                 db  4Dh ; M
.eh_frame:0000000000018C22                 db  0Eh
.eh_frame:0000000000018C23                 db  80h
.eh_frame:0000000000018C24                 db    1
.eh_frame:0000000000018C25                 db  46h ; F
.eh_frame:0000000000018C26                 db  0Eh
.eh_frame:0000000000018C27                 db  88h
.eh_frame:0000000000018C28                 db    1
.eh_frame:0000000000018C29                 db  42h ; B
.eh_frame:0000000000018C2A                 db  0Eh
.eh_frame:0000000000018C2B                 db  90h
.eh_frame:0000000000018C2C                 db    1
.eh_frame:0000000000018C2D                 db  5Eh ; ^
.eh_frame:0000000000018C2E                 db  0Eh
.eh_frame:0000000000018C2F                 db  70h ; p
.eh_frame:0000000000018C30                 db  56h ; V
.eh_frame:0000000000018C31                 db  0Eh
.eh_frame:0000000000018C32                 db  78h ; x
.eh_frame:0000000000018C33                 db  43h ; C
.eh_frame:0000000000018C34                 db  0Eh
.eh_frame:0000000000018C35                 db  80h
.eh_frame:0000000000018C36                 db    1
.eh_frame:0000000000018C37                 db  43h ; C
.eh_frame:0000000000018C38                 db  0Eh
.eh_frame:0000000000018C39                 db  88h
.eh_frame:0000000000018C3A                 db    1
.eh_frame:0000000000018C3B                 db  56h ; V
.eh_frame:0000000000018C3C                 db  0Eh
.eh_frame:0000000000018C3D                 db  90h
.eh_frame:0000000000018C3E                 db    1
.eh_frame:0000000000018C3F                 db  52h ; R
.eh_frame:0000000000018C40                 db  0Eh
.eh_frame:0000000000018C41                 db  70h ; p
.eh_frame:0000000000018C42                 db  5Bh ; [
.eh_frame:0000000000018C43                 db  0Eh
.eh_frame:0000000000018C44                 db  38h ; 8
.eh_frame:0000000000018C45                 db  41h ; A
.eh_frame:0000000000018C46                 db  0Eh
.eh_frame:0000000000018C47                 db  30h ; 0
.eh_frame:0000000000018C48                 db  41h ; A
.eh_frame:0000000000018C49                 db  0Eh
.eh_frame:0000000000018C4A                 db  28h ; (
.eh_frame:0000000000018C4B                 db  42h ; B
.eh_frame:0000000000018C4C                 db  0Eh
.eh_frame:0000000000018C4D                 db  20h
.eh_frame:0000000000018C4E                 db  42h ; B
.eh_frame:0000000000018C4F                 db  0Eh
.eh_frame:0000000000018C50                 db  18h
.eh_frame:0000000000018C51                 db  42h ; B
.eh_frame:0000000000018C52                 db  0Eh
.eh_frame:0000000000018C53                 db  10h
.eh_frame:0000000000018C54                 db  42h ; B
.eh_frame:0000000000018C55                 db  0Eh
.eh_frame:0000000000018C56                 db    8
.eh_frame:0000000000018C57                 db    0
.eh_frame:0000000000018C58                 db  10h
.eh_frame:0000000000018C59                 db    0
.eh_frame:0000000000018C5A                 db    0
.eh_frame:0000000000018C5B                 db    0
.eh_frame:0000000000018C5C                 db  9Ch
.eh_frame:0000000000018C5D                 db    7
.eh_frame:0000000000018C5E                 db    0
.eh_frame:0000000000018C5F                 db    0
.eh_frame:0000000000018C60                 db 0F0h
.eh_frame:0000000000018C61                 db 0D0h
.eh_frame:0000000000018C62                 db 0FEh
.eh_frame:0000000000018C63                 db 0FFh
.eh_frame:0000000000018C64                 db  0Ah
.eh_frame:0000000000018C65                 db    0
.eh_frame:0000000000018C66                 db    0
.eh_frame:0000000000018C67                 db    0
.eh_frame:0000000000018C68                 db    0
.eh_frame:0000000000018C69                 db    0
.eh_frame:0000000000018C6A                 db    0
.eh_frame:0000000000018C6B                 db    0
.eh_frame:0000000000018C6C                 db  28h ; (
.eh_frame:0000000000018C6D                 db    0
.eh_frame:0000000000018C6E                 db    0
.eh_frame:0000000000018C6F                 db    0
.eh_frame:0000000000018C70                 db 0B0h
.eh_frame:0000000000018C71                 db    7
.eh_frame:0000000000018C72                 db    0
.eh_frame:0000000000018C73                 db    0
.eh_frame:0000000000018C74                 db 0ECh
.eh_frame:0000000000018C75                 db 0D0h
.eh_frame:0000000000018C76                 db 0FEh
.eh_frame:0000000000018C77                 db 0FFh
.eh_frame:0000000000018C78                 db  93h
.eh_frame:0000000000018C79                 db    0
.eh_frame:0000000000018C7A                 db    0
.eh_frame:0000000000018C7B                 db    0
.eh_frame:0000000000018C7C                 db    0
.eh_frame:0000000000018C7D                 db  48h ; H
.eh_frame:0000000000018C7E                 db  0Eh
.eh_frame:0000000000018C7F                 db  10h
.eh_frame:0000000000018C80                 db  8Ch
.eh_frame:0000000000018C81                 db    2
.eh_frame:0000000000018C82                 db  48h ; H
.eh_frame:0000000000018C83                 db  0Eh
.eh_frame:0000000000018C84                 db  18h
.eh_frame:0000000000018C85                 db  86h
.eh_frame:0000000000018C86                 db    3
.eh_frame:0000000000018C87                 db  41h ; A
.eh_frame:0000000000018C88                 db  0Eh
.eh_frame:0000000000018C89                 db  20h
.eh_frame:0000000000018C8A                 db  83h
.eh_frame:0000000000018C8B                 db    4
.eh_frame:0000000000018C8C                 db    2
.eh_frame:0000000000018C8D                 db  74h ; t
.eh_frame:0000000000018C8E                 db  0Eh
.eh_frame:0000000000018C8F                 db  18h
.eh_frame:0000000000018C90                 db  4Bh ; K
.eh_frame:0000000000018C91                 db  0Eh
.eh_frame:0000000000018C92                 db  10h
.eh_frame:0000000000018C93                 db  42h ; B
.eh_frame:0000000000018C94                 db  0Eh
.eh_frame:0000000000018C95                 db    8
.eh_frame:0000000000018C96                 db    0
.eh_frame:0000000000018C97                 db    0
.eh_frame:0000000000018C98                 db  10h
.eh_frame:0000000000018C99                 db    0
.eh_frame:0000000000018C9A                 db    0
.eh_frame:0000000000018C9B                 db    0
.eh_frame:0000000000018C9C                 db 0DCh
.eh_frame:0000000000018C9D                 db    7
.eh_frame:0000000000018C9E                 db    0
.eh_frame:0000000000018C9F                 db    0
.eh_frame:0000000000018CA0                 db  60h ; `
.eh_frame:0000000000018CA1                 db 0D1h
.eh_frame:0000000000018CA2                 db 0FEh
.eh_frame:0000000000018CA3                 db 0FFh
.eh_frame:0000000000018CA4                 db  13h
.eh_frame:0000000000018CA5                 db    0
.eh_frame:0000000000018CA6                 db    0
.eh_frame:0000000000018CA7                 db    0
.eh_frame:0000000000018CA8                 db    0
.eh_frame:0000000000018CA9                 db    0
.eh_frame:0000000000018CAA                 db    0
.eh_frame:0000000000018CAB                 db    0
.eh_frame:0000000000018CAC                 db  10h
.eh_frame:0000000000018CAD                 db    0
.eh_frame:0000000000018CAE                 db    0
.eh_frame:0000000000018CAF                 db    0
.eh_frame:0000000000018CB0                 db 0F0h
.eh_frame:0000000000018CB1                 db    7
.eh_frame:0000000000018CB2                 db    0
.eh_frame:0000000000018CB3                 db    0
.eh_frame:0000000000018CB4                 db  6Ch ; l
.eh_frame:0000000000018CB5                 db 0D1h
.eh_frame:0000000000018CB6                 db 0FEh
.eh_frame:0000000000018CB7                 db 0FFh
.eh_frame:0000000000018CB8                 db  0Ch
.eh_frame:0000000000018CB9                 db    0
.eh_frame:0000000000018CBA                 db    0
.eh_frame:0000000000018CBB                 db    0
.eh_frame:0000000000018CBC                 db    0
.eh_frame:0000000000018CBD                 db    0
.eh_frame:0000000000018CBE                 db    0
.eh_frame:0000000000018CBF                 db    0
.eh_frame:0000000000018CC0                 db  10h
.eh_frame:0000000000018CC1                 db    0
.eh_frame:0000000000018CC2                 db    0
.eh_frame:0000000000018CC3                 db    0
.eh_frame:0000000000018CC4                 db    4
.eh_frame:0000000000018CC5                 db    8
.eh_frame:0000000000018CC6                 db    0
.eh_frame:0000000000018CC7                 db    0
.eh_frame:0000000000018CC8                 db  68h ; h
.eh_frame:0000000000018CC9                 db 0D1h
.eh_frame:0000000000018CCA                 db 0FEh
.eh_frame:0000000000018CCB                 db 0FFh
.eh_frame:0000000000018CCC                 db  18h
.eh_frame:0000000000018CCD                 db    0
.eh_frame:0000000000018CCE                 db    0
.eh_frame:0000000000018CCF                 db    0
.eh_frame:0000000000018CD0                 db    0
.eh_frame:0000000000018CD1                 db    0
.eh_frame:0000000000018CD2                 db    0
.eh_frame:0000000000018CD3                 db    0
.eh_frame:0000000000018CD4                 db  10h
.eh_frame:0000000000018CD5                 db    0
.eh_frame:0000000000018CD6                 db    0
.eh_frame:0000000000018CD7                 db    0
.eh_frame:0000000000018CD8                 db  18h
.eh_frame:0000000000018CD9                 db    8
.eh_frame:0000000000018CDA                 db    0
.eh_frame:0000000000018CDB                 db    0
.eh_frame:0000000000018CDC                 db  74h ; t
.eh_frame:0000000000018CDD                 db 0D1h
.eh_frame:0000000000018CDE                 db 0FEh
.eh_frame:0000000000018CDF                 db 0FFh
.eh_frame:0000000000018CE0                 db  14h
.eh_frame:0000000000018CE1                 db    0
.eh_frame:0000000000018CE2                 db    0
.eh_frame:0000000000018CE3                 db    0
.eh_frame:0000000000018CE4                 db    0
.eh_frame:0000000000018CE5                 db    0
.eh_frame:0000000000018CE6                 db    0
.eh_frame:0000000000018CE7                 db    0
.eh_frame:0000000000018CE8                 db  18h
.eh_frame:0000000000018CE9                 db    0
.eh_frame:0000000000018CEA                 db    0
.eh_frame:0000000000018CEB                 db    0
.eh_frame:0000000000018CEC                 db  2Ch ; ,
.eh_frame:0000000000018CED                 db    8
.eh_frame:0000000000018CEE                 db    0
.eh_frame:0000000000018CEF                 db    0
.eh_frame:0000000000018CF0                 db  80h
.eh_frame:0000000000018CF1                 db 0D1h
.eh_frame:0000000000018CF2                 db 0FEh
.eh_frame:0000000000018CF3                 db 0FFh
.eh_frame:0000000000018CF4                 db  8Eh
.eh_frame:0000000000018CF5                 db    0
.eh_frame:0000000000018CF6                 db    0
.eh_frame:0000000000018CF7                 db    0
.eh_frame:0000000000018CF8                 db    0
.eh_frame:0000000000018CF9                 db  44h ; D
.eh_frame:0000000000018CFA                 db  0Eh
.eh_frame:0000000000018CFB                 db  50h ; P
.eh_frame:0000000000018CFC                 db    2
.eh_frame:0000000000018CFD                 db  7Fh ; 
.eh_frame:0000000000018CFE                 db  0Ah
.eh_frame:0000000000018CFF                 db  0Eh
.eh_frame:0000000000018D00                 db    8
.eh_frame:0000000000018D01                 db  41h ; A
.eh_frame:0000000000018D02                 db  0Bh
.eh_frame:0000000000018D03                 db    0
.eh_frame:0000000000018D04                 db  18h
.eh_frame:0000000000018D05                 db    0
.eh_frame:0000000000018D06                 db    0
.eh_frame:0000000000018D07                 db    0
.eh_frame:0000000000018D08                 db  48h ; H
.eh_frame:0000000000018D09                 db    8
.eh_frame:0000000000018D0A                 db    0
.eh_frame:0000000000018D0B                 db    0
.eh_frame:0000000000018D0C                 db 0F4h
.eh_frame:0000000000018D0D                 db 0D1h
.eh_frame:0000000000018D0E                 db 0FEh
.eh_frame:0000000000018D0F                 db 0FFh
.eh_frame:0000000000018D10                 db  8Ah
.eh_frame:0000000000018D11                 db    0
.eh_frame:0000000000018D12                 db    0
.eh_frame:0000000000018D13                 db    0
.eh_frame:0000000000018D14                 db    0
.eh_frame:0000000000018D15                 db  44h ; D
.eh_frame:0000000000018D16                 db  0Eh
.eh_frame:0000000000018D17                 db  50h ; P
.eh_frame:0000000000018D18                 db    2
.eh_frame:0000000000018D19                 db  7Bh ; {
.eh_frame:0000000000018D1A                 db  0Ah
.eh_frame:0000000000018D1B                 db  0Eh
.eh_frame:0000000000018D1C                 db    8
.eh_frame:0000000000018D1D                 db  41h ; A
.eh_frame:0000000000018D1E                 db  0Bh
.eh_frame:0000000000018D1F                 db    0
.eh_frame:0000000000018D20                 db  10h
.eh_frame:0000000000018D21                 db    0
.eh_frame:0000000000018D22                 db    0
.eh_frame:0000000000018D23                 db    0
.eh_frame:0000000000018D24                 db  64h ; d
.eh_frame:0000000000018D25                 db    8
.eh_frame:0000000000018D26                 db    0
.eh_frame:0000000000018D27                 db    0
.eh_frame:0000000000018D28                 db  68h ; h
.eh_frame:0000000000018D29                 db 0D2h
.eh_frame:0000000000018D2A                 db 0FEh
.eh_frame:0000000000018D2B                 db 0FFh
.eh_frame:0000000000018D2C                 db  0Ch
.eh_frame:0000000000018D2D                 db    0
.eh_frame:0000000000018D2E                 db    0
.eh_frame:0000000000018D2F                 db    0
.eh_frame:0000000000018D30                 db    0
.eh_frame:0000000000018D31                 db    0
.eh_frame:0000000000018D32                 db    0
.eh_frame:0000000000018D33                 db    0
.eh_frame:0000000000018D34                 db  10h
.eh_frame:0000000000018D35                 db    0
.eh_frame:0000000000018D36                 db    0
.eh_frame:0000000000018D37                 db    0
.eh_frame:0000000000018D38                 db  78h ; x
.eh_frame:0000000000018D39                 db    8
.eh_frame:0000000000018D3A                 db    0
.eh_frame:0000000000018D3B                 db    0
.eh_frame:0000000000018D3C                 db  64h ; d
.eh_frame:0000000000018D3D                 db 0D2h
.eh_frame:0000000000018D3E                 db 0FEh
.eh_frame:0000000000018D3F                 db 0FFh
.eh_frame:0000000000018D40                 db  0Fh
.eh_frame:0000000000018D41                 db    0
.eh_frame:0000000000018D42                 db    0
.eh_frame:0000000000018D43                 db    0
.eh_frame:0000000000018D44                 db    0
.eh_frame:0000000000018D45                 db    0
.eh_frame:0000000000018D46                 db    0
.eh_frame:0000000000018D47                 db    0
.eh_frame:0000000000018D48                 db  18h
.eh_frame:0000000000018D49                 db    0
.eh_frame:0000000000018D4A                 db    0
.eh_frame:0000000000018D4B                 db    0
.eh_frame:0000000000018D4C                 db  8Ch
.eh_frame:0000000000018D4D                 db    8
.eh_frame:0000000000018D4E                 db    0
.eh_frame:0000000000018D4F                 db    0
.eh_frame:0000000000018D50                 db  60h ; `
.eh_frame:0000000000018D51                 db 0D2h
.eh_frame:0000000000018D52                 db 0FEh
.eh_frame:0000000000018D53                 db 0FFh
.eh_frame:0000000000018D54                 db  98h
.eh_frame:0000000000018D55                 db    0
.eh_frame:0000000000018D56                 db    0
.eh_frame:0000000000018D57                 db    0
.eh_frame:0000000000018D58                 db    0
.eh_frame:0000000000018D59                 db  44h ; D
.eh_frame:0000000000018D5A                 db  0Eh
.eh_frame:0000000000018D5B                 db  50h ; P
.eh_frame:0000000000018D5C                 db    2
.eh_frame:0000000000018D5D                 db  8Eh
.eh_frame:0000000000018D5E                 db  0Ah
.eh_frame:0000000000018D5F                 db  0Eh
.eh_frame:0000000000018D60                 db    8
.eh_frame:0000000000018D61                 db  41h ; A
.eh_frame:0000000000018D62                 db  0Bh
.eh_frame:0000000000018D63                 db    0
.eh_frame:0000000000018D64                 db  10h
.eh_frame:0000000000018D65                 db    0
.eh_frame:0000000000018D66                 db    0
.eh_frame:0000000000018D67                 db    0
.eh_frame:0000000000018D68                 db 0A8h
.eh_frame:0000000000018D69                 db    8
.eh_frame:0000000000018D6A                 db    0
.eh_frame:0000000000018D6B                 db    0
.eh_frame:0000000000018D6C                 db 0E4h
.eh_frame:0000000000018D6D                 db 0D2h
.eh_frame:0000000000018D6E                 db 0FEh
.eh_frame:0000000000018D6F                 db 0FFh
.eh_frame:0000000000018D70                 db  10h
.eh_frame:0000000000018D71                 db    0
.eh_frame:0000000000018D72                 db    0
.eh_frame:0000000000018D73                 db    0
.eh_frame:0000000000018D74                 db    0
.eh_frame:0000000000018D75                 db    0
.eh_frame:0000000000018D76                 db    0
.eh_frame:0000000000018D77                 db    0
.eh_frame:0000000000018D78                 db  10h
.eh_frame:0000000000018D79                 db    0
.eh_frame:0000000000018D7A                 db    0
.eh_frame:0000000000018D7B                 db    0
.eh_frame:0000000000018D7C                 db 0BCh
.eh_frame:0000000000018D7D                 db    8
.eh_frame:0000000000018D7E                 db    0
.eh_frame:0000000000018D7F                 db    0
.eh_frame:0000000000018D80                 db 0E0h
.eh_frame:0000000000018D81                 db 0D2h
.eh_frame:0000000000018D82                 db 0FEh
.eh_frame:0000000000018D83                 db 0FFh
.eh_frame:0000000000018D84                 db  11h
.eh_frame:0000000000018D85                 db    0
.eh_frame:0000000000018D86                 db    0
.eh_frame:0000000000018D87                 db    0
.eh_frame:0000000000018D88                 db    0
.eh_frame:0000000000018D89                 db    0
.eh_frame:0000000000018D8A                 db    0
.eh_frame:0000000000018D8B                 db    0
.eh_frame:0000000000018D8C                 db  10h
.eh_frame:0000000000018D8D                 db    0
.eh_frame:0000000000018D8E                 db    0
.eh_frame:0000000000018D8F                 db    0
.eh_frame:0000000000018D90                 db 0D0h
.eh_frame:0000000000018D91                 db    8
.eh_frame:0000000000018D92                 db    0
.eh_frame:0000000000018D93                 db    0
.eh_frame:0000000000018D94                 db 0ECh
.eh_frame:0000000000018D95                 db 0D2h
.eh_frame:0000000000018D96                 db 0FEh
.eh_frame:0000000000018D97                 db 0FFh
.eh_frame:0000000000018D98                 db  0Ah
.eh_frame:0000000000018D99                 db    0
.eh_frame:0000000000018D9A                 db    0
.eh_frame:0000000000018D9B                 db    0
.eh_frame:0000000000018D9C                 db    0
.eh_frame:0000000000018D9D                 db    0
.eh_frame:0000000000018D9E                 db    0
.eh_frame:0000000000018D9F                 db    0
.eh_frame:0000000000018DA0                 db  18h
.eh_frame:0000000000018DA1                 db    0
.eh_frame:0000000000018DA2                 db    0
.eh_frame:0000000000018DA3                 db    0
.eh_frame:0000000000018DA4                 db 0E4h
.eh_frame:0000000000018DA5                 db    8
.eh_frame:0000000000018DA6                 db    0
.eh_frame:0000000000018DA7                 db    0
.eh_frame:0000000000018DA8                 db 0E8h
.eh_frame:0000000000018DA9                 db 0D2h
.eh_frame:0000000000018DAA                 db 0FEh
.eh_frame:0000000000018DAB                 db 0FFh
.eh_frame:0000000000018DAC                 db  8Eh
.eh_frame:0000000000018DAD                 db    0
.eh_frame:0000000000018DAE                 db    0
.eh_frame:0000000000018DAF                 db    0
.eh_frame:0000000000018DB0                 db    0
.eh_frame:0000000000018DB1                 db  44h ; D
.eh_frame:0000000000018DB2                 db  0Eh
.eh_frame:0000000000018DB3                 db  50h ; P
.eh_frame:0000000000018DB4                 db    2
.eh_frame:0000000000018DB5                 db  7Fh ; 
.eh_frame:0000000000018DB6                 db  0Ah
.eh_frame:0000000000018DB7                 db  0Eh
.eh_frame:0000000000018DB8                 db    8
.eh_frame:0000000000018DB9                 db  41h ; A
.eh_frame:0000000000018DBA                 db  0Bh
.eh_frame:0000000000018DBB                 db    0
.eh_frame:0000000000018DBC                 db  18h
.eh_frame:0000000000018DBD                 db    0
.eh_frame:0000000000018DBE                 db    0
.eh_frame:0000000000018DBF                 db    0
.eh_frame:0000000000018DC0                 db    0
.eh_frame:0000000000018DC1                 db    9
.eh_frame:0000000000018DC2                 db    0
.eh_frame:0000000000018DC3                 db    0
.eh_frame:0000000000018DC4                 db  5Ch ; \
.eh_frame:0000000000018DC5                 db 0D3h
.eh_frame:0000000000018DC6                 db 0FEh
.eh_frame:0000000000018DC7                 db 0FFh
.eh_frame:0000000000018DC8                 db  91h
.eh_frame:0000000000018DC9                 db    0
.eh_frame:0000000000018DCA                 db    0
.eh_frame:0000000000018DCB                 db    0
.eh_frame:0000000000018DCC                 db    0
.eh_frame:0000000000018DCD                 db  44h ; D
.eh_frame:0000000000018DCE                 db  0Eh
.eh_frame:0000000000018DCF                 db  50h ; P
.eh_frame:0000000000018DD0                 db    2
.eh_frame:0000000000018DD1                 db  82h
.eh_frame:0000000000018DD2                 db  0Ah
.eh_frame:0000000000018DD3                 db  0Eh
.eh_frame:0000000000018DD4                 db    8
.eh_frame:0000000000018DD5                 db  41h ; A
.eh_frame:0000000000018DD6                 db  0Bh
.eh_frame:0000000000018DD7                 db    0
.eh_frame:0000000000018DD8                 db  10h
.eh_frame:0000000000018DD9                 db    0
.eh_frame:0000000000018DDA                 db    0
.eh_frame:0000000000018DDB                 db    0
.eh_frame:0000000000018DDC                 db  1Ch
.eh_frame:0000000000018DDD                 db    9
.eh_frame:0000000000018DDE                 db    0
.eh_frame:0000000000018DDF                 db    0
.eh_frame:0000000000018DE0                 db 0E0h
.eh_frame:0000000000018DE1                 db 0D3h
.eh_frame:0000000000018DE2                 db 0FEh
.eh_frame:0000000000018DE3                 db 0FFh
.eh_frame:0000000000018DE4                 db  0Ch
.eh_frame:0000000000018DE5                 db    0
.eh_frame:0000000000018DE6                 db    0
.eh_frame:0000000000018DE7                 db    0
.eh_frame:0000000000018DE8                 db    0
.eh_frame:0000000000018DE9                 db    0
.eh_frame:0000000000018DEA                 db    0
.eh_frame:0000000000018DEB                 db    0
.eh_frame:0000000000018DEC                 db  10h
.eh_frame:0000000000018DED                 db    0
.eh_frame:0000000000018DEE                 db    0
.eh_frame:0000000000018DEF                 db    0
.eh_frame:0000000000018DF0                 db  30h ; 0
.eh_frame:0000000000018DF1                 db    9
.eh_frame:0000000000018DF2                 db    0
.eh_frame:0000000000018DF3                 db    0
.eh_frame:0000000000018DF4                 db 0DCh
.eh_frame:0000000000018DF5                 db 0D3h
.eh_frame:0000000000018DF6                 db 0FEh
.eh_frame:0000000000018DF7                 db 0FFh
.eh_frame:0000000000018DF8                 db  17h
.eh_frame:0000000000018DF9                 db    0
.eh_frame:0000000000018DFA                 db    0
.eh_frame:0000000000018DFB                 db    0
.eh_frame:0000000000018DFC                 db    0
.eh_frame:0000000000018DFD                 db    0
.eh_frame:0000000000018DFE                 db    0
.eh_frame:0000000000018DFF                 db    0
.eh_frame:0000000000018E00                 db  10h
.eh_frame:0000000000018E01                 db    0
.eh_frame:0000000000018E02                 db    0
.eh_frame:0000000000018E03                 db    0
.eh_frame:0000000000018E04                 db  44h ; D
.eh_frame:0000000000018E05                 db    9
.eh_frame:0000000000018E06                 db    0
.eh_frame:0000000000018E07                 db    0
.eh_frame:0000000000018E08                 db 0E8h
.eh_frame:0000000000018E09                 db 0D3h
.eh_frame:0000000000018E0A                 db 0FEh
.eh_frame:0000000000018E0B                 db 0FFh
.eh_frame:0000000000018E0C                 db  13h
.eh_frame:0000000000018E0D                 db    0
.eh_frame:0000000000018E0E                 db    0
.eh_frame:0000000000018E0F                 db    0
.eh_frame:0000000000018E10                 db    0
.eh_frame:0000000000018E11                 db    0
.eh_frame:0000000000018E12                 db    0
.eh_frame:0000000000018E13                 db    0
.eh_frame:0000000000018E14                 db  10h
.eh_frame:0000000000018E15                 db    0
.eh_frame:0000000000018E16                 db    0
.eh_frame:0000000000018E17                 db    0
.eh_frame:0000000000018E18                 db  58h ; X
.eh_frame:0000000000018E19                 db    9
.eh_frame:0000000000018E1A                 db    0
.eh_frame:0000000000018E1B                 db    0
.eh_frame:0000000000018E1C                 db 0F4h
.eh_frame:0000000000018E1D                 db 0D3h
.eh_frame:0000000000018E1E                 db 0FEh
.eh_frame:0000000000018E1F                 db 0FFh
.eh_frame:0000000000018E20                 db  0Ch
.eh_frame:0000000000018E21                 db    0
.eh_frame:0000000000018E22                 db    0
.eh_frame:0000000000018E23                 db    0
.eh_frame:0000000000018E24                 db    0
.eh_frame:0000000000018E25                 db    0
.eh_frame:0000000000018E26                 db    0
.eh_frame:0000000000018E27                 db    0
.eh_frame:0000000000018E28                 db  10h
.eh_frame:0000000000018E29                 db    0
.eh_frame:0000000000018E2A                 db    0
.eh_frame:0000000000018E2B                 db    0
.eh_frame:0000000000018E2C                 db  6Ch ; l
.eh_frame:0000000000018E2D                 db    9
.eh_frame:0000000000018E2E                 db    0
.eh_frame:0000000000018E2F                 db    0
.eh_frame:0000000000018E30                 db 0F0h
.eh_frame:0000000000018E31                 db 0D3h
.eh_frame:0000000000018E32                 db 0FEh
.eh_frame:0000000000018E33                 db 0FFh
.eh_frame:0000000000018E34                 db  14h
.eh_frame:0000000000018E35                 db    0
.eh_frame:0000000000018E36                 db    0
.eh_frame:0000000000018E37                 db    0
.eh_frame:0000000000018E38                 db    0
.eh_frame:0000000000018E39                 db    0
.eh_frame:0000000000018E3A                 db    0
.eh_frame:0000000000018E3B                 db    0
.eh_frame:0000000000018E3C                 db  10h
.eh_frame:0000000000018E3D                 db    0
.eh_frame:0000000000018E3E                 db    0
.eh_frame:0000000000018E3F                 db    0
.eh_frame:0000000000018E40                 db  80h
.eh_frame:0000000000018E41                 db    9
.eh_frame:0000000000018E42                 db    0
.eh_frame:0000000000018E43                 db    0
.eh_frame:0000000000018E44                 db 0FCh
.eh_frame:0000000000018E45                 db 0D3h
.eh_frame:0000000000018E46                 db 0FEh
.eh_frame:0000000000018E47                 db 0FFh
.eh_frame:0000000000018E48                 db  13h
.eh_frame:0000000000018E49                 db    0
.eh_frame:0000000000018E4A                 db    0
.eh_frame:0000000000018E4B                 db    0
.eh_frame:0000000000018E4C                 db    0
.eh_frame:0000000000018E4D                 db    0
.eh_frame:0000000000018E4E                 db    0
.eh_frame:0000000000018E4F                 db    0
.eh_frame:0000000000018E50                 db  14h
.eh_frame:0000000000018E51                 db    0
.eh_frame:0000000000018E52                 db    0
.eh_frame:0000000000018E53                 db    0
.eh_frame:0000000000018E54                 db  94h
.eh_frame:0000000000018E55                 db    9
.eh_frame:0000000000018E56                 db    0
.eh_frame:0000000000018E57                 db    0
.eh_frame:0000000000018E58                 db    8
.eh_frame:0000000000018E59                 db 0D4h
.eh_frame:0000000000018E5A                 db 0FEh
.eh_frame:0000000000018E5B                 db 0FFh
.eh_frame:0000000000018E5C                 db  18h
.eh_frame:0000000000018E5D                 db    0
.eh_frame:0000000000018E5E                 db    0
.eh_frame:0000000000018E5F                 db    0
.eh_frame:0000000000018E60                 db    0
.eh_frame:0000000000018E61                 db    0
.eh_frame:0000000000018E62                 db    0
.eh_frame:0000000000018E63                 db    0
.eh_frame:0000000000018E64                 db    0
.eh_frame:0000000000018E65                 db    0
.eh_frame:0000000000018E66                 db    0
.eh_frame:0000000000018E67                 db    0
.eh_frame:0000000000018E68                 db  34h ; 4
.eh_frame:0000000000018E69                 db    0
.eh_frame:0000000000018E6A                 db    0
.eh_frame:0000000000018E6B                 db    0
.eh_frame:0000000000018E6C                 db 0ACh
.eh_frame:0000000000018E6D                 db    9
.eh_frame:0000000000018E6E                 db    0
.eh_frame:0000000000018E6F                 db    0
.eh_frame:0000000000018E70                 db  10h
.eh_frame:0000000000018E71                 db 0D4h
.eh_frame:0000000000018E72                 db 0FEh
.eh_frame:0000000000018E73                 db 0FFh
.eh_frame:0000000000018E74                 db  5Eh ; ^
.eh_frame:0000000000018E75                 db    0
.eh_frame:0000000000018E76                 db    0
.eh_frame:0000000000018E77                 db    0
.eh_frame:0000000000018E78                 db    0
.eh_frame:0000000000018E79                 db  42h ; B
.eh_frame:0000000000018E7A                 db  0Eh
.eh_frame:0000000000018E7B                 db  10h
.eh_frame:0000000000018E7C                 db  8Dh
.eh_frame:0000000000018E7D                 db    2
.eh_frame:0000000000018E7E                 db  42h ; B
.eh_frame:0000000000018E7F                 db  0Eh
.eh_frame:0000000000018E80                 db  18h
.eh_frame:0000000000018E81                 db  8Ch
.eh_frame:0000000000018E82                 db    3
.eh_frame:0000000000018E83                 db  44h ; D
.eh_frame:0000000000018E84                 db  0Eh
.eh_frame:0000000000018E85                 db  20h
.eh_frame:0000000000018E86                 db  86h
.eh_frame:0000000000018E87                 db    4
.eh_frame:0000000000018E88                 db  41h ; A
.eh_frame:0000000000018E89                 db  0Eh
.eh_frame:0000000000018E8A                 db  28h ; (
.eh_frame:0000000000018E8B                 db  83h
.eh_frame:0000000000018E8C                 db    5
.eh_frame:0000000000018E8D                 db  4Ah ; J
.eh_frame:0000000000018E8E                 db  0Eh
.eh_frame:0000000000018E8F                 db  30h ; 0
.eh_frame:0000000000018E90                 db    2
.eh_frame:0000000000018E91                 db  41h ; A
.eh_frame:0000000000018E92                 db  0Eh
.eh_frame:0000000000018E93                 db  28h ; (
.eh_frame:0000000000018E94                 db  44h ; D
.eh_frame:0000000000018E95                 db  0Eh
.eh_frame:0000000000018E96                 db  20h
.eh_frame:0000000000018E97                 db  41h ; A
.eh_frame:0000000000018E98                 db  0Eh
.eh_frame:0000000000018E99                 db  18h
.eh_frame:0000000000018E9A                 db  42h ; B
.eh_frame:0000000000018E9B                 db  0Eh
.eh_frame:0000000000018E9C                 db  10h
.eh_frame:0000000000018E9D                 db  42h ; B
.eh_frame:0000000000018E9E                 db  0Eh
.eh_frame:0000000000018E9F                 db    8
.eh_frame:0000000000018EA0                 db  14h
.eh_frame:0000000000018EA1                 db    0
.eh_frame:0000000000018EA2                 db    0
.eh_frame:0000000000018EA3                 db    0
.eh_frame:0000000000018EA4                 db 0E4h
.eh_frame:0000000000018EA5                 db    9
.eh_frame:0000000000018EA6                 db    0
.eh_frame:0000000000018EA7                 db    0
.eh_frame:0000000000018EA8                 db  38h ; 8
.eh_frame:0000000000018EA9                 db 0D4h
.eh_frame:0000000000018EAA                 db 0FEh
.eh_frame:0000000000018EAB                 db 0FFh
.eh_frame:0000000000018EAC                 db  0Eh
.eh_frame:0000000000018EAD                 db    0
.eh_frame:0000000000018EAE                 db    0
.eh_frame:0000000000018EAF                 db    0
.eh_frame:0000000000018EB0                 db    0
.eh_frame:0000000000018EB1                 db    0
.eh_frame:0000000000018EB2                 db    0
.eh_frame:0000000000018EB3                 db    0
.eh_frame:0000000000018EB4                 db    0
.eh_frame:0000000000018EB5                 db    0
.eh_frame:0000000000018EB6                 db    0
.eh_frame:0000000000018EB7                 db    0
.eh_frame:0000000000018EB8                 db  10h
.eh_frame:0000000000018EB9                 db    1
.eh_frame:0000000000018EBA                 db    0
.eh_frame:0000000000018EBB                 db    0
.eh_frame:0000000000018EBC                 db 0FCh
.eh_frame:0000000000018EBD                 db    9
.eh_frame:0000000000018EBE                 db    0
.eh_frame:0000000000018EBF                 db    0
.eh_frame:0000000000018EC0                 db  30h ; 0
.eh_frame:0000000000018EC1                 db 0D4h
.eh_frame:0000000000018EC2                 db 0FEh
.eh_frame:0000000000018EC3                 db 0FFh
.eh_frame:0000000000018EC4                 db  17h
.eh_frame:0000000000018EC5                 db    4
.eh_frame:0000000000018EC6                 db    0
.eh_frame:0000000000018EC7                 db    0
.eh_frame:0000000000018EC8                 db    0
.eh_frame:0000000000018EC9                 db  42h ; B
.eh_frame:0000000000018ECA                 db  0Eh
.eh_frame:0000000000018ECB                 db  10h
.eh_frame:0000000000018ECC                 db  8Fh
.eh_frame:0000000000018ECD                 db    2
.eh_frame:0000000000018ECE                 db  42h ; B
.eh_frame:0000000000018ECF                 db  0Eh
.eh_frame:0000000000018ED0                 db  18h
.eh_frame:0000000000018ED1                 db  8Eh
.eh_frame:0000000000018ED2                 db    3
.eh_frame:0000000000018ED3                 db  42h ; B
.eh_frame:0000000000018ED4                 db  0Eh
.eh_frame:0000000000018ED5                 db  20h
.eh_frame:0000000000018ED6                 db  8Dh
.eh_frame:0000000000018ED7                 db    4
.eh_frame:0000000000018ED8                 db  42h ; B
.eh_frame:0000000000018ED9                 db  0Eh
.eh_frame:0000000000018EDA                 db  28h ; (
.eh_frame:0000000000018EDB                 db  8Ch
.eh_frame:0000000000018EDC                 db    5
.eh_frame:0000000000018EDD                 db  44h ; D
.eh_frame:0000000000018EDE                 db  0Eh
.eh_frame:0000000000018EDF                 db  30h ; 0
.eh_frame:0000000000018EE0                 db  86h
.eh_frame:0000000000018EE1                 db    6
.eh_frame:0000000000018EE2                 db  41h ; A
.eh_frame:0000000000018EE3                 db  0Eh
.eh_frame:0000000000018EE4                 db  38h ; 8
.eh_frame:0000000000018EE5                 db  83h
.eh_frame:0000000000018EE6                 db    7
.eh_frame:0000000000018EE7                 db  4Ah ; J
.eh_frame:0000000000018EE8                 db  0Eh
.eh_frame:0000000000018EE9                 db  60h ; `
.eh_frame:0000000000018EEA                 db    2
.eh_frame:0000000000018EEB                 db 0DDh
.eh_frame:0000000000018EEC                 db  0Eh
.eh_frame:0000000000018EED                 db  68h ; h
.eh_frame:0000000000018EEE                 db  57h ; W
.eh_frame:0000000000018EEF                 db  0Eh
.eh_frame:0000000000018EF0                 db  70h ; p
.eh_frame:0000000000018EF1                 db  42h ; B
.eh_frame:0000000000018EF2                 db  0Eh
.eh_frame:0000000000018EF3                 db  78h ; x
.eh_frame:0000000000018EF4                 db  42h ; B
.eh_frame:0000000000018EF5                 db  0Eh
.eh_frame:0000000000018EF6                 db  80h
.eh_frame:0000000000018EF7                 db    1
.eh_frame:0000000000018EF8                 db  42h ; B
.eh_frame:0000000000018EF9                 db  0Eh
.eh_frame:0000000000018EFA                 db  88h
.eh_frame:0000000000018EFB                 db    1
.eh_frame:0000000000018EFC                 db  42h ; B
.eh_frame:0000000000018EFD                 db  0Eh
.eh_frame:0000000000018EFE                 db  90h
.eh_frame:0000000000018EFF                 db    1
.eh_frame:0000000000018F00                 db  53h ; S
.eh_frame:0000000000018F01                 db  0Eh
.eh_frame:0000000000018F02                 db  60h ; `
.eh_frame:0000000000018F03                 db  44h ; D
.eh_frame:0000000000018F04                 db  0Ah
.eh_frame:0000000000018F05                 db  0Eh
.eh_frame:0000000000018F06                 db  38h ; 8
.eh_frame:0000000000018F07                 db  41h ; A
.eh_frame:0000000000018F08                 db  0Eh
.eh_frame:0000000000018F09                 db  30h ; 0
.eh_frame:0000000000018F0A                 db  41h ; A
.eh_frame:0000000000018F0B                 db  0Eh
.eh_frame:0000000000018F0C                 db  28h ; (
.eh_frame:0000000000018F0D                 db  42h ; B
.eh_frame:0000000000018F0E                 db  0Eh
.eh_frame:0000000000018F0F                 db  20h
.eh_frame:0000000000018F10                 db  42h ; B
.eh_frame:0000000000018F11                 db  0Eh
.eh_frame:0000000000018F12                 db  18h
.eh_frame:0000000000018F13                 db  42h ; B
.eh_frame:0000000000018F14                 db  0Eh
.eh_frame:0000000000018F15                 db  10h
.eh_frame:0000000000018F16                 db  42h ; B
.eh_frame:0000000000018F17                 db  0Eh
.eh_frame:0000000000018F18                 db    8
.eh_frame:0000000000018F19                 db  44h ; D
.eh_frame:0000000000018F1A                 db  0Bh
.eh_frame:0000000000018F1B                 db    2
.eh_frame:0000000000018F1C                 db  78h ; x
.eh_frame:0000000000018F1D                 db  0Ah
.eh_frame:0000000000018F1E                 db  0Eh
.eh_frame:0000000000018F1F                 db  68h ; h
.eh_frame:0000000000018F20                 db  48h ; H
.eh_frame:0000000000018F21                 db  0Bh
.eh_frame:0000000000018F22                 db  5Ah ; Z
.eh_frame:0000000000018F23                 db  0Ah
.eh_frame:0000000000018F24                 db  0Eh
.eh_frame:0000000000018F25                 db  38h ; 8
.eh_frame:0000000000018F26                 db  47h ; G
.eh_frame:0000000000018F27                 db  0Eh
.eh_frame:0000000000018F28                 db  30h ; 0
.eh_frame:0000000000018F29                 db  41h ; A
.eh_frame:0000000000018F2A                 db  0Eh
.eh_frame:0000000000018F2B                 db  28h ; (
.eh_frame:0000000000018F2C                 db  42h ; B
.eh_frame:0000000000018F2D                 db  0Eh
.eh_frame:0000000000018F2E                 db  20h
.eh_frame:0000000000018F2F                 db  42h ; B
.eh_frame:0000000000018F30                 db  0Eh
.eh_frame:0000000000018F31                 db  18h
.eh_frame:0000000000018F32                 db  42h ; B
.eh_frame:0000000000018F33                 db  0Eh
.eh_frame:0000000000018F34                 db  10h
.eh_frame:0000000000018F35                 db  42h ; B
.eh_frame:0000000000018F36                 db  0Eh
.eh_frame:0000000000018F37                 db    8
.eh_frame:0000000000018F38                 db  56h ; V
.eh_frame:0000000000018F39                 db  0Bh
.eh_frame:0000000000018F3A                 db  5Eh ; ^
.eh_frame:0000000000018F3B                 db  0Ah
.eh_frame:0000000000018F3C                 db  0Eh
.eh_frame:0000000000018F3D                 db  38h ; 8
.eh_frame:0000000000018F3E                 db  52h ; R
.eh_frame:0000000000018F3F                 db  0Eh
.eh_frame:0000000000018F40                 db  30h ; 0
.eh_frame:0000000000018F41                 db  41h ; A
.eh_frame:0000000000018F42                 db  0Eh
.eh_frame:0000000000018F43                 db  28h ; (
.eh_frame:0000000000018F44                 db  42h ; B
.eh_frame:0000000000018F45                 db  0Eh
.eh_frame:0000000000018F46                 db  20h
.eh_frame:0000000000018F47                 db  42h ; B
.eh_frame:0000000000018F48                 db  0Eh
.eh_frame:0000000000018F49                 db  18h
.eh_frame:0000000000018F4A                 db  42h ; B
.eh_frame:0000000000018F4B                 db  0Eh
.eh_frame:0000000000018F4C                 db  10h
.eh_frame:0000000000018F4D                 db  42h ; B
.eh_frame:0000000000018F4E                 db  0Eh
.eh_frame:0000000000018F4F                 db    8
.eh_frame:0000000000018F50                 db  4Fh ; O
.eh_frame:0000000000018F51                 db  0Bh
.eh_frame:0000000000018F52                 db  62h ; b
.eh_frame:0000000000018F53                 db  0Ah
.eh_frame:0000000000018F54                 db  0Eh
.eh_frame:0000000000018F55                 db  38h ; 8
.eh_frame:0000000000018F56                 db  50h ; P
.eh_frame:0000000000018F57                 db  0Eh
.eh_frame:0000000000018F58                 db  30h ; 0
.eh_frame:0000000000018F59                 db  41h ; A
.eh_frame:0000000000018F5A                 db  0Eh
.eh_frame:0000000000018F5B                 db  28h ; (
.eh_frame:0000000000018F5C                 db  42h ; B
.eh_frame:0000000000018F5D                 db  0Eh
.eh_frame:0000000000018F5E                 db  20h
.eh_frame:0000000000018F5F                 db  42h ; B
.eh_frame:0000000000018F60                 db  0Eh
.eh_frame:0000000000018F61                 db  18h
.eh_frame:0000000000018F62                 db  42h ; B
.eh_frame:0000000000018F63                 db  0Eh
.eh_frame:0000000000018F64                 db  10h
.eh_frame:0000000000018F65                 db  42h ; B
.eh_frame:0000000000018F66                 db  0Eh
.eh_frame:0000000000018F67                 db    8
.eh_frame:0000000000018F68                 db  55h ; U
.eh_frame:0000000000018F69                 db  0Bh
.eh_frame:0000000000018F6A                 db  66h ; f
.eh_frame:0000000000018F6B                 db  0Eh
.eh_frame:0000000000018F6C                 db  68h ; h
.eh_frame:0000000000018F6D                 db  42h ; B
.eh_frame:0000000000018F6E                 db  0Eh
.eh_frame:0000000000018F6F                 db  70h ; p
.eh_frame:0000000000018F70                 db  5Ch ; \
.eh_frame:0000000000018F71                 db  0Eh
.eh_frame:0000000000018F72                 db  68h ; h
.eh_frame:0000000000018F73                 db  41h ; A
.eh_frame:0000000000018F74                 db  0Eh
.eh_frame:0000000000018F75                 db  60h ; `
.eh_frame:0000000000018F76                 db  44h ; D
.eh_frame:0000000000018F77                 db  0Ah
.eh_frame:0000000000018F78                 db  0Eh
.eh_frame:0000000000018F79                 db  38h ; 8
.eh_frame:0000000000018F7A                 db  41h ; A
.eh_frame:0000000000018F7B                 db  0Eh
.eh_frame:0000000000018F7C                 db  30h ; 0
.eh_frame:0000000000018F7D                 db  41h ; A
.eh_frame:0000000000018F7E                 db  0Eh
.eh_frame:0000000000018F7F                 db  28h ; (
.eh_frame:0000000000018F80                 db  42h ; B
.eh_frame:0000000000018F81                 db  0Eh
.eh_frame:0000000000018F82                 db  20h
.eh_frame:0000000000018F83                 db  42h ; B
.eh_frame:0000000000018F84                 db  0Eh
.eh_frame:0000000000018F85                 db  18h
.eh_frame:0000000000018F86                 db  42h ; B
.eh_frame:0000000000018F87                 db  0Eh
.eh_frame:0000000000018F88                 db  10h
.eh_frame:0000000000018F89                 db  42h ; B
.eh_frame:0000000000018F8A                 db  0Eh
.eh_frame:0000000000018F8B                 db    8
.eh_frame:0000000000018F8C                 db  45h ; E
.eh_frame:0000000000018F8D                 db  0Bh
.eh_frame:0000000000018F8E                 db  68h ; h
.eh_frame:0000000000018F8F                 db  0Ah
.eh_frame:0000000000018F90                 db  0Eh
.eh_frame:0000000000018F91                 db  68h ; h
.eh_frame:0000000000018F92                 db  48h ; H
.eh_frame:0000000000018F93                 db  0Bh
.eh_frame:0000000000018F94                 db  72h ; r
.eh_frame:0000000000018F95                 db  0Eh
.eh_frame:0000000000018F96                 db  68h ; h
.eh_frame:0000000000018F97                 db  45h ; E
.eh_frame:0000000000018F98                 db  0Eh
.eh_frame:0000000000018F99                 db  70h ; p
.eh_frame:0000000000018F9A                 db  42h ; B
.eh_frame:0000000000018F9B                 db  0Eh
.eh_frame:0000000000018F9C                 db  78h ; x
.eh_frame:0000000000018F9D                 db  42h ; B
.eh_frame:0000000000018F9E                 db  0Eh
.eh_frame:0000000000018F9F                 db  80h
.eh_frame:0000000000018FA0                 db    1
.eh_frame:0000000000018FA1                 db  5Eh ; ^
.eh_frame:0000000000018FA2                 db  0Eh
.eh_frame:0000000000018FA3                 db  60h ; `
.eh_frame:0000000000018FA4                 db  44h ; D
.eh_frame:0000000000018FA5                 db  0Ah
.eh_frame:0000000000018FA6                 db  0Eh
.eh_frame:0000000000018FA7                 db  38h ; 8
.eh_frame:0000000000018FA8                 db  41h ; A
.eh_frame:0000000000018FA9                 db  0Eh
.eh_frame:0000000000018FAA                 db  30h ; 0
.eh_frame:0000000000018FAB                 db  41h ; A
.eh_frame:0000000000018FAC                 db  0Eh
.eh_frame:0000000000018FAD                 db  28h ; (
.eh_frame:0000000000018FAE                 db  42h ; B
.eh_frame:0000000000018FAF                 db  0Eh
.eh_frame:0000000000018FB0                 db  20h
.eh_frame:0000000000018FB1                 db  42h ; B
.eh_frame:0000000000018FB2                 db  0Eh
.eh_frame:0000000000018FB3                 db  18h
.eh_frame:0000000000018FB4                 db  42h ; B
.eh_frame:0000000000018FB5                 db  0Eh
.eh_frame:0000000000018FB6                 db  10h
.eh_frame:0000000000018FB7                 db  42h ; B
.eh_frame:0000000000018FB8                 db  0Eh
.eh_frame:0000000000018FB9                 db    8
.eh_frame:0000000000018FBA                 db  41h ; A
.eh_frame:0000000000018FBB                 db  0Bh
.eh_frame:0000000000018FBC                 db  79h ; y
.eh_frame:0000000000018FBD                 db  0Ah
.eh_frame:0000000000018FBE                 db  0Eh
.eh_frame:0000000000018FBF                 db  68h ; h
.eh_frame:0000000000018FC0                 db  42h ; B
.eh_frame:0000000000018FC1                 db  0Eh
.eh_frame:0000000000018FC2                 db  70h ; p
.eh_frame:0000000000018FC3                 db  42h ; B
.eh_frame:0000000000018FC4                 db  0Eh
.eh_frame:0000000000018FC5                 db  78h ; x
.eh_frame:0000000000018FC6                 db  42h ; B
.eh_frame:0000000000018FC7                 db  0Eh
.eh_frame:0000000000018FC8                 db  80h
.eh_frame:0000000000018FC9                 db    1
.eh_frame:0000000000018FCA                 db  51h ; Q
.eh_frame:0000000000018FCB                 db  0Bh
.eh_frame:0000000000018FCC                 db  10h
.eh_frame:0000000000018FCD                 db    0
.eh_frame:0000000000018FCE                 db    0
.eh_frame:0000000000018FCF                 db    0
.eh_frame:0000000000018FD0                 db  10h
.eh_frame:0000000000018FD1                 db  0Bh
.eh_frame:0000000000018FD2                 db    0
.eh_frame:0000000000018FD3                 db    0
.eh_frame:0000000000018FD4                 db  3Ch ; <
.eh_frame:0000000000018FD5                 db 0D7h
.eh_frame:0000000000018FD6                 db 0FEh
.eh_frame:0000000000018FD7                 db 0FFh
.eh_frame:0000000000018FD8                 db  20h
.eh_frame:0000000000018FD9                 db    0
.eh_frame:0000000000018FDA                 db    0
.eh_frame:0000000000018FDB                 db    0
.eh_frame:0000000000018FDC                 db    0
.eh_frame:0000000000018FDD                 db    0
.eh_frame:0000000000018FDE                 db    0
.eh_frame:0000000000018FDF                 db    0
.eh_frame:0000000000018FE0                 db  18h
.eh_frame:0000000000018FE1                 db    0
.eh_frame:0000000000018FE2                 db    0
.eh_frame:0000000000018FE3                 db    0
.eh_frame:0000000000018FE4                 db  24h ; $
.eh_frame:0000000000018FE5                 db  0Bh
.eh_frame:0000000000018FE6                 db    0
.eh_frame:0000000000018FE7                 db    0
.eh_frame:0000000000018FE8                 db  48h ; H
.eh_frame:0000000000018FE9                 db 0D7h
.eh_frame:0000000000018FEA                 db 0FEh
.eh_frame:0000000000018FEB                 db 0FFh
.eh_frame:0000000000018FEC                 db  78h ; x
.eh_frame:0000000000018FED                 db    0
.eh_frame:0000000000018FEE                 db    0
.eh_frame:0000000000018FEF                 db    0
.eh_frame:0000000000018FF0                 db    0
.eh_frame:0000000000018FF1                 db  44h ; D
.eh_frame:0000000000018FF2                 db  0Eh
.eh_frame:0000000000018FF3                 db  70h ; p
.eh_frame:0000000000018FF4                 db    2
.eh_frame:0000000000018FF5                 db  60h ; `
.eh_frame:0000000000018FF6                 db  0Ah
.eh_frame:0000000000018FF7                 db  0Eh
.eh_frame:0000000000018FF8                 db    8
.eh_frame:0000000000018FF9                 db  41h ; A
.eh_frame:0000000000018FFA                 db  0Bh
.eh_frame:0000000000018FFB                 db    0
.eh_frame:0000000000018FFC                 db  28h ; (
.eh_frame:0000000000018FFD                 db    0
.eh_frame:0000000000018FFE                 db    0
.eh_frame:0000000000018FFF                 db    0
.eh_frame:0000000000019000                 db  40h ; @
.eh_frame:0000000000019001                 db  0Bh
.eh_frame:0000000000019002                 db    0
.eh_frame:0000000000019003                 db    0
.eh_frame:0000000000019004                 db 0ACh
.eh_frame:0000000000019005                 db 0D7h
.eh_frame:0000000000019006                 db 0FEh
.eh_frame:0000000000019007                 db 0FFh
.eh_frame:0000000000019008                 db 0D5h
.eh_frame:0000000000019009                 db    0
.eh_frame:000000000001900A                 db    0
.eh_frame:000000000001900B                 db    0
.eh_frame:000000000001900C                 db    0
.eh_frame:000000000001900D                 db  41h ; A
.eh_frame:000000000001900E                 db  0Eh
.eh_frame:000000000001900F                 db  10h
.eh_frame:0000000000019010                 db  86h
.eh_frame:0000000000019011                 db    2
.eh_frame:0000000000019012                 db  41h ; A
.eh_frame:0000000000019013                 db  0Eh
.eh_frame:0000000000019014                 db  18h
.eh_frame:0000000000019015                 db  83h
.eh_frame:0000000000019016                 db    3
.eh_frame:0000000000019017                 db  50h ; P
.eh_frame:0000000000019018                 db  0Eh
.eh_frame:0000000000019019                 db 0D0h
.eh_frame:000000000001901A                 db    1
.eh_frame:000000000001901B                 db    2
.eh_frame:000000000001901C                 db 0ABh
.eh_frame:000000000001901D                 db  0Ah
.eh_frame:000000000001901E                 db  0Eh
.eh_frame:000000000001901F                 db  18h
.eh_frame:0000000000019020                 db  41h ; A
.eh_frame:0000000000019021                 db  0Eh
.eh_frame:0000000000019022                 db  10h
.eh_frame:0000000000019023                 db  41h ; A
.eh_frame:0000000000019024                 db  0Eh
.eh_frame:0000000000019025                 db    8
.eh_frame:0000000000019026                 db  41h ; A
.eh_frame:0000000000019027                 db  0Bh
.eh_frame:0000000000019028                 db  1Ch
.eh_frame:0000000000019029                 db    0
.eh_frame:000000000001902A                 db    0
.eh_frame:000000000001902B                 db    0
.eh_frame:000000000001902C                 db  6Ch ; l
.eh_frame:000000000001902D                 db  0Bh
.eh_frame:000000000001902E                 db    0
.eh_frame:000000000001902F                 db    0
.eh_frame:0000000000019030                 db  60h ; `
.eh_frame:0000000000019031                 db 0D8h
.eh_frame:0000000000019032                 db 0FEh
.eh_frame:0000000000019033                 db 0FFh
.eh_frame:0000000000019034                 db  80h
.eh_frame:0000000000019035                 db    0
.eh_frame:0000000000019036                 db    0
.eh_frame:0000000000019037                 db    0
.eh_frame:0000000000019038                 db    0
.eh_frame:0000000000019039                 db  41h ; A
.eh_frame:000000000001903A                 db  0Eh
.eh_frame:000000000001903B                 db  10h
.eh_frame:000000000001903C                 db  83h
.eh_frame:000000000001903D                 db    2
.eh_frame:000000000001903E                 db    2
.eh_frame:000000000001903F                 db  7Ah ; z
.eh_frame:0000000000019040                 db  0Eh
.eh_frame:0000000000019041                 db    8
.eh_frame:0000000000019042                 db    0
.eh_frame:0000000000019043                 db    0
.eh_frame:0000000000019044                 db    0
.eh_frame:0000000000019045                 db    0
.eh_frame:0000000000019046                 db    0
.eh_frame:0000000000019047                 db    0
.eh_frame:0000000000019048                 db  18h
.eh_frame:0000000000019049                 db    0
.eh_frame:000000000001904A                 db    0
.eh_frame:000000000001904B                 db    0
.eh_frame:000000000001904C                 db  8Ch
.eh_frame:000000000001904D                 db  0Bh
.eh_frame:000000000001904E                 db    0
.eh_frame:000000000001904F                 db    0
.eh_frame:0000000000019050                 db 0C0h
.eh_frame:0000000000019051                 db 0D8h
.eh_frame:0000000000019052                 db 0FEh
.eh_frame:0000000000019053                 db 0FFh
.eh_frame:0000000000019054                 db  1Ah
.eh_frame:0000000000019055                 db    0
.eh_frame:0000000000019056                 db    0
.eh_frame:0000000000019057                 db    0
.eh_frame:0000000000019058                 db    0
.eh_frame:0000000000019059                 db  41h ; A
.eh_frame:000000000001905A                 db  0Eh
.eh_frame:000000000001905B                 db  10h
.eh_frame:000000000001905C                 db  83h
.eh_frame:000000000001905D                 db    2
.eh_frame:000000000001905E                 db  53h ; S
.eh_frame:000000000001905F                 db  0Ah
.eh_frame:0000000000019060                 db  0Eh
.eh_frame:0000000000019061                 db    8
.eh_frame:0000000000019062                 db  41h ; A
.eh_frame:0000000000019063                 db  0Bh
.eh_frame:0000000000019064                 db  10h
.eh_frame:0000000000019065                 db    0
.eh_frame:0000000000019066                 db    0
.eh_frame:0000000000019067                 db    0
.eh_frame:0000000000019068                 db 0A8h
.eh_frame:0000000000019069                 db  0Bh
.eh_frame:000000000001906A                 db    0
.eh_frame:000000000001906B                 db    0
.eh_frame:000000000001906C                 db 0C4h
.eh_frame:000000000001906D                 db 0D8h
.eh_frame:000000000001906E                 db 0FEh
.eh_frame:000000000001906F                 db 0FFh
.eh_frame:0000000000019070                 db  24h ; $
.eh_frame:0000000000019071                 db    0
.eh_frame:0000000000019072                 db    0
.eh_frame:0000000000019073                 db    0
.eh_frame:0000000000019074                 db    0
.eh_frame:0000000000019075                 db  5Fh ; _
.eh_frame:0000000000019076                 db  0Eh
.eh_frame:0000000000019077                 db  10h
.eh_frame:0000000000019078                 db  10h
.eh_frame:0000000000019079                 db    0
.eh_frame:000000000001907A                 db    0
.eh_frame:000000000001907B                 db    0
.eh_frame:000000000001907C                 db 0BCh
.eh_frame:000000000001907D                 db  0Bh
.eh_frame:000000000001907E                 db    0
.eh_frame:000000000001907F                 db    0
.eh_frame:0000000000019080                 db 0E0h
.eh_frame:0000000000019081                 db 0D8h
.eh_frame:0000000000019082                 db 0FEh
.eh_frame:0000000000019083                 db 0FFh
.eh_frame:0000000000019084                 db    2
.eh_frame:0000000000019085                 db    0
.eh_frame:0000000000019086                 db    0
.eh_frame:0000000000019087                 db    0
.eh_frame:0000000000019088                 db    0
.eh_frame:0000000000019089                 db    0
.eh_frame:000000000001908A                 db    0
.eh_frame:000000000001908B                 db    0
.eh_frame:000000000001908C                 db  20h
.eh_frame:000000000001908D                 db    0
.eh_frame:000000000001908E                 db    0
.eh_frame:000000000001908F                 db    0
.eh_frame:0000000000019090                 db 0D0h
.eh_frame:0000000000019091                 db  0Bh
.eh_frame:0000000000019092                 db    0
.eh_frame:0000000000019093                 db    0
.eh_frame:0000000000019094                 db 0DCh
.eh_frame:0000000000019095                 db 0D8h
.eh_frame:0000000000019096                 db 0FEh
.eh_frame:0000000000019097                 db 0FFh
.eh_frame:0000000000019098                 db  36h ; 6
.eh_frame:0000000000019099                 db    0
.eh_frame:000000000001909A                 db    0
.eh_frame:000000000001909B                 db    0
.eh_frame:000000000001909C                 db    0
.eh_frame:000000000001909D                 db  44h ; D
.eh_frame:000000000001909E                 db  0Eh
.eh_frame:000000000001909F                 db  10h
.eh_frame:00000000000190A0                 db  83h
.eh_frame:00000000000190A1                 db    2
.eh_frame:00000000000190A2                 db  5Dh ; ]
.eh_frame:00000000000190A3                 db  0Ah
.eh_frame:00000000000190A4                 db  0Eh
.eh_frame:00000000000190A5                 db    8
.eh_frame:00000000000190A6                 db  47h ; G
.eh_frame:00000000000190A7                 db  0Bh
.eh_frame:00000000000190A8                 db  48h ; H
.eh_frame:00000000000190A9                 db  0Ah
.eh_frame:00000000000190AA                 db  0Eh
.eh_frame:00000000000190AB                 db    8
.eh_frame:00000000000190AC                 db  41h ; A
.eh_frame:00000000000190AD                 db  0Bh
.eh_frame:00000000000190AE                 db    0
.eh_frame:00000000000190AF                 db    0
.eh_frame:00000000000190B0                 db  10h
.eh_frame:00000000000190B1                 db    0
.eh_frame:00000000000190B2                 db    0
.eh_frame:00000000000190B3                 db    0
.eh_frame:00000000000190B4                 db 0F4h
.eh_frame:00000000000190B5                 db  0Bh
.eh_frame:00000000000190B6                 db    0
.eh_frame:00000000000190B7                 db    0
.eh_frame:00000000000190B8                 db 0F8h
.eh_frame:00000000000190B9                 db 0D8h
.eh_frame:00000000000190BA                 db 0FEh
.eh_frame:00000000000190BB                 db 0FFh
.eh_frame:00000000000190BC                 db  24h ; $
.eh_frame:00000000000190BD                 db    0
.eh_frame:00000000000190BE                 db    0
.eh_frame:00000000000190BF                 db    0
.eh_frame:00000000000190C0                 db    0
.eh_frame:00000000000190C1                 db  5Fh ; _
.eh_frame:00000000000190C2                 db  0Eh
.eh_frame:00000000000190C3                 db  10h
.eh_frame:00000000000190C4                 db  14h
.eh_frame:00000000000190C5                 db    0
.eh_frame:00000000000190C6                 db    0
.eh_frame:00000000000190C7                 db    0
.eh_frame:00000000000190C8                 db    8
.eh_frame:00000000000190C9                 db  0Ch
.eh_frame:00000000000190CA                 db    0
.eh_frame:00000000000190CB                 db    0
.eh_frame:00000000000190CC                 db  14h
.eh_frame:00000000000190CD                 db 0D9h
.eh_frame:00000000000190CE                 db 0FEh
.eh_frame:00000000000190CF                 db 0FFh
.eh_frame:00000000000190D0                 db  82h
.eh_frame:00000000000190D1                 db    0
.eh_frame:00000000000190D2                 db    0
.eh_frame:00000000000190D3                 db    0
.eh_frame:00000000000190D4                 db    0
.eh_frame:00000000000190D5                 db    2
.eh_frame:00000000000190D6                 db  5Fh ; _
.eh_frame:00000000000190D7                 db  0Eh
.eh_frame:00000000000190D8                 db  10h
.eh_frame:00000000000190D9                 db  49h ; I
.eh_frame:00000000000190DA                 db  0Eh
.eh_frame:00000000000190DB                 db    8
.eh_frame:00000000000190DC                 db  14h
.eh_frame:00000000000190DD                 db    0
.eh_frame:00000000000190DE                 db    0
.eh_frame:00000000000190DF                 db    0
.eh_frame:00000000000190E0                 db  20h
.eh_frame:00000000000190E1                 db  0Ch
.eh_frame:00000000000190E2                 db    0
.eh_frame:00000000000190E3                 db    0
.eh_frame:00000000000190E4                 db  8Ch
.eh_frame:00000000000190E5                 db 0D9h
.eh_frame:00000000000190E6                 db 0FEh
.eh_frame:00000000000190E7                 db 0FFh
.eh_frame:00000000000190E8                 db  4Ah ; J
.eh_frame:00000000000190E9                 db    0
.eh_frame:00000000000190EA                 db    0
.eh_frame:00000000000190EB                 db    0
.eh_frame:00000000000190EC                 db    0
.eh_frame:00000000000190ED                 db    2
.eh_frame:00000000000190EE                 db  45h ; E
.eh_frame:00000000000190EF                 db  0Eh
.eh_frame:00000000000190F0                 db  10h
.eh_frame:00000000000190F1                 db    0
.eh_frame:00000000000190F2                 db    0
.eh_frame:00000000000190F3                 db    0
.eh_frame:00000000000190F4                 db  18h
.eh_frame:00000000000190F5                 db    0
.eh_frame:00000000000190F6                 db    0
.eh_frame:00000000000190F7                 db    0
.eh_frame:00000000000190F8                 db  38h ; 8
.eh_frame:00000000000190F9                 db  0Ch
.eh_frame:00000000000190FA                 db    0
.eh_frame:00000000000190FB                 db    0
.eh_frame:00000000000190FC                 db 0C4h
.eh_frame:00000000000190FD                 db 0D9h
.eh_frame:00000000000190FE                 db 0FEh
.eh_frame:00000000000190FF                 db 0FFh
.eh_frame:0000000000019100                 db  17h
.eh_frame:0000000000019101                 db    0
.eh_frame:0000000000019102                 db    0
.eh_frame:0000000000019103                 db    0
.eh_frame:0000000000019104                 db    0
.eh_frame:0000000000019105                 db  41h ; A
.eh_frame:0000000000019106                 db  0Eh
.eh_frame:0000000000019107                 db  10h
.eh_frame:0000000000019108                 db  83h
.eh_frame:0000000000019109                 db    2
.eh_frame:000000000001910A                 db  51h ; Q
.eh_frame:000000000001910B                 db  0Eh
.eh_frame:000000000001910C                 db    8
.eh_frame:000000000001910D                 db    0
.eh_frame:000000000001910E                 db    0
.eh_frame:000000000001910F                 db    0
.eh_frame:0000000000019110                 db  18h
.eh_frame:0000000000019111                 db    0
.eh_frame:0000000000019112                 db    0
.eh_frame:0000000000019113                 db    0
.eh_frame:0000000000019114                 db  54h ; T
.eh_frame:0000000000019115                 db  0Ch
.eh_frame:0000000000019116                 db    0
.eh_frame:0000000000019117                 db    0
.eh_frame:0000000000019118                 db 0C8h
.eh_frame:0000000000019119                 db 0D9h
.eh_frame:000000000001911A                 db 0FEh
.eh_frame:000000000001911B                 db 0FFh
.eh_frame:000000000001911C                 db  2Eh ; .
.eh_frame:000000000001911D                 db    0
.eh_frame:000000000001911E                 db    0
.eh_frame:000000000001911F                 db    0
.eh_frame:0000000000019120                 db    0
.eh_frame:0000000000019121                 db  47h ; G
.eh_frame:0000000000019122                 db  0Eh
.eh_frame:0000000000019123                 db  10h
.eh_frame:0000000000019124                 db  61h ; a
.eh_frame:0000000000019125                 db  0Ah
.eh_frame:0000000000019126                 db  0Eh
.eh_frame:0000000000019127                 db    8
.eh_frame:0000000000019128                 db  41h ; A
.eh_frame:0000000000019129                 db  0Bh
.eh_frame:000000000001912A                 db    0
.eh_frame:000000000001912B                 db    0
.eh_frame:000000000001912C                 db  24h ; $
.eh_frame:000000000001912D                 db    0
.eh_frame:000000000001912E                 db    0
.eh_frame:000000000001912F                 db    0
.eh_frame:0000000000019130                 db  70h ; p
.eh_frame:0000000000019131                 db  0Ch
.eh_frame:0000000000019132                 db    0
.eh_frame:0000000000019133                 db    0
.eh_frame:0000000000019134                 db 0DCh
.eh_frame:0000000000019135                 db 0D9h
.eh_frame:0000000000019136                 db 0FEh
.eh_frame:0000000000019137                 db 0FFh
.eh_frame:0000000000019138                 db  28h ; (
.eh_frame:0000000000019139                 db    0
.eh_frame:000000000001913A                 db    0
.eh_frame:000000000001913B                 db    0
.eh_frame:000000000001913C                 db    0
.eh_frame:000000000001913D                 db  41h ; A
.eh_frame:000000000001913E                 db  0Eh
.eh_frame:000000000001913F                 db  10h
.eh_frame:0000000000019140                 db  86h
.eh_frame:0000000000019141                 db    2
.eh_frame:0000000000019142                 db  41h ; A
.eh_frame:0000000000019143                 db  0Eh
.eh_frame:0000000000019144                 db  18h
.eh_frame:0000000000019145                 db  83h
.eh_frame:0000000000019146                 db    3
.eh_frame:0000000000019147                 db  4Dh ; M
.eh_frame:0000000000019148                 db  0Eh
.eh_frame:0000000000019149                 db  20h
.eh_frame:000000000001914A                 db  49h ; I
.eh_frame:000000000001914B                 db  0Eh
.eh_frame:000000000001914C                 db  18h
.eh_frame:000000000001914D                 db  47h ; G
.eh_frame:000000000001914E                 db  0Eh
.eh_frame:000000000001914F                 db  10h
.eh_frame:0000000000019150                 db  41h ; A
.eh_frame:0000000000019151                 db  0Eh
.eh_frame:0000000000019152                 db    8
.eh_frame:0000000000019153                 db    0
.eh_frame:0000000000019154                 db  18h
.eh_frame:0000000000019155                 db    0
.eh_frame:0000000000019156                 db    0
.eh_frame:0000000000019157                 db    0
.eh_frame:0000000000019158                 db  98h
.eh_frame:0000000000019159                 db  0Ch
.eh_frame:000000000001915A                 db    0
.eh_frame:000000000001915B                 db    0
.eh_frame:000000000001915C                 db 0E4h
.eh_frame:000000000001915D                 db 0D9h
.eh_frame:000000000001915E                 db 0FEh
.eh_frame:000000000001915F                 db 0FFh
.eh_frame:0000000000019160                 db  13h
.eh_frame:0000000000019161                 db    0
.eh_frame:0000000000019162                 db    0
.eh_frame:0000000000019163                 db    0
.eh_frame:0000000000019164                 db    0
.eh_frame:0000000000019165                 db  41h ; A
.eh_frame:0000000000019166                 db  0Eh
.eh_frame:0000000000019167                 db  10h
.eh_frame:0000000000019168                 db  83h
.eh_frame:0000000000019169                 db    2
.eh_frame:000000000001916A                 db  50h ; P
.eh_frame:000000000001916B                 db  0Eh
.eh_frame:000000000001916C                 db    8
.eh_frame:000000000001916D                 db    0
.eh_frame:000000000001916E                 db    0
.eh_frame:000000000001916F                 db    0
.eh_frame:0000000000019170                 db  48h ; H
.eh_frame:0000000000019171                 db    0
.eh_frame:0000000000019172                 db    0
.eh_frame:0000000000019173                 db    0
.eh_frame:0000000000019174                 db 0B4h
.eh_frame:0000000000019175                 db  0Ch
.eh_frame:0000000000019176                 db    0
.eh_frame:0000000000019177                 db    0
.eh_frame:0000000000019178                 db 0E8h
.eh_frame:0000000000019179                 db 0D9h
.eh_frame:000000000001917A                 db 0FEh
.eh_frame:000000000001917B                 db 0FFh
.eh_frame:000000000001917C                 db  11h
.eh_frame:000000000001917D                 db    1
.eh_frame:000000000001917E                 db    0
.eh_frame:000000000001917F                 db    0
.eh_frame:0000000000019180                 db    0
.eh_frame:0000000000019181                 db  42h ; B
.eh_frame:0000000000019182                 db  0Eh
.eh_frame:0000000000019183                 db  10h
.eh_frame:0000000000019184                 db  8Fh
.eh_frame:0000000000019185                 db    2
.eh_frame:0000000000019186                 db  42h ; B
.eh_frame:0000000000019187                 db  0Eh
.eh_frame:0000000000019188                 db  18h
.eh_frame:0000000000019189                 db  8Eh
.eh_frame:000000000001918A                 db    3
.eh_frame:000000000001918B                 db  45h ; E
.eh_frame:000000000001918C                 db  0Eh
.eh_frame:000000000001918D                 db  20h
.eh_frame:000000000001918E                 db  8Dh
.eh_frame:000000000001918F                 db    4
.eh_frame:0000000000019190                 db  42h ; B
.eh_frame:0000000000019191                 db  0Eh
.eh_frame:0000000000019192                 db  28h ; (
.eh_frame:0000000000019193                 db  8Ch
.eh_frame:0000000000019194                 db    5
.eh_frame:0000000000019195                 db  44h ; D
.eh_frame:0000000000019196                 db  0Eh
.eh_frame:0000000000019197                 db  30h ; 0
.eh_frame:0000000000019198                 db  86h
.eh_frame:0000000000019199                 db    6
.eh_frame:000000000001919A                 db  41h ; A
.eh_frame:000000000001919B                 db  0Eh
.eh_frame:000000000001919C                 db  38h ; 8
.eh_frame:000000000001919D                 db  83h
.eh_frame:000000000001919E                 db    7
.eh_frame:000000000001919F                 db  4Eh ; N
.eh_frame:00000000000191A0                 db  0Eh
.eh_frame:00000000000191A1                 db  50h ; P
.eh_frame:00000000000191A2                 db    2
.eh_frame:00000000000191A3                 db  9Fh
.eh_frame:00000000000191A4                 db  0Ah
.eh_frame:00000000000191A5                 db  0Eh
.eh_frame:00000000000191A6                 db  38h ; 8
.eh_frame:00000000000191A7                 db  41h ; A
.eh_frame:00000000000191A8                 db  0Eh
.eh_frame:00000000000191A9                 db  30h ; 0
.eh_frame:00000000000191AA                 db  41h ; A
.eh_frame:00000000000191AB                 db  0Eh
.eh_frame:00000000000191AC                 db  28h ; (
.eh_frame:00000000000191AD                 db  42h ; B
.eh_frame:00000000000191AE                 db  0Eh
.eh_frame:00000000000191AF                 db  20h
.eh_frame:00000000000191B0                 db  42h ; B
.eh_frame:00000000000191B1                 db  0Eh
.eh_frame:00000000000191B2                 db  18h
.eh_frame:00000000000191B3                 db  42h ; B
.eh_frame:00000000000191B4                 db  0Eh
.eh_frame:00000000000191B5                 db  10h
.eh_frame:00000000000191B6                 db  42h ; B
.eh_frame:00000000000191B7                 db  0Eh
.eh_frame:00000000000191B8                 db    8
.eh_frame:00000000000191B9                 db  49h ; I
.eh_frame:00000000000191BA                 db  0Bh
.eh_frame:00000000000191BB                 db    0
.eh_frame:00000000000191BC                 db  18h
.eh_frame:00000000000191BD                 db    0
.eh_frame:00000000000191BE                 db    0
.eh_frame:00000000000191BF                 db    0
.eh_frame:00000000000191C0                 db    0
.eh_frame:00000000000191C1                 db  0Dh
.eh_frame:00000000000191C2                 db    0
.eh_frame:00000000000191C3                 db    0
.eh_frame:00000000000191C4                 db 0BCh
.eh_frame:00000000000191C5                 db 0DAh
.eh_frame:00000000000191C6                 db 0FEh
.eh_frame:00000000000191C7                 db 0FFh
.eh_frame:00000000000191C8                 db  21h ; !
.eh_frame:00000000000191C9                 db    0
.eh_frame:00000000000191CA                 db    0
.eh_frame:00000000000191CB                 db    0
.eh_frame:00000000000191CC                 db    0
.eh_frame:00000000000191CD                 db  44h ; D
.eh_frame:00000000000191CE                 db  0Eh
.eh_frame:00000000000191CF                 db  18h
.eh_frame:00000000000191D0                 db  42h ; B
.eh_frame:00000000000191D1                 db  0Eh
.eh_frame:00000000000191D2                 db  20h
.eh_frame:00000000000191D3                 db  5Ah ; Z
.eh_frame:00000000000191D4                 db  0Eh
.eh_frame:00000000000191D5                 db    8
.eh_frame:00000000000191D6                 db    0
.eh_frame:00000000000191D7                 db    0
.eh_frame:00000000000191D8                 db  4Ch ; L
.eh_frame:00000000000191D9                 db    0
.eh_frame:00000000000191DA                 db    0
.eh_frame:00000000000191DB                 db    0
.eh_frame:00000000000191DC                 db  1Ch
.eh_frame:00000000000191DD                 db  0Dh
.eh_frame:00000000000191DE                 db    0
.eh_frame:00000000000191DF                 db    0
.eh_frame:00000000000191E0                 db 0D0h
.eh_frame:00000000000191E1                 db 0DAh
.eh_frame:00000000000191E2                 db 0FEh
.eh_frame:00000000000191E3                 db 0FFh
.eh_frame:00000000000191E4                 db 0B3h
.eh_frame:00000000000191E5                 db    6
.eh_frame:00000000000191E6                 db    0
.eh_frame:00000000000191E7                 db    0
.eh_frame:00000000000191E8                 db    0
.eh_frame:00000000000191E9                 db  42h ; B
.eh_frame:00000000000191EA                 db  0Eh
.eh_frame:00000000000191EB                 db  10h
.eh_frame:00000000000191EC                 db  8Fh
.eh_frame:00000000000191ED                 db    2
.eh_frame:00000000000191EE                 db  42h ; B
.eh_frame:00000000000191EF                 db  0Eh
.eh_frame:00000000000191F0                 db  18h
.eh_frame:00000000000191F1                 db  8Eh
.eh_frame:00000000000191F2                 db    3
.eh_frame:00000000000191F3                 db  42h ; B
.eh_frame:00000000000191F4                 db  0Eh
.eh_frame:00000000000191F5                 db  20h
.eh_frame:00000000000191F6                 db  8Dh
.eh_frame:00000000000191F7                 db    4
.eh_frame:00000000000191F8                 db  42h ; B
.eh_frame:00000000000191F9                 db  0Eh
.eh_frame:00000000000191FA                 db  28h ; (
.eh_frame:00000000000191FB                 db  8Ch
.eh_frame:00000000000191FC                 db    5
.eh_frame:00000000000191FD                 db  41h ; A
.eh_frame:00000000000191FE                 db  0Eh
.eh_frame:00000000000191FF                 db  30h ; 0
.eh_frame:0000000000019200                 db  86h
.eh_frame:0000000000019201                 db    6
.eh_frame:0000000000019202                 db  41h ; A
.eh_frame:0000000000019203                 db  0Eh
.eh_frame:0000000000019204                 db  38h ; 8
.eh_frame:0000000000019205                 db  83h
.eh_frame:0000000000019206                 db    7
.eh_frame:0000000000019207                 db  44h ; D
.eh_frame:0000000000019208                 db  0Eh
.eh_frame:0000000000019209                 db  60h ; `
.eh_frame:000000000001920A                 db    2
.eh_frame:000000000001920B                 db  96h
.eh_frame:000000000001920C                 db  0Ah
.eh_frame:000000000001920D                 db  0Eh
.eh_frame:000000000001920E                 db  38h ; 8
.eh_frame:000000000001920F                 db  41h ; A
.eh_frame:0000000000019210                 db  0Eh
.eh_frame:0000000000019211                 db  30h ; 0
.eh_frame:0000000000019212                 db  41h ; A
.eh_frame:0000000000019213                 db  0Eh
.eh_frame:0000000000019214                 db  28h ; (
.eh_frame:0000000000019215                 db  42h ; B
.eh_frame:0000000000019216                 db  0Eh
.eh_frame:0000000000019217                 db  20h
.eh_frame:0000000000019218                 db  42h ; B
.eh_frame:0000000000019219                 db  0Eh
.eh_frame:000000000001921A                 db  18h
.eh_frame:000000000001921B                 db  42h ; B
.eh_frame:000000000001921C                 db  0Eh
.eh_frame:000000000001921D                 db  10h
.eh_frame:000000000001921E                 db  42h ; B
.eh_frame:000000000001921F                 db  0Eh
.eh_frame:0000000000019220                 db    8
.eh_frame:0000000000019221                 db  42h ; B
.eh_frame:0000000000019222                 db  0Bh
.eh_frame:0000000000019223                 db    0
.eh_frame:0000000000019224                 db    0
.eh_frame:0000000000019225                 db    0
.eh_frame:0000000000019226                 db    0
.eh_frame:0000000000019227                 db    0
.eh_frame:0000000000019228                 db  4Ch ; L
.eh_frame:0000000000019229                 db    0
.eh_frame:000000000001922A                 db    0
.eh_frame:000000000001922B                 db    0
.eh_frame:000000000001922C                 db  6Ch ; l
.eh_frame:000000000001922D                 db  0Dh
.eh_frame:000000000001922E                 db    0
.eh_frame:000000000001922F                 db    0
.eh_frame:0000000000019230                 db  40h ; @
.eh_frame:0000000000019231                 db 0E1h
.eh_frame:0000000000019232                 db 0FEh
.eh_frame:0000000000019233                 db 0FFh
.eh_frame:0000000000019234                 db  1Ch
.eh_frame:0000000000019235                 db    4
.eh_frame:0000000000019236                 db    0
.eh_frame:0000000000019237                 db    0
.eh_frame:0000000000019238                 db    0
.eh_frame:0000000000019239                 db  42h ; B
.eh_frame:000000000001923A                 db  0Eh
.eh_frame:000000000001923B                 db  10h
.eh_frame:000000000001923C                 db  8Fh
.eh_frame:000000000001923D                 db    2
.eh_frame:000000000001923E                 db  42h ; B
.eh_frame:000000000001923F                 db  0Eh
.eh_frame:0000000000019240                 db  18h
.eh_frame:0000000000019241                 db  8Eh
.eh_frame:0000000000019242                 db    3
.eh_frame:0000000000019243                 db  42h ; B
.eh_frame:0000000000019244                 db  0Eh
.eh_frame:0000000000019245                 db  20h
.eh_frame:0000000000019246                 db  8Dh
.eh_frame:0000000000019247                 db    4
.eh_frame:0000000000019248                 db  42h ; B
.eh_frame:0000000000019249                 db  0Eh
.eh_frame:000000000001924A                 db  28h ; (
.eh_frame:000000000001924B                 db  8Ch
.eh_frame:000000000001924C                 db    5
.eh_frame:000000000001924D                 db  41h ; A
.eh_frame:000000000001924E                 db  0Eh
.eh_frame:000000000001924F                 db  30h ; 0
.eh_frame:0000000000019250                 db  86h
.eh_frame:0000000000019251                 db    6
.eh_frame:0000000000019252                 db  41h ; A
.eh_frame:0000000000019253                 db  0Eh
.eh_frame:0000000000019254                 db  38h ; 8
.eh_frame:0000000000019255                 db  83h
.eh_frame:0000000000019256                 db    7
.eh_frame:0000000000019257                 db  44h ; D
.eh_frame:0000000000019258                 db  0Eh
.eh_frame:0000000000019259                 db  60h ; `
.eh_frame:000000000001925A                 db    2
.eh_frame:000000000001925B                 db 0E9h
.eh_frame:000000000001925C                 db  0Ah
.eh_frame:000000000001925D                 db  0Eh
.eh_frame:000000000001925E                 db  38h ; 8
.eh_frame:000000000001925F                 db  41h ; A
.eh_frame:0000000000019260                 db  0Eh
.eh_frame:0000000000019261                 db  30h ; 0
.eh_frame:0000000000019262                 db  41h ; A
.eh_frame:0000000000019263                 db  0Eh
.eh_frame:0000000000019264                 db  28h ; (
.eh_frame:0000000000019265                 db  42h ; B
.eh_frame:0000000000019266                 db  0Eh
.eh_frame:0000000000019267                 db  20h
.eh_frame:0000000000019268                 db  42h ; B
.eh_frame:0000000000019269                 db  0Eh
.eh_frame:000000000001926A                 db  18h
.eh_frame:000000000001926B                 db  42h ; B
.eh_frame:000000000001926C                 db  0Eh
.eh_frame:000000000001926D                 db  10h
.eh_frame:000000000001926E                 db  42h ; B
.eh_frame:000000000001926F                 db  0Eh
.eh_frame:0000000000019270                 db    8
.eh_frame:0000000000019271                 db  47h ; G
.eh_frame:0000000000019272                 db  0Bh
.eh_frame:0000000000019273                 db    0
.eh_frame:0000000000019274                 db    0
.eh_frame:0000000000019275                 db    0
.eh_frame:0000000000019276                 db    0
.eh_frame:0000000000019277                 db    0
.eh_frame:0000000000019278                 db  34h ; 4
.eh_frame:0000000000019279                 db    0
.eh_frame:000000000001927A                 db    0
.eh_frame:000000000001927B                 db    0
.eh_frame:000000000001927C                 db 0BCh
.eh_frame:000000000001927D                 db  0Dh
.eh_frame:000000000001927E                 db    0
.eh_frame:000000000001927F                 db    0
.eh_frame:0000000000019280                 db  10h
.eh_frame:0000000000019281                 db 0E5h
.eh_frame:0000000000019282                 db 0FEh
.eh_frame:0000000000019283                 db 0FFh
.eh_frame:0000000000019284                 db  7Bh ; {
.eh_frame:0000000000019285                 db    0
.eh_frame:0000000000019286                 db    0
.eh_frame:0000000000019287                 db    0
.eh_frame:0000000000019288                 db    0
.eh_frame:0000000000019289                 db  42h ; B
.eh_frame:000000000001928A                 db  0Eh
.eh_frame:000000000001928B                 db  10h
.eh_frame:000000000001928C                 db  8Ch
.eh_frame:000000000001928D                 db    2
.eh_frame:000000000001928E                 db  41h ; A
.eh_frame:000000000001928F                 db  0Eh
.eh_frame:0000000000019290                 db  18h
.eh_frame:0000000000019291                 db  86h
.eh_frame:0000000000019292                 db    3
.eh_frame:0000000000019293                 db  41h ; A
.eh_frame:0000000000019294                 db  0Eh
.eh_frame:0000000000019295                 db  20h
.eh_frame:0000000000019296                 db  83h
.eh_frame:0000000000019297                 db    4
.eh_frame:0000000000019298                 db  7Dh ; }
.eh_frame:0000000000019299                 db  0Ah
.eh_frame:000000000001929A                 db  0Eh
.eh_frame:000000000001929B                 db  18h
.eh_frame:000000000001929C                 db  41h ; A
.eh_frame:000000000001929D                 db  0Eh
.eh_frame:000000000001929E                 db  10h
.eh_frame:000000000001929F                 db  42h ; B
.eh_frame:00000000000192A0                 db  0Eh
.eh_frame:00000000000192A1                 db    8
.eh_frame:00000000000192A2                 db  44h ; D
.eh_frame:00000000000192A3                 db  0Bh
.eh_frame:00000000000192A4                 db  60h ; `
.eh_frame:00000000000192A5                 db  0Ah
.eh_frame:00000000000192A6                 db  0Eh
.eh_frame:00000000000192A7                 db  18h
.eh_frame:00000000000192A8                 db  41h ; A
.eh_frame:00000000000192A9                 db  0Eh
.eh_frame:00000000000192AA                 db  10h
.eh_frame:00000000000192AB                 db  42h ; B
.eh_frame:00000000000192AC                 db  0Eh
.eh_frame:00000000000192AD                 db    8
.eh_frame:00000000000192AE                 db  45h ; E
.eh_frame:00000000000192AF                 db  0Bh
.eh_frame:00000000000192B0                 db  34h ; 4
.eh_frame:00000000000192B1                 db    0
.eh_frame:00000000000192B2                 db    0
.eh_frame:00000000000192B3                 db    0
.eh_frame:00000000000192B4                 db 0F4h
.eh_frame:00000000000192B5                 db  0Dh
.eh_frame:00000000000192B6                 db    0
.eh_frame:00000000000192B7                 db    0
.eh_frame:00000000000192B8                 db  58h ; X
.eh_frame:00000000000192B9                 db 0E5h
.eh_frame:00000000000192BA                 db 0FEh
.eh_frame:00000000000192BB                 db 0FFh
.eh_frame:00000000000192BC                 db  7Eh ; ~
.eh_frame:00000000000192BD                 db    2
.eh_frame:00000000000192BE                 db    0
.eh_frame:00000000000192BF                 db    0
.eh_frame:00000000000192C0                 db    0
.eh_frame:00000000000192C1                 db  42h ; B
.eh_frame:00000000000192C2                 db  0Eh
.eh_frame:00000000000192C3                 db  10h
.eh_frame:00000000000192C4                 db  8Ch
.eh_frame:00000000000192C5                 db    2
.eh_frame:00000000000192C6                 db  41h ; A
.eh_frame:00000000000192C7                 db  0Eh
.eh_frame:00000000000192C8                 db  18h
.eh_frame:00000000000192C9                 db  86h
.eh_frame:00000000000192CA                 db    3
.eh_frame:00000000000192CB                 db  43h ; C
.eh_frame:00000000000192CC                 db  0Eh
.eh_frame:00000000000192CD                 db  20h
.eh_frame:00000000000192CE                 db  83h
.eh_frame:00000000000192CF                 db    4
.eh_frame:00000000000192D0                 db  44h ; D
.eh_frame:00000000000192D1                 db  0Eh
.eh_frame:00000000000192D2                 db  70h ; p
.eh_frame:00000000000192D3                 db    2
.eh_frame:00000000000192D4                 db 0F0h
.eh_frame:00000000000192D5                 db  0Ah
.eh_frame:00000000000192D6                 db  0Eh
.eh_frame:00000000000192D7                 db  20h
.eh_frame:00000000000192D8                 db  41h ; A
.eh_frame:00000000000192D9                 db  0Eh
.eh_frame:00000000000192DA                 db  18h
.eh_frame:00000000000192DB                 db  41h ; A
.eh_frame:00000000000192DC                 db  0Eh
.eh_frame:00000000000192DD                 db  10h
.eh_frame:00000000000192DE                 db  42h ; B
.eh_frame:00000000000192DF                 db  0Eh
.eh_frame:00000000000192E0                 db    8
.eh_frame:00000000000192E1                 db  42h ; B
.eh_frame:00000000000192E2                 db  0Bh
.eh_frame:00000000000192E3                 db    0
.eh_frame:00000000000192E4                 db    0
.eh_frame:00000000000192E5                 db    0
.eh_frame:00000000000192E6                 db    0
.eh_frame:00000000000192E7                 db    0
.eh_frame:00000000000192E8                 db  1Ch
.eh_frame:00000000000192E9                 db    0
.eh_frame:00000000000192EA                 db    0
.eh_frame:00000000000192EB                 db    0
.eh_frame:00000000000192EC                 db  2Ch ; ,
.eh_frame:00000000000192ED                 db  0Eh
.eh_frame:00000000000192EE                 db    0
.eh_frame:00000000000192EF                 db    0
.eh_frame:00000000000192F0                 db 0A0h
.eh_frame:00000000000192F1                 db 0E7h
.eh_frame:00000000000192F2                 db 0FEh
.eh_frame:00000000000192F3                 db 0FFh
.eh_frame:00000000000192F4                 db  40h ; @
.eh_frame:00000000000192F5                 db    0
.eh_frame:00000000000192F6                 db    0
.eh_frame:00000000000192F7                 db    0
.eh_frame:00000000000192F8                 db    0
.eh_frame:00000000000192F9                 db  44h ; D
.eh_frame:00000000000192FA                 db  0Eh
.eh_frame:00000000000192FB                 db  10h
.eh_frame:00000000000192FC                 db  83h
.eh_frame:00000000000192FD                 db    2
.eh_frame:00000000000192FE                 db  5Ah ; Z
.eh_frame:00000000000192FF                 db  0Ah
.eh_frame:0000000000019300                 db  0Eh
.eh_frame:0000000000019301                 db    8
.eh_frame:0000000000019302                 db  4Ah ; J
.eh_frame:0000000000019303                 db  0Bh
.eh_frame:0000000000019304                 db  53h ; S
.eh_frame:0000000000019305                 db  0Eh
.eh_frame:0000000000019306                 db    8
.eh_frame:0000000000019307                 db    0
.eh_frame:0000000000019308                 db  2Ch ; ,
.eh_frame:0000000000019309                 db    0
.eh_frame:000000000001930A                 db    0
.eh_frame:000000000001930B                 db    0
.eh_frame:000000000001930C                 db  4Ch ; L
.eh_frame:000000000001930D                 db  0Eh
.eh_frame:000000000001930E                 db    0
.eh_frame:000000000001930F                 db    0
.eh_frame:0000000000019310                 db 0C0h
.eh_frame:0000000000019311                 db 0E7h
.eh_frame:0000000000019312                 db 0FEh
.eh_frame:0000000000019313                 db 0FFh
.eh_frame:0000000000019314                 db  57h ; W
.eh_frame:0000000000019315                 db    0
.eh_frame:0000000000019316                 db    0
.eh_frame:0000000000019317                 db    0
.eh_frame:0000000000019318                 db    0
.eh_frame:0000000000019319                 db  63h ; c
.eh_frame:000000000001931A                 db  0Eh
.eh_frame:000000000001931B                 db  10h
.eh_frame:000000000001931C                 db  8Ch
.eh_frame:000000000001931D                 db    2
.eh_frame:000000000001931E                 db  41h ; A
.eh_frame:000000000001931F                 db  0Eh
.eh_frame:0000000000019320                 db  18h
.eh_frame:0000000000019321                 db  86h
.eh_frame:0000000000019322                 db    3
.eh_frame:0000000000019323                 db  44h ; D
.eh_frame:0000000000019324                 db  0Eh
.eh_frame:0000000000019325                 db  20h
.eh_frame:0000000000019326                 db  83h
.eh_frame:0000000000019327                 db    4
.eh_frame:0000000000019328                 db  6Bh ; k
.eh_frame:0000000000019329                 db  0Eh
.eh_frame:000000000001932A                 db  18h
.eh_frame:000000000001932B                 db  41h ; A
.eh_frame:000000000001932C                 db  0Eh
.eh_frame:000000000001932D                 db  10h
.eh_frame:000000000001932E                 db  42h ; B
.eh_frame:000000000001932F                 db  0Eh
.eh_frame:0000000000019330                 db    8
.eh_frame:0000000000019331                 db    0
.eh_frame:0000000000019332                 db    0
.eh_frame:0000000000019333                 db    0
.eh_frame:0000000000019334                 db    0
.eh_frame:0000000000019335                 db    0
.eh_frame:0000000000019336                 db    0
.eh_frame:0000000000019337                 db    0
.eh_frame:0000000000019338                 db  3Ch ; <
.eh_frame:0000000000019339                 db    0
.eh_frame:000000000001933A                 db    0
.eh_frame:000000000001933B                 db    0
.eh_frame:000000000001933C                 db  7Ch ; |
.eh_frame:000000000001933D                 db  0Eh
.eh_frame:000000000001933E                 db    0
.eh_frame:000000000001933F                 db    0
.eh_frame:0000000000019340                 db 0F0h
.eh_frame:0000000000019341                 db 0E7h
.eh_frame:0000000000019342                 db 0FEh
.eh_frame:0000000000019343                 db 0FFh
.eh_frame:0000000000019344                 db  83h
.eh_frame:0000000000019345                 db    0
.eh_frame:0000000000019346                 db    0
.eh_frame:0000000000019347                 db    0
.eh_frame:0000000000019348                 db    0
.eh_frame:0000000000019349                 db  42h ; B
.eh_frame:000000000001934A                 db  0Eh
.eh_frame:000000000001934B                 db  10h
.eh_frame:000000000001934C                 db  8Dh
.eh_frame:000000000001934D                 db    2
.eh_frame:000000000001934E                 db  42h ; B
.eh_frame:000000000001934F                 db  0Eh
.eh_frame:0000000000019350                 db  18h
.eh_frame:0000000000019351                 db  8Ch
.eh_frame:0000000000019352                 db    3
.eh_frame:0000000000019353                 db  44h ; D
.eh_frame:0000000000019354                 db  0Eh
.eh_frame:0000000000019355                 db  20h
.eh_frame:0000000000019356                 db  86h
.eh_frame:0000000000019357                 db    4
.eh_frame:0000000000019358                 db  41h ; A
.eh_frame:0000000000019359                 db  0Eh
.eh_frame:000000000001935A                 db  28h ; (
.eh_frame:000000000001935B                 db  83h
.eh_frame:000000000001935C                 db    5
.eh_frame:000000000001935D                 db  4Ah ; J
.eh_frame:000000000001935E                 db  0Eh
.eh_frame:000000000001935F                 db  40h ; @
.eh_frame:0000000000019360                 db    2
.eh_frame:0000000000019361                 db  64h ; d
.eh_frame:0000000000019362                 db  0Ah
.eh_frame:0000000000019363                 db  0Eh
.eh_frame:0000000000019364                 db  28h ; (
.eh_frame:0000000000019365                 db  41h ; A
.eh_frame:0000000000019366                 db  0Eh
.eh_frame:0000000000019367                 db  20h
.eh_frame:0000000000019368                 db  41h ; A
.eh_frame:0000000000019369                 db  0Eh
.eh_frame:000000000001936A                 db  18h
.eh_frame:000000000001936B                 db  42h ; B
.eh_frame:000000000001936C                 db  0Eh
.eh_frame:000000000001936D                 db  10h
.eh_frame:000000000001936E                 db  42h ; B
.eh_frame:000000000001936F                 db  0Eh
.eh_frame:0000000000019370                 db    8
.eh_frame:0000000000019371                 db  41h ; A
.eh_frame:0000000000019372                 db  0Bh
.eh_frame:0000000000019373                 db    0
.eh_frame:0000000000019374                 db    0
.eh_frame:0000000000019375                 db    0
.eh_frame:0000000000019376                 db    0
.eh_frame:0000000000019377                 db    0
.eh_frame:0000000000019378                 db  10h
.eh_frame:0000000000019379                 db    0
.eh_frame:000000000001937A                 db    0
.eh_frame:000000000001937B                 db    0
.eh_frame:000000000001937C                 db 0BCh
.eh_frame:000000000001937D                 db  0Eh
.eh_frame:000000000001937E                 db    0
.eh_frame:000000000001937F                 db    0
.eh_frame:0000000000019380                 db  40h ; @
.eh_frame:0000000000019381                 db 0E8h
.eh_frame:0000000000019382                 db 0FEh
.eh_frame:0000000000019383                 db 0FFh
.eh_frame:0000000000019384                 db  2Fh ; /
.eh_frame:0000000000019385                 db    1
.eh_frame:0000000000019386                 db    0
.eh_frame:0000000000019387                 db    0
.eh_frame:0000000000019388                 db    0
.eh_frame:0000000000019389                 db    0
.eh_frame:000000000001938A                 db    0
.eh_frame:000000000001938B                 db    0
.eh_frame:000000000001938C                 db  10h
.eh_frame:000000000001938D                 db    0
.eh_frame:000000000001938E                 db    0
.eh_frame:000000000001938F                 db    0
.eh_frame:0000000000019390                 db 0D0h
.eh_frame:0000000000019391                 db  0Eh
.eh_frame:0000000000019392                 db    0
.eh_frame:0000000000019393                 db    0
.eh_frame:0000000000019394                 db  5Ch ; \
.eh_frame:0000000000019395                 db 0E9h
.eh_frame:0000000000019396                 db 0FEh
.eh_frame:0000000000019397                 db 0FFh
.eh_frame:0000000000019398                 db  1Dh
.eh_frame:0000000000019399                 db    0
.eh_frame:000000000001939A                 db    0
.eh_frame:000000000001939B                 db    0
.eh_frame:000000000001939C                 db    0
.eh_frame:000000000001939D                 db    0
.eh_frame:000000000001939E                 db    0
.eh_frame:000000000001939F                 db    0
.eh_frame:00000000000193A0                 db  90h
.eh_frame:00000000000193A1                 db    0
.eh_frame:00000000000193A2                 db    0
.eh_frame:00000000000193A3                 db    0
.eh_frame:00000000000193A4                 db 0E4h
.eh_frame:00000000000193A5                 db  0Eh
.eh_frame:00000000000193A6                 db    0
.eh_frame:00000000000193A7                 db    0
.eh_frame:00000000000193A8                 db  68h ; h
.eh_frame:00000000000193A9                 db 0E9h
.eh_frame:00000000000193AA                 db 0FEh
.eh_frame:00000000000193AB                 db 0FFh
.eh_frame:00000000000193AC                 db  2Ch ; ,
.eh_frame:00000000000193AD                 db    2
.eh_frame:00000000000193AE                 db    0
.eh_frame:00000000000193AF                 db    0
.eh_frame:00000000000193B0                 db    0
.eh_frame:00000000000193B1                 db  42h ; B
.eh_frame:00000000000193B2                 db  0Eh
.eh_frame:00000000000193B3                 db  10h
.eh_frame:00000000000193B4                 db  8Fh
.eh_frame:00000000000193B5                 db    2
.eh_frame:00000000000193B6                 db  42h ; B
.eh_frame:00000000000193B7                 db  0Eh
.eh_frame:00000000000193B8                 db  18h
.eh_frame:00000000000193B9                 db  8Eh
.eh_frame:00000000000193BA                 db    3
.eh_frame:00000000000193BB                 db  45h ; E
.eh_frame:00000000000193BC                 db  0Eh
.eh_frame:00000000000193BD                 db  20h
.eh_frame:00000000000193BE                 db  8Dh
.eh_frame:00000000000193BF                 db    4
.eh_frame:00000000000193C0                 db  42h ; B
.eh_frame:00000000000193C1                 db  0Eh
.eh_frame:00000000000193C2                 db  28h ; (
.eh_frame:00000000000193C3                 db  8Ch
.eh_frame:00000000000193C4                 db    5
.eh_frame:00000000000193C5                 db  45h ; E
.eh_frame:00000000000193C6                 db  0Eh
.eh_frame:00000000000193C7                 db  30h ; 0
.eh_frame:00000000000193C8                 db  86h
.eh_frame:00000000000193C9                 db    6
.eh_frame:00000000000193CA                 db  41h ; A
.eh_frame:00000000000193CB                 db  0Eh
.eh_frame:00000000000193CC                 db  38h ; 8
.eh_frame:00000000000193CD                 db  83h
.eh_frame:00000000000193CE                 db    7
.eh_frame:00000000000193CF                 db  47h ; G
.eh_frame:00000000000193D0                 db  0Eh
.eh_frame:00000000000193D1                 db  80h
.eh_frame:00000000000193D2                 db    1
.eh_frame:00000000000193D3                 db    2
.eh_frame:00000000000193D4                 db 0BAh
.eh_frame:00000000000193D5                 db  0Ah
.eh_frame:00000000000193D6                 db  0Eh
.eh_frame:00000000000193D7                 db  38h ; 8
.eh_frame:00000000000193D8                 db  46h ; F
.eh_frame:00000000000193D9                 db  0Eh
.eh_frame:00000000000193DA                 db  30h ; 0
.eh_frame:00000000000193DB                 db  41h ; A
.eh_frame:00000000000193DC                 db  0Eh
.eh_frame:00000000000193DD                 db  28h ; (
.eh_frame:00000000000193DE                 db  42h ; B
.eh_frame:00000000000193DF                 db  0Eh
.eh_frame:00000000000193E0                 db  20h
.eh_frame:00000000000193E1                 db  42h ; B
.eh_frame:00000000000193E2                 db  0Eh
.eh_frame:00000000000193E3                 db  18h
.eh_frame:00000000000193E4                 db  42h ; B
.eh_frame:00000000000193E5                 db  0Eh
.eh_frame:00000000000193E6                 db  10h
.eh_frame:00000000000193E7                 db  42h ; B
.eh_frame:00000000000193E8                 db  0Eh
.eh_frame:00000000000193E9                 db    8
.eh_frame:00000000000193EA                 db  47h ; G
.eh_frame:00000000000193EB                 db  0Bh
.eh_frame:00000000000193EC                 db    2
.eh_frame:00000000000193ED                 db 0E1h
.eh_frame:00000000000193EE                 db  0Ah
.eh_frame:00000000000193EF                 db  0Eh
.eh_frame:00000000000193F0                 db  38h ; 8
.eh_frame:00000000000193F1                 db  44h ; D
.eh_frame:00000000000193F2                 db  0Eh
.eh_frame:00000000000193F3                 db  30h ; 0
.eh_frame:00000000000193F4                 db  43h ; C
.eh_frame:00000000000193F5                 db  0Eh
.eh_frame:00000000000193F6                 db  28h ; (
.eh_frame:00000000000193F7                 db  42h ; B
.eh_frame:00000000000193F8                 db  0Eh
.eh_frame:00000000000193F9                 db  20h
.eh_frame:00000000000193FA                 db  42h ; B
.eh_frame:00000000000193FB                 db  0Eh
.eh_frame:00000000000193FC                 db  18h
.eh_frame:00000000000193FD                 db  42h ; B
.eh_frame:00000000000193FE                 db  0Eh
.eh_frame:00000000000193FF                 db  10h
.eh_frame:0000000000019400                 db  42h ; B
.eh_frame:0000000000019401                 db  0Eh
.eh_frame:0000000000019402                 db    8
.eh_frame:0000000000019403                 db  48h ; H
.eh_frame:0000000000019404                 db  0Bh
.eh_frame:0000000000019405                 db  59h ; Y
.eh_frame:0000000000019406                 db  0Ah
.eh_frame:0000000000019407                 db  0Eh
.eh_frame:0000000000019408                 db  38h ; 8
.eh_frame:0000000000019409                 db  43h ; C
.eh_frame:000000000001940A                 db  0Eh
.eh_frame:000000000001940B                 db  30h ; 0
.eh_frame:000000000001940C                 db  41h ; A
.eh_frame:000000000001940D                 db  0Eh
.eh_frame:000000000001940E                 db  28h ; (
.eh_frame:000000000001940F                 db  42h ; B
.eh_frame:0000000000019410                 db  0Eh
.eh_frame:0000000000019411                 db  20h
.eh_frame:0000000000019412                 db  42h ; B
.eh_frame:0000000000019413                 db  0Eh
.eh_frame:0000000000019414                 db  18h
.eh_frame:0000000000019415                 db  42h ; B
.eh_frame:0000000000019416                 db  0Eh
.eh_frame:0000000000019417                 db  10h
.eh_frame:0000000000019418                 db  42h ; B
.eh_frame:0000000000019419                 db  0Eh
.eh_frame:000000000001941A                 db    8
.eh_frame:000000000001941B                 db  4Bh ; K
.eh_frame:000000000001941C                 db  0Bh
.eh_frame:000000000001941D                 db  49h ; I
.eh_frame:000000000001941E                 db  0Eh
.eh_frame:000000000001941F                 db  38h ; 8
.eh_frame:0000000000019420                 db  41h ; A
.eh_frame:0000000000019421                 db  0Eh
.eh_frame:0000000000019422                 db  30h ; 0
.eh_frame:0000000000019423                 db  41h ; A
.eh_frame:0000000000019424                 db  0Eh
.eh_frame:0000000000019425                 db  28h ; (
.eh_frame:0000000000019426                 db  48h ; H
.eh_frame:0000000000019427                 db  0Eh
.eh_frame:0000000000019428                 db  20h
.eh_frame:0000000000019429                 db  44h ; D
.eh_frame:000000000001942A                 db  0Eh
.eh_frame:000000000001942B                 db  18h
.eh_frame:000000000001942C                 db  42h ; B
.eh_frame:000000000001942D                 db  0Eh
.eh_frame:000000000001942E                 db  10h
.eh_frame:000000000001942F                 db  42h ; B
.eh_frame:0000000000019430                 db  0Eh
.eh_frame:0000000000019431                 db    8
.eh_frame:0000000000019432                 db    0
.eh_frame:0000000000019433                 db    0
.eh_frame:0000000000019434                 db  10h
.eh_frame:0000000000019435                 db    0
.eh_frame:0000000000019436                 db    0
.eh_frame:0000000000019437                 db    0
.eh_frame:0000000000019438                 db  78h ; x
.eh_frame:0000000000019439                 db  0Fh
.eh_frame:000000000001943A                 db    0
.eh_frame:000000000001943B                 db    0
.eh_frame:000000000001943C                 db    4
.eh_frame:000000000001943D                 db 0EBh
.eh_frame:000000000001943E                 db 0FEh
.eh_frame:000000000001943F                 db 0FFh
.eh_frame:0000000000019440                 db  66h ; f
.eh_frame:0000000000019441                 db    0
.eh_frame:0000000000019442                 db    0
.eh_frame:0000000000019443                 db    0
.eh_frame:0000000000019444                 db    0
.eh_frame:0000000000019445                 db    0
.eh_frame:0000000000019446                 db    0
.eh_frame:0000000000019447                 db    0
.eh_frame:0000000000019448                 db  28h ; (
.eh_frame:0000000000019449                 db    0
.eh_frame:000000000001944A                 db    0
.eh_frame:000000000001944B                 db    0
.eh_frame:000000000001944C                 db  8Ch
.eh_frame:000000000001944D                 db  0Fh
.eh_frame:000000000001944E                 db    0
.eh_frame:000000000001944F                 db    0
.eh_frame:0000000000019450                 db  60h ; `
.eh_frame:0000000000019451                 db 0EBh
.eh_frame:0000000000019452                 db 0FEh
.eh_frame:0000000000019453                 db 0FFh
.eh_frame:0000000000019454                 db  6Bh ; k
.eh_frame:0000000000019455                 db    0
.eh_frame:0000000000019456                 db    0
.eh_frame:0000000000019457                 db    0
.eh_frame:0000000000019458                 db    0
.eh_frame:0000000000019459                 db  42h ; B
.eh_frame:000000000001945A                 db  0Eh
.eh_frame:000000000001945B                 db  10h
.eh_frame:000000000001945C                 db  8Ch
.eh_frame:000000000001945D                 db    2
.eh_frame:000000000001945E                 db  44h ; D
.eh_frame:000000000001945F                 db  0Eh
.eh_frame:0000000000019460                 db  18h
.eh_frame:0000000000019461                 db  86h
.eh_frame:0000000000019462                 db    3
.eh_frame:0000000000019463                 db  44h ; D
.eh_frame:0000000000019464                 db  0Eh
.eh_frame:0000000000019465                 db  20h
.eh_frame:0000000000019466                 db  83h
.eh_frame:0000000000019467                 db    4
.eh_frame:0000000000019468                 db    2
.eh_frame:0000000000019469                 db  5Dh ; ]
.eh_frame:000000000001946A                 db  0Eh
.eh_frame:000000000001946B                 db  18h
.eh_frame:000000000001946C                 db  41h ; A
.eh_frame:000000000001946D                 db  0Eh
.eh_frame:000000000001946E                 db  10h
.eh_frame:000000000001946F                 db  42h ; B
.eh_frame:0000000000019470                 db  0Eh
.eh_frame:0000000000019471                 db    8
.eh_frame:0000000000019472                 db    0
.eh_frame:0000000000019473                 db    0
.eh_frame:0000000000019474                 db  28h ; (
.eh_frame:0000000000019475                 db    0
.eh_frame:0000000000019476                 db    0
.eh_frame:0000000000019477                 db    0
.eh_frame:0000000000019478                 db 0B8h
.eh_frame:0000000000019479                 db  0Fh
.eh_frame:000000000001947A                 db    0
.eh_frame:000000000001947B                 db    0
.eh_frame:000000000001947C                 db 0A4h
.eh_frame:000000000001947D                 db 0EBh
.eh_frame:000000000001947E                 db 0FEh
.eh_frame:000000000001947F                 db 0FFh
.eh_frame:0000000000019480                 db  51h ; Q
.eh_frame:0000000000019481                 db    0
.eh_frame:0000000000019482                 db    0
.eh_frame:0000000000019483                 db    0
.eh_frame:0000000000019484                 db    0
.eh_frame:0000000000019485                 db  42h ; B
.eh_frame:0000000000019486                 db  0Eh
.eh_frame:0000000000019487                 db  10h
.eh_frame:0000000000019488                 db  8Ch
.eh_frame:0000000000019489                 db    2
.eh_frame:000000000001948A                 db  44h ; D
.eh_frame:000000000001948B                 db  0Eh
.eh_frame:000000000001948C                 db  18h
.eh_frame:000000000001948D                 db  86h
.eh_frame:000000000001948E                 db    3
.eh_frame:000000000001948F                 db  44h ; D
.eh_frame:0000000000019490                 db  0Eh
.eh_frame:0000000000019491                 db  20h
.eh_frame:0000000000019492                 db  83h
.eh_frame:0000000000019493                 db    4
.eh_frame:0000000000019494                 db    2
.eh_frame:0000000000019495                 db  43h ; C
.eh_frame:0000000000019496                 db  0Eh
.eh_frame:0000000000019497                 db  18h
.eh_frame:0000000000019498                 db  41h ; A
.eh_frame:0000000000019499                 db  0Eh
.eh_frame:000000000001949A                 db  10h
.eh_frame:000000000001949B                 db  42h ; B
.eh_frame:000000000001949C                 db  0Eh
.eh_frame:000000000001949D                 db    8
.eh_frame:000000000001949E                 db    0
.eh_frame:000000000001949F                 db    0
.eh_frame:00000000000194A0                 db  30h ; 0
.eh_frame:00000000000194A1                 db    0
.eh_frame:00000000000194A2                 db    0
.eh_frame:00000000000194A3                 db    0
.eh_frame:00000000000194A4                 db 0E4h
.eh_frame:00000000000194A5                 db  0Fh
.eh_frame:00000000000194A6                 db    0
.eh_frame:00000000000194A7                 db    0
.eh_frame:00000000000194A8                 db 0D8h
.eh_frame:00000000000194A9                 db 0EBh
.eh_frame:00000000000194AA                 db 0FEh
.eh_frame:00000000000194AB                 db 0FFh
.eh_frame:00000000000194AC                 db  9Ch
.eh_frame:00000000000194AD                 db    0
.eh_frame:00000000000194AE                 db    0
.eh_frame:00000000000194AF                 db    0
.eh_frame:00000000000194B0                 db    0
.eh_frame:00000000000194B1                 db  41h ; A
.eh_frame:00000000000194B2                 db  0Eh
.eh_frame:00000000000194B3                 db  10h
.eh_frame:00000000000194B4                 db  86h
.eh_frame:00000000000194B5                 db    2
.eh_frame:00000000000194B6                 db  41h ; A
.eh_frame:00000000000194B7                 db  0Eh
.eh_frame:00000000000194B8                 db  18h
.eh_frame:00000000000194B9                 db  83h
.eh_frame:00000000000194BA                 db    3
.eh_frame:00000000000194BB                 db  4Ah ; J
.eh_frame:00000000000194BC                 db  0Eh
.eh_frame:00000000000194BD                 db  20h
.eh_frame:00000000000194BE                 db    2
.eh_frame:00000000000194BF                 db  62h ; b
.eh_frame:00000000000194C0                 db  0Ah
.eh_frame:00000000000194C1                 db  0Eh
.eh_frame:00000000000194C2                 db  18h
.eh_frame:00000000000194C3                 db  43h ; C
.eh_frame:00000000000194C4                 db  0Eh
.eh_frame:00000000000194C5                 db  10h
.eh_frame:00000000000194C6                 db  41h ; A
.eh_frame:00000000000194C7                 db  0Eh
.eh_frame:00000000000194C8                 db    8
.eh_frame:00000000000194C9                 db  46h ; F
.eh_frame:00000000000194CA                 db  0Bh
.eh_frame:00000000000194CB                 db  5Ch ; \
.eh_frame:00000000000194CC                 db  0Eh
.eh_frame:00000000000194CD                 db  18h
.eh_frame:00000000000194CE                 db  46h ; F
.eh_frame:00000000000194CF                 db  0Eh
.eh_frame:00000000000194D0                 db  10h
.eh_frame:00000000000194D1                 db  41h ; A
.eh_frame:00000000000194D2                 db  0Eh
.eh_frame:00000000000194D3                 db    8
.eh_frame:00000000000194D4                 db  28h ; (
.eh_frame:00000000000194D5                 db    0
.eh_frame:00000000000194D6                 db    0
.eh_frame:00000000000194D7                 db    0
.eh_frame:00000000000194D8                 db  18h
.eh_frame:00000000000194D9                 db  10h
.eh_frame:00000000000194DA                 db    0
.eh_frame:00000000000194DB                 db    0
.eh_frame:00000000000194DC                 db  44h ; D
.eh_frame:00000000000194DD                 db 0ECh
.eh_frame:00000000000194DE                 db 0FEh
.eh_frame:00000000000194DF                 db 0FFh
.eh_frame:00000000000194E0                 db  64h ; d
.eh_frame:00000000000194E1                 db    0
.eh_frame:00000000000194E2                 db    0
.eh_frame:00000000000194E3                 db    0
.eh_frame:00000000000194E4                 db    0
.eh_frame:00000000000194E5                 db  41h ; A
.eh_frame:00000000000194E6                 db  0Eh
.eh_frame:00000000000194E7                 db  10h
.eh_frame:00000000000194E8                 db  86h
.eh_frame:00000000000194E9                 db    2
.eh_frame:00000000000194EA                 db  41h ; A
.eh_frame:00000000000194EB                 db  0Eh
.eh_frame:00000000000194EC                 db  18h
.eh_frame:00000000000194ED                 db  83h
.eh_frame:00000000000194EE                 db    3
.eh_frame:00000000000194EF                 db  4Ah ; J
.eh_frame:00000000000194F0                 db  0Eh
.eh_frame:00000000000194F1                 db  20h
.eh_frame:00000000000194F2                 db  62h ; b
.eh_frame:00000000000194F3                 db  0Ah
.eh_frame:00000000000194F4                 db  0Eh
.eh_frame:00000000000194F5                 db  18h
.eh_frame:00000000000194F6                 db  41h ; A
.eh_frame:00000000000194F7                 db  0Eh
.eh_frame:00000000000194F8                 db  10h
.eh_frame:00000000000194F9                 db  41h ; A
.eh_frame:00000000000194FA                 db  0Eh
.eh_frame:00000000000194FB                 db    8
.eh_frame:00000000000194FC                 db  48h ; H
.eh_frame:00000000000194FD                 db  0Bh
.eh_frame:00000000000194FE                 db    0
.eh_frame:00000000000194FF                 db    0
.eh_frame:0000000000019500                 db  34h ; 4
.eh_frame:0000000000019501                 db    0
.eh_frame:0000000000019502                 db    0
.eh_frame:0000000000019503                 db    0
.eh_frame:0000000000019504                 db  44h ; D
.eh_frame:0000000000019505                 db  10h
.eh_frame:0000000000019506                 db    0
.eh_frame:0000000000019507                 db    0
.eh_frame:0000000000019508                 db  88h
.eh_frame:0000000000019509                 db 0ECh
.eh_frame:000000000001950A                 db 0FEh
.eh_frame:000000000001950B                 db 0FFh
.eh_frame:000000000001950C                 db  2Ch ; ,
.eh_frame:000000000001950D                 db    1
.eh_frame:000000000001950E                 db    0
.eh_frame:000000000001950F                 db    0
.eh_frame:0000000000019510                 db    0
.eh_frame:0000000000019511                 db  41h ; A
.eh_frame:0000000000019512                 db  0Eh
.eh_frame:0000000000019513                 db  10h
.eh_frame:0000000000019514                 db  86h
.eh_frame:0000000000019515                 db    2
.eh_frame:0000000000019516                 db  41h ; A
.eh_frame:0000000000019517                 db  0Eh
.eh_frame:0000000000019518                 db  18h
.eh_frame:0000000000019519                 db  83h
.eh_frame:000000000001951A                 db    3
.eh_frame:000000000001951B                 db  4Ah ; J
.eh_frame:000000000001951C                 db  0Eh
.eh_frame:000000000001951D                 db  20h
.eh_frame:000000000001951E                 db  66h ; f
.eh_frame:000000000001951F                 db  0Ah
.eh_frame:0000000000019520                 db  0Eh
.eh_frame:0000000000019521                 db  18h
.eh_frame:0000000000019522                 db  41h ; A
.eh_frame:0000000000019523                 db  0Eh
.eh_frame:0000000000019524                 db  10h
.eh_frame:0000000000019525                 db  41h ; A
.eh_frame:0000000000019526                 db  0Eh
.eh_frame:0000000000019527                 db    8
.eh_frame:0000000000019528                 db  44h ; D
.eh_frame:0000000000019529                 db  0Bh
.eh_frame:000000000001952A                 db  6Dh ; m
.eh_frame:000000000001952B                 db  0Ah
.eh_frame:000000000001952C                 db  0Eh
.eh_frame:000000000001952D                 db  18h
.eh_frame:000000000001952E                 db  46h ; F
.eh_frame:000000000001952F                 db  0Eh
.eh_frame:0000000000019530                 db  10h
.eh_frame:0000000000019531                 db  41h ; A
.eh_frame:0000000000019532                 db  0Eh
.eh_frame:0000000000019533                 db    8
.eh_frame:0000000000019534                 db  44h ; D
.eh_frame:0000000000019535                 db  0Bh
.eh_frame:0000000000019536                 db    0
.eh_frame:0000000000019537                 db    0
.eh_frame:0000000000019538                 db  4Ch ; L
.eh_frame:0000000000019539                 db    0
.eh_frame:000000000001953A                 db    0
.eh_frame:000000000001953B                 db    0
.eh_frame:000000000001953C                 db  7Ch ; |
.eh_frame:000000000001953D                 db  10h
.eh_frame:000000000001953E                 db    0
.eh_frame:000000000001953F                 db    0
.eh_frame:0000000000019540                 db  80h
.eh_frame:0000000000019541                 db 0EDh
.eh_frame:0000000000019542                 db 0FEh
.eh_frame:0000000000019543                 db 0FFh
.eh_frame:0000000000019544                 db 0ECh
.eh_frame:0000000000019545                 db    0
.eh_frame:0000000000019546                 db    0
.eh_frame:0000000000019547                 db    0
.eh_frame:0000000000019548                 db    0
.eh_frame:0000000000019549                 db  42h ; B
.eh_frame:000000000001954A                 db  0Eh
.eh_frame:000000000001954B                 db  10h
.eh_frame:000000000001954C                 db  8Eh
.eh_frame:000000000001954D                 db    2
.eh_frame:000000000001954E                 db  42h ; B
.eh_frame:000000000001954F                 db  0Eh
.eh_frame:0000000000019550                 db  18h
.eh_frame:0000000000019551                 db  8Dh
.eh_frame:0000000000019552                 db    3
.eh_frame:0000000000019553                 db  45h ; E
.eh_frame:0000000000019554                 db  0Eh
.eh_frame:0000000000019555                 db  20h
.eh_frame:0000000000019556                 db  8Ch
.eh_frame:0000000000019557                 db    4
.eh_frame:0000000000019558                 db  41h ; A
.eh_frame:0000000000019559                 db  0Eh
.eh_frame:000000000001955A                 db  28h ; (
.eh_frame:000000000001955B                 db  86h
.eh_frame:000000000001955C                 db    5
.eh_frame:000000000001955D                 db  44h ; D
.eh_frame:000000000001955E                 db  0Eh
.eh_frame:000000000001955F                 db  30h ; 0
.eh_frame:0000000000019560                 db  83h
.eh_frame:0000000000019561                 db    6
.eh_frame:0000000000019562                 db    2
.eh_frame:0000000000019563                 db  71h ; q
.eh_frame:0000000000019564                 db  0Ah
.eh_frame:0000000000019565                 db  0Eh
.eh_frame:0000000000019566                 db  28h ; (
.eh_frame:0000000000019567                 db  46h ; F
.eh_frame:0000000000019568                 db  0Eh
.eh_frame:0000000000019569                 db  20h
.eh_frame:000000000001956A                 db  42h ; B
.eh_frame:000000000001956B                 db  0Eh
.eh_frame:000000000001956C                 db  18h
.eh_frame:000000000001956D                 db  42h ; B
.eh_frame:000000000001956E                 db  0Eh
.eh_frame:000000000001956F                 db  10h
.eh_frame:0000000000019570                 db  42h ; B
.eh_frame:0000000000019571                 db  0Eh
.eh_frame:0000000000019572                 db    8
.eh_frame:0000000000019573                 db  45h ; E
.eh_frame:0000000000019574                 db  0Bh
.eh_frame:0000000000019575                 db  6Eh ; n
.eh_frame:0000000000019576                 db  0Ah
.eh_frame:0000000000019577                 db  0Eh
.eh_frame:0000000000019578                 db  28h ; (
.eh_frame:0000000000019579                 db  41h ; A
.eh_frame:000000000001957A                 db  0Eh
.eh_frame:000000000001957B                 db  20h
.eh_frame:000000000001957C                 db  42h ; B
.eh_frame:000000000001957D                 db  0Eh
.eh_frame:000000000001957E                 db  18h
.eh_frame:000000000001957F                 db  42h ; B
.eh_frame:0000000000019580                 db  0Eh
.eh_frame:0000000000019581                 db  10h
.eh_frame:0000000000019582                 db  42h ; B
.eh_frame:0000000000019583                 db  0Eh
.eh_frame:0000000000019584                 db    8
.eh_frame:0000000000019585                 db  41h ; A
.eh_frame:0000000000019586                 db  0Bh
.eh_frame:0000000000019587                 db    0
.eh_frame:0000000000019588                 db  2Ch ; ,
.eh_frame:0000000000019589                 db    0
.eh_frame:000000000001958A                 db    0
.eh_frame:000000000001958B                 db    0
.eh_frame:000000000001958C                 db 0CCh
.eh_frame:000000000001958D                 db  10h
.eh_frame:000000000001958E                 db    0
.eh_frame:000000000001958F                 db    0
.eh_frame:0000000000019590                 db  20h
.eh_frame:0000000000019591                 db 0EEh
.eh_frame:0000000000019592                 db 0FEh
.eh_frame:0000000000019593                 db 0FFh
.eh_frame:0000000000019594                 db  6Eh ; n
.eh_frame:0000000000019595                 db    0
.eh_frame:0000000000019596                 db    0
.eh_frame:0000000000019597                 db    0
.eh_frame:0000000000019598                 db    0
.eh_frame:0000000000019599                 db  42h ; B
.eh_frame:000000000001959A                 db  0Eh
.eh_frame:000000000001959B                 db  10h
.eh_frame:000000000001959C                 db  8Ch
.eh_frame:000000000001959D                 db    2
.eh_frame:000000000001959E                 db  49h ; I
.eh_frame:000000000001959F                 db  0Eh
.eh_frame:00000000000195A0                 db  18h
.eh_frame:00000000000195A1                 db  86h
.eh_frame:00000000000195A2                 db    3
.eh_frame:00000000000195A3                 db  49h ; I
.eh_frame:00000000000195A4                 db  0Eh
.eh_frame:00000000000195A5                 db  20h
.eh_frame:00000000000195A6                 db  83h
.eh_frame:00000000000195A7                 db    4
.eh_frame:00000000000195A8                 db    2
.eh_frame:00000000000195A9                 db  4Ah ; J
.eh_frame:00000000000195AA                 db  0Ah
.eh_frame:00000000000195AB                 db  0Eh
.eh_frame:00000000000195AC                 db  18h
.eh_frame:00000000000195AD                 db  41h ; A
.eh_frame:00000000000195AE                 db  0Eh
.eh_frame:00000000000195AF                 db  10h
.eh_frame:00000000000195B0                 db  42h ; B
.eh_frame:00000000000195B1                 db  0Eh
.eh_frame:00000000000195B2                 db    8
.eh_frame:00000000000195B3                 db  47h ; G
.eh_frame:00000000000195B4                 db  0Bh
.eh_frame:00000000000195B5                 db    0
.eh_frame:00000000000195B6                 db    0
.eh_frame:00000000000195B7                 db    0
.eh_frame:00000000000195B8                 db  48h ; H
.eh_frame:00000000000195B9                 db    0
.eh_frame:00000000000195BA                 db    0
.eh_frame:00000000000195BB                 db    0
.eh_frame:00000000000195BC                 db 0FCh
.eh_frame:00000000000195BD                 db  10h
.eh_frame:00000000000195BE                 db    0
.eh_frame:00000000000195BF                 db    0
.eh_frame:00000000000195C0                 db  60h ; `
.eh_frame:00000000000195C1                 db 0EEh
.eh_frame:00000000000195C2                 db 0FEh
.eh_frame:00000000000195C3                 db 0FFh
.eh_frame:00000000000195C4                 db 0C3h
.eh_frame:00000000000195C5                 db    1
.eh_frame:00000000000195C6                 db    0
.eh_frame:00000000000195C7                 db    0
.eh_frame:00000000000195C8                 db    0
.eh_frame:00000000000195C9                 db  42h ; B
.eh_frame:00000000000195CA                 db  0Eh
.eh_frame:00000000000195CB                 db  10h
.eh_frame:00000000000195CC                 db  8Fh
.eh_frame:00000000000195CD                 db    2
.eh_frame:00000000000195CE                 db  42h ; B
.eh_frame:00000000000195CF                 db  0Eh
.eh_frame:00000000000195D0                 db  18h
.eh_frame:00000000000195D1                 db  8Eh
.eh_frame:00000000000195D2                 db    3
.eh_frame:00000000000195D3                 db  42h ; B
.eh_frame:00000000000195D4                 db  0Eh
.eh_frame:00000000000195D5                 db  20h
.eh_frame:00000000000195D6                 db  8Dh
.eh_frame:00000000000195D7                 db    4
.eh_frame:00000000000195D8                 db  42h ; B
.eh_frame:00000000000195D9                 db  0Eh
.eh_frame:00000000000195DA                 db  28h ; (
.eh_frame:00000000000195DB                 db  8Ch
.eh_frame:00000000000195DC                 db    5
.eh_frame:00000000000195DD                 db  41h ; A
.eh_frame:00000000000195DE                 db  0Eh
.eh_frame:00000000000195DF                 db  30h ; 0
.eh_frame:00000000000195E0                 db  86h
.eh_frame:00000000000195E1                 db    6
.eh_frame:00000000000195E2                 db  41h ; A
.eh_frame:00000000000195E3                 db  0Eh
.eh_frame:00000000000195E4                 db  38h ; 8
.eh_frame:00000000000195E5                 db  83h
.eh_frame:00000000000195E6                 db    7
.eh_frame:00000000000195E7                 db  47h ; G
.eh_frame:00000000000195E8                 db  0Eh
.eh_frame:00000000000195E9                 db 0A0h
.eh_frame:00000000000195EA                 db    1
.eh_frame:00000000000195EB                 db    2
.eh_frame:00000000000195EC                 db 0D3h
.eh_frame:00000000000195ED                 db  0Ah
.eh_frame:00000000000195EE                 db  0Eh
.eh_frame:00000000000195EF                 db  38h ; 8
.eh_frame:00000000000195F0                 db  41h ; A
.eh_frame:00000000000195F1                 db  0Eh
.eh_frame:00000000000195F2                 db  30h ; 0
.eh_frame:00000000000195F3                 db  41h ; A
.eh_frame:00000000000195F4                 db  0Eh
.eh_frame:00000000000195F5                 db  28h ; (
.eh_frame:00000000000195F6                 db  42h ; B
.eh_frame:00000000000195F7                 db  0Eh
.eh_frame:00000000000195F8                 db  20h
.eh_frame:00000000000195F9                 db  42h ; B
.eh_frame:00000000000195FA                 db  0Eh
.eh_frame:00000000000195FB                 db  18h
.eh_frame:00000000000195FC                 db  42h ; B
.eh_frame:00000000000195FD                 db  0Eh
.eh_frame:00000000000195FE                 db  10h
.eh_frame:00000000000195FF                 db  42h ; B
.eh_frame:0000000000019600                 db  0Eh
.eh_frame:0000000000019601                 db    8
.eh_frame:0000000000019602                 db  42h ; B
.eh_frame:0000000000019603                 db  0Bh
.eh_frame:0000000000019604                 db  48h ; H
.eh_frame:0000000000019605                 db    0
.eh_frame:0000000000019606                 db    0
.eh_frame:0000000000019607                 db    0
.eh_frame:0000000000019608                 db  48h ; H
.eh_frame:0000000000019609                 db  11h
.eh_frame:000000000001960A                 db    0
.eh_frame:000000000001960B                 db    0
.eh_frame:000000000001960C                 db 0E4h
.eh_frame:000000000001960D                 db 0EFh
.eh_frame:000000000001960E                 db 0FEh
.eh_frame:000000000001960F                 db 0FFh
.eh_frame:0000000000019610                 db  15h
.eh_frame:0000000000019611                 db    6
.eh_frame:0000000000019612                 db    0
.eh_frame:0000000000019613                 db    0
.eh_frame:0000000000019614                 db    0
.eh_frame:0000000000019615                 db  42h ; B
.eh_frame:0000000000019616                 db  0Eh
.eh_frame:0000000000019617                 db  10h
.eh_frame:0000000000019618                 db  8Fh
.eh_frame:0000000000019619                 db    2
.eh_frame:000000000001961A                 db  42h ; B
.eh_frame:000000000001961B                 db  0Eh
.eh_frame:000000000001961C                 db  18h
.eh_frame:000000000001961D                 db  8Eh
.eh_frame:000000000001961E                 db    3
.eh_frame:000000000001961F                 db  45h ; E
.eh_frame:0000000000019620                 db  0Eh
.eh_frame:0000000000019621                 db  20h
.eh_frame:0000000000019622                 db  8Dh
.eh_frame:0000000000019623                 db    4
.eh_frame:0000000000019624                 db  42h ; B
.eh_frame:0000000000019625                 db  0Eh
.eh_frame:0000000000019626                 db  28h ; (
.eh_frame:0000000000019627                 db  8Ch
.eh_frame:0000000000019628                 db    5
.eh_frame:0000000000019629                 db  41h ; A
.eh_frame:000000000001962A                 db  0Eh
.eh_frame:000000000001962B                 db  30h ; 0
.eh_frame:000000000001962C                 db  86h
.eh_frame:000000000001962D                 db    6
.eh_frame:000000000001962E                 db  41h ; A
.eh_frame:000000000001962F                 db  0Eh
.eh_frame:0000000000019630                 db  38h ; 8
.eh_frame:0000000000019631                 db  83h
.eh_frame:0000000000019632                 db    7
.eh_frame:0000000000019633                 db  47h ; G
.eh_frame:0000000000019634                 db  0Eh
.eh_frame:0000000000019635                 db 0E0h
.eh_frame:0000000000019636                 db    1
.eh_frame:0000000000019637                 db    2
.eh_frame:0000000000019638                 db  69h ; i
.eh_frame:0000000000019639                 db  0Ah
.eh_frame:000000000001963A                 db  0Eh
.eh_frame:000000000001963B                 db  38h ; 8
.eh_frame:000000000001963C                 db  41h ; A
.eh_frame:000000000001963D                 db  0Eh
.eh_frame:000000000001963E                 db  30h ; 0
.eh_frame:000000000001963F                 db  41h ; A
.eh_frame:0000000000019640                 db  0Eh
.eh_frame:0000000000019641                 db  28h ; (
.eh_frame:0000000000019642                 db  42h ; B
.eh_frame:0000000000019643                 db  0Eh
.eh_frame:0000000000019644                 db  20h
.eh_frame:0000000000019645                 db  42h ; B
.eh_frame:0000000000019646                 db  0Eh
.eh_frame:0000000000019647                 db  18h
.eh_frame:0000000000019648                 db  42h ; B
.eh_frame:0000000000019649                 db  0Eh
.eh_frame:000000000001964A                 db  10h
.eh_frame:000000000001964B                 db  42h ; B
.eh_frame:000000000001964C                 db  0Eh
.eh_frame:000000000001964D                 db    8
.eh_frame:000000000001964E                 db  49h ; I
.eh_frame:000000000001964F                 db  0Bh
.eh_frame:0000000000019650                 db  58h ; X
.eh_frame:0000000000019651                 db    0
.eh_frame:0000000000019652                 db    0
.eh_frame:0000000000019653                 db    0
.eh_frame:0000000000019654                 db  94h
.eh_frame:0000000000019655                 db  11h
.eh_frame:0000000000019656                 db    0
.eh_frame:0000000000019657                 db    0
.eh_frame:0000000000019658                 db 0B8h
.eh_frame:0000000000019659                 db 0F5h
.eh_frame:000000000001965A                 db 0FEh
.eh_frame:000000000001965B                 db 0FFh
.eh_frame:000000000001965C                 db  4Eh ; N
.eh_frame:000000000001965D                 db    1
.eh_frame:000000000001965E                 db    0
.eh_frame:000000000001965F                 db    0
.eh_frame:0000000000019660                 db    0
.eh_frame:0000000000019661                 db  41h ; A
.eh_frame:0000000000019662                 db  0Eh
.eh_frame:0000000000019663                 db  10h
.eh_frame:0000000000019664                 db  86h
.eh_frame:0000000000019665                 db    2
.eh_frame:0000000000019666                 db  41h ; A
.eh_frame:0000000000019667                 db  0Eh
.eh_frame:0000000000019668                 db  18h
.eh_frame:0000000000019669                 db  83h
.eh_frame:000000000001966A                 db    3
.eh_frame:000000000001966B                 db  4Eh ; N
.eh_frame:000000000001966C                 db  0Eh
.eh_frame:000000000001966D                 db  20h
.eh_frame:000000000001966E                 db    2
.eh_frame:000000000001966F                 db  83h
.eh_frame:0000000000019670                 db  0Ah
.eh_frame:0000000000019671                 db  0Eh
.eh_frame:0000000000019672                 db  18h
.eh_frame:0000000000019673                 db  41h ; A
.eh_frame:0000000000019674                 db  0Eh
.eh_frame:0000000000019675                 db  10h
.eh_frame:0000000000019676                 db  41h ; A
.eh_frame:0000000000019677                 db  0Eh
.eh_frame:0000000000019678                 db    8
.eh_frame:0000000000019679                 db  4Bh ; K
.eh_frame:000000000001967A                 db  0Bh
.eh_frame:000000000001967B                 db    2
.eh_frame:000000000001967C                 db  61h ; a
.eh_frame:000000000001967D                 db  0Ah
.eh_frame:000000000001967E                 db  0Eh
.eh_frame:000000000001967F                 db  18h
.eh_frame:0000000000019680                 db  43h ; C
.eh_frame:0000000000019681                 db  0Eh
.eh_frame:0000000000019682                 db  10h
.eh_frame:0000000000019683                 db  41h ; A
.eh_frame:0000000000019684                 db  0Eh
.eh_frame:0000000000019685                 db    8
.eh_frame:0000000000019686                 db  4Bh ; K
.eh_frame:0000000000019687                 db  0Bh
.eh_frame:0000000000019688                 db  4Ch ; L
.eh_frame:0000000000019689                 db  0Ah
.eh_frame:000000000001968A                 db  0Eh
.eh_frame:000000000001968B                 db  18h
.eh_frame:000000000001968C                 db  43h ; C
.eh_frame:000000000001968D                 db  0Eh
.eh_frame:000000000001968E                 db  10h
.eh_frame:000000000001968F                 db  41h ; A
.eh_frame:0000000000019690                 db  0Eh
.eh_frame:0000000000019691                 db    8
.eh_frame:0000000000019692                 db  48h ; H
.eh_frame:0000000000019693                 db  0Bh
.eh_frame:0000000000019694                 db  49h ; I
.eh_frame:0000000000019695                 db  0Ah
.eh_frame:0000000000019696                 db  0Eh
.eh_frame:0000000000019697                 db  18h
.eh_frame:0000000000019698                 db  43h ; C
.eh_frame:0000000000019699                 db  0Eh
.eh_frame:000000000001969A                 db  10h
.eh_frame:000000000001969B                 db  41h ; A
.eh_frame:000000000001969C                 db  0Eh
.eh_frame:000000000001969D                 db    8
.eh_frame:000000000001969E                 db  4Bh ; K
.eh_frame:000000000001969F                 db  0Bh
.eh_frame:00000000000196A0                 db  49h ; I
.eh_frame:00000000000196A1                 db  0Eh
.eh_frame:00000000000196A2                 db  18h
.eh_frame:00000000000196A3                 db  43h ; C
.eh_frame:00000000000196A4                 db  0Eh
.eh_frame:00000000000196A5                 db  10h
.eh_frame:00000000000196A6                 db  41h ; A
.eh_frame:00000000000196A7                 db  0Eh
.eh_frame:00000000000196A8                 db    8
.eh_frame:00000000000196A9                 db    0
.eh_frame:00000000000196AA                 db    0
.eh_frame:00000000000196AB                 db    0
.eh_frame:00000000000196AC                 db  28h ; (
.eh_frame:00000000000196AD                 db    0
.eh_frame:00000000000196AE                 db    0
.eh_frame:00000000000196AF                 db    0
.eh_frame:00000000000196B0                 db 0F0h
.eh_frame:00000000000196B1                 db  11h
.eh_frame:00000000000196B2                 db    0
.eh_frame:00000000000196B3                 db    0
.eh_frame:00000000000196B4                 db 0ACh
.eh_frame:00000000000196B5                 db 0F6h
.eh_frame:00000000000196B6                 db 0FEh
.eh_frame:00000000000196B7                 db 0FFh
.eh_frame:00000000000196B8                 db  86h
.eh_frame:00000000000196B9                 db    0
.eh_frame:00000000000196BA                 db    0
.eh_frame:00000000000196BB                 db    0
.eh_frame:00000000000196BC                 db    0
.eh_frame:00000000000196BD                 db  42h ; B
.eh_frame:00000000000196BE                 db  0Eh
.eh_frame:00000000000196BF                 db  10h
.eh_frame:00000000000196C0                 db  8Ch
.eh_frame:00000000000196C1                 db    2
.eh_frame:00000000000196C2                 db  41h ; A
.eh_frame:00000000000196C3                 db  0Eh
.eh_frame:00000000000196C4                 db  18h
.eh_frame:00000000000196C5                 db  86h
.eh_frame:00000000000196C6                 db    3
.eh_frame:00000000000196C7                 db  44h ; D
.eh_frame:00000000000196C8                 db  0Eh
.eh_frame:00000000000196C9                 db  20h
.eh_frame:00000000000196CA                 db  83h
.eh_frame:00000000000196CB                 db    4
.eh_frame:00000000000196CC                 db  70h ; p
.eh_frame:00000000000196CD                 db  0Ah
.eh_frame:00000000000196CE                 db  0Eh
.eh_frame:00000000000196CF                 db  18h
.eh_frame:00000000000196D0                 db  41h ; A
.eh_frame:00000000000196D1                 db  0Eh
.eh_frame:00000000000196D2                 db  10h
.eh_frame:00000000000196D3                 db  42h ; B
.eh_frame:00000000000196D4                 db  0Eh
.eh_frame:00000000000196D5                 db    8
.eh_frame:00000000000196D6                 db  46h ; F
.eh_frame:00000000000196D7                 db  0Bh
.eh_frame:00000000000196D8                 db  18h
.eh_frame:00000000000196D9                 db    0
.eh_frame:00000000000196DA                 db    0
.eh_frame:00000000000196DB                 db    0
.eh_frame:00000000000196DC                 db  1Ch
.eh_frame:00000000000196DD                 db  12h
.eh_frame:00000000000196DE                 db    0
.eh_frame:00000000000196DF                 db    0
.eh_frame:00000000000196E0                 db  10h
.eh_frame:00000000000196E1                 db 0F7h
.eh_frame:00000000000196E2                 db 0FEh
.eh_frame:00000000000196E3                 db 0FFh
.eh_frame:00000000000196E4                 db  30h ; 0
.eh_frame:00000000000196E5                 db    0
.eh_frame:00000000000196E6                 db    0
.eh_frame:00000000000196E7                 db    0
.eh_frame:00000000000196E8                 db    0
.eh_frame:00000000000196E9                 db  41h ; A
.eh_frame:00000000000196EA                 db  0Eh
.eh_frame:00000000000196EB                 db  10h
.eh_frame:00000000000196EC                 db  83h
.eh_frame:00000000000196ED                 db    2
.eh_frame:00000000000196EE                 db  6Ah ; j
.eh_frame:00000000000196EF                 db  0Eh
.eh_frame:00000000000196F0                 db    8
.eh_frame:00000000000196F1                 db    0
.eh_frame:00000000000196F2                 db    0
.eh_frame:00000000000196F3                 db    0
.eh_frame:00000000000196F4                 db  10h
.eh_frame:00000000000196F5                 db    0
.eh_frame:00000000000196F6                 db    0
.eh_frame:00000000000196F7                 db    0
.eh_frame:00000000000196F8                 db  38h ; 8
.eh_frame:00000000000196F9                 db  12h
.eh_frame:00000000000196FA                 db    0
.eh_frame:00000000000196FB                 db    0
.eh_frame:00000000000196FC                 db  24h ; $
.eh_frame:00000000000196FD                 db 0F7h
.eh_frame:00000000000196FE                 db 0FEh
.eh_frame:00000000000196FF                 db 0FFh
.eh_frame:0000000000019700                 db  25h ; %
.eh_frame:0000000000019701                 db    0
.eh_frame:0000000000019702                 db    0
.eh_frame:0000000000019703                 db    0
.eh_frame:0000000000019704                 db    0
.eh_frame:0000000000019705                 db    0
.eh_frame:0000000000019706                 db    0
.eh_frame:0000000000019707                 db    0
.eh_frame:0000000000019708                 db  14h
.eh_frame:0000000000019709                 db    0
.eh_frame:000000000001970A                 db    0
.eh_frame:000000000001970B                 db    0
.eh_frame:000000000001970C                 db  4Ch ; L
.eh_frame:000000000001970D                 db  12h
.eh_frame:000000000001970E                 db    0
.eh_frame:000000000001970F                 db    0
.eh_frame:0000000000019710                 db  40h ; @
.eh_frame:0000000000019711                 db 0F7h
.eh_frame:0000000000019712                 db 0FEh
.eh_frame:0000000000019713                 db 0FFh
.eh_frame:0000000000019714                 db  14h
.eh_frame:0000000000019715                 db    0
.eh_frame:0000000000019716                 db    0
.eh_frame:0000000000019717                 db    0
.eh_frame:0000000000019718                 db    0
.eh_frame:0000000000019719                 db  48h ; H
.eh_frame:000000000001971A                 db  0Eh
.eh_frame:000000000001971B                 db  10h
.eh_frame:000000000001971C                 db  4Bh ; K
.eh_frame:000000000001971D                 db  0Eh
.eh_frame:000000000001971E                 db    8
.eh_frame:000000000001971F                 db    0
.eh_frame:0000000000019720                 db  48h ; H
.eh_frame:0000000000019721                 db    0
.eh_frame:0000000000019722                 db    0
.eh_frame:0000000000019723                 db    0
.eh_frame:0000000000019724                 db  64h ; d
.eh_frame:0000000000019725                 db  12h
.eh_frame:0000000000019726                 db    0
.eh_frame:0000000000019727                 db    0
.eh_frame:0000000000019728                 db  48h ; H
.eh_frame:0000000000019729                 db 0F7h
.eh_frame:000000000001972A                 db 0FEh
.eh_frame:000000000001972B                 db 0FFh
.eh_frame:000000000001972C                 db 0CEh
.eh_frame:000000000001972D                 db    1
.eh_frame:000000000001972E                 db    0
.eh_frame:000000000001972F                 db    0
.eh_frame:0000000000019730                 db    0
.eh_frame:0000000000019731                 db  42h ; B
.eh_frame:0000000000019732                 db  0Eh
.eh_frame:0000000000019733                 db  10h
.eh_frame:0000000000019734                 db  8Fh
.eh_frame:0000000000019735                 db    2
.eh_frame:0000000000019736                 db  42h ; B
.eh_frame:0000000000019737                 db  0Eh
.eh_frame:0000000000019738                 db  18h
.eh_frame:0000000000019739                 db  8Eh
.eh_frame:000000000001973A                 db    3
.eh_frame:000000000001973B                 db  45h ; E
.eh_frame:000000000001973C                 db  0Eh
.eh_frame:000000000001973D                 db  20h
.eh_frame:000000000001973E                 db  8Dh
.eh_frame:000000000001973F                 db    4
.eh_frame:0000000000019740                 db  42h ; B
.eh_frame:0000000000019741                 db  0Eh
.eh_frame:0000000000019742                 db  28h ; (
.eh_frame:0000000000019743                 db  8Ch
.eh_frame:0000000000019744                 db    5
.eh_frame:0000000000019745                 db  41h ; A
.eh_frame:0000000000019746                 db  0Eh
.eh_frame:0000000000019747                 db  30h ; 0
.eh_frame:0000000000019748                 db  86h
.eh_frame:0000000000019749                 db    6
.eh_frame:000000000001974A                 db  41h ; A
.eh_frame:000000000001974B                 db  0Eh
.eh_frame:000000000001974C                 db  38h ; 8
.eh_frame:000000000001974D                 db  83h
.eh_frame:000000000001974E                 db    7
.eh_frame:000000000001974F                 db  47h ; G
.eh_frame:0000000000019750                 db  0Eh
.eh_frame:0000000000019751                 db  50h ; P
.eh_frame:0000000000019752                 db    2
.eh_frame:0000000000019753                 db 0ACh
.eh_frame:0000000000019754                 db  0Ah
.eh_frame:0000000000019755                 db  0Eh
.eh_frame:0000000000019756                 db  38h ; 8
.eh_frame:0000000000019757                 db  41h ; A
.eh_frame:0000000000019758                 db  0Eh
.eh_frame:0000000000019759                 db  30h ; 0
.eh_frame:000000000001975A                 db  41h ; A
.eh_frame:000000000001975B                 db  0Eh
.eh_frame:000000000001975C                 db  28h ; (
.eh_frame:000000000001975D                 db  42h ; B
.eh_frame:000000000001975E                 db  0Eh
.eh_frame:000000000001975F                 db  20h
.eh_frame:0000000000019760                 db  42h ; B
.eh_frame:0000000000019761                 db  0Eh
.eh_frame:0000000000019762                 db  18h
.eh_frame:0000000000019763                 db  42h ; B
.eh_frame:0000000000019764                 db  0Eh
.eh_frame:0000000000019765                 db  10h
.eh_frame:0000000000019766                 db  42h ; B
.eh_frame:0000000000019767                 db  0Eh
.eh_frame:0000000000019768                 db    8
.eh_frame:0000000000019769                 db  46h ; F
.eh_frame:000000000001976A                 db  0Bh
.eh_frame:000000000001976B                 db    0
.eh_frame:000000000001976C                 db  34h ; 4
.eh_frame:000000000001976D                 db    0
.eh_frame:000000000001976E                 db    0
.eh_frame:000000000001976F                 db    0
.eh_frame:0000000000019770                 db 0B0h
.eh_frame:0000000000019771                 db  12h
.eh_frame:0000000000019772                 db    0
.eh_frame:0000000000019773                 db    0
.eh_frame:0000000000019774                 db 0CCh
.eh_frame:0000000000019775                 db 0F8h
.eh_frame:0000000000019776                 db 0FEh
.eh_frame:0000000000019777                 db 0FFh
.eh_frame:0000000000019778                 db  9Fh
.eh_frame:0000000000019779                 db    0
.eh_frame:000000000001977A                 db    0
.eh_frame:000000000001977B                 db    0
.eh_frame:000000000001977C                 db    0
.eh_frame:000000000001977D                 db  42h ; B
.eh_frame:000000000001977E                 db  0Eh
.eh_frame:000000000001977F                 db  10h
.eh_frame:0000000000019780                 db  8Dh
.eh_frame:0000000000019781                 db    2
.eh_frame:0000000000019782                 db  42h ; B
.eh_frame:0000000000019783                 db  0Eh
.eh_frame:0000000000019784                 db  18h
.eh_frame:0000000000019785                 db  8Ch
.eh_frame:0000000000019786                 db    3
.eh_frame:0000000000019787                 db  44h ; D
.eh_frame:0000000000019788                 db  0Eh
.eh_frame:0000000000019789                 db  20h
.eh_frame:000000000001978A                 db  86h
.eh_frame:000000000001978B                 db    4
.eh_frame:000000000001978C                 db  41h ; A
.eh_frame:000000000001978D                 db  0Eh
.eh_frame:000000000001978E                 db  28h ; (
.eh_frame:000000000001978F                 db  83h
.eh_frame:0000000000019790                 db    5
.eh_frame:0000000000019791                 db  51h ; Q
.eh_frame:0000000000019792                 db  0Eh
.eh_frame:0000000000019793                 db  30h ; 0
.eh_frame:0000000000019794                 db    2
.eh_frame:0000000000019795                 db  7Eh ; ~
.eh_frame:0000000000019796                 db  0Eh
.eh_frame:0000000000019797                 db  28h ; (
.eh_frame:0000000000019798                 db  41h ; A
.eh_frame:0000000000019799                 db  0Eh
.eh_frame:000000000001979A                 db  20h
.eh_frame:000000000001979B                 db  41h ; A
.eh_frame:000000000001979C                 db  0Eh
.eh_frame:000000000001979D                 db  18h
.eh_frame:000000000001979E                 db  42h ; B
.eh_frame:000000000001979F                 db  0Eh
.eh_frame:00000000000197A0                 db  10h
.eh_frame:00000000000197A1                 db  42h ; B
.eh_frame:00000000000197A2                 db  0Eh
.eh_frame:00000000000197A3                 db    8
.eh_frame:00000000000197A4                 db  48h ; H
.eh_frame:00000000000197A5                 db    0
.eh_frame:00000000000197A6                 db    0
.eh_frame:00000000000197A7                 db    0
.eh_frame:00000000000197A8                 db 0E8h
.eh_frame:00000000000197A9                 db  12h
.eh_frame:00000000000197AA                 db    0
.eh_frame:00000000000197AB                 db    0
.eh_frame:00000000000197AC                 db  34h ; 4
.eh_frame:00000000000197AD                 db 0F9h
.eh_frame:00000000000197AE                 db 0FEh
.eh_frame:00000000000197AF                 db 0FFh
.eh_frame:00000000000197B0                 db  75h ; u
.eh_frame:00000000000197B1                 db    2
.eh_frame:00000000000197B2                 db    0
.eh_frame:00000000000197B3                 db    0
.eh_frame:00000000000197B4                 db    0
.eh_frame:00000000000197B5                 db  42h ; B
.eh_frame:00000000000197B6                 db  0Eh
.eh_frame:00000000000197B7                 db  10h
.eh_frame:00000000000197B8                 db  8Fh
.eh_frame:00000000000197B9                 db    2
.eh_frame:00000000000197BA                 db  42h ; B
.eh_frame:00000000000197BB                 db  0Eh
.eh_frame:00000000000197BC                 db  18h
.eh_frame:00000000000197BD                 db  8Eh
.eh_frame:00000000000197BE                 db    3
.eh_frame:00000000000197BF                 db  45h ; E
.eh_frame:00000000000197C0                 db  0Eh
.eh_frame:00000000000197C1                 db  20h
.eh_frame:00000000000197C2                 db  8Dh
.eh_frame:00000000000197C3                 db    4
.eh_frame:00000000000197C4                 db  42h ; B
.eh_frame:00000000000197C5                 db  0Eh
.eh_frame:00000000000197C6                 db  28h ; (
.eh_frame:00000000000197C7                 db  8Ch
.eh_frame:00000000000197C8                 db    5
.eh_frame:00000000000197C9                 db  44h ; D
.eh_frame:00000000000197CA                 db  0Eh
.eh_frame:00000000000197CB                 db  30h ; 0
.eh_frame:00000000000197CC                 db  86h
.eh_frame:00000000000197CD                 db    6
.eh_frame:00000000000197CE                 db  41h ; A
.eh_frame:00000000000197CF                 db  0Eh
.eh_frame:00000000000197D0                 db  38h ; 8
.eh_frame:00000000000197D1                 db  83h
.eh_frame:00000000000197D2                 db    7
.eh_frame:00000000000197D3                 db  4Ah ; J
.eh_frame:00000000000197D4                 db  0Eh
.eh_frame:00000000000197D5                 db  50h ; P
.eh_frame:00000000000197D6                 db    3
.eh_frame:00000000000197D7                 db  1Ah
.eh_frame:00000000000197D8                 db    1
.eh_frame:00000000000197D9                 db  0Ah
.eh_frame:00000000000197DA                 db  0Eh
.eh_frame:00000000000197DB                 db  38h ; 8
.eh_frame:00000000000197DC                 db  41h ; A
.eh_frame:00000000000197DD                 db  0Eh
.eh_frame:00000000000197DE                 db  30h ; 0
.eh_frame:00000000000197DF                 db  41h ; A
.eh_frame:00000000000197E0                 db  0Eh
.eh_frame:00000000000197E1                 db  28h ; (
.eh_frame:00000000000197E2                 db  42h ; B
.eh_frame:00000000000197E3                 db  0Eh
.eh_frame:00000000000197E4                 db  20h
.eh_frame:00000000000197E5                 db  42h ; B
.eh_frame:00000000000197E6                 db  0Eh
.eh_frame:00000000000197E7                 db  18h
.eh_frame:00000000000197E8                 db  42h ; B
.eh_frame:00000000000197E9                 db  0Eh
.eh_frame:00000000000197EA                 db  10h
.eh_frame:00000000000197EB                 db  42h ; B
.eh_frame:00000000000197EC                 db  0Eh
.eh_frame:00000000000197ED                 db    8
.eh_frame:00000000000197EE                 db  42h ; B
.eh_frame:00000000000197EF                 db  0Bh
.eh_frame:00000000000197F0                 db  18h
.eh_frame:00000000000197F1                 db    0
.eh_frame:00000000000197F2                 db    0
.eh_frame:00000000000197F3                 db    0
.eh_frame:00000000000197F4                 db  34h ; 4
.eh_frame:00000000000197F5                 db  13h
.eh_frame:00000000000197F6                 db    0
.eh_frame:00000000000197F7                 db    0
.eh_frame:00000000000197F8                 db  68h ; h
.eh_frame:00000000000197F9                 db 0FBh
.eh_frame:00000000000197FA                 db 0FEh
.eh_frame:00000000000197FB                 db 0FFh
.eh_frame:00000000000197FC                 db  59h ; Y
.eh_frame:00000000000197FD                 db    0
.eh_frame:00000000000197FE                 db    0
.eh_frame:00000000000197FF                 db    0
.eh_frame:0000000000019800                 db    0
.eh_frame:0000000000019801                 db  41h ; A
.eh_frame:0000000000019802                 db  0Eh
.eh_frame:0000000000019803                 db  10h
.eh_frame:0000000000019804                 db  83h
.eh_frame:0000000000019805                 db    2
.eh_frame:0000000000019806                 db    2
.eh_frame:0000000000019807                 db  53h ; S
.eh_frame:0000000000019808                 db  0Eh
.eh_frame:0000000000019809                 db    8
.eh_frame:000000000001980A                 db    0
.eh_frame:000000000001980B                 db    0
.eh_frame:000000000001980C                 db  1Ch
.eh_frame:000000000001980D                 db    0
.eh_frame:000000000001980E                 db    0
.eh_frame:000000000001980F                 db    0
.eh_frame:0000000000019810                 db  50h ; P
.eh_frame:0000000000019811                 db  13h
.eh_frame:0000000000019812                 db    0
.eh_frame:0000000000019813                 db    0
.eh_frame:0000000000019814                 db 0ACh
.eh_frame:0000000000019815                 db 0FBh
.eh_frame:0000000000019816                 db 0FEh
.eh_frame:0000000000019817                 db 0FFh
.eh_frame:0000000000019818                 db  32h ; 2
.eh_frame:0000000000019819                 db    0
.eh_frame:000000000001981A                 db    0
.eh_frame:000000000001981B                 db    0
.eh_frame:000000000001981C                 db    0
.eh_frame:000000000001981D                 db  41h ; A
.eh_frame:000000000001981E                 db  0Eh
.eh_frame:000000000001981F                 db  10h
.eh_frame:0000000000019820                 db  83h
.eh_frame:0000000000019821                 db    2
.eh_frame:0000000000019822                 db  5Fh ; _
.eh_frame:0000000000019823                 db  0Ah
.eh_frame:0000000000019824                 db  0Eh
.eh_frame:0000000000019825                 db    8
.eh_frame:0000000000019826                 db  48h ; H
.eh_frame:0000000000019827                 db  0Bh
.eh_frame:0000000000019828                 db  45h ; E
.eh_frame:0000000000019829                 db  0Eh
.eh_frame:000000000001982A                 db    8
.eh_frame:000000000001982B                 db    0
.eh_frame:000000000001982C                 db  38h ; 8
.eh_frame:000000000001982D                 db    0
.eh_frame:000000000001982E                 db    0
.eh_frame:000000000001982F                 db    0
.eh_frame:0000000000019830                 db  70h ; p
.eh_frame:0000000000019831                 db  13h
.eh_frame:0000000000019832                 db    0
.eh_frame:0000000000019833                 db    0
.eh_frame:0000000000019834                 db 0CCh
.eh_frame:0000000000019835                 db 0FBh
.eh_frame:0000000000019836                 db 0FEh
.eh_frame:0000000000019837                 db 0FFh
.eh_frame:0000000000019838                 db  5Fh ; _
.eh_frame:0000000000019839                 db    1
.eh_frame:000000000001983A                 db    0
.eh_frame:000000000001983B                 db    0
.eh_frame:000000000001983C                 db    0
.eh_frame:000000000001983D                 db  42h ; B
.eh_frame:000000000001983E                 db  0Eh
.eh_frame:000000000001983F                 db  10h
.eh_frame:0000000000019840                 db  8Eh
.eh_frame:0000000000019841                 db    2
.eh_frame:0000000000019842                 db  42h ; B
.eh_frame:0000000000019843                 db  0Eh
.eh_frame:0000000000019844                 db  18h
.eh_frame:0000000000019845                 db  8Dh
.eh_frame:0000000000019846                 db    3
.eh_frame:0000000000019847                 db  42h ; B
.eh_frame:0000000000019848                 db  0Eh
.eh_frame:0000000000019849                 db  20h
.eh_frame:000000000001984A                 db  8Ch
.eh_frame:000000000001984B                 db    4
.eh_frame:000000000001984C                 db  44h ; D
.eh_frame:000000000001984D                 db  0Eh
.eh_frame:000000000001984E                 db  28h ; (
.eh_frame:000000000001984F                 db  86h
.eh_frame:0000000000019850                 db    5
.eh_frame:0000000000019851                 db  41h ; A
.eh_frame:0000000000019852                 db  0Eh
.eh_frame:0000000000019853                 db  30h ; 0
.eh_frame:0000000000019854                 db  83h
.eh_frame:0000000000019855                 db    6
.eh_frame:0000000000019856                 db    3
.eh_frame:0000000000019857                 db  45h ; E
.eh_frame:0000000000019858                 db    1
.eh_frame:0000000000019859                 db  0Eh
.eh_frame:000000000001985A                 db  28h ; (
.eh_frame:000000000001985B                 db  44h ; D
.eh_frame:000000000001985C                 db  0Eh
.eh_frame:000000000001985D                 db  20h
.eh_frame:000000000001985E                 db  42h ; B
.eh_frame:000000000001985F                 db  0Eh
.eh_frame:0000000000019860                 db  18h
.eh_frame:0000000000019861                 db  42h ; B
.eh_frame:0000000000019862                 db  0Eh
.eh_frame:0000000000019863                 db  10h
.eh_frame:0000000000019864                 db  42h ; B
.eh_frame:0000000000019865                 db  0Eh
.eh_frame:0000000000019866                 db    8
.eh_frame:0000000000019867                 db    0
.eh_frame:0000000000019868                 db  38h ; 8
.eh_frame:0000000000019869                 db    0
.eh_frame:000000000001986A                 db    0
.eh_frame:000000000001986B                 db    0
.eh_frame:000000000001986C                 db 0ACh
.eh_frame:000000000001986D                 db  13h
.eh_frame:000000000001986E                 db    0
.eh_frame:000000000001986F                 db    0
.eh_frame:0000000000019870                 db 0F0h
.eh_frame:0000000000019871                 db 0FCh
.eh_frame:0000000000019872                 db 0FEh
.eh_frame:0000000000019873                 db 0FFh
.eh_frame:0000000000019874                 db 0B8h
.eh_frame:0000000000019875                 db    0
.eh_frame:0000000000019876                 db    0
.eh_frame:0000000000019877                 db    0
.eh_frame:0000000000019878                 db    0
.eh_frame:0000000000019879                 db  42h ; B
.eh_frame:000000000001987A                 db  0Eh
.eh_frame:000000000001987B                 db  10h
.eh_frame:000000000001987C                 db  8Eh
.eh_frame:000000000001987D                 db    2
.eh_frame:000000000001987E                 db  42h ; B
.eh_frame:000000000001987F                 db  0Eh
.eh_frame:0000000000019880                 db  18h
.eh_frame:0000000000019881                 db  8Dh
.eh_frame:0000000000019882                 db    3
.eh_frame:0000000000019883                 db  45h ; E
.eh_frame:0000000000019884                 db  0Eh
.eh_frame:0000000000019885                 db  20h
.eh_frame:0000000000019886                 db  8Ch
.eh_frame:0000000000019887                 db    4
.eh_frame:0000000000019888                 db  41h ; A
.eh_frame:0000000000019889                 db  0Eh
.eh_frame:000000000001988A                 db  28h ; (
.eh_frame:000000000001988B                 db  86h
.eh_frame:000000000001988C                 db    5
.eh_frame:000000000001988D                 db  41h ; A
.eh_frame:000000000001988E                 db  0Eh
.eh_frame:000000000001988F                 db  30h ; 0
.eh_frame:0000000000019890                 db  83h
.eh_frame:0000000000019891                 db    6
.eh_frame:0000000000019892                 db    2
.eh_frame:0000000000019893                 db  8Fh
.eh_frame:0000000000019894                 db  0Eh
.eh_frame:0000000000019895                 db  28h ; (
.eh_frame:0000000000019896                 db  57h ; W
.eh_frame:0000000000019897                 db  0Eh
.eh_frame:0000000000019898                 db  20h
.eh_frame:0000000000019899                 db  42h ; B
.eh_frame:000000000001989A                 db  0Eh
.eh_frame:000000000001989B                 db  18h
.eh_frame:000000000001989C                 db  42h ; B
.eh_frame:000000000001989D                 db  0Eh
.eh_frame:000000000001989E                 db  10h
.eh_frame:000000000001989F                 db  42h ; B
.eh_frame:00000000000198A0                 db  0Eh
.eh_frame:00000000000198A1                 db    8
.eh_frame:00000000000198A2                 db    0
.eh_frame:00000000000198A3                 db    0
.eh_frame:00000000000198A4                 db  10h
.eh_frame:00000000000198A5                 db    0
.eh_frame:00000000000198A6                 db    0
.eh_frame:00000000000198A7                 db    0
.eh_frame:00000000000198A8                 db 0E8h
.eh_frame:00000000000198A9                 db  13h
.eh_frame:00000000000198AA                 db    0
.eh_frame:00000000000198AB                 db    0
.eh_frame:00000000000198AC                 db  74h ; t
.eh_frame:00000000000198AD                 db 0FDh
.eh_frame:00000000000198AE                 db 0FEh
.eh_frame:00000000000198AF                 db 0FFh
.eh_frame:00000000000198B0                 db  4Fh ; O
.eh_frame:00000000000198B1                 db    0
.eh_frame:00000000000198B2                 db    0
.eh_frame:00000000000198B3                 db    0
.eh_frame:00000000000198B4                 db    0
.eh_frame:00000000000198B5                 db    0
.eh_frame:00000000000198B6                 db    0
.eh_frame:00000000000198B7                 db    0
.eh_frame:00000000000198B8                 db  10h
.eh_frame:00000000000198B9                 db    0
.eh_frame:00000000000198BA                 db    0
.eh_frame:00000000000198BB                 db    0
.eh_frame:00000000000198BC                 db 0FCh
.eh_frame:00000000000198BD                 db  13h
.eh_frame:00000000000198BE                 db    0
.eh_frame:00000000000198BF                 db    0
.eh_frame:00000000000198C0                 db 0B0h
.eh_frame:00000000000198C1                 db 0FDh
.eh_frame:00000000000198C2                 db 0FEh
.eh_frame:00000000000198C3                 db 0FFh
.eh_frame:00000000000198C4                 db  53h ; S
.eh_frame:00000000000198C5                 db    0
.eh_frame:00000000000198C6                 db    0
.eh_frame:00000000000198C7                 db    0
.eh_frame:00000000000198C8                 db    0
.eh_frame:00000000000198C9                 db    0
.eh_frame:00000000000198CA                 db    0
.eh_frame:00000000000198CB                 db    0
.eh_frame:00000000000198CC                 db  10h
.eh_frame:00000000000198CD                 db    0
.eh_frame:00000000000198CE                 db    0
.eh_frame:00000000000198CF                 db    0
.eh_frame:00000000000198D0                 db  10h
.eh_frame:00000000000198D1                 db  14h
.eh_frame:00000000000198D2                 db    0
.eh_frame:00000000000198D3                 db    0
.eh_frame:00000000000198D4                 db 0FCh
.eh_frame:00000000000198D5                 db 0FDh
.eh_frame:00000000000198D6                 db 0FEh
.eh_frame:00000000000198D7                 db 0FFh
.eh_frame:00000000000198D8                 db  75h ; u
.eh_frame:00000000000198D9                 db    0
.eh_frame:00000000000198DA                 db    0
.eh_frame:00000000000198DB                 db    0
.eh_frame:00000000000198DC                 db    0
.eh_frame:00000000000198DD                 db    0
.eh_frame:00000000000198DE                 db    0
.eh_frame:00000000000198DF                 db    0
.eh_frame:00000000000198E0                 db  60h ; `
.eh_frame:00000000000198E1                 db    0
.eh_frame:00000000000198E2                 db    0
.eh_frame:00000000000198E3                 db    0
.eh_frame:00000000000198E4                 db  24h ; $
.eh_frame:00000000000198E5                 db  14h
.eh_frame:00000000000198E6                 db    0
.eh_frame:00000000000198E7                 db    0
.eh_frame:00000000000198E8                 db  68h ; h
.eh_frame:00000000000198E9                 db 0FEh
.eh_frame:00000000000198EA                 db 0FEh
.eh_frame:00000000000198EB                 db 0FFh
.eh_frame:00000000000198EC                 db 0F5h
.eh_frame:00000000000198ED                 db    0
.eh_frame:00000000000198EE                 db    0
.eh_frame:00000000000198EF                 db    0
.eh_frame:00000000000198F0                 db    0
.eh_frame:00000000000198F1                 db  42h ; B
.eh_frame:00000000000198F2                 db  0Eh
.eh_frame:00000000000198F3                 db  10h
.eh_frame:00000000000198F4                 db  8Fh
.eh_frame:00000000000198F5                 db    2
.eh_frame:00000000000198F6                 db  42h ; B
.eh_frame:00000000000198F7                 db  0Eh
.eh_frame:00000000000198F8                 db  18h
.eh_frame:00000000000198F9                 db  8Eh
.eh_frame:00000000000198FA                 db    3
.eh_frame:00000000000198FB                 db  46h ; F
.eh_frame:00000000000198FC                 db  0Eh
.eh_frame:00000000000198FD                 db  20h
.eh_frame:00000000000198FE                 db  8Dh
.eh_frame:00000000000198FF                 db    4
.eh_frame:0000000000019900                 db  42h ; B
.eh_frame:0000000000019901                 db  0Eh
.eh_frame:0000000000019902                 db  28h ; (
.eh_frame:0000000000019903                 db  8Ch
.eh_frame:0000000000019904                 db    5
.eh_frame:0000000000019905                 db  44h ; D
.eh_frame:0000000000019906                 db  0Eh
.eh_frame:0000000000019907                 db  30h ; 0
.eh_frame:0000000000019908                 db  86h
.eh_frame:0000000000019909                 db    6
.eh_frame:000000000001990A                 db  41h ; A
.eh_frame:000000000001990B                 db  0Eh
.eh_frame:000000000001990C                 db  38h ; 8
.eh_frame:000000000001990D                 db  83h
.eh_frame:000000000001990E                 db    7
.eh_frame:000000000001990F                 db  50h ; P
.eh_frame:0000000000019910                 db  0Eh
.eh_frame:0000000000019911                 db  40h ; @
.eh_frame:0000000000019912                 db    2
.eh_frame:0000000000019913                 db  85h
.eh_frame:0000000000019914                 db  0Ah
.eh_frame:0000000000019915                 db  0Eh
.eh_frame:0000000000019916                 db  38h ; 8
.eh_frame:0000000000019917                 db  41h ; A
.eh_frame:0000000000019918                 db  0Eh
.eh_frame:0000000000019919                 db  30h ; 0
.eh_frame:000000000001991A                 db  41h ; A
.eh_frame:000000000001991B                 db  0Eh
.eh_frame:000000000001991C                 db  28h ; (
.eh_frame:000000000001991D                 db  42h ; B
.eh_frame:000000000001991E                 db  0Eh
.eh_frame:000000000001991F                 db  20h
.eh_frame:0000000000019920                 db  42h ; B
.eh_frame:0000000000019921                 db  0Eh
.eh_frame:0000000000019922                 db  18h
.eh_frame:0000000000019923                 db  42h ; B
.eh_frame:0000000000019924                 db  0Eh
.eh_frame:0000000000019925                 db  10h
.eh_frame:0000000000019926                 db  42h ; B
.eh_frame:0000000000019927                 db  0Eh
.eh_frame:0000000000019928                 db    8
.eh_frame:0000000000019929                 db  48h ; H
.eh_frame:000000000001992A                 db  0Bh
.eh_frame:000000000001992B                 db  44h ; D
.eh_frame:000000000001992C                 db  0Ah
.eh_frame:000000000001992D                 db  0Eh
.eh_frame:000000000001992E                 db  38h ; 8
.eh_frame:000000000001992F                 db  46h ; F
.eh_frame:0000000000019930                 db  0Eh
.eh_frame:0000000000019931                 db  30h ; 0
.eh_frame:0000000000019932                 db  41h ; A
.eh_frame:0000000000019933                 db  0Eh
.eh_frame:0000000000019934                 db  28h ; (
.eh_frame:0000000000019935                 db  42h ; B
.eh_frame:0000000000019936                 db  0Eh
.eh_frame:0000000000019937                 db  20h
.eh_frame:0000000000019938                 db  42h ; B
.eh_frame:0000000000019939                 db  0Eh
.eh_frame:000000000001993A                 db  18h
.eh_frame:000000000001993B                 db  42h ; B
.eh_frame:000000000001993C                 db  0Eh
.eh_frame:000000000001993D                 db  10h
.eh_frame:000000000001993E                 db  42h ; B
.eh_frame:000000000001993F                 db  0Eh
.eh_frame:0000000000019940                 db    8
.eh_frame:0000000000019941                 db  45h ; E
.eh_frame:0000000000019942                 db  0Bh
.eh_frame:0000000000019943                 db    0
.eh_frame:0000000000019944                 db  10h
.eh_frame:0000000000019945                 db    0
.eh_frame:0000000000019946                 db    0
.eh_frame:0000000000019947                 db    0
.eh_frame:0000000000019948                 db  88h
.eh_frame:0000000000019949                 db  14h
.eh_frame:000000000001994A                 db    0
.eh_frame:000000000001994B                 db    0
.eh_frame:000000000001994C                 db    4
.eh_frame:000000000001994D                 db 0FFh
.eh_frame:000000000001994E                 db 0FEh
.eh_frame:000000000001994F                 db 0FFh
.eh_frame:0000000000019950                 db  34h ; 4
.eh_frame:0000000000019951                 db    0
.eh_frame:0000000000019952                 db    0
.eh_frame:0000000000019953                 db    0
.eh_frame:0000000000019954                 db    0
.eh_frame:0000000000019955                 db    0
.eh_frame:0000000000019956                 db    0
.eh_frame:0000000000019957                 db    0
.eh_frame:0000000000019958                 db  10h
.eh_frame:0000000000019959                 db    0
.eh_frame:000000000001995A                 db    0
.eh_frame:000000000001995B                 db    0
.eh_frame:000000000001995C                 db  9Ch
.eh_frame:000000000001995D                 db  14h
.eh_frame:000000000001995E                 db    0
.eh_frame:000000000001995F                 db    0
.eh_frame:0000000000019960                 db  30h ; 0
.eh_frame:0000000000019961                 db 0FFh
.eh_frame:0000000000019962                 db 0FEh
.eh_frame:0000000000019963                 db 0FFh
.eh_frame:0000000000019964                 db  8Bh
.eh_frame:0000000000019965                 db    0
.eh_frame:0000000000019966                 db    0
.eh_frame:0000000000019967                 db    0
.eh_frame:0000000000019968                 db    0
.eh_frame:0000000000019969                 db    0
.eh_frame:000000000001996A                 db    0
.eh_frame:000000000001996B                 db    0
.eh_frame:000000000001996C                 db  10h
.eh_frame:000000000001996D                 db    0
.eh_frame:000000000001996E                 db    0
.eh_frame:000000000001996F                 db    0
.eh_frame:0000000000019970                 db 0B0h
.eh_frame:0000000000019971                 db  14h
.eh_frame:0000000000019972                 db    0
.eh_frame:0000000000019973                 db    0
.eh_frame:0000000000019974                 db 0ACh
.eh_frame:0000000000019975                 db 0FFh
.eh_frame:0000000000019976                 db 0FEh
.eh_frame:0000000000019977                 db 0FFh
.eh_frame:0000000000019978                 db  57h ; W
.eh_frame:0000000000019979                 db    0
.eh_frame:000000000001997A                 db    0
.eh_frame:000000000001997B                 db    0
.eh_frame:000000000001997C                 db    0
.eh_frame:000000000001997D                 db    0
.eh_frame:000000000001997E                 db    0
.eh_frame:000000000001997F                 db    0
.eh_frame:0000000000019980                 db  4Ch ; L
.eh_frame:0000000000019981                 db    0
.eh_frame:0000000000019982                 db    0
.eh_frame:0000000000019983                 db    0
.eh_frame:0000000000019984                 db 0C4h
.eh_frame:0000000000019985                 db  14h
.eh_frame:0000000000019986                 db    0
.eh_frame:0000000000019987                 db    0
.eh_frame:0000000000019988                 db 0F8h
.eh_frame:0000000000019989                 db 0FFh
.eh_frame:000000000001998A                 db 0FEh
.eh_frame:000000000001998B                 db 0FFh
.eh_frame:000000000001998C                 db  69h ; i
.eh_frame:000000000001998D                 db    2
.eh_frame:000000000001998E                 db    0
.eh_frame:000000000001998F                 db    0
.eh_frame:0000000000019990                 db    0
.eh_frame:0000000000019991                 db  42h ; B
.eh_frame:0000000000019992                 db  0Eh
.eh_frame:0000000000019993                 db  10h
.eh_frame:0000000000019994                 db  8Fh
.eh_frame:0000000000019995                 db    2
.eh_frame:0000000000019996                 db  42h ; B
.eh_frame:0000000000019997                 db  0Eh
.eh_frame:0000000000019998                 db  18h
.eh_frame:0000000000019999                 db  8Eh
.eh_frame:000000000001999A                 db    3
.eh_frame:000000000001999B                 db  42h ; B
.eh_frame:000000000001999C                 db  0Eh
.eh_frame:000000000001999D                 db  20h
.eh_frame:000000000001999E                 db  8Dh
.eh_frame:000000000001999F                 db    4
.eh_frame:00000000000199A0                 db  42h ; B
.eh_frame:00000000000199A1                 db  0Eh
.eh_frame:00000000000199A2                 db  28h ; (
.eh_frame:00000000000199A3                 db  8Ch
.eh_frame:00000000000199A4                 db    5
.eh_frame:00000000000199A5                 db  41h ; A
.eh_frame:00000000000199A6                 db  0Eh
.eh_frame:00000000000199A7                 db  30h ; 0
.eh_frame:00000000000199A8                 db  86h
.eh_frame:00000000000199A9                 db    6
.eh_frame:00000000000199AA                 db  41h ; A
.eh_frame:00000000000199AB                 db  0Eh
.eh_frame:00000000000199AC                 db  38h ; 8
.eh_frame:00000000000199AD                 db  83h
.eh_frame:00000000000199AE                 db    7
.eh_frame:00000000000199AF                 db  46h ; F
.eh_frame:00000000000199B0                 db  0Eh
.eh_frame:00000000000199B1                 db  80h
.eh_frame:00000000000199B2                 db    1
.eh_frame:00000000000199B3                 db    3
.eh_frame:00000000000199B4                 db 0D2h
.eh_frame:00000000000199B5                 db    1
.eh_frame:00000000000199B6                 db  0Ah
.eh_frame:00000000000199B7                 db  0Eh
.eh_frame:00000000000199B8                 db  38h ; 8
.eh_frame:00000000000199B9                 db  41h ; A
.eh_frame:00000000000199BA                 db  0Eh
.eh_frame:00000000000199BB                 db  30h ; 0
.eh_frame:00000000000199BC                 db  41h ; A
.eh_frame:00000000000199BD                 db  0Eh
.eh_frame:00000000000199BE                 db  28h ; (
.eh_frame:00000000000199BF                 db  42h ; B
.eh_frame:00000000000199C0                 db  0Eh
.eh_frame:00000000000199C1                 db  20h
.eh_frame:00000000000199C2                 db  42h ; B
.eh_frame:00000000000199C3                 db  0Eh
.eh_frame:00000000000199C4                 db  18h
.eh_frame:00000000000199C5                 db  42h ; B
.eh_frame:00000000000199C6                 db  0Eh
.eh_frame:00000000000199C7                 db  10h
.eh_frame:00000000000199C8                 db  42h ; B
.eh_frame:00000000000199C9                 db  0Eh
.eh_frame:00000000000199CA                 db    8
.eh_frame:00000000000199CB                 db  44h ; D
.eh_frame:00000000000199CC                 db  0Bh
.eh_frame:00000000000199CD                 db    0
.eh_frame:00000000000199CE                 db    0
.eh_frame:00000000000199CF                 db    0
.eh_frame:00000000000199D0                 db  34h ; 4
.eh_frame:00000000000199D1                 db    0
.eh_frame:00000000000199D2                 db    0
.eh_frame:00000000000199D3                 db    0
.eh_frame:00000000000199D4                 db  14h
.eh_frame:00000000000199D5                 db  15h
.eh_frame:00000000000199D6                 db    0
.eh_frame:00000000000199D7                 db    0
.eh_frame:00000000000199D8                 db  18h
.eh_frame:00000000000199D9                 db    2
.eh_frame:00000000000199DA                 db 0FFh
.eh_frame:00000000000199DB                 db 0FFh
.eh_frame:00000000000199DC                 db 0DEh
.eh_frame:00000000000199DD                 db    1
.eh_frame:00000000000199DE                 db    0
.eh_frame:00000000000199DF                 db    0
.eh_frame:00000000000199E0                 db    0
.eh_frame:00000000000199E1                 db  58h ; X
.eh_frame:00000000000199E2                 db  0Eh
.eh_frame:00000000000199E3                 db  10h
.eh_frame:00000000000199E4                 db  8Ch
.eh_frame:00000000000199E5                 db    2
.eh_frame:00000000000199E6                 db  41h ; A
.eh_frame:00000000000199E7                 db  0Eh
.eh_frame:00000000000199E8                 db  18h
.eh_frame:00000000000199E9                 db  86h
.eh_frame:00000000000199EA                 db    3
.eh_frame:00000000000199EB                 db  44h ; D
.eh_frame:00000000000199EC                 db  0Eh
.eh_frame:00000000000199ED                 db  20h
.eh_frame:00000000000199EE                 db  83h
.eh_frame:00000000000199EF                 db    4
.eh_frame:00000000000199F0                 db    2
.eh_frame:00000000000199F1                 db 0D0h
.eh_frame:00000000000199F2                 db  0Eh
.eh_frame:00000000000199F3                 db  18h
.eh_frame:00000000000199F4                 db  41h ; A
.eh_frame:00000000000199F5                 db  0Eh
.eh_frame:00000000000199F6                 db  10h
.eh_frame:00000000000199F7                 db  42h ; B
.eh_frame:00000000000199F8                 db  0Eh
.eh_frame:00000000000199F9                 db    8
.eh_frame:00000000000199FA                 db  48h ; H
.eh_frame:00000000000199FB                 db 0C3h
.eh_frame:00000000000199FC                 db 0C6h
.eh_frame:00000000000199FD                 db 0CCh
.eh_frame:00000000000199FE                 db  48h ; H
.eh_frame:00000000000199FF                 db  0Eh
.eh_frame:0000000000019A00                 db  20h
.eh_frame:0000000000019A01                 db  83h
.eh_frame:0000000000019A02                 db    4
.eh_frame:0000000000019A03                 db  86h
.eh_frame:0000000000019A04                 db    3
.eh_frame:0000000000019A05                 db  8Ch
.eh_frame:0000000000019A06                 db    2
.eh_frame:0000000000019A07                 db    0
.eh_frame:0000000000019A08                 db  4Ch ; L
.eh_frame:0000000000019A09                 db    0
.eh_frame:0000000000019A0A                 db    0
.eh_frame:0000000000019A0B                 db    0
.eh_frame:0000000000019A0C                 db  4Ch ; L
.eh_frame:0000000000019A0D                 db  15h
.eh_frame:0000000000019A0E                 db    0
.eh_frame:0000000000019A0F                 db    0
.eh_frame:0000000000019A10                 db 0C0h
.eh_frame:0000000000019A11                 db    3
.eh_frame:0000000000019A12                 db 0FFh
.eh_frame:0000000000019A13                 db 0FFh
.eh_frame:0000000000019A14                 db 0AFh
.eh_frame:0000000000019A15                 db    2
.eh_frame:0000000000019A16                 db    0
.eh_frame:0000000000019A17                 db    0
.eh_frame:0000000000019A18                 db    0
.eh_frame:0000000000019A19                 db  42h ; B
.eh_frame:0000000000019A1A                 db  0Eh
.eh_frame:0000000000019A1B                 db  10h
.eh_frame:0000000000019A1C                 db  8Fh
.eh_frame:0000000000019A1D                 db    2
.eh_frame:0000000000019A1E                 db  42h ; B
.eh_frame:0000000000019A1F                 db  0Eh
.eh_frame:0000000000019A20                 db  18h
.eh_frame:0000000000019A21                 db  8Eh
.eh_frame:0000000000019A22                 db    3
.eh_frame:0000000000019A23                 db  45h ; E
.eh_frame:0000000000019A24                 db  0Eh
.eh_frame:0000000000019A25                 db  20h
.eh_frame:0000000000019A26                 db  8Dh
.eh_frame:0000000000019A27                 db    4
.eh_frame:0000000000019A28                 db  42h ; B
.eh_frame:0000000000019A29                 db  0Eh
.eh_frame:0000000000019A2A                 db  28h ; (
.eh_frame:0000000000019A2B                 db  8Ch
.eh_frame:0000000000019A2C                 db    5
.eh_frame:0000000000019A2D                 db  41h ; A
.eh_frame:0000000000019A2E                 db  0Eh
.eh_frame:0000000000019A2F                 db  30h ; 0
.eh_frame:0000000000019A30                 db  86h
.eh_frame:0000000000019A31                 db    6
.eh_frame:0000000000019A32                 db  41h ; A
.eh_frame:0000000000019A33                 db  0Eh
.eh_frame:0000000000019A34                 db  38h ; 8
.eh_frame:0000000000019A35                 db  83h
.eh_frame:0000000000019A36                 db    7
.eh_frame:0000000000019A37                 db  4Bh ; K
.eh_frame:0000000000019A38                 db  0Eh
.eh_frame:0000000000019A39                 db 0A0h
.eh_frame:0000000000019A3A                 db    1
.eh_frame:0000000000019A3B                 db    3
.eh_frame:0000000000019A3C                 db 0A6h
.eh_frame:0000000000019A3D                 db    1
.eh_frame:0000000000019A3E                 db  0Ah
.eh_frame:0000000000019A3F                 db  0Eh
.eh_frame:0000000000019A40                 db  38h ; 8
.eh_frame:0000000000019A41                 db  41h ; A
.eh_frame:0000000000019A42                 db  0Eh
.eh_frame:0000000000019A43                 db  30h ; 0
.eh_frame:0000000000019A44                 db  41h ; A
.eh_frame:0000000000019A45                 db  0Eh
.eh_frame:0000000000019A46                 db  28h ; (
.eh_frame:0000000000019A47                 db  42h ; B
.eh_frame:0000000000019A48                 db  0Eh
.eh_frame:0000000000019A49                 db  20h
.eh_frame:0000000000019A4A                 db  42h ; B
.eh_frame:0000000000019A4B                 db  0Eh
.eh_frame:0000000000019A4C                 db  18h
.eh_frame:0000000000019A4D                 db  42h ; B
.eh_frame:0000000000019A4E                 db  0Eh
.eh_frame:0000000000019A4F                 db  10h
.eh_frame:0000000000019A50                 db  42h ; B
.eh_frame:0000000000019A51                 db  0Eh
.eh_frame:0000000000019A52                 db    8
.eh_frame:0000000000019A53                 db  48h ; H
.eh_frame:0000000000019A54                 db  0Bh
.eh_frame:0000000000019A55                 db    0
.eh_frame:0000000000019A56                 db    0
.eh_frame:0000000000019A57                 db    0
.eh_frame:0000000000019A58                 db  48h ; H
.eh_frame:0000000000019A59                 db    0
.eh_frame:0000000000019A5A                 db    0
.eh_frame:0000000000019A5B                 db    0
.eh_frame:0000000000019A5C                 db  9Ch
.eh_frame:0000000000019A5D                 db  15h
.eh_frame:0000000000019A5E                 db    0
.eh_frame:0000000000019A5F                 db    0
.eh_frame:0000000000019A60                 db  20h
.eh_frame:0000000000019A61                 db    6
.eh_frame:0000000000019A62                 db 0FFh
.eh_frame:0000000000019A63                 db 0FFh
.eh_frame:0000000000019A64                 db  59h ; Y
.eh_frame:0000000000019A65                 db    1
.eh_frame:0000000000019A66                 db    0
.eh_frame:0000000000019A67                 db    0
.eh_frame:0000000000019A68                 db    0
.eh_frame:0000000000019A69                 db  42h ; B
.eh_frame:0000000000019A6A                 db  0Eh
.eh_frame:0000000000019A6B                 db  10h
.eh_frame:0000000000019A6C                 db  8Fh
.eh_frame:0000000000019A6D                 db    2
.eh_frame:0000000000019A6E                 db  42h ; B
.eh_frame:0000000000019A6F                 db  0Eh
.eh_frame:0000000000019A70                 db  18h
.eh_frame:0000000000019A71                 db  8Eh
.eh_frame:0000000000019A72                 db    3
.eh_frame:0000000000019A73                 db  45h ; E
.eh_frame:0000000000019A74                 db  0Eh
.eh_frame:0000000000019A75                 db  20h
.eh_frame:0000000000019A76                 db  8Dh
.eh_frame:0000000000019A77                 db    4
.eh_frame:0000000000019A78                 db  42h ; B
.eh_frame:0000000000019A79                 db  0Eh
.eh_frame:0000000000019A7A                 db  28h ; (
.eh_frame:0000000000019A7B                 db  8Ch
.eh_frame:0000000000019A7C                 db    5
.eh_frame:0000000000019A7D                 db  44h ; D
.eh_frame:0000000000019A7E                 db  0Eh
.eh_frame:0000000000019A7F                 db  30h ; 0
.eh_frame:0000000000019A80                 db  86h
.eh_frame:0000000000019A81                 db    6
.eh_frame:0000000000019A82                 db  41h ; A
.eh_frame:0000000000019A83                 db  0Eh
.eh_frame:0000000000019A84                 db  38h ; 8
.eh_frame:0000000000019A85                 db  83h
.eh_frame:0000000000019A86                 db    7
.eh_frame:0000000000019A87                 db  49h ; I
.eh_frame:0000000000019A88                 db  0Eh
.eh_frame:0000000000019A89                 db  70h ; p
.eh_frame:0000000000019A8A                 db    3
.eh_frame:0000000000019A8B                 db  29h ; )
.eh_frame:0000000000019A8C                 db    1
.eh_frame:0000000000019A8D                 db  0Ah
.eh_frame:0000000000019A8E                 db  0Eh
.eh_frame:0000000000019A8F                 db  38h ; 8
.eh_frame:0000000000019A90                 db  41h ; A
.eh_frame:0000000000019A91                 db  0Eh
.eh_frame:0000000000019A92                 db  30h ; 0
.eh_frame:0000000000019A93                 db  41h ; A
.eh_frame:0000000000019A94                 db  0Eh
.eh_frame:0000000000019A95                 db  28h ; (
.eh_frame:0000000000019A96                 db  42h ; B
.eh_frame:0000000000019A97                 db  0Eh
.eh_frame:0000000000019A98                 db  20h
.eh_frame:0000000000019A99                 db  42h ; B
.eh_frame:0000000000019A9A                 db  0Eh
.eh_frame:0000000000019A9B                 db  18h
.eh_frame:0000000000019A9C                 db  42h ; B
.eh_frame:0000000000019A9D                 db  0Eh
.eh_frame:0000000000019A9E                 db  10h
.eh_frame:0000000000019A9F                 db  42h ; B
.eh_frame:0000000000019AA0                 db  0Eh
.eh_frame:0000000000019AA1                 db    8
.eh_frame:0000000000019AA2                 db  41h ; A
.eh_frame:0000000000019AA3                 db  0Bh
.eh_frame:0000000000019AA4                 db  4Ch ; L
.eh_frame:0000000000019AA5                 db    0
.eh_frame:0000000000019AA6                 db    0
.eh_frame:0000000000019AA7                 db    0
.eh_frame:0000000000019AA8                 db 0E8h
.eh_frame:0000000000019AA9                 db  15h
.eh_frame:0000000000019AAA                 db    0
.eh_frame:0000000000019AAB                 db    0
.eh_frame:0000000000019AAC                 db  34h ; 4
.eh_frame:0000000000019AAD                 db    7
.eh_frame:0000000000019AAE                 db 0FFh
.eh_frame:0000000000019AAF                 db 0FFh
.eh_frame:0000000000019AB0                 db 0A8h
.eh_frame:0000000000019AB1                 db    1
.eh_frame:0000000000019AB2                 db    0
.eh_frame:0000000000019AB3                 db    0
.eh_frame:0000000000019AB4                 db    0
.eh_frame:0000000000019AB5                 db  5Eh ; ^
.eh_frame:0000000000019AB6                 db  0Eh
.eh_frame:0000000000019AB7                 db  10h
.eh_frame:0000000000019AB8                 db  8Dh
.eh_frame:0000000000019AB9                 db    2
.eh_frame:0000000000019ABA                 db  42h ; B
.eh_frame:0000000000019ABB                 db  0Eh
.eh_frame:0000000000019ABC                 db  18h
.eh_frame:0000000000019ABD                 db  8Ch
.eh_frame:0000000000019ABE                 db    3
.eh_frame:0000000000019ABF                 db  45h ; E
.eh_frame:0000000000019AC0                 db  0Eh
.eh_frame:0000000000019AC1                 db  20h
.eh_frame:0000000000019AC2                 db  86h
.eh_frame:0000000000019AC3                 db    4
.eh_frame:0000000000019AC4                 db  41h ; A
.eh_frame:0000000000019AC5                 db  0Eh
.eh_frame:0000000000019AC6                 db  28h ; (
.eh_frame:0000000000019AC7                 db  83h
.eh_frame:0000000000019AC8                 db    5
.eh_frame:0000000000019AC9                 db  4Dh ; M
.eh_frame:0000000000019ACA                 db  0Eh
.eh_frame:0000000000019ACB                 db  30h ; 0
.eh_frame:0000000000019ACC                 db    2
.eh_frame:0000000000019ACD                 db  95h
.eh_frame:0000000000019ACE                 db  0Eh
.eh_frame:0000000000019ACF                 db    8
.eh_frame:0000000000019AD0                 db 0C3h
.eh_frame:0000000000019AD1                 db 0C6h
.eh_frame:0000000000019AD2                 db 0CCh
.eh_frame:0000000000019AD3                 db 0CDh
.eh_frame:0000000000019AD4                 db  48h ; H
.eh_frame:0000000000019AD5                 db  0Eh
.eh_frame:0000000000019AD6                 db  30h ; 0
.eh_frame:0000000000019AD7                 db  83h
.eh_frame:0000000000019AD8                 db    5
.eh_frame:0000000000019AD9                 db  86h
.eh_frame:0000000000019ADA                 db    4
.eh_frame:0000000000019ADB                 db  8Ch
.eh_frame:0000000000019ADC                 db    3
.eh_frame:0000000000019ADD                 db  8Dh
.eh_frame:0000000000019ADE                 db    2
.eh_frame:0000000000019ADF                 db    2
.eh_frame:0000000000019AE0                 db  90h
.eh_frame:0000000000019AE1                 db  0Ah
.eh_frame:0000000000019AE2                 db  0Eh
.eh_frame:0000000000019AE3                 db  28h ; (
.eh_frame:0000000000019AE4                 db  41h ; A
.eh_frame:0000000000019AE5                 db  0Eh
.eh_frame:0000000000019AE6                 db  20h
.eh_frame:0000000000019AE7                 db  41h ; A
.eh_frame:0000000000019AE8                 db  0Eh
.eh_frame:0000000000019AE9                 db  18h
.eh_frame:0000000000019AEA                 db  42h ; B
.eh_frame:0000000000019AEB                 db  0Eh
.eh_frame:0000000000019AEC                 db  10h
.eh_frame:0000000000019AED                 db  42h ; B
.eh_frame:0000000000019AEE                 db  0Eh
.eh_frame:0000000000019AEF                 db    8
.eh_frame:0000000000019AF0                 db  4Ah ; J
.eh_frame:0000000000019AF1                 db  0Bh
.eh_frame:0000000000019AF2                 db    0
.eh_frame:0000000000019AF3                 db    0
.eh_frame:0000000000019AF4                 db  20h
.eh_frame:0000000000019AF5                 db    0
.eh_frame:0000000000019AF6                 db    0
.eh_frame:0000000000019AF7                 db    0
.eh_frame:0000000000019AF8                 db  38h ; 8
.eh_frame:0000000000019AF9                 db  16h
.eh_frame:0000000000019AFA                 db    0
.eh_frame:0000000000019AFB                 db    0
.eh_frame:0000000000019AFC                 db  94h
.eh_frame:0000000000019AFD                 db    8
.eh_frame:0000000000019AFE                 db 0FFh
.eh_frame:0000000000019AFF                 db 0FFh
.eh_frame:0000000000019B00                 db 0E0h
.eh_frame:0000000000019B01                 db    0
.eh_frame:0000000000019B02                 db    0
.eh_frame:0000000000019B03                 db    0
.eh_frame:0000000000019B04                 db    0
.eh_frame:0000000000019B05                 db  41h ; A
.eh_frame:0000000000019B06                 db  0Eh
.eh_frame:0000000000019B07                 db  10h
.eh_frame:0000000000019B08                 db  83h
.eh_frame:0000000000019B09                 db    2
.eh_frame:0000000000019B0A                 db  47h ; G
.eh_frame:0000000000019B0B                 db  0Eh
.eh_frame:0000000000019B0C                 db  30h ; 0
.eh_frame:0000000000019B0D                 db    2
.eh_frame:0000000000019B0E                 db  77h ; w
.eh_frame:0000000000019B0F                 db  0Ah
.eh_frame:0000000000019B10                 db  0Eh
.eh_frame:0000000000019B11                 db  10h
.eh_frame:0000000000019B12                 db  41h ; A
.eh_frame:0000000000019B13                 db  0Eh
.eh_frame:0000000000019B14                 db    8
.eh_frame:0000000000019B15                 db  48h ; H
.eh_frame:0000000000019B16                 db  0Bh
.eh_frame:0000000000019B17                 db    0
.eh_frame:0000000000019B18                 db  40h ; @
.eh_frame:0000000000019B19                 db    0
.eh_frame:0000000000019B1A                 db    0
.eh_frame:0000000000019B1B                 db    0
.eh_frame:0000000000019B1C                 db  5Ch ; \
.eh_frame:0000000000019B1D                 db  16h
.eh_frame:0000000000019B1E                 db    0
.eh_frame:0000000000019B1F                 db    0
.eh_frame:0000000000019B20                 db  50h ; P
.eh_frame:0000000000019B21                 db    9
.eh_frame:0000000000019B22                 db 0FFh
.eh_frame:0000000000019B23                 db 0FFh
.eh_frame:0000000000019B24                 db 0D1h
.eh_frame:0000000000019B25                 db    0
.eh_frame:0000000000019B26                 db    0
.eh_frame:0000000000019B27                 db    0
.eh_frame:0000000000019B28                 db    0
.eh_frame:0000000000019B29                 db  42h ; B
.eh_frame:0000000000019B2A                 db  0Eh
.eh_frame:0000000000019B2B                 db  10h
.eh_frame:0000000000019B2C                 db  8Eh
.eh_frame:0000000000019B2D                 db    2
.eh_frame:0000000000019B2E                 db  42h ; B
.eh_frame:0000000000019B2F                 db  0Eh
.eh_frame:0000000000019B30                 db  18h
.eh_frame:0000000000019B31                 db  8Dh
.eh_frame:0000000000019B32                 db    3
.eh_frame:0000000000019B33                 db  46h ; F
.eh_frame:0000000000019B34                 db  0Eh
.eh_frame:0000000000019B35                 db  20h
.eh_frame:0000000000019B36                 db  8Ch
.eh_frame:0000000000019B37                 db    4
.eh_frame:0000000000019B38                 db  41h ; A
.eh_frame:0000000000019B39                 db  0Eh
.eh_frame:0000000000019B3A                 db  28h ; (
.eh_frame:0000000000019B3B                 db  86h
.eh_frame:0000000000019B3C                 db    5
.eh_frame:0000000000019B3D                 db  48h ; H
.eh_frame:0000000000019B3E                 db  0Eh
.eh_frame:0000000000019B3F                 db  30h ; 0
.eh_frame:0000000000019B40                 db  83h
.eh_frame:0000000000019B41                 db    6
.eh_frame:0000000000019B42                 db  47h ; G
.eh_frame:0000000000019B43                 db  0Eh
.eh_frame:0000000000019B44                 db  40h ; @
.eh_frame:0000000000019B45                 db    2
.eh_frame:0000000000019B46                 db  96h
.eh_frame:0000000000019B47                 db  0Ah
.eh_frame:0000000000019B48                 db  0Eh
.eh_frame:0000000000019B49                 db  30h ; 0
.eh_frame:0000000000019B4A                 db  41h ; A
.eh_frame:0000000000019B4B                 db  0Eh
.eh_frame:0000000000019B4C                 db  28h ; (
.eh_frame:0000000000019B4D                 db  41h ; A
.eh_frame:0000000000019B4E                 db  0Eh
.eh_frame:0000000000019B4F                 db  20h
.eh_frame:0000000000019B50                 db  42h ; B
.eh_frame:0000000000019B51                 db  0Eh
.eh_frame:0000000000019B52                 db  18h
.eh_frame:0000000000019B53                 db  42h ; B
.eh_frame:0000000000019B54                 db  0Eh
.eh_frame:0000000000019B55                 db  10h
.eh_frame:0000000000019B56                 db  42h ; B
.eh_frame:0000000000019B57                 db  0Eh
.eh_frame:0000000000019B58                 db    8
.eh_frame:0000000000019B59                 db  48h ; H
.eh_frame:0000000000019B5A                 db  0Bh
.eh_frame:0000000000019B5B                 db    0
.eh_frame:0000000000019B5C                 db  4Ch ; L
.eh_frame:0000000000019B5D                 db    0
.eh_frame:0000000000019B5E                 db    0
.eh_frame:0000000000019B5F                 db    0
.eh_frame:0000000000019B60                 db 0A0h
.eh_frame:0000000000019B61                 db  16h
.eh_frame:0000000000019B62                 db    0
.eh_frame:0000000000019B63                 db    0
.eh_frame:0000000000019B64                 db 0ECh
.eh_frame:0000000000019B65                 db    9
.eh_frame:0000000000019B66                 db 0FFh
.eh_frame:0000000000019B67                 db 0FFh
.eh_frame:0000000000019B68                 db  37h ; 7
.eh_frame:0000000000019B69                 db    2
.eh_frame:0000000000019B6A                 db    0
.eh_frame:0000000000019B6B                 db    0
.eh_frame:0000000000019B6C                 db    0
.eh_frame:0000000000019B6D                 db  42h ; B
.eh_frame:0000000000019B6E                 db  0Eh
.eh_frame:0000000000019B6F                 db  10h
.eh_frame:0000000000019B70                 db  8Fh
.eh_frame:0000000000019B71                 db    2
.eh_frame:0000000000019B72                 db  42h ; B
.eh_frame:0000000000019B73                 db  0Eh
.eh_frame:0000000000019B74                 db  18h
.eh_frame:0000000000019B75                 db  8Eh
.eh_frame:0000000000019B76                 db    3
.eh_frame:0000000000019B77                 db  42h ; B
.eh_frame:0000000000019B78                 db  0Eh
.eh_frame:0000000000019B79                 db  20h
.eh_frame:0000000000019B7A                 db  8Dh
.eh_frame:0000000000019B7B                 db    4
.eh_frame:0000000000019B7C                 db  42h ; B
.eh_frame:0000000000019B7D                 db  0Eh
.eh_frame:0000000000019B7E                 db  28h ; (
.eh_frame:0000000000019B7F                 db  8Ch
.eh_frame:0000000000019B80                 db    5
.eh_frame:0000000000019B81                 db  44h ; D
.eh_frame:0000000000019B82                 db  0Eh
.eh_frame:0000000000019B83                 db  30h ; 0
.eh_frame:0000000000019B84                 db  86h
.eh_frame:0000000000019B85                 db    6
.eh_frame:0000000000019B86                 db  41h ; A
.eh_frame:0000000000019B87                 db  0Eh
.eh_frame:0000000000019B88                 db  38h ; 8
.eh_frame:0000000000019B89                 db  83h
.eh_frame:0000000000019B8A                 db    7
.eh_frame:0000000000019B8B                 db  44h ; D
.eh_frame:0000000000019B8C                 db  0Eh
.eh_frame:0000000000019B8D                 db  80h
.eh_frame:0000000000019B8E                 db    1
.eh_frame:0000000000019B8F                 db    3
.eh_frame:0000000000019B90                 db  87h
.eh_frame:0000000000019B91                 db    1
.eh_frame:0000000000019B92                 db  0Ah
.eh_frame:0000000000019B93                 db  0Eh
.eh_frame:0000000000019B94                 db  38h ; 8
.eh_frame:0000000000019B95                 db  41h ; A
.eh_frame:0000000000019B96                 db  0Eh
.eh_frame:0000000000019B97                 db  30h ; 0
.eh_frame:0000000000019B98                 db  41h ; A
.eh_frame:0000000000019B99                 db  0Eh
.eh_frame:0000000000019B9A                 db  28h ; (
.eh_frame:0000000000019B9B                 db  42h ; B
.eh_frame:0000000000019B9C                 db  0Eh
.eh_frame:0000000000019B9D                 db  20h
.eh_frame:0000000000019B9E                 db  42h ; B
.eh_frame:0000000000019B9F                 db  0Eh
.eh_frame:0000000000019BA0                 db  18h
.eh_frame:0000000000019BA1                 db  42h ; B
.eh_frame:0000000000019BA2                 db  0Eh
.eh_frame:0000000000019BA3                 db  10h
.eh_frame:0000000000019BA4                 db  42h ; B
.eh_frame:0000000000019BA5                 db  0Eh
.eh_frame:0000000000019BA6                 db    8
.eh_frame:0000000000019BA7                 db  46h ; F
.eh_frame:0000000000019BA8                 db  0Bh
.eh_frame:0000000000019BA9                 db    0
.eh_frame:0000000000019BAA                 db    0
.eh_frame:0000000000019BAB                 db    0
.eh_frame:0000000000019BAC                 db  28h ; (
.eh_frame:0000000000019BAD                 db    0
.eh_frame:0000000000019BAE                 db    0
.eh_frame:0000000000019BAF                 db    0
.eh_frame:0000000000019BB0                 db 0F0h
.eh_frame:0000000000019BB1                 db  16h
.eh_frame:0000000000019BB2                 db    0
.eh_frame:0000000000019BB3                 db    0
.eh_frame:0000000000019BB4                 db 0DCh
.eh_frame:0000000000019BB5                 db  0Bh
.eh_frame:0000000000019BB6                 db 0FFh
.eh_frame:0000000000019BB7                 db 0FFh
.eh_frame:0000000000019BB8                 db 0A0h
.eh_frame:0000000000019BB9                 db    0
.eh_frame:0000000000019BBA                 db    0
.eh_frame:0000000000019BBB                 db    0
.eh_frame:0000000000019BBC                 db    0
.eh_frame:0000000000019BBD                 db  41h ; A
.eh_frame:0000000000019BBE                 db  0Eh
.eh_frame:0000000000019BBF                 db  10h
.eh_frame:0000000000019BC0                 db  86h
.eh_frame:0000000000019BC1                 db    2
.eh_frame:0000000000019BC2                 db  41h ; A
.eh_frame:0000000000019BC3                 db  0Eh
.eh_frame:0000000000019BC4                 db  18h
.eh_frame:0000000000019BC5                 db  83h
.eh_frame:0000000000019BC6                 db    3
.eh_frame:0000000000019BC7                 db  4Ah ; J
.eh_frame:0000000000019BC8                 db  0Eh
.eh_frame:0000000000019BC9                 db  30h ; 0
.eh_frame:0000000000019BCA                 db    2
.eh_frame:0000000000019BCB                 db  4Eh ; N
.eh_frame:0000000000019BCC                 db  0Ah
.eh_frame:0000000000019BCD                 db  0Eh
.eh_frame:0000000000019BCE                 db  18h
.eh_frame:0000000000019BCF                 db  41h ; A
.eh_frame:0000000000019BD0                 db  0Eh
.eh_frame:0000000000019BD1                 db  10h
.eh_frame:0000000000019BD2                 db  41h ; A
.eh_frame:0000000000019BD3                 db  0Eh
.eh_frame:0000000000019BD4                 db    8
.eh_frame:0000000000019BD5                 db  44h ; D
.eh_frame:0000000000019BD6                 db  0Bh
.eh_frame:0000000000019BD7                 db    0
.eh_frame:0000000000019BD8                 db  38h ; 8
.eh_frame:0000000000019BD9                 db    0
.eh_frame:0000000000019BDA                 db    0
.eh_frame:0000000000019BDB                 db    0
.eh_frame:0000000000019BDC                 db  1Ch
.eh_frame:0000000000019BDD                 db  17h
.eh_frame:0000000000019BDE                 db    0
.eh_frame:0000000000019BDF                 db    0
.eh_frame:0000000000019BE0                 db  50h ; P
.eh_frame:0000000000019BE1                 db  0Ch
.eh_frame:0000000000019BE2                 db 0FFh
.eh_frame:0000000000019BE3                 db 0FFh
.eh_frame:0000000000019BE4                 db  86h
.eh_frame:0000000000019BE5                 db    0
.eh_frame:0000000000019BE6                 db    0
.eh_frame:0000000000019BE7                 db    0
.eh_frame:0000000000019BE8                 db    0
.eh_frame:0000000000019BE9                 db  42h ; B
.eh_frame:0000000000019BEA                 db  0Eh
.eh_frame:0000000000019BEB                 db  10h
.eh_frame:0000000000019BEC                 db  8Ch
.eh_frame:0000000000019BED                 db    2
.eh_frame:0000000000019BEE                 db  41h ; A
.eh_frame:0000000000019BEF                 db  0Eh
.eh_frame:0000000000019BF0                 db  18h
.eh_frame:0000000000019BF1                 db  86h
.eh_frame:0000000000019BF2                 db    3
.eh_frame:0000000000019BF3                 db  41h ; A
.eh_frame:0000000000019BF4                 db  0Eh
.eh_frame:0000000000019BF5                 db  20h
.eh_frame:0000000000019BF6                 db  83h
.eh_frame:0000000000019BF7                 db    4
.eh_frame:0000000000019BF8                 db    2
.eh_frame:0000000000019BF9                 db  47h ; G
.eh_frame:0000000000019BFA                 db  0Ah
.eh_frame:0000000000019BFB                 db  0Eh
.eh_frame:0000000000019BFC                 db  18h
.eh_frame:0000000000019BFD                 db  41h ; A
.eh_frame:0000000000019BFE                 db  0Eh
.eh_frame:0000000000019BFF                 db  10h
.eh_frame:0000000000019C00                 db  42h ; B
.eh_frame:0000000000019C01                 db  0Eh
.eh_frame:0000000000019C02                 db    8
.eh_frame:0000000000019C03                 db  42h ; B
.eh_frame:0000000000019C04                 db  0Bh
.eh_frame:0000000000019C05                 db  52h ; R
.eh_frame:0000000000019C06                 db  0Ah
.eh_frame:0000000000019C07                 db  0Eh
.eh_frame:0000000000019C08                 db  18h
.eh_frame:0000000000019C09                 db  41h ; A
.eh_frame:0000000000019C0A                 db  0Eh
.eh_frame:0000000000019C0B                 db  10h
.eh_frame:0000000000019C0C                 db  42h ; B
.eh_frame:0000000000019C0D                 db  0Eh
.eh_frame:0000000000019C0E                 db    8
.eh_frame:0000000000019C0F                 db  4Bh ; K
.eh_frame:0000000000019C10                 db  0Bh
.eh_frame:0000000000019C11                 db    0
.eh_frame:0000000000019C12                 db    0
.eh_frame:0000000000019C13                 db    0
.eh_frame:0000000000019C14                 db  60h ; `
.eh_frame:0000000000019C15                 db    0
.eh_frame:0000000000019C16                 db    0
.eh_frame:0000000000019C17                 db    0
.eh_frame:0000000000019C18                 db  58h ; X
.eh_frame:0000000000019C19                 db  17h
.eh_frame:0000000000019C1A                 db    0
.eh_frame:0000000000019C1B                 db    0
.eh_frame:0000000000019C1C                 db 0A4h
.eh_frame:0000000000019C1D                 db  0Ch
.eh_frame:0000000000019C1E                 db 0FFh
.eh_frame:0000000000019C1F                 db 0FFh
.eh_frame:0000000000019C20                 db  52h ; R
.eh_frame:0000000000019C21                 db    1
.eh_frame:0000000000019C22                 db    0
.eh_frame:0000000000019C23                 db    0
.eh_frame:0000000000019C24                 db    0
.eh_frame:0000000000019C25                 db  45h ; E
.eh_frame:0000000000019C26                 db  0Eh
.eh_frame:0000000000019C27                 db  10h
.eh_frame:0000000000019C28                 db  8Eh
.eh_frame:0000000000019C29                 db    2
.eh_frame:0000000000019C2A                 db  42h ; B
.eh_frame:0000000000019C2B                 db  0Eh
.eh_frame:0000000000019C2C                 db  18h
.eh_frame:0000000000019C2D                 db  8Dh
.eh_frame:0000000000019C2E                 db    3
.eh_frame:0000000000019C2F                 db  42h ; B
.eh_frame:0000000000019C30                 db  0Eh
.eh_frame:0000000000019C31                 db  20h
.eh_frame:0000000000019C32                 db  8Ch
.eh_frame:0000000000019C33                 db    4
.eh_frame:0000000000019C34                 db  41h ; A
.eh_frame:0000000000019C35                 db  0Eh
.eh_frame:0000000000019C36                 db  28h ; (
.eh_frame:0000000000019C37                 db  86h
.eh_frame:0000000000019C38                 db    5
.eh_frame:0000000000019C39                 db  41h ; A
.eh_frame:0000000000019C3A                 db  0Eh
.eh_frame:0000000000019C3B                 db  30h ; 0
.eh_frame:0000000000019C3C                 db  83h
.eh_frame:0000000000019C3D                 db    6
.eh_frame:0000000000019C3E                 db    2
.eh_frame:0000000000019C3F                 db 0C8h
.eh_frame:0000000000019C40                 db  0Ah
.eh_frame:0000000000019C41                 db  0Eh
.eh_frame:0000000000019C42                 db  28h ; (
.eh_frame:0000000000019C43                 db  41h ; A
.eh_frame:0000000000019C44                 db  0Eh
.eh_frame:0000000000019C45                 db  20h
.eh_frame:0000000000019C46                 db  42h ; B
.eh_frame:0000000000019C47                 db  0Eh
.eh_frame:0000000000019C48                 db  18h
.eh_frame:0000000000019C49                 db  42h ; B
.eh_frame:0000000000019C4A                 db  0Eh
.eh_frame:0000000000019C4B                 db  10h
.eh_frame:0000000000019C4C                 db  42h ; B
.eh_frame:0000000000019C4D                 db  0Eh
.eh_frame:0000000000019C4E                 db    8
.eh_frame:0000000000019C4F                 db  46h ; F
.eh_frame:0000000000019C50                 db  0Bh
.eh_frame:0000000000019C51                 db  44h ; D
.eh_frame:0000000000019C52                 db  0Ah
.eh_frame:0000000000019C53                 db  0Eh
.eh_frame:0000000000019C54                 db  28h ; (
.eh_frame:0000000000019C55                 db  41h ; A
.eh_frame:0000000000019C56                 db  0Eh
.eh_frame:0000000000019C57                 db  20h
.eh_frame:0000000000019C58                 db  42h ; B
.eh_frame:0000000000019C59                 db  0Eh
.eh_frame:0000000000019C5A                 db  18h
.eh_frame:0000000000019C5B                 db  42h ; B
.eh_frame:0000000000019C5C                 db  0Eh
.eh_frame:0000000000019C5D                 db  10h
.eh_frame:0000000000019C5E                 db  42h ; B
.eh_frame:0000000000019C5F                 db  0Eh
.eh_frame:0000000000019C60                 db    8
.eh_frame:0000000000019C61                 db  45h ; E
.eh_frame:0000000000019C62                 db  0Bh
.eh_frame:0000000000019C63                 db  4Dh ; M
.eh_frame:0000000000019C64                 db  0Ah
.eh_frame:0000000000019C65                 db  0Eh
.eh_frame:0000000000019C66                 db  28h ; (
.eh_frame:0000000000019C67                 db  41h ; A
.eh_frame:0000000000019C68                 db  0Eh
.eh_frame:0000000000019C69                 db  20h
.eh_frame:0000000000019C6A                 db  42h ; B
.eh_frame:0000000000019C6B                 db  0Eh
.eh_frame:0000000000019C6C                 db  18h
.eh_frame:0000000000019C6D                 db  42h ; B
.eh_frame:0000000000019C6E                 db  0Eh
.eh_frame:0000000000019C6F                 db  10h
.eh_frame:0000000000019C70                 db  42h ; B
.eh_frame:0000000000019C71                 db  0Eh
.eh_frame:0000000000019C72                 db    8
.eh_frame:0000000000019C73                 db  44h ; D
.eh_frame:0000000000019C74                 db  0Bh
.eh_frame:0000000000019C75                 db    0
.eh_frame:0000000000019C76                 db    0
.eh_frame:0000000000019C77                 db    0
.eh_frame:0000000000019C78                 db  48h ; H
.eh_frame:0000000000019C79                 db    0
.eh_frame:0000000000019C7A                 db    0
.eh_frame:0000000000019C7B                 db    0
.eh_frame:0000000000019C7C                 db 0BCh
.eh_frame:0000000000019C7D                 db  17h
.eh_frame:0000000000019C7E                 db    0
.eh_frame:0000000000019C7F                 db    0
.eh_frame:0000000000019C80                 db 0A0h
.eh_frame:0000000000019C81                 db  0Dh
.eh_frame:0000000000019C82                 db 0FFh
.eh_frame:0000000000019C83                 db 0FFh
.eh_frame:0000000000019C84                 db 0BAh
.eh_frame:0000000000019C85                 db    2
.eh_frame:0000000000019C86                 db    0
.eh_frame:0000000000019C87                 db    0
.eh_frame:0000000000019C88                 db    0
.eh_frame:0000000000019C89                 db  42h ; B
.eh_frame:0000000000019C8A                 db  0Eh
.eh_frame:0000000000019C8B                 db  10h
.eh_frame:0000000000019C8C                 db  8Fh
.eh_frame:0000000000019C8D                 db    2
.eh_frame:0000000000019C8E                 db  42h ; B
.eh_frame:0000000000019C8F                 db  0Eh
.eh_frame:0000000000019C90                 db  18h
.eh_frame:0000000000019C91                 db  8Eh
.eh_frame:0000000000019C92                 db    3
.eh_frame:0000000000019C93                 db  42h ; B
.eh_frame:0000000000019C94                 db  0Eh
.eh_frame:0000000000019C95                 db  20h
.eh_frame:0000000000019C96                 db  8Dh
.eh_frame:0000000000019C97                 db    4
.eh_frame:0000000000019C98                 db  42h ; B
.eh_frame:0000000000019C99                 db  0Eh
.eh_frame:0000000000019C9A                 db  28h ; (
.eh_frame:0000000000019C9B                 db  8Ch
.eh_frame:0000000000019C9C                 db    5
.eh_frame:0000000000019C9D                 db  41h ; A
.eh_frame:0000000000019C9E                 db  0Eh
.eh_frame:0000000000019C9F                 db  30h ; 0
.eh_frame:0000000000019CA0                 db  86h
.eh_frame:0000000000019CA1                 db    6
.eh_frame:0000000000019CA2                 db  41h ; A
.eh_frame:0000000000019CA3                 db  0Eh
.eh_frame:0000000000019CA4                 db  38h ; 8
.eh_frame:0000000000019CA5                 db  83h
.eh_frame:0000000000019CA6                 db    7
.eh_frame:0000000000019CA7                 db  44h ; D
.eh_frame:0000000000019CA8                 db  0Eh
.eh_frame:0000000000019CA9                 db  60h ; `
.eh_frame:0000000000019CAA                 db    2
.eh_frame:0000000000019CAB                 db 0A2h
.eh_frame:0000000000019CAC                 db  0Ah
.eh_frame:0000000000019CAD                 db  0Eh
.eh_frame:0000000000019CAE                 db  38h ; 8
.eh_frame:0000000000019CAF                 db  44h ; D
.eh_frame:0000000000019CB0                 db  0Eh
.eh_frame:0000000000019CB1                 db  30h ; 0
.eh_frame:0000000000019CB2                 db  41h ; A
.eh_frame:0000000000019CB3                 db  0Eh
.eh_frame:0000000000019CB4                 db  28h ; (
.eh_frame:0000000000019CB5                 db  42h ; B
.eh_frame:0000000000019CB6                 db  0Eh
.eh_frame:0000000000019CB7                 db  20h
.eh_frame:0000000000019CB8                 db  42h ; B
.eh_frame:0000000000019CB9                 db  0Eh
.eh_frame:0000000000019CBA                 db  18h
.eh_frame:0000000000019CBB                 db  42h ; B
.eh_frame:0000000000019CBC                 db  0Eh
.eh_frame:0000000000019CBD                 db  10h
.eh_frame:0000000000019CBE                 db  42h ; B
.eh_frame:0000000000019CBF                 db  0Eh
.eh_frame:0000000000019CC0                 db    8
.eh_frame:0000000000019CC1                 db  43h ; C
.eh_frame:0000000000019CC2                 db  0Bh
.eh_frame:0000000000019CC3                 db    0
.eh_frame:0000000000019CC4                 db  48h ; H
.eh_frame:0000000000019CC5                 db    0
.eh_frame:0000000000019CC6                 db    0
.eh_frame:0000000000019CC7                 db    0
.eh_frame:0000000000019CC8                 db    8
.eh_frame:0000000000019CC9                 db  18h
.eh_frame:0000000000019CCA                 db    0
.eh_frame:0000000000019CCB                 db    0
.eh_frame:0000000000019CCC                 db  14h
.eh_frame:0000000000019CCD                 db  10h
.eh_frame:0000000000019CCE                 db 0FFh
.eh_frame:0000000000019CCF                 db 0FFh
.eh_frame:0000000000019CD0                 db 0FAh
.eh_frame:0000000000019CD1                 db    1
.eh_frame:0000000000019CD2                 db    0
.eh_frame:0000000000019CD3                 db    0
.eh_frame:0000000000019CD4                 db    0
.eh_frame:0000000000019CD5                 db  42h ; B
.eh_frame:0000000000019CD6                 db  0Eh
.eh_frame:0000000000019CD7                 db  10h
.eh_frame:0000000000019CD8                 db  8Fh
.eh_frame:0000000000019CD9                 db    2
.eh_frame:0000000000019CDA                 db  42h ; B
.eh_frame:0000000000019CDB                 db  0Eh
.eh_frame:0000000000019CDC                 db  18h
.eh_frame:0000000000019CDD                 db  8Eh
.eh_frame:0000000000019CDE                 db    3
.eh_frame:0000000000019CDF                 db  42h ; B
.eh_frame:0000000000019CE0                 db  0Eh
.eh_frame:0000000000019CE1                 db  20h
.eh_frame:0000000000019CE2                 db  8Dh
.eh_frame:0000000000019CE3                 db    4
.eh_frame:0000000000019CE4                 db  42h ; B
.eh_frame:0000000000019CE5                 db  0Eh
.eh_frame:0000000000019CE6                 db  28h ; (
.eh_frame:0000000000019CE7                 db  8Ch
.eh_frame:0000000000019CE8                 db    5
.eh_frame:0000000000019CE9                 db  41h ; A
.eh_frame:0000000000019CEA                 db  0Eh
.eh_frame:0000000000019CEB                 db  30h ; 0
.eh_frame:0000000000019CEC                 db  86h
.eh_frame:0000000000019CED                 db    6
.eh_frame:0000000000019CEE                 db  41h ; A
.eh_frame:0000000000019CEF                 db  0Eh
.eh_frame:0000000000019CF0                 db  38h ; 8
.eh_frame:0000000000019CF1                 db  83h
.eh_frame:0000000000019CF2                 db    7
.eh_frame:0000000000019CF3                 db  44h ; D
.eh_frame:0000000000019CF4                 db  0Eh
.eh_frame:0000000000019CF5                 db  40h ; @
.eh_frame:0000000000019CF6                 db    3
.eh_frame:0000000000019CF7                 db  85h
.eh_frame:0000000000019CF8                 db    1
.eh_frame:0000000000019CF9                 db  0Ah
.eh_frame:0000000000019CFA                 db  0Eh
.eh_frame:0000000000019CFB                 db  38h ; 8
.eh_frame:0000000000019CFC                 db  44h ; D
.eh_frame:0000000000019CFD                 db  0Eh
.eh_frame:0000000000019CFE                 db  30h ; 0
.eh_frame:0000000000019CFF                 db  41h ; A
.eh_frame:0000000000019D00                 db  0Eh
.eh_frame:0000000000019D01                 db  28h ; (
.eh_frame:0000000000019D02                 db  42h ; B
.eh_frame:0000000000019D03                 db  0Eh
.eh_frame:0000000000019D04                 db  20h
.eh_frame:0000000000019D05                 db  42h ; B
.eh_frame:0000000000019D06                 db  0Eh
.eh_frame:0000000000019D07                 db  18h
.eh_frame:0000000000019D08                 db  42h ; B
.eh_frame:0000000000019D09                 db  0Eh
.eh_frame:0000000000019D0A                 db  10h
.eh_frame:0000000000019D0B                 db  42h ; B
.eh_frame:0000000000019D0C                 db  0Eh
.eh_frame:0000000000019D0D                 db    8
.eh_frame:0000000000019D0E                 db  48h ; H
.eh_frame:0000000000019D0F                 db  0Bh
.eh_frame:0000000000019D10                 db  48h ; H
.eh_frame:0000000000019D11                 db    0
.eh_frame:0000000000019D12                 db    0
.eh_frame:0000000000019D13                 db    0
.eh_frame:0000000000019D14                 db  54h ; T
.eh_frame:0000000000019D15                 db  18h
.eh_frame:0000000000019D16                 db    0
.eh_frame:0000000000019D17                 db    0
.eh_frame:0000000000019D18                 db 0C8h
.eh_frame:0000000000019D19                 db  11h
.eh_frame:0000000000019D1A                 db 0FFh
.eh_frame:0000000000019D1B                 db 0FFh
.eh_frame:0000000000019D1C                 db 0DCh
.eh_frame:0000000000019D1D                 db    0
.eh_frame:0000000000019D1E                 db    0
.eh_frame:0000000000019D1F                 db    0
.eh_frame:0000000000019D20                 db    0
.eh_frame:0000000000019D21                 db  42h ; B
.eh_frame:0000000000019D22                 db  0Eh
.eh_frame:0000000000019D23                 db  10h
.eh_frame:0000000000019D24                 db  8Fh
.eh_frame:0000000000019D25                 db    2
.eh_frame:0000000000019D26                 db  42h ; B
.eh_frame:0000000000019D27                 db  0Eh
.eh_frame:0000000000019D28                 db  18h
.eh_frame:0000000000019D29                 db  8Eh
.eh_frame:0000000000019D2A                 db    3
.eh_frame:0000000000019D2B                 db  42h ; B
.eh_frame:0000000000019D2C                 db  0Eh
.eh_frame:0000000000019D2D                 db  20h
.eh_frame:0000000000019D2E                 db  8Dh
.eh_frame:0000000000019D2F                 db    4
.eh_frame:0000000000019D30                 db  42h ; B
.eh_frame:0000000000019D31                 db  0Eh
.eh_frame:0000000000019D32                 db  28h ; (
.eh_frame:0000000000019D33                 db  8Ch
.eh_frame:0000000000019D34                 db    5
.eh_frame:0000000000019D35                 db  41h ; A
.eh_frame:0000000000019D36                 db  0Eh
.eh_frame:0000000000019D37                 db  30h ; 0
.eh_frame:0000000000019D38                 db  86h
.eh_frame:0000000000019D39                 db    6
.eh_frame:0000000000019D3A                 db  41h ; A
.eh_frame:0000000000019D3B                 db  0Eh
.eh_frame:0000000000019D3C                 db  38h ; 8
.eh_frame:0000000000019D3D                 db  83h
.eh_frame:0000000000019D3E                 db    7
.eh_frame:0000000000019D3F                 db  44h ; D
.eh_frame:0000000000019D40                 db  0Eh
.eh_frame:0000000000019D41                 db  80h
.eh_frame:0000000000019D42                 db    1
.eh_frame:0000000000019D43                 db    2
.eh_frame:0000000000019D44                 db 0BEh
.eh_frame:0000000000019D45                 db  0Ah
.eh_frame:0000000000019D46                 db  0Eh
.eh_frame:0000000000019D47                 db  38h ; 8
.eh_frame:0000000000019D48                 db  41h ; A
.eh_frame:0000000000019D49                 db  0Eh
.eh_frame:0000000000019D4A                 db  30h ; 0
.eh_frame:0000000000019D4B                 db  41h ; A
.eh_frame:0000000000019D4C                 db  0Eh
.eh_frame:0000000000019D4D                 db  28h ; (
.eh_frame:0000000000019D4E                 db  42h ; B
.eh_frame:0000000000019D4F                 db  0Eh
.eh_frame:0000000000019D50                 db  20h
.eh_frame:0000000000019D51                 db  42h ; B
.eh_frame:0000000000019D52                 db  0Eh
.eh_frame:0000000000019D53                 db  18h
.eh_frame:0000000000019D54                 db  42h ; B
.eh_frame:0000000000019D55                 db  0Eh
.eh_frame:0000000000019D56                 db  10h
.eh_frame:0000000000019D57                 db  42h ; B
.eh_frame:0000000000019D58                 db  0Eh
.eh_frame:0000000000019D59                 db    8
.eh_frame:0000000000019D5A                 db  41h ; A
.eh_frame:0000000000019D5B                 db  0Bh
.eh_frame:0000000000019D5C                 db  48h ; H
.eh_frame:0000000000019D5D                 db    0
.eh_frame:0000000000019D5E                 db    0
.eh_frame:0000000000019D5F                 db    0
.eh_frame:0000000000019D60                 db 0A0h
.eh_frame:0000000000019D61                 db  18h
.eh_frame:0000000000019D62                 db    0
.eh_frame:0000000000019D63                 db    0
.eh_frame:0000000000019D64                 db  5Ch ; \
.eh_frame:0000000000019D65                 db  12h
.eh_frame:0000000000019D66                 db 0FFh
.eh_frame:0000000000019D67                 db 0FFh
.eh_frame:0000000000019D68                 db  9Eh
.eh_frame:0000000000019D69                 db    3
.eh_frame:0000000000019D6A                 db    0
.eh_frame:0000000000019D6B                 db    0
.eh_frame:0000000000019D6C                 db    0
.eh_frame:0000000000019D6D                 db  42h ; B
.eh_frame:0000000000019D6E                 db  0Eh
.eh_frame:0000000000019D6F                 db  10h
.eh_frame:0000000000019D70                 db  8Fh
.eh_frame:0000000000019D71                 db    2
.eh_frame:0000000000019D72                 db  42h ; B
.eh_frame:0000000000019D73                 db  0Eh
.eh_frame:0000000000019D74                 db  18h
.eh_frame:0000000000019D75                 db  8Eh
.eh_frame:0000000000019D76                 db    3
.eh_frame:0000000000019D77                 db  42h ; B
.eh_frame:0000000000019D78                 db  0Eh
.eh_frame:0000000000019D79                 db  20h
.eh_frame:0000000000019D7A                 db  8Dh
.eh_frame:0000000000019D7B                 db    4
.eh_frame:0000000000019D7C                 db  42h ; B
.eh_frame:0000000000019D7D                 db  0Eh
.eh_frame:0000000000019D7E                 db  28h ; (
.eh_frame:0000000000019D7F                 db  8Ch
.eh_frame:0000000000019D80                 db    5
.eh_frame:0000000000019D81                 db  44h ; D
.eh_frame:0000000000019D82                 db  0Eh
.eh_frame:0000000000019D83                 db  30h ; 0
.eh_frame:0000000000019D84                 db  86h
.eh_frame:0000000000019D85                 db    6
.eh_frame:0000000000019D86                 db  41h ; A
.eh_frame:0000000000019D87                 db  0Eh
.eh_frame:0000000000019D88                 db  38h ; 8
.eh_frame:0000000000019D89                 db  83h
.eh_frame:0000000000019D8A                 db    7
.eh_frame:0000000000019D8B                 db  4Ch ; L
.eh_frame:0000000000019D8C                 db  0Eh
.eh_frame:0000000000019D8D                 db 0B0h
.eh_frame:0000000000019D8E                 db    1
.eh_frame:0000000000019D8F                 db    2
.eh_frame:0000000000019D90                 db 0BEh
.eh_frame:0000000000019D91                 db  0Ah
.eh_frame:0000000000019D92                 db  0Eh
.eh_frame:0000000000019D93                 db  38h ; 8
.eh_frame:0000000000019D94                 db  41h ; A
.eh_frame:0000000000019D95                 db  0Eh
.eh_frame:0000000000019D96                 db  30h ; 0
.eh_frame:0000000000019D97                 db  41h ; A
.eh_frame:0000000000019D98                 db  0Eh
.eh_frame:0000000000019D99                 db  28h ; (
.eh_frame:0000000000019D9A                 db  42h ; B
.eh_frame:0000000000019D9B                 db  0Eh
.eh_frame:0000000000019D9C                 db  20h
.eh_frame:0000000000019D9D                 db  42h ; B
.eh_frame:0000000000019D9E                 db  0Eh
.eh_frame:0000000000019D9F                 db  18h
.eh_frame:0000000000019DA0                 db  42h ; B
.eh_frame:0000000000019DA1                 db  0Eh
.eh_frame:0000000000019DA2                 db  10h
.eh_frame:0000000000019DA3                 db  42h ; B
.eh_frame:0000000000019DA4                 db  0Eh
.eh_frame:0000000000019DA5                 db    8
.eh_frame:0000000000019DA6                 db  47h ; G
.eh_frame:0000000000019DA7                 db  0Bh
.eh_frame:0000000000019DA8                 db  48h ; H
.eh_frame:0000000000019DA9                 db    0
.eh_frame:0000000000019DAA                 db    0
.eh_frame:0000000000019DAB                 db    0
.eh_frame:0000000000019DAC                 db 0ECh
.eh_frame:0000000000019DAD                 db  18h
.eh_frame:0000000000019DAE                 db    0
.eh_frame:0000000000019DAF                 db    0
.eh_frame:0000000000019DB0                 db 0B0h
.eh_frame:0000000000019DB1                 db  15h
.eh_frame:0000000000019DB2                 db 0FFh
.eh_frame:0000000000019DB3                 db 0FFh
.eh_frame:0000000000019DB4                 db  41h ; A
.eh_frame:0000000000019DB5                 db    1
.eh_frame:0000000000019DB6                 db    0
.eh_frame:0000000000019DB7                 db    0
.eh_frame:0000000000019DB8                 db    0
.eh_frame:0000000000019DB9                 db  42h ; B
.eh_frame:0000000000019DBA                 db  0Eh
.eh_frame:0000000000019DBB                 db  10h
.eh_frame:0000000000019DBC                 db  8Fh
.eh_frame:0000000000019DBD                 db    2
.eh_frame:0000000000019DBE                 db  42h ; B
.eh_frame:0000000000019DBF                 db  0Eh
.eh_frame:0000000000019DC0                 db  18h
.eh_frame:0000000000019DC1                 db  8Eh
.eh_frame:0000000000019DC2                 db    3
.eh_frame:0000000000019DC3                 db  42h ; B
.eh_frame:0000000000019DC4                 db  0Eh
.eh_frame:0000000000019DC5                 db  20h
.eh_frame:0000000000019DC6                 db  8Dh
.eh_frame:0000000000019DC7                 db    4
.eh_frame:0000000000019DC8                 db  42h ; B
.eh_frame:0000000000019DC9                 db  0Eh
.eh_frame:0000000000019DCA                 db  28h ; (
.eh_frame:0000000000019DCB                 db  8Ch
.eh_frame:0000000000019DCC                 db    5
.eh_frame:0000000000019DCD                 db  41h ; A
.eh_frame:0000000000019DCE                 db  0Eh
.eh_frame:0000000000019DCF                 db  30h ; 0
.eh_frame:0000000000019DD0                 db  86h
.eh_frame:0000000000019DD1                 db    6
.eh_frame:0000000000019DD2                 db  41h ; A
.eh_frame:0000000000019DD3                 db  0Eh
.eh_frame:0000000000019DD4                 db  38h ; 8
.eh_frame:0000000000019DD5                 db  83h
.eh_frame:0000000000019DD6                 db    7
.eh_frame:0000000000019DD7                 db  44h ; D
.eh_frame:0000000000019DD8                 db  0Eh
.eh_frame:0000000000019DD9                 db  60h ; `
.eh_frame:0000000000019DDA                 db    2
.eh_frame:0000000000019DDB                 db 0D8h
.eh_frame:0000000000019DDC                 db  0Ah
.eh_frame:0000000000019DDD                 db  0Eh
.eh_frame:0000000000019DDE                 db  38h ; 8
.eh_frame:0000000000019DDF                 db  41h ; A
.eh_frame:0000000000019DE0                 db  0Eh
.eh_frame:0000000000019DE1                 db  30h ; 0
.eh_frame:0000000000019DE2                 db  41h ; A
.eh_frame:0000000000019DE3                 db  0Eh
.eh_frame:0000000000019DE4                 db  28h ; (
.eh_frame:0000000000019DE5                 db  42h ; B
.eh_frame:0000000000019DE6                 db  0Eh
.eh_frame:0000000000019DE7                 db  20h
.eh_frame:0000000000019DE8                 db  42h ; B
.eh_frame:0000000000019DE9                 db  0Eh
.eh_frame:0000000000019DEA                 db  18h
.eh_frame:0000000000019DEB                 db  42h ; B
.eh_frame:0000000000019DEC                 db  0Eh
.eh_frame:0000000000019DED                 db  10h
.eh_frame:0000000000019DEE                 db  42h ; B
.eh_frame:0000000000019DEF                 db  0Eh
.eh_frame:0000000000019DF0                 db    8
.eh_frame:0000000000019DF1                 db  41h ; A
.eh_frame:0000000000019DF2                 db  0Bh
.eh_frame:0000000000019DF3                 db    0
.eh_frame:0000000000019DF4                 db  40h ; @
.eh_frame:0000000000019DF5                 db    0
.eh_frame:0000000000019DF6                 db    0
.eh_frame:0000000000019DF7                 db    0
.eh_frame:0000000000019DF8                 db  38h ; 8
.eh_frame:0000000000019DF9                 db  19h
.eh_frame:0000000000019DFA                 db    0
.eh_frame:0000000000019DFB                 db    0
.eh_frame:0000000000019DFC                 db 0B4h
.eh_frame:0000000000019DFD                 db  16h
.eh_frame:0000000000019DFE                 db 0FFh
.eh_frame:0000000000019DFF                 db 0FFh
.eh_frame:0000000000019E00                 db 0E6h
.eh_frame:0000000000019E01                 db    0
.eh_frame:0000000000019E02                 db    0
.eh_frame:0000000000019E03                 db    0
.eh_frame:0000000000019E04                 db    0
.eh_frame:0000000000019E05                 db  41h ; A
.eh_frame:0000000000019E06                 db  0Eh
.eh_frame:0000000000019E07                 db  10h
.eh_frame:0000000000019E08                 db  86h
.eh_frame:0000000000019E09                 db    2
.eh_frame:0000000000019E0A                 db  41h ; A
.eh_frame:0000000000019E0B                 db  0Eh
.eh_frame:0000000000019E0C                 db  18h
.eh_frame:0000000000019E0D                 db  83h
.eh_frame:0000000000019E0E                 db    3
.eh_frame:0000000000019E0F                 db  47h ; G
.eh_frame:0000000000019E10                 db  0Eh
.eh_frame:0000000000019E11                 db  20h
.eh_frame:0000000000019E12                 db    2
.eh_frame:0000000000019E13                 db  4Dh ; M
.eh_frame:0000000000019E14                 db  0Ah
.eh_frame:0000000000019E15                 db  0Eh
.eh_frame:0000000000019E16                 db  18h
.eh_frame:0000000000019E17                 db  41h ; A
.eh_frame:0000000000019E18                 db  0Eh
.eh_frame:0000000000019E19                 db  10h
.eh_frame:0000000000019E1A                 db  41h ; A
.eh_frame:0000000000019E1B                 db  0Eh
.eh_frame:0000000000019E1C                 db    8
.eh_frame:0000000000019E1D                 db  48h ; H
.eh_frame:0000000000019E1E                 db  0Bh
.eh_frame:0000000000019E1F                 db  47h ; G
.eh_frame:0000000000019E20                 db  0Ah
.eh_frame:0000000000019E21                 db  0Eh
.eh_frame:0000000000019E22                 db  18h
.eh_frame:0000000000019E23                 db  41h ; A
.eh_frame:0000000000019E24                 db  0Eh
.eh_frame:0000000000019E25                 db  10h
.eh_frame:0000000000019E26                 db  41h ; A
.eh_frame:0000000000019E27                 db  0Eh
.eh_frame:0000000000019E28                 db    8
.eh_frame:0000000000019E29                 db  47h ; G
.eh_frame:0000000000019E2A                 db  0Bh
.eh_frame:0000000000019E2B                 db  7Ch ; |
.eh_frame:0000000000019E2C                 db  0Ah
.eh_frame:0000000000019E2D                 db  0Eh
.eh_frame:0000000000019E2E                 db  18h
.eh_frame:0000000000019E2F                 db  43h ; C
.eh_frame:0000000000019E30                 db  0Eh
.eh_frame:0000000000019E31                 db  10h
.eh_frame:0000000000019E32                 db  41h ; A
.eh_frame:0000000000019E33                 db  0Eh
.eh_frame:0000000000019E34                 db    8
.eh_frame:0000000000019E35                 db  48h ; H
.eh_frame:0000000000019E36                 db  0Bh
.eh_frame:0000000000019E37                 db    0
.eh_frame:0000000000019E38                 db  24h ; $
.eh_frame:0000000000019E39                 db    0
.eh_frame:0000000000019E3A                 db    0
.eh_frame:0000000000019E3B                 db    0
.eh_frame:0000000000019E3C                 db  7Ch ; |
.eh_frame:0000000000019E3D                 db  19h
.eh_frame:0000000000019E3E                 db    0
.eh_frame:0000000000019E3F                 db    0
.eh_frame:0000000000019E40                 db  60h ; `
.eh_frame:0000000000019E41                 db  17h
.eh_frame:0000000000019E42                 db 0FFh
.eh_frame:0000000000019E43                 db 0FFh
.eh_frame:0000000000019E44                 db  10h
.eh_frame:0000000000019E45                 db    1
.eh_frame:0000000000019E46                 db    0
.eh_frame:0000000000019E47                 db    0
.eh_frame:0000000000019E48                 db    0
.eh_frame:0000000000019E49                 db    2
.eh_frame:0000000000019E4A                 db  51h ; Q
.eh_frame:0000000000019E4B                 db  0Eh
.eh_frame:0000000000019E4C                 db  10h
.eh_frame:0000000000019E4D                 db  83h
.eh_frame:0000000000019E4E                 db    2
.eh_frame:0000000000019E4F                 db    2
.eh_frame:0000000000019E50                 db  5Ch ; \
.eh_frame:0000000000019E51                 db  0Eh
.eh_frame:0000000000019E52                 db    8
.eh_frame:0000000000019E53                 db  43h ; C
.eh_frame:0000000000019E54                 db 0C3h
.eh_frame:0000000000019E55                 db  78h ; x
.eh_frame:0000000000019E56                 db  0Eh
.eh_frame:0000000000019E57                 db  10h
.eh_frame:0000000000019E58                 db  83h
.eh_frame:0000000000019E59                 db    2
.eh_frame:0000000000019E5A                 db  4Ch ; L
.eh_frame:0000000000019E5B                 db  0Eh
.eh_frame:0000000000019E5C                 db    8
.eh_frame:0000000000019E5D                 db  44h ; D
.eh_frame:0000000000019E5E                 db 0C3h
.eh_frame:0000000000019E5F                 db    0
.eh_frame:0000000000019E60                 db  34h ; 4
.eh_frame:0000000000019E61                 db    0
.eh_frame:0000000000019E62                 db    0
.eh_frame:0000000000019E63                 db    0
.eh_frame:0000000000019E64                 db 0A4h
.eh_frame:0000000000019E65                 db  19h
.eh_frame:0000000000019E66                 db    0
.eh_frame:0000000000019E67                 db    0
.eh_frame:0000000000019E68                 db  48h ; H
.eh_frame:0000000000019E69                 db  18h
.eh_frame:0000000000019E6A                 db 0FFh
.eh_frame:0000000000019E6B                 db 0FFh
.eh_frame:0000000000019E6C                 db 0CFh
.eh_frame:0000000000019E6D                 db    0
.eh_frame:0000000000019E6E                 db    0
.eh_frame:0000000000019E6F                 db    0
.eh_frame:0000000000019E70                 db    0
.eh_frame:0000000000019E71                 db  42h ; B
.eh_frame:0000000000019E72                 db  0Eh
.eh_frame:0000000000019E73                 db  10h
.eh_frame:0000000000019E74                 db  8Ch
.eh_frame:0000000000019E75                 db    2
.eh_frame:0000000000019E76                 db  44h ; D
.eh_frame:0000000000019E77                 db  0Eh
.eh_frame:0000000000019E78                 db  18h
.eh_frame:0000000000019E79                 db  86h
.eh_frame:0000000000019E7A                 db    3
.eh_frame:0000000000019E7B                 db  41h ; A
.eh_frame:0000000000019E7C                 db  0Eh
.eh_frame:0000000000019E7D                 db  20h
.eh_frame:0000000000019E7E                 db  83h
.eh_frame:0000000000019E7F                 db    4
.eh_frame:0000000000019E80                 db    2
.eh_frame:0000000000019E81                 db  9Fh
.eh_frame:0000000000019E82                 db  0Ah
.eh_frame:0000000000019E83                 db  0Eh
.eh_frame:0000000000019E84                 db  18h
.eh_frame:0000000000019E85                 db  41h ; A
.eh_frame:0000000000019E86                 db  0Eh
.eh_frame:0000000000019E87                 db  10h
.eh_frame:0000000000019E88                 db  42h ; B
.eh_frame:0000000000019E89                 db  0Eh
.eh_frame:0000000000019E8A                 db    8
.eh_frame:0000000000019E8B                 db  47h ; G
.eh_frame:0000000000019E8C                 db  0Bh
.eh_frame:0000000000019E8D                 db  59h ; Y
.eh_frame:0000000000019E8E                 db  0Eh
.eh_frame:0000000000019E8F                 db  18h
.eh_frame:0000000000019E90                 db  43h ; C
.eh_frame:0000000000019E91                 db  0Eh
.eh_frame:0000000000019E92                 db  10h
.eh_frame:0000000000019E93                 db  42h ; B
.eh_frame:0000000000019E94                 db  0Eh
.eh_frame:0000000000019E95                 db    8
.eh_frame:0000000000019E96                 db    0
.eh_frame:0000000000019E97                 db    0
.eh_frame:0000000000019E98                 db  4Ch ; L
.eh_frame:0000000000019E99                 db    0
.eh_frame:0000000000019E9A                 db    0
.eh_frame:0000000000019E9B                 db    0
.eh_frame:0000000000019E9C                 db 0DCh
.eh_frame:0000000000019E9D                 db  19h
.eh_frame:0000000000019E9E                 db    0
.eh_frame:0000000000019E9F                 db    0
.eh_frame:0000000000019EA0                 db 0E0h
.eh_frame:0000000000019EA1                 db  18h
.eh_frame:0000000000019EA2                 db 0FFh
.eh_frame:0000000000019EA3                 db 0FFh
.eh_frame:0000000000019EA4                 db  9Fh
.eh_frame:0000000000019EA5                 db    7
.eh_frame:0000000000019EA6                 db    0
.eh_frame:0000000000019EA7                 db    0
.eh_frame:0000000000019EA8                 db    0
.eh_frame:0000000000019EA9                 db  42h ; B
.eh_frame:0000000000019EAA                 db  0Eh
.eh_frame:0000000000019EAB                 db  10h
.eh_frame:0000000000019EAC                 db  8Fh
.eh_frame:0000000000019EAD                 db    2
.eh_frame:0000000000019EAE                 db  42h ; B
.eh_frame:0000000000019EAF                 db  0Eh
.eh_frame:0000000000019EB0                 db  18h
.eh_frame:0000000000019EB1                 db  8Eh
.eh_frame:0000000000019EB2                 db    3
.eh_frame:0000000000019EB3                 db  45h ; E
.eh_frame:0000000000019EB4                 db  0Eh
.eh_frame:0000000000019EB5                 db  20h
.eh_frame:0000000000019EB6                 db  8Dh
.eh_frame:0000000000019EB7                 db    4
.eh_frame:0000000000019EB8                 db  42h ; B
.eh_frame:0000000000019EB9                 db  0Eh
.eh_frame:0000000000019EBA                 db  28h ; (
.eh_frame:0000000000019EBB                 db  8Ch
.eh_frame:0000000000019EBC                 db    5
.eh_frame:0000000000019EBD                 db  44h ; D
.eh_frame:0000000000019EBE                 db  0Eh
.eh_frame:0000000000019EBF                 db  30h ; 0
.eh_frame:0000000000019EC0                 db  86h
.eh_frame:0000000000019EC1                 db    6
.eh_frame:0000000000019EC2                 db  41h ; A
.eh_frame:0000000000019EC3                 db  0Eh
.eh_frame:0000000000019EC4                 db  38h ; 8
.eh_frame:0000000000019EC5                 db  83h
.eh_frame:0000000000019EC6                 db    7
.eh_frame:0000000000019EC7                 db  4Ah ; J
.eh_frame:0000000000019EC8                 db  0Eh
.eh_frame:0000000000019EC9                 db  80h
.eh_frame:0000000000019ECA                 db    1
.eh_frame:0000000000019ECB                 db    3
.eh_frame:0000000000019ECC                 db  3Bh ; ;
.eh_frame:0000000000019ECD                 db    1
.eh_frame:0000000000019ECE                 db  0Ah
.eh_frame:0000000000019ECF                 db  0Eh
.eh_frame:0000000000019ED0                 db  38h ; 8
.eh_frame:0000000000019ED1                 db  41h ; A
.eh_frame:0000000000019ED2                 db  0Eh
.eh_frame:0000000000019ED3                 db  30h ; 0
.eh_frame:0000000000019ED4                 db  41h ; A
.eh_frame:0000000000019ED5                 db  0Eh
.eh_frame:0000000000019ED6                 db  28h ; (
.eh_frame:0000000000019ED7                 db  42h ; B
.eh_frame:0000000000019ED8                 db  0Eh
.eh_frame:0000000000019ED9                 db  20h
.eh_frame:0000000000019EDA                 db  42h ; B
.eh_frame:0000000000019EDB                 db  0Eh
.eh_frame:0000000000019EDC                 db  18h
.eh_frame:0000000000019EDD                 db  42h ; B
.eh_frame:0000000000019EDE                 db  0Eh
.eh_frame:0000000000019EDF                 db  10h
.eh_frame:0000000000019EE0                 db  42h ; B
.eh_frame:0000000000019EE1                 db  0Eh
.eh_frame:0000000000019EE2                 db    8
.eh_frame:0000000000019EE3                 db  41h ; A
.eh_frame:0000000000019EE4                 db  0Bh
.eh_frame:0000000000019EE5                 db    0
.eh_frame:0000000000019EE6                 db    0
.eh_frame:0000000000019EE7                 db    0
.eh_frame:0000000000019EE8                 db  4Ch ; L
.eh_frame:0000000000019EE9                 db    0
.eh_frame:0000000000019EEA                 db    0
.eh_frame:0000000000019EEB                 db    0
.eh_frame:0000000000019EEC                 db  2Ch ; ,
.eh_frame:0000000000019EED                 db  1Ah
.eh_frame:0000000000019EEE                 db    0
.eh_frame:0000000000019EEF                 db    0
.eh_frame:0000000000019EF0                 db  30h ; 0
.eh_frame:0000000000019EF1                 db  20h
.eh_frame:0000000000019EF2                 db 0FFh
.eh_frame:0000000000019EF3                 db 0FFh
.eh_frame:0000000000019EF4                 db  3Bh ; ;
.eh_frame:0000000000019EF5                 db    2
.eh_frame:0000000000019EF6                 db    0
.eh_frame:0000000000019EF7                 db    0
.eh_frame:0000000000019EF8                 db    0
.eh_frame:0000000000019EF9                 db  42h ; B
.eh_frame:0000000000019EFA                 db  0Eh
.eh_frame:0000000000019EFB                 db  10h
.eh_frame:0000000000019EFC                 db  8Fh
.eh_frame:0000000000019EFD                 db    2
.eh_frame:0000000000019EFE                 db  42h ; B
.eh_frame:0000000000019EFF                 db  0Eh
.eh_frame:0000000000019F00                 db  18h
.eh_frame:0000000000019F01                 db  8Eh
.eh_frame:0000000000019F02                 db    3
.eh_frame:0000000000019F03                 db  45h ; E
.eh_frame:0000000000019F04                 db  0Eh
.eh_frame:0000000000019F05                 db  20h
.eh_frame:0000000000019F06                 db  8Dh
.eh_frame:0000000000019F07                 db    4
.eh_frame:0000000000019F08                 db  42h ; B
.eh_frame:0000000000019F09                 db  0Eh
.eh_frame:0000000000019F0A                 db  28h ; (
.eh_frame:0000000000019F0B                 db  8Ch
.eh_frame:0000000000019F0C                 db    5
.eh_frame:0000000000019F0D                 db  45h ; E
.eh_frame:0000000000019F0E                 db  0Eh
.eh_frame:0000000000019F0F                 db  30h ; 0
.eh_frame:0000000000019F10                 db  86h
.eh_frame:0000000000019F11                 db    6
.eh_frame:0000000000019F12                 db  41h ; A
.eh_frame:0000000000019F13                 db  0Eh
.eh_frame:0000000000019F14                 db  38h ; 8
.eh_frame:0000000000019F15                 db  83h
.eh_frame:0000000000019F16                 db    7
.eh_frame:0000000000019F17                 db  48h ; H
.eh_frame:0000000000019F18                 db  0Eh
.eh_frame:0000000000019F19                 db  80h
.eh_frame:0000000000019F1A                 db    1
.eh_frame:0000000000019F1B                 db    3
.eh_frame:0000000000019F1C                 db 0F3h
.eh_frame:0000000000019F1D                 db    1
.eh_frame:0000000000019F1E                 db  0Ah
.eh_frame:0000000000019F1F                 db  0Eh
.eh_frame:0000000000019F20                 db  38h ; 8
.eh_frame:0000000000019F21                 db  41h ; A
.eh_frame:0000000000019F22                 db  0Eh
.eh_frame:0000000000019F23                 db  30h ; 0
.eh_frame:0000000000019F24                 db  41h ; A
.eh_frame:0000000000019F25                 db  0Eh
.eh_frame:0000000000019F26                 db  28h ; (
.eh_frame:0000000000019F27                 db  42h ; B
.eh_frame:0000000000019F28                 db  0Eh
.eh_frame:0000000000019F29                 db  20h
.eh_frame:0000000000019F2A                 db  42h ; B
.eh_frame:0000000000019F2B                 db  0Eh
.eh_frame:0000000000019F2C                 db  18h
.eh_frame:0000000000019F2D                 db  42h ; B
.eh_frame:0000000000019F2E                 db  0Eh
.eh_frame:0000000000019F2F                 db  10h
.eh_frame:0000000000019F30                 db  42h ; B
.eh_frame:0000000000019F31                 db  0Eh
.eh_frame:0000000000019F32                 db    8
.eh_frame:0000000000019F33                 db  4Ah ; J
.eh_frame:0000000000019F34                 db  0Bh
.eh_frame:0000000000019F35                 db    0
.eh_frame:0000000000019F36                 db    0
.eh_frame:0000000000019F37                 db    0
.eh_frame:0000000000019F38                 db  4Ch ; L
.eh_frame:0000000000019F39                 db    0
.eh_frame:0000000000019F3A                 db    0
.eh_frame:0000000000019F3B                 db    0
.eh_frame:0000000000019F3C                 db  7Ch ; |
.eh_frame:0000000000019F3D                 db  1Ah
.eh_frame:0000000000019F3E                 db    0
.eh_frame:0000000000019F3F                 db    0
.eh_frame:0000000000019F40                 db  20h
.eh_frame:0000000000019F41                 db  22h ; "
.eh_frame:0000000000019F42                 db 0FFh
.eh_frame:0000000000019F43                 db 0FFh
.eh_frame:0000000000019F44                 db  91h
.eh_frame:0000000000019F45                 db  0Bh
.eh_frame:0000000000019F46                 db    0
.eh_frame:0000000000019F47                 db    0
.eh_frame:0000000000019F48                 db    0
.eh_frame:0000000000019F49                 db  42h ; B
.eh_frame:0000000000019F4A                 db  0Eh
.eh_frame:0000000000019F4B                 db  10h
.eh_frame:0000000000019F4C                 db  8Fh
.eh_frame:0000000000019F4D                 db    2
.eh_frame:0000000000019F4E                 db  42h ; B
.eh_frame:0000000000019F4F                 db  0Eh
.eh_frame:0000000000019F50                 db  18h
.eh_frame:0000000000019F51                 db  8Eh
.eh_frame:0000000000019F52                 db    3
.eh_frame:0000000000019F53                 db  45h ; E
.eh_frame:0000000000019F54                 db  0Eh
.eh_frame:0000000000019F55                 db  20h
.eh_frame:0000000000019F56                 db  8Dh
.eh_frame:0000000000019F57                 db    4
.eh_frame:0000000000019F58                 db  42h ; B
.eh_frame:0000000000019F59                 db  0Eh
.eh_frame:0000000000019F5A                 db  28h ; (
.eh_frame:0000000000019F5B                 db  8Ch
.eh_frame:0000000000019F5C                 db    5
.eh_frame:0000000000019F5D                 db  46h ; F
.eh_frame:0000000000019F5E                 db  0Eh
.eh_frame:0000000000019F5F                 db  30h ; 0
.eh_frame:0000000000019F60                 db  86h
.eh_frame:0000000000019F61                 db    6
.eh_frame:0000000000019F62                 db  41h ; A
.eh_frame:0000000000019F63                 db  0Eh
.eh_frame:0000000000019F64                 db  38h ; 8
.eh_frame:0000000000019F65                 db  83h
.eh_frame:0000000000019F66                 db    7
.eh_frame:0000000000019F67                 db  47h ; G
.eh_frame:0000000000019F68                 db  0Eh
.eh_frame:0000000000019F69                 db 0C0h
.eh_frame:0000000000019F6A                 db    2
.eh_frame:0000000000019F6B                 db    3
.eh_frame:0000000000019F6C                 db  17h
.eh_frame:0000000000019F6D                 db    4
.eh_frame:0000000000019F6E                 db  0Ah
.eh_frame:0000000000019F6F                 db  0Eh
.eh_frame:0000000000019F70                 db  38h ; 8
.eh_frame:0000000000019F71                 db  41h ; A
.eh_frame:0000000000019F72                 db  0Eh
.eh_frame:0000000000019F73                 db  30h ; 0
.eh_frame:0000000000019F74                 db  41h ; A
.eh_frame:0000000000019F75                 db  0Eh
.eh_frame:0000000000019F76                 db  28h ; (
.eh_frame:0000000000019F77                 db  42h ; B
.eh_frame:0000000000019F78                 db  0Eh
.eh_frame:0000000000019F79                 db  20h
.eh_frame:0000000000019F7A                 db  42h ; B
.eh_frame:0000000000019F7B                 db  0Eh
.eh_frame:0000000000019F7C                 db  18h
.eh_frame:0000000000019F7D                 db  42h ; B
.eh_frame:0000000000019F7E                 db  0Eh
.eh_frame:0000000000019F7F                 db  10h
.eh_frame:0000000000019F80                 db  42h ; B
.eh_frame:0000000000019F81                 db  0Eh
.eh_frame:0000000000019F82                 db    8
.eh_frame:0000000000019F83                 db  46h ; F
.eh_frame:0000000000019F84                 db  0Bh
.eh_frame:0000000000019F85                 db    0
.eh_frame:0000000000019F86                 db    0
.eh_frame:0000000000019F87                 db    0
.eh_frame:0000000000019F88                 db  30h ; 0
.eh_frame:0000000000019F89                 db    0
.eh_frame:0000000000019F8A                 db    0
.eh_frame:0000000000019F8B                 db    0
.eh_frame:0000000000019F8C                 db 0CCh
.eh_frame:0000000000019F8D                 db  1Ah
.eh_frame:0000000000019F8E                 db    0
.eh_frame:0000000000019F8F                 db    0
.eh_frame:0000000000019F90                 db  70h ; p
.eh_frame:0000000000019F91                 db  2Dh ; -
.eh_frame:0000000000019F92                 db 0FFh
.eh_frame:0000000000019F93                 db 0FFh
.eh_frame:0000000000019F94                 db  87h
.eh_frame:0000000000019F95                 db    0
.eh_frame:0000000000019F96                 db    0
.eh_frame:0000000000019F97                 db    0
.eh_frame:0000000000019F98                 db    0
.eh_frame:0000000000019F99                 db  47h ; G
.eh_frame:0000000000019F9A                 db  0Eh
.eh_frame:0000000000019F9B                 db  10h
.eh_frame:0000000000019F9C                 db  86h
.eh_frame:0000000000019F9D                 db    2
.eh_frame:0000000000019F9E                 db  41h ; A
.eh_frame:0000000000019F9F                 db  0Eh
.eh_frame:0000000000019FA0                 db  18h
.eh_frame:0000000000019FA1                 db  83h
.eh_frame:0000000000019FA2                 db    3
.eh_frame:0000000000019FA3                 db  4Ah ; J
.eh_frame:0000000000019FA4                 db  0Eh
.eh_frame:0000000000019FA5                 db  20h
.eh_frame:0000000000019FA6                 db    2
.eh_frame:0000000000019FA7                 db  4Eh ; N
.eh_frame:0000000000019FA8                 db  0Eh
.eh_frame:0000000000019FA9                 db  18h
.eh_frame:0000000000019FAA                 db  41h ; A
.eh_frame:0000000000019FAB                 db  0Eh
.eh_frame:0000000000019FAC                 db  10h
.eh_frame:0000000000019FAD                 db  41h ; A
.eh_frame:0000000000019FAE                 db  0Eh
.eh_frame:0000000000019FAF                 db    8
.eh_frame:0000000000019FB0                 db  46h ; F
.eh_frame:0000000000019FB1                 db 0C3h
.eh_frame:0000000000019FB2                 db 0C6h
.eh_frame:0000000000019FB3                 db  58h ; X
.eh_frame:0000000000019FB4                 db  0Eh
.eh_frame:0000000000019FB5                 db  20h
.eh_frame:0000000000019FB6                 db  83h
.eh_frame:0000000000019FB7                 db    3
.eh_frame:0000000000019FB8                 db  86h
.eh_frame:0000000000019FB9                 db    2
.eh_frame:0000000000019FBA                 db    0
.eh_frame:0000000000019FBB                 db    0
.eh_frame:0000000000019FBC                 db  28h ; (
.eh_frame:0000000000019FBD                 db    0
.eh_frame:0000000000019FBE                 db    0
.eh_frame:0000000000019FBF                 db    0
.eh_frame:0000000000019FC0                 db    0
.eh_frame:0000000000019FC1                 db  1Bh
.eh_frame:0000000000019FC2                 db    0
.eh_frame:0000000000019FC3                 db    0
.eh_frame:0000000000019FC4                 db 0CCh
.eh_frame:0000000000019FC5                 db  2Dh ; -
.eh_frame:0000000000019FC6                 db 0FFh
.eh_frame:0000000000019FC7                 db 0FFh
.eh_frame:0000000000019FC8                 db  4Fh ; O
.eh_frame:0000000000019FC9                 db    0
.eh_frame:0000000000019FCA                 db    0
.eh_frame:0000000000019FCB                 db    0
.eh_frame:0000000000019FCC                 db    0
.eh_frame:0000000000019FCD                 db  42h ; B
.eh_frame:0000000000019FCE                 db  0Eh
.eh_frame:0000000000019FCF                 db  10h
.eh_frame:0000000000019FD0                 db  8Ch
.eh_frame:0000000000019FD1                 db    2
.eh_frame:0000000000019FD2                 db  41h ; A
.eh_frame:0000000000019FD3                 db  0Eh
.eh_frame:0000000000019FD4                 db  18h
.eh_frame:0000000000019FD5                 db  86h
.eh_frame:0000000000019FD6                 db    3
.eh_frame:0000000000019FD7                 db  44h ; D
.eh_frame:0000000000019FD8                 db  0Eh
.eh_frame:0000000000019FD9                 db  20h
.eh_frame:0000000000019FDA                 db  83h
.eh_frame:0000000000019FDB                 db    4
.eh_frame:0000000000019FDC                 db  7Ch ; |
.eh_frame:0000000000019FDD                 db  0Eh
.eh_frame:0000000000019FDE                 db  18h
.eh_frame:0000000000019FDF                 db  45h ; E
.eh_frame:0000000000019FE0                 db  0Eh
.eh_frame:0000000000019FE1                 db  10h
.eh_frame:0000000000019FE2                 db  42h ; B
.eh_frame:0000000000019FE3                 db  0Eh
.eh_frame:0000000000019FE4                 db    8
.eh_frame:0000000000019FE5                 db    0
.eh_frame:0000000000019FE6                 db    0
.eh_frame:0000000000019FE7                 db    0
.eh_frame:0000000000019FE8                 db  2Ch ; ,
.eh_frame:0000000000019FE9                 db    0
.eh_frame:0000000000019FEA                 db    0
.eh_frame:0000000000019FEB                 db    0
.eh_frame:0000000000019FEC                 db  2Ch ; ,
.eh_frame:0000000000019FED                 db  1Bh
.eh_frame:0000000000019FEE                 db    0
.eh_frame:0000000000019FEF                 db    0
.eh_frame:0000000000019FF0                 db 0F0h
.eh_frame:0000000000019FF1                 db  2Dh ; -
.eh_frame:0000000000019FF2                 db 0FFh
.eh_frame:0000000000019FF3                 db 0FFh
.eh_frame:0000000000019FF4                 db  94h
.eh_frame:0000000000019FF5                 db    0
.eh_frame:0000000000019FF6                 db    0
.eh_frame:0000000000019FF7                 db    0
.eh_frame:0000000000019FF8                 db    0
.eh_frame:0000000000019FF9                 db  42h ; B
.eh_frame:0000000000019FFA                 db  0Eh
.eh_frame:0000000000019FFB                 db  10h
.eh_frame:0000000000019FFC                 db  8Ch
.eh_frame:0000000000019FFD                 db    2
.eh_frame:0000000000019FFE                 db  41h ; A
.eh_frame:0000000000019FFF                 db  0Eh
.eh_frame:000000000001A000                 db  18h
.eh_frame:000000000001A001                 db  86h
.eh_frame:000000000001A002                 db    3
.eh_frame:000000000001A003                 db  41h ; A
.eh_frame:000000000001A004                 db  0Eh
.eh_frame:000000000001A005                 db  20h
.eh_frame:000000000001A006                 db  83h
.eh_frame:000000000001A007                 db    4
.eh_frame:000000000001A008                 db    2
.eh_frame:000000000001A009                 db  6Dh ; m
.eh_frame:000000000001A00A                 db  0Ah
.eh_frame:000000000001A00B                 db  0Eh
.eh_frame:000000000001A00C                 db  18h
.eh_frame:000000000001A00D                 db  41h ; A
.eh_frame:000000000001A00E                 db  0Eh
.eh_frame:000000000001A00F                 db  10h
.eh_frame:000000000001A010                 db  42h ; B
.eh_frame:000000000001A011                 db  0Eh
.eh_frame:000000000001A012                 db    8
.eh_frame:000000000001A013                 db  41h ; A
.eh_frame:000000000001A014                 db  0Bh
.eh_frame:000000000001A015                 db    0
.eh_frame:000000000001A016                 db    0
.eh_frame:000000000001A017                 db    0
.eh_frame:000000000001A018                 db  30h ; 0
.eh_frame:000000000001A019                 db    0
.eh_frame:000000000001A01A                 db    0
.eh_frame:000000000001A01B                 db    0
.eh_frame:000000000001A01C                 db  5Ch ; \
.eh_frame:000000000001A01D                 db  1Bh
.eh_frame:000000000001A01E                 db    0
.eh_frame:000000000001A01F                 db    0
.eh_frame:000000000001A020                 db  60h ; `
.eh_frame:000000000001A021                 db  2Eh ; .
.eh_frame:000000000001A022                 db 0FFh
.eh_frame:000000000001A023                 db 0FFh
.eh_frame:000000000001A024                 db  4Ch ; L
.eh_frame:000000000001A025                 db    0
.eh_frame:000000000001A026                 db    0
.eh_frame:000000000001A027                 db    0
.eh_frame:000000000001A028                 db    0
.eh_frame:000000000001A029                 db  41h ; A
.eh_frame:000000000001A02A                 db  0Eh
.eh_frame:000000000001A02B                 db  10h
.eh_frame:000000000001A02C                 db  86h
.eh_frame:000000000001A02D                 db    2
.eh_frame:000000000001A02E                 db  41h ; A
.eh_frame:000000000001A02F                 db  0Eh
.eh_frame:000000000001A030                 db  18h
.eh_frame:000000000001A031                 db  83h
.eh_frame:000000000001A032                 db    3
.eh_frame:000000000001A033                 db  4Dh ; M
.eh_frame:000000000001A034                 db  0Eh
.eh_frame:000000000001A035                 db  20h
.eh_frame:000000000001A036                 db  67h ; g
.eh_frame:000000000001A037                 db  0Ah
.eh_frame:000000000001A038                 db  0Eh
.eh_frame:000000000001A039                 db  18h
.eh_frame:000000000001A03A                 db  43h ; C
.eh_frame:000000000001A03B                 db  0Eh
.eh_frame:000000000001A03C                 db  10h
.eh_frame:000000000001A03D                 db  41h ; A
.eh_frame:000000000001A03E                 db  0Eh
.eh_frame:000000000001A03F                 db    8
.eh_frame:000000000001A040                 db  46h ; F
.eh_frame:000000000001A041                 db  0Bh
.eh_frame:000000000001A042                 db  44h ; D
.eh_frame:000000000001A043                 db  0Eh
.eh_frame:000000000001A044                 db  18h
.eh_frame:000000000001A045                 db  46h ; F
.eh_frame:000000000001A046                 db  0Eh
.eh_frame:000000000001A047                 db  10h
.eh_frame:000000000001A048                 db  41h ; A
.eh_frame:000000000001A049                 db  0Eh
.eh_frame:000000000001A04A                 db    8
.eh_frame:000000000001A04B                 db    0
.eh_frame:000000000001A04C                 db  40h ; @
.eh_frame:000000000001A04D                 db    0
.eh_frame:000000000001A04E                 db    0
.eh_frame:000000000001A04F                 db    0
.eh_frame:000000000001A050                 db  90h
.eh_frame:000000000001A051                 db  1Bh
.eh_frame:000000000001A052                 db    0
.eh_frame:000000000001A053                 db    0
.eh_frame:000000000001A054                 db  7Ch ; |
.eh_frame:000000000001A055                 db  2Eh ; .
.eh_frame:000000000001A056                 db 0FFh
.eh_frame:000000000001A057                 db 0FFh
.eh_frame:000000000001A058                 db  0Dh
.eh_frame:000000000001A059                 db    8
.eh_frame:000000000001A05A                 db    0
.eh_frame:000000000001A05B                 db    0
.eh_frame:000000000001A05C                 db    0
.eh_frame:000000000001A05D                 db  42h ; B
.eh_frame:000000000001A05E                 db  0Eh
.eh_frame:000000000001A05F                 db  10h
.eh_frame:000000000001A060                 db  8Eh
.eh_frame:000000000001A061                 db    2
.eh_frame:000000000001A062                 db  42h ; B
.eh_frame:000000000001A063                 db  0Eh
.eh_frame:000000000001A064                 db  18h
.eh_frame:000000000001A065                 db  8Dh
.eh_frame:000000000001A066                 db    3
.eh_frame:000000000001A067                 db  45h ; E
.eh_frame:000000000001A068                 db  0Eh
.eh_frame:000000000001A069                 db  20h
.eh_frame:000000000001A06A                 db  8Ch
.eh_frame:000000000001A06B                 db    4
.eh_frame:000000000001A06C                 db  41h ; A
.eh_frame:000000000001A06D                 db  0Eh
.eh_frame:000000000001A06E                 db  28h ; (
.eh_frame:000000000001A06F                 db  86h
.eh_frame:000000000001A070                 db    5
.eh_frame:000000000001A071                 db  44h ; D
.eh_frame:000000000001A072                 db  0Eh
.eh_frame:000000000001A073                 db  30h ; 0
.eh_frame:000000000001A074                 db  83h
.eh_frame:000000000001A075                 db    6
.eh_frame:000000000001A076                 db  4Ah ; J
.eh_frame:000000000001A077                 db  0Eh
.eh_frame:000000000001A078                 db  40h ; @
.eh_frame:000000000001A079                 db    2
.eh_frame:000000000001A07A                 db 0D2h
.eh_frame:000000000001A07B                 db  0Ah
.eh_frame:000000000001A07C                 db  0Eh
.eh_frame:000000000001A07D                 db  30h ; 0
.eh_frame:000000000001A07E                 db  41h ; A
.eh_frame:000000000001A07F                 db  0Eh
.eh_frame:000000000001A080                 db  28h ; (
.eh_frame:000000000001A081                 db  41h ; A
.eh_frame:000000000001A082                 db  0Eh
.eh_frame:000000000001A083                 db  20h
.eh_frame:000000000001A084                 db  42h ; B
.eh_frame:000000000001A085                 db  0Eh
.eh_frame:000000000001A086                 db  18h
.eh_frame:000000000001A087                 db  42h ; B
.eh_frame:000000000001A088                 db  0Eh
.eh_frame:000000000001A089                 db  10h
.eh_frame:000000000001A08A                 db  42h ; B
.eh_frame:000000000001A08B                 db  0Eh
.eh_frame:000000000001A08C                 db    8
.eh_frame:000000000001A08D                 db  46h ; F
.eh_frame:000000000001A08E                 db  0Bh
.eh_frame:000000000001A08F                 db    0
.eh_frame:000000000001A090                 db  5Ch ; \
.eh_frame:000000000001A091                 db    0
.eh_frame:000000000001A092                 db    0
.eh_frame:000000000001A093                 db    0
.eh_frame:000000000001A094                 db 0D4h
.eh_frame:000000000001A095                 db  1Bh
.eh_frame:000000000001A096                 db    0
.eh_frame:000000000001A097                 db    0
.eh_frame:000000000001A098                 db  48h ; H
.eh_frame:000000000001A099                 db  36h ; 6
.eh_frame:000000000001A09A                 db 0FFh
.eh_frame:000000000001A09B                 db 0FFh
.eh_frame:000000000001A09C                 db  6Ah ; j
.eh_frame:000000000001A09D                 db    2
.eh_frame:000000000001A09E                 db    0
.eh_frame:000000000001A09F                 db    0
.eh_frame:000000000001A0A0                 db    0
.eh_frame:000000000001A0A1                 db  42h ; B
.eh_frame:000000000001A0A2                 db  0Eh
.eh_frame:000000000001A0A3                 db  10h
.eh_frame:000000000001A0A4                 db  8Fh
.eh_frame:000000000001A0A5                 db    2
.eh_frame:000000000001A0A6                 db  42h ; B
.eh_frame:000000000001A0A7                 db  0Eh
.eh_frame:000000000001A0A8                 db  18h
.eh_frame:000000000001A0A9                 db  8Eh
.eh_frame:000000000001A0AA                 db    3
.eh_frame:000000000001A0AB                 db  45h ; E
.eh_frame:000000000001A0AC                 db  0Eh
.eh_frame:000000000001A0AD                 db  20h
.eh_frame:000000000001A0AE                 db  8Dh
.eh_frame:000000000001A0AF                 db    4
.eh_frame:000000000001A0B0                 db  42h ; B
.eh_frame:000000000001A0B1                 db  0Eh
.eh_frame:000000000001A0B2                 db  28h ; (
.eh_frame:000000000001A0B3                 db  8Ch
.eh_frame:000000000001A0B4                 db    5
.eh_frame:000000000001A0B5                 db  44h ; D
.eh_frame:000000000001A0B6                 db  0Eh
.eh_frame:000000000001A0B7                 db  30h ; 0
.eh_frame:000000000001A0B8                 db  86h
.eh_frame:000000000001A0B9                 db    6
.eh_frame:000000000001A0BA                 db  41h ; A
.eh_frame:000000000001A0BB                 db  0Eh
.eh_frame:000000000001A0BC                 db  38h ; 8
.eh_frame:000000000001A0BD                 db  83h
.eh_frame:000000000001A0BE                 db    7
.eh_frame:000000000001A0BF                 db  4Fh ; O
.eh_frame:000000000001A0C0                 db  0Eh
.eh_frame:000000000001A0C1                 db  90h
.eh_frame:000000000001A0C2                 db    1
.eh_frame:000000000001A0C3                 db    2
.eh_frame:000000000001A0C4                 db  5Bh ; [
.eh_frame:000000000001A0C5                 db  0Eh
.eh_frame:000000000001A0C6                 db  98h
.eh_frame:000000000001A0C7                 db    1
.eh_frame:000000000001A0C8                 db  45h ; E
.eh_frame:000000000001A0C9                 db  0Eh
.eh_frame:000000000001A0CA                 db 0A0h
.eh_frame:000000000001A0CB                 db    1
.eh_frame:000000000001A0CC                 db  6Ch ; l
.eh_frame:000000000001A0CD                 db  0Eh
.eh_frame:000000000001A0CE                 db  98h
.eh_frame:000000000001A0CF                 db    1
.eh_frame:000000000001A0D0                 db  41h ; A
.eh_frame:000000000001A0D1                 db  0Eh
.eh_frame:000000000001A0D2                 db  90h
.eh_frame:000000000001A0D3                 db    1
.eh_frame:000000000001A0D4                 db    3
.eh_frame:000000000001A0D5                 db  31h ; 1
.eh_frame:000000000001A0D6                 db    1
.eh_frame:000000000001A0D7                 db  0Ah
.eh_frame:000000000001A0D8                 db  0Eh
.eh_frame:000000000001A0D9                 db  38h ; 8
.eh_frame:000000000001A0DA                 db  41h ; A
.eh_frame:000000000001A0DB                 db  0Eh
.eh_frame:000000000001A0DC                 db  30h ; 0
.eh_frame:000000000001A0DD                 db  41h ; A
.eh_frame:000000000001A0DE                 db  0Eh
.eh_frame:000000000001A0DF                 db  28h ; (
.eh_frame:000000000001A0E0                 db  42h ; B
.eh_frame:000000000001A0E1                 db  0Eh
.eh_frame:000000000001A0E2                 db  20h
.eh_frame:000000000001A0E3                 db  42h ; B
.eh_frame:000000000001A0E4                 db  0Eh
.eh_frame:000000000001A0E5                 db  18h
.eh_frame:000000000001A0E6                 db  42h ; B
.eh_frame:000000000001A0E7                 db  0Eh
.eh_frame:000000000001A0E8                 db  10h
.eh_frame:000000000001A0E9                 db  42h ; B
.eh_frame:000000000001A0EA                 db  0Eh
.eh_frame:000000000001A0EB                 db    8
.eh_frame:000000000001A0EC                 db  49h ; I
.eh_frame:000000000001A0ED                 db  0Bh
.eh_frame:000000000001A0EE                 db    0
.eh_frame:000000000001A0EF                 db    0
.eh_frame:000000000001A0F0                 db  4Ch ; L
.eh_frame:000000000001A0F1                 db    0
.eh_frame:000000000001A0F2                 db    0
.eh_frame:000000000001A0F3                 db    0
.eh_frame:000000000001A0F4                 db  34h ; 4
.eh_frame:000000000001A0F5                 db  1Ch
.eh_frame:000000000001A0F6                 db    0
.eh_frame:000000000001A0F7                 db    0
.eh_frame:000000000001A0F8                 db  58h ; X
.eh_frame:000000000001A0F9                 db  38h ; 8
.eh_frame:000000000001A0FA                 db 0FFh
.eh_frame:000000000001A0FB                 db 0FFh
.eh_frame:000000000001A0FC                 db  27h ; '
.eh_frame:000000000001A0FD                 db    5
.eh_frame:000000000001A0FE                 db    0
.eh_frame:000000000001A0FF                 db    0
.eh_frame:000000000001A100                 db    0
.eh_frame:000000000001A101                 db  42h ; B
.eh_frame:000000000001A102                 db  0Eh
.eh_frame:000000000001A103                 db  10h
.eh_frame:000000000001A104                 db  8Fh
.eh_frame:000000000001A105                 db    2
.eh_frame:000000000001A106                 db  42h ; B
.eh_frame:000000000001A107                 db  0Eh
.eh_frame:000000000001A108                 db  18h
.eh_frame:000000000001A109                 db  8Eh
.eh_frame:000000000001A10A                 db    3
.eh_frame:000000000001A10B                 db  45h ; E
.eh_frame:000000000001A10C                 db  0Eh
.eh_frame:000000000001A10D                 db  20h
.eh_frame:000000000001A10E                 db  8Dh
.eh_frame:000000000001A10F                 db    4
.eh_frame:000000000001A110                 db  42h ; B
.eh_frame:000000000001A111                 db  0Eh
.eh_frame:000000000001A112                 db  28h ; (
.eh_frame:000000000001A113                 db  8Ch
.eh_frame:000000000001A114                 db    5
.eh_frame:000000000001A115                 db  41h ; A
.eh_frame:000000000001A116                 db  0Eh
.eh_frame:000000000001A117                 db  30h ; 0
.eh_frame:000000000001A118                 db  86h
.eh_frame:000000000001A119                 db    6
.eh_frame:000000000001A11A                 db  41h ; A
.eh_frame:000000000001A11B                 db  0Eh
.eh_frame:000000000001A11C                 db  38h ; 8
.eh_frame:000000000001A11D                 db  83h
.eh_frame:000000000001A11E                 db    7
.eh_frame:000000000001A11F                 db  4Ch ; L
.eh_frame:000000000001A120                 db  0Eh
.eh_frame:000000000001A121                 db 0B0h
.eh_frame:000000000001A122                 db    3
.eh_frame:000000000001A123                 db    3
.eh_frame:000000000001A124                 db  82h
.eh_frame:000000000001A125                 db    4
.eh_frame:000000000001A126                 db  0Ah
.eh_frame:000000000001A127                 db  0Eh
.eh_frame:000000000001A128                 db  38h ; 8
.eh_frame:000000000001A129                 db  41h ; A
.eh_frame:000000000001A12A                 db  0Eh
.eh_frame:000000000001A12B                 db  30h ; 0
.eh_frame:000000000001A12C                 db  41h ; A
.eh_frame:000000000001A12D                 db  0Eh
.eh_frame:000000000001A12E                 db  28h ; (
.eh_frame:000000000001A12F                 db  42h ; B
.eh_frame:000000000001A130                 db  0Eh
.eh_frame:000000000001A131                 db  20h
.eh_frame:000000000001A132                 db  42h ; B
.eh_frame:000000000001A133                 db  0Eh
.eh_frame:000000000001A134                 db  18h
.eh_frame:000000000001A135                 db  42h ; B
.eh_frame:000000000001A136                 db  0Eh
.eh_frame:000000000001A137                 db  10h
.eh_frame:000000000001A138                 db  42h ; B
.eh_frame:000000000001A139                 db  0Eh
.eh_frame:000000000001A13A                 db    8
.eh_frame:000000000001A13B                 db  41h ; A
.eh_frame:000000000001A13C                 db  0Bh
.eh_frame:000000000001A13D                 db    0
.eh_frame:000000000001A13E                 db    0
.eh_frame:000000000001A13F                 db    0
.eh_frame:000000000001A140                 db  38h ; 8
.eh_frame:000000000001A141                 db    0
.eh_frame:000000000001A142                 db    0
.eh_frame:000000000001A143                 db    0
.eh_frame:000000000001A144                 db  84h
.eh_frame:000000000001A145                 db  1Ch
.eh_frame:000000000001A146                 db    0
.eh_frame:000000000001A147                 db    0
.eh_frame:000000000001A148                 db  38h ; 8
.eh_frame:000000000001A149                 db  3Dh ; =
.eh_frame:000000000001A14A                 db 0FFh
.eh_frame:000000000001A14B                 db 0FFh
.eh_frame:000000000001A14C                 db  54h ; T
.eh_frame:000000000001A14D                 db    2
.eh_frame:000000000001A14E                 db    0
.eh_frame:000000000001A14F                 db    0
.eh_frame:000000000001A150                 db    0
.eh_frame:000000000001A151                 db  46h ; F
.eh_frame:000000000001A152                 db  0Eh
.eh_frame:000000000001A153                 db  10h
.eh_frame:000000000001A154                 db  8Dh
.eh_frame:000000000001A155                 db    2
.eh_frame:000000000001A156                 db  42h ; B
.eh_frame:000000000001A157                 db  0Eh
.eh_frame:000000000001A158                 db  18h
.eh_frame:000000000001A159                 db  8Ch
.eh_frame:000000000001A15A                 db    3
.eh_frame:000000000001A15B                 db  45h ; E
.eh_frame:000000000001A15C                 db  0Eh
.eh_frame:000000000001A15D                 db  20h
.eh_frame:000000000001A15E                 db  86h
.eh_frame:000000000001A15F                 db    4
.eh_frame:000000000001A160                 db  41h ; A
.eh_frame:000000000001A161                 db  0Eh
.eh_frame:000000000001A162                 db  28h ; (
.eh_frame:000000000001A163                 db  83h
.eh_frame:000000000001A164                 db    5
.eh_frame:000000000001A165                 db  44h ; D
.eh_frame:000000000001A166                 db  0Eh
.eh_frame:000000000001A167                 db  30h ; 0
.eh_frame:000000000001A168                 db    2
.eh_frame:000000000001A169                 db 0E4h
.eh_frame:000000000001A16A                 db  0Ah
.eh_frame:000000000001A16B                 db  0Eh
.eh_frame:000000000001A16C                 db  28h ; (
.eh_frame:000000000001A16D                 db  43h ; C
.eh_frame:000000000001A16E                 db  0Eh
.eh_frame:000000000001A16F                 db  20h
.eh_frame:000000000001A170                 db  41h ; A
.eh_frame:000000000001A171                 db  0Eh
.eh_frame:000000000001A172                 db  18h
.eh_frame:000000000001A173                 db  42h ; B
.eh_frame:000000000001A174                 db  0Eh
.eh_frame:000000000001A175                 db  10h
.eh_frame:000000000001A176                 db  42h ; B
.eh_frame:000000000001A177                 db  0Eh
.eh_frame:000000000001A178                 db    8
.eh_frame:000000000001A179                 db  42h ; B
.eh_frame:000000000001A17A                 db  0Bh
.eh_frame:000000000001A17B                 db    0
.eh_frame:000000000001A17C                 db  4Ch ; L
.eh_frame:000000000001A17D                 db    0
.eh_frame:000000000001A17E                 db    0
.eh_frame:000000000001A17F                 db    0
.eh_frame:000000000001A180                 db 0C0h
.eh_frame:000000000001A181                 db  1Ch
.eh_frame:000000000001A182                 db    0
.eh_frame:000000000001A183                 db    0
.eh_frame:000000000001A184                 db  5Ch ; \
.eh_frame:000000000001A185                 db  3Fh ; ?
.eh_frame:000000000001A186                 db 0FFh
.eh_frame:000000000001A187                 db 0FFh
.eh_frame:000000000001A188                 db  51h ; Q
.eh_frame:000000000001A189                 db    7
.eh_frame:000000000001A18A                 db    0
.eh_frame:000000000001A18B                 db    0
.eh_frame:000000000001A18C                 db    0
.eh_frame:000000000001A18D                 db  42h ; B
.eh_frame:000000000001A18E                 db  0Eh
.eh_frame:000000000001A18F                 db  10h
.eh_frame:000000000001A190                 db  8Fh
.eh_frame:000000000001A191                 db    2
.eh_frame:000000000001A192                 db  42h ; B
.eh_frame:000000000001A193                 db  0Eh
.eh_frame:000000000001A194                 db  18h
.eh_frame:000000000001A195                 db  8Eh
.eh_frame:000000000001A196                 db    3
.eh_frame:000000000001A197                 db  45h ; E
.eh_frame:000000000001A198                 db  0Eh
.eh_frame:000000000001A199                 db  20h
.eh_frame:000000000001A19A                 db  8Dh
.eh_frame:000000000001A19B                 db    4
.eh_frame:000000000001A19C                 db  42h ; B
.eh_frame:000000000001A19D                 db  0Eh
.eh_frame:000000000001A19E                 db  28h ; (
.eh_frame:000000000001A19F                 db  8Ch
.eh_frame:000000000001A1A0                 db    5
.eh_frame:000000000001A1A1                 db  41h ; A
.eh_frame:000000000001A1A2                 db  0Eh
.eh_frame:000000000001A1A3                 db  30h ; 0
.eh_frame:000000000001A1A4                 db  86h
.eh_frame:000000000001A1A5                 db    6
.eh_frame:000000000001A1A6                 db  41h ; A
.eh_frame:000000000001A1A7                 db  0Eh
.eh_frame:000000000001A1A8                 db  38h ; 8
.eh_frame:000000000001A1A9                 db  83h
.eh_frame:000000000001A1AA                 db    7
.eh_frame:000000000001A1AB                 db  4Dh ; M
.eh_frame:000000000001A1AC                 db  0Eh
.eh_frame:000000000001A1AD                 db  90h
.eh_frame:000000000001A1AE                 db    2
.eh_frame:000000000001A1AF                 db    3
.eh_frame:000000000001A1B0                 db  88h
.eh_frame:000000000001A1B1                 db    5
.eh_frame:000000000001A1B2                 db  0Ah
.eh_frame:000000000001A1B3                 db  0Eh
.eh_frame:000000000001A1B4                 db  38h ; 8
.eh_frame:000000000001A1B5                 db  41h ; A
.eh_frame:000000000001A1B6                 db  0Eh
.eh_frame:000000000001A1B7                 db  30h ; 0
.eh_frame:000000000001A1B8                 db  41h ; A
.eh_frame:000000000001A1B9                 db  0Eh
.eh_frame:000000000001A1BA                 db  28h ; (
.eh_frame:000000000001A1BB                 db  42h ; B
.eh_frame:000000000001A1BC                 db  0Eh
.eh_frame:000000000001A1BD                 db  20h
.eh_frame:000000000001A1BE                 db  42h ; B
.eh_frame:000000000001A1BF                 db  0Eh
.eh_frame:000000000001A1C0                 db  18h
.eh_frame:000000000001A1C1                 db  42h ; B
.eh_frame:000000000001A1C2                 db  0Eh
.eh_frame:000000000001A1C3                 db  10h
.eh_frame:000000000001A1C4                 db  42h ; B
.eh_frame:000000000001A1C5                 db  0Eh
.eh_frame:000000000001A1C6                 db    8
.eh_frame:000000000001A1C7                 db  44h ; D
.eh_frame:000000000001A1C8                 db  0Bh
.eh_frame:000000000001A1C9                 db    0
.eh_frame:000000000001A1CA                 db    0
.eh_frame:000000000001A1CB                 db    0
.eh_frame:000000000001A1CC                 db  2Ch ; ,
.eh_frame:000000000001A1CD                 db    0
.eh_frame:000000000001A1CE                 db    0
.eh_frame:000000000001A1CF                 db    0
.eh_frame:000000000001A1D0                 db  10h
.eh_frame:000000000001A1D1                 db  1Dh
.eh_frame:000000000001A1D2                 db    0
.eh_frame:000000000001A1D3                 db    0
.eh_frame:000000000001A1D4                 db  6Ch ; l
.eh_frame:000000000001A1D5                 db  46h ; F
.eh_frame:000000000001A1D6                 db 0FFh
.eh_frame:000000000001A1D7                 db 0FFh
.eh_frame:000000000001A1D8                 db 0EAh
.eh_frame:000000000001A1D9                 db    8
.eh_frame:000000000001A1DA                 db    0
.eh_frame:000000000001A1DB                 db    0
.eh_frame:000000000001A1DC                 db    0
.eh_frame:000000000001A1DD                 db  41h ; A
.eh_frame:000000000001A1DE                 db  0Eh
.eh_frame:000000000001A1DF                 db  10h
.eh_frame:000000000001A1E0                 db  86h
.eh_frame:000000000001A1E1                 db    2
.eh_frame:000000000001A1E2                 db  43h ; C
.eh_frame:000000000001A1E3                 db  0Dh
.eh_frame:000000000001A1E4                 db    6
.eh_frame:000000000001A1E5                 db  48h ; H
.eh_frame:000000000001A1E6                 db  8Fh
.eh_frame:000000000001A1E7                 db    3
.eh_frame:000000000001A1E8                 db  8Eh
.eh_frame:000000000001A1E9                 db    4
.eh_frame:000000000001A1EA                 db  8Dh
.eh_frame:000000000001A1EB                 db    5
.eh_frame:000000000001A1EC                 db  8Ch
.eh_frame:000000000001A1ED                 db    6
.eh_frame:000000000001A1EE                 db  4Eh ; N
.eh_frame:000000000001A1EF                 db  83h
.eh_frame:000000000001A1F0                 db    7
.eh_frame:000000000001A1F1                 db    3
.eh_frame:000000000001A1F2                 db  20h
.eh_frame:000000000001A1F3                 db    7
.eh_frame:000000000001A1F4                 db  0Ah
.eh_frame:000000000001A1F5                 db  0Ch
.eh_frame:000000000001A1F6                 db    7
.eh_frame:000000000001A1F7                 db    8
.eh_frame:000000000001A1F8                 db  41h ; A
.eh_frame:000000000001A1F9                 db  0Bh
.eh_frame:000000000001A1FA                 db    0
.eh_frame:000000000001A1FB                 db    0
.eh_frame:000000000001A1FC                 db  68h ; h
.eh_frame:000000000001A1FD                 db    0
.eh_frame:000000000001A1FE                 db    0
.eh_frame:000000000001A1FF                 db    0
.eh_frame:000000000001A200                 db  40h ; @
.eh_frame:000000000001A201                 db  1Dh
.eh_frame:000000000001A202                 db    0
.eh_frame:000000000001A203                 db    0
.eh_frame:000000000001A204                 db  2Ch ; ,
.eh_frame:000000000001A205                 db  4Fh ; O
.eh_frame:000000000001A206                 db 0FFh
.eh_frame:000000000001A207                 db 0FFh
.eh_frame:000000000001A208                 db  96h
.eh_frame:000000000001A209                 db    1
.eh_frame:000000000001A20A                 db    0
.eh_frame:000000000001A20B                 db    0
.eh_frame:000000000001A20C                 db    0
.eh_frame:000000000001A20D                 db  42h ; B
.eh_frame:000000000001A20E                 db  0Eh
.eh_frame:000000000001A20F                 db  10h
.eh_frame:000000000001A210                 db  8Fh
.eh_frame:000000000001A211                 db    2
.eh_frame:000000000001A212                 db  42h ; B
.eh_frame:000000000001A213                 db  0Eh
.eh_frame:000000000001A214                 db  18h
.eh_frame:000000000001A215                 db  8Eh
.eh_frame:000000000001A216                 db    3
.eh_frame:000000000001A217                 db  45h ; E
.eh_frame:000000000001A218                 db  0Eh
.eh_frame:000000000001A219                 db  20h
.eh_frame:000000000001A21A                 db  8Dh
.eh_frame:000000000001A21B                 db    4
.eh_frame:000000000001A21C                 db  42h ; B
.eh_frame:000000000001A21D                 db  0Eh
.eh_frame:000000000001A21E                 db  28h ; (
.eh_frame:000000000001A21F                 db  8Ch
.eh_frame:000000000001A220                 db    5
.eh_frame:000000000001A221                 db  44h ; D
.eh_frame:000000000001A222                 db  0Eh
.eh_frame:000000000001A223                 db  30h ; 0
.eh_frame:000000000001A224                 db  86h
.eh_frame:000000000001A225                 db    6
.eh_frame:000000000001A226                 db  41h ; A
.eh_frame:000000000001A227                 db  0Eh
.eh_frame:000000000001A228                 db  38h ; 8
.eh_frame:000000000001A229                 db  83h
.eh_frame:000000000001A22A                 db    7
.eh_frame:000000000001A22B                 db  51h ; Q
.eh_frame:000000000001A22C                 db  0Eh
.eh_frame:000000000001A22D                 db  58h ; X
.eh_frame:000000000001A22E                 db  49h ; I
.eh_frame:000000000001A22F                 db  0Eh
.eh_frame:000000000001A230                 db  60h ; `
.eh_frame:000000000001A231                 db  4Eh ; N
.eh_frame:000000000001A232                 db  0Eh
.eh_frame:000000000001A233                 db  58h ; X
.eh_frame:000000000001A234                 db  41h ; A
.eh_frame:000000000001A235                 db  0Eh
.eh_frame:000000000001A236                 db  50h ; P
.eh_frame:000000000001A237                 db  46h ; F
.eh_frame:000000000001A238                 db  0Ah
.eh_frame:000000000001A239                 db  0Eh
.eh_frame:000000000001A23A                 db  38h ; 8
.eh_frame:000000000001A23B                 db  41h ; A
.eh_frame:000000000001A23C                 db  0Eh
.eh_frame:000000000001A23D                 db  30h ; 0
.eh_frame:000000000001A23E                 db  41h ; A
.eh_frame:000000000001A23F                 db  0Eh
.eh_frame:000000000001A240                 db  28h ; (
.eh_frame:000000000001A241                 db  42h ; B
.eh_frame:000000000001A242                 db  0Eh
.eh_frame:000000000001A243                 db  20h
.eh_frame:000000000001A244                 db  42h ; B
.eh_frame:000000000001A245                 db  0Eh
.eh_frame:000000000001A246                 db  18h
.eh_frame:000000000001A247                 db  42h ; B
.eh_frame:000000000001A248                 db  0Eh
.eh_frame:000000000001A249                 db  10h
.eh_frame:000000000001A24A                 db  42h ; B
.eh_frame:000000000001A24B                 db  0Eh
.eh_frame:000000000001A24C                 db    8
.eh_frame:000000000001A24D                 db  47h ; G
.eh_frame:000000000001A24E                 db  0Bh
.eh_frame:000000000001A24F                 db    2
.eh_frame:000000000001A250                 db  97h
.eh_frame:000000000001A251                 db  0Ah
.eh_frame:000000000001A252                 db  0Eh
.eh_frame:000000000001A253                 db  38h ; 8
.eh_frame:000000000001A254                 db  44h ; D
.eh_frame:000000000001A255                 db  0Eh
.eh_frame:000000000001A256                 db  30h ; 0
.eh_frame:000000000001A257                 db  41h ; A
.eh_frame:000000000001A258                 db  0Eh
.eh_frame:000000000001A259                 db  28h ; (
.eh_frame:000000000001A25A                 db  42h ; B
.eh_frame:000000000001A25B                 db  0Eh
.eh_frame:000000000001A25C                 db  20h
.eh_frame:000000000001A25D                 db  42h ; B
.eh_frame:000000000001A25E                 db  0Eh
.eh_frame:000000000001A25F                 db  18h
.eh_frame:000000000001A260                 db  42h ; B
.eh_frame:000000000001A261                 db  0Eh
.eh_frame:000000000001A262                 db  10h
.eh_frame:000000000001A263                 db  42h ; B
.eh_frame:000000000001A264                 db  0Eh
.eh_frame:000000000001A265                 db    8
.eh_frame:000000000001A266                 db  4Ch ; L
.eh_frame:000000000001A267                 db  0Bh
.eh_frame:000000000001A268                 db  5Ch ; \
.eh_frame:000000000001A269                 db    0
.eh_frame:000000000001A26A                 db    0
.eh_frame:000000000001A26B                 db    0
.eh_frame:000000000001A26C                 db 0ACh
.eh_frame:000000000001A26D                 db  1Dh
.eh_frame:000000000001A26E                 db    0
.eh_frame:000000000001A26F                 db    0
.eh_frame:000000000001A270                 db  60h ; `
.eh_frame:000000000001A271                 db  50h ; P
.eh_frame:000000000001A272                 db 0FFh
.eh_frame:000000000001A273                 db 0FFh
.eh_frame:000000000001A274                 db 0E1h
.eh_frame:000000000001A275                 db    8
.eh_frame:000000000001A276                 db    0
.eh_frame:000000000001A277                 db    0
.eh_frame:000000000001A278                 db    0
.eh_frame:000000000001A279                 db  42h ; B
.eh_frame:000000000001A27A                 db  0Eh
.eh_frame:000000000001A27B                 db  10h
.eh_frame:000000000001A27C                 db  8Fh
.eh_frame:000000000001A27D                 db    2
.eh_frame:000000000001A27E                 db  42h ; B
.eh_frame:000000000001A27F                 db  0Eh
.eh_frame:000000000001A280                 db  18h
.eh_frame:000000000001A281                 db  8Eh
.eh_frame:000000000001A282                 db    3
.eh_frame:000000000001A283                 db  42h ; B
.eh_frame:000000000001A284                 db  0Eh
.eh_frame:000000000001A285                 db  20h
.eh_frame:000000000001A286                 db  8Dh
.eh_frame:000000000001A287                 db    4
.eh_frame:000000000001A288                 db  42h ; B
.eh_frame:000000000001A289                 db  0Eh
.eh_frame:000000000001A28A                 db  28h ; (
.eh_frame:000000000001A28B                 db  8Ch
.eh_frame:000000000001A28C                 db    5
.eh_frame:000000000001A28D                 db  41h ; A
.eh_frame:000000000001A28E                 db  0Eh
.eh_frame:000000000001A28F                 db  30h ; 0
.eh_frame:000000000001A290                 db  86h
.eh_frame:000000000001A291                 db    6
.eh_frame:000000000001A292                 db  41h ; A
.eh_frame:000000000001A293                 db  0Eh
.eh_frame:000000000001A294                 db  38h ; 8
.eh_frame:000000000001A295                 db  83h
.eh_frame:000000000001A296                 db    7
.eh_frame:000000000001A297                 db  47h ; G
.eh_frame:000000000001A298                 db  0Eh
.eh_frame:000000000001A299                 db 0F0h
.eh_frame:000000000001A29A                 db    1
.eh_frame:000000000001A29B                 db    3
.eh_frame:000000000001A29C                 db  85h
.eh_frame:000000000001A29D                 db    3
.eh_frame:000000000001A29E                 db  0Ah
.eh_frame:000000000001A29F                 db  0Eh
.eh_frame:000000000001A2A0                 db  38h ; 8
.eh_frame:000000000001A2A1                 db  41h ; A
.eh_frame:000000000001A2A2                 db  0Eh
.eh_frame:000000000001A2A3                 db  30h ; 0
.eh_frame:000000000001A2A4                 db  41h ; A
.eh_frame:000000000001A2A5                 db  0Eh
.eh_frame:000000000001A2A6                 db  28h ; (
.eh_frame:000000000001A2A7                 db  42h ; B
.eh_frame:000000000001A2A8                 db  0Eh
.eh_frame:000000000001A2A9                 db  20h
.eh_frame:000000000001A2AA                 db  42h ; B
.eh_frame:000000000001A2AB                 db  0Eh
.eh_frame:000000000001A2AC                 db  18h
.eh_frame:000000000001A2AD                 db  42h ; B
.eh_frame:000000000001A2AE                 db  0Eh
.eh_frame:000000000001A2AF                 db  10h
.eh_frame:000000000001A2B0                 db  42h ; B
.eh_frame:000000000001A2B1                 db  0Eh
.eh_frame:000000000001A2B2                 db    8
.eh_frame:000000000001A2B3                 db  48h ; H
.eh_frame:000000000001A2B4                 db  0Bh
.eh_frame:000000000001A2B5                 db    3
.eh_frame:000000000001A2B6                 db 0D8h
.eh_frame:000000000001A2B7                 db    2
.eh_frame:000000000001A2B8                 db  0Eh
.eh_frame:000000000001A2B9                 db 0F8h
.eh_frame:000000000001A2BA                 db    1
.eh_frame:000000000001A2BB                 db  42h ; B
.eh_frame:000000000001A2BC                 db  0Eh
.eh_frame:000000000001A2BD                 db  80h
.eh_frame:000000000001A2BE                 db    2
.eh_frame:000000000001A2BF                 db  4Fh ; O
.eh_frame:000000000001A2C0                 db  0Eh
.eh_frame:000000000001A2C1                 db 0F8h
.eh_frame:000000000001A2C2                 db    1
.eh_frame:000000000001A2C3                 db  44h ; D
.eh_frame:000000000001A2C4                 db  0Eh
.eh_frame:000000000001A2C5                 db 0F0h
.eh_frame:000000000001A2C6                 db    1
.eh_frame:000000000001A2C7                 db    0
.eh_frame:000000000001A2C8                 db  48h ; H
.eh_frame:000000000001A2C9                 db    0
.eh_frame:000000000001A2CA                 db    0
.eh_frame:000000000001A2CB                 db    0
.eh_frame:000000000001A2CC                 db  0Ch
.eh_frame:000000000001A2CD                 db  1Eh
.eh_frame:000000000001A2CE                 db    0
.eh_frame:000000000001A2CF                 db    0
.eh_frame:000000000001A2D0                 db 0F0h
.eh_frame:000000000001A2D1                 db  58h ; X
.eh_frame:000000000001A2D2                 db 0FFh
.eh_frame:000000000001A2D3                 db 0FFh
.eh_frame:000000000001A2D4                 db 0ECh
.eh_frame:000000000001A2D5                 db    1
.eh_frame:000000000001A2D6                 db    0
.eh_frame:000000000001A2D7                 db    0
.eh_frame:000000000001A2D8                 db    0
.eh_frame:000000000001A2D9                 db  42h ; B
.eh_frame:000000000001A2DA                 db  0Eh
.eh_frame:000000000001A2DB                 db  10h
.eh_frame:000000000001A2DC                 db  8Fh
.eh_frame:000000000001A2DD                 db    2
.eh_frame:000000000001A2DE                 db  42h ; B
.eh_frame:000000000001A2DF                 db  0Eh
.eh_frame:000000000001A2E0                 db  18h
.eh_frame:000000000001A2E1                 db  8Eh
.eh_frame:000000000001A2E2                 db    3
.eh_frame:000000000001A2E3                 db  42h ; B
.eh_frame:000000000001A2E4                 db  0Eh
.eh_frame:000000000001A2E5                 db  20h
.eh_frame:000000000001A2E6                 db  8Dh
.eh_frame:000000000001A2E7                 db    4
.eh_frame:000000000001A2E8                 db  42h ; B
.eh_frame:000000000001A2E9                 db  0Eh
.eh_frame:000000000001A2EA                 db  28h ; (
.eh_frame:000000000001A2EB                 db  8Ch
.eh_frame:000000000001A2EC                 db    5
.eh_frame:000000000001A2ED                 db  44h ; D
.eh_frame:000000000001A2EE                 db  0Eh
.eh_frame:000000000001A2EF                 db  30h ; 0
.eh_frame:000000000001A2F0                 db  86h
.eh_frame:000000000001A2F1                 db    6
.eh_frame:000000000001A2F2                 db  41h ; A
.eh_frame:000000000001A2F3                 db  0Eh
.eh_frame:000000000001A2F4                 db  38h ; 8
.eh_frame:000000000001A2F5                 db  83h
.eh_frame:000000000001A2F6                 db    7
.eh_frame:000000000001A2F7                 db  47h ; G
.eh_frame:000000000001A2F8                 db  0Eh
.eh_frame:000000000001A2F9                 db  70h ; p
.eh_frame:000000000001A2FA                 db    2
.eh_frame:000000000001A2FB                 db  6Ch ; l
.eh_frame:000000000001A2FC                 db  0Ah
.eh_frame:000000000001A2FD                 db  0Eh
.eh_frame:000000000001A2FE                 db  38h ; 8
.eh_frame:000000000001A2FF                 db  41h ; A
.eh_frame:000000000001A300                 db  0Eh
.eh_frame:000000000001A301                 db  30h ; 0
.eh_frame:000000000001A302                 db  41h ; A
.eh_frame:000000000001A303                 db  0Eh
.eh_frame:000000000001A304                 db  28h ; (
.eh_frame:000000000001A305                 db  42h ; B
.eh_frame:000000000001A306                 db  0Eh
.eh_frame:000000000001A307                 db  20h
.eh_frame:000000000001A308                 db  42h ; B
.eh_frame:000000000001A309                 db  0Eh
.eh_frame:000000000001A30A                 db  18h
.eh_frame:000000000001A30B                 db  42h ; B
.eh_frame:000000000001A30C                 db  0Eh
.eh_frame:000000000001A30D                 db  10h
.eh_frame:000000000001A30E                 db  42h ; B
.eh_frame:000000000001A30F                 db  0Eh
.eh_frame:000000000001A310                 db    8
.eh_frame:000000000001A311                 db  46h ; F
.eh_frame:000000000001A312                 db  0Bh
.eh_frame:000000000001A313                 db    0
.eh_frame:000000000001A314                 db  5Ch ; \
.eh_frame:000000000001A315                 db    0
.eh_frame:000000000001A316                 db    0
.eh_frame:000000000001A317                 db    0
.eh_frame:000000000001A318                 db  58h ; X
.eh_frame:000000000001A319                 db  1Eh
.eh_frame:000000000001A31A                 db    0
.eh_frame:000000000001A31B                 db    0
.eh_frame:000000000001A31C                 db  94h
.eh_frame:000000000001A31D                 db  5Ah ; Z
.eh_frame:000000000001A31E                 db 0FFh
.eh_frame:000000000001A31F                 db 0FFh
.eh_frame:000000000001A320                 db  40h ; @
.eh_frame:000000000001A321                 db    3
.eh_frame:000000000001A322                 db    0
.eh_frame:000000000001A323                 db    0
.eh_frame:000000000001A324                 db    0
.eh_frame:000000000001A325                 db  42h ; B
.eh_frame:000000000001A326                 db  0Eh
.eh_frame:000000000001A327                 db  10h
.eh_frame:000000000001A328                 db  8Fh
.eh_frame:000000000001A329                 db    2
.eh_frame:000000000001A32A                 db  42h ; B
.eh_frame:000000000001A32B                 db  0Eh
.eh_frame:000000000001A32C                 db  18h
.eh_frame:000000000001A32D                 db  8Eh
.eh_frame:000000000001A32E                 db    3
.eh_frame:000000000001A32F                 db  45h ; E
.eh_frame:000000000001A330                 db  0Eh
.eh_frame:000000000001A331                 db  20h
.eh_frame:000000000001A332                 db  8Dh
.eh_frame:000000000001A333                 db    4
.eh_frame:000000000001A334                 db  42h ; B
.eh_frame:000000000001A335                 db  0Eh
.eh_frame:000000000001A336                 db  28h ; (
.eh_frame:000000000001A337                 db  8Ch
.eh_frame:000000000001A338                 db    5
.eh_frame:000000000001A339                 db  44h ; D
.eh_frame:000000000001A33A                 db  0Eh
.eh_frame:000000000001A33B                 db  30h ; 0
.eh_frame:000000000001A33C                 db  86h
.eh_frame:000000000001A33D                 db    6
.eh_frame:000000000001A33E                 db  41h ; A
.eh_frame:000000000001A33F                 db  0Eh
.eh_frame:000000000001A340                 db  38h ; 8
.eh_frame:000000000001A341                 db  83h
.eh_frame:000000000001A342                 db    7
.eh_frame:000000000001A343                 db  44h ; D
.eh_frame:000000000001A344                 db  0Eh
.eh_frame:000000000001A345                 db 0A0h
.eh_frame:000000000001A346                 db    1
.eh_frame:000000000001A347                 db    3
.eh_frame:000000000001A348                 db  5Dh ; ]
.eh_frame:000000000001A349                 db    1
.eh_frame:000000000001A34A                 db  0Eh
.eh_frame:000000000001A34B                 db 0A8h
.eh_frame:000000000001A34C                 db    1
.eh_frame:000000000001A34D                 db  51h ; Q
.eh_frame:000000000001A34E                 db  0Eh
.eh_frame:000000000001A34F                 db 0B0h
.eh_frame:000000000001A350                 db    1
.eh_frame:000000000001A351                 db  52h ; R
.eh_frame:000000000001A352                 db  0Eh
.eh_frame:000000000001A353                 db 0A8h
.eh_frame:000000000001A354                 db    1
.eh_frame:000000000001A355                 db  41h ; A
.eh_frame:000000000001A356                 db  0Eh
.eh_frame:000000000001A357                 db 0A0h
.eh_frame:000000000001A358                 db    1
.eh_frame:000000000001A359                 db    3
.eh_frame:000000000001A35A                 db  94h
.eh_frame:000000000001A35B                 db    1
.eh_frame:000000000001A35C                 db  0Ah
.eh_frame:000000000001A35D                 db  0Eh
.eh_frame:000000000001A35E                 db  38h ; 8
.eh_frame:000000000001A35F                 db  41h ; A
.eh_frame:000000000001A360                 db  0Eh
.eh_frame:000000000001A361                 db  30h ; 0
.eh_frame:000000000001A362                 db  41h ; A
.eh_frame:000000000001A363                 db  0Eh
.eh_frame:000000000001A364                 db  28h ; (
.eh_frame:000000000001A365                 db  42h ; B
.eh_frame:000000000001A366                 db  0Eh
.eh_frame:000000000001A367                 db  20h
.eh_frame:000000000001A368                 db  42h ; B
.eh_frame:000000000001A369                 db  0Eh
.eh_frame:000000000001A36A                 db  18h
.eh_frame:000000000001A36B                 db  42h ; B
.eh_frame:000000000001A36C                 db  0Eh
.eh_frame:000000000001A36D                 db  10h
.eh_frame:000000000001A36E                 db  42h ; B
.eh_frame:000000000001A36F                 db  0Eh
.eh_frame:000000000001A370                 db    8
.eh_frame:000000000001A371                 db  41h ; A
.eh_frame:000000000001A372                 db  0Bh
.eh_frame:000000000001A373                 db    0
.eh_frame:000000000001A374                 db  4Ch ; L
.eh_frame:000000000001A375                 db    0
.eh_frame:000000000001A376                 db    0
.eh_frame:000000000001A377                 db    0
.eh_frame:000000000001A378                 db 0B8h
.eh_frame:000000000001A379                 db  1Eh
.eh_frame:000000000001A37A                 db    0
.eh_frame:000000000001A37B                 db    0
.eh_frame:000000000001A37C                 db  74h ; t
.eh_frame:000000000001A37D                 db  5Dh ; ]
.eh_frame:000000000001A37E                 db 0FFh
.eh_frame:000000000001A37F                 db 0FFh
.eh_frame:000000000001A380                 db  30h ; 0
.eh_frame:000000000001A381                 db  17h
.eh_frame:000000000001A382                 db    0
.eh_frame:000000000001A383                 db    0
.eh_frame:000000000001A384                 db    0
.eh_frame:000000000001A385                 db  42h ; B
.eh_frame:000000000001A386                 db  0Eh
.eh_frame:000000000001A387                 db  10h
.eh_frame:000000000001A388                 db  8Fh
.eh_frame:000000000001A389                 db    2
.eh_frame:000000000001A38A                 db  42h ; B
.eh_frame:000000000001A38B                 db  0Eh
.eh_frame:000000000001A38C                 db  18h
.eh_frame:000000000001A38D                 db  8Eh
.eh_frame:000000000001A38E                 db    3
.eh_frame:000000000001A38F                 db  42h ; B
.eh_frame:000000000001A390                 db  0Eh
.eh_frame:000000000001A391                 db  20h
.eh_frame:000000000001A392                 db  8Dh
.eh_frame:000000000001A393                 db    4
.eh_frame:000000000001A394                 db  42h ; B
.eh_frame:000000000001A395                 db  0Eh
.eh_frame:000000000001A396                 db  28h ; (
.eh_frame:000000000001A397                 db  8Ch
.eh_frame:000000000001A398                 db    5
.eh_frame:000000000001A399                 db  44h ; D
.eh_frame:000000000001A39A                 db  0Eh
.eh_frame:000000000001A39B                 db  30h ; 0
.eh_frame:000000000001A39C                 db  86h
.eh_frame:000000000001A39D                 db    6
.eh_frame:000000000001A39E                 db  41h ; A
.eh_frame:000000000001A39F                 db  0Eh
.eh_frame:000000000001A3A0                 db  38h ; 8
.eh_frame:000000000001A3A1                 db  83h
.eh_frame:000000000001A3A2                 db    7
.eh_frame:000000000001A3A3                 db  52h ; R
.eh_frame:000000000001A3A4                 db  0Eh
.eh_frame:000000000001A3A5                 db 0F0h
.eh_frame:000000000001A3A6                 db    4
.eh_frame:000000000001A3A7                 db    3
.eh_frame:000000000001A3A8                 db  7Ch ; |
.eh_frame:000000000001A3A9                 db  0Bh
.eh_frame:000000000001A3AA                 db  0Ah
.eh_frame:000000000001A3AB                 db  0Eh
.eh_frame:000000000001A3AC                 db  38h ; 8
.eh_frame:000000000001A3AD                 db  41h ; A
.eh_frame:000000000001A3AE                 db  0Eh
.eh_frame:000000000001A3AF                 db  30h ; 0
.eh_frame:000000000001A3B0                 db  41h ; A
.eh_frame:000000000001A3B1                 db  0Eh
.eh_frame:000000000001A3B2                 db  28h ; (
.eh_frame:000000000001A3B3                 db  42h ; B
.eh_frame:000000000001A3B4                 db  0Eh
.eh_frame:000000000001A3B5                 db  20h
.eh_frame:000000000001A3B6                 db  42h ; B
.eh_frame:000000000001A3B7                 db  0Eh
.eh_frame:000000000001A3B8                 db  18h
.eh_frame:000000000001A3B9                 db  42h ; B
.eh_frame:000000000001A3BA                 db  0Eh
.eh_frame:000000000001A3BB                 db  10h
.eh_frame:000000000001A3BC                 db  42h ; B
.eh_frame:000000000001A3BD                 db  0Eh
.eh_frame:000000000001A3BE                 db    8
.eh_frame:000000000001A3BF                 db  4Bh ; K
.eh_frame:000000000001A3C0                 db  0Bh
.eh_frame:000000000001A3C1                 db    0
.eh_frame:000000000001A3C2                 db    0
.eh_frame:000000000001A3C3                 db    0
.eh_frame:000000000001A3C4                 db  5Ch ; \
.eh_frame:000000000001A3C5                 db    0
.eh_frame:000000000001A3C6                 db    0
.eh_frame:000000000001A3C7                 db    0
.eh_frame:000000000001A3C8                 db    8
.eh_frame:000000000001A3C9                 db  1Fh
.eh_frame:000000000001A3CA                 db    0
.eh_frame:000000000001A3CB                 db    0
.eh_frame:000000000001A3CC                 db  54h ; T
.eh_frame:000000000001A3CD                 db  74h ; t
.eh_frame:000000000001A3CE                 db 0FFh
.eh_frame:000000000001A3CF                 db 0FFh
.eh_frame:000000000001A3D0                 db  50h ; P
.eh_frame:000000000001A3D1                 db    8
.eh_frame:000000000001A3D2                 db    0
.eh_frame:000000000001A3D3                 db    0
.eh_frame:000000000001A3D4                 db    0
.eh_frame:000000000001A3D5                 db  42h ; B
.eh_frame:000000000001A3D6                 db  0Eh
.eh_frame:000000000001A3D7                 db  10h
.eh_frame:000000000001A3D8                 db  8Fh
.eh_frame:000000000001A3D9                 db    2
.eh_frame:000000000001A3DA                 db  42h ; B
.eh_frame:000000000001A3DB                 db  0Eh
.eh_frame:000000000001A3DC                 db  18h
.eh_frame:000000000001A3DD                 db  8Eh
.eh_frame:000000000001A3DE                 db    3
.eh_frame:000000000001A3DF                 db  45h ; E
.eh_frame:000000000001A3E0                 db  0Eh
.eh_frame:000000000001A3E1                 db  20h
.eh_frame:000000000001A3E2                 db  8Dh
.eh_frame:000000000001A3E3                 db    4
.eh_frame:000000000001A3E4                 db  42h ; B
.eh_frame:000000000001A3E5                 db  0Eh
.eh_frame:000000000001A3E6                 db  28h ; (
.eh_frame:000000000001A3E7                 db  8Ch
.eh_frame:000000000001A3E8                 db    5
.eh_frame:000000000001A3E9                 db  44h ; D
.eh_frame:000000000001A3EA                 db  0Eh
.eh_frame:000000000001A3EB                 db  30h ; 0
.eh_frame:000000000001A3EC                 db  86h
.eh_frame:000000000001A3ED                 db    6
.eh_frame:000000000001A3EE                 db  41h ; A
.eh_frame:000000000001A3EF                 db  0Eh
.eh_frame:000000000001A3F0                 db  38h ; 8
.eh_frame:000000000001A3F1                 db  83h
.eh_frame:000000000001A3F2                 db    7
.eh_frame:000000000001A3F3                 db  55h ; U
.eh_frame:000000000001A3F4                 db  0Eh
.eh_frame:000000000001A3F5                 db 0E0h
.eh_frame:000000000001A3F6                 db    1
.eh_frame:000000000001A3F7                 db    2
.eh_frame:000000000001A3F8                 db  91h
.eh_frame:000000000001A3F9                 db  0Ah
.eh_frame:000000000001A3FA                 db  0Eh
.eh_frame:000000000001A3FB                 db  38h ; 8
.eh_frame:000000000001A3FC                 db  41h ; A
.eh_frame:000000000001A3FD                 db  0Eh
.eh_frame:000000000001A3FE                 db  30h ; 0
.eh_frame:000000000001A3FF                 db  41h ; A
.eh_frame:000000000001A400                 db  0Eh
.eh_frame:000000000001A401                 db  28h ; (
.eh_frame:000000000001A402                 db  42h ; B
.eh_frame:000000000001A403                 db  0Eh
.eh_frame:000000000001A404                 db  20h
.eh_frame:000000000001A405                 db  42h ; B
.eh_frame:000000000001A406                 db  0Eh
.eh_frame:000000000001A407                 db  18h
.eh_frame:000000000001A408                 db  42h ; B
.eh_frame:000000000001A409                 db  0Eh
.eh_frame:000000000001A40A                 db  10h
.eh_frame:000000000001A40B                 db  42h ; B
.eh_frame:000000000001A40C                 db  0Eh
.eh_frame:000000000001A40D                 db    8
.eh_frame:000000000001A40E                 db  48h ; H
.eh_frame:000000000001A40F                 db  0Bh
.eh_frame:000000000001A410                 db    3
.eh_frame:000000000001A411                 db 0C3h
.eh_frame:000000000001A412                 db    5
.eh_frame:000000000001A413                 db  0Eh
.eh_frame:000000000001A414                 db 0E8h
.eh_frame:000000000001A415                 db    1
.eh_frame:000000000001A416                 db  4Ah ; J
.eh_frame:000000000001A417                 db  0Eh
.eh_frame:000000000001A418                 db 0F0h
.eh_frame:000000000001A419                 db    1
.eh_frame:000000000001A41A                 db  56h ; V
.eh_frame:000000000001A41B                 db  0Eh
.eh_frame:000000000001A41C                 db 0E8h
.eh_frame:000000000001A41D                 db    1
.eh_frame:000000000001A41E                 db  41h ; A
.eh_frame:000000000001A41F                 db  0Eh
.eh_frame:000000000001A420                 db 0E0h
.eh_frame:000000000001A421                 db    1
.eh_frame:000000000001A422                 db    0
.eh_frame:000000000001A423                 db    0
.eh_frame:000000000001A424                 db  40h ; @
.eh_frame:000000000001A425                 db    0
.eh_frame:000000000001A426                 db    0
.eh_frame:000000000001A427                 db    0
.eh_frame:000000000001A428                 db  68h ; h
.eh_frame:000000000001A429                 db  1Fh
.eh_frame:000000000001A42A                 db    0
.eh_frame:000000000001A42B                 db    0
.eh_frame:000000000001A42C                 db  44h ; D
.eh_frame:000000000001A42D                 db  7Ch ; |
.eh_frame:000000000001A42E                 db 0FFh
.eh_frame:000000000001A42F                 db 0FFh
.eh_frame:000000000001A430                 db  5Dh ; ]
.eh_frame:000000000001A431                 db    2
.eh_frame:000000000001A432                 db    0
.eh_frame:000000000001A433                 db    0
.eh_frame:000000000001A434                 db    0
.eh_frame:000000000001A435                 db  42h ; B
.eh_frame:000000000001A436                 db  0Eh
.eh_frame:000000000001A437                 db  10h
.eh_frame:000000000001A438                 db  8Eh
.eh_frame:000000000001A439                 db    2
.eh_frame:000000000001A43A                 db  42h ; B
.eh_frame:000000000001A43B                 db  0Eh
.eh_frame:000000000001A43C                 db  18h
.eh_frame:000000000001A43D                 db  8Dh
.eh_frame:000000000001A43E                 db    3
.eh_frame:000000000001A43F                 db  45h ; E
.eh_frame:000000000001A440                 db  0Eh
.eh_frame:000000000001A441                 db  20h
.eh_frame:000000000001A442                 db  8Ch
.eh_frame:000000000001A443                 db    4
.eh_frame:000000000001A444                 db  41h ; A
.eh_frame:000000000001A445                 db  0Eh
.eh_frame:000000000001A446                 db  28h ; (
.eh_frame:000000000001A447                 db  86h
.eh_frame:000000000001A448                 db    5
.eh_frame:000000000001A449                 db  44h ; D
.eh_frame:000000000001A44A                 db  0Eh
.eh_frame:000000000001A44B                 db  30h ; 0
.eh_frame:000000000001A44C                 db  83h
.eh_frame:000000000001A44D                 db    6
.eh_frame:000000000001A44E                 db  4Ah ; J
.eh_frame:000000000001A44F                 db  0Eh
.eh_frame:000000000001A450                 db  50h ; P
.eh_frame:000000000001A451                 db    2
.eh_frame:000000000001A452                 db  61h ; a
.eh_frame:000000000001A453                 db  0Ah
.eh_frame:000000000001A454                 db  0Eh
.eh_frame:000000000001A455                 db  30h ; 0
.eh_frame:000000000001A456                 db  41h ; A
.eh_frame:000000000001A457                 db  0Eh
.eh_frame:000000000001A458                 db  28h ; (
.eh_frame:000000000001A459                 db  41h ; A
.eh_frame:000000000001A45A                 db  0Eh
.eh_frame:000000000001A45B                 db  20h
.eh_frame:000000000001A45C                 db  42h ; B
.eh_frame:000000000001A45D                 db  0Eh
.eh_frame:000000000001A45E                 db  18h
.eh_frame:000000000001A45F                 db  42h ; B
.eh_frame:000000000001A460                 db  0Eh
.eh_frame:000000000001A461                 db  10h
.eh_frame:000000000001A462                 db  42h ; B
.eh_frame:000000000001A463                 db  0Eh
.eh_frame:000000000001A464                 db    8
.eh_frame:000000000001A465                 db  47h ; G
.eh_frame:000000000001A466                 db  0Bh
.eh_frame:000000000001A467                 db    0
.eh_frame:000000000001A468                 db  48h ; H
.eh_frame:000000000001A469                 db    0
.eh_frame:000000000001A46A                 db    0
.eh_frame:000000000001A46B                 db    0
.eh_frame:000000000001A46C                 db 0ACh
.eh_frame:000000000001A46D                 db  1Fh
.eh_frame:000000000001A46E                 db    0
.eh_frame:000000000001A46F                 db    0
.eh_frame:000000000001A470                 db  60h ; `
.eh_frame:000000000001A471                 db  7Eh ; ~
.eh_frame:000000000001A472                 db 0FFh
.eh_frame:000000000001A473                 db 0FFh
.eh_frame:000000000001A474                 db 0FDh
.eh_frame:000000000001A475                 db    6
.eh_frame:000000000001A476                 db    0
.eh_frame:000000000001A477                 db    0
.eh_frame:000000000001A478                 db    0
.eh_frame:000000000001A479                 db  42h ; B
.eh_frame:000000000001A47A                 db  0Eh
.eh_frame:000000000001A47B                 db  10h
.eh_frame:000000000001A47C                 db  8Fh
.eh_frame:000000000001A47D                 db    2
.eh_frame:000000000001A47E                 db  42h ; B
.eh_frame:000000000001A47F                 db  0Eh
.eh_frame:000000000001A480                 db  18h
.eh_frame:000000000001A481                 db  8Eh
.eh_frame:000000000001A482                 db    3
.eh_frame:000000000001A483                 db  42h ; B
.eh_frame:000000000001A484                 db  0Eh
.eh_frame:000000000001A485                 db  20h
.eh_frame:000000000001A486                 db  8Dh
.eh_frame:000000000001A487                 db    4
.eh_frame:000000000001A488                 db  42h ; B
.eh_frame:000000000001A489                 db  0Eh
.eh_frame:000000000001A48A                 db  28h ; (
.eh_frame:000000000001A48B                 db  8Ch
.eh_frame:000000000001A48C                 db    5
.eh_frame:000000000001A48D                 db  41h ; A
.eh_frame:000000000001A48E                 db  0Eh
.eh_frame:000000000001A48F                 db  30h ; 0
.eh_frame:000000000001A490                 db  86h
.eh_frame:000000000001A491                 db    6
.eh_frame:000000000001A492                 db  41h ; A
.eh_frame:000000000001A493                 db  0Eh
.eh_frame:000000000001A494                 db  38h ; 8
.eh_frame:000000000001A495                 db  83h
.eh_frame:000000000001A496                 db    7
.eh_frame:000000000001A497                 db  47h ; G
.eh_frame:000000000001A498                 db  0Eh
.eh_frame:000000000001A499                 db  70h ; p
.eh_frame:000000000001A49A                 db    2
.eh_frame:000000000001A49B                 db 0CBh
.eh_frame:000000000001A49C                 db  0Ah
.eh_frame:000000000001A49D                 db  0Eh
.eh_frame:000000000001A49E                 db  38h ; 8
.eh_frame:000000000001A49F                 db  41h ; A
.eh_frame:000000000001A4A0                 db  0Eh
.eh_frame:000000000001A4A1                 db  30h ; 0
.eh_frame:000000000001A4A2                 db  41h ; A
.eh_frame:000000000001A4A3                 db  0Eh
.eh_frame:000000000001A4A4                 db  28h ; (
.eh_frame:000000000001A4A5                 db  42h ; B
.eh_frame:000000000001A4A6                 db  0Eh
.eh_frame:000000000001A4A7                 db  20h
.eh_frame:000000000001A4A8                 db  42h ; B
.eh_frame:000000000001A4A9                 db  0Eh
.eh_frame:000000000001A4AA                 db  18h
.eh_frame:000000000001A4AB                 db  42h ; B
.eh_frame:000000000001A4AC                 db  0Eh
.eh_frame:000000000001A4AD                 db  10h
.eh_frame:000000000001A4AE                 db  42h ; B
.eh_frame:000000000001A4AF                 db  0Eh
.eh_frame:000000000001A4B0                 db    8
.eh_frame:000000000001A4B1                 db  4Ah ; J
.eh_frame:000000000001A4B2                 db  0Bh
.eh_frame:000000000001A4B3                 db    0
.eh_frame:000000000001A4B4                 db  3Ch ; <
.eh_frame:000000000001A4B5                 db    0
.eh_frame:000000000001A4B6                 db    0
.eh_frame:000000000001A4B7                 db    0
.eh_frame:000000000001A4B8                 db 0F8h
.eh_frame:000000000001A4B9                 db  1Fh
.eh_frame:000000000001A4BA                 db    0
.eh_frame:000000000001A4BB                 db    0
.eh_frame:000000000001A4BC                 db  14h
.eh_frame:000000000001A4BD                 db  85h
.eh_frame:000000000001A4BE                 db 0FFh
.eh_frame:000000000001A4BF                 db 0FFh
.eh_frame:000000000001A4C0                 db 0B6h
.eh_frame:000000000001A4C1                 db    0
.eh_frame:000000000001A4C2                 db    0
.eh_frame:000000000001A4C3                 db    0
.eh_frame:000000000001A4C4                 db    0
.eh_frame:000000000001A4C5                 db  42h ; B
.eh_frame:000000000001A4C6                 db  0Eh
.eh_frame:000000000001A4C7                 db  10h
.eh_frame:000000000001A4C8                 db  8Eh
.eh_frame:000000000001A4C9                 db    2
.eh_frame:000000000001A4CA                 db  45h ; E
.eh_frame:000000000001A4CB                 db  0Eh
.eh_frame:000000000001A4CC                 db  18h
.eh_frame:000000000001A4CD                 db  8Dh
.eh_frame:000000000001A4CE                 db    3
.eh_frame:000000000001A4CF                 db  45h ; E
.eh_frame:000000000001A4D0                 db  0Eh
.eh_frame:000000000001A4D1                 db  20h
.eh_frame:000000000001A4D2                 db  8Ch
.eh_frame:000000000001A4D3                 db    4
.eh_frame:000000000001A4D4                 db  48h ; H
.eh_frame:000000000001A4D5                 db  0Eh
.eh_frame:000000000001A4D6                 db  28h ; (
.eh_frame:000000000001A4D7                 db  86h
.eh_frame:000000000001A4D8                 db    5
.eh_frame:000000000001A4D9                 db  44h ; D
.eh_frame:000000000001A4DA                 db  0Eh
.eh_frame:000000000001A4DB                 db  30h ; 0
.eh_frame:000000000001A4DC                 db  83h
.eh_frame:000000000001A4DD                 db    6
.eh_frame:000000000001A4DE                 db    2
.eh_frame:000000000001A4DF                 db  83h
.eh_frame:000000000001A4E0                 db  0Ah
.eh_frame:000000000001A4E1                 db  0Eh
.eh_frame:000000000001A4E2                 db  28h ; (
.eh_frame:000000000001A4E3                 db  41h ; A
.eh_frame:000000000001A4E4                 db  0Eh
.eh_frame:000000000001A4E5                 db  20h
.eh_frame:000000000001A4E6                 db  42h ; B
.eh_frame:000000000001A4E7                 db  0Eh
.eh_frame:000000000001A4E8                 db  18h
.eh_frame:000000000001A4E9                 db  42h ; B
.eh_frame:000000000001A4EA                 db  0Eh
.eh_frame:000000000001A4EB                 db  10h
.eh_frame:000000000001A4EC                 db  42h ; B
.eh_frame:000000000001A4ED                 db  0Eh
.eh_frame:000000000001A4EE                 db    8
.eh_frame:000000000001A4EF                 db  46h ; F
.eh_frame:000000000001A4F0                 db  0Bh
.eh_frame:000000000001A4F1                 db    0
.eh_frame:000000000001A4F2                 db    0
.eh_frame:000000000001A4F3                 db    0
.eh_frame:000000000001A4F4                 db  5Ch ; \
.eh_frame:000000000001A4F5                 db    0
.eh_frame:000000000001A4F6                 db    0
.eh_frame:000000000001A4F7                 db    0
.eh_frame:000000000001A4F8                 db  38h ; 8
.eh_frame:000000000001A4F9                 db  20h
.eh_frame:000000000001A4FA                 db    0
.eh_frame:000000000001A4FB                 db    0
.eh_frame:000000000001A4FC                 db  94h
.eh_frame:000000000001A4FD                 db  85h
.eh_frame:000000000001A4FE                 db 0FFh
.eh_frame:000000000001A4FF                 db 0FFh
.eh_frame:000000000001A500                 db 0D3h
.eh_frame:000000000001A501                 db  14h
.eh_frame:000000000001A502                 db    0
.eh_frame:000000000001A503                 db    0
.eh_frame:000000000001A504                 db    0
.eh_frame:000000000001A505                 db  42h ; B
.eh_frame:000000000001A506                 db  0Eh
.eh_frame:000000000001A507                 db  10h
.eh_frame:000000000001A508                 db  8Fh
.eh_frame:000000000001A509                 db    2
.eh_frame:000000000001A50A                 db  42h ; B
.eh_frame:000000000001A50B                 db  0Eh
.eh_frame:000000000001A50C                 db  18h
.eh_frame:000000000001A50D                 db  8Eh
.eh_frame:000000000001A50E                 db    3
.eh_frame:000000000001A50F                 db  42h ; B
.eh_frame:000000000001A510                 db  0Eh
.eh_frame:000000000001A511                 db  20h
.eh_frame:000000000001A512                 db  8Dh
.eh_frame:000000000001A513                 db    4
.eh_frame:000000000001A514                 db  42h ; B
.eh_frame:000000000001A515                 db  0Eh
.eh_frame:000000000001A516                 db  28h ; (
.eh_frame:000000000001A517                 db  8Ch
.eh_frame:000000000001A518                 db    5
.eh_frame:000000000001A519                 db  41h ; A
.eh_frame:000000000001A51A                 db  0Eh
.eh_frame:000000000001A51B                 db  30h ; 0
.eh_frame:000000000001A51C                 db  86h
.eh_frame:000000000001A51D                 db    6
.eh_frame:000000000001A51E                 db  41h ; A
.eh_frame:000000000001A51F                 db  0Eh
.eh_frame:000000000001A520                 db  38h ; 8
.eh_frame:000000000001A521                 db  83h
.eh_frame:000000000001A522                 db    7
.eh_frame:000000000001A523                 db  47h ; G
.eh_frame:000000000001A524                 db  0Eh
.eh_frame:000000000001A525                 db 0E0h
.eh_frame:000000000001A526                 db    2
.eh_frame:000000000001A527                 db    3
.eh_frame:000000000001A528                 db  22h ; "
.eh_frame:000000000001A529                 db    1
.eh_frame:000000000001A52A                 db  0Ah
.eh_frame:000000000001A52B                 db  0Eh
.eh_frame:000000000001A52C                 db  38h ; 8
.eh_frame:000000000001A52D                 db  41h ; A
.eh_frame:000000000001A52E                 db  0Eh
.eh_frame:000000000001A52F                 db  30h ; 0
.eh_frame:000000000001A530                 db  41h ; A
.eh_frame:000000000001A531                 db  0Eh
.eh_frame:000000000001A532                 db  28h ; (
.eh_frame:000000000001A533                 db  42h ; B
.eh_frame:000000000001A534                 db  0Eh
.eh_frame:000000000001A535                 db  20h
.eh_frame:000000000001A536                 db  42h ; B
.eh_frame:000000000001A537                 db  0Eh
.eh_frame:000000000001A538                 db  18h
.eh_frame:000000000001A539                 db  42h ; B
.eh_frame:000000000001A53A                 db  0Eh
.eh_frame:000000000001A53B                 db  10h
.eh_frame:000000000001A53C                 db  42h ; B
.eh_frame:000000000001A53D                 db  0Eh
.eh_frame:000000000001A53E                 db    8
.eh_frame:000000000001A53F                 db  41h ; A
.eh_frame:000000000001A540                 db  0Bh
.eh_frame:000000000001A541                 db    3
.eh_frame:000000000001A542                 db 0BFh
.eh_frame:000000000001A543                 db  0Bh
.eh_frame:000000000001A544                 db  0Eh
.eh_frame:000000000001A545                 db 0E8h
.eh_frame:000000000001A546                 db    2
.eh_frame:000000000001A547                 db  4Ch ; L
.eh_frame:000000000001A548                 db  0Eh
.eh_frame:000000000001A549                 db 0F0h
.eh_frame:000000000001A54A                 db    2
.eh_frame:000000000001A54B                 db  64h ; d
.eh_frame:000000000001A54C                 db  0Eh
.eh_frame:000000000001A54D                 db 0E8h
.eh_frame:000000000001A54E                 db    2
.eh_frame:000000000001A54F                 db  42h ; B
.eh_frame:000000000001A550                 db  0Eh
.eh_frame:000000000001A551                 db 0E0h
.eh_frame:000000000001A552                 db    2
.eh_frame:000000000001A553                 db    0
.eh_frame:000000000001A554                 db  48h ; H
.eh_frame:000000000001A555                 db    0
.eh_frame:000000000001A556                 db    0
.eh_frame:000000000001A557                 db    0
.eh_frame:000000000001A558                 db  98h
.eh_frame:000000000001A559                 db  20h
.eh_frame:000000000001A55A                 db    0
.eh_frame:000000000001A55B                 db    0
.eh_frame:000000000001A55C                 db  14h
.eh_frame:000000000001A55D                 db  9Ah
.eh_frame:000000000001A55E                 db 0FFh
.eh_frame:000000000001A55F                 db 0FFh
.eh_frame:000000000001A560                 db  82h
.eh_frame:000000000001A561                 db    1
.eh_frame:000000000001A562                 db    0
.eh_frame:000000000001A563                 db    0
.eh_frame:000000000001A564                 db    0
.eh_frame:000000000001A565                 db  42h ; B
.eh_frame:000000000001A566                 db  0Eh
.eh_frame:000000000001A567                 db  10h
.eh_frame:000000000001A568                 db  8Fh
.eh_frame:000000000001A569                 db    2
.eh_frame:000000000001A56A                 db  42h ; B
.eh_frame:000000000001A56B                 db  0Eh
.eh_frame:000000000001A56C                 db  18h
.eh_frame:000000000001A56D                 db  8Eh
.eh_frame:000000000001A56E                 db    3
.eh_frame:000000000001A56F                 db  45h ; E
.eh_frame:000000000001A570                 db  0Eh
.eh_frame:000000000001A571                 db  20h
.eh_frame:000000000001A572                 db  8Dh
.eh_frame:000000000001A573                 db    4
.eh_frame:000000000001A574                 db  42h ; B
.eh_frame:000000000001A575                 db  0Eh
.eh_frame:000000000001A576                 db  28h ; (
.eh_frame:000000000001A577                 db  8Ch
.eh_frame:000000000001A578                 db    5
.eh_frame:000000000001A579                 db  44h ; D
.eh_frame:000000000001A57A                 db  0Eh
.eh_frame:000000000001A57B                 db  30h ; 0
.eh_frame:000000000001A57C                 db  86h
.eh_frame:000000000001A57D                 db    6
.eh_frame:000000000001A57E                 db  41h ; A
.eh_frame:000000000001A57F                 db  0Eh
.eh_frame:000000000001A580                 db  38h ; 8
.eh_frame:000000000001A581                 db  83h
.eh_frame:000000000001A582                 db    7
.eh_frame:000000000001A583                 db  4Dh ; M
.eh_frame:000000000001A584                 db  0Eh
.eh_frame:000000000001A585                 db  80h
.eh_frame:000000000001A586                 db    1
.eh_frame:000000000001A587                 db    2
.eh_frame:000000000001A588                 db 0FAh
.eh_frame:000000000001A589                 db  0Ah
.eh_frame:000000000001A58A                 db  0Eh
.eh_frame:000000000001A58B                 db  38h ; 8
.eh_frame:000000000001A58C                 db  41h ; A
.eh_frame:000000000001A58D                 db  0Eh
.eh_frame:000000000001A58E                 db  30h ; 0
.eh_frame:000000000001A58F                 db  41h ; A
.eh_frame:000000000001A590                 db  0Eh
.eh_frame:000000000001A591                 db  28h ; (
.eh_frame:000000000001A592                 db  42h ; B
.eh_frame:000000000001A593                 db  0Eh
.eh_frame:000000000001A594                 db  20h
.eh_frame:000000000001A595                 db  42h ; B
.eh_frame:000000000001A596                 db  0Eh
.eh_frame:000000000001A597                 db  18h
.eh_frame:000000000001A598                 db  42h ; B
.eh_frame:000000000001A599                 db  0Eh
.eh_frame:000000000001A59A                 db  10h
.eh_frame:000000000001A59B                 db  42h ; B
.eh_frame:000000000001A59C                 db  0Eh
.eh_frame:000000000001A59D                 db    8
.eh_frame:000000000001A59E                 db  47h ; G
.eh_frame:000000000001A59F                 db  0Bh
.eh_frame:000000000001A5A0                 db  4Ch ; L
.eh_frame:000000000001A5A1                 db    0
.eh_frame:000000000001A5A2                 db    0
.eh_frame:000000000001A5A3                 db    0
.eh_frame:000000000001A5A4                 db 0E4h
.eh_frame:000000000001A5A5                 db  20h
.eh_frame:000000000001A5A6                 db    0
.eh_frame:000000000001A5A7                 db    0
.eh_frame:000000000001A5A8                 db  58h ; X
.eh_frame:000000000001A5A9                 db  9Bh
.eh_frame:000000000001A5AA                 db 0FFh
.eh_frame:000000000001A5AB                 db 0FFh
.eh_frame:000000000001A5AC                 db  7Fh ; 
.eh_frame:000000000001A5AD                 db    1
.eh_frame:000000000001A5AE                 db    0
.eh_frame:000000000001A5AF                 db    0
.eh_frame:000000000001A5B0                 db    0
.eh_frame:000000000001A5B1                 db  42h ; B
.eh_frame:000000000001A5B2                 db  0Eh
.eh_frame:000000000001A5B3                 db  10h
.eh_frame:000000000001A5B4                 db  8Fh
.eh_frame:000000000001A5B5                 db    2
.eh_frame:000000000001A5B6                 db  42h ; B
.eh_frame:000000000001A5B7                 db  0Eh
.eh_frame:000000000001A5B8                 db  18h
.eh_frame:000000000001A5B9                 db  8Eh
.eh_frame:000000000001A5BA                 db    3
.eh_frame:000000000001A5BB                 db  45h ; E
.eh_frame:000000000001A5BC                 db  0Eh
.eh_frame:000000000001A5BD                 db  20h
.eh_frame:000000000001A5BE                 db  8Dh
.eh_frame:000000000001A5BF                 db    4
.eh_frame:000000000001A5C0                 db  42h ; B
.eh_frame:000000000001A5C1                 db  0Eh
.eh_frame:000000000001A5C2                 db  28h ; (
.eh_frame:000000000001A5C3                 db  8Ch
.eh_frame:000000000001A5C4                 db    5
.eh_frame:000000000001A5C5                 db  44h ; D
.eh_frame:000000000001A5C6                 db  0Eh
.eh_frame:000000000001A5C7                 db  30h ; 0
.eh_frame:000000000001A5C8                 db  86h
.eh_frame:000000000001A5C9                 db    6
.eh_frame:000000000001A5CA                 db  41h ; A
.eh_frame:000000000001A5CB                 db  0Eh
.eh_frame:000000000001A5CC                 db  38h ; 8
.eh_frame:000000000001A5CD                 db  83h
.eh_frame:000000000001A5CE                 db    7
.eh_frame:000000000001A5CF                 db  4Ah ; J
.eh_frame:000000000001A5D0                 db  0Eh
.eh_frame:000000000001A5D1                 db  90h
.eh_frame:000000000001A5D2                 db    1
.eh_frame:000000000001A5D3                 db    3
.eh_frame:000000000001A5D4                 db  45h ; E
.eh_frame:000000000001A5D5                 db    1
.eh_frame:000000000001A5D6                 db  0Ah
.eh_frame:000000000001A5D7                 db  0Eh
.eh_frame:000000000001A5D8                 db  38h ; 8
.eh_frame:000000000001A5D9                 db  41h ; A
.eh_frame:000000000001A5DA                 db  0Eh
.eh_frame:000000000001A5DB                 db  30h ; 0
.eh_frame:000000000001A5DC                 db  41h ; A
.eh_frame:000000000001A5DD                 db  0Eh
.eh_frame:000000000001A5DE                 db  28h ; (
.eh_frame:000000000001A5DF                 db  42h ; B
.eh_frame:000000000001A5E0                 db  0Eh
.eh_frame:000000000001A5E1                 db  20h
.eh_frame:000000000001A5E2                 db  42h ; B
.eh_frame:000000000001A5E3                 db  0Eh
.eh_frame:000000000001A5E4                 db  18h
.eh_frame:000000000001A5E5                 db  42h ; B
.eh_frame:000000000001A5E6                 db  0Eh
.eh_frame:000000000001A5E7                 db  10h
.eh_frame:000000000001A5E8                 db  42h ; B
.eh_frame:000000000001A5E9                 db  0Eh
.eh_frame:000000000001A5EA                 db    8
.eh_frame:000000000001A5EB                 db  47h ; G
.eh_frame:000000000001A5EC                 db  0Bh
.eh_frame:000000000001A5ED                 db    0
.eh_frame:000000000001A5EE                 db    0
.eh_frame:000000000001A5EF                 db    0
.eh_frame:000000000001A5F0                 db  4Ch ; L
.eh_frame:000000000001A5F1                 db    0
.eh_frame:000000000001A5F2                 db    0
.eh_frame:000000000001A5F3                 db    0
.eh_frame:000000000001A5F4                 db  34h ; 4
.eh_frame:000000000001A5F5                 db  21h ; !
.eh_frame:000000000001A5F6                 db    0
.eh_frame:000000000001A5F7                 db    0
.eh_frame:000000000001A5F8                 db  88h
.eh_frame:000000000001A5F9                 db  9Ch
.eh_frame:000000000001A5FA                 db 0FFh
.eh_frame:000000000001A5FB                 db 0FFh
.eh_frame:000000000001A5FC                 db 0F5h
.eh_frame:000000000001A5FD                 db  10h
.eh_frame:000000000001A5FE                 db    0
.eh_frame:000000000001A5FF                 db    0
.eh_frame:000000000001A600                 db    0
.eh_frame:000000000001A601                 db  42h ; B
.eh_frame:000000000001A602                 db  0Eh
.eh_frame:000000000001A603                 db  10h
.eh_frame:000000000001A604                 db  8Fh
.eh_frame:000000000001A605                 db    2
.eh_frame:000000000001A606                 db  42h ; B
.eh_frame:000000000001A607                 db  0Eh
.eh_frame:000000000001A608                 db  18h
.eh_frame:000000000001A609                 db  8Eh
.eh_frame:000000000001A60A                 db    3
.eh_frame:000000000001A60B                 db  42h ; B
.eh_frame:000000000001A60C                 db  0Eh
.eh_frame:000000000001A60D                 db  20h
.eh_frame:000000000001A60E                 db  8Dh
.eh_frame:000000000001A60F                 db    4
.eh_frame:000000000001A610                 db  42h ; B
.eh_frame:000000000001A611                 db  0Eh
.eh_frame:000000000001A612                 db  28h ; (
.eh_frame:000000000001A613                 db  8Ch
.eh_frame:000000000001A614                 db    5
.eh_frame:000000000001A615                 db  41h ; A
.eh_frame:000000000001A616                 db  0Eh
.eh_frame:000000000001A617                 db  30h ; 0
.eh_frame:000000000001A618                 db  86h
.eh_frame:000000000001A619                 db    6
.eh_frame:000000000001A61A                 db  41h ; A
.eh_frame:000000000001A61B                 db  0Eh
.eh_frame:000000000001A61C                 db  38h ; 8
.eh_frame:000000000001A61D                 db  83h
.eh_frame:000000000001A61E                 db    7
.eh_frame:000000000001A61F                 db  47h ; G
.eh_frame:000000000001A620                 db  0Eh
.eh_frame:000000000001A621                 db 0E0h
.eh_frame:000000000001A622                 db    2
.eh_frame:000000000001A623                 db    3
.eh_frame:000000000001A624                 db 0A9h
.eh_frame:000000000001A625                 db    3
.eh_frame:000000000001A626                 db  0Ah
.eh_frame:000000000001A627                 db  0Eh
.eh_frame:000000000001A628                 db  38h ; 8
.eh_frame:000000000001A629                 db  41h ; A
.eh_frame:000000000001A62A                 db  0Eh
.eh_frame:000000000001A62B                 db  30h ; 0
.eh_frame:000000000001A62C                 db  41h ; A
.eh_frame:000000000001A62D                 db  0Eh
.eh_frame:000000000001A62E                 db  28h ; (
.eh_frame:000000000001A62F                 db  42h ; B
.eh_frame:000000000001A630                 db  0Eh
.eh_frame:000000000001A631                 db  20h
.eh_frame:000000000001A632                 db  42h ; B
.eh_frame:000000000001A633                 db  0Eh
.eh_frame:000000000001A634                 db  18h
.eh_frame:000000000001A635                 db  42h ; B
.eh_frame:000000000001A636                 db  0Eh
.eh_frame:000000000001A637                 db  10h
.eh_frame:000000000001A638                 db  42h ; B
.eh_frame:000000000001A639                 db  0Eh
.eh_frame:000000000001A63A                 db    8
.eh_frame:000000000001A63B                 db  41h ; A
.eh_frame:000000000001A63C                 db  0Bh
.eh_frame:000000000001A63D                 db    0
.eh_frame:000000000001A63E                 db    0
.eh_frame:000000000001A63F                 db    0
.eh_frame:000000000001A640                 db  1Ch
.eh_frame:000000000001A641                 db    0
.eh_frame:000000000001A642                 db    0
.eh_frame:000000000001A643                 db    0
.eh_frame:000000000001A644                 db  84h
.eh_frame:000000000001A645                 db  21h ; !
.eh_frame:000000000001A646                 db    0
.eh_frame:000000000001A647                 db    0
.eh_frame:000000000001A648                 db  38h ; 8
.eh_frame:000000000001A649                 db 0ADh
.eh_frame:000000000001A64A                 db 0FFh
.eh_frame:000000000001A64B                 db 0FFh
.eh_frame:000000000001A64C                 db  6Fh ; o
.eh_frame:000000000001A64D                 db    0
.eh_frame:000000000001A64E                 db    0
.eh_frame:000000000001A64F                 db    0
.eh_frame:000000000001A650                 db    0
.eh_frame:000000000001A651                 db  44h ; D
.eh_frame:000000000001A652                 db  0Eh
.eh_frame:000000000001A653                 db  10h
.eh_frame:000000000001A654                 db    2
.eh_frame:000000000001A655                 db  59h ; Y
.eh_frame:000000000001A656                 db  0Ah
.eh_frame:000000000001A657                 db  0Eh
.eh_frame:000000000001A658                 db    8
.eh_frame:000000000001A659                 db  4Bh ; K
.eh_frame:000000000001A65A                 db  0Bh
.eh_frame:000000000001A65B                 db  46h ; F
.eh_frame:000000000001A65C                 db  0Eh
.eh_frame:000000000001A65D                 db    8
.eh_frame:000000000001A65E                 db    0
.eh_frame:000000000001A65F                 db    0
.eh_frame:000000000001A660                 db  10h
.eh_frame:000000000001A661                 db    0
.eh_frame:000000000001A662                 db    0
.eh_frame:000000000001A663                 db    0
.eh_frame:000000000001A664                 db 0A4h
.eh_frame:000000000001A665                 db  21h ; !
.eh_frame:000000000001A666                 db    0
.eh_frame:000000000001A667                 db    0
.eh_frame:000000000001A668                 db  88h
.eh_frame:000000000001A669                 db 0ADh
.eh_frame:000000000001A66A                 db 0FFh
.eh_frame:000000000001A66B                 db 0FFh
.eh_frame:000000000001A66C                 db  0Fh
.eh_frame:000000000001A66D                 db    0
.eh_frame:000000000001A66E                 db    0
.eh_frame:000000000001A66F                 db    0
.eh_frame:000000000001A670                 db    0
.eh_frame:000000000001A671                 db    0
.eh_frame:000000000001A672                 db    0
.eh_frame:000000000001A673                 db    0
.eh_frame:000000000001A674                 db  28h ; (
.eh_frame:000000000001A675                 db    0
.eh_frame:000000000001A676                 db    0
.eh_frame:000000000001A677                 db    0
.eh_frame:000000000001A678                 db 0B8h
.eh_frame:000000000001A679                 db  21h ; !
.eh_frame:000000000001A67A                 db    0
.eh_frame:000000000001A67B                 db    0
.eh_frame:000000000001A67C                 db  84h
.eh_frame:000000000001A67D                 db 0ADh
.eh_frame:000000000001A67E                 db 0FFh
.eh_frame:000000000001A67F                 db 0FFh
.eh_frame:000000000001A680                 db 0C3h
.eh_frame:000000000001A681                 db    0
.eh_frame:000000000001A682                 db    0
.eh_frame:000000000001A683                 db    0
.eh_frame:000000000001A684                 db    0
.eh_frame:000000000001A685                 db  42h ; B
.eh_frame:000000000001A686                 db  0Eh
.eh_frame:000000000001A687                 db  10h
.eh_frame:000000000001A688                 db  8Ch
.eh_frame:000000000001A689                 db    2
.eh_frame:000000000001A68A                 db  41h ; A
.eh_frame:000000000001A68B                 db  0Eh
.eh_frame:000000000001A68C                 db  18h
.eh_frame:000000000001A68D                 db  86h
.eh_frame:000000000001A68E                 db    3
.eh_frame:000000000001A68F                 db  43h ; C
.eh_frame:000000000001A690                 db  0Eh
.eh_frame:000000000001A691                 db  20h
.eh_frame:000000000001A692                 db  83h
.eh_frame:000000000001A693                 db    4
.eh_frame:000000000001A694                 db    2
.eh_frame:000000000001A695                 db 0B9h
.eh_frame:000000000001A696                 db  0Eh
.eh_frame:000000000001A697                 db  18h
.eh_frame:000000000001A698                 db  41h ; A
.eh_frame:000000000001A699                 db  0Eh
.eh_frame:000000000001A69A                 db  10h
.eh_frame:000000000001A69B                 db  42h ; B
.eh_frame:000000000001A69C                 db  0Eh
.eh_frame:000000000001A69D                 db    8
.eh_frame:000000000001A69E                 db    0
.eh_frame:000000000001A69F                 db    0
.eh_frame:000000000001A6A0                 db  5Ch ; \
.eh_frame:000000000001A6A1                 db    0
.eh_frame:000000000001A6A2                 db    0
.eh_frame:000000000001A6A3                 db    0
.eh_frame:000000000001A6A4                 db 0E4h
.eh_frame:000000000001A6A5                 db  21h ; !
.eh_frame:000000000001A6A6                 db    0
.eh_frame:000000000001A6A7                 db    0
.eh_frame:000000000001A6A8                 db  28h ; (
.eh_frame:000000000001A6A9                 db 0AEh
.eh_frame:000000000001A6AA                 db 0FFh
.eh_frame:000000000001A6AB                 db 0FFh
.eh_frame:000000000001A6AC                 db  7Fh ; 
.eh_frame:000000000001A6AD                 db    4
.eh_frame:000000000001A6AE                 db    0
.eh_frame:000000000001A6AF                 db    0
.eh_frame:000000000001A6B0                 db    0
.eh_frame:000000000001A6B1                 db  42h ; B
.eh_frame:000000000001A6B2                 db  0Eh
.eh_frame:000000000001A6B3                 db  10h
.eh_frame:000000000001A6B4                 db  8Fh
.eh_frame:000000000001A6B5                 db    2
.eh_frame:000000000001A6B6                 db  42h ; B
.eh_frame:000000000001A6B7                 db  0Eh
.eh_frame:000000000001A6B8                 db  18h
.eh_frame:000000000001A6B9                 db  8Eh
.eh_frame:000000000001A6BA                 db    3
.eh_frame:000000000001A6BB                 db  45h ; E
.eh_frame:000000000001A6BC                 db  0Eh
.eh_frame:000000000001A6BD                 db  20h
.eh_frame:000000000001A6BE                 db  8Dh
.eh_frame:000000000001A6BF                 db    4
.eh_frame:000000000001A6C0                 db  42h ; B
.eh_frame:000000000001A6C1                 db  0Eh
.eh_frame:000000000001A6C2                 db  28h ; (
.eh_frame:000000000001A6C3                 db  8Ch
.eh_frame:000000000001A6C4                 db    5
.eh_frame:000000000001A6C5                 db  44h ; D
.eh_frame:000000000001A6C6                 db  0Eh
.eh_frame:000000000001A6C7                 db  30h ; 0
.eh_frame:000000000001A6C8                 db  86h
.eh_frame:000000000001A6C9                 db    6
.eh_frame:000000000001A6CA                 db  41h ; A
.eh_frame:000000000001A6CB                 db  0Eh
.eh_frame:000000000001A6CC                 db  38h ; 8
.eh_frame:000000000001A6CD                 db  83h
.eh_frame:000000000001A6CE                 db    7
.eh_frame:000000000001A6CF                 db  44h ; D
.eh_frame:000000000001A6D0                 db  0Eh
.eh_frame:000000000001A6D1                 db  70h ; p
.eh_frame:000000000001A6D2                 db    2
.eh_frame:000000000001A6D3                 db 0D4h
.eh_frame:000000000001A6D4                 db  0Eh
.eh_frame:000000000001A6D5                 db  78h ; x
.eh_frame:000000000001A6D6                 db  4Bh ; K
.eh_frame:000000000001A6D7                 db  0Eh
.eh_frame:000000000001A6D8                 db  80h
.eh_frame:000000000001A6D9                 db    1
.eh_frame:000000000001A6DA                 db  41h ; A
.eh_frame:000000000001A6DB                 db  0Eh
.eh_frame:000000000001A6DC                 db  88h
.eh_frame:000000000001A6DD                 db    1
.eh_frame:000000000001A6DE                 db  42h ; B
.eh_frame:000000000001A6DF                 db  0Eh
.eh_frame:000000000001A6E0                 db  90h
.eh_frame:000000000001A6E1                 db    1
.eh_frame:000000000001A6E2                 db  5Dh ; ]
.eh_frame:000000000001A6E3                 db  0Eh
.eh_frame:000000000001A6E4                 db  70h ; p
.eh_frame:000000000001A6E5                 db  63h ; c
.eh_frame:000000000001A6E6                 db  0Ah
.eh_frame:000000000001A6E7                 db  0Eh
.eh_frame:000000000001A6E8                 db  38h ; 8
.eh_frame:000000000001A6E9                 db  44h ; D
.eh_frame:000000000001A6EA                 db  0Eh
.eh_frame:000000000001A6EB                 db  30h ; 0
.eh_frame:000000000001A6EC                 db  41h ; A
.eh_frame:000000000001A6ED                 db  0Eh
.eh_frame:000000000001A6EE                 db  28h ; (
.eh_frame:000000000001A6EF                 db  42h ; B
.eh_frame:000000000001A6F0                 db  0Eh
.eh_frame:000000000001A6F1                 db  20h
.eh_frame:000000000001A6F2                 db  42h ; B
.eh_frame:000000000001A6F3                 db  0Eh
.eh_frame:000000000001A6F4                 db  18h
.eh_frame:000000000001A6F5                 db  42h ; B
.eh_frame:000000000001A6F6                 db  0Eh
.eh_frame:000000000001A6F7                 db  10h
.eh_frame:000000000001A6F8                 db  42h ; B
.eh_frame:000000000001A6F9                 db  0Eh
.eh_frame:000000000001A6FA                 db    8
.eh_frame:000000000001A6FB                 db  45h ; E
.eh_frame:000000000001A6FC                 db  0Bh
.eh_frame:000000000001A6FD                 db    0
.eh_frame:000000000001A6FE                 db    0
.eh_frame:000000000001A6FF                 db    0
.eh_frame:000000000001A700                 db  54h ; T
.eh_frame:000000000001A701                 db    0
.eh_frame:000000000001A702                 db    0
.eh_frame:000000000001A703                 db    0
.eh_frame:000000000001A704                 db  44h ; D
.eh_frame:000000000001A705                 db  22h ; "
.eh_frame:000000000001A706                 db    0
.eh_frame:000000000001A707                 db    0
.eh_frame:000000000001A708                 db  48h ; H
.eh_frame:000000000001A709                 db 0B2h
.eh_frame:000000000001A70A                 db 0FFh
.eh_frame:000000000001A70B                 db 0FFh
.eh_frame:000000000001A70C                 db  1Bh
.eh_frame:000000000001A70D                 db    1
.eh_frame:000000000001A70E                 db    0
.eh_frame:000000000001A70F                 db    0
.eh_frame:000000000001A710                 db    0
.eh_frame:000000000001A711                 db  42h ; B
.eh_frame:000000000001A712                 db  0Eh
.eh_frame:000000000001A713                 db  10h
.eh_frame:000000000001A714                 db  8Fh
.eh_frame:000000000001A715                 db    2
.eh_frame:000000000001A716                 db  42h ; B
.eh_frame:000000000001A717                 db  0Eh
.eh_frame:000000000001A718                 db  18h
.eh_frame:000000000001A719                 db  8Eh
.eh_frame:000000000001A71A                 db    3
.eh_frame:000000000001A71B                 db  42h ; B
.eh_frame:000000000001A71C                 db  0Eh
.eh_frame:000000000001A71D                 db  20h
.eh_frame:000000000001A71E                 db  8Dh
.eh_frame:000000000001A71F                 db    4
.eh_frame:000000000001A720                 db  42h ; B
.eh_frame:000000000001A721                 db  0Eh
.eh_frame:000000000001A722                 db  28h ; (
.eh_frame:000000000001A723                 db  8Ch
.eh_frame:000000000001A724                 db    5
.eh_frame:000000000001A725                 db  44h ; D
.eh_frame:000000000001A726                 db  0Eh
.eh_frame:000000000001A727                 db  30h ; 0
.eh_frame:000000000001A728                 db  86h
.eh_frame:000000000001A729                 db    6
.eh_frame:000000000001A72A                 db  41h ; A
.eh_frame:000000000001A72B                 db  0Eh
.eh_frame:000000000001A72C                 db  38h ; 8
.eh_frame:000000000001A72D                 db  83h
.eh_frame:000000000001A72E                 db    7
.eh_frame:000000000001A72F                 db  4Dh ; M
.eh_frame:000000000001A730                 db  0Eh
.eh_frame:000000000001A731                 db  60h ; `
.eh_frame:000000000001A732                 db    2
.eh_frame:000000000001A733                 db  5Ah ; Z
.eh_frame:000000000001A734                 db  0Eh
.eh_frame:000000000001A735                 db  68h ; h
.eh_frame:000000000001A736                 db  44h ; D
.eh_frame:000000000001A737                 db  0Eh
.eh_frame:000000000001A738                 db  70h ; p
.eh_frame:000000000001A739                 db  61h ; a
.eh_frame:000000000001A73A                 db  0Eh
.eh_frame:000000000001A73B                 db  68h ; h
.eh_frame:000000000001A73C                 db  41h ; A
.eh_frame:000000000001A73D                 db  0Eh
.eh_frame:000000000001A73E                 db  60h ; `
.eh_frame:000000000001A73F                 db  44h ; D
.eh_frame:000000000001A740                 db  0Ah
.eh_frame:000000000001A741                 db  0Eh
.eh_frame:000000000001A742                 db  38h ; 8
.eh_frame:000000000001A743                 db  44h ; D
.eh_frame:000000000001A744                 db  0Eh
.eh_frame:000000000001A745                 db  30h ; 0
.eh_frame:000000000001A746                 db  41h ; A
.eh_frame:000000000001A747                 db  0Eh
.eh_frame:000000000001A748                 db  28h ; (
.eh_frame:000000000001A749                 db  42h ; B
.eh_frame:000000000001A74A                 db  0Eh
.eh_frame:000000000001A74B                 db  20h
.eh_frame:000000000001A74C                 db  42h ; B
.eh_frame:000000000001A74D                 db  0Eh
.eh_frame:000000000001A74E                 db  18h
.eh_frame:000000000001A74F                 db  42h ; B
.eh_frame:000000000001A750                 db  0Eh
.eh_frame:000000000001A751                 db  10h
.eh_frame:000000000001A752                 db  42h ; B
.eh_frame:000000000001A753                 db  0Eh
.eh_frame:000000000001A754                 db    8
.eh_frame:000000000001A755                 db  45h ; E
.eh_frame:000000000001A756                 db  0Bh
.eh_frame:000000000001A757                 db    0
.eh_frame:000000000001A758                 db  48h ; H
.eh_frame:000000000001A759                 db    0
.eh_frame:000000000001A75A                 db    0
.eh_frame:000000000001A75B                 db    0
.eh_frame:000000000001A75C                 db  9Ch
.eh_frame:000000000001A75D                 db  22h ; "
.eh_frame:000000000001A75E                 db    0
.eh_frame:000000000001A75F                 db    0
.eh_frame:000000000001A760                 db  10h
.eh_frame:000000000001A761                 db 0B3h
.eh_frame:000000000001A762                 db 0FFh
.eh_frame:000000000001A763                 db 0FFh
.eh_frame:000000000001A764                 db  10h
.eh_frame:000000000001A765                 db    1
.eh_frame:000000000001A766                 db    0
.eh_frame:000000000001A767                 db    0
.eh_frame:000000000001A768                 db    0
.eh_frame:000000000001A769                 db  44h ; D
.eh_frame:000000000001A76A                 db  0Eh
.eh_frame:000000000001A76B                 db  10h
.eh_frame:000000000001A76C                 db  8Eh
.eh_frame:000000000001A76D                 db    2
.eh_frame:000000000001A76E                 db  42h ; B
.eh_frame:000000000001A76F                 db  0Eh
.eh_frame:000000000001A770                 db  18h
.eh_frame:000000000001A771                 db  8Dh
.eh_frame:000000000001A772                 db    3
.eh_frame:000000000001A773                 db  45h ; E
.eh_frame:000000000001A774                 db  0Eh
.eh_frame:000000000001A775                 db  20h
.eh_frame:000000000001A776                 db  8Ch
.eh_frame:000000000001A777                 db    4
.eh_frame:000000000001A778                 db  41h ; A
.eh_frame:000000000001A779                 db  0Eh
.eh_frame:000000000001A77A                 db  28h ; (
.eh_frame:000000000001A77B                 db  86h
.eh_frame:000000000001A77C                 db    5
.eh_frame:000000000001A77D                 db  44h ; D
.eh_frame:000000000001A77E                 db  0Eh
.eh_frame:000000000001A77F                 db  30h ; 0
.eh_frame:000000000001A780                 db  83h
.eh_frame:000000000001A781                 db    6
.eh_frame:000000000001A782                 db    2
.eh_frame:000000000001A783                 db 0ADh
.eh_frame:000000000001A784                 db  0Ah
.eh_frame:000000000001A785                 db  0Eh
.eh_frame:000000000001A786                 db  28h ; (
.eh_frame:000000000001A787                 db  43h ; C
.eh_frame:000000000001A788                 db  0Eh
.eh_frame:000000000001A789                 db  20h
.eh_frame:000000000001A78A                 db  42h ; B
.eh_frame:000000000001A78B                 db  0Eh
.eh_frame:000000000001A78C                 db  18h
.eh_frame:000000000001A78D                 db  42h ; B
.eh_frame:000000000001A78E                 db  0Eh
.eh_frame:000000000001A78F                 db  10h
.eh_frame:000000000001A790                 db  42h ; B
.eh_frame:000000000001A791                 db  0Eh
.eh_frame:000000000001A792                 db    8
.eh_frame:000000000001A793                 db  4Ah ; J
.eh_frame:000000000001A794                 db  0Bh
.eh_frame:000000000001A795                 db  76h ; v
.eh_frame:000000000001A796                 db  0Eh
.eh_frame:000000000001A797                 db  28h ; (
.eh_frame:000000000001A798                 db  43h ; C
.eh_frame:000000000001A799                 db  0Eh
.eh_frame:000000000001A79A                 db  20h
.eh_frame:000000000001A79B                 db  42h ; B
.eh_frame:000000000001A79C                 db  0Eh
.eh_frame:000000000001A79D                 db  18h
.eh_frame:000000000001A79E                 db  42h ; B
.eh_frame:000000000001A79F                 db  0Eh
.eh_frame:000000000001A7A0                 db  10h
.eh_frame:000000000001A7A1                 db  42h ; B
.eh_frame:000000000001A7A2                 db  0Eh
.eh_frame:000000000001A7A3                 db    8
.eh_frame:000000000001A7A4                 db  38h ; 8
.eh_frame:000000000001A7A5                 db    0
.eh_frame:000000000001A7A6                 db    0
.eh_frame:000000000001A7A7                 db    0
.eh_frame:000000000001A7A8                 db 0E8h
.eh_frame:000000000001A7A9                 db  22h ; "
.eh_frame:000000000001A7AA                 db    0
.eh_frame:000000000001A7AB                 db    0
.eh_frame:000000000001A7AC                 db 0D4h
.eh_frame:000000000001A7AD                 db 0B3h
.eh_frame:000000000001A7AE                 db 0FFh
.eh_frame:000000000001A7AF                 db 0FFh
.eh_frame:000000000001A7B0                 db  85h
.eh_frame:000000000001A7B1                 db    0
.eh_frame:000000000001A7B2                 db    0
.eh_frame:000000000001A7B3                 db    0
.eh_frame:000000000001A7B4                 db    0
.eh_frame:000000000001A7B5                 db  42h ; B
.eh_frame:000000000001A7B6                 db  0Eh
.eh_frame:000000000001A7B7                 db  10h
.eh_frame:000000000001A7B8                 db  8Dh
.eh_frame:000000000001A7B9                 db    2
.eh_frame:000000000001A7BA                 db  42h ; B
.eh_frame:000000000001A7BB                 db  0Eh
.eh_frame:000000000001A7BC                 db  18h
.eh_frame:000000000001A7BD                 db  8Ch
.eh_frame:000000000001A7BE                 db    3
.eh_frame:000000000001A7BF                 db  41h ; A
.eh_frame:000000000001A7C0                 db  0Eh
.eh_frame:000000000001A7C1                 db  20h
.eh_frame:000000000001A7C2                 db  86h
.eh_frame:000000000001A7C3                 db    4
.eh_frame:000000000001A7C4                 db  41h ; A
.eh_frame:000000000001A7C5                 db  0Eh
.eh_frame:000000000001A7C6                 db  28h ; (
.eh_frame:000000000001A7C7                 db  83h
.eh_frame:000000000001A7C8                 db    5
.eh_frame:000000000001A7C9                 db  44h ; D
.eh_frame:000000000001A7CA                 db  0Eh
.eh_frame:000000000001A7CB                 db  30h ; 0
.eh_frame:000000000001A7CC                 db    2
.eh_frame:000000000001A7CD                 db  57h ; W
.eh_frame:000000000001A7CE                 db  0Ah
.eh_frame:000000000001A7CF                 db  0Eh
.eh_frame:000000000001A7D0                 db  28h ; (
.eh_frame:000000000001A7D1                 db  44h ; D
.eh_frame:000000000001A7D2                 db  0Eh
.eh_frame:000000000001A7D3                 db  20h
.eh_frame:000000000001A7D4                 db  41h ; A
.eh_frame:000000000001A7D5                 db  0Eh
.eh_frame:000000000001A7D6                 db  18h
.eh_frame:000000000001A7D7                 db  42h ; B
.eh_frame:000000000001A7D8                 db  0Eh
.eh_frame:000000000001A7D9                 db  10h
.eh_frame:000000000001A7DA                 db  42h ; B
.eh_frame:000000000001A7DB                 db  0Eh
.eh_frame:000000000001A7DC                 db    8
.eh_frame:000000000001A7DD                 db  46h ; F
.eh_frame:000000000001A7DE                 db  0Bh
.eh_frame:000000000001A7DF                 db    0
.eh_frame:000000000001A7E0                 db  18h
.eh_frame:000000000001A7E1                 db    0
.eh_frame:000000000001A7E2                 db    0
.eh_frame:000000000001A7E3                 db    0
.eh_frame:000000000001A7E4                 db  24h ; $
.eh_frame:000000000001A7E5                 db  23h ; #
.eh_frame:000000000001A7E6                 db    0
.eh_frame:000000000001A7E7                 db    0
.eh_frame:000000000001A7E8                 db  28h ; (
.eh_frame:000000000001A7E9                 db 0B4h
.eh_frame:000000000001A7EA                 db 0FFh
.eh_frame:000000000001A7EB                 db 0FFh
.eh_frame:000000000001A7EC                 db  44h ; D
.eh_frame:000000000001A7ED                 db    0
.eh_frame:000000000001A7EE                 db    0
.eh_frame:000000000001A7EF                 db    0
.eh_frame:000000000001A7F0                 db    0
.eh_frame:000000000001A7F1                 db  41h ; A
.eh_frame:000000000001A7F2                 db  0Eh
.eh_frame:000000000001A7F3                 db  10h
.eh_frame:000000000001A7F4                 db  83h
.eh_frame:000000000001A7F5                 db    2
.eh_frame:000000000001A7F6                 db    2
.eh_frame:000000000001A7F7                 db  42h ; B
.eh_frame:000000000001A7F8                 db  0Eh
.eh_frame:000000000001A7F9                 db    8
.eh_frame:000000000001A7FA                 db    0
.eh_frame:000000000001A7FB                 db    0
.eh_frame:000000000001A7FC                 db  58h ; X
.eh_frame:000000000001A7FD                 db    0
.eh_frame:000000000001A7FE                 db    0
.eh_frame:000000000001A7FF                 db    0
.eh_frame:000000000001A800                 db  40h ; @
.eh_frame:000000000001A801                 db  23h ; #
.eh_frame:000000000001A802                 db    0
.eh_frame:000000000001A803                 db    0
.eh_frame:000000000001A804                 db  5Ch ; \
.eh_frame:000000000001A805                 db 0B4h
.eh_frame:000000000001A806                 db 0FFh
.eh_frame:000000000001A807                 db 0FFh
.eh_frame:000000000001A808                 db  9Eh
.eh_frame:000000000001A809                 db    0
.eh_frame:000000000001A80A                 db    0
.eh_frame:000000000001A80B                 db    0
.eh_frame:000000000001A80C                 db    0
.eh_frame:000000000001A80D                 db  4Fh ; O
.eh_frame:000000000001A80E                 db  0Eh
.eh_frame:000000000001A80F                 db  10h
.eh_frame:000000000001A810                 db  8Dh
.eh_frame:000000000001A811                 db    2
.eh_frame:000000000001A812                 db  42h ; B
.eh_frame:000000000001A813                 db  0Eh
.eh_frame:000000000001A814                 db  18h
.eh_frame:000000000001A815                 db  8Ch
.eh_frame:000000000001A816                 db    3
.eh_frame:000000000001A817                 db  44h ; D
.eh_frame:000000000001A818                 db  0Eh
.eh_frame:000000000001A819                 db  20h
.eh_frame:000000000001A81A                 db  86h
.eh_frame:000000000001A81B                 db    4
.eh_frame:000000000001A81C                 db  41h ; A
.eh_frame:000000000001A81D                 db  0Eh
.eh_frame:000000000001A81E                 db  28h ; (
.eh_frame:000000000001A81F                 db  83h
.eh_frame:000000000001A820                 db    5
.eh_frame:000000000001A821                 db  4Dh ; M
.eh_frame:000000000001A822                 db  0Eh
.eh_frame:000000000001A823                 db  40h ; @
.eh_frame:000000000001A824                 db  67h ; g
.eh_frame:000000000001A825                 db  0Eh
.eh_frame:000000000001A826                 db  48h ; H
.eh_frame:000000000001A827                 db  41h ; A
.eh_frame:000000000001A828                 db  0Eh
.eh_frame:000000000001A829                 db  50h ; P
.eh_frame:000000000001A82A                 db  42h ; B
.eh_frame:000000000001A82B                 db  0Eh
.eh_frame:000000000001A82C                 db  58h ; X
.eh_frame:000000000001A82D                 db  42h ; B
.eh_frame:000000000001A82E                 db  0Eh
.eh_frame:000000000001A82F                 db  60h ; `
.eh_frame:000000000001A830                 db  52h ; R
.eh_frame:000000000001A831                 db  0Eh
.eh_frame:000000000001A832                 db  40h ; @
.eh_frame:000000000001A833                 db  49h ; I
.eh_frame:000000000001A834                 db  0Ah
.eh_frame:000000000001A835                 db  0Eh
.eh_frame:000000000001A836                 db  28h ; (
.eh_frame:000000000001A837                 db  41h ; A
.eh_frame:000000000001A838                 db  0Eh
.eh_frame:000000000001A839                 db  20h
.eh_frame:000000000001A83A                 db  44h ; D
.eh_frame:000000000001A83B                 db  0Eh
.eh_frame:000000000001A83C                 db  18h
.eh_frame:000000000001A83D                 db  42h ; B
.eh_frame:000000000001A83E                 db  0Eh
.eh_frame:000000000001A83F                 db  10h
.eh_frame:000000000001A840                 db  42h ; B
.eh_frame:000000000001A841                 db  0Eh
.eh_frame:000000000001A842                 db    8
.eh_frame:000000000001A843                 db  45h ; E
.eh_frame:000000000001A844                 db  0Bh
.eh_frame:000000000001A845                 db  52h ; R
.eh_frame:000000000001A846                 db  0Eh
.eh_frame:000000000001A847                 db  48h ; H
.eh_frame:000000000001A848                 db  41h ; A
.eh_frame:000000000001A849                 db  0Eh
.eh_frame:000000000001A84A                 db  50h ; P
.eh_frame:000000000001A84B                 db  42h ; B
.eh_frame:000000000001A84C                 db  0Eh
.eh_frame:000000000001A84D                 db  58h ; X
.eh_frame:000000000001A84E                 db  42h ; B
.eh_frame:000000000001A84F                 db  0Eh
.eh_frame:000000000001A850                 db  60h ; `
.eh_frame:000000000001A851                 db  49h ; I
.eh_frame:000000000001A852                 db  0Eh
.eh_frame:000000000001A853                 db    8
.eh_frame:000000000001A854                 db 0C3h
.eh_frame:000000000001A855                 db 0C6h
.eh_frame:000000000001A856                 db 0CCh
.eh_frame:000000000001A857                 db 0CDh
.eh_frame:000000000001A858                 db  1Ch
.eh_frame:000000000001A859                 db    0
.eh_frame:000000000001A85A                 db    0
.eh_frame:000000000001A85B                 db    0
.eh_frame:000000000001A85C                 db  9Ch
.eh_frame:000000000001A85D                 db  23h ; #
.eh_frame:000000000001A85E                 db    0
.eh_frame:000000000001A85F                 db    0
.eh_frame:000000000001A860                 db 0A0h
.eh_frame:000000000001A861                 db 0B4h
.eh_frame:000000000001A862                 db 0FFh
.eh_frame:000000000001A863                 db 0FFh
.eh_frame:000000000001A864                 db  18h
.eh_frame:000000000001A865                 db    0
.eh_frame:000000000001A866                 db    0
.eh_frame:000000000001A867                 db    0
.eh_frame:000000000001A868                 db    0
.eh_frame:000000000001A869                 db  44h ; D
.eh_frame:000000000001A86A                 db  0Eh
.eh_frame:000000000001A86B                 db  10h
.eh_frame:000000000001A86C                 db  45h ; E
.eh_frame:000000000001A86D                 db  0Eh
.eh_frame:000000000001A86E                 db  18h
.eh_frame:000000000001A86F                 db  42h ; B
.eh_frame:000000000001A870                 db  0Eh
.eh_frame:000000000001A871                 db  20h
.eh_frame:000000000001A872                 db  4Ch ; L
.eh_frame:000000000001A873                 db  0Eh
.eh_frame:000000000001A874                 db    8
.eh_frame:000000000001A875                 db    0
.eh_frame:000000000001A876                 db    0
.eh_frame:000000000001A877                 db    0
.eh_frame:000000000001A878                 db  1Ch
.eh_frame:000000000001A879                 db    0
.eh_frame:000000000001A87A                 db    0
.eh_frame:000000000001A87B                 db    0
.eh_frame:000000000001A87C                 db 0BCh
.eh_frame:000000000001A87D                 db  23h ; #
.eh_frame:000000000001A87E                 db    0
.eh_frame:000000000001A87F                 db    0
.eh_frame:000000000001A880                 db 0A0h
.eh_frame:000000000001A881                 db 0B4h
.eh_frame:000000000001A882                 db 0FFh
.eh_frame:000000000001A883                 db 0FFh
.eh_frame:000000000001A884                 db  15h
.eh_frame:000000000001A885                 db    0
.eh_frame:000000000001A886                 db    0
.eh_frame:000000000001A887                 db    0
.eh_frame:000000000001A888                 db    0
.eh_frame:000000000001A889                 db  44h ; D
.eh_frame:000000000001A88A                 db  0Eh
.eh_frame:000000000001A88B                 db  10h
.eh_frame:000000000001A88C                 db  42h ; B
.eh_frame:000000000001A88D                 db  0Eh
.eh_frame:000000000001A88E                 db  18h
.eh_frame:000000000001A88F                 db  42h ; B
.eh_frame:000000000001A890                 db  0Eh
.eh_frame:000000000001A891                 db  20h
.eh_frame:000000000001A892                 db  4Ch ; L
.eh_frame:000000000001A893                 db  0Eh
.eh_frame:000000000001A894                 db    8
.eh_frame:000000000001A895                 db    0
.eh_frame:000000000001A896                 db    0
.eh_frame:000000000001A897                 db    0
.eh_frame:000000000001A898                 db  20h
.eh_frame:000000000001A899                 db    0
.eh_frame:000000000001A89A                 db    0
.eh_frame:000000000001A89B                 db    0
.eh_frame:000000000001A89C                 db 0DCh
.eh_frame:000000000001A89D                 db  23h ; #
.eh_frame:000000000001A89E                 db    0
.eh_frame:000000000001A89F                 db    0
.eh_frame:000000000001A8A0                 db 0A0h
.eh_frame:000000000001A8A1                 db 0B4h
.eh_frame:000000000001A8A2                 db 0FFh
.eh_frame:000000000001A8A3                 db 0FFh
.eh_frame:000000000001A8A4                 db  1Ah
.eh_frame:000000000001A8A5                 db    0
.eh_frame:000000000001A8A6                 db    0
.eh_frame:000000000001A8A7                 db    0
.eh_frame:000000000001A8A8                 db    0
.eh_frame:000000000001A8A9                 db  44h ; D
.eh_frame:000000000001A8AA                 db  0Eh
.eh_frame:000000000001A8AB                 db  10h
.eh_frame:000000000001A8AC                 db  42h ; B
.eh_frame:000000000001A8AD                 db  0Eh
.eh_frame:000000000001A8AE                 db  18h
.eh_frame:000000000001A8AF                 db  44h ; D
.eh_frame:000000000001A8B0                 db  0Eh
.eh_frame:000000000001A8B1                 db  20h
.eh_frame:000000000001A8B2                 db  44h ; D
.eh_frame:000000000001A8B3                 db  0Eh
.eh_frame:000000000001A8B4                 db  28h ; (
.eh_frame:000000000001A8B5                 db  42h ; B
.eh_frame:000000000001A8B6                 db  0Eh
.eh_frame:000000000001A8B7                 db  30h ; 0
.eh_frame:000000000001A8B8                 db  49h ; I
.eh_frame:000000000001A8B9                 db  0Eh
.eh_frame:000000000001A8BA                 db    8
.eh_frame:000000000001A8BB                 db    0
.eh_frame:000000000001A8BC                 db  20h
.eh_frame:000000000001A8BD                 db    0
.eh_frame:000000000001A8BE                 db    0
.eh_frame:000000000001A8BF                 db    0
.eh_frame:000000000001A8C0                 db    0
.eh_frame:000000000001A8C1                 db  24h ; $
.eh_frame:000000000001A8C2                 db    0
.eh_frame:000000000001A8C3                 db    0
.eh_frame:000000000001A8C4                 db  9Ch
.eh_frame:000000000001A8C5                 db 0B4h
.eh_frame:000000000001A8C6                 db 0FFh
.eh_frame:000000000001A8C7                 db 0FFh
.eh_frame:000000000001A8C8                 db  1Ch
.eh_frame:000000000001A8C9                 db    0
.eh_frame:000000000001A8CA                 db    0
.eh_frame:000000000001A8CB                 db    0
.eh_frame:000000000001A8CC                 db    0
.eh_frame:000000000001A8CD                 db  44h ; D
.eh_frame:000000000001A8CE                 db  0Eh
.eh_frame:000000000001A8CF                 db  10h
.eh_frame:000000000001A8D0                 db  42h ; B
.eh_frame:000000000001A8D1                 db  0Eh
.eh_frame:000000000001A8D2                 db  18h
.eh_frame:000000000001A8D3                 db  44h ; D
.eh_frame:000000000001A8D4                 db  0Eh
.eh_frame:000000000001A8D5                 db  20h
.eh_frame:000000000001A8D6                 db  44h ; D
.eh_frame:000000000001A8D7                 db  0Eh
.eh_frame:000000000001A8D8                 db  28h ; (
.eh_frame:000000000001A8D9                 db  44h ; D
.eh_frame:000000000001A8DA                 db  0Eh
.eh_frame:000000000001A8DB                 db  30h ; 0
.eh_frame:000000000001A8DC                 db  49h ; I
.eh_frame:000000000001A8DD                 db  0Eh
.eh_frame:000000000001A8DE                 db    8
.eh_frame:000000000001A8DF                 db    0
.eh_frame:000000000001A8E0                 db  14h
.eh_frame:000000000001A8E1                 db    0
.eh_frame:000000000001A8E2                 db    0
.eh_frame:000000000001A8E3                 db    0
.eh_frame:000000000001A8E4                 db  24h ; $
.eh_frame:000000000001A8E5                 db  24h ; $
.eh_frame:000000000001A8E6                 db    0
.eh_frame:000000000001A8E7                 db    0
.eh_frame:000000000001A8E8                 db  98h
.eh_frame:000000000001A8E9                 db 0B4h
.eh_frame:000000000001A8EA                 db 0FFh
.eh_frame:000000000001A8EB                 db 0FFh
.eh_frame:000000000001A8EC                 db  41h ; A
.eh_frame:000000000001A8ED                 db    0
.eh_frame:000000000001A8EE                 db    0
.eh_frame:000000000001A8EF                 db    0
.eh_frame:000000000001A8F0                 db    0
.eh_frame:000000000001A8F1                 db    0
.eh_frame:000000000001A8F2                 db    0
.eh_frame:000000000001A8F3                 db    0
.eh_frame:000000000001A8F4                 db    0
.eh_frame:000000000001A8F5                 db    0
.eh_frame:000000000001A8F6                 db    0
.eh_frame:000000000001A8F7                 db    0
.eh_frame:000000000001A8F8                 db  4Ch ; L
.eh_frame:000000000001A8F9                 db    0
.eh_frame:000000000001A8FA                 db    0
.eh_frame:000000000001A8FB                 db    0
.eh_frame:000000000001A8FC                 db  3Ch ; <
.eh_frame:000000000001A8FD                 db  24h ; $
.eh_frame:000000000001A8FE                 db    0
.eh_frame:000000000001A8FF                 db    0
.eh_frame:000000000001A900                 db 0D0h
.eh_frame:000000000001A901                 db 0B4h
.eh_frame:000000000001A902                 db 0FFh
.eh_frame:000000000001A903                 db 0FFh
.eh_frame:000000000001A904                 db  7Dh ; }
.eh_frame:000000000001A905                 db    0
.eh_frame:000000000001A906                 db    0
.eh_frame:000000000001A907                 db    0
.eh_frame:000000000001A908                 db    0
.eh_frame:000000000001A909                 db  42h ; B
.eh_frame:000000000001A90A                 db  0Eh
.eh_frame:000000000001A90B                 db  10h
.eh_frame:000000000001A90C                 db  8Ch
.eh_frame:000000000001A90D                 db    2
.eh_frame:000000000001A90E                 db  41h ; A
.eh_frame:000000000001A90F                 db  0Eh
.eh_frame:000000000001A910                 db  18h
.eh_frame:000000000001A911                 db  86h
.eh_frame:000000000001A912                 db    3
.eh_frame:000000000001A913                 db  44h ; D
.eh_frame:000000000001A914                 db  0Eh
.eh_frame:000000000001A915                 db  20h
.eh_frame:000000000001A916                 db  83h
.eh_frame:000000000001A917                 db    4
.eh_frame:000000000001A918                 db  69h ; i
.eh_frame:000000000001A919                 db  0Ah
.eh_frame:000000000001A91A                 db  0Eh
.eh_frame:000000000001A91B                 db  18h
.eh_frame:000000000001A91C                 db  41h ; A
.eh_frame:000000000001A91D                 db  0Eh
.eh_frame:000000000001A91E                 db  10h
.eh_frame:000000000001A91F                 db  42h ; B
.eh_frame:000000000001A920                 db  0Eh
.eh_frame:000000000001A921                 db    8
.eh_frame:000000000001A922                 db  45h ; E
.eh_frame:000000000001A923                 db  0Bh
.eh_frame:000000000001A924                 db  55h ; U
.eh_frame:000000000001A925                 db  0Ah
.eh_frame:000000000001A926                 db  0Eh
.eh_frame:000000000001A927                 db  18h
.eh_frame:000000000001A928                 db  41h ; A
.eh_frame:000000000001A929                 db  0Eh
.eh_frame:000000000001A92A                 db  10h
.eh_frame:000000000001A92B                 db  42h ; B
.eh_frame:000000000001A92C                 db  0Eh
.eh_frame:000000000001A92D                 db    8
.eh_frame:000000000001A92E                 db  48h ; H
.eh_frame:000000000001A92F                 db  0Bh
.eh_frame:000000000001A930                 db  41h ; A
.eh_frame:000000000001A931                 db  0Ah
.eh_frame:000000000001A932                 db  0Eh
.eh_frame:000000000001A933                 db  18h
.eh_frame:000000000001A934                 db  46h ; F
.eh_frame:000000000001A935                 db  0Eh
.eh_frame:000000000001A936                 db  10h
.eh_frame:000000000001A937                 db  42h ; B
.eh_frame:000000000001A938                 db  0Eh
.eh_frame:000000000001A939                 db    8
.eh_frame:000000000001A93A                 db  47h ; G
.eh_frame:000000000001A93B                 db  0Bh
.eh_frame:000000000001A93C                 db  49h ; I
.eh_frame:000000000001A93D                 db  0Eh
.eh_frame:000000000001A93E                 db  18h
.eh_frame:000000000001A93F                 db  41h ; A
.eh_frame:000000000001A940                 db  0Eh
.eh_frame:000000000001A941                 db  10h
.eh_frame:000000000001A942                 db  42h ; B
.eh_frame:000000000001A943                 db  0Eh
.eh_frame:000000000001A944                 db    8
.eh_frame:000000000001A945                 db    0
.eh_frame:000000000001A946                 db    0
.eh_frame:000000000001A947                 db    0
.eh_frame:000000000001A948                 db  1Ch
.eh_frame:000000000001A949                 db    0
.eh_frame:000000000001A94A                 db    0
.eh_frame:000000000001A94B                 db    0
.eh_frame:000000000001A94C                 db  8Ch
.eh_frame:000000000001A94D                 db  24h ; $
.eh_frame:000000000001A94E                 db    0
.eh_frame:000000000001A94F                 db    0
.eh_frame:000000000001A950                 db    0
.eh_frame:000000000001A951                 db 0B5h
.eh_frame:000000000001A952                 db 0FFh
.eh_frame:000000000001A953                 db 0FFh
.eh_frame:000000000001A954                 db  60h ; `
.eh_frame:000000000001A955                 db    0
.eh_frame:000000000001A956                 db    0
.eh_frame:000000000001A957                 db    0
.eh_frame:000000000001A958                 db    0
.eh_frame:000000000001A959                 db  44h ; D
.eh_frame:000000000001A95A                 db  0Eh
.eh_frame:000000000001A95B                 db  10h
.eh_frame:000000000001A95C                 db  75h ; u
.eh_frame:000000000001A95D                 db  0Ah
.eh_frame:000000000001A95E                 db  0Eh
.eh_frame:000000000001A95F                 db    8
.eh_frame:000000000001A960                 db  47h ; G
.eh_frame:000000000001A961                 db  0Bh
.eh_frame:000000000001A962                 db  5Fh ; _
.eh_frame:000000000001A963                 db  0Eh
.eh_frame:000000000001A964                 db    8
.eh_frame:000000000001A965                 db    0
.eh_frame:000000000001A966                 db    0
.eh_frame:000000000001A967                 db    0
.eh_frame:000000000001A968                 db  1Ch
.eh_frame:000000000001A969                 db    0
.eh_frame:000000000001A96A                 db    0
.eh_frame:000000000001A96B                 db    0
.eh_frame:000000000001A96C                 db 0ACh
.eh_frame:000000000001A96D                 db  24h ; $
.eh_frame:000000000001A96E                 db    0
.eh_frame:000000000001A96F                 db    0
.eh_frame:000000000001A970                 db  40h ; @
.eh_frame:000000000001A971                 db 0B5h
.eh_frame:000000000001A972                 db 0FFh
.eh_frame:000000000001A973                 db 0FFh
.eh_frame:000000000001A974                 db  3Ch ; <
.eh_frame:000000000001A975                 db    0
.eh_frame:000000000001A976                 db    0
.eh_frame:000000000001A977                 db    0
.eh_frame:000000000001A978                 db    0
.eh_frame:000000000001A979                 db  44h ; D
.eh_frame:000000000001A97A                 db  0Eh
.eh_frame:000000000001A97B                 db  10h
.eh_frame:000000000001A97C                 db  61h ; a
.eh_frame:000000000001A97D                 db  0Ah
.eh_frame:000000000001A97E                 db  0Eh
.eh_frame:000000000001A97F                 db    8
.eh_frame:000000000001A980                 db  4Bh ; K
.eh_frame:000000000001A981                 db  0Bh
.eh_frame:000000000001A982                 db  4Bh ; K
.eh_frame:000000000001A983                 db  0Eh
.eh_frame:000000000001A984                 db    8
.eh_frame:000000000001A985                 db    0
.eh_frame:000000000001A986                 db    0
.eh_frame:000000000001A987                 db    0
.eh_frame:000000000001A988                 db  44h ; D
.eh_frame:000000000001A989                 db    0
.eh_frame:000000000001A98A                 db    0
.eh_frame:000000000001A98B                 db    0
.eh_frame:000000000001A98C                 db 0CCh
.eh_frame:000000000001A98D                 db  24h ; $
.eh_frame:000000000001A98E                 db    0
.eh_frame:000000000001A98F                 db    0
.eh_frame:000000000001A990                 db  60h ; `
.eh_frame:000000000001A991                 db 0B5h
.eh_frame:000000000001A992                 db 0FFh
.eh_frame:000000000001A993                 db 0FFh
.eh_frame:000000000001A994                 db  65h ; e
.eh_frame:000000000001A995                 db    0
.eh_frame:000000000001A996                 db    0
.eh_frame:000000000001A997                 db    0
.eh_frame:000000000001A998                 db    0
.eh_frame:000000000001A999                 db  42h ; B
.eh_frame:000000000001A99A                 db  0Eh
.eh_frame:000000000001A99B                 db  10h
.eh_frame:000000000001A99C                 db  8Fh
.eh_frame:000000000001A99D                 db    2
.eh_frame:000000000001A99E                 db  42h ; B
.eh_frame:000000000001A99F                 db  0Eh
.eh_frame:000000000001A9A0                 db  18h
.eh_frame:000000000001A9A1                 db  8Eh
.eh_frame:000000000001A9A2                 db    3
.eh_frame:000000000001A9A3                 db  45h ; E
.eh_frame:000000000001A9A4                 db  0Eh
.eh_frame:000000000001A9A5                 db  20h
.eh_frame:000000000001A9A6                 db  8Dh
.eh_frame:000000000001A9A7                 db    4
.eh_frame:000000000001A9A8                 db  42h ; B
.eh_frame:000000000001A9A9                 db  0Eh
.eh_frame:000000000001A9AA                 db  28h ; (
.eh_frame:000000000001A9AB                 db  8Ch
.eh_frame:000000000001A9AC                 db    5
.eh_frame:000000000001A9AD                 db  48h ; H
.eh_frame:000000000001A9AE                 db  0Eh
.eh_frame:000000000001A9AF                 db  30h ; 0
.eh_frame:000000000001A9B0                 db  86h
.eh_frame:000000000001A9B1                 db    6
.eh_frame:000000000001A9B2                 db  48h ; H
.eh_frame:000000000001A9B3                 db  0Eh
.eh_frame:000000000001A9B4                 db  38h ; 8
.eh_frame:000000000001A9B5                 db  83h
.eh_frame:000000000001A9B6                 db    7
.eh_frame:000000000001A9B7                 db  4Dh ; M
.eh_frame:000000000001A9B8                 db  0Eh
.eh_frame:000000000001A9B9                 db  40h ; @
.eh_frame:000000000001A9BA                 db  72h ; r
.eh_frame:000000000001A9BB                 db  0Eh
.eh_frame:000000000001A9BC                 db  38h ; 8
.eh_frame:000000000001A9BD                 db  41h ; A
.eh_frame:000000000001A9BE                 db  0Eh
.eh_frame:000000000001A9BF                 db  30h ; 0
.eh_frame:000000000001A9C0                 db  41h ; A
.eh_frame:000000000001A9C1                 db  0Eh
.eh_frame:000000000001A9C2                 db  28h ; (
.eh_frame:000000000001A9C3                 db  42h ; B
.eh_frame:000000000001A9C4                 db  0Eh
.eh_frame:000000000001A9C5                 db  20h
.eh_frame:000000000001A9C6                 db  42h ; B
.eh_frame:000000000001A9C7                 db  0Eh
.eh_frame:000000000001A9C8                 db  18h
.eh_frame:000000000001A9C9                 db  42h ; B
.eh_frame:000000000001A9CA                 db  0Eh
.eh_frame:000000000001A9CB                 db  10h
.eh_frame:000000000001A9CC                 db  42h ; B
.eh_frame:000000000001A9CD                 db  0Eh
.eh_frame:000000000001A9CE                 db    8
.eh_frame:000000000001A9CF                 db    0
.eh_frame:000000000001A9D0                 db  14h
.eh_frame:000000000001A9D1                 db    0
.eh_frame:000000000001A9D2                 db    0
.eh_frame:000000000001A9D3                 db    0
.eh_frame:000000000001A9D4                 db  14h
.eh_frame:000000000001A9D5                 db  25h ; %
.eh_frame:000000000001A9D6                 db    0
.eh_frame:000000000001A9D7                 db    0
.eh_frame:000000000001A9D8                 db  88h
.eh_frame:000000000001A9D9                 db 0B5h
.eh_frame:000000000001A9DA                 db 0FFh
.eh_frame:000000000001A9DB                 db 0FFh
.eh_frame:000000000001A9DC                 db    2
.eh_frame:000000000001A9DD                 db    0
.eh_frame:000000000001A9DE                 db    0
.eh_frame:000000000001A9DF                 db    0
.eh_frame:000000000001A9E0                 db    0
.eh_frame:000000000001A9E1                 db    0
.eh_frame:000000000001A9E2                 db    0
.eh_frame:000000000001A9E3                 db    0
.eh_frame:000000000001A9E4                 db    0
.eh_frame:000000000001A9E5                 db    0
.eh_frame:000000000001A9E6                 db    0
.eh_frame:000000000001A9E7                 db    0
.eh_frame:000000000001A9E8                 db  10h
.eh_frame:000000000001A9E9                 db    0
.eh_frame:000000000001A9EA                 db    0
.eh_frame:000000000001A9EB                 db    0
.eh_frame:000000000001A9EC                 db  2Ch ; ,
.eh_frame:000000000001A9ED                 db  25h ; %
.eh_frame:000000000001A9EE                 db    0
.eh_frame:000000000001A9EF                 db    0
.eh_frame:000000000001A9F0                 db  80h
.eh_frame:000000000001A9F1                 db 0B5h
.eh_frame:000000000001A9F2                 db 0FFh
.eh_frame:000000000001A9F3                 db 0FFh
.eh_frame:000000000001A9F4                 db  0Eh
.eh_frame:000000000001A9F5                 db    0
.eh_frame:000000000001A9F6                 db    0
.eh_frame:000000000001A9F7                 db    0
.eh_frame:000000000001A9F8                 db    0
.eh_frame:000000000001A9F9                 db    0
.eh_frame:000000000001A9FA                 db    0
.eh_frame:000000000001A9FB                 db    0
.eh_frame:000000000001A9FC __FRAME_END__   db    0
.eh_frame:000000000001A9FD                 db    0
.eh_frame:000000000001A9FE                 db    0
.eh_frame:000000000001A9FF                 db    0
.eh_frame:000000000001A9FF _eh_frame       ends
.eh_frame:000000000001A9FF
.init_array:000000000021B9B0 ; ELF Initialization Function Table
.init_array:000000000021B9B0 ; ===========================================================================
.init_array:000000000021B9B0
.init_array:000000000021B9B0 ; Segment type: Pure data
.init_array:000000000021B9B0 ; Segment permissions: Read/Write
.init_array:000000000021B9B0 _init_array     segment qword public 'DATA' use64
.init_array:000000000021B9B0                 assume cs:_init_array
.init_array:000000000021B9B0                 ;org 21B9B0h
.init_array:000000000021B9B0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000021B9B0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000021B9B0                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000021B9B0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000021B9B0
.fini_array:000000000021B9B8 ; ELF Termination Function Table
.fini_array:000000000021B9B8 ; ===========================================================================
.fini_array:000000000021B9B8
.fini_array:000000000021B9B8 ; Segment type: Pure data
.fini_array:000000000021B9B8 ; Segment permissions: Read/Write
.fini_array:000000000021B9B8 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000021B9B8                 assume cs:_fini_array
.fini_array:000000000021B9B8                 ;org 21B9B8h
.fini_array:000000000021B9B8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000021B9B8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000021B9B8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000021B9B8
.data.rel.ro:000000000021B9C0 ; ===========================================================================
.data.rel.ro:000000000021B9C0
.data.rel.ro:000000000021B9C0 ; Segment type: Pure data
.data.rel.ro:000000000021B9C0 ; Segment permissions: Read/Write
.data.rel.ro:000000000021B9C0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000021B9C0                 assume cs:_data_rel_ro
.data.rel.ro:000000000021B9C0                 ;org 21B9C0h
.data.rel.ro:000000000021B9C0 ; struct option longopts
.data.rel.ro:000000000021B9C0 longopts        dq offset aDigits       ; name
.data.rel.ro:000000000021B9C0                                         ; DATA XREF: main+D↑o
.data.rel.ro:000000000021B9C0                 dd 1                    ; has_arg ; "digits"
.data.rel.ro:000000000021B9C0                 db 4 dup(0)
.data.rel.ro:000000000021B9C0                 dq 0                    ; flag
.data.rel.ro:000000000021B9C0                 dd 6Eh                  ; val
.data.rel.ro:000000000021B9C0                 db 4 dup(0)
.data.rel.ro:000000000021B9E0                 dq offset aQuiet        ; "quiet"
.data.rel.ro:000000000021B9E8                 db    0
.data.rel.ro:000000000021B9E9                 db    0
.data.rel.ro:000000000021B9EA                 db    0
.data.rel.ro:000000000021B9EB                 db    0
.data.rel.ro:000000000021B9EC                 db    0
.data.rel.ro:000000000021B9ED                 db    0
.data.rel.ro:000000000021B9EE                 db    0
.data.rel.ro:000000000021B9EF                 db    0
.data.rel.ro:000000000021B9F0                 db    0
.data.rel.ro:000000000021B9F1                 db    0
.data.rel.ro:000000000021B9F2                 db    0
.data.rel.ro:000000000021B9F3                 db    0
.data.rel.ro:000000000021B9F4                 db    0
.data.rel.ro:000000000021B9F5                 db    0
.data.rel.ro:000000000021B9F6                 db    0
.data.rel.ro:000000000021B9F7                 db    0
.data.rel.ro:000000000021B9F8                 db  71h ; q
.data.rel.ro:000000000021B9F9                 db    0
.data.rel.ro:000000000021B9FA                 db    0
.data.rel.ro:000000000021B9FB                 db    0
.data.rel.ro:000000000021B9FC                 db    0
.data.rel.ro:000000000021B9FD                 db    0
.data.rel.ro:000000000021B9FE                 db    0
.data.rel.ro:000000000021B9FF                 db    0
.data.rel.ro:000000000021BA00                 dq offset aSilent       ; "silent"
.data.rel.ro:000000000021BA08                 db    0
.data.rel.ro:000000000021BA09                 db    0
.data.rel.ro:000000000021BA0A                 db    0
.data.rel.ro:000000000021BA0B                 db    0
.data.rel.ro:000000000021BA0C                 db    0
.data.rel.ro:000000000021BA0D                 db    0
.data.rel.ro:000000000021BA0E                 db    0
.data.rel.ro:000000000021BA0F                 db    0
.data.rel.ro:000000000021BA10                 db    0
.data.rel.ro:000000000021BA11                 db    0
.data.rel.ro:000000000021BA12                 db    0
.data.rel.ro:000000000021BA13                 db    0
.data.rel.ro:000000000021BA14                 db    0
.data.rel.ro:000000000021BA15                 db    0
.data.rel.ro:000000000021BA16                 db    0
.data.rel.ro:000000000021BA17                 db    0
.data.rel.ro:000000000021BA18                 db  73h ; s
.data.rel.ro:000000000021BA19                 db    0
.data.rel.ro:000000000021BA1A                 db    0
.data.rel.ro:000000000021BA1B                 db    0
.data.rel.ro:000000000021BA1C                 db    0
.data.rel.ro:000000000021BA1D                 db    0
.data.rel.ro:000000000021BA1E                 db    0
.data.rel.ro:000000000021BA1F                 db    0
.data.rel.ro:000000000021BA20                 dq offset aKeepFiles    ; "keep-files"
.data.rel.ro:000000000021BA28                 db    0
.data.rel.ro:000000000021BA29                 db    0
.data.rel.ro:000000000021BA2A                 db    0
.data.rel.ro:000000000021BA2B                 db    0
.data.rel.ro:000000000021BA2C                 db    0
.data.rel.ro:000000000021BA2D                 db    0
.data.rel.ro:000000000021BA2E                 db    0
.data.rel.ro:000000000021BA2F                 db    0
.data.rel.ro:000000000021BA30                 db    0
.data.rel.ro:000000000021BA31                 db    0
.data.rel.ro:000000000021BA32                 db    0
.data.rel.ro:000000000021BA33                 db    0
.data.rel.ro:000000000021BA34                 db    0
.data.rel.ro:000000000021BA35                 db    0
.data.rel.ro:000000000021BA36                 db    0
.data.rel.ro:000000000021BA37                 db    0
.data.rel.ro:000000000021BA38                 db  6Bh ; k
.data.rel.ro:000000000021BA39                 db    0
.data.rel.ro:000000000021BA3A                 db    0
.data.rel.ro:000000000021BA3B                 db    0
.data.rel.ro:000000000021BA3C                 db    0
.data.rel.ro:000000000021BA3D                 db    0
.data.rel.ro:000000000021BA3E                 db    0
.data.rel.ro:000000000021BA3F                 db    0
.data.rel.ro:000000000021BA40                 dq offset aElideEmptyFile ; "elide-empty-files"
.data.rel.ro:000000000021BA48                 db    0
.data.rel.ro:000000000021BA49                 db    0
.data.rel.ro:000000000021BA4A                 db    0
.data.rel.ro:000000000021BA4B                 db    0
.data.rel.ro:000000000021BA4C                 db    0
.data.rel.ro:000000000021BA4D                 db    0
.data.rel.ro:000000000021BA4E                 db    0
.data.rel.ro:000000000021BA4F                 db    0
.data.rel.ro:000000000021BA50                 db    0
.data.rel.ro:000000000021BA51                 db    0
.data.rel.ro:000000000021BA52                 db    0
.data.rel.ro:000000000021BA53                 db    0
.data.rel.ro:000000000021BA54                 db    0
.data.rel.ro:000000000021BA55                 db    0
.data.rel.ro:000000000021BA56                 db    0
.data.rel.ro:000000000021BA57                 db    0
.data.rel.ro:000000000021BA58                 db  7Ah ; z
.data.rel.ro:000000000021BA59                 db    0
.data.rel.ro:000000000021BA5A                 db    0
.data.rel.ro:000000000021BA5B                 db    0
.data.rel.ro:000000000021BA5C                 db    0
.data.rel.ro:000000000021BA5D                 db    0
.data.rel.ro:000000000021BA5E                 db    0
.data.rel.ro:000000000021BA5F                 db    0
.data.rel.ro:000000000021BA60                 dq offset aPrefix       ; "prefix"
.data.rel.ro:000000000021BA68                 db    1
.data.rel.ro:000000000021BA69                 db    0
.data.rel.ro:000000000021BA6A                 db    0
.data.rel.ro:000000000021BA6B                 db    0
.data.rel.ro:000000000021BA6C                 db    0
.data.rel.ro:000000000021BA6D                 db    0
.data.rel.ro:000000000021BA6E                 db    0
.data.rel.ro:000000000021BA6F                 db    0
.data.rel.ro:000000000021BA70                 db    0
.data.rel.ro:000000000021BA71                 db    0
.data.rel.ro:000000000021BA72                 db    0
.data.rel.ro:000000000021BA73                 db    0
.data.rel.ro:000000000021BA74                 db    0
.data.rel.ro:000000000021BA75                 db    0
.data.rel.ro:000000000021BA76                 db    0
.data.rel.ro:000000000021BA77                 db    0
.data.rel.ro:000000000021BA78                 db  66h ; f
.data.rel.ro:000000000021BA79                 db    0
.data.rel.ro:000000000021BA7A                 db    0
.data.rel.ro:000000000021BA7B                 db    0
.data.rel.ro:000000000021BA7C                 db    0
.data.rel.ro:000000000021BA7D                 db    0
.data.rel.ro:000000000021BA7E                 db    0
.data.rel.ro:000000000021BA7F                 db    0
.data.rel.ro:000000000021BA80                 dq offset aSuffixFormat ; "suffix-format"
.data.rel.ro:000000000021BA88                 db    1
.data.rel.ro:000000000021BA89                 db    0
.data.rel.ro:000000000021BA8A                 db    0
.data.rel.ro:000000000021BA8B                 db    0
.data.rel.ro:000000000021BA8C                 db    0
.data.rel.ro:000000000021BA8D                 db    0
.data.rel.ro:000000000021BA8E                 db    0
.data.rel.ro:000000000021BA8F                 db    0
.data.rel.ro:000000000021BA90                 db    0
.data.rel.ro:000000000021BA91                 db    0
.data.rel.ro:000000000021BA92                 db    0
.data.rel.ro:000000000021BA93                 db    0
.data.rel.ro:000000000021BA94                 db    0
.data.rel.ro:000000000021BA95                 db    0
.data.rel.ro:000000000021BA96                 db    0
.data.rel.ro:000000000021BA97                 db    0
.data.rel.ro:000000000021BA98                 db  62h ; b
.data.rel.ro:000000000021BA99                 db    0
.data.rel.ro:000000000021BA9A                 db    0
.data.rel.ro:000000000021BA9B                 db    0
.data.rel.ro:000000000021BA9C                 db    0
.data.rel.ro:000000000021BA9D                 db    0
.data.rel.ro:000000000021BA9E                 db    0
.data.rel.ro:000000000021BA9F                 db    0
.data.rel.ro:000000000021BAA0                 dq offset aSuppressMatche_0 ; "suppress-matched"
.data.rel.ro:000000000021BAA8                 db    0
.data.rel.ro:000000000021BAA9                 db    0
.data.rel.ro:000000000021BAAA                 db    0
.data.rel.ro:000000000021BAAB                 db    0
.data.rel.ro:000000000021BAAC                 db    0
.data.rel.ro:000000000021BAAD                 db    0
.data.rel.ro:000000000021BAAE                 db    0
.data.rel.ro:000000000021BAAF                 db    0
.data.rel.ro:000000000021BAB0                 db    0
.data.rel.ro:000000000021BAB1                 db    0
.data.rel.ro:000000000021BAB2                 db    0
.data.rel.ro:000000000021BAB3                 db    0
.data.rel.ro:000000000021BAB4                 db    0
.data.rel.ro:000000000021BAB5                 db    0
.data.rel.ro:000000000021BAB6                 db    0
.data.rel.ro:000000000021BAB7                 db    0
.data.rel.ro:000000000021BAB8                 db  80h
.data.rel.ro:000000000021BAB9                 db    0
.data.rel.ro:000000000021BABA                 db    0
.data.rel.ro:000000000021BABB                 db    0
.data.rel.ro:000000000021BABC                 db    0
.data.rel.ro:000000000021BABD                 db    0
.data.rel.ro:000000000021BABE                 db    0
.data.rel.ro:000000000021BABF                 db    0
.data.rel.ro:000000000021BAC0                 dq offset aHelp         ; "help"
.data.rel.ro:000000000021BAC8                 db    0
.data.rel.ro:000000000021BAC9                 db    0
.data.rel.ro:000000000021BACA                 db    0
.data.rel.ro:000000000021BACB                 db    0
.data.rel.ro:000000000021BACC                 db    0
.data.rel.ro:000000000021BACD                 db    0
.data.rel.ro:000000000021BACE                 db    0
.data.rel.ro:000000000021BACF                 db    0
.data.rel.ro:000000000021BAD0                 db    0
.data.rel.ro:000000000021BAD1                 db    0
.data.rel.ro:000000000021BAD2                 db    0
.data.rel.ro:000000000021BAD3                 db    0
.data.rel.ro:000000000021BAD4                 db    0
.data.rel.ro:000000000021BAD5                 db    0
.data.rel.ro:000000000021BAD6                 db    0
.data.rel.ro:000000000021BAD7                 db    0
.data.rel.ro:000000000021BAD8                 db  7Eh ; ~
.data.rel.ro:000000000021BAD9                 db 0FFh
.data.rel.ro:000000000021BADA                 db 0FFh
.data.rel.ro:000000000021BADB                 db 0FFh
.data.rel.ro:000000000021BADC                 db    0
.data.rel.ro:000000000021BADD                 db    0
.data.rel.ro:000000000021BADE                 db    0
.data.rel.ro:000000000021BADF                 db    0
.data.rel.ro:000000000021BAE0                 dq offset aVersion      ; "version"
.data.rel.ro:000000000021BAE8                 db    0
.data.rel.ro:000000000021BAE9                 db    0
.data.rel.ro:000000000021BAEA                 db    0
.data.rel.ro:000000000021BAEB                 db    0
.data.rel.ro:000000000021BAEC                 db    0
.data.rel.ro:000000000021BAED                 db    0
.data.rel.ro:000000000021BAEE                 db    0
.data.rel.ro:000000000021BAEF                 db    0
.data.rel.ro:000000000021BAF0                 db    0
.data.rel.ro:000000000021BAF1                 db    0
.data.rel.ro:000000000021BAF2                 db    0
.data.rel.ro:000000000021BAF3                 db    0
.data.rel.ro:000000000021BAF4                 db    0
.data.rel.ro:000000000021BAF5                 db    0
.data.rel.ro:000000000021BAF6                 db    0
.data.rel.ro:000000000021BAF7                 db    0
.data.rel.ro:000000000021BAF8                 db  7Dh ; }
.data.rel.ro:000000000021BAF9                 db 0FFh
.data.rel.ro:000000000021BAFA                 db 0FFh
.data.rel.ro:000000000021BAFB                 db 0FFh
.data.rel.ro:000000000021BAFC                 db    0
.data.rel.ro:000000000021BAFD                 db    0
.data.rel.ro:000000000021BAFE                 db    0
.data.rel.ro:000000000021BAFF                 db    0
.data.rel.ro:000000000021BB00                 db    0
.data.rel.ro:000000000021BB01                 db    0
.data.rel.ro:000000000021BB02                 db    0
.data.rel.ro:000000000021BB03                 db    0
.data.rel.ro:000000000021BB04                 db    0
.data.rel.ro:000000000021BB05                 db    0
.data.rel.ro:000000000021BB06                 db    0
.data.rel.ro:000000000021BB07                 db    0
.data.rel.ro:000000000021BB08                 db    0
.data.rel.ro:000000000021BB09                 db    0
.data.rel.ro:000000000021BB0A                 db    0
.data.rel.ro:000000000021BB0B                 db    0
.data.rel.ro:000000000021BB0C                 db    0
.data.rel.ro:000000000021BB0D                 db    0
.data.rel.ro:000000000021BB0E                 db    0
.data.rel.ro:000000000021BB0F                 db    0
.data.rel.ro:000000000021BB10                 db    0
.data.rel.ro:000000000021BB11                 db    0
.data.rel.ro:000000000021BB12                 db    0
.data.rel.ro:000000000021BB13                 db    0
.data.rel.ro:000000000021BB14                 db    0
.data.rel.ro:000000000021BB15                 db    0
.data.rel.ro:000000000021BB16                 db    0
.data.rel.ro:000000000021BB17                 db    0
.data.rel.ro:000000000021BB18                 db    0
.data.rel.ro:000000000021BB19                 db    0
.data.rel.ro:000000000021BB1A                 db    0
.data.rel.ro:000000000021BB1B                 db    0
.data.rel.ro:000000000021BB1C                 db    0
.data.rel.ro:000000000021BB1D                 db    0
.data.rel.ro:000000000021BB1E                 db    0
.data.rel.ro:000000000021BB1F                 db    0
.data.rel.ro:000000000021BB20                 public quoting_style_args
.data.rel.ro:000000000021BB20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000021BB28                 dq offset aShell        ; "shell"
.data.rel.ro:000000000021BB30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000021BB38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000021BB40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000021BB48                 dq offset aC_0          ; "c"
.data.rel.ro:000000000021BB50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000021BB58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000021BB60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000021BB68                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000021BB70                 db    0
.data.rel.ro:000000000021BB71                 db    0
.data.rel.ro:000000000021BB72                 db    0
.data.rel.ro:000000000021BB73                 db    0
.data.rel.ro:000000000021BB74                 db    0
.data.rel.ro:000000000021BB75                 db    0
.data.rel.ro:000000000021BB76                 db    0
.data.rel.ro:000000000021BB77                 db    0
.data.rel.ro:000000000021BB77 _data_rel_ro    ends
.data.rel.ro:000000000021BB77
LOAD:000000000021BB78 ; ELF Dynamic Information
LOAD:000000000021BB78 ; ===========================================================================
LOAD:000000000021BB78
LOAD:000000000021BB78 ; Segment type: Pure data
LOAD:000000000021BB78 ; Segment permissions: Read/Write
LOAD:000000000021BB78 LOAD            segment byte public 'DATA' use64
LOAD:000000000021BB78                 assume cs:LOAD
LOAD:000000000021BB78                 ;org 21BB78h
LOAD:000000000021BB78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000021BB78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000021BB78                                         ; DT_NEEDED libc.so.6
LOAD:000000000021BB88                 Elf64_Dyn <0Ch, 1A98h>  ; DT_INIT
LOAD:000000000021BB98                 Elf64_Dyn <0Dh, 15F80h> ; DT_FINI
LOAD:000000000021BBA8                 Elf64_Dyn <19h, 21B9B0h> ; DT_INIT_ARRAY
LOAD:000000000021BBB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000021BBC8                 Elf64_Dyn <1Ah, 21B9B8h> ; DT_FINI_ARRAY
LOAD:000000000021BBD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000021BBE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000021BBF8                 Elf64_Dyn <5, 0B38h>    ; DT_STRTAB
LOAD:000000000021BC08                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000021BC18                 Elf64_Dyn <0Ah, 3CCh>   ; DT_STRSZ
LOAD:000000000021BC28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000021BC38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000021BC48                 Elf64_Dyn <3, 21BD68h>  ; DT_PLTGOT
LOAD:000000000021BC58                 Elf64_Dyn <2, 708h>     ; DT_PLTRELSZ
LOAD:000000000021BC68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000021BC78                 Elf64_Dyn <17h, 1390h>  ; DT_JMPREL
LOAD:000000000021BC88                 Elf64_Dyn <7, 1018h>    ; DT_RELA
LOAD:000000000021BC98                 Elf64_Dyn <8, 378h>     ; DT_RELASZ
LOAD:000000000021BCA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000021BCB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000021BCC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000021BCD8                 Elf64_Dyn <6FFFFFFEh, 0FB8h> ; DT_VERNEED
LOAD:000000000021BCE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000021BCF8                 Elf64_Dyn <6FFFFFF0h, 0F04h> ; DT_VERSYM
LOAD:000000000021BD08                 Elf64_Dyn <6FFFFFF9h, 1Ah> ; DT_RELACOUNT
LOAD:000000000021BD18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000021BD28                 db    0
LOAD:000000000021BD29                 db    0
LOAD:000000000021BD2A                 db    0
LOAD:000000000021BD2B                 db    0
LOAD:000000000021BD2C                 db    0
LOAD:000000000021BD2D                 db    0
LOAD:000000000021BD2E                 db    0
LOAD:000000000021BD2F                 db    0
LOAD:000000000021BD30                 db    0
LOAD:000000000021BD31                 db    0
LOAD:000000000021BD32                 db    0
LOAD:000000000021BD33                 db    0
LOAD:000000000021BD34                 db    0
LOAD:000000000021BD35                 db    0
LOAD:000000000021BD36                 db    0
LOAD:000000000021BD37                 db    0
LOAD:000000000021BD38                 db    0
LOAD:000000000021BD39                 db    0
LOAD:000000000021BD3A                 db    0
LOAD:000000000021BD3B                 db    0
LOAD:000000000021BD3C                 db    0
LOAD:000000000021BD3D                 db    0
LOAD:000000000021BD3E                 db    0
LOAD:000000000021BD3F                 db    0
LOAD:000000000021BD40                 db    0
LOAD:000000000021BD41                 db    0
LOAD:000000000021BD42                 db    0
LOAD:000000000021BD43                 db    0
LOAD:000000000021BD44                 db    0
LOAD:000000000021BD45                 db    0
LOAD:000000000021BD46                 db    0
LOAD:000000000021BD47                 db    0
LOAD:000000000021BD48                 db    0
LOAD:000000000021BD49                 db    0
LOAD:000000000021BD4A                 db    0
LOAD:000000000021BD4B                 db    0
LOAD:000000000021BD4C                 db    0
LOAD:000000000021BD4D                 db    0
LOAD:000000000021BD4E                 db    0
LOAD:000000000021BD4F                 db    0
LOAD:000000000021BD50                 db    0
LOAD:000000000021BD51                 db    0
LOAD:000000000021BD52                 db    0
LOAD:000000000021BD53                 db    0
LOAD:000000000021BD54                 db    0
LOAD:000000000021BD55                 db    0
LOAD:000000000021BD56                 db    0
LOAD:000000000021BD57                 db    0
LOAD:000000000021BD58                 db    0
LOAD:000000000021BD59                 db    0
LOAD:000000000021BD5A                 db    0
LOAD:000000000021BD5B                 db    0
LOAD:000000000021BD5C                 db    0
LOAD:000000000021BD5D                 db    0
LOAD:000000000021BD5E                 db    0
LOAD:000000000021BD5F                 db    0
LOAD:000000000021BD60                 db    0
LOAD:000000000021BD61                 db    0
LOAD:000000000021BD62                 db    0
LOAD:000000000021BD63                 db    0
LOAD:000000000021BD64                 db    0
LOAD:000000000021BD65                 db    0
LOAD:000000000021BD66                 db    0
LOAD:000000000021BD67                 db    0
LOAD:000000000021BD67 LOAD            ends
LOAD:000000000021BD67
.got:000000000021BD68 ; ===========================================================================
.got:000000000021BD68
.got:000000000021BD68 ; Segment type: Pure data
.got:000000000021BD68 ; Segment permissions: Read/Write
.got:000000000021BD68 _got            segment qword public 'DATA' use64
.got:000000000021BD68                 assume cs:_got
.got:000000000021BD68                 ;org 21BD68h
.got:000000000021BD68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000021BD70 qword_21BD70    dq 0                    ; DATA XREF: sub_1AB0↑r
.got:000000000021BD78 qword_21BD78    dq 0                    ; DATA XREF: sub_1AB0+6↑r
.got:000000000021BD80 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:000000000021BD80                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:000000000021BD88 sigprocmask_ptr dq offset sigprocmask   ; DATA XREF: _sigprocmask↑r
.got:000000000021BD90 __snprintf_chk_ptr dq offset __snprintf_chk
.got:000000000021BD90                                         ; DATA XREF: ___snprintf_chk↑r
.got:000000000021BD98 raise_ptr       dq offset raise         ; DATA XREF: _raise↑r
.got:000000000021BDA0 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000021BDA8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000021BDB0 __errno_location_ptr dq offset __errno_location
.got:000000000021BDB0                                         ; DATA XREF: ___errno_location↑r
.got:000000000021BDB8 unlink_ptr      dq offset unlink        ; DATA XREF: _unlink↑r
.got:000000000021BDC0 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000021BDC8 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000021BDD0 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:000000000021BDD8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000021BDE0 sigaction_ptr   dq offset sigaction     ; DATA XREF: _sigaction↑r
.got:000000000021BDE8 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000021BDF0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000021BDF8 __strtol_internal_ptr dq offset __strtol_internal
.got:000000000021BDF8                                         ; DATA XREF: ___strtol_internal↑r
.got:000000000021BE00 iswctype_ptr    dq offset iswctype      ; DATA XREF: _iswctype↑r
.got:000000000021BE08 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000021BE10 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000021BE10                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000021BE18 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000021BE20 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000021BE20                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000021BE28 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000021BE30 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000021BE30                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000021BE38 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000021BE40 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000021BE48 dup2_ptr        dq offset dup2          ; DATA XREF: _dup2↑r
.got:000000000021BE50 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000021BE58 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000021BE60 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000021BE68 __assert_fail_ptr dq offset __assert_fail
.got:000000000021BE68                                         ; DATA XREF: ___assert_fail↑r
.got:000000000021BE70 __strtoul_internal_ptr dq offset __strtoul_internal
.got:000000000021BE70                                         ; DATA XREF: ___strtoul_internal↑r
.got:000000000021BE78 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000021BE80 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000021BE88 fputc_ptr       dq offset fputc         ; DATA XREF: _fputc↑r
.got:000000000021BE90 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:000000000021BE98 read_ptr        dq offset read          ; DATA XREF: _read↑r
.got:000000000021BEA0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000021BEA8 wctype_ptr      dq offset wctype        ; DATA XREF: _wctype↑r
.got:000000000021BEB0 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000021BEB0                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000021BEB8 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000021BEC0 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000021BEC8 signal_ptr      dq offset signal        ; DATA XREF: _signal↑r
.got:000000000021BED0 sigemptyset_ptr dq offset sigemptyset   ; DATA XREF: _sigemptyset↑r
.got:000000000021BED8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000021BEE0 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000021BEE8 iswalnum_ptr    dq offset iswalnum      ; DATA XREF: _iswalnum↑r
.got:000000000021BEF0 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000021BEF8 wcrtomb_ptr     dq offset wcrtomb       ; DATA XREF: _wcrtomb↑r
.got:000000000021BF00 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000021BF08 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000021BF10 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000021BF18 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:000000000021BF18                                         ; DATA XREF: _fwrite_unlocked↑r
.got:000000000021BF20 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000021BF28 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:000000000021BF30 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000021BF38 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000021BF40 btowc_ptr       dq offset btowc         ; DATA XREF: _btowc↑r
.got:000000000021BF48 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000021BF50 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000021BF58 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:000000000021BF60 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000021BF68 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:000000000021BF70 towlower_ptr    dq offset towlower      ; DATA XREF: _towlower↑r
.got:000000000021BF78 towupper_ptr    dq offset towupper      ; DATA XREF: _towupper↑r
.got:000000000021BF80 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000021BF88 sigismember_ptr dq offset sigismember   ; DATA XREF: _sigismember↑r
.got:000000000021BF90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000021BF98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000021BFA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000021BFA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000021BFA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000021BFB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000021BFB8 sigaddset_ptr   dq offset sigaddset     ; DATA XREF: _sigaddset↑r
.got:000000000021BFC0 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:000000000021BFC0                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:000000000021BFC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000021BFC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000021BFD0 __sprintf_chk_ptr dq offset __sprintf_chk
.got:000000000021BFD0                                         ; DATA XREF: ___sprintf_chk↑r
.got:000000000021BFD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000021BFD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000021BFE0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000021BFE0                                         ; DATA XREF: start+24↑r
.got:000000000021BFE8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000021BFE8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000021BFF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000021BFF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000021BFF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000021BFF8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000021BFF8                                         ; __do_global_dtors_aux+9↑r
.got:000000000021BFF8 _got            ends
.got:000000000021BFF8
.data:000000000021C000 ; ===========================================================================
.data:000000000021C000
.data:000000000021C000 ; Segment type: Pure data
.data:000000000021C000 ; Segment permissions: Read/Write
.data:000000000021C000 _data           segment align_32 public 'DATA' use64
.data:000000000021C000                 assume cs:_data
.data:000000000021C000                 ;org 21C000h
.data:000000000021C000                 public __data_start ; weak
.data:000000000021C000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000021C000                                         ; data_start
.data:000000000021C001                 db    0
.data:000000000021C002                 db    0
.data:000000000021C003                 db    0
.data:000000000021C004                 db    0
.data:000000000021C005                 db    0
.data:000000000021C006                 db    0
.data:000000000021C007                 db    0
.data:000000000021C008                 public __dso_handle
.data:000000000021C008 ; void *_dso_handle
.data:000000000021C008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000021C008                                         ; atexit↑r ...
.data:000000000021C010 digits          dd 2                    ; DATA XREF: main+188↑w
.data:000000000021C010                                         ; main:loc_2316↑r ...
.data:000000000021C014                 align 8
.data:000000000021C018                 public Version
.data:000000000021C018 Version         dq offset a831          ; DATA XREF: main+1FE↑r
.data:000000000021C018                                         ; "8.31"
.data:000000000021C020                 public exit_failure
.data:000000000021C020 ; int exit_failure
.data:000000000021C020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_43D2↑r
.data:000000000021C024                 align 20h
.data:000000000021C040                 public quote_quoting_options
.data:000000000021C040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000021C040                                         ; quote_mem↑o ...
.data:000000000021C041                 db    0
.data:000000000021C042                 db    0
.data:000000000021C043                 db    0
.data:000000000021C044                 db    0
.data:000000000021C045                 db    0
.data:000000000021C046                 db    0
.data:000000000021C047                 db    0
.data:000000000021C048                 db    0
.data:000000000021C049                 db    0
.data:000000000021C04A                 db    0
.data:000000000021C04B                 db    0
.data:000000000021C04C                 db    0
.data:000000000021C04D                 db    0
.data:000000000021C04E                 db    0
.data:000000000021C04F                 db    0
.data:000000000021C050                 db    0
.data:000000000021C051                 db    0
.data:000000000021C052                 db    0
.data:000000000021C053                 db    0
.data:000000000021C054                 db    0
.data:000000000021C055                 db    0
.data:000000000021C056                 db    0
.data:000000000021C057                 db    0
.data:000000000021C058                 db    0
.data:000000000021C059                 db    0
.data:000000000021C05A                 db    0
.data:000000000021C05B                 db    0
.data:000000000021C05C                 db    0
.data:000000000021C05D                 db    0
.data:000000000021C05E                 db    0
.data:000000000021C05F                 db    0
.data:000000000021C060                 db    0
.data:000000000021C061                 db    0
.data:000000000021C062                 db    0
.data:000000000021C063                 db    0
.data:000000000021C064                 db    0
.data:000000000021C065                 db    0
.data:000000000021C066                 db    0
.data:000000000021C067                 db    0
.data:000000000021C068                 db    0
.data:000000000021C069                 db    0
.data:000000000021C06A                 db    0
.data:000000000021C06B                 db    0
.data:000000000021C06C                 db    0
.data:000000000021C06D                 db    0
.data:000000000021C06E                 db    0
.data:000000000021C06F                 db    0
.data:000000000021C070                 db    0
.data:000000000021C071                 db    0
.data:000000000021C072                 db    0
.data:000000000021C073                 db    0
.data:000000000021C074                 db    0
.data:000000000021C075                 db    0
.data:000000000021C076                 db    0
.data:000000000021C077                 db    0
.data:000000000021C078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000021C078                                         ; quotearg_n_options:loc_599D↑r ...
.data:000000000021C07C                 align 20h
.data:000000000021C080 ; void *slotvec
.data:000000000021C080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000021C080                                         ; quotearg_n_options+76↑w ...
.data:000000000021C088                 align 10h
.data:000000000021C090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000021C090                                         ; quotearg_n_options+187↑r ...
.data:000000000021C098 off_21C098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000021C098 _data           ends
.data:000000000021C098
.bss:000000000021C0A0 ; ===========================================================================
.bss:000000000021C0A0
.bss:000000000021C0A0 ; Segment type: Uninitialized
.bss:000000000021C0A0 ; Segment permissions: Read/Write
.bss:000000000021C0A0 _bss            segment align_32 public 'BSS' use64
.bss:000000000021C0A0                 assume cs:_bss
.bss:000000000021C0A0                 ;org 21C0A0h
.bss:000000000021C0A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000021C0A0                 public __bss_start ; weak
.bss:000000000021C0A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000A90↑o
.bss:000000000021C0A0                                         ; LOAD:0000000000000AD8↑o ...
.bss:000000000021C0A0                                         ; Alternative name is '__TMC_END__'
.bss:000000000021C0A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000021C0A0                                         ; _edata
.bss:000000000021C0A0                                         ; Copy of shared data
.bss:000000000021C0A8                 public stdout@@GLIBC_2_2_5
.bss:000000000021C0A8 ; FILE *stdout
.bss:000000000021C0A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A78↑o
.bss:000000000021C0A8                                         ; main+1F7↑r ...
.bss:000000000021C0A8                                         ; Alternative name is 'stdout'
.bss:000000000021C0A8                                         ; Copy of shared data
.bss:000000000021C0B0                 public optind@@GLIBC_2_2_5
.bss:000000000021C0B0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000B08↑o
.bss:000000000021C0B0                                         ; main:loc_2291↑r ...
.bss:000000000021C0B0                                         ; Alternative name is 'optind'
.bss:000000000021C0B0                                         ; Copy of shared data
.bss:000000000021C0B4                 align 8
.bss:000000000021C0B8                 public optarg@@GLIBC_2_2_5
.bss:000000000021C0B8 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000B20↑o
.bss:000000000021C0B8                                         ; main+13B↑r ...
.bss:000000000021C0B8                                         ; Alternative name is 'optarg'
.bss:000000000021C0B8                                         ; Copy of shared data
.bss:000000000021C0C0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000021C0C0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000021C0C0                                         ; DATA XREF: LOAD:0000000000000AA8↑o
.bss:000000000021C0C0                                         ; LOAD:0000000000000AC0↑o ...
.bss:000000000021C0C0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000021C0C0                                         ; Copy of shared data
.bss:000000000021C0C8                 align 20h
.bss:000000000021C0E0                 public stderr@@GLIBC_2_2_5
.bss:000000000021C0E0 ; FILE *stderr
.bss:000000000021C0E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000AF0↑o
.bss:000000000021C0E0                                         ; regexp_error+50↑r ...
.bss:000000000021C0E0                                         ; Alternative name is 'stderr'
.bss:000000000021C0E0                                         ; Copy of shared data
.bss:000000000021C0E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000021C0E8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000021C0E9                 align 20h
.bss:000000000021C100 ; void *prev_buf_7217
.bss:000000000021C100 prev_buf_7217   dq ?                    ; DATA XREF: remove_line+1↑r
.bss:000000000021C100                                         ; remove_line+22↑w ...
.bss:000000000021C108 control_allocated_7351 dq ?             ; DATA XREF: new_control_record+B↑r
.bss:000000000021C108                                         ; new_control_record+7B↑w
.bss:000000000021C110 last_val_7392   dq ?                    ; DATA XREF: main+3AF↑r
.bss:000000000021C110                                         ; main:loc_2425↑w
.bss:000000000021C118                 align 20h
.bss:000000000021C120 ; sigset_t caught_signals
.bss:000000000021C120 caught_signals  sigset_t <?>            ; DATA XREF: main+50F↑o
.bss:000000000021C120                                         ; main+51B↑o ...
.bss:000000000021C1A0 control_used    dq ?                    ; DATA XREF: main+96↑w
.bss:000000000021C1A0                                         ; main+5CF↑r ...
.bss:000000000021C1A8 controls        dq ?                    ; DATA XREF: main+8B↑w
.bss:000000000021C1A8                                         ; main+5E2↑r ...
.bss:000000000021C1B0 suppress_matched db ?                   ; DATA XREF: main+A8↑w
.bss:000000000021C1B0                                         ; main+10A↑w ...
.bss:000000000021C1B1 elide_empty_files db ?                  ; DATA XREF: main:loc_2220↑w
.bss:000000000021C1B1                                         ; close_output_file+4E↑r
.bss:000000000021C1B2 remove_files    db ?                    ; DATA XREF: main+7D↑w
.bss:000000000021C1B2                                         ; main:loc_2210↑w ...
.bss:000000000021C1B3 suppress_count  db ?                    ; DATA XREF: main+A1↑w
.bss:000000000021C1B3                                         ; main:loc_21FC↑w ...
.bss:000000000021C1B4                 align 8
.bss:000000000021C1B8 global_argv     dq ?                    ; DATA XREF: regexp_error+23↑r
.bss:000000000021C1B8                                         ; main+84↑w ...
.bss:000000000021C1C0 ; char *output_filename
.bss:000000000021C1C0 output_filename dq ?                    ; DATA XREF: close_output_file+D2↑r
.bss:000000000021C1C0                                         ; close_output_file:loc_33C6↑r ...
.bss:000000000021C1C8 ; FILE *output_stream
.bss:000000000021C1C8 output_stream   dq ?                    ; DATA XREF: close_output_file+D↑r
.bss:000000000021C1C8                                         ; close_output_file:loc_32E0↑w ...
.bss:000000000021C1D0 ; int bytes_written
.bss:000000000021C1D0 bytes_written   dq ?                    ; DATA XREF: close_output_file+42↑r
.bss:000000000021C1D0                                         ; save_line_to_file+29↑w ...
.bss:000000000021C1D8 files_created   dd ?                    ; DATA XREF: delete_all_files_part_0↑r
.bss:000000000021C1D8                                         ; delete_all_files_part_0:loc_3190↑r ...
.bss:000000000021C1DC                 align 20h
.bss:000000000021C1E0 suffix          dq ?                    ; DATA XREF: main+1D7↑w
.bss:000000000021C1E0                                         ; main+25F↑r ...
.bss:000000000021C1E8 ; char *prefix
.bss:000000000021C1E8 prefix          dq ?                    ; DATA XREF: main+AF↑w
.bss:000000000021C1E8                                         ; main+142↑w ...
.bss:000000000021C1F0 ; char *filename_space
.bss:000000000021C1F0 filename_space  dq ?                    ; DATA XREF: main+2EF↑w
.bss:000000000021C1F0                                         ; make_filename+C↑r ...
.bss:000000000021C1F8 have_read_eof   db ?                    ; DATA XREF: load_buffer_part_5+DC↑w
.bss:000000000021C1F8                                         ; load_buffer_part_5+156↑r ...
.bss:000000000021C1F9                 align 20h
.bss:000000000021C200 current_line    dq ?                    ; DATA XREF: main+623↑r
.bss:000000000021C200                                         ; main:loc_26E6↑r ...
.bss:000000000021C208 last_line_number dq ?                   ; DATA XREF: load_buffer_part_5+7F↑r
.bss:000000000021C208                                         ; load_buffer_part_5:loc_3AAA↑r ...
.bss:000000000021C210 ; size_t hold_count
.bss:000000000021C210 hold_count      dq ?                    ; DATA XREF: load_buffer_part_5+13↑r
.bss:000000000021C210                                         ; load_buffer_part_5+1E↑r ...
.bss:000000000021C218 ; void *hold_area
.bss:000000000021C218 hold_area       dq ?                    ; DATA XREF: load_buffer_part_5:loc_3B40↑r
.bss:000000000021C218                                         ; load_buffer_part_5+2DB↑r ...
.bss:000000000021C220 head            dq ?                    ; DATA XREF: load_buffer_part_5+290↑r
.bss:000000000021C220                                         ; load_buffer_part_5:loc_3C60↑w ...
.bss:000000000021C228 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000021C228                                         ; close_stdout+1B↑r
.bss:000000000021C229                 align 10h
.bss:000000000021C230 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000021C230                                         ; close_stdout+56↑r
.bss:000000000021C238                 public program_name
.bss:000000000021C238 program_name    dq ?                    ; DATA XREF: regexp_error+3C↑r
.bss:000000000021C238                                         ; handle_line_error_isra_1+39↑r ...
.bss:000000000021C240 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000021C240                                         ; quotearg_free+46↑o ...
.bss:000000000021C241                 db    ? ;
.bss:000000000021C242                 db    ? ;
.bss:000000000021C243                 db    ? ;
.bss:000000000021C244                 db    ? ;
.bss:000000000021C245                 db    ? ;
.bss:000000000021C246                 db    ? ;
.bss:000000000021C247                 db    ? ;
.bss:000000000021C248                 db    ? ;
.bss:000000000021C249                 db    ? ;
.bss:000000000021C24A                 db    ? ;
.bss:000000000021C24B                 db    ? ;
.bss:000000000021C24C                 db    ? ;
.bss:000000000021C24D                 db    ? ;
.bss:000000000021C24E                 db    ? ;
.bss:000000000021C24F                 db    ? ;
.bss:000000000021C250                 db    ? ;
.bss:000000000021C251                 db    ? ;
.bss:000000000021C252                 db    ? ;
.bss:000000000021C253                 db    ? ;
.bss:000000000021C254                 db    ? ;
.bss:000000000021C255                 db    ? ;
.bss:000000000021C256                 db    ? ;
.bss:000000000021C257                 db    ? ;
.bss:000000000021C258                 db    ? ;
.bss:000000000021C259                 db    ? ;
.bss:000000000021C25A                 db    ? ;
.bss:000000000021C25B                 db    ? ;
.bss:000000000021C25C                 db    ? ;
.bss:000000000021C25D                 db    ? ;
.bss:000000000021C25E                 db    ? ;
.bss:000000000021C25F                 db    ? ;
.bss:000000000021C260                 db    ? ;
.bss:000000000021C261                 db    ? ;
.bss:000000000021C262                 db    ? ;
.bss:000000000021C263                 db    ? ;
.bss:000000000021C264                 db    ? ;
.bss:000000000021C265                 db    ? ;
.bss:000000000021C266                 db    ? ;
.bss:000000000021C267                 db    ? ;
.bss:000000000021C268                 db    ? ;
.bss:000000000021C269                 db    ? ;
.bss:000000000021C26A                 db    ? ;
.bss:000000000021C26B                 db    ? ;
.bss:000000000021C26C                 db    ? ;
.bss:000000000021C26D                 db    ? ;
.bss:000000000021C26E                 db    ? ;
.bss:000000000021C26F                 db    ? ;
.bss:000000000021C270                 db    ? ;
.bss:000000000021C271                 db    ? ;
.bss:000000000021C272                 db    ? ;
.bss:000000000021C273                 db    ? ;
.bss:000000000021C274                 db    ? ;
.bss:000000000021C275                 db    ? ;
.bss:000000000021C276                 db    ? ;
.bss:000000000021C277                 db    ? ;
.bss:000000000021C278                 db    ? ;
.bss:000000000021C279                 db    ? ;
.bss:000000000021C27A                 db    ? ;
.bss:000000000021C27B                 db    ? ;
.bss:000000000021C27C                 db    ? ;
.bss:000000000021C27D                 db    ? ;
.bss:000000000021C27E                 db    ? ;
.bss:000000000021C27F                 db    ? ;
.bss:000000000021C280                 db    ? ;
.bss:000000000021C281                 db    ? ;
.bss:000000000021C282                 db    ? ;
.bss:000000000021C283                 db    ? ;
.bss:000000000021C284                 db    ? ;
.bss:000000000021C285                 db    ? ;
.bss:000000000021C286                 db    ? ;
.bss:000000000021C287                 db    ? ;
.bss:000000000021C288                 db    ? ;
.bss:000000000021C289                 db    ? ;
.bss:000000000021C28A                 db    ? ;
.bss:000000000021C28B                 db    ? ;
.bss:000000000021C28C                 db    ? ;
.bss:000000000021C28D                 db    ? ;
.bss:000000000021C28E                 db    ? ;
.bss:000000000021C28F                 db    ? ;
.bss:000000000021C290                 db    ? ;
.bss:000000000021C291                 db    ? ;
.bss:000000000021C292                 db    ? ;
.bss:000000000021C293                 db    ? ;
.bss:000000000021C294                 db    ? ;
.bss:000000000021C295                 db    ? ;
.bss:000000000021C296                 db    ? ;
.bss:000000000021C297                 db    ? ;
.bss:000000000021C298                 db    ? ;
.bss:000000000021C299                 db    ? ;
.bss:000000000021C29A                 db    ? ;
.bss:000000000021C29B                 db    ? ;
.bss:000000000021C29C                 db    ? ;
.bss:000000000021C29D                 db    ? ;
.bss:000000000021C29E                 db    ? ;
.bss:000000000021C29F                 db    ? ;
.bss:000000000021C2A0                 db    ? ;
.bss:000000000021C2A1                 db    ? ;
.bss:000000000021C2A2                 db    ? ;
.bss:000000000021C2A3                 db    ? ;
.bss:000000000021C2A4                 db    ? ;
.bss:000000000021C2A5                 db    ? ;
.bss:000000000021C2A6                 db    ? ;
.bss:000000000021C2A7                 db    ? ;
.bss:000000000021C2A8                 db    ? ;
.bss:000000000021C2A9                 db    ? ;
.bss:000000000021C2AA                 db    ? ;
.bss:000000000021C2AB                 db    ? ;
.bss:000000000021C2AC                 db    ? ;
.bss:000000000021C2AD                 db    ? ;
.bss:000000000021C2AE                 db    ? ;
.bss:000000000021C2AF                 db    ? ;
.bss:000000000021C2B0                 db    ? ;
.bss:000000000021C2B1                 db    ? ;
.bss:000000000021C2B2                 db    ? ;
.bss:000000000021C2B3                 db    ? ;
.bss:000000000021C2B4                 db    ? ;
.bss:000000000021C2B5                 db    ? ;
.bss:000000000021C2B6                 db    ? ;
.bss:000000000021C2B7                 db    ? ;
.bss:000000000021C2B8                 db    ? ;
.bss:000000000021C2B9                 db    ? ;
.bss:000000000021C2BA                 db    ? ;
.bss:000000000021C2BB                 db    ? ;
.bss:000000000021C2BC                 db    ? ;
.bss:000000000021C2BD                 db    ? ;
.bss:000000000021C2BE                 db    ? ;
.bss:000000000021C2BF                 db    ? ;
.bss:000000000021C2C0                 db    ? ;
.bss:000000000021C2C1                 db    ? ;
.bss:000000000021C2C2                 db    ? ;
.bss:000000000021C2C3                 db    ? ;
.bss:000000000021C2C4                 db    ? ;
.bss:000000000021C2C5                 db    ? ;
.bss:000000000021C2C6                 db    ? ;
.bss:000000000021C2C7                 db    ? ;
.bss:000000000021C2C8                 db    ? ;
.bss:000000000021C2C9                 db    ? ;
.bss:000000000021C2CA                 db    ? ;
.bss:000000000021C2CB                 db    ? ;
.bss:000000000021C2CC                 db    ? ;
.bss:000000000021C2CD                 db    ? ;
.bss:000000000021C2CE                 db    ? ;
.bss:000000000021C2CF                 db    ? ;
.bss:000000000021C2D0                 db    ? ;
.bss:000000000021C2D1                 db    ? ;
.bss:000000000021C2D2                 db    ? ;
.bss:000000000021C2D3                 db    ? ;
.bss:000000000021C2D4                 db    ? ;
.bss:000000000021C2D5                 db    ? ;
.bss:000000000021C2D6                 db    ? ;
.bss:000000000021C2D7                 db    ? ;
.bss:000000000021C2D8                 db    ? ;
.bss:000000000021C2D9                 db    ? ;
.bss:000000000021C2DA                 db    ? ;
.bss:000000000021C2DB                 db    ? ;
.bss:000000000021C2DC                 db    ? ;
.bss:000000000021C2DD                 db    ? ;
.bss:000000000021C2DE                 db    ? ;
.bss:000000000021C2DF                 db    ? ;
.bss:000000000021C2E0                 db    ? ;
.bss:000000000021C2E1                 db    ? ;
.bss:000000000021C2E2                 db    ? ;
.bss:000000000021C2E3                 db    ? ;
.bss:000000000021C2E4                 db    ? ;
.bss:000000000021C2E5                 db    ? ;
.bss:000000000021C2E6                 db    ? ;
.bss:000000000021C2E7                 db    ? ;
.bss:000000000021C2E8                 db    ? ;
.bss:000000000021C2E9                 db    ? ;
.bss:000000000021C2EA                 db    ? ;
.bss:000000000021C2EB                 db    ? ;
.bss:000000000021C2EC                 db    ? ;
.bss:000000000021C2ED                 db    ? ;
.bss:000000000021C2EE                 db    ? ;
.bss:000000000021C2EF                 db    ? ;
.bss:000000000021C2F0                 db    ? ;
.bss:000000000021C2F1                 db    ? ;
.bss:000000000021C2F2                 db    ? ;
.bss:000000000021C2F3                 db    ? ;
.bss:000000000021C2F4                 db    ? ;
.bss:000000000021C2F5                 db    ? ;
.bss:000000000021C2F6                 db    ? ;
.bss:000000000021C2F7                 db    ? ;
.bss:000000000021C2F8                 db    ? ;
.bss:000000000021C2F9                 db    ? ;
.bss:000000000021C2FA                 db    ? ;
.bss:000000000021C2FB                 db    ? ;
.bss:000000000021C2FC                 db    ? ;
.bss:000000000021C2FD                 db    ? ;
.bss:000000000021C2FE                 db    ? ;
.bss:000000000021C2FF                 db    ? ;
.bss:000000000021C300                 db    ? ;
.bss:000000000021C301                 db    ? ;
.bss:000000000021C302                 db    ? ;
.bss:000000000021C303                 db    ? ;
.bss:000000000021C304                 db    ? ;
.bss:000000000021C305                 db    ? ;
.bss:000000000021C306                 db    ? ;
.bss:000000000021C307                 db    ? ;
.bss:000000000021C308                 db    ? ;
.bss:000000000021C309                 db    ? ;
.bss:000000000021C30A                 db    ? ;
.bss:000000000021C30B                 db    ? ;
.bss:000000000021C30C                 db    ? ;
.bss:000000000021C30D                 db    ? ;
.bss:000000000021C30E                 db    ? ;
.bss:000000000021C30F                 db    ? ;
.bss:000000000021C310                 db    ? ;
.bss:000000000021C311                 db    ? ;
.bss:000000000021C312                 db    ? ;
.bss:000000000021C313                 db    ? ;
.bss:000000000021C314                 db    ? ;
.bss:000000000021C315                 db    ? ;
.bss:000000000021C316                 db    ? ;
.bss:000000000021C317                 db    ? ;
.bss:000000000021C318                 db    ? ;
.bss:000000000021C319                 db    ? ;
.bss:000000000021C31A                 db    ? ;
.bss:000000000021C31B                 db    ? ;
.bss:000000000021C31C                 db    ? ;
.bss:000000000021C31D                 db    ? ;
.bss:000000000021C31E                 db    ? ;
.bss:000000000021C31F                 db    ? ;
.bss:000000000021C320                 db    ? ;
.bss:000000000021C321                 db    ? ;
.bss:000000000021C322                 db    ? ;
.bss:000000000021C323                 db    ? ;
.bss:000000000021C324                 db    ? ;
.bss:000000000021C325                 db    ? ;
.bss:000000000021C326                 db    ? ;
.bss:000000000021C327                 db    ? ;
.bss:000000000021C328                 db    ? ;
.bss:000000000021C329                 db    ? ;
.bss:000000000021C32A                 db    ? ;
.bss:000000000021C32B                 db    ? ;
.bss:000000000021C32C                 db    ? ;
.bss:000000000021C32D                 db    ? ;
.bss:000000000021C32E                 db    ? ;
.bss:000000000021C32F                 db    ? ;
.bss:000000000021C330                 db    ? ;
.bss:000000000021C331                 db    ? ;
.bss:000000000021C332                 db    ? ;
.bss:000000000021C333                 db    ? ;
.bss:000000000021C334                 db    ? ;
.bss:000000000021C335                 db    ? ;
.bss:000000000021C336                 db    ? ;
.bss:000000000021C337                 db    ? ;
.bss:000000000021C338                 db    ? ;
.bss:000000000021C339                 db    ? ;
.bss:000000000021C33A                 db    ? ;
.bss:000000000021C33B                 db    ? ;
.bss:000000000021C33C                 db    ? ;
.bss:000000000021C33D                 db    ? ;
.bss:000000000021C33E                 db    ? ;
.bss:000000000021C33F                 db    ? ;
.bss:000000000021C340 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000021C340                                         ; get_quoting_style↑o ...
.bss:000000000021C350 xmmword_21C350  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000021C350                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000021C360 xmmword_21C360  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000021C360                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000021C370 qword_21C370    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000021C370                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000021C378 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000021C378                                         ; rpl_fcntl:loc_789F↑w ...
.bss:000000000021C37C                 align 20h
.bss:000000000021C380                 public rpl_re_syntax_options
.bss:000000000021C380 rpl_re_syntax_options dq ?              ; DATA XREF: main+487↑w
.bss:000000000021C380                                         ; rpl_re_compile_pattern+4↑r ...
.bss:000000000021C380 _bss            ends
.bss:000000000021C380
.prgend:000000000021C388 ; ===========================================================================
.prgend:000000000021C388
.prgend:000000000021C388 ; Segment type: Zero-length
.prgend:000000000021C388 _prgend         segment byte public '' use64
.prgend:000000000021C388 _end            label byte
.prgend:000000000021C388 _prgend         ends
.prgend:000000000021C388
extern:000000000021C390 ; ===========================================================================
extern:000000000021C390
extern:000000000021C390 ; Segment type: Externs
extern:000000000021C390 ; extern
extern:000000000021C390 ; const __int32_t **_ctype_toupper_loc(void)
extern:000000000021C390                 extrn __ctype_toupper_loc:near
extern:000000000021C390                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:000000000021C390                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:000000000021C398 ; int sigprocmask(int how, const sigset_t *set, sigset_t *oset)
extern:000000000021C398                 extrn sigprocmask:near  ; CODE XREF: _sigprocmask↑j
extern:000000000021C398                                         ; DATA XREF: .got:sigprocmask_ptr↑o
extern:000000000021C3A0                 extrn __snprintf_chk:near
extern:000000000021C3A0                                         ; CODE XREF: ___snprintf_chk↑j
extern:000000000021C3A0                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:000000000021C3A8 ; int raise(int sig)
extern:000000000021C3A8                 extrn raise:near        ; CODE XREF: _raise↑j
extern:000000000021C3A8                                         ; DATA XREF: .got:raise_ptr↑o
extern:000000000021C3B0 ; void free(void *ptr)
extern:000000000021C3B0                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000021C3B0                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000021C3B8 ; void __noreturn abort(void)
extern:000000000021C3B8                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000021C3B8                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000021C3C0 ; int *_errno_location(void)
extern:000000000021C3C0                 extrn __errno_location:near
extern:000000000021C3C0                                         ; CODE XREF: ___errno_location↑j
extern:000000000021C3C0                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000021C3C8 ; int unlink(const char *name)
extern:000000000021C3C8                 extrn unlink:near       ; CODE XREF: _unlink↑j
extern:000000000021C3C8                                         ; DATA XREF: .got:unlink_ptr↑o
extern:000000000021C3D0 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000021C3D0                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000021C3D0                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000021C3D8 ; void __noreturn exit(int status)
extern:000000000021C3D8                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000021C3D8                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000021C3E0 ; char *strcpy(char *dest, const char *src)
extern:000000000021C3E0                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:000000000021C3E0                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:000000000021C3E8 ; size_t _fpending(FILE *fp)
extern:000000000021C3E8                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000021C3E8                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000021C3F0 ; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
extern:000000000021C3F0                 extrn sigaction:near    ; CODE XREF: _sigaction↑j
extern:000000000021C3F0                                         ; DATA XREF: .got:sigaction_ptr↑o
extern:000000000021C3F8 ; int fcntl(int fd, int cmd, ...)
extern:000000000021C3F8                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000021C3F8                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000021C400 ; char *textdomain(const char *domainname)
extern:000000000021C400                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000021C400                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000021C408 ; __int64 _strtol_internal(const char *nptr, char **endptr, int base, int group)
extern:000000000021C408                 extrn __strtol_internal:near
extern:000000000021C408                                         ; CODE XREF: ___strtol_internal↑j
extern:000000000021C408                                         ; DATA XREF: .got:__strtol_internal_ptr↑o
extern:000000000021C410 ; int iswctype(wint_t wc, wctype_t desc)
extern:000000000021C410                 extrn iswctype:near     ; CODE XREF: _iswctype↑j
extern:000000000021C410                                         ; DATA XREF: .got:iswctype_ptr↑o
extern:000000000021C418 ; int fclose(FILE *stream)
extern:000000000021C418                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000021C418                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000021C420 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000021C420                 extrn bindtextdomain:near
extern:000000000021C420                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000021C420                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000021C428 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000021C428                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000021C428                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000021C430 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000021C430                 extrn __ctype_get_mb_cur_max:near
extern:000000000021C430                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000021C430                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000021C438 ; size_t strlen(const char *s)
extern:000000000021C438                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000021C438                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000021C440                 extrn __stack_chk_fail:near
extern:000000000021C440                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000021C440                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000021C448 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000021C448                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000021C448                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000021C450 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000021C450                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000021C450                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000021C458 ; int dup2(int fd, int fd2)
extern:000000000021C458                 extrn dup2:near         ; CODE XREF: _dup2↑j
extern:000000000021C458                                         ; DATA XREF: .got:dup2_ptr↑o
extern:000000000021C460 ; char *strchr(const char *s, int c)
extern:000000000021C460                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000021C460                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000021C468 ; char *strrchr(const char *s, int c)
extern:000000000021C468                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000021C468                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000021C470 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000021C470                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000021C470                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000021C478 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000021C478                 extrn __assert_fail:near
extern:000000000021C478                                         ; CODE XREF: ___assert_fail↑j
extern:000000000021C478                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000021C480 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:000000000021C480                 extrn __strtoul_internal:near
extern:000000000021C480                                         ; CODE XREF: ___strtoul_internal↑j
extern:000000000021C480                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:000000000021C488 ; void *memset(void *s, int c, size_t n)
extern:000000000021C488                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000021C488                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000021C490 ; int close(int fd)
extern:000000000021C490                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000021C490                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000021C498 ; int fputc(int c, FILE *stream)
extern:000000000021C498                 extrn fputc:near        ; CODE XREF: _fputc↑j
extern:000000000021C498                                         ; DATA XREF: .got:fputc_ptr↑o
extern:000000000021C4A0 ; void *memchr(const void *s, int c, size_t n)
extern:000000000021C4A0                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:000000000021C4A0                                         ; DATA XREF: .got:memchr_ptr↑o
extern:000000000021C4A8 ; ssize_t read(int fd, void *buf, size_t nbytes)
extern:000000000021C4A8                 extrn read:near         ; CODE XREF: _read↑j
extern:000000000021C4A8                                         ; DATA XREF: .got:read_ptr↑o
extern:000000000021C4B0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000021C4B0                 extrn __libc_start_main:near
extern:000000000021C4B0                                         ; CODE XREF: start+24↑p
extern:000000000021C4B0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000021C4B8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000021C4B8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000021C4B8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000021C4C0 ; wctype_t wctype(const char *property)
extern:000000000021C4C0                 extrn wctype:near       ; CODE XREF: _wctype↑j
extern:000000000021C4C0                                         ; DATA XREF: .got:wctype_ptr↑o
extern:000000000021C4C8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000021C4C8                 extrn fputs_unlocked:near
extern:000000000021C4C8                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000021C4C8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000021C4D0 ; void *calloc(size_t nmemb, size_t size)
extern:000000000021C4D0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000021C4D0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000021C4D8 ; int strcmp(const char *s1, const char *s2)
extern:000000000021C4D8                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000021C4D8                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000021C4E0 ; __sighandler_t signal(int sig, __sighandler_t handler)
extern:000000000021C4E0                 extrn signal:near       ; CODE XREF: _signal↑j
extern:000000000021C4E0                                         ; DATA XREF: .got:signal_ptr↑o
extern:000000000021C4E8 ; int sigemptyset(sigset_t *set)
extern:000000000021C4E8                 extrn sigemptyset:near  ; CODE XREF: _sigemptyset↑j
extern:000000000021C4E8                                         ; DATA XREF: .got:sigemptyset_ptr↑o
extern:000000000021C4F0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000021C4F0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000021C4F0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000021C4F8 ; int fileno(FILE *stream)
extern:000000000021C4F8                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000021C4F8                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000021C500 ; int iswalnum(wint_t wc)
extern:000000000021C500                 extrn iswalnum:near     ; CODE XREF: _iswalnum↑j
extern:000000000021C500                                         ; DATA XREF: .got:iswalnum_ptr↑o
extern:000000000021C508 ; void *malloc(size_t size)
extern:000000000021C508                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000021C508                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000021C510 ; size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
extern:000000000021C510                 extrn wcrtomb:near      ; CODE XREF: _wcrtomb↑j
extern:000000000021C510                                         ; DATA XREF: .got:wcrtomb_ptr↑o
extern:000000000021C518 ; int fflush(FILE *stream)
extern:000000000021C518                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000021C518                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000021C520 ; char *nl_langinfo(nl_item item)
extern:000000000021C520                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000021C520                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000021C528 ; int _freading(FILE *fp)
extern:000000000021C528                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000021C528                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000021C530 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000021C530                 extrn fwrite_unlocked:near
extern:000000000021C530                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000021C530                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000021C538 ; void *realloc(void *ptr, size_t size)
extern:000000000021C538                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000021C538                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000021C540 ; FILE *fdopen(int fd, const char *modes)
extern:000000000021C540                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:000000000021C540                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:000000000021C548 ; char *setlocale(int category, const char *locale)
extern:000000000021C548                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000021C548                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000021C550                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000021C550                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000021C558 ; wint_t btowc(int c)
extern:000000000021C558                 extrn btowc:near        ; CODE XREF: _btowc↑j
extern:000000000021C558                                         ; DATA XREF: .got:btowc_ptr↑o
extern:000000000021C560 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000021C560                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000021C560                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000021C568 ; void error(int status, int errnum, const char *format, ...)
extern:000000000021C568                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000021C568                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000021C570 ; int open(const char *file, int oflag, ...)
extern:000000000021C570                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000021C570                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000021C578 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000021C578                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000021C578                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000021C580 ; FILE *fopen(const char *filename, const char *modes)
extern:000000000021C580                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:000000000021C580                                         ; DATA XREF: .got:fopen_ptr↑o
extern:000000000021C588 ; wint_t towlower(wint_t wc)
extern:000000000021C588                 extrn towlower:near     ; CODE XREF: _towlower↑j
extern:000000000021C588                                         ; DATA XREF: .got:towlower_ptr↑o
extern:000000000021C590 ; wint_t towupper(wint_t wc)
extern:000000000021C590                 extrn towupper:near     ; CODE XREF: _towupper↑j
extern:000000000021C590                                         ; DATA XREF: .got:towupper_ptr↑o
extern:000000000021C598 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000021C598                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000021C598                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000021C5A0 ; int sigismember(const sigset_t *set, int signo)
extern:000000000021C5A0                 extrn sigismember:near  ; CODE XREF: _sigismember↑j
extern:000000000021C5A0                                         ; DATA XREF: .got:sigismember_ptr↑o
extern:000000000021C5A8 ; void __noreturn exit(int status)
extern:000000000021C5A8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000021C5A8                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000021C5B0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000021C5B0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000021C5B0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000021C5B8                 extrn __fprintf_chk:near
extern:000000000021C5B8                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000021C5B8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000021C5C0 ; int mbsinit(const mbstate_t *ps)
extern:000000000021C5C0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000021C5C0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000021C5C8 ; int iswprint(wint_t wc)
extern:000000000021C5C8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000021C5C8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000021C5D0 ; int __fastcall __cxa_finalize(void *)
extern:000000000021C5D0                 extrn __imp___cxa_finalize:near ; weak
extern:000000000021C5D0                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000021C5D0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000021C5D8 ; int sigaddset(sigset_t *set, int signo)
extern:000000000021C5D8                 extrn sigaddset:near    ; CODE XREF: _sigaddset↑j
extern:000000000021C5D8                                         ; DATA XREF: .got:sigaddset_ptr↑o
extern:000000000021C5E0 ; const __int32_t **_ctype_tolower_loc(void)
extern:000000000021C5E0                 extrn __ctype_tolower_loc:near
extern:000000000021C5E0                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:000000000021C5E0                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:000000000021C5E8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000021C5E8                 extrn __ctype_b_loc:near
extern:000000000021C5E8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000021C5E8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000021C5F0                 extrn __sprintf_chk:near
extern:000000000021C5F0                                         ; CODE XREF: ___sprintf_chk↑j
extern:000000000021C5F0                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:000000000021C5F8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000021C5F8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000021C600                 extrn __gmon_start__:near ; weak
extern:000000000021C600                                         ; CODE XREF: _init_proc+10↑p
extern:000000000021C600                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000021C608                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000021C608                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000021C608
extern:000000000021C608
extern:000000000021C608                 end start
