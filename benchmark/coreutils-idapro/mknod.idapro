LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 005F158DF557A6D5D025245CF611BEFE61B17140CE6EBCCA8B929E6B9DDA546A
LOAD:0000000000000000 ; Input MD5    : 429975D852221EF750C9ED3E4C7F1CB3
LOAD:0000000000000000 ; Input CRC32  : BA20F081
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/mknod
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'mknod.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'selinux.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'modechange.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 28C00h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 76E8h                ; Size in file image
LOAD:00000000000000D8                 dq 76E8h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7B50h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207B50h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 530h                 ; Size in file image
LOAD:0000000000000110                 dq 6E8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7C58h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207C58h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 68FCh                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 68FCh                ; Physical address
LOAD:00000000000001B0                 dq 25Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 25Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7B50h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207B50h              ; Physical address
LOAD:0000000000000220                 dq 4B0h                 ; Size in file image
LOAD:0000000000000228                 dq 4B0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0DFh, 0Ah, 0C0h, 0BCh, 2Fh, 0D3h, 0F3h, 2Bh, 0B5h, 28h ; Desc
LOAD:0000000000000284                 db 0B5h, 89h, 11h, 0FFh, 16h, 9Ah, 5, 0E8h, 65h, 0D0h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 35h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 35h, 36h, 3Bh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_898, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_898, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_898, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_898, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_898, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_898, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_898, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_898, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFclose - offset byte_898, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aBindtextdomain - offset byte_898, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aDcgettext - offset byte_898, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_898, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aStrlen - offset byte_898, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStackChkFail - offset byte_898, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aGetoptLong - offset byte_898, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aMbrtowc - offset byte_898, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStrchr - offset byte_898, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrrchr - offset byte_898, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aLseek - offset byte_898, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004A8                            0>
LOAD:00000000000004C0                 Elf64_Sym <offset aAssertFail - offset byte_898, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStrtoulInterna - offset byte_898, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aMemset - offset byte_898, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aLibcStartMain - offset byte_898, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aMemcmp - offset byte_898, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aFputsUnlocked - offset byte_898, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aCalloc - offset byte_898, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aMkfifo - offset byte_898, 12h, 0, 0, \ ; "mkfifo"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aGmonStart - offset byte_898, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aUmask - offset byte_898, 12h, 0, 0, offset dword_0,\ ; "umask"
LOAD:0000000000000598                            0>
LOAD:00000000000005B0                 Elf64_Sym <offset aMemcpy - offset byte_898, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aXmknod - offset byte_898, 12h, 0, 0, \ ; "__xmknod"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFileno - offset byte_898, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aXstat - offset byte_898, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:00000000000005F8                            0>
LOAD:0000000000000610                 Elf64_Sym <offset aMalloc - offset byte_898, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFflush - offset byte_898, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aNlLanginfo - offset byte_898, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFreading - offset byte_898, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aRealloc - offset byte_898, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aSetlocale - offset byte_898, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aPrintfChk - offset byte_898, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aChmod - offset byte_898, 12h, 0, 0, offset dword_0,\ ; "chmod"
LOAD:00000000000006B8                            0>
LOAD:00000000000006D0                 Elf64_Sym <offset aError - offset byte_898, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006D0                            0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFseeko - offset byte_898, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aCxaAtexit - offset byte_898, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aExit+1 - offset byte_898, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFwrite - offset byte_898, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFprintfChk - offset byte_898, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aItmRegistertmc - offset byte_898, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aMbsinit - offset byte_898, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aIswprint - offset byte_898, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aCxaFinalize - offset byte_898, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCtypeBLoc - offset byte_898, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aStdout - offset byte_898, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007D8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000007F0                 Elf64_Sym <offset aProgname - offset byte_898, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000007F0                            offset __bss_start, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aProgramInvocat - offset byte_898, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000808                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aPrognameFull - offset byte_898, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000820                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_898, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000838                            offset __bss_start, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aStderr - offset byte_898, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000850                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aOptind - offset byte_898, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000868                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000880                 Elf64_Sym <offset aOptarg - offset byte_898, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000880                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000898 ; ELF String Table
LOAD:0000000000000898 byte_898        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000898                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000899 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000BE0↓o
LOAD:00000000000008A3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000008AA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000008B7 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000688↑o
LOAD:00000000000008C1 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000460↑o
LOAD:00000000000008C9 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000008D1 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:00000000000008D8 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:00000000000008E0 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:00000000000008EA aError          db 'error',0            ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:00000000000008F0 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000901 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000790↑o
LOAD:000000000000090A aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000912 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000918 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000918                                         ; LOAD:0000000000000718↑o
LOAD:000000000000091E aProgramInvocat db 'program_invocation_name',0
LOAD:000000000000091E                                         ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000936 aChmod          db 'chmod',0            ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:000000000000093C aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:000000000000094A aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:000000000000094A                                         ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000961 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000968 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000418↑o
LOAD:000000000000096F aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000976 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000987 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:000000000000098E aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000748↑o
LOAD:000000000000099C aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:00000000000009A3 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:00000000000009A9 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009B0 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:00000000000009B7 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:00000000000009BE aUmask          db 'umask',0            ; DATA XREF: LOAD:0000000000000598↑o
LOAD:00000000000009C4 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000778↑o
LOAD:00000000000009CC aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000640↑o
LOAD:00000000000009D8 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:00000000000009E6 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:00000000000009ED aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000658↑o
LOAD:00000000000009F8 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:00000000000009FF aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000A0B aXmknod         db '__xmknod',0         ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000A14 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000A1B aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000A22 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000A2D aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A34 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A34                                         ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000A52 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000A61 aXstat          db '__xstat',0          ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A69 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000A69                                         ; LOAD:00000000000003A0↑o
LOAD:0000000000000A78 aMkfifo         db 'mkfifo',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000A7F aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A7F                                         ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000A91 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000A98 aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000A98                                         ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000AAB aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000ABA aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000ABF aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000ACA aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000ADA aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000AE7 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000BF0↓o
LOAD:0000000000000AF1 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C00↓o
LOAD:0000000000000AFD aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C10↓o
LOAD:0000000000000B08 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C20↓o
LOAD:0000000000000B12 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C30↓o
LOAD:0000000000000B1E aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B1E                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000B3A aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B49 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B49                                         ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000B63                 align 4
LOAD:0000000000000B64 ; ELF GNU Symbol Version Table
LOAD:0000000000000B64                 dw 0
LOAD:0000000000000B66                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B68                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B6A                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B6C                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B6E                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B70                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B72                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B74                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B76                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B78                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B7A                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000B7C                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000B7E                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000B80                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000B82                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000B84                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000B86                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000B88                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000B8A                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000B8C                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000B90                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B98                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000B9A                 dw 2                    ; mkfifo@@GLIBC_2.2.5
LOAD:0000000000000B9C                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000B9E                 dw 2                    ; umask@@GLIBC_2.2.5
LOAD:0000000000000BA0                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000BA2                 dw 2                    ; __xmknod@@GLIBC_2.2.5
LOAD:0000000000000BA4                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000BA6                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000BA8                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000BAA                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BAC                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BAE                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000BB0                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000BB4                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000BB6                 dw 2                    ; chmod@@GLIBC_2.2.5
LOAD:0000000000000BB8                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000BBC                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000BBE                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000BC0                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000BC2                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BC4                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BC6                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BC8                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BCE                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BD0                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BD4                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000BD8                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000BDA                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000BDC                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000BDE                 dw 0
LOAD:0000000000000BE0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000BE0                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_898, 10h, 0> ; "libc.so.6"
LOAD:0000000000000BF0                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_898, \ ; "GLIBC_2.3"
LOAD:0000000000000BF0                                10h>
LOAD:0000000000000C00                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_898, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C00                                10h>
LOAD:0000000000000C10                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_898, \ ; "GLIBC_2.14"
LOAD:0000000000000C10                                10h>
LOAD:0000000000000C20                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_898, \ ; "GLIBC_2.4"
LOAD:0000000000000C20                                10h>
LOAD:0000000000000C30                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_898, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C40 ; ELF RELA Relocation Table
LOAD:0000000000000C40                 Elf64_Rela <207B50h, 8, 1E40h> ; R_X86_64_RELATIVE +1E40h
LOAD:0000000000000C58                 Elf64_Rela <207B58h, 8, 1E00h> ; R_X86_64_RELATIVE +1E00h
LOAD:0000000000000C70                 Elf64_Rela <207B60h, 8, 57E9h> ; R_X86_64_RELATIVE +57E9h
LOAD:0000000000000C88                 Elf64_Rela <207B80h, 8, 5761h> ; R_X86_64_RELATIVE +5761h
LOAD:0000000000000CA0                 Elf64_Rela <207BA0h, 8, 57F1h> ; R_X86_64_RELATIVE +57F1h
LOAD:0000000000000CB8                 Elf64_Rela <207BC0h, 8, 57F6h> ; R_X86_64_RELATIVE +57F6h
LOAD:0000000000000CD0                 Elf64_Rela <207C00h, 8, 5F81h> ; R_X86_64_RELATIVE +5F81h
LOAD:0000000000000CE8                 Elf64_Rela <207C08h, 8, 5F89h> ; R_X86_64_RELATIVE +5F89h
LOAD:0000000000000D00                 Elf64_Rela <207C10h, 8, 5F8Fh> ; R_X86_64_RELATIVE +5F8Fh
LOAD:0000000000000D18                 Elf64_Rela <207C18h, 8, 5F9Ch> ; R_X86_64_RELATIVE +5F9Ch
LOAD:0000000000000D30                 Elf64_Rela <207C20h, 8, 5FA9h> ; R_X86_64_RELATIVE +5FA9h
LOAD:0000000000000D48                 Elf64_Rela <207C28h, 8, 5FBDh> ; R_X86_64_RELATIVE +5FBDh
LOAD:0000000000000D60                 Elf64_Rela <207C30h, 8, 5FBFh> ; R_X86_64_RELATIVE +5FBFh
LOAD:0000000000000D78                 Elf64_Rela <207C38h, 8, 5FA2h> ; R_X86_64_RELATIVE +5FA2h
LOAD:0000000000000D90                 Elf64_Rela <207C40h, 8, 573Eh> ; R_X86_64_RELATIVE +573Eh
LOAD:0000000000000DA8                 Elf64_Rela <207C48h, 8, 5FC7h> ; R_X86_64_RELATIVE +5FC7h
LOAD:0000000000000DC0                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000DD8                 Elf64_Rela <208010h, 8, 5E87h> ; R_X86_64_RELATIVE +5E87h
LOAD:0000000000000DF0                 Elf64_Rela <208060h, 8, 208070h> ; R_X86_64_RELATIVE +208070h
LOAD:0000000000000E08                 Elf64_Rela <208078h, 8, 208100h> ; R_X86_64_RELATIVE +208100h
LOAD:0000000000000E20                 Elf64_Rela <207FD8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000E38                 Elf64_Rela <207FE0h, 1700000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000E50                 Elf64_Rela <207FE8h, 1C00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000E68                 Elf64_Rela <207FF0h, 3000000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000E80                 Elf64_Rela <207FF8h, 3300000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000E98                 Elf64_Rela <208080h, 3600000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000EB0                 Elf64_Rela <208088h, 3500000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000EC8                 Elf64_Rela <208090h, 3B00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000EE0                 Elf64_Rela <208098h, 3C00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000EF8                 Elf64_Rela <2080A0h, 3800000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000F10                 Elf64_Rela <2080C0h, 3A00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000F28 ; ELF JMPREL Relocation Table
LOAD:0000000000000F28                 Elf64_Rela <207E60h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000F40                 Elf64_Rela <207E68h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000F58                 Elf64_Rela <207E70h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000F70                 Elf64_Rela <207E78h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000F88                 Elf64_Rela <207E80h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000FA0                 Elf64_Rela <207E88h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000FB8                 Elf64_Rela <207E90h, 800000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000FD0                 Elf64_Rela <207E98h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000FE8                 Elf64_Rela <207EA0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001000                 Elf64_Rela <207EA8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001018                 Elf64_Rela <207EB0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001030                 Elf64_Rela <207EB8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001048                 Elf64_Rela <207EC0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001060                 Elf64_Rela <207EC8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001078                 Elf64_Rela <207ED0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001090                 Elf64_Rela <207ED8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:00000000000010A8                 Elf64_Rela <207EE0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000010C0                 Elf64_Rela <207EE8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000010D8                 Elf64_Rela <207EF0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000010F0                 Elf64_Rela <207EF8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000001108                 Elf64_Rela <207F00h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001120                 Elf64_Rela <207F08h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001138                 Elf64_Rela <207F10h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001150                 Elf64_Rela <207F18h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001168                 Elf64_Rela <207F20h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT mkfifo
LOAD:0000000000001180                 Elf64_Rela <207F28h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT umask
LOAD:0000000000001198                 Elf64_Rela <207F30h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000011B0                 Elf64_Rela <207F38h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT __xmknod
LOAD:00000000000011C8                 Elf64_Rela <207F40h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000011E0                 Elf64_Rela <207F48h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:00000000000011F8                 Elf64_Rela <207F50h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001210                 Elf64_Rela <207F58h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001228                 Elf64_Rela <207F60h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001240                 Elf64_Rela <207F68h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001258                 Elf64_Rela <207F70h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001270                 Elf64_Rela <207F78h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001288                 Elf64_Rela <207F80h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000012A0                 Elf64_Rela <207F88h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT chmod
LOAD:00000000000012B8                 Elf64_Rela <207F90h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000012D0                 Elf64_Rela <207F98h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000012E8                 Elf64_Rela <207FA0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001300                 Elf64_Rela <207FA8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001318                 Elf64_Rela <207FB0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001330                 Elf64_Rela <207FB8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001348                 Elf64_Rela <207FC0h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001360                 Elf64_Rela <207FC8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001378                 Elf64_Rela <207FD0h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001378 LOAD            ends
LOAD:0000000000001378
.init:0000000000001390 ; ===========================================================================
.init:0000000000001390
.init:0000000000001390 ; Segment type: Pure code
.init:0000000000001390 ; Segment permissions: Read/Execute
.init:0000000000001390 _init           segment dword public 'CODE' use64
.init:0000000000001390                 assume cs:_init
.init:0000000000001390                 ;org 1390h
.init:0000000000001390                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001390
.init:0000000000001390 ; =============== S U B R O U T I N E =======================================
.init:0000000000001390
.init:0000000000001390
.init:0000000000001390                 public _init_proc
.init:0000000000001390 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001390                 sub     rsp, 8          ; _init
.init:0000000000001394                 mov     rax, cs:__gmon_start___ptr
.init:000000000000139B                 test    rax, rax
.init:000000000000139E                 jz      short loc_13A2
.init:00000000000013A0                 call    rax ; __gmon_start__
.init:00000000000013A2
.init:00000000000013A2 loc_13A2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000013A2                 add     rsp, 8
.init:00000000000013A6                 retn
.init:00000000000013A6 _init_proc      endp
.init:00000000000013A6
.init:00000000000013A6 _init           ends
.init:00000000000013A6
LOAD:00000000000013A7 ; ===========================================================================
LOAD:00000000000013A7
LOAD:00000000000013A7 ; Segment type: Pure code
LOAD:00000000000013A7 ; Segment permissions: Read/Execute
LOAD:00000000000013A7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000013A7                 assume cs:LOAD
LOAD:00000000000013A7                 ;org 13A7h
LOAD:00000000000013A7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000013A7                 align 10h
LOAD:00000000000013A7 LOAD            ends
LOAD:00000000000013A7
.plt:00000000000013B0 ; ===========================================================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Segment type: Pure code
.plt:00000000000013B0 ; Segment permissions: Read/Execute
.plt:00000000000013B0 _plt            segment para public 'CODE' use64
.plt:00000000000013B0                 assume cs:_plt
.plt:00000000000013B0                 ;org 13B0h
.plt:00000000000013B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0
.plt:00000000000013B0 sub_13B0        proc near               ; CODE XREF: .plt:00000000000013CB↓j
.plt:00000000000013B0                                         ; .plt:00000000000013DB↓j ...
.plt:00000000000013B0 ; __unwind {
.plt:00000000000013B0                 push    cs:qword_207E50
.plt:00000000000013B6                 jmp     cs:qword_207E58
.plt:00000000000013B6 sub_13B0        endp
.plt:00000000000013B6
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013BC                 align 20h
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; void free(void *ptr)
.plt:00000000000013C0 _free           proc near               ; CODE XREF: main+17D↓p
.plt:00000000000013C0                                         ; mode_compile+B6↓p ...
.plt:00000000000013C0                 jmp     cs:free_ptr
.plt:00000000000013C0 _free           endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    0
.plt:00000000000013CB                 jmp     sub_13B0
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: noreturn thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; void __noreturn abort(void)
.plt:00000000000013D0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000013D0                                         ; quotearg_buffer_restyled:def_2B21↓p ...
.plt:00000000000013D0                 jmp     cs:abort_ptr
.plt:00000000000013D0 _abort          endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    1
.plt:00000000000013DB                 jmp     sub_13B0
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; int *__errno_location(void)
.plt:00000000000013E0 ___errno_location proc near             ; CODE XREF: main+42E↓p
.plt:00000000000013E0                                         ; main+579↓p ...
.plt:00000000000013E0                 jmp     cs:__errno_location_ptr
.plt:00000000000013E0 ___errno_location endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    2
.plt:00000000000013EB                 jmp     sub_13B0
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000013F0 _strncmp        proc near               ; CODE XREF: usage+2E4↓p
.plt:00000000000013F0                                         ; usage+3A5↓p
.plt:00000000000013F0                 jmp     cs:strncmp_ptr
.plt:00000000000013F0 _strncmp        endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    3
.plt:00000000000013FB                 jmp     sub_13B0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: noreturn thunk
.plt:0000000000001400
.plt:0000000000001400 ; void __noreturn _exit(int status)
.plt:0000000000001400 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001400                 jmp     cs:_exit_ptr
.plt:0000000000001400 __exit          endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    4
.plt:000000000000140B                 jmp     sub_13B0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; size_t __fpending(FILE *fp)
.plt:0000000000001410 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001410                 jmp     cs:__fpending_ptr
.plt:0000000000001410 ___fpending     endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    5
.plt:000000000000141B                 jmp     sub_13B0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; char *textdomain(const char *domainname)
.plt:0000000000001420 _textdomain     proc near               ; CODE XREF: main+61↓p
.plt:0000000000001420                 jmp     cs:textdomain_ptr
.plt:0000000000001420 _textdomain     endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    6
.plt:000000000000142B                 jmp     sub_13B0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; int fclose(FILE *stream)
.plt:0000000000001430 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001430                                         ; rpl_fclose+6B↓j
.plt:0000000000001430                 jmp     cs:fclose_ptr
.plt:0000000000001430 _fclose         endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    7
.plt:000000000000143B                 jmp     sub_13B0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001440 _bindtextdomain proc near               ; CODE XREF: main+55↓p
.plt:0000000000001440                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001440 _bindtextdomain endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    8
.plt:000000000000144B                 jmp     sub_13B0
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001450 _dcgettext      proc near               ; CODE XREF: main+11C↓p
.plt:0000000000001450                                         ; main+1F0↓p ...
.plt:0000000000001450                 jmp     cs:dcgettext_ptr
.plt:0000000000001450 _dcgettext      endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    9
.plt:000000000000145B                 jmp     sub_13B0
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001460 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001460                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001460 ___ctype_get_mb_cur_max endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    0Ah
.plt:000000000000146B                 jmp     sub_13B0
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; size_t strlen(const char *s)
.plt:0000000000001470 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001470                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001470                 jmp     cs:strlen_ptr
.plt:0000000000001470 _strlen         endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    0Bh
.plt:000000000000147B                 jmp     sub_13B0
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: noreturn thunk
.plt:0000000000001480
.plt:0000000000001480 ___stack_chk_fail proc near             ; CODE XREF: main:loc_1CF1↓p
.plt:0000000000001480                                         ; mode_create_from_ref:loc_2784↓p ...
.plt:0000000000001480                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001480 ___stack_chk_fail endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    0Ch
.plt:000000000000148B                 jmp     sub_13B0
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001490 _getopt_long    proc near               ; CODE XREF: main+84↓p
.plt:0000000000001490                 jmp     cs:getopt_long_ptr
.plt:0000000000001490 _getopt_long    endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    0Dh
.plt:000000000000149B                 jmp     sub_13B0
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000014A0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000014A0                 jmp     cs:mbrtowc_ptr
.plt:00000000000014A0 _mbrtowc        endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    0Eh
.plt:00000000000014AB                 jmp     sub_13B0
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; char *strchr(const char *s, int c)
.plt:00000000000014B0 _strchr         proc near               ; CODE XREF: xstrtoumax+123↓p
.plt:00000000000014B0                                         ; xstrtoumax+143↓p ...
.plt:00000000000014B0                 jmp     cs:strchr_ptr
.plt:00000000000014B0 _strchr         endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    0Fh
.plt:00000000000014BB                 jmp     sub_13B0
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; char *strrchr(const char *s, int c)
.plt:00000000000014C0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000014C0                 jmp     cs:strrchr_ptr
.plt:00000000000014C0 _strrchr        endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    10h
.plt:00000000000014CB                 jmp     sub_13B0
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000014D0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000014D0                                         ; rpl_fseeko+3B↓p
.plt:00000000000014D0                 jmp     cs:lseek_ptr
.plt:00000000000014D0 _lseek          endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    11h
.plt:00000000000014DB                 jmp     sub_13B0
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: noreturn thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:00000000000014E0 ___assert_fail  proc near               ; CODE XREF: xstrtoumax+39F↓p
.plt:00000000000014E0                 jmp     cs:__assert_fail_ptr
.plt:00000000000014E0 ___assert_fail  endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    12h
.plt:00000000000014EB                 jmp     sub_13B0
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:00000000000014F0 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:00000000000014F0                 jmp     cs:__strtoul_internal_ptr
.plt:00000000000014F0 ___strtoul_internal endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    13h
.plt:00000000000014FB                 jmp     sub_13B0
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001500 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001500                                         ; xzalloc+12↓j
.plt:0000000000001500                 jmp     cs:memset_ptr
.plt:0000000000001500 _memset         endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    14h
.plt:000000000000150B                 jmp     sub_13B0
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001510 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001510                 jmp     cs:memcmp_ptr
.plt:0000000000001510 _memcmp         endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    15h
.plt:000000000000151B                 jmp     sub_13B0
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001520 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001520                                         ; usage+C2↓p ...
.plt:0000000000001520                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001520 _fputs_unlocked endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    16h
.plt:000000000000152B                 jmp     sub_13B0
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001530 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001530                 jmp     cs:calloc_ptr
.plt:0000000000001530 _calloc         endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    17h
.plt:000000000000153B                 jmp     sub_13B0
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; int mkfifo(const char *path, __mode_t mode)
.plt:0000000000001540 _mkfifo         proc near               ; CODE XREF: main+292↓p
.plt:0000000000001540                 jmp     cs:mkfifo_ptr
.plt:0000000000001540 _mkfifo         endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    18h
.plt:000000000000154B                 jmp     sub_13B0
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; __mode_t umask(__mode_t mask)
.plt:0000000000001550 _umask          proc near               ; CODE XREF: main+153↓p
.plt:0000000000001550                                         ; main+15D↓p
.plt:0000000000001550                 jmp     cs:umask_ptr
.plt:0000000000001550 _umask          endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    19h
.plt:000000000000155B                 jmp     sub_13B0
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001560 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001560                 jmp     cs:memcpy_ptr
.plt:0000000000001560 _memcpy         endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    1Ah
.plt:000000000000156B                 jmp     sub_13B0
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; int __xmknod(int ver, const char *path, __mode_t mode, __dev_t *dev)
.plt:0000000000001570 ___xmknod       proc near               ; CODE XREF: main+407↓p
.plt:0000000000001570                 jmp     cs:__xmknod_ptr
.plt:0000000000001570 ___xmknod       endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    1Bh
.plt:000000000000157B                 jmp     sub_13B0
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; int fileno(FILE *stream)
.plt:0000000000001580 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001580                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001580                 jmp     cs:fileno_ptr
.plt:0000000000001580 _fileno         endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    1Ch
.plt:000000000000158B                 jmp     sub_13B0
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001590 ___xstat        proc near               ; CODE XREF: mode_create_from_ref+26↓p
.plt:0000000000001590                 jmp     cs:__xstat_ptr
.plt:0000000000001590 ___xstat        endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    1Dh
.plt:000000000000159B                 jmp     sub_13B0
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; void *malloc(size_t size)
.plt:00000000000015A0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000015A0                 jmp     cs:malloc_ptr
.plt:00000000000015A0 _malloc         endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    1Eh
.plt:00000000000015AB                 jmp     sub_13B0
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; int fflush(FILE *stream)
.plt:00000000000015B0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000015B0                                         ; rpl_fflush+3B↓j
.plt:00000000000015B0                 jmp     cs:fflush_ptr
.plt:00000000000015B0 _fflush         endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    1Fh
.plt:00000000000015BB                 jmp     sub_13B0
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; char *nl_langinfo(nl_item item)
.plt:00000000000015C0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000015C0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000015C0 _nl_langinfo    endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    20h ; ' '
.plt:00000000000015CB                 jmp     sub_13B0
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; int __freading(FILE *fp)
.plt:00000000000015D0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000015D0                                         ; rpl_fflush+9↓p
.plt:00000000000015D0                 jmp     cs:__freading_ptr
.plt:00000000000015D0 ___freading     endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    21h ; '!'
.plt:00000000000015DB                 jmp     sub_13B0
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000015E0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000015E0                 jmp     cs:realloc_ptr
.plt:00000000000015E0 _realloc        endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    22h ; '"'
.plt:00000000000015EB                 jmp     sub_13B0
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; char *setlocale(int category, const char *locale)
.plt:00000000000015F0 _setlocale      proc near               ; CODE XREF: main+42↓p
.plt:00000000000015F0                                         ; usage+2CB↓p ...
.plt:00000000000015F0                 jmp     cs:setlocale_ptr
.plt:00000000000015F0 _setlocale      endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    23h ; '#'
.plt:00000000000015FB                 jmp     sub_13B0
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001600                                         ; usage+1D0↓p ...
.plt:0000000000001600                 jmp     cs:__printf_chk_ptr
.plt:0000000000001600 ___printf_chk   endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    24h ; '$'
.plt:000000000000160B                 jmp     sub_13B0
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; int chmod(const char *file, __mode_t mode)
.plt:0000000000001610 _chmod          proc near               ; CODE XREF: main+2B2↓p
.plt:0000000000001610                 jmp     cs:chmod_ptr
.plt:0000000000001610 _chmod          endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    25h ; '%'
.plt:000000000000161B                 jmp     sub_13B0
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001620 _error          proc near               ; CODE XREF: main+12A↓p
.plt:0000000000001620                                         ; main+201↓p ...
.plt:0000000000001620                 jmp     cs:error_ptr
.plt:0000000000001620 _error          endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    26h ; '&'
.plt:000000000000162B                 jmp     sub_13B0
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001630 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_557A↓j
.plt:0000000000001630                 jmp     cs:fseeko_ptr
.plt:0000000000001630 _fseeko         endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    27h ; '''
.plt:000000000000163B                 jmp     sub_13B0
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001640 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001640                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001640 ___cxa_atexit   endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    28h ; '('
.plt:000000000000164B                 jmp     sub_13B0
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: noreturn thunk
.plt:0000000000001650
.plt:0000000000001650 ; void __noreturn exit(int status)
.plt:0000000000001650 _exit           proc near               ; CODE XREF: main+FA↓p
.plt:0000000000001650                                         ; usage+58↓p
.plt:0000000000001650                 jmp     cs:exit_ptr
.plt:0000000000001650 _exit           endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    29h ; ')'
.plt:000000000000165B                 jmp     sub_13B0
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001660 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001660                 jmp     cs:fwrite_ptr
.plt:0000000000001660 _fwrite         endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    2Ah ; '*'
.plt:000000000000166B                 jmp     sub_13B0
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ___fprintf_chk  proc near               ; CODE XREF: main+240↓p
.plt:0000000000001670                                         ; usage+51↓p ...
.plt:0000000000001670                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001670 ___fprintf_chk  endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    2Bh ; '+'
.plt:000000000000167B                 jmp     sub_13B0
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001680 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001680                 jmp     cs:mbsinit_ptr
.plt:0000000000001680 _mbsinit        endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    2Ch ; ','
.plt:000000000000168B                 jmp     sub_13B0
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; int iswprint(wint_t wc)
.plt:0000000000001690 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001690                 jmp     cs:iswprint_ptr
.plt:0000000000001690 _iswprint       endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    2Dh ; '-'
.plt:000000000000169B                 jmp     sub_13B0
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000016A0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000016A0                                         ; xstrtoumax+55↓p
.plt:00000000000016A0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000016A0 ___ctype_b_loc  endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    2Eh ; '.'
.plt:00000000000016AB                 jmp     sub_13B0
.plt:00000000000016AB ; } // starts at 13B0
.plt:00000000000016AB _plt            ends
.plt:00000000000016AB
.plt.got:00000000000016B0 ; ===========================================================================
.plt.got:00000000000016B0
.plt.got:00000000000016B0 ; Segment type: Pure code
.plt.got:00000000000016B0 ; Segment permissions: Read/Execute
.plt.got:00000000000016B0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000016B0                 assume cs:_plt_got
.plt.got:00000000000016B0                 ;org 16B0h
.plt.got:00000000000016B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000016B0
.plt.got:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000016B0
.plt.got:00000000000016B0 ; Attributes: thunk
.plt.got:00000000000016B0
.plt.got:00000000000016B0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000016B0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000016B0 ; __unwind {
.plt.got:00000000000016B0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000016B0 __cxa_finalize  endp
.plt.got:00000000000016B0
.plt.got:00000000000016B0 ; ---------------------------------------------------------------------------
.plt.got:00000000000016B6                 align 8
.plt.got:00000000000016B6 ; } // starts at 16B0
.plt.got:00000000000016B6 _plt_got        ends
.plt.got:00000000000016B6
LOAD:00000000000016B8 ; ===========================================================================
LOAD:00000000000016B8
LOAD:00000000000016B8 ; Segment type: Pure code
LOAD:00000000000016B8 ; Segment permissions: Read/Execute
LOAD:00000000000016B8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000016B8                 assume cs:LOAD
LOAD:00000000000016B8                 ;org 16B8h
LOAD:00000000000016B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000016B8                 align 20h
LOAD:00000000000016B8 LOAD            ends
LOAD:00000000000016B8
.text:00000000000016C0 ; ===========================================================================
.text:00000000000016C0
.text:00000000000016C0 ; Segment type: Pure code
.text:00000000000016C0 ; Segment permissions: Read/Execute
.text:00000000000016C0 _text           segment para public 'CODE' use64
.text:00000000000016C0                 assume cs:_text
.text:00000000000016C0                 ;org 16C0h
.text:00000000000016C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000016C0
.text:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016C0
.text:00000000000016C0
.text:00000000000016C0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000016C0                 public main
.text:00000000000016C0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000016C0
.text:00000000000016C0 var_58          = qword ptr -58h
.text:00000000000016C0 var_50          = qword ptr -50h
.text:00000000000016C0 dev             = qword ptr -48h
.text:00000000000016C0 var_40          = qword ptr -40h
.text:00000000000016C0
.text:00000000000016C0 ; __unwind {
.text:00000000000016C0                 push    r15
.text:00000000000016C2                 push    r14
.text:00000000000016C4                 push    r13
.text:00000000000016C6                 push    r12
.text:00000000000016C8                 lea     r12, longopts
.text:00000000000016CF                 push    rbp
.text:00000000000016D0                 push    rbx
.text:00000000000016D1                 movsxd  rbp, edi
.text:00000000000016D4                 mov     rbx, rsi
.text:00000000000016D7                 xor     r13d, r13d
.text:00000000000016DA                 sub     rsp, 28h
.text:00000000000016DE                 mov     rdi, [rsi]
.text:00000000000016E1                 mov     rax, fs:28h
.text:00000000000016EA                 mov     [rsp+58h+var_40], rax
.text:00000000000016EF                 xor     eax, eax
.text:00000000000016F1                 call    set_program_name
.text:00000000000016F6                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000016FD                 mov     edi, 6          ; category
.text:0000000000001702                 call    _setlocale
.text:0000000000001707                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000170E                 lea     rdi, domainname ; "coreutils"
.text:0000000000001715                 call    _bindtextdomain
.text:000000000000171A                 lea     rdi, domainname ; "coreutils"
.text:0000000000001721                 call    _textdomain
.text:0000000000001726                 lea     rdi, close_stdout
.text:000000000000172D                 call    atexit
.text:0000000000001732
.text:0000000000001732 loc_1732:                               ; CODE XREF: main+B4↓j
.text:0000000000001732                                         ; main+108↓j ...
.text:0000000000001732                 lea     rdx, shortopts  ; "m:Z"
.text:0000000000001739                 xor     r8d, r8d        ; longind
.text:000000000000173C                 mov     rcx, r12        ; longopts
.text:000000000000173F                 mov     rsi, rbx        ; argv
.text:0000000000001742                 mov     edi, ebp        ; argc
.text:0000000000001744                 call    _getopt_long
.text:0000000000001749                 cmp     eax, 0FFFFFFFFh
.text:000000000000174C                 jz      loc_17F4
.text:0000000000001752                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001757                 jz      loc_1B3C
.text:000000000000175D                 jle     short loc_1780
.text:000000000000175F                 cmp     eax, 5Ah ; 'Z'
.text:0000000000001762                 jz      short loc_17C0
.text:0000000000001764                 cmp     eax, 6Dh ; 'm'
.text:0000000000001767                 jnz     loc_19E9
.text:000000000000176D                 mov     r13, cs:optarg@@GLIBC_2_2_5
.text:0000000000001774                 jmp     short loc_1732
.text:0000000000001774 ; ---------------------------------------------------------------------------
.text:0000000000001776                 align 20h
.text:0000000000001780
.text:0000000000001780 loc_1780:                               ; CODE XREF: main+9D↑j
.text:0000000000001780                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001785                 jnz     loc_19E9
.text:000000000000178B                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001792                 mov     rcx, cs:Version
.text:0000000000001799                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:00000000000017A0                 lea     rdx, unk_5700
.text:00000000000017A7                 lea     rsi, aMknod     ; "mknod"
.text:00000000000017AE                 xor     r9d, r9d
.text:00000000000017B1                 xor     eax, eax
.text:00000000000017B3                 call    version_etc
.text:00000000000017B8                 xor     edi, edi        ; status
.text:00000000000017BA                 call    _exit
.text:00000000000017BA ; ---------------------------------------------------------------------------
.text:00000000000017BF                 align 20h
.text:00000000000017C0
.text:00000000000017C0 loc_17C0:                               ; CODE XREF: main+A2↑j
.text:00000000000017C0                 cmp     cs:optarg@@GLIBC_2_2_5, 0
.text:00000000000017C8                 jz      loc_1732
.text:00000000000017CE                 lea     rsi, msgid      ; "warning: ignoring --context; it require"...
.text:00000000000017D5                 xor     edi, edi        ; domainname
.text:00000000000017D7                 mov     edx, 5          ; category
.text:00000000000017DC                 call    _dcgettext
.text:00000000000017E1                 xor     esi, esi        ; errnum
.text:00000000000017E3                 mov     rdx, rax        ; format
.text:00000000000017E6                 xor     edi, edi        ; status
.text:00000000000017E8                 xor     eax, eax
.text:00000000000017EA                 call    _error
.text:00000000000017EF                 jmp     loc_1732
.text:00000000000017F4 ; ---------------------------------------------------------------------------
.text:00000000000017F4
.text:00000000000017F4 loc_17F4:                               ; CODE XREF: main+8C↑j
.text:00000000000017F4                 test    r13, r13
.text:00000000000017F7                 jz      loc_1B0B
.text:00000000000017FD                 mov     rdi, r13
.text:0000000000001800                 call    mode_compile
.text:0000000000001805                 test    rax, rax
.text:0000000000001808                 mov     r14, rax
.text:000000000000180B                 jz      loc_1D1A
.text:0000000000001811                 xor     edi, edi        ; mask
.text:0000000000001813                 call    _umask
.text:0000000000001818                 mov     r12d, eax
.text:000000000000181B                 mov     edi, eax        ; mask
.text:000000000000181D                 call    _umask
.text:0000000000001822                 xor     r8d, r8d
.text:0000000000001825                 mov     edx, r12d
.text:0000000000001828                 xor     esi, esi
.text:000000000000182A                 mov     rcx, r14
.text:000000000000182D                 mov     edi, 1B6h
.text:0000000000001832                 call    mode_adjust
.text:0000000000001837                 mov     rdi, r14        ; ptr
.text:000000000000183A                 mov     r12d, eax
.text:000000000000183D                 call    _free
.text:0000000000001842                 test    r12d, 0FFFFFE00h
.text:0000000000001849                 jnz     loc_1CF6
.text:000000000000184F
.text:000000000000184F loc_184F:                               ; CODE XREF: main+451↓j
.text:000000000000184F                 movsxd  rcx, cs:optind@@GLIBC_2_2_5
.text:0000000000001856                 mov     edx, ebp
.text:0000000000001858                 sub     edx, ecx
.text:000000000000185A                 cmp     ecx, ebp
.text:000000000000185C                 movsxd  rdx, edx
.text:000000000000185F                 jge     loc_190A
.text:0000000000001865                 lea     eax, [rcx+1]
.text:0000000000001868                 cmp     eax, ebp
.text:000000000000186A                 jge     loc_19A4
.text:0000000000001870                 movsxd  rax, ecx
.text:0000000000001873                 mov     rsi, [rbx+rax*8+8]
.text:0000000000001878                 cmp     byte ptr [rsi], 70h ; 'p'
.text:000000000000187B                 jnz     loc_19A4
.text:0000000000001881                 cmp     rdx, 1
.text:0000000000001885                 jbe     loc_1C01
.text:000000000000188B                 cmp     rdx, 2
.text:000000000000188F                 jbe     loc_1921
.text:0000000000001895                 mov     rdi, [rbx+rax*8+10h]
.text:000000000000189A
.text:000000000000189A loc_189A:                               ; CODE XREF: main+488↓j
.text:000000000000189A                 call    quote
.text:000000000000189F                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:00000000000018A6                 xor     edi, edi        ; domainname
.text:00000000000018A8                 mov     rbx, rax
.text:00000000000018AB                 mov     edx, 5          ; category
.text:00000000000018B0                 call    _dcgettext
.text:00000000000018B5                 xor     esi, esi        ; errnum
.text:00000000000018B7                 mov     rdx, rax        ; format
.text:00000000000018BA                 xor     edi, edi        ; status
.text:00000000000018BC                 xor     eax, eax
.text:00000000000018BE                 mov     rcx, rbx
.text:00000000000018C1                 call    _error
.text:00000000000018C6                 sub     ebp, cs:optind@@GLIBC_2_2_5
.text:00000000000018CC                 mov     edx, 5          ; category
.text:00000000000018D1                 lea     rsi, aFifosDoNotHave ; "Fifos do not have major and minor devic"...
.text:00000000000018D8                 cmp     ebp, 4
.text:00000000000018DB                 jnz     loc_19E9
.text:00000000000018E1
.text:00000000000018E1 loc_18E1:                               ; CODE XREF: main+62C↓j
.text:00000000000018E1                 xor     edi, edi        ; domainname
.text:00000000000018E3                 call    _dcgettext
.text:00000000000018E8                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000018EF                 lea     rdx, aSSS+8     ; "%s\n"
.text:00000000000018F6                 mov     rcx, rax
.text:00000000000018F9                 mov     esi, 1
.text:00000000000018FE                 xor     eax, eax
.text:0000000000001900                 call    ___fprintf_chk
.text:0000000000001905                 jmp     loc_19E9
.text:000000000000190A ; ---------------------------------------------------------------------------
.text:000000000000190A
.text:000000000000190A loc_190A:                               ; CODE XREF: main+19F↑j
.text:000000000000190A                 cmp     rdx, 1
.text:000000000000190E                 jbe     loc_1B4D
.text:0000000000001914                 cmp     rdx, 2
.text:0000000000001918                 jnz     loc_1B43
.text:000000000000191E
.text:000000000000191E loc_191E:                               ; CODE XREF: main+2F2↓j
.text:000000000000191E                 movsxd  rax, ecx
.text:0000000000001921
.text:0000000000001921 loc_1921:                               ; CODE XREF: main+1CF↑j
.text:0000000000001921                 add     rax, 1
.text:0000000000001925                 mov     rdi, [rbx+rax*8]
.text:0000000000001929                 lea     rdx, ds:0[rax*8]
.text:0000000000001931                 movzx   eax, byte ptr [rdi]
.text:0000000000001934                 cmp     al, 63h ; 'c'
.text:0000000000001936                 jz      loc_19FB
.text:000000000000193C                 jle     loc_1B16
.text:0000000000001942                 cmp     al, 70h ; 'p'
.text:0000000000001944                 jnz     loc_19F3
.text:000000000000194A                 mov     rdi, [rbx+rdx-8] ; path
.text:000000000000194F                 mov     esi, r12d       ; mode
.text:0000000000001952                 call    _mkfifo
.text:0000000000001957                 test    eax, eax
.text:0000000000001959                 jnz     loc_1C1F
.text:000000000000195F
.text:000000000000195F loc_195F:                               ; CODE XREF: main+40E↓j
.text:000000000000195F                 test    r13, r13
.text:0000000000001962                 jz      short loc_197F
.text:0000000000001964                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:000000000000196B                 mov     esi, r12d       ; mode
.text:000000000000196E                 mov     rdi, [rbx+rax*8] ; file
.text:0000000000001972                 call    _chmod
.text:0000000000001977                 test    eax, eax
.text:0000000000001979                 jnz     loc_1C56
.text:000000000000197F
.text:000000000000197F loc_197F:                               ; CODE XREF: main+2A2↑j
.text:000000000000197F                 xor     eax, eax
.text:0000000000001981                 mov     rbx, [rsp+58h+var_40]
.text:0000000000001986                 xor     rbx, fs:28h
.text:000000000000198F                 jnz     loc_1CF1
.text:0000000000001995                 add     rsp, 28h
.text:0000000000001999                 pop     rbx
.text:000000000000199A                 pop     rbp
.text:000000000000199B                 pop     r12
.text:000000000000199D                 pop     r13
.text:000000000000199F                 pop     r14
.text:00000000000019A1                 pop     r15
.text:00000000000019A3                 retn
.text:00000000000019A4 ; ---------------------------------------------------------------------------
.text:00000000000019A4
.text:00000000000019A4 loc_19A4:                               ; CODE XREF: main+1AA↑j
.text:00000000000019A4                                         ; main+1BB↑j
.text:00000000000019A4                 cmp     rdx, 3
.text:00000000000019A8                 jbe     loc_1C9D
.text:00000000000019AE                 cmp     rdx, 4
.text:00000000000019B2                 jbe     loc_191E
.text:00000000000019B8                 mov     rdi, [rbx+rcx*8+20h]
.text:00000000000019BD                 call    quote
.text:00000000000019C2                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:00000000000019C9                 mov     rbx, rax
.text:00000000000019CC                 mov     edx, 5          ; category
.text:00000000000019D1
.text:00000000000019D1 loc_19D1:                               ; CODE XREF: main+477↓j
.text:00000000000019D1                                         ; main+55A↓j
.text:00000000000019D1                 xor     edi, edi        ; domainname
.text:00000000000019D3                 call    _dcgettext
.text:00000000000019D8                 mov     rcx, rbx
.text:00000000000019DB                 mov     rdx, rax        ; format
.text:00000000000019DE                 xor     esi, esi        ; errnum
.text:00000000000019E0                 xor     edi, edi        ; status
.text:00000000000019E2                 xor     eax, eax
.text:00000000000019E4                 call    _error
.text:00000000000019E9
.text:00000000000019E9 loc_19E9:                               ; CODE XREF: main+A7↑j
.text:00000000000019E9                                         ; main+C5↑j ...
.text:00000000000019E9                 mov     edi, 1          ; status
.text:00000000000019EE                 call    usage
.text:00000000000019F3 ; ---------------------------------------------------------------------------
.text:00000000000019F3
.text:00000000000019F3 loc_19F3:                               ; CODE XREF: main+284↑j
.text:00000000000019F3                 cmp     al, 75h ; 'u'
.text:00000000000019F5                 jnz     loc_1B23
.text:00000000000019FB
.text:00000000000019FB loc_19FB:                               ; CODE XREF: main+276↑j
.text:00000000000019FB                 mov     ebp, 2000h
.text:0000000000001A00
.text:0000000000001A00 loc_1A00:                               ; CODE XREF: main+45D↓j
.text:0000000000001A00                 mov     r14, [rbx+rdx+8]
.text:0000000000001A05                 mov     r15, [rbx+rdx+10h]
.text:0000000000001A0A                 xor     r8d, r8d
.text:0000000000001A0D                 xor     edx, edx
.text:0000000000001A0F                 xor     esi, esi
.text:0000000000001A11                 mov     rcx, rsp
.text:0000000000001A14                 mov     rdi, r14        ; nptr
.text:0000000000001A17                 call    xstrtoumax
.text:0000000000001A1C                 test    eax, eax
.text:0000000000001A1E                 jnz     loc_1BA5
.text:0000000000001A24                 mov     rax, [rsp+58h+var_58]
.text:0000000000001A28                 mov     edx, eax
.text:0000000000001A2A                 cmp     rax, rdx
.text:0000000000001A2D                 jnz     loc_1BA5
.text:0000000000001A33                 lea     rcx, [rsp+58h+var_50]
.text:0000000000001A38                 xor     r8d, r8d
.text:0000000000001A3B                 xor     edx, edx
.text:0000000000001A3D                 xor     esi, esi
.text:0000000000001A3F                 mov     rdi, r15        ; nptr
.text:0000000000001A42                 call    xstrtoumax
.text:0000000000001A47                 test    eax, eax
.text:0000000000001A49                 jnz     loc_1B73
.text:0000000000001A4F                 mov     rax, [rsp+58h+var_50]
.text:0000000000001A54                 mov     edx, eax
.text:0000000000001A56                 cmp     rax, rdx
.text:0000000000001A59                 jnz     loc_1B73
.text:0000000000001A5F                 mov     rcx, [rsp+58h+var_58]
.text:0000000000001A63                 mov     rsi, 0FFFFF00000000000h
.text:0000000000001A6D                 mov     rdx, rcx
.text:0000000000001A70                 shl     rcx, 20h
.text:0000000000001A74                 shl     rdx, 8
.text:0000000000001A78                 and     rcx, rsi
.text:0000000000001A7B                 mov     rsi, 0FFFFFF00000h
.text:0000000000001A85                 and     edx, 0FFF00h
.text:0000000000001A8B                 or      rdx, rcx
.text:0000000000001A8E                 mov     rcx, rax
.text:0000000000001A91                 movzx   eax, al
.text:0000000000001A94                 shl     rcx, 0Ch
.text:0000000000001A98                 and     rcx, rsi
.text:0000000000001A9B                 or      rdx, rcx
.text:0000000000001A9E                 or      rax, rdx
.text:0000000000001AA1                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000001AA5                 jz      loc_1BD7
.text:0000000000001AAB                 movsxd  rdx, cs:optind@@GLIBC_2_2_5
.text:0000000000001AB2                 lea     rcx, [rsp+58h+dev] ; dev
.text:0000000000001AB7                 xor     edi, edi        ; ver
.text:0000000000001AB9                 mov     [rsp+58h+dev], rax
.text:0000000000001ABE                 mov     rsi, [rbx+rdx*8] ; path
.text:0000000000001AC2                 mov     edx, ebp
.text:0000000000001AC4                 or      edx, r12d       ; mode
.text:0000000000001AC7                 call    ___xmknod
.text:0000000000001ACC                 test    eax, eax
.text:0000000000001ACE                 jz      loc_195F
.text:0000000000001AD4                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001ADB                 mov     esi, 3
.text:0000000000001AE0                 xor     edi, edi
.text:0000000000001AE2                 mov     rdx, [rbx+rax*8]
.text:0000000000001AE6                 call    quotearg_n_style_colon
.text:0000000000001AEB                 mov     rbx, rax
.text:0000000000001AEE                 call    ___errno_location
.text:0000000000001AF3                 mov     esi, [rax]      ; errnum
.text:0000000000001AF5                 lea     rdx, format     ; format
.text:0000000000001AFC                 mov     rcx, rbx
.text:0000000000001AFF                 mov     edi, 1          ; status
.text:0000000000001B04                 xor     eax, eax
.text:0000000000001B06                 call    _error
.text:0000000000001B0B
.text:0000000000001B0B loc_1B0B:                               ; CODE XREF: main+137↑j
.text:0000000000001B0B                 mov     r12d, 1B6h
.text:0000000000001B11                 jmp     loc_184F
.text:0000000000001B16 ; ---------------------------------------------------------------------------
.text:0000000000001B16
.text:0000000000001B16 loc_1B16:                               ; CODE XREF: main+27C↑j
.text:0000000000001B16                 cmp     al, 62h ; 'b'
.text:0000000000001B18                 mov     ebp, 6000h
.text:0000000000001B1D                 jz      loc_1A00
.text:0000000000001B23
.text:0000000000001B23 loc_1B23:                               ; CODE XREF: main+335↑j
.text:0000000000001B23                 call    quote
.text:0000000000001B28                 mov     edx, 5
.text:0000000000001B2D                 mov     rbx, rax
.text:0000000000001B30                 lea     rsi, aInvalidDeviceT ; "invalid device type %s"
.text:0000000000001B37                 jmp     loc_19D1
.text:0000000000001B3C ; ---------------------------------------------------------------------------
.text:0000000000001B3C
.text:0000000000001B3C loc_1B3C:                               ; CODE XREF: main+97↑j
.text:0000000000001B3C                 xor     edi, edi        ; status
.text:0000000000001B3E                 call    usage
.text:0000000000001B43 ; ---------------------------------------------------------------------------
.text:0000000000001B43
.text:0000000000001B43 loc_1B43:                               ; CODE XREF: main+258↑j
.text:0000000000001B43                 mov     rdi, [rbx+rcx*8+10h]
.text:0000000000001B48                 jmp     loc_189A
.text:0000000000001B4D ; ---------------------------------------------------------------------------
.text:0000000000001B4D
.text:0000000000001B4D loc_1B4D:                               ; CODE XREF: main+24E↑j
.text:0000000000001B4D                 lea     rsi, aMissingOperand ; "missing operand"
.text:0000000000001B54                 xor     edi, edi        ; domainname
.text:0000000000001B56                 mov     edx, 5          ; category
.text:0000000000001B5B                 call    _dcgettext
.text:0000000000001B60                 xor     esi, esi        ; errnum
.text:0000000000001B62                 mov     rdx, rax        ; format
.text:0000000000001B65                 xor     edi, edi        ; status
.text:0000000000001B67                 xor     eax, eax
.text:0000000000001B69                 call    _error
.text:0000000000001B6E                 jmp     loc_19E9
.text:0000000000001B73 ; ---------------------------------------------------------------------------
.text:0000000000001B73
.text:0000000000001B73 loc_1B73:                               ; CODE XREF: main+389↑j
.text:0000000000001B73                                         ; main+399↑j
.text:0000000000001B73                 mov     rdi, r15
.text:0000000000001B76                 call    quote
.text:0000000000001B7B                 lea     rsi, aInvalidMinorDe ; "invalid minor device number %s"
.text:0000000000001B82                 mov     rbx, rax
.text:0000000000001B85                 mov     edx, 5          ; category
.text:0000000000001B8A                 xor     edi, edi        ; domainname
.text:0000000000001B8C                 call    _dcgettext
.text:0000000000001B91                 mov     rcx, rbx
.text:0000000000001B94                 mov     rdx, rax        ; format
.text:0000000000001B97                 xor     esi, esi        ; errnum
.text:0000000000001B99                 mov     edi, 1          ; status
.text:0000000000001B9E                 xor     eax, eax
.text:0000000000001BA0                 call    _error
.text:0000000000001BA5
.text:0000000000001BA5 loc_1BA5:                               ; CODE XREF: main+35E↑j
.text:0000000000001BA5                                         ; main+36D↑j
.text:0000000000001BA5                 mov     rdi, r14
.text:0000000000001BA8                 call    quote
.text:0000000000001BAD                 lea     rsi, aInvalidMajorDe ; "invalid major device number %s"
.text:0000000000001BB4                 mov     rbx, rax
.text:0000000000001BB7                 mov     edx, 5          ; category
.text:0000000000001BBC                 xor     edi, edi        ; domainname
.text:0000000000001BBE                 call    _dcgettext
.text:0000000000001BC3                 mov     rcx, rbx
.text:0000000000001BC6                 mov     rdx, rax        ; format
.text:0000000000001BC9                 xor     esi, esi        ; errnum
.text:0000000000001BCB                 mov     edi, 1          ; status
.text:0000000000001BD0                 xor     eax, eax
.text:0000000000001BD2                 call    _error
.text:0000000000001BD7
.text:0000000000001BD7 loc_1BD7:                               ; CODE XREF: main+3E5↑j
.text:0000000000001BD7                 lea     rsi, aInvalidDeviceS ; "invalid device %s %s"
.text:0000000000001BDE                 mov     edx, 5          ; category
.text:0000000000001BE3                 xor     edi, edi        ; domainname
.text:0000000000001BE5                 call    _dcgettext
.text:0000000000001BEA                 mov     r8, r15
.text:0000000000001BED                 mov     rdx, rax        ; format
.text:0000000000001BF0                 mov     rcx, r14
.text:0000000000001BF3                 xor     esi, esi        ; errnum
.text:0000000000001BF5                 mov     edi, 1          ; status
.text:0000000000001BFA                 xor     eax, eax
.text:0000000000001BFC                 call    _error
.text:0000000000001C01
.text:0000000000001C01 loc_1C01:                               ; CODE XREF: main+1C5↑j
.text:0000000000001C01                 mov     rdi, [rbx+rbp*8-8]
.text:0000000000001C06                 call    quote
.text:0000000000001C0B                 mov     edx, 5
.text:0000000000001C10                 mov     rbx, rax
.text:0000000000001C13                 lea     rsi, aMissingOperand_0 ; "missing operand after %s"
.text:0000000000001C1A                 jmp     loc_19D1
.text:0000000000001C1F ; ---------------------------------------------------------------------------
.text:0000000000001C1F
.text:0000000000001C1F loc_1C1F:                               ; CODE XREF: main+299↑j
.text:0000000000001C1F                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001C26                 mov     esi, 3
.text:0000000000001C2B                 xor     edi, edi
.text:0000000000001C2D                 mov     rdx, [rbx+rax*8]
.text:0000000000001C31                 call    quotearg_n_style_colon
.text:0000000000001C36                 mov     rbx, rax
.text:0000000000001C39                 call    ___errno_location
.text:0000000000001C3E                 mov     esi, [rax]      ; errnum
.text:0000000000001C40                 lea     rdx, format     ; format
.text:0000000000001C47                 mov     rcx, rbx
.text:0000000000001C4A                 mov     edi, 1          ; status
.text:0000000000001C4F                 xor     eax, eax
.text:0000000000001C51                 call    _error
.text:0000000000001C56
.text:0000000000001C56 loc_1C56:                               ; CODE XREF: main+2B9↑j
.text:0000000000001C56                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001C5D                 mov     edi, 4
.text:0000000000001C62                 mov     rsi, [rbx+rax*8]
.text:0000000000001C66                 call    quotearg_style
.text:0000000000001C6B                 lea     rsi, aCannotSetPermi ; "cannot set permissions of %s"
.text:0000000000001C72                 mov     edx, 5          ; category
.text:0000000000001C77                 xor     edi, edi        ; domainname
.text:0000000000001C79                 mov     rbp, rax
.text:0000000000001C7C                 call    _dcgettext
.text:0000000000001C81                 mov     rbx, rax
.text:0000000000001C84                 call    ___errno_location
.text:0000000000001C89                 mov     esi, [rax]      ; errnum
.text:0000000000001C8B                 mov     rcx, rbp
.text:0000000000001C8E                 mov     rdx, rbx        ; format
.text:0000000000001C91                 mov     edi, 1          ; status
.text:0000000000001C96                 xor     eax, eax
.text:0000000000001C98                 call    _error
.text:0000000000001C9D
.text:0000000000001C9D loc_1C9D:                               ; CODE XREF: main+2E8↑j
.text:0000000000001C9D                 movsxd  rax, ebp
.text:0000000000001CA0                 mov     rdi, [rbx+rax*8-8]
.text:0000000000001CA5                 call    quote
.text:0000000000001CAA                 lea     rsi, aMissingOperand_0 ; "missing operand after %s"
.text:0000000000001CB1                 xor     edi, edi        ; domainname
.text:0000000000001CB3                 mov     rbx, rax
.text:0000000000001CB6                 mov     edx, 5          ; category
.text:0000000000001CBB                 call    _dcgettext
.text:0000000000001CC0                 xor     esi, esi        ; errnum
.text:0000000000001CC2                 mov     rdx, rax        ; format
.text:0000000000001CC5                 xor     edi, edi        ; status
.text:0000000000001CC7                 xor     eax, eax
.text:0000000000001CC9                 mov     rcx, rbx
.text:0000000000001CCC                 call    _error
.text:0000000000001CD1                 sub     ebp, cs:optind@@GLIBC_2_2_5
.text:0000000000001CD7                 cmp     ebp, 2
.text:0000000000001CDA                 jnz     loc_19E9
.text:0000000000001CE0                 mov     edx, 5
.text:0000000000001CE5                 lea     rsi, aSpecialFilesRe ; "Special files require major and minor d"...
.text:0000000000001CEC                 jmp     loc_18E1
.text:0000000000001CF1 ; ---------------------------------------------------------------------------
.text:0000000000001CF1
.text:0000000000001CF1 loc_1CF1:                               ; CODE XREF: main+2CF↑j
.text:0000000000001CF1                 call    ___stack_chk_fail
.text:0000000000001CF6 ; ---------------------------------------------------------------------------
.text:0000000000001CF6
.text:0000000000001CF6 loc_1CF6:                               ; CODE XREF: main+189↑j
.text:0000000000001CF6                 lea     rsi, aModeMustSpecif ; "mode must specify only file permission "...
.text:0000000000001CFD                 mov     edx, 5          ; category
.text:0000000000001D02                 xor     edi, edi        ; domainname
.text:0000000000001D04                 call    _dcgettext
.text:0000000000001D09                 xor     esi, esi        ; errnum
.text:0000000000001D0B                 mov     rdx, rax        ; format
.text:0000000000001D0E                 mov     edi, 1          ; status
.text:0000000000001D13                 xor     eax, eax
.text:0000000000001D15                 call    _error
.text:0000000000001D1A
.text:0000000000001D1A loc_1D1A:                               ; CODE XREF: main+14B↑j
.text:0000000000001D1A                 lea     rsi, aInvalidMode ; "invalid mode"
.text:0000000000001D21                 mov     edx, 5          ; category
.text:0000000000001D26                 xor     edi, edi        ; domainname
.text:0000000000001D28                 call    _dcgettext
.text:0000000000001D2D                 xor     esi, esi        ; errnum
.text:0000000000001D2F                 mov     rdx, rax        ; format
.text:0000000000001D32                 mov     edi, 1          ; status
.text:0000000000001D37                 xor     eax, eax
.text:0000000000001D39                 call    _error
.text:0000000000001D39 ; } // starts at 16C0
.text:0000000000001D3E                 xchg    ax, ax
.text:0000000000001D3E main            endp ; sp-analysis failed
.text:0000000000001D3E
.text:0000000000001D40
.text:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D40
.text:0000000000001D40 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001D40
.text:0000000000001D40 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001D40                 public start
.text:0000000000001D40 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001D40 ; __unwind {
.text:0000000000001D40                 xor     ebp, ebp
.text:0000000000001D42                 mov     r9, rdx         ; rtld_fini
.text:0000000000001D45                 pop     rsi             ; argc
.text:0000000000001D46                 mov     rdx, rsp        ; ubp_av
.text:0000000000001D49                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001D4D                 push    rax
.text:0000000000001D4E                 push    rsp             ; stack_end
.text:0000000000001D4F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001D56                 lea     rcx, __libc_csu_init ; init
.text:0000000000001D5D                 lea     rdi, main       ; main
.text:0000000000001D64                 call    cs:__libc_start_main_ptr
.text:0000000000001D6A                 hlt
.text:0000000000001D6A ; } // starts at 1D40
.text:0000000000001D6A start           endp
.text:0000000000001D6A
.text:0000000000001D6A ; ---------------------------------------------------------------------------
.text:0000000000001D6B                 align 10h
.text:0000000000001D70
.text:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D70
.text:0000000000001D70 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001D70
.text:0000000000001D70 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1E23↓p
.text:0000000000001D70                 lea     rdi, __bss_start
.text:0000000000001D77                 push    rbp
.text:0000000000001D78                 lea     rax, __bss_start
.text:0000000000001D7F                 cmp     rax, rdi
.text:0000000000001D82                 mov     rbp, rsp
.text:0000000000001D85                 jz      short loc_1DA0
.text:0000000000001D87                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001D8E                 test    rax, rax
.text:0000000000001D91                 jz      short loc_1DA0
.text:0000000000001D93                 pop     rbp
.text:0000000000001D94                 jmp     rax
.text:0000000000001D94 ; ---------------------------------------------------------------------------
.text:0000000000001D96                 align 20h
.text:0000000000001DA0
.text:0000000000001DA0 loc_1DA0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001DA0                                         ; deregister_tm_clones+21↑j
.text:0000000000001DA0                 pop     rbp
.text:0000000000001DA1                 retn
.text:0000000000001DA1 deregister_tm_clones endp
.text:0000000000001DA1
.text:0000000000001DA1 ; ---------------------------------------------------------------------------
.text:0000000000001DA2                 align 10h
.text:0000000000001DB0
.text:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DB0
.text:0000000000001DB0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001DB0
.text:0000000000001DB0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001DB0                 lea     rdi, __bss_start
.text:0000000000001DB7                 lea     rsi, __bss_start
.text:0000000000001DBE                 push    rbp
.text:0000000000001DBF                 sub     rsi, rdi
.text:0000000000001DC2                 mov     rbp, rsp
.text:0000000000001DC5                 sar     rsi, 3
.text:0000000000001DC9                 mov     rax, rsi
.text:0000000000001DCC                 shr     rax, 3Fh
.text:0000000000001DD0                 add     rsi, rax
.text:0000000000001DD3                 sar     rsi, 1
.text:0000000000001DD6                 jz      short loc_1DF0
.text:0000000000001DD8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001DDF                 test    rax, rax
.text:0000000000001DE2                 jz      short loc_1DF0
.text:0000000000001DE4                 pop     rbp
.text:0000000000001DE5                 jmp     rax
.text:0000000000001DE5 ; ---------------------------------------------------------------------------
.text:0000000000001DE7                 align 10h
.text:0000000000001DF0
.text:0000000000001DF0 loc_1DF0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001DF0                                         ; register_tm_clones+32↑j
.text:0000000000001DF0                 pop     rbp
.text:0000000000001DF1                 retn
.text:0000000000001DF1 register_tm_clones endp
.text:0000000000001DF1
.text:0000000000001DF1 ; ---------------------------------------------------------------------------
.text:0000000000001DF2                 align 20h
.text:0000000000001E00
.text:0000000000001E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E00
.text:0000000000001E00 ; Attributes: info_from_lumina
.text:0000000000001E00
.text:0000000000001E00 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001E00                 cmp     cs:completed_7697, 0
.text:0000000000001E07                 jnz     short locret_1E38
.text:0000000000001E09                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001E11                 push    rbp
.text:0000000000001E12                 mov     rbp, rsp
.text:0000000000001E15                 jz      short loc_1E23
.text:0000000000001E17                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001E1E                 call    __cxa_finalize
.text:0000000000001E23
.text:0000000000001E23 loc_1E23:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001E23                 call    deregister_tm_clones
.text:0000000000001E28                 mov     cs:completed_7697, 1
.text:0000000000001E2F                 pop     rbp
.text:0000000000001E30                 retn
.text:0000000000001E30 ; ---------------------------------------------------------------------------
.text:0000000000001E31                 align 8
.text:0000000000001E38
.text:0000000000001E38 locret_1E38:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001E38                 rep retn
.text:0000000000001E38 __do_global_dtors_aux endp
.text:0000000000001E38
.text:0000000000001E38 ; ---------------------------------------------------------------------------
.text:0000000000001E3A                 align 20h
.text:0000000000001E40
.text:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E40
.text:0000000000001E40 ; Attributes: bp-based frame
.text:0000000000001E40
.text:0000000000001E40 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001E40                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001E40                 push    rbp
.text:0000000000001E41                 mov     rbp, rsp
.text:0000000000001E44                 pop     rbp
.text:0000000000001E45                 jmp     register_tm_clones
.text:0000000000001E45 frame_dummy     endp
.text:0000000000001E45
.text:0000000000001E45 ; ---------------------------------------------------------------------------
.text:0000000000001E4A                 align 10h
.text:0000000000001E50
.text:0000000000001E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E50
.text:0000000000001E50 ; Attributes: noreturn
.text:0000000000001E50
.text:0000000000001E50 ; void __fastcall __noreturn usage(int status)
.text:0000000000001E50                 public usage
.text:0000000000001E50 usage           proc near               ; CODE XREF: main+32E↑p
.text:0000000000001E50                                         ; main+47E↑p
.text:0000000000001E50
.text:0000000000001E50 var_A8          = qword ptr -0A8h
.text:0000000000001E50 var_A0          = qword ptr -0A0h
.text:0000000000001E50 var_98          = qword ptr -98h
.text:0000000000001E50 var_90          = qword ptr -90h
.text:0000000000001E50 var_88          = qword ptr -88h
.text:0000000000001E50 var_80          = qword ptr -80h
.text:0000000000001E50 var_78          = qword ptr -78h
.text:0000000000001E50 var_70          = qword ptr -70h
.text:0000000000001E50 var_68          = qword ptr -68h
.text:0000000000001E50 var_60          = qword ptr -60h
.text:0000000000001E50 var_58          = qword ptr -58h
.text:0000000000001E50 var_50          = qword ptr -50h
.text:0000000000001E50 var_48          = qword ptr -48h
.text:0000000000001E50 var_40          = qword ptr -40h
.text:0000000000001E50 var_30          = qword ptr -30h
.text:0000000000001E50
.text:0000000000001E50 ; __unwind {
.text:0000000000001E50                 push    r13
.text:0000000000001E52                 push    r12
.text:0000000000001E54                 mov     edx, 5          ; category
.text:0000000000001E59                 push    rbp
.text:0000000000001E5A                 push    rbx
.text:0000000000001E5B                 mov     ebp, edi
.text:0000000000001E5D                 sub     rsp, 88h
.text:0000000000001E64                 mov     rbx, cs:program_name
.text:0000000000001E6B                 mov     rax, fs:28h
.text:0000000000001E74                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001E79                 xor     eax, eax
.text:0000000000001E7B                 test    edi, edi
.text:0000000000001E7D                 jz      short loc_1EAD
.text:0000000000001E7F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001E86                 xor     edi, edi        ; domainname
.text:0000000000001E88                 call    _dcgettext
.text:0000000000001E8D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001E94                 mov     rdx, rax
.text:0000000000001E97                 mov     rcx, rbx
.text:0000000000001E9A                 mov     esi, 1
.text:0000000000001E9F                 xor     eax, eax
.text:0000000000001EA1                 call    ___fprintf_chk
.text:0000000000001EA6
.text:0000000000001EA6 loc_1EA6:                               ; CODE XREF: usage+35E↓j
.text:0000000000001EA6                 mov     edi, ebp        ; status
.text:0000000000001EA8                 call    _exit
.text:0000000000001EAD ; ---------------------------------------------------------------------------
.text:0000000000001EAD
.text:0000000000001EAD loc_1EAD:                               ; CODE XREF: usage+2D↑j
.text:0000000000001EAD                 lea     rsi, aUsageSOptionNa ; "Usage: %s [OPTION]... NAME TYPE [MAJOR "...
.text:0000000000001EB4                 xor     edi, edi        ; domainname
.text:0000000000001EB6                 call    _dcgettext
.text:0000000000001EBB                 mov     rdx, rbx
.text:0000000000001EBE                 mov     rsi, rax
.text:0000000000001EC1                 mov     edi, 1
.text:0000000000001EC6                 xor     eax, eax
.text:0000000000001EC8                 call    ___printf_chk
.text:0000000000001ECD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001ED4                 lea     rsi, aCreateTheSpeci ; "Create the special file NAME of the giv"...
.text:0000000000001EDB                 mov     edx, 5          ; category
.text:0000000000001EE0                 xor     edi, edi        ; domainname
.text:0000000000001EE2                 call    _dcgettext
.text:0000000000001EE7                 mov     rsi, rbx        ; stream
.text:0000000000001EEA                 mov     rdi, rax        ; s
.text:0000000000001EED                 call    _fputs_unlocked
.text:0000000000001EF2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001EF9                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000001F00                 mov     edx, 5          ; category
.text:0000000000001F05                 xor     edi, edi        ; domainname
.text:0000000000001F07                 call    _dcgettext
.text:0000000000001F0C                 mov     rsi, rbx        ; stream
.text:0000000000001F0F                 mov     rdi, rax        ; s
.text:0000000000001F12                 call    _fputs_unlocked
.text:0000000000001F17                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F1E                 lea     rsi, aMModeModeSetFi ; "  -m, --mode=MODE    set file permissio"...
.text:0000000000001F25                 mov     edx, 5          ; category
.text:0000000000001F2A                 xor     edi, edi        ; domainname
.text:0000000000001F2C                 call    _dcgettext
.text:0000000000001F31                 mov     rsi, rbx        ; stream
.text:0000000000001F34                 mov     rdi, rax        ; s
.text:0000000000001F37                 call    _fputs_unlocked
.text:0000000000001F3C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F43                 lea     rsi, aZSetTheSelinux ; "  -Z                   set the SELinux "...
.text:0000000000001F4A                 mov     edx, 5          ; category
.text:0000000000001F4F                 xor     edi, edi        ; domainname
.text:0000000000001F51                 call    _dcgettext
.text:0000000000001F56                 mov     rsi, rbx        ; stream
.text:0000000000001F59                 mov     rdi, rax        ; s
.text:0000000000001F5C                 call    _fputs_unlocked
.text:0000000000001F61                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F68                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001F6F                 mov     edx, 5          ; category
.text:0000000000001F74                 xor     edi, edi        ; domainname
.text:0000000000001F76                 call    _dcgettext
.text:0000000000001F7B                 mov     rsi, rbx        ; stream
.text:0000000000001F7E                 mov     rdi, rax        ; s
.text:0000000000001F81                 call    _fputs_unlocked
.text:0000000000001F86                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F8D                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001F94                 mov     edx, 5          ; category
.text:0000000000001F99                 xor     edi, edi        ; domainname
.text:0000000000001F9B                 call    _dcgettext
.text:0000000000001FA0                 mov     rsi, rbx        ; stream
.text:0000000000001FA3                 mov     rdi, rax        ; s
.text:0000000000001FA6                 call    _fputs_unlocked
.text:0000000000001FAB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001FB2                 lea     rsi, aBothMajorAndMi ; "\nBoth MAJOR and MINOR must be specifie"...
.text:0000000000001FB9                 mov     edx, 5          ; category
.text:0000000000001FBE                 xor     edi, edi        ; domainname
.text:0000000000001FC0                 call    _dcgettext
.text:0000000000001FC5                 mov     rsi, rbx        ; stream
.text:0000000000001FC8                 mov     rdi, rax        ; s
.text:0000000000001FCB                 call    _fputs_unlocked
.text:0000000000001FD0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001FD7                 lea     rsi, aBCreateABlockB ; "\n  b      create a block (buffered) sp"...
.text:0000000000001FDE                 mov     edx, 5          ; category
.text:0000000000001FE3                 xor     edi, edi        ; domainname
.text:0000000000001FE5                 call    _dcgettext
.text:0000000000001FEA                 mov     rsi, rbx        ; stream
.text:0000000000001FED                 mov     rdi, rax        ; s
.text:0000000000001FF0                 lea     rbx, aMknod     ; "mknod"
.text:0000000000001FF7                 call    _fputs_unlocked
.text:0000000000001FFC                 lea     rsi, aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
.text:0000000000002003                 mov     edx, 5          ; category
.text:0000000000002008                 xor     edi, edi        ; domainname
.text:000000000000200A                 call    _dcgettext
.text:000000000000200F                 lea     rdx, aMknod     ; "mknod"
.text:0000000000002016                 mov     rsi, rax
.text:0000000000002019                 mov     edi, 1
.text:000000000000201E                 xor     eax, eax
.text:0000000000002020                 call    ___printf_chk
.text:0000000000002025                 lea     rax, asc_568A   ; "["
.text:000000000000202C                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002033                 mov     [rsp+0A8h+var_48], 0
.text:000000000000203C                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002045                 mov     rdx, rsp
.text:0000000000002048                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000204C                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002053                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002058                 lea     rcx, aSha384sum ; "sha384sum"
.text:000000000000205F                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002064                 lea     rax, domainname ; "coreutils"
.text:000000000000206B                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002070                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002077                 mov     [rsp+0A8h+var_98], rax
.text:000000000000207C                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002083                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002088                 mov     [rsp+0A8h+var_90], rax
.text:000000000000208D                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002094                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002099                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000020A0                 mov     [rsp+0A8h+var_80], rax
.text:00000000000020A5                 mov     [rsp+0A8h+var_70], rax
.text:00000000000020AA                 mov     [rsp+0A8h+var_60], rax
.text:00000000000020AF                 mov     [rsp+0A8h+var_50], rax
.text:00000000000020B4                 nop     dword ptr [rax+00h]
.text:00000000000020B8
.text:00000000000020B8 loc_20B8:                               ; CODE XREF: usage+285↓j
.text:00000000000020B8                 add     rdx, 10h
.text:00000000000020BC                 mov     rdi, [rdx]
.text:00000000000020BF                 test    rdi, rdi
.text:00000000000020C2                 jz      short loc_20D7
.text:00000000000020C4                 mov     ecx, 6
.text:00000000000020C9                 mov     rsi, rbx
.text:00000000000020CC                 repe cmpsb
.text:00000000000020CE                 setnbe  al
.text:00000000000020D1                 sbb     al, 0
.text:00000000000020D3                 test    al, al
.text:00000000000020D5                 jnz     short loc_20B8
.text:00000000000020D7
.text:00000000000020D7 loc_20D7:                               ; CODE XREF: usage+272↑j
.text:00000000000020D7                 mov     r12, [rdx+8]
.text:00000000000020DB                 xor     edi, edi        ; domainname
.text:00000000000020DD                 mov     edx, 5          ; category
.text:00000000000020E2                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000020E9                 test    r12, r12
.text:00000000000020EC                 jz      loc_21B3
.text:00000000000020F2                 call    _dcgettext
.text:00000000000020F7                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000020FE                 lea     rdx, unk_5700
.text:0000000000002105                 mov     rsi, rax
.text:0000000000002108                 mov     edi, 1
.text:000000000000210D                 xor     eax, eax
.text:000000000000210F                 call    ___printf_chk
.text:0000000000002114                 xor     esi, esi        ; locale
.text:0000000000002116                 mov     edi, 5          ; category
.text:000000000000211B                 call    _setlocale
.text:0000000000002120                 test    rax, rax
.text:0000000000002123                 jz      short loc_2141
.text:0000000000002125                 lea     rsi, s2         ; "en_"
.text:000000000000212C                 mov     edx, 3          ; n
.text:0000000000002131                 mov     rdi, rax        ; s1
.text:0000000000002134                 call    _strncmp
.text:0000000000002139                 test    eax, eax
.text:000000000000213B                 jnz     loc_2248
.text:0000000000002141
.text:0000000000002141 loc_2141:                               ; CODE XREF: usage+2D3↑j
.text:0000000000002141                                         ; usage+41D↓j
.text:0000000000002141                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002148                 xor     edi, edi        ; domainname
.text:000000000000214A                 mov     edx, 5          ; category
.text:000000000000214F                 call    _dcgettext
.text:0000000000002154                 lea     rcx, aMknod     ; "mknod"
.text:000000000000215B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002162                 mov     rsi, rax
.text:0000000000002165                 mov     edi, 1
.text:000000000000216A                 xor     eax, eax
.text:000000000000216C                 call    ___printf_chk
.text:0000000000002171                 cmp     r12, rbx
.text:0000000000002174                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000217B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002182                 cmovz   rbx, rcx
.text:0000000000002186
.text:0000000000002186 loc_2186:                               ; CODE XREF: usage+3EC↓j
.text:0000000000002186                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:000000000000218D                 xor     edi, edi        ; domainname
.text:000000000000218F                 mov     edx, 5          ; category
.text:0000000000002194                 call    _dcgettext
.text:0000000000002199                 mov     rcx, rbx
.text:000000000000219C                 mov     rsi, rax
.text:000000000000219F                 mov     rdx, r12
.text:00000000000021A2                 mov     edi, 1
.text:00000000000021A7                 xor     eax, eax
.text:00000000000021A9                 call    ___printf_chk
.text:00000000000021AE                 jmp     loc_1EA6
.text:00000000000021B3 ; ---------------------------------------------------------------------------
.text:00000000000021B3
.text:00000000000021B3 loc_21B3:                               ; CODE XREF: usage+29C↑j
.text:00000000000021B3                 call    _dcgettext
.text:00000000000021B8                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000021BF                 lea     rdx, unk_5700
.text:00000000000021C6                 mov     rsi, rax
.text:00000000000021C9                 mov     edi, 1
.text:00000000000021CE                 xor     eax, eax
.text:00000000000021D0                 call    ___printf_chk
.text:00000000000021D5                 xor     esi, esi        ; locale
.text:00000000000021D7                 mov     edi, 5          ; category
.text:00000000000021DC                 call    _setlocale
.text:00000000000021E1                 test    rax, rax
.text:00000000000021E4                 jz      short loc_21FE
.text:00000000000021E6                 lea     rsi, s2         ; "en_"
.text:00000000000021ED                 mov     edx, 3          ; n
.text:00000000000021F2                 mov     rdi, rax        ; s1
.text:00000000000021F5                 call    _strncmp
.text:00000000000021FA                 test    eax, eax
.text:00000000000021FC                 jnz     short loc_2241
.text:00000000000021FE
.text:00000000000021FE loc_21FE:                               ; CODE XREF: usage+394↑j
.text:00000000000021FE                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002205                 mov     edx, 5          ; category
.text:000000000000220A                 xor     edi, edi        ; domainname
.text:000000000000220C                 lea     r12, aMknod     ; "mknod"
.text:0000000000002213                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000221A                 call    _dcgettext
.text:000000000000221F                 lea     rcx, aMknod     ; "mknod"
.text:0000000000002226                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000222D                 mov     rsi, rax
.text:0000000000002230                 mov     edi, 1
.text:0000000000002235                 xor     eax, eax
.text:0000000000002237                 call    ___printf_chk
.text:000000000000223C                 jmp     loc_2186
.text:0000000000002241 ; ---------------------------------------------------------------------------
.text:0000000000002241
.text:0000000000002241 loc_2241:                               ; CODE XREF: usage+3AC↑j
.text:0000000000002241                 lea     r12, aMknod     ; "mknod"
.text:0000000000002248
.text:0000000000002248 loc_2248:                               ; CODE XREF: usage+2EB↑j
.text:0000000000002248                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:000000000000224F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002256                 xor     edi, edi        ; domainname
.text:0000000000002258                 mov     edx, 5          ; category
.text:000000000000225D                 call    _dcgettext
.text:0000000000002262                 mov     rsi, r13        ; stream
.text:0000000000002265                 mov     rdi, rax        ; s
.text:0000000000002268                 call    _fputs_unlocked
.text:000000000000226D                 jmp     loc_2141
.text:000000000000226D ; } // starts at 1E50
.text:000000000000226D usage           endp
.text:000000000000226D
.text:000000000000226D ; ---------------------------------------------------------------------------
.text:0000000000002272                 align 20h
.text:0000000000002280
.text:0000000000002280 ; =============== S U B R O U T I N E =======================================
.text:0000000000002280
.text:0000000000002280
.text:0000000000002280                 public close_stdout_set_file_name
.text:0000000000002280 close_stdout_set_file_name proc near
.text:0000000000002280 ; __unwind {
.text:0000000000002280                 mov     cs:file_name, rdi
.text:0000000000002287                 retn
.text:0000000000002287 ; } // starts at 2280
.text:0000000000002287 close_stdout_set_file_name endp
.text:0000000000002287
.text:0000000000002287 ; ---------------------------------------------------------------------------
.text:0000000000002288                 align 10h
.text:0000000000002290
.text:0000000000002290 ; =============== S U B R O U T I N E =======================================
.text:0000000000002290
.text:0000000000002290
.text:0000000000002290                 public close_stdout_set_ignore_EPIPE
.text:0000000000002290 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002290 ; __unwind {
.text:0000000000002290                 mov     cs:ignore_EPIPE, dil
.text:0000000000002297                 retn
.text:0000000000002297 ; } // starts at 2290
.text:0000000000002297 close_stdout_set_ignore_EPIPE endp
.text:0000000000002297
.text:0000000000002297 ; ---------------------------------------------------------------------------
.text:0000000000002298                 align 20h
.text:00000000000022A0
.text:00000000000022A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022A0
.text:00000000000022A0 ; Attributes: info_from_lumina
.text:00000000000022A0
.text:00000000000022A0 ; void __cdecl close_stdout()
.text:00000000000022A0                 public close_stdout
.text:00000000000022A0 close_stdout    proc near               ; DATA XREF: main+66↑o
.text:00000000000022A0 ; __unwind {
.text:00000000000022A0                 push    rbp
.text:00000000000022A1                 push    rbx
.text:00000000000022A2                 sub     rsp, 8
.text:00000000000022A6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000022AD                 call    close_stream
.text:00000000000022B2                 test    eax, eax
.text:00000000000022B4                 jz      short loc_22CC
.text:00000000000022B6                 call    ___errno_location
.text:00000000000022BB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000022C2                 mov     rbx, rax
.text:00000000000022C5                 jz      short loc_22E3
.text:00000000000022C7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000022CA                 jnz     short loc_22E3
.text:00000000000022CC
.text:00000000000022CC loc_22CC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000022CC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000022D3                 call    close_stream
.text:00000000000022D8                 test    eax, eax
.text:00000000000022DA                 jnz     short loc_2322
.text:00000000000022DC                 add     rsp, 8
.text:00000000000022E0                 pop     rbx
.text:00000000000022E1                 pop     rbp
.text:00000000000022E2                 retn
.text:00000000000022E3 ; ---------------------------------------------------------------------------
.text:00000000000022E3
.text:00000000000022E3 loc_22E3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000022E3                                         ; close_stdout+2A↑j
.text:00000000000022E3                 lea     rsi, aWriteError ; "write error"
.text:00000000000022EA                 xor     edi, edi        ; domainname
.text:00000000000022EC                 mov     edx, 5          ; category
.text:00000000000022F1                 call    _dcgettext
.text:00000000000022F6                 mov     rdi, cs:file_name
.text:00000000000022FD                 mov     rbp, rax
.text:0000000000002300                 test    rdi, rdi
.text:0000000000002303                 jz      short loc_232D
.text:0000000000002305                 call    quotearg_colon
.text:000000000000230A                 mov     esi, [rbx]      ; errnum
.text:000000000000230C                 lea     rdx, aS         ; "%s: "
.text:0000000000002313                 mov     rcx, rax
.text:0000000000002316                 mov     r8, rbp
.text:0000000000002319                 xor     edi, edi        ; status
.text:000000000000231B                 xor     eax, eax
.text:000000000000231D                 call    _error
.text:0000000000002322
.text:0000000000002322 loc_2322:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002322                                         ; close_stdout+A2↓j
.text:0000000000002322                 mov     edi, cs:exit_failure ; status
.text:0000000000002328                 call    __exit
.text:000000000000232D ; ---------------------------------------------------------------------------
.text:000000000000232D
.text:000000000000232D loc_232D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000232D                 mov     esi, [rbx]      ; errnum
.text:000000000000232F                 lea     rdx, format     ; format
.text:0000000000002336                 mov     rcx, rax
.text:0000000000002339                 xor     edi, edi        ; status
.text:000000000000233B                 xor     eax, eax
.text:000000000000233D                 call    _error
.text:0000000000002342                 jmp     short loc_2322
.text:0000000000002342 ; } // starts at 22A0
.text:0000000000002342 close_stdout    endp
.text:0000000000002342
.text:0000000000002342 ; ---------------------------------------------------------------------------
.text:0000000000002344                 align 10h
.text:0000000000002350
.text:0000000000002350 ; =============== S U B R O U T I N E =======================================
.text:0000000000002350
.text:0000000000002350 ; Attributes: info_from_lumina
.text:0000000000002350
.text:0000000000002350                 public mode_compile
.text:0000000000002350 mode_compile    proc near               ; CODE XREF: main+140↑p
.text:0000000000002350 ; __unwind {
.text:0000000000002350                 push    rbp
.text:0000000000002351                 push    rbx
.text:0000000000002352                 mov     rbx, rdi
.text:0000000000002355                 sub     rsp, 8
.text:0000000000002359                 movsx   eax, byte ptr [rdi]
.text:000000000000235C                 lea     edx, [rax-30h]
.text:000000000000235F                 cmp     dl, 7
.text:0000000000002362                 jbe     loc_2418
.text:0000000000002368                 test    al, al
.text:000000000000236A                 mov     rcx, rdi
.text:000000000000236D                 mov     edi, 1
.text:0000000000002372                 jz      short loc_239B
.text:0000000000002374                 nop     dword ptr [rax+00h]
.text:0000000000002378
.text:0000000000002378 loc_2378:                               ; CODE XREF: mode_compile+49↓j
.text:0000000000002378                 mov     edx, eax
.text:000000000000237A                 and     edx, 0FFFFFFEFh
.text:000000000000237D                 cmp     dl, 2Dh ; '-'
.text:0000000000002380                 setz    dl
.text:0000000000002383                 cmp     al, 2Bh ; '+'
.text:0000000000002385                 setz    al
.text:0000000000002388                 add     rcx, 1
.text:000000000000238C                 or      eax, edx
.text:000000000000238E                 movzx   eax, al
.text:0000000000002391                 add     rdi, rax
.text:0000000000002394                 movzx   eax, byte ptr [rcx]
.text:0000000000002397                 test    al, al
.text:0000000000002399                 jnz     short loc_2378
.text:000000000000239B
.text:000000000000239B loc_239B:                               ; CODE XREF: mode_compile+22↑j
.text:000000000000239B                 mov     edx, 10h
.text:00000000000023A0                 xor     ecx, ecx
.text:00000000000023A2                 mov     rax, rdx
.text:00000000000023A5                 mul     rdi
.text:00000000000023A8                 jo      loc_26BF
.text:00000000000023AE
.text:00000000000023AE loc_23AE:                               ; CODE XREF: mode_compile+374↓j
.text:00000000000023AE                 test    rax, rax
.text:00000000000023B1                 js      loc_26C9
.text:00000000000023B7                 test    rcx, rcx
.text:00000000000023BA                 jnz     loc_26C9
.text:00000000000023C0                 shl     rdi, 4
.text:00000000000023C4                 lea     rbp, jpt_2584
.text:00000000000023CB                 call    xmalloc
.text:00000000000023D0                 xor     esi, esi
.text:00000000000023D2
.text:00000000000023D2 loc_23D2:                               ; CODE XREF: mode_compile+38D↓j
.text:00000000000023D2                 xor     r11d, r11d
.text:00000000000023D5
.text:00000000000023D5 loc_23D5:                               ; CODE XREF: mode_compile+2EA↓j
.text:00000000000023D5                 movzx   r9d, byte ptr [rbx]
.text:00000000000023D9                 cmp     r9b, 61h ; 'a'
.text:00000000000023DD                 jz      loc_2630
.text:00000000000023E3                 jle     short loc_2450
.text:00000000000023E5                 cmp     r9b, 6Fh ; 'o'
.text:00000000000023E9                 jz      loc_2660
.text:00000000000023EF                 cmp     r9b, 75h ; 'u'
.text:00000000000023F3                 jz      loc_2650
.text:00000000000023F9                 cmp     r9b, 67h ; 'g'
.text:00000000000023FD                 jz      loc_2640
.text:0000000000002403
.text:0000000000002403 loc_2403:                               ; CODE XREF: mode_compile+110↓j
.text:0000000000002403                                         ; mode_compile+1B8↓j ...
.text:0000000000002403                 mov     rdi, rax        ; ptr
.text:0000000000002406                 call    _free
.text:000000000000240B                 xor     eax, eax
.text:000000000000240D
.text:000000000000240D loc_240D:                               ; CODE XREF: mode_compile+3A4↓j
.text:000000000000240D                 add     rsp, 8
.text:0000000000002411                 pop     rbx
.text:0000000000002412                 pop     rbp
.text:0000000000002413                 retn
.text:0000000000002413 ; ---------------------------------------------------------------------------
.text:0000000000002414                 align 8
.text:0000000000002418
.text:0000000000002418 loc_2418:                               ; CODE XREF: mode_compile+12↑j
.text:0000000000002418                 mov     rdx, rdi
.text:000000000000241B                 xor     ebp, ebp
.text:000000000000241D                 jmp     short loc_242F
.text:000000000000241D ; ---------------------------------------------------------------------------
.text:000000000000241F                 align 20h
.text:0000000000002420
.text:0000000000002420 loc_2420:                               ; CODE XREF: mode_compile+ED↓j
.text:0000000000002420                 movsx   eax, byte ptr [rdx]
.text:0000000000002423                 lea     ecx, [rax-30h]
.text:0000000000002426                 cmp     cl, 7
.text:0000000000002429                 ja      loc_2670
.text:000000000000242F
.text:000000000000242F loc_242F:                               ; CODE XREF: mode_compile+CD↑j
.text:000000000000242F                 lea     ebp, [rax+rbp*8-30h]
.text:0000000000002433                 add     rdx, 1
.text:0000000000002437                 cmp     ebp, 0FFFh
.text:000000000000243D                 jbe     short loc_2420
.text:000000000000243F
.text:000000000000243F loc_243F:                               ; CODE XREF: mode_compile+322↓j
.text:000000000000243F                 add     rsp, 8
.text:0000000000002443                 xor     eax, eax
.text:0000000000002445                 pop     rbx
.text:0000000000002446                 pop     rbp
.text:0000000000002447                 retn
.text:0000000000002447 ; ---------------------------------------------------------------------------
.text:0000000000002448                 align 10h
.text:0000000000002450
.text:0000000000002450 loc_2450:                               ; CODE XREF: mode_compile+93↑j
.text:0000000000002450                 cmp     r9b, 2Dh ; '-'
.text:0000000000002454                 jz      short loc_2462
.text:0000000000002456                 cmp     r9b, 3Dh ; '='
.text:000000000000245A                 jz      short loc_2462
.text:000000000000245C                 cmp     r9b, 2Bh ; '+'
.text:0000000000002460                 jnz     short loc_2403
.text:0000000000002462
.text:0000000000002462 loc_2462:                               ; CODE XREF: mode_compile+104↑j
.text:0000000000002462                                         ; mode_compile+10A↑j
.text:0000000000002462                 lea     rdi, [rsi+1]
.text:0000000000002466                 shl     rsi, 4
.text:000000000000246A                 add     rsi, rax
.text:000000000000246D                 jmp     short loc_24D4
.text:000000000000246D ; ---------------------------------------------------------------------------
.text:000000000000246F                 align 10h
.text:0000000000002470
.text:0000000000002470 loc_2470:                               ; CODE XREF: mode_compile+195↓j
.text:0000000000002470                 cmp     dl, 6Fh ; 'o'
.text:0000000000002473                 lea     r8, [rbx+2]
.text:0000000000002477                 jz      loc_2610
.text:000000000000247D                 cmp     dl, 75h ; 'u'
.text:0000000000002480                 mov     r10d, 1C0h
.text:0000000000002486                 jnz     loc_2560
.text:000000000000248C
.text:000000000000248C loc_248C:                               ; CODE XREF: mode_compile+2C6↓j
.text:000000000000248C                                         ; mode_compile+2DA↓j
.text:000000000000248C                 mov     [rsi], r9b
.text:000000000000248F                 mov     byte ptr [rsi+1], 3
.text:0000000000002493                 movzx   r9d, byte ptr [rbx+2]
.text:0000000000002498                 mov     [rsi+4], r11d
.text:000000000000249C                 mov     rbx, r8
.text:000000000000249F                 mov     [rsi+8], r10d
.text:00000000000024A3
.text:00000000000024A3 loc_24A3:                               ; CODE XREF: mode_compile+26D↓j
.text:00000000000024A3                 mov     edx, r10d
.text:00000000000024A6                 and     edx, r11d
.text:00000000000024A9                 test    r11d, r11d
.text:00000000000024AC                 cmovnz  r10d, edx
.text:00000000000024B0
.text:00000000000024B0 loc_24B0:                               ; CODE XREF: mode_compile+205↓j
.text:00000000000024B0                 mov     edx, r9d
.text:00000000000024B3                 mov     [rsi+0Ch], r10d
.text:00000000000024B7                 add     rsi, 10h
.text:00000000000024BB                 and     edx, 0FFFFFFEFh
.text:00000000000024BE                 lea     rcx, [rdi+1]
.text:00000000000024C2                 cmp     dl, 2Dh ; '-'
.text:00000000000024C5                 jz      short loc_24D1
.text:00000000000024C7                 cmp     r9b, 2Bh ; '+'
.text:00000000000024CB                 jnz     loc_26D0
.text:00000000000024D1
.text:00000000000024D1 loc_24D1:                               ; CODE XREF: mode_compile+175↑j
.text:00000000000024D1                 mov     rdi, rcx
.text:00000000000024D4
.text:00000000000024D4 loc_24D4:                               ; CODE XREF: mode_compile+11D↑j
.text:00000000000024D4                 movsx   edx, byte ptr [rbx+1]
.text:00000000000024D8                 lea     rcx, [rbx+1]
.text:00000000000024DC                 cmp     dl, 67h ; 'g'
.text:00000000000024DF                 jz      loc_2620
.text:00000000000024E5                 jg      short loc_2470
.text:00000000000024E7                 lea     r8d, [rdx-30h]
.text:00000000000024EB                 cmp     r8b, 7
.text:00000000000024EF                 ja      short loc_2560
.text:00000000000024F1                 xor     r8d, r8d
.text:00000000000024F4                 nop     dword ptr [rax+00h]
.text:00000000000024F8
.text:00000000000024F8 loc_24F8:                               ; CODE XREF: mode_compile+1C9↓j
.text:00000000000024F8                 lea     r8d, [rdx+r8*8-30h]
.text:00000000000024FD                 add     rcx, 1
.text:0000000000002501                 cmp     r8d, 0FFFh
.text:0000000000002508                 ja      loc_2403
.text:000000000000250E                 movsx   edx, byte ptr [rcx]
.text:0000000000002511                 lea     r10d, [rdx-30h]
.text:0000000000002515                 cmp     r10b, 7
.text:0000000000002519                 jbe     short loc_24F8
.text:000000000000251B                 test    r11d, r11d
.text:000000000000251E                 jnz     loc_2403
.text:0000000000002524                 test    dl, dl
.text:0000000000002526                 jz      short loc_2531
.text:0000000000002528                 cmp     dl, 2Ch ; ','
.text:000000000000252B                 jnz     loc_2403
.text:0000000000002531
.text:0000000000002531 loc_2531:                               ; CODE XREF: mode_compile+1D6↑j
.text:0000000000002531                 mov     [rsi], r9b
.text:0000000000002534                 mov     byte ptr [rsi+1], 1
.text:0000000000002538                 mov     r9d, edx
.text:000000000000253B                 mov     dword ptr [rsi+4], 0FFFh
.text:0000000000002542                 mov     [rsi+8], r8d
.text:0000000000002546                 mov     rbx, rcx
.text:0000000000002549                 mov     r11d, 0FFFh
.text:000000000000254F                 mov     r10d, 0FFFh
.text:0000000000002555                 jmp     loc_24B0
.text:0000000000002555 ; ---------------------------------------------------------------------------
.text:000000000000255A                 align 20h
.text:0000000000002560
.text:0000000000002560 loc_2560:                               ; CODE XREF: mode_compile+136↑j
.text:0000000000002560                                         ; mode_compile+19F↑j
.text:0000000000002560                 lea     r8d, [rdx-58h]  ; switch 33 cases
.text:0000000000002564                 xor     r10d, r10d
.text:0000000000002567                 mov     ebx, 1
.text:000000000000256C                 cmp     r8b, 20h
.text:0000000000002570                 ja      short def_2584  ; jumptable 00000000000CDF74 default case, cases 89-113,117,118
.text:0000000000002572                 nop     word ptr [rax+rax+00h]
.text:0000000000002578
.text:0000000000002578 loc_2578:                               ; CODE XREF: mode_compile+257↓j
.text:0000000000002578                 movzx   r8d, r8b
.text:000000000000257C                 movsxd  r8, ss:(jpt_2584 - 5EA0h)[rbp+r8*4]
.text:0000000000002581                 add     r8, rbp
.text:0000000000002584                 jmp     r8              ; switch jump
.text:0000000000002584 ; ---------------------------------------------------------------------------
.text:0000000000002587                 align 10h
.text:0000000000002590
.text:0000000000002590 loc_2590:                               ; CODE XREF: mode_compile+234↑j
.text:0000000000002590                                         ; DATA XREF: .rodata:jpt_2584↓o
.text:0000000000002590                 mov     ebx, 2          ; jumptable 00000000000CDF74 case 88
.text:0000000000002595                 nop     dword ptr [rax]
.text:0000000000002598
.text:0000000000002598 loc_2598:                               ; CODE XREF: mode_compile+27C↓j
.text:0000000000002598                                         ; mode_compile+284↓j ...
.text:0000000000002598                 add     rcx, 1
.text:000000000000259C                 movzx   edx, byte ptr [rcx]
.text:000000000000259F                 lea     r8d, [rdx-58h]
.text:00000000000025A3                 cmp     r8b, 20h ; ' '
.text:00000000000025A7                 jbe     short loc_2578
.text:00000000000025A9
.text:00000000000025A9 def_2584:                               ; CODE XREF: mode_compile+220↑j
.text:00000000000025A9                                         ; mode_compile+234↑j
.text:00000000000025A9                                         ; DATA XREF: ...
.text:00000000000025A9                 mov     [rsi], r9b      ; jumptable 00000000000CDF74 default case, cases 89-113,117,118
.text:00000000000025AC                 mov     [rsi+1], bl
.text:00000000000025AF                 mov     r9d, edx
.text:00000000000025B2                 mov     [rsi+4], r11d
.text:00000000000025B6                 mov     [rsi+8], r10d
.text:00000000000025BA                 mov     rbx, rcx
.text:00000000000025BD                 jmp     loc_24A3
.text:00000000000025BD ; ---------------------------------------------------------------------------
.text:00000000000025C2                 align 8
.text:00000000000025C8
.text:00000000000025C8 loc_25C8:                               ; CODE XREF: mode_compile+234↑j
.text:00000000000025C8                                         ; DATA XREF: .rodata:jpt_2584↓o
.text:00000000000025C8                 or      r10d, 49h       ; jumptable 00000000000CDF74 case 120
.text:00000000000025CC                 jmp     short loc_2598
.text:00000000000025CC ; ---------------------------------------------------------------------------
.text:00000000000025CE                 align 10h
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: mode_compile+234↑j
.text:00000000000025D0                                         ; DATA XREF: .rodata:jpt_2584↓o
.text:00000000000025D0                 or      r10b, 92h       ; jumptable 00000000000CDF74 case 119
.text:00000000000025D4                 jmp     short loc_2598
.text:00000000000025D4 ; ---------------------------------------------------------------------------
.text:00000000000025D6                 align 20h
.text:00000000000025E0
.text:00000000000025E0 loc_25E0:                               ; CODE XREF: mode_compile+234↑j
.text:00000000000025E0                                         ; DATA XREF: .rodata:jpt_2584↓o
.text:00000000000025E0                 or      r10d, 200h      ; jumptable 00000000000CDF74 case 116
.text:00000000000025E7                 jmp     short loc_2598
.text:00000000000025E7 ; ---------------------------------------------------------------------------
.text:00000000000025E9                 align 10h
.text:00000000000025F0
.text:00000000000025F0 loc_25F0:                               ; CODE XREF: mode_compile+234↑j
.text:00000000000025F0                                         ; DATA XREF: .rodata:jpt_2584↓o
.text:00000000000025F0                 or      r10d, 0C00h     ; jumptable 00000000000CDF74 case 115
.text:00000000000025F7                 jmp     short loc_2598
.text:00000000000025F7 ; ---------------------------------------------------------------------------
.text:00000000000025F9                 align 20h
.text:0000000000002600
.text:0000000000002600 loc_2600:                               ; CODE XREF: mode_compile+234↑j
.text:0000000000002600                                         ; DATA XREF: .rodata:jpt_2584↓o
.text:0000000000002600                 or      r10d, 124h      ; jumptable 00000000000CDF74 case 114
.text:0000000000002607                 jmp     short loc_2598
.text:0000000000002607 ; ---------------------------------------------------------------------------
.text:0000000000002609                 align 10h
.text:0000000000002610
.text:0000000000002610 loc_2610:                               ; CODE XREF: mode_compile+127↑j
.text:0000000000002610                 mov     r10d, 7
.text:0000000000002616                 jmp     loc_248C
.text:0000000000002616 ; ---------------------------------------------------------------------------
.text:000000000000261B                 align 20h
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: mode_compile+18F↑j
.text:0000000000002620                 lea     r8, [rbx+2]
.text:0000000000002624                 mov     r10d, 38h ; '8'
.text:000000000000262A                 jmp     loc_248C
.text:000000000000262A ; ---------------------------------------------------------------------------
.text:000000000000262F                 align 10h
.text:0000000000002630
.text:0000000000002630 loc_2630:                               ; CODE XREF: mode_compile+8D↑j
.text:0000000000002630                 mov     r11d, 0FFFh
.text:0000000000002636
.text:0000000000002636 loc_2636:                               ; CODE XREF: mode_compile+2F7↓j
.text:0000000000002636                                         ; mode_compile+307↓j ...
.text:0000000000002636                 add     rbx, 1
.text:000000000000263A                 jmp     loc_23D5
.text:000000000000263A ; ---------------------------------------------------------------------------
.text:000000000000263F                 align 20h
.text:0000000000002640
.text:0000000000002640 loc_2640:                               ; CODE XREF: mode_compile+AD↑j
.text:0000000000002640                 or      r11d, 438h
.text:0000000000002647                 jmp     short loc_2636
.text:0000000000002647 ; ---------------------------------------------------------------------------
.text:0000000000002649                 align 10h
.text:0000000000002650
.text:0000000000002650 loc_2650:                               ; CODE XREF: mode_compile+A3↑j
.text:0000000000002650                 or      r11d, 9C0h
.text:0000000000002657                 jmp     short loc_2636
.text:0000000000002657 ; ---------------------------------------------------------------------------
.text:0000000000002659                 align 20h
.text:0000000000002660
.text:0000000000002660 loc_2660:                               ; CODE XREF: mode_compile+99↑j
.text:0000000000002660                 or      r11d, 207h
.text:0000000000002667                 jmp     short loc_2636
.text:0000000000002667 ; ---------------------------------------------------------------------------
.text:0000000000002669                 align 10h
.text:0000000000002670
.text:0000000000002670 loc_2670:                               ; CODE XREF: mode_compile+D9↑j
.text:0000000000002670                 test    al, al
.text:0000000000002672                 jnz     loc_243F
.text:0000000000002678                 sub     rdx, rbx
.text:000000000000267B                 mov     ebx, ebp
.text:000000000000267D                 mov     eax, 0FFFh
.text:0000000000002682                 and     ebx, 0C00h
.text:0000000000002688                 mov     edi, 20h ; ' '
.text:000000000000268D                 or      ebx, 3FFh
.text:0000000000002693                 cmp     rdx, 5
.text:0000000000002697                 cmovge  ebx, eax
.text:000000000000269A                 call    xmalloc
.text:000000000000269F                 mov     edx, 13Dh
.text:00000000000026A4                 mov     dword ptr [rax+4], 0FFFh
.text:00000000000026AB                 mov     [rax+8], ebp
.text:00000000000026AE                 mov     [rax], dx
.text:00000000000026B1                 mov     [rax+0Ch], ebx
.text:00000000000026B4                 mov     byte ptr [rax+11h], 0
.text:00000000000026B8                 add     rsp, 8
.text:00000000000026BC                 pop     rbx
.text:00000000000026BD                 pop     rbp
.text:00000000000026BE                 retn
.text:00000000000026BF ; ---------------------------------------------------------------------------
.text:00000000000026BF
.text:00000000000026BF loc_26BF:                               ; CODE XREF: mode_compile+58↑j
.text:00000000000026BF                 mov     ecx, 1
.text:00000000000026C4                 jmp     loc_23AE
.text:00000000000026C9 ; ---------------------------------------------------------------------------
.text:00000000000026C9
.text:00000000000026C9 loc_26C9:                               ; CODE XREF: mode_compile+61↑j
.text:00000000000026C9                                         ; mode_compile+6A↑j
.text:00000000000026C9                 call    xalloc_die
.text:00000000000026C9 ; ---------------------------------------------------------------------------
.text:00000000000026CE                 align 10h
.text:00000000000026D0
.text:00000000000026D0 loc_26D0:                               ; CODE XREF: mode_compile+17B↑j
.text:00000000000026D0                 cmp     r9b, 2Ch ; ','
.text:00000000000026D4                 jnz     short loc_26E2
.text:00000000000026D6                 add     rbx, 1
.text:00000000000026DA                 mov     rsi, rdi
.text:00000000000026DD                 jmp     loc_23D2
.text:00000000000026E2 ; ---------------------------------------------------------------------------
.text:00000000000026E2
.text:00000000000026E2 loc_26E2:                               ; CODE XREF: mode_compile+384↑j
.text:00000000000026E2                 test    r9b, r9b
.text:00000000000026E5                 jnz     loc_2403
.text:00000000000026EB                 shl     rdi, 4
.text:00000000000026EF                 mov     byte ptr [rax+rdi+1], 0
.text:00000000000026F4                 jmp     loc_240D
.text:00000000000026F4 ; } // starts at 2350
.text:00000000000026F4 mode_compile    endp
.text:00000000000026F4
.text:00000000000026F4 ; ---------------------------------------------------------------------------
.text:00000000000026F9                 align 20h
.text:0000000000002700
.text:0000000000002700 ; =============== S U B R O U T I N E =======================================
.text:0000000000002700
.text:0000000000002700
.text:0000000000002700 ; __int64 __fastcall mode_create_from_ref(char *filename)
.text:0000000000002700                 public mode_create_from_ref
.text:0000000000002700 mode_create_from_ref proc near
.text:0000000000002700
.text:0000000000002700 var_90          = dword ptr -90h
.text:0000000000002700 var_10          = qword ptr -10h
.text:0000000000002700
.text:0000000000002700 ; __unwind {
.text:0000000000002700                 push    rbx
.text:0000000000002701                 mov     rsi, rdi        ; filename
.text:0000000000002704                 mov     edi, 1          ; ver
.text:0000000000002709                 sub     rsp, 0A0h
.text:0000000000002710                 mov     rdx, rsp        ; stat_buf
.text:0000000000002713                 mov     rax, fs:28h
.text:000000000000271C                 mov     [rsp+0A8h+var_10], rax
.text:0000000000002724                 xor     eax, eax
.text:0000000000002726                 call    ___xstat
.text:000000000000272B                 test    eax, eax
.text:000000000000272D                 jnz     short loc_2780
.text:000000000000272F                 mov     ebx, [rsp+0A8h+var_90]
.text:0000000000002733                 mov     edi, 20h ; ' '
.text:0000000000002738                 call    xmalloc
.text:000000000000273D                 mov     edx, 13Dh
.text:0000000000002742                 mov     dword ptr [rax+4], 0FFFh
.text:0000000000002749                 mov     dword ptr [rax+0Ch], 0FFFh
.text:0000000000002750                 mov     [rax], dx
.text:0000000000002753                 mov     [rax+8], ebx
.text:0000000000002756                 mov     byte ptr [rax+11h], 0
.text:000000000000275A
.text:000000000000275A loc_275A:                               ; CODE XREF: mode_create_from_ref+82↓j
.text:000000000000275A                 mov     rcx, [rsp+0A8h+var_10]
.text:0000000000002762                 xor     rcx, fs:28h
.text:000000000000276B                 jnz     short loc_2784
.text:000000000000276D                 add     rsp, 0A0h
.text:0000000000002774                 pop     rbx
.text:0000000000002775                 retn
.text:0000000000002775 ; ---------------------------------------------------------------------------
.text:0000000000002776                 align 20h
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: mode_create_from_ref+2D↑j
.text:0000000000002780                 xor     eax, eax
.text:0000000000002782                 jmp     short loc_275A
.text:0000000000002784 ; ---------------------------------------------------------------------------
.text:0000000000002784
.text:0000000000002784 loc_2784:                               ; CODE XREF: mode_create_from_ref+6B↑j
.text:0000000000002784                 call    ___stack_chk_fail
.text:0000000000002784 ; } // starts at 2700
.text:0000000000002784 mode_create_from_ref endp
.text:0000000000002784
.text:0000000000002784 ; ---------------------------------------------------------------------------
.text:0000000000002789                 align 10h
.text:0000000000002790
.text:0000000000002790 ; =============== S U B R O U T I N E =======================================
.text:0000000000002790
.text:0000000000002790
.text:0000000000002790                 public mode_adjust
.text:0000000000002790 mode_adjust     proc near               ; CODE XREF: main+172↑p
.text:0000000000002790 ; __unwind {
.text:0000000000002790                 movzx   r10d, byte ptr [rcx+1]
.text:0000000000002795                 mov     eax, edi
.text:0000000000002797                 and     eax, 0FFFh
.text:000000000000279C                 test    r10b, r10b
.text:000000000000279F                 jz      loc_28F0
.text:00000000000027A5                 cmp     sil, 1
.text:00000000000027A9                 push    r12
.text:00000000000027AB                 push    rbp
.text:00000000000027AC                 push    rbx
.text:00000000000027AD                 sbb     ebx, ebx
.text:00000000000027AF                 movzx   ebp, sil
.text:00000000000027B3                 not     ebx
.text:00000000000027B5                 xor     r11d, r11d
.text:00000000000027B8                 and     ebx, 0C00h
.text:00000000000027BE                 jmp     short loc_27FA
.text:00000000000027C0 ; ---------------------------------------------------------------------------
.text:00000000000027C0
.text:00000000000027C0 loc_27C0:                               ; CODE XREF: mode_adjust+D4↓j
.text:00000000000027C0                 mov     edi, r9d
.text:00000000000027C3                 or      edi, edx
.text:00000000000027C5                 not     edi
.text:00000000000027C7                 and     esi, edi
.text:00000000000027C9                 cmp     r12b, 2Dh ; '-'
.text:00000000000027CD                 jz      loc_28E0
.text:00000000000027D3                 cmp     r12b, 3Dh ; '='
.text:00000000000027D7                 jz      loc_288B
.text:00000000000027DD
.text:00000000000027DD loc_27DD:                               ; CODE XREF: mode_adjust+EA↓j
.text:00000000000027DD                 cmp     r12b, 2Bh ; '+'
.text:00000000000027E1                 jnz     short loc_27E8
.text:00000000000027E3                 or      r11d, esi
.text:00000000000027E6                 or      eax, esi
.text:00000000000027E8
.text:00000000000027E8 loc_27E8:                               ; CODE XREF: mode_adjust+51↑j
.text:00000000000027E8                                         ; mode_adjust+157↓j
.text:00000000000027E8                 add     rcx, 10h
.text:00000000000027EC                 movzx   r10d, byte ptr [rcx+1]
.text:00000000000027F1                 test    r10b, r10b
.text:00000000000027F4                 jz      loc_28AC
.text:00000000000027FA
.text:00000000000027FA loc_27FA:                               ; CODE XREF: mode_adjust+2E↑j
.text:00000000000027FA                                         ; mode_adjust+116↓j
.text:00000000000027FA                 mov     r9d, [rcx+0Ch]
.text:00000000000027FE                 mov     edi, [rcx+4]
.text:0000000000002801                 mov     esi, [rcx+8]
.text:0000000000002804                 not     r9d
.text:0000000000002807                 and     r9d, ebx
.text:000000000000280A                 cmp     r10b, 2
.text:000000000000280E                 jz      loc_28C0
.text:0000000000002814                 cmp     r10b, 3
.text:0000000000002818                 jnz     short loc_2858
.text:000000000000281A                 and     esi, eax
.text:000000000000281C                 mov     r10d, esi
.text:000000000000281F                 and     r10d, 124h
.text:0000000000002826                 cmp     r10d, 1
.text:000000000000282A                 sbb     r10d, r10d
.text:000000000000282D                 not     r10d
.text:0000000000002830                 and     r10d, 124h
.text:0000000000002837                 mov     r12d, r10d
.text:000000000000283A                 or      r12b, 92h
.text:000000000000283E                 test    sil, 92h
.text:0000000000002842                 cmovnz  r10d, r12d
.text:0000000000002846                 mov     r12d, r10d
.text:0000000000002849                 or      r12d, 49h
.text:000000000000284D                 test    sil, 49h
.text:0000000000002851                 cmovnz  r10d, r12d
.text:0000000000002855                 or      esi, r10d
.text:0000000000002858
.text:0000000000002858 loc_2858:                               ; CODE XREF: mode_adjust+88↑j
.text:0000000000002858                                         ; mode_adjust+145↓j
.text:0000000000002858                 mov     r10d, r9d
.text:000000000000285B                 test    edi, edi
.text:000000000000285D                 movzx   r12d, byte ptr [rcx]
.text:0000000000002861                 not     r10d
.text:0000000000002864                 jz      loc_27C0
.text:000000000000286A                 and     r10d, edi
.text:000000000000286D                 and     esi, r10d
.text:0000000000002870                 cmp     r12b, 2Dh ; '-'
.text:0000000000002874                 jz      short loc_28E0
.text:0000000000002876                 cmp     r12b, 3Dh ; '='
.text:000000000000287A                 jnz     loc_27DD
.text:0000000000002880                 not     edi
.text:0000000000002882                 or      r9d, edi
.text:0000000000002885                 mov     r10d, r9d
.text:0000000000002888                 not     r10d
.text:000000000000288B
.text:000000000000288B loc_288B:                               ; CODE XREF: mode_adjust+47↑j
.text:000000000000288B                 and     r10d, 0FFFh
.text:0000000000002892                 add     rcx, 10h
.text:0000000000002896                 and     eax, r9d
.text:0000000000002899                 or      r11d, r10d
.text:000000000000289C                 movzx   r10d, byte ptr [rcx+1]
.text:00000000000028A1                 or      eax, esi
.text:00000000000028A3                 test    r10b, r10b
.text:00000000000028A6                 jnz     loc_27FA
.text:00000000000028AC
.text:00000000000028AC loc_28AC:                               ; CODE XREF: mode_adjust+64↑j
.text:00000000000028AC                 test    r8, r8
.text:00000000000028AF                 jz      short loc_28B4
.text:00000000000028B1                 mov     [r8], r11d
.text:00000000000028B4
.text:00000000000028B4 loc_28B4:                               ; CODE XREF: mode_adjust+11F↑j
.text:00000000000028B4                 pop     rbx
.text:00000000000028B5                 pop     rbp
.text:00000000000028B6                 pop     r12
.text:00000000000028B8                 retn
.text:00000000000028B8 ; ---------------------------------------------------------------------------
.text:00000000000028B9                 align 20h
.text:00000000000028C0
.text:00000000000028C0 loc_28C0:                               ; CODE XREF: mode_adjust+7E↑j
.text:00000000000028C0                 mov     r12d, eax
.text:00000000000028C3                 mov     r10d, esi
.text:00000000000028C6                 and     r12d, 49h
.text:00000000000028CA                 or      r10d, 49h
.text:00000000000028CE                 or      r12d, ebp
.text:00000000000028D1                 cmovnz  esi, r10d
.text:00000000000028D5                 jmp     short loc_2858
.text:00000000000028D5 ; ---------------------------------------------------------------------------
.text:00000000000028D7                 align 20h
.text:00000000000028E0
.text:00000000000028E0 loc_28E0:                               ; CODE XREF: mode_adjust+3D↑j
.text:00000000000028E0                                         ; mode_adjust+E4↑j
.text:00000000000028E0                 or      r11d, esi
.text:00000000000028E3                 not     esi
.text:00000000000028E5                 and     eax, esi
.text:00000000000028E7                 jmp     loc_27E8
.text:00000000000028E7 ; ---------------------------------------------------------------------------
.text:00000000000028EC                 align 10h
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: mode_adjust+F↑j
.text:00000000000028F0                 xor     r11d, r11d
.text:00000000000028F3                 test    r8, r8
.text:00000000000028F6                 jz      short locret_28FB
.text:00000000000028F8                 mov     [r8], r11d
.text:00000000000028FB
.text:00000000000028FB locret_28FB:                            ; CODE XREF: mode_adjust+166↑j
.text:00000000000028FB                 rep retn
.text:00000000000028FB ; } // starts at 2790
.text:00000000000028FB mode_adjust     endp
.text:00000000000028FB
.text:00000000000028FB ; ---------------------------------------------------------------------------
.text:00000000000028FD                 align 20h
.text:0000000000002900
.text:0000000000002900 ; =============== S U B R O U T I N E =======================================
.text:0000000000002900
.text:0000000000002900
.text:0000000000002900                 public set_program_name
.text:0000000000002900 set_program_name proc near              ; CODE XREF: main+31↑p
.text:0000000000002900 ; __unwind {
.text:0000000000002900                 test    rdi, rdi
.text:0000000000002903                 push    rbx
.text:0000000000002904                 jz      short loc_297D
.text:0000000000002906                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000290B                 mov     rbx, rdi
.text:000000000000290E                 call    _strrchr
.text:0000000000002913                 test    rax, rax
.text:0000000000002916                 jz      short loc_296D
.text:0000000000002918                 lea     r8, [rax+1]
.text:000000000000291C                 mov     rdx, r8
.text:000000000000291F                 sub     rdx, rbx
.text:0000000000002922                 cmp     rdx, 6
.text:0000000000002926                 jle     short loc_296D
.text:0000000000002928                 lea     rsi, [rax-6]
.text:000000000000292C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002933                 mov     ecx, 7
.text:0000000000002938                 repe cmpsb
.text:000000000000293A                 setnbe  dl
.text:000000000000293D                 sbb     dl, 0
.text:0000000000002940                 test    dl, dl
.text:0000000000002942                 jnz     short loc_296D
.text:0000000000002944                 lea     rdi, aLt        ; "lt-"
.text:000000000000294B                 mov     ecx, 3
.text:0000000000002950                 mov     rsi, r8
.text:0000000000002953                 mov     rbx, r8
.text:0000000000002956                 repe cmpsb
.text:0000000000002958                 setnbe  dl
.text:000000000000295B                 sbb     dl, 0
.text:000000000000295E                 test    dl, dl
.text:0000000000002960                 jnz     short loc_296D
.text:0000000000002962                 lea     rbx, [rax+4]
.text:0000000000002966                 mov     cs:__bss_start, rbx
.text:000000000000296D
.text:000000000000296D loc_296D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000296D                                         ; set_program_name+26↑j ...
.text:000000000000296D                 mov     cs:program_name, rbx
.text:0000000000002974                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000297B                 pop     rbx
.text:000000000000297C                 retn
.text:000000000000297D ; ---------------------------------------------------------------------------
.text:000000000000297D
.text:000000000000297D loc_297D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000297D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002984                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000298B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002990                 mov     esi, 1          ; size
.text:0000000000002995                 call    _fwrite
.text:000000000000299A                 call    _abort
.text:000000000000299A ; } // starts at 2900
.text:000000000000299A set_program_name endp
.text:000000000000299A
.text:000000000000299A ; ---------------------------------------------------------------------------
.text:000000000000299F                 align 20h
.text:00000000000029A0
.text:00000000000029A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000029A0
.text:00000000000029A0 ; Attributes: info_from_lumina
.text:00000000000029A0
.text:00000000000029A0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000029A0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000029A0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000029A0 ; __unwind {
.text:00000000000029A0                 push    rbp
.text:00000000000029A1                 push    rbx
.text:00000000000029A2                 mov     rbp, rdi
.text:00000000000029A5                 mov     ebx, esi
.text:00000000000029A7                 sub     rsp, 8
.text:00000000000029AB                 call    locale_charset
.text:00000000000029B0                 movzx   edx, byte ptr [rax]
.text:00000000000029B3                 and     edx, 0FFFFFFDFh
.text:00000000000029B6                 cmp     dl, 55h ; 'U'
.text:00000000000029B9                 jz      short loc_2A30
.text:00000000000029BB                 cmp     dl, 47h ; 'G'
.text:00000000000029BE                 jz      short loc_29E0
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000029C0                                         ; gettext_quote+50↓j ...
.text:00000000000029C0                 lea     rax, unk_5F7B
.text:00000000000029C7                 lea     rdx, asc_5F7D   ; "'"
.text:00000000000029CE                 cmp     ebx, 9
.text:00000000000029D1                 cmovnz  rax, rdx
.text:00000000000029D5                 add     rsp, 8
.text:00000000000029D9                 pop     rbx
.text:00000000000029DA                 pop     rbp
.text:00000000000029DB                 retn
.text:00000000000029DB ; ---------------------------------------------------------------------------
.text:00000000000029DC                 align 20h
.text:00000000000029E0
.text:00000000000029E0 loc_29E0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000029E0                 movzx   edx, byte ptr [rax+1]
.text:00000000000029E4                 and     edx, 0FFFFFFDFh
.text:00000000000029E7                 cmp     dl, 42h ; 'B'
.text:00000000000029EA                 jnz     short loc_29C0
.text:00000000000029EC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000029F0                 jnz     short loc_29C0
.text:00000000000029F2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000029F6                 jnz     short loc_29C0
.text:00000000000029F8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000029FC                 jnz     short loc_29C0
.text:00000000000029FE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002A02                 jnz     short loc_29C0
.text:0000000000002A04                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002A08                 jnz     short loc_29C0
.text:0000000000002A0A                 cmp     byte ptr [rax+7], 0
.text:0000000000002A0E                 jnz     short loc_29C0
.text:0000000000002A10                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002A14                 lea     rax, unk_5F74
.text:0000000000002A1B                 lea     rdx, unk_5F78
.text:0000000000002A22                 cmovnz  rax, rdx
.text:0000000000002A26                 add     rsp, 8
.text:0000000000002A2A                 pop     rbx
.text:0000000000002A2B                 pop     rbp
.text:0000000000002A2C                 retn
.text:0000000000002A2C ; ---------------------------------------------------------------------------
.text:0000000000002A2D                 align 10h
.text:0000000000002A30
.text:0000000000002A30 loc_2A30:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002A30                 movzx   edx, byte ptr [rax+1]
.text:0000000000002A34                 and     edx, 0FFFFFFDFh
.text:0000000000002A37                 cmp     dl, 54h ; 'T'
.text:0000000000002A3A                 jnz     short loc_29C0
.text:0000000000002A3C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002A40                 and     edx, 0FFFFFFDFh
.text:0000000000002A43                 cmp     dl, 46h ; 'F'
.text:0000000000002A46                 jnz     loc_29C0
.text:0000000000002A4C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002A50                 jnz     loc_29C0
.text:0000000000002A56                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000002A5A                 jnz     loc_29C0
.text:0000000000002A60                 cmp     byte ptr [rax+5], 0
.text:0000000000002A64                 jnz     loc_29C0
.text:0000000000002A6A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002A6E                 lea     rax, unk_5F6C
.text:0000000000002A75                 lea     rdx, unk_5F70
.text:0000000000002A7C                 cmovnz  rax, rdx
.text:0000000000002A80                 add     rsp, 8
.text:0000000000002A84                 pop     rbx
.text:0000000000002A85                 pop     rbp
.text:0000000000002A86                 retn
.text:0000000000002A86 ; } // starts at 29A0
.text:0000000000002A86 gettext_quote   endp
.text:0000000000002A86
.text:0000000000002A86 ; ---------------------------------------------------------------------------
.text:0000000000002A87                 align 10h
.text:0000000000002A90
.text:0000000000002A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A90
.text:0000000000002A90 ; Attributes: info_from_lumina
.text:0000000000002A90
.text:0000000000002A90 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002A90 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002A90                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002A90
.text:0000000000002A90 var_E0          = dword ptr -0E0h
.text:0000000000002A90 var_DB          = byte ptr -0DBh
.text:0000000000002A90 var_DA          = byte ptr -0DAh
.text:0000000000002A90 var_D9          = byte ptr -0D9h
.text:0000000000002A90 s               = qword ptr -0D8h
.text:0000000000002A90 n               = qword ptr -0D0h
.text:0000000000002A90 var_C8          = qword ptr -0C8h
.text:0000000000002A90 ps              = qword ptr -0C0h
.text:0000000000002A90 var_B8          = qword ptr -0B8h
.text:0000000000002A90 var_B0          = qword ptr -0B0h
.text:0000000000002A90 var_A8          = qword ptr -0A8h
.text:0000000000002A90 s2              = qword ptr -0A0h
.text:0000000000002A90 var_98          = qword ptr -98h
.text:0000000000002A90 var_90          = qword ptr -90h
.text:0000000000002A90 var_88          = qword ptr -88h
.text:0000000000002A90 var_80          = qword ptr -80h
.text:0000000000002A90 var_78          = qword ptr -78h
.text:0000000000002A90 var_70          = dword ptr -70h
.text:0000000000002A90 var_6C          = byte ptr -6Ch
.text:0000000000002A90 var_6B          = byte ptr -6Bh
.text:0000000000002A90 var_6A          = byte ptr -6Ah
.text:0000000000002A90 var_69          = byte ptr -69h
.text:0000000000002A90 var_68          = qword ptr -68h
.text:0000000000002A90 var_60          = qword ptr -60h
.text:0000000000002A90 wc              = dword ptr -4Ch
.text:0000000000002A90 var_48          = qword ptr -48h
.text:0000000000002A90 var_40          = qword ptr -40h
.text:0000000000002A90 arg_0           = qword ptr  8
.text:0000000000002A90 arg_8           = qword ptr  10h
.text:0000000000002A90 arg_10          = qword ptr  18h
.text:0000000000002A90
.text:0000000000002A90 ; __unwind {
.text:0000000000002A90                 push    r15
.text:0000000000002A92                 push    r14
.text:0000000000002A94                 mov     r15d, r8d
.text:0000000000002A97                 push    r13
.text:0000000000002A99                 push    r12
.text:0000000000002A9B                 mov     r14, rdi
.text:0000000000002A9E                 push    rbp
.text:0000000000002A9F                 push    rbx
.text:0000000000002AA0                 mov     ebx, r9d
.text:0000000000002AA3                 mov     r13, rsi
.text:0000000000002AA6                 mov     rbp, rcx
.text:0000000000002AA9                 and     ebx, 2
.text:0000000000002AAC                 sub     rsp, 0B8h
.text:0000000000002AB3                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002ABB                 mov     [rsp+0E8h+s], rdx
.text:0000000000002AC0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002AC5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002ACA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002ACF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002AD7                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002ADC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002AE4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002AE9                 mov     rax, fs:28h
.text:0000000000002AF2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002AFA                 xor     eax, eax
.text:0000000000002AFC                 call    ___ctype_get_mb_cur_max
.text:0000000000002B01                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002B05                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002B0A                 ja      def_2B21        ; jumptable 00000000000121F1 default case
.text:0000000000002B10                 lea     rcx, jpt_2B21
.text:0000000000002B17                 mov     edx, r15d
.text:0000000000002B1A                 movsxd  rax, ds:(jpt_2B21 - 5FE0h)[rcx+rdx*4]
.text:0000000000002B1E                 add     rax, rcx
.text:0000000000002B21                 jmp     rax             ; switch jump
.text:0000000000002B23 ; ---------------------------------------------------------------------------
.text:0000000000002B23
.text:0000000000002B23 loc_2B23:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002B23                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002B23                                         ; DATA XREF: ...
.text:0000000000002B23                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002B28                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002B2D                 xor     r12d, r12d
.text:0000000000002B30                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002B39                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002B3E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002B43
.text:0000000000002B43 loc_2B43:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002B43                 lea     rax, asc_5F7D   ; "'"
.text:0000000000002B4A                 mov     [rsp+0E8h+n], 1
.text:0000000000002B53                 xor     r15d, r15d
.text:0000000000002B56                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002B5E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002B63
.text:0000000000002B63 loc_2B63:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002B63                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002B63                 xor     r11d, r11d
.text:0000000000002B66                 mov     rax, rbp
.text:0000000000002B69                 mov     r8d, r12d
.text:0000000000002B6C                 mov     rbp, r11
.text:0000000000002B6F                 mov     r11, rax
.text:0000000000002B72                 nop     word ptr [rax+rax+00h]
.text:0000000000002B78
.text:0000000000002B78 loc_2B78:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002B78                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002B78                 cmp     r11, rbp
.text:0000000000002B7B                 setnz   r12b
.text:0000000000002B7F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002B83                 jnz     short loc_2B92
.text:0000000000002B85                 mov     rax, [rsp+0E8h+s]
.text:0000000000002B8A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000002B8E                 setnz   r12b
.text:0000000000002B92
.text:0000000000002B92 loc_2B92:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002B92                 test    r12b, r12b
.text:0000000000002B95                 jz      loc_31F0
.text:0000000000002B9B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002BA0                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002BA5                 lea     r9, [rdi+rbp]
.text:0000000000002BA9                 setnz   al
.text:0000000000002BAC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002BB0                 mov     r10d, eax
.text:0000000000002BB3                 jz      loc_2C60
.text:0000000000002BB9                 mov     rax, [rsp+0E8h+n]
.text:0000000000002BBE                 test    rax, rax
.text:0000000000002BC1                 jz      loc_2FF0
.text:0000000000002BC7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002BCB                 lea     rbx, [rbp+rax+0]
.text:0000000000002BD0                 jnz     short loc_2C00
.text:0000000000002BD2                 cmp     rax, 1
.text:0000000000002BD6                 jbe     short loc_2C00
.text:0000000000002BD8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002BDD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002BE2                 mov     [rsp+0E8h+ps], r9
.text:0000000000002BE7                 call    _strlen
.text:0000000000002BEC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002BF2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002BF8                 mov     r11, rax
.text:0000000000002BFB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002C00
.text:0000000000002C00 loc_2C00:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002C00                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002C00                 cmp     rbx, r11
.text:0000000000002C03                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002C08                 ja      loc_31C0
.text:0000000000002C0E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002C13                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002C18                 mov     rdi, r9         ; s1
.text:0000000000002C1B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002C20                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002C25                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002C2A                 call    _memcmp
.text:0000000000002C2F                 test    eax, eax
.text:0000000000002C31                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002C36                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002C3C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002C41                 jnz     loc_31C0
.text:0000000000002C47                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002C4C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002C52                 jnz     loc_3BD5
.text:0000000000002C58                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002C60
.text:0000000000002C60 loc_2C60:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002C60                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002C60                 movzx   ebx, byte ptr [r9]
.text:0000000000002C64                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002C67                 ja      def_2C7E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002C6D                 lea     rcx, jpt_2C7E
.text:0000000000002C74                 movzx   edx, bl
.text:0000000000002C77                 movsxd  rax, ds:(jpt_2C7E - 600Ch)[rcx+rdx*4]
.text:0000000000002C7B                 add     rax, rcx
.text:0000000000002C7E                 jmp     rax             ; switch jump
.text:0000000000002C80 ; ---------------------------------------------------------------------------
.text:0000000000002C80
.text:0000000000002C80 loc_2C80:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002C80                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000002C80                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002C83
.text:0000000000002C83 loc_2C83:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002C83                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002C83                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002C87                 setnz   al
.text:0000000000002C8A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002C8E                 jnz     short loc_2C9C
.text:0000000000002C90                 mov     rax, [rsp+0E8h+s]
.text:0000000000002C95                 cmp     byte ptr [rax+1], 0
.text:0000000000002C99                 setnz   al
.text:0000000000002C9C
.text:0000000000002C9C loc_2C9C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000002C9C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002CA1                 setz    dl
.text:0000000000002CA4                 test    al, al
.text:0000000000002CA6                 jz      loc_2EF8
.text:0000000000002CAC
.text:0000000000002CAC loc_2CAC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000002CAC                 xor     r12d, r12d
.text:0000000000002CAF                 xor     eax, eax
.text:0000000000002CB1                 nop     dword ptr [rax+00000000h]
.text:0000000000002CB8
.text:0000000000002CB8 loc_2CB8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002CB8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002CB8                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000002CBD                 jnz     loc_2DD2
.text:0000000000002CC3                 test    dl, dl
.text:0000000000002CC5                 jnz     loc_2DD2
.text:0000000000002CCB
.text:0000000000002CCB loc_2CCB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000002CCB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002CD0                 test    rsi, rsi
.text:0000000000002CD3                 jz      short loc_2CE9
.text:0000000000002CD5                 mov     edx, ebx
.text:0000000000002CD7                 shr     dl, 5
.text:0000000000002CDA                 movzx   edx, dl
.text:0000000000002CDD                 mov     edx, [rsi+rdx*4]
.text:0000000000002CE0                 bt      edx, ebx
.text:0000000000002CE3                 jb      loc_2E33
.text:0000000000002CE9
.text:0000000000002CE9 loc_2CE9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002CE9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002CE9                 test    r10b, r10b
.text:0000000000002CEC                 jnz     loc_2E33
.text:0000000000002CF2                 xor     eax, 1
.text:0000000000002CF5                 add     rbp, 1
.text:0000000000002CF9                 and     eax, r8d
.text:0000000000002CFC
.text:0000000000002CFC loc_2CFC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000002CFC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000002CFC                 test    al, al
.text:0000000000002CFE                 jz      short loc_2D20
.text:0000000000002D00                 cmp     r13, r15
.text:0000000000002D03                 jbe     short loc_2D0A
.text:0000000000002D05                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002D0A
.text:0000000000002D0A loc_2D0A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000002D0A                 lea     rax, [r15+1]
.text:0000000000002D0E                 cmp     r13, rax
.text:0000000000002D11                 jbe     short loc_2D19
.text:0000000000002D13                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002D19
.text:0000000000002D19 loc_2D19:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002D19                 add     r15, 2
.text:0000000000002D1D                 xor     r8d, r8d
.text:0000000000002D20
.text:0000000000002D20 loc_2D20:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002D20                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002D20                 cmp     r15, r13
.text:0000000000002D23                 jnb     short loc_2D29
.text:0000000000002D25                 mov     [r14+r15], bl
.text:0000000000002D29
.text:0000000000002D29 loc_2D29:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002D29                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000002D2E                 add     r15, 1
.text:0000000000002D32                 mov     eax, 0
.text:0000000000002D37                 test    r12b, r12b
.text:0000000000002D3A                 cmovz   edi, eax
.text:0000000000002D3D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002D42                 jmp     loc_2B78
.text:0000000000002D42 ; ---------------------------------------------------------------------------
.text:0000000000002D47                 align 10h
.text:0000000000002D50
.text:0000000000002D50 loc_2D50:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002D50                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000002D50                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002D53
.text:0000000000002D53 loc_2D53:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D53                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002D53                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002D57                 cmp     eax, 2
.text:0000000000002D5A                 jz      loc_3318
.text:0000000000002D60                 cmp     eax, 5
.text:0000000000002D63                 jz      loc_32D8
.text:0000000000002D69                 cmp     eax, 2
.text:0000000000002D6C                 mov     ebx, 3Fh ; '?'
.text:0000000000002D71                 setz    dl
.text:0000000000002D74                 xor     r12d, r12d
.text:0000000000002D77                 xor     eax, eax
.text:0000000000002D79                 jmp     loc_2CB8
.text:0000000000002D79 ; ---------------------------------------------------------------------------
.text:0000000000002D7E                 align 20h
.text:0000000000002D80
.text:0000000000002D80 loc_2D80:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002D80                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000002D80                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002D83
.text:0000000000002D83 loc_2D83:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D83                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002D83                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002D88                 jz      loc_3290
.text:0000000000002D8E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002D93                 xor     edx, edx
.text:0000000000002D95                 xor     eax, eax
.text:0000000000002D97                 mov     ebx, 27h ; '''
.text:0000000000002D9C                 jmp     loc_2CB8
.text:0000000000002D9C ; ---------------------------------------------------------------------------
.text:0000000000002DA1                 align 8
.text:0000000000002DA8
.text:0000000000002DA8 loc_2DA8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002DA8                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002DA8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000002DAD                 mov     ebx, 74h ; 't'
.text:0000000000002DB2
.text:0000000000002DB2 loc_2DB2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002DB2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002DB2                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002DB7                 setz    al
.text:0000000000002DBA                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002DBE                 jnz     loc_2F0E
.text:0000000000002DC4
.text:0000000000002DC4 loc_2DC4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002DC4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002DC4                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002DC9                 jnz     short loc_2E30
.text:0000000000002DCB
.text:0000000000002DCB loc_2DCB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000002DCB                 mov     ebx, edx
.text:0000000000002DCD                 xor     r12d, r12d
.text:0000000000002DD0                 xor     eax, eax
.text:0000000000002DD2
.text:0000000000002DD2 loc_2DD2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002DD2                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002DD2                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002DD7                 jnz     loc_2CCB
.text:0000000000002DDD                 jmp     loc_2CE9
.text:0000000000002DDD ; ---------------------------------------------------------------------------
.text:0000000000002DE2                 align 8
.text:0000000000002DE8
.text:0000000000002DE8 loc_2DE8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002DE8                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002DE8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000002DED                 mov     ebx, 62h ; 'b'
.text:0000000000002DF2                 jmp     short loc_2DC4
.text:0000000000002DF2 ; ---------------------------------------------------------------------------
.text:0000000000002DF4                 align 8
.text:0000000000002DF8
.text:0000000000002DF8 loc_2DF8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002DF8                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002DF8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000002DFD                 jz      loc_31D0
.text:0000000000002E03                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002E08                 jz      loc_3020
.text:0000000000002E0E
.text:0000000000002E0E loc_2E0E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000002E0E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002E13                 jz      loc_3020
.text:0000000000002E19                 cmp     [rsp+0E8h+n], 0
.text:0000000000002E1F                 jnz     loc_31DB
.text:0000000000002E25                 mov     ebx, 5Ch ; '\'
.text:0000000000002E2A                 nop     word ptr [rax+rax+00h]
.text:0000000000002E30
.text:0000000000002E30 loc_2E30:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002E30                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002E30                 xor     r12d, r12d
.text:0000000000002E33
.text:0000000000002E33 loc_2E33:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002E33                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002E33                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E38                 setz    dl
.text:0000000000002E3B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002E40                 mov     eax, edx
.text:0000000000002E42                 jnz     loc_3698
.text:0000000000002E48                 mov     eax, r8d
.text:0000000000002E4B                 xor     eax, 1
.text:0000000000002E4E                 and     al, dl
.text:0000000000002E50                 jz      short loc_2E81
.text:0000000000002E52                 cmp     r13, r15
.text:0000000000002E55                 jbe     short loc_2E5C
.text:0000000000002E57                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002E5C
.text:0000000000002E5C loc_2E5C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000002E5C                 lea     rdx, [r15+1]
.text:0000000000002E60                 cmp     r13, rdx
.text:0000000000002E63                 jbe     short loc_2E6B
.text:0000000000002E65                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002E6B
.text:0000000000002E6B loc_2E6B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000002E6B                 lea     rdx, [r15+2]
.text:0000000000002E6F                 cmp     r13, rdx
.text:0000000000002E72                 jbe     short loc_2E7A
.text:0000000000002E74                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002E7A
.text:0000000000002E7A loc_2E7A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000002E7A                 add     r15, 3
.text:0000000000002E7E                 mov     r8d, eax
.text:0000000000002E81
.text:0000000000002E81 loc_2E81:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002E81                 cmp     r13, r15
.text:0000000000002E84                 jbe     short loc_2E8B
.text:0000000000002E86                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002E8B
.text:0000000000002E8B loc_2E8B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000002E8B                 add     r15, 1
.text:0000000000002E8F                 add     rbp, 1
.text:0000000000002E93                 jmp     loc_2D20
.text:0000000000002E93 ; ---------------------------------------------------------------------------
.text:0000000000002E98                 align 20h
.text:0000000000002EA0
.text:0000000000002EA0 loc_2EA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EA0                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002EA0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002EA5                 jnz     loc_3073
.text:0000000000002EAB                 xor     edx, edx
.text:0000000000002EAD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002EB2                 jz      loc_2DCB
.text:0000000000002EB8                 add     rbp, 1
.text:0000000000002EBC                 jmp     loc_2B78
.text:0000000000002EBC ; ---------------------------------------------------------------------------
.text:0000000000002EC1                 align 8
.text:0000000000002EC8
.text:0000000000002EC8 loc_2EC8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EC8                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002EC8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000002ECD                 setz    dl
.text:0000000000002ED0                 xor     eax, eax
.text:0000000000002ED2                 jmp     loc_2CB8
.text:0000000000002ED2 ; ---------------------------------------------------------------------------
.text:0000000000002ED7                 align 20h
.text:0000000000002EE0
.text:0000000000002EE0 loc_2EE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EE0                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002EE0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002EE5                 mov     ebx, 61h ; 'a'
.text:0000000000002EEA                 jmp     loc_2DC4
.text:0000000000002EEA ; ---------------------------------------------------------------------------
.text:0000000000002EEF                 align 10h
.text:0000000000002EF0
.text:0000000000002EF0 loc_2EF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EF0                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002EF0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002EF5                 setz    dl
.text:0000000000002EF8
.text:0000000000002EF8 loc_2EF8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002EF8                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002EF8                 test    rbp, rbp
.text:0000000000002EFB                 jnz     loc_2CAC
.text:0000000000002F01
.text:0000000000002F01 loc_2F01:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002F01                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002F01                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002F06                 and     al, dl
.text:0000000000002F08                 jz      loc_2CB8
.text:0000000000002F0E
.text:0000000000002F0E loc_2F0E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000002F0E                 mov     rbp, r11
.text:0000000000002F11                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002F19                 jmp     loc_3619
.text:0000000000002F19 ; ---------------------------------------------------------------------------
.text:0000000000002F1E                 align 20h
.text:0000000000002F20
.text:0000000000002F20 loc_2F20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F20                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002F20                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002F25                 setz    dl
.text:0000000000002F28                 xor     r12d, r12d
.text:0000000000002F2B                 jmp     short loc_2F01
.text:0000000000002F2B ; ---------------------------------------------------------------------------
.text:0000000000002F2D                 align 10h
.text:0000000000002F30
.text:0000000000002F30 loc_2F30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F30                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002F30                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002F35                 mov     ebx, 20h ; ' '
.text:0000000000002F3A                 setz    dl
.text:0000000000002F3D                 jmp     short loc_2F01
.text:0000000000002F3D ; ---------------------------------------------------------------------------
.text:0000000000002F3F                 align 20h
.text:0000000000002F40
.text:0000000000002F40 loc_2F40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F40                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002F40                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002F45                 mov     ebx, 72h ; 'r'
.text:0000000000002F4A                 jmp     loc_2DB2
.text:0000000000002F4A ; ---------------------------------------------------------------------------
.text:0000000000002F4F                 align 10h
.text:0000000000002F50
.text:0000000000002F50 loc_2F50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F50                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002F50                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002F55                 mov     ebx, 66h ; 'f'
.text:0000000000002F5A                 jmp     loc_2DC4
.text:0000000000002F5A ; ---------------------------------------------------------------------------
.text:0000000000002F5F                 align 20h
.text:0000000000002F60
.text:0000000000002F60 loc_2F60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F60                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002F60                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002F65                 mov     ebx, 76h ; 'v'
.text:0000000000002F6A                 jmp     loc_2DC4
.text:0000000000002F6A ; ---------------------------------------------------------------------------
.text:0000000000002F6F                 align 10h
.text:0000000000002F70
.text:0000000000002F70 loc_2F70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F70                                         ; DATA XREF: .rodata:jpt_2C7E↓o
.text:0000000000002F70                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002F75                 mov     ebx, 6Eh ; 'n'
.text:0000000000002F7A                 jmp     loc_2DB2
.text:0000000000002F7A ; ---------------------------------------------------------------------------
.text:0000000000002F7F                 align 20h
.text:0000000000002F80
.text:0000000000002F80 def_300A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002F80                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002F80                                         ; DATA XREF: ...
.text:0000000000002F80                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002F83                 nop     dword ptr [rax+rax+00h]
.text:0000000000002F88
.text:0000000000002F88 def_2C7E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002F88                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002F88                                         ; DATA XREF: ...
.text:0000000000002F88                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002F8E                 jnz     loc_3338
.text:0000000000002F94                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002F99                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000002F9E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002FA3                 call    ___ctype_b_loc
.text:0000000000002FA8                 mov     rcx, [rax]
.text:0000000000002FAB                 movzx   edx, bl
.text:0000000000002FAE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002FB4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002FBA                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000002FBF                 mov     edi, 1
.text:0000000000002FC4                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002FC8                 and     ax, 4000h
.text:0000000000002FCC                 setnz   r12b
.text:0000000000002FD0                 setz    al
.text:0000000000002FD3                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002FD7
.text:0000000000002FD7 loc_2FD7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002FD7                 test    al, al
.text:0000000000002FD9                 jnz     loc_3971
.text:0000000000002FDF                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002FE4                 setz    dl
.text:0000000000002FE7                 jmp     loc_2CB8
.text:0000000000002FE7 ; ---------------------------------------------------------------------------
.text:0000000000002FEC                 align 10h
.text:0000000000002FF0
.text:0000000000002FF0 loc_2FF0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002FF0                 movzx   ebx, byte ptr [r9]
.text:0000000000002FF4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002FF7                 ja      short def_300A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002FF9                 lea     rcx, jpt_300A
.text:0000000000003000                 movzx   edx, bl
.text:0000000000003003                 movsxd  rax, ds:(jpt_300A - 6208h)[rcx+rdx*4]
.text:0000000000003007                 add     rax, rcx
.text:000000000000300A                 jmp     rax             ; switch jump
.text:000000000000300A ; ---------------------------------------------------------------------------
.text:000000000000300C                 align 10h
.text:0000000000003010
.text:0000000000003010 loc_3010:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003010                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000003010                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003013                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003018                 jnz     loc_2E0E
.text:000000000000301E                 xchg    ax, ax
.text:0000000000003020
.text:0000000000003020 loc_3020:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003020                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003020                 mov     edx, 5Ch ; '\'
.text:0000000000003025                 mov     ebx, 5Ch ; '\'
.text:000000000000302A                 jmp     loc_2DC4
.text:000000000000302A ; ---------------------------------------------------------------------------
.text:000000000000302F                 align 10h
.text:0000000000003030
.text:0000000000003030 loc_3030:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003030                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000003030                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003035                 xor     r10d, r10d
.text:0000000000003038                 mov     ebx, 66h ; 'f'
.text:000000000000303D                 jmp     loc_2DC4
.text:000000000000303D ; ---------------------------------------------------------------------------
.text:0000000000003042                 align 8
.text:0000000000003048
.text:0000000000003048 loc_3048:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003048                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000003048                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000304D                 xor     r10d, r10d
.text:0000000000003050                 mov     ebx, 6Eh ; 'n'
.text:0000000000003055                 jmp     loc_2DB2
.text:0000000000003055 ; ---------------------------------------------------------------------------
.text:000000000000305A                 align 20h
.text:0000000000003060
.text:0000000000003060 loc_3060:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003060                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000003060                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003065                 jmp     loc_2E30
.text:0000000000003065 ; ---------------------------------------------------------------------------
.text:000000000000306A                 align 10h
.text:0000000000003070
.text:0000000000003070 loc_3070:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003070                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000003070                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003073
.text:0000000000003073 loc_3073:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003073                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003078                 setz    dl
.text:000000000000307B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003080                 jnz     loc_3C1A
.text:0000000000003086                 mov     eax, r8d
.text:0000000000003089                 mov     rcx, r15
.text:000000000000308C                 xor     eax, 1
.text:000000000000308F                 and     al, dl
.text:0000000000003091                 jz      short loc_30C0
.text:0000000000003093                 cmp     r13, r15
.text:0000000000003096                 jbe     short loc_309D
.text:0000000000003098                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000309D
.text:000000000000309D loc_309D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000309D                 lea     rcx, [r15+1]
.text:00000000000030A1                 cmp     r13, rcx
.text:00000000000030A4                 jbe     short loc_30AC
.text:00000000000030A6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000030AC
.text:00000000000030AC loc_30AC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000030AC                 lea     rcx, [r15+2]
.text:00000000000030B0                 cmp     r13, rcx
.text:00000000000030B3                 ja      loc_36E9
.text:00000000000030B9
.text:00000000000030B9 loc_30B9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000030B9                 lea     rcx, [r15+3]
.text:00000000000030BD                 mov     r8d, eax
.text:00000000000030C0
.text:00000000000030C0 loc_30C0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000030C0                 cmp     r13, rcx
.text:00000000000030C3                 jbe     short loc_30CA
.text:00000000000030C5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000030CA
.text:00000000000030CA loc_30CA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000030CA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000030CF                 lea     r15, [rcx+1]
.text:00000000000030D3                 jz      loc_36D9
.text:00000000000030D9                 lea     rax, [rbp+1]
.text:00000000000030DD                 cmp     rax, r11
.text:00000000000030E0                 jnb     short loc_30FB
.text:00000000000030E2                 mov     rax, [rsp+0E8h+s]
.text:00000000000030E7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000030EC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000030F0                 sub     eax, 30h ; '0'
.text:00000000000030F3                 cmp     al, 9
.text:00000000000030F5                 jbe     loc_3929
.text:00000000000030FB
.text:00000000000030FB loc_30FB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000030FB                 mov     eax, r12d
.text:00000000000030FE                 mov     ebx, 30h ; '0'
.text:0000000000003103                 xor     r12d, r12d
.text:0000000000003106                 jmp     loc_2CB8
.text:0000000000003106 ; ---------------------------------------------------------------------------
.text:000000000000310B                 align 10h
.text:0000000000003110
.text:0000000000003110 loc_3110:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003110                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000003110                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003115                 mov     r12d, r10d
.text:0000000000003118                 setz    dl
.text:000000000000311B                 xor     r10d, r10d
.text:000000000000311E                 xor     eax, eax
.text:0000000000003120                 jmp     loc_2CB8
.text:0000000000003120 ; ---------------------------------------------------------------------------
.text:0000000000003125                 align 8
.text:0000000000003128
.text:0000000000003128 loc_3128:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003128                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000003128                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000312D                 setz    dl
.text:0000000000003130                 xor     r10d, r10d
.text:0000000000003133                 jmp     loc_2EF8
.text:0000000000003133 ; ---------------------------------------------------------------------------
.text:0000000000003138                 align 20h
.text:0000000000003140
.text:0000000000003140 loc_3140:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003140                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000003140                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003145                 setz    dl
.text:0000000000003148                 xor     r10d, r10d
.text:000000000000314B                 xor     r12d, r12d
.text:000000000000314E                 jmp     loc_2F01
.text:000000000000314E ; ---------------------------------------------------------------------------
.text:0000000000003153                 align 8
.text:0000000000003158
.text:0000000000003158 loc_3158:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003158                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000003158                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000315D                 mov     r12d, r10d
.text:0000000000003160                 mov     ebx, 20h ; ' '
.text:0000000000003165                 setz    dl
.text:0000000000003168                 xor     r10d, r10d
.text:000000000000316B                 jmp     loc_2F01
.text:0000000000003170 ; ---------------------------------------------------------------------------
.text:0000000000003170
.text:0000000000003170 loc_3170:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003170                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000003170                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003175                 xor     r10d, r10d
.text:0000000000003178                 mov     ebx, 72h ; 'r'
.text:000000000000317D                 jmp     loc_2DB2
.text:000000000000317D ; ---------------------------------------------------------------------------
.text:0000000000003182                 align 8
.text:0000000000003188
.text:0000000000003188 loc_3188:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003188                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000003188                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000318D                 jmp     loc_2E30
.text:000000000000318D ; ---------------------------------------------------------------------------
.text:0000000000003192                 align 8
.text:0000000000003198
.text:0000000000003198 loc_3198:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003198                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:0000000000003198                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000319D                 xor     r10d, r10d
.text:00000000000031A0                 mov     ebx, 74h ; 't'
.text:00000000000031A5                 jmp     loc_2DB2
.text:00000000000031A5 ; ---------------------------------------------------------------------------
.text:00000000000031AA                 align 10h
.text:00000000000031B0
.text:00000000000031B0 loc_31B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000031B0                                         ; DATA XREF: .rodata:jpt_300A↓o
.text:00000000000031B0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000031B5                 jmp     loc_2E30
.text:00000000000031B5 ; ---------------------------------------------------------------------------
.text:00000000000031BA                 align 20h
.text:00000000000031C0
.text:00000000000031C0 loc_31C0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000031C0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000031C0                 xor     r10d, r10d
.text:00000000000031C3                 jmp     loc_2C60
.text:00000000000031C3 ; ---------------------------------------------------------------------------
.text:00000000000031C8                 align 10h
.text:00000000000031D0
.text:00000000000031D0 loc_31D0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000031D0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000031D5                 jnz     loc_3B40
.text:00000000000031DB
.text:00000000000031DB loc_31DB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000031DB                 add     rbp, 1
.text:00000000000031DF                 mov     eax, r8d
.text:00000000000031E2                 xor     r12d, r12d
.text:00000000000031E5                 mov     ebx, 5Ch ; '\'
.text:00000000000031EA                 jmp     loc_2CFC
.text:00000000000031EA ; ---------------------------------------------------------------------------
.text:00000000000031EF                 align 10h
.text:00000000000031F0
.text:00000000000031F0 loc_31F0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000031F0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000031F5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000031FA                 mov     r12d, r8d
.text:00000000000031FD                 mov     rbp, r11
.text:0000000000003200                 setz    dl
.text:0000000000003203                 mov     eax, ebx
.text:0000000000003205                 test    r15, r15
.text:0000000000003208                 setz    cl
.text:000000000000320B                 and     eax, edx
.text:000000000000320D                 and     al, cl
.text:000000000000320F                 jnz     loc_3C76
.text:0000000000003215                 mov     eax, ebx
.text:0000000000003217                 xor     eax, 1
.text:000000000000321A                 and     dl, al
.text:000000000000321C                 jz      loc_3B8C
.text:0000000000003222                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003227                 jz      loc_3B8A
.text:000000000000322D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003232                 jnz     loc_3C2D
.text:0000000000003238                 test    r13, r13
.text:000000000000323B                 setz    al
.text:000000000000323E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003244                 setnz   dl
.text:0000000000003247                 and     al, dl
.text:0000000000003249                 jz      loc_3C6C
.text:000000000000324F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003254
.text:0000000000003254 loc_3254:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003254                 lea     rbx, asc_5F7D   ; "'"
.text:000000000000325B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000325F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003267                 mov     r15d, 1
.text:000000000000326D                 mov     [rsp+0E8h+n], 1
.text:0000000000003276                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000327B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003280                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003284                 jmp     loc_2B63
.text:0000000000003284 ; ---------------------------------------------------------------------------
.text:0000000000003289                 align 10h
.text:0000000000003290
.text:0000000000003290 loc_3290:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003290                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003295                 jnz     loc_3B40
.text:000000000000329B                 test    r13, r13
.text:000000000000329E                 jz      loc_36A0
.text:00000000000032A4                 xor     edx, edx
.text:00000000000032A6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000032AC                 jnz     loc_36A0
.text:00000000000032B2
.text:00000000000032B2 loc_32B2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000032B2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000032B2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000032B7                 add     r15, 3
.text:00000000000032BB                 xor     eax, eax
.text:00000000000032BD                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000032C2                 xor     r8d, r8d
.text:00000000000032C5                 mov     r13, rdx
.text:00000000000032C8                 mov     ebx, 27h ; '''
.text:00000000000032CD                 jmp     loc_2CE9
.text:00000000000032CD ; ---------------------------------------------------------------------------
.text:00000000000032D2                 align 8
.text:00000000000032D8
.text:00000000000032D8 loc_32D8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000032D8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000032DD                 jz      short loc_3300
.text:00000000000032DF                 lea     rcx, [rbp+2]
.text:00000000000032E3                 cmp     rcx, r11
.text:00000000000032E6                 jnb     short loc_3300
.text:00000000000032E8                 mov     rax, [rsp+0E8h+s]
.text:00000000000032ED                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000032F2                 jz      loc_3A82
.text:00000000000032F8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003300
.text:0000000000003300 loc_3300:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003300                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003300                 xor     edx, edx
.text:0000000000003302                 xor     r12d, r12d
.text:0000000000003305                 xor     eax, eax
.text:0000000000003307                 mov     ebx, 3Fh ; '?'
.text:000000000000330C                 jmp     loc_2CB8
.text:000000000000330C ; ---------------------------------------------------------------------------
.text:0000000000003311                 align 8
.text:0000000000003318
.text:0000000000003318 loc_3318:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003318                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000331D                 jnz     loc_3B40
.text:0000000000003323                 xor     r12d, r12d
.text:0000000000003326                 xor     eax, eax
.text:0000000000003328                 mov     ebx, 3Fh ; '?'
.text:000000000000332D                 jmp     loc_2CE9
.text:000000000000332D ; ---------------------------------------------------------------------------
.text:0000000000003332                 align 8
.text:0000000000003338
.text:0000000000003338 loc_3338:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003338                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003340                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003344                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003350                 mov     [rsp+0E8h+ps], rax
.text:0000000000003355                 jnz     short loc_3384
.text:0000000000003357                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000335C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003361                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003366                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000336B                 call    _strlen
.text:0000000000003370                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003376                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000337C                 mov     r11, rax
.text:000000000000337F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003384
.text:0000000000003384 loc_3384:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003384                 lea     rax, [rsp+0E8h+wc]
.text:000000000000338C                 xor     ecx, ecx
.text:000000000000338E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003392                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003397                 mov     rbx, rcx
.text:000000000000339A                 mov     [rsp+0E8h+var_60], r9
.text:00000000000033A2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000033A7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000033AC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000033B4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000033B9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000033BE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000033C3
.text:00000000000033C3 loc_33C3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000033C3                 mov     rax, [rsp+0E8h+s]
.text:00000000000033C8                 lea     r14, [rbp+rbx+0]
.text:00000000000033CD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000033D2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000033D7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000033DC                 lea     r13, [rax+r14]
.text:00000000000033E0                 sub     rdx, r14
.text:00000000000033E3                 mov     rsi, r13
.text:00000000000033E6                 call    rpl_mbrtowc
.text:00000000000033EB                 test    rax, rax
.text:00000000000033EE                 mov     r15, rax
.text:00000000000033F1                 jz      short loc_3441
.text:00000000000033F3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000033F7                 jz      loc_3A15
.text:00000000000033FD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003401                 jz      loc_39A1
.text:0000000000003407                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000340C                 setz    al
.text:000000000000340F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003413                 jnz     loc_35B0
.text:0000000000003419
.text:0000000000003419 loc_3419:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003419                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003419                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003420                 call    _iswprint
.text:0000000000003425                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000342A                 test    eax, eax
.text:000000000000342C                 mov     eax, 0
.text:0000000000003431                 cmovz   r12d, eax
.text:0000000000003435                 add     rbx, r15
.text:0000000000003438                 call    _mbsinit
.text:000000000000343D                 test    eax, eax
.text:000000000000343F                 jz      short loc_33C3
.text:0000000000003441
.text:0000000000003441 loc_3441:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003441                 mov     edx, r12d
.text:0000000000003444                 mov     rdi, rbx
.text:0000000000003447                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000344D                 xor     edx, 1
.text:0000000000003450                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003455                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000345B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000345F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003467                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000346C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003471                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003476
.text:0000000000003476 loc_3476:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003476                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003476                 cmp     rdi, 1
.text:000000000000347A                 jbe     loc_3A7B
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003480                 mov     rcx, rdi
.text:0000000000003483                 xor     esi, esi
.text:0000000000003485                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000348B                 add     rcx, rbp
.text:000000000000348E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003493                 jmp     loc_354E
.text:0000000000003493 ; ---------------------------------------------------------------------------
.text:0000000000003498                 align 20h
.text:00000000000034A0
.text:00000000000034A0 loc_34A0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000034A0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000034A5                 setz    al
.text:00000000000034A8                 test    r9b, r9b
.text:00000000000034AB                 jnz     loc_3960
.text:00000000000034B1                 mov     esi, r8d
.text:00000000000034B4                 xor     esi, 1
.text:00000000000034B7                 and     al, sil
.text:00000000000034BA                 jz      short loc_34EB
.text:00000000000034BC                 cmp     r13, r15
.text:00000000000034BF                 jbe     short loc_34C6
.text:00000000000034C1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000034C6
.text:00000000000034C6 loc_34C6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000034C6                 lea     rsi, [r15+1]
.text:00000000000034CA                 cmp     r13, rsi
.text:00000000000034CD                 jbe     short loc_34D5
.text:00000000000034CF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000034D5
.text:00000000000034D5 loc_34D5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000034D5                 lea     rsi, [r15+2]
.text:00000000000034D9                 cmp     r13, rsi
.text:00000000000034DC                 jbe     short loc_34E4
.text:00000000000034DE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000034E4
.text:00000000000034E4 loc_34E4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000034E4                 add     r15, 3
.text:00000000000034E8                 mov     r8d, eax
.text:00000000000034EB
.text:00000000000034EB loc_34EB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000034EB                 cmp     r13, r15
.text:00000000000034EE                 jbe     short loc_34F5
.text:00000000000034F0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000034F5
.text:00000000000034F5 loc_34F5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000034F5                 lea     rax, [r15+1]
.text:00000000000034F9                 cmp     r13, rax
.text:00000000000034FC                 jbe     short loc_350B
.text:00000000000034FE                 mov     eax, ebx
.text:0000000000003500                 shr     al, 6
.text:0000000000003503                 add     eax, 30h ; '0'
.text:0000000000003506                 mov     [r14+r15+1], al
.text:000000000000350B
.text:000000000000350B loc_350B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000350B                 lea     rax, [r15+2]
.text:000000000000350F                 cmp     r13, rax
.text:0000000000003512                 jbe     short loc_3524
.text:0000000000003514                 mov     eax, ebx
.text:0000000000003516                 shr     al, 3
.text:0000000000003519                 and     eax, 7
.text:000000000000351C                 add     eax, 30h ; '0'
.text:000000000000351F                 mov     [r14+r15+2], al
.text:0000000000003524
.text:0000000000003524 loc_3524:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003524                 and     ebx, 7
.text:0000000000003527                 add     rbp, 1
.text:000000000000352B                 add     r15, 3
.text:000000000000352F                 add     ebx, 30h ; '0'
.text:0000000000003532                 cmp     rbp, rcx
.text:0000000000003535                 jnb     loc_2D20
.text:000000000000353B                 mov     esi, edx
.text:000000000000353D
.text:000000000000353D loc_353D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000353D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000353D                 cmp     r13, r15
.text:0000000000003540                 jbe     short loc_3546
.text:0000000000003542                 mov     [r14+r15], bl
.text:0000000000003546
.text:0000000000003546 loc_3546:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003546                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000354A                 add     r15, 1
.text:000000000000354E
.text:000000000000354E loc_354E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000354E                 test    dl, dl
.text:0000000000003550                 jnz     loc_34A0
.text:0000000000003556                 mov     eax, esi
.text:0000000000003558                 xor     eax, 1
.text:000000000000355B                 and     eax, r8d
.text:000000000000355E                 test    r10b, r10b
.text:0000000000003561                 jz      short loc_3571
.text:0000000000003563                 cmp     r13, r15
.text:0000000000003566                 jbe     short loc_356D
.text:0000000000003568                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000356D
.text:000000000000356D loc_356D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000356D                 add     r15, 1
.text:0000000000003571
.text:0000000000003571 loc_3571:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003571                 add     rbp, 1
.text:0000000000003575                 cmp     rbp, rcx
.text:0000000000003578                 jnb     loc_2CFC
.text:000000000000357E                 test    al, al
.text:0000000000003580                 jz      loc_397E
.text:0000000000003586                 cmp     r13, r15
.text:0000000000003589                 jbe     short loc_3590
.text:000000000000358B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003590
.text:0000000000003590 loc_3590:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003590                 lea     rax, [r15+1]
.text:0000000000003594                 cmp     r13, rax
.text:0000000000003597                 jbe     short loc_359F
.text:0000000000003599                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000359F
.text:000000000000359F loc_359F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000359F                 add     r15, 2
.text:00000000000035A3                 xor     r10d, r10d
.text:00000000000035A6                 xor     r8d, r8d
.text:00000000000035A9                 jmp     short loc_353D
.text:00000000000035A9 ; ---------------------------------------------------------------------------
.text:00000000000035AB                 align 10h
.text:00000000000035B0
.text:00000000000035B0 loc_35B0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000035B0                 cmp     r15, 1
.text:00000000000035B4                 jz      loc_3419
.text:00000000000035BA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000035BF                 lea     rcx, [rdi+r15]
.text:00000000000035C3                 lea     rdx, [rdi+r14+1]
.text:00000000000035C8                 lea     r8, [rcx+r14]
.text:00000000000035CC                 jmp     short loc_35DD
.text:00000000000035CC ; ---------------------------------------------------------------------------
.text:00000000000035CE                 align 10h
.text:00000000000035D0
.text:00000000000035D0 loc_35D0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000035D0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000035D0                 add     rdx, 1
.text:00000000000035D4                 cmp     r8, rdx
.text:00000000000035D7                 jz      loc_3419
.text:00000000000035DD
.text:00000000000035DD loc_35DD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000035DD                 movzx   ecx, byte ptr [rdx]
.text:00000000000035E0                 sub     ecx, 5Bh ; '['
.text:00000000000035E3                 cmp     cl, 21h ; '!'
.text:00000000000035E6                 ja      short loc_35D0
.text:00000000000035E8                 mov     esi, 1
.text:00000000000035ED                 shl     rsi, cl
.text:00000000000035F0                 mov     rcx, rsi
.text:00000000000035F3                 mov     rsi, 20000002Bh
.text:00000000000035FD                 test    rcx, rsi
.text:0000000000003600                 jz      short loc_35D0
.text:0000000000003602                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003607                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000360C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003611                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003619
.text:0000000000003619 loc_3619:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003619                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003619                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000361E                 jz      short loc_3630
.text:0000000000003620                 test    al, al
.text:0000000000003622                 mov     eax, 4
.text:0000000000003627                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000362C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003630
.text:0000000000003630 loc_3630:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003630                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003630                 sub     rsp, 8
.text:0000000000003634                 mov     rcx, rbp
.text:0000000000003637                 mov     rsi, r13
.text:000000000000363A                 push    [rsp+0F0h+var_88]
.text:000000000000363E                 push    [rsp+0F8h+var_80]
.text:0000000000003642                 mov     rdi, r14
.text:0000000000003645                 push    0
.text:0000000000003647                 mov     r9d, [rsp+108h+var_70]
.text:000000000000364F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003654                 mov     rdx, [rsp+108h+s]
.text:0000000000003659                 and     r9d, 0FFFFFFFDh
.text:000000000000365D                 call    quotearg_buffer_restyled
.text:0000000000003662                 add     rsp, 20h
.text:0000000000003666                 mov     r15, rax
.text:0000000000003669
.text:0000000000003669 loc_3669:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003669                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003669                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003671                 xor     rbx, fs:28h
.text:000000000000367A                 mov     rax, r15
.text:000000000000367D                 jnz     loc_3C83
.text:0000000000003683                 add     rsp, 0B8h
.text:000000000000368A                 pop     rbx
.text:000000000000368B                 pop     rbp
.text:000000000000368C                 pop     r12
.text:000000000000368E                 pop     r13
.text:0000000000003690                 pop     r14
.text:0000000000003692                 pop     r15
.text:0000000000003694                 retn
.text:0000000000003694 ; ---------------------------------------------------------------------------
.text:0000000000003695                 align 8
.text:0000000000003698
.text:0000000000003698 loc_3698:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003698                 mov     rbp, r11
.text:000000000000369B                 jmp     loc_3619
.text:00000000000036A0 ; ---------------------------------------------------------------------------
.text:00000000000036A0
.text:00000000000036A0 loc_36A0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:00000000000036A0                                         ; quotearg_buffer_restyled+81C↑j
.text:00000000000036A0                 cmp     r13, r15
.text:00000000000036A3                 jbe     short loc_36AA
.text:00000000000036A5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000036AA
.text:00000000000036AA loc_36AA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:00000000000036AA                 lea     rax, [r15+1]
.text:00000000000036AE                 cmp     r13, rax
.text:00000000000036B1                 jbe     short loc_36B9
.text:00000000000036B3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000036B9
.text:00000000000036B9 loc_36B9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000036B9                 lea     rax, [r15+2]
.text:00000000000036BD                 cmp     r13, rax
.text:00000000000036C0                 jbe     loc_3CB2
.text:00000000000036C6                 mov     rdx, r13
.text:00000000000036C9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000036CF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000036D4                 jmp     loc_32B2
.text:00000000000036D9 ; ---------------------------------------------------------------------------
.text:00000000000036D9
.text:00000000000036D9 loc_36D9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:00000000000036D9                 mov     eax, r12d
.text:00000000000036DC                 mov     ebx, 30h ; '0'
.text:00000000000036E1                 xor     r12d, r12d
.text:00000000000036E4                 jmp     loc_2CE9
.text:00000000000036E9 ; ---------------------------------------------------------------------------
.text:00000000000036E9
.text:00000000000036E9 loc_36E9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000036E9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000036EF                 jmp     loc_30B9
.text:00000000000036F4 ; ---------------------------------------------------------------------------
.text:00000000000036F4
.text:00000000000036F4 loc_36F4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000036F4                                         ; DATA XREF: .rodata:jpt_2B21↓o
.text:00000000000036F4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000036F6                 jnz     loc_2B23        ; jumptable 00000000000121F1 case 1
.text:00000000000036FC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003701
.text:0000000000003701 loc_3701:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003701                 test    r13, r13
.text:0000000000003704                 jnz     loc_3C9A
.text:000000000000370A                 lea     rax, asc_5F7D   ; "'"
.text:0000000000003711                 mov     [rsp+0E8h+var_98], 0
.text:000000000000371A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000371F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003724                 xor     r12d, r12d
.text:0000000000003727                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000372C                 mov     [rsp+0E8h+n], 1
.text:0000000000003735                 mov     [rsp+0E8h+s2], rax
.text:000000000000373A                 mov     r15d, 1
.text:0000000000003740                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003748                 jmp     loc_2B63
.text:0000000000003748 ; ---------------------------------------------------------------------------
.text:000000000000374D                 align 10h
.text:0000000000003750
.text:0000000000003750 loc_3750:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003750                                         ; DATA XREF: .rodata:jpt_2B21↓o
.text:0000000000003750                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003752                 jnz     loc_3B4D
.text:0000000000003758                 test    r13, r13
.text:000000000000375B                 jz      loc_3986
.text:0000000000003761                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003765                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000376A                 xor     r12d, r12d
.text:000000000000376D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003772                 mov     [rsp+0E8h+var_98], 0
.text:000000000000377B
.text:000000000000377B loc_377B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000377B                 lea     rax, unk_5F7B
.text:0000000000003782                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003787                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000378C                 mov     [rsp+0E8h+n], 1
.text:0000000000003795                 mov     r15d, 1
.text:000000000000379B                 mov     [rsp+0E8h+s2], rax
.text:00000000000037A0                 jmp     loc_2B63
.text:00000000000037A5 ; ---------------------------------------------------------------------------
.text:00000000000037A5
.text:00000000000037A5 loc_37A5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000037A5                                         ; DATA XREF: .rodata:jpt_2B21↓o
.text:00000000000037A5                 lea     rax, unk_5F7B   ; jumptable 00000000000121F1 case 6
.text:00000000000037AC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000037B1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000037B6                 xor     r12d, r12d
.text:00000000000037B9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000037C2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000037C7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000037CC                 mov     [rsp+0E8h+n], 1
.text:00000000000037D5                 xor     r15d, r15d
.text:00000000000037D8                 mov     [rsp+0E8h+s2], rax
.text:00000000000037DD                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000037E5                 jmp     loc_2B63
.text:00000000000037EA ; ---------------------------------------------------------------------------
.text:00000000000037EA
.text:00000000000037EA loc_37EA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000037EA                                         ; DATA XREF: .rodata:jpt_2B21↓o
.text:00000000000037EA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000037EF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000037F4                 xor     r12d, r12d
.text:00000000000037F7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003800                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003805                 xor     r15d, r15d
.text:0000000000003808                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000380D                 mov     [rsp+0E8h+n], 0
.text:0000000000003816                 mov     [rsp+0E8h+s2], 0
.text:000000000000381F                 jmp     loc_2B63
.text:0000000000003824 ; ---------------------------------------------------------------------------
.text:0000000000003824
.text:0000000000003824 loc_3824:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003824                                         ; DATA XREF: .rodata:jpt_2B21↓o
.text:0000000000003824                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003829                 jz      short loc_3881
.text:000000000000382B                 lea     rsi, asc_5F7F   ; "`"
.text:0000000000003832                 xor     edi, edi        ; domainname
.text:0000000000003834                 mov     edx, 5          ; category
.text:0000000000003839                 call    _dcgettext
.text:000000000000383E                 mov     rcx, rax
.text:0000000000003841                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003846                 lea     rax, asc_5F7F   ; "`"
.text:000000000000384D                 cmp     rcx, rax
.text:0000000000003850                 jz      loc_3BEE
.text:0000000000003856
.text:0000000000003856 loc_3856:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003856                 lea     rsi, asc_5F7D   ; "'"
.text:000000000000385D                 xor     edi, edi        ; domainname
.text:000000000000385F                 mov     edx, 5          ; category
.text:0000000000003864                 call    _dcgettext
.text:0000000000003869                 mov     rcx, rax
.text:000000000000386C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003871                 lea     rax, asc_5F7D   ; "'"
.text:0000000000003878                 cmp     rcx, rax
.text:000000000000387B                 jz      loc_3C04
.text:0000000000003881
.text:0000000000003881 loc_3881:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003881                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003881                 xor     r15d, r15d
.text:0000000000003884                 test    ebx, ebx
.text:0000000000003886                 jz      loc_3A4D
.text:000000000000388C
.text:000000000000388C loc_388C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000388C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000388C                 test    ebx, ebx
.text:000000000000388E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003893                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003898                 xor     r12d, r12d
.text:000000000000389B                 mov     rdi, rbx        ; s
.text:000000000000389E                 call    _strlen
.text:00000000000038A3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000038A8                 mov     [rsp+0E8h+n], rax
.text:00000000000038AD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000038B2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000038B7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000038C0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000038C5                 jmp     loc_2B63
.text:00000000000038CA ; ---------------------------------------------------------------------------
.text:00000000000038CA
.text:00000000000038CA loc_38CA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000038CA                                         ; DATA XREF: .rodata:jpt_2B21↓o
.text:00000000000038CA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000038CF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000038D4                 xor     r12d, r12d
.text:00000000000038D7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000038E0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000038E5                 xor     r15d, r15d
.text:00000000000038E8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000038ED                 mov     [rsp+0E8h+n], 0
.text:00000000000038F6                 mov     [rsp+0E8h+s2], 0
.text:00000000000038FF                 jmp     loc_2B63
.text:0000000000003904 ; ---------------------------------------------------------------------------
.text:0000000000003904
.text:0000000000003904 loc_3904:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003904                                         ; DATA XREF: .rodata:jpt_2B21↓o
.text:0000000000003904                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003909                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000390E                 xor     r12d, r12d
.text:0000000000003911                 mov     [rsp+0E8h+var_98], 0
.text:000000000000391A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000391F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003924                 jmp     loc_2B43
.text:0000000000003929 ; ---------------------------------------------------------------------------
.text:0000000000003929
.text:0000000000003929 loc_3929:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003929                 cmp     r13, r15
.text:000000000000392C                 jbe     short loc_3933
.text:000000000000392E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003933
.text:0000000000003933 loc_3933:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003933                 lea     rax, [rcx+2]
.text:0000000000003937                 cmp     r13, rax
.text:000000000000393A                 jbe     short loc_3942
.text:000000000000393C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003942
.text:0000000000003942 loc_3942:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003942                 mov     eax, r12d
.text:0000000000003945                 lea     r15, [rcx+3]
.text:0000000000003949                 xor     r12d, r12d
.text:000000000000394C                 mov     ebx, 30h ; '0'
.text:0000000000003951                 jmp     loc_2CB8
.text:0000000000003951 ; ---------------------------------------------------------------------------
.text:0000000000003956                 align 20h
.text:0000000000003960
.text:0000000000003960 loc_3960:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003960                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003965                 mov     rbp, r11
.text:0000000000003968                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000396C                 jmp     loc_3619
.text:0000000000003971 ; ---------------------------------------------------------------------------
.text:0000000000003971
.text:0000000000003971 loc_3971:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003971                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003976                 xor     r12d, r12d
.text:0000000000003979                 jmp     loc_3480
.text:000000000000397E ; ---------------------------------------------------------------------------
.text:000000000000397E
.text:000000000000397E loc_397E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000397E                 xor     r10d, r10d
.text:0000000000003981                 jmp     loc_353D
.text:0000000000003986 ; ---------------------------------------------------------------------------
.text:0000000000003986
.text:0000000000003986 loc_3986:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003986                 mov     [rsp+0E8h+var_98], 0
.text:000000000000398F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003994                 xor     r12d, r12d
.text:0000000000003997                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000399C                 jmp     loc_377B
.text:00000000000039A1 ; ---------------------------------------------------------------------------
.text:00000000000039A1
.text:00000000000039A1 loc_39A1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000039A1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000039A6                 mov     rsi, r14
.text:00000000000039A9                 mov     rcx, r13
.text:00000000000039AC                 mov     rax, rbx
.text:00000000000039AF                 mov     rdi, rbx
.text:00000000000039B2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000039B8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000039BD                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000039C5                 cmp     rsi, r11
.text:00000000000039C8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000039CE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000039D6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000039DB                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000039E0                 jnb     short loc_3A08
.text:00000000000039E2                 cmp     byte ptr [rcx], 0
.text:00000000000039E5                 jnz     short loc_39F7
.text:00000000000039E7                 jmp     short loc_3A08
.text:00000000000039E7 ; ---------------------------------------------------------------------------
.text:00000000000039E9                 align 10h
.text:00000000000039F0
.text:00000000000039F0 loc_39F0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000039F0                 cmp     byte ptr [r9+rax], 0
.text:00000000000039F5                 jz      short loc_3A05
.text:00000000000039F7
.text:00000000000039F7 loc_39F7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000039F7                 add     rax, 1
.text:00000000000039FB                 lea     rdx, [rbp+rax+0]
.text:0000000000003A00                 cmp     r11, rdx
.text:0000000000003A03                 ja      short loc_39F0
.text:0000000000003A05
.text:0000000000003A05 loc_3A05:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003A05                 mov     rdi, rax
.text:0000000000003A08
.text:0000000000003A08 loc_3A08:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003A08                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003A08                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003A0D                 xor     r12d, r12d
.text:0000000000003A10                 jmp     loc_3476
.text:0000000000003A15 ; ---------------------------------------------------------------------------
.text:0000000000003A15
.text:0000000000003A15 loc_3A15:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003A15                 mov     rdi, rbx
.text:0000000000003A18                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003A1E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003A23                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003A29                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003A31                 xor     r12d, r12d
.text:0000000000003A34                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003A39                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003A3E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003A43                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003A48                 jmp     loc_3476
.text:0000000000003A4D ; ---------------------------------------------------------------------------
.text:0000000000003A4D
.text:0000000000003A4D loc_3A4D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000003A4D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003A52                 movzx   eax, byte ptr [rdx]
.text:0000000000003A55                 test    al, al
.text:0000000000003A57                 jz      loc_388C
.text:0000000000003A5D                 nop     dword ptr [rax]
.text:0000000000003A60
.text:0000000000003A60 loc_3A60:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003A60                 cmp     r13, r15
.text:0000000000003A63                 jbe     short loc_3A69
.text:0000000000003A65                 mov     [r14+r15], al
.text:0000000000003A69
.text:0000000000003A69 loc_3A69:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003A69                 add     r15, 1
.text:0000000000003A6D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003A72                 test    al, al
.text:0000000000003A74                 jnz     short loc_3A60
.text:0000000000003A76                 jmp     loc_388C
.text:0000000000003A7B ; ---------------------------------------------------------------------------
.text:0000000000003A7B
.text:0000000000003A7B loc_3A7B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000003A7B                 mov     eax, edx
.text:0000000000003A7D                 jmp     loc_2FD7
.text:0000000000003A82 ; ---------------------------------------------------------------------------
.text:0000000000003A82
.text:0000000000003A82 loc_3A82:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003A82                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003A86                 cmp     bl, 3Eh ; '>'
.text:0000000000003A89                 ja      loc_3300
.text:0000000000003A8F                 mov     rax, 7000A38200000000h
.text:0000000000003A99                 bt      rax, rbx
.text:0000000000003A9D                 jnb     loc_3300
.text:0000000000003AA3                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003AA8                 jnz     loc_3C92
.text:0000000000003AAE                 cmp     r13, r15
.text:0000000000003AB1                 jbe     short loc_3AB8
.text:0000000000003AB3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003AB8
.text:0000000000003AB8 loc_3AB8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003AB8                 lea     rax, [r15+1]
.text:0000000000003ABC                 cmp     r13, rax
.text:0000000000003ABF                 jbe     short loc_3AC7
.text:0000000000003AC1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003AC7
.text:0000000000003AC7 loc_3AC7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003AC7                 lea     rax, [r15+2]
.text:0000000000003ACB                 cmp     r13, rax
.text:0000000000003ACE                 jbe     short loc_3AD6
.text:0000000000003AD0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003AD6
.text:0000000000003AD6 loc_3AD6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003AD6                 lea     rax, [r15+3]
.text:0000000000003ADA                 cmp     r13, rax
.text:0000000000003ADD                 jbe     short loc_3AE5
.text:0000000000003ADF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003AE5
.text:0000000000003AE5 loc_3AE5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003AE5                 add     r15, 4
.text:0000000000003AE9                 xor     edx, edx
.text:0000000000003AEB                 xor     r12d, r12d
.text:0000000000003AEE                 xor     eax, eax
.text:0000000000003AF0                 mov     rbp, rcx
.text:0000000000003AF3                 jmp     loc_2CB8
.text:0000000000003AF8 ; ---------------------------------------------------------------------------
.text:0000000000003AF8
.text:0000000000003AF8 loc_3AF8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003AF8                                         ; DATA XREF: .rodata:jpt_2B21↓o
.text:0000000000003AF8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003AFA                 jz      loc_3C88
.text:0000000000003B00                 lea     rax, asc_5F7D   ; "'"
.text:0000000000003B07                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003B0C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B11                 xor     r12d, r12d
.text:0000000000003B14                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B1D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003B22                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003B27                 mov     [rsp+0E8h+n], 1
.text:0000000000003B30                 xor     r15d, r15d
.text:0000000000003B33                 mov     [rsp+0E8h+s2], rax
.text:0000000000003B38                 jmp     loc_2B63
.text:0000000000003B38 ; ---------------------------------------------------------------------------
.text:0000000000003B3D                 align 20h
.text:0000000000003B40
.text:0000000000003B40 loc_3B40:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003B40                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003B40                 mov     rbp, r11
.text:0000000000003B43                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003B48                 jmp     loc_3619
.text:0000000000003B4D ; ---------------------------------------------------------------------------
.text:0000000000003B4D
.text:0000000000003B4D loc_3B4D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000003B4D                 lea     rax, unk_5F7B
.text:0000000000003B54                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003B59                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B5E                 xor     r12d, r12d
.text:0000000000003B61                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B6A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003B6F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003B74                 mov     [rsp+0E8h+n], 1
.text:0000000000003B7D                 xor     r15d, r15d
.text:0000000000003B80                 mov     [rsp+0E8h+s2], rax
.text:0000000000003B85                 jmp     loc_2B63
.text:0000000000003B8A ; ---------------------------------------------------------------------------
.text:0000000000003B8A
.text:0000000000003B8A loc_3B8A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000003B8A                 mov     eax, edx
.text:0000000000003B8C
.text:0000000000003B8C loc_3B8C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000003B8C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000003B8C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003B91                 test    rbx, rbx
.text:0000000000003B94                 jz      short loc_3BC2
.text:0000000000003B96                 test    al, al
.text:0000000000003B98                 jz      short loc_3BC2
.text:0000000000003B9A                 movzx   ecx, byte ptr [rbx]
.text:0000000000003B9D                 mov     rax, rbx
.text:0000000000003BA0                 test    cl, cl
.text:0000000000003BA2                 jz      short loc_3BC2
.text:0000000000003BA4                 mov     rdx, r15
.text:0000000000003BA7                 sub     rax, r15
.text:0000000000003BAA
.text:0000000000003BAA loc_3BAA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000003BAA                 cmp     r13, rdx
.text:0000000000003BAD                 jbe     short loc_3BB3
.text:0000000000003BAF                 mov     [r14+rdx], cl
.text:0000000000003BB3
.text:0000000000003BB3 loc_3BB3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003BB3                 add     rdx, 1
.text:0000000000003BB7                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000003BBB                 test    cl, cl
.text:0000000000003BBD                 jnz     short loc_3BAA
.text:0000000000003BBF                 mov     r15, rdx
.text:0000000000003BC2
.text:0000000000003BC2 loc_3BC2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003BC2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003BC2                 cmp     r13, r15
.text:0000000000003BC5                 jbe     loc_3669
.text:0000000000003BCB                 mov     byte ptr [r14+r15], 0
.text:0000000000003BD0                 jmp     loc_3669
.text:0000000000003BD5 ; ---------------------------------------------------------------------------
.text:0000000000003BD5
.text:0000000000003BD5 loc_3BD5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003BD5                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003BDA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003BDF                 mov     rbp, r11
.text:0000000000003BE2                 setz    al
.text:0000000000003BE5                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003BE9                 jmp     loc_3619
.text:0000000000003BEE ; ---------------------------------------------------------------------------
.text:0000000000003BEE
.text:0000000000003BEE loc_3BEE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000003BEE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003BF2                 mov     rdi, rcx
.text:0000000000003BF5                 call    gettext_quote
.text:0000000000003BFA                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003BFF                 jmp     loc_3856
.text:0000000000003C04 ; ---------------------------------------------------------------------------
.text:0000000000003C04
.text:0000000000003C04 loc_3C04:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003C04                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003C08                 mov     rdi, rcx
.text:0000000000003C0B                 call    gettext_quote
.text:0000000000003C10                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003C15                 jmp     loc_3881
.text:0000000000003C1A ; ---------------------------------------------------------------------------
.text:0000000000003C1A
.text:0000000000003C1A loc_3C1A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000003C1A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003C1F                 mov     rbp, r11
.text:0000000000003C22                 mov     eax, edx
.text:0000000000003C24                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003C28                 jmp     loc_3619
.text:0000000000003C2D ; ---------------------------------------------------------------------------
.text:0000000000003C2D
.text:0000000000003C2D loc_3C2D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000003C2D                 sub     rsp, 8
.text:0000000000003C31                 mov     r8d, 5
.text:0000000000003C37                 mov     rcx, r11
.text:0000000000003C3A                 push    [rsp+0F0h+var_88]
.text:0000000000003C3E                 push    [rsp+0F8h+var_80]
.text:0000000000003C42                 mov     rdi, r14
.text:0000000000003C45                 push    [rsp+100h+var_C8]
.text:0000000000003C49                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003C51                 mov     rdx, [rsp+108h+s]
.text:0000000000003C56                 mov     rsi, [rsp+108h+var_98]
.text:0000000000003C5B                 call    quotearg_buffer_restyled
.text:0000000000003C60                 add     rsp, 20h
.text:0000000000003C64                 mov     r15, rax
.text:0000000000003C67                 jmp     loc_3669
.text:0000000000003C6C ; ---------------------------------------------------------------------------
.text:0000000000003C6C
.text:0000000000003C6C loc_3C6C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000003C6C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003C71                 jmp     loc_3B8C
.text:0000000000003C76 ; ---------------------------------------------------------------------------
.text:0000000000003C76
.text:0000000000003C76 loc_3C76:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003C76                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003C7E                 jmp     loc_3619
.text:0000000000003C83 ; ---------------------------------------------------------------------------
.text:0000000000003C83
.text:0000000000003C83 loc_3C83:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003C83                 call    ___stack_chk_fail
.text:0000000000003C88 ; ---------------------------------------------------------------------------
.text:0000000000003C88
.text:0000000000003C88 loc_3C88:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003C88                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003C8D                 jmp     loc_3701
.text:0000000000003C92 ; ---------------------------------------------------------------------------
.text:0000000000003C92
.text:0000000000003C92 loc_3C92:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003C92                 mov     rbp, r11
.text:0000000000003C95                 jmp     loc_3630
.text:0000000000003C9A ; ---------------------------------------------------------------------------
.text:0000000000003C9A
.text:0000000000003C9A loc_3C9A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000003C9A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003C9F                 xor     eax, eax
.text:0000000000003CA1                 xor     r12d, r12d
.text:0000000000003CA4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CAD                 jmp     loc_3254
.text:0000000000003CB2 ; ---------------------------------------------------------------------------
.text:0000000000003CB2
.text:0000000000003CB2 loc_3CB2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003CB2                 mov     rdx, r13
.text:0000000000003CB5                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003CBA                 jmp     loc_32B2
.text:0000000000003CBF ; ---------------------------------------------------------------------------
.text:0000000000003CBF
.text:0000000000003CBF def_2B21:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000003CBF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000003CBF ; } // starts at 2A90
.text:0000000000003CBF quotearg_buffer_restyled endp
.text:0000000000003CBF
.text:0000000000003CBF ; ---------------------------------------------------------------------------
.text:0000000000003CC4                 align 10h
.text:0000000000003CD0
.text:0000000000003CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CD0
.text:0000000000003CD0
.text:0000000000003CD0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003CD0                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003CD0
.text:0000000000003CD0 var_50          = qword ptr -50h
.text:0000000000003CD0 var_48          = qword ptr -48h
.text:0000000000003CD0 var_40          = dword ptr -40h
.text:0000000000003CD0 var_3C          = dword ptr -3Ch
.text:0000000000003CD0
.text:0000000000003CD0 ; __unwind {
.text:0000000000003CD0                 push    r15
.text:0000000000003CD2                 push    r14
.text:0000000000003CD4                 movsxd  r15, edi
.text:0000000000003CD7                 push    r13
.text:0000000000003CD9                 push    r12
.text:0000000000003CDB                 mov     r14, rdx
.text:0000000000003CDE                 push    rbp
.text:0000000000003CDF                 push    rbx
.text:0000000000003CE0                 mov     rbp, rcx
.text:0000000000003CE3                 sub     rsp, 28h
.text:0000000000003CE7                 mov     [rsp+58h+var_50], rsi
.text:0000000000003CEC                 call    ___errno_location
.text:0000000000003CF1                 mov     r13, rax
.text:0000000000003CF4                 mov     eax, [rax]
.text:0000000000003CF6                 test    r15d, r15d
.text:0000000000003CF9                 mov     rbx, cs:slotvec
.text:0000000000003D00                 mov     [rsp+58h+var_40], eax
.text:0000000000003D04                 js      loc_3E71
.text:0000000000003D0A                 cmp     cs:nslots, r15d
.text:0000000000003D11                 jg      short loc_3D75
.text:0000000000003D13                 cmp     r15d, 7FFFFFFFh
.text:0000000000003D1A                 jz      loc_3E76
.text:0000000000003D20                 lea     r12d, [r15+1]
.text:0000000000003D24                 lea     rax, slotvec0
.text:0000000000003D2B                 movsxd  rsi, r12d
.text:0000000000003D2E                 shl     rsi, 4
.text:0000000000003D32                 cmp     rbx, rax
.text:0000000000003D35                 jz      loc_3E50
.text:0000000000003D3B                 mov     rdi, rbx
.text:0000000000003D3E                 call    xrealloc
.text:0000000000003D43                 mov     rbx, rax
.text:0000000000003D46                 mov     cs:slotvec, rax
.text:0000000000003D4D
.text:0000000000003D4D loc_3D4D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000003D4D                 movsxd  rdi, cs:nslots
.text:0000000000003D54                 mov     edx, r12d
.text:0000000000003D57                 xor     esi, esi        ; c
.text:0000000000003D59                 sub     edx, edi
.text:0000000000003D5B                 shl     rdi, 4
.text:0000000000003D5F                 movsxd  rdx, edx
.text:0000000000003D62                 add     rdi, rbx        ; s
.text:0000000000003D65                 shl     rdx, 4          ; n
.text:0000000000003D69                 call    _memset
.text:0000000000003D6E                 mov     cs:nslots, r12d
.text:0000000000003D75
.text:0000000000003D75 loc_3D75:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003D75                 mov     eax, [rbp+4]
.text:0000000000003D78                 shl     r15, 4
.text:0000000000003D7C                 sub     rsp, 8
.text:0000000000003D80                 add     rbx, r15
.text:0000000000003D83                 lea     r15, [rbp+8]
.text:0000000000003D87                 mov     r8d, [rbp+0]
.text:0000000000003D8B                 mov     r11, [rbx]
.text:0000000000003D8E                 mov     r12, [rbx+8]
.text:0000000000003D92                 mov     rcx, r14
.text:0000000000003D95                 or      eax, 1
.text:0000000000003D98                 mov     [rsp+60h+var_3C], eax
.text:0000000000003D9C                 push    qword ptr [rbp+30h]
.text:0000000000003D9F                 mov     r9d, eax
.text:0000000000003DA2                 push    qword ptr [rbp+28h]
.text:0000000000003DA5                 push    r15
.text:0000000000003DA7                 mov     rsi, r11
.text:0000000000003DAA                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003DAF                 mov     rdi, r12
.text:0000000000003DB2                 mov     [rsp+78h+var_48], r11
.text:0000000000003DB7                 call    quotearg_buffer_restyled
.text:0000000000003DBC                 add     rsp, 20h
.text:0000000000003DC0                 mov     r11, [rsp+58h+var_48]
.text:0000000000003DC5                 cmp     r11, rax
.text:0000000000003DC8                 ja      short loc_3E31
.text:0000000000003DCA                 lea     rsi, [rax+1]
.text:0000000000003DCE                 lea     rax, slot0
.text:0000000000003DD5                 cmp     r12, rax
.text:0000000000003DD8                 mov     [rbx], rsi
.text:0000000000003DDB                 jz      short loc_3DEF
.text:0000000000003DDD                 mov     rdi, r12        ; ptr
.text:0000000000003DE0                 mov     [rsp+58h+var_48], rsi
.text:0000000000003DE5                 call    _free
.text:0000000000003DEA                 mov     rsi, [rsp+58h+var_48]
.text:0000000000003DEF
.text:0000000000003DEF loc_3DEF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000003DEF                 mov     rdi, rsi
.text:0000000000003DF2                 mov     [rsp+58h+var_48], rsi
.text:0000000000003DF7                 call    xmalloc
.text:0000000000003DFC                 sub     rsp, 8
.text:0000000000003E00                 mov     [rbx+8], rax
.text:0000000000003E04                 mov     r8d, [rbp+0]
.text:0000000000003E08                 push    qword ptr [rbp+30h]
.text:0000000000003E0B                 push    qword ptr [rbp+28h]
.text:0000000000003E0E                 mov     rcx, r14
.text:0000000000003E11                 push    r15
.text:0000000000003E13                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003E18                 mov     rdi, rax
.text:0000000000003E1B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003E20                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003E25                 mov     r12, rax
.text:0000000000003E28                 call    quotearg_buffer_restyled
.text:0000000000003E2D                 add     rsp, 20h
.text:0000000000003E31
.text:0000000000003E31 loc_3E31:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003E31                 mov     eax, [rsp+58h+var_40]
.text:0000000000003E35                 mov     [r13+0], eax
.text:0000000000003E39                 add     rsp, 28h
.text:0000000000003E3D                 mov     rax, r12
.text:0000000000003E40                 pop     rbx
.text:0000000000003E41                 pop     rbp
.text:0000000000003E42                 pop     r12
.text:0000000000003E44                 pop     r13
.text:0000000000003E46                 pop     r14
.text:0000000000003E48                 pop     r15
.text:0000000000003E4A                 retn
.text:0000000000003E4A ; ---------------------------------------------------------------------------
.text:0000000000003E4B                 align 10h
.text:0000000000003E50
.text:0000000000003E50 loc_3E50:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003E50                 xor     edi, edi
.text:0000000000003E52                 call    xrealloc
.text:0000000000003E57                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000003E5F                 mov     rbx, rax
.text:0000000000003E62                 mov     cs:slotvec, rax
.text:0000000000003E69                 movups  xmmword ptr [rax], xmm0
.text:0000000000003E6C                 jmp     loc_3D4D
.text:0000000000003E71 ; ---------------------------------------------------------------------------
.text:0000000000003E71
.text:0000000000003E71 loc_3E71:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003E71                 call    _abort
.text:0000000000003E76 ; ---------------------------------------------------------------------------
.text:0000000000003E76
.text:0000000000003E76 loc_3E76:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003E76                 call    xalloc_die
.text:0000000000003E76 ; } // starts at 3CD0
.text:0000000000003E76 quotearg_n_options endp
.text:0000000000003E76
.text:0000000000003E76 ; ---------------------------------------------------------------------------
.text:0000000000003E7B                 align 20h
.text:0000000000003E80
.text:0000000000003E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E80
.text:0000000000003E80 ; Attributes: info_from_lumina
.text:0000000000003E80
.text:0000000000003E80 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003E80                 public clone_quoting_options
.text:0000000000003E80 clone_quoting_options proc near
.text:0000000000003E80 ; __unwind {
.text:0000000000003E80                 push    r12
.text:0000000000003E82                 push    rbp
.text:0000000000003E83                 push    rbx
.text:0000000000003E84                 mov     rbx, rdi
.text:0000000000003E87                 call    ___errno_location
.text:0000000000003E8C                 mov     r12d, [rax]
.text:0000000000003E8F                 mov     rbp, rax
.text:0000000000003E92                 lea     rax, default_quoting_options
.text:0000000000003E99                 test    rbx, rbx
.text:0000000000003E9C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003EA1                 cmovz   rbx, rax
.text:0000000000003EA5                 mov     rdi, rbx        ; src
.text:0000000000003EA8                 call    xmemdup
.text:0000000000003EAD                 mov     [rbp+0], r12d
.text:0000000000003EB1                 pop     rbx
.text:0000000000003EB2                 pop     rbp
.text:0000000000003EB3                 pop     r12
.text:0000000000003EB5                 retn
.text:0000000000003EB5 ; } // starts at 3E80
.text:0000000000003EB5 clone_quoting_options endp
.text:0000000000003EB5
.text:0000000000003EB5 ; ---------------------------------------------------------------------------
.text:0000000000003EB6                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0
.text:0000000000003EC0                 public get_quoting_style
.text:0000000000003EC0 get_quoting_style proc near
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 lea     rax, default_quoting_options
.text:0000000000003EC7                 test    rdi, rdi
.text:0000000000003ECA                 cmovz   rdi, rax
.text:0000000000003ECE                 mov     eax, [rdi]
.text:0000000000003ED0                 retn
.text:0000000000003ED0 ; } // starts at 3EC0
.text:0000000000003ED0 get_quoting_style endp
.text:0000000000003ED0
.text:0000000000003ED0 ; ---------------------------------------------------------------------------
.text:0000000000003ED1                 align 20h
.text:0000000000003EE0
.text:0000000000003EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EE0
.text:0000000000003EE0
.text:0000000000003EE0                 public set_quoting_style
.text:0000000000003EE0 set_quoting_style proc near
.text:0000000000003EE0 ; __unwind {
.text:0000000000003EE0                 lea     rax, default_quoting_options
.text:0000000000003EE7                 test    rdi, rdi
.text:0000000000003EEA                 cmovz   rdi, rax
.text:0000000000003EEE                 mov     [rdi], esi
.text:0000000000003EF0                 retn
.text:0000000000003EF0 ; } // starts at 3EE0
.text:0000000000003EF0 set_quoting_style endp
.text:0000000000003EF0
.text:0000000000003EF0 ; ---------------------------------------------------------------------------
.text:0000000000003EF1                 align 20h
.text:0000000000003F00
.text:0000000000003F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F00
.text:0000000000003F00 ; Attributes: info_from_lumina
.text:0000000000003F00
.text:0000000000003F00 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003F00                 public set_char_quoting
.text:0000000000003F00 set_char_quoting proc near
.text:0000000000003F00 ; __unwind {
.text:0000000000003F00                 lea     rax, default_quoting_options
.text:0000000000003F07                 test    rdi, rdi
.text:0000000000003F0A                 mov     ecx, esi
.text:0000000000003F0C                 cmovz   rdi, rax
.text:0000000000003F10                 mov     eax, esi
.text:0000000000003F12                 and     ecx, 1Fh
.text:0000000000003F15                 shr     al, 5
.text:0000000000003F18                 movzx   eax, al
.text:0000000000003F1B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003F20                 mov     esi, [rdi]
.text:0000000000003F22                 mov     eax, esi
.text:0000000000003F24                 shr     eax, cl
.text:0000000000003F26                 xor     edx, eax
.text:0000000000003F28                 and     eax, 1
.text:0000000000003F2B                 and     edx, 1
.text:0000000000003F2E                 shl     edx, cl
.text:0000000000003F30                 xor     edx, esi
.text:0000000000003F32                 mov     [rdi], edx
.text:0000000000003F34                 retn
.text:0000000000003F34 ; } // starts at 3F00
.text:0000000000003F34 set_char_quoting endp
.text:0000000000003F34
.text:0000000000003F34 ; ---------------------------------------------------------------------------
.text:0000000000003F35                 align 20h
.text:0000000000003F40
.text:0000000000003F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F40
.text:0000000000003F40
.text:0000000000003F40                 public set_quoting_flags
.text:0000000000003F40 set_quoting_flags proc near
.text:0000000000003F40 ; __unwind {
.text:0000000000003F40                 lea     rax, default_quoting_options
.text:0000000000003F47                 test    rdi, rdi
.text:0000000000003F4A                 cmovz   rdi, rax
.text:0000000000003F4E                 mov     eax, [rdi+4]
.text:0000000000003F51                 mov     [rdi+4], esi
.text:0000000000003F54                 retn
.text:0000000000003F54 ; } // starts at 3F40
.text:0000000000003F54 set_quoting_flags endp
.text:0000000000003F54
.text:0000000000003F54 ; ---------------------------------------------------------------------------
.text:0000000000003F55                 align 20h
.text:0000000000003F60
.text:0000000000003F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F60
.text:0000000000003F60 ; Attributes: info_from_lumina
.text:0000000000003F60
.text:0000000000003F60 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003F60                 public set_custom_quoting
.text:0000000000003F60 set_custom_quoting proc near
.text:0000000000003F60 ; __unwind {
.text:0000000000003F60                 lea     rax, default_quoting_options
.text:0000000000003F67                 test    rdi, rdi
.text:0000000000003F6A                 cmovz   rdi, rax
.text:0000000000003F6E                 test    rsi, rsi
.text:0000000000003F71                 mov     dword ptr [rdi], 0Ah
.text:0000000000003F77                 jz      short loc_3F87
.text:0000000000003F79                 test    rdx, rdx
.text:0000000000003F7C                 jz      short loc_3F87
.text:0000000000003F7E                 mov     [rdi+28h], rsi
.text:0000000000003F82                 mov     [rdi+30h], rdx
.text:0000000000003F86                 retn
.text:0000000000003F87 ; ---------------------------------------------------------------------------
.text:0000000000003F87
.text:0000000000003F87 loc_3F87:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003F87                                         ; set_custom_quoting+1C↑j
.text:0000000000003F87                 sub     rsp, 8
.text:0000000000003F8B                 call    _abort
.text:0000000000003F8B ; } // starts at 3F60
.text:0000000000003F8B set_custom_quoting endp
.text:0000000000003F8B
.text:0000000000003F90
.text:0000000000003F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F90
.text:0000000000003F90 ; Attributes: info_from_lumina
.text:0000000000003F90
.text:0000000000003F90 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003F90                 public quotearg_buffer
.text:0000000000003F90 quotearg_buffer proc near
.text:0000000000003F90
.text:0000000000003F90 var_40          = qword ptr -40h
.text:0000000000003F90
.text:0000000000003F90 ; __unwind {
.text:0000000000003F90                 push    r15
.text:0000000000003F92                 push    r14
.text:0000000000003F94                 lea     rax, default_quoting_options
.text:0000000000003F9B                 push    r13
.text:0000000000003F9D                 push    r12
.text:0000000000003F9F                 mov     r13, rdi
.text:0000000000003FA2                 push    rbp
.text:0000000000003FA3                 push    rbx
.text:0000000000003FA4                 mov     rbx, r8
.text:0000000000003FA7                 mov     r14, rsi
.text:0000000000003FAA                 mov     r15, rdx
.text:0000000000003FAD                 sub     rsp, 18h
.text:0000000000003FB1                 test    r8, r8
.text:0000000000003FB4                 cmovz   rbx, rax
.text:0000000000003FB8                 mov     [rsp+48h+var_40], rcx
.text:0000000000003FBD                 call    ___errno_location
.text:0000000000003FC2                 mov     r12d, [rax]
.text:0000000000003FC5                 mov     rbp, rax
.text:0000000000003FC8                 lea     rax, [rbx+8]
.text:0000000000003FCC                 sub     rsp, 8
.text:0000000000003FD0                 mov     r9d, [rbx+4]
.text:0000000000003FD4                 push    qword ptr [rbx+30h]
.text:0000000000003FD7                 mov     r8d, [rbx]
.text:0000000000003FDA                 push    qword ptr [rbx+28h]
.text:0000000000003FDD                 mov     rdx, r15
.text:0000000000003FE0                 push    rax
.text:0000000000003FE1                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003FE6                 mov     rsi, r14
.text:0000000000003FE9                 mov     rdi, r13
.text:0000000000003FEC                 call    quotearg_buffer_restyled
.text:0000000000003FF1                 mov     [rbp+0], r12d
.text:0000000000003FF5                 add     rsp, 38h
.text:0000000000003FF9                 pop     rbx
.text:0000000000003FFA                 pop     rbp
.text:0000000000003FFB                 pop     r12
.text:0000000000003FFD                 pop     r13
.text:0000000000003FFF                 pop     r14
.text:0000000000004001                 pop     r15
.text:0000000000004003                 retn
.text:0000000000004003 ; } // starts at 3F90
.text:0000000000004003 quotearg_buffer endp
.text:0000000000004003
.text:0000000000004003 ; ---------------------------------------------------------------------------
.text:0000000000004004                 align 10h
.text:0000000000004010
.text:0000000000004010 ; =============== S U B R O U T I N E =======================================
.text:0000000000004010
.text:0000000000004010 ; Attributes: info_from_lumina
.text:0000000000004010
.text:0000000000004010 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004010                 public quotearg_alloc_mem
.text:0000000000004010 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004010
.text:0000000000004010 var_5C          = dword ptr -5Ch
.text:0000000000004010 var_58          = qword ptr -58h
.text:0000000000004010 var_50          = qword ptr -50h
.text:0000000000004010 var_48          = qword ptr -48h
.text:0000000000004010 var_40          = qword ptr -40h
.text:0000000000004010
.text:0000000000004010 ; __unwind {
.text:0000000000004010                 push    r15
.text:0000000000004012                 push    r14
.text:0000000000004014                 lea     rax, default_quoting_options
.text:000000000000401B                 push    r13
.text:000000000000401D                 push    r12
.text:000000000000401F                 mov     r12, rdx
.text:0000000000004022                 push    rbp
.text:0000000000004023                 push    rbx
.text:0000000000004024                 mov     rbx, rcx
.text:0000000000004027                 mov     r14, rdi
.text:000000000000402A                 mov     r15, rsi
.text:000000000000402D                 sub     rsp, 38h
.text:0000000000004031                 test    rcx, rcx
.text:0000000000004034                 cmovz   rbx, rax
.text:0000000000004038                 xor     ebp, ebp
.text:000000000000403A                 call    ___errno_location
.text:000000000000403F                 test    r12, r12
.text:0000000000004042                 mov     r13, rax
.text:0000000000004045                 mov     eax, [rax]
.text:0000000000004047                 setz    bpl
.text:000000000000404B                 or      ebp, [rbx+4]
.text:000000000000404E                 lea     r10, [rbx+8]
.text:0000000000004052                 sub     rsp, 8
.text:0000000000004056                 mov     r8d, [rbx]
.text:0000000000004059                 mov     rcx, r15
.text:000000000000405C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004060                 push    qword ptr [rbx+30h]
.text:0000000000004063                 mov     rdx, r14
.text:0000000000004066                 push    qword ptr [rbx+28h]
.text:0000000000004069                 push    r10
.text:000000000000406B                 xor     esi, esi
.text:000000000000406D                 mov     r9d, ebp
.text:0000000000004070                 xor     edi, edi
.text:0000000000004072                 mov     [rsp+88h+var_48], r10
.text:0000000000004077                 call    quotearg_buffer_restyled
.text:000000000000407C                 lea     rsi, [rax+1]
.text:0000000000004080                 mov     [rsp+88h+var_40], rax
.text:0000000000004085                 add     rsp, 20h
.text:0000000000004089                 mov     rdi, rsi
.text:000000000000408C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004091                 call    xmalloc
.text:0000000000004096                 mov     [rsp+68h+var_58], rax
.text:000000000000409B                 sub     rsp, 8
.text:000000000000409F                 push    qword ptr [rbx+30h]
.text:00000000000040A2                 push    qword ptr [rbx+28h]
.text:00000000000040A5                 mov     r10, [rsp+80h+var_48]
.text:00000000000040AA                 mov     r9d, ebp
.text:00000000000040AD                 mov     r8d, [rbx]
.text:00000000000040B0                 mov     rcx, r15
.text:00000000000040B3                 mov     rdx, r14
.text:00000000000040B6                 mov     rdi, rax
.text:00000000000040B9                 push    r10
.text:00000000000040BB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000040C0                 call    quotearg_buffer_restyled
.text:00000000000040C5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000040C9                 add     rsp, 20h
.text:00000000000040CD                 test    r12, r12
.text:00000000000040D0                 mov     [r13+0], eax
.text:00000000000040D4                 jz      short loc_40DF
.text:00000000000040D6                 mov     r11, [rsp+68h+var_40]
.text:00000000000040DB                 mov     [r12], r11
.text:00000000000040DF
.text:00000000000040DF loc_40DF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000040DF                 mov     rax, [rsp+68h+var_58]
.text:00000000000040E4                 add     rsp, 38h
.text:00000000000040E8                 pop     rbx
.text:00000000000040E9                 pop     rbp
.text:00000000000040EA                 pop     r12
.text:00000000000040EC                 pop     r13
.text:00000000000040EE                 pop     r14
.text:00000000000040F0                 pop     r15
.text:00000000000040F2                 retn
.text:00000000000040F2 ; } // starts at 4010
.text:00000000000040F2 quotearg_alloc_mem endp
.text:00000000000040F2
.text:00000000000040F2 ; ---------------------------------------------------------------------------
.text:00000000000040F3                 align 20h
.text:0000000000004100
.text:0000000000004100 ; =============== S U B R O U T I N E =======================================
.text:0000000000004100
.text:0000000000004100
.text:0000000000004100                 public quotearg_alloc
.text:0000000000004100 quotearg_alloc  proc near
.text:0000000000004100 ; __unwind {
.text:0000000000004100                 mov     rcx, rdx
.text:0000000000004103                 xor     edx, edx
.text:0000000000004105                 jmp     quotearg_alloc_mem
.text:0000000000004105 ; } // starts at 4100
.text:0000000000004105 quotearg_alloc  endp
.text:0000000000004105
.text:0000000000004105 ; ---------------------------------------------------------------------------
.text:000000000000410A                 align 10h
.text:0000000000004110
.text:0000000000004110 ; =============== S U B R O U T I N E =======================================
.text:0000000000004110
.text:0000000000004110 ; Attributes: info_from_lumina
.text:0000000000004110
.text:0000000000004110 ; void __cdecl quotearg_free()
.text:0000000000004110                 public quotearg_free
.text:0000000000004110 quotearg_free   proc near
.text:0000000000004110 ; __unwind {
.text:0000000000004110                 mov     eax, cs:nslots
.text:0000000000004116                 push    r12
.text:0000000000004118                 mov     r12, cs:slotvec
.text:000000000000411F                 push    rbp
.text:0000000000004120                 push    rbx
.text:0000000000004121                 cmp     eax, 1
.text:0000000000004124                 jle     short loc_4151
.text:0000000000004126                 sub     eax, 2
.text:0000000000004129                 lea     rbx, [r12+18h]
.text:000000000000412E                 shl     rax, 4
.text:0000000000004132                 lea     rbp, [r12+rax+28h]
.text:0000000000004137                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004140
.text:0000000000004140 loc_4140:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004140                 mov     rdi, [rbx]      ; ptr
.text:0000000000004143                 add     rbx, 10h
.text:0000000000004147                 call    _free
.text:000000000000414C                 cmp     rbx, rbp
.text:000000000000414F                 jnz     short loc_4140
.text:0000000000004151
.text:0000000000004151 loc_4151:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004151                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004156                 lea     rbx, slot0
.text:000000000000415D                 cmp     rdi, rbx
.text:0000000000004160                 jz      short loc_4179
.text:0000000000004162                 call    _free
.text:0000000000004167                 mov     cs:slotvec0, 100h
.text:0000000000004172                 mov     cs:off_208078, rbx
.text:0000000000004179
.text:0000000000004179 loc_4179:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004179                 lea     rbx, slotvec0
.text:0000000000004180                 cmp     r12, rbx
.text:0000000000004183                 jz      short loc_4194
.text:0000000000004185                 mov     rdi, r12        ; ptr
.text:0000000000004188                 call    _free
.text:000000000000418D                 mov     cs:slotvec, rbx
.text:0000000000004194
.text:0000000000004194 loc_4194:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004194                 pop     rbx
.text:0000000000004195                 mov     cs:nslots, 1
.text:000000000000419F                 pop     rbp
.text:00000000000041A0                 pop     r12
.text:00000000000041A2                 retn
.text:00000000000041A2 ; } // starts at 4110
.text:00000000000041A2 quotearg_free   endp
.text:00000000000041A2
.text:00000000000041A2 ; ---------------------------------------------------------------------------
.text:00000000000041A3                 align 10h
.text:00000000000041B0
.text:00000000000041B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041B0
.text:00000000000041B0
.text:00000000000041B0                 public quotearg_n
.text:00000000000041B0 quotearg_n      proc near
.text:00000000000041B0 ; __unwind {
.text:00000000000041B0                 lea     rcx, default_quoting_options
.text:00000000000041B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000041BE                 jmp     quotearg_n_options
.text:00000000000041BE ; } // starts at 41B0
.text:00000000000041BE quotearg_n      endp
.text:00000000000041BE
.text:00000000000041BE ; ---------------------------------------------------------------------------
.text:00000000000041C3                 align 10h
.text:00000000000041D0
.text:00000000000041D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041D0
.text:00000000000041D0
.text:00000000000041D0                 public quotearg_n_mem
.text:00000000000041D0 quotearg_n_mem  proc near
.text:00000000000041D0 ; __unwind {
.text:00000000000041D0                 lea     rcx, default_quoting_options
.text:00000000000041D7                 jmp     quotearg_n_options
.text:00000000000041D7 ; } // starts at 41D0
.text:00000000000041D7 quotearg_n_mem  endp
.text:00000000000041D7
.text:00000000000041D7 ; ---------------------------------------------------------------------------
.text:00000000000041DC                 align 20h
.text:00000000000041E0
.text:00000000000041E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041E0
.text:00000000000041E0
.text:00000000000041E0                 public quotearg
.text:00000000000041E0 quotearg        proc near
.text:00000000000041E0 ; __unwind {
.text:00000000000041E0                 lea     rcx, default_quoting_options
.text:00000000000041E7                 mov     rsi, rdi
.text:00000000000041EA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000041F1                 xor     edi, edi
.text:00000000000041F3                 jmp     quotearg_n_options
.text:00000000000041F3 ; } // starts at 41E0
.text:00000000000041F3 quotearg        endp
.text:00000000000041F3
.text:00000000000041F3 ; ---------------------------------------------------------------------------
.text:00000000000041F8                 align 20h
.text:0000000000004200
.text:0000000000004200 ; =============== S U B R O U T I N E =======================================
.text:0000000000004200
.text:0000000000004200
.text:0000000000004200                 public quotearg_mem
.text:0000000000004200 quotearg_mem    proc near
.text:0000000000004200 ; __unwind {
.text:0000000000004200                 lea     rcx, default_quoting_options
.text:0000000000004207                 mov     rdx, rsi
.text:000000000000420A                 mov     rsi, rdi
.text:000000000000420D                 xor     edi, edi
.text:000000000000420F                 jmp     quotearg_n_options
.text:000000000000420F ; } // starts at 4200
.text:000000000000420F quotearg_mem    endp
.text:000000000000420F
.text:000000000000420F ; ---------------------------------------------------------------------------
.text:0000000000004214                 align 20h
.text:0000000000004220
.text:0000000000004220 ; =============== S U B R O U T I N E =======================================
.text:0000000000004220
.text:0000000000004220 ; Attributes: info_from_lumina
.text:0000000000004220
.text:0000000000004220 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004220                 public quotearg_n_style
.text:0000000000004220 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004220
.text:0000000000004220 var_48          = dword ptr -48h
.text:0000000000004220 var_44          = qword ptr -44h
.text:0000000000004220 var_3C          = qword ptr -3Ch
.text:0000000000004220 var_34          = qword ptr -34h
.text:0000000000004220 var_2C          = qword ptr -2Ch
.text:0000000000004220 var_24          = qword ptr -24h
.text:0000000000004220 var_1C          = qword ptr -1Ch
.text:0000000000004220 var_14          = dword ptr -14h
.text:0000000000004220 var_10          = qword ptr -10h
.text:0000000000004220
.text:0000000000004220 ; __unwind {
.text:0000000000004220                 sub     rsp, 48h
.text:0000000000004224                 mov     rax, rdx
.text:0000000000004227                 mov     rdx, fs:28h
.text:0000000000004230                 mov     [rsp+48h+var_10], rdx
.text:0000000000004235                 xor     edx, edx
.text:0000000000004237                 cmp     esi, 0Ah
.text:000000000000423A                 jz      short loc_42A4
.text:000000000000423C                 mov     [rsp+48h+var_48], esi
.text:000000000000423F                 mov     rcx, rsp
.text:0000000000004242                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004249                 mov     rsi, rax
.text:000000000000424C                 mov     [rsp+48h+var_44], 0
.text:0000000000004255                 mov     [rsp+48h+var_3C], 0
.text:000000000000425E                 mov     [rsp+48h+var_34], 0
.text:0000000000004267                 mov     [rsp+48h+var_2C], 0
.text:0000000000004270                 mov     [rsp+48h+var_24], 0
.text:0000000000004279                 mov     [rsp+48h+var_1C], 0
.text:0000000000004282                 mov     [rsp+48h+var_14], 0
.text:000000000000428A                 call    quotearg_n_options
.text:000000000000428F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004294                 xor     rcx, fs:28h
.text:000000000000429D                 jnz     short loc_42A9
.text:000000000000429F                 add     rsp, 48h
.text:00000000000042A3                 retn
.text:00000000000042A4 ; ---------------------------------------------------------------------------
.text:00000000000042A4
.text:00000000000042A4 loc_42A4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000042A4                 call    _abort
.text:00000000000042A9 ; ---------------------------------------------------------------------------
.text:00000000000042A9
.text:00000000000042A9 loc_42A9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000042A9                 call    ___stack_chk_fail
.text:00000000000042A9 ; } // starts at 4220
.text:00000000000042A9 quotearg_n_style endp
.text:00000000000042A9
.text:00000000000042A9 ; ---------------------------------------------------------------------------
.text:00000000000042AE                 align 10h
.text:00000000000042B0
.text:00000000000042B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042B0
.text:00000000000042B0 ; Attributes: info_from_lumina
.text:00000000000042B0
.text:00000000000042B0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000042B0                 public quotearg_n_style_mem
.text:00000000000042B0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000042B0
.text:00000000000042B0 var_48          = dword ptr -48h
.text:00000000000042B0 var_44          = qword ptr -44h
.text:00000000000042B0 var_3C          = qword ptr -3Ch
.text:00000000000042B0 var_34          = qword ptr -34h
.text:00000000000042B0 var_2C          = qword ptr -2Ch
.text:00000000000042B0 var_24          = qword ptr -24h
.text:00000000000042B0 var_1C          = qword ptr -1Ch
.text:00000000000042B0 var_14          = dword ptr -14h
.text:00000000000042B0 var_10          = qword ptr -10h
.text:00000000000042B0
.text:00000000000042B0 ; __unwind {
.text:00000000000042B0                 sub     rsp, 48h
.text:00000000000042B4                 mov     rax, rdx
.text:00000000000042B7                 mov     rdx, rcx
.text:00000000000042BA                 mov     rcx, fs:28h
.text:00000000000042C3                 mov     [rsp+48h+var_10], rcx
.text:00000000000042C8                 xor     ecx, ecx
.text:00000000000042CA                 cmp     esi, 0Ah
.text:00000000000042CD                 jz      short loc_4330
.text:00000000000042CF                 mov     [rsp+48h+var_48], esi
.text:00000000000042D2                 mov     rcx, rsp
.text:00000000000042D5                 mov     rsi, rax
.text:00000000000042D8                 mov     [rsp+48h+var_44], 0
.text:00000000000042E1                 mov     [rsp+48h+var_3C], 0
.text:00000000000042EA                 mov     [rsp+48h+var_34], 0
.text:00000000000042F3                 mov     [rsp+48h+var_2C], 0
.text:00000000000042FC                 mov     [rsp+48h+var_24], 0
.text:0000000000004305                 mov     [rsp+48h+var_1C], 0
.text:000000000000430E                 mov     [rsp+48h+var_14], 0
.text:0000000000004316                 call    quotearg_n_options
.text:000000000000431B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004320                 xor     rdx, fs:28h
.text:0000000000004329                 jnz     short loc_4335
.text:000000000000432B                 add     rsp, 48h
.text:000000000000432F                 retn
.text:0000000000004330 ; ---------------------------------------------------------------------------
.text:0000000000004330
.text:0000000000004330 loc_4330:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004330                 call    _abort
.text:0000000000004335 ; ---------------------------------------------------------------------------
.text:0000000000004335
.text:0000000000004335 loc_4335:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004335                 call    ___stack_chk_fail
.text:0000000000004335 ; } // starts at 42B0
.text:0000000000004335 quotearg_n_style_mem endp
.text:0000000000004335
.text:0000000000004335 ; ---------------------------------------------------------------------------
.text:000000000000433A                 align 20h
.text:0000000000004340
.text:0000000000004340 ; =============== S U B R O U T I N E =======================================
.text:0000000000004340
.text:0000000000004340
.text:0000000000004340                 public quotearg_style
.text:0000000000004340 quotearg_style  proc near               ; CODE XREF: main+5A6↑p
.text:0000000000004340 ; __unwind {
.text:0000000000004340                 mov     rdx, rsi
.text:0000000000004343                 mov     esi, edi
.text:0000000000004345                 xor     edi, edi
.text:0000000000004347                 jmp     quotearg_n_style
.text:0000000000004347 ; } // starts at 4340
.text:0000000000004347 quotearg_style  endp
.text:0000000000004347
.text:0000000000004347 ; ---------------------------------------------------------------------------
.text:000000000000434C                 align 10h
.text:0000000000004350
.text:0000000000004350 ; =============== S U B R O U T I N E =======================================
.text:0000000000004350
.text:0000000000004350
.text:0000000000004350                 public quotearg_style_mem
.text:0000000000004350 quotearg_style_mem proc near
.text:0000000000004350 ; __unwind {
.text:0000000000004350                 mov     rcx, rdx
.text:0000000000004353                 mov     rdx, rsi
.text:0000000000004356                 mov     esi, edi
.text:0000000000004358                 xor     edi, edi
.text:000000000000435A                 jmp     quotearg_n_style_mem
.text:000000000000435A ; } // starts at 4350
.text:000000000000435A quotearg_style_mem endp
.text:000000000000435A
.text:000000000000435A ; ---------------------------------------------------------------------------
.text:000000000000435F                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360 ; Attributes: info_from_lumina
.text:0000000000004360
.text:0000000000004360 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004360                 public quotearg_char_mem
.text:0000000000004360 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004360                                         ; quotearg_colon+C↓j ...
.text:0000000000004360
.text:0000000000004360 var_48          = xmmword ptr -48h
.text:0000000000004360 var_38          = xmmword ptr -38h
.text:0000000000004360 var_28          = xmmword ptr -28h
.text:0000000000004360 var_18          = qword ptr -18h
.text:0000000000004360 var_10          = qword ptr -10h
.text:0000000000004360
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 sub     rsp, 48h
.text:0000000000004364                 mov     ecx, edx
.text:0000000000004366                 mov     rax, fs:28h
.text:000000000000436F                 mov     [rsp+48h+var_10], rax
.text:0000000000004374                 xor     eax, eax
.text:0000000000004376                 mov     rax, cs:qword_208230
.text:000000000000437D                 mov     r8, rsp
.text:0000000000004380                 and     ecx, 1Fh
.text:0000000000004383                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000438B                 mov     [rsp+48h+var_18], rax
.text:0000000000004390                 mov     eax, edx
.text:0000000000004392                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004396                 shr     al, 5
.text:0000000000004399                 movzx   eax, al
.text:000000000000439C                 lea     r9, [r8+rax*4+8]
.text:00000000000043A1                 movdqa  xmm0, cs:xmmword_208210
.text:00000000000043A9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000043AE                 movdqa  xmm0, cs:xmmword_208220
.text:00000000000043B6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000043BB                 mov     edx, [r9]
.text:00000000000043BE                 mov     eax, edx
.text:00000000000043C0                 shr     eax, cl
.text:00000000000043C2                 not     eax
.text:00000000000043C4                 and     eax, 1
.text:00000000000043C7                 shl     eax, cl
.text:00000000000043C9                 mov     rcx, r8
.text:00000000000043CC                 xor     eax, edx
.text:00000000000043CE                 mov     rdx, rsi
.text:00000000000043D1                 mov     rsi, rdi
.text:00000000000043D4                 mov     [r9], eax
.text:00000000000043D7                 xor     edi, edi
.text:00000000000043D9                 call    quotearg_n_options
.text:00000000000043DE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000043E3                 xor     rsi, fs:28h
.text:00000000000043EC                 jnz     short loc_43F3
.text:00000000000043EE                 add     rsp, 48h
.text:00000000000043F2                 retn
.text:00000000000043F3 ; ---------------------------------------------------------------------------
.text:00000000000043F3
.text:00000000000043F3 loc_43F3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000043F3                 call    ___stack_chk_fail
.text:00000000000043F3 ; } // starts at 4360
.text:00000000000043F3 quotearg_char_mem endp
.text:00000000000043F3
.text:00000000000043F3 ; ---------------------------------------------------------------------------
.text:00000000000043F8                 align 20h
.text:0000000000004400
.text:0000000000004400 ; =============== S U B R O U T I N E =======================================
.text:0000000000004400
.text:0000000000004400
.text:0000000000004400                 public quotearg_char
.text:0000000000004400 quotearg_char   proc near
.text:0000000000004400 ; __unwind {
.text:0000000000004400                 movsx   edx, sil
.text:0000000000004404                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000440B                 jmp     quotearg_char_mem
.text:000000000000440B ; } // starts at 4400
.text:000000000000440B quotearg_char   endp
.text:000000000000440B
.text:0000000000004410
.text:0000000000004410 ; =============== S U B R O U T I N E =======================================
.text:0000000000004410
.text:0000000000004410
.text:0000000000004410                 public quotearg_colon
.text:0000000000004410 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004410 ; __unwind {
.text:0000000000004410                 mov     edx, 3Ah ; ':'
.text:0000000000004415                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000441C                 jmp     quotearg_char_mem
.text:000000000000441C ; } // starts at 4410
.text:000000000000441C quotearg_colon  endp
.text:000000000000441C
.text:000000000000441C ; ---------------------------------------------------------------------------
.text:0000000000004421                 align 10h
.text:0000000000004430
.text:0000000000004430 ; =============== S U B R O U T I N E =======================================
.text:0000000000004430
.text:0000000000004430
.text:0000000000004430                 public quotearg_colon_mem
.text:0000000000004430 quotearg_colon_mem proc near
.text:0000000000004430 ; __unwind {
.text:0000000000004430                 mov     edx, 3Ah ; ':'
.text:0000000000004435                 jmp     quotearg_char_mem
.text:0000000000004435 ; } // starts at 4430
.text:0000000000004435 quotearg_colon_mem endp
.text:0000000000004435
.text:0000000000004435 ; ---------------------------------------------------------------------------
.text:000000000000443A                 align 20h
.text:0000000000004440
.text:0000000000004440 ; =============== S U B R O U T I N E =======================================
.text:0000000000004440
.text:0000000000004440 ; Attributes: info_from_lumina
.text:0000000000004440
.text:0000000000004440 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004440                 public quotearg_n_style_colon
.text:0000000000004440 quotearg_n_style_colon proc near        ; CODE XREF: main+426↑p
.text:0000000000004440                                         ; main+571↑p
.text:0000000000004440
.text:0000000000004440 var_48          = dword ptr -48h
.text:0000000000004440 var_44          = qword ptr -44h
.text:0000000000004440 var_3C          = qword ptr -3Ch
.text:0000000000004440 var_34          = qword ptr -34h
.text:0000000000004440 var_2C          = qword ptr -2Ch
.text:0000000000004440 var_24          = qword ptr -24h
.text:0000000000004440 var_1C          = qword ptr -1Ch
.text:0000000000004440 var_14          = dword ptr -14h
.text:0000000000004440 var_10          = qword ptr -10h
.text:0000000000004440
.text:0000000000004440 ; __unwind {
.text:0000000000004440                 sub     rsp, 48h
.text:0000000000004444                 mov     rax, rdx
.text:0000000000004447                 mov     rdx, fs:28h
.text:0000000000004450                 mov     [rsp+48h+var_10], rdx
.text:0000000000004455                 xor     edx, edx
.text:0000000000004457                 cmp     esi, 0Ah
.text:000000000000445A                 jz      short loc_44C4
.text:000000000000445C                 mov     [rsp+48h+var_48], esi
.text:000000000000445F                 mov     rcx, rsp
.text:0000000000004462                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004469                 mov     rsi, rax
.text:000000000000446C                 mov     [rsp+48h+var_44], 0
.text:0000000000004475                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000447E                 mov     [rsp+48h+var_34], 0
.text:0000000000004487                 mov     [rsp+48h+var_2C], 0
.text:0000000000004490                 mov     [rsp+48h+var_24], 0
.text:0000000000004499                 mov     [rsp+48h+var_1C], 0
.text:00000000000044A2                 mov     [rsp+48h+var_14], 0
.text:00000000000044AA                 call    quotearg_n_options
.text:00000000000044AF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000044B4                 xor     rcx, fs:28h
.text:00000000000044BD                 jnz     short loc_44C9
.text:00000000000044BF                 add     rsp, 48h
.text:00000000000044C3                 retn
.text:00000000000044C4 ; ---------------------------------------------------------------------------
.text:00000000000044C4
.text:00000000000044C4 loc_44C4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000044C4                 call    _abort
.text:00000000000044C9 ; ---------------------------------------------------------------------------
.text:00000000000044C9
.text:00000000000044C9 loc_44C9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000044C9                 call    ___stack_chk_fail
.text:00000000000044C9 ; } // starts at 4440
.text:00000000000044C9 quotearg_n_style_colon endp
.text:00000000000044C9
.text:00000000000044C9 ; ---------------------------------------------------------------------------
.text:00000000000044CE                 align 10h
.text:00000000000044D0
.text:00000000000044D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044D0
.text:00000000000044D0 ; Attributes: info_from_lumina
.text:00000000000044D0
.text:00000000000044D0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000044D0                 public quotearg_n_custom_mem
.text:00000000000044D0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000044D0                                         ; quotearg_custom+12↓j ...
.text:00000000000044D0
.text:00000000000044D0 var_48          = xmmword ptr -48h
.text:00000000000044D0 var_38          = xmmword ptr -38h
.text:00000000000044D0 var_28          = xmmword ptr -28h
.text:00000000000044D0 var_18          = qword ptr -18h
.text:00000000000044D0 var_10          = qword ptr -10h
.text:00000000000044D0
.text:00000000000044D0 ; __unwind {
.text:00000000000044D0                 sub     rsp, 48h
.text:00000000000044D4                 mov     r9, rcx
.text:00000000000044D7                 mov     rcx, cs:qword_208230
.text:00000000000044DE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000044E6                 mov     rax, fs:28h
.text:00000000000044EF                 mov     [rsp+48h+var_10], rax
.text:00000000000044F4                 xor     eax, eax
.text:00000000000044F6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000044FA                 test    rsi, rsi
.text:00000000000044FD                 mov     [rsp+48h+var_18], rcx
.text:0000000000004502                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004509                 movdqa  xmm0, cs:xmmword_208210
.text:0000000000004511                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004516                 movdqa  xmm0, cs:xmmword_208220
.text:000000000000451E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004523                 jz      short loc_4557
.text:0000000000004525                 test    rdx, rdx
.text:0000000000004528                 jz      short loc_4557
.text:000000000000452A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000452F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004534                 mov     rcx, rsp
.text:0000000000004537                 mov     rdx, r8
.text:000000000000453A                 mov     rsi, r9
.text:000000000000453D                 call    quotearg_n_options
.text:0000000000004542                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004547                 xor     rdi, fs:28h
.text:0000000000004550                 jnz     short loc_455C
.text:0000000000004552                 add     rsp, 48h
.text:0000000000004556                 retn
.text:0000000000004557 ; ---------------------------------------------------------------------------
.text:0000000000004557
.text:0000000000004557 loc_4557:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004557                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004557                 call    _abort
.text:000000000000455C ; ---------------------------------------------------------------------------
.text:000000000000455C
.text:000000000000455C loc_455C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000455C                 call    ___stack_chk_fail
.text:000000000000455C ; } // starts at 44D0
.text:000000000000455C quotearg_n_custom_mem endp
.text:000000000000455C
.text:000000000000455C ; ---------------------------------------------------------------------------
.text:0000000000004561                 align 10h
.text:0000000000004570
.text:0000000000004570 ; =============== S U B R O U T I N E =======================================
.text:0000000000004570
.text:0000000000004570
.text:0000000000004570                 public quotearg_n_custom
.text:0000000000004570 quotearg_n_custom proc near
.text:0000000000004570 ; __unwind {
.text:0000000000004570                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004577                 jmp     quotearg_n_custom_mem
.text:0000000000004577 ; } // starts at 4570
.text:0000000000004577 quotearg_n_custom endp
.text:0000000000004577
.text:0000000000004577 ; ---------------------------------------------------------------------------
.text:000000000000457C                 align 20h
.text:0000000000004580
.text:0000000000004580 ; =============== S U B R O U T I N E =======================================
.text:0000000000004580
.text:0000000000004580
.text:0000000000004580                 public quotearg_custom
.text:0000000000004580 quotearg_custom proc near
.text:0000000000004580 ; __unwind {
.text:0000000000004580                 mov     rcx, rdx
.text:0000000000004583                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000458A                 mov     rdx, rsi
.text:000000000000458D                 mov     rsi, rdi
.text:0000000000004590                 xor     edi, edi
.text:0000000000004592                 jmp     quotearg_n_custom_mem
.text:0000000000004592 ; } // starts at 4580
.text:0000000000004592 quotearg_custom endp
.text:0000000000004592
.text:0000000000004592 ; ---------------------------------------------------------------------------
.text:0000000000004597                 align 20h
.text:00000000000045A0
.text:00000000000045A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045A0
.text:00000000000045A0
.text:00000000000045A0                 public quotearg_custom_mem
.text:00000000000045A0 quotearg_custom_mem proc near
.text:00000000000045A0 ; __unwind {
.text:00000000000045A0                 mov     r8, rcx
.text:00000000000045A3                 mov     rcx, rdx
.text:00000000000045A6                 mov     rdx, rsi
.text:00000000000045A9                 mov     rsi, rdi
.text:00000000000045AC                 xor     edi, edi
.text:00000000000045AE                 jmp     quotearg_n_custom_mem
.text:00000000000045AE ; } // starts at 45A0
.text:00000000000045AE quotearg_custom_mem endp
.text:00000000000045AE
.text:00000000000045AE ; ---------------------------------------------------------------------------
.text:00000000000045B3                 align 20h
.text:00000000000045C0
.text:00000000000045C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045C0
.text:00000000000045C0
.text:00000000000045C0                 public quote_n_mem
.text:00000000000045C0 quote_n_mem     proc near
.text:00000000000045C0 ; __unwind {
.text:00000000000045C0                 lea     rcx, quote_quoting_options
.text:00000000000045C7                 jmp     quotearg_n_options
.text:00000000000045C7 ; } // starts at 45C0
.text:00000000000045C7 quote_n_mem     endp
.text:00000000000045C7
.text:00000000000045C7 ; ---------------------------------------------------------------------------
.text:00000000000045CC                 align 10h
.text:00000000000045D0
.text:00000000000045D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045D0
.text:00000000000045D0
.text:00000000000045D0                 public quote_mem
.text:00000000000045D0 quote_mem       proc near
.text:00000000000045D0 ; __unwind {
.text:00000000000045D0                 lea     rcx, quote_quoting_options
.text:00000000000045D7                 mov     rdx, rsi
.text:00000000000045DA                 mov     rsi, rdi
.text:00000000000045DD                 xor     edi, edi
.text:00000000000045DF                 jmp     quotearg_n_options
.text:00000000000045DF ; } // starts at 45D0
.text:00000000000045DF quote_mem       endp
.text:00000000000045DF
.text:00000000000045DF ; ---------------------------------------------------------------------------
.text:00000000000045E4                 align 10h
.text:00000000000045F0
.text:00000000000045F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045F0
.text:00000000000045F0
.text:00000000000045F0                 public quote_n
.text:00000000000045F0 quote_n         proc near
.text:00000000000045F0 ; __unwind {
.text:00000000000045F0                 lea     rcx, quote_quoting_options
.text:00000000000045F7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000045FE                 jmp     quotearg_n_options
.text:00000000000045FE ; } // starts at 45F0
.text:00000000000045FE quote_n         endp
.text:00000000000045FE
.text:00000000000045FE ; ---------------------------------------------------------------------------
.text:0000000000004603                 align 10h
.text:0000000000004610
.text:0000000000004610 ; =============== S U B R O U T I N E =======================================
.text:0000000000004610
.text:0000000000004610
.text:0000000000004610                 public quote
.text:0000000000004610 quote           proc near               ; CODE XREF: main:loc_189A↑p
.text:0000000000004610                                         ; main+2FD↑p ...
.text:0000000000004610 ; __unwind {
.text:0000000000004610                 lea     rcx, quote_quoting_options
.text:0000000000004617                 mov     rsi, rdi
.text:000000000000461A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004621                 xor     edi, edi
.text:0000000000004623                 jmp     quotearg_n_options
.text:0000000000004623 ; } // starts at 4610
.text:0000000000004623 quote           endp
.text:0000000000004623
.text:0000000000004623 ; ---------------------------------------------------------------------------
.text:0000000000004628                 align 10h
.text:0000000000004630
.text:0000000000004630 ; =============== S U B R O U T I N E =======================================
.text:0000000000004630
.text:0000000000004630
.text:0000000000004630 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004630                 public version_etc_arn
.text:0000000000004630 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_4A6B↓j
.text:0000000000004630                                         ; version_etc_va:loc_4ABB↓p ...
.text:0000000000004630
.text:0000000000004630 var_58          = qword ptr -58h
.text:0000000000004630 var_50          = qword ptr -50h
.text:0000000000004630 var_48          = qword ptr -48h
.text:0000000000004630 var_40          = qword ptr -40h
.text:0000000000004630
.text:0000000000004630 ; __unwind {
.text:0000000000004630                 push    r15
.text:0000000000004632                 push    r14
.text:0000000000004634                 push    r13
.text:0000000000004636                 push    r12
.text:0000000000004638                 mov     r12, r9
.text:000000000000463B                 push    rbp
.text:000000000000463C                 push    rbx
.text:000000000000463D                 mov     rbp, rdi
.text:0000000000004640                 mov     rbx, r8
.text:0000000000004643                 sub     rsp, 28h
.text:0000000000004647                 test    rsi, rsi
.text:000000000000464A                 jz      loc_4768
.text:0000000000004650                 mov     r8, rdx
.text:0000000000004653                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000465A                 mov     r9, rcx
.text:000000000000465D                 xor     eax, eax
.text:000000000000465F                 mov     rcx, rsi
.text:0000000000004662                 mov     esi, 1
.text:0000000000004667                 call    ___fprintf_chk
.text:000000000000466C
.text:000000000000466C loc_466C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000466C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004673                 xor     edi, edi        ; domainname
.text:0000000000004675                 mov     edx, 5          ; category
.text:000000000000467A                 call    _dcgettext
.text:000000000000467F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004686                 mov     rcx, rax
.text:0000000000004689                 mov     r8d, 7E3h
.text:000000000000468F                 mov     esi, 1
.text:0000000000004694                 mov     rdi, rbp
.text:0000000000004697                 xor     eax, eax
.text:0000000000004699                 call    ___fprintf_chk
.text:000000000000469E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000046A5                 xor     edi, edi        ; domainname
.text:00000000000046A7                 mov     edx, 5          ; category
.text:00000000000046AC                 call    _dcgettext
.text:00000000000046B1                 mov     rsi, rbp        ; stream
.text:00000000000046B4                 mov     rdi, rax        ; s
.text:00000000000046B7                 call    _fputs_unlocked
.text:00000000000046BC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000046C0                 ja      def_46D4        ; jumptable 00000000000046D4 default case
.text:00000000000046C6                 lea     rdx, jpt_46D4
.text:00000000000046CD                 movsxd  rax, ds:(jpt_46D4 - 6744h)[rdx+r12*4]
.text:00000000000046D1                 add     rax, rdx
.text:00000000000046D4                 jmp     rax             ; switch jump
.text:00000000000046D4 ; ---------------------------------------------------------------------------
.text:00000000000046D6                 align 20h
.text:00000000000046E0
.text:00000000000046E0 loc_46E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000046E0                                         ; DATA XREF: .rodata:jpt_46D4↓o
.text:00000000000046E0                 mov     r9, [rbx+38h]   ; jumptable 00000000000046D4 case 8
.text:00000000000046E4                 mov     rax, [rbx+10h]
.text:00000000000046E8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000046EF                 mov     r8, [rbx+8]
.text:00000000000046F3                 mov     edx, 5          ; category
.text:00000000000046F8                 xor     edi, edi        ; domainname
.text:00000000000046FA                 mov     r13, [rbx+30h]
.text:00000000000046FE                 mov     r12, [rbx+28h]
.text:0000000000004702                 mov     [rsp+58h+var_48], r9
.text:0000000000004707                 mov     r15, [rbx+20h]
.text:000000000000470B                 mov     r14, [rbx+18h]
.text:000000000000470F                 mov     [rsp+58h+var_58], rax
.text:0000000000004713                 mov     [rsp+58h+var_50], r8
.text:0000000000004718                 mov     rbx, [rbx]
.text:000000000000471B                 call    _dcgettext
.text:0000000000004720                 sub     rsp, 8
.text:0000000000004724
.text:0000000000004724 loc_4724:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004724                 mov     r9, [rsp+60h+var_48]
.text:0000000000004729                 mov     rdx, rax
.text:000000000000472C                 mov     rcx, rbx
.text:000000000000472F                 mov     esi, 1
.text:0000000000004734                 mov     rdi, rbp
.text:0000000000004737                 xor     eax, eax
.text:0000000000004739                 push    r9
.text:000000000000473B                 push    r13
.text:000000000000473D                 push    r12
.text:000000000000473F                 push    r15
.text:0000000000004741                 push    r14
.text:0000000000004743                 mov     r9, [rsp+88h+var_58]
.text:0000000000004748                 mov     r8, [rsp+88h+var_50]
.text:000000000000474D                 call    ___fprintf_chk
.text:0000000000004752                 add     rsp, 30h
.text:0000000000004756
.text:0000000000004756 loc_4756:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004756                                         ; DATA XREF: .rodata:jpt_46D4↓o
.text:0000000000004756                 add     rsp, 28h        ; jumptable 00000000000046D4 case 0
.text:000000000000475A                 pop     rbx
.text:000000000000475B                 pop     rbp
.text:000000000000475C                 pop     r12
.text:000000000000475E                 pop     r13
.text:0000000000004760                 pop     r14
.text:0000000000004762                 pop     r15
.text:0000000000004764                 retn
.text:0000000000004764 ; ---------------------------------------------------------------------------
.text:0000000000004765                 align 8
.text:0000000000004768
.text:0000000000004768 loc_4768:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004768                 mov     r8, rcx
.text:000000000000476B                 mov     rcx, rdx
.text:000000000000476E                 lea     rdx, aSS        ; "%s %s\n"
.text:0000000000004775                 mov     esi, 1
.text:000000000000477A                 xor     eax, eax
.text:000000000000477C                 call    ___fprintf_chk
.text:0000000000004781                 jmp     loc_466C
.text:0000000000004781 ; ---------------------------------------------------------------------------
.text:0000000000004786                 align 10h
.text:0000000000004790
.text:0000000000004790 loc_4790:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004790                                         ; DATA XREF: .rodata:jpt_46D4↓o
.text:0000000000004790                 mov     r10, [rbx+40h]  ; jumptable 00000000000046D4 case 9
.text:0000000000004794                 mov     r9, [rbx+38h]
.text:0000000000004798                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000479F                 mov     rax, [rbx+10h]
.text:00000000000047A3                 mov     r8, [rbx+8]
.text:00000000000047A7                 mov     edx, 5          ; category
.text:00000000000047AC                 mov     r13, [rbx+30h]
.text:00000000000047B0                 mov     r12, [rbx+28h]
.text:00000000000047B4                 mov     r15, [rbx+20h]
.text:00000000000047B8                 mov     r14, [rbx+18h]
.text:00000000000047BC                 mov     rbx, [rbx]
.text:00000000000047BF                 mov     [rsp+58h+var_40], r10
.text:00000000000047C4                 mov     [rsp+58h+var_48], r9
.text:00000000000047C9                 mov     [rsp+58h+var_58], rax
.text:00000000000047CD                 mov     [rsp+58h+var_50], r8
.text:00000000000047D2
.text:00000000000047D2 loc_47D2:                               ; CODE XREF: version_etc_arn+412↓j
.text:00000000000047D2                 xor     edi, edi        ; domainname
.text:00000000000047D4                 call    _dcgettext
.text:00000000000047D9                 mov     r10, [rsp+58h+var_40]
.text:00000000000047DE                 push    r10
.text:00000000000047E0                 jmp     loc_4724
.text:00000000000047E0 ; ---------------------------------------------------------------------------
.text:00000000000047E5                 align 8
.text:00000000000047E8
.text:00000000000047E8 loc_47E8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000047E8                                         ; DATA XREF: .rodata:jpt_46D4↓o
.text:00000000000047E8                 mov     rbx, [rbx]      ; jumptable 00000000000046D4 case 1
.text:00000000000047EB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000047F2                 mov     edx, 5          ; category
.text:00000000000047F7                 xor     edi, edi        ; domainname
.text:00000000000047F9                 call    _dcgettext
.text:00000000000047FE                 add     rsp, 28h
.text:0000000000004802                 mov     rcx, rbx
.text:0000000000004805                 mov     rdi, rbp
.text:0000000000004808                 pop     rbx
.text:0000000000004809                 pop     rbp
.text:000000000000480A                 pop     r12
.text:000000000000480C                 pop     r13
.text:000000000000480E                 pop     r14
.text:0000000000004810                 pop     r15
.text:0000000000004812                 mov     rdx, rax
.text:0000000000004815                 mov     esi, 1
.text:000000000000481A                 xor     eax, eax
.text:000000000000481C                 jmp     ___fprintf_chk
.text:000000000000481C ; ---------------------------------------------------------------------------
.text:0000000000004821                 align 8
.text:0000000000004828
.text:0000000000004828 loc_4828:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004828                                         ; DATA XREF: .rodata:jpt_46D4↓o
.text:0000000000004828                 mov     r12, [rbx+8]    ; jumptable 00000000000046D4 case 2
.text:000000000000482C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004833                 mov     rbx, [rbx]
.text:0000000000004836                 mov     edx, 5          ; category
.text:000000000000483B                 xor     edi, edi        ; domainname
.text:000000000000483D                 call    _dcgettext
.text:0000000000004842                 add     rsp, 28h
.text:0000000000004846                 mov     r8, r12
.text:0000000000004849                 mov     rcx, rbx
.text:000000000000484C                 mov     rdi, rbp
.text:000000000000484F                 mov     rdx, rax
.text:0000000000004852                 mov     esi, 1
.text:0000000000004857                 pop     rbx
.text:0000000000004858                 pop     rbp
.text:0000000000004859                 pop     r12
.text:000000000000485B                 pop     r13
.text:000000000000485D                 pop     r14
.text:000000000000485F                 pop     r15
.text:0000000000004861                 xor     eax, eax
.text:0000000000004863                 jmp     ___fprintf_chk
.text:0000000000004863 ; ---------------------------------------------------------------------------
.text:0000000000004868                 align 10h
.text:0000000000004870
.text:0000000000004870 loc_4870:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004870                                         ; DATA XREF: .rodata:jpt_46D4↓o
.text:0000000000004870                 mov     r13, [rbx+10h]  ; jumptable 00000000000046D4 case 3
.text:0000000000004874                 mov     r12, [rbx+8]
.text:0000000000004878                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000487F                 mov     rbx, [rbx]
.text:0000000000004882                 mov     edx, 5          ; category
.text:0000000000004887                 xor     edi, edi        ; domainname
.text:0000000000004889                 call    _dcgettext
.text:000000000000488E                 add     rsp, 28h
.text:0000000000004892                 mov     r9, r13
.text:0000000000004895                 mov     r8, r12
.text:0000000000004898                 mov     rcx, rbx
.text:000000000000489B                 mov     rdi, rbp
.text:000000000000489E                 mov     rdx, rax
.text:00000000000048A1                 pop     rbx
.text:00000000000048A2                 pop     rbp
.text:00000000000048A3                 pop     r12
.text:00000000000048A5                 pop     r13
.text:00000000000048A7                 pop     r14
.text:00000000000048A9                 pop     r15
.text:00000000000048AB                 mov     esi, 1
.text:00000000000048B0                 xor     eax, eax
.text:00000000000048B2                 jmp     ___fprintf_chk
.text:00000000000048B2 ; ---------------------------------------------------------------------------
.text:00000000000048B7                 align 20h
.text:00000000000048C0
.text:00000000000048C0 loc_48C0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000048C0                                         ; DATA XREF: .rodata:jpt_46D4↓o
.text:00000000000048C0                 lea     rsi, aWrittenBySSSAn ; jumptable 00000000000046D4 case 4
.text:00000000000048C7                 mov     edx, 5          ; category
.text:00000000000048CC                 xor     edi, edi        ; domainname
.text:00000000000048CE                 mov     r14, [rbx+18h]
.text:00000000000048D2                 mov     r13, [rbx+10h]
.text:00000000000048D6                 mov     r12, [rbx+8]
.text:00000000000048DA                 mov     rbx, [rbx]
.text:00000000000048DD                 call    _dcgettext
.text:00000000000048E2                 sub     rsp, 8
.text:00000000000048E6
.text:00000000000048E6 loc_48E6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000048E6                 push    r14
.text:00000000000048E8                 mov     rdx, rax
.text:00000000000048EB                 mov     r9, r13
.text:00000000000048EE                 mov     r8, r12
.text:00000000000048F1                 mov     rcx, rbx
.text:00000000000048F4                 mov     rdi, rbp
.text:00000000000048F7                 mov     esi, 1
.text:00000000000048FC                 xor     eax, eax
.text:00000000000048FE                 call    ___fprintf_chk
.text:0000000000004903                 pop     rax
.text:0000000000004904                 pop     rdx
.text:0000000000004905                 add     rsp, 28h
.text:0000000000004909                 pop     rbx
.text:000000000000490A                 pop     rbp
.text:000000000000490B                 pop     r12
.text:000000000000490D                 pop     r13
.text:000000000000490F                 pop     r14
.text:0000000000004911                 pop     r15
.text:0000000000004913                 retn
.text:0000000000004913 ; ---------------------------------------------------------------------------
.text:0000000000004914                 align 8
.text:0000000000004918
.text:0000000000004918 loc_4918:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004918                                         ; DATA XREF: .rodata:jpt_46D4↓o
.text:0000000000004918                 mov     r15, [rbx+20h]  ; jumptable 00000000000046D4 case 5
.text:000000000000491C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004923                 mov     edx, 5          ; category
.text:0000000000004928                 xor     edi, edi        ; domainname
.text:000000000000492A                 mov     r14, [rbx+18h]
.text:000000000000492E                 mov     r13, [rbx+10h]
.text:0000000000004932                 mov     r12, [rbx+8]
.text:0000000000004936                 mov     rbx, [rbx]
.text:0000000000004939                 call    _dcgettext
.text:000000000000493E                 push    r15
.text:0000000000004940                 jmp     short loc_48E6
.text:0000000000004940 ; ---------------------------------------------------------------------------
.text:0000000000004942                 align 8
.text:0000000000004948
.text:0000000000004948 loc_4948:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004948                                         ; DATA XREF: .rodata:jpt_46D4↓o
.text:0000000000004948                 mov     r8, [rbx+8]     ; jumptable 00000000000046D4 case 6
.text:000000000000494C                 mov     r12, [rbx+28h]
.text:0000000000004950                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004957                 mov     r15, [rbx+20h]
.text:000000000000495B                 mov     r14, [rbx+18h]
.text:000000000000495F                 mov     edx, 5          ; category
.text:0000000000004964                 mov     r13, [rbx+10h]
.text:0000000000004968                 xor     edi, edi        ; domainname
.text:000000000000496A                 mov     rbx, [rbx]
.text:000000000000496D                 mov     [rsp+58h+var_58], r8
.text:0000000000004971                 call    _dcgettext
.text:0000000000004976                 sub     rsp, 8
.text:000000000000497A                 mov     r9, r13
.text:000000000000497D                 push    r12
.text:000000000000497F                 push    r15
.text:0000000000004981                 push    r14
.text:0000000000004983
.text:0000000000004983 loc_4983:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004983                 mov     r8, [rsp+78h+var_58]
.text:0000000000004988                 mov     rcx, rbx
.text:000000000000498B                 mov     rdx, rax
.text:000000000000498E                 mov     rdi, rbp
.text:0000000000004991                 mov     esi, 1
.text:0000000000004996                 xor     eax, eax
.text:0000000000004998                 call    ___fprintf_chk
.text:000000000000499D                 add     rsp, 20h
.text:00000000000049A1                 add     rsp, 28h
.text:00000000000049A5                 pop     rbx
.text:00000000000049A6                 pop     rbp
.text:00000000000049A7                 pop     r12
.text:00000000000049A9                 pop     r13
.text:00000000000049AB                 pop     r14
.text:00000000000049AD                 pop     r15
.text:00000000000049AF                 retn
.text:00000000000049B0 ; ---------------------------------------------------------------------------
.text:00000000000049B0
.text:00000000000049B0 loc_49B0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000049B0                                         ; DATA XREF: .rodata:jpt_46D4↓o
.text:00000000000049B0                 mov     r9, [rbx+10h]   ; jumptable 00000000000046D4 case 7
.text:00000000000049B4                 mov     r13, [rbx+30h]
.text:00000000000049B8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000049BF                 mov     r12, [rbx+28h]
.text:00000000000049C3                 mov     r15, [rbx+20h]
.text:00000000000049C7                 mov     edx, 5          ; category
.text:00000000000049CC                 mov     r14, [rbx+18h]
.text:00000000000049D0                 mov     r8, [rbx+8]
.text:00000000000049D4                 xor     edi, edi        ; domainname
.text:00000000000049D6                 mov     [rsp+58h+var_50], r9
.text:00000000000049DB                 mov     rbx, [rbx]
.text:00000000000049DE                 mov     [rsp+58h+var_58], r8
.text:00000000000049E2                 call    _dcgettext
.text:00000000000049E7                 push    r13
.text:00000000000049E9                 push    r12
.text:00000000000049EB                 push    r15
.text:00000000000049ED                 push    r14
.text:00000000000049EF                 mov     r9, [rsp+78h+var_50]
.text:00000000000049F4                 jmp     short loc_4983
.text:00000000000049F4 ; ---------------------------------------------------------------------------
.text:00000000000049F6                 align 20h
.text:0000000000004A00
.text:0000000000004A00 def_46D4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004A00                 mov     r10, [rbx+40h]  ; jumptable 00000000000046D4 default case
.text:0000000000004A04                 mov     r9, [rbx+38h]
.text:0000000000004A08                 mov     edx, 5
.text:0000000000004A0D                 mov     rax, [rbx+10h]
.text:0000000000004A11                 mov     r8, [rbx+8]
.text:0000000000004A15                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004A1C                 mov     r13, [rbx+30h]
.text:0000000000004A20                 mov     r12, [rbx+28h]
.text:0000000000004A24                 mov     r15, [rbx+20h]
.text:0000000000004A28                 mov     r14, [rbx+18h]
.text:0000000000004A2C                 mov     [rsp+58h+var_40], r10
.text:0000000000004A31                 mov     [rsp+58h+var_48], r9
.text:0000000000004A36                 mov     [rsp+58h+var_58], rax
.text:0000000000004A3A                 mov     [rsp+58h+var_50], r8
.text:0000000000004A3F                 mov     rbx, [rbx]
.text:0000000000004A42                 jmp     loc_47D2
.text:0000000000004A42 ; } // starts at 4630
.text:0000000000004A42 version_etc_arn endp
.text:0000000000004A42
.text:0000000000004A42 ; ---------------------------------------------------------------------------
.text:0000000000004A47                 align 10h
.text:0000000000004A50
.text:0000000000004A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A50
.text:0000000000004A50 ; Attributes: info_from_lumina
.text:0000000000004A50
.text:0000000000004A50 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004A50                 public version_etc_ar
.text:0000000000004A50 version_etc_ar  proc near
.text:0000000000004A50 ; __unwind {
.text:0000000000004A50                 xor     r9d, r9d
.text:0000000000004A53                 cmp     qword ptr [r8], 0
.text:0000000000004A57                 jz      short loc_4A6B
.text:0000000000004A59                 nop     dword ptr [rax+00000000h]
.text:0000000000004A60
.text:0000000000004A60 loc_4A60:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004A60                 add     r9, 1
.text:0000000000004A64                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004A69                 jnz     short loc_4A60
.text:0000000000004A6B
.text:0000000000004A6B loc_4A6B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000004A6B                 jmp     version_etc_arn
.text:0000000000004A6B ; } // starts at 4A50
.text:0000000000004A6B version_etc_ar  endp
.text:0000000000004A6B
.text:0000000000004A70
.text:0000000000004A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A70
.text:0000000000004A70 ; Attributes: info_from_lumina
.text:0000000000004A70
.text:0000000000004A70 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004A70                 public version_etc_va
.text:0000000000004A70 version_etc_va  proc near
.text:0000000000004A70
.text:0000000000004A70 authtab         = qword ptr -68h
.text:0000000000004A70 var_10          = qword ptr -10h
.text:0000000000004A70
.text:0000000000004A70 ; __unwind {
.text:0000000000004A70                 sub     rsp, 68h
.text:0000000000004A74                 mov     r10, r8
.text:0000000000004A77                 xor     r9d, r9d
.text:0000000000004A7A                 mov     rax, fs:28h
.text:0000000000004A83                 mov     [rsp+68h+var_10], rax
.text:0000000000004A88                 xor     eax, eax
.text:0000000000004A8A                 mov     r8, rsp
.text:0000000000004A8D                 nop     dword ptr [rax]
.text:0000000000004A90
.text:0000000000004A90 loc_4A90:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004A90                 mov     eax, [r10]
.text:0000000000004A93                 cmp     eax, 2Fh ; '/'
.text:0000000000004A96                 ja      short loc_4ADA
.text:0000000000004A98                 mov     r11d, eax
.text:0000000000004A9B                 add     r11, [r10+10h]
.text:0000000000004A9F                 add     eax, 8
.text:0000000000004AA2                 mov     [r10], eax
.text:0000000000004AA5
.text:0000000000004AA5 loc_4AA5:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004AA5                 mov     rax, [r11]
.text:0000000000004AA8                 test    rax, rax
.text:0000000000004AAB                 mov     [r8+r9*8], rax
.text:0000000000004AAF                 jz      short loc_4ABB
.text:0000000000004AB1                 add     r9, 1
.text:0000000000004AB5                 cmp     r9, 0Ah
.text:0000000000004AB9                 jnz     short loc_4A90
.text:0000000000004ABB
.text:0000000000004ABB loc_4ABB:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000004ABB                 call    version_etc_arn
.text:0000000000004AC0                 mov     rax, [rsp+68h+var_10]
.text:0000000000004AC5                 xor     rax, fs:28h
.text:0000000000004ACE                 jnz     short loc_4AD5
.text:0000000000004AD0                 add     rsp, 68h
.text:0000000000004AD4                 retn
.text:0000000000004AD5 ; ---------------------------------------------------------------------------
.text:0000000000004AD5
.text:0000000000004AD5 loc_4AD5:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004AD5                 call    ___stack_chk_fail
.text:0000000000004ADA ; ---------------------------------------------------------------------------
.text:0000000000004ADA
.text:0000000000004ADA loc_4ADA:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000004ADA                 mov     r11, [r10+8]
.text:0000000000004ADE                 lea     rax, [r11+8]
.text:0000000000004AE2                 mov     [r10+8], rax
.text:0000000000004AE6                 jmp     short loc_4AA5
.text:0000000000004AE6 ; } // starts at 4A70
.text:0000000000004AE6 version_etc_va  endp
.text:0000000000004AE6
.text:0000000000004AE6 ; ---------------------------------------------------------------------------
.text:0000000000004AE8                 align 10h
.text:0000000000004AF0
.text:0000000000004AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AF0
.text:0000000000004AF0 ; Attributes: info_from_lumina
.text:0000000000004AF0
.text:0000000000004AF0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004AF0                 public version_etc
.text:0000000000004AF0 version_etc     proc near               ; CODE XREF: main+F3↑p
.text:0000000000004AF0
.text:0000000000004AF0 var_C0          = dword ptr -0C0h
.text:0000000000004AF0 var_B8          = qword ptr -0B8h
.text:0000000000004AF0 var_B0          = qword ptr -0B0h
.text:0000000000004AF0 var_A8          = byte ptr -0A8h
.text:0000000000004AF0 var_50          = qword ptr -50h
.text:0000000000004AF0 var_48          = byte ptr -48h
.text:0000000000004AF0 var_28          = qword ptr -28h
.text:0000000000004AF0 var_20          = qword ptr -20h
.text:0000000000004AF0 arg_0           = byte ptr  8
.text:0000000000004AF0
.text:0000000000004AF0 ; __unwind {
.text:0000000000004AF0                 push    rbp
.text:0000000000004AF1                 push    rbx
.text:0000000000004AF2                 mov     r10d, 20h ; ' '
.text:0000000000004AF8                 xor     r11d, r11d
.text:0000000000004AFB                 sub     rsp, 0B8h
.text:0000000000004B02                 mov     rax, fs:28h
.text:0000000000004B0B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004B10                 xor     eax, eax
.text:0000000000004B12                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000004B1A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004B22                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000004B2A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000004B2F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004B37                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000004B3F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004B44                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000004B4C                 xor     r9d, r9d
.text:0000000000004B4F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004B54                 mov     rbp, rax
.text:0000000000004B57                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004B60
.text:0000000000004B60 loc_4B60:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004B60                 cmp     r10d, 2Fh ; '/'
.text:0000000000004B64                 ja      short loc_4BBC
.text:0000000000004B66                 mov     eax, r10d
.text:0000000000004B69                 mov     r11d, 1
.text:0000000000004B6F                 add     r10d, 8
.text:0000000000004B73                 add     rax, rbp
.text:0000000000004B76
.text:0000000000004B76 loc_4B76:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004B76                 mov     rax, [rax]
.text:0000000000004B79                 test    rax, rax
.text:0000000000004B7C                 mov     [r8+r9*8], rax
.text:0000000000004B80                 jz      short loc_4B8C
.text:0000000000004B82                 add     r9, 1
.text:0000000000004B86                 cmp     r9, 0Ah
.text:0000000000004B8A                 jnz     short loc_4B60
.text:0000000000004B8C
.text:0000000000004B8C loc_4B8C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000004B8C                 test    r11b, r11b
.text:0000000000004B8F                 jnz     short loc_4BB5
.text:0000000000004B91
.text:0000000000004B91 loc_4B91:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004B91                 call    version_etc_arn
.text:0000000000004B96                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000004B9B                 xor     rax, fs:28h
.text:0000000000004BA4                 jnz     short loc_4BB0
.text:0000000000004BA6                 add     rsp, 0B8h
.text:0000000000004BAD                 pop     rbx
.text:0000000000004BAE                 pop     rbp
.text:0000000000004BAF                 retn
.text:0000000000004BB0 ; ---------------------------------------------------------------------------
.text:0000000000004BB0
.text:0000000000004BB0 loc_4BB0:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004BB0                 call    ___stack_chk_fail
.text:0000000000004BB5 ; ---------------------------------------------------------------------------
.text:0000000000004BB5
.text:0000000000004BB5 loc_4BB5:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004BB5                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000004BBA                 jmp     short loc_4B91
.text:0000000000004BBC ; ---------------------------------------------------------------------------
.text:0000000000004BBC
.text:0000000000004BBC loc_4BBC:                               ; CODE XREF: version_etc+74↑j
.text:0000000000004BBC                 mov     rax, rbx
.text:0000000000004BBF                 add     rbx, 8
.text:0000000000004BC3                 jmp     short loc_4B76
.text:0000000000004BC3 ; } // starts at 4AF0
.text:0000000000004BC3 version_etc     endp
.text:0000000000004BC3
.text:0000000000004BC3 ; ---------------------------------------------------------------------------
.text:0000000000004BC5                 align 10h
.text:0000000000004BD0
.text:0000000000004BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BD0
.text:0000000000004BD0 ; Attributes: info_from_lumina
.text:0000000000004BD0
.text:0000000000004BD0 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004BD0                 public emit_bug_reporting_address
.text:0000000000004BD0 emit_bug_reporting_address proc near
.text:0000000000004BD0 ; __unwind {
.text:0000000000004BD0                 push    rbx
.text:0000000000004BD1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004BD8                 mov     edx, 5          ; category
.text:0000000000004BDD                 xor     edi, edi        ; domainname
.text:0000000000004BDF                 call    _dcgettext
.text:0000000000004BE4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000004BEB                 mov     rsi, rax
.text:0000000000004BEE                 mov     edi, 1
.text:0000000000004BF3                 xor     eax, eax
.text:0000000000004BF5                 call    ___printf_chk
.text:0000000000004BFA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004C01                 mov     edx, 5          ; category
.text:0000000000004C06                 xor     edi, edi        ; domainname
.text:0000000000004C08                 call    _dcgettext
.text:0000000000004C0D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004C14                 lea     rdx, unk_5700
.text:0000000000004C1B                 mov     rsi, rax
.text:0000000000004C1E                 mov     edi, 1
.text:0000000000004C23                 xor     eax, eax
.text:0000000000004C25                 call    ___printf_chk
.text:0000000000004C2A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004C31                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004C38                 xor     edi, edi        ; domainname
.text:0000000000004C3A                 mov     edx, 5          ; category
.text:0000000000004C3F                 call    _dcgettext
.text:0000000000004C44                 mov     rsi, rbx        ; stream
.text:0000000000004C47                 mov     rdi, rax        ; s
.text:0000000000004C4A                 pop     rbx
.text:0000000000004C4B                 jmp     _fputs_unlocked
.text:0000000000004C4B ; } // starts at 4BD0
.text:0000000000004C4B emit_bug_reporting_address endp
.text:0000000000004C4B
.text:0000000000004C50
.text:0000000000004C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C50
.text:0000000000004C50
.text:0000000000004C50                 public xmalloc
.text:0000000000004C50 xmalloc         proc near               ; CODE XREF: mode_compile+7B↑p
.text:0000000000004C50                                         ; mode_compile+34A↑p ...
.text:0000000000004C50 ; __unwind {
.text:0000000000004C50                 push    rbx
.text:0000000000004C51                 mov     rbx, rdi
.text:0000000000004C54                 call    _malloc
.text:0000000000004C59                 test    rax, rax
.text:0000000000004C5C                 jnz     short loc_4C63
.text:0000000000004C5E                 test    rbx, rbx
.text:0000000000004C61                 jnz     short loc_4C65
.text:0000000000004C63
.text:0000000000004C63 loc_4C63:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004C63                 pop     rbx
.text:0000000000004C64                 retn
.text:0000000000004C65 ; ---------------------------------------------------------------------------
.text:0000000000004C65
.text:0000000000004C65 loc_4C65:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004C65                 call    xalloc_die
.text:0000000000004C65 ; } // starts at 4C50
.text:0000000000004C65 xmalloc         endp
.text:0000000000004C65
.text:0000000000004C65 ; ---------------------------------------------------------------------------
.text:0000000000004C6A                 align 10h
.text:0000000000004C70
.text:0000000000004C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C70
.text:0000000000004C70 ; Attributes: info_from_lumina
.text:0000000000004C70
.text:0000000000004C70 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004C70                 public xnmalloc
.text:0000000000004C70 xnmalloc        proc near
.text:0000000000004C70 ; __unwind {
.text:0000000000004C70                 mov     rax, rdi
.text:0000000000004C73                 mul     rsi
.text:0000000000004C76                 mov     rdi, rax
.text:0000000000004C79                 seto    al
.text:0000000000004C7C                 test    rdi, rdi
.text:0000000000004C7F                 js      short loc_4C8B
.text:0000000000004C81                 movzx   eax, al
.text:0000000000004C84                 test    rax, rax
.text:0000000000004C87                 jnz     short loc_4C8B
.text:0000000000004C89                 jmp     short xmalloc
.text:0000000000004C8B ; ---------------------------------------------------------------------------
.text:0000000000004C8B
.text:0000000000004C8B loc_4C8B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000004C8B                                         ; xnmalloc+17↑j
.text:0000000000004C8B                 sub     rsp, 8
.text:0000000000004C8F                 call    xalloc_die
.text:0000000000004C8F ; } // starts at 4C70
.text:0000000000004C8F xnmalloc        endp
.text:0000000000004C8F
.text:0000000000004C8F ; ---------------------------------------------------------------------------
.text:0000000000004C94                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CA0
.text:0000000000004CA0
.text:0000000000004CA0                 public xcharalloc
.text:0000000000004CA0 xcharalloc      proc near
.text:0000000000004CA0 ; __unwind {
.text:0000000000004CA0                 jmp     short xmalloc
.text:0000000000004CA0 ; } // starts at 4CA0
.text:0000000000004CA0 xcharalloc      endp
.text:0000000000004CA0
.text:0000000000004CA0 ; ---------------------------------------------------------------------------
.text:0000000000004CA2                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CB0
.text:0000000000004CB0 ; Attributes: info_from_lumina
.text:0000000000004CB0
.text:0000000000004CB0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004CB0                 public xrealloc
.text:0000000000004CB0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004CB0                                         ; quotearg_n_options+182↑p ...
.text:0000000000004CB0 ; __unwind {
.text:0000000000004CB0                 test    rsi, rsi
.text:0000000000004CB3                 push    rbx
.text:0000000000004CB4                 mov     rbx, rsi
.text:0000000000004CB7                 jnz     short loc_4CBE
.text:0000000000004CB9                 test    rdi, rdi
.text:0000000000004CBC                 jnz     short loc_4CD8
.text:0000000000004CBE
.text:0000000000004CBE loc_4CBE:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000004CBE                 mov     rsi, rbx        ; size
.text:0000000000004CC1                 call    _realloc
.text:0000000000004CC6                 test    rax, rax
.text:0000000000004CC9                 jnz     short loc_4CD0
.text:0000000000004CCB                 test    rbx, rbx
.text:0000000000004CCE                 jnz     short loc_4CE1
.text:0000000000004CD0
.text:0000000000004CD0 loc_4CD0:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004CD0                 pop     rbx
.text:0000000000004CD1                 retn
.text:0000000000004CD1 ; ---------------------------------------------------------------------------
.text:0000000000004CD2                 align 8
.text:0000000000004CD8
.text:0000000000004CD8 loc_4CD8:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004CD8                 call    _free
.text:0000000000004CDD                 xor     eax, eax
.text:0000000000004CDF                 pop     rbx
.text:0000000000004CE0                 retn
.text:0000000000004CE1 ; ---------------------------------------------------------------------------
.text:0000000000004CE1
.text:0000000000004CE1 loc_4CE1:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004CE1                 call    xalloc_die
.text:0000000000004CE1 ; } // starts at 4CB0
.text:0000000000004CE1 xrealloc        endp
.text:0000000000004CE1
.text:0000000000004CE1 ; ---------------------------------------------------------------------------
.text:0000000000004CE6                 align 10h
.text:0000000000004CF0
.text:0000000000004CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CF0
.text:0000000000004CF0 ; Attributes: info_from_lumina
.text:0000000000004CF0
.text:0000000000004CF0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004CF0                 public xnrealloc
.text:0000000000004CF0 xnrealloc       proc near
.text:0000000000004CF0 ; __unwind {
.text:0000000000004CF0                 mov     rax, rsi
.text:0000000000004CF3                 mul     rdx
.text:0000000000004CF6                 mov     rsi, rax
.text:0000000000004CF9                 seto    al
.text:0000000000004CFC                 test    rsi, rsi
.text:0000000000004CFF                 js      short loc_4D0B
.text:0000000000004D01                 movzx   eax, al
.text:0000000000004D04                 test    rax, rax
.text:0000000000004D07                 jnz     short loc_4D0B
.text:0000000000004D09                 jmp     short xrealloc
.text:0000000000004D0B ; ---------------------------------------------------------------------------
.text:0000000000004D0B
.text:0000000000004D0B loc_4D0B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000004D0B                                         ; xnrealloc+17↑j
.text:0000000000004D0B                 sub     rsp, 8
.text:0000000000004D0F                 call    xalloc_die
.text:0000000000004D0F ; } // starts at 4CF0
.text:0000000000004D0F xnrealloc       endp
.text:0000000000004D0F
.text:0000000000004D0F ; ---------------------------------------------------------------------------
.text:0000000000004D14                 align 20h
.text:0000000000004D20
.text:0000000000004D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D20
.text:0000000000004D20 ; Attributes: info_from_lumina
.text:0000000000004D20
.text:0000000000004D20 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004D20                 public x2nrealloc
.text:0000000000004D20 x2nrealloc      proc near
.text:0000000000004D20 ; __unwind {
.text:0000000000004D20                 test    rdi, rdi
.text:0000000000004D23                 mov     r9, rdx
.text:0000000000004D26                 mov     rcx, [rsi]
.text:0000000000004D29                 jz      short loc_4D60
.text:0000000000004D2B                 xor     edx, edx
.text:0000000000004D2D                 mov     rax, 5555555555555554h
.text:0000000000004D37                 div     r9
.text:0000000000004D3A                 cmp     rax, rcx
.text:0000000000004D3D                 jbe     short loc_4D7B
.text:0000000000004D3F                 mov     rax, rcx
.text:0000000000004D42                 shr     rax, 1
.text:0000000000004D45                 lea     rcx, [rax+rcx+1]
.text:0000000000004D4A
.text:0000000000004D4A loc_4D4A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000004D4A                 mov     [rsi], rcx
.text:0000000000004D4D                 imul    rcx, r9
.text:0000000000004D51                 mov     rsi, rcx
.text:0000000000004D54                 jmp     xrealloc
.text:0000000000004D54 ; ---------------------------------------------------------------------------
.text:0000000000004D59                 align 20h
.text:0000000000004D60
.text:0000000000004D60 loc_4D60:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004D60                 test    rcx, rcx
.text:0000000000004D63                 jz      short loc_4D88
.text:0000000000004D65
.text:0000000000004D65 loc_4D65:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004D65                 mov     rax, rcx
.text:0000000000004D68                 mul     r9
.text:0000000000004D6B                 seto    dl
.text:0000000000004D6E                 test    rax, rax
.text:0000000000004D71                 movzx   edx, dl
.text:0000000000004D74                 js      short loc_4D7B
.text:0000000000004D76                 test    rdx, rdx
.text:0000000000004D79                 jz      short loc_4D4A
.text:0000000000004D7B
.text:0000000000004D7B loc_4D7B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000004D7B                                         ; x2nrealloc+54↑j
.text:0000000000004D7B                 sub     rsp, 8
.text:0000000000004D7F                 call    xalloc_die
.text:0000000000004D7F ; ---------------------------------------------------------------------------
.text:0000000000004D84                 align 8
.text:0000000000004D88
.text:0000000000004D88 loc_4D88:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004D88                 xor     edx, edx
.text:0000000000004D8A                 mov     eax, 80h
.text:0000000000004D8F                 xor     r8d, r8d
.text:0000000000004D92                 div     r9
.text:0000000000004D95                 test    rax, rax
.text:0000000000004D98                 setz    r8b
.text:0000000000004D9C                 lea     rcx, [r8+rax]
.text:0000000000004DA0                 jmp     short loc_4D65
.text:0000000000004DA0 ; } // starts at 4D20
.text:0000000000004DA0 x2nrealloc      endp
.text:0000000000004DA0
.text:0000000000004DA0 ; ---------------------------------------------------------------------------
.text:0000000000004DA2                 align 10h
.text:0000000000004DB0
.text:0000000000004DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DB0
.text:0000000000004DB0 ; Attributes: info_from_lumina
.text:0000000000004DB0
.text:0000000000004DB0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004DB0                 public x2realloc
.text:0000000000004DB0 x2realloc       proc near
.text:0000000000004DB0 ; __unwind {
.text:0000000000004DB0                 test    rdi, rdi
.text:0000000000004DB3                 mov     rax, [rsi]
.text:0000000000004DB6                 jz      short loc_4DE0
.text:0000000000004DB8                 mov     rdx, 5555555555555553h
.text:0000000000004DC2                 cmp     rax, rdx
.text:0000000000004DC5                 ja      short loc_4DF1
.text:0000000000004DC7                 mov     rdx, rax
.text:0000000000004DCA                 shr     rdx, 1
.text:0000000000004DCD                 lea     rax, [rdx+rax+1]
.text:0000000000004DD2
.text:0000000000004DD2 loc_4DD2:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004DD2                 mov     [rsi], rax
.text:0000000000004DD5                 mov     rsi, rax
.text:0000000000004DD8                 jmp     xrealloc
.text:0000000000004DD8 ; ---------------------------------------------------------------------------
.text:0000000000004DDD                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 loc_4DE0:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004DE0                 test    rax, rax
.text:0000000000004DE3                 mov     edx, 80h
.text:0000000000004DE8                 cmovz   rax, rdx
.text:0000000000004DEC                 test    rax, rax
.text:0000000000004DEF                 jns     short loc_4DD2
.text:0000000000004DF1
.text:0000000000004DF1 loc_4DF1:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004DF1                 sub     rsp, 8
.text:0000000000004DF5                 call    xalloc_die
.text:0000000000004DF5 ; } // starts at 4DB0
.text:0000000000004DF5 x2realloc       endp
.text:0000000000004DF5
.text:0000000000004DF5 ; ---------------------------------------------------------------------------
.text:0000000000004DFA                 align 20h
.text:0000000000004E00
.text:0000000000004E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E00
.text:0000000000004E00
.text:0000000000004E00 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004E00                 public xzalloc
.text:0000000000004E00 xzalloc         proc near
.text:0000000000004E00 ; __unwind {
.text:0000000000004E00                 push    rbx
.text:0000000000004E01                 mov     rbx, rdi
.text:0000000000004E04                 call    xmalloc
.text:0000000000004E09                 mov     rdx, rbx        ; n
.text:0000000000004E0C                 xor     esi, esi        ; c
.text:0000000000004E0E                 mov     rdi, rax        ; s
.text:0000000000004E11                 pop     rbx
.text:0000000000004E12                 jmp     _memset
.text:0000000000004E12 ; } // starts at 4E00
.text:0000000000004E12 xzalloc         endp
.text:0000000000004E12
.text:0000000000004E12 ; ---------------------------------------------------------------------------
.text:0000000000004E17                 align 20h
.text:0000000000004E20
.text:0000000000004E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E20
.text:0000000000004E20 ; Attributes: info_from_lumina
.text:0000000000004E20
.text:0000000000004E20 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004E20                 public xcalloc
.text:0000000000004E20 xcalloc         proc near
.text:0000000000004E20 ; __unwind {
.text:0000000000004E20                 mov     rax, rdi
.text:0000000000004E23                 sub     rsp, 8
.text:0000000000004E27                 mul     rsi
.text:0000000000004E2A                 seto    dl
.text:0000000000004E2D                 test    rax, rax
.text:0000000000004E30                 js      short loc_4E49
.text:0000000000004E32                 movzx   edx, dl
.text:0000000000004E35                 test    rdx, rdx
.text:0000000000004E38                 jnz     short loc_4E49
.text:0000000000004E3A                 call    _calloc
.text:0000000000004E3F                 test    rax, rax
.text:0000000000004E42                 jz      short loc_4E49
.text:0000000000004E44                 add     rsp, 8
.text:0000000000004E48                 retn
.text:0000000000004E49 ; ---------------------------------------------------------------------------
.text:0000000000004E49
.text:0000000000004E49 loc_4E49:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004E49                                         ; xcalloc+18↑j ...
.text:0000000000004E49                 call    xalloc_die
.text:0000000000004E49 ; } // starts at 4E20
.text:0000000000004E49 xcalloc         endp
.text:0000000000004E49
.text:0000000000004E49 ; ---------------------------------------------------------------------------
.text:0000000000004E4E                 align 10h
.text:0000000000004E50
.text:0000000000004E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E50
.text:0000000000004E50 ; Attributes: info_from_lumina
.text:0000000000004E50
.text:0000000000004E50 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004E50                 public xmemdup
.text:0000000000004E50 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004E50                                         ; xstrdup+11↓j
.text:0000000000004E50 ; __unwind {
.text:0000000000004E50                 push    rbp
.text:0000000000004E51                 push    rbx
.text:0000000000004E52                 mov     rbp, rdi
.text:0000000000004E55                 mov     rdi, rsi
.text:0000000000004E58                 mov     rbx, rsi
.text:0000000000004E5B                 sub     rsp, 8
.text:0000000000004E5F                 call    xmalloc
.text:0000000000004E64                 add     rsp, 8
.text:0000000000004E68                 mov     rdx, rbx        ; n
.text:0000000000004E6B                 mov     rsi, rbp        ; src
.text:0000000000004E6E                 pop     rbx
.text:0000000000004E6F                 pop     rbp
.text:0000000000004E70                 mov     rdi, rax        ; dest
.text:0000000000004E73                 jmp     _memcpy
.text:0000000000004E73 ; } // starts at 4E50
.text:0000000000004E73 xmemdup         endp
.text:0000000000004E73
.text:0000000000004E73 ; ---------------------------------------------------------------------------
.text:0000000000004E78                 align 20h
.text:0000000000004E80
.text:0000000000004E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E80
.text:0000000000004E80
.text:0000000000004E80 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004E80                 public xstrdup
.text:0000000000004E80 xstrdup         proc near
.text:0000000000004E80 ; __unwind {
.text:0000000000004E80                 push    rbx
.text:0000000000004E81                 mov     rbx, rdi
.text:0000000000004E84                 call    _strlen
.text:0000000000004E89                 mov     rdi, rbx        ; src
.text:0000000000004E8C                 lea     rsi, [rax+1]    ; n
.text:0000000000004E90                 pop     rbx
.text:0000000000004E91                 jmp     short xmemdup
.text:0000000000004E91 ; } // starts at 4E80
.text:0000000000004E91 xstrdup         endp
.text:0000000000004E91
.text:0000000000004E91 ; ---------------------------------------------------------------------------
.text:0000000000004E93                 align 20h
.text:0000000000004EA0
.text:0000000000004EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EA0
.text:0000000000004EA0 ; Attributes: noreturn info_from_lumina
.text:0000000000004EA0
.text:0000000000004EA0 ; void __cdecl xalloc_die()
.text:0000000000004EA0                 public xalloc_die
.text:0000000000004EA0 xalloc_die      proc near               ; CODE XREF: mode_compile:loc_26C9↑p
.text:0000000000004EA0                                         ; quotearg_n_options:loc_3E76↑p ...
.text:0000000000004EA0 ; __unwind {
.text:0000000000004EA0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004EA7                 sub     rsp, 8
.text:0000000000004EAB                 mov     edx, 5          ; category
.text:0000000000004EB0                 xor     edi, edi        ; domainname
.text:0000000000004EB2                 call    _dcgettext
.text:0000000000004EB7                 mov     edi, cs:exit_failure ; status
.text:0000000000004EBD                 lea     rdx, format     ; format
.text:0000000000004EC4                 mov     rcx, rax
.text:0000000000004EC7                 xor     esi, esi        ; errnum
.text:0000000000004EC9                 xor     eax, eax
.text:0000000000004ECB                 call    _error
.text:0000000000004ED0                 call    _abort
.text:0000000000004ED0 ; } // starts at 4EA0
.text:0000000000004ED0 xalloc_die      endp
.text:0000000000004ED0
.text:0000000000004ED0 ; ---------------------------------------------------------------------------
.text:0000000000004ED5                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EE0
.text:0000000000004EE0
.text:0000000000004EE0 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000004EE0                 public xstrtoumax
.text:0000000000004EE0 xstrtoumax      proc near               ; CODE XREF: main+357↑p
.text:0000000000004EE0                                         ; main+382↑p
.text:0000000000004EE0
.text:0000000000004EE0 base            = dword ptr -50h
.text:0000000000004EE0 endptr          = qword ptr -48h
.text:0000000000004EE0 var_40          = qword ptr -40h
.text:0000000000004EE0
.text:0000000000004EE0 ; __unwind {
.text:0000000000004EE0                 push    r15
.text:0000000000004EE2                 push    r14
.text:0000000000004EE4                 push    r13
.text:0000000000004EE6                 push    r12
.text:0000000000004EE8                 push    rbp
.text:0000000000004EE9                 push    rbx
.text:0000000000004EEA                 sub     rsp, 28h
.text:0000000000004EEE                 mov     rax, fs:28h
.text:0000000000004EF7                 mov     [rsp+58h+var_40], rax
.text:0000000000004EFC                 xor     eax, eax
.text:0000000000004EFE                 cmp     edx, 24h ; '$'
.text:0000000000004F01                 ja      loc_5265
.text:0000000000004F07                 lea     rax, [rsp+58h+endptr]
.text:0000000000004F0C                 mov     r15, rsi
.text:0000000000004F0F                 test    rsi, rsi
.text:0000000000004F12                 mov     rbp, rdi
.text:0000000000004F15                 mov     [rsp+58h+base], edx
.text:0000000000004F19                 mov     r14, rcx
.text:0000000000004F1C                 mov     r13, r8
.text:0000000000004F1F                 cmovz   r15, rax
.text:0000000000004F23                 call    ___errno_location
.text:0000000000004F28                 mov     dword ptr [rax], 0
.text:0000000000004F2E                 mov     r12, rax
.text:0000000000004F31                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000004F35                 call    ___ctype_b_loc
.text:0000000000004F3A                 mov     edx, [rsp+58h+base] ; base
.text:0000000000004F3E                 mov     rsi, [rax]
.text:0000000000004F41                 mov     rax, rbp
.text:0000000000004F44                 jmp     short loc_4F57
.text:0000000000004F44 ; ---------------------------------------------------------------------------
.text:0000000000004F46                 align 10h
.text:0000000000004F50
.text:0000000000004F50 loc_4F50:                               ; CODE XREF: xstrtoumax+7F↓j
.text:0000000000004F50                 add     rax, 1
.text:0000000000004F54                 movzx   ebx, byte ptr [rax]
.text:0000000000004F57
.text:0000000000004F57 loc_4F57:                               ; CODE XREF: xstrtoumax+64↑j
.text:0000000000004F57                 movzx   ecx, bl
.text:0000000000004F5A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:0000000000004F5F                 jnz     short loc_4F50
.text:0000000000004F61                 cmp     bl, 2Dh ; '-'
.text:0000000000004F64                 jz      short loc_4FB8
.text:0000000000004F66                 xor     ecx, ecx        ; group
.text:0000000000004F68                 mov     rsi, r15        ; endptr
.text:0000000000004F6B                 mov     rdi, rbp        ; nptr
.text:0000000000004F6E                 call    ___strtoul_internal
.text:0000000000004F73                 mov     rcx, [r15]
.text:0000000000004F76                 mov     rbx, rax
.text:0000000000004F79                 cmp     rcx, rbp
.text:0000000000004F7C                 jz      short loc_4FA8
.text:0000000000004F7E                 mov     eax, [r12]
.text:0000000000004F82                 test    eax, eax
.text:0000000000004F84                 jz      short loc_4FE8
.text:0000000000004F86                 cmp     eax, 22h ; '"'
.text:0000000000004F89                 mov     ebp, 1
.text:0000000000004F8E                 jnz     short loc_4FB8
.text:0000000000004F90
.text:0000000000004F90 loc_4F90:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000004F90                 test    r13, r13
.text:0000000000004F93                 jz      short loc_4F9E
.text:0000000000004F95                 movzx   r12d, byte ptr [rcx]
.text:0000000000004F99                 test    r12b, r12b
.text:0000000000004F9C                 jnz     short loc_5017
.text:0000000000004F9E
.text:0000000000004F9E loc_4F9E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:0000000000004F9E                 mov     [r14], rbx
.text:0000000000004FA1                 jmp     short loc_4FBD
.text:0000000000004FA1 ; ---------------------------------------------------------------------------
.text:0000000000004FA3                 align 8
.text:0000000000004FA8
.text:0000000000004FA8 loc_4FA8:                               ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000004FA8                 test    r13, r13
.text:0000000000004FAB                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000004FB0                 jnz     short loc_4FF0
.text:0000000000004FB2                 nop     word ptr [rax+rax+00h]
.text:0000000000004FB8
.text:0000000000004FB8 loc_4FB8:                               ; CODE XREF: xstrtoumax+84↑j
.text:0000000000004FB8                                         ; xstrtoumax+AE↑j ...
.text:0000000000004FB8                 mov     ebp, 4
.text:0000000000004FBD
.text:0000000000004FBD loc_4FBD:                               ; CODE XREF: xstrtoumax+C1↑j
.text:0000000000004FBD                                         ; xstrtoumax+217↓j ...
.text:0000000000004FBD                 mov     rdi, [rsp+58h+var_40]
.text:0000000000004FC2                 xor     rdi, fs:28h
.text:0000000000004FCB                 mov     eax, ebp
.text:0000000000004FCD                 jnz     loc_5260
.text:0000000000004FD3                 add     rsp, 28h
.text:0000000000004FD7                 pop     rbx
.text:0000000000004FD8                 pop     rbp
.text:0000000000004FD9                 pop     r12
.text:0000000000004FDB                 pop     r13
.text:0000000000004FDD                 pop     r14
.text:0000000000004FDF                 pop     r15
.text:0000000000004FE1                 retn
.text:0000000000004FE1 ; ---------------------------------------------------------------------------
.text:0000000000004FE2                 align 8
.text:0000000000004FE8
.text:0000000000004FE8 loc_4FE8:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000004FE8                 xor     ebp, ebp
.text:0000000000004FEA                 jmp     short loc_4F90
.text:0000000000004FEA ; ---------------------------------------------------------------------------
.text:0000000000004FEC                 align 10h
.text:0000000000004FF0
.text:0000000000004FF0 loc_4FF0:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000004FF0                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000004FF5                 test    r12b, r12b
.text:0000000000004FF8                 jz      short loc_4FB8
.text:0000000000004FFA                 movsx   esi, r12b       ; c
.text:0000000000004FFE                 mov     rdi, r13        ; s
.text:0000000000005001                 xor     ebp, ebp
.text:0000000000005003                 call    _strchr
.text:0000000000005008                 test    rax, rax
.text:000000000000500B                 mov     ebx, 1
.text:0000000000005010                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005015                 jz      short loc_4FB8
.text:0000000000005017
.text:0000000000005017 loc_5017:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000005017                 movsx   esi, r12b       ; c
.text:000000000000501B                 mov     rdi, r13        ; s
.text:000000000000501E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000005023                 call    _strchr
.text:0000000000005028                 test    rax, rax
.text:000000000000502B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005030                 jz      def_50B6        ; jumptable 00000000000050B6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000005036                 lea     eax, [r12-45h]
.text:000000000000503B                 cmp     al, 2Fh ; '/'
.text:000000000000503D                 ja      short loc_5090
.text:000000000000503F                 mov     rdx, 814400308945h
.text:0000000000005049                 bt      rdx, rax
.text:000000000000504D                 jnb     short loc_5090
.text:000000000000504F                 mov     esi, 30h ; '0'  ; c
.text:0000000000005054                 mov     rdi, r13        ; s
.text:0000000000005057                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000505C                 call    _strchr
.text:0000000000005061                 test    rax, rax
.text:0000000000005064                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005069                 jz      short loc_5090
.text:000000000000506B                 movzx   eax, byte ptr [rcx+1]
.text:000000000000506F                 cmp     al, 44h ; 'D'
.text:0000000000005071                 jz      short loc_507F
.text:0000000000005073                 cmp     al, 69h ; 'i'
.text:0000000000005075                 jz      loc_5248
.text:000000000000507B                 cmp     al, 42h ; 'B'
.text:000000000000507D                 jnz     short loc_5090
.text:000000000000507F
.text:000000000000507F loc_507F:                               ; CODE XREF: xstrtoumax+191↑j
.text:000000000000507F                 mov     edi, 2
.text:0000000000005084                 mov     esi, 3E8h
.text:0000000000005089                 jmp     short loc_509A
.text:0000000000005089 ; ---------------------------------------------------------------------------
.text:000000000000508B                 align 10h
.text:0000000000005090
.text:0000000000005090 loc_5090:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000005090                                         ; xstrtoumax+16D↑j ...
.text:0000000000005090                 mov     edi, 1
.text:0000000000005095                 mov     esi, 400h
.text:000000000000509A
.text:000000000000509A loc_509A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:000000000000509A                                         ; xstrtoumax+37B↓j
.text:000000000000509A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000509E                 cmp     r12b, 35h
.text:00000000000050A2                 ja      short def_50B6  ; jumptable 00000000000050B6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000050A4                 lea     rdx, jpt_50B6
.text:00000000000050AB                 movzx   r12d, r12b
.text:00000000000050AF                 movsxd  rax, ds:(jpt_50B6 - 6808h)[rdx+r12*4]
.text:00000000000050B3                 add     rax, rdx
.text:00000000000050B6                 jmp     rax             ; switch jump
.text:00000000000050B8 ; ---------------------------------------------------------------------------
.text:00000000000050B8
.text:00000000000050B8 loc_50B8:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000050B8                                         ; DATA XREF: .rodata:jpt_50B6↓o
.text:00000000000050B8                 mov     rax, rbx        ; jumptable 00000000000050B6 cases 77,109
.text:00000000000050BB                 mul     rsi
.text:00000000000050BE                 jo      loc_52B1
.text:00000000000050C4                 xor     r8d, r8d
.text:00000000000050C7
.text:00000000000050C7 loc_50C7:                               ; CODE XREF: xstrtoumax+34E↓j
.text:00000000000050C7                                         ; xstrtoumax+35E↓j ...
.text:00000000000050C7                 mul     rsi
.text:00000000000050CA                 jo      loc_52A2
.text:00000000000050D0                 mov     rbx, rax
.text:00000000000050D3
.text:00000000000050D3 loc_50D3:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:00000000000050D3                 or      ebp, r8d
.text:00000000000050D6                 db      2Eh
.text:00000000000050D6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000050E0
.text:00000000000050E0 loc_50E0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000050E0                                         ; xstrtoumax+23B↓j ...
.text:00000000000050E0                 movsxd  rdi, edi        ; jumptable 00000000000050B6 case 99
.text:00000000000050E3                 mov     eax, ebp
.text:00000000000050E5                 add     rcx, rdi
.text:00000000000050E8                 or      eax, 2
.text:00000000000050EB                 mov     [r15], rcx
.text:00000000000050EE                 cmp     byte ptr [rcx], 0
.text:00000000000050F1                 mov     [r14], rbx
.text:00000000000050F4                 cmovnz  ebp, eax
.text:00000000000050F7                 jmp     loc_4FBD
.text:00000000000050FC ; ---------------------------------------------------------------------------
.text:00000000000050FC
.text:00000000000050FC def_50B6:                               ; CODE XREF: xstrtoumax+150↑j
.text:00000000000050FC                                         ; xstrtoumax+1C2↑j ...
.text:00000000000050FC                 mov     [r14], rbx      ; jumptable 00000000000050B6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000050FF                 or      ebp, 2
.text:0000000000005102                 jmp     loc_4FBD
.text:0000000000005107 ; ---------------------------------------------------------------------------
.text:0000000000005107
.text:0000000000005107 loc_5107:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005107                                         ; DATA XREF: .rodata:jpt_50B6↓o
.text:0000000000005107                 mov     edx, 2          ; jumptable 00000000000050B6 case 119
.text:000000000000510C                 mov     rax, rdx
.text:000000000000510F                 mul     rbx
.text:0000000000005112                 jo      loc_51AE
.text:0000000000005118                 add     rbx, rbx
.text:000000000000511B                 jmp     short loc_50E0  ; jumptable 00000000000050B6 case 99
.text:000000000000511D ; ---------------------------------------------------------------------------
.text:000000000000511D
.text:000000000000511D loc_511D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000511D                                         ; DATA XREF: .rodata:jpt_50B6↓o
.text:000000000000511D                 mov     edx, 200h       ; jumptable 00000000000050B6 case 98
.text:0000000000005122                 mov     rax, rdx
.text:0000000000005125                 mul     rbx
.text:0000000000005128                 jo      loc_51AE
.text:000000000000512E                 shl     rbx, 9
.text:0000000000005132                 jmp     short loc_50E0  ; jumptable 00000000000050B6 case 99
.text:0000000000005134 ; ---------------------------------------------------------------------------
.text:0000000000005134
.text:0000000000005134 loc_5134:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005134                                         ; DATA XREF: .rodata:jpt_50B6↓o
.text:0000000000005134                 mov     r8d, 7          ; jumptable 00000000000050B6 case 90
.text:000000000000513A                 xor     r9d, r9d
.text:000000000000513D                 nop     dword ptr [rax]
.text:0000000000005140
.text:0000000000005140 loc_5140:                               ; CODE XREF: xstrtoumax+273↓j
.text:0000000000005140                 mov     rax, rbx
.text:0000000000005143                 mul     rsi
.text:0000000000005146                 mov     rbx, rax
.text:0000000000005149                 jo      loc_52DE
.text:000000000000514F
.text:000000000000514F loc_514F:                               ; CODE XREF: xstrtoumax+408↓j
.text:000000000000514F                 sub     r8d, 1
.text:0000000000005153                 jnz     short loc_5140
.text:0000000000005155
.text:0000000000005155 loc_5155:                               ; CODE XREF: xstrtoumax+29D↓j
.text:0000000000005155                                         ; xstrtoumax+2BD↓j ...
.text:0000000000005155                 or      ebp, r9d
.text:0000000000005158                 jmp     short loc_50E0  ; jumptable 00000000000050B6 case 99
.text:000000000000515A ; ---------------------------------------------------------------------------
.text:000000000000515A
.text:000000000000515A loc_515A:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000515A                                         ; DATA XREF: .rodata:jpt_50B6↓o
.text:000000000000515A                 mov     r8d, 8          ; jumptable 00000000000050B6 case 89
.text:0000000000005160                 xor     r9d, r9d
.text:0000000000005163                 nop     dword ptr [rax+rax+00h]
.text:0000000000005168
.text:0000000000005168 loc_5168:                               ; CODE XREF: xstrtoumax+29B↓j
.text:0000000000005168                 mov     rax, rbx
.text:000000000000516B                 mul     rsi
.text:000000000000516E                 mov     rbx, rax
.text:0000000000005171                 jo      loc_52C0
.text:0000000000005177
.text:0000000000005177 loc_5177:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:0000000000005177                 sub     r8d, 1
.text:000000000000517B                 jnz     short loc_5168
.text:000000000000517D                 jmp     short loc_5155
.text:000000000000517F ; ---------------------------------------------------------------------------
.text:000000000000517F
.text:000000000000517F loc_517F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000517F                                         ; DATA XREF: .rodata:jpt_50B6↓o
.text:000000000000517F                 mov     r8d, 4          ; jumptable 00000000000050B6 cases 84,116
.text:0000000000005185                 xor     r9d, r9d
.text:0000000000005188
.text:0000000000005188 loc_5188:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:0000000000005188                 mov     rax, rbx
.text:000000000000518B                 mul     rsi
.text:000000000000518E                 mov     rbx, rax
.text:0000000000005191                 jo      loc_5293
.text:0000000000005197
.text:0000000000005197 loc_5197:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000005197                 sub     r8d, 1
.text:000000000000519B                 jnz     short loc_5188
.text:000000000000519D                 jmp     short loc_5155
.text:000000000000519F ; ---------------------------------------------------------------------------
.text:000000000000519F
.text:000000000000519F loc_519F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000519F                                         ; DATA XREF: .rodata:jpt_50B6↓o
.text:000000000000519F                 mov     rax, rbx        ; jumptable 00000000000050B6 cases 75,107
.text:00000000000051A2                 mul     rsi
.text:00000000000051A5                 mov     rbx, rax
.text:00000000000051A8                 jno     loc_50E0        ; jumptable 00000000000050B6 case 99
.text:00000000000051AE
.text:00000000000051AE loc_51AE:                               ; CODE XREF: xstrtoumax+232↑j
.text:00000000000051AE                                         ; xstrtoumax+248↑j ...
.text:00000000000051AE                 mov     ebp, 1
.text:00000000000051B3                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000051B7                 jmp     loc_50E0        ; jumptable 00000000000050B6 case 99
.text:00000000000051B7 ; ---------------------------------------------------------------------------
.text:00000000000051BC                 align 20h
.text:00000000000051C0
.text:00000000000051C0 loc_51C0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000051C0                                         ; DATA XREF: .rodata:jpt_50B6↓o
.text:00000000000051C0                 mov     r8d, 5          ; jumptable 00000000000050B6 case 80
.text:00000000000051C6                 xor     r9d, r9d
.text:00000000000051C9
.text:00000000000051C9 loc_51C9:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:00000000000051C9                 mov     rax, rbx
.text:00000000000051CC                 mul     rsi
.text:00000000000051CF                 mov     rbx, rax
.text:00000000000051D2                 jo      loc_52CF
.text:00000000000051D8
.text:00000000000051D8 loc_51D8:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:00000000000051D8                 sub     r8d, 1
.text:00000000000051DC                 jnz     short loc_51C9
.text:00000000000051DE                 jmp     loc_5155
.text:00000000000051E3 ; ---------------------------------------------------------------------------
.text:00000000000051E3
.text:00000000000051E3 loc_51E3:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000051E3                                         ; DATA XREF: .rodata:jpt_50B6↓o
.text:00000000000051E3                 mov     r8d, 6          ; jumptable 00000000000050B6 case 69
.text:00000000000051E9                 xor     r9d, r9d
.text:00000000000051EC
.text:00000000000051EC loc_51EC:                               ; CODE XREF: xstrtoumax+31F↓j
.text:00000000000051EC                 mov     rax, rbx
.text:00000000000051EF                 mul     rsi
.text:00000000000051F2                 mov     rbx, rax
.text:00000000000051F5                 jo      loc_5284
.text:00000000000051FB
.text:00000000000051FB loc_51FB:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:00000000000051FB                 sub     r8d, 1
.text:00000000000051FF                 jnz     short loc_51EC
.text:0000000000005201                 jmp     loc_5155
.text:0000000000005206 ; ---------------------------------------------------------------------------
.text:0000000000005206
.text:0000000000005206 loc_5206:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005206                                         ; DATA XREF: .rodata:jpt_50B6↓o
.text:0000000000005206                 mov     edx, 400h       ; jumptable 00000000000050B6 case 66
.text:000000000000520B                 mov     rax, rdx
.text:000000000000520E                 mul     rbx
.text:0000000000005211                 jo      short loc_51AE
.text:0000000000005213                 shl     rbx, 0Ah
.text:0000000000005217                 jmp     loc_50E0        ; jumptable 00000000000050B6 case 99
.text:000000000000521C ; ---------------------------------------------------------------------------
.text:000000000000521C
.text:000000000000521C loc_521C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000521C                                         ; DATA XREF: .rodata:jpt_50B6↓o
.text:000000000000521C                 mov     rax, rbx        ; jumptable 00000000000050B6 cases 71,103
.text:000000000000521F                 mul     rsi
.text:0000000000005222                 jo      loc_52ED
.text:0000000000005228                 xor     r8d, r8d
.text:000000000000522B
.text:000000000000522B loc_522B:                               ; CODE XREF: xstrtoumax+417↓j
.text:000000000000522B                 mul     rsi
.text:000000000000522E                 jno     loc_50C7
.text:0000000000005234                 mov     r8d, 1
.text:000000000000523A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000523E                 jmp     loc_50C7
.text:000000000000523E ; ---------------------------------------------------------------------------
.text:0000000000005243                 align 8
.text:0000000000005248
.text:0000000000005248 loc_5248:                               ; CODE XREF: xstrtoumax+195↑j
.text:0000000000005248                 xor     edi, edi
.text:000000000000524A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000524E                 mov     esi, 400h
.text:0000000000005253                 setz    dil
.text:0000000000005257                 lea     edi, [rdi+rdi+1]
.text:000000000000525B                 jmp     loc_509A
.text:0000000000005260 ; ---------------------------------------------------------------------------
.text:0000000000005260
.text:0000000000005260 loc_5260:                               ; CODE XREF: xstrtoumax+ED↑j
.text:0000000000005260                 call    ___stack_chk_fail
.text:0000000000005265 ; ---------------------------------------------------------------------------
.text:0000000000005265
.text:0000000000005265 loc_5265:                               ; CODE XREF: xstrtoumax+21↑j
.text:0000000000005265                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:000000000000526C                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000005273                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000527A                 mov     edx, 54h ; 'T'  ; line
.text:000000000000527F                 call    ___assert_fail
.text:0000000000005284 ; ---------------------------------------------------------------------------
.text:0000000000005284
.text:0000000000005284 loc_5284:                               ; CODE XREF: xstrtoumax+315↑j
.text:0000000000005284                 mov     r9d, 1
.text:000000000000528A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000528E                 jmp     loc_51FB
.text:0000000000005293 ; ---------------------------------------------------------------------------
.text:0000000000005293
.text:0000000000005293 loc_5293:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:0000000000005293                 mov     r9d, 1
.text:0000000000005299                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000529D                 jmp     loc_5197
.text:00000000000052A2 ; ---------------------------------------------------------------------------
.text:00000000000052A2
.text:00000000000052A2 loc_52A2:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:00000000000052A2                 mov     r8d, 1
.text:00000000000052A8                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000052AC                 jmp     loc_50D3
.text:00000000000052B1 ; ---------------------------------------------------------------------------
.text:00000000000052B1
.text:00000000000052B1 loc_52B1:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:00000000000052B1                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000052B5                 mov     r8d, 1
.text:00000000000052BB                 jmp     loc_50C7
.text:00000000000052C0 ; ---------------------------------------------------------------------------
.text:00000000000052C0
.text:00000000000052C0 loc_52C0:                               ; CODE XREF: xstrtoumax+291↑j
.text:00000000000052C0                 mov     r9d, 1
.text:00000000000052C6                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000052CA                 jmp     loc_5177
.text:00000000000052CF ; ---------------------------------------------------------------------------
.text:00000000000052CF
.text:00000000000052CF loc_52CF:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:00000000000052CF                 mov     r9d, 1
.text:00000000000052D5                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000052D9                 jmp     loc_51D8
.text:00000000000052DE ; ---------------------------------------------------------------------------
.text:00000000000052DE
.text:00000000000052DE loc_52DE:                               ; CODE XREF: xstrtoumax+269↑j
.text:00000000000052DE                 mov     r9d, 1
.text:00000000000052E4                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000052E8                 jmp     loc_514F
.text:00000000000052ED ; ---------------------------------------------------------------------------
.text:00000000000052ED
.text:00000000000052ED loc_52ED:                               ; CODE XREF: xstrtoumax+342↑j
.text:00000000000052ED                 mov     r8d, 1
.text:00000000000052F3                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000052F7                 jmp     loc_522B
.text:00000000000052F7 ; } // starts at 4EE0
.text:00000000000052F7 xstrtoumax      endp
.text:00000000000052F7
.text:00000000000052F7 ; ---------------------------------------------------------------------------
.text:00000000000052FC                 align 20h
.text:0000000000005300
.text:0000000000005300 ; =============== S U B R O U T I N E =======================================
.text:0000000000005300
.text:0000000000005300 ; Attributes: info_from_lumina
.text:0000000000005300
.text:0000000000005300 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005300                 public rpl_mbrtowc
.text:0000000000005300 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005300
.text:0000000000005300 pwc             = dword ptr -34h
.text:0000000000005300 var_30          = qword ptr -30h
.text:0000000000005300
.text:0000000000005300 ; __unwind {
.text:0000000000005300                 push    r13
.text:0000000000005302                 push    r12
.text:0000000000005304                 mov     r13, rsi
.text:0000000000005307                 push    rbp
.text:0000000000005308                 push    rbx
.text:0000000000005309                 mov     rbx, rdi
.text:000000000000530C                 mov     r12, rdx
.text:000000000000530F                 sub     rsp, 18h
.text:0000000000005313                 mov     rax, fs:28h
.text:000000000000531C                 mov     [rsp+38h+var_30], rax
.text:0000000000005321                 xor     eax, eax
.text:0000000000005323                 lea     rax, [rsp+38h+pwc]
.text:0000000000005328                 test    rdi, rdi
.text:000000000000532B                 cmovz   rbx, rax
.text:000000000000532F                 mov     rdi, rbx        ; pwc
.text:0000000000005332                 call    _mbrtowc
.text:0000000000005337                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000533B                 mov     rbp, rax
.text:000000000000533E                 jbe     short loc_5360
.text:0000000000005340                 test    r12, r12
.text:0000000000005343                 jz      short loc_5360
.text:0000000000005345                 xor     edi, edi
.text:0000000000005347                 call    hard_locale
.text:000000000000534C                 test    al, al
.text:000000000000534E                 jnz     short loc_5360
.text:0000000000005350                 movzx   eax, byte ptr [r13+0]
.text:0000000000005355                 mov     ebp, 1
.text:000000000000535A                 mov     [rbx], eax
.text:000000000000535C                 nop     dword ptr [rax+00h]
.text:0000000000005360
.text:0000000000005360 loc_5360:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005360                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005360                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005365                 xor     rdx, fs:28h
.text:000000000000536E                 mov     rax, rbp
.text:0000000000005371                 jnz     short loc_537E
.text:0000000000005373                 add     rsp, 18h
.text:0000000000005377                 pop     rbx
.text:0000000000005378                 pop     rbp
.text:0000000000005379                 pop     r12
.text:000000000000537B                 pop     r13
.text:000000000000537D                 retn
.text:000000000000537E ; ---------------------------------------------------------------------------
.text:000000000000537E
.text:000000000000537E loc_537E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000537E                 call    ___stack_chk_fail
.text:000000000000537E ; } // starts at 5300
.text:000000000000537E rpl_mbrtowc     endp
.text:000000000000537E
.text:000000000000537E ; ---------------------------------------------------------------------------
.text:0000000000005383                 align 10h
.text:0000000000005390
.text:0000000000005390 ; =============== S U B R O U T I N E =======================================
.text:0000000000005390
.text:0000000000005390 ; Attributes: info_from_lumina
.text:0000000000005390
.text:0000000000005390 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005390                 public close_stream
.text:0000000000005390 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005390                                         ; close_stdout+33↑p
.text:0000000000005390 ; __unwind {
.text:0000000000005390                 push    r12
.text:0000000000005392                 push    rbp
.text:0000000000005393                 mov     rbp, rdi
.text:0000000000005396                 push    rbx
.text:0000000000005397                 call    ___fpending
.text:000000000000539C                 mov     ebx, [rbp+0]
.text:000000000000539F                 mov     rdi, rbp        ; stream
.text:00000000000053A2                 mov     r12, rax
.text:00000000000053A5                 call    rpl_fclose
.text:00000000000053AA                 and     ebx, 20h
.text:00000000000053AD                 test    ebx, ebx
.text:00000000000053AF                 jnz     short loc_53C8
.text:00000000000053B1                 test    eax, eax
.text:00000000000053B3                 jz      short loc_53BF
.text:00000000000053B5                 test    r12, r12
.text:00000000000053B8                 mov     eax, 0FFFFFFFFh
.text:00000000000053BD                 jz      short loc_53F8
.text:00000000000053BF
.text:00000000000053BF loc_53BF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000053BF                 pop     rbx
.text:00000000000053C0                 pop     rbp
.text:00000000000053C1                 pop     r12
.text:00000000000053C3                 retn
.text:00000000000053C3 ; ---------------------------------------------------------------------------
.text:00000000000053C4                 align 8
.text:00000000000053C8
.text:00000000000053C8 loc_53C8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000053C8                 test    eax, eax
.text:00000000000053CA                 jnz     short loc_53E8
.text:00000000000053CC                 call    ___errno_location
.text:00000000000053D1                 mov     dword ptr [rax], 0
.text:00000000000053D7                 mov     eax, 0FFFFFFFFh
.text:00000000000053DC                 pop     rbx
.text:00000000000053DD                 pop     rbp
.text:00000000000053DE                 pop     r12
.text:00000000000053E0                 retn
.text:00000000000053E0 ; ---------------------------------------------------------------------------
.text:00000000000053E1                 align 8
.text:00000000000053E8
.text:00000000000053E8 loc_53E8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000053E8                 pop     rbx
.text:00000000000053E9                 mov     eax, 0FFFFFFFFh
.text:00000000000053EE                 pop     rbp
.text:00000000000053EF                 pop     r12
.text:00000000000053F1                 retn
.text:00000000000053F1 ; ---------------------------------------------------------------------------
.text:00000000000053F2                 align 8
.text:00000000000053F8
.text:00000000000053F8 loc_53F8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000053F8                 call    ___errno_location
.text:00000000000053FD                 cmp     dword ptr [rax], 9
.text:0000000000005400                 pop     rbx
.text:0000000000005401                 pop     rbp
.text:0000000000005402                 pop     r12
.text:0000000000005404                 setnz   al
.text:0000000000005407                 movzx   eax, al
.text:000000000000540A                 neg     eax
.text:000000000000540C                 retn
.text:000000000000540C ; } // starts at 5390
.text:000000000000540C close_stream    endp
.text:000000000000540C
.text:000000000000540C ; ---------------------------------------------------------------------------
.text:000000000000540D                 align 10h
.text:0000000000005410
.text:0000000000005410 ; =============== S U B R O U T I N E =======================================
.text:0000000000005410
.text:0000000000005410
.text:0000000000005410                 public hard_locale
.text:0000000000005410 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005410 ; __unwind {
.text:0000000000005410                 sub     rsp, 8
.text:0000000000005414                 xor     esi, esi        ; locale
.text:0000000000005416                 call    _setlocale
.text:000000000000541B                 mov     rdx, rax
.text:000000000000541E                 mov     eax, 1
.text:0000000000005423                 test    rdx, rdx
.text:0000000000005426                 jz      short loc_5445
.text:0000000000005428                 lea     rdi, aC         ; "C"
.text:000000000000542F                 mov     ecx, 2
.text:0000000000005434                 mov     rsi, rdx
.text:0000000000005437                 repe cmpsb
.text:0000000000005439                 setnbe  cl
.text:000000000000543C                 sbb     cl, 0
.text:000000000000543F                 xor     eax, eax
.text:0000000000005441                 test    cl, cl
.text:0000000000005443                 jnz     short loc_5450
.text:0000000000005445
.text:0000000000005445 loc_5445:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005445                 add     rsp, 8
.text:0000000000005449                 retn
.text:0000000000005449 ; ---------------------------------------------------------------------------
.text:000000000000544A                 align 10h
.text:0000000000005450
.text:0000000000005450 loc_5450:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005450                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005457                 mov     ecx, 6
.text:000000000000545C                 mov     rsi, rdx
.text:000000000000545F                 repe cmpsb
.text:0000000000005461                 setnbe  al
.text:0000000000005464                 sbb     al, 0
.text:0000000000005466                 test    al, al
.text:0000000000005468                 setnz   al
.text:000000000000546B                 add     rsp, 8
.text:000000000000546F                 retn
.text:000000000000546F ; } // starts at 5410
.text:000000000000546F hard_locale     endp
.text:000000000000546F
.text:0000000000005470
.text:0000000000005470 ; =============== S U B R O U T I N E =======================================
.text:0000000000005470
.text:0000000000005470
.text:0000000000005470                 public locale_charset
.text:0000000000005470 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005470 ; __unwind {
.text:0000000000005470                 sub     rsp, 8
.text:0000000000005474                 mov     edi, 0Eh        ; item
.text:0000000000005479                 call    _nl_langinfo
.text:000000000000547E                 test    rax, rax
.text:0000000000005481                 jz      short loc_54A0
.text:0000000000005483                 cmp     byte ptr [rax], 0
.text:0000000000005486                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000548D                 cmovz   rax, rdx
.text:0000000000005491                 add     rsp, 8
.text:0000000000005495                 retn
.text:0000000000005495 ; ---------------------------------------------------------------------------
.text:0000000000005496                 align 20h
.text:00000000000054A0
.text:00000000000054A0 loc_54A0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000054A0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000054A7                 add     rsp, 8
.text:00000000000054AB                 retn
.text:00000000000054AB ; } // starts at 5470
.text:00000000000054AB locale_charset  endp
.text:00000000000054AB
.text:00000000000054AB ; ---------------------------------------------------------------------------
.text:00000000000054AC                 align 10h
.text:00000000000054B0
.text:00000000000054B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054B0
.text:00000000000054B0 ; Attributes: info_from_lumina
.text:00000000000054B0
.text:00000000000054B0 ; int __fastcall rpl_fclose(FILE *fp)
.text:00000000000054B0                 public rpl_fclose
.text:00000000000054B0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:00000000000054B0 ; __unwind {
.text:00000000000054B0                 push    r12
.text:00000000000054B2                 push    rbp
.text:00000000000054B3                 push    rbx
.text:00000000000054B4                 mov     rbx, rdi
.text:00000000000054B7                 call    _fileno
.text:00000000000054BC                 test    eax, eax
.text:00000000000054BE                 mov     rdi, rbx        ; fp
.text:00000000000054C1                 js      short loc_5517
.text:00000000000054C3                 call    ___freading
.text:00000000000054C8                 test    eax, eax
.text:00000000000054CA                 jnz     short loc_54F8
.text:00000000000054CC
.text:00000000000054CC loc_54CC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000054CC                 mov     rdi, rbx        ; stream
.text:00000000000054CF                 call    rpl_fflush
.text:00000000000054D4                 test    eax, eax
.text:00000000000054D6                 jz      short loc_5514
.text:00000000000054D8                 call    ___errno_location
.text:00000000000054DD                 mov     r12d, [rax]
.text:00000000000054E0                 mov     rdi, rbx        ; stream
.text:00000000000054E3                 mov     rbp, rax
.text:00000000000054E6                 call    _fclose
.text:00000000000054EB                 test    r12d, r12d
.text:00000000000054EE                 jnz     short loc_5520
.text:00000000000054F0
.text:00000000000054F0 loc_54F0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000054F0                 pop     rbx
.text:00000000000054F1                 pop     rbp
.text:00000000000054F2                 pop     r12
.text:00000000000054F4                 retn
.text:00000000000054F4 ; ---------------------------------------------------------------------------
.text:00000000000054F5                 align 8
.text:00000000000054F8
.text:00000000000054F8 loc_54F8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000054F8                 mov     rdi, rbx        ; stream
.text:00000000000054FB                 call    _fileno
.text:0000000000005500                 xor     esi, esi        ; offset
.text:0000000000005502                 mov     edx, 1          ; whence
.text:0000000000005507                 mov     edi, eax        ; fd
.text:0000000000005509                 call    _lseek
.text:000000000000550E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005512                 jnz     short loc_54CC
.text:0000000000005514
.text:0000000000005514 loc_5514:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005514                 mov     rdi, rbx        ; stream
.text:0000000000005517
.text:0000000000005517 loc_5517:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005517                 pop     rbx
.text:0000000000005518                 pop     rbp
.text:0000000000005519                 pop     r12
.text:000000000000551B                 jmp     _fclose
.text:0000000000005520 ; ---------------------------------------------------------------------------
.text:0000000000005520
.text:0000000000005520 loc_5520:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000005520                 mov     [rbp+0], r12d
.text:0000000000005524                 mov     eax, 0FFFFFFFFh
.text:0000000000005529                 jmp     short loc_54F0
.text:0000000000005529 ; } // starts at 54B0
.text:0000000000005529 rpl_fclose      endp
.text:0000000000005529
.text:0000000000005529 ; ---------------------------------------------------------------------------
.text:000000000000552B                 align 10h
.text:0000000000005530
.text:0000000000005530 ; =============== S U B R O U T I N E =======================================
.text:0000000000005530
.text:0000000000005530 ; Attributes: info_from_lumina
.text:0000000000005530
.text:0000000000005530 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005530                 public rpl_fflush
.text:0000000000005530 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005530 ; __unwind {
.text:0000000000005530                 test    rdi, rdi
.text:0000000000005533                 push    rbx
.text:0000000000005534                 mov     rbx, rdi
.text:0000000000005537                 jz      short loc_554A
.text:0000000000005539                 call    ___freading
.text:000000000000553E                 test    eax, eax
.text:0000000000005540                 jz      short loc_554A
.text:0000000000005542                 test    dword ptr [rbx], 100h
.text:0000000000005548                 jnz     short loc_5558
.text:000000000000554A
.text:000000000000554A loc_554A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000554A                                         ; rpl_fflush+10↑j
.text:000000000000554A                 mov     rdi, rbx        ; stream
.text:000000000000554D                 pop     rbx
.text:000000000000554E                 jmp     _fflush
.text:000000000000554E ; ---------------------------------------------------------------------------
.text:0000000000005553                 align 8
.text:0000000000005558
.text:0000000000005558 loc_5558:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005558                 mov     rdi, rbx
.text:000000000000555B                 mov     edx, 1
.text:0000000000005560                 xor     esi, esi
.text:0000000000005562                 call    rpl_fseeko
.text:0000000000005567                 mov     rdi, rbx        ; stream
.text:000000000000556A                 pop     rbx
.text:000000000000556B                 jmp     _fflush
.text:000000000000556B ; } // starts at 5530
.text:000000000000556B rpl_fflush      endp
.text:000000000000556B
.text:0000000000005570
.text:0000000000005570 ; =============== S U B R O U T I N E =======================================
.text:0000000000005570
.text:0000000000005570 ; Attributes: info_from_lumina
.text:0000000000005570
.text:0000000000005570 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005570                 public rpl_fseeko
.text:0000000000005570 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005570 ; __unwind {
.text:0000000000005570                 mov     rax, [rdi+8]
.text:0000000000005574                 cmp     [rdi+10h], rax
.text:0000000000005578                 jz      short loc_5580
.text:000000000000557A
.text:000000000000557A loc_557A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000557A                                         ; rpl_fseeko+1F↓j
.text:000000000000557A                 jmp     _fseeko
.text:000000000000557A ; ---------------------------------------------------------------------------
.text:000000000000557F                 align 20h
.text:0000000000005580
.text:0000000000005580 loc_5580:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005580                 mov     rax, [rdi+20h]
.text:0000000000005584                 cmp     [rdi+28h], rax
.text:0000000000005588                 jnz     short loc_557A
.text:000000000000558A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000558F                 jnz     short loc_557A
.text:0000000000005591                 push    r12
.text:0000000000005593                 push    rbp
.text:0000000000005594                 mov     r12d, edx
.text:0000000000005597                 push    rbx
.text:0000000000005598                 mov     rbp, rsi
.text:000000000000559B                 mov     rbx, rdi
.text:000000000000559E                 call    _fileno
.text:00000000000055A3                 mov     edx, r12d       ; whence
.text:00000000000055A6                 mov     rsi, rbp        ; offset
.text:00000000000055A9                 mov     edi, eax        ; fd
.text:00000000000055AB                 call    _lseek
.text:00000000000055B0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000055B4                 jz      short loc_55C2
.text:00000000000055B6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:00000000000055B9                 mov     [rbx+90h], rax
.text:00000000000055C0                 xor     eax, eax
.text:00000000000055C2
.text:00000000000055C2 loc_55C2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000055C2                 pop     rbx
.text:00000000000055C3                 pop     rbp
.text:00000000000055C4                 pop     r12
.text:00000000000055C6                 retn
.text:00000000000055C6 ; } // starts at 5570
.text:00000000000055C6 rpl_fseeko      endp
.text:00000000000055C6
.text:00000000000055C6 ; ---------------------------------------------------------------------------
.text:00000000000055C7                 align 10h
.text:00000000000055D0
.text:00000000000055D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055D0
.text:00000000000055D0 ; Attributes: info_from_lumina
.text:00000000000055D0
.text:00000000000055D0 ; void _libc_csu_init(void)
.text:00000000000055D0                 public __libc_csu_init
.text:00000000000055D0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000055D0 ; __unwind {
.text:00000000000055D0                 push    r15
.text:00000000000055D2                 push    r14
.text:00000000000055D4                 mov     r15, rdx
.text:00000000000055D7                 push    r13
.text:00000000000055D9                 push    r12
.text:00000000000055DB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000055E2                 push    rbp
.text:00000000000055E3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000055EA                 push    rbx
.text:00000000000055EB                 mov     r13d, edi
.text:00000000000055EE                 mov     r14, rsi
.text:00000000000055F1                 sub     rbp, r12
.text:00000000000055F4                 sub     rsp, 8
.text:00000000000055F8                 sar     rbp, 3
.text:00000000000055FC                 call    _init_proc
.text:0000000000005601                 test    rbp, rbp
.text:0000000000005604                 jz      short loc_5626
.text:0000000000005606                 xor     ebx, ebx
.text:0000000000005608                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005610
.text:0000000000005610 loc_5610:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000005610                 mov     rdx, r15
.text:0000000000005613                 mov     rsi, r14
.text:0000000000005616                 mov     edi, r13d
.text:0000000000005619                 call    ds:(__frame_dummy_init_array_entry - 207B50h)[r12+rbx*8]
.text:000000000000561D                 add     rbx, 1
.text:0000000000005621                 cmp     rbp, rbx
.text:0000000000005624                 jnz     short loc_5610
.text:0000000000005626
.text:0000000000005626 loc_5626:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000005626                 add     rsp, 8
.text:000000000000562A                 pop     rbx
.text:000000000000562B                 pop     rbp
.text:000000000000562C                 pop     r12
.text:000000000000562E                 pop     r13
.text:0000000000005630                 pop     r14
.text:0000000000005632                 pop     r15
.text:0000000000005634                 retn
.text:0000000000005634 ; } // starts at 55D0
.text:0000000000005634 __libc_csu_init endp
.text:0000000000005634
.text:0000000000005634 ; ---------------------------------------------------------------------------
.text:0000000000005635                 align 20h
.text:0000000000005640
.text:0000000000005640 ; =============== S U B R O U T I N E =======================================
.text:0000000000005640
.text:0000000000005640
.text:0000000000005640 ; void _libc_csu_fini(void)
.text:0000000000005640                 public __libc_csu_fini
.text:0000000000005640 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000005640 ; __unwind {
.text:0000000000005640                 rep retn
.text:0000000000005640 ; } // starts at 5640
.text:0000000000005640 __libc_csu_fini endp
.text:0000000000005640
.text:0000000000005640 ; ---------------------------------------------------------------------------
.text:0000000000005642                 align 10h
.text:0000000000005650
.text:0000000000005650 ; =============== S U B R O U T I N E =======================================
.text:0000000000005650
.text:0000000000005650
.text:0000000000005650 atexit          proc near               ; CODE XREF: main+6D↑p
.text:0000000000005650 ; __unwind {
.text:0000000000005650                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000005657                 xor     esi, esi        ; obj
.text:0000000000005659                 jmp     ___cxa_atexit
.text:0000000000005659 ; } // starts at 5650
.text:0000000000005659 atexit          endp
.text:0000000000005659
.text:0000000000005659 _text           ends
.text:0000000000005659
LOAD:000000000000565E ; ===========================================================================
LOAD:000000000000565E
LOAD:000000000000565E ; Segment type: Pure code
LOAD:000000000000565E ; Segment permissions: Read/Execute
LOAD:000000000000565E LOAD            segment byte public 'CODE' use64
LOAD:000000000000565E                 assume cs:LOAD
LOAD:000000000000565E                 ;org 565Eh
LOAD:000000000000565E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000565E                 align 20h
LOAD:000000000000565E LOAD            ends
LOAD:000000000000565E
.fini:0000000000005660 ; ===========================================================================
.fini:0000000000005660
.fini:0000000000005660 ; Segment type: Pure code
.fini:0000000000005660 ; Segment permissions: Read/Execute
.fini:0000000000005660 _fini           segment dword public 'CODE' use64
.fini:0000000000005660                 assume cs:_fini
.fini:0000000000005660                 ;org 5660h
.fini:0000000000005660                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000005660
.fini:0000000000005660 ; =============== S U B R O U T I N E =======================================
.fini:0000000000005660
.fini:0000000000005660
.fini:0000000000005660                 public _term_proc
.fini:0000000000005660 _term_proc      proc near
.fini:0000000000005660                 sub     rsp, 8          ; _fini
.fini:0000000000005664                 add     rsp, 8
.fini:0000000000005668                 retn
.fini:0000000000005668 _term_proc      endp
.fini:0000000000005668
.fini:0000000000005668 _fini           ends
.fini:0000000000005668
LOAD:0000000000005669 ; ===========================================================================
LOAD:0000000000005669
LOAD:0000000000005669 ; Segment type: Pure code
LOAD:0000000000005669 ; Segment permissions: Read/Execute
LOAD:0000000000005669 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005669                 assume cs:LOAD
LOAD:0000000000005669                 ;org 5669h
LOAD:0000000000005669                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005669                 align 20h
LOAD:0000000000005669 LOAD            ends
LOAD:0000000000005669
.rodata:0000000000005680 ; ===========================================================================
.rodata:0000000000005680
.rodata:0000000000005680 ; Segment type: Pure data
.rodata:0000000000005680 ; Segment permissions: Read
.rodata:0000000000005680 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005680                 assume cs:_rodata
.rodata:0000000000005680                 ;org 5680h
.rodata:0000000000005680                 public _IO_stdin_used
.rodata:0000000000005680 _IO_stdin_used  db    1
.rodata:0000000000005681                 db    0
.rodata:0000000000005682                 db    2
.rodata:0000000000005683                 db    0
.rodata:0000000000005684 aMknod          db 'mknod',0            ; DATA XREF: main+E7↑o
.rodata:0000000000005684                                         ; usage+1A0↑o ...
.rodata:000000000000568A asc_568A        db '[',0                ; DATA XREF: usage+1D5↑o
.rodata:000000000000568C aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1FC↑o
.rodata:000000000000569C aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000569C                                         ; DATA XREF: usage+22C↑o
.rodata:000000000000569C                                         ; usage+324↑o ...
.rodata:00000000000056B2 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+23D↑o
.rodata:00000000000056BC aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+249↑o
.rodata:00000000000056CB aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1DC↑o
.rodata:00000000000056D5 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+208↑o
.rodata:00000000000056DF aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+220↑o
.rodata:00000000000056E9 ; const char aSOnlineHelpS[]
.rodata:00000000000056E9 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+292↑o
.rodata:00000000000056E9                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000005700 unk_5700        db  47h ; G             ; DATA XREF: main+E0↑o
.rodata:0000000000005700                                         ; usage+2AE↑o ...
.rodata:0000000000005701                 db  4Eh ; N
.rodata:0000000000005702                 db  55h ; U
.rodata:0000000000005703                 db  20h
.rodata:0000000000005704 ; const char domainname[]
.rodata:0000000000005704 domainname      db 'coreutils',0        ; DATA XREF: main+4E↑o
.rodata:0000000000005704                                         ; main+5A↑o ...
.rodata:000000000000570E ; const char s2[]
.rodata:000000000000570E s2              db 'en_',0              ; DATA XREF: usage+2D5↑o
.rodata:000000000000570E                                         ; usage+396↑o
.rodata:0000000000005712 ; const char aFullDocumentat[]
.rodata:0000000000005712 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000005712                                         ; DATA XREF: usage:loc_2141↑o
.rodata:0000000000005712                                         ; usage:loc_21FE↑o
.rodata:000000000000572D ; const char dirname[]
.rodata:000000000000572D dirname         db '/usr/local/share/locale',0
.rodata:000000000000572D                                         ; DATA XREF: main+47↑o
.rodata:0000000000005745 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+D9↑o
.rodata:0000000000005755 ; const char shortopts[]
.rodata:0000000000005755 shortopts       db 'm:Z',0              ; DATA XREF: main:loc_1732↑o
.rodata:0000000000005759 ; const char aInvalidMode[]
.rodata:0000000000005759 aInvalidMode    db 'invalid mode',0     ; DATA XREF: main:loc_1D1A↑o
.rodata:0000000000005759                                         ; .data.rel.ro:0000000000207B80↓o
.rodata:0000000000005766 ; const char aMissingOperand[]
.rodata:0000000000005766 aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_1B4D↑o
.rodata:0000000000005776 ; const char aInvalidDeviceS[]
.rodata:0000000000005776 aInvalidDeviceS db 'invalid device %s %s',0
.rodata:0000000000005776                                         ; DATA XREF: main:loc_1BD7↑o
.rodata:000000000000578B aInvalidDeviceT db 'invalid device type %s',0
.rodata:000000000000578B                                         ; DATA XREF: main+470↑o
.rodata:00000000000057A2 ; const char aCannotSetPermi[]
.rodata:00000000000057A2 aCannotSetPermi db 'cannot set permissions of %s',0
.rodata:00000000000057A2                                         ; DATA XREF: main+5AB↑o
.rodata:00000000000057BF ; const char aExtraOperandS[]
.rodata:00000000000057BF aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+1DF↑o
.rodata:00000000000057BF                                         ; main+302↑o
.rodata:00000000000057D0 ; const char aMissingOperand_0[]
.rodata:00000000000057D0 aMissingOperand_0 db 'missing operand after %s',0
.rodata:00000000000057D0                                         ; DATA XREF: main+553↑o
.rodata:00000000000057D0                                         ; main+5EA↑o
.rodata:00000000000057E9 aContext        db 'context',0          ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:00000000000057F1 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000207BA0↓o
.rodata:00000000000057F6 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207BC0↓o
.rodata:00000000000057FE                 align 20h
.rodata:0000000000005800 ; const char aTrySHelpForMor[]
.rodata:0000000000005800 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000005800                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000005827                 align 8
.rodata:0000000000005828 ; const char aUsageSOptionNa[]
.rodata:0000000000005828 aUsageSOptionNa db 'Usage: %s [OPTION]... NAME TYPE [MAJOR MINOR]',0Ah,0
.rodata:0000000000005828                                         ; DATA XREF: usage:loc_1EAD↑o
.rodata:0000000000005857                 align 8
.rodata:0000000000005858 ; const char aCreateTheSpeci[]
.rodata:0000000000005858 aCreateTheSpeci db 'Create the special file NAME of the given TYPE.',0Ah,0
.rodata:0000000000005858                                         ; DATA XREF: usage+84↑o
.rodata:0000000000005889                 align 10h
.rodata:0000000000005890 ; const char aMandatoryArgum[]
.rodata:0000000000005890 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000005890                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000005890                 db 'ns too.',0Ah,0
.rodata:00000000000058DB                 align 20h
.rodata:00000000000058E0 ; const char aMModeModeSetFi[]
.rodata:00000000000058E0 aMModeModeSetFi db '  -m, --mode=MODE    set file permission bits to MODE, not a=rw -'
.rodata:00000000000058E0                                         ; DATA XREF: usage+CE↑o
.rodata:00000000000058E0                 db ' umask',0Ah,0
.rodata:0000000000005929                 align 10h
.rodata:0000000000005930 ; const char aZSetTheSelinux[]
.rodata:0000000000005930 aZSetTheSelinux db '  -Z                   set the SELinux security context to defaul'
.rodata:0000000000005930                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000005930                 db 't type',0Ah
.rodata:0000000000005930                 db '      --context[=CTX]  like -Z, or if CTX is specified then set t'
.rodata:0000000000005930                 db 'he SELinux',0Ah
.rodata:0000000000005930                 db '                         or SMACK security context to CTX',0Ah,0
.rodata:00000000000059FF                 align 20h
.rodata:0000000000005A00 ; const char aHelpDisplayThi[]
.rodata:0000000000005A00 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005A00                                         ; DATA XREF: usage+118↑o
.rodata:0000000000005A2D                 align 10h
.rodata:0000000000005A30 ; const char aVersionOutputV[]
.rodata:0000000000005A30 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000005A30                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000005A66                 align 8
.rodata:0000000000005A68 ; const char aBothMajorAndMi[]
.rodata:0000000000005A68 aBothMajorAndMi db 0Ah                  ; DATA XREF: usage+162↑o
.rodata:0000000000005A68                 db 'Both MAJOR and MINOR must be specified when TYPE is b, c, or u, a'
.rodata:0000000000005A68                 db 'nd they',0Ah
.rodata:0000000000005A68                 db 'must be omitted when TYPE is p.  If MAJOR or MINOR begins with 0x'
.rodata:0000000000005A68                 db ' or 0X,',0Ah
.rodata:0000000000005A68                 db 'it is interpreted as hexadecimal; otherwise, if it begins with 0,'
.rodata:0000000000005A68                 db ' as octal;',0Ah
.rodata:0000000000005A68                 db 'otherwise, as decimal.  TYPE may be:',0Ah,0
.rodata:0000000000005B6D                 align 10h
.rodata:0000000000005B70 ; const char aBCreateABlockB[]
.rodata:0000000000005B70 aBCreateABlockB db 0Ah                  ; DATA XREF: usage+187↑o
.rodata:0000000000005B70                 db '  b      create a block (buffered) special file',0Ah
.rodata:0000000000005B70                 db '  c, u   create a character (unbuffered) special file',0Ah
.rodata:0000000000005B70                 db '  p      create a FIFO',0Ah,0
.rodata:0000000000005BEF                 align 10h
.rodata:0000000000005BF0 ; const char aNoteYourShellM[]
.rodata:0000000000005BF0 aNoteYourShellM db 0Ah                  ; DATA XREF: usage+1AC↑o
.rodata:0000000000005BF0                 db 'NOTE: your shell may have its own version of %s, which usually su'
.rodata:0000000000005BF0                 db 'persedes',0Ah
.rodata:0000000000005BF0                 db 'the version described here.  Please refer to your shell',27h,'s d'
.rodata:0000000000005BF0                 db 'ocumentation',0Ah
.rodata:0000000000005BF0                 db 'for details about the options it supports.',0Ah,0
.rodata:0000000000005CAF                 align 10h
.rodata:0000000000005CB0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000005CB0                                         ; DATA XREF: usage+2A7↑o
.rodata:0000000000005CB0                                         ; usage+30B↑o ...
.rodata:0000000000005CD8 ; const char aReportAnyTrans[]
.rodata:0000000000005CD8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000005CD8                                         ; DATA XREF: usage+3FF↑o
.rodata:0000000000005CD8                 db 'am/>',0Ah,0
.rodata:0000000000005D1F                 align 20h
.rodata:0000000000005D20 ; const char aOrAvailableLoc[]
.rodata:0000000000005D20 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005D20                                         ; DATA XREF: usage:loc_2186↑o
.rodata:0000000000005D53                 align 8
.rodata:0000000000005D58 ; const char msgid[]
.rodata:0000000000005D58 msgid           db 'warning: ignoring --context; it requires an SELinux/SMACK-enabled'
.rodata:0000000000005D58                                         ; DATA XREF: main+10E↑o
.rodata:0000000000005D58                 db ' kernel',0
.rodata:0000000000005DA1                 align 8
.rodata:0000000000005DA8 ; const char aModeMustSpecif[]
.rodata:0000000000005DA8 aModeMustSpecif db 'mode must specify only file permission bits',0
.rodata:0000000000005DA8                                         ; DATA XREF: main:loc_1CF6↑o
.rodata:0000000000005DD4                 align 8
.rodata:0000000000005DD8 aSpecialFilesRe db 'Special files require major and minor device numbers.',0
.rodata:0000000000005DD8                                         ; DATA XREF: main+625↑o
.rodata:0000000000005E0E                 align 10h
.rodata:0000000000005E10 ; const char aFifosDoNotHave[]
.rodata:0000000000005E10 aFifosDoNotHave db 'Fifos do not have major and minor device numbers.',0
.rodata:0000000000005E10                                         ; DATA XREF: main+211↑o
.rodata:0000000000005E42                 align 8
.rodata:0000000000005E48 ; const char aInvalidMajorDe[]
.rodata:0000000000005E48 aInvalidMajorDe db 'invalid major device number %s',0
.rodata:0000000000005E48                                         ; DATA XREF: main+4ED↑o
.rodata:0000000000005E67                 align 8
.rodata:0000000000005E68 ; const char aInvalidMinorDe[]
.rodata:0000000000005E68 aInvalidMinorDe db 'invalid minor device number %s',0
.rodata:0000000000005E68                                         ; DATA XREF: main+4BB↑o
.rodata:0000000000005E87 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000005E8C ; const char aWriteError[]
.rodata:0000000000005E8C aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_22E3↑o
.rodata:0000000000005E98 ; const char aS[4]
.rodata:0000000000005E98 aS              db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000005E9C ; const char format[]
.rodata:0000000000005E9C format          dd offset unk_7325      ; DATA XREF: main+435↑o
.rodata:0000000000005E9C                                         ; main+580↑o ...
.rodata:0000000000005EA0 jpt_2584        dd offset loc_2590 - 5EA0h
.rodata:0000000000005EA0                                         ; DATA XREF: mode_compile+74↑o
.rodata:0000000000005EA0                                         ; mode_compile+22C↑r
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h ; jump table for switch statement
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset loc_2600 - 5EA0h
.rodata:0000000000005EA0                 dd offset loc_25F0 - 5EA0h
.rodata:0000000000005EA0                 dd offset loc_25E0 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset def_2584 - 5EA0h
.rodata:0000000000005EA0                 dd offset loc_25D0 - 5EA0h
.rodata:0000000000005EA0                 dd offset loc_25C8 - 5EA0h
.rodata:0000000000005F24                 align 8
.rodata:0000000000005F28 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000005F28                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000005F60 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000005F68 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000005F6C unk_5F6C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000005F6D                 db  80h
.rodata:0000000000005F6E                 db  98h
.rodata:0000000000005F6F                 db    0
.rodata:0000000000005F70 unk_5F70        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000005F71                 db  80h
.rodata:0000000000005F72                 db  99h
.rodata:0000000000005F73                 db    0
.rodata:0000000000005F74 unk_5F74        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000005F75                 db    7
.rodata:0000000000005F76                 db  65h ; e
.rodata:0000000000005F77                 db    0
.rodata:0000000000005F78 unk_5F78        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000005F79                 db 0AFh
.rodata:0000000000005F7A                 db    0
.rodata:0000000000005F7B unk_5F7B        db  22h ; "             ; DATA XREF: gettext_quote:loc_29C0↑o
.rodata:0000000000005F7B                                         ; quotearg_buffer_restyled:loc_377B↑o ...
.rodata:0000000000005F7C                 db    0
.rodata:0000000000005F7D ; const char asc_5F7D[2]
.rodata:0000000000005F7D asc_5F7D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000005F7D                                         ; quotearg_buffer_restyled:loc_2B43↑o ...
.rodata:0000000000005F7F ; const char asc_5F7F[2]
.rodata:0000000000005F7F asc_5F7F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000005F7F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005F81 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005F89 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207C08↓o
.rodata:0000000000005F8F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207C10↓o
.rodata:0000000000005F9C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207C18↓o
.rodata:0000000000005F9C                                         ; .data.rel.ro:0000000000207C38↓o
.rodata:0000000000005FA9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005FA9                                         ; DATA XREF: .data.rel.ro:0000000000207C20↓o
.rodata:0000000000005FBD aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000207C28↓o
.rodata:0000000000005FBF aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207C30↓o
.rodata:0000000000005FC7 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207C48↓o
.rodata:0000000000005FCF                 align 20h
.rodata:0000000000005FE0 jpt_2B21        dd offset loc_38CA - 5FE0h
.rodata:0000000000005FE0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005FE0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005FE0                 dd offset loc_2B23 - 5FE0h ; jump table for switch statement
.rodata:0000000000005FE0                 dd offset loc_3AF8 - 5FE0h
.rodata:0000000000005FE0                 dd offset loc_3904 - 5FE0h
.rodata:0000000000005FE0                 dd offset loc_36F4 - 5FE0h
.rodata:0000000000005FE0                 dd offset loc_3750 - 5FE0h
.rodata:0000000000005FE0                 dd offset loc_37A5 - 5FE0h
.rodata:0000000000005FE0                 dd offset loc_37EA - 5FE0h
.rodata:0000000000005FE0                 dd offset loc_3824 - 5FE0h
.rodata:0000000000005FE0                 dd offset loc_3824 - 5FE0h
.rodata:0000000000005FE0                 dd offset loc_3824 - 5FE0h
.rodata:000000000000600C jpt_2C7E        dd offset loc_2EA0 - 600Ch, offset def_2C7E - 600Ch, offset def_2C7E - 600Ch
.rodata:000000000000600C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000600C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000600C                 dd offset def_2C7E - 600Ch, offset def_2C7E - 600Ch, offset def_2C7E - 600Ch ; jump table for switch statement
.rodata:000000000000600C                 dd offset def_2C7E - 600Ch, offset loc_2EE0 - 600Ch, offset loc_2DE8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2DA8 - 600Ch, offset loc_2F70 - 600Ch, offset loc_2F60 - 600Ch
.rodata:000000000000600C                 dd offset loc_2F50 - 600Ch, offset loc_2F40 - 600Ch, offset def_2C7E - 600Ch
.rodata:000000000000600C                 dd offset def_2C7E - 600Ch, offset def_2C7E - 600Ch, offset def_2C7E - 600Ch
.rodata:000000000000600C                 dd offset def_2C7E - 600Ch, offset def_2C7E - 600Ch, offset def_2C7E - 600Ch
.rodata:000000000000600C                 dd offset def_2C7E - 600Ch, offset def_2C7E - 600Ch, offset def_2C7E - 600Ch
.rodata:000000000000600C                 dd offset def_2C7E - 600Ch, offset def_2C7E - 600Ch, offset def_2C7E - 600Ch
.rodata:000000000000600C                 dd offset def_2C7E - 600Ch, offset def_2C7E - 600Ch, offset def_2C7E - 600Ch
.rodata:000000000000600C                 dd offset def_2C7E - 600Ch, offset def_2C7E - 600Ch, offset loc_2F30 - 600Ch
.rodata:000000000000600C                 dd offset loc_2F20 - 600Ch, offset loc_2F20 - 600Ch, offset loc_2EF0 - 600Ch
.rodata:000000000000600C                 dd offset loc_2F20 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2F20 - 600Ch
.rodata:000000000000600C                 dd offset loc_2D83 - 600Ch, offset loc_2F20 - 600Ch, offset loc_2F20 - 600Ch
.rodata:000000000000600C                 dd offset loc_2F20 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2F20 - 600Ch
.rodata:000000000000600C                 dd offset loc_2F20 - 600Ch, offset loc_2F20 - 600Ch, offset loc_2F20 - 600Ch
.rodata:000000000000600C                 dd offset loc_2D53 - 600Ch, offset def_2C7E - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2F20 - 600Ch, offset loc_2DF8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2F20 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2F20 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch, offset loc_2EC8 - 600Ch
.rodata:000000000000600C                 dd offset loc_2C83 - 600Ch, offset loc_2F20 - 600Ch, offset loc_2C83 - 600Ch
.rodata:000000000000600C                 dd offset loc_2EF0 - 600Ch
.rodata:0000000000006208 jpt_300A        dd offset loc_3070 - 6208h, offset def_300A - 6208h, offset def_300A - 6208h
.rodata:0000000000006208                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000006208                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000006208                 dd offset def_300A - 6208h, offset def_300A - 6208h, offset def_300A - 6208h ; jump table for switch statement
.rodata:0000000000006208                 dd offset def_300A - 6208h, offset loc_3060 - 6208h, offset loc_31B0 - 6208h
.rodata:0000000000006208                 dd offset loc_3198 - 6208h, offset loc_3048 - 6208h, offset loc_3188 - 6208h
.rodata:0000000000006208                 dd offset loc_3030 - 6208h, offset loc_3170 - 6208h, offset def_300A - 6208h
.rodata:0000000000006208                 dd offset def_300A - 6208h, offset def_300A - 6208h, offset def_300A - 6208h
.rodata:0000000000006208                 dd offset def_300A - 6208h, offset def_300A - 6208h, offset def_300A - 6208h
.rodata:0000000000006208                 dd offset def_300A - 6208h, offset def_300A - 6208h, offset def_300A - 6208h
.rodata:0000000000006208                 dd offset def_300A - 6208h, offset def_300A - 6208h, offset def_300A - 6208h
.rodata:0000000000006208                 dd offset def_300A - 6208h, offset def_300A - 6208h, offset def_300A - 6208h
.rodata:0000000000006208                 dd offset def_300A - 6208h, offset def_300A - 6208h, offset loc_3158 - 6208h
.rodata:0000000000006208                 dd offset loc_3140 - 6208h, offset loc_3140 - 6208h, offset loc_3128 - 6208h
.rodata:0000000000006208                 dd offset loc_3140 - 6208h, offset loc_3110 - 6208h, offset loc_3140 - 6208h
.rodata:0000000000006208                 dd offset loc_2D80 - 6208h, offset loc_3140 - 6208h, offset loc_3140 - 6208h
.rodata:0000000000006208                 dd offset loc_3140 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3140 - 6208h
.rodata:0000000000006208                 dd offset loc_3140 - 6208h, offset loc_3140 - 6208h, offset loc_3140 - 6208h
.rodata:0000000000006208                 dd offset loc_2D50 - 6208h, offset def_300A - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3140 - 6208h, offset loc_3010 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3140 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3140 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_3110 - 6208h, offset loc_3110 - 6208h, offset loc_3110 - 6208h
.rodata:0000000000006208                 dd offset loc_2C80 - 6208h, offset loc_3140 - 6208h, offset loc_2C80 - 6208h
.rodata:0000000000006208                 dd offset loc_3128 - 6208h
.rodata:0000000000006404                 align 20h
.rodata:0000000000006420                 public quoting_style_vals
.rodata:0000000000006420 quoting_style_vals db    0
.rodata:0000000000006421                 db    0
.rodata:0000000000006422                 db    0
.rodata:0000000000006423                 db    0
.rodata:0000000000006424                 db    1
.rodata:0000000000006425                 db    0
.rodata:0000000000006426                 db    0
.rodata:0000000000006427                 db    0
.rodata:0000000000006428                 db    2
.rodata:0000000000006429                 db    0
.rodata:000000000000642A                 db    0
.rodata:000000000000642B                 db    0
.rodata:000000000000642C                 db    3
.rodata:000000000000642D                 db    0
.rodata:000000000000642E                 db    0
.rodata:000000000000642F                 db    0
.rodata:0000000000006430                 db    4
.rodata:0000000000006431                 db    0
.rodata:0000000000006432                 db    0
.rodata:0000000000006433                 db    0
.rodata:0000000000006434                 db    5
.rodata:0000000000006435                 db    0
.rodata:0000000000006436                 db    0
.rodata:0000000000006437                 db    0
.rodata:0000000000006438                 db    6
.rodata:0000000000006439                 db    0
.rodata:000000000000643A                 db    0
.rodata:000000000000643B                 db    0
.rodata:000000000000643C                 db    7
.rodata:000000000000643D                 db    0
.rodata:000000000000643E                 db    0
.rodata:000000000000643F                 db    0
.rodata:0000000000006440                 db    8
.rodata:0000000000006441                 db    0
.rodata:0000000000006442                 db    0
.rodata:0000000000006443                 db    0
.rodata:0000000000006444                 db    9
.rodata:0000000000006445                 db    0
.rodata:0000000000006446                 db    0
.rodata:0000000000006447                 db    0
.rodata:0000000000006448 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000006448                                         ; main+22F↑o
.rodata:0000000000006454 aSS             db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000645B ; const char aC_0[]
.rodata:000000000000645B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_466C↑o
.rodata:000000000000645F ; const char aWrittenByS[]
.rodata:000000000000645F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000645F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000646F ; const char aWrittenBySAndS[]
.rodata:000000000000646F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000646F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000006486 ; const char aWrittenBySSAnd[]
.rodata:0000000000006486 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000006486                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000064A2 ; const char aReportBugsToS[]
.rodata:00000000000064A2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000064A2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000064B7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000064B7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000064CD ; const char aSHomePageS[]
.rodata:00000000000064CD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000064CD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000064E1                 align 8
.rodata:00000000000064E8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000064E8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000064E8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000064E8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000064E8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000064E8                 db '.',0Ah
.rodata:00000000000064E8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000064E8                 db 0Ah,0
.rodata:00000000000065B4                 align 8
.rodata:00000000000065B8 ; const char aWrittenBySSSAn[]
.rodata:00000000000065B8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000065B8                                         ; DATA XREF: version_etc_arn:loc_48C0↑o
.rodata:00000000000065B8                 db 'and %s.',0Ah,0
.rodata:00000000000065D8 ; const char aWrittenBySSSSA[]
.rodata:00000000000065D8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000065D8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000065D8                 db '%s, and %s.',0Ah,0
.rodata:00000000000065FC                 align 20h
.rodata:0000000000006600 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000006600 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006600                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000006600                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000006628 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000006628 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006628                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000006628                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000006654                 align 8
.rodata:0000000000006658 ; const char aWrittenBySSSSS[]
.rodata:0000000000006658 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006658                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000006658                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006658                 db 'and %s.',0Ah,0
.rodata:0000000000006688 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000006688 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006688                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000006688                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006688                 db '%s, and %s.',0Ah,0
.rodata:00000000000066BC                 align 20h
.rodata:00000000000066C0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000066C0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000066C0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000066C0                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000066FC                 align 20h
.rodata:0000000000006700 ; const char aGeneralHelpUsi[]
.rodata:0000000000006700 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000006700                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000006700                 db 0
.rodata:0000000000006741                 align 4
.rodata:0000000000006744 jpt_46D4        dd offset loc_4756 - 6744h
.rodata:0000000000006744                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000006744                                         ; version_etc_arn+9D↑r
.rodata:0000000000006744                 dd offset loc_47E8 - 6744h ; jump table for switch statement
.rodata:0000000000006744                 dd offset loc_4828 - 6744h
.rodata:0000000000006744                 dd offset loc_4870 - 6744h
.rodata:0000000000006744                 dd offset loc_48C0 - 6744h
.rodata:0000000000006744                 dd offset loc_4918 - 6744h
.rodata:0000000000006744                 dd offset loc_4948 - 6744h
.rodata:0000000000006744                 dd offset loc_49B0 - 6744h
.rodata:0000000000006744                 dd offset loc_46E0 - 6744h
.rodata:0000000000006744                 dd offset loc_4790 - 6744h
.rodata:000000000000676C                 align 20h
.rodata:0000000000006780                 public version_etc_copyright
.rodata:0000000000006780 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000006780                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000067AF ; const char aMemoryExhauste[]
.rodata:00000000000067AF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000067C0 ; const char file[]
.rodata:00000000000067C0 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:00000000000067C0                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:00000000000067E0 ; const char assertion[]
.rodata:00000000000067E0 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:00000000000067E0                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:0000000000006806                 align 8
.rodata:0000000000006808 jpt_50B6        dd offset loc_5206 - 6808h, offset def_50B6 - 6808h, offset def_50B6 - 6808h
.rodata:0000000000006808                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:0000000000006808                                         ; xstrtoumax+1CF↑r
.rodata:0000000000006808                 dd offset loc_51E3 - 6808h, offset def_50B6 - 6808h, offset loc_521C - 6808h ; jump table for switch statement
.rodata:0000000000006808                 dd offset def_50B6 - 6808h, offset def_50B6 - 6808h, offset def_50B6 - 6808h
.rodata:0000000000006808                 dd offset loc_519F - 6808h, offset def_50B6 - 6808h, offset loc_50B8 - 6808h
.rodata:0000000000006808                 dd offset def_50B6 - 6808h, offset def_50B6 - 6808h, offset loc_51C0 - 6808h
.rodata:0000000000006808                 dd offset def_50B6 - 6808h, offset def_50B6 - 6808h, offset def_50B6 - 6808h
.rodata:0000000000006808                 dd offset loc_517F - 6808h, offset def_50B6 - 6808h, offset def_50B6 - 6808h
.rodata:0000000000006808                 dd offset def_50B6 - 6808h, offset def_50B6 - 6808h, offset loc_515A - 6808h
.rodata:0000000000006808                 dd offset loc_5134 - 6808h, offset def_50B6 - 6808h, offset def_50B6 - 6808h
.rodata:0000000000006808                 dd offset def_50B6 - 6808h, offset def_50B6 - 6808h, offset def_50B6 - 6808h
.rodata:0000000000006808                 dd offset def_50B6 - 6808h, offset def_50B6 - 6808h, offset loc_511D - 6808h
.rodata:0000000000006808                 dd offset loc_50E0 - 6808h, offset def_50B6 - 6808h, offset def_50B6 - 6808h
.rodata:0000000000006808                 dd offset def_50B6 - 6808h, offset loc_521C - 6808h, offset def_50B6 - 6808h
.rodata:0000000000006808                 dd offset def_50B6 - 6808h, offset def_50B6 - 6808h, offset loc_519F - 6808h
.rodata:0000000000006808                 dd offset def_50B6 - 6808h, offset loc_50B8 - 6808h, offset def_50B6 - 6808h
.rodata:0000000000006808                 dd offset def_50B6 - 6808h, offset def_50B6 - 6808h, offset def_50B6 - 6808h
.rodata:0000000000006808                 dd offset def_50B6 - 6808h, offset def_50B6 - 6808h, offset loc_517F - 6808h
.rodata:0000000000006808                 dd offset def_50B6 - 6808h, offset def_50B6 - 6808h, offset loc_5107 - 6808h
.rodata:00000000000068E0 ; const char _PRETTY_FUNCTION___4162[]
.rodata:00000000000068E0 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:00000000000068E0                                         ; DATA XREF: xstrtoumax:loc_5265↑o
.rodata:00000000000068EB aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000068ED aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5450↑o
.rodata:00000000000068F3 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000068F3                                         ; locale_charset:loc_54A0↑o
.rodata:00000000000068F3 _rodata         ends
.rodata:00000000000068F3
LOAD:00000000000068F9 ; ===========================================================================
LOAD:00000000000068F9
LOAD:00000000000068F9 ; Segment type: Pure code
LOAD:00000000000068F9 ; Segment permissions: Read/Execute
LOAD:00000000000068F9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000068F9                 assume cs:LOAD
LOAD:00000000000068F9                 ;org 68F9h
LOAD:00000000000068F9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000068F9                 align 4
LOAD:00000000000068F9 LOAD            ends
LOAD:00000000000068F9
.eh_frame_hdr:00000000000068FC ; ===========================================================================
.eh_frame_hdr:00000000000068FC
.eh_frame_hdr:00000000000068FC ; Segment type: Pure data
.eh_frame_hdr:00000000000068FC ; Segment permissions: Read
.eh_frame_hdr:00000000000068FC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000068FC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000068FC                 ;org 68FCh
.eh_frame_hdr:00000000000068FC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000068FD                 db  1Bh
.eh_frame_hdr:00000000000068FE                 db    3
.eh_frame_hdr:00000000000068FF                 db  3Bh ; ;
.eh_frame_hdr:0000000000006900                 db  58h ; X
.eh_frame_hdr:0000000000006901                 db    2
.eh_frame_hdr:0000000000006902                 db    0
.eh_frame_hdr:0000000000006903                 db    0
.eh_frame_hdr:0000000000006904                 db  4Ah ; J
.eh_frame_hdr:0000000000006905                 db    0
.eh_frame_hdr:0000000000006906                 db    0
.eh_frame_hdr:0000000000006907                 db    0
.eh_frame_hdr:0000000000006908                 db 0B4h
.eh_frame_hdr:0000000000006909                 db 0AAh
.eh_frame_hdr:000000000000690A                 db 0FFh
.eh_frame_hdr:000000000000690B                 db 0FFh
.eh_frame_hdr:000000000000690C                 db 0A4h
.eh_frame_hdr:000000000000690D                 db    2
.eh_frame_hdr:000000000000690E                 db    0
.eh_frame_hdr:000000000000690F                 db    0
.eh_frame_hdr:0000000000006910                 db 0B4h
.eh_frame_hdr:0000000000006911                 db 0ADh
.eh_frame_hdr:0000000000006912                 db 0FFh
.eh_frame_hdr:0000000000006913                 db 0FFh
.eh_frame_hdr:0000000000006914                 db 0CCh
.eh_frame_hdr:0000000000006915                 db    2
.eh_frame_hdr:0000000000006916                 db    0
.eh_frame_hdr:0000000000006917                 db    0
.eh_frame_hdr:0000000000006918                 db 0C4h
.eh_frame_hdr:0000000000006919                 db 0ADh
.eh_frame_hdr:000000000000691A                 db 0FFh
.eh_frame_hdr:000000000000691B                 db 0FFh
.eh_frame_hdr:000000000000691C                 db  10h
.eh_frame_hdr:000000000000691D                 db    3
.eh_frame_hdr:000000000000691E                 db    0
.eh_frame_hdr:000000000000691F                 db    0
.eh_frame_hdr:0000000000006920                 db  44h ; D
.eh_frame_hdr:0000000000006921                 db 0B4h
.eh_frame_hdr:0000000000006922                 db 0FFh
.eh_frame_hdr:0000000000006923                 db 0FFh
.eh_frame_hdr:0000000000006924                 db  74h ; t
.eh_frame_hdr:0000000000006925                 db    2
.eh_frame_hdr:0000000000006926                 db    0
.eh_frame_hdr:0000000000006927                 db    0
.eh_frame_hdr:0000000000006928                 db  54h ; T
.eh_frame_hdr:0000000000006929                 db 0B5h
.eh_frame_hdr:000000000000692A                 db 0FFh
.eh_frame_hdr:000000000000692B                 db 0FFh
.eh_frame_hdr:000000000000692C                 db 0E4h
.eh_frame_hdr:000000000000692D                 db    2
.eh_frame_hdr:000000000000692E                 db    0
.eh_frame_hdr:000000000000692F                 db    0
.eh_frame_hdr:0000000000006930                 db  84h
.eh_frame_hdr:0000000000006931                 db 0B9h
.eh_frame_hdr:0000000000006932                 db 0FFh
.eh_frame_hdr:0000000000006933                 db 0FFh
.eh_frame_hdr:0000000000006934                 db  5Ch ; \
.eh_frame_hdr:0000000000006935                 db    3
.eh_frame_hdr:0000000000006936                 db    0
.eh_frame_hdr:0000000000006937                 db    0
.eh_frame_hdr:0000000000006938                 db  94h
.eh_frame_hdr:0000000000006939                 db 0B9h
.eh_frame_hdr:000000000000693A                 db 0FFh
.eh_frame_hdr:000000000000693B                 db 0FFh
.eh_frame_hdr:000000000000693C                 db  70h ; p
.eh_frame_hdr:000000000000693D                 db    3
.eh_frame_hdr:000000000000693E                 db    0
.eh_frame_hdr:000000000000693F                 db    0
.eh_frame_hdr:0000000000006940                 db 0A4h
.eh_frame_hdr:0000000000006941                 db 0B9h
.eh_frame_hdr:0000000000006942                 db 0FFh
.eh_frame_hdr:0000000000006943                 db 0FFh
.eh_frame_hdr:0000000000006944                 db  84h
.eh_frame_hdr:0000000000006945                 db    3
.eh_frame_hdr:0000000000006946                 db    0
.eh_frame_hdr:0000000000006947                 db    0
.eh_frame_hdr:0000000000006948                 db  54h ; T
.eh_frame_hdr:0000000000006949                 db 0BAh
.eh_frame_hdr:000000000000694A                 db 0FFh
.eh_frame_hdr:000000000000694B                 db 0FFh
.eh_frame_hdr:000000000000694C                 db 0B4h
.eh_frame_hdr:000000000000694D                 db    3
.eh_frame_hdr:000000000000694E                 db    0
.eh_frame_hdr:000000000000694F                 db    0
.eh_frame_hdr:0000000000006950                 db    4
.eh_frame_hdr:0000000000006951                 db 0BEh
.eh_frame_hdr:0000000000006952                 db 0FFh
.eh_frame_hdr:0000000000006953                 db 0FFh
.eh_frame_hdr:0000000000006954                 db 0FCh
.eh_frame_hdr:0000000000006955                 db    3
.eh_frame_hdr:0000000000006956                 db    0
.eh_frame_hdr:0000000000006957                 db    0
.eh_frame_hdr:0000000000006958                 db  94h
.eh_frame_hdr:0000000000006959                 db 0BEh
.eh_frame_hdr:000000000000695A                 db 0FFh
.eh_frame_hdr:000000000000695B                 db 0FFh
.eh_frame_hdr:000000000000695C                 db  20h
.eh_frame_hdr:000000000000695D                 db    4
.eh_frame_hdr:000000000000695E                 db    0
.eh_frame_hdr:000000000000695F                 db    0
.eh_frame_hdr:0000000000006960                 db    4
.eh_frame_hdr:0000000000006961                 db 0C0h
.eh_frame_hdr:0000000000006962                 db 0FFh
.eh_frame_hdr:0000000000006963                 db 0FFh
.eh_frame_hdr:0000000000006964                 db  54h ; T
.eh_frame_hdr:0000000000006965                 db    4
.eh_frame_hdr:0000000000006966                 db    0
.eh_frame_hdr:0000000000006967                 db    0
.eh_frame_hdr:0000000000006968                 db 0A4h
.eh_frame_hdr:0000000000006969                 db 0C0h
.eh_frame_hdr:000000000000696A                 db 0FFh
.eh_frame_hdr:000000000000696B                 db 0FFh
.eh_frame_hdr:000000000000696C                 db  74h ; t
.eh_frame_hdr:000000000000696D                 db    4
.eh_frame_hdr:000000000000696E                 db    0
.eh_frame_hdr:000000000000696F                 db    0
.eh_frame_hdr:0000000000006970                 db  94h
.eh_frame_hdr:0000000000006971                 db 0C1h
.eh_frame_hdr:0000000000006972                 db 0FFh
.eh_frame_hdr:0000000000006973                 db 0FFh
.eh_frame_hdr:0000000000006974                 db 0B8h
.eh_frame_hdr:0000000000006975                 db    4
.eh_frame_hdr:0000000000006976                 db    0
.eh_frame_hdr:0000000000006977                 db    0
.eh_frame_hdr:0000000000006978                 db 0D4h
.eh_frame_hdr:0000000000006979                 db 0D3h
.eh_frame_hdr:000000000000697A                 db 0FFh
.eh_frame_hdr:000000000000697B                 db 0FFh
.eh_frame_hdr:000000000000697C                 db  30h ; 0
.eh_frame_hdr:000000000000697D                 db    5
.eh_frame_hdr:000000000000697E                 db    0
.eh_frame_hdr:000000000000697F                 db    0
.eh_frame_hdr:0000000000006980                 db  84h
.eh_frame_hdr:0000000000006981                 db 0D5h
.eh_frame_hdr:0000000000006982                 db 0FFh
.eh_frame_hdr:0000000000006983                 db 0FFh
.eh_frame_hdr:0000000000006984                 db  9Ch
.eh_frame_hdr:0000000000006985                 db    5
.eh_frame_hdr:0000000000006986                 db    0
.eh_frame_hdr:0000000000006987                 db    0
.eh_frame_hdr:0000000000006988                 db 0C4h
.eh_frame_hdr:0000000000006989                 db 0D5h
.eh_frame_hdr:000000000000698A                 db 0FFh
.eh_frame_hdr:000000000000698B                 db 0FFh
.eh_frame_hdr:000000000000698C                 db 0C8h
.eh_frame_hdr:000000000000698D                 db    5
.eh_frame_hdr:000000000000698E                 db    0
.eh_frame_hdr:000000000000698F                 db    0
.eh_frame_hdr:0000000000006990                 db 0E4h
.eh_frame_hdr:0000000000006991                 db 0D5h
.eh_frame_hdr:0000000000006992                 db 0FFh
.eh_frame_hdr:0000000000006993                 db 0FFh
.eh_frame_hdr:0000000000006994                 db 0DCh
.eh_frame_hdr:0000000000006995                 db    5
.eh_frame_hdr:0000000000006996                 db    0
.eh_frame_hdr:0000000000006997                 db    0
.eh_frame_hdr:0000000000006998                 db    4
.eh_frame_hdr:0000000000006999                 db 0D6h
.eh_frame_hdr:000000000000699A                 db 0FFh
.eh_frame_hdr:000000000000699B                 db 0FFh
.eh_frame_hdr:000000000000699C                 db 0F0h
.eh_frame_hdr:000000000000699D                 db    5
.eh_frame_hdr:000000000000699E                 db    0
.eh_frame_hdr:000000000000699F                 db    0
.eh_frame_hdr:00000000000069A0                 db  44h ; D
.eh_frame_hdr:00000000000069A1                 db 0D6h
.eh_frame_hdr:00000000000069A2                 db 0FFh
.eh_frame_hdr:00000000000069A3                 db 0FFh
.eh_frame_hdr:00000000000069A4                 db    4
.eh_frame_hdr:00000000000069A5                 db    6
.eh_frame_hdr:00000000000069A6                 db    0
.eh_frame_hdr:00000000000069A7                 db    0
.eh_frame_hdr:00000000000069A8                 db  64h ; d
.eh_frame_hdr:00000000000069A9                 db 0D6h
.eh_frame_hdr:00000000000069AA                 db 0FFh
.eh_frame_hdr:00000000000069AB                 db 0FFh
.eh_frame_hdr:00000000000069AC                 db  18h
.eh_frame_hdr:00000000000069AD                 db    6
.eh_frame_hdr:00000000000069AE                 db    0
.eh_frame_hdr:00000000000069AF                 db    0
.eh_frame_hdr:00000000000069B0                 db  94h
.eh_frame_hdr:00000000000069B1                 db 0D6h
.eh_frame_hdr:00000000000069B2                 db 0FFh
.eh_frame_hdr:00000000000069B3                 db 0FFh
.eh_frame_hdr:00000000000069B4                 db  2Ch ; ,
.eh_frame_hdr:00000000000069B5                 db    6
.eh_frame_hdr:00000000000069B6                 db    0
.eh_frame_hdr:00000000000069B7                 db    0
.eh_frame_hdr:00000000000069B8                 db  14h
.eh_frame_hdr:00000000000069B9                 db 0D7h
.eh_frame_hdr:00000000000069BA                 db 0FFh
.eh_frame_hdr:00000000000069BB                 db 0FFh
.eh_frame_hdr:00000000000069BC                 db  80h
.eh_frame_hdr:00000000000069BD                 db    6
.eh_frame_hdr:00000000000069BE                 db    0
.eh_frame_hdr:00000000000069BF                 db    0
.eh_frame_hdr:00000000000069C0                 db    4
.eh_frame_hdr:00000000000069C1                 db 0D8h
.eh_frame_hdr:00000000000069C2                 db 0FFh
.eh_frame_hdr:00000000000069C3                 db 0FFh
.eh_frame_hdr:00000000000069C4                 db 0ECh
.eh_frame_hdr:00000000000069C5                 db    6
.eh_frame_hdr:00000000000069C6                 db    0
.eh_frame_hdr:00000000000069C7                 db    0
.eh_frame_hdr:00000000000069C8                 db  14h
.eh_frame_hdr:00000000000069C9                 db 0D8h
.eh_frame_hdr:00000000000069CA                 db 0FFh
.eh_frame_hdr:00000000000069CB                 db 0FFh
.eh_frame_hdr:00000000000069CC                 db    0
.eh_frame_hdr:00000000000069CD                 db    7
.eh_frame_hdr:00000000000069CE                 db    0
.eh_frame_hdr:00000000000069CF                 db    0
.eh_frame_hdr:00000000000069D0                 db 0B4h
.eh_frame_hdr:00000000000069D1                 db 0D8h
.eh_frame_hdr:00000000000069D2                 db 0FFh
.eh_frame_hdr:00000000000069D3                 db 0FFh
.eh_frame_hdr:00000000000069D4                 db  2Ch ; ,
.eh_frame_hdr:00000000000069D5                 db    7
.eh_frame_hdr:00000000000069D6                 db    0
.eh_frame_hdr:00000000000069D7                 db    0
.eh_frame_hdr:00000000000069D8                 db 0D4h
.eh_frame_hdr:00000000000069D9                 db 0D8h
.eh_frame_hdr:00000000000069DA                 db 0FFh
.eh_frame_hdr:00000000000069DB                 db 0FFh
.eh_frame_hdr:00000000000069DC                 db  40h ; @
.eh_frame_hdr:00000000000069DD                 db    7
.eh_frame_hdr:00000000000069DE                 db    0
.eh_frame_hdr:00000000000069DF                 db    0
.eh_frame_hdr:00000000000069E0                 db 0E4h
.eh_frame_hdr:00000000000069E1                 db 0D8h
.eh_frame_hdr:00000000000069E2                 db 0FFh
.eh_frame_hdr:00000000000069E3                 db 0FFh
.eh_frame_hdr:00000000000069E4                 db  54h ; T
.eh_frame_hdr:00000000000069E5                 db    7
.eh_frame_hdr:00000000000069E6                 db    0
.eh_frame_hdr:00000000000069E7                 db    0
.eh_frame_hdr:00000000000069E8                 db    4
.eh_frame_hdr:00000000000069E9                 db 0D9h
.eh_frame_hdr:00000000000069EA                 db 0FFh
.eh_frame_hdr:00000000000069EB                 db 0FFh
.eh_frame_hdr:00000000000069EC                 db  68h ; h
.eh_frame_hdr:00000000000069ED                 db    7
.eh_frame_hdr:00000000000069EE                 db    0
.eh_frame_hdr:00000000000069EF                 db    0
.eh_frame_hdr:00000000000069F0                 db  24h ; $
.eh_frame_hdr:00000000000069F1                 db 0D9h
.eh_frame_hdr:00000000000069F2                 db 0FFh
.eh_frame_hdr:00000000000069F3                 db 0FFh
.eh_frame_hdr:00000000000069F4                 db  7Ch ; |
.eh_frame_hdr:00000000000069F5                 db    7
.eh_frame_hdr:00000000000069F6                 db    0
.eh_frame_hdr:00000000000069F7                 db    0
.eh_frame_hdr:00000000000069F8                 db 0B4h
.eh_frame_hdr:00000000000069F9                 db 0D9h
.eh_frame_hdr:00000000000069FA                 db 0FFh
.eh_frame_hdr:00000000000069FB                 db 0FFh
.eh_frame_hdr:00000000000069FC                 db  98h
.eh_frame_hdr:00000000000069FD                 db    7
.eh_frame_hdr:00000000000069FE                 db    0
.eh_frame_hdr:00000000000069FF                 db    0
.eh_frame_hdr:0000000000006A00                 db  44h ; D
.eh_frame_hdr:0000000000006A01                 db 0DAh
.eh_frame_hdr:0000000000006A02                 db 0FFh
.eh_frame_hdr:0000000000006A03                 db 0FFh
.eh_frame_hdr:0000000000006A04                 db 0B4h
.eh_frame_hdr:0000000000006A05                 db    7
.eh_frame_hdr:0000000000006A06                 db    0
.eh_frame_hdr:0000000000006A07                 db    0
.eh_frame_hdr:0000000000006A08                 db  54h ; T
.eh_frame_hdr:0000000000006A09                 db 0DAh
.eh_frame_hdr:0000000000006A0A                 db 0FFh
.eh_frame_hdr:0000000000006A0B                 db 0FFh
.eh_frame_hdr:0000000000006A0C                 db 0C8h
.eh_frame_hdr:0000000000006A0D                 db    7
.eh_frame_hdr:0000000000006A0E                 db    0
.eh_frame_hdr:0000000000006A0F                 db    0
.eh_frame_hdr:0000000000006A10                 db  64h ; d
.eh_frame_hdr:0000000000006A11                 db 0DAh
.eh_frame_hdr:0000000000006A12                 db 0FFh
.eh_frame_hdr:0000000000006A13                 db 0FFh
.eh_frame_hdr:0000000000006A14                 db 0DCh
.eh_frame_hdr:0000000000006A15                 db    7
.eh_frame_hdr:0000000000006A16                 db    0
.eh_frame_hdr:0000000000006A17                 db    0
.eh_frame_hdr:0000000000006A18                 db    4
.eh_frame_hdr:0000000000006A19                 db 0DBh
.eh_frame_hdr:0000000000006A1A                 db 0FFh
.eh_frame_hdr:0000000000006A1B                 db 0FFh
.eh_frame_hdr:0000000000006A1C                 db 0F8h
.eh_frame_hdr:0000000000006A1D                 db    7
.eh_frame_hdr:0000000000006A1E                 db    0
.eh_frame_hdr:0000000000006A1F                 db    0
.eh_frame_hdr:0000000000006A20                 db  14h
.eh_frame_hdr:0000000000006A21                 db 0DBh
.eh_frame_hdr:0000000000006A22                 db 0FFh
.eh_frame_hdr:0000000000006A23                 db 0FFh
.eh_frame_hdr:0000000000006A24                 db  0Ch
.eh_frame_hdr:0000000000006A25                 db    8
.eh_frame_hdr:0000000000006A26                 db    0
.eh_frame_hdr:0000000000006A27                 db    0
.eh_frame_hdr:0000000000006A28                 db  34h ; 4
.eh_frame_hdr:0000000000006A29                 db 0DBh
.eh_frame_hdr:0000000000006A2A                 db 0FFh
.eh_frame_hdr:0000000000006A2B                 db 0FFh
.eh_frame_hdr:0000000000006A2C                 db  20h
.eh_frame_hdr:0000000000006A2D                 db    8
.eh_frame_hdr:0000000000006A2E                 db    0
.eh_frame_hdr:0000000000006A2F                 db    0
.eh_frame_hdr:0000000000006A30                 db  44h ; D
.eh_frame_hdr:0000000000006A31                 db 0DBh
.eh_frame_hdr:0000000000006A32                 db 0FFh
.eh_frame_hdr:0000000000006A33                 db 0FFh
.eh_frame_hdr:0000000000006A34                 db  34h ; 4
.eh_frame_hdr:0000000000006A35                 db    8
.eh_frame_hdr:0000000000006A36                 db    0
.eh_frame_hdr:0000000000006A37                 db    0
.eh_frame_hdr:0000000000006A38                 db 0D4h
.eh_frame_hdr:0000000000006A39                 db 0DBh
.eh_frame_hdr:0000000000006A3A                 db 0FFh
.eh_frame_hdr:0000000000006A3B                 db 0FFh
.eh_frame_hdr:0000000000006A3C                 db  50h ; P
.eh_frame_hdr:0000000000006A3D                 db    8
.eh_frame_hdr:0000000000006A3E                 db    0
.eh_frame_hdr:0000000000006A3F                 db    0
.eh_frame_hdr:0000000000006A40                 db  74h ; t
.eh_frame_hdr:0000000000006A41                 db 0DCh
.eh_frame_hdr:0000000000006A42                 db 0FFh
.eh_frame_hdr:0000000000006A43                 db 0FFh
.eh_frame_hdr:0000000000006A44                 db  6Ch ; l
.eh_frame_hdr:0000000000006A45                 db    8
.eh_frame_hdr:0000000000006A46                 db    0
.eh_frame_hdr:0000000000006A47                 db    0
.eh_frame_hdr:0000000000006A48                 db  84h
.eh_frame_hdr:0000000000006A49                 db 0DCh
.eh_frame_hdr:0000000000006A4A                 db 0FFh
.eh_frame_hdr:0000000000006A4B                 db 0FFh
.eh_frame_hdr:0000000000006A4C                 db  80h
.eh_frame_hdr:0000000000006A4D                 db    8
.eh_frame_hdr:0000000000006A4E                 db    0
.eh_frame_hdr:0000000000006A4F                 db    0
.eh_frame_hdr:0000000000006A50                 db 0A4h
.eh_frame_hdr:0000000000006A51                 db 0DCh
.eh_frame_hdr:0000000000006A52                 db 0FFh
.eh_frame_hdr:0000000000006A53                 db 0FFh
.eh_frame_hdr:0000000000006A54                 db  94h
.eh_frame_hdr:0000000000006A55                 db    8
.eh_frame_hdr:0000000000006A56                 db    0
.eh_frame_hdr:0000000000006A57                 db    0
.eh_frame_hdr:0000000000006A58                 db 0C4h
.eh_frame_hdr:0000000000006A59                 db 0DCh
.eh_frame_hdr:0000000000006A5A                 db 0FFh
.eh_frame_hdr:0000000000006A5B                 db 0FFh
.eh_frame_hdr:0000000000006A5C                 db 0A8h
.eh_frame_hdr:0000000000006A5D                 db    8
.eh_frame_hdr:0000000000006A5E                 db    0
.eh_frame_hdr:0000000000006A5F                 db    0
.eh_frame_hdr:0000000000006A60                 db 0D4h
.eh_frame_hdr:0000000000006A61                 db 0DCh
.eh_frame_hdr:0000000000006A62                 db 0FFh
.eh_frame_hdr:0000000000006A63                 db 0FFh
.eh_frame_hdr:0000000000006A64                 db 0BCh
.eh_frame_hdr:0000000000006A65                 db    8
.eh_frame_hdr:0000000000006A66                 db    0
.eh_frame_hdr:0000000000006A67                 db    0
.eh_frame_hdr:0000000000006A68                 db 0F4h
.eh_frame_hdr:0000000000006A69                 db 0DCh
.eh_frame_hdr:0000000000006A6A                 db 0FFh
.eh_frame_hdr:0000000000006A6B                 db 0FFh
.eh_frame_hdr:0000000000006A6C                 db 0D0h
.eh_frame_hdr:0000000000006A6D                 db    8
.eh_frame_hdr:0000000000006A6E                 db    0
.eh_frame_hdr:0000000000006A6F                 db    0
.eh_frame_hdr:0000000000006A70                 db  14h
.eh_frame_hdr:0000000000006A71                 db 0DDh
.eh_frame_hdr:0000000000006A72                 db 0FFh
.eh_frame_hdr:0000000000006A73                 db 0FFh
.eh_frame_hdr:0000000000006A74                 db 0E4h
.eh_frame_hdr:0000000000006A75                 db    8
.eh_frame_hdr:0000000000006A76                 db    0
.eh_frame_hdr:0000000000006A77                 db    0
.eh_frame_hdr:0000000000006A78                 db  34h ; 4
.eh_frame_hdr:0000000000006A79                 db 0DDh
.eh_frame_hdr:0000000000006A7A                 db 0FFh
.eh_frame_hdr:0000000000006A7B                 db 0FFh
.eh_frame_hdr:0000000000006A7C                 db 0FCh
.eh_frame_hdr:0000000000006A7D                 db    8
.eh_frame_hdr:0000000000006A7E                 db    0
.eh_frame_hdr:0000000000006A7F                 db    0
.eh_frame_hdr:0000000000006A80                 db  54h ; T
.eh_frame_hdr:0000000000006A81                 db 0E1h
.eh_frame_hdr:0000000000006A82                 db 0FFh
.eh_frame_hdr:0000000000006A83                 db 0FFh
.eh_frame_hdr:0000000000006A84                 db  10h
.eh_frame_hdr:0000000000006A85                 db  0Ah
.eh_frame_hdr:0000000000006A86                 db    0
.eh_frame_hdr:0000000000006A87                 db    0
.eh_frame_hdr:0000000000006A88                 db  74h ; t
.eh_frame_hdr:0000000000006A89                 db 0E1h
.eh_frame_hdr:0000000000006A8A                 db 0FFh
.eh_frame_hdr:0000000000006A8B                 db 0FFh
.eh_frame_hdr:0000000000006A8C                 db  24h ; $
.eh_frame_hdr:0000000000006A8D                 db  0Ah
.eh_frame_hdr:0000000000006A8E                 db    0
.eh_frame_hdr:0000000000006A8F                 db    0
.eh_frame_hdr:0000000000006A90                 db 0F4h
.eh_frame_hdr:0000000000006A91                 db 0E1h
.eh_frame_hdr:0000000000006A92                 db 0FFh
.eh_frame_hdr:0000000000006A93                 db 0FFh
.eh_frame_hdr:0000000000006A94                 db  40h ; @
.eh_frame_hdr:0000000000006A95                 db  0Ah
.eh_frame_hdr:0000000000006A96                 db    0
.eh_frame_hdr:0000000000006A97                 db    0
.eh_frame_hdr:0000000000006A98                 db 0D4h
.eh_frame_hdr:0000000000006A99                 db 0E2h
.eh_frame_hdr:0000000000006A9A                 db 0FFh
.eh_frame_hdr:0000000000006A9B                 db 0FFh
.eh_frame_hdr:0000000000006A9C                 db  6Ch ; l
.eh_frame_hdr:0000000000006A9D                 db  0Ah
.eh_frame_hdr:0000000000006A9E                 db    0
.eh_frame_hdr:0000000000006A9F                 db    0
.eh_frame_hdr:0000000000006AA0                 db  54h ; T
.eh_frame_hdr:0000000000006AA1                 db 0E3h
.eh_frame_hdr:0000000000006AA2                 db 0FFh
.eh_frame_hdr:0000000000006AA3                 db 0FFh
.eh_frame_hdr:0000000000006AA4                 db  8Ch
.eh_frame_hdr:0000000000006AA5                 db  0Ah
.eh_frame_hdr:0000000000006AA6                 db    0
.eh_frame_hdr:0000000000006AA7                 db    0
.eh_frame_hdr:0000000000006AA8                 db  74h ; t
.eh_frame_hdr:0000000000006AA9                 db 0E3h
.eh_frame_hdr:0000000000006AAA                 db 0FFh
.eh_frame_hdr:0000000000006AAB                 db 0FFh
.eh_frame_hdr:0000000000006AAC                 db 0A8h
.eh_frame_hdr:0000000000006AAD                 db  0Ah
.eh_frame_hdr:0000000000006AAE                 db    0
.eh_frame_hdr:0000000000006AAF                 db    0
.eh_frame_hdr:0000000000006AB0                 db 0A4h
.eh_frame_hdr:0000000000006AB1                 db 0E3h
.eh_frame_hdr:0000000000006AB2                 db 0FFh
.eh_frame_hdr:0000000000006AB3                 db 0FFh
.eh_frame_hdr:0000000000006AB4                 db 0BCh
.eh_frame_hdr:0000000000006AB5                 db  0Ah
.eh_frame_hdr:0000000000006AB6                 db    0
.eh_frame_hdr:0000000000006AB7                 db    0
.eh_frame_hdr:0000000000006AB8                 db 0B4h
.eh_frame_hdr:0000000000006AB9                 db 0E3h
.eh_frame_hdr:0000000000006ABA                 db 0FFh
.eh_frame_hdr:0000000000006ABB                 db 0FFh
.eh_frame_hdr:0000000000006ABC                 db 0D0h
.eh_frame_hdr:0000000000006ABD                 db  0Ah
.eh_frame_hdr:0000000000006ABE                 db    0
.eh_frame_hdr:0000000000006ABF                 db    0
.eh_frame_hdr:0000000000006AC0                 db 0F4h
.eh_frame_hdr:0000000000006AC1                 db 0E3h
.eh_frame_hdr:0000000000006AC2                 db 0FFh
.eh_frame_hdr:0000000000006AC3                 db 0FFh
.eh_frame_hdr:0000000000006AC4                 db 0F4h
.eh_frame_hdr:0000000000006AC5                 db  0Ah
.eh_frame_hdr:0000000000006AC6                 db    0
.eh_frame_hdr:0000000000006AC7                 db    0
.eh_frame_hdr:0000000000006AC8                 db  24h ; $
.eh_frame_hdr:0000000000006AC9                 db 0E4h
.eh_frame_hdr:0000000000006ACA                 db 0FFh
.eh_frame_hdr:0000000000006ACB                 db 0FFh
.eh_frame_hdr:0000000000006ACC                 db    8
.eh_frame_hdr:0000000000006ACD                 db  0Bh
.eh_frame_hdr:0000000000006ACE                 db    0
.eh_frame_hdr:0000000000006ACF                 db    0
.eh_frame_hdr:0000000000006AD0                 db 0B4h
.eh_frame_hdr:0000000000006AD1                 db 0E4h
.eh_frame_hdr:0000000000006AD2                 db 0FFh
.eh_frame_hdr:0000000000006AD3                 db 0FFh
.eh_frame_hdr:0000000000006AD4                 db  20h
.eh_frame_hdr:0000000000006AD5                 db  0Bh
.eh_frame_hdr:0000000000006AD6                 db    0
.eh_frame_hdr:0000000000006AD7                 db    0
.eh_frame_hdr:0000000000006AD8                 db    4
.eh_frame_hdr:0000000000006AD9                 db 0E5h
.eh_frame_hdr:0000000000006ADA                 db 0FFh
.eh_frame_hdr:0000000000006ADB                 db 0FFh
.eh_frame_hdr:0000000000006ADC                 db  38h ; 8
.eh_frame_hdr:0000000000006ADD                 db  0Bh
.eh_frame_hdr:0000000000006ADE                 db    0
.eh_frame_hdr:0000000000006ADF                 db    0
.eh_frame_hdr:0000000000006AE0                 db  24h ; $
.eh_frame_hdr:0000000000006AE1                 db 0E5h
.eh_frame_hdr:0000000000006AE2                 db 0FFh
.eh_frame_hdr:0000000000006AE3                 db 0FFh
.eh_frame_hdr:0000000000006AE4                 db  54h ; T
.eh_frame_hdr:0000000000006AE5                 db  0Bh
.eh_frame_hdr:0000000000006AE6                 db    0
.eh_frame_hdr:0000000000006AE7                 db    0
.eh_frame_hdr:0000000000006AE8                 db  54h ; T
.eh_frame_hdr:0000000000006AE9                 db 0E5h
.eh_frame_hdr:0000000000006AEA                 db 0FFh
.eh_frame_hdr:0000000000006AEB                 db 0FFh
.eh_frame_hdr:0000000000006AEC                 db  70h ; p
.eh_frame_hdr:0000000000006AED                 db  0Bh
.eh_frame_hdr:0000000000006AEE                 db    0
.eh_frame_hdr:0000000000006AEF                 db    0
.eh_frame_hdr:0000000000006AF0                 db  84h
.eh_frame_hdr:0000000000006AF1                 db 0E5h
.eh_frame_hdr:0000000000006AF2                 db 0FFh
.eh_frame_hdr:0000000000006AF3                 db 0FFh
.eh_frame_hdr:0000000000006AF4                 db  98h
.eh_frame_hdr:0000000000006AF5                 db  0Bh
.eh_frame_hdr:0000000000006AF6                 db    0
.eh_frame_hdr:0000000000006AF7                 db    0
.eh_frame_hdr:0000000000006AF8                 db 0A4h
.eh_frame_hdr:0000000000006AF9                 db 0E5h
.eh_frame_hdr:0000000000006AFA                 db 0FFh
.eh_frame_hdr:0000000000006AFB                 db 0FFh
.eh_frame_hdr:0000000000006AFC                 db 0B4h
.eh_frame_hdr:0000000000006AFD                 db  0Bh
.eh_frame_hdr:0000000000006AFE                 db    0
.eh_frame_hdr:0000000000006AFF                 db    0
.eh_frame_hdr:0000000000006B00                 db 0E4h
.eh_frame_hdr:0000000000006B01                 db 0E5h
.eh_frame_hdr:0000000000006B02                 db 0FFh
.eh_frame_hdr:0000000000006B03                 db 0FFh
.eh_frame_hdr:0000000000006B04                 db 0CCh
.eh_frame_hdr:0000000000006B05                 db  0Bh
.eh_frame_hdr:0000000000006B06                 db    0
.eh_frame_hdr:0000000000006B07                 db    0
.eh_frame_hdr:0000000000006B08                 db    4
.eh_frame_hdr:0000000000006B09                 db 0EAh
.eh_frame_hdr:0000000000006B0A                 db 0FFh
.eh_frame_hdr:0000000000006B0B                 db 0FFh
.eh_frame_hdr:0000000000006B0C                 db  1Ch
.eh_frame_hdr:0000000000006B0D                 db  0Ch
.eh_frame_hdr:0000000000006B0E                 db    0
.eh_frame_hdr:0000000000006B0F                 db    0
.eh_frame_hdr:0000000000006B10                 db  94h
.eh_frame_hdr:0000000000006B11                 db 0EAh
.eh_frame_hdr:0000000000006B12                 db 0FFh
.eh_frame_hdr:0000000000006B13                 db 0FFh
.eh_frame_hdr:0000000000006B14                 db  5Ch ; \
.eh_frame_hdr:0000000000006B15                 db  0Ch
.eh_frame_hdr:0000000000006B16                 db    0
.eh_frame_hdr:0000000000006B17                 db    0
.eh_frame_hdr:0000000000006B18                 db  14h
.eh_frame_hdr:0000000000006B19                 db 0EBh
.eh_frame_hdr:0000000000006B1A                 db 0FFh
.eh_frame_hdr:0000000000006B1B                 db 0FFh
.eh_frame_hdr:0000000000006B1C                 db 0ACh
.eh_frame_hdr:0000000000006B1D                 db  0Ch
.eh_frame_hdr:0000000000006B1E                 db    0
.eh_frame_hdr:0000000000006B1F                 db    0
.eh_frame_hdr:0000000000006B20                 db  74h ; t
.eh_frame_hdr:0000000000006B21                 db 0EBh
.eh_frame_hdr:0000000000006B22                 db 0FFh
.eh_frame_hdr:0000000000006B23                 db 0FFh
.eh_frame_hdr:0000000000006B24                 db 0CCh
.eh_frame_hdr:0000000000006B25                 db  0Ch
.eh_frame_hdr:0000000000006B26                 db    0
.eh_frame_hdr:0000000000006B27                 db    0
.eh_frame_hdr:0000000000006B28                 db 0B4h
.eh_frame_hdr:0000000000006B29                 db 0EBh
.eh_frame_hdr:0000000000006B2A                 db 0FFh
.eh_frame_hdr:0000000000006B2B                 db 0FFh
.eh_frame_hdr:0000000000006B2C                 db 0ECh
.eh_frame_hdr:0000000000006B2D                 db  0Ch
.eh_frame_hdr:0000000000006B2E                 db    0
.eh_frame_hdr:0000000000006B2F                 db    0
.eh_frame_hdr:0000000000006B30                 db  34h ; 4
.eh_frame_hdr:0000000000006B31                 db 0ECh
.eh_frame_hdr:0000000000006B32                 db 0FFh
.eh_frame_hdr:0000000000006B33                 db 0FFh
.eh_frame_hdr:0000000000006B34                 db  24h ; $
.eh_frame_hdr:0000000000006B35                 db  0Dh
.eh_frame_hdr:0000000000006B36                 db    0
.eh_frame_hdr:0000000000006B37                 db    0
.eh_frame_hdr:0000000000006B38                 db  74h ; t
.eh_frame_hdr:0000000000006B39                 db 0ECh
.eh_frame_hdr:0000000000006B3A                 db 0FFh
.eh_frame_hdr:0000000000006B3B                 db 0FFh
.eh_frame_hdr:0000000000006B3C                 db  44h ; D
.eh_frame_hdr:0000000000006B3D                 db  0Dh
.eh_frame_hdr:0000000000006B3E                 db    0
.eh_frame_hdr:0000000000006B3F                 db    0
.eh_frame_hdr:0000000000006B40                 db 0D4h
.eh_frame_hdr:0000000000006B41                 db 0ECh
.eh_frame_hdr:0000000000006B42                 db 0FFh
.eh_frame_hdr:0000000000006B43                 db 0FFh
.eh_frame_hdr:0000000000006B44                 db  74h ; t
.eh_frame_hdr:0000000000006B45                 db  0Dh
.eh_frame_hdr:0000000000006B46                 db    0
.eh_frame_hdr:0000000000006B47                 db    0
.eh_frame_hdr:0000000000006B48                 db  44h ; D
.eh_frame_hdr:0000000000006B49                 db 0EDh
.eh_frame_hdr:0000000000006B4A                 db 0FFh
.eh_frame_hdr:0000000000006B4B                 db 0FFh
.eh_frame_hdr:0000000000006B4C                 db 0BCh
.eh_frame_hdr:0000000000006B4D                 db  0Dh
.eh_frame_hdr:0000000000006B4E                 db    0
.eh_frame_hdr:0000000000006B4F                 db    0
.eh_frame_hdr:0000000000006B50                 db  54h ; T
.eh_frame_hdr:0000000000006B51                 db 0EDh
.eh_frame_hdr:0000000000006B52                 db 0FFh
.eh_frame_hdr:0000000000006B53                 db 0FFh
.eh_frame_hdr:0000000000006B54                 db 0D4h
.eh_frame_hdr:0000000000006B55                 db  0Dh
.eh_frame_hdr:0000000000006B56                 db    0
.eh_frame_hdr:0000000000006B57                 db    0
.eh_frame_hdr:0000000000006B57 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000006B57
.eh_frame:0000000000006B58 ; ===========================================================================
.eh_frame:0000000000006B58
.eh_frame:0000000000006B58 ; Segment type: Pure data
.eh_frame:0000000000006B58 ; Segment permissions: Read
.eh_frame:0000000000006B58 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000006B58                 assume cs:_eh_frame
.eh_frame:0000000000006B58                 ;org 6B58h
.eh_frame:0000000000006B58                 db  14h
.eh_frame:0000000000006B59                 db    0
.eh_frame:0000000000006B5A                 db    0
.eh_frame:0000000000006B5B                 db    0
.eh_frame:0000000000006B5C                 db    0
.eh_frame:0000000000006B5D                 db    0
.eh_frame:0000000000006B5E                 db    0
.eh_frame:0000000000006B5F                 db    0
.eh_frame:0000000000006B60                 db    1
.eh_frame:0000000000006B61                 db  7Ah ; z
.eh_frame:0000000000006B62                 db  52h ; R
.eh_frame:0000000000006B63                 db    0
.eh_frame:0000000000006B64                 db    1
.eh_frame:0000000000006B65                 db  78h ; x
.eh_frame:0000000000006B66                 db  10h
.eh_frame:0000000000006B67                 db    1
.eh_frame:0000000000006B68                 db  1Bh
.eh_frame:0000000000006B69                 db  0Ch
.eh_frame:0000000000006B6A                 db    7
.eh_frame:0000000000006B6B                 db    8
.eh_frame:0000000000006B6C                 db  90h
.eh_frame:0000000000006B6D                 db    1
.eh_frame:0000000000006B6E                 db    7
.eh_frame:0000000000006B6F                 db  10h
.eh_frame:0000000000006B70                 db  14h
.eh_frame:0000000000006B71                 db    0
.eh_frame:0000000000006B72                 db    0
.eh_frame:0000000000006B73                 db    0
.eh_frame:0000000000006B74                 db  1Ch
.eh_frame:0000000000006B75                 db    0
.eh_frame:0000000000006B76                 db    0
.eh_frame:0000000000006B77                 db    0
.eh_frame:0000000000006B78                 db 0C8h
.eh_frame:0000000000006B79                 db 0B1h
.eh_frame:0000000000006B7A                 db 0FFh
.eh_frame:0000000000006B7B                 db 0FFh
.eh_frame:0000000000006B7C                 db  2Bh ; +
.eh_frame:0000000000006B7D                 db    0
.eh_frame:0000000000006B7E                 db    0
.eh_frame:0000000000006B7F                 db    0
.eh_frame:0000000000006B80                 db    0
.eh_frame:0000000000006B81                 db    0
.eh_frame:0000000000006B82                 db    0
.eh_frame:0000000000006B83                 db    0
.eh_frame:0000000000006B84                 db    0
.eh_frame:0000000000006B85                 db    0
.eh_frame:0000000000006B86                 db    0
.eh_frame:0000000000006B87                 db    0
.eh_frame:0000000000006B88                 db  14h
.eh_frame:0000000000006B89                 db    0
.eh_frame:0000000000006B8A                 db    0
.eh_frame:0000000000006B8B                 db    0
.eh_frame:0000000000006B8C                 db    0
.eh_frame:0000000000006B8D                 db    0
.eh_frame:0000000000006B8E                 db    0
.eh_frame:0000000000006B8F                 db    0
.eh_frame:0000000000006B90                 db    1
.eh_frame:0000000000006B91                 db  7Ah ; z
.eh_frame:0000000000006B92                 db  52h ; R
.eh_frame:0000000000006B93                 db    0
.eh_frame:0000000000006B94                 db    1
.eh_frame:0000000000006B95                 db  78h ; x
.eh_frame:0000000000006B96                 db  10h
.eh_frame:0000000000006B97                 db    1
.eh_frame:0000000000006B98                 db  1Bh
.eh_frame:0000000000006B99                 db  0Ch
.eh_frame:0000000000006B9A                 db    7
.eh_frame:0000000000006B9B                 db    8
.eh_frame:0000000000006B9C                 db  90h
.eh_frame:0000000000006B9D                 db    1
.eh_frame:0000000000006B9E                 db    0
.eh_frame:0000000000006B9F                 db    0
.eh_frame:0000000000006BA0                 db  24h ; $
.eh_frame:0000000000006BA1                 db    0
.eh_frame:0000000000006BA2                 db    0
.eh_frame:0000000000006BA3                 db    0
.eh_frame:0000000000006BA4                 db  1Ch
.eh_frame:0000000000006BA5                 db    0
.eh_frame:0000000000006BA6                 db    0
.eh_frame:0000000000006BA7                 db    0
.eh_frame:0000000000006BA8                 db    8
.eh_frame:0000000000006BA9                 db 0A8h
.eh_frame:0000000000006BAA                 db 0FFh
.eh_frame:0000000000006BAB                 db 0FFh
.eh_frame:0000000000006BAC                 db    0
.eh_frame:0000000000006BAD                 db    3
.eh_frame:0000000000006BAE                 db    0
.eh_frame:0000000000006BAF                 db    0
.eh_frame:0000000000006BB0                 db    0
.eh_frame:0000000000006BB1                 db  0Eh
.eh_frame:0000000000006BB2                 db  10h
.eh_frame:0000000000006BB3                 db  46h ; F
.eh_frame:0000000000006BB4                 db  0Eh
.eh_frame:0000000000006BB5                 db  18h
.eh_frame:0000000000006BB6                 db  4Ah ; J
.eh_frame:0000000000006BB7                 db  0Fh
.eh_frame:0000000000006BB8                 db  0Bh
.eh_frame:0000000000006BB9                 db  77h ; w
.eh_frame:0000000000006BBA                 db    8
.eh_frame:0000000000006BBB                 db  80h
.eh_frame:0000000000006BBC                 db    0
.eh_frame:0000000000006BBD                 db  3Fh ; ?
.eh_frame:0000000000006BBE                 db  1Ah
.eh_frame:0000000000006BBF                 db  3Bh ; ;
.eh_frame:0000000000006BC0                 db  2Ah ; *
.eh_frame:0000000000006BC1                 db  33h ; 3
.eh_frame:0000000000006BC2                 db  24h ; $
.eh_frame:0000000000006BC3                 db  22h ; "
.eh_frame:0000000000006BC4                 db    0
.eh_frame:0000000000006BC5                 db    0
.eh_frame:0000000000006BC6                 db    0
.eh_frame:0000000000006BC7                 db    0
.eh_frame:0000000000006BC8                 db  14h
.eh_frame:0000000000006BC9                 db    0
.eh_frame:0000000000006BCA                 db    0
.eh_frame:0000000000006BCB                 db    0
.eh_frame:0000000000006BCC                 db  44h ; D
.eh_frame:0000000000006BCD                 db    0
.eh_frame:0000000000006BCE                 db    0
.eh_frame:0000000000006BCF                 db    0
.eh_frame:0000000000006BD0                 db 0E0h
.eh_frame:0000000000006BD1                 db 0AAh
.eh_frame:0000000000006BD2                 db 0FFh
.eh_frame:0000000000006BD3                 db 0FFh
.eh_frame:0000000000006BD4                 db    8
.eh_frame:0000000000006BD5                 db    0
.eh_frame:0000000000006BD6                 db    0
.eh_frame:0000000000006BD7                 db    0
.eh_frame:0000000000006BD8                 db    0
.eh_frame:0000000000006BD9                 db    0
.eh_frame:0000000000006BDA                 db    0
.eh_frame:0000000000006BDB                 db    0
.eh_frame:0000000000006BDC                 db    0
.eh_frame:0000000000006BDD                 db    0
.eh_frame:0000000000006BDE                 db    0
.eh_frame:0000000000006BDF                 db    0
.eh_frame:0000000000006BE0                 db  28h ; (
.eh_frame:0000000000006BE1                 db    0
.eh_frame:0000000000006BE2                 db    0
.eh_frame:0000000000006BE3                 db    0
.eh_frame:0000000000006BE4                 db  5Ch ; \
.eh_frame:0000000000006BE5                 db    0
.eh_frame:0000000000006BE6                 db    0
.eh_frame:0000000000006BE7                 db    0
.eh_frame:0000000000006BE8                 db  68h ; h
.eh_frame:0000000000006BE9                 db 0B2h
.eh_frame:0000000000006BEA                 db 0FFh
.eh_frame:0000000000006BEB                 db 0FFh
.eh_frame:0000000000006BEC                 db  22h ; "
.eh_frame:0000000000006BED                 db    4
.eh_frame:0000000000006BEE                 db    0
.eh_frame:0000000000006BEF                 db    0
.eh_frame:0000000000006BF0                 db    0
.eh_frame:0000000000006BF1                 db  42h ; B
.eh_frame:0000000000006BF2                 db  0Eh
.eh_frame:0000000000006BF3                 db  10h
.eh_frame:0000000000006BF4                 db  8Dh
.eh_frame:0000000000006BF5                 db    2
.eh_frame:0000000000006BF6                 db  42h ; B
.eh_frame:0000000000006BF7                 db  0Eh
.eh_frame:0000000000006BF8                 db  18h
.eh_frame:0000000000006BF9                 db  8Ch
.eh_frame:0000000000006BFA                 db    3
.eh_frame:0000000000006BFB                 db  46h ; F
.eh_frame:0000000000006BFC                 db  0Eh
.eh_frame:0000000000006BFD                 db  20h
.eh_frame:0000000000006BFE                 db  86h
.eh_frame:0000000000006BFF                 db    4
.eh_frame:0000000000006C00                 db  41h ; A
.eh_frame:0000000000006C01                 db  0Eh
.eh_frame:0000000000006C02                 db  28h ; (
.eh_frame:0000000000006C03                 db  83h
.eh_frame:0000000000006C04                 db    5
.eh_frame:0000000000006C05                 db  49h ; I
.eh_frame:0000000000006C06                 db  0Eh
.eh_frame:0000000000006C07                 db 0B0h
.eh_frame:0000000000006C08                 db    1
.eh_frame:0000000000006C09                 db    0
.eh_frame:0000000000006C0A                 db    0
.eh_frame:0000000000006C0B                 db    0
.eh_frame:0000000000006C0C                 db  48h ; H
.eh_frame:0000000000006C0D                 db    0
.eh_frame:0000000000006C0E                 db    0
.eh_frame:0000000000006C0F                 db    0
.eh_frame:0000000000006C10                 db  88h
.eh_frame:0000000000006C11                 db    0
.eh_frame:0000000000006C12                 db    0
.eh_frame:0000000000006C13                 db    0
.eh_frame:0000000000006C14                 db 0ACh
.eh_frame:0000000000006C15                 db 0AAh
.eh_frame:0000000000006C16                 db 0FFh
.eh_frame:0000000000006C17                 db 0FFh
.eh_frame:0000000000006C18                 db  7Eh ; ~
.eh_frame:0000000000006C19                 db    6
.eh_frame:0000000000006C1A                 db    0
.eh_frame:0000000000006C1B                 db    0
.eh_frame:0000000000006C1C                 db    0
.eh_frame:0000000000006C1D                 db  42h ; B
.eh_frame:0000000000006C1E                 db  0Eh
.eh_frame:0000000000006C1F                 db  10h
.eh_frame:0000000000006C20                 db  8Fh
.eh_frame:0000000000006C21                 db    2
.eh_frame:0000000000006C22                 db  42h ; B
.eh_frame:0000000000006C23                 db  0Eh
.eh_frame:0000000000006C24                 db  18h
.eh_frame:0000000000006C25                 db  8Eh
.eh_frame:0000000000006C26                 db    3
.eh_frame:0000000000006C27                 db  42h ; B
.eh_frame:0000000000006C28                 db  0Eh
.eh_frame:0000000000006C29                 db  20h
.eh_frame:0000000000006C2A                 db  8Dh
.eh_frame:0000000000006C2B                 db    4
.eh_frame:0000000000006C2C                 db  42h ; B
.eh_frame:0000000000006C2D                 db  0Eh
.eh_frame:0000000000006C2E                 db  28h ; (
.eh_frame:0000000000006C2F                 db  8Ch
.eh_frame:0000000000006C30                 db    5
.eh_frame:0000000000006C31                 db  48h ; H
.eh_frame:0000000000006C32                 db  0Eh
.eh_frame:0000000000006C33                 db  30h ; 0
.eh_frame:0000000000006C34                 db  86h
.eh_frame:0000000000006C35                 db    6
.eh_frame:0000000000006C36                 db  41h ; A
.eh_frame:0000000000006C37                 db  0Eh
.eh_frame:0000000000006C38                 db  38h ; 8
.eh_frame:0000000000006C39                 db  83h
.eh_frame:0000000000006C3A                 db    7
.eh_frame:0000000000006C3B                 db  4Dh ; M
.eh_frame:0000000000006C3C                 db  0Eh
.eh_frame:0000000000006C3D                 db  60h ; `
.eh_frame:0000000000006C3E                 db    3
.eh_frame:0000000000006C3F                 db 0BBh
.eh_frame:0000000000006C40                 db    2
.eh_frame:0000000000006C41                 db  0Ah
.eh_frame:0000000000006C42                 db  0Eh
.eh_frame:0000000000006C43                 db  38h ; 8
.eh_frame:0000000000006C44                 db  41h ; A
.eh_frame:0000000000006C45                 db  0Eh
.eh_frame:0000000000006C46                 db  30h ; 0
.eh_frame:0000000000006C47                 db  41h ; A
.eh_frame:0000000000006C48                 db  0Eh
.eh_frame:0000000000006C49                 db  28h ; (
.eh_frame:0000000000006C4A                 db  42h ; B
.eh_frame:0000000000006C4B                 db  0Eh
.eh_frame:0000000000006C4C                 db  20h
.eh_frame:0000000000006C4D                 db  42h ; B
.eh_frame:0000000000006C4E                 db  0Eh
.eh_frame:0000000000006C4F                 db  18h
.eh_frame:0000000000006C50                 db  42h ; B
.eh_frame:0000000000006C51                 db  0Eh
.eh_frame:0000000000006C52                 db  10h
.eh_frame:0000000000006C53                 db  42h ; B
.eh_frame:0000000000006C54                 db  0Eh
.eh_frame:0000000000006C55                 db    8
.eh_frame:0000000000006C56                 db  41h ; A
.eh_frame:0000000000006C57                 db  0Bh
.eh_frame:0000000000006C58                 db  10h
.eh_frame:0000000000006C59                 db    0
.eh_frame:0000000000006C5A                 db    0
.eh_frame:0000000000006C5B                 db    0
.eh_frame:0000000000006C5C                 db 0D4h
.eh_frame:0000000000006C5D                 db    0
.eh_frame:0000000000006C5E                 db    0
.eh_frame:0000000000006C5F                 db    0
.eh_frame:0000000000006C60                 db  20h
.eh_frame:0000000000006C61                 db 0B6h
.eh_frame:0000000000006C62                 db 0FFh
.eh_frame:0000000000006C63                 db 0FFh
.eh_frame:0000000000006C64                 db    8
.eh_frame:0000000000006C65                 db    0
.eh_frame:0000000000006C66                 db    0
.eh_frame:0000000000006C67                 db    0
.eh_frame:0000000000006C68                 db    0
.eh_frame:0000000000006C69                 db    0
.eh_frame:0000000000006C6A                 db    0
.eh_frame:0000000000006C6B                 db    0
.eh_frame:0000000000006C6C                 db  10h
.eh_frame:0000000000006C6D                 db    0
.eh_frame:0000000000006C6E                 db    0
.eh_frame:0000000000006C6F                 db    0
.eh_frame:0000000000006C70                 db 0E8h
.eh_frame:0000000000006C71                 db    0
.eh_frame:0000000000006C72                 db    0
.eh_frame:0000000000006C73                 db    0
.eh_frame:0000000000006C74                 db  1Ch
.eh_frame:0000000000006C75                 db 0B6h
.eh_frame:0000000000006C76                 db 0FFh
.eh_frame:0000000000006C77                 db 0FFh
.eh_frame:0000000000006C78                 db    8
.eh_frame:0000000000006C79                 db    0
.eh_frame:0000000000006C7A                 db    0
.eh_frame:0000000000006C7B                 db    0
.eh_frame:0000000000006C7C                 db    0
.eh_frame:0000000000006C7D                 db    0
.eh_frame:0000000000006C7E                 db    0
.eh_frame:0000000000006C7F                 db    0
.eh_frame:0000000000006C80                 db  2Ch ; ,
.eh_frame:0000000000006C81                 db    0
.eh_frame:0000000000006C82                 db    0
.eh_frame:0000000000006C83                 db    0
.eh_frame:0000000000006C84                 db 0FCh
.eh_frame:0000000000006C85                 db    0
.eh_frame:0000000000006C86                 db    0
.eh_frame:0000000000006C87                 db    0
.eh_frame:0000000000006C88                 db  18h
.eh_frame:0000000000006C89                 db 0B6h
.eh_frame:0000000000006C8A                 db 0FFh
.eh_frame:0000000000006C8B                 db 0FFh
.eh_frame:0000000000006C8C                 db 0A4h
.eh_frame:0000000000006C8D                 db    0
.eh_frame:0000000000006C8E                 db    0
.eh_frame:0000000000006C8F                 db    0
.eh_frame:0000000000006C90                 db    0
.eh_frame:0000000000006C91                 db  41h ; A
.eh_frame:0000000000006C92                 db  0Eh
.eh_frame:0000000000006C93                 db  10h
.eh_frame:0000000000006C94                 db  86h
.eh_frame:0000000000006C95                 db    2
.eh_frame:0000000000006C96                 db  41h ; A
.eh_frame:0000000000006C97                 db  0Eh
.eh_frame:0000000000006C98                 db  18h
.eh_frame:0000000000006C99                 db  83h
.eh_frame:0000000000006C9A                 db    3
.eh_frame:0000000000006C9B                 db  44h ; D
.eh_frame:0000000000006C9C                 db  0Eh
.eh_frame:0000000000006C9D                 db  20h
.eh_frame:0000000000006C9E                 db  7Ah ; z
.eh_frame:0000000000006C9F                 db  0Ah
.eh_frame:0000000000006CA0                 db  0Eh
.eh_frame:0000000000006CA1                 db  18h
.eh_frame:0000000000006CA2                 db  41h ; A
.eh_frame:0000000000006CA3                 db  0Eh
.eh_frame:0000000000006CA4                 db  10h
.eh_frame:0000000000006CA5                 db  41h ; A
.eh_frame:0000000000006CA6                 db  0Eh
.eh_frame:0000000000006CA7                 db    8
.eh_frame:0000000000006CA8                 db  41h ; A
.eh_frame:0000000000006CA9                 db  0Bh
.eh_frame:0000000000006CAA                 db    0
.eh_frame:0000000000006CAB                 db    0
.eh_frame:0000000000006CAC                 db    0
.eh_frame:0000000000006CAD                 db    0
.eh_frame:0000000000006CAE                 db    0
.eh_frame:0000000000006CAF                 db    0
.eh_frame:0000000000006CB0                 db  44h ; D
.eh_frame:0000000000006CB1                 db    0
.eh_frame:0000000000006CB2                 db    0
.eh_frame:0000000000006CB3                 db    0
.eh_frame:0000000000006CB4                 db  2Ch ; ,
.eh_frame:0000000000006CB5                 db    1
.eh_frame:0000000000006CB6                 db    0
.eh_frame:0000000000006CB7                 db    0
.eh_frame:0000000000006CB8                 db  98h
.eh_frame:0000000000006CB9                 db 0B6h
.eh_frame:0000000000006CBA                 db 0FFh
.eh_frame:0000000000006CBB                 db 0FFh
.eh_frame:0000000000006CBC                 db 0A9h
.eh_frame:0000000000006CBD                 db    3
.eh_frame:0000000000006CBE                 db    0
.eh_frame:0000000000006CBF                 db    0
.eh_frame:0000000000006CC0                 db    0
.eh_frame:0000000000006CC1                 db  41h ; A
.eh_frame:0000000000006CC2                 db  0Eh
.eh_frame:0000000000006CC3                 db  10h
.eh_frame:0000000000006CC4                 db  86h
.eh_frame:0000000000006CC5                 db    2
.eh_frame:0000000000006CC6                 db  41h ; A
.eh_frame:0000000000006CC7                 db  0Eh
.eh_frame:0000000000006CC8                 db  18h
.eh_frame:0000000000006CC9                 db  83h
.eh_frame:0000000000006CCA                 db    3
.eh_frame:0000000000006CCB                 db  47h ; G
.eh_frame:0000000000006CCC                 db  0Eh
.eh_frame:0000000000006CCD                 db  20h
.eh_frame:0000000000006CCE                 db    2
.eh_frame:0000000000006CCF                 db 0B8h
.eh_frame:0000000000006CD0                 db  0Ah
.eh_frame:0000000000006CD1                 db  0Eh
.eh_frame:0000000000006CD2                 db  18h
.eh_frame:0000000000006CD3                 db  41h ; A
.eh_frame:0000000000006CD4                 db  0Eh
.eh_frame:0000000000006CD5                 db  10h
.eh_frame:0000000000006CD6                 db  41h ; A
.eh_frame:0000000000006CD7                 db  0Eh
.eh_frame:0000000000006CD8                 db    8
.eh_frame:0000000000006CD9                 db  45h ; E
.eh_frame:0000000000006CDA                 db  0Bh
.eh_frame:0000000000006CDB                 db  6Bh ; k
.eh_frame:0000000000006CDC                 db  0Ah
.eh_frame:0000000000006CDD                 db  0Eh
.eh_frame:0000000000006CDE                 db  18h
.eh_frame:0000000000006CDF                 db  43h ; C
.eh_frame:0000000000006CE0                 db  0Eh
.eh_frame:0000000000006CE1                 db  10h
.eh_frame:0000000000006CE2                 db  41h ; A
.eh_frame:0000000000006CE3                 db  0Eh
.eh_frame:0000000000006CE4                 db    8
.eh_frame:0000000000006CE5                 db  49h ; I
.eh_frame:0000000000006CE6                 db  0Bh
.eh_frame:0000000000006CE7                 db    3
.eh_frame:0000000000006CE8                 db  6Ch ; l
.eh_frame:0000000000006CE9                 db    2
.eh_frame:0000000000006CEA                 db  0Ah
.eh_frame:0000000000006CEB                 db  0Eh
.eh_frame:0000000000006CEC                 db  18h
.eh_frame:0000000000006CED                 db  41h ; A
.eh_frame:0000000000006CEE                 db  0Eh
.eh_frame:0000000000006CEF                 db  10h
.eh_frame:0000000000006CF0                 db  41h ; A
.eh_frame:0000000000006CF1                 db  0Eh
.eh_frame:0000000000006CF2                 db    8
.eh_frame:0000000000006CF3                 db  41h ; A
.eh_frame:0000000000006CF4                 db  0Bh
.eh_frame:0000000000006CF5                 db    0
.eh_frame:0000000000006CF6                 db    0
.eh_frame:0000000000006CF7                 db    0
.eh_frame:0000000000006CF8                 db  20h
.eh_frame:0000000000006CF9                 db    0
.eh_frame:0000000000006CFA                 db    0
.eh_frame:0000000000006CFB                 db    0
.eh_frame:0000000000006CFC                 db  74h ; t
.eh_frame:0000000000006CFD                 db    1
.eh_frame:0000000000006CFE                 db    0
.eh_frame:0000000000006CFF                 db    0
.eh_frame:0000000000006D00                 db    0
.eh_frame:0000000000006D01                 db 0BAh
.eh_frame:0000000000006D02                 db 0FFh
.eh_frame:0000000000006D03                 db 0FFh
.eh_frame:0000000000006D04                 db  89h
.eh_frame:0000000000006D05                 db    0
.eh_frame:0000000000006D06                 db    0
.eh_frame:0000000000006D07                 db    0
.eh_frame:0000000000006D08                 db    0
.eh_frame:0000000000006D09                 db  41h ; A
.eh_frame:0000000000006D0A                 db  0Eh
.eh_frame:0000000000006D0B                 db  10h
.eh_frame:0000000000006D0C                 db  83h
.eh_frame:0000000000006D0D                 db    2
.eh_frame:0000000000006D0E                 db  4Fh ; O
.eh_frame:0000000000006D0F                 db  0Eh
.eh_frame:0000000000006D10                 db 0B0h
.eh_frame:0000000000006D11                 db    1
.eh_frame:0000000000006D12                 db    2
.eh_frame:0000000000006D13                 db  64h ; d
.eh_frame:0000000000006D14                 db  0Ah
.eh_frame:0000000000006D15                 db  0Eh
.eh_frame:0000000000006D16                 db  10h
.eh_frame:0000000000006D17                 db  41h ; A
.eh_frame:0000000000006D18                 db  0Eh
.eh_frame:0000000000006D19                 db    8
.eh_frame:0000000000006D1A                 db  4Bh ; K
.eh_frame:0000000000006D1B                 db  0Bh
.eh_frame:0000000000006D1C                 db  30h ; 0
.eh_frame:0000000000006D1D                 db    0
.eh_frame:0000000000006D1E                 db    0
.eh_frame:0000000000006D1F                 db    0
.eh_frame:0000000000006D20                 db  98h
.eh_frame:0000000000006D21                 db    1
.eh_frame:0000000000006D22                 db    0
.eh_frame:0000000000006D23                 db    0
.eh_frame:0000000000006D24                 db  6Ch ; l
.eh_frame:0000000000006D25                 db 0BAh
.eh_frame:0000000000006D26                 db 0FFh
.eh_frame:0000000000006D27                 db 0FFh
.eh_frame:0000000000006D28                 db  6Dh ; m
.eh_frame:0000000000006D29                 db    1
.eh_frame:0000000000006D2A                 db    0
.eh_frame:0000000000006D2B                 db    0
.eh_frame:0000000000006D2C                 db    0
.eh_frame:0000000000006D2D                 db  5Bh ; [
.eh_frame:0000000000006D2E                 db  0Eh
.eh_frame:0000000000006D2F                 db  10h
.eh_frame:0000000000006D30                 db  8Ch
.eh_frame:0000000000006D31                 db    2
.eh_frame:0000000000006D32                 db  41h ; A
.eh_frame:0000000000006D33                 db  0Eh
.eh_frame:0000000000006D34                 db  18h
.eh_frame:0000000000006D35                 db  86h
.eh_frame:0000000000006D36                 db    3
.eh_frame:0000000000006D37                 db  41h ; A
.eh_frame:0000000000006D38                 db  0Eh
.eh_frame:0000000000006D39                 db  20h
.eh_frame:0000000000006D3A                 db  83h
.eh_frame:0000000000006D3B                 db    4
.eh_frame:0000000000006D3C                 db    3
.eh_frame:0000000000006D3D                 db    8
.eh_frame:0000000000006D3E                 db    1
.eh_frame:0000000000006D3F                 db  0Ah
.eh_frame:0000000000006D40                 db  0Eh
.eh_frame:0000000000006D41                 db  18h
.eh_frame:0000000000006D42                 db  41h ; A
.eh_frame:0000000000006D43                 db  0Eh
.eh_frame:0000000000006D44                 db  10h
.eh_frame:0000000000006D45                 db  42h ; B
.eh_frame:0000000000006D46                 db  0Eh
.eh_frame:0000000000006D47                 db    8
.eh_frame:0000000000006D48                 db  48h ; H
.eh_frame:0000000000006D49                 db  0Bh
.eh_frame:0000000000006D4A                 db  70h ; p
.eh_frame:0000000000006D4B                 db  0Eh
.eh_frame:0000000000006D4C                 db    8
.eh_frame:0000000000006D4D                 db 0C3h
.eh_frame:0000000000006D4E                 db 0C6h
.eh_frame:0000000000006D4F                 db 0CCh
.eh_frame:0000000000006D50                 db  1Ch
.eh_frame:0000000000006D51                 db    0
.eh_frame:0000000000006D52                 db    0
.eh_frame:0000000000006D53                 db    0
.eh_frame:0000000000006D54                 db 0CCh
.eh_frame:0000000000006D55                 db    1
.eh_frame:0000000000006D56                 db    0
.eh_frame:0000000000006D57                 db    0
.eh_frame:0000000000006D58                 db 0A8h
.eh_frame:0000000000006D59                 db 0BBh
.eh_frame:0000000000006D5A                 db 0FFh
.eh_frame:0000000000006D5B                 db 0FFh
.eh_frame:0000000000006D5C                 db  9Fh
.eh_frame:0000000000006D5D                 db    0
.eh_frame:0000000000006D5E                 db    0
.eh_frame:0000000000006D5F                 db    0
.eh_frame:0000000000006D60                 db    0
.eh_frame:0000000000006D61                 db  44h ; D
.eh_frame:0000000000006D62                 db  0Eh
.eh_frame:0000000000006D63                 db  10h
.eh_frame:0000000000006D64                 db  83h
.eh_frame:0000000000006D65                 db    2
.eh_frame:0000000000006D66                 db    2
.eh_frame:0000000000006D67                 db  78h ; x
.eh_frame:0000000000006D68                 db  0Ah
.eh_frame:0000000000006D69                 db  0Eh
.eh_frame:0000000000006D6A                 db    8
.eh_frame:0000000000006D6B                 db  41h ; A
.eh_frame:0000000000006D6C                 db  0Bh
.eh_frame:0000000000006D6D                 db    0
.eh_frame:0000000000006D6E                 db    0
.eh_frame:0000000000006D6F                 db    0
.eh_frame:0000000000006D70                 db  40h ; @
.eh_frame:0000000000006D71                 db    0
.eh_frame:0000000000006D72                 db    0
.eh_frame:0000000000006D73                 db    0
.eh_frame:0000000000006D74                 db 0ECh
.eh_frame:0000000000006D75                 db    1
.eh_frame:0000000000006D76                 db    0
.eh_frame:0000000000006D77                 db    0
.eh_frame:0000000000006D78                 db  28h ; (
.eh_frame:0000000000006D79                 db 0BCh
.eh_frame:0000000000006D7A                 db 0FFh
.eh_frame:0000000000006D7B                 db 0FFh
.eh_frame:0000000000006D7C                 db 0E7h
.eh_frame:0000000000006D7D                 db    0
.eh_frame:0000000000006D7E                 db    0
.eh_frame:0000000000006D7F                 db    0
.eh_frame:0000000000006D80                 db    0
.eh_frame:0000000000006D81                 db  41h ; A
.eh_frame:0000000000006D82                 db  0Eh
.eh_frame:0000000000006D83                 db  10h
.eh_frame:0000000000006D84                 db  86h
.eh_frame:0000000000006D85                 db    2
.eh_frame:0000000000006D86                 db  41h ; A
.eh_frame:0000000000006D87                 db  0Eh
.eh_frame:0000000000006D88                 db  18h
.eh_frame:0000000000006D89                 db  83h
.eh_frame:0000000000006D8A                 db    3
.eh_frame:0000000000006D8B                 db  49h ; I
.eh_frame:0000000000006D8C                 db  0Eh
.eh_frame:0000000000006D8D                 db  20h
.eh_frame:0000000000006D8E                 db  6Eh ; n
.eh_frame:0000000000006D8F                 db  0Ah
.eh_frame:0000000000006D90                 db  0Eh
.eh_frame:0000000000006D91                 db  18h
.eh_frame:0000000000006D92                 db  41h ; A
.eh_frame:0000000000006D93                 db  0Eh
.eh_frame:0000000000006D94                 db  10h
.eh_frame:0000000000006D95                 db  41h ; A
.eh_frame:0000000000006D96                 db  0Eh
.eh_frame:0000000000006D97                 db    8
.eh_frame:0000000000006D98                 db  45h ; E
.eh_frame:0000000000006D99                 db  0Bh
.eh_frame:0000000000006D9A                 db    2
.eh_frame:0000000000006D9B                 db  4Ah ; J
.eh_frame:0000000000006D9C                 db  0Ah
.eh_frame:0000000000006D9D                 db  0Eh
.eh_frame:0000000000006D9E                 db  18h
.eh_frame:0000000000006D9F                 db  41h ; A
.eh_frame:0000000000006DA0                 db  0Eh
.eh_frame:0000000000006DA1                 db  10h
.eh_frame:0000000000006DA2                 db  41h ; A
.eh_frame:0000000000006DA3                 db  0Eh
.eh_frame:0000000000006DA4                 db    8
.eh_frame:0000000000006DA5                 db  44h ; D
.eh_frame:0000000000006DA6                 db  0Bh
.eh_frame:0000000000006DA7                 db    2
.eh_frame:0000000000006DA8                 db  54h ; T
.eh_frame:0000000000006DA9                 db  0Eh
.eh_frame:0000000000006DAA                 db  18h
.eh_frame:0000000000006DAB                 db  41h ; A
.eh_frame:0000000000006DAC                 db  0Eh
.eh_frame:0000000000006DAD                 db  10h
.eh_frame:0000000000006DAE                 db  41h ; A
.eh_frame:0000000000006DAF                 db  0Eh
.eh_frame:0000000000006DB0                 db    8
.eh_frame:0000000000006DB1                 db    0
.eh_frame:0000000000006DB2                 db    0
.eh_frame:0000000000006DB3                 db    0
.eh_frame:0000000000006DB4                 db  74h ; t
.eh_frame:0000000000006DB5                 db    0
.eh_frame:0000000000006DB6                 db    0
.eh_frame:0000000000006DB7                 db    0
.eh_frame:0000000000006DB8                 db  30h ; 0
.eh_frame:0000000000006DB9                 db    2
.eh_frame:0000000000006DBA                 db    0
.eh_frame:0000000000006DBB                 db    0
.eh_frame:0000000000006DBC                 db 0D4h
.eh_frame:0000000000006DBD                 db 0BCh
.eh_frame:0000000000006DBE                 db 0FFh
.eh_frame:0000000000006DBF                 db 0FFh
.eh_frame:0000000000006DC0                 db  34h ; 4
.eh_frame:0000000000006DC1                 db  12h
.eh_frame:0000000000006DC2                 db    0
.eh_frame:0000000000006DC3                 db    0
.eh_frame:0000000000006DC4                 db    0
.eh_frame:0000000000006DC5                 db  42h ; B
.eh_frame:0000000000006DC6                 db  0Eh
.eh_frame:0000000000006DC7                 db  10h
.eh_frame:0000000000006DC8                 db  8Fh
.eh_frame:0000000000006DC9                 db    2
.eh_frame:0000000000006DCA                 db  42h ; B
.eh_frame:0000000000006DCB                 db  0Eh
.eh_frame:0000000000006DCC                 db  18h
.eh_frame:0000000000006DCD                 db  8Eh
.eh_frame:0000000000006DCE                 db    3
.eh_frame:0000000000006DCF                 db  45h ; E
.eh_frame:0000000000006DD0                 db  0Eh
.eh_frame:0000000000006DD1                 db  20h
.eh_frame:0000000000006DD2                 db  8Dh
.eh_frame:0000000000006DD3                 db    4
.eh_frame:0000000000006DD4                 db  42h ; B
.eh_frame:0000000000006DD5                 db  0Eh
.eh_frame:0000000000006DD6                 db  28h ; (
.eh_frame:0000000000006DD7                 db  8Ch
.eh_frame:0000000000006DD8                 db    5
.eh_frame:0000000000006DD9                 db  44h ; D
.eh_frame:0000000000006DDA                 db  0Eh
.eh_frame:0000000000006DDB                 db  30h ; 0
.eh_frame:0000000000006DDC                 db  86h
.eh_frame:0000000000006DDD                 db    6
.eh_frame:0000000000006DDE                 db  41h ; A
.eh_frame:0000000000006DDF                 db  0Eh
.eh_frame:0000000000006DE0                 db  38h ; 8
.eh_frame:0000000000006DE1                 db  83h
.eh_frame:0000000000006DE2                 db    7
.eh_frame:0000000000006DE3                 db  53h ; S
.eh_frame:0000000000006DE4                 db  0Eh
.eh_frame:0000000000006DE5                 db 0F0h
.eh_frame:0000000000006DE6                 db    1
.eh_frame:0000000000006DE7                 db    3
.eh_frame:0000000000006DE8                 db  81h
.eh_frame:0000000000006DE9                 db  0Bh
.eh_frame:0000000000006DEA                 db  0Eh
.eh_frame:0000000000006DEB                 db 0F8h
.eh_frame:0000000000006DEC                 db    1
.eh_frame:0000000000006DED                 db  4Ah ; J
.eh_frame:0000000000006DEE                 db  0Eh
.eh_frame:0000000000006DEF                 db  80h
.eh_frame:0000000000006DF0                 db    2
.eh_frame:0000000000006DF1                 db  44h ; D
.eh_frame:0000000000006DF2                 db  0Eh
.eh_frame:0000000000006DF3                 db  88h
.eh_frame:0000000000006DF4                 db    2
.eh_frame:0000000000006DF5                 db  45h ; E
.eh_frame:0000000000006DF6                 db  0Eh
.eh_frame:0000000000006DF7                 db  90h
.eh_frame:0000000000006DF8                 db    2
.eh_frame:0000000000006DF9                 db  5Fh ; _
.eh_frame:0000000000006DFA                 db  0Eh
.eh_frame:0000000000006DFB                 db 0F0h
.eh_frame:0000000000006DFC                 db    1
.eh_frame:0000000000006DFD                 db  64h ; d
.eh_frame:0000000000006DFE                 db  0Ah
.eh_frame:0000000000006DFF                 db  0Eh
.eh_frame:0000000000006E00                 db  38h ; 8
.eh_frame:0000000000006E01                 db  41h ; A
.eh_frame:0000000000006E02                 db  0Eh
.eh_frame:0000000000006E03                 db  30h ; 0
.eh_frame:0000000000006E04                 db  41h ; A
.eh_frame:0000000000006E05                 db  0Eh
.eh_frame:0000000000006E06                 db  28h ; (
.eh_frame:0000000000006E07                 db  42h ; B
.eh_frame:0000000000006E08                 db  0Eh
.eh_frame:0000000000006E09                 db  20h
.eh_frame:0000000000006E0A                 db  42h ; B
.eh_frame:0000000000006E0B                 db  0Eh
.eh_frame:0000000000006E0C                 db  18h
.eh_frame:0000000000006E0D                 db  42h ; B
.eh_frame:0000000000006E0E                 db  0Eh
.eh_frame:0000000000006E0F                 db  10h
.eh_frame:0000000000006E10                 db  42h ; B
.eh_frame:0000000000006E11                 db  0Eh
.eh_frame:0000000000006E12                 db    8
.eh_frame:0000000000006E13                 db  44h ; D
.eh_frame:0000000000006E14                 db  0Bh
.eh_frame:0000000000006E15                 db    3
.eh_frame:0000000000006E16                 db  99h
.eh_frame:0000000000006E17                 db    5
.eh_frame:0000000000006E18                 db  0Eh
.eh_frame:0000000000006E19                 db 0F8h
.eh_frame:0000000000006E1A                 db    1
.eh_frame:0000000000006E1B                 db  4Dh ; M
.eh_frame:0000000000006E1C                 db  0Eh
.eh_frame:0000000000006E1D                 db  80h
.eh_frame:0000000000006E1E                 db    2
.eh_frame:0000000000006E1F                 db  44h ; D
.eh_frame:0000000000006E20                 db  0Eh
.eh_frame:0000000000006E21                 db  88h
.eh_frame:0000000000006E22                 db    2
.eh_frame:0000000000006E23                 db  47h ; G
.eh_frame:0000000000006E24                 db  0Eh
.eh_frame:0000000000006E25                 db  90h
.eh_frame:0000000000006E26                 db    2
.eh_frame:0000000000006E27                 db  5Bh ; [
.eh_frame:0000000000006E28                 db  0Eh
.eh_frame:0000000000006E29                 db 0F0h
.eh_frame:0000000000006E2A                 db    1
.eh_frame:0000000000006E2B                 db    0
.eh_frame:0000000000006E2C                 db  68h ; h
.eh_frame:0000000000006E2D                 db    0
.eh_frame:0000000000006E2E                 db    0
.eh_frame:0000000000006E2F                 db    0
.eh_frame:0000000000006E30                 db 0A8h
.eh_frame:0000000000006E31                 db    2
.eh_frame:0000000000006E32                 db    0
.eh_frame:0000000000006E33                 db    0
.eh_frame:0000000000006E34                 db  9Ch
.eh_frame:0000000000006E35                 db 0CEh
.eh_frame:0000000000006E36                 db 0FFh
.eh_frame:0000000000006E37                 db 0FFh
.eh_frame:0000000000006E38                 db 0ABh
.eh_frame:0000000000006E39                 db    1
.eh_frame:0000000000006E3A                 db    0
.eh_frame:0000000000006E3B                 db    0
.eh_frame:0000000000006E3C                 db    0
.eh_frame:0000000000006E3D                 db  42h ; B
.eh_frame:0000000000006E3E                 db  0Eh
.eh_frame:0000000000006E3F                 db  10h
.eh_frame:0000000000006E40                 db  8Fh
.eh_frame:0000000000006E41                 db    2
.eh_frame:0000000000006E42                 db  42h ; B
.eh_frame:0000000000006E43                 db  0Eh
.eh_frame:0000000000006E44                 db  18h
.eh_frame:0000000000006E45                 db  8Eh
.eh_frame:0000000000006E46                 db    3
.eh_frame:0000000000006E47                 db  45h ; E
.eh_frame:0000000000006E48                 db  0Eh
.eh_frame:0000000000006E49                 db  20h
.eh_frame:0000000000006E4A                 db  8Dh
.eh_frame:0000000000006E4B                 db    4
.eh_frame:0000000000006E4C                 db  42h ; B
.eh_frame:0000000000006E4D                 db  0Eh
.eh_frame:0000000000006E4E                 db  28h ; (
.eh_frame:0000000000006E4F                 db  8Ch
.eh_frame:0000000000006E50                 db    5
.eh_frame:0000000000006E51                 db  44h ; D
.eh_frame:0000000000006E52                 db  0Eh
.eh_frame:0000000000006E53                 db  30h ; 0
.eh_frame:0000000000006E54                 db  86h
.eh_frame:0000000000006E55                 db    6
.eh_frame:0000000000006E56                 db  41h ; A
.eh_frame:0000000000006E57                 db  0Eh
.eh_frame:0000000000006E58                 db  38h ; 8
.eh_frame:0000000000006E59                 db  83h
.eh_frame:0000000000006E5A                 db    7
.eh_frame:0000000000006E5B                 db  47h ; G
.eh_frame:0000000000006E5C                 db  0Eh
.eh_frame:0000000000006E5D                 db  60h ; `
.eh_frame:0000000000006E5E                 db    2
.eh_frame:0000000000006E5F                 db  99h
.eh_frame:0000000000006E60                 db  0Eh
.eh_frame:0000000000006E61                 db  68h ; h
.eh_frame:0000000000006E62                 db  5Fh ; _
.eh_frame:0000000000006E63                 db  0Eh
.eh_frame:0000000000006E64                 db  70h ; p
.eh_frame:0000000000006E65                 db  46h ; F
.eh_frame:0000000000006E66                 db  0Eh
.eh_frame:0000000000006E67                 db  78h ; x
.eh_frame:0000000000006E68                 db  42h ; B
.eh_frame:0000000000006E69                 db  0Eh
.eh_frame:0000000000006E6A                 db  80h
.eh_frame:0000000000006E6B                 db    1
.eh_frame:0000000000006E6C                 db  59h ; Y
.eh_frame:0000000000006E6D                 db  0Eh
.eh_frame:0000000000006E6E                 db  60h ; `
.eh_frame:0000000000006E6F                 db    2
.eh_frame:0000000000006E70                 db  40h ; @
.eh_frame:0000000000006E71                 db  0Eh
.eh_frame:0000000000006E72                 db  68h ; h
.eh_frame:0000000000006E73                 db  4Bh ; K
.eh_frame:0000000000006E74                 db  0Eh
.eh_frame:0000000000006E75                 db  70h ; p
.eh_frame:0000000000006E76                 db  43h ; C
.eh_frame:0000000000006E77                 db  0Eh
.eh_frame:0000000000006E78                 db  78h ; x
.eh_frame:0000000000006E79                 db  45h ; E
.eh_frame:0000000000006E7A                 db  0Eh
.eh_frame:0000000000006E7B                 db  80h
.eh_frame:0000000000006E7C                 db    1
.eh_frame:0000000000006E7D                 db  5Eh ; ^
.eh_frame:0000000000006E7E                 db  0Eh
.eh_frame:0000000000006E7F                 db  60h ; `
.eh_frame:0000000000006E80                 db  4Ch ; L
.eh_frame:0000000000006E81                 db  0Ah
.eh_frame:0000000000006E82                 db  0Eh
.eh_frame:0000000000006E83                 db  38h ; 8
.eh_frame:0000000000006E84                 db  44h ; D
.eh_frame:0000000000006E85                 db  0Eh
.eh_frame:0000000000006E86                 db  30h ; 0
.eh_frame:0000000000006E87                 db  41h ; A
.eh_frame:0000000000006E88                 db  0Eh
.eh_frame:0000000000006E89                 db  28h ; (
.eh_frame:0000000000006E8A                 db  42h ; B
.eh_frame:0000000000006E8B                 db  0Eh
.eh_frame:0000000000006E8C                 db  20h
.eh_frame:0000000000006E8D                 db  42h ; B
.eh_frame:0000000000006E8E                 db  0Eh
.eh_frame:0000000000006E8F                 db  18h
.eh_frame:0000000000006E90                 db  42h ; B
.eh_frame:0000000000006E91                 db  0Eh
.eh_frame:0000000000006E92                 db  10h
.eh_frame:0000000000006E93                 db  42h ; B
.eh_frame:0000000000006E94                 db  0Eh
.eh_frame:0000000000006E95                 db    8
.eh_frame:0000000000006E96                 db  46h ; F
.eh_frame:0000000000006E97                 db  0Bh
.eh_frame:0000000000006E98                 db  28h ; (
.eh_frame:0000000000006E99                 db    0
.eh_frame:0000000000006E9A                 db    0
.eh_frame:0000000000006E9B                 db    0
.eh_frame:0000000000006E9C                 db  14h
.eh_frame:0000000000006E9D                 db    3
.eh_frame:0000000000006E9E                 db    0
.eh_frame:0000000000006E9F                 db    0
.eh_frame:0000000000006EA0                 db 0E0h
.eh_frame:0000000000006EA1                 db 0CFh
.eh_frame:0000000000006EA2                 db 0FFh
.eh_frame:0000000000006EA3                 db 0FFh
.eh_frame:0000000000006EA4                 db  36h ; 6
.eh_frame:0000000000006EA5                 db    0
.eh_frame:0000000000006EA6                 db    0
.eh_frame:0000000000006EA7                 db    0
.eh_frame:0000000000006EA8                 db    0
.eh_frame:0000000000006EA9                 db  42h ; B
.eh_frame:0000000000006EAA                 db  0Eh
.eh_frame:0000000000006EAB                 db  10h
.eh_frame:0000000000006EAC                 db  8Ch
.eh_frame:0000000000006EAD                 db    2
.eh_frame:0000000000006EAE                 db  41h ; A
.eh_frame:0000000000006EAF                 db  0Eh
.eh_frame:0000000000006EB0                 db  18h
.eh_frame:0000000000006EB1                 db  86h
.eh_frame:0000000000006EB2                 db    3
.eh_frame:0000000000006EB3                 db  41h ; A
.eh_frame:0000000000006EB4                 db  0Eh
.eh_frame:0000000000006EB5                 db  20h
.eh_frame:0000000000006EB6                 db  83h
.eh_frame:0000000000006EB7                 db    4
.eh_frame:0000000000006EB8                 db  6Eh ; n
.eh_frame:0000000000006EB9                 db  0Eh
.eh_frame:0000000000006EBA                 db  18h
.eh_frame:0000000000006EBB                 db  41h ; A
.eh_frame:0000000000006EBC                 db  0Eh
.eh_frame:0000000000006EBD                 db  10h
.eh_frame:0000000000006EBE                 db  42h ; B
.eh_frame:0000000000006EBF                 db  0Eh
.eh_frame:0000000000006EC0                 db    8
.eh_frame:0000000000006EC1                 db    0
.eh_frame:0000000000006EC2                 db    0
.eh_frame:0000000000006EC3                 db    0
.eh_frame:0000000000006EC4                 db  10h
.eh_frame:0000000000006EC5                 db    0
.eh_frame:0000000000006EC6                 db    0
.eh_frame:0000000000006EC7                 db    0
.eh_frame:0000000000006EC8                 db  40h ; @
.eh_frame:0000000000006EC9                 db    3
.eh_frame:0000000000006ECA                 db    0
.eh_frame:0000000000006ECB                 db    0
.eh_frame:0000000000006ECC                 db 0F4h
.eh_frame:0000000000006ECD                 db 0CFh
.eh_frame:0000000000006ECE                 db 0FFh
.eh_frame:0000000000006ECF                 db 0FFh
.eh_frame:0000000000006ED0                 db  11h
.eh_frame:0000000000006ED1                 db    0
.eh_frame:0000000000006ED2                 db    0
.eh_frame:0000000000006ED3                 db    0
.eh_frame:0000000000006ED4                 db    0
.eh_frame:0000000000006ED5                 db    0
.eh_frame:0000000000006ED6                 db    0
.eh_frame:0000000000006ED7                 db    0
.eh_frame:0000000000006ED8                 db  10h
.eh_frame:0000000000006ED9                 db    0
.eh_frame:0000000000006EDA                 db    0
.eh_frame:0000000000006EDB                 db    0
.eh_frame:0000000000006EDC                 db  54h ; T
.eh_frame:0000000000006EDD                 db    3
.eh_frame:0000000000006EDE                 db    0
.eh_frame:0000000000006EDF                 db    0
.eh_frame:0000000000006EE0                 db    0
.eh_frame:0000000000006EE1                 db 0D0h
.eh_frame:0000000000006EE2                 db 0FFh
.eh_frame:0000000000006EE3                 db 0FFh
.eh_frame:0000000000006EE4                 db  11h
.eh_frame:0000000000006EE5                 db    0
.eh_frame:0000000000006EE6                 db    0
.eh_frame:0000000000006EE7                 db    0
.eh_frame:0000000000006EE8                 db    0
.eh_frame:0000000000006EE9                 db    0
.eh_frame:0000000000006EEA                 db    0
.eh_frame:0000000000006EEB                 db    0
.eh_frame:0000000000006EEC                 db  10h
.eh_frame:0000000000006EED                 db    0
.eh_frame:0000000000006EEE                 db    0
.eh_frame:0000000000006EEF                 db    0
.eh_frame:0000000000006EF0                 db  68h ; h
.eh_frame:0000000000006EF1                 db    3
.eh_frame:0000000000006EF2                 db    0
.eh_frame:0000000000006EF3                 db    0
.eh_frame:0000000000006EF4                 db  0Ch
.eh_frame:0000000000006EF5                 db 0D0h
.eh_frame:0000000000006EF6                 db 0FFh
.eh_frame:0000000000006EF7                 db 0FFh
.eh_frame:0000000000006EF8                 db  35h ; 5
.eh_frame:0000000000006EF9                 db    0
.eh_frame:0000000000006EFA                 db    0
.eh_frame:0000000000006EFB                 db    0
.eh_frame:0000000000006EFC                 db    0
.eh_frame:0000000000006EFD                 db    0
.eh_frame:0000000000006EFE                 db    0
.eh_frame:0000000000006EFF                 db    0
.eh_frame:0000000000006F00                 db  10h
.eh_frame:0000000000006F01                 db    0
.eh_frame:0000000000006F02                 db    0
.eh_frame:0000000000006F03                 db    0
.eh_frame:0000000000006F04                 db  7Ch ; |
.eh_frame:0000000000006F05                 db    3
.eh_frame:0000000000006F06                 db    0
.eh_frame:0000000000006F07                 db    0
.eh_frame:0000000000006F08                 db  38h ; 8
.eh_frame:0000000000006F09                 db 0D0h
.eh_frame:0000000000006F0A                 db 0FFh
.eh_frame:0000000000006F0B                 db 0FFh
.eh_frame:0000000000006F0C                 db  15h
.eh_frame:0000000000006F0D                 db    0
.eh_frame:0000000000006F0E                 db    0
.eh_frame:0000000000006F0F                 db    0
.eh_frame:0000000000006F10                 db    0
.eh_frame:0000000000006F11                 db    0
.eh_frame:0000000000006F12                 db    0
.eh_frame:0000000000006F13                 db    0
.eh_frame:0000000000006F14                 db  10h
.eh_frame:0000000000006F15                 db    0
.eh_frame:0000000000006F16                 db    0
.eh_frame:0000000000006F17                 db    0
.eh_frame:0000000000006F18                 db  90h
.eh_frame:0000000000006F19                 db    3
.eh_frame:0000000000006F1A                 db    0
.eh_frame:0000000000006F1B                 db    0
.eh_frame:0000000000006F1C                 db  44h ; D
.eh_frame:0000000000006F1D                 db 0D0h
.eh_frame:0000000000006F1E                 db 0FFh
.eh_frame:0000000000006F1F                 db 0FFh
.eh_frame:0000000000006F20                 db  30h ; 0
.eh_frame:0000000000006F21                 db    0
.eh_frame:0000000000006F22                 db    0
.eh_frame:0000000000006F23                 db    0
.eh_frame:0000000000006F24                 db    0
.eh_frame:0000000000006F25                 db  6Bh ; k
.eh_frame:0000000000006F26                 db  0Eh
.eh_frame:0000000000006F27                 db  10h
.eh_frame:0000000000006F28                 db  50h ; P
.eh_frame:0000000000006F29                 db    0
.eh_frame:0000000000006F2A                 db    0
.eh_frame:0000000000006F2B                 db    0
.eh_frame:0000000000006F2C                 db 0A4h
.eh_frame:0000000000006F2D                 db    3
.eh_frame:0000000000006F2E                 db    0
.eh_frame:0000000000006F2F                 db    0
.eh_frame:0000000000006F30                 db  60h ; `
.eh_frame:0000000000006F31                 db 0D0h
.eh_frame:0000000000006F32                 db 0FFh
.eh_frame:0000000000006F33                 db 0FFh
.eh_frame:0000000000006F34                 db  74h ; t
.eh_frame:0000000000006F35                 db    0
.eh_frame:0000000000006F36                 db    0
.eh_frame:0000000000006F37                 db    0
.eh_frame:0000000000006F38                 db    0
.eh_frame:0000000000006F39                 db  42h ; B
.eh_frame:0000000000006F3A                 db  0Eh
.eh_frame:0000000000006F3B                 db  10h
.eh_frame:0000000000006F3C                 db  8Fh
.eh_frame:0000000000006F3D                 db    2
.eh_frame:0000000000006F3E                 db  42h ; B
.eh_frame:0000000000006F3F                 db  0Eh
.eh_frame:0000000000006F40                 db  18h
.eh_frame:0000000000006F41                 db  8Eh
.eh_frame:0000000000006F42                 db    3
.eh_frame:0000000000006F43                 db  49h ; I
.eh_frame:0000000000006F44                 db  0Eh
.eh_frame:0000000000006F45                 db  20h
.eh_frame:0000000000006F46                 db  8Dh
.eh_frame:0000000000006F47                 db    4
.eh_frame:0000000000006F48                 db  42h ; B
.eh_frame:0000000000006F49                 db  0Eh
.eh_frame:0000000000006F4A                 db  28h ; (
.eh_frame:0000000000006F4B                 db  8Ch
.eh_frame:0000000000006F4C                 db    5
.eh_frame:0000000000006F4D                 db  44h ; D
.eh_frame:0000000000006F4E                 db  0Eh
.eh_frame:0000000000006F4F                 db  30h ; 0
.eh_frame:0000000000006F50                 db  86h
.eh_frame:0000000000006F51                 db    6
.eh_frame:0000000000006F52                 db  41h ; A
.eh_frame:0000000000006F53                 db  0Eh
.eh_frame:0000000000006F54                 db  38h ; 8
.eh_frame:0000000000006F55                 db  83h
.eh_frame:0000000000006F56                 db    7
.eh_frame:0000000000006F57                 db  4Dh ; M
.eh_frame:0000000000006F58                 db  0Eh
.eh_frame:0000000000006F59                 db  50h ; P
.eh_frame:0000000000006F5A                 db  5Fh ; _
.eh_frame:0000000000006F5B                 db  0Eh
.eh_frame:0000000000006F5C                 db  58h ; X
.eh_frame:0000000000006F5D                 db  47h ; G
.eh_frame:0000000000006F5E                 db  0Eh
.eh_frame:0000000000006F5F                 db  60h ; `
.eh_frame:0000000000006F60                 db  46h ; F
.eh_frame:0000000000006F61                 db  0Eh
.eh_frame:0000000000006F62                 db  68h ; h
.eh_frame:0000000000006F63                 db  44h ; D
.eh_frame:0000000000006F64                 db  0Eh
.eh_frame:0000000000006F65                 db  70h ; p
.eh_frame:0000000000006F66                 db  58h ; X
.eh_frame:0000000000006F67                 db  0Eh
.eh_frame:0000000000006F68                 db  38h ; 8
.eh_frame:0000000000006F69                 db  41h ; A
.eh_frame:0000000000006F6A                 db  0Eh
.eh_frame:0000000000006F6B                 db  30h ; 0
.eh_frame:0000000000006F6C                 db  41h ; A
.eh_frame:0000000000006F6D                 db  0Eh
.eh_frame:0000000000006F6E                 db  28h ; (
.eh_frame:0000000000006F6F                 db  42h ; B
.eh_frame:0000000000006F70                 db  0Eh
.eh_frame:0000000000006F71                 db  20h
.eh_frame:0000000000006F72                 db  42h ; B
.eh_frame:0000000000006F73                 db  0Eh
.eh_frame:0000000000006F74                 db  18h
.eh_frame:0000000000006F75                 db  42h ; B
.eh_frame:0000000000006F76                 db  0Eh
.eh_frame:0000000000006F77                 db  10h
.eh_frame:0000000000006F78                 db  42h ; B
.eh_frame:0000000000006F79                 db  0Eh
.eh_frame:0000000000006F7A                 db    8
.eh_frame:0000000000006F7B                 db    0
.eh_frame:0000000000006F7C                 db  68h ; h
.eh_frame:0000000000006F7D                 db    0
.eh_frame:0000000000006F7E                 db    0
.eh_frame:0000000000006F7F                 db    0
.eh_frame:0000000000006F80                 db 0F8h
.eh_frame:0000000000006F81                 db    3
.eh_frame:0000000000006F82                 db    0
.eh_frame:0000000000006F83                 db    0
.eh_frame:0000000000006F84                 db  8Ch
.eh_frame:0000000000006F85                 db 0D0h
.eh_frame:0000000000006F86                 db 0FFh
.eh_frame:0000000000006F87                 db 0FFh
.eh_frame:0000000000006F88                 db 0E3h
.eh_frame:0000000000006F89                 db    0
.eh_frame:0000000000006F8A                 db    0
.eh_frame:0000000000006F8B                 db    0
.eh_frame:0000000000006F8C                 db    0
.eh_frame:0000000000006F8D                 db  42h ; B
.eh_frame:0000000000006F8E                 db  0Eh
.eh_frame:0000000000006F8F                 db  10h
.eh_frame:0000000000006F90                 db  8Fh
.eh_frame:0000000000006F91                 db    2
.eh_frame:0000000000006F92                 db  42h ; B
.eh_frame:0000000000006F93                 db  0Eh
.eh_frame:0000000000006F94                 db  18h
.eh_frame:0000000000006F95                 db  8Eh
.eh_frame:0000000000006F96                 db    3
.eh_frame:0000000000006F97                 db  49h ; I
.eh_frame:0000000000006F98                 db  0Eh
.eh_frame:0000000000006F99                 db  20h
.eh_frame:0000000000006F9A                 db  8Dh
.eh_frame:0000000000006F9B                 db    4
.eh_frame:0000000000006F9C                 db  42h ; B
.eh_frame:0000000000006F9D                 db  0Eh
.eh_frame:0000000000006F9E                 db  28h ; (
.eh_frame:0000000000006F9F                 db  8Ch
.eh_frame:0000000000006FA0                 db    5
.eh_frame:0000000000006FA1                 db  44h ; D
.eh_frame:0000000000006FA2                 db  0Eh
.eh_frame:0000000000006FA3                 db  30h ; 0
.eh_frame:0000000000006FA4                 db  86h
.eh_frame:0000000000006FA5                 db    6
.eh_frame:0000000000006FA6                 db  41h ; A
.eh_frame:0000000000006FA7                 db  0Eh
.eh_frame:0000000000006FA8                 db  38h ; 8
.eh_frame:0000000000006FA9                 db  83h
.eh_frame:0000000000006FAA                 db    7
.eh_frame:0000000000006FAB                 db  4Dh ; M
.eh_frame:0000000000006FAC                 db  0Eh
.eh_frame:0000000000006FAD                 db  70h ; p
.eh_frame:0000000000006FAE                 db  65h ; e
.eh_frame:0000000000006FAF                 db  0Eh
.eh_frame:0000000000006FB0                 db  78h ; x
.eh_frame:0000000000006FB1                 db  4Dh ; M
.eh_frame:0000000000006FB2                 db  0Eh
.eh_frame:0000000000006FB3                 db  80h
.eh_frame:0000000000006FB4                 db    1
.eh_frame:0000000000006FB5                 db  46h ; F
.eh_frame:0000000000006FB6                 db  0Eh
.eh_frame:0000000000006FB7                 db  88h
.eh_frame:0000000000006FB8                 db    1
.eh_frame:0000000000006FB9                 db  42h ; B
.eh_frame:0000000000006FBA                 db  0Eh
.eh_frame:0000000000006FBB                 db  90h
.eh_frame:0000000000006FBC                 db    1
.eh_frame:0000000000006FBD                 db  5Eh ; ^
.eh_frame:0000000000006FBE                 db  0Eh
.eh_frame:0000000000006FBF                 db  70h ; p
.eh_frame:0000000000006FC0                 db  56h ; V
.eh_frame:0000000000006FC1                 db  0Eh
.eh_frame:0000000000006FC2                 db  78h ; x
.eh_frame:0000000000006FC3                 db  43h ; C
.eh_frame:0000000000006FC4                 db  0Eh
.eh_frame:0000000000006FC5                 db  80h
.eh_frame:0000000000006FC6                 db    1
.eh_frame:0000000000006FC7                 db  43h ; C
.eh_frame:0000000000006FC8                 db  0Eh
.eh_frame:0000000000006FC9                 db  88h
.eh_frame:0000000000006FCA                 db    1
.eh_frame:0000000000006FCB                 db  56h ; V
.eh_frame:0000000000006FCC                 db  0Eh
.eh_frame:0000000000006FCD                 db  90h
.eh_frame:0000000000006FCE                 db    1
.eh_frame:0000000000006FCF                 db  52h ; R
.eh_frame:0000000000006FD0                 db  0Eh
.eh_frame:0000000000006FD1                 db  70h ; p
.eh_frame:0000000000006FD2                 db  5Bh ; [
.eh_frame:0000000000006FD3                 db  0Eh
.eh_frame:0000000000006FD4                 db  38h ; 8
.eh_frame:0000000000006FD5                 db  41h ; A
.eh_frame:0000000000006FD6                 db  0Eh
.eh_frame:0000000000006FD7                 db  30h ; 0
.eh_frame:0000000000006FD8                 db  41h ; A
.eh_frame:0000000000006FD9                 db  0Eh
.eh_frame:0000000000006FDA                 db  28h ; (
.eh_frame:0000000000006FDB                 db  42h ; B
.eh_frame:0000000000006FDC                 db  0Eh
.eh_frame:0000000000006FDD                 db  20h
.eh_frame:0000000000006FDE                 db  42h ; B
.eh_frame:0000000000006FDF                 db  0Eh
.eh_frame:0000000000006FE0                 db  18h
.eh_frame:0000000000006FE1                 db  42h ; B
.eh_frame:0000000000006FE2                 db  0Eh
.eh_frame:0000000000006FE3                 db  10h
.eh_frame:0000000000006FE4                 db  42h ; B
.eh_frame:0000000000006FE5                 db  0Eh
.eh_frame:0000000000006FE6                 db    8
.eh_frame:0000000000006FE7                 db    0
.eh_frame:0000000000006FE8                 db  10h
.eh_frame:0000000000006FE9                 db    0
.eh_frame:0000000000006FEA                 db    0
.eh_frame:0000000000006FEB                 db    0
.eh_frame:0000000000006FEC                 db  64h ; d
.eh_frame:0000000000006FED                 db    4
.eh_frame:0000000000006FEE                 db    0
.eh_frame:0000000000006FEF                 db    0
.eh_frame:0000000000006FF0                 db  10h
.eh_frame:0000000000006FF1                 db 0D1h
.eh_frame:0000000000006FF2                 db 0FFh
.eh_frame:0000000000006FF3                 db 0FFh
.eh_frame:0000000000006FF4                 db  0Ah
.eh_frame:0000000000006FF5                 db    0
.eh_frame:0000000000006FF6                 db    0
.eh_frame:0000000000006FF7                 db    0
.eh_frame:0000000000006FF8                 db    0
.eh_frame:0000000000006FF9                 db    0
.eh_frame:0000000000006FFA                 db    0
.eh_frame:0000000000006FFB                 db    0
.eh_frame:0000000000006FFC                 db  28h ; (
.eh_frame:0000000000006FFD                 db    0
.eh_frame:0000000000006FFE                 db    0
.eh_frame:0000000000006FFF                 db    0
.eh_frame:0000000000007000                 db  78h ; x
.eh_frame:0000000000007001                 db    4
.eh_frame:0000000000007002                 db    0
.eh_frame:0000000000007003                 db    0
.eh_frame:0000000000007004                 db  0Ch
.eh_frame:0000000000007005                 db 0D1h
.eh_frame:0000000000007006                 db 0FFh
.eh_frame:0000000000007007                 db 0FFh
.eh_frame:0000000000007008                 db  93h
.eh_frame:0000000000007009                 db    0
.eh_frame:000000000000700A                 db    0
.eh_frame:000000000000700B                 db    0
.eh_frame:000000000000700C                 db    0
.eh_frame:000000000000700D                 db  48h ; H
.eh_frame:000000000000700E                 db  0Eh
.eh_frame:000000000000700F                 db  10h
.eh_frame:0000000000007010                 db  8Ch
.eh_frame:0000000000007011                 db    2
.eh_frame:0000000000007012                 db  48h ; H
.eh_frame:0000000000007013                 db  0Eh
.eh_frame:0000000000007014                 db  18h
.eh_frame:0000000000007015                 db  86h
.eh_frame:0000000000007016                 db    3
.eh_frame:0000000000007017                 db  41h ; A
.eh_frame:0000000000007018                 db  0Eh
.eh_frame:0000000000007019                 db  20h
.eh_frame:000000000000701A                 db  83h
.eh_frame:000000000000701B                 db    4
.eh_frame:000000000000701C                 db    2
.eh_frame:000000000000701D                 db  74h ; t
.eh_frame:000000000000701E                 db  0Eh
.eh_frame:000000000000701F                 db  18h
.eh_frame:0000000000007020                 db  4Bh ; K
.eh_frame:0000000000007021                 db  0Eh
.eh_frame:0000000000007022                 db  10h
.eh_frame:0000000000007023                 db  42h ; B
.eh_frame:0000000000007024                 db  0Eh
.eh_frame:0000000000007025                 db    8
.eh_frame:0000000000007026                 db    0
.eh_frame:0000000000007027                 db    0
.eh_frame:0000000000007028                 db  10h
.eh_frame:0000000000007029                 db    0
.eh_frame:000000000000702A                 db    0
.eh_frame:000000000000702B                 db    0
.eh_frame:000000000000702C                 db 0A4h
.eh_frame:000000000000702D                 db    4
.eh_frame:000000000000702E                 db    0
.eh_frame:000000000000702F                 db    0
.eh_frame:0000000000007030                 db  80h
.eh_frame:0000000000007031                 db 0D1h
.eh_frame:0000000000007032                 db 0FFh
.eh_frame:0000000000007033                 db 0FFh
.eh_frame:0000000000007034                 db  13h
.eh_frame:0000000000007035                 db    0
.eh_frame:0000000000007036                 db    0
.eh_frame:0000000000007037                 db    0
.eh_frame:0000000000007038                 db    0
.eh_frame:0000000000007039                 db    0
.eh_frame:000000000000703A                 db    0
.eh_frame:000000000000703B                 db    0
.eh_frame:000000000000703C                 db  10h
.eh_frame:000000000000703D                 db    0
.eh_frame:000000000000703E                 db    0
.eh_frame:000000000000703F                 db    0
.eh_frame:0000000000007040                 db 0B8h
.eh_frame:0000000000007041                 db    4
.eh_frame:0000000000007042                 db    0
.eh_frame:0000000000007043                 db    0
.eh_frame:0000000000007044                 db  8Ch
.eh_frame:0000000000007045                 db 0D1h
.eh_frame:0000000000007046                 db 0FFh
.eh_frame:0000000000007047                 db 0FFh
.eh_frame:0000000000007048                 db  0Ch
.eh_frame:0000000000007049                 db    0
.eh_frame:000000000000704A                 db    0
.eh_frame:000000000000704B                 db    0
.eh_frame:000000000000704C                 db    0
.eh_frame:000000000000704D                 db    0
.eh_frame:000000000000704E                 db    0
.eh_frame:000000000000704F                 db    0
.eh_frame:0000000000007050                 db  10h
.eh_frame:0000000000007051                 db    0
.eh_frame:0000000000007052                 db    0
.eh_frame:0000000000007053                 db    0
.eh_frame:0000000000007054                 db 0CCh
.eh_frame:0000000000007055                 db    4
.eh_frame:0000000000007056                 db    0
.eh_frame:0000000000007057                 db    0
.eh_frame:0000000000007058                 db  88h
.eh_frame:0000000000007059                 db 0D1h
.eh_frame:000000000000705A                 db 0FFh
.eh_frame:000000000000705B                 db 0FFh
.eh_frame:000000000000705C                 db  18h
.eh_frame:000000000000705D                 db    0
.eh_frame:000000000000705E                 db    0
.eh_frame:000000000000705F                 db    0
.eh_frame:0000000000007060                 db    0
.eh_frame:0000000000007061                 db    0
.eh_frame:0000000000007062                 db    0
.eh_frame:0000000000007063                 db    0
.eh_frame:0000000000007064                 db  10h
.eh_frame:0000000000007065                 db    0
.eh_frame:0000000000007066                 db    0
.eh_frame:0000000000007067                 db    0
.eh_frame:0000000000007068                 db 0E0h
.eh_frame:0000000000007069                 db    4
.eh_frame:000000000000706A                 db    0
.eh_frame:000000000000706B                 db    0
.eh_frame:000000000000706C                 db  94h
.eh_frame:000000000000706D                 db 0D1h
.eh_frame:000000000000706E                 db 0FFh
.eh_frame:000000000000706F                 db 0FFh
.eh_frame:0000000000007070                 db  14h
.eh_frame:0000000000007071                 db    0
.eh_frame:0000000000007072                 db    0
.eh_frame:0000000000007073                 db    0
.eh_frame:0000000000007074                 db    0
.eh_frame:0000000000007075                 db    0
.eh_frame:0000000000007076                 db    0
.eh_frame:0000000000007077                 db    0
.eh_frame:0000000000007078                 db  18h
.eh_frame:0000000000007079                 db    0
.eh_frame:000000000000707A                 db    0
.eh_frame:000000000000707B                 db    0
.eh_frame:000000000000707C                 db 0F4h
.eh_frame:000000000000707D                 db    4
.eh_frame:000000000000707E                 db    0
.eh_frame:000000000000707F                 db    0
.eh_frame:0000000000007080                 db 0A0h
.eh_frame:0000000000007081                 db 0D1h
.eh_frame:0000000000007082                 db 0FFh
.eh_frame:0000000000007083                 db 0FFh
.eh_frame:0000000000007084                 db  8Eh
.eh_frame:0000000000007085                 db    0
.eh_frame:0000000000007086                 db    0
.eh_frame:0000000000007087                 db    0
.eh_frame:0000000000007088                 db    0
.eh_frame:0000000000007089                 db  44h ; D
.eh_frame:000000000000708A                 db  0Eh
.eh_frame:000000000000708B                 db  50h ; P
.eh_frame:000000000000708C                 db    2
.eh_frame:000000000000708D                 db  7Fh ; 
.eh_frame:000000000000708E                 db  0Ah
.eh_frame:000000000000708F                 db  0Eh
.eh_frame:0000000000007090                 db    8
.eh_frame:0000000000007091                 db  41h ; A
.eh_frame:0000000000007092                 db  0Bh
.eh_frame:0000000000007093                 db    0
.eh_frame:0000000000007094                 db  18h
.eh_frame:0000000000007095                 db    0
.eh_frame:0000000000007096                 db    0
.eh_frame:0000000000007097                 db    0
.eh_frame:0000000000007098                 db  10h
.eh_frame:0000000000007099                 db    5
.eh_frame:000000000000709A                 db    0
.eh_frame:000000000000709B                 db    0
.eh_frame:000000000000709C                 db  14h
.eh_frame:000000000000709D                 db 0D2h
.eh_frame:000000000000709E                 db 0FFh
.eh_frame:000000000000709F                 db 0FFh
.eh_frame:00000000000070A0                 db  8Ah
.eh_frame:00000000000070A1                 db    0
.eh_frame:00000000000070A2                 db    0
.eh_frame:00000000000070A3                 db    0
.eh_frame:00000000000070A4                 db    0
.eh_frame:00000000000070A5                 db  44h ; D
.eh_frame:00000000000070A6                 db  0Eh
.eh_frame:00000000000070A7                 db  50h ; P
.eh_frame:00000000000070A8                 db    2
.eh_frame:00000000000070A9                 db  7Bh ; {
.eh_frame:00000000000070AA                 db  0Ah
.eh_frame:00000000000070AB                 db  0Eh
.eh_frame:00000000000070AC                 db    8
.eh_frame:00000000000070AD                 db  41h ; A
.eh_frame:00000000000070AE                 db  0Bh
.eh_frame:00000000000070AF                 db    0
.eh_frame:00000000000070B0                 db  10h
.eh_frame:00000000000070B1                 db    0
.eh_frame:00000000000070B2                 db    0
.eh_frame:00000000000070B3                 db    0
.eh_frame:00000000000070B4                 db  2Ch ; ,
.eh_frame:00000000000070B5                 db    5
.eh_frame:00000000000070B6                 db    0
.eh_frame:00000000000070B7                 db    0
.eh_frame:00000000000070B8                 db  88h
.eh_frame:00000000000070B9                 db 0D2h
.eh_frame:00000000000070BA                 db 0FFh
.eh_frame:00000000000070BB                 db 0FFh
.eh_frame:00000000000070BC                 db  0Ch
.eh_frame:00000000000070BD                 db    0
.eh_frame:00000000000070BE                 db    0
.eh_frame:00000000000070BF                 db    0
.eh_frame:00000000000070C0                 db    0
.eh_frame:00000000000070C1                 db    0
.eh_frame:00000000000070C2                 db    0
.eh_frame:00000000000070C3                 db    0
.eh_frame:00000000000070C4                 db  10h
.eh_frame:00000000000070C5                 db    0
.eh_frame:00000000000070C6                 db    0
.eh_frame:00000000000070C7                 db    0
.eh_frame:00000000000070C8                 db  40h ; @
.eh_frame:00000000000070C9                 db    5
.eh_frame:00000000000070CA                 db    0
.eh_frame:00000000000070CB                 db    0
.eh_frame:00000000000070CC                 db  84h
.eh_frame:00000000000070CD                 db 0D2h
.eh_frame:00000000000070CE                 db 0FFh
.eh_frame:00000000000070CF                 db 0FFh
.eh_frame:00000000000070D0                 db  0Fh
.eh_frame:00000000000070D1                 db    0
.eh_frame:00000000000070D2                 db    0
.eh_frame:00000000000070D3                 db    0
.eh_frame:00000000000070D4                 db    0
.eh_frame:00000000000070D5                 db    0
.eh_frame:00000000000070D6                 db    0
.eh_frame:00000000000070D7                 db    0
.eh_frame:00000000000070D8                 db  18h
.eh_frame:00000000000070D9                 db    0
.eh_frame:00000000000070DA                 db    0
.eh_frame:00000000000070DB                 db    0
.eh_frame:00000000000070DC                 db  54h ; T
.eh_frame:00000000000070DD                 db    5
.eh_frame:00000000000070DE                 db    0
.eh_frame:00000000000070DF                 db    0
.eh_frame:00000000000070E0                 db  80h
.eh_frame:00000000000070E1                 db 0D2h
.eh_frame:00000000000070E2                 db 0FFh
.eh_frame:00000000000070E3                 db 0FFh
.eh_frame:00000000000070E4                 db  98h
.eh_frame:00000000000070E5                 db    0
.eh_frame:00000000000070E6                 db    0
.eh_frame:00000000000070E7                 db    0
.eh_frame:00000000000070E8                 db    0
.eh_frame:00000000000070E9                 db  44h ; D
.eh_frame:00000000000070EA                 db  0Eh
.eh_frame:00000000000070EB                 db  50h ; P
.eh_frame:00000000000070EC                 db    2
.eh_frame:00000000000070ED                 db  8Eh
.eh_frame:00000000000070EE                 db  0Ah
.eh_frame:00000000000070EF                 db  0Eh
.eh_frame:00000000000070F0                 db    8
.eh_frame:00000000000070F1                 db  41h ; A
.eh_frame:00000000000070F2                 db  0Bh
.eh_frame:00000000000070F3                 db    0
.eh_frame:00000000000070F4                 db  10h
.eh_frame:00000000000070F5                 db    0
.eh_frame:00000000000070F6                 db    0
.eh_frame:00000000000070F7                 db    0
.eh_frame:00000000000070F8                 db  70h ; p
.eh_frame:00000000000070F9                 db    5
.eh_frame:00000000000070FA                 db    0
.eh_frame:00000000000070FB                 db    0
.eh_frame:00000000000070FC                 db    4
.eh_frame:00000000000070FD                 db 0D3h
.eh_frame:00000000000070FE                 db 0FFh
.eh_frame:00000000000070FF                 db 0FFh
.eh_frame:0000000000007100                 db  10h
.eh_frame:0000000000007101                 db    0
.eh_frame:0000000000007102                 db    0
.eh_frame:0000000000007103                 db    0
.eh_frame:0000000000007104                 db    0
.eh_frame:0000000000007105                 db    0
.eh_frame:0000000000007106                 db    0
.eh_frame:0000000000007107                 db    0
.eh_frame:0000000000007108                 db  10h
.eh_frame:0000000000007109                 db    0
.eh_frame:000000000000710A                 db    0
.eh_frame:000000000000710B                 db    0
.eh_frame:000000000000710C                 db  84h
.eh_frame:000000000000710D                 db    5
.eh_frame:000000000000710E                 db    0
.eh_frame:000000000000710F                 db    0
.eh_frame:0000000000007110                 db    0
.eh_frame:0000000000007111                 db 0D3h
.eh_frame:0000000000007112                 db 0FFh
.eh_frame:0000000000007113                 db 0FFh
.eh_frame:0000000000007114                 db  11h
.eh_frame:0000000000007115                 db    0
.eh_frame:0000000000007116                 db    0
.eh_frame:0000000000007117                 db    0
.eh_frame:0000000000007118                 db    0
.eh_frame:0000000000007119                 db    0
.eh_frame:000000000000711A                 db    0
.eh_frame:000000000000711B                 db    0
.eh_frame:000000000000711C                 db  10h
.eh_frame:000000000000711D                 db    0
.eh_frame:000000000000711E                 db    0
.eh_frame:000000000000711F                 db    0
.eh_frame:0000000000007120                 db  98h
.eh_frame:0000000000007121                 db    5
.eh_frame:0000000000007122                 db    0
.eh_frame:0000000000007123                 db    0
.eh_frame:0000000000007124                 db  0Ch
.eh_frame:0000000000007125                 db 0D3h
.eh_frame:0000000000007126                 db 0FFh
.eh_frame:0000000000007127                 db 0FFh
.eh_frame:0000000000007128                 db  0Ah
.eh_frame:0000000000007129                 db    0
.eh_frame:000000000000712A                 db    0
.eh_frame:000000000000712B                 db    0
.eh_frame:000000000000712C                 db    0
.eh_frame:000000000000712D                 db    0
.eh_frame:000000000000712E                 db    0
.eh_frame:000000000000712F                 db    0
.eh_frame:0000000000007130                 db  18h
.eh_frame:0000000000007131                 db    0
.eh_frame:0000000000007132                 db    0
.eh_frame:0000000000007133                 db    0
.eh_frame:0000000000007134                 db 0ACh
.eh_frame:0000000000007135                 db    5
.eh_frame:0000000000007136                 db    0
.eh_frame:0000000000007137                 db    0
.eh_frame:0000000000007138                 db    8
.eh_frame:0000000000007139                 db 0D3h
.eh_frame:000000000000713A                 db 0FFh
.eh_frame:000000000000713B                 db 0FFh
.eh_frame:000000000000713C                 db  8Eh
.eh_frame:000000000000713D                 db    0
.eh_frame:000000000000713E                 db    0
.eh_frame:000000000000713F                 db    0
.eh_frame:0000000000007140                 db    0
.eh_frame:0000000000007141                 db  44h ; D
.eh_frame:0000000000007142                 db  0Eh
.eh_frame:0000000000007143                 db  50h ; P
.eh_frame:0000000000007144                 db    2
.eh_frame:0000000000007145                 db  7Fh ; 
.eh_frame:0000000000007146                 db  0Ah
.eh_frame:0000000000007147                 db  0Eh
.eh_frame:0000000000007148                 db    8
.eh_frame:0000000000007149                 db  41h ; A
.eh_frame:000000000000714A                 db  0Bh
.eh_frame:000000000000714B                 db    0
.eh_frame:000000000000714C                 db  18h
.eh_frame:000000000000714D                 db    0
.eh_frame:000000000000714E                 db    0
.eh_frame:000000000000714F                 db    0
.eh_frame:0000000000007150                 db 0C8h
.eh_frame:0000000000007151                 db    5
.eh_frame:0000000000007152                 db    0
.eh_frame:0000000000007153                 db    0
.eh_frame:0000000000007154                 db  7Ch ; |
.eh_frame:0000000000007155                 db 0D3h
.eh_frame:0000000000007156                 db 0FFh
.eh_frame:0000000000007157                 db 0FFh
.eh_frame:0000000000007158                 db  91h
.eh_frame:0000000000007159                 db    0
.eh_frame:000000000000715A                 db    0
.eh_frame:000000000000715B                 db    0
.eh_frame:000000000000715C                 db    0
.eh_frame:000000000000715D                 db  44h ; D
.eh_frame:000000000000715E                 db  0Eh
.eh_frame:000000000000715F                 db  50h ; P
.eh_frame:0000000000007160                 db    2
.eh_frame:0000000000007161                 db  82h
.eh_frame:0000000000007162                 db  0Ah
.eh_frame:0000000000007163                 db  0Eh
.eh_frame:0000000000007164                 db    8
.eh_frame:0000000000007165                 db  41h ; A
.eh_frame:0000000000007166                 db  0Bh
.eh_frame:0000000000007167                 db    0
.eh_frame:0000000000007168                 db  10h
.eh_frame:0000000000007169                 db    0
.eh_frame:000000000000716A                 db    0
.eh_frame:000000000000716B                 db    0
.eh_frame:000000000000716C                 db 0E4h
.eh_frame:000000000000716D                 db    5
.eh_frame:000000000000716E                 db    0
.eh_frame:000000000000716F                 db    0
.eh_frame:0000000000007170                 db    0
.eh_frame:0000000000007171                 db 0D4h
.eh_frame:0000000000007172                 db 0FFh
.eh_frame:0000000000007173                 db 0FFh
.eh_frame:0000000000007174                 db  0Ch
.eh_frame:0000000000007175                 db    0
.eh_frame:0000000000007176                 db    0
.eh_frame:0000000000007177                 db    0
.eh_frame:0000000000007178                 db    0
.eh_frame:0000000000007179                 db    0
.eh_frame:000000000000717A                 db    0
.eh_frame:000000000000717B                 db    0
.eh_frame:000000000000717C                 db  10h
.eh_frame:000000000000717D                 db    0
.eh_frame:000000000000717E                 db    0
.eh_frame:000000000000717F                 db    0
.eh_frame:0000000000007180                 db 0F8h
.eh_frame:0000000000007181                 db    5
.eh_frame:0000000000007182                 db    0
.eh_frame:0000000000007183                 db    0
.eh_frame:0000000000007184                 db 0FCh
.eh_frame:0000000000007185                 db 0D3h
.eh_frame:0000000000007186                 db 0FFh
.eh_frame:0000000000007187                 db 0FFh
.eh_frame:0000000000007188                 db  17h
.eh_frame:0000000000007189                 db    0
.eh_frame:000000000000718A                 db    0
.eh_frame:000000000000718B                 db    0
.eh_frame:000000000000718C                 db    0
.eh_frame:000000000000718D                 db    0
.eh_frame:000000000000718E                 db    0
.eh_frame:000000000000718F                 db    0
.eh_frame:0000000000007190                 db  10h
.eh_frame:0000000000007191                 db    0
.eh_frame:0000000000007192                 db    0
.eh_frame:0000000000007193                 db    0
.eh_frame:0000000000007194                 db  0Ch
.eh_frame:0000000000007195                 db    6
.eh_frame:0000000000007196                 db    0
.eh_frame:0000000000007197                 db    0
.eh_frame:0000000000007198                 db    8
.eh_frame:0000000000007199                 db 0D4h
.eh_frame:000000000000719A                 db 0FFh
.eh_frame:000000000000719B                 db 0FFh
.eh_frame:000000000000719C                 db  13h
.eh_frame:000000000000719D                 db    0
.eh_frame:000000000000719E                 db    0
.eh_frame:000000000000719F                 db    0
.eh_frame:00000000000071A0                 db    0
.eh_frame:00000000000071A1                 db    0
.eh_frame:00000000000071A2                 db    0
.eh_frame:00000000000071A3                 db    0
.eh_frame:00000000000071A4                 db  10h
.eh_frame:00000000000071A5                 db    0
.eh_frame:00000000000071A6                 db    0
.eh_frame:00000000000071A7                 db    0
.eh_frame:00000000000071A8                 db  20h
.eh_frame:00000000000071A9                 db    6
.eh_frame:00000000000071AA                 db    0
.eh_frame:00000000000071AB                 db    0
.eh_frame:00000000000071AC                 db  14h
.eh_frame:00000000000071AD                 db 0D4h
.eh_frame:00000000000071AE                 db 0FFh
.eh_frame:00000000000071AF                 db 0FFh
.eh_frame:00000000000071B0                 db  0Ch
.eh_frame:00000000000071B1                 db    0
.eh_frame:00000000000071B2                 db    0
.eh_frame:00000000000071B3                 db    0
.eh_frame:00000000000071B4                 db    0
.eh_frame:00000000000071B5                 db    0
.eh_frame:00000000000071B6                 db    0
.eh_frame:00000000000071B7                 db    0
.eh_frame:00000000000071B8                 db  10h
.eh_frame:00000000000071B9                 db    0
.eh_frame:00000000000071BA                 db    0
.eh_frame:00000000000071BB                 db    0
.eh_frame:00000000000071BC                 db  34h ; 4
.eh_frame:00000000000071BD                 db    6
.eh_frame:00000000000071BE                 db    0
.eh_frame:00000000000071BF                 db    0
.eh_frame:00000000000071C0                 db  10h
.eh_frame:00000000000071C1                 db 0D4h
.eh_frame:00000000000071C2                 db 0FFh
.eh_frame:00000000000071C3                 db 0FFh
.eh_frame:00000000000071C4                 db  14h
.eh_frame:00000000000071C5                 db    0
.eh_frame:00000000000071C6                 db    0
.eh_frame:00000000000071C7                 db    0
.eh_frame:00000000000071C8                 db    0
.eh_frame:00000000000071C9                 db    0
.eh_frame:00000000000071CA                 db    0
.eh_frame:00000000000071CB                 db    0
.eh_frame:00000000000071CC                 db  10h
.eh_frame:00000000000071CD                 db    0
.eh_frame:00000000000071CE                 db    0
.eh_frame:00000000000071CF                 db    0
.eh_frame:00000000000071D0                 db  48h ; H
.eh_frame:00000000000071D1                 db    6
.eh_frame:00000000000071D2                 db    0
.eh_frame:00000000000071D3                 db    0
.eh_frame:00000000000071D4                 db  1Ch
.eh_frame:00000000000071D5                 db 0D4h
.eh_frame:00000000000071D6                 db 0FFh
.eh_frame:00000000000071D7                 db 0FFh
.eh_frame:00000000000071D8                 db  13h
.eh_frame:00000000000071D9                 db    0
.eh_frame:00000000000071DA                 db    0
.eh_frame:00000000000071DB                 db    0
.eh_frame:00000000000071DC                 db    0
.eh_frame:00000000000071DD                 db    0
.eh_frame:00000000000071DE                 db    0
.eh_frame:00000000000071DF                 db    0
.eh_frame:00000000000071E0                 db  14h
.eh_frame:00000000000071E1                 db    0
.eh_frame:00000000000071E2                 db    0
.eh_frame:00000000000071E3                 db    0
.eh_frame:00000000000071E4                 db  5Ch ; \
.eh_frame:00000000000071E5                 db    6
.eh_frame:00000000000071E6                 db    0
.eh_frame:00000000000071E7                 db    0
.eh_frame:00000000000071E8                 db  28h ; (
.eh_frame:00000000000071E9                 db 0D4h
.eh_frame:00000000000071EA                 db 0FFh
.eh_frame:00000000000071EB                 db 0FFh
.eh_frame:00000000000071EC                 db  18h
.eh_frame:00000000000071ED                 db    0
.eh_frame:00000000000071EE                 db    0
.eh_frame:00000000000071EF                 db    0
.eh_frame:00000000000071F0                 db    0
.eh_frame:00000000000071F1                 db    0
.eh_frame:00000000000071F2                 db    0
.eh_frame:00000000000071F3                 db    0
.eh_frame:00000000000071F4                 db    0
.eh_frame:00000000000071F5                 db    0
.eh_frame:00000000000071F6                 db    0
.eh_frame:00000000000071F7                 db    0
.eh_frame:00000000000071F8                 db  10h
.eh_frame:00000000000071F9                 db    1
.eh_frame:00000000000071FA                 db    0
.eh_frame:00000000000071FB                 db    0
.eh_frame:00000000000071FC                 db  74h ; t
.eh_frame:00000000000071FD                 db    6
.eh_frame:00000000000071FE                 db    0
.eh_frame:00000000000071FF                 db    0
.eh_frame:0000000000007200                 db  30h ; 0
.eh_frame:0000000000007201                 db 0D4h
.eh_frame:0000000000007202                 db 0FFh
.eh_frame:0000000000007203                 db 0FFh
.eh_frame:0000000000007204                 db  17h
.eh_frame:0000000000007205                 db    4
.eh_frame:0000000000007206                 db    0
.eh_frame:0000000000007207                 db    0
.eh_frame:0000000000007208                 db    0
.eh_frame:0000000000007209                 db  42h ; B
.eh_frame:000000000000720A                 db  0Eh
.eh_frame:000000000000720B                 db  10h
.eh_frame:000000000000720C                 db  8Fh
.eh_frame:000000000000720D                 db    2
.eh_frame:000000000000720E                 db  42h ; B
.eh_frame:000000000000720F                 db  0Eh
.eh_frame:0000000000007210                 db  18h
.eh_frame:0000000000007211                 db  8Eh
.eh_frame:0000000000007212                 db    3
.eh_frame:0000000000007213                 db  42h ; B
.eh_frame:0000000000007214                 db  0Eh
.eh_frame:0000000000007215                 db  20h
.eh_frame:0000000000007216                 db  8Dh
.eh_frame:0000000000007217                 db    4
.eh_frame:0000000000007218                 db  42h ; B
.eh_frame:0000000000007219                 db  0Eh
.eh_frame:000000000000721A                 db  28h ; (
.eh_frame:000000000000721B                 db  8Ch
.eh_frame:000000000000721C                 db    5
.eh_frame:000000000000721D                 db  44h ; D
.eh_frame:000000000000721E                 db  0Eh
.eh_frame:000000000000721F                 db  30h ; 0
.eh_frame:0000000000007220                 db  86h
.eh_frame:0000000000007221                 db    6
.eh_frame:0000000000007222                 db  41h ; A
.eh_frame:0000000000007223                 db  0Eh
.eh_frame:0000000000007224                 db  38h ; 8
.eh_frame:0000000000007225                 db  83h
.eh_frame:0000000000007226                 db    7
.eh_frame:0000000000007227                 db  4Ah ; J
.eh_frame:0000000000007228                 db  0Eh
.eh_frame:0000000000007229                 db  60h ; `
.eh_frame:000000000000722A                 db    2
.eh_frame:000000000000722B                 db 0DDh
.eh_frame:000000000000722C                 db  0Eh
.eh_frame:000000000000722D                 db  68h ; h
.eh_frame:000000000000722E                 db  57h ; W
.eh_frame:000000000000722F                 db  0Eh
.eh_frame:0000000000007230                 db  70h ; p
.eh_frame:0000000000007231                 db  42h ; B
.eh_frame:0000000000007232                 db  0Eh
.eh_frame:0000000000007233                 db  78h ; x
.eh_frame:0000000000007234                 db  42h ; B
.eh_frame:0000000000007235                 db  0Eh
.eh_frame:0000000000007236                 db  80h
.eh_frame:0000000000007237                 db    1
.eh_frame:0000000000007238                 db  42h ; B
.eh_frame:0000000000007239                 db  0Eh
.eh_frame:000000000000723A                 db  88h
.eh_frame:000000000000723B                 db    1
.eh_frame:000000000000723C                 db  42h ; B
.eh_frame:000000000000723D                 db  0Eh
.eh_frame:000000000000723E                 db  90h
.eh_frame:000000000000723F                 db    1
.eh_frame:0000000000007240                 db  53h ; S
.eh_frame:0000000000007241                 db  0Eh
.eh_frame:0000000000007242                 db  60h ; `
.eh_frame:0000000000007243                 db  44h ; D
.eh_frame:0000000000007244                 db  0Ah
.eh_frame:0000000000007245                 db  0Eh
.eh_frame:0000000000007246                 db  38h ; 8
.eh_frame:0000000000007247                 db  41h ; A
.eh_frame:0000000000007248                 db  0Eh
.eh_frame:0000000000007249                 db  30h ; 0
.eh_frame:000000000000724A                 db  41h ; A
.eh_frame:000000000000724B                 db  0Eh
.eh_frame:000000000000724C                 db  28h ; (
.eh_frame:000000000000724D                 db  42h ; B
.eh_frame:000000000000724E                 db  0Eh
.eh_frame:000000000000724F                 db  20h
.eh_frame:0000000000007250                 db  42h ; B
.eh_frame:0000000000007251                 db  0Eh
.eh_frame:0000000000007252                 db  18h
.eh_frame:0000000000007253                 db  42h ; B
.eh_frame:0000000000007254                 db  0Eh
.eh_frame:0000000000007255                 db  10h
.eh_frame:0000000000007256                 db  42h ; B
.eh_frame:0000000000007257                 db  0Eh
.eh_frame:0000000000007258                 db    8
.eh_frame:0000000000007259                 db  44h ; D
.eh_frame:000000000000725A                 db  0Bh
.eh_frame:000000000000725B                 db    2
.eh_frame:000000000000725C                 db  78h ; x
.eh_frame:000000000000725D                 db  0Ah
.eh_frame:000000000000725E                 db  0Eh
.eh_frame:000000000000725F                 db  68h ; h
.eh_frame:0000000000007260                 db  48h ; H
.eh_frame:0000000000007261                 db  0Bh
.eh_frame:0000000000007262                 db  5Ah ; Z
.eh_frame:0000000000007263                 db  0Ah
.eh_frame:0000000000007264                 db  0Eh
.eh_frame:0000000000007265                 db  38h ; 8
.eh_frame:0000000000007266                 db  47h ; G
.eh_frame:0000000000007267                 db  0Eh
.eh_frame:0000000000007268                 db  30h ; 0
.eh_frame:0000000000007269                 db  41h ; A
.eh_frame:000000000000726A                 db  0Eh
.eh_frame:000000000000726B                 db  28h ; (
.eh_frame:000000000000726C                 db  42h ; B
.eh_frame:000000000000726D                 db  0Eh
.eh_frame:000000000000726E                 db  20h
.eh_frame:000000000000726F                 db  42h ; B
.eh_frame:0000000000007270                 db  0Eh
.eh_frame:0000000000007271                 db  18h
.eh_frame:0000000000007272                 db  42h ; B
.eh_frame:0000000000007273                 db  0Eh
.eh_frame:0000000000007274                 db  10h
.eh_frame:0000000000007275                 db  42h ; B
.eh_frame:0000000000007276                 db  0Eh
.eh_frame:0000000000007277                 db    8
.eh_frame:0000000000007278                 db  56h ; V
.eh_frame:0000000000007279                 db  0Bh
.eh_frame:000000000000727A                 db  5Eh ; ^
.eh_frame:000000000000727B                 db  0Ah
.eh_frame:000000000000727C                 db  0Eh
.eh_frame:000000000000727D                 db  38h ; 8
.eh_frame:000000000000727E                 db  52h ; R
.eh_frame:000000000000727F                 db  0Eh
.eh_frame:0000000000007280                 db  30h ; 0
.eh_frame:0000000000007281                 db  41h ; A
.eh_frame:0000000000007282                 db  0Eh
.eh_frame:0000000000007283                 db  28h ; (
.eh_frame:0000000000007284                 db  42h ; B
.eh_frame:0000000000007285                 db  0Eh
.eh_frame:0000000000007286                 db  20h
.eh_frame:0000000000007287                 db  42h ; B
.eh_frame:0000000000007288                 db  0Eh
.eh_frame:0000000000007289                 db  18h
.eh_frame:000000000000728A                 db  42h ; B
.eh_frame:000000000000728B                 db  0Eh
.eh_frame:000000000000728C                 db  10h
.eh_frame:000000000000728D                 db  42h ; B
.eh_frame:000000000000728E                 db  0Eh
.eh_frame:000000000000728F                 db    8
.eh_frame:0000000000007290                 db  4Fh ; O
.eh_frame:0000000000007291                 db  0Bh
.eh_frame:0000000000007292                 db  62h ; b
.eh_frame:0000000000007293                 db  0Ah
.eh_frame:0000000000007294                 db  0Eh
.eh_frame:0000000000007295                 db  38h ; 8
.eh_frame:0000000000007296                 db  50h ; P
.eh_frame:0000000000007297                 db  0Eh
.eh_frame:0000000000007298                 db  30h ; 0
.eh_frame:0000000000007299                 db  41h ; A
.eh_frame:000000000000729A                 db  0Eh
.eh_frame:000000000000729B                 db  28h ; (
.eh_frame:000000000000729C                 db  42h ; B
.eh_frame:000000000000729D                 db  0Eh
.eh_frame:000000000000729E                 db  20h
.eh_frame:000000000000729F                 db  42h ; B
.eh_frame:00000000000072A0                 db  0Eh
.eh_frame:00000000000072A1                 db  18h
.eh_frame:00000000000072A2                 db  42h ; B
.eh_frame:00000000000072A3                 db  0Eh
.eh_frame:00000000000072A4                 db  10h
.eh_frame:00000000000072A5                 db  42h ; B
.eh_frame:00000000000072A6                 db  0Eh
.eh_frame:00000000000072A7                 db    8
.eh_frame:00000000000072A8                 db  55h ; U
.eh_frame:00000000000072A9                 db  0Bh
.eh_frame:00000000000072AA                 db  66h ; f
.eh_frame:00000000000072AB                 db  0Eh
.eh_frame:00000000000072AC                 db  68h ; h
.eh_frame:00000000000072AD                 db  42h ; B
.eh_frame:00000000000072AE                 db  0Eh
.eh_frame:00000000000072AF                 db  70h ; p
.eh_frame:00000000000072B0                 db  5Ch ; \
.eh_frame:00000000000072B1                 db  0Eh
.eh_frame:00000000000072B2                 db  68h ; h
.eh_frame:00000000000072B3                 db  41h ; A
.eh_frame:00000000000072B4                 db  0Eh
.eh_frame:00000000000072B5                 db  60h ; `
.eh_frame:00000000000072B6                 db  44h ; D
.eh_frame:00000000000072B7                 db  0Ah
.eh_frame:00000000000072B8                 db  0Eh
.eh_frame:00000000000072B9                 db  38h ; 8
.eh_frame:00000000000072BA                 db  41h ; A
.eh_frame:00000000000072BB                 db  0Eh
.eh_frame:00000000000072BC                 db  30h ; 0
.eh_frame:00000000000072BD                 db  41h ; A
.eh_frame:00000000000072BE                 db  0Eh
.eh_frame:00000000000072BF                 db  28h ; (
.eh_frame:00000000000072C0                 db  42h ; B
.eh_frame:00000000000072C1                 db  0Eh
.eh_frame:00000000000072C2                 db  20h
.eh_frame:00000000000072C3                 db  42h ; B
.eh_frame:00000000000072C4                 db  0Eh
.eh_frame:00000000000072C5                 db  18h
.eh_frame:00000000000072C6                 db  42h ; B
.eh_frame:00000000000072C7                 db  0Eh
.eh_frame:00000000000072C8                 db  10h
.eh_frame:00000000000072C9                 db  42h ; B
.eh_frame:00000000000072CA                 db  0Eh
.eh_frame:00000000000072CB                 db    8
.eh_frame:00000000000072CC                 db  45h ; E
.eh_frame:00000000000072CD                 db  0Bh
.eh_frame:00000000000072CE                 db  68h ; h
.eh_frame:00000000000072CF                 db  0Ah
.eh_frame:00000000000072D0                 db  0Eh
.eh_frame:00000000000072D1                 db  68h ; h
.eh_frame:00000000000072D2                 db  48h ; H
.eh_frame:00000000000072D3                 db  0Bh
.eh_frame:00000000000072D4                 db  72h ; r
.eh_frame:00000000000072D5                 db  0Eh
.eh_frame:00000000000072D6                 db  68h ; h
.eh_frame:00000000000072D7                 db  45h ; E
.eh_frame:00000000000072D8                 db  0Eh
.eh_frame:00000000000072D9                 db  70h ; p
.eh_frame:00000000000072DA                 db  42h ; B
.eh_frame:00000000000072DB                 db  0Eh
.eh_frame:00000000000072DC                 db  78h ; x
.eh_frame:00000000000072DD                 db  42h ; B
.eh_frame:00000000000072DE                 db  0Eh
.eh_frame:00000000000072DF                 db  80h
.eh_frame:00000000000072E0                 db    1
.eh_frame:00000000000072E1                 db  5Eh ; ^
.eh_frame:00000000000072E2                 db  0Eh
.eh_frame:00000000000072E3                 db  60h ; `
.eh_frame:00000000000072E4                 db  44h ; D
.eh_frame:00000000000072E5                 db  0Ah
.eh_frame:00000000000072E6                 db  0Eh
.eh_frame:00000000000072E7                 db  38h ; 8
.eh_frame:00000000000072E8                 db  41h ; A
.eh_frame:00000000000072E9                 db  0Eh
.eh_frame:00000000000072EA                 db  30h ; 0
.eh_frame:00000000000072EB                 db  41h ; A
.eh_frame:00000000000072EC                 db  0Eh
.eh_frame:00000000000072ED                 db  28h ; (
.eh_frame:00000000000072EE                 db  42h ; B
.eh_frame:00000000000072EF                 db  0Eh
.eh_frame:00000000000072F0                 db  20h
.eh_frame:00000000000072F1                 db  42h ; B
.eh_frame:00000000000072F2                 db  0Eh
.eh_frame:00000000000072F3                 db  18h
.eh_frame:00000000000072F4                 db  42h ; B
.eh_frame:00000000000072F5                 db  0Eh
.eh_frame:00000000000072F6                 db  10h
.eh_frame:00000000000072F7                 db  42h ; B
.eh_frame:00000000000072F8                 db  0Eh
.eh_frame:00000000000072F9                 db    8
.eh_frame:00000000000072FA                 db  41h ; A
.eh_frame:00000000000072FB                 db  0Bh
.eh_frame:00000000000072FC                 db  79h ; y
.eh_frame:00000000000072FD                 db  0Ah
.eh_frame:00000000000072FE                 db  0Eh
.eh_frame:00000000000072FF                 db  68h ; h
.eh_frame:0000000000007300                 db  42h ; B
.eh_frame:0000000000007301                 db  0Eh
.eh_frame:0000000000007302                 db  70h ; p
.eh_frame:0000000000007303                 db  42h ; B
.eh_frame:0000000000007304                 db  0Eh
.eh_frame:0000000000007305                 db  78h ; x
.eh_frame:0000000000007306                 db  42h ; B
.eh_frame:0000000000007307                 db  0Eh
.eh_frame:0000000000007308                 db  80h
.eh_frame:0000000000007309                 db    1
.eh_frame:000000000000730A                 db  51h ; Q
.eh_frame:000000000000730B                 db  0Bh
.eh_frame:000000000000730C                 db  10h
.eh_frame:000000000000730D                 db    0
.eh_frame:000000000000730E                 db    0
.eh_frame:000000000000730F                 db    0
.eh_frame:0000000000007310                 db  88h
.eh_frame:0000000000007311                 db    7
.eh_frame:0000000000007312                 db    0
.eh_frame:0000000000007313                 db    0
.eh_frame:0000000000007314                 db  3Ch ; <
.eh_frame:0000000000007315                 db 0D7h
.eh_frame:0000000000007316                 db 0FFh
.eh_frame:0000000000007317                 db 0FFh
.eh_frame:0000000000007318                 db  20h
.eh_frame:0000000000007319                 db    0
.eh_frame:000000000000731A                 db    0
.eh_frame:000000000000731B                 db    0
.eh_frame:000000000000731C                 db    0
.eh_frame:000000000000731D                 db    0
.eh_frame:000000000000731E                 db    0
.eh_frame:000000000000731F                 db    0
.eh_frame:0000000000007320                 db  18h
.eh_frame:0000000000007321                 db    0
.eh_frame:0000000000007322                 db    0
.eh_frame:0000000000007323                 db    0
.eh_frame:0000000000007324                 db  9Ch
.eh_frame:0000000000007325 unk_7325        db    7                 ; DATA XREF: .rodata:format↑o
.eh_frame:0000000000007326                 db    0
.eh_frame:0000000000007327                 db    0
.eh_frame:0000000000007328                 db  48h ; H
.eh_frame:0000000000007329                 db 0D7h
.eh_frame:000000000000732A                 db 0FFh
.eh_frame:000000000000732B                 db 0FFh
.eh_frame:000000000000732C                 db  78h ; x
.eh_frame:000000000000732D                 db    0
.eh_frame:000000000000732E                 db    0
.eh_frame:000000000000732F                 db    0
.eh_frame:0000000000007330                 db    0
.eh_frame:0000000000007331                 db  44h ; D
.eh_frame:0000000000007332                 db  0Eh
.eh_frame:0000000000007333                 db  70h ; p
.eh_frame:0000000000007334                 db    2
.eh_frame:0000000000007335                 db  60h ; `
.eh_frame:0000000000007336                 db  0Ah
.eh_frame:0000000000007337                 db  0Eh
.eh_frame:0000000000007338                 db    8
.eh_frame:0000000000007339                 db  41h ; A
.eh_frame:000000000000733A                 db  0Bh
.eh_frame:000000000000733B                 db    0
.eh_frame:000000000000733C                 db  28h ; (
.eh_frame:000000000000733D                 db    0
.eh_frame:000000000000733E                 db    0
.eh_frame:000000000000733F                 db    0
.eh_frame:0000000000007340                 db 0B8h
.eh_frame:0000000000007341                 db    7
.eh_frame:0000000000007342                 db    0
.eh_frame:0000000000007343                 db    0
.eh_frame:0000000000007344                 db 0ACh
.eh_frame:0000000000007345                 db 0D7h
.eh_frame:0000000000007346                 db 0FFh
.eh_frame:0000000000007347                 db 0FFh
.eh_frame:0000000000007348                 db 0D5h
.eh_frame:0000000000007349                 db    0
.eh_frame:000000000000734A                 db    0
.eh_frame:000000000000734B                 db    0
.eh_frame:000000000000734C                 db    0
.eh_frame:000000000000734D                 db  41h ; A
.eh_frame:000000000000734E                 db  0Eh
.eh_frame:000000000000734F                 db  10h
.eh_frame:0000000000007350                 db  86h
.eh_frame:0000000000007351                 db    2
.eh_frame:0000000000007352                 db  41h ; A
.eh_frame:0000000000007353                 db  0Eh
.eh_frame:0000000000007354                 db  18h
.eh_frame:0000000000007355                 db  83h
.eh_frame:0000000000007356                 db    3
.eh_frame:0000000000007357                 db  50h ; P
.eh_frame:0000000000007358                 db  0Eh
.eh_frame:0000000000007359                 db 0D0h
.eh_frame:000000000000735A                 db    1
.eh_frame:000000000000735B                 db    2
.eh_frame:000000000000735C                 db 0ABh
.eh_frame:000000000000735D                 db  0Ah
.eh_frame:000000000000735E                 db  0Eh
.eh_frame:000000000000735F                 db  18h
.eh_frame:0000000000007360                 db  41h ; A
.eh_frame:0000000000007361                 db  0Eh
.eh_frame:0000000000007362                 db  10h
.eh_frame:0000000000007363                 db  41h ; A
.eh_frame:0000000000007364                 db  0Eh
.eh_frame:0000000000007365                 db    8
.eh_frame:0000000000007366                 db  41h ; A
.eh_frame:0000000000007367                 db  0Bh
.eh_frame:0000000000007368                 db  1Ch
.eh_frame:0000000000007369                 db    0
.eh_frame:000000000000736A                 db    0
.eh_frame:000000000000736B                 db    0
.eh_frame:000000000000736C                 db 0E4h
.eh_frame:000000000000736D                 db    7
.eh_frame:000000000000736E                 db    0
.eh_frame:000000000000736F                 db    0
.eh_frame:0000000000007370                 db  60h ; `
.eh_frame:0000000000007371                 db 0D8h
.eh_frame:0000000000007372                 db 0FFh
.eh_frame:0000000000007373                 db 0FFh
.eh_frame:0000000000007374                 db  80h
.eh_frame:0000000000007375                 db    0
.eh_frame:0000000000007376                 db    0
.eh_frame:0000000000007377                 db    0
.eh_frame:0000000000007378                 db    0
.eh_frame:0000000000007379                 db  41h ; A
.eh_frame:000000000000737A                 db  0Eh
.eh_frame:000000000000737B                 db  10h
.eh_frame:000000000000737C                 db  83h
.eh_frame:000000000000737D                 db    2
.eh_frame:000000000000737E                 db    2
.eh_frame:000000000000737F                 db  7Ah ; z
.eh_frame:0000000000007380                 db  0Eh
.eh_frame:0000000000007381                 db    8
.eh_frame:0000000000007382                 db    0
.eh_frame:0000000000007383                 db    0
.eh_frame:0000000000007384                 db    0
.eh_frame:0000000000007385                 db    0
.eh_frame:0000000000007386                 db    0
.eh_frame:0000000000007387                 db    0
.eh_frame:0000000000007388                 db  18h
.eh_frame:0000000000007389                 db    0
.eh_frame:000000000000738A                 db    0
.eh_frame:000000000000738B                 db    0
.eh_frame:000000000000738C                 db    4
.eh_frame:000000000000738D                 db    8
.eh_frame:000000000000738E                 db    0
.eh_frame:000000000000738F                 db    0
.eh_frame:0000000000007390                 db 0C0h
.eh_frame:0000000000007391                 db 0D8h
.eh_frame:0000000000007392                 db 0FFh
.eh_frame:0000000000007393                 db 0FFh
.eh_frame:0000000000007394                 db  1Ah
.eh_frame:0000000000007395                 db    0
.eh_frame:0000000000007396                 db    0
.eh_frame:0000000000007397                 db    0
.eh_frame:0000000000007398                 db    0
.eh_frame:0000000000007399                 db  41h ; A
.eh_frame:000000000000739A                 db  0Eh
.eh_frame:000000000000739B                 db  10h
.eh_frame:000000000000739C                 db  83h
.eh_frame:000000000000739D                 db    2
.eh_frame:000000000000739E                 db  53h ; S
.eh_frame:000000000000739F                 db  0Ah
.eh_frame:00000000000073A0                 db  0Eh
.eh_frame:00000000000073A1                 db    8
.eh_frame:00000000000073A2                 db  41h ; A
.eh_frame:00000000000073A3                 db  0Bh
.eh_frame:00000000000073A4                 db  10h
.eh_frame:00000000000073A5                 db    0
.eh_frame:00000000000073A6                 db    0
.eh_frame:00000000000073A7                 db    0
.eh_frame:00000000000073A8                 db  20h
.eh_frame:00000000000073A9                 db    8
.eh_frame:00000000000073AA                 db    0
.eh_frame:00000000000073AB                 db    0
.eh_frame:00000000000073AC                 db 0C4h
.eh_frame:00000000000073AD                 db 0D8h
.eh_frame:00000000000073AE                 db 0FFh
.eh_frame:00000000000073AF                 db 0FFh
.eh_frame:00000000000073B0                 db  24h ; $
.eh_frame:00000000000073B1                 db    0
.eh_frame:00000000000073B2                 db    0
.eh_frame:00000000000073B3                 db    0
.eh_frame:00000000000073B4                 db    0
.eh_frame:00000000000073B5                 db  5Fh ; _
.eh_frame:00000000000073B6                 db  0Eh
.eh_frame:00000000000073B7                 db  10h
.eh_frame:00000000000073B8                 db  10h
.eh_frame:00000000000073B9                 db    0
.eh_frame:00000000000073BA                 db    0
.eh_frame:00000000000073BB                 db    0
.eh_frame:00000000000073BC                 db  34h ; 4
.eh_frame:00000000000073BD                 db    8
.eh_frame:00000000000073BE                 db    0
.eh_frame:00000000000073BF                 db    0
.eh_frame:00000000000073C0                 db 0E0h
.eh_frame:00000000000073C1                 db 0D8h
.eh_frame:00000000000073C2                 db 0FFh
.eh_frame:00000000000073C3                 db 0FFh
.eh_frame:00000000000073C4                 db    2
.eh_frame:00000000000073C5                 db    0
.eh_frame:00000000000073C6                 db    0
.eh_frame:00000000000073C7                 db    0
.eh_frame:00000000000073C8                 db    0
.eh_frame:00000000000073C9                 db    0
.eh_frame:00000000000073CA                 db    0
.eh_frame:00000000000073CB                 db    0
.eh_frame:00000000000073CC                 db  20h
.eh_frame:00000000000073CD                 db    0
.eh_frame:00000000000073CE                 db    0
.eh_frame:00000000000073CF                 db    0
.eh_frame:00000000000073D0                 db  48h ; H
.eh_frame:00000000000073D1                 db    8
.eh_frame:00000000000073D2                 db    0
.eh_frame:00000000000073D3                 db    0
.eh_frame:00000000000073D4                 db 0DCh
.eh_frame:00000000000073D5                 db 0D8h
.eh_frame:00000000000073D6                 db 0FFh
.eh_frame:00000000000073D7                 db 0FFh
.eh_frame:00000000000073D8                 db  36h ; 6
.eh_frame:00000000000073D9                 db    0
.eh_frame:00000000000073DA                 db    0
.eh_frame:00000000000073DB                 db    0
.eh_frame:00000000000073DC                 db    0
.eh_frame:00000000000073DD                 db  44h ; D
.eh_frame:00000000000073DE                 db  0Eh
.eh_frame:00000000000073DF                 db  10h
.eh_frame:00000000000073E0                 db  83h
.eh_frame:00000000000073E1                 db    2
.eh_frame:00000000000073E2                 db  5Dh ; ]
.eh_frame:00000000000073E3                 db  0Ah
.eh_frame:00000000000073E4                 db  0Eh
.eh_frame:00000000000073E5                 db    8
.eh_frame:00000000000073E6                 db  47h ; G
.eh_frame:00000000000073E7                 db  0Bh
.eh_frame:00000000000073E8                 db  48h ; H
.eh_frame:00000000000073E9                 db  0Ah
.eh_frame:00000000000073EA                 db  0Eh
.eh_frame:00000000000073EB                 db    8
.eh_frame:00000000000073EC                 db  41h ; A
.eh_frame:00000000000073ED                 db  0Bh
.eh_frame:00000000000073EE                 db    0
.eh_frame:00000000000073EF                 db    0
.eh_frame:00000000000073F0                 db  10h
.eh_frame:00000000000073F1                 db    0
.eh_frame:00000000000073F2                 db    0
.eh_frame:00000000000073F3                 db    0
.eh_frame:00000000000073F4                 db  6Ch ; l
.eh_frame:00000000000073F5                 db    8
.eh_frame:00000000000073F6                 db    0
.eh_frame:00000000000073F7                 db    0
.eh_frame:00000000000073F8                 db 0F8h
.eh_frame:00000000000073F9                 db 0D8h
.eh_frame:00000000000073FA                 db 0FFh
.eh_frame:00000000000073FB                 db 0FFh
.eh_frame:00000000000073FC                 db  24h ; $
.eh_frame:00000000000073FD                 db    0
.eh_frame:00000000000073FE                 db    0
.eh_frame:00000000000073FF                 db    0
.eh_frame:0000000000007400                 db    0
.eh_frame:0000000000007401                 db  5Fh ; _
.eh_frame:0000000000007402                 db  0Eh
.eh_frame:0000000000007403                 db  10h
.eh_frame:0000000000007404                 db  14h
.eh_frame:0000000000007405                 db    0
.eh_frame:0000000000007406                 db    0
.eh_frame:0000000000007407                 db    0
.eh_frame:0000000000007408                 db  80h
.eh_frame:0000000000007409                 db    8
.eh_frame:000000000000740A                 db    0
.eh_frame:000000000000740B                 db    0
.eh_frame:000000000000740C                 db  14h
.eh_frame:000000000000740D                 db 0D9h
.eh_frame:000000000000740E                 db 0FFh
.eh_frame:000000000000740F                 db 0FFh
.eh_frame:0000000000007410                 db  82h
.eh_frame:0000000000007411                 db    0
.eh_frame:0000000000007412                 db    0
.eh_frame:0000000000007413                 db    0
.eh_frame:0000000000007414                 db    0
.eh_frame:0000000000007415                 db    2
.eh_frame:0000000000007416                 db  5Fh ; _
.eh_frame:0000000000007417                 db  0Eh
.eh_frame:0000000000007418                 db  10h
.eh_frame:0000000000007419                 db  49h ; I
.eh_frame:000000000000741A                 db  0Eh
.eh_frame:000000000000741B                 db    8
.eh_frame:000000000000741C                 db  14h
.eh_frame:000000000000741D                 db    0
.eh_frame:000000000000741E                 db    0
.eh_frame:000000000000741F                 db    0
.eh_frame:0000000000007420                 db  98h
.eh_frame:0000000000007421                 db    8
.eh_frame:0000000000007422                 db    0
.eh_frame:0000000000007423                 db    0
.eh_frame:0000000000007424                 db  8Ch
.eh_frame:0000000000007425                 db 0D9h
.eh_frame:0000000000007426                 db 0FFh
.eh_frame:0000000000007427                 db 0FFh
.eh_frame:0000000000007428                 db  4Ah ; J
.eh_frame:0000000000007429                 db    0
.eh_frame:000000000000742A                 db    0
.eh_frame:000000000000742B                 db    0
.eh_frame:000000000000742C                 db    0
.eh_frame:000000000000742D                 db    2
.eh_frame:000000000000742E                 db  45h ; E
.eh_frame:000000000000742F                 db  0Eh
.eh_frame:0000000000007430                 db  10h
.eh_frame:0000000000007431                 db    0
.eh_frame:0000000000007432                 db    0
.eh_frame:0000000000007433                 db    0
.eh_frame:0000000000007434                 db  18h
.eh_frame:0000000000007435                 db    0
.eh_frame:0000000000007436                 db    0
.eh_frame:0000000000007437                 db    0
.eh_frame:0000000000007438                 db 0B0h
.eh_frame:0000000000007439                 db    8
.eh_frame:000000000000743A                 db    0
.eh_frame:000000000000743B                 db    0
.eh_frame:000000000000743C                 db 0C4h
.eh_frame:000000000000743D                 db 0D9h
.eh_frame:000000000000743E                 db 0FFh
.eh_frame:000000000000743F                 db 0FFh
.eh_frame:0000000000007440                 db  17h
.eh_frame:0000000000007441                 db    0
.eh_frame:0000000000007442                 db    0
.eh_frame:0000000000007443                 db    0
.eh_frame:0000000000007444                 db    0
.eh_frame:0000000000007445                 db  41h ; A
.eh_frame:0000000000007446                 db  0Eh
.eh_frame:0000000000007447                 db  10h
.eh_frame:0000000000007448                 db  83h
.eh_frame:0000000000007449                 db    2
.eh_frame:000000000000744A                 db  51h ; Q
.eh_frame:000000000000744B                 db  0Eh
.eh_frame:000000000000744C                 db    8
.eh_frame:000000000000744D                 db    0
.eh_frame:000000000000744E                 db    0
.eh_frame:000000000000744F                 db    0
.eh_frame:0000000000007450                 db  18h
.eh_frame:0000000000007451                 db    0
.eh_frame:0000000000007452                 db    0
.eh_frame:0000000000007453                 db    0
.eh_frame:0000000000007454                 db 0CCh
.eh_frame:0000000000007455                 db    8
.eh_frame:0000000000007456                 db    0
.eh_frame:0000000000007457                 db    0
.eh_frame:0000000000007458                 db 0C8h
.eh_frame:0000000000007459                 db 0D9h
.eh_frame:000000000000745A                 db 0FFh
.eh_frame:000000000000745B                 db 0FFh
.eh_frame:000000000000745C                 db  2Eh ; .
.eh_frame:000000000000745D                 db    0
.eh_frame:000000000000745E                 db    0
.eh_frame:000000000000745F                 db    0
.eh_frame:0000000000007460                 db    0
.eh_frame:0000000000007461                 db  47h ; G
.eh_frame:0000000000007462                 db  0Eh
.eh_frame:0000000000007463                 db  10h
.eh_frame:0000000000007464                 db  61h ; a
.eh_frame:0000000000007465                 db  0Ah
.eh_frame:0000000000007466                 db  0Eh
.eh_frame:0000000000007467                 db    8
.eh_frame:0000000000007468                 db  41h ; A
.eh_frame:0000000000007469                 db  0Bh
.eh_frame:000000000000746A                 db    0
.eh_frame:000000000000746B                 db    0
.eh_frame:000000000000746C                 db  24h ; $
.eh_frame:000000000000746D                 db    0
.eh_frame:000000000000746E                 db    0
.eh_frame:000000000000746F                 db    0
.eh_frame:0000000000007470                 db 0E8h
.eh_frame:0000000000007471                 db    8
.eh_frame:0000000000007472                 db    0
.eh_frame:0000000000007473                 db    0
.eh_frame:0000000000007474                 db 0DCh
.eh_frame:0000000000007475                 db 0D9h
.eh_frame:0000000000007476                 db 0FFh
.eh_frame:0000000000007477                 db 0FFh
.eh_frame:0000000000007478                 db  28h ; (
.eh_frame:0000000000007479                 db    0
.eh_frame:000000000000747A                 db    0
.eh_frame:000000000000747B                 db    0
.eh_frame:000000000000747C                 db    0
.eh_frame:000000000000747D                 db  41h ; A
.eh_frame:000000000000747E                 db  0Eh
.eh_frame:000000000000747F                 db  10h
.eh_frame:0000000000007480                 db  86h
.eh_frame:0000000000007481                 db    2
.eh_frame:0000000000007482                 db  41h ; A
.eh_frame:0000000000007483                 db  0Eh
.eh_frame:0000000000007484                 db  18h
.eh_frame:0000000000007485                 db  83h
.eh_frame:0000000000007486                 db    3
.eh_frame:0000000000007487                 db  4Dh ; M
.eh_frame:0000000000007488                 db  0Eh
.eh_frame:0000000000007489                 db  20h
.eh_frame:000000000000748A                 db  49h ; I
.eh_frame:000000000000748B                 db  0Eh
.eh_frame:000000000000748C                 db  18h
.eh_frame:000000000000748D                 db  47h ; G
.eh_frame:000000000000748E                 db  0Eh
.eh_frame:000000000000748F                 db  10h
.eh_frame:0000000000007490                 db  41h ; A
.eh_frame:0000000000007491                 db  0Eh
.eh_frame:0000000000007492                 db    8
.eh_frame:0000000000007493                 db    0
.eh_frame:0000000000007494                 db  18h
.eh_frame:0000000000007495                 db    0
.eh_frame:0000000000007496                 db    0
.eh_frame:0000000000007497                 db    0
.eh_frame:0000000000007498                 db  10h
.eh_frame:0000000000007499                 db    9
.eh_frame:000000000000749A                 db    0
.eh_frame:000000000000749B                 db    0
.eh_frame:000000000000749C                 db 0E4h
.eh_frame:000000000000749D                 db 0D9h
.eh_frame:000000000000749E                 db 0FFh
.eh_frame:000000000000749F                 db 0FFh
.eh_frame:00000000000074A0                 db  13h
.eh_frame:00000000000074A1                 db    0
.eh_frame:00000000000074A2                 db    0
.eh_frame:00000000000074A3                 db    0
.eh_frame:00000000000074A4                 db    0
.eh_frame:00000000000074A5                 db  41h ; A
.eh_frame:00000000000074A6                 db  0Eh
.eh_frame:00000000000074A7                 db  10h
.eh_frame:00000000000074A8                 db  83h
.eh_frame:00000000000074A9                 db    2
.eh_frame:00000000000074AA                 db  50h ; P
.eh_frame:00000000000074AB                 db  0Eh
.eh_frame:00000000000074AC                 db    8
.eh_frame:00000000000074AD                 db    0
.eh_frame:00000000000074AE                 db    0
.eh_frame:00000000000074AF                 db    0
.eh_frame:00000000000074B0                 db  14h
.eh_frame:00000000000074B1                 db    0
.eh_frame:00000000000074B2                 db    0
.eh_frame:00000000000074B3                 db    0
.eh_frame:00000000000074B4                 db  2Ch ; ,
.eh_frame:00000000000074B5                 db    9
.eh_frame:00000000000074B6                 db    0
.eh_frame:00000000000074B7                 db    0
.eh_frame:00000000000074B8                 db 0E8h
.eh_frame:00000000000074B9                 db 0D9h
.eh_frame:00000000000074BA                 db 0FFh
.eh_frame:00000000000074BB                 db 0FFh
.eh_frame:00000000000074BC                 db  35h ; 5
.eh_frame:00000000000074BD                 db    0
.eh_frame:00000000000074BE                 db    0
.eh_frame:00000000000074BF                 db    0
.eh_frame:00000000000074C0                 db    0
.eh_frame:00000000000074C1                 db  4Bh ; K
.eh_frame:00000000000074C2                 db  0Eh
.eh_frame:00000000000074C3                 db  10h
.eh_frame:00000000000074C4                 db    0
.eh_frame:00000000000074C5                 db    0
.eh_frame:00000000000074C6                 db    0
.eh_frame:00000000000074C7                 db    0
.eh_frame:00000000000074C8                 db  4Ch ; L
.eh_frame:00000000000074C9                 db    0
.eh_frame:00000000000074CA                 db    0
.eh_frame:00000000000074CB                 db    0
.eh_frame:00000000000074CC                 db  44h ; D
.eh_frame:00000000000074CD                 db    9
.eh_frame:00000000000074CE                 db    0
.eh_frame:00000000000074CF                 db    0
.eh_frame:00000000000074D0                 db  10h
.eh_frame:00000000000074D1                 db 0DAh
.eh_frame:00000000000074D2                 db 0FFh
.eh_frame:00000000000074D3                 db 0FFh
.eh_frame:00000000000074D4                 db  1Ch
.eh_frame:00000000000074D5                 db    4
.eh_frame:00000000000074D6                 db    0
.eh_frame:00000000000074D7                 db    0
.eh_frame:00000000000074D8                 db    0
.eh_frame:00000000000074D9                 db  42h ; B
.eh_frame:00000000000074DA                 db  0Eh
.eh_frame:00000000000074DB                 db  10h
.eh_frame:00000000000074DC                 db  8Fh
.eh_frame:00000000000074DD                 db    2
.eh_frame:00000000000074DE                 db  42h ; B
.eh_frame:00000000000074DF                 db  0Eh
.eh_frame:00000000000074E0                 db  18h
.eh_frame:00000000000074E1                 db  8Eh
.eh_frame:00000000000074E2                 db    3
.eh_frame:00000000000074E3                 db  42h ; B
.eh_frame:00000000000074E4                 db  0Eh
.eh_frame:00000000000074E5                 db  20h
.eh_frame:00000000000074E6                 db  8Dh
.eh_frame:00000000000074E7                 db    4
.eh_frame:00000000000074E8                 db  42h ; B
.eh_frame:00000000000074E9                 db  0Eh
.eh_frame:00000000000074EA                 db  28h ; (
.eh_frame:00000000000074EB                 db  8Ch
.eh_frame:00000000000074EC                 db    5
.eh_frame:00000000000074ED                 db  41h ; A
.eh_frame:00000000000074EE                 db  0Eh
.eh_frame:00000000000074EF                 db  30h ; 0
.eh_frame:00000000000074F0                 db  86h
.eh_frame:00000000000074F1                 db    6
.eh_frame:00000000000074F2                 db  41h ; A
.eh_frame:00000000000074F3                 db  0Eh
.eh_frame:00000000000074F4                 db  38h ; 8
.eh_frame:00000000000074F5                 db  83h
.eh_frame:00000000000074F6                 db    7
.eh_frame:00000000000074F7                 db  44h ; D
.eh_frame:00000000000074F8                 db  0Eh
.eh_frame:00000000000074F9                 db  60h ; `
.eh_frame:00000000000074FA                 db    2
.eh_frame:00000000000074FB                 db 0E9h
.eh_frame:00000000000074FC                 db  0Ah
.eh_frame:00000000000074FD                 db  0Eh
.eh_frame:00000000000074FE                 db  38h ; 8
.eh_frame:00000000000074FF                 db  41h ; A
.eh_frame:0000000000007500                 db  0Eh
.eh_frame:0000000000007501                 db  30h ; 0
.eh_frame:0000000000007502                 db  41h ; A
.eh_frame:0000000000007503                 db  0Eh
.eh_frame:0000000000007504                 db  28h ; (
.eh_frame:0000000000007505                 db  42h ; B
.eh_frame:0000000000007506                 db  0Eh
.eh_frame:0000000000007507                 db  20h
.eh_frame:0000000000007508                 db  42h ; B
.eh_frame:0000000000007509                 db  0Eh
.eh_frame:000000000000750A                 db  18h
.eh_frame:000000000000750B                 db  42h ; B
.eh_frame:000000000000750C                 db  0Eh
.eh_frame:000000000000750D                 db  10h
.eh_frame:000000000000750E                 db  42h ; B
.eh_frame:000000000000750F                 db  0Eh
.eh_frame:0000000000007510                 db    8
.eh_frame:0000000000007511                 db  47h ; G
.eh_frame:0000000000007512                 db  0Bh
.eh_frame:0000000000007513                 db    0
.eh_frame:0000000000007514                 db    0
.eh_frame:0000000000007515                 db    0
.eh_frame:0000000000007516                 db    0
.eh_frame:0000000000007517                 db    0
.eh_frame:0000000000007518                 db  3Ch ; <
.eh_frame:0000000000007519                 db    0
.eh_frame:000000000000751A                 db    0
.eh_frame:000000000000751B                 db    0
.eh_frame:000000000000751C                 db  94h
.eh_frame:000000000000751D                 db    9
.eh_frame:000000000000751E                 db    0
.eh_frame:000000000000751F                 db    0
.eh_frame:0000000000007520                 db 0E0h
.eh_frame:0000000000007521                 db 0DDh
.eh_frame:0000000000007522                 db 0FFh
.eh_frame:0000000000007523                 db 0FFh
.eh_frame:0000000000007524                 db  83h
.eh_frame:0000000000007525                 db    0
.eh_frame:0000000000007526                 db    0
.eh_frame:0000000000007527                 db    0
.eh_frame:0000000000007528                 db    0
.eh_frame:0000000000007529                 db  42h ; B
.eh_frame:000000000000752A                 db  0Eh
.eh_frame:000000000000752B                 db  10h
.eh_frame:000000000000752C                 db  8Dh
.eh_frame:000000000000752D                 db    2
.eh_frame:000000000000752E                 db  42h ; B
.eh_frame:000000000000752F                 db  0Eh
.eh_frame:0000000000007530                 db  18h
.eh_frame:0000000000007531                 db  8Ch
.eh_frame:0000000000007532                 db    3
.eh_frame:0000000000007533                 db  44h ; D
.eh_frame:0000000000007534                 db  0Eh
.eh_frame:0000000000007535                 db  20h
.eh_frame:0000000000007536                 db  86h
.eh_frame:0000000000007537                 db    4
.eh_frame:0000000000007538                 db  41h ; A
.eh_frame:0000000000007539                 db  0Eh
.eh_frame:000000000000753A                 db  28h ; (
.eh_frame:000000000000753B                 db  83h
.eh_frame:000000000000753C                 db    5
.eh_frame:000000000000753D                 db  4Ah ; J
.eh_frame:000000000000753E                 db  0Eh
.eh_frame:000000000000753F                 db  40h ; @
.eh_frame:0000000000007540                 db    2
.eh_frame:0000000000007541                 db  64h ; d
.eh_frame:0000000000007542                 db  0Ah
.eh_frame:0000000000007543                 db  0Eh
.eh_frame:0000000000007544                 db  28h ; (
.eh_frame:0000000000007545                 db  41h ; A
.eh_frame:0000000000007546                 db  0Eh
.eh_frame:0000000000007547                 db  20h
.eh_frame:0000000000007548                 db  41h ; A
.eh_frame:0000000000007549                 db  0Eh
.eh_frame:000000000000754A                 db  18h
.eh_frame:000000000000754B                 db  42h ; B
.eh_frame:000000000000754C                 db  0Eh
.eh_frame:000000000000754D                 db  10h
.eh_frame:000000000000754E                 db  42h ; B
.eh_frame:000000000000754F                 db  0Eh
.eh_frame:0000000000007550                 db    8
.eh_frame:0000000000007551                 db  41h ; A
.eh_frame:0000000000007552                 db  0Bh
.eh_frame:0000000000007553                 db    0
.eh_frame:0000000000007554                 db    0
.eh_frame:0000000000007555                 db    0
.eh_frame:0000000000007556                 db    0
.eh_frame:0000000000007557                 db    0
.eh_frame:0000000000007558                 db  4Ch ; L
.eh_frame:0000000000007559                 db    0
.eh_frame:000000000000755A                 db    0
.eh_frame:000000000000755B                 db    0
.eh_frame:000000000000755C                 db 0D4h
.eh_frame:000000000000755D                 db    9
.eh_frame:000000000000755E                 db    0
.eh_frame:000000000000755F                 db    0
.eh_frame:0000000000007560                 db  30h ; 0
.eh_frame:0000000000007561                 db 0DEh
.eh_frame:0000000000007562                 db 0FFh
.eh_frame:0000000000007563                 db 0FFh
.eh_frame:0000000000007564                 db  7Dh ; }
.eh_frame:0000000000007565                 db    0
.eh_frame:0000000000007566                 db    0
.eh_frame:0000000000007567                 db    0
.eh_frame:0000000000007568                 db    0
.eh_frame:0000000000007569                 db  42h ; B
.eh_frame:000000000000756A                 db  0Eh
.eh_frame:000000000000756B                 db  10h
.eh_frame:000000000000756C                 db  8Ch
.eh_frame:000000000000756D                 db    2
.eh_frame:000000000000756E                 db  41h ; A
.eh_frame:000000000000756F                 db  0Eh
.eh_frame:0000000000007570                 db  18h
.eh_frame:0000000000007571                 db  86h
.eh_frame:0000000000007572                 db    3
.eh_frame:0000000000007573                 db  44h ; D
.eh_frame:0000000000007574                 db  0Eh
.eh_frame:0000000000007575                 db  20h
.eh_frame:0000000000007576                 db  83h
.eh_frame:0000000000007577                 db    4
.eh_frame:0000000000007578                 db  69h ; i
.eh_frame:0000000000007579                 db  0Ah
.eh_frame:000000000000757A                 db  0Eh
.eh_frame:000000000000757B                 db  18h
.eh_frame:000000000000757C                 db  41h ; A
.eh_frame:000000000000757D                 db  0Eh
.eh_frame:000000000000757E                 db  10h
.eh_frame:000000000000757F                 db  42h ; B
.eh_frame:0000000000007580                 db  0Eh
.eh_frame:0000000000007581                 db    8
.eh_frame:0000000000007582                 db  45h ; E
.eh_frame:0000000000007583                 db  0Bh
.eh_frame:0000000000007584                 db  55h ; U
.eh_frame:0000000000007585                 db  0Ah
.eh_frame:0000000000007586                 db  0Eh
.eh_frame:0000000000007587                 db  18h
.eh_frame:0000000000007588                 db  41h ; A
.eh_frame:0000000000007589                 db  0Eh
.eh_frame:000000000000758A                 db  10h
.eh_frame:000000000000758B                 db  42h ; B
.eh_frame:000000000000758C                 db  0Eh
.eh_frame:000000000000758D                 db    8
.eh_frame:000000000000758E                 db  48h ; H
.eh_frame:000000000000758F                 db  0Bh
.eh_frame:0000000000007590                 db  41h ; A
.eh_frame:0000000000007591                 db  0Ah
.eh_frame:0000000000007592                 db  0Eh
.eh_frame:0000000000007593                 db  18h
.eh_frame:0000000000007594                 db  46h ; F
.eh_frame:0000000000007595                 db  0Eh
.eh_frame:0000000000007596                 db  10h
.eh_frame:0000000000007597                 db  42h ; B
.eh_frame:0000000000007598                 db  0Eh
.eh_frame:0000000000007599                 db    8
.eh_frame:000000000000759A                 db  47h ; G
.eh_frame:000000000000759B                 db  0Bh
.eh_frame:000000000000759C                 db  49h ; I
.eh_frame:000000000000759D                 db  0Eh
.eh_frame:000000000000759E                 db  18h
.eh_frame:000000000000759F                 db  41h ; A
.eh_frame:00000000000075A0                 db  0Eh
.eh_frame:00000000000075A1                 db  10h
.eh_frame:00000000000075A2                 db  42h ; B
.eh_frame:00000000000075A3                 db  0Eh
.eh_frame:00000000000075A4                 db    8
.eh_frame:00000000000075A5                 db    0
.eh_frame:00000000000075A6                 db    0
.eh_frame:00000000000075A7                 db    0
.eh_frame:00000000000075A8                 db  1Ch
.eh_frame:00000000000075A9                 db    0
.eh_frame:00000000000075AA                 db    0
.eh_frame:00000000000075AB                 db    0
.eh_frame:00000000000075AC                 db  24h ; $
.eh_frame:00000000000075AD                 db  0Ah
.eh_frame:00000000000075AE                 db    0
.eh_frame:00000000000075AF                 db    0
.eh_frame:00000000000075B0                 db  60h ; `
.eh_frame:00000000000075B1                 db 0DEh
.eh_frame:00000000000075B2                 db 0FFh
.eh_frame:00000000000075B3                 db 0FFh
.eh_frame:00000000000075B4                 db  60h ; `
.eh_frame:00000000000075B5                 db    0
.eh_frame:00000000000075B6                 db    0
.eh_frame:00000000000075B7                 db    0
.eh_frame:00000000000075B8                 db    0
.eh_frame:00000000000075B9                 db  44h ; D
.eh_frame:00000000000075BA                 db  0Eh
.eh_frame:00000000000075BB                 db  10h
.eh_frame:00000000000075BC                 db  75h ; u
.eh_frame:00000000000075BD                 db  0Ah
.eh_frame:00000000000075BE                 db  0Eh
.eh_frame:00000000000075BF                 db    8
.eh_frame:00000000000075C0                 db  47h ; G
.eh_frame:00000000000075C1                 db  0Bh
.eh_frame:00000000000075C2                 db  5Fh ; _
.eh_frame:00000000000075C3                 db  0Eh
.eh_frame:00000000000075C4                 db    8
.eh_frame:00000000000075C5                 db    0
.eh_frame:00000000000075C6                 db    0
.eh_frame:00000000000075C7                 db    0
.eh_frame:00000000000075C8                 db  1Ch
.eh_frame:00000000000075C9                 db    0
.eh_frame:00000000000075CA                 db    0
.eh_frame:00000000000075CB                 db    0
.eh_frame:00000000000075CC                 db  44h ; D
.eh_frame:00000000000075CD                 db  0Ah
.eh_frame:00000000000075CE                 db    0
.eh_frame:00000000000075CF                 db    0
.eh_frame:00000000000075D0                 db 0A0h
.eh_frame:00000000000075D1                 db 0DEh
.eh_frame:00000000000075D2                 db 0FFh
.eh_frame:00000000000075D3                 db 0FFh
.eh_frame:00000000000075D4                 db  3Ch ; <
.eh_frame:00000000000075D5                 db    0
.eh_frame:00000000000075D6                 db    0
.eh_frame:00000000000075D7                 db    0
.eh_frame:00000000000075D8                 db    0
.eh_frame:00000000000075D9                 db  44h ; D
.eh_frame:00000000000075DA                 db  0Eh
.eh_frame:00000000000075DB                 db  10h
.eh_frame:00000000000075DC                 db  61h ; a
.eh_frame:00000000000075DD                 db  0Ah
.eh_frame:00000000000075DE                 db  0Eh
.eh_frame:00000000000075DF                 db    8
.eh_frame:00000000000075E0                 db  4Bh ; K
.eh_frame:00000000000075E1                 db  0Bh
.eh_frame:00000000000075E2                 db  4Bh ; K
.eh_frame:00000000000075E3                 db  0Eh
.eh_frame:00000000000075E4                 db    8
.eh_frame:00000000000075E5                 db    0
.eh_frame:00000000000075E6                 db    0
.eh_frame:00000000000075E7                 db    0
.eh_frame:00000000000075E8                 db  34h ; 4
.eh_frame:00000000000075E9                 db    0
.eh_frame:00000000000075EA                 db    0
.eh_frame:00000000000075EB                 db    0
.eh_frame:00000000000075EC                 db  64h ; d
.eh_frame:00000000000075ED                 db  0Ah
.eh_frame:00000000000075EE                 db    0
.eh_frame:00000000000075EF                 db    0
.eh_frame:00000000000075F0                 db 0C0h
.eh_frame:00000000000075F1                 db 0DEh
.eh_frame:00000000000075F2                 db 0FFh
.eh_frame:00000000000075F3                 db 0FFh
.eh_frame:00000000000075F4                 db  7Bh ; {
.eh_frame:00000000000075F5                 db    0
.eh_frame:00000000000075F6                 db    0
.eh_frame:00000000000075F7                 db    0
.eh_frame:00000000000075F8                 db    0
.eh_frame:00000000000075F9                 db  42h ; B
.eh_frame:00000000000075FA                 db  0Eh
.eh_frame:00000000000075FB                 db  10h
.eh_frame:00000000000075FC                 db  8Ch
.eh_frame:00000000000075FD                 db    2
.eh_frame:00000000000075FE                 db  41h ; A
.eh_frame:00000000000075FF                 db  0Eh
.eh_frame:0000000000007600                 db  18h
.eh_frame:0000000000007601                 db  86h
.eh_frame:0000000000007602                 db    3
.eh_frame:0000000000007603                 db  41h ; A
.eh_frame:0000000000007604                 db  0Eh
.eh_frame:0000000000007605                 db  20h
.eh_frame:0000000000007606                 db  83h
.eh_frame:0000000000007607                 db    4
.eh_frame:0000000000007608                 db  7Dh ; }
.eh_frame:0000000000007609                 db  0Ah
.eh_frame:000000000000760A                 db  0Eh
.eh_frame:000000000000760B                 db  18h
.eh_frame:000000000000760C                 db  41h ; A
.eh_frame:000000000000760D                 db  0Eh
.eh_frame:000000000000760E                 db  10h
.eh_frame:000000000000760F                 db  42h ; B
.eh_frame:0000000000007610                 db  0Eh
.eh_frame:0000000000007611                 db    8
.eh_frame:0000000000007612                 db  44h ; D
.eh_frame:0000000000007613                 db  0Bh
.eh_frame:0000000000007614                 db  60h ; `
.eh_frame:0000000000007615                 db  0Ah
.eh_frame:0000000000007616                 db  0Eh
.eh_frame:0000000000007617                 db  18h
.eh_frame:0000000000007618                 db  41h ; A
.eh_frame:0000000000007619                 db  0Eh
.eh_frame:000000000000761A                 db  10h
.eh_frame:000000000000761B                 db  42h ; B
.eh_frame:000000000000761C                 db  0Eh
.eh_frame:000000000000761D                 db    8
.eh_frame:000000000000761E                 db  45h ; E
.eh_frame:000000000000761F                 db  0Bh
.eh_frame:0000000000007620                 db  1Ch
.eh_frame:0000000000007621                 db    0
.eh_frame:0000000000007622                 db    0
.eh_frame:0000000000007623                 db    0
.eh_frame:0000000000007624                 db  9Ch
.eh_frame:0000000000007625                 db  0Ah
.eh_frame:0000000000007626                 db    0
.eh_frame:0000000000007627                 db    0
.eh_frame:0000000000007628                 db    8
.eh_frame:0000000000007629                 db 0DFh
.eh_frame:000000000000762A                 db 0FFh
.eh_frame:000000000000762B                 db 0FFh
.eh_frame:000000000000762C                 db  40h ; @
.eh_frame:000000000000762D                 db    0
.eh_frame:000000000000762E                 db    0
.eh_frame:000000000000762F                 db    0
.eh_frame:0000000000007630                 db    0
.eh_frame:0000000000007631                 db  44h ; D
.eh_frame:0000000000007632                 db  0Eh
.eh_frame:0000000000007633                 db  10h
.eh_frame:0000000000007634                 db  83h
.eh_frame:0000000000007635                 db    2
.eh_frame:0000000000007636                 db  5Ah ; Z
.eh_frame:0000000000007637                 db  0Ah
.eh_frame:0000000000007638                 db  0Eh
.eh_frame:0000000000007639                 db    8
.eh_frame:000000000000763A                 db  4Ah ; J
.eh_frame:000000000000763B                 db  0Bh
.eh_frame:000000000000763C                 db  53h ; S
.eh_frame:000000000000763D                 db  0Eh
.eh_frame:000000000000763E                 db    8
.eh_frame:000000000000763F                 db    0
.eh_frame:0000000000007640                 db  2Ch ; ,
.eh_frame:0000000000007641                 db    0
.eh_frame:0000000000007642                 db    0
.eh_frame:0000000000007643                 db    0
.eh_frame:0000000000007644                 db 0BCh
.eh_frame:0000000000007645                 db  0Ah
.eh_frame:0000000000007646                 db    0
.eh_frame:0000000000007647                 db    0
.eh_frame:0000000000007648                 db  28h ; (
.eh_frame:0000000000007649                 db 0DFh
.eh_frame:000000000000764A                 db 0FFh
.eh_frame:000000000000764B                 db 0FFh
.eh_frame:000000000000764C                 db  57h ; W
.eh_frame:000000000000764D                 db    0
.eh_frame:000000000000764E                 db    0
.eh_frame:000000000000764F                 db    0
.eh_frame:0000000000007650                 db    0
.eh_frame:0000000000007651                 db  63h ; c
.eh_frame:0000000000007652                 db  0Eh
.eh_frame:0000000000007653                 db  10h
.eh_frame:0000000000007654                 db  8Ch
.eh_frame:0000000000007655                 db    2
.eh_frame:0000000000007656                 db  41h ; A
.eh_frame:0000000000007657                 db  0Eh
.eh_frame:0000000000007658                 db  18h
.eh_frame:0000000000007659                 db  86h
.eh_frame:000000000000765A                 db    3
.eh_frame:000000000000765B                 db  44h ; D
.eh_frame:000000000000765C                 db  0Eh
.eh_frame:000000000000765D                 db  20h
.eh_frame:000000000000765E                 db  83h
.eh_frame:000000000000765F                 db    4
.eh_frame:0000000000007660                 db  6Bh ; k
.eh_frame:0000000000007661                 db  0Eh
.eh_frame:0000000000007662                 db  18h
.eh_frame:0000000000007663                 db  41h ; A
.eh_frame:0000000000007664                 db  0Eh
.eh_frame:0000000000007665                 db  10h
.eh_frame:0000000000007666                 db  42h ; B
.eh_frame:0000000000007667                 db  0Eh
.eh_frame:0000000000007668                 db    8
.eh_frame:0000000000007669                 db    0
.eh_frame:000000000000766A                 db    0
.eh_frame:000000000000766B                 db    0
.eh_frame:000000000000766C                 db    0
.eh_frame:000000000000766D                 db    0
.eh_frame:000000000000766E                 db    0
.eh_frame:000000000000766F                 db    0
.eh_frame:0000000000007670                 db  44h ; D
.eh_frame:0000000000007671                 db    0
.eh_frame:0000000000007672                 db    0
.eh_frame:0000000000007673                 db    0
.eh_frame:0000000000007674                 db 0ECh
.eh_frame:0000000000007675                 db  0Ah
.eh_frame:0000000000007676                 db    0
.eh_frame:0000000000007677                 db    0
.eh_frame:0000000000007678                 db  58h ; X
.eh_frame:0000000000007679                 db 0DFh
.eh_frame:000000000000767A                 db 0FFh
.eh_frame:000000000000767B                 db 0FFh
.eh_frame:000000000000767C                 db  65h ; e
.eh_frame:000000000000767D                 db    0
.eh_frame:000000000000767E                 db    0
.eh_frame:000000000000767F                 db    0
.eh_frame:0000000000007680                 db    0
.eh_frame:0000000000007681                 db  42h ; B
.eh_frame:0000000000007682                 db  0Eh
.eh_frame:0000000000007683                 db  10h
.eh_frame:0000000000007684                 db  8Fh
.eh_frame:0000000000007685                 db    2
.eh_frame:0000000000007686                 db  42h ; B
.eh_frame:0000000000007687                 db  0Eh
.eh_frame:0000000000007688                 db  18h
.eh_frame:0000000000007689                 db  8Eh
.eh_frame:000000000000768A                 db    3
.eh_frame:000000000000768B                 db  45h ; E
.eh_frame:000000000000768C                 db  0Eh
.eh_frame:000000000000768D                 db  20h
.eh_frame:000000000000768E                 db  8Dh
.eh_frame:000000000000768F                 db    4
.eh_frame:0000000000007690                 db  42h ; B
.eh_frame:0000000000007691                 db  0Eh
.eh_frame:0000000000007692                 db  28h ; (
.eh_frame:0000000000007693                 db  8Ch
.eh_frame:0000000000007694                 db    5
.eh_frame:0000000000007695                 db  48h ; H
.eh_frame:0000000000007696                 db  0Eh
.eh_frame:0000000000007697                 db  30h ; 0
.eh_frame:0000000000007698                 db  86h
.eh_frame:0000000000007699                 db    6
.eh_frame:000000000000769A                 db  48h ; H
.eh_frame:000000000000769B                 db  0Eh
.eh_frame:000000000000769C                 db  38h ; 8
.eh_frame:000000000000769D                 db  83h
.eh_frame:000000000000769E                 db    7
.eh_frame:000000000000769F                 db  4Dh ; M
.eh_frame:00000000000076A0                 db  0Eh
.eh_frame:00000000000076A1                 db  40h ; @
.eh_frame:00000000000076A2                 db  72h ; r
.eh_frame:00000000000076A3                 db  0Eh
.eh_frame:00000000000076A4                 db  38h ; 8
.eh_frame:00000000000076A5                 db  41h ; A
.eh_frame:00000000000076A6                 db  0Eh
.eh_frame:00000000000076A7                 db  30h ; 0
.eh_frame:00000000000076A8                 db  41h ; A
.eh_frame:00000000000076A9                 db  0Eh
.eh_frame:00000000000076AA                 db  28h ; (
.eh_frame:00000000000076AB                 db  42h ; B
.eh_frame:00000000000076AC                 db  0Eh
.eh_frame:00000000000076AD                 db  20h
.eh_frame:00000000000076AE                 db  42h ; B
.eh_frame:00000000000076AF                 db  0Eh
.eh_frame:00000000000076B0                 db  18h
.eh_frame:00000000000076B1                 db  42h ; B
.eh_frame:00000000000076B2                 db  0Eh
.eh_frame:00000000000076B3                 db  10h
.eh_frame:00000000000076B4                 db  42h ; B
.eh_frame:00000000000076B5                 db  0Eh
.eh_frame:00000000000076B6                 db    8
.eh_frame:00000000000076B7                 db    0
.eh_frame:00000000000076B8                 db  14h
.eh_frame:00000000000076B9                 db    0
.eh_frame:00000000000076BA                 db    0
.eh_frame:00000000000076BB                 db    0
.eh_frame:00000000000076BC                 db  34h ; 4
.eh_frame:00000000000076BD                 db  0Bh
.eh_frame:00000000000076BE                 db    0
.eh_frame:00000000000076BF                 db    0
.eh_frame:00000000000076C0                 db  80h
.eh_frame:00000000000076C1                 db 0DFh
.eh_frame:00000000000076C2                 db 0FFh
.eh_frame:00000000000076C3                 db 0FFh
.eh_frame:00000000000076C4                 db    2
.eh_frame:00000000000076C5                 db    0
.eh_frame:00000000000076C6                 db    0
.eh_frame:00000000000076C7                 db    0
.eh_frame:00000000000076C8                 db    0
.eh_frame:00000000000076C9                 db    0
.eh_frame:00000000000076CA                 db    0
.eh_frame:00000000000076CB                 db    0
.eh_frame:00000000000076CC                 db    0
.eh_frame:00000000000076CD                 db    0
.eh_frame:00000000000076CE                 db    0
.eh_frame:00000000000076CF                 db    0
.eh_frame:00000000000076D0                 db  10h
.eh_frame:00000000000076D1                 db    0
.eh_frame:00000000000076D2                 db    0
.eh_frame:00000000000076D3                 db    0
.eh_frame:00000000000076D4                 db  4Ch ; L
.eh_frame:00000000000076D5                 db  0Bh
.eh_frame:00000000000076D6                 db    0
.eh_frame:00000000000076D7                 db    0
.eh_frame:00000000000076D8                 db  78h ; x
.eh_frame:00000000000076D9                 db 0DFh
.eh_frame:00000000000076DA                 db 0FFh
.eh_frame:00000000000076DB                 db 0FFh
.eh_frame:00000000000076DC                 db  0Eh
.eh_frame:00000000000076DD                 db    0
.eh_frame:00000000000076DE                 db    0
.eh_frame:00000000000076DF                 db    0
.eh_frame:00000000000076E0                 db    0
.eh_frame:00000000000076E1                 db    0
.eh_frame:00000000000076E2                 db    0
.eh_frame:00000000000076E3                 db    0
.eh_frame:00000000000076E4 __FRAME_END__   db    0
.eh_frame:00000000000076E5                 db    0
.eh_frame:00000000000076E6                 db    0
.eh_frame:00000000000076E7                 db    0
.eh_frame:00000000000076E7 _eh_frame       ends
.eh_frame:00000000000076E7
.init_array:0000000000207B50 ; ELF Initialization Function Table
.init_array:0000000000207B50 ; ===========================================================================
.init_array:0000000000207B50
.init_array:0000000000207B50 ; Segment type: Pure data
.init_array:0000000000207B50 ; Segment permissions: Read/Write
.init_array:0000000000207B50 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207B50                 assume cs:_init_array
.init_array:0000000000207B50                 ;org 207B50h
.init_array:0000000000207B50 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207B50                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207B50                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207B50 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207B50
.fini_array:0000000000207B58 ; ELF Termination Function Table
.fini_array:0000000000207B58 ; ===========================================================================
.fini_array:0000000000207B58
.fini_array:0000000000207B58 ; Segment type: Pure data
.fini_array:0000000000207B58 ; Segment permissions: Read/Write
.fini_array:0000000000207B58 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207B58                 assume cs:_fini_array
.fini_array:0000000000207B58                 ;org 207B58h
.fini_array:0000000000207B58 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207B58                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207B58 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207B58
.data.rel.ro:0000000000207B60 ; ===========================================================================
.data.rel.ro:0000000000207B60
.data.rel.ro:0000000000207B60 ; Segment type: Pure data
.data.rel.ro:0000000000207B60 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207B60 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207B60                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207B60                 ;org 207B60h
.data.rel.ro:0000000000207B60 ; struct option longopts
.data.rel.ro:0000000000207B60 longopts        dq offset aContext      ; name
.data.rel.ro:0000000000207B60                                         ; DATA XREF: main+8↑o
.data.rel.ro:0000000000207B60                 dd 2                    ; has_arg ; "context"
.data.rel.ro:0000000000207B60                 db 4 dup(0)
.data.rel.ro:0000000000207B60                 dq 0                    ; flag
.data.rel.ro:0000000000207B60                 dd 5Ah                  ; val
.data.rel.ro:0000000000207B60                 db 4 dup(0)
.data.rel.ro:0000000000207B80                 dq offset aInvalidMode+8 ; "mode"
.data.rel.ro:0000000000207B88                 db    1
.data.rel.ro:0000000000207B89                 db    0
.data.rel.ro:0000000000207B8A                 db    0
.data.rel.ro:0000000000207B8B                 db    0
.data.rel.ro:0000000000207B8C                 db    0
.data.rel.ro:0000000000207B8D                 db    0
.data.rel.ro:0000000000207B8E                 db    0
.data.rel.ro:0000000000207B8F                 db    0
.data.rel.ro:0000000000207B90                 db    0
.data.rel.ro:0000000000207B91                 db    0
.data.rel.ro:0000000000207B92                 db    0
.data.rel.ro:0000000000207B93                 db    0
.data.rel.ro:0000000000207B94                 db    0
.data.rel.ro:0000000000207B95                 db    0
.data.rel.ro:0000000000207B96                 db    0
.data.rel.ro:0000000000207B97                 db    0
.data.rel.ro:0000000000207B98                 db  6Dh ; m
.data.rel.ro:0000000000207B99                 db    0
.data.rel.ro:0000000000207B9A                 db    0
.data.rel.ro:0000000000207B9B                 db    0
.data.rel.ro:0000000000207B9C                 db    0
.data.rel.ro:0000000000207B9D                 db    0
.data.rel.ro:0000000000207B9E                 db    0
.data.rel.ro:0000000000207B9F                 db    0
.data.rel.ro:0000000000207BA0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000207BA8                 db    0
.data.rel.ro:0000000000207BA9                 db    0
.data.rel.ro:0000000000207BAA                 db    0
.data.rel.ro:0000000000207BAB                 db    0
.data.rel.ro:0000000000207BAC                 db    0
.data.rel.ro:0000000000207BAD                 db    0
.data.rel.ro:0000000000207BAE                 db    0
.data.rel.ro:0000000000207BAF                 db    0
.data.rel.ro:0000000000207BB0                 db    0
.data.rel.ro:0000000000207BB1                 db    0
.data.rel.ro:0000000000207BB2                 db    0
.data.rel.ro:0000000000207BB3                 db    0
.data.rel.ro:0000000000207BB4                 db    0
.data.rel.ro:0000000000207BB5                 db    0
.data.rel.ro:0000000000207BB6                 db    0
.data.rel.ro:0000000000207BB7                 db    0
.data.rel.ro:0000000000207BB8                 db  7Eh ; ~
.data.rel.ro:0000000000207BB9                 db 0FFh
.data.rel.ro:0000000000207BBA                 db 0FFh
.data.rel.ro:0000000000207BBB                 db 0FFh
.data.rel.ro:0000000000207BBC                 db    0
.data.rel.ro:0000000000207BBD                 db    0
.data.rel.ro:0000000000207BBE                 db    0
.data.rel.ro:0000000000207BBF                 db    0
.data.rel.ro:0000000000207BC0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207BC8                 db    0
.data.rel.ro:0000000000207BC9                 db    0
.data.rel.ro:0000000000207BCA                 db    0
.data.rel.ro:0000000000207BCB                 db    0
.data.rel.ro:0000000000207BCC                 db    0
.data.rel.ro:0000000000207BCD                 db    0
.data.rel.ro:0000000000207BCE                 db    0
.data.rel.ro:0000000000207BCF                 db    0
.data.rel.ro:0000000000207BD0                 db    0
.data.rel.ro:0000000000207BD1                 db    0
.data.rel.ro:0000000000207BD2                 db    0
.data.rel.ro:0000000000207BD3                 db    0
.data.rel.ro:0000000000207BD4                 db    0
.data.rel.ro:0000000000207BD5                 db    0
.data.rel.ro:0000000000207BD6                 db    0
.data.rel.ro:0000000000207BD7                 db    0
.data.rel.ro:0000000000207BD8                 db  7Dh ; }
.data.rel.ro:0000000000207BD9                 db 0FFh
.data.rel.ro:0000000000207BDA                 db 0FFh
.data.rel.ro:0000000000207BDB                 db 0FFh
.data.rel.ro:0000000000207BDC                 db    0
.data.rel.ro:0000000000207BDD                 db    0
.data.rel.ro:0000000000207BDE                 db    0
.data.rel.ro:0000000000207BDF                 db    0
.data.rel.ro:0000000000207BE0                 db    0
.data.rel.ro:0000000000207BE1                 db    0
.data.rel.ro:0000000000207BE2                 db    0
.data.rel.ro:0000000000207BE3                 db    0
.data.rel.ro:0000000000207BE4                 db    0
.data.rel.ro:0000000000207BE5                 db    0
.data.rel.ro:0000000000207BE6                 db    0
.data.rel.ro:0000000000207BE7                 db    0
.data.rel.ro:0000000000207BE8                 db    0
.data.rel.ro:0000000000207BE9                 db    0
.data.rel.ro:0000000000207BEA                 db    0
.data.rel.ro:0000000000207BEB                 db    0
.data.rel.ro:0000000000207BEC                 db    0
.data.rel.ro:0000000000207BED                 db    0
.data.rel.ro:0000000000207BEE                 db    0
.data.rel.ro:0000000000207BEF                 db    0
.data.rel.ro:0000000000207BF0                 db    0
.data.rel.ro:0000000000207BF1                 db    0
.data.rel.ro:0000000000207BF2                 db    0
.data.rel.ro:0000000000207BF3                 db    0
.data.rel.ro:0000000000207BF4                 db    0
.data.rel.ro:0000000000207BF5                 db    0
.data.rel.ro:0000000000207BF6                 db    0
.data.rel.ro:0000000000207BF7                 db    0
.data.rel.ro:0000000000207BF8                 db    0
.data.rel.ro:0000000000207BF9                 db    0
.data.rel.ro:0000000000207BFA                 db    0
.data.rel.ro:0000000000207BFB                 db    0
.data.rel.ro:0000000000207BFC                 db    0
.data.rel.ro:0000000000207BFD                 db    0
.data.rel.ro:0000000000207BFE                 db    0
.data.rel.ro:0000000000207BFF                 db    0
.data.rel.ro:0000000000207C00                 public quoting_style_args
.data.rel.ro:0000000000207C00 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207C08                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000207C10                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207C18                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207C20                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207C28                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000207C30                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207C38                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207C40                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207C48                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207C50                 db    0
.data.rel.ro:0000000000207C51                 db    0
.data.rel.ro:0000000000207C52                 db    0
.data.rel.ro:0000000000207C53                 db    0
.data.rel.ro:0000000000207C54                 db    0
.data.rel.ro:0000000000207C55                 db    0
.data.rel.ro:0000000000207C56                 db    0
.data.rel.ro:0000000000207C57                 db    0
.data.rel.ro:0000000000207C57 _data_rel_ro    ends
.data.rel.ro:0000000000207C57
LOAD:0000000000207C58 ; ELF Dynamic Information
LOAD:0000000000207C58 ; ===========================================================================
LOAD:0000000000207C58
LOAD:0000000000207C58 ; Segment type: Pure data
LOAD:0000000000207C58 ; Segment permissions: Read/Write
LOAD:0000000000207C58 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207C58                 assume cs:LOAD
LOAD:0000000000207C58                 ;org 207C58h
LOAD:0000000000207C58 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207C58                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207C58                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207C68                 Elf64_Dyn <0Ch, 1390h>  ; DT_INIT
LOAD:0000000000207C78                 Elf64_Dyn <0Dh, 5660h>  ; DT_FINI
LOAD:0000000000207C88                 Elf64_Dyn <19h, 207B50h> ; DT_INIT_ARRAY
LOAD:0000000000207C98                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207CA8                 Elf64_Dyn <1Ah, 207B58h> ; DT_FINI_ARRAY
LOAD:0000000000207CB8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207CC8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207CD8                 Elf64_Dyn <5, 898h>     ; DT_STRTAB
LOAD:0000000000207CE8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000207CF8                 Elf64_Dyn <0Ah, 2CBh>   ; DT_STRSZ
LOAD:0000000000207D08                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207D18                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207D28                 Elf64_Dyn <3, 207E48h>  ; DT_PLTGOT
LOAD:0000000000207D38                 Elf64_Dyn <2, 468h>     ; DT_PLTRELSZ
LOAD:0000000000207D48                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207D58                 Elf64_Dyn <17h, 0F28h>  ; DT_JMPREL
LOAD:0000000000207D68                 Elf64_Dyn <7, 0C40h>    ; DT_RELA
LOAD:0000000000207D78                 Elf64_Dyn <8, 2E8h>     ; DT_RELASZ
LOAD:0000000000207D88                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D98                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207DA8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207DB8                 Elf64_Dyn <6FFFFFFEh, 0BE0h> ; DT_VERNEED
LOAD:0000000000207DC8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207DD8                 Elf64_Dyn <6FFFFFF0h, 0B64h> ; DT_VERSYM
LOAD:0000000000207DE8                 Elf64_Dyn <6FFFFFF9h, 14h> ; DT_RELACOUNT
LOAD:0000000000207DF8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207E08                 db    0
LOAD:0000000000207E09                 db    0
LOAD:0000000000207E0A                 db    0
LOAD:0000000000207E0B                 db    0
LOAD:0000000000207E0C                 db    0
LOAD:0000000000207E0D                 db    0
LOAD:0000000000207E0E                 db    0
LOAD:0000000000207E0F                 db    0
LOAD:0000000000207E10                 db    0
LOAD:0000000000207E11                 db    0
LOAD:0000000000207E12                 db    0
LOAD:0000000000207E13                 db    0
LOAD:0000000000207E14                 db    0
LOAD:0000000000207E15                 db    0
LOAD:0000000000207E16                 db    0
LOAD:0000000000207E17                 db    0
LOAD:0000000000207E18                 db    0
LOAD:0000000000207E19                 db    0
LOAD:0000000000207E1A                 db    0
LOAD:0000000000207E1B                 db    0
LOAD:0000000000207E1C                 db    0
LOAD:0000000000207E1D                 db    0
LOAD:0000000000207E1E                 db    0
LOAD:0000000000207E1F                 db    0
LOAD:0000000000207E20                 db    0
LOAD:0000000000207E21                 db    0
LOAD:0000000000207E22                 db    0
LOAD:0000000000207E23                 db    0
LOAD:0000000000207E24                 db    0
LOAD:0000000000207E25                 db    0
LOAD:0000000000207E26                 db    0
LOAD:0000000000207E27                 db    0
LOAD:0000000000207E28                 db    0
LOAD:0000000000207E29                 db    0
LOAD:0000000000207E2A                 db    0
LOAD:0000000000207E2B                 db    0
LOAD:0000000000207E2C                 db    0
LOAD:0000000000207E2D                 db    0
LOAD:0000000000207E2E                 db    0
LOAD:0000000000207E2F                 db    0
LOAD:0000000000207E30                 db    0
LOAD:0000000000207E31                 db    0
LOAD:0000000000207E32                 db    0
LOAD:0000000000207E33                 db    0
LOAD:0000000000207E34                 db    0
LOAD:0000000000207E35                 db    0
LOAD:0000000000207E36                 db    0
LOAD:0000000000207E37                 db    0
LOAD:0000000000207E38                 db    0
LOAD:0000000000207E39                 db    0
LOAD:0000000000207E3A                 db    0
LOAD:0000000000207E3B                 db    0
LOAD:0000000000207E3C                 db    0
LOAD:0000000000207E3D                 db    0
LOAD:0000000000207E3E                 db    0
LOAD:0000000000207E3F                 db    0
LOAD:0000000000207E40                 db    0
LOAD:0000000000207E41                 db    0
LOAD:0000000000207E42                 db    0
LOAD:0000000000207E43                 db    0
LOAD:0000000000207E44                 db    0
LOAD:0000000000207E45                 db    0
LOAD:0000000000207E46                 db    0
LOAD:0000000000207E47                 db    0
LOAD:0000000000207E47 LOAD            ends
LOAD:0000000000207E47
.got:0000000000207E48 ; ===========================================================================
.got:0000000000207E48
.got:0000000000207E48 ; Segment type: Pure data
.got:0000000000207E48 ; Segment permissions: Read/Write
.got:0000000000207E48 _got            segment qword public 'DATA' use64
.got:0000000000207E48                 assume cs:_got
.got:0000000000207E48                 ;org 207E48h
.got:0000000000207E48 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207E50 qword_207E50    dq 0                    ; DATA XREF: sub_13B0↑r
.got:0000000000207E58 qword_207E58    dq 0                    ; DATA XREF: sub_13B0+6↑r
.got:0000000000207E60 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207E68 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E70 __errno_location_ptr dq offset __errno_location
.got:0000000000207E70                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E78 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E80 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E88 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E90 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207E98 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207EA0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207EA0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207EA8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207EB0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207EB0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207EB8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207EC0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207EC0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207EC8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207ED0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207ED8 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000207EE0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207EE8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207EF0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000207EF0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000207EF8 __strtoul_internal_ptr dq offset __strtoul_internal
.got:0000000000207EF8                                         ; DATA XREF: ___strtoul_internal↑r
.got:0000000000207F00 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207F08 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207F10 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207F10                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207F18 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207F20 mkfifo_ptr      dq offset mkfifo        ; DATA XREF: _mkfifo↑r
.got:0000000000207F28 umask_ptr       dq offset umask         ; DATA XREF: _umask↑r
.got:0000000000207F30 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207F38 __xmknod_ptr    dq offset __xmknod      ; DATA XREF: ___xmknod↑r
.got:0000000000207F40 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F48 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:0000000000207F50 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F58 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F60 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F68 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F70 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F78 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F80 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F88 chmod_ptr       dq offset chmod         ; DATA XREF: _chmod↑r
.got:0000000000207F90 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F98 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207FA0 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207FA8 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207FB0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207FB8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207FB8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207FC0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FC8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FE0                                         ; DATA XREF: start+24↑r
.got:0000000000207FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FF8 _got            ends
.got:0000000000207FF8
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010                 public Version
.data:0000000000208010 Version         dq offset a831          ; DATA XREF: main+D2↑r
.data:0000000000208010                                         ; "8.31"
.data:0000000000208018                 public exit_failure
.data:0000000000208018 ; int exit_failure
.data:0000000000208018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2322↑r
.data:0000000000208018                                         ; xalloc_die+17↑r
.data:000000000020801C                 align 20h
.data:0000000000208020                 public quote_quoting_options
.data:0000000000208020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208020                                         ; quote_mem↑o ...
.data:0000000000208021                 db    0
.data:0000000000208022                 db    0
.data:0000000000208023                 db    0
.data:0000000000208024                 db    0
.data:0000000000208025                 db    0
.data:0000000000208026                 db    0
.data:0000000000208027                 db    0
.data:0000000000208028                 db    0
.data:0000000000208029                 db    0
.data:000000000020802A                 db    0
.data:000000000020802B                 db    0
.data:000000000020802C                 db    0
.data:000000000020802D                 db    0
.data:000000000020802E                 db    0
.data:000000000020802F                 db    0
.data:0000000000208030                 db    0
.data:0000000000208031                 db    0
.data:0000000000208032                 db    0
.data:0000000000208033                 db    0
.data:0000000000208034                 db    0
.data:0000000000208035                 db    0
.data:0000000000208036                 db    0
.data:0000000000208037                 db    0
.data:0000000000208038                 db    0
.data:0000000000208039                 db    0
.data:000000000020803A                 db    0
.data:000000000020803B                 db    0
.data:000000000020803C                 db    0
.data:000000000020803D                 db    0
.data:000000000020803E                 db    0
.data:000000000020803F                 db    0
.data:0000000000208040                 db    0
.data:0000000000208041                 db    0
.data:0000000000208042                 db    0
.data:0000000000208043                 db    0
.data:0000000000208044                 db    0
.data:0000000000208045                 db    0
.data:0000000000208046                 db    0
.data:0000000000208047                 db    0
.data:0000000000208048                 db    0
.data:0000000000208049                 db    0
.data:000000000020804A                 db    0
.data:000000000020804B                 db    0
.data:000000000020804C                 db    0
.data:000000000020804D                 db    0
.data:000000000020804E                 db    0
.data:000000000020804F                 db    0
.data:0000000000208050                 db    0
.data:0000000000208051                 db    0
.data:0000000000208052                 db    0
.data:0000000000208053                 db    0
.data:0000000000208054                 db    0
.data:0000000000208055                 db    0
.data:0000000000208056                 db    0
.data:0000000000208057                 db    0
.data:0000000000208058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208058                                         ; quotearg_n_options:loc_3D4D↑r ...
.data:000000000020805C                 align 20h
.data:0000000000208060 ; void *slotvec
.data:0000000000208060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000208060                                         ; quotearg_n_options+76↑w ...
.data:0000000000208068                 align 10h
.data:0000000000208070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000208070                                         ; quotearg_n_options+187↑r ...
.data:0000000000208078 off_208078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000208078 _data           ends
.data:0000000000208078
.bss:0000000000208080 ; ===========================================================================
.bss:0000000000208080
.bss:0000000000208080 ; Segment type: Uninitialized
.bss:0000000000208080 ; Segment permissions: Read/Write
.bss:0000000000208080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000208080                 assume cs:_bss
.bss:0000000000208080                 ;org 208080h
.bss:0000000000208080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000208080                 public __bss_start ; weak
.bss:0000000000208080 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000007F0↑o
.bss:0000000000208080                                         ; LOAD:0000000000000838↑o ...
.bss:0000000000208080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000208080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000208080                                         ; _edata
.bss:0000000000208080                                         ; Copy of shared data
.bss:0000000000208088                 public stdout@@GLIBC_2_2_5
.bss:0000000000208088 ; FILE *stdout
.bss:0000000000208088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007D8↑o
.bss:0000000000208088                                         ; main+CB↑r ...
.bss:0000000000208088                                         ; Alternative name is 'stdout'
.bss:0000000000208088                                         ; Copy of shared data
.bss:0000000000208090                 public optind@@GLIBC_2_2_5
.bss:0000000000208090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000868↑o
.bss:0000000000208090                                         ; main:loc_184F↑r ...
.bss:0000000000208090                                         ; Alternative name is 'optind'
.bss:0000000000208090                                         ; Copy of shared data
.bss:0000000000208094                 align 8
.bss:0000000000208098                 public optarg@@GLIBC_2_2_5
.bss:0000000000208098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000880↑o
.bss:0000000000208098                                         ; main+AD↑r ...
.bss:0000000000208098                                         ; Alternative name is 'optarg'
.bss:0000000000208098                                         ; Copy of shared data
.bss:00000000002080A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002080A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002080A0                                         ; DATA XREF: LOAD:0000000000000808↑o
.bss:00000000002080A0                                         ; LOAD:0000000000000820↑o ...
.bss:00000000002080A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002080A0                                         ; Copy of shared data
.bss:00000000002080A8                 align 20h
.bss:00000000002080C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002080C0 ; FILE *stderr
.bss:00000000002080C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000850↑o
.bss:00000000002080C0                                         ; main+228↑r ...
.bss:00000000002080C0                                         ; Alternative name is 'stderr'
.bss:00000000002080C0                                         ; Copy of shared data
.bss:00000000002080C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002080C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002080C9                 align 10h
.bss:00000000002080D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002080D0                                         ; close_stdout+1B↑r
.bss:00000000002080D1                 align 8
.bss:00000000002080D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002080D8                                         ; close_stdout+56↑r
.bss:00000000002080E0                 public program_name
.bss:00000000002080E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002080E0                                         ; set_program_name:loc_296D↑w
.bss:00000000002080E8                 align 20h
.bss:0000000000208100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000208100                                         ; quotearg_free+46↑o ...
.bss:0000000000208101                 db    ? ;
.bss:0000000000208102                 db    ? ;
.bss:0000000000208103                 db    ? ;
.bss:0000000000208104                 db    ? ;
.bss:0000000000208105                 db    ? ;
.bss:0000000000208106                 db    ? ;
.bss:0000000000208107                 db    ? ;
.bss:0000000000208108                 db    ? ;
.bss:0000000000208109                 db    ? ;
.bss:000000000020810A                 db    ? ;
.bss:000000000020810B                 db    ? ;
.bss:000000000020810C                 db    ? ;
.bss:000000000020810D                 db    ? ;
.bss:000000000020810E                 db    ? ;
.bss:000000000020810F                 db    ? ;
.bss:0000000000208110                 db    ? ;
.bss:0000000000208111                 db    ? ;
.bss:0000000000208112                 db    ? ;
.bss:0000000000208113                 db    ? ;
.bss:0000000000208114                 db    ? ;
.bss:0000000000208115                 db    ? ;
.bss:0000000000208116                 db    ? ;
.bss:0000000000208117                 db    ? ;
.bss:0000000000208118                 db    ? ;
.bss:0000000000208119                 db    ? ;
.bss:000000000020811A                 db    ? ;
.bss:000000000020811B                 db    ? ;
.bss:000000000020811C                 db    ? ;
.bss:000000000020811D                 db    ? ;
.bss:000000000020811E                 db    ? ;
.bss:000000000020811F                 db    ? ;
.bss:0000000000208120                 db    ? ;
.bss:0000000000208121                 db    ? ;
.bss:0000000000208122                 db    ? ;
.bss:0000000000208123                 db    ? ;
.bss:0000000000208124                 db    ? ;
.bss:0000000000208125                 db    ? ;
.bss:0000000000208126                 db    ? ;
.bss:0000000000208127                 db    ? ;
.bss:0000000000208128                 db    ? ;
.bss:0000000000208129                 db    ? ;
.bss:000000000020812A                 db    ? ;
.bss:000000000020812B                 db    ? ;
.bss:000000000020812C                 db    ? ;
.bss:000000000020812D                 db    ? ;
.bss:000000000020812E                 db    ? ;
.bss:000000000020812F                 db    ? ;
.bss:0000000000208130                 db    ? ;
.bss:0000000000208131                 db    ? ;
.bss:0000000000208132                 db    ? ;
.bss:0000000000208133                 db    ? ;
.bss:0000000000208134                 db    ? ;
.bss:0000000000208135                 db    ? ;
.bss:0000000000208136                 db    ? ;
.bss:0000000000208137                 db    ? ;
.bss:0000000000208138                 db    ? ;
.bss:0000000000208139                 db    ? ;
.bss:000000000020813A                 db    ? ;
.bss:000000000020813B                 db    ? ;
.bss:000000000020813C                 db    ? ;
.bss:000000000020813D                 db    ? ;
.bss:000000000020813E                 db    ? ;
.bss:000000000020813F                 db    ? ;
.bss:0000000000208140                 db    ? ;
.bss:0000000000208141                 db    ? ;
.bss:0000000000208142                 db    ? ;
.bss:0000000000208143                 db    ? ;
.bss:0000000000208144                 db    ? ;
.bss:0000000000208145                 db    ? ;
.bss:0000000000208146                 db    ? ;
.bss:0000000000208147                 db    ? ;
.bss:0000000000208148                 db    ? ;
.bss:0000000000208149                 db    ? ;
.bss:000000000020814A                 db    ? ;
.bss:000000000020814B                 db    ? ;
.bss:000000000020814C                 db    ? ;
.bss:000000000020814D                 db    ? ;
.bss:000000000020814E                 db    ? ;
.bss:000000000020814F                 db    ? ;
.bss:0000000000208150                 db    ? ;
.bss:0000000000208151                 db    ? ;
.bss:0000000000208152                 db    ? ;
.bss:0000000000208153                 db    ? ;
.bss:0000000000208154                 db    ? ;
.bss:0000000000208155                 db    ? ;
.bss:0000000000208156                 db    ? ;
.bss:0000000000208157                 db    ? ;
.bss:0000000000208158                 db    ? ;
.bss:0000000000208159                 db    ? ;
.bss:000000000020815A                 db    ? ;
.bss:000000000020815B                 db    ? ;
.bss:000000000020815C                 db    ? ;
.bss:000000000020815D                 db    ? ;
.bss:000000000020815E                 db    ? ;
.bss:000000000020815F                 db    ? ;
.bss:0000000000208160                 db    ? ;
.bss:0000000000208161                 db    ? ;
.bss:0000000000208162                 db    ? ;
.bss:0000000000208163                 db    ? ;
.bss:0000000000208164                 db    ? ;
.bss:0000000000208165                 db    ? ;
.bss:0000000000208166                 db    ? ;
.bss:0000000000208167                 db    ? ;
.bss:0000000000208168                 db    ? ;
.bss:0000000000208169                 db    ? ;
.bss:000000000020816A                 db    ? ;
.bss:000000000020816B                 db    ? ;
.bss:000000000020816C                 db    ? ;
.bss:000000000020816D                 db    ? ;
.bss:000000000020816E                 db    ? ;
.bss:000000000020816F                 db    ? ;
.bss:0000000000208170                 db    ? ;
.bss:0000000000208171                 db    ? ;
.bss:0000000000208172                 db    ? ;
.bss:0000000000208173                 db    ? ;
.bss:0000000000208174                 db    ? ;
.bss:0000000000208175                 db    ? ;
.bss:0000000000208176                 db    ? ;
.bss:0000000000208177                 db    ? ;
.bss:0000000000208178                 db    ? ;
.bss:0000000000208179                 db    ? ;
.bss:000000000020817A                 db    ? ;
.bss:000000000020817B                 db    ? ;
.bss:000000000020817C                 db    ? ;
.bss:000000000020817D                 db    ? ;
.bss:000000000020817E                 db    ? ;
.bss:000000000020817F                 db    ? ;
.bss:0000000000208180                 db    ? ;
.bss:0000000000208181                 db    ? ;
.bss:0000000000208182                 db    ? ;
.bss:0000000000208183                 db    ? ;
.bss:0000000000208184                 db    ? ;
.bss:0000000000208185                 db    ? ;
.bss:0000000000208186                 db    ? ;
.bss:0000000000208187                 db    ? ;
.bss:0000000000208188                 db    ? ;
.bss:0000000000208189                 db    ? ;
.bss:000000000020818A                 db    ? ;
.bss:000000000020818B                 db    ? ;
.bss:000000000020818C                 db    ? ;
.bss:000000000020818D                 db    ? ;
.bss:000000000020818E                 db    ? ;
.bss:000000000020818F                 db    ? ;
.bss:0000000000208190                 db    ? ;
.bss:0000000000208191                 db    ? ;
.bss:0000000000208192                 db    ? ;
.bss:0000000000208193                 db    ? ;
.bss:0000000000208194                 db    ? ;
.bss:0000000000208195                 db    ? ;
.bss:0000000000208196                 db    ? ;
.bss:0000000000208197                 db    ? ;
.bss:0000000000208198                 db    ? ;
.bss:0000000000208199                 db    ? ;
.bss:000000000020819A                 db    ? ;
.bss:000000000020819B                 db    ? ;
.bss:000000000020819C                 db    ? ;
.bss:000000000020819D                 db    ? ;
.bss:000000000020819E                 db    ? ;
.bss:000000000020819F                 db    ? ;
.bss:00000000002081A0                 db    ? ;
.bss:00000000002081A1                 db    ? ;
.bss:00000000002081A2                 db    ? ;
.bss:00000000002081A3                 db    ? ;
.bss:00000000002081A4                 db    ? ;
.bss:00000000002081A5                 db    ? ;
.bss:00000000002081A6                 db    ? ;
.bss:00000000002081A7                 db    ? ;
.bss:00000000002081A8                 db    ? ;
.bss:00000000002081A9                 db    ? ;
.bss:00000000002081AA                 db    ? ;
.bss:00000000002081AB                 db    ? ;
.bss:00000000002081AC                 db    ? ;
.bss:00000000002081AD                 db    ? ;
.bss:00000000002081AE                 db    ? ;
.bss:00000000002081AF                 db    ? ;
.bss:00000000002081B0                 db    ? ;
.bss:00000000002081B1                 db    ? ;
.bss:00000000002081B2                 db    ? ;
.bss:00000000002081B3                 db    ? ;
.bss:00000000002081B4                 db    ? ;
.bss:00000000002081B5                 db    ? ;
.bss:00000000002081B6                 db    ? ;
.bss:00000000002081B7                 db    ? ;
.bss:00000000002081B8                 db    ? ;
.bss:00000000002081B9                 db    ? ;
.bss:00000000002081BA                 db    ? ;
.bss:00000000002081BB                 db    ? ;
.bss:00000000002081BC                 db    ? ;
.bss:00000000002081BD                 db    ? ;
.bss:00000000002081BE                 db    ? ;
.bss:00000000002081BF                 db    ? ;
.bss:00000000002081C0                 db    ? ;
.bss:00000000002081C1                 db    ? ;
.bss:00000000002081C2                 db    ? ;
.bss:00000000002081C3                 db    ? ;
.bss:00000000002081C4                 db    ? ;
.bss:00000000002081C5                 db    ? ;
.bss:00000000002081C6                 db    ? ;
.bss:00000000002081C7                 db    ? ;
.bss:00000000002081C8                 db    ? ;
.bss:00000000002081C9                 db    ? ;
.bss:00000000002081CA                 db    ? ;
.bss:00000000002081CB                 db    ? ;
.bss:00000000002081CC                 db    ? ;
.bss:00000000002081CD                 db    ? ;
.bss:00000000002081CE                 db    ? ;
.bss:00000000002081CF                 db    ? ;
.bss:00000000002081D0                 db    ? ;
.bss:00000000002081D1                 db    ? ;
.bss:00000000002081D2                 db    ? ;
.bss:00000000002081D3                 db    ? ;
.bss:00000000002081D4                 db    ? ;
.bss:00000000002081D5                 db    ? ;
.bss:00000000002081D6                 db    ? ;
.bss:00000000002081D7                 db    ? ;
.bss:00000000002081D8                 db    ? ;
.bss:00000000002081D9                 db    ? ;
.bss:00000000002081DA                 db    ? ;
.bss:00000000002081DB                 db    ? ;
.bss:00000000002081DC                 db    ? ;
.bss:00000000002081DD                 db    ? ;
.bss:00000000002081DE                 db    ? ;
.bss:00000000002081DF                 db    ? ;
.bss:00000000002081E0                 db    ? ;
.bss:00000000002081E1                 db    ? ;
.bss:00000000002081E2                 db    ? ;
.bss:00000000002081E3                 db    ? ;
.bss:00000000002081E4                 db    ? ;
.bss:00000000002081E5                 db    ? ;
.bss:00000000002081E6                 db    ? ;
.bss:00000000002081E7                 db    ? ;
.bss:00000000002081E8                 db    ? ;
.bss:00000000002081E9                 db    ? ;
.bss:00000000002081EA                 db    ? ;
.bss:00000000002081EB                 db    ? ;
.bss:00000000002081EC                 db    ? ;
.bss:00000000002081ED                 db    ? ;
.bss:00000000002081EE                 db    ? ;
.bss:00000000002081EF                 db    ? ;
.bss:00000000002081F0                 db    ? ;
.bss:00000000002081F1                 db    ? ;
.bss:00000000002081F2                 db    ? ;
.bss:00000000002081F3                 db    ? ;
.bss:00000000002081F4                 db    ? ;
.bss:00000000002081F5                 db    ? ;
.bss:00000000002081F6                 db    ? ;
.bss:00000000002081F7                 db    ? ;
.bss:00000000002081F8                 db    ? ;
.bss:00000000002081F9                 db    ? ;
.bss:00000000002081FA                 db    ? ;
.bss:00000000002081FB                 db    ? ;
.bss:00000000002081FC                 db    ? ;
.bss:00000000002081FD                 db    ? ;
.bss:00000000002081FE                 db    ? ;
.bss:00000000002081FF                 db    ? ;
.bss:0000000000208200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000208200                                         ; get_quoting_style↑o ...
.bss:0000000000208210 xmmword_208210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000208210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000208220 xmmword_208220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000208220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000208230 qword_208230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000208230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000208230 _bss            ends
.bss:0000000000208230
.prgend:0000000000208238 ; ===========================================================================
.prgend:0000000000208238
.prgend:0000000000208238 ; Segment type: Zero-length
.prgend:0000000000208238 _prgend         segment byte public '' use64
.prgend:0000000000208238 _end            label byte
.prgend:0000000000208238 _prgend         ends
.prgend:0000000000208238
extern:0000000000208240 ; ===========================================================================
extern:0000000000208240
extern:0000000000208240 ; Segment type: Externs
extern:0000000000208240 ; extern
extern:0000000000208240 ; void free(void *ptr)
extern:0000000000208240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000208240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000208248 ; void __noreturn abort(void)
extern:0000000000208248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000208248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000208250 ; int *_errno_location(void)
extern:0000000000208250                 extrn __errno_location:near
extern:0000000000208250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000208250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000208258 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000208258                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000208258                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000208260 ; void __noreturn exit(int status)
extern:0000000000208260                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000208260                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000208268 ; size_t _fpending(FILE *fp)
extern:0000000000208268                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000208268                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000208270 ; char *textdomain(const char *domainname)
extern:0000000000208270                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000208270                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000208278 ; int fclose(FILE *stream)
extern:0000000000208278                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000208278                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000208280 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000208280                 extrn bindtextdomain:near
extern:0000000000208280                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000208280                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000208288 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000208288                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000208288                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000208290 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000208290                 extrn __ctype_get_mb_cur_max:near
extern:0000000000208290                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000208290                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000208298 ; size_t strlen(const char *s)
extern:0000000000208298                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000208298                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002082A0                 extrn __stack_chk_fail:near
extern:00000000002082A0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002082A0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002082A8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002082A8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002082A8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002082B0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002082B0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002082B0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002082B8 ; char *strchr(const char *s, int c)
extern:00000000002082B8                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:00000000002082B8                                         ; DATA XREF: .got:strchr_ptr↑o
extern:00000000002082C0 ; char *strrchr(const char *s, int c)
extern:00000000002082C0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002082C0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002082C8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002082C8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002082C8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002082D0 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:00000000002082D0                 extrn __assert_fail:near
extern:00000000002082D0                                         ; CODE XREF: ___assert_fail↑j
extern:00000000002082D0                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:00000000002082D8 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:00000000002082D8                 extrn __strtoul_internal:near
extern:00000000002082D8                                         ; CODE XREF: ___strtoul_internal↑j
extern:00000000002082D8                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:00000000002082E0 ; void *memset(void *s, int c, size_t n)
extern:00000000002082E0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002082E0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002082E8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002082E8                 extrn __libc_start_main:near
extern:00000000002082E8                                         ; CODE XREF: start+24↑p
extern:00000000002082E8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002082F0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002082F0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002082F0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002082F8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002082F8                 extrn fputs_unlocked:near
extern:00000000002082F8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002082F8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000208300 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000208300                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000208300                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000208308 ; int mkfifo(const char *path, __mode_t mode)
extern:0000000000208308                 extrn mkfifo:near       ; CODE XREF: _mkfifo↑j
extern:0000000000208308                                         ; DATA XREF: .got:mkfifo_ptr↑o
extern:0000000000208310 ; __mode_t umask(__mode_t mask)
extern:0000000000208310                 extrn umask:near        ; CODE XREF: _umask↑j
extern:0000000000208310                                         ; DATA XREF: .got:umask_ptr↑o
extern:0000000000208318 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000208318                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000208318                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000208320 ; int _xmknod(int ver, const char *path, __mode_t mode, __dev_t *dev)
extern:0000000000208320                 extrn __xmknod:near     ; CODE XREF: ___xmknod↑j
extern:0000000000208320                                         ; DATA XREF: .got:__xmknod_ptr↑o
extern:0000000000208328 ; int fileno(FILE *stream)
extern:0000000000208328                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000208328                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000208330 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000208330                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:0000000000208330                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:0000000000208338 ; void *malloc(size_t size)
extern:0000000000208338                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000208338                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000208340 ; int fflush(FILE *stream)
extern:0000000000208340                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000208340                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000208348 ; char *nl_langinfo(nl_item item)
extern:0000000000208348                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000208348                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000208350 ; int _freading(FILE *fp)
extern:0000000000208350                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000208350                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000208358 ; void *realloc(void *ptr, size_t size)
extern:0000000000208358                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000208358                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000208360 ; char *setlocale(int category, const char *locale)
extern:0000000000208360                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000208360                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000208368                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000208368                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000208370 ; int chmod(const char *file, __mode_t mode)
extern:0000000000208370                 extrn chmod:near        ; CODE XREF: _chmod↑j
extern:0000000000208370                                         ; DATA XREF: .got:chmod_ptr↑o
extern:0000000000208378 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000208378                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000208378                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000208380 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000208380                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000208380                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000208388 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000208388                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000208388                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000208390 ; void __noreturn exit(int status)
extern:0000000000208390                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000208390                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000208398 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000208398                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000208398                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002083A0                 extrn __fprintf_chk:near
extern:00000000002083A0                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002083A0                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002083A8 ; int mbsinit(const mbstate_t *ps)
extern:00000000002083A8                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002083A8                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002083B0 ; int iswprint(wint_t wc)
extern:00000000002083B0                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002083B0                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002083B8 ; int __fastcall __cxa_finalize(void *)
extern:00000000002083B8                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002083B8                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002083B8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002083C0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002083C0                 extrn __ctype_b_loc:near
extern:00000000002083C0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002083C0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002083C8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002083C8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002083D0                 extrn __gmon_start__:near ; weak
extern:00000000002083D0                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002083D0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002083D8                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002083D8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002083D8
extern:00000000002083D8
extern:00000000002083D8                 end start
