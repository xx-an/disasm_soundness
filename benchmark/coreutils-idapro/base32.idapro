LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 5BE13574B617DCF8225F4DE6B4681C8F539FBAFB01978C117DC85C54433C6A6B
LOAD:0000000000000000 ; Input MD5    : 737EA5D5B1A7DAD86F32B945C1FA86F2
LOAD:0000000000000000 ; Input CRC32  : 55918872
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/base32
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'basenc.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'base32.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoumax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 2C450h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 7C98h                ; Size in file image
LOAD:00000000000000D8                 dq 7C98h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 8B10h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 208B10h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 570h                 ; Size in file image
LOAD:0000000000000110                 dq 728h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 8C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 208C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 6D3Ch                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 6D3Ch                ; Physical address
LOAD:00000000000001B0                 dq 29Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 29Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 8B10h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 208B10h              ; Physical address
LOAD:0000000000000220                 dq 4F0h                 ; Size in file image
LOAD:0000000000000228                 dq 4F0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0D0h, 5Bh, 58h, 0FAh, 5Fh, 0C6h, 25h, 0A0h, 66h, 1 ; Desc
LOAD:0000000000000284                 db 12h, 2Ah, 0ECh, 9Ah, 26h, 61h, 14h, 89h, 0E6h, 83h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 38h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 38h, 39h, 3Fh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_8F8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_8F8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_8F8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_8F8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_8F8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_8F8, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFreadUnlocked - offset byte_8F8, 12h, 0, 0, \ ; "fread_unlocked"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8F8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFclose - offset byte_8F8, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain - offset byte_8F8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aDcgettext - offset byte_8F8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8F8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStrlen - offset byte_8F8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStackChkFail - offset byte_8F8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aGetoptLong - offset byte_8F8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aMbrtowc - offset byte_8F8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrchr - offset byte_8F8, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aOverflow - offset byte_8F8, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrrchr - offset byte_8F8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLseek - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D8                            0>
LOAD:00000000000004F0                 Elf64_Sym <offset aAssertFail - offset byte_8F8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStrtoulInterna - offset byte_8F8, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aMemset - offset byte_8F8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aPosixFadvise - offset byte_8F8, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMemchr - offset byte_8F8, 12h, 0, 0, \ ; "memchr"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aLibcStartMain - offset byte_8F8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMemcmp - offset byte_8F8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFputsUnlocked - offset byte_8F8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aCalloc - offset byte_8F8, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aStrcmp - offset byte_8F8, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aGmonStart - offset byte_8F8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aMemcpy - offset byte_8F8, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFileno - offset byte_8F8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aMalloc - offset byte_8F8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFflush - offset byte_8F8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aNlLanginfo - offset byte_8F8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFreading - offset byte_8F8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFwriteUnlocked - offset byte_8F8, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aRealloc - offset byte_8F8, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aSetlocale - offset byte_8F8, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aPrintfChk - offset byte_8F8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aMemmove - offset byte_8F8, 12h, 0, 0, \ ; "memmove"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aError - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000700                            0>
LOAD:0000000000000718                 Elf64_Sym <offset aFseeko - offset byte_8F8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFopen - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000730                            0>
LOAD:0000000000000748                 Elf64_Sym <offset aCxaAtexit - offset byte_8F8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aExit+1 - offset byte_8F8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFwrite - offset byte_8F8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFprintfChk - offset byte_8F8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aItmRegistertmc - offset byte_8F8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aMbsinit - offset byte_8F8, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aIswprint - offset byte_8F8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aCxaFinalize - offset byte_8F8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aCtypeBLoc - offset byte_8F8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aStdout - offset byte_8F8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000820                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aProgname - offset byte_8F8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000838                            offset __bss_start, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aStdin - offset byte_8F8, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000850                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aProgramInvocat - offset byte_8F8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000868                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aPrognameFull - offset byte_8F8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000880                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000898                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8F8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000898                            offset __bss_start, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aStderr - offset byte_8F8, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000008B0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000008C8                 Elf64_Sym <offset aOptind - offset byte_8F8, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000008C8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008E0                 Elf64_Sym <offset aOptarg - offset byte_8F8, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000008E0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000008F8 ; ELF String Table
LOAD:00000000000008F8 byte_8F8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000008F8                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000008F9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C80↓o
LOAD:0000000000000903 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:000000000000090A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000917 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000921 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000929 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000730↑o
LOAD:000000000000092F aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000937 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:000000000000093E aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000946 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000950 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000956 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000967 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000970 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000978 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:000000000000097E aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000984 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000984                                         ; LOAD:0000000000000760↑o
LOAD:000000000000098A aMemchr         db 'memchr',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000991 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000991                                         ; DATA XREF: LOAD:0000000000000868↑o
LOAD:00000000000009A9 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009B7 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000009B7                                         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:00000000000009CE aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000538↑o
LOAD:00000000000009DC aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009E3 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000009EA aFreadUnlocked  db 'fread_unlocked',0   ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:00000000000009F9 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A00 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000A11 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000A18 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A26 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000A2D aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000A33 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A3A aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000A41 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000A48 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A50 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000A5C aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000A6A aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000A71 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000A7C aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000A83 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A8F aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A96 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A9D aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000AA8 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000AAF aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000AAF                                         ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000ACD aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000ADC aMemmove        db 'memmove',0          ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000AE4 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000AE4                                         ; LOAD:00000000000003B8↑o
LOAD:0000000000000AF3 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000B03 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000B0A aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000B0A                                         ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000B1C aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B23 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000B2E aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000B2E                                         ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000B41 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000B50 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B55 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B60 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000B70 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000B7D aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C90↓o
LOAD:0000000000000B87 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000CA0↓o
LOAD:0000000000000B93 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000CB0↓o
LOAD:0000000000000B9E aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000CC0↓o
LOAD:0000000000000BA8 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000CD0↓o
LOAD:0000000000000BB4 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000BB4                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000BD0 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000BDF aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000BDF                                         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000BF9                 align 2
LOAD:0000000000000BFA ; ELF GNU Symbol Version Table
LOAD:0000000000000BFA                 dw 0
LOAD:0000000000000BFC                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000C00                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000C02                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000C04                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000C06                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000C08                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000C0A                 dw 2                    ; fread_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C0C                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000C0E                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000C10                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000C12                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000C14                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000C16                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000C18                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000C1A                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000C1C                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000C1E                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000C20                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000C22                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000C24                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000C26                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000C28                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000C2A                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000C2C                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000C2E                 dw 2                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000000C30                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000C32                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000C34                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C36                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000C38                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000C3A                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000C3C                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000C3E                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000C40                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000C42                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000C44                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000C46                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000C48                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C4A                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000C4C                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000C4E                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000C50                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000C52                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000C54                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000C56                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000C58                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000C5A                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000C5C                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000C5E                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C60                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000C62                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000C64                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000C66                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000C68                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000C6A                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000C6C                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000C6E                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000C70                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000C72                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C74                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C76                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C78                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C7A                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000C7C                 dw 0
LOAD:0000000000000C7E                 dw 0
LOAD:0000000000000C80 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C80                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8F8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C90                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8F8, \ ; "GLIBC_2.3"
LOAD:0000000000000C90                                10h>
LOAD:0000000000000CA0                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8F8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000CA0                                10h>
LOAD:0000000000000CB0                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8F8, \ ; "GLIBC_2.14"
LOAD:0000000000000CB0                                10h>
LOAD:0000000000000CC0                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8F8, \ ; "GLIBC_2.4"
LOAD:0000000000000CC0                                10h>
LOAD:0000000000000CD0                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8F8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000CE0 ; ELF RELA Relocation Table
LOAD:0000000000000CE0                 Elf64_Rela <208B10h, 8, 2100h> ; R_X86_64_RELATIVE +2100h
LOAD:0000000000000CF8                 Elf64_Rela <208B18h, 8, 20C0h> ; R_X86_64_RELATIVE +20C0h
LOAD:0000000000000D10                 Elf64_Rela <208B20h, 8, 5DFBh> ; R_X86_64_RELATIVE +5DFBh
LOAD:0000000000000D28                 Elf64_Rela <208B40h, 8, 5E02h> ; R_X86_64_RELATIVE +5E02h
LOAD:0000000000000D40                 Elf64_Rela <208B60h, 8, 5E07h> ; R_X86_64_RELATIVE +5E07h
LOAD:0000000000000D58                 Elf64_Rela <208B80h, 8, 5E16h> ; R_X86_64_RELATIVE +5E16h
LOAD:0000000000000D70                 Elf64_Rela <208BA0h, 8, 5E1Bh> ; R_X86_64_RELATIVE +5E1Bh
LOAD:0000000000000D88                 Elf64_Rela <208BE0h, 8, 63C1h> ; R_X86_64_RELATIVE +63C1h
LOAD:0000000000000DA0                 Elf64_Rela <208BE8h, 8, 63C9h> ; R_X86_64_RELATIVE +63C9h
LOAD:0000000000000DB8                 Elf64_Rela <208BF0h, 8, 63CFh> ; R_X86_64_RELATIVE +63CFh
LOAD:0000000000000DD0                 Elf64_Rela <208BF8h, 8, 63DCh> ; R_X86_64_RELATIVE +63DCh
LOAD:0000000000000DE8                 Elf64_Rela <208C00h, 8, 63E9h> ; R_X86_64_RELATIVE +63E9h
LOAD:0000000000000E00                 Elf64_Rela <208C08h, 8, 63FDh> ; R_X86_64_RELATIVE +63FDh
LOAD:0000000000000E18                 Elf64_Rela <208C10h, 8, 63FFh> ; R_X86_64_RELATIVE +63FFh
LOAD:0000000000000E30                 Elf64_Rela <208C18h, 8, 63E2h> ; R_X86_64_RELATIVE +63E2h
LOAD:0000000000000E48                 Elf64_Rela <208C20h, 8, 5D7Dh> ; R_X86_64_RELATIVE +5D7Dh
LOAD:0000000000000E60                 Elf64_Rela <208C28h, 8, 6407h> ; R_X86_64_RELATIVE +6407h
LOAD:0000000000000E78                 Elf64_Rela <209008h, 8, 209008h> ; R_X86_64_RELATIVE +209008h
LOAD:0000000000000E90                 Elf64_Rela <209010h, 8, 6233h> ; R_X86_64_RELATIVE +6233h
LOAD:0000000000000EA8                 Elf64_Rela <209060h, 8, 209070h> ; R_X86_64_RELATIVE +209070h
LOAD:0000000000000EC0                 Elf64_Rela <209078h, 8, 209100h> ; R_X86_64_RELATIVE +209100h
LOAD:0000000000000ED8                 Elf64_Rela <208FD0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000EF0                 Elf64_Rela <208FD8h, 1B00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000F08                 Elf64_Rela <208FE0h, 2000000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000F20                 Elf64_Rela <208FE8h, 3300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000F38                 Elf64_Rela <208FF0h, 3600000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000F50                 Elf64_Rela <209080h, 3900000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000F68                 Elf64_Rela <209088h, 3800000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000F80                 Elf64_Rela <209090h, 3A00000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000000F98                 Elf64_Rela <209098h, 3F00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000FB0                 Elf64_Rela <2090A0h, 4000000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000FC8                 Elf64_Rela <2090A8h, 3C00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000FE0                 Elf64_Rela <2090C0h, 3E00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000FF8 ; ELF JMPREL Relocation Table
LOAD:0000000000000FF8                 Elf64_Rela <208E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001010                 Elf64_Rela <208E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001028                 Elf64_Rela <208E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001040                 Elf64_Rela <208E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001058                 Elf64_Rela <208E60h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001070                 Elf64_Rela <208E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001088                 Elf64_Rela <208E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT fread_unlocked
LOAD:00000000000010A0                 Elf64_Rela <208E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000010B8                 Elf64_Rela <208E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000010D0                 Elf64_Rela <208E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000010E8                 Elf64_Rela <208E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001100                 Elf64_Rela <208E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001118                 Elf64_Rela <208EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001130                 Elf64_Rela <208EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001148                 Elf64_Rela <208EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001160                 Elf64_Rela <208EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001178                 Elf64_Rela <208EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001190                 Elf64_Rela <208EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000011A8                 Elf64_Rela <208ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000011C0                 Elf64_Rela <208ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000011D8                 Elf64_Rela <208EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000011F0                 Elf64_Rela <208EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000001208                 Elf64_Rela <208EF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001220                 Elf64_Rela <208EF8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:0000000000001238                 Elf64_Rela <208F00h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:0000000000001250                 Elf64_Rela <208F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001268                 Elf64_Rela <208F10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001280                 Elf64_Rela <208F18h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001298                 Elf64_Rela <208F20h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000012B0                 Elf64_Rela <208F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000012C8                 Elf64_Rela <208F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000012E0                 Elf64_Rela <208F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000012F8                 Elf64_Rela <208F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001310                 Elf64_Rela <208F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001328                 Elf64_Rela <208F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001340                 Elf64_Rela <208F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001358                 Elf64_Rela <208F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001370                 Elf64_Rela <208F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001388                 Elf64_Rela <208F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000013A0                 Elf64_Rela <208F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:00000000000013B8                 Elf64_Rela <208F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000013D0                 Elf64_Rela <208F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000013E8                 Elf64_Rela <208F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001400                 Elf64_Rela <208F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001418                 Elf64_Rela <208FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001430                 Elf64_Rela <208FA8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001448                 Elf64_Rela <208FB0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001460                 Elf64_Rela <208FB8h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001478                 Elf64_Rela <208FC0h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001490                 Elf64_Rela <208FC8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001490 LOAD            ends
LOAD:0000000000001490
.init:00000000000014A8 ; ===========================================================================
.init:00000000000014A8
.init:00000000000014A8 ; Segment type: Pure code
.init:00000000000014A8 ; Segment permissions: Read/Execute
.init:00000000000014A8 _init           segment dword public 'CODE' use64
.init:00000000000014A8                 assume cs:_init
.init:00000000000014A8                 ;org 14A8h
.init:00000000000014A8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000014A8
.init:00000000000014A8 ; =============== S U B R O U T I N E =======================================
.init:00000000000014A8
.init:00000000000014A8
.init:00000000000014A8                 public _init_proc
.init:00000000000014A8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000014A8                 sub     rsp, 8          ; _init
.init:00000000000014AC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000014B3                 test    rax, rax
.init:00000000000014B6                 jz      short loc_14BA
.init:00000000000014B8                 call    rax ; __gmon_start__
.init:00000000000014BA
.init:00000000000014BA loc_14BA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000014BA                 add     rsp, 8
.init:00000000000014BE                 retn
.init:00000000000014BE _init_proc      endp
.init:00000000000014BE
.init:00000000000014BE _init           ends
.init:00000000000014BE
LOAD:00000000000014BF ; ===========================================================================
LOAD:00000000000014BF
LOAD:00000000000014BF ; Segment type: Pure code
LOAD:00000000000014BF ; Segment permissions: Read/Execute
LOAD:00000000000014BF LOAD            segment byte public 'CODE' use64
LOAD:00000000000014BF                 assume cs:LOAD
LOAD:00000000000014BF                 ;org 14BFh
LOAD:00000000000014BF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000014BF                 align 20h
LOAD:00000000000014BF LOAD            ends
LOAD:00000000000014BF
.plt:00000000000014C0 ; ===========================================================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Segment type: Pure code
.plt:00000000000014C0 ; Segment permissions: Read/Execute
.plt:00000000000014C0 _plt            segment para public 'CODE' use64
.plt:00000000000014C0                 assume cs:_plt
.plt:00000000000014C0                 ;org 14C0h
.plt:00000000000014C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0
.plt:00000000000014C0 sub_14C0        proc near               ; CODE XREF: .plt:00000000000014DB↓j
.plt:00000000000014C0                                         ; .plt:00000000000014EB↓j ...
.plt:00000000000014C0 ; __unwind {
.plt:00000000000014C0                 push    cs:qword_208E30
.plt:00000000000014C6                 jmp     cs:qword_208E38
.plt:00000000000014C6 sub_14C0        endp
.plt:00000000000014C6
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014CC                 align 10h
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; void free(void *ptr)
.plt:00000000000014D0 _free           proc near               ; CODE XREF: base32_decode_alloc_ctx+A7↓p
.plt:00000000000014D0                                         ; quotearg_n_options+115↓p ...
.plt:00000000000014D0                 jmp     cs:free_ptr
.plt:00000000000014D0 _free           endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    0
.plt:00000000000014DB                 jmp     sub_14C0
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: noreturn thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; void __noreturn abort(void)
.plt:00000000000014E0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000014E0                                         ; quotearg_buffer_restyled:def_3021↓p ...
.plt:00000000000014E0                 jmp     cs:abort_ptr
.plt:00000000000014E0 _abort          endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    1
.plt:00000000000014EB                 jmp     sub_14C0
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; int *__errno_location(void)
.plt:00000000000014F0 ___errno_location proc near             ; CODE XREF: main+1B2↓p
.plt:00000000000014F0                                         ; main+4B9↓p ...
.plt:00000000000014F0                 jmp     cs:__errno_location_ptr
.plt:00000000000014F0 ___errno_location endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    2
.plt:00000000000014FB                 jmp     sub_14C0
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001500 _strncmp        proc near               ; CODE XREF: usage+29C↓p
.plt:0000000000001500                                         ; usage+35D↓p
.plt:0000000000001500                 jmp     cs:strncmp_ptr
.plt:0000000000001500 _strncmp        endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    3
.plt:000000000000150B                 jmp     sub_14C0
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: noreturn thunk
.plt:0000000000001510
.plt:0000000000001510 ; void __noreturn _exit(int status)
.plt:0000000000001510 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001510                 jmp     cs:_exit_ptr
.plt:0000000000001510 __exit          endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    4
.plt:000000000000151B                 jmp     sub_14C0
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; size_t __fpending(FILE *fp)
.plt:0000000000001520 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001520                 jmp     cs:__fpending_ptr
.plt:0000000000001520 ___fpending     endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    5
.plt:000000000000152B                 jmp     sub_14C0
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001530 _fread_unlocked proc near               ; CODE XREF: main+297↓p
.plt:0000000000001530                                         ; main+450↓p
.plt:0000000000001530                 jmp     cs:fread_unlocked_ptr
.plt:0000000000001530 _fread_unlocked endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    6
.plt:000000000000153B                 jmp     sub_14C0
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; char *textdomain(const char *domainname)
.plt:0000000000001540 _textdomain     proc near               ; CODE XREF: main+5E↓p
.plt:0000000000001540                 jmp     cs:textdomain_ptr
.plt:0000000000001540 _textdomain     endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    7
.plt:000000000000154B                 jmp     sub_14C0
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; int fclose(FILE *stream)
.plt:0000000000001550 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001550                                         ; rpl_fclose+6B↓j
.plt:0000000000001550                 jmp     cs:fclose_ptr
.plt:0000000000001550 _fclose         endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    8
.plt:000000000000155B                 jmp     sub_14C0
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001560 _bindtextdomain proc near               ; CODE XREF: main+52↓p
.plt:0000000000001560                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001560 _bindtextdomain endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    9
.plt:000000000000156B                 jmp     sub_14C0
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001570 _dcgettext      proc near               ; CODE XREF: main+BC↓p
.plt:0000000000001570                                         ; main+4B1↓p ...
.plt:0000000000001570                 jmp     cs:dcgettext_ptr
.plt:0000000000001570 _dcgettext      endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    0Ah
.plt:000000000000157B                 jmp     sub_14C0
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001580 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001580                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001580 ___ctype_get_mb_cur_max endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    0Bh
.plt:000000000000158B                 jmp     sub_14C0
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; size_t strlen(const char *s)
.plt:0000000000001590 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001590                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001590                 jmp     cs:strlen_ptr
.plt:0000000000001590 _strlen         endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    0Ch
.plt:000000000000159B                 jmp     sub_14C0
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: noreturn thunk
.plt:00000000000015A0
.plt:00000000000015A0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_1F3D↓p
.plt:00000000000015A0                                         ; base32_decode_ctx:loc_2C29↓p ...
.plt:00000000000015A0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000015A0 ___stack_chk_fail endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    0Dh
.plt:00000000000015AB                 jmp     sub_14C0
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000015B0 _getopt_long    proc near               ; CODE XREF: main+8B↓p
.plt:00000000000015B0                 jmp     cs:getopt_long_ptr
.plt:00000000000015B0 _getopt_long    endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    0Eh
.plt:00000000000015BB                 jmp     sub_14C0
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000015C0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000015C0                 jmp     cs:mbrtowc_ptr
.plt:00000000000015C0 _mbrtowc        endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    0Fh
.plt:00000000000015CB                 jmp     sub_14C0
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; char *strchr(const char *s, int c)
.plt:00000000000015D0 _strchr         proc near               ; CODE XREF: xstrtoumax+123↓p
.plt:00000000000015D0                                         ; xstrtoumax+143↓p ...
.plt:00000000000015D0                 jmp     cs:strchr_ptr
.plt:00000000000015D0 _strchr         endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    10h
.plt:00000000000015DB                 jmp     sub_14C0
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000015E0 ___overflow     proc near               ; CODE XREF: main+61B↓p
.plt:00000000000015E0                                         ; main+7BF↓p
.plt:00000000000015E0                 jmp     cs:__overflow_ptr
.plt:00000000000015E0 ___overflow     endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    11h
.plt:00000000000015EB                 jmp     sub_14C0
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; char *strrchr(const char *s, int c)
.plt:00000000000015F0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000015F0                 jmp     cs:strrchr_ptr
.plt:00000000000015F0 _strrchr        endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    12h
.plt:00000000000015FB                 jmp     sub_14C0
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001600 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001600                                         ; rpl_fseeko+3B↓p
.plt:0000000000001600                 jmp     cs:lseek_ptr
.plt:0000000000001600 _lseek          endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    13h
.plt:000000000000160B                 jmp     sub_14C0
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: noreturn thunk
.plt:0000000000001610
.plt:0000000000001610 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001610 ___assert_fail  proc near               ; CODE XREF: xstrtoumax+39F↓p
.plt:0000000000001610                 jmp     cs:__assert_fail_ptr
.plt:0000000000001610 ___assert_fail  endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    14h
.plt:000000000000161B                 jmp     sub_14C0
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001620 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001620                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001620 ___strtoul_internal endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    15h
.plt:000000000000162B                 jmp     sub_14C0
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001630 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001630                                         ; xzalloc+12↓j
.plt:0000000000001630                 jmp     cs:memset_ptr
.plt:0000000000001630 _memset         endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    16h
.plt:000000000000163B                 jmp     sub_14C0
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001640 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000001640                                         ; fadvise+16↓j
.plt:0000000000001640                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001640 _posix_fadvise  endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    17h
.plt:000000000000164B                 jmp     sub_14C0
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000001650 _memchr         proc near               ; CODE XREF: base32_decode_ctx+20A↓p
.plt:0000000000001650                 jmp     cs:memchr_ptr
.plt:0000000000001650 _memchr         endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    18h
.plt:000000000000165B                 jmp     sub_14C0
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001660 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001660                 jmp     cs:memcmp_ptr
.plt:0000000000001660 _memcmp         endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    19h
.plt:000000000000166B                 jmp     sub_14C0
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001670 _fputs_unlocked proc near               ; CODE XREF: usage+C4↓p
.plt:0000000000001670                                         ; usage+E9↓p ...
.plt:0000000000001670                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001670 _fputs_unlocked endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    1Ah
.plt:000000000000167B                 jmp     sub_14C0
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001680 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001680                 jmp     cs:calloc_ptr
.plt:0000000000001680 _calloc         endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    1Bh
.plt:000000000000168B                 jmp     sub_14C0
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001690 _strcmp         proc near               ; CODE XREF: main+17C↓p
.plt:0000000000001690                                         ; main+661↓p
.plt:0000000000001690                 jmp     cs:strcmp_ptr
.plt:0000000000001690 _strcmp         endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    1Ch
.plt:000000000000169B                 jmp     sub_14C0
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000016A0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000016A0                 jmp     cs:memcpy_ptr
.plt:00000000000016A0 _memcpy         endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    1Dh
.plt:00000000000016AB                 jmp     sub_14C0
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; int fileno(FILE *stream)
.plt:00000000000016B0 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:00000000000016B0                                         ; rpl_fclose+7↓p ...
.plt:00000000000016B0                 jmp     cs:fileno_ptr
.plt:00000000000016B0 _fileno         endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    1Eh
.plt:00000000000016BB                 jmp     sub_14C0
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; void *malloc(size_t size)
.plt:00000000000016C0 _malloc         proc near               ; CODE XREF: base32_encode_alloc+59↓p
.plt:00000000000016C0                                         ; base32_decode_alloc_ctx+3C↓p ...
.plt:00000000000016C0                 jmp     cs:malloc_ptr
.plt:00000000000016C0 _malloc         endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    1Fh
.plt:00000000000016CB                 jmp     sub_14C0
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; int fflush(FILE *stream)
.plt:00000000000016D0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000016D0                                         ; rpl_fflush+3B↓j
.plt:00000000000016D0                 jmp     cs:fflush_ptr
.plt:00000000000016D0 _fflush         endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    20h ; ' '
.plt:00000000000016DB                 jmp     sub_14C0
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; char *nl_langinfo(nl_item item)
.plt:00000000000016E0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000016E0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000016E0 _nl_langinfo    endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    21h ; '!'
.plt:00000000000016EB                 jmp     sub_14C0
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; int __freading(FILE *fp)
.plt:00000000000016F0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000016F0                                         ; rpl_fflush+9↓p
.plt:00000000000016F0                 jmp     cs:__freading_ptr
.plt:00000000000016F0 ___freading     endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    22h ; '"'
.plt:00000000000016FB                 jmp     sub_14C0
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001700 _fwrite_unlocked proc near              ; CODE XREF: main+37F↓p
.plt:0000000000001700                                         ; main+583↓p ...
.plt:0000000000001700                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001700 _fwrite_unlocked endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    23h ; '#'
.plt:000000000000170B                 jmp     sub_14C0
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001710 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001710                 jmp     cs:realloc_ptr
.plt:0000000000001710 _realloc        endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    24h ; '$'
.plt:000000000000171B                 jmp     sub_14C0
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; char *setlocale(int category, const char *locale)
.plt:0000000000001720 _setlocale      proc near               ; CODE XREF: main+3F↓p
.plt:0000000000001720                                         ; usage+283↓p ...
.plt:0000000000001720                 jmp     cs:setlocale_ptr
.plt:0000000000001720 _setlocale      endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    25h ; '%'
.plt:000000000000172B                 jmp     sub_14C0
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001730                                         ; usage+9F↓p ...
.plt:0000000000001730                 jmp     cs:__printf_chk_ptr
.plt:0000000000001730 ___printf_chk   endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    26h ; '&'
.plt:000000000000173B                 jmp     sub_14C0
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001740 _memmove        proc near               ; CODE XREF: main+30C↓p
.plt:0000000000001740                 jmp     cs:memmove_ptr
.plt:0000000000001740 _memmove        endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    27h ; '''
.plt:000000000000174B                 jmp     sub_14C0
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001750 _error          proc near               ; CODE XREF: main+1CA↓p
.plt:0000000000001750                                         ; main+4CA↓p ...
.plt:0000000000001750                 jmp     cs:error_ptr
.plt:0000000000001750 _error          endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    28h ; '('
.plt:000000000000175B                 jmp     sub_14C0
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001760 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_59FA↓j
.plt:0000000000001760                 jmp     cs:fseeko_ptr
.plt:0000000000001760 _fseeko         endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    29h ; ')'
.plt:000000000000176B                 jmp     sub_14C0
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001770 _fopen          proc near               ; CODE XREF: main+191↓p
.plt:0000000000001770                 jmp     cs:fopen_ptr
.plt:0000000000001770 _fopen          endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    2Ah ; '*'
.plt:000000000000177B                 jmp     sub_14C0
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001780 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001780                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001780 ___cxa_atexit   endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    2Bh ; '+'
.plt:000000000000178B                 jmp     sub_14C0
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: noreturn thunk
.plt:0000000000001790
.plt:0000000000001790 ; void __noreturn exit(int status)
.plt:0000000000001790 _exit           proc near               ; CODE XREF: main+14A↓p
.plt:0000000000001790                                         ; usage+58↓p
.plt:0000000000001790                 jmp     cs:exit_ptr
.plt:0000000000001790 _exit           endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    2Ch ; ','
.plt:000000000000179B                 jmp     sub_14C0
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000017A0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000017A0                 jmp     cs:fwrite_ptr
.plt:00000000000017A0 _fwrite         endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    2Dh ; '-'
.plt:00000000000017AB                 jmp     sub_14C0
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000017B0                                         ; version_etc_arn+37↓p ...
.plt:00000000000017B0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000017B0 ___fprintf_chk  endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    2Eh ; '.'
.plt:00000000000017BB                 jmp     sub_14C0
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000017C0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000017C0                 jmp     cs:mbsinit_ptr
.plt:00000000000017C0 _mbsinit        endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    2Fh ; '/'
.plt:00000000000017CB                 jmp     sub_14C0
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; int iswprint(wint_t wc)
.plt:00000000000017D0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000017D0                 jmp     cs:iswprint_ptr
.plt:00000000000017D0 _iswprint       endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    30h ; '0'
.plt:00000000000017DB                 jmp     sub_14C0
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000017E0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000017E0                                         ; xstrtoumax+55↓p
.plt:00000000000017E0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000017E0 ___ctype_b_loc  endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    31h ; '1'
.plt:00000000000017EB                 jmp     sub_14C0
.plt:00000000000017EB ; } // starts at 14C0
.plt:00000000000017EB _plt            ends
.plt:00000000000017EB
.plt.got:00000000000017F0 ; ===========================================================================
.plt.got:00000000000017F0
.plt.got:00000000000017F0 ; Segment type: Pure code
.plt.got:00000000000017F0 ; Segment permissions: Read/Execute
.plt.got:00000000000017F0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000017F0                 assume cs:_plt_got
.plt.got:00000000000017F0                 ;org 17F0h
.plt.got:00000000000017F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000017F0
.plt.got:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000017F0
.plt.got:00000000000017F0 ; Attributes: thunk
.plt.got:00000000000017F0
.plt.got:00000000000017F0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000017F0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000017F0 ; __unwind {
.plt.got:00000000000017F0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000017F0 __cxa_finalize  endp
.plt.got:00000000000017F0
.plt.got:00000000000017F0 ; ---------------------------------------------------------------------------
.plt.got:00000000000017F6                 align 8
.plt.got:00000000000017F6 ; } // starts at 17F0
.plt.got:00000000000017F6 _plt_got        ends
.plt.got:00000000000017F6
LOAD:00000000000017F8 ; ===========================================================================
LOAD:00000000000017F8
LOAD:00000000000017F8 ; Segment type: Pure code
LOAD:00000000000017F8 ; Segment permissions: Read/Execute
LOAD:00000000000017F8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000017F8                 assume cs:LOAD
LOAD:00000000000017F8                 ;org 17F8h
LOAD:00000000000017F8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000017F8                 align 20h
LOAD:00000000000017F8 LOAD            ends
LOAD:00000000000017F8
.text:0000000000001800 ; ===========================================================================
.text:0000000000001800
.text:0000000000001800 ; Segment type: Pure code
.text:0000000000001800 ; Segment permissions: Read/Execute
.text:0000000000001800 _text           segment para public 'CODE' use64
.text:0000000000001800                 assume cs:_text
.text:0000000000001800                 ;org 1800h
.text:0000000000001800                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001800
.text:0000000000001800 ; =============== S U B R O U T I N E =======================================
.text:0000000000001800
.text:0000000000001800
.text:0000000000001800 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001800                 public main
.text:0000000000001800 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001800
.text:0000000000001800 var_A0          = qword ptr -0A0h
.text:0000000000001800 stream          = qword ptr -98h
.text:0000000000001800 var_90          = qword ptr -90h
.text:0000000000001800 var_88          = qword ptr -88h
.text:0000000000001800 var_80          = qword ptr -80h
.text:0000000000001800 var_78          = qword ptr -78h
.text:0000000000001800 var_70          = qword ptr -70h
.text:0000000000001800 ptr             = qword ptr -68h
.text:0000000000001800 filename        = qword ptr -60h
.text:0000000000001800 n               = qword ptr -58h
.text:0000000000001800 var_4C          = dword ptr -4Ch
.text:0000000000001800 var_40          = qword ptr -40h
.text:0000000000001800
.text:0000000000001800 ; __unwind {
.text:0000000000001800                 push    r15
.text:0000000000001802                 push    r14
.text:0000000000001804                 push    r13
.text:0000000000001806                 push    r12
.text:0000000000001808                 mov     r13d, edi
.text:000000000000180B                 push    rbp
.text:000000000000180C                 push    rbx
.text:000000000000180D                 mov     r12, rsi
.text:0000000000001810                 mov     ebp, 4Ch ; 'L'
.text:0000000000001815                 xor     ebx, ebx
.text:0000000000001817                 sub     rsp, 78h
.text:000000000000181B                 mov     rdi, [rsi]
.text:000000000000181E                 mov     rax, fs:28h
.text:0000000000001827                 mov     [rsp+0A8h+var_40], rax
.text:000000000000182C                 xor     eax, eax
.text:000000000000182E                 call    set_program_name
.text:0000000000001833                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:000000000000183A                 mov     edi, 6          ; category
.text:000000000000183F                 call    _setlocale
.text:0000000000001844                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000184B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001852                 call    _bindtextdomain
.text:0000000000001857                 lea     rdi, domainname ; "coreutils"
.text:000000000000185E                 call    _textdomain
.text:0000000000001863                 lea     rdi, close_stdout
.text:000000000000186A                 call    atexit
.text:000000000000186F                 mov     byte ptr [rsp+0A8h+var_78], 0
.text:0000000000001874
.text:0000000000001874 loc_1874:                               ; CODE XREF: main+E6↓j
.text:0000000000001874                                         ; main+F5↓j ...
.text:0000000000001874                 lea     rcx, long_options ; longopts
.text:000000000000187B                 lea     rdx, shortopts  ; "diw:"
.text:0000000000001882                 xor     r8d, r8d        ; longind
.text:0000000000001885                 mov     rsi, r12        ; argv
.text:0000000000001888                 mov     edi, r13d       ; argc
.text:000000000000188B                 call    _getopt_long
.text:0000000000001890                 cmp     eax, 0FFFFFFFFh
.text:0000000000001893                 jz      loc_194F
.text:0000000000001899                 cmp     eax, 64h ; 'd'
.text:000000000000189C                 jz      short loc_18F0
.text:000000000000189E                 jle     short loc_1910
.text:00000000000018A0                 cmp     eax, 69h ; 'i'
.text:00000000000018A3                 jz      short loc_1900
.text:00000000000018A5                 cmp     eax, 77h ; 'w'
.text:00000000000018A8                 jnz     loc_1FAD
.text:00000000000018AE                 lea     rsi, msgid      ; "invalid wrap size"
.text:00000000000018B5                 mov     edx, 5          ; category
.text:00000000000018BA                 xor     edi, edi        ; domainname
.text:00000000000018BC                 call    _dcgettext
.text:00000000000018C1                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000018C8                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000018CF                 mov     r8, rax
.text:00000000000018D2                 xor     r9d, r9d
.text:00000000000018D5                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000018DC                 xor     esi, esi
.text:00000000000018DE                 call    xdectoumax
.text:00000000000018E3                 mov     rbp, rax
.text:00000000000018E6                 jmp     short loc_1874
.text:00000000000018E6 ; ---------------------------------------------------------------------------
.text:00000000000018E8                 align 10h
.text:00000000000018F0
.text:00000000000018F0 loc_18F0:                               ; CODE XREF: main+9C↑j
.text:00000000000018F0                 mov     ebx, 1
.text:00000000000018F5                 jmp     loc_1874
.text:00000000000018F5 ; ---------------------------------------------------------------------------
.text:00000000000018FA                 align 20h
.text:0000000000001900
.text:0000000000001900 loc_1900:                               ; CODE XREF: main+A3↑j
.text:0000000000001900                 mov     byte ptr [rsp+0A8h+var_78], 1
.text:0000000000001905                 jmp     loc_1874
.text:0000000000001905 ; ---------------------------------------------------------------------------
.text:000000000000190A                 align 10h
.text:0000000000001910
.text:0000000000001910 loc_1910:                               ; CODE XREF: main+9E↑j
.text:0000000000001910                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001915                 jnz     loc_1F6E
.text:000000000000191B                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001922                 mov     rcx, cs:Version
.text:0000000000001929                 lea     r8, aSimonJosefsson ; "Simon Josefsson"
.text:0000000000001930                 lea     rdx, unk_5D3F
.text:0000000000001937                 lea     rsi, aBase32    ; "base32"
.text:000000000000193E                 xor     r9d, r9d
.text:0000000000001941                 xor     eax, eax
.text:0000000000001943                 call    version_etc
.text:0000000000001948                 xor     edi, edi        ; status
.text:000000000000194A                 call    _exit
.text:000000000000194F ; ---------------------------------------------------------------------------
.text:000000000000194F
.text:000000000000194F loc_194F:                               ; CODE XREF: main+93↑j
.text:000000000000194F                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001956                 mov     edx, r13d
.text:0000000000001959                 sub     edx, eax
.text:000000000000195B                 sub     edx, 1
.text:000000000000195E                 jg      loc_1F7C
.text:0000000000001964                 cmp     eax, r13d
.text:0000000000001967                 jge     short loc_19CF
.text:0000000000001969                 mov     rax, [r12+rax*8]
.text:000000000000196D                 lea     rsi, aLt+2      ; s2
.text:0000000000001974                 mov     rdi, rax        ; s1
.text:0000000000001977                 mov     [rsp+0A8h+filename], rax
.text:000000000000197C                 call    _strcmp
.text:0000000000001981                 test    eax, eax
.text:0000000000001983                 jz      short loc_19DB
.text:0000000000001985                 mov     rdi, [rsp+0A8h+filename] ; filename
.text:000000000000198A                 lea     rsi, modes      ; "rb"
.text:0000000000001991                 call    _fopen
.text:0000000000001996                 test    rax, rax
.text:0000000000001999                 mov     r12, rax
.text:000000000000199C                 jnz     short loc_19E2
.text:000000000000199E                 mov     rdx, [rsp+0A8h+filename]
.text:00000000000019A3                 mov     esi, 3
.text:00000000000019A8                 xor     edi, edi
.text:00000000000019AA                 call    quotearg_n_style_colon
.text:00000000000019AF                 mov     rbx, rax
.text:00000000000019B2                 call    ___errno_location
.text:00000000000019B7                 mov     esi, [rax]      ; errnum
.text:00000000000019B9                 lea     rdx, format     ; format
.text:00000000000019C0                 mov     rcx, rbx
.text:00000000000019C3                 mov     edi, 1          ; status
.text:00000000000019C8                 xor     eax, eax
.text:00000000000019CA                 call    _error
.text:00000000000019CF
.text:00000000000019CF loc_19CF:                               ; CODE XREF: main+167↑j
.text:00000000000019CF                 lea     rax, aLt+2      ; "-"
.text:00000000000019D6                 mov     [rsp+0A8h+filename], rax
.text:00000000000019DB
.text:00000000000019DB loc_19DB:                               ; CODE XREF: main+183↑j
.text:00000000000019DB                 mov     r12, cs:stdin@@GLIBC_2_2_5
.text:00000000000019E2
.text:00000000000019E2 loc_19E2:                               ; CODE XREF: main+19C↑j
.text:00000000000019E2                 mov     esi, 2
.text:00000000000019E7                 mov     rdi, r12
.text:00000000000019EA                 call    fadvise
.text:00000000000019EF                 test    bl, bl
.text:00000000000019F1                 mov     rax, cs:stdout@@GLIBC_2_2_5
.text:00000000000019F8                 jz      loc_1BF8
.text:00000000000019FE                 mov     edi, 2000h
.text:0000000000001A03                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001A08                 call    xmalloc
.text:0000000000001A0D                 mov     edi, 1400h
.text:0000000000001A12                 mov     rbp, rax
.text:0000000000001A15                 call    xmalloc
.text:0000000000001A1A                 mov     [rsp+0A8h+ptr], rax
.text:0000000000001A1F                 lea     rax, [rsp+0A8h+var_4C]
.text:0000000000001A24                 mov     rdi, rax
.text:0000000000001A27                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001A2C                 call    base32_decode_ctx_init
.text:0000000000001A31                 lea     rax, [rsp+0A8h+n]
.text:0000000000001A36                 mov     [rsp+0A8h+stream], r12
.text:0000000000001A3B                 mov     [rsp+0A8h+var_A0], rbp
.text:0000000000001A40                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001A45                 nop     dword ptr [rax]
.text:0000000000001A48
.text:0000000000001A48 loc_1A48:                               ; CODE XREF: main+343↓j
.text:0000000000001A48                 xor     ebx, ebx
.text:0000000000001A4A                 jmp     short loc_1A7C
.text:0000000000001A4A ; ---------------------------------------------------------------------------
.text:0000000000001A4C                 align 10h
.text:0000000000001A50
.text:0000000000001A50 loc_1A50:                               ; CODE XREF: main+2A9↓j
.text:0000000000001A50                                         ; main+2B1↓j ...
.text:0000000000001A50                 mov     rax, [rsp+0A8h+stream]
.text:0000000000001A55                 add     rbx, r12
.text:0000000000001A58                 mov     eax, [rax]
.text:0000000000001A5A                 test    al, 20h
.text:0000000000001A5C                 jnz     loc_1F11
.text:0000000000001A62                 mov     edx, eax
.text:0000000000001A64                 and     edx, 10h
.text:0000000000001A67                 cmp     rbx, 1FFFh
.text:0000000000001A6E                 ja      loc_1B18
.text:0000000000001A74                 test    edx, edx
.text:0000000000001A76                 jnz     loc_1B18
.text:0000000000001A7C
.text:0000000000001A7C loc_1A7C:                               ; CODE XREF: main+24A↑j
.text:0000000000001A7C                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000001A81                 mov     rcx, [rsp+0A8h+stream] ; stream
.text:0000000000001A86                 mov     edx, 2000h
.text:0000000000001A8B                 sub     rdx, rbx        ; n
.text:0000000000001A8E                 mov     esi, 1          ; size
.text:0000000000001A93                 lea     rdi, [rax+rbx]  ; ptr
.text:0000000000001A97                 call    _fread_unlocked
.text:0000000000001A9C                 cmp     byte ptr [rsp+0A8h+var_78], 0
.text:0000000000001AA1                 mov     r12, rax
.text:0000000000001AA4                 mov     [rsp+0A8h+n], rax
.text:0000000000001AA9                 jz      short loc_1A50
.text:0000000000001AAB                 xor     r13d, r13d
.text:0000000000001AAE
.text:0000000000001AAE loc_1AAE:                               ; CODE XREF: main+311↓j
.text:0000000000001AAE                 test    r12, r12
.text:0000000000001AB1                 jz      short loc_1A50
.text:0000000000001AB3
.text:0000000000001AB3 loc_1AB3:                               ; CODE XREF: main+2E1↓j
.text:0000000000001AB3                 cmp     r13, r12
.text:0000000000001AB6                 jnb     short loc_1A50
.text:0000000000001AB8                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000001ABD                 lea     r15, [rbx+r13]
.text:0000000000001AC1                 lea     r14, [rax+r15]
.text:0000000000001AC5                 movsx   edi, byte ptr [r14]
.text:0000000000001AC9                 mov     ebp, edi
.text:0000000000001ACB                 call    isbase32
.text:0000000000001AD0                 cmp     bpl, 3Dh ; '='
.text:0000000000001AD4                 jz      short loc_1ADA
.text:0000000000001AD6                 test    al, al
.text:0000000000001AD8                 jz      short loc_1AF0
.text:0000000000001ADA
.text:0000000000001ADA loc_1ADA:                               ; CODE XREF: main+2D4↑j
.text:0000000000001ADA                 add     r13, 1
.text:0000000000001ADE                 test    r12, r12
.text:0000000000001AE1                 jnz     short loc_1AB3
.text:0000000000001AE3                 jmp     loc_1A50
.text:0000000000001AE3 ; ---------------------------------------------------------------------------
.text:0000000000001AE8                 align 10h
.text:0000000000001AF0
.text:0000000000001AF0 loc_1AF0:                               ; CODE XREF: main+2D8↑j
.text:0000000000001AF0                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000001AF5                 sub     r12, 1
.text:0000000000001AF9                 mov     rdi, r14        ; dest
.text:0000000000001AFC                 mov     rdx, r12
.text:0000000000001AFF                 mov     [rsp+0A8h+n], r12
.text:0000000000001B04                 sub     rdx, r13        ; n
.text:0000000000001B07                 lea     rsi, [rax+r15+1] ; src
.text:0000000000001B0C                 call    _memmove
.text:0000000000001B11                 jmp     short loc_1AAE
.text:0000000000001B11 ; ---------------------------------------------------------------------------
.text:0000000000001B13                 align 8
.text:0000000000001B18
.text:0000000000001B18 loc_1B18:                               ; CODE XREF: main+26E↑j
.text:0000000000001B18                                         ; main+276↑j
.text:0000000000001B18                 xor     r15d, r15d
.text:0000000000001B1B                 mov     [rsp+0A8h+var_80], rbx
.text:0000000000001B20                 mov     rbp, [rsp+0A8h+var_A0]
.text:0000000000001B25                 mov     r14d, r15d
.text:0000000000001B28                 mov     r12, [rsp+0A8h+ptr]
.text:0000000000001B2D                 mov     rbx, [rsp+0A8h+stream]
.text:0000000000001B32                 mov     r15, [rsp+0A8h+var_70]
.text:0000000000001B37                 jmp     short loc_1B9E
.text:0000000000001B37 ; ---------------------------------------------------------------------------
.text:0000000000001B39                 align 20h
.text:0000000000001B40
.text:0000000000001B40 loc_1B40:                               ; CODE XREF: main+3A0↓j
.text:0000000000001B40                 test    r14d, r14d
.text:0000000000001B43                 jnz     loc_1A48
.text:0000000000001B49
.text:0000000000001B49 loc_1B49:                               ; CODE XREF: main+3A8↓j
.text:0000000000001B49                 mov     rdx, [rsp+0A8h+var_80]
.text:0000000000001B4E                 mov     [rsp+0A8h+n], 1400h
.text:0000000000001B57
.text:0000000000001B57 loc_1B57:                               ; CODE XREF: main+3BD↓j
.text:0000000000001B57                 mov     r8, [rsp+0A8h+var_88]
.text:0000000000001B5C                 mov     rdi, [rsp+0A8h+var_90]
.text:0000000000001B61                 mov     rcx, r12
.text:0000000000001B64                 mov     rsi, rbp
.text:0000000000001B67                 call    base32_decode_ctx
.text:0000000000001B6C                 mov     rdx, [rsp+0A8h+n] ; n
.text:0000000000001B71                 mov     rcx, r15        ; stream
.text:0000000000001B74                 mov     esi, 1          ; size
.text:0000000000001B79                 mov     rdi, r12        ; ptr
.text:0000000000001B7C                 mov     r13d, eax
.text:0000000000001B7F                 call    _fwrite_unlocked
.text:0000000000001B84                 cmp     rax, [rsp+0A8h+n]
.text:0000000000001B89                 jb      loc_1EE5
.text:0000000000001B8F                 test    r13b, r13b
.text:0000000000001B92                 jz      loc_1EC1
.text:0000000000001B98                 mov     eax, [rbx]
.text:0000000000001B9A                 add     r14d, 1
.text:0000000000001B9E
.text:0000000000001B9E loc_1B9E:                               ; CODE XREF: main+337↑j
.text:0000000000001B9E                 test    al, 10h
.text:0000000000001BA0                 jz      short loc_1B40
.text:0000000000001BA2                 cmp     r14d, 1
.text:0000000000001BA6                 ja      short loc_1BBF
.text:0000000000001BA8                 jnz     short loc_1B49
.text:0000000000001BAA                 mov     eax, [rsp+0A8h+var_4C]
.text:0000000000001BAE                 test    eax, eax
.text:0000000000001BB0                 jz      short loc_1BBF
.text:0000000000001BB2                 mov     [rsp+0A8h+n], 1400h
.text:0000000000001BBB                 xor     edx, edx
.text:0000000000001BBD                 jmp     short loc_1B57
.text:0000000000001BBF ; ---------------------------------------------------------------------------
.text:0000000000001BBF
.text:0000000000001BBF loc_1BBF:                               ; CODE XREF: main+3A6↑j
.text:0000000000001BBF                                         ; main+3B0↑j
.text:0000000000001BBF                 mov     r12, rbx
.text:0000000000001BC2
.text:0000000000001BC2 loc_1BC2:                               ; CODE XREF: main+49D↓j
.text:0000000000001BC2                 mov     rdi, r12        ; stream
.text:0000000000001BC5                 call    rpl_fclose
.text:0000000000001BCA                 add     eax, 1
.text:0000000000001BCD                 jz      loc_1E55
.text:0000000000001BD3                 xor     eax, eax
.text:0000000000001BD5                 mov     rcx, [rsp+0A8h+var_40]
.text:0000000000001BDA                 xor     rcx, fs:28h
.text:0000000000001BE3                 jnz     loc_1F3D
.text:0000000000001BE9                 add     rsp, 78h
.text:0000000000001BED                 pop     rbx
.text:0000000000001BEE                 pop     rbp
.text:0000000000001BEF                 pop     r12
.text:0000000000001BF1                 pop     r13
.text:0000000000001BF3                 pop     r14
.text:0000000000001BF5                 pop     r15
.text:0000000000001BF7                 retn
.text:0000000000001BF8 ; ---------------------------------------------------------------------------
.text:0000000000001BF8
.text:0000000000001BF8 loc_1BF8:                               ; CODE XREF: main+1F8↑j
.text:0000000000001BF8                 mov     edi, 7800h
.text:0000000000001BFD                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001C02                 xor     ebx, ebx
.text:0000000000001C04                 call    xmalloc
.text:0000000000001C09                 mov     edi, 0C000h
.text:0000000000001C0E                 mov     r13, rax
.text:0000000000001C11                 mov     r14d, 7800h
.text:0000000000001C17                 call    xmalloc
.text:0000000000001C1C                 mov     [rsp+0A8h+var_A0], rbp
.text:0000000000001C21                 mov     [rsp+0A8h+stream], rax
.text:0000000000001C26
.text:0000000000001C26 loc_1C26:                               ; CODE XREF: main+5BE↓j
.text:0000000000001C26                 xor     ebp, ebp
.text:0000000000001C28                 jmp     short loc_1C3D
.text:0000000000001C28 ; ---------------------------------------------------------------------------
.text:0000000000001C2A                 align 10h
.text:0000000000001C30
.text:0000000000001C30 loc_1C30:                               ; CODE XREF: main+45E↓j
.text:0000000000001C30                 cmp     rbp, 77FFh
.text:0000000000001C37                 ja      loc_1CCF
.text:0000000000001C3D
.text:0000000000001C3D loc_1C3D:                               ; CODE XREF: main+428↑j
.text:0000000000001C3D                 lea     rdi, [r13+rbp+0] ; ptr
.text:0000000000001C42                 mov     rdx, r14
.text:0000000000001C45                 mov     rcx, r12        ; stream
.text:0000000000001C48                 sub     rdx, rbp        ; n
.text:0000000000001C4B                 mov     esi, 1          ; size
.text:0000000000001C50                 call    _fread_unlocked
.text:0000000000001C55                 add     rbp, rax
.text:0000000000001C58                 mov     eax, [r12]
.text:0000000000001C5C                 test    al, 30h
.text:0000000000001C5E                 jz      short loc_1C30
.text:0000000000001C60                 test    rbp, rbp
.text:0000000000001C63                 jnz     short loc_1CCF
.text:0000000000001C65
.text:0000000000001C65 loc_1C65:                               ; CODE XREF: main+5B1↓j
.text:0000000000001C65                                         ; main+5C4↓j
.text:0000000000001C65                 test    rbx, rbx
.text:0000000000001C68                 mov     rbp, [rsp+0A8h+var_A0]
.text:0000000000001C6D                 jz      short loc_1C9B
.text:0000000000001C6F                 test    rbp, rbp
.text:0000000000001C72                 jz      short loc_1C9B
.text:0000000000001C74                 mov     rcx, [rsp+0A8h+var_90]
.text:0000000000001C79                 mov     rax, [rcx+28h]
.text:0000000000001C7D                 cmp     rax, [rcx+30h]
.text:0000000000001C81                 jnb     loc_1FB7
.text:0000000000001C87                 mov     rcx, [rsp+0A8h+var_90]
.text:0000000000001C8C                 lea     rdx, [rax+1]
.text:0000000000001C90                 mov     [rcx+28h], rdx
.text:0000000000001C94                 mov     byte ptr [rax], 0Ah
.text:0000000000001C97
.text:0000000000001C97 loc_1C97:                               ; CODE XREF: main+7C7↓j
.text:0000000000001C97                 mov     eax, [r12]
.text:0000000000001C9B
.text:0000000000001C9B loc_1C9B:                               ; CODE XREF: main+46D↑j
.text:0000000000001C9B                                         ; main+472↑j
.text:0000000000001C9B                 test    al, 20h
.text:0000000000001C9D                 jz      loc_1BC2
.text:0000000000001CA3                 lea     rsi, aReadError ; "read error"
.text:0000000000001CAA                 mov     edx, 5          ; category
.text:0000000000001CAF                 xor     edi, edi        ; domainname
.text:0000000000001CB1                 call    _dcgettext
.text:0000000000001CB6                 mov     rbx, rax
.text:0000000000001CB9                 call    ___errno_location
.text:0000000000001CBE                 mov     esi, [rax]      ; errnum
.text:0000000000001CC0                 mov     rdx, rbx        ; format
.text:0000000000001CC3                 mov     edi, 1          ; status
.text:0000000000001CC8                 xor     eax, eax
.text:0000000000001CCA                 call    _error
.text:0000000000001CCF
.text:0000000000001CCF loc_1CCF:                               ; CODE XREF: main+437↑j
.text:0000000000001CCF                                         ; main+463↑j
.text:0000000000001CCF                 lea     rax, [rbp+4]
.text:0000000000001CD3                 mov     ecx, 5
.text:0000000000001CD8                 xor     edx, edx
.text:0000000000001CDA                 mov     rsi, rbp
.text:0000000000001CDD                 mov     rdi, r13
.text:0000000000001CE0                 div     rcx
.text:0000000000001CE3                 mov     rdx, [rsp+0A8h+stream]
.text:0000000000001CE8                 lea     r15, ds:0[rax*8]
.text:0000000000001CF0                 mov     rcx, r15
.text:0000000000001CF3                 call    base32_encode
.text:0000000000001CF8                 cmp     [rsp+0A8h+var_A0], 0
.text:0000000000001CFE                 jz      loc_1DC9
.text:0000000000001D04                 xor     r10d, r10d
.text:0000000000001D07                 test    r15, r15
.text:0000000000001D0A                 jz      loc_1DAB
.text:0000000000001D10                 mov     [rsp+0A8h+var_80], r13
.text:0000000000001D15                 mov     [rsp+0A8h+var_78], rbp
.text:0000000000001D1A                 mov     r13, rbx
.text:0000000000001D1D                 mov     rbp, r15
.text:0000000000001D20                 mov     [rsp+0A8h+var_88], r12
.text:0000000000001D25                 mov     r15, [rsp+0A8h+var_90]
.text:0000000000001D2A                 mov     rbx, r10
.text:0000000000001D2D                 jmp     short loc_1D51
.text:0000000000001D2D ; ---------------------------------------------------------------------------
.text:0000000000001D2F                 align 10h
.text:0000000000001D30
.text:0000000000001D30 loc_1D30:                               ; CODE XREF: main+569↓j
.text:0000000000001D30                 mov     rax, [r15+28h]
.text:0000000000001D34                 cmp     rax, [r15+30h]
.text:0000000000001D38                 jnb     loc_1E13
.text:0000000000001D3E                 lea     rdx, [rax+1]
.text:0000000000001D42                 mov     [r15+28h], rdx
.text:0000000000001D46                 mov     byte ptr [rax], 0Ah
.text:0000000000001D49
.text:0000000000001D49 loc_1D49:                               ; CODE XREF: main+623↓j
.text:0000000000001D49                 xor     r13d, r13d
.text:0000000000001D4C
.text:0000000000001D4C loc_1D4C:                               ; CODE XREF: main+597↓j
.text:0000000000001D4C                 cmp     rbp, rbx
.text:0000000000001D4F                 jbe     short loc_1D99
.text:0000000000001D51
.text:0000000000001D51 loc_1D51:                               ; CODE XREF: main+52D↑j
.text:0000000000001D51                 mov     r12, [rsp+0A8h+var_A0]
.text:0000000000001D56                 mov     rax, rbp
.text:0000000000001D59                 sub     rax, rbx
.text:0000000000001D5C                 sub     r12, r13
.text:0000000000001D5F                 cmp     r12, rax
.text:0000000000001D62                 cmova   r12, rax
.text:0000000000001D66                 test    r12, r12
.text:0000000000001D69                 jz      short loc_1D30
.text:0000000000001D6B                 mov     rax, [rsp+0A8h+stream]
.text:0000000000001D70                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001D77                 mov     rdx, r12        ; n
.text:0000000000001D7A                 mov     esi, 1          ; size
.text:0000000000001D7F                 lea     rdi, [rax+rbx]  ; ptr
.text:0000000000001D83                 call    _fwrite_unlocked
.text:0000000000001D88                 cmp     r12, rax
.text:0000000000001D8B                 ja      loc_1F42
.text:0000000000001D91                 add     r13, r12
.text:0000000000001D94                 add     rbx, r12
.text:0000000000001D97                 jmp     short loc_1D4C
.text:0000000000001D99 ; ---------------------------------------------------------------------------
.text:0000000000001D99
.text:0000000000001D99 loc_1D99:                               ; CODE XREF: main+54F↑j
.text:0000000000001D99                 mov     rbx, r13
.text:0000000000001D9C                 mov     r12, [rsp+0A8h+var_88]
.text:0000000000001DA1                 mov     r13, [rsp+0A8h+var_80]
.text:0000000000001DA6                 mov     rbp, [rsp+0A8h+var_78]
.text:0000000000001DAB
.text:0000000000001DAB loc_1DAB:                               ; CODE XREF: main+50A↑j
.text:0000000000001DAB                                         ; main+5E5↓j
.text:0000000000001DAB                 mov     eax, [r12]
.text:0000000000001DAF                 test    al, 30h
.text:0000000000001DB1                 jnz     loc_1C65
.text:0000000000001DB7                 cmp     rbp, 7800h
.text:0000000000001DBE                 jz      loc_1C26
.text:0000000000001DC4                 jmp     loc_1C65
.text:0000000000001DC9 ; ---------------------------------------------------------------------------
.text:0000000000001DC9
.text:0000000000001DC9 loc_1DC9:                               ; CODE XREF: main+4FE↑j
.text:0000000000001DC9                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001DD0                 mov     rdi, [rsp+0A8h+stream] ; ptr
.text:0000000000001DD5                 mov     rdx, r15        ; n
.text:0000000000001DD8                 mov     esi, 1          ; size
.text:0000000000001DDD                 call    _fwrite_unlocked
.text:0000000000001DE2                 cmp     r15, rax
.text:0000000000001DE5                 jbe     short loc_1DAB
.text:0000000000001DE7                 lea     rsi, aWriteError ; "write error"
.text:0000000000001DEE                 mov     edx, 5          ; category
.text:0000000000001DF3                 xor     edi, edi        ; domainname
.text:0000000000001DF5                 call    _dcgettext
.text:0000000000001DFA                 mov     rbx, rax
.text:0000000000001DFD                 call    ___errno_location
.text:0000000000001E02                 mov     esi, [rax]      ; errnum
.text:0000000000001E04                 mov     rdx, rbx        ; format
.text:0000000000001E07                 mov     edi, 1          ; status
.text:0000000000001E0C                 xor     eax, eax
.text:0000000000001E0E                 call    _error
.text:0000000000001E13
.text:0000000000001E13 loc_1E13:                               ; CODE XREF: main+538↑j
.text:0000000000001E13                 mov     esi, 0Ah        ; int
.text:0000000000001E18                 mov     rdi, r15        ; _IO_FILE *
.text:0000000000001E1B                 call    ___overflow
.text:0000000000001E20                 add     eax, 1
.text:0000000000001E23                 jnz     loc_1D49
.text:0000000000001E29                 lea     rsi, aWriteError ; "write error"
.text:0000000000001E30                 mov     edx, 5          ; category
.text:0000000000001E35                 xor     edi, edi        ; domainname
.text:0000000000001E37                 call    _dcgettext
.text:0000000000001E3C                 mov     rbx, rax
.text:0000000000001E3F                 call    ___errno_location
.text:0000000000001E44                 mov     esi, [rax]      ; errnum
.text:0000000000001E46                 mov     rdx, rbx        ; format
.text:0000000000001E49                 mov     edi, 1          ; status
.text:0000000000001E4E                 xor     eax, eax
.text:0000000000001E50                 call    _error
.text:0000000000001E55
.text:0000000000001E55 loc_1E55:                               ; CODE XREF: main+3CD↑j
.text:0000000000001E55                 mov     rdi, [rsp+0A8h+filename] ; s1
.text:0000000000001E5A                 lea     rsi, aLt+2      ; s2
.text:0000000000001E61                 call    _strcmp
.text:0000000000001E66                 mov     ebp, eax
.text:0000000000001E68                 call    ___errno_location
.text:0000000000001E6D                 test    ebp, ebp
.text:0000000000001E6F                 mov     rbx, rax
.text:0000000000001E72                 jnz     short loc_1E98
.text:0000000000001E74                 lea     rsi, aClosingStandar ; "closing standard input"
.text:0000000000001E7B                 mov     edx, 5          ; category
.text:0000000000001E80                 xor     edi, edi        ; domainname
.text:0000000000001E82                 call    _dcgettext
.text:0000000000001E87                 mov     esi, [rbx]      ; errnum
.text:0000000000001E89                 mov     rdx, rax        ; format
.text:0000000000001E8C                 mov     edi, 1          ; status
.text:0000000000001E91                 xor     eax, eax
.text:0000000000001E93                 call    _error
.text:0000000000001E98
.text:0000000000001E98 loc_1E98:                               ; CODE XREF: main+672↑j
.text:0000000000001E98                 mov     rdx, [rsp+0A8h+filename]
.text:0000000000001E9D                 mov     esi, 3
.text:0000000000001EA2                 xor     edi, edi
.text:0000000000001EA4                 call    quotearg_n_style_colon
.text:0000000000001EA9                 mov     esi, [rbx]      ; errnum
.text:0000000000001EAB                 lea     rdx, format     ; format
.text:0000000000001EB2                 mov     rcx, rax
.text:0000000000001EB5                 mov     edi, 1          ; status
.text:0000000000001EBA                 xor     eax, eax
.text:0000000000001EBC                 call    _error
.text:0000000000001EC1
.text:0000000000001EC1 loc_1EC1:                               ; CODE XREF: main+392↑j
.text:0000000000001EC1                 lea     rsi, aInvalidInput ; "invalid input"
.text:0000000000001EC8                 mov     edx, 5          ; category
.text:0000000000001ECD                 xor     edi, edi        ; domainname
.text:0000000000001ECF                 call    _dcgettext
.text:0000000000001ED4                 xor     esi, esi        ; errnum
.text:0000000000001ED6                 mov     rdx, rax        ; format
.text:0000000000001ED9                 mov     edi, 1          ; status
.text:0000000000001EDE                 xor     eax, eax
.text:0000000000001EE0                 call    _error
.text:0000000000001EE5
.text:0000000000001EE5 loc_1EE5:                               ; CODE XREF: main+389↑j
.text:0000000000001EE5                 lea     rsi, aWriteError ; "write error"
.text:0000000000001EEC                 mov     edx, 5          ; category
.text:0000000000001EF1                 xor     edi, edi        ; domainname
.text:0000000000001EF3                 call    _dcgettext
.text:0000000000001EF8                 mov     rbx, rax
.text:0000000000001EFB                 call    ___errno_location
.text:0000000000001F00                 mov     esi, [rax]      ; errnum
.text:0000000000001F02                 mov     rdx, rbx        ; format
.text:0000000000001F05                 mov     edi, 1          ; status
.text:0000000000001F0A                 xor     eax, eax
.text:0000000000001F0C                 call    _error
.text:0000000000001F11
.text:0000000000001F11 loc_1F11:                               ; CODE XREF: main+25C↑j
.text:0000000000001F11                 lea     rsi, aReadError ; "read error"
.text:0000000000001F18                 mov     edx, 5          ; category
.text:0000000000001F1D                 xor     edi, edi        ; domainname
.text:0000000000001F1F                 call    _dcgettext
.text:0000000000001F24                 mov     rbx, rax
.text:0000000000001F27                 call    ___errno_location
.text:0000000000001F2C                 mov     esi, [rax]      ; errnum
.text:0000000000001F2E                 mov     rdx, rbx        ; format
.text:0000000000001F31                 mov     edi, 1          ; status
.text:0000000000001F36                 xor     eax, eax
.text:0000000000001F38                 call    _error
.text:0000000000001F3D
.text:0000000000001F3D loc_1F3D:                               ; CODE XREF: main+3E3↑j
.text:0000000000001F3D                 call    ___stack_chk_fail
.text:0000000000001F42 ; ---------------------------------------------------------------------------
.text:0000000000001F42
.text:0000000000001F42 loc_1F42:                               ; CODE XREF: main+58B↑j
.text:0000000000001F42                 lea     rsi, aWriteError ; "write error"
.text:0000000000001F49                 mov     edx, 5          ; category
.text:0000000000001F4E                 xor     edi, edi        ; domainname
.text:0000000000001F50                 call    _dcgettext
.text:0000000000001F55                 mov     rbx, rax
.text:0000000000001F58                 call    ___errno_location
.text:0000000000001F5D                 mov     esi, [rax]      ; errnum
.text:0000000000001F5F                 mov     rdx, rbx        ; format
.text:0000000000001F62                 mov     edi, 1          ; status
.text:0000000000001F67                 xor     eax, eax
.text:0000000000001F69                 call    _error
.text:0000000000001F6E
.text:0000000000001F6E loc_1F6E:                               ; CODE XREF: main+115↑j
.text:0000000000001F6E                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001F73                 jnz     short loc_1FAD
.text:0000000000001F75                 xor     edi, edi        ; status
.text:0000000000001F77                 call    usage
.text:0000000000001F7C ; ---------------------------------------------------------------------------
.text:0000000000001F7C
.text:0000000000001F7C loc_1F7C:                               ; CODE XREF: main+15E↑j
.text:0000000000001F7C                 mov     rdi, [r12+rax*8+8]
.text:0000000000001F81                 call    quote
.text:0000000000001F86                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000001F8D                 mov     rbx, rax
.text:0000000000001F90                 mov     edx, 5          ; category
.text:0000000000001F95                 xor     edi, edi        ; domainname
.text:0000000000001F97                 call    _dcgettext
.text:0000000000001F9C                 mov     rcx, rbx
.text:0000000000001F9F                 mov     rdx, rax        ; format
.text:0000000000001FA2                 xor     esi, esi        ; errnum
.text:0000000000001FA4                 xor     edi, edi        ; status
.text:0000000000001FA6                 xor     eax, eax
.text:0000000000001FA8                 call    _error
.text:0000000000001FAD
.text:0000000000001FAD loc_1FAD:                               ; CODE XREF: main+A8↑j
.text:0000000000001FAD                                         ; main+773↑j
.text:0000000000001FAD                 mov     edi, 1          ; status
.text:0000000000001FB2                 call    usage
.text:0000000000001FB7 ; ---------------------------------------------------------------------------
.text:0000000000001FB7
.text:0000000000001FB7 loc_1FB7:                               ; CODE XREF: main+481↑j
.text:0000000000001FB7                 mov     esi, 0Ah        ; int
.text:0000000000001FBC                 mov     rdi, rcx        ; _IO_FILE *
.text:0000000000001FBF                 call    ___overflow
.text:0000000000001FC4                 add     eax, 1
.text:0000000000001FC7                 jnz     loc_1C97
.text:0000000000001FCD                 lea     rsi, aWriteError ; "write error"
.text:0000000000001FD4                 mov     edx, 5          ; category
.text:0000000000001FD9                 xor     edi, edi        ; domainname
.text:0000000000001FDB                 call    _dcgettext
.text:0000000000001FE0                 mov     rbx, rax
.text:0000000000001FE3                 call    ___errno_location
.text:0000000000001FE8                 mov     esi, [rax]      ; errnum
.text:0000000000001FEA                 mov     rdx, rbx        ; format
.text:0000000000001FED                 mov     edi, 1          ; status
.text:0000000000001FF2                 xor     eax, eax
.text:0000000000001FF4                 call    _error
.text:0000000000001FF4 ; } // starts at 1800
.text:0000000000001FF9                 nop     dword ptr [rax+00000000h]
.text:0000000000001FF9 main            endp ; sp-analysis failed
.text:0000000000001FF9
.text:0000000000002000
.text:0000000000002000 ; =============== S U B R O U T I N E =======================================
.text:0000000000002000
.text:0000000000002000 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002000
.text:0000000000002000 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002000                 public start
.text:0000000000002000 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002000 ; __unwind {
.text:0000000000002000                 xor     ebp, ebp
.text:0000000000002002                 mov     r9, rdx         ; rtld_fini
.text:0000000000002005                 pop     rsi             ; argc
.text:0000000000002006                 mov     rdx, rsp        ; ubp_av
.text:0000000000002009                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000200D                 push    rax
.text:000000000000200E                 push    rsp             ; stack_end
.text:000000000000200F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002016                 lea     rcx, __libc_csu_init ; init
.text:000000000000201D                 lea     rdi, main       ; main
.text:0000000000002024                 call    cs:__libc_start_main_ptr
.text:000000000000202A                 hlt
.text:000000000000202A ; } // starts at 2000
.text:000000000000202A start           endp
.text:000000000000202A
.text:000000000000202A ; ---------------------------------------------------------------------------
.text:000000000000202B                 align 10h
.text:0000000000002030
.text:0000000000002030 ; =============== S U B R O U T I N E =======================================
.text:0000000000002030
.text:0000000000002030 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002030
.text:0000000000002030 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_20E3↓p
.text:0000000000002030                 lea     rdi, __bss_start
.text:0000000000002037                 push    rbp
.text:0000000000002038                 lea     rax, __bss_start
.text:000000000000203F                 cmp     rax, rdi
.text:0000000000002042                 mov     rbp, rsp
.text:0000000000002045                 jz      short loc_2060
.text:0000000000002047                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000204E                 test    rax, rax
.text:0000000000002051                 jz      short loc_2060
.text:0000000000002053                 pop     rbp
.text:0000000000002054                 jmp     rax
.text:0000000000002054 ; ---------------------------------------------------------------------------
.text:0000000000002056                 align 20h
.text:0000000000002060
.text:0000000000002060 loc_2060:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002060                                         ; deregister_tm_clones+21↑j
.text:0000000000002060                 pop     rbp
.text:0000000000002061                 retn
.text:0000000000002061 deregister_tm_clones endp
.text:0000000000002061
.text:0000000000002061 ; ---------------------------------------------------------------------------
.text:0000000000002062                 align 10h
.text:0000000000002070
.text:0000000000002070 ; =============== S U B R O U T I N E =======================================
.text:0000000000002070
.text:0000000000002070 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002070
.text:0000000000002070 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002070                 lea     rdi, __bss_start
.text:0000000000002077                 lea     rsi, __bss_start
.text:000000000000207E                 push    rbp
.text:000000000000207F                 sub     rsi, rdi
.text:0000000000002082                 mov     rbp, rsp
.text:0000000000002085                 sar     rsi, 3
.text:0000000000002089                 mov     rax, rsi
.text:000000000000208C                 shr     rax, 3Fh
.text:0000000000002090                 add     rsi, rax
.text:0000000000002093                 sar     rsi, 1
.text:0000000000002096                 jz      short loc_20B0
.text:0000000000002098                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000209F                 test    rax, rax
.text:00000000000020A2                 jz      short loc_20B0
.text:00000000000020A4                 pop     rbp
.text:00000000000020A5                 jmp     rax
.text:00000000000020A5 ; ---------------------------------------------------------------------------
.text:00000000000020A7                 align 10h
.text:00000000000020B0
.text:00000000000020B0 loc_20B0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000020B0                                         ; register_tm_clones+32↑j
.text:00000000000020B0                 pop     rbp
.text:00000000000020B1                 retn
.text:00000000000020B1 register_tm_clones endp
.text:00000000000020B1
.text:00000000000020B1 ; ---------------------------------------------------------------------------
.text:00000000000020B2                 align 20h
.text:00000000000020C0
.text:00000000000020C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020C0
.text:00000000000020C0 ; Attributes: info_from_lumina
.text:00000000000020C0
.text:00000000000020C0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000020C0                 cmp     cs:completed_7697, 0
.text:00000000000020C7                 jnz     short locret_20F8
.text:00000000000020C9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000020D1                 push    rbp
.text:00000000000020D2                 mov     rbp, rsp
.text:00000000000020D5                 jz      short loc_20E3
.text:00000000000020D7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000020DE                 call    __cxa_finalize
.text:00000000000020E3
.text:00000000000020E3 loc_20E3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000020E3                 call    deregister_tm_clones
.text:00000000000020E8                 mov     cs:completed_7697, 1
.text:00000000000020EF                 pop     rbp
.text:00000000000020F0                 retn
.text:00000000000020F0 ; ---------------------------------------------------------------------------
.text:00000000000020F1                 align 8
.text:00000000000020F8
.text:00000000000020F8 locret_20F8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000020F8                 rep retn
.text:00000000000020F8 __do_global_dtors_aux endp
.text:00000000000020F8
.text:00000000000020F8 ; ---------------------------------------------------------------------------
.text:00000000000020FA                 align 20h
.text:0000000000002100
.text:0000000000002100 ; =============== S U B R O U T I N E =======================================
.text:0000000000002100
.text:0000000000002100 ; Attributes: bp-based frame
.text:0000000000002100
.text:0000000000002100 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002100                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002100                 push    rbp
.text:0000000000002101                 mov     rbp, rsp
.text:0000000000002104                 pop     rbp
.text:0000000000002105                 jmp     register_tm_clones
.text:0000000000002105 frame_dummy     endp
.text:0000000000002105
.text:0000000000002105 ; ---------------------------------------------------------------------------
.text:000000000000210A                 align 10h
.text:0000000000002110
.text:0000000000002110 ; =============== S U B R O U T I N E =======================================
.text:0000000000002110
.text:0000000000002110 ; Attributes: noreturn
.text:0000000000002110
.text:0000000000002110 ; void __fastcall __noreturn usage(int status)
.text:0000000000002110                 public usage
.text:0000000000002110 usage           proc near               ; CODE XREF: main+777↑p
.text:0000000000002110                                         ; main+7B2↑p
.text:0000000000002110
.text:0000000000002110 var_A8          = qword ptr -0A8h
.text:0000000000002110 var_A0          = qword ptr -0A0h
.text:0000000000002110 var_98          = qword ptr -98h
.text:0000000000002110 var_90          = qword ptr -90h
.text:0000000000002110 var_88          = qword ptr -88h
.text:0000000000002110 var_80          = qword ptr -80h
.text:0000000000002110 var_78          = qword ptr -78h
.text:0000000000002110 var_70          = qword ptr -70h
.text:0000000000002110 var_68          = qword ptr -68h
.text:0000000000002110 var_60          = qword ptr -60h
.text:0000000000002110 var_58          = qword ptr -58h
.text:0000000000002110 var_50          = qword ptr -50h
.text:0000000000002110 var_48          = qword ptr -48h
.text:0000000000002110 var_40          = qword ptr -40h
.text:0000000000002110 var_30          = qword ptr -30h
.text:0000000000002110
.text:0000000000002110 ; __unwind {
.text:0000000000002110                 push    r13
.text:0000000000002112                 push    r12
.text:0000000000002114                 mov     edx, 5          ; category
.text:0000000000002119                 push    rbp
.text:000000000000211A                 push    rbx
.text:000000000000211B                 mov     ebp, edi
.text:000000000000211D                 sub     rsp, 88h
.text:0000000000002124                 mov     rbx, cs:program_name
.text:000000000000212B                 mov     rax, fs:28h
.text:0000000000002134                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002139                 xor     eax, eax
.text:000000000000213B                 test    edi, edi
.text:000000000000213D                 jz      short loc_216D
.text:000000000000213F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002146                 xor     edi, edi        ; domainname
.text:0000000000002148                 call    _dcgettext
.text:000000000000214D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002154                 mov     rdx, rax
.text:0000000000002157                 mov     rcx, rbx
.text:000000000000215A                 mov     esi, 1
.text:000000000000215F                 xor     eax, eax
.text:0000000000002161                 call    ___fprintf_chk
.text:0000000000002166
.text:0000000000002166 loc_2166:                               ; CODE XREF: usage+316↓j
.text:0000000000002166                 mov     edi, ebp        ; status
.text:0000000000002168                 call    _exit
.text:000000000000216D ; ---------------------------------------------------------------------------
.text:000000000000216D
.text:000000000000216D loc_216D:                               ; CODE XREF: usage+2D↑j
.text:000000000000216D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]\n"
.text:0000000000002174                 xor     edi, edi        ; domainname
.text:0000000000002176                 call    _dcgettext
.text:000000000000217B                 mov     rdx, rbx
.text:000000000000217E                 mov     rsi, rax
.text:0000000000002181                 mov     edi, 1
.text:0000000000002186                 xor     eax, eax
.text:0000000000002188                 call    ___printf_chk
.text:000000000000218D                 lea     rsi, aBaseDEncodeOrD ; "Base%d encode or decode FILE, or standa"...
.text:0000000000002194                 mov     edx, 5          ; category
.text:0000000000002199                 xor     edi, edi        ; domainname
.text:000000000000219B                 call    _dcgettext
.text:00000000000021A0                 mov     edx, 20h ; ' '
.text:00000000000021A5                 mov     rsi, rax
.text:00000000000021A8                 mov     edi, 1
.text:00000000000021AD                 xor     eax, eax
.text:00000000000021AF                 call    ___printf_chk
.text:00000000000021B4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000021BB                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:00000000000021C2                 mov     edx, 5          ; category
.text:00000000000021C7                 xor     edi, edi        ; domainname
.text:00000000000021C9                 call    _dcgettext
.text:00000000000021CE                 mov     rsi, rbx        ; stream
.text:00000000000021D1                 mov     rdi, rax        ; s
.text:00000000000021D4                 call    _fputs_unlocked
.text:00000000000021D9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000021E0                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:00000000000021E7                 mov     edx, 5          ; category
.text:00000000000021EC                 xor     edi, edi        ; domainname
.text:00000000000021EE                 call    _dcgettext
.text:00000000000021F3                 mov     rsi, rbx        ; stream
.text:00000000000021F6                 mov     rdi, rax        ; s
.text:00000000000021F9                 call    _fputs_unlocked
.text:00000000000021FE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002205                 lea     rsi, aDDecodeDecodeD ; "  -d, --decode          decode data\n  "...
.text:000000000000220C                 mov     edx, 5          ; category
.text:0000000000002211                 xor     edi, edi        ; domainname
.text:0000000000002213                 call    _dcgettext
.text:0000000000002218                 mov     rsi, rbx        ; stream
.text:000000000000221B                 mov     rdi, rax        ; s
.text:000000000000221E                 call    _fputs_unlocked
.text:0000000000002223                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000222A                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002231                 mov     edx, 5          ; category
.text:0000000000002236                 xor     edi, edi        ; domainname
.text:0000000000002238                 call    _dcgettext
.text:000000000000223D                 mov     rsi, rbx        ; stream
.text:0000000000002240                 mov     rdi, rax        ; s
.text:0000000000002243                 call    _fputs_unlocked
.text:0000000000002248                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000224F                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002256                 mov     edx, 5          ; category
.text:000000000000225B                 xor     edi, edi        ; domainname
.text:000000000000225D                 call    _dcgettext
.text:0000000000002262                 mov     rsi, rbx        ; stream
.text:0000000000002265                 mov     rdi, rax        ; s
.text:0000000000002268                 lea     rbx, aBase32    ; "base32"
.text:000000000000226F                 call    _fputs_unlocked
.text:0000000000002274                 lea     rsi, aTheDataAreEnco ; "\nThe data are encoded as described for"...
.text:000000000000227B                 mov     edx, 5          ; category
.text:0000000000002280                 xor     edi, edi        ; domainname
.text:0000000000002282                 call    _dcgettext
.text:0000000000002287                 lea     rcx, aBase32    ; "base32"
.text:000000000000228E                 mov     rsi, rax
.text:0000000000002291                 mov     edi, 1
.text:0000000000002296                 xor     eax, eax
.text:0000000000002298                 mov     rdx, rcx
.text:000000000000229B                 call    ___printf_chk
.text:00000000000022A0                 lea     rax, asc_5CC9   ; "["
.text:00000000000022A7                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000022AE                 mov     [rsp+0A8h+var_48], 0
.text:00000000000022B7                 mov     [rsp+0A8h+var_40], 0
.text:00000000000022C0                 mov     rdx, rsp
.text:00000000000022C3                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000022C7                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000022CE                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000022D3                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000022DA                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000022DF                 lea     rax, domainname ; "coreutils"
.text:00000000000022E6                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000022EB                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000022F2                 mov     [rsp+0A8h+var_98], rax
.text:00000000000022F7                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000022FE                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002303                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002308                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000230F                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002314                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000231B                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002320                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002325                 mov     [rsp+0A8h+var_60], rax
.text:000000000000232A                 mov     [rsp+0A8h+var_50], rax
.text:000000000000232F                 nop
.text:0000000000002330
.text:0000000000002330 loc_2330:                               ; CODE XREF: usage+23D↓j
.text:0000000000002330                 add     rdx, 10h
.text:0000000000002334                 mov     rdi, [rdx]
.text:0000000000002337                 test    rdi, rdi
.text:000000000000233A                 jz      short loc_234F
.text:000000000000233C                 mov     ecx, 7
.text:0000000000002341                 mov     rsi, rbx
.text:0000000000002344                 repe cmpsb
.text:0000000000002346                 setnbe  al
.text:0000000000002349                 sbb     al, 0
.text:000000000000234B                 test    al, al
.text:000000000000234D                 jnz     short loc_2330
.text:000000000000234F
.text:000000000000234F loc_234F:                               ; CODE XREF: usage+22A↑j
.text:000000000000234F                 mov     r12, [rdx+8]
.text:0000000000002353                 xor     edi, edi        ; domainname
.text:0000000000002355                 mov     edx, 5          ; category
.text:000000000000235A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002361                 test    r12, r12
.text:0000000000002364                 jz      loc_242B
.text:000000000000236A                 call    _dcgettext
.text:000000000000236F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002376                 lea     rdx, unk_5D3F
.text:000000000000237D                 mov     rsi, rax
.text:0000000000002380                 mov     edi, 1
.text:0000000000002385                 xor     eax, eax
.text:0000000000002387                 call    ___printf_chk
.text:000000000000238C                 xor     esi, esi        ; locale
.text:000000000000238E                 mov     edi, 5          ; category
.text:0000000000002393                 call    _setlocale
.text:0000000000002398                 test    rax, rax
.text:000000000000239B                 jz      short loc_23B9
.text:000000000000239D                 lea     rsi, s2         ; "en_"
.text:00000000000023A4                 mov     edx, 3          ; n
.text:00000000000023A9                 mov     rdi, rax        ; s1
.text:00000000000023AC                 call    _strncmp
.text:00000000000023B1                 test    eax, eax
.text:00000000000023B3                 jnz     loc_24C0
.text:00000000000023B9
.text:00000000000023B9 loc_23B9:                               ; CODE XREF: usage+28B↑j
.text:00000000000023B9                                         ; usage+3D5↓j
.text:00000000000023B9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000023C0                 xor     edi, edi        ; domainname
.text:00000000000023C2                 mov     edx, 5          ; category
.text:00000000000023C7                 call    _dcgettext
.text:00000000000023CC                 lea     rcx, aBase32    ; "base32"
.text:00000000000023D3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000023DA                 mov     rsi, rax
.text:00000000000023DD                 mov     edi, 1
.text:00000000000023E2                 xor     eax, eax
.text:00000000000023E4                 call    ___printf_chk
.text:00000000000023E9                 cmp     r12, rbx
.text:00000000000023EC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000023F3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000023FA                 cmovz   rbx, rcx
.text:00000000000023FE
.text:00000000000023FE loc_23FE:                               ; CODE XREF: usage+3A4↓j
.text:00000000000023FE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002405                 xor     edi, edi        ; domainname
.text:0000000000002407                 mov     edx, 5          ; category
.text:000000000000240C                 call    _dcgettext
.text:0000000000002411                 mov     rcx, rbx
.text:0000000000002414                 mov     rsi, rax
.text:0000000000002417                 mov     rdx, r12
.text:000000000000241A                 mov     edi, 1
.text:000000000000241F                 xor     eax, eax
.text:0000000000002421                 call    ___printf_chk
.text:0000000000002426                 jmp     loc_2166
.text:000000000000242B ; ---------------------------------------------------------------------------
.text:000000000000242B
.text:000000000000242B loc_242B:                               ; CODE XREF: usage+254↑j
.text:000000000000242B                 call    _dcgettext
.text:0000000000002430                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002437                 lea     rdx, unk_5D3F
.text:000000000000243E                 mov     rsi, rax
.text:0000000000002441                 mov     edi, 1
.text:0000000000002446                 xor     eax, eax
.text:0000000000002448                 call    ___printf_chk
.text:000000000000244D                 xor     esi, esi        ; locale
.text:000000000000244F                 mov     edi, 5          ; category
.text:0000000000002454                 call    _setlocale
.text:0000000000002459                 test    rax, rax
.text:000000000000245C                 jz      short loc_2476
.text:000000000000245E                 lea     rsi, s2         ; "en_"
.text:0000000000002465                 mov     edx, 3          ; n
.text:000000000000246A                 mov     rdi, rax        ; s1
.text:000000000000246D                 call    _strncmp
.text:0000000000002472                 test    eax, eax
.text:0000000000002474                 jnz     short loc_24B9
.text:0000000000002476
.text:0000000000002476 loc_2476:                               ; CODE XREF: usage+34C↑j
.text:0000000000002476                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000247D                 mov     edx, 5          ; category
.text:0000000000002482                 xor     edi, edi        ; domainname
.text:0000000000002484                 lea     r12, aBase32    ; "base32"
.text:000000000000248B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002492                 call    _dcgettext
.text:0000000000002497                 lea     rcx, aBase32    ; "base32"
.text:000000000000249E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000024A5                 mov     rsi, rax
.text:00000000000024A8                 mov     edi, 1
.text:00000000000024AD                 xor     eax, eax
.text:00000000000024AF                 call    ___printf_chk
.text:00000000000024B4                 jmp     loc_23FE
.text:00000000000024B9 ; ---------------------------------------------------------------------------
.text:00000000000024B9
.text:00000000000024B9 loc_24B9:                               ; CODE XREF: usage+364↑j
.text:00000000000024B9                 lea     r12, aBase32    ; "base32"
.text:00000000000024C0
.text:00000000000024C0 loc_24C0:                               ; CODE XREF: usage+2A3↑j
.text:00000000000024C0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000024C7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000024CE                 xor     edi, edi        ; domainname
.text:00000000000024D0                 mov     edx, 5          ; category
.text:00000000000024D5                 call    _dcgettext
.text:00000000000024DA                 mov     rsi, r13        ; stream
.text:00000000000024DD                 mov     rdi, rax        ; s
.text:00000000000024E0                 call    _fputs_unlocked
.text:00000000000024E5                 jmp     loc_23B9
.text:00000000000024E5 ; } // starts at 2110
.text:00000000000024E5 usage           endp
.text:00000000000024E5
.text:00000000000024E5 ; ---------------------------------------------------------------------------
.text:00000000000024EA                 align 10h
.text:00000000000024F0
.text:00000000000024F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024F0
.text:00000000000024F0
.text:00000000000024F0 decode_8        proc near               ; CODE XREF: base32_decode_ctx+E0↓p
.text:00000000000024F0                                         ; base32_decode_ctx+159↓p
.text:00000000000024F0 ; __unwind {
.text:00000000000024F0                 xor     eax, eax
.text:00000000000024F2                 cmp     rsi, 7
.text:00000000000024F6                 jbe     locret_2668
.text:00000000000024FC                 movzx   r8d, byte ptr [rdi]
.text:0000000000002500                 lea     rsi, b32
.text:0000000000002507                 movzx   r8d, byte ptr [rsi+r8]
.text:000000000000250C                 test    r8b, r8b
.text:000000000000250F                 js      locret_2668
.text:0000000000002515                 movzx   r9d, byte ptr [rdi+1]
.text:000000000000251A                 movzx   r9d, byte ptr [rsi+r9]
.text:000000000000251F                 test    r9b, r9b
.text:0000000000002522                 js      locret_2668
.text:0000000000002528                 cmp     qword ptr [rcx], 0
.text:000000000000252C                 mov     rax, [rdx]
.text:000000000000252F                 jz      short loc_254B
.text:0000000000002531                 mov     r10d, r9d
.text:0000000000002534                 shl     r8d, 3
.text:0000000000002538                 add     rax, 1
.text:000000000000253C                 sar     r10b, 2
.text:0000000000002540                 or      r8d, r10d
.text:0000000000002543                 mov     [rax-1], r8b
.text:0000000000002547                 sub     qword ptr [rcx], 1
.text:000000000000254B
.text:000000000000254B loc_254B:                               ; CODE XREF: decode_8+3F↑j
.text:000000000000254B                 movzx   r8d, byte ptr [rdi+2]
.text:0000000000002550                 cmp     r8b, 3Dh ; '='
.text:0000000000002554                 jz      loc_2670
.text:000000000000255A                 movzx   r8d, byte ptr [rsi+r8]
.text:000000000000255F                 test    r8b, r8b
.text:0000000000002562                 js      loc_2676
.text:0000000000002568                 movzx   r10d, byte ptr [rdi+3]
.text:000000000000256D                 movzx   r10d, byte ptr [rsi+r10]
.text:0000000000002572                 test    r10b, r10b
.text:0000000000002575                 js      loc_2676
.text:000000000000257B                 cmp     qword ptr [rcx], 0
.text:000000000000257F                 jz      short loc_25A1
.text:0000000000002581                 add     r8d, r8d
.text:0000000000002584                 shl     r9d, 6
.text:0000000000002588                 add     rax, 1
.text:000000000000258C                 or      r9d, r8d
.text:000000000000258F                 mov     r8d, r10d
.text:0000000000002592                 sar     r8b, 4
.text:0000000000002596                 or      r9d, r8d
.text:0000000000002599                 mov     [rax-1], r9b
.text:000000000000259D                 sub     qword ptr [rcx], 1
.text:00000000000025A1
.text:00000000000025A1 loc_25A1:                               ; CODE XREF: decode_8+8F↑j
.text:00000000000025A1                 movzx   r8d, byte ptr [rdi+4]
.text:00000000000025A6                 cmp     r8b, 3Dh ; '='
.text:00000000000025AA                 jz      loc_2686
.text:00000000000025B0                 movzx   r8d, byte ptr [rsi+r8]
.text:00000000000025B5                 test    r8b, r8b
.text:00000000000025B8                 js      loc_2676
.text:00000000000025BE                 cmp     qword ptr [rcx], 0
.text:00000000000025C2                 jz      short loc_25DD
.text:00000000000025C4                 mov     r9d, r8d
.text:00000000000025C7                 shl     r10d, 4
.text:00000000000025CB                 add     rax, 1
.text:00000000000025CF                 sar     r9b, 1
.text:00000000000025D2                 or      r10d, r9d
.text:00000000000025D5                 mov     [rax-1], r10b
.text:00000000000025D9                 sub     qword ptr [rcx], 1
.text:00000000000025DD
.text:00000000000025DD loc_25DD:                               ; CODE XREF: decode_8+D2↑j
.text:00000000000025DD                 movzx   r9d, byte ptr [rdi+5]
.text:00000000000025E2                 cmp     r9b, 3Dh ; '='
.text:00000000000025E6                 jz      loc_268C
.text:00000000000025EC                 movzx   r9d, byte ptr [rsi+r9]
.text:00000000000025F1                 test    r9b, r9b
.text:00000000000025F4                 js      loc_2676
.text:00000000000025FA                 movzx   r10d, byte ptr [rdi+6]
.text:00000000000025FF                 movzx   r10d, byte ptr [rsi+r10]
.text:0000000000002604                 test    r10b, r10b
.text:0000000000002607                 js      short loc_2676
.text:0000000000002609                 cmp     qword ptr [rcx], 0
.text:000000000000260D                 jz      short loc_2630
.text:000000000000260F                 shl     r9d, 2
.text:0000000000002613                 shl     r8d, 7
.text:0000000000002617                 add     rax, 1
.text:000000000000261B                 or      r8d, r9d
.text:000000000000261E                 mov     r9d, r10d
.text:0000000000002621                 sar     r9b, 3
.text:0000000000002625                 or      r8d, r9d
.text:0000000000002628                 mov     [rax-1], r8b
.text:000000000000262C                 sub     qword ptr [rcx], 1
.text:0000000000002630
.text:0000000000002630 loc_2630:                               ; CODE XREF: decode_8+11D↑j
.text:0000000000002630                 movzx   edi, byte ptr [rdi+7]
.text:0000000000002634                 cmp     dil, 3Dh ; '='
.text:0000000000002638                 jz      short loc_2660
.text:000000000000263A                 movzx   esi, byte ptr [rsi+rdi]
.text:000000000000263E                 test    sil, sil
.text:0000000000002641                 js      short loc_2676
.text:0000000000002643                 cmp     qword ptr [rcx], 0
.text:0000000000002647                 jz      short loc_2660
.text:0000000000002649                 shl     r10d, 5
.text:000000000000264D                 add     rax, 1
.text:0000000000002651                 or      r10d, esi
.text:0000000000002654                 mov     [rax-1], r10b
.text:0000000000002658                 sub     qword ptr [rcx], 1
.text:000000000000265C                 nop     dword ptr [rax+00h]
.text:0000000000002660
.text:0000000000002660 loc_2660:                               ; CODE XREF: decode_8+148↑j
.text:0000000000002660                                         ; decode_8+157↑j ...
.text:0000000000002660                 mov     [rdx], rax
.text:0000000000002663                 mov     eax, 1
.text:0000000000002668
.text:0000000000002668 locret_2668:                            ; CODE XREF: decode_8+6↑j
.text:0000000000002668                                         ; decode_8+1F↑j ...
.text:0000000000002668                 rep retn
.text:0000000000002668 ; ---------------------------------------------------------------------------
.text:000000000000266A                 align 10h
.text:0000000000002670
.text:0000000000002670 loc_2670:                               ; CODE XREF: decode_8+64↑j
.text:0000000000002670                 cmp     byte ptr [rdi+3], 3Dh ; '='
.text:0000000000002674                 jz      short loc_2680
.text:0000000000002676
.text:0000000000002676 loc_2676:                               ; CODE XREF: decode_8+72↑j
.text:0000000000002676                                         ; decode_8+85↑j ...
.text:0000000000002676                 mov     [rdx], rax
.text:0000000000002679                 xor     eax, eax
.text:000000000000267B                 retn
.text:000000000000267B ; ---------------------------------------------------------------------------
.text:000000000000267C                 align 20h
.text:0000000000002680
.text:0000000000002680 loc_2680:                               ; CODE XREF: decode_8+184↑j
.text:0000000000002680                 cmp     byte ptr [rdi+4], 3Dh ; '='
.text:0000000000002684                 jnz     short loc_2676
.text:0000000000002686
.text:0000000000002686 loc_2686:                               ; CODE XREF: decode_8+BA↑j
.text:0000000000002686                 cmp     byte ptr [rdi+5], 3Dh ; '='
.text:000000000000268A                 jnz     short loc_2676
.text:000000000000268C
.text:000000000000268C loc_268C:                               ; CODE XREF: decode_8+F6↑j
.text:000000000000268C                 cmp     byte ptr [rdi+6], 3Dh ; '='
.text:0000000000002690                 jnz     short loc_2676
.text:0000000000002692                 cmp     byte ptr [rdi+7], 3Dh ; '='
.text:0000000000002696                 jnz     short loc_2676
.text:0000000000002698                 jmp     short loc_2660
.text:0000000000002698 ; } // starts at 24F0
.text:0000000000002698 decode_8        endp
.text:0000000000002698
.text:0000000000002698 ; ---------------------------------------------------------------------------
.text:000000000000269A                 align 20h
.text:00000000000026A0
.text:00000000000026A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026A0
.text:00000000000026A0
.text:00000000000026A0                 public base32_encode
.text:00000000000026A0 base32_encode   proc near               ; CODE XREF: main+4F3↑p
.text:00000000000026A0                                         ; base32_encode_alloc+76↓p
.text:00000000000026A0 ; __unwind {
.text:00000000000026A0                 lea     r8, b32str_3066
.text:00000000000026A7                 jmp     loc_27CB
.text:00000000000026A7 ; ---------------------------------------------------------------------------
.text:00000000000026AC                 align 10h
.text:00000000000026B0
.text:00000000000026B0 loc_26B0:                               ; CODE XREF: base32_encode+160↓j
.text:00000000000026B0                 movzx   r9d, byte ptr [rdi+1]
.text:00000000000026B5                 mov     r10d, r9d
.text:00000000000026B8                 shr     r10b, 6
.text:00000000000026BC                 add     eax, r10d
.text:00000000000026BF                 and     eax, 1Fh
.text:00000000000026C2                 cmp     rcx, 2
.text:00000000000026C6                 movzx   eax, byte ptr [r8+rax]
.text:00000000000026CB                 mov     [rdx+1], al
.text:00000000000026CE                 jz      locret_2875
.text:00000000000026D4                 mov     eax, r9d
.text:00000000000026D7                 shr     al, 1
.text:00000000000026D9                 and     eax, 1Fh
.text:00000000000026DC                 cmp     rcx, 3
.text:00000000000026E0                 movzx   eax, byte ptr [r8+rax]
.text:00000000000026E5                 mov     [rdx+2], al
.text:00000000000026E8                 jz      locret_2875
.text:00000000000026EE                 shl     r9d, 4
.text:00000000000026F2                 cmp     rsi, 2
.text:00000000000026F6                 jz      loc_2860
.text:00000000000026FC                 movzx   eax, byte ptr [rdi+2]
.text:0000000000002700                 mov     r10d, eax
.text:0000000000002703                 shr     r10b, 4
.text:0000000000002707                 add     r9d, r10d
.text:000000000000270A                 and     r9d, 1Fh
.text:000000000000270E                 cmp     rcx, 4
.text:0000000000002712                 movzx   r9d, byte ptr [r8+r9]
.text:0000000000002717                 mov     [rdx+3], r9b
.text:000000000000271B                 jz      locret_2875
.text:0000000000002721                 cmp     rsi, 3
.text:0000000000002725                 lea     r9d, [rax+rax]
.text:0000000000002729                 jz      loc_2880
.text:000000000000272F                 movzx   eax, byte ptr [rdi+3]
.text:0000000000002733                 mov     r10d, eax
.text:0000000000002736                 shr     r10b, 7
.text:000000000000273A                 add     r9d, r10d
.text:000000000000273D                 and     r9d, 1Fh
.text:0000000000002741                 cmp     rcx, 5
.text:0000000000002745                 movzx   r9d, byte ptr [r8+r9]
.text:000000000000274A                 mov     [rdx+4], r9b
.text:000000000000274E                 jz      locret_2875
.text:0000000000002754                 mov     r9d, eax
.text:0000000000002757                 shr     r9b, 2
.text:000000000000275B                 and     r9d, 1Fh
.text:000000000000275F                 cmp     rcx, 6
.text:0000000000002763                 movzx   r9d, byte ptr [r8+r9]
.text:0000000000002768                 mov     [rdx+5], r9b
.text:000000000000276C                 jz      locret_2875
.text:0000000000002772                 shl     eax, 3
.text:0000000000002775                 cmp     rsi, 4
.text:0000000000002779                 jz      loc_2898
.text:000000000000277F                 movzx   r9d, byte ptr [rdi+4]
.text:0000000000002784                 mov     r10d, r9d
.text:0000000000002787                 shr     r10b, 5
.text:000000000000278B                 add     eax, r10d
.text:000000000000278E                 and     eax, 1Fh
.text:0000000000002791                 cmp     rcx, 7
.text:0000000000002795                 movzx   eax, byte ptr [r8+rax]
.text:000000000000279A                 mov     [rdx+6], al
.text:000000000000279D                 jz      locret_2875
.text:00000000000027A3                 and     r9d, 1Fh
.text:00000000000027A7                 cmp     rcx, 8
.text:00000000000027AB                 movzx   eax, byte ptr [r8+r9]
.text:00000000000027B0                 mov     [rdx+7], al
.text:00000000000027B3                 jz      locret_2875
.text:00000000000027B9                 sub     rsi, 5
.text:00000000000027BD                 jz      short loc_27C3
.text:00000000000027BF                 add     rdi, 5
.text:00000000000027C3
.text:00000000000027C3 loc_27C3:                               ; CODE XREF: base32_encode+11D↑j
.text:00000000000027C3                                         ; base32_encode+1B5↓j
.text:00000000000027C3                 add     rdx, 8
.text:00000000000027C7                 sub     rcx, 8
.text:00000000000027CB
.text:00000000000027CB loc_27CB:                               ; CODE XREF: base32_encode+7↑j
.text:00000000000027CB                 test    rsi, rsi
.text:00000000000027CE                 jz      loc_28B0
.text:00000000000027D4                 test    rcx, rcx
.text:00000000000027D7                 jz      loc_28B0
.text:00000000000027DD                 movzx   eax, byte ptr [rdi]
.text:00000000000027E0                 mov     r9d, eax
.text:00000000000027E3                 shr     r9b, 3
.text:00000000000027E7                 and     r9d, 1Fh
.text:00000000000027EB                 cmp     rcx, 1
.text:00000000000027EF                 movzx   r9d, byte ptr [r8+r9]
.text:00000000000027F4                 mov     [rdx], r9b
.text:00000000000027F7                 jz      short locret_2875
.text:00000000000027F9                 shl     eax, 2
.text:00000000000027FC                 cmp     rsi, 1
.text:0000000000002800                 jnz     loc_26B0
.text:0000000000002806                 and     eax, 1Ch
.text:0000000000002809                 cmp     rcx, 2
.text:000000000000280D                 movzx   eax, byte ptr [r8+rax]
.text:0000000000002812                 mov     [rdx+1], al
.text:0000000000002815                 jz      short locret_2875
.text:0000000000002817                 cmp     rcx, 3
.text:000000000000281B                 mov     byte ptr [rdx+2], 3Dh ; '='
.text:000000000000281F                 jz      short locret_2875
.text:0000000000002821                 cmp     rcx, 4
.text:0000000000002825                 mov     byte ptr [rdx+3], 3Dh ; '='
.text:0000000000002829                 jz      short locret_2875
.text:000000000000282B
.text:000000000000282B loc_282B:                               ; CODE XREF: base32_encode+1D3↓j
.text:000000000000282B                 cmp     rcx, 5
.text:000000000000282F                 mov     byte ptr [rdx+4], 3Dh ; '='
.text:0000000000002833                 jz      short locret_2875
.text:0000000000002835
.text:0000000000002835 loc_2835:                               ; CODE XREF: base32_encode+1F0↓j
.text:0000000000002835                 cmp     rcx, 6
.text:0000000000002839                 mov     byte ptr [rdx+5], 3Dh ; '='
.text:000000000000283D                 jz      short locret_2875
.text:000000000000283F                 cmp     rcx, 7
.text:0000000000002843                 mov     byte ptr [rdx+6], 3Dh ; '='
.text:0000000000002847                 jz      short locret_2875
.text:0000000000002849
.text:0000000000002849 loc_2849:                               ; CODE XREF: base32_encode+209↓j
.text:0000000000002849                 cmp     rcx, 8
.text:000000000000284D                 mov     byte ptr [rdx+7], 3Dh ; '='
.text:0000000000002851                 jz      short locret_2875
.text:0000000000002853                 xor     esi, esi
.text:0000000000002855                 jmp     loc_27C3
.text:0000000000002855 ; ---------------------------------------------------------------------------
.text:000000000000285A                 align 20h
.text:0000000000002860
.text:0000000000002860 loc_2860:                               ; CODE XREF: base32_encode+56↑j
.text:0000000000002860                 and     r9d, 1Fh
.text:0000000000002864                 cmp     rcx, 4
.text:0000000000002868                 movsxd  r9, r9d
.text:000000000000286B                 movzx   eax, byte ptr [r8+r9]
.text:0000000000002870                 mov     [rdx+3], al
.text:0000000000002873                 jnz     short loc_282B
.text:0000000000002875
.text:0000000000002875 locret_2875:                            ; CODE XREF: base32_encode+2E↑j
.text:0000000000002875                                         ; base32_encode+48↑j ...
.text:0000000000002875                 retn
.text:0000000000002875 ; ---------------------------------------------------------------------------
.text:0000000000002876                 align 20h
.text:0000000000002880
.text:0000000000002880 loc_2880:                               ; CODE XREF: base32_encode+89↑j
.text:0000000000002880                 and     r9d, 1Eh
.text:0000000000002884                 cmp     rcx, 5
.text:0000000000002888                 movzx   eax, byte ptr [r8+r9]
.text:000000000000288D                 mov     [rdx+4], al
.text:0000000000002890                 jnz     short loc_2835
.text:0000000000002892                 rep retn
.text:0000000000002892 ; ---------------------------------------------------------------------------
.text:0000000000002894                 align 8
.text:0000000000002898
.text:0000000000002898 loc_2898:                               ; CODE XREF: base32_encode+D9↑j
.text:0000000000002898                 and     eax, 18h
.text:000000000000289B                 cmp     rcx, 7
.text:000000000000289F                 movzx   eax, byte ptr [r8+rax]
.text:00000000000028A4                 mov     [rdx+6], al
.text:00000000000028A7                 jz      short locret_2875
.text:00000000000028A9                 jmp     short loc_2849
.text:00000000000028A9 ; ---------------------------------------------------------------------------
.text:00000000000028AB                 align 10h
.text:00000000000028B0
.text:00000000000028B0 loc_28B0:                               ; CODE XREF: base32_encode+12E↑j
.text:00000000000028B0                                         ; base32_encode+137↑j
.text:00000000000028B0                 test    rcx, rcx
.text:00000000000028B3                 jz      short locret_2875
.text:00000000000028B5                 mov     byte ptr [rdx], 0
.text:00000000000028B8                 retn
.text:00000000000028B8 ; } // starts at 26A0
.text:00000000000028B8 base32_encode   endp
.text:00000000000028B8
.text:00000000000028B8 ; ---------------------------------------------------------------------------
.text:00000000000028B9                 align 20h
.text:00000000000028C0
.text:00000000000028C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028C0
.text:00000000000028C0
.text:00000000000028C0                 public base32_encode_alloc
.text:00000000000028C0 base32_encode_alloc proc near
.text:00000000000028C0 ; __unwind {
.text:00000000000028C0                 push    r14
.text:00000000000028C2                 push    r13
.text:00000000000028C4                 mov     r13, rdx
.text:00000000000028C7                 lea     rdx, [rsi+4]
.text:00000000000028CB                 push    r12
.text:00000000000028CD                 push    rbp
.text:00000000000028CE                 push    rbx
.text:00000000000028CF                 mov     rbx, 0CCCCCCCCCCCCCCCDh
.text:00000000000028D9                 mov     rax, rdx
.text:00000000000028DC                 mul     rbx
.text:00000000000028DF                 shr     rdx, 2
.text:00000000000028E3                 lea     rbx, ds:0[rdx*8]
.text:00000000000028EB                 lea     rbp, [rbx+1]
.text:00000000000028EF                 cmp     rsi, rbp
.text:00000000000028F2                 jbe     short loc_2910
.text:00000000000028F4                 mov     qword ptr [r13+0], 0
.text:00000000000028FC                 xor     ebp, ebp
.text:00000000000028FE
.text:00000000000028FE loc_28FE:                               ; CODE XREF: base32_encode_alloc+65↓j
.text:00000000000028FE                 pop     rbx
.text:00000000000028FF                 mov     rax, rbp
.text:0000000000002902                 pop     rbp
.text:0000000000002903                 pop     r12
.text:0000000000002905                 pop     r13
.text:0000000000002907                 pop     r14
.text:0000000000002909                 retn
.text:0000000000002909 ; ---------------------------------------------------------------------------
.text:000000000000290A                 align 10h
.text:0000000000002910
.text:0000000000002910 loc_2910:                               ; CODE XREF: base32_encode_alloc+32↑j
.text:0000000000002910                 mov     r14, rdi
.text:0000000000002913                 mov     rdi, rbp        ; size
.text:0000000000002916                 mov     r12, rsi
.text:0000000000002919                 call    _malloc
.text:000000000000291E                 test    rax, rax
.text:0000000000002921                 mov     [r13+0], rax
.text:0000000000002925                 jz      short loc_28FE
.text:0000000000002927                 mov     rcx, rbp
.text:000000000000292A                 mov     rdx, rax
.text:000000000000292D                 mov     rbp, rbx
.text:0000000000002930                 mov     rsi, r12
.text:0000000000002933                 mov     rdi, r14
.text:0000000000002936                 call    base32_encode
.text:000000000000293B                 pop     rbx
.text:000000000000293C                 mov     rax, rbp
.text:000000000000293F                 pop     rbp
.text:0000000000002940                 pop     r12
.text:0000000000002942                 pop     r13
.text:0000000000002944                 pop     r14
.text:0000000000002946                 retn
.text:0000000000002946 ; } // starts at 28C0
.text:0000000000002946 base32_encode_alloc endp
.text:0000000000002946
.text:0000000000002946 ; ---------------------------------------------------------------------------
.text:0000000000002947                 align 10h
.text:0000000000002950
.text:0000000000002950 ; =============== S U B R O U T I N E =======================================
.text:0000000000002950
.text:0000000000002950
.text:0000000000002950                 public isbase32
.text:0000000000002950 isbase32        proc near               ; CODE XREF: main+2CB↑p
.text:0000000000002950 ; __unwind {
.text:0000000000002950                 lea     rax, b32
.text:0000000000002957                 movzx   edi, dil
.text:000000000000295B                 movzx   eax, byte ptr [rax+rdi]
.text:000000000000295F                 not     eax
.text:0000000000002961                 shr     al, 7
.text:0000000000002964                 retn
.text:0000000000002964 ; } // starts at 2950
.text:0000000000002964 isbase32        endp
.text:0000000000002964
.text:0000000000002964 ; ---------------------------------------------------------------------------
.text:0000000000002965                 align 10h
.text:0000000000002970
.text:0000000000002970 ; =============== S U B R O U T I N E =======================================
.text:0000000000002970
.text:0000000000002970
.text:0000000000002970                 public base32_decode_ctx_init
.text:0000000000002970 base32_decode_ctx_init proc near        ; CODE XREF: main+22C↑p
.text:0000000000002970 ; __unwind {
.text:0000000000002970                 mov     dword ptr [rdi], 0
.text:0000000000002976                 retn
.text:0000000000002976 ; } // starts at 2970
.text:0000000000002976 base32_decode_ctx_init endp
.text:0000000000002976
.text:0000000000002976 ; ---------------------------------------------------------------------------
.text:0000000000002977                 align 20h
.text:0000000000002980
.text:0000000000002980 ; =============== S U B R O U T I N E =======================================
.text:0000000000002980
.text:0000000000002980
.text:0000000000002980                 public base32_decode_ctx
.text:0000000000002980 base32_decode_ctx proc near             ; CODE XREF: main+367↑p
.text:0000000000002980                                         ; base32_decode_alloc_ctx+5A↓p
.text:0000000000002980
.text:0000000000002980 var_62          = byte ptr -62h
.text:0000000000002980 var_61          = byte ptr -61h
.text:0000000000002980 var_60          = qword ptr -60h
.text:0000000000002980 var_58          = qword ptr -58h
.text:0000000000002980 var_50          = qword ptr -50h
.text:0000000000002980 var_48          = qword ptr -48h
.text:0000000000002980 var_40          = qword ptr -40h
.text:0000000000002980
.text:0000000000002980 ; __unwind {
.text:0000000000002980                 push    r15
.text:0000000000002982                 push    r14
.text:0000000000002984                 mov     r11, rdx
.text:0000000000002987                 push    r13
.text:0000000000002989                 push    r12
.text:000000000000298B                 mov     r14, rdi
.text:000000000000298E                 push    rbp
.text:000000000000298F                 push    rbx
.text:0000000000002990                 mov     r12, rsi
.text:0000000000002993                 sub     rsp, 38h
.text:0000000000002997                 mov     r15, [r8]
.text:000000000000299A                 mov     rbx, fs:28h
.text:00000000000029A3                 mov     [rsp+68h+var_40], rbx
.text:00000000000029A8                 xor     ebx, ebx
.text:00000000000029AA                 test    rdi, rdi
.text:00000000000029AD                 mov     [rsp+68h+var_50], rcx
.text:00000000000029B2                 mov     [rsp+68h+var_58], r8
.text:00000000000029B7                 mov     [rsp+68h+var_48], r15
.text:00000000000029BC                 setnz   [rsp+68h+var_61]
.text:00000000000029C1                 jz      loc_2BF0
.text:00000000000029C7                 test    rdx, rdx
.text:00000000000029CA                 mov     edx, [rdi]
.text:00000000000029CC                 setnz   [rsp+68h+var_62]
.text:00000000000029D1                 movzx   eax, [rsp+68h+var_62]
.text:00000000000029D6                 test    edx, edx
.text:00000000000029D8                 setz    r13b
.text:00000000000029DC                 and     r13d, eax
.text:00000000000029DF
.text:00000000000029DF loc_29DF:                               ; CODE XREF: base32_decode_ctx+27B↓j
.text:00000000000029DF                 lea     rax, [r14+4]
.text:00000000000029E3                 lea     rbp, [rsp+68h+var_48]
.text:00000000000029E8                 lea     rbx, [rsp+68h+var_50]
.text:00000000000029ED                 mov     [rsp+68h+var_60], rax
.text:00000000000029F2
.text:00000000000029F2 loc_29F2:                               ; CODE XREF: base32_decode_ctx+250↓j
.text:00000000000029F2                 test    r13b, r13b
.text:00000000000029F5                 mov     rdx, r15
.text:00000000000029F8                 jnz     loc_2ACD
.text:00000000000029FE
.text:00000000000029FE loc_29FE:                               ; CODE XREF: base32_decode_ctx+167↓j
.text:00000000000029FE                 test    r11, r11
.text:0000000000002A01                 setz    al
.text:0000000000002A04                 and     al, [rsp+68h+var_62]
.text:0000000000002A08                 jnz     loc_2A90
.text:0000000000002A0E
.text:0000000000002A0E loc_2A0E:                               ; CODE XREF: base32_decode_ctx+10A↓j
.text:0000000000002A0E                 test    r11, r11
.text:0000000000002A11                 jz      loc_2AF0
.text:0000000000002A17                 cmp     byte ptr [r12], 0Ah
.text:0000000000002A1C                 jz      loc_2BC0
.text:0000000000002A22                 sub     rdx, r15
.text:0000000000002A25                 add     [rsp+68h+var_50], rdx
.text:0000000000002A2A                 test    r14, r14
.text:0000000000002A2D                 mov     [rsp+68h+var_48], r15
.text:0000000000002A32                 lea     r15, [r12+r11]
.text:0000000000002A36                 jnz     loc_2B09
.text:0000000000002A3C
.text:0000000000002A3C loc_2A3C:                               ; CODE XREF: base32_decode_ctx+269↓j
.text:0000000000002A3C                 mov     rdi, r12
.text:0000000000002A3F
.text:0000000000002A3F loc_2A3F:                               ; CODE XREF: base32_decode_ctx+1D1↓j
.text:0000000000002A3F                                         ; base32_decode_ctx+230↓j
.text:0000000000002A3F                 cmp     r11, 7
.text:0000000000002A43                 ja      short loc_2A57
.text:0000000000002A45                 cmp     [rsp+68h+var_61], 0
.text:0000000000002A4A                 jz      short loc_2A57
.text:0000000000002A4C                 cmp     [rsp+68h+var_62], 0
.text:0000000000002A51                 jnz     loc_2B57
.text:0000000000002A57
.text:0000000000002A57 loc_2A57:                               ; CODE XREF: base32_decode_ctx+C3↑j
.text:0000000000002A57                                         ; base32_decode_ctx+CA↑j ...
.text:0000000000002A57                 mov     rcx, rbp
.text:0000000000002A5A                 mov     rdx, rbx
.text:0000000000002A5D                 mov     rsi, r11
.text:0000000000002A60                 call    decode_8
.text:0000000000002A65                 test    al, al
.text:0000000000002A67                 jz      loc_2C1F
.text:0000000000002A6D                 mov     r11, r15
.text:0000000000002A70                 mov     r15, [rsp+68h+var_48]
.text:0000000000002A75                 sub     r11, r12
.text:0000000000002A78                 test    r13b, r13b
.text:0000000000002A7B                 mov     rdx, r15
.text:0000000000002A7E                 jnz     short loc_2ACD
.text:0000000000002A80                 test    r11, r11
.text:0000000000002A83                 setz    al
.text:0000000000002A86                 and     al, [rsp+68h+var_62]
.text:0000000000002A8A                 jz      short loc_2A0E
.text:0000000000002A8C                 nop     dword ptr [rax+00h]
.text:0000000000002A90
.text:0000000000002A90 loc_2A90:                               ; CODE XREF: base32_decode_ctx+88↑j
.text:0000000000002A90                                         ; base32_decode_ctx+1E1↓j ...
.text:0000000000002A90                 mov     rbx, [rsp+68h+var_58]
.text:0000000000002A95                 sub     [rbx], rdx
.text:0000000000002A98                 mov     rbx, [rsp+68h+var_40]
.text:0000000000002A9D                 xor     rbx, fs:28h
.text:0000000000002AA6                 jnz     loc_2C29
.text:0000000000002AAC                 add     rsp, 38h
.text:0000000000002AB0                 pop     rbx
.text:0000000000002AB1                 pop     rbp
.text:0000000000002AB2                 pop     r12
.text:0000000000002AB4                 pop     r13
.text:0000000000002AB6                 pop     r14
.text:0000000000002AB8                 pop     r15
.text:0000000000002ABA                 retn
.text:0000000000002ABA ; ---------------------------------------------------------------------------
.text:0000000000002ABB                 align 20h
.text:0000000000002AC0
.text:0000000000002AC0 loc_2AC0:                               ; CODE XREF: base32_decode_ctx+160↓j
.text:0000000000002AC0                 mov     r15, [rsp+68h+var_48]
.text:0000000000002AC5                 add     r12, 8
.text:0000000000002AC9                 sub     r11, 8
.text:0000000000002ACD
.text:0000000000002ACD loc_2ACD:                               ; CODE XREF: base32_decode_ctx+78↑j
.text:0000000000002ACD                                         ; base32_decode_ctx+FE↑j
.text:0000000000002ACD                 mov     rcx, rbp
.text:0000000000002AD0                 mov     rdx, rbx
.text:0000000000002AD3                 mov     rsi, r11
.text:0000000000002AD6                 mov     rdi, r12
.text:0000000000002AD9                 call    decode_8
.text:0000000000002ADE                 test    al, al
.text:0000000000002AE0                 jnz     short loc_2AC0
.text:0000000000002AE2                 mov     rdx, [rsp+68h+var_48]
.text:0000000000002AE7                 jmp     loc_29FE
.text:0000000000002AE7 ; ---------------------------------------------------------------------------
.text:0000000000002AEC                 align 10h
.text:0000000000002AF0
.text:0000000000002AF0 loc_2AF0:                               ; CODE XREF: base32_decode_ctx+91↑j
.text:0000000000002AF0                 sub     rdx, r15
.text:0000000000002AF3                 add     [rsp+68h+var_50], rdx
.text:0000000000002AF8                 test    r14, r14
.text:0000000000002AFB                 mov     [rsp+68h+var_48], r15
.text:0000000000002B00                 jz      loc_2C00
.text:0000000000002B06                 mov     r15, r12
.text:0000000000002B09
.text:0000000000002B09 loc_2B09:                               ; CODE XREF: base32_decode_ctx+B6↑j
.text:0000000000002B09                 mov     eax, [r14]
.text:0000000000002B0C                 cmp     eax, 8
.text:0000000000002B0F                 jz      short loc_2B70
.text:0000000000002B11                 test    eax, eax
.text:0000000000002B13                 jz      short loc_2B77
.text:0000000000002B15
.text:0000000000002B15 loc_2B15:                               ; CODE XREF: base32_decode_ctx+217↓j
.text:0000000000002B15                 cmp     r12, r15
.text:0000000000002B18                 jnb     short loc_2B46
.text:0000000000002B1A                 nop     word ptr [rax+rax+00h]
.text:0000000000002B20
.text:0000000000002B20 loc_2B20:                               ; CODE XREF: base32_decode_ctx+1C4↓j
.text:0000000000002B20                 add     r12, 1
.text:0000000000002B24                 movzx   edx, byte ptr [r12-1]
.text:0000000000002B2A                 cmp     dl, 0Ah
.text:0000000000002B2D                 jz      short loc_2B41
.text:0000000000002B2F                 lea     ecx, [rax+1]
.text:0000000000002B32                 cmp     ecx, 8
.text:0000000000002B35                 mov     [r14], ecx
.text:0000000000002B38                 mov     [r14+rax+4], dl
.text:0000000000002B3D                 jz      short loc_2BA0
.text:0000000000002B3F                 mov     eax, ecx
.text:0000000000002B41
.text:0000000000002B41 loc_2B41:                               ; CODE XREF: base32_decode_ctx+1AD↑j
.text:0000000000002B41                 cmp     r12, r15
.text:0000000000002B44                 jnz     short loc_2B20
.text:0000000000002B46
.text:0000000000002B46 loc_2B46:                               ; CODE XREF: base32_decode_ctx+198↑j
.text:0000000000002B46                 mov     r11d, eax
.text:0000000000002B49                 mov     rdi, [rsp+68h+var_60]
.text:0000000000002B4E                 test    r11, r11
.text:0000000000002B51                 jnz     loc_2A3F
.text:0000000000002B57
.text:0000000000002B57 loc_2B57:                               ; CODE XREF: base32_decode_ctx+D1↑j
.text:0000000000002B57                                         ; base32_decode_ctx+236↓j
.text:0000000000002B57                 mov     rdx, [rsp+68h+var_48]
.text:0000000000002B5C                 mov     eax, 1
.text:0000000000002B61                 jmp     loc_2A90
.text:0000000000002B61 ; ---------------------------------------------------------------------------
.text:0000000000002B66                 align 10h
.text:0000000000002B70
.text:0000000000002B70 loc_2B70:                               ; CODE XREF: base32_decode_ctx+18F↑j
.text:0000000000002B70                 mov     dword ptr [r14], 0
.text:0000000000002B77
.text:0000000000002B77 loc_2B77:                               ; CODE XREF: base32_decode_ctx+193↑j
.text:0000000000002B77                 cmp     r11, 7
.text:0000000000002B7B                 jle     short loc_2B94
.text:0000000000002B7D                 mov     edx, 8          ; n
.text:0000000000002B82                 mov     esi, 0Ah        ; c
.text:0000000000002B87                 mov     rdi, r12        ; s
.text:0000000000002B8A                 call    _memchr
.text:0000000000002B8F                 test    rax, rax
.text:0000000000002B92                 jz      short loc_2C0D
.text:0000000000002B94
.text:0000000000002B94 loc_2B94:                               ; CODE XREF: base32_decode_ctx+1FB↑j
.text:0000000000002B94                 mov     eax, [r14]
.text:0000000000002B97                 jmp     loc_2B15
.text:0000000000002B97 ; ---------------------------------------------------------------------------
.text:0000000000002B9C                 align 20h
.text:0000000000002BA0
.text:0000000000002BA0 loc_2BA0:                               ; CODE XREF: base32_decode_ctx+1BD↑j
.text:0000000000002BA0                 mov     eax, 8
.text:0000000000002BA5                 mov     rdi, [rsp+68h+var_60]
.text:0000000000002BAA                 mov     r11d, eax
.text:0000000000002BAD                 test    r11, r11
.text:0000000000002BB0                 jnz     loc_2A3F
.text:0000000000002BB6                 jmp     short loc_2B57
.text:0000000000002BB6 ; ---------------------------------------------------------------------------
.text:0000000000002BB8                 align 20h
.text:0000000000002BC0
.text:0000000000002BC0 loc_2BC0:                               ; CODE XREF: base32_decode_ctx+9C↑j
.text:0000000000002BC0                 test    r14, r14
.text:0000000000002BC3                 jz      short loc_2BD8
.text:0000000000002BC5                 add     r12, 1
.text:0000000000002BC9                 sub     r11, 1
.text:0000000000002BCD                 mov     r15, rdx
.text:0000000000002BD0                 jmp     loc_29F2
.text:0000000000002BD0 ; ---------------------------------------------------------------------------
.text:0000000000002BD5                 align 8
.text:0000000000002BD8
.text:0000000000002BD8 loc_2BD8:                               ; CODE XREF: base32_decode_ctx+243↑j
.text:0000000000002BD8                 sub     rdx, r15
.text:0000000000002BDB                 mov     [rsp+68h+var_48], r15
.text:0000000000002BE0                 add     [rsp+68h+var_50], rdx
.text:0000000000002BE5                 lea     r15, [r12+r11]
.text:0000000000002BE9                 jmp     loc_2A3C
.text:0000000000002BE9 ; ---------------------------------------------------------------------------
.text:0000000000002BEE                 align 10h
.text:0000000000002BF0
.text:0000000000002BF0 loc_2BF0:                               ; CODE XREF: base32_decode_ctx+41↑j
.text:0000000000002BF0                 mov     r13d, 1
.text:0000000000002BF6                 mov     [rsp+68h+var_62], 1
.text:0000000000002BFB                 jmp     loc_29DF
.text:0000000000002C00 ; ---------------------------------------------------------------------------
.text:0000000000002C00
.text:0000000000002C00 loc_2C00:                               ; CODE XREF: base32_decode_ctx+180↑j
.text:0000000000002C00                 mov     rdx, r15
.text:0000000000002C03                 mov     eax, 1
.text:0000000000002C08                 jmp     loc_2A90
.text:0000000000002C0D ; ---------------------------------------------------------------------------
.text:0000000000002C0D
.text:0000000000002C0D loc_2C0D:                               ; CODE XREF: base32_decode_ctx+212↑j
.text:0000000000002C0D                 mov     rdi, r12
.text:0000000000002C10                 mov     r11d, 8
.text:0000000000002C16                 add     r12, 8
.text:0000000000002C1A                 jmp     loc_2A57
.text:0000000000002C1F ; ---------------------------------------------------------------------------
.text:0000000000002C1F
.text:0000000000002C1F loc_2C1F:                               ; CODE XREF: base32_decode_ctx+E7↑j
.text:0000000000002C1F                 mov     rdx, [rsp+68h+var_48]
.text:0000000000002C24                 jmp     loc_2A90
.text:0000000000002C29 ; ---------------------------------------------------------------------------
.text:0000000000002C29
.text:0000000000002C29 loc_2C29:                               ; CODE XREF: base32_decode_ctx+126↑j
.text:0000000000002C29                 call    ___stack_chk_fail
.text:0000000000002C29 ; } // starts at 2980
.text:0000000000002C29 base32_decode_ctx endp
.text:0000000000002C29
.text:0000000000002C29 ; ---------------------------------------------------------------------------
.text:0000000000002C2E                 align 10h
.text:0000000000002C30
.text:0000000000002C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C30
.text:0000000000002C30
.text:0000000000002C30                 public base32_decode_alloc_ctx
.text:0000000000002C30 base32_decode_alloc_ctx proc near
.text:0000000000002C30
.text:0000000000002C30 var_39          = byte ptr -39h
.text:0000000000002C30 var_38          = qword ptr -38h
.text:0000000000002C30 var_30          = qword ptr -30h
.text:0000000000002C30
.text:0000000000002C30 ; __unwind {
.text:0000000000002C30                 push    r14
.text:0000000000002C32                 push    r13
.text:0000000000002C34                 mov     r14, rdx
.text:0000000000002C37                 push    r12
.text:0000000000002C39                 push    rbp
.text:0000000000002C3A                 mov     r12, rdi
.text:0000000000002C3D                 push    rbx
.text:0000000000002C3E                 mov     r13, rsi
.text:0000000000002C41                 mov     rbx, rcx
.text:0000000000002C44                 mov     rbp, r8
.text:0000000000002C47                 sub     rsp, 20h
.text:0000000000002C4B                 mov     rax, fs:28h
.text:0000000000002C54                 mov     [rsp+48h+var_30], rax
.text:0000000000002C59                 xor     eax, eax
.text:0000000000002C5B                 mov     rax, rdx
.text:0000000000002C5E                 shr     rax, 3
.text:0000000000002C62                 lea     rdi, [rax+rax*4+5] ; size
.text:0000000000002C67                 mov     [rsp+48h+var_38], rdi
.text:0000000000002C6C                 call    _malloc
.text:0000000000002C71                 test    rax, rax
.text:0000000000002C74                 mov     [rbx], rax
.text:0000000000002C77                 jz      short loc_2CA8
.text:0000000000002C79                 lea     r8, [rsp+48h+var_38]
.text:0000000000002C7E                 mov     rcx, rax
.text:0000000000002C81                 mov     rdx, r14
.text:0000000000002C84                 mov     rsi, r13
.text:0000000000002C87                 mov     rdi, r12
.text:0000000000002C8A                 call    base32_decode_ctx
.text:0000000000002C8F                 test    al, al
.text:0000000000002C91                 jz      short loc_2CD0
.text:0000000000002C93                 test    rbp, rbp
.text:0000000000002C96                 jz      short loc_2CA8
.text:0000000000002C98                 mov     rdx, [rsp+48h+var_38]
.text:0000000000002C9D                 mov     [rbp+0], rdx
.text:0000000000002CA1                 jmp     short loc_2CAD
.text:0000000000002CA1 ; ---------------------------------------------------------------------------
.text:0000000000002CA3                 align 8
.text:0000000000002CA8
.text:0000000000002CA8 loc_2CA8:                               ; CODE XREF: base32_decode_alloc_ctx+47↑j
.text:0000000000002CA8                                         ; base32_decode_alloc_ctx+66↑j
.text:0000000000002CA8                 mov     eax, 1
.text:0000000000002CAD
.text:0000000000002CAD loc_2CAD:                               ; CODE XREF: base32_decode_alloc_ctx+71↑j
.text:0000000000002CAD                                         ; base32_decode_alloc_ctx+B8↓j
.text:0000000000002CAD                 mov     rcx, [rsp+48h+var_30]
.text:0000000000002CB2                 xor     rcx, fs:28h
.text:0000000000002CBB                 jnz     short loc_2CEA
.text:0000000000002CBD                 add     rsp, 20h
.text:0000000000002CC1                 pop     rbx
.text:0000000000002CC2                 pop     rbp
.text:0000000000002CC3                 pop     r12
.text:0000000000002CC5                 pop     r13
.text:0000000000002CC7                 pop     r14
.text:0000000000002CC9                 retn
.text:0000000000002CC9 ; ---------------------------------------------------------------------------
.text:0000000000002CCA                 align 10h
.text:0000000000002CD0
.text:0000000000002CD0 loc_2CD0:                               ; CODE XREF: base32_decode_alloc_ctx+61↑j
.text:0000000000002CD0                 mov     rdi, [rbx]      ; ptr
.text:0000000000002CD3                 mov     [rsp+48h+var_39], al
.text:0000000000002CD7                 call    _free
.text:0000000000002CDC                 mov     qword ptr [rbx], 0
.text:0000000000002CE3                 movzx   eax, [rsp+48h+var_39]
.text:0000000000002CE8                 jmp     short loc_2CAD
.text:0000000000002CEA ; ---------------------------------------------------------------------------
.text:0000000000002CEA
.text:0000000000002CEA loc_2CEA:                               ; CODE XREF: base32_decode_alloc_ctx+8B↑j
.text:0000000000002CEA                 call    ___stack_chk_fail
.text:0000000000002CEA ; } // starts at 2C30
.text:0000000000002CEA base32_decode_alloc_ctx endp
.text:0000000000002CEA
.text:0000000000002CEA ; ---------------------------------------------------------------------------
.text:0000000000002CEF                 align 10h
.text:0000000000002CF0
.text:0000000000002CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CF0
.text:0000000000002CF0
.text:0000000000002CF0                 public close_stdout_set_file_name
.text:0000000000002CF0 close_stdout_set_file_name proc near
.text:0000000000002CF0 ; __unwind {
.text:0000000000002CF0                 mov     cs:file_name, rdi
.text:0000000000002CF7                 retn
.text:0000000000002CF7 ; } // starts at 2CF0
.text:0000000000002CF7 close_stdout_set_file_name endp
.text:0000000000002CF7
.text:0000000000002CF7 ; ---------------------------------------------------------------------------
.text:0000000000002CF8                 align 20h
.text:0000000000002D00
.text:0000000000002D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D00
.text:0000000000002D00
.text:0000000000002D00                 public close_stdout_set_ignore_EPIPE
.text:0000000000002D00 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002D00 ; __unwind {
.text:0000000000002D00                 mov     cs:ignore_EPIPE, dil
.text:0000000000002D07                 retn
.text:0000000000002D07 ; } // starts at 2D00
.text:0000000000002D07 close_stdout_set_ignore_EPIPE endp
.text:0000000000002D07
.text:0000000000002D07 ; ---------------------------------------------------------------------------
.text:0000000000002D08                 align 10h
.text:0000000000002D10
.text:0000000000002D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D10
.text:0000000000002D10 ; Attributes: info_from_lumina
.text:0000000000002D10
.text:0000000000002D10 ; void __cdecl close_stdout()
.text:0000000000002D10                 public close_stdout
.text:0000000000002D10 close_stdout    proc near               ; DATA XREF: main+63↑o
.text:0000000000002D10 ; __unwind {
.text:0000000000002D10                 push    rbp
.text:0000000000002D11                 push    rbx
.text:0000000000002D12                 sub     rsp, 8
.text:0000000000002D16                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002D1D                 call    close_stream
.text:0000000000002D22                 test    eax, eax
.text:0000000000002D24                 jz      short loc_2D3C
.text:0000000000002D26                 call    ___errno_location
.text:0000000000002D2B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002D32                 mov     rbx, rax
.text:0000000000002D35                 jz      short loc_2D53
.text:0000000000002D37                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000002D3A                 jnz     short loc_2D53
.text:0000000000002D3C
.text:0000000000002D3C loc_2D3C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000002D3C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002D43                 call    close_stream
.text:0000000000002D48                 test    eax, eax
.text:0000000000002D4A                 jnz     short loc_2D92
.text:0000000000002D4C                 add     rsp, 8
.text:0000000000002D50                 pop     rbx
.text:0000000000002D51                 pop     rbp
.text:0000000000002D52                 retn
.text:0000000000002D53 ; ---------------------------------------------------------------------------
.text:0000000000002D53
.text:0000000000002D53 loc_2D53:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002D53                                         ; close_stdout+2A↑j
.text:0000000000002D53                 lea     rsi, aWriteError ; "write error"
.text:0000000000002D5A                 xor     edi, edi        ; domainname
.text:0000000000002D5C                 mov     edx, 5          ; category
.text:0000000000002D61                 call    _dcgettext
.text:0000000000002D66                 mov     rdi, cs:file_name
.text:0000000000002D6D                 mov     rbp, rax
.text:0000000000002D70                 test    rdi, rdi
.text:0000000000002D73                 jz      short loc_2D9D
.text:0000000000002D75                 call    quotearg_colon
.text:0000000000002D7A                 mov     esi, [rbx]      ; errnum
.text:0000000000002D7C                 lea     rdx, aS         ; "%s: "
.text:0000000000002D83                 mov     rcx, rax
.text:0000000000002D86                 mov     r8, rbp
.text:0000000000002D89                 xor     edi, edi        ; status
.text:0000000000002D8B                 xor     eax, eax
.text:0000000000002D8D                 call    _error
.text:0000000000002D92
.text:0000000000002D92 loc_2D92:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002D92                                         ; close_stdout+A2↓j
.text:0000000000002D92                 mov     edi, cs:exit_failure ; status
.text:0000000000002D98                 call    __exit
.text:0000000000002D9D ; ---------------------------------------------------------------------------
.text:0000000000002D9D
.text:0000000000002D9D loc_2D9D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000002D9D                 mov     esi, [rbx]      ; errnum
.text:0000000000002D9F                 lea     rdx, format     ; format
.text:0000000000002DA6                 mov     rcx, rax
.text:0000000000002DA9                 xor     edi, edi        ; status
.text:0000000000002DAB                 xor     eax, eax
.text:0000000000002DAD                 call    _error
.text:0000000000002DB2                 jmp     short loc_2D92
.text:0000000000002DB2 ; } // starts at 2D10
.text:0000000000002DB2 close_stdout    endp
.text:0000000000002DB2
.text:0000000000002DB2 ; ---------------------------------------------------------------------------
.text:0000000000002DB4                 align 20h
.text:0000000000002DC0
.text:0000000000002DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DC0
.text:0000000000002DC0
.text:0000000000002DC0 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000002DC0                 public fdadvise
.text:0000000000002DC0 fdadvise        proc near
.text:0000000000002DC0 ; __unwind {
.text:0000000000002DC0                 jmp     _posix_fadvise
.text:0000000000002DC0 ; } // starts at 2DC0
.text:0000000000002DC0 fdadvise        endp
.text:0000000000002DC0
.text:0000000000002DC0 ; ---------------------------------------------------------------------------
.text:0000000000002DC5                 align 10h
.text:0000000000002DD0
.text:0000000000002DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DD0
.text:0000000000002DD0
.text:0000000000002DD0                 public fadvise
.text:0000000000002DD0 fadvise         proc near               ; CODE XREF: main+1EA↑p
.text:0000000000002DD0 ; __unwind {
.text:0000000000002DD0                 test    rdi, rdi
.text:0000000000002DD3                 jz      short locret_2DF0
.text:0000000000002DD5                 push    rbx
.text:0000000000002DD6                 mov     ebx, esi
.text:0000000000002DD8                 call    _fileno
.text:0000000000002DDD                 mov     ecx, ebx        ; advise
.text:0000000000002DDF                 xor     edx, edx        ; len
.text:0000000000002DE1                 xor     esi, esi        ; offset
.text:0000000000002DE3                 pop     rbx
.text:0000000000002DE4                 mov     edi, eax        ; fd
.text:0000000000002DE6                 jmp     _posix_fadvise
.text:0000000000002DE6 ; ---------------------------------------------------------------------------
.text:0000000000002DEB                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 locret_2DF0:                            ; CODE XREF: fadvise+3↑j
.text:0000000000002DF0                 rep retn
.text:0000000000002DF0 ; } // starts at 2DD0
.text:0000000000002DF0 fadvise         endp
.text:0000000000002DF0
.text:0000000000002DF0 ; ---------------------------------------------------------------------------
.text:0000000000002DF2                 align 20h
.text:0000000000002E00
.text:0000000000002E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E00
.text:0000000000002E00
.text:0000000000002E00                 public set_program_name
.text:0000000000002E00 set_program_name proc near              ; CODE XREF: main+2E↑p
.text:0000000000002E00 ; __unwind {
.text:0000000000002E00                 test    rdi, rdi
.text:0000000000002E03                 push    rbx
.text:0000000000002E04                 jz      short loc_2E7D
.text:0000000000002E06                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000002E0B                 mov     rbx, rdi
.text:0000000000002E0E                 call    _strrchr
.text:0000000000002E13                 test    rax, rax
.text:0000000000002E16                 jz      short loc_2E6D
.text:0000000000002E18                 lea     r8, [rax+1]
.text:0000000000002E1C                 mov     rdx, r8
.text:0000000000002E1F                 sub     rdx, rbx
.text:0000000000002E22                 cmp     rdx, 6
.text:0000000000002E26                 jle     short loc_2E6D
.text:0000000000002E28                 lea     rsi, [rax-6]
.text:0000000000002E2C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002E33                 mov     ecx, 7
.text:0000000000002E38                 repe cmpsb
.text:0000000000002E3A                 setnbe  dl
.text:0000000000002E3D                 sbb     dl, 0
.text:0000000000002E40                 test    dl, dl
.text:0000000000002E42                 jnz     short loc_2E6D
.text:0000000000002E44                 lea     rdi, aLt        ; "lt-"
.text:0000000000002E4B                 mov     ecx, 3
.text:0000000000002E50                 mov     rsi, r8
.text:0000000000002E53                 mov     rbx, r8
.text:0000000000002E56                 repe cmpsb
.text:0000000000002E58                 setnbe  dl
.text:0000000000002E5B                 sbb     dl, 0
.text:0000000000002E5E                 test    dl, dl
.text:0000000000002E60                 jnz     short loc_2E6D
.text:0000000000002E62                 lea     rbx, [rax+4]
.text:0000000000002E66                 mov     cs:__bss_start, rbx
.text:0000000000002E6D
.text:0000000000002E6D loc_2E6D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000002E6D                                         ; set_program_name+26↑j ...
.text:0000000000002E6D                 mov     cs:program_name, rbx
.text:0000000000002E74                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000002E7B                 pop     rbx
.text:0000000000002E7C                 retn
.text:0000000000002E7D ; ---------------------------------------------------------------------------
.text:0000000000002E7D
.text:0000000000002E7D loc_2E7D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000002E7D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002E84                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000002E8B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002E90                 mov     esi, 1          ; size
.text:0000000000002E95                 call    _fwrite
.text:0000000000002E9A                 call    _abort
.text:0000000000002E9A ; } // starts at 2E00
.text:0000000000002E9A set_program_name endp
.text:0000000000002E9A
.text:0000000000002E9A ; ---------------------------------------------------------------------------
.text:0000000000002E9F                 align 20h
.text:0000000000002EA0
.text:0000000000002EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002EA0
.text:0000000000002EA0 ; Attributes: info_from_lumina
.text:0000000000002EA0
.text:0000000000002EA0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002EA0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002EA0                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002EA0 ; __unwind {
.text:0000000000002EA0                 push    rbp
.text:0000000000002EA1                 push    rbx
.text:0000000000002EA2                 mov     rbp, rdi
.text:0000000000002EA5                 mov     ebx, esi
.text:0000000000002EA7                 sub     rsp, 8
.text:0000000000002EAB                 call    locale_charset
.text:0000000000002EB0                 movzx   edx, byte ptr [rax]
.text:0000000000002EB3                 and     edx, 0FFFFFFDFh
.text:0000000000002EB6                 cmp     dl, 55h ; 'U'
.text:0000000000002EB9                 jz      short loc_2F30
.text:0000000000002EBB                 cmp     dl, 47h ; 'G'
.text:0000000000002EBE                 jz      short loc_2EE0
.text:0000000000002EC0
.text:0000000000002EC0 loc_2EC0:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002EC0                                         ; gettext_quote+50↓j ...
.text:0000000000002EC0                 lea     rax, unk_63BB
.text:0000000000002EC7                 lea     rdx, asc_63BD   ; "'"
.text:0000000000002ECE                 cmp     ebx, 9
.text:0000000000002ED1                 cmovnz  rax, rdx
.text:0000000000002ED5                 add     rsp, 8
.text:0000000000002ED9                 pop     rbx
.text:0000000000002EDA                 pop     rbp
.text:0000000000002EDB                 retn
.text:0000000000002EDB ; ---------------------------------------------------------------------------
.text:0000000000002EDC                 align 20h
.text:0000000000002EE0
.text:0000000000002EE0 loc_2EE0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002EE0                 movzx   edx, byte ptr [rax+1]
.text:0000000000002EE4                 and     edx, 0FFFFFFDFh
.text:0000000000002EE7                 cmp     dl, 42h ; 'B'
.text:0000000000002EEA                 jnz     short loc_2EC0
.text:0000000000002EEC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002EF0                 jnz     short loc_2EC0
.text:0000000000002EF2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002EF6                 jnz     short loc_2EC0
.text:0000000000002EF8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000002EFC                 jnz     short loc_2EC0
.text:0000000000002EFE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002F02                 jnz     short loc_2EC0
.text:0000000000002F04                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002F08                 jnz     short loc_2EC0
.text:0000000000002F0A                 cmp     byte ptr [rax+7], 0
.text:0000000000002F0E                 jnz     short loc_2EC0
.text:0000000000002F10                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002F14                 lea     rax, unk_63B4
.text:0000000000002F1B                 lea     rdx, unk_63B8
.text:0000000000002F22                 cmovnz  rax, rdx
.text:0000000000002F26                 add     rsp, 8
.text:0000000000002F2A                 pop     rbx
.text:0000000000002F2B                 pop     rbp
.text:0000000000002F2C                 retn
.text:0000000000002F2C ; ---------------------------------------------------------------------------
.text:0000000000002F2D                 align 10h
.text:0000000000002F30
.text:0000000000002F30 loc_2F30:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002F30                 movzx   edx, byte ptr [rax+1]
.text:0000000000002F34                 and     edx, 0FFFFFFDFh
.text:0000000000002F37                 cmp     dl, 54h ; 'T'
.text:0000000000002F3A                 jnz     short loc_2EC0
.text:0000000000002F3C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002F40                 and     edx, 0FFFFFFDFh
.text:0000000000002F43                 cmp     dl, 46h ; 'F'
.text:0000000000002F46                 jnz     loc_2EC0
.text:0000000000002F4C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002F50                 jnz     loc_2EC0
.text:0000000000002F56                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000002F5A                 jnz     loc_2EC0
.text:0000000000002F60                 cmp     byte ptr [rax+5], 0
.text:0000000000002F64                 jnz     loc_2EC0
.text:0000000000002F6A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002F6E                 lea     rax, unk_63AC
.text:0000000000002F75                 lea     rdx, unk_63B0
.text:0000000000002F7C                 cmovnz  rax, rdx
.text:0000000000002F80                 add     rsp, 8
.text:0000000000002F84                 pop     rbx
.text:0000000000002F85                 pop     rbp
.text:0000000000002F86                 retn
.text:0000000000002F86 ; } // starts at 2EA0
.text:0000000000002F86 gettext_quote   endp
.text:0000000000002F86
.text:0000000000002F86 ; ---------------------------------------------------------------------------
.text:0000000000002F87                 align 10h
.text:0000000000002F90
.text:0000000000002F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F90
.text:0000000000002F90 ; Attributes: info_from_lumina
.text:0000000000002F90
.text:0000000000002F90 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002F90 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002F90                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002F90
.text:0000000000002F90 var_E0          = dword ptr -0E0h
.text:0000000000002F90 var_DB          = byte ptr -0DBh
.text:0000000000002F90 var_DA          = byte ptr -0DAh
.text:0000000000002F90 var_D9          = byte ptr -0D9h
.text:0000000000002F90 s               = qword ptr -0D8h
.text:0000000000002F90 n               = qword ptr -0D0h
.text:0000000000002F90 var_C8          = qword ptr -0C8h
.text:0000000000002F90 ps              = qword ptr -0C0h
.text:0000000000002F90 var_B8          = qword ptr -0B8h
.text:0000000000002F90 var_B0          = qword ptr -0B0h
.text:0000000000002F90 var_A8          = qword ptr -0A8h
.text:0000000000002F90 s2              = qword ptr -0A0h
.text:0000000000002F90 var_98          = qword ptr -98h
.text:0000000000002F90 var_90          = qword ptr -90h
.text:0000000000002F90 var_88          = qword ptr -88h
.text:0000000000002F90 var_80          = qword ptr -80h
.text:0000000000002F90 var_78          = qword ptr -78h
.text:0000000000002F90 var_70          = dword ptr -70h
.text:0000000000002F90 var_6C          = byte ptr -6Ch
.text:0000000000002F90 var_6B          = byte ptr -6Bh
.text:0000000000002F90 var_6A          = byte ptr -6Ah
.text:0000000000002F90 var_69          = byte ptr -69h
.text:0000000000002F90 var_68          = qword ptr -68h
.text:0000000000002F90 var_60          = qword ptr -60h
.text:0000000000002F90 wc              = dword ptr -4Ch
.text:0000000000002F90 var_48          = qword ptr -48h
.text:0000000000002F90 var_40          = qword ptr -40h
.text:0000000000002F90 arg_0           = qword ptr  8
.text:0000000000002F90 arg_8           = qword ptr  10h
.text:0000000000002F90 arg_10          = qword ptr  18h
.text:0000000000002F90
.text:0000000000002F90 ; __unwind {
.text:0000000000002F90                 push    r15
.text:0000000000002F92                 push    r14
.text:0000000000002F94                 mov     r15d, r8d
.text:0000000000002F97                 push    r13
.text:0000000000002F99                 push    r12
.text:0000000000002F9B                 mov     r14, rdi
.text:0000000000002F9E                 push    rbp
.text:0000000000002F9F                 push    rbx
.text:0000000000002FA0                 mov     ebx, r9d
.text:0000000000002FA3                 mov     r13, rsi
.text:0000000000002FA6                 mov     rbp, rcx
.text:0000000000002FA9                 and     ebx, 2
.text:0000000000002FAC                 sub     rsp, 0B8h
.text:0000000000002FB3                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002FBB                 mov     [rsp+0E8h+s], rdx
.text:0000000000002FC0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002FC5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002FCA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002FCF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002FD7                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002FDC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002FE4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002FE9                 mov     rax, fs:28h
.text:0000000000002FF2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002FFA                 xor     eax, eax
.text:0000000000002FFC                 call    ___ctype_get_mb_cur_max
.text:0000000000003001                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003005                 mov     [rsp+0E8h+var_90], rax
.text:000000000000300A                 ja      def_3021        ; jumptable 00000000000121F1 default case
.text:0000000000003010                 lea     rcx, jpt_3021
.text:0000000000003017                 mov     edx, r15d
.text:000000000000301A                 movsxd  rax, ds:(jpt_3021 - 6420h)[rcx+rdx*4]
.text:000000000000301E                 add     rax, rcx
.text:0000000000003021                 jmp     rax             ; switch jump
.text:0000000000003023 ; ---------------------------------------------------------------------------
.text:0000000000003023
.text:0000000000003023 loc_3023:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003023                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003023                                         ; DATA XREF: ...
.text:0000000000003023                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003028                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000302D                 xor     r12d, r12d
.text:0000000000003030                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003039                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000303E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003043
.text:0000000000003043 loc_3043:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003043                 lea     rax, asc_63BD   ; "'"
.text:000000000000304A                 mov     [rsp+0E8h+n], 1
.text:0000000000003053                 xor     r15d, r15d
.text:0000000000003056                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000305E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003063
.text:0000000000003063 loc_3063:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003063                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003063                 xor     r11d, r11d
.text:0000000000003066                 mov     rax, rbp
.text:0000000000003069                 mov     r8d, r12d
.text:000000000000306C                 mov     rbp, r11
.text:000000000000306F                 mov     r11, rax
.text:0000000000003072                 nop     word ptr [rax+rax+00h]
.text:0000000000003078
.text:0000000000003078 loc_3078:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003078                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003078                 cmp     r11, rbp
.text:000000000000307B                 setnz   r12b
.text:000000000000307F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003083                 jnz     short loc_3092
.text:0000000000003085                 mov     rax, [rsp+0E8h+s]
.text:000000000000308A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000308E                 setnz   r12b
.text:0000000000003092
.text:0000000000003092 loc_3092:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003092                 test    r12b, r12b
.text:0000000000003095                 jz      loc_36F0
.text:000000000000309B                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000030A0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000030A5                 lea     r9, [rdi+rbp]
.text:00000000000030A9                 setnz   al
.text:00000000000030AC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000030B0                 mov     r10d, eax
.text:00000000000030B3                 jz      loc_3160
.text:00000000000030B9                 mov     rax, [rsp+0E8h+n]
.text:00000000000030BE                 test    rax, rax
.text:00000000000030C1                 jz      loc_34F0
.text:00000000000030C7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000030CB                 lea     rbx, [rbp+rax+0]
.text:00000000000030D0                 jnz     short loc_3100
.text:00000000000030D2                 cmp     rax, 1
.text:00000000000030D6                 jbe     short loc_3100
.text:00000000000030D8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000030DD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000030E2                 mov     [rsp+0E8h+ps], r9
.text:00000000000030E7                 call    _strlen
.text:00000000000030EC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000030F2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000030F8                 mov     r11, rax
.text:00000000000030FB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003100                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003100                 cmp     rbx, r11
.text:0000000000003103                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003108                 ja      loc_36C0
.text:000000000000310E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003113                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003118                 mov     rdi, r9         ; s1
.text:000000000000311B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003120                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003125                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000312A                 call    _memcmp
.text:000000000000312F                 test    eax, eax
.text:0000000000003131                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003136                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000313C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003141                 jnz     loc_36C0
.text:0000000000003147                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000314C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003152                 jnz     loc_40D5
.text:0000000000003158                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003160
.text:0000000000003160 loc_3160:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003160                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003160                 movzx   ebx, byte ptr [r9]
.text:0000000000003164                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003167                 ja      def_317E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000316D                 lea     rcx, jpt_317E
.text:0000000000003174                 movzx   edx, bl
.text:0000000000003177                 movsxd  rax, ds:(jpt_317E - 644Ch)[rcx+rdx*4]
.text:000000000000317B                 add     rax, rcx
.text:000000000000317E                 jmp     rax             ; switch jump
.text:0000000000003180 ; ---------------------------------------------------------------------------
.text:0000000000003180
.text:0000000000003180 loc_3180:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003180                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003180                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003183
.text:0000000000003183 loc_3183:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003183                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:0000000000003183                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003187                 setnz   al
.text:000000000000318A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000318E                 jnz     short loc_319C
.text:0000000000003190                 mov     rax, [rsp+0E8h+s]
.text:0000000000003195                 cmp     byte ptr [rax+1], 0
.text:0000000000003199                 setnz   al
.text:000000000000319C
.text:000000000000319C loc_319C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000319C                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000031A1                 setz    dl
.text:00000000000031A4                 test    al, al
.text:00000000000031A6                 jz      loc_33F8
.text:00000000000031AC
.text:00000000000031AC loc_31AC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000031AC                 xor     r12d, r12d
.text:00000000000031AF                 xor     eax, eax
.text:00000000000031B1                 nop     dword ptr [rax+00000000h]
.text:00000000000031B8
.text:00000000000031B8 loc_31B8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000031B8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000031B8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000031BD                 jnz     loc_32D2
.text:00000000000031C3                 test    dl, dl
.text:00000000000031C5                 jnz     loc_32D2
.text:00000000000031CB
.text:00000000000031CB loc_31CB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000031CB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000031D0                 test    rsi, rsi
.text:00000000000031D3                 jz      short loc_31E9
.text:00000000000031D5                 mov     edx, ebx
.text:00000000000031D7                 shr     dl, 5
.text:00000000000031DA                 movzx   edx, dl
.text:00000000000031DD                 mov     edx, [rsi+rdx*4]
.text:00000000000031E0                 bt      edx, ebx
.text:00000000000031E3                 jb      loc_3333
.text:00000000000031E9
.text:00000000000031E9 loc_31E9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000031E9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000031E9                 test    r10b, r10b
.text:00000000000031EC                 jnz     loc_3333
.text:00000000000031F2                 xor     eax, 1
.text:00000000000031F5                 add     rbp, 1
.text:00000000000031F9                 and     eax, r8d
.text:00000000000031FC
.text:00000000000031FC loc_31FC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000031FC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000031FC                 test    al, al
.text:00000000000031FE                 jz      short loc_3220
.text:0000000000003200                 cmp     r13, r15
.text:0000000000003203                 jbe     short loc_320A
.text:0000000000003205                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000320A
.text:000000000000320A loc_320A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000320A                 lea     rax, [r15+1]
.text:000000000000320E                 cmp     r13, rax
.text:0000000000003211                 jbe     short loc_3219
.text:0000000000003213                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003219
.text:0000000000003219 loc_3219:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003219                 add     r15, 2
.text:000000000000321D                 xor     r8d, r8d
.text:0000000000003220
.text:0000000000003220 loc_3220:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003220                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003220                 cmp     r15, r13
.text:0000000000003223                 jnb     short loc_3229
.text:0000000000003225                 mov     [r14+r15], bl
.text:0000000000003229
.text:0000000000003229 loc_3229:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003229                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000322E                 add     r15, 1
.text:0000000000003232                 mov     eax, 0
.text:0000000000003237                 test    r12b, r12b
.text:000000000000323A                 cmovz   edi, eax
.text:000000000000323D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003242                 jmp     loc_3078
.text:0000000000003242 ; ---------------------------------------------------------------------------
.text:0000000000003247                 align 10h
.text:0000000000003250
.text:0000000000003250 loc_3250:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003250                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003250                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003253
.text:0000000000003253 loc_3253:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003253                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:0000000000003253                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003257                 cmp     eax, 2
.text:000000000000325A                 jz      loc_3818
.text:0000000000003260                 cmp     eax, 5
.text:0000000000003263                 jz      loc_37D8
.text:0000000000003269                 cmp     eax, 2
.text:000000000000326C                 mov     ebx, 3Fh ; '?'
.text:0000000000003271                 setz    dl
.text:0000000000003274                 xor     r12d, r12d
.text:0000000000003277                 xor     eax, eax
.text:0000000000003279                 jmp     loc_31B8
.text:0000000000003279 ; ---------------------------------------------------------------------------
.text:000000000000327E                 align 20h
.text:0000000000003280
.text:0000000000003280 loc_3280:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003280                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003280                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003283
.text:0000000000003283 loc_3283:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003283                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:0000000000003283                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003288                 jz      loc_3790
.text:000000000000328E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003293                 xor     edx, edx
.text:0000000000003295                 xor     eax, eax
.text:0000000000003297                 mov     ebx, 27h ; '''
.text:000000000000329C                 jmp     loc_31B8
.text:000000000000329C ; ---------------------------------------------------------------------------
.text:00000000000032A1                 align 8
.text:00000000000032A8
.text:00000000000032A8 loc_32A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032A8                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:00000000000032A8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000032AD                 mov     ebx, 74h ; 't'
.text:00000000000032B2
.text:00000000000032B2 loc_32B2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000032B2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000032B2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000032B7                 setz    al
.text:00000000000032BA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000032BE                 jnz     loc_340E
.text:00000000000032C4
.text:00000000000032C4 loc_32C4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000032C4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000032C4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000032C9                 jnz     short loc_3330
.text:00000000000032CB
.text:00000000000032CB loc_32CB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000032CB                 mov     ebx, edx
.text:00000000000032CD                 xor     r12d, r12d
.text:00000000000032D0                 xor     eax, eax
.text:00000000000032D2
.text:00000000000032D2 loc_32D2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000032D2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000032D2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000032D7                 jnz     loc_31CB
.text:00000000000032DD                 jmp     loc_31E9
.text:00000000000032DD ; ---------------------------------------------------------------------------
.text:00000000000032E2                 align 8
.text:00000000000032E8
.text:00000000000032E8 loc_32E8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032E8                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:00000000000032E8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000032ED                 mov     ebx, 62h ; 'b'
.text:00000000000032F2                 jmp     short loc_32C4
.text:00000000000032F2 ; ---------------------------------------------------------------------------
.text:00000000000032F4                 align 8
.text:00000000000032F8
.text:00000000000032F8 loc_32F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032F8                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:00000000000032F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000032FD                 jz      loc_36D0
.text:0000000000003303                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003308                 jz      loc_3520
.text:000000000000330E
.text:000000000000330E loc_330E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000330E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003313                 jz      loc_3520
.text:0000000000003319                 cmp     [rsp+0E8h+n], 0
.text:000000000000331F                 jnz     loc_36DB
.text:0000000000003325                 mov     ebx, 5Ch ; '\'
.text:000000000000332A                 nop     word ptr [rax+rax+00h]
.text:0000000000003330
.text:0000000000003330 loc_3330:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003330                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003330                 xor     r12d, r12d
.text:0000000000003333
.text:0000000000003333 loc_3333:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003333                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003333                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003338                 setz    dl
.text:000000000000333B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003340                 mov     eax, edx
.text:0000000000003342                 jnz     loc_3B98
.text:0000000000003348                 mov     eax, r8d
.text:000000000000334B                 xor     eax, 1
.text:000000000000334E                 and     al, dl
.text:0000000000003350                 jz      short loc_3381
.text:0000000000003352                 cmp     r13, r15
.text:0000000000003355                 jbe     short loc_335C
.text:0000000000003357                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000335C
.text:000000000000335C loc_335C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000335C                 lea     rdx, [r15+1]
.text:0000000000003360                 cmp     r13, rdx
.text:0000000000003363                 jbe     short loc_336B
.text:0000000000003365                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000336B
.text:000000000000336B loc_336B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000336B                 lea     rdx, [r15+2]
.text:000000000000336F                 cmp     r13, rdx
.text:0000000000003372                 jbe     short loc_337A
.text:0000000000003374                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000337A
.text:000000000000337A loc_337A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000337A                 add     r15, 3
.text:000000000000337E                 mov     r8d, eax
.text:0000000000003381
.text:0000000000003381 loc_3381:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003381                 cmp     r13, r15
.text:0000000000003384                 jbe     short loc_338B
.text:0000000000003386                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000338B
.text:000000000000338B loc_338B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000338B                 add     r15, 1
.text:000000000000338F                 add     rbp, 1
.text:0000000000003393                 jmp     loc_3220
.text:0000000000003393 ; ---------------------------------------------------------------------------
.text:0000000000003398                 align 20h
.text:00000000000033A0
.text:00000000000033A0 loc_33A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033A0                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:00000000000033A0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000033A5                 jnz     loc_3573
.text:00000000000033AB                 xor     edx, edx
.text:00000000000033AD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000033B2                 jz      loc_32CB
.text:00000000000033B8                 add     rbp, 1
.text:00000000000033BC                 jmp     loc_3078
.text:00000000000033BC ; ---------------------------------------------------------------------------
.text:00000000000033C1                 align 8
.text:00000000000033C8
.text:00000000000033C8 loc_33C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033C8                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:00000000000033C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000033CD                 setz    dl
.text:00000000000033D0                 xor     eax, eax
.text:00000000000033D2                 jmp     loc_31B8
.text:00000000000033D2 ; ---------------------------------------------------------------------------
.text:00000000000033D7                 align 20h
.text:00000000000033E0
.text:00000000000033E0 loc_33E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033E0                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:00000000000033E0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000033E5                 mov     ebx, 61h ; 'a'
.text:00000000000033EA                 jmp     loc_32C4
.text:00000000000033EA ; ---------------------------------------------------------------------------
.text:00000000000033EF                 align 10h
.text:00000000000033F0
.text:00000000000033F0 loc_33F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033F0                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:00000000000033F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000033F5                 setz    dl
.text:00000000000033F8
.text:00000000000033F8 loc_33F8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000033F8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000033F8                 test    rbp, rbp
.text:00000000000033FB                 jnz     loc_31AC
.text:0000000000003401
.text:0000000000003401 loc_3401:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003401                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003401                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003406                 and     al, dl
.text:0000000000003408                 jz      loc_31B8
.text:000000000000340E
.text:000000000000340E loc_340E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000340E                 mov     rbp, r11
.text:0000000000003411                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003419                 jmp     loc_3B19
.text:0000000000003419 ; ---------------------------------------------------------------------------
.text:000000000000341E                 align 20h
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003420                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:0000000000003420                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003425                 setz    dl
.text:0000000000003428                 xor     r12d, r12d
.text:000000000000342B                 jmp     short loc_3401
.text:000000000000342B ; ---------------------------------------------------------------------------
.text:000000000000342D                 align 10h
.text:0000000000003430
.text:0000000000003430 loc_3430:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003430                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:0000000000003430                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003435                 mov     ebx, 20h ; ' '
.text:000000000000343A                 setz    dl
.text:000000000000343D                 jmp     short loc_3401
.text:000000000000343D ; ---------------------------------------------------------------------------
.text:000000000000343F                 align 20h
.text:0000000000003440
.text:0000000000003440 loc_3440:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003440                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:0000000000003440                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003445                 mov     ebx, 72h ; 'r'
.text:000000000000344A                 jmp     loc_32B2
.text:000000000000344A ; ---------------------------------------------------------------------------
.text:000000000000344F                 align 10h
.text:0000000000003450
.text:0000000000003450 loc_3450:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003450                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:0000000000003450                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003455                 mov     ebx, 66h ; 'f'
.text:000000000000345A                 jmp     loc_32C4
.text:000000000000345A ; ---------------------------------------------------------------------------
.text:000000000000345F                 align 20h
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003460                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:0000000000003460                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003465                 mov     ebx, 76h ; 'v'
.text:000000000000346A                 jmp     loc_32C4
.text:000000000000346A ; ---------------------------------------------------------------------------
.text:000000000000346F                 align 10h
.text:0000000000003470
.text:0000000000003470 loc_3470:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003470                                         ; DATA XREF: .rodata:jpt_317E↓o
.text:0000000000003470                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003475                 mov     ebx, 6Eh ; 'n'
.text:000000000000347A                 jmp     loc_32B2
.text:000000000000347A ; ---------------------------------------------------------------------------
.text:000000000000347F                 align 20h
.text:0000000000003480
.text:0000000000003480 def_350A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003480                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003480                                         ; DATA XREF: ...
.text:0000000000003480                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003483                 nop     dword ptr [rax+rax+00h]
.text:0000000000003488
.text:0000000000003488 def_317E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003488                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003488                                         ; DATA XREF: ...
.text:0000000000003488                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000348E                 jnz     loc_3838
.text:0000000000003494                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003499                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000349E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000034A3                 call    ___ctype_b_loc
.text:00000000000034A8                 mov     rcx, [rax]
.text:00000000000034AB                 movzx   edx, bl
.text:00000000000034AE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000034B4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000034BA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000034BF                 mov     edi, 1
.text:00000000000034C4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000034C8                 and     ax, 4000h
.text:00000000000034CC                 setnz   r12b
.text:00000000000034D0                 setz    al
.text:00000000000034D3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000034D7
.text:00000000000034D7 loc_34D7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000034D7                 test    al, al
.text:00000000000034D9                 jnz     loc_3E71
.text:00000000000034DF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000034E4                 setz    dl
.text:00000000000034E7                 jmp     loc_31B8
.text:00000000000034E7 ; ---------------------------------------------------------------------------
.text:00000000000034EC                 align 10h
.text:00000000000034F0
.text:00000000000034F0 loc_34F0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000034F0                 movzx   ebx, byte ptr [r9]
.text:00000000000034F4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000034F7                 ja      short def_350A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000034F9                 lea     rcx, jpt_350A
.text:0000000000003500                 movzx   edx, bl
.text:0000000000003503                 movsxd  rax, ds:(jpt_350A - 6648h)[rcx+rdx*4]
.text:0000000000003507                 add     rax, rcx
.text:000000000000350A                 jmp     rax             ; switch jump
.text:000000000000350A ; ---------------------------------------------------------------------------
.text:000000000000350C                 align 10h
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003510                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003510                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003513                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003518                 jnz     loc_330E
.text:000000000000351E                 xchg    ax, ax
.text:0000000000003520
.text:0000000000003520 loc_3520:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003520                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003520                 mov     edx, 5Ch ; '\'
.text:0000000000003525                 mov     ebx, 5Ch ; '\'
.text:000000000000352A                 jmp     loc_32C4
.text:000000000000352A ; ---------------------------------------------------------------------------
.text:000000000000352F                 align 10h
.text:0000000000003530
.text:0000000000003530 loc_3530:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003530                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003530                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003535                 xor     r10d, r10d
.text:0000000000003538                 mov     ebx, 66h ; 'f'
.text:000000000000353D                 jmp     loc_32C4
.text:000000000000353D ; ---------------------------------------------------------------------------
.text:0000000000003542                 align 8
.text:0000000000003548
.text:0000000000003548 loc_3548:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003548                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003548                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000354D                 xor     r10d, r10d
.text:0000000000003550                 mov     ebx, 6Eh ; 'n'
.text:0000000000003555                 jmp     loc_32B2
.text:0000000000003555 ; ---------------------------------------------------------------------------
.text:000000000000355A                 align 20h
.text:0000000000003560
.text:0000000000003560 loc_3560:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003560                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003560                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003565                 jmp     loc_3330
.text:0000000000003565 ; ---------------------------------------------------------------------------
.text:000000000000356A                 align 10h
.text:0000000000003570
.text:0000000000003570 loc_3570:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003570                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003570                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003573
.text:0000000000003573 loc_3573:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003573                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003578                 setz    dl
.text:000000000000357B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003580                 jnz     loc_411A
.text:0000000000003586                 mov     eax, r8d
.text:0000000000003589                 mov     rcx, r15
.text:000000000000358C                 xor     eax, 1
.text:000000000000358F                 and     al, dl
.text:0000000000003591                 jz      short loc_35C0
.text:0000000000003593                 cmp     r13, r15
.text:0000000000003596                 jbe     short loc_359D
.text:0000000000003598                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000359D
.text:000000000000359D loc_359D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000359D                 lea     rcx, [r15+1]
.text:00000000000035A1                 cmp     r13, rcx
.text:00000000000035A4                 jbe     short loc_35AC
.text:00000000000035A6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000035AC
.text:00000000000035AC loc_35AC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000035AC                 lea     rcx, [r15+2]
.text:00000000000035B0                 cmp     r13, rcx
.text:00000000000035B3                 ja      loc_3BE9
.text:00000000000035B9
.text:00000000000035B9 loc_35B9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000035B9                 lea     rcx, [r15+3]
.text:00000000000035BD                 mov     r8d, eax
.text:00000000000035C0
.text:00000000000035C0 loc_35C0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000035C0                 cmp     r13, rcx
.text:00000000000035C3                 jbe     short loc_35CA
.text:00000000000035C5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000035CA
.text:00000000000035CA loc_35CA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000035CA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000035CF                 lea     r15, [rcx+1]
.text:00000000000035D3                 jz      loc_3BD9
.text:00000000000035D9                 lea     rax, [rbp+1]
.text:00000000000035DD                 cmp     rax, r11
.text:00000000000035E0                 jnb     short loc_35FB
.text:00000000000035E2                 mov     rax, [rsp+0E8h+s]
.text:00000000000035E7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000035EC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000035F0                 sub     eax, 30h ; '0'
.text:00000000000035F3                 cmp     al, 9
.text:00000000000035F5                 jbe     loc_3E29
.text:00000000000035FB
.text:00000000000035FB loc_35FB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000035FB                 mov     eax, r12d
.text:00000000000035FE                 mov     ebx, 30h ; '0'
.text:0000000000003603                 xor     r12d, r12d
.text:0000000000003606                 jmp     loc_31B8
.text:0000000000003606 ; ---------------------------------------------------------------------------
.text:000000000000360B                 align 10h
.text:0000000000003610
.text:0000000000003610 loc_3610:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003610                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003610                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003615                 mov     r12d, r10d
.text:0000000000003618                 setz    dl
.text:000000000000361B                 xor     r10d, r10d
.text:000000000000361E                 xor     eax, eax
.text:0000000000003620                 jmp     loc_31B8
.text:0000000000003620 ; ---------------------------------------------------------------------------
.text:0000000000003625                 align 8
.text:0000000000003628
.text:0000000000003628 loc_3628:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003628                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003628                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000362D                 setz    dl
.text:0000000000003630                 xor     r10d, r10d
.text:0000000000003633                 jmp     loc_33F8
.text:0000000000003633 ; ---------------------------------------------------------------------------
.text:0000000000003638                 align 20h
.text:0000000000003640
.text:0000000000003640 loc_3640:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003640                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003640                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003645                 setz    dl
.text:0000000000003648                 xor     r10d, r10d
.text:000000000000364B                 xor     r12d, r12d
.text:000000000000364E                 jmp     loc_3401
.text:000000000000364E ; ---------------------------------------------------------------------------
.text:0000000000003653                 align 8
.text:0000000000003658
.text:0000000000003658 loc_3658:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003658                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003658                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000365D                 mov     r12d, r10d
.text:0000000000003660                 mov     ebx, 20h ; ' '
.text:0000000000003665                 setz    dl
.text:0000000000003668                 xor     r10d, r10d
.text:000000000000366B                 jmp     loc_3401
.text:0000000000003670 ; ---------------------------------------------------------------------------
.text:0000000000003670
.text:0000000000003670 loc_3670:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003670                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003670                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003675                 xor     r10d, r10d
.text:0000000000003678                 mov     ebx, 72h ; 'r'
.text:000000000000367D                 jmp     loc_32B2
.text:000000000000367D ; ---------------------------------------------------------------------------
.text:0000000000003682                 align 8
.text:0000000000003688
.text:0000000000003688 loc_3688:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003688                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003688                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000368D                 jmp     loc_3330
.text:000000000000368D ; ---------------------------------------------------------------------------
.text:0000000000003692                 align 8
.text:0000000000003698
.text:0000000000003698 loc_3698:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003698                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:0000000000003698                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000369D                 xor     r10d, r10d
.text:00000000000036A0                 mov     ebx, 74h ; 't'
.text:00000000000036A5                 jmp     loc_32B2
.text:00000000000036A5 ; ---------------------------------------------------------------------------
.text:00000000000036AA                 align 10h
.text:00000000000036B0
.text:00000000000036B0 loc_36B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000036B0                                         ; DATA XREF: .rodata:jpt_350A↓o
.text:00000000000036B0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000036B5                 jmp     loc_3330
.text:00000000000036B5 ; ---------------------------------------------------------------------------
.text:00000000000036BA                 align 20h
.text:00000000000036C0
.text:00000000000036C0 loc_36C0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000036C0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000036C0                 xor     r10d, r10d
.text:00000000000036C3                 jmp     loc_3160
.text:00000000000036C3 ; ---------------------------------------------------------------------------
.text:00000000000036C8                 align 10h
.text:00000000000036D0
.text:00000000000036D0 loc_36D0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000036D0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000036D5                 jnz     loc_4040
.text:00000000000036DB
.text:00000000000036DB loc_36DB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000036DB                 add     rbp, 1
.text:00000000000036DF                 mov     eax, r8d
.text:00000000000036E2                 xor     r12d, r12d
.text:00000000000036E5                 mov     ebx, 5Ch ; '\'
.text:00000000000036EA                 jmp     loc_31FC
.text:00000000000036EA ; ---------------------------------------------------------------------------
.text:00000000000036EF                 align 10h
.text:00000000000036F0
.text:00000000000036F0 loc_36F0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000036F0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000036F5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000036FA                 mov     r12d, r8d
.text:00000000000036FD                 mov     rbp, r11
.text:0000000000003700                 setz    dl
.text:0000000000003703                 mov     eax, ebx
.text:0000000000003705                 test    r15, r15
.text:0000000000003708                 setz    cl
.text:000000000000370B                 and     eax, edx
.text:000000000000370D                 and     al, cl
.text:000000000000370F                 jnz     loc_4176
.text:0000000000003715                 mov     eax, ebx
.text:0000000000003717                 xor     eax, 1
.text:000000000000371A                 and     dl, al
.text:000000000000371C                 jz      loc_408C
.text:0000000000003722                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003727                 jz      loc_408A
.text:000000000000372D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003732                 jnz     loc_412D
.text:0000000000003738                 test    r13, r13
.text:000000000000373B                 setz    al
.text:000000000000373E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003744                 setnz   dl
.text:0000000000003747                 and     al, dl
.text:0000000000003749                 jz      loc_416C
.text:000000000000374F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003754
.text:0000000000003754 loc_3754:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003754                 lea     rbx, asc_63BD   ; "'"
.text:000000000000375B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000375F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003767                 mov     r15d, 1
.text:000000000000376D                 mov     [rsp+0E8h+n], 1
.text:0000000000003776                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000377B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003780                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003784                 jmp     loc_3063
.text:0000000000003784 ; ---------------------------------------------------------------------------
.text:0000000000003789                 align 10h
.text:0000000000003790
.text:0000000000003790 loc_3790:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003790                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003795                 jnz     loc_4040
.text:000000000000379B                 test    r13, r13
.text:000000000000379E                 jz      loc_3BA0
.text:00000000000037A4                 xor     edx, edx
.text:00000000000037A6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000037AC                 jnz     loc_3BA0
.text:00000000000037B2
.text:00000000000037B2 loc_37B2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000037B2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000037B2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000037B7                 add     r15, 3
.text:00000000000037BB                 xor     eax, eax
.text:00000000000037BD                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000037C2                 xor     r8d, r8d
.text:00000000000037C5                 mov     r13, rdx
.text:00000000000037C8                 mov     ebx, 27h ; '''
.text:00000000000037CD                 jmp     loc_31E9
.text:00000000000037CD ; ---------------------------------------------------------------------------
.text:00000000000037D2                 align 8
.text:00000000000037D8
.text:00000000000037D8 loc_37D8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000037D8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000037DD                 jz      short loc_3800
.text:00000000000037DF                 lea     rcx, [rbp+2]
.text:00000000000037E3                 cmp     rcx, r11
.text:00000000000037E6                 jnb     short loc_3800
.text:00000000000037E8                 mov     rax, [rsp+0E8h+s]
.text:00000000000037ED                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000037F2                 jz      loc_3F82
.text:00000000000037F8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003800
.text:0000000000003800 loc_3800:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003800                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003800                 xor     edx, edx
.text:0000000000003802                 xor     r12d, r12d
.text:0000000000003805                 xor     eax, eax
.text:0000000000003807                 mov     ebx, 3Fh ; '?'
.text:000000000000380C                 jmp     loc_31B8
.text:000000000000380C ; ---------------------------------------------------------------------------
.text:0000000000003811                 align 8
.text:0000000000003818
.text:0000000000003818 loc_3818:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003818                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000381D                 jnz     loc_4040
.text:0000000000003823                 xor     r12d, r12d
.text:0000000000003826                 xor     eax, eax
.text:0000000000003828                 mov     ebx, 3Fh ; '?'
.text:000000000000382D                 jmp     loc_31E9
.text:000000000000382D ; ---------------------------------------------------------------------------
.text:0000000000003832                 align 8
.text:0000000000003838
.text:0000000000003838 loc_3838:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003838                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003840                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003844                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003850                 mov     [rsp+0E8h+ps], rax
.text:0000000000003855                 jnz     short loc_3884
.text:0000000000003857                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000385C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003861                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003866                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000386B                 call    _strlen
.text:0000000000003870                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003876                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000387C                 mov     r11, rax
.text:000000000000387F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003884
.text:0000000000003884 loc_3884:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003884                 lea     rax, [rsp+0E8h+wc]
.text:000000000000388C                 xor     ecx, ecx
.text:000000000000388E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003892                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003897                 mov     rbx, rcx
.text:000000000000389A                 mov     [rsp+0E8h+var_60], r9
.text:00000000000038A2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000038A7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000038AC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000038B4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000038B9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000038BE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000038C3
.text:00000000000038C3 loc_38C3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000038C3                 mov     rax, [rsp+0E8h+s]
.text:00000000000038C8                 lea     r14, [rbp+rbx+0]
.text:00000000000038CD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000038D2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000038D7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000038DC                 lea     r13, [rax+r14]
.text:00000000000038E0                 sub     rdx, r14
.text:00000000000038E3                 mov     rsi, r13
.text:00000000000038E6                 call    rpl_mbrtowc
.text:00000000000038EB                 test    rax, rax
.text:00000000000038EE                 mov     r15, rax
.text:00000000000038F1                 jz      short loc_3941
.text:00000000000038F3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000038F7                 jz      loc_3F15
.text:00000000000038FD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003901                 jz      loc_3EA1
.text:0000000000003907                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000390C                 setz    al
.text:000000000000390F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003913                 jnz     loc_3AB0
.text:0000000000003919
.text:0000000000003919 loc_3919:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003919                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003919                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003920                 call    _iswprint
.text:0000000000003925                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000392A                 test    eax, eax
.text:000000000000392C                 mov     eax, 0
.text:0000000000003931                 cmovz   r12d, eax
.text:0000000000003935                 add     rbx, r15
.text:0000000000003938                 call    _mbsinit
.text:000000000000393D                 test    eax, eax
.text:000000000000393F                 jz      short loc_38C3
.text:0000000000003941
.text:0000000000003941 loc_3941:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003941                 mov     edx, r12d
.text:0000000000003944                 mov     rdi, rbx
.text:0000000000003947                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000394D                 xor     edx, 1
.text:0000000000003950                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003955                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000395B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000395F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003967                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000396C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003971                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003976
.text:0000000000003976 loc_3976:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003976                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003976                 cmp     rdi, 1
.text:000000000000397A                 jbe     loc_3F7B
.text:0000000000003980
.text:0000000000003980 loc_3980:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003980                 mov     rcx, rdi
.text:0000000000003983                 xor     esi, esi
.text:0000000000003985                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000398B                 add     rcx, rbp
.text:000000000000398E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003993                 jmp     loc_3A4E
.text:0000000000003993 ; ---------------------------------------------------------------------------
.text:0000000000003998                 align 20h
.text:00000000000039A0
.text:00000000000039A0 loc_39A0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000039A0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000039A5                 setz    al
.text:00000000000039A8                 test    r9b, r9b
.text:00000000000039AB                 jnz     loc_3E60
.text:00000000000039B1                 mov     esi, r8d
.text:00000000000039B4                 xor     esi, 1
.text:00000000000039B7                 and     al, sil
.text:00000000000039BA                 jz      short loc_39EB
.text:00000000000039BC                 cmp     r13, r15
.text:00000000000039BF                 jbe     short loc_39C6
.text:00000000000039C1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000039C6
.text:00000000000039C6 loc_39C6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000039C6                 lea     rsi, [r15+1]
.text:00000000000039CA                 cmp     r13, rsi
.text:00000000000039CD                 jbe     short loc_39D5
.text:00000000000039CF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000039D5
.text:00000000000039D5 loc_39D5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000039D5                 lea     rsi, [r15+2]
.text:00000000000039D9                 cmp     r13, rsi
.text:00000000000039DC                 jbe     short loc_39E4
.text:00000000000039DE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000039E4
.text:00000000000039E4 loc_39E4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000039E4                 add     r15, 3
.text:00000000000039E8                 mov     r8d, eax
.text:00000000000039EB
.text:00000000000039EB loc_39EB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000039EB                 cmp     r13, r15
.text:00000000000039EE                 jbe     short loc_39F5
.text:00000000000039F0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000039F5
.text:00000000000039F5 loc_39F5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000039F5                 lea     rax, [r15+1]
.text:00000000000039F9                 cmp     r13, rax
.text:00000000000039FC                 jbe     short loc_3A0B
.text:00000000000039FE                 mov     eax, ebx
.text:0000000000003A00                 shr     al, 6
.text:0000000000003A03                 add     eax, 30h ; '0'
.text:0000000000003A06                 mov     [r14+r15+1], al
.text:0000000000003A0B
.text:0000000000003A0B loc_3A0B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000003A0B                 lea     rax, [r15+2]
.text:0000000000003A0F                 cmp     r13, rax
.text:0000000000003A12                 jbe     short loc_3A24
.text:0000000000003A14                 mov     eax, ebx
.text:0000000000003A16                 shr     al, 3
.text:0000000000003A19                 and     eax, 7
.text:0000000000003A1C                 add     eax, 30h ; '0'
.text:0000000000003A1F                 mov     [r14+r15+2], al
.text:0000000000003A24
.text:0000000000003A24 loc_3A24:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003A24                 and     ebx, 7
.text:0000000000003A27                 add     rbp, 1
.text:0000000000003A2B                 add     r15, 3
.text:0000000000003A2F                 add     ebx, 30h ; '0'
.text:0000000000003A32                 cmp     rbp, rcx
.text:0000000000003A35                 jnb     loc_3220
.text:0000000000003A3B                 mov     esi, edx
.text:0000000000003A3D
.text:0000000000003A3D loc_3A3D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000003A3D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000003A3D                 cmp     r13, r15
.text:0000000000003A40                 jbe     short loc_3A46
.text:0000000000003A42                 mov     [r14+r15], bl
.text:0000000000003A46
.text:0000000000003A46 loc_3A46:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003A46                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000003A4A                 add     r15, 1
.text:0000000000003A4E
.text:0000000000003A4E loc_3A4E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000003A4E                 test    dl, dl
.text:0000000000003A50                 jnz     loc_39A0
.text:0000000000003A56                 mov     eax, esi
.text:0000000000003A58                 xor     eax, 1
.text:0000000000003A5B                 and     eax, r8d
.text:0000000000003A5E                 test    r10b, r10b
.text:0000000000003A61                 jz      short loc_3A71
.text:0000000000003A63                 cmp     r13, r15
.text:0000000000003A66                 jbe     short loc_3A6D
.text:0000000000003A68                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003A6D
.text:0000000000003A6D loc_3A6D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000003A6D                 add     r15, 1
.text:0000000000003A71
.text:0000000000003A71 loc_3A71:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003A71                 add     rbp, 1
.text:0000000000003A75                 cmp     rbp, rcx
.text:0000000000003A78                 jnb     loc_31FC
.text:0000000000003A7E                 test    al, al
.text:0000000000003A80                 jz      loc_3E7E
.text:0000000000003A86                 cmp     r13, r15
.text:0000000000003A89                 jbe     short loc_3A90
.text:0000000000003A8B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003A90
.text:0000000000003A90 loc_3A90:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003A90                 lea     rax, [r15+1]
.text:0000000000003A94                 cmp     r13, rax
.text:0000000000003A97                 jbe     short loc_3A9F
.text:0000000000003A99                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003A9F
.text:0000000000003A9F loc_3A9F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000003A9F                 add     r15, 2
.text:0000000000003AA3                 xor     r10d, r10d
.text:0000000000003AA6                 xor     r8d, r8d
.text:0000000000003AA9                 jmp     short loc_3A3D
.text:0000000000003AA9 ; ---------------------------------------------------------------------------
.text:0000000000003AAB                 align 10h
.text:0000000000003AB0
.text:0000000000003AB0 loc_3AB0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003AB0                 cmp     r15, 1
.text:0000000000003AB4                 jz      loc_3919
.text:0000000000003ABA                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003ABF                 lea     rcx, [rdi+r15]
.text:0000000000003AC3                 lea     rdx, [rdi+r14+1]
.text:0000000000003AC8                 lea     r8, [rcx+r14]
.text:0000000000003ACC                 jmp     short loc_3ADD
.text:0000000000003ACC ; ---------------------------------------------------------------------------
.text:0000000000003ACE                 align 10h
.text:0000000000003AD0
.text:0000000000003AD0 loc_3AD0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003AD0                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003AD0                 add     rdx, 1
.text:0000000000003AD4                 cmp     r8, rdx
.text:0000000000003AD7                 jz      loc_3919
.text:0000000000003ADD
.text:0000000000003ADD loc_3ADD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000003ADD                 movzx   ecx, byte ptr [rdx]
.text:0000000000003AE0                 sub     ecx, 5Bh ; '['
.text:0000000000003AE3                 cmp     cl, 21h ; '!'
.text:0000000000003AE6                 ja      short loc_3AD0
.text:0000000000003AE8                 mov     esi, 1
.text:0000000000003AED                 shl     rsi, cl
.text:0000000000003AF0                 mov     rcx, rsi
.text:0000000000003AF3                 mov     rsi, 20000002Bh
.text:0000000000003AFD                 test    rcx, rsi
.text:0000000000003B00                 jz      short loc_3AD0
.text:0000000000003B02                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003B07                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003B0C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003B11                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003B19
.text:0000000000003B19 loc_3B19:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003B19                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003B19                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003B1E                 jz      short loc_3B30
.text:0000000000003B20                 test    al, al
.text:0000000000003B22                 mov     eax, 4
.text:0000000000003B27                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000003B2C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003B30
.text:0000000000003B30 loc_3B30:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003B30                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003B30                 sub     rsp, 8
.text:0000000000003B34                 mov     rcx, rbp
.text:0000000000003B37                 mov     rsi, r13
.text:0000000000003B3A                 push    [rsp+0F0h+var_88]
.text:0000000000003B3E                 push    [rsp+0F8h+var_80]
.text:0000000000003B42                 mov     rdi, r14
.text:0000000000003B45                 push    0
.text:0000000000003B47                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003B4F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003B54                 mov     rdx, [rsp+108h+s]
.text:0000000000003B59                 and     r9d, 0FFFFFFFDh
.text:0000000000003B5D                 call    quotearg_buffer_restyled
.text:0000000000003B62                 add     rsp, 20h
.text:0000000000003B66                 mov     r15, rax
.text:0000000000003B69
.text:0000000000003B69 loc_3B69:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003B69                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003B69                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003B71                 xor     rbx, fs:28h
.text:0000000000003B7A                 mov     rax, r15
.text:0000000000003B7D                 jnz     loc_4183
.text:0000000000003B83                 add     rsp, 0B8h
.text:0000000000003B8A                 pop     rbx
.text:0000000000003B8B                 pop     rbp
.text:0000000000003B8C                 pop     r12
.text:0000000000003B8E                 pop     r13
.text:0000000000003B90                 pop     r14
.text:0000000000003B92                 pop     r15
.text:0000000000003B94                 retn
.text:0000000000003B94 ; ---------------------------------------------------------------------------
.text:0000000000003B95                 align 8
.text:0000000000003B98
.text:0000000000003B98 loc_3B98:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003B98                 mov     rbp, r11
.text:0000000000003B9B                 jmp     loc_3B19
.text:0000000000003BA0 ; ---------------------------------------------------------------------------
.text:0000000000003BA0
.text:0000000000003BA0 loc_3BA0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003BA0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003BA0                 cmp     r13, r15
.text:0000000000003BA3                 jbe     short loc_3BAA
.text:0000000000003BA5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003BAA
.text:0000000000003BAA loc_3BAA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000003BAA                 lea     rax, [r15+1]
.text:0000000000003BAE                 cmp     r13, rax
.text:0000000000003BB1                 jbe     short loc_3BB9
.text:0000000000003BB3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003BB9
.text:0000000000003BB9 loc_3BB9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003BB9                 lea     rax, [r15+2]
.text:0000000000003BBD                 cmp     r13, rax
.text:0000000000003BC0                 jbe     loc_41B2
.text:0000000000003BC6                 mov     rdx, r13
.text:0000000000003BC9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003BCF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003BD4                 jmp     loc_37B2
.text:0000000000003BD9 ; ---------------------------------------------------------------------------
.text:0000000000003BD9
.text:0000000000003BD9 loc_3BD9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003BD9                 mov     eax, r12d
.text:0000000000003BDC                 mov     ebx, 30h ; '0'
.text:0000000000003BE1                 xor     r12d, r12d
.text:0000000000003BE4                 jmp     loc_31E9
.text:0000000000003BE9 ; ---------------------------------------------------------------------------
.text:0000000000003BE9
.text:0000000000003BE9 loc_3BE9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003BE9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003BEF                 jmp     loc_35B9
.text:0000000000003BF4 ; ---------------------------------------------------------------------------
.text:0000000000003BF4
.text:0000000000003BF4 loc_3BF4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003BF4                                         ; DATA XREF: .rodata:jpt_3021↓o
.text:0000000000003BF4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003BF6                 jnz     loc_3023        ; jumptable 00000000000121F1 case 1
.text:0000000000003BFC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003C01
.text:0000000000003C01 loc_3C01:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003C01                 test    r13, r13
.text:0000000000003C04                 jnz     loc_419A
.text:0000000000003C0A                 lea     rax, asc_63BD   ; "'"
.text:0000000000003C11                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C1A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003C1F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C24                 xor     r12d, r12d
.text:0000000000003C27                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003C2C                 mov     [rsp+0E8h+n], 1
.text:0000000000003C35                 mov     [rsp+0E8h+s2], rax
.text:0000000000003C3A                 mov     r15d, 1
.text:0000000000003C40                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003C48                 jmp     loc_3063
.text:0000000000003C48 ; ---------------------------------------------------------------------------
.text:0000000000003C4D                 align 10h
.text:0000000000003C50
.text:0000000000003C50 loc_3C50:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003C50                                         ; DATA XREF: .rodata:jpt_3021↓o
.text:0000000000003C50                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003C52                 jnz     loc_404D
.text:0000000000003C58                 test    r13, r13
.text:0000000000003C5B                 jz      loc_3E86
.text:0000000000003C61                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003C65                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003C6A                 xor     r12d, r12d
.text:0000000000003C6D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C72                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C7B
.text:0000000000003C7B loc_3C7B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000003C7B                 lea     rax, unk_63BB
.text:0000000000003C82                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003C87                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003C8C                 mov     [rsp+0E8h+n], 1
.text:0000000000003C95                 mov     r15d, 1
.text:0000000000003C9B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003CA0                 jmp     loc_3063
.text:0000000000003CA5 ; ---------------------------------------------------------------------------
.text:0000000000003CA5
.text:0000000000003CA5 loc_3CA5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003CA5                                         ; DATA XREF: .rodata:jpt_3021↓o
.text:0000000000003CA5                 lea     rax, unk_63BB   ; jumptable 00000000000121F1 case 6
.text:0000000000003CAC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003CB1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003CB6                 xor     r12d, r12d
.text:0000000000003CB9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CC2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003CC7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003CCC                 mov     [rsp+0E8h+n], 1
.text:0000000000003CD5                 xor     r15d, r15d
.text:0000000000003CD8                 mov     [rsp+0E8h+s2], rax
.text:0000000000003CDD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003CE5                 jmp     loc_3063
.text:0000000000003CEA ; ---------------------------------------------------------------------------
.text:0000000000003CEA
.text:0000000000003CEA loc_3CEA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003CEA                                         ; DATA XREF: .rodata:jpt_3021↓o
.text:0000000000003CEA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000003CEF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003CF4                 xor     r12d, r12d
.text:0000000000003CF7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003D00                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003D05                 xor     r15d, r15d
.text:0000000000003D08                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003D0D                 mov     [rsp+0E8h+n], 0
.text:0000000000003D16                 mov     [rsp+0E8h+s2], 0
.text:0000000000003D1F                 jmp     loc_3063
.text:0000000000003D24 ; ---------------------------------------------------------------------------
.text:0000000000003D24
.text:0000000000003D24 loc_3D24:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003D24                                         ; DATA XREF: .rodata:jpt_3021↓o
.text:0000000000003D24                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003D29                 jz      short loc_3D81
.text:0000000000003D2B                 lea     rsi, asc_63BF   ; "`"
.text:0000000000003D32                 xor     edi, edi        ; domainname
.text:0000000000003D34                 mov     edx, 5          ; category
.text:0000000000003D39                 call    _dcgettext
.text:0000000000003D3E                 mov     rcx, rax
.text:0000000000003D41                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003D46                 lea     rax, asc_63BF   ; "`"
.text:0000000000003D4D                 cmp     rcx, rax
.text:0000000000003D50                 jz      loc_40EE
.text:0000000000003D56
.text:0000000000003D56 loc_3D56:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003D56                 lea     rsi, asc_63BD   ; "'"
.text:0000000000003D5D                 xor     edi, edi        ; domainname
.text:0000000000003D5F                 mov     edx, 5          ; category
.text:0000000000003D64                 call    _dcgettext
.text:0000000000003D69                 mov     rcx, rax
.text:0000000000003D6C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003D71                 lea     rax, asc_63BD   ; "'"
.text:0000000000003D78                 cmp     rcx, rax
.text:0000000000003D7B                 jz      loc_4104
.text:0000000000003D81
.text:0000000000003D81 loc_3D81:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003D81                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003D81                 xor     r15d, r15d
.text:0000000000003D84                 test    ebx, ebx
.text:0000000000003D86                 jz      loc_3F4D
.text:0000000000003D8C
.text:0000000000003D8C loc_3D8C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000003D8C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000003D8C                 test    ebx, ebx
.text:0000000000003D8E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003D93                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003D98                 xor     r12d, r12d
.text:0000000000003D9B                 mov     rdi, rbx        ; s
.text:0000000000003D9E                 call    _strlen
.text:0000000000003DA3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003DA8                 mov     [rsp+0E8h+n], rax
.text:0000000000003DAD                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003DB2                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003DB7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003DC0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003DC5                 jmp     loc_3063
.text:0000000000003DCA ; ---------------------------------------------------------------------------
.text:0000000000003DCA
.text:0000000000003DCA loc_3DCA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003DCA                                         ; DATA XREF: .rodata:jpt_3021↓o
.text:0000000000003DCA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000003DCF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003DD4                 xor     r12d, r12d
.text:0000000000003DD7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003DE0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003DE5                 xor     r15d, r15d
.text:0000000000003DE8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003DED                 mov     [rsp+0E8h+n], 0
.text:0000000000003DF6                 mov     [rsp+0E8h+s2], 0
.text:0000000000003DFF                 jmp     loc_3063
.text:0000000000003E04 ; ---------------------------------------------------------------------------
.text:0000000000003E04
.text:0000000000003E04 loc_3E04:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003E04                                         ; DATA XREF: .rodata:jpt_3021↓o
.text:0000000000003E04                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003E09                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003E0E                 xor     r12d, r12d
.text:0000000000003E11                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003E1A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003E1F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003E24                 jmp     loc_3043
.text:0000000000003E29 ; ---------------------------------------------------------------------------
.text:0000000000003E29
.text:0000000000003E29 loc_3E29:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003E29                 cmp     r13, r15
.text:0000000000003E2C                 jbe     short loc_3E33
.text:0000000000003E2E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003E33
.text:0000000000003E33 loc_3E33:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003E33                 lea     rax, [rcx+2]
.text:0000000000003E37                 cmp     r13, rax
.text:0000000000003E3A                 jbe     short loc_3E42
.text:0000000000003E3C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003E42
.text:0000000000003E42 loc_3E42:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003E42                 mov     eax, r12d
.text:0000000000003E45                 lea     r15, [rcx+3]
.text:0000000000003E49                 xor     r12d, r12d
.text:0000000000003E4C                 mov     ebx, 30h ; '0'
.text:0000000000003E51                 jmp     loc_31B8
.text:0000000000003E51 ; ---------------------------------------------------------------------------
.text:0000000000003E56                 align 20h
.text:0000000000003E60
.text:0000000000003E60 loc_3E60:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003E60                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003E65                 mov     rbp, r11
.text:0000000000003E68                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003E6C                 jmp     loc_3B19
.text:0000000000003E71 ; ---------------------------------------------------------------------------
.text:0000000000003E71
.text:0000000000003E71 loc_3E71:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003E71                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003E76                 xor     r12d, r12d
.text:0000000000003E79                 jmp     loc_3980
.text:0000000000003E7E ; ---------------------------------------------------------------------------
.text:0000000000003E7E
.text:0000000000003E7E loc_3E7E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000003E7E                 xor     r10d, r10d
.text:0000000000003E81                 jmp     loc_3A3D
.text:0000000000003E86 ; ---------------------------------------------------------------------------
.text:0000000000003E86
.text:0000000000003E86 loc_3E86:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003E86                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003E8F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003E94                 xor     r12d, r12d
.text:0000000000003E97                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003E9C                 jmp     loc_3C7B
.text:0000000000003EA1 ; ---------------------------------------------------------------------------
.text:0000000000003EA1
.text:0000000000003EA1 loc_3EA1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003EA1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003EA6                 mov     rsi, r14
.text:0000000000003EA9                 mov     rcx, r13
.text:0000000000003EAC                 mov     rax, rbx
.text:0000000000003EAF                 mov     rdi, rbx
.text:0000000000003EB2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003EB8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003EBD                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003EC5                 cmp     rsi, r11
.text:0000000000003EC8                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003ECE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003ED6                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003EDB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003EE0                 jnb     short loc_3F08
.text:0000000000003EE2                 cmp     byte ptr [rcx], 0
.text:0000000000003EE5                 jnz     short loc_3EF7
.text:0000000000003EE7                 jmp     short loc_3F08
.text:0000000000003EE7 ; ---------------------------------------------------------------------------
.text:0000000000003EE9                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 loc_3EF0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003EF0                 cmp     byte ptr [r9+rax], 0
.text:0000000000003EF5                 jz      short loc_3F05
.text:0000000000003EF7
.text:0000000000003EF7 loc_3EF7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003EF7                 add     rax, 1
.text:0000000000003EFB                 lea     rdx, [rbp+rax+0]
.text:0000000000003F00                 cmp     r11, rdx
.text:0000000000003F03                 ja      short loc_3EF0
.text:0000000000003F05
.text:0000000000003F05 loc_3F05:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003F05                 mov     rdi, rax
.text:0000000000003F08
.text:0000000000003F08 loc_3F08:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003F08                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003F08                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003F0D                 xor     r12d, r12d
.text:0000000000003F10                 jmp     loc_3976
.text:0000000000003F15 ; ---------------------------------------------------------------------------
.text:0000000000003F15
.text:0000000000003F15 loc_3F15:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003F15                 mov     rdi, rbx
.text:0000000000003F18                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003F1E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003F23                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003F29                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003F31                 xor     r12d, r12d
.text:0000000000003F34                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003F39                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003F3E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003F43                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003F48                 jmp     loc_3976
.text:0000000000003F4D ; ---------------------------------------------------------------------------
.text:0000000000003F4D
.text:0000000000003F4D loc_3F4D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000003F4D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003F52                 movzx   eax, byte ptr [rdx]
.text:0000000000003F55                 test    al, al
.text:0000000000003F57                 jz      loc_3D8C
.text:0000000000003F5D                 nop     dword ptr [rax]
.text:0000000000003F60
.text:0000000000003F60 loc_3F60:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003F60                 cmp     r13, r15
.text:0000000000003F63                 jbe     short loc_3F69
.text:0000000000003F65                 mov     [r14+r15], al
.text:0000000000003F69
.text:0000000000003F69 loc_3F69:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003F69                 add     r15, 1
.text:0000000000003F6D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003F72                 test    al, al
.text:0000000000003F74                 jnz     short loc_3F60
.text:0000000000003F76                 jmp     loc_3D8C
.text:0000000000003F7B ; ---------------------------------------------------------------------------
.text:0000000000003F7B
.text:0000000000003F7B loc_3F7B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000003F7B                 mov     eax, edx
.text:0000000000003F7D                 jmp     loc_34D7
.text:0000000000003F82 ; ---------------------------------------------------------------------------
.text:0000000000003F82
.text:0000000000003F82 loc_3F82:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003F82                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003F86                 cmp     bl, 3Eh ; '>'
.text:0000000000003F89                 ja      loc_3800
.text:0000000000003F8F                 mov     rax, 7000A38200000000h
.text:0000000000003F99                 bt      rax, rbx
.text:0000000000003F9D                 jnb     loc_3800
.text:0000000000003FA3                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003FA8                 jnz     loc_4192
.text:0000000000003FAE                 cmp     r13, r15
.text:0000000000003FB1                 jbe     short loc_3FB8
.text:0000000000003FB3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003FB8
.text:0000000000003FB8 loc_3FB8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003FB8                 lea     rax, [r15+1]
.text:0000000000003FBC                 cmp     r13, rax
.text:0000000000003FBF                 jbe     short loc_3FC7
.text:0000000000003FC1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003FC7
.text:0000000000003FC7 loc_3FC7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003FC7                 lea     rax, [r15+2]
.text:0000000000003FCB                 cmp     r13, rax
.text:0000000000003FCE                 jbe     short loc_3FD6
.text:0000000000003FD0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003FD6
.text:0000000000003FD6 loc_3FD6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003FD6                 lea     rax, [r15+3]
.text:0000000000003FDA                 cmp     r13, rax
.text:0000000000003FDD                 jbe     short loc_3FE5
.text:0000000000003FDF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003FE5
.text:0000000000003FE5 loc_3FE5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003FE5                 add     r15, 4
.text:0000000000003FE9                 xor     edx, edx
.text:0000000000003FEB                 xor     r12d, r12d
.text:0000000000003FEE                 xor     eax, eax
.text:0000000000003FF0                 mov     rbp, rcx
.text:0000000000003FF3                 jmp     loc_31B8
.text:0000000000003FF8 ; ---------------------------------------------------------------------------
.text:0000000000003FF8
.text:0000000000003FF8 loc_3FF8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003FF8                                         ; DATA XREF: .rodata:jpt_3021↓o
.text:0000000000003FF8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003FFA                 jz      loc_4188
.text:0000000000004000                 lea     rax, asc_63BD   ; "'"
.text:0000000000004007                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000400C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004011                 xor     r12d, r12d
.text:0000000000004014                 mov     [rsp+0E8h+var_98], 0
.text:000000000000401D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004022                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004027                 mov     [rsp+0E8h+n], 1
.text:0000000000004030                 xor     r15d, r15d
.text:0000000000004033                 mov     [rsp+0E8h+s2], rax
.text:0000000000004038                 jmp     loc_3063
.text:0000000000004038 ; ---------------------------------------------------------------------------
.text:000000000000403D                 align 20h
.text:0000000000004040
.text:0000000000004040 loc_4040:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004040                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004040                 mov     rbp, r11
.text:0000000000004043                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004048                 jmp     loc_3B19
.text:000000000000404D ; ---------------------------------------------------------------------------
.text:000000000000404D
.text:000000000000404D loc_404D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000404D                 lea     rax, unk_63BB
.text:0000000000004054                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004059                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000405E                 xor     r12d, r12d
.text:0000000000004061                 mov     [rsp+0E8h+var_98], 0
.text:000000000000406A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000406F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004074                 mov     [rsp+0E8h+n], 1
.text:000000000000407D                 xor     r15d, r15d
.text:0000000000004080                 mov     [rsp+0E8h+s2], rax
.text:0000000000004085                 jmp     loc_3063
.text:000000000000408A ; ---------------------------------------------------------------------------
.text:000000000000408A
.text:000000000000408A loc_408A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000408A                 mov     eax, edx
.text:000000000000408C
.text:000000000000408C loc_408C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000408C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000408C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004091                 test    rbx, rbx
.text:0000000000004094                 jz      short loc_40C2
.text:0000000000004096                 test    al, al
.text:0000000000004098                 jz      short loc_40C2
.text:000000000000409A                 movzx   ecx, byte ptr [rbx]
.text:000000000000409D                 mov     rax, rbx
.text:00000000000040A0                 test    cl, cl
.text:00000000000040A2                 jz      short loc_40C2
.text:00000000000040A4                 mov     rdx, r15
.text:00000000000040A7                 sub     rax, r15
.text:00000000000040AA
.text:00000000000040AA loc_40AA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000040AA                 cmp     r13, rdx
.text:00000000000040AD                 jbe     short loc_40B3
.text:00000000000040AF                 mov     [r14+rdx], cl
.text:00000000000040B3
.text:00000000000040B3 loc_40B3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000040B3                 add     rdx, 1
.text:00000000000040B7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000040BB                 test    cl, cl
.text:00000000000040BD                 jnz     short loc_40AA
.text:00000000000040BF                 mov     r15, rdx
.text:00000000000040C2
.text:00000000000040C2 loc_40C2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000040C2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000040C2                 cmp     r13, r15
.text:00000000000040C5                 jbe     loc_3B69
.text:00000000000040CB                 mov     byte ptr [r14+r15], 0
.text:00000000000040D0                 jmp     loc_3B69
.text:00000000000040D5 ; ---------------------------------------------------------------------------
.text:00000000000040D5
.text:00000000000040D5 loc_40D5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000040D5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000040DA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000040DF                 mov     rbp, r11
.text:00000000000040E2                 setz    al
.text:00000000000040E5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000040E9                 jmp     loc_3B19
.text:00000000000040EE ; ---------------------------------------------------------------------------
.text:00000000000040EE
.text:00000000000040EE loc_40EE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000040EE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000040F2                 mov     rdi, rcx
.text:00000000000040F5                 call    gettext_quote
.text:00000000000040FA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000040FF                 jmp     loc_3D56
.text:0000000000004104 ; ---------------------------------------------------------------------------
.text:0000000000004104
.text:0000000000004104 loc_4104:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004104                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004108                 mov     rdi, rcx
.text:000000000000410B                 call    gettext_quote
.text:0000000000004110                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004115                 jmp     loc_3D81
.text:000000000000411A ; ---------------------------------------------------------------------------
.text:000000000000411A
.text:000000000000411A loc_411A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000411A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000411F                 mov     rbp, r11
.text:0000000000004122                 mov     eax, edx
.text:0000000000004124                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004128                 jmp     loc_3B19
.text:000000000000412D ; ---------------------------------------------------------------------------
.text:000000000000412D
.text:000000000000412D loc_412D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000412D                 sub     rsp, 8
.text:0000000000004131                 mov     r8d, 5
.text:0000000000004137                 mov     rcx, r11
.text:000000000000413A                 push    [rsp+0F0h+var_88]
.text:000000000000413E                 push    [rsp+0F8h+var_80]
.text:0000000000004142                 mov     rdi, r14
.text:0000000000004145                 push    [rsp+100h+var_C8]
.text:0000000000004149                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004151                 mov     rdx, [rsp+108h+s]
.text:0000000000004156                 mov     rsi, [rsp+108h+var_98]
.text:000000000000415B                 call    quotearg_buffer_restyled
.text:0000000000004160                 add     rsp, 20h
.text:0000000000004164                 mov     r15, rax
.text:0000000000004167                 jmp     loc_3B69
.text:000000000000416C ; ---------------------------------------------------------------------------
.text:000000000000416C
.text:000000000000416C loc_416C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000416C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004171                 jmp     loc_408C
.text:0000000000004176 ; ---------------------------------------------------------------------------
.text:0000000000004176
.text:0000000000004176 loc_4176:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004176                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000417E                 jmp     loc_3B19
.text:0000000000004183 ; ---------------------------------------------------------------------------
.text:0000000000004183
.text:0000000000004183 loc_4183:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004183                 call    ___stack_chk_fail
.text:0000000000004188 ; ---------------------------------------------------------------------------
.text:0000000000004188
.text:0000000000004188 loc_4188:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004188                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000418D                 jmp     loc_3C01
.text:0000000000004192 ; ---------------------------------------------------------------------------
.text:0000000000004192
.text:0000000000004192 loc_4192:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004192                 mov     rbp, r11
.text:0000000000004195                 jmp     loc_3B30
.text:000000000000419A ; ---------------------------------------------------------------------------
.text:000000000000419A
.text:000000000000419A loc_419A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000419A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000419F                 xor     eax, eax
.text:00000000000041A1                 xor     r12d, r12d
.text:00000000000041A4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000041AD                 jmp     loc_3754
.text:00000000000041B2 ; ---------------------------------------------------------------------------
.text:00000000000041B2
.text:00000000000041B2 loc_41B2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000041B2                 mov     rdx, r13
.text:00000000000041B5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000041BA                 jmp     loc_37B2
.text:00000000000041BF ; ---------------------------------------------------------------------------
.text:00000000000041BF
.text:00000000000041BF def_3021:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000041BF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000041BF ; } // starts at 2F90
.text:00000000000041BF quotearg_buffer_restyled endp
.text:00000000000041BF
.text:00000000000041BF ; ---------------------------------------------------------------------------
.text:00000000000041C4                 align 10h
.text:00000000000041D0
.text:00000000000041D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041D0
.text:00000000000041D0
.text:00000000000041D0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000041D0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000041D0
.text:00000000000041D0 var_50          = qword ptr -50h
.text:00000000000041D0 var_48          = qword ptr -48h
.text:00000000000041D0 var_40          = dword ptr -40h
.text:00000000000041D0 var_3C          = dword ptr -3Ch
.text:00000000000041D0
.text:00000000000041D0 ; __unwind {
.text:00000000000041D0                 push    r15
.text:00000000000041D2                 push    r14
.text:00000000000041D4                 movsxd  r15, edi
.text:00000000000041D7                 push    r13
.text:00000000000041D9                 push    r12
.text:00000000000041DB                 mov     r14, rdx
.text:00000000000041DE                 push    rbp
.text:00000000000041DF                 push    rbx
.text:00000000000041E0                 mov     rbp, rcx
.text:00000000000041E3                 sub     rsp, 28h
.text:00000000000041E7                 mov     [rsp+58h+var_50], rsi
.text:00000000000041EC                 call    ___errno_location
.text:00000000000041F1                 mov     r13, rax
.text:00000000000041F4                 mov     eax, [rax]
.text:00000000000041F6                 test    r15d, r15d
.text:00000000000041F9                 mov     rbx, cs:slotvec
.text:0000000000004200                 mov     [rsp+58h+var_40], eax
.text:0000000000004204                 js      loc_4371
.text:000000000000420A                 cmp     cs:nslots, r15d
.text:0000000000004211                 jg      short loc_4275
.text:0000000000004213                 cmp     r15d, 7FFFFFFFh
.text:000000000000421A                 jz      loc_4376
.text:0000000000004220                 lea     r12d, [r15+1]
.text:0000000000004224                 lea     rax, slotvec0
.text:000000000000422B                 movsxd  rsi, r12d
.text:000000000000422E                 shl     rsi, 4
.text:0000000000004232                 cmp     rbx, rax
.text:0000000000004235                 jz      loc_4350
.text:000000000000423B                 mov     rdi, rbx
.text:000000000000423E                 call    xrealloc
.text:0000000000004243                 mov     rbx, rax
.text:0000000000004246                 mov     cs:slotvec, rax
.text:000000000000424D
.text:000000000000424D loc_424D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000424D                 movsxd  rdi, cs:nslots
.text:0000000000004254                 mov     edx, r12d
.text:0000000000004257                 xor     esi, esi        ; c
.text:0000000000004259                 sub     edx, edi
.text:000000000000425B                 shl     rdi, 4
.text:000000000000425F                 movsxd  rdx, edx
.text:0000000000004262                 add     rdi, rbx        ; s
.text:0000000000004265                 shl     rdx, 4          ; n
.text:0000000000004269                 call    _memset
.text:000000000000426E                 mov     cs:nslots, r12d
.text:0000000000004275
.text:0000000000004275 loc_4275:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004275                 mov     eax, [rbp+4]
.text:0000000000004278                 shl     r15, 4
.text:000000000000427C                 sub     rsp, 8
.text:0000000000004280                 add     rbx, r15
.text:0000000000004283                 lea     r15, [rbp+8]
.text:0000000000004287                 mov     r8d, [rbp+0]
.text:000000000000428B                 mov     r11, [rbx]
.text:000000000000428E                 mov     r12, [rbx+8]
.text:0000000000004292                 mov     rcx, r14
.text:0000000000004295                 or      eax, 1
.text:0000000000004298                 mov     [rsp+60h+var_3C], eax
.text:000000000000429C                 push    qword ptr [rbp+30h]
.text:000000000000429F                 mov     r9d, eax
.text:00000000000042A2                 push    qword ptr [rbp+28h]
.text:00000000000042A5                 push    r15
.text:00000000000042A7                 mov     rsi, r11
.text:00000000000042AA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000042AF                 mov     rdi, r12
.text:00000000000042B2                 mov     [rsp+78h+var_48], r11
.text:00000000000042B7                 call    quotearg_buffer_restyled
.text:00000000000042BC                 add     rsp, 20h
.text:00000000000042C0                 mov     r11, [rsp+58h+var_48]
.text:00000000000042C5                 cmp     r11, rax
.text:00000000000042C8                 ja      short loc_4331
.text:00000000000042CA                 lea     rsi, [rax+1]
.text:00000000000042CE                 lea     rax, slot0
.text:00000000000042D5                 cmp     r12, rax
.text:00000000000042D8                 mov     [rbx], rsi
.text:00000000000042DB                 jz      short loc_42EF
.text:00000000000042DD                 mov     rdi, r12        ; ptr
.text:00000000000042E0                 mov     [rsp+58h+var_48], rsi
.text:00000000000042E5                 call    _free
.text:00000000000042EA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000042EF
.text:00000000000042EF loc_42EF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000042EF                 mov     rdi, rsi
.text:00000000000042F2                 mov     [rsp+58h+var_48], rsi
.text:00000000000042F7                 call    xmalloc
.text:00000000000042FC                 sub     rsp, 8
.text:0000000000004300                 mov     [rbx+8], rax
.text:0000000000004304                 mov     r8d, [rbp+0]
.text:0000000000004308                 push    qword ptr [rbp+30h]
.text:000000000000430B                 push    qword ptr [rbp+28h]
.text:000000000000430E                 mov     rcx, r14
.text:0000000000004311                 push    r15
.text:0000000000004313                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004318                 mov     rdi, rax
.text:000000000000431B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004320                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004325                 mov     r12, rax
.text:0000000000004328                 call    quotearg_buffer_restyled
.text:000000000000432D                 add     rsp, 20h
.text:0000000000004331
.text:0000000000004331 loc_4331:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004331                 mov     eax, [rsp+58h+var_40]
.text:0000000000004335                 mov     [r13+0], eax
.text:0000000000004339                 add     rsp, 28h
.text:000000000000433D                 mov     rax, r12
.text:0000000000004340                 pop     rbx
.text:0000000000004341                 pop     rbp
.text:0000000000004342                 pop     r12
.text:0000000000004344                 pop     r13
.text:0000000000004346                 pop     r14
.text:0000000000004348                 pop     r15
.text:000000000000434A                 retn
.text:000000000000434A ; ---------------------------------------------------------------------------
.text:000000000000434B                 align 10h
.text:0000000000004350
.text:0000000000004350 loc_4350:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004350                 xor     edi, edi
.text:0000000000004352                 call    xrealloc
.text:0000000000004357                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000435F                 mov     rbx, rax
.text:0000000000004362                 mov     cs:slotvec, rax
.text:0000000000004369                 movups  xmmword ptr [rax], xmm0
.text:000000000000436C                 jmp     loc_424D
.text:0000000000004371 ; ---------------------------------------------------------------------------
.text:0000000000004371
.text:0000000000004371 loc_4371:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004371                 call    _abort
.text:0000000000004376 ; ---------------------------------------------------------------------------
.text:0000000000004376
.text:0000000000004376 loc_4376:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004376                 call    xalloc_die
.text:0000000000004376 ; } // starts at 41D0
.text:0000000000004376 quotearg_n_options endp
.text:0000000000004376
.text:0000000000004376 ; ---------------------------------------------------------------------------
.text:000000000000437B                 align 20h
.text:0000000000004380
.text:0000000000004380 ; =============== S U B R O U T I N E =======================================
.text:0000000000004380
.text:0000000000004380 ; Attributes: info_from_lumina
.text:0000000000004380
.text:0000000000004380 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004380                 public clone_quoting_options
.text:0000000000004380 clone_quoting_options proc near
.text:0000000000004380 ; __unwind {
.text:0000000000004380                 push    r12
.text:0000000000004382                 push    rbp
.text:0000000000004383                 push    rbx
.text:0000000000004384                 mov     rbx, rdi
.text:0000000000004387                 call    ___errno_location
.text:000000000000438C                 mov     r12d, [rax]
.text:000000000000438F                 mov     rbp, rax
.text:0000000000004392                 lea     rax, default_quoting_options
.text:0000000000004399                 test    rbx, rbx
.text:000000000000439C                 mov     esi, 38h ; '8'  ; n
.text:00000000000043A1                 cmovz   rbx, rax
.text:00000000000043A5                 mov     rdi, rbx        ; src
.text:00000000000043A8                 call    xmemdup
.text:00000000000043AD                 mov     [rbp+0], r12d
.text:00000000000043B1                 pop     rbx
.text:00000000000043B2                 pop     rbp
.text:00000000000043B3                 pop     r12
.text:00000000000043B5                 retn
.text:00000000000043B5 ; } // starts at 4380
.text:00000000000043B5 clone_quoting_options endp
.text:00000000000043B5
.text:00000000000043B5 ; ---------------------------------------------------------------------------
.text:00000000000043B6                 align 20h
.text:00000000000043C0
.text:00000000000043C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043C0
.text:00000000000043C0
.text:00000000000043C0                 public get_quoting_style
.text:00000000000043C0 get_quoting_style proc near
.text:00000000000043C0 ; __unwind {
.text:00000000000043C0                 lea     rax, default_quoting_options
.text:00000000000043C7                 test    rdi, rdi
.text:00000000000043CA                 cmovz   rdi, rax
.text:00000000000043CE                 mov     eax, [rdi]
.text:00000000000043D0                 retn
.text:00000000000043D0 ; } // starts at 43C0
.text:00000000000043D0 get_quoting_style endp
.text:00000000000043D0
.text:00000000000043D0 ; ---------------------------------------------------------------------------
.text:00000000000043D1                 align 20h
.text:00000000000043E0
.text:00000000000043E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043E0
.text:00000000000043E0
.text:00000000000043E0                 public set_quoting_style
.text:00000000000043E0 set_quoting_style proc near
.text:00000000000043E0 ; __unwind {
.text:00000000000043E0                 lea     rax, default_quoting_options
.text:00000000000043E7                 test    rdi, rdi
.text:00000000000043EA                 cmovz   rdi, rax
.text:00000000000043EE                 mov     [rdi], esi
.text:00000000000043F0                 retn
.text:00000000000043F0 ; } // starts at 43E0
.text:00000000000043F0 set_quoting_style endp
.text:00000000000043F0
.text:00000000000043F0 ; ---------------------------------------------------------------------------
.text:00000000000043F1                 align 20h
.text:0000000000004400
.text:0000000000004400 ; =============== S U B R O U T I N E =======================================
.text:0000000000004400
.text:0000000000004400 ; Attributes: info_from_lumina
.text:0000000000004400
.text:0000000000004400 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004400                 public set_char_quoting
.text:0000000000004400 set_char_quoting proc near
.text:0000000000004400 ; __unwind {
.text:0000000000004400                 lea     rax, default_quoting_options
.text:0000000000004407                 test    rdi, rdi
.text:000000000000440A                 mov     ecx, esi
.text:000000000000440C                 cmovz   rdi, rax
.text:0000000000004410                 mov     eax, esi
.text:0000000000004412                 and     ecx, 1Fh
.text:0000000000004415                 shr     al, 5
.text:0000000000004418                 movzx   eax, al
.text:000000000000441B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004420                 mov     esi, [rdi]
.text:0000000000004422                 mov     eax, esi
.text:0000000000004424                 shr     eax, cl
.text:0000000000004426                 xor     edx, eax
.text:0000000000004428                 and     eax, 1
.text:000000000000442B                 and     edx, 1
.text:000000000000442E                 shl     edx, cl
.text:0000000000004430                 xor     edx, esi
.text:0000000000004432                 mov     [rdi], edx
.text:0000000000004434                 retn
.text:0000000000004434 ; } // starts at 4400
.text:0000000000004434 set_char_quoting endp
.text:0000000000004434
.text:0000000000004434 ; ---------------------------------------------------------------------------
.text:0000000000004435                 align 20h
.text:0000000000004440
.text:0000000000004440 ; =============== S U B R O U T I N E =======================================
.text:0000000000004440
.text:0000000000004440
.text:0000000000004440                 public set_quoting_flags
.text:0000000000004440 set_quoting_flags proc near
.text:0000000000004440 ; __unwind {
.text:0000000000004440                 lea     rax, default_quoting_options
.text:0000000000004447                 test    rdi, rdi
.text:000000000000444A                 cmovz   rdi, rax
.text:000000000000444E                 mov     eax, [rdi+4]
.text:0000000000004451                 mov     [rdi+4], esi
.text:0000000000004454                 retn
.text:0000000000004454 ; } // starts at 4440
.text:0000000000004454 set_quoting_flags endp
.text:0000000000004454
.text:0000000000004454 ; ---------------------------------------------------------------------------
.text:0000000000004455                 align 20h
.text:0000000000004460
.text:0000000000004460 ; =============== S U B R O U T I N E =======================================
.text:0000000000004460
.text:0000000000004460 ; Attributes: info_from_lumina
.text:0000000000004460
.text:0000000000004460 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004460                 public set_custom_quoting
.text:0000000000004460 set_custom_quoting proc near
.text:0000000000004460 ; __unwind {
.text:0000000000004460                 lea     rax, default_quoting_options
.text:0000000000004467                 test    rdi, rdi
.text:000000000000446A                 cmovz   rdi, rax
.text:000000000000446E                 test    rsi, rsi
.text:0000000000004471                 mov     dword ptr [rdi], 0Ah
.text:0000000000004477                 jz      short loc_4487
.text:0000000000004479                 test    rdx, rdx
.text:000000000000447C                 jz      short loc_4487
.text:000000000000447E                 mov     [rdi+28h], rsi
.text:0000000000004482                 mov     [rdi+30h], rdx
.text:0000000000004486                 retn
.text:0000000000004487 ; ---------------------------------------------------------------------------
.text:0000000000004487
.text:0000000000004487 loc_4487:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004487                                         ; set_custom_quoting+1C↑j
.text:0000000000004487                 sub     rsp, 8
.text:000000000000448B                 call    _abort
.text:000000000000448B ; } // starts at 4460
.text:000000000000448B set_custom_quoting endp
.text:000000000000448B
.text:0000000000004490
.text:0000000000004490 ; =============== S U B R O U T I N E =======================================
.text:0000000000004490
.text:0000000000004490 ; Attributes: info_from_lumina
.text:0000000000004490
.text:0000000000004490 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004490                 public quotearg_buffer
.text:0000000000004490 quotearg_buffer proc near
.text:0000000000004490
.text:0000000000004490 var_40          = qword ptr -40h
.text:0000000000004490
.text:0000000000004490 ; __unwind {
.text:0000000000004490                 push    r15
.text:0000000000004492                 push    r14
.text:0000000000004494                 lea     rax, default_quoting_options
.text:000000000000449B                 push    r13
.text:000000000000449D                 push    r12
.text:000000000000449F                 mov     r13, rdi
.text:00000000000044A2                 push    rbp
.text:00000000000044A3                 push    rbx
.text:00000000000044A4                 mov     rbx, r8
.text:00000000000044A7                 mov     r14, rsi
.text:00000000000044AA                 mov     r15, rdx
.text:00000000000044AD                 sub     rsp, 18h
.text:00000000000044B1                 test    r8, r8
.text:00000000000044B4                 cmovz   rbx, rax
.text:00000000000044B8                 mov     [rsp+48h+var_40], rcx
.text:00000000000044BD                 call    ___errno_location
.text:00000000000044C2                 mov     r12d, [rax]
.text:00000000000044C5                 mov     rbp, rax
.text:00000000000044C8                 lea     rax, [rbx+8]
.text:00000000000044CC                 sub     rsp, 8
.text:00000000000044D0                 mov     r9d, [rbx+4]
.text:00000000000044D4                 push    qword ptr [rbx+30h]
.text:00000000000044D7                 mov     r8d, [rbx]
.text:00000000000044DA                 push    qword ptr [rbx+28h]
.text:00000000000044DD                 mov     rdx, r15
.text:00000000000044E0                 push    rax
.text:00000000000044E1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000044E6                 mov     rsi, r14
.text:00000000000044E9                 mov     rdi, r13
.text:00000000000044EC                 call    quotearg_buffer_restyled
.text:00000000000044F1                 mov     [rbp+0], r12d
.text:00000000000044F5                 add     rsp, 38h
.text:00000000000044F9                 pop     rbx
.text:00000000000044FA                 pop     rbp
.text:00000000000044FB                 pop     r12
.text:00000000000044FD                 pop     r13
.text:00000000000044FF                 pop     r14
.text:0000000000004501                 pop     r15
.text:0000000000004503                 retn
.text:0000000000004503 ; } // starts at 4490
.text:0000000000004503 quotearg_buffer endp
.text:0000000000004503
.text:0000000000004503 ; ---------------------------------------------------------------------------
.text:0000000000004504                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510 ; Attributes: info_from_lumina
.text:0000000000004510
.text:0000000000004510 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004510                 public quotearg_alloc_mem
.text:0000000000004510 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004510
.text:0000000000004510 var_5C          = dword ptr -5Ch
.text:0000000000004510 var_58          = qword ptr -58h
.text:0000000000004510 var_50          = qword ptr -50h
.text:0000000000004510 var_48          = qword ptr -48h
.text:0000000000004510 var_40          = qword ptr -40h
.text:0000000000004510
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 push    r15
.text:0000000000004512                 push    r14
.text:0000000000004514                 lea     rax, default_quoting_options
.text:000000000000451B                 push    r13
.text:000000000000451D                 push    r12
.text:000000000000451F                 mov     r12, rdx
.text:0000000000004522                 push    rbp
.text:0000000000004523                 push    rbx
.text:0000000000004524                 mov     rbx, rcx
.text:0000000000004527                 mov     r14, rdi
.text:000000000000452A                 mov     r15, rsi
.text:000000000000452D                 sub     rsp, 38h
.text:0000000000004531                 test    rcx, rcx
.text:0000000000004534                 cmovz   rbx, rax
.text:0000000000004538                 xor     ebp, ebp
.text:000000000000453A                 call    ___errno_location
.text:000000000000453F                 test    r12, r12
.text:0000000000004542                 mov     r13, rax
.text:0000000000004545                 mov     eax, [rax]
.text:0000000000004547                 setz    bpl
.text:000000000000454B                 or      ebp, [rbx+4]
.text:000000000000454E                 lea     r10, [rbx+8]
.text:0000000000004552                 sub     rsp, 8
.text:0000000000004556                 mov     r8d, [rbx]
.text:0000000000004559                 mov     rcx, r15
.text:000000000000455C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004560                 push    qword ptr [rbx+30h]
.text:0000000000004563                 mov     rdx, r14
.text:0000000000004566                 push    qword ptr [rbx+28h]
.text:0000000000004569                 push    r10
.text:000000000000456B                 xor     esi, esi
.text:000000000000456D                 mov     r9d, ebp
.text:0000000000004570                 xor     edi, edi
.text:0000000000004572                 mov     [rsp+88h+var_48], r10
.text:0000000000004577                 call    quotearg_buffer_restyled
.text:000000000000457C                 lea     rsi, [rax+1]
.text:0000000000004580                 mov     [rsp+88h+var_40], rax
.text:0000000000004585                 add     rsp, 20h
.text:0000000000004589                 mov     rdi, rsi
.text:000000000000458C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004591                 call    xmalloc
.text:0000000000004596                 mov     [rsp+68h+var_58], rax
.text:000000000000459B                 sub     rsp, 8
.text:000000000000459F                 push    qword ptr [rbx+30h]
.text:00000000000045A2                 push    qword ptr [rbx+28h]
.text:00000000000045A5                 mov     r10, [rsp+80h+var_48]
.text:00000000000045AA                 mov     r9d, ebp
.text:00000000000045AD                 mov     r8d, [rbx]
.text:00000000000045B0                 mov     rcx, r15
.text:00000000000045B3                 mov     rdx, r14
.text:00000000000045B6                 mov     rdi, rax
.text:00000000000045B9                 push    r10
.text:00000000000045BB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000045C0                 call    quotearg_buffer_restyled
.text:00000000000045C5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000045C9                 add     rsp, 20h
.text:00000000000045CD                 test    r12, r12
.text:00000000000045D0                 mov     [r13+0], eax
.text:00000000000045D4                 jz      short loc_45DF
.text:00000000000045D6                 mov     r11, [rsp+68h+var_40]
.text:00000000000045DB                 mov     [r12], r11
.text:00000000000045DF
.text:00000000000045DF loc_45DF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000045DF                 mov     rax, [rsp+68h+var_58]
.text:00000000000045E4                 add     rsp, 38h
.text:00000000000045E8                 pop     rbx
.text:00000000000045E9                 pop     rbp
.text:00000000000045EA                 pop     r12
.text:00000000000045EC                 pop     r13
.text:00000000000045EE                 pop     r14
.text:00000000000045F0                 pop     r15
.text:00000000000045F2                 retn
.text:00000000000045F2 ; } // starts at 4510
.text:00000000000045F2 quotearg_alloc_mem endp
.text:00000000000045F2
.text:00000000000045F2 ; ---------------------------------------------------------------------------
.text:00000000000045F3                 align 20h
.text:0000000000004600
.text:0000000000004600 ; =============== S U B R O U T I N E =======================================
.text:0000000000004600
.text:0000000000004600
.text:0000000000004600                 public quotearg_alloc
.text:0000000000004600 quotearg_alloc  proc near
.text:0000000000004600 ; __unwind {
.text:0000000000004600                 mov     rcx, rdx
.text:0000000000004603                 xor     edx, edx
.text:0000000000004605                 jmp     quotearg_alloc_mem
.text:0000000000004605 ; } // starts at 4600
.text:0000000000004605 quotearg_alloc  endp
.text:0000000000004605
.text:0000000000004605 ; ---------------------------------------------------------------------------
.text:000000000000460A                 align 10h
.text:0000000000004610
.text:0000000000004610 ; =============== S U B R O U T I N E =======================================
.text:0000000000004610
.text:0000000000004610 ; Attributes: info_from_lumina
.text:0000000000004610
.text:0000000000004610 ; void __cdecl quotearg_free()
.text:0000000000004610                 public quotearg_free
.text:0000000000004610 quotearg_free   proc near
.text:0000000000004610 ; __unwind {
.text:0000000000004610                 mov     eax, cs:nslots
.text:0000000000004616                 push    r12
.text:0000000000004618                 mov     r12, cs:slotvec
.text:000000000000461F                 push    rbp
.text:0000000000004620                 push    rbx
.text:0000000000004621                 cmp     eax, 1
.text:0000000000004624                 jle     short loc_4651
.text:0000000000004626                 sub     eax, 2
.text:0000000000004629                 lea     rbx, [r12+18h]
.text:000000000000462E                 shl     rax, 4
.text:0000000000004632                 lea     rbp, [r12+rax+28h]
.text:0000000000004637                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004640
.text:0000000000004640 loc_4640:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004640                 mov     rdi, [rbx]      ; ptr
.text:0000000000004643                 add     rbx, 10h
.text:0000000000004647                 call    _free
.text:000000000000464C                 cmp     rbx, rbp
.text:000000000000464F                 jnz     short loc_4640
.text:0000000000004651
.text:0000000000004651 loc_4651:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004651                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004656                 lea     rbx, slot0
.text:000000000000465D                 cmp     rdi, rbx
.text:0000000000004660                 jz      short loc_4679
.text:0000000000004662                 call    _free
.text:0000000000004667                 mov     cs:slotvec0, 100h
.text:0000000000004672                 mov     cs:off_209078, rbx
.text:0000000000004679
.text:0000000000004679 loc_4679:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004679                 lea     rbx, slotvec0
.text:0000000000004680                 cmp     r12, rbx
.text:0000000000004683                 jz      short loc_4694
.text:0000000000004685                 mov     rdi, r12        ; ptr
.text:0000000000004688                 call    _free
.text:000000000000468D                 mov     cs:slotvec, rbx
.text:0000000000004694
.text:0000000000004694 loc_4694:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004694                 pop     rbx
.text:0000000000004695                 mov     cs:nslots, 1
.text:000000000000469F                 pop     rbp
.text:00000000000046A0                 pop     r12
.text:00000000000046A2                 retn
.text:00000000000046A2 ; } // starts at 4610
.text:00000000000046A2 quotearg_free   endp
.text:00000000000046A2
.text:00000000000046A2 ; ---------------------------------------------------------------------------
.text:00000000000046A3                 align 10h
.text:00000000000046B0
.text:00000000000046B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046B0
.text:00000000000046B0
.text:00000000000046B0                 public quotearg_n
.text:00000000000046B0 quotearg_n      proc near
.text:00000000000046B0 ; __unwind {
.text:00000000000046B0                 lea     rcx, default_quoting_options
.text:00000000000046B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000046BE                 jmp     quotearg_n_options
.text:00000000000046BE ; } // starts at 46B0
.text:00000000000046BE quotearg_n      endp
.text:00000000000046BE
.text:00000000000046BE ; ---------------------------------------------------------------------------
.text:00000000000046C3                 align 10h
.text:00000000000046D0
.text:00000000000046D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046D0
.text:00000000000046D0
.text:00000000000046D0                 public quotearg_n_mem
.text:00000000000046D0 quotearg_n_mem  proc near
.text:00000000000046D0 ; __unwind {
.text:00000000000046D0                 lea     rcx, default_quoting_options
.text:00000000000046D7                 jmp     quotearg_n_options
.text:00000000000046D7 ; } // starts at 46D0
.text:00000000000046D7 quotearg_n_mem  endp
.text:00000000000046D7
.text:00000000000046D7 ; ---------------------------------------------------------------------------
.text:00000000000046DC                 align 20h
.text:00000000000046E0
.text:00000000000046E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046E0
.text:00000000000046E0
.text:00000000000046E0                 public quotearg
.text:00000000000046E0 quotearg        proc near
.text:00000000000046E0 ; __unwind {
.text:00000000000046E0                 lea     rcx, default_quoting_options
.text:00000000000046E7                 mov     rsi, rdi
.text:00000000000046EA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000046F1                 xor     edi, edi
.text:00000000000046F3                 jmp     quotearg_n_options
.text:00000000000046F3 ; } // starts at 46E0
.text:00000000000046F3 quotearg        endp
.text:00000000000046F3
.text:00000000000046F3 ; ---------------------------------------------------------------------------
.text:00000000000046F8                 align 20h
.text:0000000000004700
.text:0000000000004700 ; =============== S U B R O U T I N E =======================================
.text:0000000000004700
.text:0000000000004700
.text:0000000000004700                 public quotearg_mem
.text:0000000000004700 quotearg_mem    proc near
.text:0000000000004700 ; __unwind {
.text:0000000000004700                 lea     rcx, default_quoting_options
.text:0000000000004707                 mov     rdx, rsi
.text:000000000000470A                 mov     rsi, rdi
.text:000000000000470D                 xor     edi, edi
.text:000000000000470F                 jmp     quotearg_n_options
.text:000000000000470F ; } // starts at 4700
.text:000000000000470F quotearg_mem    endp
.text:000000000000470F
.text:000000000000470F ; ---------------------------------------------------------------------------
.text:0000000000004714                 align 20h
.text:0000000000004720
.text:0000000000004720 ; =============== S U B R O U T I N E =======================================
.text:0000000000004720
.text:0000000000004720 ; Attributes: info_from_lumina
.text:0000000000004720
.text:0000000000004720 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004720                 public quotearg_n_style
.text:0000000000004720 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004720
.text:0000000000004720 var_48          = dword ptr -48h
.text:0000000000004720 var_44          = qword ptr -44h
.text:0000000000004720 var_3C          = qword ptr -3Ch
.text:0000000000004720 var_34          = qword ptr -34h
.text:0000000000004720 var_2C          = qword ptr -2Ch
.text:0000000000004720 var_24          = qword ptr -24h
.text:0000000000004720 var_1C          = qword ptr -1Ch
.text:0000000000004720 var_14          = dword ptr -14h
.text:0000000000004720 var_10          = qword ptr -10h
.text:0000000000004720
.text:0000000000004720 ; __unwind {
.text:0000000000004720                 sub     rsp, 48h
.text:0000000000004724                 mov     rax, rdx
.text:0000000000004727                 mov     rdx, fs:28h
.text:0000000000004730                 mov     [rsp+48h+var_10], rdx
.text:0000000000004735                 xor     edx, edx
.text:0000000000004737                 cmp     esi, 0Ah
.text:000000000000473A                 jz      short loc_47A4
.text:000000000000473C                 mov     [rsp+48h+var_48], esi
.text:000000000000473F                 mov     rcx, rsp
.text:0000000000004742                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004749                 mov     rsi, rax
.text:000000000000474C                 mov     [rsp+48h+var_44], 0
.text:0000000000004755                 mov     [rsp+48h+var_3C], 0
.text:000000000000475E                 mov     [rsp+48h+var_34], 0
.text:0000000000004767                 mov     [rsp+48h+var_2C], 0
.text:0000000000004770                 mov     [rsp+48h+var_24], 0
.text:0000000000004779                 mov     [rsp+48h+var_1C], 0
.text:0000000000004782                 mov     [rsp+48h+var_14], 0
.text:000000000000478A                 call    quotearg_n_options
.text:000000000000478F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004794                 xor     rcx, fs:28h
.text:000000000000479D                 jnz     short loc_47A9
.text:000000000000479F                 add     rsp, 48h
.text:00000000000047A3                 retn
.text:00000000000047A4 ; ---------------------------------------------------------------------------
.text:00000000000047A4
.text:00000000000047A4 loc_47A4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000047A4                 call    _abort
.text:00000000000047A9 ; ---------------------------------------------------------------------------
.text:00000000000047A9
.text:00000000000047A9 loc_47A9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000047A9                 call    ___stack_chk_fail
.text:00000000000047A9 ; } // starts at 4720
.text:00000000000047A9 quotearg_n_style endp
.text:00000000000047A9
.text:00000000000047A9 ; ---------------------------------------------------------------------------
.text:00000000000047AE                 align 10h
.text:00000000000047B0
.text:00000000000047B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047B0
.text:00000000000047B0 ; Attributes: info_from_lumina
.text:00000000000047B0
.text:00000000000047B0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000047B0                 public quotearg_n_style_mem
.text:00000000000047B0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000047B0
.text:00000000000047B0 var_48          = dword ptr -48h
.text:00000000000047B0 var_44          = qword ptr -44h
.text:00000000000047B0 var_3C          = qword ptr -3Ch
.text:00000000000047B0 var_34          = qword ptr -34h
.text:00000000000047B0 var_2C          = qword ptr -2Ch
.text:00000000000047B0 var_24          = qword ptr -24h
.text:00000000000047B0 var_1C          = qword ptr -1Ch
.text:00000000000047B0 var_14          = dword ptr -14h
.text:00000000000047B0 var_10          = qword ptr -10h
.text:00000000000047B0
.text:00000000000047B0 ; __unwind {
.text:00000000000047B0                 sub     rsp, 48h
.text:00000000000047B4                 mov     rax, rdx
.text:00000000000047B7                 mov     rdx, rcx
.text:00000000000047BA                 mov     rcx, fs:28h
.text:00000000000047C3                 mov     [rsp+48h+var_10], rcx
.text:00000000000047C8                 xor     ecx, ecx
.text:00000000000047CA                 cmp     esi, 0Ah
.text:00000000000047CD                 jz      short loc_4830
.text:00000000000047CF                 mov     [rsp+48h+var_48], esi
.text:00000000000047D2                 mov     rcx, rsp
.text:00000000000047D5                 mov     rsi, rax
.text:00000000000047D8                 mov     [rsp+48h+var_44], 0
.text:00000000000047E1                 mov     [rsp+48h+var_3C], 0
.text:00000000000047EA                 mov     [rsp+48h+var_34], 0
.text:00000000000047F3                 mov     [rsp+48h+var_2C], 0
.text:00000000000047FC                 mov     [rsp+48h+var_24], 0
.text:0000000000004805                 mov     [rsp+48h+var_1C], 0
.text:000000000000480E                 mov     [rsp+48h+var_14], 0
.text:0000000000004816                 call    quotearg_n_options
.text:000000000000481B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004820                 xor     rdx, fs:28h
.text:0000000000004829                 jnz     short loc_4835
.text:000000000000482B                 add     rsp, 48h
.text:000000000000482F                 retn
.text:0000000000004830 ; ---------------------------------------------------------------------------
.text:0000000000004830
.text:0000000000004830 loc_4830:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004830                 call    _abort
.text:0000000000004835 ; ---------------------------------------------------------------------------
.text:0000000000004835
.text:0000000000004835 loc_4835:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004835                 call    ___stack_chk_fail
.text:0000000000004835 ; } // starts at 47B0
.text:0000000000004835 quotearg_n_style_mem endp
.text:0000000000004835
.text:0000000000004835 ; ---------------------------------------------------------------------------
.text:000000000000483A                 align 20h
.text:0000000000004840
.text:0000000000004840 ; =============== S U B R O U T I N E =======================================
.text:0000000000004840
.text:0000000000004840
.text:0000000000004840                 public quotearg_style
.text:0000000000004840 quotearg_style  proc near
.text:0000000000004840 ; __unwind {
.text:0000000000004840                 mov     rdx, rsi
.text:0000000000004843                 mov     esi, edi
.text:0000000000004845                 xor     edi, edi
.text:0000000000004847                 jmp     quotearg_n_style
.text:0000000000004847 ; } // starts at 4840
.text:0000000000004847 quotearg_style  endp
.text:0000000000004847
.text:0000000000004847 ; ---------------------------------------------------------------------------
.text:000000000000484C                 align 10h
.text:0000000000004850
.text:0000000000004850 ; =============== S U B R O U T I N E =======================================
.text:0000000000004850
.text:0000000000004850
.text:0000000000004850                 public quotearg_style_mem
.text:0000000000004850 quotearg_style_mem proc near
.text:0000000000004850 ; __unwind {
.text:0000000000004850                 mov     rcx, rdx
.text:0000000000004853                 mov     rdx, rsi
.text:0000000000004856                 mov     esi, edi
.text:0000000000004858                 xor     edi, edi
.text:000000000000485A                 jmp     quotearg_n_style_mem
.text:000000000000485A ; } // starts at 4850
.text:000000000000485A quotearg_style_mem endp
.text:000000000000485A
.text:000000000000485A ; ---------------------------------------------------------------------------
.text:000000000000485F                 align 20h
.text:0000000000004860
.text:0000000000004860 ; =============== S U B R O U T I N E =======================================
.text:0000000000004860
.text:0000000000004860 ; Attributes: info_from_lumina
.text:0000000000004860
.text:0000000000004860 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004860                 public quotearg_char_mem
.text:0000000000004860 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004860                                         ; quotearg_colon+C↓j ...
.text:0000000000004860
.text:0000000000004860 var_48          = xmmword ptr -48h
.text:0000000000004860 var_38          = xmmword ptr -38h
.text:0000000000004860 var_28          = xmmword ptr -28h
.text:0000000000004860 var_18          = qword ptr -18h
.text:0000000000004860 var_10          = qword ptr -10h
.text:0000000000004860
.text:0000000000004860 ; __unwind {
.text:0000000000004860                 sub     rsp, 48h
.text:0000000000004864                 mov     ecx, edx
.text:0000000000004866                 mov     rax, fs:28h
.text:000000000000486F                 mov     [rsp+48h+var_10], rax
.text:0000000000004874                 xor     eax, eax
.text:0000000000004876                 mov     rax, cs:qword_209230
.text:000000000000487D                 mov     r8, rsp
.text:0000000000004880                 and     ecx, 1Fh
.text:0000000000004883                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000488B                 mov     [rsp+48h+var_18], rax
.text:0000000000004890                 mov     eax, edx
.text:0000000000004892                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004896                 shr     al, 5
.text:0000000000004899                 movzx   eax, al
.text:000000000000489C                 lea     r9, [r8+rax*4+8]
.text:00000000000048A1                 movdqa  xmm0, cs:xmmword_209210
.text:00000000000048A9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000048AE                 movdqa  xmm0, cs:xmmword_209220
.text:00000000000048B6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000048BB                 mov     edx, [r9]
.text:00000000000048BE                 mov     eax, edx
.text:00000000000048C0                 shr     eax, cl
.text:00000000000048C2                 not     eax
.text:00000000000048C4                 and     eax, 1
.text:00000000000048C7                 shl     eax, cl
.text:00000000000048C9                 mov     rcx, r8
.text:00000000000048CC                 xor     eax, edx
.text:00000000000048CE                 mov     rdx, rsi
.text:00000000000048D1                 mov     rsi, rdi
.text:00000000000048D4                 mov     [r9], eax
.text:00000000000048D7                 xor     edi, edi
.text:00000000000048D9                 call    quotearg_n_options
.text:00000000000048DE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000048E3                 xor     rsi, fs:28h
.text:00000000000048EC                 jnz     short loc_48F3
.text:00000000000048EE                 add     rsp, 48h
.text:00000000000048F2                 retn
.text:00000000000048F3 ; ---------------------------------------------------------------------------
.text:00000000000048F3
.text:00000000000048F3 loc_48F3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000048F3                 call    ___stack_chk_fail
.text:00000000000048F3 ; } // starts at 4860
.text:00000000000048F3 quotearg_char_mem endp
.text:00000000000048F3
.text:00000000000048F3 ; ---------------------------------------------------------------------------
.text:00000000000048F8                 align 20h
.text:0000000000004900
.text:0000000000004900 ; =============== S U B R O U T I N E =======================================
.text:0000000000004900
.text:0000000000004900
.text:0000000000004900                 public quotearg_char
.text:0000000000004900 quotearg_char   proc near
.text:0000000000004900 ; __unwind {
.text:0000000000004900                 movsx   edx, sil
.text:0000000000004904                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000490B                 jmp     quotearg_char_mem
.text:000000000000490B ; } // starts at 4900
.text:000000000000490B quotearg_char   endp
.text:000000000000490B
.text:0000000000004910
.text:0000000000004910 ; =============== S U B R O U T I N E =======================================
.text:0000000000004910
.text:0000000000004910
.text:0000000000004910                 public quotearg_colon
.text:0000000000004910 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004910 ; __unwind {
.text:0000000000004910                 mov     edx, 3Ah ; ':'
.text:0000000000004915                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000491C                 jmp     quotearg_char_mem
.text:000000000000491C ; } // starts at 4910
.text:000000000000491C quotearg_colon  endp
.text:000000000000491C
.text:000000000000491C ; ---------------------------------------------------------------------------
.text:0000000000004921                 align 10h
.text:0000000000004930
.text:0000000000004930 ; =============== S U B R O U T I N E =======================================
.text:0000000000004930
.text:0000000000004930
.text:0000000000004930                 public quotearg_colon_mem
.text:0000000000004930 quotearg_colon_mem proc near
.text:0000000000004930 ; __unwind {
.text:0000000000004930                 mov     edx, 3Ah ; ':'
.text:0000000000004935                 jmp     quotearg_char_mem
.text:0000000000004935 ; } // starts at 4930
.text:0000000000004935 quotearg_colon_mem endp
.text:0000000000004935
.text:0000000000004935 ; ---------------------------------------------------------------------------
.text:000000000000493A                 align 20h
.text:0000000000004940
.text:0000000000004940 ; =============== S U B R O U T I N E =======================================
.text:0000000000004940
.text:0000000000004940 ; Attributes: info_from_lumina
.text:0000000000004940
.text:0000000000004940 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004940                 public quotearg_n_style_colon
.text:0000000000004940 quotearg_n_style_colon proc near        ; CODE XREF: main+1AA↑p
.text:0000000000004940                                         ; main+6A4↑p
.text:0000000000004940
.text:0000000000004940 var_48          = dword ptr -48h
.text:0000000000004940 var_44          = qword ptr -44h
.text:0000000000004940 var_3C          = qword ptr -3Ch
.text:0000000000004940 var_34          = qword ptr -34h
.text:0000000000004940 var_2C          = qword ptr -2Ch
.text:0000000000004940 var_24          = qword ptr -24h
.text:0000000000004940 var_1C          = qword ptr -1Ch
.text:0000000000004940 var_14          = dword ptr -14h
.text:0000000000004940 var_10          = qword ptr -10h
.text:0000000000004940
.text:0000000000004940 ; __unwind {
.text:0000000000004940                 sub     rsp, 48h
.text:0000000000004944                 mov     rax, rdx
.text:0000000000004947                 mov     rdx, fs:28h
.text:0000000000004950                 mov     [rsp+48h+var_10], rdx
.text:0000000000004955                 xor     edx, edx
.text:0000000000004957                 cmp     esi, 0Ah
.text:000000000000495A                 jz      short loc_49C4
.text:000000000000495C                 mov     [rsp+48h+var_48], esi
.text:000000000000495F                 mov     rcx, rsp
.text:0000000000004962                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004969                 mov     rsi, rax
.text:000000000000496C                 mov     [rsp+48h+var_44], 0
.text:0000000000004975                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000497E                 mov     [rsp+48h+var_34], 0
.text:0000000000004987                 mov     [rsp+48h+var_2C], 0
.text:0000000000004990                 mov     [rsp+48h+var_24], 0
.text:0000000000004999                 mov     [rsp+48h+var_1C], 0
.text:00000000000049A2                 mov     [rsp+48h+var_14], 0
.text:00000000000049AA                 call    quotearg_n_options
.text:00000000000049AF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000049B4                 xor     rcx, fs:28h
.text:00000000000049BD                 jnz     short loc_49C9
.text:00000000000049BF                 add     rsp, 48h
.text:00000000000049C3                 retn
.text:00000000000049C4 ; ---------------------------------------------------------------------------
.text:00000000000049C4
.text:00000000000049C4 loc_49C4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000049C4                 call    _abort
.text:00000000000049C9 ; ---------------------------------------------------------------------------
.text:00000000000049C9
.text:00000000000049C9 loc_49C9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000049C9                 call    ___stack_chk_fail
.text:00000000000049C9 ; } // starts at 4940
.text:00000000000049C9 quotearg_n_style_colon endp
.text:00000000000049C9
.text:00000000000049C9 ; ---------------------------------------------------------------------------
.text:00000000000049CE                 align 10h
.text:00000000000049D0
.text:00000000000049D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049D0
.text:00000000000049D0 ; Attributes: info_from_lumina
.text:00000000000049D0
.text:00000000000049D0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000049D0                 public quotearg_n_custom_mem
.text:00000000000049D0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000049D0                                         ; quotearg_custom+12↓j ...
.text:00000000000049D0
.text:00000000000049D0 var_48          = xmmword ptr -48h
.text:00000000000049D0 var_38          = xmmword ptr -38h
.text:00000000000049D0 var_28          = xmmword ptr -28h
.text:00000000000049D0 var_18          = qword ptr -18h
.text:00000000000049D0 var_10          = qword ptr -10h
.text:00000000000049D0
.text:00000000000049D0 ; __unwind {
.text:00000000000049D0                 sub     rsp, 48h
.text:00000000000049D4                 mov     r9, rcx
.text:00000000000049D7                 mov     rcx, cs:qword_209230
.text:00000000000049DE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000049E6                 mov     rax, fs:28h
.text:00000000000049EF                 mov     [rsp+48h+var_10], rax
.text:00000000000049F4                 xor     eax, eax
.text:00000000000049F6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000049FA                 test    rsi, rsi
.text:00000000000049FD                 mov     [rsp+48h+var_18], rcx
.text:0000000000004A02                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004A09                 movdqa  xmm0, cs:xmmword_209210
.text:0000000000004A11                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004A16                 movdqa  xmm0, cs:xmmword_209220
.text:0000000000004A1E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004A23                 jz      short loc_4A57
.text:0000000000004A25                 test    rdx, rdx
.text:0000000000004A28                 jz      short loc_4A57
.text:0000000000004A2A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000004A2F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004A34                 mov     rcx, rsp
.text:0000000000004A37                 mov     rdx, r8
.text:0000000000004A3A                 mov     rsi, r9
.text:0000000000004A3D                 call    quotearg_n_options
.text:0000000000004A42                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004A47                 xor     rdi, fs:28h
.text:0000000000004A50                 jnz     short loc_4A5C
.text:0000000000004A52                 add     rsp, 48h
.text:0000000000004A56                 retn
.text:0000000000004A57 ; ---------------------------------------------------------------------------
.text:0000000000004A57
.text:0000000000004A57 loc_4A57:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004A57                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004A57                 call    _abort
.text:0000000000004A5C ; ---------------------------------------------------------------------------
.text:0000000000004A5C
.text:0000000000004A5C loc_4A5C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000004A5C                 call    ___stack_chk_fail
.text:0000000000004A5C ; } // starts at 49D0
.text:0000000000004A5C quotearg_n_custom_mem endp
.text:0000000000004A5C
.text:0000000000004A5C ; ---------------------------------------------------------------------------
.text:0000000000004A61                 align 10h
.text:0000000000004A70
.text:0000000000004A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A70
.text:0000000000004A70
.text:0000000000004A70                 public quotearg_n_custom
.text:0000000000004A70 quotearg_n_custom proc near
.text:0000000000004A70 ; __unwind {
.text:0000000000004A70                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A77                 jmp     quotearg_n_custom_mem
.text:0000000000004A77 ; } // starts at 4A70
.text:0000000000004A77 quotearg_n_custom endp
.text:0000000000004A77
.text:0000000000004A77 ; ---------------------------------------------------------------------------
.text:0000000000004A7C                 align 20h
.text:0000000000004A80
.text:0000000000004A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A80
.text:0000000000004A80
.text:0000000000004A80                 public quotearg_custom
.text:0000000000004A80 quotearg_custom proc near
.text:0000000000004A80 ; __unwind {
.text:0000000000004A80                 mov     rcx, rdx
.text:0000000000004A83                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A8A                 mov     rdx, rsi
.text:0000000000004A8D                 mov     rsi, rdi
.text:0000000000004A90                 xor     edi, edi
.text:0000000000004A92                 jmp     quotearg_n_custom_mem
.text:0000000000004A92 ; } // starts at 4A80
.text:0000000000004A92 quotearg_custom endp
.text:0000000000004A92
.text:0000000000004A92 ; ---------------------------------------------------------------------------
.text:0000000000004A97                 align 20h
.text:0000000000004AA0
.text:0000000000004AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AA0
.text:0000000000004AA0
.text:0000000000004AA0                 public quotearg_custom_mem
.text:0000000000004AA0 quotearg_custom_mem proc near
.text:0000000000004AA0 ; __unwind {
.text:0000000000004AA0                 mov     r8, rcx
.text:0000000000004AA3                 mov     rcx, rdx
.text:0000000000004AA6                 mov     rdx, rsi
.text:0000000000004AA9                 mov     rsi, rdi
.text:0000000000004AAC                 xor     edi, edi
.text:0000000000004AAE                 jmp     quotearg_n_custom_mem
.text:0000000000004AAE ; } // starts at 4AA0
.text:0000000000004AAE quotearg_custom_mem endp
.text:0000000000004AAE
.text:0000000000004AAE ; ---------------------------------------------------------------------------
.text:0000000000004AB3                 align 20h
.text:0000000000004AC0
.text:0000000000004AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AC0
.text:0000000000004AC0
.text:0000000000004AC0                 public quote_n_mem
.text:0000000000004AC0 quote_n_mem     proc near
.text:0000000000004AC0 ; __unwind {
.text:0000000000004AC0                 lea     rcx, quote_quoting_options
.text:0000000000004AC7                 jmp     quotearg_n_options
.text:0000000000004AC7 ; } // starts at 4AC0
.text:0000000000004AC7 quote_n_mem     endp
.text:0000000000004AC7
.text:0000000000004AC7 ; ---------------------------------------------------------------------------
.text:0000000000004ACC                 align 10h
.text:0000000000004AD0
.text:0000000000004AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AD0
.text:0000000000004AD0
.text:0000000000004AD0                 public quote_mem
.text:0000000000004AD0 quote_mem       proc near
.text:0000000000004AD0 ; __unwind {
.text:0000000000004AD0                 lea     rcx, quote_quoting_options
.text:0000000000004AD7                 mov     rdx, rsi
.text:0000000000004ADA                 mov     rsi, rdi
.text:0000000000004ADD                 xor     edi, edi
.text:0000000000004ADF                 jmp     quotearg_n_options
.text:0000000000004ADF ; } // starts at 4AD0
.text:0000000000004ADF quote_mem       endp
.text:0000000000004ADF
.text:0000000000004ADF ; ---------------------------------------------------------------------------
.text:0000000000004AE4                 align 10h
.text:0000000000004AF0
.text:0000000000004AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AF0
.text:0000000000004AF0
.text:0000000000004AF0                 public quote_n
.text:0000000000004AF0 quote_n         proc near
.text:0000000000004AF0 ; __unwind {
.text:0000000000004AF0                 lea     rcx, quote_quoting_options
.text:0000000000004AF7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004AFE                 jmp     quotearg_n_options
.text:0000000000004AFE ; } // starts at 4AF0
.text:0000000000004AFE quote_n         endp
.text:0000000000004AFE
.text:0000000000004AFE ; ---------------------------------------------------------------------------
.text:0000000000004B03                 align 10h
.text:0000000000004B10
.text:0000000000004B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B10
.text:0000000000004B10
.text:0000000000004B10                 public quote
.text:0000000000004B10 quote           proc near               ; CODE XREF: main+781↑p
.text:0000000000004B10                                         ; xnumtoumax+6D↓p
.text:0000000000004B10 ; __unwind {
.text:0000000000004B10                 lea     rcx, quote_quoting_options
.text:0000000000004B17                 mov     rsi, rdi
.text:0000000000004B1A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B21                 xor     edi, edi
.text:0000000000004B23                 jmp     quotearg_n_options
.text:0000000000004B23 ; } // starts at 4B10
.text:0000000000004B23 quote           endp
.text:0000000000004B23
.text:0000000000004B23 ; ---------------------------------------------------------------------------
.text:0000000000004B28                 align 10h
.text:0000000000004B30
.text:0000000000004B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B30
.text:0000000000004B30
.text:0000000000004B30 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004B30                 public version_etc_arn
.text:0000000000004B30 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_4F6B↓j
.text:0000000000004B30                                         ; version_etc_va:loc_4FBB↓p ...
.text:0000000000004B30
.text:0000000000004B30 var_58          = qword ptr -58h
.text:0000000000004B30 var_50          = qword ptr -50h
.text:0000000000004B30 var_48          = qword ptr -48h
.text:0000000000004B30 var_40          = qword ptr -40h
.text:0000000000004B30
.text:0000000000004B30 ; __unwind {
.text:0000000000004B30                 push    r15
.text:0000000000004B32                 push    r14
.text:0000000000004B34                 push    r13
.text:0000000000004B36                 push    r12
.text:0000000000004B38                 mov     r12, r9
.text:0000000000004B3B                 push    rbp
.text:0000000000004B3C                 push    rbx
.text:0000000000004B3D                 mov     rbp, rdi
.text:0000000000004B40                 mov     rbx, r8
.text:0000000000004B43                 sub     rsp, 28h
.text:0000000000004B47                 test    rsi, rsi
.text:0000000000004B4A                 jz      loc_4C68
.text:0000000000004B50                 mov     r8, rdx
.text:0000000000004B53                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000004B5A                 mov     r9, rcx
.text:0000000000004B5D                 xor     eax, eax
.text:0000000000004B5F                 mov     rcx, rsi
.text:0000000000004B62                 mov     esi, 1
.text:0000000000004B67                 call    ___fprintf_chk
.text:0000000000004B6C
.text:0000000000004B6C loc_4B6C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000004B6C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004B73                 xor     edi, edi        ; domainname
.text:0000000000004B75                 mov     edx, 5          ; category
.text:0000000000004B7A                 call    _dcgettext
.text:0000000000004B7F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004B86                 mov     rcx, rax
.text:0000000000004B89                 mov     r8d, 7E3h
.text:0000000000004B8F                 mov     esi, 1
.text:0000000000004B94                 mov     rdi, rbp
.text:0000000000004B97                 xor     eax, eax
.text:0000000000004B99                 call    ___fprintf_chk
.text:0000000000004B9E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004BA5                 xor     edi, edi        ; domainname
.text:0000000000004BA7                 mov     edx, 5          ; category
.text:0000000000004BAC                 call    _dcgettext
.text:0000000000004BB1                 mov     rsi, rbp        ; stream
.text:0000000000004BB4                 mov     rdi, rax        ; s
.text:0000000000004BB7                 call    _fputs_unlocked
.text:0000000000004BBC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004BC0                 ja      def_4BD4        ; jumptable 0000000000004BD4 default case
.text:0000000000004BC6                 lea     rdx, jpt_4BD4
.text:0000000000004BCD                 movsxd  rax, ds:(jpt_4BD4 - 6B84h)[rdx+r12*4]
.text:0000000000004BD1                 add     rax, rdx
.text:0000000000004BD4                 jmp     rax             ; switch jump
.text:0000000000004BD4 ; ---------------------------------------------------------------------------
.text:0000000000004BD6                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 loc_4BE0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004BE0                                         ; DATA XREF: .rodata:jpt_4BD4↓o
.text:0000000000004BE0                 mov     r9, [rbx+38h]   ; jumptable 0000000000004BD4 case 8
.text:0000000000004BE4                 mov     rax, [rbx+10h]
.text:0000000000004BE8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004BEF                 mov     r8, [rbx+8]
.text:0000000000004BF3                 mov     edx, 5          ; category
.text:0000000000004BF8                 xor     edi, edi        ; domainname
.text:0000000000004BFA                 mov     r13, [rbx+30h]
.text:0000000000004BFE                 mov     r12, [rbx+28h]
.text:0000000000004C02                 mov     [rsp+58h+var_48], r9
.text:0000000000004C07                 mov     r15, [rbx+20h]
.text:0000000000004C0B                 mov     r14, [rbx+18h]
.text:0000000000004C0F                 mov     [rsp+58h+var_58], rax
.text:0000000000004C13                 mov     [rsp+58h+var_50], r8
.text:0000000000004C18                 mov     rbx, [rbx]
.text:0000000000004C1B                 call    _dcgettext
.text:0000000000004C20                 sub     rsp, 8
.text:0000000000004C24
.text:0000000000004C24 loc_4C24:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004C24                 mov     r9, [rsp+60h+var_48]
.text:0000000000004C29                 mov     rdx, rax
.text:0000000000004C2C                 mov     rcx, rbx
.text:0000000000004C2F                 mov     esi, 1
.text:0000000000004C34                 mov     rdi, rbp
.text:0000000000004C37                 xor     eax, eax
.text:0000000000004C39                 push    r9
.text:0000000000004C3B                 push    r13
.text:0000000000004C3D                 push    r12
.text:0000000000004C3F                 push    r15
.text:0000000000004C41                 push    r14
.text:0000000000004C43                 mov     r9, [rsp+88h+var_58]
.text:0000000000004C48                 mov     r8, [rsp+88h+var_50]
.text:0000000000004C4D                 call    ___fprintf_chk
.text:0000000000004C52                 add     rsp, 30h
.text:0000000000004C56
.text:0000000000004C56 loc_4C56:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004C56                                         ; DATA XREF: .rodata:jpt_4BD4↓o
.text:0000000000004C56                 add     rsp, 28h        ; jumptable 0000000000004BD4 case 0
.text:0000000000004C5A                 pop     rbx
.text:0000000000004C5B                 pop     rbp
.text:0000000000004C5C                 pop     r12
.text:0000000000004C5E                 pop     r13
.text:0000000000004C60                 pop     r14
.text:0000000000004C62                 pop     r15
.text:0000000000004C64                 retn
.text:0000000000004C64 ; ---------------------------------------------------------------------------
.text:0000000000004C65                 align 8
.text:0000000000004C68
.text:0000000000004C68 loc_4C68:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004C68                 mov     r8, rcx
.text:0000000000004C6B                 mov     rcx, rdx
.text:0000000000004C6E                 lea     rdx, aSS        ; "%s %s\n"
.text:0000000000004C75                 mov     esi, 1
.text:0000000000004C7A                 xor     eax, eax
.text:0000000000004C7C                 call    ___fprintf_chk
.text:0000000000004C81                 jmp     loc_4B6C
.text:0000000000004C81 ; ---------------------------------------------------------------------------
.text:0000000000004C86                 align 10h
.text:0000000000004C90
.text:0000000000004C90 loc_4C90:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004C90                                         ; DATA XREF: .rodata:jpt_4BD4↓o
.text:0000000000004C90                 mov     r10, [rbx+40h]  ; jumptable 0000000000004BD4 case 9
.text:0000000000004C94                 mov     r9, [rbx+38h]
.text:0000000000004C98                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004C9F                 mov     rax, [rbx+10h]
.text:0000000000004CA3                 mov     r8, [rbx+8]
.text:0000000000004CA7                 mov     edx, 5          ; category
.text:0000000000004CAC                 mov     r13, [rbx+30h]
.text:0000000000004CB0                 mov     r12, [rbx+28h]
.text:0000000000004CB4                 mov     r15, [rbx+20h]
.text:0000000000004CB8                 mov     r14, [rbx+18h]
.text:0000000000004CBC                 mov     rbx, [rbx]
.text:0000000000004CBF                 mov     [rsp+58h+var_40], r10
.text:0000000000004CC4                 mov     [rsp+58h+var_48], r9
.text:0000000000004CC9                 mov     [rsp+58h+var_58], rax
.text:0000000000004CCD                 mov     [rsp+58h+var_50], r8
.text:0000000000004CD2
.text:0000000000004CD2 loc_4CD2:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004CD2                 xor     edi, edi        ; domainname
.text:0000000000004CD4                 call    _dcgettext
.text:0000000000004CD9                 mov     r10, [rsp+58h+var_40]
.text:0000000000004CDE                 push    r10
.text:0000000000004CE0                 jmp     loc_4C24
.text:0000000000004CE0 ; ---------------------------------------------------------------------------
.text:0000000000004CE5                 align 8
.text:0000000000004CE8
.text:0000000000004CE8 loc_4CE8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004CE8                                         ; DATA XREF: .rodata:jpt_4BD4↓o
.text:0000000000004CE8                 mov     rbx, [rbx]      ; jumptable 0000000000004BD4 case 1
.text:0000000000004CEB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004CF2                 mov     edx, 5          ; category
.text:0000000000004CF7                 xor     edi, edi        ; domainname
.text:0000000000004CF9                 call    _dcgettext
.text:0000000000004CFE                 add     rsp, 28h
.text:0000000000004D02                 mov     rcx, rbx
.text:0000000000004D05                 mov     rdi, rbp
.text:0000000000004D08                 pop     rbx
.text:0000000000004D09                 pop     rbp
.text:0000000000004D0A                 pop     r12
.text:0000000000004D0C                 pop     r13
.text:0000000000004D0E                 pop     r14
.text:0000000000004D10                 pop     r15
.text:0000000000004D12                 mov     rdx, rax
.text:0000000000004D15                 mov     esi, 1
.text:0000000000004D1A                 xor     eax, eax
.text:0000000000004D1C                 jmp     ___fprintf_chk
.text:0000000000004D1C ; ---------------------------------------------------------------------------
.text:0000000000004D21                 align 8
.text:0000000000004D28
.text:0000000000004D28 loc_4D28:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D28                                         ; DATA XREF: .rodata:jpt_4BD4↓o
.text:0000000000004D28                 mov     r12, [rbx+8]    ; jumptable 0000000000004BD4 case 2
.text:0000000000004D2C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004D33                 mov     rbx, [rbx]
.text:0000000000004D36                 mov     edx, 5          ; category
.text:0000000000004D3B                 xor     edi, edi        ; domainname
.text:0000000000004D3D                 call    _dcgettext
.text:0000000000004D42                 add     rsp, 28h
.text:0000000000004D46                 mov     r8, r12
.text:0000000000004D49                 mov     rcx, rbx
.text:0000000000004D4C                 mov     rdi, rbp
.text:0000000000004D4F                 mov     rdx, rax
.text:0000000000004D52                 mov     esi, 1
.text:0000000000004D57                 pop     rbx
.text:0000000000004D58                 pop     rbp
.text:0000000000004D59                 pop     r12
.text:0000000000004D5B                 pop     r13
.text:0000000000004D5D                 pop     r14
.text:0000000000004D5F                 pop     r15
.text:0000000000004D61                 xor     eax, eax
.text:0000000000004D63                 jmp     ___fprintf_chk
.text:0000000000004D63 ; ---------------------------------------------------------------------------
.text:0000000000004D68                 align 10h
.text:0000000000004D70
.text:0000000000004D70 loc_4D70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D70                                         ; DATA XREF: .rodata:jpt_4BD4↓o
.text:0000000000004D70                 mov     r13, [rbx+10h]  ; jumptable 0000000000004BD4 case 3
.text:0000000000004D74                 mov     r12, [rbx+8]
.text:0000000000004D78                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000004D7F                 mov     rbx, [rbx]
.text:0000000000004D82                 mov     edx, 5          ; category
.text:0000000000004D87                 xor     edi, edi        ; domainname
.text:0000000000004D89                 call    _dcgettext
.text:0000000000004D8E                 add     rsp, 28h
.text:0000000000004D92                 mov     r9, r13
.text:0000000000004D95                 mov     r8, r12
.text:0000000000004D98                 mov     rcx, rbx
.text:0000000000004D9B                 mov     rdi, rbp
.text:0000000000004D9E                 mov     rdx, rax
.text:0000000000004DA1                 pop     rbx
.text:0000000000004DA2                 pop     rbp
.text:0000000000004DA3                 pop     r12
.text:0000000000004DA5                 pop     r13
.text:0000000000004DA7                 pop     r14
.text:0000000000004DA9                 pop     r15
.text:0000000000004DAB                 mov     esi, 1
.text:0000000000004DB0                 xor     eax, eax
.text:0000000000004DB2                 jmp     ___fprintf_chk
.text:0000000000004DB2 ; ---------------------------------------------------------------------------
.text:0000000000004DB7                 align 20h
.text:0000000000004DC0
.text:0000000000004DC0 loc_4DC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004DC0                                         ; DATA XREF: .rodata:jpt_4BD4↓o
.text:0000000000004DC0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004BD4 case 4
.text:0000000000004DC7                 mov     edx, 5          ; category
.text:0000000000004DCC                 xor     edi, edi        ; domainname
.text:0000000000004DCE                 mov     r14, [rbx+18h]
.text:0000000000004DD2                 mov     r13, [rbx+10h]
.text:0000000000004DD6                 mov     r12, [rbx+8]
.text:0000000000004DDA                 mov     rbx, [rbx]
.text:0000000000004DDD                 call    _dcgettext
.text:0000000000004DE2                 sub     rsp, 8
.text:0000000000004DE6
.text:0000000000004DE6 loc_4DE6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004DE6                 push    r14
.text:0000000000004DE8                 mov     rdx, rax
.text:0000000000004DEB                 mov     r9, r13
.text:0000000000004DEE                 mov     r8, r12
.text:0000000000004DF1                 mov     rcx, rbx
.text:0000000000004DF4                 mov     rdi, rbp
.text:0000000000004DF7                 mov     esi, 1
.text:0000000000004DFC                 xor     eax, eax
.text:0000000000004DFE                 call    ___fprintf_chk
.text:0000000000004E03                 pop     rax
.text:0000000000004E04                 pop     rdx
.text:0000000000004E05                 add     rsp, 28h
.text:0000000000004E09                 pop     rbx
.text:0000000000004E0A                 pop     rbp
.text:0000000000004E0B                 pop     r12
.text:0000000000004E0D                 pop     r13
.text:0000000000004E0F                 pop     r14
.text:0000000000004E11                 pop     r15
.text:0000000000004E13                 retn
.text:0000000000004E13 ; ---------------------------------------------------------------------------
.text:0000000000004E14                 align 8
.text:0000000000004E18
.text:0000000000004E18 loc_4E18:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004E18                                         ; DATA XREF: .rodata:jpt_4BD4↓o
.text:0000000000004E18                 mov     r15, [rbx+20h]  ; jumptable 0000000000004BD4 case 5
.text:0000000000004E1C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004E23                 mov     edx, 5          ; category
.text:0000000000004E28                 xor     edi, edi        ; domainname
.text:0000000000004E2A                 mov     r14, [rbx+18h]
.text:0000000000004E2E                 mov     r13, [rbx+10h]
.text:0000000000004E32                 mov     r12, [rbx+8]
.text:0000000000004E36                 mov     rbx, [rbx]
.text:0000000000004E39                 call    _dcgettext
.text:0000000000004E3E                 push    r15
.text:0000000000004E40                 jmp     short loc_4DE6
.text:0000000000004E40 ; ---------------------------------------------------------------------------
.text:0000000000004E42                 align 8
.text:0000000000004E48
.text:0000000000004E48 loc_4E48:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004E48                                         ; DATA XREF: .rodata:jpt_4BD4↓o
.text:0000000000004E48                 mov     r8, [rbx+8]     ; jumptable 0000000000004BD4 case 6
.text:0000000000004E4C                 mov     r12, [rbx+28h]
.text:0000000000004E50                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004E57                 mov     r15, [rbx+20h]
.text:0000000000004E5B                 mov     r14, [rbx+18h]
.text:0000000000004E5F                 mov     edx, 5          ; category
.text:0000000000004E64                 mov     r13, [rbx+10h]
.text:0000000000004E68                 xor     edi, edi        ; domainname
.text:0000000000004E6A                 mov     rbx, [rbx]
.text:0000000000004E6D                 mov     [rsp+58h+var_58], r8
.text:0000000000004E71                 call    _dcgettext
.text:0000000000004E76                 sub     rsp, 8
.text:0000000000004E7A                 mov     r9, r13
.text:0000000000004E7D                 push    r12
.text:0000000000004E7F                 push    r15
.text:0000000000004E81                 push    r14
.text:0000000000004E83
.text:0000000000004E83 loc_4E83:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004E83                 mov     r8, [rsp+78h+var_58]
.text:0000000000004E88                 mov     rcx, rbx
.text:0000000000004E8B                 mov     rdx, rax
.text:0000000000004E8E                 mov     rdi, rbp
.text:0000000000004E91                 mov     esi, 1
.text:0000000000004E96                 xor     eax, eax
.text:0000000000004E98                 call    ___fprintf_chk
.text:0000000000004E9D                 add     rsp, 20h
.text:0000000000004EA1                 add     rsp, 28h
.text:0000000000004EA5                 pop     rbx
.text:0000000000004EA6                 pop     rbp
.text:0000000000004EA7                 pop     r12
.text:0000000000004EA9                 pop     r13
.text:0000000000004EAB                 pop     r14
.text:0000000000004EAD                 pop     r15
.text:0000000000004EAF                 retn
.text:0000000000004EB0 ; ---------------------------------------------------------------------------
.text:0000000000004EB0
.text:0000000000004EB0 loc_4EB0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004EB0                                         ; DATA XREF: .rodata:jpt_4BD4↓o
.text:0000000000004EB0                 mov     r9, [rbx+10h]   ; jumptable 0000000000004BD4 case 7
.text:0000000000004EB4                 mov     r13, [rbx+30h]
.text:0000000000004EB8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000004EBF                 mov     r12, [rbx+28h]
.text:0000000000004EC3                 mov     r15, [rbx+20h]
.text:0000000000004EC7                 mov     edx, 5          ; category
.text:0000000000004ECC                 mov     r14, [rbx+18h]
.text:0000000000004ED0                 mov     r8, [rbx+8]
.text:0000000000004ED4                 xor     edi, edi        ; domainname
.text:0000000000004ED6                 mov     [rsp+58h+var_50], r9
.text:0000000000004EDB                 mov     rbx, [rbx]
.text:0000000000004EDE                 mov     [rsp+58h+var_58], r8
.text:0000000000004EE2                 call    _dcgettext
.text:0000000000004EE7                 push    r13
.text:0000000000004EE9                 push    r12
.text:0000000000004EEB                 push    r15
.text:0000000000004EED                 push    r14
.text:0000000000004EEF                 mov     r9, [rsp+78h+var_50]
.text:0000000000004EF4                 jmp     short loc_4E83
.text:0000000000004EF4 ; ---------------------------------------------------------------------------
.text:0000000000004EF6                 align 20h
.text:0000000000004F00
.text:0000000000004F00 def_4BD4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004F00                 mov     r10, [rbx+40h]  ; jumptable 0000000000004BD4 default case
.text:0000000000004F04                 mov     r9, [rbx+38h]
.text:0000000000004F08                 mov     edx, 5
.text:0000000000004F0D                 mov     rax, [rbx+10h]
.text:0000000000004F11                 mov     r8, [rbx+8]
.text:0000000000004F15                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004F1C                 mov     r13, [rbx+30h]
.text:0000000000004F20                 mov     r12, [rbx+28h]
.text:0000000000004F24                 mov     r15, [rbx+20h]
.text:0000000000004F28                 mov     r14, [rbx+18h]
.text:0000000000004F2C                 mov     [rsp+58h+var_40], r10
.text:0000000000004F31                 mov     [rsp+58h+var_48], r9
.text:0000000000004F36                 mov     [rsp+58h+var_58], rax
.text:0000000000004F3A                 mov     [rsp+58h+var_50], r8
.text:0000000000004F3F                 mov     rbx, [rbx]
.text:0000000000004F42                 jmp     loc_4CD2
.text:0000000000004F42 ; } // starts at 4B30
.text:0000000000004F42 version_etc_arn endp
.text:0000000000004F42
.text:0000000000004F42 ; ---------------------------------------------------------------------------
.text:0000000000004F47                 align 10h
.text:0000000000004F50
.text:0000000000004F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F50
.text:0000000000004F50 ; Attributes: info_from_lumina
.text:0000000000004F50
.text:0000000000004F50 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004F50                 public version_etc_ar
.text:0000000000004F50 version_etc_ar  proc near
.text:0000000000004F50 ; __unwind {
.text:0000000000004F50                 xor     r9d, r9d
.text:0000000000004F53                 cmp     qword ptr [r8], 0
.text:0000000000004F57                 jz      short loc_4F6B
.text:0000000000004F59                 nop     dword ptr [rax+00000000h]
.text:0000000000004F60
.text:0000000000004F60 loc_4F60:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004F60                 add     r9, 1
.text:0000000000004F64                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004F69                 jnz     short loc_4F60
.text:0000000000004F6B
.text:0000000000004F6B loc_4F6B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000004F6B                 jmp     version_etc_arn
.text:0000000000004F6B ; } // starts at 4F50
.text:0000000000004F6B version_etc_ar  endp
.text:0000000000004F6B
.text:0000000000004F70
.text:0000000000004F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F70
.text:0000000000004F70 ; Attributes: info_from_lumina
.text:0000000000004F70
.text:0000000000004F70 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004F70                 public version_etc_va
.text:0000000000004F70 version_etc_va  proc near
.text:0000000000004F70
.text:0000000000004F70 authtab         = qword ptr -68h
.text:0000000000004F70 var_10          = qword ptr -10h
.text:0000000000004F70
.text:0000000000004F70 ; __unwind {
.text:0000000000004F70                 sub     rsp, 68h
.text:0000000000004F74                 mov     r10, r8
.text:0000000000004F77                 xor     r9d, r9d
.text:0000000000004F7A                 mov     rax, fs:28h
.text:0000000000004F83                 mov     [rsp+68h+var_10], rax
.text:0000000000004F88                 xor     eax, eax
.text:0000000000004F8A                 mov     r8, rsp
.text:0000000000004F8D                 nop     dword ptr [rax]
.text:0000000000004F90
.text:0000000000004F90 loc_4F90:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004F90                 mov     eax, [r10]
.text:0000000000004F93                 cmp     eax, 2Fh ; '/'
.text:0000000000004F96                 ja      short loc_4FDA
.text:0000000000004F98                 mov     r11d, eax
.text:0000000000004F9B                 add     r11, [r10+10h]
.text:0000000000004F9F                 add     eax, 8
.text:0000000000004FA2                 mov     [r10], eax
.text:0000000000004FA5
.text:0000000000004FA5 loc_4FA5:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004FA5                 mov     rax, [r11]
.text:0000000000004FA8                 test    rax, rax
.text:0000000000004FAB                 mov     [r8+r9*8], rax
.text:0000000000004FAF                 jz      short loc_4FBB
.text:0000000000004FB1                 add     r9, 1
.text:0000000000004FB5                 cmp     r9, 0Ah
.text:0000000000004FB9                 jnz     short loc_4F90
.text:0000000000004FBB
.text:0000000000004FBB loc_4FBB:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000004FBB                 call    version_etc_arn
.text:0000000000004FC0                 mov     rax, [rsp+68h+var_10]
.text:0000000000004FC5                 xor     rax, fs:28h
.text:0000000000004FCE                 jnz     short loc_4FD5
.text:0000000000004FD0                 add     rsp, 68h
.text:0000000000004FD4                 retn
.text:0000000000004FD5 ; ---------------------------------------------------------------------------
.text:0000000000004FD5
.text:0000000000004FD5 loc_4FD5:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004FD5                 call    ___stack_chk_fail
.text:0000000000004FDA ; ---------------------------------------------------------------------------
.text:0000000000004FDA
.text:0000000000004FDA loc_4FDA:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000004FDA                 mov     r11, [r10+8]
.text:0000000000004FDE                 lea     rax, [r11+8]
.text:0000000000004FE2                 mov     [r10+8], rax
.text:0000000000004FE6                 jmp     short loc_4FA5
.text:0000000000004FE6 ; } // starts at 4F70
.text:0000000000004FE6 version_etc_va  endp
.text:0000000000004FE6
.text:0000000000004FE6 ; ---------------------------------------------------------------------------
.text:0000000000004FE8                 align 10h
.text:0000000000004FF0
.text:0000000000004FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FF0
.text:0000000000004FF0 ; Attributes: info_from_lumina
.text:0000000000004FF0
.text:0000000000004FF0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004FF0                 public version_etc
.text:0000000000004FF0 version_etc     proc near               ; CODE XREF: main+143↑p
.text:0000000000004FF0
.text:0000000000004FF0 var_C0          = dword ptr -0C0h
.text:0000000000004FF0 var_B8          = qword ptr -0B8h
.text:0000000000004FF0 var_B0          = qword ptr -0B0h
.text:0000000000004FF0 var_A8          = byte ptr -0A8h
.text:0000000000004FF0 var_50          = qword ptr -50h
.text:0000000000004FF0 var_48          = byte ptr -48h
.text:0000000000004FF0 var_28          = qword ptr -28h
.text:0000000000004FF0 var_20          = qword ptr -20h
.text:0000000000004FF0 arg_0           = byte ptr  8
.text:0000000000004FF0
.text:0000000000004FF0 ; __unwind {
.text:0000000000004FF0                 push    rbp
.text:0000000000004FF1                 push    rbx
.text:0000000000004FF2                 mov     r10d, 20h ; ' '
.text:0000000000004FF8                 xor     r11d, r11d
.text:0000000000004FFB                 sub     rsp, 0B8h
.text:0000000000005002                 mov     rax, fs:28h
.text:000000000000500B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005010                 xor     eax, eax
.text:0000000000005012                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000501A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005022                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000502A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000502F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005037                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000503F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005044                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000504C                 xor     r9d, r9d
.text:000000000000504F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005054                 mov     rbp, rax
.text:0000000000005057                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005060
.text:0000000000005060 loc_5060:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005060                 cmp     r10d, 2Fh ; '/'
.text:0000000000005064                 ja      short loc_50BC
.text:0000000000005066                 mov     eax, r10d
.text:0000000000005069                 mov     r11d, 1
.text:000000000000506F                 add     r10d, 8
.text:0000000000005073                 add     rax, rbp
.text:0000000000005076
.text:0000000000005076 loc_5076:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005076                 mov     rax, [rax]
.text:0000000000005079                 test    rax, rax
.text:000000000000507C                 mov     [r8+r9*8], rax
.text:0000000000005080                 jz      short loc_508C
.text:0000000000005082                 add     r9, 1
.text:0000000000005086                 cmp     r9, 0Ah
.text:000000000000508A                 jnz     short loc_5060
.text:000000000000508C
.text:000000000000508C loc_508C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000508C                 test    r11b, r11b
.text:000000000000508F                 jnz     short loc_50B5
.text:0000000000005091
.text:0000000000005091 loc_5091:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005091                 call    version_etc_arn
.text:0000000000005096                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000509B                 xor     rax, fs:28h
.text:00000000000050A4                 jnz     short loc_50B0
.text:00000000000050A6                 add     rsp, 0B8h
.text:00000000000050AD                 pop     rbx
.text:00000000000050AE                 pop     rbp
.text:00000000000050AF                 retn
.text:00000000000050B0 ; ---------------------------------------------------------------------------
.text:00000000000050B0
.text:00000000000050B0 loc_50B0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000050B0                 call    ___stack_chk_fail
.text:00000000000050B5 ; ---------------------------------------------------------------------------
.text:00000000000050B5
.text:00000000000050B5 loc_50B5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000050B5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000050BA                 jmp     short loc_5091
.text:00000000000050BC ; ---------------------------------------------------------------------------
.text:00000000000050BC
.text:00000000000050BC loc_50BC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000050BC                 mov     rax, rbx
.text:00000000000050BF                 add     rbx, 8
.text:00000000000050C3                 jmp     short loc_5076
.text:00000000000050C3 ; } // starts at 4FF0
.text:00000000000050C3 version_etc     endp
.text:00000000000050C3
.text:00000000000050C3 ; ---------------------------------------------------------------------------
.text:00000000000050C5                 align 10h
.text:00000000000050D0
.text:00000000000050D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050D0
.text:00000000000050D0 ; Attributes: info_from_lumina
.text:00000000000050D0
.text:00000000000050D0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000050D0                 public emit_bug_reporting_address
.text:00000000000050D0 emit_bug_reporting_address proc near
.text:00000000000050D0 ; __unwind {
.text:00000000000050D0                 push    rbx
.text:00000000000050D1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000050D8                 mov     edx, 5          ; category
.text:00000000000050DD                 xor     edi, edi        ; domainname
.text:00000000000050DF                 call    _dcgettext
.text:00000000000050E4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000050EB                 mov     rsi, rax
.text:00000000000050EE                 mov     edi, 1
.text:00000000000050F3                 xor     eax, eax
.text:00000000000050F5                 call    ___printf_chk
.text:00000000000050FA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005101                 mov     edx, 5          ; category
.text:0000000000005106                 xor     edi, edi        ; domainname
.text:0000000000005108                 call    _dcgettext
.text:000000000000510D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005114                 lea     rdx, unk_5D3F
.text:000000000000511B                 mov     rsi, rax
.text:000000000000511E                 mov     edi, 1
.text:0000000000005123                 xor     eax, eax
.text:0000000000005125                 call    ___printf_chk
.text:000000000000512A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005131                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005138                 xor     edi, edi        ; domainname
.text:000000000000513A                 mov     edx, 5          ; category
.text:000000000000513F                 call    _dcgettext
.text:0000000000005144                 mov     rsi, rbx        ; stream
.text:0000000000005147                 mov     rdi, rax        ; s
.text:000000000000514A                 pop     rbx
.text:000000000000514B                 jmp     _fputs_unlocked
.text:000000000000514B ; } // starts at 50D0
.text:000000000000514B emit_bug_reporting_address endp
.text:000000000000514B
.text:0000000000005150
.text:0000000000005150 ; =============== S U B R O U T I N E =======================================
.text:0000000000005150
.text:0000000000005150
.text:0000000000005150                 public xmalloc
.text:0000000000005150 xmalloc         proc near               ; CODE XREF: main+208↑p
.text:0000000000005150                                         ; main+215↑p ...
.text:0000000000005150 ; __unwind {
.text:0000000000005150                 push    rbx
.text:0000000000005151                 mov     rbx, rdi
.text:0000000000005154                 call    _malloc
.text:0000000000005159                 test    rax, rax
.text:000000000000515C                 jnz     short loc_5163
.text:000000000000515E                 test    rbx, rbx
.text:0000000000005161                 jnz     short loc_5165
.text:0000000000005163
.text:0000000000005163 loc_5163:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005163                 pop     rbx
.text:0000000000005164                 retn
.text:0000000000005165 ; ---------------------------------------------------------------------------
.text:0000000000005165
.text:0000000000005165 loc_5165:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005165                 call    xalloc_die
.text:0000000000005165 ; } // starts at 5150
.text:0000000000005165 xmalloc         endp
.text:0000000000005165
.text:0000000000005165 ; ---------------------------------------------------------------------------
.text:000000000000516A                 align 10h
.text:0000000000005170
.text:0000000000005170 ; =============== S U B R O U T I N E =======================================
.text:0000000000005170
.text:0000000000005170 ; Attributes: info_from_lumina
.text:0000000000005170
.text:0000000000005170 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005170                 public xnmalloc
.text:0000000000005170 xnmalloc        proc near
.text:0000000000005170 ; __unwind {
.text:0000000000005170                 mov     rax, rdi
.text:0000000000005173                 mul     rsi
.text:0000000000005176                 mov     rdi, rax
.text:0000000000005179                 seto    al
.text:000000000000517C                 test    rdi, rdi
.text:000000000000517F                 js      short loc_518B
.text:0000000000005181                 movzx   eax, al
.text:0000000000005184                 test    rax, rax
.text:0000000000005187                 jnz     short loc_518B
.text:0000000000005189                 jmp     short xmalloc
.text:000000000000518B ; ---------------------------------------------------------------------------
.text:000000000000518B
.text:000000000000518B loc_518B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000518B                                         ; xnmalloc+17↑j
.text:000000000000518B                 sub     rsp, 8
.text:000000000000518F                 call    xalloc_die
.text:000000000000518F ; } // starts at 5170
.text:000000000000518F xnmalloc        endp
.text:000000000000518F
.text:000000000000518F ; ---------------------------------------------------------------------------
.text:0000000000005194                 align 20h
.text:00000000000051A0
.text:00000000000051A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051A0
.text:00000000000051A0
.text:00000000000051A0                 public xcharalloc
.text:00000000000051A0 xcharalloc      proc near
.text:00000000000051A0 ; __unwind {
.text:00000000000051A0                 jmp     short xmalloc
.text:00000000000051A0 ; } // starts at 51A0
.text:00000000000051A0 xcharalloc      endp
.text:00000000000051A0
.text:00000000000051A0 ; ---------------------------------------------------------------------------
.text:00000000000051A2                 align 10h
.text:00000000000051B0
.text:00000000000051B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051B0
.text:00000000000051B0 ; Attributes: info_from_lumina
.text:00000000000051B0
.text:00000000000051B0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000051B0                 public xrealloc
.text:00000000000051B0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000051B0                                         ; quotearg_n_options+182↑p ...
.text:00000000000051B0 ; __unwind {
.text:00000000000051B0                 test    rsi, rsi
.text:00000000000051B3                 push    rbx
.text:00000000000051B4                 mov     rbx, rsi
.text:00000000000051B7                 jnz     short loc_51BE
.text:00000000000051B9                 test    rdi, rdi
.text:00000000000051BC                 jnz     short loc_51D8
.text:00000000000051BE
.text:00000000000051BE loc_51BE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000051BE                 mov     rsi, rbx        ; size
.text:00000000000051C1                 call    _realloc
.text:00000000000051C6                 test    rax, rax
.text:00000000000051C9                 jnz     short loc_51D0
.text:00000000000051CB                 test    rbx, rbx
.text:00000000000051CE                 jnz     short loc_51E1
.text:00000000000051D0
.text:00000000000051D0 loc_51D0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000051D0                 pop     rbx
.text:00000000000051D1                 retn
.text:00000000000051D1 ; ---------------------------------------------------------------------------
.text:00000000000051D2                 align 8
.text:00000000000051D8
.text:00000000000051D8 loc_51D8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000051D8                 call    _free
.text:00000000000051DD                 xor     eax, eax
.text:00000000000051DF                 pop     rbx
.text:00000000000051E0                 retn
.text:00000000000051E1 ; ---------------------------------------------------------------------------
.text:00000000000051E1
.text:00000000000051E1 loc_51E1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000051E1                 call    xalloc_die
.text:00000000000051E1 ; } // starts at 51B0
.text:00000000000051E1 xrealloc        endp
.text:00000000000051E1
.text:00000000000051E1 ; ---------------------------------------------------------------------------
.text:00000000000051E6                 align 10h
.text:00000000000051F0
.text:00000000000051F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051F0
.text:00000000000051F0 ; Attributes: info_from_lumina
.text:00000000000051F0
.text:00000000000051F0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000051F0                 public xnrealloc
.text:00000000000051F0 xnrealloc       proc near
.text:00000000000051F0 ; __unwind {
.text:00000000000051F0                 mov     rax, rsi
.text:00000000000051F3                 mul     rdx
.text:00000000000051F6                 mov     rsi, rax
.text:00000000000051F9                 seto    al
.text:00000000000051FC                 test    rsi, rsi
.text:00000000000051FF                 js      short loc_520B
.text:0000000000005201                 movzx   eax, al
.text:0000000000005204                 test    rax, rax
.text:0000000000005207                 jnz     short loc_520B
.text:0000000000005209                 jmp     short xrealloc
.text:000000000000520B ; ---------------------------------------------------------------------------
.text:000000000000520B
.text:000000000000520B loc_520B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000520B                                         ; xnrealloc+17↑j
.text:000000000000520B                 sub     rsp, 8
.text:000000000000520F                 call    xalloc_die
.text:000000000000520F ; } // starts at 51F0
.text:000000000000520F xnrealloc       endp
.text:000000000000520F
.text:000000000000520F ; ---------------------------------------------------------------------------
.text:0000000000005214                 align 20h
.text:0000000000005220
.text:0000000000005220 ; =============== S U B R O U T I N E =======================================
.text:0000000000005220
.text:0000000000005220 ; Attributes: info_from_lumina
.text:0000000000005220
.text:0000000000005220 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005220                 public x2nrealloc
.text:0000000000005220 x2nrealloc      proc near
.text:0000000000005220 ; __unwind {
.text:0000000000005220                 test    rdi, rdi
.text:0000000000005223                 mov     r9, rdx
.text:0000000000005226                 mov     rcx, [rsi]
.text:0000000000005229                 jz      short loc_5260
.text:000000000000522B                 xor     edx, edx
.text:000000000000522D                 mov     rax, 5555555555555554h
.text:0000000000005237                 div     r9
.text:000000000000523A                 cmp     rax, rcx
.text:000000000000523D                 jbe     short loc_527B
.text:000000000000523F                 mov     rax, rcx
.text:0000000000005242                 shr     rax, 1
.text:0000000000005245                 lea     rcx, [rax+rcx+1]
.text:000000000000524A
.text:000000000000524A loc_524A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000524A                 mov     [rsi], rcx
.text:000000000000524D                 imul    rcx, r9
.text:0000000000005251                 mov     rsi, rcx
.text:0000000000005254                 jmp     xrealloc
.text:0000000000005254 ; ---------------------------------------------------------------------------
.text:0000000000005259                 align 20h
.text:0000000000005260
.text:0000000000005260 loc_5260:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005260                 test    rcx, rcx
.text:0000000000005263                 jz      short loc_5288
.text:0000000000005265
.text:0000000000005265 loc_5265:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005265                 mov     rax, rcx
.text:0000000000005268                 mul     r9
.text:000000000000526B                 seto    dl
.text:000000000000526E                 test    rax, rax
.text:0000000000005271                 movzx   edx, dl
.text:0000000000005274                 js      short loc_527B
.text:0000000000005276                 test    rdx, rdx
.text:0000000000005279                 jz      short loc_524A
.text:000000000000527B
.text:000000000000527B loc_527B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000527B                                         ; x2nrealloc+54↑j
.text:000000000000527B                 sub     rsp, 8
.text:000000000000527F                 call    xalloc_die
.text:000000000000527F ; ---------------------------------------------------------------------------
.text:0000000000005284                 align 8
.text:0000000000005288
.text:0000000000005288 loc_5288:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005288                 xor     edx, edx
.text:000000000000528A                 mov     eax, 80h
.text:000000000000528F                 xor     r8d, r8d
.text:0000000000005292                 div     r9
.text:0000000000005295                 test    rax, rax
.text:0000000000005298                 setz    r8b
.text:000000000000529C                 lea     rcx, [r8+rax]
.text:00000000000052A0                 jmp     short loc_5265
.text:00000000000052A0 ; } // starts at 5220
.text:00000000000052A0 x2nrealloc      endp
.text:00000000000052A0
.text:00000000000052A0 ; ---------------------------------------------------------------------------
.text:00000000000052A2                 align 10h
.text:00000000000052B0
.text:00000000000052B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052B0
.text:00000000000052B0 ; Attributes: info_from_lumina
.text:00000000000052B0
.text:00000000000052B0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000052B0                 public x2realloc
.text:00000000000052B0 x2realloc       proc near
.text:00000000000052B0 ; __unwind {
.text:00000000000052B0                 test    rdi, rdi
.text:00000000000052B3                 mov     rax, [rsi]
.text:00000000000052B6                 jz      short loc_52E0
.text:00000000000052B8                 mov     rdx, 5555555555555553h
.text:00000000000052C2                 cmp     rax, rdx
.text:00000000000052C5                 ja      short loc_52F1
.text:00000000000052C7                 mov     rdx, rax
.text:00000000000052CA                 shr     rdx, 1
.text:00000000000052CD                 lea     rax, [rdx+rax+1]
.text:00000000000052D2
.text:00000000000052D2 loc_52D2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000052D2                 mov     [rsi], rax
.text:00000000000052D5                 mov     rsi, rax
.text:00000000000052D8                 jmp     xrealloc
.text:00000000000052D8 ; ---------------------------------------------------------------------------
.text:00000000000052DD                 align 20h
.text:00000000000052E0
.text:00000000000052E0 loc_52E0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000052E0                 test    rax, rax
.text:00000000000052E3                 mov     edx, 80h
.text:00000000000052E8                 cmovz   rax, rdx
.text:00000000000052EC                 test    rax, rax
.text:00000000000052EF                 jns     short loc_52D2
.text:00000000000052F1
.text:00000000000052F1 loc_52F1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000052F1                 sub     rsp, 8
.text:00000000000052F5                 call    xalloc_die
.text:00000000000052F5 ; } // starts at 52B0
.text:00000000000052F5 x2realloc       endp
.text:00000000000052F5
.text:00000000000052F5 ; ---------------------------------------------------------------------------
.text:00000000000052FA                 align 20h
.text:0000000000005300
.text:0000000000005300 ; =============== S U B R O U T I N E =======================================
.text:0000000000005300
.text:0000000000005300
.text:0000000000005300 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005300                 public xzalloc
.text:0000000000005300 xzalloc         proc near
.text:0000000000005300 ; __unwind {
.text:0000000000005300                 push    rbx
.text:0000000000005301                 mov     rbx, rdi
.text:0000000000005304                 call    xmalloc
.text:0000000000005309                 mov     rdx, rbx        ; n
.text:000000000000530C                 xor     esi, esi        ; c
.text:000000000000530E                 mov     rdi, rax        ; s
.text:0000000000005311                 pop     rbx
.text:0000000000005312                 jmp     _memset
.text:0000000000005312 ; } // starts at 5300
.text:0000000000005312 xzalloc         endp
.text:0000000000005312
.text:0000000000005312 ; ---------------------------------------------------------------------------
.text:0000000000005317                 align 20h
.text:0000000000005320
.text:0000000000005320 ; =============== S U B R O U T I N E =======================================
.text:0000000000005320
.text:0000000000005320 ; Attributes: info_from_lumina
.text:0000000000005320
.text:0000000000005320 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005320                 public xcalloc
.text:0000000000005320 xcalloc         proc near
.text:0000000000005320 ; __unwind {
.text:0000000000005320                 mov     rax, rdi
.text:0000000000005323                 sub     rsp, 8
.text:0000000000005327                 mul     rsi
.text:000000000000532A                 seto    dl
.text:000000000000532D                 test    rax, rax
.text:0000000000005330                 js      short loc_5349
.text:0000000000005332                 movzx   edx, dl
.text:0000000000005335                 test    rdx, rdx
.text:0000000000005338                 jnz     short loc_5349
.text:000000000000533A                 call    _calloc
.text:000000000000533F                 test    rax, rax
.text:0000000000005342                 jz      short loc_5349
.text:0000000000005344                 add     rsp, 8
.text:0000000000005348                 retn
.text:0000000000005349 ; ---------------------------------------------------------------------------
.text:0000000000005349
.text:0000000000005349 loc_5349:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005349                                         ; xcalloc+18↑j ...
.text:0000000000005349                 call    xalloc_die
.text:0000000000005349 ; } // starts at 5320
.text:0000000000005349 xcalloc         endp
.text:0000000000005349
.text:0000000000005349 ; ---------------------------------------------------------------------------
.text:000000000000534E                 align 10h
.text:0000000000005350
.text:0000000000005350 ; =============== S U B R O U T I N E =======================================
.text:0000000000005350
.text:0000000000005350 ; Attributes: info_from_lumina
.text:0000000000005350
.text:0000000000005350 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005350                 public xmemdup
.text:0000000000005350 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005350                                         ; xstrdup+11↓j
.text:0000000000005350 ; __unwind {
.text:0000000000005350                 push    rbp
.text:0000000000005351                 push    rbx
.text:0000000000005352                 mov     rbp, rdi
.text:0000000000005355                 mov     rdi, rsi
.text:0000000000005358                 mov     rbx, rsi
.text:000000000000535B                 sub     rsp, 8
.text:000000000000535F                 call    xmalloc
.text:0000000000005364                 add     rsp, 8
.text:0000000000005368                 mov     rdx, rbx        ; n
.text:000000000000536B                 mov     rsi, rbp        ; src
.text:000000000000536E                 pop     rbx
.text:000000000000536F                 pop     rbp
.text:0000000000005370                 mov     rdi, rax        ; dest
.text:0000000000005373                 jmp     _memcpy
.text:0000000000005373 ; } // starts at 5350
.text:0000000000005373 xmemdup         endp
.text:0000000000005373
.text:0000000000005373 ; ---------------------------------------------------------------------------
.text:0000000000005378                 align 20h
.text:0000000000005380
.text:0000000000005380 ; =============== S U B R O U T I N E =======================================
.text:0000000000005380
.text:0000000000005380
.text:0000000000005380 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005380                 public xstrdup
.text:0000000000005380 xstrdup         proc near
.text:0000000000005380 ; __unwind {
.text:0000000000005380                 push    rbx
.text:0000000000005381                 mov     rbx, rdi
.text:0000000000005384                 call    _strlen
.text:0000000000005389                 mov     rdi, rbx        ; src
.text:000000000000538C                 lea     rsi, [rax+1]    ; n
.text:0000000000005390                 pop     rbx
.text:0000000000005391                 jmp     short xmemdup
.text:0000000000005391 ; } // starts at 5380
.text:0000000000005391 xstrdup         endp
.text:0000000000005391
.text:0000000000005391 ; ---------------------------------------------------------------------------
.text:0000000000005393                 align 20h
.text:00000000000053A0
.text:00000000000053A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053A0
.text:00000000000053A0 ; Attributes: noreturn info_from_lumina
.text:00000000000053A0
.text:00000000000053A0 ; void __cdecl xalloc_die()
.text:00000000000053A0                 public xalloc_die
.text:00000000000053A0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_4376↑p
.text:00000000000053A0                                         ; xmalloc:loc_5165↑p ...
.text:00000000000053A0 ; __unwind {
.text:00000000000053A0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000053A7                 sub     rsp, 8
.text:00000000000053AB                 mov     edx, 5          ; category
.text:00000000000053B0                 xor     edi, edi        ; domainname
.text:00000000000053B2                 call    _dcgettext
.text:00000000000053B7                 mov     edi, cs:exit_failure ; status
.text:00000000000053BD                 lea     rdx, format     ; format
.text:00000000000053C4                 mov     rcx, rax
.text:00000000000053C7                 xor     esi, esi        ; errnum
.text:00000000000053C9                 xor     eax, eax
.text:00000000000053CB                 call    _error
.text:00000000000053D0                 call    _abort
.text:00000000000053D0 ; } // starts at 53A0
.text:00000000000053D0 xalloc_die      endp
.text:00000000000053D0
.text:00000000000053D0 ; ---------------------------------------------------------------------------
.text:00000000000053D5                 align 20h
.text:00000000000053E0
.text:00000000000053E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053E0
.text:00000000000053E0 ; Attributes: info_from_lumina
.text:00000000000053E0
.text:00000000000053E0 ; uintmax_t __fastcall xnumtoumax(const char *n_str, int base, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:00000000000053E0                 public xnumtoumax
.text:00000000000053E0 xnumtoumax      proc near               ; CODE XREF: xdectoumax+17↓p
.text:00000000000053E0
.text:00000000000053E0 var_48          = qword ptr -48h
.text:00000000000053E0 var_40          = qword ptr -40h
.text:00000000000053E0 arg_0           = dword ptr  8
.text:00000000000053E0
.text:00000000000053E0 ; __unwind {
.text:00000000000053E0                 push    r15
.text:00000000000053E2                 push    r14
.text:00000000000053E4                 mov     r15, rcx
.text:00000000000053E7                 push    r13
.text:00000000000053E9                 push    r12
.text:00000000000053EB                 mov     r14, rdx
.text:00000000000053EE                 push    rbp
.text:00000000000053EF                 push    rbx
.text:00000000000053F0                 mov     edx, esi
.text:00000000000053F2                 xor     esi, esi
.text:00000000000053F4                 mov     r12, rdi
.text:00000000000053F7                 mov     r13, r9
.text:00000000000053FA                 sub     rsp, 18h
.text:00000000000053FE                 mov     rcx, rsp
.text:0000000000005401                 mov     ebx, [rsp+48h+arg_0]
.text:0000000000005405                 mov     rax, fs:28h
.text:000000000000540E                 mov     [rsp+48h+var_40], rax
.text:0000000000005413                 xor     eax, eax
.text:0000000000005415                 call    xstrtoumax
.text:000000000000541A                 test    eax, eax
.text:000000000000541C                 jnz     loc_54B0
.text:0000000000005422                 mov     rbp, [rsp+48h+var_48]
.text:0000000000005426                 cmp     rbp, r14
.text:0000000000005429                 jb      short loc_5430
.text:000000000000542B                 cmp     rbp, r15
.text:000000000000542E                 jbe     short loc_5484
.text:0000000000005430
.text:0000000000005430 loc_5430:                               ; CODE XREF: xnumtoumax+49↑j
.text:0000000000005430                 call    ___errno_location
.text:0000000000005435                 cmp     rbp, 40000000h
.text:000000000000543C                 mov     r14, rax
.text:000000000000543F                 sbb     eax, eax
.text:0000000000005441                 and     eax, 0FFFFFFD7h
.text:0000000000005444                 add     eax, 4Bh ; 'K'
.text:0000000000005447                 mov     [r14], eax
.text:000000000000544A
.text:000000000000544A loc_544A:                               ; CODE XREF: xnumtoumax+E2↓j
.text:000000000000544A                                         ; xnumtoumax+EA↓j ...
.text:000000000000544A                 mov     rdi, r12
.text:000000000000544D                 call    quote
.text:0000000000005452                 mov     esi, [r14]
.text:0000000000005455                 mov     r8, rax
.text:0000000000005458                 mov     eax, 0
.text:000000000000545D                 lea     rdx, aS         ; "%s: "
.text:0000000000005464                 mov     rcx, r13
.text:0000000000005467                 cmp     esi, 16h
.text:000000000000546A                 cmovz   esi, eax        ; errnum
.text:000000000000546D                 test    ebx, ebx
.text:000000000000546F                 mov     eax, 1
.text:0000000000005474                 cmovz   ebx, eax
.text:0000000000005477                 xor     eax, eax
.text:0000000000005479                 mov     edi, ebx        ; status
.text:000000000000547B                 call    _error
.text:0000000000005480                 mov     rbp, [rsp+48h+var_48]
.text:0000000000005484
.text:0000000000005484 loc_5484:                               ; CODE XREF: xnumtoumax+4E↑j
.text:0000000000005484                 mov     rdx, [rsp+48h+var_40]
.text:0000000000005489                 xor     rdx, fs:28h
.text:0000000000005492                 mov     rax, rbp
.text:0000000000005495                 jnz     short loc_54DB
.text:0000000000005497                 add     rsp, 18h
.text:000000000000549B                 pop     rbx
.text:000000000000549C                 pop     rbp
.text:000000000000549D                 pop     r12
.text:000000000000549F                 pop     r13
.text:00000000000054A1                 pop     r14
.text:00000000000054A3                 pop     r15
.text:00000000000054A5                 retn
.text:00000000000054A5 ; ---------------------------------------------------------------------------
.text:00000000000054A6                 align 10h
.text:00000000000054B0
.text:00000000000054B0 loc_54B0:                               ; CODE XREF: xnumtoumax+3C↑j
.text:00000000000054B0                 mov     ebp, eax
.text:00000000000054B2                 call    ___errno_location
.text:00000000000054B7                 cmp     ebp, 1
.text:00000000000054BA                 mov     r14, rax
.text:00000000000054BD                 jz      short loc_54D0
.text:00000000000054BF                 cmp     ebp, 3
.text:00000000000054C2                 jnz     short loc_544A
.text:00000000000054C4                 mov     dword ptr [rax], 0
.text:00000000000054CA                 jmp     loc_544A
.text:00000000000054CA ; ---------------------------------------------------------------------------
.text:00000000000054CF                 align 10h
.text:00000000000054D0
.text:00000000000054D0 loc_54D0:                               ; CODE XREF: xnumtoumax+DD↑j
.text:00000000000054D0                 mov     dword ptr [rax], 4Bh ; 'K'
.text:00000000000054D6                 jmp     loc_544A
.text:00000000000054DB ; ---------------------------------------------------------------------------
.text:00000000000054DB
.text:00000000000054DB loc_54DB:                               ; CODE XREF: xnumtoumax+B5↑j
.text:00000000000054DB                 call    ___stack_chk_fail
.text:00000000000054DB ; } // starts at 53E0
.text:00000000000054DB xnumtoumax      endp
.text:00000000000054DB
.text:00000000000054E0
.text:00000000000054E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054E0
.text:00000000000054E0 ; Attributes: info_from_lumina
.text:00000000000054E0
.text:00000000000054E0 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:00000000000054E0                 public xdectoumax
.text:00000000000054E0 xdectoumax      proc near               ; CODE XREF: main+DE↑p
.text:00000000000054E0 ; __unwind {
.text:00000000000054E0                 sub     rsp, 10h
.text:00000000000054E4                 push    r9
.text:00000000000054E6                 mov     r9, r8
.text:00000000000054E9                 mov     r8, rcx
.text:00000000000054EC                 mov     rcx, rdx
.text:00000000000054EF                 mov     rdx, rsi
.text:00000000000054F2                 mov     esi, 0Ah
.text:00000000000054F7                 call    xnumtoumax
.text:00000000000054FC                 add     rsp, 18h
.text:0000000000005500                 retn
.text:0000000000005500 ; } // starts at 54E0
.text:0000000000005500 xdectoumax      endp
.text:0000000000005500
.text:0000000000005500 ; ---------------------------------------------------------------------------
.text:0000000000005501                 align 10h
.text:0000000000005510
.text:0000000000005510 ; =============== S U B R O U T I N E =======================================
.text:0000000000005510
.text:0000000000005510
.text:0000000000005510 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000005510                 public xstrtoumax
.text:0000000000005510 xstrtoumax      proc near               ; CODE XREF: xnumtoumax+35↑p
.text:0000000000005510
.text:0000000000005510 base            = dword ptr -50h
.text:0000000000005510 endptr          = qword ptr -48h
.text:0000000000005510 var_40          = qword ptr -40h
.text:0000000000005510
.text:0000000000005510 ; __unwind {
.text:0000000000005510                 push    r15
.text:0000000000005512                 push    r14
.text:0000000000005514                 push    r13
.text:0000000000005516                 push    r12
.text:0000000000005518                 push    rbp
.text:0000000000005519                 push    rbx
.text:000000000000551A                 sub     rsp, 28h
.text:000000000000551E                 mov     rax, fs:28h
.text:0000000000005527                 mov     [rsp+58h+var_40], rax
.text:000000000000552C                 xor     eax, eax
.text:000000000000552E                 cmp     edx, 24h ; '$'
.text:0000000000005531                 ja      loc_5895
.text:0000000000005537                 lea     rax, [rsp+58h+endptr]
.text:000000000000553C                 mov     r15, rsi
.text:000000000000553F                 test    rsi, rsi
.text:0000000000005542                 mov     rbp, rdi
.text:0000000000005545                 mov     [rsp+58h+base], edx
.text:0000000000005549                 mov     r14, rcx
.text:000000000000554C                 mov     r13, r8
.text:000000000000554F                 cmovz   r15, rax
.text:0000000000005553                 call    ___errno_location
.text:0000000000005558                 mov     dword ptr [rax], 0
.text:000000000000555E                 mov     r12, rax
.text:0000000000005561                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000005565                 call    ___ctype_b_loc
.text:000000000000556A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000556E                 mov     rsi, [rax]
.text:0000000000005571                 mov     rax, rbp
.text:0000000000005574                 jmp     short loc_5587
.text:0000000000005574 ; ---------------------------------------------------------------------------
.text:0000000000005576                 align 20h
.text:0000000000005580
.text:0000000000005580 loc_5580:                               ; CODE XREF: xstrtoumax+7F↓j
.text:0000000000005580                 add     rax, 1
.text:0000000000005584                 movzx   ebx, byte ptr [rax]
.text:0000000000005587
.text:0000000000005587 loc_5587:                               ; CODE XREF: xstrtoumax+64↑j
.text:0000000000005587                 movzx   ecx, bl
.text:000000000000558A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000558F                 jnz     short loc_5580
.text:0000000000005591                 cmp     bl, 2Dh ; '-'
.text:0000000000005594                 jz      short loc_55E8
.text:0000000000005596                 xor     ecx, ecx        ; group
.text:0000000000005598                 mov     rsi, r15        ; endptr
.text:000000000000559B                 mov     rdi, rbp        ; nptr
.text:000000000000559E                 call    ___strtoul_internal
.text:00000000000055A3                 mov     rcx, [r15]
.text:00000000000055A6                 mov     rbx, rax
.text:00000000000055A9                 cmp     rcx, rbp
.text:00000000000055AC                 jz      short loc_55D8
.text:00000000000055AE                 mov     eax, [r12]
.text:00000000000055B2                 test    eax, eax
.text:00000000000055B4                 jz      short loc_5618
.text:00000000000055B6                 cmp     eax, 22h ; '"'
.text:00000000000055B9                 mov     ebp, 1
.text:00000000000055BE                 jnz     short loc_55E8
.text:00000000000055C0
.text:00000000000055C0 loc_55C0:                               ; CODE XREF: xstrtoumax+10A↓j
.text:00000000000055C0                 test    r13, r13
.text:00000000000055C3                 jz      short loc_55CE
.text:00000000000055C5                 movzx   r12d, byte ptr [rcx]
.text:00000000000055C9                 test    r12b, r12b
.text:00000000000055CC                 jnz     short loc_5647
.text:00000000000055CE
.text:00000000000055CE loc_55CE:                               ; CODE XREF: xstrtoumax+B3↑j
.text:00000000000055CE                 mov     [r14], rbx
.text:00000000000055D1                 jmp     short loc_55ED
.text:00000000000055D1 ; ---------------------------------------------------------------------------
.text:00000000000055D3                 align 8
.text:00000000000055D8
.text:00000000000055D8 loc_55D8:                               ; CODE XREF: xstrtoumax+9C↑j
.text:00000000000055D8                 test    r13, r13
.text:00000000000055DB                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000055E0                 jnz     short loc_5620
.text:00000000000055E2                 nop     word ptr [rax+rax+00h]
.text:00000000000055E8
.text:00000000000055E8 loc_55E8:                               ; CODE XREF: xstrtoumax+84↑j
.text:00000000000055E8                                         ; xstrtoumax+AE↑j ...
.text:00000000000055E8                 mov     ebp, 4
.text:00000000000055ED
.text:00000000000055ED loc_55ED:                               ; CODE XREF: xstrtoumax+C1↑j
.text:00000000000055ED                                         ; xstrtoumax+217↓j ...
.text:00000000000055ED                 mov     rdi, [rsp+58h+var_40]
.text:00000000000055F2                 xor     rdi, fs:28h
.text:00000000000055FB                 mov     eax, ebp
.text:00000000000055FD                 jnz     loc_5890
.text:0000000000005603                 add     rsp, 28h
.text:0000000000005607                 pop     rbx
.text:0000000000005608                 pop     rbp
.text:0000000000005609                 pop     r12
.text:000000000000560B                 pop     r13
.text:000000000000560D                 pop     r14
.text:000000000000560F                 pop     r15
.text:0000000000005611                 retn
.text:0000000000005611 ; ---------------------------------------------------------------------------
.text:0000000000005612                 align 8
.text:0000000000005618
.text:0000000000005618 loc_5618:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000005618                 xor     ebp, ebp
.text:000000000000561A                 jmp     short loc_55C0
.text:000000000000561A ; ---------------------------------------------------------------------------
.text:000000000000561C                 align 20h
.text:0000000000005620
.text:0000000000005620 loc_5620:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000005620                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000005625                 test    r12b, r12b
.text:0000000000005628                 jz      short loc_55E8
.text:000000000000562A                 movsx   esi, r12b       ; c
.text:000000000000562E                 mov     rdi, r13        ; s
.text:0000000000005631                 xor     ebp, ebp
.text:0000000000005633                 call    _strchr
.text:0000000000005638                 test    rax, rax
.text:000000000000563B                 mov     ebx, 1
.text:0000000000005640                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005645                 jz      short loc_55E8
.text:0000000000005647
.text:0000000000005647 loc_5647:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000005647                 movsx   esi, r12b       ; c
.text:000000000000564B                 mov     rdi, r13        ; s
.text:000000000000564E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000005653                 call    _strchr
.text:0000000000005658                 test    rax, rax
.text:000000000000565B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005660                 jz      def_56E6        ; jumptable 00000000000056E6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000005666                 lea     eax, [r12-45h]
.text:000000000000566B                 cmp     al, 2Fh ; '/'
.text:000000000000566D                 ja      short loc_56C0
.text:000000000000566F                 mov     rdx, 814400308945h
.text:0000000000005679                 bt      rdx, rax
.text:000000000000567D                 jnb     short loc_56C0
.text:000000000000567F                 mov     esi, 30h ; '0'  ; c
.text:0000000000005684                 mov     rdi, r13        ; s
.text:0000000000005687                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000568C                 call    _strchr
.text:0000000000005691                 test    rax, rax
.text:0000000000005694                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005699                 jz      short loc_56C0
.text:000000000000569B                 movzx   eax, byte ptr [rcx+1]
.text:000000000000569F                 cmp     al, 44h ; 'D'
.text:00000000000056A1                 jz      short loc_56AF
.text:00000000000056A3                 cmp     al, 69h ; 'i'
.text:00000000000056A5                 jz      loc_5878
.text:00000000000056AB                 cmp     al, 42h ; 'B'
.text:00000000000056AD                 jnz     short loc_56C0
.text:00000000000056AF
.text:00000000000056AF loc_56AF:                               ; CODE XREF: xstrtoumax+191↑j
.text:00000000000056AF                 mov     edi, 2
.text:00000000000056B4                 mov     esi, 3E8h
.text:00000000000056B9                 jmp     short loc_56CA
.text:00000000000056B9 ; ---------------------------------------------------------------------------
.text:00000000000056BB                 align 20h
.text:00000000000056C0
.text:00000000000056C0 loc_56C0:                               ; CODE XREF: xstrtoumax+15D↑j
.text:00000000000056C0                                         ; xstrtoumax+16D↑j ...
.text:00000000000056C0                 mov     edi, 1
.text:00000000000056C5                 mov     esi, 400h
.text:00000000000056CA
.text:00000000000056CA loc_56CA:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:00000000000056CA                                         ; xstrtoumax+37B↓j
.text:00000000000056CA                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:00000000000056CE                 cmp     r12b, 35h
.text:00000000000056D2                 ja      short def_56E6  ; jumptable 00000000000056E6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000056D4                 lea     rdx, jpt_56E6
.text:00000000000056DB                 movzx   r12d, r12b
.text:00000000000056DF                 movsxd  rax, ds:(jpt_56E6 - 6C48h)[rdx+r12*4]
.text:00000000000056E3                 add     rax, rdx
.text:00000000000056E6                 jmp     rax             ; switch jump
.text:00000000000056E8 ; ---------------------------------------------------------------------------
.text:00000000000056E8
.text:00000000000056E8 loc_56E8:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000056E8                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:00000000000056E8                 mov     rax, rbx        ; jumptable 00000000000056E6 cases 77,109
.text:00000000000056EB                 mul     rsi
.text:00000000000056EE                 jo      loc_58E1
.text:00000000000056F4                 xor     r8d, r8d
.text:00000000000056F7
.text:00000000000056F7 loc_56F7:                               ; CODE XREF: xstrtoumax+34E↓j
.text:00000000000056F7                                         ; xstrtoumax+35E↓j ...
.text:00000000000056F7                 mul     rsi
.text:00000000000056FA                 jo      loc_58D2
.text:0000000000005700                 mov     rbx, rax
.text:0000000000005703
.text:0000000000005703 loc_5703:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000005703                 or      ebp, r8d
.text:0000000000005706                 db      2Eh
.text:0000000000005706                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005710
.text:0000000000005710 loc_5710:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005710                                         ; xstrtoumax+23B↓j ...
.text:0000000000005710                 movsxd  rdi, edi        ; jumptable 00000000000056E6 case 99
.text:0000000000005713                 mov     eax, ebp
.text:0000000000005715                 add     rcx, rdi
.text:0000000000005718                 or      eax, 2
.text:000000000000571B                 mov     [r15], rcx
.text:000000000000571E                 cmp     byte ptr [rcx], 0
.text:0000000000005721                 mov     [r14], rbx
.text:0000000000005724                 cmovnz  ebp, eax
.text:0000000000005727                 jmp     loc_55ED
.text:000000000000572C ; ---------------------------------------------------------------------------
.text:000000000000572C
.text:000000000000572C def_56E6:                               ; CODE XREF: xstrtoumax+150↑j
.text:000000000000572C                                         ; xstrtoumax+1C2↑j ...
.text:000000000000572C                 mov     [r14], rbx      ; jumptable 00000000000056E6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000572F                 or      ebp, 2
.text:0000000000005732                 jmp     loc_55ED
.text:0000000000005737 ; ---------------------------------------------------------------------------
.text:0000000000005737
.text:0000000000005737 loc_5737:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005737                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:0000000000005737                 mov     edx, 2          ; jumptable 00000000000056E6 case 119
.text:000000000000573C                 mov     rax, rdx
.text:000000000000573F                 mul     rbx
.text:0000000000005742                 jo      loc_57DE
.text:0000000000005748                 add     rbx, rbx
.text:000000000000574B                 jmp     short loc_5710  ; jumptable 00000000000056E6 case 99
.text:000000000000574D ; ---------------------------------------------------------------------------
.text:000000000000574D
.text:000000000000574D loc_574D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000574D                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:000000000000574D                 mov     edx, 200h       ; jumptable 00000000000056E6 case 98
.text:0000000000005752                 mov     rax, rdx
.text:0000000000005755                 mul     rbx
.text:0000000000005758                 jo      loc_57DE
.text:000000000000575E                 shl     rbx, 9
.text:0000000000005762                 jmp     short loc_5710  ; jumptable 00000000000056E6 case 99
.text:0000000000005764 ; ---------------------------------------------------------------------------
.text:0000000000005764
.text:0000000000005764 loc_5764:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005764                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:0000000000005764                 mov     r8d, 7          ; jumptable 00000000000056E6 case 90
.text:000000000000576A                 xor     r9d, r9d
.text:000000000000576D                 nop     dword ptr [rax]
.text:0000000000005770
.text:0000000000005770 loc_5770:                               ; CODE XREF: xstrtoumax+273↓j
.text:0000000000005770                 mov     rax, rbx
.text:0000000000005773                 mul     rsi
.text:0000000000005776                 mov     rbx, rax
.text:0000000000005779                 jo      loc_590E
.text:000000000000577F
.text:000000000000577F loc_577F:                               ; CODE XREF: xstrtoumax+408↓j
.text:000000000000577F                 sub     r8d, 1
.text:0000000000005783                 jnz     short loc_5770
.text:0000000000005785
.text:0000000000005785 loc_5785:                               ; CODE XREF: xstrtoumax+29D↓j
.text:0000000000005785                                         ; xstrtoumax+2BD↓j ...
.text:0000000000005785                 or      ebp, r9d
.text:0000000000005788                 jmp     short loc_5710  ; jumptable 00000000000056E6 case 99
.text:000000000000578A ; ---------------------------------------------------------------------------
.text:000000000000578A
.text:000000000000578A loc_578A:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000578A                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:000000000000578A                 mov     r8d, 8          ; jumptable 00000000000056E6 case 89
.text:0000000000005790                 xor     r9d, r9d
.text:0000000000005793                 nop     dword ptr [rax+rax+00h]
.text:0000000000005798
.text:0000000000005798 loc_5798:                               ; CODE XREF: xstrtoumax+29B↓j
.text:0000000000005798                 mov     rax, rbx
.text:000000000000579B                 mul     rsi
.text:000000000000579E                 mov     rbx, rax
.text:00000000000057A1                 jo      loc_58F0
.text:00000000000057A7
.text:00000000000057A7 loc_57A7:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:00000000000057A7                 sub     r8d, 1
.text:00000000000057AB                 jnz     short loc_5798
.text:00000000000057AD                 jmp     short loc_5785
.text:00000000000057AF ; ---------------------------------------------------------------------------
.text:00000000000057AF
.text:00000000000057AF loc_57AF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000057AF                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:00000000000057AF                 mov     r8d, 4          ; jumptable 00000000000056E6 cases 84,116
.text:00000000000057B5                 xor     r9d, r9d
.text:00000000000057B8
.text:00000000000057B8 loc_57B8:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:00000000000057B8                 mov     rax, rbx
.text:00000000000057BB                 mul     rsi
.text:00000000000057BE                 mov     rbx, rax
.text:00000000000057C1                 jo      loc_58C3
.text:00000000000057C7
.text:00000000000057C7 loc_57C7:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:00000000000057C7                 sub     r8d, 1
.text:00000000000057CB                 jnz     short loc_57B8
.text:00000000000057CD                 jmp     short loc_5785
.text:00000000000057CF ; ---------------------------------------------------------------------------
.text:00000000000057CF
.text:00000000000057CF loc_57CF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000057CF                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:00000000000057CF                 mov     rax, rbx        ; jumptable 00000000000056E6 cases 75,107
.text:00000000000057D2                 mul     rsi
.text:00000000000057D5                 mov     rbx, rax
.text:00000000000057D8                 jno     loc_5710        ; jumptable 00000000000056E6 case 99
.text:00000000000057DE
.text:00000000000057DE loc_57DE:                               ; CODE XREF: xstrtoumax+232↑j
.text:00000000000057DE                                         ; xstrtoumax+248↑j ...
.text:00000000000057DE                 mov     ebp, 1
.text:00000000000057E3                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000057E7                 jmp     loc_5710        ; jumptable 00000000000056E6 case 99
.text:00000000000057E7 ; ---------------------------------------------------------------------------
.text:00000000000057EC                 align 10h
.text:00000000000057F0
.text:00000000000057F0 loc_57F0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000057F0                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:00000000000057F0                 mov     r8d, 5          ; jumptable 00000000000056E6 case 80
.text:00000000000057F6                 xor     r9d, r9d
.text:00000000000057F9
.text:00000000000057F9 loc_57F9:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:00000000000057F9                 mov     rax, rbx
.text:00000000000057FC                 mul     rsi
.text:00000000000057FF                 mov     rbx, rax
.text:0000000000005802                 jo      loc_58FF
.text:0000000000005808
.text:0000000000005808 loc_5808:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000005808                 sub     r8d, 1
.text:000000000000580C                 jnz     short loc_57F9
.text:000000000000580E                 jmp     loc_5785
.text:0000000000005813 ; ---------------------------------------------------------------------------
.text:0000000000005813
.text:0000000000005813 loc_5813:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005813                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:0000000000005813                 mov     r8d, 6          ; jumptable 00000000000056E6 case 69
.text:0000000000005819                 xor     r9d, r9d
.text:000000000000581C
.text:000000000000581C loc_581C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:000000000000581C                 mov     rax, rbx
.text:000000000000581F                 mul     rsi
.text:0000000000005822                 mov     rbx, rax
.text:0000000000005825                 jo      loc_58B4
.text:000000000000582B
.text:000000000000582B loc_582B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:000000000000582B                 sub     r8d, 1
.text:000000000000582F                 jnz     short loc_581C
.text:0000000000005831                 jmp     loc_5785
.text:0000000000005836 ; ---------------------------------------------------------------------------
.text:0000000000005836
.text:0000000000005836 loc_5836:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005836                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:0000000000005836                 mov     edx, 400h       ; jumptable 00000000000056E6 case 66
.text:000000000000583B                 mov     rax, rdx
.text:000000000000583E                 mul     rbx
.text:0000000000005841                 jo      short loc_57DE
.text:0000000000005843                 shl     rbx, 0Ah
.text:0000000000005847                 jmp     loc_5710        ; jumptable 00000000000056E6 case 99
.text:000000000000584C ; ---------------------------------------------------------------------------
.text:000000000000584C
.text:000000000000584C loc_584C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000584C                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:000000000000584C                 mov     rax, rbx        ; jumptable 00000000000056E6 cases 71,103
.text:000000000000584F                 mul     rsi
.text:0000000000005852                 jo      loc_591D
.text:0000000000005858                 xor     r8d, r8d
.text:000000000000585B
.text:000000000000585B loc_585B:                               ; CODE XREF: xstrtoumax+417↓j
.text:000000000000585B                 mul     rsi
.text:000000000000585E                 jno     loc_56F7
.text:0000000000005864                 mov     r8d, 1
.text:000000000000586A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000586E                 jmp     loc_56F7
.text:000000000000586E ; ---------------------------------------------------------------------------
.text:0000000000005873                 align 8
.text:0000000000005878
.text:0000000000005878 loc_5878:                               ; CODE XREF: xstrtoumax+195↑j
.text:0000000000005878                 xor     edi, edi
.text:000000000000587A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000587E                 mov     esi, 400h
.text:0000000000005883                 setz    dil
.text:0000000000005887                 lea     edi, [rdi+rdi+1]
.text:000000000000588B                 jmp     loc_56CA
.text:0000000000005890 ; ---------------------------------------------------------------------------
.text:0000000000005890
.text:0000000000005890 loc_5890:                               ; CODE XREF: xstrtoumax+ED↑j
.text:0000000000005890                 call    ___stack_chk_fail
.text:0000000000005895 ; ---------------------------------------------------------------------------
.text:0000000000005895
.text:0000000000005895 loc_5895:                               ; CODE XREF: xstrtoumax+21↑j
.text:0000000000005895                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:000000000000589C                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:00000000000058A3                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:00000000000058AA                 mov     edx, 54h ; 'T'  ; line
.text:00000000000058AF                 call    ___assert_fail
.text:00000000000058B4 ; ---------------------------------------------------------------------------
.text:00000000000058B4
.text:00000000000058B4 loc_58B4:                               ; CODE XREF: xstrtoumax+315↑j
.text:00000000000058B4                 mov     r9d, 1
.text:00000000000058BA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000058BE                 jmp     loc_582B
.text:00000000000058C3 ; ---------------------------------------------------------------------------
.text:00000000000058C3
.text:00000000000058C3 loc_58C3:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:00000000000058C3                 mov     r9d, 1
.text:00000000000058C9                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000058CD                 jmp     loc_57C7
.text:00000000000058D2 ; ---------------------------------------------------------------------------
.text:00000000000058D2
.text:00000000000058D2 loc_58D2:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:00000000000058D2                 mov     r8d, 1
.text:00000000000058D8                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000058DC                 jmp     loc_5703
.text:00000000000058E1 ; ---------------------------------------------------------------------------
.text:00000000000058E1
.text:00000000000058E1 loc_58E1:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:00000000000058E1                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000058E5                 mov     r8d, 1
.text:00000000000058EB                 jmp     loc_56F7
.text:00000000000058F0 ; ---------------------------------------------------------------------------
.text:00000000000058F0
.text:00000000000058F0 loc_58F0:                               ; CODE XREF: xstrtoumax+291↑j
.text:00000000000058F0                 mov     r9d, 1
.text:00000000000058F6                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000058FA                 jmp     loc_57A7
.text:00000000000058FF ; ---------------------------------------------------------------------------
.text:00000000000058FF
.text:00000000000058FF loc_58FF:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:00000000000058FF                 mov     r9d, 1
.text:0000000000005905                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005909                 jmp     loc_5808
.text:000000000000590E ; ---------------------------------------------------------------------------
.text:000000000000590E
.text:000000000000590E loc_590E:                               ; CODE XREF: xstrtoumax+269↑j
.text:000000000000590E                 mov     r9d, 1
.text:0000000000005914                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005918                 jmp     loc_577F
.text:000000000000591D ; ---------------------------------------------------------------------------
.text:000000000000591D
.text:000000000000591D loc_591D:                               ; CODE XREF: xstrtoumax+342↑j
.text:000000000000591D                 mov     r8d, 1
.text:0000000000005923                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005927                 jmp     loc_585B
.text:0000000000005927 ; } // starts at 5510
.text:0000000000005927 xstrtoumax      endp
.text:0000000000005927
.text:0000000000005927 ; ---------------------------------------------------------------------------
.text:000000000000592C                 align 10h
.text:0000000000005930
.text:0000000000005930 ; =============== S U B R O U T I N E =======================================
.text:0000000000005930
.text:0000000000005930 ; Attributes: info_from_lumina
.text:0000000000005930
.text:0000000000005930 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005930                 public rpl_fclose
.text:0000000000005930 rpl_fclose      proc near               ; CODE XREF: main+3C5↑p
.text:0000000000005930                                         ; close_stream+15↓p
.text:0000000000005930 ; __unwind {
.text:0000000000005930                 push    r12
.text:0000000000005932                 push    rbp
.text:0000000000005933                 push    rbx
.text:0000000000005934                 mov     rbx, rdi
.text:0000000000005937                 call    _fileno
.text:000000000000593C                 test    eax, eax
.text:000000000000593E                 mov     rdi, rbx        ; fp
.text:0000000000005941                 js      short loc_5997
.text:0000000000005943                 call    ___freading
.text:0000000000005948                 test    eax, eax
.text:000000000000594A                 jnz     short loc_5978
.text:000000000000594C
.text:000000000000594C loc_594C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000594C                 mov     rdi, rbx        ; stream
.text:000000000000594F                 call    rpl_fflush
.text:0000000000005954                 test    eax, eax
.text:0000000000005956                 jz      short loc_5994
.text:0000000000005958                 call    ___errno_location
.text:000000000000595D                 mov     r12d, [rax]
.text:0000000000005960                 mov     rdi, rbx        ; stream
.text:0000000000005963                 mov     rbp, rax
.text:0000000000005966                 call    _fclose
.text:000000000000596B                 test    r12d, r12d
.text:000000000000596E                 jnz     short loc_59A0
.text:0000000000005970
.text:0000000000005970 loc_5970:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005970                 pop     rbx
.text:0000000000005971                 pop     rbp
.text:0000000000005972                 pop     r12
.text:0000000000005974                 retn
.text:0000000000005974 ; ---------------------------------------------------------------------------
.text:0000000000005975                 align 8
.text:0000000000005978
.text:0000000000005978 loc_5978:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005978                 mov     rdi, rbx        ; stream
.text:000000000000597B                 call    _fileno
.text:0000000000005980                 xor     esi, esi        ; offset
.text:0000000000005982                 mov     edx, 1          ; whence
.text:0000000000005987                 mov     edi, eax        ; fd
.text:0000000000005989                 call    _lseek
.text:000000000000598E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005992                 jnz     short loc_594C
.text:0000000000005994
.text:0000000000005994 loc_5994:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005994                 mov     rdi, rbx        ; stream
.text:0000000000005997
.text:0000000000005997 loc_5997:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005997                 pop     rbx
.text:0000000000005998                 pop     rbp
.text:0000000000005999                 pop     r12
.text:000000000000599B                 jmp     _fclose
.text:00000000000059A0 ; ---------------------------------------------------------------------------
.text:00000000000059A0
.text:00000000000059A0 loc_59A0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000059A0                 mov     [rbp+0], r12d
.text:00000000000059A4                 mov     eax, 0FFFFFFFFh
.text:00000000000059A9                 jmp     short loc_5970
.text:00000000000059A9 ; } // starts at 5930
.text:00000000000059A9 rpl_fclose      endp
.text:00000000000059A9
.text:00000000000059A9 ; ---------------------------------------------------------------------------
.text:00000000000059AB                 align 10h
.text:00000000000059B0
.text:00000000000059B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059B0
.text:00000000000059B0 ; Attributes: info_from_lumina
.text:00000000000059B0
.text:00000000000059B0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000059B0                 public rpl_fflush
.text:00000000000059B0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000059B0 ; __unwind {
.text:00000000000059B0                 test    rdi, rdi
.text:00000000000059B3                 push    rbx
.text:00000000000059B4                 mov     rbx, rdi
.text:00000000000059B7                 jz      short loc_59CA
.text:00000000000059B9                 call    ___freading
.text:00000000000059BE                 test    eax, eax
.text:00000000000059C0                 jz      short loc_59CA
.text:00000000000059C2                 test    dword ptr [rbx], 100h
.text:00000000000059C8                 jnz     short loc_59D8
.text:00000000000059CA
.text:00000000000059CA loc_59CA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000059CA                                         ; rpl_fflush+10↑j
.text:00000000000059CA                 mov     rdi, rbx        ; stream
.text:00000000000059CD                 pop     rbx
.text:00000000000059CE                 jmp     _fflush
.text:00000000000059CE ; ---------------------------------------------------------------------------
.text:00000000000059D3                 align 8
.text:00000000000059D8
.text:00000000000059D8 loc_59D8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000059D8                 mov     rdi, rbx
.text:00000000000059DB                 mov     edx, 1
.text:00000000000059E0                 xor     esi, esi
.text:00000000000059E2                 call    rpl_fseeko
.text:00000000000059E7                 mov     rdi, rbx        ; stream
.text:00000000000059EA                 pop     rbx
.text:00000000000059EB                 jmp     _fflush
.text:00000000000059EB ; } // starts at 59B0
.text:00000000000059EB rpl_fflush      endp
.text:00000000000059EB
.text:00000000000059F0
.text:00000000000059F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059F0
.text:00000000000059F0 ; Attributes: info_from_lumina
.text:00000000000059F0
.text:00000000000059F0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000059F0                 public rpl_fseeko
.text:00000000000059F0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:00000000000059F0 ; __unwind {
.text:00000000000059F0                 mov     rax, [rdi+8]
.text:00000000000059F4                 cmp     [rdi+10h], rax
.text:00000000000059F8                 jz      short loc_5A00
.text:00000000000059FA
.text:00000000000059FA loc_59FA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000059FA                                         ; rpl_fseeko+1F↓j
.text:00000000000059FA                 jmp     _fseeko
.text:00000000000059FA ; ---------------------------------------------------------------------------
.text:00000000000059FF                 align 20h
.text:0000000000005A00
.text:0000000000005A00 loc_5A00:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005A00                 mov     rax, [rdi+20h]
.text:0000000000005A04                 cmp     [rdi+28h], rax
.text:0000000000005A08                 jnz     short loc_59FA
.text:0000000000005A0A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000005A0F                 jnz     short loc_59FA
.text:0000000000005A11                 push    r12
.text:0000000000005A13                 push    rbp
.text:0000000000005A14                 mov     r12d, edx
.text:0000000000005A17                 push    rbx
.text:0000000000005A18                 mov     rbp, rsi
.text:0000000000005A1B                 mov     rbx, rdi
.text:0000000000005A1E                 call    _fileno
.text:0000000000005A23                 mov     edx, r12d       ; whence
.text:0000000000005A26                 mov     rsi, rbp        ; offset
.text:0000000000005A29                 mov     edi, eax        ; fd
.text:0000000000005A2B                 call    _lseek
.text:0000000000005A30                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005A34                 jz      short loc_5A42
.text:0000000000005A36                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005A39                 mov     [rbx+90h], rax
.text:0000000000005A40                 xor     eax, eax
.text:0000000000005A42
.text:0000000000005A42 loc_5A42:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005A42                 pop     rbx
.text:0000000000005A43                 pop     rbp
.text:0000000000005A44                 pop     r12
.text:0000000000005A46                 retn
.text:0000000000005A46 ; } // starts at 59F0
.text:0000000000005A46 rpl_fseeko      endp
.text:0000000000005A46
.text:0000000000005A46 ; ---------------------------------------------------------------------------
.text:0000000000005A47                 align 10h
.text:0000000000005A50
.text:0000000000005A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A50
.text:0000000000005A50 ; Attributes: info_from_lumina
.text:0000000000005A50
.text:0000000000005A50 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005A50                 public rpl_mbrtowc
.text:0000000000005A50 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005A50
.text:0000000000005A50 pwc             = dword ptr -34h
.text:0000000000005A50 var_30          = qword ptr -30h
.text:0000000000005A50
.text:0000000000005A50 ; __unwind {
.text:0000000000005A50                 push    r13
.text:0000000000005A52                 push    r12
.text:0000000000005A54                 mov     r13, rsi
.text:0000000000005A57                 push    rbp
.text:0000000000005A58                 push    rbx
.text:0000000000005A59                 mov     rbx, rdi
.text:0000000000005A5C                 mov     r12, rdx
.text:0000000000005A5F                 sub     rsp, 18h
.text:0000000000005A63                 mov     rax, fs:28h
.text:0000000000005A6C                 mov     [rsp+38h+var_30], rax
.text:0000000000005A71                 xor     eax, eax
.text:0000000000005A73                 lea     rax, [rsp+38h+pwc]
.text:0000000000005A78                 test    rdi, rdi
.text:0000000000005A7B                 cmovz   rbx, rax
.text:0000000000005A7F                 mov     rdi, rbx        ; pwc
.text:0000000000005A82                 call    _mbrtowc
.text:0000000000005A87                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000005A8B                 mov     rbp, rax
.text:0000000000005A8E                 jbe     short loc_5AB0
.text:0000000000005A90                 test    r12, r12
.text:0000000000005A93                 jz      short loc_5AB0
.text:0000000000005A95                 xor     edi, edi
.text:0000000000005A97                 call    hard_locale
.text:0000000000005A9C                 test    al, al
.text:0000000000005A9E                 jnz     short loc_5AB0
.text:0000000000005AA0                 movzx   eax, byte ptr [r13+0]
.text:0000000000005AA5                 mov     ebp, 1
.text:0000000000005AAA                 mov     [rbx], eax
.text:0000000000005AAC                 nop     dword ptr [rax+00h]
.text:0000000000005AB0
.text:0000000000005AB0 loc_5AB0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005AB0                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005AB0                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005AB5                 xor     rdx, fs:28h
.text:0000000000005ABE                 mov     rax, rbp
.text:0000000000005AC1                 jnz     short loc_5ACE
.text:0000000000005AC3                 add     rsp, 18h
.text:0000000000005AC7                 pop     rbx
.text:0000000000005AC8                 pop     rbp
.text:0000000000005AC9                 pop     r12
.text:0000000000005ACB                 pop     r13
.text:0000000000005ACD                 retn
.text:0000000000005ACE ; ---------------------------------------------------------------------------
.text:0000000000005ACE
.text:0000000000005ACE loc_5ACE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000005ACE                 call    ___stack_chk_fail
.text:0000000000005ACE ; } // starts at 5A50
.text:0000000000005ACE rpl_mbrtowc     endp
.text:0000000000005ACE
.text:0000000000005ACE ; ---------------------------------------------------------------------------
.text:0000000000005AD3                 align 20h
.text:0000000000005AE0
.text:0000000000005AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AE0
.text:0000000000005AE0 ; Attributes: info_from_lumina
.text:0000000000005AE0
.text:0000000000005AE0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005AE0                 public close_stream
.text:0000000000005AE0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005AE0                                         ; close_stdout+33↑p
.text:0000000000005AE0 ; __unwind {
.text:0000000000005AE0                 push    r12
.text:0000000000005AE2                 push    rbp
.text:0000000000005AE3                 mov     rbp, rdi
.text:0000000000005AE6                 push    rbx
.text:0000000000005AE7                 call    ___fpending
.text:0000000000005AEC                 mov     ebx, [rbp+0]
.text:0000000000005AEF                 mov     rdi, rbp        ; stream
.text:0000000000005AF2                 mov     r12, rax
.text:0000000000005AF5                 call    rpl_fclose
.text:0000000000005AFA                 and     ebx, 20h
.text:0000000000005AFD                 test    ebx, ebx
.text:0000000000005AFF                 jnz     short loc_5B18
.text:0000000000005B01                 test    eax, eax
.text:0000000000005B03                 jz      short loc_5B0F
.text:0000000000005B05                 test    r12, r12
.text:0000000000005B08                 mov     eax, 0FFFFFFFFh
.text:0000000000005B0D                 jz      short loc_5B48
.text:0000000000005B0F
.text:0000000000005B0F loc_5B0F:                               ; CODE XREF: close_stream+23↑j
.text:0000000000005B0F                 pop     rbx
.text:0000000000005B10                 pop     rbp
.text:0000000000005B11                 pop     r12
.text:0000000000005B13                 retn
.text:0000000000005B13 ; ---------------------------------------------------------------------------
.text:0000000000005B14                 align 8
.text:0000000000005B18
.text:0000000000005B18 loc_5B18:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005B18                 test    eax, eax
.text:0000000000005B1A                 jnz     short loc_5B38
.text:0000000000005B1C                 call    ___errno_location
.text:0000000000005B21                 mov     dword ptr [rax], 0
.text:0000000000005B27                 mov     eax, 0FFFFFFFFh
.text:0000000000005B2C                 pop     rbx
.text:0000000000005B2D                 pop     rbp
.text:0000000000005B2E                 pop     r12
.text:0000000000005B30                 retn
.text:0000000000005B30 ; ---------------------------------------------------------------------------
.text:0000000000005B31                 align 8
.text:0000000000005B38
.text:0000000000005B38 loc_5B38:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005B38                 pop     rbx
.text:0000000000005B39                 mov     eax, 0FFFFFFFFh
.text:0000000000005B3E                 pop     rbp
.text:0000000000005B3F                 pop     r12
.text:0000000000005B41                 retn
.text:0000000000005B41 ; ---------------------------------------------------------------------------
.text:0000000000005B42                 align 8
.text:0000000000005B48
.text:0000000000005B48 loc_5B48:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005B48                 call    ___errno_location
.text:0000000000005B4D                 cmp     dword ptr [rax], 9
.text:0000000000005B50                 pop     rbx
.text:0000000000005B51                 pop     rbp
.text:0000000000005B52                 pop     r12
.text:0000000000005B54                 setnz   al
.text:0000000000005B57                 movzx   eax, al
.text:0000000000005B5A                 neg     eax
.text:0000000000005B5C                 retn
.text:0000000000005B5C ; } // starts at 5AE0
.text:0000000000005B5C close_stream    endp
.text:0000000000005B5C
.text:0000000000005B5C ; ---------------------------------------------------------------------------
.text:0000000000005B5D                 align 20h
.text:0000000000005B60
.text:0000000000005B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B60
.text:0000000000005B60
.text:0000000000005B60                 public hard_locale
.text:0000000000005B60 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005B60 ; __unwind {
.text:0000000000005B60                 sub     rsp, 8
.text:0000000000005B64                 xor     esi, esi        ; locale
.text:0000000000005B66                 call    _setlocale
.text:0000000000005B6B                 mov     rdx, rax
.text:0000000000005B6E                 mov     eax, 1
.text:0000000000005B73                 test    rdx, rdx
.text:0000000000005B76                 jz      short loc_5B95
.text:0000000000005B78                 lea     rdi, aC         ; "C"
.text:0000000000005B7F                 mov     ecx, 2
.text:0000000000005B84                 mov     rsi, rdx
.text:0000000000005B87                 repe cmpsb
.text:0000000000005B89                 setnbe  cl
.text:0000000000005B8C                 sbb     cl, 0
.text:0000000000005B8F                 xor     eax, eax
.text:0000000000005B91                 test    cl, cl
.text:0000000000005B93                 jnz     short loc_5BA0
.text:0000000000005B95
.text:0000000000005B95 loc_5B95:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005B95                 add     rsp, 8
.text:0000000000005B99                 retn
.text:0000000000005B99 ; ---------------------------------------------------------------------------
.text:0000000000005B9A                 align 20h
.text:0000000000005BA0
.text:0000000000005BA0 loc_5BA0:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005BA0                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005BA7                 mov     ecx, 6
.text:0000000000005BAC                 mov     rsi, rdx
.text:0000000000005BAF                 repe cmpsb
.text:0000000000005BB1                 setnbe  al
.text:0000000000005BB4                 sbb     al, 0
.text:0000000000005BB6                 test    al, al
.text:0000000000005BB8                 setnz   al
.text:0000000000005BBB                 add     rsp, 8
.text:0000000000005BBF                 retn
.text:0000000000005BBF ; } // starts at 5B60
.text:0000000000005BBF hard_locale     endp
.text:0000000000005BBF
.text:0000000000005BC0
.text:0000000000005BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BC0
.text:0000000000005BC0
.text:0000000000005BC0                 public locale_charset
.text:0000000000005BC0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005BC0 ; __unwind {
.text:0000000000005BC0                 sub     rsp, 8
.text:0000000000005BC4                 mov     edi, 0Eh        ; item
.text:0000000000005BC9                 call    _nl_langinfo
.text:0000000000005BCE                 test    rax, rax
.text:0000000000005BD1                 jz      short loc_5BF0
.text:0000000000005BD3                 cmp     byte ptr [rax], 0
.text:0000000000005BD6                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000005BDD                 cmovz   rax, rdx
.text:0000000000005BE1                 add     rsp, 8
.text:0000000000005BE5                 retn
.text:0000000000005BE5 ; ---------------------------------------------------------------------------
.text:0000000000005BE6                 align 10h
.text:0000000000005BF0
.text:0000000000005BF0 loc_5BF0:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005BF0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005BF7                 add     rsp, 8
.text:0000000000005BFB                 retn
.text:0000000000005BFB ; } // starts at 5BC0
.text:0000000000005BFB locale_charset  endp
.text:0000000000005BFB
.text:0000000000005BFB ; ---------------------------------------------------------------------------
.text:0000000000005BFC                 align 20h
.text:0000000000005C00
.text:0000000000005C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C00
.text:0000000000005C00 ; Attributes: info_from_lumina
.text:0000000000005C00
.text:0000000000005C00 ; void _libc_csu_init(void)
.text:0000000000005C00                 public __libc_csu_init
.text:0000000000005C00 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000005C00 ; __unwind {
.text:0000000000005C00                 push    r15
.text:0000000000005C02                 push    r14
.text:0000000000005C04                 mov     r15, rdx
.text:0000000000005C07                 push    r13
.text:0000000000005C09                 push    r12
.text:0000000000005C0B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000005C12                 push    rbp
.text:0000000000005C13                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000005C1A                 push    rbx
.text:0000000000005C1B                 mov     r13d, edi
.text:0000000000005C1E                 mov     r14, rsi
.text:0000000000005C21                 sub     rbp, r12
.text:0000000000005C24                 sub     rsp, 8
.text:0000000000005C28                 sar     rbp, 3
.text:0000000000005C2C                 call    _init_proc
.text:0000000000005C31                 test    rbp, rbp
.text:0000000000005C34                 jz      short loc_5C56
.text:0000000000005C36                 xor     ebx, ebx
.text:0000000000005C38                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005C40
.text:0000000000005C40 loc_5C40:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000005C40                 mov     rdx, r15
.text:0000000000005C43                 mov     rsi, r14
.text:0000000000005C46                 mov     edi, r13d
.text:0000000000005C49                 call    ds:(__frame_dummy_init_array_entry - 208B10h)[r12+rbx*8]
.text:0000000000005C4D                 add     rbx, 1
.text:0000000000005C51                 cmp     rbp, rbx
.text:0000000000005C54                 jnz     short loc_5C40
.text:0000000000005C56
.text:0000000000005C56 loc_5C56:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000005C56                 add     rsp, 8
.text:0000000000005C5A                 pop     rbx
.text:0000000000005C5B                 pop     rbp
.text:0000000000005C5C                 pop     r12
.text:0000000000005C5E                 pop     r13
.text:0000000000005C60                 pop     r14
.text:0000000000005C62                 pop     r15
.text:0000000000005C64                 retn
.text:0000000000005C64 ; } // starts at 5C00
.text:0000000000005C64 __libc_csu_init endp
.text:0000000000005C64
.text:0000000000005C64 ; ---------------------------------------------------------------------------
.text:0000000000005C65                 align 10h
.text:0000000000005C70
.text:0000000000005C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C70
.text:0000000000005C70
.text:0000000000005C70 ; void _libc_csu_fini(void)
.text:0000000000005C70                 public __libc_csu_fini
.text:0000000000005C70 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000005C70 ; __unwind {
.text:0000000000005C70                 rep retn
.text:0000000000005C70 ; } // starts at 5C70
.text:0000000000005C70 __libc_csu_fini endp
.text:0000000000005C70
.text:0000000000005C70 ; ---------------------------------------------------------------------------
.text:0000000000005C72                 align 20h
.text:0000000000005C80
.text:0000000000005C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C80
.text:0000000000005C80
.text:0000000000005C80 atexit          proc near               ; CODE XREF: main+6A↑p
.text:0000000000005C80 ; __unwind {
.text:0000000000005C80                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000005C87                 xor     esi, esi        ; obj
.text:0000000000005C89                 jmp     ___cxa_atexit
.text:0000000000005C89 ; } // starts at 5C80
.text:0000000000005C89 atexit          endp
.text:0000000000005C89
.text:0000000000005C89 _text           ends
.text:0000000000005C89
LOAD:0000000000005C8E ; ===========================================================================
LOAD:0000000000005C8E
LOAD:0000000000005C8E ; Segment type: Pure code
LOAD:0000000000005C8E ; Segment permissions: Read/Execute
LOAD:0000000000005C8E LOAD            segment byte public 'CODE' use64
LOAD:0000000000005C8E                 assume cs:LOAD
LOAD:0000000000005C8E                 ;org 5C8Eh
LOAD:0000000000005C8E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005C8E                 align 10h
LOAD:0000000000005C8E LOAD            ends
LOAD:0000000000005C8E
.fini:0000000000005C90 ; ===========================================================================
.fini:0000000000005C90
.fini:0000000000005C90 ; Segment type: Pure code
.fini:0000000000005C90 ; Segment permissions: Read/Execute
.fini:0000000000005C90 _fini           segment dword public 'CODE' use64
.fini:0000000000005C90                 assume cs:_fini
.fini:0000000000005C90                 ;org 5C90h
.fini:0000000000005C90                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000005C90
.fini:0000000000005C90 ; =============== S U B R O U T I N E =======================================
.fini:0000000000005C90
.fini:0000000000005C90
.fini:0000000000005C90                 public _term_proc
.fini:0000000000005C90 _term_proc      proc near
.fini:0000000000005C90                 sub     rsp, 8          ; _fini
.fini:0000000000005C94                 add     rsp, 8
.fini:0000000000005C98                 retn
.fini:0000000000005C98 _term_proc      endp
.fini:0000000000005C98
.fini:0000000000005C98 _fini           ends
.fini:0000000000005C98
LOAD:0000000000005C99 ; ===========================================================================
LOAD:0000000000005C99
LOAD:0000000000005C99 ; Segment type: Pure code
LOAD:0000000000005C99 ; Segment permissions: Read/Execute
LOAD:0000000000005C99 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005C99                 assume cs:LOAD
LOAD:0000000000005C99                 ;org 5C99h
LOAD:0000000000005C99                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005C99                 align 20h
LOAD:0000000000005C99 LOAD            ends
LOAD:0000000000005C99
.rodata:0000000000005CA0 ; ===========================================================================
.rodata:0000000000005CA0
.rodata:0000000000005CA0 ; Segment type: Pure data
.rodata:0000000000005CA0 ; Segment permissions: Read
.rodata:0000000000005CA0 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005CA0                 assume cs:_rodata
.rodata:0000000000005CA0                 ;org 5CA0h
.rodata:0000000000005CA0                 public _IO_stdin_used
.rodata:0000000000005CA0 _IO_stdin_used  db    1
.rodata:0000000000005CA1                 db    0
.rodata:0000000000005CA2                 db    2
.rodata:0000000000005CA3                 db    0
.rodata:0000000000005CA4 aBase32         db 'base32',0           ; DATA XREF: main+137↑o
.rodata:0000000000005CA4                                         ; usage+158↑o ...
.rodata:0000000000005CAB ; const char aUsageSOptionFi[]
.rodata:0000000000005CAB aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]',0Ah,0
.rodata:0000000000005CAB                                         ; DATA XREF: usage:loc_216D↑o
.rodata:0000000000005CC9 asc_5CC9        db '[',0                ; DATA XREF: usage+190↑o
.rodata:0000000000005CCB aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1B7↑o
.rodata:0000000000005CDB aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000005CDB                                         ; DATA XREF: usage+1E7↑o
.rodata:0000000000005CDB                                         ; usage+2DC↑o ...
.rodata:0000000000005CF1 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1F8↑o
.rodata:0000000000005CFB aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+204↑o
.rodata:0000000000005D0A aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+197↑o
.rodata:0000000000005D14 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1C3↑o
.rodata:0000000000005D1E aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1DB↑o
.rodata:0000000000005D28 ; const char aSOnlineHelpS[]
.rodata:0000000000005D28 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+24A↑o
.rodata:0000000000005D28                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000005D3F unk_5D3F        db  47h ; G             ; DATA XREF: main+130↑o
.rodata:0000000000005D3F                                         ; usage+266↑o ...
.rodata:0000000000005D40                 db  4Eh ; N
.rodata:0000000000005D41                 db  55h ; U
.rodata:0000000000005D42                 db  20h
.rodata:0000000000005D43 ; const char domainname[]
.rodata:0000000000005D43 domainname      db 'coreutils',0        ; DATA XREF: main+4B↑o
.rodata:0000000000005D43                                         ; main+57↑o ...
.rodata:0000000000005D4D ; const char s2[]
.rodata:0000000000005D4D s2              db 'en_',0              ; DATA XREF: usage+28D↑o
.rodata:0000000000005D4D                                         ; usage+34E↑o
.rodata:0000000000005D51 ; const char aFullDocumentat[]
.rodata:0000000000005D51 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000005D51                                         ; DATA XREF: usage:loc_23B9↑o
.rodata:0000000000005D51                                         ; usage:loc_2476↑o
.rodata:0000000000005D6C ; const char dirname[]
.rodata:0000000000005D6C dirname         db '/usr/local/share/locale',0
.rodata:0000000000005D6C                                         ; DATA XREF: main+44↑o
.rodata:0000000000005D84 ; const char msgid[]
.rodata:0000000000005D84 msgid           db 'invalid wrap size',0
.rodata:0000000000005D84                                         ; DATA XREF: main+AE↑o
.rodata:0000000000005D96 aSimonJosefsson db 'Simon Josefsson',0  ; DATA XREF: main+129↑o
.rodata:0000000000005DA6 ; const char shortopts[]
.rodata:0000000000005DA6 shortopts       db 'diw:',0             ; DATA XREF: main+7B↑o
.rodata:0000000000005DAB ; const char aExtraOperandS[]
.rodata:0000000000005DAB aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+786↑o
.rodata:0000000000005DBC ; const char modes[]
.rodata:0000000000005DBC modes           db 'rb',0               ; DATA XREF: main+18A↑o
.rodata:0000000000005DBF ; const char aReadError[]
.rodata:0000000000005DBF aReadError      db 'read error',0       ; DATA XREF: main+4A3↑o
.rodata:0000000000005DBF                                         ; main:loc_1F11↑o
.rodata:0000000000005DCA ; const char aWriteError[]
.rodata:0000000000005DCA aWriteError     db 'write error',0      ; DATA XREF: main+5E7↑o
.rodata:0000000000005DCA                                         ; main+629↑o ...
.rodata:0000000000005DD6 ; const char aInvalidInput[]
.rodata:0000000000005DD6 aInvalidInput   db 'invalid input',0    ; DATA XREF: main:loc_1EC1↑o
.rodata:0000000000005DE4 ; const char aClosingStandar[]
.rodata:0000000000005DE4 aClosingStandar db 'closing standard input',0
.rodata:0000000000005DE4                                         ; DATA XREF: main+674↑o
.rodata:0000000000005DFB aDecode         db 'decode',0           ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000005E02 aWrap           db 'wrap',0             ; DATA XREF: .data.rel.ro:0000000000208B40↓o
.rodata:0000000000005E07 aIgnoreGarbage  db 'ignore-garbage',0   ; DATA XREF: .data.rel.ro:0000000000208B60↓o
.rodata:0000000000005E16 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000208B80↓o
.rodata:0000000000005E1B aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000208BA0↓o
.rodata:0000000000005E23                 align 8
.rodata:0000000000005E28 ; const char aTrySHelpForMor[]
.rodata:0000000000005E28 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000005E28                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000005E4F                 align 10h
.rodata:0000000000005E50 ; const char aBaseDEncodeOrD[]
.rodata:0000000000005E50 aBaseDEncodeOrD db 'Base%d encode or decode FILE, or standard input, to standard outp'
.rodata:0000000000005E50                                         ; DATA XREF: usage+7D↑o
.rodata:0000000000005E50                 db 'ut.',0Ah,0
.rodata:0000000000005E96                 align 8
.rodata:0000000000005E98 ; const char aWithNoFileOrWh[]
.rodata:0000000000005E98 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+AB↑o
.rodata:0000000000005E98                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:0000000000005ED0 ; const char aMandatoryArgum[]
.rodata:0000000000005ED0 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+D0↑o
.rodata:0000000000005ED0                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000005ED0                 db 'ns too.',0Ah,0
.rodata:0000000000005F1B                 align 20h
.rodata:0000000000005F20 ; const char aDDecodeDecodeD[]
.rodata:0000000000005F20 aDDecodeDecodeD db '  -d, --decode          decode data',0Ah
.rodata:0000000000005F20                                         ; DATA XREF: usage+F5↑o
.rodata:0000000000005F20                 db '  -i, --ignore-garbage  when decoding, ignore non-alphabet charac'
.rodata:0000000000005F20                 db 'ters',0Ah
.rodata:0000000000005F20                 db '  -w, --wrap=COLS       wrap encoded lines after COLS character ('
.rodata:0000000000005F20                 db 'default 76).',0Ah
.rodata:0000000000005F20                 db '                          Use 0 to disable line wrapping',0Ah
.rodata:0000000000005F20                 db 0Ah,0
.rodata:0000000000006013                 align 8
.rodata:0000000000006018 ; const char aHelpDisplayThi[]
.rodata:0000000000006018 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000006018                                         ; DATA XREF: usage+11A↑o
.rodata:0000000000006045                 align 8
.rodata:0000000000006048 ; const char aVersionOutputV[]
.rodata:0000000000006048 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000006048                                         ; DATA XREF: usage+13F↑o
.rodata:000000000000607E                 align 20h
.rodata:0000000000006080 ; const char aTheDataAreEnco[]
.rodata:0000000000006080 aTheDataAreEnco db 0Ah                  ; DATA XREF: usage+164↑o
.rodata:0000000000006080                 db 'The data are encoded as described for the %s alphabet in RFC 4648'
.rodata:0000000000006080                 db '.',0Ah
.rodata:0000000000006080                 db 'When decoding, the input may contain newlines in addition to the '
.rodata:0000000000006080                 db 'bytes of',0Ah
.rodata:0000000000006080                 db 'the formal %s alphabet.  Use --ignore-garbage to attempt to recov'
.rodata:0000000000006080                 db 'er',0Ah
.rodata:0000000000006080                 db 'from any other non-alphabet bytes in the encoded stream.',0Ah,0
.rodata:000000000000618C                 align 10h
.rodata:0000000000006190 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000006190                                         ; DATA XREF: usage+25F↑o
.rodata:0000000000006190                                         ; usage+2C3↑o ...
.rodata:00000000000061B8 ; const char aReportAnyTrans[]
.rodata:00000000000061B8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000061B8                                         ; DATA XREF: usage+3B7↑o
.rodata:00000000000061B8                 db 'am/>',0Ah,0
.rodata:00000000000061FF                 align 20h
.rodata:0000000000006200 ; const char aOrAvailableLoc[]
.rodata:0000000000006200 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000006200                                         ; DATA XREF: usage:loc_23FE↑o
.rodata:0000000000006233 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000006238                 align 20h
.rodata:0000000000006240 b32str_3066     db  41h ; A             ; DATA XREF: base32_encode↑o
.rodata:0000000000006241                 db  42h ; B
.rodata:0000000000006242                 db  43h ; C
.rodata:0000000000006243                 db  44h ; D
.rodata:0000000000006244                 db  45h ; E
.rodata:0000000000006245                 db  46h ; F
.rodata:0000000000006246                 db  47h ; G
.rodata:0000000000006247                 db  48h ; H
.rodata:0000000000006248                 db  49h ; I
.rodata:0000000000006249                 db  4Ah ; J
.rodata:000000000000624A                 db  4Bh ; K
.rodata:000000000000624B                 db  4Ch ; L
.rodata:000000000000624C                 db  4Dh ; M
.rodata:000000000000624D                 db  4Eh ; N
.rodata:000000000000624E                 db  4Fh ; O
.rodata:000000000000624F                 db  50h ; P
.rodata:0000000000006250                 db  51h ; Q
.rodata:0000000000006251                 db  52h ; R
.rodata:0000000000006252                 db  53h ; S
.rodata:0000000000006253                 db  54h ; T
.rodata:0000000000006254                 db  55h ; U
.rodata:0000000000006255                 db  56h ; V
.rodata:0000000000006256                 db  57h ; W
.rodata:0000000000006257                 db  58h ; X
.rodata:0000000000006258                 db  59h ; Y
.rodata:0000000000006259                 db  5Ah ; Z
.rodata:000000000000625A                 db  32h ; 2
.rodata:000000000000625B                 db  33h ; 3
.rodata:000000000000625C                 db  34h ; 4
.rodata:000000000000625D                 db  35h ; 5
.rodata:000000000000625E                 db  36h ; 6
.rodata:000000000000625F                 db  37h ; 7
.rodata:0000000000006260 b32             db 0FFh                 ; DATA XREF: decode_8+10↑o
.rodata:0000000000006260                                         ; isbase32↑o
.rodata:0000000000006261                 db 0FFh
.rodata:0000000000006262                 db 0FFh
.rodata:0000000000006263                 db 0FFh
.rodata:0000000000006264                 db 0FFh
.rodata:0000000000006265                 db 0FFh
.rodata:0000000000006266                 db 0FFh
.rodata:0000000000006267                 db 0FFh
.rodata:0000000000006268                 db 0FFh
.rodata:0000000000006269                 db 0FFh
.rodata:000000000000626A                 db 0FFh
.rodata:000000000000626B                 db 0FFh
.rodata:000000000000626C                 db 0FFh
.rodata:000000000000626D                 db 0FFh
.rodata:000000000000626E                 db 0FFh
.rodata:000000000000626F                 db 0FFh
.rodata:0000000000006270                 db 0FFh
.rodata:0000000000006271                 db 0FFh
.rodata:0000000000006272                 db 0FFh
.rodata:0000000000006273                 db 0FFh
.rodata:0000000000006274                 db 0FFh
.rodata:0000000000006275                 db 0FFh
.rodata:0000000000006276                 db 0FFh
.rodata:0000000000006277                 db 0FFh
.rodata:0000000000006278                 db 0FFh
.rodata:0000000000006279                 db 0FFh
.rodata:000000000000627A                 db 0FFh
.rodata:000000000000627B                 db 0FFh
.rodata:000000000000627C                 db 0FFh
.rodata:000000000000627D                 db 0FFh
.rodata:000000000000627E                 db 0FFh
.rodata:000000000000627F                 db 0FFh
.rodata:0000000000006280                 db 0FFh
.rodata:0000000000006281                 db 0FFh
.rodata:0000000000006282                 db 0FFh
.rodata:0000000000006283                 db 0FFh
.rodata:0000000000006284                 db 0FFh
.rodata:0000000000006285                 db 0FFh
.rodata:0000000000006286                 db 0FFh
.rodata:0000000000006287                 db 0FFh
.rodata:0000000000006288                 db 0FFh
.rodata:0000000000006289                 db 0FFh
.rodata:000000000000628A                 db 0FFh
.rodata:000000000000628B                 db 0FFh
.rodata:000000000000628C                 db 0FFh
.rodata:000000000000628D                 db 0FFh
.rodata:000000000000628E                 db 0FFh
.rodata:000000000000628F                 db 0FFh
.rodata:0000000000006290                 db 0FFh
.rodata:0000000000006291                 db 0FFh
.rodata:0000000000006292                 db  1Ah
.rodata:0000000000006293                 db  1Bh
.rodata:0000000000006294                 db  1Ch
.rodata:0000000000006295                 db  1Dh
.rodata:0000000000006296                 db  1Eh
.rodata:0000000000006297                 db  1Fh
.rodata:0000000000006298                 db 0FFh
.rodata:0000000000006299                 db 0FFh
.rodata:000000000000629A                 db 0FFh
.rodata:000000000000629B                 db 0FFh
.rodata:000000000000629C                 db 0FFh
.rodata:000000000000629D                 db 0FFh
.rodata:000000000000629E                 db 0FFh
.rodata:000000000000629F                 db 0FFh
.rodata:00000000000062A0                 db 0FFh
.rodata:00000000000062A1                 db    0
.rodata:00000000000062A2                 db    1
.rodata:00000000000062A3                 db    2
.rodata:00000000000062A4                 db    3
.rodata:00000000000062A5                 db    4
.rodata:00000000000062A6                 db    5
.rodata:00000000000062A7                 db    6
.rodata:00000000000062A8                 db    7
.rodata:00000000000062A9                 db    8
.rodata:00000000000062AA                 db    9
.rodata:00000000000062AB                 db  0Ah
.rodata:00000000000062AC                 db  0Bh
.rodata:00000000000062AD                 db  0Ch
.rodata:00000000000062AE                 db  0Dh
.rodata:00000000000062AF                 db  0Eh
.rodata:00000000000062B0                 db  0Fh
.rodata:00000000000062B1                 db  10h
.rodata:00000000000062B2                 db  11h
.rodata:00000000000062B3                 db  12h
.rodata:00000000000062B4                 db  13h
.rodata:00000000000062B5                 db  14h
.rodata:00000000000062B6                 db  15h
.rodata:00000000000062B7                 db  16h
.rodata:00000000000062B8                 db  17h
.rodata:00000000000062B9                 db  18h
.rodata:00000000000062BA                 db  19h
.rodata:00000000000062BB                 db 0FFh
.rodata:00000000000062BC                 db 0FFh
.rodata:00000000000062BD                 db 0FFh
.rodata:00000000000062BE                 db 0FFh
.rodata:00000000000062BF                 db 0FFh
.rodata:00000000000062C0                 db 0FFh
.rodata:00000000000062C1                 db 0FFh
.rodata:00000000000062C2                 db 0FFh
.rodata:00000000000062C3                 db 0FFh
.rodata:00000000000062C4                 db 0FFh
.rodata:00000000000062C5                 db 0FFh
.rodata:00000000000062C6                 db 0FFh
.rodata:00000000000062C7                 db 0FFh
.rodata:00000000000062C8                 db 0FFh
.rodata:00000000000062C9                 db 0FFh
.rodata:00000000000062CA                 db 0FFh
.rodata:00000000000062CB                 db 0FFh
.rodata:00000000000062CC                 db 0FFh
.rodata:00000000000062CD                 db 0FFh
.rodata:00000000000062CE                 db 0FFh
.rodata:00000000000062CF                 db 0FFh
.rodata:00000000000062D0                 db 0FFh
.rodata:00000000000062D1                 db 0FFh
.rodata:00000000000062D2                 db 0FFh
.rodata:00000000000062D3                 db 0FFh
.rodata:00000000000062D4                 db 0FFh
.rodata:00000000000062D5                 db 0FFh
.rodata:00000000000062D6                 db 0FFh
.rodata:00000000000062D7                 db 0FFh
.rodata:00000000000062D8                 db 0FFh
.rodata:00000000000062D9                 db 0FFh
.rodata:00000000000062DA                 db 0FFh
.rodata:00000000000062DB                 db 0FFh
.rodata:00000000000062DC                 db 0FFh
.rodata:00000000000062DD                 db 0FFh
.rodata:00000000000062DE                 db 0FFh
.rodata:00000000000062DF                 db 0FFh
.rodata:00000000000062E0                 db 0FFh
.rodata:00000000000062E1                 db 0FFh
.rodata:00000000000062E2                 db 0FFh
.rodata:00000000000062E3                 db 0FFh
.rodata:00000000000062E4                 db 0FFh
.rodata:00000000000062E5                 db 0FFh
.rodata:00000000000062E6                 db 0FFh
.rodata:00000000000062E7                 db 0FFh
.rodata:00000000000062E8                 db 0FFh
.rodata:00000000000062E9                 db 0FFh
.rodata:00000000000062EA                 db 0FFh
.rodata:00000000000062EB                 db 0FFh
.rodata:00000000000062EC                 db 0FFh
.rodata:00000000000062ED                 db 0FFh
.rodata:00000000000062EE                 db 0FFh
.rodata:00000000000062EF                 db 0FFh
.rodata:00000000000062F0                 db 0FFh
.rodata:00000000000062F1                 db 0FFh
.rodata:00000000000062F2                 db 0FFh
.rodata:00000000000062F3                 db 0FFh
.rodata:00000000000062F4                 db 0FFh
.rodata:00000000000062F5                 db 0FFh
.rodata:00000000000062F6                 db 0FFh
.rodata:00000000000062F7                 db 0FFh
.rodata:00000000000062F8                 db 0FFh
.rodata:00000000000062F9                 db 0FFh
.rodata:00000000000062FA                 db 0FFh
.rodata:00000000000062FB                 db 0FFh
.rodata:00000000000062FC                 db 0FFh
.rodata:00000000000062FD                 db 0FFh
.rodata:00000000000062FE                 db 0FFh
.rodata:00000000000062FF                 db 0FFh
.rodata:0000000000006300                 db 0FFh
.rodata:0000000000006301                 db 0FFh
.rodata:0000000000006302                 db 0FFh
.rodata:0000000000006303                 db 0FFh
.rodata:0000000000006304                 db 0FFh
.rodata:0000000000006305                 db 0FFh
.rodata:0000000000006306                 db 0FFh
.rodata:0000000000006307                 db 0FFh
.rodata:0000000000006308                 db 0FFh
.rodata:0000000000006309                 db 0FFh
.rodata:000000000000630A                 db 0FFh
.rodata:000000000000630B                 db 0FFh
.rodata:000000000000630C                 db 0FFh
.rodata:000000000000630D                 db 0FFh
.rodata:000000000000630E                 db 0FFh
.rodata:000000000000630F                 db 0FFh
.rodata:0000000000006310                 db 0FFh
.rodata:0000000000006311                 db 0FFh
.rodata:0000000000006312                 db 0FFh
.rodata:0000000000006313                 db 0FFh
.rodata:0000000000006314                 db 0FFh
.rodata:0000000000006315                 db 0FFh
.rodata:0000000000006316                 db 0FFh
.rodata:0000000000006317                 db 0FFh
.rodata:0000000000006318                 db 0FFh
.rodata:0000000000006319                 db 0FFh
.rodata:000000000000631A                 db 0FFh
.rodata:000000000000631B                 db 0FFh
.rodata:000000000000631C                 db 0FFh
.rodata:000000000000631D                 db 0FFh
.rodata:000000000000631E                 db 0FFh
.rodata:000000000000631F                 db 0FFh
.rodata:0000000000006320                 db 0FFh
.rodata:0000000000006321                 db 0FFh
.rodata:0000000000006322                 db 0FFh
.rodata:0000000000006323                 db 0FFh
.rodata:0000000000006324                 db 0FFh
.rodata:0000000000006325                 db 0FFh
.rodata:0000000000006326                 db 0FFh
.rodata:0000000000006327                 db 0FFh
.rodata:0000000000006328                 db 0FFh
.rodata:0000000000006329                 db 0FFh
.rodata:000000000000632A                 db 0FFh
.rodata:000000000000632B                 db 0FFh
.rodata:000000000000632C                 db 0FFh
.rodata:000000000000632D                 db 0FFh
.rodata:000000000000632E                 db 0FFh
.rodata:000000000000632F                 db 0FFh
.rodata:0000000000006330                 db 0FFh
.rodata:0000000000006331                 db 0FFh
.rodata:0000000000006332                 db 0FFh
.rodata:0000000000006333                 db 0FFh
.rodata:0000000000006334                 db 0FFh
.rodata:0000000000006335                 db 0FFh
.rodata:0000000000006336                 db 0FFh
.rodata:0000000000006337                 db 0FFh
.rodata:0000000000006338                 db 0FFh
.rodata:0000000000006339                 db 0FFh
.rodata:000000000000633A                 db 0FFh
.rodata:000000000000633B                 db 0FFh
.rodata:000000000000633C                 db 0FFh
.rodata:000000000000633D                 db 0FFh
.rodata:000000000000633E                 db 0FFh
.rodata:000000000000633F                 db 0FFh
.rodata:0000000000006340                 db 0FFh
.rodata:0000000000006341                 db 0FFh
.rodata:0000000000006342                 db 0FFh
.rodata:0000000000006343                 db 0FFh
.rodata:0000000000006344                 db 0FFh
.rodata:0000000000006345                 db 0FFh
.rodata:0000000000006346                 db 0FFh
.rodata:0000000000006347                 db 0FFh
.rodata:0000000000006348                 db 0FFh
.rodata:0000000000006349                 db 0FFh
.rodata:000000000000634A                 db 0FFh
.rodata:000000000000634B                 db 0FFh
.rodata:000000000000634C                 db 0FFh
.rodata:000000000000634D                 db 0FFh
.rodata:000000000000634E                 db 0FFh
.rodata:000000000000634F                 db 0FFh
.rodata:0000000000006350                 db 0FFh
.rodata:0000000000006351                 db 0FFh
.rodata:0000000000006352                 db 0FFh
.rodata:0000000000006353                 db 0FFh
.rodata:0000000000006354                 db 0FFh
.rodata:0000000000006355                 db 0FFh
.rodata:0000000000006356                 db 0FFh
.rodata:0000000000006357                 db 0FFh
.rodata:0000000000006358                 db 0FFh
.rodata:0000000000006359                 db 0FFh
.rodata:000000000000635A                 db 0FFh
.rodata:000000000000635B                 db 0FFh
.rodata:000000000000635C                 db 0FFh
.rodata:000000000000635D                 db 0FFh
.rodata:000000000000635E                 db 0FFh
.rodata:000000000000635F                 db 0FFh
.rodata:0000000000006360 ; const char aS[4]
.rodata:0000000000006360 aS              db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000006360                                         ; xnumtoumax+7D↑o
.rodata:0000000000006364 ; const char format[]
.rodata:0000000000006364 format          dd offset unk_7325      ; DATA XREF: main+1B9↑o
.rodata:0000000000006364                                         ; main+6AB↑o ...
.rodata:0000000000006368 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000006368                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000063A0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000063A8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000063A8                                         ; main+16D↑o ...
.rodata:00000000000063AC unk_63AC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000063AD                 db  80h
.rodata:00000000000063AE                 db  98h
.rodata:00000000000063AF                 db    0
.rodata:00000000000063B0 unk_63B0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000063B1                 db  80h
.rodata:00000000000063B2                 db  99h
.rodata:00000000000063B3                 db    0
.rodata:00000000000063B4 unk_63B4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000063B5                 db    7
.rodata:00000000000063B6                 db  65h ; e
.rodata:00000000000063B7                 db    0
.rodata:00000000000063B8 unk_63B8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000063B9                 db 0AFh
.rodata:00000000000063BA                 db    0
.rodata:00000000000063BB unk_63BB        db  22h ; "             ; DATA XREF: gettext_quote:loc_2EC0↑o
.rodata:00000000000063BB                                         ; quotearg_buffer_restyled:loc_3C7B↑o ...
.rodata:00000000000063BC                 db    0
.rodata:00000000000063BD ; const char asc_63BD[2]
.rodata:00000000000063BD asc_63BD        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000063BD                                         ; quotearg_buffer_restyled:loc_3043↑o ...
.rodata:00000000000063BF ; const char asc_63BF[2]
.rodata:00000000000063BF asc_63BF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000063BF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000063C1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000063C9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000208BE8↓o
.rodata:00000000000063CF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000208BF0↓o
.rodata:00000000000063DC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000208BF8↓o
.rodata:00000000000063DC                                         ; .data.rel.ro:0000000000208C18↓o
.rodata:00000000000063E9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:00000000000063E9                                         ; DATA XREF: .data.rel.ro:0000000000208C00↓o
.rodata:00000000000063FD aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000208C08↓o
.rodata:00000000000063FF aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000208C10↓o
.rodata:0000000000006407 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000208C28↓o
.rodata:000000000000640F                 align 20h
.rodata:0000000000006420 jpt_3021        dd offset loc_3DCA - 6420h
.rodata:0000000000006420                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000006420                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000006420                 dd offset loc_3023 - 6420h ; jump table for switch statement
.rodata:0000000000006420                 dd offset loc_3FF8 - 6420h
.rodata:0000000000006420                 dd offset loc_3E04 - 6420h
.rodata:0000000000006420                 dd offset loc_3BF4 - 6420h
.rodata:0000000000006420                 dd offset loc_3C50 - 6420h
.rodata:0000000000006420                 dd offset loc_3CA5 - 6420h
.rodata:0000000000006420                 dd offset loc_3CEA - 6420h
.rodata:0000000000006420                 dd offset loc_3D24 - 6420h
.rodata:0000000000006420                 dd offset loc_3D24 - 6420h
.rodata:0000000000006420                 dd offset loc_3D24 - 6420h
.rodata:000000000000644C jpt_317E        dd offset loc_33A0 - 644Ch, offset def_317E - 644Ch, offset def_317E - 644Ch
.rodata:000000000000644C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000644C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000644C                 dd offset def_317E - 644Ch, offset def_317E - 644Ch, offset def_317E - 644Ch ; jump table for switch statement
.rodata:000000000000644C                 dd offset def_317E - 644Ch, offset loc_33E0 - 644Ch, offset loc_32E8 - 644Ch
.rodata:000000000000644C                 dd offset loc_32A8 - 644Ch, offset loc_3470 - 644Ch, offset loc_3460 - 644Ch
.rodata:000000000000644C                 dd offset loc_3450 - 644Ch, offset loc_3440 - 644Ch, offset def_317E - 644Ch
.rodata:000000000000644C                 dd offset def_317E - 644Ch, offset def_317E - 644Ch, offset def_317E - 644Ch
.rodata:000000000000644C                 dd offset def_317E - 644Ch, offset def_317E - 644Ch, offset def_317E - 644Ch
.rodata:000000000000644C                 dd offset def_317E - 644Ch, offset def_317E - 644Ch, offset def_317E - 644Ch
.rodata:000000000000644C                 dd offset def_317E - 644Ch, offset def_317E - 644Ch, offset def_317E - 644Ch
.rodata:000000000000644C                 dd offset def_317E - 644Ch, offset def_317E - 644Ch, offset def_317E - 644Ch
.rodata:000000000000644C                 dd offset def_317E - 644Ch, offset def_317E - 644Ch, offset loc_3430 - 644Ch
.rodata:000000000000644C                 dd offset loc_3420 - 644Ch, offset loc_3420 - 644Ch, offset loc_33F0 - 644Ch
.rodata:000000000000644C                 dd offset loc_3420 - 644Ch, offset loc_33C8 - 644Ch, offset loc_3420 - 644Ch
.rodata:000000000000644C                 dd offset loc_3283 - 644Ch, offset loc_3420 - 644Ch, offset loc_3420 - 644Ch
.rodata:000000000000644C                 dd offset loc_3420 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_3420 - 644Ch
.rodata:000000000000644C                 dd offset loc_3420 - 644Ch, offset loc_3420 - 644Ch, offset loc_3420 - 644Ch
.rodata:000000000000644C                 dd offset loc_3253 - 644Ch, offset def_317E - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_3420 - 644Ch, offset loc_32F8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_3420 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_3420 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch, offset loc_33C8 - 644Ch
.rodata:000000000000644C                 dd offset loc_3183 - 644Ch, offset loc_3420 - 644Ch, offset loc_3183 - 644Ch
.rodata:000000000000644C                 dd offset loc_33F0 - 644Ch
.rodata:0000000000006648 jpt_350A        dd offset loc_3570 - 6648h, offset def_350A - 6648h, offset def_350A - 6648h
.rodata:0000000000006648                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000006648                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000006648                 dd offset def_350A - 6648h, offset def_350A - 6648h, offset def_350A - 6648h ; jump table for switch statement
.rodata:0000000000006648                 dd offset def_350A - 6648h, offset loc_3560 - 6648h, offset loc_36B0 - 6648h
.rodata:0000000000006648                 dd offset loc_3698 - 6648h, offset loc_3548 - 6648h, offset loc_3688 - 6648h
.rodata:0000000000006648                 dd offset loc_3530 - 6648h, offset loc_3670 - 6648h, offset def_350A - 6648h
.rodata:0000000000006648                 dd offset def_350A - 6648h, offset def_350A - 6648h, offset def_350A - 6648h
.rodata:0000000000006648                 dd offset def_350A - 6648h, offset def_350A - 6648h, offset def_350A - 6648h
.rodata:0000000000006648                 dd offset def_350A - 6648h, offset def_350A - 6648h, offset def_350A - 6648h
.rodata:0000000000006648                 dd offset def_350A - 6648h, offset def_350A - 6648h, offset def_350A - 6648h
.rodata:0000000000006648                 dd offset def_350A - 6648h, offset def_350A - 6648h, offset def_350A - 6648h
.rodata:0000000000006648                 dd offset def_350A - 6648h, offset def_350A - 6648h, offset loc_3658 - 6648h
.rodata:0000000000006648                 dd offset loc_3640 - 6648h, offset loc_3640 - 6648h, offset loc_3628 - 6648h
.rodata:0000000000006648                 dd offset loc_3640 - 6648h, offset loc_3610 - 6648h, offset loc_3640 - 6648h
.rodata:0000000000006648                 dd offset loc_3280 - 6648h, offset loc_3640 - 6648h, offset loc_3640 - 6648h
.rodata:0000000000006648                 dd offset loc_3640 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3640 - 6648h
.rodata:0000000000006648                 dd offset loc_3640 - 6648h, offset loc_3640 - 6648h, offset loc_3640 - 6648h
.rodata:0000000000006648                 dd offset loc_3250 - 6648h, offset def_350A - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3640 - 6648h, offset loc_3510 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3640 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3640 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3610 - 6648h, offset loc_3610 - 6648h, offset loc_3610 - 6648h
.rodata:0000000000006648                 dd offset loc_3180 - 6648h, offset loc_3640 - 6648h, offset loc_3180 - 6648h
.rodata:0000000000006648                 dd offset loc_3628 - 6648h
.rodata:0000000000006844                 align 20h
.rodata:0000000000006860                 public quoting_style_vals
.rodata:0000000000006860 quoting_style_vals db    0
.rodata:0000000000006861                 db    0
.rodata:0000000000006862                 db    0
.rodata:0000000000006863                 db    0
.rodata:0000000000006864                 db    1
.rodata:0000000000006865                 db    0
.rodata:0000000000006866                 db    0
.rodata:0000000000006867                 db    0
.rodata:0000000000006868                 db    2
.rodata:0000000000006869                 db    0
.rodata:000000000000686A                 db    0
.rodata:000000000000686B                 db    0
.rodata:000000000000686C                 db    3
.rodata:000000000000686D                 db    0
.rodata:000000000000686E                 db    0
.rodata:000000000000686F                 db    0
.rodata:0000000000006870                 db    4
.rodata:0000000000006871                 db    0
.rodata:0000000000006872                 db    0
.rodata:0000000000006873                 db    0
.rodata:0000000000006874                 db    5
.rodata:0000000000006875                 db    0
.rodata:0000000000006876                 db    0
.rodata:0000000000006877                 db    0
.rodata:0000000000006878                 db    6
.rodata:0000000000006879                 db    0
.rodata:000000000000687A                 db    0
.rodata:000000000000687B                 db    0
.rodata:000000000000687C                 db    7
.rodata:000000000000687D                 db    0
.rodata:000000000000687E                 db    0
.rodata:000000000000687F                 db    0
.rodata:0000000000006880                 db    8
.rodata:0000000000006881                 db    0
.rodata:0000000000006882                 db    0
.rodata:0000000000006883                 db    0
.rodata:0000000000006884                 db    9
.rodata:0000000000006885                 db    0
.rodata:0000000000006886                 db    0
.rodata:0000000000006887                 db    0
.rodata:0000000000006888 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000006894 aSS             db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000689B ; const char aC_0[]
.rodata:000000000000689B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_4B6C↑o
.rodata:000000000000689F ; const char aWrittenByS[]
.rodata:000000000000689F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000689F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000068AF ; const char aWrittenBySAndS[]
.rodata:00000000000068AF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000068AF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000068C6 ; const char aWrittenBySSAnd[]
.rodata:00000000000068C6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000068C6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000068E2 ; const char aReportBugsToS[]
.rodata:00000000000068E2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000068E2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000068F7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000068F7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000690D ; const char aSHomePageS[]
.rodata:000000000000690D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000690D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000006921                 align 8
.rodata:0000000000006928 ; const char aLicenseGplv3Gn[]
.rodata:0000000000006928 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000006928                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000006928                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000006928                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000006928                 db '.',0Ah
.rodata:0000000000006928                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000006928                 db 0Ah,0
.rodata:00000000000069F4                 align 8
.rodata:00000000000069F8 ; const char aWrittenBySSSAn[]
.rodata:00000000000069F8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000069F8                                         ; DATA XREF: version_etc_arn:loc_4DC0↑o
.rodata:00000000000069F8                 db 'and %s.',0Ah,0
.rodata:0000000000006A18 ; const char aWrittenBySSSSA[]
.rodata:0000000000006A18 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006A18                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000006A18                 db '%s, and %s.',0Ah,0
.rodata:0000000000006A3C                 align 20h
.rodata:0000000000006A40 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000006A40 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006A40                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000006A40                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000006A68 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000006A68 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006A68                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000006A68                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000006A94                 align 8
.rodata:0000000000006A98 ; const char aWrittenBySSSSS[]
.rodata:0000000000006A98 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006A98                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000006A98                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006A98                 db 'and %s.',0Ah,0
.rodata:0000000000006AC8 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000006AC8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006AC8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000006AC8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006AC8                 db '%s, and %s.',0Ah,0
.rodata:0000000000006AFC                 align 20h
.rodata:0000000000006B00 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006B00                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000006B00                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006B00                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000006B3C                 align 20h
.rodata:0000000000006B40 ; const char aGeneralHelpUsi[]
.rodata:0000000000006B40 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000006B40                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000006B40                 db 0
.rodata:0000000000006B81                 align 4
.rodata:0000000000006B84 jpt_4BD4        dd offset loc_4C56 - 6B84h
.rodata:0000000000006B84                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000006B84                                         ; version_etc_arn+9D↑r
.rodata:0000000000006B84                 dd offset loc_4CE8 - 6B84h ; jump table for switch statement
.rodata:0000000000006B84                 dd offset loc_4D28 - 6B84h
.rodata:0000000000006B84                 dd offset loc_4D70 - 6B84h
.rodata:0000000000006B84                 dd offset loc_4DC0 - 6B84h
.rodata:0000000000006B84                 dd offset loc_4E18 - 6B84h
.rodata:0000000000006B84                 dd offset loc_4E48 - 6B84h
.rodata:0000000000006B84                 dd offset loc_4EB0 - 6B84h
.rodata:0000000000006B84                 dd offset loc_4BE0 - 6B84h
.rodata:0000000000006B84                 dd offset loc_4C90 - 6B84h
.rodata:0000000000006BAC                 align 20h
.rodata:0000000000006BC0                 public version_etc_copyright
.rodata:0000000000006BC0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000006BC0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000006BEF ; const char aMemoryExhauste[]
.rodata:0000000000006BEF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000006C00 ; const char file[]
.rodata:0000000000006C00 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000006C00                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:0000000000006C20 ; const char assertion[]
.rodata:0000000000006C20 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000006C20                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:0000000000006C46                 align 8
.rodata:0000000000006C48 jpt_56E6        dd offset loc_5836 - 6C48h, offset def_56E6 - 6C48h, offset def_56E6 - 6C48h
.rodata:0000000000006C48                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:0000000000006C48                                         ; xstrtoumax+1CF↑r
.rodata:0000000000006C48                 dd offset loc_5813 - 6C48h, offset def_56E6 - 6C48h, offset loc_584C - 6C48h ; jump table for switch statement
.rodata:0000000000006C48                 dd offset def_56E6 - 6C48h, offset def_56E6 - 6C48h, offset def_56E6 - 6C48h
.rodata:0000000000006C48                 dd offset loc_57CF - 6C48h, offset def_56E6 - 6C48h, offset loc_56E8 - 6C48h
.rodata:0000000000006C48                 dd offset def_56E6 - 6C48h, offset def_56E6 - 6C48h, offset loc_57F0 - 6C48h
.rodata:0000000000006C48                 dd offset def_56E6 - 6C48h, offset def_56E6 - 6C48h, offset def_56E6 - 6C48h
.rodata:0000000000006C48                 dd offset loc_57AF - 6C48h, offset def_56E6 - 6C48h, offset def_56E6 - 6C48h
.rodata:0000000000006C48                 dd offset def_56E6 - 6C48h, offset def_56E6 - 6C48h, offset loc_578A - 6C48h
.rodata:0000000000006C48                 dd offset loc_5764 - 6C48h, offset def_56E6 - 6C48h, offset def_56E6 - 6C48h
.rodata:0000000000006C48                 dd offset def_56E6 - 6C48h, offset def_56E6 - 6C48h, offset def_56E6 - 6C48h
.rodata:0000000000006C48                 dd offset def_56E6 - 6C48h, offset def_56E6 - 6C48h, offset loc_574D - 6C48h
.rodata:0000000000006C48                 dd offset loc_5710 - 6C48h, offset def_56E6 - 6C48h, offset def_56E6 - 6C48h
.rodata:0000000000006C48                 dd offset def_56E6 - 6C48h, offset loc_584C - 6C48h, offset def_56E6 - 6C48h
.rodata:0000000000006C48                 dd offset def_56E6 - 6C48h, offset def_56E6 - 6C48h, offset loc_57CF - 6C48h
.rodata:0000000000006C48                 dd offset def_56E6 - 6C48h, offset loc_56E8 - 6C48h, offset def_56E6 - 6C48h
.rodata:0000000000006C48                 dd offset def_56E6 - 6C48h, offset def_56E6 - 6C48h, offset def_56E6 - 6C48h
.rodata:0000000000006C48                 dd offset def_56E6 - 6C48h, offset def_56E6 - 6C48h, offset loc_57AF - 6C48h
.rodata:0000000000006C48                 dd offset def_56E6 - 6C48h, offset def_56E6 - 6C48h, offset loc_5737 - 6C48h
.rodata:0000000000006D20 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000006D20 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:0000000000006D20                                         ; DATA XREF: xstrtoumax:loc_5895↑o
.rodata:0000000000006D2B aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000006D2D aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5BA0↑o
.rodata:0000000000006D33 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000006D33                                         ; locale_charset:loc_5BF0↑o
.rodata:0000000000006D33 _rodata         ends
.rodata:0000000000006D33
LOAD:0000000000006D39 ; ===========================================================================
LOAD:0000000000006D39
LOAD:0000000000006D39 ; Segment type: Pure code
LOAD:0000000000006D39 ; Segment permissions: Read/Execute
LOAD:0000000000006D39 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006D39                 assume cs:LOAD
LOAD:0000000000006D39                 ;org 6D39h
LOAD:0000000000006D39                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006D39                 align 4
LOAD:0000000000006D39 LOAD            ends
LOAD:0000000000006D39
.eh_frame_hdr:0000000000006D3C ; ===========================================================================
.eh_frame_hdr:0000000000006D3C
.eh_frame_hdr:0000000000006D3C ; Segment type: Pure data
.eh_frame_hdr:0000000000006D3C ; Segment permissions: Read
.eh_frame_hdr:0000000000006D3C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000006D3C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000006D3C                 ;org 6D3Ch
.eh_frame_hdr:0000000000006D3C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000006D3D                 db  1Bh
.eh_frame_hdr:0000000000006D3E                 db    3
.eh_frame_hdr:0000000000006D3F                 db  3Bh ; ;
.eh_frame_hdr:0000000000006D40                 db  98h
.eh_frame_hdr:0000000000006D41                 db    2
.eh_frame_hdr:0000000000006D42                 db    0
.eh_frame_hdr:0000000000006D43                 db    0
.eh_frame_hdr:0000000000006D44                 db  52h ; R
.eh_frame_hdr:0000000000006D45                 db    0
.eh_frame_hdr:0000000000006D46                 db    0
.eh_frame_hdr:0000000000006D47                 db    0
.eh_frame_hdr:0000000000006D48                 db  84h
.eh_frame_hdr:0000000000006D49                 db 0A7h
.eh_frame_hdr:0000000000006D4A                 db 0FFh
.eh_frame_hdr:0000000000006D4B                 db 0FFh
.eh_frame_hdr:0000000000006D4C                 db 0E4h
.eh_frame_hdr:0000000000006D4D                 db    2
.eh_frame_hdr:0000000000006D4E                 db    0
.eh_frame_hdr:0000000000006D4F                 db    0
.eh_frame_hdr:0000000000006D50                 db 0B4h
.eh_frame_hdr:0000000000006D51                 db 0AAh
.eh_frame_hdr:0000000000006D52                 db 0FFh
.eh_frame_hdr:0000000000006D53                 db 0FFh
.eh_frame_hdr:0000000000006D54                 db  0Ch
.eh_frame_hdr:0000000000006D55                 db    3
.eh_frame_hdr:0000000000006D56                 db    0
.eh_frame_hdr:0000000000006D57                 db    0
.eh_frame_hdr:0000000000006D58                 db 0C4h
.eh_frame_hdr:0000000000006D59                 db 0AAh
.eh_frame_hdr:0000000000006D5A                 db 0FFh
.eh_frame_hdr:0000000000006D5B                 db 0FFh
.eh_frame_hdr:0000000000006D5C                 db  50h ; P
.eh_frame_hdr:0000000000006D5D                 db    3
.eh_frame_hdr:0000000000006D5E                 db    0
.eh_frame_hdr:0000000000006D5F                 db    0
.eh_frame_hdr:0000000000006D60                 db 0C4h
.eh_frame_hdr:0000000000006D61                 db 0B2h
.eh_frame_hdr:0000000000006D62                 db 0FFh
.eh_frame_hdr:0000000000006D63                 db 0FFh
.eh_frame_hdr:0000000000006D64                 db 0B4h
.eh_frame_hdr:0000000000006D65                 db    2
.eh_frame_hdr:0000000000006D66                 db    0
.eh_frame_hdr:0000000000006D67                 db    0
.eh_frame_hdr:0000000000006D68                 db 0D4h
.eh_frame_hdr:0000000000006D69                 db 0B3h
.eh_frame_hdr:0000000000006D6A                 db 0FFh
.eh_frame_hdr:0000000000006D6B                 db 0FFh
.eh_frame_hdr:0000000000006D6C                 db  24h ; $
.eh_frame_hdr:0000000000006D6D                 db    3
.eh_frame_hdr:0000000000006D6E                 db    0
.eh_frame_hdr:0000000000006D6F                 db    0
.eh_frame_hdr:0000000000006D70                 db 0B4h
.eh_frame_hdr:0000000000006D71                 db 0B7h
.eh_frame_hdr:0000000000006D72                 db 0FFh
.eh_frame_hdr:0000000000006D73                 db 0FFh
.eh_frame_hdr:0000000000006D74                 db 0A4h
.eh_frame_hdr:0000000000006D75                 db    3
.eh_frame_hdr:0000000000006D76                 db    0
.eh_frame_hdr:0000000000006D77                 db    0
.eh_frame_hdr:0000000000006D78                 db  64h ; d
.eh_frame_hdr:0000000000006D79                 db 0B9h
.eh_frame_hdr:0000000000006D7A                 db 0FFh
.eh_frame_hdr:0000000000006D7B                 db 0FFh
.eh_frame_hdr:0000000000006D7C                 db 0B8h
.eh_frame_hdr:0000000000006D7D                 db    3
.eh_frame_hdr:0000000000006D7E                 db    0
.eh_frame_hdr:0000000000006D7F                 db    0
.eh_frame_hdr:0000000000006D80                 db  84h
.eh_frame_hdr:0000000000006D81                 db 0BBh
.eh_frame_hdr:0000000000006D82                 db 0FFh
.eh_frame_hdr:0000000000006D83                 db 0FFh
.eh_frame_hdr:0000000000006D84                 db 0CCh
.eh_frame_hdr:0000000000006D85                 db    3
.eh_frame_hdr:0000000000006D86                 db    0
.eh_frame_hdr:0000000000006D87                 db    0
.eh_frame_hdr:0000000000006D88                 db  14h
.eh_frame_hdr:0000000000006D89                 db 0BCh
.eh_frame_hdr:0000000000006D8A                 db 0FFh
.eh_frame_hdr:0000000000006D8B                 db 0FFh
.eh_frame_hdr:0000000000006D8C                 db  18h
.eh_frame_hdr:0000000000006D8D                 db    4
.eh_frame_hdr:0000000000006D8E                 db    0
.eh_frame_hdr:0000000000006D8F                 db    0
.eh_frame_hdr:0000000000006D90                 db  34h ; 4
.eh_frame_hdr:0000000000006D91                 db 0BCh
.eh_frame_hdr:0000000000006D92                 db 0FFh
.eh_frame_hdr:0000000000006D93                 db 0FFh
.eh_frame_hdr:0000000000006D94                 db  2Ch ; ,
.eh_frame_hdr:0000000000006D95                 db    4
.eh_frame_hdr:0000000000006D96                 db    0
.eh_frame_hdr:0000000000006D97                 db    0
.eh_frame_hdr:0000000000006D98                 db  44h ; D
.eh_frame_hdr:0000000000006D99                 db 0BCh
.eh_frame_hdr:0000000000006D9A                 db 0FFh
.eh_frame_hdr:0000000000006D9B                 db 0FFh
.eh_frame_hdr:0000000000006D9C                 db  40h ; @
.eh_frame_hdr:0000000000006D9D                 db    4
.eh_frame_hdr:0000000000006D9E                 db    0
.eh_frame_hdr:0000000000006D9F                 db    0
.eh_frame_hdr:0000000000006DA0                 db 0F4h
.eh_frame_hdr:0000000000006DA1                 db 0BEh
.eh_frame_hdr:0000000000006DA2                 db 0FFh
.eh_frame_hdr:0000000000006DA3                 db 0FFh
.eh_frame_hdr:0000000000006DA4                 db  8Ch
.eh_frame_hdr:0000000000006DA5                 db    4
.eh_frame_hdr:0000000000006DA6                 db    0
.eh_frame_hdr:0000000000006DA7                 db    0
.eh_frame_hdr:0000000000006DA8                 db 0B4h
.eh_frame_hdr:0000000000006DA9                 db 0BFh
.eh_frame_hdr:0000000000006DAA                 db 0FFh
.eh_frame_hdr:0000000000006DAB                 db 0FFh
.eh_frame_hdr:0000000000006DAC                 db 0D4h
.eh_frame_hdr:0000000000006DAD                 db    4
.eh_frame_hdr:0000000000006DAE                 db    0
.eh_frame_hdr:0000000000006DAF                 db    0
.eh_frame_hdr:0000000000006DB0                 db 0C4h
.eh_frame_hdr:0000000000006DB1                 db 0BFh
.eh_frame_hdr:0000000000006DB2                 db 0FFh
.eh_frame_hdr:0000000000006DB3                 db 0FFh
.eh_frame_hdr:0000000000006DB4                 db 0E8h
.eh_frame_hdr:0000000000006DB5                 db    4
.eh_frame_hdr:0000000000006DB6                 db    0
.eh_frame_hdr:0000000000006DB7                 db    0
.eh_frame_hdr:0000000000006DB8                 db 0D4h
.eh_frame_hdr:0000000000006DB9                 db 0BFh
.eh_frame_hdr:0000000000006DBA                 db 0FFh
.eh_frame_hdr:0000000000006DBB                 db 0FFh
.eh_frame_hdr:0000000000006DBC                 db 0FCh
.eh_frame_hdr:0000000000006DBD                 db    4
.eh_frame_hdr:0000000000006DBE                 db    0
.eh_frame_hdr:0000000000006DBF                 db    0
.eh_frame_hdr:0000000000006DC0                 db  84h
.eh_frame_hdr:0000000000006DC1                 db 0C0h
.eh_frame_hdr:0000000000006DC2                 db 0FFh
.eh_frame_hdr:0000000000006DC3                 db 0FFh
.eh_frame_hdr:0000000000006DC4                 db  2Ch ; ,
.eh_frame_hdr:0000000000006DC5                 db    5
.eh_frame_hdr:0000000000006DC6                 db    0
.eh_frame_hdr:0000000000006DC7                 db    0
.eh_frame_hdr:0000000000006DC8                 db  94h
.eh_frame_hdr:0000000000006DC9                 db 0C0h
.eh_frame_hdr:0000000000006DCA                 db 0FFh
.eh_frame_hdr:0000000000006DCB                 db 0FFh
.eh_frame_hdr:0000000000006DCC                 db  40h ; @
.eh_frame_hdr:0000000000006DCD                 db    5
.eh_frame_hdr:0000000000006DCE                 db    0
.eh_frame_hdr:0000000000006DCF                 db    0
.eh_frame_hdr:0000000000006DD0                 db 0C4h
.eh_frame_hdr:0000000000006DD1                 db 0C0h
.eh_frame_hdr:0000000000006DD2                 db 0FFh
.eh_frame_hdr:0000000000006DD3                 db 0FFh
.eh_frame_hdr:0000000000006DD4                 db  5Ch ; \
.eh_frame_hdr:0000000000006DD5                 db    5
.eh_frame_hdr:0000000000006DD6                 db    0
.eh_frame_hdr:0000000000006DD7                 db    0
.eh_frame_hdr:0000000000006DD8                 db  64h ; d
.eh_frame_hdr:0000000000006DD9                 db 0C1h
.eh_frame_hdr:0000000000006DDA                 db 0FFh
.eh_frame_hdr:0000000000006DDB                 db 0FFh
.eh_frame_hdr:0000000000006DDC                 db  7Ch ; |
.eh_frame_hdr:0000000000006DDD                 db    5
.eh_frame_hdr:0000000000006DDE                 db    0
.eh_frame_hdr:0000000000006DDF                 db    0
.eh_frame_hdr:0000000000006DE0                 db  54h ; T
.eh_frame_hdr:0000000000006DE1                 db 0C2h
.eh_frame_hdr:0000000000006DE2                 db 0FFh
.eh_frame_hdr:0000000000006DE3                 db 0FFh
.eh_frame_hdr:0000000000006DE4                 db 0C0h
.eh_frame_hdr:0000000000006DE5                 db    5
.eh_frame_hdr:0000000000006DE6                 db    0
.eh_frame_hdr:0000000000006DE7                 db    0
.eh_frame_hdr:0000000000006DE8                 db  94h
.eh_frame_hdr:0000000000006DE9                 db 0D4h
.eh_frame_hdr:0000000000006DEA                 db 0FFh
.eh_frame_hdr:0000000000006DEB                 db 0FFh
.eh_frame_hdr:0000000000006DEC                 db  38h ; 8
.eh_frame_hdr:0000000000006DED                 db    6
.eh_frame_hdr:0000000000006DEE                 db    0
.eh_frame_hdr:0000000000006DEF                 db    0
.eh_frame_hdr:0000000000006DF0                 db  44h ; D
.eh_frame_hdr:0000000000006DF1                 db 0D6h
.eh_frame_hdr:0000000000006DF2                 db 0FFh
.eh_frame_hdr:0000000000006DF3                 db 0FFh
.eh_frame_hdr:0000000000006DF4                 db 0A4h
.eh_frame_hdr:0000000000006DF5                 db    6
.eh_frame_hdr:0000000000006DF6                 db    0
.eh_frame_hdr:0000000000006DF7                 db    0
.eh_frame_hdr:0000000000006DF8                 db  84h
.eh_frame_hdr:0000000000006DF9                 db 0D6h
.eh_frame_hdr:0000000000006DFA                 db 0FFh
.eh_frame_hdr:0000000000006DFB                 db 0FFh
.eh_frame_hdr:0000000000006DFC                 db 0D0h
.eh_frame_hdr:0000000000006DFD                 db    6
.eh_frame_hdr:0000000000006DFE                 db    0
.eh_frame_hdr:0000000000006DFF                 db    0
.eh_frame_hdr:0000000000006E00                 db 0A4h
.eh_frame_hdr:0000000000006E01                 db 0D6h
.eh_frame_hdr:0000000000006E02                 db 0FFh
.eh_frame_hdr:0000000000006E03                 db 0FFh
.eh_frame_hdr:0000000000006E04                 db 0E4h
.eh_frame_hdr:0000000000006E05                 db    6
.eh_frame_hdr:0000000000006E06                 db    0
.eh_frame_hdr:0000000000006E07                 db    0
.eh_frame_hdr:0000000000006E08                 db 0C4h
.eh_frame_hdr:0000000000006E09                 db 0D6h
.eh_frame_hdr:0000000000006E0A                 db 0FFh
.eh_frame_hdr:0000000000006E0B                 db 0FFh
.eh_frame_hdr:0000000000006E0C                 db 0F8h
.eh_frame_hdr:0000000000006E0D                 db    6
.eh_frame_hdr:0000000000006E0E                 db    0
.eh_frame_hdr:0000000000006E0F                 db    0
.eh_frame_hdr:0000000000006E10                 db    4
.eh_frame_hdr:0000000000006E11                 db 0D7h
.eh_frame_hdr:0000000000006E12                 db 0FFh
.eh_frame_hdr:0000000000006E13                 db 0FFh
.eh_frame_hdr:0000000000006E14                 db  0Ch
.eh_frame_hdr:0000000000006E15                 db    7
.eh_frame_hdr:0000000000006E16                 db    0
.eh_frame_hdr:0000000000006E17                 db    0
.eh_frame_hdr:0000000000006E18                 db  24h ; $
.eh_frame_hdr:0000000000006E19                 db 0D7h
.eh_frame_hdr:0000000000006E1A                 db 0FFh
.eh_frame_hdr:0000000000006E1B                 db 0FFh
.eh_frame_hdr:0000000000006E1C                 db  20h
.eh_frame_hdr:0000000000006E1D                 db    7
.eh_frame_hdr:0000000000006E1E                 db    0
.eh_frame_hdr:0000000000006E1F                 db    0
.eh_frame_hdr:0000000000006E20                 db  54h ; T
.eh_frame_hdr:0000000000006E21                 db 0D7h
.eh_frame_hdr:0000000000006E22                 db 0FFh
.eh_frame_hdr:0000000000006E23                 db 0FFh
.eh_frame_hdr:0000000000006E24                 db  34h ; 4
.eh_frame_hdr:0000000000006E25                 db    7
.eh_frame_hdr:0000000000006E26                 db    0
.eh_frame_hdr:0000000000006E27                 db    0
.eh_frame_hdr:0000000000006E28                 db 0D4h
.eh_frame_hdr:0000000000006E29                 db 0D7h
.eh_frame_hdr:0000000000006E2A                 db 0FFh
.eh_frame_hdr:0000000000006E2B                 db 0FFh
.eh_frame_hdr:0000000000006E2C                 db  88h
.eh_frame_hdr:0000000000006E2D                 db    7
.eh_frame_hdr:0000000000006E2E                 db    0
.eh_frame_hdr:0000000000006E2F                 db    0
.eh_frame_hdr:0000000000006E30                 db 0C4h
.eh_frame_hdr:0000000000006E31                 db 0D8h
.eh_frame_hdr:0000000000006E32                 db 0FFh
.eh_frame_hdr:0000000000006E33                 db 0FFh
.eh_frame_hdr:0000000000006E34                 db 0F4h
.eh_frame_hdr:0000000000006E35                 db    7
.eh_frame_hdr:0000000000006E36                 db    0
.eh_frame_hdr:0000000000006E37                 db    0
.eh_frame_hdr:0000000000006E38                 db 0D4h
.eh_frame_hdr:0000000000006E39                 db 0D8h
.eh_frame_hdr:0000000000006E3A                 db 0FFh
.eh_frame_hdr:0000000000006E3B                 db 0FFh
.eh_frame_hdr:0000000000006E3C                 db    8
.eh_frame_hdr:0000000000006E3D                 db    8
.eh_frame_hdr:0000000000006E3E                 db    0
.eh_frame_hdr:0000000000006E3F                 db    0
.eh_frame_hdr:0000000000006E40                 db  74h ; t
.eh_frame_hdr:0000000000006E41                 db 0D9h
.eh_frame_hdr:0000000000006E42                 db 0FFh
.eh_frame_hdr:0000000000006E43                 db 0FFh
.eh_frame_hdr:0000000000006E44                 db  34h ; 4
.eh_frame_hdr:0000000000006E45                 db    8
.eh_frame_hdr:0000000000006E46                 db    0
.eh_frame_hdr:0000000000006E47                 db    0
.eh_frame_hdr:0000000000006E48                 db  94h
.eh_frame_hdr:0000000000006E49                 db 0D9h
.eh_frame_hdr:0000000000006E4A                 db 0FFh
.eh_frame_hdr:0000000000006E4B                 db 0FFh
.eh_frame_hdr:0000000000006E4C                 db  48h ; H
.eh_frame_hdr:0000000000006E4D                 db    8
.eh_frame_hdr:0000000000006E4E                 db    0
.eh_frame_hdr:0000000000006E4F                 db    0
.eh_frame_hdr:0000000000006E50                 db 0A4h
.eh_frame_hdr:0000000000006E51                 db 0D9h
.eh_frame_hdr:0000000000006E52                 db 0FFh
.eh_frame_hdr:0000000000006E53                 db 0FFh
.eh_frame_hdr:0000000000006E54                 db  5Ch ; \
.eh_frame_hdr:0000000000006E55                 db    8
.eh_frame_hdr:0000000000006E56                 db    0
.eh_frame_hdr:0000000000006E57                 db    0
.eh_frame_hdr:0000000000006E58                 db 0C4h
.eh_frame_hdr:0000000000006E59                 db 0D9h
.eh_frame_hdr:0000000000006E5A                 db 0FFh
.eh_frame_hdr:0000000000006E5B                 db 0FFh
.eh_frame_hdr:0000000000006E5C                 db  70h ; p
.eh_frame_hdr:0000000000006E5D                 db    8
.eh_frame_hdr:0000000000006E5E                 db    0
.eh_frame_hdr:0000000000006E5F                 db    0
.eh_frame_hdr:0000000000006E60                 db 0E4h
.eh_frame_hdr:0000000000006E61                 db 0D9h
.eh_frame_hdr:0000000000006E62                 db 0FFh
.eh_frame_hdr:0000000000006E63                 db 0FFh
.eh_frame_hdr:0000000000006E64                 db  84h
.eh_frame_hdr:0000000000006E65                 db    8
.eh_frame_hdr:0000000000006E66                 db    0
.eh_frame_hdr:0000000000006E67                 db    0
.eh_frame_hdr:0000000000006E68                 db  74h ; t
.eh_frame_hdr:0000000000006E69                 db 0DAh
.eh_frame_hdr:0000000000006E6A                 db 0FFh
.eh_frame_hdr:0000000000006E6B                 db 0FFh
.eh_frame_hdr:0000000000006E6C                 db 0A0h
.eh_frame_hdr:0000000000006E6D                 db    8
.eh_frame_hdr:0000000000006E6E                 db    0
.eh_frame_hdr:0000000000006E6F                 db    0
.eh_frame_hdr:0000000000006E70                 db    4
.eh_frame_hdr:0000000000006E71                 db 0DBh
.eh_frame_hdr:0000000000006E72                 db 0FFh
.eh_frame_hdr:0000000000006E73                 db 0FFh
.eh_frame_hdr:0000000000006E74                 db 0BCh
.eh_frame_hdr:0000000000006E75                 db    8
.eh_frame_hdr:0000000000006E76                 db    0
.eh_frame_hdr:0000000000006E77                 db    0
.eh_frame_hdr:0000000000006E78                 db  14h
.eh_frame_hdr:0000000000006E79                 db 0DBh
.eh_frame_hdr:0000000000006E7A                 db 0FFh
.eh_frame_hdr:0000000000006E7B                 db 0FFh
.eh_frame_hdr:0000000000006E7C                 db 0D0h
.eh_frame_hdr:0000000000006E7D                 db    8
.eh_frame_hdr:0000000000006E7E                 db    0
.eh_frame_hdr:0000000000006E7F                 db    0
.eh_frame_hdr:0000000000006E80                 db  24h ; $
.eh_frame_hdr:0000000000006E81                 db 0DBh
.eh_frame_hdr:0000000000006E82                 db 0FFh
.eh_frame_hdr:0000000000006E83                 db 0FFh
.eh_frame_hdr:0000000000006E84                 db 0E4h
.eh_frame_hdr:0000000000006E85                 db    8
.eh_frame_hdr:0000000000006E86                 db    0
.eh_frame_hdr:0000000000006E87                 db    0
.eh_frame_hdr:0000000000006E88                 db 0C4h
.eh_frame_hdr:0000000000006E89                 db 0DBh
.eh_frame_hdr:0000000000006E8A                 db 0FFh
.eh_frame_hdr:0000000000006E8B                 db 0FFh
.eh_frame_hdr:0000000000006E8C                 db    0
.eh_frame_hdr:0000000000006E8D                 db    9
.eh_frame_hdr:0000000000006E8E                 db    0
.eh_frame_hdr:0000000000006E8F                 db    0
.eh_frame_hdr:0000000000006E90                 db 0D4h
.eh_frame_hdr:0000000000006E91                 db 0DBh
.eh_frame_hdr:0000000000006E92                 db 0FFh
.eh_frame_hdr:0000000000006E93                 db 0FFh
.eh_frame_hdr:0000000000006E94                 db  14h
.eh_frame_hdr:0000000000006E95                 db    9
.eh_frame_hdr:0000000000006E96                 db    0
.eh_frame_hdr:0000000000006E97                 db    0
.eh_frame_hdr:0000000000006E98                 db 0F4h
.eh_frame_hdr:0000000000006E99                 db 0DBh
.eh_frame_hdr:0000000000006E9A                 db 0FFh
.eh_frame_hdr:0000000000006E9B                 db 0FFh
.eh_frame_hdr:0000000000006E9C                 db  28h ; (
.eh_frame_hdr:0000000000006E9D                 db    9
.eh_frame_hdr:0000000000006E9E                 db    0
.eh_frame_hdr:0000000000006E9F                 db    0
.eh_frame_hdr:0000000000006EA0                 db    4
.eh_frame_hdr:0000000000006EA1                 db 0DCh
.eh_frame_hdr:0000000000006EA2                 db 0FFh
.eh_frame_hdr:0000000000006EA3                 db 0FFh
.eh_frame_hdr:0000000000006EA4                 db  3Ch ; <
.eh_frame_hdr:0000000000006EA5                 db    9
.eh_frame_hdr:0000000000006EA6                 db    0
.eh_frame_hdr:0000000000006EA7                 db    0
.eh_frame_hdr:0000000000006EA8                 db  94h
.eh_frame_hdr:0000000000006EA9                 db 0DCh
.eh_frame_hdr:0000000000006EAA                 db 0FFh
.eh_frame_hdr:0000000000006EAB                 db 0FFh
.eh_frame_hdr:0000000000006EAC                 db  58h ; X
.eh_frame_hdr:0000000000006EAD                 db    9
.eh_frame_hdr:0000000000006EAE                 db    0
.eh_frame_hdr:0000000000006EAF                 db    0
.eh_frame_hdr:0000000000006EB0                 db  34h ; 4
.eh_frame_hdr:0000000000006EB1                 db 0DDh
.eh_frame_hdr:0000000000006EB2                 db 0FFh
.eh_frame_hdr:0000000000006EB3                 db 0FFh
.eh_frame_hdr:0000000000006EB4                 db  74h ; t
.eh_frame_hdr:0000000000006EB5                 db    9
.eh_frame_hdr:0000000000006EB6                 db    0
.eh_frame_hdr:0000000000006EB7                 db    0
.eh_frame_hdr:0000000000006EB8                 db  44h ; D
.eh_frame_hdr:0000000000006EB9                 db 0DDh
.eh_frame_hdr:0000000000006EBA                 db 0FFh
.eh_frame_hdr:0000000000006EBB                 db 0FFh
.eh_frame_hdr:0000000000006EBC                 db  88h
.eh_frame_hdr:0000000000006EBD                 db    9
.eh_frame_hdr:0000000000006EBE                 db    0
.eh_frame_hdr:0000000000006EBF                 db    0
.eh_frame_hdr:0000000000006EC0                 db  64h ; d
.eh_frame_hdr:0000000000006EC1                 db 0DDh
.eh_frame_hdr:0000000000006EC2                 db 0FFh
.eh_frame_hdr:0000000000006EC3                 db 0FFh
.eh_frame_hdr:0000000000006EC4                 db  9Ch
.eh_frame_hdr:0000000000006EC5                 db    9
.eh_frame_hdr:0000000000006EC6                 db    0
.eh_frame_hdr:0000000000006EC7                 db    0
.eh_frame_hdr:0000000000006EC8                 db  84h
.eh_frame_hdr:0000000000006EC9                 db 0DDh
.eh_frame_hdr:0000000000006ECA                 db 0FFh
.eh_frame_hdr:0000000000006ECB                 db 0FFh
.eh_frame_hdr:0000000000006ECC                 db 0B0h
.eh_frame_hdr:0000000000006ECD                 db    9
.eh_frame_hdr:0000000000006ECE                 db    0
.eh_frame_hdr:0000000000006ECF                 db    0
.eh_frame_hdr:0000000000006ED0                 db  94h
.eh_frame_hdr:0000000000006ED1                 db 0DDh
.eh_frame_hdr:0000000000006ED2                 db 0FFh
.eh_frame_hdr:0000000000006ED3                 db 0FFh
.eh_frame_hdr:0000000000006ED4                 db 0C4h
.eh_frame_hdr:0000000000006ED5                 db    9
.eh_frame_hdr:0000000000006ED6                 db    0
.eh_frame_hdr:0000000000006ED7                 db    0
.eh_frame_hdr:0000000000006ED8                 db 0B4h
.eh_frame_hdr:0000000000006ED9                 db 0DDh
.eh_frame_hdr:0000000000006EDA                 db 0FFh
.eh_frame_hdr:0000000000006EDB                 db 0FFh
.eh_frame_hdr:0000000000006EDC                 db 0D8h
.eh_frame_hdr:0000000000006EDD                 db    9
.eh_frame_hdr:0000000000006EDE                 db    0
.eh_frame_hdr:0000000000006EDF                 db    0
.eh_frame_hdr:0000000000006EE0                 db 0D4h
.eh_frame_hdr:0000000000006EE1                 db 0DDh
.eh_frame_hdr:0000000000006EE2                 db 0FFh
.eh_frame_hdr:0000000000006EE3                 db 0FFh
.eh_frame_hdr:0000000000006EE4                 db 0ECh
.eh_frame_hdr:0000000000006EE5                 db    9
.eh_frame_hdr:0000000000006EE6                 db    0
.eh_frame_hdr:0000000000006EE7                 db    0
.eh_frame_hdr:0000000000006EE8                 db 0F4h
.eh_frame_hdr:0000000000006EE9                 db 0DDh
.eh_frame_hdr:0000000000006EEA                 db 0FFh
.eh_frame_hdr:0000000000006EEB                 db 0FFh
.eh_frame_hdr:0000000000006EEC                 db    4
.eh_frame_hdr:0000000000006EED                 db  0Ah
.eh_frame_hdr:0000000000006EEE                 db    0
.eh_frame_hdr:0000000000006EEF                 db    0
.eh_frame_hdr:0000000000006EF0                 db  14h
.eh_frame_hdr:0000000000006EF1                 db 0E2h
.eh_frame_hdr:0000000000006EF2                 db 0FFh
.eh_frame_hdr:0000000000006EF3                 db 0FFh
.eh_frame_hdr:0000000000006EF4                 db  18h
.eh_frame_hdr:0000000000006EF5                 db  0Bh
.eh_frame_hdr:0000000000006EF6                 db    0
.eh_frame_hdr:0000000000006EF7                 db    0
.eh_frame_hdr:0000000000006EF8                 db  34h ; 4
.eh_frame_hdr:0000000000006EF9                 db 0E2h
.eh_frame_hdr:0000000000006EFA                 db 0FFh
.eh_frame_hdr:0000000000006EFB                 db 0FFh
.eh_frame_hdr:0000000000006EFC                 db  2Ch ; ,
.eh_frame_hdr:0000000000006EFD                 db  0Bh
.eh_frame_hdr:0000000000006EFE                 db    0
.eh_frame_hdr:0000000000006EFF                 db    0
.eh_frame_hdr:0000000000006F00                 db 0B4h
.eh_frame_hdr:0000000000006F01                 db 0E2h
.eh_frame_hdr:0000000000006F02                 db 0FFh
.eh_frame_hdr:0000000000006F03                 db 0FFh
.eh_frame_hdr:0000000000006F04                 db  48h ; H
.eh_frame_hdr:0000000000006F05                 db  0Bh
.eh_frame_hdr:0000000000006F06                 db    0
.eh_frame_hdr:0000000000006F07                 db    0
.eh_frame_hdr:0000000000006F08                 db  94h
.eh_frame_hdr:0000000000006F09                 db 0E3h
.eh_frame_hdr:0000000000006F0A                 db 0FFh
.eh_frame_hdr:0000000000006F0B                 db 0FFh
.eh_frame_hdr:0000000000006F0C                 db  74h ; t
.eh_frame_hdr:0000000000006F0D                 db  0Bh
.eh_frame_hdr:0000000000006F0E                 db    0
.eh_frame_hdr:0000000000006F0F                 db    0
.eh_frame_hdr:0000000000006F10                 db  14h
.eh_frame_hdr:0000000000006F11                 db 0E4h
.eh_frame_hdr:0000000000006F12                 db 0FFh
.eh_frame_hdr:0000000000006F13                 db 0FFh
.eh_frame_hdr:0000000000006F14                 db  94h
.eh_frame_hdr:0000000000006F15                 db  0Bh
.eh_frame_hdr:0000000000006F16                 db    0
.eh_frame_hdr:0000000000006F17                 db    0
.eh_frame_hdr:0000000000006F18                 db  34h ; 4
.eh_frame_hdr:0000000000006F19                 db 0E4h
.eh_frame_hdr:0000000000006F1A                 db 0FFh
.eh_frame_hdr:0000000000006F1B                 db 0FFh
.eh_frame_hdr:0000000000006F1C                 db 0B0h
.eh_frame_hdr:0000000000006F1D                 db  0Bh
.eh_frame_hdr:0000000000006F1E                 db    0
.eh_frame_hdr:0000000000006F1F                 db    0
.eh_frame_hdr:0000000000006F20                 db  64h ; d
.eh_frame_hdr:0000000000006F21                 db 0E4h
.eh_frame_hdr:0000000000006F22                 db 0FFh
.eh_frame_hdr:0000000000006F23                 db 0FFh
.eh_frame_hdr:0000000000006F24                 db 0C4h
.eh_frame_hdr:0000000000006F25                 db  0Bh
.eh_frame_hdr:0000000000006F26                 db    0
.eh_frame_hdr:0000000000006F27                 db    0
.eh_frame_hdr:0000000000006F28                 db  74h ; t
.eh_frame_hdr:0000000000006F29                 db 0E4h
.eh_frame_hdr:0000000000006F2A                 db 0FFh
.eh_frame_hdr:0000000000006F2B                 db 0FFh
.eh_frame_hdr:0000000000006F2C                 db 0D8h
.eh_frame_hdr:0000000000006F2D                 db  0Bh
.eh_frame_hdr:0000000000006F2E                 db    0
.eh_frame_hdr:0000000000006F2F                 db    0
.eh_frame_hdr:0000000000006F30                 db 0B4h
.eh_frame_hdr:0000000000006F31                 db 0E4h
.eh_frame_hdr:0000000000006F32                 db 0FFh
.eh_frame_hdr:0000000000006F33                 db 0FFh
.eh_frame_hdr:0000000000006F34                 db 0FCh
.eh_frame_hdr:0000000000006F35                 db  0Bh
.eh_frame_hdr:0000000000006F36                 db    0
.eh_frame_hdr:0000000000006F37                 db    0
.eh_frame_hdr:0000000000006F38                 db 0E4h
.eh_frame_hdr:0000000000006F39                 db 0E4h
.eh_frame_hdr:0000000000006F3A                 db 0FFh
.eh_frame_hdr:0000000000006F3B                 db 0FFh
.eh_frame_hdr:0000000000006F3C                 db  10h
.eh_frame_hdr:0000000000006F3D                 db  0Ch
.eh_frame_hdr:0000000000006F3E                 db    0
.eh_frame_hdr:0000000000006F3F                 db    0
.eh_frame_hdr:0000000000006F40                 db  74h ; t
.eh_frame_hdr:0000000000006F41                 db 0E5h
.eh_frame_hdr:0000000000006F42                 db 0FFh
.eh_frame_hdr:0000000000006F43                 db 0FFh
.eh_frame_hdr:0000000000006F44                 db  28h ; (
.eh_frame_hdr:0000000000006F45                 db  0Ch
.eh_frame_hdr:0000000000006F46                 db    0
.eh_frame_hdr:0000000000006F47                 db    0
.eh_frame_hdr:0000000000006F48                 db 0C4h
.eh_frame_hdr:0000000000006F49                 db 0E5h
.eh_frame_hdr:0000000000006F4A                 db 0FFh
.eh_frame_hdr:0000000000006F4B                 db 0FFh
.eh_frame_hdr:0000000000006F4C                 db  40h ; @
.eh_frame_hdr:0000000000006F4D                 db  0Ch
.eh_frame_hdr:0000000000006F4E                 db    0
.eh_frame_hdr:0000000000006F4F                 db    0
.eh_frame_hdr:0000000000006F50                 db 0E4h
.eh_frame_hdr:0000000000006F51                 db 0E5h
.eh_frame_hdr:0000000000006F52                 db 0FFh
.eh_frame_hdr:0000000000006F53                 db 0FFh
.eh_frame_hdr:0000000000006F54                 db  5Ch ; \
.eh_frame_hdr:0000000000006F55                 db  0Ch
.eh_frame_hdr:0000000000006F56                 db    0
.eh_frame_hdr:0000000000006F57                 db    0
.eh_frame_hdr:0000000000006F58                 db  14h
.eh_frame_hdr:0000000000006F59                 db 0E6h
.eh_frame_hdr:0000000000006F5A                 db 0FFh
.eh_frame_hdr:0000000000006F5B                 db 0FFh
.eh_frame_hdr:0000000000006F5C                 db  78h ; x
.eh_frame_hdr:0000000000006F5D                 db  0Ch
.eh_frame_hdr:0000000000006F5E                 db    0
.eh_frame_hdr:0000000000006F5F                 db    0
.eh_frame_hdr:0000000000006F60                 db  44h ; D
.eh_frame_hdr:0000000000006F61                 db 0E6h
.eh_frame_hdr:0000000000006F62                 db 0FFh
.eh_frame_hdr:0000000000006F63                 db 0FFh
.eh_frame_hdr:0000000000006F64                 db 0A0h
.eh_frame_hdr:0000000000006F65                 db  0Ch
.eh_frame_hdr:0000000000006F66                 db    0
.eh_frame_hdr:0000000000006F67                 db    0
.eh_frame_hdr:0000000000006F68                 db  64h ; d
.eh_frame_hdr:0000000000006F69                 db 0E6h
.eh_frame_hdr:0000000000006F6A                 db 0FFh
.eh_frame_hdr:0000000000006F6B                 db 0FFh
.eh_frame_hdr:0000000000006F6C                 db 0BCh
.eh_frame_hdr:0000000000006F6D                 db  0Ch
.eh_frame_hdr:0000000000006F6E                 db    0
.eh_frame_hdr:0000000000006F6F                 db    0
.eh_frame_hdr:0000000000006F70                 db 0A4h
.eh_frame_hdr:0000000000006F71                 db 0E6h
.eh_frame_hdr:0000000000006F72                 db 0FFh
.eh_frame_hdr:0000000000006F73                 db 0FFh
.eh_frame_hdr:0000000000006F74                 db 0D4h
.eh_frame_hdr:0000000000006F75                 db  0Ch
.eh_frame_hdr:0000000000006F76                 db    0
.eh_frame_hdr:0000000000006F77                 db    0
.eh_frame_hdr:0000000000006F78                 db 0A4h
.eh_frame_hdr:0000000000006F79                 db 0E7h
.eh_frame_hdr:0000000000006F7A                 db 0FFh
.eh_frame_hdr:0000000000006F7B                 db 0FFh
.eh_frame_hdr:0000000000006F7C                 db  20h
.eh_frame_hdr:0000000000006F7D                 db  0Dh
.eh_frame_hdr:0000000000006F7E                 db    0
.eh_frame_hdr:0000000000006F7F                 db    0
.eh_frame_hdr:0000000000006F80                 db 0D4h
.eh_frame_hdr:0000000000006F81                 db 0E7h
.eh_frame_hdr:0000000000006F82                 db 0FFh
.eh_frame_hdr:0000000000006F83                 db 0FFh
.eh_frame_hdr:0000000000006F84                 db  3Ch ; <
.eh_frame_hdr:0000000000006F85                 db  0Dh
.eh_frame_hdr:0000000000006F86                 db    0
.eh_frame_hdr:0000000000006F87                 db    0
.eh_frame_hdr:0000000000006F88                 db 0F4h
.eh_frame_hdr:0000000000006F89                 db 0EBh
.eh_frame_hdr:0000000000006F8A                 db 0FFh
.eh_frame_hdr:0000000000006F8B                 db 0FFh
.eh_frame_hdr:0000000000006F8C                 db  8Ch
.eh_frame_hdr:0000000000006F8D                 db  0Dh
.eh_frame_hdr:0000000000006F8E                 db    0
.eh_frame_hdr:0000000000006F8F                 db    0
.eh_frame_hdr:0000000000006F90                 db  74h ; t
.eh_frame_hdr:0000000000006F91                 db 0ECh
.eh_frame_hdr:0000000000006F92                 db 0FFh
.eh_frame_hdr:0000000000006F93                 db 0FFh
.eh_frame_hdr:0000000000006F94                 db 0C4h
.eh_frame_hdr:0000000000006F95                 db  0Dh
.eh_frame_hdr:0000000000006F96                 db    0
.eh_frame_hdr:0000000000006F97                 db    0
.eh_frame_hdr:0000000000006F98                 db 0B4h
.eh_frame_hdr:0000000000006F99                 db 0ECh
.eh_frame_hdr:0000000000006F9A                 db 0FFh
.eh_frame_hdr:0000000000006F9B                 db 0FFh
.eh_frame_hdr:0000000000006F9C                 db 0E4h
.eh_frame_hdr:0000000000006F9D                 db  0Dh
.eh_frame_hdr:0000000000006F9E                 db    0
.eh_frame_hdr:0000000000006F9F                 db    0
.eh_frame_hdr:0000000000006FA0                 db  14h
.eh_frame_hdr:0000000000006FA1                 db 0EDh
.eh_frame_hdr:0000000000006FA2                 db 0FFh
.eh_frame_hdr:0000000000006FA3                 db 0FFh
.eh_frame_hdr:0000000000006FA4                 db  14h
.eh_frame_hdr:0000000000006FA5                 db  0Eh
.eh_frame_hdr:0000000000006FA6                 db    0
.eh_frame_hdr:0000000000006FA7                 db    0
.eh_frame_hdr:0000000000006FA8                 db 0A4h
.eh_frame_hdr:0000000000006FA9                 db 0EDh
.eh_frame_hdr:0000000000006FAA                 db 0FFh
.eh_frame_hdr:0000000000006FAB                 db 0FFh
.eh_frame_hdr:0000000000006FAC                 db  54h ; T
.eh_frame_hdr:0000000000006FAD                 db  0Eh
.eh_frame_hdr:0000000000006FAE                 db    0
.eh_frame_hdr:0000000000006FAF                 db    0
.eh_frame_hdr:0000000000006FB0                 db  24h ; $
.eh_frame_hdr:0000000000006FB1                 db 0EEh
.eh_frame_hdr:0000000000006FB2                 db 0FFh
.eh_frame_hdr:0000000000006FB3                 db 0FFh
.eh_frame_hdr:0000000000006FB4                 db 0A4h
.eh_frame_hdr:0000000000006FB5                 db  0Eh
.eh_frame_hdr:0000000000006FB6                 db    0
.eh_frame_hdr:0000000000006FB7                 db    0
.eh_frame_hdr:0000000000006FB8                 db  84h
.eh_frame_hdr:0000000000006FB9                 db 0EEh
.eh_frame_hdr:0000000000006FBA                 db 0FFh
.eh_frame_hdr:0000000000006FBB                 db 0FFh
.eh_frame_hdr:0000000000006FBC                 db 0C4h
.eh_frame_hdr:0000000000006FBD                 db  0Eh
.eh_frame_hdr:0000000000006FBE                 db    0
.eh_frame_hdr:0000000000006FBF                 db    0
.eh_frame_hdr:0000000000006FC0                 db 0C4h
.eh_frame_hdr:0000000000006FC1                 db 0EEh
.eh_frame_hdr:0000000000006FC2                 db 0FFh
.eh_frame_hdr:0000000000006FC3                 db 0FFh
.eh_frame_hdr:0000000000006FC4                 db 0E4h
.eh_frame_hdr:0000000000006FC5                 db  0Eh
.eh_frame_hdr:0000000000006FC6                 db    0
.eh_frame_hdr:0000000000006FC7                 db    0
.eh_frame_hdr:0000000000006FC8                 db  34h ; 4
.eh_frame_hdr:0000000000006FC9                 db 0EFh
.eh_frame_hdr:0000000000006FCA                 db 0FFh
.eh_frame_hdr:0000000000006FCB                 db 0FFh
.eh_frame_hdr:0000000000006FCC                 db  2Ch ; ,
.eh_frame_hdr:0000000000006FCD                 db  0Fh
.eh_frame_hdr:0000000000006FCE                 db    0
.eh_frame_hdr:0000000000006FCF                 db    0
.eh_frame_hdr:0000000000006FD0                 db  44h ; D
.eh_frame_hdr:0000000000006FD1                 db 0EFh
.eh_frame_hdr:0000000000006FD2                 db 0FFh
.eh_frame_hdr:0000000000006FD3                 db 0FFh
.eh_frame_hdr:0000000000006FD4                 db  44h ; D
.eh_frame_hdr:0000000000006FD5                 db  0Fh
.eh_frame_hdr:0000000000006FD6                 db    0
.eh_frame_hdr:0000000000006FD7                 db    0
.eh_frame_hdr:0000000000006FD7 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000006FD7
.eh_frame:0000000000006FD8 ; ===========================================================================
.eh_frame:0000000000006FD8
.eh_frame:0000000000006FD8 ; Segment type: Pure data
.eh_frame:0000000000006FD8 ; Segment permissions: Read
.eh_frame:0000000000006FD8 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000006FD8                 assume cs:_eh_frame
.eh_frame:0000000000006FD8                 ;org 6FD8h
.eh_frame:0000000000006FD8                 db  14h
.eh_frame:0000000000006FD9                 db    0
.eh_frame:0000000000006FDA                 db    0
.eh_frame:0000000000006FDB                 db    0
.eh_frame:0000000000006FDC                 db    0
.eh_frame:0000000000006FDD                 db    0
.eh_frame:0000000000006FDE                 db    0
.eh_frame:0000000000006FDF                 db    0
.eh_frame:0000000000006FE0                 db    1
.eh_frame:0000000000006FE1                 db  7Ah ; z
.eh_frame:0000000000006FE2                 db  52h ; R
.eh_frame:0000000000006FE3                 db    0
.eh_frame:0000000000006FE4                 db    1
.eh_frame:0000000000006FE5                 db  78h ; x
.eh_frame:0000000000006FE6                 db  10h
.eh_frame:0000000000006FE7                 db    1
.eh_frame:0000000000006FE8                 db  1Bh
.eh_frame:0000000000006FE9                 db  0Ch
.eh_frame:0000000000006FEA                 db    7
.eh_frame:0000000000006FEB                 db    8
.eh_frame:0000000000006FEC                 db  90h
.eh_frame:0000000000006FED                 db    1
.eh_frame:0000000000006FEE                 db    7
.eh_frame:0000000000006FEF                 db  10h
.eh_frame:0000000000006FF0                 db  14h
.eh_frame:0000000000006FF1                 db    0
.eh_frame:0000000000006FF2                 db    0
.eh_frame:0000000000006FF3                 db    0
.eh_frame:0000000000006FF4                 db  1Ch
.eh_frame:0000000000006FF5                 db    0
.eh_frame:0000000000006FF6                 db    0
.eh_frame:0000000000006FF7                 db    0
.eh_frame:0000000000006FF8                 db    8
.eh_frame:0000000000006FF9                 db 0B0h
.eh_frame:0000000000006FFA                 db 0FFh
.eh_frame:0000000000006FFB                 db 0FFh
.eh_frame:0000000000006FFC                 db  2Bh ; +
.eh_frame:0000000000006FFD                 db    0
.eh_frame:0000000000006FFE                 db    0
.eh_frame:0000000000006FFF                 db    0
.eh_frame:0000000000007000                 db    0
.eh_frame:0000000000007001                 db    0
.eh_frame:0000000000007002                 db    0
.eh_frame:0000000000007003                 db    0
.eh_frame:0000000000007004                 db    0
.eh_frame:0000000000007005                 db    0
.eh_frame:0000000000007006                 db    0
.eh_frame:0000000000007007                 db    0
.eh_frame:0000000000007008                 db  14h
.eh_frame:0000000000007009                 db    0
.eh_frame:000000000000700A                 db    0
.eh_frame:000000000000700B                 db    0
.eh_frame:000000000000700C                 db    0
.eh_frame:000000000000700D                 db    0
.eh_frame:000000000000700E                 db    0
.eh_frame:000000000000700F                 db    0
.eh_frame:0000000000007010                 db    1
.eh_frame:0000000000007011                 db  7Ah ; z
.eh_frame:0000000000007012                 db  52h ; R
.eh_frame:0000000000007013                 db    0
.eh_frame:0000000000007014                 db    1
.eh_frame:0000000000007015                 db  78h ; x
.eh_frame:0000000000007016                 db  10h
.eh_frame:0000000000007017                 db    1
.eh_frame:0000000000007018                 db  1Bh
.eh_frame:0000000000007019                 db  0Ch
.eh_frame:000000000000701A                 db    7
.eh_frame:000000000000701B                 db    8
.eh_frame:000000000000701C                 db  90h
.eh_frame:000000000000701D                 db    1
.eh_frame:000000000000701E                 db    0
.eh_frame:000000000000701F                 db    0
.eh_frame:0000000000007020                 db  24h ; $
.eh_frame:0000000000007021                 db    0
.eh_frame:0000000000007022                 db    0
.eh_frame:0000000000007023                 db    0
.eh_frame:0000000000007024                 db  1Ch
.eh_frame:0000000000007025                 db    0
.eh_frame:0000000000007026                 db    0
.eh_frame:0000000000007027                 db    0
.eh_frame:0000000000007028                 db  98h
.eh_frame:0000000000007029                 db 0A4h
.eh_frame:000000000000702A                 db 0FFh
.eh_frame:000000000000702B                 db 0FFh
.eh_frame:000000000000702C                 db  30h ; 0
.eh_frame:000000000000702D                 db    3
.eh_frame:000000000000702E                 db    0
.eh_frame:000000000000702F                 db    0
.eh_frame:0000000000007030                 db    0
.eh_frame:0000000000007031                 db  0Eh
.eh_frame:0000000000007032                 db  10h
.eh_frame:0000000000007033                 db  46h ; F
.eh_frame:0000000000007034                 db  0Eh
.eh_frame:0000000000007035                 db  18h
.eh_frame:0000000000007036                 db  4Ah ; J
.eh_frame:0000000000007037                 db  0Fh
.eh_frame:0000000000007038                 db  0Bh
.eh_frame:0000000000007039                 db  77h ; w
.eh_frame:000000000000703A                 db    8
.eh_frame:000000000000703B                 db  80h
.eh_frame:000000000000703C                 db    0
.eh_frame:000000000000703D                 db  3Fh ; ?
.eh_frame:000000000000703E                 db  1Ah
.eh_frame:000000000000703F                 db  3Bh ; ;
.eh_frame:0000000000007040                 db  2Ah ; *
.eh_frame:0000000000007041                 db  33h ; 3
.eh_frame:0000000000007042                 db  24h ; $
.eh_frame:0000000000007043                 db  22h ; "
.eh_frame:0000000000007044                 db    0
.eh_frame:0000000000007045                 db    0
.eh_frame:0000000000007046                 db    0
.eh_frame:0000000000007047                 db    0
.eh_frame:0000000000007048                 db  14h
.eh_frame:0000000000007049                 db    0
.eh_frame:000000000000704A                 db    0
.eh_frame:000000000000704B                 db    0
.eh_frame:000000000000704C                 db  44h ; D
.eh_frame:000000000000704D                 db    0
.eh_frame:000000000000704E                 db    0
.eh_frame:000000000000704F                 db    0
.eh_frame:0000000000007050                 db 0A0h
.eh_frame:0000000000007051                 db 0A7h
.eh_frame:0000000000007052                 db 0FFh
.eh_frame:0000000000007053                 db 0FFh
.eh_frame:0000000000007054                 db    8
.eh_frame:0000000000007055                 db    0
.eh_frame:0000000000007056                 db    0
.eh_frame:0000000000007057                 db    0
.eh_frame:0000000000007058                 db    0
.eh_frame:0000000000007059                 db    0
.eh_frame:000000000000705A                 db    0
.eh_frame:000000000000705B                 db    0
.eh_frame:000000000000705C                 db    0
.eh_frame:000000000000705D                 db    0
.eh_frame:000000000000705E                 db    0
.eh_frame:000000000000705F                 db    0
.eh_frame:0000000000007060                 db  28h ; (
.eh_frame:0000000000007061                 db    0
.eh_frame:0000000000007062                 db    0
.eh_frame:0000000000007063                 db    0
.eh_frame:0000000000007064                 db  5Ch ; \
.eh_frame:0000000000007065                 db    0
.eh_frame:0000000000007066                 db    0
.eh_frame:0000000000007067                 db    0
.eh_frame:0000000000007068                 db 0A8h
.eh_frame:0000000000007069                 db 0B0h
.eh_frame:000000000000706A                 db 0FFh
.eh_frame:000000000000706B                 db 0FFh
.eh_frame:000000000000706C                 db 0DAh
.eh_frame:000000000000706D                 db    3
.eh_frame:000000000000706E                 db    0
.eh_frame:000000000000706F                 db    0
.eh_frame:0000000000007070                 db    0
.eh_frame:0000000000007071                 db  42h ; B
.eh_frame:0000000000007072                 db  0Eh
.eh_frame:0000000000007073                 db  10h
.eh_frame:0000000000007074                 db  8Dh
.eh_frame:0000000000007075                 db    2
.eh_frame:0000000000007076                 db  42h ; B
.eh_frame:0000000000007077                 db  0Eh
.eh_frame:0000000000007078                 db  18h
.eh_frame:0000000000007079                 db  8Ch
.eh_frame:000000000000707A                 db    3
.eh_frame:000000000000707B                 db  46h ; F
.eh_frame:000000000000707C                 db  0Eh
.eh_frame:000000000000707D                 db  20h
.eh_frame:000000000000707E                 db  86h
.eh_frame:000000000000707F                 db    4
.eh_frame:0000000000007080                 db  41h ; A
.eh_frame:0000000000007081                 db  0Eh
.eh_frame:0000000000007082                 db  28h ; (
.eh_frame:0000000000007083                 db  83h
.eh_frame:0000000000007084                 db    5
.eh_frame:0000000000007085                 db  49h ; I
.eh_frame:0000000000007086                 db  0Eh
.eh_frame:0000000000007087                 db 0B0h
.eh_frame:0000000000007088                 db    1
.eh_frame:0000000000007089                 db    0
.eh_frame:000000000000708A                 db    0
.eh_frame:000000000000708B                 db    0
.eh_frame:000000000000708C                 db  50h ; P
.eh_frame:000000000000708D                 db    0
.eh_frame:000000000000708E                 db    0
.eh_frame:000000000000708F                 db    0
.eh_frame:0000000000007090                 db  88h
.eh_frame:0000000000007091                 db    0
.eh_frame:0000000000007092                 db    0
.eh_frame:0000000000007093                 db    0
.eh_frame:0000000000007094                 db  6Ch ; l
.eh_frame:0000000000007095                 db 0A7h
.eh_frame:0000000000007096                 db 0FFh
.eh_frame:0000000000007097                 db 0FFh
.eh_frame:0000000000007098                 db 0F9h
.eh_frame:0000000000007099                 db    7
.eh_frame:000000000000709A                 db    0
.eh_frame:000000000000709B                 db    0
.eh_frame:000000000000709C                 db    0
.eh_frame:000000000000709D                 db  42h ; B
.eh_frame:000000000000709E                 db  0Eh
.eh_frame:000000000000709F                 db  10h
.eh_frame:00000000000070A0                 db  8Fh
.eh_frame:00000000000070A1                 db    2
.eh_frame:00000000000070A2                 db  42h ; B
.eh_frame:00000000000070A3                 db  0Eh
.eh_frame:00000000000070A4                 db  18h
.eh_frame:00000000000070A5                 db  8Eh
.eh_frame:00000000000070A6                 db    3
.eh_frame:00000000000070A7                 db  42h ; B
.eh_frame:00000000000070A8                 db  0Eh
.eh_frame:00000000000070A9                 db  20h
.eh_frame:00000000000070AA                 db  8Dh
.eh_frame:00000000000070AB                 db    4
.eh_frame:00000000000070AC                 db  42h ; B
.eh_frame:00000000000070AD                 db  0Eh
.eh_frame:00000000000070AE                 db  28h ; (
.eh_frame:00000000000070AF                 db  8Ch
.eh_frame:00000000000070B0                 db    5
.eh_frame:00000000000070B1                 db  44h ; D
.eh_frame:00000000000070B2                 db  0Eh
.eh_frame:00000000000070B3                 db  30h ; 0
.eh_frame:00000000000070B4                 db  86h
.eh_frame:00000000000070B5                 db    6
.eh_frame:00000000000070B6                 db  41h ; A
.eh_frame:00000000000070B7                 db  0Eh
.eh_frame:00000000000070B8                 db  38h ; 8
.eh_frame:00000000000070B9                 db  83h
.eh_frame:00000000000070BA                 db    7
.eh_frame:00000000000070BB                 db  4Eh ; N
.eh_frame:00000000000070BC                 db  0Eh
.eh_frame:00000000000070BD                 db 0B0h
.eh_frame:00000000000070BE                 db    1
.eh_frame:00000000000070BF                 db    3
.eh_frame:00000000000070C0                 db 0D2h
.eh_frame:00000000000070C1                 db    3
.eh_frame:00000000000070C2                 db  0Ah
.eh_frame:00000000000070C3                 db  0Eh
.eh_frame:00000000000070C4                 db  38h ; 8
.eh_frame:00000000000070C5                 db  41h ; A
.eh_frame:00000000000070C6                 db  0Eh
.eh_frame:00000000000070C7                 db  30h ; 0
.eh_frame:00000000000070C8                 db  41h ; A
.eh_frame:00000000000070C9                 db  0Eh
.eh_frame:00000000000070CA                 db  28h ; (
.eh_frame:00000000000070CB                 db  42h ; B
.eh_frame:00000000000070CC                 db  0Eh
.eh_frame:00000000000070CD                 db  20h
.eh_frame:00000000000070CE                 db  42h ; B
.eh_frame:00000000000070CF                 db  0Eh
.eh_frame:00000000000070D0                 db  18h
.eh_frame:00000000000070D1                 db  42h ; B
.eh_frame:00000000000070D2                 db  0Eh
.eh_frame:00000000000070D3                 db  10h
.eh_frame:00000000000070D4                 db  42h ; B
.eh_frame:00000000000070D5                 db  0Eh
.eh_frame:00000000000070D6                 db    8
.eh_frame:00000000000070D7                 db  41h ; A
.eh_frame:00000000000070D8                 db  0Bh
.eh_frame:00000000000070D9                 db    0
.eh_frame:00000000000070DA                 db    0
.eh_frame:00000000000070DB                 db    0
.eh_frame:00000000000070DC                 db    0
.eh_frame:00000000000070DD                 db    0
.eh_frame:00000000000070DE                 db    0
.eh_frame:00000000000070DF                 db    0
.eh_frame:00000000000070E0                 db  10h
.eh_frame:00000000000070E1                 db    0
.eh_frame:00000000000070E2                 db    0
.eh_frame:00000000000070E3                 db    0
.eh_frame:00000000000070E4                 db 0DCh
.eh_frame:00000000000070E5                 db    0
.eh_frame:00000000000070E6                 db    0
.eh_frame:00000000000070E7                 db    0
.eh_frame:00000000000070E8                 db    8
.eh_frame:00000000000070E9                 db 0B4h
.eh_frame:00000000000070EA                 db 0FFh
.eh_frame:00000000000070EB                 db 0FFh
.eh_frame:00000000000070EC                 db 0AAh
.eh_frame:00000000000070ED                 db    1
.eh_frame:00000000000070EE                 db    0
.eh_frame:00000000000070EF                 db    0
.eh_frame:00000000000070F0                 db    0
.eh_frame:00000000000070F1                 db    0
.eh_frame:00000000000070F2                 db    0
.eh_frame:00000000000070F3                 db    0
.eh_frame:00000000000070F4                 db  10h
.eh_frame:00000000000070F5                 db    0
.eh_frame:00000000000070F6                 db    0
.eh_frame:00000000000070F7                 db    0
.eh_frame:00000000000070F8                 db 0F0h
.eh_frame:00000000000070F9                 db    0
.eh_frame:00000000000070FA                 db    0
.eh_frame:00000000000070FB                 db    0
.eh_frame:00000000000070FC                 db 0A4h
.eh_frame:00000000000070FD                 db 0B5h
.eh_frame:00000000000070FE                 db 0FFh
.eh_frame:00000000000070FF                 db 0FFh
.eh_frame:0000000000007100                 db  19h
.eh_frame:0000000000007101                 db    2
.eh_frame:0000000000007102                 db    0
.eh_frame:0000000000007103                 db    0
.eh_frame:0000000000007104                 db    0
.eh_frame:0000000000007105                 db    0
.eh_frame:0000000000007106                 db    0
.eh_frame:0000000000007107                 db    0
.eh_frame:0000000000007108                 db  48h ; H
.eh_frame:0000000000007109                 db    0
.eh_frame:000000000000710A                 db    0
.eh_frame:000000000000710B                 db    0
.eh_frame:000000000000710C                 db    4
.eh_frame:000000000000710D                 db    1
.eh_frame:000000000000710E                 db    0
.eh_frame:000000000000710F                 db    0
.eh_frame:0000000000007110                 db 0B0h
.eh_frame:0000000000007111                 db 0B7h
.eh_frame:0000000000007112                 db 0FFh
.eh_frame:0000000000007113                 db 0FFh
.eh_frame:0000000000007114                 db  87h
.eh_frame:0000000000007115                 db    0
.eh_frame:0000000000007116                 db    0
.eh_frame:0000000000007117                 db    0
.eh_frame:0000000000007118                 db    0
.eh_frame:0000000000007119                 db  42h ; B
.eh_frame:000000000000711A                 db  0Eh
.eh_frame:000000000000711B                 db  10h
.eh_frame:000000000000711C                 db  8Eh
.eh_frame:000000000000711D                 db    2
.eh_frame:000000000000711E                 db  42h ; B
.eh_frame:000000000000711F                 db  0Eh
.eh_frame:0000000000007120                 db  18h
.eh_frame:0000000000007121                 db  8Dh
.eh_frame:0000000000007122                 db    3
.eh_frame:0000000000007123                 db  49h ; I
.eh_frame:0000000000007124                 db  0Eh
.eh_frame:0000000000007125                 db  20h
.eh_frame:0000000000007126                 db  8Ch
.eh_frame:0000000000007127                 db    4
.eh_frame:0000000000007128                 db  41h ; A
.eh_frame:0000000000007129                 db  0Eh
.eh_frame:000000000000712A                 db  28h ; (
.eh_frame:000000000000712B                 db  86h
.eh_frame:000000000000712C                 db    5
.eh_frame:000000000000712D                 db  41h ; A
.eh_frame:000000000000712E                 db  0Eh
.eh_frame:000000000000712F                 db  30h ; 0
.eh_frame:0000000000007130                 db  83h
.eh_frame:0000000000007131                 db    6
.eh_frame:0000000000007132                 db  70h ; p
.eh_frame:0000000000007133                 db  0Ah
.eh_frame:0000000000007134                 db  0Eh
.eh_frame:0000000000007135                 db  28h ; (
.eh_frame:0000000000007136                 db  44h ; D
.eh_frame:0000000000007137                 db  0Eh
.eh_frame:0000000000007138                 db  20h
.eh_frame:0000000000007139                 db  42h ; B
.eh_frame:000000000000713A                 db  0Eh
.eh_frame:000000000000713B                 db  18h
.eh_frame:000000000000713C                 db  42h ; B
.eh_frame:000000000000713D                 db  0Eh
.eh_frame:000000000000713E                 db  10h
.eh_frame:000000000000713F                 db  42h ; B
.eh_frame:0000000000007140                 db  0Eh
.eh_frame:0000000000007141                 db    8
.eh_frame:0000000000007142                 db  47h ; G
.eh_frame:0000000000007143                 db  0Bh
.eh_frame:0000000000007144                 db  6Ch ; l
.eh_frame:0000000000007145                 db  0Eh
.eh_frame:0000000000007146                 db  28h ; (
.eh_frame:0000000000007147                 db  44h ; D
.eh_frame:0000000000007148                 db  0Eh
.eh_frame:0000000000007149                 db  20h
.eh_frame:000000000000714A                 db  42h ; B
.eh_frame:000000000000714B                 db  0Eh
.eh_frame:000000000000714C                 db  18h
.eh_frame:000000000000714D                 db  42h ; B
.eh_frame:000000000000714E                 db  0Eh
.eh_frame:000000000000714F                 db  10h
.eh_frame:0000000000007150                 db  42h ; B
.eh_frame:0000000000007151                 db  0Eh
.eh_frame:0000000000007152                 db    8
.eh_frame:0000000000007153                 db    0
.eh_frame:0000000000007154                 db  10h
.eh_frame:0000000000007155                 db    0
.eh_frame:0000000000007156                 db    0
.eh_frame:0000000000007157                 db    0
.eh_frame:0000000000007158                 db  50h ; P
.eh_frame:0000000000007159                 db    1
.eh_frame:000000000000715A                 db    0
.eh_frame:000000000000715B                 db    0
.eh_frame:000000000000715C                 db 0F4h
.eh_frame:000000000000715D                 db 0B7h
.eh_frame:000000000000715E                 db 0FFh
.eh_frame:000000000000715F                 db 0FFh
.eh_frame:0000000000007160                 db  15h
.eh_frame:0000000000007161                 db    0
.eh_frame:0000000000007162                 db    0
.eh_frame:0000000000007163                 db    0
.eh_frame:0000000000007164                 db    0
.eh_frame:0000000000007165                 db    0
.eh_frame:0000000000007166                 db    0
.eh_frame:0000000000007167                 db    0
.eh_frame:0000000000007168                 db  10h
.eh_frame:0000000000007169                 db    0
.eh_frame:000000000000716A                 db    0
.eh_frame:000000000000716B                 db    0
.eh_frame:000000000000716C                 db  64h ; d
.eh_frame:000000000000716D                 db    1
.eh_frame:000000000000716E                 db    0
.eh_frame:000000000000716F                 db    0
.eh_frame:0000000000007170                 db    0
.eh_frame:0000000000007171                 db 0B8h
.eh_frame:0000000000007172                 db 0FFh
.eh_frame:0000000000007173                 db 0FFh
.eh_frame:0000000000007174                 db    7
.eh_frame:0000000000007175                 db    0
.eh_frame:0000000000007176                 db    0
.eh_frame:0000000000007177                 db    0
.eh_frame:0000000000007178                 db    0
.eh_frame:0000000000007179                 db    0
.eh_frame:000000000000717A                 db    0
.eh_frame:000000000000717B                 db    0
.eh_frame:000000000000717C                 db  48h ; H
.eh_frame:000000000000717D                 db    0
.eh_frame:000000000000717E                 db    0
.eh_frame:000000000000717F                 db    0
.eh_frame:0000000000007180                 db  78h ; x
.eh_frame:0000000000007181                 db    1
.eh_frame:0000000000007182                 db    0
.eh_frame:0000000000007183                 db    0
.eh_frame:0000000000007184                 db 0FCh
.eh_frame:0000000000007185                 db 0B7h
.eh_frame:0000000000007186                 db 0FFh
.eh_frame:0000000000007187                 db 0FFh
.eh_frame:0000000000007188                 db 0AEh
.eh_frame:0000000000007189                 db    2
.eh_frame:000000000000718A                 db    0
.eh_frame:000000000000718B                 db    0
.eh_frame:000000000000718C                 db    0
.eh_frame:000000000000718D                 db  42h ; B
.eh_frame:000000000000718E                 db  0Eh
.eh_frame:000000000000718F                 db  10h
.eh_frame:0000000000007190                 db  8Fh
.eh_frame:0000000000007191                 db    2
.eh_frame:0000000000007192                 db  42h ; B
.eh_frame:0000000000007193                 db  0Eh
.eh_frame:0000000000007194                 db  18h
.eh_frame:0000000000007195                 db  8Eh
.eh_frame:0000000000007196                 db    3
.eh_frame:0000000000007197                 db  45h ; E
.eh_frame:0000000000007198                 db  0Eh
.eh_frame:0000000000007199                 db  20h
.eh_frame:000000000000719A                 db  8Dh
.eh_frame:000000000000719B                 db    4
.eh_frame:000000000000719C                 db  42h ; B
.eh_frame:000000000000719D                 db  0Eh
.eh_frame:000000000000719E                 db  28h ; (
.eh_frame:000000000000719F                 db  8Ch
.eh_frame:00000000000071A0                 db    5
.eh_frame:00000000000071A1                 db  44h ; D
.eh_frame:00000000000071A2                 db  0Eh
.eh_frame:00000000000071A3                 db  30h ; 0
.eh_frame:00000000000071A4                 db  86h
.eh_frame:00000000000071A5                 db    6
.eh_frame:00000000000071A6                 db  41h ; A
.eh_frame:00000000000071A7                 db  0Eh
.eh_frame:00000000000071A8                 db  38h ; 8
.eh_frame:00000000000071A9                 db  83h
.eh_frame:00000000000071AA                 db    7
.eh_frame:00000000000071AB                 db  47h ; G
.eh_frame:00000000000071AC                 db  0Eh
.eh_frame:00000000000071AD                 db  70h ; p
.eh_frame:00000000000071AE                 db    3
.eh_frame:00000000000071AF                 db  19h
.eh_frame:00000000000071B0                 db    1
.eh_frame:00000000000071B1                 db  0Ah
.eh_frame:00000000000071B2                 db  0Eh
.eh_frame:00000000000071B3                 db  38h ; 8
.eh_frame:00000000000071B4                 db  41h ; A
.eh_frame:00000000000071B5                 db  0Eh
.eh_frame:00000000000071B6                 db  30h ; 0
.eh_frame:00000000000071B7                 db  41h ; A
.eh_frame:00000000000071B8                 db  0Eh
.eh_frame:00000000000071B9                 db  28h ; (
.eh_frame:00000000000071BA                 db  42h ; B
.eh_frame:00000000000071BB                 db  0Eh
.eh_frame:00000000000071BC                 db  20h
.eh_frame:00000000000071BD                 db  42h ; B
.eh_frame:00000000000071BE                 db  0Eh
.eh_frame:00000000000071BF                 db  18h
.eh_frame:00000000000071C0                 db  42h ; B
.eh_frame:00000000000071C1                 db  0Eh
.eh_frame:00000000000071C2                 db  10h
.eh_frame:00000000000071C3                 db  42h ; B
.eh_frame:00000000000071C4                 db  0Eh
.eh_frame:00000000000071C5                 db    8
.eh_frame:00000000000071C6                 db  46h ; F
.eh_frame:00000000000071C7                 db  0Bh
.eh_frame:00000000000071C8                 db  44h ; D
.eh_frame:00000000000071C9                 db    0
.eh_frame:00000000000071CA                 db    0
.eh_frame:00000000000071CB                 db    0
.eh_frame:00000000000071CC                 db 0C4h
.eh_frame:00000000000071CD                 db    1
.eh_frame:00000000000071CE                 db    0
.eh_frame:00000000000071CF                 db    0
.eh_frame:00000000000071D0                 db  60h ; `
.eh_frame:00000000000071D1                 db 0BAh
.eh_frame:00000000000071D2                 db 0FFh
.eh_frame:00000000000071D3                 db 0FFh
.eh_frame:00000000000071D4                 db 0BFh
.eh_frame:00000000000071D5                 db    0
.eh_frame:00000000000071D6                 db    0
.eh_frame:00000000000071D7                 db    0
.eh_frame:00000000000071D8                 db    0
.eh_frame:00000000000071D9                 db  42h ; B
.eh_frame:00000000000071DA                 db  0Eh
.eh_frame:00000000000071DB                 db  10h
.eh_frame:00000000000071DC                 db  8Eh
.eh_frame:00000000000071DD                 db    2
.eh_frame:00000000000071DE                 db  42h ; B
.eh_frame:00000000000071DF                 db  0Eh
.eh_frame:00000000000071E0                 db  18h
.eh_frame:00000000000071E1                 db  8Dh
.eh_frame:00000000000071E2                 db    3
.eh_frame:00000000000071E3                 db  45h ; E
.eh_frame:00000000000071E4                 db  0Eh
.eh_frame:00000000000071E5                 db  20h
.eh_frame:00000000000071E6                 db  8Ch
.eh_frame:00000000000071E7                 db    4
.eh_frame:00000000000071E8                 db  41h ; A
.eh_frame:00000000000071E9                 db  0Eh
.eh_frame:00000000000071EA                 db  28h ; (
.eh_frame:00000000000071EB                 db  86h
.eh_frame:00000000000071EC                 db    5
.eh_frame:00000000000071ED                 db  44h ; D
.eh_frame:00000000000071EE                 db  0Eh
.eh_frame:00000000000071EF                 db  30h ; 0
.eh_frame:00000000000071F0                 db  83h
.eh_frame:00000000000071F1                 db    6
.eh_frame:00000000000071F2                 db  4Dh ; M
.eh_frame:00000000000071F3                 db  0Eh
.eh_frame:00000000000071F4                 db  50h ; P
.eh_frame:00000000000071F5                 db    2
.eh_frame:00000000000071F6                 db  76h ; v
.eh_frame:00000000000071F7                 db  0Ah
.eh_frame:00000000000071F8                 db  0Eh
.eh_frame:00000000000071F9                 db  30h ; 0
.eh_frame:00000000000071FA                 db  41h ; A
.eh_frame:00000000000071FB                 db  0Eh
.eh_frame:00000000000071FC                 db  28h ; (
.eh_frame:00000000000071FD                 db  41h ; A
.eh_frame:00000000000071FE                 db  0Eh
.eh_frame:00000000000071FF                 db  20h
.eh_frame:0000000000007200                 db  42h ; B
.eh_frame:0000000000007201                 db  0Eh
.eh_frame:0000000000007202                 db  18h
.eh_frame:0000000000007203                 db  42h ; B
.eh_frame:0000000000007204                 db  0Eh
.eh_frame:0000000000007205                 db  10h
.eh_frame:0000000000007206                 db  42h ; B
.eh_frame:0000000000007207                 db  0Eh
.eh_frame:0000000000007208                 db    8
.eh_frame:0000000000007209                 db  47h ; G
.eh_frame:000000000000720A                 db  0Bh
.eh_frame:000000000000720B                 db    0
.eh_frame:000000000000720C                 db    0
.eh_frame:000000000000720D                 db    0
.eh_frame:000000000000720E                 db    0
.eh_frame:000000000000720F                 db    0
.eh_frame:0000000000007210                 db  10h
.eh_frame:0000000000007211                 db    0
.eh_frame:0000000000007212                 db    0
.eh_frame:0000000000007213                 db    0
.eh_frame:0000000000007214                 db  0Ch
.eh_frame:0000000000007215                 db    2
.eh_frame:0000000000007216                 db    0
.eh_frame:0000000000007217                 db    0
.eh_frame:0000000000007218                 db 0D8h
.eh_frame:0000000000007219                 db 0BAh
.eh_frame:000000000000721A                 db 0FFh
.eh_frame:000000000000721B                 db 0FFh
.eh_frame:000000000000721C                 db    8
.eh_frame:000000000000721D                 db    0
.eh_frame:000000000000721E                 db    0
.eh_frame:000000000000721F                 db    0
.eh_frame:0000000000007220                 db    0
.eh_frame:0000000000007221                 db    0
.eh_frame:0000000000007222                 db    0
.eh_frame:0000000000007223                 db    0
.eh_frame:0000000000007224                 db  10h
.eh_frame:0000000000007225                 db    0
.eh_frame:0000000000007226                 db    0
.eh_frame:0000000000007227                 db    0
.eh_frame:0000000000007228                 db  20h
.eh_frame:0000000000007229                 db    2
.eh_frame:000000000000722A                 db    0
.eh_frame:000000000000722B                 db    0
.eh_frame:000000000000722C                 db 0D4h
.eh_frame:000000000000722D                 db 0BAh
.eh_frame:000000000000722E                 db 0FFh
.eh_frame:000000000000722F                 db 0FFh
.eh_frame:0000000000007230                 db    8
.eh_frame:0000000000007231                 db    0
.eh_frame:0000000000007232                 db    0
.eh_frame:0000000000007233                 db    0
.eh_frame:0000000000007234                 db    0
.eh_frame:0000000000007235                 db    0
.eh_frame:0000000000007236                 db    0
.eh_frame:0000000000007237                 db    0
.eh_frame:0000000000007238                 db  2Ch ; ,
.eh_frame:0000000000007239                 db    0
.eh_frame:000000000000723A                 db    0
.eh_frame:000000000000723B                 db    0
.eh_frame:000000000000723C                 db  34h ; 4
.eh_frame:000000000000723D                 db    2
.eh_frame:000000000000723E                 db    0
.eh_frame:000000000000723F                 db    0
.eh_frame:0000000000007240                 db 0D0h
.eh_frame:0000000000007241                 db 0BAh
.eh_frame:0000000000007242                 db 0FFh
.eh_frame:0000000000007243                 db 0FFh
.eh_frame:0000000000007244                 db 0A4h
.eh_frame:0000000000007245                 db    0
.eh_frame:0000000000007246                 db    0
.eh_frame:0000000000007247                 db    0
.eh_frame:0000000000007248                 db    0
.eh_frame:0000000000007249                 db  41h ; A
.eh_frame:000000000000724A                 db  0Eh
.eh_frame:000000000000724B                 db  10h
.eh_frame:000000000000724C                 db  86h
.eh_frame:000000000000724D                 db    2
.eh_frame:000000000000724E                 db  41h ; A
.eh_frame:000000000000724F                 db  0Eh
.eh_frame:0000000000007250                 db  18h
.eh_frame:0000000000007251                 db  83h
.eh_frame:0000000000007252                 db    3
.eh_frame:0000000000007253                 db  44h ; D
.eh_frame:0000000000007254                 db  0Eh
.eh_frame:0000000000007255                 db  20h
.eh_frame:0000000000007256                 db  7Ah ; z
.eh_frame:0000000000007257                 db  0Ah
.eh_frame:0000000000007258                 db  0Eh
.eh_frame:0000000000007259                 db  18h
.eh_frame:000000000000725A                 db  41h ; A
.eh_frame:000000000000725B                 db  0Eh
.eh_frame:000000000000725C                 db  10h
.eh_frame:000000000000725D                 db  41h ; A
.eh_frame:000000000000725E                 db  0Eh
.eh_frame:000000000000725F                 db    8
.eh_frame:0000000000007260                 db  41h ; A
.eh_frame:0000000000007261                 db  0Bh
.eh_frame:0000000000007262                 db    0
.eh_frame:0000000000007263                 db    0
.eh_frame:0000000000007264                 db    0
.eh_frame:0000000000007265                 db    0
.eh_frame:0000000000007266                 db    0
.eh_frame:0000000000007267                 db    0
.eh_frame:0000000000007268                 db  10h
.eh_frame:0000000000007269                 db    0
.eh_frame:000000000000726A                 db    0
.eh_frame:000000000000726B                 db    0
.eh_frame:000000000000726C                 db  64h ; d
.eh_frame:000000000000726D                 db    2
.eh_frame:000000000000726E                 db    0
.eh_frame:000000000000726F                 db    0
.eh_frame:0000000000007270                 db  50h ; P
.eh_frame:0000000000007271                 db 0BBh
.eh_frame:0000000000007272                 db 0FFh
.eh_frame:0000000000007273                 db 0FFh
.eh_frame:0000000000007274                 db    5
.eh_frame:0000000000007275                 db    0
.eh_frame:0000000000007276                 db    0
.eh_frame:0000000000007277                 db    0
.eh_frame:0000000000007278                 db    0
.eh_frame:0000000000007279                 db    0
.eh_frame:000000000000727A                 db    0
.eh_frame:000000000000727B                 db    0
.eh_frame:000000000000727C                 db  18h
.eh_frame:000000000000727D                 db    0
.eh_frame:000000000000727E                 db    0
.eh_frame:000000000000727F                 db    0
.eh_frame:0000000000007280                 db  78h ; x
.eh_frame:0000000000007281                 db    2
.eh_frame:0000000000007282                 db    0
.eh_frame:0000000000007283                 db    0
.eh_frame:0000000000007284                 db  4Ch ; L
.eh_frame:0000000000007285                 db 0BBh
.eh_frame:0000000000007286                 db 0FFh
.eh_frame:0000000000007287                 db 0FFh
.eh_frame:0000000000007288                 db  22h ; "
.eh_frame:0000000000007289                 db    0
.eh_frame:000000000000728A                 db    0
.eh_frame:000000000000728B                 db    0
.eh_frame:000000000000728C                 db    0
.eh_frame:000000000000728D                 db  46h ; F
.eh_frame:000000000000728E                 db  0Eh
.eh_frame:000000000000728F                 db  10h
.eh_frame:0000000000007290                 db  83h
.eh_frame:0000000000007291                 db    2
.eh_frame:0000000000007292                 db  4Eh ; N
.eh_frame:0000000000007293                 db 0C3h
.eh_frame:0000000000007294                 db  0Eh
.eh_frame:0000000000007295                 db    8
.eh_frame:0000000000007296                 db    0
.eh_frame:0000000000007297                 db    0
.eh_frame:0000000000007298                 db  1Ch
.eh_frame:0000000000007299                 db    0
.eh_frame:000000000000729A                 db    0
.eh_frame:000000000000729B                 db    0
.eh_frame:000000000000729C                 db  94h
.eh_frame:000000000000729D                 db    2
.eh_frame:000000000000729E                 db    0
.eh_frame:000000000000729F                 db    0
.eh_frame:00000000000072A0                 db  60h ; `
.eh_frame:00000000000072A1                 db 0BBh
.eh_frame:00000000000072A2                 db 0FFh
.eh_frame:00000000000072A3                 db 0FFh
.eh_frame:00000000000072A4                 db  9Fh
.eh_frame:00000000000072A5                 db    0
.eh_frame:00000000000072A6                 db    0
.eh_frame:00000000000072A7                 db    0
.eh_frame:00000000000072A8                 db    0
.eh_frame:00000000000072A9                 db  44h ; D
.eh_frame:00000000000072AA                 db  0Eh
.eh_frame:00000000000072AB                 db  10h
.eh_frame:00000000000072AC                 db  83h
.eh_frame:00000000000072AD                 db    2
.eh_frame:00000000000072AE                 db    2
.eh_frame:00000000000072AF                 db  78h ; x
.eh_frame:00000000000072B0                 db  0Ah
.eh_frame:00000000000072B1                 db  0Eh
.eh_frame:00000000000072B2                 db    8
.eh_frame:00000000000072B3                 db  41h ; A
.eh_frame:00000000000072B4                 db  0Bh
.eh_frame:00000000000072B5                 db    0
.eh_frame:00000000000072B6                 db    0
.eh_frame:00000000000072B7                 db    0
.eh_frame:00000000000072B8                 db  40h ; @
.eh_frame:00000000000072B9                 db    0
.eh_frame:00000000000072BA                 db    0
.eh_frame:00000000000072BB                 db    0
.eh_frame:00000000000072BC                 db 0B4h
.eh_frame:00000000000072BD                 db    2
.eh_frame:00000000000072BE                 db    0
.eh_frame:00000000000072BF                 db    0
.eh_frame:00000000000072C0                 db 0E0h
.eh_frame:00000000000072C1                 db 0BBh
.eh_frame:00000000000072C2                 db 0FFh
.eh_frame:00000000000072C3                 db 0FFh
.eh_frame:00000000000072C4                 db 0E7h
.eh_frame:00000000000072C5                 db    0
.eh_frame:00000000000072C6                 db    0
.eh_frame:00000000000072C7                 db    0
.eh_frame:00000000000072C8                 db    0
.eh_frame:00000000000072C9                 db  41h ; A
.eh_frame:00000000000072CA                 db  0Eh
.eh_frame:00000000000072CB                 db  10h
.eh_frame:00000000000072CC                 db  86h
.eh_frame:00000000000072CD                 db    2
.eh_frame:00000000000072CE                 db  41h ; A
.eh_frame:00000000000072CF                 db  0Eh
.eh_frame:00000000000072D0                 db  18h
.eh_frame:00000000000072D1                 db  83h
.eh_frame:00000000000072D2                 db    3
.eh_frame:00000000000072D3                 db  49h ; I
.eh_frame:00000000000072D4                 db  0Eh
.eh_frame:00000000000072D5                 db  20h
.eh_frame:00000000000072D6                 db  6Eh ; n
.eh_frame:00000000000072D7                 db  0Ah
.eh_frame:00000000000072D8                 db  0Eh
.eh_frame:00000000000072D9                 db  18h
.eh_frame:00000000000072DA                 db  41h ; A
.eh_frame:00000000000072DB                 db  0Eh
.eh_frame:00000000000072DC                 db  10h
.eh_frame:00000000000072DD                 db  41h ; A
.eh_frame:00000000000072DE                 db  0Eh
.eh_frame:00000000000072DF                 db    8
.eh_frame:00000000000072E0                 db  45h ; E
.eh_frame:00000000000072E1                 db  0Bh
.eh_frame:00000000000072E2                 db    2
.eh_frame:00000000000072E3                 db  4Ah ; J
.eh_frame:00000000000072E4                 db  0Ah
.eh_frame:00000000000072E5                 db  0Eh
.eh_frame:00000000000072E6                 db  18h
.eh_frame:00000000000072E7                 db  41h ; A
.eh_frame:00000000000072E8                 db  0Eh
.eh_frame:00000000000072E9                 db  10h
.eh_frame:00000000000072EA                 db  41h ; A
.eh_frame:00000000000072EB                 db  0Eh
.eh_frame:00000000000072EC                 db    8
.eh_frame:00000000000072ED                 db  44h ; D
.eh_frame:00000000000072EE                 db  0Bh
.eh_frame:00000000000072EF                 db    2
.eh_frame:00000000000072F0                 db  54h ; T
.eh_frame:00000000000072F1                 db  0Eh
.eh_frame:00000000000072F2                 db  18h
.eh_frame:00000000000072F3                 db  41h ; A
.eh_frame:00000000000072F4                 db  0Eh
.eh_frame:00000000000072F5                 db  10h
.eh_frame:00000000000072F6                 db  41h ; A
.eh_frame:00000000000072F7                 db  0Eh
.eh_frame:00000000000072F8                 db    8
.eh_frame:00000000000072F9                 db    0
.eh_frame:00000000000072FA                 db    0
.eh_frame:00000000000072FB                 db    0
.eh_frame:00000000000072FC                 db  74h ; t
.eh_frame:00000000000072FD                 db    0
.eh_frame:00000000000072FE                 db    0
.eh_frame:00000000000072FF                 db    0
.eh_frame:0000000000007300                 db 0F8h
.eh_frame:0000000000007301                 db    2
.eh_frame:0000000000007302                 db    0
.eh_frame:0000000000007303                 db    0
.eh_frame:0000000000007304                 db  8Ch
.eh_frame:0000000000007305                 db 0BCh
.eh_frame:0000000000007306                 db 0FFh
.eh_frame:0000000000007307                 db 0FFh
.eh_frame:0000000000007308                 db  34h ; 4
.eh_frame:0000000000007309                 db  12h
.eh_frame:000000000000730A                 db    0
.eh_frame:000000000000730B                 db    0
.eh_frame:000000000000730C                 db    0
.eh_frame:000000000000730D                 db  42h ; B
.eh_frame:000000000000730E                 db  0Eh
.eh_frame:000000000000730F                 db  10h
.eh_frame:0000000000007310                 db  8Fh
.eh_frame:0000000000007311                 db    2
.eh_frame:0000000000007312                 db  42h ; B
.eh_frame:0000000000007313                 db  0Eh
.eh_frame:0000000000007314                 db  18h
.eh_frame:0000000000007315                 db  8Eh
.eh_frame:0000000000007316                 db    3
.eh_frame:0000000000007317                 db  45h ; E
.eh_frame:0000000000007318                 db  0Eh
.eh_frame:0000000000007319                 db  20h
.eh_frame:000000000000731A                 db  8Dh
.eh_frame:000000000000731B                 db    4
.eh_frame:000000000000731C                 db  42h ; B
.eh_frame:000000000000731D                 db  0Eh
.eh_frame:000000000000731E                 db  28h ; (
.eh_frame:000000000000731F                 db  8Ch
.eh_frame:0000000000007320                 db    5
.eh_frame:0000000000007321                 db  44h ; D
.eh_frame:0000000000007322                 db  0Eh
.eh_frame:0000000000007323                 db  30h ; 0
.eh_frame:0000000000007324                 db  86h
.eh_frame:0000000000007325 unk_7325        db    6                 ; DATA XREF: .rodata:format↑o
.eh_frame:0000000000007326                 db  41h ; A
.eh_frame:0000000000007327                 db  0Eh
.eh_frame:0000000000007328                 db  38h ; 8
.eh_frame:0000000000007329                 db  83h
.eh_frame:000000000000732A                 db    7
.eh_frame:000000000000732B                 db  53h ; S
.eh_frame:000000000000732C                 db  0Eh
.eh_frame:000000000000732D                 db 0F0h
.eh_frame:000000000000732E                 db    1
.eh_frame:000000000000732F                 db    3
.eh_frame:0000000000007330                 db  81h
.eh_frame:0000000000007331                 db  0Bh
.eh_frame:0000000000007332                 db  0Eh
.eh_frame:0000000000007333                 db 0F8h
.eh_frame:0000000000007334                 db    1
.eh_frame:0000000000007335                 db  4Ah ; J
.eh_frame:0000000000007336                 db  0Eh
.eh_frame:0000000000007337                 db  80h
.eh_frame:0000000000007338                 db    2
.eh_frame:0000000000007339                 db  44h ; D
.eh_frame:000000000000733A                 db  0Eh
.eh_frame:000000000000733B                 db  88h
.eh_frame:000000000000733C                 db    2
.eh_frame:000000000000733D                 db  45h ; E
.eh_frame:000000000000733E                 db  0Eh
.eh_frame:000000000000733F                 db  90h
.eh_frame:0000000000007340                 db    2
.eh_frame:0000000000007341                 db  5Fh ; _
.eh_frame:0000000000007342                 db  0Eh
.eh_frame:0000000000007343                 db 0F0h
.eh_frame:0000000000007344                 db    1
.eh_frame:0000000000007345                 db  64h ; d
.eh_frame:0000000000007346                 db  0Ah
.eh_frame:0000000000007347                 db  0Eh
.eh_frame:0000000000007348                 db  38h ; 8
.eh_frame:0000000000007349                 db  41h ; A
.eh_frame:000000000000734A                 db  0Eh
.eh_frame:000000000000734B                 db  30h ; 0
.eh_frame:000000000000734C                 db  41h ; A
.eh_frame:000000000000734D                 db  0Eh
.eh_frame:000000000000734E                 db  28h ; (
.eh_frame:000000000000734F                 db  42h ; B
.eh_frame:0000000000007350                 db  0Eh
.eh_frame:0000000000007351                 db  20h
.eh_frame:0000000000007352                 db  42h ; B
.eh_frame:0000000000007353                 db  0Eh
.eh_frame:0000000000007354                 db  18h
.eh_frame:0000000000007355                 db  42h ; B
.eh_frame:0000000000007356                 db  0Eh
.eh_frame:0000000000007357                 db  10h
.eh_frame:0000000000007358                 db  42h ; B
.eh_frame:0000000000007359                 db  0Eh
.eh_frame:000000000000735A                 db    8
.eh_frame:000000000000735B                 db  44h ; D
.eh_frame:000000000000735C                 db  0Bh
.eh_frame:000000000000735D                 db    3
.eh_frame:000000000000735E                 db  99h
.eh_frame:000000000000735F                 db    5
.eh_frame:0000000000007360                 db  0Eh
.eh_frame:0000000000007361                 db 0F8h
.eh_frame:0000000000007362                 db    1
.eh_frame:0000000000007363                 db  4Dh ; M
.eh_frame:0000000000007364                 db  0Eh
.eh_frame:0000000000007365                 db  80h
.eh_frame:0000000000007366                 db    2
.eh_frame:0000000000007367                 db  44h ; D
.eh_frame:0000000000007368                 db  0Eh
.eh_frame:0000000000007369                 db  88h
.eh_frame:000000000000736A                 db    2
.eh_frame:000000000000736B                 db  47h ; G
.eh_frame:000000000000736C                 db  0Eh
.eh_frame:000000000000736D                 db  90h
.eh_frame:000000000000736E                 db    2
.eh_frame:000000000000736F                 db  5Bh ; [
.eh_frame:0000000000007370                 db  0Eh
.eh_frame:0000000000007371                 db 0F0h
.eh_frame:0000000000007372                 db    1
.eh_frame:0000000000007373                 db    0
.eh_frame:0000000000007374                 db  68h ; h
.eh_frame:0000000000007375                 db    0
.eh_frame:0000000000007376                 db    0
.eh_frame:0000000000007377                 db    0
.eh_frame:0000000000007378                 db  70h ; p
.eh_frame:0000000000007379                 db    3
.eh_frame:000000000000737A                 db    0
.eh_frame:000000000000737B                 db    0
.eh_frame:000000000000737C                 db  54h ; T
.eh_frame:000000000000737D                 db 0CEh
.eh_frame:000000000000737E                 db 0FFh
.eh_frame:000000000000737F                 db 0FFh
.eh_frame:0000000000007380                 db 0ABh
.eh_frame:0000000000007381                 db    1
.eh_frame:0000000000007382                 db    0
.eh_frame:0000000000007383                 db    0
.eh_frame:0000000000007384                 db    0
.eh_frame:0000000000007385                 db  42h ; B
.eh_frame:0000000000007386                 db  0Eh
.eh_frame:0000000000007387                 db  10h
.eh_frame:0000000000007388                 db  8Fh
.eh_frame:0000000000007389                 db    2
.eh_frame:000000000000738A                 db  42h ; B
.eh_frame:000000000000738B                 db  0Eh
.eh_frame:000000000000738C                 db  18h
.eh_frame:000000000000738D                 db  8Eh
.eh_frame:000000000000738E                 db    3
.eh_frame:000000000000738F                 db  45h ; E
.eh_frame:0000000000007390                 db  0Eh
.eh_frame:0000000000007391                 db  20h
.eh_frame:0000000000007392                 db  8Dh
.eh_frame:0000000000007393                 db    4
.eh_frame:0000000000007394                 db  42h ; B
.eh_frame:0000000000007395                 db  0Eh
.eh_frame:0000000000007396                 db  28h ; (
.eh_frame:0000000000007397                 db  8Ch
.eh_frame:0000000000007398                 db    5
.eh_frame:0000000000007399                 db  44h ; D
.eh_frame:000000000000739A                 db  0Eh
.eh_frame:000000000000739B                 db  30h ; 0
.eh_frame:000000000000739C                 db  86h
.eh_frame:000000000000739D                 db    6
.eh_frame:000000000000739E                 db  41h ; A
.eh_frame:000000000000739F                 db  0Eh
.eh_frame:00000000000073A0                 db  38h ; 8
.eh_frame:00000000000073A1                 db  83h
.eh_frame:00000000000073A2                 db    7
.eh_frame:00000000000073A3                 db  47h ; G
.eh_frame:00000000000073A4                 db  0Eh
.eh_frame:00000000000073A5                 db  60h ; `
.eh_frame:00000000000073A6                 db    2
.eh_frame:00000000000073A7                 db  99h
.eh_frame:00000000000073A8                 db  0Eh
.eh_frame:00000000000073A9                 db  68h ; h
.eh_frame:00000000000073AA                 db  5Fh ; _
.eh_frame:00000000000073AB                 db  0Eh
.eh_frame:00000000000073AC                 db  70h ; p
.eh_frame:00000000000073AD                 db  46h ; F
.eh_frame:00000000000073AE                 db  0Eh
.eh_frame:00000000000073AF                 db  78h ; x
.eh_frame:00000000000073B0                 db  42h ; B
.eh_frame:00000000000073B1                 db  0Eh
.eh_frame:00000000000073B2                 db  80h
.eh_frame:00000000000073B3                 db    1
.eh_frame:00000000000073B4                 db  59h ; Y
.eh_frame:00000000000073B5                 db  0Eh
.eh_frame:00000000000073B6                 db  60h ; `
.eh_frame:00000000000073B7                 db    2
.eh_frame:00000000000073B8                 db  40h ; @
.eh_frame:00000000000073B9                 db  0Eh
.eh_frame:00000000000073BA                 db  68h ; h
.eh_frame:00000000000073BB                 db  4Bh ; K
.eh_frame:00000000000073BC                 db  0Eh
.eh_frame:00000000000073BD                 db  70h ; p
.eh_frame:00000000000073BE                 db  43h ; C
.eh_frame:00000000000073BF                 db  0Eh
.eh_frame:00000000000073C0                 db  78h ; x
.eh_frame:00000000000073C1                 db  45h ; E
.eh_frame:00000000000073C2                 db  0Eh
.eh_frame:00000000000073C3                 db  80h
.eh_frame:00000000000073C4                 db    1
.eh_frame:00000000000073C5                 db  5Eh ; ^
.eh_frame:00000000000073C6                 db  0Eh
.eh_frame:00000000000073C7                 db  60h ; `
.eh_frame:00000000000073C8                 db  4Ch ; L
.eh_frame:00000000000073C9                 db  0Ah
.eh_frame:00000000000073CA                 db  0Eh
.eh_frame:00000000000073CB                 db  38h ; 8
.eh_frame:00000000000073CC                 db  44h ; D
.eh_frame:00000000000073CD                 db  0Eh
.eh_frame:00000000000073CE                 db  30h ; 0
.eh_frame:00000000000073CF                 db  41h ; A
.eh_frame:00000000000073D0                 db  0Eh
.eh_frame:00000000000073D1                 db  28h ; (
.eh_frame:00000000000073D2                 db  42h ; B
.eh_frame:00000000000073D3                 db  0Eh
.eh_frame:00000000000073D4                 db  20h
.eh_frame:00000000000073D5                 db  42h ; B
.eh_frame:00000000000073D6                 db  0Eh
.eh_frame:00000000000073D7                 db  18h
.eh_frame:00000000000073D8                 db  42h ; B
.eh_frame:00000000000073D9                 db  0Eh
.eh_frame:00000000000073DA                 db  10h
.eh_frame:00000000000073DB                 db  42h ; B
.eh_frame:00000000000073DC                 db  0Eh
.eh_frame:00000000000073DD                 db    8
.eh_frame:00000000000073DE                 db  46h ; F
.eh_frame:00000000000073DF                 db  0Bh
.eh_frame:00000000000073E0                 db  28h ; (
.eh_frame:00000000000073E1                 db    0
.eh_frame:00000000000073E2                 db    0
.eh_frame:00000000000073E3                 db    0
.eh_frame:00000000000073E4                 db 0DCh
.eh_frame:00000000000073E5                 db    3
.eh_frame:00000000000073E6                 db    0
.eh_frame:00000000000073E7                 db    0
.eh_frame:00000000000073E8                 db  98h
.eh_frame:00000000000073E9                 db 0CFh
.eh_frame:00000000000073EA                 db 0FFh
.eh_frame:00000000000073EB                 db 0FFh
.eh_frame:00000000000073EC                 db  36h ; 6
.eh_frame:00000000000073ED                 db    0
.eh_frame:00000000000073EE                 db    0
.eh_frame:00000000000073EF                 db    0
.eh_frame:00000000000073F0                 db    0
.eh_frame:00000000000073F1                 db  42h ; B
.eh_frame:00000000000073F2                 db  0Eh
.eh_frame:00000000000073F3                 db  10h
.eh_frame:00000000000073F4                 db  8Ch
.eh_frame:00000000000073F5                 db    2
.eh_frame:00000000000073F6                 db  41h ; A
.eh_frame:00000000000073F7                 db  0Eh
.eh_frame:00000000000073F8                 db  18h
.eh_frame:00000000000073F9                 db  86h
.eh_frame:00000000000073FA                 db    3
.eh_frame:00000000000073FB                 db  41h ; A
.eh_frame:00000000000073FC                 db  0Eh
.eh_frame:00000000000073FD                 db  20h
.eh_frame:00000000000073FE                 db  83h
.eh_frame:00000000000073FF                 db    4
.eh_frame:0000000000007400                 db  6Eh ; n
.eh_frame:0000000000007401                 db  0Eh
.eh_frame:0000000000007402                 db  18h
.eh_frame:0000000000007403                 db  41h ; A
.eh_frame:0000000000007404                 db  0Eh
.eh_frame:0000000000007405                 db  10h
.eh_frame:0000000000007406                 db  42h ; B
.eh_frame:0000000000007407                 db  0Eh
.eh_frame:0000000000007408                 db    8
.eh_frame:0000000000007409                 db    0
.eh_frame:000000000000740A                 db    0
.eh_frame:000000000000740B                 db    0
.eh_frame:000000000000740C                 db  10h
.eh_frame:000000000000740D                 db    0
.eh_frame:000000000000740E                 db    0
.eh_frame:000000000000740F                 db    0
.eh_frame:0000000000007410                 db    8
.eh_frame:0000000000007411                 db    4
.eh_frame:0000000000007412                 db    0
.eh_frame:0000000000007413                 db    0
.eh_frame:0000000000007414                 db 0ACh
.eh_frame:0000000000007415                 db 0CFh
.eh_frame:0000000000007416                 db 0FFh
.eh_frame:0000000000007417                 db 0FFh
.eh_frame:0000000000007418                 db  11h
.eh_frame:0000000000007419                 db    0
.eh_frame:000000000000741A                 db    0
.eh_frame:000000000000741B                 db    0
.eh_frame:000000000000741C                 db    0
.eh_frame:000000000000741D                 db    0
.eh_frame:000000000000741E                 db    0
.eh_frame:000000000000741F                 db    0
.eh_frame:0000000000007420                 db  10h
.eh_frame:0000000000007421                 db    0
.eh_frame:0000000000007422                 db    0
.eh_frame:0000000000007423                 db    0
.eh_frame:0000000000007424                 db  1Ch
.eh_frame:0000000000007425                 db    4
.eh_frame:0000000000007426                 db    0
.eh_frame:0000000000007427                 db    0
.eh_frame:0000000000007428                 db 0B8h
.eh_frame:0000000000007429                 db 0CFh
.eh_frame:000000000000742A                 db 0FFh
.eh_frame:000000000000742B                 db 0FFh
.eh_frame:000000000000742C                 db  11h
.eh_frame:000000000000742D                 db    0
.eh_frame:000000000000742E                 db    0
.eh_frame:000000000000742F                 db    0
.eh_frame:0000000000007430                 db    0
.eh_frame:0000000000007431                 db    0
.eh_frame:0000000000007432                 db    0
.eh_frame:0000000000007433                 db    0
.eh_frame:0000000000007434                 db  10h
.eh_frame:0000000000007435                 db    0
.eh_frame:0000000000007436                 db    0
.eh_frame:0000000000007437                 db    0
.eh_frame:0000000000007438                 db  30h ; 0
.eh_frame:0000000000007439                 db    4
.eh_frame:000000000000743A                 db    0
.eh_frame:000000000000743B                 db    0
.eh_frame:000000000000743C                 db 0C4h
.eh_frame:000000000000743D                 db 0CFh
.eh_frame:000000000000743E                 db 0FFh
.eh_frame:000000000000743F                 db 0FFh
.eh_frame:0000000000007440                 db  35h ; 5
.eh_frame:0000000000007441                 db    0
.eh_frame:0000000000007442                 db    0
.eh_frame:0000000000007443                 db    0
.eh_frame:0000000000007444                 db    0
.eh_frame:0000000000007445                 db    0
.eh_frame:0000000000007446                 db    0
.eh_frame:0000000000007447                 db    0
.eh_frame:0000000000007448                 db  10h
.eh_frame:0000000000007449                 db    0
.eh_frame:000000000000744A                 db    0
.eh_frame:000000000000744B                 db    0
.eh_frame:000000000000744C                 db  44h ; D
.eh_frame:000000000000744D                 db    4
.eh_frame:000000000000744E                 db    0
.eh_frame:000000000000744F                 db    0
.eh_frame:0000000000007450                 db 0F0h
.eh_frame:0000000000007451                 db 0CFh
.eh_frame:0000000000007452                 db 0FFh
.eh_frame:0000000000007453                 db 0FFh
.eh_frame:0000000000007454                 db  15h
.eh_frame:0000000000007455                 db    0
.eh_frame:0000000000007456                 db    0
.eh_frame:0000000000007457                 db    0
.eh_frame:0000000000007458                 db    0
.eh_frame:0000000000007459                 db    0
.eh_frame:000000000000745A                 db    0
.eh_frame:000000000000745B                 db    0
.eh_frame:000000000000745C                 db  10h
.eh_frame:000000000000745D                 db    0
.eh_frame:000000000000745E                 db    0
.eh_frame:000000000000745F                 db    0
.eh_frame:0000000000007460                 db  58h ; X
.eh_frame:0000000000007461                 db    4
.eh_frame:0000000000007462                 db    0
.eh_frame:0000000000007463                 db    0
.eh_frame:0000000000007464                 db 0FCh
.eh_frame:0000000000007465                 db 0CFh
.eh_frame:0000000000007466                 db 0FFh
.eh_frame:0000000000007467                 db 0FFh
.eh_frame:0000000000007468                 db  30h ; 0
.eh_frame:0000000000007469                 db    0
.eh_frame:000000000000746A                 db    0
.eh_frame:000000000000746B                 db    0
.eh_frame:000000000000746C                 db    0
.eh_frame:000000000000746D                 db  6Bh ; k
.eh_frame:000000000000746E                 db  0Eh
.eh_frame:000000000000746F                 db  10h
.eh_frame:0000000000007470                 db  50h ; P
.eh_frame:0000000000007471                 db    0
.eh_frame:0000000000007472                 db    0
.eh_frame:0000000000007473                 db    0
.eh_frame:0000000000007474                 db  6Ch ; l
.eh_frame:0000000000007475                 db    4
.eh_frame:0000000000007476                 db    0
.eh_frame:0000000000007477                 db    0
.eh_frame:0000000000007478                 db  18h
.eh_frame:0000000000007479                 db 0D0h
.eh_frame:000000000000747A                 db 0FFh
.eh_frame:000000000000747B                 db 0FFh
.eh_frame:000000000000747C                 db  74h ; t
.eh_frame:000000000000747D                 db    0
.eh_frame:000000000000747E                 db    0
.eh_frame:000000000000747F                 db    0
.eh_frame:0000000000007480                 db    0
.eh_frame:0000000000007481                 db  42h ; B
.eh_frame:0000000000007482                 db  0Eh
.eh_frame:0000000000007483                 db  10h
.eh_frame:0000000000007484                 db  8Fh
.eh_frame:0000000000007485                 db    2
.eh_frame:0000000000007486                 db  42h ; B
.eh_frame:0000000000007487                 db  0Eh
.eh_frame:0000000000007488                 db  18h
.eh_frame:0000000000007489                 db  8Eh
.eh_frame:000000000000748A                 db    3
.eh_frame:000000000000748B                 db  49h ; I
.eh_frame:000000000000748C                 db  0Eh
.eh_frame:000000000000748D                 db  20h
.eh_frame:000000000000748E                 db  8Dh
.eh_frame:000000000000748F                 db    4
.eh_frame:0000000000007490                 db  42h ; B
.eh_frame:0000000000007491                 db  0Eh
.eh_frame:0000000000007492                 db  28h ; (
.eh_frame:0000000000007493                 db  8Ch
.eh_frame:0000000000007494                 db    5
.eh_frame:0000000000007495                 db  44h ; D
.eh_frame:0000000000007496                 db  0Eh
.eh_frame:0000000000007497                 db  30h ; 0
.eh_frame:0000000000007498                 db  86h
.eh_frame:0000000000007499                 db    6
.eh_frame:000000000000749A                 db  41h ; A
.eh_frame:000000000000749B                 db  0Eh
.eh_frame:000000000000749C                 db  38h ; 8
.eh_frame:000000000000749D                 db  83h
.eh_frame:000000000000749E                 db    7
.eh_frame:000000000000749F                 db  4Dh ; M
.eh_frame:00000000000074A0                 db  0Eh
.eh_frame:00000000000074A1                 db  50h ; P
.eh_frame:00000000000074A2                 db  5Fh ; _
.eh_frame:00000000000074A3                 db  0Eh
.eh_frame:00000000000074A4                 db  58h ; X
.eh_frame:00000000000074A5                 db  47h ; G
.eh_frame:00000000000074A6                 db  0Eh
.eh_frame:00000000000074A7                 db  60h ; `
.eh_frame:00000000000074A8                 db  46h ; F
.eh_frame:00000000000074A9                 db  0Eh
.eh_frame:00000000000074AA                 db  68h ; h
.eh_frame:00000000000074AB                 db  44h ; D
.eh_frame:00000000000074AC                 db  0Eh
.eh_frame:00000000000074AD                 db  70h ; p
.eh_frame:00000000000074AE                 db  58h ; X
.eh_frame:00000000000074AF                 db  0Eh
.eh_frame:00000000000074B0                 db  38h ; 8
.eh_frame:00000000000074B1                 db  41h ; A
.eh_frame:00000000000074B2                 db  0Eh
.eh_frame:00000000000074B3                 db  30h ; 0
.eh_frame:00000000000074B4                 db  41h ; A
.eh_frame:00000000000074B5                 db  0Eh
.eh_frame:00000000000074B6                 db  28h ; (
.eh_frame:00000000000074B7                 db  42h ; B
.eh_frame:00000000000074B8                 db  0Eh
.eh_frame:00000000000074B9                 db  20h
.eh_frame:00000000000074BA                 db  42h ; B
.eh_frame:00000000000074BB                 db  0Eh
.eh_frame:00000000000074BC                 db  18h
.eh_frame:00000000000074BD                 db  42h ; B
.eh_frame:00000000000074BE                 db  0Eh
.eh_frame:00000000000074BF                 db  10h
.eh_frame:00000000000074C0                 db  42h ; B
.eh_frame:00000000000074C1                 db  0Eh
.eh_frame:00000000000074C2                 db    8
.eh_frame:00000000000074C3                 db    0
.eh_frame:00000000000074C4                 db  68h ; h
.eh_frame:00000000000074C5                 db    0
.eh_frame:00000000000074C6                 db    0
.eh_frame:00000000000074C7                 db    0
.eh_frame:00000000000074C8                 db 0C0h
.eh_frame:00000000000074C9                 db    4
.eh_frame:00000000000074CA                 db    0
.eh_frame:00000000000074CB                 db    0
.eh_frame:00000000000074CC                 db  44h ; D
.eh_frame:00000000000074CD                 db 0D0h
.eh_frame:00000000000074CE                 db 0FFh
.eh_frame:00000000000074CF                 db 0FFh
.eh_frame:00000000000074D0                 db 0E3h
.eh_frame:00000000000074D1                 db    0
.eh_frame:00000000000074D2                 db    0
.eh_frame:00000000000074D3                 db    0
.eh_frame:00000000000074D4                 db    0
.eh_frame:00000000000074D5                 db  42h ; B
.eh_frame:00000000000074D6                 db  0Eh
.eh_frame:00000000000074D7                 db  10h
.eh_frame:00000000000074D8                 db  8Fh
.eh_frame:00000000000074D9                 db    2
.eh_frame:00000000000074DA                 db  42h ; B
.eh_frame:00000000000074DB                 db  0Eh
.eh_frame:00000000000074DC                 db  18h
.eh_frame:00000000000074DD                 db  8Eh
.eh_frame:00000000000074DE                 db    3
.eh_frame:00000000000074DF                 db  49h ; I
.eh_frame:00000000000074E0                 db  0Eh
.eh_frame:00000000000074E1                 db  20h
.eh_frame:00000000000074E2                 db  8Dh
.eh_frame:00000000000074E3                 db    4
.eh_frame:00000000000074E4                 db  42h ; B
.eh_frame:00000000000074E5                 db  0Eh
.eh_frame:00000000000074E6                 db  28h ; (
.eh_frame:00000000000074E7                 db  8Ch
.eh_frame:00000000000074E8                 db    5
.eh_frame:00000000000074E9                 db  44h ; D
.eh_frame:00000000000074EA                 db  0Eh
.eh_frame:00000000000074EB                 db  30h ; 0
.eh_frame:00000000000074EC                 db  86h
.eh_frame:00000000000074ED                 db    6
.eh_frame:00000000000074EE                 db  41h ; A
.eh_frame:00000000000074EF                 db  0Eh
.eh_frame:00000000000074F0                 db  38h ; 8
.eh_frame:00000000000074F1                 db  83h
.eh_frame:00000000000074F2                 db    7
.eh_frame:00000000000074F3                 db  4Dh ; M
.eh_frame:00000000000074F4                 db  0Eh
.eh_frame:00000000000074F5                 db  70h ; p
.eh_frame:00000000000074F6                 db  65h ; e
.eh_frame:00000000000074F7                 db  0Eh
.eh_frame:00000000000074F8                 db  78h ; x
.eh_frame:00000000000074F9                 db  4Dh ; M
.eh_frame:00000000000074FA                 db  0Eh
.eh_frame:00000000000074FB                 db  80h
.eh_frame:00000000000074FC                 db    1
.eh_frame:00000000000074FD                 db  46h ; F
.eh_frame:00000000000074FE                 db  0Eh
.eh_frame:00000000000074FF                 db  88h
.eh_frame:0000000000007500                 db    1
.eh_frame:0000000000007501                 db  42h ; B
.eh_frame:0000000000007502                 db  0Eh
.eh_frame:0000000000007503                 db  90h
.eh_frame:0000000000007504                 db    1
.eh_frame:0000000000007505                 db  5Eh ; ^
.eh_frame:0000000000007506                 db  0Eh
.eh_frame:0000000000007507                 db  70h ; p
.eh_frame:0000000000007508                 db  56h ; V
.eh_frame:0000000000007509                 db  0Eh
.eh_frame:000000000000750A                 db  78h ; x
.eh_frame:000000000000750B                 db  43h ; C
.eh_frame:000000000000750C                 db  0Eh
.eh_frame:000000000000750D                 db  80h
.eh_frame:000000000000750E                 db    1
.eh_frame:000000000000750F                 db  43h ; C
.eh_frame:0000000000007510                 db  0Eh
.eh_frame:0000000000007511                 db  88h
.eh_frame:0000000000007512                 db    1
.eh_frame:0000000000007513                 db  56h ; V
.eh_frame:0000000000007514                 db  0Eh
.eh_frame:0000000000007515                 db  90h
.eh_frame:0000000000007516                 db    1
.eh_frame:0000000000007517                 db  52h ; R
.eh_frame:0000000000007518                 db  0Eh
.eh_frame:0000000000007519                 db  70h ; p
.eh_frame:000000000000751A                 db  5Bh ; [
.eh_frame:000000000000751B                 db  0Eh
.eh_frame:000000000000751C                 db  38h ; 8
.eh_frame:000000000000751D                 db  41h ; A
.eh_frame:000000000000751E                 db  0Eh
.eh_frame:000000000000751F                 db  30h ; 0
.eh_frame:0000000000007520                 db  41h ; A
.eh_frame:0000000000007521                 db  0Eh
.eh_frame:0000000000007522                 db  28h ; (
.eh_frame:0000000000007523                 db  42h ; B
.eh_frame:0000000000007524                 db  0Eh
.eh_frame:0000000000007525                 db  20h
.eh_frame:0000000000007526                 db  42h ; B
.eh_frame:0000000000007527                 db  0Eh
.eh_frame:0000000000007528                 db  18h
.eh_frame:0000000000007529                 db  42h ; B
.eh_frame:000000000000752A                 db  0Eh
.eh_frame:000000000000752B                 db  10h
.eh_frame:000000000000752C                 db  42h ; B
.eh_frame:000000000000752D                 db  0Eh
.eh_frame:000000000000752E                 db    8
.eh_frame:000000000000752F                 db    0
.eh_frame:0000000000007530                 db  10h
.eh_frame:0000000000007531                 db    0
.eh_frame:0000000000007532                 db    0
.eh_frame:0000000000007533                 db    0
.eh_frame:0000000000007534                 db  2Ch ; ,
.eh_frame:0000000000007535                 db    5
.eh_frame:0000000000007536                 db    0
.eh_frame:0000000000007537                 db    0
.eh_frame:0000000000007538                 db 0C8h
.eh_frame:0000000000007539                 db 0D0h
.eh_frame:000000000000753A                 db 0FFh
.eh_frame:000000000000753B                 db 0FFh
.eh_frame:000000000000753C                 db  0Ah
.eh_frame:000000000000753D                 db    0
.eh_frame:000000000000753E                 db    0
.eh_frame:000000000000753F                 db    0
.eh_frame:0000000000007540                 db    0
.eh_frame:0000000000007541                 db    0
.eh_frame:0000000000007542                 db    0
.eh_frame:0000000000007543                 db    0
.eh_frame:0000000000007544                 db  28h ; (
.eh_frame:0000000000007545                 db    0
.eh_frame:0000000000007546                 db    0
.eh_frame:0000000000007547                 db    0
.eh_frame:0000000000007548                 db  40h ; @
.eh_frame:0000000000007549                 db    5
.eh_frame:000000000000754A                 db    0
.eh_frame:000000000000754B                 db    0
.eh_frame:000000000000754C                 db 0C4h
.eh_frame:000000000000754D                 db 0D0h
.eh_frame:000000000000754E                 db 0FFh
.eh_frame:000000000000754F                 db 0FFh
.eh_frame:0000000000007550                 db  93h
.eh_frame:0000000000007551                 db    0
.eh_frame:0000000000007552                 db    0
.eh_frame:0000000000007553                 db    0
.eh_frame:0000000000007554                 db    0
.eh_frame:0000000000007555                 db  48h ; H
.eh_frame:0000000000007556                 db  0Eh
.eh_frame:0000000000007557                 db  10h
.eh_frame:0000000000007558                 db  8Ch
.eh_frame:0000000000007559                 db    2
.eh_frame:000000000000755A                 db  48h ; H
.eh_frame:000000000000755B                 db  0Eh
.eh_frame:000000000000755C                 db  18h
.eh_frame:000000000000755D                 db  86h
.eh_frame:000000000000755E                 db    3
.eh_frame:000000000000755F                 db  41h ; A
.eh_frame:0000000000007560                 db  0Eh
.eh_frame:0000000000007561                 db  20h
.eh_frame:0000000000007562                 db  83h
.eh_frame:0000000000007563                 db    4
.eh_frame:0000000000007564                 db    2
.eh_frame:0000000000007565                 db  74h ; t
.eh_frame:0000000000007566                 db  0Eh
.eh_frame:0000000000007567                 db  18h
.eh_frame:0000000000007568                 db  4Bh ; K
.eh_frame:0000000000007569                 db  0Eh
.eh_frame:000000000000756A                 db  10h
.eh_frame:000000000000756B                 db  42h ; B
.eh_frame:000000000000756C                 db  0Eh
.eh_frame:000000000000756D                 db    8
.eh_frame:000000000000756E                 db    0
.eh_frame:000000000000756F                 db    0
.eh_frame:0000000000007570                 db  10h
.eh_frame:0000000000007571                 db    0
.eh_frame:0000000000007572                 db    0
.eh_frame:0000000000007573                 db    0
.eh_frame:0000000000007574                 db  6Ch ; l
.eh_frame:0000000000007575                 db    5
.eh_frame:0000000000007576                 db    0
.eh_frame:0000000000007577                 db    0
.eh_frame:0000000000007578                 db  38h ; 8
.eh_frame:0000000000007579                 db 0D1h
.eh_frame:000000000000757A                 db 0FFh
.eh_frame:000000000000757B                 db 0FFh
.eh_frame:000000000000757C                 db  13h
.eh_frame:000000000000757D                 db    0
.eh_frame:000000000000757E                 db    0
.eh_frame:000000000000757F                 db    0
.eh_frame:0000000000007580                 db    0
.eh_frame:0000000000007581                 db    0
.eh_frame:0000000000007582                 db    0
.eh_frame:0000000000007583                 db    0
.eh_frame:0000000000007584                 db  10h
.eh_frame:0000000000007585                 db    0
.eh_frame:0000000000007586                 db    0
.eh_frame:0000000000007587                 db    0
.eh_frame:0000000000007588                 db  80h
.eh_frame:0000000000007589                 db    5
.eh_frame:000000000000758A                 db    0
.eh_frame:000000000000758B                 db    0
.eh_frame:000000000000758C                 db  44h ; D
.eh_frame:000000000000758D                 db 0D1h
.eh_frame:000000000000758E                 db 0FFh
.eh_frame:000000000000758F                 db 0FFh
.eh_frame:0000000000007590                 db  0Ch
.eh_frame:0000000000007591                 db    0
.eh_frame:0000000000007592                 db    0
.eh_frame:0000000000007593                 db    0
.eh_frame:0000000000007594                 db    0
.eh_frame:0000000000007595                 db    0
.eh_frame:0000000000007596                 db    0
.eh_frame:0000000000007597                 db    0
.eh_frame:0000000000007598                 db  10h
.eh_frame:0000000000007599                 db    0
.eh_frame:000000000000759A                 db    0
.eh_frame:000000000000759B                 db    0
.eh_frame:000000000000759C                 db  94h
.eh_frame:000000000000759D                 db    5
.eh_frame:000000000000759E                 db    0
.eh_frame:000000000000759F                 db    0
.eh_frame:00000000000075A0                 db  40h ; @
.eh_frame:00000000000075A1                 db 0D1h
.eh_frame:00000000000075A2                 db 0FFh
.eh_frame:00000000000075A3                 db 0FFh
.eh_frame:00000000000075A4                 db  18h
.eh_frame:00000000000075A5                 db    0
.eh_frame:00000000000075A6                 db    0
.eh_frame:00000000000075A7                 db    0
.eh_frame:00000000000075A8                 db    0
.eh_frame:00000000000075A9                 db    0
.eh_frame:00000000000075AA                 db    0
.eh_frame:00000000000075AB                 db    0
.eh_frame:00000000000075AC                 db  10h
.eh_frame:00000000000075AD                 db    0
.eh_frame:00000000000075AE                 db    0
.eh_frame:00000000000075AF                 db    0
.eh_frame:00000000000075B0                 db 0A8h
.eh_frame:00000000000075B1                 db    5
.eh_frame:00000000000075B2                 db    0
.eh_frame:00000000000075B3                 db    0
.eh_frame:00000000000075B4                 db  4Ch ; L
.eh_frame:00000000000075B5                 db 0D1h
.eh_frame:00000000000075B6                 db 0FFh
.eh_frame:00000000000075B7                 db 0FFh
.eh_frame:00000000000075B8                 db  14h
.eh_frame:00000000000075B9                 db    0
.eh_frame:00000000000075BA                 db    0
.eh_frame:00000000000075BB                 db    0
.eh_frame:00000000000075BC                 db    0
.eh_frame:00000000000075BD                 db    0
.eh_frame:00000000000075BE                 db    0
.eh_frame:00000000000075BF                 db    0
.eh_frame:00000000000075C0                 db  18h
.eh_frame:00000000000075C1                 db    0
.eh_frame:00000000000075C2                 db    0
.eh_frame:00000000000075C3                 db    0
.eh_frame:00000000000075C4                 db 0BCh
.eh_frame:00000000000075C5                 db    5
.eh_frame:00000000000075C6                 db    0
.eh_frame:00000000000075C7                 db    0
.eh_frame:00000000000075C8                 db  58h ; X
.eh_frame:00000000000075C9                 db 0D1h
.eh_frame:00000000000075CA                 db 0FFh
.eh_frame:00000000000075CB                 db 0FFh
.eh_frame:00000000000075CC                 db  8Eh
.eh_frame:00000000000075CD                 db    0
.eh_frame:00000000000075CE                 db    0
.eh_frame:00000000000075CF                 db    0
.eh_frame:00000000000075D0                 db    0
.eh_frame:00000000000075D1                 db  44h ; D
.eh_frame:00000000000075D2                 db  0Eh
.eh_frame:00000000000075D3                 db  50h ; P
.eh_frame:00000000000075D4                 db    2
.eh_frame:00000000000075D5                 db  7Fh ; 
.eh_frame:00000000000075D6                 db  0Ah
.eh_frame:00000000000075D7                 db  0Eh
.eh_frame:00000000000075D8                 db    8
.eh_frame:00000000000075D9                 db  41h ; A
.eh_frame:00000000000075DA                 db  0Bh
.eh_frame:00000000000075DB                 db    0
.eh_frame:00000000000075DC                 db  18h
.eh_frame:00000000000075DD                 db    0
.eh_frame:00000000000075DE                 db    0
.eh_frame:00000000000075DF                 db    0
.eh_frame:00000000000075E0                 db 0D8h
.eh_frame:00000000000075E1                 db    5
.eh_frame:00000000000075E2                 db    0
.eh_frame:00000000000075E3                 db    0
.eh_frame:00000000000075E4                 db 0CCh
.eh_frame:00000000000075E5                 db 0D1h
.eh_frame:00000000000075E6                 db 0FFh
.eh_frame:00000000000075E7                 db 0FFh
.eh_frame:00000000000075E8                 db  8Ah
.eh_frame:00000000000075E9                 db    0
.eh_frame:00000000000075EA                 db    0
.eh_frame:00000000000075EB                 db    0
.eh_frame:00000000000075EC                 db    0
.eh_frame:00000000000075ED                 db  44h ; D
.eh_frame:00000000000075EE                 db  0Eh
.eh_frame:00000000000075EF                 db  50h ; P
.eh_frame:00000000000075F0                 db    2
.eh_frame:00000000000075F1                 db  7Bh ; {
.eh_frame:00000000000075F2                 db  0Ah
.eh_frame:00000000000075F3                 db  0Eh
.eh_frame:00000000000075F4                 db    8
.eh_frame:00000000000075F5                 db  41h ; A
.eh_frame:00000000000075F6                 db  0Bh
.eh_frame:00000000000075F7                 db    0
.eh_frame:00000000000075F8                 db  10h
.eh_frame:00000000000075F9                 db    0
.eh_frame:00000000000075FA                 db    0
.eh_frame:00000000000075FB                 db    0
.eh_frame:00000000000075FC                 db 0F4h
.eh_frame:00000000000075FD                 db    5
.eh_frame:00000000000075FE                 db    0
.eh_frame:00000000000075FF                 db    0
.eh_frame:0000000000007600                 db  40h ; @
.eh_frame:0000000000007601                 db 0D2h
.eh_frame:0000000000007602                 db 0FFh
.eh_frame:0000000000007603                 db 0FFh
.eh_frame:0000000000007604                 db  0Ch
.eh_frame:0000000000007605                 db    0
.eh_frame:0000000000007606                 db    0
.eh_frame:0000000000007607                 db    0
.eh_frame:0000000000007608                 db    0
.eh_frame:0000000000007609                 db    0
.eh_frame:000000000000760A                 db    0
.eh_frame:000000000000760B                 db    0
.eh_frame:000000000000760C                 db  10h
.eh_frame:000000000000760D                 db    0
.eh_frame:000000000000760E                 db    0
.eh_frame:000000000000760F                 db    0
.eh_frame:0000000000007610                 db    8
.eh_frame:0000000000007611                 db    6
.eh_frame:0000000000007612                 db    0
.eh_frame:0000000000007613                 db    0
.eh_frame:0000000000007614                 db  3Ch ; <
.eh_frame:0000000000007615                 db 0D2h
.eh_frame:0000000000007616                 db 0FFh
.eh_frame:0000000000007617                 db 0FFh
.eh_frame:0000000000007618                 db  0Fh
.eh_frame:0000000000007619                 db    0
.eh_frame:000000000000761A                 db    0
.eh_frame:000000000000761B                 db    0
.eh_frame:000000000000761C                 db    0
.eh_frame:000000000000761D                 db    0
.eh_frame:000000000000761E                 db    0
.eh_frame:000000000000761F                 db    0
.eh_frame:0000000000007620                 db  18h
.eh_frame:0000000000007621                 db    0
.eh_frame:0000000000007622                 db    0
.eh_frame:0000000000007623                 db    0
.eh_frame:0000000000007624                 db  1Ch
.eh_frame:0000000000007625                 db    6
.eh_frame:0000000000007626                 db    0
.eh_frame:0000000000007627                 db    0
.eh_frame:0000000000007628                 db  38h ; 8
.eh_frame:0000000000007629                 db 0D2h
.eh_frame:000000000000762A                 db 0FFh
.eh_frame:000000000000762B                 db 0FFh
.eh_frame:000000000000762C                 db  98h
.eh_frame:000000000000762D                 db    0
.eh_frame:000000000000762E                 db    0
.eh_frame:000000000000762F                 db    0
.eh_frame:0000000000007630                 db    0
.eh_frame:0000000000007631                 db  44h ; D
.eh_frame:0000000000007632                 db  0Eh
.eh_frame:0000000000007633                 db  50h ; P
.eh_frame:0000000000007634                 db    2
.eh_frame:0000000000007635                 db  8Eh
.eh_frame:0000000000007636                 db  0Ah
.eh_frame:0000000000007637                 db  0Eh
.eh_frame:0000000000007638                 db    8
.eh_frame:0000000000007639                 db  41h ; A
.eh_frame:000000000000763A                 db  0Bh
.eh_frame:000000000000763B                 db    0
.eh_frame:000000000000763C                 db  10h
.eh_frame:000000000000763D                 db    0
.eh_frame:000000000000763E                 db    0
.eh_frame:000000000000763F                 db    0
.eh_frame:0000000000007640                 db  38h ; 8
.eh_frame:0000000000007641                 db    6
.eh_frame:0000000000007642                 db    0
.eh_frame:0000000000007643                 db    0
.eh_frame:0000000000007644                 db 0BCh
.eh_frame:0000000000007645                 db 0D2h
.eh_frame:0000000000007646                 db 0FFh
.eh_frame:0000000000007647                 db 0FFh
.eh_frame:0000000000007648                 db  10h
.eh_frame:0000000000007649                 db    0
.eh_frame:000000000000764A                 db    0
.eh_frame:000000000000764B                 db    0
.eh_frame:000000000000764C                 db    0
.eh_frame:000000000000764D                 db    0
.eh_frame:000000000000764E                 db    0
.eh_frame:000000000000764F                 db    0
.eh_frame:0000000000007650                 db  10h
.eh_frame:0000000000007651                 db    0
.eh_frame:0000000000007652                 db    0
.eh_frame:0000000000007653                 db    0
.eh_frame:0000000000007654                 db  4Ch ; L
.eh_frame:0000000000007655                 db    6
.eh_frame:0000000000007656                 db    0
.eh_frame:0000000000007657                 db    0
.eh_frame:0000000000007658                 db 0B8h
.eh_frame:0000000000007659                 db 0D2h
.eh_frame:000000000000765A                 db 0FFh
.eh_frame:000000000000765B                 db 0FFh
.eh_frame:000000000000765C                 db  11h
.eh_frame:000000000000765D                 db    0
.eh_frame:000000000000765E                 db    0
.eh_frame:000000000000765F                 db    0
.eh_frame:0000000000007660                 db    0
.eh_frame:0000000000007661                 db    0
.eh_frame:0000000000007662                 db    0
.eh_frame:0000000000007663                 db    0
.eh_frame:0000000000007664                 db  10h
.eh_frame:0000000000007665                 db    0
.eh_frame:0000000000007666                 db    0
.eh_frame:0000000000007667                 db    0
.eh_frame:0000000000007668                 db  60h ; `
.eh_frame:0000000000007669                 db    6
.eh_frame:000000000000766A                 db    0
.eh_frame:000000000000766B                 db    0
.eh_frame:000000000000766C                 db 0C4h
.eh_frame:000000000000766D                 db 0D2h
.eh_frame:000000000000766E                 db 0FFh
.eh_frame:000000000000766F                 db 0FFh
.eh_frame:0000000000007670                 db  0Ah
.eh_frame:0000000000007671                 db    0
.eh_frame:0000000000007672                 db    0
.eh_frame:0000000000007673                 db    0
.eh_frame:0000000000007674                 db    0
.eh_frame:0000000000007675                 db    0
.eh_frame:0000000000007676                 db    0
.eh_frame:0000000000007677                 db    0
.eh_frame:0000000000007678                 db  18h
.eh_frame:0000000000007679                 db    0
.eh_frame:000000000000767A                 db    0
.eh_frame:000000000000767B                 db    0
.eh_frame:000000000000767C                 db  74h ; t
.eh_frame:000000000000767D                 db    6
.eh_frame:000000000000767E                 db    0
.eh_frame:000000000000767F                 db    0
.eh_frame:0000000000007680                 db 0C0h
.eh_frame:0000000000007681                 db 0D2h
.eh_frame:0000000000007682                 db 0FFh
.eh_frame:0000000000007683                 db 0FFh
.eh_frame:0000000000007684                 db  8Eh
.eh_frame:0000000000007685                 db    0
.eh_frame:0000000000007686                 db    0
.eh_frame:0000000000007687                 db    0
.eh_frame:0000000000007688                 db    0
.eh_frame:0000000000007689                 db  44h ; D
.eh_frame:000000000000768A                 db  0Eh
.eh_frame:000000000000768B                 db  50h ; P
.eh_frame:000000000000768C                 db    2
.eh_frame:000000000000768D                 db  7Fh ; 
.eh_frame:000000000000768E                 db  0Ah
.eh_frame:000000000000768F                 db  0Eh
.eh_frame:0000000000007690                 db    8
.eh_frame:0000000000007691                 db  41h ; A
.eh_frame:0000000000007692                 db  0Bh
.eh_frame:0000000000007693                 db    0
.eh_frame:0000000000007694                 db  18h
.eh_frame:0000000000007695                 db    0
.eh_frame:0000000000007696                 db    0
.eh_frame:0000000000007697                 db    0
.eh_frame:0000000000007698                 db  90h
.eh_frame:0000000000007699                 db    6
.eh_frame:000000000000769A                 db    0
.eh_frame:000000000000769B                 db    0
.eh_frame:000000000000769C                 db  34h ; 4
.eh_frame:000000000000769D                 db 0D3h
.eh_frame:000000000000769E                 db 0FFh
.eh_frame:000000000000769F                 db 0FFh
.eh_frame:00000000000076A0                 db  91h
.eh_frame:00000000000076A1                 db    0
.eh_frame:00000000000076A2                 db    0
.eh_frame:00000000000076A3                 db    0
.eh_frame:00000000000076A4                 db    0
.eh_frame:00000000000076A5                 db  44h ; D
.eh_frame:00000000000076A6                 db  0Eh
.eh_frame:00000000000076A7                 db  50h ; P
.eh_frame:00000000000076A8                 db    2
.eh_frame:00000000000076A9                 db  82h
.eh_frame:00000000000076AA                 db  0Ah
.eh_frame:00000000000076AB                 db  0Eh
.eh_frame:00000000000076AC                 db    8
.eh_frame:00000000000076AD                 db  41h ; A
.eh_frame:00000000000076AE                 db  0Bh
.eh_frame:00000000000076AF                 db    0
.eh_frame:00000000000076B0                 db  10h
.eh_frame:00000000000076B1                 db    0
.eh_frame:00000000000076B2                 db    0
.eh_frame:00000000000076B3                 db    0
.eh_frame:00000000000076B4                 db 0ACh
.eh_frame:00000000000076B5                 db    6
.eh_frame:00000000000076B6                 db    0
.eh_frame:00000000000076B7                 db    0
.eh_frame:00000000000076B8                 db 0B8h
.eh_frame:00000000000076B9                 db 0D3h
.eh_frame:00000000000076BA                 db 0FFh
.eh_frame:00000000000076BB                 db 0FFh
.eh_frame:00000000000076BC                 db  0Ch
.eh_frame:00000000000076BD                 db    0
.eh_frame:00000000000076BE                 db    0
.eh_frame:00000000000076BF                 db    0
.eh_frame:00000000000076C0                 db    0
.eh_frame:00000000000076C1                 db    0
.eh_frame:00000000000076C2                 db    0
.eh_frame:00000000000076C3                 db    0
.eh_frame:00000000000076C4                 db  10h
.eh_frame:00000000000076C5                 db    0
.eh_frame:00000000000076C6                 db    0
.eh_frame:00000000000076C7                 db    0
.eh_frame:00000000000076C8                 db 0C0h
.eh_frame:00000000000076C9                 db    6
.eh_frame:00000000000076CA                 db    0
.eh_frame:00000000000076CB                 db    0
.eh_frame:00000000000076CC                 db 0B4h
.eh_frame:00000000000076CD                 db 0D3h
.eh_frame:00000000000076CE                 db 0FFh
.eh_frame:00000000000076CF                 db 0FFh
.eh_frame:00000000000076D0                 db  17h
.eh_frame:00000000000076D1                 db    0
.eh_frame:00000000000076D2                 db    0
.eh_frame:00000000000076D3                 db    0
.eh_frame:00000000000076D4                 db    0
.eh_frame:00000000000076D5                 db    0
.eh_frame:00000000000076D6                 db    0
.eh_frame:00000000000076D7                 db    0
.eh_frame:00000000000076D8                 db  10h
.eh_frame:00000000000076D9                 db    0
.eh_frame:00000000000076DA                 db    0
.eh_frame:00000000000076DB                 db    0
.eh_frame:00000000000076DC                 db 0D4h
.eh_frame:00000000000076DD                 db    6
.eh_frame:00000000000076DE                 db    0
.eh_frame:00000000000076DF                 db    0
.eh_frame:00000000000076E0                 db 0C0h
.eh_frame:00000000000076E1                 db 0D3h
.eh_frame:00000000000076E2                 db 0FFh
.eh_frame:00000000000076E3                 db 0FFh
.eh_frame:00000000000076E4                 db  13h
.eh_frame:00000000000076E5                 db    0
.eh_frame:00000000000076E6                 db    0
.eh_frame:00000000000076E7                 db    0
.eh_frame:00000000000076E8                 db    0
.eh_frame:00000000000076E9                 db    0
.eh_frame:00000000000076EA                 db    0
.eh_frame:00000000000076EB                 db    0
.eh_frame:00000000000076EC                 db  10h
.eh_frame:00000000000076ED                 db    0
.eh_frame:00000000000076EE                 db    0
.eh_frame:00000000000076EF                 db    0
.eh_frame:00000000000076F0                 db 0E8h
.eh_frame:00000000000076F1                 db    6
.eh_frame:00000000000076F2                 db    0
.eh_frame:00000000000076F3                 db    0
.eh_frame:00000000000076F4                 db 0CCh
.eh_frame:00000000000076F5                 db 0D3h
.eh_frame:00000000000076F6                 db 0FFh
.eh_frame:00000000000076F7                 db 0FFh
.eh_frame:00000000000076F8                 db  0Ch
.eh_frame:00000000000076F9                 db    0
.eh_frame:00000000000076FA                 db    0
.eh_frame:00000000000076FB                 db    0
.eh_frame:00000000000076FC                 db    0
.eh_frame:00000000000076FD                 db    0
.eh_frame:00000000000076FE                 db    0
.eh_frame:00000000000076FF                 db    0
.eh_frame:0000000000007700                 db  10h
.eh_frame:0000000000007701                 db    0
.eh_frame:0000000000007702                 db    0
.eh_frame:0000000000007703                 db    0
.eh_frame:0000000000007704                 db 0FCh
.eh_frame:0000000000007705                 db    6
.eh_frame:0000000000007706                 db    0
.eh_frame:0000000000007707                 db    0
.eh_frame:0000000000007708                 db 0C8h
.eh_frame:0000000000007709                 db 0D3h
.eh_frame:000000000000770A                 db 0FFh
.eh_frame:000000000000770B                 db 0FFh
.eh_frame:000000000000770C                 db  14h
.eh_frame:000000000000770D                 db    0
.eh_frame:000000000000770E                 db    0
.eh_frame:000000000000770F                 db    0
.eh_frame:0000000000007710                 db    0
.eh_frame:0000000000007711                 db    0
.eh_frame:0000000000007712                 db    0
.eh_frame:0000000000007713                 db    0
.eh_frame:0000000000007714                 db  10h
.eh_frame:0000000000007715                 db    0
.eh_frame:0000000000007716                 db    0
.eh_frame:0000000000007717                 db    0
.eh_frame:0000000000007718                 db  10h
.eh_frame:0000000000007719                 db    7
.eh_frame:000000000000771A                 db    0
.eh_frame:000000000000771B                 db    0
.eh_frame:000000000000771C                 db 0D4h
.eh_frame:000000000000771D                 db 0D3h
.eh_frame:000000000000771E                 db 0FFh
.eh_frame:000000000000771F                 db 0FFh
.eh_frame:0000000000007720                 db  13h
.eh_frame:0000000000007721                 db    0
.eh_frame:0000000000007722                 db    0
.eh_frame:0000000000007723                 db    0
.eh_frame:0000000000007724                 db    0
.eh_frame:0000000000007725                 db    0
.eh_frame:0000000000007726                 db    0
.eh_frame:0000000000007727                 db    0
.eh_frame:0000000000007728                 db  14h
.eh_frame:0000000000007729                 db    0
.eh_frame:000000000000772A                 db    0
.eh_frame:000000000000772B                 db    0
.eh_frame:000000000000772C                 db  24h ; $
.eh_frame:000000000000772D                 db    7
.eh_frame:000000000000772E                 db    0
.eh_frame:000000000000772F                 db    0
.eh_frame:0000000000007730                 db 0E0h
.eh_frame:0000000000007731                 db 0D3h
.eh_frame:0000000000007732                 db 0FFh
.eh_frame:0000000000007733                 db 0FFh
.eh_frame:0000000000007734                 db  18h
.eh_frame:0000000000007735                 db    0
.eh_frame:0000000000007736                 db    0
.eh_frame:0000000000007737                 db    0
.eh_frame:0000000000007738                 db    0
.eh_frame:0000000000007739                 db    0
.eh_frame:000000000000773A                 db    0
.eh_frame:000000000000773B                 db    0
.eh_frame:000000000000773C                 db    0
.eh_frame:000000000000773D                 db    0
.eh_frame:000000000000773E                 db    0
.eh_frame:000000000000773F                 db    0
.eh_frame:0000000000007740                 db  10h
.eh_frame:0000000000007741                 db    1
.eh_frame:0000000000007742                 db    0
.eh_frame:0000000000007743                 db    0
.eh_frame:0000000000007744                 db  3Ch ; <
.eh_frame:0000000000007745                 db    7
.eh_frame:0000000000007746                 db    0
.eh_frame:0000000000007747                 db    0
.eh_frame:0000000000007748                 db 0E8h
.eh_frame:0000000000007749                 db 0D3h
.eh_frame:000000000000774A                 db 0FFh
.eh_frame:000000000000774B                 db 0FFh
.eh_frame:000000000000774C                 db  17h
.eh_frame:000000000000774D                 db    4
.eh_frame:000000000000774E                 db    0
.eh_frame:000000000000774F                 db    0
.eh_frame:0000000000007750                 db    0
.eh_frame:0000000000007751                 db  42h ; B
.eh_frame:0000000000007752                 db  0Eh
.eh_frame:0000000000007753                 db  10h
.eh_frame:0000000000007754                 db  8Fh
.eh_frame:0000000000007755                 db    2
.eh_frame:0000000000007756                 db  42h ; B
.eh_frame:0000000000007757                 db  0Eh
.eh_frame:0000000000007758                 db  18h
.eh_frame:0000000000007759                 db  8Eh
.eh_frame:000000000000775A                 db    3
.eh_frame:000000000000775B                 db  42h ; B
.eh_frame:000000000000775C                 db  0Eh
.eh_frame:000000000000775D                 db  20h
.eh_frame:000000000000775E                 db  8Dh
.eh_frame:000000000000775F                 db    4
.eh_frame:0000000000007760                 db  42h ; B
.eh_frame:0000000000007761                 db  0Eh
.eh_frame:0000000000007762                 db  28h ; (
.eh_frame:0000000000007763                 db  8Ch
.eh_frame:0000000000007764                 db    5
.eh_frame:0000000000007765                 db  44h ; D
.eh_frame:0000000000007766                 db  0Eh
.eh_frame:0000000000007767                 db  30h ; 0
.eh_frame:0000000000007768                 db  86h
.eh_frame:0000000000007769                 db    6
.eh_frame:000000000000776A                 db  41h ; A
.eh_frame:000000000000776B                 db  0Eh
.eh_frame:000000000000776C                 db  38h ; 8
.eh_frame:000000000000776D                 db  83h
.eh_frame:000000000000776E                 db    7
.eh_frame:000000000000776F                 db  4Ah ; J
.eh_frame:0000000000007770                 db  0Eh
.eh_frame:0000000000007771                 db  60h ; `
.eh_frame:0000000000007772                 db    2
.eh_frame:0000000000007773                 db 0DDh
.eh_frame:0000000000007774                 db  0Eh
.eh_frame:0000000000007775                 db  68h ; h
.eh_frame:0000000000007776                 db  57h ; W
.eh_frame:0000000000007777                 db  0Eh
.eh_frame:0000000000007778                 db  70h ; p
.eh_frame:0000000000007779                 db  42h ; B
.eh_frame:000000000000777A                 db  0Eh
.eh_frame:000000000000777B                 db  78h ; x
.eh_frame:000000000000777C                 db  42h ; B
.eh_frame:000000000000777D                 db  0Eh
.eh_frame:000000000000777E                 db  80h
.eh_frame:000000000000777F                 db    1
.eh_frame:0000000000007780                 db  42h ; B
.eh_frame:0000000000007781                 db  0Eh
.eh_frame:0000000000007782                 db  88h
.eh_frame:0000000000007783                 db    1
.eh_frame:0000000000007784                 db  42h ; B
.eh_frame:0000000000007785                 db  0Eh
.eh_frame:0000000000007786                 db  90h
.eh_frame:0000000000007787                 db    1
.eh_frame:0000000000007788                 db  53h ; S
.eh_frame:0000000000007789                 db  0Eh
.eh_frame:000000000000778A                 db  60h ; `
.eh_frame:000000000000778B                 db  44h ; D
.eh_frame:000000000000778C                 db  0Ah
.eh_frame:000000000000778D                 db  0Eh
.eh_frame:000000000000778E                 db  38h ; 8
.eh_frame:000000000000778F                 db  41h ; A
.eh_frame:0000000000007790                 db  0Eh
.eh_frame:0000000000007791                 db  30h ; 0
.eh_frame:0000000000007792                 db  41h ; A
.eh_frame:0000000000007793                 db  0Eh
.eh_frame:0000000000007794                 db  28h ; (
.eh_frame:0000000000007795                 db  42h ; B
.eh_frame:0000000000007796                 db  0Eh
.eh_frame:0000000000007797                 db  20h
.eh_frame:0000000000007798                 db  42h ; B
.eh_frame:0000000000007799                 db  0Eh
.eh_frame:000000000000779A                 db  18h
.eh_frame:000000000000779B                 db  42h ; B
.eh_frame:000000000000779C                 db  0Eh
.eh_frame:000000000000779D                 db  10h
.eh_frame:000000000000779E                 db  42h ; B
.eh_frame:000000000000779F                 db  0Eh
.eh_frame:00000000000077A0                 db    8
.eh_frame:00000000000077A1                 db  44h ; D
.eh_frame:00000000000077A2                 db  0Bh
.eh_frame:00000000000077A3                 db    2
.eh_frame:00000000000077A4                 db  78h ; x
.eh_frame:00000000000077A5                 db  0Ah
.eh_frame:00000000000077A6                 db  0Eh
.eh_frame:00000000000077A7                 db  68h ; h
.eh_frame:00000000000077A8                 db  48h ; H
.eh_frame:00000000000077A9                 db  0Bh
.eh_frame:00000000000077AA                 db  5Ah ; Z
.eh_frame:00000000000077AB                 db  0Ah
.eh_frame:00000000000077AC                 db  0Eh
.eh_frame:00000000000077AD                 db  38h ; 8
.eh_frame:00000000000077AE                 db  47h ; G
.eh_frame:00000000000077AF                 db  0Eh
.eh_frame:00000000000077B0                 db  30h ; 0
.eh_frame:00000000000077B1                 db  41h ; A
.eh_frame:00000000000077B2                 db  0Eh
.eh_frame:00000000000077B3                 db  28h ; (
.eh_frame:00000000000077B4                 db  42h ; B
.eh_frame:00000000000077B5                 db  0Eh
.eh_frame:00000000000077B6                 db  20h
.eh_frame:00000000000077B7                 db  42h ; B
.eh_frame:00000000000077B8                 db  0Eh
.eh_frame:00000000000077B9                 db  18h
.eh_frame:00000000000077BA                 db  42h ; B
.eh_frame:00000000000077BB                 db  0Eh
.eh_frame:00000000000077BC                 db  10h
.eh_frame:00000000000077BD                 db  42h ; B
.eh_frame:00000000000077BE                 db  0Eh
.eh_frame:00000000000077BF                 db    8
.eh_frame:00000000000077C0                 db  56h ; V
.eh_frame:00000000000077C1                 db  0Bh
.eh_frame:00000000000077C2                 db  5Eh ; ^
.eh_frame:00000000000077C3                 db  0Ah
.eh_frame:00000000000077C4                 db  0Eh
.eh_frame:00000000000077C5                 db  38h ; 8
.eh_frame:00000000000077C6                 db  52h ; R
.eh_frame:00000000000077C7                 db  0Eh
.eh_frame:00000000000077C8                 db  30h ; 0
.eh_frame:00000000000077C9                 db  41h ; A
.eh_frame:00000000000077CA                 db  0Eh
.eh_frame:00000000000077CB                 db  28h ; (
.eh_frame:00000000000077CC                 db  42h ; B
.eh_frame:00000000000077CD                 db  0Eh
.eh_frame:00000000000077CE                 db  20h
.eh_frame:00000000000077CF                 db  42h ; B
.eh_frame:00000000000077D0                 db  0Eh
.eh_frame:00000000000077D1                 db  18h
.eh_frame:00000000000077D2                 db  42h ; B
.eh_frame:00000000000077D3                 db  0Eh
.eh_frame:00000000000077D4                 db  10h
.eh_frame:00000000000077D5                 db  42h ; B
.eh_frame:00000000000077D6                 db  0Eh
.eh_frame:00000000000077D7                 db    8
.eh_frame:00000000000077D8                 db  4Fh ; O
.eh_frame:00000000000077D9                 db  0Bh
.eh_frame:00000000000077DA                 db  62h ; b
.eh_frame:00000000000077DB                 db  0Ah
.eh_frame:00000000000077DC                 db  0Eh
.eh_frame:00000000000077DD                 db  38h ; 8
.eh_frame:00000000000077DE                 db  50h ; P
.eh_frame:00000000000077DF                 db  0Eh
.eh_frame:00000000000077E0                 db  30h ; 0
.eh_frame:00000000000077E1                 db  41h ; A
.eh_frame:00000000000077E2                 db  0Eh
.eh_frame:00000000000077E3                 db  28h ; (
.eh_frame:00000000000077E4                 db  42h ; B
.eh_frame:00000000000077E5                 db  0Eh
.eh_frame:00000000000077E6                 db  20h
.eh_frame:00000000000077E7                 db  42h ; B
.eh_frame:00000000000077E8                 db  0Eh
.eh_frame:00000000000077E9                 db  18h
.eh_frame:00000000000077EA                 db  42h ; B
.eh_frame:00000000000077EB                 db  0Eh
.eh_frame:00000000000077EC                 db  10h
.eh_frame:00000000000077ED                 db  42h ; B
.eh_frame:00000000000077EE                 db  0Eh
.eh_frame:00000000000077EF                 db    8
.eh_frame:00000000000077F0                 db  55h ; U
.eh_frame:00000000000077F1                 db  0Bh
.eh_frame:00000000000077F2                 db  66h ; f
.eh_frame:00000000000077F3                 db  0Eh
.eh_frame:00000000000077F4                 db  68h ; h
.eh_frame:00000000000077F5                 db  42h ; B
.eh_frame:00000000000077F6                 db  0Eh
.eh_frame:00000000000077F7                 db  70h ; p
.eh_frame:00000000000077F8                 db  5Ch ; \
.eh_frame:00000000000077F9                 db  0Eh
.eh_frame:00000000000077FA                 db  68h ; h
.eh_frame:00000000000077FB                 db  41h ; A
.eh_frame:00000000000077FC                 db  0Eh
.eh_frame:00000000000077FD                 db  60h ; `
.eh_frame:00000000000077FE                 db  44h ; D
.eh_frame:00000000000077FF                 db  0Ah
.eh_frame:0000000000007800                 db  0Eh
.eh_frame:0000000000007801                 db  38h ; 8
.eh_frame:0000000000007802                 db  41h ; A
.eh_frame:0000000000007803                 db  0Eh
.eh_frame:0000000000007804                 db  30h ; 0
.eh_frame:0000000000007805                 db  41h ; A
.eh_frame:0000000000007806                 db  0Eh
.eh_frame:0000000000007807                 db  28h ; (
.eh_frame:0000000000007808                 db  42h ; B
.eh_frame:0000000000007809                 db  0Eh
.eh_frame:000000000000780A                 db  20h
.eh_frame:000000000000780B                 db  42h ; B
.eh_frame:000000000000780C                 db  0Eh
.eh_frame:000000000000780D                 db  18h
.eh_frame:000000000000780E                 db  42h ; B
.eh_frame:000000000000780F                 db  0Eh
.eh_frame:0000000000007810                 db  10h
.eh_frame:0000000000007811                 db  42h ; B
.eh_frame:0000000000007812                 db  0Eh
.eh_frame:0000000000007813                 db    8
.eh_frame:0000000000007814                 db  45h ; E
.eh_frame:0000000000007815                 db  0Bh
.eh_frame:0000000000007816                 db  68h ; h
.eh_frame:0000000000007817                 db  0Ah
.eh_frame:0000000000007818                 db  0Eh
.eh_frame:0000000000007819                 db  68h ; h
.eh_frame:000000000000781A                 db  48h ; H
.eh_frame:000000000000781B                 db  0Bh
.eh_frame:000000000000781C                 db  72h ; r
.eh_frame:000000000000781D                 db  0Eh
.eh_frame:000000000000781E                 db  68h ; h
.eh_frame:000000000000781F                 db  45h ; E
.eh_frame:0000000000007820                 db  0Eh
.eh_frame:0000000000007821                 db  70h ; p
.eh_frame:0000000000007822                 db  42h ; B
.eh_frame:0000000000007823                 db  0Eh
.eh_frame:0000000000007824                 db  78h ; x
.eh_frame:0000000000007825                 db  42h ; B
.eh_frame:0000000000007826                 db  0Eh
.eh_frame:0000000000007827                 db  80h
.eh_frame:0000000000007828                 db    1
.eh_frame:0000000000007829                 db  5Eh ; ^
.eh_frame:000000000000782A                 db  0Eh
.eh_frame:000000000000782B                 db  60h ; `
.eh_frame:000000000000782C                 db  44h ; D
.eh_frame:000000000000782D                 db  0Ah
.eh_frame:000000000000782E                 db  0Eh
.eh_frame:000000000000782F                 db  38h ; 8
.eh_frame:0000000000007830                 db  41h ; A
.eh_frame:0000000000007831                 db  0Eh
.eh_frame:0000000000007832                 db  30h ; 0
.eh_frame:0000000000007833                 db  41h ; A
.eh_frame:0000000000007834                 db  0Eh
.eh_frame:0000000000007835                 db  28h ; (
.eh_frame:0000000000007836                 db  42h ; B
.eh_frame:0000000000007837                 db  0Eh
.eh_frame:0000000000007838                 db  20h
.eh_frame:0000000000007839                 db  42h ; B
.eh_frame:000000000000783A                 db  0Eh
.eh_frame:000000000000783B                 db  18h
.eh_frame:000000000000783C                 db  42h ; B
.eh_frame:000000000000783D                 db  0Eh
.eh_frame:000000000000783E                 db  10h
.eh_frame:000000000000783F                 db  42h ; B
.eh_frame:0000000000007840                 db  0Eh
.eh_frame:0000000000007841                 db    8
.eh_frame:0000000000007842                 db  41h ; A
.eh_frame:0000000000007843                 db  0Bh
.eh_frame:0000000000007844                 db  79h ; y
.eh_frame:0000000000007845                 db  0Ah
.eh_frame:0000000000007846                 db  0Eh
.eh_frame:0000000000007847                 db  68h ; h
.eh_frame:0000000000007848                 db  42h ; B
.eh_frame:0000000000007849                 db  0Eh
.eh_frame:000000000000784A                 db  70h ; p
.eh_frame:000000000000784B                 db  42h ; B
.eh_frame:000000000000784C                 db  0Eh
.eh_frame:000000000000784D                 db  78h ; x
.eh_frame:000000000000784E                 db  42h ; B
.eh_frame:000000000000784F                 db  0Eh
.eh_frame:0000000000007850                 db  80h
.eh_frame:0000000000007851                 db    1
.eh_frame:0000000000007852                 db  51h ; Q
.eh_frame:0000000000007853                 db  0Bh
.eh_frame:0000000000007854                 db  10h
.eh_frame:0000000000007855                 db    0
.eh_frame:0000000000007856                 db    0
.eh_frame:0000000000007857                 db    0
.eh_frame:0000000000007858                 db  50h ; P
.eh_frame:0000000000007859                 db    8
.eh_frame:000000000000785A                 db    0
.eh_frame:000000000000785B                 db    0
.eh_frame:000000000000785C                 db 0F4h
.eh_frame:000000000000785D                 db 0D6h
.eh_frame:000000000000785E                 db 0FFh
.eh_frame:000000000000785F                 db 0FFh
.eh_frame:0000000000007860                 db  20h
.eh_frame:0000000000007861                 db    0
.eh_frame:0000000000007862                 db    0
.eh_frame:0000000000007863                 db    0
.eh_frame:0000000000007864                 db    0
.eh_frame:0000000000007865                 db    0
.eh_frame:0000000000007866                 db    0
.eh_frame:0000000000007867                 db    0
.eh_frame:0000000000007868                 db  18h
.eh_frame:0000000000007869                 db    0
.eh_frame:000000000000786A                 db    0
.eh_frame:000000000000786B                 db    0
.eh_frame:000000000000786C                 db  64h ; d
.eh_frame:000000000000786D                 db    8
.eh_frame:000000000000786E                 db    0
.eh_frame:000000000000786F                 db    0
.eh_frame:0000000000007870                 db    0
.eh_frame:0000000000007871                 db 0D7h
.eh_frame:0000000000007872                 db 0FFh
.eh_frame:0000000000007873                 db 0FFh
.eh_frame:0000000000007874                 db  78h ; x
.eh_frame:0000000000007875                 db    0
.eh_frame:0000000000007876                 db    0
.eh_frame:0000000000007877                 db    0
.eh_frame:0000000000007878                 db    0
.eh_frame:0000000000007879                 db  44h ; D
.eh_frame:000000000000787A                 db  0Eh
.eh_frame:000000000000787B                 db  70h ; p
.eh_frame:000000000000787C                 db    2
.eh_frame:000000000000787D                 db  60h ; `
.eh_frame:000000000000787E                 db  0Ah
.eh_frame:000000000000787F                 db  0Eh
.eh_frame:0000000000007880                 db    8
.eh_frame:0000000000007881                 db  41h ; A
.eh_frame:0000000000007882                 db  0Bh
.eh_frame:0000000000007883                 db    0
.eh_frame:0000000000007884                 db  28h ; (
.eh_frame:0000000000007885                 db    0
.eh_frame:0000000000007886                 db    0
.eh_frame:0000000000007887                 db    0
.eh_frame:0000000000007888                 db  80h
.eh_frame:0000000000007889                 db    8
.eh_frame:000000000000788A                 db    0
.eh_frame:000000000000788B                 db    0
.eh_frame:000000000000788C                 db  64h ; d
.eh_frame:000000000000788D                 db 0D7h
.eh_frame:000000000000788E                 db 0FFh
.eh_frame:000000000000788F                 db 0FFh
.eh_frame:0000000000007890                 db 0D5h
.eh_frame:0000000000007891                 db    0
.eh_frame:0000000000007892                 db    0
.eh_frame:0000000000007893                 db    0
.eh_frame:0000000000007894                 db    0
.eh_frame:0000000000007895                 db  41h ; A
.eh_frame:0000000000007896                 db  0Eh
.eh_frame:0000000000007897                 db  10h
.eh_frame:0000000000007898                 db  86h
.eh_frame:0000000000007899                 db    2
.eh_frame:000000000000789A                 db  41h ; A
.eh_frame:000000000000789B                 db  0Eh
.eh_frame:000000000000789C                 db  18h
.eh_frame:000000000000789D                 db  83h
.eh_frame:000000000000789E                 db    3
.eh_frame:000000000000789F                 db  50h ; P
.eh_frame:00000000000078A0                 db  0Eh
.eh_frame:00000000000078A1                 db 0D0h
.eh_frame:00000000000078A2                 db    1
.eh_frame:00000000000078A3                 db    2
.eh_frame:00000000000078A4                 db 0ABh
.eh_frame:00000000000078A5                 db  0Ah
.eh_frame:00000000000078A6                 db  0Eh
.eh_frame:00000000000078A7                 db  18h
.eh_frame:00000000000078A8                 db  41h ; A
.eh_frame:00000000000078A9                 db  0Eh
.eh_frame:00000000000078AA                 db  10h
.eh_frame:00000000000078AB                 db  41h ; A
.eh_frame:00000000000078AC                 db  0Eh
.eh_frame:00000000000078AD                 db    8
.eh_frame:00000000000078AE                 db  41h ; A
.eh_frame:00000000000078AF                 db  0Bh
.eh_frame:00000000000078B0                 db  1Ch
.eh_frame:00000000000078B1                 db    0
.eh_frame:00000000000078B2                 db    0
.eh_frame:00000000000078B3                 db    0
.eh_frame:00000000000078B4                 db 0ACh
.eh_frame:00000000000078B5                 db    8
.eh_frame:00000000000078B6                 db    0
.eh_frame:00000000000078B7                 db    0
.eh_frame:00000000000078B8                 db  18h
.eh_frame:00000000000078B9                 db 0D8h
.eh_frame:00000000000078BA                 db 0FFh
.eh_frame:00000000000078BB                 db 0FFh
.eh_frame:00000000000078BC                 db  80h
.eh_frame:00000000000078BD                 db    0
.eh_frame:00000000000078BE                 db    0
.eh_frame:00000000000078BF                 db    0
.eh_frame:00000000000078C0                 db    0
.eh_frame:00000000000078C1                 db  41h ; A
.eh_frame:00000000000078C2                 db  0Eh
.eh_frame:00000000000078C3                 db  10h
.eh_frame:00000000000078C4                 db  83h
.eh_frame:00000000000078C5                 db    2
.eh_frame:00000000000078C6                 db    2
.eh_frame:00000000000078C7                 db  7Ah ; z
.eh_frame:00000000000078C8                 db  0Eh
.eh_frame:00000000000078C9                 db    8
.eh_frame:00000000000078CA                 db    0
.eh_frame:00000000000078CB                 db    0
.eh_frame:00000000000078CC                 db    0
.eh_frame:00000000000078CD                 db    0
.eh_frame:00000000000078CE                 db    0
.eh_frame:00000000000078CF                 db    0
.eh_frame:00000000000078D0                 db  18h
.eh_frame:00000000000078D1                 db    0
.eh_frame:00000000000078D2                 db    0
.eh_frame:00000000000078D3                 db    0
.eh_frame:00000000000078D4                 db 0CCh
.eh_frame:00000000000078D5                 db    8
.eh_frame:00000000000078D6                 db    0
.eh_frame:00000000000078D7                 db    0
.eh_frame:00000000000078D8                 db  78h ; x
.eh_frame:00000000000078D9                 db 0D8h
.eh_frame:00000000000078DA                 db 0FFh
.eh_frame:00000000000078DB                 db 0FFh
.eh_frame:00000000000078DC                 db  1Ah
.eh_frame:00000000000078DD                 db    0
.eh_frame:00000000000078DE                 db    0
.eh_frame:00000000000078DF                 db    0
.eh_frame:00000000000078E0                 db    0
.eh_frame:00000000000078E1                 db  41h ; A
.eh_frame:00000000000078E2                 db  0Eh
.eh_frame:00000000000078E3                 db  10h
.eh_frame:00000000000078E4                 db  83h
.eh_frame:00000000000078E5                 db    2
.eh_frame:00000000000078E6                 db  53h ; S
.eh_frame:00000000000078E7                 db  0Ah
.eh_frame:00000000000078E8                 db  0Eh
.eh_frame:00000000000078E9                 db    8
.eh_frame:00000000000078EA                 db  41h ; A
.eh_frame:00000000000078EB                 db  0Bh
.eh_frame:00000000000078EC                 db  10h
.eh_frame:00000000000078ED                 db    0
.eh_frame:00000000000078EE                 db    0
.eh_frame:00000000000078EF                 db    0
.eh_frame:00000000000078F0                 db 0E8h
.eh_frame:00000000000078F1                 db    8
.eh_frame:00000000000078F2                 db    0
.eh_frame:00000000000078F3                 db    0
.eh_frame:00000000000078F4                 db  7Ch ; |
.eh_frame:00000000000078F5                 db 0D8h
.eh_frame:00000000000078F6                 db 0FFh
.eh_frame:00000000000078F7                 db 0FFh
.eh_frame:00000000000078F8                 db  24h ; $
.eh_frame:00000000000078F9                 db    0
.eh_frame:00000000000078FA                 db    0
.eh_frame:00000000000078FB                 db    0
.eh_frame:00000000000078FC                 db    0
.eh_frame:00000000000078FD                 db  5Fh ; _
.eh_frame:00000000000078FE                 db  0Eh
.eh_frame:00000000000078FF                 db  10h
.eh_frame:0000000000007900                 db  10h
.eh_frame:0000000000007901                 db    0
.eh_frame:0000000000007902                 db    0
.eh_frame:0000000000007903                 db    0
.eh_frame:0000000000007904                 db 0FCh
.eh_frame:0000000000007905                 db    8
.eh_frame:0000000000007906                 db    0
.eh_frame:0000000000007907                 db    0
.eh_frame:0000000000007908                 db  98h
.eh_frame:0000000000007909                 db 0D8h
.eh_frame:000000000000790A                 db 0FFh
.eh_frame:000000000000790B                 db 0FFh
.eh_frame:000000000000790C                 db    2
.eh_frame:000000000000790D                 db    0
.eh_frame:000000000000790E                 db    0
.eh_frame:000000000000790F                 db    0
.eh_frame:0000000000007910                 db    0
.eh_frame:0000000000007911                 db    0
.eh_frame:0000000000007912                 db    0
.eh_frame:0000000000007913                 db    0
.eh_frame:0000000000007914                 db  20h
.eh_frame:0000000000007915                 db    0
.eh_frame:0000000000007916                 db    0
.eh_frame:0000000000007917                 db    0
.eh_frame:0000000000007918                 db  10h
.eh_frame:0000000000007919                 db    9
.eh_frame:000000000000791A                 db    0
.eh_frame:000000000000791B                 db    0
.eh_frame:000000000000791C                 db  94h
.eh_frame:000000000000791D                 db 0D8h
.eh_frame:000000000000791E                 db 0FFh
.eh_frame:000000000000791F                 db 0FFh
.eh_frame:0000000000007920                 db  36h ; 6
.eh_frame:0000000000007921                 db    0
.eh_frame:0000000000007922                 db    0
.eh_frame:0000000000007923                 db    0
.eh_frame:0000000000007924                 db    0
.eh_frame:0000000000007925                 db  44h ; D
.eh_frame:0000000000007926                 db  0Eh
.eh_frame:0000000000007927                 db  10h
.eh_frame:0000000000007928                 db  83h
.eh_frame:0000000000007929                 db    2
.eh_frame:000000000000792A                 db  5Dh ; ]
.eh_frame:000000000000792B                 db  0Ah
.eh_frame:000000000000792C                 db  0Eh
.eh_frame:000000000000792D                 db    8
.eh_frame:000000000000792E                 db  47h ; G
.eh_frame:000000000000792F                 db  0Bh
.eh_frame:0000000000007930                 db  48h ; H
.eh_frame:0000000000007931                 db  0Ah
.eh_frame:0000000000007932                 db  0Eh
.eh_frame:0000000000007933                 db    8
.eh_frame:0000000000007934                 db  41h ; A
.eh_frame:0000000000007935                 db  0Bh
.eh_frame:0000000000007936                 db    0
.eh_frame:0000000000007937                 db    0
.eh_frame:0000000000007938                 db  10h
.eh_frame:0000000000007939                 db    0
.eh_frame:000000000000793A                 db    0
.eh_frame:000000000000793B                 db    0
.eh_frame:000000000000793C                 db  34h ; 4
.eh_frame:000000000000793D                 db    9
.eh_frame:000000000000793E                 db    0
.eh_frame:000000000000793F                 db    0
.eh_frame:0000000000007940                 db 0B0h
.eh_frame:0000000000007941                 db 0D8h
.eh_frame:0000000000007942                 db 0FFh
.eh_frame:0000000000007943                 db 0FFh
.eh_frame:0000000000007944                 db  24h ; $
.eh_frame:0000000000007945                 db    0
.eh_frame:0000000000007946                 db    0
.eh_frame:0000000000007947                 db    0
.eh_frame:0000000000007948                 db    0
.eh_frame:0000000000007949                 db  5Fh ; _
.eh_frame:000000000000794A                 db  0Eh
.eh_frame:000000000000794B                 db  10h
.eh_frame:000000000000794C                 db  14h
.eh_frame:000000000000794D                 db    0
.eh_frame:000000000000794E                 db    0
.eh_frame:000000000000794F                 db    0
.eh_frame:0000000000007950                 db  48h ; H
.eh_frame:0000000000007951                 db    9
.eh_frame:0000000000007952                 db    0
.eh_frame:0000000000007953                 db    0
.eh_frame:0000000000007954                 db 0CCh
.eh_frame:0000000000007955                 db 0D8h
.eh_frame:0000000000007956                 db 0FFh
.eh_frame:0000000000007957                 db 0FFh
.eh_frame:0000000000007958                 db  82h
.eh_frame:0000000000007959                 db    0
.eh_frame:000000000000795A                 db    0
.eh_frame:000000000000795B                 db    0
.eh_frame:000000000000795C                 db    0
.eh_frame:000000000000795D                 db    2
.eh_frame:000000000000795E                 db  5Fh ; _
.eh_frame:000000000000795F                 db  0Eh
.eh_frame:0000000000007960                 db  10h
.eh_frame:0000000000007961                 db  49h ; I
.eh_frame:0000000000007962                 db  0Eh
.eh_frame:0000000000007963                 db    8
.eh_frame:0000000000007964                 db  14h
.eh_frame:0000000000007965                 db    0
.eh_frame:0000000000007966                 db    0
.eh_frame:0000000000007967                 db    0
.eh_frame:0000000000007968                 db  60h ; `
.eh_frame:0000000000007969                 db    9
.eh_frame:000000000000796A                 db    0
.eh_frame:000000000000796B                 db    0
.eh_frame:000000000000796C                 db  44h ; D
.eh_frame:000000000000796D                 db 0D9h
.eh_frame:000000000000796E                 db 0FFh
.eh_frame:000000000000796F                 db 0FFh
.eh_frame:0000000000007970                 db  4Ah ; J
.eh_frame:0000000000007971                 db    0
.eh_frame:0000000000007972                 db    0
.eh_frame:0000000000007973                 db    0
.eh_frame:0000000000007974                 db    0
.eh_frame:0000000000007975                 db    2
.eh_frame:0000000000007976                 db  45h ; E
.eh_frame:0000000000007977                 db  0Eh
.eh_frame:0000000000007978                 db  10h
.eh_frame:0000000000007979                 db    0
.eh_frame:000000000000797A                 db    0
.eh_frame:000000000000797B                 db    0
.eh_frame:000000000000797C                 db  18h
.eh_frame:000000000000797D                 db    0
.eh_frame:000000000000797E                 db    0
.eh_frame:000000000000797F                 db    0
.eh_frame:0000000000007980                 db  78h ; x
.eh_frame:0000000000007981                 db    9
.eh_frame:0000000000007982                 db    0
.eh_frame:0000000000007983                 db    0
.eh_frame:0000000000007984                 db  7Ch ; |
.eh_frame:0000000000007985                 db 0D9h
.eh_frame:0000000000007986                 db 0FFh
.eh_frame:0000000000007987                 db 0FFh
.eh_frame:0000000000007988                 db  17h
.eh_frame:0000000000007989                 db    0
.eh_frame:000000000000798A                 db    0
.eh_frame:000000000000798B                 db    0
.eh_frame:000000000000798C                 db    0
.eh_frame:000000000000798D                 db  41h ; A
.eh_frame:000000000000798E                 db  0Eh
.eh_frame:000000000000798F                 db  10h
.eh_frame:0000000000007990                 db  83h
.eh_frame:0000000000007991                 db    2
.eh_frame:0000000000007992                 db  51h ; Q
.eh_frame:0000000000007993                 db  0Eh
.eh_frame:0000000000007994                 db    8
.eh_frame:0000000000007995                 db    0
.eh_frame:0000000000007996                 db    0
.eh_frame:0000000000007997                 db    0
.eh_frame:0000000000007998                 db  18h
.eh_frame:0000000000007999                 db    0
.eh_frame:000000000000799A                 db    0
.eh_frame:000000000000799B                 db    0
.eh_frame:000000000000799C                 db  94h
.eh_frame:000000000000799D                 db    9
.eh_frame:000000000000799E                 db    0
.eh_frame:000000000000799F                 db    0
.eh_frame:00000000000079A0                 db  80h
.eh_frame:00000000000079A1                 db 0D9h
.eh_frame:00000000000079A2                 db 0FFh
.eh_frame:00000000000079A3                 db 0FFh
.eh_frame:00000000000079A4                 db  2Eh ; .
.eh_frame:00000000000079A5                 db    0
.eh_frame:00000000000079A6                 db    0
.eh_frame:00000000000079A7                 db    0
.eh_frame:00000000000079A8                 db    0
.eh_frame:00000000000079A9                 db  47h ; G
.eh_frame:00000000000079AA                 db  0Eh
.eh_frame:00000000000079AB                 db  10h
.eh_frame:00000000000079AC                 db  61h ; a
.eh_frame:00000000000079AD                 db  0Ah
.eh_frame:00000000000079AE                 db  0Eh
.eh_frame:00000000000079AF                 db    8
.eh_frame:00000000000079B0                 db  41h ; A
.eh_frame:00000000000079B1                 db  0Bh
.eh_frame:00000000000079B2                 db    0
.eh_frame:00000000000079B3                 db    0
.eh_frame:00000000000079B4                 db  24h ; $
.eh_frame:00000000000079B5                 db    0
.eh_frame:00000000000079B6                 db    0
.eh_frame:00000000000079B7                 db    0
.eh_frame:00000000000079B8                 db 0B0h
.eh_frame:00000000000079B9                 db    9
.eh_frame:00000000000079BA                 db    0
.eh_frame:00000000000079BB                 db    0
.eh_frame:00000000000079BC                 db  94h
.eh_frame:00000000000079BD                 db 0D9h
.eh_frame:00000000000079BE                 db 0FFh
.eh_frame:00000000000079BF                 db 0FFh
.eh_frame:00000000000079C0                 db  28h ; (
.eh_frame:00000000000079C1                 db    0
.eh_frame:00000000000079C2                 db    0
.eh_frame:00000000000079C3                 db    0
.eh_frame:00000000000079C4                 db    0
.eh_frame:00000000000079C5                 db  41h ; A
.eh_frame:00000000000079C6                 db  0Eh
.eh_frame:00000000000079C7                 db  10h
.eh_frame:00000000000079C8                 db  86h
.eh_frame:00000000000079C9                 db    2
.eh_frame:00000000000079CA                 db  41h ; A
.eh_frame:00000000000079CB                 db  0Eh
.eh_frame:00000000000079CC                 db  18h
.eh_frame:00000000000079CD                 db  83h
.eh_frame:00000000000079CE                 db    3
.eh_frame:00000000000079CF                 db  4Dh ; M
.eh_frame:00000000000079D0                 db  0Eh
.eh_frame:00000000000079D1                 db  20h
.eh_frame:00000000000079D2                 db  49h ; I
.eh_frame:00000000000079D3                 db  0Eh
.eh_frame:00000000000079D4                 db  18h
.eh_frame:00000000000079D5                 db  47h ; G
.eh_frame:00000000000079D6                 db  0Eh
.eh_frame:00000000000079D7                 db  10h
.eh_frame:00000000000079D8                 db  41h ; A
.eh_frame:00000000000079D9                 db  0Eh
.eh_frame:00000000000079DA                 db    8
.eh_frame:00000000000079DB                 db    0
.eh_frame:00000000000079DC                 db  18h
.eh_frame:00000000000079DD                 db    0
.eh_frame:00000000000079DE                 db    0
.eh_frame:00000000000079DF                 db    0
.eh_frame:00000000000079E0                 db 0D8h
.eh_frame:00000000000079E1                 db    9
.eh_frame:00000000000079E2                 db    0
.eh_frame:00000000000079E3                 db    0
.eh_frame:00000000000079E4                 db  9Ch
.eh_frame:00000000000079E5                 db 0D9h
.eh_frame:00000000000079E6                 db 0FFh
.eh_frame:00000000000079E7                 db 0FFh
.eh_frame:00000000000079E8                 db  13h
.eh_frame:00000000000079E9                 db    0
.eh_frame:00000000000079EA                 db    0
.eh_frame:00000000000079EB                 db    0
.eh_frame:00000000000079EC                 db    0
.eh_frame:00000000000079ED                 db  41h ; A
.eh_frame:00000000000079EE                 db  0Eh
.eh_frame:00000000000079EF                 db  10h
.eh_frame:00000000000079F0                 db  83h
.eh_frame:00000000000079F1                 db    2
.eh_frame:00000000000079F2                 db  50h ; P
.eh_frame:00000000000079F3                 db  0Eh
.eh_frame:00000000000079F4                 db    8
.eh_frame:00000000000079F5                 db    0
.eh_frame:00000000000079F6                 db    0
.eh_frame:00000000000079F7                 db    0
.eh_frame:00000000000079F8                 db  14h
.eh_frame:00000000000079F9                 db    0
.eh_frame:00000000000079FA                 db    0
.eh_frame:00000000000079FB                 db    0
.eh_frame:00000000000079FC                 db 0F4h
.eh_frame:00000000000079FD                 db    9
.eh_frame:00000000000079FE                 db    0
.eh_frame:00000000000079FF                 db    0
.eh_frame:0000000000007A00                 db 0A0h
.eh_frame:0000000000007A01                 db 0D9h
.eh_frame:0000000000007A02                 db 0FFh
.eh_frame:0000000000007A03                 db 0FFh
.eh_frame:0000000000007A04                 db  35h ; 5
.eh_frame:0000000000007A05                 db    0
.eh_frame:0000000000007A06                 db    0
.eh_frame:0000000000007A07                 db    0
.eh_frame:0000000000007A08                 db    0
.eh_frame:0000000000007A09                 db  4Bh ; K
.eh_frame:0000000000007A0A                 db  0Eh
.eh_frame:0000000000007A0B                 db  10h
.eh_frame:0000000000007A0C                 db    0
.eh_frame:0000000000007A0D                 db    0
.eh_frame:0000000000007A0E                 db    0
.eh_frame:0000000000007A0F                 db    0
.eh_frame:0000000000007A10                 db  48h ; H
.eh_frame:0000000000007A11                 db    0
.eh_frame:0000000000007A12                 db    0
.eh_frame:0000000000007A13                 db    0
.eh_frame:0000000000007A14                 db  0Ch
.eh_frame:0000000000007A15                 db  0Ah
.eh_frame:0000000000007A16                 db    0
.eh_frame:0000000000007A17                 db    0
.eh_frame:0000000000007A18                 db 0C8h
.eh_frame:0000000000007A19                 db 0D9h
.eh_frame:0000000000007A1A                 db 0FFh
.eh_frame:0000000000007A1B                 db 0FFh
.eh_frame:0000000000007A1C                 db    0
.eh_frame:0000000000007A1D                 db    1
.eh_frame:0000000000007A1E                 db    0
.eh_frame:0000000000007A1F                 db    0
.eh_frame:0000000000007A20                 db    0
.eh_frame:0000000000007A21                 db  42h ; B
.eh_frame:0000000000007A22                 db  0Eh
.eh_frame:0000000000007A23                 db  10h
.eh_frame:0000000000007A24                 db  8Fh
.eh_frame:0000000000007A25                 db    2
.eh_frame:0000000000007A26                 db  42h ; B
.eh_frame:0000000000007A27                 db  0Eh
.eh_frame:0000000000007A28                 db  18h
.eh_frame:0000000000007A29                 db  8Eh
.eh_frame:0000000000007A2A                 db    3
.eh_frame:0000000000007A2B                 db  45h ; E
.eh_frame:0000000000007A2C                 db  0Eh
.eh_frame:0000000000007A2D                 db  20h
.eh_frame:0000000000007A2E                 db  8Dh
.eh_frame:0000000000007A2F                 db    4
.eh_frame:0000000000007A30                 db  42h ; B
.eh_frame:0000000000007A31                 db  0Eh
.eh_frame:0000000000007A32                 db  28h ; (
.eh_frame:0000000000007A33                 db  8Ch
.eh_frame:0000000000007A34                 db    5
.eh_frame:0000000000007A35                 db  44h ; D
.eh_frame:0000000000007A36                 db  0Eh
.eh_frame:0000000000007A37                 db  30h ; 0
.eh_frame:0000000000007A38                 db  86h
.eh_frame:0000000000007A39                 db    6
.eh_frame:0000000000007A3A                 db  41h ; A
.eh_frame:0000000000007A3B                 db  0Eh
.eh_frame:0000000000007A3C                 db  38h ; 8
.eh_frame:0000000000007A3D                 db  83h
.eh_frame:0000000000007A3E                 db    7
.eh_frame:0000000000007A3F                 db  4Eh ; N
.eh_frame:0000000000007A40                 db  0Eh
.eh_frame:0000000000007A41                 db  50h ; P
.eh_frame:0000000000007A42                 db    2
.eh_frame:0000000000007A43                 db  9Dh
.eh_frame:0000000000007A44                 db  0Ah
.eh_frame:0000000000007A45                 db  0Eh
.eh_frame:0000000000007A46                 db  38h ; 8
.eh_frame:0000000000007A47                 db  41h ; A
.eh_frame:0000000000007A48                 db  0Eh
.eh_frame:0000000000007A49                 db  30h ; 0
.eh_frame:0000000000007A4A                 db  41h ; A
.eh_frame:0000000000007A4B                 db  0Eh
.eh_frame:0000000000007A4C                 db  28h ; (
.eh_frame:0000000000007A4D                 db  42h ; B
.eh_frame:0000000000007A4E                 db  0Eh
.eh_frame:0000000000007A4F                 db  20h
.eh_frame:0000000000007A50                 db  42h ; B
.eh_frame:0000000000007A51                 db  0Eh
.eh_frame:0000000000007A52                 db  18h
.eh_frame:0000000000007A53                 db  42h ; B
.eh_frame:0000000000007A54                 db  0Eh
.eh_frame:0000000000007A55                 db  10h
.eh_frame:0000000000007A56                 db  42h ; B
.eh_frame:0000000000007A57                 db  0Eh
.eh_frame:0000000000007A58                 db    8
.eh_frame:0000000000007A59                 db  4Bh ; K
.eh_frame:0000000000007A5A                 db  0Bh
.eh_frame:0000000000007A5B                 db    0
.eh_frame:0000000000007A5C                 db  18h
.eh_frame:0000000000007A5D                 db    0
.eh_frame:0000000000007A5E                 db    0
.eh_frame:0000000000007A5F                 db    0
.eh_frame:0000000000007A60                 db  58h ; X
.eh_frame:0000000000007A61                 db  0Ah
.eh_frame:0000000000007A62                 db    0
.eh_frame:0000000000007A63                 db    0
.eh_frame:0000000000007A64                 db  7Ch ; |
.eh_frame:0000000000007A65                 db 0DAh
.eh_frame:0000000000007A66                 db 0FFh
.eh_frame:0000000000007A67                 db 0FFh
.eh_frame:0000000000007A68                 db  21h ; !
.eh_frame:0000000000007A69                 db    0
.eh_frame:0000000000007A6A                 db    0
.eh_frame:0000000000007A6B                 db    0
.eh_frame:0000000000007A6C                 db    0
.eh_frame:0000000000007A6D                 db  44h ; D
.eh_frame:0000000000007A6E                 db  0Eh
.eh_frame:0000000000007A6F                 db  18h
.eh_frame:0000000000007A70                 db  42h ; B
.eh_frame:0000000000007A71                 db  0Eh
.eh_frame:0000000000007A72                 db  20h
.eh_frame:0000000000007A73                 db  5Ah ; Z
.eh_frame:0000000000007A74                 db  0Eh
.eh_frame:0000000000007A75                 db    8
.eh_frame:0000000000007A76                 db    0
.eh_frame:0000000000007A77                 db    0
.eh_frame:0000000000007A78                 db  4Ch ; L
.eh_frame:0000000000007A79                 db    0
.eh_frame:0000000000007A7A                 db    0
.eh_frame:0000000000007A7B                 db    0
.eh_frame:0000000000007A7C                 db  74h ; t
.eh_frame:0000000000007A7D                 db  0Ah
.eh_frame:0000000000007A7E                 db    0
.eh_frame:0000000000007A7F                 db    0
.eh_frame:0000000000007A80                 db  90h
.eh_frame:0000000000007A81                 db 0DAh
.eh_frame:0000000000007A82                 db 0FFh
.eh_frame:0000000000007A83                 db 0FFh
.eh_frame:0000000000007A84                 db  1Ch
.eh_frame:0000000000007A85                 db    4
.eh_frame:0000000000007A86                 db    0
.eh_frame:0000000000007A87                 db    0
.eh_frame:0000000000007A88                 db    0
.eh_frame:0000000000007A89                 db  42h ; B
.eh_frame:0000000000007A8A                 db  0Eh
.eh_frame:0000000000007A8B                 db  10h
.eh_frame:0000000000007A8C                 db  8Fh
.eh_frame:0000000000007A8D                 db    2
.eh_frame:0000000000007A8E                 db  42h ; B
.eh_frame:0000000000007A8F                 db  0Eh
.eh_frame:0000000000007A90                 db  18h
.eh_frame:0000000000007A91                 db  8Eh
.eh_frame:0000000000007A92                 db    3
.eh_frame:0000000000007A93                 db  42h ; B
.eh_frame:0000000000007A94                 db  0Eh
.eh_frame:0000000000007A95                 db  20h
.eh_frame:0000000000007A96                 db  8Dh
.eh_frame:0000000000007A97                 db    4
.eh_frame:0000000000007A98                 db  42h ; B
.eh_frame:0000000000007A99                 db  0Eh
.eh_frame:0000000000007A9A                 db  28h ; (
.eh_frame:0000000000007A9B                 db  8Ch
.eh_frame:0000000000007A9C                 db    5
.eh_frame:0000000000007A9D                 db  41h ; A
.eh_frame:0000000000007A9E                 db  0Eh
.eh_frame:0000000000007A9F                 db  30h ; 0
.eh_frame:0000000000007AA0                 db  86h
.eh_frame:0000000000007AA1                 db    6
.eh_frame:0000000000007AA2                 db  41h ; A
.eh_frame:0000000000007AA3                 db  0Eh
.eh_frame:0000000000007AA4                 db  38h ; 8
.eh_frame:0000000000007AA5                 db  83h
.eh_frame:0000000000007AA6                 db    7
.eh_frame:0000000000007AA7                 db  44h ; D
.eh_frame:0000000000007AA8                 db  0Eh
.eh_frame:0000000000007AA9                 db  60h ; `
.eh_frame:0000000000007AAA                 db    2
.eh_frame:0000000000007AAB                 db 0E9h
.eh_frame:0000000000007AAC                 db  0Ah
.eh_frame:0000000000007AAD                 db  0Eh
.eh_frame:0000000000007AAE                 db  38h ; 8
.eh_frame:0000000000007AAF                 db  41h ; A
.eh_frame:0000000000007AB0                 db  0Eh
.eh_frame:0000000000007AB1                 db  30h ; 0
.eh_frame:0000000000007AB2                 db  41h ; A
.eh_frame:0000000000007AB3                 db  0Eh
.eh_frame:0000000000007AB4                 db  28h ; (
.eh_frame:0000000000007AB5                 db  42h ; B
.eh_frame:0000000000007AB6                 db  0Eh
.eh_frame:0000000000007AB7                 db  20h
.eh_frame:0000000000007AB8                 db  42h ; B
.eh_frame:0000000000007AB9                 db  0Eh
.eh_frame:0000000000007ABA                 db  18h
.eh_frame:0000000000007ABB                 db  42h ; B
.eh_frame:0000000000007ABC                 db  0Eh
.eh_frame:0000000000007ABD                 db  10h
.eh_frame:0000000000007ABE                 db  42h ; B
.eh_frame:0000000000007ABF                 db  0Eh
.eh_frame:0000000000007AC0                 db    8
.eh_frame:0000000000007AC1                 db  47h ; G
.eh_frame:0000000000007AC2                 db  0Bh
.eh_frame:0000000000007AC3                 db    0
.eh_frame:0000000000007AC4                 db    0
.eh_frame:0000000000007AC5                 db    0
.eh_frame:0000000000007AC6                 db    0
.eh_frame:0000000000007AC7                 db    0
.eh_frame:0000000000007AC8                 db  34h ; 4
.eh_frame:0000000000007AC9                 db    0
.eh_frame:0000000000007ACA                 db    0
.eh_frame:0000000000007ACB                 db    0
.eh_frame:0000000000007ACC                 db 0C4h
.eh_frame:0000000000007ACD                 db  0Ah
.eh_frame:0000000000007ACE                 db    0
.eh_frame:0000000000007ACF                 db    0
.eh_frame:0000000000007AD0                 db  60h ; `
.eh_frame:0000000000007AD1                 db 0DEh
.eh_frame:0000000000007AD2                 db 0FFh
.eh_frame:0000000000007AD3                 db 0FFh
.eh_frame:0000000000007AD4                 db  7Bh ; {
.eh_frame:0000000000007AD5                 db    0
.eh_frame:0000000000007AD6                 db    0
.eh_frame:0000000000007AD7                 db    0
.eh_frame:0000000000007AD8                 db    0
.eh_frame:0000000000007AD9                 db  42h ; B
.eh_frame:0000000000007ADA                 db  0Eh
.eh_frame:0000000000007ADB                 db  10h
.eh_frame:0000000000007ADC                 db  8Ch
.eh_frame:0000000000007ADD                 db    2
.eh_frame:0000000000007ADE                 db  41h ; A
.eh_frame:0000000000007ADF                 db  0Eh
.eh_frame:0000000000007AE0                 db  18h
.eh_frame:0000000000007AE1                 db  86h
.eh_frame:0000000000007AE2                 db    3
.eh_frame:0000000000007AE3                 db  41h ; A
.eh_frame:0000000000007AE4                 db  0Eh
.eh_frame:0000000000007AE5                 db  20h
.eh_frame:0000000000007AE6                 db  83h
.eh_frame:0000000000007AE7                 db    4
.eh_frame:0000000000007AE8                 db  7Dh ; }
.eh_frame:0000000000007AE9                 db  0Ah
.eh_frame:0000000000007AEA                 db  0Eh
.eh_frame:0000000000007AEB                 db  18h
.eh_frame:0000000000007AEC                 db  41h ; A
.eh_frame:0000000000007AED                 db  0Eh
.eh_frame:0000000000007AEE                 db  10h
.eh_frame:0000000000007AEF                 db  42h ; B
.eh_frame:0000000000007AF0                 db  0Eh
.eh_frame:0000000000007AF1                 db    8
.eh_frame:0000000000007AF2                 db  44h ; D
.eh_frame:0000000000007AF3                 db  0Bh
.eh_frame:0000000000007AF4                 db  60h ; `
.eh_frame:0000000000007AF5                 db  0Ah
.eh_frame:0000000000007AF6                 db  0Eh
.eh_frame:0000000000007AF7                 db  18h
.eh_frame:0000000000007AF8                 db  41h ; A
.eh_frame:0000000000007AF9                 db  0Eh
.eh_frame:0000000000007AFA                 db  10h
.eh_frame:0000000000007AFB                 db  42h ; B
.eh_frame:0000000000007AFC                 db  0Eh
.eh_frame:0000000000007AFD                 db    8
.eh_frame:0000000000007AFE                 db  45h ; E
.eh_frame:0000000000007AFF                 db  0Bh
.eh_frame:0000000000007B00                 db  1Ch
.eh_frame:0000000000007B01                 db    0
.eh_frame:0000000000007B02                 db    0
.eh_frame:0000000000007B03                 db    0
.eh_frame:0000000000007B04                 db 0FCh
.eh_frame:0000000000007B05                 db  0Ah
.eh_frame:0000000000007B06                 db    0
.eh_frame:0000000000007B07                 db    0
.eh_frame:0000000000007B08                 db 0A8h
.eh_frame:0000000000007B09                 db 0DEh
.eh_frame:0000000000007B0A                 db 0FFh
.eh_frame:0000000000007B0B                 db 0FFh
.eh_frame:0000000000007B0C                 db  40h ; @
.eh_frame:0000000000007B0D                 db    0
.eh_frame:0000000000007B0E                 db    0
.eh_frame:0000000000007B0F                 db    0
.eh_frame:0000000000007B10                 db    0
.eh_frame:0000000000007B11                 db  44h ; D
.eh_frame:0000000000007B12                 db  0Eh
.eh_frame:0000000000007B13                 db  10h
.eh_frame:0000000000007B14                 db  83h
.eh_frame:0000000000007B15                 db    2
.eh_frame:0000000000007B16                 db  5Ah ; Z
.eh_frame:0000000000007B17                 db  0Ah
.eh_frame:0000000000007B18                 db  0Eh
.eh_frame:0000000000007B19                 db    8
.eh_frame:0000000000007B1A                 db  4Ah ; J
.eh_frame:0000000000007B1B                 db  0Bh
.eh_frame:0000000000007B1C                 db  53h ; S
.eh_frame:0000000000007B1D                 db  0Eh
.eh_frame:0000000000007B1E                 db    8
.eh_frame:0000000000007B1F                 db    0
.eh_frame:0000000000007B20                 db  2Ch ; ,
.eh_frame:0000000000007B21                 db    0
.eh_frame:0000000000007B22                 db    0
.eh_frame:0000000000007B23                 db    0
.eh_frame:0000000000007B24                 db  1Ch
.eh_frame:0000000000007B25                 db  0Bh
.eh_frame:0000000000007B26                 db    0
.eh_frame:0000000000007B27                 db    0
.eh_frame:0000000000007B28                 db 0C8h
.eh_frame:0000000000007B29                 db 0DEh
.eh_frame:0000000000007B2A                 db 0FFh
.eh_frame:0000000000007B2B                 db 0FFh
.eh_frame:0000000000007B2C                 db  57h ; W
.eh_frame:0000000000007B2D                 db    0
.eh_frame:0000000000007B2E                 db    0
.eh_frame:0000000000007B2F                 db    0
.eh_frame:0000000000007B30                 db    0
.eh_frame:0000000000007B31                 db  63h ; c
.eh_frame:0000000000007B32                 db  0Eh
.eh_frame:0000000000007B33                 db  10h
.eh_frame:0000000000007B34                 db  8Ch
.eh_frame:0000000000007B35                 db    2
.eh_frame:0000000000007B36                 db  41h ; A
.eh_frame:0000000000007B37                 db  0Eh
.eh_frame:0000000000007B38                 db  18h
.eh_frame:0000000000007B39                 db  86h
.eh_frame:0000000000007B3A                 db    3
.eh_frame:0000000000007B3B                 db  44h ; D
.eh_frame:0000000000007B3C                 db  0Eh
.eh_frame:0000000000007B3D                 db  20h
.eh_frame:0000000000007B3E                 db  83h
.eh_frame:0000000000007B3F                 db    4
.eh_frame:0000000000007B40                 db  6Bh ; k
.eh_frame:0000000000007B41                 db  0Eh
.eh_frame:0000000000007B42                 db  18h
.eh_frame:0000000000007B43                 db  41h ; A
.eh_frame:0000000000007B44                 db  0Eh
.eh_frame:0000000000007B45                 db  10h
.eh_frame:0000000000007B46                 db  42h ; B
.eh_frame:0000000000007B47                 db  0Eh
.eh_frame:0000000000007B48                 db    8
.eh_frame:0000000000007B49                 db    0
.eh_frame:0000000000007B4A                 db    0
.eh_frame:0000000000007B4B                 db    0
.eh_frame:0000000000007B4C                 db    0
.eh_frame:0000000000007B4D                 db    0
.eh_frame:0000000000007B4E                 db    0
.eh_frame:0000000000007B4F                 db    0
.eh_frame:0000000000007B50                 db  3Ch ; <
.eh_frame:0000000000007B51                 db    0
.eh_frame:0000000000007B52                 db    0
.eh_frame:0000000000007B53                 db    0
.eh_frame:0000000000007B54                 db  4Ch ; L
.eh_frame:0000000000007B55                 db  0Bh
.eh_frame:0000000000007B56                 db    0
.eh_frame:0000000000007B57                 db    0
.eh_frame:0000000000007B58                 db 0F8h
.eh_frame:0000000000007B59                 db 0DEh
.eh_frame:0000000000007B5A                 db 0FFh
.eh_frame:0000000000007B5B                 db 0FFh
.eh_frame:0000000000007B5C                 db  83h
.eh_frame:0000000000007B5D                 db    0
.eh_frame:0000000000007B5E                 db    0
.eh_frame:0000000000007B5F                 db    0
.eh_frame:0000000000007B60                 db    0
.eh_frame:0000000000007B61                 db  42h ; B
.eh_frame:0000000000007B62                 db  0Eh
.eh_frame:0000000000007B63                 db  10h
.eh_frame:0000000000007B64                 db  8Dh
.eh_frame:0000000000007B65                 db    2
.eh_frame:0000000000007B66                 db  42h ; B
.eh_frame:0000000000007B67                 db  0Eh
.eh_frame:0000000000007B68                 db  18h
.eh_frame:0000000000007B69                 db  8Ch
.eh_frame:0000000000007B6A                 db    3
.eh_frame:0000000000007B6B                 db  44h ; D
.eh_frame:0000000000007B6C                 db  0Eh
.eh_frame:0000000000007B6D                 db  20h
.eh_frame:0000000000007B6E                 db  86h
.eh_frame:0000000000007B6F                 db    4
.eh_frame:0000000000007B70                 db  41h ; A
.eh_frame:0000000000007B71                 db  0Eh
.eh_frame:0000000000007B72                 db  28h ; (
.eh_frame:0000000000007B73                 db  83h
.eh_frame:0000000000007B74                 db    5
.eh_frame:0000000000007B75                 db  4Ah ; J
.eh_frame:0000000000007B76                 db  0Eh
.eh_frame:0000000000007B77                 db  40h ; @
.eh_frame:0000000000007B78                 db    2
.eh_frame:0000000000007B79                 db  64h ; d
.eh_frame:0000000000007B7A                 db  0Ah
.eh_frame:0000000000007B7B                 db  0Eh
.eh_frame:0000000000007B7C                 db  28h ; (
.eh_frame:0000000000007B7D                 db  41h ; A
.eh_frame:0000000000007B7E                 db  0Eh
.eh_frame:0000000000007B7F                 db  20h
.eh_frame:0000000000007B80                 db  41h ; A
.eh_frame:0000000000007B81                 db  0Eh
.eh_frame:0000000000007B82                 db  18h
.eh_frame:0000000000007B83                 db  42h ; B
.eh_frame:0000000000007B84                 db  0Eh
.eh_frame:0000000000007B85                 db  10h
.eh_frame:0000000000007B86                 db  42h ; B
.eh_frame:0000000000007B87                 db  0Eh
.eh_frame:0000000000007B88                 db    8
.eh_frame:0000000000007B89                 db  41h ; A
.eh_frame:0000000000007B8A                 db  0Bh
.eh_frame:0000000000007B8B                 db    0
.eh_frame:0000000000007B8C                 db    0
.eh_frame:0000000000007B8D                 db    0
.eh_frame:0000000000007B8E                 db    0
.eh_frame:0000000000007B8F                 db    0
.eh_frame:0000000000007B90                 db  4Ch ; L
.eh_frame:0000000000007B91                 db    0
.eh_frame:0000000000007B92                 db    0
.eh_frame:0000000000007B93                 db    0
.eh_frame:0000000000007B94                 db  8Ch
.eh_frame:0000000000007B95                 db  0Bh
.eh_frame:0000000000007B96                 db    0
.eh_frame:0000000000007B97                 db    0
.eh_frame:0000000000007B98                 db  48h ; H
.eh_frame:0000000000007B99                 db 0DFh
.eh_frame:0000000000007B9A                 db 0FFh
.eh_frame:0000000000007B9B                 db 0FFh
.eh_frame:0000000000007B9C                 db  7Dh ; }
.eh_frame:0000000000007B9D                 db    0
.eh_frame:0000000000007B9E                 db    0
.eh_frame:0000000000007B9F                 db    0
.eh_frame:0000000000007BA0                 db    0
.eh_frame:0000000000007BA1                 db  42h ; B
.eh_frame:0000000000007BA2                 db  0Eh
.eh_frame:0000000000007BA3                 db  10h
.eh_frame:0000000000007BA4                 db  8Ch
.eh_frame:0000000000007BA5                 db    2
.eh_frame:0000000000007BA6                 db  41h ; A
.eh_frame:0000000000007BA7                 db  0Eh
.eh_frame:0000000000007BA8                 db  18h
.eh_frame:0000000000007BA9                 db  86h
.eh_frame:0000000000007BAA                 db    3
.eh_frame:0000000000007BAB                 db  44h ; D
.eh_frame:0000000000007BAC                 db  0Eh
.eh_frame:0000000000007BAD                 db  20h
.eh_frame:0000000000007BAE                 db  83h
.eh_frame:0000000000007BAF                 db    4
.eh_frame:0000000000007BB0                 db  69h ; i
.eh_frame:0000000000007BB1                 db  0Ah
.eh_frame:0000000000007BB2                 db  0Eh
.eh_frame:0000000000007BB3                 db  18h
.eh_frame:0000000000007BB4                 db  41h ; A
.eh_frame:0000000000007BB5                 db  0Eh
.eh_frame:0000000000007BB6                 db  10h
.eh_frame:0000000000007BB7                 db  42h ; B
.eh_frame:0000000000007BB8                 db  0Eh
.eh_frame:0000000000007BB9                 db    8
.eh_frame:0000000000007BBA                 db  45h ; E
.eh_frame:0000000000007BBB                 db  0Bh
.eh_frame:0000000000007BBC                 db  55h ; U
.eh_frame:0000000000007BBD                 db  0Ah
.eh_frame:0000000000007BBE                 db  0Eh
.eh_frame:0000000000007BBF                 db  18h
.eh_frame:0000000000007BC0                 db  41h ; A
.eh_frame:0000000000007BC1                 db  0Eh
.eh_frame:0000000000007BC2                 db  10h
.eh_frame:0000000000007BC3                 db  42h ; B
.eh_frame:0000000000007BC4                 db  0Eh
.eh_frame:0000000000007BC5                 db    8
.eh_frame:0000000000007BC6                 db  48h ; H
.eh_frame:0000000000007BC7                 db  0Bh
.eh_frame:0000000000007BC8                 db  41h ; A
.eh_frame:0000000000007BC9                 db  0Ah
.eh_frame:0000000000007BCA                 db  0Eh
.eh_frame:0000000000007BCB                 db  18h
.eh_frame:0000000000007BCC                 db  46h ; F
.eh_frame:0000000000007BCD                 db  0Eh
.eh_frame:0000000000007BCE                 db  10h
.eh_frame:0000000000007BCF                 db  42h ; B
.eh_frame:0000000000007BD0                 db  0Eh
.eh_frame:0000000000007BD1                 db    8
.eh_frame:0000000000007BD2                 db  47h ; G
.eh_frame:0000000000007BD3                 db  0Bh
.eh_frame:0000000000007BD4                 db  49h ; I
.eh_frame:0000000000007BD5                 db  0Eh
.eh_frame:0000000000007BD6                 db  18h
.eh_frame:0000000000007BD7                 db  41h ; A
.eh_frame:0000000000007BD8                 db  0Eh
.eh_frame:0000000000007BD9                 db  10h
.eh_frame:0000000000007BDA                 db  42h ; B
.eh_frame:0000000000007BDB                 db  0Eh
.eh_frame:0000000000007BDC                 db    8
.eh_frame:0000000000007BDD                 db    0
.eh_frame:0000000000007BDE                 db    0
.eh_frame:0000000000007BDF                 db    0
.eh_frame:0000000000007BE0                 db  1Ch
.eh_frame:0000000000007BE1                 db    0
.eh_frame:0000000000007BE2                 db    0
.eh_frame:0000000000007BE3                 db    0
.eh_frame:0000000000007BE4                 db 0DCh
.eh_frame:0000000000007BE5                 db  0Bh
.eh_frame:0000000000007BE6                 db    0
.eh_frame:0000000000007BE7                 db    0
.eh_frame:0000000000007BE8                 db  78h ; x
.eh_frame:0000000000007BE9                 db 0DFh
.eh_frame:0000000000007BEA                 db 0FFh
.eh_frame:0000000000007BEB                 db 0FFh
.eh_frame:0000000000007BEC                 db  60h ; `
.eh_frame:0000000000007BED                 db    0
.eh_frame:0000000000007BEE                 db    0
.eh_frame:0000000000007BEF                 db    0
.eh_frame:0000000000007BF0                 db    0
.eh_frame:0000000000007BF1                 db  44h ; D
.eh_frame:0000000000007BF2                 db  0Eh
.eh_frame:0000000000007BF3                 db  10h
.eh_frame:0000000000007BF4                 db  75h ; u
.eh_frame:0000000000007BF5                 db  0Ah
.eh_frame:0000000000007BF6                 db  0Eh
.eh_frame:0000000000007BF7                 db    8
.eh_frame:0000000000007BF8                 db  47h ; G
.eh_frame:0000000000007BF9                 db  0Bh
.eh_frame:0000000000007BFA                 db  5Fh ; _
.eh_frame:0000000000007BFB                 db  0Eh
.eh_frame:0000000000007BFC                 db    8
.eh_frame:0000000000007BFD                 db    0
.eh_frame:0000000000007BFE                 db    0
.eh_frame:0000000000007BFF                 db    0
.eh_frame:0000000000007C00                 db  1Ch
.eh_frame:0000000000007C01                 db    0
.eh_frame:0000000000007C02                 db    0
.eh_frame:0000000000007C03                 db    0
.eh_frame:0000000000007C04                 db 0FCh
.eh_frame:0000000000007C05                 db  0Bh
.eh_frame:0000000000007C06                 db    0
.eh_frame:0000000000007C07                 db    0
.eh_frame:0000000000007C08                 db 0B8h
.eh_frame:0000000000007C09                 db 0DFh
.eh_frame:0000000000007C0A                 db 0FFh
.eh_frame:0000000000007C0B                 db 0FFh
.eh_frame:0000000000007C0C                 db  3Ch ; <
.eh_frame:0000000000007C0D                 db    0
.eh_frame:0000000000007C0E                 db    0
.eh_frame:0000000000007C0F                 db    0
.eh_frame:0000000000007C10                 db    0
.eh_frame:0000000000007C11                 db  44h ; D
.eh_frame:0000000000007C12                 db  0Eh
.eh_frame:0000000000007C13                 db  10h
.eh_frame:0000000000007C14                 db  61h ; a
.eh_frame:0000000000007C15                 db  0Ah
.eh_frame:0000000000007C16                 db  0Eh
.eh_frame:0000000000007C17                 db    8
.eh_frame:0000000000007C18                 db  4Bh ; K
.eh_frame:0000000000007C19                 db  0Bh
.eh_frame:0000000000007C1A                 db  4Bh ; K
.eh_frame:0000000000007C1B                 db  0Eh
.eh_frame:0000000000007C1C                 db    8
.eh_frame:0000000000007C1D                 db    0
.eh_frame:0000000000007C1E                 db    0
.eh_frame:0000000000007C1F                 db    0
.eh_frame:0000000000007C20                 db  44h ; D
.eh_frame:0000000000007C21                 db    0
.eh_frame:0000000000007C22                 db    0
.eh_frame:0000000000007C23                 db    0
.eh_frame:0000000000007C24                 db  1Ch
.eh_frame:0000000000007C25                 db  0Ch
.eh_frame:0000000000007C26                 db    0
.eh_frame:0000000000007C27                 db    0
.eh_frame:0000000000007C28                 db 0D8h
.eh_frame:0000000000007C29                 db 0DFh
.eh_frame:0000000000007C2A                 db 0FFh
.eh_frame:0000000000007C2B                 db 0FFh
.eh_frame:0000000000007C2C                 db  65h ; e
.eh_frame:0000000000007C2D                 db    0
.eh_frame:0000000000007C2E                 db    0
.eh_frame:0000000000007C2F                 db    0
.eh_frame:0000000000007C30                 db    0
.eh_frame:0000000000007C31                 db  42h ; B
.eh_frame:0000000000007C32                 db  0Eh
.eh_frame:0000000000007C33                 db  10h
.eh_frame:0000000000007C34                 db  8Fh
.eh_frame:0000000000007C35                 db    2
.eh_frame:0000000000007C36                 db  42h ; B
.eh_frame:0000000000007C37                 db  0Eh
.eh_frame:0000000000007C38                 db  18h
.eh_frame:0000000000007C39                 db  8Eh
.eh_frame:0000000000007C3A                 db    3
.eh_frame:0000000000007C3B                 db  45h ; E
.eh_frame:0000000000007C3C                 db  0Eh
.eh_frame:0000000000007C3D                 db  20h
.eh_frame:0000000000007C3E                 db  8Dh
.eh_frame:0000000000007C3F                 db    4
.eh_frame:0000000000007C40                 db  42h ; B
.eh_frame:0000000000007C41                 db  0Eh
.eh_frame:0000000000007C42                 db  28h ; (
.eh_frame:0000000000007C43                 db  8Ch
.eh_frame:0000000000007C44                 db    5
.eh_frame:0000000000007C45                 db  48h ; H
.eh_frame:0000000000007C46                 db  0Eh
.eh_frame:0000000000007C47                 db  30h ; 0
.eh_frame:0000000000007C48                 db  86h
.eh_frame:0000000000007C49                 db    6
.eh_frame:0000000000007C4A                 db  48h ; H
.eh_frame:0000000000007C4B                 db  0Eh
.eh_frame:0000000000007C4C                 db  38h ; 8
.eh_frame:0000000000007C4D                 db  83h
.eh_frame:0000000000007C4E                 db    7
.eh_frame:0000000000007C4F                 db  4Dh ; M
.eh_frame:0000000000007C50                 db  0Eh
.eh_frame:0000000000007C51                 db  40h ; @
.eh_frame:0000000000007C52                 db  72h ; r
.eh_frame:0000000000007C53                 db  0Eh
.eh_frame:0000000000007C54                 db  38h ; 8
.eh_frame:0000000000007C55                 db  41h ; A
.eh_frame:0000000000007C56                 db  0Eh
.eh_frame:0000000000007C57                 db  30h ; 0
.eh_frame:0000000000007C58                 db  41h ; A
.eh_frame:0000000000007C59                 db  0Eh
.eh_frame:0000000000007C5A                 db  28h ; (
.eh_frame:0000000000007C5B                 db  42h ; B
.eh_frame:0000000000007C5C                 db  0Eh
.eh_frame:0000000000007C5D                 db  20h
.eh_frame:0000000000007C5E                 db  42h ; B
.eh_frame:0000000000007C5F                 db  0Eh
.eh_frame:0000000000007C60                 db  18h
.eh_frame:0000000000007C61                 db  42h ; B
.eh_frame:0000000000007C62                 db  0Eh
.eh_frame:0000000000007C63                 db  10h
.eh_frame:0000000000007C64                 db  42h ; B
.eh_frame:0000000000007C65                 db  0Eh
.eh_frame:0000000000007C66                 db    8
.eh_frame:0000000000007C67                 db    0
.eh_frame:0000000000007C68                 db  14h
.eh_frame:0000000000007C69                 db    0
.eh_frame:0000000000007C6A                 db    0
.eh_frame:0000000000007C6B                 db    0
.eh_frame:0000000000007C6C                 db  64h ; d
.eh_frame:0000000000007C6D                 db  0Ch
.eh_frame:0000000000007C6E                 db    0
.eh_frame:0000000000007C6F                 db    0
.eh_frame:0000000000007C70                 db    0
.eh_frame:0000000000007C71                 db 0E0h
.eh_frame:0000000000007C72                 db 0FFh
.eh_frame:0000000000007C73                 db 0FFh
.eh_frame:0000000000007C74                 db    2
.eh_frame:0000000000007C75                 db    0
.eh_frame:0000000000007C76                 db    0
.eh_frame:0000000000007C77                 db    0
.eh_frame:0000000000007C78                 db    0
.eh_frame:0000000000007C79                 db    0
.eh_frame:0000000000007C7A                 db    0
.eh_frame:0000000000007C7B                 db    0
.eh_frame:0000000000007C7C                 db    0
.eh_frame:0000000000007C7D                 db    0
.eh_frame:0000000000007C7E                 db    0
.eh_frame:0000000000007C7F                 db    0
.eh_frame:0000000000007C80                 db  10h
.eh_frame:0000000000007C81                 db    0
.eh_frame:0000000000007C82                 db    0
.eh_frame:0000000000007C83                 db    0
.eh_frame:0000000000007C84                 db  7Ch ; |
.eh_frame:0000000000007C85                 db  0Ch
.eh_frame:0000000000007C86                 db    0
.eh_frame:0000000000007C87                 db    0
.eh_frame:0000000000007C88                 db 0F8h
.eh_frame:0000000000007C89                 db 0DFh
.eh_frame:0000000000007C8A                 db 0FFh
.eh_frame:0000000000007C8B                 db 0FFh
.eh_frame:0000000000007C8C                 db  0Eh
.eh_frame:0000000000007C8D                 db    0
.eh_frame:0000000000007C8E                 db    0
.eh_frame:0000000000007C8F                 db    0
.eh_frame:0000000000007C90                 db    0
.eh_frame:0000000000007C91                 db    0
.eh_frame:0000000000007C92                 db    0
.eh_frame:0000000000007C93                 db    0
.eh_frame:0000000000007C94 __FRAME_END__   db    0
.eh_frame:0000000000007C95                 db    0
.eh_frame:0000000000007C96                 db    0
.eh_frame:0000000000007C97                 db    0
.eh_frame:0000000000007C97 _eh_frame       ends
.eh_frame:0000000000007C97
.init_array:0000000000208B10 ; ELF Initialization Function Table
.init_array:0000000000208B10 ; ===========================================================================
.init_array:0000000000208B10
.init_array:0000000000208B10 ; Segment type: Pure data
.init_array:0000000000208B10 ; Segment permissions: Read/Write
.init_array:0000000000208B10 _init_array     segment qword public 'DATA' use64
.init_array:0000000000208B10                 assume cs:_init_array
.init_array:0000000000208B10                 ;org 208B10h
.init_array:0000000000208B10 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000208B10                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000208B10                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000208B10 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000208B10
.fini_array:0000000000208B18 ; ELF Termination Function Table
.fini_array:0000000000208B18 ; ===========================================================================
.fini_array:0000000000208B18
.fini_array:0000000000208B18 ; Segment type: Pure data
.fini_array:0000000000208B18 ; Segment permissions: Read/Write
.fini_array:0000000000208B18 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000208B18                 assume cs:_fini_array
.fini_array:0000000000208B18                 ;org 208B18h
.fini_array:0000000000208B18 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000208B18                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000208B18 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000208B18
.data.rel.ro:0000000000208B20 ; ===========================================================================
.data.rel.ro:0000000000208B20
.data.rel.ro:0000000000208B20 ; Segment type: Pure data
.data.rel.ro:0000000000208B20 ; Segment permissions: Read/Write
.data.rel.ro:0000000000208B20 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000208B20                 assume cs:_data_rel_ro
.data.rel.ro:0000000000208B20                 ;org 208B20h
.data.rel.ro:0000000000208B20 ; struct option long_options
.data.rel.ro:0000000000208B20 long_options    dq offset aDecode       ; name
.data.rel.ro:0000000000208B20                                         ; DATA XREF: main:loc_1874↑o
.data.rel.ro:0000000000208B20                 dd 0                    ; has_arg ; "decode"
.data.rel.ro:0000000000208B20                 db 4 dup(0)
.data.rel.ro:0000000000208B20                 dq 0                    ; flag
.data.rel.ro:0000000000208B20                 dd 64h                  ; val
.data.rel.ro:0000000000208B20                 db 4 dup(0)
.data.rel.ro:0000000000208B40                 dq offset aWrap         ; "wrap"
.data.rel.ro:0000000000208B48                 db    1
.data.rel.ro:0000000000208B49                 db    0
.data.rel.ro:0000000000208B4A                 db    0
.data.rel.ro:0000000000208B4B                 db    0
.data.rel.ro:0000000000208B4C                 db    0
.data.rel.ro:0000000000208B4D                 db    0
.data.rel.ro:0000000000208B4E                 db    0
.data.rel.ro:0000000000208B4F                 db    0
.data.rel.ro:0000000000208B50                 db    0
.data.rel.ro:0000000000208B51                 db    0
.data.rel.ro:0000000000208B52                 db    0
.data.rel.ro:0000000000208B53                 db    0
.data.rel.ro:0000000000208B54                 db    0
.data.rel.ro:0000000000208B55                 db    0
.data.rel.ro:0000000000208B56                 db    0
.data.rel.ro:0000000000208B57                 db    0
.data.rel.ro:0000000000208B58                 db  77h ; w
.data.rel.ro:0000000000208B59                 db    0
.data.rel.ro:0000000000208B5A                 db    0
.data.rel.ro:0000000000208B5B                 db    0
.data.rel.ro:0000000000208B5C                 db    0
.data.rel.ro:0000000000208B5D                 db    0
.data.rel.ro:0000000000208B5E                 db    0
.data.rel.ro:0000000000208B5F                 db    0
.data.rel.ro:0000000000208B60                 dq offset aIgnoreGarbage ; "ignore-garbage"
.data.rel.ro:0000000000208B68                 db    0
.data.rel.ro:0000000000208B69                 db    0
.data.rel.ro:0000000000208B6A                 db    0
.data.rel.ro:0000000000208B6B                 db    0
.data.rel.ro:0000000000208B6C                 db    0
.data.rel.ro:0000000000208B6D                 db    0
.data.rel.ro:0000000000208B6E                 db    0
.data.rel.ro:0000000000208B6F                 db    0
.data.rel.ro:0000000000208B70                 db    0
.data.rel.ro:0000000000208B71                 db    0
.data.rel.ro:0000000000208B72                 db    0
.data.rel.ro:0000000000208B73                 db    0
.data.rel.ro:0000000000208B74                 db    0
.data.rel.ro:0000000000208B75                 db    0
.data.rel.ro:0000000000208B76                 db    0
.data.rel.ro:0000000000208B77                 db    0
.data.rel.ro:0000000000208B78                 db  69h ; i
.data.rel.ro:0000000000208B79                 db    0
.data.rel.ro:0000000000208B7A                 db    0
.data.rel.ro:0000000000208B7B                 db    0
.data.rel.ro:0000000000208B7C                 db    0
.data.rel.ro:0000000000208B7D                 db    0
.data.rel.ro:0000000000208B7E                 db    0
.data.rel.ro:0000000000208B7F                 db    0
.data.rel.ro:0000000000208B80                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000208B88                 db    0
.data.rel.ro:0000000000208B89                 db    0
.data.rel.ro:0000000000208B8A                 db    0
.data.rel.ro:0000000000208B8B                 db    0
.data.rel.ro:0000000000208B8C                 db    0
.data.rel.ro:0000000000208B8D                 db    0
.data.rel.ro:0000000000208B8E                 db    0
.data.rel.ro:0000000000208B8F                 db    0
.data.rel.ro:0000000000208B90                 db    0
.data.rel.ro:0000000000208B91                 db    0
.data.rel.ro:0000000000208B92                 db    0
.data.rel.ro:0000000000208B93                 db    0
.data.rel.ro:0000000000208B94                 db    0
.data.rel.ro:0000000000208B95                 db    0
.data.rel.ro:0000000000208B96                 db    0
.data.rel.ro:0000000000208B97                 db    0
.data.rel.ro:0000000000208B98                 db  7Eh ; ~
.data.rel.ro:0000000000208B99                 db 0FFh
.data.rel.ro:0000000000208B9A                 db 0FFh
.data.rel.ro:0000000000208B9B                 db 0FFh
.data.rel.ro:0000000000208B9C                 db    0
.data.rel.ro:0000000000208B9D                 db    0
.data.rel.ro:0000000000208B9E                 db    0
.data.rel.ro:0000000000208B9F                 db    0
.data.rel.ro:0000000000208BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000208BA8                 db    0
.data.rel.ro:0000000000208BA9                 db    0
.data.rel.ro:0000000000208BAA                 db    0
.data.rel.ro:0000000000208BAB                 db    0
.data.rel.ro:0000000000208BAC                 db    0
.data.rel.ro:0000000000208BAD                 db    0
.data.rel.ro:0000000000208BAE                 db    0
.data.rel.ro:0000000000208BAF                 db    0
.data.rel.ro:0000000000208BB0                 db    0
.data.rel.ro:0000000000208BB1                 db    0
.data.rel.ro:0000000000208BB2                 db    0
.data.rel.ro:0000000000208BB3                 db    0
.data.rel.ro:0000000000208BB4                 db    0
.data.rel.ro:0000000000208BB5                 db    0
.data.rel.ro:0000000000208BB6                 db    0
.data.rel.ro:0000000000208BB7                 db    0
.data.rel.ro:0000000000208BB8                 db  7Dh ; }
.data.rel.ro:0000000000208BB9                 db 0FFh
.data.rel.ro:0000000000208BBA                 db 0FFh
.data.rel.ro:0000000000208BBB                 db 0FFh
.data.rel.ro:0000000000208BBC                 db    0
.data.rel.ro:0000000000208BBD                 db    0
.data.rel.ro:0000000000208BBE                 db    0
.data.rel.ro:0000000000208BBF                 db    0
.data.rel.ro:0000000000208BC0                 db    0
.data.rel.ro:0000000000208BC1                 db    0
.data.rel.ro:0000000000208BC2                 db    0
.data.rel.ro:0000000000208BC3                 db    0
.data.rel.ro:0000000000208BC4                 db    0
.data.rel.ro:0000000000208BC5                 db    0
.data.rel.ro:0000000000208BC6                 db    0
.data.rel.ro:0000000000208BC7                 db    0
.data.rel.ro:0000000000208BC8                 db    0
.data.rel.ro:0000000000208BC9                 db    0
.data.rel.ro:0000000000208BCA                 db    0
.data.rel.ro:0000000000208BCB                 db    0
.data.rel.ro:0000000000208BCC                 db    0
.data.rel.ro:0000000000208BCD                 db    0
.data.rel.ro:0000000000208BCE                 db    0
.data.rel.ro:0000000000208BCF                 db    0
.data.rel.ro:0000000000208BD0                 db    0
.data.rel.ro:0000000000208BD1                 db    0
.data.rel.ro:0000000000208BD2                 db    0
.data.rel.ro:0000000000208BD3                 db    0
.data.rel.ro:0000000000208BD4                 db    0
.data.rel.ro:0000000000208BD5                 db    0
.data.rel.ro:0000000000208BD6                 db    0
.data.rel.ro:0000000000208BD7                 db    0
.data.rel.ro:0000000000208BD8                 db    0
.data.rel.ro:0000000000208BD9                 db    0
.data.rel.ro:0000000000208BDA                 db    0
.data.rel.ro:0000000000208BDB                 db    0
.data.rel.ro:0000000000208BDC                 db    0
.data.rel.ro:0000000000208BDD                 db    0
.data.rel.ro:0000000000208BDE                 db    0
.data.rel.ro:0000000000208BDF                 db    0
.data.rel.ro:0000000000208BE0                 public quoting_style_args
.data.rel.ro:0000000000208BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000208BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000208BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000208BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000208C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000208C08                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000208C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000208C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000208C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000208C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000208C30                 db    0
.data.rel.ro:0000000000208C31                 db    0
.data.rel.ro:0000000000208C32                 db    0
.data.rel.ro:0000000000208C33                 db    0
.data.rel.ro:0000000000208C34                 db    0
.data.rel.ro:0000000000208C35                 db    0
.data.rel.ro:0000000000208C36                 db    0
.data.rel.ro:0000000000208C37                 db    0
.data.rel.ro:0000000000208C37 _data_rel_ro    ends
.data.rel.ro:0000000000208C37
LOAD:0000000000208C38 ; ELF Dynamic Information
LOAD:0000000000208C38 ; ===========================================================================
LOAD:0000000000208C38
LOAD:0000000000208C38 ; Segment type: Pure data
LOAD:0000000000208C38 ; Segment permissions: Read/Write
LOAD:0000000000208C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000208C38                 assume cs:LOAD
LOAD:0000000000208C38                 ;org 208C38h
LOAD:0000000000208C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000208C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000208C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000208C48                 Elf64_Dyn <0Ch, 14A8h>  ; DT_INIT
LOAD:0000000000208C58                 Elf64_Dyn <0Dh, 5C90h>  ; DT_FINI
LOAD:0000000000208C68                 Elf64_Dyn <19h, 208B10h> ; DT_INIT_ARRAY
LOAD:0000000000208C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000208C88                 Elf64_Dyn <1Ah, 208B18h> ; DT_FINI_ARRAY
LOAD:0000000000208C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000208CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000208CB8                 Elf64_Dyn <5, 8F8h>     ; DT_STRTAB
LOAD:0000000000208CC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000208CD8                 Elf64_Dyn <0Ah, 301h>   ; DT_STRSZ
LOAD:0000000000208CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000208CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000208D08                 Elf64_Dyn <3, 208E28h>  ; DT_PLTGOT
LOAD:0000000000208D18                 Elf64_Dyn <2, 4B0h>     ; DT_PLTRELSZ
LOAD:0000000000208D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000208D38                 Elf64_Dyn <17h, 0FF8h>  ; DT_JMPREL
LOAD:0000000000208D48                 Elf64_Dyn <7, 0CE0h>    ; DT_RELA
LOAD:0000000000208D58                 Elf64_Dyn <8, 318h>     ; DT_RELASZ
LOAD:0000000000208D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000208D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000208D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000208D98                 Elf64_Dyn <6FFFFFFEh, 0C80h> ; DT_VERNEED
LOAD:0000000000208DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000208DB8                 Elf64_Dyn <6FFFFFF0h, 0BFAh> ; DT_VERSYM
LOAD:0000000000208DC8                 Elf64_Dyn <6FFFFFF9h, 15h> ; DT_RELACOUNT
LOAD:0000000000208DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000208DE8                 db    0
LOAD:0000000000208DE9                 db    0
LOAD:0000000000208DEA                 db    0
LOAD:0000000000208DEB                 db    0
LOAD:0000000000208DEC                 db    0
LOAD:0000000000208DED                 db    0
LOAD:0000000000208DEE                 db    0
LOAD:0000000000208DEF                 db    0
LOAD:0000000000208DF0                 db    0
LOAD:0000000000208DF1                 db    0
LOAD:0000000000208DF2                 db    0
LOAD:0000000000208DF3                 db    0
LOAD:0000000000208DF4                 db    0
LOAD:0000000000208DF5                 db    0
LOAD:0000000000208DF6                 db    0
LOAD:0000000000208DF7                 db    0
LOAD:0000000000208DF8                 db    0
LOAD:0000000000208DF9                 db    0
LOAD:0000000000208DFA                 db    0
LOAD:0000000000208DFB                 db    0
LOAD:0000000000208DFC                 db    0
LOAD:0000000000208DFD                 db    0
LOAD:0000000000208DFE                 db    0
LOAD:0000000000208DFF                 db    0
LOAD:0000000000208E00                 db    0
LOAD:0000000000208E01                 db    0
LOAD:0000000000208E02                 db    0
LOAD:0000000000208E03                 db    0
LOAD:0000000000208E04                 db    0
LOAD:0000000000208E05                 db    0
LOAD:0000000000208E06                 db    0
LOAD:0000000000208E07                 db    0
LOAD:0000000000208E08                 db    0
LOAD:0000000000208E09                 db    0
LOAD:0000000000208E0A                 db    0
LOAD:0000000000208E0B                 db    0
LOAD:0000000000208E0C                 db    0
LOAD:0000000000208E0D                 db    0
LOAD:0000000000208E0E                 db    0
LOAD:0000000000208E0F                 db    0
LOAD:0000000000208E10                 db    0
LOAD:0000000000208E11                 db    0
LOAD:0000000000208E12                 db    0
LOAD:0000000000208E13                 db    0
LOAD:0000000000208E14                 db    0
LOAD:0000000000208E15                 db    0
LOAD:0000000000208E16                 db    0
LOAD:0000000000208E17                 db    0
LOAD:0000000000208E18                 db    0
LOAD:0000000000208E19                 db    0
LOAD:0000000000208E1A                 db    0
LOAD:0000000000208E1B                 db    0
LOAD:0000000000208E1C                 db    0
LOAD:0000000000208E1D                 db    0
LOAD:0000000000208E1E                 db    0
LOAD:0000000000208E1F                 db    0
LOAD:0000000000208E20                 db    0
LOAD:0000000000208E21                 db    0
LOAD:0000000000208E22                 db    0
LOAD:0000000000208E23                 db    0
LOAD:0000000000208E24                 db    0
LOAD:0000000000208E25                 db    0
LOAD:0000000000208E26                 db    0
LOAD:0000000000208E27                 db    0
LOAD:0000000000208E27 LOAD            ends
LOAD:0000000000208E27
.got:0000000000208E28 ; ===========================================================================
.got:0000000000208E28
.got:0000000000208E28 ; Segment type: Pure data
.got:0000000000208E28 ; Segment permissions: Read/Write
.got:0000000000208E28 _got            segment qword public 'DATA' use64
.got:0000000000208E28                 assume cs:_got
.got:0000000000208E28                 ;org 208E28h
.got:0000000000208E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000208E30 qword_208E30    dq 0                    ; DATA XREF: sub_14C0↑r
.got:0000000000208E38 qword_208E38    dq 0                    ; DATA XREF: sub_14C0+6↑r
.got:0000000000208E40 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000208E48 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000208E50 __errno_location_ptr dq offset __errno_location
.got:0000000000208E50                                         ; DATA XREF: ___errno_location↑r
.got:0000000000208E58 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000208E60 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000208E68 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000208E70 fread_unlocked_ptr dq offset fread_unlocked
.got:0000000000208E70                                         ; DATA XREF: _fread_unlocked↑r
.got:0000000000208E78 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000208E80 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000208E88 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000208E88                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000208E90 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000208E98 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000208E98                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000208EA0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000208EA8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000208EA8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000208EB0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000208EB8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000208EC0 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000208EC8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000208ED0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000208ED8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000208EE0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000208EE0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000208EE8 __strtoul_internal_ptr dq offset __strtoul_internal
.got:0000000000208EE8                                         ; DATA XREF: ___strtoul_internal↑r
.got:0000000000208EF0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000208EF8 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000208EF8                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000208F00 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:0000000000208F08 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000208F10 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000208F10                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000208F18 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000208F20 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000208F28 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000208F30 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000208F38 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000208F40 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000208F48 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000208F50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000208F58 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000208F58                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000208F60 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000208F68 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000208F70 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000208F78 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:0000000000208F80 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000208F88 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000208F90 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000208F98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000208FA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000208FA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000208FB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000208FB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000208FB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000208FC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000208FC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000208FC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000208FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000208FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000208FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000208FD8                                         ; DATA XREF: start+24↑r
.got:0000000000208FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000208FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000208FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000208FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000208FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000208FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000208FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000208FF0 _got            ends
.got:0000000000208FF0
LOAD:0000000000208FF8 ; ===========================================================================
LOAD:0000000000208FF8
LOAD:0000000000208FF8 ; Segment type: Pure data
LOAD:0000000000208FF8 ; Segment permissions: Read/Write
LOAD:0000000000208FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000208FF8                 assume cs:LOAD
LOAD:0000000000208FF8                 ;org 208FF8h
LOAD:0000000000208FF8                 align 20h
LOAD:0000000000208FF8 LOAD            ends
LOAD:0000000000208FF8
.data:0000000000209000 ; ===========================================================================
.data:0000000000209000
.data:0000000000209000 ; Segment type: Pure data
.data:0000000000209000 ; Segment permissions: Read/Write
.data:0000000000209000 _data           segment align_32 public 'DATA' use64
.data:0000000000209000                 assume cs:_data
.data:0000000000209000                 ;org 209000h
.data:0000000000209000                 public __data_start ; weak
.data:0000000000209000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000209000                                         ; data_start
.data:0000000000209001                 db    0
.data:0000000000209002                 db    0
.data:0000000000209003                 db    0
.data:0000000000209004                 db    0
.data:0000000000209005                 db    0
.data:0000000000209006                 db    0
.data:0000000000209007                 db    0
.data:0000000000209008                 public __dso_handle
.data:0000000000209008 ; void *_dso_handle
.data:0000000000209008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000209008                                         ; atexit↑r ...
.data:0000000000209010                 public Version
.data:0000000000209010 Version         dq offset a831          ; DATA XREF: main+122↑r
.data:0000000000209010                                         ; "8.31"
.data:0000000000209018                 public exit_failure
.data:0000000000209018 ; int exit_failure
.data:0000000000209018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2D92↑r
.data:0000000000209018                                         ; xalloc_die+17↑r
.data:000000000020901C                 align 20h
.data:0000000000209020                 public quote_quoting_options
.data:0000000000209020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000209020                                         ; quote_mem↑o ...
.data:0000000000209021                 db    0
.data:0000000000209022                 db    0
.data:0000000000209023                 db    0
.data:0000000000209024                 db    0
.data:0000000000209025                 db    0
.data:0000000000209026                 db    0
.data:0000000000209027                 db    0
.data:0000000000209028                 db    0
.data:0000000000209029                 db    0
.data:000000000020902A                 db    0
.data:000000000020902B                 db    0
.data:000000000020902C                 db    0
.data:000000000020902D                 db    0
.data:000000000020902E                 db    0
.data:000000000020902F                 db    0
.data:0000000000209030                 db    0
.data:0000000000209031                 db    0
.data:0000000000209032                 db    0
.data:0000000000209033                 db    0
.data:0000000000209034                 db    0
.data:0000000000209035                 db    0
.data:0000000000209036                 db    0
.data:0000000000209037                 db    0
.data:0000000000209038                 db    0
.data:0000000000209039                 db    0
.data:000000000020903A                 db    0
.data:000000000020903B                 db    0
.data:000000000020903C                 db    0
.data:000000000020903D                 db    0
.data:000000000020903E                 db    0
.data:000000000020903F                 db    0
.data:0000000000209040                 db    0
.data:0000000000209041                 db    0
.data:0000000000209042                 db    0
.data:0000000000209043                 db    0
.data:0000000000209044                 db    0
.data:0000000000209045                 db    0
.data:0000000000209046                 db    0
.data:0000000000209047                 db    0
.data:0000000000209048                 db    0
.data:0000000000209049                 db    0
.data:000000000020904A                 db    0
.data:000000000020904B                 db    0
.data:000000000020904C                 db    0
.data:000000000020904D                 db    0
.data:000000000020904E                 db    0
.data:000000000020904F                 db    0
.data:0000000000209050                 db    0
.data:0000000000209051                 db    0
.data:0000000000209052                 db    0
.data:0000000000209053                 db    0
.data:0000000000209054                 db    0
.data:0000000000209055                 db    0
.data:0000000000209056                 db    0
.data:0000000000209057                 db    0
.data:0000000000209058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000209058                                         ; quotearg_n_options:loc_424D↑r ...
.data:000000000020905C                 align 20h
.data:0000000000209060 ; void *slotvec
.data:0000000000209060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000209060                                         ; quotearg_n_options+76↑w ...
.data:0000000000209068                 align 10h
.data:0000000000209070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000209070                                         ; quotearg_n_options+187↑r ...
.data:0000000000209078 off_209078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000209078 _data           ends
.data:0000000000209078
.bss:0000000000209080 ; ===========================================================================
.bss:0000000000209080
.bss:0000000000209080 ; Segment type: Uninitialized
.bss:0000000000209080 ; Segment permissions: Read/Write
.bss:0000000000209080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000209080                 assume cs:_bss
.bss:0000000000209080                 ;org 209080h
.bss:0000000000209080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000209080                 public __bss_start ; weak
.bss:0000000000209080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000838↑o
.bss:0000000000209080                                         ; LOAD:0000000000000898↑o ...
.bss:0000000000209080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000209080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000209080                                         ; _edata
.bss:0000000000209080                                         ; Copy of shared data
.bss:0000000000209088                 public stdout@@GLIBC_2_2_5
.bss:0000000000209088 ; FILE *stdout
.bss:0000000000209088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000820↑o
.bss:0000000000209088                                         ; main+11B↑r ...
.bss:0000000000209088                                         ; Alternative name is 'stdout'
.bss:0000000000209088                                         ; Copy of shared data
.bss:0000000000209090                 public stdin@@GLIBC_2_2_5
.bss:0000000000209090 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000850↑o
.bss:0000000000209090                                         ; main:loc_19DB↑r
.bss:0000000000209090                                         ; Alternative name is 'stdin'
.bss:0000000000209090                                         ; Copy of shared data
.bss:0000000000209098                 public optind@@GLIBC_2_2_5
.bss:0000000000209098 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000008C8↑o
.bss:0000000000209098                                         ; main:loc_194F↑r
.bss:0000000000209098                                         ; Alternative name is 'optind'
.bss:0000000000209098                                         ; Copy of shared data
.bss:000000000020909C                 align 20h
.bss:00000000002090A0                 public optarg@@GLIBC_2_2_5
.bss:00000000002090A0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008E0↑o
.bss:00000000002090A0                                         ; main+C1↑r
.bss:00000000002090A0                                         ; Alternative name is 'optarg'
.bss:00000000002090A0                                         ; Copy of shared data
.bss:00000000002090A8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002090A8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002090A8                                         ; DATA XREF: LOAD:0000000000000868↑o
.bss:00000000002090A8                                         ; LOAD:0000000000000880↑o ...
.bss:00000000002090A8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002090A8                                         ; Copy of shared data
.bss:00000000002090B0                 align 20h
.bss:00000000002090C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002090C0 ; FILE *stderr
.bss:00000000002090C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008B0↑o
.bss:00000000002090C0                                         ; usage+3D↑r ...
.bss:00000000002090C0                                         ; Alternative name is 'stderr'
.bss:00000000002090C0                                         ; Copy of shared data
.bss:00000000002090C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002090C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002090C9                 align 10h
.bss:00000000002090D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002090D0                                         ; close_stdout+1B↑r
.bss:00000000002090D1                 align 8
.bss:00000000002090D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002090D8                                         ; close_stdout+56↑r
.bss:00000000002090E0                 public program_name
.bss:00000000002090E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002090E0                                         ; set_program_name:loc_2E6D↑w
.bss:00000000002090E8                 align 20h
.bss:0000000000209100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000209100                                         ; quotearg_free+46↑o ...
.bss:0000000000209101                 db    ? ;
.bss:0000000000209102                 db    ? ;
.bss:0000000000209103                 db    ? ;
.bss:0000000000209104                 db    ? ;
.bss:0000000000209105                 db    ? ;
.bss:0000000000209106                 db    ? ;
.bss:0000000000209107                 db    ? ;
.bss:0000000000209108                 db    ? ;
.bss:0000000000209109                 db    ? ;
.bss:000000000020910A                 db    ? ;
.bss:000000000020910B                 db    ? ;
.bss:000000000020910C                 db    ? ;
.bss:000000000020910D                 db    ? ;
.bss:000000000020910E                 db    ? ;
.bss:000000000020910F                 db    ? ;
.bss:0000000000209110                 db    ? ;
.bss:0000000000209111                 db    ? ;
.bss:0000000000209112                 db    ? ;
.bss:0000000000209113                 db    ? ;
.bss:0000000000209114                 db    ? ;
.bss:0000000000209115                 db    ? ;
.bss:0000000000209116                 db    ? ;
.bss:0000000000209117                 db    ? ;
.bss:0000000000209118                 db    ? ;
.bss:0000000000209119                 db    ? ;
.bss:000000000020911A                 db    ? ;
.bss:000000000020911B                 db    ? ;
.bss:000000000020911C                 db    ? ;
.bss:000000000020911D                 db    ? ;
.bss:000000000020911E                 db    ? ;
.bss:000000000020911F                 db    ? ;
.bss:0000000000209120                 db    ? ;
.bss:0000000000209121                 db    ? ;
.bss:0000000000209122                 db    ? ;
.bss:0000000000209123                 db    ? ;
.bss:0000000000209124                 db    ? ;
.bss:0000000000209125                 db    ? ;
.bss:0000000000209126                 db    ? ;
.bss:0000000000209127                 db    ? ;
.bss:0000000000209128                 db    ? ;
.bss:0000000000209129                 db    ? ;
.bss:000000000020912A                 db    ? ;
.bss:000000000020912B                 db    ? ;
.bss:000000000020912C                 db    ? ;
.bss:000000000020912D                 db    ? ;
.bss:000000000020912E                 db    ? ;
.bss:000000000020912F                 db    ? ;
.bss:0000000000209130                 db    ? ;
.bss:0000000000209131                 db    ? ;
.bss:0000000000209132                 db    ? ;
.bss:0000000000209133                 db    ? ;
.bss:0000000000209134                 db    ? ;
.bss:0000000000209135                 db    ? ;
.bss:0000000000209136                 db    ? ;
.bss:0000000000209137                 db    ? ;
.bss:0000000000209138                 db    ? ;
.bss:0000000000209139                 db    ? ;
.bss:000000000020913A                 db    ? ;
.bss:000000000020913B                 db    ? ;
.bss:000000000020913C                 db    ? ;
.bss:000000000020913D                 db    ? ;
.bss:000000000020913E                 db    ? ;
.bss:000000000020913F                 db    ? ;
.bss:0000000000209140                 db    ? ;
.bss:0000000000209141                 db    ? ;
.bss:0000000000209142                 db    ? ;
.bss:0000000000209143                 db    ? ;
.bss:0000000000209144                 db    ? ;
.bss:0000000000209145                 db    ? ;
.bss:0000000000209146                 db    ? ;
.bss:0000000000209147                 db    ? ;
.bss:0000000000209148                 db    ? ;
.bss:0000000000209149                 db    ? ;
.bss:000000000020914A                 db    ? ;
.bss:000000000020914B                 db    ? ;
.bss:000000000020914C                 db    ? ;
.bss:000000000020914D                 db    ? ;
.bss:000000000020914E                 db    ? ;
.bss:000000000020914F                 db    ? ;
.bss:0000000000209150                 db    ? ;
.bss:0000000000209151                 db    ? ;
.bss:0000000000209152                 db    ? ;
.bss:0000000000209153                 db    ? ;
.bss:0000000000209154                 db    ? ;
.bss:0000000000209155                 db    ? ;
.bss:0000000000209156                 db    ? ;
.bss:0000000000209157                 db    ? ;
.bss:0000000000209158                 db    ? ;
.bss:0000000000209159                 db    ? ;
.bss:000000000020915A                 db    ? ;
.bss:000000000020915B                 db    ? ;
.bss:000000000020915C                 db    ? ;
.bss:000000000020915D                 db    ? ;
.bss:000000000020915E                 db    ? ;
.bss:000000000020915F                 db    ? ;
.bss:0000000000209160                 db    ? ;
.bss:0000000000209161                 db    ? ;
.bss:0000000000209162                 db    ? ;
.bss:0000000000209163                 db    ? ;
.bss:0000000000209164                 db    ? ;
.bss:0000000000209165                 db    ? ;
.bss:0000000000209166                 db    ? ;
.bss:0000000000209167                 db    ? ;
.bss:0000000000209168                 db    ? ;
.bss:0000000000209169                 db    ? ;
.bss:000000000020916A                 db    ? ;
.bss:000000000020916B                 db    ? ;
.bss:000000000020916C                 db    ? ;
.bss:000000000020916D                 db    ? ;
.bss:000000000020916E                 db    ? ;
.bss:000000000020916F                 db    ? ;
.bss:0000000000209170                 db    ? ;
.bss:0000000000209171                 db    ? ;
.bss:0000000000209172                 db    ? ;
.bss:0000000000209173                 db    ? ;
.bss:0000000000209174                 db    ? ;
.bss:0000000000209175                 db    ? ;
.bss:0000000000209176                 db    ? ;
.bss:0000000000209177                 db    ? ;
.bss:0000000000209178                 db    ? ;
.bss:0000000000209179                 db    ? ;
.bss:000000000020917A                 db    ? ;
.bss:000000000020917B                 db    ? ;
.bss:000000000020917C                 db    ? ;
.bss:000000000020917D                 db    ? ;
.bss:000000000020917E                 db    ? ;
.bss:000000000020917F                 db    ? ;
.bss:0000000000209180                 db    ? ;
.bss:0000000000209181                 db    ? ;
.bss:0000000000209182                 db    ? ;
.bss:0000000000209183                 db    ? ;
.bss:0000000000209184                 db    ? ;
.bss:0000000000209185                 db    ? ;
.bss:0000000000209186                 db    ? ;
.bss:0000000000209187                 db    ? ;
.bss:0000000000209188                 db    ? ;
.bss:0000000000209189                 db    ? ;
.bss:000000000020918A                 db    ? ;
.bss:000000000020918B                 db    ? ;
.bss:000000000020918C                 db    ? ;
.bss:000000000020918D                 db    ? ;
.bss:000000000020918E                 db    ? ;
.bss:000000000020918F                 db    ? ;
.bss:0000000000209190                 db    ? ;
.bss:0000000000209191                 db    ? ;
.bss:0000000000209192                 db    ? ;
.bss:0000000000209193                 db    ? ;
.bss:0000000000209194                 db    ? ;
.bss:0000000000209195                 db    ? ;
.bss:0000000000209196                 db    ? ;
.bss:0000000000209197                 db    ? ;
.bss:0000000000209198                 db    ? ;
.bss:0000000000209199                 db    ? ;
.bss:000000000020919A                 db    ? ;
.bss:000000000020919B                 db    ? ;
.bss:000000000020919C                 db    ? ;
.bss:000000000020919D                 db    ? ;
.bss:000000000020919E                 db    ? ;
.bss:000000000020919F                 db    ? ;
.bss:00000000002091A0                 db    ? ;
.bss:00000000002091A1                 db    ? ;
.bss:00000000002091A2                 db    ? ;
.bss:00000000002091A3                 db    ? ;
.bss:00000000002091A4                 db    ? ;
.bss:00000000002091A5                 db    ? ;
.bss:00000000002091A6                 db    ? ;
.bss:00000000002091A7                 db    ? ;
.bss:00000000002091A8                 db    ? ;
.bss:00000000002091A9                 db    ? ;
.bss:00000000002091AA                 db    ? ;
.bss:00000000002091AB                 db    ? ;
.bss:00000000002091AC                 db    ? ;
.bss:00000000002091AD                 db    ? ;
.bss:00000000002091AE                 db    ? ;
.bss:00000000002091AF                 db    ? ;
.bss:00000000002091B0                 db    ? ;
.bss:00000000002091B1                 db    ? ;
.bss:00000000002091B2                 db    ? ;
.bss:00000000002091B3                 db    ? ;
.bss:00000000002091B4                 db    ? ;
.bss:00000000002091B5                 db    ? ;
.bss:00000000002091B6                 db    ? ;
.bss:00000000002091B7                 db    ? ;
.bss:00000000002091B8                 db    ? ;
.bss:00000000002091B9                 db    ? ;
.bss:00000000002091BA                 db    ? ;
.bss:00000000002091BB                 db    ? ;
.bss:00000000002091BC                 db    ? ;
.bss:00000000002091BD                 db    ? ;
.bss:00000000002091BE                 db    ? ;
.bss:00000000002091BF                 db    ? ;
.bss:00000000002091C0                 db    ? ;
.bss:00000000002091C1                 db    ? ;
.bss:00000000002091C2                 db    ? ;
.bss:00000000002091C3                 db    ? ;
.bss:00000000002091C4                 db    ? ;
.bss:00000000002091C5                 db    ? ;
.bss:00000000002091C6                 db    ? ;
.bss:00000000002091C7                 db    ? ;
.bss:00000000002091C8                 db    ? ;
.bss:00000000002091C9                 db    ? ;
.bss:00000000002091CA                 db    ? ;
.bss:00000000002091CB                 db    ? ;
.bss:00000000002091CC                 db    ? ;
.bss:00000000002091CD                 db    ? ;
.bss:00000000002091CE                 db    ? ;
.bss:00000000002091CF                 db    ? ;
.bss:00000000002091D0                 db    ? ;
.bss:00000000002091D1                 db    ? ;
.bss:00000000002091D2                 db    ? ;
.bss:00000000002091D3                 db    ? ;
.bss:00000000002091D4                 db    ? ;
.bss:00000000002091D5                 db    ? ;
.bss:00000000002091D6                 db    ? ;
.bss:00000000002091D7                 db    ? ;
.bss:00000000002091D8                 db    ? ;
.bss:00000000002091D9                 db    ? ;
.bss:00000000002091DA                 db    ? ;
.bss:00000000002091DB                 db    ? ;
.bss:00000000002091DC                 db    ? ;
.bss:00000000002091DD                 db    ? ;
.bss:00000000002091DE                 db    ? ;
.bss:00000000002091DF                 db    ? ;
.bss:00000000002091E0                 db    ? ;
.bss:00000000002091E1                 db    ? ;
.bss:00000000002091E2                 db    ? ;
.bss:00000000002091E3                 db    ? ;
.bss:00000000002091E4                 db    ? ;
.bss:00000000002091E5                 db    ? ;
.bss:00000000002091E6                 db    ? ;
.bss:00000000002091E7                 db    ? ;
.bss:00000000002091E8                 db    ? ;
.bss:00000000002091E9                 db    ? ;
.bss:00000000002091EA                 db    ? ;
.bss:00000000002091EB                 db    ? ;
.bss:00000000002091EC                 db    ? ;
.bss:00000000002091ED                 db    ? ;
.bss:00000000002091EE                 db    ? ;
.bss:00000000002091EF                 db    ? ;
.bss:00000000002091F0                 db    ? ;
.bss:00000000002091F1                 db    ? ;
.bss:00000000002091F2                 db    ? ;
.bss:00000000002091F3                 db    ? ;
.bss:00000000002091F4                 db    ? ;
.bss:00000000002091F5                 db    ? ;
.bss:00000000002091F6                 db    ? ;
.bss:00000000002091F7                 db    ? ;
.bss:00000000002091F8                 db    ? ;
.bss:00000000002091F9                 db    ? ;
.bss:00000000002091FA                 db    ? ;
.bss:00000000002091FB                 db    ? ;
.bss:00000000002091FC                 db    ? ;
.bss:00000000002091FD                 db    ? ;
.bss:00000000002091FE                 db    ? ;
.bss:00000000002091FF                 db    ? ;
.bss:0000000000209200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000209200                                         ; get_quoting_style↑o ...
.bss:0000000000209210 xmmword_209210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000209210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000209220 xmmword_209220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000209220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000209230 qword_209230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000209230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000209230 _bss            ends
.bss:0000000000209230
.prgend:0000000000209238 ; ===========================================================================
.prgend:0000000000209238
.prgend:0000000000209238 ; Segment type: Zero-length
.prgend:0000000000209238 _prgend         segment byte public '' use64
.prgend:0000000000209238 _end            label byte
.prgend:0000000000209238 _prgend         ends
.prgend:0000000000209238
extern:0000000000209240 ; ===========================================================================
extern:0000000000209240
extern:0000000000209240 ; Segment type: Externs
extern:0000000000209240 ; extern
extern:0000000000209240 ; void free(void *ptr)
extern:0000000000209240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000209240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000209248 ; void __noreturn abort(void)
extern:0000000000209248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000209248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000209250 ; int *_errno_location(void)
extern:0000000000209250                 extrn __errno_location:near
extern:0000000000209250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000209250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000209258 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000209258                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000209258                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000209260 ; void __noreturn exit(int status)
extern:0000000000209260                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000209260                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000209268 ; size_t _fpending(FILE *fp)
extern:0000000000209268                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000209268                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000209270 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000209270                 extrn fread_unlocked:near
extern:0000000000209270                                         ; CODE XREF: _fread_unlocked↑j
extern:0000000000209270                                         ; DATA XREF: .got:fread_unlocked_ptr↑o
extern:0000000000209278 ; char *textdomain(const char *domainname)
extern:0000000000209278                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000209278                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000209280 ; int fclose(FILE *stream)
extern:0000000000209280                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000209280                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000209288 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000209288                 extrn bindtextdomain:near
extern:0000000000209288                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000209288                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000209290 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000209290                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000209290                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000209298 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000209298                 extrn __ctype_get_mb_cur_max:near
extern:0000000000209298                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000209298                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002092A0 ; size_t strlen(const char *s)
extern:00000000002092A0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002092A0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002092A8                 extrn __stack_chk_fail:near
extern:00000000002092A8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002092A8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002092B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002092B0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002092B0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002092B8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002092B8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002092B8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002092C0 ; char *strchr(const char *s, int c)
extern:00000000002092C0                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:00000000002092C0                                         ; DATA XREF: .got:strchr_ptr↑o
extern:00000000002092C8 ; int _overflow(_IO_FILE *, int)
extern:00000000002092C8                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:00000000002092C8                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:00000000002092D0 ; char *strrchr(const char *s, int c)
extern:00000000002092D0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002092D0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002092D8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002092D8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002092D8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002092E0 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:00000000002092E0                 extrn __assert_fail:near
extern:00000000002092E0                                         ; CODE XREF: ___assert_fail↑j
extern:00000000002092E0                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:00000000002092E8 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:00000000002092E8                 extrn __strtoul_internal:near
extern:00000000002092E8                                         ; CODE XREF: ___strtoul_internal↑j
extern:00000000002092E8                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:00000000002092F0 ; void *memset(void *s, int c, size_t n)
extern:00000000002092F0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002092F0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002092F8 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:00000000002092F8                 extrn posix_fadvise:near
extern:00000000002092F8                                         ; CODE XREF: _posix_fadvise↑j
extern:00000000002092F8                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:0000000000209300 ; void *memchr(const void *s, int c, size_t n)
extern:0000000000209300                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:0000000000209300                                         ; DATA XREF: .got:memchr_ptr↑o
extern:0000000000209308 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000209308                 extrn __libc_start_main:near
extern:0000000000209308                                         ; CODE XREF: start+24↑p
extern:0000000000209308                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000209310 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000209310                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000209310                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000209318 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000209318                 extrn fputs_unlocked:near
extern:0000000000209318                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000209318                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000209320 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000209320                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000209320                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000209328 ; int strcmp(const char *s1, const char *s2)
extern:0000000000209328                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000209328                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000209330 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000209330                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000209330                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000209338 ; int fileno(FILE *stream)
extern:0000000000209338                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000209338                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000209340 ; void *malloc(size_t size)
extern:0000000000209340                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000209340                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000209348 ; int fflush(FILE *stream)
extern:0000000000209348                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000209348                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000209350 ; char *nl_langinfo(nl_item item)
extern:0000000000209350                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000209350                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000209358 ; int _freading(FILE *fp)
extern:0000000000209358                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000209358                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000209360 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000209360                 extrn fwrite_unlocked:near
extern:0000000000209360                                         ; CODE XREF: _fwrite_unlocked↑j
extern:0000000000209360                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:0000000000209368 ; void *realloc(void *ptr, size_t size)
extern:0000000000209368                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000209368                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000209370 ; char *setlocale(int category, const char *locale)
extern:0000000000209370                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000209370                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000209378                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000209378                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000209380 ; void *memmove(void *dest, const void *src, size_t n)
extern:0000000000209380                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:0000000000209380                                         ; DATA XREF: .got:memmove_ptr↑o
extern:0000000000209388 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000209388                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000209388                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000209390 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000209390                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000209390                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000209398 ; FILE *fopen(const char *filename, const char *modes)
extern:0000000000209398                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:0000000000209398                                         ; DATA XREF: .got:fopen_ptr↑o
extern:00000000002093A0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002093A0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002093A0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002093A8 ; void __noreturn exit(int status)
extern:00000000002093A8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002093A8                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002093B0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002093B0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002093B0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002093B8                 extrn __fprintf_chk:near
extern:00000000002093B8                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002093B8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002093C0 ; int mbsinit(const mbstate_t *ps)
extern:00000000002093C0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002093C0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002093C8 ; int iswprint(wint_t wc)
extern:00000000002093C8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002093C8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002093D0 ; int __fastcall __cxa_finalize(void *)
extern:00000000002093D0                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002093D0                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002093D0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002093D8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002093D8                 extrn __ctype_b_loc:near
extern:00000000002093D8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002093D8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002093E0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002093E0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002093E8                 extrn __gmon_start__:near ; weak
extern:00000000002093E8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002093E8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002093F0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002093F0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002093F0
extern:00000000002093F0
extern:00000000002093F0                 end start
