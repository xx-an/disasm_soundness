LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 4DC8417FA6913EBA7F015337D4A1EC368ACC272F24B0239E7E18CF7D0E5D43BB
LOAD:0000000000000000 ; Input MD5    : 1807D233276DC5CC53F39A2D76E53194
LOAD:0000000000000000 ; Input CRC32  : 4075E55E
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/chgrp
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'chgrp.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'chown-core.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'root-dev-ino.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xfts.c'
LOAD:0000000000000000 ; Source File : 'xstrtoul.c'
LOAD:0000000000000000 ; Source File : 'fts.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'cycle-check.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'i-ring.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'openat-safer.c'
LOAD:0000000000000000 ; Source File : 'opendirat.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 47078h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0D998h               ; Size in file image
LOAD:00000000000000D8                 dq 0D998h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0D9B0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20D9B0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 6D0h                 ; Size in file image
LOAD:0000000000000110                 dq 890h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0DBB8h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20DBB8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0BD28h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0BD28h               ; Physical address
LOAD:00000000000001B0                 dq 4A4h                 ; Size in file image
LOAD:00000000000001B8                 dq 4A4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0D9B0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20D9B0h              ; Physical address
LOAD:0000000000000220                 dq 650h                 ; Size in file image
LOAD:0000000000000228                 dq 650h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 35h, 0Eh, 0FEh, 36h, 38h, 0B1h, 92h, 0F9h, 52h, 0E6h ; Desc
LOAD:0000000000000284                 db 3, 48h, 32h, 95h, 8Ch, 1Eh, 0ADh, 29h, 9Eh, 50h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 49h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 49h, 4Ah, 4Fh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aEndgrent - offset byte_A78, 12h, 0, 0, \ ; "endgrent"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_A78, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_A78, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_A78, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_A78, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_A78, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aStrcpy - offset byte_A78, 12h, 0, 0, \ ; "strcpy"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFpending - offset byte_A78, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aQsort - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "qsort"
LOAD:00000000000003D0                            0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFcntl - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:00000000000003E8                            0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_A78, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aFclose - offset byte_A78, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aGetpwuid - offset byte_A78, 12h, 0, 0, \ ; "getpwuid"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aBindtextdomain - offset byte_A78, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStpcpy - offset byte_A78, 12h, 0, 0, \ ; "stpcpy"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aDcgettext - offset byte_A78, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_A78, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aStrlen - offset byte_A78, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aLxstat - offset byte_A78, 12h, 0, 0, \ ; "__lxstat"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aOpenat - offset byte_A78, 12h, 0, 0, \ ; "openat"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStackChkFail - offset byte_A78, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aGetoptLong - offset byte_A78, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aMbrtowc - offset byte_A78, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aStrchr - offset byte_A78, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aGetgrgid - offset byte_A78, 12h, 0, 0, \ ; "getgrgid"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFxstatat - offset byte_A78, 12h, 0, 0, \ ; "__fxstatat"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aStrrchr - offset byte_A78, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aLseek - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000598                            0>
LOAD:00000000000005B0                 Elf64_Sym <offset aAssertFail - offset byte_A78, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aMemset - offset byte_A78, 12h, 0, 0, \ ; "memset"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFclose+1 - offset byte_A78, 12h, 0, 0, \ ; "close"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aOpenat2 - offset byte_A78, 12h, 0, 0, \ ; "__openat_2"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aClosedir - offset byte_A78, 12h, 0, 0, \ ; "closedir"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aLibcStartMain - offset byte_A78, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aMemcmp - offset byte_A78, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFputsUnlocked - offset byte_A78, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aCalloc - offset byte_A78, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aDirfd - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "dirfd"
LOAD:0000000000000688                            0>
LOAD:00000000000006A0                 Elf64_Sym <offset aGmonStart - offset byte_A78, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aMemcpy - offset byte_A78, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aGetgrnam - offset byte_A78, 12h, 0, 0, \ ; "getgrnam"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFileno - offset byte_A78, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aXstat - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000700                            0>
LOAD:0000000000000718                 Elf64_Sym <offset aReaddir - offset byte_A78, 12h, 0, 0, \ ; "readdir"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aMalloc - offset byte_A78, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFflush - offset byte_A78, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aNlLanginfo - offset byte_A78, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFxstat - offset byte_A78, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFreading - offset byte_A78, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFchdir - offset byte_A78, 12h, 0, 0, \ ; "fchdir"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aRealloc - offset byte_A78, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aSetlocale - offset byte_A78, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aPrintfChk - offset byte_A78, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aMemmove - offset byte_A78, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aError - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000820                            0>
LOAD:0000000000000838                 Elf64_Sym <offset aOpen - offset byte_A78, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:0000000000000838                            0>
LOAD:0000000000000850                 Elf64_Sym <offset aFseeko - offset byte_A78, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aFchown - offset byte_A78, 12h, 0, 0, \ ; "fchown"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aFdopendir - offset byte_A78, 12h, 0, 0, \ ; "fdopendir"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aStrtoul - offset byte_A78, 12h, 0, 0, \ ; "strtoul"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aFstatfs - offset byte_A78, 12h, 0, 0, \ ; "fstatfs"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aCxaAtexit - offset byte_A78, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aFchownat - offset byte_A78, 12h, 0, 0, \ ; "fchownat"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aExit+1 - offset byte_A78, 12h, 0, 0, \ ; "exit"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aFwrite - offset byte_A78, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aFprintfChk - offset byte_A78, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aItmRegistertmc - offset byte_A78, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aMbsinit - offset byte_A78, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aIswprint - offset byte_A78, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aCxaFinalize - offset byte_A78, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aCtypeBLoc - offset byte_A78, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aStdout - offset byte_A78, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000009B8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000009D0                 Elf64_Sym <offset aProgname - offset byte_A78, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000009D0                            offset __bss_start, 8>
LOAD:00000000000009E8                 Elf64_Sym <offset aProgramInvocat - offset byte_A78, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000009E8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A00                 Elf64_Sym <offset aPrognameFull - offset byte_A78, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000A00                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A18                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_A78, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000A18                            offset __bss_start, 8>
LOAD:0000000000000A30                 Elf64_Sym <offset aStderr - offset byte_A78, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000A30                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000A48                 Elf64_Sym <offset aOptind - offset byte_A78, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000A48                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000A60                 Elf64_Sym <offset aOptarg - offset byte_A78, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000A60                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000A78 ; ELF String Table
LOAD:0000000000000A78 byte_A78        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A78                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000A79 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000E88↓o
LOAD:0000000000000A83 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000A8A aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A91 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000A9E aReaddir        db 'readdir',0          ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000AA6 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000AB0 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000AB8 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000AC0 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000AC7 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000ACF aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000AD9 aGetpwuid       db 'getpwuid',0         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000AE2 aClosedir       db 'closedir',0         ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000AEB aFchdir         db 'fchdir',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000AF2 aGetgrgid       db 'getgrgid',0         ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000AFB aError          db 'error',0            ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000B01 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000B12 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000B1B aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000B24 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000B2C aFstatfs        db 'fstatfs',0          ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000B34 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000B3A aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000B3A                                         ; LOAD:00000000000008F8↑o
LOAD:0000000000000B40 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000B40                                         ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000B58 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000B66 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000B66                                         ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000B7D aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000B84 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000B8B aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000B92 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000BA3 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000BAA aEndgrent       db 'endgrent',0         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000BB3 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000BC1 aGetgrnam       db 'getgrnam',0         ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000BCA aFchown         db 'fchown',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000BD1 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000BD8 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000BDE aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000BE5 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000BE5                                         ; LOAD:00000000000005E0↑o
LOAD:0000000000000BEC aStrtoul        db 'strtoul',0          ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000BF4 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000BFB aFdopendir      db 'fdopendir',0        ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000C05 aOpenat2        db '__openat_2',0       ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000C10 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000C18 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000C24 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000C32 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000C39 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000C44 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000C4B aFchownat       db 'fchownat',0         ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000C54 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000C60 aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000C69 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000C70 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000C77 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000C82 aOpen           db 'open',0             ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000C87 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000C8E aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000C8E                                         ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000CAC aQsort          db 'qsort',0            ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000CB2 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000CC1 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000CC7 aOpenat         db 'openat',0           ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000CCE aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000CD6 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000CDE aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000CDE                                         ; LOAD:0000000000000400↑o
LOAD:0000000000000CED aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000CF8 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000CF8                                         ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000D0A aDirfd          db 'dirfd',0            ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000D10 aStpcpy         db 'stpcpy',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000D17 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000D1E aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000D2D aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000D32 aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000D3D aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000D4D aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000D5A aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000E98↓o
LOAD:0000000000000D64 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000EA8↓o
LOAD:0000000000000D70 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000EB8↓o
LOAD:0000000000000D7B aGlibc27        db 'GLIBC_2.7',0        ; DATA XREF: LOAD:0000000000000EC8↓o
LOAD:0000000000000D85 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000ED8↓o
LOAD:0000000000000D8F aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000EE8↓o
LOAD:0000000000000D9B aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000D9B                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000DB7 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000DC6 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000DC6                                         ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000DE0 ; ELF GNU Symbol Version Table
LOAD:0000000000000DE0                 dw 0
LOAD:0000000000000DE2                 dw 2                    ; endgrent@@GLIBC_2.2.5
LOAD:0000000000000DE4                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000DE6                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000DE8                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000DEA                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000DEC                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000DEE                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000DF0                 dw 2                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000000DF2                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000DF4                 dw 2                    ; qsort@@GLIBC_2.2.5
LOAD:0000000000000DF6                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000DF8                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000DFA                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000DFC                 dw 2                    ; getpwuid@@GLIBC_2.2.5
LOAD:0000000000000DFE                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000E00                 dw 2                    ; stpcpy@@GLIBC_2.2.5
LOAD:0000000000000E02                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000E04                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000E06                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000E08                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000E0A                 dw 3                    ; openat@@GLIBC_2.4
LOAD:0000000000000E0C                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000E0E                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000E10                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000E12                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000E14                 dw 2                    ; getgrgid@@GLIBC_2.2.5
LOAD:0000000000000E16                 dw 3                    ; __fxstatat@@GLIBC_2.4
LOAD:0000000000000E18                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000E1A                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000E1C                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000E1E                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000E20                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000E22                 dw 4                    ; __openat_2@@GLIBC_2.7
LOAD:0000000000000E24                 dw 2                    ; closedir@@GLIBC_2.2.5
LOAD:0000000000000E26                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000E28                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000E2A                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000E2C                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000E2E                 dw 2                    ; dirfd@@GLIBC_2.2.5
LOAD:0000000000000E30                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000E32                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000E34                 dw 2                    ; getgrnam@@GLIBC_2.2.5
LOAD:0000000000000E36                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000E38                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000E3A                 dw 2                    ; readdir@@GLIBC_2.2.5
LOAD:0000000000000E3C                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000E3E                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000E40                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000E42                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000E44                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000E46                 dw 2                    ; fchdir@@GLIBC_2.2.5
LOAD:0000000000000E48                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000E4A                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000E4C                 dw 6                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000E4E                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000E50                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000E52                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000E54                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000E56                 dw 2                    ; fchown@@GLIBC_2.2.5
LOAD:0000000000000E58                 dw 3                    ; fdopendir@@GLIBC_2.4
LOAD:0000000000000E5A                 dw 2                    ; strtoul@@GLIBC_2.2.5
LOAD:0000000000000E5C                 dw 2                    ; fstatfs@@GLIBC_2.2.5
LOAD:0000000000000E5E                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000E60                 dw 3                    ; fchownat@@GLIBC_2.4
LOAD:0000000000000E62                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000E64                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000E66                 dw 6                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000E68                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000E6A                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000E6C                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000E6E                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000E70                 dw 7                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000E72                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000E74                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000E76                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000E78                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000E7A                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000E7C                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000E7E                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000E80                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000E82                 dw 0
LOAD:0000000000000E84                 dw 0
LOAD:0000000000000E86                 dw 0
LOAD:0000000000000E88 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000E88                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_A78, 10h, 0> ; "libc.so.6"
LOAD:0000000000000E98                 Elf64_Vernaux <0D696913h, 0, 7, offset aGlibc23 - offset byte_A78, \ ; "GLIBC_2.3"
LOAD:0000000000000E98                                10h>
LOAD:0000000000000EA8                 Elf64_Vernaux <9691974h, 0, 6, offset aGlibc234 - offset byte_A78, \ ; "GLIBC_2.3.4"
LOAD:0000000000000EA8                                10h>
LOAD:0000000000000EB8                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_A78, \ ; "GLIBC_2.14"
LOAD:0000000000000EB8                                10h>
LOAD:0000000000000EC8                 Elf64_Vernaux <0D696917h, 0, 4, offset aGlibc27 - offset byte_A78, \ ; "GLIBC_2.7"
LOAD:0000000000000EC8                                10h>
LOAD:0000000000000ED8                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_A78, \ ; "GLIBC_2.4"
LOAD:0000000000000ED8                                10h>
LOAD:0000000000000EE8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_A78, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000EF8 ; ELF RELA Relocation Table
LOAD:0000000000000EF8                 Elf64_Rela <20D9B0h, 8, 2340h> ; R_X86_64_RELATIVE +2340h
LOAD:0000000000000F10                 Elf64_Rela <20D9B8h, 8, 2300h> ; R_X86_64_RELATIVE +2300h
LOAD:0000000000000F28                 Elf64_Rela <20D9C0h, 8, 0A546h> ; R_X86_64_RELATIVE +0A546h
LOAD:0000000000000F40                 Elf64_Rela <20D9E0h, 8, 0A550h> ; R_X86_64_RELATIVE +0A550h
LOAD:0000000000000F58                 Elf64_Rela <20DA00h, 8, 0A55Bh> ; R_X86_64_RELATIVE +0A55Bh
LOAD:0000000000000F70                 Elf64_Rela <20DA20h, 8, 0A558h> ; R_X86_64_RELATIVE +0A558h
LOAD:0000000000000F88                 Elf64_Rela <20DA40h, 8, 0A567h> ; R_X86_64_RELATIVE +0A567h
LOAD:0000000000000FA0                 Elf64_Rela <20DA60h, 8, 0A56Ah> ; R_X86_64_RELATIVE +0A56Ah
LOAD:0000000000000FB8                 Elf64_Rela <20DA80h, 8, 0A578h> ; R_X86_64_RELATIVE +0A578h
LOAD:0000000000000FD0                 Elf64_Rela <20DAA0h, 8, 0A57Eh> ; R_X86_64_RELATIVE +0A57Eh
LOAD:0000000000000FE8                 Elf64_Rela <20DAC0h, 8, 0A55Dh> ; R_X86_64_RELATIVE +0A55Dh
LOAD:0000000000001000                 Elf64_Rela <20DAE0h, 8, 0A585h> ; R_X86_64_RELATIVE +0A585h
LOAD:0000000000001018                 Elf64_Rela <20DB00h, 8, 0A58Dh> ; R_X86_64_RELATIVE +0A58Dh
LOAD:0000000000001030                 Elf64_Rela <20DB20h, 8, 0A592h> ; R_X86_64_RELATIVE +0A592h
LOAD:0000000000001048                 Elf64_Rela <20DB60h, 8, 0B229h> ; R_X86_64_RELATIVE +0B229h
LOAD:0000000000001060                 Elf64_Rela <20DB68h, 8, 0B231h> ; R_X86_64_RELATIVE +0B231h
LOAD:0000000000001078                 Elf64_Rela <20DB70h, 8, 0B237h> ; R_X86_64_RELATIVE +0B237h
LOAD:0000000000001090                 Elf64_Rela <20DB78h, 8, 0B244h> ; R_X86_64_RELATIVE +0B244h
LOAD:00000000000010A8                 Elf64_Rela <20DB80h, 8, 0B251h> ; R_X86_64_RELATIVE +0B251h
LOAD:00000000000010C0                 Elf64_Rela <20DB88h, 8, 0BA7Bh> ; R_X86_64_RELATIVE +0BA7Bh
LOAD:00000000000010D8                 Elf64_Rela <20DB90h, 8, 0B265h> ; R_X86_64_RELATIVE +0B265h
LOAD:00000000000010F0                 Elf64_Rela <20DB98h, 8, 0B24Ah> ; R_X86_64_RELATIVE +0B24Ah
LOAD:0000000000001108                 Elf64_Rela <20DBA0h, 8, 0A4DEh> ; R_X86_64_RELATIVE +0A4DEh
LOAD:0000000000001120                 Elf64_Rela <20DBA8h, 8, 0B26Dh> ; R_X86_64_RELATIVE +0B26Dh
LOAD:0000000000001138                 Elf64_Rela <20E008h, 8, 20E008h> ; R_X86_64_RELATIVE +20E008h
LOAD:0000000000001150                 Elf64_Rela <20E010h, 8, 0B1B4h> ; R_X86_64_RELATIVE +0B1B4h
LOAD:0000000000001168                 Elf64_Rela <20E060h, 8, 20E070h> ; R_X86_64_RELATIVE +20E070h
LOAD:0000000000001180                 Elf64_Rela <20E078h, 8, 20E100h> ; R_X86_64_RELATIVE +20E100h
LOAD:0000000000001198                 Elf64_Rela <20DFD0h, 200000006h, 0> ; R_X86_64_GLOB_DAT free
LOAD:00000000000011B0                 Elf64_Rela <20DFD8h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000011C8                 Elf64_Rela <20DFE0h, 2300000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000011E0                 Elf64_Rela <20DFE8h, 2800000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000011F8                 Elf64_Rela <20DFF0h, 4400000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001210                 Elf64_Rela <20DFF8h, 4700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001228                 Elf64_Rela <20E080h, 4A00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001240                 Elf64_Rela <20E088h, 4900000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001258                 Elf64_Rela <20E090h, 4F00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001270                 Elf64_Rela <20E098h, 5000000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001288                 Elf64_Rela <20E0A0h, 4C00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000012A0                 Elf64_Rela <20E0C0h, 4E00000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000012B8 ; ELF JMPREL Relocation Table
LOAD:00000000000012B8                 Elf64_Rela <20DDC0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT endgrent
LOAD:00000000000012D0                 Elf64_Rela <20DDC8h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:00000000000012E8                 Elf64_Rela <20DDD0h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001300                 Elf64_Rela <20DDD8h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001318                 Elf64_Rela <20DDE0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001330                 Elf64_Rela <20DDE8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:0000000000001348                 Elf64_Rela <20DDF0h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001360                 Elf64_Rela <20DDF8h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT qsort
LOAD:0000000000001378                 Elf64_Rela <20DE00h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001390                 Elf64_Rela <20DE08h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000013A8                 Elf64_Rela <20DE10h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000013C0                 Elf64_Rela <20DE18h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT getpwuid
LOAD:00000000000013D8                 Elf64_Rela <20DE20h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000013F0                 Elf64_Rela <20DE28h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT stpcpy
LOAD:0000000000001408                 Elf64_Rela <20DE30h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001420                 Elf64_Rela <20DE38h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001438                 Elf64_Rela <20DE40h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001450                 Elf64_Rela <20DE48h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000001468                 Elf64_Rela <20DE50h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT openat
LOAD:0000000000001480                 Elf64_Rela <20DE58h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001498                 Elf64_Rela <20DE60h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000014B0                 Elf64_Rela <20DE68h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000014C8                 Elf64_Rela <20DE70h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:00000000000014E0                 Elf64_Rela <20DE78h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT getgrgid
LOAD:00000000000014F8                 Elf64_Rela <20DE80h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:0000000000001510                 Elf64_Rela <20DE88h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001528                 Elf64_Rela <20DE90h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001540                 Elf64_Rela <20DE98h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001558                 Elf64_Rela <20DEA0h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001570                 Elf64_Rela <20DEA8h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001588                 Elf64_Rela <20DEB0h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __openat_2
LOAD:00000000000015A0                 Elf64_Rela <20DEB8h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT closedir
LOAD:00000000000015B8                 Elf64_Rela <20DEC0h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000015D0                 Elf64_Rela <20DEC8h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000015E8                 Elf64_Rela <20DED0h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001600                 Elf64_Rela <20DED8h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT dirfd
LOAD:0000000000001618                 Elf64_Rela <20DEE0h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001630                 Elf64_Rela <20DEE8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT getgrnam
LOAD:0000000000001648                 Elf64_Rela <20DEF0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001660                 Elf64_Rela <20DEF8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001678                 Elf64_Rela <20DF00h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT readdir
LOAD:0000000000001690                 Elf64_Rela <20DF08h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000016A8                 Elf64_Rela <20DF10h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000016C0                 Elf64_Rela <20DF18h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000016D8                 Elf64_Rela <20DF20h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:00000000000016F0                 Elf64_Rela <20DF28h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001708                 Elf64_Rela <20DF30h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT fchdir
LOAD:0000000000001720                 Elf64_Rela <20DF38h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001738                 Elf64_Rela <20DF40h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001750                 Elf64_Rela <20DF48h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001768                 Elf64_Rela <20DF50h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001780                 Elf64_Rela <20DF58h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001798                 Elf64_Rela <20DF60h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:00000000000017B0                 Elf64_Rela <20DF68h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000017C8                 Elf64_Rela <20DF70h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT fchown
LOAD:00000000000017E0                 Elf64_Rela <20DF78h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT fdopendir
LOAD:00000000000017F8                 Elf64_Rela <20DF80h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT strtoul
LOAD:0000000000001810                 Elf64_Rela <20DF88h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT fstatfs
LOAD:0000000000001828                 Elf64_Rela <20DF90h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001840                 Elf64_Rela <20DF98h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT fchownat
LOAD:0000000000001858                 Elf64_Rela <20DFA0h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001870                 Elf64_Rela <20DFA8h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001888                 Elf64_Rela <20DFB0h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000018A0                 Elf64_Rela <20DFB8h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000018B8                 Elf64_Rela <20DFC0h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000018D0                 Elf64_Rela <20DFC8h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000018D0 LOAD            ends
LOAD:00000000000018D0
.init:00000000000018E8 ; ===========================================================================
.init:00000000000018E8
.init:00000000000018E8 ; Segment type: Pure code
.init:00000000000018E8 ; Segment permissions: Read/Execute
.init:00000000000018E8 _init           segment dword public 'CODE' use64
.init:00000000000018E8                 assume cs:_init
.init:00000000000018E8                 ;org 18E8h
.init:00000000000018E8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000018E8
.init:00000000000018E8 ; =============== S U B R O U T I N E =======================================
.init:00000000000018E8
.init:00000000000018E8
.init:00000000000018E8                 public _init_proc
.init:00000000000018E8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000018E8                 sub     rsp, 8          ; _init
.init:00000000000018EC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000018F3                 test    rax, rax
.init:00000000000018F6                 jz      short loc_18FA
.init:00000000000018F8                 call    rax ; __gmon_start__
.init:00000000000018FA
.init:00000000000018FA loc_18FA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000018FA                 add     rsp, 8
.init:00000000000018FE                 retn
.init:00000000000018FE _init_proc      endp
.init:00000000000018FE
.init:00000000000018FE _init           ends
.init:00000000000018FE
LOAD:00000000000018FF ; ===========================================================================
LOAD:00000000000018FF
LOAD:00000000000018FF ; Segment type: Pure code
LOAD:00000000000018FF ; Segment permissions: Read/Execute
LOAD:00000000000018FF LOAD            segment byte public 'CODE' use64
LOAD:00000000000018FF                 assume cs:LOAD
LOAD:00000000000018FF                 ;org 18FFh
LOAD:00000000000018FF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000018FF                 align 20h
LOAD:00000000000018FF LOAD            ends
LOAD:00000000000018FF
.plt:0000000000001900 ; ===========================================================================
.plt:0000000000001900
.plt:0000000000001900 ; Segment type: Pure code
.plt:0000000000001900 ; Segment permissions: Read/Execute
.plt:0000000000001900 _plt            segment para public 'CODE' use64
.plt:0000000000001900                 assume cs:_plt
.plt:0000000000001900                 ;org 1900h
.plt:0000000000001900                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900
.plt:0000000000001900 sub_1900        proc near               ; CODE XREF: .plt:000000000000191B↓j
.plt:0000000000001900                                         ; .plt:000000000000192B↓j ...
.plt:0000000000001900 ; __unwind {
.plt:0000000000001900                 push    cs:qword_20DDB0
.plt:0000000000001906                 jmp     cs:qword_20DDB8
.plt:0000000000001906 sub_1900        endp
.plt:0000000000001906
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:000000000000190C                 align 10h
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; void endgrent(void)
.plt:0000000000001910 _endgrent       proc near               ; CODE XREF: main:loc_2078↓p
.plt:0000000000001910                 jmp     cs:endgrent_ptr
.plt:0000000000001910 _endgrent       endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    0
.plt:000000000000191B                 jmp     sub_1900
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: noreturn thunk
.plt:0000000000001920
.plt:0000000000001920 ; void __noreturn abort(void)
.plt:0000000000001920 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001920                                         ; quotearg_buffer_restyled:def_3B51↓p ...
.plt:0000000000001920                 jmp     cs:abort_ptr
.plt:0000000000001920 _abort          endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    1
.plt:000000000000192B                 jmp     sub_1900
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; int *__errno_location(void)
.plt:0000000000001930 ___errno_location proc near             ; CODE XREF: main+386↓p
.plt:0000000000001930                                         ; main+4DE↓p ...
.plt:0000000000001930                 jmp     cs:__errno_location_ptr
.plt:0000000000001930 ___errno_location endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    2
.plt:000000000000193B                 jmp     sub_1900
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001940 _strncmp        proc near               ; CODE XREF: usage+33C↓p
.plt:0000000000001940                                         ; usage+3FD↓p
.plt:0000000000001940                 jmp     cs:strncmp_ptr
.plt:0000000000001940 _strncmp        endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    3
.plt:000000000000194B                 jmp     sub_1900
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: noreturn thunk
.plt:0000000000001950
.plt:0000000000001950 ; void __noreturn _exit(int status)
.plt:0000000000001950 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001950                 jmp     cs:_exit_ptr
.plt:0000000000001950 __exit          endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    4
.plt:000000000000195B                 jmp     sub_1900
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; char *strcpy(char *dest, const char *src)
.plt:0000000000001960 _strcpy         proc near               ; CODE XREF: user_group_str+46↓p
.plt:0000000000001960                 jmp     cs:strcpy_ptr
.plt:0000000000001960 _strcpy         endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    5
.plt:000000000000196B                 jmp     sub_1900
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; size_t __fpending(FILE *fp)
.plt:0000000000001970 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001970                 jmp     cs:__fpending_ptr
.plt:0000000000001970 ___fpending     endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    6
.plt:000000000000197B                 jmp     sub_1900
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
.plt:0000000000001980 _qsort          proc near               ; CODE XREF: fts_sort+7C↓p
.plt:0000000000001980                 jmp     cs:qsort_ptr
.plt:0000000000001980 _qsort          endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    7
.plt:000000000000198B                 jmp     sub_1900
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001990 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001990                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001990                 jmp     cs:fcntl_ptr
.plt:0000000000001990 _fcntl          endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    8
.plt:000000000000199B                 jmp     sub_1900
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; char *textdomain(const char *domainname)
.plt:00000000000019A0 _textdomain     proc near               ; CODE XREF: main+72↓p
.plt:00000000000019A0                 jmp     cs:textdomain_ptr
.plt:00000000000019A0 _textdomain     endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    9
.plt:00000000000019AB                 jmp     sub_1900
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; int fclose(FILE *stream)
.plt:00000000000019B0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000019B0                                         ; rpl_fclose+6B↓j
.plt:00000000000019B0                 jmp     cs:fclose_ptr
.plt:00000000000019B0 _fclose         endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    0Ah
.plt:00000000000019BB                 jmp     sub_1900
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; struct passwd *getpwuid(__uid_t uid)
.plt:00000000000019C0 _getpwuid       proc near               ; CODE XREF: uid_to_name+17↓p
.plt:00000000000019C0                 jmp     cs:getpwuid_ptr
.plt:00000000000019C0 _getpwuid       endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    0Bh
.plt:00000000000019CB                 jmp     sub_1900
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000019D0 _bindtextdomain proc near               ; CODE XREF: main+66↓p
.plt:00000000000019D0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000019D0 _bindtextdomain endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    0Ch
.plt:00000000000019DB                 jmp     sub_1900
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; char *stpcpy(char *dest, const char *src)
.plt:00000000000019E0 _stpcpy         proc near               ; CODE XREF: user_group_str+37↓p
.plt:00000000000019E0                 jmp     cs:stpcpy_ptr
.plt:00000000000019E0 _stpcpy         endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    0Dh
.plt:00000000000019EB                 jmp     sub_1900
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000019F0 _dcgettext      proc near               ; CODE XREF: main+37E↓p
.plt:00000000000019F0                                         ; main+404↓p ...
.plt:00000000000019F0                 jmp     cs:dcgettext_ptr
.plt:00000000000019F0 _dcgettext      endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    0Eh
.plt:00000000000019FB                 jmp     sub_1900
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001A00 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001A00                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001A00 ___ctype_get_mb_cur_max endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    0Fh
.plt:0000000000001A0B                 jmp     sub_1900
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; size_t strlen(const char *s)
.plt:0000000000001A10 _strlen         proc near               ; CODE XREF: user_group_str+14↓p
.plt:0000000000001A10                                         ; user_group_str+1F↓p ...
.plt:0000000000001A10                 jmp     cs:strlen_ptr
.plt:0000000000001A10 _strlen         endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    10h
.plt:0000000000001A1B                 jmp     sub_1900
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001A20 ___lxstat       proc near               ; CODE XREF: get_root_dev_ino+2D↓p
.plt:0000000000001A20                                         ; fts_stat+15C↓p
.plt:0000000000001A20                 jmp     cs:__lxstat_ptr
.plt:0000000000001A20 ___lxstat       endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    11h
.plt:0000000000001A2B                 jmp     sub_1900
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; int openat(int fd, const char *file, int oflag, ...)
.plt:0000000000001A30 _openat         proc near               ; CODE XREF: openat_safer+22↓p
.plt:0000000000001A30                 jmp     cs:openat_ptr
.plt:0000000000001A30 _openat         endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    12h
.plt:0000000000001A3B                 jmp     sub_1900
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: noreturn thunk
.plt:0000000000001A40
.plt:0000000000001A40 ___stack_chk_fail proc near             ; CODE XREF: main:loc_21F3↓p
.plt:0000000000001A40                                         ; gid_to_name:loc_28EF↓p ...
.plt:0000000000001A40                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001A40 ___stack_chk_fail endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    13h
.plt:0000000000001A4B                 jmp     sub_1900
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001A50 _getopt_long    proc near               ; CODE XREF: main+AE↓p
.plt:0000000000001A50                 jmp     cs:getopt_long_ptr
.plt:0000000000001A50 _getopt_long    endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    14h
.plt:0000000000001A5B                 jmp     sub_1900
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001A60 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001A60                 jmp     cs:mbrtowc_ptr
.plt:0000000000001A60 _mbrtowc        endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    15h
.plt:0000000000001A6B                 jmp     sub_1900
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; char *strchr(const char *s, int c)
.plt:0000000000001A70 _strchr         proc near               ; CODE XREF: xstrtoul+123↓p
.plt:0000000000001A70                                         ; xstrtoul+143↓p ...
.plt:0000000000001A70                 jmp     cs:strchr_ptr
.plt:0000000000001A70 _strchr         endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    16h
.plt:0000000000001A7B                 jmp     sub_1900
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; struct group *getgrgid(__gid_t gid)
.plt:0000000000001A80 _getgrgid       proc near               ; CODE XREF: gid_to_name+17↓p
.plt:0000000000001A80                 jmp     cs:getgrgid_ptr
.plt:0000000000001A80 _getgrgid       endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    17h
.plt:0000000000001A8B                 jmp     sub_1900
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:0000000000001A90 ___fxstatat     proc near               ; CODE XREF: change_file_owner+302↓p
.plt:0000000000001A90                                         ; fts_stat+9E↓p
.plt:0000000000001A90                 jmp     cs:__fxstatat_ptr
.plt:0000000000001A90 ___fxstatat     endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    18h
.plt:0000000000001A9B                 jmp     sub_1900
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; char *strrchr(const char *s, int c)
.plt:0000000000001AA0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001AA0                                         ; rpl_fts_read+2F6↓p
.plt:0000000000001AA0                 jmp     cs:strrchr_ptr
.plt:0000000000001AA0 _strrchr        endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    19h
.plt:0000000000001AAB                 jmp     sub_1900
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001AB0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001AB0                                         ; rpl_fseeko+3B↓p
.plt:0000000000001AB0                 jmp     cs:lseek_ptr
.plt:0000000000001AB0 _lseek          endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    1Ah
.plt:0000000000001ABB                 jmp     sub_1900
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: noreturn thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001AC0 ___assert_fail  proc near               ; CODE XREF: xfts_open+4A↓p
.plt:0000000000001AC0                                         ; xstrtoul+39F↓p ...
.plt:0000000000001AC0                 jmp     cs:__assert_fail_ptr
.plt:0000000000001AC0 ___assert_fail  endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    1Bh
.plt:0000000000001ACB                 jmp     sub_1900
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001AD0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001AD0                                         ; xzalloc+12↓j
.plt:0000000000001AD0                 jmp     cs:memset_ptr
.plt:0000000000001AD0 _memset         endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    1Ch
.plt:0000000000001ADB                 jmp     sub_1900
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int close(int fd)
.plt:0000000000001AE0 _close          proc near               ; CODE XREF: change_file_owner+84C↓p
.plt:0000000000001AE0                                         ; change_file_owner+AD8↓p ...
.plt:0000000000001AE0                 jmp     cs:close_ptr
.plt:0000000000001AE0 _close          endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    1Dh
.plt:0000000000001AEB                 jmp     sub_1900
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ___openat_2     proc near               ; CODE XREF: change_file_owner+624↓p
.plt:0000000000001AF0                                         ; change_file_owner+C56↓p
.plt:0000000000001AF0                 jmp     cs:__openat_2_ptr
.plt:0000000000001AF0 ___openat_2     endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    1Eh
.plt:0000000000001AFB                 jmp     sub_1900
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; int closedir(DIR *dirp)
.plt:0000000000001B00 _closedir       proc near               ; CODE XREF: fts_lfree+1D↓p
.plt:0000000000001B00                                         ; fts_build+544↓p ...
.plt:0000000000001B00                 jmp     cs:closedir_ptr
.plt:0000000000001B00 _closedir       endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    1Fh
.plt:0000000000001B0B                 jmp     sub_1900
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001B10 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001B10                 jmp     cs:memcmp_ptr
.plt:0000000000001B10 _memcmp         endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    20h ; ' '
.plt:0000000000001B1B                 jmp     sub_1900
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001B20 _fputs_unlocked proc near               ; CODE XREF: usage+A0↓p
.plt:0000000000001B20                                         ; usage+C5↓p ...
.plt:0000000000001B20                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001B20 _fputs_unlocked endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    21h ; '!'
.plt:0000000000001B2B                 jmp     sub_1900
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001B30 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001B30                                         ; rpl_fts_open+48↓p ...
.plt:0000000000001B30                 jmp     cs:calloc_ptr
.plt:0000000000001B30 _calloc         endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    22h ; '"'
.plt:0000000000001B3B                 jmp     sub_1900
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; int dirfd(DIR *dirp)
.plt:0000000000001B40 _dirfd          proc near               ; CODE XREF: fts_build+3D↓p
.plt:0000000000001B40                 jmp     cs:dirfd_ptr
.plt:0000000000001B40 _dirfd          endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    23h ; '#'
.plt:0000000000001B4B                 jmp     sub_1900
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001B50 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001B50                                         ; fts_alloc+38↓p
.plt:0000000000001B50                 jmp     cs:memcpy_ptr
.plt:0000000000001B50 _memcpy         endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    24h ; '$'
.plt:0000000000001B5B                 jmp     sub_1900
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; struct group *getgrnam(const char *name)
.plt:0000000000001B60 _getgrnam       proc near               ; CODE XREF: main+327↓p
.plt:0000000000001B60                 jmp     cs:getgrnam_ptr
.plt:0000000000001B60 _getgrnam       endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    25h ; '%'
.plt:0000000000001B6B                 jmp     sub_1900
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; int fileno(FILE *stream)
.plt:0000000000001B70 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001B70                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001B70                 jmp     cs:fileno_ptr
.plt:0000000000001B70 _fileno         endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    26h ; '&'
.plt:0000000000001B7B                 jmp     sub_1900
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001B80 ___xstat        proc near               ; CODE XREF: main+252↓p
.plt:0000000000001B80                                         ; fts_stat+28↓p
.plt:0000000000001B80                 jmp     cs:__xstat_ptr
.plt:0000000000001B80 ___xstat        endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    27h ; '''
.plt:0000000000001B8B                 jmp     sub_1900
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; struct dirent *readdir(DIR *dirp)
.plt:0000000000001B90 _readdir        proc near               ; CODE XREF: fts_build+1F2↓p
.plt:0000000000001B90                 jmp     cs:readdir_ptr
.plt:0000000000001B90 _readdir        endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    28h ; '('
.plt:0000000000001B9B                 jmp     sub_1900
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; void *malloc(size_t size)
.plt:0000000000001BA0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001BA0                                         ; fts_alloc+1E↓p ...
.plt:0000000000001BA0                 jmp     cs:malloc_ptr
.plt:0000000000001BA0 _malloc         endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    29h ; ')'
.plt:0000000000001BAB                 jmp     sub_1900
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; int fflush(FILE *stream)
.plt:0000000000001BB0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001BB0                                         ; rpl_fflush+3B↓j
.plt:0000000000001BB0                 jmp     cs:fflush_ptr
.plt:0000000000001BB0 _fflush         endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    2Ah ; '*'
.plt:0000000000001BBB                 jmp     sub_1900
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; char *nl_langinfo(nl_item item)
.plt:0000000000001BC0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001BC0                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001BC0 _nl_langinfo    endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    2Bh ; '+'
.plt:0000000000001BCB                 jmp     sub_1900
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001BD0 ___fxstat       proc near               ; CODE XREF: change_file_owner+806↓p
.plt:0000000000001BD0                                         ; fts_safe_changedir+BD↓p
.plt:0000000000001BD0                 jmp     cs:__fxstat_ptr
.plt:0000000000001BD0 ___fxstat       endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    2Ch ; ','
.plt:0000000000001BDB                 jmp     sub_1900
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; int __freading(FILE *fp)
.plt:0000000000001BE0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001BE0                                         ; rpl_fflush+9↓p
.plt:0000000000001BE0                 jmp     cs:__freading_ptr
.plt:0000000000001BE0 ___freading     endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    2Dh ; '-'
.plt:0000000000001BEB                 jmp     sub_1900
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; int fchdir(int fd)
.plt:0000000000001BF0 _fchdir         proc near               ; CODE XREF: restore_initial_cwd+1D↓p
.plt:0000000000001BF0                                         ; fts_safe_changedir+17C↓p ...
.plt:0000000000001BF0                 jmp     cs:fchdir_ptr
.plt:0000000000001BF0 _fchdir         endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    2Eh ; '.'
.plt:0000000000001BFB                 jmp     sub_1900
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001C00 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001C00                                         ; fts_sort+40↓p ...
.plt:0000000000001C00                 jmp     cs:realloc_ptr
.plt:0000000000001C00 _realloc        endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    2Fh ; '/'
.plt:0000000000001C0B                 jmp     sub_1900
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; char *setlocale(int category, const char *locale)
.plt:0000000000001C10 _setlocale      proc near               ; CODE XREF: main+53↓p
.plt:0000000000001C10                                         ; usage+323↓p ...
.plt:0000000000001C10                 jmp     cs:setlocale_ptr
.plt:0000000000001C10 _setlocale      endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    30h ; '0'
.plt:0000000000001C1B                 jmp     sub_1900
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ___printf_chk   proc near               ; CODE XREF: usage+7B↓p
.plt:0000000000001C20                                         ; usage+223↓p ...
.plt:0000000000001C20                 jmp     cs:__printf_chk_ptr
.plt:0000000000001C20 ___printf_chk   endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    31h ; '1'
.plt:0000000000001C2B                 jmp     sub_1900
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001C30 _memmove        proc near               ; CODE XREF: fts_build+3B5↓p
.plt:0000000000001C30                                         ; rpl_fts_read+2E9↓p ...
.plt:0000000000001C30                 jmp     cs:memmove_ptr
.plt:0000000000001C30 _memmove        endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    32h ; '2'
.plt:0000000000001C3B                 jmp     sub_1900
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001C40 _error          proc near               ; CODE XREF: main+39A↓p
.plt:0000000000001C40                                         ; main+418↓p ...
.plt:0000000000001C40                 jmp     cs:error_ptr
.plt:0000000000001C40 _error          endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    33h ; '3'
.plt:0000000000001C4B                 jmp     sub_1900
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; int open(const char *file, int oflag, ...)
.plt:0000000000001C50 _open           proc near               ; CODE XREF: open_safer+23↓p
.plt:0000000000001C50                 jmp     cs:open_ptr
.plt:0000000000001C50 _open           endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    34h ; '4'
.plt:0000000000001C5B                 jmp     sub_1900
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001C60 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_A31A↓j
.plt:0000000000001C60                 jmp     cs:fseeko_ptr
.plt:0000000000001C60 _fseeko         endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    35h ; '5'
.plt:0000000000001C6B                 jmp     sub_1900
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; int fchown(int fd, __uid_t owner, __gid_t group)
.plt:0000000000001C70 _fchown         proc near               ; CODE XREF: change_file_owner+D0A↓p
.plt:0000000000001C70                 jmp     cs:fchown_ptr
.plt:0000000000001C70 _fchown         endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    36h ; '6'
.plt:0000000000001C7B                 jmp     sub_1900
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; DIR *fdopendir(int fd)
.plt:0000000000001C80 _fdopendir      proc near               ; CODE XREF: opendirat+22↓p
.plt:0000000000001C80                 jmp     cs:fdopendir_ptr
.plt:0000000000001C80 _fdopendir      endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    37h ; '7'
.plt:0000000000001C8B                 jmp     sub_1900
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: thunk
.plt:0000000000001C90
.plt:0000000000001C90 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
.plt:0000000000001C90 _strtoul        proc near               ; CODE XREF: xstrtoul+8C↓p
.plt:0000000000001C90                 jmp     cs:strtoul_ptr
.plt:0000000000001C90 _strtoul        endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    38h ; '8'
.plt:0000000000001C9B                 jmp     sub_1900
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ; int fstatfs(int fildes, struct statfs *buf)
.plt:0000000000001CA0 _fstatfs        proc near               ; CODE XREF: filesystem_type+C8↓p
.plt:0000000000001CA0                 jmp     cs:fstatfs_ptr
.plt:0000000000001CA0 _fstatfs        endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    39h ; '9'
.plt:0000000000001CAB                 jmp     sub_1900
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001CB0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001CB0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001CB0 ___cxa_atexit   endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    3Ah ; ':'
.plt:0000000000001CBB                 jmp     sub_1900
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ; int fchownat(int fd, const char *file, __uid_t owner, __gid_t group, int flag)
.plt:0000000000001CC0 _fchownat       proc near               ; CODE XREF: change_file_owner+14B↓p
.plt:0000000000001CC0                                         ; change_file_owner+691↓p
.plt:0000000000001CC0                 jmp     cs:fchownat_ptr
.plt:0000000000001CC0 _fchownat       endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    3Bh ; ';'
.plt:0000000000001CCB                 jmp     sub_1900
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: noreturn thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ; void __noreturn exit(int status)
.plt:0000000000001CD0 _exit           proc near               ; CODE XREF: main+1A4↓p
.plt:0000000000001CD0                                         ; usage+58↓p
.plt:0000000000001CD0                 jmp     cs:exit_ptr
.plt:0000000000001CD0 _exit           endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    3Ch ; '<'
.plt:0000000000001CDB                 jmp     sub_1900
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001CE0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001CE0                 jmp     cs:fwrite_ptr
.plt:0000000000001CE0 _fwrite         endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    3Dh ; '='
.plt:0000000000001CEB                 jmp     sub_1900
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001CF0                                         ; version_etc_arn+37↓p ...
.plt:0000000000001CF0                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001CF0 ___fprintf_chk  endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    3Eh ; '>'
.plt:0000000000001CFB                 jmp     sub_1900
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001D00 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001D00                 jmp     cs:mbsinit_ptr
.plt:0000000000001D00 _mbsinit        endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    3Fh ; '?'
.plt:0000000000001D0B                 jmp     sub_1900
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; int iswprint(wint_t wc)
.plt:0000000000001D10 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001D10                 jmp     cs:iswprint_ptr
.plt:0000000000001D10 _iswprint       endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    40h ; '@'
.plt:0000000000001D1B                 jmp     sub_1900
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001D20 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001D20                                         ; xstrtoul+55↓p
.plt:0000000000001D20                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001D20 ___ctype_b_loc  endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    41h ; 'A'
.plt:0000000000001D2B                 jmp     sub_1900
.plt:0000000000001D2B ; } // starts at 1900
.plt:0000000000001D2B _plt            ends
.plt:0000000000001D2B
.plt.got:0000000000001D30 ; ===========================================================================
.plt.got:0000000000001D30
.plt.got:0000000000001D30 ; Segment type: Pure code
.plt.got:0000000000001D30 ; Segment permissions: Read/Execute
.plt.got:0000000000001D30 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001D30                 assume cs:_plt_got
.plt.got:0000000000001D30                 ;org 1D30h
.plt.got:0000000000001D30                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001D30
.plt.got:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001D30
.plt.got:0000000000001D30 ; Attributes: thunk
.plt.got:0000000000001D30
.plt.got:0000000000001D30 ; void free(void *ptr)
.plt.got:0000000000001D30 free            proc near               ; CODE XREF: chopt_free+8↓p
.plt.got:0000000000001D30                                         ; chopt_free+12↓j ...
.plt.got:0000000000001D30 ; __unwind {
.plt.got:0000000000001D30                 jmp     cs:free_ptr
.plt.got:0000000000001D30 free            endp
.plt.got:0000000000001D30
.plt.got:0000000000001D30 ; ---------------------------------------------------------------------------
.plt.got:0000000000001D36                 align 8
.plt.got:0000000000001D38
.plt.got:0000000000001D38 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001D38
.plt.got:0000000000001D38 ; Attributes: thunk
.plt.got:0000000000001D38
.plt.got:0000000000001D38 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001D38 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001D38                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001D38 __cxa_finalize  endp
.plt.got:0000000000001D38
.plt.got:0000000000001D38 ; ---------------------------------------------------------------------------
.plt.got:0000000000001D3E                 align 20h
.plt.got:0000000000001D3E ; } // starts at 1D30
.plt.got:0000000000001D3E _plt_got        ends
.plt.got:0000000000001D3E
.text:0000000000001D40 ; ===========================================================================
.text:0000000000001D40
.text:0000000000001D40 ; Segment type: Pure code
.text:0000000000001D40 ; Segment permissions: Read/Execute
.text:0000000000001D40 _text           segment para public 'CODE' use64
.text:0000000000001D40                 assume cs:_text
.text:0000000000001D40                 ;org 1D40h
.text:0000000000001D40                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001D40
.text:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D40
.text:0000000000001D40
.text:0000000000001D40 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001D40                 public main
.text:0000000000001D40 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001D40
.text:0000000000001D40 var_120         = qword ptr -120h
.text:0000000000001D40 var_110         = qword ptr -110h
.text:0000000000001D40 var_108         = dword ptr -108h
.text:0000000000001D40 var_104         = byte ptr -104h
.text:0000000000001D40 var_100         = qword ptr -100h
.text:0000000000001D40 var_F8          = byte ptr -0F8h
.text:0000000000001D40 var_F7          = byte ptr -0F7h
.text:0000000000001D40 var_E8          = qword ptr -0E8h
.text:0000000000001D40 stat_buf        = stat ptr -0D8h
.text:0000000000001D40 var_40          = qword ptr -40h
.text:0000000000001D40
.text:0000000000001D40 ; __unwind {
.text:0000000000001D40                 push    r15
.text:0000000000001D42                 push    r14
.text:0000000000001D44                 mov     r15d, 1
.text:0000000000001D4A                 push    r13
.text:0000000000001D4C                 push    r12
.text:0000000000001D4E                 mov     r13d, 0FFFFFFFFh
.text:0000000000001D54                 push    rbp
.text:0000000000001D55                 push    rbx
.text:0000000000001D56                 movsxd  rbp, edi
.text:0000000000001D59                 mov     rbx, rsi
.text:0000000000001D5C                 mov     r12d, 10h
.text:0000000000001D62                 xor     r14d, r14d
.text:0000000000001D65                 sub     rsp, 0F8h
.text:0000000000001D6C                 mov     rdi, [rsi]
.text:0000000000001D6F                 mov     rax, fs:28h
.text:0000000000001D78                 mov     [rsp+128h+var_40], rax
.text:0000000000001D80                 xor     eax, eax
.text:0000000000001D82                 call    set_program_name
.text:0000000000001D87                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001D8E                 mov     edi, 6          ; category
.text:0000000000001D93                 call    _setlocale
.text:0000000000001D98                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001D9F                 lea     rdi, domainname ; "coreutils"
.text:0000000000001DA6                 call    _bindtextdomain
.text:0000000000001DAB                 lea     rdi, domainname ; "coreutils"
.text:0000000000001DB2                 call    _textdomain
.text:0000000000001DB7                 lea     rdi, close_stdout
.text:0000000000001DBE                 call    atexit
.text:0000000000001DC3                 lea     rax, [rsp+128h+var_108]
.text:0000000000001DC8                 mov     rdi, rax
.text:0000000000001DCB                 mov     [rsp+128h+var_120], rax
.text:0000000000001DD0                 call    chopt_init
.text:0000000000001DD5                 nop     dword ptr [rax]
.text:0000000000001DD8
.text:0000000000001DD8 loc_1DD8:                               ; CODE XREF: main+FA↓j
.text:0000000000001DD8                                         ; main+128↓j ...
.text:0000000000001DD8                 lea     rcx, long_options ; longopts
.text:0000000000001DDF                 lea     rdx, shortopts  ; "HLPRcfhv"
.text:0000000000001DE6                 xor     r8d, r8d        ; longind
.text:0000000000001DE9                 mov     rsi, rbx        ; argv
.text:0000000000001DEC                 mov     edi, ebp        ; argc
.text:0000000000001DEE                 call    _getopt_long
.text:0000000000001DF3                 cmp     eax, 0FFFFFFFFh
.text:0000000000001DF6                 jz      loc_1F49
.text:0000000000001DFC                 cmp     eax, 63h ; 'c'
.text:0000000000001DFF                 jz      loc_1F29
.text:0000000000001E05                 jle     short loc_1E40
.text:0000000000001E07                 cmp     eax, 80h
.text:0000000000001E0C                 jz      loc_1EFE
.text:0000000000001E12                 jg      short loc_1E70
.text:0000000000001E14                 cmp     eax, 68h ; 'h'
.text:0000000000001E17                 jz      loc_1F16
.text:0000000000001E1D                 cmp     eax, 76h ; 'v'
.text:0000000000001E20                 jz      loc_1F09
.text:0000000000001E26                 cmp     eax, 66h ; 'f'
.text:0000000000001E29                 jz      short loc_1E35
.text:0000000000001E2B
.text:0000000000001E2B loc_1E2B:                               ; CODE XREF: main+120↓j
.text:0000000000001E2B                                         ; main+146↓j ...
.text:0000000000001E2B                 mov     edi, 1          ; status
.text:0000000000001E30                 call    usage
.text:0000000000001E35 ; ---------------------------------------------------------------------------
.text:0000000000001E35
.text:0000000000001E35 loc_1E35:                               ; CODE XREF: main+E9↑j
.text:0000000000001E35                 mov     [rsp+128h+var_F7], r15b
.text:0000000000001E3A                 jmp     short loc_1DD8
.text:0000000000001E3A ; ---------------------------------------------------------------------------
.text:0000000000001E3C                 align 20h
.text:0000000000001E40
.text:0000000000001E40 loc_1E40:                               ; CODE XREF: main+C5↑j
.text:0000000000001E40                 cmp     eax, 48h ; 'H'
.text:0000000000001E43                 jz      loc_1F1E
.text:0000000000001E49                 jle     short loc_1EA0
.text:0000000000001E4B                 cmp     eax, 50h ; 'P'
.text:0000000000001E4E                 jz      loc_1EE9
.text:0000000000001E54                 cmp     eax, 52h ; 'R'
.text:0000000000001E57                 jz      loc_1EF4
.text:0000000000001E5D                 cmp     eax, 4Ch ; 'L'
.text:0000000000001E60                 jnz     short loc_1E2B
.text:0000000000001E62                 mov     r12d, 2
.text:0000000000001E68                 jmp     loc_1DD8
.text:0000000000001E68 ; ---------------------------------------------------------------------------
.text:0000000000001E6D                 align 10h
.text:0000000000001E70
.text:0000000000001E70 loc_1E70:                               ; CODE XREF: main+D2↑j
.text:0000000000001E70                 cmp     eax, 82h
.text:0000000000001E75                 jz      loc_1F3E
.text:0000000000001E7B                 jl      loc_1F36
.text:0000000000001E81                 cmp     eax, 83h
.text:0000000000001E86                 jnz     short loc_1E2B
.text:0000000000001E88                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000001E8F                 mov     cs:reference_file, rax
.text:0000000000001E96                 jmp     loc_1DD8
.text:0000000000001E96 ; ---------------------------------------------------------------------------
.text:0000000000001E9B                 align 20h
.text:0000000000001EA0
.text:0000000000001EA0 loc_1EA0:                               ; CODE XREF: main+109↑j
.text:0000000000001EA0                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001EA5                 jnz     loc_215D
.text:0000000000001EAB                 sub     rsp, 8
.text:0000000000001EAF                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001EB6                 mov     rcx, cs:Version
.text:0000000000001EBD                 push    0
.text:0000000000001EBF                 lea     r9, aJimMeyering ; "Jim Meyering"
.text:0000000000001EC6                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001ECD                 lea     rdx, unk_A4A0
.text:0000000000001ED4                 lea     rsi, aChgrp     ; "chgrp"
.text:0000000000001EDB                 xor     eax, eax
.text:0000000000001EDD                 call    version_etc
.text:0000000000001EE2                 xor     edi, edi        ; status
.text:0000000000001EE4                 call    _exit
.text:0000000000001EE9 ; ---------------------------------------------------------------------------
.text:0000000000001EE9
.text:0000000000001EE9 loc_1EE9:                               ; CODE XREF: main+10E↑j
.text:0000000000001EE9                 mov     r12d, 10h
.text:0000000000001EEF                 jmp     loc_1DD8
.text:0000000000001EF4 ; ---------------------------------------------------------------------------
.text:0000000000001EF4
.text:0000000000001EF4 loc_1EF4:                               ; CODE XREF: main+117↑j
.text:0000000000001EF4                 mov     [rsp+128h+var_104], r15b
.text:0000000000001EF9                 jmp     loc_1DD8
.text:0000000000001EFE ; ---------------------------------------------------------------------------
.text:0000000000001EFE
.text:0000000000001EFE loc_1EFE:                               ; CODE XREF: main+CC↑j
.text:0000000000001EFE                 mov     r13d, 1
.text:0000000000001F04                 jmp     loc_1DD8
.text:0000000000001F09 ; ---------------------------------------------------------------------------
.text:0000000000001F09
.text:0000000000001F09 loc_1F09:                               ; CODE XREF: main+E0↑j
.text:0000000000001F09                 mov     [rsp+128h+var_108], 0
.text:0000000000001F11                 jmp     loc_1DD8
.text:0000000000001F16 ; ---------------------------------------------------------------------------
.text:0000000000001F16
.text:0000000000001F16 loc_1F16:                               ; CODE XREF: main+D7↑j
.text:0000000000001F16                 xor     r13d, r13d
.text:0000000000001F19                 jmp     loc_1DD8
.text:0000000000001F1E ; ---------------------------------------------------------------------------
.text:0000000000001F1E
.text:0000000000001F1E loc_1F1E:                               ; CODE XREF: main+103↑j
.text:0000000000001F1E                 mov     r12d, 11h
.text:0000000000001F24                 jmp     loc_1DD8
.text:0000000000001F29 ; ---------------------------------------------------------------------------
.text:0000000000001F29
.text:0000000000001F29 loc_1F29:                               ; CODE XREF: main+BF↑j
.text:0000000000001F29                 mov     [rsp+128h+var_108], 1
.text:0000000000001F31                 jmp     loc_1DD8
.text:0000000000001F36 ; ---------------------------------------------------------------------------
.text:0000000000001F36
.text:0000000000001F36 loc_1F36:                               ; CODE XREF: main+13B↑j
.text:0000000000001F36                 xor     r14d, r14d
.text:0000000000001F39                 jmp     loc_1DD8
.text:0000000000001F3E ; ---------------------------------------------------------------------------
.text:0000000000001F3E
.text:0000000000001F3E loc_1F3E:                               ; CODE XREF: main+135↑j
.text:0000000000001F3E                 mov     r14d, 1
.text:0000000000001F44                 jmp     loc_1DD8
.text:0000000000001F49 ; ---------------------------------------------------------------------------
.text:0000000000001F49
.text:0000000000001F49 loc_1F49:                               ; CODE XREF: main+B6↑j
.text:0000000000001F49                 cmp     [rsp+128h+var_104], 0
.text:0000000000001F4E                 jnz     loc_201D
.text:0000000000001F54                 mov     r12d, 10h
.text:0000000000001F5A
.text:0000000000001F5A loc_1F5A:                               ; CODE XREF: main+2E1↓j
.text:0000000000001F5A                                         ; main+2F4↓j
.text:0000000000001F5A                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001F61                 test    r13d, r13d
.text:0000000000001F64                 mov     r13, cs:reference_file
.text:0000000000001F6B                 mov     edx, ebp
.text:0000000000001F6D                 setnz   [rsp+128h+var_F8]
.text:0000000000001F72                 sub     edx, eax
.text:0000000000001F74                 test    r13, r13
.text:0000000000001F77                 jz      loc_2039
.text:0000000000001F7D                 test    edx, edx
.text:0000000000001F7F                 jle     loc_216F
.text:0000000000001F85                 lea     rdx, [rsp+128h+stat_buf] ; stat_buf
.text:0000000000001F8A                 mov     rsi, r13        ; filename
.text:0000000000001F8D                 mov     edi, 1          ; ver
.text:0000000000001F92                 call    ___xstat
.text:0000000000001F97                 test    eax, eax
.text:0000000000001F99                 jnz     loc_21F8
.text:0000000000001F9F                 mov     ebp, [rsp+128h+stat_buf.st_gid]
.text:0000000000001FA3                 mov     edi, ebp
.text:0000000000001FA5                 call    gid_to_name
.text:0000000000001FAA                 mov     [rsp+128h+var_E8], rax
.text:0000000000001FAF
.text:0000000000001FAF loc_1FAF:                               ; CODE XREF: main+33D↓j
.text:0000000000001FAF                                         ; main+3A2↓j
.text:0000000000001FAF                 cmp     [rsp+128h+var_104], 0
.text:0000000000001FB4                 jz      short loc_1FBF
.text:0000000000001FB6                 test    r14b, r14b
.text:0000000000001FB9                 jnz     loc_2082
.text:0000000000001FBF
.text:0000000000001FBF loc_1FBF:                               ; CODE XREF: main+274↑j
.text:0000000000001FBF                                         ; main+356↓j
.text:0000000000001FBF                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001FC6                 sub     rsp, 8
.text:0000000000001FCA                 or      r9d, 0FFFFFFFFh
.text:0000000000001FCE                 push    [rsp+130h+var_120]
.text:0000000000001FD2                 mov     esi, r12d
.text:0000000000001FD5                 mov     ecx, ebp
.text:0000000000001FD7                 or      esi, 400h
.text:0000000000001FDD                 mov     edx, r9d
.text:0000000000001FE0                 mov     r8d, r9d
.text:0000000000001FE3                 lea     rdi, [rbx+rax*8]
.text:0000000000001FE7                 call    chown_files
.text:0000000000001FEC                 pop     rdx
.text:0000000000001FED                 pop     rcx
.text:0000000000001FEE                 xor     eax, 1
.text:0000000000001FF1                 movzx   eax, al
.text:0000000000001FF4                 mov     rcx, [rsp+128h+var_40]
.text:0000000000001FFC                 xor     rcx, fs:28h
.text:0000000000002005                 jnz     loc_21F3
.text:000000000000200B                 add     rsp, 0F8h
.text:0000000000002012                 pop     rbx
.text:0000000000002013                 pop     rbp
.text:0000000000002014                 pop     r12
.text:0000000000002016                 pop     r13
.text:0000000000002018                 pop     r14
.text:000000000000201A                 pop     r15
.text:000000000000201C                 retn
.text:000000000000201D ; ---------------------------------------------------------------------------
.text:000000000000201D
.text:000000000000201D loc_201D:                               ; CODE XREF: main+20E↑j
.text:000000000000201D                 cmp     r12d, 10h
.text:0000000000002021                 jnz     loc_1F5A
.text:0000000000002027                 sub     r13d, 1
.text:000000000000202B                 jz      loc_2199
.text:0000000000002031                 xor     r13d, r13d
.text:0000000000002034                 jmp     loc_1F5A
.text:0000000000002039 ; ---------------------------------------------------------------------------
.text:0000000000002039
.text:0000000000002039 loc_2039:                               ; CODE XREF: main+237↑j
.text:0000000000002039                 sub     edx, 1
.text:000000000000203C                 jle     loc_216F
.text:0000000000002042                 mov     r15, [rbx+rax*8]
.text:0000000000002046                 lea     edx, [rax+1]
.text:0000000000002049                 mov     cs:optind@@GLIBC_2_2_5, edx
.text:000000000000204F                 cmp     byte ptr [r15], 0
.text:0000000000002053                 jnz     loc_20E7
.text:0000000000002059
.text:0000000000002059 loc_2059:                               ; CODE XREF: main+3B2↓j
.text:0000000000002059                 mov     [rsp+128h+var_E8], r13
.text:000000000000205E                 cmp     byte ptr [r15], 0
.text:0000000000002062                 jz      short loc_20DF
.text:0000000000002064                 mov     rdi, r15        ; name
.text:0000000000002067                 call    _getgrnam
.text:000000000000206C                 test    rax, rax
.text:000000000000206F                 jz      loc_20F7
.text:0000000000002075                 mov     ebp, [rax+10h]
.text:0000000000002078
.text:0000000000002078 loc_2078:                               ; CODE XREF: main+3E5↓j
.text:0000000000002078                 call    _endgrent
.text:000000000000207D                 jmp     loc_1FAF
.text:0000000000002082 ; ---------------------------------------------------------------------------
.text:0000000000002082
.text:0000000000002082 loc_2082:                               ; CODE XREF: main+279↑j
.text:0000000000002082                 lea     rdi, dev_ino_buf_7117
.text:0000000000002089                 call    get_root_dev_ino
.text:000000000000208E                 test    rax, rax
.text:0000000000002091                 mov     [rsp+128h+var_100], rax
.text:0000000000002096                 jnz     loc_1FBF
.text:000000000000209C                 lea     rsi, aLibs+6    ; "/"
.text:00000000000020A3                 mov     edi, 4
.text:00000000000020A8                 call    quotearg_style
.text:00000000000020AD                 lea     rsi, msgid      ; "failed to get attributes of %s"
.text:00000000000020B4                 mov     edx, 5          ; category
.text:00000000000020B9                 xor     edi, edi        ; domainname
.text:00000000000020BB                 mov     rbp, rax
.text:00000000000020BE                 call    _dcgettext
.text:00000000000020C3                 mov     rbx, rax
.text:00000000000020C6                 call    ___errno_location
.text:00000000000020CB                 mov     esi, [rax]      ; errnum
.text:00000000000020CD                 mov     rcx, rbp
.text:00000000000020D0                 mov     rdx, rbx        ; format
.text:00000000000020D3                 mov     edi, 1          ; status
.text:00000000000020D8                 xor     eax, eax
.text:00000000000020DA                 call    _error
.text:00000000000020DF
.text:00000000000020DF loc_20DF:                               ; CODE XREF: main+322↑j
.text:00000000000020DF                 or      ebp, 0FFFFFFFFh
.text:00000000000020E2                 jmp     loc_1FAF
.text:00000000000020E7 ; ---------------------------------------------------------------------------
.text:00000000000020E7
.text:00000000000020E7 loc_20E7:                               ; CODE XREF: main+313↑j
.text:00000000000020E7                 mov     rdi, r15        ; src
.text:00000000000020EA                 call    xstrdup
.text:00000000000020EF                 mov     r13, rax
.text:00000000000020F2                 jmp     loc_2059
.text:00000000000020F7 ; ---------------------------------------------------------------------------
.text:00000000000020F7
.text:00000000000020F7 loc_20F7:                               ; CODE XREF: main+32F↑j
.text:00000000000020F7                 lea     rcx, [rsp+128h+var_110]
.text:00000000000020FC                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002103                 xor     esi, esi
.text:0000000000002105                 mov     edx, 0Ah
.text:000000000000210A                 mov     rdi, r15        ; nptr
.text:000000000000210D                 call    xstrtoul
.text:0000000000002112                 test    eax, eax
.text:0000000000002114                 jnz     short loc_212B
.text:0000000000002116                 mov     rax, [rsp+128h+var_110]
.text:000000000000211B                 mov     edx, 0FFFFFFFFh
.text:0000000000002120                 cmp     rax, rdx
.text:0000000000002123                 mov     ebp, eax
.text:0000000000002125                 jbe     loc_2078
.text:000000000000212B
.text:000000000000212B loc_212B:                               ; CODE XREF: main+3D4↑j
.text:000000000000212B                 mov     rdi, r15
.text:000000000000212E                 call    quote
.text:0000000000002133                 lea     rsi, aInvalidGroupS ; "invalid group: %s"
.text:000000000000213A                 mov     rbx, rax
.text:000000000000213D                 mov     edx, 5          ; category
.text:0000000000002142                 xor     edi, edi        ; domainname
.text:0000000000002144                 call    _dcgettext
.text:0000000000002149                 mov     rcx, rbx
.text:000000000000214C                 mov     rdx, rax        ; format
.text:000000000000214F                 xor     esi, esi        ; errnum
.text:0000000000002151                 mov     edi, 1          ; status
.text:0000000000002156                 xor     eax, eax
.text:0000000000002158                 call    _error
.text:000000000000215D
.text:000000000000215D loc_215D:                               ; CODE XREF: main+165↑j
.text:000000000000215D                 cmp     eax, 0FFFFFF7Eh
.text:0000000000002162                 jnz     loc_1E2B
.text:0000000000002168                 xor     edi, edi        ; status
.text:000000000000216A                 call    usage
.text:000000000000216F ; ---------------------------------------------------------------------------
.text:000000000000216F
.text:000000000000216F loc_216F:                               ; CODE XREF: main+23F↑j
.text:000000000000216F                                         ; main+2FC↑j
.text:000000000000216F                 cmp     eax, ebp
.text:0000000000002171                 jl      short loc_21BD
.text:0000000000002173                 lea     rsi, aMissingOperand ; "missing operand"
.text:000000000000217A                 xor     edi, edi        ; domainname
.text:000000000000217C                 mov     edx, 5          ; category
.text:0000000000002181                 call    _dcgettext
.text:0000000000002186                 xor     esi, esi        ; errnum
.text:0000000000002188                 mov     rdx, rax        ; format
.text:000000000000218B                 xor     edi, edi        ; status
.text:000000000000218D                 xor     eax, eax
.text:000000000000218F                 call    _error
.text:0000000000002194                 jmp     loc_1E2B
.text:0000000000002199 ; ---------------------------------------------------------------------------
.text:0000000000002199
.text:0000000000002199 loc_2199:                               ; CODE XREF: main+2EB↑j
.text:0000000000002199                 lea     rsi, aRDereferenceRe ; "-R --dereference requires either -H or "...
.text:00000000000021A0                 mov     edx, 5          ; category
.text:00000000000021A5                 xor     edi, edi        ; domainname
.text:00000000000021A7                 call    _dcgettext
.text:00000000000021AC                 xor     esi, esi        ; errnum
.text:00000000000021AE                 mov     rdx, rax        ; format
.text:00000000000021B1                 mov     edi, 1          ; status
.text:00000000000021B6                 xor     eax, eax
.text:00000000000021B8                 call    _error
.text:00000000000021BD
.text:00000000000021BD loc_21BD:                               ; CODE XREF: main+431↑j
.text:00000000000021BD                 mov     rdi, [rbx+rbp*8-8]
.text:00000000000021C2                 call    quote
.text:00000000000021C7                 lea     rsi, aMissingOperand_0 ; "missing operand after %s"
.text:00000000000021CE                 mov     rbx, rax
.text:00000000000021D1                 xor     edi, edi        ; domainname
.text:00000000000021D3                 mov     edx, 5          ; category
.text:00000000000021D8                 call    _dcgettext
.text:00000000000021DD                 mov     rcx, rbx
.text:00000000000021E0                 mov     rdx, rax        ; format
.text:00000000000021E3                 xor     esi, esi        ; errnum
.text:00000000000021E5                 xor     edi, edi        ; status
.text:00000000000021E7                 xor     eax, eax
.text:00000000000021E9                 call    _error
.text:00000000000021EE                 jmp     loc_1E2B
.text:00000000000021F3 ; ---------------------------------------------------------------------------
.text:00000000000021F3
.text:00000000000021F3 loc_21F3:                               ; CODE XREF: main+2C5↑j
.text:00000000000021F3                 call    ___stack_chk_fail
.text:00000000000021F8 ; ---------------------------------------------------------------------------
.text:00000000000021F8
.text:00000000000021F8 loc_21F8:                               ; CODE XREF: main+259↑j
.text:00000000000021F8                 mov     rsi, r13
.text:00000000000021FB                 mov     edi, 4
.text:0000000000002200                 call    quotearg_style
.text:0000000000002205                 lea     rsi, msgid      ; "failed to get attributes of %s"
.text:000000000000220C                 mov     edx, 5          ; category
.text:0000000000002211                 xor     edi, edi        ; domainname
.text:0000000000002213                 mov     rbp, rax
.text:0000000000002216                 call    _dcgettext
.text:000000000000221B                 mov     rbx, rax
.text:000000000000221E                 call    ___errno_location
.text:0000000000002223                 mov     esi, [rax]      ; errnum
.text:0000000000002225                 mov     rcx, rbp
.text:0000000000002228                 mov     rdx, rbx        ; format
.text:000000000000222B                 mov     edi, 1          ; status
.text:0000000000002230                 xor     eax, eax
.text:0000000000002232                 call    _error
.text:0000000000002232 ; } // starts at 1D40
.text:0000000000002237                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002237 main            endp ; sp-analysis failed
.text:0000000000002237
.text:0000000000002240
.text:0000000000002240 ; =============== S U B R O U T I N E =======================================
.text:0000000000002240
.text:0000000000002240 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002240
.text:0000000000002240 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002240                 public start
.text:0000000000002240 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002240 ; __unwind {
.text:0000000000002240                 xor     ebp, ebp
.text:0000000000002242                 mov     r9, rdx         ; rtld_fini
.text:0000000000002245                 pop     rsi             ; argc
.text:0000000000002246                 mov     rdx, rsp        ; ubp_av
.text:0000000000002249                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000224D                 push    rax
.text:000000000000224E                 push    rsp             ; stack_end
.text:000000000000224F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002256                 lea     rcx, __libc_csu_init ; init
.text:000000000000225D                 lea     rdi, main       ; main
.text:0000000000002264                 call    cs:__libc_start_main_ptr
.text:000000000000226A                 hlt
.text:000000000000226A ; } // starts at 2240
.text:000000000000226A start           endp
.text:000000000000226A
.text:000000000000226A ; ---------------------------------------------------------------------------
.text:000000000000226B                 align 10h
.text:0000000000002270
.text:0000000000002270 ; =============== S U B R O U T I N E =======================================
.text:0000000000002270
.text:0000000000002270 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002270
.text:0000000000002270 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2323↓p
.text:0000000000002270                 lea     rdi, __bss_start
.text:0000000000002277                 push    rbp
.text:0000000000002278                 lea     rax, __bss_start
.text:000000000000227F                 cmp     rax, rdi
.text:0000000000002282                 mov     rbp, rsp
.text:0000000000002285                 jz      short loc_22A0
.text:0000000000002287                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000228E                 test    rax, rax
.text:0000000000002291                 jz      short loc_22A0
.text:0000000000002293                 pop     rbp
.text:0000000000002294                 jmp     rax
.text:0000000000002294 ; ---------------------------------------------------------------------------
.text:0000000000002296                 align 20h
.text:00000000000022A0
.text:00000000000022A0 loc_22A0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000022A0                                         ; deregister_tm_clones+21↑j
.text:00000000000022A0                 pop     rbp
.text:00000000000022A1                 retn
.text:00000000000022A1 deregister_tm_clones endp
.text:00000000000022A1
.text:00000000000022A1 ; ---------------------------------------------------------------------------
.text:00000000000022A2                 align 10h
.text:00000000000022B0
.text:00000000000022B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022B0
.text:00000000000022B0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000022B0
.text:00000000000022B0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000022B0                 lea     rdi, __bss_start
.text:00000000000022B7                 lea     rsi, __bss_start
.text:00000000000022BE                 push    rbp
.text:00000000000022BF                 sub     rsi, rdi
.text:00000000000022C2                 mov     rbp, rsp
.text:00000000000022C5                 sar     rsi, 3
.text:00000000000022C9                 mov     rax, rsi
.text:00000000000022CC                 shr     rax, 3Fh
.text:00000000000022D0                 add     rsi, rax
.text:00000000000022D3                 sar     rsi, 1
.text:00000000000022D6                 jz      short loc_22F0
.text:00000000000022D8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000022DF                 test    rax, rax
.text:00000000000022E2                 jz      short loc_22F0
.text:00000000000022E4                 pop     rbp
.text:00000000000022E5                 jmp     rax
.text:00000000000022E5 ; ---------------------------------------------------------------------------
.text:00000000000022E7                 align 10h
.text:00000000000022F0
.text:00000000000022F0 loc_22F0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000022F0                                         ; register_tm_clones+32↑j
.text:00000000000022F0                 pop     rbp
.text:00000000000022F1                 retn
.text:00000000000022F1 register_tm_clones endp
.text:00000000000022F1
.text:00000000000022F1 ; ---------------------------------------------------------------------------
.text:00000000000022F2                 align 20h
.text:0000000000002300
.text:0000000000002300 ; =============== S U B R O U T I N E =======================================
.text:0000000000002300
.text:0000000000002300 ; Attributes: info_from_lumina
.text:0000000000002300
.text:0000000000002300 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002300                 cmp     cs:completed_7697, 0
.text:0000000000002307                 jnz     short locret_2338
.text:0000000000002309                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002311                 push    rbp
.text:0000000000002312                 mov     rbp, rsp
.text:0000000000002315                 jz      short loc_2323
.text:0000000000002317                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000231E                 call    __cxa_finalize
.text:0000000000002323
.text:0000000000002323 loc_2323:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002323                 call    deregister_tm_clones
.text:0000000000002328                 mov     cs:completed_7697, 1
.text:000000000000232F                 pop     rbp
.text:0000000000002330                 retn
.text:0000000000002330 ; ---------------------------------------------------------------------------
.text:0000000000002331                 align 8
.text:0000000000002338
.text:0000000000002338 locret_2338:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002338                 rep retn
.text:0000000000002338 __do_global_dtors_aux endp
.text:0000000000002338
.text:0000000000002338 ; ---------------------------------------------------------------------------
.text:000000000000233A                 align 20h
.text:0000000000002340
.text:0000000000002340 ; =============== S U B R O U T I N E =======================================
.text:0000000000002340
.text:0000000000002340 ; Attributes: bp-based frame
.text:0000000000002340
.text:0000000000002340 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002340                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002340                 push    rbp
.text:0000000000002341                 mov     rbp, rsp
.text:0000000000002344                 pop     rbp
.text:0000000000002345                 jmp     register_tm_clones
.text:0000000000002345 frame_dummy     endp
.text:0000000000002345
.text:0000000000002345 ; ---------------------------------------------------------------------------
.text:000000000000234A                 align 10h
.text:0000000000002350
.text:0000000000002350 ; =============== S U B R O U T I N E =======================================
.text:0000000000002350
.text:0000000000002350 ; Attributes: noreturn
.text:0000000000002350
.text:0000000000002350 ; void __fastcall __noreturn usage(int status)
.text:0000000000002350                 public usage
.text:0000000000002350 usage           proc near               ; CODE XREF: main+F0↑p
.text:0000000000002350                                         ; main+42A↑p
.text:0000000000002350
.text:0000000000002350 var_A8          = qword ptr -0A8h
.text:0000000000002350 var_A0          = qword ptr -0A0h
.text:0000000000002350 var_98          = qword ptr -98h
.text:0000000000002350 var_90          = qword ptr -90h
.text:0000000000002350 var_88          = qword ptr -88h
.text:0000000000002350 var_80          = qword ptr -80h
.text:0000000000002350 var_78          = qword ptr -78h
.text:0000000000002350 var_70          = qword ptr -70h
.text:0000000000002350 var_68          = qword ptr -68h
.text:0000000000002350 var_60          = qword ptr -60h
.text:0000000000002350 var_58          = qword ptr -58h
.text:0000000000002350 var_50          = qword ptr -50h
.text:0000000000002350 var_48          = qword ptr -48h
.text:0000000000002350 var_40          = qword ptr -40h
.text:0000000000002350 var_30          = qword ptr -30h
.text:0000000000002350
.text:0000000000002350 ; __unwind {
.text:0000000000002350                 push    r13
.text:0000000000002352                 push    r12
.text:0000000000002354                 mov     edx, 5          ; category
.text:0000000000002359                 push    rbp
.text:000000000000235A                 push    rbx
.text:000000000000235B                 mov     ebp, edi
.text:000000000000235D                 sub     rsp, 88h
.text:0000000000002364                 mov     rbx, cs:program_name
.text:000000000000236B                 mov     rax, fs:28h
.text:0000000000002374                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002379                 xor     eax, eax
.text:000000000000237B                 test    edi, edi
.text:000000000000237D                 jz      short loc_23AD
.text:000000000000237F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002386                 xor     edi, edi        ; domainname
.text:0000000000002388                 call    _dcgettext
.text:000000000000238D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002394                 mov     rdx, rax
.text:0000000000002397                 mov     rcx, rbx
.text:000000000000239A                 mov     esi, 1
.text:000000000000239F                 xor     eax, eax
.text:00000000000023A1                 call    ___fprintf_chk
.text:00000000000023A6
.text:00000000000023A6 loc_23A6:                               ; CODE XREF: usage+3B6↓j
.text:00000000000023A6                 mov     edi, ebp        ; status
.text:00000000000023A8                 call    _exit
.text:00000000000023AD ; ---------------------------------------------------------------------------
.text:00000000000023AD
.text:00000000000023AD loc_23AD:                               ; CODE XREF: usage+2D↑j
.text:00000000000023AD                 lea     rsi, aUsageSOptionGr ; "Usage: %s [OPTION]... GROUP FILE...\n  "...
.text:00000000000023B4                 xor     edi, edi        ; domainname
.text:00000000000023B6                 call    _dcgettext
.text:00000000000023BB                 mov     rcx, rbx
.text:00000000000023BE                 mov     rdx, rbx
.text:00000000000023C1                 mov     rsi, rax
.text:00000000000023C4                 mov     edi, 1
.text:00000000000023C9                 xor     eax, eax
.text:00000000000023CB                 call    ___printf_chk
.text:00000000000023D0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000023D7                 lea     rsi, aChangeTheGroup ; "Change the group of each FILE to GROUP."...
.text:00000000000023DE                 mov     edx, 5          ; category
.text:00000000000023E3                 xor     edi, edi        ; domainname
.text:00000000000023E5                 call    _dcgettext
.text:00000000000023EA                 mov     rsi, rbx        ; stream
.text:00000000000023ED                 mov     rdi, rax        ; s
.text:00000000000023F0                 call    _fputs_unlocked
.text:00000000000023F5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000023FC                 lea     rsi, aCChangesLikeVe ; "  -c, --changes          like verbose b"...
.text:0000000000002403                 mov     edx, 5          ; category
.text:0000000000002408                 xor     edi, edi        ; domainname
.text:000000000000240A                 call    _dcgettext
.text:000000000000240F                 mov     rsi, rbx        ; stream
.text:0000000000002412                 mov     rdi, rax        ; s
.text:0000000000002415                 call    _fputs_unlocked
.text:000000000000241A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002421                 lea     rsi, aDereferenceAff ; "      --dereference      affect the ref"...
.text:0000000000002428                 mov     edx, 5          ; category
.text:000000000000242D                 xor     edi, edi        ; domainname
.text:000000000000242F                 call    _dcgettext
.text:0000000000002434                 mov     rsi, rbx        ; stream
.text:0000000000002437                 mov     rdi, rax        ; s
.text:000000000000243A                 call    _fputs_unlocked
.text:000000000000243F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002446                 lea     rsi, aUsefulOnlyOnSy ; "                         (useful only o"...
.text:000000000000244D                 mov     edx, 5          ; category
.text:0000000000002452                 xor     edi, edi        ; domainname
.text:0000000000002454                 call    _dcgettext
.text:0000000000002459                 mov     rsi, rbx        ; stream
.text:000000000000245C                 mov     rdi, rax        ; s
.text:000000000000245F                 call    _fputs_unlocked
.text:0000000000002464                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000246B                 lea     rsi, aNoPreserveRoot ; "      --no-preserve-root  do not treat "...
.text:0000000000002472                 mov     edx, 5          ; category
.text:0000000000002477                 xor     edi, edi        ; domainname
.text:0000000000002479                 call    _dcgettext
.text:000000000000247E                 mov     rsi, rbx        ; stream
.text:0000000000002481                 mov     rdi, rax        ; s
.text:0000000000002484                 call    _fputs_unlocked
.text:0000000000002489                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002490                 lea     rsi, aReferenceRfile ; "      --reference=RFILE  use RFILE's gr"...
.text:0000000000002497                 mov     edx, 5          ; category
.text:000000000000249C                 xor     edi, edi        ; domainname
.text:000000000000249E                 call    _dcgettext
.text:00000000000024A3                 mov     rsi, rbx        ; stream
.text:00000000000024A6                 mov     rdi, rax        ; s
.text:00000000000024A9                 call    _fputs_unlocked
.text:00000000000024AE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024B5                 lea     rsi, aRRecursiveOper ; "  -R, --recursive        operate on fil"...
.text:00000000000024BC                 mov     edx, 5          ; category
.text:00000000000024C1                 xor     edi, edi        ; domainname
.text:00000000000024C3                 call    _dcgettext
.text:00000000000024C8                 mov     rsi, rbx        ; stream
.text:00000000000024CB                 mov     rdi, rax        ; s
.text:00000000000024CE                 call    _fputs_unlocked
.text:00000000000024D3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024DA                 lea     rsi, aTheFollowingOp ; "\nThe following options modify how a hi"...
.text:00000000000024E1                 mov     edx, 5          ; category
.text:00000000000024E6                 xor     edi, edi        ; domainname
.text:00000000000024E8                 call    _dcgettext
.text:00000000000024ED                 mov     rsi, rbx        ; stream
.text:00000000000024F0                 mov     rdi, rax        ; s
.text:00000000000024F3                 call    _fputs_unlocked
.text:00000000000024F8                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024FF                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002506                 mov     edx, 5          ; category
.text:000000000000250B                 xor     edi, edi        ; domainname
.text:000000000000250D                 call    _dcgettext
.text:0000000000002512                 mov     rsi, rbx        ; stream
.text:0000000000002515                 mov     rdi, rax        ; s
.text:0000000000002518                 call    _fputs_unlocked
.text:000000000000251D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002524                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:000000000000252B                 mov     edx, 5          ; category
.text:0000000000002530                 xor     edi, edi        ; domainname
.text:0000000000002532                 call    _dcgettext
.text:0000000000002537                 mov     rsi, rbx        ; stream
.text:000000000000253A                 mov     rdi, rax        ; s
.text:000000000000253D                 call    _fputs_unlocked
.text:0000000000002542                 mov     rbx, cs:program_name
.text:0000000000002549                 lea     rsi, aExamplesSStaff ; "\nExamples:\n  %s staff /u      Change "...
.text:0000000000002550                 mov     edx, 5          ; category
.text:0000000000002555                 xor     edi, edi        ; domainname
.text:0000000000002557                 call    _dcgettext
.text:000000000000255C                 mov     rcx, rbx
.text:000000000000255F                 mov     rdx, rbx
.text:0000000000002562                 mov     rsi, rax
.text:0000000000002565                 mov     edi, 1
.text:000000000000256A                 xor     eax, eax
.text:000000000000256C                 lea     rbx, aChgrp     ; "chgrp"
.text:0000000000002573                 call    ___printf_chk
.text:0000000000002578                 lea     rax, asc_A42A   ; "["
.text:000000000000257F                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002586                 mov     [rsp+0A8h+var_48], 0
.text:000000000000258F                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002598                 mov     rdx, rsp
.text:000000000000259B                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000259F                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000025A6                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000025AB                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000025B2                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000025B7                 lea     rax, domainname ; "coreutils"
.text:00000000000025BE                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000025C3                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000025CA                 mov     [rsp+0A8h+var_98], rax
.text:00000000000025CF                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000025D6                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000025DB                 mov     [rsp+0A8h+var_90], rax
.text:00000000000025E0                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000025E7                 mov     [rsp+0A8h+var_88], rax
.text:00000000000025EC                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000025F3                 mov     [rsp+0A8h+var_80], rax
.text:00000000000025F8                 mov     [rsp+0A8h+var_70], rax
.text:00000000000025FD                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002602                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002607                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002610
.text:0000000000002610 loc_2610:                               ; CODE XREF: usage+2DD↓j
.text:0000000000002610                 add     rdx, 10h
.text:0000000000002614                 mov     rdi, [rdx]
.text:0000000000002617                 test    rdi, rdi
.text:000000000000261A                 jz      short loc_262F
.text:000000000000261C                 mov     ecx, 6
.text:0000000000002621                 mov     rsi, rbx
.text:0000000000002624                 repe cmpsb
.text:0000000000002626                 setnbe  al
.text:0000000000002629                 sbb     al, 0
.text:000000000000262B                 test    al, al
.text:000000000000262D                 jnz     short loc_2610
.text:000000000000262F
.text:000000000000262F loc_262F:                               ; CODE XREF: usage+2CA↑j
.text:000000000000262F                 mov     r12, [rdx+8]
.text:0000000000002633                 xor     edi, edi        ; domainname
.text:0000000000002635                 mov     edx, 5          ; category
.text:000000000000263A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002641                 test    r12, r12
.text:0000000000002644                 jz      loc_270B
.text:000000000000264A                 call    _dcgettext
.text:000000000000264F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002656                 lea     rdx, unk_A4A0
.text:000000000000265D                 mov     rsi, rax
.text:0000000000002660                 mov     edi, 1
.text:0000000000002665                 xor     eax, eax
.text:0000000000002667                 call    ___printf_chk
.text:000000000000266C                 xor     esi, esi        ; locale
.text:000000000000266E                 mov     edi, 5          ; category
.text:0000000000002673                 call    _setlocale
.text:0000000000002678                 test    rax, rax
.text:000000000000267B                 jz      short loc_2699
.text:000000000000267D                 lea     rsi, s2         ; "en_"
.text:0000000000002684                 mov     edx, 3          ; n
.text:0000000000002689                 mov     rdi, rax        ; s1
.text:000000000000268C                 call    _strncmp
.text:0000000000002691                 test    eax, eax
.text:0000000000002693                 jnz     loc_27A0
.text:0000000000002699
.text:0000000000002699 loc_2699:                               ; CODE XREF: usage+32B↑j
.text:0000000000002699                                         ; usage+475↓j
.text:0000000000002699                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000026A0                 xor     edi, edi        ; domainname
.text:00000000000026A2                 mov     edx, 5          ; category
.text:00000000000026A7                 call    _dcgettext
.text:00000000000026AC                 lea     rcx, aChgrp     ; "chgrp"
.text:00000000000026B3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000026BA                 mov     rsi, rax
.text:00000000000026BD                 mov     edi, 1
.text:00000000000026C2                 xor     eax, eax
.text:00000000000026C4                 call    ___printf_chk
.text:00000000000026C9                 cmp     r12, rbx
.text:00000000000026CC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000026D3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000026DA                 cmovz   rbx, rcx
.text:00000000000026DE
.text:00000000000026DE loc_26DE:                               ; CODE XREF: usage+444↓j
.text:00000000000026DE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000026E5                 xor     edi, edi        ; domainname
.text:00000000000026E7                 mov     edx, 5          ; category
.text:00000000000026EC                 call    _dcgettext
.text:00000000000026F1                 mov     rcx, rbx
.text:00000000000026F4                 mov     rsi, rax
.text:00000000000026F7                 mov     rdx, r12
.text:00000000000026FA                 mov     edi, 1
.text:00000000000026FF                 xor     eax, eax
.text:0000000000002701                 call    ___printf_chk
.text:0000000000002706                 jmp     loc_23A6
.text:000000000000270B ; ---------------------------------------------------------------------------
.text:000000000000270B
.text:000000000000270B loc_270B:                               ; CODE XREF: usage+2F4↑j
.text:000000000000270B                 call    _dcgettext
.text:0000000000002710                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002717                 lea     rdx, unk_A4A0
.text:000000000000271E                 mov     rsi, rax
.text:0000000000002721                 mov     edi, 1
.text:0000000000002726                 xor     eax, eax
.text:0000000000002728                 call    ___printf_chk
.text:000000000000272D                 xor     esi, esi        ; locale
.text:000000000000272F                 mov     edi, 5          ; category
.text:0000000000002734                 call    _setlocale
.text:0000000000002739                 test    rax, rax
.text:000000000000273C                 jz      short loc_2756
.text:000000000000273E                 lea     rsi, s2         ; "en_"
.text:0000000000002745                 mov     edx, 3          ; n
.text:000000000000274A                 mov     rdi, rax        ; s1
.text:000000000000274D                 call    _strncmp
.text:0000000000002752                 test    eax, eax
.text:0000000000002754                 jnz     short loc_2799
.text:0000000000002756
.text:0000000000002756 loc_2756:                               ; CODE XREF: usage+3EC↑j
.text:0000000000002756                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000275D                 mov     edx, 5          ; category
.text:0000000000002762                 xor     edi, edi        ; domainname
.text:0000000000002764                 lea     r12, aChgrp     ; "chgrp"
.text:000000000000276B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002772                 call    _dcgettext
.text:0000000000002777                 lea     rcx, aChgrp     ; "chgrp"
.text:000000000000277E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002785                 mov     rsi, rax
.text:0000000000002788                 mov     edi, 1
.text:000000000000278D                 xor     eax, eax
.text:000000000000278F                 call    ___printf_chk
.text:0000000000002794                 jmp     loc_26DE
.text:0000000000002799 ; ---------------------------------------------------------------------------
.text:0000000000002799
.text:0000000000002799 loc_2799:                               ; CODE XREF: usage+404↑j
.text:0000000000002799                 lea     r12, aChgrp     ; "chgrp"
.text:00000000000027A0
.text:00000000000027A0 loc_27A0:                               ; CODE XREF: usage+343↑j
.text:00000000000027A0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000027A7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000027AE                 xor     edi, edi        ; domainname
.text:00000000000027B0                 mov     edx, 5          ; category
.text:00000000000027B5                 call    _dcgettext
.text:00000000000027BA                 mov     rsi, r13        ; stream
.text:00000000000027BD                 mov     rdi, rax        ; s
.text:00000000000027C0                 call    _fputs_unlocked
.text:00000000000027C5                 jmp     loc_2699
.text:00000000000027C5 ; } // starts at 2350
.text:00000000000027C5 usage           endp
.text:00000000000027C5
.text:00000000000027C5 ; ---------------------------------------------------------------------------
.text:00000000000027CA                 align 10h
.text:00000000000027D0
.text:00000000000027D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027D0
.text:00000000000027D0
.text:00000000000027D0 ; __int64 __fastcall user_group_str(char *src, void *)
.text:00000000000027D0 user_group_str  proc near               ; CODE XREF: change_file_owner+1C3↓p
.text:00000000000027D0                                         ; change_file_owner+1E7↓p ...
.text:00000000000027D0 ; __unwind {
.text:00000000000027D0                 test    rdi, rdi
.text:00000000000027D3                 push    r12
.text:00000000000027D5                 push    rbp
.text:00000000000027D6                 push    rbx
.text:00000000000027D7                 jz      short loc_2828
.text:00000000000027D9                 test    rsi, rsi
.text:00000000000027DC                 jz      short loc_2830
.text:00000000000027DE                 mov     rbx, rsi
.text:00000000000027E1                 mov     rbp, rdi
.text:00000000000027E4                 call    _strlen
.text:00000000000027E9                 mov     rdi, rbx        ; s
.text:00000000000027EC                 mov     r12, rax
.text:00000000000027EF                 call    _strlen
.text:00000000000027F4                 lea     rdi, [r12+rax+2]
.text:00000000000027F9                 call    xmalloc
.text:00000000000027FE                 mov     rsi, rbp        ; src
.text:0000000000002801                 mov     rdi, rax        ; dest
.text:0000000000002804                 mov     r12, rax
.text:0000000000002807                 call    _stpcpy
.text:000000000000280C                 lea     rdi, [rax+1]    ; dest
.text:0000000000002810                 mov     byte ptr [rax], 3Ah ; ':'
.text:0000000000002813                 mov     rsi, rbx        ; src
.text:0000000000002816                 call    _strcpy
.text:000000000000281B
.text:000000000000281B loc_281B:                               ; CODE XREF: user_group_str+73↓j
.text:000000000000281B                 mov     rax, r12
.text:000000000000281E                 pop     rbx
.text:000000000000281F                 pop     rbp
.text:0000000000002820                 pop     r12
.text:0000000000002822                 retn
.text:0000000000002822 ; ---------------------------------------------------------------------------
.text:0000000000002823                 align 8
.text:0000000000002828
.text:0000000000002828 loc_2828:                               ; CODE XREF: user_group_str+7↑j
.text:0000000000002828                 test    rsi, rsi
.text:000000000000282B                 jz      short loc_2840
.text:000000000000282D                 mov     rdi, rsi        ; src
.text:0000000000002830
.text:0000000000002830 loc_2830:                               ; CODE XREF: user_group_str+C↑j
.text:0000000000002830                 pop     rbx
.text:0000000000002831                 pop     rbp
.text:0000000000002832                 pop     r12
.text:0000000000002834                 jmp     xstrdup
.text:0000000000002834 ; ---------------------------------------------------------------------------
.text:0000000000002839                 align 20h
.text:0000000000002840
.text:0000000000002840 loc_2840:                               ; CODE XREF: user_group_str+5B↑j
.text:0000000000002840                 xor     r12d, r12d
.text:0000000000002843                 jmp     short loc_281B
.text:0000000000002843 ; } // starts at 27D0
.text:0000000000002843 user_group_str  endp
.text:0000000000002843
.text:0000000000002843 ; ---------------------------------------------------------------------------
.text:0000000000002845                 align 10h
.text:0000000000002850
.text:0000000000002850 ; =============== S U B R O U T I N E =======================================
.text:0000000000002850
.text:0000000000002850
.text:0000000000002850                 public chopt_init
.text:0000000000002850 chopt_init      proc near               ; CODE XREF: main+90↑p
.text:0000000000002850 ; __unwind {
.text:0000000000002850                 mov     dword ptr [rdi], 2
.text:0000000000002856                 mov     qword ptr [rdi+8], 0
.text:000000000000285E                 mov     byte ptr [rdi+10h], 1
.text:0000000000002862                 mov     byte ptr [rdi+4], 0
.text:0000000000002866                 mov     byte ptr [rdi+11h], 0
.text:000000000000286A                 mov     qword ptr [rdi+18h], 0
.text:0000000000002872                 mov     qword ptr [rdi+20h], 0
.text:000000000000287A                 retn
.text:000000000000287A ; } // starts at 2850
.text:000000000000287A chopt_init      endp
.text:000000000000287A
.text:000000000000287A ; ---------------------------------------------------------------------------
.text:000000000000287B                 align 20h
.text:0000000000002880
.text:0000000000002880 ; =============== S U B R O U T I N E =======================================
.text:0000000000002880
.text:0000000000002880
.text:0000000000002880                 public chopt_free
.text:0000000000002880 chopt_free      proc near
.text:0000000000002880 ; __unwind {
.text:0000000000002880                 push    rbx
.text:0000000000002881                 mov     rbx, rdi
.text:0000000000002884                 mov     rdi, [rdi+18h]  ; ptr
.text:0000000000002888                 call    free
.text:000000000000288D                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000002891                 pop     rbx
.text:0000000000002892                 jmp     free
.text:0000000000002892 ; } // starts at 2880
.text:0000000000002892 chopt_free      endp
.text:0000000000002892
.text:0000000000002892 ; ---------------------------------------------------------------------------
.text:0000000000002897                 align 20h
.text:00000000000028A0
.text:00000000000028A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028A0
.text:00000000000028A0
.text:00000000000028A0                 public gid_to_name
.text:00000000000028A0 gid_to_name     proc near               ; CODE XREF: main+265↑p
.text:00000000000028A0                                         ; change_file_owner+1AD↓p ...
.text:00000000000028A0
.text:00000000000028A0 var_10          = qword ptr -10h
.text:00000000000028A0
.text:00000000000028A0 ; __unwind {
.text:00000000000028A0                 push    rbx
.text:00000000000028A1                 mov     ebx, edi
.text:00000000000028A3                 sub     rsp, 20h
.text:00000000000028A7                 mov     rax, fs:28h
.text:00000000000028B0                 mov     [rsp+28h+var_10], rax
.text:00000000000028B5                 xor     eax, eax
.text:00000000000028B7                 call    _getgrgid
.text:00000000000028BC                 test    rax, rax
.text:00000000000028BF                 jz      short loc_28E0
.text:00000000000028C1                 mov     rdi, [rax]      ; src
.text:00000000000028C4
.text:00000000000028C4 loc_28C4:                               ; CODE XREF: gid_to_name+4D↓j
.text:00000000000028C4                 call    xstrdup
.text:00000000000028C9                 mov     rdx, [rsp+28h+var_10]
.text:00000000000028CE                 xor     rdx, fs:28h
.text:00000000000028D7                 jnz     short loc_28EF
.text:00000000000028D9                 add     rsp, 20h
.text:00000000000028DD                 pop     rbx
.text:00000000000028DE                 retn
.text:00000000000028DE ; ---------------------------------------------------------------------------
.text:00000000000028DF                 align 20h
.text:00000000000028E0
.text:00000000000028E0 loc_28E0:                               ; CODE XREF: gid_to_name+1F↑j
.text:00000000000028E0                 mov     edi, ebx
.text:00000000000028E2                 mov     rsi, rsp
.text:00000000000028E5                 call    umaxtostr
.text:00000000000028EA                 mov     rdi, rax
.text:00000000000028ED                 jmp     short loc_28C4
.text:00000000000028EF ; ---------------------------------------------------------------------------
.text:00000000000028EF
.text:00000000000028EF loc_28EF:                               ; CODE XREF: gid_to_name+37↑j
.text:00000000000028EF                 call    ___stack_chk_fail
.text:00000000000028EF ; } // starts at 28A0
.text:00000000000028EF gid_to_name     endp
.text:00000000000028EF
.text:00000000000028EF ; ---------------------------------------------------------------------------
.text:00000000000028F4                 align 20h
.text:0000000000002900
.text:0000000000002900 ; =============== S U B R O U T I N E =======================================
.text:0000000000002900
.text:0000000000002900
.text:0000000000002900                 public uid_to_name
.text:0000000000002900 uid_to_name     proc near               ; CODE XREF: change_file_owner+19F↓p
.text:0000000000002900                                         ; change_file_owner+9D5↓p
.text:0000000000002900
.text:0000000000002900 var_10          = qword ptr -10h
.text:0000000000002900
.text:0000000000002900 ; __unwind {
.text:0000000000002900                 push    rbx
.text:0000000000002901                 mov     ebx, edi
.text:0000000000002903                 sub     rsp, 20h
.text:0000000000002907                 mov     rax, fs:28h
.text:0000000000002910                 mov     [rsp+28h+var_10], rax
.text:0000000000002915                 xor     eax, eax
.text:0000000000002917                 call    _getpwuid
.text:000000000000291C                 test    rax, rax
.text:000000000000291F                 jz      short loc_2940
.text:0000000000002921                 mov     rdi, [rax]      ; src
.text:0000000000002924
.text:0000000000002924 loc_2924:                               ; CODE XREF: uid_to_name+4D↓j
.text:0000000000002924                 call    xstrdup
.text:0000000000002929                 mov     rdx, [rsp+28h+var_10]
.text:000000000000292E                 xor     rdx, fs:28h
.text:0000000000002937                 jnz     short loc_294F
.text:0000000000002939                 add     rsp, 20h
.text:000000000000293D                 pop     rbx
.text:000000000000293E                 retn
.text:000000000000293E ; ---------------------------------------------------------------------------
.text:000000000000293F                 align 20h
.text:0000000000002940
.text:0000000000002940 loc_2940:                               ; CODE XREF: uid_to_name+1F↑j
.text:0000000000002940                 mov     edi, ebx
.text:0000000000002942                 mov     rsi, rsp
.text:0000000000002945                 call    umaxtostr
.text:000000000000294A                 mov     rdi, rax
.text:000000000000294D                 jmp     short loc_2924
.text:000000000000294F ; ---------------------------------------------------------------------------
.text:000000000000294F
.text:000000000000294F loc_294F:                               ; CODE XREF: uid_to_name+37↑j
.text:000000000000294F                 call    ___stack_chk_fail
.text:000000000000294F ; } // starts at 2900
.text:000000000000294F uid_to_name     endp
.text:000000000000294F
.text:000000000000294F ; ---------------------------------------------------------------------------
.text:0000000000002954                 align 20h
.text:0000000000002960
.text:0000000000002960 ; =============== S U B R O U T I N E =======================================
.text:0000000000002960
.text:0000000000002960
.text:0000000000002960 change_file_owner proc near             ; CODE XREF: chown_files+69↓p
.text:0000000000002960
.text:0000000000002960 var_1A8         = qword ptr -1A8h
.text:0000000000002960 var_1A0         = qword ptr -1A0h
.text:0000000000002960 owner           = dword ptr -198h
.text:0000000000002960 group           = dword ptr -190h
.text:0000000000002960 ptr             = qword ptr -188h
.text:0000000000002960 fd              = dword ptr -17Ch
.text:0000000000002960 var_178         = qword ptr -178h
.text:0000000000002960 var_170         = qword ptr -170h
.text:0000000000002960 stat_buf        = stat ptr -168h
.text:0000000000002960 var_D8          = stat ptr -0D8h
.text:0000000000002960 var_40          = qword ptr -40h
.text:0000000000002960 arg_0           = qword ptr  8
.text:0000000000002960
.text:0000000000002960 ; __unwind {
.text:0000000000002960                 push    r15
.text:0000000000002962                 push    r14
.text:0000000000002964                 push    r13
.text:0000000000002966                 push    r12
.text:0000000000002968                 mov     r12d, r8d
.text:000000000000296B                 push    rbp
.text:000000000000296C                 push    rbx
.text:000000000000296D                 mov     rbp, rsi
.text:0000000000002970                 sub     rsp, 178h
.text:0000000000002977                 movzx   r14d, word ptr [rsi+70h]
.text:000000000000297C                 mov     rax, fs:28h
.text:0000000000002985                 mov     [rsp+1A8h+var_40], rax
.text:000000000000298D                 xor     eax, eax
.text:000000000000298F                 mov     rax, [rsi+38h]
.text:0000000000002993                 mov     [rsp+1A8h+var_1A8], rdi
.text:0000000000002997                 mov     [rsp+1A8h+owner], edx
.text:000000000000299B                 mov     [rsp+1A8h+group], ecx
.text:000000000000299F                 cmp     r14w, 0Ah       ; switch 11 cases
.text:00000000000029A4                 mov     rbx, [rsp+1A8h+arg_0]
.text:00000000000029AC                 mov     [rsp+1A8h+var_1A0], rax
.text:00000000000029B1                 ja      short def_29C5  ; jumptable 00000000000029C5 default case, cases 0,3,5,8,9
.text:00000000000029B3                 lea     rcx, jpt_29C5
.text:00000000000029BA                 movzx   edx, r14w
.text:00000000000029BE                 movsxd  rax, ds:(jpt_29C5 - 0B188h)[rcx+rdx*4]
.text:00000000000029C2                 add     rax, rcx
.text:00000000000029C5                 jmp     rax             ; switch jump
.text:00000000000029C5 ; ---------------------------------------------------------------------------
.text:00000000000029C7                 align 10h
.text:00000000000029D0
.text:00000000000029D0 loc_29D0:                               ; CODE XREF: change_file_owner+65↑j
.text:00000000000029D0                                         ; DATA XREF: .rodata:jpt_29C5↓o
.text:00000000000029D0                 mov     rdi, [rsp+1A8h+var_1A8] ; jumptable 00000000000029C5 case 2
.text:00000000000029D4                 mov     dword ptr [rsp+1A8h+ptr], r9d
.text:00000000000029D9                 call    cycle_warning_required
.text:00000000000029DE                 test    al, al
.text:00000000000029E0                 mov     r9d, dword ptr [rsp+1A8h+ptr]
.text:00000000000029E5                 jnz     loc_31C8
.text:00000000000029EB
.text:00000000000029EB def_29C5:                               ; CODE XREF: change_file_owner+51↑j
.text:00000000000029EB                                         ; change_file_owner+65↑j ...
.text:00000000000029EB                 cmp     r12d, 0FFFFFFFFh ; jumptable 00000000000029C5 default case, cases 0,3,5,8,9
.text:00000000000029EF                 mov     r11, [rbp+30h]
.text:00000000000029F3                 movzx   ecx, byte ptr [rbx+10h]
.text:00000000000029F7                 setz    dl
.text:00000000000029FA                 cmp     r9d, 0FFFFFFFFh
.text:00000000000029FE                 lea     r13, [rbp+78h]
.text:0000000000002A02                 setz    al
.text:0000000000002A05                 and     dl, al
.text:0000000000002A07                 mov     r15d, edx
.text:0000000000002A0A                 jz      short loc_2A20
.text:0000000000002A0C                 cmp     dword ptr [rbx], 2
.text:0000000000002A0F                 jnz     short loc_2A20
.text:0000000000002A11                 cmp     qword ptr [rbx+8], 0
.text:0000000000002A16                 jz      loc_3290
.text:0000000000002A1C                 nop     dword ptr [rax+00h]
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: change_file_owner+AA↑j
.text:0000000000002A20                                         ; change_file_owner+AF↑j
.text:0000000000002A20                 test    cl, cl
.text:0000000000002A22                 jnz     loc_2C28
.text:0000000000002A28
.text:0000000000002A28 loc_2A28:                               ; CODE XREF: change_file_owner+2D8↓j
.text:0000000000002A28                                         ; change_file_owner+31E↓j
.text:0000000000002A28                 mov     eax, r14d
.text:0000000000002A2B                 and     eax, 0FFFFFFFDh
.text:0000000000002A2E                 cmp     ax, 4
.text:0000000000002A32                 setz    al
.text:0000000000002A35                 sub     r14d, 1
.text:0000000000002A39                 cmp     r14w, 1
.text:0000000000002A3E                 setbe   dl
.text:0000000000002A41                 or      eax, edx
.text:0000000000002A43                 cmp     r12d, 0FFFFFFFFh
.text:0000000000002A47                 jz      loc_2BF8
.text:0000000000002A4D                 cmp     [r13+1Ch], r12d
.text:0000000000002A51                 jz      loc_2BF8
.text:0000000000002A57                 test    al, al
.text:0000000000002A59                 jz      loc_3496
.text:0000000000002A5F                 mov     rdx, [rbx+8]
.text:0000000000002A63                 test    rdx, rdx
.text:0000000000002A66                 jz      loc_369F
.text:0000000000002A6C                 xor     ecx, ecx
.text:0000000000002A6E
.text:0000000000002A6E loc_2A6E:                               ; CODE XREF: change_file_owner+2BE↓j
.text:0000000000002A6E                 mov     rax, [rdx]
.text:0000000000002A71                 cmp     [r13+8], rax
.text:0000000000002A75                 jz      loc_2EA8
.text:0000000000002A7B
.text:0000000000002A7B loc_2A7B:                               ; CODE XREF: change_file_owner+2AB↓j
.text:0000000000002A7B                                         ; change_file_owner+2B8↓j ...
.text:0000000000002A7B                 test    cl, cl
.text:0000000000002A7D                 jz      loc_369F
.text:0000000000002A83
.text:0000000000002A83 loc_2A83:                               ; CODE XREF: change_file_owner+522↓j
.text:0000000000002A83                                         ; change_file_owner+52F↓j ...
.text:0000000000002A83                 movzx   ecx, byte ptr [rbx+10h]
.text:0000000000002A87
.text:0000000000002A87 loc_2A87:                               ; CODE XREF: change_file_owner+94D↓j
.text:0000000000002A87                 mov     rax, [rsp+1A8h+var_1A8]
.text:0000000000002A8B                 test    cl, cl
.text:0000000000002A8D                 mov     r14d, [rax+2Ch]
.text:0000000000002A91                 jnz     loc_2F40
.text:0000000000002A97
.text:0000000000002A97 loc_2A97:                               ; CODE XREF: change_file_owner+95B↓j
.text:0000000000002A97                 mov     ecx, [rsp+1A8h+group] ; group
.text:0000000000002A9B                 mov     edx, [rsp+1A8h+owner] ; owner
.text:0000000000002A9F                 mov     r8d, 100h       ; flag
.text:0000000000002AA5                 mov     rsi, r11        ; file
.text:0000000000002AA8                 mov     edi, r14d       ; fd
.text:0000000000002AAB                 call    _fchownat
.text:0000000000002AB0                 test    eax, eax
.text:0000000000002AB2                 setz    r15b
.text:0000000000002AB6                 jz      short loc_2AC6
.text:0000000000002AB8                 call    ___errno_location
.text:0000000000002ABD                 cmp     dword ptr [rax], 5Fh ; '_'
.text:0000000000002AC0                 jz      loc_3318
.text:0000000000002AC6
.text:0000000000002AC6 loc_2AC6:                               ; CODE XREF: change_file_owner+156↑j
.text:0000000000002AC6                                         ; change_file_owner+69C↓j
.text:0000000000002AC6                 test    r15b, r15b
.text:0000000000002AC9                 jnz     loc_3008
.text:0000000000002ACF
.text:0000000000002ACF loc_2ACF:                               ; CODE XREF: change_file_owner+658↓j
.text:0000000000002ACF                                         ; change_file_owner+AE0↓j ...
.text:0000000000002ACF                 movzx   r15d, byte ptr [rbx+11h]
.text:0000000000002AD4                 test    r15b, r15b
.text:0000000000002AD7                 jz      loc_30E8
.text:0000000000002ADD
.text:0000000000002ADD loc_2ADD:                               ; CODE XREF: change_file_owner+A90↓j
.text:0000000000002ADD                 mov     eax, [rbx]
.text:0000000000002ADF                 xor     r15d, r15d
.text:0000000000002AE2                 cmp     eax, 2
.text:0000000000002AE5                 jz      loc_2BD2
.text:0000000000002AEB
.text:0000000000002AEB loc_2AEB:                               ; CODE XREF: change_file_owner+7D6↓j
.text:0000000000002AEB                                         ; change_file_owner+85A↓j
.text:0000000000002AEB                 test    eax, eax
.text:0000000000002AED                 jnz     loc_2BD2
.text:0000000000002AF3                 mov     [rsp+1A8h+fd], 3
.text:0000000000002AFB
.text:0000000000002AFB loc_2AFB:                               ; CODE XREF: change_file_owner+6CE↓j
.text:0000000000002AFB                                         ; change_file_owner+6F3↓j ...
.text:0000000000002AFB                 mov     edi, [r13+1Ch]
.text:0000000000002AFF                 call    uid_to_name
.text:0000000000002B04                 mov     edi, [r13+20h]
.text:0000000000002B08                 mov     qword ptr [rsp+1A8h+owner], rax
.text:0000000000002B0D                 call    gid_to_name
.text:0000000000002B12                 mov     r12, [rbx+20h]
.text:0000000000002B16                 mov     r14, [rbx+18h]
.text:0000000000002B1A                 mov     r13, rax
.text:0000000000002B1D
.text:0000000000002B1D loc_2B1D:                               ; CODE XREF: change_file_owner+443↓j
.text:0000000000002B1D                 mov     rsi, r12        ; void *
.text:0000000000002B20                 mov     rdi, r14        ; src
.text:0000000000002B23                 call    user_group_str
.text:0000000000002B28                 test    r12, r12
.text:0000000000002B2B                 mov     esi, 0
.text:0000000000002B30                 mov     qword ptr [rsp+1A8h+group], rax
.text:0000000000002B35                 cmovnz  rsi, r13        ; void *
.text:0000000000002B39                 test    r14, r14
.text:0000000000002B3C                 jz      loc_30A0
.text:0000000000002B42                 mov     rdi, qword ptr [rsp+1A8h+owner] ; src
.text:0000000000002B47                 call    user_group_str
.text:0000000000002B4C                 mov     [rsp+1A8h+ptr], rax
.text:0000000000002B51                 mov     eax, [rsp+1A8h+fd]
.text:0000000000002B55                 cmp     eax, 3
.text:0000000000002B58                 jz      loc_3070
.text:0000000000002B5E                 cmp     eax, 4
.text:0000000000002B61                 jnz     loc_32C0
.text:0000000000002B67                 lea     rsi, aOwnershipOfSRe ; "ownership of %s retained as %s\n"
.text:0000000000002B6E                 mov     edx, 5          ; category
.text:0000000000002B73                 xor     edi, edi        ; domainname
.text:0000000000002B75                 call    _dcgettext
.text:0000000000002B7A                 mov     r12, rax
.text:0000000000002B7D                 nop     dword ptr [rax]
.text:0000000000002B80
.text:0000000000002B80 loc_2B80:                               ; CODE XREF: change_file_owner+73B↓j
.text:0000000000002B80                                         ; change_file_owner+77D↓j ...
.text:0000000000002B80                 mov     rsi, [rsp+1A8h+var_1A0]
.text:0000000000002B85                 mov     edi, 4
.text:0000000000002B8A                 call    quotearg_style
.text:0000000000002B8F                 mov     r14, [rsp+1A8h+ptr]
.text:0000000000002B94                 mov     r8, qword ptr [rsp+1A8h+group]
.text:0000000000002B99                 mov     rdx, rax
.text:0000000000002B9C                 mov     rsi, r12
.text:0000000000002B9F                 mov     edi, 1
.text:0000000000002BA4                 xor     eax, eax
.text:0000000000002BA6                 mov     rcx, r14
.text:0000000000002BA9                 call    ___printf_chk
.text:0000000000002BAE                 mov     rdi, r14        ; ptr
.text:0000000000002BB1                 call    free
.text:0000000000002BB6                 mov     rdi, qword ptr [rsp+1A8h+group] ; ptr
.text:0000000000002BBB                 call    free
.text:0000000000002BC0
.text:0000000000002BC0 loc_2BC0:                               ; CODE XREF: change_file_owner+A22↓j
.text:0000000000002BC0                 mov     rdi, qword ptr [rsp+1A8h+owner] ; ptr
.text:0000000000002BC5                 call    free
.text:0000000000002BCA                 mov     rdi, r13        ; ptr
.text:0000000000002BCD                 call    free
.text:0000000000002BD2
.text:0000000000002BD2 loc_2BD2:                               ; CODE XREF: change_file_owner+185↑j
.text:0000000000002BD2                                         ; change_file_owner+18D↑j ...
.text:0000000000002BD2                 cmp     byte ptr [rbx+4], 0
.text:0000000000002BD6                 jnz     loc_2E50
.text:0000000000002BDC                 mov     rdi, [rsp+1A8h+var_1A8]
.text:0000000000002BE0                 mov     edx, 4
.text:0000000000002BE5                 mov     rsi, rbp
.text:0000000000002BE8                 call    rpl_fts_set
.text:0000000000002BED                 jmp     loc_2E50
.text:0000000000002BED ; ---------------------------------------------------------------------------
.text:0000000000002BF2                 align 8
.text:0000000000002BF8
.text:0000000000002BF8 loc_2BF8:                               ; CODE XREF: change_file_owner+E7↑j
.text:0000000000002BF8                                         ; change_file_owner+F1↑j
.text:0000000000002BF8                 cmp     r9d, 0FFFFFFFFh
.text:0000000000002BFC                 jz      loc_2E80
.text:0000000000002C02                 cmp     [r13+20h], r9d
.text:0000000000002C06                 setz    cl
.text:0000000000002C09                 test    al, al
.text:0000000000002C0B                 jz      loc_2A7B
.text:0000000000002C11                 mov     rdx, [rbx+8]
.text:0000000000002C15                 test    rdx, rdx
.text:0000000000002C18                 jz      loc_2A7B
.text:0000000000002C1E                 jmp     loc_2A6E
.text:0000000000002C1E ; ---------------------------------------------------------------------------
.text:0000000000002C23                 align 8
.text:0000000000002C28
.text:0000000000002C28 loc_2C28:                               ; CODE XREF: change_file_owner+C2↑j
.text:0000000000002C28                                         ; change_file_owner+932↓j
.text:0000000000002C28                 mov     eax, [rbp+90h]
.text:0000000000002C2E                 and     eax, 0F000h
.text:0000000000002C33                 cmp     eax, 0A000h
.text:0000000000002C38                 jnz     loc_2A28
.text:0000000000002C3E                 mov     rax, [rsp+1A8h+var_1A8]
.text:0000000000002C42                 lea     r13, [rsp+1A8h+stat_buf]
.text:0000000000002C47                 xor     r8d, r8d        ; flag
.text:0000000000002C4A                 mov     rdx, r11        ; filename
.text:0000000000002C4D                 mov     edi, 1          ; ver
.text:0000000000002C52                 mov     [rsp+1A8h+fd], r9d
.text:0000000000002C57                 mov     rcx, r13        ; stat_buf
.text:0000000000002C5A                 mov     [rsp+1A8h+ptr], r11
.text:0000000000002C5F                 mov     esi, [rax+2Ch]  ; fildes
.text:0000000000002C62                 call    ___fxstatat
.text:0000000000002C67                 test    eax, eax
.text:0000000000002C69                 jnz     loc_33E8
.text:0000000000002C6F                 movzx   r14d, word ptr [rbp+70h]
.text:0000000000002C74                 mov     r11, [rsp+1A8h+ptr]
.text:0000000000002C79                 mov     r9d, [rsp+1A8h+fd]
.text:0000000000002C7E                 jmp     loc_2A28
.text:0000000000002C7E ; ---------------------------------------------------------------------------
.text:0000000000002C83                 align 8
.text:0000000000002C88
.text:0000000000002C88 loc_2C88:                               ; CODE XREF: change_file_owner+65↑j
.text:0000000000002C88                                         ; DATA XREF: .rodata:jpt_29C5↓o
.text:0000000000002C88                 movzx   r15d, byte ptr [rbx+4] ; jumptable 00000000000029C5 case 1
.text:0000000000002C8D                 test    r15b, r15b
.text:0000000000002C90                 jz      def_29C5        ; jumptable 00000000000029C5 default case, cases 0,3,5,8,9
.text:0000000000002C96                 mov     rax, [rbx+8]
.text:0000000000002C9A                 test    rax, rax
.text:0000000000002C9D                 jz      loc_2E50
.text:0000000000002CA3                 mov     rbx, [rax]
.text:0000000000002CA6                 cmp     [rsi+80h], rbx
.text:0000000000002CAD                 jnz     loc_2E50
.text:0000000000002CB3                 mov     rax, [rax+8]
.text:0000000000002CB7                 cmp     [rsi+78h], rax
.text:0000000000002CBB                 jnz     loc_2E50
.text:0000000000002CC1                 lea     rdx, aLibs+6    ; "/"
.text:0000000000002CC8                 mov     rsi, [rsp+1A8h+var_1A0]
.text:0000000000002CCD                 mov     ecx, 2
.text:0000000000002CD2                 mov     rdi, rdx
.text:0000000000002CD5                 repe cmpsb
.text:0000000000002CD7                 setnbe  al
.text:0000000000002CDA                 sbb     al, 0
.text:0000000000002CDC                 test    al, al
.text:0000000000002CDE                 jnz     loc_35F0
.text:0000000000002CE4                 mov     rsi, [rsp+1A8h+var_1A0]
.text:0000000000002CE9                 mov     edi, 4
.text:0000000000002CEE                 call    quotearg_style
.text:0000000000002CF3                 lea     rsi, aItIsDangerousT ; "it is dangerous to operate recursively "...
.text:0000000000002CFA                 mov     rbx, rax
.text:0000000000002CFD                 mov     edx, 5          ; category
.text:0000000000002D02                 xor     edi, edi        ; domainname
.text:0000000000002D04                 call    _dcgettext
.text:0000000000002D09                 mov     rcx, rbx
.text:0000000000002D0C                 mov     rdx, rax        ; format
.text:0000000000002D0F                 xor     esi, esi        ; errnum
.text:0000000000002D11                 xor     edi, edi        ; status
.text:0000000000002D13                 xor     eax, eax
.text:0000000000002D15                 call    _error
.text:0000000000002D1A
.text:0000000000002D1A loc_2D1A:                               ; CODE XREF: change_file_owner+CDD↓j
.text:0000000000002D1A                 lea     rsi, aUseNoPreserveR ; "use --no-preserve-root to override this"...
.text:0000000000002D21                 mov     edx, 5          ; category
.text:0000000000002D26                 xor     edi, edi        ; domainname
.text:0000000000002D28                 xor     r15d, r15d
.text:0000000000002D2B                 call    _dcgettext
.text:0000000000002D30                 xor     esi, esi        ; errnum
.text:0000000000002D32                 mov     rdx, rax        ; format
.text:0000000000002D35                 xor     edi, edi        ; status
.text:0000000000002D37                 xor     eax, eax
.text:0000000000002D39                 call    _error
.text:0000000000002D3E                 mov     rbx, [rsp+1A8h+var_1A8]
.text:0000000000002D42                 mov     edx, 4
.text:0000000000002D47                 mov     rsi, rbp
.text:0000000000002D4A                 mov     rdi, rbx
.text:0000000000002D4D                 call    rpl_fts_set
.text:0000000000002D52                 mov     rdi, rbx
.text:0000000000002D55                 call    rpl_fts_read
.text:0000000000002D5A                 jmp     loc_2E50
.text:0000000000002D5A ; ---------------------------------------------------------------------------
.text:0000000000002D5F                 align 20h
.text:0000000000002D60
.text:0000000000002D60 loc_2D60:                               ; CODE XREF: change_file_owner+65↑j
.text:0000000000002D60                                         ; DATA XREF: .rodata:jpt_29C5↓o
.text:0000000000002D60                 movzx   r15d, byte ptr [rbx+11h] ; jumptable 00000000000029C5 case 4
.text:0000000000002D65                 test    r15b, r15b
.text:0000000000002D68                 jz      loc_32E0
.text:0000000000002D6E
.text:0000000000002D6E loc_2D6E:                               ; CODE XREF: change_file_owner+458↓j
.text:0000000000002D6E                                         ; change_file_owner+4AA↓j
.text:0000000000002D6E                 mov     eax, [rbx]
.text:0000000000002D70                 xor     r15d, r15d
.text:0000000000002D73                 cmp     eax, 2
.text:0000000000002D76                 jz      loc_2BD2
.text:0000000000002D7C
.text:0000000000002D7C loc_2D7C:                               ; CODE XREF: change_file_owner+486↓j
.text:0000000000002D7C                 test    eax, eax
.text:0000000000002D7E                 jnz     loc_2BD2
.text:0000000000002D84                 xor     r15d, r15d
.text:0000000000002D87                 mov     [rsp+1A8h+fd], 3
.text:0000000000002D8F
.text:0000000000002D8F loc_2D8F:                               ; CODE XREF: change_file_owner+D6B↓j
.text:0000000000002D8F                 mov     r12, [rbx+20h]
.text:0000000000002D93                 mov     r14, [rbx+18h]
.text:0000000000002D97                 xor     r13d, r13d
.text:0000000000002D9A                 mov     qword ptr [rsp+1A8h+owner], 0
.text:0000000000002DA3                 jmp     loc_2B1D
.text:0000000000002DA3 ; ---------------------------------------------------------------------------
.text:0000000000002DA8                 align 10h
.text:0000000000002DB0
.text:0000000000002DB0 loc_2DB0:                               ; CODE XREF: change_file_owner+65↑j
.text:0000000000002DB0                                         ; DATA XREF: .rodata:jpt_29C5↓o
.text:0000000000002DB0                 movzx   r15d, byte ptr [rbx+11h] ; jumptable 00000000000029C5 case 7
.text:0000000000002DB5                 test    r15b, r15b
.text:0000000000002DB8                 jnz     short loc_2D6E
.text:0000000000002DBA                 mov     rdx, [rsp+1A8h+var_1A0]
.text:0000000000002DBF                 mov     esi, 3
.text:0000000000002DC4                 xor     edi, edi
.text:0000000000002DC6                 call    quotearg_n_style_colon
.text:0000000000002DCB                 mov     esi, [rbp+40h]  ; errnum
.text:0000000000002DCE                 lea     rdx, aInvalidGroupS+0Fh ; format
.text:0000000000002DD5                 mov     rcx, rax
.text:0000000000002DD8
.text:0000000000002DD8 loc_2DD8:                               ; CODE XREF: change_file_owner+4DE↓j
.text:0000000000002DD8                 xor     eax, eax
.text:0000000000002DDA                 xor     edi, edi        ; status
.text:0000000000002DDC                 call    _error
.text:0000000000002DE1                 mov     eax, [rbx]
.text:0000000000002DE3                 cmp     eax, 2
.text:0000000000002DE6                 jnz     short loc_2D7C
.text:0000000000002DE8                 jmp     loc_2BD2
.text:0000000000002DE8 ; ---------------------------------------------------------------------------
.text:0000000000002DED                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: change_file_owner+65↑j
.text:0000000000002DF0                                         ; DATA XREF: .rodata:jpt_29C5↓o
.text:0000000000002DF0                 cmp     qword ptr [rsi+58h], 0 ; jumptable 00000000000029C5 case 10
.text:0000000000002DF5                 jnz     short loc_2E02
.text:0000000000002DF7                 cmp     qword ptr [rsi+20h], 0
.text:0000000000002DFC                 jz      loc_33C8
.text:0000000000002E02
.text:0000000000002E02 loc_2E02:                               ; CODE XREF: change_file_owner+495↑j
.text:0000000000002E02                 movzx   r15d, byte ptr [rbx+11h]
.text:0000000000002E07                 test    r15b, r15b
.text:0000000000002E0A                 jnz     loc_2D6E
.text:0000000000002E10                 mov     rsi, [rsp+1A8h+var_1A0]
.text:0000000000002E15                 mov     edi, 4
.text:0000000000002E1A                 call    quotearg_style
.text:0000000000002E1F                 lea     rsi, aCannotAccessS ; "cannot access %s"
.text:0000000000002E26                 mov     r12, rax
.text:0000000000002E29                 mov     edx, 5          ; category
.text:0000000000002E2E
.text:0000000000002E2E loc_2E2E:                               ; CODE XREF: change_file_owner+99E↓j
.text:0000000000002E2E                                         ; DATA XREF: .rodata:off_BBC9↓o
.text:0000000000002E2E                 xor     edi, edi        ; domainname
.text:0000000000002E30                 call    _dcgettext
.text:0000000000002E35                 mov     esi, [rbp+40h]
.text:0000000000002E38                 mov     rcx, r12
.text:0000000000002E3B                 mov     rdx, rax
.text:0000000000002E3E                 jmp     short loc_2DD8
.text:0000000000002E40 ; ---------------------------------------------------------------------------
.text:0000000000002E40
.text:0000000000002E40 loc_2E40:                               ; CODE XREF: change_file_owner+65↑j
.text:0000000000002E40                                         ; DATA XREF: .rodata:jpt_29C5↓o
.text:0000000000002E40                 cmp     byte ptr [rbx+4], 0 ; jumptable 00000000000029C5 case 6
.text:0000000000002E44                 jnz     def_29C5        ; jumptable 00000000000029C5 default case, cases 0,3,5,8,9
.text:0000000000002E4A
.text:0000000000002E4A loc_2E4A:                               ; CODE XREF: change_file_owner+A7E↓j
.text:0000000000002E4A                 mov     r15d, 1
.text:0000000000002E50
.text:0000000000002E50 loc_2E50:                               ; CODE XREF: change_file_owner+276↑j
.text:0000000000002E50                                         ; change_file_owner+28D↑j ...
.text:0000000000002E50                 mov     rbx, [rsp+1A8h+var_40]
.text:0000000000002E58                 xor     rbx, fs:28h
.text:0000000000002E61                 mov     eax, r15d
.text:0000000000002E64                 jnz     loc_369A
.text:0000000000002E6A                 add     rsp, 178h
.text:0000000000002E71                 pop     rbx
.text:0000000000002E72                 pop     rbp
.text:0000000000002E73                 pop     r12
.text:0000000000002E75                 pop     r13
.text:0000000000002E77                 pop     r14
.text:0000000000002E79                 pop     r15
.text:0000000000002E7B                 retn
.text:0000000000002E7B ; ---------------------------------------------------------------------------
.text:0000000000002E7C                 align 20h
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: change_file_owner+29C↑j
.text:0000000000002E80                 test    al, al
.text:0000000000002E82                 jz      loc_2A83
.text:0000000000002E88                 mov     rdx, [rbx+8]
.text:0000000000002E8C                 test    rdx, rdx
.text:0000000000002E8F                 jz      loc_2A83
.text:0000000000002E95                 mov     rdi, [rdx]
.text:0000000000002E98                 cmp     [r13+8], rdi
.text:0000000000002E9C                 jnz     loc_2A83
.text:0000000000002EA2                 mov     ecx, eax
.text:0000000000002EA4                 nop     dword ptr [rax+00h]
.text:0000000000002EA8
.text:0000000000002EA8 loc_2EA8:                               ; CODE XREF: change_file_owner+115↑j
.text:0000000000002EA8                 mov     rax, [rdx+8]
.text:0000000000002EAC                 cmp     [r13+0], rax
.text:0000000000002EB0                 jnz     loc_2A7B
.text:0000000000002EB6                 lea     rdx, aLibs+6    ; "/"
.text:0000000000002EBD                 mov     rsi, [rsp+1A8h+var_1A0]
.text:0000000000002EC2                 mov     ecx, 2
.text:0000000000002EC7                 mov     rdi, rdx
.text:0000000000002ECA                 repe cmpsb
.text:0000000000002ECC                 setnbe  al
.text:0000000000002ECF                 sbb     al, 0
.text:0000000000002ED1                 test    al, al
.text:0000000000002ED3                 jnz     loc_34B8
.text:0000000000002ED9                 mov     rsi, [rsp+1A8h+var_1A0]
.text:0000000000002EDE                 mov     edi, 4
.text:0000000000002EE3                 call    quotearg_style
.text:0000000000002EE8                 lea     rsi, aItIsDangerousT ; "it is dangerous to operate recursively "...
.text:0000000000002EEF                 mov     rbx, rax
.text:0000000000002EF2                 mov     edx, 5          ; category
.text:0000000000002EF7                 xor     edi, edi        ; domainname
.text:0000000000002EF9                 call    _dcgettext
.text:0000000000002EFE                 mov     rcx, rbx
.text:0000000000002F01                 mov     rdx, rax        ; format
.text:0000000000002F04                 xor     esi, esi        ; errnum
.text:0000000000002F06                 xor     edi, edi        ; status
.text:0000000000002F08                 xor     eax, eax
.text:0000000000002F0A                 call    _error
.text:0000000000002F0F
.text:0000000000002F0F loc_2F0F:                               ; CODE XREF: change_file_owner+BA5↓j
.text:0000000000002F0F                 lea     rsi, aUseNoPreserveR ; "use --no-preserve-root to override this"...
.text:0000000000002F16                 mov     edx, 5          ; category
.text:0000000000002F1B                 xor     edi, edi        ; domainname
.text:0000000000002F1D                 xor     r15d, r15d
.text:0000000000002F20                 call    _dcgettext
.text:0000000000002F25                 xor     esi, esi        ; errnum
.text:0000000000002F27                 mov     rdx, rax        ; format
.text:0000000000002F2A                 xor     edi, edi        ; status
.text:0000000000002F2C                 xor     eax, eax
.text:0000000000002F2E                 call    _error
.text:0000000000002F33                 jmp     loc_2E50
.text:0000000000002F33 ; ---------------------------------------------------------------------------
.text:0000000000002F38                 align 20h
.text:0000000000002F40
.text:0000000000002F40 loc_2F40:                               ; CODE XREF: change_file_owner+131↑j
.text:0000000000002F40                 test    r15b, r15b
.text:0000000000002F43                 jnz     loc_2FE0
.text:0000000000002F49                 mov     eax, [r13+18h]
.text:0000000000002F4D                 and     eax, 0F000h
.text:0000000000002F52                 cmp     eax, 8000h
.text:0000000000002F57                 jz      loc_3308
.text:0000000000002F5D                 cmp     eax, 4000h
.text:0000000000002F62                 mov     dword ptr [rsp+1A8h+ptr], 10900h
.text:0000000000002F6A                 jnz     short loc_2FE0
.text:0000000000002F6C
.text:0000000000002F6C loc_2F6C:                               ; CODE XREF: change_file_owner+9B0↓j
.text:0000000000002F6C                 mov     edx, dword ptr [rsp+1A8h+ptr]
.text:0000000000002F70                 mov     rsi, r11
.text:0000000000002F73                 mov     edi, r14d
.text:0000000000002F76                 mov     dword ptr [rsp+1A8h+var_178], r9d
.text:0000000000002F7B                 mov     byte ptr [rsp+1A8h+fd], cl
.text:0000000000002F7F                 mov     [rsp+1A8h+var_170], r11
.text:0000000000002F84                 call    ___openat_2
.text:0000000000002F89                 test    eax, eax
.text:0000000000002F8B                 mov     r8d, eax
.text:0000000000002F8E                 movzx   ecx, byte ptr [rsp+1A8h+fd]
.text:0000000000002F93                 mov     r9d, dword ptr [rsp+1A8h+var_178]
.text:0000000000002F98                 jns     loc_3148
.text:0000000000002F9E                 call    ___errno_location
.text:0000000000002FA3                 cmp     dword ptr [rax], 0Dh
.text:0000000000002FA6                 mov     r10, rax
.text:0000000000002FA9                 movzx   ecx, byte ptr [rsp+1A8h+fd]
.text:0000000000002FAE                 mov     r9d, dword ptr [rsp+1A8h+var_178]
.text:0000000000002FB3                 mov     r11, [rsp+1A8h+var_170]
.text:0000000000002FB8                 jnz     loc_2ACF
.text:0000000000002FBE                 mov     eax, [r13+18h]
.text:0000000000002FC2                 and     eax, 0F000h
.text:0000000000002FC7                 cmp     eax, 8000h
.text:0000000000002FCC                 jz      loc_3596
.text:0000000000002FD2
.text:0000000000002FD2 loc_2FD2:                               ; CODE XREF: change_file_owner+C7E↓j
.text:0000000000002FD2                 mov     rax, [rsp+1A8h+var_1A8]
.text:0000000000002FD6                 mov     r14d, [rax+2Ch]
.text:0000000000002FDA                 nop     word ptr [rax+rax+00h]
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: change_file_owner+5E3↑j
.text:0000000000002FE0                                         ; change_file_owner+60A↑j
.text:0000000000002FE0                 mov     ecx, [rsp+1A8h+group] ; group
.text:0000000000002FE4                 mov     edx, [rsp+1A8h+owner] ; owner
.text:0000000000002FE8                 xor     r8d, r8d        ; flag
.text:0000000000002FEB                 mov     rsi, r11        ; file
.text:0000000000002FEE                 mov     edi, r14d       ; fd
.text:0000000000002FF1                 call    _fchownat
.text:0000000000002FF6                 test    eax, eax
.text:0000000000002FF8                 setz    r15b
.text:0000000000002FFC                 jmp     loc_2AC6
.text:0000000000002FFC ; ---------------------------------------------------------------------------
.text:0000000000003001                 align 8
.text:0000000000003008
.text:0000000000003008 loc_3008:                               ; CODE XREF: change_file_owner+169↑j
.text:0000000000003008                 mov     eax, [rbx]
.text:000000000000300A                 cmp     eax, 2
.text:000000000000300D                 jz      loc_2BD2
.text:0000000000003013
.text:0000000000003013 loc_3013:                               ; CODE XREF: change_file_owner+C09↓j
.text:0000000000003013                 mov     esi, [rsp+1A8h+owner]
.text:0000000000003017                 cmp     esi, 0FFFFFFFFh
.text:000000000000301A                 jz      short loc_3034
.text:000000000000301C                 cmp     [r13+1Ch], esi
.text:0000000000003020                 mov     r15d, 1
.text:0000000000003026                 mov     [rsp+1A8h+fd], 2
.text:000000000000302E                 jnz     loc_2AFB
.text:0000000000003034
.text:0000000000003034 loc_3034:                               ; CODE XREF: change_file_owner+6BA↑j
.text:0000000000003034                 mov     esi, [rsp+1A8h+group]
.text:0000000000003038                 cmp     esi, 0FFFFFFFFh
.text:000000000000303B                 jz      loc_3260
.text:0000000000003041                 cmp     [r13+20h], esi
.text:0000000000003045                 mov     r15d, 1
.text:000000000000304B                 mov     [rsp+1A8h+fd], 2
.text:0000000000003053                 jnz     loc_2AFB
.text:0000000000003059                 test    eax, eax
.text:000000000000305B                 jnz     loc_2BD2
.text:0000000000003061
.text:0000000000003061 loc_3061:                               ; CODE XREF: change_file_owner+90E↓j
.text:0000000000003061                 mov     [rsp+1A8h+fd], 4
.text:0000000000003069                 jmp     loc_2AFB
.text:0000000000003069 ; ---------------------------------------------------------------------------
.text:000000000000306E                 align 10h
.text:0000000000003070
.text:0000000000003070 loc_3070:                               ; CODE XREF: change_file_owner+1F8↑j
.text:0000000000003070                                         ; change_file_owner+753↓j
.text:0000000000003070                 cmp     [rsp+1A8h+ptr], 0
.text:0000000000003076                 mov     edx, 5          ; category
.text:000000000000307B                 jz      loc_3390
.text:0000000000003081                 test    r14, r14
.text:0000000000003084                 jz      loc_3238
.text:000000000000308A                 lea     rsi, aFailedToChange ; "failed to change ownership of %s from %"...
.text:0000000000003091                 xor     edi, edi        ; domainname
.text:0000000000003093                 call    _dcgettext
.text:0000000000003098                 mov     r12, rax
.text:000000000000309B                 jmp     loc_2B80
.text:00000000000030A0 ; ---------------------------------------------------------------------------
.text:00000000000030A0
.text:00000000000030A0 loc_30A0:                               ; CODE XREF: change_file_owner+1DC↑j
.text:00000000000030A0                 xor     edi, edi        ; src
.text:00000000000030A2                 call    user_group_str
.text:00000000000030A7                 mov     [rsp+1A8h+ptr], rax
.text:00000000000030AC                 mov     eax, [rsp+1A8h+fd]
.text:00000000000030B0                 cmp     eax, 3
.text:00000000000030B3                 jz      short loc_3070
.text:00000000000030B5                 cmp     eax, 4
.text:00000000000030B8                 jnz     loc_3210
.text:00000000000030BE                 test    r12, r12
.text:00000000000030C1                 mov     edx, 5          ; category
.text:00000000000030C6                 jz      loc_3448
.text:00000000000030CC                 lea     rsi, aGroupOfSRetain ; "group of %s retained as %s\n"
.text:00000000000030D3                 xor     edi, edi        ; domainname
.text:00000000000030D5                 call    _dcgettext
.text:00000000000030DA                 mov     r12, rax
.text:00000000000030DD                 jmp     loc_2B80
.text:00000000000030DD ; ---------------------------------------------------------------------------
.text:00000000000030E2                 align 8
.text:00000000000030E8
.text:00000000000030E8 loc_30E8:                               ; CODE XREF: change_file_owner+177↑j
.text:00000000000030E8                 mov     rsi, [rsp+1A8h+var_1A0]
.text:00000000000030ED                 mov     edi, 4
.text:00000000000030F2                 call    quotearg_style
.text:00000000000030F7                 cmp     [rsp+1A8h+owner], 0FFFFFFFFh
.text:00000000000030FC                 mov     r14, rax
.text:00000000000030FF                 mov     edx, 5          ; category
.text:0000000000003104                 jz      loc_3278
.text:000000000000310A                 lea     rsi, aChangingOwners ; "changing ownership of %s"
.text:0000000000003111                 xor     edi, edi        ; domainname
.text:0000000000003113                 call    _dcgettext
.text:0000000000003118                 mov     r12, rax
.text:000000000000311B
.text:000000000000311B loc_311B:                               ; CODE XREF: change_file_owner+929↓j
.text:000000000000311B                 call    ___errno_location
.text:0000000000003120                 mov     esi, [rax]      ; errnum
.text:0000000000003122                 xor     edi, edi        ; status
.text:0000000000003124                 xor     eax, eax
.text:0000000000003126                 mov     rcx, r14
.text:0000000000003129                 mov     rdx, r12        ; format
.text:000000000000312C                 call    _error
.text:0000000000003131                 mov     eax, [rbx]
.text:0000000000003133                 cmp     eax, 2
.text:0000000000003136                 jnz     loc_2AEB
.text:000000000000313C                 jmp     loc_2BD2
.text:000000000000313C ; ---------------------------------------------------------------------------
.text:0000000000003141                 align 8
.text:0000000000003148
.text:0000000000003148 loc_3148:                               ; CODE XREF: change_file_owner+638↑j
.text:0000000000003148                                         ; change_file_owner+C74↓j
.text:0000000000003148                 lea     rdx, [rsp+1A8h+var_D8] ; stat_buf
.text:0000000000003150                 mov     esi, r8d        ; fildes
.text:0000000000003153                 mov     edi, 1          ; ver
.text:0000000000003158                 mov     dword ptr [rsp+1A8h+ptr], r8d
.text:000000000000315D                 mov     dword ptr [rsp+1A8h+var_178], r9d
.text:0000000000003162                 mov     byte ptr [rsp+1A8h+fd], cl
.text:0000000000003166                 call    ___fxstat
.text:000000000000316B                 test    eax, eax
.text:000000000000316D                 mov     r8d, dword ptr [rsp+1A8h+ptr]
.text:0000000000003172                 jnz     loc_3420
.text:0000000000003178                 mov     rax, [rsp+1A8h+var_D8.st_ino]
.text:0000000000003180                 cmp     [r13+8], rax
.text:0000000000003184                 movzx   ecx, byte ptr [rsp+1A8h+fd]
.text:0000000000003189                 mov     r9d, dword ptr [rsp+1A8h+var_178]
.text:000000000000318E                 jz      loc_3510
.text:0000000000003194
.text:0000000000003194 loc_3194:                               ; CODE XREF: change_file_owner+BBC↓j
.text:0000000000003194                 mov     [rsp+1A8h+owner], r8d
.text:0000000000003199                 call    ___errno_location
.text:000000000000319E                 mov     r8d, [rsp+1A8h+owner]
.text:00000000000031A3                 mov     r12, rax
.text:00000000000031A6                 mov     r14d, [rax]
.text:00000000000031A9                 mov     edi, r8d        ; fd
.text:00000000000031AC                 call    _close
.text:00000000000031B1                 mov     eax, [rbx]
.text:00000000000031B3                 mov     [r12], r14d
.text:00000000000031B7                 cmp     eax, 2
.text:00000000000031BA                 jnz     loc_2AEB
.text:00000000000031C0                 jmp     loc_2BD2
.text:00000000000031C0 ; ---------------------------------------------------------------------------
.text:00000000000031C5                 align 8
.text:00000000000031C8
.text:00000000000031C8 loc_31C8:                               ; CODE XREF: change_file_owner+85↑j
.text:00000000000031C8                 mov     rdx, [rsp+1A8h+var_1A0]
.text:00000000000031CD                 mov     esi, 3
.text:00000000000031D2                 xor     edi, edi
.text:00000000000031D4                 xor     r15d, r15d
.text:00000000000031D7                 call    quotearg_n_style_colon
.text:00000000000031DC                 lea     rsi, aWarningCircula ; "WARNING: Circular directory structure."...
.text:00000000000031E3                 mov     rbx, rax
.text:00000000000031E6                 mov     edx, 5          ; category
.text:00000000000031EB                 xor     edi, edi        ; domainname
.text:00000000000031ED                 call    _dcgettext
.text:00000000000031F2                 mov     rcx, rbx
.text:00000000000031F5                 mov     rdx, rax        ; format
.text:00000000000031F8                 xor     esi, esi        ; errnum
.text:00000000000031FA                 xor     edi, edi        ; status
.text:00000000000031FC                 xor     eax, eax
.text:00000000000031FE                 call    _error
.text:0000000000003203                 jmp     loc_2E50
.text:0000000000003203 ; ---------------------------------------------------------------------------
.text:0000000000003208                 align 10h
.text:0000000000003210
.text:0000000000003210 loc_3210:                               ; CODE XREF: change_file_owner+758↑j
.text:0000000000003210                 test    r12, r12
.text:0000000000003213                 mov     edx, 5          ; category
.text:0000000000003218                 jz      loc_3480
.text:000000000000321E                 lea     rsi, aChangedGroupOf ; "changed group of %s from %s to %s\n"
.text:0000000000003225                 xor     edi, edi        ; domainname
.text:0000000000003227                 call    _dcgettext
.text:000000000000322C                 mov     r12, rax
.text:000000000000322F                 jmp     loc_2B80
.text:000000000000322F ; ---------------------------------------------------------------------------
.text:0000000000003234                 align 8
.text:0000000000003238
.text:0000000000003238 loc_3238:                               ; CODE XREF: change_file_owner+724↑j
.text:0000000000003238                 test    r12, r12
.text:000000000000323B                 jz      loc_3580
.text:0000000000003241                 lea     rsi, aFailedToChange_0 ; "failed to change group of %s from %s to"...
.text:0000000000003248                 xor     edi, edi        ; domainname
.text:000000000000324A                 call    _dcgettext
.text:000000000000324F                 mov     r12, rax
.text:0000000000003252                 jmp     loc_2B80
.text:0000000000003252 ; ---------------------------------------------------------------------------
.text:0000000000003257                 align 20h
.text:0000000000003260
.text:0000000000003260 loc_3260:                               ; CODE XREF: change_file_owner+6DB↑j
.text:0000000000003260                 test    eax, eax
.text:0000000000003262                 jnz     loc_34A8
.text:0000000000003268                 mov     r15d, 1
.text:000000000000326E                 jmp     loc_3061
.text:000000000000326E ; ---------------------------------------------------------------------------
.text:0000000000003273                 align 8
.text:0000000000003278
.text:0000000000003278 loc_3278:                               ; CODE XREF: change_file_owner+7A4↑j
.text:0000000000003278                 lea     rsi, aChangingGroupO ; "changing group of %s"
.text:000000000000327F
.text:000000000000327F loc_327F:                               ; CODE XREF: change_file_owner+AB4↓j
.text:000000000000327F                 xor     edi, edi        ; domainname
.text:0000000000003281                 call    _dcgettext
.text:0000000000003286                 mov     r12, rax
.text:0000000000003289                 jmp     loc_311B
.text:0000000000003289 ; ---------------------------------------------------------------------------
.text:000000000000328E                 align 10h
.text:0000000000003290
.text:0000000000003290 loc_3290:                               ; CODE XREF: change_file_owner+B6↑j
.text:0000000000003290                 test    cl, cl
.text:0000000000003292                 jnz     loc_2C28
.text:0000000000003298                 mov     eax, r14d
.text:000000000000329B                 and     eax, 0FFFFFFFDh
.text:000000000000329E                 cmp     ax, 4
.text:00000000000032A2                 jz      short loc_32B3
.text:00000000000032A4                 sub     r14d, 1
.text:00000000000032A8                 cmp     r14w, 1
.text:00000000000032AD                 ja      loc_2A87
.text:00000000000032B3
.text:00000000000032B3 loc_32B3:                               ; CODE XREF: change_file_owner+942↑j
.text:00000000000032B3                 mov     rax, [rsp+1A8h+var_1A8]
.text:00000000000032B7                 mov     r14d, [rax+2Ch]
.text:00000000000032BB                 jmp     loc_2A97
.text:00000000000032C0 ; ---------------------------------------------------------------------------
.text:00000000000032C0
.text:00000000000032C0 loc_32C0:                               ; CODE XREF: change_file_owner+201↑j
.text:00000000000032C0                 lea     rsi, aChangedOwnersh ; "changed ownership of %s from %s to %s\n"
.text:00000000000032C7                 mov     edx, 5          ; category
.text:00000000000032CC                 xor     edi, edi        ; domainname
.text:00000000000032CE                 call    _dcgettext
.text:00000000000032D3                 mov     r12, rax
.text:00000000000032D6                 jmp     loc_2B80
.text:00000000000032D6 ; ---------------------------------------------------------------------------
.text:00000000000032DB                 align 20h
.text:00000000000032E0
.text:00000000000032E0 loc_32E0:                               ; CODE XREF: change_file_owner+408↑j
.text:00000000000032E0                 mov     rsi, [rsp+1A8h+var_1A0]
.text:00000000000032E5                 mov     edi, 4
.text:00000000000032EA                 call    quotearg_style
.text:00000000000032EF                 mov     edx, 5
.text:00000000000032F4                 mov     r12, rax
.text:00000000000032F7                 lea     rsi, aCannotReadDire ; "cannot read directory %s"
.text:00000000000032FE                 jmp     loc_2E2E
.text:00000000000032FE ; ---------------------------------------------------------------------------
.text:0000000000003303                 align 8
.text:0000000000003308
.text:0000000000003308 loc_3308:                               ; CODE XREF: change_file_owner+5F7↑j
.text:0000000000003308                 mov     dword ptr [rsp+1A8h+ptr], 900h
.text:0000000000003310                 jmp     loc_2F6C
.text:0000000000003310 ; ---------------------------------------------------------------------------
.text:0000000000003315                 align 8
.text:0000000000003318
.text:0000000000003318 loc_3318:                               ; CODE XREF: change_file_owner+160↑j
.text:0000000000003318                 mov     eax, [rbx]
.text:000000000000331A                 mov     r15d, 1
.text:0000000000003320                 cmp     eax, 2
.text:0000000000003323                 jz      loc_2BD2
.text:0000000000003329                 test    eax, eax
.text:000000000000332B                 jnz     loc_2BD2
.text:0000000000003331                 mov     edi, [r13+1Ch]
.text:0000000000003335                 call    uid_to_name
.text:000000000000333A                 mov     edi, [r13+20h]
.text:000000000000333E                 mov     qword ptr [rsp+1A8h+owner], rax
.text:0000000000003343                 call    gid_to_name
.text:0000000000003348                 mov     rsi, [rsp+1A8h+var_1A0]
.text:000000000000334D                 mov     edi, 4
.text:0000000000003352                 mov     r13, rax
.text:0000000000003355                 call    quotearg_style
.text:000000000000335A                 lea     rsi, aNeitherSymboli ; "neither symbolic link %s nor referent h"...
.text:0000000000003361                 mov     r12, rax
.text:0000000000003364                 xor     edi, edi        ; domainname
.text:0000000000003366                 mov     edx, 5          ; category
.text:000000000000336B                 call    _dcgettext
.text:0000000000003370                 mov     rdx, r12
.text:0000000000003373                 mov     rsi, rax
.text:0000000000003376                 mov     edi, 1
.text:000000000000337B                 xor     eax, eax
.text:000000000000337D                 call    ___printf_chk
.text:0000000000003382                 jmp     loc_2BC0
.text:0000000000003382 ; ---------------------------------------------------------------------------
.text:0000000000003387                 align 10h
.text:0000000000003390
.text:0000000000003390 loc_3390:                               ; CODE XREF: change_file_owner+71B↑j
.text:0000000000003390                 test    r14, r14
.text:0000000000003393                 lea     rsi, aFailedToChange_1 ; "failed to change ownership of %s to %s"...
.text:000000000000339A                 jz      loc_3460
.text:00000000000033A0
.text:00000000000033A0 loc_33A0:                               ; CODE XREF: change_file_owner+B0A↓j
.text:00000000000033A0                                         ; change_file_owner+B17↓j
.text:00000000000033A0                 xor     edi, edi        ; domainname
.text:00000000000033A2                 call    _dcgettext
.text:00000000000033A7                 mov     r12, rax
.text:00000000000033AA                 mov     rax, qword ptr [rsp+1A8h+group]
.text:00000000000033AF                 mov     qword ptr [rsp+1A8h+group], 0
.text:00000000000033B8                 mov     [rsp+1A8h+ptr], rax
.text:00000000000033BD                 jmp     loc_2B80
.text:00000000000033BD ; ---------------------------------------------------------------------------
.text:00000000000033C2                 align 8
.text:00000000000033C8
.text:00000000000033C8 loc_33C8:                               ; CODE XREF: change_file_owner+49C↑j
.text:00000000000033C8                 mov     rdi, [rsp+1A8h+var_1A8]
.text:00000000000033CC                 mov     qword ptr [rsi+20h], 1
.text:00000000000033D4                 mov     edx, 1
.text:00000000000033D9                 call    rpl_fts_set
.text:00000000000033DE                 jmp     loc_2E4A
.text:00000000000033DE ; ---------------------------------------------------------------------------
.text:00000000000033E3                 align 8
.text:00000000000033E8
.text:00000000000033E8 loc_33E8:                               ; CODE XREF: change_file_owner+309↑j
.text:00000000000033E8                 movzx   r15d, byte ptr [rbx+11h]
.text:00000000000033ED                 test    r15b, r15b
.text:00000000000033F0                 jnz     loc_2ADD
.text:00000000000033F6                 mov     rsi, [rsp+1A8h+var_1A0]
.text:00000000000033FB                 mov     edi, 4
.text:0000000000003400                 call    quotearg_style
.text:0000000000003405                 mov     edx, 5
.text:000000000000340A                 mov     r14, rax
.text:000000000000340D                 lea     rsi, aCannotDerefere ; "cannot dereference %s"
.text:0000000000003414                 jmp     loc_327F
.text:0000000000003414 ; ---------------------------------------------------------------------------
.text:0000000000003419                 align 20h
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: change_file_owner+812↑j
.text:0000000000003420                                         ; change_file_owner+D1B↓j
.text:0000000000003420                 mov     [rsp+1A8h+group], r8d
.text:0000000000003425                 call    ___errno_location
.text:000000000000342A                 mov     r8d, [rsp+1A8h+group]
.text:000000000000342F                 mov     r12d, [rax]
.text:0000000000003432                 mov     r14, rax
.text:0000000000003435                 mov     edi, r8d        ; fd
.text:0000000000003438                 call    _close
.text:000000000000343D                 mov     [r14], r12d
.text:0000000000003440                 jmp     loc_2ACF
.text:0000000000003440 ; ---------------------------------------------------------------------------
.text:0000000000003445                 align 8
.text:0000000000003448
.text:0000000000003448 loc_3448:                               ; CODE XREF: change_file_owner+766↑j
.text:0000000000003448                 lea     rsi, aOwnershipOfSRe_0 ; "ownership of %s retained\n"
.text:000000000000344F                 xor     edi, edi        ; domainname
.text:0000000000003451                 call    _dcgettext
.text:0000000000003456                 mov     r12, rax
.text:0000000000003459                 jmp     loc_2B80
.text:0000000000003459 ; ---------------------------------------------------------------------------
.text:000000000000345E                 align 20h
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: change_file_owner+A3A↑j
.text:0000000000003460                 test    r12, r12
.text:0000000000003463                 lea     rsi, aFailedToChange_2 ; "failed to change group of %s to %s\n"
.text:000000000000346A                 jnz     loc_33A0
.text:0000000000003470                 lea     rsi, aFailedToChange_3 ; "failed to change ownership of %s\n"
.text:0000000000003477                 jmp     loc_33A0
.text:0000000000003477 ; ---------------------------------------------------------------------------
.text:000000000000347C                 align 20h
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: change_file_owner+8B8↑j
.text:0000000000003480                 lea     rsi, aNoChangeToOwne ; "no change to ownership of %s\n"
.text:0000000000003487                 xor     edi, edi        ; domainname
.text:0000000000003489                 call    _dcgettext
.text:000000000000348E                 mov     r12, rax
.text:0000000000003491                 jmp     loc_2B80
.text:0000000000003496 ; ---------------------------------------------------------------------------
.text:0000000000003496
.text:0000000000003496 loc_3496:                               ; CODE XREF: change_file_owner+F9↑j
.text:0000000000003496                 mov     eax, [rbx]
.text:0000000000003498                 cmp     eax, 2
.text:000000000000349B                 jz      short loc_34A8
.text:000000000000349D                 test    eax, eax
.text:000000000000349F                 jz      loc_36B8
.text:00000000000034A5                 nop     dword ptr [rax]
.text:00000000000034A8
.text:00000000000034A8 loc_34A8:                               ; CODE XREF: change_file_owner+902↑j
.text:00000000000034A8                                         ; change_file_owner+B3B↑j
.text:00000000000034A8                 mov     r15d, 1
.text:00000000000034AE                 jmp     loc_2BD2
.text:00000000000034AE ; ---------------------------------------------------------------------------
.text:00000000000034B3                 align 8
.text:00000000000034B8
.text:00000000000034B8 loc_34B8:                               ; CODE XREF: change_file_owner+573↑j
.text:00000000000034B8                 mov     esi, 4
.text:00000000000034BD                 mov     edi, 1
.text:00000000000034C2                 call    quotearg_n_style
.text:00000000000034C7                 mov     rdx, [rsp+1A8h+var_1A0]
.text:00000000000034CC                 xor     edi, edi
.text:00000000000034CE                 mov     esi, 4
.text:00000000000034D3                 mov     rbp, rax
.text:00000000000034D6                 call    quotearg_n_style
.text:00000000000034DB                 lea     rsi, aItIsDangerousT_0 ; "it is dangerous to operate recursively "...
.text:00000000000034E2                 mov     rbx, rax
.text:00000000000034E5                 xor     edi, edi        ; domainname
.text:00000000000034E7                 mov     edx, 5          ; category
.text:00000000000034EC                 call    _dcgettext
.text:00000000000034F1                 mov     r8, rbp
.text:00000000000034F4                 mov     rdx, rax        ; format
.text:00000000000034F7                 mov     rcx, rbx
.text:00000000000034FA                 xor     esi, esi        ; errnum
.text:00000000000034FC                 xor     edi, edi        ; status
.text:00000000000034FE                 xor     eax, eax
.text:0000000000003500                 call    _error
.text:0000000000003505                 jmp     loc_2F0F
.text:0000000000003505 ; ---------------------------------------------------------------------------
.text:000000000000350A                 align 10h
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: change_file_owner+82E↑j
.text:0000000000003510                 mov     rax, [rsp+1A8h+var_D8.st_dev]
.text:0000000000003518                 cmp     [r13+0], rax
.text:000000000000351C                 jnz     loc_3194
.text:0000000000003522                 cmp     r12d, 0FFFFFFFFh
.text:0000000000003526                 jz      loc_3648
.text:000000000000352C                 cmp     r12d, [rsp+1A8h+var_D8.st_uid]
.text:0000000000003534                 jz      loc_3642
.text:000000000000353A
.text:000000000000353A loc_353A:                               ; CODE XREF: change_file_owner+CF0↓j
.text:000000000000353A                 mov     [rsp+1A8h+fd], r8d
.text:000000000000353F                 mov     byte ptr [rsp+1A8h+ptr], cl
.text:0000000000003543                 call    ___errno_location
.text:0000000000003548                 mov     r8d, [rsp+1A8h+fd]
.text:000000000000354D                 mov     r14d, [rax]
.text:0000000000003550                 mov     r12, rax
.text:0000000000003553                 mov     edi, r8d        ; fd
.text:0000000000003556                 call    _close
.text:000000000000355B                 mov     [r12], r14d
.text:000000000000355F
.text:000000000000355F loc_355F:                               ; CODE XREF: change_file_owner+D35↓j
.text:000000000000355F                 mov     eax, [rbx]
.text:0000000000003561                 movzx   ecx, byte ptr [rsp+1A8h+ptr]
.text:0000000000003566                 cmp     eax, 2
.text:0000000000003569                 jnz     loc_3013
.text:000000000000356F                 mov     r15d, ecx
.text:0000000000003572                 jmp     loc_2BD2
.text:0000000000003572 ; ---------------------------------------------------------------------------
.text:0000000000003577                 align 20h
.text:0000000000003580
.text:0000000000003580 loc_3580:                               ; CODE XREF: change_file_owner+8DB↑j
.text:0000000000003580                 lea     rsi, aFailedToChange_3 ; "failed to change ownership of %s\n"
.text:0000000000003587                 xor     edi, edi        ; domainname
.text:0000000000003589                 call    _dcgettext
.text:000000000000358E                 mov     r12, rax
.text:0000000000003591                 jmp     loc_2B80
.text:0000000000003596 ; ---------------------------------------------------------------------------
.text:0000000000003596
.text:0000000000003596 loc_3596:                               ; CODE XREF: change_file_owner+66C↑j
.text:0000000000003596                 mov     edx, dword ptr [rsp+1A8h+ptr]
.text:000000000000359A                 mov     rsi, r11
.text:000000000000359D                 mov     edi, r14d
.text:00000000000035A0                 mov     dword ptr [rsp+1A8h+var_170], r9d
.text:00000000000035A5                 mov     [rsp+1A8h+var_178], r10
.text:00000000000035AA                 mov     byte ptr [rsp+1A8h+fd], cl
.text:00000000000035AE                 mov     [rsp+1A8h+ptr], r11
.text:00000000000035B3                 or      edx, 1
.text:00000000000035B6                 call    ___openat_2
.text:00000000000035BB                 test    eax, eax
.text:00000000000035BD                 mov     r8d, eax
.text:00000000000035C0                 mov     r11, [rsp+1A8h+ptr]
.text:00000000000035C5                 movzx   ecx, byte ptr [rsp+1A8h+fd]
.text:00000000000035CA                 mov     r10, [rsp+1A8h+var_178]
.text:00000000000035CF                 mov     r9d, dword ptr [rsp+1A8h+var_170]
.text:00000000000035D4                 jns     loc_3148
.text:00000000000035DA                 cmp     dword ptr [r10], 0Dh
.text:00000000000035DE                 jz      loc_2FD2
.text:00000000000035E4                 jmp     loc_2ACF
.text:00000000000035E4 ; ---------------------------------------------------------------------------
.text:00000000000035E9                 align 10h
.text:00000000000035F0
.text:00000000000035F0 loc_35F0:                               ; CODE XREF: change_file_owner+37E↑j
.text:00000000000035F0                 mov     esi, 4
.text:00000000000035F5                 mov     edi, 1
.text:00000000000035FA                 call    quotearg_n_style
.text:00000000000035FF                 mov     rdx, [rsp+1A8h+var_1A0]
.text:0000000000003604                 xor     edi, edi
.text:0000000000003606                 mov     esi, 4
.text:000000000000360B                 mov     r12, rax
.text:000000000000360E                 call    quotearg_n_style
.text:0000000000003613                 lea     rsi, aItIsDangerousT_0 ; "it is dangerous to operate recursively "...
.text:000000000000361A                 mov     rbx, rax
.text:000000000000361D                 xor     edi, edi        ; domainname
.text:000000000000361F                 mov     edx, 5          ; category
.text:0000000000003624                 call    _dcgettext
.text:0000000000003629                 mov     r8, r12
.text:000000000000362C                 mov     rdx, rax        ; format
.text:000000000000362F                 mov     rcx, rbx
.text:0000000000003632                 xor     esi, esi        ; errnum
.text:0000000000003634                 xor     edi, edi        ; status
.text:0000000000003636                 xor     eax, eax
.text:0000000000003638                 call    _error
.text:000000000000363D                 jmp     loc_2D1A
.text:0000000000003642 ; ---------------------------------------------------------------------------
.text:0000000000003642
.text:0000000000003642 loc_3642:                               ; CODE XREF: change_file_owner+BD4↑j
.text:0000000000003642                 cmp     r9d, 0FFFFFFFFh
.text:0000000000003646                 jz      short loc_3656
.text:0000000000003648
.text:0000000000003648 loc_3648:                               ; CODE XREF: change_file_owner+BC6↑j
.text:0000000000003648                 cmp     r9d, [rsp+1A8h+var_D8.st_gid]
.text:0000000000003650                 jnz     loc_353A
.text:0000000000003656
.text:0000000000003656 loc_3656:                               ; CODE XREF: change_file_owner+CE6↑j
.text:0000000000003656                 mov     edx, [rsp+1A8h+group] ; group
.text:000000000000365A                 mov     esi, [rsp+1A8h+owner] ; owner
.text:000000000000365E                 mov     edi, r8d        ; fd
.text:0000000000003661                 mov     byte ptr [rsp+1A8h+fd], cl
.text:0000000000003665                 mov     dword ptr [rsp+1A8h+ptr], r8d
.text:000000000000366A                 call    _fchown
.text:000000000000366F                 test    eax, eax
.text:0000000000003671                 mov     r8d, dword ptr [rsp+1A8h+ptr]
.text:0000000000003676                 movzx   ecx, byte ptr [rsp+1A8h+fd]
.text:000000000000367B                 jnz     loc_3420
.text:0000000000003681                 mov     edi, r8d        ; fd
.text:0000000000003684                 mov     byte ptr [rsp+1A8h+ptr], cl
.text:0000000000003688                 call    _close
.text:000000000000368D                 test    eax, eax
.text:000000000000368F                 jnz     loc_2ACF
.text:0000000000003695                 jmp     loc_355F
.text:000000000000369A ; ---------------------------------------------------------------------------
.text:000000000000369A
.text:000000000000369A loc_369A:                               ; CODE XREF: change_file_owner+504↑j
.text:000000000000369A                 call    ___stack_chk_fail
.text:000000000000369F ; ---------------------------------------------------------------------------
.text:000000000000369F
.text:000000000000369F loc_369F:                               ; CODE XREF: change_file_owner+106↑j
.text:000000000000369F                                         ; change_file_owner+11D↑j
.text:000000000000369F                 mov     eax, [rbx]
.text:00000000000036A1                 mov     r15d, 1
.text:00000000000036A7                 cmp     eax, 2
.text:00000000000036AA                 jz      loc_2BD2
.text:00000000000036B0                 test    eax, eax
.text:00000000000036B2                 jnz     loc_2BD2
.text:00000000000036B8
.text:00000000000036B8 loc_36B8:                               ; CODE XREF: change_file_owner+B3F↑j
.text:00000000000036B8                 test    r13, r13
.text:00000000000036BB                 jnz     short loc_36D0
.text:00000000000036BD                 mov     r15d, 1
.text:00000000000036C3                 mov     [rsp+1A8h+fd], 4
.text:00000000000036CB                 jmp     loc_2D8F
.text:00000000000036D0 ; ---------------------------------------------------------------------------
.text:00000000000036D0
.text:00000000000036D0 loc_36D0:                               ; CODE XREF: change_file_owner+D5B↑j
.text:00000000000036D0                 mov     [rsp+1A8h+fd], 4
.text:00000000000036D8                 mov     r15d, 1
.text:00000000000036DE                 jmp     loc_2AFB
.text:00000000000036DE ; } // starts at 2960
.text:00000000000036DE change_file_owner endp
.text:00000000000036DE
.text:00000000000036DE ; ---------------------------------------------------------------------------
.text:00000000000036E3                 align 10h
.text:00000000000036F0
.text:00000000000036F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036F0
.text:00000000000036F0
.text:00000000000036F0                 public chown_files
.text:00000000000036F0 chown_files     proc near               ; CODE XREF: main+2A7↑p
.text:00000000000036F0
.text:00000000000036F0 var_3C          = dword ptr -3Ch
.text:00000000000036F0 arg_0           = qword ptr  8
.text:00000000000036F0
.text:00000000000036F0 ; __unwind {
.text:00000000000036F0                 push    r15
.text:00000000000036F2                 push    r14
.text:00000000000036F4                 mov     r15d, ecx
.text:00000000000036F7                 push    r13
.text:00000000000036F9                 push    r12
.text:00000000000036FB                 mov     r13d, r8d
.text:00000000000036FE                 push    rbp
.text:00000000000036FF                 push    rbx
.text:0000000000003700                 mov     r14d, r9d
.text:0000000000003703                 sub     rsp, 18h
.text:0000000000003707                 cmp     r8d, 0FFFFFFFFh
.text:000000000000370B                 mov     [rsp+48h+var_3C], edx
.text:000000000000370F                 mov     r12, [rsp+48h+arg_0]
.text:0000000000003714                 jnz     short loc_3728
.text:0000000000003716                 cmp     r9d, 0FFFFFFFFh
.text:000000000000371A                 jnz     short loc_3728
.text:000000000000371C                 cmp     byte ptr [r12+10h], 0
.text:0000000000003722                 jz      loc_37D0
.text:0000000000003728
.text:0000000000003728 loc_3728:                               ; CODE XREF: chown_files+24↑j
.text:0000000000003728                                         ; chown_files+2A↑j ...
.text:0000000000003728                 xor     edx, edx
.text:000000000000372A                 mov     ebx, 1
.text:000000000000372F                 call    xfts_open
.text:0000000000003734                 mov     rbp, rax
.text:0000000000003737                 jmp     short loc_3762
.text:0000000000003737 ; ---------------------------------------------------------------------------
.text:0000000000003739                 align 20h
.text:0000000000003740
.text:0000000000003740 loc_3740:                               ; CODE XREF: chown_files+7D↓j
.text:0000000000003740                 sub     rsp, 8
.text:0000000000003744                 mov     r9d, r14d
.text:0000000000003747                 mov     r8d, r13d
.text:000000000000374A                 push    r12
.text:000000000000374C                 mov     edx, [rsp+58h+var_3C]
.text:0000000000003750                 mov     ecx, r15d
.text:0000000000003753                 mov     rsi, rax
.text:0000000000003756                 mov     rdi, rbp
.text:0000000000003759                 call    change_file_owner
.text:000000000000375E                 and     ebx, eax
.text:0000000000003760                 pop     rax
.text:0000000000003761                 pop     rdx
.text:0000000000003762
.text:0000000000003762 loc_3762:                               ; CODE XREF: chown_files+47↑j
.text:0000000000003762                 mov     rdi, rbp
.text:0000000000003765                 call    rpl_fts_read
.text:000000000000376A                 test    rax, rax
.text:000000000000376D                 jnz     short loc_3740
.text:000000000000376F                 call    ___errno_location
.text:0000000000003774                 mov     ecx, [rax]
.text:0000000000003776                 mov     r13, rax
.text:0000000000003779                 test    ecx, ecx
.text:000000000000377B                 jz      short loc_3789
.text:000000000000377D                 movzx   ebx, byte ptr [r12+11h]
.text:0000000000003783                 test    bl, bl
.text:0000000000003785                 jz      short loc_37E8
.text:0000000000003787                 xor     ebx, ebx
.text:0000000000003789
.text:0000000000003789 loc_3789:                               ; CODE XREF: chown_files+8B↑j
.text:0000000000003789                                         ; chown_files+11B↓j
.text:0000000000003789                 mov     rdi, rbp        ; ptr
.text:000000000000378C                 call    rpl_fts_close
.text:0000000000003791                 test    eax, eax
.text:0000000000003793                 jz      short loc_37BA
.text:0000000000003795                 lea     rsi, aFtsCloseFailed ; "fts_close failed"
.text:000000000000379C                 mov     edx, 5          ; category
.text:00000000000037A1                 xor     edi, edi        ; domainname
.text:00000000000037A3                 xor     ebx, ebx
.text:00000000000037A5                 call    _dcgettext
.text:00000000000037AA                 mov     esi, [r13+0]    ; errnum
.text:00000000000037AE                 mov     rdx, rax        ; format
.text:00000000000037B1                 xor     edi, edi        ; status
.text:00000000000037B3                 xor     eax, eax
.text:00000000000037B5                 call    _error
.text:00000000000037BA
.text:00000000000037BA loc_37BA:                               ; CODE XREF: chown_files+A3↑j
.text:00000000000037BA                 add     rsp, 18h
.text:00000000000037BE                 mov     eax, ebx
.text:00000000000037C0                 pop     rbx
.text:00000000000037C1                 pop     rbp
.text:00000000000037C2                 pop     r12
.text:00000000000037C4                 pop     r13
.text:00000000000037C6                 pop     r14
.text:00000000000037C8                 pop     r15
.text:00000000000037CA                 retn
.text:00000000000037CA ; ---------------------------------------------------------------------------
.text:00000000000037CB                 align 10h
.text:00000000000037D0
.text:00000000000037D0 loc_37D0:                               ; CODE XREF: chown_files+32↑j
.text:00000000000037D0                 mov     eax, esi
.text:00000000000037D2                 or      eax, 8
.text:00000000000037D5                 cmp     dword ptr [r12], 2
.text:00000000000037DA                 cmovz   esi, eax
.text:00000000000037DD                 jmp     loc_3728
.text:00000000000037DD ; ---------------------------------------------------------------------------
.text:00000000000037E2                 align 8
.text:00000000000037E8
.text:00000000000037E8 loc_37E8:                               ; CODE XREF: chown_files+95↑j
.text:00000000000037E8                 lea     rsi, aFtsReadFailed ; "fts_read failed"
.text:00000000000037EF                 xor     edi, edi        ; domainname
.text:00000000000037F1                 mov     edx, 5          ; category
.text:00000000000037F6                 call    _dcgettext
.text:00000000000037FB                 mov     esi, [r13+0]    ; errnum
.text:00000000000037FF                 mov     rdx, rax        ; format
.text:0000000000003802                 xor     edi, edi        ; status
.text:0000000000003804                 xor     eax, eax
.text:0000000000003806                 call    _error
.text:000000000000380B                 jmp     loc_3789
.text:000000000000380B ; } // starts at 36F0
.text:000000000000380B chown_files     endp
.text:000000000000380B
.text:0000000000003810
.text:0000000000003810 ; =============== S U B R O U T I N E =======================================
.text:0000000000003810
.text:0000000000003810
.text:0000000000003810                 public close_stdout_set_file_name
.text:0000000000003810 close_stdout_set_file_name proc near
.text:0000000000003810 ; __unwind {
.text:0000000000003810                 mov     cs:file_name, rdi
.text:0000000000003817                 retn
.text:0000000000003817 ; } // starts at 3810
.text:0000000000003817 close_stdout_set_file_name endp
.text:0000000000003817
.text:0000000000003817 ; ---------------------------------------------------------------------------
.text:0000000000003818                 align 20h
.text:0000000000003820
.text:0000000000003820 ; =============== S U B R O U T I N E =======================================
.text:0000000000003820
.text:0000000000003820
.text:0000000000003820                 public close_stdout_set_ignore_EPIPE
.text:0000000000003820 close_stdout_set_ignore_EPIPE proc near
.text:0000000000003820 ; __unwind {
.text:0000000000003820                 mov     cs:ignore_EPIPE, dil
.text:0000000000003827                 retn
.text:0000000000003827 ; } // starts at 3820
.text:0000000000003827 close_stdout_set_ignore_EPIPE endp
.text:0000000000003827
.text:0000000000003827 ; ---------------------------------------------------------------------------
.text:0000000000003828                 align 10h
.text:0000000000003830
.text:0000000000003830 ; =============== S U B R O U T I N E =======================================
.text:0000000000003830
.text:0000000000003830 ; Attributes: info_from_lumina
.text:0000000000003830
.text:0000000000003830 ; void __cdecl close_stdout()
.text:0000000000003830                 public close_stdout
.text:0000000000003830 close_stdout    proc near               ; DATA XREF: main+77↑o
.text:0000000000003830 ; __unwind {
.text:0000000000003830                 push    rbp
.text:0000000000003831                 push    rbx
.text:0000000000003832                 sub     rsp, 8
.text:0000000000003836                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000383D                 call    close_stream
.text:0000000000003842                 test    eax, eax
.text:0000000000003844                 jz      short loc_385C
.text:0000000000003846                 call    ___errno_location
.text:000000000000384B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000003852                 mov     rbx, rax
.text:0000000000003855                 jz      short loc_3873
.text:0000000000003857                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000385A                 jnz     short loc_3873
.text:000000000000385C
.text:000000000000385C loc_385C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000385C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000003863                 call    close_stream
.text:0000000000003868                 test    eax, eax
.text:000000000000386A                 jnz     short loc_38B2
.text:000000000000386C                 add     rsp, 8
.text:0000000000003870                 pop     rbx
.text:0000000000003871                 pop     rbp
.text:0000000000003872                 retn
.text:0000000000003873 ; ---------------------------------------------------------------------------
.text:0000000000003873
.text:0000000000003873 loc_3873:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003873                                         ; close_stdout+2A↑j
.text:0000000000003873                 lea     rsi, aWriteError ; "write error"
.text:000000000000387A                 xor     edi, edi        ; domainname
.text:000000000000387C                 mov     edx, 5          ; category
.text:0000000000003881                 call    _dcgettext
.text:0000000000003886                 mov     rdi, cs:file_name
.text:000000000000388D                 mov     rbp, rax
.text:0000000000003890                 test    rdi, rdi
.text:0000000000003893                 jz      short loc_38BD
.text:0000000000003895                 call    quotearg_colon
.text:000000000000389A                 mov     esi, [rbx]      ; errnum
.text:000000000000389C                 lea     rdx, format     ; "%s: %s"
.text:00000000000038A3                 mov     rcx, rax
.text:00000000000038A6                 mov     r8, rbp
.text:00000000000038A9                 xor     edi, edi        ; status
.text:00000000000038AB                 xor     eax, eax
.text:00000000000038AD                 call    _error
.text:00000000000038B2
.text:00000000000038B2 loc_38B2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000038B2                                         ; close_stdout+A2↓j
.text:00000000000038B2                 mov     edi, cs:exit_failure ; status
.text:00000000000038B8                 call    __exit
.text:00000000000038BD ; ---------------------------------------------------------------------------
.text:00000000000038BD
.text:00000000000038BD loc_38BD:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000038BD                 mov     esi, [rbx]      ; errnum
.text:00000000000038BF                 lea     rdx, aInvalidGroupS+0Fh ; format
.text:00000000000038C6                 mov     rcx, rax
.text:00000000000038C9                 xor     edi, edi        ; status
.text:00000000000038CB                 xor     eax, eax
.text:00000000000038CD                 call    _error
.text:00000000000038D2                 jmp     short loc_38B2
.text:00000000000038D2 ; } // starts at 3830
.text:00000000000038D2 close_stdout    endp
.text:00000000000038D2
.text:00000000000038D2 ; ---------------------------------------------------------------------------
.text:00000000000038D4                 align 20h
.text:00000000000038E0
.text:00000000000038E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038E0
.text:00000000000038E0 ; Attributes: info_from_lumina
.text:00000000000038E0
.text:00000000000038E0 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:00000000000038E0                 public umaxtostr
.text:00000000000038E0 umaxtostr       proc near               ; CODE XREF: gid_to_name+45↑p
.text:00000000000038E0                                         ; uid_to_name+45↑p
.text:00000000000038E0 ; __unwind {
.text:00000000000038E0                 lea     rcx, [rsi+14h]
.text:00000000000038E4                 mov     byte ptr [rsi+14h], 0
.text:00000000000038E8                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:00000000000038F2                 nop     word ptr [rax+rax+00h]
.text:00000000000038F8
.text:00000000000038F8 loc_38F8:                               ; CODE XREF: umaxtostr+3C↓j
.text:00000000000038F8                 mov     rax, rdi
.text:00000000000038FB                 sub     rcx, 1
.text:00000000000038FF                 mul     rsi
.text:0000000000003902                 shr     rdx, 3
.text:0000000000003906                 lea     rax, [rdx+rdx*4]
.text:000000000000390A                 add     rax, rax
.text:000000000000390D                 sub     rdi, rax
.text:0000000000003910                 add     edi, 30h ; '0'
.text:0000000000003913                 test    rdx, rdx
.text:0000000000003916                 mov     [rcx], dil
.text:0000000000003919                 mov     rdi, rdx
.text:000000000000391C                 jnz     short loc_38F8
.text:000000000000391E                 mov     rax, rcx
.text:0000000000003921                 retn
.text:0000000000003921 ; } // starts at 38E0
.text:0000000000003921 umaxtostr       endp
.text:0000000000003921
.text:0000000000003921 ; ---------------------------------------------------------------------------
.text:0000000000003922                 align 10h
.text:0000000000003930
.text:0000000000003930 ; =============== S U B R O U T I N E =======================================
.text:0000000000003930
.text:0000000000003930
.text:0000000000003930                 public set_program_name
.text:0000000000003930 set_program_name proc near              ; CODE XREF: main+42↑p
.text:0000000000003930 ; __unwind {
.text:0000000000003930                 test    rdi, rdi
.text:0000000000003933                 push    rbx
.text:0000000000003934                 jz      short loc_39AD
.text:0000000000003936                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000393B                 mov     rbx, rdi
.text:000000000000393E                 call    _strrchr
.text:0000000000003943                 test    rax, rax
.text:0000000000003946                 jz      short loc_399D
.text:0000000000003948                 lea     r8, [rax+1]
.text:000000000000394C                 mov     rdx, r8
.text:000000000000394F                 sub     rdx, rbx
.text:0000000000003952                 cmp     rdx, 6
.text:0000000000003956                 jle     short loc_399D
.text:0000000000003958                 lea     rsi, [rax-6]
.text:000000000000395C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003963                 mov     ecx, 7
.text:0000000000003968                 repe cmpsb
.text:000000000000396A                 setnbe  dl
.text:000000000000396D                 sbb     dl, 0
.text:0000000000003970                 test    dl, dl
.text:0000000000003972                 jnz     short loc_399D
.text:0000000000003974                 lea     rdi, aLt        ; "lt-"
.text:000000000000397B                 mov     ecx, 3
.text:0000000000003980                 mov     rsi, r8
.text:0000000000003983                 mov     rbx, r8
.text:0000000000003986                 repe cmpsb
.text:0000000000003988                 setnbe  dl
.text:000000000000398B                 sbb     dl, 0
.text:000000000000398E                 test    dl, dl
.text:0000000000003990                 jnz     short loc_399D
.text:0000000000003992                 lea     rbx, [rax+4]
.text:0000000000003996                 mov     cs:__bss_start, rbx
.text:000000000000399D
.text:000000000000399D loc_399D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000399D                                         ; set_program_name+26↑j ...
.text:000000000000399D                 mov     cs:program_name, rbx
.text:00000000000039A4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000039AB                 pop     rbx
.text:00000000000039AC                 retn
.text:00000000000039AD ; ---------------------------------------------------------------------------
.text:00000000000039AD
.text:00000000000039AD loc_39AD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000039AD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000039B4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000039BB                 mov     edx, 37h ; '7'  ; n
.text:00000000000039C0                 mov     esi, 1          ; size
.text:00000000000039C5                 call    _fwrite
.text:00000000000039CA                 call    _abort
.text:00000000000039CA ; } // starts at 3930
.text:00000000000039CA set_program_name endp
.text:00000000000039CA
.text:00000000000039CA ; ---------------------------------------------------------------------------
.text:00000000000039CF                 align 10h
.text:00000000000039D0
.text:00000000000039D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039D0
.text:00000000000039D0 ; Attributes: info_from_lumina
.text:00000000000039D0
.text:00000000000039D0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000039D0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000039D0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000039D0 ; __unwind {
.text:00000000000039D0                 push    rbp
.text:00000000000039D1                 push    rbx
.text:00000000000039D2                 mov     rbp, rdi
.text:00000000000039D5                 mov     ebx, esi
.text:00000000000039D7                 sub     rsp, 8
.text:00000000000039DB                 call    locale_charset
.text:00000000000039E0                 movzx   edx, byte ptr [rax]
.text:00000000000039E3                 and     edx, 0FFFFFFDFh
.text:00000000000039E6                 cmp     dl, 55h ; 'U'
.text:00000000000039E9                 jz      short loc_3A60
.text:00000000000039EB                 cmp     dl, 47h ; 'G'
.text:00000000000039EE                 jz      short loc_3A10
.text:00000000000039F0
.text:00000000000039F0 loc_39F0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000039F0                                         ; gettext_quote+50↓j ...
.text:00000000000039F0                 lea     rax, unk_B223
.text:00000000000039F7                 lea     rdx, asc_B225   ; "'"
.text:00000000000039FE                 cmp     ebx, 9
.text:0000000000003A01                 cmovnz  rax, rdx
.text:0000000000003A05                 add     rsp, 8
.text:0000000000003A09                 pop     rbx
.text:0000000000003A0A                 pop     rbp
.text:0000000000003A0B                 retn
.text:0000000000003A0B ; ---------------------------------------------------------------------------
.text:0000000000003A0C                 align 10h
.text:0000000000003A10
.text:0000000000003A10 loc_3A10:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003A10                 movzx   edx, byte ptr [rax+1]
.text:0000000000003A14                 and     edx, 0FFFFFFDFh
.text:0000000000003A17                 cmp     dl, 42h ; 'B'
.text:0000000000003A1A                 jnz     short loc_39F0
.text:0000000000003A1C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003A20                 jnz     short loc_39F0
.text:0000000000003A22                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003A26                 jnz     short loc_39F0
.text:0000000000003A28                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000003A2C                 jnz     short loc_39F0
.text:0000000000003A2E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003A32                 jnz     short loc_39F0
.text:0000000000003A34                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003A38                 jnz     short loc_39F0
.text:0000000000003A3A                 cmp     byte ptr [rax+7], 0
.text:0000000000003A3E                 jnz     short loc_39F0
.text:0000000000003A40                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003A44                 lea     rax, unk_B21C
.text:0000000000003A4B                 lea     rdx, unk_B220
.text:0000000000003A52                 cmovnz  rax, rdx
.text:0000000000003A56                 add     rsp, 8
.text:0000000000003A5A                 pop     rbx
.text:0000000000003A5B                 pop     rbp
.text:0000000000003A5C                 retn
.text:0000000000003A5C ; ---------------------------------------------------------------------------
.text:0000000000003A5D                 align 20h
.text:0000000000003A60
.text:0000000000003A60 loc_3A60:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003A60                 movzx   edx, byte ptr [rax+1]
.text:0000000000003A64                 and     edx, 0FFFFFFDFh
.text:0000000000003A67                 cmp     dl, 54h ; 'T'
.text:0000000000003A6A                 jnz     short loc_39F0
.text:0000000000003A6C                 movzx   edx, byte ptr [rax+2]
.text:0000000000003A70                 and     edx, 0FFFFFFDFh
.text:0000000000003A73                 cmp     dl, 46h ; 'F'
.text:0000000000003A76                 jnz     loc_39F0
.text:0000000000003A7C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000003A80                 jnz     loc_39F0
.text:0000000000003A86                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000003A8A                 jnz     loc_39F0
.text:0000000000003A90                 cmp     byte ptr [rax+5], 0
.text:0000000000003A94                 jnz     loc_39F0
.text:0000000000003A9A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003A9E                 lea     rax, unk_B214
.text:0000000000003AA5                 lea     rdx, unk_B218
.text:0000000000003AAC                 cmovnz  rax, rdx
.text:0000000000003AB0                 add     rsp, 8
.text:0000000000003AB4                 pop     rbx
.text:0000000000003AB5                 pop     rbp
.text:0000000000003AB6                 retn
.text:0000000000003AB6 ; } // starts at 39D0
.text:0000000000003AB6 gettext_quote   endp
.text:0000000000003AB6
.text:0000000000003AB6 ; ---------------------------------------------------------------------------
.text:0000000000003AB7                 align 20h
.text:0000000000003AC0
.text:0000000000003AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AC0
.text:0000000000003AC0 ; Attributes: info_from_lumina
.text:0000000000003AC0
.text:0000000000003AC0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000003AC0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000003AC0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000003AC0
.text:0000000000003AC0 var_E0          = dword ptr -0E0h
.text:0000000000003AC0 var_DB          = byte ptr -0DBh
.text:0000000000003AC0 var_DA          = byte ptr -0DAh
.text:0000000000003AC0 var_D9          = byte ptr -0D9h
.text:0000000000003AC0 s               = qword ptr -0D8h
.text:0000000000003AC0 n               = qword ptr -0D0h
.text:0000000000003AC0 var_C8          = qword ptr -0C8h
.text:0000000000003AC0 ps              = qword ptr -0C0h
.text:0000000000003AC0 var_B8          = qword ptr -0B8h
.text:0000000000003AC0 var_B0          = qword ptr -0B0h
.text:0000000000003AC0 var_A8          = qword ptr -0A8h
.text:0000000000003AC0 s2              = qword ptr -0A0h
.text:0000000000003AC0 var_98          = qword ptr -98h
.text:0000000000003AC0 var_90          = qword ptr -90h
.text:0000000000003AC0 var_88          = qword ptr -88h
.text:0000000000003AC0 var_80          = qword ptr -80h
.text:0000000000003AC0 var_78          = qword ptr -78h
.text:0000000000003AC0 var_70          = dword ptr -70h
.text:0000000000003AC0 var_6C          = byte ptr -6Ch
.text:0000000000003AC0 var_6B          = byte ptr -6Bh
.text:0000000000003AC0 var_6A          = byte ptr -6Ah
.text:0000000000003AC0 var_69          = byte ptr -69h
.text:0000000000003AC0 var_68          = qword ptr -68h
.text:0000000000003AC0 var_60          = qword ptr -60h
.text:0000000000003AC0 wc              = dword ptr -4Ch
.text:0000000000003AC0 var_48          = qword ptr -48h
.text:0000000000003AC0 var_40          = qword ptr -40h
.text:0000000000003AC0 arg_0           = qword ptr  8
.text:0000000000003AC0 arg_8           = qword ptr  10h
.text:0000000000003AC0 arg_10          = qword ptr  18h
.text:0000000000003AC0
.text:0000000000003AC0 ; __unwind {
.text:0000000000003AC0                 push    r15
.text:0000000000003AC2                 push    r14
.text:0000000000003AC4                 mov     r15d, r8d
.text:0000000000003AC7                 push    r13
.text:0000000000003AC9                 push    r12
.text:0000000000003ACB                 mov     r14, rdi
.text:0000000000003ACE                 push    rbp
.text:0000000000003ACF                 push    rbx
.text:0000000000003AD0                 mov     ebx, r9d
.text:0000000000003AD3                 mov     r13, rsi
.text:0000000000003AD6                 mov     rbp, rcx
.text:0000000000003AD9                 and     ebx, 2
.text:0000000000003ADC                 sub     rsp, 0B8h
.text:0000000000003AE3                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000003AEB                 mov     [rsp+0E8h+s], rdx
.text:0000000000003AF0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000003AF5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000003AFA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000003AFF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000003B07                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003B0C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003B14                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003B19                 mov     rax, fs:28h
.text:0000000000003B22                 mov     [rsp+0E8h+var_40], rax
.text:0000000000003B2A                 xor     eax, eax
.text:0000000000003B2C                 call    ___ctype_get_mb_cur_max
.text:0000000000003B31                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003B35                 mov     [rsp+0E8h+var_90], rax
.text:0000000000003B3A                 ja      def_3B51        ; jumptable 00000000000121F1 default case
.text:0000000000003B40                 lea     rcx, jpt_3B51
.text:0000000000003B47                 mov     edx, r15d
.text:0000000000003B4A                 movsxd  rax, ds:(jpt_3B51 - 0B280h)[rcx+rdx*4]
.text:0000000000003B4E                 add     rax, rcx
.text:0000000000003B51                 jmp     rax             ; switch jump
.text:0000000000003B53 ; ---------------------------------------------------------------------------
.text:0000000000003B53
.text:0000000000003B53 loc_3B53:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003B53                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003B53                                         ; DATA XREF: ...
.text:0000000000003B53                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003B58                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B5D                 xor     r12d, r12d
.text:0000000000003B60                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B69                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003B6E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003B73
.text:0000000000003B73 loc_3B73:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003B73                 lea     rax, asc_B225   ; "'"
.text:0000000000003B7A                 mov     [rsp+0E8h+n], 1
.text:0000000000003B83                 xor     r15d, r15d
.text:0000000000003B86                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003B8E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003B93
.text:0000000000003B93 loc_3B93:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003B93                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003B93                 xor     r11d, r11d
.text:0000000000003B96                 mov     rax, rbp
.text:0000000000003B99                 mov     r8d, r12d
.text:0000000000003B9C                 mov     rbp, r11
.text:0000000000003B9F                 mov     r11, rax
.text:0000000000003BA2                 nop     word ptr [rax+rax+00h]
.text:0000000000003BA8
.text:0000000000003BA8 loc_3BA8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003BA8                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003BA8                 cmp     r11, rbp
.text:0000000000003BAB                 setnz   r12b
.text:0000000000003BAF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BB3                 jnz     short loc_3BC2
.text:0000000000003BB5                 mov     rax, [rsp+0E8h+s]
.text:0000000000003BBA                 cmp     byte ptr [rax+rbp], 0
.text:0000000000003BBE                 setnz   r12b
.text:0000000000003BC2
.text:0000000000003BC2 loc_3BC2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003BC2                 test    r12b, r12b
.text:0000000000003BC5                 jz      loc_4220
.text:0000000000003BCB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003BD0                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003BD5                 lea     r9, [rdi+rbp]
.text:0000000000003BD9                 setnz   al
.text:0000000000003BDC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003BE0                 mov     r10d, eax
.text:0000000000003BE3                 jz      loc_3C90
.text:0000000000003BE9                 mov     rax, [rsp+0E8h+n]
.text:0000000000003BEE                 test    rax, rax
.text:0000000000003BF1                 jz      loc_4020
.text:0000000000003BF7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BFB                 lea     rbx, [rbp+rax+0]
.text:0000000000003C00                 jnz     short loc_3C30
.text:0000000000003C02                 cmp     rax, 1
.text:0000000000003C06                 jbe     short loc_3C30
.text:0000000000003C08                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003C0D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003C12                 mov     [rsp+0E8h+ps], r9
.text:0000000000003C17                 call    _strlen
.text:0000000000003C1C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003C22                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003C28                 mov     r11, rax
.text:0000000000003C2B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003C30                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003C30                 cmp     rbx, r11
.text:0000000000003C33                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003C38                 ja      loc_41F0
.text:0000000000003C3E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003C43                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003C48                 mov     rdi, r9         ; s1
.text:0000000000003C4B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003C50                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003C55                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003C5A                 call    _memcmp
.text:0000000000003C5F                 test    eax, eax
.text:0000000000003C61                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003C66                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003C6C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003C71                 jnz     loc_41F0
.text:0000000000003C77                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C7C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003C82                 jnz     loc_4C05
.text:0000000000003C88                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003C90
.text:0000000000003C90 loc_3C90:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003C90                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003C90                 movzx   ebx, byte ptr [r9]
.text:0000000000003C94                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003C97                 ja      def_3CAE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003C9D                 lea     rcx, jpt_3CAE
.text:0000000000003CA4                 movzx   edx, bl
.text:0000000000003CA7                 movsxd  rax, ds:(jpt_3CAE - 0B2ACh)[rcx+rdx*4]
.text:0000000000003CAB                 add     rax, rcx
.text:0000000000003CAE                 jmp     rax             ; switch jump
.text:0000000000003CB0 ; ---------------------------------------------------------------------------
.text:0000000000003CB0
.text:0000000000003CB0 loc_3CB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003CB0                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000003CB0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003CB3
.text:0000000000003CB3 loc_3CB3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003CB3                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003CB3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003CB7                 setnz   al
.text:0000000000003CBA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CBE                 jnz     short loc_3CCC
.text:0000000000003CC0                 mov     rax, [rsp+0E8h+s]
.text:0000000000003CC5                 cmp     byte ptr [rax+1], 0
.text:0000000000003CC9                 setnz   al
.text:0000000000003CCC
.text:0000000000003CCC loc_3CCC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000003CCC                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003CD1                 setz    dl
.text:0000000000003CD4                 test    al, al
.text:0000000000003CD6                 jz      loc_3F28
.text:0000000000003CDC
.text:0000000000003CDC loc_3CDC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000003CDC                 xor     r12d, r12d
.text:0000000000003CDF                 xor     eax, eax
.text:0000000000003CE1                 nop     dword ptr [rax+00000000h]
.text:0000000000003CE8
.text:0000000000003CE8 loc_3CE8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003CE8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003CE8                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000003CED                 jnz     loc_3E02
.text:0000000000003CF3                 test    dl, dl
.text:0000000000003CF5                 jnz     loc_3E02
.text:0000000000003CFB
.text:0000000000003CFB loc_3CFB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000003CFB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003D00                 test    rsi, rsi
.text:0000000000003D03                 jz      short loc_3D19
.text:0000000000003D05                 mov     edx, ebx
.text:0000000000003D07                 shr     dl, 5
.text:0000000000003D0A                 movzx   edx, dl
.text:0000000000003D0D                 mov     edx, [rsi+rdx*4]
.text:0000000000003D10                 bt      edx, ebx
.text:0000000000003D13                 jb      loc_3E63
.text:0000000000003D19
.text:0000000000003D19 loc_3D19:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003D19                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003D19                 test    r10b, r10b
.text:0000000000003D1C                 jnz     loc_3E63
.text:0000000000003D22                 xor     eax, 1
.text:0000000000003D25                 add     rbp, 1
.text:0000000000003D29                 and     eax, r8d
.text:0000000000003D2C
.text:0000000000003D2C loc_3D2C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000003D2C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000003D2C                 test    al, al
.text:0000000000003D2E                 jz      short loc_3D50
.text:0000000000003D30                 cmp     r13, r15
.text:0000000000003D33                 jbe     short loc_3D3A
.text:0000000000003D35                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003D3A
.text:0000000000003D3A loc_3D3A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000003D3A                 lea     rax, [r15+1]
.text:0000000000003D3E                 cmp     r13, rax
.text:0000000000003D41                 jbe     short loc_3D49
.text:0000000000003D43                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003D49
.text:0000000000003D49 loc_3D49:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003D49                 add     r15, 2
.text:0000000000003D4D                 xor     r8d, r8d
.text:0000000000003D50
.text:0000000000003D50 loc_3D50:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003D50                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003D50                 cmp     r15, r13
.text:0000000000003D53                 jnb     short loc_3D59
.text:0000000000003D55                 mov     [r14+r15], bl
.text:0000000000003D59
.text:0000000000003D59 loc_3D59:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003D59                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000003D5E                 add     r15, 1
.text:0000000000003D62                 mov     eax, 0
.text:0000000000003D67                 test    r12b, r12b
.text:0000000000003D6A                 cmovz   edi, eax
.text:0000000000003D6D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003D72                 jmp     loc_3BA8
.text:0000000000003D72 ; ---------------------------------------------------------------------------
.text:0000000000003D77                 align 20h
.text:0000000000003D80
.text:0000000000003D80 loc_3D80:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003D80                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000003D80                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003D83
.text:0000000000003D83 loc_3D83:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003D83                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003D83                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003D87                 cmp     eax, 2
.text:0000000000003D8A                 jz      loc_4348
.text:0000000000003D90                 cmp     eax, 5
.text:0000000000003D93                 jz      loc_4308
.text:0000000000003D99                 cmp     eax, 2
.text:0000000000003D9C                 mov     ebx, 3Fh ; '?'
.text:0000000000003DA1                 setz    dl
.text:0000000000003DA4                 xor     r12d, r12d
.text:0000000000003DA7                 xor     eax, eax
.text:0000000000003DA9                 jmp     loc_3CE8
.text:0000000000003DA9 ; ---------------------------------------------------------------------------
.text:0000000000003DAE                 align 10h
.text:0000000000003DB0
.text:0000000000003DB0 loc_3DB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003DB0                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000003DB0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003DB3
.text:0000000000003DB3 loc_3DB3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003DB3                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003DB3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003DB8                 jz      loc_42C0
.text:0000000000003DBE                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003DC3                 xor     edx, edx
.text:0000000000003DC5                 xor     eax, eax
.text:0000000000003DC7                 mov     ebx, 27h ; '''
.text:0000000000003DCC                 jmp     loc_3CE8
.text:0000000000003DCC ; ---------------------------------------------------------------------------
.text:0000000000003DD1                 align 8
.text:0000000000003DD8
.text:0000000000003DD8 loc_3DD8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003DD8                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003DD8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000003DDD                 mov     ebx, 74h ; 't'
.text:0000000000003DE2
.text:0000000000003DE2 loc_3DE2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003DE2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003DE2                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003DE7                 setz    al
.text:0000000000003DEA                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003DEE                 jnz     loc_3F3E
.text:0000000000003DF4
.text:0000000000003DF4 loc_3DF4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003DF4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003DF4                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003DF9                 jnz     short loc_3E60
.text:0000000000003DFB
.text:0000000000003DFB loc_3DFB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000003DFB                 mov     ebx, edx
.text:0000000000003DFD                 xor     r12d, r12d
.text:0000000000003E00                 xor     eax, eax
.text:0000000000003E02
.text:0000000000003E02 loc_3E02:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003E02                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003E02                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003E07                 jnz     loc_3CFB
.text:0000000000003E0D                 jmp     loc_3D19
.text:0000000000003E0D ; ---------------------------------------------------------------------------
.text:0000000000003E12                 align 8
.text:0000000000003E18
.text:0000000000003E18 loc_3E18:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003E18                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003E18                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000003E1D                 mov     ebx, 62h ; 'b'
.text:0000000000003E22                 jmp     short loc_3DF4
.text:0000000000003E22 ; ---------------------------------------------------------------------------
.text:0000000000003E24                 align 8
.text:0000000000003E28
.text:0000000000003E28 loc_3E28:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003E28                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003E28                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000003E2D                 jz      loc_4200
.text:0000000000003E33                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003E38                 jz      loc_4050
.text:0000000000003E3E
.text:0000000000003E3E loc_3E3E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000003E3E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003E43                 jz      loc_4050
.text:0000000000003E49                 cmp     [rsp+0E8h+n], 0
.text:0000000000003E4F                 jnz     loc_420B
.text:0000000000003E55                 mov     ebx, 5Ch ; '\'
.text:0000000000003E5A                 nop     word ptr [rax+rax+00h]
.text:0000000000003E60
.text:0000000000003E60 loc_3E60:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003E60                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003E60                 xor     r12d, r12d
.text:0000000000003E63
.text:0000000000003E63 loc_3E63:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003E63                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003E63                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003E68                 setz    dl
.text:0000000000003E6B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003E70                 mov     eax, edx
.text:0000000000003E72                 jnz     loc_46C8
.text:0000000000003E78                 mov     eax, r8d
.text:0000000000003E7B                 xor     eax, 1
.text:0000000000003E7E                 and     al, dl
.text:0000000000003E80                 jz      short loc_3EB1
.text:0000000000003E82                 cmp     r13, r15
.text:0000000000003E85                 jbe     short loc_3E8C
.text:0000000000003E87                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003E8C
.text:0000000000003E8C loc_3E8C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000003E8C                 lea     rdx, [r15+1]
.text:0000000000003E90                 cmp     r13, rdx
.text:0000000000003E93                 jbe     short loc_3E9B
.text:0000000000003E95                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003E9B
.text:0000000000003E9B loc_3E9B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000003E9B                 lea     rdx, [r15+2]
.text:0000000000003E9F                 cmp     r13, rdx
.text:0000000000003EA2                 jbe     short loc_3EAA
.text:0000000000003EA4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003EAA
.text:0000000000003EAA loc_3EAA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000003EAA                 add     r15, 3
.text:0000000000003EAE                 mov     r8d, eax
.text:0000000000003EB1
.text:0000000000003EB1 loc_3EB1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003EB1                 cmp     r13, r15
.text:0000000000003EB4                 jbe     short loc_3EBB
.text:0000000000003EB6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003EBB
.text:0000000000003EBB loc_3EBB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000003EBB                 add     r15, 1
.text:0000000000003EBF                 add     rbp, 1
.text:0000000000003EC3                 jmp     loc_3D50
.text:0000000000003EC3 ; ---------------------------------------------------------------------------
.text:0000000000003EC8                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 loc_3ED0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003ED0                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003ED0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003ED5                 jnz     loc_40A3
.text:0000000000003EDB                 xor     edx, edx
.text:0000000000003EDD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003EE2                 jz      loc_3DFB
.text:0000000000003EE8                 add     rbp, 1
.text:0000000000003EEC                 jmp     loc_3BA8
.text:0000000000003EEC ; ---------------------------------------------------------------------------
.text:0000000000003EF1                 align 8
.text:0000000000003EF8
.text:0000000000003EF8 loc_3EF8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003EF8                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003EF8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000003EFD                 setz    dl
.text:0000000000003F00                 xor     eax, eax
.text:0000000000003F02                 jmp     loc_3CE8
.text:0000000000003F02 ; ---------------------------------------------------------------------------
.text:0000000000003F07                 align 10h
.text:0000000000003F10
.text:0000000000003F10 loc_3F10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F10                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003F10                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003F15                 mov     ebx, 61h ; 'a'
.text:0000000000003F1A                 jmp     loc_3DF4
.text:0000000000003F1A ; ---------------------------------------------------------------------------
.text:0000000000003F1F                 align 20h
.text:0000000000003F20
.text:0000000000003F20 loc_3F20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F20                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003F20                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003F25                 setz    dl
.text:0000000000003F28
.text:0000000000003F28 loc_3F28:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003F28                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003F28                 test    rbp, rbp
.text:0000000000003F2B                 jnz     loc_3CDC
.text:0000000000003F31
.text:0000000000003F31 loc_3F31:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003F31                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003F31                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003F36                 and     al, dl
.text:0000000000003F38                 jz      loc_3CE8
.text:0000000000003F3E
.text:0000000000003F3E loc_3F3E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000003F3E                 mov     rbp, r11
.text:0000000000003F41                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003F49                 jmp     loc_4649
.text:0000000000003F49 ; ---------------------------------------------------------------------------
.text:0000000000003F4E                 align 10h
.text:0000000000003F50
.text:0000000000003F50 loc_3F50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F50                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003F50                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003F55                 setz    dl
.text:0000000000003F58                 xor     r12d, r12d
.text:0000000000003F5B                 jmp     short loc_3F31
.text:0000000000003F5B ; ---------------------------------------------------------------------------
.text:0000000000003F5D                 align 20h
.text:0000000000003F60
.text:0000000000003F60 loc_3F60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F60                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003F60                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003F65                 mov     ebx, 20h ; ' '
.text:0000000000003F6A                 setz    dl
.text:0000000000003F6D                 jmp     short loc_3F31
.text:0000000000003F6D ; ---------------------------------------------------------------------------
.text:0000000000003F6F                 align 10h
.text:0000000000003F70
.text:0000000000003F70 loc_3F70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F70                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003F70                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003F75                 mov     ebx, 72h ; 'r'
.text:0000000000003F7A                 jmp     loc_3DE2
.text:0000000000003F7A ; ---------------------------------------------------------------------------
.text:0000000000003F7F                 align 20h
.text:0000000000003F80
.text:0000000000003F80 loc_3F80:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F80                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003F80                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003F85                 mov     ebx, 66h ; 'f'
.text:0000000000003F8A                 jmp     loc_3DF4
.text:0000000000003F8A ; ---------------------------------------------------------------------------
.text:0000000000003F8F                 align 10h
.text:0000000000003F90
.text:0000000000003F90 loc_3F90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F90                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003F90                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003F95                 mov     ebx, 76h ; 'v'
.text:0000000000003F9A                 jmp     loc_3DF4
.text:0000000000003F9A ; ---------------------------------------------------------------------------
.text:0000000000003F9F                 align 20h
.text:0000000000003FA0
.text:0000000000003FA0 loc_3FA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003FA0                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003FA0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003FA5                 mov     ebx, 6Eh ; 'n'
.text:0000000000003FAA                 jmp     loc_3DE2
.text:0000000000003FAA ; ---------------------------------------------------------------------------
.text:0000000000003FAF                 align 10h
.text:0000000000003FB0
.text:0000000000003FB0 def_403A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003FB0                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003FB0                                         ; DATA XREF: ...
.text:0000000000003FB0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003FB3                 nop     dword ptr [rax+rax+00h]
.text:0000000000003FB8
.text:0000000000003FB8 def_3CAE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003FB8                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003FB8                                         ; DATA XREF: ...
.text:0000000000003FB8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003FBE                 jnz     loc_4368
.text:0000000000003FC4                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003FC9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000003FCE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003FD3                 call    ___ctype_b_loc
.text:0000000000003FD8                 mov     rcx, [rax]
.text:0000000000003FDB                 movzx   edx, bl
.text:0000000000003FDE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003FE4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003FEA                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000003FEF                 mov     edi, 1
.text:0000000000003FF4                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003FF8                 and     ax, 4000h
.text:0000000000003FFC                 setnz   r12b
.text:0000000000004000                 setz    al
.text:0000000000004003                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004007
.text:0000000000004007 loc_4007:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000004007                 test    al, al
.text:0000000000004009                 jnz     loc_49A1
.text:000000000000400F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004014                 setz    dl
.text:0000000000004017                 jmp     loc_3CE8
.text:0000000000004017 ; ---------------------------------------------------------------------------
.text:000000000000401C                 align 20h
.text:0000000000004020
.text:0000000000004020 loc_4020:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000004020                 movzx   ebx, byte ptr [r9]
.text:0000000000004024                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004027                 ja      short def_403A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004029                 lea     rcx, jpt_403A
.text:0000000000004030                 movzx   edx, bl
.text:0000000000004033                 movsxd  rax, ds:(jpt_403A - 0B4A8h)[rcx+rdx*4]
.text:0000000000004037                 add     rax, rcx
.text:000000000000403A                 jmp     rax             ; switch jump
.text:000000000000403A ; ---------------------------------------------------------------------------
.text:000000000000403C                 align 20h
.text:0000000000004040
.text:0000000000004040 loc_4040:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004040                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004040                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000004043                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004048                 jnz     loc_3E3E
.text:000000000000404E                 xchg    ax, ax
.text:0000000000004050
.text:0000000000004050 loc_4050:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000004050                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000004050                 mov     edx, 5Ch ; '\'
.text:0000000000004055                 mov     ebx, 5Ch ; '\'
.text:000000000000405A                 jmp     loc_3DF4
.text:000000000000405A ; ---------------------------------------------------------------------------
.text:000000000000405F                 align 20h
.text:0000000000004060
.text:0000000000004060 loc_4060:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004060                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004060                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000004065                 xor     r10d, r10d
.text:0000000000004068                 mov     ebx, 66h ; 'f'
.text:000000000000406D                 jmp     loc_3DF4
.text:000000000000406D ; ---------------------------------------------------------------------------
.text:0000000000004072                 align 8
.text:0000000000004078
.text:0000000000004078 loc_4078:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004078                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004078                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000407D                 xor     r10d, r10d
.text:0000000000004080                 mov     ebx, 6Eh ; 'n'
.text:0000000000004085                 jmp     loc_3DE2
.text:0000000000004085 ; ---------------------------------------------------------------------------
.text:000000000000408A                 align 10h
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004090                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004090                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000004095                 jmp     loc_3E60
.text:0000000000004095 ; ---------------------------------------------------------------------------
.text:000000000000409A                 align 20h
.text:00000000000040A0
.text:00000000000040A0 loc_40A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000040A0                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:00000000000040A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000040A3
.text:00000000000040A3 loc_40A3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000040A3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000040A8                 setz    dl
.text:00000000000040AB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000040B0                 jnz     loc_4C4A
.text:00000000000040B6                 mov     eax, r8d
.text:00000000000040B9                 mov     rcx, r15
.text:00000000000040BC                 xor     eax, 1
.text:00000000000040BF                 and     al, dl
.text:00000000000040C1                 jz      short loc_40F0
.text:00000000000040C3                 cmp     r13, r15
.text:00000000000040C6                 jbe     short loc_40CD
.text:00000000000040C8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000040CD
.text:00000000000040CD loc_40CD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000040CD                 lea     rcx, [r15+1]
.text:00000000000040D1                 cmp     r13, rcx
.text:00000000000040D4                 jbe     short loc_40DC
.text:00000000000040D6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000040DC
.text:00000000000040DC loc_40DC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000040DC                 lea     rcx, [r15+2]
.text:00000000000040E0                 cmp     r13, rcx
.text:00000000000040E3                 ja      loc_4719
.text:00000000000040E9
.text:00000000000040E9 loc_40E9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000040E9                 lea     rcx, [r15+3]
.text:00000000000040ED                 mov     r8d, eax
.text:00000000000040F0
.text:00000000000040F0 loc_40F0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000040F0                 cmp     r13, rcx
.text:00000000000040F3                 jbe     short loc_40FA
.text:00000000000040F5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000040FA
.text:00000000000040FA loc_40FA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000040FA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000040FF                 lea     r15, [rcx+1]
.text:0000000000004103                 jz      loc_4709
.text:0000000000004109                 lea     rax, [rbp+1]
.text:000000000000410D                 cmp     rax, r11
.text:0000000000004110                 jnb     short loc_412B
.text:0000000000004112                 mov     rax, [rsp+0E8h+s]
.text:0000000000004117                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000411C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000004120                 sub     eax, 30h ; '0'
.text:0000000000004123                 cmp     al, 9
.text:0000000000004125                 jbe     loc_4959
.text:000000000000412B
.text:000000000000412B loc_412B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000412B                 mov     eax, r12d
.text:000000000000412E                 mov     ebx, 30h ; '0'
.text:0000000000004133                 xor     r12d, r12d
.text:0000000000004136                 jmp     loc_3CE8
.text:0000000000004136 ; ---------------------------------------------------------------------------
.text:000000000000413B                 align 20h
.text:0000000000004140
.text:0000000000004140 loc_4140:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004140                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004140                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000004145                 mov     r12d, r10d
.text:0000000000004148                 setz    dl
.text:000000000000414B                 xor     r10d, r10d
.text:000000000000414E                 xor     eax, eax
.text:0000000000004150                 jmp     loc_3CE8
.text:0000000000004150 ; ---------------------------------------------------------------------------
.text:0000000000004155                 align 8
.text:0000000000004158
.text:0000000000004158 loc_4158:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004158                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004158                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000415D                 setz    dl
.text:0000000000004160                 xor     r10d, r10d
.text:0000000000004163                 jmp     loc_3F28
.text:0000000000004163 ; ---------------------------------------------------------------------------
.text:0000000000004168                 align 10h
.text:0000000000004170
.text:0000000000004170 loc_4170:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004170                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004170                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004175                 setz    dl
.text:0000000000004178                 xor     r10d, r10d
.text:000000000000417B                 xor     r12d, r12d
.text:000000000000417E                 jmp     loc_3F31
.text:000000000000417E ; ---------------------------------------------------------------------------
.text:0000000000004183                 align 8
.text:0000000000004188
.text:0000000000004188 loc_4188:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004188                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004188                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000418D                 mov     r12d, r10d
.text:0000000000004190                 mov     ebx, 20h ; ' '
.text:0000000000004195                 setz    dl
.text:0000000000004198                 xor     r10d, r10d
.text:000000000000419B                 jmp     loc_3F31
.text:00000000000041A0 ; ---------------------------------------------------------------------------
.text:00000000000041A0
.text:00000000000041A0 loc_41A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000041A0                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:00000000000041A0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000041A5                 xor     r10d, r10d
.text:00000000000041A8                 mov     ebx, 72h ; 'r'
.text:00000000000041AD                 jmp     loc_3DE2
.text:00000000000041AD ; ---------------------------------------------------------------------------
.text:00000000000041B2                 align 8
.text:00000000000041B8
.text:00000000000041B8 loc_41B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000041B8                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:00000000000041B8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000041BD                 jmp     loc_3E60
.text:00000000000041BD ; ---------------------------------------------------------------------------
.text:00000000000041C2                 align 8
.text:00000000000041C8
.text:00000000000041C8 loc_41C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000041C8                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:00000000000041C8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000041CD                 xor     r10d, r10d
.text:00000000000041D0                 mov     ebx, 74h ; 't'
.text:00000000000041D5                 jmp     loc_3DE2
.text:00000000000041D5 ; ---------------------------------------------------------------------------
.text:00000000000041DA                 align 20h
.text:00000000000041E0
.text:00000000000041E0 loc_41E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000041E0                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:00000000000041E0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000041E5                 jmp     loc_3E60
.text:00000000000041E5 ; ---------------------------------------------------------------------------
.text:00000000000041EA                 align 10h
.text:00000000000041F0
.text:00000000000041F0 loc_41F0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000041F0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000041F0                 xor     r10d, r10d
.text:00000000000041F3                 jmp     loc_3C90
.text:00000000000041F3 ; ---------------------------------------------------------------------------
.text:00000000000041F8                 align 20h
.text:0000000000004200
.text:0000000000004200 loc_4200:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000004200                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004205                 jnz     loc_4B70
.text:000000000000420B
.text:000000000000420B loc_420B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000420B                 add     rbp, 1
.text:000000000000420F                 mov     eax, r8d
.text:0000000000004212                 xor     r12d, r12d
.text:0000000000004215                 mov     ebx, 5Ch ; '\'
.text:000000000000421A                 jmp     loc_3D2C
.text:000000000000421A ; ---------------------------------------------------------------------------
.text:000000000000421F                 align 20h
.text:0000000000004220
.text:0000000000004220 loc_4220:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000004220                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004225                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000422A                 mov     r12d, r8d
.text:000000000000422D                 mov     rbp, r11
.text:0000000000004230                 setz    dl
.text:0000000000004233                 mov     eax, ebx
.text:0000000000004235                 test    r15, r15
.text:0000000000004238                 setz    cl
.text:000000000000423B                 and     eax, edx
.text:000000000000423D                 and     al, cl
.text:000000000000423F                 jnz     loc_4CA6
.text:0000000000004245                 mov     eax, ebx
.text:0000000000004247                 xor     eax, 1
.text:000000000000424A                 and     dl, al
.text:000000000000424C                 jz      loc_4BBC
.text:0000000000004252                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000004257                 jz      loc_4BBA
.text:000000000000425D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000004262                 jnz     loc_4C5D
.text:0000000000004268                 test    r13, r13
.text:000000000000426B                 setz    al
.text:000000000000426E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004274                 setnz   dl
.text:0000000000004277                 and     al, dl
.text:0000000000004279                 jz      loc_4C9C
.text:000000000000427F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004284
.text:0000000000004284 loc_4284:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000004284                 lea     rbx, asc_B225   ; "'"
.text:000000000000428B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000428F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004297                 mov     r15d, 1
.text:000000000000429D                 mov     [rsp+0E8h+n], 1
.text:00000000000042A6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000042AB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000042B0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000042B4                 jmp     loc_3B93
.text:00000000000042B4 ; ---------------------------------------------------------------------------
.text:00000000000042B9                 align 20h
.text:00000000000042C0
.text:00000000000042C0 loc_42C0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000042C0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000042C5                 jnz     loc_4B70
.text:00000000000042CB                 test    r13, r13
.text:00000000000042CE                 jz      loc_46D0
.text:00000000000042D4                 xor     edx, edx
.text:00000000000042D6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000042DC                 jnz     loc_46D0
.text:00000000000042E2
.text:00000000000042E2 loc_42E2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000042E2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000042E2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000042E7                 add     r15, 3
.text:00000000000042EB                 xor     eax, eax
.text:00000000000042ED                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000042F2                 xor     r8d, r8d
.text:00000000000042F5                 mov     r13, rdx
.text:00000000000042F8                 mov     ebx, 27h ; '''
.text:00000000000042FD                 jmp     loc_3D19
.text:00000000000042FD ; ---------------------------------------------------------------------------
.text:0000000000004302                 align 8
.text:0000000000004308
.text:0000000000004308 loc_4308:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000004308                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000430D                 jz      short loc_4330
.text:000000000000430F                 lea     rcx, [rbp+2]
.text:0000000000004313                 cmp     rcx, r11
.text:0000000000004316                 jnb     short loc_4330
.text:0000000000004318                 mov     rax, [rsp+0E8h+s]
.text:000000000000431D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000004322                 jz      loc_4AB2
.text:0000000000004328                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004330
.text:0000000000004330 loc_4330:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000004330                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000004330                 xor     edx, edx
.text:0000000000004332                 xor     r12d, r12d
.text:0000000000004335                 xor     eax, eax
.text:0000000000004337                 mov     ebx, 3Fh ; '?'
.text:000000000000433C                 jmp     loc_3CE8
.text:000000000000433C ; ---------------------------------------------------------------------------
.text:0000000000004341                 align 8
.text:0000000000004348
.text:0000000000004348 loc_4348:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000004348                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000434D                 jnz     loc_4B70
.text:0000000000004353                 xor     r12d, r12d
.text:0000000000004356                 xor     eax, eax
.text:0000000000004358                 mov     ebx, 3Fh ; '?'
.text:000000000000435D                 jmp     loc_3D19
.text:000000000000435D ; ---------------------------------------------------------------------------
.text:0000000000004362                 align 8
.text:0000000000004368
.text:0000000000004368 loc_4368:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000004368                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000004370                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004374                 mov     [rsp+0E8h+var_48], 0
.text:0000000000004380                 mov     [rsp+0E8h+ps], rax
.text:0000000000004385                 jnz     short loc_43B4
.text:0000000000004387                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000438C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000004391                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000004396                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000439B                 call    _strlen
.text:00000000000043A0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000043A6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000043AC                 mov     r11, rax
.text:00000000000043AF                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000043B4
.text:00000000000043B4 loc_43B4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000043B4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000043BC                 xor     ecx, ecx
.text:00000000000043BE                 mov     [rsp+0E8h+var_6A], bl
.text:00000000000043C2                 mov     [rsp+0E8h+var_6B], r8b
.text:00000000000043C7                 mov     rbx, rcx
.text:00000000000043CA                 mov     [rsp+0E8h+var_60], r9
.text:00000000000043D2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000043D7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000043DC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000043E4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000043E9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000043EE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000043F3
.text:00000000000043F3 loc_43F3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000043F3                 mov     rax, [rsp+0E8h+s]
.text:00000000000043F8                 lea     r14, [rbp+rbx+0]
.text:00000000000043FD                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000004402                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000004407                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000440C                 lea     r13, [rax+r14]
.text:0000000000004410                 sub     rdx, r14
.text:0000000000004413                 mov     rsi, r13
.text:0000000000004416                 call    rpl_mbrtowc
.text:000000000000441B                 test    rax, rax
.text:000000000000441E                 mov     r15, rax
.text:0000000000004421                 jz      short loc_4471
.text:0000000000004423                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004427                 jz      loc_4A45
.text:000000000000442D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004431                 jz      loc_49D1
.text:0000000000004437                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000443C                 setz    al
.text:000000000000443F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004443                 jnz     loc_45E0
.text:0000000000004449
.text:0000000000004449 loc_4449:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004449                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004449                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000004450                 call    _iswprint
.text:0000000000004455                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000445A                 test    eax, eax
.text:000000000000445C                 mov     eax, 0
.text:0000000000004461                 cmovz   r12d, eax
.text:0000000000004465                 add     rbx, r15
.text:0000000000004468                 call    _mbsinit
.text:000000000000446D                 test    eax, eax
.text:000000000000446F                 jz      short loc_43F3
.text:0000000000004471
.text:0000000000004471 loc_4471:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004471                 mov     edx, r12d
.text:0000000000004474                 mov     rdi, rbx
.text:0000000000004477                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000447D                 xor     edx, 1
.text:0000000000004480                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004485                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000448B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000448F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004497                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000449C                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000044A1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000044A6
.text:00000000000044A6 loc_44A6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000044A6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000044A6                 cmp     rdi, 1
.text:00000000000044AA                 jbe     loc_4AAB
.text:00000000000044B0
.text:00000000000044B0 loc_44B0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000044B0                 mov     rcx, rdi
.text:00000000000044B3                 xor     esi, esi
.text:00000000000044B5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000044BB                 add     rcx, rbp
.text:00000000000044BE                 mov     rdi, [rsp+0E8h+s]
.text:00000000000044C3                 jmp     loc_457E
.text:00000000000044C3 ; ---------------------------------------------------------------------------
.text:00000000000044C8                 align 10h
.text:00000000000044D0
.text:00000000000044D0 loc_44D0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000044D0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000044D5                 setz    al
.text:00000000000044D8                 test    r9b, r9b
.text:00000000000044DB                 jnz     loc_4990
.text:00000000000044E1                 mov     esi, r8d
.text:00000000000044E4                 xor     esi, 1
.text:00000000000044E7                 and     al, sil
.text:00000000000044EA                 jz      short loc_451B
.text:00000000000044EC                 cmp     r13, r15
.text:00000000000044EF                 jbe     short loc_44F6
.text:00000000000044F1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000044F6
.text:00000000000044F6 loc_44F6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000044F6                 lea     rsi, [r15+1]
.text:00000000000044FA                 cmp     r13, rsi
.text:00000000000044FD                 jbe     short loc_4505
.text:00000000000044FF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004505
.text:0000000000004505 loc_4505:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000004505                 lea     rsi, [r15+2]
.text:0000000000004509                 cmp     r13, rsi
.text:000000000000450C                 jbe     short loc_4514
.text:000000000000450E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004514
.text:0000000000004514 loc_4514:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000004514                 add     r15, 3
.text:0000000000004518                 mov     r8d, eax
.text:000000000000451B
.text:000000000000451B loc_451B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000451B                 cmp     r13, r15
.text:000000000000451E                 jbe     short loc_4525
.text:0000000000004520                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004525
.text:0000000000004525 loc_4525:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000004525                 lea     rax, [r15+1]
.text:0000000000004529                 cmp     r13, rax
.text:000000000000452C                 jbe     short loc_453B
.text:000000000000452E                 mov     eax, ebx
.text:0000000000004530                 shr     al, 6
.text:0000000000004533                 add     eax, 30h ; '0'
.text:0000000000004536                 mov     [r14+r15+1], al
.text:000000000000453B
.text:000000000000453B loc_453B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000453B                 lea     rax, [r15+2]
.text:000000000000453F                 cmp     r13, rax
.text:0000000000004542                 jbe     short loc_4554
.text:0000000000004544                 mov     eax, ebx
.text:0000000000004546                 shr     al, 3
.text:0000000000004549                 and     eax, 7
.text:000000000000454C                 add     eax, 30h ; '0'
.text:000000000000454F                 mov     [r14+r15+2], al
.text:0000000000004554
.text:0000000000004554 loc_4554:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000004554                 and     ebx, 7
.text:0000000000004557                 add     rbp, 1
.text:000000000000455B                 add     r15, 3
.text:000000000000455F                 add     ebx, 30h ; '0'
.text:0000000000004562                 cmp     rbp, rcx
.text:0000000000004565                 jnb     loc_3D50
.text:000000000000456B                 mov     esi, edx
.text:000000000000456D
.text:000000000000456D loc_456D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000456D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000456D                 cmp     r13, r15
.text:0000000000004570                 jbe     short loc_4576
.text:0000000000004572                 mov     [r14+r15], bl
.text:0000000000004576
.text:0000000000004576 loc_4576:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004576                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000457A                 add     r15, 1
.text:000000000000457E
.text:000000000000457E loc_457E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000457E                 test    dl, dl
.text:0000000000004580                 jnz     loc_44D0
.text:0000000000004586                 mov     eax, esi
.text:0000000000004588                 xor     eax, 1
.text:000000000000458B                 and     eax, r8d
.text:000000000000458E                 test    r10b, r10b
.text:0000000000004591                 jz      short loc_45A1
.text:0000000000004593                 cmp     r13, r15
.text:0000000000004596                 jbe     short loc_459D
.text:0000000000004598                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000459D
.text:000000000000459D loc_459D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000459D                 add     r15, 1
.text:00000000000045A1
.text:00000000000045A1 loc_45A1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000045A1                 add     rbp, 1
.text:00000000000045A5                 cmp     rbp, rcx
.text:00000000000045A8                 jnb     loc_3D2C
.text:00000000000045AE                 test    al, al
.text:00000000000045B0                 jz      loc_49AE
.text:00000000000045B6                 cmp     r13, r15
.text:00000000000045B9                 jbe     short loc_45C0
.text:00000000000045BB                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000045C0
.text:00000000000045C0 loc_45C0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000045C0                 lea     rax, [r15+1]
.text:00000000000045C4                 cmp     r13, rax
.text:00000000000045C7                 jbe     short loc_45CF
.text:00000000000045C9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000045CF
.text:00000000000045CF loc_45CF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000045CF                 add     r15, 2
.text:00000000000045D3                 xor     r10d, r10d
.text:00000000000045D6                 xor     r8d, r8d
.text:00000000000045D9                 jmp     short loc_456D
.text:00000000000045D9 ; ---------------------------------------------------------------------------
.text:00000000000045DB                 align 20h
.text:00000000000045E0
.text:00000000000045E0 loc_45E0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000045E0                 cmp     r15, 1
.text:00000000000045E4                 jz      loc_4449
.text:00000000000045EA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000045EF                 lea     rcx, [rdi+r15]
.text:00000000000045F3                 lea     rdx, [rdi+r14+1]
.text:00000000000045F8                 lea     r8, [rcx+r14]
.text:00000000000045FC                 jmp     short loc_460D
.text:00000000000045FC ; ---------------------------------------------------------------------------
.text:00000000000045FE                 align 20h
.text:0000000000004600
.text:0000000000004600 loc_4600:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000004600                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000004600                 add     rdx, 1
.text:0000000000004604                 cmp     r8, rdx
.text:0000000000004607                 jz      loc_4449
.text:000000000000460D
.text:000000000000460D loc_460D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000460D                 movzx   ecx, byte ptr [rdx]
.text:0000000000004610                 sub     ecx, 5Bh ; '['
.text:0000000000004613                 cmp     cl, 21h ; '!'
.text:0000000000004616                 ja      short loc_4600
.text:0000000000004618                 mov     esi, 1
.text:000000000000461D                 shl     rsi, cl
.text:0000000000004620                 mov     rcx, rsi
.text:0000000000004623                 mov     rsi, 20000002Bh
.text:000000000000462D                 test    rcx, rsi
.text:0000000000004630                 jz      short loc_4600
.text:0000000000004632                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004637                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000463C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004641                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004649
.text:0000000000004649 loc_4649:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004649                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004649                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000464E                 jz      short loc_4660
.text:0000000000004650                 test    al, al
.text:0000000000004652                 mov     eax, 4
.text:0000000000004657                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000465C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004660
.text:0000000000004660 loc_4660:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004660                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004660                 sub     rsp, 8
.text:0000000000004664                 mov     rcx, rbp
.text:0000000000004667                 mov     rsi, r13
.text:000000000000466A                 push    [rsp+0F0h+var_88]
.text:000000000000466E                 push    [rsp+0F8h+var_80]
.text:0000000000004672                 mov     rdi, r14
.text:0000000000004675                 push    0
.text:0000000000004677                 mov     r9d, [rsp+108h+var_70]
.text:000000000000467F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004684                 mov     rdx, [rsp+108h+s]
.text:0000000000004689                 and     r9d, 0FFFFFFFDh
.text:000000000000468D                 call    quotearg_buffer_restyled
.text:0000000000004692                 add     rsp, 20h
.text:0000000000004696                 mov     r15, rax
.text:0000000000004699
.text:0000000000004699 loc_4699:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004699                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004699                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000046A1                 xor     rbx, fs:28h
.text:00000000000046AA                 mov     rax, r15
.text:00000000000046AD                 jnz     loc_4CB3
.text:00000000000046B3                 add     rsp, 0B8h
.text:00000000000046BA                 pop     rbx
.text:00000000000046BB                 pop     rbp
.text:00000000000046BC                 pop     r12
.text:00000000000046BE                 pop     r13
.text:00000000000046C0                 pop     r14
.text:00000000000046C2                 pop     r15
.text:00000000000046C4                 retn
.text:00000000000046C4 ; ---------------------------------------------------------------------------
.text:00000000000046C5                 align 8
.text:00000000000046C8
.text:00000000000046C8 loc_46C8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000046C8                 mov     rbp, r11
.text:00000000000046CB                 jmp     loc_4649
.text:00000000000046D0 ; ---------------------------------------------------------------------------
.text:00000000000046D0
.text:00000000000046D0 loc_46D0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:00000000000046D0                                         ; quotearg_buffer_restyled+81C↑j
.text:00000000000046D0                 cmp     r13, r15
.text:00000000000046D3                 jbe     short loc_46DA
.text:00000000000046D5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000046DA
.text:00000000000046DA loc_46DA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:00000000000046DA                 lea     rax, [r15+1]
.text:00000000000046DE                 cmp     r13, rax
.text:00000000000046E1                 jbe     short loc_46E9
.text:00000000000046E3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000046E9
.text:00000000000046E9 loc_46E9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000046E9                 lea     rax, [r15+2]
.text:00000000000046ED                 cmp     r13, rax
.text:00000000000046F0                 jbe     loc_4CE2
.text:00000000000046F6                 mov     rdx, r13
.text:00000000000046F9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000046FF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004704                 jmp     loc_42E2
.text:0000000000004709 ; ---------------------------------------------------------------------------
.text:0000000000004709
.text:0000000000004709 loc_4709:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000004709                 mov     eax, r12d
.text:000000000000470C                 mov     ebx, 30h ; '0'
.text:0000000000004711                 xor     r12d, r12d
.text:0000000000004714                 jmp     loc_3D19
.text:0000000000004719 ; ---------------------------------------------------------------------------
.text:0000000000004719
.text:0000000000004719 loc_4719:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004719                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000471F                 jmp     loc_40E9
.text:0000000000004724 ; ---------------------------------------------------------------------------
.text:0000000000004724
.text:0000000000004724 loc_4724:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004724                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:0000000000004724                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004726                 jnz     loc_3B53        ; jumptable 00000000000121F1 case 1
.text:000000000000472C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004731
.text:0000000000004731 loc_4731:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004731                 test    r13, r13
.text:0000000000004734                 jnz     loc_4CCA
.text:000000000000473A                 lea     rax, asc_B225   ; "'"
.text:0000000000004741                 mov     [rsp+0E8h+var_98], 0
.text:000000000000474A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000474F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004754                 xor     r12d, r12d
.text:0000000000004757                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000475C                 mov     [rsp+0E8h+n], 1
.text:0000000000004765                 mov     [rsp+0E8h+s2], rax
.text:000000000000476A                 mov     r15d, 1
.text:0000000000004770                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004778                 jmp     loc_3B93
.text:0000000000004778 ; ---------------------------------------------------------------------------
.text:000000000000477D                 align 20h
.text:0000000000004780
.text:0000000000004780 loc_4780:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004780                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:0000000000004780                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004782                 jnz     loc_4B7D
.text:0000000000004788                 test    r13, r13
.text:000000000000478B                 jz      loc_49B6
.text:0000000000004791                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004795                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000479A                 xor     r12d, r12d
.text:000000000000479D                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000047A2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000047AB
.text:00000000000047AB loc_47AB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000047AB                 lea     rax, unk_B223
.text:00000000000047B2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000047B7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000047BC                 mov     [rsp+0E8h+n], 1
.text:00000000000047C5                 mov     r15d, 1
.text:00000000000047CB                 mov     [rsp+0E8h+s2], rax
.text:00000000000047D0                 jmp     loc_3B93
.text:00000000000047D5 ; ---------------------------------------------------------------------------
.text:00000000000047D5
.text:00000000000047D5 loc_47D5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000047D5                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:00000000000047D5                 lea     rax, unk_B223   ; jumptable 00000000000121F1 case 6
.text:00000000000047DC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000047E1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000047E6                 xor     r12d, r12d
.text:00000000000047E9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000047F2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000047F7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000047FC                 mov     [rsp+0E8h+n], 1
.text:0000000000004805                 xor     r15d, r15d
.text:0000000000004808                 mov     [rsp+0E8h+s2], rax
.text:000000000000480D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004815                 jmp     loc_3B93
.text:000000000000481A ; ---------------------------------------------------------------------------
.text:000000000000481A
.text:000000000000481A loc_481A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000481A                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:000000000000481A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000481F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004824                 xor     r12d, r12d
.text:0000000000004827                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004830                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004835                 xor     r15d, r15d
.text:0000000000004838                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000483D                 mov     [rsp+0E8h+n], 0
.text:0000000000004846                 mov     [rsp+0E8h+s2], 0
.text:000000000000484F                 jmp     loc_3B93
.text:0000000000004854 ; ---------------------------------------------------------------------------
.text:0000000000004854
.text:0000000000004854 loc_4854:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004854                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:0000000000004854                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004859                 jz      short loc_48B1
.text:000000000000485B                 lea     rsi, asc_B227   ; "`"
.text:0000000000004862                 xor     edi, edi        ; domainname
.text:0000000000004864                 mov     edx, 5          ; category
.text:0000000000004869                 call    _dcgettext
.text:000000000000486E                 mov     rcx, rax
.text:0000000000004871                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004876                 lea     rax, asc_B227   ; "`"
.text:000000000000487D                 cmp     rcx, rax
.text:0000000000004880                 jz      loc_4C1E
.text:0000000000004886
.text:0000000000004886 loc_4886:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004886                 lea     rsi, asc_B225   ; "'"
.text:000000000000488D                 xor     edi, edi        ; domainname
.text:000000000000488F                 mov     edx, 5          ; category
.text:0000000000004894                 call    _dcgettext
.text:0000000000004899                 mov     rcx, rax
.text:000000000000489C                 mov     [rsp+0E8h+var_88], rax
.text:00000000000048A1                 lea     rax, asc_B225   ; "'"
.text:00000000000048A8                 cmp     rcx, rax
.text:00000000000048AB                 jz      loc_4C34
.text:00000000000048B1
.text:00000000000048B1 loc_48B1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000048B1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000048B1                 xor     r15d, r15d
.text:00000000000048B4                 test    ebx, ebx
.text:00000000000048B6                 jz      loc_4A7D
.text:00000000000048BC
.text:00000000000048BC loc_48BC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000048BC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000048BC                 test    ebx, ebx
.text:00000000000048BE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000048C3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000048C8                 xor     r12d, r12d
.text:00000000000048CB                 mov     rdi, rbx        ; s
.text:00000000000048CE                 call    _strlen
.text:00000000000048D3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000048D8                 mov     [rsp+0E8h+n], rax
.text:00000000000048DD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000048E2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000048E7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000048F0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000048F5                 jmp     loc_3B93
.text:00000000000048FA ; ---------------------------------------------------------------------------
.text:00000000000048FA
.text:00000000000048FA loc_48FA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000048FA                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:00000000000048FA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000048FF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004904                 xor     r12d, r12d
.text:0000000000004907                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004910                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004915                 xor     r15d, r15d
.text:0000000000004918                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000491D                 mov     [rsp+0E8h+n], 0
.text:0000000000004926                 mov     [rsp+0E8h+s2], 0
.text:000000000000492F                 jmp     loc_3B93
.text:0000000000004934 ; ---------------------------------------------------------------------------
.text:0000000000004934
.text:0000000000004934 loc_4934:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004934                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:0000000000004934                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004939                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000493E                 xor     r12d, r12d
.text:0000000000004941                 mov     [rsp+0E8h+var_98], 0
.text:000000000000494A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000494F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004954                 jmp     loc_3B73
.text:0000000000004959 ; ---------------------------------------------------------------------------
.text:0000000000004959
.text:0000000000004959 loc_4959:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004959                 cmp     r13, r15
.text:000000000000495C                 jbe     short loc_4963
.text:000000000000495E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004963
.text:0000000000004963 loc_4963:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004963                 lea     rax, [rcx+2]
.text:0000000000004967                 cmp     r13, rax
.text:000000000000496A                 jbe     short loc_4972
.text:000000000000496C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004972
.text:0000000000004972 loc_4972:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004972                 mov     eax, r12d
.text:0000000000004975                 lea     r15, [rcx+3]
.text:0000000000004979                 xor     r12d, r12d
.text:000000000000497C                 mov     ebx, 30h ; '0'
.text:0000000000004981                 jmp     loc_3CE8
.text:0000000000004981 ; ---------------------------------------------------------------------------
.text:0000000000004986                 align 10h
.text:0000000000004990
.text:0000000000004990 loc_4990:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004990                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004995                 mov     rbp, r11
.text:0000000000004998                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000499C                 jmp     loc_4649
.text:00000000000049A1 ; ---------------------------------------------------------------------------
.text:00000000000049A1
.text:00000000000049A1 loc_49A1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000049A1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000049A6                 xor     r12d, r12d
.text:00000000000049A9                 jmp     loc_44B0
.text:00000000000049AE ; ---------------------------------------------------------------------------
.text:00000000000049AE
.text:00000000000049AE loc_49AE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000049AE                 xor     r10d, r10d
.text:00000000000049B1                 jmp     loc_456D
.text:00000000000049B6 ; ---------------------------------------------------------------------------
.text:00000000000049B6
.text:00000000000049B6 loc_49B6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000049B6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000049BF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000049C4                 xor     r12d, r12d
.text:00000000000049C7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000049CC                 jmp     loc_47AB
.text:00000000000049D1 ; ---------------------------------------------------------------------------
.text:00000000000049D1
.text:00000000000049D1 loc_49D1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000049D1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000049D6                 mov     rsi, r14
.text:00000000000049D9                 mov     rcx, r13
.text:00000000000049DC                 mov     rax, rbx
.text:00000000000049DF                 mov     rdi, rbx
.text:00000000000049E2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000049E8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000049ED                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000049F5                 cmp     rsi, r11
.text:00000000000049F8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000049FE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004A06                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004A0B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004A10                 jnb     short loc_4A38
.text:0000000000004A12                 cmp     byte ptr [rcx], 0
.text:0000000000004A15                 jnz     short loc_4A27
.text:0000000000004A17                 jmp     short loc_4A38
.text:0000000000004A17 ; ---------------------------------------------------------------------------
.text:0000000000004A19                 align 20h
.text:0000000000004A20
.text:0000000000004A20 loc_4A20:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004A20                 cmp     byte ptr [r9+rax], 0
.text:0000000000004A25                 jz      short loc_4A35
.text:0000000000004A27
.text:0000000000004A27 loc_4A27:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004A27                 add     rax, 1
.text:0000000000004A2B                 lea     rdx, [rbp+rax+0]
.text:0000000000004A30                 cmp     r11, rdx
.text:0000000000004A33                 ja      short loc_4A20
.text:0000000000004A35
.text:0000000000004A35 loc_4A35:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004A35                 mov     rdi, rax
.text:0000000000004A38
.text:0000000000004A38 loc_4A38:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004A38                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004A38                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004A3D                 xor     r12d, r12d
.text:0000000000004A40                 jmp     loc_44A6
.text:0000000000004A45 ; ---------------------------------------------------------------------------
.text:0000000000004A45
.text:0000000000004A45 loc_4A45:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004A45                 mov     rdi, rbx
.text:0000000000004A48                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004A4E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004A53                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004A59                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004A61                 xor     r12d, r12d
.text:0000000000004A64                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004A69                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004A6E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004A73                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004A78                 jmp     loc_44A6
.text:0000000000004A7D ; ---------------------------------------------------------------------------
.text:0000000000004A7D
.text:0000000000004A7D loc_4A7D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000004A7D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000004A82                 movzx   eax, byte ptr [rdx]
.text:0000000000004A85                 test    al, al
.text:0000000000004A87                 jz      loc_48BC
.text:0000000000004A8D                 nop     dword ptr [rax]
.text:0000000000004A90
.text:0000000000004A90 loc_4A90:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004A90                 cmp     r13, r15
.text:0000000000004A93                 jbe     short loc_4A99
.text:0000000000004A95                 mov     [r14+r15], al
.text:0000000000004A99
.text:0000000000004A99 loc_4A99:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004A99                 add     r15, 1
.text:0000000000004A9D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000004AA2                 test    al, al
.text:0000000000004AA4                 jnz     short loc_4A90
.text:0000000000004AA6                 jmp     loc_48BC
.text:0000000000004AAB ; ---------------------------------------------------------------------------
.text:0000000000004AAB
.text:0000000000004AAB loc_4AAB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000004AAB                 mov     eax, edx
.text:0000000000004AAD                 jmp     loc_4007
.text:0000000000004AB2 ; ---------------------------------------------------------------------------
.text:0000000000004AB2
.text:0000000000004AB2 loc_4AB2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000004AB2                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000004AB6                 cmp     bl, 3Eh ; '>'
.text:0000000000004AB9                 ja      loc_4330
.text:0000000000004ABF                 mov     rax, 7000A38200000000h
.text:0000000000004AC9                 bt      rax, rbx
.text:0000000000004ACD                 jnb     loc_4330
.text:0000000000004AD3                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004AD8                 jnz     loc_4CC2
.text:0000000000004ADE                 cmp     r13, r15
.text:0000000000004AE1                 jbe     short loc_4AE8
.text:0000000000004AE3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000004AE8
.text:0000000000004AE8 loc_4AE8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000004AE8                 lea     rax, [r15+1]
.text:0000000000004AEC                 cmp     r13, rax
.text:0000000000004AEF                 jbe     short loc_4AF7
.text:0000000000004AF1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000004AF7
.text:0000000000004AF7 loc_4AF7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000004AF7                 lea     rax, [r15+2]
.text:0000000000004AFB                 cmp     r13, rax
.text:0000000000004AFE                 jbe     short loc_4B06
.text:0000000000004B00                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000004B06
.text:0000000000004B06 loc_4B06:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000004B06                 lea     rax, [r15+3]
.text:0000000000004B0A                 cmp     r13, rax
.text:0000000000004B0D                 jbe     short loc_4B15
.text:0000000000004B0F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004B15
.text:0000000000004B15 loc_4B15:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004B15                 add     r15, 4
.text:0000000000004B19                 xor     edx, edx
.text:0000000000004B1B                 xor     r12d, r12d
.text:0000000000004B1E                 xor     eax, eax
.text:0000000000004B20                 mov     rbp, rcx
.text:0000000000004B23                 jmp     loc_3CE8
.text:0000000000004B28 ; ---------------------------------------------------------------------------
.text:0000000000004B28
.text:0000000000004B28 loc_4B28:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004B28                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:0000000000004B28                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000004B2A                 jz      loc_4CB8
.text:0000000000004B30                 lea     rax, asc_B225   ; "'"
.text:0000000000004B37                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004B3C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004B41                 xor     r12d, r12d
.text:0000000000004B44                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004B4D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004B52                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004B57                 mov     [rsp+0E8h+n], 1
.text:0000000000004B60                 xor     r15d, r15d
.text:0000000000004B63                 mov     [rsp+0E8h+s2], rax
.text:0000000000004B68                 jmp     loc_3B93
.text:0000000000004B68 ; ---------------------------------------------------------------------------
.text:0000000000004B6D                 align 10h
.text:0000000000004B70
.text:0000000000004B70 loc_4B70:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004B70                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004B70                 mov     rbp, r11
.text:0000000000004B73                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004B78                 jmp     loc_4649
.text:0000000000004B7D ; ---------------------------------------------------------------------------
.text:0000000000004B7D
.text:0000000000004B7D loc_4B7D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000004B7D                 lea     rax, unk_B223
.text:0000000000004B84                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004B89                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004B8E                 xor     r12d, r12d
.text:0000000000004B91                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004B9A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004B9F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004BA4                 mov     [rsp+0E8h+n], 1
.text:0000000000004BAD                 xor     r15d, r15d
.text:0000000000004BB0                 mov     [rsp+0E8h+s2], rax
.text:0000000000004BB5                 jmp     loc_3B93
.text:0000000000004BBA ; ---------------------------------------------------------------------------
.text:0000000000004BBA
.text:0000000000004BBA loc_4BBA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000004BBA                 mov     eax, edx
.text:0000000000004BBC
.text:0000000000004BBC loc_4BBC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000004BBC                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000004BBC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004BC1                 test    rbx, rbx
.text:0000000000004BC4                 jz      short loc_4BF2
.text:0000000000004BC6                 test    al, al
.text:0000000000004BC8                 jz      short loc_4BF2
.text:0000000000004BCA                 movzx   ecx, byte ptr [rbx]
.text:0000000000004BCD                 mov     rax, rbx
.text:0000000000004BD0                 test    cl, cl
.text:0000000000004BD2                 jz      short loc_4BF2
.text:0000000000004BD4                 mov     rdx, r15
.text:0000000000004BD7                 sub     rax, r15
.text:0000000000004BDA
.text:0000000000004BDA loc_4BDA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000004BDA                 cmp     r13, rdx
.text:0000000000004BDD                 jbe     short loc_4BE3
.text:0000000000004BDF                 mov     [r14+rdx], cl
.text:0000000000004BE3
.text:0000000000004BE3 loc_4BE3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004BE3                 add     rdx, 1
.text:0000000000004BE7                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000004BEB                 test    cl, cl
.text:0000000000004BED                 jnz     short loc_4BDA
.text:0000000000004BEF                 mov     r15, rdx
.text:0000000000004BF2
.text:0000000000004BF2 loc_4BF2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000004BF2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000004BF2                 cmp     r13, r15
.text:0000000000004BF5                 jbe     loc_4699
.text:0000000000004BFB                 mov     byte ptr [r14+r15], 0
.text:0000000000004C00                 jmp     loc_4699
.text:0000000000004C05 ; ---------------------------------------------------------------------------
.text:0000000000004C05
.text:0000000000004C05 loc_4C05:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004C05                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004C0A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004C0F                 mov     rbp, r11
.text:0000000000004C12                 setz    al
.text:0000000000004C15                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004C19                 jmp     loc_4649
.text:0000000000004C1E ; ---------------------------------------------------------------------------
.text:0000000000004C1E
.text:0000000000004C1E loc_4C1E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000004C1E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004C22                 mov     rdi, rcx
.text:0000000000004C25                 call    gettext_quote
.text:0000000000004C2A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004C2F                 jmp     loc_4886
.text:0000000000004C34 ; ---------------------------------------------------------------------------
.text:0000000000004C34
.text:0000000000004C34 loc_4C34:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004C34                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004C38                 mov     rdi, rcx
.text:0000000000004C3B                 call    gettext_quote
.text:0000000000004C40                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004C45                 jmp     loc_48B1
.text:0000000000004C4A ; ---------------------------------------------------------------------------
.text:0000000000004C4A
.text:0000000000004C4A loc_4C4A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000004C4A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004C4F                 mov     rbp, r11
.text:0000000000004C52                 mov     eax, edx
.text:0000000000004C54                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004C58                 jmp     loc_4649
.text:0000000000004C5D ; ---------------------------------------------------------------------------
.text:0000000000004C5D
.text:0000000000004C5D loc_4C5D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000004C5D                 sub     rsp, 8
.text:0000000000004C61                 mov     r8d, 5
.text:0000000000004C67                 mov     rcx, r11
.text:0000000000004C6A                 push    [rsp+0F0h+var_88]
.text:0000000000004C6E                 push    [rsp+0F8h+var_80]
.text:0000000000004C72                 mov     rdi, r14
.text:0000000000004C75                 push    [rsp+100h+var_C8]
.text:0000000000004C79                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004C81                 mov     rdx, [rsp+108h+s]
.text:0000000000004C86                 mov     rsi, [rsp+108h+var_98]
.text:0000000000004C8B                 call    quotearg_buffer_restyled
.text:0000000000004C90                 add     rsp, 20h
.text:0000000000004C94                 mov     r15, rax
.text:0000000000004C97                 jmp     loc_4699
.text:0000000000004C9C ; ---------------------------------------------------------------------------
.text:0000000000004C9C
.text:0000000000004C9C loc_4C9C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000004C9C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004CA1                 jmp     loc_4BBC
.text:0000000000004CA6 ; ---------------------------------------------------------------------------
.text:0000000000004CA6
.text:0000000000004CA6 loc_4CA6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004CA6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004CAE                 jmp     loc_4649
.text:0000000000004CB3 ; ---------------------------------------------------------------------------
.text:0000000000004CB3
.text:0000000000004CB3 loc_4CB3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004CB3                 call    ___stack_chk_fail
.text:0000000000004CB8 ; ---------------------------------------------------------------------------
.text:0000000000004CB8
.text:0000000000004CB8 loc_4CB8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004CB8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004CBD                 jmp     loc_4731
.text:0000000000004CC2 ; ---------------------------------------------------------------------------
.text:0000000000004CC2
.text:0000000000004CC2 loc_4CC2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004CC2                 mov     rbp, r11
.text:0000000000004CC5                 jmp     loc_4660
.text:0000000000004CCA ; ---------------------------------------------------------------------------
.text:0000000000004CCA
.text:0000000000004CCA loc_4CCA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000004CCA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004CCF                 xor     eax, eax
.text:0000000000004CD1                 xor     r12d, r12d
.text:0000000000004CD4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004CDD                 jmp     loc_4284
.text:0000000000004CE2 ; ---------------------------------------------------------------------------
.text:0000000000004CE2
.text:0000000000004CE2 loc_4CE2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004CE2                 mov     rdx, r13
.text:0000000000004CE5                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004CEA                 jmp     loc_42E2
.text:0000000000004CEF ; ---------------------------------------------------------------------------
.text:0000000000004CEF
.text:0000000000004CEF def_3B51:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000004CEF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000004CEF ; } // starts at 3AC0
.text:0000000000004CEF quotearg_buffer_restyled endp
.text:0000000000004CEF
.text:0000000000004CEF ; ---------------------------------------------------------------------------
.text:0000000000004CF4                 align 20h
.text:0000000000004D00
.text:0000000000004D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D00
.text:0000000000004D00
.text:0000000000004D00 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004D00                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004D00
.text:0000000000004D00 var_50          = qword ptr -50h
.text:0000000000004D00 var_48          = qword ptr -48h
.text:0000000000004D00 var_40          = dword ptr -40h
.text:0000000000004D00 var_3C          = dword ptr -3Ch
.text:0000000000004D00
.text:0000000000004D00 ; __unwind {
.text:0000000000004D00                 push    r15
.text:0000000000004D02                 push    r14
.text:0000000000004D04                 movsxd  r15, edi
.text:0000000000004D07                 push    r13
.text:0000000000004D09                 push    r12
.text:0000000000004D0B                 mov     r14, rdx
.text:0000000000004D0E                 push    rbp
.text:0000000000004D0F                 push    rbx
.text:0000000000004D10                 mov     rbp, rcx
.text:0000000000004D13                 sub     rsp, 28h
.text:0000000000004D17                 mov     [rsp+58h+var_50], rsi
.text:0000000000004D1C                 call    ___errno_location
.text:0000000000004D21                 mov     r13, rax
.text:0000000000004D24                 mov     eax, [rax]
.text:0000000000004D26                 test    r15d, r15d
.text:0000000000004D29                 mov     rbx, cs:slotvec
.text:0000000000004D30                 mov     [rsp+58h+var_40], eax
.text:0000000000004D34                 js      loc_4EA1
.text:0000000000004D3A                 cmp     cs:nslots, r15d
.text:0000000000004D41                 jg      short loc_4DA5
.text:0000000000004D43                 cmp     r15d, 7FFFFFFFh
.text:0000000000004D4A                 jz      loc_4EA6
.text:0000000000004D50                 lea     r12d, [r15+1]
.text:0000000000004D54                 lea     rax, slotvec0
.text:0000000000004D5B                 movsxd  rsi, r12d
.text:0000000000004D5E                 shl     rsi, 4
.text:0000000000004D62                 cmp     rbx, rax
.text:0000000000004D65                 jz      loc_4E80
.text:0000000000004D6B                 mov     rdi, rbx
.text:0000000000004D6E                 call    xrealloc
.text:0000000000004D73                 mov     rbx, rax
.text:0000000000004D76                 mov     cs:slotvec, rax
.text:0000000000004D7D
.text:0000000000004D7D loc_4D7D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000004D7D                 movsxd  rdi, cs:nslots
.text:0000000000004D84                 mov     edx, r12d
.text:0000000000004D87                 xor     esi, esi        ; c
.text:0000000000004D89                 sub     edx, edi
.text:0000000000004D8B                 shl     rdi, 4
.text:0000000000004D8F                 movsxd  rdx, edx
.text:0000000000004D92                 add     rdi, rbx        ; s
.text:0000000000004D95                 shl     rdx, 4          ; n
.text:0000000000004D99                 call    _memset
.text:0000000000004D9E                 mov     cs:nslots, r12d
.text:0000000000004DA5
.text:0000000000004DA5 loc_4DA5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004DA5                 mov     eax, [rbp+4]
.text:0000000000004DA8                 shl     r15, 4
.text:0000000000004DAC                 sub     rsp, 8
.text:0000000000004DB0                 add     rbx, r15
.text:0000000000004DB3                 lea     r15, [rbp+8]
.text:0000000000004DB7                 mov     r8d, [rbp+0]
.text:0000000000004DBB                 mov     r11, [rbx]
.text:0000000000004DBE                 mov     r12, [rbx+8]
.text:0000000000004DC2                 mov     rcx, r14
.text:0000000000004DC5                 or      eax, 1
.text:0000000000004DC8                 mov     [rsp+60h+var_3C], eax
.text:0000000000004DCC                 push    qword ptr [rbp+30h]
.text:0000000000004DCF                 mov     r9d, eax
.text:0000000000004DD2                 push    qword ptr [rbp+28h]
.text:0000000000004DD5                 push    r15
.text:0000000000004DD7                 mov     rsi, r11
.text:0000000000004DDA                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004DDF                 mov     rdi, r12
.text:0000000000004DE2                 mov     [rsp+78h+var_48], r11
.text:0000000000004DE7                 call    quotearg_buffer_restyled
.text:0000000000004DEC                 add     rsp, 20h
.text:0000000000004DF0                 mov     r11, [rsp+58h+var_48]
.text:0000000000004DF5                 cmp     r11, rax
.text:0000000000004DF8                 ja      short loc_4E61
.text:0000000000004DFA                 lea     rsi, [rax+1]
.text:0000000000004DFE                 lea     rax, slot0
.text:0000000000004E05                 cmp     r12, rax
.text:0000000000004E08                 mov     [rbx], rsi
.text:0000000000004E0B                 jz      short loc_4E1F
.text:0000000000004E0D                 mov     rdi, r12        ; ptr
.text:0000000000004E10                 mov     [rsp+58h+var_48], rsi
.text:0000000000004E15                 call    free
.text:0000000000004E1A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000004E1F
.text:0000000000004E1F loc_4E1F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000004E1F                 mov     rdi, rsi
.text:0000000000004E22                 mov     [rsp+58h+var_48], rsi
.text:0000000000004E27                 call    xmalloc
.text:0000000000004E2C                 sub     rsp, 8
.text:0000000000004E30                 mov     [rbx+8], rax
.text:0000000000004E34                 mov     r8d, [rbp+0]
.text:0000000000004E38                 push    qword ptr [rbp+30h]
.text:0000000000004E3B                 push    qword ptr [rbp+28h]
.text:0000000000004E3E                 mov     rcx, r14
.text:0000000000004E41                 push    r15
.text:0000000000004E43                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004E48                 mov     rdi, rax
.text:0000000000004E4B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004E50                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004E55                 mov     r12, rax
.text:0000000000004E58                 call    quotearg_buffer_restyled
.text:0000000000004E5D                 add     rsp, 20h
.text:0000000000004E61
.text:0000000000004E61 loc_4E61:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004E61                 mov     eax, [rsp+58h+var_40]
.text:0000000000004E65                 mov     [r13+0], eax
.text:0000000000004E69                 add     rsp, 28h
.text:0000000000004E6D                 mov     rax, r12
.text:0000000000004E70                 pop     rbx
.text:0000000000004E71                 pop     rbp
.text:0000000000004E72                 pop     r12
.text:0000000000004E74                 pop     r13
.text:0000000000004E76                 pop     r14
.text:0000000000004E78                 pop     r15
.text:0000000000004E7A                 retn
.text:0000000000004E7A ; ---------------------------------------------------------------------------
.text:0000000000004E7B                 align 20h
.text:0000000000004E80
.text:0000000000004E80 loc_4E80:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004E80                 xor     edi, edi
.text:0000000000004E82                 call    xrealloc
.text:0000000000004E87                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000004E8F                 mov     rbx, rax
.text:0000000000004E92                 mov     cs:slotvec, rax
.text:0000000000004E99                 movups  xmmword ptr [rax], xmm0
.text:0000000000004E9C                 jmp     loc_4D7D
.text:0000000000004EA1 ; ---------------------------------------------------------------------------
.text:0000000000004EA1
.text:0000000000004EA1 loc_4EA1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004EA1                 call    _abort
.text:0000000000004EA6 ; ---------------------------------------------------------------------------
.text:0000000000004EA6
.text:0000000000004EA6 loc_4EA6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004EA6                 call    xalloc_die
.text:0000000000004EA6 ; } // starts at 4D00
.text:0000000000004EA6 quotearg_n_options endp
.text:0000000000004EA6
.text:0000000000004EA6 ; ---------------------------------------------------------------------------
.text:0000000000004EAB                 align 10h
.text:0000000000004EB0
.text:0000000000004EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EB0
.text:0000000000004EB0 ; Attributes: info_from_lumina
.text:0000000000004EB0
.text:0000000000004EB0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004EB0                 public clone_quoting_options
.text:0000000000004EB0 clone_quoting_options proc near
.text:0000000000004EB0 ; __unwind {
.text:0000000000004EB0                 push    r12
.text:0000000000004EB2                 push    rbp
.text:0000000000004EB3                 push    rbx
.text:0000000000004EB4                 mov     rbx, rdi
.text:0000000000004EB7                 call    ___errno_location
.text:0000000000004EBC                 mov     r12d, [rax]
.text:0000000000004EBF                 mov     rbp, rax
.text:0000000000004EC2                 lea     rax, default_quoting_options
.text:0000000000004EC9                 test    rbx, rbx
.text:0000000000004ECC                 mov     esi, 38h ; '8'  ; n
.text:0000000000004ED1                 cmovz   rbx, rax
.text:0000000000004ED5                 mov     rdi, rbx        ; src
.text:0000000000004ED8                 call    xmemdup
.text:0000000000004EDD                 mov     [rbp+0], r12d
.text:0000000000004EE1                 pop     rbx
.text:0000000000004EE2                 pop     rbp
.text:0000000000004EE3                 pop     r12
.text:0000000000004EE5                 retn
.text:0000000000004EE5 ; } // starts at 4EB0
.text:0000000000004EE5 clone_quoting_options endp
.text:0000000000004EE5
.text:0000000000004EE5 ; ---------------------------------------------------------------------------
.text:0000000000004EE6                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EF0
.text:0000000000004EF0
.text:0000000000004EF0                 public get_quoting_style
.text:0000000000004EF0 get_quoting_style proc near
.text:0000000000004EF0 ; __unwind {
.text:0000000000004EF0                 lea     rax, default_quoting_options
.text:0000000000004EF7                 test    rdi, rdi
.text:0000000000004EFA                 cmovz   rdi, rax
.text:0000000000004EFE                 mov     eax, [rdi]
.text:0000000000004F00                 retn
.text:0000000000004F00 ; } // starts at 4EF0
.text:0000000000004F00 get_quoting_style endp
.text:0000000000004F00
.text:0000000000004F00 ; ---------------------------------------------------------------------------
.text:0000000000004F01                 align 10h
.text:0000000000004F10
.text:0000000000004F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F10
.text:0000000000004F10
.text:0000000000004F10                 public set_quoting_style
.text:0000000000004F10 set_quoting_style proc near
.text:0000000000004F10 ; __unwind {
.text:0000000000004F10                 lea     rax, default_quoting_options
.text:0000000000004F17                 test    rdi, rdi
.text:0000000000004F1A                 cmovz   rdi, rax
.text:0000000000004F1E                 mov     [rdi], esi
.text:0000000000004F20                 retn
.text:0000000000004F20 ; } // starts at 4F10
.text:0000000000004F20 set_quoting_style endp
.text:0000000000004F20
.text:0000000000004F20 ; ---------------------------------------------------------------------------
.text:0000000000004F21                 align 10h
.text:0000000000004F30
.text:0000000000004F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F30
.text:0000000000004F30 ; Attributes: info_from_lumina
.text:0000000000004F30
.text:0000000000004F30 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004F30                 public set_char_quoting
.text:0000000000004F30 set_char_quoting proc near
.text:0000000000004F30 ; __unwind {
.text:0000000000004F30                 lea     rax, default_quoting_options
.text:0000000000004F37                 test    rdi, rdi
.text:0000000000004F3A                 mov     ecx, esi
.text:0000000000004F3C                 cmovz   rdi, rax
.text:0000000000004F40                 mov     eax, esi
.text:0000000000004F42                 and     ecx, 1Fh
.text:0000000000004F45                 shr     al, 5
.text:0000000000004F48                 movzx   eax, al
.text:0000000000004F4B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004F50                 mov     esi, [rdi]
.text:0000000000004F52                 mov     eax, esi
.text:0000000000004F54                 shr     eax, cl
.text:0000000000004F56                 xor     edx, eax
.text:0000000000004F58                 and     eax, 1
.text:0000000000004F5B                 and     edx, 1
.text:0000000000004F5E                 shl     edx, cl
.text:0000000000004F60                 xor     edx, esi
.text:0000000000004F62                 mov     [rdi], edx
.text:0000000000004F64                 retn
.text:0000000000004F64 ; } // starts at 4F30
.text:0000000000004F64 set_char_quoting endp
.text:0000000000004F64
.text:0000000000004F64 ; ---------------------------------------------------------------------------
.text:0000000000004F65                 align 10h
.text:0000000000004F70
.text:0000000000004F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F70
.text:0000000000004F70
.text:0000000000004F70                 public set_quoting_flags
.text:0000000000004F70 set_quoting_flags proc near
.text:0000000000004F70 ; __unwind {
.text:0000000000004F70                 lea     rax, default_quoting_options
.text:0000000000004F77                 test    rdi, rdi
.text:0000000000004F7A                 cmovz   rdi, rax
.text:0000000000004F7E                 mov     eax, [rdi+4]
.text:0000000000004F81                 mov     [rdi+4], esi
.text:0000000000004F84                 retn
.text:0000000000004F84 ; } // starts at 4F70
.text:0000000000004F84 set_quoting_flags endp
.text:0000000000004F84
.text:0000000000004F84 ; ---------------------------------------------------------------------------
.text:0000000000004F85                 align 10h
.text:0000000000004F90
.text:0000000000004F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F90
.text:0000000000004F90 ; Attributes: info_from_lumina
.text:0000000000004F90
.text:0000000000004F90 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004F90                 public set_custom_quoting
.text:0000000000004F90 set_custom_quoting proc near
.text:0000000000004F90 ; __unwind {
.text:0000000000004F90                 lea     rax, default_quoting_options
.text:0000000000004F97                 test    rdi, rdi
.text:0000000000004F9A                 cmovz   rdi, rax
.text:0000000000004F9E                 test    rsi, rsi
.text:0000000000004FA1                 mov     dword ptr [rdi], 0Ah
.text:0000000000004FA7                 jz      short loc_4FB7
.text:0000000000004FA9                 test    rdx, rdx
.text:0000000000004FAC                 jz      short loc_4FB7
.text:0000000000004FAE                 mov     [rdi+28h], rsi
.text:0000000000004FB2                 mov     [rdi+30h], rdx
.text:0000000000004FB6                 retn
.text:0000000000004FB7 ; ---------------------------------------------------------------------------
.text:0000000000004FB7
.text:0000000000004FB7 loc_4FB7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004FB7                                         ; set_custom_quoting+1C↑j
.text:0000000000004FB7                 sub     rsp, 8
.text:0000000000004FBB                 call    _abort
.text:0000000000004FBB ; } // starts at 4F90
.text:0000000000004FBB set_custom_quoting endp
.text:0000000000004FBB
.text:0000000000004FC0
.text:0000000000004FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FC0
.text:0000000000004FC0 ; Attributes: info_from_lumina
.text:0000000000004FC0
.text:0000000000004FC0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004FC0                 public quotearg_buffer
.text:0000000000004FC0 quotearg_buffer proc near
.text:0000000000004FC0
.text:0000000000004FC0 var_40          = qword ptr -40h
.text:0000000000004FC0
.text:0000000000004FC0 ; __unwind {
.text:0000000000004FC0                 push    r15
.text:0000000000004FC2                 push    r14
.text:0000000000004FC4                 lea     rax, default_quoting_options
.text:0000000000004FCB                 push    r13
.text:0000000000004FCD                 push    r12
.text:0000000000004FCF                 mov     r13, rdi
.text:0000000000004FD2                 push    rbp
.text:0000000000004FD3                 push    rbx
.text:0000000000004FD4                 mov     rbx, r8
.text:0000000000004FD7                 mov     r14, rsi
.text:0000000000004FDA                 mov     r15, rdx
.text:0000000000004FDD                 sub     rsp, 18h
.text:0000000000004FE1                 test    r8, r8
.text:0000000000004FE4                 cmovz   rbx, rax
.text:0000000000004FE8                 mov     [rsp+48h+var_40], rcx
.text:0000000000004FED                 call    ___errno_location
.text:0000000000004FF2                 mov     r12d, [rax]
.text:0000000000004FF5                 mov     rbp, rax
.text:0000000000004FF8                 lea     rax, [rbx+8]
.text:0000000000004FFC                 sub     rsp, 8
.text:0000000000005000                 mov     r9d, [rbx+4]
.text:0000000000005004                 push    qword ptr [rbx+30h]
.text:0000000000005007                 mov     r8d, [rbx]
.text:000000000000500A                 push    qword ptr [rbx+28h]
.text:000000000000500D                 mov     rdx, r15
.text:0000000000005010                 push    rax
.text:0000000000005011                 mov     rcx, [rsp+68h+var_40]
.text:0000000000005016                 mov     rsi, r14
.text:0000000000005019                 mov     rdi, r13
.text:000000000000501C                 call    quotearg_buffer_restyled
.text:0000000000005021                 mov     [rbp+0], r12d
.text:0000000000005025                 add     rsp, 38h
.text:0000000000005029                 pop     rbx
.text:000000000000502A                 pop     rbp
.text:000000000000502B                 pop     r12
.text:000000000000502D                 pop     r13
.text:000000000000502F                 pop     r14
.text:0000000000005031                 pop     r15
.text:0000000000005033                 retn
.text:0000000000005033 ; } // starts at 4FC0
.text:0000000000005033 quotearg_buffer endp
.text:0000000000005033
.text:0000000000005033 ; ---------------------------------------------------------------------------
.text:0000000000005034                 align 20h
.text:0000000000005040
.text:0000000000005040 ; =============== S U B R O U T I N E =======================================
.text:0000000000005040
.text:0000000000005040 ; Attributes: info_from_lumina
.text:0000000000005040
.text:0000000000005040 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000005040                 public quotearg_alloc_mem
.text:0000000000005040 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000005040
.text:0000000000005040 var_5C          = dword ptr -5Ch
.text:0000000000005040 var_58          = qword ptr -58h
.text:0000000000005040 var_50          = qword ptr -50h
.text:0000000000005040 var_48          = qword ptr -48h
.text:0000000000005040 var_40          = qword ptr -40h
.text:0000000000005040
.text:0000000000005040 ; __unwind {
.text:0000000000005040                 push    r15
.text:0000000000005042                 push    r14
.text:0000000000005044                 lea     rax, default_quoting_options
.text:000000000000504B                 push    r13
.text:000000000000504D                 push    r12
.text:000000000000504F                 mov     r12, rdx
.text:0000000000005052                 push    rbp
.text:0000000000005053                 push    rbx
.text:0000000000005054                 mov     rbx, rcx
.text:0000000000005057                 mov     r14, rdi
.text:000000000000505A                 mov     r15, rsi
.text:000000000000505D                 sub     rsp, 38h
.text:0000000000005061                 test    rcx, rcx
.text:0000000000005064                 cmovz   rbx, rax
.text:0000000000005068                 xor     ebp, ebp
.text:000000000000506A                 call    ___errno_location
.text:000000000000506F                 test    r12, r12
.text:0000000000005072                 mov     r13, rax
.text:0000000000005075                 mov     eax, [rax]
.text:0000000000005077                 setz    bpl
.text:000000000000507B                 or      ebp, [rbx+4]
.text:000000000000507E                 lea     r10, [rbx+8]
.text:0000000000005082                 sub     rsp, 8
.text:0000000000005086                 mov     r8d, [rbx]
.text:0000000000005089                 mov     rcx, r15
.text:000000000000508C                 mov     [rsp+70h+var_5C], eax
.text:0000000000005090                 push    qword ptr [rbx+30h]
.text:0000000000005093                 mov     rdx, r14
.text:0000000000005096                 push    qword ptr [rbx+28h]
.text:0000000000005099                 push    r10
.text:000000000000509B                 xor     esi, esi
.text:000000000000509D                 mov     r9d, ebp
.text:00000000000050A0                 xor     edi, edi
.text:00000000000050A2                 mov     [rsp+88h+var_48], r10
.text:00000000000050A7                 call    quotearg_buffer_restyled
.text:00000000000050AC                 lea     rsi, [rax+1]
.text:00000000000050B0                 mov     [rsp+88h+var_40], rax
.text:00000000000050B5                 add     rsp, 20h
.text:00000000000050B9                 mov     rdi, rsi
.text:00000000000050BC                 mov     [rsp+68h+var_50], rsi
.text:00000000000050C1                 call    xmalloc
.text:00000000000050C6                 mov     [rsp+68h+var_58], rax
.text:00000000000050CB                 sub     rsp, 8
.text:00000000000050CF                 push    qword ptr [rbx+30h]
.text:00000000000050D2                 push    qword ptr [rbx+28h]
.text:00000000000050D5                 mov     r10, [rsp+80h+var_48]
.text:00000000000050DA                 mov     r9d, ebp
.text:00000000000050DD                 mov     r8d, [rbx]
.text:00000000000050E0                 mov     rcx, r15
.text:00000000000050E3                 mov     rdx, r14
.text:00000000000050E6                 mov     rdi, rax
.text:00000000000050E9                 push    r10
.text:00000000000050EB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000050F0                 call    quotearg_buffer_restyled
.text:00000000000050F5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000050F9                 add     rsp, 20h
.text:00000000000050FD                 test    r12, r12
.text:0000000000005100                 mov     [r13+0], eax
.text:0000000000005104                 jz      short loc_510F
.text:0000000000005106                 mov     r11, [rsp+68h+var_40]
.text:000000000000510B                 mov     [r12], r11
.text:000000000000510F
.text:000000000000510F loc_510F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000510F                 mov     rax, [rsp+68h+var_58]
.text:0000000000005114                 add     rsp, 38h
.text:0000000000005118                 pop     rbx
.text:0000000000005119                 pop     rbp
.text:000000000000511A                 pop     r12
.text:000000000000511C                 pop     r13
.text:000000000000511E                 pop     r14
.text:0000000000005120                 pop     r15
.text:0000000000005122                 retn
.text:0000000000005122 ; } // starts at 5040
.text:0000000000005122 quotearg_alloc_mem endp
.text:0000000000005122
.text:0000000000005122 ; ---------------------------------------------------------------------------
.text:0000000000005123                 align 10h
.text:0000000000005130
.text:0000000000005130 ; =============== S U B R O U T I N E =======================================
.text:0000000000005130
.text:0000000000005130
.text:0000000000005130                 public quotearg_alloc
.text:0000000000005130 quotearg_alloc  proc near
.text:0000000000005130 ; __unwind {
.text:0000000000005130                 mov     rcx, rdx
.text:0000000000005133                 xor     edx, edx
.text:0000000000005135                 jmp     quotearg_alloc_mem
.text:0000000000005135 ; } // starts at 5130
.text:0000000000005135 quotearg_alloc  endp
.text:0000000000005135
.text:0000000000005135 ; ---------------------------------------------------------------------------
.text:000000000000513A                 align 20h
.text:0000000000005140
.text:0000000000005140 ; =============== S U B R O U T I N E =======================================
.text:0000000000005140
.text:0000000000005140 ; Attributes: info_from_lumina
.text:0000000000005140
.text:0000000000005140 ; void __cdecl quotearg_free()
.text:0000000000005140                 public quotearg_free
.text:0000000000005140 quotearg_free   proc near
.text:0000000000005140 ; __unwind {
.text:0000000000005140                 mov     eax, cs:nslots
.text:0000000000005146                 push    r12
.text:0000000000005148                 mov     r12, cs:slotvec
.text:000000000000514F                 push    rbp
.text:0000000000005150                 push    rbx
.text:0000000000005151                 cmp     eax, 1
.text:0000000000005154                 jle     short loc_5181
.text:0000000000005156                 sub     eax, 2
.text:0000000000005159                 lea     rbx, [r12+18h]
.text:000000000000515E                 shl     rax, 4
.text:0000000000005162                 lea     rbp, [r12+rax+28h]
.text:0000000000005167                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005170
.text:0000000000005170 loc_5170:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000005170                 mov     rdi, [rbx]      ; ptr
.text:0000000000005173                 add     rbx, 10h
.text:0000000000005177                 call    free
.text:000000000000517C                 cmp     rbx, rbp
.text:000000000000517F                 jnz     short loc_5170
.text:0000000000005181
.text:0000000000005181 loc_5181:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000005181                 mov     rdi, [r12+8]    ; ptr
.text:0000000000005186                 lea     rbx, slot0
.text:000000000000518D                 cmp     rdi, rbx
.text:0000000000005190                 jz      short loc_51A9
.text:0000000000005192                 call    free
.text:0000000000005197                 mov     cs:slotvec0, 100h
.text:00000000000051A2                 mov     cs:off_20E078, rbx
.text:00000000000051A9
.text:00000000000051A9 loc_51A9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000051A9                 lea     rbx, slotvec0
.text:00000000000051B0                 cmp     r12, rbx
.text:00000000000051B3                 jz      short loc_51C4
.text:00000000000051B5                 mov     rdi, r12        ; ptr
.text:00000000000051B8                 call    free
.text:00000000000051BD                 mov     cs:slotvec, rbx
.text:00000000000051C4
.text:00000000000051C4 loc_51C4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000051C4                 pop     rbx
.text:00000000000051C5                 mov     cs:nslots, 1
.text:00000000000051CF                 pop     rbp
.text:00000000000051D0                 pop     r12
.text:00000000000051D2                 retn
.text:00000000000051D2 ; } // starts at 5140
.text:00000000000051D2 quotearg_free   endp
.text:00000000000051D2
.text:00000000000051D2 ; ---------------------------------------------------------------------------
.text:00000000000051D3                 align 20h
.text:00000000000051E0
.text:00000000000051E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051E0
.text:00000000000051E0
.text:00000000000051E0                 public quotearg_n
.text:00000000000051E0 quotearg_n      proc near
.text:00000000000051E0 ; __unwind {
.text:00000000000051E0                 lea     rcx, default_quoting_options
.text:00000000000051E7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000051EE                 jmp     quotearg_n_options
.text:00000000000051EE ; } // starts at 51E0
.text:00000000000051EE quotearg_n      endp
.text:00000000000051EE
.text:00000000000051EE ; ---------------------------------------------------------------------------
.text:00000000000051F3                 align 20h
.text:0000000000005200
.text:0000000000005200 ; =============== S U B R O U T I N E =======================================
.text:0000000000005200
.text:0000000000005200
.text:0000000000005200                 public quotearg_n_mem
.text:0000000000005200 quotearg_n_mem  proc near
.text:0000000000005200 ; __unwind {
.text:0000000000005200                 lea     rcx, default_quoting_options
.text:0000000000005207                 jmp     quotearg_n_options
.text:0000000000005207 ; } // starts at 5200
.text:0000000000005207 quotearg_n_mem  endp
.text:0000000000005207
.text:0000000000005207 ; ---------------------------------------------------------------------------
.text:000000000000520C                 align 10h
.text:0000000000005210
.text:0000000000005210 ; =============== S U B R O U T I N E =======================================
.text:0000000000005210
.text:0000000000005210
.text:0000000000005210                 public quotearg
.text:0000000000005210 quotearg        proc near
.text:0000000000005210 ; __unwind {
.text:0000000000005210                 lea     rcx, default_quoting_options
.text:0000000000005217                 mov     rsi, rdi
.text:000000000000521A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005221                 xor     edi, edi
.text:0000000000005223                 jmp     quotearg_n_options
.text:0000000000005223 ; } // starts at 5210
.text:0000000000005223 quotearg        endp
.text:0000000000005223
.text:0000000000005223 ; ---------------------------------------------------------------------------
.text:0000000000005228                 align 10h
.text:0000000000005230
.text:0000000000005230 ; =============== S U B R O U T I N E =======================================
.text:0000000000005230
.text:0000000000005230
.text:0000000000005230                 public quotearg_mem
.text:0000000000005230 quotearg_mem    proc near
.text:0000000000005230 ; __unwind {
.text:0000000000005230                 lea     rcx, default_quoting_options
.text:0000000000005237                 mov     rdx, rsi
.text:000000000000523A                 mov     rsi, rdi
.text:000000000000523D                 xor     edi, edi
.text:000000000000523F                 jmp     quotearg_n_options
.text:000000000000523F ; } // starts at 5230
.text:000000000000523F quotearg_mem    endp
.text:000000000000523F
.text:000000000000523F ; ---------------------------------------------------------------------------
.text:0000000000005244                 align 10h
.text:0000000000005250
.text:0000000000005250 ; =============== S U B R O U T I N E =======================================
.text:0000000000005250
.text:0000000000005250 ; Attributes: info_from_lumina
.text:0000000000005250
.text:0000000000005250 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000005250                 public quotearg_n_style
.text:0000000000005250 quotearg_n_style proc near              ; CODE XREF: change_file_owner+B62↑p
.text:0000000000005250                                         ; change_file_owner+B76↑p ...
.text:0000000000005250
.text:0000000000005250 var_48          = dword ptr -48h
.text:0000000000005250 var_44          = qword ptr -44h
.text:0000000000005250 var_3C          = qword ptr -3Ch
.text:0000000000005250 var_34          = qword ptr -34h
.text:0000000000005250 var_2C          = qword ptr -2Ch
.text:0000000000005250 var_24          = qword ptr -24h
.text:0000000000005250 var_1C          = qword ptr -1Ch
.text:0000000000005250 var_14          = dword ptr -14h
.text:0000000000005250 var_10          = qword ptr -10h
.text:0000000000005250
.text:0000000000005250 ; __unwind {
.text:0000000000005250                 sub     rsp, 48h
.text:0000000000005254                 mov     rax, rdx
.text:0000000000005257                 mov     rdx, fs:28h
.text:0000000000005260                 mov     [rsp+48h+var_10], rdx
.text:0000000000005265                 xor     edx, edx
.text:0000000000005267                 cmp     esi, 0Ah
.text:000000000000526A                 jz      short loc_52D4
.text:000000000000526C                 mov     [rsp+48h+var_48], esi
.text:000000000000526F                 mov     rcx, rsp
.text:0000000000005272                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005279                 mov     rsi, rax
.text:000000000000527C                 mov     [rsp+48h+var_44], 0
.text:0000000000005285                 mov     [rsp+48h+var_3C], 0
.text:000000000000528E                 mov     [rsp+48h+var_34], 0
.text:0000000000005297                 mov     [rsp+48h+var_2C], 0
.text:00000000000052A0                 mov     [rsp+48h+var_24], 0
.text:00000000000052A9                 mov     [rsp+48h+var_1C], 0
.text:00000000000052B2                 mov     [rsp+48h+var_14], 0
.text:00000000000052BA                 call    quotearg_n_options
.text:00000000000052BF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000052C4                 xor     rcx, fs:28h
.text:00000000000052CD                 jnz     short loc_52D9
.text:00000000000052CF                 add     rsp, 48h
.text:00000000000052D3                 retn
.text:00000000000052D4 ; ---------------------------------------------------------------------------
.text:00000000000052D4
.text:00000000000052D4 loc_52D4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000052D4                 call    _abort
.text:00000000000052D9 ; ---------------------------------------------------------------------------
.text:00000000000052D9
.text:00000000000052D9 loc_52D9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000052D9                 call    ___stack_chk_fail
.text:00000000000052D9 ; } // starts at 5250
.text:00000000000052D9 quotearg_n_style endp
.text:00000000000052D9
.text:00000000000052D9 ; ---------------------------------------------------------------------------
.text:00000000000052DE                 align 20h
.text:00000000000052E0
.text:00000000000052E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052E0
.text:00000000000052E0 ; Attributes: info_from_lumina
.text:00000000000052E0
.text:00000000000052E0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000052E0                 public quotearg_n_style_mem
.text:00000000000052E0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000052E0
.text:00000000000052E0 var_48          = dword ptr -48h
.text:00000000000052E0 var_44          = qword ptr -44h
.text:00000000000052E0 var_3C          = qword ptr -3Ch
.text:00000000000052E0 var_34          = qword ptr -34h
.text:00000000000052E0 var_2C          = qword ptr -2Ch
.text:00000000000052E0 var_24          = qword ptr -24h
.text:00000000000052E0 var_1C          = qword ptr -1Ch
.text:00000000000052E0 var_14          = dword ptr -14h
.text:00000000000052E0 var_10          = qword ptr -10h
.text:00000000000052E0
.text:00000000000052E0 ; __unwind {
.text:00000000000052E0                 sub     rsp, 48h
.text:00000000000052E4                 mov     rax, rdx
.text:00000000000052E7                 mov     rdx, rcx
.text:00000000000052EA                 mov     rcx, fs:28h
.text:00000000000052F3                 mov     [rsp+48h+var_10], rcx
.text:00000000000052F8                 xor     ecx, ecx
.text:00000000000052FA                 cmp     esi, 0Ah
.text:00000000000052FD                 jz      short loc_5360
.text:00000000000052FF                 mov     [rsp+48h+var_48], esi
.text:0000000000005302                 mov     rcx, rsp
.text:0000000000005305                 mov     rsi, rax
.text:0000000000005308                 mov     [rsp+48h+var_44], 0
.text:0000000000005311                 mov     [rsp+48h+var_3C], 0
.text:000000000000531A                 mov     [rsp+48h+var_34], 0
.text:0000000000005323                 mov     [rsp+48h+var_2C], 0
.text:000000000000532C                 mov     [rsp+48h+var_24], 0
.text:0000000000005335                 mov     [rsp+48h+var_1C], 0
.text:000000000000533E                 mov     [rsp+48h+var_14], 0
.text:0000000000005346                 call    quotearg_n_options
.text:000000000000534B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000005350                 xor     rdx, fs:28h
.text:0000000000005359                 jnz     short loc_5365
.text:000000000000535B                 add     rsp, 48h
.text:000000000000535F                 retn
.text:0000000000005360 ; ---------------------------------------------------------------------------
.text:0000000000005360
.text:0000000000005360 loc_5360:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000005360                 call    _abort
.text:0000000000005365 ; ---------------------------------------------------------------------------
.text:0000000000005365
.text:0000000000005365 loc_5365:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000005365                 call    ___stack_chk_fail
.text:0000000000005365 ; } // starts at 52E0
.text:0000000000005365 quotearg_n_style_mem endp
.text:0000000000005365
.text:0000000000005365 ; ---------------------------------------------------------------------------
.text:000000000000536A                 align 10h
.text:0000000000005370
.text:0000000000005370 ; =============== S U B R O U T I N E =======================================
.text:0000000000005370
.text:0000000000005370
.text:0000000000005370                 public quotearg_style
.text:0000000000005370 quotearg_style  proc near               ; CODE XREF: main+368↑p
.text:0000000000005370                                         ; main+4C0↑p ...
.text:0000000000005370 ; __unwind {
.text:0000000000005370                 mov     rdx, rsi
.text:0000000000005373                 mov     esi, edi
.text:0000000000005375                 xor     edi, edi
.text:0000000000005377                 jmp     quotearg_n_style
.text:0000000000005377 ; } // starts at 5370
.text:0000000000005377 quotearg_style  endp
.text:0000000000005377
.text:0000000000005377 ; ---------------------------------------------------------------------------
.text:000000000000537C                 align 20h
.text:0000000000005380
.text:0000000000005380 ; =============== S U B R O U T I N E =======================================
.text:0000000000005380
.text:0000000000005380
.text:0000000000005380                 public quotearg_style_mem
.text:0000000000005380 quotearg_style_mem proc near
.text:0000000000005380 ; __unwind {
.text:0000000000005380                 mov     rcx, rdx
.text:0000000000005383                 mov     rdx, rsi
.text:0000000000005386                 mov     esi, edi
.text:0000000000005388                 xor     edi, edi
.text:000000000000538A                 jmp     quotearg_n_style_mem
.text:000000000000538A ; } // starts at 5380
.text:000000000000538A quotearg_style_mem endp
.text:000000000000538A
.text:000000000000538A ; ---------------------------------------------------------------------------
.text:000000000000538F                 align 10h
.text:0000000000005390
.text:0000000000005390 ; =============== S U B R O U T I N E =======================================
.text:0000000000005390
.text:0000000000005390 ; Attributes: info_from_lumina
.text:0000000000005390
.text:0000000000005390 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000005390                 public quotearg_char_mem
.text:0000000000005390 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000005390                                         ; quotearg_colon+C↓j ...
.text:0000000000005390
.text:0000000000005390 var_48          = xmmword ptr -48h
.text:0000000000005390 var_38          = xmmword ptr -38h
.text:0000000000005390 var_28          = xmmword ptr -28h
.text:0000000000005390 var_18          = qword ptr -18h
.text:0000000000005390 var_10          = qword ptr -10h
.text:0000000000005390
.text:0000000000005390 ; __unwind {
.text:0000000000005390                 sub     rsp, 48h
.text:0000000000005394                 mov     ecx, edx
.text:0000000000005396                 mov     rax, fs:28h
.text:000000000000539F                 mov     [rsp+48h+var_10], rax
.text:00000000000053A4                 xor     eax, eax
.text:00000000000053A6                 mov     rax, cs:qword_20E230
.text:00000000000053AD                 mov     r8, rsp
.text:00000000000053B0                 and     ecx, 1Fh
.text:00000000000053B3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000053BB                 mov     [rsp+48h+var_18], rax
.text:00000000000053C0                 mov     eax, edx
.text:00000000000053C2                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000053C6                 shr     al, 5
.text:00000000000053C9                 movzx   eax, al
.text:00000000000053CC                 lea     r9, [r8+rax*4+8]
.text:00000000000053D1                 movdqa  xmm0, cs:xmmword_20E210
.text:00000000000053D9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000053DE                 movdqa  xmm0, cs:xmmword_20E220
.text:00000000000053E6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000053EB                 mov     edx, [r9]
.text:00000000000053EE                 mov     eax, edx
.text:00000000000053F0                 shr     eax, cl
.text:00000000000053F2                 not     eax
.text:00000000000053F4                 and     eax, 1
.text:00000000000053F7                 shl     eax, cl
.text:00000000000053F9                 mov     rcx, r8
.text:00000000000053FC                 xor     eax, edx
.text:00000000000053FE                 mov     rdx, rsi
.text:0000000000005401                 mov     rsi, rdi
.text:0000000000005404                 mov     [r9], eax
.text:0000000000005407                 xor     edi, edi
.text:0000000000005409                 call    quotearg_n_options
.text:000000000000540E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000005413                 xor     rsi, fs:28h
.text:000000000000541C                 jnz     short loc_5423
.text:000000000000541E                 add     rsp, 48h
.text:0000000000005422                 retn
.text:0000000000005423 ; ---------------------------------------------------------------------------
.text:0000000000005423
.text:0000000000005423 loc_5423:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000005423                 call    ___stack_chk_fail
.text:0000000000005423 ; } // starts at 5390
.text:0000000000005423 quotearg_char_mem endp
.text:0000000000005423
.text:0000000000005423 ; ---------------------------------------------------------------------------
.text:0000000000005428                 align 10h
.text:0000000000005430
.text:0000000000005430 ; =============== S U B R O U T I N E =======================================
.text:0000000000005430
.text:0000000000005430
.text:0000000000005430                 public quotearg_char
.text:0000000000005430 quotearg_char   proc near
.text:0000000000005430 ; __unwind {
.text:0000000000005430                 movsx   edx, sil
.text:0000000000005434                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000543B                 jmp     quotearg_char_mem
.text:000000000000543B ; } // starts at 5430
.text:000000000000543B quotearg_char   endp
.text:000000000000543B
.text:0000000000005440
.text:0000000000005440 ; =============== S U B R O U T I N E =======================================
.text:0000000000005440
.text:0000000000005440
.text:0000000000005440                 public quotearg_colon
.text:0000000000005440 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000005440 ; __unwind {
.text:0000000000005440                 mov     edx, 3Ah ; ':'
.text:0000000000005445                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000544C                 jmp     quotearg_char_mem
.text:000000000000544C ; } // starts at 5440
.text:000000000000544C quotearg_colon  endp
.text:000000000000544C
.text:000000000000544C ; ---------------------------------------------------------------------------
.text:0000000000005451                 align 20h
.text:0000000000005460
.text:0000000000005460 ; =============== S U B R O U T I N E =======================================
.text:0000000000005460
.text:0000000000005460
.text:0000000000005460                 public quotearg_colon_mem
.text:0000000000005460 quotearg_colon_mem proc near
.text:0000000000005460 ; __unwind {
.text:0000000000005460                 mov     edx, 3Ah ; ':'
.text:0000000000005465                 jmp     quotearg_char_mem
.text:0000000000005465 ; } // starts at 5460
.text:0000000000005465 quotearg_colon_mem endp
.text:0000000000005465
.text:0000000000005465 ; ---------------------------------------------------------------------------
.text:000000000000546A                 align 10h
.text:0000000000005470
.text:0000000000005470 ; =============== S U B R O U T I N E =======================================
.text:0000000000005470
.text:0000000000005470 ; Attributes: info_from_lumina
.text:0000000000005470
.text:0000000000005470 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005470                 public quotearg_n_style_colon
.text:0000000000005470 quotearg_n_style_colon proc near        ; CODE XREF: change_file_owner+466↑p
.text:0000000000005470                                         ; change_file_owner+877↑p
.text:0000000000005470
.text:0000000000005470 var_48          = dword ptr -48h
.text:0000000000005470 var_44          = qword ptr -44h
.text:0000000000005470 var_3C          = qword ptr -3Ch
.text:0000000000005470 var_34          = qword ptr -34h
.text:0000000000005470 var_2C          = qword ptr -2Ch
.text:0000000000005470 var_24          = qword ptr -24h
.text:0000000000005470 var_1C          = qword ptr -1Ch
.text:0000000000005470 var_14          = dword ptr -14h
.text:0000000000005470 var_10          = qword ptr -10h
.text:0000000000005470
.text:0000000000005470 ; __unwind {
.text:0000000000005470                 sub     rsp, 48h
.text:0000000000005474                 mov     rax, rdx
.text:0000000000005477                 mov     rdx, fs:28h
.text:0000000000005480                 mov     [rsp+48h+var_10], rdx
.text:0000000000005485                 xor     edx, edx
.text:0000000000005487                 cmp     esi, 0Ah
.text:000000000000548A                 jz      short loc_54F4
.text:000000000000548C                 mov     [rsp+48h+var_48], esi
.text:000000000000548F                 mov     rcx, rsp
.text:0000000000005492                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005499                 mov     rsi, rax
.text:000000000000549C                 mov     [rsp+48h+var_44], 0
.text:00000000000054A5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000054AE                 mov     [rsp+48h+var_34], 0
.text:00000000000054B7                 mov     [rsp+48h+var_2C], 0
.text:00000000000054C0                 mov     [rsp+48h+var_24], 0
.text:00000000000054C9                 mov     [rsp+48h+var_1C], 0
.text:00000000000054D2                 mov     [rsp+48h+var_14], 0
.text:00000000000054DA                 call    quotearg_n_options
.text:00000000000054DF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000054E4                 xor     rcx, fs:28h
.text:00000000000054ED                 jnz     short loc_54F9
.text:00000000000054EF                 add     rsp, 48h
.text:00000000000054F3                 retn
.text:00000000000054F4 ; ---------------------------------------------------------------------------
.text:00000000000054F4
.text:00000000000054F4 loc_54F4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000054F4                 call    _abort
.text:00000000000054F9 ; ---------------------------------------------------------------------------
.text:00000000000054F9
.text:00000000000054F9 loc_54F9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000054F9                 call    ___stack_chk_fail
.text:00000000000054F9 ; } // starts at 5470
.text:00000000000054F9 quotearg_n_style_colon endp
.text:00000000000054F9
.text:00000000000054F9 ; ---------------------------------------------------------------------------
.text:00000000000054FE                 align 20h
.text:0000000000005500
.text:0000000000005500 ; =============== S U B R O U T I N E =======================================
.text:0000000000005500
.text:0000000000005500 ; Attributes: info_from_lumina
.text:0000000000005500
.text:0000000000005500 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000005500                 public quotearg_n_custom_mem
.text:0000000000005500 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000005500                                         ; quotearg_custom+12↓j ...
.text:0000000000005500
.text:0000000000005500 var_48          = xmmword ptr -48h
.text:0000000000005500 var_38          = xmmword ptr -38h
.text:0000000000005500 var_28          = xmmword ptr -28h
.text:0000000000005500 var_18          = qword ptr -18h
.text:0000000000005500 var_10          = qword ptr -10h
.text:0000000000005500
.text:0000000000005500 ; __unwind {
.text:0000000000005500                 sub     rsp, 48h
.text:0000000000005504                 mov     r9, rcx
.text:0000000000005507                 mov     rcx, cs:qword_20E230
.text:000000000000550E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005516                 mov     rax, fs:28h
.text:000000000000551F                 mov     [rsp+48h+var_10], rax
.text:0000000000005524                 xor     eax, eax
.text:0000000000005526                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000552A                 test    rsi, rsi
.text:000000000000552D                 mov     [rsp+48h+var_18], rcx
.text:0000000000005532                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000005539                 movdqa  xmm0, cs:xmmword_20E210
.text:0000000000005541                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005546                 movdqa  xmm0, cs:xmmword_20E220
.text:000000000000554E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005553                 jz      short loc_5587
.text:0000000000005555                 test    rdx, rdx
.text:0000000000005558                 jz      short loc_5587
.text:000000000000555A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000555F                 mov     [rsp+48h+var_18], rdx
.text:0000000000005564                 mov     rcx, rsp
.text:0000000000005567                 mov     rdx, r8
.text:000000000000556A                 mov     rsi, r9
.text:000000000000556D                 call    quotearg_n_options
.text:0000000000005572                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005577                 xor     rdi, fs:28h
.text:0000000000005580                 jnz     short loc_558C
.text:0000000000005582                 add     rsp, 48h
.text:0000000000005586                 retn
.text:0000000000005587 ; ---------------------------------------------------------------------------
.text:0000000000005587
.text:0000000000005587 loc_5587:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005587                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005587                 call    _abort
.text:000000000000558C ; ---------------------------------------------------------------------------
.text:000000000000558C
.text:000000000000558C loc_558C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000558C                 call    ___stack_chk_fail
.text:000000000000558C ; } // starts at 5500
.text:000000000000558C quotearg_n_custom_mem endp
.text:000000000000558C
.text:000000000000558C ; ---------------------------------------------------------------------------
.text:0000000000005591                 align 20h
.text:00000000000055A0
.text:00000000000055A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055A0
.text:00000000000055A0
.text:00000000000055A0                 public quotearg_n_custom
.text:00000000000055A0 quotearg_n_custom proc near
.text:00000000000055A0 ; __unwind {
.text:00000000000055A0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000055A7                 jmp     quotearg_n_custom_mem
.text:00000000000055A7 ; } // starts at 55A0
.text:00000000000055A7 quotearg_n_custom endp
.text:00000000000055A7
.text:00000000000055A7 ; ---------------------------------------------------------------------------
.text:00000000000055AC                 align 10h
.text:00000000000055B0
.text:00000000000055B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055B0
.text:00000000000055B0
.text:00000000000055B0                 public quotearg_custom
.text:00000000000055B0 quotearg_custom proc near
.text:00000000000055B0 ; __unwind {
.text:00000000000055B0                 mov     rcx, rdx
.text:00000000000055B3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000055BA                 mov     rdx, rsi
.text:00000000000055BD                 mov     rsi, rdi
.text:00000000000055C0                 xor     edi, edi
.text:00000000000055C2                 jmp     quotearg_n_custom_mem
.text:00000000000055C2 ; } // starts at 55B0
.text:00000000000055C2 quotearg_custom endp
.text:00000000000055C2
.text:00000000000055C2 ; ---------------------------------------------------------------------------
.text:00000000000055C7                 align 10h
.text:00000000000055D0
.text:00000000000055D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055D0
.text:00000000000055D0
.text:00000000000055D0                 public quotearg_custom_mem
.text:00000000000055D0 quotearg_custom_mem proc near
.text:00000000000055D0 ; __unwind {
.text:00000000000055D0                 mov     r8, rcx
.text:00000000000055D3                 mov     rcx, rdx
.text:00000000000055D6                 mov     rdx, rsi
.text:00000000000055D9                 mov     rsi, rdi
.text:00000000000055DC                 xor     edi, edi
.text:00000000000055DE                 jmp     quotearg_n_custom_mem
.text:00000000000055DE ; } // starts at 55D0
.text:00000000000055DE quotearg_custom_mem endp
.text:00000000000055DE
.text:00000000000055DE ; ---------------------------------------------------------------------------
.text:00000000000055E3                 align 10h
.text:00000000000055F0
.text:00000000000055F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055F0
.text:00000000000055F0
.text:00000000000055F0                 public quote_n_mem
.text:00000000000055F0 quote_n_mem     proc near
.text:00000000000055F0 ; __unwind {
.text:00000000000055F0                 lea     rcx, quote_quoting_options
.text:00000000000055F7                 jmp     quotearg_n_options
.text:00000000000055F7 ; } // starts at 55F0
.text:00000000000055F7 quote_n_mem     endp
.text:00000000000055F7
.text:00000000000055F7 ; ---------------------------------------------------------------------------
.text:00000000000055FC                 align 20h
.text:0000000000005600
.text:0000000000005600 ; =============== S U B R O U T I N E =======================================
.text:0000000000005600
.text:0000000000005600
.text:0000000000005600                 public quote_mem
.text:0000000000005600 quote_mem       proc near
.text:0000000000005600 ; __unwind {
.text:0000000000005600                 lea     rcx, quote_quoting_options
.text:0000000000005607                 mov     rdx, rsi
.text:000000000000560A                 mov     rsi, rdi
.text:000000000000560D                 xor     edi, edi
.text:000000000000560F                 jmp     quotearg_n_options
.text:000000000000560F ; } // starts at 5600
.text:000000000000560F quote_mem       endp
.text:000000000000560F
.text:000000000000560F ; ---------------------------------------------------------------------------
.text:0000000000005614                 align 20h
.text:0000000000005620
.text:0000000000005620 ; =============== S U B R O U T I N E =======================================
.text:0000000000005620
.text:0000000000005620
.text:0000000000005620                 public quote_n
.text:0000000000005620 quote_n         proc near
.text:0000000000005620 ; __unwind {
.text:0000000000005620                 lea     rcx, quote_quoting_options
.text:0000000000005627                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000562E                 jmp     quotearg_n_options
.text:000000000000562E ; } // starts at 5620
.text:000000000000562E quote_n         endp
.text:000000000000562E
.text:000000000000562E ; ---------------------------------------------------------------------------
.text:0000000000005633                 align 20h
.text:0000000000005640
.text:0000000000005640 ; =============== S U B R O U T I N E =======================================
.text:0000000000005640
.text:0000000000005640
.text:0000000000005640                 public quote
.text:0000000000005640 quote           proc near               ; CODE XREF: main+3EE↑p
.text:0000000000005640                                         ; main+482↑p
.text:0000000000005640 ; __unwind {
.text:0000000000005640                 lea     rcx, quote_quoting_options
.text:0000000000005647                 mov     rsi, rdi
.text:000000000000564A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005651                 xor     edi, edi
.text:0000000000005653                 jmp     quotearg_n_options
.text:0000000000005653 ; } // starts at 5640
.text:0000000000005653 quote           endp
.text:0000000000005653
.text:0000000000005653 ; ---------------------------------------------------------------------------
.text:0000000000005658                 align 20h
.text:0000000000005660
.text:0000000000005660 ; =============== S U B R O U T I N E =======================================
.text:0000000000005660
.text:0000000000005660
.text:0000000000005660                 public get_root_dev_ino
.text:0000000000005660 get_root_dev_ino proc near              ; CODE XREF: main+349↑p
.text:0000000000005660
.text:0000000000005660 var_A8          = qword ptr -0A8h
.text:0000000000005660 var_A0          = qword ptr -0A0h
.text:0000000000005660 var_10          = qword ptr -10h
.text:0000000000005660
.text:0000000000005660 ; __unwind {
.text:0000000000005660                 push    rbx
.text:0000000000005661                 lea     rsi, aLibs+6    ; filename
.text:0000000000005668                 mov     rbx, rdi
.text:000000000000566B                 mov     edi, 1          ; ver
.text:0000000000005670                 sub     rsp, 0A0h
.text:0000000000005677                 mov     rdx, rsp        ; stat_buf
.text:000000000000567A                 mov     rax, fs:28h
.text:0000000000005683                 mov     [rsp+0A8h+var_10], rax
.text:000000000000568B                 xor     eax, eax
.text:000000000000568D                 call    ___lxstat
.text:0000000000005692                 test    eax, eax
.text:0000000000005694                 jnz     short loc_56C8
.text:0000000000005696                 mov     rax, [rsp+0A8h+var_A0]
.text:000000000000569B                 mov     [rbx], rax
.text:000000000000569E                 mov     rax, [rsp+0A8h+var_A8]
.text:00000000000056A2                 mov     [rbx+8], rax
.text:00000000000056A6                 mov     rax, rbx
.text:00000000000056A9
.text:00000000000056A9 loc_56A9:                               ; CODE XREF: get_root_dev_ino+6A↓j
.text:00000000000056A9                 mov     rcx, [rsp+0A8h+var_10]
.text:00000000000056B1                 xor     rcx, fs:28h
.text:00000000000056BA                 jnz     short loc_56CC
.text:00000000000056BC                 add     rsp, 0A0h
.text:00000000000056C3                 pop     rbx
.text:00000000000056C4                 retn
.text:00000000000056C4 ; ---------------------------------------------------------------------------
.text:00000000000056C5                 align 8
.text:00000000000056C8
.text:00000000000056C8 loc_56C8:                               ; CODE XREF: get_root_dev_ino+34↑j
.text:00000000000056C8                 xor     eax, eax
.text:00000000000056CA                 jmp     short loc_56A9
.text:00000000000056CC ; ---------------------------------------------------------------------------
.text:00000000000056CC
.text:00000000000056CC loc_56CC:                               ; CODE XREF: get_root_dev_ino+5A↑j
.text:00000000000056CC                 call    ___stack_chk_fail
.text:00000000000056CC ; } // starts at 5660
.text:00000000000056CC get_root_dev_ino endp
.text:00000000000056CC
.text:00000000000056CC ; ---------------------------------------------------------------------------
.text:00000000000056D1                 align 20h
.text:00000000000056E0
.text:00000000000056E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056E0
.text:00000000000056E0
.text:00000000000056E0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000056E0                 public version_etc_arn
.text:00000000000056E0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_5B1B↓j
.text:00000000000056E0                                         ; version_etc_va:loc_5B6B↓p ...
.text:00000000000056E0
.text:00000000000056E0 var_58          = qword ptr -58h
.text:00000000000056E0 var_50          = qword ptr -50h
.text:00000000000056E0 var_48          = qword ptr -48h
.text:00000000000056E0 var_40          = qword ptr -40h
.text:00000000000056E0
.text:00000000000056E0 ; __unwind {
.text:00000000000056E0                 push    r15
.text:00000000000056E2                 push    r14
.text:00000000000056E4                 push    r13
.text:00000000000056E6                 push    r12
.text:00000000000056E8                 mov     r12, r9
.text:00000000000056EB                 push    rbp
.text:00000000000056EC                 push    rbx
.text:00000000000056ED                 mov     rbp, rdi
.text:00000000000056F0                 mov     rbx, r8
.text:00000000000056F3                 sub     rsp, 28h
.text:00000000000056F7                 test    rsi, rsi
.text:00000000000056FA                 jz      loc_5818
.text:0000000000005700                 mov     r8, rdx
.text:0000000000005703                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000570A                 mov     r9, rcx
.text:000000000000570D                 xor     eax, eax
.text:000000000000570F                 mov     rcx, rsi
.text:0000000000005712                 mov     esi, 1
.text:0000000000005717                 call    ___fprintf_chk
.text:000000000000571C
.text:000000000000571C loc_571C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000571C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000005723                 xor     edi, edi        ; domainname
.text:0000000000005725                 mov     edx, 5          ; category
.text:000000000000572A                 call    _dcgettext
.text:000000000000572F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000005736                 mov     rcx, rax
.text:0000000000005739                 mov     r8d, 7E3h
.text:000000000000573F                 mov     esi, 1
.text:0000000000005744                 mov     rdi, rbp
.text:0000000000005747                 xor     eax, eax
.text:0000000000005749                 call    ___fprintf_chk
.text:000000000000574E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000005755                 xor     edi, edi        ; domainname
.text:0000000000005757                 mov     edx, 5          ; category
.text:000000000000575C                 call    _dcgettext
.text:0000000000005761                 mov     rsi, rbp        ; stream
.text:0000000000005764                 mov     rdi, rax        ; s
.text:0000000000005767                 call    _fputs_unlocked
.text:000000000000576C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000005770                 ja      def_5784        ; jumptable 0000000000005784 default case
.text:0000000000005776                 lea     rdx, jpt_5784
.text:000000000000577D                 movsxd  rax, ds:(jpt_5784 - 0B9E4h)[rdx+r12*4]
.text:0000000000005781                 add     rax, rdx
.text:0000000000005784                 jmp     rax             ; switch jump
.text:0000000000005784 ; ---------------------------------------------------------------------------
.text:0000000000005786                 align 10h
.text:0000000000005790
.text:0000000000005790 loc_5790:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005790                                         ; DATA XREF: .rodata:jpt_5784↓o
.text:0000000000005790                 mov     r9, [rbx+38h]   ; jumptable 0000000000005784 case 8
.text:0000000000005794                 mov     rax, [rbx+10h]
.text:0000000000005798                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000579F                 mov     r8, [rbx+8]
.text:00000000000057A3                 mov     edx, 5          ; category
.text:00000000000057A8                 xor     edi, edi        ; domainname
.text:00000000000057AA                 mov     r13, [rbx+30h]
.text:00000000000057AE                 mov     r12, [rbx+28h]
.text:00000000000057B2                 mov     [rsp+58h+var_48], r9
.text:00000000000057B7                 mov     r15, [rbx+20h]
.text:00000000000057BB                 mov     r14, [rbx+18h]
.text:00000000000057BF                 mov     [rsp+58h+var_58], rax
.text:00000000000057C3                 mov     [rsp+58h+var_50], r8
.text:00000000000057C8                 mov     rbx, [rbx]
.text:00000000000057CB                 call    _dcgettext
.text:00000000000057D0                 sub     rsp, 8
.text:00000000000057D4
.text:00000000000057D4 loc_57D4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000057D4                 mov     r9, [rsp+60h+var_48]
.text:00000000000057D9                 mov     rdx, rax
.text:00000000000057DC                 mov     rcx, rbx
.text:00000000000057DF                 mov     esi, 1
.text:00000000000057E4                 mov     rdi, rbp
.text:00000000000057E7                 xor     eax, eax
.text:00000000000057E9                 push    r9
.text:00000000000057EB                 push    r13
.text:00000000000057ED                 push    r12
.text:00000000000057EF                 push    r15
.text:00000000000057F1                 push    r14
.text:00000000000057F3                 mov     r9, [rsp+88h+var_58]
.text:00000000000057F8                 mov     r8, [rsp+88h+var_50]
.text:00000000000057FD                 call    ___fprintf_chk
.text:0000000000005802                 add     rsp, 30h
.text:0000000000005806
.text:0000000000005806 loc_5806:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005806                                         ; DATA XREF: .rodata:jpt_5784↓o
.text:0000000000005806                 add     rsp, 28h        ; jumptable 0000000000005784 case 0
.text:000000000000580A                 pop     rbx
.text:000000000000580B                 pop     rbp
.text:000000000000580C                 pop     r12
.text:000000000000580E                 pop     r13
.text:0000000000005810                 pop     r14
.text:0000000000005812                 pop     r15
.text:0000000000005814                 retn
.text:0000000000005814 ; ---------------------------------------------------------------------------
.text:0000000000005815                 align 8
.text:0000000000005818
.text:0000000000005818 loc_5818:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000005818                 mov     r8, rcx
.text:000000000000581B                 mov     rcx, rdx
.text:000000000000581E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000005825                 mov     esi, 1
.text:000000000000582A                 xor     eax, eax
.text:000000000000582C                 call    ___fprintf_chk
.text:0000000000005831                 jmp     loc_571C
.text:0000000000005831 ; ---------------------------------------------------------------------------
.text:0000000000005836                 align 20h
.text:0000000000005840
.text:0000000000005840 loc_5840:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005840                                         ; DATA XREF: .rodata:jpt_5784↓o
.text:0000000000005840                 mov     r10, [rbx+40h]  ; jumptable 0000000000005784 case 9
.text:0000000000005844                 mov     r9, [rbx+38h]
.text:0000000000005848                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000584F                 mov     rax, [rbx+10h]
.text:0000000000005853                 mov     r8, [rbx+8]
.text:0000000000005857                 mov     edx, 5          ; category
.text:000000000000585C                 mov     r13, [rbx+30h]
.text:0000000000005860                 mov     r12, [rbx+28h]
.text:0000000000005864                 mov     r15, [rbx+20h]
.text:0000000000005868                 mov     r14, [rbx+18h]
.text:000000000000586C                 mov     rbx, [rbx]
.text:000000000000586F                 mov     [rsp+58h+var_40], r10
.text:0000000000005874                 mov     [rsp+58h+var_48], r9
.text:0000000000005879                 mov     [rsp+58h+var_58], rax
.text:000000000000587D                 mov     [rsp+58h+var_50], r8
.text:0000000000005882
.text:0000000000005882 loc_5882:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000005882                 xor     edi, edi        ; domainname
.text:0000000000005884                 call    _dcgettext
.text:0000000000005889                 mov     r10, [rsp+58h+var_40]
.text:000000000000588E                 push    r10
.text:0000000000005890                 jmp     loc_57D4
.text:0000000000005890 ; ---------------------------------------------------------------------------
.text:0000000000005895                 align 8
.text:0000000000005898
.text:0000000000005898 loc_5898:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005898                                         ; DATA XREF: .rodata:jpt_5784↓o
.text:0000000000005898                 mov     rbx, [rbx]      ; jumptable 0000000000005784 case 1
.text:000000000000589B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000058A2                 mov     edx, 5          ; category
.text:00000000000058A7                 xor     edi, edi        ; domainname
.text:00000000000058A9                 call    _dcgettext
.text:00000000000058AE                 add     rsp, 28h
.text:00000000000058B2                 mov     rcx, rbx
.text:00000000000058B5                 mov     rdi, rbp
.text:00000000000058B8                 pop     rbx
.text:00000000000058B9                 pop     rbp
.text:00000000000058BA                 pop     r12
.text:00000000000058BC                 pop     r13
.text:00000000000058BE                 pop     r14
.text:00000000000058C0                 pop     r15
.text:00000000000058C2                 mov     rdx, rax
.text:00000000000058C5                 mov     esi, 1
.text:00000000000058CA                 xor     eax, eax
.text:00000000000058CC                 jmp     ___fprintf_chk
.text:00000000000058CC ; ---------------------------------------------------------------------------
.text:00000000000058D1                 align 8
.text:00000000000058D8
.text:00000000000058D8 loc_58D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000058D8                                         ; DATA XREF: .rodata:jpt_5784↓o
.text:00000000000058D8                 mov     r12, [rbx+8]    ; jumptable 0000000000005784 case 2
.text:00000000000058DC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000058E3                 mov     rbx, [rbx]
.text:00000000000058E6                 mov     edx, 5          ; category
.text:00000000000058EB                 xor     edi, edi        ; domainname
.text:00000000000058ED                 call    _dcgettext
.text:00000000000058F2                 add     rsp, 28h
.text:00000000000058F6                 mov     r8, r12
.text:00000000000058F9                 mov     rcx, rbx
.text:00000000000058FC                 mov     rdi, rbp
.text:00000000000058FF                 mov     rdx, rax
.text:0000000000005902                 mov     esi, 1
.text:0000000000005907                 pop     rbx
.text:0000000000005908                 pop     rbp
.text:0000000000005909                 pop     r12
.text:000000000000590B                 pop     r13
.text:000000000000590D                 pop     r14
.text:000000000000590F                 pop     r15
.text:0000000000005911                 xor     eax, eax
.text:0000000000005913                 jmp     ___fprintf_chk
.text:0000000000005913 ; ---------------------------------------------------------------------------
.text:0000000000005918                 align 20h
.text:0000000000005920
.text:0000000000005920 loc_5920:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005920                                         ; DATA XREF: .rodata:jpt_5784↓o
.text:0000000000005920                 mov     r13, [rbx+10h]  ; jumptable 0000000000005784 case 3
.text:0000000000005924                 mov     r12, [rbx+8]
.text:0000000000005928                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000592F                 mov     rbx, [rbx]
.text:0000000000005932                 mov     edx, 5          ; category
.text:0000000000005937                 xor     edi, edi        ; domainname
.text:0000000000005939                 call    _dcgettext
.text:000000000000593E                 add     rsp, 28h
.text:0000000000005942                 mov     r9, r13
.text:0000000000005945                 mov     r8, r12
.text:0000000000005948                 mov     rcx, rbx
.text:000000000000594B                 mov     rdi, rbp
.text:000000000000594E                 mov     rdx, rax
.text:0000000000005951                 pop     rbx
.text:0000000000005952                 pop     rbp
.text:0000000000005953                 pop     r12
.text:0000000000005955                 pop     r13
.text:0000000000005957                 pop     r14
.text:0000000000005959                 pop     r15
.text:000000000000595B                 mov     esi, 1
.text:0000000000005960                 xor     eax, eax
.text:0000000000005962                 jmp     ___fprintf_chk
.text:0000000000005962 ; ---------------------------------------------------------------------------
.text:0000000000005967                 align 10h
.text:0000000000005970
.text:0000000000005970 loc_5970:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005970                                         ; DATA XREF: .rodata:jpt_5784↓o
.text:0000000000005970                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000005784 case 4
.text:0000000000005977                 mov     edx, 5          ; category
.text:000000000000597C                 xor     edi, edi        ; domainname
.text:000000000000597E                 mov     r14, [rbx+18h]
.text:0000000000005982                 mov     r13, [rbx+10h]
.text:0000000000005986                 mov     r12, [rbx+8]
.text:000000000000598A                 mov     rbx, [rbx]
.text:000000000000598D                 call    _dcgettext
.text:0000000000005992                 sub     rsp, 8
.text:0000000000005996
.text:0000000000005996 loc_5996:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005996                 push    r14
.text:0000000000005998                 mov     rdx, rax
.text:000000000000599B                 mov     r9, r13
.text:000000000000599E                 mov     r8, r12
.text:00000000000059A1                 mov     rcx, rbx
.text:00000000000059A4                 mov     rdi, rbp
.text:00000000000059A7                 mov     esi, 1
.text:00000000000059AC                 xor     eax, eax
.text:00000000000059AE                 call    ___fprintf_chk
.text:00000000000059B3                 pop     rax
.text:00000000000059B4                 pop     rdx
.text:00000000000059B5                 add     rsp, 28h
.text:00000000000059B9                 pop     rbx
.text:00000000000059BA                 pop     rbp
.text:00000000000059BB                 pop     r12
.text:00000000000059BD                 pop     r13
.text:00000000000059BF                 pop     r14
.text:00000000000059C1                 pop     r15
.text:00000000000059C3                 retn
.text:00000000000059C3 ; ---------------------------------------------------------------------------
.text:00000000000059C4                 align 8
.text:00000000000059C8
.text:00000000000059C8 loc_59C8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000059C8                                         ; DATA XREF: .rodata:jpt_5784↓o
.text:00000000000059C8                 mov     r15, [rbx+20h]  ; jumptable 0000000000005784 case 5
.text:00000000000059CC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000059D3                 mov     edx, 5          ; category
.text:00000000000059D8                 xor     edi, edi        ; domainname
.text:00000000000059DA                 mov     r14, [rbx+18h]
.text:00000000000059DE                 mov     r13, [rbx+10h]
.text:00000000000059E2                 mov     r12, [rbx+8]
.text:00000000000059E6                 mov     rbx, [rbx]
.text:00000000000059E9                 call    _dcgettext
.text:00000000000059EE                 push    r15
.text:00000000000059F0                 jmp     short loc_5996
.text:00000000000059F0 ; ---------------------------------------------------------------------------
.text:00000000000059F2                 align 8
.text:00000000000059F8
.text:00000000000059F8 loc_59F8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000059F8                                         ; DATA XREF: .rodata:jpt_5784↓o
.text:00000000000059F8                 mov     r8, [rbx+8]     ; jumptable 0000000000005784 case 6
.text:00000000000059FC                 mov     r12, [rbx+28h]
.text:0000000000005A00                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000005A07                 mov     r15, [rbx+20h]
.text:0000000000005A0B                 mov     r14, [rbx+18h]
.text:0000000000005A0F                 mov     edx, 5          ; category
.text:0000000000005A14                 mov     r13, [rbx+10h]
.text:0000000000005A18                 xor     edi, edi        ; domainname
.text:0000000000005A1A                 mov     rbx, [rbx]
.text:0000000000005A1D                 mov     [rsp+58h+var_58], r8
.text:0000000000005A21                 call    _dcgettext
.text:0000000000005A26                 sub     rsp, 8
.text:0000000000005A2A                 mov     r9, r13
.text:0000000000005A2D                 push    r12
.text:0000000000005A2F                 push    r15
.text:0000000000005A31                 push    r14
.text:0000000000005A33
.text:0000000000005A33 loc_5A33:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000005A33                 mov     r8, [rsp+78h+var_58]
.text:0000000000005A38                 mov     rcx, rbx
.text:0000000000005A3B                 mov     rdx, rax
.text:0000000000005A3E                 mov     rdi, rbp
.text:0000000000005A41                 mov     esi, 1
.text:0000000000005A46                 xor     eax, eax
.text:0000000000005A48                 call    ___fprintf_chk
.text:0000000000005A4D                 add     rsp, 20h
.text:0000000000005A51                 add     rsp, 28h
.text:0000000000005A55                 pop     rbx
.text:0000000000005A56                 pop     rbp
.text:0000000000005A57                 pop     r12
.text:0000000000005A59                 pop     r13
.text:0000000000005A5B                 pop     r14
.text:0000000000005A5D                 pop     r15
.text:0000000000005A5F                 retn
.text:0000000000005A60 ; ---------------------------------------------------------------------------
.text:0000000000005A60
.text:0000000000005A60 loc_5A60:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005A60                                         ; DATA XREF: .rodata:jpt_5784↓o
.text:0000000000005A60                 mov     r9, [rbx+10h]   ; jumptable 0000000000005784 case 7
.text:0000000000005A64                 mov     r13, [rbx+30h]
.text:0000000000005A68                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000005A6F                 mov     r12, [rbx+28h]
.text:0000000000005A73                 mov     r15, [rbx+20h]
.text:0000000000005A77                 mov     edx, 5          ; category
.text:0000000000005A7C                 mov     r14, [rbx+18h]
.text:0000000000005A80                 mov     r8, [rbx+8]
.text:0000000000005A84                 xor     edi, edi        ; domainname
.text:0000000000005A86                 mov     [rsp+58h+var_50], r9
.text:0000000000005A8B                 mov     rbx, [rbx]
.text:0000000000005A8E                 mov     [rsp+58h+var_58], r8
.text:0000000000005A92                 call    _dcgettext
.text:0000000000005A97                 push    r13
.text:0000000000005A99                 push    r12
.text:0000000000005A9B                 push    r15
.text:0000000000005A9D                 push    r14
.text:0000000000005A9F                 mov     r9, [rsp+78h+var_50]
.text:0000000000005AA4                 jmp     short loc_5A33
.text:0000000000005AA4 ; ---------------------------------------------------------------------------
.text:0000000000005AA6                 align 10h
.text:0000000000005AB0
.text:0000000000005AB0 def_5784:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005AB0                 mov     r10, [rbx+40h]  ; jumptable 0000000000005784 default case
.text:0000000000005AB4                 mov     r9, [rbx+38h]
.text:0000000000005AB8                 mov     edx, 5
.text:0000000000005ABD                 mov     rax, [rbx+10h]
.text:0000000000005AC1                 mov     r8, [rbx+8]
.text:0000000000005AC5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000005ACC                 mov     r13, [rbx+30h]
.text:0000000000005AD0                 mov     r12, [rbx+28h]
.text:0000000000005AD4                 mov     r15, [rbx+20h]
.text:0000000000005AD8                 mov     r14, [rbx+18h]
.text:0000000000005ADC                 mov     [rsp+58h+var_40], r10
.text:0000000000005AE1                 mov     [rsp+58h+var_48], r9
.text:0000000000005AE6                 mov     [rsp+58h+var_58], rax
.text:0000000000005AEA                 mov     [rsp+58h+var_50], r8
.text:0000000000005AEF                 mov     rbx, [rbx]
.text:0000000000005AF2                 jmp     loc_5882
.text:0000000000005AF2 ; } // starts at 56E0
.text:0000000000005AF2 version_etc_arn endp
.text:0000000000005AF2
.text:0000000000005AF2 ; ---------------------------------------------------------------------------
.text:0000000000005AF7                 align 20h
.text:0000000000005B00
.text:0000000000005B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B00
.text:0000000000005B00 ; Attributes: info_from_lumina
.text:0000000000005B00
.text:0000000000005B00 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005B00                 public version_etc_ar
.text:0000000000005B00 version_etc_ar  proc near
.text:0000000000005B00 ; __unwind {
.text:0000000000005B00                 xor     r9d, r9d
.text:0000000000005B03                 cmp     qword ptr [r8], 0
.text:0000000000005B07                 jz      short loc_5B1B
.text:0000000000005B09                 nop     dword ptr [rax+00000000h]
.text:0000000000005B10
.text:0000000000005B10 loc_5B10:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005B10                 add     r9, 1
.text:0000000000005B14                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005B19                 jnz     short loc_5B10
.text:0000000000005B1B
.text:0000000000005B1B loc_5B1B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000005B1B                 jmp     version_etc_arn
.text:0000000000005B1B ; } // starts at 5B00
.text:0000000000005B1B version_etc_ar  endp
.text:0000000000005B1B
.text:0000000000005B20
.text:0000000000005B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B20
.text:0000000000005B20 ; Attributes: info_from_lumina
.text:0000000000005B20
.text:0000000000005B20 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000005B20                 public version_etc_va
.text:0000000000005B20 version_etc_va  proc near
.text:0000000000005B20
.text:0000000000005B20 authtab         = qword ptr -68h
.text:0000000000005B20 var_10          = qword ptr -10h
.text:0000000000005B20
.text:0000000000005B20 ; __unwind {
.text:0000000000005B20                 sub     rsp, 68h
.text:0000000000005B24                 mov     r10, r8
.text:0000000000005B27                 xor     r9d, r9d
.text:0000000000005B2A                 mov     rax, fs:28h
.text:0000000000005B33                 mov     [rsp+68h+var_10], rax
.text:0000000000005B38                 xor     eax, eax
.text:0000000000005B3A                 mov     r8, rsp
.text:0000000000005B3D                 nop     dword ptr [rax]
.text:0000000000005B40
.text:0000000000005B40 loc_5B40:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000005B40                 mov     eax, [r10]
.text:0000000000005B43                 cmp     eax, 2Fh ; '/'
.text:0000000000005B46                 ja      short loc_5B8A
.text:0000000000005B48                 mov     r11d, eax
.text:0000000000005B4B                 add     r11, [r10+10h]
.text:0000000000005B4F                 add     eax, 8
.text:0000000000005B52                 mov     [r10], eax
.text:0000000000005B55
.text:0000000000005B55 loc_5B55:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000005B55                 mov     rax, [r11]
.text:0000000000005B58                 test    rax, rax
.text:0000000000005B5B                 mov     [r8+r9*8], rax
.text:0000000000005B5F                 jz      short loc_5B6B
.text:0000000000005B61                 add     r9, 1
.text:0000000000005B65                 cmp     r9, 0Ah
.text:0000000000005B69                 jnz     short loc_5B40
.text:0000000000005B6B
.text:0000000000005B6B loc_5B6B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000005B6B                 call    version_etc_arn
.text:0000000000005B70                 mov     rax, [rsp+68h+var_10]
.text:0000000000005B75                 xor     rax, fs:28h
.text:0000000000005B7E                 jnz     short loc_5B85
.text:0000000000005B80                 add     rsp, 68h
.text:0000000000005B84                 retn
.text:0000000000005B85 ; ---------------------------------------------------------------------------
.text:0000000000005B85
.text:0000000000005B85 loc_5B85:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000005B85                 call    ___stack_chk_fail
.text:0000000000005B8A ; ---------------------------------------------------------------------------
.text:0000000000005B8A
.text:0000000000005B8A loc_5B8A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000005B8A                 mov     r11, [r10+8]
.text:0000000000005B8E                 lea     rax, [r11+8]
.text:0000000000005B92                 mov     [r10+8], rax
.text:0000000000005B96                 jmp     short loc_5B55
.text:0000000000005B96 ; } // starts at 5B20
.text:0000000000005B96 version_etc_va  endp
.text:0000000000005B96
.text:0000000000005B96 ; ---------------------------------------------------------------------------
.text:0000000000005B98                 align 20h
.text:0000000000005BA0
.text:0000000000005BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BA0
.text:0000000000005BA0 ; Attributes: info_from_lumina
.text:0000000000005BA0
.text:0000000000005BA0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005BA0                 public version_etc
.text:0000000000005BA0 version_etc     proc near               ; CODE XREF: main+19D↑p
.text:0000000000005BA0
.text:0000000000005BA0 var_C0          = dword ptr -0C0h
.text:0000000000005BA0 var_B8          = qword ptr -0B8h
.text:0000000000005BA0 var_B0          = qword ptr -0B0h
.text:0000000000005BA0 var_A8          = byte ptr -0A8h
.text:0000000000005BA0 var_50          = qword ptr -50h
.text:0000000000005BA0 var_48          = byte ptr -48h
.text:0000000000005BA0 var_28          = qword ptr -28h
.text:0000000000005BA0 var_20          = qword ptr -20h
.text:0000000000005BA0 arg_0           = byte ptr  8
.text:0000000000005BA0
.text:0000000000005BA0 ; __unwind {
.text:0000000000005BA0                 push    rbp
.text:0000000000005BA1                 push    rbx
.text:0000000000005BA2                 mov     r10d, 20h ; ' '
.text:0000000000005BA8                 xor     r11d, r11d
.text:0000000000005BAB                 sub     rsp, 0B8h
.text:0000000000005BB2                 mov     rax, fs:28h
.text:0000000000005BBB                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005BC0                 xor     eax, eax
.text:0000000000005BC2                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000005BCA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005BD2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000005BDA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000005BDF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005BE7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000005BEF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005BF4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000005BFC                 xor     r9d, r9d
.text:0000000000005BFF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005C04                 mov     rbp, rax
.text:0000000000005C07                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005C10
.text:0000000000005C10 loc_5C10:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005C10                 cmp     r10d, 2Fh ; '/'
.text:0000000000005C14                 ja      short loc_5C6C
.text:0000000000005C16                 mov     eax, r10d
.text:0000000000005C19                 mov     r11d, 1
.text:0000000000005C1F                 add     r10d, 8
.text:0000000000005C23                 add     rax, rbp
.text:0000000000005C26
.text:0000000000005C26 loc_5C26:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005C26                 mov     rax, [rax]
.text:0000000000005C29                 test    rax, rax
.text:0000000000005C2C                 mov     [r8+r9*8], rax
.text:0000000000005C30                 jz      short loc_5C3C
.text:0000000000005C32                 add     r9, 1
.text:0000000000005C36                 cmp     r9, 0Ah
.text:0000000000005C3A                 jnz     short loc_5C10
.text:0000000000005C3C
.text:0000000000005C3C loc_5C3C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000005C3C                 test    r11b, r11b
.text:0000000000005C3F                 jnz     short loc_5C65
.text:0000000000005C41
.text:0000000000005C41 loc_5C41:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005C41                 call    version_etc_arn
.text:0000000000005C46                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000005C4B                 xor     rax, fs:28h
.text:0000000000005C54                 jnz     short loc_5C60
.text:0000000000005C56                 add     rsp, 0B8h
.text:0000000000005C5D                 pop     rbx
.text:0000000000005C5E                 pop     rbp
.text:0000000000005C5F                 retn
.text:0000000000005C60 ; ---------------------------------------------------------------------------
.text:0000000000005C60
.text:0000000000005C60 loc_5C60:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000005C60                 call    ___stack_chk_fail
.text:0000000000005C65 ; ---------------------------------------------------------------------------
.text:0000000000005C65
.text:0000000000005C65 loc_5C65:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000005C65                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000005C6A                 jmp     short loc_5C41
.text:0000000000005C6C ; ---------------------------------------------------------------------------
.text:0000000000005C6C
.text:0000000000005C6C loc_5C6C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000005C6C                 mov     rax, rbx
.text:0000000000005C6F                 add     rbx, 8
.text:0000000000005C73                 jmp     short loc_5C26
.text:0000000000005C73 ; } // starts at 5BA0
.text:0000000000005C73 version_etc     endp
.text:0000000000005C73
.text:0000000000005C73 ; ---------------------------------------------------------------------------
.text:0000000000005C75                 align 20h
.text:0000000000005C80
.text:0000000000005C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C80
.text:0000000000005C80 ; Attributes: info_from_lumina
.text:0000000000005C80
.text:0000000000005C80 ; void __cdecl emit_bug_reporting_address()
.text:0000000000005C80                 public emit_bug_reporting_address
.text:0000000000005C80 emit_bug_reporting_address proc near
.text:0000000000005C80 ; __unwind {
.text:0000000000005C80                 push    rbx
.text:0000000000005C81                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000005C88                 mov     edx, 5          ; category
.text:0000000000005C8D                 xor     edi, edi        ; domainname
.text:0000000000005C8F                 call    _dcgettext
.text:0000000000005C94                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000005C9B                 mov     rsi, rax
.text:0000000000005C9E                 mov     edi, 1
.text:0000000000005CA3                 xor     eax, eax
.text:0000000000005CA5                 call    ___printf_chk
.text:0000000000005CAA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005CB1                 mov     edx, 5          ; category
.text:0000000000005CB6                 xor     edi, edi        ; domainname
.text:0000000000005CB8                 call    _dcgettext
.text:0000000000005CBD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005CC4                 lea     rdx, unk_A4A0
.text:0000000000005CCB                 mov     rsi, rax
.text:0000000000005CCE                 mov     edi, 1
.text:0000000000005CD3                 xor     eax, eax
.text:0000000000005CD5                 call    ___printf_chk
.text:0000000000005CDA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005CE1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005CE8                 xor     edi, edi        ; domainname
.text:0000000000005CEA                 mov     edx, 5          ; category
.text:0000000000005CEF                 call    _dcgettext
.text:0000000000005CF4                 mov     rsi, rbx        ; stream
.text:0000000000005CF7                 mov     rdi, rax        ; s
.text:0000000000005CFA                 pop     rbx
.text:0000000000005CFB                 jmp     _fputs_unlocked
.text:0000000000005CFB ; } // starts at 5C80
.text:0000000000005CFB emit_bug_reporting_address endp
.text:0000000000005CFB
.text:0000000000005D00
.text:0000000000005D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D00
.text:0000000000005D00
.text:0000000000005D00                 public xmalloc
.text:0000000000005D00 xmalloc         proc near               ; CODE XREF: user_group_str+29↑p
.text:0000000000005D00                                         ; quotearg_n_options+127↑p ...
.text:0000000000005D00 ; __unwind {
.text:0000000000005D00                 push    rbx
.text:0000000000005D01                 mov     rbx, rdi
.text:0000000000005D04                 call    _malloc
.text:0000000000005D09                 test    rax, rax
.text:0000000000005D0C                 jnz     short loc_5D13
.text:0000000000005D0E                 test    rbx, rbx
.text:0000000000005D11                 jnz     short loc_5D15
.text:0000000000005D13
.text:0000000000005D13 loc_5D13:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005D13                 pop     rbx
.text:0000000000005D14                 retn
.text:0000000000005D15 ; ---------------------------------------------------------------------------
.text:0000000000005D15
.text:0000000000005D15 loc_5D15:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005D15                 call    xalloc_die
.text:0000000000005D15 ; } // starts at 5D00
.text:0000000000005D15 xmalloc         endp
.text:0000000000005D15
.text:0000000000005D15 ; ---------------------------------------------------------------------------
.text:0000000000005D1A                 align 20h
.text:0000000000005D20
.text:0000000000005D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D20
.text:0000000000005D20 ; Attributes: info_from_lumina
.text:0000000000005D20
.text:0000000000005D20 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005D20                 public xnmalloc
.text:0000000000005D20 xnmalloc        proc near
.text:0000000000005D20 ; __unwind {
.text:0000000000005D20                 mov     rax, rdi
.text:0000000000005D23                 mul     rsi
.text:0000000000005D26                 mov     rdi, rax
.text:0000000000005D29                 seto    al
.text:0000000000005D2C                 test    rdi, rdi
.text:0000000000005D2F                 js      short loc_5D3B
.text:0000000000005D31                 movzx   eax, al
.text:0000000000005D34                 test    rax, rax
.text:0000000000005D37                 jnz     short loc_5D3B
.text:0000000000005D39                 jmp     short xmalloc
.text:0000000000005D3B ; ---------------------------------------------------------------------------
.text:0000000000005D3B
.text:0000000000005D3B loc_5D3B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000005D3B                                         ; xnmalloc+17↑j
.text:0000000000005D3B                 sub     rsp, 8
.text:0000000000005D3F                 call    xalloc_die
.text:0000000000005D3F ; } // starts at 5D20
.text:0000000000005D3F xnmalloc        endp
.text:0000000000005D3F
.text:0000000000005D3F ; ---------------------------------------------------------------------------
.text:0000000000005D44                 align 10h
.text:0000000000005D50
.text:0000000000005D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D50
.text:0000000000005D50
.text:0000000000005D50                 public xcharalloc
.text:0000000000005D50 xcharalloc      proc near
.text:0000000000005D50 ; __unwind {
.text:0000000000005D50                 jmp     short xmalloc
.text:0000000000005D50 ; } // starts at 5D50
.text:0000000000005D50 xcharalloc      endp
.text:0000000000005D50
.text:0000000000005D50 ; ---------------------------------------------------------------------------
.text:0000000000005D52                 align 20h
.text:0000000000005D60
.text:0000000000005D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D60
.text:0000000000005D60 ; Attributes: info_from_lumina
.text:0000000000005D60
.text:0000000000005D60 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005D60                 public xrealloc
.text:0000000000005D60 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000005D60                                         ; quotearg_n_options+182↑p ...
.text:0000000000005D60 ; __unwind {
.text:0000000000005D60                 test    rsi, rsi
.text:0000000000005D63                 push    rbx
.text:0000000000005D64                 mov     rbx, rsi
.text:0000000000005D67                 jnz     short loc_5D6E
.text:0000000000005D69                 test    rdi, rdi
.text:0000000000005D6C                 jnz     short loc_5D88
.text:0000000000005D6E
.text:0000000000005D6E loc_5D6E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000005D6E                 mov     rsi, rbx        ; size
.text:0000000000005D71                 call    _realloc
.text:0000000000005D76                 test    rax, rax
.text:0000000000005D79                 jnz     short loc_5D80
.text:0000000000005D7B                 test    rbx, rbx
.text:0000000000005D7E                 jnz     short loc_5D91
.text:0000000000005D80
.text:0000000000005D80 loc_5D80:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005D80                 pop     rbx
.text:0000000000005D81                 retn
.text:0000000000005D81 ; ---------------------------------------------------------------------------
.text:0000000000005D82                 align 8
.text:0000000000005D88
.text:0000000000005D88 loc_5D88:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005D88                 call    free
.text:0000000000005D8D                 xor     eax, eax
.text:0000000000005D8F                 pop     rbx
.text:0000000000005D90                 retn
.text:0000000000005D91 ; ---------------------------------------------------------------------------
.text:0000000000005D91
.text:0000000000005D91 loc_5D91:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005D91                 call    xalloc_die
.text:0000000000005D91 ; } // starts at 5D60
.text:0000000000005D91 xrealloc        endp
.text:0000000000005D91
.text:0000000000005D91 ; ---------------------------------------------------------------------------
.text:0000000000005D96                 align 20h
.text:0000000000005DA0
.text:0000000000005DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DA0
.text:0000000000005DA0 ; Attributes: info_from_lumina
.text:0000000000005DA0
.text:0000000000005DA0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005DA0                 public xnrealloc
.text:0000000000005DA0 xnrealloc       proc near
.text:0000000000005DA0 ; __unwind {
.text:0000000000005DA0                 mov     rax, rsi
.text:0000000000005DA3                 mul     rdx
.text:0000000000005DA6                 mov     rsi, rax
.text:0000000000005DA9                 seto    al
.text:0000000000005DAC                 test    rsi, rsi
.text:0000000000005DAF                 js      short loc_5DBB
.text:0000000000005DB1                 movzx   eax, al
.text:0000000000005DB4                 test    rax, rax
.text:0000000000005DB7                 jnz     short loc_5DBB
.text:0000000000005DB9                 jmp     short xrealloc
.text:0000000000005DBB ; ---------------------------------------------------------------------------
.text:0000000000005DBB
.text:0000000000005DBB loc_5DBB:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000005DBB                                         ; xnrealloc+17↑j
.text:0000000000005DBB                 sub     rsp, 8
.text:0000000000005DBF                 call    xalloc_die
.text:0000000000005DBF ; } // starts at 5DA0
.text:0000000000005DBF xnrealloc       endp
.text:0000000000005DBF
.text:0000000000005DBF ; ---------------------------------------------------------------------------
.text:0000000000005DC4                 align 10h
.text:0000000000005DD0
.text:0000000000005DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DD0
.text:0000000000005DD0 ; Attributes: info_from_lumina
.text:0000000000005DD0
.text:0000000000005DD0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005DD0                 public x2nrealloc
.text:0000000000005DD0 x2nrealloc      proc near
.text:0000000000005DD0 ; __unwind {
.text:0000000000005DD0                 test    rdi, rdi
.text:0000000000005DD3                 mov     r9, rdx
.text:0000000000005DD6                 mov     rcx, [rsi]
.text:0000000000005DD9                 jz      short loc_5E10
.text:0000000000005DDB                 xor     edx, edx
.text:0000000000005DDD                 mov     rax, 5555555555555554h
.text:0000000000005DE7                 div     r9
.text:0000000000005DEA                 cmp     rax, rcx
.text:0000000000005DED                 jbe     short loc_5E2B
.text:0000000000005DEF                 mov     rax, rcx
.text:0000000000005DF2                 shr     rax, 1
.text:0000000000005DF5                 lea     rcx, [rax+rcx+1]
.text:0000000000005DFA
.text:0000000000005DFA loc_5DFA:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000005DFA                 mov     [rsi], rcx
.text:0000000000005DFD                 imul    rcx, r9
.text:0000000000005E01                 mov     rsi, rcx
.text:0000000000005E04                 jmp     xrealloc
.text:0000000000005E04 ; ---------------------------------------------------------------------------
.text:0000000000005E09                 align 10h
.text:0000000000005E10
.text:0000000000005E10 loc_5E10:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005E10                 test    rcx, rcx
.text:0000000000005E13                 jz      short loc_5E38
.text:0000000000005E15
.text:0000000000005E15 loc_5E15:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005E15                 mov     rax, rcx
.text:0000000000005E18                 mul     r9
.text:0000000000005E1B                 seto    dl
.text:0000000000005E1E                 test    rax, rax
.text:0000000000005E21                 movzx   edx, dl
.text:0000000000005E24                 js      short loc_5E2B
.text:0000000000005E26                 test    rdx, rdx
.text:0000000000005E29                 jz      short loc_5DFA
.text:0000000000005E2B
.text:0000000000005E2B loc_5E2B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000005E2B                                         ; x2nrealloc+54↑j
.text:0000000000005E2B                 sub     rsp, 8
.text:0000000000005E2F                 call    xalloc_die
.text:0000000000005E2F ; ---------------------------------------------------------------------------
.text:0000000000005E34                 align 8
.text:0000000000005E38
.text:0000000000005E38 loc_5E38:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005E38                 xor     edx, edx
.text:0000000000005E3A                 mov     eax, 80h
.text:0000000000005E3F                 xor     r8d, r8d
.text:0000000000005E42                 div     r9
.text:0000000000005E45                 test    rax, rax
.text:0000000000005E48                 setz    r8b
.text:0000000000005E4C                 lea     rcx, [r8+rax]
.text:0000000000005E50                 jmp     short loc_5E15
.text:0000000000005E50 ; } // starts at 5DD0
.text:0000000000005E50 x2nrealloc      endp
.text:0000000000005E50
.text:0000000000005E50 ; ---------------------------------------------------------------------------
.text:0000000000005E52                 align 20h
.text:0000000000005E60
.text:0000000000005E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E60
.text:0000000000005E60 ; Attributes: info_from_lumina
.text:0000000000005E60
.text:0000000000005E60 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005E60                 public x2realloc
.text:0000000000005E60 x2realloc       proc near
.text:0000000000005E60 ; __unwind {
.text:0000000000005E60                 test    rdi, rdi
.text:0000000000005E63                 mov     rax, [rsi]
.text:0000000000005E66                 jz      short loc_5E90
.text:0000000000005E68                 mov     rdx, 5555555555555553h
.text:0000000000005E72                 cmp     rax, rdx
.text:0000000000005E75                 ja      short loc_5EA1
.text:0000000000005E77                 mov     rdx, rax
.text:0000000000005E7A                 shr     rdx, 1
.text:0000000000005E7D                 lea     rax, [rdx+rax+1]
.text:0000000000005E82
.text:0000000000005E82 loc_5E82:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005E82                 mov     [rsi], rax
.text:0000000000005E85                 mov     rsi, rax
.text:0000000000005E88                 jmp     xrealloc
.text:0000000000005E88 ; ---------------------------------------------------------------------------
.text:0000000000005E8D                 align 10h
.text:0000000000005E90
.text:0000000000005E90 loc_5E90:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005E90                 test    rax, rax
.text:0000000000005E93                 mov     edx, 80h
.text:0000000000005E98                 cmovz   rax, rdx
.text:0000000000005E9C                 test    rax, rax
.text:0000000000005E9F                 jns     short loc_5E82
.text:0000000000005EA1
.text:0000000000005EA1 loc_5EA1:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005EA1                 sub     rsp, 8
.text:0000000000005EA5                 call    xalloc_die
.text:0000000000005EA5 ; } // starts at 5E60
.text:0000000000005EA5 x2realloc       endp
.text:0000000000005EA5
.text:0000000000005EA5 ; ---------------------------------------------------------------------------
.text:0000000000005EAA                 align 10h
.text:0000000000005EB0
.text:0000000000005EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EB0
.text:0000000000005EB0
.text:0000000000005EB0 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005EB0                 public xzalloc
.text:0000000000005EB0 xzalloc         proc near
.text:0000000000005EB0 ; __unwind {
.text:0000000000005EB0                 push    rbx
.text:0000000000005EB1                 mov     rbx, rdi
.text:0000000000005EB4                 call    xmalloc
.text:0000000000005EB9                 mov     rdx, rbx        ; n
.text:0000000000005EBC                 xor     esi, esi        ; c
.text:0000000000005EBE                 mov     rdi, rax        ; s
.text:0000000000005EC1                 pop     rbx
.text:0000000000005EC2                 jmp     _memset
.text:0000000000005EC2 ; } // starts at 5EB0
.text:0000000000005EC2 xzalloc         endp
.text:0000000000005EC2
.text:0000000000005EC2 ; ---------------------------------------------------------------------------
.text:0000000000005EC7                 align 10h
.text:0000000000005ED0
.text:0000000000005ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005ED0
.text:0000000000005ED0 ; Attributes: info_from_lumina
.text:0000000000005ED0
.text:0000000000005ED0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005ED0                 public xcalloc
.text:0000000000005ED0 xcalloc         proc near
.text:0000000000005ED0 ; __unwind {
.text:0000000000005ED0                 mov     rax, rdi
.text:0000000000005ED3                 sub     rsp, 8
.text:0000000000005ED7                 mul     rsi
.text:0000000000005EDA                 seto    dl
.text:0000000000005EDD                 test    rax, rax
.text:0000000000005EE0                 js      short loc_5EF9
.text:0000000000005EE2                 movzx   edx, dl
.text:0000000000005EE5                 test    rdx, rdx
.text:0000000000005EE8                 jnz     short loc_5EF9
.text:0000000000005EEA                 call    _calloc
.text:0000000000005EEF                 test    rax, rax
.text:0000000000005EF2                 jz      short loc_5EF9
.text:0000000000005EF4                 add     rsp, 8
.text:0000000000005EF8                 retn
.text:0000000000005EF9 ; ---------------------------------------------------------------------------
.text:0000000000005EF9
.text:0000000000005EF9 loc_5EF9:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005EF9                                         ; xcalloc+18↑j ...
.text:0000000000005EF9                 call    xalloc_die
.text:0000000000005EF9 ; } // starts at 5ED0
.text:0000000000005EF9 xcalloc         endp
.text:0000000000005EF9
.text:0000000000005EF9 ; ---------------------------------------------------------------------------
.text:0000000000005EFE                 align 20h
.text:0000000000005F00
.text:0000000000005F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F00
.text:0000000000005F00 ; Attributes: info_from_lumina
.text:0000000000005F00
.text:0000000000005F00 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005F00                 public xmemdup
.text:0000000000005F00 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005F00                                         ; xstrdup+11↓j
.text:0000000000005F00 ; __unwind {
.text:0000000000005F00                 push    rbp
.text:0000000000005F01                 push    rbx
.text:0000000000005F02                 mov     rbp, rdi
.text:0000000000005F05                 mov     rdi, rsi
.text:0000000000005F08                 mov     rbx, rsi
.text:0000000000005F0B                 sub     rsp, 8
.text:0000000000005F0F                 call    xmalloc
.text:0000000000005F14                 add     rsp, 8
.text:0000000000005F18                 mov     rdx, rbx        ; n
.text:0000000000005F1B                 mov     rsi, rbp        ; src
.text:0000000000005F1E                 pop     rbx
.text:0000000000005F1F                 pop     rbp
.text:0000000000005F20                 mov     rdi, rax        ; dest
.text:0000000000005F23                 jmp     _memcpy
.text:0000000000005F23 ; } // starts at 5F00
.text:0000000000005F23 xmemdup         endp
.text:0000000000005F23
.text:0000000000005F23 ; ---------------------------------------------------------------------------
.text:0000000000005F28                 align 10h
.text:0000000000005F30
.text:0000000000005F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F30
.text:0000000000005F30
.text:0000000000005F30 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005F30                 public xstrdup
.text:0000000000005F30 xstrdup         proc near               ; CODE XREF: main+3AA↑p
.text:0000000000005F30                                         ; user_group_str+64↑j ...
.text:0000000000005F30 ; __unwind {
.text:0000000000005F30                 push    rbx
.text:0000000000005F31                 mov     rbx, rdi
.text:0000000000005F34                 call    _strlen
.text:0000000000005F39                 mov     rdi, rbx        ; src
.text:0000000000005F3C                 lea     rsi, [rax+1]    ; n
.text:0000000000005F40                 pop     rbx
.text:0000000000005F41                 jmp     short xmemdup
.text:0000000000005F41 ; } // starts at 5F30
.text:0000000000005F41 xstrdup         endp
.text:0000000000005F41
.text:0000000000005F41 ; ---------------------------------------------------------------------------
.text:0000000000005F43                 align 10h
.text:0000000000005F50
.text:0000000000005F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F50
.text:0000000000005F50 ; Attributes: noreturn info_from_lumina
.text:0000000000005F50
.text:0000000000005F50 ; void __cdecl xalloc_die()
.text:0000000000005F50                 public xalloc_die
.text:0000000000005F50 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_4EA6↑p
.text:0000000000005F50                                         ; xmalloc:loc_5D15↑p ...
.text:0000000000005F50 ; __unwind {
.text:0000000000005F50                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005F57                 sub     rsp, 8
.text:0000000000005F5B                 mov     edx, 5          ; category
.text:0000000000005F60                 xor     edi, edi        ; domainname
.text:0000000000005F62                 call    _dcgettext
.text:0000000000005F67                 mov     edi, cs:exit_failure ; status
.text:0000000000005F6D                 lea     rdx, aInvalidGroupS+0Fh ; format
.text:0000000000005F74                 mov     rcx, rax
.text:0000000000005F77                 xor     esi, esi        ; errnum
.text:0000000000005F79                 xor     eax, eax
.text:0000000000005F7B                 call    _error
.text:0000000000005F80                 call    _abort
.text:0000000000005F80 ; } // starts at 5F50
.text:0000000000005F80 xalloc_die      endp
.text:0000000000005F80
.text:0000000000005F80 ; ---------------------------------------------------------------------------
.text:0000000000005F85                 align 10h
.text:0000000000005F90
.text:0000000000005F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F90
.text:0000000000005F90
.text:0000000000005F90                 public xfts_open
.text:0000000000005F90 xfts_open       proc near               ; CODE XREF: chown_files+3F↑p
.text:0000000000005F90 ; __unwind {
.text:0000000000005F90                 sub     rsp, 8
.text:0000000000005F94                 or      esi, 200h
.text:0000000000005F9A                 call    rpl_fts_open
.text:0000000000005F9F                 test    rax, rax
.text:0000000000005FA2                 jz      short loc_5FB0
.text:0000000000005FA4                 add     rsp, 8
.text:0000000000005FA8                 retn
.text:0000000000005FA8 ; ---------------------------------------------------------------------------
.text:0000000000005FA9                 align 10h
.text:0000000000005FB0
.text:0000000000005FB0 loc_5FB0:                               ; CODE XREF: xfts_open+12↑j
.text:0000000000005FB0                 call    ___errno_location
.text:0000000000005FB5                 cmp     dword ptr [rax], 16h
.text:0000000000005FB8                 jz      short loc_5FC0
.text:0000000000005FBA                 call    xalloc_die
.text:0000000000005FBA ; ---------------------------------------------------------------------------
.text:0000000000005FBF                 align 20h
.text:0000000000005FC0
.text:0000000000005FC0 loc_5FC0:                               ; CODE XREF: xfts_open+28↑j
.text:0000000000005FC0                 lea     rcx, __PRETTY_FUNCTION___3434 ; "xfts_open"
.text:0000000000005FC7                 lea     rsi, file       ; "../coreutils-8.31/lib/xfts.c"
.text:0000000000005FCE                 lea     rdi, assertion  ; "errno != EINVAL"
.text:0000000000005FD5                 mov     edx, 29h ; ')'  ; line
.text:0000000000005FDA                 call    ___assert_fail
.text:0000000000005FDA ; } // starts at 5F90
.text:0000000000005FDA xfts_open       endp
.text:0000000000005FDA
.text:0000000000005FDA ; ---------------------------------------------------------------------------
.text:0000000000005FDF                 align 20h
.text:0000000000005FE0
.text:0000000000005FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FE0
.text:0000000000005FE0
.text:0000000000005FE0                 public cycle_warning_required
.text:0000000000005FE0 cycle_warning_required proc near        ; CODE XREF: change_file_owner+79↑p
.text:0000000000005FE0 ; __unwind {
.text:0000000000005FE0                 mov     edx, [rdi+48h]
.text:0000000000005FE3                 mov     eax, 1
.text:0000000000005FE8                 and     edx, 11h
.text:0000000000005FEB                 cmp     edx, 10h
.text:0000000000005FEE                 jz      short locret_5FF7
.text:0000000000005FF0                 xor     eax, eax
.text:0000000000005FF2                 cmp     edx, 11h
.text:0000000000005FF5                 jz      short loc_6000
.text:0000000000005FF7
.text:0000000000005FF7 locret_5FF7:                            ; CODE XREF: cycle_warning_required+E↑j
.text:0000000000005FF7                 rep retn
.text:0000000000005FF7 ; ---------------------------------------------------------------------------
.text:0000000000005FF9                 align 20h
.text:0000000000006000
.text:0000000000006000 loc_6000:                               ; CODE XREF: cycle_warning_required+15↑j
.text:0000000000006000                 cmp     qword ptr [rsi+58h], 0
.text:0000000000006005                 setnz   al
.text:0000000000006008                 retn
.text:0000000000006008 ; } // starts at 5FE0
.text:0000000000006008 cycle_warning_required endp
.text:0000000000006008
.text:0000000000006008 ; ---------------------------------------------------------------------------
.text:0000000000006009                 align 10h
.text:0000000000006010
.text:0000000000006010 ; =============== S U B R O U T I N E =======================================
.text:0000000000006010
.text:0000000000006010
.text:0000000000006010 ; __int64 __fastcall xstrtoul(char *nptr)
.text:0000000000006010                 public xstrtoul
.text:0000000000006010 xstrtoul        proc near               ; CODE XREF: main+3CD↑p
.text:0000000000006010
.text:0000000000006010 base            = dword ptr -50h
.text:0000000000006010 endptr          = qword ptr -48h
.text:0000000000006010 var_40          = qword ptr -40h
.text:0000000000006010
.text:0000000000006010 ; __unwind {
.text:0000000000006010                 push    r15
.text:0000000000006012                 push    r14
.text:0000000000006014                 push    r13
.text:0000000000006016                 push    r12
.text:0000000000006018                 push    rbp
.text:0000000000006019                 push    rbx
.text:000000000000601A                 sub     rsp, 28h
.text:000000000000601E                 mov     rax, fs:28h
.text:0000000000006027                 mov     [rsp+58h+var_40], rax
.text:000000000000602C                 xor     eax, eax
.text:000000000000602E                 cmp     edx, 24h ; '$'
.text:0000000000006031                 ja      loc_6395
.text:0000000000006037                 lea     rax, [rsp+58h+endptr]
.text:000000000000603C                 mov     r15, rsi
.text:000000000000603F                 test    rsi, rsi
.text:0000000000006042                 mov     rbp, rdi
.text:0000000000006045                 mov     [rsp+58h+base], edx
.text:0000000000006049                 mov     r14, rcx
.text:000000000000604C                 mov     r13, r8
.text:000000000000604F                 cmovz   r15, rax
.text:0000000000006053                 call    ___errno_location
.text:0000000000006058                 mov     dword ptr [rax], 0
.text:000000000000605E                 mov     r12, rax
.text:0000000000006061                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000006065                 call    ___ctype_b_loc
.text:000000000000606A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000606E                 mov     rsi, [rax]
.text:0000000000006071                 mov     rax, rbp
.text:0000000000006074                 jmp     short loc_6087
.text:0000000000006074 ; ---------------------------------------------------------------------------
.text:0000000000006076                 align 20h
.text:0000000000006080
.text:0000000000006080 loc_6080:                               ; CODE XREF: xstrtoul+7F↓j
.text:0000000000006080                 add     rax, 1
.text:0000000000006084                 movzx   ebx, byte ptr [rax]
.text:0000000000006087
.text:0000000000006087 loc_6087:                               ; CODE XREF: xstrtoul+64↑j
.text:0000000000006087                 movzx   ecx, bl
.text:000000000000608A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000608F                 jnz     short loc_6080
.text:0000000000006091                 cmp     bl, 2Dh ; '-'
.text:0000000000006094                 jz      short loc_60E8
.text:0000000000006096                 mov     rsi, r15        ; endptr
.text:0000000000006099                 mov     rdi, rbp        ; nptr
.text:000000000000609C                 call    _strtoul
.text:00000000000060A1                 mov     rcx, [r15]
.text:00000000000060A4                 mov     rbx, rax
.text:00000000000060A7                 cmp     rcx, rbp
.text:00000000000060AA                 jz      short loc_60D8
.text:00000000000060AC                 mov     eax, [r12]
.text:00000000000060B0                 test    eax, eax
.text:00000000000060B2                 jz      short loc_6118
.text:00000000000060B4                 cmp     eax, 22h ; '"'
.text:00000000000060B7                 mov     ebp, 1
.text:00000000000060BC                 jnz     short loc_60E8
.text:00000000000060BE
.text:00000000000060BE loc_60BE:                               ; CODE XREF: xstrtoul+10A↓j
.text:00000000000060BE                 test    r13, r13
.text:00000000000060C1                 jz      short loc_60CC
.text:00000000000060C3                 movzx   r12d, byte ptr [rcx]
.text:00000000000060C7                 test    r12b, r12b
.text:00000000000060CA                 jnz     short loc_6147
.text:00000000000060CC
.text:00000000000060CC loc_60CC:                               ; CODE XREF: xstrtoul+B1↑j
.text:00000000000060CC                 mov     [r14], rbx
.text:00000000000060CF                 jmp     short loc_60ED
.text:00000000000060CF ; ---------------------------------------------------------------------------
.text:00000000000060D1                 align 8
.text:00000000000060D8
.text:00000000000060D8 loc_60D8:                               ; CODE XREF: xstrtoul+9A↑j
.text:00000000000060D8                 test    r13, r13
.text:00000000000060DB                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000060E0                 jnz     short loc_6120
.text:00000000000060E2                 nop     word ptr [rax+rax+00h]
.text:00000000000060E8
.text:00000000000060E8 loc_60E8:                               ; CODE XREF: xstrtoul+84↑j
.text:00000000000060E8                                         ; xstrtoul+AC↑j ...
.text:00000000000060E8                 mov     ebp, 4
.text:00000000000060ED
.text:00000000000060ED loc_60ED:                               ; CODE XREF: xstrtoul+BF↑j
.text:00000000000060ED                                         ; xstrtoul+217↓j ...
.text:00000000000060ED                 mov     rdi, [rsp+58h+var_40]
.text:00000000000060F2                 xor     rdi, fs:28h
.text:00000000000060FB                 mov     eax, ebp
.text:00000000000060FD                 jnz     loc_6390
.text:0000000000006103                 add     rsp, 28h
.text:0000000000006107                 pop     rbx
.text:0000000000006108                 pop     rbp
.text:0000000000006109                 pop     r12
.text:000000000000610B                 pop     r13
.text:000000000000610D                 pop     r14
.text:000000000000610F                 pop     r15
.text:0000000000006111                 retn
.text:0000000000006111 ; ---------------------------------------------------------------------------
.text:0000000000006112                 align 8
.text:0000000000006118
.text:0000000000006118 loc_6118:                               ; CODE XREF: xstrtoul+A2↑j
.text:0000000000006118                 xor     ebp, ebp
.text:000000000000611A                 jmp     short loc_60BE
.text:000000000000611A ; ---------------------------------------------------------------------------
.text:000000000000611C                 align 20h
.text:0000000000006120
.text:0000000000006120 loc_6120:                               ; CODE XREF: xstrtoul+D0↑j
.text:0000000000006120                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000006125                 test    r12b, r12b
.text:0000000000006128                 jz      short loc_60E8
.text:000000000000612A                 movsx   esi, r12b       ; c
.text:000000000000612E                 mov     rdi, r13        ; s
.text:0000000000006131                 xor     ebp, ebp
.text:0000000000006133                 call    _strchr
.text:0000000000006138                 test    rax, rax
.text:000000000000613B                 mov     ebx, 1
.text:0000000000006140                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000006145                 jz      short loc_60E8
.text:0000000000006147
.text:0000000000006147 loc_6147:                               ; CODE XREF: xstrtoul+BA↑j
.text:0000000000006147                 movsx   esi, r12b       ; c
.text:000000000000614B                 mov     rdi, r13        ; s
.text:000000000000614E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000006153                 call    _strchr
.text:0000000000006158                 test    rax, rax
.text:000000000000615B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000006160                 jz      def_61E6        ; jumptable 00000000000061E6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000006166                 lea     eax, [r12-45h]
.text:000000000000616B                 cmp     al, 2Fh ; '/'
.text:000000000000616D                 ja      short loc_61C0
.text:000000000000616F                 mov     rdx, 814400308945h
.text:0000000000006179                 bt      rdx, rax
.text:000000000000617D                 jnb     short loc_61C0
.text:000000000000617F                 mov     esi, 30h ; '0'  ; c
.text:0000000000006184                 mov     rdi, r13        ; s
.text:0000000000006187                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000618C                 call    _strchr
.text:0000000000006191                 test    rax, rax
.text:0000000000006194                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000006199                 jz      short loc_61C0
.text:000000000000619B                 movzx   eax, byte ptr [rcx+1]
.text:000000000000619F                 cmp     al, 44h ; 'D'
.text:00000000000061A1                 jz      short loc_61AF
.text:00000000000061A3                 cmp     al, 69h ; 'i'
.text:00000000000061A5                 jz      loc_6378
.text:00000000000061AB                 cmp     al, 42h ; 'B'
.text:00000000000061AD                 jnz     short loc_61C0
.text:00000000000061AF
.text:00000000000061AF loc_61AF:                               ; CODE XREF: xstrtoul+191↑j
.text:00000000000061AF                 mov     edi, 2
.text:00000000000061B4                 mov     esi, 3E8h
.text:00000000000061B9                 jmp     short loc_61CA
.text:00000000000061B9 ; ---------------------------------------------------------------------------
.text:00000000000061BB                 align 20h
.text:00000000000061C0
.text:00000000000061C0 loc_61C0:                               ; CODE XREF: xstrtoul+15D↑j
.text:00000000000061C0                                         ; xstrtoul+16D↑j ...
.text:00000000000061C0                 mov     edi, 1
.text:00000000000061C5                 mov     esi, 400h
.text:00000000000061CA
.text:00000000000061CA loc_61CA:                               ; CODE XREF: xstrtoul+1A9↑j
.text:00000000000061CA                                         ; xstrtoul+37B↓j
.text:00000000000061CA                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:00000000000061CE                 cmp     r12b, 35h
.text:00000000000061D2                 ja      short def_61E6  ; jumptable 00000000000061E6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000061D4                 lea     rdx, jpt_61E6
.text:00000000000061DB                 movzx   r12d, r12b
.text:00000000000061DF                 movsxd  rax, ds:(jpt_61E6 - 0BAE8h)[rdx+r12*4]
.text:00000000000061E3                 add     rax, rdx
.text:00000000000061E6                 jmp     rax             ; switch jump
.text:00000000000061E8 ; ---------------------------------------------------------------------------
.text:00000000000061E8
.text:00000000000061E8 loc_61E8:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000061E8                                         ; DATA XREF: .rodata:jpt_61E6↓o
.text:00000000000061E8                 mov     rax, rbx        ; jumptable 00000000000061E6 cases 77,109
.text:00000000000061EB                 mul     rsi
.text:00000000000061EE                 jo      loc_63E1
.text:00000000000061F4                 xor     r8d, r8d
.text:00000000000061F7
.text:00000000000061F7 loc_61F7:                               ; CODE XREF: xstrtoul+34E↓j
.text:00000000000061F7                                         ; xstrtoul+35E↓j ...
.text:00000000000061F7                 mul     rsi
.text:00000000000061FA                 jo      loc_63D2
.text:0000000000006200                 mov     rbx, rax
.text:0000000000006203
.text:0000000000006203 loc_6203:                               ; CODE XREF: xstrtoul+3CC↓j
.text:0000000000006203                 or      ebp, r8d
.text:0000000000006206                 db      2Eh
.text:0000000000006206                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006210
.text:0000000000006210 loc_6210:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006210                                         ; xstrtoul+23B↓j ...
.text:0000000000006210                 movsxd  rdi, edi        ; jumptable 00000000000061E6 case 99
.text:0000000000006213                 mov     eax, ebp
.text:0000000000006215                 add     rcx, rdi
.text:0000000000006218                 or      eax, 2
.text:000000000000621B                 mov     [r15], rcx
.text:000000000000621E                 cmp     byte ptr [rcx], 0
.text:0000000000006221                 mov     [r14], rbx
.text:0000000000006224                 cmovnz  ebp, eax
.text:0000000000006227                 jmp     loc_60ED
.text:000000000000622C ; ---------------------------------------------------------------------------
.text:000000000000622C
.text:000000000000622C def_61E6:                               ; CODE XREF: xstrtoul+150↑j
.text:000000000000622C                                         ; xstrtoul+1C2↑j ...
.text:000000000000622C                 mov     [r14], rbx      ; jumptable 00000000000061E6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000622F                 or      ebp, 2
.text:0000000000006232                 jmp     loc_60ED
.text:0000000000006237 ; ---------------------------------------------------------------------------
.text:0000000000006237
.text:0000000000006237 loc_6237:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006237                                         ; DATA XREF: .rodata:jpt_61E6↓o
.text:0000000000006237                 mov     edx, 2          ; jumptable 00000000000061E6 case 119
.text:000000000000623C                 mov     rax, rdx
.text:000000000000623F                 mul     rbx
.text:0000000000006242                 jo      loc_62DE
.text:0000000000006248                 add     rbx, rbx
.text:000000000000624B                 jmp     short loc_6210  ; jumptable 00000000000061E6 case 99
.text:000000000000624D ; ---------------------------------------------------------------------------
.text:000000000000624D
.text:000000000000624D loc_624D:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000624D                                         ; DATA XREF: .rodata:jpt_61E6↓o
.text:000000000000624D                 mov     edx, 200h       ; jumptable 00000000000061E6 case 98
.text:0000000000006252                 mov     rax, rdx
.text:0000000000006255                 mul     rbx
.text:0000000000006258                 jo      loc_62DE
.text:000000000000625E                 shl     rbx, 9
.text:0000000000006262                 jmp     short loc_6210  ; jumptable 00000000000061E6 case 99
.text:0000000000006264 ; ---------------------------------------------------------------------------
.text:0000000000006264
.text:0000000000006264 loc_6264:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006264                                         ; DATA XREF: .rodata:jpt_61E6↓o
.text:0000000000006264                 mov     r8d, 7          ; jumptable 00000000000061E6 case 90
.text:000000000000626A                 xor     r9d, r9d
.text:000000000000626D                 nop     dword ptr [rax]
.text:0000000000006270
.text:0000000000006270 loc_6270:                               ; CODE XREF: xstrtoul+273↓j
.text:0000000000006270                 mov     rax, rbx
.text:0000000000006273                 mul     rsi
.text:0000000000006276                 mov     rbx, rax
.text:0000000000006279                 jo      loc_640E
.text:000000000000627F
.text:000000000000627F loc_627F:                               ; CODE XREF: xstrtoul+408↓j
.text:000000000000627F                 sub     r8d, 1
.text:0000000000006283                 jnz     short loc_6270
.text:0000000000006285
.text:0000000000006285 loc_6285:                               ; CODE XREF: xstrtoul+29D↓j
.text:0000000000006285                                         ; xstrtoul+2BD↓j ...
.text:0000000000006285                 or      ebp, r9d
.text:0000000000006288                 jmp     short loc_6210  ; jumptable 00000000000061E6 case 99
.text:000000000000628A ; ---------------------------------------------------------------------------
.text:000000000000628A
.text:000000000000628A loc_628A:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000628A                                         ; DATA XREF: .rodata:jpt_61E6↓o
.text:000000000000628A                 mov     r8d, 8          ; jumptable 00000000000061E6 case 89
.text:0000000000006290                 xor     r9d, r9d
.text:0000000000006293                 nop     dword ptr [rax+rax+00h]
.text:0000000000006298
.text:0000000000006298 loc_6298:                               ; CODE XREF: xstrtoul+29B↓j
.text:0000000000006298                 mov     rax, rbx
.text:000000000000629B                 mul     rsi
.text:000000000000629E                 mov     rbx, rax
.text:00000000000062A1                 jo      loc_63F0
.text:00000000000062A7
.text:00000000000062A7 loc_62A7:                               ; CODE XREF: xstrtoul+3EA↓j
.text:00000000000062A7                 sub     r8d, 1
.text:00000000000062AB                 jnz     short loc_6298
.text:00000000000062AD                 jmp     short loc_6285
.text:00000000000062AF ; ---------------------------------------------------------------------------
.text:00000000000062AF
.text:00000000000062AF loc_62AF:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000062AF                                         ; DATA XREF: .rodata:jpt_61E6↓o
.text:00000000000062AF                 mov     r8d, 4          ; jumptable 00000000000061E6 cases 84,116
.text:00000000000062B5                 xor     r9d, r9d
.text:00000000000062B8
.text:00000000000062B8 loc_62B8:                               ; CODE XREF: xstrtoul+2BB↓j
.text:00000000000062B8                 mov     rax, rbx
.text:00000000000062BB                 mul     rsi
.text:00000000000062BE                 mov     rbx, rax
.text:00000000000062C1                 jo      loc_63C3
.text:00000000000062C7
.text:00000000000062C7 loc_62C7:                               ; CODE XREF: xstrtoul+3BD↓j
.text:00000000000062C7                 sub     r8d, 1
.text:00000000000062CB                 jnz     short loc_62B8
.text:00000000000062CD                 jmp     short loc_6285
.text:00000000000062CF ; ---------------------------------------------------------------------------
.text:00000000000062CF
.text:00000000000062CF loc_62CF:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000062CF                                         ; DATA XREF: .rodata:jpt_61E6↓o
.text:00000000000062CF                 mov     rax, rbx        ; jumptable 00000000000061E6 cases 75,107
.text:00000000000062D2                 mul     rsi
.text:00000000000062D5                 mov     rbx, rax
.text:00000000000062D8                 jno     loc_6210        ; jumptable 00000000000061E6 case 99
.text:00000000000062DE
.text:00000000000062DE loc_62DE:                               ; CODE XREF: xstrtoul+232↑j
.text:00000000000062DE                                         ; xstrtoul+248↑j ...
.text:00000000000062DE                 mov     ebp, 1
.text:00000000000062E3                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000062E7                 jmp     loc_6210        ; jumptable 00000000000061E6 case 99
.text:00000000000062E7 ; ---------------------------------------------------------------------------
.text:00000000000062EC                 align 10h
.text:00000000000062F0
.text:00000000000062F0 loc_62F0:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000062F0                                         ; DATA XREF: .rodata:jpt_61E6↓o
.text:00000000000062F0                 mov     r8d, 5          ; jumptable 00000000000061E6 case 80
.text:00000000000062F6                 xor     r9d, r9d
.text:00000000000062F9
.text:00000000000062F9 loc_62F9:                               ; CODE XREF: xstrtoul+2FC↓j
.text:00000000000062F9                 mov     rax, rbx
.text:00000000000062FC                 mul     rsi
.text:00000000000062FF                 mov     rbx, rax
.text:0000000000006302                 jo      loc_63FF
.text:0000000000006308
.text:0000000000006308 loc_6308:                               ; CODE XREF: xstrtoul+3F9↓j
.text:0000000000006308                 sub     r8d, 1
.text:000000000000630C                 jnz     short loc_62F9
.text:000000000000630E                 jmp     loc_6285
.text:0000000000006313 ; ---------------------------------------------------------------------------
.text:0000000000006313
.text:0000000000006313 loc_6313:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006313                                         ; DATA XREF: .rodata:jpt_61E6↓o
.text:0000000000006313                 mov     r8d, 6          ; jumptable 00000000000061E6 case 69
.text:0000000000006319                 xor     r9d, r9d
.text:000000000000631C
.text:000000000000631C loc_631C:                               ; CODE XREF: xstrtoul+31F↓j
.text:000000000000631C                 mov     rax, rbx
.text:000000000000631F                 mul     rsi
.text:0000000000006322                 mov     rbx, rax
.text:0000000000006325                 jo      loc_63B4
.text:000000000000632B
.text:000000000000632B loc_632B:                               ; CODE XREF: xstrtoul+3AE↓j
.text:000000000000632B                 sub     r8d, 1
.text:000000000000632F                 jnz     short loc_631C
.text:0000000000006331                 jmp     loc_6285
.text:0000000000006336 ; ---------------------------------------------------------------------------
.text:0000000000006336
.text:0000000000006336 loc_6336:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006336                                         ; DATA XREF: .rodata:jpt_61E6↓o
.text:0000000000006336                 mov     edx, 400h       ; jumptable 00000000000061E6 case 66
.text:000000000000633B                 mov     rax, rdx
.text:000000000000633E                 mul     rbx
.text:0000000000006341                 jo      short loc_62DE
.text:0000000000006343                 shl     rbx, 0Ah
.text:0000000000006347                 jmp     loc_6210        ; jumptable 00000000000061E6 case 99
.text:000000000000634C ; ---------------------------------------------------------------------------
.text:000000000000634C
.text:000000000000634C loc_634C:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000634C                                         ; DATA XREF: .rodata:jpt_61E6↓o
.text:000000000000634C                 mov     rax, rbx        ; jumptable 00000000000061E6 cases 71,103
.text:000000000000634F                 mul     rsi
.text:0000000000006352                 jo      loc_641D
.text:0000000000006358                 xor     r8d, r8d
.text:000000000000635B
.text:000000000000635B loc_635B:                               ; CODE XREF: xstrtoul+417↓j
.text:000000000000635B                 mul     rsi
.text:000000000000635E                 jno     loc_61F7
.text:0000000000006364                 mov     r8d, 1
.text:000000000000636A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000636E                 jmp     loc_61F7
.text:000000000000636E ; ---------------------------------------------------------------------------
.text:0000000000006373                 align 8
.text:0000000000006378
.text:0000000000006378 loc_6378:                               ; CODE XREF: xstrtoul+195↑j
.text:0000000000006378                 xor     edi, edi
.text:000000000000637A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000637E                 mov     esi, 400h
.text:0000000000006383                 setz    dil
.text:0000000000006387                 lea     edi, [rdi+rdi+1]
.text:000000000000638B                 jmp     loc_61CA
.text:0000000000006390 ; ---------------------------------------------------------------------------
.text:0000000000006390
.text:0000000000006390 loc_6390:                               ; CODE XREF: xstrtoul+ED↑j
.text:0000000000006390                 call    ___stack_chk_fail
.text:0000000000006395 ; ---------------------------------------------------------------------------
.text:0000000000006395
.text:0000000000006395 loc_6395:                               ; CODE XREF: xstrtoul+21↑j
.text:0000000000006395                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoul"
.text:000000000000639C                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/xstrtol.c"
.text:00000000000063A3                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00000000000063AA                 mov     edx, 54h ; 'T'  ; line
.text:00000000000063AF                 call    ___assert_fail
.text:00000000000063B4 ; ---------------------------------------------------------------------------
.text:00000000000063B4
.text:00000000000063B4 loc_63B4:                               ; CODE XREF: xstrtoul+315↑j
.text:00000000000063B4                 mov     r9d, 1
.text:00000000000063BA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000063BE                 jmp     loc_632B
.text:00000000000063C3 ; ---------------------------------------------------------------------------
.text:00000000000063C3
.text:00000000000063C3 loc_63C3:                               ; CODE XREF: xstrtoul+2B1↑j
.text:00000000000063C3                 mov     r9d, 1
.text:00000000000063C9                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000063CD                 jmp     loc_62C7
.text:00000000000063D2 ; ---------------------------------------------------------------------------
.text:00000000000063D2
.text:00000000000063D2 loc_63D2:                               ; CODE XREF: xstrtoul+1EA↑j
.text:00000000000063D2                 mov     r8d, 1
.text:00000000000063D8                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000063DC                 jmp     loc_6203
.text:00000000000063E1 ; ---------------------------------------------------------------------------
.text:00000000000063E1
.text:00000000000063E1 loc_63E1:                               ; CODE XREF: xstrtoul+1DE↑j
.text:00000000000063E1                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000063E5                 mov     r8d, 1
.text:00000000000063EB                 jmp     loc_61F7
.text:00000000000063F0 ; ---------------------------------------------------------------------------
.text:00000000000063F0
.text:00000000000063F0 loc_63F0:                               ; CODE XREF: xstrtoul+291↑j
.text:00000000000063F0                 mov     r9d, 1
.text:00000000000063F6                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000063FA                 jmp     loc_62A7
.text:00000000000063FF ; ---------------------------------------------------------------------------
.text:00000000000063FF
.text:00000000000063FF loc_63FF:                               ; CODE XREF: xstrtoul+2F2↑j
.text:00000000000063FF                 mov     r9d, 1
.text:0000000000006405                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006409                 jmp     loc_6308
.text:000000000000640E ; ---------------------------------------------------------------------------
.text:000000000000640E
.text:000000000000640E loc_640E:                               ; CODE XREF: xstrtoul+269↑j
.text:000000000000640E                 mov     r9d, 1
.text:0000000000006414                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006418                 jmp     loc_627F
.text:000000000000641D ; ---------------------------------------------------------------------------
.text:000000000000641D
.text:000000000000641D loc_641D:                               ; CODE XREF: xstrtoul+342↑j
.text:000000000000641D                 mov     r8d, 1
.text:0000000000006423                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006427                 jmp     loc_635B
.text:0000000000006427 ; } // starts at 6010
.text:0000000000006427 xstrtoul        endp
.text:0000000000006427
.text:0000000000006427 ; ---------------------------------------------------------------------------
.text:000000000000642C                 align 10h
.text:0000000000006430
.text:0000000000006430 ; =============== S U B R O U T I N E =======================================
.text:0000000000006430
.text:0000000000006430
.text:0000000000006430 AD_compare      proc near               ; DATA XREF: setup_dir_isra_4+13↓o
.text:0000000000006430 ; __unwind {
.text:0000000000006430                 xor     eax, eax
.text:0000000000006432                 mov     rdx, [rsi+8]
.text:0000000000006436                 cmp     [rdi+8], rdx
.text:000000000000643A                 jz      short loc_6440
.text:000000000000643C                 rep retn
.text:000000000000643C ; ---------------------------------------------------------------------------
.text:000000000000643E                 align 20h
.text:0000000000006440
.text:0000000000006440 loc_6440:                               ; CODE XREF: AD_compare+A↑j
.text:0000000000006440                 mov     rax, [rsi]
.text:0000000000006443                 cmp     [rdi], rax
.text:0000000000006446                 setz    al
.text:0000000000006449                 retn
.text:0000000000006449 ; } // starts at 6430
.text:0000000000006449 AD_compare      endp
.text:0000000000006449
.text:0000000000006449 ; ---------------------------------------------------------------------------
.text:000000000000644A                 align 10h
.text:0000000000006450
.text:0000000000006450 ; =============== S U B R O U T I N E =======================================
.text:0000000000006450
.text:0000000000006450
.text:0000000000006450 AD_hash         proc near               ; DATA XREF: setup_dir_isra_4+1A↓o
.text:0000000000006450 ; __unwind {
.text:0000000000006450                 mov     rax, [rdi+8]
.text:0000000000006454                 xor     edx, edx
.text:0000000000006456                 div     rsi
.text:0000000000006459                 mov     rax, rdx
.text:000000000000645C                 retn
.text:000000000000645C ; } // starts at 6450
.text:000000000000645C AD_hash         endp
.text:000000000000645C
.text:000000000000645C ; ---------------------------------------------------------------------------
.text:000000000000645D                 align 20h
.text:0000000000006460
.text:0000000000006460 ; =============== S U B R O U T I N E =======================================
.text:0000000000006460
.text:0000000000006460
.text:0000000000006460 dev_type_hash   proc near               ; DATA XREF: filesystem_type+6E↓o
.text:0000000000006460 ; __unwind {
.text:0000000000006460                 mov     rax, [rdi]
.text:0000000000006463                 xor     edx, edx
.text:0000000000006465                 div     rsi
.text:0000000000006468                 mov     rax, rdx
.text:000000000000646B                 retn
.text:000000000000646B ; } // starts at 6460
.text:000000000000646B dev_type_hash   endp
.text:000000000000646B
.text:000000000000646B ; ---------------------------------------------------------------------------
.text:000000000000646C                 align 10h
.text:0000000000006470
.text:0000000000006470 ; =============== S U B R O U T I N E =======================================
.text:0000000000006470
.text:0000000000006470
.text:0000000000006470 dev_type_compare proc near              ; DATA XREF: filesystem_type+67↓o
.text:0000000000006470 ; __unwind {
.text:0000000000006470                 mov     rax, [rsi]
.text:0000000000006473                 cmp     [rdi], rax
.text:0000000000006476                 setz    al
.text:0000000000006479                 retn
.text:0000000000006479 ; } // starts at 6470
.text:0000000000006479 dev_type_compare endp
.text:0000000000006479
.text:0000000000006479 ; ---------------------------------------------------------------------------
.text:000000000000647A                 align 20h
.text:0000000000006480
.text:0000000000006480 ; =============== S U B R O U T I N E =======================================
.text:0000000000006480
.text:0000000000006480
.text:0000000000006480 fts_compare_ino proc near               ; DATA XREF: fts_build:loc_7828↓o
.text:0000000000006480 ; __unwind {
.text:0000000000006480                 mov     rdx, [rdi]
.text:0000000000006483                 mov     rax, [rsi]
.text:0000000000006486                 mov     rax, [rax+80h]
.text:000000000000648D                 cmp     [rdx+80h], rax
.text:0000000000006494                 jb      short loc_64A0
.text:0000000000006496                 setnbe  al
.text:0000000000006499                 movzx   eax, al
.text:000000000000649C                 retn
.text:000000000000649C ; ---------------------------------------------------------------------------
.text:000000000000649D                 align 20h
.text:00000000000064A0
.text:00000000000064A0 loc_64A0:                               ; CODE XREF: fts_compare_ino+14↑j
.text:00000000000064A0                 mov     eax, 0FFFFFFFFh
.text:00000000000064A5                 retn
.text:00000000000064A5 ; } // starts at 6480
.text:00000000000064A5 fts_compare_ino endp
.text:00000000000064A5
.text:00000000000064A5 ; ---------------------------------------------------------------------------
.text:00000000000064A6                 align 10h
.text:00000000000064B0
.text:00000000000064B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064B0
.text:00000000000064B0
.text:00000000000064B0 fts_stat        proc near               ; CODE XREF: fts_build+450↓p
.text:00000000000064B0                                         ; fts_build+607↓p ...
.text:00000000000064B0 ; __unwind {
.text:00000000000064B0                 push    r12
.text:00000000000064B2                 push    rbp
.text:00000000000064B3                 mov     rbp, rsi
.text:00000000000064B6                 push    rbx
.text:00000000000064B7                 cmp     qword ptr [rbp+58h], 0
.text:00000000000064BC                 lea     rbx, [rsi+78h]
.text:00000000000064C0                 mov     r12, rdi
.text:00000000000064C3                 mov     eax, [rdi+48h]
.text:00000000000064C6                 mov     rsi, [rsi+30h]  ; filename
.text:00000000000064CA                 jnz     short loc_6530
.text:00000000000064CC                 test    al, 1
.text:00000000000064CE                 jz      short loc_6530
.text:00000000000064D0
.text:00000000000064D0 loc_64D0:                               ; CODE XREF: fts_stat+82↓j
.text:00000000000064D0                                         ; fts_stat+86↓j
.text:00000000000064D0                 mov     rdx, rbx        ; stat_buf
.text:00000000000064D3                 mov     edi, 1          ; ver
.text:00000000000064D8                 call    ___xstat
.text:00000000000064DD                 test    eax, eax
.text:00000000000064DF                 jz      short loc_655B
.text:00000000000064E1                 call    ___errno_location
.text:00000000000064E6                 mov     r12, rax
.text:00000000000064E9                 mov     eax, [rax]
.text:00000000000064EB                 cmp     eax, 2
.text:00000000000064EE                 jz      loc_6600
.text:00000000000064F4
.text:00000000000064F4 loc_64F4:                               ; CODE XREF: fts_stat+147↓j
.text:00000000000064F4                                         ; fts_stat+169↓j
.text:00000000000064F4                 lea     rdi, [rbx+8]
.text:00000000000064F8                 mov     [rbp+40h], eax
.text:00000000000064FB                 mov     qword ptr [rbp+78h], 0
.text:0000000000006503                 mov     qword ptr [rbx+88h], 0
.text:000000000000650E                 xor     eax, eax
.text:0000000000006510                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000006514                 sub     rbx, rdi
.text:0000000000006517                 lea     ecx, [rbx+90h]
.text:000000000000651D                 shr     ecx, 3
.text:0000000000006520                 rep stosq
.text:0000000000006523                 mov     eax, 0Ah
.text:0000000000006528
.text:0000000000006528 loc_6528:                               ; CODE XREF: fts_stat+116↓j
.text:0000000000006528                                         ; fts_stat+136↓j ...
.text:0000000000006528                 pop     rbx
.text:0000000000006529                 pop     rbp
.text:000000000000652A                 pop     r12
.text:000000000000652C                 retn
.text:000000000000652C ; ---------------------------------------------------------------------------
.text:000000000000652D                 align 10h
.text:0000000000006530
.text:0000000000006530 loc_6530:                               ; CODE XREF: fts_stat+1A↑j
.text:0000000000006530                                         ; fts_stat+1E↑j
.text:0000000000006530                 test    al, 2
.text:0000000000006532                 jnz     short loc_64D0
.text:0000000000006534                 test    dl, dl
.text:0000000000006536                 jnz     short loc_64D0
.text:0000000000006538                 mov     rdx, rsi        ; filename
.text:000000000000653B                 mov     esi, [r12+2Ch]  ; fildes
.text:0000000000006540                 mov     r8d, 100h       ; flag
.text:0000000000006546                 mov     rcx, rbx        ; stat_buf
.text:0000000000006549                 mov     edi, 1          ; ver
.text:000000000000654E                 call    ___fxstatat
.text:0000000000006553                 test    eax, eax
.text:0000000000006555                 jnz     loc_65F0
.text:000000000000655B
.text:000000000000655B loc_655B:                               ; CODE XREF: fts_stat+2F↑j
.text:000000000000655B                 mov     eax, [rbp+90h]
.text:0000000000006561                 and     eax, 0F000h
.text:0000000000006566                 cmp     eax, 4000h
.text:000000000000656B                 jz      short loc_6590
.text:000000000000656D                 cmp     eax, 0A000h
.text:0000000000006572                 jz      loc_6648
.text:0000000000006578                 cmp     eax, 8000h
.text:000000000000657D                 setz    al
.text:0000000000006580                 movzx   eax, al
.text:0000000000006583                 pop     rbx
.text:0000000000006584                 lea     eax, [rax+rax*4+3]
.text:0000000000006588                 pop     rbp
.text:0000000000006589                 pop     r12
.text:000000000000658B                 retn
.text:000000000000658B ; ---------------------------------------------------------------------------
.text:000000000000658C                 align 10h
.text:0000000000006590
.text:0000000000006590 loc_6590:                               ; CODE XREF: fts_stat+BB↑j
.text:0000000000006590                 mov     rax, [rbp+88h]
.text:0000000000006597                 cmp     rax, 1
.text:000000000000659B                 jbe     loc_6620
.text:00000000000065A1                 cmp     qword ptr [rbp+58h], 0
.text:00000000000065A6                 jle     short loc_6620
.text:00000000000065A8                 test    byte ptr [r12+48h], 20h
.text:00000000000065AE                 lea     rdx, [rax-2]
.text:00000000000065B2                 cmovz   rax, rdx
.text:00000000000065B6
.text:00000000000065B6 loc_65B6:                               ; CODE XREF: fts_stat+177↓j
.text:00000000000065B6                 cmp     byte ptr [rbp+108h], 2Eh ; '.'
.text:00000000000065BD                 mov     [rbp+68h], rax
.text:00000000000065C1                 mov     eax, 1
.text:00000000000065C6                 jnz     loc_6528
.text:00000000000065CC                 cmp     byte ptr [rbp+109h], 0
.text:00000000000065D3                 jnz     loc_6658
.text:00000000000065D9
.text:00000000000065D9 loc_65D9:                               ; CODE XREF: fts_stat+1C0↓j
.text:00000000000065D9                 cmp     qword ptr [rbp+58h], 1
.text:00000000000065DE                 sbb     eax, eax
.text:00000000000065E0                 and     eax, 0FFFFFFFCh
.text:00000000000065E3                 add     eax, 5
.text:00000000000065E6                 jmp     loc_6528
.text:00000000000065E6 ; ---------------------------------------------------------------------------
.text:00000000000065EB                 align 10h
.text:00000000000065F0
.text:00000000000065F0 loc_65F0:                               ; CODE XREF: fts_stat+A5↑j
.text:00000000000065F0                 call    ___errno_location
.text:00000000000065F5                 mov     eax, [rax]
.text:00000000000065F7                 jmp     loc_64F4
.text:00000000000065F7 ; ---------------------------------------------------------------------------
.text:00000000000065FC                 align 20h
.text:0000000000006600
.text:0000000000006600 loc_6600:                               ; CODE XREF: fts_stat+3E↑j
.text:0000000000006600                 mov     rsi, [rbp+30h]  ; filename
.text:0000000000006604                 mov     rdx, rbx        ; stat_buf
.text:0000000000006607                 mov     edi, 1          ; ver
.text:000000000000660C                 call    ___lxstat
.text:0000000000006611                 test    eax, eax
.text:0000000000006613                 jz      short loc_6630
.text:0000000000006615                 mov     eax, [r12]
.text:0000000000006619                 jmp     loc_64F4
.text:0000000000006619 ; ---------------------------------------------------------------------------
.text:000000000000661E                 align 20h
.text:0000000000006620
.text:0000000000006620 loc_6620:                               ; CODE XREF: fts_stat+EB↑j
.text:0000000000006620                                         ; fts_stat+F6↑j
.text:0000000000006620                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006627                 jmp     short loc_65B6
.text:0000000000006627 ; ---------------------------------------------------------------------------
.text:0000000000006629                 align 10h
.text:0000000000006630
.text:0000000000006630 loc_6630:                               ; CODE XREF: fts_stat+163↑j
.text:0000000000006630                 mov     dword ptr [r12], 0
.text:0000000000006638                 mov     eax, 0Dh
.text:000000000000663D                 jmp     loc_6528
.text:000000000000663D ; ---------------------------------------------------------------------------
.text:0000000000006642                 align 8
.text:0000000000006648
.text:0000000000006648 loc_6648:                               ; CODE XREF: fts_stat+C2↑j
.text:0000000000006648                 mov     eax, 0Ch
.text:000000000000664D                 jmp     loc_6528
.text:000000000000664D ; ---------------------------------------------------------------------------
.text:0000000000006652                 align 8
.text:0000000000006658
.text:0000000000006658 loc_6658:                               ; CODE XREF: fts_stat+123↑j
.text:0000000000006658                 mov     edx, [rbp+108h]
.text:000000000000665E                 and     edx, 0FFFF00h
.text:0000000000006664                 cmp     edx, 2E00h
.text:000000000000666A                 jnz     loc_6528
.text:0000000000006670                 jmp     loc_65D9
.text:0000000000006670 ; } // starts at 64B0
.text:0000000000006670 fts_stat        endp
.text:0000000000006670
.text:0000000000006670 ; ---------------------------------------------------------------------------
.text:0000000000006675                 align 20h
.text:0000000000006680
.text:0000000000006680 ; =============== S U B R O U T I N E =======================================
.text:0000000000006680
.text:0000000000006680
.text:0000000000006680 fts_sort        proc near               ; CODE XREF: fts_build+721↓p
.text:0000000000006680                                         ; fts_build+80E↓p ...
.text:0000000000006680 ; __unwind {
.text:0000000000006680                 push    r13
.text:0000000000006682                 push    r12
.text:0000000000006684                 mov     r12, rdx
.text:0000000000006687                 push    rbp
.text:0000000000006688                 push    rbx
.text:0000000000006689                 mov     rbp, rdi
.text:000000000000668C                 mov     rbx, rsi
.text:000000000000668F                 sub     rsp, 8
.text:0000000000006693                 cmp     [rbp+38h], rdx
.text:0000000000006697                 mov     r13, [rdi+40h]
.text:000000000000669B                 mov     rdi, [rdi+10h]  ; ptr
.text:000000000000669F                 jnb     short loc_66D5
.text:00000000000066A1                 lea     rsi, [rdx+28h]
.text:00000000000066A5                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:00000000000066AF                 cmp     rsi, rax
.text:00000000000066B2                 mov     [rbp+38h], rsi
.text:00000000000066B6                 ja      loc_6754
.text:00000000000066BC                 shl     rsi, 3          ; size
.text:00000000000066C0                 call    _realloc
.text:00000000000066C5                 test    rax, rax
.text:00000000000066C8                 mov     rdi, rax        ; base
.text:00000000000066CB                 jz      loc_6750
.text:00000000000066D1                 mov     [rbp+10h], rax
.text:00000000000066D5
.text:00000000000066D5 loc_66D5:                               ; CODE XREF: fts_sort+1F↑j
.text:00000000000066D5                 test    rbx, rbx
.text:00000000000066D8                 jz      short loc_66F1
.text:00000000000066DA                 mov     rdx, rdi
.text:00000000000066DD                 nop     dword ptr [rax]
.text:00000000000066E0
.text:00000000000066E0 loc_66E0:                               ; CODE XREF: fts_sort+6F↓j
.text:00000000000066E0                 add     rdx, 8
.text:00000000000066E4                 mov     [rdx-8], rbx
.text:00000000000066E8                 mov     rbx, [rbx+10h]
.text:00000000000066EC                 test    rbx, rbx
.text:00000000000066EF                 jnz     short loc_66E0
.text:00000000000066F1
.text:00000000000066F1 loc_66F1:                               ; CODE XREF: fts_sort+58↑j
.text:00000000000066F1                 mov     rcx, r13        ; compar
.text:00000000000066F4                 mov     edx, 8          ; size
.text:00000000000066F9                 mov     rsi, r12        ; nmemb
.text:00000000000066FC                 call    _qsort
.text:0000000000006701                 mov     r8, [rbp+10h]
.text:0000000000006705                 mov     rcx, r12
.text:0000000000006708                 sub     rcx, 1
.text:000000000000670C                 mov     rax, [r8]
.text:000000000000670F                 jz      short loc_6780
.text:0000000000006711                 mov     rdi, rax
.text:0000000000006714                 mov     rdx, r8
.text:0000000000006717                 jmp     short loc_6723
.text:0000000000006717 ; ---------------------------------------------------------------------------
.text:0000000000006719                 align 20h
.text:0000000000006720
.text:0000000000006720 loc_6720:                               ; CODE XREF: fts_sort+B3↓j
.text:0000000000006720                 mov     rdi, [rdx]
.text:0000000000006723
.text:0000000000006723 loc_6723:                               ; CODE XREF: fts_sort+97↑j
.text:0000000000006723                 mov     rsi, [rdx+8]
.text:0000000000006727                 add     rdx, 8
.text:000000000000672B                 sub     rcx, 1
.text:000000000000672F                 mov     [rdi+10h], rsi
.text:0000000000006733                 jnz     short loc_6720
.text:0000000000006735                 mov     rdx, [r8+r12*8-8]
.text:000000000000673A
.text:000000000000673A loc_673A:                               ; CODE XREF: fts_sort+103↓j
.text:000000000000673A                 mov     qword ptr [rdx+10h], 0
.text:0000000000006742                 add     rsp, 8
.text:0000000000006746                 pop     rbx
.text:0000000000006747                 pop     rbp
.text:0000000000006748                 pop     r12
.text:000000000000674A                 pop     r13
.text:000000000000674C                 retn
.text:000000000000674C ; ---------------------------------------------------------------------------
.text:000000000000674D                 align 10h
.text:0000000000006750
.text:0000000000006750 loc_6750:                               ; CODE XREF: fts_sort+4B↑j
.text:0000000000006750                 mov     rdi, [rbp+10h]  ; ptr
.text:0000000000006754
.text:0000000000006754 loc_6754:                               ; CODE XREF: fts_sort+36↑j
.text:0000000000006754                 call    free
.text:0000000000006759                 mov     qword ptr [rbp+10h], 0
.text:0000000000006761                 mov     qword ptr [rbp+38h], 0
.text:0000000000006769                 add     rsp, 8
.text:000000000000676D                 mov     rax, rbx
.text:0000000000006770                 pop     rbx
.text:0000000000006771                 pop     rbp
.text:0000000000006772                 pop     r12
.text:0000000000006774                 pop     r13
.text:0000000000006776                 retn
.text:0000000000006776 ; ---------------------------------------------------------------------------
.text:0000000000006777                 align 20h
.text:0000000000006780
.text:0000000000006780 loc_6780:                               ; CODE XREF: fts_sort+8F↑j
.text:0000000000006780                 mov     rdx, rax
.text:0000000000006783                 jmp     short loc_673A
.text:0000000000006783 ; } // starts at 6680
.text:0000000000006783 fts_sort        endp
.text:0000000000006783
.text:0000000000006783 ; ---------------------------------------------------------------------------
.text:0000000000006785                 align 10h
.text:0000000000006790
.text:0000000000006790 ; =============== S U B R O U T I N E =======================================
.text:0000000000006790
.text:0000000000006790
.text:0000000000006790 fts_alloc       proc near               ; CODE XREF: fts_build+22C↓p
.text:0000000000006790                                         ; rpl_fts_open+E7↓p ...
.text:0000000000006790 ; __unwind {
.text:0000000000006790                 push    r13
.text:0000000000006792                 push    r12
.text:0000000000006794                 mov     r12, rdi
.text:0000000000006797                 push    rbp
.text:0000000000006798                 lea     rdi, [rdx+110h]
.text:000000000000679F                 push    rbx
.text:00000000000067A0                 mov     r13, rsi
.text:00000000000067A3                 mov     rbp, rdx
.text:00000000000067A6                 sub     rsp, 8
.text:00000000000067AA                 and     rdi, 0FFFFFFFFFFFFFFF8h ; size
.text:00000000000067AE                 call    _malloc
.text:00000000000067B3                 test    rax, rax
.text:00000000000067B6                 mov     rbx, rax
.text:00000000000067B9                 jz      short loc_680C
.text:00000000000067BB                 lea     rdi, [rax+108h] ; dest
.text:00000000000067C2                 mov     rdx, rbp        ; n
.text:00000000000067C5                 mov     rsi, r13        ; src
.text:00000000000067C8                 call    _memcpy
.text:00000000000067CD                 mov     rax, [r12+20h]
.text:00000000000067D2                 mov     byte ptr [rbx+rbp+108h], 0
.text:00000000000067DA                 mov     [rbx+60h], rbp
.text:00000000000067DE                 mov     [rbx+50h], r12
.text:00000000000067E2                 mov     dword ptr [rbx+40h], 0
.text:00000000000067E9                 mov     qword ptr [rbx+18h], 0
.text:00000000000067F1                 mov     [rbx+38h], rax
.text:00000000000067F5                 mov     dword ptr [rbx+72h], 30000h
.text:00000000000067FC                 mov     qword ptr [rbx+20h], 0
.text:0000000000006804                 mov     qword ptr [rbx+28h], 0
.text:000000000000680C
.text:000000000000680C loc_680C:                               ; CODE XREF: fts_alloc+29↑j
.text:000000000000680C                 add     rsp, 8
.text:0000000000006810                 mov     rax, rbx
.text:0000000000006813                 pop     rbx
.text:0000000000006814                 pop     rbp
.text:0000000000006815                 pop     r12
.text:0000000000006817                 pop     r13
.text:0000000000006819                 retn
.text:0000000000006819 ; } // starts at 6790
.text:0000000000006819 fts_alloc       endp
.text:0000000000006819
.text:0000000000006819 ; ---------------------------------------------------------------------------
.text:000000000000681A                 align 20h
.text:0000000000006820
.text:0000000000006820 ; =============== S U B R O U T I N E =======================================
.text:0000000000006820
.text:0000000000006820
.text:0000000000006820 ; __int64 __fastcall fts_lfree(void *ptr)
.text:0000000000006820 fts_lfree       proc near               ; CODE XREF: fts_build+666↓p
.text:0000000000006820                                         ; fts_build+765↓p ...
.text:0000000000006820 ; __unwind {
.text:0000000000006820                 test    rdi, rdi
.text:0000000000006823                 jz      short locret_6860
.text:0000000000006825                 push    rbp
.text:0000000000006826                 push    rbx
.text:0000000000006827                 mov     rbx, rdi
.text:000000000000682A                 sub     rsp, 8
.text:000000000000682E                 xchg    ax, ax
.text:0000000000006830
.text:0000000000006830 loc_6830:                               ; CODE XREF: fts_lfree+30↓j
.text:0000000000006830                 mov     rdi, [rbx+18h]  ; dirp
.text:0000000000006834                 mov     rbp, [rbx+10h]
.text:0000000000006838                 test    rdi, rdi
.text:000000000000683B                 jz      short loc_6842
.text:000000000000683D                 call    _closedir
.text:0000000000006842
.text:0000000000006842 loc_6842:                               ; CODE XREF: fts_lfree+1B↑j
.text:0000000000006842                 mov     rdi, rbx        ; ptr
.text:0000000000006845                 mov     rbx, rbp
.text:0000000000006848                 call    free
.text:000000000000684D                 test    rbp, rbp
.text:0000000000006850                 jnz     short loc_6830
.text:0000000000006852                 add     rsp, 8
.text:0000000000006856                 pop     rbx
.text:0000000000006857                 pop     rbp
.text:0000000000006858                 retn
.text:0000000000006858 ; ---------------------------------------------------------------------------
.text:0000000000006859                 align 20h
.text:0000000000006860
.text:0000000000006860 locret_6860:                            ; CODE XREF: fts_lfree+3↑j
.text:0000000000006860                 rep retn
.text:0000000000006860 ; } // starts at 6820
.text:0000000000006860 fts_lfree       endp
.text:0000000000006860
.text:0000000000006860 ; ---------------------------------------------------------------------------
.text:0000000000006862                 align 10h
.text:0000000000006870
.text:0000000000006870 ; =============== S U B R O U T I N E =======================================
.text:0000000000006870
.text:0000000000006870
.text:0000000000006870 fd_ring_clear   proc near               ; CODE XREF: restore_initial_cwd+2C↓p
.text:0000000000006870                                         ; rpl_fts_close+8C↓p
.text:0000000000006870 ; __unwind {
.text:0000000000006870                 push    rbx
.text:0000000000006871                 mov     rbx, rdi
.text:0000000000006874                 jmp     short loc_688C
.text:0000000000006874 ; ---------------------------------------------------------------------------
.text:0000000000006876                 align 20h
.text:0000000000006880
.text:0000000000006880 loc_6880:                               ; CODE XREF: fd_ring_clear+26↓j
.text:0000000000006880                 mov     rdi, rbx
.text:0000000000006883                 call    i_ring_pop
.text:0000000000006888                 test    eax, eax
.text:000000000000688A                 jns     short loc_68A0
.text:000000000000688C
.text:000000000000688C loc_688C:                               ; CODE XREF: fd_ring_clear+4↑j
.text:000000000000688C                                         ; fd_ring_clear+37↓j
.text:000000000000688C                 mov     rdi, rbx
.text:000000000000688F                 call    i_ring_empty
.text:0000000000006894                 test    al, al
.text:0000000000006896                 jz      short loc_6880
.text:0000000000006898                 pop     rbx
.text:0000000000006899                 retn
.text:0000000000006899 ; ---------------------------------------------------------------------------
.text:000000000000689A                 align 20h
.text:00000000000068A0
.text:00000000000068A0 loc_68A0:                               ; CODE XREF: fd_ring_clear+1A↑j
.text:00000000000068A0                 mov     edi, eax        ; fd
.text:00000000000068A2                 call    _close
.text:00000000000068A7                 jmp     short loc_688C
.text:00000000000068A7 ; } // starts at 6870
.text:00000000000068A7 fd_ring_clear   endp
.text:00000000000068A7
.text:00000000000068A7 ; ---------------------------------------------------------------------------
.text:00000000000068A9                 align 10h
.text:00000000000068B0
.text:00000000000068B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000068B0
.text:00000000000068B0
.text:00000000000068B0 filesystem_type proc near               ; CODE XREF: leaf_optimization+4↓p
.text:00000000000068B0                                         ; fts_build+2C4↓p
.text:00000000000068B0
.text:00000000000068B0 var_B8          = qword ptr -0B8h
.text:00000000000068B0 buf             = statfs ptr -0A8h
.text:00000000000068B0 var_30          = qword ptr -30h
.text:00000000000068B0
.text:00000000000068B0 ; __unwind {
.text:00000000000068B0                 push    r13
.text:00000000000068B2                 push    r12
.text:00000000000068B4                 push    rbp
.text:00000000000068B5                 push    rbx
.text:00000000000068B6                 sub     rsp, 98h
.text:00000000000068BD                 mov     rbx, [rdi+50h]
.text:00000000000068C1                 mov     rax, fs:28h
.text:00000000000068CA                 mov     [rsp+0B8h+var_30], rax
.text:00000000000068D2                 xor     eax, eax
.text:00000000000068D4                 test    byte ptr [rbx+49h], 2
.text:00000000000068D8                 jz      short loc_6942
.text:00000000000068DA                 mov     r12, [rbx+50h]
.text:00000000000068DE                 mov     rbp, rdi
.text:00000000000068E1                 mov     r13d, esi
.text:00000000000068E4                 test    r12, r12
.text:00000000000068E7                 jz      short loc_6910
.text:00000000000068E9
.text:00000000000068E9 loc_68E9:                               ; CODE XREF: filesystem_type+8B↓j
.text:00000000000068E9                 mov     rax, [rbp+78h]
.text:00000000000068ED                 mov     rsi, rsp
.text:00000000000068F0                 mov     rdi, r12
.text:00000000000068F3                 mov     [rsp+0B8h+var_B8], rax
.text:00000000000068F7                 call    hash_lookup
.text:00000000000068FC                 test    rax, rax
.text:00000000000068FF                 jz      short loc_693D
.text:0000000000006901                 mov     rbx, [rax+8]
.text:0000000000006905                 jmp     short loc_6944
.text:0000000000006905 ; ---------------------------------------------------------------------------
.text:0000000000006907                 align 10h
.text:0000000000006910
.text:0000000000006910 loc_6910:                               ; CODE XREF: filesystem_type+37↑j
.text:0000000000006910                 mov     r8, cs:free_ptr
.text:0000000000006917                 lea     rcx, dev_type_compare
.text:000000000000691E                 lea     rdx, dev_type_hash
.text:0000000000006925                 xor     esi, esi
.text:0000000000006927                 mov     edi, 0Dh
.text:000000000000692C                 call    hash_initialize
.text:0000000000006931                 test    rax, rax
.text:0000000000006934                 mov     r12, rax
.text:0000000000006937                 mov     [rbx+50h], rax
.text:000000000000693B                 jnz     short loc_68E9
.text:000000000000693D
.text:000000000000693D loc_693D:                               ; CODE XREF: filesystem_type+4F↑j
.text:000000000000693D                 test    r13d, r13d
.text:0000000000006940                 jns     short loc_6970
.text:0000000000006942
.text:0000000000006942 loc_6942:                               ; CODE XREF: filesystem_type+28↑j
.text:0000000000006942                                         ; filesystem_type+CF↓j
.text:0000000000006942                 xor     ebx, ebx
.text:0000000000006944
.text:0000000000006944 loc_6944:                               ; CODE XREF: filesystem_type+55↑j
.text:0000000000006944                                         ; filesystem_type+D9↓j ...
.text:0000000000006944                 mov     rdx, [rsp+0B8h+var_30]
.text:000000000000694C                 xor     rdx, fs:28h
.text:0000000000006955                 mov     rax, rbx
.text:0000000000006958                 jnz     short loc_69D2
.text:000000000000695A                 add     rsp, 98h
.text:0000000000006961                 pop     rbx
.text:0000000000006962                 pop     rbp
.text:0000000000006963                 pop     r12
.text:0000000000006965                 pop     r13
.text:0000000000006967                 retn
.text:0000000000006967 ; ---------------------------------------------------------------------------
.text:0000000000006968                 align 10h
.text:0000000000006970
.text:0000000000006970 loc_6970:                               ; CODE XREF: filesystem_type+90↑j
.text:0000000000006970                 lea     rsi, [rsp+0B8h+buf] ; buf
.text:0000000000006975                 mov     edi, r13d       ; fildes
.text:0000000000006978                 call    _fstatfs
.text:000000000000697D                 test    eax, eax
.text:000000000000697F                 jnz     short loc_6942
.text:0000000000006981                 test    r12, r12
.text:0000000000006984                 mov     rbx, [rsp+0B8h+buf.f_type]
.text:0000000000006989                 jz      short loc_6944
.text:000000000000698B                 mov     edi, 10h        ; size
.text:0000000000006990                 call    _malloc
.text:0000000000006995                 test    rax, rax
.text:0000000000006998                 mov     r13, rax
.text:000000000000699B                 jz      short loc_6944
.text:000000000000699D                 mov     rax, [rbp+78h]
.text:00000000000069A1                 mov     [r13+8], rbx
.text:00000000000069A5                 mov     rsi, r13
.text:00000000000069A8                 mov     rdi, r12
.text:00000000000069AB                 mov     [r13+0], rax
.text:00000000000069AF                 call    hash_insert
.text:00000000000069B4                 test    rax, rax
.text:00000000000069B7                 jz      short loc_69C8
.text:00000000000069B9                 cmp     r13, rax
.text:00000000000069BC                 jnz     short loc_69D7
.text:00000000000069BE
.text:00000000000069BE loc_69BE:                               ; CODE XREF: filesystem_type+120↓j
.text:00000000000069BE                 mov     rbx, [rsp+0B8h+buf.f_type]
.text:00000000000069C3                 jmp     loc_6944
.text:00000000000069C8 ; ---------------------------------------------------------------------------
.text:00000000000069C8
.text:00000000000069C8 loc_69C8:                               ; CODE XREF: filesystem_type+107↑j
.text:00000000000069C8                 mov     rdi, r13        ; ptr
.text:00000000000069CB                 call    free
.text:00000000000069D0                 jmp     short loc_69BE
.text:00000000000069D2 ; ---------------------------------------------------------------------------
.text:00000000000069D2
.text:00000000000069D2 loc_69D2:                               ; CODE XREF: filesystem_type+A8↑j
.text:00000000000069D2                 call    ___stack_chk_fail
.text:00000000000069D7 ; ---------------------------------------------------------------------------
.text:00000000000069D7
.text:00000000000069D7 loc_69D7:                               ; CODE XREF: filesystem_type+10C↑j
.text:00000000000069D7                 call    _abort
.text:00000000000069D7 ; } // starts at 68B0
.text:00000000000069D7 filesystem_type endp
.text:00000000000069D7
.text:00000000000069D7 ; ---------------------------------------------------------------------------
.text:00000000000069DC                 align 20h
.text:00000000000069E0
.text:00000000000069E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069E0
.text:00000000000069E0
.text:00000000000069E0 leaf_optimization proc near             ; CODE XREF: fts_build+8B7↓p
.text:00000000000069E0                                         ; rpl_fts_read+705↓p
.text:00000000000069E0 ; __unwind {
.text:00000000000069E0                 sub     rsp, 8
.text:00000000000069E4                 call    filesystem_type
.text:00000000000069E9                 cmp     rax, 52654973h
.text:00000000000069EF                 jz      short loc_6A40
.text:00000000000069F1                 jle     short loc_6A20
.text:00000000000069F3                 cmp     rax, 58465342h
.text:00000000000069F9                 jz      short loc_6A40
.text:00000000000069FB                 mov     edx, 0FF534D42h
.text:0000000000006A00                 cmp     rax, rdx
.text:0000000000006A03                 jz      short loc_6A35
.text:0000000000006A05                 cmp     rax, 5346414Fh
.text:0000000000006A0B                 jz      short loc_6A35
.text:0000000000006A0D
.text:0000000000006A0D loc_6A0D:                               ; CODE XREF: leaf_optimization+53↓j
.text:0000000000006A0D                 mov     eax, 1
.text:0000000000006A12                 add     rsp, 8
.text:0000000000006A16                 retn
.text:0000000000006A16 ; ---------------------------------------------------------------------------
.text:0000000000006A17                 align 20h
.text:0000000000006A20
.text:0000000000006A20 loc_6A20:                               ; CODE XREF: leaf_optimization+11↑j
.text:0000000000006A20                 cmp     rax, 6969h
.text:0000000000006A26                 jz      short loc_6A35
.text:0000000000006A28                 cmp     rax, 9FA0h
.text:0000000000006A2E                 jz      short loc_6A35
.text:0000000000006A30                 test    rax, rax
.text:0000000000006A33                 jnz     short loc_6A0D
.text:0000000000006A35
.text:0000000000006A35 loc_6A35:                               ; CODE XREF: leaf_optimization+23↑j
.text:0000000000006A35                                         ; leaf_optimization+2B↑j ...
.text:0000000000006A35                 xor     eax, eax
.text:0000000000006A37                 add     rsp, 8
.text:0000000000006A3B                 retn
.text:0000000000006A3B ; ---------------------------------------------------------------------------
.text:0000000000006A3C                 align 20h
.text:0000000000006A40
.text:0000000000006A40 loc_6A40:                               ; CODE XREF: leaf_optimization+F↑j
.text:0000000000006A40                                         ; leaf_optimization+19↑j
.text:0000000000006A40                 mov     eax, 2
.text:0000000000006A45                 add     rsp, 8
.text:0000000000006A49                 retn
.text:0000000000006A49 ; } // starts at 69E0
.text:0000000000006A49 leaf_optimization endp
.text:0000000000006A49
.text:0000000000006A49 ; ---------------------------------------------------------------------------
.text:0000000000006A4A                 align 10h
.text:0000000000006A50
.text:0000000000006A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A50
.text:0000000000006A50
.text:0000000000006A50 cwd_advance_fd  proc near               ; CODE XREF: restore_initial_cwd+4A↓p
.text:0000000000006A50                                         ; fts_safe_changedir+21E↓p ...
.text:0000000000006A50 ; __unwind {
.text:0000000000006A50                 push    rbp
.text:0000000000006A51                 push    rbx
.text:0000000000006A52                 mov     ebp, esi
.text:0000000000006A54                 mov     rbx, rdi
.text:0000000000006A57                 sub     rsp, 8
.text:0000000000006A5B                 mov     esi, [rdi+2Ch]
.text:0000000000006A5E                 cmp     esi, ebp
.text:0000000000006A60                 jnz     short loc_6A67
.text:0000000000006A62                 cmp     esi, 0FFFFFF9Ch
.text:0000000000006A65                 jnz     short loc_6AB1
.text:0000000000006A67
.text:0000000000006A67 loc_6A67:                               ; CODE XREF: cwd_advance_fd+10↑j
.text:0000000000006A67                 test    dl, dl
.text:0000000000006A69                 jnz     short loc_6A80
.text:0000000000006A6B                 test    byte ptr [rbx+48h], 4
.text:0000000000006A6F                 jnz     short loc_6A75
.text:0000000000006A71                 test    esi, esi
.text:0000000000006A73                 jns     short loc_6AA0
.text:0000000000006A75
.text:0000000000006A75 loc_6A75:                               ; CODE XREF: cwd_advance_fd+1F↑j
.text:0000000000006A75                                         ; cwd_advance_fd+3B↓j
.text:0000000000006A75                 mov     [rbx+2Ch], ebp
.text:0000000000006A78                 add     rsp, 8
.text:0000000000006A7C                 pop     rbx
.text:0000000000006A7D                 pop     rbp
.text:0000000000006A7E                 retn
.text:0000000000006A7E ; ---------------------------------------------------------------------------
.text:0000000000006A7F                 align 20h
.text:0000000000006A80
.text:0000000000006A80 loc_6A80:                               ; CODE XREF: cwd_advance_fd+19↑j
.text:0000000000006A80                 lea     rdi, [rbx+60h]
.text:0000000000006A84                 call    i_ring_push
.text:0000000000006A89                 test    eax, eax
.text:0000000000006A8B                 js      short loc_6A75
.text:0000000000006A8D                 mov     edi, eax        ; fd
.text:0000000000006A8F                 call    _close
.text:0000000000006A94                 mov     [rbx+2Ch], ebp
.text:0000000000006A97                 add     rsp, 8
.text:0000000000006A9B                 pop     rbx
.text:0000000000006A9C                 pop     rbp
.text:0000000000006A9D                 retn
.text:0000000000006A9D ; ---------------------------------------------------------------------------
.text:0000000000006A9E                 align 20h
.text:0000000000006AA0
.text:0000000000006AA0 loc_6AA0:                               ; CODE XREF: cwd_advance_fd+23↑j
.text:0000000000006AA0                 mov     edi, esi        ; fd
.text:0000000000006AA2                 call    _close
.text:0000000000006AA7                 mov     [rbx+2Ch], ebp
.text:0000000000006AAA                 add     rsp, 8
.text:0000000000006AAE                 pop     rbx
.text:0000000000006AAF                 pop     rbp
.text:0000000000006AB0                 retn
.text:0000000000006AB1 ; ---------------------------------------------------------------------------
.text:0000000000006AB1
.text:0000000000006AB1 loc_6AB1:                               ; CODE XREF: cwd_advance_fd+15↑j
.text:0000000000006AB1                 call    _abort
.text:0000000000006AB1 ; } // starts at 6A50
.text:0000000000006AB1 cwd_advance_fd  endp
.text:0000000000006AB1
.text:0000000000006AB1 ; ---------------------------------------------------------------------------
.text:0000000000006AB6                 align 20h
.text:0000000000006AC0
.text:0000000000006AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AC0
.text:0000000000006AC0
.text:0000000000006AC0 restore_initial_cwd proc near           ; CODE XREF: fts_build+73E↓p
.text:0000000000006AC0                                         ; rpl_fts_read+2A3↓p ...
.text:0000000000006AC0 ; __unwind {
.text:0000000000006AC0                 push    rbp
.text:0000000000006AC1                 push    rbx
.text:0000000000006AC2                 mov     rbx, rdi
.text:0000000000006AC5                 sub     rsp, 8
.text:0000000000006AC9                 mov     edx, [rdi+48h]
.text:0000000000006ACC                 mov     ebp, edx
.text:0000000000006ACE                 and     ebp, 4
.text:0000000000006AD1                 jnz     short loc_6B18
.text:0000000000006AD3                 and     dh, 2
.text:0000000000006AD6                 jnz     short loc_6B00
.text:0000000000006AD8                 mov     edi, [rdi+28h]  ; fd
.text:0000000000006ADB                 xor     ebp, ebp
.text:0000000000006ADD                 call    _fchdir
.text:0000000000006AE2                 test    eax, eax
.text:0000000000006AE4                 setnz   bpl
.text:0000000000006AE8
.text:0000000000006AE8 loc_6AE8:                               ; CODE XREF: restore_initial_cwd+4F↓j
.text:0000000000006AE8                                         ; restore_initial_cwd+5A↓j
.text:0000000000006AE8                 lea     rdi, [rbx+60h]
.text:0000000000006AEC                 call    fd_ring_clear
.text:0000000000006AF1                 add     rsp, 8
.text:0000000000006AF5                 mov     eax, ebp
.text:0000000000006AF7                 pop     rbx
.text:0000000000006AF8                 pop     rbp
.text:0000000000006AF9                 retn
.text:0000000000006AF9 ; ---------------------------------------------------------------------------
.text:0000000000006AFA                 align 20h
.text:0000000000006B00
.text:0000000000006B00 loc_6B00:                               ; CODE XREF: restore_initial_cwd+16↑j
.text:0000000000006B00                 mov     edx, 1
.text:0000000000006B05                 mov     esi, 0FFFFFF9Ch
.text:0000000000006B0A                 call    cwd_advance_fd
.text:0000000000006B0F                 jmp     short loc_6AE8
.text:0000000000006B0F ; ---------------------------------------------------------------------------
.text:0000000000006B11                 align 8
.text:0000000000006B18
.text:0000000000006B18 loc_6B18:                               ; CODE XREF: restore_initial_cwd+11↑j
.text:0000000000006B18                 xor     ebp, ebp
.text:0000000000006B1A                 jmp     short loc_6AE8
.text:0000000000006B1A ; } // starts at 6AC0
.text:0000000000006B1A restore_initial_cwd endp
.text:0000000000006B1A
.text:0000000000006B1A ; ---------------------------------------------------------------------------
.text:0000000000006B1C                 align 20h
.text:0000000000006B20
.text:0000000000006B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B20
.text:0000000000006B20
.text:0000000000006B20 fts_palloc_isra_2 proc near             ; CODE XREF: fts_build+263↓p
.text:0000000000006B20                                         ; rpl_fts_open+BD↓p
.text:0000000000006B20 ; __unwind {
.text:0000000000006B20                 push    rbx
.text:0000000000006B21                 mov     rcx, [rsi]
.text:0000000000006B24                 mov     rbx, rdi
.text:0000000000006B27                 mov     rdi, [rdi]      ; ptr
.text:0000000000006B2A                 lea     rax, [rcx+rdx+100h]
.text:0000000000006B32                 cmp     rcx, rax
.text:0000000000006B35                 ja      short loc_6B58
.text:0000000000006B37                 mov     [rsi], rax
.text:0000000000006B3A                 mov     rsi, rax        ; size
.text:0000000000006B3D                 call    _realloc
.text:0000000000006B42                 test    rax, rax
.text:0000000000006B45                 jz      short loc_6B78
.text:0000000000006B47                 mov     [rbx], rax
.text:0000000000006B4A                 mov     eax, 1
.text:0000000000006B4F                 pop     rbx
.text:0000000000006B50                 retn
.text:0000000000006B50 ; ---------------------------------------------------------------------------
.text:0000000000006B51                 align 8
.text:0000000000006B58
.text:0000000000006B58 loc_6B58:                               ; CODE XREF: fts_palloc_isra_2+15↑j
.text:0000000000006B58                 call    free
.text:0000000000006B5D                 mov     qword ptr [rbx], 0
.text:0000000000006B64                 call    ___errno_location
.text:0000000000006B69                 mov     dword ptr [rax], 24h ; '$'
.text:0000000000006B6F                 xor     eax, eax
.text:0000000000006B71                 pop     rbx
.text:0000000000006B72                 retn
.text:0000000000006B72 ; ---------------------------------------------------------------------------
.text:0000000000006B73                 align 8
.text:0000000000006B78
.text:0000000000006B78 loc_6B78:                               ; CODE XREF: fts_palloc_isra_2+25↑j
.text:0000000000006B78                 mov     rdi, [rbx]      ; ptr
.text:0000000000006B7B                 call    free
.text:0000000000006B80                 mov     qword ptr [rbx], 0
.text:0000000000006B87                 xor     eax, eax
.text:0000000000006B89                 pop     rbx
.text:0000000000006B8A                 retn
.text:0000000000006B8A ; } // starts at 6B20
.text:0000000000006B8A fts_palloc_isra_2 endp
.text:0000000000006B8A
.text:0000000000006B8A ; ---------------------------------------------------------------------------
.text:0000000000006B8B                 align 10h
.text:0000000000006B90
.text:0000000000006B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B90
.text:0000000000006B90
.text:0000000000006B90 setup_dir_isra_4 proc near              ; CODE XREF: rpl_fts_open+265↓p
.text:0000000000006B90                                         ; rpl_fts_read+345↓p
.text:0000000000006B90 ; __unwind {
.text:0000000000006B90                 and     edi, 102h
.text:0000000000006B96                 push    rbx
.text:0000000000006B97                 mov     rbx, rsi
.text:0000000000006B9A                 jz      short loc_6BD0
.text:0000000000006B9C                 mov     r8, cs:free_ptr
.text:0000000000006BA3                 lea     rcx, AD_compare
.text:0000000000006BAA                 lea     rdx, AD_hash
.text:0000000000006BB1                 xor     esi, esi
.text:0000000000006BB3                 mov     edi, 1Fh
.text:0000000000006BB8                 call    hash_initialize
.text:0000000000006BBD                 test    rax, rax
.text:0000000000006BC0                 mov     [rbx], rax
.text:0000000000006BC3                 setnz   al
.text:0000000000006BC6
.text:0000000000006BC6 loc_6BC6:                               ; CODE XREF: setup_dir_isra_4+55↓j
.text:0000000000006BC6                 pop     rbx
.text:0000000000006BC7                 retn
.text:0000000000006BC7 ; ---------------------------------------------------------------------------
.text:0000000000006BC8                 align 10h
.text:0000000000006BD0
.text:0000000000006BD0 loc_6BD0:                               ; CODE XREF: setup_dir_isra_4+A↑j
.text:0000000000006BD0                 mov     edi, 20h ; ' '  ; size
.text:0000000000006BD5                 call    _malloc
.text:0000000000006BDA                 mov     rdi, rax
.text:0000000000006BDD                 mov     [rbx], rax
.text:0000000000006BE0                 xor     eax, eax
.text:0000000000006BE2                 test    rdi, rdi
.text:0000000000006BE5                 jz      short loc_6BC6
.text:0000000000006BE7                 call    cycle_check_init
.text:0000000000006BEC                 mov     eax, 1
.text:0000000000006BF1                 pop     rbx
.text:0000000000006BF2                 retn
.text:0000000000006BF2 ; } // starts at 6B90
.text:0000000000006BF2 setup_dir_isra_4 endp
.text:0000000000006BF2
.text:0000000000006BF2 ; ---------------------------------------------------------------------------
.text:0000000000006BF3                 align 20h
.text:0000000000006C00
.text:0000000000006C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C00
.text:0000000000006C00
.text:0000000000006C00 diropen_isra_6  proc near               ; CODE XREF: fts_safe_changedir+8D↓p
.text:0000000000006C00                                         ; rpl_fts_open+287↓p ...
.text:0000000000006C00 ; __unwind {
.text:0000000000006C00                 mov     rax, rdx
.text:0000000000006C03                 mov     edx, esi
.text:0000000000006C05                 shl     edx, 0Dh
.text:0000000000006C08                 and     edx, 20000h
.text:0000000000006C0E                 or      edx, 90900h
.text:0000000000006C14                 and     esi, 200h
.text:0000000000006C1A                 jnz     short loc_6C30
.text:0000000000006C1C                 mov     rdi, rax
.text:0000000000006C1F                 mov     esi, edx
.text:0000000000006C21                 xor     eax, eax
.text:0000000000006C23                 jmp     open_safer
.text:0000000000006C23 ; ---------------------------------------------------------------------------
.text:0000000000006C28                 align 10h
.text:0000000000006C30
.text:0000000000006C30 loc_6C30:                               ; CODE XREF: diropen_isra_6+1A↑j
.text:0000000000006C30                 mov     rsi, rax
.text:0000000000006C33                 xor     eax, eax
.text:0000000000006C35                 jmp     openat_safer
.text:0000000000006C35 ; } // starts at 6C00
.text:0000000000006C35 diropen_isra_6  endp
.text:0000000000006C35
.text:0000000000006C35 ; ---------------------------------------------------------------------------
.text:0000000000006C3A                 align 20h
.text:0000000000006C40
.text:0000000000006C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C40
.text:0000000000006C40 ; Attributes: info_from_lumina
.text:0000000000006C40
.text:0000000000006C40 fts_safe_changedir proc near            ; CODE XREF: fts_build+879↓p
.text:0000000000006C40                                         ; fts_build+892↓p ...
.text:0000000000006C40
.text:0000000000006C40 var_D9          = byte ptr -0D9h
.text:0000000000006C40 stat_buf        = stat ptr -0D8h
.text:0000000000006C40 var_40          = qword ptr -40h
.text:0000000000006C40
.text:0000000000006C40 ; __unwind {
.text:0000000000006C40                 push    r15
.text:0000000000006C42                 push    r14
.text:0000000000006C44                 mov     r14, rsi
.text:0000000000006C47                 push    r13
.text:0000000000006C49                 push    r12
.text:0000000000006C4B                 mov     r13, rdi
.text:0000000000006C4E                 push    rbp
.text:0000000000006C4F                 push    rbx
.text:0000000000006C50                 mov     r12d, edx
.text:0000000000006C53                 mov     rbp, rcx
.text:0000000000006C56                 sub     rsp, 0B8h
.text:0000000000006C5D                 mov     ebx, [rdi+48h]
.text:0000000000006C60                 mov     rax, fs:28h
.text:0000000000006C69                 mov     [rsp+0E8h+var_40], rax
.text:0000000000006C71                 xor     eax, eax
.text:0000000000006C73                 mov     r9d, ebx
.text:0000000000006C76                 and     r9d, 4
.text:0000000000006C7A                 test    rcx, rcx
.text:0000000000006C7D                 jz      loc_6D30
.text:0000000000006C83                 lea     rdx, off_BBC9
.text:0000000000006C8A                 mov     ecx, 3
.text:0000000000006C8F                 mov     rsi, rbp
.text:0000000000006C92                 mov     rdi, rdx
.text:0000000000006C95                 repe cmpsb
.text:0000000000006C97                 setnbe  al
.text:0000000000006C9A                 sbb     al, 0
.text:0000000000006C9C                 test    al, al
.text:0000000000006C9E                 jnz     loc_6D30
.text:0000000000006CA4                 test    r9d, r9d
.text:0000000000006CA7                 jnz     loc_6D35
.text:0000000000006CAD                 test    r12d, r12d
.text:0000000000006CB0                 jns     loc_6E9A
.text:0000000000006CB6                 test    bh, 2
.text:0000000000006CB9                 jnz     loc_6E00
.text:0000000000006CBF
.text:0000000000006CBF loc_6CBF:                               ; CODE XREF: fts_safe_changedir+1E9↓j
.text:0000000000006CBF                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006CC4
.text:0000000000006CC4 loc_6CC4:                               ; CODE XREF: fts_safe_changedir+1D2↓j
.text:0000000000006CC4                                         ; fts_safe_changedir+275↓j
.text:0000000000006CC4                 mov     edi, [r13+2Ch]
.text:0000000000006CC8                 mov     rdx, rbp
.text:0000000000006CCB                 mov     esi, ebx
.text:0000000000006CCD                 call    diropen_isra_6
.text:0000000000006CD2                 test    eax, eax
.text:0000000000006CD4                 mov     r15d, eax
.text:0000000000006CD7                 js      loc_6E8B
.text:0000000000006CDD                 mov     ebx, [r13+48h]
.text:0000000000006CE1                 test    bl, 2
.text:0000000000006CE4                 jz      loc_6D8A
.text:0000000000006CEA                 nop     word ptr [rax+rax+00h]
.text:0000000000006CF0
.text:0000000000006CF0 loc_6CF0:                               ; CODE XREF: fts_safe_changedir+144↓j
.text:0000000000006CF0                                         ; fts_safe_changedir+16A↓j ...
.text:0000000000006CF0                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:0000000000006CF5                 mov     esi, r15d       ; fildes
.text:0000000000006CF8                 mov     edi, 1          ; ver
.text:0000000000006CFD                 call    ___fxstat       ; PIC mode
.text:0000000000006D02                 test    eax, eax
.text:0000000000006D04                 jz      loc_6DD0
.text:0000000000006D0A
.text:0000000000006D0A loc_6D0A:                               ; CODE XREF: fts_safe_changedir+1AA↓j
.text:0000000000006D0A                 mov     ebx, 0FFFFFFFFh
.text:0000000000006D0F
.text:0000000000006D0F loc_6D0F:                               ; CODE XREF: fts_safe_changedir+183↓j
.text:0000000000006D0F                 test    r12d, r12d
.text:0000000000006D12                 jns     short loc_6D45
.text:0000000000006D14                 call    ___errno_location ; PIC mode
.text:0000000000006D19                 mov     r12d, [rax]
.text:0000000000006D1C                 mov     rbp, rax
.text:0000000000006D1F                 mov     edi, r15d       ; fd
.text:0000000000006D22                 call    _close          ; PIC mode
.text:0000000000006D27                 mov     [rbp+0], r12d
.text:0000000000006D2B                 jmp     short loc_6D45
.text:0000000000006D2B ; ---------------------------------------------------------------------------
.text:0000000000006D2D                 align 10h
.text:0000000000006D30
.text:0000000000006D30 loc_6D30:                               ; CODE XREF: fts_safe_changedir+3D↑j
.text:0000000000006D30                                         ; fts_safe_changedir+5E↑j
.text:0000000000006D30                 test    r9d, r9d
.text:0000000000006D33                 jz      short loc_6D70
.text:0000000000006D35
.text:0000000000006D35 loc_6D35:                               ; CODE XREF: fts_safe_changedir+67↑j
.text:0000000000006D35                 and     bh, 2
.text:0000000000006D38                 jz      short loc_6D43
.text:0000000000006D3A                 test    r12d, r12d
.text:0000000000006D3D                 jns     loc_6DF0
.text:0000000000006D43
.text:0000000000006D43 loc_6D43:                               ; CODE XREF: fts_safe_changedir+F8↑j
.text:0000000000006D43                 xor     ebx, ebx
.text:0000000000006D45
.text:0000000000006D45 loc_6D45:                               ; CODE XREF: fts_safe_changedir+D2↑j
.text:0000000000006D45                                         ; fts_safe_changedir+EB↑j ...
.text:0000000000006D45                 mov     rcx, [rsp+0E8h+var_40]
.text:0000000000006D4D                 xor     rcx, fs:28h
.text:0000000000006D56                 mov     eax, ebx
.text:0000000000006D58                 jnz     loc_6E95
.text:0000000000006D5E                 add     rsp, 0B8h
.text:0000000000006D65                 pop     rbx
.text:0000000000006D66                 pop     rbp
.text:0000000000006D67                 pop     r12
.text:0000000000006D69                 pop     r13
.text:0000000000006D6B                 pop     r14
.text:0000000000006D6D                 pop     r15
.text:0000000000006D6F                 retn
.text:0000000000006D70 ; ---------------------------------------------------------------------------
.text:0000000000006D70
.text:0000000000006D70 loc_6D70:                               ; CODE XREF: fts_safe_changedir+F3↑j
.text:0000000000006D70                 test    r12d, r12d
.text:0000000000006D73                 js      loc_6EB0
.text:0000000000006D79                 test    bl, 2
.text:0000000000006D7C                 mov     r15d, r12d
.text:0000000000006D7F                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006D84                 jnz     loc_6CF0
.text:0000000000006D8A
.text:0000000000006D8A loc_6D8A:                               ; CODE XREF: fts_safe_changedir+A4↑j
.text:0000000000006D8A                 test    rbp, rbp
.text:0000000000006D8D                 jz      short loc_6DB0
.text:0000000000006D8F                 lea     rdx, off_BBC9
.text:0000000000006D96
.text:0000000000006D96 loc_6D96:                               ; CODE XREF: fts_safe_changedir+265↓j
.text:0000000000006D96                 mov     ecx, 3
.text:0000000000006D9B                 mov     rsi, rbp
.text:0000000000006D9E                 mov     rdi, rdx
.text:0000000000006DA1                 repe cmpsb
.text:0000000000006DA3                 setnbe  al
.text:0000000000006DA6                 sbb     al, 0
.text:0000000000006DA8                 test    al, al
.text:0000000000006DAA                 jz      loc_6CF0
.text:0000000000006DB0
.text:0000000000006DB0 loc_6DB0:                               ; CODE XREF: fts_safe_changedir+14D↑j
.text:0000000000006DB0                                         ; fts_safe_changedir+1FA↓j ...
.text:0000000000006DB0                 and     bh, 2
.text:0000000000006DB3                 jnz     loc_6E48
.text:0000000000006DB9                 mov     edi, r15d       ; fd
.text:0000000000006DBC                 call    _fchdir         ; PIC mode
.text:0000000000006DC1                 mov     ebx, eax
.text:0000000000006DC3                 jmp     loc_6D0F
.text:0000000000006DC3 ; ---------------------------------------------------------------------------
.text:0000000000006DC8                 align 10h
.text:0000000000006DD0
.text:0000000000006DD0 loc_6DD0:                               ; CODE XREF: fts_safe_changedir+C4↑j
.text:0000000000006DD0                 mov     rax, [rsp+0E8h+stat_buf.st_dev]
.text:0000000000006DD5                 cmp     [r14+78h], rax
.text:0000000000006DD9                 jz      loc_6E70
.text:0000000000006DDF
.text:0000000000006DDF loc_6DDF:                               ; CODE XREF: fts_safe_changedir+23C↓j
.text:0000000000006DDF                 call    ___errno_location ; PIC mode
.text:0000000000006DE4                 mov     dword ptr [rax], 2
.text:0000000000006DEA                 jmp     loc_6D0A
.text:0000000000006DEA ; ---------------------------------------------------------------------------
.text:0000000000006DEF                 align 10h
.text:0000000000006DF0
.text:0000000000006DF0 loc_6DF0:                               ; CODE XREF: fts_safe_changedir+FD↑j
.text:0000000000006DF0                 mov     edi, r12d       ; fd
.text:0000000000006DF3                 xor     ebx, ebx
.text:0000000000006DF5                 call    _close          ; PIC mode
.text:0000000000006DFA                 jmp     loc_6D45
.text:0000000000006DFA ; ---------------------------------------------------------------------------
.text:0000000000006DFF                 align 20h
.text:0000000000006E00
.text:0000000000006E00 loc_6E00:                               ; CODE XREF: fts_safe_changedir+79↑j
.text:0000000000006E00                 lea     r15, [r13+60h]
.text:0000000000006E04                 mov     rdi, r15
.text:0000000000006E07                 call    i_ring_empty    ; PIC mode
.text:0000000000006E0C                 test    al, al
.text:0000000000006E0E                 mov     [rsp+0E8h+var_D9], al
.text:0000000000006E12                 jnz     loc_6CC4
.text:0000000000006E18                 mov     rdi, r15
.text:0000000000006E1B                 call    i_ring_pop      ; PIC mode
.text:0000000000006E20                 test    eax, eax
.text:0000000000006E22                 mov     r15d, eax
.text:0000000000006E25                 mov     ebx, [r13+48h]
.text:0000000000006E29                 js      loc_6CBF
.text:0000000000006E2F                 test    bl, 2
.text:0000000000006E32                 mov     r12d, eax
.text:0000000000006E35                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006E3A                 jz      loc_6DB0
.text:0000000000006E40                 jmp     loc_6CF0
.text:0000000000006E40 ; ---------------------------------------------------------------------------
.text:0000000000006E45                 align 8
.text:0000000000006E48
.text:0000000000006E48 loc_6E48:                               ; CODE XREF: fts_safe_changedir+173↑j
.text:0000000000006E48                 movzx   r14d, [rsp+0E8h+var_D9]
.text:0000000000006E4E                 mov     esi, r15d
.text:0000000000006E51                 mov     rdi, r13
.text:0000000000006E54                 xor     ebx, ebx
.text:0000000000006E56                 xor     r14d, 1
.text:0000000000006E5A                 movzx   edx, r14b
.text:0000000000006E5E                 call    cwd_advance_fd
.text:0000000000006E63                 jmp     loc_6D45
.text:0000000000006E63 ; ---------------------------------------------------------------------------
.text:0000000000006E68                 align 10h
.text:0000000000006E70
.text:0000000000006E70 loc_6E70:                               ; CODE XREF: fts_safe_changedir+199↑j
.text:0000000000006E70                 mov     rax, [rsp+0E8h+stat_buf.st_ino]
.text:0000000000006E75                 cmp     [r14+80h], rax
.text:0000000000006E7C                 jnz     loc_6DDF
.text:0000000000006E82                 mov     ebx, [r13+48h]
.text:0000000000006E86                 jmp     loc_6DB0
.text:0000000000006E8B ; ---------------------------------------------------------------------------
.text:0000000000006E8B
.text:0000000000006E8B loc_6E8B:                               ; CODE XREF: fts_safe_changedir+97↑j
.text:0000000000006E8B                 mov     ebx, 0FFFFFFFFh
.text:0000000000006E90                 jmp     loc_6D45
.text:0000000000006E95 ; ---------------------------------------------------------------------------
.text:0000000000006E95
.text:0000000000006E95 loc_6E95:                               ; CODE XREF: fts_safe_changedir+118↑j
.text:0000000000006E95                 call    ___stack_chk_fail ; PIC mode
.text:0000000000006E9A ; ---------------------------------------------------------------------------
.text:0000000000006E9A
.text:0000000000006E9A loc_6E9A:                               ; CODE XREF: fts_safe_changedir+70↑j
.text:0000000000006E9A                 test    bl, 2
.text:0000000000006E9D                 mov     r15d, r12d
.text:0000000000006EA0                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006EA5                 jz      loc_6D96
.text:0000000000006EAB                 jmp     loc_6CF0
.text:0000000000006EB0 ; ---------------------------------------------------------------------------
.text:0000000000006EB0
.text:0000000000006EB0 loc_6EB0:                               ; CODE XREF: fts_safe_changedir+133↑j
.text:0000000000006EB0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006EB5                 jmp     loc_6CC4
.text:0000000000006EB5 ; } // starts at 6C40
.text:0000000000006EB5 fts_safe_changedir endp
.text:0000000000006EB5
.text:0000000000006EB5 ; ---------------------------------------------------------------------------
.text:0000000000006EBA                 align 20h
.text:0000000000006EC0
.text:0000000000006EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EC0
.text:0000000000006EC0
.text:0000000000006EC0 enter_dir_isra_10 proc near             ; CODE XREF: fts_build+616↓p
.text:0000000000006EC0                                         ; rpl_fts_read+383↓p
.text:0000000000006EC0 ; __unwind {
.text:0000000000006EC0                 and     edi, 102h
.text:0000000000006EC6                 push    r12
.text:0000000000006EC8                 mov     r12, rsi
.text:0000000000006ECB                 push    rbp
.text:0000000000006ECC                 push    rbx
.text:0000000000006ECD                 mov     rbx, rdx
.text:0000000000006ED0                 jz      short loc_6F40
.text:0000000000006ED2                 mov     edi, 18h        ; size
.text:0000000000006ED7                 call    _malloc
.text:0000000000006EDC                 test    rax, rax
.text:0000000000006EDF                 mov     rbp, rax
.text:0000000000006EE2                 jz      loc_6F68
.text:0000000000006EE8                 mov     rax, [rbx+78h]
.text:0000000000006EEC                 mov     rdi, [r12]
.text:0000000000006EF0                 mov     rsi, rbp
.text:0000000000006EF3                 mov     [rbp+10h], rbx
.text:0000000000006EF7                 mov     [rbp+0], rax
.text:0000000000006EFB                 mov     rax, [rbx+80h]
.text:0000000000006F02                 mov     [rbp+8], rax
.text:0000000000006F06                 call    hash_insert
.text:0000000000006F0B                 cmp     rbp, rax
.text:0000000000006F0E                 mov     r12, rax
.text:0000000000006F11                 jz      short loc_6F31
.text:0000000000006F13                 mov     rdi, rbp        ; ptr
.text:0000000000006F16                 call    free
.text:0000000000006F1B                 test    r12, r12
.text:0000000000006F1E                 jz      short loc_6F68
.text:0000000000006F20                 mov     rax, [r12+10h]
.text:0000000000006F25                 mov     ecx, 2
.text:0000000000006F2A                 mov     [rbx+70h], cx
.text:0000000000006F2E                 mov     [rbx], rax
.text:0000000000006F31
.text:0000000000006F31 loc_6F31:                               ; CODE XREF: enter_dir_isra_10+51↑j
.text:0000000000006F31                                         ; enter_dir_isra_10+8F↓j
.text:0000000000006F31                 pop     rbx
.text:0000000000006F32                 mov     eax, 1
.text:0000000000006F37                 pop     rbp
.text:0000000000006F38                 pop     r12
.text:0000000000006F3A                 retn
.text:0000000000006F3A ; ---------------------------------------------------------------------------
.text:0000000000006F3B                 align 20h
.text:0000000000006F40
.text:0000000000006F40 loc_6F40:                               ; CODE XREF: enter_dir_isra_10+10↑j
.text:0000000000006F40                 mov     rdi, [r12]
.text:0000000000006F44                 lea     rsi, [rdx+78h]
.text:0000000000006F48                 call    cycle_check
.text:0000000000006F4D                 test    al, al
.text:0000000000006F4F                 jz      short loc_6F31
.text:0000000000006F51                 mov     edx, 2
.text:0000000000006F56                 mov     [rbx], rbx
.text:0000000000006F59                 mov     [rbx+70h], dx
.text:0000000000006F5D                 pop     rbx
.text:0000000000006F5E                 pop     rbp
.text:0000000000006F5F                 pop     r12
.text:0000000000006F61                 retn
.text:0000000000006F61 ; ---------------------------------------------------------------------------
.text:0000000000006F62                 align 8
.text:0000000000006F68
.text:0000000000006F68 loc_6F68:                               ; CODE XREF: enter_dir_isra_10+22↑j
.text:0000000000006F68                                         ; enter_dir_isra_10+5E↑j
.text:0000000000006F68                 pop     rbx
.text:0000000000006F69                 xor     eax, eax
.text:0000000000006F6B                 pop     rbp
.text:0000000000006F6C                 pop     r12
.text:0000000000006F6E                 retn
.text:0000000000006F6E ; } // starts at 6EC0
.text:0000000000006F6E enter_dir_isra_10 endp
.text:0000000000006F6E
.text:0000000000006F6E ; ---------------------------------------------------------------------------
.text:0000000000006F6F                 align 10h
.text:0000000000006F70
.text:0000000000006F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F70
.text:0000000000006F70
.text:0000000000006F70 leave_dir_isra_12 proc near             ; CODE XREF: fts_build+5FA↓p
.text:0000000000006F70                                         ; rpl_fts_read+195↓p ...
.text:0000000000006F70
.text:0000000000006F70 var_28          = qword ptr -28h
.text:0000000000006F70 var_20          = qword ptr -20h
.text:0000000000006F70 var_10          = qword ptr -10h
.text:0000000000006F70
.text:0000000000006F70 ; __unwind {
.text:0000000000006F70                 sub     rsp, 28h
.text:0000000000006F74                 mov     rcx, rsi
.text:0000000000006F77                 mov     rax, fs:28h
.text:0000000000006F80                 mov     [rsp+28h+var_10], rax
.text:0000000000006F85                 xor     eax, eax
.text:0000000000006F87                 and     edi, 102h
.text:0000000000006F8D                 jnz     short loc_6FD0
.text:0000000000006F8F                 mov     rax, [rdx+8]
.text:0000000000006F93                 test    rax, rax
.text:0000000000006F96                 jz      short loc_6FB5
.text:0000000000006F98                 cmp     qword ptr [rax+58h], 0
.text:0000000000006F9D                 js      short loc_6FB5
.text:0000000000006F9F                 mov     rcx, [rsi]
.text:0000000000006FA2                 cmp     qword ptr [rcx+10h], 0
.text:0000000000006FA7                 jz      short loc_7023
.text:0000000000006FA9                 mov     rsi, [rdx+80h]
.text:0000000000006FB0                 cmp     [rcx], rsi
.text:0000000000006FB3                 jz      short loc_7000
.text:0000000000006FB5
.text:0000000000006FB5 loc_6FB5:                               ; CODE XREF: leave_dir_isra_12+26↑j
.text:0000000000006FB5                                         ; leave_dir_isra_12+2D↑j ...
.text:0000000000006FB5                 mov     rax, [rsp+28h+var_10]
.text:0000000000006FBA                 xor     rax, fs:28h
.text:0000000000006FC3                 jnz     short loc_701E
.text:0000000000006FC5                 add     rsp, 28h
.text:0000000000006FC9                 retn
.text:0000000000006FC9 ; ---------------------------------------------------------------------------
.text:0000000000006FCA                 align 10h
.text:0000000000006FD0
.text:0000000000006FD0 loc_6FD0:                               ; CODE XREF: leave_dir_isra_12+1D↑j
.text:0000000000006FD0                 mov     rax, [rdx+78h]
.text:0000000000006FD4                 mov     rdi, [rcx]
.text:0000000000006FD7                 mov     rsi, rsp
.text:0000000000006FDA                 mov     [rsp+28h+var_28], rax
.text:0000000000006FDE                 mov     rax, [rdx+80h]
.text:0000000000006FE5                 mov     [rsp+28h+var_20], rax
.text:0000000000006FEA                 call    hash_delete
.text:0000000000006FEF                 test    rax, rax
.text:0000000000006FF2                 jz      short loc_7023
.text:0000000000006FF4                 mov     rdi, rax        ; ptr
.text:0000000000006FF7                 call    free
.text:0000000000006FFC                 jmp     short loc_6FB5
.text:0000000000006FFC ; ---------------------------------------------------------------------------
.text:0000000000006FFE                 align 20h
.text:0000000000007000
.text:0000000000007000 loc_7000:                               ; CODE XREF: leave_dir_isra_12+43↑j
.text:0000000000007000                 mov     rsi, [rdx+78h]
.text:0000000000007004                 cmp     [rcx+8], rsi
.text:0000000000007008                 jnz     short loc_6FB5
.text:000000000000700A                 mov     rdx, [rax+78h]
.text:000000000000700E                 mov     rax, [rax+80h]
.text:0000000000007015                 mov     [rcx+8], rdx
.text:0000000000007019                 mov     [rcx], rax
.text:000000000000701C                 jmp     short loc_6FB5
.text:000000000000701E ; ---------------------------------------------------------------------------
.text:000000000000701E
.text:000000000000701E loc_701E:                               ; CODE XREF: leave_dir_isra_12+53↑j
.text:000000000000701E                 call    ___stack_chk_fail
.text:0000000000007023 ; ---------------------------------------------------------------------------
.text:0000000000007023
.text:0000000000007023 loc_7023:                               ; CODE XREF: leave_dir_isra_12+37↑j
.text:0000000000007023                                         ; leave_dir_isra_12+82↑j
.text:0000000000007023                 call    _abort
.text:0000000000007023 ; } // starts at 6F70
.text:0000000000007023 leave_dir_isra_12 endp
.text:0000000000007023
.text:0000000000007023 ; ---------------------------------------------------------------------------
.text:0000000000007028                 align 10h
.text:0000000000007030
.text:0000000000007030 ; =============== S U B R O U T I N E =======================================
.text:0000000000007030
.text:0000000000007030
.text:0000000000007030 fts_build       proc near               ; CODE XREF: rpl_fts_read+420↓p
.text:0000000000007030                                         ; rpl_fts_read+619↓p ...
.text:0000000000007030
.text:0000000000007030 var_A0          = qword ptr -0A0h
.text:0000000000007030 ptr             = qword ptr -98h
.text:0000000000007030 var_90          = qword ptr -90h
.text:0000000000007030 var_88          = qword ptr -88h
.text:0000000000007030 var_80          = qword ptr -80h
.text:0000000000007030 var_78          = qword ptr -78h
.text:0000000000007030 var_70          = qword ptr -70h
.text:0000000000007030 dest            = qword ptr -68h
.text:0000000000007030 var_60          = qword ptr -60h
.text:0000000000007030 var_58          = qword ptr -58h
.text:0000000000007030 var_50          = dword ptr -50h
.text:0000000000007030 var_4B          = byte ptr -4Bh
.text:0000000000007030 var_4A          = byte ptr -4Ah
.text:0000000000007030 var_49          = byte ptr -49h
.text:0000000000007030 fd              = dword ptr -44h
.text:0000000000007030 var_40          = qword ptr -40h
.text:0000000000007030
.text:0000000000007030 ; __unwind {
.text:0000000000007030                 push    r15
.text:0000000000007032                 push    r14
.text:0000000000007034                 mov     r15, rdi
.text:0000000000007037                 push    r13
.text:0000000000007039                 push    r12
.text:000000000000703B                 push    rbp
.text:000000000000703C                 push    rbx
.text:000000000000703D                 sub     rsp, 78h
.text:0000000000007041                 mov     rbp, [rdi]
.text:0000000000007044                 mov     rax, fs:28h
.text:000000000000704D                 mov     [rsp+0A8h+var_40], rax
.text:0000000000007052                 xor     eax, eax
.text:0000000000007054                 mov     [rsp+0A8h+var_50], esi
.text:0000000000007058                 mov     rax, [rbp+18h]
.text:000000000000705C                 test    rax, rax
.text:000000000000705F                 mov     [rsp+0A8h+var_58], rax
.text:0000000000007064                 jz      loc_74A0
.text:000000000000706A                 mov     rdi, rax        ; dirp
.text:000000000000706D                 call    _dirfd
.text:0000000000007072                 test    eax, eax
.text:0000000000007074                 mov     [rsp+0A8h+fd], eax
.text:0000000000007078                 js      loc_75D0
.text:000000000000707E                 cmp     qword ptr [r15+40h], 0
.text:0000000000007083                 jz      loc_7858
.text:0000000000007089                 mov     [rsp+0A8h+var_70], 0FFFFFFFFFFFFFFFFh
.text:0000000000007092
.text:0000000000007092 loc_7092:                               ; CODE XREF: fts_build+89F↓j
.text:0000000000007092                 mov     edi, [r15+48h]
.text:0000000000007096                 mov     [rsp+0A8h+var_49], 1
.text:000000000000709B
.text:000000000000709B loc_709B:                               ; CODE XREF: fts_build+57D↓j
.text:000000000000709B                                         ; fts_build+83A↓j ...
.text:000000000000709B                 mov     rcx, [rbp+48h]
.text:000000000000709F                 mov     rdx, [rbp+38h]
.text:00000000000070A3                 mov     [rsp+0A8h+dest], 0
.text:00000000000070AC                 cmp     byte ptr [rdx+rcx-1], 2Fh ; '/'
.text:00000000000070B1                 lea     rax, [rcx-1]
.text:00000000000070B5                 cmovnz  rax, rcx
.text:00000000000070B9                 and     edi, 4
.text:00000000000070BC                 mov     [rsp+0A8h+var_60], rax
.text:00000000000070C1                 jz      short loc_70D3
.text:00000000000070C3                 add     rax, [r15+20h]
.text:00000000000070C7                 lea     rbx, [rax+1]
.text:00000000000070CB                 mov     byte ptr [rax], 2Fh ; '/'
.text:00000000000070CE                 mov     [rsp+0A8h+dest], rbx
.text:00000000000070D3
.text:00000000000070D3 loc_70D3:                               ; CODE XREF: fts_build+91↑j
.text:00000000000070D3                 mov     rax, [rsp+0A8h+var_60]
.text:00000000000070D8                 mov     rbx, [r15+30h]
.text:00000000000070DC                 mov     [rsp+0A8h+var_4A], 0
.text:00000000000070E1                 mov     [rsp+0A8h+var_4B], 0
.text:00000000000070E6                 mov     [rsp+0A8h+var_A0], 0
.text:00000000000070EF                 mov     [rsp+0A8h+ptr], 0
.text:00000000000070F8                 add     rax, 1
.text:00000000000070FC                 mov     [rsp+0A8h+var_88], rbp
.text:0000000000007101                 sub     rbx, rax
.text:0000000000007104                 mov     [rsp+0A8h+var_90], rax
.text:0000000000007109                 mov     rax, [rbp+58h]
.text:000000000000710D                 mov     [rsp+0A8h+var_80], rbx
.text:0000000000007112                 xor     ebx, ebx
.text:0000000000007114                 add     rax, 1
.text:0000000000007118                 mov     [rsp+0A8h+var_78], rax
.text:000000000000711D                 jmp     loc_71FF
.text:000000000000711D ; ---------------------------------------------------------------------------
.text:0000000000007122                 align 8
.text:0000000000007128
.text:0000000000007128 loc_7128:                               ; CODE XREF: fts_build+242↓j
.text:0000000000007128                                         ; fts_build+2A6↓j
.text:0000000000007128                 mov     r9, r14
.text:000000000000712B                 add     r9, [rsp+0A8h+var_90]
.text:0000000000007130                 jb      loc_7990
.text:0000000000007136                 mov     rax, [rsp+0A8h+var_78]
.text:000000000000713B                 lea     rsi, [r13+108h] ; src
.text:0000000000007142                 mov     [r13+58h], rax
.text:0000000000007146                 mov     rax, [r15]
.text:0000000000007149                 mov     [r13+48h], r9
.text:000000000000714D                 mov     [r13+8], rax
.text:0000000000007151                 mov     rax, [rbp+0]
.text:0000000000007155                 mov     [r13+80h], rax
.text:000000000000715C                 mov     eax, [r15+48h]
.text:0000000000007160                 test    al, 4
.text:0000000000007162                 jnz     loc_73D0
.text:0000000000007168                 mov     [r13+30h], rsi
.text:000000000000716C
.text:000000000000716C loc_716C:                               ; CODE XREF: fts_build+3BE↓j
.text:000000000000716C                 cmp     qword ptr [r15+40h], 0
.text:0000000000007171                 jz      short loc_717C
.text:0000000000007173                 test    ah, 4
.text:0000000000007176                 jz      loc_7478
.text:000000000000717C
.text:000000000000717C loc_717C:                               ; CODE XREF: fts_build+141↑j
.text:000000000000717C                 movzx   edx, byte ptr [rbp+12h]
.text:0000000000007180                 and     eax, 18h
.text:0000000000007183                 mov     esi, edx
.text:0000000000007185                 sub     edx, 1
.text:0000000000007188                 cmp     eax, 18h
.text:000000000000718B                 jz      loc_7440
.text:0000000000007191
.text:0000000000007191 loc_7191:                               ; CODE XREF: fts_build+416↓j
.text:0000000000007191                 mov     ecx, 0Bh
.text:0000000000007196                 cmp     edx, 0Bh
.text:0000000000007199                 mov     [r13+70h], cx
.text:000000000000719E                 ja      loc_7408
.text:00000000000071A4                 lea     rax, CSWTCH_53
.text:00000000000071AB                 mov     eax, [rax+rdx*4]
.text:00000000000071AE                 mov     [r13+90h], eax
.text:00000000000071B5                 mov     eax, 2
.text:00000000000071BA
.text:00000000000071BA loc_71BA:                               ; CODE XREF: fts_build+3E8↓j
.text:00000000000071BA                                         ; fts_build+43F↓j ...
.text:00000000000071BA                 mov     [r13+0A8h], rax
.text:00000000000071C1
.text:00000000000071C1 loc_71C1:                               ; CODE XREF: fts_build+45A↓j
.text:00000000000071C1                 cmp     [rsp+0A8h+ptr], 0
.text:00000000000071C7                 mov     qword ptr [r13+10h], 0
.text:00000000000071CF                 jz      loc_73F8
.text:00000000000071D5                 mov     rax, [rsp+0A8h+var_A0]
.text:00000000000071DA                 mov     [rax+10h], r13
.text:00000000000071DE
.text:00000000000071DE loc_71DE:                               ; CODE XREF: fts_build+3CD↓j
.text:00000000000071DE                 cmp     rbx, 2710h
.text:00000000000071E5                 jz      loc_72E0
.text:00000000000071EB
.text:00000000000071EB loc_71EB:                               ; CODE XREF: fts_build+2B5↓j
.text:00000000000071EB                                         ; fts_build+645↓j
.text:00000000000071EB                 add     rbx, 1
.text:00000000000071EF                 cmp     rbx, [rsp+0A8h+var_70]
.text:00000000000071F4                 jnb     loc_7338
.text:00000000000071FA
.text:00000000000071FA loc_71FA:                               ; CODE XREF: fts_build+2FD↓j
.text:00000000000071FA                                         ; fts_build+406↓j
.text:00000000000071FA                 mov     [rsp+0A8h+var_A0], r13
.text:00000000000071FF
.text:00000000000071FF loc_71FF:                               ; CODE XREF: fts_build+ED↑j
.text:00000000000071FF                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000007204                 mov     r13, [rax+18h]
.text:0000000000007208                 test    r13, r13
.text:000000000000720B                 jz      loc_76D8
.text:0000000000007211                 call    ___errno_location
.text:0000000000007216                 mov     rdi, r13        ; dirp
.text:0000000000007219                 mov     dword ptr [rax], 0
.text:000000000000721F                 mov     r12, rax
.text:0000000000007222                 call    _readdir
.text:0000000000007227                 test    rax, rax
.text:000000000000722A                 mov     rbp, rax
.text:000000000000722D                 jz      loc_77B0
.text:0000000000007233                 test    byte ptr [r15+48h], 20h
.text:0000000000007238                 jnz     short loc_7244
.text:000000000000723A                 cmp     byte ptr [rax+13h], 2Eh ; '.'
.text:000000000000723E                 jz      loc_7420
.text:0000000000007244
.text:0000000000007244 loc_7244:                               ; CODE XREF: fts_build+208↑j
.text:0000000000007244                                         ; fts_build+3FB↓j
.text:0000000000007244                 lea     r13, [rbp+13h]
.text:0000000000007248                 mov     rdi, r13        ; s
.text:000000000000724B                 call    _strlen
.text:0000000000007250                 mov     rsi, r13
.text:0000000000007253                 mov     rdx, rax
.text:0000000000007256                 mov     rdi, r15
.text:0000000000007259                 mov     r14, rax
.text:000000000000725C                 call    fts_alloc
.text:0000000000007261                 test    rax, rax
.text:0000000000007264                 mov     r13, rax
.text:0000000000007267                 jz      loc_7680
.text:000000000000726D                 cmp     [rsp+0A8h+var_80], r14
.text:0000000000007272                 ja      loc_7128
.text:0000000000007278                 mov     rax, [r15+20h]
.text:000000000000727C                 lea     rsi, [r15+30h]
.text:0000000000007280                 lea     rdi, [r15+20h]
.text:0000000000007284                 mov     [rsp+0A8h+var_80], rax
.text:0000000000007289                 mov     rax, [rsp+0A8h+var_60]
.text:000000000000728E                 lea     rdx, [rax+r14+2]
.text:0000000000007293                 call    fts_palloc_isra_2
.text:0000000000007298                 test    al, al
.text:000000000000729A                 jz      loc_7680
.text:00000000000072A0                 mov     rdx, [r15+20h]
.text:00000000000072A4                 cmp     rdx, [rsp+0A8h+var_80]
.text:00000000000072A9                 jz      loc_7490
.text:00000000000072AF                 add     rdx, [rsp+0A8h+var_90]
.text:00000000000072B4                 test    byte ptr [r15+48h], 4
.text:00000000000072B9                 cmovz   rdx, [rsp+0A8h+dest]
.text:00000000000072BF                 mov     [rsp+0A8h+dest], rdx
.text:00000000000072C4
.text:00000000000072C4 loc_72C4:                               ; CODE XREF: fts_build+465↓j
.text:00000000000072C4                 mov     rcx, [r15+30h]
.text:00000000000072C8                 sub     rcx, [rsp+0A8h+var_90]
.text:00000000000072CD                 mov     [rsp+0A8h+var_4B], al
.text:00000000000072D1                 mov     [rsp+0A8h+var_80], rcx
.text:00000000000072D6                 jmp     loc_7128
.text:00000000000072D6 ; ---------------------------------------------------------------------------
.text:00000000000072DB                 align 20h
.text:00000000000072E0
.text:00000000000072E0 loc_72E0:                               ; CODE XREF: fts_build+1B5↑j
.text:00000000000072E0                 cmp     qword ptr [r15+40h], 0
.text:00000000000072E5                 jnz     loc_71EB
.text:00000000000072EB                 mov     esi, [rsp+0A8h+fd]
.text:00000000000072EF                 mov     rdi, [rsp+0A8h+var_88]
.text:00000000000072F4                 call    filesystem_type
.text:00000000000072F9                 cmp     rax, 1021994h
.text:00000000000072FF                 jz      loc_7670
.text:0000000000007305                 mov     ecx, 0FF534D42h
.text:000000000000730A                 cmp     rax, rcx
.text:000000000000730D                 jz      loc_7670
.text:0000000000007313                 cmp     rax, 6969h
.text:0000000000007319                 jz      loc_7670
.text:000000000000731F                 add     rbx, 1
.text:0000000000007323                 cmp     rbx, [rsp+0A8h+var_70]
.text:0000000000007328                 mov     [rsp+0A8h+var_4A], 1
.text:000000000000732D                 jb      loc_71FA
.text:0000000000007333                 nop     dword ptr [rax+rax+00h]
.text:0000000000007338
.text:0000000000007338 loc_7338:                               ; CODE XREF: fts_build+1C4↑j
.text:0000000000007338                 cmp     [rsp+0A8h+var_4B], 0
.text:000000000000733D                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000007342                 jz      loc_76E6
.text:0000000000007348
.text:0000000000007348 loc_7348:                               ; CODE XREF: fts_build+6B0↓j
.text:0000000000007348                 mov     rax, [r15+8]
.text:000000000000734C                 mov     rcx, [r15+20h]
.text:0000000000007350                 test    rax, rax
.text:0000000000007353                 jz      short loc_7380
.text:0000000000007355                 nop     dword ptr [rax]
.text:0000000000007358
.text:0000000000007358 loc_7358:                               ; CODE XREF: fts_build+34E↓j
.text:0000000000007358                 mov     rdx, [rax+30h]
.text:000000000000735C                 lea     rsi, [rax+108h]
.text:0000000000007363                 cmp     rdx, rsi
.text:0000000000007366                 jz      short loc_7373
.text:0000000000007368                 sub     rdx, [rax+38h]
.text:000000000000736C                 add     rdx, rcx
.text:000000000000736F                 mov     [rax+30h], rdx
.text:0000000000007373
.text:0000000000007373 loc_7373:                               ; CODE XREF: fts_build+336↑j
.text:0000000000007373                 mov     [rax+38h], rcx
.text:0000000000007377                 mov     rax, [rax+10h]
.text:000000000000737B                 test    rax, rax
.text:000000000000737E                 jnz     short loc_7358
.text:0000000000007380
.text:0000000000007380 loc_7380:                               ; CODE XREF: fts_build+323↑j
.text:0000000000007380                 mov     rax, [rsp+0A8h+ptr]
.text:0000000000007385                 jmp     short loc_7393
.text:0000000000007385 ; ---------------------------------------------------------------------------
.text:0000000000007387                 align 10h
.text:0000000000007390
.text:0000000000007390 loc_7390:                               ; CODE XREF: fts_build+394↓j
.text:0000000000007390                                         ; fts_build+39A↓j
.text:0000000000007390                 mov     rax, rdx
.text:0000000000007393
.text:0000000000007393 loc_7393:                               ; CODE XREF: fts_build+355↑j
.text:0000000000007393                 cmp     qword ptr [rax+58h], 0
.text:0000000000007398                 js      loc_76E6
.text:000000000000739E                 mov     rdx, [rax+30h]
.text:00000000000073A2                 lea     rsi, [rax+108h]
.text:00000000000073A9                 cmp     rdx, rsi
.text:00000000000073AC                 jz      short loc_73B9
.text:00000000000073AE                 sub     rdx, [rax+38h]
.text:00000000000073B2                 add     rdx, rcx
.text:00000000000073B5                 mov     [rax+30h], rdx
.text:00000000000073B9
.text:00000000000073B9 loc_73B9:                               ; CODE XREF: fts_build+37C↑j
.text:00000000000073B9                 mov     rdx, [rax+10h]
.text:00000000000073BD                 mov     [rax+38h], rcx
.text:00000000000073C1                 test    rdx, rdx
.text:00000000000073C4                 jnz     short loc_7390
.text:00000000000073C6                 mov     rdx, [rax+8]
.text:00000000000073CA                 jmp     short loc_7390
.text:00000000000073CA ; ---------------------------------------------------------------------------
.text:00000000000073CC                 align 10h
.text:00000000000073D0
.text:00000000000073D0 loc_73D0:                               ; CODE XREF: fts_build+132↑j
.text:00000000000073D0                 mov     rax, [r13+38h]
.text:00000000000073D4                 mov     rdi, [rsp+0A8h+dest] ; dest
.text:00000000000073D9                 mov     [r13+30h], rax
.text:00000000000073DD                 mov     rax, [r13+60h]
.text:00000000000073E1                 lea     rdx, [rax+1]    ; n
.text:00000000000073E5                 call    _memmove
.text:00000000000073EA                 mov     eax, [r15+48h]
.text:00000000000073EE                 jmp     loc_716C
.text:00000000000073EE ; ---------------------------------------------------------------------------
.text:00000000000073F3                 align 8
.text:00000000000073F8
.text:00000000000073F8 loc_73F8:                               ; CODE XREF: fts_build+19F↑j
.text:00000000000073F8                 mov     [rsp+0A8h+ptr], r13
.text:00000000000073FD                 jmp     loc_71DE
.text:00000000000073FD ; ---------------------------------------------------------------------------
.text:0000000000007402                 align 8
.text:0000000000007408
.text:0000000000007408 loc_7408:                               ; CODE XREF: fts_build+16E↑j
.text:0000000000007408                 mov     dword ptr [r13+90h], 0
.text:0000000000007413                 mov     eax, 2
.text:0000000000007418                 jmp     loc_71BA
.text:0000000000007418 ; ---------------------------------------------------------------------------
.text:000000000000741D                 align 20h
.text:0000000000007420
.text:0000000000007420 loc_7420:                               ; CODE XREF: fts_build+20E↑j
.text:0000000000007420                 cmp     byte ptr [rax+14h], 0
.text:0000000000007424                 jz      short loc_7431
.text:0000000000007426                 cmp     word ptr [rax+14h], 2Eh ; '.'
.text:000000000000742B                 jnz     loc_7244
.text:0000000000007431
.text:0000000000007431 loc_7431:                               ; CODE XREF: fts_build+3F4↑j
.text:0000000000007431                 mov     r13, [rsp+0A8h+var_A0]
.text:0000000000007436                 jmp     loc_71FA
.text:0000000000007436 ; ---------------------------------------------------------------------------
.text:000000000000743B                 align 20h
.text:0000000000007440
.text:0000000000007440 loc_7440:                               ; CODE XREF: fts_build+15B↑j
.text:0000000000007440                 and     esi, 0FBh
.text:0000000000007446                 jz      loc_7191
.text:000000000000744C                 mov     eax, 0Bh
.text:0000000000007451                 cmp     edx, 0Bh
.text:0000000000007454                 mov     [r13+70h], ax
.text:0000000000007459                 jbe     loc_79E6
.text:000000000000745F                 mov     dword ptr [r13+90h], 0
.text:000000000000746A                 mov     eax, 1
.text:000000000000746F                 jmp     loc_71BA
.text:000000000000746F ; ---------------------------------------------------------------------------
.text:0000000000007474                 align 8
.text:0000000000007478
.text:0000000000007478 loc_7478:                               ; CODE XREF: fts_build+146↑j
.text:0000000000007478                 xor     edx, edx
.text:000000000000747A                 mov     rsi, r13
.text:000000000000747D                 mov     rdi, r15
.text:0000000000007480                 call    fts_stat
.text:0000000000007485                 mov     [r13+70h], ax
.text:000000000000748A                 jmp     loc_71C1
.text:000000000000748A ; ---------------------------------------------------------------------------
.text:000000000000748F                 align 10h
.text:0000000000007490
.text:0000000000007490 loc_7490:                               ; CODE XREF: fts_build+279↑j
.text:0000000000007490                 movzx   eax, [rsp+0A8h+var_4B]
.text:0000000000007495                 jmp     loc_72C4
.text:0000000000007495 ; ---------------------------------------------------------------------------
.text:000000000000749A                 align 20h
.text:00000000000074A0
.text:00000000000074A0 loc_74A0:                               ; CODE XREF: fts_build+34↑j
.text:00000000000074A0                 mov     eax, [rdi+48h]
.text:00000000000074A3                 mov     edx, eax
.text:00000000000074A5                 and     edx, 10h
.text:00000000000074A8                 jz      short loc_74B7
.text:00000000000074AA                 test    al, 1
.text:00000000000074AC                 mov     edx, 20000h
.text:00000000000074B1                 jnz     loc_75B8
.text:00000000000074B7
.text:00000000000074B7 loc_74B7:                               ; CODE XREF: fts_build+478↑j
.text:00000000000074B7                                         ; fts_build+595↓j
.text:00000000000074B7                 and     eax, 204h
.text:00000000000074BC                 mov     rsi, [rbp+30h]
.text:00000000000074C0                 mov     edi, 0FFFFFF9Ch
.text:00000000000074C5                 cmp     eax, 200h
.text:00000000000074CA                 jnz     short loc_74D0
.text:00000000000074CC                 mov     edi, [r15+2Ch]
.text:00000000000074D0
.text:00000000000074D0 loc_74D0:                               ; CODE XREF: fts_build+49A↑j
.text:00000000000074D0                 lea     rcx, [rsp+0A8h+fd]
.text:00000000000074D5                 call    opendirat
.text:00000000000074DA                 test    rax, rax
.text:00000000000074DD                 mov     [rbp+18h], rax
.text:00000000000074E1                 jz      loc_7800
.text:00000000000074E7                 cmp     word ptr [rbp+70h], 0Bh
.text:00000000000074EC                 jz      loc_7880
.text:00000000000074F2                 mov     edi, [r15+48h]
.text:00000000000074F6                 test    edi, 100h
.text:00000000000074FC                 jnz     loc_7620
.text:0000000000007502
.text:0000000000007502 loc_7502:                               ; CODE XREF: fts_build+61D↓j
.text:0000000000007502                                         ; fts_build+861↓j
.text:0000000000007502                 cmp     qword ptr [r15+40h], 1
.text:0000000000007507                 sbb     rax, rax
.text:000000000000750A                 and     eax, 186A1h
.text:000000000000750F                 sub     rax, 1
.text:0000000000007513                 cmp     [rsp+0A8h+var_50], 2
.text:0000000000007518                 mov     [rsp+0A8h+var_70], rax
.text:000000000000751D                 jz      loc_7870
.text:0000000000007523                 mov     edx, [r15+48h]
.text:0000000000007527                 mov     eax, [rsp+0A8h+fd]
.text:000000000000752B                 and     edx, 38h
.text:000000000000752E                 cmp     edx, 18h
.text:0000000000007531                 jz      loc_78D4
.text:0000000000007537
.text:0000000000007537 loc_7537:                               ; CODE XREF: fts_build+8AC↓j
.text:0000000000007537                                         ; fts_build+8C4↓j
.text:0000000000007537                 cmp     [rsp+0A8h+var_50], 3
.text:000000000000753C                 mov     r12d, 1
.text:0000000000007542                 setz    bl
.text:0000000000007545
.text:0000000000007545 loc_7545:                               ; CODE XREF: fts_build+955↓j
.text:0000000000007545                 test    byte ptr [r15+49h], 2
.text:000000000000754A                 jnz     loc_792C
.text:0000000000007550
.text:0000000000007550 loc_7550:                               ; CODE XREF: fts_build+913↓j
.text:0000000000007550                 test    eax, eax
.text:0000000000007552                 jns     loc_78B8
.text:0000000000007558
.text:0000000000007558 loc_7558:                               ; CODE XREF: fts_build+899↓j
.text:0000000000007558                 test    bl, bl
.text:000000000000755A                 jz      short loc_756B
.text:000000000000755C                 test    r12b, r12b
.text:000000000000755F                 jz      short loc_756B
.text:0000000000007561                 call    ___errno_location
.text:0000000000007566                 mov     eax, [rax]
.text:0000000000007568                 mov     [rbp+40h], eax
.text:000000000000756B
.text:000000000000756B loc_756B:                               ; CODE XREF: fts_build+52A↑j
.text:000000000000756B                                         ; fts_build+52F↑j
.text:000000000000756B                 or      word ptr [rbp+72h], 1
.text:0000000000007570                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000007574                 call    _closedir
.text:0000000000007579                 mov     edi, [r15+48h]
.text:000000000000757D                 mov     qword ptr [rbp+18h], 0
.text:0000000000007585                 test    edi, 200h
.text:000000000000758B                 jz      short loc_75A0
.text:000000000000758D                 mov     eax, [rsp+0A8h+fd]
.text:0000000000007591                 test    eax, eax
.text:0000000000007593                 js      short loc_75A0
.text:0000000000007595                 mov     edi, eax        ; fd
.text:0000000000007597                 call    _close
.text:000000000000759C                 mov     edi, [r15+48h]
.text:00000000000075A0
.text:00000000000075A0 loc_75A0:                               ; CODE XREF: fts_build+55B↑j
.text:00000000000075A0                                         ; fts_build+563↑j
.text:00000000000075A0                 mov     qword ptr [rbp+18h], 0
.text:00000000000075A8                 mov     [rsp+0A8h+var_49], 0
.text:00000000000075AD                 jmp     loc_709B
.text:00000000000075AD ; ---------------------------------------------------------------------------
.text:00000000000075B2                 align 8
.text:00000000000075B8
.text:00000000000075B8 loc_75B8:                               ; CODE XREF: fts_build+481↑j
.text:00000000000075B8                 xor     edx, edx
.text:00000000000075BA                 cmp     qword ptr [rbp+58h], 0
.text:00000000000075BF                 setnz   dl
.text:00000000000075C2                 shl     edx, 11h
.text:00000000000075C5                 jmp     loc_74B7
.text:00000000000075C5 ; ---------------------------------------------------------------------------
.text:00000000000075CA                 align 10h
.text:00000000000075D0
.text:00000000000075D0 loc_75D0:                               ; CODE XREF: fts_build+48↑j
.text:00000000000075D0                 mov     rdi, [rbp+18h]  ; dirp
.text:00000000000075D4                 call    _closedir
.text:00000000000075D9                 cmp     [rsp+0A8h+var_50], 3
.text:00000000000075DE                 mov     qword ptr [rbp+18h], 0
.text:00000000000075E6                 jz      loc_780B
.text:00000000000075EC
.text:00000000000075EC loc_75EC:                               ; CODE XREF: fts_build+7D5↓j
.text:00000000000075EC                                         ; fts_build+7F0↓j
.text:00000000000075EC                 mov     [rsp+0A8h+ptr], 0
.text:00000000000075F5
.text:00000000000075F5 loc_75F5:                               ; CODE XREF: fts_build+637↓j
.text:00000000000075F5                                         ; fts_build+69C↓j ...
.text:00000000000075F5                 mov     rbx, [rsp+0A8h+var_40]
.text:00000000000075FA                 xor     rbx, fs:28h
.text:0000000000007603                 mov     rax, [rsp+0A8h+ptr]
.text:0000000000007608                 jnz     loc_79E1
.text:000000000000760E                 add     rsp, 78h
.text:0000000000007612                 pop     rbx
.text:0000000000007613                 pop     rbp
.text:0000000000007614                 pop     r12
.text:0000000000007616                 pop     r13
.text:0000000000007618                 pop     r14
.text:000000000000761A                 pop     r15
.text:000000000000761C                 retn
.text:000000000000761C ; ---------------------------------------------------------------------------
.text:000000000000761D                 align 20h
.text:0000000000007620
.text:0000000000007620 loc_7620:                               ; CODE XREF: fts_build+4CC↑j
.text:0000000000007620                 lea     rbx, [r15+58h]
.text:0000000000007624                 mov     rdx, rbp
.text:0000000000007627                 mov     rsi, rbx
.text:000000000000762A                 call    leave_dir_isra_12
.text:000000000000762F                 xor     edx, edx
.text:0000000000007631                 mov     rsi, rbp
.text:0000000000007634                 mov     rdi, r15
.text:0000000000007637                 call    fts_stat
.text:000000000000763C                 mov     edi, [r15+48h]
.text:0000000000007640                 mov     rdx, rbp
.text:0000000000007643                 mov     rsi, rbx
.text:0000000000007646                 call    enter_dir_isra_10
.text:000000000000764B                 test    al, al
.text:000000000000764D                 jnz     loc_7502
.text:0000000000007653                 call    ___errno_location
.text:0000000000007658                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007661                 mov     dword ptr [rax], 0Ch
.text:0000000000007667                 jmp     short loc_75F5
.text:0000000000007667 ; ---------------------------------------------------------------------------
.text:0000000000007669                 align 10h
.text:0000000000007670
.text:0000000000007670 loc_7670:                               ; CODE XREF: fts_build+2CF↑j
.text:0000000000007670                                         ; fts_build+2DD↑j ...
.text:0000000000007670                 mov     [rsp+0A8h+var_4A], 0
.text:0000000000007675                 jmp     loc_71EB
.text:0000000000007675 ; ---------------------------------------------------------------------------
.text:000000000000767A                 align 20h
.text:0000000000007680
.text:0000000000007680 loc_7680:                               ; CODE XREF: fts_build+237↑j
.text:0000000000007680                                         ; fts_build+26A↑j
.text:0000000000007680                 mov     rdi, r13        ; ptr
.text:0000000000007683                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000007688                 mov     ebx, [r12]
.text:000000000000768C                 call    free
.text:0000000000007691                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000007696                 call    fts_lfree
.text:000000000000769B                 mov     rdi, [rbp+18h]  ; dirp
.text:000000000000769F                 call    _closedir
.text:00000000000076A4                 mov     r9d, 7
.text:00000000000076AA                 mov     qword ptr [rbp+18h], 0
.text:00000000000076B2                 mov     [rsp+0A8h+ptr], 0
.text:00000000000076BB                 mov     [rbp+70h], r9w
.text:00000000000076C0                 or      dword ptr [r15+48h], 2000h
.text:00000000000076C8                 mov     [r12], ebx
.text:00000000000076CC                 jmp     loc_75F5
.text:00000000000076CC ; ---------------------------------------------------------------------------
.text:00000000000076D1                 align 8
.text:00000000000076D8
.text:00000000000076D8 loc_76D8:                               ; CODE XREF: fts_build+1DB↑j
.text:00000000000076D8                 mov     rbp, rax
.text:00000000000076DB
.text:00000000000076DB loc_76DB:                               ; CODE XREF: fts_build+7B5↓j
.text:00000000000076DB                                         ; fts_build+7C8↓j
.text:00000000000076DB                 cmp     [rsp+0A8h+var_4B], 0
.text:00000000000076E0                 jnz     loc_7348
.text:00000000000076E6
.text:00000000000076E6 loc_76E6:                               ; CODE XREF: fts_build+312↑j
.text:00000000000076E6                                         ; fts_build+368↑j
.text:00000000000076E6                 test    byte ptr [r15+48h], 4
.text:00000000000076EB                 jz      short loc_770B
.text:00000000000076ED                 mov     rax, [rsp+0A8h+var_90]
.text:00000000000076F2                 cmp     [r15+30h], rax
.text:00000000000076F6                 jz      short loc_76FD
.text:00000000000076F8                 test    rbx, rbx
.text:00000000000076FB                 jnz     short loc_7703
.text:00000000000076FD
.text:00000000000076FD loc_76FD:                               ; CODE XREF: fts_build+6C6↑j
.text:00000000000076FD                 sub     [rsp+0A8h+dest], 1
.text:0000000000007703
.text:0000000000007703 loc_7703:                               ; CODE XREF: fts_build+6CB↑j
.text:0000000000007703                 mov     rax, [rsp+0A8h+dest]
.text:0000000000007708                 mov     byte ptr [rax], 0
.text:000000000000770B
.text:000000000000770B loc_770B:                               ; CODE XREF: fts_build+6BB↑j
.text:000000000000770B                 cmp     [rsp+0A8h+var_58], 0
.text:0000000000007711                 jnz     short loc_7780
.text:0000000000007713                 cmp     [rsp+0A8h+var_49], 0
.text:0000000000007718                 jz      short loc_7780
.text:000000000000771A                 cmp     [rsp+0A8h+var_50], 1
.text:000000000000771F                 jz      short loc_7760
.text:0000000000007721                 test    rbx, rbx
.text:0000000000007724                 jz      short loc_7760
.text:0000000000007726
.text:0000000000007726 loc_7726:                               ; CODE XREF: fts_build+753↓j
.text:0000000000007726                 cmp     [rsp+0A8h+var_4A], 0
.text:000000000000772B                 jnz     loc_7828
.text:0000000000007731                 cmp     qword ptr [r15+40h], 0
.text:0000000000007736                 jz      loc_75F5
.text:000000000000773C                 cmp     rbx, 1
.text:0000000000007740                 jz      loc_75F5
.text:0000000000007746                 mov     rsi, [rsp+0A8h+ptr]
.text:000000000000774B                 mov     rdx, rbx
.text:000000000000774E                 mov     rdi, r15
.text:0000000000007751                 call    fts_sort
.text:0000000000007756                 mov     [rsp+0A8h+ptr], rax
.text:000000000000775B                 jmp     loc_75F5
.text:0000000000007760 ; ---------------------------------------------------------------------------
.text:0000000000007760
.text:0000000000007760 loc_7760:                               ; CODE XREF: fts_build+6EF↑j
.text:0000000000007760                                         ; fts_build+6F4↑j
.text:0000000000007760                 cmp     qword ptr [rbp+58h], 0
.text:0000000000007765                 jnz     loc_7896
.text:000000000000776B                 mov     rdi, r15
.text:000000000000776E                 call    restore_initial_cwd
.text:0000000000007773                 test    eax, eax
.text:0000000000007775                 setnz   al
.text:0000000000007778
.text:0000000000007778 loc_7778:                               ; CODE XREF: fts_build+883↓j
.text:0000000000007778                 test    al, al
.text:000000000000777A                 jnz     loc_7903
.text:0000000000007780
.text:0000000000007780 loc_7780:                               ; CODE XREF: fts_build+6E1↑j
.text:0000000000007780                                         ; fts_build+6E8↑j
.text:0000000000007780                 test    rbx, rbx
.text:0000000000007783                 jnz     short loc_7726
.text:0000000000007785                 cmp     [rsp+0A8h+var_50], 3
.text:000000000000778A                 jz      loc_7948
.text:0000000000007790
.text:0000000000007790 loc_7790:                               ; CODE XREF: fts_build+920↓j
.text:0000000000007790                                         ; fts_build+92A↓j ...
.text:0000000000007790                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000007795                 call    fts_lfree
.text:000000000000779A                 mov     [rsp+0A8h+ptr], 0
.text:00000000000077A3                 jmp     loc_75F5
.text:00000000000077A3 ; ---------------------------------------------------------------------------
.text:00000000000077A8                 align 10h
.text:00000000000077B0
.text:00000000000077B0 loc_77B0:                               ; CODE XREF: fts_build+1FD↑j
.text:00000000000077B0                 mov     eax, [r12]
.text:00000000000077B4                 mov     rbp, [rsp+0A8h+var_88]
.text:00000000000077B9                 test    eax, eax
.text:00000000000077BB                 jz      short loc_77DE
.text:00000000000077BD                 test    rbx, rbx
.text:00000000000077C0                 mov     [rbp+40h], eax
.text:00000000000077C3                 jnz     loc_78F9
.text:00000000000077C9                 cmp     [rsp+0A8h+var_58], 0
.text:00000000000077CF                 mov     eax, 4
.text:00000000000077D4                 jnz     loc_78F9
.text:00000000000077DA
.text:00000000000077DA loc_77DA:                               ; CODE XREF: fts_build+8CE↓j
.text:00000000000077DA                 mov     [rbp+70h], ax
.text:00000000000077DE
.text:00000000000077DE loc_77DE:                               ; CODE XREF: fts_build+78B↑j
.text:00000000000077DE                 mov     rdi, [rbp+18h]  ; dirp
.text:00000000000077E2                 test    rdi, rdi
.text:00000000000077E5                 jz      loc_76DB
.text:00000000000077EB                 call    _closedir
.text:00000000000077F0                 mov     qword ptr [rbp+18h], 0
.text:00000000000077F8                 jmp     loc_76DB
.text:00000000000077F8 ; ---------------------------------------------------------------------------
.text:00000000000077FD                 align 20h
.text:0000000000007800
.text:0000000000007800 loc_7800:                               ; CODE XREF: fts_build+4B1↑j
.text:0000000000007800                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000007805                 jnz     loc_75EC
.text:000000000000780B
.text:000000000000780B loc_780B:                               ; CODE XREF: fts_build+5B6↑j
.text:000000000000780B                 mov     r10d, 4
.text:0000000000007811                 mov     [rbp+70h], r10w
.text:0000000000007816                 call    ___errno_location
.text:000000000000781B                 mov     eax, [rax]
.text:000000000000781D                 mov     [rbp+40h], eax
.text:0000000000007820                 jmp     loc_75EC
.text:0000000000007820 ; ---------------------------------------------------------------------------
.text:0000000000007825                 align 8
.text:0000000000007828
.text:0000000000007828 loc_7828:                               ; CODE XREF: fts_build+6FB↑j
.text:0000000000007828                 lea     rax, fts_compare_ino
.text:000000000000782F                 mov     rsi, [rsp+0A8h+ptr]
.text:0000000000007834                 mov     rdx, rbx
.text:0000000000007837                 mov     rdi, r15
.text:000000000000783A                 mov     [r15+40h], rax
.text:000000000000783E                 call    fts_sort
.text:0000000000007843                 mov     qword ptr [r15+40h], 0
.text:000000000000784B                 mov     [rsp+0A8h+ptr], rax
.text:0000000000007850                 jmp     loc_75F5
.text:0000000000007850 ; ---------------------------------------------------------------------------
.text:0000000000007855                 align 8
.text:0000000000007858
.text:0000000000007858 loc_7858:                               ; CODE XREF: fts_build+53↑j
.text:0000000000007858                 mov     [rsp+0A8h+var_70], 186A0h
.text:0000000000007861                 mov     [rsp+0A8h+var_49], 1
.text:0000000000007866                 mov     edi, [r15+48h]
.text:000000000000786A                 jmp     loc_709B
.text:000000000000786A ; ---------------------------------------------------------------------------
.text:000000000000786F                 align 10h
.text:0000000000007870
.text:0000000000007870 loc_7870:                               ; CODE XREF: fts_build+4ED↑j
.text:0000000000007870                                         ; fts_build+943↓j
.text:0000000000007870                 mov     [rsp+0A8h+var_49], 0
.text:0000000000007875                 mov     edi, [r15+48h]
.text:0000000000007879                 jmp     loc_709B
.text:0000000000007879 ; ---------------------------------------------------------------------------
.text:000000000000787E                 align 20h
.text:0000000000007880
.text:0000000000007880 loc_7880:                               ; CODE XREF: fts_build+4BC↑j
.text:0000000000007880                 xor     edx, edx
.text:0000000000007882                 mov     rsi, rbp
.text:0000000000007885                 mov     rdi, r15
.text:0000000000007888                 call    fts_stat
.text:000000000000788D                 mov     [rbp+70h], ax
.text:0000000000007891                 jmp     loc_7502
.text:0000000000007896 ; ---------------------------------------------------------------------------
.text:0000000000007896
.text:0000000000007896 loc_7896:                               ; CODE XREF: fts_build+735↑j
.text:0000000000007896                 mov     rsi, [rbp+8]
.text:000000000000789A                 lea     rcx, off_BBC9
.text:00000000000078A1                 mov     edx, 0FFFFFFFFh
.text:00000000000078A6                 mov     rdi, r15
.text:00000000000078A9                 call    fts_safe_changedir
.text:00000000000078AE                 test    eax, eax
.text:00000000000078B0                 setnz   al
.text:00000000000078B3                 jmp     loc_7778
.text:00000000000078B8 ; ---------------------------------------------------------------------------
.text:00000000000078B8
.text:00000000000078B8 loc_78B8:                               ; CODE XREF: fts_build+522↑j
.text:00000000000078B8                 xor     ecx, ecx
.text:00000000000078BA                 mov     edx, eax
.text:00000000000078BC                 mov     rsi, rbp
.text:00000000000078BF                 mov     rdi, r15
.text:00000000000078C2                 call    fts_safe_changedir
.text:00000000000078C7                 test    eax, eax
.text:00000000000078C9                 jnz     loc_7558
.text:00000000000078CF                 jmp     loc_7092
.text:00000000000078D4 ; ---------------------------------------------------------------------------
.text:00000000000078D4
.text:00000000000078D4 loc_78D4:                               ; CODE XREF: fts_build+501↑j
.text:00000000000078D4                 cmp     qword ptr [rbp+88h], 2
.text:00000000000078DC                 jnz     loc_7537
.text:00000000000078E2                 mov     esi, eax
.text:00000000000078E4                 mov     rdi, rbp
.text:00000000000078E7                 call    leaf_optimization
.text:00000000000078EC                 test    eax, eax
.text:00000000000078EE                 jnz     short loc_796E
.text:00000000000078F0                 mov     eax, [rsp+0A8h+fd]
.text:00000000000078F4                 jmp     loc_7537
.text:00000000000078F9 ; ---------------------------------------------------------------------------
.text:00000000000078F9
.text:00000000000078F9 loc_78F9:                               ; CODE XREF: fts_build+793↑j
.text:00000000000078F9                                         ; fts_build+7A4↑j
.text:00000000000078F9                 mov     eax, 7
.text:00000000000078FE                 jmp     loc_77DA
.text:0000000000007903 ; ---------------------------------------------------------------------------
.text:0000000000007903
.text:0000000000007903 loc_7903:                               ; CODE XREF: fts_build+74A↑j
.text:0000000000007903                 mov     edi, 7
.text:0000000000007908                 mov     [rbp+70h], di
.text:000000000000790C                 or      dword ptr [r15+48h], 2000h
.text:0000000000007914                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000007919                 call    fts_lfree
.text:000000000000791E                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007927                 jmp     loc_75F5
.text:000000000000792C ; ---------------------------------------------------------------------------
.text:000000000000792C
.text:000000000000792C loc_792C:                               ; CODE XREF: fts_build+51A↑j
.text:000000000000792C                 mov     edi, eax        ; fd
.text:000000000000792E                 mov     edx, 3
.text:0000000000007933                 mov     esi, 406h
.text:0000000000007938                 xor     eax, eax
.text:000000000000793A                 call    rpl_fcntl
.text:000000000000793F                 mov     [rsp+0A8h+fd], eax
.text:0000000000007943                 jmp     loc_7550
.text:0000000000007948 ; ---------------------------------------------------------------------------
.text:0000000000007948
.text:0000000000007948 loc_7948:                               ; CODE XREF: fts_build+75A↑j
.text:0000000000007948                 movzx   eax, word ptr [rbp+70h]
.text:000000000000794C                 cmp     ax, 7
.text:0000000000007950                 jz      loc_7790
.text:0000000000007956                 cmp     ax, 4
.text:000000000000795A                 jz      loc_7790
.text:0000000000007960                 mov     esi, 6
.text:0000000000007965                 mov     [rbp+70h], si
.text:0000000000007969                 jmp     loc_7790
.text:000000000000796E ; ---------------------------------------------------------------------------
.text:000000000000796E
.text:000000000000796E loc_796E:                               ; CODE XREF: fts_build+8BE↑j
.text:000000000000796E                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000007973                 jnz     loc_7870
.text:0000000000007979                 mov     eax, [rsp+0A8h+fd]
.text:000000000000797D                 xor     r12d, r12d
.text:0000000000007980                 mov     ebx, 1
.text:0000000000007985                 jmp     loc_7545
.text:0000000000007985 ; ---------------------------------------------------------------------------
.text:000000000000798A                 align 10h
.text:0000000000007990
.text:0000000000007990 loc_7990:                               ; CODE XREF: fts_build+100↑j
.text:0000000000007990                 mov     rdi, r13        ; ptr
.text:0000000000007993                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000007998                 call    free
.text:000000000000799D                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:00000000000079A2                 call    fts_lfree
.text:00000000000079A7                 mov     rdi, [rbp+18h]  ; dirp
.text:00000000000079AB                 call    _closedir
.text:00000000000079B0                 mov     r8d, 7
.text:00000000000079B6                 mov     qword ptr [rbp+18h], 0
.text:00000000000079BE                 mov     [rsp+0A8h+ptr], 0
.text:00000000000079C7                 mov     [rbp+70h], r8w
.text:00000000000079CC                 or      dword ptr [r15+48h], 2000h
.text:00000000000079D4                 mov     dword ptr [r12], 24h ; '$'
.text:00000000000079DC                 jmp     loc_75F5
.text:00000000000079E1 ; ---------------------------------------------------------------------------
.text:00000000000079E1
.text:00000000000079E1 loc_79E1:                               ; CODE XREF: fts_build+5D8↑j
.text:00000000000079E1                 call    ___stack_chk_fail
.text:00000000000079E6 ; ---------------------------------------------------------------------------
.text:00000000000079E6
.text:00000000000079E6 loc_79E6:                               ; CODE XREF: fts_build+429↑j
.text:00000000000079E6                 lea     rax, CSWTCH_53
.text:00000000000079ED                 mov     eax, [rax+rdx*4]
.text:00000000000079F0                 mov     [r13+90h], eax
.text:00000000000079F7                 mov     eax, 1
.text:00000000000079FC                 jmp     loc_71BA
.text:00000000000079FC ; } // starts at 7030
.text:00000000000079FC fts_build       endp
.text:00000000000079FC
.text:00000000000079FC ; ---------------------------------------------------------------------------
.text:0000000000007A01                 align 10h
.text:0000000000007A10
.text:0000000000007A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000007A10
.text:0000000000007A10
.text:0000000000007A10                 public rpl_fts_open
.text:0000000000007A10 rpl_fts_open    proc near               ; CODE XREF: xfts_open+A↑p
.text:0000000000007A10
.text:0000000000007A10 var_50          = qword ptr -50h
.text:0000000000007A10 var_42          = byte ptr -42h
.text:0000000000007A10 var_41          = byte ptr -41h
.text:0000000000007A10 var_40          = qword ptr -40h
.text:0000000000007A10
.text:0000000000007A10 ; __unwind {
.text:0000000000007A10                 push    r15
.text:0000000000007A12                 push    r14
.text:0000000000007A14                 push    r13
.text:0000000000007A16                 push    r12
.text:0000000000007A18                 push    rbp
.text:0000000000007A19                 push    rbx
.text:0000000000007A1A                 sub     rsp, 28h
.text:0000000000007A1E                 test    esi, 0FFFFF000h
.text:0000000000007A24                 jnz     loc_7DA8
.text:0000000000007A2A                 mov     eax, esi
.text:0000000000007A2C                 mov     ebp, esi
.text:0000000000007A2E                 and     eax, 204h
.text:0000000000007A33                 cmp     eax, 204h
.text:0000000000007A38                 jz      loc_7DA8
.text:0000000000007A3E                 test    sil, 12h
.text:0000000000007A42                 jz      loc_7DA8
.text:0000000000007A48                 mov     r13, rdi
.text:0000000000007A4B                 mov     esi, 1          ; size
.text:0000000000007A50                 mov     edi, 80h        ; nmemb
.text:0000000000007A55                 mov     r14, rdx
.text:0000000000007A58                 call    _calloc
.text:0000000000007A5D                 test    rax, rax
.text:0000000000007A60                 mov     rbx, rax
.text:0000000000007A63                 jz      loc_7CBE
.text:0000000000007A69                 test    bpl, 2
.text:0000000000007A6D                 mov     [rax+40h], r14
.text:0000000000007A71                 jnz     loc_7CD0
.text:0000000000007A77                 mov     rdi, [r13+0]    ; s
.text:0000000000007A7B                 mov     [rax+48h], ebp
.text:0000000000007A7E                 mov     dword ptr [rbx+2Ch], 0FFFFFF9Ch
.text:0000000000007A85                 test    rdi, rdi
.text:0000000000007A88                 jz      loc_7CEF
.text:0000000000007A8E
.text:0000000000007A8E loc_7A8E:                               ; CODE XREF: rpl_fts_open+2D9↓j
.text:0000000000007A8E                 mov     r15, r13
.text:0000000000007A91                 xor     r12d, r12d
.text:0000000000007A94                 nop     dword ptr [rax+00h]
.text:0000000000007A98
.text:0000000000007A98 loc_7A98:                               ; CODE XREF: rpl_fts_open+9E↓j
.text:0000000000007A98                 call    _strlen
.text:0000000000007A9D                 cmp     r12, rax
.text:0000000000007AA0                 cmovb   r12, rax
.text:0000000000007AA4                 add     r15, 8
.text:0000000000007AA8                 mov     rdi, [r15]
.text:0000000000007AAB                 test    rdi, rdi
.text:0000000000007AAE                 jnz     short loc_7A98
.text:0000000000007AB0                 lea     rdx, [r12+1]
.text:0000000000007AB5                 mov     eax, 1000h
.text:0000000000007ABA                 cmp     rdx, 1000h
.text:0000000000007AC1                 cmovb   rdx, rax
.text:0000000000007AC5
.text:0000000000007AC5 loc_7AC5:                               ; CODE XREF: rpl_fts_open+2E4↓j
.text:0000000000007AC5                 lea     rsi, [rbx+30h]
.text:0000000000007AC9                 lea     rdi, [rbx+20h]
.text:0000000000007ACD                 call    fts_palloc_isra_2
.text:0000000000007AD2                 test    al, al
.text:0000000000007AD4                 mov     [rsp+58h+var_42], al
.text:0000000000007AD8                 jz      loc_7D79
.text:0000000000007ADE                 mov     rsi, [r13+0]
.text:0000000000007AE2                 test    rsi, rsi
.text:0000000000007AE5                 jz      loc_7D90
.text:0000000000007AEB                 lea     rsi, aWrittenBySSAnd+1Bh ; ""
.text:0000000000007AF2                 xor     edx, edx
.text:0000000000007AF4                 mov     rdi, rbx
.text:0000000000007AF7                 call    fts_alloc
.text:0000000000007AFC                 test    rax, rax
.text:0000000000007AFF                 mov     r15, rax
.text:0000000000007B02                 jz      loc_7D70
.text:0000000000007B08                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007B0F                 test    r14, r14
.text:0000000000007B12                 mov     rsi, [r13+0]
.text:0000000000007B16                 mov     [r15+58h], rax
.text:0000000000007B1A                 mov     [r15+68h], rax
.text:0000000000007B1E                 jz      short loc_7B2D
.text:0000000000007B20
.text:0000000000007B20 loc_7B20:                               ; CODE XREF: rpl_fts_open+386↓j
.text:0000000000007B20                 mov     eax, [rbx+48h]
.text:0000000000007B23                 shr     eax, 0Ah
.text:0000000000007B26                 and     eax, 1
.text:0000000000007B29                 mov     [rsp+58h+var_42], al
.text:0000000000007B2D
.text:0000000000007B2D loc_7B2D:                               ; CODE XREF: rpl_fts_open+10E↑j
.text:0000000000007B2D                 test    rsi, rsi
.text:0000000000007B30                 jz      loc_7D9C
.text:0000000000007B36                 shr     ebp, 0Bh
.text:0000000000007B39                 mov     [rsp+58h+var_40], 0
.text:0000000000007B42                 xor     r12d, r12d
.text:0000000000007B45                 xor     ebp, 1
.text:0000000000007B48                 mov     eax, ebp
.text:0000000000007B4A                 xor     ebp, ebp
.text:0000000000007B4C                 and     eax, 1
.text:0000000000007B4F                 mov     [rsp+58h+var_41], al
.text:0000000000007B53                 jmp     short loc_7BCC
.text:0000000000007B53 ; ---------------------------------------------------------------------------
.text:0000000000007B55                 align 8
.text:0000000000007B58
.text:0000000000007B58 loc_7B58:                               ; CODE XREF: rpl_fts_open+1D2↓j
.text:0000000000007B58                                         ; rpl_fts_open+1DD↓j ...
.text:0000000000007B58                 mov     rdx, rax
.text:0000000000007B5B                 mov     rdi, rbx
.text:0000000000007B5E                 call    fts_alloc
.text:0000000000007B63                 test    rax, rax
.text:0000000000007B66                 mov     rcx, rax
.text:0000000000007B69                 jz      loc_7D60
.text:0000000000007B6F                 mov     qword ptr [rax+58h], 0
.text:0000000000007B77                 mov     [rax+8], r15
.text:0000000000007B7B                 lea     rax, [rax+108h]
.text:0000000000007B82                 test    r12, r12
.text:0000000000007B85                 mov     [rcx+30h], rax
.text:0000000000007B89                 jz      loc_7D00
.text:0000000000007B8F                 cmp     [rsp+58h+var_42], 0
.text:0000000000007B94                 jz      loc_7D00
.text:0000000000007B9A                 mov     esi, 0Bh
.text:0000000000007B9F                 test    r14, r14
.text:0000000000007BA2                 mov     qword ptr [rcx+0A8h], 2
.text:0000000000007BAD                 mov     [rcx+70h], si
.text:0000000000007BB1                 jz      loc_7D40
.text:0000000000007BB7
.text:0000000000007BB7 loc_7BB7:                               ; CODE XREF: rpl_fts_open+30E↓j
.text:0000000000007BB7                 mov     [rcx+10h], r12
.text:0000000000007BBB                 mov     r12, rcx
.text:0000000000007BBE
.text:0000000000007BBE loc_7BBE:                               ; CODE XREF: rpl_fts_open+329↓j
.text:0000000000007BBE                                         ; rpl_fts_open+346↓j
.text:0000000000007BBE                 add     rbp, 1
.text:0000000000007BC2                 mov     rsi, [r13+rbp*8+0]
.text:0000000000007BC7                 test    rsi, rsi
.text:0000000000007BCA                 jz      short loc_7C20
.text:0000000000007BCC
.text:0000000000007BCC loc_7BCC:                               ; CODE XREF: rpl_fts_open+143↑j
.text:0000000000007BCC                 mov     rdi, rsi        ; s
.text:0000000000007BCF                 mov     [rsp+58h+var_50], rsi
.text:0000000000007BD4                 call    _strlen
.text:0000000000007BD9                 cmp     rax, 2
.text:0000000000007BDD                 mov     rsi, [rsp+58h+var_50]
.text:0000000000007BE2                 jbe     loc_7B58
.text:0000000000007BE8                 cmp     [rsp+58h+var_41], 0
.text:0000000000007BED                 jz      loc_7B58
.text:0000000000007BF3                 cmp     byte ptr [rsi+rax-1], 2Fh ; '/'
.text:0000000000007BF8                 jnz     loc_7B58
.text:0000000000007BFE                 xchg    ax, ax
.text:0000000000007C00
.text:0000000000007C00 loc_7C00:                               ; CODE XREF: rpl_fts_open+203↓j
.text:0000000000007C00                 cmp     byte ptr [rsi+rax-2], 2Fh ; '/'
.text:0000000000007C05                 jnz     loc_7B58
.text:0000000000007C0B                 sub     rax, 1
.text:0000000000007C0F                 cmp     rax, 1
.text:0000000000007C13                 jnz     short loc_7C00
.text:0000000000007C15                 jmp     loc_7B58
.text:0000000000007C15 ; ---------------------------------------------------------------------------
.text:0000000000007C1A                 align 20h
.text:0000000000007C20
.text:0000000000007C20 loc_7C20:                               ; CODE XREF: rpl_fts_open+1BA↑j
.text:0000000000007C20                 test    r14, r14
.text:0000000000007C23                 jz      short loc_7C3C
.text:0000000000007C25                 cmp     rbp, 1
.text:0000000000007C29                 jbe     short loc_7C3C
.text:0000000000007C2B                 mov     rsi, r12
.text:0000000000007C2E                 mov     rdx, rbp
.text:0000000000007C31                 mov     rdi, rbx
.text:0000000000007C34                 call    fts_sort
.text:0000000000007C39                 mov     r12, rax
.text:0000000000007C3C
.text:0000000000007C3C loc_7C3C:                               ; CODE XREF: rpl_fts_open+213↑j
.text:0000000000007C3C                                         ; rpl_fts_open+219↑j ...
.text:0000000000007C3C                 lea     rsi, aWrittenBySSAnd+1Bh ; ""
.text:0000000000007C43                 xor     edx, edx
.text:0000000000007C45                 mov     rdi, rbx
.text:0000000000007C48                 call    fts_alloc
.text:0000000000007C4D                 test    rax, rax
.text:0000000000007C50                 mov     [rbx], rax
.text:0000000000007C53                 jz      loc_7D60
.text:0000000000007C59                 mov     edi, [rbx+48h]
.text:0000000000007C5C                 mov     edx, 9
.text:0000000000007C61                 lea     rsi, [rbx+58h]
.text:0000000000007C65                 mov     [rax+10h], r12
.text:0000000000007C69                 mov     [rax+70h], dx
.text:0000000000007C6D                 mov     qword ptr [rax+58h], 1
.text:0000000000007C75                 call    setup_dir_isra_4
.text:0000000000007C7A                 test    al, al
.text:0000000000007C7C                 jz      loc_7D60
.text:0000000000007C82                 mov     esi, [rbx+48h]
.text:0000000000007C85                 test    esi, 204h
.text:0000000000007C8B                 jnz     short loc_7CB0
.text:0000000000007C8D                 mov     edi, [rbx+2Ch]
.text:0000000000007C90                 lea     rdx, off_BBC9+1
.text:0000000000007C97                 call    diropen_isra_6
.text:0000000000007C9C                 test    eax, eax
.text:0000000000007C9E                 mov     [rbx+28h], eax
.text:0000000000007CA1                 jns     short loc_7CB0
.text:0000000000007CA3                 or      dword ptr [rbx+48h], 4
.text:0000000000007CA7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007CB0
.text:0000000000007CB0 loc_7CB0:                               ; CODE XREF: rpl_fts_open+27B↑j
.text:0000000000007CB0                                         ; rpl_fts_open+291↑j
.text:0000000000007CB0                 lea     rdi, [rbx+60h]
.text:0000000000007CB4                 mov     esi, 0FFFFFFFFh
.text:0000000000007CB9                 call    i_ring_init
.text:0000000000007CBE
.text:0000000000007CBE loc_7CBE:                               ; CODE XREF: rpl_fts_open+53↑j
.text:0000000000007CBE                                         ; rpl_fts_open+373↓j ...
.text:0000000000007CBE                 add     rsp, 28h
.text:0000000000007CC2                 mov     rax, rbx
.text:0000000000007CC5                 pop     rbx
.text:0000000000007CC6                 pop     rbp
.text:0000000000007CC7                 pop     r12
.text:0000000000007CC9                 pop     r13
.text:0000000000007CCB                 pop     r14
.text:0000000000007CCD                 pop     r15
.text:0000000000007CCF                 retn
.text:0000000000007CD0 ; ---------------------------------------------------------------------------
.text:0000000000007CD0
.text:0000000000007CD0 loc_7CD0:                               ; CODE XREF: rpl_fts_open+61↑j
.text:0000000000007CD0                 mov     rdi, [r13+0]
.text:0000000000007CD4                 mov     eax, ebp
.text:0000000000007CD6                 mov     dword ptr [rbx+2Ch], 0FFFFFF9Ch
.text:0000000000007CDD                 and     ah, 0FDh
.text:0000000000007CE0                 or      eax, 4
.text:0000000000007CE3                 test    rdi, rdi
.text:0000000000007CE6                 mov     [rbx+48h], eax
.text:0000000000007CE9                 jnz     loc_7A8E
.text:0000000000007CEF
.text:0000000000007CEF loc_7CEF:                               ; CODE XREF: rpl_fts_open+78↑j
.text:0000000000007CEF                 mov     edx, 1000h
.text:0000000000007CF4                 jmp     loc_7AC5
.text:0000000000007CF4 ; ---------------------------------------------------------------------------
.text:0000000000007CF9                 align 20h
.text:0000000000007D00
.text:0000000000007D00 loc_7D00:                               ; CODE XREF: rpl_fts_open+179↑j
.text:0000000000007D00                                         ; rpl_fts_open+184↑j
.text:0000000000007D00                 xor     edx, edx
.text:0000000000007D02                 mov     rsi, rcx
.text:0000000000007D05                 mov     rdi, rbx
.text:0000000000007D08                 mov     [rsp+58h+var_50], rcx
.text:0000000000007D0D                 call    fts_stat
.text:0000000000007D12                 mov     rcx, [rsp+58h+var_50]
.text:0000000000007D17                 test    r14, r14
.text:0000000000007D1A                 mov     [rcx+70h], ax
.text:0000000000007D1E                 jnz     loc_7BB7
.text:0000000000007D24                 test    r12, r12
.text:0000000000007D27                 mov     qword ptr [rcx+10h], 0
.text:0000000000007D2F                 jnz     short loc_7D48
.text:0000000000007D31                 mov     [rsp+58h+var_40], rcx
.text:0000000000007D36                 mov     r12, rcx
.text:0000000000007D39                 jmp     loc_7BBE
.text:0000000000007D39 ; ---------------------------------------------------------------------------
.text:0000000000007D3E                 align 20h
.text:0000000000007D40
.text:0000000000007D40 loc_7D40:                               ; CODE XREF: rpl_fts_open+1A1↑j
.text:0000000000007D40                 mov     qword ptr [rcx+10h], 0
.text:0000000000007D48
.text:0000000000007D48 loc_7D48:                               ; CODE XREF: rpl_fts_open+31F↑j
.text:0000000000007D48                 mov     rax, [rsp+58h+var_40]
.text:0000000000007D4D                 mov     [rsp+58h+var_40], rcx
.text:0000000000007D52                 mov     [rax+10h], rcx
.text:0000000000007D56                 jmp     loc_7BBE
.text:0000000000007D56 ; ---------------------------------------------------------------------------
.text:0000000000007D5B                 align 20h
.text:0000000000007D60
.text:0000000000007D60 loc_7D60:                               ; CODE XREF: rpl_fts_open+159↑j
.text:0000000000007D60                                         ; rpl_fts_open+243↑j ...
.text:0000000000007D60                 mov     rdi, r12        ; ptr
.text:0000000000007D63                 call    fts_lfree
.text:0000000000007D68                 mov     rdi, r15        ; ptr
.text:0000000000007D6B                 call    free
.text:0000000000007D70
.text:0000000000007D70 loc_7D70:                               ; CODE XREF: rpl_fts_open+F2↑j
.text:0000000000007D70                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000007D74                 call    free
.text:0000000000007D79
.text:0000000000007D79 loc_7D79:                               ; CODE XREF: rpl_fts_open+C8↑j
.text:0000000000007D79                 mov     rdi, rbx        ; ptr
.text:0000000000007D7C                 xor     ebx, ebx
.text:0000000000007D7E                 call    free
.text:0000000000007D83                 jmp     loc_7CBE
.text:0000000000007D83 ; ---------------------------------------------------------------------------
.text:0000000000007D88                 align 10h
.text:0000000000007D90
.text:0000000000007D90 loc_7D90:                               ; CODE XREF: rpl_fts_open+D5↑j
.text:0000000000007D90                 xor     r15d, r15d
.text:0000000000007D93                 test    r14, r14
.text:0000000000007D96                 jnz     loc_7B20
.text:0000000000007D9C
.text:0000000000007D9C loc_7D9C:                               ; CODE XREF: rpl_fts_open+120↑j
.text:0000000000007D9C                 xor     r12d, r12d
.text:0000000000007D9F                 jmp     loc_7C3C
.text:0000000000007D9F ; ---------------------------------------------------------------------------
.text:0000000000007DA4                 align 8
.text:0000000000007DA8
.text:0000000000007DA8 loc_7DA8:                               ; CODE XREF: rpl_fts_open+14↑j
.text:0000000000007DA8                                         ; rpl_fts_open+28↑j ...
.text:0000000000007DA8                 call    ___errno_location
.text:0000000000007DAD                 xor     ebx, ebx
.text:0000000000007DAF                 mov     dword ptr [rax], 16h
.text:0000000000007DB5                 jmp     loc_7CBE
.text:0000000000007DB5 ; } // starts at 7A10
.text:0000000000007DB5 rpl_fts_open    endp
.text:0000000000007DB5
.text:0000000000007DB5 ; ---------------------------------------------------------------------------
.text:0000000000007DBA                 align 20h
.text:0000000000007DC0
.text:0000000000007DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007DC0
.text:0000000000007DC0
.text:0000000000007DC0 ; __int64 __fastcall rpl_fts_close(void *ptr)
.text:0000000000007DC0                 public rpl_fts_close
.text:0000000000007DC0 rpl_fts_close   proc near               ; CODE XREF: chown_files+9C↑p
.text:0000000000007DC0 ; __unwind {
.text:0000000000007DC0                 push    r12
.text:0000000000007DC2                 push    rbp
.text:0000000000007DC3                 mov     rbp, rdi
.text:0000000000007DC6                 push    rbx
.text:0000000000007DC7                 mov     rdi, [rdi]
.text:0000000000007DCA                 test    rdi, rdi
.text:0000000000007DCD                 jz      short loc_7E13
.text:0000000000007DCF                 cmp     qword ptr [rdi+58h], 0
.text:0000000000007DD4                 jns     short loc_7DEF
.text:0000000000007DD6                 jmp     loc_7EF0
.text:0000000000007DD6 ; ---------------------------------------------------------------------------
.text:0000000000007DDB                 align 20h
.text:0000000000007DE0
.text:0000000000007DE0 loc_7DE0:                               ; CODE XREF: rpl_fts_close+36↓j
.text:0000000000007DE0                 call    free
.text:0000000000007DE5                 cmp     qword ptr [rbx+58h], 0
.text:0000000000007DEA                 mov     rdi, rbx        ; ptr
.text:0000000000007DED                 js      short loc_7E0B
.text:0000000000007DEF
.text:0000000000007DEF loc_7DEF:                               ; CODE XREF: rpl_fts_close+14↑j
.text:0000000000007DEF                                         ; rpl_fts_close+49↓j
.text:0000000000007DEF                 mov     rbx, [rdi+10h]
.text:0000000000007DF3                 test    rbx, rbx
.text:0000000000007DF6                 jnz     short loc_7DE0
.text:0000000000007DF8                 mov     rbx, [rdi+8]
.text:0000000000007DFC                 call    free
.text:0000000000007E01                 cmp     qword ptr [rbx+58h], 0
.text:0000000000007E06                 mov     rdi, rbx
.text:0000000000007E09                 jns     short loc_7DEF
.text:0000000000007E0B
.text:0000000000007E0B loc_7E0B:                               ; CODE XREF: rpl_fts_close+2D↑j
.text:0000000000007E0B                 mov     rdi, rbx        ; ptr
.text:0000000000007E0E                 call    free
.text:0000000000007E13
.text:0000000000007E13 loc_7E13:                               ; CODE XREF: rpl_fts_close+D↑j
.text:0000000000007E13                                         ; rpl_fts_close+13B↓j
.text:0000000000007E13                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000007E17                 test    rdi, rdi
.text:0000000000007E1A                 jz      short loc_7E21
.text:0000000000007E1C                 call    fts_lfree
.text:0000000000007E21
.text:0000000000007E21 loc_7E21:                               ; CODE XREF: rpl_fts_close+5A↑j
.text:0000000000007E21                 mov     rdi, [rbp+10h]  ; ptr
.text:0000000000007E25                 call    free
.text:0000000000007E2A                 mov     rdi, [rbp+20h]  ; ptr
.text:0000000000007E2E                 call    free
.text:0000000000007E33                 mov     eax, [rbp+48h]
.text:0000000000007E36                 test    ah, 2
.text:0000000000007E39                 jz      short loc_7EA0
.text:0000000000007E3B                 mov     edi, [rbp+2Ch]  ; fd
.text:0000000000007E3E                 test    edi, edi
.text:0000000000007E40                 jns     loc_7ED0
.text:0000000000007E46
.text:0000000000007E46 loc_7E46:                               ; CODE XREF: rpl_fts_close+E2↓j
.text:0000000000007E46                                         ; rpl_fts_close+FA↓j ...
.text:0000000000007E46                 xor     ebx, ebx
.text:0000000000007E48
.text:0000000000007E48 loc_7E48:                               ; CODE XREF: rpl_fts_close+124↓j
.text:0000000000007E48                                         ; rpl_fts_close+154↓j ...
.text:0000000000007E48                 lea     rdi, [rbp+60h]
.text:0000000000007E4C                 call    fd_ring_clear
.text:0000000000007E51                 mov     rdi, [rbp+50h]  ; ptr
.text:0000000000007E55                 test    rdi, rdi
.text:0000000000007E58                 jz      short loc_7E5F
.text:0000000000007E5A                 call    hash_free
.text:0000000000007E5F
.text:0000000000007E5F loc_7E5F:                               ; CODE XREF: rpl_fts_close+98↑j
.text:0000000000007E5F                 test    dword ptr [rbp+48h], 102h
.text:0000000000007E66                 mov     rdi, [rbp+58h]  ; ptr
.text:0000000000007E6A                 jz      short loc_7E90
.text:0000000000007E6C                 test    rdi, rdi
.text:0000000000007E6F                 jz      short loc_7E76
.text:0000000000007E71                 call    hash_free
.text:0000000000007E76
.text:0000000000007E76 loc_7E76:                               ; CODE XREF: rpl_fts_close+AF↑j
.text:0000000000007E76                                         ; rpl_fts_close+D5↓j
.text:0000000000007E76                 mov     rdi, rbp        ; ptr
.text:0000000000007E79                 call    free
.text:0000000000007E7E                 test    ebx, ebx
.text:0000000000007E80                 jnz     loc_7F31
.text:0000000000007E86
.text:0000000000007E86 loc_7E86:                               ; CODE XREF: rpl_fts_close+17D↓j
.text:0000000000007E86                 mov     eax, ebx
.text:0000000000007E88                 pop     rbx
.text:0000000000007E89                 pop     rbp
.text:0000000000007E8A                 pop     r12
.text:0000000000007E8C                 retn
.text:0000000000007E8C ; ---------------------------------------------------------------------------
.text:0000000000007E8D                 align 10h
.text:0000000000007E90
.text:0000000000007E90 loc_7E90:                               ; CODE XREF: rpl_fts_close+AA↑j
.text:0000000000007E90                 call    free
.text:0000000000007E95                 jmp     short loc_7E76
.text:0000000000007E95 ; ---------------------------------------------------------------------------
.text:0000000000007E97                 align 20h
.text:0000000000007EA0
.text:0000000000007EA0 loc_7EA0:                               ; CODE XREF: rpl_fts_close+79↑j
.text:0000000000007EA0                 test    al, 4
.text:0000000000007EA2                 jnz     short loc_7E46
.text:0000000000007EA4                 mov     edi, [rbp+28h]  ; fd
.text:0000000000007EA7                 call    _fchdir
.text:0000000000007EAC                 test    eax, eax
.text:0000000000007EAE                 jnz     short loc_7F00
.text:0000000000007EB0                 mov     edi, [rbp+28h]  ; fd
.text:0000000000007EB3                 call    _close
.text:0000000000007EB8                 test    eax, eax
.text:0000000000007EBA                 jz      short loc_7E46
.text:0000000000007EBC                 call    ___errno_location
.text:0000000000007EC1                 mov     r12, rax
.text:0000000000007EC4                 jmp     short loc_7F28
.text:0000000000007EC4 ; ---------------------------------------------------------------------------
.text:0000000000007EC6                 align 10h
.text:0000000000007ED0
.text:0000000000007ED0 loc_7ED0:                               ; CODE XREF: rpl_fts_close+80↑j
.text:0000000000007ED0                 call    _close
.text:0000000000007ED5                 test    eax, eax
.text:0000000000007ED7                 jz      loc_7E46
.text:0000000000007EDD                 call    ___errno_location
.text:0000000000007EE2                 mov     ebx, [rax]
.text:0000000000007EE4                 jmp     loc_7E48
.text:0000000000007EE4 ; ---------------------------------------------------------------------------
.text:0000000000007EE9                 align 10h
.text:0000000000007EF0
.text:0000000000007EF0 loc_7EF0:                               ; CODE XREF: rpl_fts_close+16↑j
.text:0000000000007EF0                 mov     rbx, rdi
.text:0000000000007EF3                 mov     rdi, rbx        ; ptr
.text:0000000000007EF6                 call    free
.text:0000000000007EFB                 jmp     loc_7E13
.text:0000000000007F00 ; ---------------------------------------------------------------------------
.text:0000000000007F00
.text:0000000000007F00 loc_7F00:                               ; CODE XREF: rpl_fts_close+EE↑j
.text:0000000000007F00                 call    ___errno_location
.text:0000000000007F05                 mov     edi, [rbp+28h]  ; fd
.text:0000000000007F08                 mov     r12, rax
.text:0000000000007F0B                 mov     ebx, [rax]
.text:0000000000007F0D                 call    _close
.text:0000000000007F12                 test    eax, eax
.text:0000000000007F14                 jz      loc_7E48
.text:0000000000007F1A                 test    ebx, ebx
.text:0000000000007F1C                 jnz     loc_7E48
.text:0000000000007F22                 nop     word ptr [rax+rax+00h]
.text:0000000000007F28
.text:0000000000007F28 loc_7F28:                               ; CODE XREF: rpl_fts_close+104↑j
.text:0000000000007F28                 mov     ebx, [r12]
.text:0000000000007F2C                 jmp     loc_7E48
.text:0000000000007F31 ; ---------------------------------------------------------------------------
.text:0000000000007F31
.text:0000000000007F31 loc_7F31:                               ; CODE XREF: rpl_fts_close+C0↑j
.text:0000000000007F31                 call    ___errno_location
.text:0000000000007F36                 mov     [rax], ebx
.text:0000000000007F38                 mov     ebx, 0FFFFFFFFh
.text:0000000000007F3D                 jmp     loc_7E86
.text:0000000000007F3D ; } // starts at 7DC0
.text:0000000000007F3D rpl_fts_close   endp
.text:0000000000007F3D
.text:0000000000007F3D ; ---------------------------------------------------------------------------
.text:0000000000007F42                 align 10h
.text:0000000000007F50
.text:0000000000007F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F50
.text:0000000000007F50
.text:0000000000007F50                 public rpl_fts_read
.text:0000000000007F50 rpl_fts_read    proc near               ; CODE XREF: change_file_owner+3F5↑p
.text:0000000000007F50                                         ; chown_files+75↑p
.text:0000000000007F50 ; __unwind {
.text:0000000000007F50                 push    r14
.text:0000000000007F52                 push    r13
.text:0000000000007F54                 push    r12
.text:0000000000007F56                 push    rbp
.text:0000000000007F57                 push    rbx
.text:0000000000007F58                 mov     rbp, [rdi]
.text:0000000000007F5B                 test    rbp, rbp
.text:0000000000007F5E                 jz      loc_806E
.text:0000000000007F64                 mov     edx, [rdi+48h]
.text:0000000000007F67                 test    dh, 20h
.text:0000000000007F6A                 jnz     loc_806E
.text:0000000000007F70                 movzx   eax, word ptr [rbp+74h]
.text:0000000000007F74                 mov     ebx, 3
.text:0000000000007F79                 mov     r12, rdi
.text:0000000000007F7C                 mov     [rbp+74h], bx
.text:0000000000007F80                 cmp     ax, 1
.text:0000000000007F84                 jz      loc_81D0
.text:0000000000007F8A                 cmp     ax, 2
.text:0000000000007F8E                 movzx   ecx, word ptr [rbp+70h]
.text:0000000000007F92                 jz      loc_8080
.text:0000000000007F98                 cmp     cx, 1
.text:0000000000007F9C                 jnz     short loc_7FD0
.text:0000000000007F9E                 jmp     loc_81C0
.text:0000000000007F9E ; ---------------------------------------------------------------------------
.text:0000000000007FA3                 align 8
.text:0000000000007FA8
.text:0000000000007FA8 loc_7FA8:                               ; CODE XREF: rpl_fts_read+87↓j
.text:0000000000007FA8                 mov     [r12], rbx
.text:0000000000007FAC                 mov     rdi, rbp        ; ptr
.text:0000000000007FAF                 call    free
.text:0000000000007FB4                 cmp     qword ptr [rbx+58h], 0
.text:0000000000007FB9                 jz      loc_81F0
.text:0000000000007FBF                 movzx   eax, word ptr [rbx+74h]
.text:0000000000007FC3                 mov     rbp, rbx
.text:0000000000007FC6                 cmp     ax, 4
.text:0000000000007FCA                 jnz     loc_82F8
.text:0000000000007FD0
.text:0000000000007FD0 loc_7FD0:                               ; CODE XREF: rpl_fts_read+4C↑j
.text:0000000000007FD0                                         ; rpl_fts_read+13D↓j
.text:0000000000007FD0                 mov     rbx, [rbp+10h]
.text:0000000000007FD4                 test    rbx, rbx
.text:0000000000007FD7                 jnz     short loc_7FA8
.text:0000000000007FD9                 mov     rbx, [rbp+8]
.text:0000000000007FDD                 cmp     qword ptr [rbx+18h], 0
.text:0000000000007FE2                 jnz     loc_8550
.text:0000000000007FE8
.text:0000000000007FE8 loc_7FE8:                               ; CODE XREF: rpl_fts_read+688↓j
.text:0000000000007FE8                 mov     [r12], rbx
.text:0000000000007FEC                 mov     rdi, rbp        ; ptr
.text:0000000000007FEF                 call    free
.text:0000000000007FF4                 cmp     qword ptr [rbx+58h], 0FFFFFFFFFFFFFFFFh
.text:0000000000007FF9                 jz      loc_84B2
.text:0000000000007FFF                 cmp     word ptr [rbx+70h], 0Bh
.text:0000000000008004                 jz      loc_813F
.text:000000000000800A                 mov     rdx, [r12+20h]
.text:000000000000800F                 mov     rax, [rbx+48h]
.text:0000000000008013                 mov     byte ptr [rdx+rax], 0
.text:0000000000008017                 cmp     qword ptr [rbx+58h], 0
.text:000000000000801C                 jz      loc_83E0
.text:0000000000008022                 movzx   eax, word ptr [rbx+72h]
.text:0000000000008026                 test    al, 2
.text:0000000000008028                 jz      loc_8398
.text:000000000000802E                 mov     eax, [r12+48h]
.text:0000000000008033                 mov     edi, [rbx+44h]  ; fd
.text:0000000000008036                 test    al, 4
.text:0000000000008038                 jz      loc_843C
.text:000000000000803E
.text:000000000000803E loc_803E:                               ; CODE XREF: rpl_fts_read+507↓j
.text:000000000000803E                                         ; rpl_fts_read+6AC↓j
.text:000000000000803E                 call    _close
.text:0000000000008043
.text:0000000000008043 loc_8043:                               ; CODE XREF: rpl_fts_read+44A↓j
.text:0000000000008043                                         ; rpl_fts_read+46A↓j ...
.text:0000000000008043                 mov     edi, [r12+48h]
.text:0000000000008048
.text:0000000000008048 loc_8048:                               ; CODE XREF: rpl_fts_read+48A↓j
.text:0000000000008048                 cmp     word ptr [rbx+70h], 2
.text:000000000000804D                 jz      short loc_8063
.text:000000000000804F                 mov     ecx, [rbx+40h]
.text:0000000000008052                 test    ecx, ecx
.text:0000000000008054                 jz      loc_83F8
.text:000000000000805A                 mov     edx, 7
.text:000000000000805F                 mov     [rbx+70h], dx
.text:0000000000008063
.text:0000000000008063 loc_8063:                               ; CODE XREF: rpl_fts_read+FD↑j
.text:0000000000008063                                         ; rpl_fts_read+4C3↓j
.text:0000000000008063                 and     edi, 2000h
.text:0000000000008069                 mov     rbp, rbx
.text:000000000000806C                 jz      short loc_80EA
.text:000000000000806E
.text:000000000000806E loc_806E:                               ; CODE XREF: rpl_fts_read+E↑j
.text:000000000000806E                                         ; rpl_fts_read+1A↑j ...
.text:000000000000806E                 xor     ebp, ebp
.text:0000000000008070                 pop     rbx
.text:0000000000008071                 mov     rax, rbp
.text:0000000000008074                 pop     rbp
.text:0000000000008075                 pop     r12
.text:0000000000008077                 pop     r13
.text:0000000000008079                 pop     r14
.text:000000000000807B                 retn
.text:000000000000807B ; ---------------------------------------------------------------------------
.text:000000000000807C                 align 20h
.text:0000000000008080
.text:0000000000008080 loc_8080:                               ; CODE XREF: rpl_fts_read+42↑j
.text:0000000000008080                 lea     eax, [rcx-0Ch]
.text:0000000000008083                 cmp     ax, 1
.text:0000000000008087                 jbe     short loc_8100
.text:0000000000008089                 cmp     cx, 1
.text:000000000000808D                 jnz     loc_7FD0
.text:0000000000008093
.text:0000000000008093 loc_8093:                               ; CODE XREF: rpl_fts_read+274↓j
.text:0000000000008093                 test    dl, 40h
.text:0000000000008096                 jz      loc_8148
.text:000000000000809C                 mov     rax, [r12+18h]
.text:00000000000080A1                 cmp     [rbp+78h], rax
.text:00000000000080A5                 jz      loc_8148
.text:00000000000080AB
.text:00000000000080AB loc_80AB:                               ; CODE XREF: rpl_fts_read+27A↓j
.text:00000000000080AB                 test    byte ptr [rbp+72h], 2
.text:00000000000080AF                 jnz     loc_8590
.text:00000000000080B5
.text:00000000000080B5 loc_80B5:                               ; CODE XREF: rpl_fts_read+648↓j
.text:00000000000080B5                 mov     rdi, [r12+8]    ; ptr
.text:00000000000080BA                 test    rdi, rdi
.text:00000000000080BD                 jz      short loc_80CD
.text:00000000000080BF                 call    fts_lfree
.text:00000000000080C4                 mov     qword ptr [r12+8], 0
.text:00000000000080CD
.text:00000000000080CD loc_80CD:                               ; CODE XREF: rpl_fts_read+16D↑j
.text:00000000000080CD                 mov     edi, [r12+48h]
.text:00000000000080D2                 mov     r10d, 6
.text:00000000000080D8                 lea     rsi, [r12+58h]
.text:00000000000080DD                 mov     [rbp+70h], r10w
.text:00000000000080E2                 mov     rdx, rbp
.text:00000000000080E5                 call    leave_dir_isra_12
.text:00000000000080EA
.text:00000000000080EA loc_80EA:                               ; CODE XREF: rpl_fts_read+11C↑j
.text:00000000000080EA                                         ; rpl_fts_read+1D3↓j ...
.text:00000000000080EA                 pop     rbx
.text:00000000000080EB                 mov     rax, rbp
.text:00000000000080EE                 pop     rbp
.text:00000000000080EF                 pop     r12
.text:00000000000080F1                 pop     r13
.text:00000000000080F3                 pop     r14
.text:00000000000080F5                 retn
.text:00000000000080F5 ; ---------------------------------------------------------------------------
.text:00000000000080F6                 align 20h
.text:0000000000008100
.text:0000000000008100 loc_8100:                               ; CODE XREF: rpl_fts_read+137↑j
.text:0000000000008100                 mov     edx, 1
.text:0000000000008105                 mov     rsi, rbp
.text:0000000000008108                 call    fts_stat
.text:000000000000810D                 cmp     ax, 1
.text:0000000000008111                 mov     [rbp+70h], ax
.text:0000000000008115                 jz      loc_845C
.text:000000000000811B                 cmp     ax, 0Bh
.text:000000000000811F                 mov     [r12], rbp
.text:0000000000008123                 jnz     short loc_80EA
.text:0000000000008125                 nop     dword ptr [rax]
.text:0000000000008128
.text:0000000000008128 loc_8128:                               ; CODE XREF: rpl_fts_read+356↓j
.text:0000000000008128                 mov     rax, [rbp+0A8h]
.text:000000000000812F                 cmp     rax, 2
.text:0000000000008133                 jz      loc_84D8
.text:0000000000008139                 cmp     rax, 1
.text:000000000000813D                 jz      short loc_80EA
.text:000000000000813F
.text:000000000000813F loc_813F:                               ; CODE XREF: rpl_fts_read+B4↑j
.text:000000000000813F                 call    _abort
.text:000000000000813F ; ---------------------------------------------------------------------------
.text:0000000000008144                 align 8
.text:0000000000008148
.text:0000000000008148 loc_8148:                               ; CODE XREF: rpl_fts_read+146↑j
.text:0000000000008148                                         ; rpl_fts_read+155↑j
.text:0000000000008148                 mov     rdi, [r12+8]    ; ptr
.text:000000000000814D                 test    rdi, rdi
.text:0000000000008150                 jz      loc_8368
.text:0000000000008156                 test    dh, 10h
.text:0000000000008159                 jnz     loc_8352
.text:000000000000815F                 mov     rcx, [rbp+30h]
.text:0000000000008163                 mov     edx, 0FFFFFFFFh
.text:0000000000008168                 mov     rsi, rbp
.text:000000000000816B                 mov     rdi, r12
.text:000000000000816E                 call    fts_safe_changedir
.text:0000000000008173                 test    eax, eax
.text:0000000000008175                 jz      loc_8432
.text:000000000000817B                 call    ___errno_location
.text:0000000000008180                 mov     eax, [rax]
.text:0000000000008182                 or      word ptr [rbp+72h], 1
.text:0000000000008187                 mov     [rbp+40h], eax
.text:000000000000818A                 mov     rbp, [r12+8]
.text:000000000000818F                 test    rbp, rbp
.text:0000000000008192                 jz      loc_8386
.text:0000000000008198                 mov     rax, rbp
.text:000000000000819B                 nop     dword ptr [rax+rax+00h]
.text:00000000000081A0
.text:00000000000081A0 loc_81A0:                               ; CODE XREF: rpl_fts_read+263↓j
.text:00000000000081A0                 mov     rdx, [rax+8]
.text:00000000000081A4                 mov     rdx, [rdx+30h]
.text:00000000000081A8                 mov     [rax+30h], rdx
.text:00000000000081AC                 mov     rax, [rax+10h]
.text:00000000000081B0                 test    rax, rax
.text:00000000000081B3                 jnz     short loc_81A0
.text:00000000000081B5                 jmp     loc_8386
.text:00000000000081B5 ; ---------------------------------------------------------------------------
.text:00000000000081BA                 align 20h
.text:00000000000081C0
.text:00000000000081C0 loc_81C0:                               ; CODE XREF: rpl_fts_read+4E↑j
.text:00000000000081C0                 cmp     ax, 4
.text:00000000000081C4                 jnz     loc_8093
.text:00000000000081CA                 jmp     loc_80AB
.text:00000000000081CA ; ---------------------------------------------------------------------------
.text:00000000000081CF                 align 10h
.text:00000000000081D0
.text:00000000000081D0 loc_81D0:                               ; CODE XREF: rpl_fts_read+34↑j
.text:00000000000081D0                 mov     rsi, rbp
.text:00000000000081D3                 xor     edx, edx
.text:00000000000081D5                 call    fts_stat
.text:00000000000081DA                 mov     [rbp+70h], ax
.text:00000000000081DE                 mov     rax, rbp
.text:00000000000081E1                 pop     rbx
.text:00000000000081E2                 pop     rbp
.text:00000000000081E3                 pop     r12
.text:00000000000081E5                 pop     r13
.text:00000000000081E7                 pop     r14
.text:00000000000081E9                 retn
.text:00000000000081E9 ; ---------------------------------------------------------------------------
.text:00000000000081EA                 align 10h
.text:00000000000081F0
.text:00000000000081F0 loc_81F0:                               ; CODE XREF: rpl_fts_read+69↑j
.text:00000000000081F0                 mov     rdi, r12
.text:00000000000081F3                 call    restore_initial_cwd
.text:00000000000081F8                 test    eax, eax
.text:00000000000081FA                 jnz     loc_8601
.text:0000000000008200                 test    dword ptr [r12+48h], 102h
.text:0000000000008209                 mov     rdi, [r12+58h]  ; ptr
.text:000000000000820E                 jz      loc_8348
.text:0000000000008214                 test    rdi, rdi
.text:0000000000008217                 jz      short loc_821E
.text:0000000000008219                 call    hash_free
.text:000000000000821E
.text:000000000000821E loc_821E:                               ; CODE XREF: rpl_fts_read+2C7↑j
.text:000000000000821E                                         ; rpl_fts_read+3FD↓j
.text:000000000000821E                 mov     rdx, [rbx+60h]
.text:0000000000008222                 lea     rbp, [rbx+108h]
.text:0000000000008229                 mov     rdi, [r12+20h]  ; dest
.text:000000000000822E                 mov     rsi, rbp        ; src
.text:0000000000008231                 mov     [rbx+48h], rdx
.text:0000000000008235                 add     rdx, 1          ; n
.text:0000000000008239                 call    _memmove
.text:000000000000823E                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000008243                 mov     rdi, rbp        ; s
.text:0000000000008246                 call    _strrchr
.text:000000000000824B                 test    rax, rax
.text:000000000000824E                 jz      short loc_827B
.text:0000000000008250                 cmp     rbp, rax
.text:0000000000008253                 jz      loc_8420
.text:0000000000008259
.text:0000000000008259 loc_8259:                               ; CODE XREF: rpl_fts_read+4D7↓j
.text:0000000000008259                 lea     r13, [rax+1]
.text:000000000000825D                 mov     rdi, r13        ; s
.text:0000000000008260                 call    _strlen
.text:0000000000008265                 lea     rdx, [rax+1]    ; n
.text:0000000000008269                 mov     r14, rax
.text:000000000000826C                 mov     rsi, r13        ; src
.text:000000000000826F                 mov     rdi, rbp        ; dest
.text:0000000000008272                 call    _memmove
.text:0000000000008277                 mov     [rbx+60h], r14
.text:000000000000827B
.text:000000000000827B loc_827B:                               ; CODE XREF: rpl_fts_read+2FE↑j
.text:000000000000827B                                         ; rpl_fts_read+4DD↓j
.text:000000000000827B                 mov     rax, [r12+20h]
.text:0000000000008280                 mov     edi, [r12+48h]
.text:0000000000008285                 lea     rsi, [r12+58h]
.text:000000000000828A                 mov     rbp, rbx
.text:000000000000828D                 mov     [rbx+38h], rax
.text:0000000000008291                 mov     [rbx+30h], rax
.text:0000000000008295                 call    setup_dir_isra_4
.text:000000000000829A                 movzx   eax, word ptr [rbx+70h]
.text:000000000000829E
.text:000000000000829E loc_829E:                               ; CODE XREF: rpl_fts_read+3EF↓j
.text:000000000000829E                                         ; rpl_fts_read+73D↓j
.text:000000000000829E                 cmp     ax, 0Bh
.text:00000000000082A2                 mov     [r12], rbp
.text:00000000000082A6                 jz      loc_8128
.text:00000000000082AC
.text:00000000000082AC loc_82AC:                               ; CODE XREF: rpl_fts_read+5C7↓j
.text:00000000000082AC                                         ; rpl_fts_read+717↓j
.text:00000000000082AC                 cmp     ax, 1
.text:00000000000082B0                 jnz     loc_80EA
.text:00000000000082B6
.text:00000000000082B6 loc_82B6:                               ; CODE XREF: rpl_fts_read+51F↓j
.text:00000000000082B6                 cmp     qword ptr [rbp+58h], 0
.text:00000000000082BB                 jnz     short loc_82C6
.text:00000000000082BD
.text:00000000000082BD loc_82BD:                               ; CODE XREF: rpl_fts_read+6F8↓j
.text:00000000000082BD                 mov     rax, [rbp+78h]
.text:00000000000082C1                 mov     [r12+18h], rax
.text:00000000000082C6
.text:00000000000082C6 loc_82C6:                               ; CODE XREF: rpl_fts_read+36B↑j
.text:00000000000082C6                                         ; rpl_fts_read+5F4↓j
.text:00000000000082C6                 mov     edi, [r12+48h]
.text:00000000000082CB                 lea     rsi, [r12+58h]
.text:00000000000082D0                 mov     rdx, rbp
.text:00000000000082D3                 call    enter_dir_isra_10
.text:00000000000082D8                 test    al, al
.text:00000000000082DA                 jnz     loc_80EA
.text:00000000000082E0                 call    ___errno_location
.text:00000000000082E5                 xor     ebp, ebp
.text:00000000000082E7                 mov     dword ptr [rax], 0Ch
.text:00000000000082ED                 jmp     loc_80EA
.text:00000000000082ED ; ---------------------------------------------------------------------------
.text:00000000000082F2                 align 8
.text:00000000000082F8
.text:00000000000082F8 loc_82F8:                               ; CODE XREF: rpl_fts_read+7A↑j
.text:00000000000082F8                 cmp     ax, 2
.text:00000000000082FC                 jz      loc_859D
.text:0000000000008302
.text:0000000000008302 loc_8302:                               ; CODE XREF: rpl_fts_read+43F↓j
.text:0000000000008302                                         ; rpl_fts_read+631↓j ...
.text:0000000000008302                 mov     rax, [rbp+8]
.text:0000000000008306                 lea     rsi, [rbp+108h] ; src
.text:000000000000830D                 mov     rdi, [rax+48h]
.text:0000000000008311                 mov     rax, [rax+38h]
.text:0000000000008315                 cmp     byte ptr [rax+rdi-1], 2Fh ; '/'
.text:000000000000831A                 lea     rdx, [rdi-1]
.text:000000000000831E                 cmovz   rdi, rdx
.text:0000000000008322                 add     rdi, [r12+20h]
.text:0000000000008327                 mov     byte ptr [rdi], 2Fh ; '/'
.text:000000000000832A                 mov     rax, [rbp+60h]
.text:000000000000832E                 add     rdi, 1          ; dest
.text:0000000000008332                 lea     rdx, [rax+1]    ; n
.text:0000000000008336                 call    _memmove
.text:000000000000833B                 movzx   eax, word ptr [rbp+70h]
.text:000000000000833F                 jmp     loc_829E
.text:000000000000833F ; ---------------------------------------------------------------------------
.text:0000000000008344                 align 8
.text:0000000000008348
.text:0000000000008348 loc_8348:                               ; CODE XREF: rpl_fts_read+2BE↑j
.text:0000000000008348                 call    free
.text:000000000000834D                 jmp     loc_821E
.text:0000000000008352 ; ---------------------------------------------------------------------------
.text:0000000000008352
.text:0000000000008352 loc_8352:                               ; CODE XREF: rpl_fts_read+209↑j
.text:0000000000008352                 and     dh, 0EFh
.text:0000000000008355                 mov     [r12+48h], edx
.text:000000000000835A                 call    fts_lfree
.text:000000000000835F                 mov     qword ptr [r12+8], 0
.text:0000000000008368
.text:0000000000008368 loc_8368:                               ; CODE XREF: rpl_fts_read+200↑j
.text:0000000000008368                 mov     esi, 3
.text:000000000000836D                 mov     rdi, r12
.text:0000000000008370                 call    fts_build
.text:0000000000008375                 test    rax, rax
.text:0000000000008378                 mov     [r12+8], rax
.text:000000000000837D                 jz      loc_8474
.text:0000000000008383                 mov     rbp, rax
.text:0000000000008386
.text:0000000000008386 loc_8386:                               ; CODE XREF: rpl_fts_read+242↑j
.text:0000000000008386                                         ; rpl_fts_read+265↑j ...
.text:0000000000008386                 mov     qword ptr [r12+8], 0
.text:000000000000838F                 jmp     loc_8302
.text:000000000000838F ; ---------------------------------------------------------------------------
.text:0000000000008394                 align 8
.text:0000000000008398
.text:0000000000008398 loc_8398:                               ; CODE XREF: rpl_fts_read+D8↑j
.text:0000000000008398                 test    al, 1
.text:000000000000839A                 jnz     loc_8043
.text:00000000000083A0                 mov     rsi, [rbx+8]
.text:00000000000083A4                 lea     rcx, off_BBC9
.text:00000000000083AB                 mov     edx, 0FFFFFFFFh
.text:00000000000083B0                 mov     rdi, r12
.text:00000000000083B3                 call    fts_safe_changedir
.text:00000000000083B8                 test    eax, eax
.text:00000000000083BA                 jz      loc_8043
.text:00000000000083C0
.text:00000000000083C0 loc_83C0:                               ; CODE XREF: rpl_fts_read+49A↓j
.text:00000000000083C0                 call    ___errno_location
.text:00000000000083C5                 mov     edi, [r12+48h]
.text:00000000000083CA                 mov     eax, [rax]
.text:00000000000083CC                 or      edi, 2000h
.text:00000000000083D2                 mov     [rbx+40h], eax
.text:00000000000083D5                 mov     [r12+48h], edi
.text:00000000000083DA                 jmp     loc_8048
.text:00000000000083DA ; ---------------------------------------------------------------------------
.text:00000000000083DF                 align 20h
.text:00000000000083E0
.text:00000000000083E0 loc_83E0:                               ; CODE XREF: rpl_fts_read+CC↑j
.text:00000000000083E0                 mov     rdi, r12
.text:00000000000083E3                 call    restore_initial_cwd
.text:00000000000083E8                 test    eax, eax
.text:00000000000083EA                 jnz     short loc_83C0
.text:00000000000083EC                 jmp     loc_8043
.text:00000000000083EC ; ---------------------------------------------------------------------------
.text:00000000000083F1                 align 8
.text:00000000000083F8
.text:00000000000083F8 loc_83F8:                               ; CODE XREF: rpl_fts_read+104↑j
.text:00000000000083F8                 mov     eax, 6
.text:00000000000083FD                 lea     rsi, [r12+58h]
.text:0000000000008402                 mov     rdx, rbx
.text:0000000000008405                 mov     [rbx+70h], ax
.text:0000000000008409                 call    leave_dir_isra_12
.text:000000000000840E                 mov     edi, [r12+48h]
.text:0000000000008413                 jmp     loc_8063
.text:0000000000008413 ; ---------------------------------------------------------------------------
.text:0000000000008418                 align 20h
.text:0000000000008420
.text:0000000000008420 loc_8420:                               ; CODE XREF: rpl_fts_read+303↑j
.text:0000000000008420                 cmp     byte ptr [rbx+109h], 0
.text:0000000000008427                 jnz     loc_8259
.text:000000000000842D                 jmp     loc_827B
.text:0000000000008432 ; ---------------------------------------------------------------------------
.text:0000000000008432
.text:0000000000008432 loc_8432:                               ; CODE XREF: rpl_fts_read+225↑j
.text:0000000000008432                 mov     rbp, [r12+8]
.text:0000000000008437                 jmp     loc_8386
.text:000000000000843C ; ---------------------------------------------------------------------------
.text:000000000000843C
.text:000000000000843C loc_843C:                               ; CODE XREF: rpl_fts_read+E8↑j
.text:000000000000843C                 test    ah, 2
.text:000000000000843F                 jz      loc_85DD
.text:0000000000008445                 mov     esi, edi
.text:0000000000008447                 mov     edx, 1
.text:000000000000844C                 mov     rdi, r12
.text:000000000000844F                 call    cwd_advance_fd
.text:0000000000008454                 mov     edi, [rbx+44h]
.text:0000000000008457                 jmp     loc_803E
.text:000000000000845C ; ---------------------------------------------------------------------------
.text:000000000000845C
.text:000000000000845C loc_845C:                               ; CODE XREF: rpl_fts_read+1C5↑j
.text:000000000000845C                 mov     esi, [r12+48h]
.text:0000000000008461                 test    sil, 4
.text:0000000000008465                 jz      loc_866C
.text:000000000000846B                 mov     [r12], rbp
.text:000000000000846F                 jmp     loc_82B6
.text:0000000000008474 ; ---------------------------------------------------------------------------
.text:0000000000008474
.text:0000000000008474 loc_8474:                               ; CODE XREF: rpl_fts_read+42D↑j
.text:0000000000008474                 mov     edi, [r12+48h]
.text:0000000000008479                 test    edi, 2000h
.text:000000000000847F                 jnz     loc_806E
.text:0000000000008485                 mov     r9d, [rbp+40h]
.text:0000000000008489                 test    r9d, r9d
.text:000000000000848C                 jz      short loc_84A0
.text:000000000000848E                 cmp     word ptr [rbp+70h], 4
.text:0000000000008493                 jz      short loc_84A0
.text:0000000000008495                 mov     r8d, 7
.text:000000000000849B                 mov     [rbp+70h], r8w
.text:00000000000084A0
.text:00000000000084A0 loc_84A0:                               ; CODE XREF: rpl_fts_read+53C↑j
.text:00000000000084A0                                         ; rpl_fts_read+543↑j
.text:00000000000084A0                 lea     rsi, [r12+58h]
.text:00000000000084A5                 mov     rdx, rbp
.text:00000000000084A8                 call    leave_dir_isra_12
.text:00000000000084AD                 jmp     loc_80EA
.text:00000000000084B2 ; ---------------------------------------------------------------------------
.text:00000000000084B2
.text:00000000000084B2 loc_84B2:                               ; CODE XREF: rpl_fts_read+A9↑j
.text:00000000000084B2                 mov     rdi, rbx        ; ptr
.text:00000000000084B5                 xor     ebp, ebp
.text:00000000000084B7                 call    free
.text:00000000000084BC                 call    ___errno_location
.text:00000000000084C1                 mov     dword ptr [rax], 0
.text:00000000000084C7                 mov     qword ptr [r12], 0
.text:00000000000084CF                 jmp     loc_80EA
.text:00000000000084CF ; ---------------------------------------------------------------------------
.text:00000000000084D4                 align 8
.text:00000000000084D8
.text:00000000000084D8 loc_84D8:                               ; CODE XREF: rpl_fts_read+1E3↑j
.text:00000000000084D8                 mov     rbx, [rbp+8]
.text:00000000000084DC                 cmp     qword ptr [rbx+68h], 0
.text:00000000000084E1                 jnz     short loc_84F4
.text:00000000000084E3                 mov     eax, [r12+48h]
.text:00000000000084E8                 and     eax, 18h
.text:00000000000084EB                 cmp     eax, 18h
.text:00000000000084EE                 jz      loc_864D
.text:00000000000084F4
.text:00000000000084F4 loc_84F4:                               ; CODE XREF: rpl_fts_read+591↑j
.text:00000000000084F4                                         ; rpl_fts_read+70D↓j
.text:00000000000084F4                 xor     edx, edx
.text:00000000000084F6                 mov     rsi, rbp
.text:00000000000084F9                 mov     rdi, r12
.text:00000000000084FC                 call    fts_stat
.text:0000000000008501                 mov     edx, [rbp+90h]
.text:0000000000008507                 mov     [rbp+70h], ax
.text:000000000000850B                 and     edx, 0F000h
.text:0000000000008511                 cmp     edx, 4000h
.text:0000000000008517                 jnz     loc_82AC
.text:000000000000851D                 cmp     qword ptr [rbp+58h], 0
.text:0000000000008522                 jz      loc_863E
.text:0000000000008528                 mov     rcx, [rbx+68h]
.text:000000000000852C                 lea     rdx, [rcx-1]
.text:0000000000008530                 cmp     rdx, 0FFFFFFFFFFFFFFFDh
.text:0000000000008534                 ja      short loc_853A
.text:0000000000008536                 mov     [rbx+68h], rdx
.text:000000000000853A
.text:000000000000853A loc_853A:                               ; CODE XREF: rpl_fts_read+5E4↑j
.text:000000000000853A                 cmp     ax, 1
.text:000000000000853E                 jnz     loc_80EA
.text:0000000000008544                 jmp     loc_82C6
.text:0000000000008544 ; ---------------------------------------------------------------------------
.text:0000000000008549                 align 10h
.text:0000000000008550
.text:0000000000008550 loc_8550:                               ; CODE XREF: rpl_fts_read+92↑j
.text:0000000000008550                 mov     rax, [rbx+48h]
.text:0000000000008554                 mov     rdx, [r12+20h]
.text:0000000000008559                 mov     esi, 3
.text:000000000000855E                 mov     [r12], rbx
.text:0000000000008562                 mov     rdi, r12
.text:0000000000008565                 mov     byte ptr [rdx+rax], 0
.text:0000000000008569                 call    fts_build
.text:000000000000856E                 test    rax, rax
.text:0000000000008571                 mov     rbx, rax
.text:0000000000008574                 jz      short loc_85C8
.text:0000000000008576                 mov     rdi, rbp        ; ptr
.text:0000000000008579                 mov     rbp, rbx
.text:000000000000857C                 call    free
.text:0000000000008581                 jmp     loc_8302
.text:0000000000008581 ; ---------------------------------------------------------------------------
.text:0000000000008586                 align 10h
.text:0000000000008590
.text:0000000000008590 loc_8590:                               ; CODE XREF: rpl_fts_read+15F↑j
.text:0000000000008590                 mov     edi, [rbp+44h]  ; fd
.text:0000000000008593                 call    _close
.text:0000000000008598                 jmp     loc_80B5
.text:000000000000859D ; ---------------------------------------------------------------------------
.text:000000000000859D
.text:000000000000859D loc_859D:                               ; CODE XREF: rpl_fts_read+3AC↑j
.text:000000000000859D                 mov     edx, 1
.text:00000000000085A2                 mov     rsi, rbx
.text:00000000000085A5                 mov     rdi, r12
.text:00000000000085A8                 call    fts_stat
.text:00000000000085AD                 cmp     ax, 1
.text:00000000000085B1                 mov     [rbx+70h], ax
.text:00000000000085B5                 jz      short loc_8611
.text:00000000000085B7
.text:00000000000085B7 loc_85B7:                               ; CODE XREF: rpl_fts_read+6CA↓j
.text:00000000000085B7                                         ; rpl_fts_read+6E9↓j ...
.text:00000000000085B7                 mov     esi, 3
.text:00000000000085BC                 mov     rbp, rbx
.text:00000000000085BF                 mov     [rbx+74h], si
.text:00000000000085C3                 jmp     loc_8302
.text:00000000000085C8 ; ---------------------------------------------------------------------------
.text:00000000000085C8
.text:00000000000085C8 loc_85C8:                               ; CODE XREF: rpl_fts_read+624↑j
.text:00000000000085C8                 test    byte ptr [r12+49h], 20h
.text:00000000000085CE                 jnz     loc_806E
.text:00000000000085D4                 mov     rbx, [rbp+8]
.text:00000000000085D8                 jmp     loc_7FE8
.text:00000000000085DD ; ---------------------------------------------------------------------------
.text:00000000000085DD
.text:00000000000085DD loc_85DD:                               ; CODE XREF: rpl_fts_read+4EF↑j
.text:00000000000085DD                 call    _fchdir
.text:00000000000085E2                 test    eax, eax
.text:00000000000085E4                 jz      short loc_85F9
.text:00000000000085E6                 call    ___errno_location
.text:00000000000085EB                 mov     eax, [rax]
.text:00000000000085ED                 mov     [rbx+40h], eax
.text:00000000000085F0                 or      dword ptr [r12+48h], 2000h
.text:00000000000085F9
.text:00000000000085F9 loc_85F9:                               ; CODE XREF: rpl_fts_read+694↑j
.text:00000000000085F9                 mov     edi, [rbx+44h]
.text:00000000000085FC                 jmp     loc_803E
.text:0000000000008601 ; ---------------------------------------------------------------------------
.text:0000000000008601
.text:0000000000008601 loc_8601:                               ; CODE XREF: rpl_fts_read+2AA↑j
.text:0000000000008601                 or      dword ptr [r12+48h], 2000h
.text:000000000000860A                 xor     ebp, ebp
.text:000000000000860C                 jmp     loc_80EA
.text:0000000000008611 ; ---------------------------------------------------------------------------
.text:0000000000008611
.text:0000000000008611 loc_8611:                               ; CODE XREF: rpl_fts_read+665↑j
.text:0000000000008611                 mov     esi, [r12+48h]
.text:0000000000008616                 test    sil, 4
.text:000000000000861A                 jnz     short loc_85B7
.text:000000000000861C                 mov     edi, [r12+2Ch]
.text:0000000000008621                 lea     rdx, off_BBC9+1
.text:0000000000008628                 call    diropen_isra_6
.text:000000000000862D                 test    eax, eax
.text:000000000000862F                 mov     [rbx+44h], eax
.text:0000000000008632                 js      short loc_86B0
.text:0000000000008634                 or      word ptr [rbx+72h], 2
.text:0000000000008639                 jmp     loc_85B7
.text:000000000000863E ; ---------------------------------------------------------------------------
.text:000000000000863E
.text:000000000000863E loc_863E:                               ; CODE XREF: rpl_fts_read+5D2↑j
.text:000000000000863E                 cmp     ax, 1
.text:0000000000008642                 jnz     loc_80EA
.text:0000000000008648                 jmp     loc_82BD
.text:000000000000864D ; ---------------------------------------------------------------------------
.text:000000000000864D
.text:000000000000864D loc_864D:                               ; CODE XREF: rpl_fts_read+59E↑j
.text:000000000000864D                 mov     esi, [r12+2Ch]
.text:0000000000008652                 mov     rdi, rbx
.text:0000000000008655                 call    leaf_optimization
.text:000000000000865A                 cmp     eax, 2
.text:000000000000865D                 jnz     loc_84F4
.text:0000000000008663                 movzx   eax, word ptr [rbp+70h]
.text:0000000000008667                 jmp     loc_82AC
.text:000000000000866C ; ---------------------------------------------------------------------------
.text:000000000000866C
.text:000000000000866C loc_866C:                               ; CODE XREF: rpl_fts_read+515↑j
.text:000000000000866C                 mov     edi, [r12+2Ch]
.text:0000000000008671                 lea     rdx, off_BBC9+1
.text:0000000000008678                 call    diropen_isra_6
.text:000000000000867D                 test    eax, eax
.text:000000000000867F                 mov     [rbp+44h], eax
.text:0000000000008682                 js      short loc_8692
.text:0000000000008684                 or      word ptr [rbp+72h], 2
.text:0000000000008689                 movzx   eax, word ptr [rbp+70h]
.text:000000000000868D                 jmp     loc_829E
.text:0000000000008692 ; ---------------------------------------------------------------------------
.text:0000000000008692
.text:0000000000008692 loc_8692:                               ; CODE XREF: rpl_fts_read+732↑j
.text:0000000000008692                 call    ___errno_location
.text:0000000000008697                 mov     eax, [rax]
.text:0000000000008699                 mov     r11d, 7
.text:000000000000869F                 mov     [rbp+70h], r11w
.text:00000000000086A4                 mov     [rbp+40h], eax
.text:00000000000086A7                 mov     [r12], rbp
.text:00000000000086AB                 jmp     loc_80EA
.text:00000000000086B0 ; ---------------------------------------------------------------------------
.text:00000000000086B0
.text:00000000000086B0 loc_86B0:                               ; CODE XREF: rpl_fts_read+6E2↑j
.text:00000000000086B0                 call    ___errno_location
.text:00000000000086B5                 mov     eax, [rax]
.text:00000000000086B7                 mov     edi, 7
.text:00000000000086BC                 mov     [rbx+70h], di
.text:00000000000086C0                 mov     [rbx+40h], eax
.text:00000000000086C3                 jmp     loc_85B7
.text:00000000000086C3 ; } // starts at 7F50
.text:00000000000086C3 rpl_fts_read    endp
.text:00000000000086C3
.text:00000000000086C3 ; ---------------------------------------------------------------------------
.text:00000000000086C8                 align 10h
.text:00000000000086D0
.text:00000000000086D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000086D0
.text:00000000000086D0
.text:00000000000086D0                 public rpl_fts_set
.text:00000000000086D0 rpl_fts_set     proc near               ; CODE XREF: change_file_owner+288↑p
.text:00000000000086D0                                         ; change_file_owner+3ED↑p ...
.text:00000000000086D0 ; __unwind {
.text:00000000000086D0                 cmp     edx, 4
.text:00000000000086D3                 ja      short loc_86E0
.text:00000000000086D5                 mov     [rsi+74h], dx
.text:00000000000086D9                 xor     eax, eax
.text:00000000000086DB                 retn
.text:00000000000086DB ; ---------------------------------------------------------------------------
.text:00000000000086DC                 align 20h
.text:00000000000086E0
.text:00000000000086E0 loc_86E0:                               ; CODE XREF: rpl_fts_set+3↑j
.text:00000000000086E0                 sub     rsp, 8
.text:00000000000086E4                 call    ___errno_location
.text:00000000000086E9                 mov     dword ptr [rax], 16h
.text:00000000000086EF                 mov     eax, 1
.text:00000000000086F4                 add     rsp, 8
.text:00000000000086F8                 retn
.text:00000000000086F8 ; } // starts at 86D0
.text:00000000000086F8 rpl_fts_set     endp
.text:00000000000086F8
.text:00000000000086F8 ; ---------------------------------------------------------------------------
.text:00000000000086F9                 align 20h
.text:0000000000008700
.text:0000000000008700 ; =============== S U B R O U T I N E =======================================
.text:0000000000008700
.text:0000000000008700
.text:0000000000008700                 public rpl_fts_children
.text:0000000000008700 rpl_fts_children proc near
.text:0000000000008700 ; __unwind {
.text:0000000000008700                 push    r14
.text:0000000000008702                 push    r13
.text:0000000000008704                 push    r12
.text:0000000000008706                 push    rbp
.text:0000000000008707                 mov     r12d, esi
.text:000000000000870A                 push    rbx
.text:000000000000870B                 mov     rbx, rdi
.text:000000000000870E                 call    ___errno_location
.text:0000000000008713                 test    r12d, 0FFFFEFFFh
.text:000000000000871A                 mov     r13, rax
.text:000000000000871D                 jnz     loc_8808
.text:0000000000008723                 mov     rbp, [rbx]
.text:0000000000008726                 mov     dword ptr [rax], 0
.text:000000000000872C                 test    byte ptr [rbx+49h], 20h
.text:0000000000008730                 jnz     short loc_87B0
.text:0000000000008732                 movzx   eax, word ptr [rbp+70h]
.text:0000000000008736                 cmp     ax, 9
.text:000000000000873A                 jz      short loc_87A0
.text:000000000000873C                 cmp     ax, 1
.text:0000000000008740                 jnz     short loc_87B0
.text:0000000000008742                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000008746                 test    rdi, rdi
.text:0000000000008749                 jz      short loc_8750
.text:000000000000874B                 call    fts_lfree
.text:0000000000008750
.text:0000000000008750 loc_8750:                               ; CODE XREF: rpl_fts_children+49↑j
.text:0000000000008750                 cmp     r12d, 1000h
.text:0000000000008757                 mov     r14d, 1
.text:000000000000875D                 jnz     short loc_876C
.text:000000000000875F                 or      dword ptr [rbx+48h], 1000h
.text:0000000000008766                 mov     r14d, 2
.text:000000000000876C
.text:000000000000876C loc_876C:                               ; CODE XREF: rpl_fts_children+5D↑j
.text:000000000000876C                 cmp     qword ptr [rbp+58h], 0
.text:0000000000008771                 jnz     short loc_8785
.text:0000000000008773                 mov     rax, [rbp+30h]
.text:0000000000008777                 cmp     byte ptr [rax], 2Fh ; '/'
.text:000000000000877A                 jz      short loc_8785
.text:000000000000877C                 mov     esi, [rbx+48h]
.text:000000000000877F                 test    sil, 4
.text:0000000000008783                 jz      short loc_87C0
.text:0000000000008785
.text:0000000000008785 loc_8785:                               ; CODE XREF: rpl_fts_children+71↑j
.text:0000000000008785                                         ; rpl_fts_children+7A↑j
.text:0000000000008785                 mov     esi, r14d
.text:0000000000008788                 mov     rdi, rbx
.text:000000000000878B                 call    fts_build
.text:0000000000008790                 mov     [rbx+8], rax
.text:0000000000008794
.text:0000000000008794 loc_8794:                               ; CODE XREF: rpl_fts_children+100↓j
.text:0000000000008794                                         ; rpl_fts_children+110↓j ...
.text:0000000000008794                 pop     rbx
.text:0000000000008795                 pop     rbp
.text:0000000000008796                 pop     r12
.text:0000000000008798                 pop     r13
.text:000000000000879A                 pop     r14
.text:000000000000879C                 retn
.text:000000000000879C ; ---------------------------------------------------------------------------
.text:000000000000879D                 align 20h
.text:00000000000087A0
.text:00000000000087A0 loc_87A0:                               ; CODE XREF: rpl_fts_children+3A↑j
.text:00000000000087A0                 pop     rbx
.text:00000000000087A1                 mov     rax, [rbp+10h]
.text:00000000000087A5                 pop     rbp
.text:00000000000087A6                 pop     r12
.text:00000000000087A8                 pop     r13
.text:00000000000087AA                 pop     r14
.text:00000000000087AC                 retn
.text:00000000000087AC ; ---------------------------------------------------------------------------
.text:00000000000087AD                 align 10h
.text:00000000000087B0
.text:00000000000087B0 loc_87B0:                               ; CODE XREF: rpl_fts_children+30↑j
.text:00000000000087B0                                         ; rpl_fts_children+40↑j
.text:00000000000087B0                 pop     rbx
.text:00000000000087B1                 xor     eax, eax
.text:00000000000087B3                 pop     rbp
.text:00000000000087B4                 pop     r12
.text:00000000000087B6                 pop     r13
.text:00000000000087B8                 pop     r14
.text:00000000000087BA                 retn
.text:00000000000087BA ; ---------------------------------------------------------------------------
.text:00000000000087BB                 align 20h
.text:00000000000087C0
.text:00000000000087C0 loc_87C0:                               ; CODE XREF: rpl_fts_children+83↑j
.text:00000000000087C0                 mov     edi, [rbx+2Ch]
.text:00000000000087C3                 lea     rdx, off_BBC9+1
.text:00000000000087CA                 call    diropen_isra_6
.text:00000000000087CF                 test    eax, eax
.text:00000000000087D1                 mov     ebp, eax
.text:00000000000087D3                 js      short loc_8829
.text:00000000000087D5                 mov     esi, r14d
.text:00000000000087D8                 mov     rdi, rbx
.text:00000000000087DB                 call    fts_build
.text:00000000000087E0                 test    byte ptr [rbx+49h], 2
.text:00000000000087E4                 mov     [rbx+8], rax
.text:00000000000087E8                 jnz     short loc_8818
.text:00000000000087EA                 mov     edi, ebp        ; fd
.text:00000000000087EC                 call    _fchdir
.text:00000000000087F1                 test    eax, eax
.text:00000000000087F3                 jnz     short loc_8838
.text:00000000000087F5                 mov     edi, ebp        ; fd
.text:00000000000087F7                 call    _close
.text:00000000000087FC
.text:00000000000087FC loc_87FC:                               ; CODE XREF: rpl_fts_children+127↓j
.text:00000000000087FC                 mov     rax, [rbx+8]
.text:0000000000008800                 jmp     short loc_8794
.text:0000000000008800 ; ---------------------------------------------------------------------------
.text:0000000000008802                 align 8
.text:0000000000008808
.text:0000000000008808 loc_8808:                               ; CODE XREF: rpl_fts_children+1D↑j
.text:0000000000008808                 mov     dword ptr [rax], 16h
.text:000000000000880E                 xor     eax, eax
.text:0000000000008810                 jmp     loc_8794
.text:0000000000008810 ; ---------------------------------------------------------------------------
.text:0000000000008815                 align 8
.text:0000000000008818
.text:0000000000008818 loc_8818:                               ; CODE XREF: rpl_fts_children+E8↑j
.text:0000000000008818                 mov     edx, 1
.text:000000000000881D                 mov     esi, ebp
.text:000000000000881F                 mov     rdi, rbx
.text:0000000000008822                 call    cwd_advance_fd
.text:0000000000008827                 jmp     short loc_87FC
.text:0000000000008829 ; ---------------------------------------------------------------------------
.text:0000000000008829
.text:0000000000008829 loc_8829:                               ; CODE XREF: rpl_fts_children+D3↑j
.text:0000000000008829                 mov     qword ptr [rbx+8], 0
.text:0000000000008831                 xor     eax, eax
.text:0000000000008833                 jmp     loc_8794
.text:0000000000008838 ; ---------------------------------------------------------------------------
.text:0000000000008838
.text:0000000000008838 loc_8838:                               ; CODE XREF: rpl_fts_children+F3↑j
.text:0000000000008838                 mov     ebx, [r13+0]
.text:000000000000883C                 mov     edi, ebp        ; fd
.text:000000000000883E                 call    _close
.text:0000000000008843                 xor     eax, eax
.text:0000000000008845                 mov     [r13+0], ebx
.text:0000000000008849                 jmp     loc_8794
.text:0000000000008849 ; } // starts at 8700
.text:0000000000008849 rpl_fts_children endp
.text:0000000000008849
.text:0000000000008849 ; ---------------------------------------------------------------------------
.text:000000000000884E                 align 10h
.text:0000000000008850
.text:0000000000008850 ; =============== S U B R O U T I N E =======================================
.text:0000000000008850
.text:0000000000008850 ; Attributes: info_from_lumina
.text:0000000000008850
.text:0000000000008850 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000008850                 public rpl_mbrtowc
.text:0000000000008850 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000008850
.text:0000000000008850 pwc             = dword ptr -34h
.text:0000000000008850 var_30          = qword ptr -30h
.text:0000000000008850
.text:0000000000008850 ; __unwind {
.text:0000000000008850                 push    r13
.text:0000000000008852                 push    r12
.text:0000000000008854                 mov     r13, rsi
.text:0000000000008857                 push    rbp
.text:0000000000008858                 push    rbx
.text:0000000000008859                 mov     rbx, rdi
.text:000000000000885C                 mov     r12, rdx
.text:000000000000885F                 sub     rsp, 18h
.text:0000000000008863                 mov     rax, fs:28h
.text:000000000000886C                 mov     [rsp+38h+var_30], rax
.text:0000000000008871                 xor     eax, eax
.text:0000000000008873                 lea     rax, [rsp+38h+pwc]
.text:0000000000008878                 test    rdi, rdi
.text:000000000000887B                 cmovz   rbx, rax
.text:000000000000887F                 mov     rdi, rbx        ; pwc
.text:0000000000008882                 call    _mbrtowc
.text:0000000000008887                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000888B                 mov     rbp, rax
.text:000000000000888E                 jbe     short loc_88B0
.text:0000000000008890                 test    r12, r12
.text:0000000000008893                 jz      short loc_88B0
.text:0000000000008895                 xor     edi, edi
.text:0000000000008897                 call    hard_locale
.text:000000000000889C                 test    al, al
.text:000000000000889E                 jnz     short loc_88B0
.text:00000000000088A0                 movzx   eax, byte ptr [r13+0]
.text:00000000000088A5                 mov     ebp, 1
.text:00000000000088AA                 mov     [rbx], eax
.text:00000000000088AC                 nop     dword ptr [rax+00h]
.text:00000000000088B0
.text:00000000000088B0 loc_88B0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000088B0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000088B0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000088B5                 xor     rdx, fs:28h
.text:00000000000088BE                 mov     rax, rbp
.text:00000000000088C1                 jnz     short loc_88CE
.text:00000000000088C3                 add     rsp, 18h
.text:00000000000088C7                 pop     rbx
.text:00000000000088C8                 pop     rbp
.text:00000000000088C9                 pop     r12
.text:00000000000088CB                 pop     r13
.text:00000000000088CD                 retn
.text:00000000000088CE ; ---------------------------------------------------------------------------
.text:00000000000088CE
.text:00000000000088CE loc_88CE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000088CE                 call    ___stack_chk_fail
.text:00000000000088CE ; } // starts at 8850
.text:00000000000088CE rpl_mbrtowc     endp
.text:00000000000088CE
.text:00000000000088CE ; ---------------------------------------------------------------------------
.text:00000000000088D3                 align 20h
.text:00000000000088E0
.text:00000000000088E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000088E0
.text:00000000000088E0 ; Attributes: info_from_lumina
.text:00000000000088E0
.text:00000000000088E0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000088E0                 public close_stream
.text:00000000000088E0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000088E0                                         ; close_stdout+33↑p
.text:00000000000088E0 ; __unwind {
.text:00000000000088E0                 push    r12
.text:00000000000088E2                 push    rbp
.text:00000000000088E3                 mov     rbp, rdi
.text:00000000000088E6                 push    rbx
.text:00000000000088E7                 call    ___fpending
.text:00000000000088EC                 mov     ebx, [rbp+0]
.text:00000000000088EF                 mov     rdi, rbp        ; stream
.text:00000000000088F2                 mov     r12, rax
.text:00000000000088F5                 call    rpl_fclose
.text:00000000000088FA                 and     ebx, 20h
.text:00000000000088FD                 test    ebx, ebx
.text:00000000000088FF                 jnz     short loc_8918
.text:0000000000008901                 test    eax, eax
.text:0000000000008903                 jz      short loc_890F
.text:0000000000008905                 test    r12, r12
.text:0000000000008908                 mov     eax, 0FFFFFFFFh
.text:000000000000890D                 jz      short loc_8948
.text:000000000000890F
.text:000000000000890F loc_890F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000890F                 pop     rbx
.text:0000000000008910                 pop     rbp
.text:0000000000008911                 pop     r12
.text:0000000000008913                 retn
.text:0000000000008913 ; ---------------------------------------------------------------------------
.text:0000000000008914                 align 8
.text:0000000000008918
.text:0000000000008918 loc_8918:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000008918                 test    eax, eax
.text:000000000000891A                 jnz     short loc_8938
.text:000000000000891C                 call    ___errno_location
.text:0000000000008921                 mov     dword ptr [rax], 0
.text:0000000000008927                 mov     eax, 0FFFFFFFFh
.text:000000000000892C                 pop     rbx
.text:000000000000892D                 pop     rbp
.text:000000000000892E                 pop     r12
.text:0000000000008930                 retn
.text:0000000000008930 ; ---------------------------------------------------------------------------
.text:0000000000008931                 align 8
.text:0000000000008938
.text:0000000000008938 loc_8938:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000008938                 pop     rbx
.text:0000000000008939                 mov     eax, 0FFFFFFFFh
.text:000000000000893E                 pop     rbp
.text:000000000000893F                 pop     r12
.text:0000000000008941                 retn
.text:0000000000008941 ; ---------------------------------------------------------------------------
.text:0000000000008942                 align 8
.text:0000000000008948
.text:0000000000008948 loc_8948:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000008948                 call    ___errno_location
.text:000000000000894D                 cmp     dword ptr [rax], 9
.text:0000000000008950                 pop     rbx
.text:0000000000008951                 pop     rbp
.text:0000000000008952                 pop     r12
.text:0000000000008954                 setnz   al
.text:0000000000008957                 movzx   eax, al
.text:000000000000895A                 neg     eax
.text:000000000000895C                 retn
.text:000000000000895C ; } // starts at 88E0
.text:000000000000895C close_stream    endp
.text:000000000000895C
.text:000000000000895C ; ---------------------------------------------------------------------------
.text:000000000000895D                 align 20h
.text:0000000000008960
.text:0000000000008960 ; =============== S U B R O U T I N E =======================================
.text:0000000000008960
.text:0000000000008960
.text:0000000000008960                 public cycle_check_init
.text:0000000000008960 cycle_check_init proc near              ; CODE XREF: setup_dir_isra_4+57↑p
.text:0000000000008960 ; __unwind {
.text:0000000000008960                 mov     qword ptr [rdi+10h], 0
.text:0000000000008968                 mov     dword ptr [rdi+18h], 95F616h
.text:000000000000896F                 retn
.text:000000000000896F ; } // starts at 8960
.text:000000000000896F cycle_check_init endp
.text:000000000000896F
.text:0000000000008970
.text:0000000000008970 ; =============== S U B R O U T I N E =======================================
.text:0000000000008970
.text:0000000000008970
.text:0000000000008970                 public cycle_check
.text:0000000000008970 cycle_check     proc near               ; CODE XREF: enter_dir_isra_10+88↑p
.text:0000000000008970 ; __unwind {
.text:0000000000008970                 cmp     dword ptr [rdi+18h], 95F616h
.text:0000000000008977                 jnz     short loc_89D7
.text:0000000000008979                 mov     rdx, [rdi+10h]
.text:000000000000897D                 mov     rcx, [rsi+8]
.text:0000000000008981                 test    rdx, rdx
.text:0000000000008984                 jz      short loc_89A0
.text:0000000000008986                 cmp     [rdi], rcx
.text:0000000000008989                 jz      short loc_89B8
.text:000000000000898B
.text:000000000000898B loc_898B:                               ; CODE XREF: cycle_check+4F↓j
.text:000000000000898B                 lea     r8, [rdx+1]
.text:000000000000898F                 xor     eax, eax
.text:0000000000008991                 test    rdx, r8
.text:0000000000008994                 mov     [rdi+10h], r8
.text:0000000000008998                 jz      short loc_89D0
.text:000000000000899A                 rep retn
.text:000000000000899A ; ---------------------------------------------------------------------------
.text:000000000000899C                 align 20h
.text:00000000000089A0
.text:00000000000089A0 loc_89A0:                               ; CODE XREF: cycle_check+14↑j
.text:00000000000089A0                 mov     qword ptr [rdi+10h], 1
.text:00000000000089A8
.text:00000000000089A8 loc_89A8:                               ; CODE XREF: cycle_check+65↓j
.text:00000000000089A8                 mov     rax, [rsi]
.text:00000000000089AB                 mov     [rdi], rcx
.text:00000000000089AE                 mov     [rdi+8], rax
.text:00000000000089B2                 xor     eax, eax
.text:00000000000089B4                 retn
.text:00000000000089B4 ; ---------------------------------------------------------------------------
.text:00000000000089B5                 align 8
.text:00000000000089B8
.text:00000000000089B8 loc_89B8:                               ; CODE XREF: cycle_check+19↑j
.text:00000000000089B8                 mov     rax, [rdi+8]
.text:00000000000089BC                 cmp     [rsi], rax
.text:00000000000089BF                 jnz     short loc_898B
.text:00000000000089C1
.text:00000000000089C1 loc_89C1:                               ; CODE XREF: cycle_check+63↓j
.text:00000000000089C1                 mov     eax, 1
.text:00000000000089C6                 retn
.text:00000000000089C6 ; ---------------------------------------------------------------------------
.text:00000000000089C7                 align 10h
.text:00000000000089D0
.text:00000000000089D0 loc_89D0:                               ; CODE XREF: cycle_check+28↑j
.text:00000000000089D0                 test    r8, r8
.text:00000000000089D3                 jz      short loc_89C1
.text:00000000000089D5                 jmp     short loc_89A8
.text:00000000000089D7 ; ---------------------------------------------------------------------------
.text:00000000000089D7
.text:00000000000089D7 loc_89D7:                               ; CODE XREF: cycle_check+7↑j
.text:00000000000089D7                 lea     rcx, __PRETTY_FUNCTION___3994 ; "cycle_check"
.text:00000000000089DE                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/cycle-check.c"
.text:00000000000089E5                 lea     rdi, aStateMagic9827 ; "state->magic == 9827862"
.text:00000000000089EC                 sub     rsp, 8
.text:00000000000089F0                 mov     edx, 3Ch ; '<'  ; line
.text:00000000000089F5                 call    ___assert_fail
.text:00000000000089F5 ; } // starts at 8970
.text:00000000000089F5 cycle_check     endp
.text:00000000000089F5
.text:00000000000089F5 ; ---------------------------------------------------------------------------
.text:00000000000089FA                 align 20h
.text:0000000000008A00
.text:0000000000008A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000008A00
.text:0000000000008A00
.text:0000000000008A00                 public open_safer
.text:0000000000008A00 open_safer      proc near               ; CODE XREF: diropen_isra_6+23↑j
.text:0000000000008A00
.text:0000000000008A00 var_58          = dword ptr -58h
.text:0000000000008A00 var_50          = qword ptr -50h
.text:0000000000008A00 var_48          = qword ptr -48h
.text:0000000000008A00 var_40          = qword ptr -40h
.text:0000000000008A00 var_38          = byte ptr -38h
.text:0000000000008A00 var_28          = qword ptr -28h
.text:0000000000008A00 arg_0           = byte ptr  8
.text:0000000000008A00
.text:0000000000008A00 ; __unwind {
.text:0000000000008A00                 sub     rsp, 58h
.text:0000000000008A04                 mov     [rsp+58h+var_28], rdx
.text:0000000000008A09                 xor     edx, edx
.text:0000000000008A0B                 mov     rax, fs:28h
.text:0000000000008A14                 mov     [rsp+58h+var_40], rax
.text:0000000000008A19                 xor     eax, eax
.text:0000000000008A1B                 test    sil, 40h
.text:0000000000008A1F                 jnz     short loc_8A48
.text:0000000000008A21
.text:0000000000008A21 loc_8A21:                               ; CODE XREF: open_safer+67↓j
.text:0000000000008A21                 xor     eax, eax
.text:0000000000008A23                 call    _open
.text:0000000000008A28                 mov     edi, eax        ; fd
.text:0000000000008A2A                 call    fd_safer_flag
.text:0000000000008A2F                 mov     rcx, [rsp+58h+var_40]
.text:0000000000008A34                 xor     rcx, fs:28h
.text:0000000000008A3D                 jnz     short loc_8A69
.text:0000000000008A3F                 add     rsp, 58h
.text:0000000000008A43                 retn
.text:0000000000008A43 ; ---------------------------------------------------------------------------
.text:0000000000008A44                 align 8
.text:0000000000008A48
.text:0000000000008A48 loc_8A48:                               ; CODE XREF: open_safer+1F↑j
.text:0000000000008A48                 lea     rax, [rsp+58h+arg_0]
.text:0000000000008A4D                 mov     [rsp+58h+var_58], 10h
.text:0000000000008A54                 mov     edx, dword ptr [rsp+58h+var_28]
.text:0000000000008A58                 mov     [rsp+58h+var_50], rax
.text:0000000000008A5D                 lea     rax, [rsp+58h+var_38]
.text:0000000000008A62                 mov     [rsp+58h+var_48], rax
.text:0000000000008A67                 jmp     short loc_8A21
.text:0000000000008A69 ; ---------------------------------------------------------------------------
.text:0000000000008A69
.text:0000000000008A69 loc_8A69:                               ; CODE XREF: open_safer+3D↑j
.text:0000000000008A69                 call    ___stack_chk_fail
.text:0000000000008A69 ; } // starts at 8A00
.text:0000000000008A69 open_safer      endp
.text:0000000000008A69
.text:0000000000008A69 ; ---------------------------------------------------------------------------
.text:0000000000008A6E                 align 10h
.text:0000000000008A70
.text:0000000000008A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000008A70
.text:0000000000008A70
.text:0000000000008A70                 public hard_locale
.text:0000000000008A70 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000008A70 ; __unwind {
.text:0000000000008A70                 sub     rsp, 8
.text:0000000000008A74                 xor     esi, esi        ; locale
.text:0000000000008A76                 call    _setlocale
.text:0000000000008A7B                 mov     rdx, rax
.text:0000000000008A7E                 mov     eax, 1
.text:0000000000008A83                 test    rdx, rdx
.text:0000000000008A86                 jz      short loc_8AA5
.text:0000000000008A88                 lea     rdi, aC         ; "C"
.text:0000000000008A8F                 mov     ecx, 2
.text:0000000000008A94                 mov     rsi, rdx
.text:0000000000008A97                 repe cmpsb
.text:0000000000008A99                 setnbe  cl
.text:0000000000008A9C                 sbb     cl, 0
.text:0000000000008A9F                 xor     eax, eax
.text:0000000000008AA1                 test    cl, cl
.text:0000000000008AA3                 jnz     short loc_8AB0
.text:0000000000008AA5
.text:0000000000008AA5 loc_8AA5:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000008AA5                 add     rsp, 8
.text:0000000000008AA9                 retn
.text:0000000000008AA9 ; ---------------------------------------------------------------------------
.text:0000000000008AAA                 align 10h
.text:0000000000008AB0
.text:0000000000008AB0 loc_8AB0:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000008AB0                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000008AB7                 mov     ecx, 6
.text:0000000000008ABC                 mov     rsi, rdx
.text:0000000000008ABF                 repe cmpsb
.text:0000000000008AC1                 setnbe  al
.text:0000000000008AC4                 sbb     al, 0
.text:0000000000008AC6                 test    al, al
.text:0000000000008AC8                 setnz   al
.text:0000000000008ACB                 add     rsp, 8
.text:0000000000008ACF                 retn
.text:0000000000008ACF ; } // starts at 8A70
.text:0000000000008ACF hard_locale     endp
.text:0000000000008ACF
.text:0000000000008AD0
.text:0000000000008AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AD0
.text:0000000000008AD0 ; Attributes: info_from_lumina
.text:0000000000008AD0
.text:0000000000008AD0 ; size_t __fastcall next_prime(size_t candidate)
.text:0000000000008AD0 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:0000000000008AD0                                         ; hash_rehash+7B↓p
.text:0000000000008AD0 ; __unwind {
.text:0000000000008AD0                 cmp     rdi, 0Ah
.text:0000000000008AD4                 mov     eax, 0Ah
.text:0000000000008AD9                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:0000000000008AE3                 cmovb   rdi, rax
.text:0000000000008AE7                 or      rdi, 1
.text:0000000000008AEB                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000008AEF                 jz      short loc_8B5F
.text:0000000000008AF1                 nop     dword ptr [rax+00000000h]
.text:0000000000008AF8
.text:0000000000008AF8 loc_8AF8:                               ; CODE XREF: next_prime+8D↓j
.text:0000000000008AF8                 mov     rax, rdi
.text:0000000000008AFB                 mov     rcx, rdi
.text:0000000000008AFE                 mul     r9
.text:0000000000008B01                 mov     rax, rdx
.text:0000000000008B04                 shr     rax, 1
.text:0000000000008B07                 lea     rax, [rax+rax*2]
.text:0000000000008B0B                 sub     rcx, rax
.text:0000000000008B0E                 cmp     rdi, 9
.text:0000000000008B12                 mov     rax, rcx
.text:0000000000008B15                 jbe     short loc_8B50
.text:0000000000008B17                 test    rcx, rcx
.text:0000000000008B1A                 jz      short loc_8B55
.text:0000000000008B1C                 mov     r8d, 10h
.text:0000000000008B22                 mov     esi, 9
.text:0000000000008B27                 mov     ecx, 3
.text:0000000000008B2C                 jmp     short loc_8B39
.text:0000000000008B2C ; ---------------------------------------------------------------------------
.text:0000000000008B2E                 align 10h
.text:0000000000008B30
.text:0000000000008B30 loc_8B30:                               ; CODE XREF: next_prime+7E↓j
.text:0000000000008B30                 add     r8, 8
.text:0000000000008B34                 test    rdx, rdx
.text:0000000000008B37                 jz      short loc_8B55
.text:0000000000008B39
.text:0000000000008B39 loc_8B39:                               ; CODE XREF: next_prime+5C↑j
.text:0000000000008B39                 add     rcx, 2
.text:0000000000008B3D                 xor     edx, edx
.text:0000000000008B3F                 mov     rax, rdi
.text:0000000000008B42                 div     rcx
.text:0000000000008B45                 add     rsi, r8
.text:0000000000008B48                 cmp     rsi, rdi
.text:0000000000008B4B                 mov     rax, rdx
.text:0000000000008B4E                 jb      short loc_8B30
.text:0000000000008B50
.text:0000000000008B50 loc_8B50:                               ; CODE XREF: next_prime+45↑j
.text:0000000000008B50                 test    rax, rax
.text:0000000000008B53                 jnz     short loc_8B5F
.text:0000000000008B55
.text:0000000000008B55 loc_8B55:                               ; CODE XREF: next_prime+4A↑j
.text:0000000000008B55                                         ; next_prime+67↑j
.text:0000000000008B55                 add     rdi, 2
.text:0000000000008B59                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000008B5D                 jnz     short loc_8AF8
.text:0000000000008B5F
.text:0000000000008B5F loc_8B5F:                               ; CODE XREF: next_prime+1F↑j
.text:0000000000008B5F                                         ; next_prime+83↑j
.text:0000000000008B5F                 mov     rax, rdi
.text:0000000000008B62                 retn
.text:0000000000008B62 ; } // starts at 8AD0
.text:0000000000008B62 next_prime      endp
.text:0000000000008B62
.text:0000000000008B62 ; ---------------------------------------------------------------------------
.text:0000000000008B63                 align 10h
.text:0000000000008B70
.text:0000000000008B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B70
.text:0000000000008B70
.text:0000000000008B70 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:0000000000008B70 ; __unwind {
.text:0000000000008B70                 mov     rax, rdi
.text:0000000000008B73                 xor     edx, edx
.text:0000000000008B75                 ror     rax, 3
.text:0000000000008B79                 div     rsi
.text:0000000000008B7C                 mov     rax, rdx
.text:0000000000008B7F                 retn
.text:0000000000008B7F ; } // starts at 8B70
.text:0000000000008B7F raw_hasher      endp
.text:0000000000008B7F
.text:0000000000008B80
.text:0000000000008B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B80
.text:0000000000008B80
.text:0000000000008B80 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:0000000000008B80 ; __unwind {
.text:0000000000008B80                 cmp     rdi, rsi
.text:0000000000008B83                 setz    al
.text:0000000000008B86                 retn
.text:0000000000008B86 ; } // starts at 8B80
.text:0000000000008B86 raw_comparator  endp
.text:0000000000008B86
.text:0000000000008B86 ; ---------------------------------------------------------------------------
.text:0000000000008B87                 align 10h
.text:0000000000008B90
.text:0000000000008B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B90
.text:0000000000008B90 ; Attributes: info_from_lumina
.text:0000000000008B90
.text:0000000000008B90 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:0000000000008B90 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:0000000000008B90                                         ; transfer_entries+65↓p ...
.text:0000000000008B90 ; __unwind {
.text:0000000000008B90                 push    rbx
.text:0000000000008B91                 mov     rbx, rdi
.text:0000000000008B94                 mov     rdi, rsi
.text:0000000000008B97                 mov     rsi, [rbx+10h]
.text:0000000000008B9B                 call    qword ptr [rbx+30h]
.text:0000000000008B9E                 cmp     [rbx+10h], rax
.text:0000000000008BA2                 jbe     short loc_8BAD
.text:0000000000008BA4                 shl     rax, 4
.text:0000000000008BA8                 add     rax, [rbx]
.text:0000000000008BAB                 pop     rbx
.text:0000000000008BAC                 retn
.text:0000000000008BAD ; ---------------------------------------------------------------------------
.text:0000000000008BAD
.text:0000000000008BAD loc_8BAD:                               ; CODE XREF: safe_hasher+12↑j
.text:0000000000008BAD                 call    _abort
.text:0000000000008BAD ; } // starts at 8B90
.text:0000000000008BAD safe_hasher     endp
.text:0000000000008BAD
.text:0000000000008BAD ; ---------------------------------------------------------------------------
.text:0000000000008BB2                 align 20h
.text:0000000000008BC0
.text:0000000000008BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008BC0
.text:0000000000008BC0 ; Attributes: info_from_lumina
.text:0000000000008BC0
.text:0000000000008BC0 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:0000000000008BC0 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:0000000000008BC0                                         ; hash_insert_if_absent+1CF↓p ...
.text:0000000000008BC0 ; __unwind {
.text:0000000000008BC0                 push    r14
.text:0000000000008BC2                 push    r13
.text:0000000000008BC4                 mov     r14, rdx
.text:0000000000008BC7                 push    r12
.text:0000000000008BC9                 push    rbp
.text:0000000000008BCA                 mov     r12, rdi
.text:0000000000008BCD                 push    rbx
.text:0000000000008BCE                 mov     rbp, rsi
.text:0000000000008BD1                 mov     r13d, ecx
.text:0000000000008BD4                 call    safe_hasher
.text:0000000000008BD9                 mov     [r14], rax
.text:0000000000008BDC                 mov     rsi, [rax]
.text:0000000000008BDF                 test    rsi, rsi
.text:0000000000008BE2                 jz      loc_8CD0
.text:0000000000008BE8                 cmp     rsi, rbp
.text:0000000000008BEB                 mov     rbx, rax
.text:0000000000008BEE                 jz      loc_8C83
.text:0000000000008BF4                 mov     rdi, rbp
.text:0000000000008BF7                 call    qword ptr [r12+38h]
.text:0000000000008BFC                 test    al, al
.text:0000000000008BFE                 jnz     loc_8C80
.text:0000000000008C04                 mov     rax, [rbx+8]
.text:0000000000008C08                 test    rax, rax
.text:0000000000008C0B                 jz      loc_8CD0
.text:0000000000008C11                 mov     rsi, [rax]
.text:0000000000008C14                 cmp     rbp, rsi
.text:0000000000008C17                 jnz     short loc_8C39
.text:0000000000008C19                 jmp     short loc_8C4C
.text:0000000000008C19 ; ---------------------------------------------------------------------------
.text:0000000000008C1B                 align 20h
.text:0000000000008C20
.text:0000000000008C20 loc_8C20:                               ; CODE XREF: hash_find_entry+83↓j
.text:0000000000008C20                 mov     rbx, [rbx+8]
.text:0000000000008C24                 mov     rax, [rbx+8]
.text:0000000000008C28                 test    rax, rax
.text:0000000000008C2B                 jz      loc_8CD0
.text:0000000000008C31                 mov     rsi, [rax]
.text:0000000000008C34                 cmp     rsi, rbp
.text:0000000000008C37                 jz      short loc_8C4C
.text:0000000000008C39
.text:0000000000008C39 loc_8C39:                               ; CODE XREF: hash_find_entry+57↑j
.text:0000000000008C39                 mov     rdi, rbp
.text:0000000000008C3C                 call    qword ptr [r12+38h]
.text:0000000000008C41                 test    al, al
.text:0000000000008C43                 jz      short loc_8C20
.text:0000000000008C45                 mov     rax, [rbx+8]
.text:0000000000008C49                 mov     rsi, [rax]
.text:0000000000008C4C
.text:0000000000008C4C loc_8C4C:                               ; CODE XREF: hash_find_entry+59↑j
.text:0000000000008C4C                                         ; hash_find_entry+77↑j
.text:0000000000008C4C                 test    r13b, r13b
.text:0000000000008C4F                 jz      short loc_8C6E
.text:0000000000008C51                 mov     rdx, [rax+8]
.text:0000000000008C55                 mov     [rbx+8], rdx
.text:0000000000008C59                 mov     qword ptr [rax], 0
.text:0000000000008C60                 mov     rdx, [r12+48h]
.text:0000000000008C65                 mov     [rax+8], rdx
.text:0000000000008C69                 mov     [r12+48h], rax
.text:0000000000008C6E
.text:0000000000008C6E loc_8C6E:                               ; CODE XREF: hash_find_entry+8F↑j
.text:0000000000008C6E                                         ; hash_find_entry+C6↓j ...
.text:0000000000008C6E                 pop     rbx
.text:0000000000008C6F                 mov     rax, rsi
.text:0000000000008C72                 pop     rbp
.text:0000000000008C73                 pop     r12
.text:0000000000008C75                 pop     r13
.text:0000000000008C77                 pop     r14
.text:0000000000008C79                 retn
.text:0000000000008C79 ; ---------------------------------------------------------------------------
.text:0000000000008C7A                 align 20h
.text:0000000000008C80
.text:0000000000008C80 loc_8C80:                               ; CODE XREF: hash_find_entry+3E↑j
.text:0000000000008C80                 mov     rsi, [rbx]
.text:0000000000008C83
.text:0000000000008C83 loc_8C83:                               ; CODE XREF: hash_find_entry+2E↑j
.text:0000000000008C83                 test    r13b, r13b
.text:0000000000008C86                 jz      short loc_8C6E
.text:0000000000008C88                 mov     rax, [rbx+8]
.text:0000000000008C8C                 test    rax, rax
.text:0000000000008C8F                 jz      short loc_8CC0
.text:0000000000008C91                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000008C95                 movups  xmmword ptr [rbx], xmm0
.text:0000000000008C98                 mov     qword ptr [rax], 0
.text:0000000000008C9F                 mov     rdx, [r12+48h]
.text:0000000000008CA4                 mov     [rax+8], rdx
.text:0000000000008CA8                 mov     [r12+48h], rax
.text:0000000000008CAD                 mov     rax, rsi
.text:0000000000008CB0                 pop     rbx
.text:0000000000008CB1                 pop     rbp
.text:0000000000008CB2                 pop     r12
.text:0000000000008CB4                 pop     r13
.text:0000000000008CB6                 pop     r14
.text:0000000000008CB8                 retn
.text:0000000000008CB8 ; ---------------------------------------------------------------------------
.text:0000000000008CB9                 align 20h
.text:0000000000008CC0
.text:0000000000008CC0 loc_8CC0:                               ; CODE XREF: hash_find_entry+CF↑j
.text:0000000000008CC0                 mov     qword ptr [rbx], 0
.text:0000000000008CC7                 jmp     short loc_8C6E
.text:0000000000008CC7 ; ---------------------------------------------------------------------------
.text:0000000000008CC9                 align 10h
.text:0000000000008CD0
.text:0000000000008CD0 loc_8CD0:                               ; CODE XREF: hash_find_entry+22↑j
.text:0000000000008CD0                                         ; hash_find_entry+4B↑j ...
.text:0000000000008CD0                 xor     esi, esi
.text:0000000000008CD2                 pop     rbx
.text:0000000000008CD3                 mov     rax, rsi
.text:0000000000008CD6                 pop     rbp
.text:0000000000008CD7                 pop     r12
.text:0000000000008CD9                 pop     r13
.text:0000000000008CDB                 pop     r14
.text:0000000000008CDD                 retn
.text:0000000000008CDD ; } // starts at 8BC0
.text:0000000000008CDD hash_find_entry endp
.text:0000000000008CDD
.text:0000000000008CDD ; ---------------------------------------------------------------------------
.text:0000000000008CDE                 align 20h
.text:0000000000008CE0
.text:0000000000008CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008CE0
.text:0000000000008CE0 ; Attributes: info_from_lumina
.text:0000000000008CE0
.text:0000000000008CE0 ; _Bool check_tuning(Hash_table *table)
.text:0000000000008CE0 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:0000000000008CE0                                         ; hash_initialize+11B↓p ...
.text:0000000000008CE0 ; __unwind {
.text:0000000000008CE0                 mov     rdx, [rdi]
.text:0000000000008CE3                 lea     rcx, default_tuning
.text:0000000000008CEA                 mov     eax, 1
.text:0000000000008CEF                 cmp     rdx, rcx
.text:0000000000008CF2                 jz      short locret_8D55
.text:0000000000008CF4                 movss   xmm0, dword ptr [rdx+8]
.text:0000000000008CF9                 ucomiss xmm0, cs:dword_BCF4
.text:0000000000008D00                 jbe     short loc_8D50
.text:0000000000008D02                 movss   xmm1, cs:dword_BCF8
.text:0000000000008D0A                 ucomiss xmm1, xmm0
.text:0000000000008D0D                 jbe     short loc_8D50
.text:0000000000008D0F                 movss   xmm1, dword ptr [rdx+0Ch]
.text:0000000000008D14                 ucomiss xmm1, cs:dword_BCFC
.text:0000000000008D1B                 jbe     short loc_8D50
.text:0000000000008D1D                 movss   xmm1, dword ptr [rdx]
.text:0000000000008D21                 ucomiss xmm1, cs:dword_BD00
.text:0000000000008D28                 jb      short loc_8D50
.text:0000000000008D2A                 addss   xmm1, cs:dword_BCF4
.text:0000000000008D32                 movss   xmm2, dword ptr [rdx+4]
.text:0000000000008D37                 ucomiss xmm2, xmm1
.text:0000000000008D3A                 jbe     short loc_8D50
.text:0000000000008D3C                 movss   xmm3, cs:dword_BD04
.text:0000000000008D44                 ucomiss xmm3, xmm2
.text:0000000000008D47                 jb      short loc_8D50
.text:0000000000008D49                 ucomiss xmm0, xmm1
.text:0000000000008D4C                 ja      short locret_8D55
.text:0000000000008D4E                 xchg    ax, ax
.text:0000000000008D50
.text:0000000000008D50 loc_8D50:                               ; CODE XREF: check_tuning+20↑j
.text:0000000000008D50                                         ; check_tuning+2D↑j ...
.text:0000000000008D50                 mov     [rdi], rcx
.text:0000000000008D53                 xor     eax, eax
.text:0000000000008D55
.text:0000000000008D55 locret_8D55:                            ; CODE XREF: check_tuning+12↑j
.text:0000000000008D55                                         ; check_tuning+6C↑j
.text:0000000000008D55                 rep retn
.text:0000000000008D55 ; } // starts at 8CE0
.text:0000000000008D55 check_tuning    endp
.text:0000000000008D55
.text:0000000000008D55 ; ---------------------------------------------------------------------------
.text:0000000000008D57                 align 20h
.text:0000000000008D60
.text:0000000000008D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D60
.text:0000000000008D60 ; Attributes: info_from_lumina
.text:0000000000008D60
.text:0000000000008D60 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:0000000000008D60 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:0000000000008D60                                         ; hash_rehash+152↓p ...
.text:0000000000008D60 ; __unwind {
.text:0000000000008D60                 push    r15
.text:0000000000008D62                 push    r14
.text:0000000000008D64                 push    r13
.text:0000000000008D66                 push    r12
.text:0000000000008D68                 push    rbp
.text:0000000000008D69                 push    rbx
.text:0000000000008D6A                 sub     rsp, 8
.text:0000000000008D6E                 mov     r12, [rsi]
.text:0000000000008D71                 cmp     r12, [rsi+8]
.text:0000000000008D75                 jnb     loc_8E58
.text:0000000000008D7B                 mov     rbp, rdi
.text:0000000000008D7E                 mov     r13, rsi
.text:0000000000008D81                 mov     r14d, edx
.text:0000000000008D84                 nop     dword ptr [rax+00h]
.text:0000000000008D88
.text:0000000000008D88 loc_8D88:                               ; CODE XREF: transfer_entries+F2↓j
.text:0000000000008D88                 mov     r15, [r12]
.text:0000000000008D8C                 test    r15, r15
.text:0000000000008D8F                 jz      loc_8E4A
.text:0000000000008D95                 mov     rbx, [r12+8]
.text:0000000000008D9A                 test    rbx, rbx
.text:0000000000008D9D                 jnz     short loc_8DBC
.text:0000000000008D9F                 jmp     short loc_8DFB
.text:0000000000008D9F ; ---------------------------------------------------------------------------
.text:0000000000008DA1                 align 8
.text:0000000000008DA8
.text:0000000000008DA8 loc_8DA8:                               ; CODE XREF: transfer_entries+72↓j
.text:0000000000008DA8                 mov     rcx, [rax+8]
.text:0000000000008DAC                 test    rdx, rdx
.text:0000000000008DAF                 mov     [rbx+8], rcx
.text:0000000000008DB3                 mov     [rax+8], rbx
.text:0000000000008DB7                 mov     rbx, rdx
.text:0000000000008DBA                 jz      short loc_8DF7
.text:0000000000008DBC
.text:0000000000008DBC loc_8DBC:                               ; CODE XREF: transfer_entries+3D↑j
.text:0000000000008DBC                                         ; transfer_entries+95↓j
.text:0000000000008DBC                 mov     r15, [rbx]
.text:0000000000008DBF                 mov     rdi, rbp
.text:0000000000008DC2                 mov     rsi, r15
.text:0000000000008DC5                 call    safe_hasher
.text:0000000000008DCA                 cmp     qword ptr [rax], 0
.text:0000000000008DCE                 mov     rdx, [rbx+8]
.text:0000000000008DD2                 jnz     short loc_8DA8
.text:0000000000008DD4                 mov     [rax], r15
.text:0000000000008DD7                 add     qword ptr [rbp+18h], 1
.text:0000000000008DDC                 test    rdx, rdx
.text:0000000000008DDF                 mov     qword ptr [rbx], 0
.text:0000000000008DE6                 mov     rax, [rbp+48h]
.text:0000000000008DEA                 mov     [rbx+8], rax
.text:0000000000008DEE                 mov     [rbp+48h], rbx
.text:0000000000008DF2                 mov     rbx, rdx
.text:0000000000008DF5                 jnz     short loc_8DBC
.text:0000000000008DF7
.text:0000000000008DF7 loc_8DF7:                               ; CODE XREF: transfer_entries+5A↑j
.text:0000000000008DF7                 mov     r15, [r12]
.text:0000000000008DFB
.text:0000000000008DFB loc_8DFB:                               ; CODE XREF: transfer_entries+3F↑j
.text:0000000000008DFB                 test    r14b, r14b
.text:0000000000008DFE                 mov     qword ptr [r12+8], 0
.text:0000000000008E07                 jnz     short loc_8E4A
.text:0000000000008E09                 mov     rsi, r15
.text:0000000000008E0C                 mov     rdi, rbp
.text:0000000000008E0F                 call    safe_hasher
.text:0000000000008E14                 cmp     qword ptr [rax], 0
.text:0000000000008E18                 mov     rbx, rax
.text:0000000000008E1B                 jz      short loc_8E70
.text:0000000000008E1D                 mov     rax, [rbp+48h]
.text:0000000000008E21                 test    rax, rax
.text:0000000000008E24                 jz      short loc_8E80
.text:0000000000008E26                 mov     rdx, [rax+8]
.text:0000000000008E2A                 mov     [rbp+48h], rdx
.text:0000000000008E2E
.text:0000000000008E2E loc_8E2E:                               ; CODE XREF: transfer_entries+12D↓j
.text:0000000000008E2E                 mov     rdx, [rbx+8]
.text:0000000000008E32                 mov     [rax], r15
.text:0000000000008E35                 mov     [rax+8], rdx
.text:0000000000008E39                 mov     [rbx+8], rax
.text:0000000000008E3D
.text:0000000000008E3D loc_8E3D:                               ; CODE XREF: transfer_entries+118↓j
.text:0000000000008E3D                 mov     qword ptr [r12], 0
.text:0000000000008E45                 sub     qword ptr [r13+18h], 1
.text:0000000000008E4A
.text:0000000000008E4A loc_8E4A:                               ; CODE XREF: transfer_entries+2F↑j
.text:0000000000008E4A                                         ; transfer_entries+A7↑j
.text:0000000000008E4A                 add     r12, 10h
.text:0000000000008E4E                 cmp     [r13+8], r12
.text:0000000000008E52                 ja      loc_8D88
.text:0000000000008E58
.text:0000000000008E58 loc_8E58:                               ; CODE XREF: transfer_entries+15↑j
.text:0000000000008E58                 add     rsp, 8
.text:0000000000008E5C                 mov     eax, 1
.text:0000000000008E61                 pop     rbx
.text:0000000000008E62                 pop     rbp
.text:0000000000008E63                 pop     r12
.text:0000000000008E65                 pop     r13
.text:0000000000008E67                 pop     r14
.text:0000000000008E69                 pop     r15
.text:0000000000008E6B                 retn
.text:0000000000008E6B ; ---------------------------------------------------------------------------
.text:0000000000008E6C                 align 10h
.text:0000000000008E70
.text:0000000000008E70 loc_8E70:                               ; CODE XREF: transfer_entries+BB↑j
.text:0000000000008E70                 mov     [rax], r15
.text:0000000000008E73                 add     qword ptr [rbp+18h], 1
.text:0000000000008E78                 jmp     short loc_8E3D
.text:0000000000008E78 ; ---------------------------------------------------------------------------
.text:0000000000008E7A                 align 20h
.text:0000000000008E80
.text:0000000000008E80 loc_8E80:                               ; CODE XREF: transfer_entries+C4↑j
.text:0000000000008E80                 mov     edi, 10h        ; size
.text:0000000000008E85                 call    _malloc
.text:0000000000008E8A                 test    rax, rax
.text:0000000000008E8D                 jnz     short loc_8E2E
.text:0000000000008E8F                 add     rsp, 8
.text:0000000000008E93                 xor     eax, eax
.text:0000000000008E95                 pop     rbx
.text:0000000000008E96                 pop     rbp
.text:0000000000008E97                 pop     r12
.text:0000000000008E99                 pop     r13
.text:0000000000008E9B                 pop     r14
.text:0000000000008E9D                 pop     r15
.text:0000000000008E9F                 retn
.text:0000000000008E9F ; } // starts at 8D60
.text:0000000000008E9F transfer_entries endp
.text:0000000000008E9F
.text:0000000000008EA0
.text:0000000000008EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008EA0
.text:0000000000008EA0
.text:0000000000008EA0                 public hash_get_n_buckets
.text:0000000000008EA0 hash_get_n_buckets proc near
.text:0000000000008EA0 ; __unwind {
.text:0000000000008EA0                 mov     rax, [rdi+10h]
.text:0000000000008EA4                 retn
.text:0000000000008EA4 ; } // starts at 8EA0
.text:0000000000008EA4 hash_get_n_buckets endp
.text:0000000000008EA4
.text:0000000000008EA4 ; ---------------------------------------------------------------------------
.text:0000000000008EA5                 align 10h
.text:0000000000008EB0
.text:0000000000008EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008EB0
.text:0000000000008EB0
.text:0000000000008EB0                 public hash_get_n_buckets_used
.text:0000000000008EB0 hash_get_n_buckets_used proc near
.text:0000000000008EB0 ; __unwind {
.text:0000000000008EB0                 mov     rax, [rdi+18h]
.text:0000000000008EB4                 retn
.text:0000000000008EB4 ; } // starts at 8EB0
.text:0000000000008EB4 hash_get_n_buckets_used endp
.text:0000000000008EB4
.text:0000000000008EB4 ; ---------------------------------------------------------------------------
.text:0000000000008EB5                 align 20h
.text:0000000000008EC0
.text:0000000000008EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008EC0
.text:0000000000008EC0
.text:0000000000008EC0                 public hash_get_n_entries
.text:0000000000008EC0 hash_get_n_entries proc near
.text:0000000000008EC0 ; __unwind {
.text:0000000000008EC0                 mov     rax, [rdi+20h]
.text:0000000000008EC4                 retn
.text:0000000000008EC4 ; } // starts at 8EC0
.text:0000000000008EC4 hash_get_n_entries endp
.text:0000000000008EC4
.text:0000000000008EC4 ; ---------------------------------------------------------------------------
.text:0000000000008EC5                 align 10h
.text:0000000000008ED0
.text:0000000000008ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008ED0
.text:0000000000008ED0 ; Attributes: info_from_lumina
.text:0000000000008ED0
.text:0000000000008ED0 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:0000000000008ED0                 public hash_get_max_bucket_length
.text:0000000000008ED0 hash_get_max_bucket_length proc near
.text:0000000000008ED0 ; __unwind {
.text:0000000000008ED0                 mov     rsi, [rdi]
.text:0000000000008ED3                 mov     rdi, [rdi+8]
.text:0000000000008ED7                 xor     eax, eax
.text:0000000000008ED9                 cmp     rsi, rdi
.text:0000000000008EDC                 jnb     short locret_8F17
.text:0000000000008EDE                 xchg    ax, ax
.text:0000000000008EE0
.text:0000000000008EE0 loc_8EE0:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:0000000000008EE0                 cmp     qword ptr [rsi], 0
.text:0000000000008EE4                 jz      short loc_8F0C
.text:0000000000008EE6                 mov     rdx, [rsi+8]
.text:0000000000008EEA                 mov     ecx, 1
.text:0000000000008EEF                 test    rdx, rdx
.text:0000000000008EF2                 jz      short loc_8F05
.text:0000000000008EF4                 nop     dword ptr [rax+00h]
.text:0000000000008EF8
.text:0000000000008EF8 loc_8EF8:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:0000000000008EF8                 mov     rdx, [rdx+8]
.text:0000000000008EFC                 add     rcx, 1
.text:0000000000008F00                 test    rdx, rdx
.text:0000000000008F03                 jnz     short loc_8EF8
.text:0000000000008F05
.text:0000000000008F05 loc_8F05:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:0000000000008F05                 cmp     rax, rcx
.text:0000000000008F08                 cmovb   rax, rcx
.text:0000000000008F0C
.text:0000000000008F0C loc_8F0C:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:0000000000008F0C                 add     rsi, 10h
.text:0000000000008F10                 cmp     rsi, rdi
.text:0000000000008F13                 jb      short loc_8EE0
.text:0000000000008F15                 rep retn
.text:0000000000008F17 ; ---------------------------------------------------------------------------
.text:0000000000008F17
.text:0000000000008F17 locret_8F17:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:0000000000008F17                 rep retn
.text:0000000000008F17 ; } // starts at 8ED0
.text:0000000000008F17 hash_get_max_bucket_length endp
.text:0000000000008F17
.text:0000000000008F17 ; ---------------------------------------------------------------------------
.text:0000000000008F19                 align 20h
.text:0000000000008F20
.text:0000000000008F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000008F20
.text:0000000000008F20 ; Attributes: info_from_lumina
.text:0000000000008F20
.text:0000000000008F20 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:0000000000008F20                 public hash_table_ok
.text:0000000000008F20 hash_table_ok   proc near
.text:0000000000008F20 ; __unwind {
.text:0000000000008F20                 mov     rcx, [rdi]
.text:0000000000008F23                 mov     r8, [rdi+8]
.text:0000000000008F27                 xor     edx, edx
.text:0000000000008F29                 xor     esi, esi
.text:0000000000008F2B                 cmp     rcx, r8
.text:0000000000008F2E                 jnb     short loc_8F66
.text:0000000000008F30
.text:0000000000008F30 loc_8F30:                               ; CODE XREF: hash_table_ok+44↓j
.text:0000000000008F30                 cmp     qword ptr [rcx], 0
.text:0000000000008F34                 jz      short loc_8F5D
.text:0000000000008F36                 mov     rax, [rcx+8]
.text:0000000000008F3A                 add     rsi, 1
.text:0000000000008F3E                 add     rdx, 1
.text:0000000000008F42                 test    rax, rax
.text:0000000000008F45                 jz      short loc_8F5D
.text:0000000000008F47                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008F50
.text:0000000000008F50 loc_8F50:                               ; CODE XREF: hash_table_ok+3B↓j
.text:0000000000008F50                 mov     rax, [rax+8]
.text:0000000000008F54                 add     rdx, 1
.text:0000000000008F58                 test    rax, rax
.text:0000000000008F5B                 jnz     short loc_8F50
.text:0000000000008F5D
.text:0000000000008F5D loc_8F5D:                               ; CODE XREF: hash_table_ok+14↑j
.text:0000000000008F5D                                         ; hash_table_ok+25↑j
.text:0000000000008F5D                 add     rcx, 10h
.text:0000000000008F61                 cmp     rcx, r8
.text:0000000000008F64                 jb      short loc_8F30
.text:0000000000008F66
.text:0000000000008F66 loc_8F66:                               ; CODE XREF: hash_table_ok+E↑j
.text:0000000000008F66                 xor     eax, eax
.text:0000000000008F68                 cmp     [rdi+18h], rsi
.text:0000000000008F6C                 jz      short loc_8F70
.text:0000000000008F6E                 rep retn
.text:0000000000008F70 ; ---------------------------------------------------------------------------
.text:0000000000008F70
.text:0000000000008F70 loc_8F70:                               ; CODE XREF: hash_table_ok+4C↑j
.text:0000000000008F70                 cmp     [rdi+20h], rdx
.text:0000000000008F74                 setz    al
.text:0000000000008F77                 retn
.text:0000000000008F77 ; } // starts at 8F20
.text:0000000000008F77 hash_table_ok   endp
.text:0000000000008F77
.text:0000000000008F77 ; ---------------------------------------------------------------------------
.text:0000000000008F78                 align 20h
.text:0000000000008F80
.text:0000000000008F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000008F80
.text:0000000000008F80 ; Attributes: info_from_lumina
.text:0000000000008F80
.text:0000000000008F80 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:0000000000008F80                 public hash_print_statistics
.text:0000000000008F80 hash_print_statistics proc near
.text:0000000000008F80 ; __unwind {
.text:0000000000008F80                 push    r13
.text:0000000000008F82                 push    r12
.text:0000000000008F84                 mov     r12, rsi
.text:0000000000008F87                 push    rbp
.text:0000000000008F88                 push    rbx
.text:0000000000008F89                 xor     ebx, ebx
.text:0000000000008F8B                 sub     rsp, 8
.text:0000000000008F8F                 mov     rsi, [rdi]
.text:0000000000008F92                 mov     rcx, [rdi+20h]
.text:0000000000008F96                 mov     rbp, [rdi+10h]
.text:0000000000008F9A                 mov     r13, [rdi+18h]
.text:0000000000008F9E                 mov     rdi, [rdi+8]
.text:0000000000008FA2                 cmp     rsi, rdi
.text:0000000000008FA5                 jnb     short loc_8FE5
.text:0000000000008FA7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008FB0
.text:0000000000008FB0 loc_8FB0:                               ; CODE XREF: hash_print_statistics+63↓j
.text:0000000000008FB0                 cmp     qword ptr [rsi], 0
.text:0000000000008FB4                 jz      short loc_8FDC
.text:0000000000008FB6                 mov     rax, [rsi+8]
.text:0000000000008FBA                 mov     edx, 1
.text:0000000000008FBF                 test    rax, rax
.text:0000000000008FC2                 jz      short loc_8FD5
.text:0000000000008FC4                 nop     dword ptr [rax+00h]
.text:0000000000008FC8
.text:0000000000008FC8 loc_8FC8:                               ; CODE XREF: hash_print_statistics+53↓j
.text:0000000000008FC8                 mov     rax, [rax+8]
.text:0000000000008FCC                 add     rdx, 1
.text:0000000000008FD0                 test    rax, rax
.text:0000000000008FD3                 jnz     short loc_8FC8
.text:0000000000008FD5
.text:0000000000008FD5 loc_8FD5:                               ; CODE XREF: hash_print_statistics+42↑j
.text:0000000000008FD5                 cmp     rbx, rdx
.text:0000000000008FD8                 cmovb   rbx, rdx
.text:0000000000008FDC
.text:0000000000008FDC loc_8FDC:                               ; CODE XREF: hash_print_statistics+34↑j
.text:0000000000008FDC                 add     rsi, 10h
.text:0000000000008FE0                 cmp     rsi, rdi
.text:0000000000008FE3                 jb      short loc_8FB0
.text:0000000000008FE5
.text:0000000000008FE5 loc_8FE5:                               ; CODE XREF: hash_print_statistics+25↑j
.text:0000000000008FE5                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:0000000000008FEC                 mov     esi, 1
.text:0000000000008FF1                 mov     rdi, r12
.text:0000000000008FF4                 xor     eax, eax
.text:0000000000008FF6                 call    ___fprintf_chk
.text:0000000000008FFB                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:0000000000009002                 xor     eax, eax
.text:0000000000009004                 mov     rcx, rbp
.text:0000000000009007                 mov     esi, 1
.text:000000000000900C                 mov     rdi, r12
.text:000000000000900F                 call    ___fprintf_chk
.text:0000000000009014                 test    r13, r13
.text:0000000000009017                 js      short loc_9080
.text:0000000000009019                 pxor    xmm0, xmm0
.text:000000000000901D                 test    rbp, rbp
.text:0000000000009020                 cvtsi2sd xmm0, r13
.text:0000000000009025                 mulsd   xmm0, cs:qword_BD18
.text:000000000000902D                 js      short loc_90A9
.text:000000000000902F
.text:000000000000902F loc_902F:                               ; CODE XREF: hash_print_statistics+127↓j
.text:000000000000902F                 pxor    xmm1, xmm1
.text:0000000000009033                 cvtsi2sd xmm1, rbp
.text:0000000000009038
.text:0000000000009038 loc_9038:                               ; CODE XREF: hash_print_statistics+142↓j
.text:0000000000009038                 divsd   xmm0, xmm1
.text:000000000000903C                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:0000000000009043                 mov     rcx, r13
.text:0000000000009046                 mov     rdi, r12
.text:0000000000009049                 mov     esi, 1
.text:000000000000904E                 mov     eax, 1
.text:0000000000009053                 call    ___fprintf_chk
.text:0000000000009058                 add     rsp, 8
.text:000000000000905C                 mov     rcx, rbx
.text:000000000000905F                 mov     rdi, r12
.text:0000000000009062                 pop     rbx
.text:0000000000009063                 pop     rbp
.text:0000000000009064                 pop     r12
.text:0000000000009066                 pop     r13
.text:0000000000009068                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:000000000000906F                 mov     esi, 1
.text:0000000000009074                 xor     eax, eax
.text:0000000000009076                 jmp     ___fprintf_chk
.text:0000000000009076 ; ---------------------------------------------------------------------------
.text:000000000000907B                 align 20h
.text:0000000000009080
.text:0000000000009080 loc_9080:                               ; CODE XREF: hash_print_statistics+97↑j
.text:0000000000009080                 mov     rax, r13
.text:0000000000009083                 mov     rdx, r13
.text:0000000000009086                 pxor    xmm0, xmm0
.text:000000000000908A                 shr     rax, 1
.text:000000000000908D                 and     edx, 1
.text:0000000000009090                 or      rax, rdx
.text:0000000000009093                 test    rbp, rbp
.text:0000000000009096                 cvtsi2sd xmm0, rax
.text:000000000000909B                 addsd   xmm0, xmm0
.text:000000000000909F                 mulsd   xmm0, cs:qword_BD18
.text:00000000000090A7                 jns     short loc_902F
.text:00000000000090A9
.text:00000000000090A9 loc_90A9:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:00000000000090A9                 mov     rax, rbp
.text:00000000000090AC                 pxor    xmm1, xmm1
.text:00000000000090B0                 shr     rax, 1
.text:00000000000090B3                 and     ebp, 1
.text:00000000000090B6                 or      rax, rbp
.text:00000000000090B9                 cvtsi2sd xmm1, rax
.text:00000000000090BE                 addsd   xmm1, xmm1
.text:00000000000090C2                 jmp     loc_9038
.text:00000000000090C2 ; } // starts at 8F80
.text:00000000000090C2 hash_print_statistics endp
.text:00000000000090C2
.text:00000000000090C2 ; ---------------------------------------------------------------------------
.text:00000000000090C7                 align 10h
.text:00000000000090D0
.text:00000000000090D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090D0
.text:00000000000090D0 ; Attributes: info_from_lumina
.text:00000000000090D0
.text:00000000000090D0 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:00000000000090D0                 public hash_lookup
.text:00000000000090D0 hash_lookup     proc near               ; CODE XREF: filesystem_type+47↑p
.text:00000000000090D0 ; __unwind {
.text:00000000000090D0                 push    r12
.text:00000000000090D2                 push    rbp
.text:00000000000090D3                 mov     r12, rdi
.text:00000000000090D6                 push    rbx
.text:00000000000090D7                 mov     rbp, rsi
.text:00000000000090DA                 call    safe_hasher
.text:00000000000090DF                 mov     rsi, [rax]
.text:00000000000090E2                 test    rsi, rsi
.text:00000000000090E5                 jz      short loc_910D
.text:00000000000090E7                 mov     rbx, rax
.text:00000000000090EA                 jmp     short loc_90F3
.text:00000000000090EA ; ---------------------------------------------------------------------------
.text:00000000000090EC                 align 10h
.text:00000000000090F0
.text:00000000000090F0 loc_90F0:                               ; CODE XREF: hash_lookup+3B↓j
.text:00000000000090F0                 mov     rsi, [rbx]
.text:00000000000090F3
.text:00000000000090F3 loc_90F3:                               ; CODE XREF: hash_lookup+1A↑j
.text:00000000000090F3                 cmp     rsi, rbp
.text:00000000000090F6                 jz      short loc_910F
.text:00000000000090F8                 mov     rdi, rbp
.text:00000000000090FB                 call    qword ptr [r12+38h]
.text:0000000000009100                 test    al, al
.text:0000000000009102                 jnz     short loc_9120
.text:0000000000009104                 mov     rbx, [rbx+8]
.text:0000000000009108                 test    rbx, rbx
.text:000000000000910B                 jnz     short loc_90F0
.text:000000000000910D
.text:000000000000910D loc_910D:                               ; CODE XREF: hash_lookup+15↑j
.text:000000000000910D                 xor     esi, esi
.text:000000000000910F
.text:000000000000910F loc_910F:                               ; CODE XREF: hash_lookup+26↑j
.text:000000000000910F                 pop     rbx
.text:0000000000009110                 mov     rax, rsi
.text:0000000000009113                 pop     rbp
.text:0000000000009114                 pop     r12
.text:0000000000009116                 retn
.text:0000000000009116 ; ---------------------------------------------------------------------------
.text:0000000000009117                 align 20h
.text:0000000000009120
.text:0000000000009120 loc_9120:                               ; CODE XREF: hash_lookup+32↑j
.text:0000000000009120                 mov     rsi, [rbx]
.text:0000000000009123                 pop     rbx
.text:0000000000009124                 pop     rbp
.text:0000000000009125                 mov     rax, rsi
.text:0000000000009128                 pop     r12
.text:000000000000912A                 retn
.text:000000000000912A ; } // starts at 90D0
.text:000000000000912A hash_lookup     endp
.text:000000000000912A
.text:000000000000912A ; ---------------------------------------------------------------------------
.text:000000000000912B                 align 10h
.text:0000000000009130
.text:0000000000009130 ; =============== S U B R O U T I N E =======================================
.text:0000000000009130
.text:0000000000009130 ; Attributes: info_from_lumina
.text:0000000000009130
.text:0000000000009130 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:0000000000009130                 public hash_get_first
.text:0000000000009130 hash_get_first  proc near
.text:0000000000009130 ; __unwind {
.text:0000000000009130                 cmp     qword ptr [rdi+20h], 0
.text:0000000000009135                 jz      short loc_9163
.text:0000000000009137                 mov     rdx, [rdi]
.text:000000000000913A                 mov     rcx, [rdi+8]
.text:000000000000913E                 cmp     rdx, rcx
.text:0000000000009141                 jnb     short loc_9168
.text:0000000000009143                 mov     rax, [rdx]
.text:0000000000009146                 test    rax, rax
.text:0000000000009149                 jnz     short locret_9166
.text:000000000000914B                 nop     dword ptr [rax+rax+00h]
.text:0000000000009150
.text:0000000000009150 loc_9150:                               ; CODE XREF: hash_get_first+2F↓j
.text:0000000000009150                 add     rdx, 10h
.text:0000000000009154                 cmp     rdx, rcx
.text:0000000000009157                 jnb     short loc_9168
.text:0000000000009159                 mov     rax, [rdx]
.text:000000000000915C                 test    rax, rax
.text:000000000000915F                 jz      short loc_9150
.text:0000000000009161                 rep retn
.text:0000000000009163 ; ---------------------------------------------------------------------------
.text:0000000000009163
.text:0000000000009163 loc_9163:                               ; CODE XREF: hash_get_first+5↑j
.text:0000000000009163                 xor     eax, eax
.text:0000000000009165                 retn
.text:0000000000009166 ; ---------------------------------------------------------------------------
.text:0000000000009166
.text:0000000000009166 locret_9166:                            ; CODE XREF: hash_get_first+19↑j
.text:0000000000009166                 rep retn
.text:0000000000009168 ; ---------------------------------------------------------------------------
.text:0000000000009168
.text:0000000000009168 loc_9168:                               ; CODE XREF: hash_get_first+11↑j
.text:0000000000009168                                         ; hash_get_first+27↑j
.text:0000000000009168                 sub     rsp, 8
.text:000000000000916C                 call    _abort
.text:000000000000916C ; } // starts at 9130
.text:000000000000916C hash_get_first  endp
.text:000000000000916C
.text:000000000000916C ; ---------------------------------------------------------------------------
.text:0000000000009171                 align 20h
.text:0000000000009180
.text:0000000000009180 ; =============== S U B R O U T I N E =======================================
.text:0000000000009180
.text:0000000000009180 ; Attributes: info_from_lumina
.text:0000000000009180
.text:0000000000009180 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:0000000000009180                 public hash_get_next
.text:0000000000009180 hash_get_next   proc near
.text:0000000000009180 ; __unwind {
.text:0000000000009180                 push    rbp
.text:0000000000009181                 push    rbx
.text:0000000000009182                 mov     rbp, rdi
.text:0000000000009185                 mov     rbx, rsi
.text:0000000000009188                 sub     rsp, 8
.text:000000000000918C                 call    safe_hasher
.text:0000000000009191                 mov     rdx, rax
.text:0000000000009194                 mov     rcx, rax
.text:0000000000009197                 mov     rax, [rdx]
.text:000000000000919A                 mov     rdx, [rdx+8]
.text:000000000000919E                 cmp     rax, rbx
.text:00000000000091A1                 jz      short loc_91B9
.text:00000000000091A3                 nop     dword ptr [rax+rax+00h]
.text:00000000000091A8
.text:00000000000091A8 loc_91A8:                               ; CODE XREF: hash_get_next+37↓j
.text:00000000000091A8                 test    rdx, rdx
.text:00000000000091AB                 jz      short loc_91BE
.text:00000000000091AD                 mov     rax, [rdx]
.text:00000000000091B0                 mov     rdx, [rdx+8]
.text:00000000000091B4                 cmp     rax, rbx
.text:00000000000091B7                 jnz     short loc_91A8
.text:00000000000091B9
.text:00000000000091B9 loc_91B9:                               ; CODE XREF: hash_get_next+21↑j
.text:00000000000091B9                 test    rdx, rdx
.text:00000000000091BC                 jnz     short loc_91E8
.text:00000000000091BE
.text:00000000000091BE loc_91BE:                               ; CODE XREF: hash_get_next+2B↑j
.text:00000000000091BE                 mov     rdx, [rbp+8]
.text:00000000000091C2                 jmp     short loc_91D0
.text:00000000000091C2 ; ---------------------------------------------------------------------------
.text:00000000000091C4                 align 8
.text:00000000000091C8
.text:00000000000091C8 loc_91C8:                               ; CODE XREF: hash_get_next+57↓j
.text:00000000000091C8                 mov     rax, [rcx]
.text:00000000000091CB                 test    rax, rax
.text:00000000000091CE                 jnz     short loc_91DB
.text:00000000000091D0
.text:00000000000091D0 loc_91D0:                               ; CODE XREF: hash_get_next+42↑j
.text:00000000000091D0                 add     rcx, 10h
.text:00000000000091D4                 cmp     rdx, rcx
.text:00000000000091D7                 ja      short loc_91C8
.text:00000000000091D9                 xor     eax, eax
.text:00000000000091DB
.text:00000000000091DB loc_91DB:                               ; CODE XREF: hash_get_next+4E↑j
.text:00000000000091DB                 add     rsp, 8
.text:00000000000091DF                 pop     rbx
.text:00000000000091E0                 pop     rbp
.text:00000000000091E1                 retn
.text:00000000000091E1 ; ---------------------------------------------------------------------------
.text:00000000000091E2                 align 8
.text:00000000000091E8
.text:00000000000091E8 loc_91E8:                               ; CODE XREF: hash_get_next+3C↑j
.text:00000000000091E8                 mov     rax, [rdx]
.text:00000000000091EB                 add     rsp, 8
.text:00000000000091EF                 pop     rbx
.text:00000000000091F0                 pop     rbp
.text:00000000000091F1                 retn
.text:00000000000091F1 ; } // starts at 9180
.text:00000000000091F1 hash_get_next   endp
.text:00000000000091F1
.text:00000000000091F1 ; ---------------------------------------------------------------------------
.text:00000000000091F2                 align 20h
.text:0000000000009200
.text:0000000000009200 ; =============== S U B R O U T I N E =======================================
.text:0000000000009200
.text:0000000000009200 ; Attributes: info_from_lumina
.text:0000000000009200
.text:0000000000009200 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:0000000000009200                 public hash_get_entries
.text:0000000000009200 hash_get_entries proc near
.text:0000000000009200 ; __unwind {
.text:0000000000009200                 mov     r9, [rdi]
.text:0000000000009203                 cmp     [rdi+8], r9
.text:0000000000009207                 jbe     short loc_9262
.text:0000000000009209                 xor     r8d, r8d
.text:000000000000920C
.text:000000000000920C loc_920C:                               ; CODE XREF: hash_get_entries+55↓j
.text:000000000000920C                 mov     rcx, [r9]
.text:000000000000920F                 test    rcx, rcx
.text:0000000000009212                 jz      short loc_924D
.text:0000000000009214                 cmp     rdx, r8
.text:0000000000009217                 jbe     short loc_9257
.text:0000000000009219                 mov     [rsi+r8*8], rcx
.text:000000000000921D                 mov     rcx, [r9+8]
.text:0000000000009221                 lea     rax, [r8+1]
.text:0000000000009225                 test    rcx, rcx
.text:0000000000009228                 jz      short loc_924A
.text:000000000000922A                 nop     word ptr [rax+rax+00h]
.text:0000000000009230
.text:0000000000009230 loc_9230:                               ; CODE XREF: hash_get_entries+48↓j
.text:0000000000009230                 cmp     rdx, rax
.text:0000000000009233                 jz      short locret_9260
.text:0000000000009235                 mov     r8, [rcx]
.text:0000000000009238                 add     rax, 1
.text:000000000000923C                 mov     [rsi+rax*8-8], r8
.text:0000000000009241                 mov     rcx, [rcx+8]
.text:0000000000009245                 test    rcx, rcx
.text:0000000000009248                 jnz     short loc_9230
.text:000000000000924A
.text:000000000000924A loc_924A:                               ; CODE XREF: hash_get_entries+28↑j
.text:000000000000924A                 mov     r8, rax
.text:000000000000924D
.text:000000000000924D loc_924D:                               ; CODE XREF: hash_get_entries+12↑j
.text:000000000000924D                 add     r9, 10h
.text:0000000000009251                 cmp     [rdi+8], r9
.text:0000000000009255                 ja      short loc_920C
.text:0000000000009257
.text:0000000000009257 loc_9257:                               ; CODE XREF: hash_get_entries+17↑j
.text:0000000000009257                 mov     rax, r8
.text:000000000000925A                 retn
.text:000000000000925A ; ---------------------------------------------------------------------------
.text:000000000000925B                 align 20h
.text:0000000000009260
.text:0000000000009260 locret_9260:                            ; CODE XREF: hash_get_entries+33↑j
.text:0000000000009260                 rep retn
.text:0000000000009262 ; ---------------------------------------------------------------------------
.text:0000000000009262
.text:0000000000009262 loc_9262:                               ; CODE XREF: hash_get_entries+7↑j
.text:0000000000009262                 xor     eax, eax
.text:0000000000009264                 retn
.text:0000000000009264 ; } // starts at 9200
.text:0000000000009264 hash_get_entries endp
.text:0000000000009264
.text:0000000000009264 ; ---------------------------------------------------------------------------
.text:0000000000009265                 align 10h
.text:0000000000009270
.text:0000000000009270 ; =============== S U B R O U T I N E =======================================
.text:0000000000009270
.text:0000000000009270 ; Attributes: info_from_lumina
.text:0000000000009270
.text:0000000000009270 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:0000000000009270                 public hash_do_for_each
.text:0000000000009270 hash_do_for_each proc near
.text:0000000000009270 ; __unwind {
.text:0000000000009270                 push    r15
.text:0000000000009272                 push    r14
.text:0000000000009274                 push    r13
.text:0000000000009276                 push    r12
.text:0000000000009278                 push    rbp
.text:0000000000009279                 push    rbx
.text:000000000000927A                 sub     rsp, 8
.text:000000000000927E                 mov     r14, [rdi]
.text:0000000000009281                 cmp     [rdi+8], r14
.text:0000000000009285                 jbe     short loc_92D6
.text:0000000000009287                 mov     r13, rdx
.text:000000000000928A                 mov     r12, rsi
.text:000000000000928D                 mov     r15, rdi
.text:0000000000009290                 xor     ebp, ebp
.text:0000000000009292
.text:0000000000009292 loc_9292:                               ; CODE XREF: hash_do_for_each+52↓j
.text:0000000000009292                 mov     rdi, [r14]
.text:0000000000009295                 test    rdi, rdi
.text:0000000000009298                 jz      short loc_92BA
.text:000000000000929A                 mov     rbx, r14
.text:000000000000929D                 jmp     short loc_92A3
.text:000000000000929D ; ---------------------------------------------------------------------------
.text:000000000000929F                 align 20h
.text:00000000000092A0
.text:00000000000092A0 loc_92A0:                               ; CODE XREF: hash_do_for_each+48↓j
.text:00000000000092A0                 mov     rdi, [rbx]
.text:00000000000092A3
.text:00000000000092A3 loc_92A3:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:00000000000092A3                 mov     rsi, r13
.text:00000000000092A6                 call    r12
.text:00000000000092A9                 test    al, al
.text:00000000000092AB                 jz      short loc_92C4
.text:00000000000092AD                 mov     rbx, [rbx+8]
.text:00000000000092B1                 add     rbp, 1
.text:00000000000092B5                 test    rbx, rbx
.text:00000000000092B8                 jnz     short loc_92A0
.text:00000000000092BA
.text:00000000000092BA loc_92BA:                               ; CODE XREF: hash_do_for_each+28↑j
.text:00000000000092BA                 add     r14, 10h
.text:00000000000092BE                 cmp     [r15+8], r14
.text:00000000000092C2                 ja      short loc_9292
.text:00000000000092C4
.text:00000000000092C4 loc_92C4:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:00000000000092C4                                         ; hash_do_for_each+68↓j
.text:00000000000092C4                 add     rsp, 8
.text:00000000000092C8                 mov     rax, rbp
.text:00000000000092CB                 pop     rbx
.text:00000000000092CC                 pop     rbp
.text:00000000000092CD                 pop     r12
.text:00000000000092CF                 pop     r13
.text:00000000000092D1                 pop     r14
.text:00000000000092D3                 pop     r15
.text:00000000000092D5                 retn
.text:00000000000092D6 ; ---------------------------------------------------------------------------
.text:00000000000092D6
.text:00000000000092D6 loc_92D6:                               ; CODE XREF: hash_do_for_each+15↑j
.text:00000000000092D6                 xor     ebp, ebp
.text:00000000000092D8                 jmp     short loc_92C4
.text:00000000000092D8 ; } // starts at 9270
.text:00000000000092D8 hash_do_for_each endp
.text:00000000000092D8
.text:00000000000092D8 ; ---------------------------------------------------------------------------
.text:00000000000092DA                 align 20h
.text:00000000000092E0
.text:00000000000092E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092E0
.text:00000000000092E0 ; Attributes: info_from_lumina
.text:00000000000092E0
.text:00000000000092E0 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:00000000000092E0                 public hash_string
.text:00000000000092E0 hash_string     proc near
.text:00000000000092E0 ; __unwind {
.text:00000000000092E0                 movzx   ecx, byte ptr [rdi]
.text:00000000000092E3                 xor     edx, edx
.text:00000000000092E5                 test    cl, cl
.text:00000000000092E7                 jz      short loc_930D
.text:00000000000092E9                 nop     dword ptr [rax+00000000h]
.text:00000000000092F0
.text:00000000000092F0 loc_92F0:                               ; CODE XREF: hash_string+2B↓j
.text:00000000000092F0                 mov     rax, rdx
.text:00000000000092F3                 add     rdi, 1
.text:00000000000092F7                 shl     rax, 5
.text:00000000000092FB                 sub     rax, rdx
.text:00000000000092FE                 xor     edx, edx
.text:0000000000009300                 add     rax, rcx
.text:0000000000009303                 movzx   ecx, byte ptr [rdi]
.text:0000000000009306                 div     rsi
.text:0000000000009309                 test    cl, cl
.text:000000000000930B                 jnz     short loc_92F0
.text:000000000000930D
.text:000000000000930D loc_930D:                               ; CODE XREF: hash_string+7↑j
.text:000000000000930D                 mov     rax, rdx
.text:0000000000009310                 retn
.text:0000000000009310 ; } // starts at 92E0
.text:0000000000009310 hash_string     endp
.text:0000000000009310
.text:0000000000009310 ; ---------------------------------------------------------------------------
.text:0000000000009311                 align 20h
.text:0000000000009320
.text:0000000000009320 ; =============== S U B R O U T I N E =======================================
.text:0000000000009320
.text:0000000000009320 ; Attributes: info_from_lumina
.text:0000000000009320
.text:0000000000009320 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:0000000000009320                 public hash_reset_tuning
.text:0000000000009320 hash_reset_tuning proc near
.text:0000000000009320 ; __unwind {
.text:0000000000009320                 mov     rax, 3F80000000000000h
.text:000000000000932A                 mov     byte ptr [rdi+10h], 0
.text:000000000000932E                 mov     [rdi], rax
.text:0000000000009331                 mov     rax, 3FB4FDF43F4CCCCDh
.text:000000000000933B                 mov     [rdi+8], rax
.text:000000000000933F                 retn
.text:000000000000933F ; } // starts at 9320
.text:000000000000933F hash_reset_tuning endp
.text:000000000000933F
.text:0000000000009340
.text:0000000000009340 ; =============== S U B R O U T I N E =======================================
.text:0000000000009340
.text:0000000000009340 ; Attributes: info_from_lumina
.text:0000000000009340
.text:0000000000009340 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:0000000000009340                 public hash_initialize
.text:0000000000009340 hash_initialize proc near               ; CODE XREF: filesystem_type+7C↑p
.text:0000000000009340                                         ; setup_dir_isra_4+28↑p
.text:0000000000009340 ; __unwind {
.text:0000000000009340                 push    r15
.text:0000000000009342                 push    r14
.text:0000000000009344                 lea     rax, raw_hasher
.text:000000000000934B                 push    r13
.text:000000000000934D                 push    r12
.text:000000000000934F                 mov     r12, rdx
.text:0000000000009352                 push    rbp
.text:0000000000009353                 push    rbx
.text:0000000000009354                 mov     r13, rcx
.text:0000000000009357                 mov     rbp, rdi
.text:000000000000935A                 mov     edi, 50h ; 'P'  ; size
.text:000000000000935F                 mov     r15, rsi
.text:0000000000009362                 sub     rsp, 8
.text:0000000000009366                 test    rdx, rdx
.text:0000000000009369                 mov     r14, r8
.text:000000000000936C                 cmovz   r12, rax
.text:0000000000009370                 lea     rax, raw_comparator
.text:0000000000009377                 test    rcx, rcx
.text:000000000000937A                 cmovz   r13, rax
.text:000000000000937E                 call    _malloc
.text:0000000000009383                 test    rax, rax
.text:0000000000009386                 mov     rbx, rax
.text:0000000000009389                 jz      loc_943A
.text:000000000000938F                 test    r15, r15
.text:0000000000009392                 lea     rdi, [rax+28h]
.text:0000000000009396                 jz      loc_9450
.text:000000000000939C                 mov     [rax+28h], r15
.text:00000000000093A0                 call    check_tuning
.text:00000000000093A5                 test    al, al
.text:00000000000093A7                 jz      loc_9430
.text:00000000000093AD                 cmp     byte ptr [r15+10h], 0
.text:00000000000093B2                 jz      loc_94B0
.text:00000000000093B8
.text:00000000000093B8 loc_93B8:                               ; CODE XREF: hash_initialize+16A↓j
.text:00000000000093B8                                         ; hash_initialize+1A5↓j
.text:00000000000093B8                 mov     rdi, rbp
.text:00000000000093BB                 call    next_prime
.text:00000000000093C0                 mov     edx, 8
.text:00000000000093C5                 mov     rbp, rax
.text:00000000000093C8                 xor     ecx, ecx
.text:00000000000093CA                 mov     rax, rdx
.text:00000000000093CD                 mul     rbp
.text:00000000000093D0                 jo      loc_94EA
.text:00000000000093D6
.text:00000000000093D6 loc_93D6:                               ; CODE XREF: hash_initialize+1AF↓j
.text:00000000000093D6                 test    rax, rax
.text:00000000000093D9                 js      short loc_9430
.text:00000000000093DB                 test    rcx, rcx
.text:00000000000093DE                 jnz     short loc_9430
.text:00000000000093E0                 test    rbp, rbp
.text:00000000000093E3                 mov     [rbx+10h], rbp
.text:00000000000093E7                 jz      short loc_9430
.text:00000000000093E9                 mov     esi, 10h        ; size
.text:00000000000093EE                 mov     rdi, rbp        ; nmemb
.text:00000000000093F1                 call    _calloc
.text:00000000000093F6                 test    rax, rax
.text:00000000000093F9                 mov     [rbx], rax
.text:00000000000093FC                 jz      short loc_9430
.text:00000000000093FE                 shl     rbp, 4
.text:0000000000009402                 mov     qword ptr [rbx+18h], 0
.text:000000000000940A                 mov     qword ptr [rbx+20h], 0
.text:0000000000009412                 add     rbp, rax
.text:0000000000009415                 mov     [rbx+30h], r12
.text:0000000000009419                 mov     [rbx+38h], r13
.text:000000000000941D                 mov     [rbx+8], rbp
.text:0000000000009421                 mov     [rbx+40h], r14
.text:0000000000009425                 mov     qword ptr [rbx+48h], 0
.text:000000000000942D                 jmp     short loc_943A
.text:000000000000942D ; ---------------------------------------------------------------------------
.text:000000000000942F                 align 10h
.text:0000000000009430
.text:0000000000009430 loc_9430:                               ; CODE XREF: hash_initialize+67↑j
.text:0000000000009430                                         ; hash_initialize+99↑j ...
.text:0000000000009430                 mov     rdi, rbx        ; ptr
.text:0000000000009433                 xor     ebx, ebx
.text:0000000000009435                 call    free
.text:000000000000943A
.text:000000000000943A loc_943A:                               ; CODE XREF: hash_initialize+49↑j
.text:000000000000943A                                         ; hash_initialize+ED↑j
.text:000000000000943A                 add     rsp, 8
.text:000000000000943E                 mov     rax, rbx
.text:0000000000009441                 pop     rbx
.text:0000000000009442                 pop     rbp
.text:0000000000009443                 pop     r12
.text:0000000000009445                 pop     r13
.text:0000000000009447                 pop     r14
.text:0000000000009449                 pop     r15
.text:000000000000944B                 retn
.text:000000000000944B ; ---------------------------------------------------------------------------
.text:000000000000944C                 align 10h
.text:0000000000009450
.text:0000000000009450 loc_9450:                               ; CODE XREF: hash_initialize+56↑j
.text:0000000000009450                 lea     rax, default_tuning
.text:0000000000009457                 mov     [rbx+28h], rax
.text:000000000000945B                 call    check_tuning
.text:0000000000009460                 test    al, al
.text:0000000000009462                 movss   xmm1, cs:dword_BD08
.text:000000000000946A                 jz      short loc_9430
.text:000000000000946C                 test    rbp, rbp
.text:000000000000946F                 js      short loc_94BB
.text:0000000000009471
.text:0000000000009471 loc_9471:                               ; CODE XREF: hash_initialize+179↓j
.text:0000000000009471                 pxor    xmm0, xmm0
.text:0000000000009475                 cvtsi2ss xmm0, rbp
.text:000000000000947A
.text:000000000000947A loc_947A:                               ; CODE XREF: hash_initialize+194↓j
.text:000000000000947A                 divss   xmm0, xmm1
.text:000000000000947E                 ucomiss xmm0, cs:dword_BD0C
.text:0000000000009485                 jnb     short loc_9430
.text:0000000000009487                 ucomiss xmm0, cs:dword_BD10
.text:000000000000948E                 jb      short loc_94E0
.text:0000000000009490                 subss   xmm0, cs:dword_BD10
.text:0000000000009498                 mov     rax, 8000000000000000h
.text:00000000000094A2                 cvttss2si rbp, xmm0
.text:00000000000094A7                 xor     rbp, rax
.text:00000000000094AA                 jmp     loc_93B8
.text:00000000000094AA ; ---------------------------------------------------------------------------
.text:00000000000094AF                 align 10h
.text:00000000000094B0
.text:00000000000094B0 loc_94B0:                               ; CODE XREF: hash_initialize+72↑j
.text:00000000000094B0                 test    rbp, rbp
.text:00000000000094B3                 movss   xmm1, dword ptr [r15+8]
.text:00000000000094B9                 jns     short loc_9471
.text:00000000000094BB
.text:00000000000094BB loc_94BB:                               ; CODE XREF: hash_initialize+12F↑j
.text:00000000000094BB                 mov     rax, rbp
.text:00000000000094BE                 pxor    xmm0, xmm0
.text:00000000000094C2                 shr     rax, 1
.text:00000000000094C5                 and     ebp, 1
.text:00000000000094C8                 or      rax, rbp
.text:00000000000094CB                 cvtsi2ss xmm0, rax
.text:00000000000094D0                 addss   xmm0, xmm0
.text:00000000000094D4                 jmp     short loc_947A
.text:00000000000094D4 ; ---------------------------------------------------------------------------
.text:00000000000094D6                 align 20h
.text:00000000000094E0
.text:00000000000094E0 loc_94E0:                               ; CODE XREF: hash_initialize+14E↑j
.text:00000000000094E0                 cvttss2si rbp, xmm0
.text:00000000000094E5                 jmp     loc_93B8
.text:00000000000094EA ; ---------------------------------------------------------------------------
.text:00000000000094EA
.text:00000000000094EA loc_94EA:                               ; CODE XREF: hash_initialize+90↑j
.text:00000000000094EA                 mov     ecx, 1
.text:00000000000094EF                 jmp     loc_93D6
.text:00000000000094EF ; } // starts at 9340
.text:00000000000094EF hash_initialize endp
.text:00000000000094EF
.text:00000000000094EF ; ---------------------------------------------------------------------------
.text:00000000000094F4                 align 20h
.text:0000000000009500
.text:0000000000009500 ; =============== S U B R O U T I N E =======================================
.text:0000000000009500
.text:0000000000009500 ; Attributes: info_from_lumina
.text:0000000000009500
.text:0000000000009500 ; void __fastcall hash_clear(Hash_table *table)
.text:0000000000009500                 public hash_clear
.text:0000000000009500 hash_clear      proc near
.text:0000000000009500 ; __unwind {
.text:0000000000009500                 push    r12
.text:0000000000009502                 push    rbp
.text:0000000000009503                 mov     rbp, rdi
.text:0000000000009506                 push    rbx
.text:0000000000009507                 mov     r12, [rdi]
.text:000000000000950A                 cmp     r12, [rdi+8]
.text:000000000000950E                 jnb     short loc_957B
.text:0000000000009510
.text:0000000000009510 loc_9510:                               ; CODE XREF: hash_clear+79↓j
.text:0000000000009510                 cmp     qword ptr [r12], 0
.text:0000000000009515                 jz      short loc_9571
.text:0000000000009517                 mov     rbx, [r12+8]
.text:000000000000951C                 mov     rax, [rbp+40h]
.text:0000000000009520                 test    rbx, rbx
.text:0000000000009523                 jz      short loc_9555
.text:0000000000009525                 nop     dword ptr [rax]
.text:0000000000009528
.text:0000000000009528 loc_9528:                               ; CODE XREF: hash_clear+53↓j
.text:0000000000009528                 test    rax, rax
.text:000000000000952B                 jz      short loc_9536
.text:000000000000952D                 mov     rdi, [rbx]
.text:0000000000009530                 call    rax
.text:0000000000009532                 mov     rax, [rbp+40h]
.text:0000000000009536
.text:0000000000009536 loc_9536:                               ; CODE XREF: hash_clear+2B↑j
.text:0000000000009536                 mov     rdx, [rbx+8]
.text:000000000000953A                 mov     rcx, [rbp+48h]
.text:000000000000953E                 mov     qword ptr [rbx], 0
.text:0000000000009545                 test    rdx, rdx
.text:0000000000009548                 mov     [rbx+8], rcx
.text:000000000000954C                 mov     [rbp+48h], rbx
.text:0000000000009550                 mov     rbx, rdx
.text:0000000000009553                 jnz     short loc_9528
.text:0000000000009555
.text:0000000000009555 loc_9555:                               ; CODE XREF: hash_clear+23↑j
.text:0000000000009555                 test    rax, rax
.text:0000000000009558                 jz      short loc_9560
.text:000000000000955A                 mov     rdi, [r12]
.text:000000000000955E                 call    rax
.text:0000000000009560
.text:0000000000009560 loc_9560:                               ; CODE XREF: hash_clear+58↑j
.text:0000000000009560                 mov     qword ptr [r12], 0
.text:0000000000009568                 mov     qword ptr [r12+8], 0
.text:0000000000009571
.text:0000000000009571 loc_9571:                               ; CODE XREF: hash_clear+15↑j
.text:0000000000009571                 add     r12, 10h
.text:0000000000009575                 cmp     [rbp+8], r12
.text:0000000000009579                 ja      short loc_9510
.text:000000000000957B
.text:000000000000957B loc_957B:                               ; CODE XREF: hash_clear+E↑j
.text:000000000000957B                 mov     qword ptr [rbp+18h], 0
.text:0000000000009583                 mov     qword ptr [rbp+20h], 0
.text:000000000000958B                 pop     rbx
.text:000000000000958C                 pop     rbp
.text:000000000000958D                 pop     r12
.text:000000000000958F                 retn
.text:000000000000958F ; } // starts at 9500
.text:000000000000958F hash_clear      endp
.text:000000000000958F
.text:0000000000009590
.text:0000000000009590 ; =============== S U B R O U T I N E =======================================
.text:0000000000009590
.text:0000000000009590 ; Attributes: info_from_lumina
.text:0000000000009590
.text:0000000000009590 ; void __fastcall hash_free(Hash_table *table)
.text:0000000000009590                 public hash_free
.text:0000000000009590 hash_free       proc near               ; CODE XREF: rpl_fts_close+9A↑p
.text:0000000000009590                                         ; rpl_fts_close+B1↑p ...
.text:0000000000009590 ; __unwind {
.text:0000000000009590                 push    r12
.text:0000000000009592                 push    rbp
.text:0000000000009593                 mov     r12, rdi
.text:0000000000009596                 push    rbx
.text:0000000000009597                 cmp     qword ptr [rdi+40h], 0
.text:000000000000959C                 mov     rbp, [rdi]
.text:000000000000959F                 mov     rax, [rdi+8]
.text:00000000000095A3                 jz      short loc_95F3
.text:00000000000095A5                 cmp     qword ptr [rdi+20h], 0
.text:00000000000095AA                 jz      short loc_95F3
.text:00000000000095AC                 cmp     rbp, rax
.text:00000000000095AF                 jnb     short loc_962C
.text:00000000000095B1                 nop     dword ptr [rax+00000000h]
.text:00000000000095B8
.text:00000000000095B8 loc_95B8:                               ; CODE XREF: hash_free+5D↓j
.text:00000000000095B8                 mov     rdi, [rbp+0]
.text:00000000000095BC                 test    rdi, rdi
.text:00000000000095BF                 jz      short loc_95E6
.text:00000000000095C1                 mov     rbx, rbp
.text:00000000000095C4                 jmp     short loc_95D3
.text:00000000000095C4 ; ---------------------------------------------------------------------------
.text:00000000000095C6                 align 10h
.text:00000000000095D0
.text:00000000000095D0 loc_95D0:                               ; CODE XREF: hash_free+4F↓j
.text:00000000000095D0                 mov     rdi, [rbx]
.text:00000000000095D3
.text:00000000000095D3 loc_95D3:                               ; CODE XREF: hash_free+34↑j
.text:00000000000095D3                 call    qword ptr [r12+40h]
.text:00000000000095D8                 mov     rbx, [rbx+8]
.text:00000000000095DC                 test    rbx, rbx
.text:00000000000095DF                 jnz     short loc_95D0
.text:00000000000095E1                 mov     rax, [r12+8]
.text:00000000000095E6
.text:00000000000095E6 loc_95E6:                               ; CODE XREF: hash_free+2F↑j
.text:00000000000095E6                 add     rbp, 10h
.text:00000000000095EA                 cmp     rax, rbp
.text:00000000000095ED                 ja      short loc_95B8
.text:00000000000095EF                 mov     rbp, [r12]
.text:00000000000095F3
.text:00000000000095F3 loc_95F3:                               ; CODE XREF: hash_free+13↑j
.text:00000000000095F3                                         ; hash_free+1A↑j
.text:00000000000095F3                 cmp     rbp, rax
.text:00000000000095F6                 jnb     short loc_962C
.text:00000000000095F8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000009600
.text:0000000000009600 loc_9600:                               ; CODE XREF: hash_free+9A↓j
.text:0000000000009600                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000009604                 test    rdi, rdi
.text:0000000000009607                 jz      short loc_9621
.text:0000000000009609                 nop     dword ptr [rax+00000000h]
.text:0000000000009610
.text:0000000000009610 loc_9610:                               ; CODE XREF: hash_free+8F↓j
.text:0000000000009610                 mov     rbx, [rdi+8]
.text:0000000000009614                 call    free
.text:0000000000009619                 test    rbx, rbx
.text:000000000000961C                 mov     rdi, rbx
.text:000000000000961F                 jnz     short loc_9610
.text:0000000000009621
.text:0000000000009621 loc_9621:                               ; CODE XREF: hash_free+77↑j
.text:0000000000009621                 add     rbp, 10h
.text:0000000000009625                 cmp     [r12+8], rbp
.text:000000000000962A                 ja      short loc_9600
.text:000000000000962C
.text:000000000000962C loc_962C:                               ; CODE XREF: hash_free+1F↑j
.text:000000000000962C                                         ; hash_free+66↑j
.text:000000000000962C                 mov     rdi, [r12+48h]  ; ptr
.text:0000000000009631                 test    rdi, rdi
.text:0000000000009634                 jz      short loc_9651
.text:0000000000009636                 db      2Eh
.text:0000000000009636                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009640
.text:0000000000009640 loc_9640:                               ; CODE XREF: hash_free+BF↓j
.text:0000000000009640                 mov     rbx, [rdi+8]
.text:0000000000009644                 call    free
.text:0000000000009649                 test    rbx, rbx
.text:000000000000964C                 mov     rdi, rbx
.text:000000000000964F                 jnz     short loc_9640
.text:0000000000009651
.text:0000000000009651 loc_9651:                               ; CODE XREF: hash_free+A4↑j
.text:0000000000009651                 mov     rdi, [r12]      ; ptr
.text:0000000000009655                 call    free
.text:000000000000965A                 pop     rbx
.text:000000000000965B                 mov     rdi, r12        ; ptr
.text:000000000000965E                 pop     rbp
.text:000000000000965F                 pop     r12
.text:0000000000009661                 jmp     free
.text:0000000000009661 ; } // starts at 9590
.text:0000000000009661 hash_free       endp
.text:0000000000009661
.text:0000000000009661 ; ---------------------------------------------------------------------------
.text:0000000000009666                 align 10h
.text:0000000000009670
.text:0000000000009670 ; =============== S U B R O U T I N E =======================================
.text:0000000000009670
.text:0000000000009670 ; Attributes: info_from_lumina
.text:0000000000009670
.text:0000000000009670 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:0000000000009670                 public hash_rehash
.text:0000000000009670 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:0000000000009670                                         ; hash_delete+10F↓p
.text:0000000000009670
.text:0000000000009670 ptr             = qword ptr -78h
.text:0000000000009670 var_70          = qword ptr -70h
.text:0000000000009670 var_68          = qword ptr -68h
.text:0000000000009670 var_60          = qword ptr -60h
.text:0000000000009670 var_58          = qword ptr -58h
.text:0000000000009670 var_50          = qword ptr -50h
.text:0000000000009670 var_48          = qword ptr -48h
.text:0000000000009670 var_40          = qword ptr -40h
.text:0000000000009670 var_38          = qword ptr -38h
.text:0000000000009670 var_30          = qword ptr -30h
.text:0000000000009670 var_20          = qword ptr -20h
.text:0000000000009670
.text:0000000000009670 ; __unwind {
.text:0000000000009670                 push    r12
.text:0000000000009672                 push    rbp
.text:0000000000009673                 mov     rbp, rdi
.text:0000000000009676                 push    rbx
.text:0000000000009677                 sub     rsp, 60h
.text:000000000000967B                 mov     r12, [rdi+28h]
.text:000000000000967F                 mov     rax, fs:28h
.text:0000000000009688                 mov     [rsp+78h+var_20], rax
.text:000000000000968D                 xor     eax, eax
.text:000000000000968F                 cmp     byte ptr [r12+10h], 0
.text:0000000000009695                 jnz     short loc_96E8
.text:0000000000009697                 test    rsi, rsi
.text:000000000000969A                 js      loc_9818
.text:00000000000096A0                 pxor    xmm0, xmm0
.text:00000000000096A4                 cvtsi2ss xmm0, rsi
.text:00000000000096A9
.text:00000000000096A9 loc_96A9:                               ; CODE XREF: hash_rehash+1C1↓j
.text:00000000000096A9                 divss   xmm0, dword ptr [r12+8]
.text:00000000000096B0                 ucomiss xmm0, cs:dword_BD0C
.text:00000000000096B7                 jnb     loc_97F0
.text:00000000000096BD                 ucomiss xmm0, cs:dword_BD10
.text:00000000000096C4                 jb      loc_9840
.text:00000000000096CA                 subss   xmm0, cs:dword_BD10
.text:00000000000096D2                 mov     rax, 8000000000000000h
.text:00000000000096DC                 cvttss2si rsi, xmm0
.text:00000000000096E1                 xor     rsi, rax
.text:00000000000096E4                 nop     dword ptr [rax+00h]
.text:00000000000096E8
.text:00000000000096E8 loc_96E8:                               ; CODE XREF: hash_rehash+25↑j
.text:00000000000096E8                                         ; hash_rehash+1D5↓j
.text:00000000000096E8                 mov     rdi, rsi
.text:00000000000096EB                 call    next_prime
.text:00000000000096F0                 mov     edx, 8
.text:00000000000096F5                 mov     rbx, rax
.text:00000000000096F8                 xor     ecx, ecx
.text:00000000000096FA                 mov     rax, rdx
.text:00000000000096FD                 mul     rbx
.text:0000000000009700                 jo      loc_989F
.text:0000000000009706
.text:0000000000009706 loc_9706:                               ; CODE XREF: hash_rehash+234↓j
.text:0000000000009706                 test    rax, rax
.text:0000000000009709                 mov     eax, 1
.text:000000000000970E                 cmovs   rcx, rax
.text:0000000000009712                 test    rbx, rbx
.text:0000000000009715                 jz      loc_97F0
.text:000000000000971B                 and     ecx, 1
.text:000000000000971E                 jnz     loc_97F0
.text:0000000000009724                 cmp     [rbp+10h], rbx
.text:0000000000009728                 jz      loc_9850
.text:000000000000972E                 mov     esi, 10h        ; size
.text:0000000000009733                 mov     rdi, rbx        ; nmemb
.text:0000000000009736                 call    _calloc
.text:000000000000973B                 test    rax, rax
.text:000000000000973E                 mov     [rsp+78h+ptr], rax
.text:0000000000009742                 jz      loc_97F0
.text:0000000000009748                 mov     [rsp+78h+var_68], rbx
.text:000000000000974D                 shl     rbx, 4
.text:0000000000009751                 mov     [rsp+78h+var_50], r12
.text:0000000000009756                 add     rbx, rax
.text:0000000000009759                 mov     rax, [rbp+30h]
.text:000000000000975D                 mov     r12, rsp
.text:0000000000009760                 xor     edx, edx
.text:0000000000009762                 mov     rsi, rbp
.text:0000000000009765                 mov     rdi, r12
.text:0000000000009768                 mov     [rsp+78h+var_70], rbx
.text:000000000000976D                 mov     [rsp+78h+var_60], 0
.text:0000000000009776                 mov     [rsp+78h+var_48], rax
.text:000000000000977B                 mov     rax, [rbp+38h]
.text:000000000000977F                 mov     [rsp+78h+var_58], 0
.text:0000000000009788                 mov     [rsp+78h+var_40], rax
.text:000000000000978D                 mov     rax, [rbp+40h]
.text:0000000000009791                 mov     [rsp+78h+var_38], rax
.text:0000000000009796                 mov     rax, [rbp+48h]
.text:000000000000979A                 mov     [rsp+78h+var_30], rax
.text:000000000000979F                 call    transfer_entries
.text:00000000000097A4                 test    al, al
.text:00000000000097A6                 mov     ebx, eax
.text:00000000000097A8                 jnz     loc_9860
.text:00000000000097AE                 mov     rax, [rsp+78h+var_30]
.text:00000000000097B3                 mov     edx, 1
.text:00000000000097B8                 mov     rsi, r12
.text:00000000000097BB                 mov     rdi, rbp
.text:00000000000097BE                 mov     [rbp+48h], rax
.text:00000000000097C2                 call    transfer_entries
.text:00000000000097C7                 test    al, al
.text:00000000000097C9                 jz      loc_98A9
.text:00000000000097CF                 xor     edx, edx
.text:00000000000097D1                 mov     rsi, r12
.text:00000000000097D4                 mov     rdi, rbp
.text:00000000000097D7                 call    transfer_entries
.text:00000000000097DC                 test    al, al
.text:00000000000097DE                 jz      loc_98A9
.text:00000000000097E4                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:00000000000097E8                 call    free
.text:00000000000097ED                 jmp     short loc_97F2
.text:00000000000097ED ; ---------------------------------------------------------------------------
.text:00000000000097EF                 align 10h
.text:00000000000097F0
.text:00000000000097F0 loc_97F0:                               ; CODE XREF: hash_rehash+47↑j
.text:00000000000097F0                                         ; hash_rehash+A5↑j ...
.text:00000000000097F0                 xor     ebx, ebx
.text:00000000000097F2
.text:00000000000097F2 loc_97F2:                               ; CODE XREF: hash_rehash+17D↑j
.text:00000000000097F2                                         ; hash_rehash+1E5↓j ...
.text:00000000000097F2                 mov     rcx, [rsp+78h+var_20]
.text:00000000000097F7                 xor     rcx, fs:28h
.text:0000000000009800                 mov     eax, ebx
.text:0000000000009802                 jnz     loc_989A
.text:0000000000009808                 add     rsp, 60h
.text:000000000000980C                 pop     rbx
.text:000000000000980D                 pop     rbp
.text:000000000000980E                 pop     r12
.text:0000000000009810                 retn
.text:0000000000009810 ; ---------------------------------------------------------------------------
.text:0000000000009811                 align 8
.text:0000000000009818
.text:0000000000009818 loc_9818:                               ; CODE XREF: hash_rehash+2A↑j
.text:0000000000009818                 mov     rax, rsi
.text:000000000000981B                 pxor    xmm0, xmm0
.text:000000000000981F                 shr     rax, 1
.text:0000000000009822                 and     esi, 1
.text:0000000000009825                 or      rax, rsi
.text:0000000000009828                 cvtsi2ss xmm0, rax
.text:000000000000982D                 addss   xmm0, xmm0
.text:0000000000009831                 jmp     loc_96A9
.text:0000000000009831 ; ---------------------------------------------------------------------------
.text:0000000000009836                 align 20h
.text:0000000000009840
.text:0000000000009840 loc_9840:                               ; CODE XREF: hash_rehash+54↑j
.text:0000000000009840                 cvttss2si rsi, xmm0
.text:0000000000009845                 jmp     loc_96E8
.text:0000000000009845 ; ---------------------------------------------------------------------------
.text:000000000000984A                 align 10h
.text:0000000000009850
.text:0000000000009850 loc_9850:                               ; CODE XREF: hash_rehash+B8↑j
.text:0000000000009850                 mov     ebx, 1
.text:0000000000009855                 jmp     short loc_97F2
.text:0000000000009855 ; ---------------------------------------------------------------------------
.text:0000000000009857                 align 20h
.text:0000000000009860
.text:0000000000009860 loc_9860:                               ; CODE XREF: hash_rehash+138↑j
.text:0000000000009860                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000009864                 call    free
.text:0000000000009869                 mov     rax, [rsp+78h+ptr]
.text:000000000000986D                 mov     [rbp+0], rax
.text:0000000000009871                 mov     rax, [rsp+78h+var_70]
.text:0000000000009876                 mov     [rbp+8], rax
.text:000000000000987A                 mov     rax, [rsp+78h+var_68]
.text:000000000000987F                 mov     [rbp+10h], rax
.text:0000000000009883                 mov     rax, [rsp+78h+var_60]
.text:0000000000009888                 mov     [rbp+18h], rax
.text:000000000000988C                 mov     rax, [rsp+78h+var_30]
.text:0000000000009891                 mov     [rbp+48h], rax
.text:0000000000009895                 jmp     loc_97F2
.text:000000000000989A ; ---------------------------------------------------------------------------
.text:000000000000989A
.text:000000000000989A loc_989A:                               ; CODE XREF: hash_rehash+192↑j
.text:000000000000989A                 call    ___stack_chk_fail
.text:000000000000989F ; ---------------------------------------------------------------------------
.text:000000000000989F
.text:000000000000989F loc_989F:                               ; CODE XREF: hash_rehash+90↑j
.text:000000000000989F                 mov     ecx, 1
.text:00000000000098A4                 jmp     loc_9706
.text:00000000000098A9 ; ---------------------------------------------------------------------------
.text:00000000000098A9
.text:00000000000098A9 loc_98A9:                               ; CODE XREF: hash_rehash+159↑j
.text:00000000000098A9                                         ; hash_rehash+16E↑j
.text:00000000000098A9                 call    _abort
.text:00000000000098A9 ; } // starts at 9670
.text:00000000000098A9 hash_rehash     endp
.text:00000000000098A9
.text:00000000000098A9 ; ---------------------------------------------------------------------------
.text:00000000000098AE                 align 10h
.text:00000000000098B0
.text:00000000000098B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000098B0
.text:00000000000098B0 ; Attributes: info_from_lumina
.text:00000000000098B0
.text:00000000000098B0 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:00000000000098B0                 public hash_insert_if_absent
.text:00000000000098B0 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:00000000000098B0
.text:00000000000098B0 var_38          = qword ptr -38h
.text:00000000000098B0 var_30          = qword ptr -30h
.text:00000000000098B0
.text:00000000000098B0 ; __unwind {
.text:00000000000098B0                 push    r13
.text:00000000000098B2                 push    r12
.text:00000000000098B4                 push    rbp
.text:00000000000098B5                 push    rbx
.text:00000000000098B6                 sub     rsp, 18h
.text:00000000000098BA                 mov     rax, fs:28h
.text:00000000000098C3                 mov     [rsp+38h+var_30], rax
.text:00000000000098C8                 xor     eax, eax
.text:00000000000098CA                 test    rsi, rsi
.text:00000000000098CD                 jz      loc_9A8D
.text:00000000000098D3                 mov     r12, rsp
.text:00000000000098D6                 xor     ecx, ecx
.text:00000000000098D8                 mov     r13, rdx
.text:00000000000098DB                 mov     rdx, r12
.text:00000000000098DE                 mov     rbx, rdi
.text:00000000000098E1                 mov     rbp, rsi
.text:00000000000098E4                 call    hash_find_entry
.text:00000000000098E9                 test    rax, rax
.text:00000000000098EC                 mov     rdx, rax
.text:00000000000098EF                 jz      short loc_9920
.text:00000000000098F1                 xor     eax, eax
.text:00000000000098F3                 test    r13, r13
.text:00000000000098F6                 jz      short loc_98FC
.text:00000000000098F8                 mov     [r13+0], rdx
.text:00000000000098FC
.text:00000000000098FC loc_98FC:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:00000000000098FC                                         ; hash_insert_if_absent+E9↓j ...
.text:00000000000098FC                 mov     rcx, [rsp+38h+var_30]
.text:0000000000009901                 xor     rcx, fs:28h
.text:000000000000990A                 jnz     loc_9B2F
.text:0000000000009910                 add     rsp, 18h
.text:0000000000009914                 pop     rbx
.text:0000000000009915                 pop     rbp
.text:0000000000009916                 pop     r12
.text:0000000000009918                 pop     r13
.text:000000000000991A                 retn
.text:000000000000991A ; ---------------------------------------------------------------------------
.text:000000000000991B                 align 20h
.text:0000000000009920
.text:0000000000009920 loc_9920:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:0000000000009920                 mov     rax, [rbx+18h]
.text:0000000000009924                 test    rax, rax
.text:0000000000009927                 js      short loc_99A0
.text:0000000000009929                 pxor    xmm1, xmm1
.text:000000000000992D                 mov     rdx, [rbx+28h]
.text:0000000000009931                 cvtsi2ss xmm1, rax
.text:0000000000009936                 mov     rax, [rbx+10h]
.text:000000000000993A                 test    rax, rax
.text:000000000000993D                 js      loc_99CA
.text:0000000000009943
.text:0000000000009943 loc_9943:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:0000000000009943                 pxor    xmm0, xmm0
.text:0000000000009947                 cvtsi2ss xmm0, rax
.text:000000000000994C
.text:000000000000994C loc_994C:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:000000000000994C                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000009951                 ucomiss xmm1, xmm0
.text:0000000000009954                 ja      loc_99F0
.text:000000000000995A
.text:000000000000995A loc_995A:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:000000000000995A                                         ; hash_insert_if_absent+1D7↓j
.text:000000000000995A                 mov     r12, [rsp+38h+var_38]
.text:000000000000995E                 cmp     qword ptr [r12], 0
.text:0000000000009963                 jz      loc_9A98
.text:0000000000009969                 mov     rax, [rbx+48h]
.text:000000000000996D                 test    rax, rax
.text:0000000000009970                 jz      loc_9AB0
.text:0000000000009976                 mov     rdx, [rax+8]
.text:000000000000997A                 mov     [rbx+48h], rdx
.text:000000000000997E
.text:000000000000997E loc_997E:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:000000000000997E                 mov     rdx, [r12+8]
.text:0000000000009983                 mov     [rax], rbp
.text:0000000000009986                 mov     [rax+8], rdx
.text:000000000000998A                 mov     [r12+8], rax
.text:000000000000998F                 mov     eax, 1
.text:0000000000009994                 add     qword ptr [rbx+20h], 1
.text:0000000000009999                 jmp     loc_98FC
.text:0000000000009999 ; ---------------------------------------------------------------------------
.text:000000000000999E                 align 20h
.text:00000000000099A0
.text:00000000000099A0 loc_99A0:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:00000000000099A0                 mov     rdx, rax
.text:00000000000099A3                 pxor    xmm1, xmm1
.text:00000000000099A7                 and     eax, 1
.text:00000000000099AA                 shr     rdx, 1
.text:00000000000099AD                 or      rdx, rax
.text:00000000000099B0                 mov     rax, [rbx+10h]
.text:00000000000099B4                 cvtsi2ss xmm1, rdx
.text:00000000000099B9                 mov     rdx, [rbx+28h]
.text:00000000000099BD                 test    rax, rax
.text:00000000000099C0                 addss   xmm1, xmm1
.text:00000000000099C4                 jns     loc_9943
.text:00000000000099CA
.text:00000000000099CA loc_99CA:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:00000000000099CA                 mov     rcx, rax
.text:00000000000099CD                 pxor    xmm0, xmm0
.text:00000000000099D1                 shr     rcx, 1
.text:00000000000099D4                 and     eax, 1
.text:00000000000099D7                 or      rcx, rax
.text:00000000000099DA                 cvtsi2ss xmm0, rcx
.text:00000000000099DF                 addss   xmm0, xmm0
.text:00000000000099E3                 jmp     loc_994C
.text:00000000000099E3 ; ---------------------------------------------------------------------------
.text:00000000000099E8                 align 10h
.text:00000000000099F0
.text:00000000000099F0 loc_99F0:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:00000000000099F0                 lea     rdi, [rbx+28h]
.text:00000000000099F4                 call    check_tuning
.text:00000000000099F9                 mov     rax, [rbx+10h]
.text:00000000000099FD                 mov     rdx, [rbx+28h]
.text:0000000000009A01                 test    rax, rax
.text:0000000000009A04                 movss   xmm2, dword ptr [rdx+8]
.text:0000000000009A09                 js      loc_9AD0
.text:0000000000009A0F                 pxor    xmm0, xmm0
.text:0000000000009A13                 cvtsi2ss xmm0, rax
.text:0000000000009A18
.text:0000000000009A18 loc_9A18:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:0000000000009A18                 mov     rax, [rbx+18h]
.text:0000000000009A1C                 test    rax, rax
.text:0000000000009A1F                 js      loc_9AF0
.text:0000000000009A25                 pxor    xmm1, xmm1
.text:0000000000009A29                 cvtsi2ss xmm1, rax
.text:0000000000009A2E
.text:0000000000009A2E loc_9A2E:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:0000000000009A2E                 movaps  xmm3, xmm2
.text:0000000000009A31                 mulss   xmm3, xmm0
.text:0000000000009A35                 ucomiss xmm1, xmm3
.text:0000000000009A38                 jbe     loc_995A
.text:0000000000009A3E                 cmp     byte ptr [rdx+10h], 0
.text:0000000000009A42                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:0000000000009A47                 jnz     short loc_9A4D
.text:0000000000009A49                 mulss   xmm0, xmm2
.text:0000000000009A4D
.text:0000000000009A4D loc_9A4D:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:0000000000009A4D                 ucomiss xmm0, cs:dword_BD0C
.text:0000000000009A54                 jnb     short loc_9AC3
.text:0000000000009A56                 ucomiss xmm0, cs:dword_BD10
.text:0000000000009A5D                 jnb     loc_9B10
.text:0000000000009A63                 cvttss2si rsi, xmm0
.text:0000000000009A68
.text:0000000000009A68 loc_9A68:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:0000000000009A68                 mov     rdi, rbx
.text:0000000000009A6B                 call    hash_rehash
.text:0000000000009A70                 test    al, al
.text:0000000000009A72                 jz      short loc_9AC3
.text:0000000000009A74                 xor     ecx, ecx
.text:0000000000009A76                 mov     rdx, r12
.text:0000000000009A79                 mov     rsi, rbp
.text:0000000000009A7C                 mov     rdi, rbx
.text:0000000000009A7F                 call    hash_find_entry
.text:0000000000009A84                 test    rax, rax
.text:0000000000009A87                 jz      loc_995A
.text:0000000000009A8D
.text:0000000000009A8D loc_9A8D:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:0000000000009A8D                 call    _abort
.text:0000000000009A8D ; ---------------------------------------------------------------------------
.text:0000000000009A92                 align 8
.text:0000000000009A98
.text:0000000000009A98 loc_9A98:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:0000000000009A98                 mov     [r12], rbp
.text:0000000000009A9C                 mov     eax, 1
.text:0000000000009AA1                 add     qword ptr [rbx+20h], 1
.text:0000000000009AA6                 add     qword ptr [rbx+18h], 1
.text:0000000000009AAB                 jmp     loc_98FC
.text:0000000000009AB0 ; ---------------------------------------------------------------------------
.text:0000000000009AB0
.text:0000000000009AB0 loc_9AB0:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:0000000000009AB0                 mov     edi, 10h        ; size
.text:0000000000009AB5                 call    _malloc
.text:0000000000009ABA                 test    rax, rax
.text:0000000000009ABD                 jnz     loc_997E
.text:0000000000009AC3
.text:0000000000009AC3 loc_9AC3:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:0000000000009AC3                                         ; hash_insert_if_absent+1C2↑j
.text:0000000000009AC3                 mov     eax, 0FFFFFFFFh
.text:0000000000009AC8                 jmp     loc_98FC
.text:0000000000009AC8 ; ---------------------------------------------------------------------------
.text:0000000000009ACD                 align 10h
.text:0000000000009AD0
.text:0000000000009AD0 loc_9AD0:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:0000000000009AD0                 mov     rcx, rax
.text:0000000000009AD3                 pxor    xmm0, xmm0
.text:0000000000009AD7                 shr     rcx, 1
.text:0000000000009ADA                 and     eax, 1
.text:0000000000009ADD                 or      rcx, rax
.text:0000000000009AE0                 cvtsi2ss xmm0, rcx
.text:0000000000009AE5                 addss   xmm0, xmm0
.text:0000000000009AE9                 jmp     loc_9A18
.text:0000000000009AE9 ; ---------------------------------------------------------------------------
.text:0000000000009AEE                 align 10h
.text:0000000000009AF0
.text:0000000000009AF0 loc_9AF0:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:0000000000009AF0                 mov     rcx, rax
.text:0000000000009AF3                 pxor    xmm1, xmm1
.text:0000000000009AF7                 shr     rcx, 1
.text:0000000000009AFA                 and     eax, 1
.text:0000000000009AFD                 or      rcx, rax
.text:0000000000009B00                 cvtsi2ss xmm1, rcx
.text:0000000000009B05                 addss   xmm1, xmm1
.text:0000000000009B09                 jmp     loc_9A2E
.text:0000000000009B09 ; ---------------------------------------------------------------------------
.text:0000000000009B0E                 align 10h
.text:0000000000009B10
.text:0000000000009B10 loc_9B10:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:0000000000009B10                 subss   xmm0, cs:dword_BD10
.text:0000000000009B18                 mov     rax, 8000000000000000h
.text:0000000000009B22                 cvttss2si rsi, xmm0
.text:0000000000009B27                 xor     rsi, rax
.text:0000000000009B2A                 jmp     loc_9A68
.text:0000000000009B2F ; ---------------------------------------------------------------------------
.text:0000000000009B2F
.text:0000000000009B2F loc_9B2F:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:0000000000009B2F                 call    ___stack_chk_fail
.text:0000000000009B2F ; } // starts at 98B0
.text:0000000000009B2F hash_insert_if_absent endp
.text:0000000000009B2F
.text:0000000000009B2F ; ---------------------------------------------------------------------------
.text:0000000000009B34                 align 20h
.text:0000000000009B40
.text:0000000000009B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B40
.text:0000000000009B40 ; Attributes: info_from_lumina
.text:0000000000009B40
.text:0000000000009B40 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:0000000000009B40                 public hash_insert
.text:0000000000009B40 hash_insert     proc near               ; CODE XREF: filesystem_type+FF↑p
.text:0000000000009B40                                         ; enter_dir_isra_10+46↑p
.text:0000000000009B40
.text:0000000000009B40 var_18          = qword ptr -18h
.text:0000000000009B40 var_10          = qword ptr -10h
.text:0000000000009B40
.text:0000000000009B40 ; __unwind {
.text:0000000000009B40                 push    rbx
.text:0000000000009B41                 mov     rbx, rsi
.text:0000000000009B44                 sub     rsp, 10h
.text:0000000000009B48                 mov     rdx, rsp
.text:0000000000009B4B                 mov     rax, fs:28h
.text:0000000000009B54                 mov     [rsp+18h+var_10], rax
.text:0000000000009B59                 xor     eax, eax
.text:0000000000009B5B                 call    hash_insert_if_absent
.text:0000000000009B60                 cmp     eax, 0FFFFFFFFh
.text:0000000000009B63                 jz      short loc_9B90
.text:0000000000009B65                 test    eax, eax
.text:0000000000009B67                 jnz     short loc_9B6D
.text:0000000000009B69                 mov     rbx, [rsp+18h+var_18]
.text:0000000000009B6D
.text:0000000000009B6D loc_9B6D:                               ; CODE XREF: hash_insert+27↑j
.text:0000000000009B6D                                         ; hash_insert+52↓j
.text:0000000000009B6D                 mov     rcx, [rsp+18h+var_10]
.text:0000000000009B72                 xor     rcx, fs:28h
.text:0000000000009B7B                 mov     rax, rbx
.text:0000000000009B7E                 jnz     short loc_9B94
.text:0000000000009B80                 add     rsp, 10h
.text:0000000000009B84                 pop     rbx
.text:0000000000009B85                 retn
.text:0000000000009B85 ; ---------------------------------------------------------------------------
.text:0000000000009B86                 align 10h
.text:0000000000009B90
.text:0000000000009B90 loc_9B90:                               ; CODE XREF: hash_insert+23↑j
.text:0000000000009B90                 xor     ebx, ebx
.text:0000000000009B92                 jmp     short loc_9B6D
.text:0000000000009B94 ; ---------------------------------------------------------------------------
.text:0000000000009B94
.text:0000000000009B94 loc_9B94:                               ; CODE XREF: hash_insert+3E↑j
.text:0000000000009B94                 call    ___stack_chk_fail
.text:0000000000009B94 ; } // starts at 9B40
.text:0000000000009B94 hash_insert     endp
.text:0000000000009B94
.text:0000000000009B94 ; ---------------------------------------------------------------------------
.text:0000000000009B99                 align 20h
.text:0000000000009BA0
.text:0000000000009BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BA0
.text:0000000000009BA0 ; Attributes: info_from_lumina
.text:0000000000009BA0
.text:0000000000009BA0 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:0000000000009BA0                 public hash_delete
.text:0000000000009BA0 hash_delete     proc near               ; CODE XREF: leave_dir_isra_12+7A↑p
.text:0000000000009BA0
.text:0000000000009BA0 var_28          = qword ptr -28h
.text:0000000000009BA0 var_20          = qword ptr -20h
.text:0000000000009BA0
.text:0000000000009BA0 ; __unwind {
.text:0000000000009BA0                 push    r12
.text:0000000000009BA2                 push    rbp
.text:0000000000009BA3                 mov     ecx, 1
.text:0000000000009BA8                 push    rbx
.text:0000000000009BA9                 mov     rbx, rdi
.text:0000000000009BAC                 sub     rsp, 10h
.text:0000000000009BB0                 mov     rdx, rsp
.text:0000000000009BB3                 mov     rax, fs:28h
.text:0000000000009BBC                 mov     [rsp+28h+var_20], rax
.text:0000000000009BC1                 xor     eax, eax
.text:0000000000009BC3                 call    hash_find_entry
.text:0000000000009BC8                 test    rax, rax
.text:0000000000009BCB                 mov     rbp, rax
.text:0000000000009BCE                 jz      short loc_9BDF
.text:0000000000009BD0                 mov     rax, [rsp+28h+var_28]
.text:0000000000009BD4                 sub     qword ptr [rbx+20h], 1
.text:0000000000009BD9                 cmp     qword ptr [rax], 0
.text:0000000000009BDD                 jz      short loc_9C00
.text:0000000000009BDF
.text:0000000000009BDF loc_9BDF:                               ; CODE XREF: hash_delete+2E↑j
.text:0000000000009BDF                                         ; hash_delete+9F↓j ...
.text:0000000000009BDF                 mov     rcx, [rsp+28h+var_20]
.text:0000000000009BE4                 xor     rcx, fs:28h
.text:0000000000009BED                 mov     rax, rbp
.text:0000000000009BF0                 jnz     loc_9D9E
.text:0000000000009BF6                 add     rsp, 10h
.text:0000000000009BFA                 pop     rbx
.text:0000000000009BFB                 pop     rbp
.text:0000000000009BFC                 pop     r12
.text:0000000000009BFE                 retn
.text:0000000000009BFE ; ---------------------------------------------------------------------------
.text:0000000000009BFF                 align 20h
.text:0000000000009C00
.text:0000000000009C00 loc_9C00:                               ; CODE XREF: hash_delete+3D↑j
.text:0000000000009C00                 mov     rax, [rbx+18h]
.text:0000000000009C04                 sub     rax, 1
.text:0000000000009C08                 test    rax, rax
.text:0000000000009C0B                 mov     [rbx+18h], rax
.text:0000000000009C0F                 js      loc_9D10
.text:0000000000009C15                 pxor    xmm0, xmm0
.text:0000000000009C19                 cvtsi2ss xmm0, rax
.text:0000000000009C1E
.text:0000000000009C1E loc_9C1E:                               ; CODE XREF: hash_delete+189↓j
.text:0000000000009C1E                 mov     rax, [rbx+10h]
.text:0000000000009C22                 mov     rdx, [rbx+28h]
.text:0000000000009C26                 test    rax, rax
.text:0000000000009C29                 js      loc_9CF0
.text:0000000000009C2F                 pxor    xmm1, xmm1
.text:0000000000009C33                 cvtsi2ss xmm1, rax
.text:0000000000009C38
.text:0000000000009C38 loc_9C38:                               ; CODE XREF: hash_delete+169↓j
.text:0000000000009C38                 mulss   xmm1, dword ptr [rdx]
.text:0000000000009C3C                 ucomiss xmm1, xmm0
.text:0000000000009C3F                 jbe     short loc_9BDF
.text:0000000000009C41                 lea     rdi, [rbx+28h]
.text:0000000000009C45                 call    check_tuning
.text:0000000000009C4A                 mov     rax, [rbx+10h]
.text:0000000000009C4E                 mov     rdx, [rbx+28h]
.text:0000000000009C52                 test    rax, rax
.text:0000000000009C55                 js      loc_9D80
.text:0000000000009C5B                 pxor    xmm0, xmm0
.text:0000000000009C5F                 cvtsi2ss xmm0, rax
.text:0000000000009C64
.text:0000000000009C64 loc_9C64:                               ; CODE XREF: hash_delete+1F9↓j
.text:0000000000009C64                 mov     rax, [rbx+18h]
.text:0000000000009C68                 test    rax, rax
.text:0000000000009C6B                 js      loc_9D60
.text:0000000000009C71                 pxor    xmm1, xmm1
.text:0000000000009C75                 cvtsi2ss xmm1, rax
.text:0000000000009C7A
.text:0000000000009C7A loc_9C7A:                               ; CODE XREF: hash_delete+1D9↓j
.text:0000000000009C7A                 movss   xmm2, dword ptr [rdx]
.text:0000000000009C7E                 mulss   xmm2, xmm0
.text:0000000000009C82                 ucomiss xmm2, xmm1
.text:0000000000009C85                 jbe     loc_9BDF
.text:0000000000009C8B                 cmp     byte ptr [rdx+10h], 0
.text:0000000000009C8F                 mulss   xmm0, dword ptr [rdx+4]
.text:0000000000009C94                 jz      loc_9D50
.text:0000000000009C9A
.text:0000000000009C9A loc_9C9A:                               ; CODE XREF: hash_delete+1B5↓j
.text:0000000000009C9A                 ucomiss xmm0, cs:dword_BD10
.text:0000000000009CA1                 jnb     loc_9D30
.text:0000000000009CA7                 cvttss2si rsi, xmm0
.text:0000000000009CAC
.text:0000000000009CAC loc_9CAC:                               ; CODE XREF: hash_delete+1AA↓j
.text:0000000000009CAC                 mov     rdi, rbx
.text:0000000000009CAF                 call    hash_rehash
.text:0000000000009CB4                 test    al, al
.text:0000000000009CB6                 jnz     loc_9BDF
.text:0000000000009CBC                 mov     rdi, [rbx+48h]  ; ptr
.text:0000000000009CC0                 test    rdi, rdi
.text:0000000000009CC3                 jz      short loc_9CD9
.text:0000000000009CC5                 nop     dword ptr [rax]
.text:0000000000009CC8
.text:0000000000009CC8 loc_9CC8:                               ; CODE XREF: hash_delete+137↓j
.text:0000000000009CC8                 mov     r12, [rdi+8]
.text:0000000000009CCC                 call    free
.text:0000000000009CD1                 test    r12, r12
.text:0000000000009CD4                 mov     rdi, r12
.text:0000000000009CD7                 jnz     short loc_9CC8
.text:0000000000009CD9
.text:0000000000009CD9 loc_9CD9:                               ; CODE XREF: hash_delete+123↑j
.text:0000000000009CD9                 mov     qword ptr [rbx+48h], 0
.text:0000000000009CE1                 jmp     loc_9BDF
.text:0000000000009CE1 ; ---------------------------------------------------------------------------
.text:0000000000009CE6                 align 10h
.text:0000000000009CF0
.text:0000000000009CF0 loc_9CF0:                               ; CODE XREF: hash_delete+89↑j
.text:0000000000009CF0                 mov     rcx, rax
.text:0000000000009CF3                 pxor    xmm1, xmm1
.text:0000000000009CF7                 shr     rcx, 1
.text:0000000000009CFA                 and     eax, 1
.text:0000000000009CFD                 or      rcx, rax
.text:0000000000009D00                 cvtsi2ss xmm1, rcx
.text:0000000000009D05                 addss   xmm1, xmm1
.text:0000000000009D09                 jmp     loc_9C38
.text:0000000000009D09 ; ---------------------------------------------------------------------------
.text:0000000000009D0E                 align 10h
.text:0000000000009D10
.text:0000000000009D10 loc_9D10:                               ; CODE XREF: hash_delete+6F↑j
.text:0000000000009D10                 mov     rdx, rax
.text:0000000000009D13                 pxor    xmm0, xmm0
.text:0000000000009D17                 shr     rdx, 1
.text:0000000000009D1A                 and     eax, 1
.text:0000000000009D1D                 or      rdx, rax
.text:0000000000009D20                 cvtsi2ss xmm0, rdx
.text:0000000000009D25                 addss   xmm0, xmm0
.text:0000000000009D29                 jmp     loc_9C1E
.text:0000000000009D29 ; ---------------------------------------------------------------------------
.text:0000000000009D2E                 align 10h
.text:0000000000009D30
.text:0000000000009D30 loc_9D30:                               ; CODE XREF: hash_delete+101↑j
.text:0000000000009D30                 subss   xmm0, cs:dword_BD10
.text:0000000000009D38                 mov     rax, 8000000000000000h
.text:0000000000009D42                 cvttss2si rsi, xmm0
.text:0000000000009D47                 xor     rsi, rax
.text:0000000000009D4A                 jmp     loc_9CAC
.text:0000000000009D4A ; ---------------------------------------------------------------------------
.text:0000000000009D4F                 align 10h
.text:0000000000009D50
.text:0000000000009D50 loc_9D50:                               ; CODE XREF: hash_delete+F4↑j
.text:0000000000009D50                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000009D55                 jmp     loc_9C9A
.text:0000000000009D55 ; ---------------------------------------------------------------------------
.text:0000000000009D5A                 align 20h
.text:0000000000009D60
.text:0000000000009D60 loc_9D60:                               ; CODE XREF: hash_delete+CB↑j
.text:0000000000009D60                 mov     rcx, rax
.text:0000000000009D63                 pxor    xmm1, xmm1
.text:0000000000009D67                 shr     rcx, 1
.text:0000000000009D6A                 and     eax, 1
.text:0000000000009D6D                 or      rcx, rax
.text:0000000000009D70                 cvtsi2ss xmm1, rcx
.text:0000000000009D75                 addss   xmm1, xmm1
.text:0000000000009D79                 jmp     loc_9C7A
.text:0000000000009D79 ; ---------------------------------------------------------------------------
.text:0000000000009D7E                 align 20h
.text:0000000000009D80
.text:0000000000009D80 loc_9D80:                               ; CODE XREF: hash_delete+B5↑j
.text:0000000000009D80                 mov     rcx, rax
.text:0000000000009D83                 pxor    xmm0, xmm0
.text:0000000000009D87                 shr     rcx, 1
.text:0000000000009D8A                 and     eax, 1
.text:0000000000009D8D                 or      rcx, rax
.text:0000000000009D90                 cvtsi2ss xmm0, rcx
.text:0000000000009D95                 addss   xmm0, xmm0
.text:0000000000009D99                 jmp     loc_9C64
.text:0000000000009D9E ; ---------------------------------------------------------------------------
.text:0000000000009D9E
.text:0000000000009D9E loc_9D9E:                               ; CODE XREF: hash_delete+50↑j
.text:0000000000009D9E                 call    ___stack_chk_fail
.text:0000000000009D9E ; } // starts at 9BA0
.text:0000000000009D9E hash_delete     endp
.text:0000000000009D9E
.text:0000000000009D9E ; ---------------------------------------------------------------------------
.text:0000000000009DA3                 align 10h
.text:0000000000009DB0
.text:0000000000009DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DB0
.text:0000000000009DB0
.text:0000000000009DB0                 public i_ring_init
.text:0000000000009DB0 i_ring_init     proc near               ; CODE XREF: rpl_fts_open+2A9↑p
.text:0000000000009DB0 ; __unwind {
.text:0000000000009DB0                 mov     byte ptr [rdi+1Ch], 1
.text:0000000000009DB4                 mov     qword ptr [rdi+14h], 0
.text:0000000000009DBC                 mov     [rdi], esi
.text:0000000000009DBE                 mov     [rdi+4], esi
.text:0000000000009DC1                 mov     [rdi+8], esi
.text:0000000000009DC4                 mov     [rdi+0Ch], esi
.text:0000000000009DC7                 mov     [rdi+10h], esi
.text:0000000000009DCA                 retn
.text:0000000000009DCA ; } // starts at 9DB0
.text:0000000000009DCA i_ring_init     endp
.text:0000000000009DCA
.text:0000000000009DCA ; ---------------------------------------------------------------------------
.text:0000000000009DCB                 align 10h
.text:0000000000009DD0
.text:0000000000009DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DD0
.text:0000000000009DD0
.text:0000000000009DD0                 public i_ring_empty
.text:0000000000009DD0 i_ring_empty    proc near               ; CODE XREF: fd_ring_clear+1F↑p
.text:0000000000009DD0                                         ; fts_safe_changedir+1C7↑p
.text:0000000000009DD0 ; __unwind {
.text:0000000000009DD0                 movzx   eax, byte ptr [rdi+1Ch]
.text:0000000000009DD4                 retn
.text:0000000000009DD4 ; } // starts at 9DD0
.text:0000000000009DD4 i_ring_empty    endp
.text:0000000000009DD4
.text:0000000000009DD4 ; ---------------------------------------------------------------------------
.text:0000000000009DD5                 align 20h
.text:0000000000009DE0
.text:0000000000009DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DE0
.text:0000000000009DE0
.text:0000000000009DE0                 public i_ring_push
.text:0000000000009DE0 i_ring_push     proc near               ; CODE XREF: cwd_advance_fd+34↑p
.text:0000000000009DE0 ; __unwind {
.text:0000000000009DE0                 movzx   edx, byte ptr [rdi+1Ch]
.text:0000000000009DE4                 mov     ecx, [rdi+14h]
.text:0000000000009DE7                 xor     edx, 1
.text:0000000000009DEA                 movzx   edx, dl
.text:0000000000009DED                 add     ecx, edx
.text:0000000000009DEF                 and     ecx, 3
.text:0000000000009DF2                 mov     eax, ecx
.text:0000000000009DF4                 lea     r8, [rdi+rax*4]
.text:0000000000009DF8                 mov     eax, [r8]
.text:0000000000009DFB                 mov     [r8], esi
.text:0000000000009DFE                 mov     esi, [rdi+18h]
.text:0000000000009E01                 mov     [rdi+14h], ecx
.text:0000000000009E04                 cmp     esi, ecx
.text:0000000000009E06                 jnz     short loc_9E10
.text:0000000000009E08                 add     edx, esi
.text:0000000000009E0A                 and     edx, 3
.text:0000000000009E0D                 mov     [rdi+18h], edx
.text:0000000000009E10
.text:0000000000009E10 loc_9E10:                               ; CODE XREF: i_ring_push+26↑j
.text:0000000000009E10                 mov     byte ptr [rdi+1Ch], 0
.text:0000000000009E14                 retn
.text:0000000000009E14 ; } // starts at 9DE0
.text:0000000000009E14 i_ring_push     endp
.text:0000000000009E14
.text:0000000000009E14 ; ---------------------------------------------------------------------------
.text:0000000000009E15                 align 20h
.text:0000000000009E20
.text:0000000000009E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E20
.text:0000000000009E20
.text:0000000000009E20                 public i_ring_pop
.text:0000000000009E20 i_ring_pop      proc near               ; CODE XREF: fd_ring_clear+13↑p
.text:0000000000009E20                                         ; fts_safe_changedir+1DB↑p
.text:0000000000009E20 ; __unwind {
.text:0000000000009E20                 cmp     byte ptr [rdi+1Ch], 0
.text:0000000000009E24                 jnz     short loc_9E55
.text:0000000000009E26                 mov     eax, [rdi+14h]
.text:0000000000009E29                 mov     esi, [rdi+10h]
.text:0000000000009E2C                 lea     rcx, [rdi+rax*4]
.text:0000000000009E30                 mov     rdx, rax
.text:0000000000009E33                 mov     eax, [rcx]
.text:0000000000009E35                 mov     [rcx], esi
.text:0000000000009E37                 cmp     edx, [rdi+18h]
.text:0000000000009E3A                 jz      short loc_9E50
.text:0000000000009E3C                 add     edx, 3
.text:0000000000009E3F                 and     edx, 3
.text:0000000000009E42                 mov     [rdi+14h], edx
.text:0000000000009E45                 retn
.text:0000000000009E45 ; ---------------------------------------------------------------------------
.text:0000000000009E46                 align 10h
.text:0000000000009E50
.text:0000000000009E50 loc_9E50:                               ; CODE XREF: i_ring_pop+1A↑j
.text:0000000000009E50                 mov     byte ptr [rdi+1Ch], 1
.text:0000000000009E54                 retn
.text:0000000000009E55 ; ---------------------------------------------------------------------------
.text:0000000000009E55
.text:0000000000009E55 loc_9E55:                               ; CODE XREF: i_ring_pop+4↑j
.text:0000000000009E55                 sub     rsp, 8
.text:0000000000009E59                 call    _abort
.text:0000000000009E59 ; } // starts at 9E20
.text:0000000000009E59 i_ring_pop      endp
.text:0000000000009E59
.text:0000000000009E59 ; ---------------------------------------------------------------------------
.text:0000000000009E5E                 align 20h
.text:0000000000009E60
.text:0000000000009E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E60
.text:0000000000009E60
.text:0000000000009E60                 public locale_charset
.text:0000000000009E60 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000009E60 ; __unwind {
.text:0000000000009E60                 sub     rsp, 8
.text:0000000000009E64                 mov     edi, 0Eh        ; item
.text:0000000000009E69                 call    _nl_langinfo
.text:0000000000009E6E                 test    rax, rax
.text:0000000000009E71                 jz      short loc_9E90
.text:0000000000009E73                 cmp     byte ptr [rax], 0
.text:0000000000009E76                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000009E7D                 cmovz   rax, rdx
.text:0000000000009E81                 add     rsp, 8
.text:0000000000009E85                 retn
.text:0000000000009E85 ; ---------------------------------------------------------------------------
.text:0000000000009E86                 align 10h
.text:0000000000009E90
.text:0000000000009E90 loc_9E90:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000009E90                 lea     rax, aAscii     ; "ASCII"
.text:0000000000009E97                 add     rsp, 8
.text:0000000000009E9B                 retn
.text:0000000000009E9B ; } // starts at 9E60
.text:0000000000009E9B locale_charset  endp
.text:0000000000009E9B
.text:0000000000009E9B ; ---------------------------------------------------------------------------
.text:0000000000009E9C                 align 20h
.text:0000000000009EA0
.text:0000000000009EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EA0
.text:0000000000009EA0
.text:0000000000009EA0                 public openat_safer
.text:0000000000009EA0 openat_safer    proc near               ; CODE XREF: diropen_isra_6+35↑j
.text:0000000000009EA0                                         ; opendirat+15↓p
.text:0000000000009EA0
.text:0000000000009EA0 var_58          = dword ptr -58h
.text:0000000000009EA0 var_50          = qword ptr -50h
.text:0000000000009EA0 var_48          = qword ptr -48h
.text:0000000000009EA0 var_40          = qword ptr -40h
.text:0000000000009EA0 var_38          = byte ptr -38h
.text:0000000000009EA0 var_20          = qword ptr -20h
.text:0000000000009EA0 arg_0           = byte ptr  8
.text:0000000000009EA0
.text:0000000000009EA0 ; __unwind {
.text:0000000000009EA0                 sub     rsp, 58h
.text:0000000000009EA4                 mov     [rsp+58h+var_20], rcx
.text:0000000000009EA9                 xor     ecx, ecx
.text:0000000000009EAB                 mov     rax, fs:28h
.text:0000000000009EB4                 mov     [rsp+58h+var_40], rax
.text:0000000000009EB9                 xor     eax, eax
.text:0000000000009EBB                 test    dl, 40h
.text:0000000000009EBE                 jnz     short loc_9EE8
.text:0000000000009EC0
.text:0000000000009EC0 loc_9EC0:                               ; CODE XREF: openat_safer+67↓j
.text:0000000000009EC0                 xor     eax, eax
.text:0000000000009EC2                 call    _openat
.text:0000000000009EC7                 mov     edi, eax        ; fd
.text:0000000000009EC9                 call    fd_safer_flag
.text:0000000000009ECE                 mov     rsi, [rsp+58h+var_40]
.text:0000000000009ED3                 xor     rsi, fs:28h
.text:0000000000009EDC                 jnz     short loc_9F09
.text:0000000000009EDE                 add     rsp, 58h
.text:0000000000009EE2                 retn
.text:0000000000009EE2 ; ---------------------------------------------------------------------------
.text:0000000000009EE3                 align 8
.text:0000000000009EE8
.text:0000000000009EE8 loc_9EE8:                               ; CODE XREF: openat_safer+1E↑j
.text:0000000000009EE8                 lea     rax, [rsp+58h+arg_0]
.text:0000000000009EED                 mov     [rsp+58h+var_58], 18h
.text:0000000000009EF4                 mov     ecx, dword ptr [rsp+58h+var_20]
.text:0000000000009EF8                 mov     [rsp+58h+var_50], rax
.text:0000000000009EFD                 lea     rax, [rsp+58h+var_38]
.text:0000000000009F02                 mov     [rsp+58h+var_48], rax
.text:0000000000009F07                 jmp     short loc_9EC0
.text:0000000000009F09 ; ---------------------------------------------------------------------------
.text:0000000000009F09
.text:0000000000009F09 loc_9F09:                               ; CODE XREF: openat_safer+3C↑j
.text:0000000000009F09                 call    ___stack_chk_fail
.text:0000000000009F09 ; } // starts at 9EA0
.text:0000000000009F09 openat_safer    endp
.text:0000000000009F09
.text:0000000000009F09 ; ---------------------------------------------------------------------------
.text:0000000000009F0E                 align 10h
.text:0000000000009F10
.text:0000000000009F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F10
.text:0000000000009F10
.text:0000000000009F10                 public opendirat
.text:0000000000009F10 opendirat       proc near               ; CODE XREF: fts_build+4A5↑p
.text:0000000000009F10 ; __unwind {
.text:0000000000009F10                 push    r13
.text:0000000000009F12                 push    r12
.text:0000000000009F14                 or      edx, 90900h
.text:0000000000009F1A                 push    rbp
.text:0000000000009F1B                 push    rbx
.text:0000000000009F1C                 xor     eax, eax
.text:0000000000009F1E                 mov     r12, rcx
.text:0000000000009F21                 sub     rsp, 8
.text:0000000000009F25                 call    openat_safer
.text:0000000000009F2A                 test    eax, eax
.text:0000000000009F2C                 js      short loc_9F80
.text:0000000000009F2E                 mov     edi, eax        ; fd
.text:0000000000009F30                 mov     ebx, eax
.text:0000000000009F32                 call    _fdopendir
.text:0000000000009F37                 test    rax, rax
.text:0000000000009F3A                 mov     rbp, rax
.text:0000000000009F3D                 jz      short loc_9F58
.text:0000000000009F3F                 mov     [r12], ebx
.text:0000000000009F43                 add     rsp, 8
.text:0000000000009F47                 mov     rax, rbp
.text:0000000000009F4A                 pop     rbx
.text:0000000000009F4B                 pop     rbp
.text:0000000000009F4C                 pop     r12
.text:0000000000009F4E                 pop     r13
.text:0000000000009F50                 retn
.text:0000000000009F50 ; ---------------------------------------------------------------------------
.text:0000000000009F51                 align 8
.text:0000000000009F58
.text:0000000000009F58 loc_9F58:                               ; CODE XREF: opendirat+2D↑j
.text:0000000000009F58                 call    ___errno_location
.text:0000000000009F5D                 mov     r13d, [rax]
.text:0000000000009F60                 mov     r12, rax
.text:0000000000009F63                 mov     edi, ebx        ; fd
.text:0000000000009F65                 call    _close
.text:0000000000009F6A                 mov     rax, rbp
.text:0000000000009F6D                 mov     [r12], r13d
.text:0000000000009F71                 add     rsp, 8
.text:0000000000009F75                 pop     rbx
.text:0000000000009F76                 pop     rbp
.text:0000000000009F77                 pop     r12
.text:0000000000009F79                 pop     r13
.text:0000000000009F7B                 retn
.text:0000000000009F7B ; ---------------------------------------------------------------------------
.text:0000000000009F7C                 align 20h
.text:0000000000009F80
.text:0000000000009F80 loc_9F80:                               ; CODE XREF: opendirat+1C↑j
.text:0000000000009F80                 add     rsp, 8
.text:0000000000009F84                 xor     ebp, ebp
.text:0000000000009F86                 pop     rbx
.text:0000000000009F87                 mov     rax, rbp
.text:0000000000009F8A                 pop     rbp
.text:0000000000009F8B                 pop     r12
.text:0000000000009F8D                 pop     r13
.text:0000000000009F8F                 retn
.text:0000000000009F8F ; } // starts at 9F10
.text:0000000000009F8F opendirat       endp
.text:0000000000009F8F
.text:0000000000009F90
.text:0000000000009F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F90
.text:0000000000009F90 ; Attributes: info_from_lumina
.text:0000000000009F90
.text:0000000000009F90 ; __int64 __fastcall fd_safer_flag(int fd)
.text:0000000000009F90                 public fd_safer_flag
.text:0000000000009F90 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:0000000000009F90                                         ; openat_safer+29↑p
.text:0000000000009F90 ; __unwind {
.text:0000000000009F90                 push    r13
.text:0000000000009F92                 push    r12
.text:0000000000009F94                 push    rbp
.text:0000000000009F95                 push    rbx
.text:0000000000009F96                 mov     ebx, edi
.text:0000000000009F98                 sub     rsp, 8
.text:0000000000009F9C                 cmp     edi, 2
.text:0000000000009F9F                 ja      short loc_9FC2
.text:0000000000009FA1                 call    dup_safer
.text:0000000000009FA6                 mov     r12d, eax
.text:0000000000009FA9                 call    ___errno_location
.text:0000000000009FAE                 mov     r13d, [rax]
.text:0000000000009FB1                 mov     rbp, rax
.text:0000000000009FB4                 mov     edi, ebx        ; fd
.text:0000000000009FB6                 call    _close
.text:0000000000009FBB                 mov     ebx, r12d
.text:0000000000009FBE                 mov     [rbp+0], r13d
.text:0000000000009FC2
.text:0000000000009FC2 loc_9FC2:                               ; CODE XREF: fd_safer_flag+F↑j
.text:0000000000009FC2                 add     rsp, 8
.text:0000000000009FC6                 mov     eax, ebx
.text:0000000000009FC8                 pop     rbx
.text:0000000000009FC9                 pop     rbp
.text:0000000000009FCA                 pop     r12
.text:0000000000009FCC                 pop     r13
.text:0000000000009FCE                 retn
.text:0000000000009FCE ; } // starts at 9F90
.text:0000000000009FCE fd_safer_flag   endp
.text:0000000000009FCE
.text:0000000000009FCE ; ---------------------------------------------------------------------------
.text:0000000000009FCF                 align 10h
.text:0000000000009FD0
.text:0000000000009FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009FD0
.text:0000000000009FD0 ; Attributes: info_from_lumina
.text:0000000000009FD0
.text:0000000000009FD0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000009FD0                 public rpl_fclose
.text:0000000000009FD0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000009FD0 ; __unwind {
.text:0000000000009FD0                 push    r12
.text:0000000000009FD2                 push    rbp
.text:0000000000009FD3                 push    rbx
.text:0000000000009FD4                 mov     rbx, rdi
.text:0000000000009FD7                 call    _fileno
.text:0000000000009FDC                 test    eax, eax
.text:0000000000009FDE                 mov     rdi, rbx        ; fp
.text:0000000000009FE1                 js      short loc_A037
.text:0000000000009FE3                 call    ___freading
.text:0000000000009FE8                 test    eax, eax
.text:0000000000009FEA                 jnz     short loc_A018
.text:0000000000009FEC
.text:0000000000009FEC loc_9FEC:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000009FEC                 mov     rdi, rbx        ; stream
.text:0000000000009FEF                 call    rpl_fflush
.text:0000000000009FF4                 test    eax, eax
.text:0000000000009FF6                 jz      short loc_A034
.text:0000000000009FF8                 call    ___errno_location
.text:0000000000009FFD                 mov     r12d, [rax]
.text:000000000000A000                 mov     rdi, rbx        ; stream
.text:000000000000A003                 mov     rbp, rax
.text:000000000000A006                 call    _fclose
.text:000000000000A00B                 test    r12d, r12d
.text:000000000000A00E                 jnz     short loc_A040
.text:000000000000A010
.text:000000000000A010 loc_A010:                               ; CODE XREF: rpl_fclose+79↓j
.text:000000000000A010                 pop     rbx
.text:000000000000A011                 pop     rbp
.text:000000000000A012                 pop     r12
.text:000000000000A014                 retn
.text:000000000000A014 ; ---------------------------------------------------------------------------
.text:000000000000A015                 align 8
.text:000000000000A018
.text:000000000000A018 loc_A018:                               ; CODE XREF: rpl_fclose+1A↑j
.text:000000000000A018                 mov     rdi, rbx        ; stream
.text:000000000000A01B                 call    _fileno
.text:000000000000A020                 xor     esi, esi        ; offset
.text:000000000000A022                 mov     edx, 1          ; whence
.text:000000000000A027                 mov     edi, eax        ; fd
.text:000000000000A029                 call    _lseek
.text:000000000000A02E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A032                 jnz     short loc_9FEC
.text:000000000000A034
.text:000000000000A034 loc_A034:                               ; CODE XREF: rpl_fclose+26↑j
.text:000000000000A034                 mov     rdi, rbx        ; stream
.text:000000000000A037
.text:000000000000A037 loc_A037:                               ; CODE XREF: rpl_fclose+11↑j
.text:000000000000A037                 pop     rbx
.text:000000000000A038                 pop     rbp
.text:000000000000A039                 pop     r12
.text:000000000000A03B                 jmp     _fclose
.text:000000000000A040 ; ---------------------------------------------------------------------------
.text:000000000000A040
.text:000000000000A040 loc_A040:                               ; CODE XREF: rpl_fclose+3E↑j
.text:000000000000A040                 mov     [rbp+0], r12d
.text:000000000000A044                 mov     eax, 0FFFFFFFFh
.text:000000000000A049                 jmp     short loc_A010
.text:000000000000A049 ; } // starts at 9FD0
.text:000000000000A049 rpl_fclose      endp
.text:000000000000A049
.text:000000000000A049 ; ---------------------------------------------------------------------------
.text:000000000000A04B                 align 10h
.text:000000000000A050
.text:000000000000A050 ; =============== S U B R O U T I N E =======================================
.text:000000000000A050
.text:000000000000A050
.text:000000000000A050 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:000000000000A050                 public rpl_fcntl
.text:000000000000A050 rpl_fcntl       proc near               ; CODE XREF: fts_build+90A↑p
.text:000000000000A050                                         ; dup_safer+9↓j
.text:000000000000A050
.text:000000000000A050 var_68          = dword ptr -68h
.text:000000000000A050 var_60          = qword ptr -60h
.text:000000000000A050 var_58          = qword ptr -58h
.text:000000000000A050 var_50          = qword ptr -50h
.text:000000000000A050 var_48          = byte ptr -48h
.text:000000000000A050 var_38          = qword ptr -38h
.text:000000000000A050 var_30          = qword ptr -30h
.text:000000000000A050 var_28          = qword ptr -28h
.text:000000000000A050 var_20          = qword ptr -20h
.text:000000000000A050 arg_0           = byte ptr  8
.text:000000000000A050
.text:000000000000A050 ; __unwind {
.text:000000000000A050                 push    r12
.text:000000000000A052                 push    rbp
.text:000000000000A053                 mov     ebp, edi
.text:000000000000A055                 push    rbx
.text:000000000000A056                 sub     rsp, 50h
.text:000000000000A05A                 mov     rax, fs:28h
.text:000000000000A063                 mov     [rsp+68h+var_50], rax
.text:000000000000A068                 xor     eax, eax
.text:000000000000A06A                 lea     rax, [rsp+68h+arg_0]
.text:000000000000A06F                 test    esi, esi
.text:000000000000A071                 mov     [rsp+68h+var_38], rdx
.text:000000000000A076                 mov     [rsp+68h+var_30], rcx
.text:000000000000A07B                 mov     [rsp+68h+var_28], r8
.text:000000000000A080                 mov     [rsp+68h+var_60], rax
.text:000000000000A085                 lea     rax, [rsp+68h+var_48]
.text:000000000000A08A                 mov     [rsp+68h+var_20], r9
.text:000000000000A08F                 mov     [rsp+68h+var_68], 10h
.text:000000000000A096                 mov     [rsp+68h+var_58], rax
.text:000000000000A09B                 jz      loc_A2A2
.text:000000000000A0A1                 cmp     esi, 406h
.text:000000000000A0A7                 jnz     short loc_A0F0
.text:000000000000A0A9                 mov     rax, [rsp+68h+var_58]
.text:000000000000A0AE                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:000000000000A0B5                 mov     [rsp+68h+var_68], 18h
.text:000000000000A0BC                 mov     r12d, [rax+10h]
.text:000000000000A0C0                 mov     edx, r12d
.text:000000000000A0C3                 js      loc_A1F3
.text:000000000000A0C9                 xor     eax, eax
.text:000000000000A0CB                 mov     esi, 406h       ; cmd
.text:000000000000A0D0                 call    _fcntl
.text:000000000000A0D5                 test    eax, eax
.text:000000000000A0D7                 mov     ebx, eax
.text:000000000000A0D9                 js      loc_A268
.text:000000000000A0DF
.text:000000000000A0DF loc_A0DF:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000A0DF                 mov     cs:have_dupfd_cloexec_3326, 1
.text:000000000000A0E9                 jmp     short loc_A130
.text:000000000000A0E9 ; ---------------------------------------------------------------------------
.text:000000000000A0EB                 align 10h
.text:000000000000A0F0
.text:000000000000A0F0 loc_A0F0:                               ; CODE XREF: rpl_fcntl+57↑j
.text:000000000000A0F0                 cmp     esi, 0Bh
.text:000000000000A0F3                 jz      short loc_A120
.text:000000000000A0F5                 jg      short loc_A150
.text:000000000000A0F7                 cmp     esi, 4
.text:000000000000A0FA                 jz      loc_A1D0
.text:000000000000A100                 jg      loc_A1C0
.text:000000000000A106                 cmp     esi, 2
.text:000000000000A109                 jz      loc_A1D0
.text:000000000000A10F                 jg      short loc_A120
.text:000000000000A111                 cmp     esi, 1
.text:000000000000A114                 jnz     short loc_A178
.text:000000000000A116                 db      2Eh
.text:000000000000A116                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A120
.text:000000000000A120 loc_A120:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:000000000000A120                                         ; rpl_fcntl+BF↑j ...
.text:000000000000A120                 mov     edi, ebp        ; fd
.text:000000000000A122                 xor     eax, eax
.text:000000000000A124                 call    _fcntl
.text:000000000000A129                 mov     ebx, eax
.text:000000000000A12B                 nop     dword ptr [rax+rax+00h]
.text:000000000000A130
.text:000000000000A130 loc_A130:                               ; CODE XREF: rpl_fcntl+99↑j
.text:000000000000A130                                         ; rpl_fcntl+147↓j ...
.text:000000000000A130                 mov     rcx, [rsp+68h+var_50]
.text:000000000000A135                 xor     rcx, fs:28h
.text:000000000000A13E                 mov     eax, ebx
.text:000000000000A140                 jnz     loc_A29D
.text:000000000000A146                 add     rsp, 50h
.text:000000000000A14A                 pop     rbx
.text:000000000000A14B                 pop     rbp
.text:000000000000A14C                 pop     r12
.text:000000000000A14E                 retn
.text:000000000000A14E ; ---------------------------------------------------------------------------
.text:000000000000A14F                 align 10h
.text:000000000000A150
.text:000000000000A150 loc_A150:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:000000000000A150                 cmp     esi, 407h
.text:000000000000A156                 jg      short loc_A1A0
.text:000000000000A158                 cmp     esi, 406h
.text:000000000000A15E                 jge     short loc_A1D0
.text:000000000000A160                 cmp     esi, 401h
.text:000000000000A166                 jz      short loc_A120
.text:000000000000A168                 cmp     esi, 402h
.text:000000000000A16E                 jz      short loc_A1D0
.text:000000000000A170                 cmp     esi, 400h
.text:000000000000A176                 jz      short loc_A1D0
.text:000000000000A178
.text:000000000000A178 loc_A178:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:000000000000A178                                         ; rpl_fcntl+164↓j ...
.text:000000000000A178                 mov     eax, [rsp+68h+var_68]
.text:000000000000A17B                 cmp     eax, 2Fh ; '/'
.text:000000000000A17E                 ja      loc_A2BA
.text:000000000000A184                 add     rax, [rsp+68h+var_58]
.text:000000000000A189
.text:000000000000A189 loc_A189:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:000000000000A189                 mov     rdx, [rax]
.text:000000000000A18C                 mov     edi, ebp        ; fd
.text:000000000000A18E                 xor     eax, eax
.text:000000000000A190                 call    _fcntl
.text:000000000000A195                 mov     ebx, eax
.text:000000000000A197                 jmp     short loc_A130
.text:000000000000A197 ; ---------------------------------------------------------------------------
.text:000000000000A199                 align 20h
.text:000000000000A1A0
.text:000000000000A1A0 loc_A1A0:                               ; CODE XREF: rpl_fcntl+106↑j
.text:000000000000A1A0                 cmp     esi, 409h
.text:000000000000A1A6                 jz      short loc_A1D0
.text:000000000000A1A8                 jl      loc_A120
.text:000000000000A1AE                 cmp     esi, 40Ah
.text:000000000000A1B4                 jnz     short loc_A178
.text:000000000000A1B6                 jmp     loc_A120
.text:000000000000A1B6 ; ---------------------------------------------------------------------------
.text:000000000000A1BB                 align 20h
.text:000000000000A1C0
.text:000000000000A1C0 loc_A1C0:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:000000000000A1C0                 cmp     esi, 9
.text:000000000000A1C3                 jz      loc_A120
.text:000000000000A1C9                 jg      short loc_A1D0
.text:000000000000A1CB                 cmp     esi, 8
.text:000000000000A1CE                 jnz     short loc_A178
.text:000000000000A1D0
.text:000000000000A1D0 loc_A1D0:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:000000000000A1D0                                         ; rpl_fcntl+B9↑j ...
.text:000000000000A1D0                 mov     eax, [rsp+68h+var_68]
.text:000000000000A1D3                 cmp     eax, 2Fh ; '/'
.text:000000000000A1D6                 ja      loc_A2C4
.text:000000000000A1DC                 add     rax, [rsp+68h+var_58]
.text:000000000000A1E1
.text:000000000000A1E1 loc_A1E1:                               ; CODE XREF: rpl_fcntl+279↓j
.text:000000000000A1E1                 mov     edx, [rax]
.text:000000000000A1E3                 mov     edi, ebp        ; fd
.text:000000000000A1E5                 xor     eax, eax
.text:000000000000A1E7                 call    _fcntl
.text:000000000000A1EC                 mov     ebx, eax
.text:000000000000A1EE                 jmp     loc_A130
.text:000000000000A1F3 ; ---------------------------------------------------------------------------
.text:000000000000A1F3
.text:000000000000A1F3 loc_A1F3:                               ; CODE XREF: rpl_fcntl+73↑j
.text:000000000000A1F3                 xor     esi, esi        ; cmd
.text:000000000000A1F5                 xor     eax, eax
.text:000000000000A1F7                 call    _fcntl
.text:000000000000A1FC                 test    eax, eax
.text:000000000000A1FE                 mov     ebx, eax
.text:000000000000A200                 js      loc_A130
.text:000000000000A206                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000A20D                 jnz     loc_A130
.text:000000000000A213
.text:000000000000A213 loc_A213:                               ; CODE XREF: rpl_fcntl+248↓j
.text:000000000000A213                 xor     eax, eax
.text:000000000000A215                 mov     esi, 1          ; cmd
.text:000000000000A21A                 mov     edi, ebx        ; fd
.text:000000000000A21C                 call    _fcntl
.text:000000000000A221                 test    eax, eax
.text:000000000000A223                 js      short loc_A241
.text:000000000000A225                 or      eax, 1
.text:000000000000A228                 mov     esi, 2          ; cmd
.text:000000000000A22D                 mov     edi, ebx        ; fd
.text:000000000000A22F                 mov     edx, eax
.text:000000000000A231                 xor     eax, eax
.text:000000000000A233                 call    _fcntl
.text:000000000000A238                 cmp     eax, 0FFFFFFFFh
.text:000000000000A23B                 jnz     loc_A130
.text:000000000000A241
.text:000000000000A241 loc_A241:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:000000000000A241                 call    ___errno_location
.text:000000000000A246                 mov     r12d, [rax]
.text:000000000000A249                 mov     rbp, rax
.text:000000000000A24C                 mov     edi, ebx        ; fd
.text:000000000000A24E                 call    _close
.text:000000000000A253                 mov     ebx, 0FFFFFFFFh
.text:000000000000A258                 mov     [rbp+0], r12d
.text:000000000000A25C                 jmp     loc_A130
.text:000000000000A25C ; ---------------------------------------------------------------------------
.text:000000000000A261                 align 8
.text:000000000000A268
.text:000000000000A268 loc_A268:                               ; CODE XREF: rpl_fcntl+89↑j
.text:000000000000A268                 call    ___errno_location
.text:000000000000A26D                 cmp     dword ptr [rax], 16h
.text:000000000000A270                 jnz     loc_A0DF
.text:000000000000A276                 xor     esi, esi        ; cmd
.text:000000000000A278                 xor     eax, eax
.text:000000000000A27A                 mov     edx, r12d
.text:000000000000A27D                 mov     edi, ebp        ; fd
.text:000000000000A27F                 call    _fcntl
.text:000000000000A284                 test    eax, eax
.text:000000000000A286                 mov     ebx, eax
.text:000000000000A288                 js      loc_A130
.text:000000000000A28E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000A298                 jmp     loc_A213
.text:000000000000A29D ; ---------------------------------------------------------------------------
.text:000000000000A29D
.text:000000000000A29D loc_A29D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000000A29D                 call    ___stack_chk_fail
.text:000000000000A2A2 ; ---------------------------------------------------------------------------
.text:000000000000A2A2
.text:000000000000A2A2 loc_A2A2:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:000000000000A2A2                 mov     rax, [rsp+68h+var_58]
.text:000000000000A2A7                 xor     esi, esi        ; cmd
.text:000000000000A2A9                 mov     edx, [rax+10h]
.text:000000000000A2AC                 xor     eax, eax
.text:000000000000A2AE                 call    _fcntl
.text:000000000000A2B3                 mov     ebx, eax
.text:000000000000A2B5                 jmp     loc_A130
.text:000000000000A2BA ; ---------------------------------------------------------------------------
.text:000000000000A2BA
.text:000000000000A2BA loc_A2BA:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000000A2BA                 mov     rax, [rsp+68h+var_60]
.text:000000000000A2BF                 jmp     loc_A189
.text:000000000000A2C4 ; ---------------------------------------------------------------------------
.text:000000000000A2C4
.text:000000000000A2C4 loc_A2C4:                               ; CODE XREF: rpl_fcntl+186↑j
.text:000000000000A2C4                 mov     rax, [rsp+68h+var_60]
.text:000000000000A2C9                 jmp     loc_A1E1
.text:000000000000A2C9 ; } // starts at A050
.text:000000000000A2C9 rpl_fcntl       endp
.text:000000000000A2C9
.text:000000000000A2C9 ; ---------------------------------------------------------------------------
.text:000000000000A2CE                 align 10h
.text:000000000000A2D0
.text:000000000000A2D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A2D0
.text:000000000000A2D0 ; Attributes: info_from_lumina
.text:000000000000A2D0
.text:000000000000A2D0 ; int __fastcall rpl_fflush(FILE *stream)
.text:000000000000A2D0                 public rpl_fflush
.text:000000000000A2D0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:000000000000A2D0 ; __unwind {
.text:000000000000A2D0                 test    rdi, rdi
.text:000000000000A2D3                 push    rbx
.text:000000000000A2D4                 mov     rbx, rdi
.text:000000000000A2D7                 jz      short loc_A2EA
.text:000000000000A2D9                 call    ___freading
.text:000000000000A2DE                 test    eax, eax
.text:000000000000A2E0                 jz      short loc_A2EA
.text:000000000000A2E2                 test    dword ptr [rbx], 100h
.text:000000000000A2E8                 jnz     short loc_A2F8
.text:000000000000A2EA
.text:000000000000A2EA loc_A2EA:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000A2EA                                         ; rpl_fflush+10↑j
.text:000000000000A2EA                 mov     rdi, rbx        ; stream
.text:000000000000A2ED                 pop     rbx
.text:000000000000A2EE                 jmp     _fflush
.text:000000000000A2EE ; ---------------------------------------------------------------------------
.text:000000000000A2F3                 align 8
.text:000000000000A2F8
.text:000000000000A2F8 loc_A2F8:                               ; CODE XREF: rpl_fflush+18↑j
.text:000000000000A2F8                 mov     rdi, rbx
.text:000000000000A2FB                 mov     edx, 1
.text:000000000000A300                 xor     esi, esi
.text:000000000000A302                 call    rpl_fseeko
.text:000000000000A307                 mov     rdi, rbx        ; stream
.text:000000000000A30A                 pop     rbx
.text:000000000000A30B                 jmp     _fflush
.text:000000000000A30B ; } // starts at A2D0
.text:000000000000A30B rpl_fflush      endp
.text:000000000000A30B
.text:000000000000A310
.text:000000000000A310 ; =============== S U B R O U T I N E =======================================
.text:000000000000A310
.text:000000000000A310 ; Attributes: info_from_lumina
.text:000000000000A310
.text:000000000000A310 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:000000000000A310                 public rpl_fseeko
.text:000000000000A310 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:000000000000A310 ; __unwind {
.text:000000000000A310                 mov     rax, [rdi+8]
.text:000000000000A314                 cmp     [rdi+10h], rax
.text:000000000000A318                 jz      short loc_A320
.text:000000000000A31A
.text:000000000000A31A loc_A31A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000A31A                                         ; rpl_fseeko+1F↓j
.text:000000000000A31A                 jmp     _fseeko
.text:000000000000A31A ; ---------------------------------------------------------------------------
.text:000000000000A31F                 align 20h
.text:000000000000A320
.text:000000000000A320 loc_A320:                               ; CODE XREF: rpl_fseeko+8↑j
.text:000000000000A320                 mov     rax, [rdi+20h]
.text:000000000000A324                 cmp     [rdi+28h], rax
.text:000000000000A328                 jnz     short loc_A31A
.text:000000000000A32A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000A32F                 jnz     short loc_A31A
.text:000000000000A331                 push    r12
.text:000000000000A333                 push    rbp
.text:000000000000A334                 mov     r12d, edx
.text:000000000000A337                 push    rbx
.text:000000000000A338                 mov     rbp, rsi
.text:000000000000A33B                 mov     rbx, rdi
.text:000000000000A33E                 call    _fileno
.text:000000000000A343                 mov     edx, r12d       ; whence
.text:000000000000A346                 mov     rsi, rbp        ; offset
.text:000000000000A349                 mov     edi, eax        ; fd
.text:000000000000A34B                 call    _lseek
.text:000000000000A350                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A354                 jz      short loc_A362
.text:000000000000A356                 and     dword ptr [rbx], 0FFFFFFEFh
.text:000000000000A359                 mov     [rbx+90h], rax
.text:000000000000A360                 xor     eax, eax
.text:000000000000A362
.text:000000000000A362 loc_A362:                               ; CODE XREF: rpl_fseeko+44↑j
.text:000000000000A362                 pop     rbx
.text:000000000000A363                 pop     rbp
.text:000000000000A364                 pop     r12
.text:000000000000A366                 retn
.text:000000000000A366 ; } // starts at A310
.text:000000000000A366 rpl_fseeko      endp
.text:000000000000A366
.text:000000000000A366 ; ---------------------------------------------------------------------------
.text:000000000000A367                 align 10h
.text:000000000000A370
.text:000000000000A370 ; =============== S U B R O U T I N E =======================================
.text:000000000000A370
.text:000000000000A370
.text:000000000000A370                 public dup_safer
.text:000000000000A370 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:000000000000A370 ; __unwind {
.text:000000000000A370                 mov     edx, 3
.text:000000000000A375                 xor     esi, esi
.text:000000000000A377                 xor     eax, eax
.text:000000000000A379                 jmp     rpl_fcntl
.text:000000000000A379 ; } // starts at A370
.text:000000000000A379 dup_safer       endp
.text:000000000000A379
.text:000000000000A379 ; ---------------------------------------------------------------------------
.text:000000000000A37E                 align 20h
.text:000000000000A380
.text:000000000000A380 ; =============== S U B R O U T I N E =======================================
.text:000000000000A380
.text:000000000000A380 ; Attributes: info_from_lumina
.text:000000000000A380
.text:000000000000A380 ; void _libc_csu_init(void)
.text:000000000000A380                 public __libc_csu_init
.text:000000000000A380 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:000000000000A380 ; __unwind {
.text:000000000000A380                 push    r15
.text:000000000000A382                 push    r14
.text:000000000000A384                 mov     r15, rdx
.text:000000000000A387                 push    r13
.text:000000000000A389                 push    r12
.text:000000000000A38B                 lea     r12, __frame_dummy_init_array_entry
.text:000000000000A392                 push    rbp
.text:000000000000A393                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000A39A                 push    rbx
.text:000000000000A39B                 mov     r13d, edi
.text:000000000000A39E                 mov     r14, rsi
.text:000000000000A3A1                 sub     rbp, r12
.text:000000000000A3A4                 sub     rsp, 8
.text:000000000000A3A8                 sar     rbp, 3
.text:000000000000A3AC                 call    _init_proc
.text:000000000000A3B1                 test    rbp, rbp
.text:000000000000A3B4                 jz      short loc_A3D6
.text:000000000000A3B6                 xor     ebx, ebx
.text:000000000000A3B8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000A3C0
.text:000000000000A3C0 loc_A3C0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:000000000000A3C0                 mov     rdx, r15
.text:000000000000A3C3                 mov     rsi, r14
.text:000000000000A3C6                 mov     edi, r13d
.text:000000000000A3C9                 call    ds:(__frame_dummy_init_array_entry - 20D9B0h)[r12+rbx*8]
.text:000000000000A3CD                 add     rbx, 1
.text:000000000000A3D1                 cmp     rbp, rbx
.text:000000000000A3D4                 jnz     short loc_A3C0
.text:000000000000A3D6
.text:000000000000A3D6 loc_A3D6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:000000000000A3D6                 add     rsp, 8
.text:000000000000A3DA                 pop     rbx
.text:000000000000A3DB                 pop     rbp
.text:000000000000A3DC                 pop     r12
.text:000000000000A3DE                 pop     r13
.text:000000000000A3E0                 pop     r14
.text:000000000000A3E2                 pop     r15
.text:000000000000A3E4                 retn
.text:000000000000A3E4 ; } // starts at A380
.text:000000000000A3E4 __libc_csu_init endp
.text:000000000000A3E4
.text:000000000000A3E4 ; ---------------------------------------------------------------------------
.text:000000000000A3E5                 align 10h
.text:000000000000A3F0
.text:000000000000A3F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A3F0
.text:000000000000A3F0
.text:000000000000A3F0 ; void _libc_csu_fini(void)
.text:000000000000A3F0                 public __libc_csu_fini
.text:000000000000A3F0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:000000000000A3F0 ; __unwind {
.text:000000000000A3F0                 rep retn
.text:000000000000A3F0 ; } // starts at A3F0
.text:000000000000A3F0 __libc_csu_fini endp
.text:000000000000A3F0
.text:000000000000A3F0 ; ---------------------------------------------------------------------------
.text:000000000000A3F2                 align 20h
.text:000000000000A400
.text:000000000000A400 ; =============== S U B R O U T I N E =======================================
.text:000000000000A400
.text:000000000000A400
.text:000000000000A400 atexit          proc near               ; CODE XREF: main+7E↑p
.text:000000000000A400 ; __unwind {
.text:000000000000A400                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:000000000000A407                 xor     esi, esi        ; obj
.text:000000000000A409                 jmp     ___cxa_atexit
.text:000000000000A409 ; } // starts at A400
.text:000000000000A409 atexit          endp
.text:000000000000A409
.text:000000000000A409 _text           ends
.text:000000000000A409
LOAD:000000000000A40E ; ===========================================================================
LOAD:000000000000A40E
LOAD:000000000000A40E ; Segment type: Pure code
LOAD:000000000000A40E ; Segment permissions: Read/Execute
LOAD:000000000000A40E LOAD            segment byte public 'CODE' use64
LOAD:000000000000A40E                 assume cs:LOAD
LOAD:000000000000A40E                 ;org 0A40Eh
LOAD:000000000000A40E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000A40E                 align 10h
LOAD:000000000000A40E LOAD            ends
LOAD:000000000000A40E
.fini:000000000000A410 ; ===========================================================================
.fini:000000000000A410
.fini:000000000000A410 ; Segment type: Pure code
.fini:000000000000A410 ; Segment permissions: Read/Execute
.fini:000000000000A410 _fini           segment dword public 'CODE' use64
.fini:000000000000A410                 assume cs:_fini
.fini:000000000000A410                 ;org 0A410h
.fini:000000000000A410                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000000A410
.fini:000000000000A410 ; =============== S U B R O U T I N E =======================================
.fini:000000000000A410
.fini:000000000000A410
.fini:000000000000A410                 public _term_proc
.fini:000000000000A410 _term_proc      proc near
.fini:000000000000A410                 sub     rsp, 8          ; _fini
.fini:000000000000A414                 add     rsp, 8
.fini:000000000000A418                 retn
.fini:000000000000A418 _term_proc      endp
.fini:000000000000A418
.fini:000000000000A418 _fini           ends
.fini:000000000000A418
LOAD:000000000000A419 ; ===========================================================================
LOAD:000000000000A419
LOAD:000000000000A419 ; Segment type: Pure code
LOAD:000000000000A419 ; Segment permissions: Read/Execute
LOAD:000000000000A419 LOAD            segment byte public 'CODE' use64
LOAD:000000000000A419                 assume cs:LOAD
LOAD:000000000000A419                 ;org 0A419h
LOAD:000000000000A419                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000A419                 align 20h
LOAD:000000000000A419 LOAD            ends
LOAD:000000000000A419
.rodata:000000000000A420 ; ===========================================================================
.rodata:000000000000A420
.rodata:000000000000A420 ; Segment type: Pure data
.rodata:000000000000A420 ; Segment permissions: Read
.rodata:000000000000A420 _rodata         segment align_32 public 'CONST' use64
.rodata:000000000000A420                 assume cs:_rodata
.rodata:000000000000A420                 ;org 0A420h
.rodata:000000000000A420                 public _IO_stdin_used
.rodata:000000000000A420 _IO_stdin_used  db    1
.rodata:000000000000A421                 db    0
.rodata:000000000000A422                 db    2
.rodata:000000000000A423                 db    0
.rodata:000000000000A424 aChgrp          db 'chgrp',0            ; DATA XREF: main+194↑o
.rodata:000000000000A424                                         ; usage+21C↑o ...
.rodata:000000000000A42A asc_A42A        db '[',0                ; DATA XREF: usage+228↑o
.rodata:000000000000A42C aTestInvocation db 'test invocation',0  ; DATA XREF: usage+24F↑o
.rodata:000000000000A43C aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000A43C                                         ; DATA XREF: usage+27F↑o
.rodata:000000000000A43C                                         ; usage+37C↑o ...
.rodata:000000000000A452 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+290↑o
.rodata:000000000000A45C aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+29C↑o
.rodata:000000000000A46B aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+22F↑o
.rodata:000000000000A475 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+25B↑o
.rodata:000000000000A47F aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+273↑o
.rodata:000000000000A489 ; const char aSOnlineHelpS[]
.rodata:000000000000A489 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+2EA↑o
.rodata:000000000000A489                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000A4A0 unk_A4A0        db  47h ; G             ; DATA XREF: main+18D↑o
.rodata:000000000000A4A0                                         ; usage+306↑o ...
.rodata:000000000000A4A1                 db  4Eh ; N
.rodata:000000000000A4A2                 db  55h ; U
.rodata:000000000000A4A3                 db  20h
.rodata:000000000000A4A4 ; const char domainname[]
.rodata:000000000000A4A4 domainname      db 'coreutils',0        ; DATA XREF: main+5F↑o
.rodata:000000000000A4A4                                         ; main+6B↑o ...
.rodata:000000000000A4AE ; const char s2[]
.rodata:000000000000A4AE s2              db 'en_',0              ; DATA XREF: usage+32D↑o
.rodata:000000000000A4AE                                         ; usage+3EE↑o
.rodata:000000000000A4B2 ; const char aFullDocumentat[]
.rodata:000000000000A4B2 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000A4B2                                         ; DATA XREF: usage:loc_2699↑o
.rodata:000000000000A4B2                                         ; usage:loc_2756↑o
.rodata:000000000000A4CD ; const char dirname[]
.rodata:000000000000A4CD dirname         db '/usr/local/share/locale',0
.rodata:000000000000A4CD                                         ; DATA XREF: main+58↑o
.rodata:000000000000A4E5 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+17F↑o
.rodata:000000000000A4F2 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+186↑o
.rodata:000000000000A502 ; const char shortopts[]
.rodata:000000000000A502 shortopts       db 'HLPRcfhv',0         ; DATA XREF: main+9F↑o
.rodata:000000000000A50B ; const char aMissingOperand[]
.rodata:000000000000A50B aMissingOperand db 'missing operand',0  ; DATA XREF: main+433↑o
.rodata:000000000000A51B ; const char aMissingOperand_0[]
.rodata:000000000000A51B aMissingOperand_0 db 'missing operand after %s',0
.rodata:000000000000A51B                                         ; DATA XREF: main+487↑o
.rodata:000000000000A534 ; const char aInvalidGroupS[]
.rodata:000000000000A534 aInvalidGroupS  db 'invalid group: %s',0
.rodata:000000000000A534                                         ; DATA XREF: main+3F3↑o
.rodata:000000000000A534                                         ; change_file_owner+46E↑o ...
.rodata:000000000000A546 aRecursive      db 'recursive',0        ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000000A550 aChanges        db 'changes',0          ; DATA XREF: .data.rel.ro:000000000020D9E0↓o
.rodata:000000000000A558 aNoDereference  db 'no-dereference',0   ; DATA XREF: .data.rel.ro:000000000020DA20↓o
.rodata:000000000000A558                                         ; .data.rel.ro:000000000020DA00↓o ...
.rodata:000000000000A567 aNoPreserveRoot_0 db 'no-preserve-root',0
.rodata:000000000000A567                                         ; DATA XREF: .data.rel.ro:000000000020DA40↓o
.rodata:000000000000A567                                         ; .data.rel.ro:000000000020DA60↓o
.rodata:000000000000A578 aQuiet          db 'quiet',0            ; DATA XREF: .data.rel.ro:000000000020DA80↓o
.rodata:000000000000A57E aSilent         db 'silent',0           ; DATA XREF: .data.rel.ro:000000000020DAA0↓o
.rodata:000000000000A585 aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:000000000020DAE0↓o
.rodata:000000000000A58D aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020DB00↓o
.rodata:000000000000A592 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020DB20↓o
.rodata:000000000000A59A                 align 20h
.rodata:000000000000A5A0 ; const char aTrySHelpForMor[]
.rodata:000000000000A5A0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:000000000000A5A0                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000A5C7                 align 8
.rodata:000000000000A5C8 ; const char aUsageSOptionGr[]
.rodata:000000000000A5C8 aUsageSOptionGr db 'Usage: %s [OPTION]... GROUP FILE...',0Ah
.rodata:000000000000A5C8                                         ; DATA XREF: usage:loc_23AD↑o
.rodata:000000000000A5C8                 db '  or:  %s [OPTION]... --reference=RFILE FILE...',0Ah,0
.rodata:000000000000A61D                 align 20h
.rodata:000000000000A620 ; const char aChangeTheGroup[]
.rodata:000000000000A620 aChangeTheGroup db 'Change the group of each FILE to GROUP.',0Ah
.rodata:000000000000A620                                         ; DATA XREF: usage+87↑o
.rodata:000000000000A620                 db 'With --reference, change the group of each FILE to that of RFILE.'
.rodata:000000000000A620                 db 0Ah
.rodata:000000000000A620                 db 0Ah,0
.rodata:000000000000A68C                 align 10h
.rodata:000000000000A690 ; const char aCChangesLikeVe[]
.rodata:000000000000A690 aCChangesLikeVe db '  -c, --changes          like verbose but report only when a chan'
.rodata:000000000000A690                                         ; DATA XREF: usage+AC↑o
.rodata:000000000000A690                 db 'ge is made',0Ah
.rodata:000000000000A690                 db '  -f, --silent, --quiet  suppress most error messages',0Ah
.rodata:000000000000A690                 db '  -v, --verbose          output a diagnostic for every file proce'
.rodata:000000000000A690                 db 'ssed',0Ah,0
.rodata:000000000000A759                 align 20h
.rodata:000000000000A760 ; const char aDereferenceAff[]
.rodata:000000000000A760 aDereferenceAff db '      --dereference      affect the referent of each symbolic lin'
.rodata:000000000000A760                                         ; DATA XREF: usage+D1↑o
.rodata:000000000000A760                 db 'k (this is',0Ah
.rodata:000000000000A760                 db '                         the default), rather than the symbolic l'
.rodata:000000000000A760                 db 'ink itself',0Ah
.rodata:000000000000A760                 db '  -h, --no-dereference   affect symbolic links instead of any ref'
.rodata:000000000000A760                 db 'erenced file',0Ah,0
.rodata:000000000000A847                 align 8
.rodata:000000000000A848 ; const char aUsefulOnlyOnSy[]
.rodata:000000000000A848 aUsefulOnlyOnSy db '                         (useful only on systems that can change '
.rodata:000000000000A848                                         ; DATA XREF: usage+F6↑o
.rodata:000000000000A848                 db 'the',0Ah
.rodata:000000000000A848                 db '                         ownership of a symlink)',0Ah,0
.rodata:000000000000A8BF                 align 20h
.rodata:000000000000A8C0 ; const char aNoPreserveRoot[]
.rodata:000000000000A8C0 aNoPreserveRoot db '      --no-preserve-root  do not treat ',27h,'/',27h,' specially '
.rodata:000000000000A8C0                                         ; DATA XREF: usage+11B↑o
.rodata:000000000000A8C0                 db '(the default)',0Ah
.rodata:000000000000A8C0                 db '      --preserve-root    fail to operate recursively on ',27h,'/',27h
.rodata:000000000000A8C0                 db 0Ah,0
.rodata:000000000000A940 ; const char aReferenceRfile[]
.rodata:000000000000A940 aReferenceRfile db '      --reference=RFILE  use RFILE',27h,'s group rather than spec'
.rodata:000000000000A940                                         ; DATA XREF: usage+140↑o
.rodata:000000000000A940                 db 'ifying a',0Ah
.rodata:000000000000A940                 db '                         GROUP value',0Ah,0
.rodata:000000000000A9AA                 align 10h
.rodata:000000000000A9B0 ; const char aRRecursiveOper[]
.rodata:000000000000A9B0 aRRecursiveOper db '  -R, --recursive        operate on files and directories recursi'
.rodata:000000000000A9B0                                         ; DATA XREF: usage+165↑o
.rodata:000000000000A9B0                 db 'vely',0Ah,0
.rodata:000000000000A9F7                 align 8
.rodata:000000000000A9F8 ; const char aTheFollowingOp[]
.rodata:000000000000A9F8 aTheFollowingOp db 0Ah                  ; DATA XREF: usage+18A↑o
.rodata:000000000000A9F8                 db 'The following options modify how a hierarchy is traversed when th'
.rodata:000000000000A9F8                 db 'e -R',0Ah
.rodata:000000000000A9F8                 db 'option is also specified.  If more than one is specified, only th'
.rodata:000000000000A9F8                 db 'e final',0Ah
.rodata:000000000000A9F8                 db 'one takes effect.',0Ah
.rodata:000000000000A9F8                 db 0Ah
.rodata:000000000000A9F8                 db '  -H                     if a command line argument is a symbolic'
.rodata:000000000000A9F8                 db ' link',0Ah
.rodata:000000000000A9F8                 db '                         to a directory, traverse it',0Ah
.rodata:000000000000A9F8                 db '  -L                     traverse every symbolic link to a direct'
.rodata:000000000000A9F8                 db 'ory',0Ah
.rodata:000000000000A9F8                 db '                         encountered',0Ah
.rodata:000000000000A9F8                 db '  -P                     do not traverse any symbolic links (defa'
.rodata:000000000000A9F8                 db 'ult)',0Ah
.rodata:000000000000A9F8                 db 0Ah,0
.rodata:000000000000ABC9                 align 10h
.rodata:000000000000ABD0 ; const char aHelpDisplayThi[]
.rodata:000000000000ABD0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000ABD0                                         ; DATA XREF: usage+1AF↑o
.rodata:000000000000ABFD                 align 20h
.rodata:000000000000AC00 ; const char aVersionOutputV[]
.rodata:000000000000AC00 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000AC00                                         ; DATA XREF: usage+1D4↑o
.rodata:000000000000AC36                 align 8
.rodata:000000000000AC38 ; const char aExamplesSStaff[]
.rodata:000000000000AC38 aExamplesSStaff db 0Ah                  ; DATA XREF: usage+1F9↑o
.rodata:000000000000AC38                 db 'Examples:',0Ah
.rodata:000000000000AC38                 db '  %s staff /u      Change the group of /u to "staff".',0Ah
.rodata:000000000000AC38                 db '  %s -hR staff /u  Change the group of /u and subfiles to "staff"'
.rodata:000000000000AC38                 db '.',0Ah,0
.rodata:000000000000ACBD                 align 20h
.rodata:000000000000ACC0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000ACC0                                         ; DATA XREF: usage+2FF↑o
.rodata:000000000000ACC0                                         ; usage+363↑o ...
.rodata:000000000000ACE8 ; const char aReportAnyTrans[]
.rodata:000000000000ACE8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000ACE8                                         ; DATA XREF: usage+457↑o
.rodata:000000000000ACE8                 db 'am/>',0Ah,0
.rodata:000000000000AD2F                 align 10h
.rodata:000000000000AD30 ; const char aOrAvailableLoc[]
.rodata:000000000000AD30 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000AD30                                         ; DATA XREF: usage:loc_26DE↑o
.rodata:000000000000AD63                 align 8
.rodata:000000000000AD68 ; const char aRDereferenceRe[]
.rodata:000000000000AD68 aRDereferenceRe db '-R --dereference requires either -H or -L',0
.rodata:000000000000AD68                                         ; DATA XREF: main:loc_2199↑o
.rodata:000000000000AD92                 align 8
.rodata:000000000000AD98 ; const char msgid[]
.rodata:000000000000AD98 msgid           db 'failed to get attributes of %s',0
.rodata:000000000000AD98                                         ; DATA XREF: main+36D↑o
.rodata:000000000000AD98                                         ; main+4C5↑o
.rodata:000000000000ADB7 ; const char aCannotAccessS[]
.rodata:000000000000ADB7 aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: change_file_owner+4BF↑o
.rodata:000000000000ADC8 aCannotReadDire db 'cannot read directory %s',0
.rodata:000000000000ADC8                                         ; DATA XREF: change_file_owner+997↑o
.rodata:000000000000ADE1 aCannotDerefere db 'cannot dereference %s',0
.rodata:000000000000ADE1                                         ; DATA XREF: change_file_owner+AAD↑o
.rodata:000000000000ADF7 ; const char aChangingOwners[]
.rodata:000000000000ADF7 aChangingOwners db 'changing ownership of %s',0
.rodata:000000000000ADF7                                         ; DATA XREF: change_file_owner+7AA↑o
.rodata:000000000000AE10 ; const char aChangingGroupO[]
.rodata:000000000000AE10 aChangingGroupO db 'changing group of %s',0
.rodata:000000000000AE10                                         ; DATA XREF: change_file_owner:loc_3278↑o
.rodata:000000000000AE25 ; const char aNoChangeToOwne[]
.rodata:000000000000AE25 aNoChangeToOwne db 'no change to ownership of %s',0Ah,0
.rodata:000000000000AE25                                         ; DATA XREF: change_file_owner:loc_3480↑o
.rodata:000000000000AE43 ; const char aGroupOfSRetain[]
.rodata:000000000000AE43 aGroupOfSRetain db 'group of %s retained as %s',0Ah,0
.rodata:000000000000AE43                                         ; DATA XREF: change_file_owner+76C↑o
.rodata:000000000000AE5F ; const char aOwnershipOfSRe_0[]
.rodata:000000000000AE5F aOwnershipOfSRe_0 db 'ownership of %s retained',0Ah,0
.rodata:000000000000AE5F                                         ; DATA XREF: change_file_owner:loc_3448↑o
.rodata:000000000000AE79 ; const char aFtsReadFailed[]
.rodata:000000000000AE79 aFtsReadFailed  db 'fts_read failed',0  ; DATA XREF: chown_files:loc_37E8↑o
.rodata:000000000000AE89 ; const char aFtsCloseFailed[]
.rodata:000000000000AE89 aFtsCloseFailed db 'fts_close failed',0 ; DATA XREF: chown_files+A5↑o
.rodata:000000000000AE9A                 align 20h
.rodata:000000000000AEA0 ; const char aItIsDangerousT[]
.rodata:000000000000AEA0 aItIsDangerousT db 'it is dangerous to operate recursively on %s',0
.rodata:000000000000AEA0                                         ; DATA XREF: change_file_owner+393↑o
.rodata:000000000000AEA0                                         ; change_file_owner+588↑o
.rodata:000000000000AECD                 align 10h
.rodata:000000000000AED0 ; const char aItIsDangerousT_0[]
.rodata:000000000000AED0 aItIsDangerousT_0 db 'it is dangerous to operate recursively on %s (same as %s)',0
.rodata:000000000000AED0                                         ; DATA XREF: change_file_owner+B7B↑o
.rodata:000000000000AED0                                         ; change_file_owner+CB3↑o
.rodata:000000000000AF0A                 align 10h
.rodata:000000000000AF10 ; const char aUseNoPreserveR[]
.rodata:000000000000AF10 aUseNoPreserveR db 'use --no-preserve-root to override this failsafe',0
.rodata:000000000000AF10                                         ; DATA XREF: change_file_owner:loc_2D1A↑o
.rodata:000000000000AF10                                         ; change_file_owner:loc_2F0F↑o
.rodata:000000000000AF41                 align 8
.rodata:000000000000AF48 ; const char aWarningCircula[]
.rodata:000000000000AF48 aWarningCircula db 'WARNING: Circular directory structure.',0Ah
.rodata:000000000000AF48                                         ; DATA XREF: change_file_owner+87C↑o
.rodata:000000000000AF48                 db 'This almost certainly means that you have a corrupted file system'
.rodata:000000000000AF48                 db '.',0Ah
.rodata:000000000000AF48                 db 'NOTIFY YOUR SYSTEM MANAGER.',0Ah
.rodata:000000000000AF48                 db 'The following directory is part of the cycle:',0Ah
.rodata:000000000000AF48                 db '  %s',0Ah,0
.rodata:000000000000B002                 align 8
.rodata:000000000000B008 ; const char aChangedOwnersh[]
.rodata:000000000000B008 aChangedOwnersh db 'changed ownership of %s from %s to %s',0Ah,0
.rodata:000000000000B008                                         ; DATA XREF: change_file_owner:loc_32C0↑o
.rodata:000000000000B02F                 align 10h
.rodata:000000000000B030 ; const char aChangedGroupOf[]
.rodata:000000000000B030 aChangedGroupOf db 'changed group of %s from %s to %s',0Ah,0
.rodata:000000000000B030                                         ; DATA XREF: change_file_owner+8BE↑o
.rodata:000000000000B053                 align 8
.rodata:000000000000B058 ; const char aFailedToChange[]
.rodata:000000000000B058 aFailedToChange db 'failed to change ownership of %s from %s to %s',0Ah,0
.rodata:000000000000B058                                         ; DATA XREF: change_file_owner+72A↑o
.rodata:000000000000B088 ; const char aFailedToChange_0[]
.rodata:000000000000B088 aFailedToChange_0 db 'failed to change group of %s from %s to %s',0Ah,0
.rodata:000000000000B088                                         ; DATA XREF: change_file_owner+8E1↑o
.rodata:000000000000B0B4                 align 8
.rodata:000000000000B0B8 ; const char aFailedToChange_3[]
.rodata:000000000000B0B8 aFailedToChange_3 db 'failed to change ownership of %s',0Ah,0
.rodata:000000000000B0B8                                         ; DATA XREF: change_file_owner+B10↑o
.rodata:000000000000B0B8                                         ; change_file_owner:loc_3580↑o
.rodata:000000000000B0DA                 align 20h
.rodata:000000000000B0E0 ; const char aFailedToChange_1[]
.rodata:000000000000B0E0 aFailedToChange_1 db 'failed to change ownership of %s to %s',0Ah,0
.rodata:000000000000B0E0                                         ; DATA XREF: change_file_owner+A33↑o
.rodata:000000000000B108 aFailedToChange_2 db 'failed to change group of %s to %s',0Ah,0
.rodata:000000000000B108                                         ; DATA XREF: change_file_owner+B03↑o
.rodata:000000000000B12C                 align 10h
.rodata:000000000000B130 ; const char aOwnershipOfSRe[]
.rodata:000000000000B130 aOwnershipOfSRe db 'ownership of %s retained as %s',0Ah,0
.rodata:000000000000B130                                         ; DATA XREF: change_file_owner+207↑o
.rodata:000000000000B150 ; const char aNeitherSymboli[]
.rodata:000000000000B150 aNeitherSymboli db 'neither symbolic link %s nor referent has been changed',0Ah,0
.rodata:000000000000B150                                         ; DATA XREF: change_file_owner+9FA↑o
.rodata:000000000000B188 jpt_29C5        dd offset def_29C5 - 0B188h
.rodata:000000000000B188                                         ; DATA XREF: change_file_owner+53↑o
.rodata:000000000000B188                                         ; change_file_owner+5E↑r
.rodata:000000000000B188                 dd offset loc_2C88 - 0B188h ; jump table for switch statement
.rodata:000000000000B188                 dd offset loc_29D0 - 0B188h
.rodata:000000000000B188                 dd offset def_29C5 - 0B188h
.rodata:000000000000B188                 dd offset loc_2D60 - 0B188h
.rodata:000000000000B188                 dd offset def_29C5 - 0B188h
.rodata:000000000000B188                 dd offset loc_2E40 - 0B188h
.rodata:000000000000B188                 dd offset loc_2DB0 - 0B188h
.rodata:000000000000B188                 dd offset def_29C5 - 0B188h
.rodata:000000000000B188                 dd offset def_29C5 - 0B188h
.rodata:000000000000B188                 dd offset loc_2DF0 - 0B188h
.rodata:000000000000B1B4 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000B1B9 ; const char aWriteError[]
.rodata:000000000000B1B9 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_3873↑o
.rodata:000000000000B1C5 ; const char format[]
.rodata:000000000000B1C5 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000B1CC                 align 10h
.rodata:000000000000B1D0 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000000B1D0                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000000B208 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000000B208                                         ; main+35C↑o ...
.rodata:000000000000B210 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000B214 unk_B214        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000B215                 db  80h
.rodata:000000000000B216                 db  98h
.rodata:000000000000B217                 db    0
.rodata:000000000000B218 unk_B218        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000000B219                 db  80h
.rodata:000000000000B21A                 db  99h
.rodata:000000000000B21B                 db    0
.rodata:000000000000B21C unk_B21C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000B21D                 db    7
.rodata:000000000000B21E                 db  65h ; e
.rodata:000000000000B21F                 db    0
.rodata:000000000000B220 unk_B220        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000000B221                 db 0AFh
.rodata:000000000000B222                 db    0
.rodata:000000000000B223 unk_B223        db  22h ; "             ; DATA XREF: gettext_quote:loc_39F0↑o
.rodata:000000000000B223                                         ; quotearg_buffer_restyled:loc_47AB↑o ...
.rodata:000000000000B224                 db    0
.rodata:000000000000B225 ; const char asc_B225[2]
.rodata:000000000000B225 asc_B225        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000B225                                         ; quotearg_buffer_restyled:loc_3B73↑o ...
.rodata:000000000000B227 ; const char asc_B227[2]
.rodata:000000000000B227 asc_B227        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000B227                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000B229 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000B231 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020DB68↓o
.rodata:000000000000B237 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020DB70↓o
.rodata:000000000000B244 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020DB78↓o
.rodata:000000000000B244                                         ; .data.rel.ro:000000000020DB98↓o
.rodata:000000000000B251 aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000B251                                         ; DATA XREF: .data.rel.ro:000000000020DB80↓o
.rodata:000000000000B265 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020DB90↓o
.rodata:000000000000B26D aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020DBA8↓o
.rodata:000000000000B275                 align 20h
.rodata:000000000000B280 jpt_3B51        dd offset loc_48FA - 0B280h
.rodata:000000000000B280                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000000B280                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000000B280                 dd offset loc_3B53 - 0B280h ; jump table for switch statement
.rodata:000000000000B280                 dd offset loc_4B28 - 0B280h
.rodata:000000000000B280                 dd offset loc_4934 - 0B280h
.rodata:000000000000B280                 dd offset loc_4724 - 0B280h
.rodata:000000000000B280                 dd offset loc_4780 - 0B280h
.rodata:000000000000B280                 dd offset loc_47D5 - 0B280h
.rodata:000000000000B280                 dd offset loc_481A - 0B280h
.rodata:000000000000B280                 dd offset loc_4854 - 0B280h
.rodata:000000000000B280                 dd offset loc_4854 - 0B280h
.rodata:000000000000B280                 dd offset loc_4854 - 0B280h
.rodata:000000000000B2AC jpt_3CAE        dd offset loc_3ED0 - 0B2ACh, offset def_3CAE - 0B2ACh
.rodata:000000000000B2AC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000B2AC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000B2AC                 dd offset def_3CAE - 0B2ACh, offset def_3CAE - 0B2ACh ; jump table for switch statement
.rodata:000000000000B2AC                 dd offset def_3CAE - 0B2ACh, offset def_3CAE - 0B2ACh
.rodata:000000000000B2AC                 dd offset def_3CAE - 0B2ACh, offset loc_3F10 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3E18 - 0B2ACh, offset loc_3DD8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3FA0 - 0B2ACh, offset loc_3F90 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3F80 - 0B2ACh, offset loc_3F70 - 0B2ACh
.rodata:000000000000B2AC                 dd offset def_3CAE - 0B2ACh, offset def_3CAE - 0B2ACh
.rodata:000000000000B2AC                 dd offset def_3CAE - 0B2ACh, offset def_3CAE - 0B2ACh
.rodata:000000000000B2AC                 dd offset def_3CAE - 0B2ACh, offset def_3CAE - 0B2ACh
.rodata:000000000000B2AC                 dd offset def_3CAE - 0B2ACh, offset def_3CAE - 0B2ACh
.rodata:000000000000B2AC                 dd offset def_3CAE - 0B2ACh, offset def_3CAE - 0B2ACh
.rodata:000000000000B2AC                 dd offset def_3CAE - 0B2ACh, offset def_3CAE - 0B2ACh
.rodata:000000000000B2AC                 dd offset def_3CAE - 0B2ACh, offset def_3CAE - 0B2ACh
.rodata:000000000000B2AC                 dd offset def_3CAE - 0B2ACh, offset def_3CAE - 0B2ACh
.rodata:000000000000B2AC                 dd offset def_3CAE - 0B2ACh, offset def_3CAE - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3F60 - 0B2ACh, offset loc_3F50 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3F50 - 0B2ACh, offset loc_3F20 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3F50 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3F50 - 0B2ACh, offset loc_3DB3 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3F50 - 0B2ACh, offset loc_3F50 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3F50 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3F50 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3F50 - 0B2ACh, offset loc_3F50 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3F50 - 0B2ACh, offset loc_3D83 - 0B2ACh
.rodata:000000000000B2AC                 dd offset def_3CAE - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3F50 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3E28 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3F50 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3F50 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3EF8 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3EF8 - 0B2ACh, offset loc_3CB3 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3F50 - 0B2ACh, offset loc_3CB3 - 0B2ACh
.rodata:000000000000B2AC                 dd offset loc_3F20 - 0B2ACh
.rodata:000000000000B4A8 jpt_403A        dd offset loc_40A0 - 0B4A8h, offset def_403A - 0B4A8h
.rodata:000000000000B4A8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000B4A8                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000B4A8                 dd offset def_403A - 0B4A8h, offset def_403A - 0B4A8h ; jump table for switch statement
.rodata:000000000000B4A8                 dd offset def_403A - 0B4A8h, offset def_403A - 0B4A8h
.rodata:000000000000B4A8                 dd offset def_403A - 0B4A8h, offset loc_4090 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_41E0 - 0B4A8h, offset loc_41C8 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4078 - 0B4A8h, offset loc_41B8 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4060 - 0B4A8h, offset loc_41A0 - 0B4A8h
.rodata:000000000000B4A8                 dd offset def_403A - 0B4A8h, offset def_403A - 0B4A8h
.rodata:000000000000B4A8                 dd offset def_403A - 0B4A8h, offset def_403A - 0B4A8h
.rodata:000000000000B4A8                 dd offset def_403A - 0B4A8h, offset def_403A - 0B4A8h
.rodata:000000000000B4A8                 dd offset def_403A - 0B4A8h, offset def_403A - 0B4A8h
.rodata:000000000000B4A8                 dd offset def_403A - 0B4A8h, offset def_403A - 0B4A8h
.rodata:000000000000B4A8                 dd offset def_403A - 0B4A8h, offset def_403A - 0B4A8h
.rodata:000000000000B4A8                 dd offset def_403A - 0B4A8h, offset def_403A - 0B4A8h
.rodata:000000000000B4A8                 dd offset def_403A - 0B4A8h, offset def_403A - 0B4A8h
.rodata:000000000000B4A8                 dd offset def_403A - 0B4A8h, offset def_403A - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4188 - 0B4A8h, offset loc_4170 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4170 - 0B4A8h, offset loc_4158 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4170 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4170 - 0B4A8h, offset loc_3DB0 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4170 - 0B4A8h, offset loc_4170 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4170 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4170 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4170 - 0B4A8h, offset loc_4170 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4170 - 0B4A8h, offset loc_3D80 - 0B4A8h
.rodata:000000000000B4A8                 dd offset def_403A - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4170 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4040 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4170 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4170 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_4140 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4140 - 0B4A8h, offset loc_3CB0 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4170 - 0B4A8h, offset loc_3CB0 - 0B4A8h
.rodata:000000000000B4A8                 dd offset loc_4158 - 0B4A8h
.rodata:000000000000B6A4                 align 20h
.rodata:000000000000B6C0                 public quoting_style_vals
.rodata:000000000000B6C0 quoting_style_vals db    0
.rodata:000000000000B6C1                 db    0
.rodata:000000000000B6C2                 db    0
.rodata:000000000000B6C3                 db    0
.rodata:000000000000B6C4                 db    1
.rodata:000000000000B6C5                 db    0
.rodata:000000000000B6C6                 db    0
.rodata:000000000000B6C7                 db    0
.rodata:000000000000B6C8                 db    2
.rodata:000000000000B6C9                 db    0
.rodata:000000000000B6CA                 db    0
.rodata:000000000000B6CB                 db    0
.rodata:000000000000B6CC                 db    3
.rodata:000000000000B6CD                 db    0
.rodata:000000000000B6CE                 db    0
.rodata:000000000000B6CF                 db    0
.rodata:000000000000B6D0                 db    4
.rodata:000000000000B6D1                 db    0
.rodata:000000000000B6D2                 db    0
.rodata:000000000000B6D3                 db    0
.rodata:000000000000B6D4                 db    5
.rodata:000000000000B6D5                 db    0
.rodata:000000000000B6D6                 db    0
.rodata:000000000000B6D7                 db    0
.rodata:000000000000B6D8                 db    6
.rodata:000000000000B6D9                 db    0
.rodata:000000000000B6DA                 db    0
.rodata:000000000000B6DB                 db    0
.rodata:000000000000B6DC                 db    7
.rodata:000000000000B6DD                 db    0
.rodata:000000000000B6DE                 db    0
.rodata:000000000000B6DF                 db    0
.rodata:000000000000B6E0                 db    8
.rodata:000000000000B6E1                 db    0
.rodata:000000000000B6E2                 db    0
.rodata:000000000000B6E3                 db    0
.rodata:000000000000B6E4                 db    9
.rodata:000000000000B6E5                 db    0
.rodata:000000000000B6E6                 db    0
.rodata:000000000000B6E7                 db    0
.rodata:000000000000B6E8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000B6F4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000B6FB ; const char aC_0[]
.rodata:000000000000B6FB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_571C↑o
.rodata:000000000000B6FF ; const char aWrittenByS[]
.rodata:000000000000B6FF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000B6FF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000B70F ; const char aWrittenBySAndS[]
.rodata:000000000000B70F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000B70F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000B726 ; const char aWrittenBySSAnd[]
.rodata:000000000000B726 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000B726                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000B742 ; const char aReportBugsToS[]
.rodata:000000000000B742 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000B742                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000B757 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000B757                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000B76D ; const char aSHomePageS[]
.rodata:000000000000B76D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000B76D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000B781                 align 8
.rodata:000000000000B788 ; const char aLicenseGplv3Gn[]
.rodata:000000000000B788 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000B788                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000B788                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000B788                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000B788                 db '.',0Ah
.rodata:000000000000B788                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000B788                 db 0Ah,0
.rodata:000000000000B854                 align 8
.rodata:000000000000B858 ; const char aWrittenBySSSAn[]
.rodata:000000000000B858 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000B858                                         ; DATA XREF: version_etc_arn:loc_5970↑o
.rodata:000000000000B858                 db 'and %s.',0Ah,0
.rodata:000000000000B878 ; const char aWrittenBySSSSA[]
.rodata:000000000000B878 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000B878                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000B878                 db '%s, and %s.',0Ah,0
.rodata:000000000000B89C                 align 20h
.rodata:000000000000B8A0 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000B8A0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000B8A0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000B8A0                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000B8C8 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000B8C8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000B8C8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000B8C8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000B8F4                 align 8
.rodata:000000000000B8F8 ; const char aWrittenBySSSSS[]
.rodata:000000000000B8F8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000B8F8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000B8F8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000B8F8                 db 'and %s.',0Ah,0
.rodata:000000000000B928 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000B928 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000B928                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000B928                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000B928                 db '%s, and %s.',0Ah,0
.rodata:000000000000B95C                 align 20h
.rodata:000000000000B960 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000B960                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000B960                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000B960                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000B99C                 align 20h
.rodata:000000000000B9A0 ; const char aGeneralHelpUsi[]
.rodata:000000000000B9A0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000B9A0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000B9A0                 db 0
.rodata:000000000000B9E1                 align 4
.rodata:000000000000B9E4 jpt_5784        dd offset loc_5806 - 0B9E4h
.rodata:000000000000B9E4                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000B9E4                                         ; version_etc_arn+9D↑r
.rodata:000000000000B9E4                 dd offset loc_5898 - 0B9E4h ; jump table for switch statement
.rodata:000000000000B9E4                 dd offset loc_58D8 - 0B9E4h
.rodata:000000000000B9E4                 dd offset loc_5920 - 0B9E4h
.rodata:000000000000B9E4                 dd offset loc_5970 - 0B9E4h
.rodata:000000000000B9E4                 dd offset loc_59C8 - 0B9E4h
.rodata:000000000000B9E4                 dd offset loc_59F8 - 0B9E4h
.rodata:000000000000B9E4                 dd offset loc_5A60 - 0B9E4h
.rodata:000000000000B9E4                 dd offset loc_5790 - 0B9E4h
.rodata:000000000000B9E4                 dd offset loc_5840 - 0B9E4h
.rodata:000000000000BA0C                 align 20h
.rodata:000000000000BA20                 public version_etc_copyright
.rodata:000000000000BA20 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000BA20                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000BA4F ; const char aMemoryExhauste[]
.rodata:000000000000BA4F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000BA60 ; const char file[]
.rodata:000000000000BA60 file            db '../coreutils-8.31/lib/xfts.c',0
.rodata:000000000000BA60                                         ; DATA XREF: xfts_open+37↑o
.rodata:000000000000BA7D ; const char assertion[]
.rodata:000000000000BA7D assertion       db 'errno != EINVAL',0  ; DATA XREF: xfts_open+3E↑o
.rodata:000000000000BA8D                 align 10h
.rodata:000000000000BA90 ; const char _PRETTY_FUNCTION___3434[]
.rodata:000000000000BA90 __PRETTY_FUNCTION___3434 db 'xfts_open',0
.rodata:000000000000BA90                                         ; DATA XREF: xfts_open:loc_5FC0↑o
.rodata:000000000000BA9A                 align 20h
.rodata:000000000000BAA0 ; const char aCoreutils831Li_0[]
.rodata:000000000000BAA0 aCoreutils831Li_0 db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:000000000000BAA0                                         ; DATA XREF: xstrtoul+38C↑o
.rodata:000000000000BAC0 ; const char a0StrtolBaseStr[]
.rodata:000000000000BAC0 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:000000000000BAC0                                         ; DATA XREF: xstrtoul+393↑o
.rodata:000000000000BAE6                 align 8
.rodata:000000000000BAE8 jpt_61E6        dd offset loc_6336 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                                         ; DATA XREF: xstrtoul+1C4↑o
.rodata:000000000000BAE8                                         ; xstrtoul+1CF↑r
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset loc_6313 - 0BAE8h ; jump table for switch statement
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset loc_634C - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset loc_62CF - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset loc_61E8 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset loc_62F0 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset loc_62AF - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset loc_628A - 0BAE8h
.rodata:000000000000BAE8                 dd offset loc_6264 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset loc_624D - 0BAE8h, offset loc_6210 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset loc_634C - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset loc_62CF - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset loc_61E8 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset loc_62AF - 0BAE8h, offset def_61E6 - 0BAE8h
.rodata:000000000000BAE8                 dd offset def_61E6 - 0BAE8h, offset loc_6237 - 0BAE8h
.rodata:000000000000BBC0 ; const char _PRETTY_FUNCTION___4162[]
.rodata:000000000000BBC0 __PRETTY_FUNCTION___4162 db 'xstrtoul',0
.rodata:000000000000BBC0                                         ; DATA XREF: xstrtoul:loc_6395↑o
.rodata:000000000000BBC9 off_BBC9        dd offset loc_2E2E      ; DATA XREF: fts_safe_changedir+43↑o
.rodata:000000000000BBC9                                         ; fts_safe_changedir+14F↑o ...
.rodata:000000000000BBCD                 align 20h
.rodata:000000000000BBE0 CSWTCH_53       db    0                 ; DATA XREF: fts_build+174↑o
.rodata:000000000000BBE0                                         ; fts_build:loc_79E6↑o
.rodata:000000000000BBE1                 db  10h
.rodata:000000000000BBE2                 db    0
.rodata:000000000000BBE3                 db    0
.rodata:000000000000BBE4                 db    0
.rodata:000000000000BBE5                 db  20h
.rodata:000000000000BBE6                 db    0
.rodata:000000000000BBE7                 db    0
.rodata:000000000000BBE8                 db    0
.rodata:000000000000BBE9                 db    0
.rodata:000000000000BBEA                 db    0
.rodata:000000000000BBEB                 db    0
.rodata:000000000000BBEC                 db    0
.rodata:000000000000BBED                 db  40h ; @
.rodata:000000000000BBEE                 db    0
.rodata:000000000000BBEF                 db    0
.rodata:000000000000BBF0                 db    0
.rodata:000000000000BBF1                 db    0
.rodata:000000000000BBF2                 db    0
.rodata:000000000000BBF3                 db    0
.rodata:000000000000BBF4                 db    0
.rodata:000000000000BBF5                 db  60h ; `
.rodata:000000000000BBF6                 db    0
.rodata:000000000000BBF7                 db    0
.rodata:000000000000BBF8                 db    0
.rodata:000000000000BBF9                 db    0
.rodata:000000000000BBFA                 db    0
.rodata:000000000000BBFB                 db    0
.rodata:000000000000BBFC                 db    0
.rodata:000000000000BBFD                 db  80h
.rodata:000000000000BBFE                 db    0
.rodata:000000000000BBFF                 db    0
.rodata:000000000000BC00                 db    0
.rodata:000000000000BC01                 db    0
.rodata:000000000000BC02                 db    0
.rodata:000000000000BC03                 db    0
.rodata:000000000000BC04                 db    0
.rodata:000000000000BC05                 db 0A0h
.rodata:000000000000BC06                 db    0
.rodata:000000000000BC07                 db    0
.rodata:000000000000BC08                 db    0
.rodata:000000000000BC09                 db    0
.rodata:000000000000BC0A                 db    0
.rodata:000000000000BC0B                 db    0
.rodata:000000000000BC0C                 db    0
.rodata:000000000000BC0D                 db 0C0h
.rodata:000000000000BC0E                 db    0
.rodata:000000000000BC0F                 db    0
.rodata:000000000000BC10 ; const char aCoreutils831Li_1[]
.rodata:000000000000BC10 aCoreutils831Li_1 db '../coreutils-8.31/lib/cycle-check.c',0
.rodata:000000000000BC10                                         ; DATA XREF: cycle_check+6E↑o
.rodata:000000000000BC34 ; const char aStateMagic9827[]
.rodata:000000000000BC34 aStateMagic9827 db 'state->magic == 9827862',0
.rodata:000000000000BC34                                         ; DATA XREF: cycle_check+75↑o
.rodata:000000000000BC4C                 align 10h
.rodata:000000000000BC50 ; const char _PRETTY_FUNCTION___3994[]
.rodata:000000000000BC50 __PRETTY_FUNCTION___3994 db 'cycle_check',0
.rodata:000000000000BC50                                         ; DATA XREF: cycle_check:loc_89D7↑o
.rodata:000000000000BC5C aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000BC5E aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_8AB0↑o
.rodata:000000000000BC64 aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:000000000000BC64                                         ; DATA XREF: hash_print_statistics:loc_8FE5↑o
.rodata:000000000000BC7C aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:000000000000BC7C                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:000000000000BC94 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:000000000000BC94                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:000000000000BCAC                 align 10h
.rodata:000000000000BCB0 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:000000000000BCB0                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:000000000000BCD1                 align 20h
.rodata:000000000000BCE0 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:000000000000BCE0                                         ; hash_initialize:loc_9450↑o
.rodata:000000000000BCE1                 db    0
.rodata:000000000000BCE2                 db    0
.rodata:000000000000BCE3                 db    0
.rodata:000000000000BCE4                 db    0
.rodata:000000000000BCE5                 db    0
.rodata:000000000000BCE6                 db  80h
.rodata:000000000000BCE7                 db  3Fh ; ?
.rodata:000000000000BCE8                 db 0CDh
.rodata:000000000000BCE9                 db 0CCh
.rodata:000000000000BCEA                 db  4Ch ; L
.rodata:000000000000BCEB                 db  3Fh ; ?
.rodata:000000000000BCEC                 db 0F4h
.rodata:000000000000BCED                 db 0FDh
.rodata:000000000000BCEE                 db 0B4h
.rodata:000000000000BCEF                 db  3Fh ; ?
.rodata:000000000000BCF0                 db    0
.rodata:000000000000BCF1                 db    0
.rodata:000000000000BCF2                 db    0
.rodata:000000000000BCF3                 db    0
.rodata:000000000000BCF4 dword_BCF4      dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:000000000000BCF4                                         ; check_tuning+4A↑r
.rodata:000000000000BCF8 dword_BCF8      dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:000000000000BCFC dword_BCFC      dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:000000000000BD00 dword_BD00      dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:000000000000BD04 dword_BD04      dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:000000000000BD08 dword_BD08      dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:000000000000BD0C dword_BD0C      dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:000000000000BD0C                                         ; hash_rehash+40↑r ...
.rodata:000000000000BD10 dword_BD10      dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:000000000000BD10                                         ; hash_initialize+150↑r ...
.rodata:000000000000BD14                 align 8
.rodata:000000000000BD18 qword_BD18      dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:000000000000BD18                                         ; hash_print_statistics+11F↑r
.rodata:000000000000BD20 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000BD20                                         ; locale_charset:loc_9E90↑o
.rodata:000000000000BD20 _rodata         ends
.rodata:000000000000BD20
LOAD:000000000000BD26 ; ===========================================================================
LOAD:000000000000BD26
LOAD:000000000000BD26 ; Segment type: Pure code
LOAD:000000000000BD26 ; Segment permissions: Read/Execute
LOAD:000000000000BD26 LOAD            segment byte public 'CODE' use64
LOAD:000000000000BD26                 assume cs:LOAD
LOAD:000000000000BD26                 ;org 0BD26h
LOAD:000000000000BD26                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000BD26                 align 8
LOAD:000000000000BD26 LOAD            ends
LOAD:000000000000BD26
.eh_frame_hdr:000000000000BD28 ; ===========================================================================
.eh_frame_hdr:000000000000BD28
.eh_frame_hdr:000000000000BD28 ; Segment type: Pure data
.eh_frame_hdr:000000000000BD28 ; Segment permissions: Read
.eh_frame_hdr:000000000000BD28 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000BD28                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000BD28                 ;org 0BD28h
.eh_frame_hdr:000000000000BD28 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000BD29                 db  1Bh
.eh_frame_hdr:000000000000BD2A                 db    3
.eh_frame_hdr:000000000000BD2B                 db  3Bh ; ;
.eh_frame_hdr:000000000000BD2C                 db 0A4h
.eh_frame_hdr:000000000000BD2D                 db    4
.eh_frame_hdr:000000000000BD2E                 db    0
.eh_frame_hdr:000000000000BD2F                 db    0
.eh_frame_hdr:000000000000BD30                 db  93h
.eh_frame_hdr:000000000000BD31                 db    0
.eh_frame_hdr:000000000000BD32                 db    0
.eh_frame_hdr:000000000000BD33                 db    0
.eh_frame_hdr:000000000000BD34                 db 0D8h
.eh_frame_hdr:000000000000BD35                 db  5Bh ; [
.eh_frame_hdr:000000000000BD36                 db 0FFh
.eh_frame_hdr:000000000000BD37                 db 0FFh
.eh_frame_hdr:000000000000BD38                 db 0F0h
.eh_frame_hdr:000000000000BD39                 db    4
.eh_frame_hdr:000000000000BD3A                 db    0
.eh_frame_hdr:000000000000BD3B                 db    0
.eh_frame_hdr:000000000000BD3C                 db    8
.eh_frame_hdr:000000000000BD3D                 db  60h ; `
.eh_frame_hdr:000000000000BD3E                 db 0FFh
.eh_frame_hdr:000000000000BD3F                 db 0FFh
.eh_frame_hdr:000000000000BD40                 db  18h
.eh_frame_hdr:000000000000BD41                 db    5
.eh_frame_hdr:000000000000BD42                 db    0
.eh_frame_hdr:000000000000BD43                 db    0
.eh_frame_hdr:000000000000BD44                 db  18h
.eh_frame_hdr:000000000000BD45                 db  60h ; `
.eh_frame_hdr:000000000000BD46                 db 0FFh
.eh_frame_hdr:000000000000BD47                 db 0FFh
.eh_frame_hdr:000000000000BD48                 db  5Ch ; \
.eh_frame_hdr:000000000000BD49                 db    5
.eh_frame_hdr:000000000000BD4A                 db    0
.eh_frame_hdr:000000000000BD4B                 db    0
.eh_frame_hdr:000000000000BD4C                 db  18h
.eh_frame_hdr:000000000000BD4D                 db  65h ; e
.eh_frame_hdr:000000000000BD4E                 db 0FFh
.eh_frame_hdr:000000000000BD4F                 db 0FFh
.eh_frame_hdr:000000000000BD50                 db 0C0h
.eh_frame_hdr:000000000000BD51                 db    4
.eh_frame_hdr:000000000000BD52                 db    0
.eh_frame_hdr:000000000000BD53                 db    0
.eh_frame_hdr:000000000000BD54                 db  28h ; (
.eh_frame_hdr:000000000000BD55                 db  66h ; f
.eh_frame_hdr:000000000000BD56                 db 0FFh
.eh_frame_hdr:000000000000BD57                 db 0FFh
.eh_frame_hdr:000000000000BD58                 db  30h ; 0
.eh_frame_hdr:000000000000BD59                 db    5
.eh_frame_hdr:000000000000BD5A                 db    0
.eh_frame_hdr:000000000000BD5B                 db    0
.eh_frame_hdr:000000000000BD5C                 db 0A8h
.eh_frame_hdr:000000000000BD5D                 db  6Ah ; j
.eh_frame_hdr:000000000000BD5E                 db 0FFh
.eh_frame_hdr:000000000000BD5F                 db 0FFh
.eh_frame_hdr:000000000000BD60                 db 0C8h
.eh_frame_hdr:000000000000BD61                 db    5
.eh_frame_hdr:000000000000BD62                 db    0
.eh_frame_hdr:000000000000BD63                 db    0
.eh_frame_hdr:000000000000BD64                 db  28h ; (
.eh_frame_hdr:000000000000BD65                 db  6Bh ; k
.eh_frame_hdr:000000000000BD66                 db 0FFh
.eh_frame_hdr:000000000000BD67                 db 0FFh
.eh_frame_hdr:000000000000BD68                 db    4
.eh_frame_hdr:000000000000BD69                 db    6
.eh_frame_hdr:000000000000BD6A                 db    0
.eh_frame_hdr:000000000000BD6B                 db    0
.eh_frame_hdr:000000000000BD6C                 db  58h ; X
.eh_frame_hdr:000000000000BD6D                 db  6Bh ; k
.eh_frame_hdr:000000000000BD6E                 db 0FFh
.eh_frame_hdr:000000000000BD6F                 db 0FFh
.eh_frame_hdr:000000000000BD70                 db  18h
.eh_frame_hdr:000000000000BD71                 db    6
.eh_frame_hdr:000000000000BD72                 db    0
.eh_frame_hdr:000000000000BD73                 db    0
.eh_frame_hdr:000000000000BD74                 db  78h ; x
.eh_frame_hdr:000000000000BD75                 db  6Bh ; k
.eh_frame_hdr:000000000000BD76                 db 0FFh
.eh_frame_hdr:000000000000BD77                 db 0FFh
.eh_frame_hdr:000000000000BD78                 db  34h ; 4
.eh_frame_hdr:000000000000BD79                 db    6
.eh_frame_hdr:000000000000BD7A                 db    0
.eh_frame_hdr:000000000000BD7B                 db    0
.eh_frame_hdr:000000000000BD7C                 db 0D8h
.eh_frame_hdr:000000000000BD7D                 db  6Bh ; k
.eh_frame_hdr:000000000000BD7E                 db 0FFh
.eh_frame_hdr:000000000000BD7F                 db 0FFh
.eh_frame_hdr:000000000000BD80                 db  58h ; X
.eh_frame_hdr:000000000000BD81                 db    6
.eh_frame_hdr:000000000000BD82                 db    0
.eh_frame_hdr:000000000000BD83                 db    0
.eh_frame_hdr:000000000000BD84                 db  38h ; 8
.eh_frame_hdr:000000000000BD85                 db  6Ch ; l
.eh_frame_hdr:000000000000BD86                 db 0FFh
.eh_frame_hdr:000000000000BD87                 db 0FFh
.eh_frame_hdr:000000000000BD88                 db  7Ch ; |
.eh_frame_hdr:000000000000BD89                 db    6
.eh_frame_hdr:000000000000BD8A                 db    0
.eh_frame_hdr:000000000000BD8B                 db    0
.eh_frame_hdr:000000000000BD8C                 db 0C8h
.eh_frame_hdr:000000000000BD8D                 db  79h ; y
.eh_frame_hdr:000000000000BD8E                 db 0FFh
.eh_frame_hdr:000000000000BD8F                 db 0FFh
.eh_frame_hdr:000000000000BD90                 db 0CCh
.eh_frame_hdr:000000000000BD91                 db    6
.eh_frame_hdr:000000000000BD92                 db    0
.eh_frame_hdr:000000000000BD93                 db    0
.eh_frame_hdr:000000000000BD94                 db 0E8h
.eh_frame_hdr:000000000000BD95                 db  7Ah ; z
.eh_frame_hdr:000000000000BD96                 db 0FFh
.eh_frame_hdr:000000000000BD97                 db 0FFh
.eh_frame_hdr:000000000000BD98                 db  28h ; (
.eh_frame_hdr:000000000000BD99                 db    7
.eh_frame_hdr:000000000000BD9A                 db    0
.eh_frame_hdr:000000000000BD9B                 db    0
.eh_frame_hdr:000000000000BD9C                 db 0F8h
.eh_frame_hdr:000000000000BD9D                 db  7Ah ; z
.eh_frame_hdr:000000000000BD9E                 db 0FFh
.eh_frame_hdr:000000000000BD9F                 db 0FFh
.eh_frame_hdr:000000000000BDA0                 db  3Ch ; <
.eh_frame_hdr:000000000000BDA1                 db    7
.eh_frame_hdr:000000000000BDA2                 db    0
.eh_frame_hdr:000000000000BDA3                 db    0
.eh_frame_hdr:000000000000BDA4                 db    8
.eh_frame_hdr:000000000000BDA5                 db  7Bh ; {
.eh_frame_hdr:000000000000BDA6                 db 0FFh
.eh_frame_hdr:000000000000BDA7                 db 0FFh
.eh_frame_hdr:000000000000BDA8                 db  50h ; P
.eh_frame_hdr:000000000000BDA9                 db    7
.eh_frame_hdr:000000000000BDAA                 db    0
.eh_frame_hdr:000000000000BDAB                 db    0
.eh_frame_hdr:000000000000BDAC                 db 0B8h
.eh_frame_hdr:000000000000BDAD                 db  7Bh ; {
.eh_frame_hdr:000000000000BDAE                 db 0FFh
.eh_frame_hdr:000000000000BDAF                 db 0FFh
.eh_frame_hdr:000000000000BDB0                 db  80h
.eh_frame_hdr:000000000000BDB1                 db    7
.eh_frame_hdr:000000000000BDB2                 db    0
.eh_frame_hdr:000000000000BDB3                 db    0
.eh_frame_hdr:000000000000BDB4                 db    8
.eh_frame_hdr:000000000000BDB5                 db  7Ch ; |
.eh_frame_hdr:000000000000BDB6                 db 0FFh
.eh_frame_hdr:000000000000BDB7                 db 0FFh
.eh_frame_hdr:000000000000BDB8                 db  98h
.eh_frame_hdr:000000000000BDB9                 db    7
.eh_frame_hdr:000000000000BDBA                 db    0
.eh_frame_hdr:000000000000BDBB                 db    0
.eh_frame_hdr:000000000000BDBC                 db 0A8h
.eh_frame_hdr:000000000000BDBD                 db  7Ch ; |
.eh_frame_hdr:000000000000BDBE                 db 0FFh
.eh_frame_hdr:000000000000BDBF                 db 0FFh
.eh_frame_hdr:000000000000BDC0                 db 0B8h
.eh_frame_hdr:000000000000BDC1                 db    7
.eh_frame_hdr:000000000000BDC2                 db    0
.eh_frame_hdr:000000000000BDC3                 db    0
.eh_frame_hdr:000000000000BDC4                 db  98h
.eh_frame_hdr:000000000000BDC5                 db  7Dh ; }
.eh_frame_hdr:000000000000BDC6                 db 0FFh
.eh_frame_hdr:000000000000BDC7                 db 0FFh
.eh_frame_hdr:000000000000BDC8                 db 0FCh
.eh_frame_hdr:000000000000BDC9                 db    7
.eh_frame_hdr:000000000000BDCA                 db    0
.eh_frame_hdr:000000000000BDCB                 db    0
.eh_frame_hdr:000000000000BDCC                 db 0D8h
.eh_frame_hdr:000000000000BDCD                 db  8Fh
.eh_frame_hdr:000000000000BDCE                 db 0FFh
.eh_frame_hdr:000000000000BDCF                 db 0FFh
.eh_frame_hdr:000000000000BDD0                 db  74h ; t
.eh_frame_hdr:000000000000BDD1                 db    8
.eh_frame_hdr:000000000000BDD2                 db    0
.eh_frame_hdr:000000000000BDD3                 db    0
.eh_frame_hdr:000000000000BDD4                 db  88h
.eh_frame_hdr:000000000000BDD5                 db  91h
.eh_frame_hdr:000000000000BDD6                 db 0FFh
.eh_frame_hdr:000000000000BDD7                 db 0FFh
.eh_frame_hdr:000000000000BDD8                 db 0E0h
.eh_frame_hdr:000000000000BDD9                 db    8
.eh_frame_hdr:000000000000BDDA                 db    0
.eh_frame_hdr:000000000000BDDB                 db    0
.eh_frame_hdr:000000000000BDDC                 db 0C8h
.eh_frame_hdr:000000000000BDDD                 db  91h
.eh_frame_hdr:000000000000BDDE                 db 0FFh
.eh_frame_hdr:000000000000BDDF                 db 0FFh
.eh_frame_hdr:000000000000BDE0                 db  0Ch
.eh_frame_hdr:000000000000BDE1                 db    9
.eh_frame_hdr:000000000000BDE2                 db    0
.eh_frame_hdr:000000000000BDE3                 db    0
.eh_frame_hdr:000000000000BDE4                 db 0E8h
.eh_frame_hdr:000000000000BDE5                 db  91h
.eh_frame_hdr:000000000000BDE6                 db 0FFh
.eh_frame_hdr:000000000000BDE7                 db 0FFh
.eh_frame_hdr:000000000000BDE8                 db  20h
.eh_frame_hdr:000000000000BDE9                 db    9
.eh_frame_hdr:000000000000BDEA                 db    0
.eh_frame_hdr:000000000000BDEB                 db    0
.eh_frame_hdr:000000000000BDEC                 db    8
.eh_frame_hdr:000000000000BDED                 db  92h
.eh_frame_hdr:000000000000BDEE                 db 0FFh
.eh_frame_hdr:000000000000BDEF                 db 0FFh
.eh_frame_hdr:000000000000BDF0                 db  34h ; 4
.eh_frame_hdr:000000000000BDF1                 db    9
.eh_frame_hdr:000000000000BDF2                 db    0
.eh_frame_hdr:000000000000BDF3                 db    0
.eh_frame_hdr:000000000000BDF4                 db  48h ; H
.eh_frame_hdr:000000000000BDF5                 db  92h
.eh_frame_hdr:000000000000BDF6                 db 0FFh
.eh_frame_hdr:000000000000BDF7                 db 0FFh
.eh_frame_hdr:000000000000BDF8                 db  48h ; H
.eh_frame_hdr:000000000000BDF9                 db    9
.eh_frame_hdr:000000000000BDFA                 db    0
.eh_frame_hdr:000000000000BDFB                 db    0
.eh_frame_hdr:000000000000BDFC                 db  68h ; h
.eh_frame_hdr:000000000000BDFD                 db  92h
.eh_frame_hdr:000000000000BDFE                 db 0FFh
.eh_frame_hdr:000000000000BDFF                 db 0FFh
.eh_frame_hdr:000000000000BE00                 db  5Ch ; \
.eh_frame_hdr:000000000000BE01                 db    9
.eh_frame_hdr:000000000000BE02                 db    0
.eh_frame_hdr:000000000000BE03                 db    0
.eh_frame_hdr:000000000000BE04                 db  98h
.eh_frame_hdr:000000000000BE05                 db  92h
.eh_frame_hdr:000000000000BE06                 db 0FFh
.eh_frame_hdr:000000000000BE07                 db 0FFh
.eh_frame_hdr:000000000000BE08                 db  70h ; p
.eh_frame_hdr:000000000000BE09                 db    9
.eh_frame_hdr:000000000000BE0A                 db    0
.eh_frame_hdr:000000000000BE0B                 db    0
.eh_frame_hdr:000000000000BE0C                 db  18h
.eh_frame_hdr:000000000000BE0D                 db  93h
.eh_frame_hdr:000000000000BE0E                 db 0FFh
.eh_frame_hdr:000000000000BE0F                 db 0FFh
.eh_frame_hdr:000000000000BE10                 db 0C4h
.eh_frame_hdr:000000000000BE11                 db    9
.eh_frame_hdr:000000000000BE12                 db    0
.eh_frame_hdr:000000000000BE13                 db    0
.eh_frame_hdr:000000000000BE14                 db    8
.eh_frame_hdr:000000000000BE15                 db  94h
.eh_frame_hdr:000000000000BE16                 db 0FFh
.eh_frame_hdr:000000000000BE17                 db 0FFh
.eh_frame_hdr:000000000000BE18                 db  30h ; 0
.eh_frame_hdr:000000000000BE19                 db  0Ah
.eh_frame_hdr:000000000000BE1A                 db    0
.eh_frame_hdr:000000000000BE1B                 db    0
.eh_frame_hdr:000000000000BE1C                 db  18h
.eh_frame_hdr:000000000000BE1D                 db  94h
.eh_frame_hdr:000000000000BE1E                 db 0FFh
.eh_frame_hdr:000000000000BE1F                 db 0FFh
.eh_frame_hdr:000000000000BE20                 db  44h ; D
.eh_frame_hdr:000000000000BE21                 db  0Ah
.eh_frame_hdr:000000000000BE22                 db    0
.eh_frame_hdr:000000000000BE23                 db    0
.eh_frame_hdr:000000000000BE24                 db 0B8h
.eh_frame_hdr:000000000000BE25                 db  94h
.eh_frame_hdr:000000000000BE26                 db 0FFh
.eh_frame_hdr:000000000000BE27                 db 0FFh
.eh_frame_hdr:000000000000BE28                 db  70h ; p
.eh_frame_hdr:000000000000BE29                 db  0Ah
.eh_frame_hdr:000000000000BE2A                 db    0
.eh_frame_hdr:000000000000BE2B                 db    0
.eh_frame_hdr:000000000000BE2C                 db 0D8h
.eh_frame_hdr:000000000000BE2D                 db  94h
.eh_frame_hdr:000000000000BE2E                 db 0FFh
.eh_frame_hdr:000000000000BE2F                 db 0FFh
.eh_frame_hdr:000000000000BE30                 db  84h
.eh_frame_hdr:000000000000BE31                 db  0Ah
.eh_frame_hdr:000000000000BE32                 db    0
.eh_frame_hdr:000000000000BE33                 db    0
.eh_frame_hdr:000000000000BE34                 db 0E8h
.eh_frame_hdr:000000000000BE35                 db  94h
.eh_frame_hdr:000000000000BE36                 db 0FFh
.eh_frame_hdr:000000000000BE37                 db 0FFh
.eh_frame_hdr:000000000000BE38                 db  98h
.eh_frame_hdr:000000000000BE39                 db  0Ah
.eh_frame_hdr:000000000000BE3A                 db    0
.eh_frame_hdr:000000000000BE3B                 db    0
.eh_frame_hdr:000000000000BE3C                 db    8
.eh_frame_hdr:000000000000BE3D                 db  95h
.eh_frame_hdr:000000000000BE3E                 db 0FFh
.eh_frame_hdr:000000000000BE3F                 db 0FFh
.eh_frame_hdr:000000000000BE40                 db 0ACh
.eh_frame_hdr:000000000000BE41                 db  0Ah
.eh_frame_hdr:000000000000BE42                 db    0
.eh_frame_hdr:000000000000BE43                 db    0
.eh_frame_hdr:000000000000BE44                 db  28h ; (
.eh_frame_hdr:000000000000BE45                 db  95h
.eh_frame_hdr:000000000000BE46                 db 0FFh
.eh_frame_hdr:000000000000BE47                 db 0FFh
.eh_frame_hdr:000000000000BE48                 db 0C0h
.eh_frame_hdr:000000000000BE49                 db  0Ah
.eh_frame_hdr:000000000000BE4A                 db    0
.eh_frame_hdr:000000000000BE4B                 db    0
.eh_frame_hdr:000000000000BE4C                 db 0B8h
.eh_frame_hdr:000000000000BE4D                 db  95h
.eh_frame_hdr:000000000000BE4E                 db 0FFh
.eh_frame_hdr:000000000000BE4F                 db 0FFh
.eh_frame_hdr:000000000000BE50                 db 0DCh
.eh_frame_hdr:000000000000BE51                 db  0Ah
.eh_frame_hdr:000000000000BE52                 db    0
.eh_frame_hdr:000000000000BE53                 db    0
.eh_frame_hdr:000000000000BE54                 db  48h ; H
.eh_frame_hdr:000000000000BE55                 db  96h
.eh_frame_hdr:000000000000BE56                 db 0FFh
.eh_frame_hdr:000000000000BE57                 db 0FFh
.eh_frame_hdr:000000000000BE58                 db 0F8h
.eh_frame_hdr:000000000000BE59                 db  0Ah
.eh_frame_hdr:000000000000BE5A                 db    0
.eh_frame_hdr:000000000000BE5B                 db    0
.eh_frame_hdr:000000000000BE5C                 db  58h ; X
.eh_frame_hdr:000000000000BE5D                 db  96h
.eh_frame_hdr:000000000000BE5E                 db 0FFh
.eh_frame_hdr:000000000000BE5F                 db 0FFh
.eh_frame_hdr:000000000000BE60                 db  0Ch
.eh_frame_hdr:000000000000BE61                 db  0Bh
.eh_frame_hdr:000000000000BE62                 db    0
.eh_frame_hdr:000000000000BE63                 db    0
.eh_frame_hdr:000000000000BE64                 db  68h ; h
.eh_frame_hdr:000000000000BE65                 db  96h
.eh_frame_hdr:000000000000BE66                 db 0FFh
.eh_frame_hdr:000000000000BE67                 db 0FFh
.eh_frame_hdr:000000000000BE68                 db  20h
.eh_frame_hdr:000000000000BE69                 db  0Bh
.eh_frame_hdr:000000000000BE6A                 db    0
.eh_frame_hdr:000000000000BE6B                 db    0
.eh_frame_hdr:000000000000BE6C                 db    8
.eh_frame_hdr:000000000000BE6D                 db  97h
.eh_frame_hdr:000000000000BE6E                 db 0FFh
.eh_frame_hdr:000000000000BE6F                 db 0FFh
.eh_frame_hdr:000000000000BE70                 db  3Ch ; <
.eh_frame_hdr:000000000000BE71                 db  0Bh
.eh_frame_hdr:000000000000BE72                 db    0
.eh_frame_hdr:000000000000BE73                 db    0
.eh_frame_hdr:000000000000BE74                 db  18h
.eh_frame_hdr:000000000000BE75                 db  97h
.eh_frame_hdr:000000000000BE76                 db 0FFh
.eh_frame_hdr:000000000000BE77                 db 0FFh
.eh_frame_hdr:000000000000BE78                 db  50h ; P
.eh_frame_hdr:000000000000BE79                 db  0Bh
.eh_frame_hdr:000000000000BE7A                 db    0
.eh_frame_hdr:000000000000BE7B                 db    0
.eh_frame_hdr:000000000000BE7C                 db  38h ; 8
.eh_frame_hdr:000000000000BE7D                 db  97h
.eh_frame_hdr:000000000000BE7E                 db 0FFh
.eh_frame_hdr:000000000000BE7F                 db 0FFh
.eh_frame_hdr:000000000000BE80                 db  64h ; d
.eh_frame_hdr:000000000000BE81                 db  0Bh
.eh_frame_hdr:000000000000BE82                 db    0
.eh_frame_hdr:000000000000BE83                 db    0
.eh_frame_hdr:000000000000BE84                 db  48h ; H
.eh_frame_hdr:000000000000BE85                 db  97h
.eh_frame_hdr:000000000000BE86                 db 0FFh
.eh_frame_hdr:000000000000BE87                 db 0FFh
.eh_frame_hdr:000000000000BE88                 db  78h ; x
.eh_frame_hdr:000000000000BE89                 db  0Bh
.eh_frame_hdr:000000000000BE8A                 db    0
.eh_frame_hdr:000000000000BE8B                 db    0
.eh_frame_hdr:000000000000BE8C                 db 0D8h
.eh_frame_hdr:000000000000BE8D                 db  97h
.eh_frame_hdr:000000000000BE8E                 db 0FFh
.eh_frame_hdr:000000000000BE8F                 db 0FFh
.eh_frame_hdr:000000000000BE90                 db  94h
.eh_frame_hdr:000000000000BE91                 db  0Bh
.eh_frame_hdr:000000000000BE92                 db    0
.eh_frame_hdr:000000000000BE93                 db    0
.eh_frame_hdr:000000000000BE94                 db  78h ; x
.eh_frame_hdr:000000000000BE95                 db  98h
.eh_frame_hdr:000000000000BE96                 db 0FFh
.eh_frame_hdr:000000000000BE97                 db 0FFh
.eh_frame_hdr:000000000000BE98                 db 0B0h
.eh_frame_hdr:000000000000BE99                 db  0Bh
.eh_frame_hdr:000000000000BE9A                 db    0
.eh_frame_hdr:000000000000BE9B                 db    0
.eh_frame_hdr:000000000000BE9C                 db  88h
.eh_frame_hdr:000000000000BE9D                 db  98h
.eh_frame_hdr:000000000000BE9E                 db 0FFh
.eh_frame_hdr:000000000000BE9F                 db 0FFh
.eh_frame_hdr:000000000000BEA0                 db 0C4h
.eh_frame_hdr:000000000000BEA1                 db  0Bh
.eh_frame_hdr:000000000000BEA2                 db    0
.eh_frame_hdr:000000000000BEA3                 db    0
.eh_frame_hdr:000000000000BEA4                 db 0A8h
.eh_frame_hdr:000000000000BEA5                 db  98h
.eh_frame_hdr:000000000000BEA6                 db 0FFh
.eh_frame_hdr:000000000000BEA7                 db 0FFh
.eh_frame_hdr:000000000000BEA8                 db 0D8h
.eh_frame_hdr:000000000000BEA9                 db  0Bh
.eh_frame_hdr:000000000000BEAA                 db    0
.eh_frame_hdr:000000000000BEAB                 db    0
.eh_frame_hdr:000000000000BEAC                 db 0C8h
.eh_frame_hdr:000000000000BEAD                 db  98h
.eh_frame_hdr:000000000000BEAE                 db 0FFh
.eh_frame_hdr:000000000000BEAF                 db 0FFh
.eh_frame_hdr:000000000000BEB0                 db 0ECh
.eh_frame_hdr:000000000000BEB1                 db  0Bh
.eh_frame_hdr:000000000000BEB2                 db    0
.eh_frame_hdr:000000000000BEB3                 db    0
.eh_frame_hdr:000000000000BEB4                 db 0D8h
.eh_frame_hdr:000000000000BEB5                 db  98h
.eh_frame_hdr:000000000000BEB6                 db 0FFh
.eh_frame_hdr:000000000000BEB7                 db 0FFh
.eh_frame_hdr:000000000000BEB8                 db    0
.eh_frame_hdr:000000000000BEB9                 db  0Ch
.eh_frame_hdr:000000000000BEBA                 db    0
.eh_frame_hdr:000000000000BEBB                 db    0
.eh_frame_hdr:000000000000BEBC                 db 0F8h
.eh_frame_hdr:000000000000BEBD                 db  98h
.eh_frame_hdr:000000000000BEBE                 db 0FFh
.eh_frame_hdr:000000000000BEBF                 db 0FFh
.eh_frame_hdr:000000000000BEC0                 db  14h
.eh_frame_hdr:000000000000BEC1                 db  0Ch
.eh_frame_hdr:000000000000BEC2                 db    0
.eh_frame_hdr:000000000000BEC3                 db    0
.eh_frame_hdr:000000000000BEC4                 db  18h
.eh_frame_hdr:000000000000BEC5                 db  99h
.eh_frame_hdr:000000000000BEC6                 db 0FFh
.eh_frame_hdr:000000000000BEC7                 db 0FFh
.eh_frame_hdr:000000000000BEC8                 db  28h ; (
.eh_frame_hdr:000000000000BEC9                 db  0Ch
.eh_frame_hdr:000000000000BECA                 db    0
.eh_frame_hdr:000000000000BECB                 db    0
.eh_frame_hdr:000000000000BECC                 db  38h ; 8
.eh_frame_hdr:000000000000BECD                 db  99h
.eh_frame_hdr:000000000000BECE                 db 0FFh
.eh_frame_hdr:000000000000BECF                 db 0FFh
.eh_frame_hdr:000000000000BED0                 db  40h ; @
.eh_frame_hdr:000000000000BED1                 db  0Ch
.eh_frame_hdr:000000000000BED2                 db    0
.eh_frame_hdr:000000000000BED3                 db    0
.eh_frame_hdr:000000000000BED4                 db 0B8h
.eh_frame_hdr:000000000000BED5                 db  99h
.eh_frame_hdr:000000000000BED6                 db 0FFh
.eh_frame_hdr:000000000000BED7                 db 0FFh
.eh_frame_hdr:000000000000BED8                 db  68h ; h
.eh_frame_hdr:000000000000BED9                 db  0Ch
.eh_frame_hdr:000000000000BEDA                 db    0
.eh_frame_hdr:000000000000BEDB                 db    0
.eh_frame_hdr:000000000000BEDC                 db 0D8h
.eh_frame_hdr:000000000000BEDD                 db  9Dh
.eh_frame_hdr:000000000000BEDE                 db 0FFh
.eh_frame_hdr:000000000000BEDF                 db 0FFh
.eh_frame_hdr:000000000000BEE0                 db  7Ch ; |
.eh_frame_hdr:000000000000BEE1                 db  0Dh
.eh_frame_hdr:000000000000BEE2                 db    0
.eh_frame_hdr:000000000000BEE3                 db    0
.eh_frame_hdr:000000000000BEE4                 db 0F8h
.eh_frame_hdr:000000000000BEE5                 db  9Dh
.eh_frame_hdr:000000000000BEE6                 db 0FFh
.eh_frame_hdr:000000000000BEE7                 db 0FFh
.eh_frame_hdr:000000000000BEE8                 db  90h
.eh_frame_hdr:000000000000BEE9                 db  0Dh
.eh_frame_hdr:000000000000BEEA                 db    0
.eh_frame_hdr:000000000000BEEB                 db    0
.eh_frame_hdr:000000000000BEEC                 db  78h ; x
.eh_frame_hdr:000000000000BEED                 db  9Eh
.eh_frame_hdr:000000000000BEEE                 db 0FFh
.eh_frame_hdr:000000000000BEEF                 db 0FFh
.eh_frame_hdr:000000000000BEF0                 db 0ACh
.eh_frame_hdr:000000000000BEF1                 db  0Dh
.eh_frame_hdr:000000000000BEF2                 db    0
.eh_frame_hdr:000000000000BEF3                 db    0
.eh_frame_hdr:000000000000BEF4                 db  58h ; X
.eh_frame_hdr:000000000000BEF5                 db  9Fh
.eh_frame_hdr:000000000000BEF6                 db 0FFh
.eh_frame_hdr:000000000000BEF7                 db 0FFh
.eh_frame_hdr:000000000000BEF8                 db 0D8h
.eh_frame_hdr:000000000000BEF9                 db  0Dh
.eh_frame_hdr:000000000000BEFA                 db    0
.eh_frame_hdr:000000000000BEFB                 db    0
.eh_frame_hdr:000000000000BEFC                 db 0D8h
.eh_frame_hdr:000000000000BEFD                 db  9Fh
.eh_frame_hdr:000000000000BEFE                 db 0FFh
.eh_frame_hdr:000000000000BEFF                 db 0FFh
.eh_frame_hdr:000000000000BF00                 db 0F8h
.eh_frame_hdr:000000000000BF01                 db  0Dh
.eh_frame_hdr:000000000000BF02                 db    0
.eh_frame_hdr:000000000000BF03                 db    0
.eh_frame_hdr:000000000000BF04                 db 0F8h
.eh_frame_hdr:000000000000BF05                 db  9Fh
.eh_frame_hdr:000000000000BF06                 db 0FFh
.eh_frame_hdr:000000000000BF07                 db 0FFh
.eh_frame_hdr:000000000000BF08                 db  14h
.eh_frame_hdr:000000000000BF09                 db  0Eh
.eh_frame_hdr:000000000000BF0A                 db    0
.eh_frame_hdr:000000000000BF0B                 db    0
.eh_frame_hdr:000000000000BF0C                 db  28h ; (
.eh_frame_hdr:000000000000BF0D                 db 0A0h
.eh_frame_hdr:000000000000BF0E                 db 0FFh
.eh_frame_hdr:000000000000BF0F                 db 0FFh
.eh_frame_hdr:000000000000BF10                 db  28h ; (
.eh_frame_hdr:000000000000BF11                 db  0Eh
.eh_frame_hdr:000000000000BF12                 db    0
.eh_frame_hdr:000000000000BF13                 db    0
.eh_frame_hdr:000000000000BF14                 db  38h ; 8
.eh_frame_hdr:000000000000BF15                 db 0A0h
.eh_frame_hdr:000000000000BF16                 db 0FFh
.eh_frame_hdr:000000000000BF17                 db 0FFh
.eh_frame_hdr:000000000000BF18                 db  3Ch ; <
.eh_frame_hdr:000000000000BF19                 db  0Eh
.eh_frame_hdr:000000000000BF1A                 db    0
.eh_frame_hdr:000000000000BF1B                 db    0
.eh_frame_hdr:000000000000BF1C                 db  78h ; x
.eh_frame_hdr:000000000000BF1D                 db 0A0h
.eh_frame_hdr:000000000000BF1E                 db 0FFh
.eh_frame_hdr:000000000000BF1F                 db 0FFh
.eh_frame_hdr:000000000000BF20                 db  60h ; `
.eh_frame_hdr:000000000000BF21                 db  0Eh
.eh_frame_hdr:000000000000BF22                 db    0
.eh_frame_hdr:000000000000BF23                 db    0
.eh_frame_hdr:000000000000BF24                 db 0A8h
.eh_frame_hdr:000000000000BF25                 db 0A0h
.eh_frame_hdr:000000000000BF26                 db 0FFh
.eh_frame_hdr:000000000000BF27                 db 0FFh
.eh_frame_hdr:000000000000BF28                 db  74h ; t
.eh_frame_hdr:000000000000BF29                 db  0Eh
.eh_frame_hdr:000000000000BF2A                 db    0
.eh_frame_hdr:000000000000BF2B                 db    0
.eh_frame_hdr:000000000000BF2C                 db  38h ; 8
.eh_frame_hdr:000000000000BF2D                 db 0A1h
.eh_frame_hdr:000000000000BF2E                 db 0FFh
.eh_frame_hdr:000000000000BF2F                 db 0FFh
.eh_frame_hdr:000000000000BF30                 db  8Ch
.eh_frame_hdr:000000000000BF31                 db  0Eh
.eh_frame_hdr:000000000000BF32                 db    0
.eh_frame_hdr:000000000000BF33                 db    0
.eh_frame_hdr:000000000000BF34                 db  88h
.eh_frame_hdr:000000000000BF35                 db 0A1h
.eh_frame_hdr:000000000000BF36                 db 0FFh
.eh_frame_hdr:000000000000BF37                 db 0FFh
.eh_frame_hdr:000000000000BF38                 db 0A4h
.eh_frame_hdr:000000000000BF39                 db  0Eh
.eh_frame_hdr:000000000000BF3A                 db    0
.eh_frame_hdr:000000000000BF3B                 db    0
.eh_frame_hdr:000000000000BF3C                 db 0A8h
.eh_frame_hdr:000000000000BF3D                 db 0A1h
.eh_frame_hdr:000000000000BF3E                 db 0FFh
.eh_frame_hdr:000000000000BF3F                 db 0FFh
.eh_frame_hdr:000000000000BF40                 db 0C0h
.eh_frame_hdr:000000000000BF41                 db  0Eh
.eh_frame_hdr:000000000000BF42                 db    0
.eh_frame_hdr:000000000000BF43                 db    0
.eh_frame_hdr:000000000000BF44                 db 0D8h
.eh_frame_hdr:000000000000BF45                 db 0A1h
.eh_frame_hdr:000000000000BF46                 db 0FFh
.eh_frame_hdr:000000000000BF47                 db 0FFh
.eh_frame_hdr:000000000000BF48                 db 0DCh
.eh_frame_hdr:000000000000BF49                 db  0Eh
.eh_frame_hdr:000000000000BF4A                 db    0
.eh_frame_hdr:000000000000BF4B                 db    0
.eh_frame_hdr:000000000000BF4C                 db    8
.eh_frame_hdr:000000000000BF4D                 db 0A2h
.eh_frame_hdr:000000000000BF4E                 db 0FFh
.eh_frame_hdr:000000000000BF4F                 db 0FFh
.eh_frame_hdr:000000000000BF50                 db    4
.eh_frame_hdr:000000000000BF51                 db  0Fh
.eh_frame_hdr:000000000000BF52                 db    0
.eh_frame_hdr:000000000000BF53                 db    0
.eh_frame_hdr:000000000000BF54                 db  28h ; (
.eh_frame_hdr:000000000000BF55                 db 0A2h
.eh_frame_hdr:000000000000BF56                 db 0FFh
.eh_frame_hdr:000000000000BF57                 db 0FFh
.eh_frame_hdr:000000000000BF58                 db  20h
.eh_frame_hdr:000000000000BF59                 db  0Fh
.eh_frame_hdr:000000000000BF5A                 db    0
.eh_frame_hdr:000000000000BF5B                 db    0
.eh_frame_hdr:000000000000BF5C                 db  68h ; h
.eh_frame_hdr:000000000000BF5D                 db 0A2h
.eh_frame_hdr:000000000000BF5E                 db 0FFh
.eh_frame_hdr:000000000000BF5F                 db 0FFh
.eh_frame_hdr:000000000000BF60                 db  38h ; 8
.eh_frame_hdr:000000000000BF61                 db  0Fh
.eh_frame_hdr:000000000000BF62                 db    0
.eh_frame_hdr:000000000000BF63                 db    0
.eh_frame_hdr:000000000000BF64                 db 0B8h
.eh_frame_hdr:000000000000BF65                 db 0A2h
.eh_frame_hdr:000000000000BF66                 db 0FFh
.eh_frame_hdr:000000000000BF67                 db 0FFh
.eh_frame_hdr:000000000000BF68                 db  54h ; T
.eh_frame_hdr:000000000000BF69                 db  0Fh
.eh_frame_hdr:000000000000BF6A                 db    0
.eh_frame_hdr:000000000000BF6B                 db    0
.eh_frame_hdr:000000000000BF6C                 db 0E8h
.eh_frame_hdr:000000000000BF6D                 db 0A2h
.eh_frame_hdr:000000000000BF6E                 db 0FFh
.eh_frame_hdr:000000000000BF6F                 db 0FFh
.eh_frame_hdr:000000000000BF70                 db  68h ; h
.eh_frame_hdr:000000000000BF71                 db  0Fh
.eh_frame_hdr:000000000000BF72                 db    0
.eh_frame_hdr:000000000000BF73                 db    0
.eh_frame_hdr:000000000000BF74                 db    8
.eh_frame_hdr:000000000000BF75                 db 0A7h
.eh_frame_hdr:000000000000BF76                 db 0FFh
.eh_frame_hdr:000000000000BF77                 db 0FFh
.eh_frame_hdr:000000000000BF78                 db 0B8h
.eh_frame_hdr:000000000000BF79                 db  0Fh
.eh_frame_hdr:000000000000BF7A                 db    0
.eh_frame_hdr:000000000000BF7B                 db    0
.eh_frame_hdr:000000000000BF7C                 db  28h ; (
.eh_frame_hdr:000000000000BF7D                 db 0A7h
.eh_frame_hdr:000000000000BF7E                 db 0FFh
.eh_frame_hdr:000000000000BF7F                 db 0FFh
.eh_frame_hdr:000000000000BF80                 db 0CCh
.eh_frame_hdr:000000000000BF81                 db  0Fh
.eh_frame_hdr:000000000000BF82                 db    0
.eh_frame_hdr:000000000000BF83                 db    0
.eh_frame_hdr:000000000000BF84                 db  38h ; 8
.eh_frame_hdr:000000000000BF85                 db 0A7h
.eh_frame_hdr:000000000000BF86                 db 0FFh
.eh_frame_hdr:000000000000BF87                 db 0FFh
.eh_frame_hdr:000000000000BF88                 db 0E0h
.eh_frame_hdr:000000000000BF89                 db  0Fh
.eh_frame_hdr:000000000000BF8A                 db    0
.eh_frame_hdr:000000000000BF8B                 db    0
.eh_frame_hdr:000000000000BF8C                 db  48h ; H
.eh_frame_hdr:000000000000BF8D                 db 0A7h
.eh_frame_hdr:000000000000BF8E                 db 0FFh
.eh_frame_hdr:000000000000BF8F                 db 0FFh
.eh_frame_hdr:000000000000BF90                 db 0F4h
.eh_frame_hdr:000000000000BF91                 db  0Fh
.eh_frame_hdr:000000000000BF92                 db    0
.eh_frame_hdr:000000000000BF93                 db    0
.eh_frame_hdr:000000000000BF94                 db  58h ; X
.eh_frame_hdr:000000000000BF95                 db 0A7h
.eh_frame_hdr:000000000000BF96                 db 0FFh
.eh_frame_hdr:000000000000BF97                 db 0FFh
.eh_frame_hdr:000000000000BF98                 db    8
.eh_frame_hdr:000000000000BF99                 db  10h
.eh_frame_hdr:000000000000BF9A                 db    0
.eh_frame_hdr:000000000000BF9B                 db    0
.eh_frame_hdr:000000000000BF9C                 db  88h
.eh_frame_hdr:000000000000BF9D                 db 0A7h
.eh_frame_hdr:000000000000BF9E                 db 0FFh
.eh_frame_hdr:000000000000BF9F                 db 0FFh
.eh_frame_hdr:000000000000BFA0                 db  1Ch
.eh_frame_hdr:000000000000BFA1                 db  10h
.eh_frame_hdr:000000000000BFA2                 db    0
.eh_frame_hdr:000000000000BFA3                 db    0
.eh_frame_hdr:000000000000BFA4                 db  58h ; X
.eh_frame_hdr:000000000000BFA5                 db 0A9h
.eh_frame_hdr:000000000000BFA6                 db 0FFh
.eh_frame_hdr:000000000000BFA7                 db 0FFh
.eh_frame_hdr:000000000000BFA8                 db  58h ; X
.eh_frame_hdr:000000000000BFA9                 db  10h
.eh_frame_hdr:000000000000BFAA                 db    0
.eh_frame_hdr:000000000000BFAB                 db    0
.eh_frame_hdr:000000000000BFAC                 db  68h ; h
.eh_frame_hdr:000000000000BFAD                 db 0AAh
.eh_frame_hdr:000000000000BFAE                 db 0FFh
.eh_frame_hdr:000000000000BFAF                 db 0FFh
.eh_frame_hdr:000000000000BFB0                 db 0A8h
.eh_frame_hdr:000000000000BFB1                 db  10h
.eh_frame_hdr:000000000000BFB2                 db    0
.eh_frame_hdr:000000000000BFB3                 db    0
.eh_frame_hdr:000000000000BFB4                 db 0F8h
.eh_frame_hdr:000000000000BFB5                 db 0AAh
.eh_frame_hdr:000000000000BFB6                 db 0FFh
.eh_frame_hdr:000000000000BFB7                 db 0FFh
.eh_frame_hdr:000000000000BFB8                 db 0E0h
.eh_frame_hdr:000000000000BFB9                 db  10h
.eh_frame_hdr:000000000000BFBA                 db    0
.eh_frame_hdr:000000000000BFBB                 db    0
.eh_frame_hdr:000000000000BFBC                 db  48h ; H
.eh_frame_hdr:000000000000BFBD                 db 0ABh
.eh_frame_hdr:000000000000BFBE                 db 0FFh
.eh_frame_hdr:000000000000BFBF                 db 0FFh
.eh_frame_hdr:000000000000BFC0                 db  0Ch
.eh_frame_hdr:000000000000BFC1                 db  11h
.eh_frame_hdr:000000000000BFC2                 db    0
.eh_frame_hdr:000000000000BFC3                 db    0
.eh_frame_hdr:000000000000BFC4                 db  88h
.eh_frame_hdr:000000000000BFC5                 db 0ABh
.eh_frame_hdr:000000000000BFC6                 db 0FFh
.eh_frame_hdr:000000000000BFC7                 db 0FFh
.eh_frame_hdr:000000000000BFC8                 db  28h ; (
.eh_frame_hdr:000000000000BFC9                 db  11h
.eh_frame_hdr:000000000000BFCA                 db    0
.eh_frame_hdr:000000000000BFCB                 db    0
.eh_frame_hdr:000000000000BFCC                 db 0B8h
.eh_frame_hdr:000000000000BFCD                 db 0ACh
.eh_frame_hdr:000000000000BFCE                 db 0FFh
.eh_frame_hdr:000000000000BFCF                 db 0FFh
.eh_frame_hdr:000000000000BFD0                 db  64h ; d
.eh_frame_hdr:000000000000BFD1                 db  11h
.eh_frame_hdr:000000000000BFD2                 db    0
.eh_frame_hdr:000000000000BFD3                 db    0
.eh_frame_hdr:000000000000BFD4                 db  28h ; (
.eh_frame_hdr:000000000000BFD5                 db 0ADh
.eh_frame_hdr:000000000000BFD6                 db 0FFh
.eh_frame_hdr:000000000000BFD7                 db 0FFh
.eh_frame_hdr:000000000000BFD8                 db  88h
.eh_frame_hdr:000000000000BFD9                 db  11h
.eh_frame_hdr:000000000000BFDA                 db    0
.eh_frame_hdr:000000000000BFDB                 db    0
.eh_frame_hdr:000000000000BFDC                 db  98h
.eh_frame_hdr:000000000000BFDD                 db 0ADh
.eh_frame_hdr:000000000000BFDE                 db 0FFh
.eh_frame_hdr:000000000000BFDF                 db 0FFh
.eh_frame_hdr:000000000000BFE0                 db 0CCh
.eh_frame_hdr:000000000000BFE1                 db  11h
.eh_frame_hdr:000000000000BFE2                 db    0
.eh_frame_hdr:000000000000BFE3                 db    0
.eh_frame_hdr:000000000000BFE4                 db 0F8h
.eh_frame_hdr:000000000000BFE5                 db 0ADh
.eh_frame_hdr:000000000000BFE6                 db 0FFh
.eh_frame_hdr:000000000000BFE7                 db 0FFh
.eh_frame_hdr:000000000000BFE8                 db 0F8h
.eh_frame_hdr:000000000000BFE9                 db  11h
.eh_frame_hdr:000000000000BFEA                 db    0
.eh_frame_hdr:000000000000BFEB                 db    0
.eh_frame_hdr:000000000000BFEC                 db  68h ; h
.eh_frame_hdr:000000000000BFED                 db 0AEh
.eh_frame_hdr:000000000000BFEE                 db 0FFh
.eh_frame_hdr:000000000000BFEF                 db 0FFh
.eh_frame_hdr:000000000000BFF0                 db  20h
.eh_frame_hdr:000000000000BFF1                 db  12h
.eh_frame_hdr:000000000000BFF2                 db    0
.eh_frame_hdr:000000000000BFF3                 db    0
.eh_frame_hdr:000000000000BFF4                 db 0D8h
.eh_frame_hdr:000000000000BFF5                 db 0AEh
.eh_frame_hdr:000000000000BFF6                 db 0FFh
.eh_frame_hdr:000000000000BFF7                 db 0FFh
.eh_frame_hdr:000000000000BFF8                 db  40h ; @
.eh_frame_hdr:000000000000BFF9                 db  12h
.eh_frame_hdr:000000000000BFFA                 db    0
.eh_frame_hdr:000000000000BFFB                 db    0
.eh_frame_hdr:000000000000BFFC                 db  18h
.eh_frame_hdr:000000000000BFFD                 db 0AFh
.eh_frame_hdr:000000000000BFFE                 db 0FFh
.eh_frame_hdr:000000000000BFFF                 db 0FFh
.eh_frame_hdr:000000000000C000                 db  54h ; T
.eh_frame_hdr:000000000000C001                 db  12h
.eh_frame_hdr:000000000000C002                 db    0
.eh_frame_hdr:000000000000C003                 db    0
.eh_frame_hdr:000000000000C004                 db  98h
.eh_frame_hdr:000000000000C005                 db 0B1h
.eh_frame_hdr:000000000000C006                 db 0FFh
.eh_frame_hdr:000000000000C007                 db 0FFh
.eh_frame_hdr:000000000000C008                 db 0A4h
.eh_frame_hdr:000000000000C009                 db  12h
.eh_frame_hdr:000000000000C00A                 db    0
.eh_frame_hdr:000000000000C00B                 db    0
.eh_frame_hdr:000000000000C00C                 db  48h ; H
.eh_frame_hdr:000000000000C00D                 db 0B2h
.eh_frame_hdr:000000000000C00E                 db 0FFh
.eh_frame_hdr:000000000000C00F                 db 0FFh
.eh_frame_hdr:000000000000C010                 db 0E8h
.eh_frame_hdr:000000000000C011                 db  12h
.eh_frame_hdr:000000000000C012                 db    0
.eh_frame_hdr:000000000000C013                 db    0
.eh_frame_hdr:000000000000C014                 db    8
.eh_frame_hdr:000000000000C015                 db 0B3h
.eh_frame_hdr:000000000000C016                 db 0FFh
.eh_frame_hdr:000000000000C017                 db 0FFh
.eh_frame_hdr:000000000000C018                 db    4
.eh_frame_hdr:000000000000C019                 db  13h
.eh_frame_hdr:000000000000C01A                 db    0
.eh_frame_hdr:000000000000C01B                 db    0
.eh_frame_hdr:000000000000C01C                 db 0E8h
.eh_frame_hdr:000000000000C01D                 db 0BCh
.eh_frame_hdr:000000000000C01E                 db 0FFh
.eh_frame_hdr:000000000000C01F                 db 0FFh
.eh_frame_hdr:000000000000C020                 db  54h ; T
.eh_frame_hdr:000000000000C021                 db  13h
.eh_frame_hdr:000000000000C022                 db    0
.eh_frame_hdr:000000000000C023                 db    0
.eh_frame_hdr:000000000000C024                 db  98h
.eh_frame_hdr:000000000000C025                 db 0C0h
.eh_frame_hdr:000000000000C026                 db 0FFh
.eh_frame_hdr:000000000000C027                 db 0FFh
.eh_frame_hdr:000000000000C028                 db 0A0h
.eh_frame_hdr:000000000000C029                 db  13h
.eh_frame_hdr:000000000000C02A                 db    0
.eh_frame_hdr:000000000000C02B                 db    0
.eh_frame_hdr:000000000000C02C                 db  28h ; (
.eh_frame_hdr:000000000000C02D                 db 0C2h
.eh_frame_hdr:000000000000C02E                 db 0FFh
.eh_frame_hdr:000000000000C02F                 db 0FFh
.eh_frame_hdr:000000000000C030                 db 0D0h
.eh_frame_hdr:000000000000C031                 db  13h
.eh_frame_hdr:000000000000C032                 db    0
.eh_frame_hdr:000000000000C033                 db    0
.eh_frame_hdr:000000000000C034                 db 0A8h
.eh_frame_hdr:000000000000C035                 db 0C9h
.eh_frame_hdr:000000000000C036                 db 0FFh
.eh_frame_hdr:000000000000C037                 db 0FFh
.eh_frame_hdr:000000000000C038                 db  34h ; 4
.eh_frame_hdr:000000000000C039                 db  14h
.eh_frame_hdr:000000000000C03A                 db    0
.eh_frame_hdr:000000000000C03B                 db    0
.eh_frame_hdr:000000000000C03C                 db 0D8h
.eh_frame_hdr:000000000000C03D                 db 0C9h
.eh_frame_hdr:000000000000C03E                 db 0FFh
.eh_frame_hdr:000000000000C03F                 db 0FFh
.eh_frame_hdr:000000000000C040                 db  4Ch ; L
.eh_frame_hdr:000000000000C041                 db  14h
.eh_frame_hdr:000000000000C042                 db    0
.eh_frame_hdr:000000000000C043                 db    0
.eh_frame_hdr:000000000000C044                 db  28h ; (
.eh_frame_hdr:000000000000C045                 db 0CBh
.eh_frame_hdr:000000000000C046                 db 0FFh
.eh_frame_hdr:000000000000C047                 db 0FFh
.eh_frame_hdr:000000000000C048                 db 0B0h
.eh_frame_hdr:000000000000C049                 db  14h
.eh_frame_hdr:000000000000C04A                 db    0
.eh_frame_hdr:000000000000C04B                 db    0
.eh_frame_hdr:000000000000C04C                 db 0B8h
.eh_frame_hdr:000000000000C04D                 db 0CBh
.eh_frame_hdr:000000000000C04E                 db 0FFh
.eh_frame_hdr:000000000000C04F                 db 0FFh
.eh_frame_hdr:000000000000C050                 db 0F0h
.eh_frame_hdr:000000000000C051                 db  14h
.eh_frame_hdr:000000000000C052                 db    0
.eh_frame_hdr:000000000000C053                 db    0
.eh_frame_hdr:000000000000C054                 db  38h ; 8
.eh_frame_hdr:000000000000C055                 db 0CCh
.eh_frame_hdr:000000000000C056                 db 0FFh
.eh_frame_hdr:000000000000C057                 db 0FFh
.eh_frame_hdr:000000000000C058                 db  40h ; @
.eh_frame_hdr:000000000000C059                 db  15h
.eh_frame_hdr:000000000000C05A                 db    0
.eh_frame_hdr:000000000000C05B                 db    0
.eh_frame_hdr:000000000000C05C                 db  48h ; H
.eh_frame_hdr:000000000000C05D                 db 0CCh
.eh_frame_hdr:000000000000C05E                 db 0FFh
.eh_frame_hdr:000000000000C05F                 db 0FFh
.eh_frame_hdr:000000000000C060                 db  54h ; T
.eh_frame_hdr:000000000000C061                 db  15h
.eh_frame_hdr:000000000000C062                 db    0
.eh_frame_hdr:000000000000C063                 db    0
.eh_frame_hdr:000000000000C064                 db 0D8h
.eh_frame_hdr:000000000000C065                 db 0CCh
.eh_frame_hdr:000000000000C066                 db 0FFh
.eh_frame_hdr:000000000000C067                 db 0FFh
.eh_frame_hdr:000000000000C068                 db  70h ; p
.eh_frame_hdr:000000000000C069                 db  15h
.eh_frame_hdr:000000000000C06A                 db    0
.eh_frame_hdr:000000000000C06B                 db    0
.eh_frame_hdr:000000000000C06C                 db  48h ; H
.eh_frame_hdr:000000000000C06D                 db 0CDh
.eh_frame_hdr:000000000000C06E                 db 0FFh
.eh_frame_hdr:000000000000C06F                 db 0FFh
.eh_frame_hdr:000000000000C070                 db  90h
.eh_frame_hdr:000000000000C071                 db  15h
.eh_frame_hdr:000000000000C072                 db    0
.eh_frame_hdr:000000000000C073                 db    0
.eh_frame_hdr:000000000000C074                 db 0A8h
.eh_frame_hdr:000000000000C075                 db 0CDh
.eh_frame_hdr:000000000000C076                 db 0FFh
.eh_frame_hdr:000000000000C077                 db 0FFh
.eh_frame_hdr:000000000000C078                 db 0B0h
.eh_frame_hdr:000000000000C079                 db  15h
.eh_frame_hdr:000000000000C07A                 db    0
.eh_frame_hdr:000000000000C07B                 db    0
.eh_frame_hdr:000000000000C07C                 db  48h ; H
.eh_frame_hdr:000000000000C07D                 db 0CEh
.eh_frame_hdr:000000000000C07E                 db 0FFh
.eh_frame_hdr:000000000000C07F                 db 0FFh
.eh_frame_hdr:000000000000C080                 db 0C4h
.eh_frame_hdr:000000000000C081                 db  15h
.eh_frame_hdr:000000000000C082                 db    0
.eh_frame_hdr:000000000000C083                 db    0
.eh_frame_hdr:000000000000C084                 db  58h ; X
.eh_frame_hdr:000000000000C085                 db 0CEh
.eh_frame_hdr:000000000000C086                 db 0FFh
.eh_frame_hdr:000000000000C087                 db 0FFh
.eh_frame_hdr:000000000000C088                 db 0D8h
.eh_frame_hdr:000000000000C089                 db  15h
.eh_frame_hdr:000000000000C08A                 db    0
.eh_frame_hdr:000000000000C08B                 db    0
.eh_frame_hdr:000000000000C08C                 db  68h ; h
.eh_frame_hdr:000000000000C08D                 db 0CEh
.eh_frame_hdr:000000000000C08E                 db 0FFh
.eh_frame_hdr:000000000000C08F                 db 0FFh
.eh_frame_hdr:000000000000C090                 db 0ECh
.eh_frame_hdr:000000000000C091                 db  15h
.eh_frame_hdr:000000000000C092                 db    0
.eh_frame_hdr:000000000000C093                 db    0
.eh_frame_hdr:000000000000C094                 db  98h
.eh_frame_hdr:000000000000C095                 db 0CEh
.eh_frame_hdr:000000000000C096                 db 0FFh
.eh_frame_hdr:000000000000C097                 db 0FFh
.eh_frame_hdr:000000000000C098                 db    8
.eh_frame_hdr:000000000000C099                 db  16h
.eh_frame_hdr:000000000000C09A                 db    0
.eh_frame_hdr:000000000000C09B                 db    0
.eh_frame_hdr:000000000000C09C                 db 0B8h
.eh_frame_hdr:000000000000C09D                 db 0CFh
.eh_frame_hdr:000000000000C09E                 db 0FFh
.eh_frame_hdr:000000000000C09F                 db 0FFh
.eh_frame_hdr:000000000000C0A0                 db  68h ; h
.eh_frame_hdr:000000000000C0A1                 db  16h
.eh_frame_hdr:000000000000C0A2                 db    0
.eh_frame_hdr:000000000000C0A3                 db    0
.eh_frame_hdr:000000000000C0A4                 db  38h ; 8
.eh_frame_hdr:000000000000C0A5                 db 0D0h
.eh_frame_hdr:000000000000C0A6                 db 0FFh
.eh_frame_hdr:000000000000C0A7                 db 0FFh
.eh_frame_hdr:000000000000C0A8                 db  7Ch ; |
.eh_frame_hdr:000000000000C0A9                 db  16h
.eh_frame_hdr:000000000000C0AA                 db    0
.eh_frame_hdr:000000000000C0AB                 db    0
.eh_frame_hdr:000000000000C0AC                 db  78h ; x
.eh_frame_hdr:000000000000C0AD                 db 0D1h
.eh_frame_hdr:000000000000C0AE                 db 0FFh
.eh_frame_hdr:000000000000C0AF                 db 0FFh
.eh_frame_hdr:000000000000C0B0                 db 0DCh
.eh_frame_hdr:000000000000C0B1                 db  16h
.eh_frame_hdr:000000000000C0B2                 db    0
.eh_frame_hdr:000000000000C0B3                 db    0
.eh_frame_hdr:000000000000C0B4                 db  88h
.eh_frame_hdr:000000000000C0B5                 db 0D1h
.eh_frame_hdr:000000000000C0B6                 db 0FFh
.eh_frame_hdr:000000000000C0B7                 db 0FFh
.eh_frame_hdr:000000000000C0B8                 db 0F0h
.eh_frame_hdr:000000000000C0B9                 db  16h
.eh_frame_hdr:000000000000C0BA                 db    0
.eh_frame_hdr:000000000000C0BB                 db    0
.eh_frame_hdr:000000000000C0BC                 db  98h
.eh_frame_hdr:000000000000C0BD                 db 0D1h
.eh_frame_hdr:000000000000C0BE                 db 0FFh
.eh_frame_hdr:000000000000C0BF                 db 0FFh
.eh_frame_hdr:000000000000C0C0                 db    4
.eh_frame_hdr:000000000000C0C1                 db  17h
.eh_frame_hdr:000000000000C0C2                 db    0
.eh_frame_hdr:000000000000C0C3                 db    0
.eh_frame_hdr:000000000000C0C4                 db 0A8h
.eh_frame_hdr:000000000000C0C5                 db 0D1h
.eh_frame_hdr:000000000000C0C6                 db 0FFh
.eh_frame_hdr:000000000000C0C7                 db 0FFh
.eh_frame_hdr:000000000000C0C8                 db  18h
.eh_frame_hdr:000000000000C0C9                 db  17h
.eh_frame_hdr:000000000000C0CA                 db    0
.eh_frame_hdr:000000000000C0CB                 db    0
.eh_frame_hdr:000000000000C0CC                 db 0F8h
.eh_frame_hdr:000000000000C0CD                 db 0D1h
.eh_frame_hdr:000000000000C0CE                 db 0FFh
.eh_frame_hdr:000000000000C0CF                 db 0FFh
.eh_frame_hdr:000000000000C0D0                 db  2Ch ; ,
.eh_frame_hdr:000000000000C0D1                 db  17h
.eh_frame_hdr:000000000000C0D2                 db    0
.eh_frame_hdr:000000000000C0D3                 db    0
.eh_frame_hdr:000000000000C0D4                 db  58h ; X
.eh_frame_hdr:000000000000C0D5                 db 0D2h
.eh_frame_hdr:000000000000C0D6                 db 0FFh
.eh_frame_hdr:000000000000C0D7                 db 0FFh
.eh_frame_hdr:000000000000C0D8                 db  40h ; @
.eh_frame_hdr:000000000000C0D9                 db  17h
.eh_frame_hdr:000000000000C0DA                 db    0
.eh_frame_hdr:000000000000C0DB                 db    0
.eh_frame_hdr:000000000000C0DC                 db 0A8h
.eh_frame_hdr:000000000000C0DD                 db 0D3h
.eh_frame_hdr:000000000000C0DE                 db 0FFh
.eh_frame_hdr:000000000000C0DF                 db 0FFh
.eh_frame_hdr:000000000000C0E0                 db  7Ch ; |
.eh_frame_hdr:000000000000C0E1                 db  17h
.eh_frame_hdr:000000000000C0E2                 db    0
.eh_frame_hdr:000000000000C0E3                 db    0
.eh_frame_hdr:000000000000C0E4                 db    8
.eh_frame_hdr:000000000000C0E5                 db 0D4h
.eh_frame_hdr:000000000000C0E6                 db 0FFh
.eh_frame_hdr:000000000000C0E7                 db 0FFh
.eh_frame_hdr:000000000000C0E8                 db 0B4h
.eh_frame_hdr:000000000000C0E9                 db  17h
.eh_frame_hdr:000000000000C0EA                 db    0
.eh_frame_hdr:000000000000C0EB                 db    0
.eh_frame_hdr:000000000000C0EC                 db  58h ; X
.eh_frame_hdr:000000000000C0ED                 db 0D4h
.eh_frame_hdr:000000000000C0EE                 db 0FFh
.eh_frame_hdr:000000000000C0EF                 db 0FFh
.eh_frame_hdr:000000000000C0F0                 db 0C8h
.eh_frame_hdr:000000000000C0F1                 db  17h
.eh_frame_hdr:000000000000C0F2                 db    0
.eh_frame_hdr:000000000000C0F3                 db    0
.eh_frame_hdr:000000000000C0F4                 db 0D8h
.eh_frame_hdr:000000000000C0F5                 db 0D4h
.eh_frame_hdr:000000000000C0F6                 db 0FFh
.eh_frame_hdr:000000000000C0F7                 db 0FFh
.eh_frame_hdr:000000000000C0F8                 db 0FCh
.eh_frame_hdr:000000000000C0F9                 db  17h
.eh_frame_hdr:000000000000C0FA                 db    0
.eh_frame_hdr:000000000000C0FB                 db    0
.eh_frame_hdr:000000000000C0FC                 db  48h ; H
.eh_frame_hdr:000000000000C0FD                 db 0D5h
.eh_frame_hdr:000000000000C0FE                 db 0FFh
.eh_frame_hdr:000000000000C0FF                 db 0FFh
.eh_frame_hdr:000000000000C100                 db  10h
.eh_frame_hdr:000000000000C101                 db  18h
.eh_frame_hdr:000000000000C102                 db    0
.eh_frame_hdr:000000000000C103                 db    0
.eh_frame_hdr:000000000000C104                 db 0B8h
.eh_frame_hdr:000000000000C105                 db 0D5h
.eh_frame_hdr:000000000000C106                 db 0FFh
.eh_frame_hdr:000000000000C107                 db 0FFh
.eh_frame_hdr:000000000000C108                 db  5Ch ; \
.eh_frame_hdr:000000000000C109                 db  18h
.eh_frame_hdr:000000000000C10A                 db    0
.eh_frame_hdr:000000000000C10B                 db    0
.eh_frame_hdr:000000000000C10C                 db 0F8h
.eh_frame_hdr:000000000000C10D                 db 0D5h
.eh_frame_hdr:000000000000C10E                 db 0FFh
.eh_frame_hdr:000000000000C10F                 db 0FFh
.eh_frame_hdr:000000000000C110                 db  70h ; p
.eh_frame_hdr:000000000000C111                 db  18h
.eh_frame_hdr:000000000000C112                 db    0
.eh_frame_hdr:000000000000C113                 db    0
.eh_frame_hdr:000000000000C114                 db  18h
.eh_frame_hdr:000000000000C115                 db 0D6h
.eh_frame_hdr:000000000000C116                 db 0FFh
.eh_frame_hdr:000000000000C117                 db 0FFh
.eh_frame_hdr:000000000000C118                 db  84h
.eh_frame_hdr:000000000000C119                 db  18h
.eh_frame_hdr:000000000000C11A                 db    0
.eh_frame_hdr:000000000000C11B                 db    0
.eh_frame_hdr:000000000000C11C                 db 0D8h
.eh_frame_hdr:000000000000C11D                 db 0D7h
.eh_frame_hdr:000000000000C11E                 db 0FFh
.eh_frame_hdr:000000000000C11F                 db 0FFh
.eh_frame_hdr:000000000000C120                 db 0D0h
.eh_frame_hdr:000000000000C121                 db  18h
.eh_frame_hdr:000000000000C122                 db    0
.eh_frame_hdr:000000000000C123                 db    0
.eh_frame_hdr:000000000000C124                 db  68h ; h
.eh_frame_hdr:000000000000C125                 db 0D8h
.eh_frame_hdr:000000000000C126                 db 0FFh
.eh_frame_hdr:000000000000C127                 db 0FFh
.eh_frame_hdr:000000000000C128                 db 0FCh
.eh_frame_hdr:000000000000C129                 db  18h
.eh_frame_hdr:000000000000C12A                 db    0
.eh_frame_hdr:000000000000C12B                 db    0
.eh_frame_hdr:000000000000C12C                 db  48h ; H
.eh_frame_hdr:000000000000C12D                 db 0D9h
.eh_frame_hdr:000000000000C12E                 db 0FFh
.eh_frame_hdr:000000000000C12F                 db 0FFh
.eh_frame_hdr:000000000000C130                 db  28h ; (
.eh_frame_hdr:000000000000C131                 db  19h
.eh_frame_hdr:000000000000C132                 db    0
.eh_frame_hdr:000000000000C133                 db    0
.eh_frame_hdr:000000000000C134                 db  88h
.eh_frame_hdr:000000000000C135                 db 0DBh
.eh_frame_hdr:000000000000C136                 db 0FFh
.eh_frame_hdr:000000000000C137                 db 0FFh
.eh_frame_hdr:000000000000C138                 db  60h ; `
.eh_frame_hdr:000000000000C139                 db  19h
.eh_frame_hdr:000000000000C13A                 db    0
.eh_frame_hdr:000000000000C13B                 db    0
.eh_frame_hdr:000000000000C13C                 db  18h
.eh_frame_hdr:000000000000C13D                 db 0DEh
.eh_frame_hdr:000000000000C13E                 db 0FFh
.eh_frame_hdr:000000000000C13F                 db 0FFh
.eh_frame_hdr:000000000000C140                 db  9Ch
.eh_frame_hdr:000000000000C141                 db  19h
.eh_frame_hdr:000000000000C142                 db    0
.eh_frame_hdr:000000000000C143                 db    0
.eh_frame_hdr:000000000000C144                 db  78h ; x
.eh_frame_hdr:000000000000C145                 db 0DEh
.eh_frame_hdr:000000000000C146                 db 0FFh
.eh_frame_hdr:000000000000C147                 db 0FFh
.eh_frame_hdr:000000000000C148                 db 0C0h
.eh_frame_hdr:000000000000C149                 db  19h
.eh_frame_hdr:000000000000C14A                 db    0
.eh_frame_hdr:000000000000C14B                 db    0
.eh_frame_hdr:000000000000C14C                 db  88h
.eh_frame_hdr:000000000000C14D                 db 0E0h
.eh_frame_hdr:000000000000C14E                 db 0FFh
.eh_frame_hdr:000000000000C14F                 db 0FFh
.eh_frame_hdr:000000000000C150                 db 0F8h
.eh_frame_hdr:000000000000C151                 db  19h
.eh_frame_hdr:000000000000C152                 db    0
.eh_frame_hdr:000000000000C153                 db    0
.eh_frame_hdr:000000000000C154                 db 0A8h
.eh_frame_hdr:000000000000C155                 db 0E0h
.eh_frame_hdr:000000000000C156                 db 0FFh
.eh_frame_hdr:000000000000C157                 db 0FFh
.eh_frame_hdr:000000000000C158                 db  0Ch
.eh_frame_hdr:000000000000C159                 db  1Ah
.eh_frame_hdr:000000000000C15A                 db    0
.eh_frame_hdr:000000000000C15B                 db    0
.eh_frame_hdr:000000000000C15C                 db 0B8h
.eh_frame_hdr:000000000000C15D                 db 0E0h
.eh_frame_hdr:000000000000C15E                 db 0FFh
.eh_frame_hdr:000000000000C15F                 db 0FFh
.eh_frame_hdr:000000000000C160                 db  20h
.eh_frame_hdr:000000000000C161                 db  1Ah
.eh_frame_hdr:000000000000C162                 db    0
.eh_frame_hdr:000000000000C163                 db    0
.eh_frame_hdr:000000000000C164                 db 0F8h
.eh_frame_hdr:000000000000C165                 db 0E0h
.eh_frame_hdr:000000000000C166                 db 0FFh
.eh_frame_hdr:000000000000C167                 db 0FFh
.eh_frame_hdr:000000000000C168                 db  34h ; 4
.eh_frame_hdr:000000000000C169                 db  1Ah
.eh_frame_hdr:000000000000C16A                 db    0
.eh_frame_hdr:000000000000C16B                 db    0
.eh_frame_hdr:000000000000C16C                 db  38h ; 8
.eh_frame_hdr:000000000000C16D                 db 0E1h
.eh_frame_hdr:000000000000C16E                 db 0FFh
.eh_frame_hdr:000000000000C16F                 db 0FFh
.eh_frame_hdr:000000000000C170                 db  48h ; H
.eh_frame_hdr:000000000000C171                 db  1Ah
.eh_frame_hdr:000000000000C172                 db    0
.eh_frame_hdr:000000000000C173                 db    0
.eh_frame_hdr:000000000000C174                 db  78h ; x
.eh_frame_hdr:000000000000C175                 db 0E1h
.eh_frame_hdr:000000000000C176                 db 0FFh
.eh_frame_hdr:000000000000C177                 db 0FFh
.eh_frame_hdr:000000000000C178                 db  68h ; h
.eh_frame_hdr:000000000000C179                 db  1Ah
.eh_frame_hdr:000000000000C17A                 db    0
.eh_frame_hdr:000000000000C17B                 db    0
.eh_frame_hdr:000000000000C17C                 db 0E8h
.eh_frame_hdr:000000000000C17D                 db 0E1h
.eh_frame_hdr:000000000000C17E                 db 0FFh
.eh_frame_hdr:000000000000C17F                 db 0FFh
.eh_frame_hdr:000000000000C180                 db  88h
.eh_frame_hdr:000000000000C181                 db  1Ah
.eh_frame_hdr:000000000000C182                 db    0
.eh_frame_hdr:000000000000C183                 db    0
.eh_frame_hdr:000000000000C184                 db  68h ; h
.eh_frame_hdr:000000000000C185                 db 0E2h
.eh_frame_hdr:000000000000C186                 db 0FFh
.eh_frame_hdr:000000000000C187                 db 0FFh
.eh_frame_hdr:000000000000C188                 db 0E8h
.eh_frame_hdr:000000000000C189                 db  1Ah
.eh_frame_hdr:000000000000C18A                 db    0
.eh_frame_hdr:000000000000C18B                 db    0
.eh_frame_hdr:000000000000C18C                 db 0A8h
.eh_frame_hdr:000000000000C18D                 db 0E2h
.eh_frame_hdr:000000000000C18E                 db 0FFh
.eh_frame_hdr:000000000000C18F                 db 0FFh
.eh_frame_hdr:000000000000C190                 db  20h
.eh_frame_hdr:000000000000C191                 db  1Bh
.eh_frame_hdr:000000000000C192                 db    0
.eh_frame_hdr:000000000000C193                 db    0
.eh_frame_hdr:000000000000C194                 db  28h ; (
.eh_frame_hdr:000000000000C195                 db 0E3h
.eh_frame_hdr:000000000000C196                 db 0FFh
.eh_frame_hdr:000000000000C197                 db 0FFh
.eh_frame_hdr:000000000000C198                 db  58h ; X
.eh_frame_hdr:000000000000C199                 db  1Bh
.eh_frame_hdr:000000000000C19A                 db    0
.eh_frame_hdr:000000000000C19B                 db    0
.eh_frame_hdr:000000000000C19C                 db 0A8h
.eh_frame_hdr:000000000000C19D                 db 0E5h
.eh_frame_hdr:000000000000C19E                 db 0FFh
.eh_frame_hdr:000000000000C19F                 db 0FFh
.eh_frame_hdr:000000000000C1A0                 db  90h
.eh_frame_hdr:000000000000C1A1                 db  1Bh
.eh_frame_hdr:000000000000C1A2                 db    0
.eh_frame_hdr:000000000000C1A3                 db    0
.eh_frame_hdr:000000000000C1A4                 db 0E8h
.eh_frame_hdr:000000000000C1A5                 db 0E5h
.eh_frame_hdr:000000000000C1A6                 db 0FFh
.eh_frame_hdr:000000000000C1A7                 db 0FFh
.eh_frame_hdr:000000000000C1A8                 db 0B0h
.eh_frame_hdr:000000000000C1A9                 db  1Bh
.eh_frame_hdr:000000000000C1AA                 db    0
.eh_frame_hdr:000000000000C1AB                 db    0
.eh_frame_hdr:000000000000C1AC                 db  48h ; H
.eh_frame_hdr:000000000000C1AD                 db 0E6h
.eh_frame_hdr:000000000000C1AE                 db 0FFh
.eh_frame_hdr:000000000000C1AF                 db 0FFh
.eh_frame_hdr:000000000000C1B0                 db 0E0h
.eh_frame_hdr:000000000000C1B1                 db  1Bh
.eh_frame_hdr:000000000000C1B2                 db    0
.eh_frame_hdr:000000000000C1B3                 db    0
.eh_frame_hdr:000000000000C1B4                 db  58h ; X
.eh_frame_hdr:000000000000C1B5                 db 0E6h
.eh_frame_hdr:000000000000C1B6                 db 0FFh
.eh_frame_hdr:000000000000C1B7                 db 0FFh
.eh_frame_hdr:000000000000C1B8                 db 0F8h
.eh_frame_hdr:000000000000C1B9                 db  1Bh
.eh_frame_hdr:000000000000C1BA                 db    0
.eh_frame_hdr:000000000000C1BB                 db    0
.eh_frame_hdr:000000000000C1BC                 db 0C8h
.eh_frame_hdr:000000000000C1BD                 db 0E6h
.eh_frame_hdr:000000000000C1BE                 db 0FFh
.eh_frame_hdr:000000000000C1BF                 db 0FFh
.eh_frame_hdr:000000000000C1C0                 db  40h ; @
.eh_frame_hdr:000000000000C1C1                 db  1Ch
.eh_frame_hdr:000000000000C1C2                 db    0
.eh_frame_hdr:000000000000C1C3                 db    0
.eh_frame_hdr:000000000000C1C4                 db 0D8h
.eh_frame_hdr:000000000000C1C5                 db 0E6h
.eh_frame_hdr:000000000000C1C6                 db 0FFh
.eh_frame_hdr:000000000000C1C7                 db 0FFh
.eh_frame_hdr:000000000000C1C8                 db  58h ; X
.eh_frame_hdr:000000000000C1C9                 db  1Ch
.eh_frame_hdr:000000000000C1CA                 db    0
.eh_frame_hdr:000000000000C1CB                 db    0
.eh_frame_hdr:000000000000C1CB _eh_frame_hdr   ends
.eh_frame_hdr:000000000000C1CB
LOAD:000000000000C1CC ; ===========================================================================
LOAD:000000000000C1CC
LOAD:000000000000C1CC ; Segment type: Pure code
LOAD:000000000000C1CC ; Segment permissions: Read/Execute
LOAD:000000000000C1CC LOAD            segment byte public 'CODE' use64
LOAD:000000000000C1CC                 assume cs:LOAD
LOAD:000000000000C1CC                 ;org 0C1CCh
LOAD:000000000000C1CC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000C1CC                 align 10h
LOAD:000000000000C1CC LOAD            ends
LOAD:000000000000C1CC
.eh_frame:000000000000C1D0 ; ===========================================================================
.eh_frame:000000000000C1D0
.eh_frame:000000000000C1D0 ; Segment type: Pure data
.eh_frame:000000000000C1D0 ; Segment permissions: Read
.eh_frame:000000000000C1D0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000C1D0                 assume cs:_eh_frame
.eh_frame:000000000000C1D0                 ;org 0C1D0h
.eh_frame:000000000000C1D0                 db  14h
.eh_frame:000000000000C1D1                 db    0
.eh_frame:000000000000C1D2                 db    0
.eh_frame:000000000000C1D3                 db    0
.eh_frame:000000000000C1D4                 db    0
.eh_frame:000000000000C1D5                 db    0
.eh_frame:000000000000C1D6                 db    0
.eh_frame:000000000000C1D7                 db    0
.eh_frame:000000000000C1D8                 db    1
.eh_frame:000000000000C1D9                 db  7Ah ; z
.eh_frame:000000000000C1DA                 db  52h ; R
.eh_frame:000000000000C1DB                 db    0
.eh_frame:000000000000C1DC                 db    1
.eh_frame:000000000000C1DD                 db  78h ; x
.eh_frame:000000000000C1DE                 db  10h
.eh_frame:000000000000C1DF                 db    1
.eh_frame:000000000000C1E0                 db  1Bh
.eh_frame:000000000000C1E1                 db  0Ch
.eh_frame:000000000000C1E2                 db    7
.eh_frame:000000000000C1E3                 db    8
.eh_frame:000000000000C1E4                 db  90h
.eh_frame:000000000000C1E5                 db    1
.eh_frame:000000000000C1E6                 db    7
.eh_frame:000000000000C1E7                 db  10h
.eh_frame:000000000000C1E8                 db  14h
.eh_frame:000000000000C1E9                 db    0
.eh_frame:000000000000C1EA                 db    0
.eh_frame:000000000000C1EB                 db    0
.eh_frame:000000000000C1EC                 db  1Ch
.eh_frame:000000000000C1ED                 db    0
.eh_frame:000000000000C1EE                 db    0
.eh_frame:000000000000C1EF                 db    0
.eh_frame:000000000000C1F0                 db  50h ; P
.eh_frame:000000000000C1F1                 db  60h ; `
.eh_frame:000000000000C1F2                 db 0FFh
.eh_frame:000000000000C1F3                 db 0FFh
.eh_frame:000000000000C1F4                 db  2Bh ; +
.eh_frame:000000000000C1F5                 db    0
.eh_frame:000000000000C1F6                 db    0
.eh_frame:000000000000C1F7                 db    0
.eh_frame:000000000000C1F8                 db    0
.eh_frame:000000000000C1F9                 db    0
.eh_frame:000000000000C1FA                 db    0
.eh_frame:000000000000C1FB                 db    0
.eh_frame:000000000000C1FC                 db    0
.eh_frame:000000000000C1FD                 db    0
.eh_frame:000000000000C1FE                 db    0
.eh_frame:000000000000C1FF                 db    0
.eh_frame:000000000000C200                 db  14h
.eh_frame:000000000000C201                 db    0
.eh_frame:000000000000C202                 db    0
.eh_frame:000000000000C203                 db    0
.eh_frame:000000000000C204                 db    0
.eh_frame:000000000000C205                 db    0
.eh_frame:000000000000C206                 db    0
.eh_frame:000000000000C207                 db    0
.eh_frame:000000000000C208                 db    1
.eh_frame:000000000000C209                 db  7Ah ; z
.eh_frame:000000000000C20A                 db  52h ; R
.eh_frame:000000000000C20B                 db    0
.eh_frame:000000000000C20C                 db    1
.eh_frame:000000000000C20D                 db  78h ; x
.eh_frame:000000000000C20E                 db  10h
.eh_frame:000000000000C20F                 db    1
.eh_frame:000000000000C210                 db  1Bh
.eh_frame:000000000000C211                 db  0Ch
.eh_frame:000000000000C212                 db    7
.eh_frame:000000000000C213                 db    8
.eh_frame:000000000000C214                 db  90h
.eh_frame:000000000000C215                 db    1
.eh_frame:000000000000C216                 db    0
.eh_frame:000000000000C217                 db    0
.eh_frame:000000000000C218                 db  24h ; $
.eh_frame:000000000000C219                 db    0
.eh_frame:000000000000C21A                 db    0
.eh_frame:000000000000C21B                 db    0
.eh_frame:000000000000C21C                 db  1Ch
.eh_frame:000000000000C21D                 db    0
.eh_frame:000000000000C21E                 db    0
.eh_frame:000000000000C21F                 db    0
.eh_frame:000000000000C220                 db 0E0h
.eh_frame:000000000000C221                 db  56h ; V
.eh_frame:000000000000C222                 db 0FFh
.eh_frame:000000000000C223                 db 0FFh
.eh_frame:000000000000C224                 db  30h ; 0
.eh_frame:000000000000C225                 db    4
.eh_frame:000000000000C226                 db    0
.eh_frame:000000000000C227                 db    0
.eh_frame:000000000000C228                 db    0
.eh_frame:000000000000C229                 db  0Eh
.eh_frame:000000000000C22A                 db  10h
.eh_frame:000000000000C22B                 db  46h ; F
.eh_frame:000000000000C22C                 db  0Eh
.eh_frame:000000000000C22D                 db  18h
.eh_frame:000000000000C22E                 db  4Ah ; J
.eh_frame:000000000000C22F                 db  0Fh
.eh_frame:000000000000C230                 db  0Bh
.eh_frame:000000000000C231                 db  77h ; w
.eh_frame:000000000000C232                 db    8
.eh_frame:000000000000C233                 db  80h
.eh_frame:000000000000C234                 db    0
.eh_frame:000000000000C235                 db  3Fh ; ?
.eh_frame:000000000000C236                 db  1Ah
.eh_frame:000000000000C237                 db  3Bh ; ;
.eh_frame:000000000000C238                 db  2Ah ; *
.eh_frame:000000000000C239                 db  33h ; 3
.eh_frame:000000000000C23A                 db  24h ; $
.eh_frame:000000000000C23B                 db  22h ; "
.eh_frame:000000000000C23C                 db    0
.eh_frame:000000000000C23D                 db    0
.eh_frame:000000000000C23E                 db    0
.eh_frame:000000000000C23F                 db    0
.eh_frame:000000000000C240                 db  14h
.eh_frame:000000000000C241                 db    0
.eh_frame:000000000000C242                 db    0
.eh_frame:000000000000C243                 db    0
.eh_frame:000000000000C244                 db  44h ; D
.eh_frame:000000000000C245                 db    0
.eh_frame:000000000000C246                 db    0
.eh_frame:000000000000C247                 db    0
.eh_frame:000000000000C248                 db 0E8h
.eh_frame:000000000000C249                 db  5Ah ; Z
.eh_frame:000000000000C24A                 db 0FFh
.eh_frame:000000000000C24B                 db 0FFh
.eh_frame:000000000000C24C                 db  10h
.eh_frame:000000000000C24D                 db    0
.eh_frame:000000000000C24E                 db    0
.eh_frame:000000000000C24F                 db    0
.eh_frame:000000000000C250                 db    0
.eh_frame:000000000000C251                 db    0
.eh_frame:000000000000C252                 db    0
.eh_frame:000000000000C253                 db    0
.eh_frame:000000000000C254                 db    0
.eh_frame:000000000000C255                 db    0
.eh_frame:000000000000C256                 db    0
.eh_frame:000000000000C257                 db    0
.eh_frame:000000000000C258                 db  28h ; (
.eh_frame:000000000000C259                 db    0
.eh_frame:000000000000C25A                 db    0
.eh_frame:000000000000C25B                 db    0
.eh_frame:000000000000C25C                 db  5Ch ; \
.eh_frame:000000000000C25D                 db    0
.eh_frame:000000000000C25E                 db    0
.eh_frame:000000000000C25F                 db    0
.eh_frame:000000000000C260                 db 0F0h
.eh_frame:000000000000C261                 db  60h ; `
.eh_frame:000000000000C262                 db 0FFh
.eh_frame:000000000000C263                 db 0FFh
.eh_frame:000000000000C264                 db  7Ah ; z
.eh_frame:000000000000C265                 db    4
.eh_frame:000000000000C266                 db    0
.eh_frame:000000000000C267                 db    0
.eh_frame:000000000000C268                 db    0
.eh_frame:000000000000C269                 db  42h ; B
.eh_frame:000000000000C26A                 db  0Eh
.eh_frame:000000000000C26B                 db  10h
.eh_frame:000000000000C26C                 db  8Dh
.eh_frame:000000000000C26D                 db    2
.eh_frame:000000000000C26E                 db  42h ; B
.eh_frame:000000000000C26F                 db  0Eh
.eh_frame:000000000000C270                 db  18h
.eh_frame:000000000000C271                 db  8Ch
.eh_frame:000000000000C272                 db    3
.eh_frame:000000000000C273                 db  46h ; F
.eh_frame:000000000000C274                 db  0Eh
.eh_frame:000000000000C275                 db  20h
.eh_frame:000000000000C276                 db  86h
.eh_frame:000000000000C277                 db    4
.eh_frame:000000000000C278                 db  41h ; A
.eh_frame:000000000000C279                 db  0Eh
.eh_frame:000000000000C27A                 db  28h ; (
.eh_frame:000000000000C27B                 db  83h
.eh_frame:000000000000C27C                 db    5
.eh_frame:000000000000C27D                 db  49h ; I
.eh_frame:000000000000C27E                 db  0Eh
.eh_frame:000000000000C27F                 db 0B0h
.eh_frame:000000000000C280                 db    1
.eh_frame:000000000000C281                 db    0
.eh_frame:000000000000C282                 db    0
.eh_frame:000000000000C283                 db    0
.eh_frame:000000000000C284                 db  68h ; h
.eh_frame:000000000000C285                 db    0
.eh_frame:000000000000C286                 db    0
.eh_frame:000000000000C287                 db    0
.eh_frame:000000000000C288                 db  88h
.eh_frame:000000000000C289                 db    0
.eh_frame:000000000000C28A                 db    0
.eh_frame:000000000000C28B                 db    0
.eh_frame:000000000000C28C                 db 0B4h
.eh_frame:000000000000C28D                 db  5Ah ; Z
.eh_frame:000000000000C28E                 db 0FFh
.eh_frame:000000000000C28F                 db 0FFh
.eh_frame:000000000000C290                 db 0F7h
.eh_frame:000000000000C291                 db    4
.eh_frame:000000000000C292                 db    0
.eh_frame:000000000000C293                 db    0
.eh_frame:000000000000C294                 db    0
.eh_frame:000000000000C295                 db  42h ; B
.eh_frame:000000000000C296                 db  0Eh
.eh_frame:000000000000C297                 db  10h
.eh_frame:000000000000C298                 db  8Fh
.eh_frame:000000000000C299                 db    2
.eh_frame:000000000000C29A                 db  42h ; B
.eh_frame:000000000000C29B                 db  0Eh
.eh_frame:000000000000C29C                 db  18h
.eh_frame:000000000000C29D                 db  8Eh
.eh_frame:000000000000C29E                 db    3
.eh_frame:000000000000C29F                 db  48h ; H
.eh_frame:000000000000C2A0                 db  0Eh
.eh_frame:000000000000C2A1                 db  20h
.eh_frame:000000000000C2A2                 db  8Dh
.eh_frame:000000000000C2A3                 db    4
.eh_frame:000000000000C2A4                 db  42h ; B
.eh_frame:000000000000C2A5                 db  0Eh
.eh_frame:000000000000C2A6                 db  28h ; (
.eh_frame:000000000000C2A7                 db  8Ch
.eh_frame:000000000000C2A8                 db    5
.eh_frame:000000000000C2A9                 db  47h ; G
.eh_frame:000000000000C2AA                 db  0Eh
.eh_frame:000000000000C2AB                 db  30h ; 0
.eh_frame:000000000000C2AC                 db  86h
.eh_frame:000000000000C2AD                 db    6
.eh_frame:000000000000C2AE                 db  41h ; A
.eh_frame:000000000000C2AF                 db  0Eh
.eh_frame:000000000000C2B0                 db  38h ; 8
.eh_frame:000000000000C2B1                 db  83h
.eh_frame:000000000000C2B2                 db    7
.eh_frame:000000000000C2B3                 db  56h ; V
.eh_frame:000000000000C2B4                 db  0Eh
.eh_frame:000000000000C2B5                 db 0B0h
.eh_frame:000000000000C2B6                 db    2
.eh_frame:000000000000C2B7                 db    3
.eh_frame:000000000000C2B8                 db  43h ; C
.eh_frame:000000000000C2B9                 db    1
.eh_frame:000000000000C2BA                 db  0Ah
.eh_frame:000000000000C2BB                 db  0Eh
.eh_frame:000000000000C2BC                 db 0B8h
.eh_frame:000000000000C2BD                 db    2
.eh_frame:000000000000C2BE                 db  50h ; P
.eh_frame:000000000000C2BF                 db  0Eh
.eh_frame:000000000000C2C0                 db 0C0h
.eh_frame:000000000000C2C1                 db    2
.eh_frame:000000000000C2C2                 db  6Ah ; j
.eh_frame:000000000000C2C3                 db  0Bh
.eh_frame:000000000000C2C4                 db    2
.eh_frame:000000000000C2C5                 db 0E1h
.eh_frame:000000000000C2C6                 db  0Eh
.eh_frame:000000000000C2C7                 db 0B8h
.eh_frame:000000000000C2C8                 db    2
.eh_frame:000000000000C2C9                 db  48h ; H
.eh_frame:000000000000C2CA                 db  0Eh
.eh_frame:000000000000C2CB                 db 0C0h
.eh_frame:000000000000C2CC                 db    2
.eh_frame:000000000000C2CD                 db  5Bh ; [
.eh_frame:000000000000C2CE                 db  0Eh
.eh_frame:000000000000C2CF                 db 0B8h
.eh_frame:000000000000C2D0                 db    2
.eh_frame:000000000000C2D1                 db  41h ; A
.eh_frame:000000000000C2D2                 db  0Eh
.eh_frame:000000000000C2D3                 db 0B0h
.eh_frame:000000000000C2D4                 db    2
.eh_frame:000000000000C2D5                 db  64h ; d
.eh_frame:000000000000C2D6                 db  0Ah
.eh_frame:000000000000C2D7                 db  0Eh
.eh_frame:000000000000C2D8                 db  38h ; 8
.eh_frame:000000000000C2D9                 db  41h ; A
.eh_frame:000000000000C2DA                 db  0Eh
.eh_frame:000000000000C2DB                 db  30h ; 0
.eh_frame:000000000000C2DC                 db  41h ; A
.eh_frame:000000000000C2DD                 db  0Eh
.eh_frame:000000000000C2DE                 db  28h ; (
.eh_frame:000000000000C2DF                 db  42h ; B
.eh_frame:000000000000C2E0                 db  0Eh
.eh_frame:000000000000C2E1                 db  20h
.eh_frame:000000000000C2E2                 db  42h ; B
.eh_frame:000000000000C2E3                 db  0Eh
.eh_frame:000000000000C2E4                 db  18h
.eh_frame:000000000000C2E5                 db  42h ; B
.eh_frame:000000000000C2E6                 db  0Eh
.eh_frame:000000000000C2E7                 db  10h
.eh_frame:000000000000C2E8                 db  42h ; B
.eh_frame:000000000000C2E9                 db  0Eh
.eh_frame:000000000000C2EA                 db    8
.eh_frame:000000000000C2EB                 db  41h ; A
.eh_frame:000000000000C2EC                 db  0Bh
.eh_frame:000000000000C2ED                 db    0
.eh_frame:000000000000C2EE                 db    0
.eh_frame:000000000000C2EF                 db    0
.eh_frame:000000000000C2F0                 db  38h ; 8
.eh_frame:000000000000C2F1                 db    0
.eh_frame:000000000000C2F2                 db    0
.eh_frame:000000000000C2F3                 db    0
.eh_frame:000000000000C2F4                 db 0F4h
.eh_frame:000000000000C2F5                 db    0
.eh_frame:000000000000C2F6                 db    0
.eh_frame:000000000000C2F7                 db    0
.eh_frame:000000000000C2F8                 db 0D8h
.eh_frame:000000000000C2F9                 db  64h ; d
.eh_frame:000000000000C2FA                 db 0FFh
.eh_frame:000000000000C2FB                 db 0FFh
.eh_frame:000000000000C2FC                 db  75h ; u
.eh_frame:000000000000C2FD                 db    0
.eh_frame:000000000000C2FE                 db    0
.eh_frame:000000000000C2FF                 db    0
.eh_frame:000000000000C300                 db    0
.eh_frame:000000000000C301                 db  45h ; E
.eh_frame:000000000000C302                 db  0Eh
.eh_frame:000000000000C303                 db  10h
.eh_frame:000000000000C304                 db  8Ch
.eh_frame:000000000000C305                 db    2
.eh_frame:000000000000C306                 db  41h ; A
.eh_frame:000000000000C307                 db  0Eh
.eh_frame:000000000000C308                 db  18h
.eh_frame:000000000000C309                 db  86h
.eh_frame:000000000000C30A                 db    3
.eh_frame:000000000000C30B                 db  41h ; A
.eh_frame:000000000000C30C                 db  0Eh
.eh_frame:000000000000C30D                 db  20h
.eh_frame:000000000000C30E                 db  83h
.eh_frame:000000000000C30F                 db    4
.eh_frame:000000000000C310                 db    2
.eh_frame:000000000000C311                 db  48h ; H
.eh_frame:000000000000C312                 db  0Ah
.eh_frame:000000000000C313                 db  0Eh
.eh_frame:000000000000C314                 db  18h
.eh_frame:000000000000C315                 db  41h ; A
.eh_frame:000000000000C316                 db  0Eh
.eh_frame:000000000000C317                 db  10h
.eh_frame:000000000000C318                 db  42h ; B
.eh_frame:000000000000C319                 db  0Eh
.eh_frame:000000000000C31A                 db    8
.eh_frame:000000000000C31B                 db  46h ; F
.eh_frame:000000000000C31C                 db  0Bh
.eh_frame:000000000000C31D                 db  49h ; I
.eh_frame:000000000000C31E                 db  0Ah
.eh_frame:000000000000C31F                 db  0Eh
.eh_frame:000000000000C320                 db  18h
.eh_frame:000000000000C321                 db  41h ; A
.eh_frame:000000000000C322                 db  0Eh
.eh_frame:000000000000C323                 db  10h
.eh_frame:000000000000C324                 db  42h ; B
.eh_frame:000000000000C325                 db  0Eh
.eh_frame:000000000000C326                 db    8
.eh_frame:000000000000C327                 db  4Ch ; L
.eh_frame:000000000000C328                 db  0Bh
.eh_frame:000000000000C329                 db    0
.eh_frame:000000000000C32A                 db    0
.eh_frame:000000000000C32B                 db    0
.eh_frame:000000000000C32C                 db  10h
.eh_frame:000000000000C32D                 db    0
.eh_frame:000000000000C32E                 db    0
.eh_frame:000000000000C32F                 db    0
.eh_frame:000000000000C330                 db  30h ; 0
.eh_frame:000000000000C331                 db    1
.eh_frame:000000000000C332                 db    0
.eh_frame:000000000000C333                 db    0
.eh_frame:000000000000C334                 db  1Ch
.eh_frame:000000000000C335                 db  65h ; e
.eh_frame:000000000000C336                 db 0FFh
.eh_frame:000000000000C337                 db 0FFh
.eh_frame:000000000000C338                 db  2Bh ; +
.eh_frame:000000000000C339                 db    0
.eh_frame:000000000000C33A                 db    0
.eh_frame:000000000000C33B                 db    0
.eh_frame:000000000000C33C                 db    0
.eh_frame:000000000000C33D                 db    0
.eh_frame:000000000000C33E                 db    0
.eh_frame:000000000000C33F                 db    0
.eh_frame:000000000000C340                 db  18h
.eh_frame:000000000000C341                 db    0
.eh_frame:000000000000C342                 db    0
.eh_frame:000000000000C343                 db    0
.eh_frame:000000000000C344                 db  44h ; D
.eh_frame:000000000000C345                 db    1
.eh_frame:000000000000C346                 db    0
.eh_frame:000000000000C347                 db    0
.eh_frame:000000000000C348                 db  38h ; 8
.eh_frame:000000000000C349                 db  65h ; e
.eh_frame:000000000000C34A                 db 0FFh
.eh_frame:000000000000C34B                 db 0FFh
.eh_frame:000000000000C34C                 db  17h
.eh_frame:000000000000C34D                 db    0
.eh_frame:000000000000C34E                 db    0
.eh_frame:000000000000C34F                 db    0
.eh_frame:000000000000C350                 db    0
.eh_frame:000000000000C351                 db  41h ; A
.eh_frame:000000000000C352                 db  0Eh
.eh_frame:000000000000C353                 db  10h
.eh_frame:000000000000C354                 db  83h
.eh_frame:000000000000C355                 db    2
.eh_frame:000000000000C356                 db  51h ; Q
.eh_frame:000000000000C357                 db  0Eh
.eh_frame:000000000000C358                 db    8
.eh_frame:000000000000C359                 db    0
.eh_frame:000000000000C35A                 db    0
.eh_frame:000000000000C35B                 db    0
.eh_frame:000000000000C35C                 db  20h
.eh_frame:000000000000C35D                 db    0
.eh_frame:000000000000C35E                 db    0
.eh_frame:000000000000C35F                 db    0
.eh_frame:000000000000C360                 db  60h ; `
.eh_frame:000000000000C361                 db    1
.eh_frame:000000000000C362                 db    0
.eh_frame:000000000000C363                 db    0
.eh_frame:000000000000C364                 db  3Ch ; <
.eh_frame:000000000000C365                 db  65h ; e
.eh_frame:000000000000C366                 db 0FFh
.eh_frame:000000000000C367                 db 0FFh
.eh_frame:000000000000C368                 db  54h ; T
.eh_frame:000000000000C369                 db    0
.eh_frame:000000000000C36A                 db    0
.eh_frame:000000000000C36B                 db    0
.eh_frame:000000000000C36C                 db    0
.eh_frame:000000000000C36D                 db  41h ; A
.eh_frame:000000000000C36E                 db  0Eh
.eh_frame:000000000000C36F                 db  10h
.eh_frame:000000000000C370                 db  83h
.eh_frame:000000000000C371                 db    2
.eh_frame:000000000000C372                 db  46h ; F
.eh_frame:000000000000C373                 db  0Eh
.eh_frame:000000000000C374                 db  30h ; 0
.eh_frame:000000000000C375                 db  76h ; v
.eh_frame:000000000000C376                 db  0Ah
.eh_frame:000000000000C377                 db  0Eh
.eh_frame:000000000000C378                 db  10h
.eh_frame:000000000000C379                 db  41h ; A
.eh_frame:000000000000C37A                 db  0Eh
.eh_frame:000000000000C37B                 db    8
.eh_frame:000000000000C37C                 db  42h ; B
.eh_frame:000000000000C37D                 db  0Bh
.eh_frame:000000000000C37E                 db    0
.eh_frame:000000000000C37F                 db    0
.eh_frame:000000000000C380                 db  20h
.eh_frame:000000000000C381                 db    0
.eh_frame:000000000000C382                 db    0
.eh_frame:000000000000C383                 db    0
.eh_frame:000000000000C384                 db  84h
.eh_frame:000000000000C385                 db    1
.eh_frame:000000000000C386                 db    0
.eh_frame:000000000000C387                 db    0
.eh_frame:000000000000C388                 db  78h ; x
.eh_frame:000000000000C389                 db  65h ; e
.eh_frame:000000000000C38A                 db 0FFh
.eh_frame:000000000000C38B                 db 0FFh
.eh_frame:000000000000C38C                 db  54h ; T
.eh_frame:000000000000C38D                 db    0
.eh_frame:000000000000C38E                 db    0
.eh_frame:000000000000C38F                 db    0
.eh_frame:000000000000C390                 db    0
.eh_frame:000000000000C391                 db  41h ; A
.eh_frame:000000000000C392                 db  0Eh
.eh_frame:000000000000C393                 db  10h
.eh_frame:000000000000C394                 db  83h
.eh_frame:000000000000C395                 db    2
.eh_frame:000000000000C396                 db  46h ; F
.eh_frame:000000000000C397                 db  0Eh
.eh_frame:000000000000C398                 db  30h ; 0
.eh_frame:000000000000C399                 db  76h ; v
.eh_frame:000000000000C39A                 db  0Ah
.eh_frame:000000000000C39B                 db  0Eh
.eh_frame:000000000000C39C                 db  10h
.eh_frame:000000000000C39D                 db  41h ; A
.eh_frame:000000000000C39E                 db  0Eh
.eh_frame:000000000000C39F                 db    8
.eh_frame:000000000000C3A0                 db  42h ; B
.eh_frame:000000000000C3A1                 db  0Bh
.eh_frame:000000000000C3A2                 db    0
.eh_frame:000000000000C3A3                 db    0
.eh_frame:000000000000C3A4                 db  4Ch ; L
.eh_frame:000000000000C3A5                 db    0
.eh_frame:000000000000C3A6                 db    0
.eh_frame:000000000000C3A7                 db    0
.eh_frame:000000000000C3A8                 db 0A8h
.eh_frame:000000000000C3A9                 db    1
.eh_frame:000000000000C3AA                 db    0
.eh_frame:000000000000C3AB                 db    0
.eh_frame:000000000000C3AC                 db 0B4h
.eh_frame:000000000000C3AD                 db  65h ; e
.eh_frame:000000000000C3AE                 db 0FFh
.eh_frame:000000000000C3AF                 db 0FFh
.eh_frame:000000000000C3B0                 db  83h
.eh_frame:000000000000C3B1                 db  0Dh
.eh_frame:000000000000C3B2                 db    0
.eh_frame:000000000000C3B3                 db    0
.eh_frame:000000000000C3B4                 db    0
.eh_frame:000000000000C3B5                 db  42h ; B
.eh_frame:000000000000C3B6                 db  0Eh
.eh_frame:000000000000C3B7                 db  10h
.eh_frame:000000000000C3B8                 db  8Fh
.eh_frame:000000000000C3B9                 db    2
.eh_frame:000000000000C3BA                 db  42h ; B
.eh_frame:000000000000C3BB                 db  0Eh
.eh_frame:000000000000C3BC                 db  18h
.eh_frame:000000000000C3BD                 db  8Eh
.eh_frame:000000000000C3BE                 db    3
.eh_frame:000000000000C3BF                 db  42h ; B
.eh_frame:000000000000C3C0                 db  0Eh
.eh_frame:000000000000C3C1                 db  20h
.eh_frame:000000000000C3C2                 db  8Dh
.eh_frame:000000000000C3C3                 db    4
.eh_frame:000000000000C3C4                 db  42h ; B
.eh_frame:000000000000C3C5                 db  0Eh
.eh_frame:000000000000C3C6                 db  28h ; (
.eh_frame:000000000000C3C7                 db  8Ch
.eh_frame:000000000000C3C8                 db    5
.eh_frame:000000000000C3C9                 db  44h ; D
.eh_frame:000000000000C3CA                 db  0Eh
.eh_frame:000000000000C3CB                 db  30h ; 0
.eh_frame:000000000000C3CC                 db  86h
.eh_frame:000000000000C3CD                 db    6
.eh_frame:000000000000C3CE                 db  41h ; A
.eh_frame:000000000000C3CF                 db  0Eh
.eh_frame:000000000000C3D0                 db  38h ; 8
.eh_frame:000000000000C3D1                 db  83h
.eh_frame:000000000000C3D2                 db    7
.eh_frame:000000000000C3D3                 db  4Ah ; J
.eh_frame:000000000000C3D4                 db  0Eh
.eh_frame:000000000000C3D5                 db 0B0h
.eh_frame:000000000000C3D6                 db    3
.eh_frame:000000000000C3D7                 db    3
.eh_frame:000000000000C3D8                 db 0FAh
.eh_frame:000000000000C3D9                 db    4
.eh_frame:000000000000C3DA                 db  0Ah
.eh_frame:000000000000C3DB                 db  0Eh
.eh_frame:000000000000C3DC                 db  38h ; 8
.eh_frame:000000000000C3DD                 db  41h ; A
.eh_frame:000000000000C3DE                 db  0Eh
.eh_frame:000000000000C3DF                 db  30h ; 0
.eh_frame:000000000000C3E0                 db  41h ; A
.eh_frame:000000000000C3E1                 db  0Eh
.eh_frame:000000000000C3E2                 db  28h ; (
.eh_frame:000000000000C3E3                 db  42h ; B
.eh_frame:000000000000C3E4                 db  0Eh
.eh_frame:000000000000C3E5                 db  20h
.eh_frame:000000000000C3E6                 db  42h ; B
.eh_frame:000000000000C3E7                 db  0Eh
.eh_frame:000000000000C3E8                 db  18h
.eh_frame:000000000000C3E9                 db  42h ; B
.eh_frame:000000000000C3EA                 db  0Eh
.eh_frame:000000000000C3EB                 db  10h
.eh_frame:000000000000C3EC                 db  42h ; B
.eh_frame:000000000000C3ED                 db  0Eh
.eh_frame:000000000000C3EE                 db    8
.eh_frame:000000000000C3EF                 db  45h ; E
.eh_frame:000000000000C3F0                 db  0Bh
.eh_frame:000000000000C3F1                 db    0
.eh_frame:000000000000C3F2                 db    0
.eh_frame:000000000000C3F3                 db    0
.eh_frame:000000000000C3F4                 db  58h ; X
.eh_frame:000000000000C3F5                 db    0
.eh_frame:000000000000C3F6                 db    0
.eh_frame:000000000000C3F7                 db    0
.eh_frame:000000000000C3F8                 db 0F8h
.eh_frame:000000000000C3F9                 db    1
.eh_frame:000000000000C3FA                 db    0
.eh_frame:000000000000C3FB                 db    0
.eh_frame:000000000000C3FC                 db 0F4h
.eh_frame:000000000000C3FD                 db  72h ; r
.eh_frame:000000000000C3FE                 db 0FFh
.eh_frame:000000000000C3FF                 db 0FFh
.eh_frame:000000000000C400                 db  20h
.eh_frame:000000000000C401                 db    1
.eh_frame:000000000000C402                 db    0
.eh_frame:000000000000C403                 db    0
.eh_frame:000000000000C404                 db    0
.eh_frame:000000000000C405                 db  42h ; B
.eh_frame:000000000000C406                 db  0Eh
.eh_frame:000000000000C407                 db  10h
.eh_frame:000000000000C408                 db  8Fh
.eh_frame:000000000000C409                 db    2
.eh_frame:000000000000C40A                 db  42h ; B
.eh_frame:000000000000C40B                 db  0Eh
.eh_frame:000000000000C40C                 db  18h
.eh_frame:000000000000C40D                 db  8Eh
.eh_frame:000000000000C40E                 db    3
.eh_frame:000000000000C40F                 db  45h ; E
.eh_frame:000000000000C410                 db  0Eh
.eh_frame:000000000000C411                 db  20h
.eh_frame:000000000000C412                 db  8Dh
.eh_frame:000000000000C413                 db    4
.eh_frame:000000000000C414                 db  42h ; B
.eh_frame:000000000000C415                 db  0Eh
.eh_frame:000000000000C416                 db  28h ; (
.eh_frame:000000000000C417                 db  8Ch
.eh_frame:000000000000C418                 db    5
.eh_frame:000000000000C419                 db  44h ; D
.eh_frame:000000000000C41A                 db  0Eh
.eh_frame:000000000000C41B                 db  30h ; 0
.eh_frame:000000000000C41C                 db  86h
.eh_frame:000000000000C41D                 db    6
.eh_frame:000000000000C41E                 db  41h ; A
.eh_frame:000000000000C41F                 db  0Eh
.eh_frame:000000000000C420                 db  38h ; 8
.eh_frame:000000000000C421                 db  83h
.eh_frame:000000000000C422                 db    7
.eh_frame:000000000000C423                 db  47h ; G
.eh_frame:000000000000C424                 db  0Eh
.eh_frame:000000000000C425                 db  50h ; P
.eh_frame:000000000000C426                 db  7Dh ; }
.eh_frame:000000000000C427                 db  0Eh
.eh_frame:000000000000C428                 db  58h ; X
.eh_frame:000000000000C429                 db  48h ; H
.eh_frame:000000000000C42A                 db  0Eh
.eh_frame:000000000000C42B                 db  60h ; `
.eh_frame:000000000000C42C                 db  55h ; U
.eh_frame:000000000000C42D                 db  0Eh
.eh_frame:000000000000C42E                 db  58h ; X
.eh_frame:000000000000C42F                 db  41h ; A
.eh_frame:000000000000C430                 db  0Eh
.eh_frame:000000000000C431                 db  50h ; P
.eh_frame:000000000000C432                 db    2
.eh_frame:000000000000C433                 db  5Ch ; \
.eh_frame:000000000000C434                 db  0Ah
.eh_frame:000000000000C435                 db  0Eh
.eh_frame:000000000000C436                 db  38h ; 8
.eh_frame:000000000000C437                 db  43h ; C
.eh_frame:000000000000C438                 db  0Eh
.eh_frame:000000000000C439                 db  30h ; 0
.eh_frame:000000000000C43A                 db  41h ; A
.eh_frame:000000000000C43B                 db  0Eh
.eh_frame:000000000000C43C                 db  28h ; (
.eh_frame:000000000000C43D                 db  42h ; B
.eh_frame:000000000000C43E                 db  0Eh
.eh_frame:000000000000C43F                 db  20h
.eh_frame:000000000000C440                 db  42h ; B
.eh_frame:000000000000C441                 db  0Eh
.eh_frame:000000000000C442                 db  18h
.eh_frame:000000000000C443                 db  42h ; B
.eh_frame:000000000000C444                 db  0Eh
.eh_frame:000000000000C445                 db  10h
.eh_frame:000000000000C446                 db  42h ; B
.eh_frame:000000000000C447                 db  0Eh
.eh_frame:000000000000C448                 db    8
.eh_frame:000000000000C449                 db  46h ; F
.eh_frame:000000000000C44A                 db  0Bh
.eh_frame:000000000000C44B                 db    0
.eh_frame:000000000000C44C                 db    0
.eh_frame:000000000000C44D                 db    0
.eh_frame:000000000000C44E                 db    0
.eh_frame:000000000000C44F                 db    0
.eh_frame:000000000000C450                 db  10h
.eh_frame:000000000000C451                 db    0
.eh_frame:000000000000C452                 db    0
.eh_frame:000000000000C453                 db    0
.eh_frame:000000000000C454                 db  54h ; T
.eh_frame:000000000000C455                 db    2
.eh_frame:000000000000C456                 db    0
.eh_frame:000000000000C457                 db    0
.eh_frame:000000000000C458                 db 0B8h
.eh_frame:000000000000C459                 db  73h ; s
.eh_frame:000000000000C45A                 db 0FFh
.eh_frame:000000000000C45B                 db 0FFh
.eh_frame:000000000000C45C                 db    8
.eh_frame:000000000000C45D                 db    0
.eh_frame:000000000000C45E                 db    0
.eh_frame:000000000000C45F                 db    0
.eh_frame:000000000000C460                 db    0
.eh_frame:000000000000C461                 db    0
.eh_frame:000000000000C462                 db    0
.eh_frame:000000000000C463                 db    0
.eh_frame:000000000000C464                 db  10h
.eh_frame:000000000000C465                 db    0
.eh_frame:000000000000C466                 db    0
.eh_frame:000000000000C467                 db    0
.eh_frame:000000000000C468                 db  68h ; h
.eh_frame:000000000000C469                 db    2
.eh_frame:000000000000C46A                 db    0
.eh_frame:000000000000C46B                 db    0
.eh_frame:000000000000C46C                 db 0B4h
.eh_frame:000000000000C46D                 db  73h ; s
.eh_frame:000000000000C46E                 db 0FFh
.eh_frame:000000000000C46F                 db 0FFh
.eh_frame:000000000000C470                 db    8
.eh_frame:000000000000C471                 db    0
.eh_frame:000000000000C472                 db    0
.eh_frame:000000000000C473                 db    0
.eh_frame:000000000000C474                 db    0
.eh_frame:000000000000C475                 db    0
.eh_frame:000000000000C476                 db    0
.eh_frame:000000000000C477                 db    0
.eh_frame:000000000000C478                 db  2Ch ; ,
.eh_frame:000000000000C479                 db    0
.eh_frame:000000000000C47A                 db    0
.eh_frame:000000000000C47B                 db    0
.eh_frame:000000000000C47C                 db  7Ch ; |
.eh_frame:000000000000C47D                 db    2
.eh_frame:000000000000C47E                 db    0
.eh_frame:000000000000C47F                 db    0
.eh_frame:000000000000C480                 db 0B0h
.eh_frame:000000000000C481                 db  73h ; s
.eh_frame:000000000000C482                 db 0FFh
.eh_frame:000000000000C483                 db 0FFh
.eh_frame:000000000000C484                 db 0A4h
.eh_frame:000000000000C485                 db    0
.eh_frame:000000000000C486                 db    0
.eh_frame:000000000000C487                 db    0
.eh_frame:000000000000C488                 db    0
.eh_frame:000000000000C489                 db  41h ; A
.eh_frame:000000000000C48A                 db  0Eh
.eh_frame:000000000000C48B                 db  10h
.eh_frame:000000000000C48C                 db  86h
.eh_frame:000000000000C48D                 db    2
.eh_frame:000000000000C48E                 db  41h ; A
.eh_frame:000000000000C48F                 db  0Eh
.eh_frame:000000000000C490                 db  18h
.eh_frame:000000000000C491                 db  83h
.eh_frame:000000000000C492                 db    3
.eh_frame:000000000000C493                 db  44h ; D
.eh_frame:000000000000C494                 db  0Eh
.eh_frame:000000000000C495                 db  20h
.eh_frame:000000000000C496                 db  7Ah ; z
.eh_frame:000000000000C497                 db  0Ah
.eh_frame:000000000000C498                 db  0Eh
.eh_frame:000000000000C499                 db  18h
.eh_frame:000000000000C49A                 db  41h ; A
.eh_frame:000000000000C49B                 db  0Eh
.eh_frame:000000000000C49C                 db  10h
.eh_frame:000000000000C49D                 db  41h ; A
.eh_frame:000000000000C49E                 db  0Eh
.eh_frame:000000000000C49F                 db    8
.eh_frame:000000000000C4A0                 db  41h ; A
.eh_frame:000000000000C4A1                 db  0Bh
.eh_frame:000000000000C4A2                 db    0
.eh_frame:000000000000C4A3                 db    0
.eh_frame:000000000000C4A4                 db    0
.eh_frame:000000000000C4A5                 db    0
.eh_frame:000000000000C4A6                 db    0
.eh_frame:000000000000C4A7                 db    0
.eh_frame:000000000000C4A8                 db  14h
.eh_frame:000000000000C4A9                 db    0
.eh_frame:000000000000C4AA                 db    0
.eh_frame:000000000000C4AB                 db    0
.eh_frame:000000000000C4AC                 db 0ACh
.eh_frame:000000000000C4AD                 db    2
.eh_frame:000000000000C4AE                 db    0
.eh_frame:000000000000C4AF                 db    0
.eh_frame:000000000000C4B0                 db  30h ; 0
.eh_frame:000000000000C4B1                 db  74h ; t
.eh_frame:000000000000C4B2                 db 0FFh
.eh_frame:000000000000C4B3                 db 0FFh
.eh_frame:000000000000C4B4                 db  42h ; B
.eh_frame:000000000000C4B5                 db    0
.eh_frame:000000000000C4B6                 db    0
.eh_frame:000000000000C4B7                 db    0
.eh_frame:000000000000C4B8                 db    0
.eh_frame:000000000000C4B9                 db    0
.eh_frame:000000000000C4BA                 db    0
.eh_frame:000000000000C4BB                 db    0
.eh_frame:000000000000C4BC                 db    0
.eh_frame:000000000000C4BD                 db    0
.eh_frame:000000000000C4BE                 db    0
.eh_frame:000000000000C4BF                 db    0
.eh_frame:000000000000C4C0                 db  1Ch
.eh_frame:000000000000C4C1                 db    0
.eh_frame:000000000000C4C2                 db    0
.eh_frame:000000000000C4C3                 db    0
.eh_frame:000000000000C4C4                 db 0C4h
.eh_frame:000000000000C4C5                 db    2
.eh_frame:000000000000C4C6                 db    0
.eh_frame:000000000000C4C7                 db    0
.eh_frame:000000000000C4C8                 db  68h ; h
.eh_frame:000000000000C4C9                 db  74h ; t
.eh_frame:000000000000C4CA                 db 0FFh
.eh_frame:000000000000C4CB                 db 0FFh
.eh_frame:000000000000C4CC                 db  9Fh
.eh_frame:000000000000C4CD                 db    0
.eh_frame:000000000000C4CE                 db    0
.eh_frame:000000000000C4CF                 db    0
.eh_frame:000000000000C4D0                 db    0
.eh_frame:000000000000C4D1                 db  44h ; D
.eh_frame:000000000000C4D2                 db  0Eh
.eh_frame:000000000000C4D3                 db  10h
.eh_frame:000000000000C4D4                 db  83h
.eh_frame:000000000000C4D5                 db    2
.eh_frame:000000000000C4D6                 db    2
.eh_frame:000000000000C4D7                 db  78h ; x
.eh_frame:000000000000C4D8                 db  0Ah
.eh_frame:000000000000C4D9                 db  0Eh
.eh_frame:000000000000C4DA                 db    8
.eh_frame:000000000000C4DB                 db  41h ; A
.eh_frame:000000000000C4DC                 db  0Bh
.eh_frame:000000000000C4DD                 db    0
.eh_frame:000000000000C4DE                 db    0
.eh_frame:000000000000C4DF                 db    0
.eh_frame:000000000000C4E0                 db  40h ; @
.eh_frame:000000000000C4E1                 db    0
.eh_frame:000000000000C4E2                 db    0
.eh_frame:000000000000C4E3                 db    0
.eh_frame:000000000000C4E4                 db 0E4h
.eh_frame:000000000000C4E5                 db    2
.eh_frame:000000000000C4E6                 db    0
.eh_frame:000000000000C4E7                 db    0
.eh_frame:000000000000C4E8                 db 0E8h
.eh_frame:000000000000C4E9                 db  74h ; t
.eh_frame:000000000000C4EA                 db 0FFh
.eh_frame:000000000000C4EB                 db 0FFh
.eh_frame:000000000000C4EC                 db 0E7h
.eh_frame:000000000000C4ED                 db    0
.eh_frame:000000000000C4EE                 db    0
.eh_frame:000000000000C4EF                 db    0
.eh_frame:000000000000C4F0                 db    0
.eh_frame:000000000000C4F1                 db  41h ; A
.eh_frame:000000000000C4F2                 db  0Eh
.eh_frame:000000000000C4F3                 db  10h
.eh_frame:000000000000C4F4                 db  86h
.eh_frame:000000000000C4F5                 db    2
.eh_frame:000000000000C4F6                 db  41h ; A
.eh_frame:000000000000C4F7                 db  0Eh
.eh_frame:000000000000C4F8                 db  18h
.eh_frame:000000000000C4F9                 db  83h
.eh_frame:000000000000C4FA                 db    3
.eh_frame:000000000000C4FB                 db  49h ; I
.eh_frame:000000000000C4FC                 db  0Eh
.eh_frame:000000000000C4FD                 db  20h
.eh_frame:000000000000C4FE                 db  6Eh ; n
.eh_frame:000000000000C4FF                 db  0Ah
.eh_frame:000000000000C500                 db  0Eh
.eh_frame:000000000000C501                 db  18h
.eh_frame:000000000000C502                 db  41h ; A
.eh_frame:000000000000C503                 db  0Eh
.eh_frame:000000000000C504                 db  10h
.eh_frame:000000000000C505                 db  41h ; A
.eh_frame:000000000000C506                 db  0Eh
.eh_frame:000000000000C507                 db    8
.eh_frame:000000000000C508                 db  45h ; E
.eh_frame:000000000000C509                 db  0Bh
.eh_frame:000000000000C50A                 db    2
.eh_frame:000000000000C50B                 db  4Ah ; J
.eh_frame:000000000000C50C                 db  0Ah
.eh_frame:000000000000C50D                 db  0Eh
.eh_frame:000000000000C50E                 db  18h
.eh_frame:000000000000C50F                 db  41h ; A
.eh_frame:000000000000C510                 db  0Eh
.eh_frame:000000000000C511                 db  10h
.eh_frame:000000000000C512                 db  41h ; A
.eh_frame:000000000000C513                 db  0Eh
.eh_frame:000000000000C514                 db    8
.eh_frame:000000000000C515                 db  44h ; D
.eh_frame:000000000000C516                 db  0Bh
.eh_frame:000000000000C517                 db    2
.eh_frame:000000000000C518                 db  54h ; T
.eh_frame:000000000000C519                 db  0Eh
.eh_frame:000000000000C51A                 db  18h
.eh_frame:000000000000C51B                 db  41h ; A
.eh_frame:000000000000C51C                 db  0Eh
.eh_frame:000000000000C51D                 db  10h
.eh_frame:000000000000C51E                 db  41h ; A
.eh_frame:000000000000C51F                 db  0Eh
.eh_frame:000000000000C520                 db    8
.eh_frame:000000000000C521                 db    0
.eh_frame:000000000000C522                 db    0
.eh_frame:000000000000C523                 db    0
.eh_frame:000000000000C524                 db  74h ; t
.eh_frame:000000000000C525                 db    0
.eh_frame:000000000000C526                 db    0
.eh_frame:000000000000C527                 db    0
.eh_frame:000000000000C528                 db  28h ; (
.eh_frame:000000000000C529                 db    3
.eh_frame:000000000000C52A                 db    0
.eh_frame:000000000000C52B                 db    0
.eh_frame:000000000000C52C                 db  94h
.eh_frame:000000000000C52D                 db  75h ; u
.eh_frame:000000000000C52E                 db 0FFh
.eh_frame:000000000000C52F                 db 0FFh
.eh_frame:000000000000C530                 db  34h ; 4
.eh_frame:000000000000C531                 db  12h
.eh_frame:000000000000C532                 db    0
.eh_frame:000000000000C533                 db    0
.eh_frame:000000000000C534                 db    0
.eh_frame:000000000000C535                 db  42h ; B
.eh_frame:000000000000C536                 db  0Eh
.eh_frame:000000000000C537                 db  10h
.eh_frame:000000000000C538                 db  8Fh
.eh_frame:000000000000C539                 db    2
.eh_frame:000000000000C53A                 db  42h ; B
.eh_frame:000000000000C53B                 db  0Eh
.eh_frame:000000000000C53C                 db  18h
.eh_frame:000000000000C53D                 db  8Eh
.eh_frame:000000000000C53E                 db    3
.eh_frame:000000000000C53F                 db  45h ; E
.eh_frame:000000000000C540                 db  0Eh
.eh_frame:000000000000C541                 db  20h
.eh_frame:000000000000C542                 db  8Dh
.eh_frame:000000000000C543                 db    4
.eh_frame:000000000000C544                 db  42h ; B
.eh_frame:000000000000C545                 db  0Eh
.eh_frame:000000000000C546                 db  28h ; (
.eh_frame:000000000000C547                 db  8Ch
.eh_frame:000000000000C548                 db    5
.eh_frame:000000000000C549                 db  44h ; D
.eh_frame:000000000000C54A                 db  0Eh
.eh_frame:000000000000C54B                 db  30h ; 0
.eh_frame:000000000000C54C                 db  86h
.eh_frame:000000000000C54D                 db    6
.eh_frame:000000000000C54E                 db  41h ; A
.eh_frame:000000000000C54F                 db  0Eh
.eh_frame:000000000000C550                 db  38h ; 8
.eh_frame:000000000000C551                 db  83h
.eh_frame:000000000000C552                 db    7
.eh_frame:000000000000C553                 db  53h ; S
.eh_frame:000000000000C554                 db  0Eh
.eh_frame:000000000000C555                 db 0F0h
.eh_frame:000000000000C556                 db    1
.eh_frame:000000000000C557                 db    3
.eh_frame:000000000000C558                 db  81h
.eh_frame:000000000000C559                 db  0Bh
.eh_frame:000000000000C55A                 db  0Eh
.eh_frame:000000000000C55B                 db 0F8h
.eh_frame:000000000000C55C                 db    1
.eh_frame:000000000000C55D                 db  4Ah ; J
.eh_frame:000000000000C55E                 db  0Eh
.eh_frame:000000000000C55F                 db  80h
.eh_frame:000000000000C560                 db    2
.eh_frame:000000000000C561                 db  44h ; D
.eh_frame:000000000000C562                 db  0Eh
.eh_frame:000000000000C563                 db  88h
.eh_frame:000000000000C564                 db    2
.eh_frame:000000000000C565                 db  45h ; E
.eh_frame:000000000000C566                 db  0Eh
.eh_frame:000000000000C567                 db  90h
.eh_frame:000000000000C568                 db    2
.eh_frame:000000000000C569                 db  5Fh ; _
.eh_frame:000000000000C56A                 db  0Eh
.eh_frame:000000000000C56B                 db 0F0h
.eh_frame:000000000000C56C                 db    1
.eh_frame:000000000000C56D                 db  64h ; d
.eh_frame:000000000000C56E                 db  0Ah
.eh_frame:000000000000C56F                 db  0Eh
.eh_frame:000000000000C570                 db  38h ; 8
.eh_frame:000000000000C571                 db  41h ; A
.eh_frame:000000000000C572                 db  0Eh
.eh_frame:000000000000C573                 db  30h ; 0
.eh_frame:000000000000C574                 db  41h ; A
.eh_frame:000000000000C575                 db  0Eh
.eh_frame:000000000000C576                 db  28h ; (
.eh_frame:000000000000C577                 db  42h ; B
.eh_frame:000000000000C578                 db  0Eh
.eh_frame:000000000000C579                 db  20h
.eh_frame:000000000000C57A                 db  42h ; B
.eh_frame:000000000000C57B                 db  0Eh
.eh_frame:000000000000C57C                 db  18h
.eh_frame:000000000000C57D                 db  42h ; B
.eh_frame:000000000000C57E                 db  0Eh
.eh_frame:000000000000C57F                 db  10h
.eh_frame:000000000000C580                 db  42h ; B
.eh_frame:000000000000C581                 db  0Eh
.eh_frame:000000000000C582                 db    8
.eh_frame:000000000000C583                 db  44h ; D
.eh_frame:000000000000C584                 db  0Bh
.eh_frame:000000000000C585                 db    3
.eh_frame:000000000000C586                 db  99h
.eh_frame:000000000000C587                 db    5
.eh_frame:000000000000C588                 db  0Eh
.eh_frame:000000000000C589                 db 0F8h
.eh_frame:000000000000C58A                 db    1
.eh_frame:000000000000C58B                 db  4Dh ; M
.eh_frame:000000000000C58C                 db  0Eh
.eh_frame:000000000000C58D                 db  80h
.eh_frame:000000000000C58E                 db    2
.eh_frame:000000000000C58F                 db  44h ; D
.eh_frame:000000000000C590                 db  0Eh
.eh_frame:000000000000C591                 db  88h
.eh_frame:000000000000C592                 db    2
.eh_frame:000000000000C593                 db  47h ; G
.eh_frame:000000000000C594                 db  0Eh
.eh_frame:000000000000C595                 db  90h
.eh_frame:000000000000C596                 db    2
.eh_frame:000000000000C597                 db  5Bh ; [
.eh_frame:000000000000C598                 db  0Eh
.eh_frame:000000000000C599                 db 0F0h
.eh_frame:000000000000C59A                 db    1
.eh_frame:000000000000C59B                 db    0
.eh_frame:000000000000C59C                 db  68h ; h
.eh_frame:000000000000C59D                 db    0
.eh_frame:000000000000C59E                 db    0
.eh_frame:000000000000C59F                 db    0
.eh_frame:000000000000C5A0                 db 0A0h
.eh_frame:000000000000C5A1                 db    3
.eh_frame:000000000000C5A2                 db    0
.eh_frame:000000000000C5A3                 db    0
.eh_frame:000000000000C5A4                 db  5Ch ; \
.eh_frame:000000000000C5A5                 db  87h
.eh_frame:000000000000C5A6                 db 0FFh
.eh_frame:000000000000C5A7                 db 0FFh
.eh_frame:000000000000C5A8                 db 0ABh
.eh_frame:000000000000C5A9                 db    1
.eh_frame:000000000000C5AA                 db    0
.eh_frame:000000000000C5AB                 db    0
.eh_frame:000000000000C5AC                 db    0
.eh_frame:000000000000C5AD                 db  42h ; B
.eh_frame:000000000000C5AE                 db  0Eh
.eh_frame:000000000000C5AF                 db  10h
.eh_frame:000000000000C5B0                 db  8Fh
.eh_frame:000000000000C5B1                 db    2
.eh_frame:000000000000C5B2                 db  42h ; B
.eh_frame:000000000000C5B3                 db  0Eh
.eh_frame:000000000000C5B4                 db  18h
.eh_frame:000000000000C5B5                 db  8Eh
.eh_frame:000000000000C5B6                 db    3
.eh_frame:000000000000C5B7                 db  45h ; E
.eh_frame:000000000000C5B8                 db  0Eh
.eh_frame:000000000000C5B9                 db  20h
.eh_frame:000000000000C5BA                 db  8Dh
.eh_frame:000000000000C5BB                 db    4
.eh_frame:000000000000C5BC                 db  42h ; B
.eh_frame:000000000000C5BD                 db  0Eh
.eh_frame:000000000000C5BE                 db  28h ; (
.eh_frame:000000000000C5BF                 db  8Ch
.eh_frame:000000000000C5C0                 db    5
.eh_frame:000000000000C5C1                 db  44h ; D
.eh_frame:000000000000C5C2                 db  0Eh
.eh_frame:000000000000C5C3                 db  30h ; 0
.eh_frame:000000000000C5C4                 db  86h
.eh_frame:000000000000C5C5                 db    6
.eh_frame:000000000000C5C6                 db  41h ; A
.eh_frame:000000000000C5C7                 db  0Eh
.eh_frame:000000000000C5C8                 db  38h ; 8
.eh_frame:000000000000C5C9                 db  83h
.eh_frame:000000000000C5CA                 db    7
.eh_frame:000000000000C5CB                 db  47h ; G
.eh_frame:000000000000C5CC                 db  0Eh
.eh_frame:000000000000C5CD                 db  60h ; `
.eh_frame:000000000000C5CE                 db    2
.eh_frame:000000000000C5CF                 db  99h
.eh_frame:000000000000C5D0                 db  0Eh
.eh_frame:000000000000C5D1                 db  68h ; h
.eh_frame:000000000000C5D2                 db  5Fh ; _
.eh_frame:000000000000C5D3                 db  0Eh
.eh_frame:000000000000C5D4                 db  70h ; p
.eh_frame:000000000000C5D5                 db  46h ; F
.eh_frame:000000000000C5D6                 db  0Eh
.eh_frame:000000000000C5D7                 db  78h ; x
.eh_frame:000000000000C5D8                 db  42h ; B
.eh_frame:000000000000C5D9                 db  0Eh
.eh_frame:000000000000C5DA                 db  80h
.eh_frame:000000000000C5DB                 db    1
.eh_frame:000000000000C5DC                 db  59h ; Y
.eh_frame:000000000000C5DD                 db  0Eh
.eh_frame:000000000000C5DE                 db  60h ; `
.eh_frame:000000000000C5DF                 db    2
.eh_frame:000000000000C5E0                 db  40h ; @
.eh_frame:000000000000C5E1                 db  0Eh
.eh_frame:000000000000C5E2                 db  68h ; h
.eh_frame:000000000000C5E3                 db  4Bh ; K
.eh_frame:000000000000C5E4                 db  0Eh
.eh_frame:000000000000C5E5                 db  70h ; p
.eh_frame:000000000000C5E6                 db  43h ; C
.eh_frame:000000000000C5E7                 db  0Eh
.eh_frame:000000000000C5E8                 db  78h ; x
.eh_frame:000000000000C5E9                 db  45h ; E
.eh_frame:000000000000C5EA                 db  0Eh
.eh_frame:000000000000C5EB                 db  80h
.eh_frame:000000000000C5EC                 db    1
.eh_frame:000000000000C5ED                 db  5Eh ; ^
.eh_frame:000000000000C5EE                 db  0Eh
.eh_frame:000000000000C5EF                 db  60h ; `
.eh_frame:000000000000C5F0                 db  4Ch ; L
.eh_frame:000000000000C5F1                 db  0Ah
.eh_frame:000000000000C5F2                 db  0Eh
.eh_frame:000000000000C5F3                 db  38h ; 8
.eh_frame:000000000000C5F4                 db  44h ; D
.eh_frame:000000000000C5F5                 db  0Eh
.eh_frame:000000000000C5F6                 db  30h ; 0
.eh_frame:000000000000C5F7                 db  41h ; A
.eh_frame:000000000000C5F8                 db  0Eh
.eh_frame:000000000000C5F9                 db  28h ; (
.eh_frame:000000000000C5FA                 db  42h ; B
.eh_frame:000000000000C5FB                 db  0Eh
.eh_frame:000000000000C5FC                 db  20h
.eh_frame:000000000000C5FD                 db  42h ; B
.eh_frame:000000000000C5FE                 db  0Eh
.eh_frame:000000000000C5FF                 db  18h
.eh_frame:000000000000C600                 db  42h ; B
.eh_frame:000000000000C601                 db  0Eh
.eh_frame:000000000000C602                 db  10h
.eh_frame:000000000000C603                 db  42h ; B
.eh_frame:000000000000C604                 db  0Eh
.eh_frame:000000000000C605                 db    8
.eh_frame:000000000000C606                 db  46h ; F
.eh_frame:000000000000C607                 db  0Bh
.eh_frame:000000000000C608                 db  28h ; (
.eh_frame:000000000000C609                 db    0
.eh_frame:000000000000C60A                 db    0
.eh_frame:000000000000C60B                 db    0
.eh_frame:000000000000C60C                 db  0Ch
.eh_frame:000000000000C60D                 db    4
.eh_frame:000000000000C60E                 db    0
.eh_frame:000000000000C60F                 db    0
.eh_frame:000000000000C610                 db 0A0h
.eh_frame:000000000000C611                 db  88h
.eh_frame:000000000000C612                 db 0FFh
.eh_frame:000000000000C613                 db 0FFh
.eh_frame:000000000000C614                 db  36h ; 6
.eh_frame:000000000000C615                 db    0
.eh_frame:000000000000C616                 db    0
.eh_frame:000000000000C617                 db    0
.eh_frame:000000000000C618                 db    0
.eh_frame:000000000000C619                 db  42h ; B
.eh_frame:000000000000C61A                 db  0Eh
.eh_frame:000000000000C61B                 db  10h
.eh_frame:000000000000C61C                 db  8Ch
.eh_frame:000000000000C61D                 db    2
.eh_frame:000000000000C61E                 db  41h ; A
.eh_frame:000000000000C61F                 db  0Eh
.eh_frame:000000000000C620                 db  18h
.eh_frame:000000000000C621                 db  86h
.eh_frame:000000000000C622                 db    3
.eh_frame:000000000000C623                 db  41h ; A
.eh_frame:000000000000C624                 db  0Eh
.eh_frame:000000000000C625                 db  20h
.eh_frame:000000000000C626                 db  83h
.eh_frame:000000000000C627                 db    4
.eh_frame:000000000000C628                 db  6Eh ; n
.eh_frame:000000000000C629                 db  0Eh
.eh_frame:000000000000C62A                 db  18h
.eh_frame:000000000000C62B                 db  41h ; A
.eh_frame:000000000000C62C                 db  0Eh
.eh_frame:000000000000C62D                 db  10h
.eh_frame:000000000000C62E                 db  42h ; B
.eh_frame:000000000000C62F                 db  0Eh
.eh_frame:000000000000C630                 db    8
.eh_frame:000000000000C631                 db    0
.eh_frame:000000000000C632                 db    0
.eh_frame:000000000000C633                 db    0
.eh_frame:000000000000C634                 db  10h
.eh_frame:000000000000C635                 db    0
.eh_frame:000000000000C636                 db    0
.eh_frame:000000000000C637                 db    0
.eh_frame:000000000000C638                 db  38h ; 8
.eh_frame:000000000000C639                 db    4
.eh_frame:000000000000C63A                 db    0
.eh_frame:000000000000C63B                 db    0
.eh_frame:000000000000C63C                 db 0B4h
.eh_frame:000000000000C63D                 db  88h
.eh_frame:000000000000C63E                 db 0FFh
.eh_frame:000000000000C63F                 db 0FFh
.eh_frame:000000000000C640                 db  11h
.eh_frame:000000000000C641                 db    0
.eh_frame:000000000000C642                 db    0
.eh_frame:000000000000C643                 db    0
.eh_frame:000000000000C644                 db    0
.eh_frame:000000000000C645                 db    0
.eh_frame:000000000000C646                 db    0
.eh_frame:000000000000C647                 db    0
.eh_frame:000000000000C648                 db  10h
.eh_frame:000000000000C649                 db    0
.eh_frame:000000000000C64A                 db    0
.eh_frame:000000000000C64B                 db    0
.eh_frame:000000000000C64C                 db  4Ch ; L
.eh_frame:000000000000C64D                 db    4
.eh_frame:000000000000C64E                 db    0
.eh_frame:000000000000C64F                 db    0
.eh_frame:000000000000C650                 db 0C0h
.eh_frame:000000000000C651                 db  88h
.eh_frame:000000000000C652                 db 0FFh
.eh_frame:000000000000C653                 db 0FFh
.eh_frame:000000000000C654                 db  11h
.eh_frame:000000000000C655                 db    0
.eh_frame:000000000000C656                 db    0
.eh_frame:000000000000C657                 db    0
.eh_frame:000000000000C658                 db    0
.eh_frame:000000000000C659                 db    0
.eh_frame:000000000000C65A                 db    0
.eh_frame:000000000000C65B                 db    0
.eh_frame:000000000000C65C                 db  10h
.eh_frame:000000000000C65D                 db    0
.eh_frame:000000000000C65E                 db    0
.eh_frame:000000000000C65F                 db    0
.eh_frame:000000000000C660                 db  60h ; `
.eh_frame:000000000000C661                 db    4
.eh_frame:000000000000C662                 db    0
.eh_frame:000000000000C663                 db    0
.eh_frame:000000000000C664                 db 0CCh
.eh_frame:000000000000C665                 db  88h
.eh_frame:000000000000C666                 db 0FFh
.eh_frame:000000000000C667                 db 0FFh
.eh_frame:000000000000C668                 db  35h ; 5
.eh_frame:000000000000C669                 db    0
.eh_frame:000000000000C66A                 db    0
.eh_frame:000000000000C66B                 db    0
.eh_frame:000000000000C66C                 db    0
.eh_frame:000000000000C66D                 db    0
.eh_frame:000000000000C66E                 db    0
.eh_frame:000000000000C66F                 db    0
.eh_frame:000000000000C670                 db  10h
.eh_frame:000000000000C671                 db    0
.eh_frame:000000000000C672                 db    0
.eh_frame:000000000000C673                 db    0
.eh_frame:000000000000C674                 db  74h ; t
.eh_frame:000000000000C675                 db    4
.eh_frame:000000000000C676                 db    0
.eh_frame:000000000000C677                 db    0
.eh_frame:000000000000C678                 db 0F8h
.eh_frame:000000000000C679                 db  88h
.eh_frame:000000000000C67A                 db 0FFh
.eh_frame:000000000000C67B                 db 0FFh
.eh_frame:000000000000C67C                 db  15h
.eh_frame:000000000000C67D                 db    0
.eh_frame:000000000000C67E                 db    0
.eh_frame:000000000000C67F                 db    0
.eh_frame:000000000000C680                 db    0
.eh_frame:000000000000C681                 db    0
.eh_frame:000000000000C682                 db    0
.eh_frame:000000000000C683                 db    0
.eh_frame:000000000000C684                 db  10h
.eh_frame:000000000000C685                 db    0
.eh_frame:000000000000C686                 db    0
.eh_frame:000000000000C687                 db    0
.eh_frame:000000000000C688                 db  88h
.eh_frame:000000000000C689                 db    4
.eh_frame:000000000000C68A                 db    0
.eh_frame:000000000000C68B                 db    0
.eh_frame:000000000000C68C                 db    4
.eh_frame:000000000000C68D                 db  89h
.eh_frame:000000000000C68E                 db 0FFh
.eh_frame:000000000000C68F                 db 0FFh
.eh_frame:000000000000C690                 db  30h ; 0
.eh_frame:000000000000C691                 db    0
.eh_frame:000000000000C692                 db    0
.eh_frame:000000000000C693                 db    0
.eh_frame:000000000000C694                 db    0
.eh_frame:000000000000C695                 db  6Bh ; k
.eh_frame:000000000000C696                 db  0Eh
.eh_frame:000000000000C697                 db  10h
.eh_frame:000000000000C698                 db  50h ; P
.eh_frame:000000000000C699                 db    0
.eh_frame:000000000000C69A                 db    0
.eh_frame:000000000000C69B                 db    0
.eh_frame:000000000000C69C                 db  9Ch
.eh_frame:000000000000C69D                 db    4
.eh_frame:000000000000C69E                 db    0
.eh_frame:000000000000C69F                 db    0
.eh_frame:000000000000C6A0                 db  20h
.eh_frame:000000000000C6A1                 db  89h
.eh_frame:000000000000C6A2                 db 0FFh
.eh_frame:000000000000C6A3                 db 0FFh
.eh_frame:000000000000C6A4                 db  74h ; t
.eh_frame:000000000000C6A5                 db    0
.eh_frame:000000000000C6A6                 db    0
.eh_frame:000000000000C6A7                 db    0
.eh_frame:000000000000C6A8                 db    0
.eh_frame:000000000000C6A9                 db  42h ; B
.eh_frame:000000000000C6AA                 db  0Eh
.eh_frame:000000000000C6AB                 db  10h
.eh_frame:000000000000C6AC                 db  8Fh
.eh_frame:000000000000C6AD                 db    2
.eh_frame:000000000000C6AE                 db  42h ; B
.eh_frame:000000000000C6AF                 db  0Eh
.eh_frame:000000000000C6B0                 db  18h
.eh_frame:000000000000C6B1                 db  8Eh
.eh_frame:000000000000C6B2                 db    3
.eh_frame:000000000000C6B3                 db  49h ; I
.eh_frame:000000000000C6B4                 db  0Eh
.eh_frame:000000000000C6B5                 db  20h
.eh_frame:000000000000C6B6                 db  8Dh
.eh_frame:000000000000C6B7                 db    4
.eh_frame:000000000000C6B8                 db  42h ; B
.eh_frame:000000000000C6B9                 db  0Eh
.eh_frame:000000000000C6BA                 db  28h ; (
.eh_frame:000000000000C6BB                 db  8Ch
.eh_frame:000000000000C6BC                 db    5
.eh_frame:000000000000C6BD                 db  44h ; D
.eh_frame:000000000000C6BE                 db  0Eh
.eh_frame:000000000000C6BF                 db  30h ; 0
.eh_frame:000000000000C6C0                 db  86h
.eh_frame:000000000000C6C1                 db    6
.eh_frame:000000000000C6C2                 db  41h ; A
.eh_frame:000000000000C6C3                 db  0Eh
.eh_frame:000000000000C6C4                 db  38h ; 8
.eh_frame:000000000000C6C5                 db  83h
.eh_frame:000000000000C6C6                 db    7
.eh_frame:000000000000C6C7                 db  4Dh ; M
.eh_frame:000000000000C6C8                 db  0Eh
.eh_frame:000000000000C6C9                 db  50h ; P
.eh_frame:000000000000C6CA                 db  5Fh ; _
.eh_frame:000000000000C6CB                 db  0Eh
.eh_frame:000000000000C6CC                 db  58h ; X
.eh_frame:000000000000C6CD                 db  47h ; G
.eh_frame:000000000000C6CE                 db  0Eh
.eh_frame:000000000000C6CF                 db  60h ; `
.eh_frame:000000000000C6D0                 db  46h ; F
.eh_frame:000000000000C6D1                 db  0Eh
.eh_frame:000000000000C6D2                 db  68h ; h
.eh_frame:000000000000C6D3                 db  44h ; D
.eh_frame:000000000000C6D4                 db  0Eh
.eh_frame:000000000000C6D5                 db  70h ; p
.eh_frame:000000000000C6D6                 db  58h ; X
.eh_frame:000000000000C6D7                 db  0Eh
.eh_frame:000000000000C6D8                 db  38h ; 8
.eh_frame:000000000000C6D9                 db  41h ; A
.eh_frame:000000000000C6DA                 db  0Eh
.eh_frame:000000000000C6DB                 db  30h ; 0
.eh_frame:000000000000C6DC                 db  41h ; A
.eh_frame:000000000000C6DD                 db  0Eh
.eh_frame:000000000000C6DE                 db  28h ; (
.eh_frame:000000000000C6DF                 db  42h ; B
.eh_frame:000000000000C6E0                 db  0Eh
.eh_frame:000000000000C6E1                 db  20h
.eh_frame:000000000000C6E2                 db  42h ; B
.eh_frame:000000000000C6E3                 db  0Eh
.eh_frame:000000000000C6E4                 db  18h
.eh_frame:000000000000C6E5                 db  42h ; B
.eh_frame:000000000000C6E6                 db  0Eh
.eh_frame:000000000000C6E7                 db  10h
.eh_frame:000000000000C6E8                 db  42h ; B
.eh_frame:000000000000C6E9                 db  0Eh
.eh_frame:000000000000C6EA                 db    8
.eh_frame:000000000000C6EB                 db    0
.eh_frame:000000000000C6EC                 db  68h ; h
.eh_frame:000000000000C6ED                 db    0
.eh_frame:000000000000C6EE                 db    0
.eh_frame:000000000000C6EF                 db    0
.eh_frame:000000000000C6F0                 db 0F0h
.eh_frame:000000000000C6F1                 db    4
.eh_frame:000000000000C6F2                 db    0
.eh_frame:000000000000C6F3                 db    0
.eh_frame:000000000000C6F4                 db  4Ch ; L
.eh_frame:000000000000C6F5                 db  89h
.eh_frame:000000000000C6F6                 db 0FFh
.eh_frame:000000000000C6F7                 db 0FFh
.eh_frame:000000000000C6F8                 db 0E3h
.eh_frame:000000000000C6F9                 db    0
.eh_frame:000000000000C6FA                 db    0
.eh_frame:000000000000C6FB                 db    0
.eh_frame:000000000000C6FC                 db    0
.eh_frame:000000000000C6FD                 db  42h ; B
.eh_frame:000000000000C6FE                 db  0Eh
.eh_frame:000000000000C6FF                 db  10h
.eh_frame:000000000000C700                 db  8Fh
.eh_frame:000000000000C701                 db    2
.eh_frame:000000000000C702                 db  42h ; B
.eh_frame:000000000000C703                 db  0Eh
.eh_frame:000000000000C704                 db  18h
.eh_frame:000000000000C705                 db  8Eh
.eh_frame:000000000000C706                 db    3
.eh_frame:000000000000C707                 db  49h ; I
.eh_frame:000000000000C708                 db  0Eh
.eh_frame:000000000000C709                 db  20h
.eh_frame:000000000000C70A                 db  8Dh
.eh_frame:000000000000C70B                 db    4
.eh_frame:000000000000C70C                 db  42h ; B
.eh_frame:000000000000C70D                 db  0Eh
.eh_frame:000000000000C70E                 db  28h ; (
.eh_frame:000000000000C70F                 db  8Ch
.eh_frame:000000000000C710                 db    5
.eh_frame:000000000000C711                 db  44h ; D
.eh_frame:000000000000C712                 db  0Eh
.eh_frame:000000000000C713                 db  30h ; 0
.eh_frame:000000000000C714                 db  86h
.eh_frame:000000000000C715                 db    6
.eh_frame:000000000000C716                 db  41h ; A
.eh_frame:000000000000C717                 db  0Eh
.eh_frame:000000000000C718                 db  38h ; 8
.eh_frame:000000000000C719                 db  83h
.eh_frame:000000000000C71A                 db    7
.eh_frame:000000000000C71B                 db  4Dh ; M
.eh_frame:000000000000C71C                 db  0Eh
.eh_frame:000000000000C71D                 db  70h ; p
.eh_frame:000000000000C71E                 db  65h ; e
.eh_frame:000000000000C71F                 db  0Eh
.eh_frame:000000000000C720                 db  78h ; x
.eh_frame:000000000000C721                 db  4Dh ; M
.eh_frame:000000000000C722                 db  0Eh
.eh_frame:000000000000C723                 db  80h
.eh_frame:000000000000C724                 db    1
.eh_frame:000000000000C725                 db  46h ; F
.eh_frame:000000000000C726                 db  0Eh
.eh_frame:000000000000C727                 db  88h
.eh_frame:000000000000C728                 db    1
.eh_frame:000000000000C729                 db  42h ; B
.eh_frame:000000000000C72A                 db  0Eh
.eh_frame:000000000000C72B                 db  90h
.eh_frame:000000000000C72C                 db    1
.eh_frame:000000000000C72D                 db  5Eh ; ^
.eh_frame:000000000000C72E                 db  0Eh
.eh_frame:000000000000C72F                 db  70h ; p
.eh_frame:000000000000C730                 db  56h ; V
.eh_frame:000000000000C731                 db  0Eh
.eh_frame:000000000000C732                 db  78h ; x
.eh_frame:000000000000C733                 db  43h ; C
.eh_frame:000000000000C734                 db  0Eh
.eh_frame:000000000000C735                 db  80h
.eh_frame:000000000000C736                 db    1
.eh_frame:000000000000C737                 db  43h ; C
.eh_frame:000000000000C738                 db  0Eh
.eh_frame:000000000000C739                 db  88h
.eh_frame:000000000000C73A                 db    1
.eh_frame:000000000000C73B                 db  56h ; V
.eh_frame:000000000000C73C                 db  0Eh
.eh_frame:000000000000C73D                 db  90h
.eh_frame:000000000000C73E                 db    1
.eh_frame:000000000000C73F                 db  52h ; R
.eh_frame:000000000000C740                 db  0Eh
.eh_frame:000000000000C741                 db  70h ; p
.eh_frame:000000000000C742                 db  5Bh ; [
.eh_frame:000000000000C743                 db  0Eh
.eh_frame:000000000000C744                 db  38h ; 8
.eh_frame:000000000000C745                 db  41h ; A
.eh_frame:000000000000C746                 db  0Eh
.eh_frame:000000000000C747                 db  30h ; 0
.eh_frame:000000000000C748                 db  41h ; A
.eh_frame:000000000000C749                 db  0Eh
.eh_frame:000000000000C74A                 db  28h ; (
.eh_frame:000000000000C74B                 db  42h ; B
.eh_frame:000000000000C74C                 db  0Eh
.eh_frame:000000000000C74D                 db  20h
.eh_frame:000000000000C74E                 db  42h ; B
.eh_frame:000000000000C74F                 db  0Eh
.eh_frame:000000000000C750                 db  18h
.eh_frame:000000000000C751                 db  42h ; B
.eh_frame:000000000000C752                 db  0Eh
.eh_frame:000000000000C753                 db  10h
.eh_frame:000000000000C754                 db  42h ; B
.eh_frame:000000000000C755                 db  0Eh
.eh_frame:000000000000C756                 db    8
.eh_frame:000000000000C757                 db    0
.eh_frame:000000000000C758                 db  10h
.eh_frame:000000000000C759                 db    0
.eh_frame:000000000000C75A                 db    0
.eh_frame:000000000000C75B                 db    0
.eh_frame:000000000000C75C                 db  5Ch ; \
.eh_frame:000000000000C75D                 db    5
.eh_frame:000000000000C75E                 db    0
.eh_frame:000000000000C75F                 db    0
.eh_frame:000000000000C760                 db 0D0h
.eh_frame:000000000000C761                 db  89h
.eh_frame:000000000000C762                 db 0FFh
.eh_frame:000000000000C763                 db 0FFh
.eh_frame:000000000000C764                 db  0Ah
.eh_frame:000000000000C765                 db    0
.eh_frame:000000000000C766                 db    0
.eh_frame:000000000000C767                 db    0
.eh_frame:000000000000C768                 db    0
.eh_frame:000000000000C769                 db    0
.eh_frame:000000000000C76A                 db    0
.eh_frame:000000000000C76B                 db    0
.eh_frame:000000000000C76C                 db  28h ; (
.eh_frame:000000000000C76D                 db    0
.eh_frame:000000000000C76E                 db    0
.eh_frame:000000000000C76F                 db    0
.eh_frame:000000000000C770                 db  70h ; p
.eh_frame:000000000000C771                 db    5
.eh_frame:000000000000C772                 db    0
.eh_frame:000000000000C773                 db    0
.eh_frame:000000000000C774                 db 0CCh
.eh_frame:000000000000C775                 db  89h
.eh_frame:000000000000C776                 db 0FFh
.eh_frame:000000000000C777                 db 0FFh
.eh_frame:000000000000C778                 db  93h
.eh_frame:000000000000C779                 db    0
.eh_frame:000000000000C77A                 db    0
.eh_frame:000000000000C77B                 db    0
.eh_frame:000000000000C77C                 db    0
.eh_frame:000000000000C77D                 db  48h ; H
.eh_frame:000000000000C77E                 db  0Eh
.eh_frame:000000000000C77F                 db  10h
.eh_frame:000000000000C780                 db  8Ch
.eh_frame:000000000000C781                 db    2
.eh_frame:000000000000C782                 db  48h ; H
.eh_frame:000000000000C783                 db  0Eh
.eh_frame:000000000000C784                 db  18h
.eh_frame:000000000000C785                 db  86h
.eh_frame:000000000000C786                 db    3
.eh_frame:000000000000C787                 db  41h ; A
.eh_frame:000000000000C788                 db  0Eh
.eh_frame:000000000000C789                 db  20h
.eh_frame:000000000000C78A                 db  83h
.eh_frame:000000000000C78B                 db    4
.eh_frame:000000000000C78C                 db    2
.eh_frame:000000000000C78D                 db  74h ; t
.eh_frame:000000000000C78E                 db  0Eh
.eh_frame:000000000000C78F                 db  18h
.eh_frame:000000000000C790                 db  4Bh ; K
.eh_frame:000000000000C791                 db  0Eh
.eh_frame:000000000000C792                 db  10h
.eh_frame:000000000000C793                 db  42h ; B
.eh_frame:000000000000C794                 db  0Eh
.eh_frame:000000000000C795                 db    8
.eh_frame:000000000000C796                 db    0
.eh_frame:000000000000C797                 db    0
.eh_frame:000000000000C798                 db  10h
.eh_frame:000000000000C799                 db    0
.eh_frame:000000000000C79A                 db    0
.eh_frame:000000000000C79B                 db    0
.eh_frame:000000000000C79C                 db  9Ch
.eh_frame:000000000000C79D                 db    5
.eh_frame:000000000000C79E                 db    0
.eh_frame:000000000000C79F                 db    0
.eh_frame:000000000000C7A0                 db  40h ; @
.eh_frame:000000000000C7A1                 db  8Ah
.eh_frame:000000000000C7A2                 db 0FFh
.eh_frame:000000000000C7A3                 db 0FFh
.eh_frame:000000000000C7A4                 db  13h
.eh_frame:000000000000C7A5                 db    0
.eh_frame:000000000000C7A6                 db    0
.eh_frame:000000000000C7A7                 db    0
.eh_frame:000000000000C7A8                 db    0
.eh_frame:000000000000C7A9                 db    0
.eh_frame:000000000000C7AA                 db    0
.eh_frame:000000000000C7AB                 db    0
.eh_frame:000000000000C7AC                 db  10h
.eh_frame:000000000000C7AD                 db    0
.eh_frame:000000000000C7AE                 db    0
.eh_frame:000000000000C7AF                 db    0
.eh_frame:000000000000C7B0                 db 0B0h
.eh_frame:000000000000C7B1                 db    5
.eh_frame:000000000000C7B2                 db    0
.eh_frame:000000000000C7B3                 db    0
.eh_frame:000000000000C7B4                 db  4Ch ; L
.eh_frame:000000000000C7B5                 db  8Ah
.eh_frame:000000000000C7B6                 db 0FFh
.eh_frame:000000000000C7B7                 db 0FFh
.eh_frame:000000000000C7B8                 db  0Ch
.eh_frame:000000000000C7B9                 db    0
.eh_frame:000000000000C7BA                 db    0
.eh_frame:000000000000C7BB                 db    0
.eh_frame:000000000000C7BC                 db    0
.eh_frame:000000000000C7BD                 db    0
.eh_frame:000000000000C7BE                 db    0
.eh_frame:000000000000C7BF                 db    0
.eh_frame:000000000000C7C0                 db  10h
.eh_frame:000000000000C7C1                 db    0
.eh_frame:000000000000C7C2                 db    0
.eh_frame:000000000000C7C3                 db    0
.eh_frame:000000000000C7C4                 db 0C4h
.eh_frame:000000000000C7C5                 db    5
.eh_frame:000000000000C7C6                 db    0
.eh_frame:000000000000C7C7                 db    0
.eh_frame:000000000000C7C8                 db  48h ; H
.eh_frame:000000000000C7C9                 db  8Ah
.eh_frame:000000000000C7CA                 db 0FFh
.eh_frame:000000000000C7CB                 db 0FFh
.eh_frame:000000000000C7CC                 db  18h
.eh_frame:000000000000C7CD                 db    0
.eh_frame:000000000000C7CE                 db    0
.eh_frame:000000000000C7CF                 db    0
.eh_frame:000000000000C7D0                 db    0
.eh_frame:000000000000C7D1                 db    0
.eh_frame:000000000000C7D2                 db    0
.eh_frame:000000000000C7D3                 db    0
.eh_frame:000000000000C7D4                 db  10h
.eh_frame:000000000000C7D5                 db    0
.eh_frame:000000000000C7D6                 db    0
.eh_frame:000000000000C7D7                 db    0
.eh_frame:000000000000C7D8                 db 0D8h
.eh_frame:000000000000C7D9                 db    5
.eh_frame:000000000000C7DA                 db    0
.eh_frame:000000000000C7DB                 db    0
.eh_frame:000000000000C7DC                 db  54h ; T
.eh_frame:000000000000C7DD                 db  8Ah
.eh_frame:000000000000C7DE                 db 0FFh
.eh_frame:000000000000C7DF                 db 0FFh
.eh_frame:000000000000C7E0                 db  14h
.eh_frame:000000000000C7E1                 db    0
.eh_frame:000000000000C7E2                 db    0
.eh_frame:000000000000C7E3                 db    0
.eh_frame:000000000000C7E4                 db    0
.eh_frame:000000000000C7E5                 db    0
.eh_frame:000000000000C7E6                 db    0
.eh_frame:000000000000C7E7                 db    0
.eh_frame:000000000000C7E8                 db  18h
.eh_frame:000000000000C7E9                 db    0
.eh_frame:000000000000C7EA                 db    0
.eh_frame:000000000000C7EB                 db    0
.eh_frame:000000000000C7EC                 db 0ECh
.eh_frame:000000000000C7ED                 db    5
.eh_frame:000000000000C7EE                 db    0
.eh_frame:000000000000C7EF                 db    0
.eh_frame:000000000000C7F0                 db  60h ; `
.eh_frame:000000000000C7F1                 db  8Ah
.eh_frame:000000000000C7F2                 db 0FFh
.eh_frame:000000000000C7F3                 db 0FFh
.eh_frame:000000000000C7F4                 db  8Eh
.eh_frame:000000000000C7F5                 db    0
.eh_frame:000000000000C7F6                 db    0
.eh_frame:000000000000C7F7                 db    0
.eh_frame:000000000000C7F8                 db    0
.eh_frame:000000000000C7F9                 db  44h ; D
.eh_frame:000000000000C7FA                 db  0Eh
.eh_frame:000000000000C7FB                 db  50h ; P
.eh_frame:000000000000C7FC                 db    2
.eh_frame:000000000000C7FD                 db  7Fh ; 
.eh_frame:000000000000C7FE                 db  0Ah
.eh_frame:000000000000C7FF                 db  0Eh
.eh_frame:000000000000C800                 db    8
.eh_frame:000000000000C801                 db  41h ; A
.eh_frame:000000000000C802                 db  0Bh
.eh_frame:000000000000C803                 db    0
.eh_frame:000000000000C804                 db  18h
.eh_frame:000000000000C805                 db    0
.eh_frame:000000000000C806                 db    0
.eh_frame:000000000000C807                 db    0
.eh_frame:000000000000C808                 db    8
.eh_frame:000000000000C809                 db    6
.eh_frame:000000000000C80A                 db    0
.eh_frame:000000000000C80B                 db    0
.eh_frame:000000000000C80C                 db 0D4h
.eh_frame:000000000000C80D                 db  8Ah
.eh_frame:000000000000C80E                 db 0FFh
.eh_frame:000000000000C80F                 db 0FFh
.eh_frame:000000000000C810                 db  8Ah
.eh_frame:000000000000C811                 db    0
.eh_frame:000000000000C812                 db    0
.eh_frame:000000000000C813                 db    0
.eh_frame:000000000000C814                 db    0
.eh_frame:000000000000C815                 db  44h ; D
.eh_frame:000000000000C816                 db  0Eh
.eh_frame:000000000000C817                 db  50h ; P
.eh_frame:000000000000C818                 db    2
.eh_frame:000000000000C819                 db  7Bh ; {
.eh_frame:000000000000C81A                 db  0Ah
.eh_frame:000000000000C81B                 db  0Eh
.eh_frame:000000000000C81C                 db    8
.eh_frame:000000000000C81D                 db  41h ; A
.eh_frame:000000000000C81E                 db  0Bh
.eh_frame:000000000000C81F                 db    0
.eh_frame:000000000000C820                 db  10h
.eh_frame:000000000000C821                 db    0
.eh_frame:000000000000C822                 db    0
.eh_frame:000000000000C823                 db    0
.eh_frame:000000000000C824                 db  24h ; $
.eh_frame:000000000000C825                 db    6
.eh_frame:000000000000C826                 db    0
.eh_frame:000000000000C827                 db    0
.eh_frame:000000000000C828                 db  48h ; H
.eh_frame:000000000000C829                 db  8Bh
.eh_frame:000000000000C82A                 db 0FFh
.eh_frame:000000000000C82B                 db 0FFh
.eh_frame:000000000000C82C                 db  0Ch
.eh_frame:000000000000C82D                 db    0
.eh_frame:000000000000C82E                 db    0
.eh_frame:000000000000C82F                 db    0
.eh_frame:000000000000C830                 db    0
.eh_frame:000000000000C831                 db    0
.eh_frame:000000000000C832                 db    0
.eh_frame:000000000000C833                 db    0
.eh_frame:000000000000C834                 db  10h
.eh_frame:000000000000C835                 db    0
.eh_frame:000000000000C836                 db    0
.eh_frame:000000000000C837                 db    0
.eh_frame:000000000000C838                 db  38h ; 8
.eh_frame:000000000000C839                 db    6
.eh_frame:000000000000C83A                 db    0
.eh_frame:000000000000C83B                 db    0
.eh_frame:000000000000C83C                 db  44h ; D
.eh_frame:000000000000C83D                 db  8Bh
.eh_frame:000000000000C83E                 db 0FFh
.eh_frame:000000000000C83F                 db 0FFh
.eh_frame:000000000000C840                 db  0Fh
.eh_frame:000000000000C841                 db    0
.eh_frame:000000000000C842                 db    0
.eh_frame:000000000000C843                 db    0
.eh_frame:000000000000C844                 db    0
.eh_frame:000000000000C845                 db    0
.eh_frame:000000000000C846                 db    0
.eh_frame:000000000000C847                 db    0
.eh_frame:000000000000C848                 db  18h
.eh_frame:000000000000C849                 db    0
.eh_frame:000000000000C84A                 db    0
.eh_frame:000000000000C84B                 db    0
.eh_frame:000000000000C84C                 db  4Ch ; L
.eh_frame:000000000000C84D                 db    6
.eh_frame:000000000000C84E                 db    0
.eh_frame:000000000000C84F                 db    0
.eh_frame:000000000000C850                 db  40h ; @
.eh_frame:000000000000C851                 db  8Bh
.eh_frame:000000000000C852                 db 0FFh
.eh_frame:000000000000C853                 db 0FFh
.eh_frame:000000000000C854                 db  98h
.eh_frame:000000000000C855                 db    0
.eh_frame:000000000000C856                 db    0
.eh_frame:000000000000C857                 db    0
.eh_frame:000000000000C858                 db    0
.eh_frame:000000000000C859                 db  44h ; D
.eh_frame:000000000000C85A                 db  0Eh
.eh_frame:000000000000C85B                 db  50h ; P
.eh_frame:000000000000C85C                 db    2
.eh_frame:000000000000C85D                 db  8Eh
.eh_frame:000000000000C85E                 db  0Ah
.eh_frame:000000000000C85F                 db  0Eh
.eh_frame:000000000000C860                 db    8
.eh_frame:000000000000C861                 db  41h ; A
.eh_frame:000000000000C862                 db  0Bh
.eh_frame:000000000000C863                 db    0
.eh_frame:000000000000C864                 db  10h
.eh_frame:000000000000C865                 db    0
.eh_frame:000000000000C866                 db    0
.eh_frame:000000000000C867                 db    0
.eh_frame:000000000000C868                 db  68h ; h
.eh_frame:000000000000C869                 db    6
.eh_frame:000000000000C86A                 db    0
.eh_frame:000000000000C86B                 db    0
.eh_frame:000000000000C86C                 db 0C4h
.eh_frame:000000000000C86D                 db  8Bh
.eh_frame:000000000000C86E                 db 0FFh
.eh_frame:000000000000C86F                 db 0FFh
.eh_frame:000000000000C870                 db  10h
.eh_frame:000000000000C871                 db    0
.eh_frame:000000000000C872                 db    0
.eh_frame:000000000000C873                 db    0
.eh_frame:000000000000C874                 db    0
.eh_frame:000000000000C875                 db    0
.eh_frame:000000000000C876                 db    0
.eh_frame:000000000000C877                 db    0
.eh_frame:000000000000C878                 db  10h
.eh_frame:000000000000C879                 db    0
.eh_frame:000000000000C87A                 db    0
.eh_frame:000000000000C87B                 db    0
.eh_frame:000000000000C87C                 db  7Ch ; |
.eh_frame:000000000000C87D                 db    6
.eh_frame:000000000000C87E                 db    0
.eh_frame:000000000000C87F                 db    0
.eh_frame:000000000000C880                 db 0C0h
.eh_frame:000000000000C881                 db  8Bh
.eh_frame:000000000000C882                 db 0FFh
.eh_frame:000000000000C883                 db 0FFh
.eh_frame:000000000000C884                 db  11h
.eh_frame:000000000000C885                 db    0
.eh_frame:000000000000C886                 db    0
.eh_frame:000000000000C887                 db    0
.eh_frame:000000000000C888                 db    0
.eh_frame:000000000000C889                 db    0
.eh_frame:000000000000C88A                 db    0
.eh_frame:000000000000C88B                 db    0
.eh_frame:000000000000C88C                 db  10h
.eh_frame:000000000000C88D                 db    0
.eh_frame:000000000000C88E                 db    0
.eh_frame:000000000000C88F                 db    0
.eh_frame:000000000000C890                 db  90h
.eh_frame:000000000000C891                 db    6
.eh_frame:000000000000C892                 db    0
.eh_frame:000000000000C893                 db    0
.eh_frame:000000000000C894                 db 0CCh
.eh_frame:000000000000C895                 db  8Bh
.eh_frame:000000000000C896                 db 0FFh
.eh_frame:000000000000C897                 db 0FFh
.eh_frame:000000000000C898                 db  0Ah
.eh_frame:000000000000C899                 db    0
.eh_frame:000000000000C89A                 db    0
.eh_frame:000000000000C89B                 db    0
.eh_frame:000000000000C89C                 db    0
.eh_frame:000000000000C89D                 db    0
.eh_frame:000000000000C89E                 db    0
.eh_frame:000000000000C89F                 db    0
.eh_frame:000000000000C8A0                 db  18h
.eh_frame:000000000000C8A1                 db    0
.eh_frame:000000000000C8A2                 db    0
.eh_frame:000000000000C8A3                 db    0
.eh_frame:000000000000C8A4                 db 0A4h
.eh_frame:000000000000C8A5                 db    6
.eh_frame:000000000000C8A6                 db    0
.eh_frame:000000000000C8A7                 db    0
.eh_frame:000000000000C8A8                 db 0C8h
.eh_frame:000000000000C8A9                 db  8Bh
.eh_frame:000000000000C8AA                 db 0FFh
.eh_frame:000000000000C8AB                 db 0FFh
.eh_frame:000000000000C8AC                 db  8Eh
.eh_frame:000000000000C8AD                 db    0
.eh_frame:000000000000C8AE                 db    0
.eh_frame:000000000000C8AF                 db    0
.eh_frame:000000000000C8B0                 db    0
.eh_frame:000000000000C8B1                 db  44h ; D
.eh_frame:000000000000C8B2                 db  0Eh
.eh_frame:000000000000C8B3                 db  50h ; P
.eh_frame:000000000000C8B4                 db    2
.eh_frame:000000000000C8B5                 db  7Fh ; 
.eh_frame:000000000000C8B6                 db  0Ah
.eh_frame:000000000000C8B7                 db  0Eh
.eh_frame:000000000000C8B8                 db    8
.eh_frame:000000000000C8B9                 db  41h ; A
.eh_frame:000000000000C8BA                 db  0Bh
.eh_frame:000000000000C8BB                 db    0
.eh_frame:000000000000C8BC                 db  18h
.eh_frame:000000000000C8BD                 db    0
.eh_frame:000000000000C8BE                 db    0
.eh_frame:000000000000C8BF                 db    0
.eh_frame:000000000000C8C0                 db 0C0h
.eh_frame:000000000000C8C1                 db    6
.eh_frame:000000000000C8C2                 db    0
.eh_frame:000000000000C8C3                 db    0
.eh_frame:000000000000C8C4                 db  3Ch ; <
.eh_frame:000000000000C8C5                 db  8Ch
.eh_frame:000000000000C8C6                 db 0FFh
.eh_frame:000000000000C8C7                 db 0FFh
.eh_frame:000000000000C8C8                 db  91h
.eh_frame:000000000000C8C9                 db    0
.eh_frame:000000000000C8CA                 db    0
.eh_frame:000000000000C8CB                 db    0
.eh_frame:000000000000C8CC                 db    0
.eh_frame:000000000000C8CD                 db  44h ; D
.eh_frame:000000000000C8CE                 db  0Eh
.eh_frame:000000000000C8CF                 db  50h ; P
.eh_frame:000000000000C8D0                 db    2
.eh_frame:000000000000C8D1                 db  82h
.eh_frame:000000000000C8D2                 db  0Ah
.eh_frame:000000000000C8D3                 db  0Eh
.eh_frame:000000000000C8D4                 db    8
.eh_frame:000000000000C8D5                 db  41h ; A
.eh_frame:000000000000C8D6                 db  0Bh
.eh_frame:000000000000C8D7                 db    0
.eh_frame:000000000000C8D8                 db  10h
.eh_frame:000000000000C8D9                 db    0
.eh_frame:000000000000C8DA                 db    0
.eh_frame:000000000000C8DB                 db    0
.eh_frame:000000000000C8DC                 db 0DCh
.eh_frame:000000000000C8DD                 db    6
.eh_frame:000000000000C8DE                 db    0
.eh_frame:000000000000C8DF                 db    0
.eh_frame:000000000000C8E0                 db 0C0h
.eh_frame:000000000000C8E1                 db  8Ch
.eh_frame:000000000000C8E2                 db 0FFh
.eh_frame:000000000000C8E3                 db 0FFh
.eh_frame:000000000000C8E4                 db  0Ch
.eh_frame:000000000000C8E5                 db    0
.eh_frame:000000000000C8E6                 db    0
.eh_frame:000000000000C8E7                 db    0
.eh_frame:000000000000C8E8                 db    0
.eh_frame:000000000000C8E9                 db    0
.eh_frame:000000000000C8EA                 db    0
.eh_frame:000000000000C8EB                 db    0
.eh_frame:000000000000C8EC                 db  10h
.eh_frame:000000000000C8ED                 db    0
.eh_frame:000000000000C8EE                 db    0
.eh_frame:000000000000C8EF                 db    0
.eh_frame:000000000000C8F0                 db 0F0h
.eh_frame:000000000000C8F1                 db    6
.eh_frame:000000000000C8F2                 db    0
.eh_frame:000000000000C8F3                 db    0
.eh_frame:000000000000C8F4                 db 0BCh
.eh_frame:000000000000C8F5                 db  8Ch
.eh_frame:000000000000C8F6                 db 0FFh
.eh_frame:000000000000C8F7                 db 0FFh
.eh_frame:000000000000C8F8                 db  17h
.eh_frame:000000000000C8F9                 db    0
.eh_frame:000000000000C8FA                 db    0
.eh_frame:000000000000C8FB                 db    0
.eh_frame:000000000000C8FC                 db    0
.eh_frame:000000000000C8FD                 db    0
.eh_frame:000000000000C8FE                 db    0
.eh_frame:000000000000C8FF                 db    0
.eh_frame:000000000000C900                 db  10h
.eh_frame:000000000000C901                 db    0
.eh_frame:000000000000C902                 db    0
.eh_frame:000000000000C903                 db    0
.eh_frame:000000000000C904                 db    4
.eh_frame:000000000000C905                 db    7
.eh_frame:000000000000C906                 db    0
.eh_frame:000000000000C907                 db    0
.eh_frame:000000000000C908                 db 0C8h
.eh_frame:000000000000C909                 db  8Ch
.eh_frame:000000000000C90A                 db 0FFh
.eh_frame:000000000000C90B                 db 0FFh
.eh_frame:000000000000C90C                 db  13h
.eh_frame:000000000000C90D                 db    0
.eh_frame:000000000000C90E                 db    0
.eh_frame:000000000000C90F                 db    0
.eh_frame:000000000000C910                 db    0
.eh_frame:000000000000C911                 db    0
.eh_frame:000000000000C912                 db    0
.eh_frame:000000000000C913                 db    0
.eh_frame:000000000000C914                 db  10h
.eh_frame:000000000000C915                 db    0
.eh_frame:000000000000C916                 db    0
.eh_frame:000000000000C917                 db    0
.eh_frame:000000000000C918                 db  18h
.eh_frame:000000000000C919                 db    7
.eh_frame:000000000000C91A                 db    0
.eh_frame:000000000000C91B                 db    0
.eh_frame:000000000000C91C                 db 0D4h
.eh_frame:000000000000C91D                 db  8Ch
.eh_frame:000000000000C91E                 db 0FFh
.eh_frame:000000000000C91F                 db 0FFh
.eh_frame:000000000000C920                 db  0Ch
.eh_frame:000000000000C921                 db    0
.eh_frame:000000000000C922                 db    0
.eh_frame:000000000000C923                 db    0
.eh_frame:000000000000C924                 db    0
.eh_frame:000000000000C925                 db    0
.eh_frame:000000000000C926                 db    0
.eh_frame:000000000000C927                 db    0
.eh_frame:000000000000C928                 db  10h
.eh_frame:000000000000C929                 db    0
.eh_frame:000000000000C92A                 db    0
.eh_frame:000000000000C92B                 db    0
.eh_frame:000000000000C92C                 db  2Ch ; ,
.eh_frame:000000000000C92D                 db    7
.eh_frame:000000000000C92E                 db    0
.eh_frame:000000000000C92F                 db    0
.eh_frame:000000000000C930                 db 0D0h
.eh_frame:000000000000C931                 db  8Ch
.eh_frame:000000000000C932                 db 0FFh
.eh_frame:000000000000C933                 db 0FFh
.eh_frame:000000000000C934                 db  14h
.eh_frame:000000000000C935                 db    0
.eh_frame:000000000000C936                 db    0
.eh_frame:000000000000C937                 db    0
.eh_frame:000000000000C938                 db    0
.eh_frame:000000000000C939                 db    0
.eh_frame:000000000000C93A                 db    0
.eh_frame:000000000000C93B                 db    0
.eh_frame:000000000000C93C                 db  10h
.eh_frame:000000000000C93D                 db    0
.eh_frame:000000000000C93E                 db    0
.eh_frame:000000000000C93F                 db    0
.eh_frame:000000000000C940                 db  40h ; @
.eh_frame:000000000000C941                 db    7
.eh_frame:000000000000C942                 db    0
.eh_frame:000000000000C943                 db    0
.eh_frame:000000000000C944                 db 0DCh
.eh_frame:000000000000C945                 db  8Ch
.eh_frame:000000000000C946                 db 0FFh
.eh_frame:000000000000C947                 db 0FFh
.eh_frame:000000000000C948                 db  13h
.eh_frame:000000000000C949                 db    0
.eh_frame:000000000000C94A                 db    0
.eh_frame:000000000000C94B                 db    0
.eh_frame:000000000000C94C                 db    0
.eh_frame:000000000000C94D                 db    0
.eh_frame:000000000000C94E                 db    0
.eh_frame:000000000000C94F                 db    0
.eh_frame:000000000000C950                 db  14h
.eh_frame:000000000000C951                 db    0
.eh_frame:000000000000C952                 db    0
.eh_frame:000000000000C953                 db    0
.eh_frame:000000000000C954                 db  54h ; T
.eh_frame:000000000000C955                 db    7
.eh_frame:000000000000C956                 db    0
.eh_frame:000000000000C957                 db    0
.eh_frame:000000000000C958                 db 0E8h
.eh_frame:000000000000C959                 db  8Ch
.eh_frame:000000000000C95A                 db 0FFh
.eh_frame:000000000000C95B                 db 0FFh
.eh_frame:000000000000C95C                 db  18h
.eh_frame:000000000000C95D                 db    0
.eh_frame:000000000000C95E                 db    0
.eh_frame:000000000000C95F                 db    0
.eh_frame:000000000000C960                 db    0
.eh_frame:000000000000C961                 db    0
.eh_frame:000000000000C962                 db    0
.eh_frame:000000000000C963                 db    0
.eh_frame:000000000000C964                 db    0
.eh_frame:000000000000C965                 db    0
.eh_frame:000000000000C966                 db    0
.eh_frame:000000000000C967                 db    0
.eh_frame:000000000000C968                 db  24h ; $
.eh_frame:000000000000C969                 db    0
.eh_frame:000000000000C96A                 db    0
.eh_frame:000000000000C96B                 db    0
.eh_frame:000000000000C96C                 db  6Ch ; l
.eh_frame:000000000000C96D                 db    7
.eh_frame:000000000000C96E                 db    0
.eh_frame:000000000000C96F                 db    0
.eh_frame:000000000000C970                 db 0F0h
.eh_frame:000000000000C971                 db  8Ch
.eh_frame:000000000000C972                 db 0FFh
.eh_frame:000000000000C973                 db 0FFh
.eh_frame:000000000000C974                 db  71h ; q
.eh_frame:000000000000C975                 db    0
.eh_frame:000000000000C976                 db    0
.eh_frame:000000000000C977                 db    0
.eh_frame:000000000000C978                 db    0
.eh_frame:000000000000C979                 db  41h ; A
.eh_frame:000000000000C97A                 db  0Eh
.eh_frame:000000000000C97B                 db  10h
.eh_frame:000000000000C97C                 db  83h
.eh_frame:000000000000C97D                 db    2
.eh_frame:000000000000C97E                 db  56h ; V
.eh_frame:000000000000C97F                 db  0Eh
.eh_frame:000000000000C980                 db 0B0h
.eh_frame:000000000000C981                 db    1
.eh_frame:000000000000C982                 db    2
.eh_frame:000000000000C983                 db  4Ch ; L
.eh_frame:000000000000C984                 db  0Ah
.eh_frame:000000000000C985                 db  0Eh
.eh_frame:000000000000C986                 db  10h
.eh_frame:000000000000C987                 db  41h ; A
.eh_frame:000000000000C988                 db  0Eh
.eh_frame:000000000000C989                 db    8
.eh_frame:000000000000C98A                 db  44h ; D
.eh_frame:000000000000C98B                 db  0Bh
.eh_frame:000000000000C98C                 db    0
.eh_frame:000000000000C98D                 db    0
.eh_frame:000000000000C98E                 db    0
.eh_frame:000000000000C98F                 db    0
.eh_frame:000000000000C990                 db  10h
.eh_frame:000000000000C991                 db    1
.eh_frame:000000000000C992                 db    0
.eh_frame:000000000000C993                 db    0
.eh_frame:000000000000C994                 db  94h
.eh_frame:000000000000C995                 db    7
.eh_frame:000000000000C996                 db    0
.eh_frame:000000000000C997                 db    0
.eh_frame:000000000000C998                 db  48h ; H
.eh_frame:000000000000C999                 db  8Dh
.eh_frame:000000000000C99A                 db 0FFh
.eh_frame:000000000000C99B                 db 0FFh
.eh_frame:000000000000C99C                 db  17h
.eh_frame:000000000000C99D                 db    4
.eh_frame:000000000000C99E                 db    0
.eh_frame:000000000000C99F                 db    0
.eh_frame:000000000000C9A0                 db    0
.eh_frame:000000000000C9A1                 db  42h ; B
.eh_frame:000000000000C9A2                 db  0Eh
.eh_frame:000000000000C9A3                 db  10h
.eh_frame:000000000000C9A4                 db  8Fh
.eh_frame:000000000000C9A5                 db    2
.eh_frame:000000000000C9A6                 db  42h ; B
.eh_frame:000000000000C9A7                 db  0Eh
.eh_frame:000000000000C9A8                 db  18h
.eh_frame:000000000000C9A9                 db  8Eh
.eh_frame:000000000000C9AA                 db    3
.eh_frame:000000000000C9AB                 db  42h ; B
.eh_frame:000000000000C9AC                 db  0Eh
.eh_frame:000000000000C9AD                 db  20h
.eh_frame:000000000000C9AE                 db  8Dh
.eh_frame:000000000000C9AF                 db    4
.eh_frame:000000000000C9B0                 db  42h ; B
.eh_frame:000000000000C9B1                 db  0Eh
.eh_frame:000000000000C9B2                 db  28h ; (
.eh_frame:000000000000C9B3                 db  8Ch
.eh_frame:000000000000C9B4                 db    5
.eh_frame:000000000000C9B5                 db  44h ; D
.eh_frame:000000000000C9B6                 db  0Eh
.eh_frame:000000000000C9B7                 db  30h ; 0
.eh_frame:000000000000C9B8                 db  86h
.eh_frame:000000000000C9B9                 db    6
.eh_frame:000000000000C9BA                 db  41h ; A
.eh_frame:000000000000C9BB                 db  0Eh
.eh_frame:000000000000C9BC                 db  38h ; 8
.eh_frame:000000000000C9BD                 db  83h
.eh_frame:000000000000C9BE                 db    7
.eh_frame:000000000000C9BF                 db  4Ah ; J
.eh_frame:000000000000C9C0                 db  0Eh
.eh_frame:000000000000C9C1                 db  60h ; `
.eh_frame:000000000000C9C2                 db    2
.eh_frame:000000000000C9C3                 db 0DDh
.eh_frame:000000000000C9C4                 db  0Eh
.eh_frame:000000000000C9C5                 db  68h ; h
.eh_frame:000000000000C9C6                 db  57h ; W
.eh_frame:000000000000C9C7                 db  0Eh
.eh_frame:000000000000C9C8                 db  70h ; p
.eh_frame:000000000000C9C9                 db  42h ; B
.eh_frame:000000000000C9CA                 db  0Eh
.eh_frame:000000000000C9CB                 db  78h ; x
.eh_frame:000000000000C9CC                 db  42h ; B
.eh_frame:000000000000C9CD                 db  0Eh
.eh_frame:000000000000C9CE                 db  80h
.eh_frame:000000000000C9CF                 db    1
.eh_frame:000000000000C9D0                 db  42h ; B
.eh_frame:000000000000C9D1                 db  0Eh
.eh_frame:000000000000C9D2                 db  88h
.eh_frame:000000000000C9D3                 db    1
.eh_frame:000000000000C9D4                 db  42h ; B
.eh_frame:000000000000C9D5                 db  0Eh
.eh_frame:000000000000C9D6                 db  90h
.eh_frame:000000000000C9D7                 db    1
.eh_frame:000000000000C9D8                 db  53h ; S
.eh_frame:000000000000C9D9                 db  0Eh
.eh_frame:000000000000C9DA                 db  60h ; `
.eh_frame:000000000000C9DB                 db  44h ; D
.eh_frame:000000000000C9DC                 db  0Ah
.eh_frame:000000000000C9DD                 db  0Eh
.eh_frame:000000000000C9DE                 db  38h ; 8
.eh_frame:000000000000C9DF                 db  41h ; A
.eh_frame:000000000000C9E0                 db  0Eh
.eh_frame:000000000000C9E1                 db  30h ; 0
.eh_frame:000000000000C9E2                 db  41h ; A
.eh_frame:000000000000C9E3                 db  0Eh
.eh_frame:000000000000C9E4                 db  28h ; (
.eh_frame:000000000000C9E5                 db  42h ; B
.eh_frame:000000000000C9E6                 db  0Eh
.eh_frame:000000000000C9E7                 db  20h
.eh_frame:000000000000C9E8                 db  42h ; B
.eh_frame:000000000000C9E9                 db  0Eh
.eh_frame:000000000000C9EA                 db  18h
.eh_frame:000000000000C9EB                 db  42h ; B
.eh_frame:000000000000C9EC                 db  0Eh
.eh_frame:000000000000C9ED                 db  10h
.eh_frame:000000000000C9EE                 db  42h ; B
.eh_frame:000000000000C9EF                 db  0Eh
.eh_frame:000000000000C9F0                 db    8
.eh_frame:000000000000C9F1                 db  44h ; D
.eh_frame:000000000000C9F2                 db  0Bh
.eh_frame:000000000000C9F3                 db    2
.eh_frame:000000000000C9F4                 db  78h ; x
.eh_frame:000000000000C9F5                 db  0Ah
.eh_frame:000000000000C9F6                 db  0Eh
.eh_frame:000000000000C9F7                 db  68h ; h
.eh_frame:000000000000C9F8                 db  48h ; H
.eh_frame:000000000000C9F9                 db  0Bh
.eh_frame:000000000000C9FA                 db  5Ah ; Z
.eh_frame:000000000000C9FB                 db  0Ah
.eh_frame:000000000000C9FC                 db  0Eh
.eh_frame:000000000000C9FD                 db  38h ; 8
.eh_frame:000000000000C9FE                 db  47h ; G
.eh_frame:000000000000C9FF                 db  0Eh
.eh_frame:000000000000CA00                 db  30h ; 0
.eh_frame:000000000000CA01                 db  41h ; A
.eh_frame:000000000000CA02                 db  0Eh
.eh_frame:000000000000CA03                 db  28h ; (
.eh_frame:000000000000CA04                 db  42h ; B
.eh_frame:000000000000CA05                 db  0Eh
.eh_frame:000000000000CA06                 db  20h
.eh_frame:000000000000CA07                 db  42h ; B
.eh_frame:000000000000CA08                 db  0Eh
.eh_frame:000000000000CA09                 db  18h
.eh_frame:000000000000CA0A                 db  42h ; B
.eh_frame:000000000000CA0B                 db  0Eh
.eh_frame:000000000000CA0C                 db  10h
.eh_frame:000000000000CA0D                 db  42h ; B
.eh_frame:000000000000CA0E                 db  0Eh
.eh_frame:000000000000CA0F                 db    8
.eh_frame:000000000000CA10                 db  56h ; V
.eh_frame:000000000000CA11                 db  0Bh
.eh_frame:000000000000CA12                 db  5Eh ; ^
.eh_frame:000000000000CA13                 db  0Ah
.eh_frame:000000000000CA14                 db  0Eh
.eh_frame:000000000000CA15                 db  38h ; 8
.eh_frame:000000000000CA16                 db  52h ; R
.eh_frame:000000000000CA17                 db  0Eh
.eh_frame:000000000000CA18                 db  30h ; 0
.eh_frame:000000000000CA19                 db  41h ; A
.eh_frame:000000000000CA1A                 db  0Eh
.eh_frame:000000000000CA1B                 db  28h ; (
.eh_frame:000000000000CA1C                 db  42h ; B
.eh_frame:000000000000CA1D                 db  0Eh
.eh_frame:000000000000CA1E                 db  20h
.eh_frame:000000000000CA1F                 db  42h ; B
.eh_frame:000000000000CA20                 db  0Eh
.eh_frame:000000000000CA21                 db  18h
.eh_frame:000000000000CA22                 db  42h ; B
.eh_frame:000000000000CA23                 db  0Eh
.eh_frame:000000000000CA24                 db  10h
.eh_frame:000000000000CA25                 db  42h ; B
.eh_frame:000000000000CA26                 db  0Eh
.eh_frame:000000000000CA27                 db    8
.eh_frame:000000000000CA28                 db  4Fh ; O
.eh_frame:000000000000CA29                 db  0Bh
.eh_frame:000000000000CA2A                 db  62h ; b
.eh_frame:000000000000CA2B                 db  0Ah
.eh_frame:000000000000CA2C                 db  0Eh
.eh_frame:000000000000CA2D                 db  38h ; 8
.eh_frame:000000000000CA2E                 db  50h ; P
.eh_frame:000000000000CA2F                 db  0Eh
.eh_frame:000000000000CA30                 db  30h ; 0
.eh_frame:000000000000CA31                 db  41h ; A
.eh_frame:000000000000CA32                 db  0Eh
.eh_frame:000000000000CA33                 db  28h ; (
.eh_frame:000000000000CA34                 db  42h ; B
.eh_frame:000000000000CA35                 db  0Eh
.eh_frame:000000000000CA36                 db  20h
.eh_frame:000000000000CA37                 db  42h ; B
.eh_frame:000000000000CA38                 db  0Eh
.eh_frame:000000000000CA39                 db  18h
.eh_frame:000000000000CA3A                 db  42h ; B
.eh_frame:000000000000CA3B                 db  0Eh
.eh_frame:000000000000CA3C                 db  10h
.eh_frame:000000000000CA3D                 db  42h ; B
.eh_frame:000000000000CA3E                 db  0Eh
.eh_frame:000000000000CA3F                 db    8
.eh_frame:000000000000CA40                 db  55h ; U
.eh_frame:000000000000CA41                 db  0Bh
.eh_frame:000000000000CA42                 db  66h ; f
.eh_frame:000000000000CA43                 db  0Eh
.eh_frame:000000000000CA44                 db  68h ; h
.eh_frame:000000000000CA45                 db  42h ; B
.eh_frame:000000000000CA46                 db  0Eh
.eh_frame:000000000000CA47                 db  70h ; p
.eh_frame:000000000000CA48                 db  5Ch ; \
.eh_frame:000000000000CA49                 db  0Eh
.eh_frame:000000000000CA4A                 db  68h ; h
.eh_frame:000000000000CA4B                 db  41h ; A
.eh_frame:000000000000CA4C                 db  0Eh
.eh_frame:000000000000CA4D                 db  60h ; `
.eh_frame:000000000000CA4E                 db  44h ; D
.eh_frame:000000000000CA4F                 db  0Ah
.eh_frame:000000000000CA50                 db  0Eh
.eh_frame:000000000000CA51                 db  38h ; 8
.eh_frame:000000000000CA52                 db  41h ; A
.eh_frame:000000000000CA53                 db  0Eh
.eh_frame:000000000000CA54                 db  30h ; 0
.eh_frame:000000000000CA55                 db  41h ; A
.eh_frame:000000000000CA56                 db  0Eh
.eh_frame:000000000000CA57                 db  28h ; (
.eh_frame:000000000000CA58                 db  42h ; B
.eh_frame:000000000000CA59                 db  0Eh
.eh_frame:000000000000CA5A                 db  20h
.eh_frame:000000000000CA5B                 db  42h ; B
.eh_frame:000000000000CA5C                 db  0Eh
.eh_frame:000000000000CA5D                 db  18h
.eh_frame:000000000000CA5E                 db  42h ; B
.eh_frame:000000000000CA5F                 db  0Eh
.eh_frame:000000000000CA60                 db  10h
.eh_frame:000000000000CA61                 db  42h ; B
.eh_frame:000000000000CA62                 db  0Eh
.eh_frame:000000000000CA63                 db    8
.eh_frame:000000000000CA64                 db  45h ; E
.eh_frame:000000000000CA65                 db  0Bh
.eh_frame:000000000000CA66                 db  68h ; h
.eh_frame:000000000000CA67                 db  0Ah
.eh_frame:000000000000CA68                 db  0Eh
.eh_frame:000000000000CA69                 db  68h ; h
.eh_frame:000000000000CA6A                 db  48h ; H
.eh_frame:000000000000CA6B                 db  0Bh
.eh_frame:000000000000CA6C                 db  72h ; r
.eh_frame:000000000000CA6D                 db  0Eh
.eh_frame:000000000000CA6E                 db  68h ; h
.eh_frame:000000000000CA6F                 db  45h ; E
.eh_frame:000000000000CA70                 db  0Eh
.eh_frame:000000000000CA71                 db  70h ; p
.eh_frame:000000000000CA72                 db  42h ; B
.eh_frame:000000000000CA73                 db  0Eh
.eh_frame:000000000000CA74                 db  78h ; x
.eh_frame:000000000000CA75                 db  42h ; B
.eh_frame:000000000000CA76                 db  0Eh
.eh_frame:000000000000CA77                 db  80h
.eh_frame:000000000000CA78                 db    1
.eh_frame:000000000000CA79                 db  5Eh ; ^
.eh_frame:000000000000CA7A                 db  0Eh
.eh_frame:000000000000CA7B                 db  60h ; `
.eh_frame:000000000000CA7C                 db  44h ; D
.eh_frame:000000000000CA7D                 db  0Ah
.eh_frame:000000000000CA7E                 db  0Eh
.eh_frame:000000000000CA7F                 db  38h ; 8
.eh_frame:000000000000CA80                 db  41h ; A
.eh_frame:000000000000CA81                 db  0Eh
.eh_frame:000000000000CA82                 db  30h ; 0
.eh_frame:000000000000CA83                 db  41h ; A
.eh_frame:000000000000CA84                 db  0Eh
.eh_frame:000000000000CA85                 db  28h ; (
.eh_frame:000000000000CA86                 db  42h ; B
.eh_frame:000000000000CA87                 db  0Eh
.eh_frame:000000000000CA88                 db  20h
.eh_frame:000000000000CA89                 db  42h ; B
.eh_frame:000000000000CA8A                 db  0Eh
.eh_frame:000000000000CA8B                 db  18h
.eh_frame:000000000000CA8C                 db  42h ; B
.eh_frame:000000000000CA8D                 db  0Eh
.eh_frame:000000000000CA8E                 db  10h
.eh_frame:000000000000CA8F                 db  42h ; B
.eh_frame:000000000000CA90                 db  0Eh
.eh_frame:000000000000CA91                 db    8
.eh_frame:000000000000CA92                 db  41h ; A
.eh_frame:000000000000CA93                 db  0Bh
.eh_frame:000000000000CA94                 db  79h ; y
.eh_frame:000000000000CA95                 db  0Ah
.eh_frame:000000000000CA96                 db  0Eh
.eh_frame:000000000000CA97                 db  68h ; h
.eh_frame:000000000000CA98                 db  42h ; B
.eh_frame:000000000000CA99                 db  0Eh
.eh_frame:000000000000CA9A                 db  70h ; p
.eh_frame:000000000000CA9B                 db  42h ; B
.eh_frame:000000000000CA9C                 db  0Eh
.eh_frame:000000000000CA9D                 db  78h ; x
.eh_frame:000000000000CA9E                 db  42h ; B
.eh_frame:000000000000CA9F                 db  0Eh
.eh_frame:000000000000CAA0                 db  80h
.eh_frame:000000000000CAA1                 db    1
.eh_frame:000000000000CAA2                 db  51h ; Q
.eh_frame:000000000000CAA3                 db  0Bh
.eh_frame:000000000000CAA4                 db  10h
.eh_frame:000000000000CAA5                 db    0
.eh_frame:000000000000CAA6                 db    0
.eh_frame:000000000000CAA7                 db    0
.eh_frame:000000000000CAA8                 db 0A8h
.eh_frame:000000000000CAA9                 db    8
.eh_frame:000000000000CAAA                 db    0
.eh_frame:000000000000CAAB                 db    0
.eh_frame:000000000000CAAC                 db  54h ; T
.eh_frame:000000000000CAAD                 db  90h
.eh_frame:000000000000CAAE                 db 0FFh
.eh_frame:000000000000CAAF                 db 0FFh
.eh_frame:000000000000CAB0                 db  20h
.eh_frame:000000000000CAB1                 db    0
.eh_frame:000000000000CAB2                 db    0
.eh_frame:000000000000CAB3                 db    0
.eh_frame:000000000000CAB4                 db    0
.eh_frame:000000000000CAB5                 db    0
.eh_frame:000000000000CAB6                 db    0
.eh_frame:000000000000CAB7                 db    0
.eh_frame:000000000000CAB8                 db  18h
.eh_frame:000000000000CAB9                 db    0
.eh_frame:000000000000CABA                 db    0
.eh_frame:000000000000CABB                 db    0
.eh_frame:000000000000CABC                 db 0BCh
.eh_frame:000000000000CABD                 db    8
.eh_frame:000000000000CABE                 db    0
.eh_frame:000000000000CABF                 db    0
.eh_frame:000000000000CAC0                 db  60h ; `
.eh_frame:000000000000CAC1                 db  90h
.eh_frame:000000000000CAC2                 db 0FFh
.eh_frame:000000000000CAC3                 db 0FFh
.eh_frame:000000000000CAC4                 db  78h ; x
.eh_frame:000000000000CAC5                 db    0
.eh_frame:000000000000CAC6                 db    0
.eh_frame:000000000000CAC7                 db    0
.eh_frame:000000000000CAC8                 db    0
.eh_frame:000000000000CAC9                 db  44h ; D
.eh_frame:000000000000CACA                 db  0Eh
.eh_frame:000000000000CACB                 db  70h ; p
.eh_frame:000000000000CACC                 db    2
.eh_frame:000000000000CACD                 db  60h ; `
.eh_frame:000000000000CACE                 db  0Ah
.eh_frame:000000000000CACF                 db  0Eh
.eh_frame:000000000000CAD0                 db    8
.eh_frame:000000000000CAD1                 db  41h ; A
.eh_frame:000000000000CAD2                 db  0Bh
.eh_frame:000000000000CAD3                 db    0
.eh_frame:000000000000CAD4                 db  28h ; (
.eh_frame:000000000000CAD5                 db    0
.eh_frame:000000000000CAD6                 db    0
.eh_frame:000000000000CAD7                 db    0
.eh_frame:000000000000CAD8                 db 0D8h
.eh_frame:000000000000CAD9                 db    8
.eh_frame:000000000000CADA                 db    0
.eh_frame:000000000000CADB                 db    0
.eh_frame:000000000000CADC                 db 0C4h
.eh_frame:000000000000CADD                 db  90h
.eh_frame:000000000000CADE                 db 0FFh
.eh_frame:000000000000CADF                 db 0FFh
.eh_frame:000000000000CAE0                 db 0D5h
.eh_frame:000000000000CAE1                 db    0
.eh_frame:000000000000CAE2                 db    0
.eh_frame:000000000000CAE3                 db    0
.eh_frame:000000000000CAE4                 db    0
.eh_frame:000000000000CAE5                 db  41h ; A
.eh_frame:000000000000CAE6                 db  0Eh
.eh_frame:000000000000CAE7                 db  10h
.eh_frame:000000000000CAE8                 db  86h
.eh_frame:000000000000CAE9                 db    2
.eh_frame:000000000000CAEA                 db  41h ; A
.eh_frame:000000000000CAEB                 db  0Eh
.eh_frame:000000000000CAEC                 db  18h
.eh_frame:000000000000CAED                 db  83h
.eh_frame:000000000000CAEE                 db    3
.eh_frame:000000000000CAEF                 db  50h ; P
.eh_frame:000000000000CAF0                 db  0Eh
.eh_frame:000000000000CAF1                 db 0D0h
.eh_frame:000000000000CAF2                 db    1
.eh_frame:000000000000CAF3                 db    2
.eh_frame:000000000000CAF4                 db 0ABh
.eh_frame:000000000000CAF5                 db  0Ah
.eh_frame:000000000000CAF6                 db  0Eh
.eh_frame:000000000000CAF7                 db  18h
.eh_frame:000000000000CAF8                 db  41h ; A
.eh_frame:000000000000CAF9                 db  0Eh
.eh_frame:000000000000CAFA                 db  10h
.eh_frame:000000000000CAFB                 db  41h ; A
.eh_frame:000000000000CAFC                 db  0Eh
.eh_frame:000000000000CAFD                 db    8
.eh_frame:000000000000CAFE                 db  41h ; A
.eh_frame:000000000000CAFF                 db  0Bh
.eh_frame:000000000000CB00                 db  1Ch
.eh_frame:000000000000CB01                 db    0
.eh_frame:000000000000CB02                 db    0
.eh_frame:000000000000CB03                 db    0
.eh_frame:000000000000CB04                 db    4
.eh_frame:000000000000CB05                 db    9
.eh_frame:000000000000CB06                 db    0
.eh_frame:000000000000CB07                 db    0
.eh_frame:000000000000CB08                 db  78h ; x
.eh_frame:000000000000CB09                 db  91h
.eh_frame:000000000000CB0A                 db 0FFh
.eh_frame:000000000000CB0B                 db 0FFh
.eh_frame:000000000000CB0C                 db  80h
.eh_frame:000000000000CB0D                 db    0
.eh_frame:000000000000CB0E                 db    0
.eh_frame:000000000000CB0F                 db    0
.eh_frame:000000000000CB10                 db    0
.eh_frame:000000000000CB11                 db  41h ; A
.eh_frame:000000000000CB12                 db  0Eh
.eh_frame:000000000000CB13                 db  10h
.eh_frame:000000000000CB14                 db  83h
.eh_frame:000000000000CB15                 db    2
.eh_frame:000000000000CB16                 db    2
.eh_frame:000000000000CB17                 db  7Ah ; z
.eh_frame:000000000000CB18                 db  0Eh
.eh_frame:000000000000CB19                 db    8
.eh_frame:000000000000CB1A                 db    0
.eh_frame:000000000000CB1B                 db    0
.eh_frame:000000000000CB1C                 db    0
.eh_frame:000000000000CB1D                 db    0
.eh_frame:000000000000CB1E                 db    0
.eh_frame:000000000000CB1F                 db    0
.eh_frame:000000000000CB20                 db  18h
.eh_frame:000000000000CB21                 db    0
.eh_frame:000000000000CB22                 db    0
.eh_frame:000000000000CB23                 db    0
.eh_frame:000000000000CB24                 db  24h ; $
.eh_frame:000000000000CB25                 db    9
.eh_frame:000000000000CB26                 db    0
.eh_frame:000000000000CB27                 db    0
.eh_frame:000000000000CB28                 db 0D8h
.eh_frame:000000000000CB29                 db  91h
.eh_frame:000000000000CB2A                 db 0FFh
.eh_frame:000000000000CB2B                 db 0FFh
.eh_frame:000000000000CB2C                 db  1Ah
.eh_frame:000000000000CB2D                 db    0
.eh_frame:000000000000CB2E                 db    0
.eh_frame:000000000000CB2F                 db    0
.eh_frame:000000000000CB30                 db    0
.eh_frame:000000000000CB31                 db  41h ; A
.eh_frame:000000000000CB32                 db  0Eh
.eh_frame:000000000000CB33                 db  10h
.eh_frame:000000000000CB34                 db  83h
.eh_frame:000000000000CB35                 db    2
.eh_frame:000000000000CB36                 db  53h ; S
.eh_frame:000000000000CB37                 db  0Ah
.eh_frame:000000000000CB38                 db  0Eh
.eh_frame:000000000000CB39                 db    8
.eh_frame:000000000000CB3A                 db  41h ; A
.eh_frame:000000000000CB3B                 db  0Bh
.eh_frame:000000000000CB3C                 db  10h
.eh_frame:000000000000CB3D                 db    0
.eh_frame:000000000000CB3E                 db    0
.eh_frame:000000000000CB3F                 db    0
.eh_frame:000000000000CB40                 db  40h ; @
.eh_frame:000000000000CB41                 db    9
.eh_frame:000000000000CB42                 db    0
.eh_frame:000000000000CB43                 db    0
.eh_frame:000000000000CB44                 db 0DCh
.eh_frame:000000000000CB45                 db  91h
.eh_frame:000000000000CB46                 db 0FFh
.eh_frame:000000000000CB47                 db 0FFh
.eh_frame:000000000000CB48                 db  24h ; $
.eh_frame:000000000000CB49                 db    0
.eh_frame:000000000000CB4A                 db    0
.eh_frame:000000000000CB4B                 db    0
.eh_frame:000000000000CB4C                 db    0
.eh_frame:000000000000CB4D                 db  5Fh ; _
.eh_frame:000000000000CB4E                 db  0Eh
.eh_frame:000000000000CB4F                 db  10h
.eh_frame:000000000000CB50                 db  10h
.eh_frame:000000000000CB51                 db    0
.eh_frame:000000000000CB52                 db    0
.eh_frame:000000000000CB53                 db    0
.eh_frame:000000000000CB54                 db  54h ; T
.eh_frame:000000000000CB55                 db    9
.eh_frame:000000000000CB56                 db    0
.eh_frame:000000000000CB57                 db    0
.eh_frame:000000000000CB58                 db 0F8h
.eh_frame:000000000000CB59                 db  91h
.eh_frame:000000000000CB5A                 db 0FFh
.eh_frame:000000000000CB5B                 db 0FFh
.eh_frame:000000000000CB5C                 db    2
.eh_frame:000000000000CB5D                 db    0
.eh_frame:000000000000CB5E                 db    0
.eh_frame:000000000000CB5F                 db    0
.eh_frame:000000000000CB60                 db    0
.eh_frame:000000000000CB61                 db    0
.eh_frame:000000000000CB62                 db    0
.eh_frame:000000000000CB63                 db    0
.eh_frame:000000000000CB64                 db  20h
.eh_frame:000000000000CB65                 db    0
.eh_frame:000000000000CB66                 db    0
.eh_frame:000000000000CB67                 db    0
.eh_frame:000000000000CB68                 db  68h ; h
.eh_frame:000000000000CB69                 db    9
.eh_frame:000000000000CB6A                 db    0
.eh_frame:000000000000CB6B                 db    0
.eh_frame:000000000000CB6C                 db 0F4h
.eh_frame:000000000000CB6D                 db  91h
.eh_frame:000000000000CB6E                 db 0FFh
.eh_frame:000000000000CB6F                 db 0FFh
.eh_frame:000000000000CB70                 db  36h ; 6
.eh_frame:000000000000CB71                 db    0
.eh_frame:000000000000CB72                 db    0
.eh_frame:000000000000CB73                 db    0
.eh_frame:000000000000CB74                 db    0
.eh_frame:000000000000CB75                 db  44h ; D
.eh_frame:000000000000CB76                 db  0Eh
.eh_frame:000000000000CB77                 db  10h
.eh_frame:000000000000CB78                 db  83h
.eh_frame:000000000000CB79                 db    2
.eh_frame:000000000000CB7A                 db  5Dh ; ]
.eh_frame:000000000000CB7B                 db  0Ah
.eh_frame:000000000000CB7C                 db  0Eh
.eh_frame:000000000000CB7D                 db    8
.eh_frame:000000000000CB7E                 db  47h ; G
.eh_frame:000000000000CB7F                 db  0Bh
.eh_frame:000000000000CB80                 db  48h ; H
.eh_frame:000000000000CB81                 db  0Ah
.eh_frame:000000000000CB82                 db  0Eh
.eh_frame:000000000000CB83                 db    8
.eh_frame:000000000000CB84                 db  41h ; A
.eh_frame:000000000000CB85                 db  0Bh
.eh_frame:000000000000CB86                 db    0
.eh_frame:000000000000CB87                 db    0
.eh_frame:000000000000CB88                 db  10h
.eh_frame:000000000000CB89                 db    0
.eh_frame:000000000000CB8A                 db    0
.eh_frame:000000000000CB8B                 db    0
.eh_frame:000000000000CB8C                 db  8Ch
.eh_frame:000000000000CB8D                 db    9
.eh_frame:000000000000CB8E                 db    0
.eh_frame:000000000000CB8F                 db    0
.eh_frame:000000000000CB90                 db  10h
.eh_frame:000000000000CB91                 db  92h
.eh_frame:000000000000CB92                 db 0FFh
.eh_frame:000000000000CB93                 db 0FFh
.eh_frame:000000000000CB94                 db  24h ; $
.eh_frame:000000000000CB95                 db    0
.eh_frame:000000000000CB96                 db    0
.eh_frame:000000000000CB97                 db    0
.eh_frame:000000000000CB98                 db    0
.eh_frame:000000000000CB99                 db  5Fh ; _
.eh_frame:000000000000CB9A                 db  0Eh
.eh_frame:000000000000CB9B                 db  10h
.eh_frame:000000000000CB9C                 db  14h
.eh_frame:000000000000CB9D                 db    0
.eh_frame:000000000000CB9E                 db    0
.eh_frame:000000000000CB9F                 db    0
.eh_frame:000000000000CBA0                 db 0A0h
.eh_frame:000000000000CBA1                 db    9
.eh_frame:000000000000CBA2                 db    0
.eh_frame:000000000000CBA3                 db    0
.eh_frame:000000000000CBA4                 db  2Ch ; ,
.eh_frame:000000000000CBA5                 db  92h
.eh_frame:000000000000CBA6                 db 0FFh
.eh_frame:000000000000CBA7                 db 0FFh
.eh_frame:000000000000CBA8                 db  82h
.eh_frame:000000000000CBA9                 db    0
.eh_frame:000000000000CBAA                 db    0
.eh_frame:000000000000CBAB                 db    0
.eh_frame:000000000000CBAC                 db    0
.eh_frame:000000000000CBAD                 db    2
.eh_frame:000000000000CBAE                 db  5Fh ; _
.eh_frame:000000000000CBAF                 db  0Eh
.eh_frame:000000000000CBB0                 db  10h
.eh_frame:000000000000CBB1                 db  49h ; I
.eh_frame:000000000000CBB2                 db  0Eh
.eh_frame:000000000000CBB3                 db    8
.eh_frame:000000000000CBB4                 db  14h
.eh_frame:000000000000CBB5                 db    0
.eh_frame:000000000000CBB6                 db    0
.eh_frame:000000000000CBB7                 db    0
.eh_frame:000000000000CBB8                 db 0B8h
.eh_frame:000000000000CBB9                 db    9
.eh_frame:000000000000CBBA                 db    0
.eh_frame:000000000000CBBB                 db    0
.eh_frame:000000000000CBBC                 db 0A4h
.eh_frame:000000000000CBBD                 db  92h
.eh_frame:000000000000CBBE                 db 0FFh
.eh_frame:000000000000CBBF                 db 0FFh
.eh_frame:000000000000CBC0                 db  4Ah ; J
.eh_frame:000000000000CBC1                 db    0
.eh_frame:000000000000CBC2                 db    0
.eh_frame:000000000000CBC3                 db    0
.eh_frame:000000000000CBC4                 db    0
.eh_frame:000000000000CBC5                 db    2
.eh_frame:000000000000CBC6                 db  45h ; E
.eh_frame:000000000000CBC7                 db  0Eh
.eh_frame:000000000000CBC8                 db  10h
.eh_frame:000000000000CBC9                 db    0
.eh_frame:000000000000CBCA                 db    0
.eh_frame:000000000000CBCB                 db    0
.eh_frame:000000000000CBCC                 db  18h
.eh_frame:000000000000CBCD                 db    0
.eh_frame:000000000000CBCE                 db    0
.eh_frame:000000000000CBCF                 db    0
.eh_frame:000000000000CBD0                 db 0D0h
.eh_frame:000000000000CBD1                 db    9
.eh_frame:000000000000CBD2                 db    0
.eh_frame:000000000000CBD3                 db    0
.eh_frame:000000000000CBD4                 db 0DCh
.eh_frame:000000000000CBD5                 db  92h
.eh_frame:000000000000CBD6                 db 0FFh
.eh_frame:000000000000CBD7                 db 0FFh
.eh_frame:000000000000CBD8                 db  17h
.eh_frame:000000000000CBD9                 db    0
.eh_frame:000000000000CBDA                 db    0
.eh_frame:000000000000CBDB                 db    0
.eh_frame:000000000000CBDC                 db    0
.eh_frame:000000000000CBDD                 db  41h ; A
.eh_frame:000000000000CBDE                 db  0Eh
.eh_frame:000000000000CBDF                 db  10h
.eh_frame:000000000000CBE0                 db  83h
.eh_frame:000000000000CBE1                 db    2
.eh_frame:000000000000CBE2                 db  51h ; Q
.eh_frame:000000000000CBE3                 db  0Eh
.eh_frame:000000000000CBE4                 db    8
.eh_frame:000000000000CBE5                 db    0
.eh_frame:000000000000CBE6                 db    0
.eh_frame:000000000000CBE7                 db    0
.eh_frame:000000000000CBE8                 db  18h
.eh_frame:000000000000CBE9                 db    0
.eh_frame:000000000000CBEA                 db    0
.eh_frame:000000000000CBEB                 db    0
.eh_frame:000000000000CBEC                 db 0ECh
.eh_frame:000000000000CBED                 db    9
.eh_frame:000000000000CBEE                 db    0
.eh_frame:000000000000CBEF                 db    0
.eh_frame:000000000000CBF0                 db 0E0h
.eh_frame:000000000000CBF1                 db  92h
.eh_frame:000000000000CBF2                 db 0FFh
.eh_frame:000000000000CBF3                 db 0FFh
.eh_frame:000000000000CBF4                 db  2Eh ; .
.eh_frame:000000000000CBF5                 db    0
.eh_frame:000000000000CBF6                 db    0
.eh_frame:000000000000CBF7                 db    0
.eh_frame:000000000000CBF8                 db    0
.eh_frame:000000000000CBF9                 db  47h ; G
.eh_frame:000000000000CBFA                 db  0Eh
.eh_frame:000000000000CBFB                 db  10h
.eh_frame:000000000000CBFC                 db  61h ; a
.eh_frame:000000000000CBFD                 db  0Ah
.eh_frame:000000000000CBFE                 db  0Eh
.eh_frame:000000000000CBFF                 db    8
.eh_frame:000000000000CC00                 db  41h ; A
.eh_frame:000000000000CC01                 db  0Bh
.eh_frame:000000000000CC02                 db    0
.eh_frame:000000000000CC03                 db    0
.eh_frame:000000000000CC04                 db  24h ; $
.eh_frame:000000000000CC05                 db    0
.eh_frame:000000000000CC06                 db    0
.eh_frame:000000000000CC07                 db    0
.eh_frame:000000000000CC08                 db    8
.eh_frame:000000000000CC09                 db  0Ah
.eh_frame:000000000000CC0A                 db    0
.eh_frame:000000000000CC0B                 db    0
.eh_frame:000000000000CC0C                 db 0F4h
.eh_frame:000000000000CC0D                 db  92h
.eh_frame:000000000000CC0E                 db 0FFh
.eh_frame:000000000000CC0F                 db 0FFh
.eh_frame:000000000000CC10                 db  28h ; (
.eh_frame:000000000000CC11                 db    0
.eh_frame:000000000000CC12                 db    0
.eh_frame:000000000000CC13                 db    0
.eh_frame:000000000000CC14                 db    0
.eh_frame:000000000000CC15                 db  41h ; A
.eh_frame:000000000000CC16                 db  0Eh
.eh_frame:000000000000CC17                 db  10h
.eh_frame:000000000000CC18                 db  86h
.eh_frame:000000000000CC19                 db    2
.eh_frame:000000000000CC1A                 db  41h ; A
.eh_frame:000000000000CC1B                 db  0Eh
.eh_frame:000000000000CC1C                 db  18h
.eh_frame:000000000000CC1D                 db  83h
.eh_frame:000000000000CC1E                 db    3
.eh_frame:000000000000CC1F                 db  4Dh ; M
.eh_frame:000000000000CC20                 db  0Eh
.eh_frame:000000000000CC21                 db  20h
.eh_frame:000000000000CC22                 db  49h ; I
.eh_frame:000000000000CC23                 db  0Eh
.eh_frame:000000000000CC24                 db  18h
.eh_frame:000000000000CC25                 db  47h ; G
.eh_frame:000000000000CC26                 db  0Eh
.eh_frame:000000000000CC27                 db  10h
.eh_frame:000000000000CC28                 db  41h ; A
.eh_frame:000000000000CC29                 db  0Eh
.eh_frame:000000000000CC2A                 db    8
.eh_frame:000000000000CC2B                 db    0
.eh_frame:000000000000CC2C                 db  18h
.eh_frame:000000000000CC2D                 db    0
.eh_frame:000000000000CC2E                 db    0
.eh_frame:000000000000CC2F                 db    0
.eh_frame:000000000000CC30                 db  30h ; 0
.eh_frame:000000000000CC31                 db  0Ah
.eh_frame:000000000000CC32                 db    0
.eh_frame:000000000000CC33                 db    0
.eh_frame:000000000000CC34                 db 0FCh
.eh_frame:000000000000CC35                 db  92h
.eh_frame:000000000000CC36                 db 0FFh
.eh_frame:000000000000CC37                 db 0FFh
.eh_frame:000000000000CC38                 db  13h
.eh_frame:000000000000CC39                 db    0
.eh_frame:000000000000CC3A                 db    0
.eh_frame:000000000000CC3B                 db    0
.eh_frame:000000000000CC3C                 db    0
.eh_frame:000000000000CC3D                 db  41h ; A
.eh_frame:000000000000CC3E                 db  0Eh
.eh_frame:000000000000CC3F                 db  10h
.eh_frame:000000000000CC40                 db  83h
.eh_frame:000000000000CC41                 db    2
.eh_frame:000000000000CC42                 db  50h ; P
.eh_frame:000000000000CC43                 db  0Eh
.eh_frame:000000000000CC44                 db    8
.eh_frame:000000000000CC45                 db    0
.eh_frame:000000000000CC46                 db    0
.eh_frame:000000000000CC47                 db    0
.eh_frame:000000000000CC48                 db  14h
.eh_frame:000000000000CC49                 db    0
.eh_frame:000000000000CC4A                 db    0
.eh_frame:000000000000CC4B                 db    0
.eh_frame:000000000000CC4C                 db  4Ch ; L
.eh_frame:000000000000CC4D                 db  0Ah
.eh_frame:000000000000CC4E                 db    0
.eh_frame:000000000000CC4F                 db    0
.eh_frame:000000000000CC50                 db    0
.eh_frame:000000000000CC51                 db  93h
.eh_frame:000000000000CC52                 db 0FFh
.eh_frame:000000000000CC53                 db 0FFh
.eh_frame:000000000000CC54                 db  35h ; 5
.eh_frame:000000000000CC55                 db    0
.eh_frame:000000000000CC56                 db    0
.eh_frame:000000000000CC57                 db    0
.eh_frame:000000000000CC58                 db    0
.eh_frame:000000000000CC59                 db  4Bh ; K
.eh_frame:000000000000CC5A                 db  0Eh
.eh_frame:000000000000CC5B                 db  10h
.eh_frame:000000000000CC5C                 db    0
.eh_frame:000000000000CC5D                 db    0
.eh_frame:000000000000CC5E                 db    0
.eh_frame:000000000000CC5F                 db    0
.eh_frame:000000000000CC60                 db  18h
.eh_frame:000000000000CC61                 db    0
.eh_frame:000000000000CC62                 db    0
.eh_frame:000000000000CC63                 db    0
.eh_frame:000000000000CC64                 db  64h ; d
.eh_frame:000000000000CC65                 db  0Ah
.eh_frame:000000000000CC66                 db    0
.eh_frame:000000000000CC67                 db    0
.eh_frame:000000000000CC68                 db  28h ; (
.eh_frame:000000000000CC69                 db  93h
.eh_frame:000000000000CC6A                 db 0FFh
.eh_frame:000000000000CC6B                 db 0FFh
.eh_frame:000000000000CC6C                 db  4Fh ; O
.eh_frame:000000000000CC6D                 db    0
.eh_frame:000000000000CC6E                 db    0
.eh_frame:000000000000CC6F                 db    0
.eh_frame:000000000000CC70                 db    0
.eh_frame:000000000000CC71                 db  44h ; D
.eh_frame:000000000000CC72                 db  0Eh
.eh_frame:000000000000CC73                 db  10h
.eh_frame:000000000000CC74                 db  54h ; T
.eh_frame:000000000000CC75                 db  0Ah
.eh_frame:000000000000CC76                 db  0Eh
.eh_frame:000000000000CC77                 db    8
.eh_frame:000000000000CC78                 db  48h ; H
.eh_frame:000000000000CC79                 db  0Bh
.eh_frame:000000000000CC7A                 db    0
.eh_frame:000000000000CC7B                 db    0
.eh_frame:000000000000CC7C                 db  10h
.eh_frame:000000000000CC7D                 db    0
.eh_frame:000000000000CC7E                 db    0
.eh_frame:000000000000CC7F                 db    0
.eh_frame:000000000000CC80                 db  80h
.eh_frame:000000000000CC81                 db  0Ah
.eh_frame:000000000000CC82                 db    0
.eh_frame:000000000000CC83                 db    0
.eh_frame:000000000000CC84                 db  5Ch ; \
.eh_frame:000000000000CC85                 db  93h
.eh_frame:000000000000CC86                 db 0FFh
.eh_frame:000000000000CC87                 db 0FFh
.eh_frame:000000000000CC88                 db  29h ; )
.eh_frame:000000000000CC89                 db    0
.eh_frame:000000000000CC8A                 db    0
.eh_frame:000000000000CC8B                 db    0
.eh_frame:000000000000CC8C                 db    0
.eh_frame:000000000000CC8D                 db    0
.eh_frame:000000000000CC8E                 db    0
.eh_frame:000000000000CC8F                 db    0
.eh_frame:000000000000CC90                 db  4Ch ; L
.eh_frame:000000000000CC91                 db    0
.eh_frame:000000000000CC92                 db    0
.eh_frame:000000000000CC93                 db    0
.eh_frame:000000000000CC94                 db  94h
.eh_frame:000000000000CC95                 db  0Ah
.eh_frame:000000000000CC96                 db    0
.eh_frame:000000000000CC97                 db    0
.eh_frame:000000000000CC98                 db  78h ; x
.eh_frame:000000000000CC99                 db  93h
.eh_frame:000000000000CC9A                 db 0FFh
.eh_frame:000000000000CC9B                 db 0FFh
.eh_frame:000000000000CC9C                 db  1Ch
.eh_frame:000000000000CC9D                 db    4
.eh_frame:000000000000CC9E                 db    0
.eh_frame:000000000000CC9F                 db    0
.eh_frame:000000000000CCA0                 db    0
.eh_frame:000000000000CCA1                 db  42h ; B
.eh_frame:000000000000CCA2                 db  0Eh
.eh_frame:000000000000CCA3                 db  10h
.eh_frame:000000000000CCA4                 db  8Fh
.eh_frame:000000000000CCA5                 db    2
.eh_frame:000000000000CCA6                 db  42h ; B
.eh_frame:000000000000CCA7                 db  0Eh
.eh_frame:000000000000CCA8                 db  18h
.eh_frame:000000000000CCA9                 db  8Eh
.eh_frame:000000000000CCAA                 db    3
.eh_frame:000000000000CCAB                 db  42h ; B
.eh_frame:000000000000CCAC                 db  0Eh
.eh_frame:000000000000CCAD                 db  20h
.eh_frame:000000000000CCAE                 db  8Dh
.eh_frame:000000000000CCAF                 db    4
.eh_frame:000000000000CCB0                 db  42h ; B
.eh_frame:000000000000CCB1                 db  0Eh
.eh_frame:000000000000CCB2                 db  28h ; (
.eh_frame:000000000000CCB3                 db  8Ch
.eh_frame:000000000000CCB4                 db    5
.eh_frame:000000000000CCB5                 db  41h ; A
.eh_frame:000000000000CCB6                 db  0Eh
.eh_frame:000000000000CCB7                 db  30h ; 0
.eh_frame:000000000000CCB8                 db  86h
.eh_frame:000000000000CCB9                 db    6
.eh_frame:000000000000CCBA                 db  41h ; A
.eh_frame:000000000000CCBB                 db  0Eh
.eh_frame:000000000000CCBC                 db  38h ; 8
.eh_frame:000000000000CCBD                 db  83h
.eh_frame:000000000000CCBE                 db    7
.eh_frame:000000000000CCBF                 db  44h ; D
.eh_frame:000000000000CCC0                 db  0Eh
.eh_frame:000000000000CCC1                 db  60h ; `
.eh_frame:000000000000CCC2                 db    2
.eh_frame:000000000000CCC3                 db 0E9h
.eh_frame:000000000000CCC4                 db  0Ah
.eh_frame:000000000000CCC5                 db  0Eh
.eh_frame:000000000000CCC6                 db  38h ; 8
.eh_frame:000000000000CCC7                 db  41h ; A
.eh_frame:000000000000CCC8                 db  0Eh
.eh_frame:000000000000CCC9                 db  30h ; 0
.eh_frame:000000000000CCCA                 db  41h ; A
.eh_frame:000000000000CCCB                 db  0Eh
.eh_frame:000000000000CCCC                 db  28h ; (
.eh_frame:000000000000CCCD                 db  42h ; B
.eh_frame:000000000000CCCE                 db  0Eh
.eh_frame:000000000000CCCF                 db  20h
.eh_frame:000000000000CCD0                 db  42h ; B
.eh_frame:000000000000CCD1                 db  0Eh
.eh_frame:000000000000CCD2                 db  18h
.eh_frame:000000000000CCD3                 db  42h ; B
.eh_frame:000000000000CCD4                 db  0Eh
.eh_frame:000000000000CCD5                 db  10h
.eh_frame:000000000000CCD6                 db  42h ; B
.eh_frame:000000000000CCD7                 db  0Eh
.eh_frame:000000000000CCD8                 db    8
.eh_frame:000000000000CCD9                 db  47h ; G
.eh_frame:000000000000CCDA                 db  0Bh
.eh_frame:000000000000CCDB                 db    0
.eh_frame:000000000000CCDC                 db    0
.eh_frame:000000000000CCDD                 db    0
.eh_frame:000000000000CCDE                 db    0
.eh_frame:000000000000CCDF                 db    0
.eh_frame:000000000000CCE0                 db  10h
.eh_frame:000000000000CCE1                 db    0
.eh_frame:000000000000CCE2                 db    0
.eh_frame:000000000000CCE3                 db    0
.eh_frame:000000000000CCE4                 db 0E4h
.eh_frame:000000000000CCE5                 db  0Ah
.eh_frame:000000000000CCE6                 db    0
.eh_frame:000000000000CCE7                 db    0
.eh_frame:000000000000CCE8                 db  48h ; H
.eh_frame:000000000000CCE9                 db  97h
.eh_frame:000000000000CCEA                 db 0FFh
.eh_frame:000000000000CCEB                 db 0FFh
.eh_frame:000000000000CCEC                 db  1Ah
.eh_frame:000000000000CCED                 db    0
.eh_frame:000000000000CCEE                 db    0
.eh_frame:000000000000CCEF                 db    0
.eh_frame:000000000000CCF0                 db    0
.eh_frame:000000000000CCF1                 db    0
.eh_frame:000000000000CCF2                 db    0
.eh_frame:000000000000CCF3                 db    0
.eh_frame:000000000000CCF4                 db  10h
.eh_frame:000000000000CCF5                 db    0
.eh_frame:000000000000CCF6                 db    0
.eh_frame:000000000000CCF7                 db    0
.eh_frame:000000000000CCF8                 db 0F8h
.eh_frame:000000000000CCF9                 db  0Ah
.eh_frame:000000000000CCFA                 db    0
.eh_frame:000000000000CCFB                 db    0
.eh_frame:000000000000CCFC                 db  54h ; T
.eh_frame:000000000000CCFD                 db  97h
.eh_frame:000000000000CCFE                 db 0FFh
.eh_frame:000000000000CCFF                 db 0FFh
.eh_frame:000000000000CD00                 db  0Dh
.eh_frame:000000000000CD01                 db    0
.eh_frame:000000000000CD02                 db    0
.eh_frame:000000000000CD03                 db    0
.eh_frame:000000000000CD04                 db    0
.eh_frame:000000000000CD05                 db    0
.eh_frame:000000000000CD06                 db    0
.eh_frame:000000000000CD07                 db    0
.eh_frame:000000000000CD08                 db  10h
.eh_frame:000000000000CD09                 db    0
.eh_frame:000000000000CD0A                 db    0
.eh_frame:000000000000CD0B                 db    0
.eh_frame:000000000000CD0C                 db  0Ch
.eh_frame:000000000000CD0D                 db  0Bh
.eh_frame:000000000000CD0E                 db    0
.eh_frame:000000000000CD0F                 db    0
.eh_frame:000000000000CD10                 db  50h ; P
.eh_frame:000000000000CD11                 db  97h
.eh_frame:000000000000CD12                 db 0FFh
.eh_frame:000000000000CD13                 db 0FFh
.eh_frame:000000000000CD14                 db  0Ch
.eh_frame:000000000000CD15                 db    0
.eh_frame:000000000000CD16                 db    0
.eh_frame:000000000000CD17                 db    0
.eh_frame:000000000000CD18                 db    0
.eh_frame:000000000000CD19                 db    0
.eh_frame:000000000000CD1A                 db    0
.eh_frame:000000000000CD1B                 db    0
.eh_frame:000000000000CD1C                 db  10h
.eh_frame:000000000000CD1D                 db    0
.eh_frame:000000000000CD1E                 db    0
.eh_frame:000000000000CD1F                 db    0
.eh_frame:000000000000CD20                 db  20h
.eh_frame:000000000000CD21                 db  0Bh
.eh_frame:000000000000CD22                 db    0
.eh_frame:000000000000CD23                 db    0
.eh_frame:000000000000CD24                 db  4Ch ; L
.eh_frame:000000000000CD25                 db  97h
.eh_frame:000000000000CD26                 db 0FFh
.eh_frame:000000000000CD27                 db 0FFh
.eh_frame:000000000000CD28                 db  0Ah
.eh_frame:000000000000CD29                 db    0
.eh_frame:000000000000CD2A                 db    0
.eh_frame:000000000000CD2B                 db    0
.eh_frame:000000000000CD2C                 db    0
.eh_frame:000000000000CD2D                 db    0
.eh_frame:000000000000CD2E                 db    0
.eh_frame:000000000000CD2F                 db    0
.eh_frame:000000000000CD30                 db  10h
.eh_frame:000000000000CD31                 db    0
.eh_frame:000000000000CD32                 db    0
.eh_frame:000000000000CD33                 db    0
.eh_frame:000000000000CD34                 db  34h ; 4
.eh_frame:000000000000CD35                 db  0Bh
.eh_frame:000000000000CD36                 db    0
.eh_frame:000000000000CD37                 db    0
.eh_frame:000000000000CD38                 db  48h ; H
.eh_frame:000000000000CD39                 db  97h
.eh_frame:000000000000CD3A                 db 0FFh
.eh_frame:000000000000CD3B                 db 0FFh
.eh_frame:000000000000CD3C                 db  26h ; &
.eh_frame:000000000000CD3D                 db    0
.eh_frame:000000000000CD3E                 db    0
.eh_frame:000000000000CD3F                 db    0
.eh_frame:000000000000CD40                 db    0
.eh_frame:000000000000CD41                 db    0
.eh_frame:000000000000CD42                 db    0
.eh_frame:000000000000CD43                 db    0
.eh_frame:000000000000CD44                 db  38h ; 8
.eh_frame:000000000000CD45                 db    0
.eh_frame:000000000000CD46                 db    0
.eh_frame:000000000000CD47                 db    0
.eh_frame:000000000000CD48                 db  48h ; H
.eh_frame:000000000000CD49                 db  0Bh
.eh_frame:000000000000CD4A                 db    0
.eh_frame:000000000000CD4B                 db    0
.eh_frame:000000000000CD4C                 db  64h ; d
.eh_frame:000000000000CD4D                 db  97h
.eh_frame:000000000000CD4E                 db 0FFh
.eh_frame:000000000000CD4F                 db 0FFh
.eh_frame:000000000000CD50                 db 0C5h
.eh_frame:000000000000CD51                 db    1
.eh_frame:000000000000CD52                 db    0
.eh_frame:000000000000CD53                 db    0
.eh_frame:000000000000CD54                 db    0
.eh_frame:000000000000CD55                 db  42h ; B
.eh_frame:000000000000CD56                 db  0Eh
.eh_frame:000000000000CD57                 db  10h
.eh_frame:000000000000CD58                 db  8Ch
.eh_frame:000000000000CD59                 db    2
.eh_frame:000000000000CD5A                 db  41h ; A
.eh_frame:000000000000CD5B                 db  0Eh
.eh_frame:000000000000CD5C                 db  18h
.eh_frame:000000000000CD5D                 db  86h
.eh_frame:000000000000CD5E                 db    3
.eh_frame:000000000000CD5F                 db  44h ; D
.eh_frame:000000000000CD60                 db  0Eh
.eh_frame:000000000000CD61                 db  20h
.eh_frame:000000000000CD62                 db  83h
.eh_frame:000000000000CD63                 db    4
.eh_frame:000000000000CD64                 db    2
.eh_frame:000000000000CD65                 db  72h ; r
.eh_frame:000000000000CD66                 db  0Ah
.eh_frame:000000000000CD67                 db  0Eh
.eh_frame:000000000000CD68                 db  18h
.eh_frame:000000000000CD69                 db  41h ; A
.eh_frame:000000000000CD6A                 db  0Eh
.eh_frame:000000000000CD6B                 db  10h
.eh_frame:000000000000CD6C                 db  42h ; B
.eh_frame:000000000000CD6D                 db  0Eh
.eh_frame:000000000000CD6E                 db    8
.eh_frame:000000000000CD6F                 db  44h ; D
.eh_frame:000000000000CD70                 db  0Bh
.eh_frame:000000000000CD71                 db    2
.eh_frame:000000000000CD72                 db  54h ; T
.eh_frame:000000000000CD73                 db  0Ah
.eh_frame:000000000000CD74                 db  0Eh
.eh_frame:000000000000CD75                 db  18h
.eh_frame:000000000000CD76                 db  45h ; E
.eh_frame:000000000000CD77                 db  0Eh
.eh_frame:000000000000CD78                 db  10h
.eh_frame:000000000000CD79                 db  42h ; B
.eh_frame:000000000000CD7A                 db  0Eh
.eh_frame:000000000000CD7B                 db    8
.eh_frame:000000000000CD7C                 db  45h ; E
.eh_frame:000000000000CD7D                 db  0Bh
.eh_frame:000000000000CD7E                 db    0
.eh_frame:000000000000CD7F                 db    0
.eh_frame:000000000000CD80                 db  4Ch ; L
.eh_frame:000000000000CD81                 db    0
.eh_frame:000000000000CD82                 db    0
.eh_frame:000000000000CD83                 db    0
.eh_frame:000000000000CD84                 db  84h
.eh_frame:000000000000CD85                 db  0Bh
.eh_frame:000000000000CD86                 db    0
.eh_frame:000000000000CD87                 db    0
.eh_frame:000000000000CD88                 db 0F8h
.eh_frame:000000000000CD89                 db  98h
.eh_frame:000000000000CD8A                 db 0FFh
.eh_frame:000000000000CD8B                 db 0FFh
.eh_frame:000000000000CD8C                 db    5
.eh_frame:000000000000CD8D                 db    1
.eh_frame:000000000000CD8E                 db    0
.eh_frame:000000000000CD8F                 db    0
.eh_frame:000000000000CD90                 db    0
.eh_frame:000000000000CD91                 db  42h ; B
.eh_frame:000000000000CD92                 db  0Eh
.eh_frame:000000000000CD93                 db  10h
.eh_frame:000000000000CD94                 db  8Dh
.eh_frame:000000000000CD95                 db    2
.eh_frame:000000000000CD96                 db  42h ; B
.eh_frame:000000000000CD97                 db  0Eh
.eh_frame:000000000000CD98                 db  18h
.eh_frame:000000000000CD99                 db  8Ch
.eh_frame:000000000000CD9A                 db    3
.eh_frame:000000000000CD9B                 db  44h ; D
.eh_frame:000000000000CD9C                 db  0Eh
.eh_frame:000000000000CD9D                 db  20h
.eh_frame:000000000000CD9E                 db  86h
.eh_frame:000000000000CD9F                 db    4
.eh_frame:000000000000CDA0                 db  41h ; A
.eh_frame:000000000000CDA1                 db  0Eh
.eh_frame:000000000000CDA2                 db  28h ; (
.eh_frame:000000000000CDA3                 db  83h
.eh_frame:000000000000CDA4                 db    5
.eh_frame:000000000000CDA5                 db  4Ah ; J
.eh_frame:000000000000CDA6                 db  0Eh
.eh_frame:000000000000CDA7                 db  30h ; 0
.eh_frame:000000000000CDA8                 db    2
.eh_frame:000000000000CDA9                 db 0B3h
.eh_frame:000000000000CDAA                 db  0Ah
.eh_frame:000000000000CDAB                 db  0Eh
.eh_frame:000000000000CDAC                 db  28h ; (
.eh_frame:000000000000CDAD                 db  41h ; A
.eh_frame:000000000000CDAE                 db  0Eh
.eh_frame:000000000000CDAF                 db  20h
.eh_frame:000000000000CDB0                 db  41h ; A
.eh_frame:000000000000CDB1                 db  0Eh
.eh_frame:000000000000CDB2                 db  18h
.eh_frame:000000000000CDB3                 db  42h ; B
.eh_frame:000000000000CDB4                 db  0Eh
.eh_frame:000000000000CDB5                 db  10h
.eh_frame:000000000000CDB6                 db  42h ; B
.eh_frame:000000000000CDB7                 db  0Eh
.eh_frame:000000000000CDB8                 db    8
.eh_frame:000000000000CDB9                 db  44h ; D
.eh_frame:000000000000CDBA                 db  0Bh
.eh_frame:000000000000CDBB                 db  5Dh ; ]
.eh_frame:000000000000CDBC                 db  0Ah
.eh_frame:000000000000CDBD                 db  0Eh
.eh_frame:000000000000CDBE                 db  28h ; (
.eh_frame:000000000000CDBF                 db  44h ; D
.eh_frame:000000000000CDC0                 db  0Eh
.eh_frame:000000000000CDC1                 db  20h
.eh_frame:000000000000CDC2                 db  41h ; A
.eh_frame:000000000000CDC3                 db  0Eh
.eh_frame:000000000000CDC4                 db  18h
.eh_frame:000000000000CDC5                 db  42h ; B
.eh_frame:000000000000CDC6                 db  0Eh
.eh_frame:000000000000CDC7                 db  10h
.eh_frame:000000000000CDC8                 db  42h ; B
.eh_frame:000000000000CDC9                 db  0Eh
.eh_frame:000000000000CDCA                 db    8
.eh_frame:000000000000CDCB                 db  4Ah ; J
.eh_frame:000000000000CDCC                 db  0Bh
.eh_frame:000000000000CDCD                 db    0
.eh_frame:000000000000CDCE                 db    0
.eh_frame:000000000000CDCF                 db    0
.eh_frame:000000000000CDD0                 db  34h ; 4
.eh_frame:000000000000CDD1                 db    0
.eh_frame:000000000000CDD2                 db    0
.eh_frame:000000000000CDD3                 db    0
.eh_frame:000000000000CDD4                 db 0D4h
.eh_frame:000000000000CDD5                 db  0Bh
.eh_frame:000000000000CDD6                 db    0
.eh_frame:000000000000CDD7                 db    0
.eh_frame:000000000000CDD8                 db 0B8h
.eh_frame:000000000000CDD9                 db  99h
.eh_frame:000000000000CDDA                 db 0FFh
.eh_frame:000000000000CDDB                 db 0FFh
.eh_frame:000000000000CDDC                 db  8Ah
.eh_frame:000000000000CDDD                 db    0
.eh_frame:000000000000CDDE                 db    0
.eh_frame:000000000000CDDF                 db    0
.eh_frame:000000000000CDE0                 db    0
.eh_frame:000000000000CDE1                 db  42h ; B
.eh_frame:000000000000CDE2                 db  0Eh
.eh_frame:000000000000CDE3                 db  10h
.eh_frame:000000000000CDE4                 db  8Dh
.eh_frame:000000000000CDE5                 db    2
.eh_frame:000000000000CDE6                 db  42h ; B
.eh_frame:000000000000CDE7                 db  0Eh
.eh_frame:000000000000CDE8                 db  18h
.eh_frame:000000000000CDE9                 db  8Ch
.eh_frame:000000000000CDEA                 db    3
.eh_frame:000000000000CDEB                 db  44h ; D
.eh_frame:000000000000CDEC                 db  0Eh
.eh_frame:000000000000CDED                 db  20h
.eh_frame:000000000000CDEE                 db  86h
.eh_frame:000000000000CDEF                 db    4
.eh_frame:000000000000CDF0                 db  48h ; H
.eh_frame:000000000000CDF1                 db  0Eh
.eh_frame:000000000000CDF2                 db  28h ; (
.eh_frame:000000000000CDF3                 db  83h
.eh_frame:000000000000CDF4                 db    5
.eh_frame:000000000000CDF5                 db  4Ah ; J
.eh_frame:000000000000CDF6                 db  0Eh
.eh_frame:000000000000CDF7                 db  30h ; 0
.eh_frame:000000000000CDF8                 db    2
.eh_frame:000000000000CDF9                 db  66h ; f
.eh_frame:000000000000CDFA                 db  0Eh
.eh_frame:000000000000CDFB                 db  28h ; (
.eh_frame:000000000000CDFC                 db  44h ; D
.eh_frame:000000000000CDFD                 db  0Eh
.eh_frame:000000000000CDFE                 db  20h
.eh_frame:000000000000CDFF                 db  41h ; A
.eh_frame:000000000000CE00                 db  0Eh
.eh_frame:000000000000CE01                 db  18h
.eh_frame:000000000000CE02                 db  42h ; B
.eh_frame:000000000000CE03                 db  0Eh
.eh_frame:000000000000CE04                 db  10h
.eh_frame:000000000000CE05                 db  42h ; B
.eh_frame:000000000000CE06                 db  0Eh
.eh_frame:000000000000CE07                 db    8
.eh_frame:000000000000CE08                 db  28h ; (
.eh_frame:000000000000CE09                 db    0
.eh_frame:000000000000CE0A                 db    0
.eh_frame:000000000000CE0B                 db    0
.eh_frame:000000000000CE0C                 db  0Ch
.eh_frame:000000000000CE0D                 db  0Ch
.eh_frame:000000000000CE0E                 db    0
.eh_frame:000000000000CE0F                 db    0
.eh_frame:000000000000CE10                 db  10h
.eh_frame:000000000000CE11                 db  9Ah
.eh_frame:000000000000CE12                 db 0FFh
.eh_frame:000000000000CE13                 db 0FFh
.eh_frame:000000000000CE14                 db  42h ; B
.eh_frame:000000000000CE15                 db    0
.eh_frame:000000000000CE16                 db    0
.eh_frame:000000000000CE17                 db    0
.eh_frame:000000000000CE18                 db    0
.eh_frame:000000000000CE19                 db  46h ; F
.eh_frame:000000000000CE1A                 db  0Eh
.eh_frame:000000000000CE1B                 db  10h
.eh_frame:000000000000CE1C                 db  86h
.eh_frame:000000000000CE1D                 db    2
.eh_frame:000000000000CE1E                 db  41h ; A
.eh_frame:000000000000CE1F                 db  0Eh
.eh_frame:000000000000CE20                 db  18h
.eh_frame:000000000000CE21                 db  83h
.eh_frame:000000000000CE22                 db    3
.eh_frame:000000000000CE23                 db  47h ; G
.eh_frame:000000000000CE24                 db  0Eh
.eh_frame:000000000000CE25                 db  20h
.eh_frame:000000000000CE26                 db  68h ; h
.eh_frame:000000000000CE27                 db  0Eh
.eh_frame:000000000000CE28                 db  18h
.eh_frame:000000000000CE29                 db  41h ; A
.eh_frame:000000000000CE2A                 db  0Eh
.eh_frame:000000000000CE2B                 db  10h
.eh_frame:000000000000CE2C                 db  41h ; A
.eh_frame:000000000000CE2D                 db  0Eh
.eh_frame:000000000000CE2E                 db    8
.eh_frame:000000000000CE2F                 db  48h ; H
.eh_frame:000000000000CE30                 db 0C3h
.eh_frame:000000000000CE31                 db 0C6h
.eh_frame:000000000000CE32                 db    0
.eh_frame:000000000000CE33                 db    0
.eh_frame:000000000000CE34                 db  18h
.eh_frame:000000000000CE35                 db    0
.eh_frame:000000000000CE36                 db    0
.eh_frame:000000000000CE37                 db    0
.eh_frame:000000000000CE38                 db  38h ; 8
.eh_frame:000000000000CE39                 db  0Ch
.eh_frame:000000000000CE3A                 db    0
.eh_frame:000000000000CE3B                 db    0
.eh_frame:000000000000CE3C                 db  34h ; 4
.eh_frame:000000000000CE3D                 db  9Ah
.eh_frame:000000000000CE3E                 db 0FFh
.eh_frame:000000000000CE3F                 db 0FFh
.eh_frame:000000000000CE40                 db  39h ; 9
.eh_frame:000000000000CE41                 db    0
.eh_frame:000000000000CE42                 db    0
.eh_frame:000000000000CE43                 db    0
.eh_frame:000000000000CE44                 db    0
.eh_frame:000000000000CE45                 db  41h ; A
.eh_frame:000000000000CE46                 db  0Eh
.eh_frame:000000000000CE47                 db  10h
.eh_frame:000000000000CE48                 db  83h
.eh_frame:000000000000CE49                 db    2
.eh_frame:000000000000CE4A                 db  68h ; h
.eh_frame:000000000000CE4B                 db  0Ah
.eh_frame:000000000000CE4C                 db  0Eh
.eh_frame:000000000000CE4D                 db    8
.eh_frame:000000000000CE4E                 db  47h ; G
.eh_frame:000000000000CE4F                 db  0Bh
.eh_frame:000000000000CE50                 db  38h ; 8
.eh_frame:000000000000CE51                 db    0
.eh_frame:000000000000CE52                 db    0
.eh_frame:000000000000CE53                 db    0
.eh_frame:000000000000CE54                 db  54h ; T
.eh_frame:000000000000CE55                 db  0Ch
.eh_frame:000000000000CE56                 db    0
.eh_frame:000000000000CE57                 db    0
.eh_frame:000000000000CE58                 db  58h ; X
.eh_frame:000000000000CE59                 db  9Ah
.eh_frame:000000000000CE5A                 db 0FFh
.eh_frame:000000000000CE5B                 db 0FFh
.eh_frame:000000000000CE5C                 db  2Ch ; ,
.eh_frame:000000000000CE5D                 db    1
.eh_frame:000000000000CE5E                 db    0
.eh_frame:000000000000CE5F                 db    0
.eh_frame:000000000000CE60                 db    0
.eh_frame:000000000000CE61                 db  42h ; B
.eh_frame:000000000000CE62                 db  0Eh
.eh_frame:000000000000CE63                 db  10h
.eh_frame:000000000000CE64                 db  8Dh
.eh_frame:000000000000CE65                 db    2
.eh_frame:000000000000CE66                 db  42h ; B
.eh_frame:000000000000CE67                 db  0Eh
.eh_frame:000000000000CE68                 db  18h
.eh_frame:000000000000CE69                 db  8Ch
.eh_frame:000000000000CE6A                 db    3
.eh_frame:000000000000CE6B                 db  41h ; A
.eh_frame:000000000000CE6C                 db  0Eh
.eh_frame:000000000000CE6D                 db  20h
.eh_frame:000000000000CE6E                 db  86h
.eh_frame:000000000000CE6F                 db    4
.eh_frame:000000000000CE70                 db  41h ; A
.eh_frame:000000000000CE71                 db  0Eh
.eh_frame:000000000000CE72                 db  28h ; (
.eh_frame:000000000000CE73                 db  83h
.eh_frame:000000000000CE74                 db    5
.eh_frame:000000000000CE75                 db  47h ; G
.eh_frame:000000000000CE76                 db  0Eh
.eh_frame:000000000000CE77                 db 0C0h
.eh_frame:000000000000CE78                 db    1
.eh_frame:000000000000CE79                 db    2
.eh_frame:000000000000CE7A                 db 0A4h
.eh_frame:000000000000CE7B                 db  0Ah
.eh_frame:000000000000CE7C                 db  0Eh
.eh_frame:000000000000CE7D                 db  28h ; (
.eh_frame:000000000000CE7E                 db  41h ; A
.eh_frame:000000000000CE7F                 db  0Eh
.eh_frame:000000000000CE80                 db  20h
.eh_frame:000000000000CE81                 db  41h ; A
.eh_frame:000000000000CE82                 db  0Eh
.eh_frame:000000000000CE83                 db  18h
.eh_frame:000000000000CE84                 db  42h ; B
.eh_frame:000000000000CE85                 db  0Eh
.eh_frame:000000000000CE86                 db  10h
.eh_frame:000000000000CE87                 db  42h ; B
.eh_frame:000000000000CE88                 db  0Eh
.eh_frame:000000000000CE89                 db    8
.eh_frame:000000000000CE8A                 db  49h ; I
.eh_frame:000000000000CE8B                 db  0Bh
.eh_frame:000000000000CE8C                 db  20h
.eh_frame:000000000000CE8D                 db    0
.eh_frame:000000000000CE8E                 db    0
.eh_frame:000000000000CE8F                 db    0
.eh_frame:000000000000CE90                 db  90h
.eh_frame:000000000000CE91                 db  0Ch
.eh_frame:000000000000CE92                 db    0
.eh_frame:000000000000CE93                 db    0
.eh_frame:000000000000CE94                 db  4Ch ; L
.eh_frame:000000000000CE95                 db  9Bh
.eh_frame:000000000000CE96                 db 0FFh
.eh_frame:000000000000CE97                 db 0FFh
.eh_frame:000000000000CE98                 db  6Ah ; j
.eh_frame:000000000000CE99                 db    0
.eh_frame:000000000000CE9A                 db    0
.eh_frame:000000000000CE9B                 db    0
.eh_frame:000000000000CE9C                 db    0
.eh_frame:000000000000CE9D                 db  44h ; D
.eh_frame:000000000000CE9E                 db  0Eh
.eh_frame:000000000000CE9F                 db  10h
.eh_frame:000000000000CEA0                 db  72h ; r
.eh_frame:000000000000CEA1                 db  0Ah
.eh_frame:000000000000CEA2                 db  0Eh
.eh_frame:000000000000CEA3                 db    8
.eh_frame:000000000000CEA4                 db  4Ah ; J
.eh_frame:000000000000CEA5                 db  0Bh
.eh_frame:000000000000CEA6                 db  5Bh ; [
.eh_frame:000000000000CEA7                 db  0Ah
.eh_frame:000000000000CEA8                 db  0Eh
.eh_frame:000000000000CEA9                 db    8
.eh_frame:000000000000CEAA                 db  45h ; E
.eh_frame:000000000000CEAB                 db  0Bh
.eh_frame:000000000000CEAC                 db  49h ; I
.eh_frame:000000000000CEAD                 db  0Eh
.eh_frame:000000000000CEAE                 db    8
.eh_frame:000000000000CEAF                 db    0
.eh_frame:000000000000CEB0                 db  40h ; @
.eh_frame:000000000000CEB1                 db    0
.eh_frame:000000000000CEB2                 db    0
.eh_frame:000000000000CEB3                 db    0
.eh_frame:000000000000CEB4                 db 0B4h
.eh_frame:000000000000CEB5                 db  0Ch
.eh_frame:000000000000CEB6                 db    0
.eh_frame:000000000000CEB7                 db    0
.eh_frame:000000000000CEB8                 db  98h
.eh_frame:000000000000CEB9                 db  9Bh
.eh_frame:000000000000CEBA                 db 0FFh
.eh_frame:000000000000CEBB                 db 0FFh
.eh_frame:000000000000CEBC                 db  66h ; f
.eh_frame:000000000000CEBD                 db    0
.eh_frame:000000000000CEBE                 db    0
.eh_frame:000000000000CEBF                 db    0
.eh_frame:000000000000CEC0                 db    0
.eh_frame:000000000000CEC1                 db  41h ; A
.eh_frame:000000000000CEC2                 db  0Eh
.eh_frame:000000000000CEC3                 db  10h
.eh_frame:000000000000CEC4                 db  86h
.eh_frame:000000000000CEC5                 db    2
.eh_frame:000000000000CEC6                 db  41h ; A
.eh_frame:000000000000CEC7                 db  0Eh
.eh_frame:000000000000CEC8                 db  18h
.eh_frame:000000000000CEC9                 db  83h
.eh_frame:000000000000CECA                 db    3
.eh_frame:000000000000CECB                 db  49h ; I
.eh_frame:000000000000CECC                 db  0Eh
.eh_frame:000000000000CECD                 db  20h
.eh_frame:000000000000CECE                 db  61h ; a
.eh_frame:000000000000CECF                 db  0Ah
.eh_frame:000000000000CED0                 db  0Eh
.eh_frame:000000000000CED1                 db  18h
.eh_frame:000000000000CED2                 db  41h ; A
.eh_frame:000000000000CED3                 db  0Eh
.eh_frame:000000000000CED4                 db  10h
.eh_frame:000000000000CED5                 db  41h ; A
.eh_frame:000000000000CED6                 db  0Eh
.eh_frame:000000000000CED7                 db    8
.eh_frame:000000000000CED8                 db  42h ; B
.eh_frame:000000000000CED9                 db  0Bh
.eh_frame:000000000000CEDA                 db  5Bh ; [
.eh_frame:000000000000CEDB                 db  0Ah
.eh_frame:000000000000CEDC                 db  0Eh
.eh_frame:000000000000CEDD                 db  18h
.eh_frame:000000000000CEDE                 db  41h ; A
.eh_frame:000000000000CEDF                 db  0Eh
.eh_frame:000000000000CEE0                 db  10h
.eh_frame:000000000000CEE1                 db  41h ; A
.eh_frame:000000000000CEE2                 db  0Eh
.eh_frame:000000000000CEE3                 db    8
.eh_frame:000000000000CEE4                 db  43h ; C
.eh_frame:000000000000CEE5                 db  0Bh
.eh_frame:000000000000CEE6                 db  4Eh ; N
.eh_frame:000000000000CEE7                 db  0Ah
.eh_frame:000000000000CEE8                 db  0Eh
.eh_frame:000000000000CEE9                 db  18h
.eh_frame:000000000000CEEA                 db  41h ; A
.eh_frame:000000000000CEEB                 db  0Eh
.eh_frame:000000000000CEEC                 db  10h
.eh_frame:000000000000CEED                 db  41h ; A
.eh_frame:000000000000CEEE                 db  0Eh
.eh_frame:000000000000CEEF                 db    8
.eh_frame:000000000000CEF0                 db  41h ; A
.eh_frame:000000000000CEF1                 db  0Bh
.eh_frame:000000000000CEF2                 db    0
.eh_frame:000000000000CEF3                 db    0
.eh_frame:000000000000CEF4                 db  28h ; (
.eh_frame:000000000000CEF5                 db    0
.eh_frame:000000000000CEF6                 db    0
.eh_frame:000000000000CEF7                 db    0
.eh_frame:000000000000CEF8                 db 0F8h
.eh_frame:000000000000CEF9                 db  0Ch
.eh_frame:000000000000CEFA                 db    0
.eh_frame:000000000000CEFB                 db    0
.eh_frame:000000000000CEFC                 db 0C4h
.eh_frame:000000000000CEFD                 db  9Bh
.eh_frame:000000000000CEFE                 db 0FFh
.eh_frame:000000000000CEFF                 db 0FFh
.eh_frame:000000000000CF00                 db  5Ch ; \
.eh_frame:000000000000CF01                 db    0
.eh_frame:000000000000CF02                 db    0
.eh_frame:000000000000CF03                 db    0
.eh_frame:000000000000CF04                 db    0
.eh_frame:000000000000CF05                 db  41h ; A
.eh_frame:000000000000CF06                 db  0Eh
.eh_frame:000000000000CF07                 db  10h
.eh_frame:000000000000CF08                 db  86h
.eh_frame:000000000000CF09                 db    2
.eh_frame:000000000000CF0A                 db  41h ; A
.eh_frame:000000000000CF0B                 db  0Eh
.eh_frame:000000000000CF0C                 db  18h
.eh_frame:000000000000CF0D                 db  83h
.eh_frame:000000000000CF0E                 db    3
.eh_frame:000000000000CF0F                 db  47h ; G
.eh_frame:000000000000CF10                 db  0Eh
.eh_frame:000000000000CF11                 db  20h
.eh_frame:000000000000CF12                 db  6Ch ; l
.eh_frame:000000000000CF13                 db  0Ah
.eh_frame:000000000000CF14                 db  0Eh
.eh_frame:000000000000CF15                 db  18h
.eh_frame:000000000000CF16                 db  43h ; C
.eh_frame:000000000000CF17                 db  0Eh
.eh_frame:000000000000CF18                 db  10h
.eh_frame:000000000000CF19                 db  41h ; A
.eh_frame:000000000000CF1A                 db  0Eh
.eh_frame:000000000000CF1B                 db    8
.eh_frame:000000000000CF1C                 db  47h ; G
.eh_frame:000000000000CF1D                 db  0Bh
.eh_frame:000000000000CF1E                 db    0
.eh_frame:000000000000CF1F                 db    0
.eh_frame:000000000000CF20                 db  24h ; $
.eh_frame:000000000000CF21                 db    0
.eh_frame:000000000000CF22                 db    0
.eh_frame:000000000000CF23                 db    0
.eh_frame:000000000000CF24                 db  24h ; $
.eh_frame:000000000000CF25                 db  0Dh
.eh_frame:000000000000CF26                 db    0
.eh_frame:000000000000CF27                 db    0
.eh_frame:000000000000CF28                 db 0F8h
.eh_frame:000000000000CF29                 db  9Bh
.eh_frame:000000000000CF2A                 db 0FFh
.eh_frame:000000000000CF2B                 db 0FFh
.eh_frame:000000000000CF2C                 db  6Bh ; k
.eh_frame:000000000000CF2D                 db    0
.eh_frame:000000000000CF2E                 db    0
.eh_frame:000000000000CF2F                 db    0
.eh_frame:000000000000CF30                 db    0
.eh_frame:000000000000CF31                 db  41h ; A
.eh_frame:000000000000CF32                 db  0Eh
.eh_frame:000000000000CF33                 db  10h
.eh_frame:000000000000CF34                 db  83h
.eh_frame:000000000000CF35                 db    2
.eh_frame:000000000000CF36                 db  6Fh ; o
.eh_frame:000000000000CF37                 db  0Ah
.eh_frame:000000000000CF38                 db  0Eh
.eh_frame:000000000000CF39                 db    8
.eh_frame:000000000000CF3A                 db  48h ; H
.eh_frame:000000000000CF3B                 db  0Bh
.eh_frame:000000000000CF3C                 db  5Ah ; Z
.eh_frame:000000000000CF3D                 db  0Ah
.eh_frame:000000000000CF3E                 db  0Eh
.eh_frame:000000000000CF3F                 db    8
.eh_frame:000000000000CF40                 db  46h ; F
.eh_frame:000000000000CF41                 db  0Bh
.eh_frame:000000000000CF42                 db  52h ; R
.eh_frame:000000000000CF43                 db  0Eh
.eh_frame:000000000000CF44                 db    8
.eh_frame:000000000000CF45                 db    0
.eh_frame:000000000000CF46                 db    0
.eh_frame:000000000000CF47                 db    0
.eh_frame:000000000000CF48                 db  1Ch
.eh_frame:000000000000CF49                 db    0
.eh_frame:000000000000CF4A                 db    0
.eh_frame:000000000000CF4B                 db    0
.eh_frame:000000000000CF4C                 db  4Ch ; L
.eh_frame:000000000000CF4D                 db  0Dh
.eh_frame:000000000000CF4E                 db    0
.eh_frame:000000000000CF4F                 db    0
.eh_frame:000000000000CF50                 db  40h ; @
.eh_frame:000000000000CF51                 db  9Ch
.eh_frame:000000000000CF52                 db 0FFh
.eh_frame:000000000000CF53                 db 0FFh
.eh_frame:000000000000CF54                 db  63h ; c
.eh_frame:000000000000CF55                 db    0
.eh_frame:000000000000CF56                 db    0
.eh_frame:000000000000CF57                 db    0
.eh_frame:000000000000CF58                 db    0
.eh_frame:000000000000CF59                 db  47h ; G
.eh_frame:000000000000CF5A                 db  0Eh
.eh_frame:000000000000CF5B                 db  10h
.eh_frame:000000000000CF5C                 db  83h
.eh_frame:000000000000CF5D                 db    2
.eh_frame:000000000000CF5E                 db  70h ; p
.eh_frame:000000000000CF5F                 db  0Ah
.eh_frame:000000000000CF60                 db  0Eh
.eh_frame:000000000000CF61                 db    8
.eh_frame:000000000000CF62                 db  49h ; I
.eh_frame:000000000000CF63                 db  0Bh
.eh_frame:000000000000CF64                 db  62h ; b
.eh_frame:000000000000CF65                 db  0Eh
.eh_frame:000000000000CF66                 db    8
.eh_frame:000000000000CF67                 db    0
.eh_frame:000000000000CF68                 db  10h
.eh_frame:000000000000CF69                 db    0
.eh_frame:000000000000CF6A                 db    0
.eh_frame:000000000000CF6B                 db    0
.eh_frame:000000000000CF6C                 db  6Ch ; l
.eh_frame:000000000000CF6D                 db  0Dh
.eh_frame:000000000000CF6E                 db    0
.eh_frame:000000000000CF6F                 db    0
.eh_frame:000000000000CF70                 db  90h
.eh_frame:000000000000CF71                 db  9Ch
.eh_frame:000000000000CF72                 db 0FFh
.eh_frame:000000000000CF73                 db 0FFh
.eh_frame:000000000000CF74                 db  3Ah ; :
.eh_frame:000000000000CF75                 db    0
.eh_frame:000000000000CF76                 db    0
.eh_frame:000000000000CF77                 db    0
.eh_frame:000000000000CF78                 db    0
.eh_frame:000000000000CF79                 db    0
.eh_frame:000000000000CF7A                 db    0
.eh_frame:000000000000CF7B                 db    0
.eh_frame:000000000000CF7C                 db  4Ch ; L
.eh_frame:000000000000CF7D                 db    0
.eh_frame:000000000000CF7E                 db    0
.eh_frame:000000000000CF7F                 db    0
.eh_frame:000000000000CF80                 db  80h
.eh_frame:000000000000CF81                 db  0Dh
.eh_frame:000000000000CF82                 db    0
.eh_frame:000000000000CF83                 db    0
.eh_frame:000000000000CF84                 db 0BCh
.eh_frame:000000000000CF85                 db  9Ch
.eh_frame:000000000000CF86                 db 0FFh
.eh_frame:000000000000CF87                 db 0FFh
.eh_frame:000000000000CF88                 db  7Ah ; z
.eh_frame:000000000000CF89                 db    2
.eh_frame:000000000000CF8A                 db    0
.eh_frame:000000000000CF8B                 db    0
.eh_frame:000000000000CF8C                 db    0
.eh_frame:000000000000CF8D                 db  42h ; B
.eh_frame:000000000000CF8E                 db  0Eh
.eh_frame:000000000000CF8F                 db  10h
.eh_frame:000000000000CF90                 db  8Fh
.eh_frame:000000000000CF91                 db    2
.eh_frame:000000000000CF92                 db  42h ; B
.eh_frame:000000000000CF93                 db  0Eh
.eh_frame:000000000000CF94                 db  18h
.eh_frame:000000000000CF95                 db  8Eh
.eh_frame:000000000000CF96                 db    3
.eh_frame:000000000000CF97                 db  45h ; E
.eh_frame:000000000000CF98                 db  0Eh
.eh_frame:000000000000CF99                 db  20h
.eh_frame:000000000000CF9A                 db  8Dh
.eh_frame:000000000000CF9B                 db    4
.eh_frame:000000000000CF9C                 db  42h ; B
.eh_frame:000000000000CF9D                 db  0Eh
.eh_frame:000000000000CF9E                 db  28h ; (
.eh_frame:000000000000CF9F                 db  8Ch
.eh_frame:000000000000CFA0                 db    5
.eh_frame:000000000000CFA1                 db  44h ; D
.eh_frame:000000000000CFA2                 db  0Eh
.eh_frame:000000000000CFA3                 db  30h ; 0
.eh_frame:000000000000CFA4                 db  86h
.eh_frame:000000000000CFA5                 db    6
.eh_frame:000000000000CFA6                 db  41h ; A
.eh_frame:000000000000CFA7                 db  0Eh
.eh_frame:000000000000CFA8                 db  38h ; 8
.eh_frame:000000000000CFA9                 db  83h
.eh_frame:000000000000CFAA                 db    7
.eh_frame:000000000000CFAB                 db  4Dh ; M
.eh_frame:000000000000CFAC                 db  0Eh
.eh_frame:000000000000CFAD                 db 0F0h
.eh_frame:000000000000CFAE                 db    1
.eh_frame:000000000000CFAF                 db    3
.eh_frame:000000000000CFB0                 db    8
.eh_frame:000000000000CFB1                 db    1
.eh_frame:000000000000CFB2                 db  0Ah
.eh_frame:000000000000CFB3                 db  0Eh
.eh_frame:000000000000CFB4                 db  38h ; 8
.eh_frame:000000000000CFB5                 db  41h ; A
.eh_frame:000000000000CFB6                 db  0Eh
.eh_frame:000000000000CFB7                 db  30h ; 0
.eh_frame:000000000000CFB8                 db  41h ; A
.eh_frame:000000000000CFB9                 db  0Eh
.eh_frame:000000000000CFBA                 db  28h ; (
.eh_frame:000000000000CFBB                 db  42h ; B
.eh_frame:000000000000CFBC                 db  0Eh
.eh_frame:000000000000CFBD                 db  20h
.eh_frame:000000000000CFBE                 db  42h ; B
.eh_frame:000000000000CFBF                 db  0Eh
.eh_frame:000000000000CFC0                 db  18h
.eh_frame:000000000000CFC1                 db  42h ; B
.eh_frame:000000000000CFC2                 db  0Eh
.eh_frame:000000000000CFC3                 db  10h
.eh_frame:000000000000CFC4                 db  42h ; B
.eh_frame:000000000000CFC5                 db  0Eh
.eh_frame:000000000000CFC6                 db    8
.eh_frame:000000000000CFC7                 db  41h ; A
.eh_frame:000000000000CFC8                 db  0Bh
.eh_frame:000000000000CFC9                 db    0
.eh_frame:000000000000CFCA                 db    0
.eh_frame:000000000000CFCB                 db    0
.eh_frame:000000000000CFCC                 db  40h ; @
.eh_frame:000000000000CFCD                 db    0
.eh_frame:000000000000CFCE                 db    0
.eh_frame:000000000000CFCF                 db    0
.eh_frame:000000000000CFD0                 db 0D0h
.eh_frame:000000000000CFD1                 db  0Dh
.eh_frame:000000000000CFD2                 db    0
.eh_frame:000000000000CFD3                 db    0
.eh_frame:000000000000CFD4                 db 0ECh
.eh_frame:000000000000CFD5                 db  9Eh
.eh_frame:000000000000CFD6                 db 0FFh
.eh_frame:000000000000CFD7                 db 0FFh
.eh_frame:000000000000CFD8                 db 0AFh
.eh_frame:000000000000CFD9                 db    0
.eh_frame:000000000000CFDA                 db    0
.eh_frame:000000000000CFDB                 db    0
.eh_frame:000000000000CFDC                 db    0
.eh_frame:000000000000CFDD                 db  48h ; H
.eh_frame:000000000000CFDE                 db  0Eh
.eh_frame:000000000000CFDF                 db  10h
.eh_frame:000000000000CFE0                 db  8Ch
.eh_frame:000000000000CFE1                 db    2
.eh_frame:000000000000CFE2                 db  44h ; D
.eh_frame:000000000000CFE3                 db  0Eh
.eh_frame:000000000000CFE4                 db  18h
.eh_frame:000000000000CFE5                 db  86h
.eh_frame:000000000000CFE6                 db    3
.eh_frame:000000000000CFE7                 db  41h ; A
.eh_frame:000000000000CFE8                 db  0Eh
.eh_frame:000000000000CFE9                 db  20h
.eh_frame:000000000000CFEA                 db  83h
.eh_frame:000000000000CFEB                 db    4
.eh_frame:000000000000CFEC                 db    2
.eh_frame:000000000000CFED                 db  65h ; e
.eh_frame:000000000000CFEE                 db  0Ah
.eh_frame:000000000000CFEF                 db  0Eh
.eh_frame:000000000000CFF0                 db  18h
.eh_frame:000000000000CFF1                 db  46h ; F
.eh_frame:000000000000CFF2                 db  0Eh
.eh_frame:000000000000CFF3                 db  10h
.eh_frame:000000000000CFF4                 db  42h ; B
.eh_frame:000000000000CFF5                 db  0Eh
.eh_frame:000000000000CFF6                 db    8
.eh_frame:000000000000CFF7                 db  46h ; F
.eh_frame:000000000000CFF8                 db  0Bh
.eh_frame:000000000000CFF9                 db  5Eh ; ^
.eh_frame:000000000000CFFA                 db  0Ah
.eh_frame:000000000000CFFB                 db  0Eh
.eh_frame:000000000000CFFC                 db  18h
.eh_frame:000000000000CFFD                 db  41h ; A
.eh_frame:000000000000CFFE                 db  0Eh
.eh_frame:000000000000CFFF                 db  10h
.eh_frame:000000000000D000                 db  42h ; B
.eh_frame:000000000000D001                 db  0Eh
.eh_frame:000000000000D002                 db    8
.eh_frame:000000000000D003                 db  47h ; G
.eh_frame:000000000000D004                 db  0Bh
.eh_frame:000000000000D005                 db  41h ; A
.eh_frame:000000000000D006                 db  0Eh
.eh_frame:000000000000D007                 db  18h
.eh_frame:000000000000D008                 db  43h ; C
.eh_frame:000000000000D009                 db  0Eh
.eh_frame:000000000000D00A                 db  10h
.eh_frame:000000000000D00B                 db  42h ; B
.eh_frame:000000000000D00C                 db  0Eh
.eh_frame:000000000000D00D                 db    8
.eh_frame:000000000000D00E                 db    0
.eh_frame:000000000000D00F                 db    0
.eh_frame:000000000000D010                 db  18h
.eh_frame:000000000000D011                 db    0
.eh_frame:000000000000D012                 db    0
.eh_frame:000000000000D013                 db    0
.eh_frame:000000000000D014                 db  14h
.eh_frame:000000000000D015                 db  0Eh
.eh_frame:000000000000D016                 db    0
.eh_frame:000000000000D017                 db    0
.eh_frame:000000000000D018                 db  58h ; X
.eh_frame:000000000000D019                 db  9Fh
.eh_frame:000000000000D01A                 db 0FFh
.eh_frame:000000000000D01B                 db 0FFh
.eh_frame:000000000000D01C                 db 0B8h
.eh_frame:000000000000D01D                 db    0
.eh_frame:000000000000D01E                 db    0
.eh_frame:000000000000D01F                 db    0
.eh_frame:000000000000D020                 db    0
.eh_frame:000000000000D021                 db  44h ; D
.eh_frame:000000000000D022                 db  0Eh
.eh_frame:000000000000D023                 db  30h ; 0
.eh_frame:000000000000D024                 db    2
.eh_frame:000000000000D025                 db  55h ; U
.eh_frame:000000000000D026                 db  0Ah
.eh_frame:000000000000D027                 db  0Eh
.eh_frame:000000000000D028                 db    8
.eh_frame:000000000000D029                 db  47h ; G
.eh_frame:000000000000D02A                 db  0Bh
.eh_frame:000000000000D02B                 db    0
.eh_frame:000000000000D02C                 db  4Ch ; L
.eh_frame:000000000000D02D                 db    0
.eh_frame:000000000000D02E                 db    0
.eh_frame:000000000000D02F                 db    0
.eh_frame:000000000000D030                 db  30h ; 0
.eh_frame:000000000000D031                 db  0Eh
.eh_frame:000000000000D032                 db    0
.eh_frame:000000000000D033                 db    0
.eh_frame:000000000000D034                 db 0FCh
.eh_frame:000000000000D035                 db  9Fh
.eh_frame:000000000000D036                 db 0FFh
.eh_frame:000000000000D037                 db 0FFh
.eh_frame:000000000000D038                 db 0D1h
.eh_frame:000000000000D039                 db    9
.eh_frame:000000000000D03A                 db    0
.eh_frame:000000000000D03B                 db    0
.eh_frame:000000000000D03C                 db    0
.eh_frame:000000000000D03D                 db  42h ; B
.eh_frame:000000000000D03E                 db  0Eh
.eh_frame:000000000000D03F                 db  10h
.eh_frame:000000000000D040                 db  8Fh
.eh_frame:000000000000D041                 db    2
.eh_frame:000000000000D042                 db  42h ; B
.eh_frame:000000000000D043                 db  0Eh
.eh_frame:000000000000D044                 db  18h
.eh_frame:000000000000D045                 db  8Eh
.eh_frame:000000000000D046                 db    3
.eh_frame:000000000000D047                 db  45h ; E
.eh_frame:000000000000D048                 db  0Eh
.eh_frame:000000000000D049                 db  20h
.eh_frame:000000000000D04A                 db  8Dh
.eh_frame:000000000000D04B                 db    4
.eh_frame:000000000000D04C                 db  42h ; B
.eh_frame:000000000000D04D                 db  0Eh
.eh_frame:000000000000D04E                 db  28h ; (
.eh_frame:000000000000D04F                 db  8Ch
.eh_frame:000000000000D050                 db    5
.eh_frame:000000000000D051                 db  41h ; A
.eh_frame:000000000000D052                 db  0Eh
.eh_frame:000000000000D053                 db  30h ; 0
.eh_frame:000000000000D054                 db  86h
.eh_frame:000000000000D055                 db    6
.eh_frame:000000000000D056                 db  41h ; A
.eh_frame:000000000000D057                 db  0Eh
.eh_frame:000000000000D058                 db  38h ; 8
.eh_frame:000000000000D059                 db  83h
.eh_frame:000000000000D05A                 db    7
.eh_frame:000000000000D05B                 db  44h ; D
.eh_frame:000000000000D05C                 db  0Eh
.eh_frame:000000000000D05D                 db 0B0h
.eh_frame:000000000000D05E                 db    1
.eh_frame:000000000000D05F                 db    3
.eh_frame:000000000000D060                 db 0D1h
.eh_frame:000000000000D061                 db    5
.eh_frame:000000000000D062                 db  0Ah
.eh_frame:000000000000D063                 db  0Eh
.eh_frame:000000000000D064                 db  38h ; 8
.eh_frame:000000000000D065                 db  41h ; A
.eh_frame:000000000000D066                 db  0Eh
.eh_frame:000000000000D067                 db  30h ; 0
.eh_frame:000000000000D068                 db  41h ; A
.eh_frame:000000000000D069                 db  0Eh
.eh_frame:000000000000D06A                 db  28h ; (
.eh_frame:000000000000D06B                 db  42h ; B
.eh_frame:000000000000D06C                 db  0Eh
.eh_frame:000000000000D06D                 db  20h
.eh_frame:000000000000D06E                 db  42h ; B
.eh_frame:000000000000D06F                 db  0Eh
.eh_frame:000000000000D070                 db  18h
.eh_frame:000000000000D071                 db  42h ; B
.eh_frame:000000000000D072                 db  0Eh
.eh_frame:000000000000D073                 db  10h
.eh_frame:000000000000D074                 db  42h ; B
.eh_frame:000000000000D075                 db  0Eh
.eh_frame:000000000000D076                 db    8
.eh_frame:000000000000D077                 db  44h ; D
.eh_frame:000000000000D078                 db  0Bh
.eh_frame:000000000000D079                 db    0
.eh_frame:000000000000D07A                 db    0
.eh_frame:000000000000D07B                 db    0
.eh_frame:000000000000D07C                 db  48h ; H
.eh_frame:000000000000D07D                 db    0
.eh_frame:000000000000D07E                 db    0
.eh_frame:000000000000D07F                 db    0
.eh_frame:000000000000D080                 db  80h
.eh_frame:000000000000D081                 db  0Eh
.eh_frame:000000000000D082                 db    0
.eh_frame:000000000000D083                 db    0
.eh_frame:000000000000D084                 db  8Ch
.eh_frame:000000000000D085                 db 0A9h
.eh_frame:000000000000D086                 db 0FFh
.eh_frame:000000000000D087                 db 0FFh
.eh_frame:000000000000D088                 db 0AAh
.eh_frame:000000000000D089                 db    3
.eh_frame:000000000000D08A                 db    0
.eh_frame:000000000000D08B                 db    0
.eh_frame:000000000000D08C                 db    0
.eh_frame:000000000000D08D                 db  42h ; B
.eh_frame:000000000000D08E                 db  0Eh
.eh_frame:000000000000D08F                 db  10h
.eh_frame:000000000000D090                 db  8Fh
.eh_frame:000000000000D091                 db    2
.eh_frame:000000000000D092                 db  42h ; B
.eh_frame:000000000000D093                 db  0Eh
.eh_frame:000000000000D094                 db  18h
.eh_frame:000000000000D095                 db  8Eh
.eh_frame:000000000000D096                 db    3
.eh_frame:000000000000D097                 db  42h ; B
.eh_frame:000000000000D098                 db  0Eh
.eh_frame:000000000000D099                 db  20h
.eh_frame:000000000000D09A                 db  8Dh
.eh_frame:000000000000D09B                 db    4
.eh_frame:000000000000D09C                 db  42h ; B
.eh_frame:000000000000D09D                 db  0Eh
.eh_frame:000000000000D09E                 db  28h ; (
.eh_frame:000000000000D09F                 db  8Ch
.eh_frame:000000000000D0A0                 db    5
.eh_frame:000000000000D0A1                 db  41h ; A
.eh_frame:000000000000D0A2                 db  0Eh
.eh_frame:000000000000D0A3                 db  30h ; 0
.eh_frame:000000000000D0A4                 db  86h
.eh_frame:000000000000D0A5                 db    6
.eh_frame:000000000000D0A6                 db  41h ; A
.eh_frame:000000000000D0A7                 db  0Eh
.eh_frame:000000000000D0A8                 db  38h ; 8
.eh_frame:000000000000D0A9                 db  83h
.eh_frame:000000000000D0AA                 db    7
.eh_frame:000000000000D0AB                 db  44h ; D
.eh_frame:000000000000D0AC                 db  0Eh
.eh_frame:000000000000D0AD                 db  60h ; `
.eh_frame:000000000000D0AE                 db    3
.eh_frame:000000000000D0AF                 db 0A4h
.eh_frame:000000000000D0B0                 db    2
.eh_frame:000000000000D0B1                 db  0Ah
.eh_frame:000000000000D0B2                 db  0Eh
.eh_frame:000000000000D0B3                 db  38h ; 8
.eh_frame:000000000000D0B4                 db  44h ; D
.eh_frame:000000000000D0B5                 db  0Eh
.eh_frame:000000000000D0B6                 db  30h ; 0
.eh_frame:000000000000D0B7                 db  41h ; A
.eh_frame:000000000000D0B8                 db  0Eh
.eh_frame:000000000000D0B9                 db  28h ; (
.eh_frame:000000000000D0BA                 db  42h ; B
.eh_frame:000000000000D0BB                 db  0Eh
.eh_frame:000000000000D0BC                 db  20h
.eh_frame:000000000000D0BD                 db  42h ; B
.eh_frame:000000000000D0BE                 db  0Eh
.eh_frame:000000000000D0BF                 db  18h
.eh_frame:000000000000D0C0                 db  42h ; B
.eh_frame:000000000000D0C1                 db  0Eh
.eh_frame:000000000000D0C2                 db  10h
.eh_frame:000000000000D0C3                 db  42h ; B
.eh_frame:000000000000D0C4                 db  0Eh
.eh_frame:000000000000D0C5                 db    8
.eh_frame:000000000000D0C6                 db  41h ; A
.eh_frame:000000000000D0C7                 db  0Bh
.eh_frame:000000000000D0C8                 db  2Ch ; ,
.eh_frame:000000000000D0C9                 db    0
.eh_frame:000000000000D0CA                 db    0
.eh_frame:000000000000D0CB                 db    0
.eh_frame:000000000000D0CC                 db 0CCh
.eh_frame:000000000000D0CD                 db  0Eh
.eh_frame:000000000000D0CE                 db    0
.eh_frame:000000000000D0CF                 db    0
.eh_frame:000000000000D0D0                 db 0F0h
.eh_frame:000000000000D0D1                 db 0ACh
.eh_frame:000000000000D0D2                 db 0FFh
.eh_frame:000000000000D0D3                 db 0FFh
.eh_frame:000000000000D0D4                 db  82h
.eh_frame:000000000000D0D5                 db    1
.eh_frame:000000000000D0D6                 db    0
.eh_frame:000000000000D0D7                 db    0
.eh_frame:000000000000D0D8                 db    0
.eh_frame:000000000000D0D9                 db  42h ; B
.eh_frame:000000000000D0DA                 db  0Eh
.eh_frame:000000000000D0DB                 db  10h
.eh_frame:000000000000D0DC                 db  8Ch
.eh_frame:000000000000D0DD                 db    2
.eh_frame:000000000000D0DE                 db  41h ; A
.eh_frame:000000000000D0DF                 db  0Eh
.eh_frame:000000000000D0E0                 db  18h
.eh_frame:000000000000D0E1                 db  86h
.eh_frame:000000000000D0E2                 db    3
.eh_frame:000000000000D0E3                 db  44h ; D
.eh_frame:000000000000D0E4                 db  0Eh
.eh_frame:000000000000D0E5                 db  20h
.eh_frame:000000000000D0E6                 db  83h
.eh_frame:000000000000D0E7                 db    4
.eh_frame:000000000000D0E8                 db    2
.eh_frame:000000000000D0E9                 db 0C2h
.eh_frame:000000000000D0EA                 db  0Ah
.eh_frame:000000000000D0EB                 db  0Eh
.eh_frame:000000000000D0EC                 db  18h
.eh_frame:000000000000D0ED                 db  41h ; A
.eh_frame:000000000000D0EE                 db  0Eh
.eh_frame:000000000000D0EF                 db  10h
.eh_frame:000000000000D0F0                 db  42h ; B
.eh_frame:000000000000D0F1                 db  0Eh
.eh_frame:000000000000D0F2                 db    8
.eh_frame:000000000000D0F3                 db  44h ; D
.eh_frame:000000000000D0F4                 db  0Bh
.eh_frame:000000000000D0F5                 db    0
.eh_frame:000000000000D0F6                 db    0
.eh_frame:000000000000D0F7                 db    0
.eh_frame:000000000000D0F8                 db  60h ; `
.eh_frame:000000000000D0F9                 db    0
.eh_frame:000000000000D0FA                 db    0
.eh_frame:000000000000D0FB                 db    0
.eh_frame:000000000000D0FC                 db 0FCh
.eh_frame:000000000000D0FD                 db  0Eh
.eh_frame:000000000000D0FE                 db    0
.eh_frame:000000000000D0FF                 db    0
.eh_frame:000000000000D100                 db  50h ; P
.eh_frame:000000000000D101                 db 0AEh
.eh_frame:000000000000D102                 db 0FFh
.eh_frame:000000000000D103                 db 0FFh
.eh_frame:000000000000D104                 db  78h ; x
.eh_frame:000000000000D105                 db    7
.eh_frame:000000000000D106                 db    0
.eh_frame:000000000000D107                 db    0
.eh_frame:000000000000D108                 db    0
.eh_frame:000000000000D109                 db  42h ; B
.eh_frame:000000000000D10A                 db  0Eh
.eh_frame:000000000000D10B                 db  10h
.eh_frame:000000000000D10C                 db  8Eh
.eh_frame:000000000000D10D                 db    2
.eh_frame:000000000000D10E                 db  42h ; B
.eh_frame:000000000000D10F                 db  0Eh
.eh_frame:000000000000D110                 db  18h
.eh_frame:000000000000D111                 db  8Dh
.eh_frame:000000000000D112                 db    3
.eh_frame:000000000000D113                 db  42h ; B
.eh_frame:000000000000D114                 db  0Eh
.eh_frame:000000000000D115                 db  20h
.eh_frame:000000000000D116                 db  8Ch
.eh_frame:000000000000D117                 db    4
.eh_frame:000000000000D118                 db  41h ; A
.eh_frame:000000000000D119                 db  0Eh
.eh_frame:000000000000D11A                 db  28h ; (
.eh_frame:000000000000D11B                 db  86h
.eh_frame:000000000000D11C                 db    5
.eh_frame:000000000000D11D                 db  41h ; A
.eh_frame:000000000000D11E                 db  0Eh
.eh_frame:000000000000D11F                 db  30h ; 0
.eh_frame:000000000000D120                 db  83h
.eh_frame:000000000000D121                 db    6
.eh_frame:000000000000D122                 db    3
.eh_frame:000000000000D123                 db  19h
.eh_frame:000000000000D124                 db    1
.eh_frame:000000000000D125                 db  0Ah
.eh_frame:000000000000D126                 db  0Eh
.eh_frame:000000000000D127                 db  28h ; (
.eh_frame:000000000000D128                 db  44h ; D
.eh_frame:000000000000D129                 db  0Eh
.eh_frame:000000000000D12A                 db  20h
.eh_frame:000000000000D12B                 db  42h ; B
.eh_frame:000000000000D12C                 db  0Eh
.eh_frame:000000000000D12D                 db  18h
.eh_frame:000000000000D12E                 db  42h ; B
.eh_frame:000000000000D12F                 db  0Eh
.eh_frame:000000000000D130                 db  10h
.eh_frame:000000000000D131                 db  42h ; B
.eh_frame:000000000000D132                 db  0Eh
.eh_frame:000000000000D133                 db    8
.eh_frame:000000000000D134                 db  45h ; E
.eh_frame:000000000000D135                 db  0Bh
.eh_frame:000000000000D136                 db    2
.eh_frame:000000000000D137                 db  6Bh ; k
.eh_frame:000000000000D138                 db  0Ah
.eh_frame:000000000000D139                 db  0Eh
.eh_frame:000000000000D13A                 db  28h ; (
.eh_frame:000000000000D13B                 db  44h ; D
.eh_frame:000000000000D13C                 db  0Eh
.eh_frame:000000000000D13D                 db  20h
.eh_frame:000000000000D13E                 db  42h ; B
.eh_frame:000000000000D13F                 db  0Eh
.eh_frame:000000000000D140                 db  18h
.eh_frame:000000000000D141                 db  42h ; B
.eh_frame:000000000000D142                 db  0Eh
.eh_frame:000000000000D143                 db  10h
.eh_frame:000000000000D144                 db  42h ; B
.eh_frame:000000000000D145                 db  0Eh
.eh_frame:000000000000D146                 db    8
.eh_frame:000000000000D147                 db  4Bh ; K
.eh_frame:000000000000D148                 db  0Bh
.eh_frame:000000000000D149                 db    2
.eh_frame:000000000000D14A                 db 0E2h
.eh_frame:000000000000D14B                 db  0Ah
.eh_frame:000000000000D14C                 db  0Eh
.eh_frame:000000000000D14D                 db  28h ; (
.eh_frame:000000000000D14E                 db  41h ; A
.eh_frame:000000000000D14F                 db  0Eh
.eh_frame:000000000000D150                 db  20h
.eh_frame:000000000000D151                 db  42h ; B
.eh_frame:000000000000D152                 db  0Eh
.eh_frame:000000000000D153                 db  18h
.eh_frame:000000000000D154                 db  42h ; B
.eh_frame:000000000000D155                 db  0Eh
.eh_frame:000000000000D156                 db  10h
.eh_frame:000000000000D157                 db  42h ; B
.eh_frame:000000000000D158                 db  0Eh
.eh_frame:000000000000D159                 db    8
.eh_frame:000000000000D15A                 db  47h ; G
.eh_frame:000000000000D15B                 db  0Bh
.eh_frame:000000000000D15C                 db  14h
.eh_frame:000000000000D15D                 db    0
.eh_frame:000000000000D15E                 db    0
.eh_frame:000000000000D15F                 db    0
.eh_frame:000000000000D160                 db  60h ; `
.eh_frame:000000000000D161                 db  0Fh
.eh_frame:000000000000D162                 db    0
.eh_frame:000000000000D163                 db    0
.eh_frame:000000000000D164                 db  6Ch ; l
.eh_frame:000000000000D165                 db 0B5h
.eh_frame:000000000000D166                 db 0FFh
.eh_frame:000000000000D167                 db 0FFh
.eh_frame:000000000000D168                 db  29h ; )
.eh_frame:000000000000D169                 db    0
.eh_frame:000000000000D16A                 db    0
.eh_frame:000000000000D16B                 db    0
.eh_frame:000000000000D16C                 db    0
.eh_frame:000000000000D16D                 db  54h ; T
.eh_frame:000000000000D16E                 db  0Eh
.eh_frame:000000000000D16F                 db  10h
.eh_frame:000000000000D170                 db  54h ; T
.eh_frame:000000000000D171                 db  0Eh
.eh_frame:000000000000D172                 db    8
.eh_frame:000000000000D173                 db    0
.eh_frame:000000000000D174                 db  60h ; `
.eh_frame:000000000000D175                 db    0
.eh_frame:000000000000D176                 db    0
.eh_frame:000000000000D177                 db    0
.eh_frame:000000000000D178                 db  78h ; x
.eh_frame:000000000000D179                 db  0Fh
.eh_frame:000000000000D17A                 db    0
.eh_frame:000000000000D17B                 db    0
.eh_frame:000000000000D17C                 db  84h
.eh_frame:000000000000D17D                 db 0B5h
.eh_frame:000000000000D17E                 db 0FFh
.eh_frame:000000000000D17F                 db 0FFh
.eh_frame:000000000000D180                 db  4Eh ; N
.eh_frame:000000000000D181                 db    1
.eh_frame:000000000000D182                 db    0
.eh_frame:000000000000D183                 db    0
.eh_frame:000000000000D184                 db    0
.eh_frame:000000000000D185                 db  42h ; B
.eh_frame:000000000000D186                 db  0Eh
.eh_frame:000000000000D187                 db  10h
.eh_frame:000000000000D188                 db  8Eh
.eh_frame:000000000000D189                 db    2
.eh_frame:000000000000D18A                 db  42h ; B
.eh_frame:000000000000D18B                 db  0Eh
.eh_frame:000000000000D18C                 db  18h
.eh_frame:000000000000D18D                 db  8Dh
.eh_frame:000000000000D18E                 db    3
.eh_frame:000000000000D18F                 db  42h ; B
.eh_frame:000000000000D190                 db  0Eh
.eh_frame:000000000000D191                 db  20h
.eh_frame:000000000000D192                 db  8Ch
.eh_frame:000000000000D193                 db    4
.eh_frame:000000000000D194                 db  41h ; A
.eh_frame:000000000000D195                 db  0Eh
.eh_frame:000000000000D196                 db  28h ; (
.eh_frame:000000000000D197                 db  86h
.eh_frame:000000000000D198                 db    5
.eh_frame:000000000000D199                 db  44h ; D
.eh_frame:000000000000D19A                 db  0Eh
.eh_frame:000000000000D19B                 db  30h ; 0
.eh_frame:000000000000D19C                 db  83h
.eh_frame:000000000000D19D                 db    6
.eh_frame:000000000000D19E                 db    2
.eh_frame:000000000000D19F                 db  8Ah
.eh_frame:000000000000D1A0                 db  0Ah
.eh_frame:000000000000D1A1                 db  0Eh
.eh_frame:000000000000D1A2                 db  28h ; (
.eh_frame:000000000000D1A3                 db  41h ; A
.eh_frame:000000000000D1A4                 db  0Eh
.eh_frame:000000000000D1A5                 db  20h
.eh_frame:000000000000D1A6                 db  42h ; B
.eh_frame:000000000000D1A7                 db  0Eh
.eh_frame:000000000000D1A8                 db  18h
.eh_frame:000000000000D1A9                 db  42h ; B
.eh_frame:000000000000D1AA                 db  0Eh
.eh_frame:000000000000D1AB                 db  10h
.eh_frame:000000000000D1AC                 db  42h ; B
.eh_frame:000000000000D1AD                 db  0Eh
.eh_frame:000000000000D1AE                 db    8
.eh_frame:000000000000D1AF                 db  44h ; D
.eh_frame:000000000000D1B0                 db  0Bh
.eh_frame:000000000000D1B1                 db  41h ; A
.eh_frame:000000000000D1B2                 db  0Ah
.eh_frame:000000000000D1B3                 db  0Eh
.eh_frame:000000000000D1B4                 db  28h ; (
.eh_frame:000000000000D1B5                 db  45h ; E
.eh_frame:000000000000D1B6                 db  0Eh
.eh_frame:000000000000D1B7                 db  20h
.eh_frame:000000000000D1B8                 db  42h ; B
.eh_frame:000000000000D1B9                 db  0Eh
.eh_frame:000000000000D1BA                 db  18h
.eh_frame:000000000000D1BB                 db  42h ; B
.eh_frame:000000000000D1BC                 db  0Eh
.eh_frame:000000000000D1BD                 db  10h
.eh_frame:000000000000D1BE                 db  42h ; B
.eh_frame:000000000000D1BF                 db  0Eh
.eh_frame:000000000000D1C0                 db    8
.eh_frame:000000000000D1C1                 db  44h ; D
.eh_frame:000000000000D1C2                 db  0Bh
.eh_frame:000000000000D1C3                 db  41h ; A
.eh_frame:000000000000D1C4                 db  0Ah
.eh_frame:000000000000D1C5                 db  0Eh
.eh_frame:000000000000D1C6                 db  28h ; (
.eh_frame:000000000000D1C7                 db  43h ; C
.eh_frame:000000000000D1C8                 db  0Eh
.eh_frame:000000000000D1C9                 db  20h
.eh_frame:000000000000D1CA                 db  42h ; B
.eh_frame:000000000000D1CB                 db  0Eh
.eh_frame:000000000000D1CC                 db  18h
.eh_frame:000000000000D1CD                 db  42h ; B
.eh_frame:000000000000D1CE                 db  0Eh
.eh_frame:000000000000D1CF                 db  10h
.eh_frame:000000000000D1D0                 db  42h ; B
.eh_frame:000000000000D1D1                 db  0Eh
.eh_frame:000000000000D1D2                 db    8
.eh_frame:000000000000D1D3                 db  46h ; F
.eh_frame:000000000000D1D4                 db  0Bh
.eh_frame:000000000000D1D5                 db    0
.eh_frame:000000000000D1D6                 db    0
.eh_frame:000000000000D1D7                 db    0
.eh_frame:000000000000D1D8                 db  3Ch ; <
.eh_frame:000000000000D1D9                 db    0
.eh_frame:000000000000D1DA                 db    0
.eh_frame:000000000000D1DB                 db    0
.eh_frame:000000000000D1DC                 db 0DCh
.eh_frame:000000000000D1DD                 db  0Fh
.eh_frame:000000000000D1DE                 db    0
.eh_frame:000000000000D1DF                 db    0
.eh_frame:000000000000D1E0                 db  70h ; p
.eh_frame:000000000000D1E1                 db 0B6h
.eh_frame:000000000000D1E2                 db 0FFh
.eh_frame:000000000000D1E3                 db 0FFh
.eh_frame:000000000000D1E4                 db  83h
.eh_frame:000000000000D1E5                 db    0
.eh_frame:000000000000D1E6                 db    0
.eh_frame:000000000000D1E7                 db    0
.eh_frame:000000000000D1E8                 db    0
.eh_frame:000000000000D1E9                 db  42h ; B
.eh_frame:000000000000D1EA                 db  0Eh
.eh_frame:000000000000D1EB                 db  10h
.eh_frame:000000000000D1EC                 db  8Dh
.eh_frame:000000000000D1ED                 db    2
.eh_frame:000000000000D1EE                 db  42h ; B
.eh_frame:000000000000D1EF                 db  0Eh
.eh_frame:000000000000D1F0                 db  18h
.eh_frame:000000000000D1F1                 db  8Ch
.eh_frame:000000000000D1F2                 db    3
.eh_frame:000000000000D1F3                 db  44h ; D
.eh_frame:000000000000D1F4                 db  0Eh
.eh_frame:000000000000D1F5                 db  20h
.eh_frame:000000000000D1F6                 db  86h
.eh_frame:000000000000D1F7                 db    4
.eh_frame:000000000000D1F8                 db  41h ; A
.eh_frame:000000000000D1F9                 db  0Eh
.eh_frame:000000000000D1FA                 db  28h ; (
.eh_frame:000000000000D1FB                 db  83h
.eh_frame:000000000000D1FC                 db    5
.eh_frame:000000000000D1FD                 db  4Ah ; J
.eh_frame:000000000000D1FE                 db  0Eh
.eh_frame:000000000000D1FF                 db  40h ; @
.eh_frame:000000000000D200                 db    2
.eh_frame:000000000000D201                 db  64h ; d
.eh_frame:000000000000D202                 db  0Ah
.eh_frame:000000000000D203                 db  0Eh
.eh_frame:000000000000D204                 db  28h ; (
.eh_frame:000000000000D205                 db  41h ; A
.eh_frame:000000000000D206                 db  0Eh
.eh_frame:000000000000D207                 db  20h
.eh_frame:000000000000D208                 db  41h ; A
.eh_frame:000000000000D209                 db  0Eh
.eh_frame:000000000000D20A                 db  18h
.eh_frame:000000000000D20B                 db  42h ; B
.eh_frame:000000000000D20C                 db  0Eh
.eh_frame:000000000000D20D                 db  10h
.eh_frame:000000000000D20E                 db  42h ; B
.eh_frame:000000000000D20F                 db  0Eh
.eh_frame:000000000000D210                 db    8
.eh_frame:000000000000D211                 db  41h ; A
.eh_frame:000000000000D212                 db  0Bh
.eh_frame:000000000000D213                 db    0
.eh_frame:000000000000D214                 db    0
.eh_frame:000000000000D215                 db    0
.eh_frame:000000000000D216                 db    0
.eh_frame:000000000000D217                 db    0
.eh_frame:000000000000D218                 db  4Ch ; L
.eh_frame:000000000000D219                 db    0
.eh_frame:000000000000D21A                 db    0
.eh_frame:000000000000D21B                 db    0
.eh_frame:000000000000D21C                 db  1Ch
.eh_frame:000000000000D21D                 db  10h
.eh_frame:000000000000D21E                 db    0
.eh_frame:000000000000D21F                 db    0
.eh_frame:000000000000D220                 db 0C0h
.eh_frame:000000000000D221                 db 0B6h
.eh_frame:000000000000D222                 db 0FFh
.eh_frame:000000000000D223                 db 0FFh
.eh_frame:000000000000D224                 db  7Dh ; }
.eh_frame:000000000000D225                 db    0
.eh_frame:000000000000D226                 db    0
.eh_frame:000000000000D227                 db    0
.eh_frame:000000000000D228                 db    0
.eh_frame:000000000000D229                 db  42h ; B
.eh_frame:000000000000D22A                 db  0Eh
.eh_frame:000000000000D22B                 db  10h
.eh_frame:000000000000D22C                 db  8Ch
.eh_frame:000000000000D22D                 db    2
.eh_frame:000000000000D22E                 db  41h ; A
.eh_frame:000000000000D22F                 db  0Eh
.eh_frame:000000000000D230                 db  18h
.eh_frame:000000000000D231                 db  86h
.eh_frame:000000000000D232                 db    3
.eh_frame:000000000000D233                 db  44h ; D
.eh_frame:000000000000D234                 db  0Eh
.eh_frame:000000000000D235                 db  20h
.eh_frame:000000000000D236                 db  83h
.eh_frame:000000000000D237                 db    4
.eh_frame:000000000000D238                 db  69h ; i
.eh_frame:000000000000D239                 db  0Ah
.eh_frame:000000000000D23A                 db  0Eh
.eh_frame:000000000000D23B                 db  18h
.eh_frame:000000000000D23C                 db  41h ; A
.eh_frame:000000000000D23D                 db  0Eh
.eh_frame:000000000000D23E                 db  10h
.eh_frame:000000000000D23F                 db  42h ; B
.eh_frame:000000000000D240                 db  0Eh
.eh_frame:000000000000D241                 db    8
.eh_frame:000000000000D242                 db  45h ; E
.eh_frame:000000000000D243                 db  0Bh
.eh_frame:000000000000D244                 db  55h ; U
.eh_frame:000000000000D245                 db  0Ah
.eh_frame:000000000000D246                 db  0Eh
.eh_frame:000000000000D247                 db  18h
.eh_frame:000000000000D248                 db  41h ; A
.eh_frame:000000000000D249                 db  0Eh
.eh_frame:000000000000D24A                 db  10h
.eh_frame:000000000000D24B                 db  42h ; B
.eh_frame:000000000000D24C                 db  0Eh
.eh_frame:000000000000D24D                 db    8
.eh_frame:000000000000D24E                 db  48h ; H
.eh_frame:000000000000D24F                 db  0Bh
.eh_frame:000000000000D250                 db  41h ; A
.eh_frame:000000000000D251                 db  0Ah
.eh_frame:000000000000D252                 db  0Eh
.eh_frame:000000000000D253                 db  18h
.eh_frame:000000000000D254                 db  46h ; F
.eh_frame:000000000000D255                 db  0Eh
.eh_frame:000000000000D256                 db  10h
.eh_frame:000000000000D257                 db  42h ; B
.eh_frame:000000000000D258                 db  0Eh
.eh_frame:000000000000D259                 db    8
.eh_frame:000000000000D25A                 db  47h ; G
.eh_frame:000000000000D25B                 db  0Bh
.eh_frame:000000000000D25C                 db  49h ; I
.eh_frame:000000000000D25D                 db  0Eh
.eh_frame:000000000000D25E                 db  18h
.eh_frame:000000000000D25F                 db  41h ; A
.eh_frame:000000000000D260                 db  0Eh
.eh_frame:000000000000D261                 db  10h
.eh_frame:000000000000D262                 db  42h ; B
.eh_frame:000000000000D263                 db  0Eh
.eh_frame:000000000000D264                 db    8
.eh_frame:000000000000D265                 db    0
.eh_frame:000000000000D266                 db    0
.eh_frame:000000000000D267                 db    0
.eh_frame:000000000000D268                 db  10h
.eh_frame:000000000000D269                 db    0
.eh_frame:000000000000D26A                 db    0
.eh_frame:000000000000D26B                 db    0
.eh_frame:000000000000D26C                 db  6Ch ; l
.eh_frame:000000000000D26D                 db  10h
.eh_frame:000000000000D26E                 db    0
.eh_frame:000000000000D26F                 db    0
.eh_frame:000000000000D270                 db 0F0h
.eh_frame:000000000000D271                 db 0B6h
.eh_frame:000000000000D272                 db 0FFh
.eh_frame:000000000000D273                 db 0FFh
.eh_frame:000000000000D274                 db  10h
.eh_frame:000000000000D275                 db    0
.eh_frame:000000000000D276                 db    0
.eh_frame:000000000000D277                 db    0
.eh_frame:000000000000D278                 db    0
.eh_frame:000000000000D279                 db    0
.eh_frame:000000000000D27A                 db    0
.eh_frame:000000000000D27B                 db    0
.eh_frame:000000000000D27C                 db  18h
.eh_frame:000000000000D27D                 db    0
.eh_frame:000000000000D27E                 db    0
.eh_frame:000000000000D27F                 db    0
.eh_frame:000000000000D280                 db  80h
.eh_frame:000000000000D281                 db  10h
.eh_frame:000000000000D282                 db    0
.eh_frame:000000000000D283                 db    0
.eh_frame:000000000000D284                 db 0ECh
.eh_frame:000000000000D285                 db 0B6h
.eh_frame:000000000000D286                 db 0FFh
.eh_frame:000000000000D287                 db 0FFh
.eh_frame:000000000000D288                 db  8Ah
.eh_frame:000000000000D289                 db    0
.eh_frame:000000000000D28A                 db    0
.eh_frame:000000000000D28B                 db    0
.eh_frame:000000000000D28C                 db    0
.eh_frame:000000000000D28D                 db    2
.eh_frame:000000000000D28E                 db  80h
.eh_frame:000000000000D28F                 db  0Eh
.eh_frame:000000000000D290                 db  10h
.eh_frame:000000000000D291                 db    0
.eh_frame:000000000000D292                 db    0
.eh_frame:000000000000D293                 db    0
.eh_frame:000000000000D294                 db    0
.eh_frame:000000000000D295                 db    0
.eh_frame:000000000000D296                 db    0
.eh_frame:000000000000D297                 db    0
.eh_frame:000000000000D298                 db  1Ch
.eh_frame:000000000000D299                 db    0
.eh_frame:000000000000D29A                 db    0
.eh_frame:000000000000D29B                 db    0
.eh_frame:000000000000D29C                 db  9Ch
.eh_frame:000000000000D29D                 db  10h
.eh_frame:000000000000D29E                 db    0
.eh_frame:000000000000D29F                 db    0
.eh_frame:000000000000D2A0                 db  60h ; `
.eh_frame:000000000000D2A1                 db 0B7h
.eh_frame:000000000000D2A2                 db 0FFh
.eh_frame:000000000000D2A3                 db 0FFh
.eh_frame:000000000000D2A4                 db  6Eh ; n
.eh_frame:000000000000D2A5                 db    0
.eh_frame:000000000000D2A6                 db    0
.eh_frame:000000000000D2A7                 db    0
.eh_frame:000000000000D2A8                 db    0
.eh_frame:000000000000D2A9                 db  44h ; D
.eh_frame:000000000000D2AA                 db  0Eh
.eh_frame:000000000000D2AB                 db  60h ; `
.eh_frame:000000000000D2AC                 db  7Fh ; 
.eh_frame:000000000000D2AD                 db  0Ah
.eh_frame:000000000000D2AE                 db  0Eh
.eh_frame:000000000000D2AF                 db    8
.eh_frame:000000000000D2B0                 db  45h ; E
.eh_frame:000000000000D2B1                 db  0Bh
.eh_frame:000000000000D2B2                 db    0
.eh_frame:000000000000D2B3                 db    0
.eh_frame:000000000000D2B4                 db    0
.eh_frame:000000000000D2B5                 db    0
.eh_frame:000000000000D2B6                 db    0
.eh_frame:000000000000D2B7                 db    0
.eh_frame:000000000000D2B8                 db  1Ch
.eh_frame:000000000000D2B9                 db    0
.eh_frame:000000000000D2BA                 db    0
.eh_frame:000000000000D2BB                 db    0
.eh_frame:000000000000D2BC                 db 0BCh
.eh_frame:000000000000D2BD                 db  10h
.eh_frame:000000000000D2BE                 db    0
.eh_frame:000000000000D2BF                 db    0
.eh_frame:000000000000D2C0                 db 0B0h
.eh_frame:000000000000D2C1                 db 0B7h
.eh_frame:000000000000D2C2                 db 0FFh
.eh_frame:000000000000D2C3                 db 0FFh
.eh_frame:000000000000D2C4                 db  60h ; `
.eh_frame:000000000000D2C5                 db    0
.eh_frame:000000000000D2C6                 db    0
.eh_frame:000000000000D2C7                 db    0
.eh_frame:000000000000D2C8                 db    0
.eh_frame:000000000000D2C9                 db  44h ; D
.eh_frame:000000000000D2CA                 db  0Eh
.eh_frame:000000000000D2CB                 db  10h
.eh_frame:000000000000D2CC                 db  75h ; u
.eh_frame:000000000000D2CD                 db  0Ah
.eh_frame:000000000000D2CE                 db  0Eh
.eh_frame:000000000000D2CF                 db    8
.eh_frame:000000000000D2D0                 db  47h ; G
.eh_frame:000000000000D2D1                 db  0Bh
.eh_frame:000000000000D2D2                 db  5Fh ; _
.eh_frame:000000000000D2D3                 db  0Eh
.eh_frame:000000000000D2D4                 db    8
.eh_frame:000000000000D2D5                 db    0
.eh_frame:000000000000D2D6                 db    0
.eh_frame:000000000000D2D7                 db    0
.eh_frame:000000000000D2D8                 db  10h
.eh_frame:000000000000D2D9                 db    0
.eh_frame:000000000000D2DA                 db    0
.eh_frame:000000000000D2DB                 db    0
.eh_frame:000000000000D2DC                 db 0DCh
.eh_frame:000000000000D2DD                 db  10h
.eh_frame:000000000000D2DE                 db    0
.eh_frame:000000000000D2DF                 db    0
.eh_frame:000000000000D2E0                 db 0F0h
.eh_frame:000000000000D2E1                 db 0B7h
.eh_frame:000000000000D2E2                 db 0FFh
.eh_frame:000000000000D2E3                 db 0FFh
.eh_frame:000000000000D2E4                 db  93h
.eh_frame:000000000000D2E5                 db    0
.eh_frame:000000000000D2E6                 db    0
.eh_frame:000000000000D2E7                 db    0
.eh_frame:000000000000D2E8                 db    0
.eh_frame:000000000000D2E9                 db    0
.eh_frame:000000000000D2EA                 db    0
.eh_frame:000000000000D2EB                 db    0
.eh_frame:000000000000D2EC                 db  10h
.eh_frame:000000000000D2ED                 db    0
.eh_frame:000000000000D2EE                 db    0
.eh_frame:000000000000D2EF                 db    0
.eh_frame:000000000000D2F0                 db 0F0h
.eh_frame:000000000000D2F1                 db  10h
.eh_frame:000000000000D2F2                 db    0
.eh_frame:000000000000D2F3                 db    0
.eh_frame:000000000000D2F4                 db  7Ch ; |
.eh_frame:000000000000D2F5                 db 0B8h
.eh_frame:000000000000D2F6                 db 0FFh
.eh_frame:000000000000D2F7                 db 0FFh
.eh_frame:000000000000D2F8                 db  10h
.eh_frame:000000000000D2F9                 db    0
.eh_frame:000000000000D2FA                 db    0
.eh_frame:000000000000D2FB                 db    0
.eh_frame:000000000000D2FC                 db    0
.eh_frame:000000000000D2FD                 db    0
.eh_frame:000000000000D2FE                 db    0
.eh_frame:000000000000D2FF                 db    0
.eh_frame:000000000000D300                 db  10h
.eh_frame:000000000000D301                 db    0
.eh_frame:000000000000D302                 db    0
.eh_frame:000000000000D303                 db    0
.eh_frame:000000000000D304                 db    4
.eh_frame:000000000000D305                 db  11h
.eh_frame:000000000000D306                 db    0
.eh_frame:000000000000D307                 db    0
.eh_frame:000000000000D308                 db  78h ; x
.eh_frame:000000000000D309                 db 0B8h
.eh_frame:000000000000D30A                 db 0FFh
.eh_frame:000000000000D30B                 db 0FFh
.eh_frame:000000000000D30C                 db    7
.eh_frame:000000000000D30D                 db    0
.eh_frame:000000000000D30E                 db    0
.eh_frame:000000000000D30F                 db    0
.eh_frame:000000000000D310                 db    0
.eh_frame:000000000000D311                 db    0
.eh_frame:000000000000D312                 db    0
.eh_frame:000000000000D313                 db    0
.eh_frame:000000000000D314                 db  18h
.eh_frame:000000000000D315                 db    0
.eh_frame:000000000000D316                 db    0
.eh_frame:000000000000D317                 db    0
.eh_frame:000000000000D318                 db  18h
.eh_frame:000000000000D319                 db  11h
.eh_frame:000000000000D31A                 db    0
.eh_frame:000000000000D31B                 db    0
.eh_frame:000000000000D31C                 db  74h ; t
.eh_frame:000000000000D31D                 db 0B8h
.eh_frame:000000000000D31E                 db 0FFh
.eh_frame:000000000000D31F                 db 0FFh
.eh_frame:000000000000D320                 db  22h ; "
.eh_frame:000000000000D321                 db    0
.eh_frame:000000000000D322                 db    0
.eh_frame:000000000000D323                 db    0
.eh_frame:000000000000D324                 db    0
.eh_frame:000000000000D325                 db  41h ; A
.eh_frame:000000000000D326                 db  0Eh
.eh_frame:000000000000D327                 db  10h
.eh_frame:000000000000D328                 db  83h
.eh_frame:000000000000D329                 db    2
.eh_frame:000000000000D32A                 db  5Bh ; [
.eh_frame:000000000000D32B                 db  0Ah
.eh_frame:000000000000D32C                 db  0Eh
.eh_frame:000000000000D32D                 db    8
.eh_frame:000000000000D32E                 db  41h ; A
.eh_frame:000000000000D32F                 db  0Bh
.eh_frame:000000000000D330                 db  5Ch ; \
.eh_frame:000000000000D331                 db    0
.eh_frame:000000000000D332                 db    0
.eh_frame:000000000000D333                 db    0
.eh_frame:000000000000D334                 db  34h ; 4
.eh_frame:000000000000D335                 db  11h
.eh_frame:000000000000D336                 db    0
.eh_frame:000000000000D337                 db    0
.eh_frame:000000000000D338                 db  88h
.eh_frame:000000000000D339                 db 0B8h
.eh_frame:000000000000D33A                 db 0FFh
.eh_frame:000000000000D33B                 db 0FFh
.eh_frame:000000000000D33C                 db  1Eh
.eh_frame:000000000000D33D                 db    1
.eh_frame:000000000000D33E                 db    0
.eh_frame:000000000000D33F                 db    0
.eh_frame:000000000000D340                 db    0
.eh_frame:000000000000D341                 db  42h ; B
.eh_frame:000000000000D342                 db  0Eh
.eh_frame:000000000000D343                 db  10h
.eh_frame:000000000000D344                 db  8Eh
.eh_frame:000000000000D345                 db    2
.eh_frame:000000000000D346                 db  42h ; B
.eh_frame:000000000000D347                 db  0Eh
.eh_frame:000000000000D348                 db  18h
.eh_frame:000000000000D349                 db  8Dh
.eh_frame:000000000000D34A                 db    3
.eh_frame:000000000000D34B                 db  45h ; E
.eh_frame:000000000000D34C                 db  0Eh
.eh_frame:000000000000D34D                 db  20h
.eh_frame:000000000000D34E                 db  8Ch
.eh_frame:000000000000D34F                 db    4
.eh_frame:000000000000D350                 db  41h ; A
.eh_frame:000000000000D351                 db  0Eh
.eh_frame:000000000000D352                 db  28h ; (
.eh_frame:000000000000D353                 db  86h
.eh_frame:000000000000D354                 db    5
.eh_frame:000000000000D355                 db  44h ; D
.eh_frame:000000000000D356                 db  0Eh
.eh_frame:000000000000D357                 db  30h ; 0
.eh_frame:000000000000D358                 db  83h
.eh_frame:000000000000D359                 db    6
.eh_frame:000000000000D35A                 db    2
.eh_frame:000000000000D35B                 db 0A1h
.eh_frame:000000000000D35C                 db  0Ah
.eh_frame:000000000000D35D                 db  0Eh
.eh_frame:000000000000D35E                 db  28h ; (
.eh_frame:000000000000D35F                 db  44h ; D
.eh_frame:000000000000D360                 db  0Eh
.eh_frame:000000000000D361                 db  20h
.eh_frame:000000000000D362                 db  42h ; B
.eh_frame:000000000000D363                 db  0Eh
.eh_frame:000000000000D364                 db  18h
.eh_frame:000000000000D365                 db  42h ; B
.eh_frame:000000000000D366                 db  0Eh
.eh_frame:000000000000D367                 db  10h
.eh_frame:000000000000D368                 db  42h ; B
.eh_frame:000000000000D369                 db  0Eh
.eh_frame:000000000000D36A                 db    8
.eh_frame:000000000000D36B                 db  47h ; G
.eh_frame:000000000000D36C                 db  0Bh
.eh_frame:000000000000D36D                 db  71h ; q
.eh_frame:000000000000D36E                 db  0Ah
.eh_frame:000000000000D36F                 db  0Eh
.eh_frame:000000000000D370                 db  28h ; (
.eh_frame:000000000000D371                 db  41h ; A
.eh_frame:000000000000D372                 db  0Eh
.eh_frame:000000000000D373                 db  20h
.eh_frame:000000000000D374                 db  42h ; B
.eh_frame:000000000000D375                 db  0Eh
.eh_frame:000000000000D376                 db  18h
.eh_frame:000000000000D377                 db  42h ; B
.eh_frame:000000000000D378                 db  0Eh
.eh_frame:000000000000D379                 db  10h
.eh_frame:000000000000D37A                 db  42h ; B
.eh_frame:000000000000D37B                 db  0Eh
.eh_frame:000000000000D37C                 db    8
.eh_frame:000000000000D37D                 db  48h ; H
.eh_frame:000000000000D37E                 db  0Bh
.eh_frame:000000000000D37F                 db  53h ; S
.eh_frame:000000000000D380                 db  0Eh
.eh_frame:000000000000D381                 db  28h ; (
.eh_frame:000000000000D382                 db  44h ; D
.eh_frame:000000000000D383                 db  0Eh
.eh_frame:000000000000D384                 db  20h
.eh_frame:000000000000D385                 db  42h ; B
.eh_frame:000000000000D386                 db  0Eh
.eh_frame:000000000000D387                 db  18h
.eh_frame:000000000000D388                 db  42h ; B
.eh_frame:000000000000D389                 db  0Eh
.eh_frame:000000000000D38A                 db  10h
.eh_frame:000000000000D38B                 db  42h ; B
.eh_frame:000000000000D38C                 db  0Eh
.eh_frame:000000000000D38D                 db    8
.eh_frame:000000000000D38E                 db    0
.eh_frame:000000000000D38F                 db    0
.eh_frame:000000000000D390                 db  10h
.eh_frame:000000000000D391                 db    0
.eh_frame:000000000000D392                 db    0
.eh_frame:000000000000D393                 db    0
.eh_frame:000000000000D394                 db  94h
.eh_frame:000000000000D395                 db  11h
.eh_frame:000000000000D396                 db    0
.eh_frame:000000000000D397                 db    0
.eh_frame:000000000000D398                 db  48h ; H
.eh_frame:000000000000D399                 db 0B9h
.eh_frame:000000000000D39A                 db 0FFh
.eh_frame:000000000000D39B                 db 0FFh
.eh_frame:000000000000D39C                 db  77h ; w
.eh_frame:000000000000D39D                 db    0
.eh_frame:000000000000D39E                 db    0
.eh_frame:000000000000D39F                 db    0
.eh_frame:000000000000D3A0                 db    0
.eh_frame:000000000000D3A1                 db    0
.eh_frame:000000000000D3A2                 db    0
.eh_frame:000000000000D3A3                 db    0
.eh_frame:000000000000D3A4                 db  5Ch ; \
.eh_frame:000000000000D3A5                 db    0
.eh_frame:000000000000D3A6                 db    0
.eh_frame:000000000000D3A7                 db    0
.eh_frame:000000000000D3A8                 db 0A8h
.eh_frame:000000000000D3A9                 db  11h
.eh_frame:000000000000D3AA                 db    0
.eh_frame:000000000000D3AB                 db    0
.eh_frame:000000000000D3AC                 db 0B4h
.eh_frame:000000000000D3AD                 db 0B9h
.eh_frame:000000000000D3AE                 db 0FFh
.eh_frame:000000000000D3AF                 db 0FFh
.eh_frame:000000000000D3B0                 db  40h ; @
.eh_frame:000000000000D3B1                 db    1
.eh_frame:000000000000D3B2                 db    0
.eh_frame:000000000000D3B3                 db    0
.eh_frame:000000000000D3B4                 db    0
.eh_frame:000000000000D3B5                 db  42h ; B
.eh_frame:000000000000D3B6                 db  0Eh
.eh_frame:000000000000D3B7                 db  10h
.eh_frame:000000000000D3B8                 db  8Fh
.eh_frame:000000000000D3B9                 db    2
.eh_frame:000000000000D3BA                 db  42h ; B
.eh_frame:000000000000D3BB                 db  0Eh
.eh_frame:000000000000D3BC                 db  18h
.eh_frame:000000000000D3BD                 db  8Eh
.eh_frame:000000000000D3BE                 db    3
.eh_frame:000000000000D3BF                 db  42h ; B
.eh_frame:000000000000D3C0                 db  0Eh
.eh_frame:000000000000D3C1                 db  20h
.eh_frame:000000000000D3C2                 db  8Dh
.eh_frame:000000000000D3C3                 db    4
.eh_frame:000000000000D3C4                 db  42h ; B
.eh_frame:000000000000D3C5                 db  0Eh
.eh_frame:000000000000D3C6                 db  28h ; (
.eh_frame:000000000000D3C7                 db  8Ch
.eh_frame:000000000000D3C8                 db    5
.eh_frame:000000000000D3C9                 db  41h ; A
.eh_frame:000000000000D3CA                 db  0Eh
.eh_frame:000000000000D3CB                 db  30h ; 0
.eh_frame:000000000000D3CC                 db  86h
.eh_frame:000000000000D3CD                 db    6
.eh_frame:000000000000D3CE                 db  41h ; A
.eh_frame:000000000000D3CF                 db  0Eh
.eh_frame:000000000000D3D0                 db  38h ; 8
.eh_frame:000000000000D3D1                 db  83h
.eh_frame:000000000000D3D2                 db    7
.eh_frame:000000000000D3D3                 db  44h ; D
.eh_frame:000000000000D3D4                 db  0Eh
.eh_frame:000000000000D3D5                 db  40h ; @
.eh_frame:000000000000D3D6                 db    2
.eh_frame:000000000000D3D7                 db 0EEh
.eh_frame:000000000000D3D8                 db  0Ah
.eh_frame:000000000000D3D9                 db  0Eh
.eh_frame:000000000000D3DA                 db  38h ; 8
.eh_frame:000000000000D3DB                 db  46h ; F
.eh_frame:000000000000D3DC                 db  0Eh
.eh_frame:000000000000D3DD                 db  30h ; 0
.eh_frame:000000000000D3DE                 db  41h ; A
.eh_frame:000000000000D3DF                 db  0Eh
.eh_frame:000000000000D3E0                 db  28h ; (
.eh_frame:000000000000D3E1                 db  42h ; B
.eh_frame:000000000000D3E2                 db  0Eh
.eh_frame:000000000000D3E3                 db  20h
.eh_frame:000000000000D3E4                 db  42h ; B
.eh_frame:000000000000D3E5                 db  0Eh
.eh_frame:000000000000D3E6                 db  18h
.eh_frame:000000000000D3E7                 db  42h ; B
.eh_frame:000000000000D3E8                 db  0Eh
.eh_frame:000000000000D3E9                 db  10h
.eh_frame:000000000000D3EA                 db  42h ; B
.eh_frame:000000000000D3EB                 db  0Eh
.eh_frame:000000000000D3EC                 db    8
.eh_frame:000000000000D3ED                 db  45h ; E
.eh_frame:000000000000D3EE                 db  0Bh
.eh_frame:000000000000D3EF                 db  63h ; c
.eh_frame:000000000000D3F0                 db  0Eh
.eh_frame:000000000000D3F1                 db  38h ; 8
.eh_frame:000000000000D3F2                 db  43h ; C
.eh_frame:000000000000D3F3                 db  0Eh
.eh_frame:000000000000D3F4                 db  30h ; 0
.eh_frame:000000000000D3F5                 db  41h ; A
.eh_frame:000000000000D3F6                 db  0Eh
.eh_frame:000000000000D3F7                 db  28h ; (
.eh_frame:000000000000D3F8                 db  42h ; B
.eh_frame:000000000000D3F9                 db  0Eh
.eh_frame:000000000000D3FA                 db  20h
.eh_frame:000000000000D3FB                 db  42h ; B
.eh_frame:000000000000D3FC                 db  0Eh
.eh_frame:000000000000D3FD                 db  18h
.eh_frame:000000000000D3FE                 db  42h ; B
.eh_frame:000000000000D3FF                 db  0Eh
.eh_frame:000000000000D400                 db  10h
.eh_frame:000000000000D401                 db  42h ; B
.eh_frame:000000000000D402                 db  0Eh
.eh_frame:000000000000D403                 db    8
.eh_frame:000000000000D404                 db  10h
.eh_frame:000000000000D405                 db    0
.eh_frame:000000000000D406                 db    0
.eh_frame:000000000000D407                 db    0
.eh_frame:000000000000D408                 db    8
.eh_frame:000000000000D409                 db  12h
.eh_frame:000000000000D40A                 db    0
.eh_frame:000000000000D40B                 db    0
.eh_frame:000000000000D40C                 db  94h
.eh_frame:000000000000D40D                 db 0BAh
.eh_frame:000000000000D40E                 db 0FFh
.eh_frame:000000000000D40F                 db 0FFh
.eh_frame:000000000000D410                 db    5
.eh_frame:000000000000D411                 db    0
.eh_frame:000000000000D412                 db    0
.eh_frame:000000000000D413                 db    0
.eh_frame:000000000000D414                 db    0
.eh_frame:000000000000D415                 db    0
.eh_frame:000000000000D416                 db    0
.eh_frame:000000000000D417                 db    0
.eh_frame:000000000000D418                 db  10h
.eh_frame:000000000000D419                 db    0
.eh_frame:000000000000D41A                 db    0
.eh_frame:000000000000D41B                 db    0
.eh_frame:000000000000D41C                 db  1Ch
.eh_frame:000000000000D41D                 db  12h
.eh_frame:000000000000D41E                 db    0
.eh_frame:000000000000D41F                 db    0
.eh_frame:000000000000D420                 db  90h
.eh_frame:000000000000D421                 db 0BAh
.eh_frame:000000000000D422                 db 0FFh
.eh_frame:000000000000D423                 db 0FFh
.eh_frame:000000000000D424                 db    5
.eh_frame:000000000000D425                 db    0
.eh_frame:000000000000D426                 db    0
.eh_frame:000000000000D427                 db    0
.eh_frame:000000000000D428                 db    0
.eh_frame:000000000000D429                 db    0
.eh_frame:000000000000D42A                 db    0
.eh_frame:000000000000D42B                 db    0
.eh_frame:000000000000D42C                 db  10h
.eh_frame:000000000000D42D                 db    0
.eh_frame:000000000000D42E                 db    0
.eh_frame:000000000000D42F                 db    0
.eh_frame:000000000000D430                 db  30h ; 0
.eh_frame:000000000000D431                 db  12h
.eh_frame:000000000000D432                 db    0
.eh_frame:000000000000D433                 db    0
.eh_frame:000000000000D434                 db  8Ch
.eh_frame:000000000000D435                 db 0BAh
.eh_frame:000000000000D436                 db 0FFh
.eh_frame:000000000000D437                 db 0FFh
.eh_frame:000000000000D438                 db    5
.eh_frame:000000000000D439                 db    0
.eh_frame:000000000000D43A                 db    0
.eh_frame:000000000000D43B                 db    0
.eh_frame:000000000000D43C                 db    0
.eh_frame:000000000000D43D                 db    0
.eh_frame:000000000000D43E                 db    0
.eh_frame:000000000000D43F                 db    0
.eh_frame:000000000000D440                 db  10h
.eh_frame:000000000000D441                 db    0
.eh_frame:000000000000D442                 db    0
.eh_frame:000000000000D443                 db    0
.eh_frame:000000000000D444                 db  44h ; D
.eh_frame:000000000000D445                 db  12h
.eh_frame:000000000000D446                 db    0
.eh_frame:000000000000D447                 db    0
.eh_frame:000000000000D448                 db  88h
.eh_frame:000000000000D449                 db 0BAh
.eh_frame:000000000000D44A                 db 0FFh
.eh_frame:000000000000D44B                 db 0FFh
.eh_frame:000000000000D44C                 db  49h ; I
.eh_frame:000000000000D44D                 db    0
.eh_frame:000000000000D44E                 db    0
.eh_frame:000000000000D44F                 db    0
.eh_frame:000000000000D450                 db    0
.eh_frame:000000000000D451                 db    0
.eh_frame:000000000000D452                 db    0
.eh_frame:000000000000D453                 db    0
.eh_frame:000000000000D454                 db  10h
.eh_frame:000000000000D455                 db    0
.eh_frame:000000000000D456                 db    0
.eh_frame:000000000000D457                 db    0
.eh_frame:000000000000D458                 db  58h ; X
.eh_frame:000000000000D459                 db  12h
.eh_frame:000000000000D45A                 db    0
.eh_frame:000000000000D45B                 db    0
.eh_frame:000000000000D45C                 db 0C4h
.eh_frame:000000000000D45D                 db 0BAh
.eh_frame:000000000000D45E                 db 0FFh
.eh_frame:000000000000D45F                 db 0FFh
.eh_frame:000000000000D460                 db  58h ; X
.eh_frame:000000000000D461                 db    0
.eh_frame:000000000000D462                 db    0
.eh_frame:000000000000D463                 db    0
.eh_frame:000000000000D464                 db    0
.eh_frame:000000000000D465                 db    0
.eh_frame:000000000000D466                 db    0
.eh_frame:000000000000D467                 db    0
.eh_frame:000000000000D468                 db  38h ; 8
.eh_frame:000000000000D469                 db    0
.eh_frame:000000000000D46A                 db    0
.eh_frame:000000000000D46B                 db    0
.eh_frame:000000000000D46C                 db  6Ch ; l
.eh_frame:000000000000D46D                 db  12h
.eh_frame:000000000000D46E                 db    0
.eh_frame:000000000000D46F                 db    0
.eh_frame:000000000000D470                 db  10h
.eh_frame:000000000000D471                 db 0BBh
.eh_frame:000000000000D472                 db 0FFh
.eh_frame:000000000000D473                 db 0FFh
.eh_frame:000000000000D474                 db  47h ; G
.eh_frame:000000000000D475                 db    1
.eh_frame:000000000000D476                 db    0
.eh_frame:000000000000D477                 db    0
.eh_frame:000000000000D478                 db    0
.eh_frame:000000000000D479                 db  42h ; B
.eh_frame:000000000000D47A                 db  0Eh
.eh_frame:000000000000D47B                 db  10h
.eh_frame:000000000000D47C                 db  8Dh
.eh_frame:000000000000D47D                 db    2
.eh_frame:000000000000D47E                 db  42h ; B
.eh_frame:000000000000D47F                 db  0Eh
.eh_frame:000000000000D480                 db  18h
.eh_frame:000000000000D481                 db  8Ch
.eh_frame:000000000000D482                 db    3
.eh_frame:000000000000D483                 db  44h ; D
.eh_frame:000000000000D484                 db  0Eh
.eh_frame:000000000000D485                 db  20h
.eh_frame:000000000000D486                 db  86h
.eh_frame:000000000000D487                 db    4
.eh_frame:000000000000D488                 db  41h ; A
.eh_frame:000000000000D489                 db  0Eh
.eh_frame:000000000000D48A                 db  28h ; (
.eh_frame:000000000000D48B                 db  83h
.eh_frame:000000000000D48C                 db    5
.eh_frame:000000000000D48D                 db  46h ; F
.eh_frame:000000000000D48E                 db  0Eh
.eh_frame:000000000000D48F                 db  30h ; 0
.eh_frame:000000000000D490                 db    2
.eh_frame:000000000000D491                 db 0CDh
.eh_frame:000000000000D492                 db  0Ah
.eh_frame:000000000000D493                 db  0Eh
.eh_frame:000000000000D494                 db  28h ; (
.eh_frame:000000000000D495                 db  47h ; G
.eh_frame:000000000000D496                 db  0Eh
.eh_frame:000000000000D497                 db  20h
.eh_frame:000000000000D498                 db  41h ; A
.eh_frame:000000000000D499                 db  0Eh
.eh_frame:000000000000D49A                 db  18h
.eh_frame:000000000000D49B                 db  42h ; B
.eh_frame:000000000000D49C                 db  0Eh
.eh_frame:000000000000D49D                 db  10h
.eh_frame:000000000000D49E                 db  42h ; B
.eh_frame:000000000000D49F                 db  0Eh
.eh_frame:000000000000D4A0                 db    8
.eh_frame:000000000000D4A1                 db  58h ; X
.eh_frame:000000000000D4A2                 db  0Bh
.eh_frame:000000000000D4A3                 db    0
.eh_frame:000000000000D4A4                 db  34h ; 4
.eh_frame:000000000000D4A5                 db    0
.eh_frame:000000000000D4A6                 db    0
.eh_frame:000000000000D4A7                 db    0
.eh_frame:000000000000D4A8                 db 0A8h
.eh_frame:000000000000D4A9                 db  12h
.eh_frame:000000000000D4AA                 db    0
.eh_frame:000000000000D4AB                 db    0
.eh_frame:000000000000D4AC                 db  24h ; $
.eh_frame:000000000000D4AD                 db 0BCh
.eh_frame:000000000000D4AE                 db 0FFh
.eh_frame:000000000000D4AF                 db 0FFh
.eh_frame:000000000000D4B0                 db  5Bh ; [
.eh_frame:000000000000D4B1                 db    0
.eh_frame:000000000000D4B2                 db    0
.eh_frame:000000000000D4B3                 db    0
.eh_frame:000000000000D4B4                 db    0
.eh_frame:000000000000D4B5                 db  42h ; B
.eh_frame:000000000000D4B6                 db  0Eh
.eh_frame:000000000000D4B7                 db  10h
.eh_frame:000000000000D4B8                 db  8Ch
.eh_frame:000000000000D4B9                 db    2
.eh_frame:000000000000D4BA                 db  41h ; A
.eh_frame:000000000000D4BB                 db  0Eh
.eh_frame:000000000000D4BC                 db  18h
.eh_frame:000000000000D4BD                 db  86h
.eh_frame:000000000000D4BE                 db    3
.eh_frame:000000000000D4BF                 db  44h ; D
.eh_frame:000000000000D4C0                 db  0Eh
.eh_frame:000000000000D4C1                 db  20h
.eh_frame:000000000000D4C2                 db  83h
.eh_frame:000000000000D4C3                 db    4
.eh_frame:000000000000D4C4                 db  79h ; y
.eh_frame:000000000000D4C5                 db  0Ah
.eh_frame:000000000000D4C6                 db  0Eh
.eh_frame:000000000000D4C7                 db  18h
.eh_frame:000000000000D4C8                 db  44h ; D
.eh_frame:000000000000D4C9                 db  0Eh
.eh_frame:000000000000D4CA                 db  10h
.eh_frame:000000000000D4CB                 db  42h ; B
.eh_frame:000000000000D4CC                 db  0Eh
.eh_frame:000000000000D4CD                 db    8
.eh_frame:000000000000D4CE                 db  4Ah ; J
.eh_frame:000000000000D4CF                 db  0Bh
.eh_frame:000000000000D4D0                 db  44h ; D
.eh_frame:000000000000D4D1                 db  0Eh
.eh_frame:000000000000D4D2                 db  18h
.eh_frame:000000000000D4D3                 db  41h ; A
.eh_frame:000000000000D4D4                 db  0Eh
.eh_frame:000000000000D4D5                 db  10h
.eh_frame:000000000000D4D6                 db  45h ; E
.eh_frame:000000000000D4D7                 db  0Eh
.eh_frame:000000000000D4D8                 db    8
.eh_frame:000000000000D4D9                 db    0
.eh_frame:000000000000D4DA                 db    0
.eh_frame:000000000000D4DB                 db    0
.eh_frame:000000000000D4DC                 db  10h
.eh_frame:000000000000D4DD                 db    0
.eh_frame:000000000000D4DE                 db    0
.eh_frame:000000000000D4DF                 db    0
.eh_frame:000000000000D4E0                 db 0E0h
.eh_frame:000000000000D4E1                 db  12h
.eh_frame:000000000000D4E2                 db    0
.eh_frame:000000000000D4E3                 db    0
.eh_frame:000000000000D4E4                 db  4Ch ; L
.eh_frame:000000000000D4E5                 db 0BCh
.eh_frame:000000000000D4E6                 db 0FFh
.eh_frame:000000000000D4E7                 db 0FFh
.eh_frame:000000000000D4E8                 db  41h ; A
.eh_frame:000000000000D4E9                 db    0
.eh_frame:000000000000D4EA                 db    0
.eh_frame:000000000000D4EB                 db    0
.eh_frame:000000000000D4EC                 db    0
.eh_frame:000000000000D4ED                 db  7Ch ; |
.eh_frame:000000000000D4EE                 db  0Eh
.eh_frame:000000000000D4EF                 db  10h
.eh_frame:000000000000D4F0                 db  30h ; 0
.eh_frame:000000000000D4F1                 db    0
.eh_frame:000000000000D4F2                 db    0
.eh_frame:000000000000D4F3                 db    0
.eh_frame:000000000000D4F4                 db 0F4h
.eh_frame:000000000000D4F5                 db  12h
.eh_frame:000000000000D4F6                 db    0
.eh_frame:000000000000D4F7                 db    0
.eh_frame:000000000000D4F8                 db  88h
.eh_frame:000000000000D4F9                 db 0BCh
.eh_frame:000000000000D4FA                 db 0FFh
.eh_frame:000000000000D4FB                 db 0FFh
.eh_frame:000000000000D4FC                 db  72h ; r
.eh_frame:000000000000D4FD                 db    0
.eh_frame:000000000000D4FE                 db    0
.eh_frame:000000000000D4FF                 db    0
.eh_frame:000000000000D500                 db    0
.eh_frame:000000000000D501                 db  41h ; A
.eh_frame:000000000000D502                 db  0Eh
.eh_frame:000000000000D503                 db  10h
.eh_frame:000000000000D504                 db  86h
.eh_frame:000000000000D505                 db    2
.eh_frame:000000000000D506                 db  41h ; A
.eh_frame:000000000000D507                 db  0Eh
.eh_frame:000000000000D508                 db  18h
.eh_frame:000000000000D509                 db  83h
.eh_frame:000000000000D50A                 db    3
.eh_frame:000000000000D50B                 db  4Ah ; J
.eh_frame:000000000000D50C                 db  0Eh
.eh_frame:000000000000D50D                 db  20h
.eh_frame:000000000000D50E                 db    2
.eh_frame:000000000000D50F                 db  53h ; S
.eh_frame:000000000000D510                 db  0Ah
.eh_frame:000000000000D511                 db  0Eh
.eh_frame:000000000000D512                 db  18h
.eh_frame:000000000000D513                 db  41h ; A
.eh_frame:000000000000D514                 db  0Eh
.eh_frame:000000000000D515                 db  10h
.eh_frame:000000000000D516                 db  41h ; A
.eh_frame:000000000000D517                 db  0Eh
.eh_frame:000000000000D518                 db    8
.eh_frame:000000000000D519                 db  47h ; G
.eh_frame:000000000000D51A                 db  0Bh
.eh_frame:000000000000D51B                 db  47h ; G
.eh_frame:000000000000D51C                 db  0Eh
.eh_frame:000000000000D51D                 db  18h
.eh_frame:000000000000D51E                 db  41h ; A
.eh_frame:000000000000D51F                 db  0Eh
.eh_frame:000000000000D520                 db  10h
.eh_frame:000000000000D521                 db  41h ; A
.eh_frame:000000000000D522                 db  0Eh
.eh_frame:000000000000D523                 db    8
.eh_frame:000000000000D524                 db  10h
.eh_frame:000000000000D525                 db    0
.eh_frame:000000000000D526                 db    0
.eh_frame:000000000000D527                 db    0
.eh_frame:000000000000D528                 db  28h ; (
.eh_frame:000000000000D529                 db  13h
.eh_frame:000000000000D52A                 db    0
.eh_frame:000000000000D52B                 db    0
.eh_frame:000000000000D52C                 db 0D4h
.eh_frame:000000000000D52D                 db 0BCh
.eh_frame:000000000000D52E                 db 0FFh
.eh_frame:000000000000D52F                 db 0FFh
.eh_frame:000000000000D530                 db  65h ; e
.eh_frame:000000000000D531                 db    0
.eh_frame:000000000000D532                 db    0
.eh_frame:000000000000D533                 db    0
.eh_frame:000000000000D534                 db    0
.eh_frame:000000000000D535                 db    0
.eh_frame:000000000000D536                 db    0
.eh_frame:000000000000D537                 db    0
.eh_frame:000000000000D538                 db  48h ; H
.eh_frame:000000000000D539                 db    0
.eh_frame:000000000000D53A                 db    0
.eh_frame:000000000000D53B                 db    0
.eh_frame:000000000000D53C                 db  3Ch ; <
.eh_frame:000000000000D53D                 db  13h
.eh_frame:000000000000D53E                 db    0
.eh_frame:000000000000D53F                 db    0
.eh_frame:000000000000D540                 db  30h ; 0
.eh_frame:000000000000D541                 db 0BDh
.eh_frame:000000000000D542                 db 0FFh
.eh_frame:000000000000D543                 db 0FFh
.eh_frame:000000000000D544                 db  6Ah ; j
.eh_frame:000000000000D545                 db    0
.eh_frame:000000000000D546                 db    0
.eh_frame:000000000000D547                 db    0
.eh_frame:000000000000D548                 db    0
.eh_frame:000000000000D549                 db  42h ; B
.eh_frame:000000000000D54A                 db  0Eh
.eh_frame:000000000000D54B                 db  10h
.eh_frame:000000000000D54C                 db  8Fh
.eh_frame:000000000000D54D                 db    2
.eh_frame:000000000000D54E                 db  42h ; B
.eh_frame:000000000000D54F                 db  0Eh
.eh_frame:000000000000D550                 db  18h
.eh_frame:000000000000D551                 db  8Eh
.eh_frame:000000000000D552                 db    3
.eh_frame:000000000000D553                 db  42h ; B
.eh_frame:000000000000D554                 db  0Eh
.eh_frame:000000000000D555                 db  20h
.eh_frame:000000000000D556                 db  8Dh
.eh_frame:000000000000D557                 db    4
.eh_frame:000000000000D558                 db  42h ; B
.eh_frame:000000000000D559                 db  0Eh
.eh_frame:000000000000D55A                 db  28h ; (
.eh_frame:000000000000D55B                 db  8Ch
.eh_frame:000000000000D55C                 db    5
.eh_frame:000000000000D55D                 db  41h ; A
.eh_frame:000000000000D55E                 db  0Eh
.eh_frame:000000000000D55F                 db  30h ; 0
.eh_frame:000000000000D560                 db  86h
.eh_frame:000000000000D561                 db    6
.eh_frame:000000000000D562                 db  41h ; A
.eh_frame:000000000000D563                 db  0Eh
.eh_frame:000000000000D564                 db  38h ; 8
.eh_frame:000000000000D565                 db  83h
.eh_frame:000000000000D566                 db    7
.eh_frame:000000000000D567                 db  44h ; D
.eh_frame:000000000000D568                 db  0Eh
.eh_frame:000000000000D569                 db  40h ; @
.eh_frame:000000000000D56A                 db    2
.eh_frame:000000000000D56B                 db  4Ah ; J
.eh_frame:000000000000D56C                 db  0Ah
.eh_frame:000000000000D56D                 db  0Eh
.eh_frame:000000000000D56E                 db  38h ; 8
.eh_frame:000000000000D56F                 db  44h ; D
.eh_frame:000000000000D570                 db  0Eh
.eh_frame:000000000000D571                 db  30h ; 0
.eh_frame:000000000000D572                 db  41h ; A
.eh_frame:000000000000D573                 db  0Eh
.eh_frame:000000000000D574                 db  28h ; (
.eh_frame:000000000000D575                 db  42h ; B
.eh_frame:000000000000D576                 db  0Eh
.eh_frame:000000000000D577                 db  20h
.eh_frame:000000000000D578                 db  42h ; B
.eh_frame:000000000000D579                 db  0Eh
.eh_frame:000000000000D57A                 db  18h
.eh_frame:000000000000D57B                 db  42h ; B
.eh_frame:000000000000D57C                 db  0Eh
.eh_frame:000000000000D57D                 db  10h
.eh_frame:000000000000D57E                 db  42h ; B
.eh_frame:000000000000D57F                 db  0Eh
.eh_frame:000000000000D580                 db    8
.eh_frame:000000000000D581                 db  41h ; A
.eh_frame:000000000000D582                 db  0Bh
.eh_frame:000000000000D583                 db    0
.eh_frame:000000000000D584                 db  10h
.eh_frame:000000000000D585                 db    0
.eh_frame:000000000000D586                 db    0
.eh_frame:000000000000D587                 db    0
.eh_frame:000000000000D588                 db  88h
.eh_frame:000000000000D589                 db  13h
.eh_frame:000000000000D58A                 db    0
.eh_frame:000000000000D58B                 db    0
.eh_frame:000000000000D58C                 db  54h ; T
.eh_frame:000000000000D58D                 db 0BDh
.eh_frame:000000000000D58E                 db 0FFh
.eh_frame:000000000000D58F                 db 0FFh
.eh_frame:000000000000D590                 db  31h ; 1
.eh_frame:000000000000D591                 db    0
.eh_frame:000000000000D592                 db    0
.eh_frame:000000000000D593                 db    0
.eh_frame:000000000000D594                 db    0
.eh_frame:000000000000D595                 db    0
.eh_frame:000000000000D596                 db    0
.eh_frame:000000000000D597                 db    0
.eh_frame:000000000000D598                 db  10h
.eh_frame:000000000000D599                 db    0
.eh_frame:000000000000D59A                 db    0
.eh_frame:000000000000D59B                 db    0
.eh_frame:000000000000D59C                 db  9Ch
.eh_frame:000000000000D59D                 db  13h
.eh_frame:000000000000D59E                 db    0
.eh_frame:000000000000D59F                 db    0
.eh_frame:000000000000D5A0                 db  80h
.eh_frame:000000000000D5A1                 db 0BDh
.eh_frame:000000000000D5A2                 db 0FFh
.eh_frame:000000000000D5A3                 db 0FFh
.eh_frame:000000000000D5A4                 db  20h
.eh_frame:000000000000D5A5                 db    0
.eh_frame:000000000000D5A6                 db    0
.eh_frame:000000000000D5A7                 db    0
.eh_frame:000000000000D5A8                 db    0
.eh_frame:000000000000D5A9                 db    0
.eh_frame:000000000000D5AA                 db    0
.eh_frame:000000000000D5AB                 db    0
.eh_frame:000000000000D5AC                 db  48h ; H
.eh_frame:000000000000D5AD                 db    0
.eh_frame:000000000000D5AE                 db    0
.eh_frame:000000000000D5AF                 db    0
.eh_frame:000000000000D5B0                 db 0B0h
.eh_frame:000000000000D5B1                 db  13h
.eh_frame:000000000000D5B2                 db    0
.eh_frame:000000000000D5B3                 db    0
.eh_frame:000000000000D5B4                 db  8Ch
.eh_frame:000000000000D5B5                 db 0BDh
.eh_frame:000000000000D5B6                 db 0FFh
.eh_frame:000000000000D5B7                 db 0FFh
.eh_frame:000000000000D5B8                 db 0B4h
.eh_frame:000000000000D5B9                 db    1
.eh_frame:000000000000D5BA                 db    0
.eh_frame:000000000000D5BB                 db    0
.eh_frame:000000000000D5BC                 db    0
.eh_frame:000000000000D5BD                 db  42h ; B
.eh_frame:000000000000D5BE                 db  0Eh
.eh_frame:000000000000D5BF                 db  10h
.eh_frame:000000000000D5C0                 db  8Fh
.eh_frame:000000000000D5C1                 db    2
.eh_frame:000000000000D5C2                 db  42h ; B
.eh_frame:000000000000D5C3                 db  0Eh
.eh_frame:000000000000D5C4                 db  18h
.eh_frame:000000000000D5C5                 db  8Eh
.eh_frame:000000000000D5C6                 db    3
.eh_frame:000000000000D5C7                 db  49h ; I
.eh_frame:000000000000D5C8                 db  0Eh
.eh_frame:000000000000D5C9                 db  20h
.eh_frame:000000000000D5CA                 db  8Dh
.eh_frame:000000000000D5CB                 db    4
.eh_frame:000000000000D5CC                 db  42h ; B
.eh_frame:000000000000D5CD                 db  0Eh
.eh_frame:000000000000D5CE                 db  28h ; (
.eh_frame:000000000000D5CF                 db  8Ch
.eh_frame:000000000000D5D0                 db    5
.eh_frame:000000000000D5D1                 db  44h ; D
.eh_frame:000000000000D5D2                 db  0Eh
.eh_frame:000000000000D5D3                 db  30h ; 0
.eh_frame:000000000000D5D4                 db  86h
.eh_frame:000000000000D5D5                 db    6
.eh_frame:000000000000D5D6                 db  41h ; A
.eh_frame:000000000000D5D7                 db  0Eh
.eh_frame:000000000000D5D8                 db  38h ; 8
.eh_frame:000000000000D5D9                 db  83h
.eh_frame:000000000000D5DA                 db    7
.eh_frame:000000000000D5DB                 db  52h ; R
.eh_frame:000000000000D5DC                 db  0Eh
.eh_frame:000000000000D5DD                 db  40h ; @
.eh_frame:000000000000D5DE                 db    2
.eh_frame:000000000000D5DF                 db 0D8h
.eh_frame:000000000000D5E0                 db  0Ah
.eh_frame:000000000000D5E1                 db  0Eh
.eh_frame:000000000000D5E2                 db  38h ; 8
.eh_frame:000000000000D5E3                 db  44h ; D
.eh_frame:000000000000D5E4                 db  0Eh
.eh_frame:000000000000D5E5                 db  30h ; 0
.eh_frame:000000000000D5E6                 db  41h ; A
.eh_frame:000000000000D5E7                 db  0Eh
.eh_frame:000000000000D5E8                 db  28h ; (
.eh_frame:000000000000D5E9                 db  42h ; B
.eh_frame:000000000000D5EA                 db  0Eh
.eh_frame:000000000000D5EB                 db  20h
.eh_frame:000000000000D5EC                 db  42h ; B
.eh_frame:000000000000D5ED                 db  0Eh
.eh_frame:000000000000D5EE                 db  18h
.eh_frame:000000000000D5EF                 db  42h ; B
.eh_frame:000000000000D5F0                 db  0Eh
.eh_frame:000000000000D5F1                 db  10h
.eh_frame:000000000000D5F2                 db  42h ; B
.eh_frame:000000000000D5F3                 db  0Eh
.eh_frame:000000000000D5F4                 db    8
.eh_frame:000000000000D5F5                 db  45h ; E
.eh_frame:000000000000D5F6                 db  0Bh
.eh_frame:000000000000D5F7                 db    0
.eh_frame:000000000000D5F8                 db  28h ; (
.eh_frame:000000000000D5F9                 db    0
.eh_frame:000000000000D5FA                 db    0
.eh_frame:000000000000D5FB                 db    0
.eh_frame:000000000000D5FC                 db 0FCh
.eh_frame:000000000000D5FD                 db  13h
.eh_frame:000000000000D5FE                 db    0
.eh_frame:000000000000D5FF                 db    0
.eh_frame:000000000000D600                 db    0
.eh_frame:000000000000D601                 db 0BFh
.eh_frame:000000000000D602                 db 0FFh
.eh_frame:000000000000D603                 db 0FFh
.eh_frame:000000000000D604                 db  90h
.eh_frame:000000000000D605                 db    0
.eh_frame:000000000000D606                 db    0
.eh_frame:000000000000D607                 db    0
.eh_frame:000000000000D608                 db    0
.eh_frame:000000000000D609                 db  42h ; B
.eh_frame:000000000000D60A                 db  0Eh
.eh_frame:000000000000D60B                 db  10h
.eh_frame:000000000000D60C                 db  8Ch
.eh_frame:000000000000D60D                 db    2
.eh_frame:000000000000D60E                 db  41h ; A
.eh_frame:000000000000D60F                 db  0Eh
.eh_frame:000000000000D610                 db  18h
.eh_frame:000000000000D611                 db  86h
.eh_frame:000000000000D612                 db    3
.eh_frame:000000000000D613                 db  44h ; D
.eh_frame:000000000000D614                 db  0Eh
.eh_frame:000000000000D615                 db  20h
.eh_frame:000000000000D616                 db  83h
.eh_frame:000000000000D617                 db    4
.eh_frame:000000000000D618                 db    2
.eh_frame:000000000000D619                 db  85h
.eh_frame:000000000000D61A                 db  0Eh
.eh_frame:000000000000D61B                 db  18h
.eh_frame:000000000000D61C                 db  41h ; A
.eh_frame:000000000000D61D                 db  0Eh
.eh_frame:000000000000D61E                 db  10h
.eh_frame:000000000000D61F                 db  42h ; B
.eh_frame:000000000000D620                 db  0Eh
.eh_frame:000000000000D621                 db    8
.eh_frame:000000000000D622                 db    0
.eh_frame:000000000000D623                 db    0
.eh_frame:000000000000D624                 db  28h ; (
.eh_frame:000000000000D625                 db    0
.eh_frame:000000000000D626                 db    0
.eh_frame:000000000000D627                 db    0
.eh_frame:000000000000D628                 db  28h ; (
.eh_frame:000000000000D629                 db  14h
.eh_frame:000000000000D62A                 db    0
.eh_frame:000000000000D62B                 db    0
.eh_frame:000000000000D62C                 db  64h ; d
.eh_frame:000000000000D62D                 db 0BFh
.eh_frame:000000000000D62E                 db 0FFh
.eh_frame:000000000000D62F                 db 0FFh
.eh_frame:000000000000D630                 db 0D6h
.eh_frame:000000000000D631                 db    0
.eh_frame:000000000000D632                 db    0
.eh_frame:000000000000D633                 db    0
.eh_frame:000000000000D634                 db    0
.eh_frame:000000000000D635                 db  42h ; B
.eh_frame:000000000000D636                 db  0Eh
.eh_frame:000000000000D637                 db  10h
.eh_frame:000000000000D638                 db  8Ch
.eh_frame:000000000000D639                 db    2
.eh_frame:000000000000D63A                 db  41h ; A
.eh_frame:000000000000D63B                 db  0Eh
.eh_frame:000000000000D63C                 db  18h
.eh_frame:000000000000D63D                 db  86h
.eh_frame:000000000000D63E                 db    3
.eh_frame:000000000000D63F                 db  44h ; D
.eh_frame:000000000000D640                 db  0Eh
.eh_frame:000000000000D641                 db  20h
.eh_frame:000000000000D642                 db  83h
.eh_frame:000000000000D643                 db    4
.eh_frame:000000000000D644                 db    2
.eh_frame:000000000000D645                 db 0C4h
.eh_frame:000000000000D646                 db  0Eh
.eh_frame:000000000000D647                 db  18h
.eh_frame:000000000000D648                 db  44h ; D
.eh_frame:000000000000D649                 db  0Eh
.eh_frame:000000000000D64A                 db  10h
.eh_frame:000000000000D64B                 db  42h ; B
.eh_frame:000000000000D64C                 db  0Eh
.eh_frame:000000000000D64D                 db    8
.eh_frame:000000000000D64E                 db    0
.eh_frame:000000000000D64F                 db    0
.eh_frame:000000000000D650                 db  34h ; 4
.eh_frame:000000000000D651                 db    0
.eh_frame:000000000000D652                 db    0
.eh_frame:000000000000D653                 db    0
.eh_frame:000000000000D654                 db  54h ; T
.eh_frame:000000000000D655                 db  14h
.eh_frame:000000000000D656                 db    0
.eh_frame:000000000000D657                 db    0
.eh_frame:000000000000D658                 db  18h
.eh_frame:000000000000D659                 db 0C0h
.eh_frame:000000000000D65A                 db 0FFh
.eh_frame:000000000000D65B                 db 0FFh
.eh_frame:000000000000D65C                 db  3Eh ; >
.eh_frame:000000000000D65D                 db    2
.eh_frame:000000000000D65E                 db    0
.eh_frame:000000000000D65F                 db    0
.eh_frame:000000000000D660                 db    0
.eh_frame:000000000000D661                 db  42h ; B
.eh_frame:000000000000D662                 db  0Eh
.eh_frame:000000000000D663                 db  10h
.eh_frame:000000000000D664                 db  8Ch
.eh_frame:000000000000D665                 db    2
.eh_frame:000000000000D666                 db  41h ; A
.eh_frame:000000000000D667                 db  0Eh
.eh_frame:000000000000D668                 db  18h
.eh_frame:000000000000D669                 db  86h
.eh_frame:000000000000D66A                 db    3
.eh_frame:000000000000D66B                 db  44h ; D
.eh_frame:000000000000D66C                 db  0Eh
.eh_frame:000000000000D66D                 db  20h
.eh_frame:000000000000D66E                 db  83h
.eh_frame:000000000000D66F                 db    4
.eh_frame:000000000000D670                 db  44h ; D
.eh_frame:000000000000D671                 db  0Eh
.eh_frame:000000000000D672                 db  80h
.eh_frame:000000000000D673                 db    1
.eh_frame:000000000000D674                 db    3
.eh_frame:000000000000D675                 db  91h
.eh_frame:000000000000D676                 db    1
.eh_frame:000000000000D677                 db  0Ah
.eh_frame:000000000000D678                 db  0Eh
.eh_frame:000000000000D679                 db  20h
.eh_frame:000000000000D67A                 db  41h ; A
.eh_frame:000000000000D67B                 db  0Eh
.eh_frame:000000000000D67C                 db  18h
.eh_frame:000000000000D67D                 db  41h ; A
.eh_frame:000000000000D67E                 db  0Eh
.eh_frame:000000000000D67F                 db  10h
.eh_frame:000000000000D680                 db  42h ; B
.eh_frame:000000000000D681                 db  0Eh
.eh_frame:000000000000D682                 db    8
.eh_frame:000000000000D683                 db  48h ; H
.eh_frame:000000000000D684                 db  0Bh
.eh_frame:000000000000D685                 db    0
.eh_frame:000000000000D686                 db    0
.eh_frame:000000000000D687                 db    0
.eh_frame:000000000000D688                 db  38h ; 8
.eh_frame:000000000000D689                 db    0
.eh_frame:000000000000D68A                 db    0
.eh_frame:000000000000D68B                 db    0
.eh_frame:000000000000D68C                 db  8Ch
.eh_frame:000000000000D68D                 db  14h
.eh_frame:000000000000D68E                 db    0
.eh_frame:000000000000D68F                 db    0
.eh_frame:000000000000D690                 db  20h
.eh_frame:000000000000D691                 db 0C2h
.eh_frame:000000000000D692                 db 0FFh
.eh_frame:000000000000D693                 db 0FFh
.eh_frame:000000000000D694                 db  84h
.eh_frame:000000000000D695                 db    2
.eh_frame:000000000000D696                 db    0
.eh_frame:000000000000D697                 db    0
.eh_frame:000000000000D698                 db    0
.eh_frame:000000000000D699                 db  42h ; B
.eh_frame:000000000000D69A                 db  0Eh
.eh_frame:000000000000D69B                 db  10h
.eh_frame:000000000000D69C                 db  8Dh
.eh_frame:000000000000D69D                 db    2
.eh_frame:000000000000D69E                 db  42h ; B
.eh_frame:000000000000D69F                 db  0Eh
.eh_frame:000000000000D6A0                 db  18h
.eh_frame:000000000000D6A1                 db  8Ch
.eh_frame:000000000000D6A2                 db    3
.eh_frame:000000000000D6A3                 db  41h ; A
.eh_frame:000000000000D6A4                 db  0Eh
.eh_frame:000000000000D6A5                 db  20h
.eh_frame:000000000000D6A6                 db  86h
.eh_frame:000000000000D6A7                 db    4
.eh_frame:000000000000D6A8                 db  41h ; A
.eh_frame:000000000000D6A9                 db  0Eh
.eh_frame:000000000000D6AA                 db  28h ; (
.eh_frame:000000000000D6AB                 db  83h
.eh_frame:000000000000D6AC                 db    5
.eh_frame:000000000000D6AD                 db  44h ; D
.eh_frame:000000000000D6AE                 db  0Eh
.eh_frame:000000000000D6AF                 db  40h ; @
.eh_frame:000000000000D6B0                 db    2
.eh_frame:000000000000D6B1                 db  5Ah ; Z
.eh_frame:000000000000D6B2                 db  0Ah
.eh_frame:000000000000D6B3                 db  0Eh
.eh_frame:000000000000D6B4                 db  28h ; (
.eh_frame:000000000000D6B5                 db  41h ; A
.eh_frame:000000000000D6B6                 db  0Eh
.eh_frame:000000000000D6B7                 db  20h
.eh_frame:000000000000D6B8                 db  41h ; A
.eh_frame:000000000000D6B9                 db  0Eh
.eh_frame:000000000000D6BA                 db  18h
.eh_frame:000000000000D6BB                 db  42h ; B
.eh_frame:000000000000D6BC                 db  0Eh
.eh_frame:000000000000D6BD                 db  10h
.eh_frame:000000000000D6BE                 db  42h ; B
.eh_frame:000000000000D6BF                 db  0Eh
.eh_frame:000000000000D6C0                 db    8
.eh_frame:000000000000D6C1                 db  46h ; F
.eh_frame:000000000000D6C2                 db  0Bh
.eh_frame:000000000000D6C3                 db    0
.eh_frame:000000000000D6C4                 db  20h
.eh_frame:000000000000D6C5                 db    0
.eh_frame:000000000000D6C6                 db    0
.eh_frame:000000000000D6C7                 db    0
.eh_frame:000000000000D6C8                 db 0C8h
.eh_frame:000000000000D6C9                 db  14h
.eh_frame:000000000000D6CA                 db    0
.eh_frame:000000000000D6CB                 db    0
.eh_frame:000000000000D6CC                 db  74h ; t
.eh_frame:000000000000D6CD                 db 0C4h
.eh_frame:000000000000D6CE                 db 0FFh
.eh_frame:000000000000D6CF                 db 0FFh
.eh_frame:000000000000D6D0                 db  59h ; Y
.eh_frame:000000000000D6D1                 db    0
.eh_frame:000000000000D6D2                 db    0
.eh_frame:000000000000D6D3                 db    0
.eh_frame:000000000000D6D4                 db    0
.eh_frame:000000000000D6D5                 db  41h ; A
.eh_frame:000000000000D6D6                 db  0Eh
.eh_frame:000000000000D6D7                 db  10h
.eh_frame:000000000000D6D8                 db  83h
.eh_frame:000000000000D6D9                 db    2
.eh_frame:000000000000D6DA                 db  47h ; G
.eh_frame:000000000000D6DB                 db  0Eh
.eh_frame:000000000000D6DC                 db  20h
.eh_frame:000000000000D6DD                 db  7Ch ; |
.eh_frame:000000000000D6DE                 db  0Ah
.eh_frame:000000000000D6DF                 db  0Eh
.eh_frame:000000000000D6E0                 db  10h
.eh_frame:000000000000D6E1                 db  41h ; A
.eh_frame:000000000000D6E2                 db  0Eh
.eh_frame:000000000000D6E3                 db    8
.eh_frame:000000000000D6E4                 db  4Bh ; K
.eh_frame:000000000000D6E5                 db  0Bh
.eh_frame:000000000000D6E6                 db    0
.eh_frame:000000000000D6E7                 db    0
.eh_frame:000000000000D6E8                 db  34h ; 4
.eh_frame:000000000000D6E9                 db    0
.eh_frame:000000000000D6EA                 db    0
.eh_frame:000000000000D6EB                 db    0
.eh_frame:000000000000D6EC                 db 0ECh
.eh_frame:000000000000D6ED                 db  14h
.eh_frame:000000000000D6EE                 db    0
.eh_frame:000000000000D6EF                 db    0
.eh_frame:000000000000D6F0                 db 0B0h
.eh_frame:000000000000D6F1                 db 0C4h
.eh_frame:000000000000D6F2                 db 0FFh
.eh_frame:000000000000D6F3                 db 0FFh
.eh_frame:000000000000D6F4                 db    3
.eh_frame:000000000000D6F5                 db    2
.eh_frame:000000000000D6F6                 db    0
.eh_frame:000000000000D6F7                 db    0
.eh_frame:000000000000D6F8                 db    0
.eh_frame:000000000000D6F9                 db  42h ; B
.eh_frame:000000000000D6FA                 db  0Eh
.eh_frame:000000000000D6FB                 db  10h
.eh_frame:000000000000D6FC                 db  8Ch
.eh_frame:000000000000D6FD                 db    2
.eh_frame:000000000000D6FE                 db  41h ; A
.eh_frame:000000000000D6FF                 db  0Eh
.eh_frame:000000000000D700                 db  18h
.eh_frame:000000000000D701                 db  86h
.eh_frame:000000000000D702                 db    3
.eh_frame:000000000000D703                 db  46h ; F
.eh_frame:000000000000D704                 db  0Eh
.eh_frame:000000000000D705                 db  20h
.eh_frame:000000000000D706                 db  83h
.eh_frame:000000000000D707                 db    4
.eh_frame:000000000000D708                 db  47h ; G
.eh_frame:000000000000D709                 db  0Eh
.eh_frame:000000000000D70A                 db  30h ; 0
.eh_frame:000000000000D70B                 db    2
.eh_frame:000000000000D70C                 db  4Ah ; J
.eh_frame:000000000000D70D                 db  0Ah
.eh_frame:000000000000D70E                 db  0Eh
.eh_frame:000000000000D70F                 db  20h
.eh_frame:000000000000D710                 db  41h ; A
.eh_frame:000000000000D711                 db  0Eh
.eh_frame:000000000000D712                 db  18h
.eh_frame:000000000000D713                 db  41h ; A
.eh_frame:000000000000D714                 db  0Eh
.eh_frame:000000000000D715                 db  10h
.eh_frame:000000000000D716                 db  42h ; B
.eh_frame:000000000000D717                 db  0Eh
.eh_frame:000000000000D718                 db    8
.eh_frame:000000000000D719                 db  42h ; B
.eh_frame:000000000000D71A                 db  0Bh
.eh_frame:000000000000D71B                 db    0
.eh_frame:000000000000D71C                 db    0
.eh_frame:000000000000D71D                 db    0
.eh_frame:000000000000D71E                 db    0
.eh_frame:000000000000D71F                 db    0
.eh_frame:000000000000D720                 db  10h
.eh_frame:000000000000D721                 db    0
.eh_frame:000000000000D722                 db    0
.eh_frame:000000000000D723                 db    0
.eh_frame:000000000000D724                 db  24h ; $
.eh_frame:000000000000D725                 db  15h
.eh_frame:000000000000D726                 db    0
.eh_frame:000000000000D727                 db    0
.eh_frame:000000000000D728                 db  88h
.eh_frame:000000000000D729                 db 0C6h
.eh_frame:000000000000D72A                 db 0FFh
.eh_frame:000000000000D72B                 db 0FFh
.eh_frame:000000000000D72C                 db  1Bh
.eh_frame:000000000000D72D                 db    0
.eh_frame:000000000000D72E                 db    0
.eh_frame:000000000000D72F                 db    0
.eh_frame:000000000000D730                 db    0
.eh_frame:000000000000D731                 db    0
.eh_frame:000000000000D732                 db    0
.eh_frame:000000000000D733                 db    0
.eh_frame:000000000000D734                 db  10h
.eh_frame:000000000000D735                 db    0
.eh_frame:000000000000D736                 db    0
.eh_frame:000000000000D737                 db    0
.eh_frame:000000000000D738                 db  38h ; 8
.eh_frame:000000000000D739                 db  15h
.eh_frame:000000000000D73A                 db    0
.eh_frame:000000000000D73B                 db    0
.eh_frame:000000000000D73C                 db  94h
.eh_frame:000000000000D73D                 db 0C6h
.eh_frame:000000000000D73E                 db 0FFh
.eh_frame:000000000000D73F                 db 0FFh
.eh_frame:000000000000D740                 db    5
.eh_frame:000000000000D741                 db    0
.eh_frame:000000000000D742                 db    0
.eh_frame:000000000000D743                 db    0
.eh_frame:000000000000D744                 db    0
.eh_frame:000000000000D745                 db    0
.eh_frame:000000000000D746                 db    0
.eh_frame:000000000000D747                 db    0
.eh_frame:000000000000D748                 db  10h
.eh_frame:000000000000D749                 db    0
.eh_frame:000000000000D74A                 db    0
.eh_frame:000000000000D74B                 db    0
.eh_frame:000000000000D74C                 db  4Ch ; L
.eh_frame:000000000000D74D                 db  15h
.eh_frame:000000000000D74E                 db    0
.eh_frame:000000000000D74F                 db    0
.eh_frame:000000000000D750                 db  90h
.eh_frame:000000000000D751                 db 0C6h
.eh_frame:000000000000D752                 db 0FFh
.eh_frame:000000000000D753                 db 0FFh
.eh_frame:000000000000D754                 db  35h ; 5
.eh_frame:000000000000D755                 db    0
.eh_frame:000000000000D756                 db    0
.eh_frame:000000000000D757                 db    0
.eh_frame:000000000000D758                 db    0
.eh_frame:000000000000D759                 db    0
.eh_frame:000000000000D75A                 db    0
.eh_frame:000000000000D75B                 db    0
.eh_frame:000000000000D75C                 db  10h
.eh_frame:000000000000D75D                 db    0
.eh_frame:000000000000D75E                 db    0
.eh_frame:000000000000D75F                 db    0
.eh_frame:000000000000D760                 db  60h ; `
.eh_frame:000000000000D761                 db  15h
.eh_frame:000000000000D762                 db    0
.eh_frame:000000000000D763                 db    0
.eh_frame:000000000000D764                 db 0BCh
.eh_frame:000000000000D765                 db 0C6h
.eh_frame:000000000000D766                 db 0FFh
.eh_frame:000000000000D767                 db 0FFh
.eh_frame:000000000000D768                 db  3Eh ; >
.eh_frame:000000000000D769                 db    0
.eh_frame:000000000000D76A                 db    0
.eh_frame:000000000000D76B                 db    0
.eh_frame:000000000000D76C                 db    0
.eh_frame:000000000000D76D                 db  79h ; y
.eh_frame:000000000000D76E                 db  0Eh
.eh_frame:000000000000D76F                 db  10h
.eh_frame:000000000000D770                 db  1Ch
.eh_frame:000000000000D771                 db    0
.eh_frame:000000000000D772                 db    0
.eh_frame:000000000000D773                 db    0
.eh_frame:000000000000D774                 db  74h ; t
.eh_frame:000000000000D775                 db  15h
.eh_frame:000000000000D776                 db    0
.eh_frame:000000000000D777                 db    0
.eh_frame:000000000000D778                 db 0E8h
.eh_frame:000000000000D779                 db 0C6h
.eh_frame:000000000000D77A                 db 0FFh
.eh_frame:000000000000D77B                 db 0FFh
.eh_frame:000000000000D77C                 db  3Ch ; <
.eh_frame:000000000000D77D                 db    0
.eh_frame:000000000000D77E                 db    0
.eh_frame:000000000000D77F                 db    0
.eh_frame:000000000000D780                 db    0
.eh_frame:000000000000D781                 db  44h ; D
.eh_frame:000000000000D782                 db  0Eh
.eh_frame:000000000000D783                 db  10h
.eh_frame:000000000000D784                 db  61h ; a
.eh_frame:000000000000D785                 db  0Ah
.eh_frame:000000000000D786                 db  0Eh
.eh_frame:000000000000D787                 db    8
.eh_frame:000000000000D788                 db  4Bh ; K
.eh_frame:000000000000D789                 db  0Bh
.eh_frame:000000000000D78A                 db  4Bh ; K
.eh_frame:000000000000D78B                 db  0Eh
.eh_frame:000000000000D78C                 db    8
.eh_frame:000000000000D78D                 db    0
.eh_frame:000000000000D78E                 db    0
.eh_frame:000000000000D78F                 db    0
.eh_frame:000000000000D790                 db  1Ch
.eh_frame:000000000000D791                 db    0
.eh_frame:000000000000D792                 db    0
.eh_frame:000000000000D793                 db    0
.eh_frame:000000000000D794                 db  94h
.eh_frame:000000000000D795                 db  15h
.eh_frame:000000000000D796                 db    0
.eh_frame:000000000000D797                 db    0
.eh_frame:000000000000D798                 db    8
.eh_frame:000000000000D799                 db 0C7h
.eh_frame:000000000000D79A                 db 0FFh
.eh_frame:000000000000D79B                 db 0FFh
.eh_frame:000000000000D79C                 db  6Eh ; n
.eh_frame:000000000000D79D                 db    0
.eh_frame:000000000000D79E                 db    0
.eh_frame:000000000000D79F                 db    0
.eh_frame:000000000000D7A0                 db    0
.eh_frame:000000000000D7A1                 db  44h ; D
.eh_frame:000000000000D7A2                 db  0Eh
.eh_frame:000000000000D7A3                 db  60h ; `
.eh_frame:000000000000D7A4                 db  7Eh ; ~
.eh_frame:000000000000D7A5                 db  0Ah
.eh_frame:000000000000D7A6                 db  0Eh
.eh_frame:000000000000D7A7                 db    8
.eh_frame:000000000000D7A8                 db  46h ; F
.eh_frame:000000000000D7A9                 db  0Bh
.eh_frame:000000000000D7AA                 db    0
.eh_frame:000000000000D7AB                 db    0
.eh_frame:000000000000D7AC                 db    0
.eh_frame:000000000000D7AD                 db    0
.eh_frame:000000000000D7AE                 db    0
.eh_frame:000000000000D7AF                 db    0
.eh_frame:000000000000D7B0                 db  5Ch ; \
.eh_frame:000000000000D7B1                 db    0
.eh_frame:000000000000D7B2                 db    0
.eh_frame:000000000000D7B3                 db    0
.eh_frame:000000000000D7B4                 db 0B4h
.eh_frame:000000000000D7B5                 db  15h
.eh_frame:000000000000D7B6                 db    0
.eh_frame:000000000000D7B7                 db    0
.eh_frame:000000000000D7B8                 db  58h ; X
.eh_frame:000000000000D7B9                 db 0C7h
.eh_frame:000000000000D7BA                 db 0FFh
.eh_frame:000000000000D7BB                 db 0FFh
.eh_frame:000000000000D7BC                 db  80h
.eh_frame:000000000000D7BD                 db    0
.eh_frame:000000000000D7BE                 db    0
.eh_frame:000000000000D7BF                 db    0
.eh_frame:000000000000D7C0                 db    0
.eh_frame:000000000000D7C1                 db  42h ; B
.eh_frame:000000000000D7C2                 db  0Eh
.eh_frame:000000000000D7C3                 db  10h
.eh_frame:000000000000D7C4                 db  8Dh
.eh_frame:000000000000D7C5                 db    2
.eh_frame:000000000000D7C6                 db  42h ; B
.eh_frame:000000000000D7C7                 db  0Eh
.eh_frame:000000000000D7C8                 db  18h
.eh_frame:000000000000D7C9                 db  8Ch
.eh_frame:000000000000D7CA                 db    3
.eh_frame:000000000000D7CB                 db  47h ; G
.eh_frame:000000000000D7CC                 db  0Eh
.eh_frame:000000000000D7CD                 db  20h
.eh_frame:000000000000D7CE                 db  86h
.eh_frame:000000000000D7CF                 db    4
.eh_frame:000000000000D7D0                 db  41h ; A
.eh_frame:000000000000D7D1                 db  0Eh
.eh_frame:000000000000D7D2                 db  28h ; (
.eh_frame:000000000000D7D3                 db  83h
.eh_frame:000000000000D7D4                 db    5
.eh_frame:000000000000D7D5                 db  49h ; I
.eh_frame:000000000000D7D6                 db  0Eh
.eh_frame:000000000000D7D7                 db  30h ; 0
.eh_frame:000000000000D7D8                 db  62h ; b
.eh_frame:000000000000D7D9                 db  0Ah
.eh_frame:000000000000D7DA                 db  0Eh
.eh_frame:000000000000D7DB                 db  28h ; (
.eh_frame:000000000000D7DC                 db  44h ; D
.eh_frame:000000000000D7DD                 db  0Eh
.eh_frame:000000000000D7DE                 db  20h
.eh_frame:000000000000D7DF                 db  41h ; A
.eh_frame:000000000000D7E0                 db  0Eh
.eh_frame:000000000000D7E1                 db  18h
.eh_frame:000000000000D7E2                 db  42h ; B
.eh_frame:000000000000D7E3                 db  0Eh
.eh_frame:000000000000D7E4                 db  10h
.eh_frame:000000000000D7E5                 db  42h ; B
.eh_frame:000000000000D7E6                 db  0Eh
.eh_frame:000000000000D7E7                 db    8
.eh_frame:000000000000D7E8                 db  48h ; H
.eh_frame:000000000000D7E9                 db  0Bh
.eh_frame:000000000000D7EA                 db  5Dh ; ]
.eh_frame:000000000000D7EB                 db  0Ah
.eh_frame:000000000000D7EC                 db  0Eh
.eh_frame:000000000000D7ED                 db  28h ; (
.eh_frame:000000000000D7EE                 db  41h ; A
.eh_frame:000000000000D7EF                 db  0Eh
.eh_frame:000000000000D7F0                 db  20h
.eh_frame:000000000000D7F1                 db  41h ; A
.eh_frame:000000000000D7F2                 db  0Eh
.eh_frame:000000000000D7F3                 db  18h
.eh_frame:000000000000D7F4                 db  42h ; B
.eh_frame:000000000000D7F5                 db  0Eh
.eh_frame:000000000000D7F6                 db  10h
.eh_frame:000000000000D7F7                 db  42h ; B
.eh_frame:000000000000D7F8                 db  0Eh
.eh_frame:000000000000D7F9                 db    8
.eh_frame:000000000000D7FA                 db  45h ; E
.eh_frame:000000000000D7FB                 db  0Bh
.eh_frame:000000000000D7FC                 db  44h ; D
.eh_frame:000000000000D7FD                 db  0Eh
.eh_frame:000000000000D7FE                 db  28h ; (
.eh_frame:000000000000D7FF                 db  43h ; C
.eh_frame:000000000000D800                 db  0Eh
.eh_frame:000000000000D801                 db  20h
.eh_frame:000000000000D802                 db  44h ; D
.eh_frame:000000000000D803                 db  0Eh
.eh_frame:000000000000D804                 db  18h
.eh_frame:000000000000D805                 db  42h ; B
.eh_frame:000000000000D806                 db  0Eh
.eh_frame:000000000000D807                 db  10h
.eh_frame:000000000000D808                 db  42h ; B
.eh_frame:000000000000D809                 db  0Eh
.eh_frame:000000000000D80A                 db    8
.eh_frame:000000000000D80B                 db    0
.eh_frame:000000000000D80C                 db    0
.eh_frame:000000000000D80D                 db    0
.eh_frame:000000000000D80E                 db    0
.eh_frame:000000000000D80F                 db    0
.eh_frame:000000000000D810                 db  34h ; 4
.eh_frame:000000000000D811                 db    0
.eh_frame:000000000000D812                 db    0
.eh_frame:000000000000D813                 db    0
.eh_frame:000000000000D814                 db  14h
.eh_frame:000000000000D815                 db  16h
.eh_frame:000000000000D816                 db    0
.eh_frame:000000000000D817                 db    0
.eh_frame:000000000000D818                 db  78h ; x
.eh_frame:000000000000D819                 db 0C7h
.eh_frame:000000000000D81A                 db 0FFh
.eh_frame:000000000000D81B                 db 0FFh
.eh_frame:000000000000D81C                 db  3Fh ; ?
.eh_frame:000000000000D81D                 db    0
.eh_frame:000000000000D81E                 db    0
.eh_frame:000000000000D81F                 db    0
.eh_frame:000000000000D820                 db    0
.eh_frame:000000000000D821                 db  42h ; B
.eh_frame:000000000000D822                 db  0Eh
.eh_frame:000000000000D823                 db  10h
.eh_frame:000000000000D824                 db  8Dh
.eh_frame:000000000000D825                 db    2
.eh_frame:000000000000D826                 db  42h ; B
.eh_frame:000000000000D827                 db  0Eh
.eh_frame:000000000000D828                 db  18h
.eh_frame:000000000000D829                 db  8Ch
.eh_frame:000000000000D82A                 db    3
.eh_frame:000000000000D82B                 db  41h ; A
.eh_frame:000000000000D82C                 db  0Eh
.eh_frame:000000000000D82D                 db  20h
.eh_frame:000000000000D82E                 db  86h
.eh_frame:000000000000D82F                 db    4
.eh_frame:000000000000D830                 db  41h ; A
.eh_frame:000000000000D831                 db  0Eh
.eh_frame:000000000000D832                 db  28h ; (
.eh_frame:000000000000D833                 db  83h
.eh_frame:000000000000D834                 db    5
.eh_frame:000000000000D835                 db  46h ; F
.eh_frame:000000000000D836                 db  0Eh
.eh_frame:000000000000D837                 db  30h ; 0
.eh_frame:000000000000D838                 db  6Ah ; j
.eh_frame:000000000000D839                 db  0Eh
.eh_frame:000000000000D83A                 db  28h ; (
.eh_frame:000000000000D83B                 db  43h ; C
.eh_frame:000000000000D83C                 db  0Eh
.eh_frame:000000000000D83D                 db  20h
.eh_frame:000000000000D83E                 db  41h ; A
.eh_frame:000000000000D83F                 db  0Eh
.eh_frame:000000000000D840                 db  18h
.eh_frame:000000000000D841                 db  42h ; B
.eh_frame:000000000000D842                 db  0Eh
.eh_frame:000000000000D843                 db  10h
.eh_frame:000000000000D844                 db  42h ; B
.eh_frame:000000000000D845                 db  0Eh
.eh_frame:000000000000D846                 db    8
.eh_frame:000000000000D847                 db    0
.eh_frame:000000000000D848                 db  34h ; 4
.eh_frame:000000000000D849                 db    0
.eh_frame:000000000000D84A                 db    0
.eh_frame:000000000000D84B                 db    0
.eh_frame:000000000000D84C                 db  4Ch ; L
.eh_frame:000000000000D84D                 db  16h
.eh_frame:000000000000D84E                 db    0
.eh_frame:000000000000D84F                 db    0
.eh_frame:000000000000D850                 db  80h
.eh_frame:000000000000D851                 db 0C7h
.eh_frame:000000000000D852                 db 0FFh
.eh_frame:000000000000D853                 db 0FFh
.eh_frame:000000000000D854                 db  7Bh ; {
.eh_frame:000000000000D855                 db    0
.eh_frame:000000000000D856                 db    0
.eh_frame:000000000000D857                 db    0
.eh_frame:000000000000D858                 db    0
.eh_frame:000000000000D859                 db  42h ; B
.eh_frame:000000000000D85A                 db  0Eh
.eh_frame:000000000000D85B                 db  10h
.eh_frame:000000000000D85C                 db  8Ch
.eh_frame:000000000000D85D                 db    2
.eh_frame:000000000000D85E                 db  41h ; A
.eh_frame:000000000000D85F                 db  0Eh
.eh_frame:000000000000D860                 db  18h
.eh_frame:000000000000D861                 db  86h
.eh_frame:000000000000D862                 db    3
.eh_frame:000000000000D863                 db  41h ; A
.eh_frame:000000000000D864                 db  0Eh
.eh_frame:000000000000D865                 db  20h
.eh_frame:000000000000D866                 db  83h
.eh_frame:000000000000D867                 db    4
.eh_frame:000000000000D868                 db  7Dh ; }
.eh_frame:000000000000D869                 db  0Ah
.eh_frame:000000000000D86A                 db  0Eh
.eh_frame:000000000000D86B                 db  18h
.eh_frame:000000000000D86C                 db  41h ; A
.eh_frame:000000000000D86D                 db  0Eh
.eh_frame:000000000000D86E                 db  10h
.eh_frame:000000000000D86F                 db  42h ; B
.eh_frame:000000000000D870                 db  0Eh
.eh_frame:000000000000D871                 db    8
.eh_frame:000000000000D872                 db  44h ; D
.eh_frame:000000000000D873                 db  0Bh
.eh_frame:000000000000D874                 db  60h ; `
.eh_frame:000000000000D875                 db  0Ah
.eh_frame:000000000000D876                 db  0Eh
.eh_frame:000000000000D877                 db  18h
.eh_frame:000000000000D878                 db  41h ; A
.eh_frame:000000000000D879                 db  0Eh
.eh_frame:000000000000D87A                 db  10h
.eh_frame:000000000000D87B                 db  42h ; B
.eh_frame:000000000000D87C                 db  0Eh
.eh_frame:000000000000D87D                 db    8
.eh_frame:000000000000D87E                 db  45h ; E
.eh_frame:000000000000D87F                 db  0Bh
.eh_frame:000000000000D880                 db  34h ; 4
.eh_frame:000000000000D881                 db    0
.eh_frame:000000000000D882                 db    0
.eh_frame:000000000000D883                 db    0
.eh_frame:000000000000D884                 db  84h
.eh_frame:000000000000D885                 db  16h
.eh_frame:000000000000D886                 db    0
.eh_frame:000000000000D887                 db    0
.eh_frame:000000000000D888                 db 0C8h
.eh_frame:000000000000D889                 db 0C7h
.eh_frame:000000000000D88A                 db 0FFh
.eh_frame:000000000000D88B                 db 0FFh
.eh_frame:000000000000D88C                 db  7Eh ; ~
.eh_frame:000000000000D88D                 db    2
.eh_frame:000000000000D88E                 db    0
.eh_frame:000000000000D88F                 db    0
.eh_frame:000000000000D890                 db    0
.eh_frame:000000000000D891                 db  42h ; B
.eh_frame:000000000000D892                 db  0Eh
.eh_frame:000000000000D893                 db  10h
.eh_frame:000000000000D894                 db  8Ch
.eh_frame:000000000000D895                 db    2
.eh_frame:000000000000D896                 db  41h ; A
.eh_frame:000000000000D897                 db  0Eh
.eh_frame:000000000000D898                 db  18h
.eh_frame:000000000000D899                 db  86h
.eh_frame:000000000000D89A                 db    3
.eh_frame:000000000000D89B                 db  43h ; C
.eh_frame:000000000000D89C                 db  0Eh
.eh_frame:000000000000D89D                 db  20h
.eh_frame:000000000000D89E                 db  83h
.eh_frame:000000000000D89F                 db    4
.eh_frame:000000000000D8A0                 db  44h ; D
.eh_frame:000000000000D8A1                 db  0Eh
.eh_frame:000000000000D8A2                 db  70h ; p
.eh_frame:000000000000D8A3                 db    2
.eh_frame:000000000000D8A4                 db 0F0h
.eh_frame:000000000000D8A5                 db  0Ah
.eh_frame:000000000000D8A6                 db  0Eh
.eh_frame:000000000000D8A7                 db  20h
.eh_frame:000000000000D8A8                 db  41h ; A
.eh_frame:000000000000D8A9                 db  0Eh
.eh_frame:000000000000D8AA                 db  18h
.eh_frame:000000000000D8AB                 db  41h ; A
.eh_frame:000000000000D8AC                 db  0Eh
.eh_frame:000000000000D8AD                 db  10h
.eh_frame:000000000000D8AE                 db  42h ; B
.eh_frame:000000000000D8AF                 db  0Eh
.eh_frame:000000000000D8B0                 db    8
.eh_frame:000000000000D8B1                 db  42h ; B
.eh_frame:000000000000D8B2                 db  0Bh
.eh_frame:000000000000D8B3                 db    0
.eh_frame:000000000000D8B4                 db    0
.eh_frame:000000000000D8B5                 db    0
.eh_frame:000000000000D8B6                 db    0
.eh_frame:000000000000D8B7                 db    0
.eh_frame:000000000000D8B8                 db  1Ch
.eh_frame:000000000000D8B9                 db    0
.eh_frame:000000000000D8BA                 db    0
.eh_frame:000000000000D8BB                 db    0
.eh_frame:000000000000D8BC                 db 0BCh
.eh_frame:000000000000D8BD                 db  16h
.eh_frame:000000000000D8BE                 db    0
.eh_frame:000000000000D8BF                 db    0
.eh_frame:000000000000D8C0                 db  10h
.eh_frame:000000000000D8C1                 db 0CAh
.eh_frame:000000000000D8C2                 db 0FFh
.eh_frame:000000000000D8C3                 db 0FFh
.eh_frame:000000000000D8C4                 db  40h ; @
.eh_frame:000000000000D8C5                 db    0
.eh_frame:000000000000D8C6                 db    0
.eh_frame:000000000000D8C7                 db    0
.eh_frame:000000000000D8C8                 db    0
.eh_frame:000000000000D8C9                 db  44h ; D
.eh_frame:000000000000D8CA                 db  0Eh
.eh_frame:000000000000D8CB                 db  10h
.eh_frame:000000000000D8CC                 db  83h
.eh_frame:000000000000D8CD                 db    2
.eh_frame:000000000000D8CE                 db  5Ah ; Z
.eh_frame:000000000000D8CF                 db  0Ah
.eh_frame:000000000000D8D0                 db  0Eh
.eh_frame:000000000000D8D1                 db    8
.eh_frame:000000000000D8D2                 db  4Ah ; J
.eh_frame:000000000000D8D3                 db  0Bh
.eh_frame:000000000000D8D4                 db  53h ; S
.eh_frame:000000000000D8D5                 db  0Eh
.eh_frame:000000000000D8D6                 db    8
.eh_frame:000000000000D8D7                 db    0
.eh_frame:000000000000D8D8                 db  2Ch ; ,
.eh_frame:000000000000D8D9                 db    0
.eh_frame:000000000000D8DA                 db    0
.eh_frame:000000000000D8DB                 db    0
.eh_frame:000000000000D8DC                 db 0DCh
.eh_frame:000000000000D8DD                 db  16h
.eh_frame:000000000000D8DE                 db    0
.eh_frame:000000000000D8DF                 db    0
.eh_frame:000000000000D8E0                 db  30h ; 0
.eh_frame:000000000000D8E1                 db 0CAh
.eh_frame:000000000000D8E2                 db 0FFh
.eh_frame:000000000000D8E3                 db 0FFh
.eh_frame:000000000000D8E4                 db  57h ; W
.eh_frame:000000000000D8E5                 db    0
.eh_frame:000000000000D8E6                 db    0
.eh_frame:000000000000D8E7                 db    0
.eh_frame:000000000000D8E8                 db    0
.eh_frame:000000000000D8E9                 db  63h ; c
.eh_frame:000000000000D8EA                 db  0Eh
.eh_frame:000000000000D8EB                 db  10h
.eh_frame:000000000000D8EC                 db  8Ch
.eh_frame:000000000000D8ED                 db    2
.eh_frame:000000000000D8EE                 db  41h ; A
.eh_frame:000000000000D8EF                 db  0Eh
.eh_frame:000000000000D8F0                 db  18h
.eh_frame:000000000000D8F1                 db  86h
.eh_frame:000000000000D8F2                 db    3
.eh_frame:000000000000D8F3                 db  44h ; D
.eh_frame:000000000000D8F4                 db  0Eh
.eh_frame:000000000000D8F5                 db  20h
.eh_frame:000000000000D8F6                 db  83h
.eh_frame:000000000000D8F7                 db    4
.eh_frame:000000000000D8F8                 db  6Bh ; k
.eh_frame:000000000000D8F9                 db  0Eh
.eh_frame:000000000000D8FA                 db  18h
.eh_frame:000000000000D8FB                 db  41h ; A
.eh_frame:000000000000D8FC                 db  0Eh
.eh_frame:000000000000D8FD                 db  10h
.eh_frame:000000000000D8FE                 db  42h ; B
.eh_frame:000000000000D8FF                 db  0Eh
.eh_frame:000000000000D900                 db    8
.eh_frame:000000000000D901                 db    0
.eh_frame:000000000000D902                 db    0
.eh_frame:000000000000D903                 db    0
.eh_frame:000000000000D904                 db    0
.eh_frame:000000000000D905                 db    0
.eh_frame:000000000000D906                 db    0
.eh_frame:000000000000D907                 db    0
.eh_frame:000000000000D908                 db  14h
.eh_frame:000000000000D909                 db    0
.eh_frame:000000000000D90A                 db    0
.eh_frame:000000000000D90B                 db    0
.eh_frame:000000000000D90C                 db  0Ch
.eh_frame:000000000000D90D                 db  17h
.eh_frame:000000000000D90E                 db    0
.eh_frame:000000000000D90F                 db    0
.eh_frame:000000000000D910                 db  60h ; `
.eh_frame:000000000000D911                 db 0CAh
.eh_frame:000000000000D912                 db 0FFh
.eh_frame:000000000000D913                 db 0FFh
.eh_frame:000000000000D914                 db  0Eh
.eh_frame:000000000000D915                 db    0
.eh_frame:000000000000D916                 db    0
.eh_frame:000000000000D917                 db    0
.eh_frame:000000000000D918                 db    0
.eh_frame:000000000000D919                 db    0
.eh_frame:000000000000D91A                 db    0
.eh_frame:000000000000D91B                 db    0
.eh_frame:000000000000D91C                 db    0
.eh_frame:000000000000D91D                 db    0
.eh_frame:000000000000D91E                 db    0
.eh_frame:000000000000D91F                 db    0
.eh_frame:000000000000D920                 db  44h ; D
.eh_frame:000000000000D921                 db    0
.eh_frame:000000000000D922                 db    0
.eh_frame:000000000000D923                 db    0
.eh_frame:000000000000D924                 db  24h ; $
.eh_frame:000000000000D925                 db  17h
.eh_frame:000000000000D926                 db    0
.eh_frame:000000000000D927                 db    0
.eh_frame:000000000000D928                 db  58h ; X
.eh_frame:000000000000D929                 db 0CAh
.eh_frame:000000000000D92A                 db 0FFh
.eh_frame:000000000000D92B                 db 0FFh
.eh_frame:000000000000D92C                 db  65h ; e
.eh_frame:000000000000D92D                 db    0
.eh_frame:000000000000D92E                 db    0
.eh_frame:000000000000D92F                 db    0
.eh_frame:000000000000D930                 db    0
.eh_frame:000000000000D931                 db  42h ; B
.eh_frame:000000000000D932                 db  0Eh
.eh_frame:000000000000D933                 db  10h
.eh_frame:000000000000D934                 db  8Fh
.eh_frame:000000000000D935                 db    2
.eh_frame:000000000000D936                 db  42h ; B
.eh_frame:000000000000D937                 db  0Eh
.eh_frame:000000000000D938                 db  18h
.eh_frame:000000000000D939                 db  8Eh
.eh_frame:000000000000D93A                 db    3
.eh_frame:000000000000D93B                 db  45h ; E
.eh_frame:000000000000D93C                 db  0Eh
.eh_frame:000000000000D93D                 db  20h
.eh_frame:000000000000D93E                 db  8Dh
.eh_frame:000000000000D93F                 db    4
.eh_frame:000000000000D940                 db  42h ; B
.eh_frame:000000000000D941                 db  0Eh
.eh_frame:000000000000D942                 db  28h ; (
.eh_frame:000000000000D943                 db  8Ch
.eh_frame:000000000000D944                 db    5
.eh_frame:000000000000D945                 db  48h ; H
.eh_frame:000000000000D946                 db  0Eh
.eh_frame:000000000000D947                 db  30h ; 0
.eh_frame:000000000000D948                 db  86h
.eh_frame:000000000000D949                 db    6
.eh_frame:000000000000D94A                 db  48h ; H
.eh_frame:000000000000D94B                 db  0Eh
.eh_frame:000000000000D94C                 db  38h ; 8
.eh_frame:000000000000D94D                 db  83h
.eh_frame:000000000000D94E                 db    7
.eh_frame:000000000000D94F                 db  4Dh ; M
.eh_frame:000000000000D950                 db  0Eh
.eh_frame:000000000000D951                 db  40h ; @
.eh_frame:000000000000D952                 db  72h ; r
.eh_frame:000000000000D953                 db  0Eh
.eh_frame:000000000000D954                 db  38h ; 8
.eh_frame:000000000000D955                 db  41h ; A
.eh_frame:000000000000D956                 db  0Eh
.eh_frame:000000000000D957                 db  30h ; 0
.eh_frame:000000000000D958                 db  41h ; A
.eh_frame:000000000000D959                 db  0Eh
.eh_frame:000000000000D95A                 db  28h ; (
.eh_frame:000000000000D95B                 db  42h ; B
.eh_frame:000000000000D95C                 db  0Eh
.eh_frame:000000000000D95D                 db  20h
.eh_frame:000000000000D95E                 db  42h ; B
.eh_frame:000000000000D95F                 db  0Eh
.eh_frame:000000000000D960                 db  18h
.eh_frame:000000000000D961                 db  42h ; B
.eh_frame:000000000000D962                 db  0Eh
.eh_frame:000000000000D963                 db  10h
.eh_frame:000000000000D964                 db  42h ; B
.eh_frame:000000000000D965                 db  0Eh
.eh_frame:000000000000D966                 db    8
.eh_frame:000000000000D967                 db    0
.eh_frame:000000000000D968                 db  14h
.eh_frame:000000000000D969                 db    0
.eh_frame:000000000000D96A                 db    0
.eh_frame:000000000000D96B                 db    0
.eh_frame:000000000000D96C                 db  6Ch ; l
.eh_frame:000000000000D96D                 db  17h
.eh_frame:000000000000D96E                 db    0
.eh_frame:000000000000D96F                 db    0
.eh_frame:000000000000D970                 db  80h
.eh_frame:000000000000D971                 db 0CAh
.eh_frame:000000000000D972                 db 0FFh
.eh_frame:000000000000D973                 db 0FFh
.eh_frame:000000000000D974                 db    2
.eh_frame:000000000000D975                 db    0
.eh_frame:000000000000D976                 db    0
.eh_frame:000000000000D977                 db    0
.eh_frame:000000000000D978                 db    0
.eh_frame:000000000000D979                 db    0
.eh_frame:000000000000D97A                 db    0
.eh_frame:000000000000D97B                 db    0
.eh_frame:000000000000D97C                 db    0
.eh_frame:000000000000D97D                 db    0
.eh_frame:000000000000D97E                 db    0
.eh_frame:000000000000D97F                 db    0
.eh_frame:000000000000D980                 db  10h
.eh_frame:000000000000D981                 db    0
.eh_frame:000000000000D982                 db    0
.eh_frame:000000000000D983                 db    0
.eh_frame:000000000000D984                 db  84h
.eh_frame:000000000000D985                 db  17h
.eh_frame:000000000000D986                 db    0
.eh_frame:000000000000D987                 db    0
.eh_frame:000000000000D988                 db  78h ; x
.eh_frame:000000000000D989                 db 0CAh
.eh_frame:000000000000D98A                 db 0FFh
.eh_frame:000000000000D98B                 db 0FFh
.eh_frame:000000000000D98C                 db  0Eh
.eh_frame:000000000000D98D                 db    0
.eh_frame:000000000000D98E                 db    0
.eh_frame:000000000000D98F                 db    0
.eh_frame:000000000000D990                 db    0
.eh_frame:000000000000D991                 db    0
.eh_frame:000000000000D992                 db    0
.eh_frame:000000000000D993                 db    0
.eh_frame:000000000000D994 __FRAME_END__   db    0
.eh_frame:000000000000D995                 db    0
.eh_frame:000000000000D996                 db    0
.eh_frame:000000000000D997                 db    0
.eh_frame:000000000000D997 _eh_frame       ends
.eh_frame:000000000000D997
.init_array:000000000020D9B0 ; ELF Initialization Function Table
.init_array:000000000020D9B0 ; ===========================================================================
.init_array:000000000020D9B0
.init_array:000000000020D9B0 ; Segment type: Pure data
.init_array:000000000020D9B0 ; Segment permissions: Read/Write
.init_array:000000000020D9B0 _init_array     segment qword public 'DATA' use64
.init_array:000000000020D9B0                 assume cs:_init_array
.init_array:000000000020D9B0                 ;org 20D9B0h
.init_array:000000000020D9B0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020D9B0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020D9B0                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020D9B0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020D9B0
.fini_array:000000000020D9B8 ; ELF Termination Function Table
.fini_array:000000000020D9B8 ; ===========================================================================
.fini_array:000000000020D9B8
.fini_array:000000000020D9B8 ; Segment type: Pure data
.fini_array:000000000020D9B8 ; Segment permissions: Read/Write
.fini_array:000000000020D9B8 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020D9B8                 assume cs:_fini_array
.fini_array:000000000020D9B8                 ;org 20D9B8h
.fini_array:000000000020D9B8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020D9B8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020D9B8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020D9B8
.data.rel.ro:000000000020D9C0 ; ===========================================================================
.data.rel.ro:000000000020D9C0
.data.rel.ro:000000000020D9C0 ; Segment type: Pure data
.data.rel.ro:000000000020D9C0 ; Segment permissions: Read/Write
.data.rel.ro:000000000020D9C0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020D9C0                 assume cs:_data_rel_ro
.data.rel.ro:000000000020D9C0                 ;org 20D9C0h
.data.rel.ro:000000000020D9C0 ; struct option long_options
.data.rel.ro:000000000020D9C0 long_options    dq offset aRecursive    ; name
.data.rel.ro:000000000020D9C0                                         ; DATA XREF: main:loc_1DD8↑o
.data.rel.ro:000000000020D9C0                 dd 0                    ; has_arg ; "recursive"
.data.rel.ro:000000000020D9C0                 db 4 dup(0)
.data.rel.ro:000000000020D9C0                 dq 0                    ; flag
.data.rel.ro:000000000020D9C0                 dd 52h                  ; val
.data.rel.ro:000000000020D9C0                 db 4 dup(0)
.data.rel.ro:000000000020D9E0                 dq offset aChanges      ; "changes"
.data.rel.ro:000000000020D9E8                 db    0
.data.rel.ro:000000000020D9E9                 db    0
.data.rel.ro:000000000020D9EA                 db    0
.data.rel.ro:000000000020D9EB                 db    0
.data.rel.ro:000000000020D9EC                 db    0
.data.rel.ro:000000000020D9ED                 db    0
.data.rel.ro:000000000020D9EE                 db    0
.data.rel.ro:000000000020D9EF                 db    0
.data.rel.ro:000000000020D9F0                 db    0
.data.rel.ro:000000000020D9F1                 db    0
.data.rel.ro:000000000020D9F2                 db    0
.data.rel.ro:000000000020D9F3                 db    0
.data.rel.ro:000000000020D9F4                 db    0
.data.rel.ro:000000000020D9F5                 db    0
.data.rel.ro:000000000020D9F6                 db    0
.data.rel.ro:000000000020D9F7                 db    0
.data.rel.ro:000000000020D9F8                 db  63h ; c
.data.rel.ro:000000000020D9F9                 db    0
.data.rel.ro:000000000020D9FA                 db    0
.data.rel.ro:000000000020D9FB                 db    0
.data.rel.ro:000000000020D9FC                 db    0
.data.rel.ro:000000000020D9FD                 db    0
.data.rel.ro:000000000020D9FE                 db    0
.data.rel.ro:000000000020D9FF                 db    0
.data.rel.ro:000000000020DA00                 dq offset aNoDereference+3 ; "dereference"
.data.rel.ro:000000000020DA08                 db    0
.data.rel.ro:000000000020DA09                 db    0
.data.rel.ro:000000000020DA0A                 db    0
.data.rel.ro:000000000020DA0B                 db    0
.data.rel.ro:000000000020DA0C                 db    0
.data.rel.ro:000000000020DA0D                 db    0
.data.rel.ro:000000000020DA0E                 db    0
.data.rel.ro:000000000020DA0F                 db    0
.data.rel.ro:000000000020DA10                 db    0
.data.rel.ro:000000000020DA11                 db    0
.data.rel.ro:000000000020DA12                 db    0
.data.rel.ro:000000000020DA13                 db    0
.data.rel.ro:000000000020DA14                 db    0
.data.rel.ro:000000000020DA15                 db    0
.data.rel.ro:000000000020DA16                 db    0
.data.rel.ro:000000000020DA17                 db    0
.data.rel.ro:000000000020DA18                 db  80h
.data.rel.ro:000000000020DA19                 db    0
.data.rel.ro:000000000020DA1A                 db    0
.data.rel.ro:000000000020DA1B                 db    0
.data.rel.ro:000000000020DA1C                 db    0
.data.rel.ro:000000000020DA1D                 db    0
.data.rel.ro:000000000020DA1E                 db    0
.data.rel.ro:000000000020DA1F                 db    0
.data.rel.ro:000000000020DA20                 dq offset aNoDereference ; "no-dereference"
.data.rel.ro:000000000020DA28                 db    0
.data.rel.ro:000000000020DA29                 db    0
.data.rel.ro:000000000020DA2A                 db    0
.data.rel.ro:000000000020DA2B                 db    0
.data.rel.ro:000000000020DA2C                 db    0
.data.rel.ro:000000000020DA2D                 db    0
.data.rel.ro:000000000020DA2E                 db    0
.data.rel.ro:000000000020DA2F                 db    0
.data.rel.ro:000000000020DA30                 db    0
.data.rel.ro:000000000020DA31                 db    0
.data.rel.ro:000000000020DA32                 db    0
.data.rel.ro:000000000020DA33                 db    0
.data.rel.ro:000000000020DA34                 db    0
.data.rel.ro:000000000020DA35                 db    0
.data.rel.ro:000000000020DA36                 db    0
.data.rel.ro:000000000020DA37                 db    0
.data.rel.ro:000000000020DA38                 db  68h ; h
.data.rel.ro:000000000020DA39                 db    0
.data.rel.ro:000000000020DA3A                 db    0
.data.rel.ro:000000000020DA3B                 db    0
.data.rel.ro:000000000020DA3C                 db    0
.data.rel.ro:000000000020DA3D                 db    0
.data.rel.ro:000000000020DA3E                 db    0
.data.rel.ro:000000000020DA3F                 db    0
.data.rel.ro:000000000020DA40                 dq offset aNoPreserveRoot_0 ; "no-preserve-root"
.data.rel.ro:000000000020DA48                 db    0
.data.rel.ro:000000000020DA49                 db    0
.data.rel.ro:000000000020DA4A                 db    0
.data.rel.ro:000000000020DA4B                 db    0
.data.rel.ro:000000000020DA4C                 db    0
.data.rel.ro:000000000020DA4D                 db    0
.data.rel.ro:000000000020DA4E                 db    0
.data.rel.ro:000000000020DA4F                 db    0
.data.rel.ro:000000000020DA50                 db    0
.data.rel.ro:000000000020DA51                 db    0
.data.rel.ro:000000000020DA52                 db    0
.data.rel.ro:000000000020DA53                 db    0
.data.rel.ro:000000000020DA54                 db    0
.data.rel.ro:000000000020DA55                 db    0
.data.rel.ro:000000000020DA56                 db    0
.data.rel.ro:000000000020DA57                 db    0
.data.rel.ro:000000000020DA58                 db  81h
.data.rel.ro:000000000020DA59                 db    0
.data.rel.ro:000000000020DA5A                 db    0
.data.rel.ro:000000000020DA5B                 db    0
.data.rel.ro:000000000020DA5C                 db    0
.data.rel.ro:000000000020DA5D                 db    0
.data.rel.ro:000000000020DA5E                 db    0
.data.rel.ro:000000000020DA5F                 db    0
.data.rel.ro:000000000020DA60                 dq offset aNoPreserveRoot_0+3 ; "preserve-root"
.data.rel.ro:000000000020DA68                 db    0
.data.rel.ro:000000000020DA69                 db    0
.data.rel.ro:000000000020DA6A                 db    0
.data.rel.ro:000000000020DA6B                 db    0
.data.rel.ro:000000000020DA6C                 db    0
.data.rel.ro:000000000020DA6D                 db    0
.data.rel.ro:000000000020DA6E                 db    0
.data.rel.ro:000000000020DA6F                 db    0
.data.rel.ro:000000000020DA70                 db    0
.data.rel.ro:000000000020DA71                 db    0
.data.rel.ro:000000000020DA72                 db    0
.data.rel.ro:000000000020DA73                 db    0
.data.rel.ro:000000000020DA74                 db    0
.data.rel.ro:000000000020DA75                 db    0
.data.rel.ro:000000000020DA76                 db    0
.data.rel.ro:000000000020DA77                 db    0
.data.rel.ro:000000000020DA78                 db  82h
.data.rel.ro:000000000020DA79                 db    0
.data.rel.ro:000000000020DA7A                 db    0
.data.rel.ro:000000000020DA7B                 db    0
.data.rel.ro:000000000020DA7C                 db    0
.data.rel.ro:000000000020DA7D                 db    0
.data.rel.ro:000000000020DA7E                 db    0
.data.rel.ro:000000000020DA7F                 db    0
.data.rel.ro:000000000020DA80                 dq offset aQuiet        ; "quiet"
.data.rel.ro:000000000020DA88                 db    0
.data.rel.ro:000000000020DA89                 db    0
.data.rel.ro:000000000020DA8A                 db    0
.data.rel.ro:000000000020DA8B                 db    0
.data.rel.ro:000000000020DA8C                 db    0
.data.rel.ro:000000000020DA8D                 db    0
.data.rel.ro:000000000020DA8E                 db    0
.data.rel.ro:000000000020DA8F                 db    0
.data.rel.ro:000000000020DA90                 db    0
.data.rel.ro:000000000020DA91                 db    0
.data.rel.ro:000000000020DA92                 db    0
.data.rel.ro:000000000020DA93                 db    0
.data.rel.ro:000000000020DA94                 db    0
.data.rel.ro:000000000020DA95                 db    0
.data.rel.ro:000000000020DA96                 db    0
.data.rel.ro:000000000020DA97                 db    0
.data.rel.ro:000000000020DA98                 db  66h ; f
.data.rel.ro:000000000020DA99                 db    0
.data.rel.ro:000000000020DA9A                 db    0
.data.rel.ro:000000000020DA9B                 db    0
.data.rel.ro:000000000020DA9C                 db    0
.data.rel.ro:000000000020DA9D                 db    0
.data.rel.ro:000000000020DA9E                 db    0
.data.rel.ro:000000000020DA9F                 db    0
.data.rel.ro:000000000020DAA0                 dq offset aSilent       ; "silent"
.data.rel.ro:000000000020DAA8                 db    0
.data.rel.ro:000000000020DAA9                 db    0
.data.rel.ro:000000000020DAAA                 db    0
.data.rel.ro:000000000020DAAB                 db    0
.data.rel.ro:000000000020DAAC                 db    0
.data.rel.ro:000000000020DAAD                 db    0
.data.rel.ro:000000000020DAAE                 db    0
.data.rel.ro:000000000020DAAF                 db    0
.data.rel.ro:000000000020DAB0                 db    0
.data.rel.ro:000000000020DAB1                 db    0
.data.rel.ro:000000000020DAB2                 db    0
.data.rel.ro:000000000020DAB3                 db    0
.data.rel.ro:000000000020DAB4                 db    0
.data.rel.ro:000000000020DAB5                 db    0
.data.rel.ro:000000000020DAB6                 db    0
.data.rel.ro:000000000020DAB7                 db    0
.data.rel.ro:000000000020DAB8                 db  66h ; f
.data.rel.ro:000000000020DAB9                 db    0
.data.rel.ro:000000000020DABA                 db    0
.data.rel.ro:000000000020DABB                 db    0
.data.rel.ro:000000000020DABC                 db    0
.data.rel.ro:000000000020DABD                 db    0
.data.rel.ro:000000000020DABE                 db    0
.data.rel.ro:000000000020DABF                 db    0
.data.rel.ro:000000000020DAC0                 dq offset aNoDereference+5 ; "reference"
.data.rel.ro:000000000020DAC8                 db    1
.data.rel.ro:000000000020DAC9                 db    0
.data.rel.ro:000000000020DACA                 db    0
.data.rel.ro:000000000020DACB                 db    0
.data.rel.ro:000000000020DACC                 db    0
.data.rel.ro:000000000020DACD                 db    0
.data.rel.ro:000000000020DACE                 db    0
.data.rel.ro:000000000020DACF                 db    0
.data.rel.ro:000000000020DAD0                 db    0
.data.rel.ro:000000000020DAD1                 db    0
.data.rel.ro:000000000020DAD2                 db    0
.data.rel.ro:000000000020DAD3                 db    0
.data.rel.ro:000000000020DAD4                 db    0
.data.rel.ro:000000000020DAD5                 db    0
.data.rel.ro:000000000020DAD6                 db    0
.data.rel.ro:000000000020DAD7                 db    0
.data.rel.ro:000000000020DAD8                 db  83h
.data.rel.ro:000000000020DAD9                 db    0
.data.rel.ro:000000000020DADA                 db    0
.data.rel.ro:000000000020DADB                 db    0
.data.rel.ro:000000000020DADC                 db    0
.data.rel.ro:000000000020DADD                 db    0
.data.rel.ro:000000000020DADE                 db    0
.data.rel.ro:000000000020DADF                 db    0
.data.rel.ro:000000000020DAE0                 dq offset aVerbose      ; "verbose"
.data.rel.ro:000000000020DAE8                 db    0
.data.rel.ro:000000000020DAE9                 db    0
.data.rel.ro:000000000020DAEA                 db    0
.data.rel.ro:000000000020DAEB                 db    0
.data.rel.ro:000000000020DAEC                 db    0
.data.rel.ro:000000000020DAED                 db    0
.data.rel.ro:000000000020DAEE                 db    0
.data.rel.ro:000000000020DAEF                 db    0
.data.rel.ro:000000000020DAF0                 db    0
.data.rel.ro:000000000020DAF1                 db    0
.data.rel.ro:000000000020DAF2                 db    0
.data.rel.ro:000000000020DAF3                 db    0
.data.rel.ro:000000000020DAF4                 db    0
.data.rel.ro:000000000020DAF5                 db    0
.data.rel.ro:000000000020DAF6                 db    0
.data.rel.ro:000000000020DAF7                 db    0
.data.rel.ro:000000000020DAF8                 db  76h ; v
.data.rel.ro:000000000020DAF9                 db    0
.data.rel.ro:000000000020DAFA                 db    0
.data.rel.ro:000000000020DAFB                 db    0
.data.rel.ro:000000000020DAFC                 db    0
.data.rel.ro:000000000020DAFD                 db    0
.data.rel.ro:000000000020DAFE                 db    0
.data.rel.ro:000000000020DAFF                 db    0
.data.rel.ro:000000000020DB00                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020DB08                 db    0
.data.rel.ro:000000000020DB09                 db    0
.data.rel.ro:000000000020DB0A                 db    0
.data.rel.ro:000000000020DB0B                 db    0
.data.rel.ro:000000000020DB0C                 db    0
.data.rel.ro:000000000020DB0D                 db    0
.data.rel.ro:000000000020DB0E                 db    0
.data.rel.ro:000000000020DB0F                 db    0
.data.rel.ro:000000000020DB10                 db    0
.data.rel.ro:000000000020DB11                 db    0
.data.rel.ro:000000000020DB12                 db    0
.data.rel.ro:000000000020DB13                 db    0
.data.rel.ro:000000000020DB14                 db    0
.data.rel.ro:000000000020DB15                 db    0
.data.rel.ro:000000000020DB16                 db    0
.data.rel.ro:000000000020DB17                 db    0
.data.rel.ro:000000000020DB18                 db  7Eh ; ~
.data.rel.ro:000000000020DB19                 db 0FFh
.data.rel.ro:000000000020DB1A                 db 0FFh
.data.rel.ro:000000000020DB1B                 db 0FFh
.data.rel.ro:000000000020DB1C                 db    0
.data.rel.ro:000000000020DB1D                 db    0
.data.rel.ro:000000000020DB1E                 db    0
.data.rel.ro:000000000020DB1F                 db    0
.data.rel.ro:000000000020DB20                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020DB28                 db    0
.data.rel.ro:000000000020DB29                 db    0
.data.rel.ro:000000000020DB2A                 db    0
.data.rel.ro:000000000020DB2B                 db    0
.data.rel.ro:000000000020DB2C                 db    0
.data.rel.ro:000000000020DB2D                 db    0
.data.rel.ro:000000000020DB2E                 db    0
.data.rel.ro:000000000020DB2F                 db    0
.data.rel.ro:000000000020DB30                 db    0
.data.rel.ro:000000000020DB31                 db    0
.data.rel.ro:000000000020DB32                 db    0
.data.rel.ro:000000000020DB33                 db    0
.data.rel.ro:000000000020DB34                 db    0
.data.rel.ro:000000000020DB35                 db    0
.data.rel.ro:000000000020DB36                 db    0
.data.rel.ro:000000000020DB37                 db    0
.data.rel.ro:000000000020DB38                 db  7Dh ; }
.data.rel.ro:000000000020DB39                 db 0FFh
.data.rel.ro:000000000020DB3A                 db 0FFh
.data.rel.ro:000000000020DB3B                 db 0FFh
.data.rel.ro:000000000020DB3C                 db    0
.data.rel.ro:000000000020DB3D                 db    0
.data.rel.ro:000000000020DB3E                 db    0
.data.rel.ro:000000000020DB3F                 db    0
.data.rel.ro:000000000020DB40                 db    0
.data.rel.ro:000000000020DB41                 db    0
.data.rel.ro:000000000020DB42                 db    0
.data.rel.ro:000000000020DB43                 db    0
.data.rel.ro:000000000020DB44                 db    0
.data.rel.ro:000000000020DB45                 db    0
.data.rel.ro:000000000020DB46                 db    0
.data.rel.ro:000000000020DB47                 db    0
.data.rel.ro:000000000020DB48                 db    0
.data.rel.ro:000000000020DB49                 db    0
.data.rel.ro:000000000020DB4A                 db    0
.data.rel.ro:000000000020DB4B                 db    0
.data.rel.ro:000000000020DB4C                 db    0
.data.rel.ro:000000000020DB4D                 db    0
.data.rel.ro:000000000020DB4E                 db    0
.data.rel.ro:000000000020DB4F                 db    0
.data.rel.ro:000000000020DB50                 db    0
.data.rel.ro:000000000020DB51                 db    0
.data.rel.ro:000000000020DB52                 db    0
.data.rel.ro:000000000020DB53                 db    0
.data.rel.ro:000000000020DB54                 db    0
.data.rel.ro:000000000020DB55                 db    0
.data.rel.ro:000000000020DB56                 db    0
.data.rel.ro:000000000020DB57                 db    0
.data.rel.ro:000000000020DB58                 db    0
.data.rel.ro:000000000020DB59                 db    0
.data.rel.ro:000000000020DB5A                 db    0
.data.rel.ro:000000000020DB5B                 db    0
.data.rel.ro:000000000020DB5C                 db    0
.data.rel.ro:000000000020DB5D                 db    0
.data.rel.ro:000000000020DB5E                 db    0
.data.rel.ro:000000000020DB5F                 db    0
.data.rel.ro:000000000020DB60                 public quoting_style_args
.data.rel.ro:000000000020DB60 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020DB68                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020DB70                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020DB78                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020DB80                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020DB88                 dq offset file+1Bh      ; "c"
.data.rel.ro:000000000020DB90                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020DB98                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020DBA0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020DBA8                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020DBB0                 db    0
.data.rel.ro:000000000020DBB1                 db    0
.data.rel.ro:000000000020DBB2                 db    0
.data.rel.ro:000000000020DBB3                 db    0
.data.rel.ro:000000000020DBB4                 db    0
.data.rel.ro:000000000020DBB5                 db    0
.data.rel.ro:000000000020DBB6                 db    0
.data.rel.ro:000000000020DBB7                 db    0
.data.rel.ro:000000000020DBB7 _data_rel_ro    ends
.data.rel.ro:000000000020DBB7
LOAD:000000000020DBB8 ; ELF Dynamic Information
LOAD:000000000020DBB8 ; ===========================================================================
LOAD:000000000020DBB8
LOAD:000000000020DBB8 ; Segment type: Pure data
LOAD:000000000020DBB8 ; Segment permissions: Read/Write
LOAD:000000000020DBB8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020DBB8                 assume cs:LOAD
LOAD:000000000020DBB8                 ;org 20DBB8h
LOAD:000000000020DBB8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020DBB8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020DBB8                                         ; DT_NEEDED libc.so.6
LOAD:000000000020DBC8                 Elf64_Dyn <0Ch, 18E8h>  ; DT_INIT
LOAD:000000000020DBD8                 Elf64_Dyn <0Dh, 0A410h> ; DT_FINI
LOAD:000000000020DBE8                 Elf64_Dyn <19h, 20D9B0h> ; DT_INIT_ARRAY
LOAD:000000000020DBF8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020DC08                 Elf64_Dyn <1Ah, 20D9B8h> ; DT_FINI_ARRAY
LOAD:000000000020DC18                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020DC28                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020DC38                 Elf64_Dyn <5, 0A78h>    ; DT_STRTAB
LOAD:000000000020DC48                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020DC58                 Elf64_Dyn <0Ah, 368h>   ; DT_STRSZ
LOAD:000000000020DC68                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020DC78                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020DC88                 Elf64_Dyn <3, 20DDA8h>  ; DT_PLTGOT
LOAD:000000000020DC98                 Elf64_Dyn <2, 630h>     ; DT_PLTRELSZ
LOAD:000000000020DCA8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020DCB8                 Elf64_Dyn <17h, 12B8h>  ; DT_JMPREL
LOAD:000000000020DCC8                 Elf64_Dyn <7, 0EF8h>    ; DT_RELA
LOAD:000000000020DCD8                 Elf64_Dyn <8, 3C0h>     ; DT_RELASZ
LOAD:000000000020DCE8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020DCF8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020DD08                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020DD18                 Elf64_Dyn <6FFFFFFEh, 0E88h> ; DT_VERNEED
LOAD:000000000020DD28                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020DD38                 Elf64_Dyn <6FFFFFF0h, 0DE0h> ; DT_VERSYM
LOAD:000000000020DD48                 Elf64_Dyn <6FFFFFF9h, 1Ch> ; DT_RELACOUNT
LOAD:000000000020DD58                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020DD68                 db    0
LOAD:000000000020DD69                 db    0
LOAD:000000000020DD6A                 db    0
LOAD:000000000020DD6B                 db    0
LOAD:000000000020DD6C                 db    0
LOAD:000000000020DD6D                 db    0
LOAD:000000000020DD6E                 db    0
LOAD:000000000020DD6F                 db    0
LOAD:000000000020DD70                 db    0
LOAD:000000000020DD71                 db    0
LOAD:000000000020DD72                 db    0
LOAD:000000000020DD73                 db    0
LOAD:000000000020DD74                 db    0
LOAD:000000000020DD75                 db    0
LOAD:000000000020DD76                 db    0
LOAD:000000000020DD77                 db    0
LOAD:000000000020DD78                 db    0
LOAD:000000000020DD79                 db    0
LOAD:000000000020DD7A                 db    0
LOAD:000000000020DD7B                 db    0
LOAD:000000000020DD7C                 db    0
LOAD:000000000020DD7D                 db    0
LOAD:000000000020DD7E                 db    0
LOAD:000000000020DD7F                 db    0
LOAD:000000000020DD80                 db    0
LOAD:000000000020DD81                 db    0
LOAD:000000000020DD82                 db    0
LOAD:000000000020DD83                 db    0
LOAD:000000000020DD84                 db    0
LOAD:000000000020DD85                 db    0
LOAD:000000000020DD86                 db    0
LOAD:000000000020DD87                 db    0
LOAD:000000000020DD88                 db    0
LOAD:000000000020DD89                 db    0
LOAD:000000000020DD8A                 db    0
LOAD:000000000020DD8B                 db    0
LOAD:000000000020DD8C                 db    0
LOAD:000000000020DD8D                 db    0
LOAD:000000000020DD8E                 db    0
LOAD:000000000020DD8F                 db    0
LOAD:000000000020DD90                 db    0
LOAD:000000000020DD91                 db    0
LOAD:000000000020DD92                 db    0
LOAD:000000000020DD93                 db    0
LOAD:000000000020DD94                 db    0
LOAD:000000000020DD95                 db    0
LOAD:000000000020DD96                 db    0
LOAD:000000000020DD97                 db    0
LOAD:000000000020DD98                 db    0
LOAD:000000000020DD99                 db    0
LOAD:000000000020DD9A                 db    0
LOAD:000000000020DD9B                 db    0
LOAD:000000000020DD9C                 db    0
LOAD:000000000020DD9D                 db    0
LOAD:000000000020DD9E                 db    0
LOAD:000000000020DD9F                 db    0
LOAD:000000000020DDA0                 db    0
LOAD:000000000020DDA1                 db    0
LOAD:000000000020DDA2                 db    0
LOAD:000000000020DDA3                 db    0
LOAD:000000000020DDA4                 db    0
LOAD:000000000020DDA5                 db    0
LOAD:000000000020DDA6                 db    0
LOAD:000000000020DDA7                 db    0
LOAD:000000000020DDA7 LOAD            ends
LOAD:000000000020DDA7
.got:000000000020DDA8 ; ===========================================================================
.got:000000000020DDA8
.got:000000000020DDA8 ; Segment type: Pure data
.got:000000000020DDA8 ; Segment permissions: Read/Write
.got:000000000020DDA8 _got            segment qword public 'DATA' use64
.got:000000000020DDA8                 assume cs:_got
.got:000000000020DDA8                 ;org 20DDA8h
.got:000000000020DDA8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020DDB0 qword_20DDB0    dq 0                    ; DATA XREF: sub_1900↑r
.got:000000000020DDB8 qword_20DDB8    dq 0                    ; DATA XREF: sub_1900+6↑r
.got:000000000020DDC0 endgrent_ptr    dq offset endgrent      ; DATA XREF: _endgrent↑r
.got:000000000020DDC8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020DDD0 __errno_location_ptr dq offset __errno_location
.got:000000000020DDD0                                         ; DATA XREF: ___errno_location↑r
.got:000000000020DDD8 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020DDE0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020DDE8 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:000000000020DDF0 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020DDF8 qsort_ptr       dq offset qsort         ; DATA XREF: _qsort↑r
.got:000000000020DE00 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000020DE08 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020DE10 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020DE18 getpwuid_ptr    dq offset getpwuid      ; DATA XREF: _getpwuid↑r
.got:000000000020DE20 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020DE20                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020DE28 stpcpy_ptr      dq offset stpcpy        ; DATA XREF: _stpcpy↑r
.got:000000000020DE30 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020DE38 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020DE38                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020DE40 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020DE48 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:000000000020DE50 openat_ptr      dq offset openat        ; DATA XREF: _openat↑r
.got:000000000020DE58 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020DE58                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020DE60 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020DE68 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020DE70 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020DE78 getgrgid_ptr    dq offset getgrgid      ; DATA XREF: _getgrgid↑r
.got:000000000020DE80 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:000000000020DE88 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020DE90 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020DE98 __assert_fail_ptr dq offset __assert_fail
.got:000000000020DE98                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020DEA0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020DEA8 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000020DEB0 __openat_2_ptr  dq offset __openat_2    ; DATA XREF: ___openat_2↑r
.got:000000000020DEB8 closedir_ptr    dq offset closedir      ; DATA XREF: _closedir↑r
.got:000000000020DEC0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020DEC8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020DEC8                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020DED0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020DED8 dirfd_ptr       dq offset dirfd         ; DATA XREF: _dirfd↑r
.got:000000000020DEE0 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020DEE8 getgrnam_ptr    dq offset getgrnam      ; DATA XREF: _getgrnam↑r
.got:000000000020DEF0 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020DEF8 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000020DF00 readdir_ptr     dq offset readdir       ; DATA XREF: _readdir↑r
.got:000000000020DF08 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020DF10 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020DF18 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020DF20 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:000000000020DF28 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020DF30 fchdir_ptr      dq offset fchdir        ; DATA XREF: _fchdir↑r
.got:000000000020DF38 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020DF40 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020DF48 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020DF50 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000020DF58 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020DF60 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:000000000020DF68 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020DF70 fchown_ptr      dq offset fchown        ; DATA XREF: _fchown↑r
.got:000000000020DF78 fdopendir_ptr   dq offset fdopendir     ; DATA XREF: _fdopendir↑r
.got:000000000020DF80 strtoul_ptr     dq offset strtoul       ; DATA XREF: _strtoul↑r
.got:000000000020DF88 fstatfs_ptr     dq offset fstatfs       ; DATA XREF: _fstatfs↑r
.got:000000000020DF90 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020DF98 fchownat_ptr    dq offset fchownat      ; DATA XREF: _fchownat↑r
.got:000000000020DFA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020DFA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020DFB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020DFB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020DFB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020DFC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020DFC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020DFC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020DFD0 free_ptr        dq offset __imp_free    ; DATA XREF: free↑r
.got:000000000020DFD0                                         ; filesystem_type:loc_6910↑r ...
.got:000000000020DFD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020DFD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020DFE0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020DFE0                                         ; DATA XREF: start+24↑r
.got:000000000020DFE8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020DFE8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020DFF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020DFF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020DFF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020DFF8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020DFF8                                         ; __do_global_dtors_aux+9↑r
.got:000000000020DFF8 _got            ends
.got:000000000020DFF8
.data:000000000020E000 ; ===========================================================================
.data:000000000020E000
.data:000000000020E000 ; Segment type: Pure data
.data:000000000020E000 ; Segment permissions: Read/Write
.data:000000000020E000 _data           segment align_32 public 'DATA' use64
.data:000000000020E000                 assume cs:_data
.data:000000000020E000                 ;org 20E000h
.data:000000000020E000                 public __data_start ; weak
.data:000000000020E000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020E000                                         ; data_start
.data:000000000020E001                 db    0
.data:000000000020E002                 db    0
.data:000000000020E003                 db    0
.data:000000000020E004                 db    0
.data:000000000020E005                 db    0
.data:000000000020E006                 db    0
.data:000000000020E007                 db    0
.data:000000000020E008                 public __dso_handle
.data:000000000020E008 ; void *_dso_handle
.data:000000000020E008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020E008                                         ; atexit↑r ...
.data:000000000020E010                 public Version
.data:000000000020E010 Version         dq offset a831          ; DATA XREF: main+176↑r
.data:000000000020E010                                         ; "8.31"
.data:000000000020E018                 public exit_failure
.data:000000000020E018 ; int exit_failure
.data:000000000020E018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_38B2↑r
.data:000000000020E018                                         ; xalloc_die+17↑r
.data:000000000020E01C                 align 20h
.data:000000000020E020                 public quote_quoting_options
.data:000000000020E020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020E020                                         ; quote_mem↑o ...
.data:000000000020E021                 db    0
.data:000000000020E022                 db    0
.data:000000000020E023                 db    0
.data:000000000020E024                 db    0
.data:000000000020E025                 db    0
.data:000000000020E026                 db    0
.data:000000000020E027                 db    0
.data:000000000020E028                 db    0
.data:000000000020E029                 db    0
.data:000000000020E02A                 db    0
.data:000000000020E02B                 db    0
.data:000000000020E02C                 db    0
.data:000000000020E02D                 db    0
.data:000000000020E02E                 db    0
.data:000000000020E02F                 db    0
.data:000000000020E030                 db    0
.data:000000000020E031                 db    0
.data:000000000020E032                 db    0
.data:000000000020E033                 db    0
.data:000000000020E034                 db    0
.data:000000000020E035                 db    0
.data:000000000020E036                 db    0
.data:000000000020E037                 db    0
.data:000000000020E038                 db    0
.data:000000000020E039                 db    0
.data:000000000020E03A                 db    0
.data:000000000020E03B                 db    0
.data:000000000020E03C                 db    0
.data:000000000020E03D                 db    0
.data:000000000020E03E                 db    0
.data:000000000020E03F                 db    0
.data:000000000020E040                 db    0
.data:000000000020E041                 db    0
.data:000000000020E042                 db    0
.data:000000000020E043                 db    0
.data:000000000020E044                 db    0
.data:000000000020E045                 db    0
.data:000000000020E046                 db    0
.data:000000000020E047                 db    0
.data:000000000020E048                 db    0
.data:000000000020E049                 db    0
.data:000000000020E04A                 db    0
.data:000000000020E04B                 db    0
.data:000000000020E04C                 db    0
.data:000000000020E04D                 db    0
.data:000000000020E04E                 db    0
.data:000000000020E04F                 db    0
.data:000000000020E050                 db    0
.data:000000000020E051                 db    0
.data:000000000020E052                 db    0
.data:000000000020E053                 db    0
.data:000000000020E054                 db    0
.data:000000000020E055                 db    0
.data:000000000020E056                 db    0
.data:000000000020E057                 db    0
.data:000000000020E058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020E058                                         ; quotearg_n_options:loc_4D7D↑r ...
.data:000000000020E05C                 align 20h
.data:000000000020E060 ; void *slotvec
.data:000000000020E060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020E060                                         ; quotearg_n_options+76↑w ...
.data:000000000020E068                 align 10h
.data:000000000020E070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020E070                                         ; quotearg_n_options+187↑r ...
.data:000000000020E078 off_20E078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020E078 _data           ends
.data:000000000020E078
.bss:000000000020E080 ; ===========================================================================
.bss:000000000020E080
.bss:000000000020E080 ; Segment type: Uninitialized
.bss:000000000020E080 ; Segment permissions: Read/Write
.bss:000000000020E080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020E080                 assume cs:_bss
.bss:000000000020E080                 ;org 20E080h
.bss:000000000020E080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020E080                 public __bss_start ; weak
.bss:000000000020E080 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000009D0↑o
.bss:000000000020E080                                         ; LOAD:0000000000000A18↑o ...
.bss:000000000020E080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020E080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020E080                                         ; _edata
.bss:000000000020E080                                         ; Copy of shared data
.bss:000000000020E088                 public stdout@@GLIBC_2_2_5
.bss:000000000020E088 ; FILE *stdout
.bss:000000000020E088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009B8↑o
.bss:000000000020E088                                         ; main+16F↑r ...
.bss:000000000020E088                                         ; Alternative name is 'stdout'
.bss:000000000020E088                                         ; Copy of shared data
.bss:000000000020E090                 public optind@@GLIBC_2_2_5
.bss:000000000020E090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000A48↑o
.bss:000000000020E090                                         ; main:loc_1F5A↑r ...
.bss:000000000020E090                                         ; Alternative name is 'optind'
.bss:000000000020E090                                         ; Copy of shared data
.bss:000000000020E094                 align 8
.bss:000000000020E098                 public optarg@@GLIBC_2_2_5
.bss:000000000020E098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A60↑o
.bss:000000000020E098                                         ; main+148↑r
.bss:000000000020E098                                         ; Alternative name is 'optarg'
.bss:000000000020E098                                         ; Copy of shared data
.bss:000000000020E0A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020E0A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020E0A0                                         ; DATA XREF: LOAD:00000000000009E8↑o
.bss:000000000020E0A0                                         ; LOAD:0000000000000A00↑o ...
.bss:000000000020E0A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020E0A0                                         ; Copy of shared data
.bss:000000000020E0A8                 align 20h
.bss:000000000020E0C0                 public stderr@@GLIBC_2_2_5
.bss:000000000020E0C0 ; FILE *stderr
.bss:000000000020E0C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A30↑o
.bss:000000000020E0C0                                         ; usage+3D↑r ...
.bss:000000000020E0C0                                         ; Alternative name is 'stderr'
.bss:000000000020E0C0                                         ; Copy of shared data
.bss:000000000020E0C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020E0C8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020E0C9                 align 10h
.bss:000000000020E0D0 dev_ino_buf_7117 db    ? ;              ; DATA XREF: main:loc_2082↑o
.bss:000000000020E0D1                 db    ? ;
.bss:000000000020E0D2                 db    ? ;
.bss:000000000020E0D3                 db    ? ;
.bss:000000000020E0D4                 db    ? ;
.bss:000000000020E0D5                 db    ? ;
.bss:000000000020E0D6                 db    ? ;
.bss:000000000020E0D7                 db    ? ;
.bss:000000000020E0D8                 db    ? ;
.bss:000000000020E0D9                 db    ? ;
.bss:000000000020E0DA                 db    ? ;
.bss:000000000020E0DB                 db    ? ;
.bss:000000000020E0DC                 db    ? ;
.bss:000000000020E0DD                 db    ? ;
.bss:000000000020E0DE                 db    ? ;
.bss:000000000020E0DF                 db    ? ;
.bss:000000000020E0E0 ; char *reference_file
.bss:000000000020E0E0 reference_file  dq ?                    ; DATA XREF: main+14F↑w
.bss:000000000020E0E0                                         ; main+224↑r
.bss:000000000020E0E8 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020E0E8                                         ; close_stdout+1B↑r
.bss:000000000020E0E9                 align 10h
.bss:000000000020E0F0 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020E0F0                                         ; close_stdout+56↑r
.bss:000000000020E0F8                 public program_name
.bss:000000000020E0F8 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020E0F8                                         ; usage+1F2↑r ...
.bss:000000000020E100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020E100                                         ; quotearg_free+46↑o ...
.bss:000000000020E101                 db    ? ;
.bss:000000000020E102                 db    ? ;
.bss:000000000020E103                 db    ? ;
.bss:000000000020E104                 db    ? ;
.bss:000000000020E105                 db    ? ;
.bss:000000000020E106                 db    ? ;
.bss:000000000020E107                 db    ? ;
.bss:000000000020E108                 db    ? ;
.bss:000000000020E109                 db    ? ;
.bss:000000000020E10A                 db    ? ;
.bss:000000000020E10B                 db    ? ;
.bss:000000000020E10C                 db    ? ;
.bss:000000000020E10D                 db    ? ;
.bss:000000000020E10E                 db    ? ;
.bss:000000000020E10F                 db    ? ;
.bss:000000000020E110                 db    ? ;
.bss:000000000020E111                 db    ? ;
.bss:000000000020E112                 db    ? ;
.bss:000000000020E113                 db    ? ;
.bss:000000000020E114                 db    ? ;
.bss:000000000020E115                 db    ? ;
.bss:000000000020E116                 db    ? ;
.bss:000000000020E117                 db    ? ;
.bss:000000000020E118                 db    ? ;
.bss:000000000020E119                 db    ? ;
.bss:000000000020E11A                 db    ? ;
.bss:000000000020E11B                 db    ? ;
.bss:000000000020E11C                 db    ? ;
.bss:000000000020E11D                 db    ? ;
.bss:000000000020E11E                 db    ? ;
.bss:000000000020E11F                 db    ? ;
.bss:000000000020E120                 db    ? ;
.bss:000000000020E121                 db    ? ;
.bss:000000000020E122                 db    ? ;
.bss:000000000020E123                 db    ? ;
.bss:000000000020E124                 db    ? ;
.bss:000000000020E125                 db    ? ;
.bss:000000000020E126                 db    ? ;
.bss:000000000020E127                 db    ? ;
.bss:000000000020E128                 db    ? ;
.bss:000000000020E129                 db    ? ;
.bss:000000000020E12A                 db    ? ;
.bss:000000000020E12B                 db    ? ;
.bss:000000000020E12C                 db    ? ;
.bss:000000000020E12D                 db    ? ;
.bss:000000000020E12E                 db    ? ;
.bss:000000000020E12F                 db    ? ;
.bss:000000000020E130                 db    ? ;
.bss:000000000020E131                 db    ? ;
.bss:000000000020E132                 db    ? ;
.bss:000000000020E133                 db    ? ;
.bss:000000000020E134                 db    ? ;
.bss:000000000020E135                 db    ? ;
.bss:000000000020E136                 db    ? ;
.bss:000000000020E137                 db    ? ;
.bss:000000000020E138                 db    ? ;
.bss:000000000020E139                 db    ? ;
.bss:000000000020E13A                 db    ? ;
.bss:000000000020E13B                 db    ? ;
.bss:000000000020E13C                 db    ? ;
.bss:000000000020E13D                 db    ? ;
.bss:000000000020E13E                 db    ? ;
.bss:000000000020E13F                 db    ? ;
.bss:000000000020E140                 db    ? ;
.bss:000000000020E141                 db    ? ;
.bss:000000000020E142                 db    ? ;
.bss:000000000020E143                 db    ? ;
.bss:000000000020E144                 db    ? ;
.bss:000000000020E145                 db    ? ;
.bss:000000000020E146                 db    ? ;
.bss:000000000020E147                 db    ? ;
.bss:000000000020E148                 db    ? ;
.bss:000000000020E149                 db    ? ;
.bss:000000000020E14A                 db    ? ;
.bss:000000000020E14B                 db    ? ;
.bss:000000000020E14C                 db    ? ;
.bss:000000000020E14D                 db    ? ;
.bss:000000000020E14E                 db    ? ;
.bss:000000000020E14F                 db    ? ;
.bss:000000000020E150                 db    ? ;
.bss:000000000020E151                 db    ? ;
.bss:000000000020E152                 db    ? ;
.bss:000000000020E153                 db    ? ;
.bss:000000000020E154                 db    ? ;
.bss:000000000020E155                 db    ? ;
.bss:000000000020E156                 db    ? ;
.bss:000000000020E157                 db    ? ;
.bss:000000000020E158                 db    ? ;
.bss:000000000020E159                 db    ? ;
.bss:000000000020E15A                 db    ? ;
.bss:000000000020E15B                 db    ? ;
.bss:000000000020E15C                 db    ? ;
.bss:000000000020E15D                 db    ? ;
.bss:000000000020E15E                 db    ? ;
.bss:000000000020E15F                 db    ? ;
.bss:000000000020E160                 db    ? ;
.bss:000000000020E161                 db    ? ;
.bss:000000000020E162                 db    ? ;
.bss:000000000020E163                 db    ? ;
.bss:000000000020E164                 db    ? ;
.bss:000000000020E165                 db    ? ;
.bss:000000000020E166                 db    ? ;
.bss:000000000020E167                 db    ? ;
.bss:000000000020E168                 db    ? ;
.bss:000000000020E169                 db    ? ;
.bss:000000000020E16A                 db    ? ;
.bss:000000000020E16B                 db    ? ;
.bss:000000000020E16C                 db    ? ;
.bss:000000000020E16D                 db    ? ;
.bss:000000000020E16E                 db    ? ;
.bss:000000000020E16F                 db    ? ;
.bss:000000000020E170                 db    ? ;
.bss:000000000020E171                 db    ? ;
.bss:000000000020E172                 db    ? ;
.bss:000000000020E173                 db    ? ;
.bss:000000000020E174                 db    ? ;
.bss:000000000020E175                 db    ? ;
.bss:000000000020E176                 db    ? ;
.bss:000000000020E177                 db    ? ;
.bss:000000000020E178                 db    ? ;
.bss:000000000020E179                 db    ? ;
.bss:000000000020E17A                 db    ? ;
.bss:000000000020E17B                 db    ? ;
.bss:000000000020E17C                 db    ? ;
.bss:000000000020E17D                 db    ? ;
.bss:000000000020E17E                 db    ? ;
.bss:000000000020E17F                 db    ? ;
.bss:000000000020E180                 db    ? ;
.bss:000000000020E181                 db    ? ;
.bss:000000000020E182                 db    ? ;
.bss:000000000020E183                 db    ? ;
.bss:000000000020E184                 db    ? ;
.bss:000000000020E185                 db    ? ;
.bss:000000000020E186                 db    ? ;
.bss:000000000020E187                 db    ? ;
.bss:000000000020E188                 db    ? ;
.bss:000000000020E189                 db    ? ;
.bss:000000000020E18A                 db    ? ;
.bss:000000000020E18B                 db    ? ;
.bss:000000000020E18C                 db    ? ;
.bss:000000000020E18D                 db    ? ;
.bss:000000000020E18E                 db    ? ;
.bss:000000000020E18F                 db    ? ;
.bss:000000000020E190                 db    ? ;
.bss:000000000020E191                 db    ? ;
.bss:000000000020E192                 db    ? ;
.bss:000000000020E193                 db    ? ;
.bss:000000000020E194                 db    ? ;
.bss:000000000020E195                 db    ? ;
.bss:000000000020E196                 db    ? ;
.bss:000000000020E197                 db    ? ;
.bss:000000000020E198                 db    ? ;
.bss:000000000020E199                 db    ? ;
.bss:000000000020E19A                 db    ? ;
.bss:000000000020E19B                 db    ? ;
.bss:000000000020E19C                 db    ? ;
.bss:000000000020E19D                 db    ? ;
.bss:000000000020E19E                 db    ? ;
.bss:000000000020E19F                 db    ? ;
.bss:000000000020E1A0                 db    ? ;
.bss:000000000020E1A1                 db    ? ;
.bss:000000000020E1A2                 db    ? ;
.bss:000000000020E1A3                 db    ? ;
.bss:000000000020E1A4                 db    ? ;
.bss:000000000020E1A5                 db    ? ;
.bss:000000000020E1A6                 db    ? ;
.bss:000000000020E1A7                 db    ? ;
.bss:000000000020E1A8                 db    ? ;
.bss:000000000020E1A9                 db    ? ;
.bss:000000000020E1AA                 db    ? ;
.bss:000000000020E1AB                 db    ? ;
.bss:000000000020E1AC                 db    ? ;
.bss:000000000020E1AD                 db    ? ;
.bss:000000000020E1AE                 db    ? ;
.bss:000000000020E1AF                 db    ? ;
.bss:000000000020E1B0                 db    ? ;
.bss:000000000020E1B1                 db    ? ;
.bss:000000000020E1B2                 db    ? ;
.bss:000000000020E1B3                 db    ? ;
.bss:000000000020E1B4                 db    ? ;
.bss:000000000020E1B5                 db    ? ;
.bss:000000000020E1B6                 db    ? ;
.bss:000000000020E1B7                 db    ? ;
.bss:000000000020E1B8                 db    ? ;
.bss:000000000020E1B9                 db    ? ;
.bss:000000000020E1BA                 db    ? ;
.bss:000000000020E1BB                 db    ? ;
.bss:000000000020E1BC                 db    ? ;
.bss:000000000020E1BD                 db    ? ;
.bss:000000000020E1BE                 db    ? ;
.bss:000000000020E1BF                 db    ? ;
.bss:000000000020E1C0                 db    ? ;
.bss:000000000020E1C1                 db    ? ;
.bss:000000000020E1C2                 db    ? ;
.bss:000000000020E1C3                 db    ? ;
.bss:000000000020E1C4                 db    ? ;
.bss:000000000020E1C5                 db    ? ;
.bss:000000000020E1C6                 db    ? ;
.bss:000000000020E1C7                 db    ? ;
.bss:000000000020E1C8                 db    ? ;
.bss:000000000020E1C9                 db    ? ;
.bss:000000000020E1CA                 db    ? ;
.bss:000000000020E1CB                 db    ? ;
.bss:000000000020E1CC                 db    ? ;
.bss:000000000020E1CD                 db    ? ;
.bss:000000000020E1CE                 db    ? ;
.bss:000000000020E1CF                 db    ? ;
.bss:000000000020E1D0                 db    ? ;
.bss:000000000020E1D1                 db    ? ;
.bss:000000000020E1D2                 db    ? ;
.bss:000000000020E1D3                 db    ? ;
.bss:000000000020E1D4                 db    ? ;
.bss:000000000020E1D5                 db    ? ;
.bss:000000000020E1D6                 db    ? ;
.bss:000000000020E1D7                 db    ? ;
.bss:000000000020E1D8                 db    ? ;
.bss:000000000020E1D9                 db    ? ;
.bss:000000000020E1DA                 db    ? ;
.bss:000000000020E1DB                 db    ? ;
.bss:000000000020E1DC                 db    ? ;
.bss:000000000020E1DD                 db    ? ;
.bss:000000000020E1DE                 db    ? ;
.bss:000000000020E1DF                 db    ? ;
.bss:000000000020E1E0                 db    ? ;
.bss:000000000020E1E1                 db    ? ;
.bss:000000000020E1E2                 db    ? ;
.bss:000000000020E1E3                 db    ? ;
.bss:000000000020E1E4                 db    ? ;
.bss:000000000020E1E5                 db    ? ;
.bss:000000000020E1E6                 db    ? ;
.bss:000000000020E1E7                 db    ? ;
.bss:000000000020E1E8                 db    ? ;
.bss:000000000020E1E9                 db    ? ;
.bss:000000000020E1EA                 db    ? ;
.bss:000000000020E1EB                 db    ? ;
.bss:000000000020E1EC                 db    ? ;
.bss:000000000020E1ED                 db    ? ;
.bss:000000000020E1EE                 db    ? ;
.bss:000000000020E1EF                 db    ? ;
.bss:000000000020E1F0                 db    ? ;
.bss:000000000020E1F1                 db    ? ;
.bss:000000000020E1F2                 db    ? ;
.bss:000000000020E1F3                 db    ? ;
.bss:000000000020E1F4                 db    ? ;
.bss:000000000020E1F5                 db    ? ;
.bss:000000000020E1F6                 db    ? ;
.bss:000000000020E1F7                 db    ? ;
.bss:000000000020E1F8                 db    ? ;
.bss:000000000020E1F9                 db    ? ;
.bss:000000000020E1FA                 db    ? ;
.bss:000000000020E1FB                 db    ? ;
.bss:000000000020E1FC                 db    ? ;
.bss:000000000020E1FD                 db    ? ;
.bss:000000000020E1FE                 db    ? ;
.bss:000000000020E1FF                 db    ? ;
.bss:000000000020E200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020E200                                         ; get_quoting_style↑o ...
.bss:000000000020E210 xmmword_20E210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020E210                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020E220 xmmword_20E220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020E220                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020E230 qword_20E230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020E230                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020E238 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000020E238                                         ; rpl_fcntl:loc_A0DF↑w ...
.bss:000000000020E23C                 align 20h
.bss:000000000020E23C _bss            ends
.bss:000000000020E23C
.prgend:000000000020E240 ; ===========================================================================
.prgend:000000000020E240
.prgend:000000000020E240 ; Segment type: Zero-length
.prgend:000000000020E240 _prgend         segment byte public '' use64
.prgend:000000000020E240 _end            label byte
.prgend:000000000020E240 _prgend         ends
.prgend:000000000020E240
extern:000000000020E248 ; ===========================================================================
extern:000000000020E248
extern:000000000020E248 ; Segment type: Externs
extern:000000000020E248 ; extern
extern:000000000020E248 ; void endgrent(void)
extern:000000000020E248                 extrn endgrent:near     ; CODE XREF: _endgrent↑j
extern:000000000020E248                                         ; DATA XREF: .got:endgrent_ptr↑o
extern:000000000020E250 ; void free(void *ptr)
extern:000000000020E250                 extrn __imp_free:near   ; CODE XREF: free↑j
extern:000000000020E250                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020E258 ; void __noreturn abort(void)
extern:000000000020E258                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020E258                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020E260 ; int *_errno_location(void)
extern:000000000020E260                 extrn __errno_location:near
extern:000000000020E260                                         ; CODE XREF: ___errno_location↑j
extern:000000000020E260                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020E268 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020E268                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020E268                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020E270 ; void __noreturn exit(int status)
extern:000000000020E270                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020E270                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020E278 ; char *strcpy(char *dest, const char *src)
extern:000000000020E278                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:000000000020E278                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:000000000020E280 ; size_t _fpending(FILE *fp)
extern:000000000020E280                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020E280                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020E288 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
extern:000000000020E288                 extrn qsort:near        ; CODE XREF: _qsort↑j
extern:000000000020E288                                         ; DATA XREF: .got:qsort_ptr↑o
extern:000000000020E290 ; int fcntl(int fd, int cmd, ...)
extern:000000000020E290                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000020E290                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000020E298 ; char *textdomain(const char *domainname)
extern:000000000020E298                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020E298                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020E2A0 ; int fclose(FILE *stream)
extern:000000000020E2A0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020E2A0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020E2A8 ; struct passwd *getpwuid(__uid_t uid)
extern:000000000020E2A8                 extrn getpwuid:near     ; CODE XREF: _getpwuid↑j
extern:000000000020E2A8                                         ; DATA XREF: .got:getpwuid_ptr↑o
extern:000000000020E2B0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020E2B0                 extrn bindtextdomain:near
extern:000000000020E2B0                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020E2B0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020E2B8 ; char *stpcpy(char *dest, const char *src)
extern:000000000020E2B8                 extrn stpcpy:near       ; CODE XREF: _stpcpy↑j
extern:000000000020E2B8                                         ; DATA XREF: .got:stpcpy_ptr↑o
extern:000000000020E2C0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020E2C0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020E2C0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020E2C8 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020E2C8                 extrn __ctype_get_mb_cur_max:near
extern:000000000020E2C8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020E2C8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020E2D0 ; size_t strlen(const char *s)
extern:000000000020E2D0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020E2D0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020E2D8 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020E2D8                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:000000000020E2D8                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:000000000020E2E0 ; int openat(int fd, const char *file, int oflag, ...)
extern:000000000020E2E0                 extrn openat:near       ; CODE XREF: _openat↑j
extern:000000000020E2E0                                         ; DATA XREF: .got:openat_ptr↑o
extern:000000000020E2E8                 extrn __stack_chk_fail:near
extern:000000000020E2E8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020E2E8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020E2F0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020E2F0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020E2F0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020E2F8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020E2F8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020E2F8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020E300 ; char *strchr(const char *s, int c)
extern:000000000020E300                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020E300                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020E308 ; struct group *getgrgid(__gid_t gid)
extern:000000000020E308                 extrn getgrgid:near     ; CODE XREF: _getgrgid↑j
extern:000000000020E308                                         ; DATA XREF: .got:getgrgid_ptr↑o
extern:000000000020E310 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:000000000020E310                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:000000000020E310                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:000000000020E318 ; char *strrchr(const char *s, int c)
extern:000000000020E318                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020E318                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020E320 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020E320                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020E320                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020E328 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020E328                 extrn __assert_fail:near
extern:000000000020E328                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020E328                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020E330 ; void *memset(void *s, int c, size_t n)
extern:000000000020E330                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020E330                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020E338 ; int close(int fd)
extern:000000000020E338                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020E338                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020E340                 extrn __openat_2:near   ; CODE XREF: ___openat_2↑j
extern:000000000020E340                                         ; DATA XREF: .got:__openat_2_ptr↑o
extern:000000000020E348 ; int closedir(DIR *dirp)
extern:000000000020E348                 extrn closedir:near     ; CODE XREF: _closedir↑j
extern:000000000020E348                                         ; DATA XREF: .got:closedir_ptr↑o
extern:000000000020E350 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020E350                 extrn __libc_start_main:near
extern:000000000020E350                                         ; CODE XREF: start+24↑p
extern:000000000020E350                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020E358 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020E358                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020E358                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020E360 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020E360                 extrn fputs_unlocked:near
extern:000000000020E360                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020E360                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020E368 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020E368                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020E368                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020E370 ; int dirfd(DIR *dirp)
extern:000000000020E370                 extrn dirfd:near        ; CODE XREF: _dirfd↑j
extern:000000000020E370                                         ; DATA XREF: .got:dirfd_ptr↑o
extern:000000000020E378 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020E378                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020E378                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020E380 ; struct group *getgrnam(const char *name)
extern:000000000020E380                 extrn getgrnam:near     ; CODE XREF: _getgrnam↑j
extern:000000000020E380                                         ; DATA XREF: .got:getgrnam_ptr↑o
extern:000000000020E388 ; int fileno(FILE *stream)
extern:000000000020E388                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020E388                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020E390 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020E390                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000020E390                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000020E398 ; struct dirent *readdir(DIR *dirp)
extern:000000000020E398                 extrn readdir:near      ; CODE XREF: _readdir↑j
extern:000000000020E398                                         ; DATA XREF: .got:readdir_ptr↑o
extern:000000000020E3A0 ; void *malloc(size_t size)
extern:000000000020E3A0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020E3A0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020E3A8 ; int fflush(FILE *stream)
extern:000000000020E3A8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020E3A8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020E3B0 ; char *nl_langinfo(nl_item item)
extern:000000000020E3B0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020E3B0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020E3B8 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:000000000020E3B8                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:000000000020E3B8                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:000000000020E3C0 ; int _freading(FILE *fp)
extern:000000000020E3C0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020E3C0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020E3C8 ; int fchdir(int fd)
extern:000000000020E3C8                 extrn fchdir:near       ; CODE XREF: _fchdir↑j
extern:000000000020E3C8                                         ; DATA XREF: .got:fchdir_ptr↑o
extern:000000000020E3D0 ; void *realloc(void *ptr, size_t size)
extern:000000000020E3D0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020E3D0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020E3D8 ; char *setlocale(int category, const char *locale)
extern:000000000020E3D8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020E3D8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020E3E0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020E3E0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020E3E8 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000020E3E8                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000020E3E8                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000020E3F0 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020E3F0                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020E3F0                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020E3F8 ; int open(const char *file, int oflag, ...)
extern:000000000020E3F8                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000020E3F8                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000020E400 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020E400                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020E400                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020E408 ; int fchown(int fd, __uid_t owner, __gid_t group)
extern:000000000020E408                 extrn fchown:near       ; CODE XREF: _fchown↑j
extern:000000000020E408                                         ; DATA XREF: .got:fchown_ptr↑o
extern:000000000020E410 ; DIR *fdopendir(int fd)
extern:000000000020E410                 extrn fdopendir:near    ; CODE XREF: _fdopendir↑j
extern:000000000020E410                                         ; DATA XREF: .got:fdopendir_ptr↑o
extern:000000000020E418 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
extern:000000000020E418                 extrn strtoul:near      ; CODE XREF: _strtoul↑j
extern:000000000020E418                                         ; DATA XREF: .got:strtoul_ptr↑o
extern:000000000020E420 ; int fstatfs(int fildes, struct statfs *buf)
extern:000000000020E420                 extrn fstatfs:near      ; CODE XREF: _fstatfs↑j
extern:000000000020E420                                         ; DATA XREF: .got:fstatfs_ptr↑o
extern:000000000020E428 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020E428                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020E428                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020E430 ; int fchownat(int fd, const char *file, __uid_t owner, __gid_t group, int flag)
extern:000000000020E430                 extrn fchownat:near     ; CODE XREF: _fchownat↑j
extern:000000000020E430                                         ; DATA XREF: .got:fchownat_ptr↑o
extern:000000000020E438 ; void __noreturn exit(int status)
extern:000000000020E438                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020E438                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020E440 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020E440                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020E440                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020E448                 extrn __fprintf_chk:near
extern:000000000020E448                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020E448                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020E450 ; int mbsinit(const mbstate_t *ps)
extern:000000000020E450                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020E450                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020E458 ; int iswprint(wint_t wc)
extern:000000000020E458                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020E458                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020E460 ; int __fastcall __cxa_finalize(void *)
extern:000000000020E460                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020E460                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020E460                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020E468 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020E468                 extrn __ctype_b_loc:near
extern:000000000020E468                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020E468                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020E470                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020E470                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020E478                 extrn __gmon_start__:near ; weak
extern:000000000020E478                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020E478                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020E480                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020E480                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020E480
extern:000000000020E480
extern:000000000020E480                 end start
